
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТипыКлюча = Метаданные.Справочники.КлючиРеестраДокументов.Реквизиты.Ключ.Тип.Типы();
	
	Элементы.ТипЗначения.СписокВыбора.Добавить("", НСтр("ru = '<Все типы>';
														|en = '<All types>'"));
	
	Для каждого ТипКлюча Из ТипыКлюча Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипКлюча);
		
		Если МетаданныеТипа <> Неопределено Тогда
			ПолноеИмя = МетаданныеТипа.ПолноеИмя();
			Элементы.ТипЗначения.СписокВыбора.Добавить(ПолноеИмя, МетаданныеТипа.Представление());
			ПустоеЗначение = ПредопределенноеЗначение(ПолноеИмя + ".ПустаяСсылка");
			ПустыеЗначенияКлюча.Добавить(ПустоеЗначение);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьУсловноеОформление();
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТипЗначенияКлюча", ТипЗнч(Неопределено));
	
	ЕстьДубли = Справочники.КлючиРеестраДокументов.ЕстьДубли();
	
	Элементы.Список.ИзменятьСоставСтрок = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	НастроитьФорму();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОшибкаУдаленияДублейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЗапускатьНеВФоне", Истина);
	ПараметрыОтбора.Вставить("ДатаНачала", ВремяНачалаИсправления);
	ПараметрыОтбора.Вставить("СобытиеЖурналаРегистрации", ИмяСобытияЖурналаУдаленияДублей());
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЕстьДублиВГлавномУзелРИБОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	УдалитьДубли();
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	ТипЗначенияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьФорму()
	
	Элементы.ДекорацияОшибкаУдаленияДублей.Видимость         = (ЕстьДубли = "Ошибка");
	Элементы.ДекорацияЕстьДублиВПодчиненномУзлеРИБ.Видимость = (ЕстьДубли = "ЕстьДублиВПодчиненномУзлеРИБ");
	Элементы.ДекорацияЕстьДублиВГлавномУзелРИБ.Видимость     = (ЕстьДубли = "ЕстьДублиВГлавномУзлеРИБ");
	Элементы.ДекорацияНетДублей.Видимость                    = (ЕстьДубли = "Нет");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСобытияЖурналаУдаленияДублей()
	Возврат Справочники.КлючиРеестраДокументов.ИмяСобытияЖурналаУдаленияДублей();
КонецФункции

&НаКлиенте
Процедура УдалитьДубли()
	
	ФоновоеЗадание = УдалитьДублиСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеУдаленияДублей", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция УдалитьДублиСервер()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление дублей ключей рееста документов';
																|en = 'Removing registry documents duplicate keys'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Справочники.КлючиРеестраДокументов.НайтиИУдалитьДублиВФормеСписка",
		Новый Структура, ПараметрыВыполненияВФоне);
		
	ВремяНачалаИсправления = ТекущаяДатаСеанса();
		
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияДублей(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
	
		Если ЭтоАдресВременногоХранилища(ФоновоеЗадание.АдресРезультата) Тогда
			ПослеУдаленияДублейСервер(ФоновоеЗадание.АдресРезультата);
		КонецЕсли;
		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить выполнения задания по причине: %Причина%';
									|en = 'Cannot complete job due to: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияДублейСервер(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	ЕстьДубли = Результат.ЕстьДубли;
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ТипЗначенияПриИзмененииНаСервере()
	
	Если ПустаяСтрока(ТипЗначения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТипЗначенияКлюча", ТипЗнч(Неопределено));
	Иначе	
		
		МетаданныеКлюча = Метаданные.НайтиПоПолномуИмени(ТипЗначения);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
			"ТипЗначенияКлюча",
			ТипЗнч(МетаданныеКлюча.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение()));
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Наименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Ключ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ПустыеЗначенияКлюча;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<пустое значение>';
																|en = '<empty value>'"));
	
КонецПроцедуры

#КонецОбласти
