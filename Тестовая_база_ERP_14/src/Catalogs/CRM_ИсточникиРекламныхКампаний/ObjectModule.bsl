#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЪЕКТА

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;

	// Заполнить служебный регистр для дальнейшей обработки
	новаяЗапись = РегистрыСведений.CRM_ИсточникиКампаний.СоздатьМенеджерЗаписи();
	новаяЗапись.ИсточникиКампаний         = Ссылка;
	новаяЗапись.СценарийАналитики         = СценарийАнатилики;
	
	новаяЗапись.Прочитать();
	
	Если НЕ Включено ИЛИ ПометкаУдаления = Истина тогда
		
		новаяЗапись.Удалить();
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			GUIDЗадания = Ссылка.УникальныйИдентификатор();
			РегламентноеЗадание = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Ключ",GUIDЗадания));
			Если НЕ РегламентноеЗадание = Неопределено Тогда
				Если РегламентноеЗадание.Количество() > 0 Тогда
					РегламентноеЗадание[0].Удалить();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;

	иначе
		
		новаяЗапись.ИсточникиКампаний         		= Ссылка;
		новаяЗапись.СценарийАналитики         		= СценарийАнатилики;
		новаяЗапись.Логин         					= Логин;
		новаяЗапись.Пароль         					= Пароль;
		новаяЗапись.УчетнаяЗапись         			= УчетнаяЗапись;
		новаяЗапись.АдресОтправителя         		= ИсточникПисьма;
		новаяЗапись.ТемаПисьма         				= ТемаПисьма;
		новаяЗапись.OAuthТокен         				= OAuthТокен;
		новаяЗапись.RefreshТокен         			= RefreshТокен;
		новаяЗапись.Визиты 							= ПоказательВизиты;
		новаяЗапись.ГлубинаПросмотра 				= ПоказательГлубинаПросмотра;
		новаяЗапись.КаналПервичногоИнтереса 		= ПоказательИсточникиТрафика;
		новаяЗапись.Посетители 						= ПоказательПосетители;
		новаяЗапись.Отказы 							= ПоказательОтказы;
		новаяЗапись.ЦелевыеДействия 				= ПоказательЦелевыеДействия;
		новаяЗапись.География 						= ПоказательГеография;
		новаяЗапись.ВремяНаСайте 					= ПоказательВремяНаСайте;
		новаяЗапись.Устройства 						= ПоказательУстройства;
		новаяЗапись.CRM_РекламнаяКампания			= ПоказательРекламнаяКампания;
		новаяЗапись.URL								= ПоказательURL;
		новаяЗапись.Source							= ПоказательSource;
		новаяЗапись.Medium							= ПоказательMedium;
		новаяЗапись.ClientID						= ПоказательClientID;
		новаяЗапись.YD_Login						= YD_Login;
		новаяЗапись.YD_Token						= YD_Token;
		новаяЗапись.YD_Валюта						= YD_Валюта;
		новаяЗапись.YD_ЗагружатьЗатраты				= ПоказательЯндексДирект;
		новаяЗапись.Client_id						= Client_id;
		новаяЗапись.Client_secret					= Client_secret;
		
		новаяЗапись.РасписаниеРегламентногоЗадания 	= ПолучитьИзВременногоХранилища(АдресРасписания);
		
		новаяЗапись.Записать(Истина);
		
	КонецЕсли;
	
	Если НЕ ПометкаУдаления Тогда
		Если ДозагрузкаВыполнена Тогда
			ДатаДозагрузки = Дата(1,1,1);
		КонецЕсли;
		CRM_СистемаСквознойАналитикиСервер.CRM_ПолучитьРегЗаданияПоСценарию(Ссылка,СценарийАнатилики,АдресРасписания,ДатаДозагрузки);
		ДозагрузкаВыполнена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обменивает заранее полученный код авторизации на токен. Код авторизации нужно
// предварительно поместить в реквизит обработки КодАвторизации. Полученный токен 
// записывается в реквизит Токен. Требуется для работоспособности других методов.
//
Процедура ПолучитьТокен(КодАвторизации, Отказ = Ложь) Экспорт
	
	ИмяСервера = "oauth.yandex.ru";
	ОтносительныйURL = "/token";
	
	СтрокаЗапроса = "grant_type=authorization_code" +
	"&code=" 			+ КодАвторизации + 
	"&client_id=" 		+ Client_id + 
	"&client_secret=" 	+ Client_secret;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", XMLСтрока(СтрДлина(СтрокаЗапроса)));
	
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	HttpЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос);
	
	ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ОбработатьКодСостояния(HttpОтвет, ОтносительныйURL, ТелоОтвета, Отказ);
	
	Если Не Отказ Тогда 
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ТелоОтвета);
		Ответ = ФабрикаXDTO.ПрочитатьJSON(Чтение);
		
		OAuthТокен = Ответ.access_token;
		RefreshТокен = Ответ.refresh_token;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКодСостояния(Знач HttpОтвет, Знач ОтносительныйURL, Знач ТелоОтвета = "",Отказ = Ложь)
	
	Перем ТекстИсключения;
	
	Если (HttpОтвет.КодСостояния < 200) Или (HttpОтвет.КодСостояния >= 300) Тогда
		
		ТекстИсключения = "Запрос: " + ОтносительныйURL + Символы.ПС;
		ТекстИсключения = ТекстИсключения + "Код ответа: " + HttpОтвет.КодСостояния + Символы.ПС;
		ТекстИсключения = ТекстИсключения + "Тело ответа: " + ТелоОтвета;
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации("Ошибка получения токена",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.CRM_ИсточникиРекламныхКампаний,
			,
			ТекстИсключения);
		
	КонецЕсли;
		
КонецПроцедуры

// Обменивает заранее полученный код авторизации на токен. Код авторизации нужно
// предварительно поместить в реквизит обработки КодАвторизации. Полученный токен 
// записывается в реквизит Токен. Требуется для работоспособности других методов.
Процедура ПолучитьТокенGoogle(ОтладочныйТокен, Отказ = Ложь) Экспорт
	
	ИмяСервера 	= "www.googleapis.com";	
	АдресРесурса = "/oauth2/v4/token";
	стрЗапроса = "code="+ ОтладочныйТокен + 
	"&client_id=" 		+ Client_id +
	"&client_secret=" 	+ Client_secret +
	"&redirect_uri=urn:ietf:wg:oauth:2.0:oob&grant_type=authorization_code";	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", XMLСтрока(СтрДлина(стрЗапроса)));
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(стрЗапроса,КодировкаТекста.UTF8);
	HttpСоединение = Новый HTTPСоединение(ИмяСервера,443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос);
	
	стрОтвета = HttpОтвет.ПолучитьТелоКакСтроку();		
	
	ОбработатьКодСостояния(HttpОтвет,стрЗапроса,стрОтвета,Отказ);
		
	Если Не Отказ Тогда 
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(стрОтвета);
		
		СтрутураОтвета = ПрочитатьJSON(ЧтениеJSON);
		OAuthТокен = СтрутураОтвета.access_token;
		RefreshТокен = СтрутураОтвета.refresh_token;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИнформациюПоПодключению() Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Если СценарийАнатилики = Перечисления.CRM_СценарииПолученияАналитики.ЯндексМетрика Тогда
		
		АдресСервера = "api-metrika.yandex.ru";
		
		ССЛ = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение(АдресСервера,,,,,,ССЛ,Ложь);
		
		// Получение доступных счетчиков
		Ресурс = "/management/v1/counters";
		
		ПараметрыСчетчика = "";
		
		HTTPЗапрос = Новый HTTPЗапрос;
		HTTPЗапрос.АдресРесурса = Ресурс + ПараметрыСчетчика;
		// Изменение API Метрика 13.02.2019
		HTTPЗапрос.Заголовки.Вставить("Authorization", "OAuth " + OAuthТокен);
		
		ОтветHTTP = Соединение.Получить(HTTPЗапрос);
		
		Если ОтветHTTP.КодСостояния = 200 Тогда
			СтруктураВозврата.Вставить("ЕстьОшибка", Ложь);
			
		Иначе
			СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
			СтруктураВозврата.Вставить("Текст","Код ошибки " + ОтветHTTP.КодСостояния +  "; описание : " + ОтветHTTP.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	ИначеЕсли СценарийАнатилики = Перечисления.CRM_СценарииПолученияАналитики.GoogleAnalytics Тогда
		
		ИмяСервера 	= "www.googleapis.com";	
		АдресРесурса = "/analytics/v3/management/accountSummaries";
		стрЗапроса = "?access_token=" + OAuthТокен;	
		
		Заголовки = Новый Соответствие;
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + стрЗапроса, Заголовки);
		
		HttpСоединение = Новый HTTPСоединение(ИмяСервера,443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
		
		ОтветHTTP = HttpСоединение.Получить(HttpЗапрос);
		
		Если ОтветHTTP.КодСостояния =  200 Тогда
			СтруктураВозврата.Вставить("ЕстьОшибка", Ложь);
		Иначе
			СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
			СтруктураВозврата.Вставить("Текст","Код ошибки " + ОтветHTTP.КодСостояния +  "; описание : " + ОтветHTTP.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗапуститьЗаданиеВРучную() Экспорт
	
	МассивПараметров = Новый массив;
	МассивПараметров.Добавить(Ссылка);
	МассивПараметров.Добавить(СценарийАнатилики);
	МассивПараметров.Добавить(ДатаДозагрузки);
	
	ФонЗадание = ФоновыеЗадания.Выполнить("CRM_СистемаСквознойАналитикиСервер.ДозагрузитьДанныеПоАналитике",МассивПараметров,,"Дозагрузка данных по " + Наименование);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли