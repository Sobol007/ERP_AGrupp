
&НаКлиенте
Процедура СтрокаПоискаРекламнойКампанииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтрокаПоискаРекламнойКампании) Тогда
		  Элементы.РекламныеКампании.ОтборСтрок = Новый ФиксированнаяСтруктура("Наименование", СтрокаПоискаРекламнойКампании);
	Иначе Элементы.РекламныеКампании.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, HTTPМетод, json = Неопределено)
	
	СтруктураURI = сфпОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Authorization", "OAuth " + Токен);
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
			
	Если ВРЕГ(Лев(URL, 5)) = ВРЕГ("HTTPS") Тогда
		  HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Иначе HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт);
	КонецЕсли;	  
	
	Если json <> Неопределено Тогда
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		HTTPЗапрос.УстановитьТелоИзСтроки(json);
	КонецЕсли;	
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаСервере
Функция Яндекс_ПолучитьСчетчики()
	
	Токен = Объект.OAuthТокен;
	
	URL = "https://api-metrika.yandex.net/management/v1/counters";
	РезультатЗапроса = Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, "GET");
	
	Счетчики = Новый Массив();
	
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
		РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
				
		Для Каждого Счетчик Из РезультатЗапросаJSON.counters Цикл
			СтруктураСчетчика = Новый Структура("Идентификатор, Сайт", Счетчик.id, Счетчик.site);
			Счетчики.Добавить(СтруктураСчетчика);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Счетчики;

КонецФункции

&НаСервере
Функция Яндекс_ПолучитьЦели(ИдентификаторСчетчика)
	
	Токен = Объект.OAuthТокен;
	
	URL = "https://api-metrika.yandex.net/management/v1/counter/" + Формат(ИдентификаторСчетчика, "ЧГ=") + "/goals";
	РезультатЗапроса = Яндекс_ВыполнитьHTTPЗапрос(URL, Токен, "GET");
	
	Цели = Новый Массив();
	
	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса);
		РезультатЗапросаJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
				
		Для Каждого Цель Из РезультатЗапросаJSON.goals Цикл
			Условия = Новый Массив();
			
			Если Цель.Свойство("conditions") Тогда
				Для Каждого Условие Из Цель.conditions Цикл
					Условия.Добавить(Условие.url);
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЦели = Новый Структура("Идентификатор, Наименование, Условия", Цель.id, Цель.name, Условия);
			Цели.Добавить(СтруктураЦели);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Цели;

КонецФункции

&НаКлиенте
Процедура Яндекс_ЗаполнитьСчетчики()
	
	Объект.РекламныеКампании.Очистить();
	
	ВсеСчетчики = Яндекс_ПолучитьСчетчики();
	
	Для Каждого ТекСчетчик Из ВсеСчетчики Цикл
		Цели = Яндекс_ПолучитьЦели(ТекСчетчик.Идентификатор);
		
		Для Каждого Цель Из Цели Цикл
			НоваяСтрока = Объект.РекламныеКампании.Добавить();
			НоваяСтрока.Идентификатор = Цель.Идентификатор;
			НоваяСтрока.Наименование = Цель.Наименование;
		КонецЦикла;	
	КонецЦикла;
	
	Объект.РекламныеКампании.Сортировать("Наименование",);

КонецПроцедуры

&НаКлиенте
Процедура СценарийАнатиликиПриИзменении(Элемент)
	
	Если Объект.СценарийАнатилики = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.GoogleAnalytics")
		ИЛИ Объект.СценарийАнатилики = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.ЯндексМетрика") Тогда
		
		Элементы.ГруппаGoogleYandex.Видимость = Истина;
		Элементы.ГруппаПочтовыеСообщения.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаGoogle.Видимость = Ложь;
		
	ИначеЕсли Объект.СценарийАнатилики = ПредопределенноеЗначение("Перечисление.CRM_СценарииПолученияАналитики.ВнешняяОбработка") Тогда
		
		Элементы.ГруппаGoogleYandex.Видимость = Ложь;
		Элементы.ГруппаПочтовыеСообщения.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаGoogleYandex.Видимость = Ложь;
		Элементы.ГруппаПочтовыеСообщения.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СценарийАнатиликиПриИзменении(Истина);
	
	УстановитьНадписьРасписанияОбмена();
	
	Объект.ПоказательВизиты = Истина;
	
	Яндекс_ЗаполнитьСчетчики();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеНажатие(Элемент)
	
	ВыполнитьНастройкуРасписанияОбмена();
	ЗаполнитьРасписаниеЗапуска();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасписаниеЗапуска()
	
	Адрес = ПоместитьВоВременноеХранилище(РасписаниеРегламентногоЗадания,Новый УникальныйИдентификатор);
	Объект.АдресРасписания = Адрес;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОбмена", ЭтотОбъект);
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбмена(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания = Результат;
		
		УстановитьНадписьРасписанияОбмена();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		ТекстЗаголовка = НСтр("en='To configure the schedule of the exchange';ru='Настроить расписание обмена'");
		Попытка
			РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
			РасписаниеРегламентногоЗадания = ПолучитьИзВременногоХранилища(ОБъект.АдресРасписания);
		Исключение
		КонецПопытки;
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.ДекорацияРасписание.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ,ПараметрыЗаписи)
	
	ЗаполнитьРасписаниеЗапуска();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	CRM_СистемаСквознойАналитикиСервер.Справочник_CRM_ИсточникиРекламныхКампаний_ФормаЭлемента_ПриСозданииНаСервере();
	
	РасписаниеРегламентногоЗадания = ПолучитьИзВременногоХранилища(Объект.АдресРасписания);
		
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		РасписаниеРегламентногоЗадания.ПериодПовтораДней  = 1;
		РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня  = 3600;
		
		ЗаполнитьРасписаниеЗапуска();
	КонецЕсли;
	
КонецПроцедуры

#Область ВнешняяОбработка
&НаСервере
Функция ПолучитьДвоичныеДанныеИзХранилища()
	ОбъектПолучения = РеквизитФормыВЗначение("Объект");
	Возврат(ОбъектПолучения.ОбработкаДействия.Получить());
КонецФункции

&НаСервере
Процедура ПодготовитьКВыгрузкеОбработкуНаСервере()
	ДанныеФайла = ПолучитьДвоичныеДанныеИзХранилища();
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработку(Команда)
	
	ПодготовитьКВыгрузкеОбработкуНаСервере();

	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ВыгрузитьОбработкуПродолжение",
				ЭтотОбъект,
				Новый Структура),
			НСтр("en='Continue, install the file operation extension.';ru='Для продолжения необходимо установить расширение для работы с файлами.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
	ИмяФайла = Объект.НазваниеОбработки+".epf";
	Файл = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Файл);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ДиалогОткрытияФайла, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПереданныйФайл Из ПомещенныеФайлы Цикл
		Объект.ПутьКОбработке 		= ПереданныйФайл.Имя;
		ЭтотОбъект.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуКлиент(Команда)
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ЗагрузитьОбработкуПродолжение",
				ЭтотОбъект,
				Новый Структура),
			НСтр("en='Continue, install the file operation extension.';ru='Для продолжения необходимо установить расширение для работы с файлами.'"));

КонецПроцедуры
	
&НаКлиенте
Процедура ЗагрузитьОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Объект.НазваниеОбработки) Тогда
		ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("ВопросЗагрузитьОбработку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияЗавершения, НСтр("en='Download a new treatment from the disk?';ru='Загрузить новую обработку с диска?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВопросЗагрузитьОбработку(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузитьОбработку(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьОбработкуЗавершение", ЭтотОбъект);
		ИмяФайла = Объект.НазваниеОбработки+".epf";
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		АдресФайла = Результат[0].Хранение;
		Объект.ПутьКОбработке = Результат[0].Имя;
		ЗагрузитьОбработку();
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОбработку()
	ПараметрыЗащиты = Новый("ОписаниеЗащитыОтОпасныхДействий"+"");
	ПараметрыЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Объект.ИспользуетсяСтандартнаяОбработка = Ложь;
	Обработка =  ВнешниеОбработки.Создать(ВнешниеОбработки.Подключить(АдресФайла,,Ложь, ПараметрыЗащиты), Ложь);
	Объект.НазваниеОбработки = Обработка.Метаданные().Имя;
	Если Объект.Наименование = "" Тогда
		Объект.Наименование = Обработка.Метаданные().Синоним;
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЕСли Объект.СценарийАнатилики=Перечисления.CRM_СценарииПолученияАналитики.ВнешняяОбработка тогда
		Если ЗначениеЗАполнено(АдресФайла) тогда
			ТекущийОбъект.ОбработкаДействия = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФайла));
			
		КонецЕСли;
	КонецЕСли;
КонецПроцедуры

&НаСервере
Процедура ДозагрузитьДанныеНаСервере()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекОбъект.ЗапуститьЗаданиеВРучную();
	
КонецПроцедуры

&НаКлиенте
Процедура ДозагрузитьДанные(Команда)
	ДозагрузитьДанныеНаСервере();
	Закрыть();
КонецПроцедуры
#КонецОбласти
