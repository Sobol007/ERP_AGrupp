
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Вставим верхнюю строку дерева этапов
	СтрокаДерева = ДеревоМодели.ПолучитьЭлементы().Добавить();
	СтрокаДерева.ИндексКартинки = -1;
	ПустойШаблонПакета = Справочники.CRM_ШаблоныЭтаповПроектов.ПустаяСсылка();

	Если Не Объект.Ссылка.Пустая() Тогда
		ИзменитьУсловноеОформлениеКорняДерева();
		
		табВложения = ПолучитьПрикрепленныеФайлы();
		
		СтруктураФайлов = Новый Структура;
		
		Если табВложения.Количество() > 0 Тогда
			
			Для Каждого Стр Из табВложения Цикл
				
				Попытка
					// +CRM
					ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Стр.Ссылка);
					Если ДвоичныеДанные = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					// -CRM
					СтруктураФайлов.Вставить(Стр.Наименование, Новый Картинка(ДвоичныеДанные));;
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Объект.CRM_КомментарийHTML) Тогда
			ФорматированныйДокументТекст.УстановитьHTML(Объект.CRM_КомментарийHTML, СтруктураФайлов);
		ИначеЕсли НЕ ПустаяСтрока(Объект.Комментарий) Тогда
			HTMLТекст = CRM_ОбщегоНазначенияКлиентСервер.ПреобразоватьТекстВHTML(Объект.Комментарий);
			ФорматированныйДокументТекст.УстановитьHTML(HTMLТекст, СтруктураФайлов);
		КонецЕсли;
	Иначе
		КалендарныеГрафикиПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Элементы.СтраницыОтображенияГрафиков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

	ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере();
	
	СформироватьПредставлениеВложений();
	
	АвтоЗаголовок = Ложь;
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
	Иначе
		Заголовок = НСтр("ru = 'Новый шаблон проекта...'");
	КонецЕсли;
	СписокРедактируемыхКолонок.Добавить("ОтсрочкаСтартаДней");
	СписокРедактируемыхКолонок.Добавить("ПродолжительностьДней");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ШаблоныПроектовПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество()>0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ШаблоныПроектовПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Описание
	ФорматированныйДокументТекст.ПолучитьHTML(Объект.CRM_КомментарийHTML, СтруктураВложений);
	Объект.Комментарий = ФорматированныйДокументТекст.ПолучитьТекст();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.CRM_КолонкиКалендарногоГрафика = Новый ХранилищеЗначения(КолонкиКалендарногоГрафика);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если СтруктураВложений.Количество() <>  0 Тогда // Значит что-то меняли
		ИменаФайлов = Новый СписокЗначений;
		Для Каждого КлючИЗначение Из СтруктураВложений Цикл
			ИменаФайлов.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		УдалитьПредыдущиеВложенияФорматированногоДокумента(ИменаФайлов);
		ЗаписатьВложения();
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		
		ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		
		ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	КалендарныеГрафикиПриЧтенииСозданииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияДополнительныхРеквизитовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов", Ложь);
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьКолонкиКалендарногоГрафикаИзМакета(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеречитатьКолонкиКалендарногоГрафикаИзМакетаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Перечитать список колонок?'"), РежимДиалогаВопрос.ОКОтмена); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроект(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СозданныйПроект = Неопределено;
		CRM_УправлениеПроектамиВызовСервера.СоздатьПроектПоШаблону(Объект.Ссылка, СозданныйПроект);
		Если СозданныйПроект <> Неопределено Тогда
			ПодключитьОбработчикОжидания("ОткрытьСозданныйПроект", 0.1, Истина);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Шаблон не записан, создание проекта невозможно!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	ИзменитьУсловноеОформлениеКорняДерева();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
	Иначе
		Заголовок = НСтр("ru = 'Введите наименование...'");;
	КонецЕсли;
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныЭтаповНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьШаблоныЭтаповЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныЗадачНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьШаблоныЗадачЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти //ОбработчикиСобытийЭлементовФормы


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиРеквизитов()

КонецПроцедуры

&НаСервере
Процедура УдалитьПредыдущиеВложенияФорматированногоДокумента(ИменаФайлов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Файлы.Ссылка
	               |ИЗ
	               |	Справочник.ПроектыПрисоединенныеФайлы КАК Файлы
	               |ГДЕ
	               |	Файлы.ВладелецФайла = &Ссылка
	               |	И Файлы.Наименование В (&ИменаФайлов)";
	
	Запрос.УстановитьПараметр("Ссылка" , 		Объект.Ссылка);
	Запрос.УстановитьПараметр("ИменаФайлов", 	ИменаФайлов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектВложение = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения()
	
	Для Каждого КлючИЗначение Из СтруктураВложений Цикл
		
		РасширениеБезТочки = КлючИЗначение.Значение.Формат();
		
		ИмяФайла							= КлючИЗначение.Ключ + "." + РасширениеБезТочки;
		ИмяФайлаНаКомпьютере				= ПоместитьВоВременноеХранилище(КлючИЗначение.Значение.ПолучитьДвоичныеДанные(), УникальныйИдентификатор);
		
		ВремяИзменения = ТекущаяДата();
		
		ПрисоединенныеФайлы.ДобавитьФайл(Объект.Ссылка, КлючИЗначение.Ключ, РасширениеБезТочки, ВремяИзменения, ВремяИзменения, 
										 ИмяФайлаНаКомпьютере, "");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрикрепленныеФайлы() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШаблоныПроектовПрисоединенныеФайлы.Ссылка,
	               |	ШаблоныПроектовПрисоединенныеФайлы.Наименование
	               |ИЗ
	               |	Справочник.CRM_ШаблоныПроектовПрисоединенныеФайлы КАК ШаблоныПроектовПрисоединенныеФайлы
	               |ГДЕ
	               |	ШаблоныПроектовПрисоединенныеФайлы.ВладелецФайла = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере()
	
	КолонкиКалендарногоГрафика.Очистить();
	СохраненныйСписок = Объект.Ссылка.CRM_КолонкиКалендарногоГрафика.Получить();
	
	Если ЗначениеЗаполнено(СохраненныйСписок) Тогда 
		КолонкиКалендарногоГрафика = СохраненныйСписок.Скопировать();
	Иначе
		CRM_УправлениеПроектамиВызовСервера.ПеречитатьСписокКолонокКалендарногоГрафикаИзМакетаНаСервере(КолонкиКалендарногоГрафика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьКолонкиКалендарногоГрафикаИзМакетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		CRM_УправлениеПроектамиВызовСервера.ПеречитатьСписокКолонокКалендарногоГрафикаИзМакетаНаСервере(КолонкиКалендарногоГрафика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданныйПроект()

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", СозданныйПроект);
	ОткрытьФорму("Справочник.Проекты.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(CRM_ШаблоныПроектовПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.CRM_ШаблоныПроектовПрисоединенныеФайлы КАК CRM_ШаблоныПроектовПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ШаблоныПроектовПрисоединенныеФайлы.ВладелецФайла = &Этап
	|	И НЕ CRM_ШаблоныПроектовПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Fales('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьФайлыЗавершение()

&НаСервере
Процедура ИзменитьУсловноеОформлениеКорняДерева()
	УсловноеОформление.Элементы[0].Оформление.Элементы.Найти("Текст").Значение = Объект.Наименование; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныЭтаповЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("ШаблонПроекта", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.ФормаСписка",ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьБизнесПроцессыЗавершение()

&НаКлиенте
Процедура ОткрытьШаблоныЗадачЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("ШаблонПроекта", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаСписка",ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели", РежимРедактированияМодели);
	
КонецПроцедуры

#КонецОбласти //СлужебныеПроцедурыИФункции


#Область РаботаСЭтапами

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапам()
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Пакет,
	               |	CRM_ШаблоныЭтаповПроектов.МинимальноеСмещение КАК МинимальноеСмещение,
	               |	CRM_ШаблоныЭтаповПроектов.ПродолжительностьДней КАК ПродолжительностьДнейЭтапа,
	               |	CRM_ШаблоныЭтаповПроектов.Ответственный КАК Ответственный,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Этап,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.ПродолжительностьДней КАК ПродолжительностьДней,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение КАК ОтсрочкаСтартаДней,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Важность КАК Важность,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
	               |		ПО CRM_ШаблоныЭтаповПроектов.Ссылка = CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта
	               |ГДЕ
	               |	(CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
	               |			ИЛИ CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &ШаблонПроекта)
	               |	И НЕ ЕСТЬNULL(CRM_ШаблоныЭтаповПроектов.ПометкаУдаления, ЛОЖЬ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МинимальноеСмещение ИЕРАРХИЯ,
	               |	Пакет,
	               |	CRM_ШаблонЭтапаКалендарногоПлана.Смещение";
	
	Запрос.УстановитьПараметр("ШаблонПроекта", Объект.Ссылка);
	
	ДеревоПоЗапросу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВерхняяСтрокаЭтапов = ДеревоМодели.ПолучитьЭлементы().Добавить();
	ВерхняяСтрокаЭтапов.ИндексКартинки = -1;
	Длительность = 0;
	ЗаполнитьДеревоПоЭтапамРекурсивно(ВерхняяСтрокаЭтапов.ПолучитьЭлементы(), ДеревоПоЗапросу.Строки, Длительность);
	ВерхняяСтрокаЭтапов.ПродолжительностьДней = Длительность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокиЭтапов, СтрокиПоЗапросу, Длительность)
	
	ПредыдущийЭтапКакРодитель = NULL;
	СтрокаЭтапаГруппа		  = Неопределено;
	
	Для каждого СтрокаПоЗапросу Из СтрокиПоЗапросу Цикл
		
		Если СтрокаПоЗапросу.Строки.Количество() > 0 Тогда
			// Есть подчиненные пакеты/задачи
			СтрокаЭтапа = СтрокиЭтапов.Добавить();
			СтрокаЭтапа.Этап = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапа.ИндексКартинки = 0;
			СтрокаЭтапа.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			СтрокаЭтапа.ОтветственныйИсполнитель = СтрокаПоЗапросу.Ответственный;
			СтрокаЭтапа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.МинимальноеСмещение;
			СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДнейЭтапа;
			ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокаЭтапа.ПолучитьЭлементы(), СтрокаПоЗапросу.Строки, Длительность);
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа		  = СтрокаЭтапа;
		КонецЕсли;
		
		Если ПредыдущийЭтапКакРодитель <> СтрокаПоЗапросу.Пакет Тогда
			// Создадим ветку Пакета 
			СтрокаЭтапаГруппа  = СтрокиЭтапов.Добавить();
			СтрокаЭтапаГруппа.Этап = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа.ИндексКартинки = 0;
			СтрокаЭтапаГруппа.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			СтрокаЭтапаГруппа.ОтветственныйИсполнитель = СтрокаПоЗапросу.Ответственный;
			СтрокаЭтапаГруппа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.МинимальноеСмещение;
			СтрокаЭтапаГруппа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДнейЭтапа;
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаПоЗапросу.Этап) И НЕ СтрокаПоЗапросу.ПометкаУдаления Тогда
			// Добавим задачу (верхнего уровня или подчиненную пакету)
			СтрокаЭтапа = ?(СтрокаЭтапаГруппа = Неопределено, СтрокиЭтапов.Добавить(), СтрокаЭтапаГруппа.ПолучитьЭлементы().Добавить());
			СтрокаЭтапа.Этап 				  = СтрокаПоЗапросу.Этап;
			СтрокаЭтапа.ОтсрочкаСтартаДней 	  = СтрокаПоЗапросу.ОтсрочкаСтартаДней;
			СтрокаЭтапа.ПродолжительностьДней = СтрокаПоЗапросу.ПродолжительностьДней;
			СтрокаЭтапа.ТипЭтапа 			  = СтрокаПоЗапросу.ТипЭтапа;
			СтрокаЭтапа.Важность 			  = СтрокаПоЗапросу.Важность;
			СтрокаЭтапа.ИндексКартинки   	  = ?(СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
			СтрокаЭтапа.ИдентификаторСтроки	  = Новый УникальныйИдентификатор;
			Если СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				ТекДлительность = СтрокаЭтапа.ОтсрочкаСтартаДней+1;
			Иначе
				ТекДлительность = СтрокаЭтапа.ОтсрочкаСтартаДней+СтрокаЭтапа.ПродолжительностьДней;
			КонецЕсли;
			Если ТекДлительность > Длительность Тогда
				Длительность = ТекДлительность;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонЗадачи(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонКТ(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонЭтапа(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПакетЗадачЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Добавление возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ДобавитьЭтапКонтрольнуюТочку(ПараметрыВыполнения.ИмяКоманды);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
Процедура ДобавитьПакетЗадачЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ДобавитьПакетЗадач();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПакетЗадач()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового(ЗначениеВыбора) Экспорт
	
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИнициализироватьТабличныйДокументМодели();

		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева, Элементы.ДеревоМодели.ТекущаяСтрока);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	Иначе
		УстановитьКурсорНаЭтап(ЗначениеВыбора);
	КонецЕсли;

КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочкуПослеЗаписиНового()

&НаСервере
Процедура УстановитьКурсорНаЭтап(ЗначениеВыбора)
	
	ИдентификаторЭтапа = НайтиНовыйЭтап(ДеревоМодели.ПолучитьЭлементы(), ЗначениеВыбора);
	Элементы.ДеревоМодели.ТекущаяСтрока = ИдентификаторЭтапа;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиНовыйЭтап(Строки, Этап)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.Этап = Этап Тогда
			Возврат Строка.ПолучитьИдентификатор();
		КонецЕсли;
		СтрокиПолученные = Строка.ПолучитьЭлементы();
		Если СтрокиПолученные.Количество() > 0 Тогда
			ИдентификаторЭтапа = НайтиНовыйЭтап(СтрокиПолученные, Этап);
			Если ИдентификаторЭтапа <> Неопределено Тогда
				Возврат ИдентификаторЭтапа;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочку(ИмяКоманды)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если ИмяКоманды = "ДобавитьШаблонЗадачи" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап");
	
	ИначеЕсли ИмяКоманды = "ДобавитьШаблонКонтрольнойТочки" Тогда	
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка");
	
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ШаблонПроекта"  , Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ТипЭтапа", ТипЭтапа);
	
	Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		ЗначенияЗаполнения.Вставить("ШаблонЭтапаПроекта", ТекущиеДанные.Этап);
	Иначе
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительСтроки = Неопределено Тогда
			ЗначенияЗаполнения.Вставить("ШаблонЭтапаПроекта", РодительСтроки.Этап);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочку()

&НаКлиенте
Процедура ДобавитьПакетЗадач()
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ШаблонПроекта", Объект.Ссылка);
	
	Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Этап);
	Иначе
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительСтроки = Неопределено Тогда
			ЗначенияЗаполнения.Вставить("Родитель", РодительСтроки.Этап);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.Форма.ФормаЭлементаПростая",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьПакетЗадач()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	
	Если Развернуть Тогда
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Иначе
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы()[0].ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Развернуть Тогда
			ЭлементДерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		Иначе
			ЭлементДерево.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОбновить(Команда)
	
	ТекущийЭтапДерева = Неопределено;
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийЭтапДерева = ТекущиеДанные.Этап;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Обновить()
	
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		ИнициализироватьТабличныйДокументМодели();
		
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
	
	Иначе
		
		УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЭтап(Команда)
	
	ДеревоМоделиВыбор(Элементы.ДеревоМодели, Элементы.ДеревоМодели.ТекущаяСтрока, Неопределено, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый)
	
	ЭтапПереносимыйОбъект = ЭтапПереносимый.ПолучитьОбъект();
	
	Если ТипЗнч(ЭтапПереносимыйОбъект) = Тип("СправочникОбъект.CRM_ШаблоныЭтаповПроектов") Тогда
		ЭтапПереносимыйОбъект.Родитель = ЭтапПриемник;
	ИначеЕсли ТипЗнч(ЭтапПереносимыйОбъект) = Тип("ДокументОбъект.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		ЭтапПереносимыйОбъект.ШаблонЭтапаПроекта = ЭтапПриемник;
	Иначе 
		Возврат;
	КонецЕсли;
	
	ЭтапПереносимыйОбъект.Записать();
	
	ЗаполнитьДеревоПоЭтапам();
	УстановитьКурсорНаЭтап(ЭтапПереносимый);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемник, ЭтапПереносимый)
	
	Если ЭтапПриемник = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭтапПриемник.ПринадлежитЭлементу(ЭтапПереносимый);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМоделиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ИмяКоманды = Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.ИмяКоманды;
	Команда = Команды.Найти(ИмяКоманды);
	ДобавитьШаблонЗадачи(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдаление(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник = Элемент.ДанныеСтроки(Строка).Этап;
	
	Если ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана")  Тогда
		
		Родитель = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
		    ЭтапПриемник = ПредопределенноеЗначение("Справочник.CRM_ШаблоныЭтаповПроектов.ПустаяСсылка");
		Иначе
			ЭтапПриемник = Родитель.Этап;
		КонецЕсли;
	КонецЕсли;
	
	ЭтапПереносимый = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	
	ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый);
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Этап = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;

	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		//перенос на "пустоту" поля
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник		 = Элемент.ДанныеСтроки(Строка).Этап;
	ЭтапПереносимый		 = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	ПриемникЭтоЗадача 	 = (ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	ПереносимыйЭтоЗадача = (ТипЗнч(ЭтапПереносимый) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	
	Если ПриемникЭтоЗадача  Тогда
		РодительПриемника = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если РодительПриемника = Неопределено Тогда
			ЭтапПриемникРодитель = ПустойШаблонПакета;
		Иначе
			ЭтапПриемникРодитель = РодительПриемника.Этап;
		КонецЕсли;
	Иначе
		ЭтапПриемникРодитель = ЭтапПриемник;
	КонецЕсли;
	
	РодительПереносимого = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).ПолучитьРодителя();
	Если РодительПереносимого = Неопределено Тогда
		ЭтапПереносимыйРодитель = ПустойШаблонПакета;
	ИначеЕсли НЕ ПереносимыйЭтоЗадача И ПриемникЭтоЗадача И ЭтапПриемникРодитель = ЭтапПереносимый Тогда
		// перенос пакета на подчиненную задачу
		ЭтапПереносимыйРодитель = ЭтапПереносимый;
	Иначе
		ЭтапПереносимыйРодитель = РодительПереносимого.Этап;
	КонецЕсли;
	
	Если (ЭтапПриемникРодитель = ЭтапПереносимыйРодитель)
		 Или (НЕ ПереносимыйЭтоЗадача И ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемникРодитель, ЭтапПереносимый)) Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Этап = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		
		
		Этап = ДанныеСтроки.Этап;
		
		ПараметрыФормы = Новый Структура("Ключ", Этап);
		
		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа",ЭтотОбъект, Новый Структура("Ссылка, ВерсияДанных", Этап, ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			
			ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект.УникальныйИдентификатор,,,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
			
			ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект.УникальныйИдентификатор,,,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеСтроки.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов")	Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеЗаписиЭтапа(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("Ссылка") И ДополнительныеПараметры.Свойство("ВерсияДанных") Тогда
		
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Ссылка, "ВерсияДанных") <> ДополнительныеПараметры.ВерсияДанных Тогда
		
			ЗаполнитьДеревоПоЭтапам();
			РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
			УстановитьКурсорНаЭтап(ДополнительныеПараметры.Ссылка);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбновитьПослеЗаписиЭтапа()

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеНаСервере(Этап)
	
	ЭтапОбъект = Этап.ПолучитьОбъект();
	ЭтапОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭтап = Элементы.ДеревоМодели.ТекущиеДанные.Этап;
		ПометитьНаУдалениеНаСервере(ТекущийЭтап);
		ДеревоМоделиОбновить(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	Если Элементы.ДеревоМодели.ТекущиеДанные  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекущийЭтап = Элементы.ДеревоМодели.ТекущиеДанные.Этап;
	Если ЗначениеЗаполнено(ТекущийЭтап) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЭтапЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить из шаблона текущий элемент?'"), РежимДиалогаВопрос.ДаНет); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКопированияЗадачи()
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Этап = Неопределено;
	Иначе
		Этап = ТекДанные.Этап;
	КонецЕсли;
	Элементы.ДеревоМоделиКопироватьЗадачу.Доступность = (ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана"));
	Элементы.ДеревоМоделиКонтекстноеМенюКопироватьЗадачу.Доступность = Элементы.ДеревоМоделиКопироватьЗадачу.Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьЗадачу(Команда)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.Форма.ФормаДокумента", Новый Структура("ЗначениеКопирования", Этап), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Значение = ТекДанные[ИмяРеквизита];
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор(), Значение) Тогда
		ДеревоМоделиОбновить(Неопределено);
	Иначе
		ТекДанные[ИмяРеквизита] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ИдентификаторСтроки, Значение)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	День = 86400;
	ДанныеЭтапаКалендарногоПлана = Новый Структура;
	Если ИмяРеквизита = "ОтсрочкаСтартаДней" Тогда
		ДанныеЭтапаКалендарногоПлана.Вставить("Смещение", Значение);
	КонецЕсли;
	ДанныеЭтапаКалендарногоПлана.Вставить(ИмяРеквизита, Значение);
	ИзменитьЭтапКалендарногоПлана(ТекДанные.Этап, ДанныеЭтапаКалендарногоПлана);
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ИзменитьЭтапКалендарногоПлана(Этап, ДанныеЭтапаКалендарногоПлана);
	
	ЭтапКалендарногоПлана = Этап.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЭтапКалендарногоПлана, ДанныеЭтапаКалендарногоПлана);
	ЭтапКалендарногоПлана.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		Отказ = Истина;
	Иначе
		Отказ = НЕ РазрешеноРедактированиеЭлемента(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПриАктивизацииСтроки(Элемент)
	ДоступностьКопированияЗадачи();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграмму()

	День = 86400;
	МаксимальнаяДата = NULL;
	МинимальнаяДата  = NULL;
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаРисунок.Расположить(ТабличныйДокументМодели.Область(1, Число(СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ДиаграммаГанта").Представление), 
								 ТабличныйДокументМодели.ВысотаТаблицы, Число(СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ДиаграммаГанта").Представление)));
	
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	ДиаграммаОбъект.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	ДиаграммаОбъект.Обновление = Ложь;
	ДиаграммаОбъект.Анимация = АнимацияДиаграммы.НеИспользовать;
	
	ДиаграммаОбъект.Очистить();

	ДиаграммаОбъект.ОтображениеИнтервала  = ОтображениеИнтервалаДиаграммыГанта.Градиент;
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	ДатаНачала = ТекущаяДата;
	
	СерияПлан = ДиаграммаОбъект.Серии.Добавить();
	
	СерияПлан.ШтриховкаМеждуИнтервалами = Ложь;
	
	Для Сч = 3 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		СтрокаОбласти = "R" + Формат(Сч, "ЧН=0; ЧГ=");
		
		НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
		
		ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Если ДанныеСтрокиДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоПлан = ТекущаяДата + ДанныеСтрокиДерева.ОтсрочкаСтартаДней*День;
		
		Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОкончаниеПлан = ?(НачалоПлан = '00010101', НачалоПлан, КонецДня(НачалоПлан));
		Иначе
			ОкончаниеПлан = КонецДня(НачалоПлан + (ДанныеСтрокиДерева.ПродолжительностьДней-1)*День);
		КонецЕсли;
		
		ИдентифкаторТочки = ДанныеСтрокиДерева.ИдентификаторСтроки;
		
		Родитель = ДанныеСтрокиДерева.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда 
			ИдентифкаторТочкиРодителя = Родитель.ИдентификаторСтроки;
		КонецЕсли;
		
		Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки, ИдентифкаторТочкиРодителя);
		Точка.Текст = " ";
		ЗначениеПлан = ДиаграммаОбъект.ПолучитьЗначение(Точка, СерияПлан);
		ЗначениеПлан.Очистить();
		
		Этап = ДанныеСтрокиДерева.Этап;
		
		// Если надо, корректируем максимальную и минимальную даты.
		Если МаксимальнаяДата = NULL 
		  ИЛИ МаксимальнаяДата < НачалоПлан + (ОкончаниеПлан - НачалоПлан) Тогда
			МаксимальнаяДата = НачалоПлан + (ОкончаниеПлан - НачалоПлан);
		КонецЕсли;
		
		Если МинимальнаяДата = NULL Или МинимальнаяДата > НачалоПлан Тогда
			МинимальнаяДата = НачалоПлан;
		КонецЕсли;
		
		ЗначениеПлан.Редактирование = Истина;
		
		// Вывод плана
		ИнтервалПлан = ЗначениеПлан.Добавить();
		ИнтервалПлан.Начало = НачалоПлан;
		ИнтервалПлан.Конец  = ОкончаниеПлан;
		
		Если ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана")  Тогда
			
			ИнтервалПлан.Цвет = ЦветИнтервалаПакетаПлан;
				
		ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана")  Тогда
		
			Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				ИнтервалПлан.Цвет = ЦветИнтервалаКонтрольнойТочкиПлан;
			Иначе
				ИнтервалПлан.Цвет = ЦветИнтервалаЭтапаПлан;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока Истина Цикл
		Попытка
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(0).Видимость = Ложь;
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Удалить(ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(1));
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	ШиринаКолонки = ДиаграммаРисунок.Ширина;
	Попытка
		Дни = (МаксимальнаяДата - МинимальнаяДата) / 86400;
	Исключение
		Дни = 7;
	КонецПопытки;
	Если Не ((ШиринаКолонки >= 283 и Дни <=78)  или 
		 (ШиринаКолонки >= 181 и Дни <=58)  или 
		 (ШиринаКолонки >= 140 и Дни <=48)  или 
		 (ШиринаКолонки >= 74 и Дни <=38)  или 
		 (ШиринаКолонки >= 85 и Дни <=33)  или 
		 (ШиринаКолонки >= 38 и Дни <=29)  или 
		 (ШиринаКолонки >= 48 и Дни <=31)  или 
		 (ШиринаКолонки >= 85 и Дни <=33)  или 
		  (ШиринаКолонки >= 555 и Дни <=133))
		Тогда
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Месяц;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.Формат	= "ДФ='ddd d'";
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	Иначе
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.День;
		ЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	КонецЕсли;
	
	ДиаграммаОбъект.ПоказатьУровеньТочек(0); 
	ПолосаРегулированияШириныДиаграммыГанта = ТабличныйДокументМодели.Область("Служебная_ДиаграммаГанта").ШиринаКолонки/2;
	
	ДиаграммаОбъект.РастягиваниеПоВертикали = РастягиваниеПоВертикалиДиаграммыГанта.РастягиватьСтроки;
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграмму()

&НаСервере
Процедура КалендарныеГрафикиПриЧтенииСозданииНаСервере()

	СоответствиеКоллекцииКартинок = Новый Соответствие;
	СоответствиеКоллекцииКартинок.Вставить(1, БиблиотекаКартинок.CRM_ЭтапПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(0, БиблиотекаКартинок.CRM_ЭтапПроцессаСвязи);
	СоответствиеКоллекцииКартинок.Вставить(3, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(2, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцессаСвязи);
	
	СоответствиеКоллекцииКартинокТипаЭтапа = Новый ФиксированноеСоответствие(СоответствиеКоллекцииКартинок);
	
	// Цвета интервалов Ганта
	ЦветИнтервалаЭтапаПлан		      = ЦветаСтиля.CRM_ЦветИнтервалаЭтапаПлан;
	ЦветИнтервалаКонтрольнойТочкиПлан = ЦветаСтиля.CRM_ЦветИнтервалаКонтрольнойТочкиПлан;
	ЦветИнтервалаПакетаПлан			  = ЦветаСтиля.CRM_ЦветИнтервалаПакетаПлан;
	ЦветНавигации					  = ЦветаСтиля.ЦветНавигации;
	ЦветФонаПоля					  = ЦветаСтиля.ЦветФонаПоля;
	
	Если НЕ ЗначениеЗаполнено(РежимРедактированияМодели) Тогда
		времРежимРедактированияМодели = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели");
		РежимРедактированияМодели = ?(НЕ ЗначениеЗаполнено(времРежимРедактированияМодели), "Дерево", времРежимРедактированияМодели);
	КонецЕсли;
	
	ПрочитатьДанныеМоделиПроцесса();
	
	УстановитьРежимРедактирования(ЭтотОбъект);
	
	Если РежимРедактированияМодели = "Графически" Тогда
	
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();

		ИнициализироватьТабличныйДокументМодели();
		//Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
		//КонецЦикла;
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КалендарныеГрафикиПриЧтенииСозданииНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, ЭлементыДерева, ТекущийИдентификатор = Неопределено)

	ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(2,1,2,1);
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаДерева.АдресСтрокиОбласти = "";
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон, ТекущийИдентификатор);
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ТекущийИдентификатор);
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьДанныеТабличногоДокументаРекурсивно()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон = Неопределено, ТекущийИдентификатор = Неопределено)
	
	ТабличныйДокументМодели = Форма.ТабличныйДокументМодели;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.АдресСтрокиОбласти) Тогда
		СтрокаОбласти = "R" + Формат(ТабличныйДокументМодели.ВысотаТаблицы + 1, "ЧН=0; ЧГ=");
		СтрокаДерева.АдресСтрокиОбласти = СтрокаОбласти;
		
	Иначе
		СтрокаОбласти = СтрокаДерева.АдресСтрокиОбласти;
		
	КонецЕсли;
	
	//Оформление
	ОбластьСтроки = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти);
	ЦветФона = Новый Цвет(255,255,255); // для веб-клиента необходимо явно указанть цвет
	
	
	Для Сч = 1 По Форма.СписокОбластейТабличногоДокумента.Количество()-1 Цикл  // по всем выведенным колонкам, кроме последней (в которой гант)
		ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + Формат(Сч, "ЧН=0; ЧГ="));
		ОбластьРедактирования.ЦветФона = ЦветФона;
	
	КонецЦикла;
		
	ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); // Этап всегда первая колонка С1
	ОбластьРедактирования.Отступ = 2;
		
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено  Тогда
	  //И ЗначениеЗаполнено(Родитель.ИдентификаторСтроки) Тогда
		ОбластьДобавленияРодитель = ТабличныйДокументМодели.Область(Родитель.АдресСтрокиОбласти + "C1"); // Этап всегда первая колонка С1
		
		//Отрисуем иерархию
		ОбластьРедактирования.Отступ = ОбластьДобавленияРодитель.Отступ + 2;
		
	КонецЕсли;
	
	Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
	
	//Этап

	ОбластьРедактированияШрифт 	 = Новый Шрифт(,8,,,,);
	Если ЗначениеЗаполнено(СтрокаДерева.Этап) Тогда
		
		ОбластьРедактирования.Текст 	  = СтрокаДерева.Этап;
		ОбластьРедактирования.Расшифровка = СтрокаДерева.Этап;
		
		Если СтрокаДерева.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Высокая") Тогда
			ОбластьРедактированияШрифт 	 = Новый Шрифт(,8,Истина);
		ИначеЕсли СтрокаДерева.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Низкая") Тогда
			ОбластьРедактирования.ЦветТекста = Новый Цвет(160,160,160);
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Этап) И ТипЗнч(СтрокаДерева.Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			ОбластьРедактированияШрифт = Новый Шрифт(, 9, Истина);
		КонецЕсли;
		
	Иначе
		ОбластьРедактированияШрифт = Новый Шрифт(, 9, Истина);
		ОбластьРедактирования.Текст = Форма.Объект.Наименование;
	КонецЕсли;
	ОбластьРедактирования.Шрифт = ОбластьРедактированияШрифт;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	Если Идентификатор = ТекущийИдентификатор Тогда
		Форма.Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ОбластьРедактирования;
	
	КонецЕсли;
		
	// Заполнение данных настроенных колонок
	
	Для каждого ЗначениеСписка Из Форма.СписокОбластейТабличногоДокумента Цикл
		
		ИмяОбласти = ЗначениеСписка.Значение;
		Если СтрНайти(ВРег(ИмяОбласти), "СЛУЖЕБНАЯ_") Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКолонки = Форма.СписокОбластейТабличногоДокумента.НайтиПоЗначению(ИмяОбласти).Представление;
		ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
		ОбластьРедактирования.Расшифровка 	   = ИмяОбласти;
		
		//Если ТипЗнч(СтрокаДерева.Этап) <> Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			
			ОбластьРедактирования.СодержитЗначение = Истина;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(СтрокаДерева[ИмяОбласти]));
			ОбластьРедактирования.ТипЗначения = Новый ОписаниеТипов(МассивТипов,,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный),,
																					Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ОбластьРедактирования.Значение    = СтрокаДерева[ИмяОбласти];
			ОбластьРедактирования.Шрифт = ОбластьРедактированияШрифт;
			ОбластьРедактирования.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
		//КонецЕсли;
		
		ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
		
	КонецЦикла;
	
	//Служебные поля
	НомерКолонки = Форма.СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
	ОбластьРедактирования	    	  = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
	ОбластьРедактирования.Текст 	  = Идентификатор;
	ОбластьРедактирования.Расшифровка = Идентификатор;
		
КонецПроцедуры // ЗаполнитьДанныеСтрокиТабличногоДокумента()

&НаСервере
Процедура ИнициализироватьТабличныйДокументМодели()
	
	Макет = Справочники.CRM_ШаблоныПроектов.ПолучитьМакет("CRM_МакетМоделиЭтапов");
	
	СписокОбластейТабличногоДокумента.Очистить();
	ТабличныйДокументМодели.Очистить();
	
	//Службные поля
	ТабличныйДокументМодели.Вывести(Макет.ПолучитьОбласть("Шапка|Служебная_Этап"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,1, ,1);
	ОбластьМодели.Имя = "Служебная_Этап";
	СписокОбластейТабличногоДокумента.Добавить("Служебная_Этап", "1");
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_ИдентификаторСтрокиДерева"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,2, ,2);
	ОбластьМодели.Имя = "Служебная_ИдентификаторСтрокиДерева";
	ОбластьМодели.Видимость = Ложь;
	СписокОбластейТабличногоДокумента.Добавить("Служебная_ИдентификаторСтрокиДерева", "2");
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_Картинка"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,3, ,3);
	ОбластьМодели.Имя = "Служебная_Картинка";
	ОбластьМодели.Видимость = Ложь;
	СписокОбластейТабличногоДокумента.Добавить("Служебная_Картинка", "3");
	
	// Настраиваемые поля
	НомерКолонки = 4;
		
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|" + "ОтсрочкаСтартаДней"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,НомерКолонки, ,НомерКолонки);
	ОбластьМодели.Имя = "ОтсрочкаСтартаДней";
	СписокОбластейТабличногоДокумента.Добавить("ОтсрочкаСтартаДней", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	НомерКолонки = НомерКолонки + 1;
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|" + "ПродолжительностьДней"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,НомерКолонки, ,НомерКолонки);
	ОбластьМодели.Имя = "ПродолжительностьДней";
	СписокОбластейТабличногоДокумента.Добавить("ПродолжительностьДней", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	НомерКолонки = НомерКолонки + 1;
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|" + "ОтветственныйИсполнитель"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,НомерКолонки, ,НомерКолонки);
	ОбластьМодели.Имя = "ОтветственныйИсполнитель";
	СписокОбластейТабличногоДокумента.Добавить("ОтветственныйИсполнитель", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	НомерКолонки = НомерКолонки + 1;
	
	//Диаграмма Ганта, всегда вводится в конце
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_ДиаграммаГанта"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,НомерКолонки, ,НомерКолонки);
	ОбластьМодели.Имя = "Служебная_ДиаграммаГанта";
	СписокОбластейТабличногоДокумента.Добавить("Служебная_ДиаграммаГанта", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	
	ТабличныйДокументМодели.ФиксацияСверху 			= 2;
	ТабличныйДокументМодели.ФиксацияСлева  			= 1;
	ТабличныйДокументМодели.Защита 		   			= Ложь;
	ТабличныйДокументМодели.ТолькоПросмотр 			= Ложь;
	//Элементы.ТабличныйДокументМодели.Редактирование = Истина;
	
КонецПроцедуры // ИнициализироватьТабличныйДокументМодели()

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, Знач ОбластьЭталон = Неопределено)

	Если ОбластьЭталон = Неопределено Тогда
		ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(2,1,2,1);
	КонецЕсли;
	
	ОбластьРедактирования.ГраницаСверху = ОбластьЭталон.ГраницаСверху;
	ОбластьРедактирования.ГраницаСлева  = ОбластьЭталон.ГраницаСлева;
	ОбластьРедактирования.ГраницаСправа = ОбластьЭталон.ГраницаСправа;
	ОбластьРедактирования.ГраницаСнизу  = ОбластьЭталон.ГраницаСнизу;
	
	ОбластьРедактирования.ЦветРамки  	= ОбластьЭталон.ЦветРамки;
	ОбластьРедактирования.ВысотаСтроки  = 16;
	
	ОбластьРедактирования.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
КонецПроцедуры // ОформитьОбластьРедактирования()

&НаСервере
Процедура ВывестиКартинкиВТабличныйДокументНаСервере()
	
	// Не возможно вывести на клиенте для Веб-клинта (ряд методов не документированы и для тонкого клиента)
	Выполнять = Истина;
	
	Для НомерСтроки = 2 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		
		ОбластьРедактирования = ТабличныйДокументМодели.Область(НомерСтроки, 1);
		
		ОтступСтроки = ТабличныйДокументМодели.Область(НомерСтроки, 1).Отступ;
		Если СокрЛП(ОбластьРедактирования.Текст) = "" Тогда
			Прервать;
		КонецЕсли;
		
		НетКартинкиСвернуть = Истина;
		// Выведем картинку группировки, если нужно
		Если ТабличныйДокументМодели.Область(НомерСтроки + 1, 1).Отступ > ОтступСтроки Тогда
			//Свернуть/Развернуть
			
			//ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 1;
			
			ОбластьКартинка = ТабличныйДокументМодели.Область("R" + НомерСтроки + "C8");
			РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			РисунокСвернутьРазвернуть.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_Свернуть";
			
			РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Свернуть;
			
			РисунокСвернутьРазвернуть.Расположить(ОбластьРедактирования);
			РисунокСвернутьРазвернуть.РазмерКартинки = РазмерКартинки.Пропорционально;
			РисунокСвернутьРазвернуть.Линия 		 = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			РисунокСвернутьРазвернуть.Лево  		 = РисунокСвернутьРазвернуть.Лево + 0.5 + (ОбластьРедактирования.Отступ - 2) * 1.5;
			РисунокСвернутьРазвернуть.Верх  		 = РисунокСвернутьРазвернуть.Верх + 1.1;
			РисунокСвернутьРазвернуть.Ширина 		 = 3;
			РисунокСвернутьРазвернуть.Высота 		 = 3;
			РисунокСвернутьРазвернуть.ЦветФона		 = ОбластьРедактирования.ЦветФона;
			
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
			НетКартинкиСвернуть = Ложь;
		КонецЕсли;
		
		// Выведем картинку документа
		Если НетКартинкиСвернуть Тогда
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
		КонецЕсли;
		
		ИндексКартинки = -1;
		Расшифровка = ОбластьРедактирования.Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			ИндексКартинки = 0;
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
			ИндексКартинки = ?(Расшифровка.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
		КонецЕсли;
		
		Картинка = СоответствиеКоллекцииКартинокТипаЭтапа.Получить(ИндексКартинки);
		
		Если Картинка <> Неопределено Тогда
			//ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
			
			Рисунок = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Рисунок.Картинка = Картинка;
			
			Рисунок.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_ТипЭтапа";
			
			Рисунок.Расположить(ОбластьРедактирования);
			Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			Рисунок.Линия 		   = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			Рисунок.Лево  		   = Рисунок.Лево + 2 + (ОбластьРедактирования.Отступ - 2) * 1.5;
			Рисунок.Верх  		   = Рисунок.Верх + 0.8;
			Рисунок.Ширина 		   = 3.5;
			Рисунок.Высота 		   = 3.5;
			Рисунок.ЦветФона	   = ОбластьРедактирования.ЦветФона;
			
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиКартинкиВТабличныйДокумент()

&НаСервере
Процедура ПрочитатьДанныеМоделиПроцесса()
	
	// Вставим верхнюю строку дерева этапов
	ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	СтрокаДерева = ЭлементыДерева.Добавить();
	СтрокаДерева.ИндексКартинки = -1;
	
	ЗаполнитьДеревоПоЭтапам();
	
КонецПроцедуры // ПрочитатьДанныеМоделиПроцесса()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимРедактирования(Форма)
	
	Форма.Элементы.СтраницыОтображенияГрафиков.ТекущаяСтраница = Форма.Элементы[Форма.РежимРедактированияМодели];
	Форма.Элементы.ПолосаРегулированияШириныДиаграммыГанта.Видимость = Форма.РежимРедактированияМодели = "Графически";
	
КонецПроцедуры // УстановитьРежимРедактирования()

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	
	ТекущийЭтапДерева = Неопределено;
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийЭтапДерева = ТекущиеДанные.Этап;
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("Подключамеый_РежимОтображенияПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключамеый_РежимОтображенияПриИзменении()
	
	УстановитьРежимРедактирования(ЭтотОбъект);
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		ИнициализироватьТабличныйДокументМодели();
		
		//Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
		//КонецЦикла;
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	Иначе
		//РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
	КонецЕсли;
	
КонецПроцедуры // Подключамеый_РежимОтображенияПриИзменении()

&НаКлиенте
Процедура ПолосаРегулированияШириныДиаграммыГантаПриИзменении(Элемент)
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	
	ДиаграммаОбъект.Обновление = Ложь;
	ТабличныйДокументМодели.Область("Служебная_ДиаграммаГанта").ШиринаКолонки = ПолосаРегулированияШириныДиаграммыГанта*2;
	
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПриИзменении(Элемент)
	ПеренестиДанныеТабличногоДокументаВЭтапКалендарногоПлана(Элемент.ТекущаяОбласть);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Попытка
		АктивнаяЯчейка = ТабличныйДокументМодели.Область(АдресТекущейЯчейки);
	Исключение
		АктивнаяЯчейка = Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Лево > 1 И НЕ Область.СодержитЗначение Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Низ <= 2 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	СтрокаОбласти = "R" + Формат(Область.Низ, "ЧН=0; ЧГ=");
	НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
	ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
		
	Если ОбластьИдентификатора.Расшифровка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
	Если ДанныеСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Этап = ДанныеСтрокиДерева.Этап;
	
	Если Этап = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СписокРедактируемыхКолонок.НайтиПоЗначению(Область.Расшифровка) = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Модифицированность = Истина;
		ПараметрыФормы = Новый Структура("Ключ", Этап);

		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа",ЭтотОбъект, Новый Структура("Ссылка, ВерсияДанных", Этап, ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
			ОткрытьФорму("Справочник.CRM_ШаблоныЭтаповПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект.УникальныйИдентификатор,,,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
		Иначе
			ОткрытьФорму("Документ.CRM_ШаблонЭтапаКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект.УникальныйИдентификатор,,,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		СтандартнаяОбработка = РазрешеноРедактированиеЭлемента(Область.Расшифровка, ОбластьИдентификатора.Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноРедактированиеЭлемента(ИмяРеквизита, ИдентификаторСтроки)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ИмяРеквизита = "ПродолжительностьДней" Тогда	
		Если ТекДанные.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для контрольной точки изменение длительности не предусмотрено'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументМоделиПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		Если ТекущаяОбласть.Имя = "ДиаграммаГанта" Тогда
			Элемент.Редактирование  = Ложь;
			Возврат;
		
		Иначе
			Если Не Элемент.Редактирование Тогда
				Элемент.Редактирование  = Истина;
			КонецЕсли;
			
			МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяОбласть.Имя, "_");
			СтрокаОбласти = МассивИмени[0];
			
			НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			
			Если СтрНайти(ТекущаяОбласть.Имя, "ТипЭтапа") > 0 Тогда
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); // Этап всегда первая колонка С1
				
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				РежимСвернуть = (СтрНайти(ТекущаяОбласть.Имя, "Свернуть") > 0);
				Попытка 
					СуффиксИмени = ?(РежимСвернуть, "Свернуть", "Развернуть");
					ОбратныйСуффикс = ?(РежимСвернуть, "Развернуть", "Свернуть");
					Рисунок = ТабличныйДокументМодели.Рисунки[ТекущаяОбласть.Имя];
					Рисунок.Картинка = ?(РежимСвернуть, БиблиотекаКартинок.CRM_Развернуть, БиблиотекаКартинок.CRM_Свернуть);
					Рисунок.Имя = СтрокаОбласти + "_" + ОбратныйСуффикс;
				Исключение
				КонецПопытки;
				
				СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), Не РежимСвернуть);
				
				СвернутьРазвернутьТочкуДиаграммы(ТекущиеДанные.ИдентификаторСтроки, Не РежимСвернуть);
				
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); // Этап всегда первая колонка С1
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрНайти(ТекущаяОбласть.Имя, "C") > 0 Тогда // адрес конкретной ячейки
			АдресТекущейЯчейки = ТекущаяОбласть.Имя;
		КонецЕсли;
		
		Если ТекущаяОбласть.Низ < 3 Тогда
			Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			Элемент.Редактирование = Ложь;
		Иначе
			СтрокаОбласти = "R" + Формат(ТекущаяОбласть.Низ, "ЧН=0; ЧГ=");
			НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
			
			Если ОбластьИдентификатора.Расшифровка <> Неопределено Тогда
				Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			Иначе
				Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ЗначениеЗаполнено(ТекущаяОбласть.Расшифровка) И СписокРедактируемыхКолонок.НайтиПоЗначению(ТекущаяОбласть.Расшифровка)<>Неопределено
				И ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.Этап) = Тип("ДокументСсылка.CRM_ШаблонЭтапаКалендарногоПлана") Тогда
				Если Не Элемент.Редактирование Тогда
					Элемент.Редактирование = Истина;
				КонецЕсли;
			Иначе
				Элемент.Редактирование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Элемент.ТекущаяОбласть = ТабличныйДокументМодели.Область("R" + Элемент.ТекущаяОбласть.Верх);
	Если ЗначениеЗаполнено(ТекущаяОбластьСтрока) Тогда
		ОбластьСтрока = ТабличныйДокументМодели.Область(ТекущаяОбластьСтрока);
		ОбластьСтрока.ЦветФона = ЦветФонаПоля;
	КонецЕсли;
	ТекущаяОбластьСтрока = "R" + Элемент.ТекущаяОбласть.Верх;
	ОбластьСтрока = ТабличныйДокументМодели.Область(ТекущаяОбластьСтрока);
	ОбластьСтрока.ЦветФона = ЦветНавигации;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанныеТабличногоДокументаВЭтапКалендарногоПлана(ОбластьРедактирования)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Значение = ОбластьРедактирования.Значение;
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ОбластьРедактирования.Расшифровка, ТекДанные.ПолучитьИдентификатор(), Значение) Тогда
		ДеревоМоделиОбновить(Неопределено);
	Иначе
		ОбластьРедактирования.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ЭлементыДерева, Видимость)
		
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		ТабличныйДокументМодели.Область(СтрокаДерева.АдресСтрокиОбласти).Видимость = Видимость;
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Видимость);
	
	КонецЦикла;
	
КонецПроцедуры // СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно()

&НаКлиенте
Процедура СвернутьРазвернутьТочкуДиаграммы(ИдентифкаторТочки, Развернуть, Знач ДиаграммаОбъект = Неопределено)

	Если ДиаграммаОбъект = Неопределено Тогда
		ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
		ДиаграммаОбъект = ДиаграммаРисунок.Объект;
		
	КонецЕсли;

	Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки);
	Если Развернуть Тогда
		ДиаграммаОбъект.РазвернутьТочку(Точка, Истина);
	Иначе	
		ДиаграммаОбъект.СвернутьТочку(Точка, Истина);
	КонецЕсли;
	
КонецПроцедуры // СвернутьТочкуДиаграммы()

&НаКлиенте
Процедура Развернуть(Команда)
	Если РежимРедактированияМодели = "Графически" Тогда
		РазвернутьСтрокиТабличногоДокумента(Истина);
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Если РежимРедактированияМодели = "Графически" Тогда
		РазвернутьСтрокиТабличногоДокумента(Ложь);
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиТабличногоДокумента(Развернуть = Истина)
	
	СтрокиДерева = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Попытка // чтобы не искать перебором всей коллекции
			СуффиксИмени = ?(Развернуть, "_Развернуть", "_Свернуть");
			ОбратныйСуффикс = ?(Развернуть, "_Свернуть", "_Развернуть");
			Рисунок = ТабличныйДокументМодели.Рисунки[СтрокаДерева.АдресСтрокиОбласти + СуффиксИмени];
			Рисунок.Картинка = БиблиотекаКартинок["CRM" + ОбратныйСуффикс];
			Рисунок.Имя = СтрокаДерева.АдресСтрокиОбласти + ОбратныйСуффикс;
		Исключение
		КонецПопытки;
		
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Развернуть);
		СвернутьРазвернутьТочкуДиаграммы(СтрокаДерева.ИдентификаторСтроки, Развернуть);
		
	КонецЦикла;
	
КонецПроцедуры //РазвернутьСтрокиТабличногоДокумента()

#КонецОбласти // РаботаСЭтапами
