#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов
//  Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	
// Процедура - Создать элементы справочника по умолчанию
//  Процедура создает предопределенные элементы справочника.
//
Процедура СоздатьЭлементыСправочникаПоУмолчанию() Экспорт
	Родитель	= Справочники.CRM_ВоронкиПродаж.Интересы;
	Сценарий = Справочники.CRM_СостоянияИнтересов.ПустаяСсылка();
	ВыборкаСценарий = Справочники.CRM_СостоянияИнтересов.Выбрать(Сценарий);
	Если ВыборкаСценарий.Следующий() Тогда
		Сценарий = ВыборкаСценарий.Ссылка;
	КонецЕсли;
	РодительОбъект = Родитель.ПолучитьОбъект();
	РодительОбъект.СценарийИнтереса = Сценарий;
	РодительОбъект.Записать();
	Выборка		= Справочники.CRM_СостоянияИнтересов.Выбрать(Сценарий, , , "Код Возр");
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСправочника = Справочники.CRM_ВоронкиПродаж.НайтиПоНаименованию(Выборка.Наименование);
		Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
			ВоронкаОбъект	= ЭлементСправочника.ПолучитьОбъект();
		Иначе	
			ВоронкаОбъект				= Справочники.CRM_ВоронкиПродаж.СоздатьЭлемент();
			ВоронкаОбъект.Родитель		= Родитель;
			ВоронкаОбъект.Наименование	= Выборка.Наименование;
			НовыйЭтап					= ВоронкаОбъект.Состав.Добавить();
			НовыйЭтап.КартаМаршрута		= Выборка.Родитель;
			НовыйЭтап.ТочкаМаршрута		= Выборка.Ссылка;
		КонецЕсли;
		ВоронкаОбъект.РеквизитДопУпорядочивания	= Выборка.РеквизитДопУпорядочивания;
		ВоронкаОбъект.Оценка					= Выборка.ВероятностьСделки;
		ВоронкаОбъект.ВидЭтапа					= Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов;
		Попытка
			ВоронкаОбъект.Записать();
		Исключение
		КонецПопытки;	
	КонецЦикла;
КонецПроцедуры // СоздатьЭлементыСправочникаПоУмолчанию()

/////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПЕЧАТИ

// Процедура - Печать
//  
//  Сформировать печатные формы объектов.
//
// Параметры:
//  МассивОбъектов			 - Массив		 	- Массив ссылок на объекты которые нужно распечатать.
//  ПараметрыПечати			 - Структура	 	- Структура дополнительных параметров печати.
//  КоллекцияПечатныхФорм	 - ТаблицаЗначений	- Сформированные табличные документы.
//  ОбъектыПечати			 - Массив			- Объекты печати. 
//  ПараметрыВывода			 - Структура		- Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, 
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПроверкаВоронокПродаж") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПроверкаВоронокПродаж", "Проверка воронок продаж",
			ПечатьЭтаповВоронки(МассивОбъектов, ОбъектыПечати), ОбъектыПечати,
			"Справочник.CRM_ВоронкиПродаж.ПроверкаВоронокПродаж");
	КонецЕсли;
		
КонецПроцедуры

// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов	 - Массив	 - Массив элементов справочника CRM_ВоронкиПродаж.
//  ОбъектыПечати	 - Массив	 - Объекты печати.
// 
// Возвращаемое значение:
//  ТабДокумент - Табличный документ, печатная форма.
//
Функция ПечатьЭтаповВоронки(МассивОбъектов, ОбъектыПечати) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	CRM_ТочкиМаршрутов.Владелец КАК КартаМаршрута,
					|	CRM_ТочкиМаршрутов.Ссылка КАК ТочкаМаршрута,
					|	CRM_ТочкиМаршрутов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
					|	CRM_ТочкиМаршрутов.Вид КАК Вид
					|ПОМЕСТИТЬ
					|	ТочкиМаршрута
					|ИЗ
					|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
					|;
					|	
					|ВЫБРАТЬ
					|	CRM_ВоронкиПродажСостав.Ссылка КАК Ссылка,
					|	CRM_ВоронкиПродажСостав.КартаМаршрута КАК КартаМаршрута,
					|	CRM_ВоронкиПродажСостав.ТочкаМаршрута КАК ТочкаМаршрута
					|ПОМЕСТИТЬ
					|	ВоронкиПродажСостав
					|ИЗ
					|	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
					|;
					|	
					|ВЫБРАТЬ
					|	
					|	ТочкиМаршрута.КартаМаршрута КАК КартаМаршрута,
					|	ТочкиМаршрута.ТочкаМаршрута КАК ТочкаМаршрута,
					|	ЕСТЬNULL(CRM_ВоронкиПродажСостав.Ссылка, ЗНАЧЕНИЕ(Справочник.CRM_ВоронкиПродаж.ПустаяСсылка)) КАК ВоронкаПродаж,
					|	ТочкиМаршрута.Вид
					|ИЗ
					|		ТочкиМаршрута
					|		ПОЛНОЕ СОЕДИНЕНИЕ ВоронкиПродажСостав КАК CRM_ВоронкиПродажСостав
					|		ПО ТочкиМаршрута.КартаМаршрута = CRM_ВоронкиПродажСостав.КартаМаршрута
					|			И ТочкиМаршрута.ТочкаМаршрута = CRM_ВоронкиПродажСостав.ТочкаМаршрута
					|ГДЕ
					|	(ТочкиМаршрута.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Действие)
					|			ИЛИ ТочкиМаршрута.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Старт))
					|
					|УПОРЯДОЧИТЬ ПО
					|	ТочкиМаршрута.КартаМаршрута.Наименование,
					|	ТочкиМаршрута.РеквизитДопУпорядочивания";
	ТаблицаСостава = Запрос.Выполнить().Выгрузить();
	
 	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВоронкаПродаж";
	Макет = ПолучитьМакет("ПроверкаВоронокПродаж");
	// Шапка
	Секция = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(Секция);
	
	ТекущаяКарта = Неопределено;
	ТекущаяТочка = Неопределено;
	Секция		 = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаСостава Цикл
		Если НЕ (ТекущаяКарта = СтрокаТаблицы.КартаМаршрута) Тогда
			ТекущаяКарта = СтрокаТаблицы.КартаМаршрута;
			Секция = Макет.ПолучитьОбласть("Карта");
			Секция.Параметры.КартаМаршрута	= ТекущаяКарта;
			ТабДокумент.Вывести(Секция);
			Секция = Неопределено;
		КонецЕсли;
		Если ТекущаяТочка = СтрокаТаблицы.ТочкаМаршрута Тогда
			Секция.Параметры.ВоронкаПродаж = Секция.Параметры.ВоронкаПродаж + ", " + Строка(СтрокаТаблицы.ВоронкаПродаж);
		Иначе	
			ТекущаяТочка = СтрокаТаблицы.ТочкаМаршрута;
			Секция = Макет.ПолучитьОбласть("Точка");
			Секция.Параметры.ТочкаМаршрута	= ТекущаяТочка;
			ТабДокумент.Вывести(Секция);
			Секция = Макет.ПолучитьОбласть("Воронка");
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВоронкаПродаж) Тогда
				Секция.Параметры.ВоронкаПродаж	= Строка(СтрокаТаблицы.ВоронкаПродаж);
			Иначе	
				Секция.Области.Воронка.ЦветФона = WebЦвета.Розовый;
			КонецЕсли;	
		    ТабДокумент.Присоединить(Секция);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектыПечати.Добавить(МассивОбъектов[0].Ссылка, "Справочник_1");
	НомерСтрокиОкончание = ТабДокумент.ВысотаТаблицы;
	ТабДокумент.Область(1, , НомерСтрокиОкончание, ).Имя = "Справочник_1";
	ТабДокумент.АвтоМасштаб = Истина;
	Возврат ТабДокумент;

КонецФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			Если ТипЗнч(Параметры.ЗначениеКопирования) = Тип("СправочникСсылка.CRM_ВоронкиПродаж") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования.Родитель) Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлементаСостав";
			КонецЕсли;
				
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
			Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") И Параметры.ЗначенияЗаполнения.Свойство("Родитель") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Родитель) Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлементаСостав";
			КонецЕсли;
			
		ИначеЕсли Параметры.Свойство("Ключ") Тогда
			Если Параметры.Ключ.Предопределенный Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлемента";
			ИначеЕсли ТипЗнч(Параметры.Ключ) = Тип("СправочникСсылка.CRM_ВоронкиПродаж") И ЗначениеЗаполнено(Параметры.Ключ.Родитель) Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлементаСостав";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - Обновить воронку продаж
// Процедура обновляет данные воронки продаж.
//
// Параметры:
//  СостояниеИнтереса	 - Ссылка	 -  Точка маршрута воронки продаж.
//
Процедура ОбновитьВоронкуПродаж(СостояниеИнтереса) Экспорт
	Если ЗначениеЗаполнено(СостояниеИнтереса.Родитель) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ВоронкиПродажСостав.Ссылка КАК Этап,
		                      |	CRM_ВоронкиПродаж.Ссылка КАК Воронка
		                      |ИЗ
		                      |	Справочник.CRM_ВоронкиПродаж КАК CRM_ВоронкиПродаж
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
		                      |		ПО CRM_ВоронкиПродаж.Ссылка = CRM_ВоронкиПродажСостав.Ссылка.Родитель
		                      |			И CRM_ВоронкиПродажСостав.ТочкаМаршрута = &ТочкаМаршрута
		                      |ГДЕ
		                      |	CRM_ВоронкиПродаж.СценарийИнтереса = &СценарийИнтереса");
		Запрос.УстановитьПараметр("ТочкаМаршрута", СостояниеИнтереса);
		Запрос.УстановитьПараметр("СценарийИнтереса", СостояниеИнтереса.Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.Этап) Тогда
				ЭтапВоронки = Выборка.Этап.ПолучитьОбъект();
			Иначе
				ЭтапВоронки = Справочники.CRM_ВоронкиПродаж.СоздатьЭлемент();
				ЭтапВоронки.Родитель = Выборка.Воронка;
				ЭтапВоронки.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов;
				СтрокаСостава = ЭтапВоронки.Состав.Добавить();
				СтрокаСостава.КартаМаршрута		= СостояниеИнтереса.Родитель;
				СтрокаСостава.ТочкаМаршрута		= СостояниеИнтереса;
			КонецЕсли;
			ЭтапВоронки.Наименование = СостояниеИнтереса.Наименование;
			ЭтапВоронки.Оценка = СостояниеИнтереса.ВероятностьСделки;
			ЭтапВоронки.РеквизитДопУпорядочивания = СостояниеИнтереса.РеквизитДопУпорядочивания;
			ЭтапВоронки.ПометкаУдаления = (СостояниеИнтереса.ПометкаУдаления ИЛИ НЕ СостояниеИнтереса.Используется);
			ЭтапВоронки.ИндексЦвета = СостояниеИнтереса.ИндексЦвета;
			ЭтапВоронки.ДополнительныеСвойства.Вставить("РеквизитаУпорядочиванияУстановлен", Истина);
			ЭтапВоронки.Записать();
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ВоронкиПродаж.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Справочник.CRM_ВоронкиПродаж КАК CRM_ВоронкиПродаж
		                      |ГДЕ
		                      |	CRM_ВоронкиПродаж.СценарийИнтереса = &СценарийИнтереса");
		Запрос.УстановитьПараметр("СценарийИнтереса", СостояниеИнтереса);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Воронка = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Воронка = Справочники.CRM_ВоронкиПродаж.СоздатьЭлемент();
			Воронка.СценарийИнтереса = СостояниеИнтереса;
		КонецЕсли;
		Воронка.ПометкаУдаления = СостояниеИнтереса.ПометкаУдаления;
		Воронка.Наименование = СостояниеИнтереса.Наименование;
		Воронка.Записать();
	КонецЕсли;
КонецПроцедуры

// Процедура - Установить цвета этапам воронки
// Процедура устанавливает цвета этапов воронки продаж.
//
Процедура УстановитьЦветаЭтапамВоронки() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ВоронкиПродаж.Родитель КАК Родитель,
	                      |	CRM_ВоронкиПродаж.Ссылка КАК Ссылка,
	                      |	CRM_ВоронкиПродаж.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	                      |ИЗ
	                      |	Справочник.CRM_ВоронкиПродаж КАК CRM_ВоронкиПродаж
	                      |ГДЕ
	                      |	CRM_ВоронкиПродаж.Родитель <> ЗНАЧЕНИЕ(Справочник.CRM_ВоронкиПродаж.ПустаяСсылка)
	                      |	И CRM_ВоронкиПродаж.Родитель.СценарийИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	РеквизитДопУпорядочивания
	                      |ИТОГИ ПО
	                      |	Родитель");
	ВыборкаРодитель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СписокЦветовПоУмолчанию = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветовПоУмолчанию();
	Пока ВыборкаРодитель.Следующий() Цикл
		Индекс = 0;
		Выборка = ВыборкаРодитель.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЭтапВоронки = Выборка.Ссылка.ПолучитьОбъект();
			Если Индекс>7 Тогда
				ЭтапВоронки.ИндексЦвета = 17;
			Иначе
				ЭтапВоронки.ИндексЦвета = СписокЦветовПоУмолчанию[Индекс].Значение;
			КонецЕсли;
			Индекс = Индекс + 1;
			ЭтапВоронки.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли


