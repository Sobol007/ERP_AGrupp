
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// +CRM
	// скроем раздел текущего этапа, если отключена ФО управления проектами.
	ИспользоватьПодсистемуУправленияПроектами = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПодсистемуУправленияПроектами");
	
	 // Если отключены бизнес-процессы, то скроем раздел ГруппаМаршрутПроцесса.
	Элементы.ГруппаМаршрутПроцесса.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы");
	
	// +CRM работа с этапами
	ПлановаяДатаНачалаПредыдущая = Объект.ПлановаяДатаНачала;
	Элементы.СтраницыОтображенияГрафиков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	// -CRM работа с этапами
	// -CRM
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ИзменитьУсловноеОформлениеКорняДерева();
		
		табВложения = ПолучитьПрикрепленныеФайлы();
		
		СтруктураФайлов = Новый Структура;
		
		Если табВложения.Количество() > 0 Тогда
			
			Для Каждого Стр Из табВложения Цикл
				
				Попытка
					// +CRM
					ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Стр.Ссылка);
					Если ДвоичныеДанные = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					// -CRM
					СтруктураФайлов.Вставить(Стр.Наименование, Новый Картинка(ДвоичныеДанные));;
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Объект.CRM_КомментарийHTML) Тогда
			ФорматированныйДокументТекст.УстановитьHTML(Объект.CRM_КомментарийHTML, СтруктураФайлов);
		ИначеЕсли НЕ ПустаяСтрока(Объект.Комментарий) Тогда
			// Если был заполнен ранее в типовом решении.
			HTMLТекст = CRM_ОбщегоНазначенияКлиентСервер.ПреобразоватьТекстВHTML(Объект.Комментарий);
			ФорматированныйДокументТекст.УстановитьHTML(HTMLТекст, СтруктураФайлов);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
			ПроверитьВозможностьИзмененияКартыМаршрута();
		КонецЕсли;
	Иначе
		Если Параметры.Свойство("CRM_ЭтоПроект") Тогда
			Объект.CRM_ЭтоПроект			= Параметры.CRM_ЭтоПроект;
			Объект.bpmТипПроцесса			= Перечисления.bpmТипыПроцессов.ПоУмолчанию;
		ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.CRM_ЭтоПроект			= Истина;
			Объект.bpmТипПроцесса			= Перечисления.bpmТипыПроцессов.ПоУмолчанию;
		КонецЕсли;
		
		Если НЕ Объект.CRM_ЭтоПроект Тогда
			Объект.bpmСостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
		КонецЕсли;
		
		Если Объект.CRM_ЭтоПроект Тогда
			ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере();
			// Инициация данных календарных графиков
			КалендарныеГрафикиПриЧтенииСозданииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПанельПроцессПроект.ТекущаяСтраница = ?(Объект.CRM_ЭтоПроект,Элементы.СтраницаПроекта,Элементы.СтраницаПроцесса);
	
	Элементы.КартаМаршрута.АвтоОтметкаНезаполненного = НЕ Объект.CRM_ЭтоПроект;
	Элементы.КартаМаршрута1.АвтоОтметкаНезаполненного = НЕ Объект.CRM_ЭтоПроект;
	Элементы.КартаМаршрута2.АвтоОтметкаНезаполненного = НЕ Объект.CRM_ЭтоПроект;
	
	Элементы.ПодменюОтчеты.Видимость = Объект.CRM_ЭтоПроект;
	Элементы.ФормаСоздатьНаОсновании.Видимость = Объект.CRM_ЭтоПроект;
	Элементы.ФормаСправочникПроектыCRM_СтартоватьБизнесПроцесс.Видимость = НЕ Объект.CRM_ЭтоПроект;
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессОбъекта;
	ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессНезависимый;
	ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессПоУмолчанию;
	Иначе
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессПоУмолчанию;
	КонецЕсли;
	
	
	Если ИспользоватьПодсистемуУправленияПроектами Тогда
		СтруктураПараметров = Новый Структура("CRM_Проект", Объект.Ссылка);
	Иначе
		СтруктураПараметров = Новый Структура("CRM_Проект", Справочники.Проекты.ПустаяСсылка());
	КонецЕсли;
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
	// +CRM
	//СтрокаПредупреждения = НСтр("ru='В настройках этапов маршрута не указан исполнитель первого этапа. Периодическое создание бизнес-процесса будет невозможно.';en='In settings of stages of a route the executor of the first stage is not specified. Periodic creation of business process will be impossible.'");
	Если ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
		ВозможенФоновыйСтартБизнесПроцесса = ПроверитьНаВозможностьФоновогоСтарта();
	КонецЕсли;
	
	Элементы.CRM_Периодический.Видимость		= ЗначениеЗаполнено(Объект.CRM_КартаМаршрута);
	Элементы.CRM_Периодический.Доступность		= ВозможенФоновыйСтартБизнесПроцесса;
	Элементы.СтраницыРасписания.Видимость		= (ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) И (НЕ ВозможенФоновыйСтартБизнесПроцесса ИЛИ Объект.CRM_Периодический));
	Элементы.СтраницыРасписания.ТекущаяСтраница	= ?(ВозможенФоновыйСтартБизнесПроцесса,Элементы.СтраницаРасписания,Элементы.СтраницаПредупреждения);
	
	Если Объект.CRM_Периодический Тогда
		ПолучитьРасписание();
		Элементы.ПредставлениеРасписания.Заголовок = ПолучитьПредставлениеРасписанияСервер();
	КонецЕсли;
	
	// Вычисляем, нужно ли показывать подсказку на вкладке "Дополнительные реквизиты".
	ПоказатьПодсказку = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов");
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = ?(ПоказатьПодсказку = Неопределено, Истина, ПоказатьПодсказку);
	
	bpmПредыдущийВидОбъектаСтрокой		= Объект.bpmВидОбъектаСтрокой;
	bpmПредыущийРеквизитОбъектаСтрокой	= Объект.bpmРеквизитОбъектаСтрокой;
	
	УстановитьСвойстваЭлементовПоТипу(Истина);
	
	ПолучитьСписокДоступныхОбъектов();
	
	СформироватьПредставлениеВложений();
	
	ПредыдущийСтатусПроекта = Объект.CRM_Статус;
	
	ВидимостьИПорядокКолонокДерева();
	
	СписокРедактируемыхКолонок.Добавить("ПлановаяДатаНачала");
	СписокРедактируемыхКолонок.Добавить("ПлановаяДатаОкончания");
	СписокРедактируемыхКолонок.Добавить("ПлановаяДлительность");
	СписокРедактируемыхКолонок.Добавить("ФактическаяДатаНачала");
	СписокРедактируемыхКолонок.Добавить("ФактическаяДатаОкончания");
	СписокРедактируемыхКолонок.Добавить("Сделано");
	
	АвтоЗаголовок = Ложь;
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
		
	ИначеЕсли Объект.CRM_ЭтоПроект Тогда
		Заголовок = НСтр("ru = 'Новый проект...'");
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Введите наименование проекта'");
		
	Иначе
		Заголовок = НСтр("ru = 'Новый процесс...'");
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Введите наименование процесса'");
	КонецЕсли;
	
	ТипПроекта = ?(Объект.CRM_ЭтоПроект, НСтр("ru = 'Проект'"), НСтр("ru = 'Процесс'"));

	ЕстьПраваНаПроект = (Пользователи.ЭтоПолноправныйПользователь() ИЛИ Объект.Ответственный = Пользователи.ТекущийПользователь());
	
	// -CRM
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Истина);
	
	УправлениеВидимостью();
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не ТекущийОбъект.ЭтоНовый() Тогда
		// Получим общую сумму запланированных затратам проекта.
		ИтогПоПлановымЗатратам = CRM_УправлениеПроектамиСервер.ПолучитьПлановыеЗатратыПоПроекту(ТекущийОбъект.Ссылка);
		Если ИтогПоПлановымЗатратам = 0 Тогда
			ИтогПоПлановымЗатратамПредставление = НСтр("ru='Отсутствуют';en='No'");
		Иначе
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
				ВалютаУправленческогоУчета = Строка(ВалютаУправленческогоУчета);
			Иначе
				ВалютаУправленческогоУчета = НСтр("ru='руб';en='rub.'");
			КонецЕсли;
			ИтогПоПлановымЗатратамПредставление = Формат(ИтогПоПлановымЗатратам, "ЧДЦ=2") + " " + ВалютаУправленческогоУчета;
			Если Прав(ИтогПоПлановымЗатратамПредставление, 1) <> "." Тогда
				ИтогПоПлановымЗатратамПредставление = ИтогПоПлановымЗатратамПредставление + ".";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийОбъект.CRM_ЭтоПроект Тогда
		ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере();
		// Инициация данных календарных графиков
		КалендарныеГрафикиПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	Если Объект.CRM_Периодический Тогда
		ТекущийОбъект.CRM_Расписание = Новый ХранилищеЗначения(ТекущееРасписание, Новый СжатиеДанных(9));
	КонецЕсли;
	
	CRM_МетодыМодулейМенеджеровСправочников.УстановитьПараметрыАвтостарта(ТекущийОбъект);
	
	Если ТекущийОбъект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта 
	ИЛИ ТекущийОбъект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		ТекущийОбъект.bpmХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных));
		ТекущийОбъект.bpmХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика));
	КонецЕсли;
	
	// Описание
	ФорматированныйДокументТекст.ПолучитьHTML(ТекущийОбъект.CRM_КомментарийHTML, СтруктураВложений);
	ТекущийОбъект.Комментарий = ФорматированныйДокументТекст.ПолучитьТекст();
	
	// В зависимости от типа очистим некоторые реквизиты.
	Если Не ТекущийОбъект.CRM_ЭтоПроект Тогда
		ТекущийОбъект.CRM_ТекущийЭтап = Неопределено;
	КонецЕсли;
	
	ТекущийОбъект.CRM_КолонкиКалендарногоГрафика = Новый ХранилищеЗначения(КолонкиКалендарногоГрафика);
	// -CRM
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ИспользоватьПодсистемуУправленияПроектами Тогда
		СтруктураПараметров = Новый Структура("CRM_Проект", Объект.Ссылка);
	Иначе
		СтруктураПараметров = Новый Структура("CRM_Проект", ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
	КонецЕсли;
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
	Если СтруктураВложений.Количество() <>  0 Тогда // Значит что-то меняли
		ИменаФайлов = Новый СписокЗначений;
		Для Каждого КлючИЗначение Из СтруктураВложений Цикл
			ИменаФайлов.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		УдалитьПредыдущиеВложенияФорматированногоДокумента(ИменаФайлов);
		ЗаписатьВложения();
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.3, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ (Объект.bpmВидОбъектаСтрокой = bpmПредыдущийВидОбъектаСтрокой)
	ИЛИ НЕ (Объект.bpmРеквизитОбъектаСтрокой = bpmПредыущийРеквизитОбъектаСтрокой) Тогда
		
		ОбновитьНастройкиЭтапов();
		
		bpmПредыдущийВидОбъектаСтрокой = Объект.bpmВидОбъектаСтрокой;
		bpmПредыущийРеквизитОбъектаСтрокой = Объект.bpmРеквизитОбъектаСтрокой;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПройденаПроверкаНастроекЭтапов()
	
	Если НЕ (Объект.bpmВидОбъектаСтрокой = bpmПредыдущийВидОбъектаСтрокой)
	ИЛИ НЕ (Объект.bpmРеквизитОбъектаСтрокой = bpmПредыущийРеквизитОбъектаСтрокой) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаборРегистра = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() = 0 Тогда
		НаборРегистра.Отбор.Сбросить();
		НаборРегистра.Отбор.Объект.Установить(Объект.CRM_КартаМаршрута);
		НаборРегистра.Прочитать();
	КонецЕсли;
	
	Для Каждого СтрокаНабора ИЗ НаборРегистра Цикл
		Если ЗначениеЗаполнено(СтрокаНабора.Состояние) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли; 
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗавершенаНастройкаМаршрута" И Параметр = Объект.Ссылка Тогда
		
		ПроверитьНастройкиУстановитьСвойстваЭлементов();
		ВозможенФоновыйСтартБизнесПроцесса = ПроверитьНаВозможностьФоновогоСтарта();
		Если НЕ ВозможенФоновыйСтартБизнесПроцесса Тогда
			Объект.CRM_Периодический = Ложь;
		КонецЕсли;
		УстановитьСвойстваЭлементовНастройкиПериодичности();
		
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.ПроектыПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество()>0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.ПроектыПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("ЗаписьПроекта", Объект.Ссылка);
	
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ Объект.CRM_ЭтоПроект Тогда
		
		Если Не ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не выбрана карта маршрута!";
			Сообщение.Поле = "Объект.CRM_КартаМаршрута";
			Сообщение.Сообщить();
			
			Отказ = Истина;
		КонецЕсли;
		
		Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
			Если Не ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не указан Вид объекта!";
				Сообщение.Поле = "Объект.bpmВидОбъектаСтрокой";
				Сообщение.Сообщить();
				
				Отказ = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.bpmРеквизитОбъектаСтрокой) Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не указан Реквизит объекта!";
				Сообщение.Поле = "Объект.bpmРеквизитОбъектаСтрокой";
				Сообщение.Сообщить();
				
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.CRM_ФормаОтметкиЭлементовСписка" Тогда

		КолонкиКалендарногоГрафика = ВыбранноеЗначение;
		Модифицированность = Истина;
		
		ТекущийЭтапДерева = Неопределено;
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийЭтапДерева = ТекущиеДанные.Этап;
		КонецЕсли;
		
		ВидимостьИПорядокКолонокДерева();
		
		ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		
		// Изменим плановую дату окончания при необходимости
		ПлановаяДатаОкончания = ПолучитьЗначениеРеквизита(НовыйОбъект, "ПлановаяДатаОкончания");
		Если ПлановаяДатаОкончания > Объект.ПлановаяДатаОкончания Тогда
			Объект.ПлановаяДатаОкончания = ПлановаяДатаОкончания;
			Модифицированность = Истина;
		КонецЕсли;
		
		ДобавитьЭтапЗадачуКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		
		ДобавитьЭтапЗадачуКонтрольнуюТочкуПослеЗаписиНового(НовыйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //ОбработчикиСобытийФормы


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура CRM_ТекущийЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Данные еще не записаны.
					   |Выбор текущего этапа возможен только после записи данных
					   |Данные будут записаны.");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИтогПоПлановымЗатратамНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данные еще не записаны.
					   |Формирование отчета возможно только после записи данных.'"));
		//
		Возврат;
	КонецЕсли;
	
	Если ИтогПоПлановымЗатратам = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для формирования отчета!';en='There are no data for formation of report!'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("Отбор,СформироватьПриОткрытии", Новый Структура("Проект", Объект.Ссылка), Истина);
	Форма = ПолучитьФорму("Отчет.CRM_ПлановыеЗатратыПроектов.ФормаОбъекта", СтруктураПараметры, ЭтотОбъект);
	Если Форма <> Неопределено Тогда
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПартнерПриИзменении(Элемент)
	Объект.CRM_КонтактноеЛицоПартнера = ПолучитьЗначениеРеквизита(Объект.CRM_Партнер, "CRM_ОсновноеКонтактноеЛицо");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкаРеквизитовСобытияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МаршрутЗаполнен() Тогда
		ТекстВопроса = НСтр("ru = 'При изменении карты маршрута, настройки этапов будут удалены. 
								  |Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("КартаМаршрутаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	КартаМаршрутаНачалоВыбораЗавершение(Неопределено, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаНачалоВыбораЗавершение(Ответ, Элемент) Экспорт
	
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьМаршрутИсполнителейПроцесса();
	КонецЕсли;
	
	Отбор = Новый Структура("Редактируется", Ложь);
	//Если Объект.bpmТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") Тогда
	//	Отбор.Вставить("ТипПроцесса", Объект.bpmТипПроцесса);
	//КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.CRM_КартыМаршрутов.ФормаВыбора",ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПоляОтбора(Элемент)
	
	ОбновитьАдресХранилищаНастройкиКомпоновщика();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru='Настройки отборов';en='Selection settings'");
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект, Адреса);
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|ИсточникШаблонов,
			|Заголовок,
			|НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьПорядок,
			|НеНастраиватьВыбор,
			|УникальныйИдентификатор,
			|ИмяШаблонаСКД,
			|ВозвращатьИмяТекущегоШаблонаСКД,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьПараметры",
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			Неопределено,
			//Объект.Ссылка,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных,
			Истина,
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			"",
			Истина,
			Истина,
			Истина),
			,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаПриИзменении(Элемент)
	
	Объект.CRM_Периодический = Ложь;
	
	Элементы.CRM_Периодический.Видимость = ЗначениеЗаполнено(Объект.CRM_КартаМаршрута);
	
	Если ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
		
		ВозможенФоновыйСтартБизнесПроцесса = ПроверитьНаВозможностьФоновогоСтарта(Объект.CRM_КартаМаршрута);
		
		УстановитьСвойстваЭлементовНастройкиПериодичности();
	КонецЕсли;
	
	ПриИзмененииКартыМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПериодическийПриИзменении(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Добавить вложение возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПериодическийПриИзмененииПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе	
		CRM_ПериодическийПриИзмененииПродолжение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ДатаНачала,ДатаКонца,ТекущееРасписание",НачалоДня(Объект.ПлановаяДатаНачала), НачалоДня(Объект.ПлановаяДатаОкончания), ТекущееРасписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредставлениеРасписанияНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Проекты.Форма.CRM_ФормаНастройкиРасписания", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭтаповМаршрута(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Добавить вложение возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаЭтаповМаршрутаЗавершение", ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	НастройкаЭтаповМаршрутаЗавершение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура bpmТипПроцессаПриИзменении(Элемент)
	
	ЭтотОбъект.Модифицированность = Истина;
	Если Объект.bpmТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессОбъекта;
		//ПриИзмененииВидаОбъекта();
	ИначеЕсли Объект.bpmТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.НезависимыйПроцесс") Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессНезависимый;
	ИначеЕсли Объект.bpmТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПоУмолчанию") Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессПоУмолчанию;
	Иначе
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессПоУмолчанию;
	КонецЕсли;
	
	ПриИзмененииКартыМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура bpmВидОбъектаСтрокойПриИзменении(Элемент)
	
	ПриИзмененииВидаОбъекта();
	УстановитьСвойстваЭлементовПоТипу();
	
КонецПроцедуры

&НаКлиенте
Процедура bpmРеквизитОбъектаСтрокойПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьСвойстваЭлементовПоТипу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБизнесПроцессыНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьБизнесПроцессыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭтапыНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЭтапыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачиИКТНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЗадачиИКТЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	ИзменитьУсловноеОформлениеКорняДерева();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		Заголовок = Объект.Наименование;
	Иначе
		Заголовок = НСтр("ru = 'Введите наименование...'");;
	КонецЕсли;
	
	НаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблонНаОснованииПроекта(Команда)
	CRM_УправлениеПроектамиКлиент.СоздатьШаблонНаОснованииПроекта(Объект.Ссылка);
КонецПроцедуры

#КонецОбласти //ОбработчикиСобытийЭлементовФормы


#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемыСвойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //СтандартныеПодсистемыСвойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПолучитьСхемуИНастройкиКомпоновкиДанных(ПриСоздании = Ложь)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если АдресСхемыКомпоновкиДанных = "" Тогда
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				Если НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда Возврат; КонецЕсли;
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.bpmВидОбъектаСтрокой);
			ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
			КонецЕсли;
		Иначе
			СхемаКомпоновкиДанных	= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		КонецЕсли;
	Иначе
		Если ПриСоздании Тогда
			СхемаКомпоновкиДанных = Объект.Ссылка.bpmХранилищеСхемыКомпоновкиДанных.Получить();
		Иначе
			СхемаКомпоновкиДанных = Неопределено;
		КонецЕсли;
		
		Если СхемаКомпоновкиДанных = Неопределено Тогда
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				Если НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда Возврат; КонецЕсли;
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.bpmВидОбъектаСтрокой);
			ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	ОшибкаПриЗагрузкеНастроек = Ложь;
	Попытка
		НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных);
	Исключение
		ОшибкаПриЗагрузкеНастроек = Истина;
		Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
			Если НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда Возврат; КонецЕсли;
			СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.bpmВидОбъектаСтрокой);
		ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
			СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
		КонецЕсли;
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
		НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных);
	КонецПопытки;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если АдресХранилищаНастройкиКомпоновщика = "" Тогда
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,Объект.bpmВидОбъектаСтрокой);
			ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,"Пользователи");
			КонецЕсли;
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных).НастройкиПоУмолчанию);
		КонецЕсли;
	Иначе
		Если ПриСоздании Тогда
			СохраненныеНастройкиКомпоновки = Объект.Ссылка.bpmХранилищеНастроекКомпоновкиДанных.Получить();
		Иначе
			СохраненныеНастройкиКомпоновки = Неопределено;
		КонецЕсли;
		
		Если ОшибкаПриЗагрузкеНастроек ИЛИ СохраненныеНастройкиКомпоновки = Неопределено Тогда
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,Объект.bpmВидОбъектаСтрокой);
			ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,"Пользователи");
			КонецЕсли;
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройкиКомпоновки);
		КонецЕсли;
	КонецЕсли;
	АдресХранилищаНастройкиКомпоновщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьИзмененияКартыМаршрута()
	
	Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_БизнесПроцесс.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	               |ГДЕ
	               |	CRM_БизнесПроцесс.Проект = &Проект
	               |	И CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута";
	Запрос.УстановитьПараметр("Проект"			,Объект.Ссылка);
	Запрос.УстановитьПараметр("КартаМаршрута"	,Объект.CRM_КартаМаршрута);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Элементы.КартаМаршрута.ТолькоПросмотр = Выборка.Следующий();
	Элементы.КартаМаршрута1.ТолькоПросмотр = Выборка.Следующий();
	Элементы.КартаМаршрута2.ТолькоПросмотр = Выборка.Следующий();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьМаршрутИсполнителейПроцесса()
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборИсполнителей.Прочитать();
	НаборИсполнителей.Очистить();
	НаборИсполнителей.Записать();
		
КонецПроцедуры

&НаСервере
Функция МаршрутЗаполнен()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ИсполнителиЭтапов.Объект
		|ИЗ
		|	РегистрСведений.CRM_ИсполнителиЭтапов КАК CRM_ИсполнителиЭтапов
		|ГДЕ
		|	CRM_ИсполнителиЭтапов.Объект = &Объект";

	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);

	Результат = Запрос.Выполнить();

    Возврат (Результат.Выбрать().Количество()<>0) 
	
КонецФункции	

&НаСервере
Процедура УдалитьПредыдущиеВложенияФорматированногоДокумента(ИменаФайлов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Файлы.Ссылка
	               |ИЗ
	               |	Справочник.ПроектыПрисоединенныеФайлы КАК Файлы
	               |ГДЕ
	               |	Файлы.ВладелецФайла = &Ссылка
	               |	И Файлы.Наименование В (&ИменаФайлов)";
	
	Запрос.УстановитьПараметр("Ссылка" , 		Объект.Ссылка);
	Запрос.УстановитьПараметр("ИменаФайлов", 	ИменаФайлов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектВложение = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения()
	
	Для Каждого КлючИЗначение Из СтруктураВложений Цикл
		
		РасширениеБезТочки = КлючИЗначение.Значение.Формат();
		
		ИмяФайла							= КлючИЗначение.Ключ + "." + РасширениеБезТочки;
		ИмяФайлаНаКомпьютере				= ПоместитьВоВременноеХранилище(КлючИЗначение.Значение.ПолучитьДвоичныеДанные(), УникальныйИдентификатор);
		
		ВремяИзменения = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", Объект.Ссылка);
		ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("ИмяБезРасширения", КлючИЗначение.Ключ);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
		ПараметрыФайла.Вставить("ВремяИзменения", ВремяИзменения);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ВремяИзменения);
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ИмяФайлаНаКомпьютере);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрикрепленныеФайлы() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроектыПрисоединенныеФайлы.Ссылка,
	               |	ПроектыПрисоединенныеФайлы.Наименование
	               |ИЗ
	               |	Справочник.ПроектыПрисоединенныеФайлы КАК ПроектыПрисоединенныеФайлы
	               |ГДЕ
	               |	ПроектыПрисоединенныеФайлы.ВладелецФайла = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", 	Объект.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура УстановитьСвойстваЭлементовНастройкиПериодичности()
	
	Элементы.CRM_Периодический.Видимость		= ЗначениеЗаполнено(Объект.CRM_КартаМаршрута);
	Элементы.CRM_Периодический.Доступность		= ВозможенФоновыйСтартБизнесПроцесса;
	Элементы.СтраницыРасписания.Видимость		= (ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) И (НЕ ВозможенФоновыйСтартБизнесПроцесса ИЛИ Объект.CRM_Периодический));
	Элементы.СтраницыРасписания.ТекущаяСтраница	= ?(ВозможенФоновыйСтартБизнесПроцесса,Элементы.СтраницаРасписания,Элементы.СтраницаПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()

	Если Объект.CRM_ЭтоПроект Тогда // Проект
		Элементы.ГруппаЭтапыПроекта.Видимость = ИспользоватьПодсистемуУправленияПроектами;
		Элементы.ГруппаДатыДеятельность.Видимость = ИспользоватьПодсистемуУправленияПроектами;
		Элементы.СтраницаЗадачи.Видимость = ИспользоватьПодсистемуУправленияПроектами;
		
		Если НЕ CRM_ЛицензированиеСервер.ВариантПоставкиКОРП() Тогда
			Элементы.СтраницаЗадачи.Видимость = Ложь;
			Элементы.CRM_ТекущийЭтап.Видимость = Ложь;
			Элементы.CRM_Планируемый.Видимость = Ложь;
			Элементы.ИтогПоПлановымЗатратам.Видимость = Ложь;
			Элементы.ОткрытьЭтапы.Видимость = Ложь;
			Элементы.ОткрытьЗадачиИКТ.Видимость = Ложь;
			Элементы.ГруппаСтатусПрогноз.Видимость = Ложь;
			Элементы.Печать.Видимость = Ложь;
			Элементы.Завершен.Видимость = Истина;
		Иначе	
			Если Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Завершен") ИЛИ
				 Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Отменен") Тогда
				 
				Элементы.ДеревоМодели.ТолькоПросмотр							= Истина;
				Элементы.ДеревоМоделиКнопкаДобавитьЭтап.Доступность				= Ложь;
				Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.Доступность			= Ложь;
				Элементы.ДеревоМоделиКнопкаДобавитьКонтрольнуюТочку.Доступность = Ложь;
				Элементы.ДеревоМоделиКнопкаПометитьНаУдаление.Доступность		= Ложь;
				Элементы.ДеревоМоделиКонтекстноеМенюДобавитьЭтап.Доступность	= Ложь;
				Элементы.ДеревоМоделиКонтекстноеМенюДобавитьЗадачу.Доступность	= Ложь;
				Элементы.ДеревоМоделиКонтекстноеМенюДобавитьКТ.Доступность 		= Ложь;
			Иначе
				Элементы.ДеревоМодели.ТолькоПросмотр							= Ложь;
				Элементы.ДеревоМоделиКнопкаДобавитьЭтап.Доступность				= Истина;
				Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.Доступность			= Истина;
				Элементы.ДеревоМоделиКнопкаДобавитьКонтрольнуюТочку.Доступность = Истина;
				Элементы.ДеревоМоделиКнопкаПометитьНаУдаление.Доступность		= Истина;
				Элементы.ДеревоМоделиКонтекстноеМенюДобавитьЭтап.Доступность	= Истина;
				Элементы.ДеревоМоделиКонтекстноеМенюДобавитьЗадачу.Доступность	= Истина;
				Элементы.ДеревоМоделиКонтекстноеМенюДобавитьКТ.Доступность 		= Истина;
			
			КонецЕсли;
		КонецЕсли;
		
	Иначе // Процесс
		Элементы.ГруппаЭтапыПроекта.Видимость 	  = Ложь;
		Элементы.ГруппаДатыДеятельность.Видимость = Ложь;
		Элементы.СтраницаЗадачи.Видимость 		  = Ложь;
		Элементы.Печать.Видимость				  = Ложь;
		Элементы.ОткрытьЭтапы.Видимость			  = Ложь;
		Элементы.ОткрытьЗадачиИКТ.Видимость		  = Ложь;
	КонецЕсли;
	
	Если CRM_ЛицензированиеСервер.ВариантПоставкиКОРП() Тогда

		СтатусПланируется = (Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Планируется"));
		
		Элементы.ПлановаяДатаНачала.ТолькоПросмотр    = НЕ СтатусПланируется;
		Элементы.ПлановаяДатаОкончания.ТолькоПросмотр = НЕ СтатусПланируется;
		
		Элементы.ДатаНачала.Видимость 				  = НЕ СтатусПланируется;
		Элементы.ДатаОкончания.Видимость			  = НЕ СтатусПланируется;
		
		Элементы.CRM_Прогноз.Видимость				  = НЕ СтатусПланируется;
		
	КонецЕсли;
	
КонецПроцедуры //УправлениеВидимостью()

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели", РежимРедактированияМодели);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиУстановитьСвойстваЭлементов()
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		Если Не ПройденаПроверкаНастроекЭтапов() Тогда
			Если НЕ Объект.bpmСостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Отменен Тогда
				Объект.bpmСостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
			КонецЕсли;
			Элементы.bpmСостояниеПроцесса.ТолькоПросмотр = Истина;
			Элементы.ДекорацияПредупреждение.Видимость = Истина;
		Иначе
			Элементы.bpmСостояниеПроцесса.ТолькоПросмотр = Ложь;
			Элементы.ДекорацияПредупреждение.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.bpmСостояниеПроцесса.ТолькоПросмотр = Ложь;
		Элементы.ДекорацияПредупреждение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоТипу(ПриСоздании = Ложь)
	
	ПроверитьНастройкиУстановитьСвойстваЭлементов();
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта
	ИЛИ Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		
		Если ЗначениеЗаполнено(Объект.удалитьbpmВидОбъекта) И НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
			Объект.bpmВидОбъектаСтрокой		= "CRM_Интерес";
			Объект.bpmРеквизитОбъектаСтрокой= "СостояниеИнтереса"
		КонецЕсли;
		
		Элементы.bpmВидОбъектаСтрокой.ТолькоПросмотр					= (Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
		Элементы.bpmРеквизитОбъектаСтрокой.ТолькоПросмотр				= (Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
		Элементы.bpmВидОбъектаСтрокой.АвтоОтметкаНезаполненного			= (Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
		Элементы.bpmРеквизитОбъектаСтрокой.АвтоОтметкаНезаполненного	= (Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
		Элементы.bpmИспользоватьПриПринятииОбращения.ТолькоПросмотр		= (Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс);
		
		Если ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
			ПолучитьСписокДоступныхРеквизитов();
		КонецЕсли;
		
		Элементы.ВидСобытиеОтборы.Видимость = Истина;
		Элементы.ГруппаОтборы.Видимость = ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой);
		
		ПолучитьСхемуИНастройкиКомпоновкиДанных(ПриСоздании);
		ОбновитьЭлементыОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
Функция ПроверитьНаВозможностьФоновогоСтарта(ВыбраннаяКартаМаршрута = Неопределено)
	
	Если НЕ ВыбраннаяКартаМаршрута = Неопределено Тогда
		СписокТочекСтарта = CRM_БизнесПроцессыСервер.ПолучитьВозможныеТочкуАвтоСтартаБизнесПроцесса(ВыбраннаяКартаМаршрута);
	Иначе
		СписокТочекСтарта = CRM_БизнесПроцессыСервер.ПолучитьВозможныеТочкуАвтоСтартаБизнесПроцесса(?(Объект.Ссылка.Пустая(),Объект.CRM_КартаМаршрута,Объект.Ссылка));
	КонецЕсли;
	
	ВозможенСтарт	= Ложь;
	Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
		ВозможенСтарт	= ЭлементСписка.Пометка;
		Если ЭлементСписка.Пометка Тогда Прервать; КонецЕсли;
	КонецЦикла;
	
	Возврат ВозможенСтарт;
	
КонецФункции

&НаСервере
Процедура ОбновитьАдресХранилищаНастройкиКомпоновщика()
	
	АдресХранилищаНастройкиКомпоновщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	Адреса.СхемаКомпоновкиДанных = АдресСхемыКомпоновкиДанных;
	Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
	Возврат Адреса;
	
КонецФункции 

&НаКлиенте
Процедура НастройкиЗавершение(Результат, Адреса) Экспорт

	Если Результат <> Неопределено Тогда
		
		АдресХранилищаНастройкиКомпоновщика = Результат.АдресХранилищаНастройкиКомпоновщика;
		КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика));
		
		ОбновитьЭлементыОтбора();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборНаФОрму(ИндексЭлемента, ИндексОтбора)
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		Постфикс = "Независимый"
	Иначе
		Постфикс = "";
	КонецЕсли;
	
	НоваяГруппа = Элементы.Добавить("ФлагЛевоеЗначение"+Постфикс+Строка(ИндексЭлемента), Тип("ГруппаФормы"), ?(Постфикс = "",Элементы.ЛевоеЗнчение,Элементы.ЛевоеЗнчениеНезависимый));
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	НовыйЭлемент = Элементы.Добавить("Использование"+Постфикс+Строка(ИндексЭлемента), Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].Использование";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
	НовыйЭлемент = Элементы.Добавить("ЛевоеЗначение"+Постфикс+Строка(ИндексЭлемента), Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ЛевоеЗначение";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	НовыйЭлемент = Элементы.Добавить("ВидСравнения"+Постфикс+Строка(ИндексЭлемента), Тип("ПолеФормы"), ?(Постфикс = "",Элементы.ВидСравнения,Элементы.ВидСравненияНезависимый));
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ВидСравнения";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
	НовыйЭлемент = Элементы.Добавить("ПравоеЗначение"+Постфикс+Строка(ИндексЭлемента), Тип("ПолеФормы"), ?(Постфикс = "",Элементы.ПравоеЗначение,Элементы.ПравоеЗначениеНезависимый));
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ПравоеЗначение";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.КнопкаОчистки = Истина;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыОтбора()
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		Постфикс = "Независимый"
	Иначе
		Постфикс = "";
	КонецЕсли;
	
	Для Ном = 1 По 3 Цикл
		Если Элементы.Найти("Использование"+Постфикс+Строка(Ном)) = Неопределено Тогда Продолжить; КонецЕсли;
		
		ЭлементОтбора = Элементы.Найти("Использование"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ЛевоеЗначение"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ВидСравнения"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ПравоеЗначение"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ФлагЛевоеЗначение"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
	КонецЦикла;
	
	Обработано = 0;
	Для Каждого ЭлементОтбора ИЗ КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обработано = 3 Тогда Прервать; КонецЕсли;
		
		Обработано = Обработано + 1;
		Индекс = КомпоновщикНастроек.Настройки.Отбор.Элементы.Индекс(ЭлементОтбора);
			
		ДобавитьОтборНаФОрму(Обработано, Индекс);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКартыМаршрута()
	
	Если ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
		Если Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
			
			АдресСхемыКомпоновкиДанных = "";
			АдресХранилищаНастройкиКомпоновщика = "";
			
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				Объект.bpmВидОбъектаСтрокой			= Объект.CRM_КартаМаршрута.ВидОбъектаСтрокой;
				Объект.bpmРеквизитОбъектаСтрокой	= Объект.CRM_КартаМаршрута.РеквизитОбъектаСтрокой;
			Иначе
				Объект.bpmВидОбъектаСтрокой					= "";
				Объект.bpmРеквизитОбъектаСтрокой			= "";
			КонецЕсли;
			
			Объект.bpmИспользоватьПриПринятииОбращения	= Объект.CRM_КартаМаршрута.ИспользоватьПриПринятииОбращения;
			
			УстановитьСвойстваЭлементовПоТипу();
		ИначеЕсли Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
			
			АдресСхемыКомпоновкиДанных = "";
			АдресХранилищаНастройкиКомпоновщика = "";
			
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта И НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
				Объект.bpmВидОбъектаСтрокой					= "CRM_Интерес";
				Объект.bpmРеквизитОбъектаСтрокой			= "СостояниеИнтереса"
			Иначе
				Объект.bpmВидОбъектаСтрокой					= "";
				Объект.bpmРеквизитОбъектаСтрокой			= "";
			КонецЕсли;
			
			Объект.bpmИспользоватьПриПринятииОбращения	= Объект.CRM_КартаМаршрута.ИспользоватьПриПринятииОбращения;
			
			УстановитьСвойстваЭлементовПоТипу();
		ИначеЕсли Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
			АдресСхемыКомпоновкиДанных = "";
			АдресХранилищаНастройкиКомпоновщика = "";
			
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				Объект.bpmВидОбъектаСтрокой					= "CRM_Интерес";
				Объект.bpmРеквизитОбъектаСтрокой			= "СостояниеИнтереса"
			ИначеЕсли  Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				Объект.bpmИспользоватьПриПринятииОбращения	= Ложь;
				Объект.bpmВидОбъектаСтрокой					= "";
				Объект.bpmРеквизитОбъектаСтрокой			= "";
			КонецЕсли;
			
			УстановитьСвойстваЭлементовПоТипу();
		Иначе
			АдресСхемыКомпоновкиДанных					= "";
			АдресХранилищаНастройкиКомпоновщика			= "";
			Элементы.ГруппаОтборы.Видимость				= Ложь;
			Объект.bpmВидОбъектаСтрокой					= "";
			Объект.bpmРеквизитОбъектаСтрокой			= "";
		КонецЕсли;
	Иначе
		АдресСхемыКомпоновкиДанных					= "";
		АдресХранилищаНастройкиКомпоновщика			= "";
		Элементы.ГруппаОтборы.Видимость				= Ложь;
		Объект.bpmВидОбъектаСтрокой					= "";
		Объект.bpmРеквизитОбъектаСтрокой			= "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасписание()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущееРасписание = ТекущийОбъект.CRM_Расписание.Получить();
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеРасписанияСервер()
	
	Возврат CRM_МетодыМодулейМенеджеровСправочников.ПолучитьПредставлениеРасписания(ТекущееРасписание);
	
КонецФункции

&НаКлиенте
Процедура CRM_ПериодическийПриИзмененииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Если Объект.CRM_Периодический И ТекущееРасписание = Неопределено Тогда
		ПараметрыФормы = Новый Структура("ДатаНачала,ДатаКонца,ТекущееРасписание",НачалоДня(Объект.ПлановаяДатаНачала), НачалоДня(Объект.ПлановаяДатаОкончания), ТекущееРасписание);
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПериодическийПриИзмененииЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.Проекты.Форма.CRM_ФормаНастройкиРасписания", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		УстановитьСвойстваЭлементовНастройкиПериодичности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПериодическийПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ТекущееРасписание = Результат;
		Элементы.ПредставлениеРасписания.Заголовок = ПолучитьПредставлениеРасписанияСервер();
	Иначе
		Объект.CRM_Периодический = Ложь;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовНастройкиПериодичности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ТекущееРасписание = Результат;
		Элементы.ПредставлениеРасписания.Заголовок = ПолучитьПредставлениеРасписанияСервер();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭтаповМаршрутаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Процесс", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.CRM_НастройкаЭтаповБизнесПроцессов", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
	ВозможенФоновыйСтартБизнесПроцесса = ПроверитьНаВозможностьФоновогоСтарта();
	
	Если НЕ ВозможенФоновыйСтартБизнесПроцесса Тогда
		Объект.CRM_Периодический = Ложь;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовНастройкиПериодичности();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДополнительныхРеквизитовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов", Ложь);
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокДоступныхОбъектов()
	
	Для Каждого ТипОбъекта ИЗ Метаданные.ОпределяемыеТипы.CRM_ПроцессныеОбъекты.Тип.Типы() Цикл
		
		МетаДокумент = Метаданные.НайтиПоТипу(ТипОбъекта);
			
		Если НРег(Лев(МетаДокумент.Имя,7)) = "удалить" Тогда Продолжить; КонецЕсли;
		
		Элементы.bpmВидОбъектаСтрокой.СписокВыбора.Добавить(МетаДокумент.Имя,МетаДокумент.Представление());
		Элементы.bpmВидОбъектаСтрокой.СписокВыбора.СортироватьПоЗначению();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияСвойств(ДополнительныеСвойстваОбъекта, Наборы, ЭтоДополнительноеСведение)
	
	Свойства = ДополнительныеСвойстваОбъекта.ВыгрузитьКолонку("Свойство");
	
	НаборыСвойств = Новый ТаблицаЗначений;
	
	НаборыСвойств.Колонки.Добавить(
		"Набор", Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений"));
	
	НаборыСвойств.Колонки.Добавить(
		"ПорядокНабора", Новый ОписаниеТипов("Число"));
	
	Для каждого ЭлементСписка Из Наборы Цикл
		НоваяСтрока = НаборыСвойств.Добавить();
		НоваяСтрока.Набор         = ЭлементСписка.Набор;
		НоваяСтрока.ПорядокНабора = Наборы.Индекс(ЭлементСписка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойства",      Свойства);
	Запрос.УстановитьПараметр("НаборыСвойств", НаборыСвойств);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора
	|ПОМЕСТИТЬ НаборыСвойств
	|ИЗ
	|	&НаборыСвойств КАК НаборыСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПометкаУдаления,
	|	СвойстваНаборов.НомерСтроки КАК ПорядокСвойства
	|ПОМЕСТИТЬ СвойстваНаборов
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК СвойстваНаборов
	|		ПО (СвойстваНаборов.Ссылка = НаборыСвойств.Набор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|		ПО (СвойстваНаборов.Свойство = Свойства.Ссылка)
	|ГДЕ
	|	НЕ СвойстваНаборов.ПометкаУдаления
	|	И НЕ Свойства.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Свойства.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ЗаполненныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.Ссылка В(&Свойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваНаборов.Набор,
	|	СвойстваНаборов.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПорядокСвойства,
	|	СвойстваНаборов.ПометкаУдаления КАК Удалено
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	СвойстваНаборов КАК СвойстваНаборов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка),
	|	0,
	|	ЗаполненныеСвойства.Свойство,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	ЗаполненныеСвойства КАК ЗаполненныеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНаборов КАК СвойстваНаборов
	|		ПО ЗаполненныеСвойства.Свойство = СвойстваНаборов.Свойство
	|ГДЕ
	|	СвойстваНаборов.Свойство ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойства.Набор,
	|	ВсеСвойства.Свойство,
	|	ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства,
	|	ДополнительныеРеквизитыИСведения.МногострочноеПолеВвода,
	|	ВсеСвойства.Удалено КАК Удалено,
	|	ДополнительныеРеквизитыИСведения.Доступен,
	|	ДополнительныеРеквизитыИСведения.Виден,
	|	ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов.(
	|		ЗависимоеСвойство,
	|		Реквизит,
	|		Условие,
	|		Значение
	|	)
	|ИЗ
	|	ВсеСвойства КАК ВсеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВсеСвойства.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удалено,
	|	ВсеСвойства.ПорядокНабора,
	|	ВсеСвойства.ПорядокСвойства";
	
	Если ЭтоДополнительноеСведение Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты",
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
	КонецЕсли;
	
	ОписаниеСвойств = Запрос.Выполнить().Выгрузить();
	ОписаниеСвойств.Индексы.Добавить("Свойство");
	ОписаниеСвойств.Колонки.Добавить("Значение");
	
	// Удаление дублей свойств в нижестоящих наборах свойств.
	Индекс = ОписаниеСвойств.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = ОписаниеСвойств[Индекс];
		НайденнаяСтрока = ОписаниеСвойств.Найти(Строка.Свойство);
		
		Если НайденнаяСтрока <> Неопределено
		   И НайденнаяСтрока <> Строка Тогда
			
			ОписаниеСвойств.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
	// Заполнение значений свойств.
	Для Каждого Строка Из ДополнительныеСвойстваОбъекта Цикл
		ОписаниеСвойства = ОписаниеСвойств.Найти(Строка.Свойство, "Свойство");
		Если ОписаниеСвойства <> Неопределено Тогда
			// Поддержка строк неограниченной длины.
			Если НЕ ЭтоДополнительноеСведение
			   И УправлениеСвойствамиСлужебный.ИспользоватьНеограниченнуюСтроку(
			         ОписаниеСвойства.ТипЗначения, ОписаниеСвойства.МногострочноеПолеВвода)
			   И НЕ ПустаяСтрока(Строка.ТекстоваяСтрока) Тогда 
				
				ОписаниеСвойства.Значение = Строка.ТекстоваяСтрока;
			Иначе
				ОписаниеСвойства.Значение = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеСвойств;
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокДоступныхРеквизитов()
	
	Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
		Если НЕ Объект.bpmВидОбъектаСтрокой = "CRM_Интерес" Тогда
			
			ОбъектМетаданных = Метаданные.Документы.Найти(Объект.bpmВидОбъектаСтрокой);
			Если ОбъектМетаданных = Неопределено Тогда
				ОбъектМетаданных = Метаданные.Справочники.Найти(Объект.bpmВидОбъектаСтрокой);
			КонецЕсли;
			
			Для Каждого МетаРекизит ИЗ ОбъектМетаданных.Реквизиты Цикл
				
				Если МетаРекизит.Тип.Типы().Количество() > 1 Тогда Продолжить; КонецЕсли;
				
				МетаОбъект = Метаданные.НайтиПоТипу(МетаРекизит.Тип.Типы()[0]);
				
				Если МетаОбъект = Неопределено тогда Продолжить; КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСправочник(МетаОбъект)
					ИЛИ ОбщегоНазначения.ЭтоПеречисление(МетаОбъект) Тогда
					
					Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.Добавить(МетаРекизит.Имя,МетаРекизит.Представление());
					
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ОбъектМетаданных.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено Тогда
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				
				КлючНазначения = Неопределено;
				НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(МенеджерОбъекта.ПустаяСсылка(), КлючНазначения);
				
				Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
					НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
				Иначе
					НовыйОбъект = МенеджерОбъекта.СоздатьДокумент();
				КонецЕслИ;
				
				ОписаниеСвойств = ЗначенияСвойств(
				НовыйОбъект.ДополнительныеРеквизиты.Выгрузить(),
				НаборыСвойствОбъекта,
				Ложь);
				Для Каждого СтрокаТаблицы ИЗ ОписаниеСвойств Цикл
					Если СтрокаТаблицы.Свойство.ЭтоДополнительноеСведение ИЛИ СтрокаТаблицы.Удалено ИЛИ НЕ СтрокаТаблицы.Виден Тогда Продолжить; КонецЕсли;
					
					Если СтрокаТаблицы.ТипЗначения.Типы().Количество() > 1 Тогда Продолжить; КонецЕсли;
					
					МетаОбъект = Метаданные.НайтиПоТипу(СтрокаТаблицы.ТипЗначения.Типы()[0]);
					
					Если МетаОбъект = Неопределено тогда Продолжить; КонецЕсли;
					
					Если ОбщегоНазначения.ЭтоСправочник(МетаОбъект)
						ИЛИ ОбщегоНазначения.ЭтоПеречисление(МетаОбъект) Тогда
						Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.Добавить("%Свойство%"+Строка(СтрокаТаблицы.Свойство.УникальныйИдентификатор()),"Дополнительный реквизит: "+ СтрокаТаблицы.Наименование);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.Добавить("СостояниеИнтереса","Состояние интереса");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОбъекта()
	
	
	Модифицированность = Истина;
	
	ПолучитьСписокДоступныхРеквизитов();
	
	Если Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.НайтиПоЗначению(Объект.bpmРеквизитОбъектаСтрокой) = Неопределено Тогда
		Объект.bpmРеквизитОбъектаСтрокой = "";
	КонецЕсли;
	
	Элементы.ГруппаОтборы.Видимость = ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой);
	
	АдресСхемыКомпоновкиДанных = "";
	АдресХранилищаНастройкиКомпоновщика = "";
	Если ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
		ПолучитьСхемуИНастройкиКомпоновкиДанных();
		ОбновитьЭлементыОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиЭтапов()
	
	НаборРегистра = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 Тогда
		
		ТабЗнач = НаборРегистра.Выгрузить();
		ТабЗнач.ЗаполнитьЗначения(Неопределено, "Состояние");
		
		НаборРегистра.Загрузить(ТабЗнач);
		НаборРегистра.записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПроектПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.ПроектыПрисоединенныеФайлы КАК ПроектПрисоединенныеФайлы
	|ГДЕ
	|	ПроектПрисоединенныеФайлы.ВладелецФайла = &Проект
	|	И НЕ ПроектПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Fales('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ОткрытьБизнесПроцессыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Проект", Объект.Ссылка);
		Отбор.Вставить("КартаМаршрута", Объект.CRM_КартаМаршрута);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыФормы.Вставить("СкрытьПодменюВидСписка");
		ПараметрыФормы.Вставить("СкрытьБыстрыеОтборы");
		ПараметрыФормы.Вставить("СкрытьПоказКартыМаршрута");
		
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаСписка",ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьБизнесПроцессыЗавершение()

&НаКлиенте
Процедура ОткрытьЭтапыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.CRM_ЭтапыПроектов.ФормаСписка",ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьБизнесПроцессыЗавершение()

&НаКлиенте
Процедура ОткрытьЗадачиИКТЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Проект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаСписка",ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьФайлыЗавершение()

&НаСервере
Процедура ИзменитьУсловноеОформлениеКорняДерева()
	УсловноеОформление.Элементы[0].Оформление.Элементы.Найти("Текст").Значение = Объект.Наименование; 
	ТабличныйДокументМодели.Область("R3C1").Текст = Объект.Наименование;
КонецПроцедуры

#КонецОбласти //СлужебныеПроцедурыИФункции


#Область РаботаСЭтапами

&НаСервере
Процедура КалендарныеГрафикиПриЧтенииСозданииНаСервере()

	СоответствиеКоллекцииКартинок = Новый Соответствие;
	СоответствиеКоллекцииКартинок.Вставить(1, БиблиотекаКартинок.CRM_ЭтапПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(0, БиблиотекаКартинок.CRM_ЭтапПроцессаСвязи);
	СоответствиеКоллекцииКартинок.Вставить(3, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(2, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцессаСвязи);
	
	СоответствиеКоллекцииКартинокТипаЭтапа = Новый ФиксированноеСоответствие(СоответствиеКоллекцииКартинок);
	
	// Цвета интервалов Ганта
	ЦветИнтервалаЭтапаПлан		      = ЦветаСтиля.CRM_ЦветИнтервалаЭтапаПлан;
	ЦветИнтервалаЭтапаФакт		      = ЦветаСтиля.CRM_ЦветИнтервалаЭтапаФакт;
	ЦветИнтервалаКонтрольнойТочкиПлан = ЦветаСтиля.CRM_ЦветИнтервалаКонтрольнойТочкиПлан;
	ЦветИнтервалаКонтрольнойТочкиФакт = ЦветаСтиля.CRM_ЦветИнтервалаКонтрольнойТочкиФакт;
	ЦветИнтервалаПакетаПлан			  = ЦветаСтиля.CRM_ЦветИнтервалаПакетаПлан;
	ЦветИнтервалаПакетаФакт 		  = ЦветаСтиля.CRM_ЦветИнтервалаПакетаФакт;
	ЦветНавигации					  = ЦветаСтиля.ЦветНавигации;
	ЦветФонаПоля					  = ЦветаСтиля.ЦветФонаПоля;
	
	Если НЕ ЗначениеЗаполнено(РежимРедактированияМодели) Тогда
		времРежимРедактированияМодели = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели");
		РежимРедактированияМодели = ?(НЕ ЗначениеЗаполнено(времРежимРедактированияМодели), "Дерево", времРежимРедактированияМодели);
	КонецЕсли;
	
	ПрочитатьДанныеМоделиПроцесса();
	
	УстановитьРежимРедактирования(ЭтотОбъект);
	
	Если РежимРедактированияМодели = "Графически" Тогда
	
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();

		ИнициализироватьТабличныйДокументМодели();
		//Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
		//КонецЦикла;
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КалендарныеГрафикиПриЧтенииСозданииНаСервере()

&НаСервере
Процедура ВывестиКартинкиВТабличныйДокументНаСервере()
	
	// Не возможно вывести на клиенте для Веб-клинта (ряд методов не документированы и для тонкого клиента)
	Выполнять = Истина;
	
	Для НомерСтроки = 2 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		
		ОбластьРедактирования = ТабличныйДокументМодели.Область(НомерСтроки, 1);
		
		ОтступСтроки = ТабличныйДокументМодели.Область(НомерСтроки, 1).Отступ;
		Если СокрЛП(ОбластьРедактирования.Текст) = "" Тогда
			Прервать;
		КонецЕсли;
		
		НетКартинкиСвернуть = Истина;
		// Выведем картинку группировки, если нужно
		Если ТабличныйДокументМодели.Область(НомерСтроки + 1, 1).Отступ > ОтступСтроки Тогда
			//Свернуть/Развернуть
			
			//ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 1;
			
			ОбластьКартинка = ТабличныйДокументМодели.Область("R" + НомерСтроки + "C8");
			РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			РисунокСвернутьРазвернуть.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_Свернуть";
			
			РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Свернуть;
			
			РисунокСвернутьРазвернуть.Расположить(ОбластьРедактирования);
			РисунокСвернутьРазвернуть.РазмерКартинки = РазмерКартинки.Пропорционально;
			РисунокСвернутьРазвернуть.Линия 		 = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			РисунокСвернутьРазвернуть.Лево  		 = РисунокСвернутьРазвернуть.Лево + 0.5 + (ОбластьРедактирования.Отступ - 2) * 1.5;
			РисунокСвернутьРазвернуть.Верх  		 = РисунокСвернутьРазвернуть.Верх + 1.1;
			РисунокСвернутьРазвернуть.Ширина 		 = 3;
			РисунокСвернутьРазвернуть.Высота 		 = 3;
			РисунокСвернутьРазвернуть.ЦветФона		 = ОбластьРедактирования.ЦветФона;
			
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
			НетКартинкиСвернуть = Ложь;
		КонецЕсли;
		
		// Выведем картинку документа
		Если НетКартинкиСвернуть Тогда
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
		КонецЕсли;
		
		ИндексКартинки = -1;
		Расшифровка = ОбластьРедактирования.Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ИндексКартинки = 0;
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			ИндексКартинки = ?(Расшифровка.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
		КонецЕсли;
		
		Картинка = СоответствиеКоллекцииКартинокТипаЭтапа.Получить(ИндексКартинки);
		
		Если Картинка <> Неопределено Тогда
			//ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
			
			Рисунок = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Рисунок.Картинка = Картинка;
			
			Рисунок.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_ТипЭтапа";
			
			Рисунок.Расположить(ОбластьРедактирования);
			Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			Рисунок.Линия 		   = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
			Рисунок.Лево  		   = Рисунок.Лево + 2 + (ОбластьРедактирования.Отступ - 2) * 1.5;
			Рисунок.Верх  		   = Рисунок.Верх + 0.8;
			Рисунок.Ширина 		   = 3.5;
			Рисунок.Высота 		   = 3.5;
			Рисунок.ЦветФона	   = ОбластьРедактирования.ЦветФона;
			
			ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиКартинкиВТабличныйДокумент()

&НаСервере
Процедура ОбновитьДиаграмму()

	МаксимальнаяДата = NULL;
	МинимальнаяДата  = NULL;
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаРисунок.Расположить(ТабличныйДокументМодели.Область(1, Число(СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ДиаграммаГанта").Представление), 
								 ТабличныйДокументМодели.ВысотаТаблицы, Число(СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ДиаграммаГанта").Представление)));
	
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	ДиаграммаОбъект.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	ДиаграммаОбъект.Обновление = Ложь;
	ДиаграммаОбъект.Анимация = АнимацияДиаграммы.НеИспользовать;
	
	ДиаграммаОбъект.Очистить();

	ДиаграммаОбъект.ОтображениеИнтервала  = ОтображениеИнтервалаДиаграммыГанта.Градиент;
	
	ДатаНачала = НачалоДня(Объект.ПлановаяДатаНачала);
	
	СерияПлан = ДиаграммаОбъект.Серии.Добавить();
	СерияФакт = ДиаграммаОбъект.Серии.Добавить();
	
	СерияПлан.ШтриховкаМеждуИнтервалами = Ложь;
	СерияФакт.ШтриховкаМеждуИнтервалами = Ложь;
	
	Для Сч = 3 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		СтрокаОбласти = "R" + Формат(Сч, "ЧН=0; ЧГ=");
		
		НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
		
		ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Если ДанныеСтрокиДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоПлан = ДанныеСтрокиДерева.ПлановаяДатаНачала;
		НачалоФакт = ДанныеСтрокиДерева.ФактическаяДатаНачала;
		
		Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОкончаниеПлан = ?(НачалоПлан = '00010101', НачалоПлан, КонецДня(НачалоПлан));
			ОкончаниеФакт = ?(НачалоФакт = '00010101', НачалоФакт, КонецДня(НачалоФакт));
		Иначе
			Если ДанныеСтрокиДерева.ПлановаяДатаОкончания = '00010101' Тогда
				ОкончаниеПлан = ДанныеСтрокиДерева.ПлановаяДатаОкончания;
			Иначе
				ОкончаниеПлан = КонецДня(ДанныеСтрокиДерева.ПлановаяДатаОкончания);
			КонецЕсли;
			
			Если ДанныеСтрокиДерева.ФактическаяДатаОкончания = '00010101' Тогда
				ОкончаниеФакт = ДанныеСтрокиДерева.ФактическаяДатаОкончания;
			Иначе
				ОкончаниеФакт = КонецДня(ДанныеСтрокиДерева.ФактическаяДатаОкончания);
			КонецЕсли;
		КонецЕсли;
		
		
		
		ИдентифкаторТочки = ДанныеСтрокиДерева.ИдентификаторСтроки;
		
		Родитель = ДанныеСтрокиДерева.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда 
			ИдентифкаторТочкиРодителя = Родитель.ИдентификаторСтроки;
		КонецЕсли;
		
		Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки, ИдентифкаторТочкиРодителя);
		Точка.Текст = " ";
		ЗначениеПлан = ДиаграммаОбъект.ПолучитьЗначение(Точка, СерияПлан);
		ЗначениеПлан.Очистить();
		
		ЗначениеФакт = ДиаграммаОбъект.ПолучитьЗначение(Точка, СерияФакт);
		ЗначениеФакт.Очистить();
		
		Этап = ДанныеСтрокиДерева.Этап;
		
		Если ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") 
				И Этап.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена Тогда
			Продолжить;
		КонецЕсли;
		
		// Если надо, корректируем максимальную и минимальную даты.
		Если МаксимальнаяДата = NULL 
		  ИЛИ МаксимальнаяДата < НачалоПлан + (ОкончаниеПлан - НачалоПлан) Тогда
			МаксимальнаяДата = НачалоПлан + (ОкончаниеПлан - НачалоПлан);
		КонецЕсли;
		
		Если МаксимальнаяДата < НачалоФакт + (ОкончаниеФакт - НачалоФакт) Тогда
			МаксимальнаяДата = НачалоФакт + (ОкончаниеФакт - НачалоФакт);
		КонецЕсли;
		
		Если МинимальнаяДата = NULL Или МинимальнаяДата > НачалоПлан Тогда
			МинимальнаяДата = НачалоПлан;
		КонецЕсли;
		
		Если МинимальнаяДата > НачалоФакт Тогда
			МинимальнаяДата = НачалоФакт;
		КонецЕсли;
		
		ЗначениеПлан.Редактирование = Истина;
		ЗначениеФакт.Редактирование = Истина;
		
		// Вывод плана
		Если ЗначениеЗаполнено(НачалоПлан) И ЗначениеЗаполнено(ОкончаниеПлан) Тогда

			Попытка
				ИнтервалПлан = ЗначениеПлан.Добавить();
				ИнтервалПлан.Начало = НачалоПлан;
				ИнтервалПлан.Конец  = ОкончаниеПлан;
			Исключение
				
			КонецПопытки;
			
			Если ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
				
				ИнтервалПлан.Цвет = ЦветИнтервалаПакетаПлан;
					
			ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
			
				Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
					Если НачалоПлан < ТекущаяДата() и НЕ ЗначениеЗаполнено(Этап.ФактическаяДатаНачала) Тогда
						ИнтервалПлан.Цвет = Новый Цвет(255,0,0); // красный, просрочено
					Иначе
						ИнтервалПлан.Цвет = ЦветИнтервалаКонтрольнойТочкиПлан;
					КонецЕсли; 
					
				Иначе
					Если НЕ ЗначениеЗаполнено(Этап.ФактическаяДатаНачала) И ОкончаниеПлан < ТекущаяДата() Тогда
						ИнтервалПлан.Цвет = Новый Цвет(255,0,0); // красный, просрочено
						
					ИначеЕсли НЕ ЗначениеЗаполнено(Этап.ФактическаяДатаОкончания) И ЗначениеЗаполнено(Этап.ФактическаяДатаНачала) 
							  И Этап.ФактическаяДатаНачала + (Этап.ПлановаяДлительность-1)*86400 < ТекущаяДата() Тогда
						ИнтервалПлан.Цвет = Новый Цвет(255,0,0); // красный, просрочено
						
					Иначе
						ИнтервалПлан.Цвет = ЦветИнтервалаЭтапаПлан;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Вывод факта
		Если ЗначениеЗаполнено(НачалоФакт) И ЗначениеЗаполнено(ОкончаниеФакт) Тогда
			
			Попытка
				ИнтервалФакт = ЗначениеФакт.Добавить();
				ИнтервалФакт.Начало = НачалоФакт;
				ИнтервалФакт.Конец  = ОкончаниеФакт;
			Исключение
				
			КонецПопытки;
			
			Если ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
			
				ИнтервалФакт.Цвет = ЦветИнтервалаПакетаФакт;
					
			ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
					
				Если ДанныеСтрокиДерева.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
					ИнтервалФакт.Цвет = ЦветИнтервалаКонтрольнойТочкиФакт;
				Иначе
					ИнтервалФакт.Цвет = ЦветИнтервалаЭтапаФакт;
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока Истина Цикл
		Попытка
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(0).Видимость = Ложь;
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Удалить(ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(1));
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	ШиринаКолонки = ДиаграммаРисунок.Ширина;
	Попытка
		Дни = (МаксимальнаяДата - МинимальнаяДата) / 86400;
	Исключение
		Дни = 7;
	КонецПопытки;
	Если Не ((ШиринаКолонки >= 283 и Дни <=78)  или 
		 (ШиринаКолонки >= 181 и Дни <=58)  или 
		 (ШиринаКолонки >= 140 и Дни <=48)  или 
		 (ШиринаКолонки >= 74 и Дни <=38)  или 
		 (ШиринаКолонки >= 85 и Дни <=33)  или 
		 (ШиринаКолонки >= 38 и Дни <=29)  или 
		 (ШиринаКолонки >= 48 и Дни <=31)  или 
		 (ШиринаКолонки >= 85 и Дни <=33)  или 
		  (ШиринаКолонки >= 555 и Дни <=133))
		Тогда
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Месяц;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.Формат	= "ДФ='ddd d'";
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	Иначе
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.День;
		ЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	КонецЕсли;
	
	ДиаграммаОбъект.ПоказатьУровеньТочек(0); 
	ПолосаРегулированияШириныДиаграммыГанта = ТабличныйДокументМодели.Область("Служебная_ДиаграммаГанта").ШиринаКолонки/2;
	
	ДиаграммаОбъект.РастягиваниеПоВертикали = РастягиваниеПоВертикалиДиаграммыГанта.РастягиватьСтроки;
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграмму()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, ЭлементыДерева, ТекущийИдентификатор = Неопределено)

	ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(2,1,2,1);
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаДерева.АдресСтрокиОбласти = "";
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон, ТекущийИдентификатор);
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ТекущийИдентификатор);
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьДанныеТабличногоДокументаРекурсивно()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон = Неопределено, ТекущийИдентификатор = Неопределено)
	
	ТабличныйДокументМодели = Форма.ТабличныйДокументМодели;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.АдресСтрокиОбласти) Тогда
		СтрокаОбласти = "R" + Формат(ТабличныйДокументМодели.ВысотаТаблицы + 1, "ЧН=0; ЧГ=");
		СтрокаДерева.АдресСтрокиОбласти = СтрокаОбласти;
		
	Иначе
		СтрокаОбласти = СтрокаДерева.АдресСтрокиОбласти;
		
	КонецЕсли;
	
	//Оформление
	ОбластьСтроки = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти);
	ЦветФона = Новый Цвет(255,255,255); // для веб-клиента необходимо явно указанть цвет
	
	
	Для Сч = 1 По Форма.СписокОбластейТабличногоДокумента.Количество()-1 Цикл  // по всем выведенным колонкам, кроме последней (в которой гант)
		ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + Формат(Сч, "ЧН=0; ЧГ="));
		ОбластьРедактирования.ЦветФона = ЦветФона;
	
	КонецЦикла;
		
	ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); // Этап всегда первая колонка С1
	ОбластьРедактирования.Отступ = 2;
		
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено  Тогда
	  //И ЗначениеЗаполнено(Родитель.ИдентификаторСтроки) Тогда
		ОбластьДобавленияРодитель = ТабличныйДокументМодели.Область(Родитель.АдресСтрокиОбласти + "C1"); // Этап всегда первая колонка С1
		
		//Отрисуем иерархию
		ОбластьРедактирования.Отступ = ОбластьДобавленияРодитель.Отступ + 2;
		
	КонецЕсли;
	
	Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
	
	//Этап

	ОбластьРедактированияШрифт 	 = Новый Шрифт(,8,,,,);
	Если ЗначениеЗаполнено(СтрокаДерева.Этап) Тогда
		
		ОбластьРедактирования.Текст 	  = СтрокаДерева.Этап;
		ОбластьРедактирования.Расшифровка = СтрокаДерева.Этап;
		
		Если ТипЗнч(СтрокаДерева.Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") 
				И ПолучитьЗначениеРеквизита(СтрокаДерева.Этап, "Статус") = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена") Тогда
				
			ОбластьРедактированияШрифт 	 = Новый Шрифт(,8,,,,Истина);
			ОбластьРедактирования.ЦветТекста = Новый Цвет(128,128,128);
			
		ИначеЕсли ТипЗнч(СтрокаДерева.Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") 
				И ПолучитьЗначениеРеквизита(СтрокаДерева.Этап, "Статус") = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена") Тогда
				
			ОбластьРедактированияШрифт 	 = Новый Шрифт(,8,,,,);
			
		ИначеЕсли СтрокаДерева.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Высокая") Тогда
			ОбластьРедактированияШрифт 	 = Новый Шрифт(,8,Истина);
		ИначеЕсли СтрокаДерева.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Низкая") Тогда
			ОбластьРедактирования.ЦветТекста = Новый Цвет(160,160,160);
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Этап) И ТипЗнч(СтрокаДерева.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ОбластьРедактированияШрифт = Новый Шрифт(, 9, Истина);
		КонецЕсли;
		
	Иначе
		ОбластьРедактированияШрифт = Новый Шрифт(, 9, Истина);
		ОбластьРедактирования.Текст = Форма.Объект.Наименование;
	КонецЕсли;
	ОбластьРедактирования.Шрифт = ОбластьРедактированияШрифт;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	Если Идентификатор = ТекущийИдентификатор Тогда
		Форма.Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ОбластьРедактирования;
	
	КонецЕсли;
		
	// Заполнение данных настроенных колонок
	
	Для каждого ЗначениеСписка Из Форма.СписокОбластейТабличногоДокумента Цикл
		
		ИмяОбласти = ЗначениеСписка.Значение;
		Если СтрНайти(ВРег(ИмяОбласти), "СЛУЖЕБНАЯ_") Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКолонки = Форма.СписокОбластейТабличногоДокумента.НайтиПоЗначению(ИмяОбласти).Представление;
		ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
		ОбластьРедактирования.Расшифровка 	   = ИмяОбласти;
		
		Если НЕ (ИмяОбласти = "Сделано" И ТипЗнч(СтрокаДерева.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов")) Тогда
			
			ОбластьРедактирования.СодержитЗначение = Истина;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(СтрокаДерева[ИмяОбласти]));
			ОбластьРедактирования.ТипЗначения = Новый ОписаниеТипов(МассивТипов,,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный),,
																					Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ОбластьРедактирования.Значение    = СтрокаДерева[ИмяОбласти];
			
			Если ТипЗнч(СтрокаДерева[ИмяОбласти]) = Тип("Дата") Тогда
				ОбластьРедактирования.Формат = "ДФ=dd.MM.yyyy";
			КонецЕсли;
			
			Если ИмяОбласти = "Сделано" Тогда
				ОбластьРедактирования.Формат = "БЛ=; БИ=✓";
				ОбластьРедактирования.ЦветТекста = Новый Цвет(0,150,0);
				ОбластьРедактирования.Шрифт = Новый Шрифт(, 14, Истина);
				ОбластьРедактирования.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			Иначе
				ОбластьРедактирования.Шрифт = ОбластьРедактированияШрифт;
			КонецЕсли;
			ОбластьРедактирования.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			
		КонецЕсли;
		
		ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
		
	КонецЦикла;
	
	//Служебные поля
	НомерКолонки = Форма.СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
	ОбластьРедактирования	    	  = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
	ОбластьРедактирования.Текст 	  = Идентификатор;
	ОбластьРедактирования.Расшифровка = Идентификатор;
		
КонецПроцедуры // ЗаполнитьДанныеСтрокиТабличногоДокумента()

&НаСервере
Процедура ИнициализироватьТабличныйДокументМодели()
	
	Макет = Справочники.Проекты.ПолучитьМакет("CRM_МакетМоделиЭтапов");
	
	СписокОбластейТабличногоДокумента.Очистить();
	ТабличныйДокументМодели.Очистить();
	
	//Службные поля
	ТабличныйДокументМодели.Вывести(Макет.ПолучитьОбласть("Шапка|Служебная_Этап"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,1, ,1);
	ОбластьМодели.Имя = "Служебная_Этап";
	СписокОбластейТабличногоДокумента.Добавить("Служебная_Этап", "1");
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_ИдентификаторСтрокиДерева"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,2, ,2);
	ОбластьМодели.Имя = "Служебная_ИдентификаторСтрокиДерева";
	ОбластьМодели.Видимость = Ложь;
	СписокОбластейТабличногоДокумента.Добавить("Служебная_ИдентификаторСтрокиДерева", "2");
	
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_Картинка"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,3, ,3);
	ОбластьМодели.Имя = "Служебная_Картинка";
	ОбластьМодели.Видимость = Ложь;
	СписокОбластейТабличногоДокумента.Добавить("Служебная_Картинка", "3");
	
	// Настраиваемые поля
	НомерКолонки = 4;
	Для каждого ЗначениеСписка Из КолонкиКалендарногоГрафика Цикл
		
		Если НЕ ЗначениеСписка.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|" + ЗначениеСписка.Значение));
		ОбластьМодели = ТабличныйДокументМодели.Область(,НомерКолонки, ,НомерКолонки);
		ОбластьМодели.Имя = ЗначениеСписка.Значение;
		СписокОбластейТабличногоДокумента.Добавить(ЗначениеСписка.Значение, Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
	
	//Диаграмма Ганта, всегда вводится в конце
	ТабличныйДокументМодели.Присоединить(Макет.ПолучитьОбласть("Шапка|Служебная_ДиаграммаГанта"));
	ОбластьМодели = ТабличныйДокументМодели.Область(,НомерКолонки, ,НомерКолонки);
	ОбластьМодели.Имя = "Служебная_ДиаграммаГанта";
	СписокОбластейТабличногоДокумента.Добавить("Служебная_ДиаграммаГанта", Формат(НомерКолонки, "ЧН=0; ЧГ="), Истина);
	
	ТабличныйДокументМодели.ФиксацияСверху 			= 2;
	ТабличныйДокументМодели.ФиксацияСлева  			= 1;
	ТабличныйДокументМодели.Защита 		   			= Ложь;
	ТабличныйДокументМодели.ТолькоПросмотр 			= Ложь;
	//Элементы.ТабличныйДокументМодели.Редактирование = Истина;
	
КонецПроцедуры // ИнициализироватьТабличныйДокументМодели()

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, Знач ОбластьЭталон = Неопределено)

	Если ОбластьЭталон = Неопределено Тогда
		ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(2,1,2,1);
	КонецЕсли;
	
	ОбластьРедактирования.ГраницаСверху = ОбластьЭталон.ГраницаСверху;
	ОбластьРедактирования.ГраницаСлева  = ОбластьЭталон.ГраницаСлева;
	ОбластьРедактирования.ГраницаСправа = ОбластьЭталон.ГраницаСправа;
	ОбластьРедактирования.ГраницаСнизу  = ОбластьЭталон.ГраницаСнизу;
	
	ОбластьРедактирования.ЦветРамки  	= ОбластьЭталон.ЦветРамки;
	ОбластьРедактирования.ВысотаСтроки  = 16;
	
	ОбластьРедактирования.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
КонецПроцедуры // ОформитьОбластьРедактирования()

&НаСервере
Процедура ПрочитатьДанныеМоделиПроцесса()
	
	// Вставим верхнюю строку дерева этапов
	ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	СтрокаДерева = ЭлементыДерева.Добавить();
	СтрокаДерева.ИндексКартинки = -1;
	
	ЗаполнитьДеревоПоЭтапам();
	
КонецПроцедуры // ПрочитатьДанныеМоделиПроцесса()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимРедактирования(Форма)
	
	Форма.Элементы.СтраницыОтображенияГрафиков.ТекущаяСтраница = Форма.Элементы[Форма.РежимРедактированияМодели];
	Форма.Элементы.ПолосаРегулированияШириныДиаграммыГанта.Видимость = Форма.РежимРедактированияМодели = "Графически";
	
КонецПроцедуры // УстановитьРежимРедактирования()

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапам()
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ЭтапыПроектов.Ссылка КАК Пакет,
	               |	CRM_ЭтапыПроектов.СуммарнаяДатаНачалаПлановая КАК ПакетСуммарнаяДатаНачалаПлановая,
	               |	CRM_ЭтапыПроектов.СуммарнаяДатаОкончанияПлановая КАК ПакетСуммарнаяДатаОкончанияПлановая,
	               |	CRM_ЭтапыПроектов.СуммарнаяДлительностьПлановая КАК ПакетСуммарнаяДлительностьПлановая,
	               |	CRM_ЭтапыПроектов.Ответственный КАК ОтветственныйЗаЭтап,
	               |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Этап,
	               |	CRM_ЭтапКалендарногоПлана.ПлановаяДатаНачала КАК ЭтапПлановаяДатаНачала,
	               |	CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания КАК ЭтапПлановаяДатаОкончания,
	               |	CRM_ЭтапКалендарногоПлана.ПлановаяДлительность КАК ЭтапПлановаяПродолжительность,
	               |	CRM_ЭтапКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
	               |	CRM_ЭтапКалендарногоПлана.Статус КАК Статус,
	               |	CRM_ЭтапыПроектов.СуммарнаяДатаНачалаФакт КАК СуммарнаяДатаНачалаФакт,
	               |	CRM_ЭтапыПроектов.СуммарнаяДатаОкончанияФакт КАК СуммарнаяДатаОкончанияФакт,
	               |	CRM_ЭтапыПроектов.СуммарнаяДлительностьФакт КАК СуммарнаяДлительностьФакт,
	               |	CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала КАК ЭтапФактическаяДатаНачала,
	               |	CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания КАК ЭтапФактическаяДатаОкончания,
	               |	CRM_ЭтапКалендарногоПлана.ФактическаяДлительность КАК ЭтапФактическаяДлительность,
	               |	CRM_ЭтапКалендарногоПлана.КомментарийОтменыЗадачи КАК КомментарийОтменыЗадачи,
	               |	CRM_ЭтапКалендарногоПлана.Результат КАК Результат,
	               |	CRM_ЭтапКалендарногоПлана.ОтветственныйИсполнитель КАК ОтветственныйИсполнитель,
	               |	ВЫБОР
	               |		КОГДА CRM_ЭтапКалендарногоПлана.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена)
	               |			ИЛИ CRM_ЭтапКалендарногоПлана.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Сделано,
	               |	CRM_ЭтапКалендарногоПлана.Важность КАК Важность,
	               |	CRM_ЭтапКалендарногоПлана.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Справочник.CRM_ЭтапыПроектов КАК CRM_ЭтапыПроектов
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |		ПО CRM_ЭтапыПроектов.Ссылка = CRM_ЭтапКалендарногоПлана.Этап
	               |ГДЕ
	               |	(CRM_ЭтапыПроектов.Владелец = &Проект
	               |			ИЛИ CRM_ЭтапКалендарногоПлана.Проект = &Проект)
	               |	И НЕ ЕСТЬNULL(CRM_ЭтапыПроектов.ПометкаУдаления, ЛОЖЬ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПакетСуммарнаяДатаНачалаПлановая ИЕРАРХИЯ,
	               |	Пакет,
	               |	ПакетСуммарнаяДатаОкончанияПлановая,
	               |	ЭтапПлановаяДатаНачала,
	               |	ЭтапПлановаяДатаОкончания";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	
	ДеревоПоЗапросу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоМодели.ПолучитьЭлементы().Очистить();
	ВерхняяСтрокаЭтапов = ДеревоМодели.ПолучитьЭлементы().Добавить();
	ВерхняяСтрокаЭтапов.ИндексКартинки = -1;
	ВерхняяСтрокаЭтапов.Статус = Объект.CRM_Статус;
	ВерхняяСтрокаЭтапов.ПлановаяДатаНачала = Объект.ПлановаяДатаНачала;
	ВерхняяСтрокаЭтапов.ПлановаяДатаОкончания = Объект.ПлановаяДатаОкончания;
	ВерхняяСтрокаЭтапов.ФактическаяДатаНачала = Объект.ДатаНачала;
	ВерхняяСтрокаЭтапов.ФактическаяДатаОкончания = Объект.ДатаОкончания;
	
	Если ЗначениеЗаполнено(ВерхняяСтрокаЭтапов.ПлановаяДатаОкончания) Тогда
		ВерхняяСтрокаЭтапов.ПлановаяДлительность = (КонецДня(ВерхняяСтрокаЭтапов.ПлановаяДатаОкончания) - НачалоДня(ВерхняяСтрокаЭтапов.ПлановаяДатаНачала)+1)/86400;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВерхняяСтрокаЭтапов.ФактическаяДатаОкончания) Тогда
		ВерхняяСтрокаЭтапов.ФактическаяДлительность = (КонецДня(ВерхняяСтрокаЭтапов.ФактическаяДатаОкончания) - НачалоДня(ВерхняяСтрокаЭтапов.ФактическаяДатаНачала)+1)/86400;
	КонецЕсли;
	
	ЗаполнитьДеревоПоЭтапамРекурсивно(ВерхняяСтрокаЭтапов.ПолучитьЭлементы(), ДеревоПоЗапросу.Строки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокиЭтапов, СтрокиПоЗапросу)
	
	ПредыдущийЭтапКакРодитель = NULL;
	СтрокаЭтапаГруппа		  = Неопределено;
	
	Для каждого СтрокаПоЗапросу Из СтрокиПоЗапросу Цикл
		
		Если СтрокаПоЗапросу.Строки.Количество() > 0 Тогда
			// Есть подчиненные этапы/задачи
			СтрокаЭтапа = СтрокиЭтапов.Добавить();
			СтрокаЭтапа.Этап 				 	 = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапа.ПлановаяДатаНачала 	 	 = СтрокаПоЗапросу.ПакетСуммарнаяДатаНачалаПлановая;
			СтрокаЭтапа.ПлановаяДатаОкончания 	 = СтрокаПоЗапросу.ПакетСуммарнаяДатаОкончанияПлановая;
			СтрокаЭтапа.ПлановаяДлительность  	 = СтрокаПоЗапросу.ПакетСуммарнаяДлительностьПлановая;
			СтрокаЭтапа.ФактическаяДатаНачала	 = СтрокаПоЗапросу.СуммарнаяДатаНачалаФакт;
			СтрокаЭтапа.ФактическаяДатаОкончания = СтрокаПоЗапросу.СуммарнаяДатаОкончанияФакт;
			СтрокаЭтапа.ФактическаяДлительность  = СтрокаПоЗапросу.СуммарнаяДлительностьФакт;
			СтрокаЭтапа.ИндексКартинки		  	 = 0;
			СтрокаЭтапа.ОтветственныйИсполнитель  = СтрокаПоЗапросу.ОтветственныйЗаЭтап;
			СтрокаЭтапа.ИдентификаторСтроки	 	 = Новый УникальныйИдентификатор;
			
			ЗаполнитьДеревоПоЭтапамРекурсивно(СтрокаЭтапа.ПолучитьЭлементы(), СтрокаПоЗапросу.Строки);
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа		  = СтрокаЭтапа;
		КонецЕсли;
		
		Если ПредыдущийЭтапКакРодитель <> СтрокаПоЗапросу.Пакет Тогда
			// Создадим ветку Этапа проекта 
			СтрокаЭтапаГруппа  = СтрокиЭтапов.Добавить();
			СтрокаЭтапаГруппа.Этап 					   = СтрокаПоЗапросу.Пакет;
			СтрокаЭтапаГруппа.ПлановаяДатаНачала 	   = СтрокаПоЗапросу.ПакетСуммарнаяДатаНачалаПлановая;
			СтрокаЭтапаГруппа.ПлановаяДатаОкончания    = СтрокаПоЗапросу.ПакетСуммарнаяДатаОкончанияПлановая;
			СтрокаЭтапаГруппа.ПлановаяДлительность     = СтрокаПоЗапросу.ПакетСуммарнаяДлительностьПлановая;
			СтрокаЭтапаГруппа.ФактическаяДатаНачала	   = СтрокаПоЗапросу.СуммарнаяДатаНачалаФакт;
			СтрокаЭтапаГруппа.ФактическаяДатаОкончания = СтрокаПоЗапросу.СуммарнаяДатаОкончанияФакт;
			СтрокаЭтапаГруппа.ФактическаяДлительность  = СтрокаПоЗапросу.СуммарнаяДлительностьФакт;
			СтрокаЭтапаГруппа.ИндексКартинки 		   = 0;
			СтрокаЭтапаГруппа.ОтветственныйИсполнитель  = СтрокаПоЗапросу.ОтветственныйЗаЭтап;
			СтрокаЭтапаГруппа.ИдентификаторСтроки	   = Новый УникальныйИдентификатор;
			
			ПредыдущийЭтапКакРодитель = СтрокаПоЗапросу.Пакет;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаПоЗапросу.Этап) И НЕ СтрокаПоЗапросу.ПометкаУдаления Тогда
			// Добавим задачу (верхнего уровня или подчиненную этапу)
			СтрокаЭтапа = ?(СтрокаЭтапаГруппа = Неопределено, СтрокиЭтапов.Добавить(), СтрокаЭтапаГруппа.ПолучитьЭлементы().Добавить());
			СтрокаЭтапа.Этап 					 = СтрокаПоЗапросу.Этап;
			СтрокаЭтапа.ПлановаяДатаНачала		 = СтрокаПоЗапросу.ЭтапПлановаяДатаНачала;
			//СтрокаЭтапа.ПлановаяДатаОкончания	 = ?(СтрокаПоЗапросу.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, СтрокаПоЗапросу.ЭтапПлановаяДатаОкончания, "");
			СтрокаЭтапа.ПлановаяДатаОкончания	 = СтрокаПоЗапросу.ЭтапПлановаяДатаОкончания;
			СтрокаЭтапа.ПлановаяДлительность	 = СтрокаПоЗапросу.ЭтапПлановаяПродолжительность;
			СтрокаЭтапа.ФактическаяДатаНачала	 = СтрокаПоЗапросу.ЭтапФактическаяДатаНачала;
			//СтрокаЭтапа.ФактическаяДатаОкончания = ?(СтрокаПоЗапросу.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, СтрокаПоЗапросу.ЭтапФактическаяДатаОкончания, "");
			СтрокаЭтапа.ФактическаяДатаОкончания = СтрокаПоЗапросу.ЭтапФактическаяДатаОкончания;
			СтрокаЭтапа.ФактическаяДлительность	 = СтрокаПоЗапросу.ЭтапФактическаяДлительность;
			СтрокаЭтапа.ТипЭтапа 				 = СтрокаПоЗапросу.ТипЭтапа;
			СтрокаЭтапа.Статус 					 = СтрокаПоЗапросу.Статус;
			СтрокаЭтапа.ПричинаОтмены 			 = СтрокаПоЗапросу.КомментарийОтменыЗадачи;
			СтрокаЭтапа.РезультатВыполнения		 = СтрокаПоЗапросу.Результат;
			СтрокаЭтапа.ОтветственныйИсполнитель = СтрокаПоЗапросу.ОтветственныйИсполнитель;
			СтрокаЭтапа.ИндексКартинки   		 = ?(СтрокаЭтапа.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап, 1, 3);
			СтрокаЭтапа.ИдентификаторСтроки	  	 = Новый УникальныйИдентификатор;
			СтрокаЭтапа.Сделано					 = СтрокаПоЗапросу.Сделано;
			СтрокаЭтапа.Важность				 = СтрокаПоЗапросу.Важность;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗадачуКонтрольнуюТочкуЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрольнуюТочку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗадачуКонтрольнуюТочкуЗавершение", 
					 	 ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтап(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Модифицированность = Истина;
		
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
		
		Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Этап);
		Иначе
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
			Если НЕ РодительСтроки = Неопределено Тогда
				ЗначенияЗаполнения.Вставить("Родитель", РодительСтроки.Этап);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.CRM_ЭтапыПроектов.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
Процедура ДобавитьЗадачуКонтрольнуюТочкуЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		Модифицированность = Истина;
		ДобавитьЗадачуКонтрольнуюТочку(ПараметрыВыполнения.ИмяКоманды);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапЗадачуКонтрольнуюТочкуПослеЗаписиНового(ЗначениеВыбора) Экспорт
	
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");

	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИнициализироватьТабличныйДокументМодели();
		//Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы(), Элементы.ДеревоМодели.ТекущаяСтрока);
		//КонецЦикла;
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева, Элементы.ДеревоМодели.ТекущаяСтрока);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	Иначе
		//РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		УстановитьКурсорНаЭтап(ЗначениеВыбора);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗадачуКонтрольнуюТочкуПослеЗаписиНового()

&НаСервере
Процедура УстановитьКурсорНаЭтап(ЗначениеВыбора)
	
	ИдентификаторЭтапа = 0;
	НайтиНовыйЭтап(ДеревоМодели.ПолучитьЭлементы(), ЗначениеВыбора);
	Элементы.ДеревоМодели.ТекущаяСтрока = ИдентификаторЭтапа;
	
КонецПроцедуры

&НаСервере
Процедура НайтиНовыйЭтап(Строки, Этап)
	
	Для каждого Строка Из Строки Цикл
		Если ИдентификаторЭтапа > 0 Тогда
			Возврат;
		КонецЕсли;
		Если Строка.Этап = Этап Тогда
			ИдентификаторЭтапа = Строка.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		СтрокиПолученные = Строка.ПолучитьЭлементы();
		Если СтрокиПолученные.Количество() > 0 Тогда
			НайтиНовыйЭтап(СтрокиПолученные, Этап);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуКонтрольнуюТочку(ИмяКоманды)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если ИмяКоманды = "ДобавитьЗадачу" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап");
	ИначеЕсли ИмяКоманды = "ДобавитьКонтрольнуюТочку" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка");
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Проект", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ТипЭтапа", ТипЭтапа);
	ЗначенияЗаполнения.Вставить("ВведенВручную", Истина);
	
	Если ТипЗнч(ТекущиеДанные.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		ЗначенияЗаполнения.Вставить("Этап", ТекущиеДанные.Этап);
		ЗначенияЗаполнения.Вставить("ПлановаяДатаНачала", CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Этап, "СуммарнаяДатаНачалаПлановая"));
	
	ИначеЕсли ТипЗнч(ТекущиеДанные.Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительСтроки = Неопределено Тогда
			ЗначенияЗаполнения.Вставить("Этап", РодительСтроки.Этап);
			Если ЗначениеЗаполнено(РодительСтроки.Этап) Тогда
				ЗначенияЗаполнения.Вставить("ПлановаяДатаНачала", CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РодительСтроки.Этап, "СуммарнаяДатаНачалаПлановая"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ДобавитьЗадачуКонтрольнуюТочку()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	
	Если Развернуть Тогда
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Иначе
		СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы()[0].ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Развернуть Тогда
			ЭлементДерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		Иначе
			ЭлементДерево.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	Если РежимРедактированияМодели = "Графически" Тогда
		РазвернутьСтрокиТабличногоДокумента(Истина);
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Если РежимРедактированияМодели = "Графически" Тогда
		РазвернутьСтрокиТабличногоДокумента(Ложь);
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОбновить(Команда)
	
	ТекущийЭтапДерева = Неопределено;
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийЭтапДерева = ТекущиеДанные.Этап;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_Обновить", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Обновить()
	
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		ИнициализироватьТабличныйДокументМодели();
		
		//Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
		//КонецЦикла;
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
	
	Иначе
		
	//	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЭтап(Команда)
	
	ДеревоМоделиВыбор(Элементы.ДеревоМодели, Элементы.ДеревоМодели.ТекущаяСтрока, Элементы.ДеревоМодели.ТекущийЭлемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Планируется")
		ИЛИ Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
		ИмяКоманды = Элементы.ДеревоМоделиКнопкаДобавитьЗадачу.ИмяКоманды;
		Команда = Команды.Найти(ИмяКоманды);
		ДобавитьЗадачу(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдаление(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник = Элемент.ДанныеСтроки(Строка).Этап;
	
	Если ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана")  Тогда
		
		Родитель = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ЭтапПриемник = ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка");
		Иначе
			ЭтапПриемник = Родитель.Этап;
		КонецЕсли;
	КонецЕсли;
	
	ЭтапПереносимый = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	
	ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый);
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Этап = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;

	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		//перенос на "пустоту" поля
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ЭтапПриемник		 = Элемент.ДанныеСтроки(Строка).Этап;
	ЭтапПереносимый		 = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).Этап;
	ПриемникЭтоЗадача 	 = (ТипЗнч(ЭтапПриемник) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана"));
	ПереносимыйЭтоЗадача = (ТипЗнч(ЭтапПереносимый) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана"));
	
	Если ПриемникЭтоЗадача  Тогда
		РодительПриемника = Элемент.ДанныеСтроки(Строка).ПолучитьРодителя();
		Если РодительПриемника = Неопределено Тогда
			ЭтапПриемникРодитель = ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка");
		Иначе
			ЭтапПриемникРодитель = РодительПриемника.Этап;
		КонецЕсли;
	Иначе
		ЭтапПриемникРодитель = ЭтапПриемник;
	КонецЕсли;
	
	РодительПереносимого = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение).ПолучитьРодителя();
	Если РодительПереносимого = Неопределено Тогда
		ЭтапПереносимыйРодитель = ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка");
	ИначеЕсли НЕ ПереносимыйЭтоЗадача И ПриемникЭтоЗадача И ЭтапПриемникРодитель = ЭтапПереносимый Тогда
		// перенос пакета на подчиненную задачу
		ЭтапПереносимыйРодитель = ЭтапПереносимый;
	Иначе
		ЭтапПереносимыйРодитель = РодительПереносимого.Этап;
	КонецЕсли;
	
	Если (ЭтапПриемникРодитель = ЭтапПереносимыйРодитель)
		 Или (НЕ ПереносимыйЭтоЗадача И ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемникРодитель, ЭтапПереносимый)) Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Если СписокРедактируемыхКолонок.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Этап = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		Этап = ДанныеСтроки.Этап;
		
		ПараметрыФормы = Новый Структура("Ключ", Этап);
		
		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа",ЭтотОбъект, Новый Структура("Ссылка, ВерсияДанных", Этап, ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			
			ОткрытьФорму("Справочник.CRM_ЭтапыПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект.УникальныйИдентификатор,,,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		ИначеЕсли ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			
			ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект.УникальныйИдентификатор,,,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		Отказ = Истина;
	Иначе
		Отказ = НЕ РазрешеноРедактированиеЭлемента(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноРедактированиеЭлемента(ИмяРеквизита, ИдентификаторСтроки)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ИмяРеквизита = "ФактическаяДатаОкончания" Тогда
		Если ТекДанные.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для контрольной точки изменение даты окончания не предусмотрено'"));
			Возврат Ложь;
		КонецЕсли;
		Если Объект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе 
			ИЛИ ТекДанные.Статус <> Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ФактическаяДатаНачала" Тогда	
		Если Объект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе 
			ИЛИ (ТекДанные.Статус <> Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе
				И ТекДанные.Статус <> Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект должен иметь статус ""В работе""'"));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПлановаяДлительность" Тогда	
		Если ТекДанные.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для контрольной точки изменение длительности не предусмотрено'"));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПлановаяДатаОкончания" Тогда	
		Если ТекДанные.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для контрольной точки изменение даты окончания не предусмотрено'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ИдентификаторСтроки, Значение)
	ТекДанные = ДеревоМодели.НайтиПоИдентификатору(ИдентификаторСтроки);
	День = 86400;
	ДанныеЭтапаКалендарногоПлана = Новый Структура;
	Если ИмяРеквизита = "ПлановаяДатаНачала" Тогда
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Значение = ТекДанные.Этап.ПлановаяДатаНачала;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Плановая дата начала не может быть пустой!'"));
			Возврат Ложь;
		КонецЕсли;
		Если ТекДанные.ПлановаяДлительность>0 Тогда
			ДанныеЭтапаКалендарногоПлана.Вставить("ПлановаяДатаОкончания", Значение + (ТекДанные.ПлановаяДлительность-1)*День);
		Иначе
			ДанныеЭтапаКалендарногоПлана.Вставить("ПлановаяДатаОкончания", Значение);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПлановаяДатаОкончания" Тогда
		Если Значение < ТекДанные.ПлановаяДатаНачала Тогда
			Значение = ТекДанные.Этап.ПлановаяДатаОкончания;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Плановая дата окончания не может быть меньше плановой даты начала!'"));
			Возврат Ложь;
		Иначе
			ДанныеЭтапаКалендарногоПлана.Вставить("ПлановаяДлительность", (КонецДня(Значение) - НачалоДня(ТекДанные.ПлановаяДатаНачала)+1)/День);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПлановаяДлительность" Тогда
		ДанныеЭтапаКалендарногоПлана.Вставить("ПлановаяДатаОкончания", ТекДанные.ПлановаяДатаНачала + (Значение-1)*День);
	ИначеЕсли ИмяРеквизита = "ФактическаяДатаНачала" Тогда
		Если ТекДанные.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована Тогда
			ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ФактическаяДатаОкончания" Тогда
		Если ТекДанные.ФактическаяДатаНачала > Значение Тогда
			Значение = ТекДанные.Этап.ФактическаяДатаОкончания;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата окончания не может быть меньше даты начала!'"));
			Возврат Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.ФактическаяДатаНачала) Тогда
			ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДатаНачала", ТекДанные.ПлановаяДатаНачала);
			ТекДанные.ФактическаяДатаНачала = ТекДанные.ПлановаяДатаНачала;
		КонецЕсли;
		ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДлительность", (КонецДня(Значение) - НачалоДня(ТекДанные.ФактическаяДатаНачала)+1)/День);
		ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена);
		
		УстановкаРазрешена = Истина;
	
		// Проверим наличие файлов с необходимым контекстом
		СписокНедостающихКонтекстов = Новый СписокЗначений;
			
		CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(ТекДанные.Этап, СписокНедостающихКонтекстов);
			
		Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
			УстановкаРазрешена = Ложь; 
		КонецЕсли;
			
		Если УстановкаРазрешена Тогда
			ДанныеЭтапаКалендарногоПлана.Вставить(ИмяРеквизита, Значение);
			ИзменитьЭтапКалендарногоПлана(ТекДанные.Этап, ДанныеЭтапаКалендарногоПлана);
			Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Объект.Ссылка);
			Если Объект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
				Объект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
				Модифицированность = Истина;
			КонецЕсли;
			Возврат Истина;
		Иначе
			Если ТекДанные.Этап.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
				Сообщение = НСтр("ru = 'Для завершения задачи необходимо присоединить файл(ы) следующего контекста:'");
			Иначе
				Сообщение = НСтр("ru = 'Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:'");
			КонецЕсли;
			Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
				Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	ДанныеЭтапаКалендарногоПлана.Вставить(ИмяРеквизита, Значение);
	ИзменитьЭтапКалендарногоПлана(ТекДанные.Этап, ДанныеЭтапаКалендарногоПлана);
	
	Если ИмяРеквизита = "ПлановаяДатаОкончания" ИЛИ ИмяРеквизита = "ПлановаяДатаНачала" ИЛИ ИмяРеквизита = "ПлановаяДлительность" Тогда
		МаксимальнаяПлановаяДатаОкончания = CRM_УправлениеПроектамиВызовСервера.ПолучитьПлановуюДатуОкончанияПроекта(Объект.Ссылка);
		Если МаксимальнаяПлановаяДатаОкончания <> Неопределено Тогда
			Если Объект.ПлановаяДатаОкончания <> МаксимальнаяПлановаяДатаОкончания Тогда
				Объект.ПлановаяДатаОкончания = МаксимальнаяПлановаяДатаОкончания;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ДеревоМоделиПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "ДеревоМодели", "");
	Значение = ТекДанные[ИмяРеквизита];
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ИмяРеквизита, ТекДанные.ПолучитьИдентификатор(), Значение) Тогда
		ДеревоМоделиОбновить(Неопределено);
	Иначе
		ТекДанные[ИмяРеквизита] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеЗаписиЭтапа(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("Ссылка") И ДополнительныеПараметры.Свойство("ВерсияДанных") Тогда
		
		 ПараметрСсылка = ДополнительныеПараметры.Ссылка;
		 Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ПараметрСсылка, "ВерсияДанных") <> ДополнительныеПараметры.ВерсияДанных Тогда
		
			ЗаполнитьДеревоПоЭтапам();
			РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
			
			Если РежимРедактированияМодели = "Графически" Тогда
				ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
				ИнициализироватьТабличныйДокументМодели();
				
				//Для каждого СтрокаДерева Из ЭлементыДерева Цикл
				//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
				//КонецЦикла;
				ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
				
				ОбновитьДиаграмму();
				ВывестиКартинкиВТабличныйДокументНаСервере();
				
			Иначе
				//РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
				УстановитьКурсорНаЭтап(ПараметрСсылка);
			КонецЕсли;
			
			// Изменим при необходимости плановую дату окончания
			Если ТипЗнч(ПараметрСсылка) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				
				МаксимальнаяПлановаяДатаОкончания = CRM_УправлениеПроектамиВызовСервера.ПолучитьПлановуюДатуОкончанияПроекта(Объект.Ссылка);
				Если МаксимальнаяПлановаяДатаОкончания <> Неопределено Тогда
					Если Объект.ПлановаяДатаОкончания <> МаксимальнаяПлановаяДатаОкончания Тогда
						Объект.ПлановаяДатаОкончания = МаксимальнаяПлановаяДатаОкончания;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
				
				МинимальнаяДатаНачала = CRM_УправлениеПроектамиВызовСервера.ПолучитьДатуНачалаПроекта(Объект.Ссылка);
				Если МинимальнаяДатаНачала <> Неопределено Тогда
					Если Объект.ДатаНачала <> МинимальнаяДатаНачала Тогда
						Объект.ДатаНачала = МинимальнаяДатаНачала;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Объект.Ссылка);
				Если Прогноз <> Неопределено Тогда
					Если Объект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
						Объект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбновитьПослеЗаписиЭтапа()

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	
	ТекущийЭтапДерева = Неопределено;
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийЭтапДерева = ТекущиеДанные.Этап;
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("Подключамеый_РежимОтображенияПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключамеый_РежимОтображенияПриИзменении()
	
	УстановитьРежимРедактирования(ЭтотОбъект);
	ЗаполнитьДеревоПоЭтапам();
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		ИнициализироватьТабличныйДокументМодели();
		
		//Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
		//КонецЦикла;
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);
		
		ОбновитьДиаграмму();
		ВывестиКартинкиВТабличныйДокументНаСервере();
		
	Иначе
		//РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
		УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
	КонецЕсли;
	
КонецПроцедуры // Подключамеый_РежимОтображенияПриИзменении()

&НаКлиенте
Процедура ТабличныйДокументМоделиПриИзменении(Элемент)
	ПеренестиДанныеТабличногоДокументаВЭтапКалендарногоПлана(Элемент.ТекущаяОбласть);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Попытка
		АктивнаяЯчейка = ТабличныйДокументМодели.Область(АдресТекущейЯчейки);
	Исключение
		АктивнаяЯчейка = Неопределено;
	КонецПопытки;
	
	Если АктивнаяЯчейка <> Неопределено И АктивнаяЯчейка.Расшифровка = "Сделано" Тогда 
		
		Если Объект.CRM_Статус <> ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
			СтандартнаяОбработка = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
			Возврат;
		КонецЕсли;
		
		Если НЕ АктивнаяЯчейка.СодержитЗначение Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		СтрокаОбласти = "R" + Формат(АктивнаяЯчейка.Низ, "ЧН=0; ЧГ=");
		НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
		ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Этап = ДанныеСтрокиДерева.Этап;
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("Этап", Этап);
		ПараметрыОбработки.Вставить("Сделано", АктивнаяЯчейка.Значение);
		
		Если АктивнаяЯчейка.Значение Тогда
			Если ЕстьПраваНаПроект ИЛИ ДанныеСтрокиДерева.Статус  = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветДляКолонкиСделаноУГанта", ЭтотОбъект, ПараметрыОбработки);
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Вы уверены, что ходите снять признак выполнения?'"), РежимДиалогаВопрос.ДаНет);
			Иначе
				СтандартнаяОбработка = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя отменять выполнение завершенной задачи'"));
				Возврат;
			КонецЕсли;
		Иначе
			Если ДанныеСтрокиДерева.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе") Тогда
				Отказ = Ложь;
				ДеревоМоделиСделаноПриИзмененииНаСервере(Этап, Отказ);
				Если НЕ Отказ Тогда
					АктивнаяЯчейка.Значение = ПараметрыОбработки.Сделано;
					ЭтотОбъект.Прочитать();
					Этаформа.ОбновитьОтображениеДанных();
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Лево > 1 И НЕ Область.СодержитЗначение Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Низ <= 2 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	СтрокаОбласти = "R" + Формат(Область.Низ, "ЧН=0; ЧГ=");
	НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
	ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
		
	Если ОбластьИдентификатора.Расшифровка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
	Если ДанныеСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Этап = ДанныеСтрокиДерева.Этап;
	
	Если Этап = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СписокРедактируемыхКолонок.НайтиПоЗначению(Область.Расшифровка) = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Модифицированность = Истина;
		ПараметрыФормы = Новый Структура("Ключ", Этап);

		ВерсияДанныхЭтапа = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Этап, "ВерсияДанных");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеЗаписиЭтапа",ЭтотОбъект, Новый Структура("Ссылка, ВерсияДанных", Этап, ВерсияДанныхЭтапа));
		
		Если ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ОткрытьФорму("Справочник.CRM_ЭтапыПроектов.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект.УникальныйИдентификатор,,,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
		Иначе
			ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект.УникальныйИдентификатор,,,
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Этап) <> Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		СтандартнаяОбработка = РазрешеноРедактированиеЭлемента(Область.Расшифровка, ОбластьИдентификатора.Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		Если ТекущаяОбласть.Имя = "ДиаграммаГанта" Тогда
			Элемент.Редактирование  = Ложь;
			Возврат;
		
		Иначе
			Если Не Элемент.Редактирование Тогда
				Элемент.Редактирование  = Истина;
			КонецЕсли;
			
			МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяОбласть.Имя, "_");
			СтрокаОбласти = МассивИмени[0];
			
			НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			
			Если СтрНайти(ТекущаяОбласть.Имя, "ТипЭтапа") > 0 Тогда
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); // Этап всегда первая колонка С1
				
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				РежимСвернуть = (СтрНайти(ТекущаяОбласть.Имя, "Свернуть") > 0);
				Попытка 
					СуффиксИмени = ?(РежимСвернуть, "Свернуть", "Развернуть");
					ОбратныйСуффикс = ?(РежимСвернуть, "Развернуть", "Свернуть");
					Рисунок = ТабличныйДокументМодели.Рисунки[ТекущаяОбласть.Имя];
					Рисунок.Картинка = ?(РежимСвернуть, БиблиотекаКартинок.CRM_Развернуть, БиблиотекаКартинок.CRM_Свернуть);
					Рисунок.Имя = СтрокаОбласти + "_" + ОбратныйСуффикс;
				Исключение
				КонецПопытки;
				
				СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), Не РежимСвернуть);
				
				СвернутьРазвернутьТочкуДиаграммы(ТекущиеДанные.ИдентификаторСтроки, Не РежимСвернуть);
				
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); // Этап всегда первая колонка С1
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		//Если Не Элемент.Редактирование Тогда
		//	Элемент.Редактирование = Истина;
		//КонецЕсли;
		
		Если СтрНайти(ТекущаяОбласть.Имя, "C") > 0 Тогда // адрес конкретной ячейки
			АдресТекущейЯчейки = ТекущаяОбласть.Имя;
		КонецЕсли;
		
		Если ТекущаяОбласть.Низ < 3 Тогда
			Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			Элемент.Редактирование = Ложь;
		Иначе
			СтрокаОбласти = "R" + Формат(ТекущаяОбласть.Низ, "ЧН=0; ЧГ=");
			НомерКолонки = СписокОбластейТабличногоДокумента.НайтиПоЗначению("Служебная_ИдентификаторСтрокиДерева").Представление;
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C"+НомерКолонки);
			
			Если ОбластьИдентификатора.Расшифровка <> Неопределено Тогда
				Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			Иначе
				Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ЗначениеЗаполнено(ТекущаяОбласть.Расшифровка) И СписокРедактируемыхКолонок.НайтиПоЗначению(ТекущаяОбласть.Расшифровка)<>Неопределено
				И ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				Если Не Элемент.Редактирование Тогда
					Элемент.Редактирование = Истина;
				КонецЕсли;
			Иначе
				Элемент.Редактирование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Элемент.ТекущаяОбласть = ТабличныйДокументМодели.Область("R" + Элемент.ТекущаяОбласть.Верх);
	Если ЗначениеЗаполнено(ТекущаяОбластьСтрока) Тогда
		ОбластьСтрока = ТабличныйДокументМодели.Область(ТекущаяОбластьСтрока);
		ОбластьСтрока.ЦветФона = ЦветФонаПоля;
	КонецЕсли;
	ТекущаяОбластьСтрока = "R" + Элемент.ТекущаяОбласть.Верх;
	ОбластьСтрока = ТабличныйДокументМодели.Область(ТекущаяОбластьСтрока);
	ОбластьСтрока.ЦветФона = ЦветНавигации;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ЭлементыДерева, Видимость)
		
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		ТабличныйДокументМодели.Область(СтрокаДерева.АдресСтрокиОбласти).Видимость = Видимость;
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Видимость);
	
	КонецЦикла;
	
КонецПроцедуры // СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно()

&НаКлиенте
Процедура СвернутьРазвернутьТочкуДиаграммы(ИдентифкаторТочки, Развернуть, Знач ДиаграммаОбъект = Неопределено)

	Если ДиаграммаОбъект = Неопределено Тогда
		ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
		ДиаграммаОбъект = ДиаграммаРисунок.Объект;
		
	КонецЕсли;

	Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки);
	Если Развернуть Тогда
		ДиаграммаОбъект.РазвернутьТочку(Точка, Истина);
	Иначе	
		ДиаграммаОбъект.СвернутьТочку(Точка, Истина);
	КонецЕсли;
	
КонецПроцедуры // СвернутьТочкуДиаграммы()

&НаКлиенте
Процедура ПолосаРегулированияШириныДиаграммыГантаПриИзменении(Элемент)
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	
	ДиаграммаОбъект.Обновление = Ложь;
	ТабличныйДокументМодели.Область("Служебная_ДиаграммаГанта").ШиринаКолонки = ПолосаРегулированияШириныДиаграммыГанта*2;
	
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаНачалаПриИзменении(Элемент)
	
	Если ПлановаяДатаНачалаПредыдущая = Объект.ПлановаяДатаНачала Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) Тогда
		
		Объект.ПлановаяДатаНачала = ПлановаяДатаНачалаПредыдущая;
		Возврат;
		
	ИначеЕсли Объект.ПлановаяДатаНачала > ПлановаяДатаНачалаПредыдущая Тогда
		
		ПоказатьОповещениеПользователя(,,НСтр("ru = 'Выполняется пересчет дат графика работ...'"),БиблиотекаКартинок.CRM_Ожидание);
		
		ОписаниеОшибки = "";
		
		ТекущийЭтап = Неопределено;
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийЭтап = ТекущиеДанные.Этап;
		КонецЕсли;
		
		CRM_УправлениеПроектамиВызовСервера.ПересчитатьДатыЭтаповПроекта(Объект.Ссылка, ПлановаяДатаНачалаПредыдущая, Объект.ПлановаяДатаНачала, ОписаниеОшибки);
		
		Если ОписаниеОшибки = "" Тогда
			
			Объект.ПлановаяДатаОкончания = Объект.ПлановаяДатаОкончания + CRM_УправлениеПроектамиКлиентСервер.РазностьДатВСекундах(Объект.ПлановаяДатаНачала, ПлановаяДатаНачалаПредыдущая);
			
			//УстановитьКурсорНаЭтап(ТекущийЭтап);
			
			ПоказатьОповещениеПользователя(,,НСтр("ru = 'Пересчет дат графика завершен.'"));
			
			ЗаполнитьДеревоПоЭтапам();
			РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
			
			Если РежимРедактированияМодели = "Графически" Тогда
				ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
				ИнициализироватьТабличныйДокументМодели();
				
				//Для каждого СтрокаДерева Из ЭлементыДерева Цикл
				//	ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, СтрокаДерева.ПолучитьЭлементы());
				//КонецЦикла;
				ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтотОбъект, ЭлементыДерева);

				ОбновитьДиаграмму();
				ВывестиКартинкиВТабличныйДокументНаСервере();
			
			Иначе
				
			//	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");
				УстановитьКурсорНаЭтап(ТекущийЭтапДерева);
				
			КонецЕсли;
			
			// Необходимо записать проект, иначе есть вероятность что запись отменят, а этапы уже сместились.
			Записать();
			
		Иначе
			Объект.ПлановаяДатаНачала = ПлановаяДатаНачалаПредыдущая;
			Сообщить(НСтр("ru = 'При обновлении дат этапов произошла ошибка:'") + Символы.ПС + ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	                     	
	ПлановаяДатаНачалаПредыдущая = Объект.ПлановаяДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДеревоМоделиОбновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСписокКолонок(Команда)
	
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаОтметкиЭлементовСписка",Новый Структура("СписокЗначений", КолонкиКалендарногоГрафика), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКолонокКалендарногоГрафикаНаСервере()
	
	Если КолонкиКалендарногоГрафика.Количество() = 0 Тогда
		СохраненныйСписок = Объект.Ссылка.CRM_КолонкиКалендарногоГрафика.Получить();
		
		Если ЗначениеЗаполнено(СохраненныйСписок) Тогда 
			КолонкиКалендарногоГрафика = СохраненныйСписок.Скопировать();
		Иначе
			CRM_УправлениеПроектамиВызовСервера.ПеречитатьСписокКолонокКалендарногоГрафикаИзМакетаНаСервере(КолонкиКалендарногоГрафика);
		КонецЕсли;
	КонецЕсли;
 	
КонецПроцедуры

&НаСервере
Процедура ВидимостьИПорядокКолонокДерева()

	НомерКолонки = 0;
	Для каждого ЭлементСписка Из КолонкиКалендарногоГрафика Цикл
		
		НомерКолонки = НомерКолонки + 1;
		Элемент = Элементы["ДеревоМодели" + ЭлементСписка.Значение];
		Элемент.Видимость = ЭлементСписка.Пометка;
		Если Элемент <> Элементы.ДеревоМодели.ПодчиненныеЭлементы[НомерКолонки] Тогда
			Элементы.Переместить(Элемент, Элементы.ДеревоМодели, Элементы.ДеревоМодели.ПодчиненныеЭлементы[НомерКолонки]);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДеревоМоделиСделаноПриИзмененииНаСервере(Этап, Отказ)
	
	Если ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		
		УстановкаРазрешена = Истина;
	
		// Проверим наличие файлов с необходимым контекстом
		СписокНедостающихКонтекстов = Новый СписокЗначений;
			
		CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(Этап, СписокНедостающихКонтекстов);
			
		Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
			УстановкаРазрешена = Ложь; 
		КонецЕсли;
		
		Если УстановкаРазрешена Тогда
			ДокОбъект = Этап.ПолучитьОбъект();
			ДокОбъект.ФактическаяДатаОкончания = ТекущаяДата();
			
			Если ДокОбъект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				ДокОбъект.ФактическаяДатаНачала = ТекущаяДата();
			Иначе
				Если НЕ ЗначениеЗаполнено(ДокОбъект.ФактическаяДатаНачала) Тогда
					ДокОбъект.ФактическаяДатаНачала = ДокОбъект.ПлановаяДатаНачала;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокОбъект.ФактическаяДатаНачала <> Дата(1, 1, 1) Тогда
				ДокОбъект.ФактическаяДлительность = ((НачалоДня(ДокОбъект.ФактическаяДатаОкончания)-НачалоДня(ДокОбъект.ФактическаяДатаНачала))/86400) + 1;
			Иначе
				ДокОбъект.ФактическаяДлительность = 0;
			КонецЕсли;
			
			Если ЕстьПраваНаПроект Тогда
				ДокОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена;
			Иначе
				ДокОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена;
			КонецЕсли;
			ДокОбъект.Записать();
			Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Объект.Ссылка);
			Если Объект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
				Объект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
				Модифицированность = Истина;
			КонецЕсли;
			Отказ = Ложь;
		Иначе
			Если Этап.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
				Сообщение = НСтр("ru = 'Для завершения задачи необходимо присоединить файл(ы) следующего контекста:'");
			Иначе
				Сообщение = НСтр("ru = 'Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:'");
			КонецЕсли;
			Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
				Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветДляКолонкиСделано(ОтветПользователя, Параметр) Экспорт 
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		СнятьФлажокНаСервере(Параметр.Этап);
	Иначе
		Параметр.Сделано = Истина;
	КонецЕсли;
	ЭтотОбъект.Прочитать();
	Этаформа.ОбновитьОтображениеДанных();
	РазвернутьВсеДерево(ДеревоМодели.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветДляКолонкиСделаноУГанта(ОтветПользователя, Параметр) Экспорт 
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		СнятьФлажокНаСервере(Параметр.Этап);
	Иначе
		Параметр.Сделано = Истина;
	КонецЕсли;
	ЭтотОбъект.Прочитать();
	Этаформа.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажокНаСервере(Этап)
	
	ДокОбъект = Этап.ПолучитьОбъект();
	ДокОбъект.ФактическаяДатаОкончания = "";
	Если ДокОбъект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		ДокОбъект.ФактическаяДатаНачала = "";
		ДокОбъект.ФактическаяДлительность = 0;
	КонецЕсли;
	ДокОбъект.ФактическаяДлительность = 0;
	
	ДокОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе;
	ДокОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиСделаноПриИзменении(Элемент)
	
	СтрокаТовары = ДеревоМодели.НайтиПоИдентификатору(Элементы.ДеревоМодели.ТекущаяСтрока);	
		
	Если Объект.CRM_Статус <> ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
		СтрокаТовары.Сделано = НЕ СтрокаТовары.Сделано;
		Возврат;
	КонецЕсли;
		
	Если НЕ СтрокаТовары.Сделано Тогда
		Если ЕстьПраваНаПроект ИЛИ СтрокаТовары.Статус  = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветДляКолонкиСделано", ЭтотОбъект, СтрокаТовары);
			ПоказатьВопрос(ОписаниеОповещения, "Вы уверены, что ходите снять признак выполнения?", РежимДиалогаВопрос.ДаНет);		
		Иначе
			СтандартнаяОбработка = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя отменять выполнение завершенной задачи'"));
		КонецЕсли;
	Иначе
		Если СтрокаТовары.Статус <> ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
			СтрокаТовары.Сделано = НЕ СтрокаТовары.Сделано;
			Возврат;
		КонецЕсли;
		Отказ = Ложь;
		ДеревоМоделиСделаноПриИзмененииНаСервере(СтрокаТовары.Этап, Отказ);
		Если Отказ Тогда
			СтрокаТовары.Сделано = НЕ СтрокаТовары.Сделано;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДерево(КоллекцияЭлементов) 
	
	Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		Элементы.ДеревоМодели.Развернуть(ЭлементКоллекции.ПолучитьИдентификатор());
		
		ВложенныеЭлементыКоллекции = ЭлементКоллекции.ПолучитьЭлементы();
		Если (ВложенныеЭлементыКоллекции.Количество() > 0) Тогда
			РазвернутьВсеДерево(ВложенныеЭлементыКоллекции);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиТабличногоДокумента(Развернуть = Истина)
	
	СтрокиДерева = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Попытка // чтобы не искать перебором всей коллекции
			СуффиксИмени = ?(Развернуть, "_Развернуть", "_Свернуть");
			ОбратныйСуффикс = ?(Развернуть, "_Свернуть", "_Развернуть");
			Рисунок = ТабличныйДокументМодели.Рисунки[СтрокаДерева.АдресСтрокиОбласти + СуффиксИмени];
			Рисунок.Картинка = БиблиотекаКартинок["CRM" + ОбратныйСуффикс];
			Рисунок.Имя = СтрокаДерева.АдресСтрокиОбласти + ОбратныйСуффикс;
		Исключение
		КонецПопытки;
		
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Развернуть);
		СвернутьРазвернутьТочкуДиаграммы(СтрокаДерева.ИдентификаторСтроки, Развернуть);
		
	КонецЦикла;
	
КонецПроцедуры //РазвернутьСтрокиТабличногоДокумента()

&НаКлиенте
Процедура ПечатьВыводПодключаемый()
	
	ИдентификаторПечатнойФормы = "Проект";
	НазваниеПечатнойФормы = НСтр("ru = 'Проект'");
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НазваниеПечатнойФормы;
	ПечатнаяФорма.ТабличныйДокумент = ТабДок;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НазваниеПечатнойФормы;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.ПараметрыПечати.Вставить("ЗаголовокФормы", "Печать проекта");
	
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", Новый СписокЗначений);
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Попытка
		ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	Исключение
		Сообщить(НСтр("ru = 'Для печати необходимо перейти в режим ""Диаграмма Ганта""'"));
		Возврат;
	КонецПопытки;

	ОсновнойЭкран = ПолучитьИнформациюЭкрановКлиента()[0];
	DPI = ?(ОсновнойЭкран.DPI > 0, ОсновнойЭкран.DPI, 96); // веб-клиент только в IE возвращает DPI (96 "стандартное" значение)
	
	ПечатьНаСервере(DPI, ТабличныйДокументМодели);
	
	ПодключитьОбработчикОжидания("ПечатьВыводПодключаемый", 1, Истина);

КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере(DPI, ТабличныйДокументГант)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Справочники.Проекты.ПолучитьМакет("CRM_ПечатьПроектовМакет");

	Шапка = Макет.ПолучитьОбласть("ШапкаДокумента");
	Шапка.Параметры.Заголовок = Объект.Наименование;
	Шапка.Параметры.Партнер = Объект.CRM_Партнер;
	
	Шапка.Параметры.ДатаСтарта = Формат(Объект.ПлановаяДатаНачала, "ДФ=dd.MM.yyyy") + " (" + Формат(Объект.ПлановаяДатаНачала, "Л=ru_RU; ДФ='ддд'") +")";
	Шапка.Параметры.ДатаПечати = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ТабДок.Вывести(Шапка);
	ТабДок.Вывести(ШапкаТаблицы);
	
	СтрокаТаблицы = Макет.ПолучитьОбласть("Строка");
	Номер = 1;
	
	СтрокаТЧНачальная = Шапка.ВысотаТаблицы + ШапкаТаблицы.ВысотаТаблицы;
	СтрокаТЧКонечная  = СтрокаТЧНачальная + ТабличныйДокументГант.ВысотаТаблицы - 3;
	НомерКолонкиГанта = 11;
	
	ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		ВывестиСтрокуТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокаТаблицы, "");
	КонецЦикла;
	
	Подвал = Макет.ПолучитьОбласть("ПодвалДокумента");
	Подвал.Параметры.НашаОрганизация = Объект.CRM_Организация;
	Подвал.Параметры.ПартнерПодвал = Объект.CRM_Партнер;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Вывести(Подвал);
	
	// Вывод диаграммы Ганта
	// Получим картинку диаграммы Ганта
	ДиаграммаРисунок = ТабличныйДокументГант.Рисунки["ДиаграммаГанта"];
	ДиаграммаГанта   = ДиаграммаРисунок.Объект;
	КартинкаГанта    = Диаграммаганта.ПолучитьКартинку(ДиаграммаРисунок.Ширина*DPI/25.4, ДиаграммаРисунок.Высота*DPI/25.4, ФорматКартинки.PNG);
	
	ТабДок.Область(, НомерКолонкиГанта,, НомерКолонкиГанта).ШиринаКолонки = ДиаграммаРисунок.Ширина;
	
	ОбластьГанта = ТабДок.Область(СтрокаТЧНачальная, НомерКолонкиГанта, СтрокаТЧКонечная, НомерКолонкиГанта);
	ОбластьГанта.Объединить();
	ОбластьГанта.Картинка = КартинкаГанта;
	ОбластьГанта.РазмерКартинки = РазмерКартинки.Растянуть;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьГанта.Обвести(,,Линия,Линия);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуТабличногоДокументаРекурсивно(ЭлементыДерева, СтрокаТаблицы, СтрокаНомера)

	Номер = 1;
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		СтрокаНомераТек = СтрокаНомера + Номер;
		СтрокаТаблицы.Параметры.Номер 		   = СтрокаНомераТек;
		СтрокаТаблицы.Параметры.Этап 		   = СтрокаДерева.Этап;
		СтрокаТаблицы.Параметры.Отвественный   = СтрокаДерева.ОтветственныйИсполнитель;
		СтрокаТаблицы.Параметры.ДатаНачала	   = Формат(СтрокаДерева.ПлановаяДатаНачала,"ДФ=dd.MM.yyyy");
		СтрокаТаблицы.Параметры.ДатаЗавершения = Формат(СтрокаДерева.ПлановаяДатаОкончания,"ДФ=dd.MM.yyyy");
		СтрокаТаблицы.Параметры.ВсегоДней	   = СтрокаДерева.ПлановаяДлительность;
		
		Если СтрокаДерева.Сделано ИЛИ НЕ ЗначениеЗаполнено(СтрокаДерева.ПлановаяДатаОкончания) ИЛИ
			 НачалоДня(СтрокаДерева.ПлановаяДатаОкончания) >= НачалоДня(ТекущаяДата()) Тогда
			СтрокаТаблицы.Параметры.Просрочено = 0;
		Иначе
			СтрокаТаблицы.Параметры.Просрочено = CRM_УправлениеПроектамиКлиентСервер.РазностьДатВДнях(ТекущаяДата(), СтрокаДерева.ПлановаяДатаОкончания); 
			
		КонецЕсли;
			
		ОбластьНомера = СтрокаТаблицы.Область(1,2,1,2);
		
		ОбластьЭтапа = СтрокаТаблицы.Область(1,3,1,3);
		ОбластьЭтапа.Отступ =  СтрЧислоВхождений(СтрокаНомера, ".") * 2;
		Если ТипЗнч(СтрокаДерева.Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ОбластьЭтапа.Шрифт  = Новый Шрифт(,,Истина);
			ОбластьНомера.Шрифт = Новый Шрифт(,,Истина);
		Иначе
			ОбластьЭтапа.Шрифт  = Новый Шрифт(,,Ложь);
			ОбластьНомера.Шрифт = Новый Шрифт(,,Ложь);
		КонецЕсли;
		
		ТабДок.Вывести(Строкатаблицы);
		
		ВывестиСтрокуТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокаТаблицы, СтрокаНомераТек + ".");
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиСтрокуТабличногоДокументаРекурсивно()

&НаКлиенте
Процедура CRM_СтатусПриИзменении(Элемент)
	
	Если Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Завершен") Тогда
		
		Результат = ПроверитьВозможностьЗавершения();
		Если Результат Тогда
			Объект.Завершен 				 = Истина;
			Элементы.ДатаНачала.Видимость	 = Истина;
			Элементы.ДатаОкончания.Видимость = Истина;
			Элементы.CRM_Прогноз.Видимость 	 = Истина;
			УстановитьДатуОкончания();
			Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
				Объект.ДатаНачала = Объект.ПлановаяДатаНачала;
			КонецЕсли;
			УправлениеВидимостью();
		Иначе
			Объект.CRM_Статус = ПредыдущийСтатусПроекта;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Планируется") Тогда
		
		Элементы.ПлановаяДатаНачала.ТолькоПросмотр 	  = Ложь;
		Элементы.ПлановаяДатаОкончания.ТолькоПросмотр = Ложь;
		Элементы.ДатаНачала.Видимость	 			  = Ложь;
		Элементы.ДатаОкончания.Видимость 			  = Ложь;
		Элементы.CRM_Прогноз.Видимость 	 			  = Ложь;
		УправлениеВидимостью();
		
	ИначеЕсли Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатусВРаботеПродолжение", ЭтотОбъект, ПредыдущийСтатусПроекта);
		ПоказатьВопрос(ОписаниеОповещения, "Внимание, после старта проекта плановые даты будут недоступны для изменения. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Объект.CRM_Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.Отменен") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатусОтмененПродолжение", ЭтотОбъект, ПредыдущийСтатусПроекта);
		ПоказатьВопрос(ОписаниеОповещения, "Внимание! При записи отмененного проекта будут отменены все активные задачи. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	ПредыдущийСтатусПроекта = Объект.CRM_Статус;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьРоль()
	Возврат РольДоступна("АдминистраторСистемы");
КонецФункции

&НаСервере
Процедура УстановитьДатуОкончания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
    |	МАКСИМУМ(CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания) КАК ФактическаяДатаОкончания
    |ИЗ
    |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
    |ГДЕ
    |	CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
    |	И CRM_ЭтапКалендарногоПлана.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ДатаОкончания = Выборка.ФактическаяДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьЗавершения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	|ГДЕ
	|	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	|	И НЕ CRM_ЭтапКалендарногоПлана.Статус В (&Статусы)
	|	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Статусы = Новый СписокЗначений();
	Статусы.Добавить(Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена);
	Статусы.Добавить(Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена);
	Запрос.УстановитьПараметр("Статусы", Статусы);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВсеЭтапыЗавершены = РезультатЗапроса.Пустой();
	
	Если НЕ ВсеЭтапыЗавершены Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Текст = НСтр("ru = 'Завершение проекта невозможно! По данному проекту есть незавершенные задачи/контрольные точки:'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст  = "";
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("   - " + Выборка.Ссылка);
		КонецЦикла;
		
		
	КонецЕсли;
	
	Возврат ВсеЭтапыЗавершены;
	
КонецФункции 

&НаКлиенте
Процедура СтатусВРаботеПродолжение(ОтветПользователя, СтатусПроекта) Экспорт 
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		Элементы.ПлановаяДатаОкончания.Видимость   = Истина;
		Элементы.ДатаНачала.Видимость 			   = Истина;
		Элементы.ДатаОкончания.Видимость 		   = Истина;
		Элементы.CRM_Прогноз.Видимость 			   = Истина;
		Ответ 									   = Истина;
		//ПоказатьОповещениеПользователя(,,НСтр("ru = 'Выполняется установка статуса ""В работе"" для всех этапов проекта...'"),БиблиотекаКартинок.CRM_Ожидание);
		ОбработатьОтветПользователяНаСервере(Ответ);
		//ПоказатьОповещениеПользователя(,,НСтр("ru = 'Установка статусов завершена!'"));
		// Необходимо записать проект, иначе есть вероятность что запись отменят, а этапы уже статус сменили.
		Записать();
		Элементы.ПлановаяДатаНачала.ТолькоПросмотр    = Истина;
		Элементы.ПлановаяДатаОкончания.ТолькоПросмотр = Истина;
		
		ДеревоМоделиОбновить(Неопределено);
		
	Иначе
		Объект.CRM_Статус = СтатусПроекта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтмененПродолжение(ОтветПользователя, СтатусПроекта) Экспорт 
	
	Если НЕ ОтветПользователя = КодВозвратаДиалога.Да Тогда
		Объект.CRM_Статус = СтатусПроекта;
		УправлениеВидимостью();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветПользователяНаСервере(Ответ)
	
	Если Ответ Тогда
		
		УстановитьДатуНачалаПроектаИПрогноз();
		
		//// Изменим у этапов проекта статус на "В работе"
		//Запрос = Новый Запрос;
		//ТекстЗапроса = "ВЫБРАТЬ
		//               |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка
		//               |ИЗ
		//               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
		//               |ГДЕ
		//               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
		//               |	И CRM_ЭтапКалендарногоПлана.ПлановаяДатаНачала <= &ТекущаяДата
		//               |	И CRM_ЭтапКалендарногоПлана.Статус = &Статус
		//               |	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления";
		//
		//Запрос.Текст = ТекстЗапроса;
		//Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
		//Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
		//Запрос.УстановитьПараметр("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована);
		//
		//Выборка = Запрос.Выполнить().Выбрать();
		//ФактическаяДатаНачала = ТекущаяДатаСеанса();
		//Пока Выборка.Следующий() Цикл
		//	ЭтапОбъект = Выборка.Ссылка.ПолуЧитьОбъект();
		//	ЭтапОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе;
		//	Если ЭтапОбъект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап Тогда
		//		ЭтапОбъект.ФактическаяДатаНачала = ФактическаяДатаНачала;
		//	КонецЕсли;
		//	ЭтапОбъект.Записать();
		//КонецЦикла;
	
	Иначе
		//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//	Объект.CRM_Статус = Перечисления.CRM_СтатусыПроектов.Планируется;
		//Иначе
		//	Объект.CRM_Статус = Объект.CRM_Статус;
		//	Если Объект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе Тогда
		//		Элементы.ПлановаяДатаНачала.ТолькоПросмотр	  = Ложь;
		//		Элементы.ПлановаяДатаОкончания.ТолькоПросмотр = Ложь;
		//		Элементы.ДатаНачала.Видимость 	 = Ложь;
		//		Элементы.ДатаОкончания.Видимость = Ложь;
		//		Элементы.CRM_Прогноз.Видимость   = Ложь;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуНачалаПроектаИПрогноз()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала) КАК ДатаНачала
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	               |	И CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ДатаНачала = Выборка.ДатаНачала;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания >= CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания
	               |				ТОГДА CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания
	               |			ИНАЧЕ CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания
	               |		КОНЕЦ) КАК Прогноз
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.CRM_ПрогнозЗавершенияПроекта = Выборка.Прогноз;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеНаСервере(Этап)
	
	ЭтапОбъект = Этап.ПолучитьОбъект();
	ЭтапОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭтап = Элементы.ДеревоМодели.ТекущиеДанные.Этап;
		ПометитьНаУдалениеНаСервере(ТекущийЭтап);
		ДеревоМоделиОбновить(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	Если Элементы.ДеревоМодели.ТекущиеДанные  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭтап = Элементы.ДеревоМодели.ТекущиеДанные.Этап;
	Если ЗначениеЗаполнено(ТекущийЭтап) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЭтапЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить текущий элемент?'"), РежимДиалогаВопрос.ДаНет); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКопированияЗадачи()
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Этап = Неопределено;
	Иначе
		Этап = ТекДанные.Этап;
	КонецЕсли;
	Элементы.ДеревоМоделиКнопкаКопироватьЗадачу.Доступность = (ТипЗнч(Этап) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана"));
	Элементы.ДеревоМоделиКонтекстноеМенюКопироватьЗадачу.Доступность = Элементы.ДеревоМоделиКнопкаКопироватьЗадачу.Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьЗадачу(Команда)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Этап = ТекДанные.Этап;
	Если Этап = Неопределено ИЛИ ТипЗнч(Этап) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаДокумента", Новый Структура("ЗначениеКопирования", Этап), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиЭтап(ЭтапПриемник, ЭтапПереносимый)
	
	ЭтапПереносимыйОбъект = ЭтапПереносимый.ПолучитьОбъект();
	
	Если ТипЗнч(ЭтапПереносимыйОбъект) = Тип("СправочникОбъект.CRM_ЭтапыПроектов") Тогда
		ЭтапПереносимыйОбъект.Родитель = ЭтапПриемник;
	ИначеЕсли ТипЗнч(ЭтапПереносимыйОбъект) = Тип("ДокументОбъект.CRM_ЭтапКалендарногоПлана") Тогда
		ЭтапПереносимыйОбъект.Этап = ЭтапПриемник;
	Иначе 
		Возврат;
	КонецЕсли;
	
	ЭтапПереносимыйОбъект.Записать();
	
	ЗаполнитьДеревоПоЭтапам();
	УстановитьКурсорНаЭтап(ЭтапПереносимый);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЭтапКалендарногоПлана(Этап, ДанныеЭтапаКалендарногоПлана);
	
	ЭтапКалендарногоПлана = Этап.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЭтапКалендарногоПлана, ДанныеЭтапаКалендарногоПлана);
	ЭтапКалендарногоПлана.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗацикливанияУровнейПриПереносе(ЭтапПриемник, ЭтапПереносимый)
	
	Если ЭтапПриемник = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭтапПриемник.ПринадлежитЭлементу(ЭтапПереносимый);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиДанныеТабличногоДокументаВЭтапКалендарногоПлана(ОбластьРедактирования)
	
	ТекДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Значение = ОбластьРедактирования.Значение;
	Если ПриИзмененииЗначенияРеквизитыЭтапа(ОбластьРедактирования.Расшифровка, ТекДанные.ПолучитьИдентификатор(), Значение) Тогда
		ДеревоМоделиОбновить(Неопределено);
	Иначе
		ОбластьРедактирования.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоМоделиПриАктивизацииСтроки(Элемент)
	ДоступностьКопированияЗадачи();
КонецПроцедуры

#КонецОбласти //РаботаСЭтапами

