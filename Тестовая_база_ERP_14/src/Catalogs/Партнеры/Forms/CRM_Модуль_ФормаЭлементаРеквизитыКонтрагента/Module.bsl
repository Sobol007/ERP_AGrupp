&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +CRM Модуль
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	КонецЕсли;
	// -CRM Модуль
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
		
		УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен() ИЛИ ТолькоПросмотр;
		Если Объект.Ссылка.Пустая() Тогда
			
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.ЮрФизЛицо
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО Контрагенты.Партнер = Партнеры.Ссылка
				|ГДЕ
				|	Партнеры.Ссылка = &ЗначениеЗаполнения";
				
				Запрос.УстановитьПараметр("ЗначениеЗаполнения", Параметры.ЗначениеКопирования);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЮрФизЛицо =  Выборка.ЮрФизЛицо;
				Иначе
					ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
				
			ИначеЕсли не Параметры.Свойство("ЗначенияЗаполнения") Тогда
	
				ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			Иначе	
				ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
			КонецЕсли;
			
			ПриСозданииИЧтенииНаСервере();
			
		КонецЕсли;
		
		ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Объект.Ссылка);
		
		Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
			Элементы.НаименованиеПолноеКомпания.Ширина = 60;
		КонецЕсли;
		
	Иначе
		
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
		
		ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
		
		Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаНаименованиеПолноеЧастноеЛицо;
		Иначе	
			Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаНаименованиеПолноеКомпания;
		КонецЕсли;
		
		Если Объект.Ссылка.Пустая() Тогда
			ПриСозданииИЧтенииНаСервере();
		КонецЕсли;
		
		ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Объект.Ссылка);
		
	КонецЕсли;
	
	Если ОтгрузкаЗапрещена Тогда
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Версионирование
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Версионирование
	
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево,, Истина);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	Если Объект.Ссылка.Пустая() И Объект.ЮрФизЛицо.Пустая() Тогда
		Объект.ЮрФизЛицо = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидКлиента");
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПараметрыНового") Тогда
		Объект.Наименование = Параметры.ПараметрыНового.Наименование;
		
		МассивДопРеквизитов = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип,Вид",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,Справочники.ВидыКонтактнойИнформации.EmailПартнера));
		Если МассивДопРеквизитов.количество() > 0 Тогда
			ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = Параметры.ПараметрыНового.АдресПочты;
		КонецЕсли;
	КонецЕсли;
	
	РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
	
	//УстановитьВидимостьРеквизитовКИ();
	УстановитьВидимостьРеквизитов();
	
	РедактированиеПредставления = Ложь;
	РедактированиеФИО = Ложь;
	ПредставлениеВыбраноИзСписка = Ложь;	
	
	// CRM-заполнение после типового.
	Если Не Объект.Ссылка.Пустая() Тогда
		НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();	
	КонецЕсли;	
	// -CRM	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) 
		ИЛИ ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры) Тогда
		УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтаФорма, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +CRM Модуль
	//Если Элементы.тЗадолженность.Видимость Тогда
	//	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПокупателями) Тогда
	//		Элементы.тЗадолженность.Видимость = Истина;
	//		СтруктураОтбора = Новый Структура("Контрагент", Объект.Ссылка);
	//		тзДолги = РегистрыНакопления.РасчетыСПокупателями.Остатки(,СтруктураОтбора,,"СуммаВал");
	//		Долг = тзДолги.Итог("СуммаВал");
	//		Если Долг = 0 Тогда
	//			Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Задолженности нет'");
	//			Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	//		ИначеЕсли Долг < 0 Тогда	
	//			Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Долг клиенту составляет: '") + Формат(?(Долг < 0, -Долг, Долг), "ЧДЦ=2; ЧН=0,00") + " " + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование);
	//			Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	//		Иначе
	//			Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Долг клиента составляет: '") + Формат(?(Долг < 0, -Долг, Долг), "ЧДЦ=2; ЧН=0,00") + " " + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование);
	//			Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	//		КонецЕсли;	
	//	Иначе	
	//		Элементы.тЗадолженность.Видимость = Ложь;
	//	КонецЕсли;	
	//КонецЕсли;
	
	ОтобразитьЗадолженность();
	// -CRM Модуль
	
	ВариантПоставкиПользователяКОРП = CRM_ЛицензированиеСервер.ВариантПоставкиКОРП();
	Элементы.CRM_ГруппаПотенциалы.Видимость	= ВариантПоставкиПользователяКОРП и Константы.CRM_РассчитыватьПотенциалКлиентов.Получить();
	Элементы.тПотенциал.Видимость			= ВариантПоставкиПользователяКОРП;
	
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		Элементы.Наименование.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Справочники.Партнеры.ПолучитьСсылку();
	Иначе
		КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") Тогда
		
		Основание = Параметры.Основание;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			СоздаемИзВходящегоПисьма 	= Истина;
			
			Попытка
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						ЭтотОбъект[СтрокаТаблицы.ИмяРеквизита] = Основание.ОтправительАдрес;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	
	
	Элементы.CRM_НапоминатьОДнеРождения.Доступность = ЗначениеЗаполнено(Объект.ДатаРождения);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовыйПартнер = Истина;
		Объект.Клиент = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите") И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("CRM_ФизЛицо", Объект.Ссылка);
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
	Клиенты.Параметры.УстановитьЗначениеПараметра("ФизЛицо",Объект.Ссылка);
	
	// В зависимости от того юр. лицо или физ. лицо отображаем ГруппаКлиентов и перемещаем на другую закладку
	// ГруппаКонтактныеЛица.
	НастроитьВидимостьПоложениеГрупп();
	
	// Настройка доступности основного менеджера.
	Элементы.ОсновнойМенеджер.ТолькоПросмотр = НЕ Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава");
	
	ВидимостьИДоступностьПоляПолныхЛет();
	ЭтоЧастноеЛицо = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));
	Элементы.Пол.Доступность                             = ЭтоЧастноеЛицо;
	Элементы.ДатаРождения.Доступность                    = ЭтоЧастноеЛицо;
	Элементы.ГруппаЮрФизЛицоДанныеФизЛица.Видимость 	 = ЭтоЧастноеЛицо;
	Элементы.ВариантОтправкиЭлектронногоЧека.Доступность = ЭтоЧастноеЛицо;
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	CRM_Потенциал = CRM_ПолучитьПотенциал();
	
	CRM_Потенциалы.Отбор.Клиент.ВидСравнения  = ВидСравнения;
	CRM_Потенциалы.Отбор.Клиент.Использование = Истина;
	CRM_Потенциалы.Отбор.Клиент.Значение      = Объект.Ссылка;
	НаборПотенциалов = РегистрыСведений.CRM_Потенциалы.СоздатьНаборЗаписей();
	НаборПотенциалов.Отбор.Клиент.ВидСравнения  = ВидСравнения.Равно;
	НаборПотенциалов.Отбор.Клиент.Использование = Истина;
	НаборПотенциалов.Отбор.Клиент.Значение      = Объект.Ссылка;
	НаборПотенциалов.Прочитать();
	CRM_Потенциалы.Загрузить(НаборПотенциалов.Выгрузить());
	Для Каждого ТекЗапись Из CRM_Потенциалы Цикл 
		ТекЗапись.Валюта = ВалютаУпр;
		ТекЗапись.ПериодРасчета = Объект.ОсновнойМенеджер.Подразделение.CRM_ПериодРасчетаПотенциала;
	КонецЦикла;
	
	Если Элементы.тПотенциал.Видимость Тогда
		Период = Объект.ОсновнойМенеджер.Подразделение.CRM_ПериодРасчетаПотенциала; 
		Элементы.тПотенциал.Заголовок = "Потенциал: " + CRM_Потенциал + " " + ВалютаУпр + ?(ЗначениеЗаполнено(Период), " (" + Период + ")", "");
	КонецЕсли;
	
	// Устанавливаем отбор по подразделению для тегов
	// подразделение из текущего пользователя.
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ТекущийПользователь.Подразделение);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	// +Софтфон
	Если НЕ(Параметры.ЗначенияЗаполнения = Неопределено) И Параметры.ЗначенияЗаполнения.Свойство("Звонок") Тогда
		сфпЗвонок =  Параметры.ЗначенияЗаполнения.Звонок;
	КонецЕсли;		
	Если ТипЗнч(Параметры.Основание) = Тип("Структура") И Параметры.Основание.Свойство("Интерес") Тогда
		сфпИнтерес = Параметры.Основание.Интерес;
	КонецЕсли;
	// -Софтфон
	
	// Видимость табличной части "Дополнительная информация", (не вешаем на ФО, чтобы не было отличий от БСП)
	Элементы.ГруппаДополнительнаяИнформация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
		РеквизитыПроверкиКонтрагентов.НеИспользоватьКэш = Истина;
		УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
		ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ПриСозданииНаСервереУправлениеВидимостью(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		ЮридическоеФизическоеЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, 
		Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
		Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Объект,
		КонтрагентПартнера,
		ПараметрыПроцедуры);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
		// Команды1СПАРКРиски
		СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.ПодменюСПАРК, 
		Новый Структура("КонтрагентСсылка", КонтрагентПартнера));
		// Конец Команды1СПАРКРиски
		
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	/// Классификаторы
	Элементы.ГруппаКлассификация.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	ПартнерыИКонтрагенты.ЗаполнитьДанныеКонтрагентаПартнера(ЭтотОбъект, ТекущийОбъект.Ссылка);
	
	ПриСозданииИЧтенииНаСервере();
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	//// СтандартныеПодсистемы.КонтактнаяИнформация
	//УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, КонтрагентПартнера, "ГруппаКонтактнаяИнформацияКонтрагента", Ложь);
	//// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Иначе
	
	ПриСозданииИЧтенииНаСервере();
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект); 
	
	//// СтандартныеПодсистемы.КонтактнаяИнформация
	//УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	//// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);	
		
	КонецЕсли;
	
	// +CRM
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	Если Не Объект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
		ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		ОбновитьЗапретОтгрузки(Объект.Ссылка, ОтгрузкаЗапрещена);
		УстановитьДоступностьЗапретаОтгрузки();
		
	КонецЕсли;
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	КонецЕсли;

	// +CRM

	Если ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		ОбновитьКонтактноеЛицо(Параметр);
		Если Элементы.ГруппаКлиентов.Видимость = Истина Тогда
			Элементы.Клиенты.Обновить();
			Подключаемый_КлиентыПриАктивизацииСтроки();
		КонецЕсли;
		
		Если Элементы.ГруппаКонтактныеЛица.Видимость = Истина Тогда
			Элементы.КонтактныеЛица.Обновить();
			Подключаемый_КонтактныеЛицаПриАктивизацииСтроки();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененУчаствуетВАнкетировании" Тогда
		Объект.CRM_УчаствуетВАнкетировании = Параметр;
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "Создан новый контактный клиент" Тогда
		Если Элементы.ГруппаКлиентов.Видимость = Истина Тогда
			Элементы.Клиенты.Обновить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		И Параметр.Свойство("ВладелецФайла") Тогда
			
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если ВыборИзображения Тогда
			
			Объект.CRM_Фотография = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			
		КонецЕсли;
		
	//ИначеЕсли ИмяСобытия = "Изменение КПП" Тогда 
	//	Если ЭтотОбъект.УникальныйИдентификатор = Источник Тогда 
	//		КПП = Параметр;
	//	КонецЕсли;
		
	КонецЕсли;

	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		ИЛИ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Не CRM_ИспользоватьПартнеровКакКонтрагентов Тогда

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	КонецЕсли;

	// +CRM

	Если ТекущийОбъект.Ссылка.Пустая() ИЛИ (НЕ ТекущийОбъект.Ссылка.ОсновнойМенеджер = ТекущийОбъект.ОсновнойМенеджер) Тогда
		КорректироватьНапоминание = Истина;
	КонецЕсли;
	Если НЕ (Объект.Ссылка.CRM_ОтписалсяОтEmailРассылок = Объект.CRM_ОтписалсяОтEmailРассылок) Тогда
		СпособОтправкиРассылок = Константы.CRM_СпособОтправкиРассылок.Получить();
		Если СпособОтправкиРассылок = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
			CRM_ИнтеграцияСUniSenderКлиентСервер.ПодписатьПолучателяНаРассылки(Объект, НЕ Объект.CRM_ОтписалсяОтEmailРассылок, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	ЗаписатьКонтрагентаПартнера();
	УправлениеДоступностью();
	УстановитьЗаголовок();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПараметрыЗаписиСПАРКРиски = Новый Структура("КонтрагентСсылка", КонтрагентПартнера);
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписиСПАРКРиски);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Иначе

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

	КонецЕсли;

	// +CRM
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	Если КорректироватьНапоминание Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		               |ГДЕ
		               |	КонтактныеЛицаПартнеров.Владелец = &Владелец";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			CRM_ОповещенияСервер.CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях(Выборка.Ссылка);
		КонецЦикла;
		КорректироватьНапоминание = Ложь;
	КонецЕсли;
	
	КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	// -CRM

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		КодПоОКПО = "";
	КонецЕсли;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		ИНН = "";
		КодПоОКПО = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ИНН) Или ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		КПП = "";
	КонецЕсли;
	
	КонецЕсли;

	// +CRM
	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ВыполнятьПоискДублейПриЗаписиПартнера() Тогда 
		СтруктураОбъекта = Новый Структура;
		СтруктураПоиска = СоздатьСтруктуруПоиска(СтруктураОбъекта);
		//СписокКонтактов = ЗаполнитьТаблицуКонтактов();
		
		Если ЕстьДублиПартнеров(СтруктураОбъекта, СтруктураПоиска, , Истина) Тогда 
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
			ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы,,,,, ОписаниеОповещения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		Объект.ДатаРегистрации = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	КонецЕсли;
	
	CRM_ЗаписатьВсеТипыОтношений();
	
	Если НЕ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		Объект.CRM_ВидыДеятельности.Очистить();
	КонецЕсли;	
	// -CRM	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
					Попытка 
						ВладелецФормы.ТекущаяСтрока = РезультатЗакрытия.Объект; 
					Исключение
						ФормаСписка = ПолучитьФорму("Справочник.Партнеры.ФормаСписка");
						ФормаСписка.Открыть();
						ФормаСписка.ТекущийЭлемент.ТекущаяСтрока = РезультатЗакрытия.Объект;
					КонецПопытки;
					Модифицированность = Ложь;
					Закрыть();
					Возврат;
				КонецЕсли;	
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	Записать(Новый Структура("ЗаписыватьБезПроверки", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи, "Партнеры");
	Оповестить("Запись_Партнеры", Объект.Ссылка);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	ОповеститьОбИзменении(КонтрагентПартнера);
	
	Иначе

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	КонецЕсли;

	// +CRM
	
	Оповестить("ЗаписьПартнера", Объект.Ссылка, Неопределено);
	
	Если ЭтоНовыйПартнер Тогда
		Если СоздаемИзВходящегоПисьма Тогда
			Оповестить("Создан новый партнер из письма", Объект.Ссылка);
		Иначе
			Оповестить("Создан новый партнер", Объект.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
		Клиенты.Параметры.УстановитьЗначениеПараметра("ФизЛицо",Объект.Ссылка);
		Если ЗначениеЗаполнено(сфпЗвонок) Тогда		
			Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, Объект.Ссылка));
		КонецЕсли;
		Если ЗначениеЗаполнено(сфпИнтерес) Тогда
			Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, Объект.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНовыйПартнер = Ложь;
	
	СтруктураПараметров = Новый Структура("CRM_ФизЛицо", Объект.Ссылка);
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	// +СофтФон
	// Записываем маршрутизацию в АТС.
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если НЕ ЗначениеЗаполнено(сфпСтарыйПользовательДляПереключения) И НЕ ЗначениеЗаполнено(Объект.сфпПользовательДляПереключенияЗвонков) Тогда	
			Возврат;
		КонецЕсли;	
		СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, сфпСтарыйПользовательДляПереключения);
		ПользовательОбновлен	= сфпСофтФонПроСервер.сфпЗаписатьНовогоПользователя(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков, Истина);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков);
			СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	ПартнерыИКонтрагенты.ПроверитьКорректностьЗаполненияКонтрагента(ЭтаФорма, КонтрагентПартнера, Отказ);
	
	Иначе
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	КонецЕсли; 
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		//ЭтоЮрЛицо = ПартнерыИКонтрагенты.ЭтоЮрЛицо(ЮрФизЛицо);
		//ЭтоНовыйКонтрагент = КонтрагентПартнера.Пустая();
		//
		//Если Не ЭтоНовыйКонтрагент Тогда
		//	ЗначенияРеквизитовВИнформационнойБазе = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтрагентПартнера, Новый Структура("ИНН,КПП,КодПоОКПО"));
		//КонецЕсли;
		//
		//Если НЕ ПустаяСтрока(ИНН) Тогда 
		//	Если (ЭтоНовыйКонтрагент ИЛИ ЗначенияРеквизитовВИнформационнойБазе.ИНН <> ИНН)
		//		И НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН,ЭтоЮрЛицо,ТекстСообщения) Тогда
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		ТекстСообщения,
		//		,
		//		"ИНН",
		//		,
		//		Отказ);
		//	КонецЕсли;
		//Иначе
		//	Если НЕ ПартнерыИКонтрагенты.УпрощенныйВводДоступен() И
		//		(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		НСтр("ru = 'Не указан ИНН'"),
		//		,
		//		"ИНН",
		//		,
		//		Отказ);
		//	КонецЕсли;
		//Конецесли;
		//
		//Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		//	ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		//	
		//	Если НЕ ПустаяСтрока(КПП) 
		//		И (ЭтоНовыйКонтрагент ИЛИ ЗначенияРеквизитовВИнформационнойБазе.КПП <> КПП)
		//		И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения) Тогда
		//		
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		ТекстСообщения,
		//		,
		//		"КПП",
		//		,
		//		Отказ);
		//		
		//	КонецЕсли;
		//	
		//Конецесли;
		//
		//Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо 
		//	ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		//	
		//	Если НЕ ПустаяСтрока(КодПоОКПО) 
		//		И (ЭтоНовыйКонтрагент ИЛИ ЗначенияРеквизитовВИнформационнойБазе.КодПоОКПО <> КодПоОКПО)
		//		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(КодПоОКПО,ЭтоЮрЛицо,ТекстСообщения) Тогда
		//		
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		ТекстСообщения,
		//		,
		//		"КодПоОкпо",
		//		,
		//		Отказ);
		//		
		//	КонецЕсли;
		//		
		//КонецЕсли;
	Иначе
		Если НЕ ПроверяемыеРеквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ЮрФизЛицо"));
		КонецЕсли;
		Если НЕ ПроверяемыеРеквизиты.Найти("ВидКонтрагента") = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВидКонтрагента"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Иначе
		
	Элементы.ФормаПроверитьКонтрагента.Видимость = Ложь;	
		
	КонецЕсли;
	
	// +CRM
	Если Объект.CRM_УчаствуетВАнкетировании Тогда
		
		Попытка
	  		Элементы.СправочникВнешниеПользователиВнешнийДоступ.Картинка = БиблиотекаКартинок.Пользователь;
			Элементы.СправочникВнешниеПользователиВнешнийДоступ.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Исключение	
		КонецПопытки;	
		
	КонецЕсли;
		
	Попытка
		Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
			Если ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Вид = СпозиционироватьсяНаРеквизите Тогда
						ТекущийЭлемент = Элементы[СтрокаТаблицы.ИмяРеквизита];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Свойство = СпозиционироватьсяНаРеквизите Тогда
						ТекущийЭлемент = Элементы[СтрокаТаблицы.ИмяРеквизитаЗначение];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("ПланВидовХарактеристикСсылка.CRM_ДополнительнаяИнформация") Тогда
				ТекущийЭлемент = Элементы.ДополнительнаяИнформация;
				НайденныеСтроки = Объект.CRM_ДополнительнаяИнформация.НайтиСтроки(Новый Структура("Свойство", СпозиционироватьсяНаРеквизите));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Элементы.ДополнительнаяИнформация.ТекущаяСтрока = Объект.CRM_ДополнительнаяИнформация.Индекс(НайденныеСтроки[0]);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("Строка") Тогда
				ТекущийЭлемент = Элементы[СпозиционироватьсяНаРеквизите];
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	КонецЕсли;
	
	//CRM_ВидПартнераПриИзменении(Неопределено);
	ЭтоЧастноеЛицо = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));
	Если ЭтоЧастноеЛицо Тогда
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаНаименованиеПолноеЧастноеЛицо;
		
		Элементы.Наименование.КнопкаВыпадающегоСписка = Истина;
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	Иначе
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаНаименованиеПолноеКомпания;
		
		Элементы.Наименование.КнопкаВыпадающегоСписка = Ложь;
		Элементы.Наименование.СписокВыбора.Очистить();
	КонецЕсли;
	
	// Дублирование из ПриСозданиинаСервере(), т.к. заполнение происходит иногда после получения формы.
	CRM_ЗаполнитьВсеТипыОтношений();
	CRM_ЗаполнитьТипыОтношений();
	// -CRM
// +CRM Модуль
	ФормаСоздатьНаОсновании = Элементы.Найти("ФормаСоздатьНаОсновании");
	Если ФормаСоздатьНаОсновании <> Неопределено Тогда
		ФормаСоздатьНаОсновании.Видимость = Ложь;
	КонецЕсли;
// -CRM Модуль
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительнаяИнформация"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
	// +CRM Модуль не делаем отложенную инициализацию
	
	//// СтандартныеПодсистемы.КонтактнаяИнформация
	//Если ТекущаяСтраница.Имя = ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ГруппаДляРазмещения
	//	И Не ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
	//	
	//	КонтактнаяИнформацияПриСменеСтраницы();
	//	
	//КонецЕсли;
	//// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	// -CRM Модуль	
	
	КонецЕсли; 
	
	Если ТекущаяСтраница.Имя = "ГруппаСтраницаКонтактнаяИнформация" И
		Не ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		КонтактнаяИнформацияПриСменеСтраницы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// +CRM	
	//ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаНаименованиеПриИзменении(ЭтаФорма,Элемент);	
	
	РедактированиеПредставления = Истина;
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		Если Не РедактированиеФИО И Не ПредставлениеВыбраноИзСписка Тогда
			
			ФИО = Объект.Наименование;
			ФИО = СтрЗаменить(ФИО,",","");
			ФИО = СтрЗаменить(ФИО,".","");		
			ФИО = СтрЗаменить(ФИО,";","");
			
			Если ПустаяСтрока(Объект.CRM_Фамилия) Или Объект.Ссылка.Пустая() Тогда
				
				ПервоеСлово = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				
				Объект.CRM_Фамилия = ПервоеСлово;			
				
				Объект.CRM_Имя = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
					Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
				КонецЕсли;
				
				Объект.CRM_Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьПолноеНаименование();
	
	// -CRM
	
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура ЗаполнитьПолноеНаименование()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПравоваяФормаКлиентаПоУмолчанию");
			Объект.НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Объект.Наименование),СокрЛП(ПравоваяФорма)+" """+СокрЛП(Объект.Наименование)+"""");
		КонецЕсли;
	Иначе
		Объект.НаименованиеПолное = СокрЛП(Объект.Наименование);			
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает информацию о первичном интересе.
Функция ПолучитьПервичныйИнтерес(Партнер)
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса,
		|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса,
		|	ИсточникиПервичногоИнтересаСрезПоследних.Партнер
		|ИЗ
		|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних(&Период, Партнер = &Партнер) КАК ИсточникиПервичногоИнтересаСрезПоследних
		|УПОРЯДОЧИТЬ ПО
		|	ИсточникиПервичногоИнтересаСрезПоследних.Период УБЫВ";
		
		Запрос.УстановитьПараметр("Партнер"	,Партнер);
		Запрос.УстановитьПараметр("Период"	,CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("КаналПервичногоИнтереса,ИсточникПервичногоИнтереса,Партнер",
	ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка(),
	Неопределено,
	Справочники.Партнеры.ПустаяСсылка());
	
КонецФункции

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Интерес = ПолучитьПервичныйИнтерес(Объект.Ссылка);
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 
// -CRM

&НаКлиенте
Процедура ФлагПризнакПартнераПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаФлагПризнакПартнераПриИзменении(ЭтаФорма, Элемент);
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	УстановитьДоступностьЗапретаОтгрузки();
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	ОбновитьДоступностьСтавокДляКрыма(ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаКомментарииНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаБизнесРегионПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Если ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		ОбособленноеПодразделение = Истина;
		
		Если ГоловнойКонтрагент = КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо." + ВидКонтрагента);
		ОбособленноеПодразделение = Ложь;
		
		Если ГоловнойКонтрагент <> КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СтароеЗначениеЮрФизЛицо = Объект.ЮрФизЛицо;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Иначе
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
	
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УправлениеДоступностью();
	ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	НастроитьВидимостьПоложениеГрупп();
	
	// +CRM Модуль
	Если СтароеЗначениеЮрФизЛицо <> Объект.ЮрФизЛицо Тогда
		
		CRM_ВидПартнераПриИзменении(Элемент);
		
	КонецЕсли;
	// -CRM Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ЭтоЮрЛицо = ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо);
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ИНН) Тогда
		
		ИННЗаполненКорректно = Ложь;
		
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"ИНН",,);
			
	КонецЕсли;

	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		РезультатЗапуска = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеДанныеПартнераПоИННЗапустить(ИНН,
		                                                                                               ЮрФизЛицо,
		                                                                                               УникальныйИдентификатор,
		                                                                                               ФоновоеЗаданиеИдентификатор);
		
		ФоновоеЗаданиеИдентификатор  = РезультатЗапуска.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатЗапуска.АдресХранилища;
		Если РезультатЗапуска.ЗаданиеЗапущено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПараметрыОбработчика.ТекущийИнтервал = 2;
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатЗапуска.РеквизитыКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура ИННИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	 УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ОбработатьИзмененияГоловногоКонтрагента();
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(Объект.Наименование, Объект.НаименованиеПолное);
	УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(ЭтотОбъект);
	
	Иначе
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = Объект.НаименованиеПолное;
	КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеКомпанияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КППОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(Текст)
		И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Текст, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"КПП",,);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(Текст) 
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"КодПоОКПО",,);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Назначение",ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки"));
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ШаблонЭтикетки = Неопределено;

	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",ПараметрыФормы,,,,, Новый ОписаниеОповещения("ШаблонЭтикеткиНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ШаблонЭтикетки = Результат;
    Если ШаблонЭтикетки=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Объект.ШаблонЭтикетки =  ШаблонЭтикетки;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииКППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияКПП" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущийКПП", КПП);
		ПараметрыФормы.Вставить("ИсторияКПП", ИсторияКПП);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияКПППослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииНаименованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияНаименований" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущееНаименованиеПолное", Объект.НаименованиеПолное);
		ПараметрыФормы.Вставить("ИсторияНаименований", ИсторияНаименований);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыФормы.Вставить("ЮрФизлицо", ЮрФизЛицо);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияНаименованийПослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагента(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Контрагент", КонтрагентПартнера);
	ПараметрыЗаполнения.Вставить("ИНН",        ИНН);
	ПараметрыЗаполнения.Вставить("Партнер",    Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("ИспользоватьПартнеровКакКонтрагентов", Истина);

	Оповещение = Новый ОписаниеОповещения("ЗаполнитьГоловногоКонтрагентаЗавершение", ЭтотОбъект);
	ПартнерыИКонтрагентыКлиент.ЗаполнитьГоловногоКонтрагента(ЭтотОбъект, ПараметрыЗаполнения, Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузки(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к запрету отгрузки возможен только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН,
		                                                                          ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                                                                          ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                       ИНН,
		                       ФоновоеЗаданиеИдентификатор);
		
		ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", Объект.НаименованиеПолное);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента",ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ СамообслуживаниеКлиентСервер.ЭтоИНН(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
	                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
	                       Результат,
	                       ФоновоеЗаданиеИдентификатор);
	
	ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, Истина);
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	ТекущийЭлемент = Элементы.НаименованиеПолноеКомпания;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	// +CRM
	// Расположение реквизитов портрета.
	ВывестиРеквизитыПортрета();
	// -CRM	
КонецПроцедуры

&НаСервере
Процедура ВывестиРеквизитыПортрета()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_РасположениеРеквизитовКлиентов.ИмяРеквизита,
	|	CRM_РасположениеРеквизитовКлиентов.Колонка КАК Колонка,
	|	CRM_РасположениеРеквизитовКлиентов.ПорядокРасположения КАК ПорядокРасположения,
	|	CRM_РасположениеРеквизитовКлиентов.ПредставлениеРеквизита,
	|	CRM_РасположениеРеквизитовКлиентов.ДопРеквизит
	|ИЗ
	|	РегистрСведений.CRM_РасположениеРеквизитовКлиентов КАК CRM_РасположениеРеквизитовКлиентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Колонка,
	|	ПорядокРасположения";
	
	ТаблицаРасположения = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТаблицаРасположения Цикл
		Если Не ЗначениеЗаполнено(Строка.ДопРеквизит) Тогда
			Элемент = Элементы.Найти(Строка.ИмяРеквизита);
			Если Элемент = Неопределено Тогда
				Элемент = Элементы.Добавить(Строка.ИмяРеквизита, Тип("ПолеФормы"), Элементы["CRM_ПортретКлиента"+Строка.Колонка+"Колонка"]);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = "Объект."+Строка.ИмяРеквизита;
				Элемент.РастягиватьПоГоризонтали = Истина;
				Элемент.АвтоМаксимальнаяШирина = Истина;
			Иначе
				Элементы.Переместить(Элемент, Элементы["CRM_ПортретКлиента"+Строка.Колонка+"Колонка"]);
			КонецЕсли;
		Иначе
			Элемент = Элементы.Найти(Строка.ИмяРеквизита);
			Если Элемент = Неопределено Тогда
				// Элемент = Элементы.Добавить(Строка.ИмяРеквизита, Тип("ПолеФормы"), Элементы["CRM_ПортретКлиента"+Строка.Колонка+"Колонка"]);
			Иначе	
				Элементы.Переместить(Элемент, Элементы["CRM_ПортретКлиента"+Строка.Колонка+"Колонка"]);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИНН.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННФизЛицо.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЮрФизЛицо");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
		СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ФизЛицо);
		СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИНН");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		// +CRM Модуль
		Элементы.ГруппаЮрФизЛицоВидКонтрагента.ТекущаяСтраница = Элементы.ГруппаВидКонтрагента;
		Элементы.ПустаяДекорацияКонтактнаяИнформация.Видимость = Ложь;
		Элементы.ГруппаРодитель.Видимость = Ложь;
		// -CRM Модуль	
		
	Иначе
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппаДоступа.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуютсяОграниченияДоступаНаУровнеЗаписей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаРождения.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Пол.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЮрФизЛицо");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
		// +CRM Модуль
		Элементы.ГруппаЮрФизЛицоВидКонтрагента.ТекущаяСтраница = Элементы.ГруппаЮрФизЛицо;
		
		Если Не Элементы.Найти("ФормаСкопировать") = Неопределено Тогда
			
			Элементы.ФормаСкопировать.Видимость = Ложь;	
			
		КонецЕсли; 
		
		Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.Видимость = Ложь;
		Элементы.ГруппаРезультатПроверкиКонтрагентов.Видимость = Ложь;
		Элементы.ГруппаЮрФизЛицоДанныеФизЛица.Видимость = Ложь;
		Элементы.ГруппаГоловнойКонтрагент.Видимость = Ложь;
		Элементы.ГруппаПраваяКолонка.Видимость = Ложь;
		Элементы.ГруппаПредупреждениеГоловнойКонтрагент.Видимость = Ложь;
		Элементы.НДСпоСтавкам4и2.Видимость = Ложь;
		Элементы.ЗаполнитьПоНаименованиюПоДаннымЕдиныхГосРеестров.Видимость = Ложь;
		Элементы.НаименованиеПолноеКомпания.Заголовок = НСтр("ru = 'Публичное наименование'");;
		Элементы.ПереходКИсторииНаименования.Видимость = Ложь;
		Элементы.ПереходКИсторииКПП.Видимость = Ложь;
		// -CRM Модуль
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УправлениеДоступностью()
	
	ПартнерыИКонтрагенты.УправлениеЭлементамиЮридическихРеквизитов(
		ЭтотОбъект, ЮрФизЛицо, ОбособленноеПодразделение, ИНН);
	
	СамообслуживаниеКлиентСервер.УстановитьВидимостьПредупрежденийГоловногоКонтрагента(
		ЭтотОбъект, ОбособленноеПодразделение, ГоловнойКонтрагент, ИНН);
	
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(ЭтотОбъект);
	
	СамообслуживаниеКлиентСервер.УправлениеСтраницамиЮрФизЛицоПриИзменении(ЭтотОбъект, ЮрФизЛицо);
	
	ОбновитьДоступностьСтавокДляКрыма(ЭтотОбъект);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		ПартнерыИКонтрагенты.ОбновитьСтрокиИстории(ИсторияКПП, ИсторияНаименований, ПереходКИсторииКПП, ПереходКИсторииНаименования);
		
		Элементы.КПП.ТолькоПросмотр                           = ИсторияКПП.Количество() > 1;
		Элементы.НаименованиеПолноеКомпания.ТолькоПросмотр    = ИсторияНаименований.Количество() > 1;
		Элементы.НаименованиеПолноеЧастноеЛицо.ТолькоПросмотр = ИсторияНаименований.Количество() > 1;
		
	КонецЕсли;	
		
	//Страна регистрация видна только в том случае, когда контрагент не является резидентом РФ.
	//В противном случае - и для физ лиц и для ИП и для юр лиц страна регистрации всегда Россия.
	Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.ТекущаяСтраница = 
		?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент,
		Элементы.ГруппаСтраницаИностраннойРегистрации, Элементы.ГруппаСтраницаРоссийскогоКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрагентаПартнера()
	
	СоздатьКонтрагента = КонтрагентПартнера.Пустая();
	
	Если СоздатьКонтрагента Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе
		КонтрагентОбъект = КонтрагентПартнера.ПолучитьОбъект();
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
	
	КонтрагентОбъект.Наименование = Объект.Наименование;
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо И Не ПустаяСтрока(Объект.CRM_Имя + Объект.CRM_Фамилия + Объект.CRM_Отчество) Тогда
		КонтрагентОбъект.НаименованиеПолное = СокрЛП(Объект.CRM_Фамилия + " " + Объект.CRM_Имя + " " + Объект.CRM_Отчество);
	Иначе
		КонтрагентОбъект.НаименованиеПолное = Объект.НаименованиеПолное;
	КонецЕсли;		
	КонтрагентОбъект.ИНН = ИНН;
	КонтрагентОбъект.Партнер = Объект.Ссылка;
	КонтрагентОбъект.ЮрФизЛицо = ЮрФизЛицо;
	КонтрагентОбъект.НДСпоСтавкам4и2 = НДСпоСтавкам4и2;
	КонтрагентОбъект.КодПоОКПО = КодПоОКПО;
	КонтрагентОбъект.КПП = КПП;
	КонтрагентОбъект.ОбособленноеПодразделение = ОбособленноеПодразделение;
	КонтрагентОбъект.СтранаРегистрации = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, СтранаРегистрации, Справочники.СтраныМира.Россия);
	КонтрагентОбъект.РегистрационныйНомер = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, РегистрационныйНомер, "");
	
	КонтрагентОбъект.ИсторияКПП.Загрузить(ИсторияКПП.Выгрузить());
	КонтрагентОбъект.ИсторияНаименований.Загрузить(ИсторияНаименований.Выгрузить());
	
	Если Не ЗначениеЗаполнено(ГоловнойКонтрагент) И Не ОбособленноеПодразделение Тогда
		
		Если СоздатьКонтрагента Тогда
			НоваяСсылка = Справочники.Контрагенты.ПолучитьСсылку();
			КонтрагентОбъект.УстановитьСсылкуНового(НоваяСсылка);
			ГоловнойКонтрагент = КонтрагентОбъект.ПолучитьСсылкуНового();
		Иначе
			ГоловнойКонтрагент = КонтрагентПартнера;
		КонецЕсли;
		
	КонецЕсли;
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	ПартнерыИКонтрагенты.ЗаполнитьКонтактнуюИнформациюКонтрагентаПартнера(КонтрагентОбъект, ЭтотОбъект, Объект.КонтактнаяИнформация, Ложь);
	
	Если Не (СоздатьКонтрагента Или ОбособленноеПодразделение) И ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ПартнерыИКонтрагенты.ИзменитьИННПодчиненныхКонтрагентов(КонтрагентПартнера, ИНН);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, КонтрагентОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонтрагентОбъект.Записать();
	
	КонтрагентПартнера = КонтрагентОбъект.Ссылка;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииИЧтенииНаСервере()
	
	НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры);
	
	Если ОбособленноеПодразделение Тогда
		ВидКонтрагента = "ОбособленноеПодразделение";
	ИначеЕсли ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ВидКонтрагента = ОбщегоНазначения.ИмяЗначенияПеречисления(ЮрФизЛицо);
	КонецЕсли;
	
	УправлениеДоступностью();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЗапретаОтгрузки()
	
	Если ИспользоватьЗапретОтгрузки И Объект.Клиент Тогда
		Если ОтгрузкаЗапрещена Тогда
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
		Иначе
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьЗапретОтгрузки(Партнер, ОтгрузкаЗапрещена)
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()

	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = НСтр("ru = 'Контрагент (создание)'");
		
	Иначе
		
		Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Контрагент)'"), Объект.Наименование);
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Партнер)'"), Объект.Наименование);
		КонецЕсли; 	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьСтавокДляКрыма(Форма)
	
	ПоставщикИРезидент = Форма.Объект.Поставщик
		И (Форма.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"))
		И (Форма.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо"));
	
	Форма.Элементы.НДСпоСтавкам4и2.Доступность = ПоставщикИРезидент;
	Если Не ПоставщикИРезидент Тогда
		Форма.НДСпоСтавкам4и2 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияГоловногоКонтрагента()
	
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент, "ИНН");
		Элементы.ЗаполнитьПоИНН.Доступность = Не ПустаяСтрока(ИНН);
	КонецЕсли;
	
	СамообслуживаниеКлиентСервер.УстановитьВидимостьПредупрежденийГоловногоКонтрагента(
		ЭтотОбъект, ОбособленноеПодразделение, ГоловнойКонтрагент, ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ГоловнойКонтрагент = ВыбранноеЗначение;
		Модифицированность = Истина;
		ОбработатьИзмененияГоловногоКонтрагента();
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, ЗаполнятьИНН = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		ПартнерыИКонтрагентыКлиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(РеквизитыКонтрагента.ОписаниеОшибки);
	Иначе
		
		РезультатСравнения = ПартнерыИКонтрагентыКлиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента,
		                                                                                                         ДанныеОбъектаДляСравнения(),
		                                                                                                         ЗаполнятьИНН);
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)
	
	Объект.Наименование = РеквизитыКонтрагента.Наименование;
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Если КПП <> РеквизитыКонтрагента.КПП Тогда
			КПП = РеквизитыКонтрагента.КПП;
			ИсторияКПП.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ИНН") Тогда
		ИНН = РеквизитыКонтрагента.ИНН;
	КонецЕсли;
	
	Если Объект.НаименованиеПолное <> РеквизитыКонтрагента.НаименованиеСокращенное Тогда
		Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		ИсторияНаименований.Очистить();
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		                                                                РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено  Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
		                                                                РеквизитыКонтрагента.ЮридическийАдрес);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатВыполнения.РеквизитыКонтрагента);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = ПартнерыИКонтрагентыКлиент.ИнициироватьСтруктураДанныхДляСравнения();
	ДанныеДляСравнения.Наименование            = Объект.Наименование;
	ДанныеДляСравнения.НаименованиеСокращенное = Объект.НаименованиеПолное;
	ДанныеДляСравнения.ИНН                     = ИНН;
	ДанныеДляСравнения.КПП                     = КПП;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции

&НаКлиенте
Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно)

	Возврат СамообслуживаниеКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               НастройкиПодключенияКСервисуИППЗаданы,
	               ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
	               ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"),
	               ОбособленноеПодразделение); 

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма, КнопкаНедоступнаБезусловно = Ложь)

	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма,
	                                                                       Форма.ЮрФизЛицо,
	                                                                       Форма.ИНН,
	                                                                       Форма.ОбособленноеПодразделение,
	                                                                       Форма.НастройкиПодключенияКСервисуИППЗаданы,
	                                                                       КнопкаНедоступнаБезусловно);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(Форма)
	
	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(Форма,
	                                                                                    Форма.ЮрФизЛицо,
	                                                                                    Форма.Объект.НаименованиеПолное,
	                                                                                    Форма.ОбособленноеПодразделение,
	                                                                                    Форма.НастройкиПодключенияКСервисуИППЗаданы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРеквизитыПроверкиКонтрагента(Форма)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Форма.РеквизитыПроверкиКонтрагентов.ЮрФизЛицо                 = Форма.ЮрФизЛицо;
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо        = (Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") 
		                                                            Или  Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент  = (Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	ОбновитьОтображениеИндексыСПАРК();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		ИНН, // Искать по ИНН
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект, 
					Новый Структура("КонтрагентСсылка", КонтрагентПартнера));
КонецПроцедуры
// Конец Команды1СПАРКРиски

#Область ПериодическиеРеквизиты

&НаКлиенте
Процедура ИсторияКПППослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ИсторияКПП") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияКПП = Результат.ИсторияКПП;
		НоваяИсторияКПП.Сортировать("Период");
	
		ИсторияКПП.Очистить();
		Если НоваяИсторияКПП.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияКПП Цикл
				ЗаписьИстории = ИсторияКПП.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееКПП = НоваяИсторияКПП[НоваяИсторияКПП.Количество()-1].КПП;
		
		Если НовоеТекущееКПП <> КПП Тогда
			
			КПП = НовоеТекущееКПП;
			
			Если НЕ ПустаяСтрока(КПП)
				И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения) Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,"КПП",,);
		
			КонецЕсли;
				
			ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
			УправлениеДоступностью();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованийПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ИсторияНаименований") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияНаименований = Результат.ИсторияНаименований;
		НоваяИсторияНаименований.Сортировать("Период");
	
		ИсторияНаименований.Очистить();
		Если НоваяИсторияНаименований.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияНаименований Цикл
				ЗаписьИстории = ИсторияНаименований.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееНаименование = НоваяИсторияНаименований[НоваяИсторияНаименований.Количество()-1].НаименованиеПолное;
		
		Если НовоеТекущееНаименование <> Объект.НаименованиеПолное Тогда
			
			Объект.НаименованиеПолное = НовоеТекущееНаименование;
			
		КонецЕсли;
		
		УправлениеДоступностью();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаздельноеВедениеПартнеровИКонтрагентов

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриСменеСтраницы()
	
	// +CRM_Модуль
	//УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	Если ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		И НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	КонецЕсли;
	УстановитьВидимостьРеквизитовКИ();
	// -CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура КомпанияЧастноеЛицоПриИзменении(Элемент)
	
	НастроитьВидимостьПоложениеГрупп();
	
	// +CRM Модуль
	CRM_ВидПартнераПриИзменении(Элемент);
	// -CRM Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура КомпанияЧастноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФукнционалCRM

&НаКлиенте
Процедура CRM_ВидПартнераПриИзменении(Элемент)
	
	ЭтоЧастноеЛицо = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));
	
	Элементы.Пол.Доступность                             = ЭтоЧастноеЛицо;
	Элементы.ДатаРождения.Доступность                    = ЭтоЧастноеЛицо;
	Элементы.ГруппаЮрФизЛицоДанныеФизЛица.Видимость 	 = ЭтоЧастноеЛицо;
	
	Элементы.ВариантОтправкиЭлектронногоЧека.Доступность = ЭтоЧастноеЛицо;
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	Если НЕ (Элемент = Неопределено) Тогда
		ИзменениеВидаКИТелефонаПриСменеВидаПартнера();
	КонецЕсли;		
	УстановитьВидимостьРеквизитовКИ();
	УстановитьВидимостьРеквизитов();

	Если ЭтоЧастноеЛицо Тогда
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаНаименованиеПолноеЧастноеЛицо;
		
		Элементы.Наименование.КнопкаВыпадающегоСписка = Истина;
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	Иначе
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаНаименованиеПолноеКомпания;
		
		Элементы.Наименование.КнопкаВыпадающегоСписка = Ложь;
		Элементы.Наименование.СписокВыбора.Очистить();
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда // Отработал обработчик, а не програмный вызов.
			Объект.ДатаРождения					= Дата("00010101");
			Объект.CRM_НапоминатьОДнеРождения	= Ложь;
			Объект.Пол							= ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		Если ИсточникВыбора.ИмяФормы = Нстр("ru = 'ОбщаяФорма.сфпПользователиДляПереключения'") И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Объект.сфпПользовательДляПереключенияЗвонков = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВидаКИТелефонаПриСменеВидаПартнера()
		
	// Задача при смене физ. лица на юр. лицо менять вид КИ "Мобильный телефон частного лица" на "Рабочий телефон".
	Если Объект.ЮрФизЛицо =  ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		СтруктураОтбора			=  Новый Структура("Вид, CRM_ОсновнойДляСвязи", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"), Истина);
		ОпределятьОсновнуюКИ	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() = 0);
		СтруктураОтбора			= Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица"));
		ОтборПоВидуКИ			= ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора);
		ЭтоОсновной 			= Ложь;
		Для Каждого СтрокаКИ Из ОтборПоВидуКИ Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				Продолжить;
			КонецЕсли;
			Если ОпределятьОсновнуюКИ Тогда
				ЭтоОсновной			 = Истина;
				ОпределятьОсновнуюКИ = Ложь;
			КонецЕсли;
			СтруктураПоиска = Новый Структура("Вид, Представление", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"), СтрокаКИ.Представление);
			Если (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска).Количество() = 0) Тогда
				СтрокаКИ.Вид		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера");
				СтрокаКИ.Родитель 	= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПартнеры");
				Если ЭтоОсновной Тогда
					СтрокаКИ.CRM_ОсновнойДляСвязи = Истина;
					CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элементы["ОсновнойДляСвязи"+СтрокаКИ.ИмяРеквизита]);
					ЭтоОсновной = Ложь;
				Иначе
					СтрокаКИ.CRM_ОсновнойДляСвязи = ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	Если ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		И НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры, Ложь);
	флагВыводаГиперСсылки	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки ИЛИ (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить",Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки ИЛИ (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	КонецЕсли;
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить",Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки ИЛИ (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	КонецЕсли;
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДопРеквизита.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Выводить = Ложь;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>");
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;	
		
		Если СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания Тогда
			Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо Тогда
			Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры Тогда
			Выводить = Истина;
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты Тогда	
			Выводить = Истина;
		КонецЕсли;
			
// +CRM
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить И ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ ((РедактироватьДР И НЕ СкрыватьПолеКИ) ИЛИ флаг_1))
										И ?(Тип(Элементы[СтрокаДобавленногоРеквизита.Значение])=Тип("КнопкаФормы"), Элементы[СтрокаДобавленногоРеквизита.Значение].Заголовок<>"", Истина));
			КонецЕсли;
		КонецЦИкла;
// -CRM
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки;
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость реквизитов формы.
//
Процедура УстановитьВидимостьРеквизитов()
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.Видимость 		= Ложь;
		Элементы.CRM_Имя.Видимость 					= Истина;
		Элементы.CRM_Отчество.Видимость 			= Истина;
		Элементы.CRM_Фамилия.Видимость 				= Истина;
	Иначе
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.Видимость 		= Истина;
		Элементы.CRM_Имя.Видимость 					= Ложь;
		Элементы.CRM_Отчество.Видимость 			= Ложь;
		Элементы.CRM_Фамилия.Видимость 				= Ложь;
	КонецЕсли;
	// +СофтФон	
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Истина;
		Если сфпСофтФонПроСервер.сфпРолиДоступны("сфпУправлениеМаршрутизацией, ПолныеПрава") Тогда
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Истина;
		Иначе
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Ложь;
	КонецЕсли;
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура тЗадолженностьНажатие(Элемент)
	//ПараметрыФормы = Новый Структура("Отбор,КлючВарианта, СформироватьПриОткрытии",Новый Структура("Клиент", Объект.Ссылка),"Ведомость", Истина);
	//ОткрытьФорму("Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма", ПараметрыФормы);
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	Если ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
		ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
		ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
		ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
		ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
	Иначе
		ПараметрыФормы.Отбор = Новый Структура("Партнер", Объект.Ссылка);
		ПараметрыФормы.КлючНазначенияИспользования = "Партнер";
	КонецЕсли;
	ПараметрыФормы.КлючВарианта = "РасчетыСПартнерами";
	ОткрытьФорму("Отчет.РасчетыСПартнерами.Форма",ПараметрыФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПодчиненныеПартнеры(Ссылка)
	Возврат ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Ссылка);
КонецФункции

Функция ЕстьДублиПартнеров(Знач Партнер, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие)
	
	// +CRM Модуль
	//Выборка = CRM_КлиентыСервер.НайтиДубли(Партнер, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	Выборка = CRM_КлиентыСервер.НайтиДублиПартнеров(Партнер, СтруктураПоиска);
	// -CRM Модуль
	Если Выборка <> Неопределено И Выборка.Количество()>0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнятьПоискДублейПриЗаписиПартнера()
	
	Возврат Константы.CRM_ВыполнятьПоискДублейПриЗаписиПартнера.Получить();
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуКонтактов()
	
	СтруктураКонтактов = Новый Структура;	
	
	Для Каждого Стр Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Представление = ЭтотОбъект[Стр.ИмяРеквизита];
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураКонтактов.Вставить("АдресЭлектроннойПочты",Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураКонтактов.Вставить("Адрес",Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			СтруктураКонтактов.Вставить("Телефон",Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКонтактов;
КонецФункции

&НаСервере
Функция СоздатьСтруктуруПоиска(СтруктураОбъекта)
	
	СтруктураПоиска = Новый Структура;
	
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если РеквизитыПоиска <> Неопределено Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = Найти(Значение,";");
					
					Ключ = Сред(Значение,1,ТочкаСЗапятой-1);
					СтруктураПоиска.Вставить(Ключ, Сред(Значение,ТочкаСЗапятой+1));
					Если Ключ = "CRM_ИНН" Тогда
						СтруктураОбъекта.Вставить("CRM_ИНН", ИНН);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// +CRM Модуль
	Для Каждого Стр Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Представление = Стр.Представление;
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураПоиска.Вставить("АдресЭлектроннойПочты", "ПОДОБНО");
			СтруктураОбъекта.Вставить("АдресЭлектроннойПочты", Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураПоиска.Вставить("Адрес", "ПОДОБНО");
			СтруктураОбъекта.Вставить("Адрес", Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			СтруктураПоиска.Вставить("Телефон", "ПОДОБНО");
			СтруктураОбъекта.Вставить("Телефон", Представление);
		КонецЕсли;
		
	КонецЦикла;
	// -CRM Модуль
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаСервере
Функция CRM_ПолучитьПотенциал()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекПодразделение = ТекПользователь.Подразделение;
	Если ЗначениеЗаполнено(ТекПодразделение) Тогда
		Возврат CRM_РасчетПотенциалаСервер.ПолучитьПотенциалКлиента(Объект.Ссылка, ТекПодразделение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтобразитьЗадолженность()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Элементы.тЗадолженность.Видимость Тогда
		
		Долг = 0;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ВалютаУчета = Константы.ВалютаУправленческогоУчета.Получить();
			Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
				ЭтаФорма.Элементы.тЗадолженность.Видимость = Истина;
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	РасчетыСКлиентамиОстатки.Валюта,
				|	РасчетыСКлиентамиОстатки.СуммаОстаток
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
				|ГДЕ
				|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам В
				|			(ВЫБРАТЬ
				|				АналитикаУчетаПоПартнерам.КлючАналитики
				|			ИЗ
				|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
				|			ГДЕ";
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&Партнер))";
				Иначе
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер = &Партнер)";
				КонецЕсли;
				РасчетыСКлиентами = Запрос.Выполнить().Выгрузить();
				Для Каждого СтрокаРасчетов Из РасчетыСКлиентами Цикл
					Если СтрокаРасчетов.Валюта = ВалютаУчета Тогда
						Долг = Долг + СтрокаРасчетов.СуммаОстаток;		
					Иначе
						СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаРасчетов.Валюта, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчета,  CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						Долг = Долг + РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаРасчетов.СуммаОстаток, СтрокаРасчетов.Валюта, ВалютаУчета,
						СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
						СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭтаФорма.Элементы.тЗадолженность.Видимость = Ложь;
			КонецЕсли;	
			Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
				ЭтаФорма.Элементы.тЗадолженность.Видимость = Истина;
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	РасчетыСПоставщикамиОстатки.Валюта,
				|	РасчетыСПоставщикамиОстатки.СуммаОстаток
				|ИЗ
				|	РегистрНакопления.РасчетыСПоставщиками.Остатки КАК РасчетыСПоставщикамиОстатки
				|ГДЕ
				|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам В
				|			(ВЫБРАТЬ
				|				АналитикаУчетаПоПартнерам.КлючАналитики
				|			ИЗ
				|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
				|			ГДЕ";
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&Партнер))";
				Иначе
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер = &Партнер)";
				КонецЕсли;
				РасчетыСПоставщиками = Запрос.Выполнить().Выгрузить();
				Для Каждого СтрокаРасчетов Из РасчетыСПоставщиками Цикл
					Если СтрокаРасчетов.Валюта = ВалютаУчета Тогда
						Долг = Долг + СтрокаРасчетов.СуммаОстаток;		
					Иначе
						СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаРасчетов.Валюта, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчета,  CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						Долг = Долг + РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаРасчетов.СуммаОстаток, СтрокаРасчетов.Валюта, ВалютаУчета,
						СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
						СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Долг = 0 Тогда
			ЭтаФорма.Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Задолженности нет'");
			ЭтаФорма.Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		ИначеЕсли Долг < 0 Тогда	
			ЭтаФорма.Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Долг клиенту составляет: '") + Формат(?(Долг < 0, -Долг, Долг), "ЧДЦ=2; ЧН=0,00") + " " + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование);
			ЭтаФорма.Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		Иначе
			ЭтаФорма.Элементы.тЗадолженность.Заголовок =  НСтр("ru = 'Долг клиента составляет: '") + Формат(?(Долг < 0, -Долг, Долг), "ЧДЦ=2; ЧН=0,00") + " " + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование);
			ЭтаФорма.Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Объект.CRM_Фамилия)) 
			 Или (ПустаяСтрока(Объект.CRM_Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текФамилия, СокрЛП(Объект.CRM_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Фамилия) И ПустаяСтрока(текФамилия) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия),   СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.CRM_Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Объект.CRM_Имя)) 
			 Или (ПустаяСтрока(Объект.CRM_Имя) И Не ПустаяСтрока(текИмя)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текИмя, СокрЛП(Объект.CRM_Имя)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Имя) И ПустаяСтрока(текИмя) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия), 	 СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.CRM_Имя);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
		
		Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
		
	КонецЕсли;
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текОтчество)) 
			Или (ПустаяСтрока(Объект.CRM_Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текОтчество, СокрЛП(Объект.CRM_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
		
			Объект.Наименование = СокрЛП(Объект.CRM_Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Отчество) И ПустаяСтрока(текОтчество) Тогда

			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.CRM_Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	текОтчество = СокрЛП(Объект.CRM_Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
			
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Если МассивПредставлений.Количество() > 0 Тогда
			Если ДанныеВыбора = Неопределено Тогда
				ДанныеВыбора = Новый СписокЗначений();
			КонецЕсли;
			Для Каждого тДанные Из МассивПредставлений Цикл
				ДанныеВыбора.Вставить(0, тДанные, тДанные);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Если Не ПредставлениеВыбраноИзСписка Тогда
			
			СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
			Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеВыбраноИзСписка = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура сфпПользовательДляПереключенияЗвонковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ВыбранноеЗначение, Истина)) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'У выбранного пользователя не заполнен текущий внутренний номер, маршрутизация невозможна.'"));
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКПП(Команда)
	// +CRM
	//ПартнерыИКонтрагентыКлиент.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь);
	CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь, ЭтотОбъект.УникальныйИдентификатор);
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	Объект.CRM_НапоминатьОДнеРождения = ЗначениеЗаполнено(Объект.ДатаРождения);
	Элементы.CRM_НапоминатьОДнеРождения.Доступность = ЗначениеЗаполнено(Объект.ДатаРождения);
	ВидимостьИДоступностьПоляПолныхЛет();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактноеЛицо(Ссылка)
	
	Если Ссылка.Владелец = Объект.Ссылка Тогда
		Если НЕ ЗначениеЗаполнено(Объект.CRM_ОсновноеКонтактноеЛицо) Тогда
			
			Объект.CRM_ОсновноеКонтактноеЛицо = Ссылка;
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;	
			Модифицированность = Ложь;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВычислитьКолвоПолныхЛет()	
	РазницаВГодах = Год(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса())-Год(Объект.ДатаРождения);
	Если Месяц(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) > Месяц(Объект.ДатаРождения) Тогда
		Возврат РазницаВГодах;	
	ИначеЕсли Месяц(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) = Месяц(Объект.ДатаРождения) И
		День(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) >= День(Объект.ДатаРождения) Тогда
		Возврат РазницаВГодах;
	Иначе 
		Возврат РазницаВГодах - 1;
	КонецЕсли;		
КонецФункции	

&НаСервере
Процедура ВидимостьИДоступностьПоляПолныхЛет()
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
		Элементы.КолвоПолныхЛет.Видимость = Ложь;
	Иначе
		КолвоПолныхЛет = "Возраст: " + ВычислитьКолвоПолныхЛет();
		Элементы.КолвоПолныхЛет.Видимость = Истина;
	КонецЕсли;		 
КонецПроцедуры

#Область КонтактныеЛица

&НаКлиенте
Процедура КонтактнаяИнформацияКЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") 
		ИЛИ ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
		
		ПозвонитьКЛ(Неопределено);

	ИначеЕсли ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		
		ОтправитьEmailКЛ(Неопределено);
		
	ИначеЕсли ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		
		АдресСайтаКомпании = ТекущиеДанные.Значение;
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), АдресСайтаКомпании);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаПриАктивизацииСтроки()
	Если Элементы.КонтактныеЛица.ТекущаяСтрока = Неопределено Тогда
		Элементы.КонтактныеЛицаОсновноеКЛ.Пометка = Ложь;
		КонтактнаяИнформацияКЛ.Очистить();
		Возврат;
	КонецЕсли;
	
	// +CRM
	Если Элементы.КонтактнаяИнформацияКЛ.Видимость Тогда
		ПоказатьКонтактнуюИнформациюКЛ(Элементы.КонтактныеЛица.ТекущаяСтрока);
	Иначе
		КонтактнаяИнформацияКЛ.Очистить();
	КонецЕсли;	
	// -CRM
	
	КонтактныеЛицаОсновноеКЛПометка = (Элементы.КонтактныеЛица.ТекущаяСтрока = Объект.CRM_ОсновноеКонтактноеЛицо);
	Если Элементы.КонтактныеЛицаОсновноеКЛ.Пометка <> КонтактныеЛицаОсновноеКЛПометка Тогда
		Элементы.КонтактныеЛицаОсновноеКЛ.Пометка = КонтактныеЛицаОсновноеКЛПометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_КонтактныеЛицаПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// +CRM Модуль
	//Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные Тогда
	//	ТекДанные = Элементы.КонтактныеЛица1.ТекущиеДанные;
	//Иначе		
		ТекДанные = Элементы.КонтактныеЛица.ТекущиеДанные;
	//КонецЕсли;
	// -CRM Модуль
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	ПараметрыФормы = Новый Структура("Ключ, БизнесРегион", ТекДанные.Ссылка, Объект.БизнесРегион);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаЭлемента", ПараметрыФормы)
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКЛ(Команда)
	КонтактныеЛицаВыбор(Неопределено, Неопределено, Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломИзменения(Элемент, Отказ)
	КонтактныеЛицаВыбор(Неопределено, Неопределено, Неопределено, Ложь);
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаПриАктивизацииСтроки1()
	Если Элементы.КонтактныеЛица1.ТекущаяСтрока = Неопределено Тогда
		Элементы.КонтактныеЛица1ОсновноеКЛ.Пометка = Ложь;
		КонтактнаяИнформацияКЛ.Очистить();
		Возврат;
	КонецЕсли;
	
	// +CRM
	Если Элементы.КонтактнаяИнформацияКЛ.Видимость Тогда
		ПоказатьКонтактнуюИнформациюКЛ(Элементы.КонтактныеЛица.ТекущаяСтрока);
	Иначе
		КонтактнаяИнформацияКЛ.Очистить();
	КонецЕсли;	
	// -CRM
	
	КонтактныеЛицаОсновноеКЛПометка = (Элементы.КонтактныеЛица1.ТекущаяСтрока = Объект.CRM_ОсновноеКонтактноеЛицо);
	Если Элементы.КонтактныеЛица1ОсновноеКЛ.Пометка <> КонтактныеЛицаОсновноеКЛПометка Тогда
		Элементы.КонтактныеЛица1ОсновноеКЛ.Пометка = КонтактныеЛицаОсновноеКЛПометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки1(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_КонтактныеЛицаПриАктивизацииСтроки1", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Перед выполнением данного действия необходимо записать данные.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеКЛ(Команда)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаКонтактнаяИнформация Тогда
		ТекДанные = Элементы.КонтактныеЛица.ТекущиеДанные;
	//ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные Тогда
	//	ТекДанные = Элементы.КонтактныеЛица1.ТекущиеДанные;
	Иначе
		Возврат;
	КонецЕсли;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Ссылка = Объект.CRM_ОсновноеКонтактноеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	Объект.CRM_ОсновноеКонтактноеЛицо = ТекДанные.Ссылка;
	Если Записать() Тогда
		Элементы.КонтактныеЛица.Обновить();
		//Элементы.КонтактныеЛица1.Обновить();
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаКонтактнаяИнформация Тогда
			Элементы.КонтактныеЛицаОсновноеКЛ.Пометка = Истина;
		//ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные Тогда
		//	Элементы.КонтактныеЛица1ОсновноеКЛ.Пометка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюКЛ(СтрокаСсылка)
	
	КонтактнаяИнформацияКЛ.Очистить();
	Если СтрокаСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КИКонтактногоЛица = СтрокаСсылка.КонтактнаяИнформация;
	
	Для Каждого ОбъектКИ Из КИКонтактногоЛица Цикл
		
		Если Не ЗначениеЗаполнено(ОбъектКИ.Тип) Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		НоваяКИ							= КонтактнаяИнформацияКЛ.Добавить();
		НоваяКИ.Вид						= ОбъектКИ.Вид;
		НоваяКИ.Значение				= ОбъектКИ.Представление;
		НоваяКИ.Тип						= ОбъектКИ.Тип;
		НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
		НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
		
	КонецЦикла;	
	
	КонтактнаяИнформацияКЛ.Сортировать("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСКЛ(Команда)
	Если Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ (Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Элементы.КонтактныеЛица.ТекущаяСтрока);
		Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Значение));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСКЛ1(Команда)
	Если Элементы.КонтактнаяИнформацияКЛ1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ (Элементы.КонтактнаяИнформацияКЛ1.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Элементы.КонтактныеЛица1.ТекущаяСтрока);
		Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Элементы.КонтактнаяИнформацияКЛ1.ТекущиеДанные.Значение));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailКЛ(Команда)
	
	ОтправитьEmailИзСписка(Элементы.КонтактныеЛица.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailКЛ1(Команда)
	
	ОтправитьEmailИзСписка(Элементы.КонтактныеЛица1.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКЛ1.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьКЛ(Команда)
	
	Если Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Тип = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Вид,  "Тип");
		Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// +СофтФон
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	НомерТелефона = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Значение;
	сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.КонтактныеЛица.ТекущаяСтрока);
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьКЛ1(Команда)
	
	Если Элементы.КонтактнаяИнформацияКЛ1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Тип = Элементы.КонтактнаяИнформацияКЛ1.ТекущиеДанные.Тип;
		Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// +СофтФон
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	НомерТелефона = Элементы.КонтактнаяИнформацияКЛ1.ТекущиеДанные.Значение;
	сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.КонтактныеЛица1.ТекущаяСтрока);
	// -СофтФон
КонецПроцедуры


#КонецОбласти

#Область Клиенты

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюКлиенты(СтрокаСсылка)
	
	КонтактнаяИнформацияКлиенты.Очистить();
	Если СтрокаСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КИКлиенты = СтрокаСсылка.КонтактнаяИнформация;
	
	Для Каждого ОбъектКИ Из КИКлиенты Цикл
		
		Если Не ЗначениеЗаполнено(ОбъектКИ.Тип) Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если ОбъектКИ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица
		ИЛИ ОбъектКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица
		ИЛИ ОбъектКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяКИ							= КонтактнаяИнформацияКлиенты.Добавить();
		НоваяКИ.Вид						= ОбъектКИ.Вид;
		НоваяКИ.Значение				= ОбъектКИ.Представление;
		НоваяКИ.Тип						= ОбъектКИ.Тип;
		НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
		НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
		
	КонецЦикла;	
	
	КонтактнаяИнформацияКлиенты.Сортировать("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КлиентыПриАктивизацииСтроки()
	Если Элементы.Клиенты.ТекущаяСтрока = Неопределено Тогда
		КонтактнаяИнформацияКлиенты.Очистить();
		Возврат;
	КонецЕсли;
	
	ПоказатьКонтактнуюИнформациюКлиенты(Элементы.Клиенты.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Клиенты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Клиент), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_КлиентыПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАдресКлиент()
	
	Если Элементы.Клиенты.ТекущаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Тип = Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Тип;
	Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")) Тогда Возврат; КонецЕсли;
	МассивАдресов = ПолучитьМассивАдресов(, Элементы.Клиенты.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Вид);
	Если МассивАдресов.Количество() = 0 Тогда Возврат; КонецЕсли;
	ВыбранныйАдрес		= МассивАдресов[0].ЗначенияПолей;
	ПредставлениеАдреса	= МассивАдресов[0].Представление;
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(ВыбранныйАдрес);
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;	
	СтруктураАдреса.Вставить("Представление", ПредставлениеАдреса);
	
	CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailКлиент(Команда)
	
	ОтправитьEmailИзСписка(Элементы.Клиенты.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСКлиент(Команда)
	Если Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ (Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Элементы.Клиенты.ТекущаяСтрока);
		Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Значение));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьКлиент(Команда)
	
	Если Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Тип = Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Тип;
		Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// +СофтФон
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	НомерТелефона = Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Значение;
	сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.Клиенты.ТекущаяСтрока);
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КлиентыПередНачаломДобавленияЗавершение", ЭтотОбъект);
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Перед выполнением данного действия необходимо записать данные.
								   |Записать данные?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавленияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
		Возврат;
	КонецЕсли;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("ЭтоКонтактныйКлиент", Истина);
	ПараметрыНового.Вставить("КонтактныйКлиент", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ВидыДеятельности

&НаСервере
Процедура НастроитьВидимостьПоложениеГрупп()
	
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		
		Элементы.ГруппаКлиентов.Видимость			= Ложь;
		Элементы.СтраницаВидыДеятельности.Видимость	= Константы.CRM_ИспользоватьВидыДеятельностиУПартнеров.Получить();
		
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		
		Элементы.ГруппаКлиентов.Видимость			= Истина;
		Элементы.СтраницаВидыДеятельности.Видимость	= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюПоВидуДеятельности(КЛСсылка, ОтветственныйСсылка);
	КонтактнаяИнформацияВидДеятельности.Очистить();
	
	бВыводитьКИПоОтветственному = Ложь;
	бВыводитьКИПоКЛ = Ложь;
	Попытка
		ТекКолонкаИмя = Элементы.ВидыДеятельности.ТекущийЭлемент.Имя;
		Если ТекКолонкаИмя = "ВидыДеятельностиОтветственный" Тогда
			бВыводитьКИПоОтветственному = Истина;
		ИначеЕсли ТекКолонкаИмя = "ВидыДеятельностиКонтактноеЛицо" Тогда
			бВыводитьКИПоКЛ = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если бВыводитьКИПоКЛ Тогда
		Для Каждого ОбъектКИ Из КЛСсылка.КонтактнаяИнформация Цикл
			
			// +CRM Модуль
			Если Не ЗначениеЗаполнено(ОбъектКИ.Тип) Тогда
			
				Продолжить;				
			
			КонецЕсли;
			// -CRM Модуль
			
			НоваяКИ							= КонтактнаяИнформацияВидДеятельности.Добавить();
			НоваяКИ.Вид						= ОбъектКИ.Вид;
			НоваяКИ.Значение				= ОбъектКИ.Представление;
			НоваяКИ.Тип						= ОбъектКИ.Тип;
			НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
			НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
		КонецЦикла;
	КонецЕсли;
	
	Если бВыводитьКИПоОтветственному Тогда
		Для Каждого ОбъектКИ Из ОтветственныйСсылка.КонтактнаяИнформация Цикл
			
			// +CRM Модуль
			Если Не ЗначениеЗаполнено(ОбъектКИ.Тип) Тогда
			
				Продолжить;				
			
			КонецЕсли;
			// -CRM Модуль
			
			НоваяКИ							= КонтактнаяИнформацияВидДеятельности.Добавить();
			НоваяКИ.Вид						= ОбъектКИ.Вид;
			НоваяКИ.Значение				= ОбъектКИ.Представление;
			НоваяКИ.Тип						= ОбъектКИ.Тип;
			НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
			//НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
		КонецЦикла;	
	КонецЕсли;
	
	КонтактнаяИнформацияВидДеятельности.Сортировать("Порядок");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailИзСписка(ОбъектКонтактнойИнформации, КонтактнаяИнформация)
	
	Если ОбъектКонтактнойИнформации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактнаяИнформация.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СокрЛП(КонтактнаяИнформация.Значение)) Тогда
		Возврат;	
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(ОбъектКонтактнойИнформации, КонтактнаяИнформация.Значение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидыДеятельностиПриАктивизацииСтроки()
	Если Элементы.ВидыДеятельности.ТекущаяСтрока = Неопределено Тогда
		КонтактнаяИнформацияВидДеятельности.Очистить();
		Возврат;
	КонецЕсли;
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		ПоказатьКонтактнуюИнформациюПоВидуДеятельности(Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо, Элементы.ВидыДеятельности.ТекущиеДанные.Ответственный);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ВидыДеятельностиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиПриАктивизацииПоля(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ВидыДеятельностиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПодключитьОбработчикОжидания("Подключаемый_ВидыДеятельностиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьМассивАдресов(Партнер = Неопределено, КонтактноеЛицо  = Неопределено, Вид)
	
	ТаблицаАдресов = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Партнер, КонтактноеЛицо, Перечисления.ТипыКонтактнойИнформации.Адрес, Вид);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАдресов);
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьАдресКИВидДеятельности()
	
	Если Элементы.ВидыДеятельности.ТекущаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Тип = Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Тип;
	Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")) Тогда Возврат; КонецЕсли;
	МассивАдресов = ПолучитьМассивАдресов(, Элементы.КонтактныеЛица.ТекущаяСтрока, Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Вид);
	Если МассивАдресов.Количество() = 0 Тогда Возврат; КонецЕсли;
	ВыбранныйАдрес		= МассивАдресов[0].ЗначенияПолей;
	ПредставлениеАдреса	= МассивАдресов[0].Представление;
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(ВыбранныйАдрес);
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;	
	СтруктураАдреса.Вставить("Представление", ПредставлениеАдреса);
	
	CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	
КонецПроцедуры


&НаКлиенте
// Процедура - обработчик команды формы "Yandex".
//
Процедура ОткрытьАдресКИВидДеятельностиYandex(Команда)
	
	СайтИнтернетКарты = "Yandex";
	ОткрытьАдресКИВидДеятельности();
	
КонецПроцедуры // Yandex()

&НаКлиенте
// Процедура - обработчик команды формы "Google".
//
Процедура ОткрытьАдресКИВидДеятельностиGoogle(Команда)
	
	СайтИнтернетКарты = "Google";
	ОткрытьАдресКИВидДеятельности();
	
КонецПроцедуры // Google()

&НаКлиенте
Процедура ОткрытьАдресКИВидДеятельностиGIS(Команда)
	
	СайтИнтернетКарты = "GIS";
	ОткрытьАдресКИВидДеятельности();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтправкиКИВидДеятельности(ТипКИ)
	СтруктураОтбора = Новый Структура("Тип", ТипКИ);
	МассивСтрок = КонтактнаяИнформацияВидДеятельности.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 1 Тогда
		СтруктураОтправкиПисьма = Новый Структура;
		СтруктураОтправкиПисьма.Вставить("Тип", ТипКИ);
		СтруктураОтправкиПисьма.Вставить("Значение", МассивСтрок[0].Значение);
		Возврат  СтруктураОтправкиПисьма;
		
	Иначе
		Возврат Неопределено;	
	КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура ОтправитьEmailКИВидДеятельности(Команда)
	
	Если Элементы.ВидыДеятельности.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	СтруктураОтправкиПисьма = ПолучитьСтруктуруОтправкиКИВидДеятельности(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Если СтруктураОтправкиПисьма = Неопределено Тогда
		ОтправитьEmailИзСписка(Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо, Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные);
	Иначе
		ОтправитьEmailИзСписка(Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо, СтруктураОтправкиПисьма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСКИВидДеятельности(Команда)
	Если Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураОтправкиSMS = ПолучитьСтруктуруОтправкиКИВидДеятельности(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	Если НЕ (Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) И СтруктураОтправкиSMS = Неопределено Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Если СтруктураОтправкиSMS = Неопределено Тогда
			Структура = Новый Структура();
			Структура.Вставить("Ссылка", Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо);
			Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Значение));
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Основание", Структура);
			ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
			ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
		Иначе
			Структура = Новый Структура();
			Структура.Вставить("Ссылка", Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо);
			Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(СтруктураОтправкиSMS.Значение));
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Основание", Структура);
			ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
			ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьКЛКИВидДеятельности(Команда)
	
	СтруктураЗвонка = ПолучитьСтруктуруОтправкиКИВидДеятельности(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	Если СтруктураЗвонка = Неопределено Тогда
		Если Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные = Неопределено Тогда
			Возврат;
		Иначе
			Тип = Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Тип;
			Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// +СофтФон
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
		НомерТелефона = Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Значение;
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо);
		// -СофтФон
	Иначе
		// +СофтФон
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
		НомерТелефона = СтруктураЗвонка.Значение;
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо);
		// -СофтФон
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ПодключаемыеОбработчикиКонтактнойИнформации


&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru = 'Скрыть дополнительные контактные данные'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];

	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение,,ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли; 
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСайтаКомпании);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияБезДействия(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта");
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти 

#Область ТипыОтношений

&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("Поставщик",			"Поставщик",		Объект.Поставщик);
	CRM_ВсеТипыОтношений.Добавить("Клиент",				"Покупатель",		Объект.Клиент);
	CRM_ВсеТипыОтношений.Добавить("Конкурент",			"Конкурент",		Объект.Конкурент);
	CRM_ВсеТипыОтношений.Добавить("Перевозчик",			"Перевозчик",		Объект.Перевозчик);
	CRM_ВсеТипыОтношений.Добавить("ПрочиеОтношения",	"Прочие отношения",	Объект.ПрочиеОтношения);
	CRM_ВсеТипыОтношений.Добавить("ОбслуживаетсяТорговымиПредставителями",	"Обслуживается торговыми представителями",	Объект.ОбслуживаетсяТорговымиПредставителями);
	CRM_ВсеТипыОтношений.Добавить("CRM_Госорганы",		"Госорганы",		Объект.CRM_Госорганы);
	CRM_ВсеТипыОтношений.Добавить("CRM_Учредитель",		"Учредитель",		Объект.CRM_Учредитель);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаСервере
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	

КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		ДополнительныеПараметры.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	НовыеЗначенияТипыОтношений = Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		НовыеЗначенияТипыОтношений.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Поставщик И Не НовыеЗначенияТипыОтношений.Поставщик Тогда
		
		Если НовыеЗначенияТипыОтношений.Перевозчик Тогда
			
			ЭлементПеревозчик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Перевозчик");
			
			ЭлементПеревозчик.Пометка = Ложь;		
	
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.Перевозчик И НовыеЗначенияТипыОтношений.Перевозчик Тогда
	
		Если Не НовыеЗначенияТипыОтношений.Поставщик Тогда
			
			ЭлементПоставщик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Поставщик");
			
			ЭлементПоставщик.Пометка = Истина;
	
		КонецЕсли;
	
	КонецЕсли; 
		
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Клиент И Не НовыеЗначенияТипыОтношений.Клиент Тогда
		
		Если НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
			
			ЭлементОбслуживаетсяТорговымиПредставителями = CRM_ВсеТипыОтношений.НайтиПоЗначению("ОбслуживаетсяТорговымиПредставителями");
			
			ЭлементОбслуживаетсяТорговымиПредставителями.Пометка = Ложь;
	
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.ОбслуживаетсяТорговымиПредставителями И НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
	
		Если Не НовыеЗначенияТипыОтношений.Клиент Тогда
			
			ЭлементКлиент = CRM_ВсеТипыОтношений.НайтиПоЗначению("Клиент");
			
			ЭлементКлиент.Пометка = Истина;		
	
		КонецЕсли;
	
	КонецЕсли; 
			
	CRM_ЗаполнитьТипыОтношений();
	
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

	
#КонецОбласти


#Область МеханизмКартинок

&НаСервере
Процедура CRM_УправлениеВидимостьюРамкиКартинки()
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		Элементы.АдресКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	Иначе
		Элементы.АдресКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
	КонецЕсли;		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки
		= НСтр("ru = 'Картинка не доступна (не доступен том) обратитесь к администратору.'");
	Объект.CRM_Фотография = Справочники.ПартнерыПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	// +CRM Модуль
	#Если НЕ ВебКлиент Тогда
	// -CRM Модуль
	ВыборИзображения   = Ложь;
	// +CRM Модуль
	#КонецЕсли
	// -CRM Модуль
	
	CRM_УправлениеВидимостьюРамкиКартинки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	Если ПустаяСтрока(АдресКартинки) Тогда Возврат; КонецЕсли;
	АдресКартинки = "";
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.ПартнерыПрисоединенныеФайлы.ПустаяСсылка");
	Модифицированность = Истина;
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе 
        Возврат
    КонецЕсли;
    
    ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
    
    ВыборИзображения = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
    ВыборИзображения = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.CRM_Фотография = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьВзаимодействие(Команда)
	СтруктураЗначенияЗаполнения = Новый Структура("ЗначенияЗаполнения", Новый Структура());
	СтруктураЗначенияЗаполнения.ЗначенияЗаполнения.Вставить("Партнер", Объект.Ссылка);
	ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", СтруктураЗначенияЗаполнения, ЭтотОбъект);
КонецПроцедуры

// +CRM Модуль
//&НаКлиенте
//Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
//	
//	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
//	
//КонецПроцедуры
// -CRM Модуль

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

&НаКлиенте
Процедура ГиперссылкаПерейтиЗначенияКлассификаторовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти
//-Классификаторы
