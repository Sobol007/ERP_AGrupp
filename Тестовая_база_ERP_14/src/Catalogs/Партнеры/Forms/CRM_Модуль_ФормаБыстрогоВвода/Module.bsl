
&НаКлиенте
Перем ПараметрыОбработчика;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
//Заполняет список выбора для вида телефона
//
Процедура ИзменитьПараметрыВыбораВидаТелефона()
	Если ВидПартнера = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		МассивФизЛицо = Новый ФиксированныйМассив(Массив);
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель", МассивФизЛицо);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		Элементы.ВидТелефонаКлиента.ПараметрыВыбора = НовыеПараметры;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		МассивКомпания = Новый ФиксированныйМассив(Массив);
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель", МассивКомпания);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		Элементы.ВидТелефонаКлиента.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
КонецПроцедуры

&НаСервере
//Заполняет список выбора для вида адреса
//
Процедура ИзменитьПараметрыВыбораВидаАдреса()
	
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		Элементы.ВидАдреса.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
//Заполняет список выбора для вида Email
//
Процедура ИзменитьПараметрыВыбораВидаEmail()
	
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		Элементы.ВидEmailКлиента.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	ОшибокНет = Истина;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено наименование'"), , "Наименование");
		ОшибокНет = Ложь;
	КонецЕсли;
	
	Если НЕ ((ЗначениеЗаполнено(ВидТелефонаКлиента) И ЗначениеЗаполнено(Телефон))
		 ИЛИ (ЗначениеЗаполнено(ВидEmailКлиента) И ЗначениеЗаполнено(Email))
		 ИЛИ (ЗначениеЗаполнено(ВидАдреса) И ЗначениеЗаполнено(Адрес))
		 ИЛИ (ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ЗначениеЗаполнено(ТелефонКонтактногоЛица))
		 ИЛИ (ЗначениеЗаполнено(ВидEmailКонтактногоЛица) И ЗначениеЗаполнено(EmailКонтактногоЛица))) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена контактная информация!'"),, "Телефон");
		
		ОшибокНет = Ложь;
		 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФамилияКонтактногоЛица)
		 И НЕ ЗначениеЗаполнено(ИмяКонтактногоЛица) 
		 И НЕ ЗначениеЗаполнено(ОтчествоКонтактногоЛица)
		 И (ЗначениеЗаполнено(ТелефонКонтактногоЛица) ИЛИ ЗначениеЗаполнено(EmailКонтактногоЛица)) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена ФИО контактного лица!'"),, "ФамилияКонтактногоЛица");
		
		ОшибокНет = Ложь;
		 
	КонецЕсли;
	
	ВыбранТипОтношений = Ложь;
	
	Для каждого ТипыОтношенийЭлементСписка Из CRM_ВсеТипыОтношений Цикл
		
		Если ТипыОтношенийЭлементСписка.Пометка Тогда
		
			ВыбранТипОтношений = Истина;
			
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла;	
	
	Если Не ВыбранТипОтношений Тогда
		//
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо определить хотя бы один тип бизнес-отношений!'"),, "CRM_ТипыОтношений");
		ОшибокНет = Ложь;
	КонецЕсли;
	
	Если ИспользуютсяГруппыДоступаПартнеров И ГруппаДоступа = ПредопределенноеЗначение("Справочник.ГруппыДоступаПартнеров.ПустаяСсылка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать группу доступа партнера'"),, "ГруппаДоступа");
		ОшибокНет = Ложь;
	КонецЕсли;
	
	Если ЭтоКомпания = 0 Тогда
		
		Если ПустаяСтрока(ИНН) И Не ПустаяСтрока(КПП) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан КПП, но не указан ИНН'"), , "ИНН");
			ОшибокНет = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если ОшибокНет Тогда
		
		//Проверка ИНН
		Если ЭтоКомпания = 0 И НЕ ПустаяСтрока(ИНН) Тогда
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ?(ВидКомпании = 2, Ложь, Истина), ТекстСообщения) Тогда
				ОшибокНет  = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИНН");
			КонецЕсли;
		ИначеЕсли ЭтоКомпания = 1 И (НЕ ПустаяСтрока(ИННПартнерФизЛицо)) Тогда
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИННПартнерФизЛицо, Ложь, ТекстСообщения) Тогда
				ОшибокНет  = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИННПартнерФизЛицо");
			КонецЕсли;
		КонецЕсли;
		
		//Проверка КПП
		Если ЭтоКомпания = 0 И НЕ ПустаяСтрока(КПП) Тогда
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения) Тогда
				ОшибокНет  = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КПП");
			КонецЕсли;
		КонецЕсли;
		
		//ПроверкаОКПО
		Если ЭтоКомпания = 0 И Не ПустаяСтрока(КодПоОКПО) Тогда
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(КодПоОКПО, Истина,ТекстСообщения) Тогда
				ОшибокНет  = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КодПоОКПО");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОшибокНет;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКИ_Описание(ВидАдреса)
	
	Если ЗначениеЗаполнено(ВидАдреса) Тогда
		
		Элементы.Адрес.РедактированиеТекста = НЕ ВидАдреса.РедактированиеТолькоВДиалоге;
		
		Строки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", "Адрес"));
		Если Строки.Количество() = 0 Тогда
			НовСтр = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			НовСтр.ИмяРеквизита     = "Адрес";
		Иначе
			НовСтр = Строки[0];
		КонецЕсли;
		НовСтр.ТолькоРоссийский = ВидАдреса.ТолькоНациональныйАдрес;
		НовСтр.Вид              = ВидАдреса.Ссылка;
		НовСтр.Тип              = ВидАдреса.Тип;
		НовСтр.ТипНомер         = 1;
		НовСтр.Выводить         = Истина;
		НовСтр.Родитель         = ВидАдреса.Родитель;
		Если ЗначениеЗаполнено(Адрес) Тогда
			НовСтр.Значение	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Адрес, ВидАдреса);
		КонецЕсли;
	
	Иначе
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиДубли(ОписаниеОповещения)
	СтруктураПоиска = СоздатьСтруктуруПоиска();
	Если СтруктураПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не установлены реквизиты поиска в настройках сервисных функций!'"));
	КонецЕсли;
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Наименование",		Наименование);
	СтруктураОбъекта.Вставить("НаименованиеПолное",	НаименованиеПолное) ;
	СтруктураОбъекта.Вставить("ИНН",				ИНН);
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		СтруктураОбъекта.Вставить("Адрес", Адрес);
	КонецЕсли;
	ТелефонДляПоиска	= "";
	EmailДляПоиска		= "";
	Если ПустаяСтрока(ТелефонКонтактногоЛица) Тогда
		НомерТелефонаКонтактногоЛица = "";
	Иначе	
		НомерТелефонаКонтактногоЛица = ?(ПустаяСтрока(КодСтраныКонтактногоЛица), "", 
		?(Найти(КодСтраныКонтактногоЛица, "+") = 0, "+", "") + СокрЛП(КодСтраныКонтактногоЛица)) 
		+ ?(ПустаяСтрока(КодГородаКонтактногоЛица), "", " (" + СокрЛП(КодГородаКонтактногоЛица) + ") ") 
		+ ?(ПустаяСтрока(ТелефонКонтактногоЛица), "", СокрЛП(ТелефонКонтактногоЛица));
	КонецЕсли;	
	Если НЕ ПустаяСтрока(НомерТелефонаКонтактногоЛица) Тогда
		СтруктураОбъекта.Вставить("Контакт_Телефон", НомерТелефонаКонтактногоЛица);
		ТелефонДляПоиска	= НомерТелефонаКонтактногоЛица;
	КонецЕсли;
	Если ПустаяСтрока(Телефон) Тогда
		НомерТелефона = "";
	Иначе	
		НомерТелефона = ?(ПустаяСтрока(КодСтраны), "", ?(Найти(КодСтраны, "+") = 0, "+", "") + СокрЛП(КодСтраны)) 
		+ ?(ПустаяСтрока(КодГорода), "", " (" + СокрЛП(КодГорода)+ ") ") 
		+ ?(ПустаяСтрока(Телефон), "", СокрЛП(Телефон));
	КонецЕсли;	
	Если НЕ ПустаяСтрока(НомерТелефона) Тогда
		СтруктураОбъекта.Вставить("Телефон", НомерТелефона);
		Если НЕ СтруктураПоиска.Свойство("Телефон") Тогда
			СтруктураПоиска.Вставить("Телефон", "ПОДОБНО");
		КонецЕсли;	
		Если ПустаяСтрока(ТелефонДляПоиска) Тогда
			ТелефонДляПоиска	= НомерТелефона;
		КонецЕсли;	
	КонецЕсли;
	Если НЕ ПустаяСтрока(EmailКонтактногоЛица) Тогда
		СтруктураОбъекта.Вставить("Контакт_АдресЭлектроннойПочты", EmailКонтактногоЛица);
		EmailДляПоиска	= EmailКонтактногоЛица;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Email) Тогда
		СтруктураОбъекта.Вставить("АдресЭлектроннойПочты", Email);
		Если НЕ СтруктураПоиска.Свойство("АдресЭлектроннойПочты") Тогда
			СтруктураПоиска.Вставить("АдресЭлектроннойПочты", "ПОДОБНО");
		КонецЕсли;	
		Если ПустаяСтрока(EmailДляПоиска) Тогда
			EmailДляПоиска	= Email;
		КонецЕсли;
	КонецЕсли;
	ПоискПоТелефону	= НЕ ПустаяСтрока(ТелефонДляПоиска);
	ПоискПоEmail	= НЕ ПустаяСтрока(EmailДляПоиска);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
	ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
	Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		Если СтрНайти(ЭтотОбъект.ВладелецФормы.ИмяФормы, "Документ.CRM_Интерес.Форма.ФормаДокумента")>0 Тогда
			ПараметрыФормы.Вставить("ПотенциальныйКлиент",	Истина);
		ИначеЕсли ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.CRM_МастерРегистрацииОбращения.Форма.Форма" ИЛИ ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаНовая" Тогда
			ПараметрыФормы.Вставить("ПотенциальныйКлиент",	Истина);
		ИначеЕсли ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса" Тогда
			ПараметрыФормы.Вставить("ПотенциальныйКлиент",	Истина);
		КонецЕсли;
	КонецЕсли;	
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы);
	Если Форма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	Иначе 
		Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДублиНайденыЗавершение", ЭтотОбъект, ОписаниеОповещения);
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДублиНайденыЗавершение(РезультатЗакрытия, ОписаниеОповещения) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						НайденныйКлиент								= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия.Объект, "Владелец");
						НайденныйКонтакт							= РезультатЗакрытия.Объект;
						Элементы.ГруппаПартнерИКонтрагент.Видимость = Ложь;
						Элементы.ГруппаНайденныйКлиент.Видимость	= Истина;
						Элементы.ГруппаНайденноеКонтактноеЛицо.Видимость	= Истина;
						Элементы.КонтактноеЛицо.Видимость			= Ложь;
						Элементы.Дополнительно.Видимость			= Ложь;
						Элементы.ЗарегистрироватьКлиента.Заголовок	= НСтр("ru='Выбрать контакт'");
						Заголовок									= НСтр("ru='Выбор существующего контакта клиента'");
						Элементы.ОткрытьКарточкуКлиента.Видимость	= Ложь;
						Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость	= Ложь;
						ОтобразитьКИКонтакта();
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
						НайденныйКлиент								= РезультатЗакрытия.Объект;
						Элементы.ГруппаПартнерИКонтрагент.Видимость = Ложь;
						Элементы.ГруппаНайденныйКлиент.Видимость	= Истина;
						Элементы.Дополнительно.Видимость			= Ложь;
						Элементы.ЗарегистрироватьКлиента.Заголовок	= НСтр("ru='Зарегистрировать контакт'");
						Заголовок									= НСтр("ru='Регистрация нового контакта клиента'");
						Элементы.ОткрытьКарточкуКлиента.Видимость	= Ложь;
						Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость	= Ложь;
					ИначеЕсли РезультатЗакрытия.Объект = Неопределено Тогда
						ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					
					ВладелецУправляемаяФорма = ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма");
					
					Если ВладелецУправляемаяФорма И СтрНайти(ЭтотОбъект.ВладелецФормы.ИмяФормы, "Документ.CRM_Интерес.Форма.ФормаДокумента")>0 Тогда
							ЭтотОбъект.ВладелецФормы.Партнер = РезультатЗакрытия.Объект;
							Оповестить("Создан новый партнер", РезультатЗакрытия.Объект, ЭтотОбъект);
					ИначеЕсли ВладелецУправляемаяФорма И ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.CRM_МастерРегистрацииОбращения.Форма.Форма" ИЛИ ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаНовая" Тогда
							Оповестить("Создан новый партнер", РезультатЗакрытия.Объект, ЭтотОбъект);
					ИначеЕсли ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса" Тогда
						Оповестить("Создан новый партнер", РезультатЗакрытия.Объект, ЭтотОбъект);
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						ВладелецОбъекта	= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия.Объект, "Владелец");
						Попытка 
							ВладелецФормы.Элементы.Список.ТекущаяСтрока = ВладелецОбъекта; 
						Исключение
							ФормаСписка = ПолучитьФорму("Справочник.Партнеры.ФормаСписка");
							ФормаСписка.Открыть();
							ФормаСписка.ТекущийЭлемент.ТекущаяСтрока = ВладелецОбъекта;
						КонецПопытки;
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
						Попытка 
							ВладелецФормы.Элементы.Список.ТекущаяСтрока = РезультатЗакрытия.Объект; 
						Исключение
							ФормаСписка = ПолучитьФорму("Справочник.Партнеры.ФормаСписка");
							ФормаСписка.Открыть();
							ФормаСписка.ТекущийЭлемент.ТекущаяСтрока = РезультатЗакрытия.Объект;
						КонецПопытки;
					КонецЕсли;
					Модифицированность = Ложь;
					Закрыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РезультатЗакрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли (ТипЗнч(РезультатЗакрытия) = Тип("КодВозвратаДиалога")) 
		И (РезультатЗакрытия = КодВозвратаДиалога.Отмена) Тогда
		Возврат;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура заменяет или добавляет КИ найденому контакту.
//
// Параметры:
//	НомерСтрокиКИ	- Строка	- Номер строки КИ.
//	Заменить		- Булево	- Признак замены КИ.
//
Процедура ЗаменитьДобавитьКИ(НомерСтрокиКИ, Заменить)
	Если Найти(НомерСтрокиКИ, "_") = 1 Тогда
		НомерСтроки	= 0;
		Заменить	= Ложь;
	Иначе
		НомерСтроки	= Число(НомерСтрокиКИ);
	КонецЕсли;
	Если НомерСтроки = 0 Тогда
		ЗаголовокВидКИ	= Элементы["КИЗаголовок" + НомерСтрокиКИ].Заголовок;
		СтрокаВидКИ		= Лев(ЗаголовокВидКИ, СтрДлина(ЗаголовокВидКИ) - 1);
		Выборка			= Справочники.ВидыКонтактнойИнформации.Выбрать(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
		ВидКИ			= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Наименование = СтрокаВидКИ Тогда
				ВидКИ	= Выборка.Ссылка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(ВидКИ) Тогда Возврат; КонецЕсли;
		СтрокаКИ		= Новый Структура;
		СтрокаКИ.Вставить("Вид", ВидКИ);
		СтрокаКИ.Вставить("Тип", ВидКИ.Тип);
	Иначе	
		СтрокаКИ	= НайденныйКонтакт.КонтактнаяИнформация[НомерСтроки - 1];
	КонецЕсли;	
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗначениеКИ	= ТелефонДляПоиска;
	Иначе	
		ЗначениеКИ	= EmailДляПоиска;
	КонецЕсли;	
	Если ПустаяСтрока(ЗначениеКИ) Тогда Возврат; КонецЕсли;
	ОбъектКИ	= НайденныйКонтакт.ПолучитьОбъект();
	Если Заменить Тогда
		НоваяКИ		= ОбъектКИ.КонтактнаяИнформация[НомерСтроки - 1];
	Иначе
		НоваяКИ		= ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип	= СтрокаКИ.Тип;
		НоваяКИ.Вид	= СтрокаКИ.Вид;
		НоваяКИ.CRM_ОсновнойДляСвязи	= Ложь;
	КонецЕсли;	
	Если НоваяКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		СтруктураПолей					= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЗначениеКИ);
		НоваяКИ.Представление			= ЗначениеКИ;
		НоваяКИ.Страна					= СтруктураПолей.КодСтраны;
		НоваяКИ.Город					= СтруктураПолей.КодГорода;
		НоваяКИ.НомерТелефона			= СтруктураПолей.НомерТелефона;
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураПолей.НомерТелефона;
	Иначе
		НоваяКИ.АдресЭП					= ЗначениеКИ;
		НоваяКИ.Представление			= ЗначениеКИ;
		Поз = Найти(ЗначениеКИ, "@");
		Если Поз > 0 Тогда
			НоваяКИ.ДоменноеИмяСервера = Сред(ЗначениеКИ, Поз + 1);
		КонецЕсли;
	КонецЕсли;
	НоваяКИ.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
	Если НЕ Заменить Тогда
		// Сортируем контактную информацию по типу и виду.
		ОбъектКИ.КонтактнаяИнформация.Сортировать("Тип,Вид");
	КонецЕсли;
	Попытка
		ОбъектКИ.Записать();
	Исключение
	КонецПопытки;
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ТелефонДляПоиска	= "";
	Иначе	
		EmailДляПоиска		= "";
	КонецЕсли;	
	ОтобразитьКИКонтакта();
КонецПроцедуры // ЗаменитьДобавитьКИ()

&НаКлиенте
// Подключаемый обработчик команды "Заменить".
//
Процедура Подключаемый_КИЗаменить(Элемент)
	ЗаменитьДобавитьКИ(СтрЗаменить(Элемент.Имя, "КИЗаменить", ""), Истина);
КонецПроцедуры // Подключаемый_КИЗаменить()	

&НаКлиенте
// Подключаемый обработчик команды "Добавить".
//
Процедура Подключаемый_КИДобавить(Элемент)
	ЗаменитьДобавитьКИ(СтрЗаменить(Элемент.Имя, "КИДобавить", ""), Ложь);
КонецПроцедуры // Подключаемый_КИДобавить()

&НаСервере
// Функция возвращает контактной информации контакта.
//
// Параметры:
//	Тип		- ПеречислениеСсылка	- Тип контактной информации.
//
// Возвращаемое значение:
//	Массив	- Массив контактной информации контакта.
//
Функция ПолучитьКИКонтакта(Тип)
	МассивКИ	= Новый Массив;
	Запрос		= Новый Запрос;
	Запрос.УстановитьПараметр("Тип",	Тип);
	Запрос.УстановитьПараметр("Ссылка",	НайденныйКонтакт);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКИ.Вид,
	               |	ЕСТЬNULL(КИ.НомерСтроки, 0) КАК НомерСтроки,
	               |	ЕСТЬNULL(КИ.Представление, """") КАК Представление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВидыКонтактнойИнформации.Ссылка КАК Вид,
	               |		ВидыКонтактнойИнформации.CRM_Основной КАК CRM_Основной
	               |	ИЗ
	               |		Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |	ГДЕ
	               |		ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров)
	               |		И ВидыКонтактнойИнформации.Тип = &Тип) КАК ВидыКИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
	               |			КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление,
	               |			КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид
	               |		ИЗ
	               |			Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	               |		ГДЕ
	               |			КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип
	               |			И КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка) КАК КИ
	               |		ПО ВидыКИ.Вид = КИ.Вид
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидыКИ.CRM_Основной УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураКИ = Новый Структура;
		СтруктураКИ.Вставить("Вид",				Выборка.Вид);
		СтруктураКИ.Вставить("НомерСтроки",		Выборка.НомерСтроки);
		СтруктураКИ.Вставить("Представление",	Выборка.Представление);
		МассивКИ.Добавить(СтруктураКИ);
	КонецЦикла;	
	Возврат МассивКИ;
КонецФункции // ПолучитьКИКонтакта()

&НаСервере
// Процедура выводит телефоны и email найденного контакта.
//
Процедура ОтобразитьКИКонтакта()
	// Удаляем ранее созданные элементы формы.
	КоличествоЭлементов	= Элементы.ГруппаНайденныйКонтактТелефоны.ПодчиненныеЭлементы.Количество();
	Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
		ПодчиненныйЭлемент	= Элементы.ГруппаНайденныйКонтактТелефоны.ПодчиненныеЭлементы[КоличествоЭлементов - НомерЭлемента];
		Элементы.Удалить(ПодчиненныйЭлемент);
	КонецЦикла;	
	КоличествоЭлементов	= Элементы.ГруппаНайденныйКонтактАдреса.ПодчиненныеЭлементы.Количество();
	Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
		ПодчиненныйЭлемент	= Элементы.ГруппаНайденныйКонтактАдреса.ПодчиненныеЭлементы[КоличествоЭлементов - НомерЭлемента];
		Элементы.Удалить(ПодчиненныйЭлемент);
	КонецЦикла;	
	ПустойНомер	= 0;
	Если ПоискПоТелефону Тогда
		Элементы.ГруппаНайденныйКонтактКИТелефоны.Видимость	= Истина;
		МассивТелефонов	= ПолучитьКИКонтакта(Перечисления.ТипыКонтактнойИнформации.Телефон);
		Для Каждого СтрокаКИ Из МассивТелефонов Цикл
			Если СтрокаКИ.НомерСтроки = 0 Тогда
				ПустойНомер		= ПустойНомер + 1;
				НомерСтрокиКИ	= "_" + Строка(ПустойНомер);
			Иначе
				НомерСтрокиКИ	= Строка(СтрокаКИ.НомерСтроки);
			КонецЕсли;	
			// Добавляем группу для элементов.
			Группа								= Элементы.Добавить("КИКонтактаГруппа" + НомерСтрокиКИ, Тип("ГруппаФормы"),  Элементы.ГруппаНайденныйКонтактТелефоны);
			Группа.Вид                 			= ВидГруппыФормы.ОбычнаяГруппа;
			Группа.ОтображатьЗаголовок 			= Ложь;
			Группа.Отображение         			= ОтображениеОбычнойГруппы.Нет;
			Группа.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			Группа.РастягиватьПоГоризонтали		= Ложь;	
			// Заголовок КИ
			Элемент 							= Элементы.Добавить("КИЗаголовок" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= Строка(СтрокаКИ.Вид) + ":";
			Элемент.Ширина						= 16;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			// Представление КИ
			Элемент 							= Элементы.Добавить("КИПредставление" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= СтрокаКИ.Представление;
			Элемент.Ширина						= 15;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			// Надпись "Заменить"
			Элемент 							= Элементы.Добавить("КИЗаменить" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= НСтр("ru='Заменить'");
			Элемент.Ширина						= 7;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			Элемент.Гиперссылка					= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КИЗаменить"); 
			// Надпись "Добавить"
			Элемент 							= Элементы.Добавить("КИДобавить" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= НСтр("ru='Добавить'");
			Элемент.Ширина						= 7;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			Элемент.Гиперссылка					= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КИДобавить"); 
		КонецЦикла;
	Иначе	
		Элементы.ГруппаНайденныйКонтактКИТелефоны.Видимость	= Ложь;
	КонецЕсли;	
	Если ПоискПоEmail Тогда
		Элементы.ГруппаНайденныйКонтактКИАдреса.Видимость	= Истина;
		МассивEmail	= ПолучитьКИКонтакта(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Для Каждого СтрокаКИ Из МассивEmail Цикл
			Если СтрокаКИ.НомерСтроки = 0 Тогда
				ПустойНомер		= ПустойНомер + 1;
				НомерСтрокиКИ	= "_" + Строка(ПустойНомер);
			Иначе
				НомерСтрокиКИ	= Строка(СтрокаКИ.НомерСтроки);
			КонецЕсли;	
			// Добавляем группу для элементов.
			Группа								= Элементы.Добавить("КИКонтактаГруппа" + НомерСтрокиКИ, Тип("ГруппаФормы"),  Элементы.ГруппаНайденныйКонтактАдреса);
			Группа.Вид                 			= ВидГруппыФормы.ОбычнаяГруппа;
			Группа.ОтображатьЗаголовок 			= Ложь;
			Группа.Отображение         			= ОтображениеОбычнойГруппы.Нет;
			Группа.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			Группа.РастягиватьПоГоризонтали		= Ложь;	
			// Заголовок КИ
			Элемент 							= Элементы.Добавить("КИЗаголовок" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= Строка(СтрокаКИ.Вид) + ":";
			Элемент.Ширина						= 16;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			// Представление КИ
			Элемент 							= Элементы.Добавить("КИПредставление" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= СтрокаКИ.Представление;
			Элемент.Ширина						= 15;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			// Надпись "Заменить"
			Элемент 							= Элементы.Добавить("КИЗаменить" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= НСтр("ru='Заменить'");
			Элемент.Ширина						= 7;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			Элемент.Гиперссылка					= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КИЗаменить"); 
			// Надпись "Добавить"
			Элемент 							= Элементы.Добавить("КИДобавить" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= НСтр("ru='Добавить'");
			Элемент.Ширина						= 7;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			Элемент.Гиперссылка					= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КИДобавить"); 
		КонецЦикла;
	Иначе	
		Элементы.ГруппаНайденныйКонтактКИАдреса.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Создает новый контакт клиента по заполненым полям.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Владелец контакта.
//
// Возвращаеоме значение:
//	СправочникСсылка	- Созданный контакт.
//
Функция СоздатьНовыйКонтакт(Клиент)
	
	ТекстСообщения = "";
	// Заполнение КЛ
	Если ЗначениеЗаполнено(ФамилияКонтактногоЛица) ИЛИ ЗначениеЗаполнено(ИмяКонтактногоЛица) ИЛИ ЗначениеЗаполнено(ОтчествоКонтактногоЛица) Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		КонтактноеЛицо.Владелец			= Клиент;
		КонтактноеЛицо.Наименование 	= СокрЛП((?(ЗначениеЗаполнено(ФамилияКонтактногоЛица),   			СокрЛП(ФамилияКонтактногоЛица) + " ", "")
									+ ?(ЗначениеЗаполнено(ИмяКонтактногоЛица), 	 				СокрЛП(ИмяКонтактногоЛица) + " ", "")
									+ ?(ЗначениеЗаполнено(ОтчествоКонтактногоЛица),  			СокрЛП(ОтчествоКонтактногоЛица), "")));   
		КонтактноеЛицо.CRM_Фамилия					= ФамилияКонтактногоЛица;
		КонтактноеЛицо.CRM_Имя						= ИмяКонтактногоЛица;
		КонтактноеЛицо.CRM_Отчество					= ОтчествоКонтактногоЛица;
		
		КонтактноеЛицо.Пол							= ПолКонтактноеЛицо;
		КонтактноеЛицо.CRM_Состояние				= Перечисления.CRM_Состояние.Работает;
		КонтактноеЛицо.CRM_Должность				= Должность;
		КонтактноеЛицо.CRM_НапоминатьОДнеРождения	= Истина;
		КонтактноеЛицо.ДатаРегистрацииСвязи = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();

		Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
			Если НЕ ПустаяСтрока(КодСтраныКонтактногоЛица) И (Найти(КодСтраныКонтактногоЛица, "+") = 0) Тогда
				КодСтраныСтрока = "+" + КодСтраныКонтактногоЛица;
			Иначе
				КодСтраныСтрока = КодСтраныКонтактногоЛица;
			КонецЕсли;				
			СписокПолей 			= Новый СписокЗначений;
			СписокПолей.Добавить(КодСтраныСтрока,     				"КодСтраны");
			СписокПолей.Добавить(КодГородаКонтактногоЛица,     		"КодГорода");
			СписокПолей.Добавить(ТелефонКонтактногоЛица, 			"НомерТелефона");
			СписокПолей.Добавить(ДобНомерКонтактногоЛица,    		"Добавочный");
			СписокПолей.Добавить("",   				"Комментарий");
			
			CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицо, CRM_ОбщегоНазначенияСервер.ЗначениеПолейВXML(СписокПолей, ВидТелефонаКонтактногоЛица.Тип)
				, ВидТелефонаКонтактногоЛица, ВидТелефонаКонтактногоЛица.Тип,,, Истина);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидEmailКонтактногоЛица) И ЗначениеЗаполнено(EmailКонтактногоЛица) Тогда
			НовыйКонтакт 						= КонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НовыйКонтакт.Вид					= ВидEmailКонтактногоЛица;
			НовыйКонтакт.Тип					= ВидEmailКонтактногоЛица.Тип;
			НовыйКонтакт.Представление 			= СокрЛП(EmailКонтактногоЛица);
			НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;
			
			Попытка
				Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(EmailКонтактногоЛица);
			Исключение
				СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат Неопределено;
			КонецПопытки;
			
			Если Результат.Количество() > 0 Тогда
				НовыйКонтакт.АдресЭП = Результат[0].Адрес;
				
				Поз = Найти(НовыйКонтакт.АдресЭП, "@");
				Если Поз <> 0 Тогда
					НовыйКонтакт.ДоменноеИмяСервера = Сред(НовыйКонтакт.АдресЭП, Поз+1);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтактнаяИнформацияДругоеВид) И ЗначениеЗаполнено(КонтактнаяИнформацияДругое) Тогда
			
			НовыйКонтакт 						= КонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НовыйКонтакт.Вид					= КонтактнаяИнформацияДругоеВид;
			НовыйКонтакт.Тип					= КонтактнаяИнформацияДругоеВид.Тип;
			НовыйКонтакт.Представление 			= СокрЛП(КонтактнаяИнформацияДругое);
			
		КонецЕсли;
		
		Попытка
			КонтактноеЛицо.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		НайденныйКонтакт = КонтактноеЛицо.Ссылка;
		Возврат КонтактноеЛицо.Ссылка;
	Иначе
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НайтиПартнера(Команда)
	Если НЕ ПроверкаЗаполнения() Тогда Возврат; КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("НайтиПартнераЗавершение", ЭтотОбъект);
	НайтиДубли(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПартнераЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт
	Если НайденыДубли Тогда Возврат КонецЕсли; 
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Совпадений не найдено'"));
КонецПроцедуры

&НаКлиенте
// Процедура создает нового клиента и создает документ Событие.
//
Процедура ЗарегистрироватьКлиентаИИнтерес(Команда)
	Если НЕ ПроверкаЗаполнения() Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйКлиент) Тогда
		Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			НайденныйКонтакт	= СоздатьНовыйКонтакт(НайденныйКлиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			Если ЗначениеЗаполнено(сфпЗвонок) Тогда
				Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, НайденныйКлиент));
			КонецЕсли;
			Если ЗначениеЗаполнено(сфпИнтерес) Тогда
				Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, НайденныйКлиент));
			КонецЕсли;
			Структура = Новый Структура();
			Структура.Вставить("Партнер",			НайденныйКлиент);
			Структура.Вставить("КонтактноеЛицо",	НайденныйКонтакт);
			ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", Структура);
			Закрыть();
		КонецЕсли;
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьКлиентаИИнтересЗавершение", ЭтотОбъект);
		НайтиДубли(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура создает нового клиента и создает документ Событие.
//
Процедура ЗарегистрироватьКлиентаИИнтересЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт
	Если НайденыДубли Тогда Возврат КонецЕсли; 
	НайденныйКлиент = СоздатьНовогоКлиента();
	ОтобразитьИзменениеДанных(НайденныйКлиент, ВидИзмененияДанных.Добавление);
	Если ЗначениеЗаполнено(НайденныйКлиент) Тогда 
		Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			НайденныйКонтакт	= СоздатьНовыйКонтакт(НайденныйКлиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(сфпЗвонок) Тогда
			Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, НайденныйКлиент));
		КонецЕсли;
		Если ЗначениеЗаполнено(сфпИнтерес) Тогда
			Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, НайденныйКлиент));
		КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Партнер",			НайденныйКлиент);
		Структура.Вставить("КонтактноеЛицо",	НайденныйКонтакт);
		ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", Структура);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура создает нового клиента.
//
Процедура ЗарегистрироватьКлиента(Команда)
	Если НЕ ПроверкаЗаполнения() Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйКлиент) Тогда
		Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			НайденныйКонтакт	= СоздатьНовыйКонтакт(НайденныйКлиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			Если ЗначениеЗаполнено(сфпЗвонок) Тогда
				Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, НайденныйКлиент));
			КонецЕсли;
			Если ЗначениеЗаполнено(сфпИнтерес) Тогда
				Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, НайденныйКлиент));
			КонецЕсли;
			Если ОткрытьКарточкуКлиента Тогда
				ПоказатьЗначение(, НайденныйКлиент);
			КонецЕсли;
			Если СоздаемИзВходящегоПисьма Тогда
				Оповестить("Создан новый партнер из письма", НайденныйКонтакт);
			Иначе
				Оповестить("Создан новый партнер", НайденныйКонтакт, ЭтотОбъект);
			КонецЕсли;
		Иначе	
			Если СоздаемИзВходящегоПисьма Тогда
				Оповестить("Создан новый партнер из письма", НайденныйКлиент);
			Иначе
				Оповестить("Создан новый партнер", НайденныйКлиент, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;	
		СтруктураВозврата = Новый Структура("Клиент, Контакт", НайденныйКлиент, НайденныйКонтакт);
		Закрыть(СтруктураВозврата);
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьКлиентаЗавершение", ЭтотОбъект);
		НайтиДубли(ОписаниеОповещения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура создает нового клиента.
//
Процедура ЗарегистрироватьКлиентаЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт
	
	Если НайденыДубли Тогда Возврат; КонецЕсли;
	НайденныйКлиент = СоздатьНовогоКлиента();
	ОтобразитьИзменениеДанных(НайденныйКлиент, ВидИзмененияДанных.Добавление);
	Если ЗначениеЗаполнено(НайденныйКлиент) Тогда 
		Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			НайденныйКонтакт	= СоздатьНовыйКонтакт(НайденныйКлиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(сфпЗвонок) Тогда
			Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, НайденныйКлиент));
		КонецЕсли;
		Если ЗначениеЗаполнено(сфпИнтерес) Тогда
			Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, НайденныйКлиент));
		КонецЕсли;
		Если ОткрытьКарточкуКлиента Тогда
			ПоказатьЗначение(, НайденныйКлиент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			Если СоздаемИзВходящегоПисьма  Тогда
				Оповестить("Создан новый партнер из письма", НайденныйКонтакт);
			Иначе
				Оповестить("Создан новый партнер", НайденныйКонтакт, ЭтотОбъект);
			КонецЕсли;
		Иначе	
			Если СоздаемИзВходящегоПисьма  Тогда
				Оповестить("Создан новый партнер из письма", НайденныйКлиент);
			Иначе
				Оповестить("Создан новый партнер", НайденныйКлиент, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Если ДляВыбора Тогда
			
			ОповеститьОВыборе(НайденныйКлиент);
			
		Иначе
			
			СтруктураВозврата = Новый Структура("Клиент, Контакт", НайденныйКлиент, НайденныйКонтакт);
			Закрыть(СтруктураВозврата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Преобразовать список полей в строку
//
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей)
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Представление + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "СТРАНА" Тогда
			СтрокаТабличнойЧасти.Страна = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "РЕГИОН" Тогда
			СтрокаТабличнойЧасти.Регион = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ГОРОД" Тогда
			СтрокаТабличнойЧасти.Город = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
//Создает нового клиента по заполненым полям
//
Функция СоздатьНовогоКлиента()
	
	ТекстСообщения = "";
	
	НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
	НовыйПартнер.Заполнить(Неопределено);
	
	НовыйПартнер.ЮрФизЛицо					= ВидПартнера;
		
	НовыйПартнер.Наименование				= Наименование;
	НовыйПартнер.НаименованиеПолное			= ?(ЗначениеЗаполнено(НаименованиеПолное),НаименованиеПолное,Наименование);
	Если (НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо) И НЕ ПустаяСтрока(НаименованиеПолное) Тогда
		СтрокаНаименования 					= СокрЛП(НаименованиеПолное); 
		ПозицияПробела 						= Найти(СтрокаНаименования, " ");
		Если ПозицияПробела > 0 Тогда
			НовыйПартнер.CRM_Фамилия		= Лев(СтрокаНаименования, ПозицияПробела - 1);
			СтрокаНаименования				= СокрЛП(Сред(СтрокаНаименования, ПозицияПробела));
			ПозицияПробела 					= Найти(СтрокаНаименования, " ");
			Если ПозицияПробела > 0 Тогда
				НовыйПартнер.CRM_Имя		= Лев(СтрокаНаименования, ПозицияПробела - 1);
				НовыйПартнер.CRM_Отчество	= СокрЛП(Сред(СтрокаНаименования, ПозицияПробела));
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	НовыйПартнер.БизнесРегион				= БизнесРегион;
	НовыйПартнер.Родитель					= ГоловноеПредприятие;
	
	НовыйПартнер.CRM_ОсновнаяОтрасль		= ОсновнаяОтрасль;
	НовыйПартнер.ОсновнойМенеджер			= ОсновнойМенеджер;
	НовыйПартнер.ГруппаДоступа				= ГруппаДоступа;
	НовыйПартнер.Комментарий				= Комментарий;
	НовыйПартнер.CRM_НапоминатьОДнеРождения	= Истина;
	НовыйПартнер.ДатаРегистрации			= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	
	Если ЗначениеЗаполнено(ВидТелефонаКлиента) И ЗначениеЗаполнено(Телефон) Тогда
		КодСтраныСтрока	= ?(ЗначениеЗаполнено(КодСтраны), СокрЛП(КодСтраны), "");
		Если НЕ ПустаяСтрока(КодСтраныСтрока) И (Найти(КодСтраныСтрока, "+") = 0) Тогда
			КодСтраныСтрока = "+" + КодСтраныСтрока;
		КонецЕсли;	
		СписокПолей	= Новый СписокЗначений;
		СписокПолей.Добавить(КодСтраныСтрока,   "КодСтраны");
		СписокПолей.Добавить(КодГорода,     	"КодГорода");
		СписокПолей.Добавить(Телефон, 			"НомерТелефона");
		СписокПолей.Добавить(ДобНомер,    		"Добавочный");
		СписокПолей.Добавить("",   				"Комментарий");
		
		CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПартнер, CRM_ОбщегоНазначенияСервер.ЗначениеПолейВXML(СписокПолей, ВидТелефонаКлиента.Тип)
			, ВидТелефонаКлиента, ВидТелефонаКлиента.Тип,,, Истина);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидEmailКлиента) И ЗначениеЗаполнено(Email) Тогда
		НовыйКонтакт						= НовыйПартнер.КонтактнаяИнформация.Добавить();
		НовыйКонтакт.Вид					= ВидEmailКлиента;
		НовыйКонтакт.Тип					= ВидEmailКлиента.Тип;
 		НовыйКонтакт.Представление			= СокрЛП(Email);
		НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;				

		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Email);
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
		
		Если Результат.Количество() > 0 Тогда
			НовыйКонтакт.АдресЭП = Результат[0].Адрес;
			
			Поз = Найти(НовыйКонтакт.АдресЭП, "@");
			Если Поз <> 0 Тогда
				НовыйКонтакт.ДоменноеИмяСервера = Сред(НовыйКонтакт.АдресЭП, Поз+1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ВидАдреса) И ЗначениеЗаполнено(Адрес) Тогда
		Для Каждого Стр Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если Стр.ИмяРеквизита = "Адрес" Тогда
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПартнер, Стр.Значение, ВидАдреса, ВидАдреса.Тип);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	CRM_ЗаписатьВсеТипыОтношений(НовыйПартнер);
	
	//заполнение КЛ
	Если ЗначениеЗаполнено(ФамилияКонтактногоЛица) ИЛИ ЗначениеЗаполнено(ИмяКонтактногоЛица) ИЛИ ЗначениеЗаполнено(ОтчествоКонтактногоЛица) Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		
		КонтактноеЛицо.Автор = Пользователи.ТекущийПользователь();
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо.Автор) Тогда
			КонтактноеЛицо.Автор = Пользователи.АвторизованныйПользователь();
		КонецЕсли;

		КонтактноеЛицо.Наименование	= СокрЛП((?(ЗначениеЗаполнено(ФамилияКонтактногоЛица),   			СокрЛП(ФамилияКонтактногоЛица) + " ", "")
									+ ?(ЗначениеЗаполнено(ИмяКонтактногоЛица), 	 				СокрЛП(ИмяКонтактногоЛица) + " ", "")
									+ ?(ЗначениеЗаполнено(ОтчествоКонтактногоЛица),  			СокрЛП(ОтчествоКонтактногоЛица), "")));   
		КонтактноеЛицо.CRM_Фамилия					= ФамилияКонтактногоЛица;
		КонтактноеЛицо.CRM_Имя						= ИмяКонтактногоЛица;
		КонтактноеЛицо.CRM_Отчество					= ОтчествоКонтактногоЛица;
		
		КонтактноеЛицо.CRM_Состояние				= Перечисления.CRM_Состояние.Работает;
		КонтактноеЛицо.CRM_Должность				= Должность;
		КонтактноеЛицо.CRM_НапоминатьОДнеРождения	= Истина;
		КонтактноеЛицо.ДатаРегистрацииСвязи = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();

		Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
			Если НЕ ПустаяСтрока(КодСтраныКонтактногоЛица) И (Найти(КодСтраныКонтактногоЛица, "+") = 0) Тогда
				КодСтраныСтрока = "+" + КодСтраныКонтактногоЛица;
			Иначе
				КодСтраныСтрока = КодСтраныКонтактногоЛица;
			КонецЕсли;				
			СписокПолей 			= Новый СписокЗначений;
			СписокПолей.Добавить(КодСтраныСтрока,     				"КодСтраны");
			СписокПолей.Добавить(КодГородаКонтактногоЛица,     		"КодГорода");
			СписокПолей.Добавить(ТелефонКонтактногоЛица, 			"НомерТелефона");
			СписокПолей.Добавить(ДобНомерКонтактногоЛица,    		"Добавочный");
			СписокПолей.Добавить("",   				"Комментарий");
			
			CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицо, CRM_ОбщегоНазначенияСервер.ЗначениеПолейВXML(СписокПолей, ВидТелефонаКонтактногоЛица.Тип)
				, ВидТелефонаКонтактногоЛица, ВидТелефонаКонтактногоЛица.Тип,,, Истина);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидEmailКонтактногоЛица) И ЗначениеЗаполнено(EmailКонтактногоЛица) Тогда
			НовыйКонтакт						= КонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НовыйКонтакт.Вид					= ВидEmailКонтактногоЛица;
			НовыйКонтакт.Тип					= ВидEmailКонтактногоЛица.Тип;
			НовыйКонтакт.Представление			= СокрЛП(EmailКонтактногоЛица);
			НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;

			Попытка
				Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(EmailКонтактногоЛица);
			Исключение
				СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат Неопределено;
			КонецПопытки;
			
			Если Результат.Количество() > 0 Тогда
				НовыйКонтакт.АдресЭП = Результат[0].Адрес;
				
				Поз = Найти(НовыйКонтакт.АдресЭП, "@");
				Если Поз <> 0 Тогда
					НовыйКонтакт.ДоменноеИмяСервера = Сред(НовыйКонтакт.АдресЭП, Поз+1);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтактнаяИнформацияДругоеВид) И ЗначениеЗаполнено(КонтактнаяИнформацияДругое) Тогда
			
			НовыйКонтакт 						= КонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НовыйКонтакт.Вид					= КонтактнаяИнформацияДругоеВид;
			НовыйКонтакт.Тип					= КонтактнаяИнформацияДругоеВид.Тип;
			НовыйКонтакт.Представление 			= СокрЛП(КонтактнаяИнформацияДругое);
			
		КонецЕсли;
		
		Попытка
			
			НовыйПартнер.Записать();
			КонтактноеЛицо.Владелец = НовыйПартнер.Ссылка;
			КонтактноеЛицо.Записать();
			НовыйПартнер.CRM_ОсновноеКонтактноеЛицо = КонтактноеЛицо.Ссылка;
			НайденныйКонтакт	= КонтактноеЛицо.Ссылка;
			
			Если ЗначениеЗаполнено(КонтактнаяИнформацияДругоеВид) И ЗначениеЗаполнено(КонтактнаяИнформацияДругое) Тогда
				
				Если Метаданные.Обработки.Найти("CRM_РаботаСМессенджером"+КонтактнаяИнформацияДругоеВид.Наименование) <> Неопределено Тогда
					CRM_РаботаСМессенджерамиСервер.СвязатьВсеСообщенияПользователяСКонтактом(КонтактнаяИнформацияДругоеВид.Наименование, КонтактнаяИнформацияДругое, НайденныйКонтакт);
				КонецЕсли;
				
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		НовыйПартнер.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;		
	КонецПопытки;
		
	Если СоздаватьКонтрагента Тогда
		ОбъектКонтрагент							= Справочники.Контрагенты.СоздатьЭлемент();
		ОбъектКонтрагент.Партнер					= НовыйПартнер.Ссылка;
		ОбъектКонтрагент.ЮрФизЛицо					= ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании);
		ОбъектКонтрагент.Наименование				= НовыйПартнер.Наименование;
		ОбъектКонтрагент.НаименованиеПолное			= НовыйПартнер.НаименованиеПолное;
		ОбъектКонтрагент.НДСпоСтавкам4и2		= ?(Поставщик И ЭтоКомпания = 0 И ВидКомпании <> 1, НДСпоСтавкам4и2, Ложь);
		ОбъектКонтрагент.ИНН					= ?(ЭтоКомпания = 0,?(ВидКомпании <> 1,ИНН,""),ИННПартнерФизЛицо);
		ОбъектКонтрагент.КПП					= ?(ЭтоКомпания = 0 И (ВидКомпании = 0 Или ВидКомпании = 3),КПП,"");
		ОбъектКонтрагент.КодПоОКПО				= ?(ЭтоКомпания = 0 И ВидКомпании <> 1,КодПоОКПО,"");
		ОбъектКонтрагент.СтранаРегистрации		= ?(ОбъектКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, СтранаРегистрации, Справочники.СтраныМира.Россия);
		ОбъектКонтрагент.РегистрационныйНомер	= ?(ОбъектКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, РегистрационныйНомер, "");
		
		Если ЗначениеЗаполнено(ВидАдреса) И ЗначениеЗаполнено(Адрес) Тогда
			
			Для Каждого Стр Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если Стр.ИмяРеквизита = "Адрес" Тогда
					УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ОбъектКонтрагент, Стр.Значение, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Перечисления.ТипыКонтактнойИнформации.Адрес);
					УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ОбъектКонтрагент, Стр.Значение, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Перечисления.ТипыКонтактнойИнформации.Адрес);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Попытка
			ОбъектКонтрагент.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Если ПотенциальныйКлиент <> Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка() Тогда
			ПотенциальныйКлиентОбъект = ПотенциальныйКлиент.ПолучитьОбъект();
			
			ПотенциальныйКлиентОбъект.Партнер = НовыйПартнер.Ссылка;
			
			ПотенциальныйКлиентОбъект.Записать();
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	СегментыСервер.ПроверитьВхождениеПартнераВСегментыПриСоздании(НовыйПартнер.Ссылка);
	
	Возврат НовыйПартнер.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтактноеЛицо(ТекПартнер)
	
	Возврат ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
//Функция создает Структуру реквизитов для поиска партнеров
//
Функция СоздатьСтруктуруПоиска()
	
	СтруктураПоиска = Новый Структура;
	
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если РеквизитыПоиска <> Неопределено Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = Найти(Значение,";");
		
					СтруктураПоиска.Вставить(Сред(Значение,1,ТочкаСЗапятой-1),Сред(Значение,ТочкаСЗапятой+1));
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФИОИзНаименования(Знач СтрНаименование)
	Пока Найти(СтрНаименование, "  ") > 0 Цикл
		СтрНаименование = СтрЗаменить(СтрНаименование, "  ", " ");
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
	
	СтрНаименование = СтрЗаменить(СтрНаименование, " ", Символы.ПС);
	Для н = 1 По СтрЧислоСтрок(СтрНаименование) Цикл
		ТекСтр = СтрПолучитьСтроку(СтрНаименование, н);
		Если н = 1 Тогда
			СтруктураРезультат.Фамилия = ТекСтр;
		ИначеЕсли н = 2 Тогда
			СтруктураРезультат.Имя = ТекСтр;
		ИначеЕсли н = 3 Тогда
			СтруктураРезультат.Отчество = ТекСтр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКПП()
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Элементы.КПП.Видимость 		   			 = Ложь;
		Элементы.КодПоОКПО.Видимость   			 = Ложь;
		Элементы.ГруппаИННЧастноеЛицо.Видимость  = Истина;
	Иначе
		Элементы.КПП.Видимость 	   	  			 = Истина;
		Элементы.КодПоОКПО.Видимость   			 = Истина;
		Элементы.ГруппаИННЧастноеЛицо.Видимость  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидПартнера = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидКлиента");
	Если НЕ ЗначениеЗаполнено(ВидПартнера) Тогда
		ВидПартнера = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		ДляВыбора = Истина;
	КонецЕсли;
	
	ОсновнойМенеджер	= Пользователи.ТекущийПользователь();
	
	ИзменитьПараметрыВыбораВидаТелефона();
	ИзменитьПараметрыВыбораВидаАдреса();
	ИзменитьПараметрыВыбораВидаEmail();
	
	// +CRM Модуль
	ПравоИзмененияОбъекта               = Истина;
	ИспользуютсяТолькоПартнеры  = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	СоздаватьКонтрагента = ИспользуютсяТолькоПартнеры;
	
	Если СоздаватьКонтрагента Тогда
		
		Элементы.СоздаватьКонтрагента.Видимость = Ложь;
		
	Иначе
		
		Элементы.ДекорацияСоздатьКонтрагента.Видимость = Ложь;
	
	КонецЕсли;
	// -CRM Модуль	
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗначенияЗаполнения = Параметры.ЗначенияЗаполнения;
		Если ЗначенияЗаполнения.Свойство("Родитель") Тогда
			ГоловноеПредприятие = ЗначенияЗаполнения.Родитель;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") Тогда
		
		Основание = Параметры.Основание;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			
			Email 						= Основание.ОтправительАдрес;	
			
			ВидEmailКонтактногоЛица		= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			EmailКонтактногоЛица		= Основание.ОтправительАдрес;
			
			ОткрытьКарточкуКлиента		= Ложь;
			СоздаемИзВходящегоПисьма 	= Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//+СофтФон
	// Если передан телефон, то добавим его в контактную информацию
	Если Параметры.Свойство("Телефон") Тогда
		
		Если Найти(Параметры.Телефон, ";") > 0 Тогда
			МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.Телефон, ";");
		ИначеЕсли Найти(Параметры.Телефон, ",") > 0 Тогда
			МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.Телефон, ",");
		Иначе
			МассивСтроки = Новый Массив();
			МассивСтроки.Добавить(Параметры.Телефон);
		КонецЕсли;	
		СтрокаМассива = МассивСтроки[0];
		
		СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаМассива);
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			ВидТелефонаКлиента	= Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
			CRM_ФизЛицо			= Истина;
			ВидПартнера			= Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе	
			ВидТелефонаКлиента	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			CRM_ФизЛицо			= Ложь;
			ВидПартнера			= Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;	
		ИзменитьПараметрыВыбораВидаТелефона();
		КодСтраны 	= СтруктураНомера.КодСтраны;
		КодГорода 	= СтруктураНомера.КодГорода;
		Телефон		= СтруктураНомера.НомерТелефона;
		// Иначе, если подключен СофтФон, то берем коды из настроек Софтфона 
	ИначеЕсли сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
		КодСтраны 	= сфпПараметрыСервера.КодСтраны;
		КодГорода 	= сфпПараметрыСервера.КодГорода;
	КонецЕсли;
	Если Параметры.Свойство("Звонок") Тогда
		сфпЗвонок = Параметры.Звонок;
	КонецЕсли;			
	//-СофтФон
	
	Если Параметры.Свойство("ЗагружатьНастройки") Тогда
		ЗагружатьНастройки = НЕ Параметры.ЗагружатьНастройки;
		Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость = ЗагружатьНастройки;
	КонецЕсли;	
	
	Если Параметры.Свойство("ПараметрыНового") Тогда
		ПотенциальныйКлиент = Параметры.ПараметрыНового.ПотенциальныйКлиент;
		Наименование		= Параметры.ПараметрыНового.Наименование;
		НаименованиеПолное		= Параметры.ПараметрыНового.НаименованиеПолное;
		ВидEmailКлиента		= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		Email				= Параметры.ПараметрыНового.АдресПочты;
		Если Параметры.ПараметрыНового.Свойство("АдресПочтыКонтакта") Тогда
			ВидEmailКонтактногоЛица		= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			EmailКонтактногоЛица	= Параметры.ПараметрыНового.АдресПочтыКонтакта;
		КонецЕсли;
		Если Параметры.ПараметрыНового.Свойство("ВидПартнера") Тогда
			ВидПартнера = Параметры.ПараметрыНового.ВидПартнера;
		КонецЕсли;
		Если Параметры.ПараметрыНового.Свойство("ПараметрыКЛ") Тогда
			Если ВидПартнера = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
				ФамилияКонтактногоЛица		= Параметры.ПараметрыНового.ПараметрыКЛ.Фамилия;
				ИмяКонтактногоЛица	= Параметры.ПараметрыНового.ПараметрыКЛ.Имя;
				ОтчествоКонтактногоЛица	= Параметры.ПараметрыНового.ПараметрыКЛ.Отчество;
			Иначе
				Фамилия		= Параметры.ПараметрыНового.ПараметрыКЛ.Фамилия;
				Имя	= Параметры.ПараметрыНового.ПараметрыКЛ.Имя;
				Отчество	= Параметры.ПараметрыНового.ПараметрыКЛ.Отчество;
			КонецЕсли;
		КонецЕсли;
		Если Параметры.Свойство("ОснованиеОбращения") Тогда
			Если ТипЗнч(Параметры.ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
				КонтактнаяИнформацияДругоеВид = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Параметры.ОснованиеОбращения.УчетнаяЗапись, Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
				КонтактнаяИнформацияДругое = CRM_РаботаСМессенджерамиСерверПовтИсп.НачалоАдресаСтраницыПользователя(Параметры.ОснованиеОбращения.УчетнаяЗапись) + Параметры.ОснованиеОбращения.ID_Пользователя;
				Элементы.ГруппаДругаяКонтактнаяИнформация.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		ВидТелефонаКонтактногоЛица = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		Если ВидПартнера = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			ВидТелефонаКлиента = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			КодСтраныКонтактногоЛица = КодСтраны;
			КодГородаКонтактногоЛица = КодГорода;
			ТелефонКонтактногоЛица = Телефон;
			ДобНомерКонтактногоЛица = ДобНомер;
			КодСтраны = "";
			КодГорода = "";
			Телефон = "";
			ДобНомер = "";
			Email = "";
		Иначе
			ВидТелефонаКлиента = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
			EmailКонтактногоЛица = "";
		КонецЕсли;	
	КонецЕсли;
	
	
	Если Параметры.Свойство("ПотенциальныйКлиент") И ЗначениеЗаполнено(Параметры.ПотенциальныйКлиент) Тогда
		
		ПотенциальныйКлиент	= Параметры.ПотенциальныйКлиент;
		Наименование		= ПотенциальныйКлиент.Наименование;

		ВидТелефонаКонтактногоЛица			= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		СтрокаТелефонаПотенциальногоКлиента	= ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента, "Вид");
		
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Если ЗначениеЗаполнено(СтрокаТелефонаПотенциальногоКлиента.Представление) Тогда
				СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТелефонаПотенциальногоКлиента.Представление);
			Иначе
				СтруктураКИ = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТелефонаПотенциальногоКлиента.ЗначенияПолей);
			КонецЕсли;
			КодСтраныКонтактногоЛица 	= СтруктураКИ.КодСтраны;
			КодГородаКонтактногоЛица	= СтруктураКИ.КодГорода;
			ТелефонКонтактногоЛица		= СтруктураКИ.НомерТелефона;
		КонецЕсли;
		
		ВидEmailКонтактногоЛица	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента, "Вид");
		
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) И ЗначениеЗаполнено(СтрокаЭлектронногоАдресаПотенциальногоКлиента.Вид.ИмяПредопределенныхДанных) Тогда
			EmailКонтактногоЛица = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		Элементы.ОткрытьКарточкуКлиента.Видимость					= Ложь;
		Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость	= Ложь;
		
		СтрокаДругойКИПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "Тип");
		
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено) И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером"+СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			КонтактнаяИнформацияДругоеВид = Обработки["CRM_РаботаСМессенджером"+СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			КонтактнаяИнформацияДругое = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.ГруппаДругаяКонтактнаяИнформация.Видимость = Истина;
		КонецЕсли;
				
		ОткрытьКарточкуКлиента = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПотенциальныйКлиентСтруктура") Тогда
		
		ПотенциальныйКлиентСтруктура = Параметры.ПотенциальныйКлиентСтруктура;
		
		Наименование = ПотенциальныйКлиентСтруктура.Наименование;
		ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ОсновнойМенеджер, "ПравоваяФормаКлиентаПоУмолчанию");
		НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Наименование),СокрЛП(ПравоваяФорма)+" """+СокрЛП(Наименование)+"""");
		
		ФИОКЛ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Наименование, " ");
		
		Если ФИОКЛ.Количество() > 0 Тогда
			ФамилияКонтактногоЛица = ФИОКЛ[0];
		КонецЕсли;
		Если ФИОКЛ.Количество() > 1 Тогда
			ИмяКонтактногоЛица = ФИОКЛ[1];
		КонецЕсли;
		Если ФИОКЛ.Количество() > 2 Тогда
			ОтчествоКонтактногоЛица = ФИОКЛ[2];
		КонецЕсли;
		
		ВидТелефонаКонтактногоЛица = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		
		Если НЕ (ПотенциальныйКлиентСтруктура.Телефон = "") Тогда
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
			
			СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ПотенциальныйКлиентСтруктура.Телефон);
			
			КодСтраныКонтактногоЛица = СтруктураКИ.КодСтраны;
			КодГородаКонтактногоЛица = СтруктураКИ.КодГорода;
			ТелефонКонтактногоЛица	 = СтруктураКИ.НомерТелефона;
			
		КонецЕсли;
		
		ВидEmailКонтактногоЛица	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		EmailКонтактногоЛица = ПотенциальныйКлиентСтруктура.АдресЭП;
		
		Элементы.ОткрытьКарточкуКлиента.Видимость					= Ложь;
		Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость	= Ложь;
		
		ОткрытьКарточкуКлиента = Ложь;
		
	КонецЕсли;
	
	ПредставлениеВыбраноИзСписка = Ложь;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// +CRM
	РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = Ложь;
	Элементы.EmailКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидEmailКонтактногоЛица);
	Элементы.ГруппаТелефонКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица);
	// -CRM
	
	Если Параметры.Свойство("ЗаголовокФормыВладельца") Тогда
		
		Если Параметры.ЗаголовокФормыВладельца = НСтр("ru='Партнеры (Клиенты)'") Тогда
			Клиент = Истина;
		ИначеЕсли Параметры.ЗаголовокФормыВладельца = НСтр("ru='Партнеры (Поставщики)'") Тогда
			Поставщик = Истина;
		ИначеЕсли Параметры.ЗаголовокФормыВладельца = НСтр("ru='Партнеры (Конкуренты)'") Тогда
			Конкурент = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//+УТ
	
	//группы доступа
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма, "ГруппаДоступа",, Тип("СправочникСсылка.Партнеры"), Истина);
	ИспользуютсяГруппыДоступаПартнеров = Справочники.ГруппыДоступаПартнеров.ИспользуютсяГруппыДоступа();
	Если Не ИспользуютсяГруппыДоступаПартнеров Тогда
		Элементы.ГруппаДоступа.Видимость = Ложь;
	КонецЕсли;
	
	//заполнение Партнера по Контрагенту из типовой УТ
	Если Параметры.Свойство("КонтрагентОснование") И ТипЗнч(Параметры.КонтрагентОснование) = Тип("Структура") Тогда
		
		ЗаполнитьНаОснованииКонтрагента(Параметры.КонтрагентОснование,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	
	УправлениеДоступностьюПервичнаяИнформация();
	//-УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") И НЕ (ВладелецФормы.Элементы.Найти("СтрокаПоиска") = Неопределено)
	//	И ЗначениеЗаполнено(ВладелецФормы.СтрокаПоиска) Тогда
	//	// +CRM Модуль
	//	//Если ВидПартнера = ПредопределенноеЗначение("Перечисление.CRM_ВидПартнера.Компания") Тогда
	//	// -CRM Модуль
	//		Наименование = ВладелецФормы.СтрокаПоиска;
	//	// +CRM Модуль	
	//	//Иначе
	//	//	Фамилия = ВладелецФормы.СтрокаПоиска;
	//	//КонецЕсли;
	//	// -CRM Модуль
	//КонецЕсли;
	//// +CRM Модуль
	////Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") И ЗначениеЗаполнено(Наименование) Тогда
	//Если ЗначениеЗаполнено(Наименование) Тогда
	//// -CRM Модуль	
	//	ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ОсновнойМенеджер, "ПравоваяФормаКлиентаПоУмолчанию");
	//	НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Наименование),СокрЛП(ПравоваяФорма)+" """+СокрЛП(Наименование)+"""");
	//КонецЕсли;
	//// +CRM Модуль
	//Если ЗначениеЗаполнено(CRM_УТ_ЮрФизЛицоИзПараметра) Тогда
	//	ЮрФизЛицо = CRM_УТ_ЮрФизЛицоИзПараметра; 
	//КонецЕсли;
	//// -CRM Модуль
	//ВидПартнераПриИзменении(Неопределено);
	//
	//Если ЗначениеЗаполнено(Наименование) И Не ЗначениеЗаполнено(Фамилия) И Не ЗначениеЗаполнено(Имя) И Не ЗначениеЗаполнено(Отчество) Тогда
	//	СтруктураФИО = ФИОИзНаименования(Наименование);
	//	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураФИО);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(Наименование) Тогда
	//	НаименованиеПриИзменении(Элементы.Наименование);
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
	//	Если ЗначениеЗаполнено(Наименование) 
	//	   И Не ЗначениеЗаполнено(ФамилияКонтактногоЛица) 
	//	   И Не ЗначениеЗаполнено(ИмяКонтактногоЛица) 
	//	   И Не ЗначениеЗаполнено(ОтчествоКонтактногоЛица) Тогда
	//	   
	//		СтруктураФИО = ФИОИзНаименования(Наименование);
	//		
	//	    ФамилияКонтактногоЛица  = СтруктураФИО.Фамилия;
	//		ИмяКонтактногоЛица 	    = СтруктураФИО.Имя;
	//		ОтчествоКонтактногоЛица = СтруктураФИО.Отчество;
	//		
	//	КонецЕсли;
	//	ВидEmailКонтактногоЛица = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица");
	//	ВидТелефонаКонтактногоЛица = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
	//	
	//	ОткрытьКарточкуКлиента = Ложь;
	//	
	//КонецЕсли;
	
	ВидПартнераПриИзменении(Неопределено);

	CRM_ЗаполнитьВсеТипыОтношений();
	CRM_ЗаполнитьТипыОтношений();
	
	Элементы.EmailКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидEmailКонтактногоЛица);
	Элементы.ГруппаТелефонКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица);
	// ПроверкаКонтрагентовИспользуется = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	                              
	Элементы.ГруппаТелефон.Доступность = ЗначениеЗаполнено(ВидТелефонаКлиента);
	Элементы.Email.Доступность = ЗначениеЗаполнено(ВидEmailКлиента);
	Элементы.Адрес.Доступность = ЗначениеЗаполнено(ВидАдреса);

	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ГруппаТелефон.Доступность = ЗначениеЗаполнено(ВидТелефонаКлиента);
	Элементы.Email.Доступность = ЗначениеЗаполнено(ВидEmailКлиента);
	Элементы.Адрес.Доступность = ЗначениеЗаполнено(ВидАдреса);
	
	ЗаполнитьКИ_Описание(ВидАдреса);
	Если Параметры.Свойство("ПотенциальныйКлиентСтруктура") ИЛИ Параметры.Свойство("ПотенциальныйКлиент") Тогда
		ВидТелефонаКонтактногоЛица = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		ВидEmailКонтактногоЛица	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		
		ОткрытьКарточкуКлиента = Ложь;
		
	КонецЕсли;
 	Элементы.ГруппаТелефонКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица);
	Элементы.EmailКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидEmailКонтактногоЛица);
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Если Параметры.Свойство("ПотенциальныйКлиентСтруктура") ИЛИ Параметры.Свойство("ПотенциальныйКлиент") Тогда
			Если Не ЗначениеЗаполнено(Телефон) Тогда
				КодСтраны = КодСтраныКонтактногоЛица;
				КодГорода = КодГородаКонтактногоЛица;
				Телефон = ТелефонКонтактногоЛица;
				ДобНомер = ДобНомерКонтактногоЛица;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Email) Тогда
				Email = EmailКонтактногоЛица;
			КонецЕсли;
			КодСтраныКонтактногоЛица = "";
			КодГородаКонтактногоЛица = "";
			ТелефонКонтактногоЛица = "";
			ДобНомерКонтактногоЛица = "";
			EmailКонтактногоЛица = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменение КПП" Тогда
		Если ЭтотОбъект.УникальныйИдентификатор = Источник Тогда 
			КПП = Параметр;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ

&НаКлиенте
Процедура ВидПартнераПриИзменении(Элемент)	
	
	УстановитьВидимостьКПП();
	
	ИзменитьПараметрыВыбораВидаТелефона();
	ИзменитьПараметрыВыбораВидаАдреса();
	ИзменитьПараметрыВыбораВидаEmail();
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		// +CRM ERP
		Элементы.ГруппаВидКомпании.Видимость = Ложь;
		Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.Видимость = Ложь;
		ЭтоКомпания = 1; // 1 это Физ. лицо
		// -CRM ERP
		
		Если ЗначениеЗаполнено(Наименование) Тогда
			СтруктураФИО = ФИОИзНаименования(Наименование);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураФИО);
		КонецЕсли;
		ФамилияКонтактногоЛица = "";
		ИмяКонтактногоЛица = "";
		ОтчествоКонтактногоЛица = "";
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			КодСтраны = КодСтраныКонтактногоЛица;
			КодГорода = КодГородаКонтактногоЛица;
			Телефон = ТелефонКонтактногоЛица;
			ДобНомер = ДобНомерКонтактногоЛица;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Email) Тогда
			Email = EmailКонтактногоЛица;
		КонецЕсли;
		КодСтраныКонтактногоЛица = "";
		КодГородаКонтактногоЛица = "";
		ТелефонКонтактногоЛица = "";
		ДобНомерКонтактногоЛица = "";
		EmailКонтактногоЛица = "";
		Элементы.Наименование.КнопкаВыпадающегоСписка = Истина;
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛицаИзФИО(Фамилия, Имя, Отчество);
		Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		
	Иначе
		
		// +CRM ERP
		Элементы.ГруппаВидКомпании.Видимость = Истина;
		Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.Видимость = Истина;
		ЭтоКомпания = 0; // 0 - это юр.лицо
		// -CRM ERP
		
		Если НЕ ЗначениеЗаполнено(Наименование) И (ЗначениеЗаполнено(Фамилия) Или ЗначениеЗаполнено(Имя) Или ЗначениеЗаполнено(Отчество)) Тогда
			Наименование = СокрЛП(Фамилия);
			Наименование = Наименование + ?(ЗначениеЗаполнено(Наименование) И ЗначениеЗаполнено(СокрЛП(Имя)), " ", "") + СокрЛП(Имя);
			Наименование = Наименование + ?(ЗначениеЗаполнено(Наименование) И ЗначениеЗаполнено(СокрЛП(Отчество)), " ", "") + СокрЛП(Отчество);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФамилияКонтактногоЛица) Тогда
			ФамилияКонтактногоЛица = Фамилия;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИмяКонтактногоЛица) Тогда
			ИмяКонтактногоЛица = Имя;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОтчествоКонтактногоЛица) Тогда
			ОтчествоКонтактногоЛица = Отчество;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
			КодСтраныКонтактногоЛица = КодСтраны;
			КодГородаКонтактногоЛица = КодГорода;
			ТелефонКонтактногоЛица = Телефон;
			ДобНомерКонтактногоЛица = ДобНомер;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(EmailКонтактногоЛица) Тогда
			EmailКонтактногоЛица = Email;
		КонецЕсли;
		КодСтраны = "";
		КодГорода = "";
		Телефон = "";
		ДобНомер = "";
		Email = "";
		Элементы.Наименование.КнопкаВыпадающегоСписка = Ложь;
		Элементы.Наименование.СписокВыбора.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидТелефонаКлиентаПриИзменении(Элемент)
	
	Элементы.ГруппаТелефон.Доступность = ЗначениеЗаполнено(ВидТелефонаКлиента);
	Если ЗначениеЗаполнено(ВидТелефонаКлиента) И ЗначениеЗаполнено(БизнесРегион) И ПустаяСтрока(Телефон) Тогда
		КодСтраны = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(БизнесРегион, "CRM_КодСтраны");
		Элементы.КодСтраны.Заголовок = КодСтраны;
		КодГорода = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(БизнесРегион, "CRM_КодГорода");
		Элементы.КодГорода.Заголовок = КодГорода;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидEmailКлиентаПриИзменении(Элемент)
	
	Элементы.Email.Доступность = ЗначениеЗаполнено(ВидEmailКлиента);
	
КонецПроцедуры


&НаКлиенте
Процедура ВидТелефонаКонтактногоЛицаПриИзменении(Элемент)
	
	Элементы.ГруппаТелефонКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица);
	Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ЗначениеЗаполнено(БизнесРегион) И ПустаяСтрока(ТелефонКонтактногоЛица) Тогда
		КодСтраныКонтактногоЛица = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(БизнесРегион, "CRM_КодСтраны");
		Элементы.КодСтраныКонтактногоЛица.Заголовок = КодСтраныКонтактногоЛица;
		КодГородаКонтактногоЛица = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(БизнесРегион, "CRM_КодГорода");
		Элементы.КодГородаКонтактногоЛица.Заголовок = КодГородаКонтактногоЛица;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидEmailКонтактногоЛицаПриИзменении(Элемент)
	
	Элементы.EmailКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидEmailКонтактногоЛица);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailПриИзменении(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура EmailКонтактногоЛицаПриИзменении(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидАдресаПриИзменении(Элемент)
	
	Элементы.Адрес.Доступность = ЗначениеЗаполнено(ВидАдреса);
	
	ЗаполнитьКИ_Описание(ВидАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	CRM_УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	
	ЗаполнитьКИ_Описание(ВидАдреса)
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКонтактногоЛицаПриИзменении(Элемент)
	
	ПолКонтактноеЛицо = CRM_КлиентыКлиент.ОпределитьПол(ИмяКонтактногоЛица);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(НаименованиеПолное) Тогда
		НаименованиеПолное = СокрЛП(Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	Если ЗначениеЗаполнено(БизнесРегион) Тогда
		Если ЗначениеЗаполнено(ВидТелефонаКлиента) И ПустаяСтрока(Телефон) Тогда
			КодСтраны = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(БизнесРегион, "CRM_КодСтраны");
			Элементы.КодСтраны.Заголовок = КодСтраны;
			Если СтрНайти(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВидТелефонаКлиента, "ИмяПредопределенныхДанных"), "Мобильный") = 0 Тогда
				КодГорода = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодГорода");
				Элементы.КодГорода.Заголовок = КодГорода;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ПустаяСтрока(ТелефонКонтактногоЛица) Тогда
			КодСтраныКонтактногоЛица = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(БизнесРегион, "CRM_КодСтраны");
			Элементы.КодСтраныКонтактногоЛица.Заголовок = КодСтраныКонтактногоЛица;
			Если СтрНайти(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВидТелефонаКонтактногоЛица, "ИмяПредопределенныхДанных"), "Мобильный") = 0 Тогда
				КодГородаКонтактногоЛица = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодГорода");
				Элементы.КодГородаКонтактногоЛица.Заголовок = КодГородаКонтактногоЛица;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКПП(Команда)
	
	CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь, ЭтотОбъект.УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИННКПП()
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		
		Элементы.ГруппаИННКПП.Видимость = Истина;
		Элементы.ГруппаИННЧастноеЛицо.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаИННКПП.Видимость = Ложь;
		Элементы.ГруппаИННЧастноеЛицо.Видимость = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры// УстановитьВидимостьИННКПП()

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ЮрФизЛицоТип = ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании);
	
	ИННЗаполненКорректно = Истина;
	ЭтоЮрЛицо = ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицоТип);
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"ИНН",,);
			
	КонецЕсли;

	Если ИННЗаполненКорректно И НастройкиПодключенияКСервисуИППЗаданы И Не ВидКомпании = 3 Тогда
		
		РезультатЗапуска = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеДанныеПартнераПоИННЗапустить(ИНН,
		                                                                                               ЮрФизЛицоТип,
		                                                                                               УникальныйИдентификатор,
		                                                                                               ФоновоеЗаданиеИдентификатор);
		
		ФоновоеЗаданиеИдентификатор  = РезультатЗапуска.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатЗапуска.АдресХранилища;
		
		Если РезультатЗапуска.ЗаданиеЗапущено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПараметрыОбработчика.ТекущийИнтервал = 2;
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатЗапуска.РеквизитыКонтрагента);
		КонецЕсли;
		
	КонецЕсли;

	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект,
	                                                                     ЮрФизЛицоТип,
	                                                                     ИНН,
	                                                                     ВидКомпании = 3,
	                                                                     НастройкиПодключенияКСервисуИППЗаданы);
	// +CRM Модуль мы не используем два поля ИНН и две кнопки
	Если ЭтоКомпания = 0 И ВидКомпании  = 2 Тогда
		
		Элементы.ЗаполнитьПоИНН.Доступность = НастройкиПодключенияКСервисуИППЗаданы И Не ПустаяСтрока(ИНН);
		
	КонецЕсли; 
	
	// -CRM Модуль
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	 СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект,
	                                                                      ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании),
	                                                                      ИНН,
	                                                                      ВидКомпании = 3,
	                                                                      НастройкиПодключенияКСервисуИППЗаданы,
	                                                                      Истина);
	// +CRM Модуль мы не используем два поля ИНН и две кнопки
	Если ЭтоКомпания = 0 И ВидКомпании  = 2 Тогда
		
		Элементы.ЗаполнитьПоИНН.Доступность = НастройкиПодключенияКСервисуИППЗаданы И Не ПустаяСтрока(ИНН);
		
	КонецЕсли; 
	
	// -CRM Модуль 
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьДоступностьКомандыЗаполнитьИНН()
	
	Элементы.ЗаполнитьКПП.Доступность = (ЭтоКомпания = 0 И (ВидКомпании = 0 ИЛИ ВидКомпании = 3) И НЕ ПустаяСтрока(ИНН));
	
КонецПроцедуры

&НаСервере
// фиктивная функция, добавлена для того, чтобы не вызывал ошибку метод 
// "УправлениеКонтактнойИнформациейКлиент.ОбновитьКонтактнуюИнформациюФормы".
// Данный метод вызывается в результате выполнения обработчика 
// "УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора"
//
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	Возврат;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииКонтрагента(ДанныеКонтрагента,Отказ)
	
	// +CRM Модуль
	СоздаватьКонтрагента = Ложь;
	Элементы.ВидПартнера.Доступность = Ложь;
	Элементы.ГруппаИННЧастноеЛицо.ТолькоПросмотр = Истина;
	Элементы.ГруппаИНН.ТолькоПросмотр = Истина;
	Элементы.ГруппаИНН.Доступность    = Истина;
	Элементы.СоздаватьКонтрагента.Доступность = Ложь;
	
	ДанныеКонтрагента = Параметры.КонтрагентОснование;
	
	Если ДанныеКонтрагента.Свойство("Ссылка") Тогда
		
		КонтрагентОснование = ДанныеКонтрагента.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Контрагенты.ЮрФизЛицо,
		|	Контрагенты.ИНН,
		|	Контрагенты.КодПоОКПО,
		|	Контрагенты.КПП,
		|	Контрагенты.Наименование,
		|	Контрагенты.НДСпоСтавкам4и2,
		|	Контрагенты.КонтактнаяИнформация.(
		|		Вид,
		|		Представление,
		|		ЗначенияПолей
		|	),
		|	Контрагенты.Партнер,
		|	Контрагенты.НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДанныеКонтрагента.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.Партнер <> Справочники.Партнеры.НеизвестныйПартнер И Выборка.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ДанныеКонтрагента.Вставить("Название", Выборка.Наименование);
			ДанныеКонтрагента.Вставить("ИНН", Выборка.ИНН);
			ДанныеКонтрагента.Вставить("КодПоОКПО", Выборка.КодПоОКПО);
			ДанныеКонтрагента.Вставить("КПП", Выборка.КПП);
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", Выборка.ЮрФизЛицо);
			ДанныеКонтрагента.Вставить("НДСпоСтавкам4и2", Выборка.НДСпоСтавкам4и2);
			ДанныеКонтрагента.Вставить("ПолноеЮридическоеНаименование",Выборка.НаименованиеПолное);
			
			ТаблицаКонтактнаяИнформация = Выборка.КонтактнаяИнформация.Выгрузить();
			
			Для каждого КонтактнаяИнформация Из ТаблицаКонтактнаяИнформация Цикл
				
				Если КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ФактАдресКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ЮрАдресКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					ВидКонтактнойИнформации = "EmailКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					ВидКонтактнойИнформации = "ТелефонКонтрагента";
				Иначе
					Продолжить;
				КонецЕсли;
				
				ДанныеКонтрагента.Вставить(ВидКонтактнойИнформации,Новый Структура("Представление, ЗначенияПолей", КонтактнаяИнформация.Представление, КонтактнаяИнформация.ЗначенияПолей));
				
			КонецЦикла;
			
		Иначе
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ВидПартнера = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		
		ЭтоКомпания = 1; // 1 это физ. лицо
		
		Если ДанныеКонтрагента.Свойство("ИНН") Тогда
			
			ИННПартнерФизЛицо = ДанныеКонтрагента.ИНН;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ЮрАдресКонтрагента") Тогда
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Адрес = ДанныеКонтрагента.ФактАдресКонтрагента.Представление;
			АдресЗначенияПолей = ДанныеКонтрагента.ФактАдресКонтрагента.ЗначенияПолей;
			
		ИначеЕсли ДанныеКонтрагента.Свойство("ФактАдресКонтрагента") Тогда
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Адрес = ДанныеКонтрагента.ЮрАдресКонтрагента.Представление;
			АдресЗначенияПолей = ДанныеКонтрагента.ЮрАдресКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			ВидEmailКлиента = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			Email = ДанныеКонтрагента.EmailКонтрагента.Представление;
			EmailЗначенияПолей = ДанныеКонтрагента.EmailКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ВидТелефонаКлиента = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			Телефон = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("Название") Тогда
			
			Наименование = ДанныеКонтрагента.Название;
			
		КонецЕсли;
		
	Иначе
		
		ВидПартнера = Перечисления.КомпанияЧастноеЛицо.Компания;
		
		Если ДанныеКонтрагента.Свойство("ИНН") Тогда
			
			ИНН = ДанныеКонтрагента.ИНН;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ПолноеЮридическоеНаименование") Тогда
			
			НаименованиеПолное = ДанныеКонтрагента.ПолноеЮридическоеНаименование;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ЮрАдресКонтрагента") Тогда
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Адрес = ДанныеКонтрагента.ФактАдресКонтрагента.Представление;
			АдресЗначенияПолей = ДанныеКонтрагента.ФактАдресКонтрагента.ЗначенияПолей;
			
		ИначеЕсли ДанныеКонтрагента.Свойство("ФактАдресКонтрагента") Тогда
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Адрес = ДанныеКонтрагента.ЮрАдресКонтрагента.Представление;
			АдресЗначенияПолей = ДанныеКонтрагента.ЮрАдресКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			ВидEmailКлиента = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			Email = ДанныеКонтрагента.EmailКонтрагента.Представление;
			EmailЗначенияПолей = ДанныеКонтрагента.EmailКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ВидТелефонаКлиента = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			Телефон = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("Название") Тогда
			
			Наименование = ДанныеКонтрагента.Название;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство("КПП") Тогда
		
		КПП = ДанныеКонтрагента.КПП;
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство("КодПоОКПО") Тогда
		
		КодПоОКПО = ДанныеКонтрагента.КодПоОКПО;
		
	КонецЕсли;
	
	CRM_УТ_ЮрФизЛицоИзПараметра = ВидПартнера;
	// -CRM Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	ИННЗаполненКорректно = Истина;
	ЭтоЗаполнениеГоловногоКонтрагента = Ложь;

	ТекстСообщения = "";
	Если ПустаяСтрока(ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН,
		                                                                         ?(ЭтоКомпания = 0, ?(ВидКомпании = 0 Или ВидКомпании = 3, Истина, Ложь), Ложь),
		                                                                          ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"ИНН",,);
			
	КонецЕсли;
	
	Если ИННЗаполненКорректно И НастройкиПодключенияКСервисуИППЗаданы Тогда
		
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ?(ЭтоЗаполнениеГоловногоКонтрагента, Истина, ЭтоКомпания = 0 И ВидКомпании = 0),
		                       ИНН, 
		                       ФоновоеЗаданиеИдентификатор);
		
		ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, ЗаполнятьИНН = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
	
		ПартнерыИКонтрагентыКлиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(РеквизитыКонтрагента.ОписаниеОшибки);
		
	Иначе
		
		РезультатСравнения = ПартнерыИКонтрагентыКлиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента,
		                                                                                                         ДанныеОбъектаДляСравнения(),
		                                                                                                         ЗаполнятьИНН);
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)
	
	// +CRM Модуль
	//Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаГоловнойКонтрагент Тогда
	//	
	//	НаименованиеГоловногоКонтрагента      = РеквизитыКонтрагента.Наименование;
	//	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
	//		КПП = РеквизитыКонтрагента.КПП;
	//	КонецЕсли;
	//	ПолноеНаименованиеГоловногоКонтрагента = РеквизитыКонтрагента.НаименованиеСокращенное;
	//	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
	//		ЮридическийАдресГоловногоКонтрагента              = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
	//		ЮридическийАдресГоловногоКонтрагентаЗначенияПолей = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
	//	КонецЕсли;
	//	
	//Иначе
	//	ПолноеНаименование      = РеквизитыКонтрагента.Наименование;
	//	НаименованиеКонтрагента = РеквизитыКонтрагента.Наименование;
	// -CRM Модуль
		Наименование       = РеквизитыКонтрагента.Наименование;
		НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		Если РеквизитыКонтрагента.Свойство("КПП") Тогда
			КПП = РеквизитыКонтрагента.КПП;
		КонецЕсли;
//		ПолноеЮридическоеНаименование = РеквизитыКонтрагента.НаименованиеСокращенное;
		Если РеквизитыКонтрагента.Свойство("Телефон") И РеквизитыКонтрагента.Телефон <> Неопределено Тогда
	        ВидТелефонаКлиента = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера");
			ЗначенияПолейТелефона = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСтруктуруПолей(РеквизитыКонтрагента.Телефон.КонтактнаяИнформация);
			КодСтраны = ЗначенияПолейТелефона.КодСтраны;
			КодГорода = ЗначенияПолейТелефона.КодГорода;
			Телефон = ЗначенияПолейТелефона.НомерТелефона;
			ДобНомер = ЗначенияПолейТелефона.Добавочный;
		КонецЕсли;
		
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
			ВидАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПартнера");
			Адрес              = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
			АдресЗначенияПолей = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
			ЗаполнитьСтрокуАдреса();
			
			ЗаполнитьКИ_Описание(ВидАдреса);
			
		КонецЕсли;
	// +CRM Модуль
	//КонецЕсли;
	// -CRM Модуль
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатВыполнения.РеквизитыКонтрагента);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = ПартнерыИКонтрагентыКлиент.ИнициироватьСтруктураДанныхДляСравнения();
	
	// +CRM Модуль
	//Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
	//	ДанныеДляСравнения.Наименование            = ПолноеНаименование;
	//	ДанныеДляСравнения.КПП                     = КПП;
	//	ДанныеДляСравнения.НаименованиеСокращенное = ПолноеЮридическоеНаименование;
	//	ДанныеДляСравнения.Телефон                 = ТелефонПартнера;
	//	ДанныеДляСравнения.ЮридическийАдрес        = ЮридическийАдрес;
	//Иначе
	//	ДанныеДляСравнения.Наименование            = НаименованиеГоловногоКонтрагента;
	//	ДанныеДляСравнения.КПП                     = КППГоловногоКонтрагента;
	//	ДанныеДляСравнения.НаименованиеСокращенное = ПолноеНаименованиеГоловногоКонтрагента;
	//	ДанныеДляСравнения.ЮридическийАдрес        = ЮридическийАдресГоловногоКонтрагента;
	//КонецЕсли;

	ДанныеДляСравнения.Наименование            = НаименованиеПолное;
	ДанныеДляСравнения.КПП                     = КПП;
	ДанныеДляСравнения.НаименованиеСокращенное = Наименование;
	ДанныеДляСравнения.Телефон                 = Телефон;
	ДанныеДляСравнения.ЮридическийАдрес        = Адрес;
	// -CRM Модуль
	
	Возврат ДанныеДляСравнения;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании)
	
	Если ЭтоКомпания = 0 Тогда
		Если ВидКомпании = 0 Или ВидКомпании = 3 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		ИначеЕсли ВидКомпании = 1 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
		Иначе
			Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"); 
		КонецЕсли;
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВидКомпанииПриИзменении(Элемент)
	
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьЮридическиеРеквизитыПриИзменении(Элемент)
	
	//ВидимостьСтраницПервичнаяИнформация();
	
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюПервичнаяИнформация()
	
	//Юридические реквизиты
	//Если НЕ (НаОснованииКонтрагента Или НаОснованииОбособленногоКонтрагента) Тогда
	//	Если ЭтоКомпания = 0 Тогда
	//		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРегистрационныеДанныеФНС",
	//			"Доступность", УказыватьЮридическиеРеквизиты, Истина);
	//		Если УказыватьЮридическиеРеквизиты Тогда
	//			ПартнерыИКонтрагенты.УправлениеЭлементамиЮридическихРеквизитов(
	//				ЭтотОбъект, ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании), ВидКомпании = 3, ИНН);
	//		КонецЕсли;
	//	Иначе
	//		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДанныеКонтрагентаЧастноеЛицо",
	//			"Доступность", УказыватьЮридическиеРеквизиты, Истина);
	//		Если УказыватьЮридическиеРеквизиты Тогда
	//			УстановитьДоступностьДанныхДокументаФизлица(ЭтотОбъект);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьКПП(ЭтотОбъект,
	//                                                                     ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании),
	//                                                                     ИНН,
	//                                                                     ВидКомпании = 3,
	//                                                                     НастройкиПодключенияКСервисуИППЗаданы);
	//
	////Контактное лицо
	//УстановитьДоступностьДанныхКонтактногоЛица(ЭтотОбъект);
	//
	////Страна регистрация видна только в том случае, когда контрагент не является резидентом РФ. 
	////В противном случае - и для физ лиц и для ИП и для юр лиц страна регистрации всегда Россия.
	//Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.ТекущаяСтраница = 
	//	?((ИспользуютсяТолькоПартнеры ИЛИ УказыватьЮридическиеРеквизиты) И ВидКомпании = 1, 
	//	Элементы.ГруппаСтраницаИностраннойРегистрации, Элементы.ГруппаСтраницаРоссийскогоКонтрагента);
	
	Элементы.ГруппаВидКомпании.Доступность = (ИспользуютсяТолькоПартнеры ИЛИ СоздаватьКонтрагента);
	
	Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.Доступность = (ИспользуютсяТолькоПартнеры ИЛИ СоздаватьКонтрагента);
	
	// +CRM ERP
	Элементы.ГруппаИННЧастноеЛицо.Доступность = (ИспользуютсяТолькоПартнеры ИЛИ СоздаватьКонтрагента);
	// -CRM ERP
	
	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект,
	                                                                     ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании),
	                                                                     ИНН,
	                                                                     ВидКомпании = 3,
	                                                                     НастройкиПодключенияКСервисуИППЗаданы);
	// +CRM Модуль мы не используем два поля ИНН и две кнопки
	Если ЭтоКомпания = 0 И ВидКомпании  = 2 Тогда
		
		Элементы.ЗаполнитьПоИНН.Доступность = НастройкиПодключенияКСервисуИППЗаданы И Не ПустаяСтрока(ИНН);
		
	КонецЕсли; 
	
	// -CRM Модуль
	
	Элементы.ГруппаКПП.Видимость = ВидКомпании <> 2;
	
	//Страна регистрация видна только в том случае, когда контрагент не является резидентом РФ. 
	//В противном случае - и для физ лиц и для ИП и для юр лиц страна регистрации всегда Россия.
	Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.ТекущаяСтраница = 
		?((ИспользуютсяТолькоПартнеры ИЛИ СоздаватьКонтрагента) И ВидКомпании = 1, 
		Элементы.ГруппаСтраницаИностраннойРегистрации, Элементы.ГруппаСтраницаРоссийскогоКонтрагента);
	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуАдреса()
	
	КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	
	Если ЗначениеЗаполнено(ВидАдреса) Тогда
		
		Элементы.Адрес.РедактированиеТекста = НЕ ВидАдреса.РедактированиеТолькоВДиалоге;
		
		НовСтр								= КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		НовСтр.ИмяРеквизита					= "Адрес";
		НовСтр.Вид							= ВидАдреса.Ссылка;
		НовСтр.Тип							= ВидАдреса.Тип;
		НовСтр.ЗначенияПолей				= АдресЗначенияПолей;
		НовСтр.Представление				= Адрес;
		НовСтр.Комментарий					= "";
		НовСтр.ЭтоРеквизитТабличнойЧасти	= Ложь;
		НовСтр.Выводить						= Истина;
		НовСтр.Родитель						= ВидАдреса.Родитель;
		НовСтр.ИмяЭлементаДляРазмещения		= "Адрес";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("Поставщик",			"Поставщик",		Поставщик);
	CRM_ВсеТипыОтношений.Добавить("Клиент",				"Покупатель",		?(Клиент Или Поставщик Или Конкурент, Клиент, Истина));
	CRM_ВсеТипыОтношений.Добавить("Конкурент",			"Конкурент",		Конкурент);
	CRM_ВсеТипыОтношений.Добавить("Перевозчик",			"Перевозчик",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("ПрочиеОтношения",	"Прочие отношения",	Ложь);
	CRM_ВсеТипыОтношений.Добавить("ОбслуживаетсяТорговымиПредставителями",	"Обслуживается торговыми представителями",	Ложь);
	CRM_ВсеТипыОтношений.Добавить("CRM_Госорганы",		"Госорганы",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("CRM_Учредитель",		"Учредитель",		Ложь);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаСервере
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений(Объект)
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;
		
		Если ТипОтношений.Значение = "Поставщик"  Тогда
				
			ПоставщикИРезидент = ТипОтношений.Пометка И ЭтоКомпания = 0 И ВидКомпании <> 1;
			Элементы.НДСпоСтавкам4и2.Доступность = ПоставщикИРезидент;
				
		КонецЕсли;
		
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	

КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		ДополнительныеПараметры.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	НовыеЗначенияТипыОтношений = Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		НовыеЗначенияТипыОтношений.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Поставщик И Не НовыеЗначенияТипыОтношений.Поставщик Тогда
		
		Если НовыеЗначенияТипыОтношений.Перевозчик Тогда
			
			ЭлементПеревозчик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Перевозчик");
			
			ЭлементПеревозчик.Пометка = Ложь;
	
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.Перевозчик И НовыеЗначенияТипыОтношений.Перевозчик Тогда
	
		Если Не НовыеЗначенияТипыОтношений.Поставщик Тогда
			
			ЭлементПоставщик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Поставщик");
			
			ЭлементПоставщик.Пометка = Истина;
	
		КонецЕсли;
	
	КонецЕсли; 
		
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Клиент И Не НовыеЗначенияТипыОтношений.Клиент Тогда
		
		Если НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
			
			ЭлементОбслуживаетсяТорговымиПредставителями = CRM_ВсеТипыОтношений.НайтиПоЗначению("ОбслуживаетсяТорговымиПредставителями");
			
			ЭлементОбслуживаетсяТорговымиПредставителями.Пометка = Ложь;
	
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.ОбслуживаетсяТорговымиПредставителями И НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
	
		Если Не НовыеЗначенияТипыОтношений.Клиент Тогда
			
			ЭлементКлиент = CRM_ВсеТипыОтношений.НайтиПоЗначению("Клиент");
			
			ЭлементКлиент.Пометка = Истина;		
	
		КонецЕсли;
	
	КонецЕсли; 
			
	CRM_ЗаполнитьТипыОтношений();
	
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// +CRM Модуль
	//Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
	// -CRM Модуль	
		Если Не ПредставлениеВыбраноИзСписка Тогда
			
			СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
			Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеВыбраноИзСписка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если ЗагружатьНастройки Тогда
		Настройки.Очистить();
	КонецЕсли;
КонецПроцедуры




