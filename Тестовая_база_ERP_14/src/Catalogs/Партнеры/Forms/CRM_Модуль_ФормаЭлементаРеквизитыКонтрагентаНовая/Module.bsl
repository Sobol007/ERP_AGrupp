
#Область ОписаниеПеременных

&НаСервере
Перем СсылкаНаКЛ;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// ЛентаСобытий

&НаКлиенте
Перем БыстрыйВвод_КэшированноеВремя;

&НаКлиенте
Перем БыстрыйВвод_КэшированнаяДатаНачала;

&НаКлиенте
Перем БыстрыйВвод_АктивенАвтоПодбор;

&НаКлиенте
Перем Лента_Прокрутить;

// Конец ЛентаСобытий

// +CRM_Модуль

&НаКлиенте
Перем ПараметрыОбработчика;

// -CRM_Модуль

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +CRM Модуль
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Объект.ЮрФизЛицо.Пустая() Тогда
		Объект.ЮрФизЛицо = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидКлиента");
	КонецЕсли;	
	
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен() ИЛИ ТолькоПросмотр;
		Если Объект.Ссылка.Пустая() Тогда
			
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.ЮрФизЛицо
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО Контрагенты.Партнер = Партнеры.Ссылка
				|ГДЕ
				|	Партнеры.Ссылка = &ЗначениеЗаполнения";
				
				Запрос.УстановитьПараметр("ЗначениеЗаполнения", Параметры.ЗначениеКопирования);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЮрФизЛицо =  Выборка.ЮрФизЛицо;
				Иначе
					ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
				
			ИначеЕсли не Параметры.Свойство("ЗначенияЗаполнения") Тогда
	
				ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			Иначе	
				ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
			КонецЕсли;
			
			ПриСозданииИЧтенииНаСервере();
			
		КонецЕсли;
		
	Иначе
		
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
		
		Если Объект.Ссылка.Пустая() Тогда
			ПриСозданииИЧтенииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Объект.Ссылка);
	
	Если ИспользоватьЗапретОтгрузки И Объект.Клиент Тогда
		Если ОтгрузкаЗапрещена Тогда
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
		Иначе
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаПустая;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовыйПартнер = Истина;
		Объект.Клиент = Истина;
	КонецЕсли;
	
	Элементы.ОсновнойМенеджер.ТолькоПросмотр = НЕ Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава");
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) 
		ИЛИ ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры) Тогда
		УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// -CRM Модуль
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент<>Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	ЭтоКомпания = Перечисления.КомпанияЧастноеЛицо.Компания;
	ЭтоЧастноеЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	РедактироватьКонтактныеДанные = НСтр("ru='Ввести дополнительную контактную информацию';en='Please, enter additional contact info'");
	
	ВариантПоставкиПользователяКОРП = CRM_ЛицензированиеСервер.ВариантПоставкиКОРП();
	Элементы.тПотенциал.Видимость	= ВариантПоставкиПользователяКОРП И ПолучитьФункциональнуюОпцию("CRM_РассчитыватьПотенциалКлиентов");
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	CRM_УправлениеКонтактнойИнформацией.ИнициализацияКонтактнойИнформации(ЭтотОбъект);
	Если Объект.Ссылка.Пустая() Тогда
		CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево,,, Истина);
		Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = Истина;
	Иначе
		CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево,, Истина, Истина);
		CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъектаСписоком(ЭтотОбъект, Объект.Ссылка, "ГруппаКИПартнера");
	КонецЕсли;
	CRM_КлиентыСервер.ИнициализацияКонтактныхЛицПартнера(ЭтотОбъект, МассивТиповКИ, "Объект.CRM_ОсновноеКонтактноеЛицо");
	CRM_КлиентыСервер.ВывестиКонтактныеЛицаПартнера(ЭтотОбъект, Объект.Ссылка, Объект.CRM_ОсновноеКонтактноеЛицо, "ГруппаКонтакты", МассивТиповКИ, Истина);
	
	Клиенты.Параметры.УстановитьЗначениеПараметра("ФизЛицо", Объект.Ссылка);
	
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		Элементы.Наименование.КнопкаВыбора = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПараметрыНового") Тогда
		Объект.Наименование = Параметры.ПараметрыНового.Наименование;
		
		МассивДопРеквизитов = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип,Вид",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,Справочники.ВидыКонтактнойИнформации.EmailПартнера));
		Если МассивДопРеквизитов.количество() > 0 Тогда
				МассивДопРеквизитов[0].Представление = Параметры.ПараметрыНового.АдресПочты;
				МассивДопРеквизитов[0].Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Параметры.ПараметрыНового.АдресПочты, МассивДопРеквизитов[0].Вид);
				CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, МассивДопРеквизитов[0].Значение, МассивДопРеквизитов[0].Вид, МассивДопРеквизитов[0].Тип, , , Ложь);
				ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = МассивДопРеквизитов[0].Представление;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьПредставлениеВложений();
	РасцветкаВыбораПартнера();
	УстановкаНастройкаВидимостиНаСервере();
	ЗаполнитьИнформационныеНадписи();
	ВидимостьИДоступностьПоляПолныхЛет();
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Создан'") + " ", , ЦветаСтиля.CRM_ЧерныйЦветТекста));
	КомпонентыФС.Добавить(Формат(Объект.ДатаРегистрации, "ДФ=d.MM.yyyy")); //+" " + НСтр("ru = 'в'") + " " + Формат(Объект.ДатаРегистрации, "ДФ=HH.mm"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС, , );
	
	// +CRM Модуль
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		Если Параметры.Ключ.Пустая() Тогда
			ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
		КонецЕсли;
		ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
		РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Неопределено,
			Объект.Ссылка,
			ПараметрыПроцедуры);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
		
	КонецЕсли;
	// -CRM Модуль
	
	/// Классификаторы
	Элементы.ГруппаКлассификация.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	
	// ЛентаСобытий
	Лента_ЗначенияНастроек = CRM_ЛентаСобытий.НастройкиЛенты(ТекущийПользователь);
	CRM_ЛентаСобытий.НастроитьЛенту(ЭтотОбъект);
	НастроитьОбластьВвода();
	// Конец ЛентаСобытий
	
	// Управление элементами на форме
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(ЭтотОбъект, "КоманднаяПанельФормы", "ГруппаДополнительно");
	// Конец Управление элементами на форме
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Видимость табличной части "Дополнительная информация", (не вешаем на ФО, чтобы не было отличий от БСП)
	Элементы.CRM_ГруппаДополнительнаяИнформация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// +CRM Модуль
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтаФорма, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// +Софтфон
	Если НЕ(Параметры.ЗначенияЗаполнения = Неопределено) И Параметры.ЗначенияЗаполнения.Свойство("Звонок") Тогда
		сфпЗвонок =  Параметры.ЗначенияЗаполнения.Звонок;
	КонецЕсли;		
	Если ТипЗнч(Параметры.Основание) = Тип("Структура") И Параметры.Основание.Свойство("Интерес") Тогда
		сфпИнтерес = Параметры.Основание.Интерес;
	КонецЕсли;
	// -Софтфон
	
	// -CRM Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ЗаполнитьВсеТипыОтношений();
	CRM_ЗаполнитьТипыОтношений();
	
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	КонецЕсли;
	
	// +CRM Модуль
	//// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	//
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	//ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	//ОбновитьОтображениеИндексыСПАРК();
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	//
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	//СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
		ОбновитьОтображениеИндексыСПАРК();
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	Иначе
		
		Элементы.ФормаПроверитьКонтрагента.Видимость = Ложь;	
		
	КонецЕсли;
	
	// -CRM Модуль
	
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЛентаСобытий
	БыстрыйВвод_КэшированноеВремя = 0;
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	БыстрыйВвод_АктивенАвтоПодбор = Ложь;
	Лента_Прокрутить = Ложь;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	// Конец ЛентаСобытий
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		Если ИсточникВыбора.ИмяФормы = Нстр("ru = 'ОбщаяФорма.сфпПользователиДляПереключения'") И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Объект.сфпПользовательДляПереключенияЗвонков = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЛентаСобытий_Обновить" Или
		ИмяСобытия = "ОбновитьПланировщик" Или
		ИмяСобытия = "Запись_ЗадачаИсполнителя" Или
		ИмяСобытия = "СохраненаЛичнаяЗадача" Или
		ИмяСобытия = "СохраненоПоручение" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		
		ОбновитьКонтактноеЛицо(Параметр);
		Если Элементы.ГруппаКлиентов.Видимость = Истина Тогда
			Элементы.Клиенты.Обновить();
		КонецЕсли;
		ОбновитьСписокКонтактов();		
		
	ИначеЕсли ИмяСобытия = "Создан новый контактный клиент" Тогда
		Если Элементы.ГруппаКлиентов.Видимость = Истина Тогда
			Элементы.Клиенты.Обновить();
		КонецЕсли;
		
	ИначеЕсли  ИмяСобытия = "ИзмененБанковскийСчетПоУмолчанию" Тогда
		
		Прочитать();
		
	ИначеЕсли  ИмяСобытия = "ИзмененДоговорПоУмолчанию" Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если ВыборИзображения Тогда
			
			Объект.CRM_Фотография = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			
		КонецЕсли;
		СформироватьПредставлениеВложений();
		
	// +CRM_Модуль
	//ИначеЕсли ИмяСобытия = "Изменение КПП" Тогда
	//	Если ЭтотОбъект.УникальныйИдентификатор = Источник Тогда 
	//		Объект.CRM_КПП = Параметр;
	//	КонецЕсли;
	// -CRM_Модуль
	
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM_Модуль
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	//СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
		ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		ОбновитьЗапретОтгрузки(Объект.Ссылка, ОтгрузкаЗапрещена);
		УстановитьДоступностьЗапретаОтгрузки();
		
	КонецЕсли;
	// -CRM_Модуль
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// +CRM_Модуль
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	CRM_ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		ПартнерыИКонтрагенты.ЗаполнитьДанныеКонтрагентаПартнера(ЭтотОбъект, ТекущийОбъект.Ссылка);
		ПриСозданииИЧтенииНаСервере();
		ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	Иначе
		ПриСозданииИЧтенииНаСервере();
		ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
		МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);	
	КонецЕсли;
	
	// -CRM_Модуль
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	Если Не Объект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюКартинки();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// +Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	// -Классификаторы
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// +CRM_Модуль
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		КодПоОКПО = "";
	КонецЕсли;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		ИНН = "";
		КодПоОКПО = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ИНН) Или ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		КПП = "";
	КонецЕсли;
	
	КонецЕсли;

	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ВыполнятьПоискДублейПриЗаписиПартнера() Тогда 
		СтруктураОбъекта = Новый Структура;
		СтруктураПоиска = СоздатьСтруктуруПоиска(СтруктураОбъекта);
		
		Если ЕстьДублиПартнеров(СтруктураОбъекта, СтруктураПоиска, , Истина) Тогда 
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
			ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы,,,,, ОписаниеОповещения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		Объект.ДатаРегистрации = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	КонецЕсли;
	
	CRM_ЗаписатьВсеТипыОтношений();
	
	Если НЕ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		Объект.CRM_ВидыДеятельности.Очистить();
	КонецЕсли;	
	// -CRM_Модуль
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		ИЛИ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// +CRM_Модуль
	Если Не CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// -CRM_Модуль
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры // ПриЗаписиНаСервере()

// +CRM_Модуль
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
	
		ЗаписатьКонтрагентаПартнера();
		УправлениеДоступностью();
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		ПараметрыЗаписиСПАРКРиски = Новый Структура("КонтрагентСсылка", КонтрагентПартнера);
		СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписиСПАРКРиски);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
	Иначе
		
		МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
		
	КонецЕсли;
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
КонецПроцедуры
// +CRM_Модуль

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьПартнера", Объект.Ссылка, Неопределено);
	
	Если ЭтоНовыйПартнер Тогда
		Если СоздаемИзВходящегоПисьма Тогда
			Оповестить("Создан новый партнер из письма", Объект.Ссылка);
		Иначе
			Оповестить("Создан новый партнер", Объект.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
		Клиенты.Параметры.УстановитьЗначениеПараметра("ФизЛицо",Объект.Ссылка);
		Если ЗначениеЗаполнено(сфпЗвонок) Тогда		
			Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, Объект.Ссылка));						
		КонецЕсли;			
		Если ЗначениеЗаполнено(сфпИнтерес) Тогда
			Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, Объект.Ссылка));
		КонецЕсли;			
	КонецЕсли;
	
	ЭтоНовыйПартнер = Ложь;
	
	СтруктураПараметров = Новый Структура("CRM_ФизЛицо", Объект.Ссылка);
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
	// +СофтФон
	// Записываем маршрутизацию в АТС.
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если НЕ ЗначениеЗаполнено(сфпСтарыйПользовательДляПереключения) И НЕ ЗначениеЗаполнено(Объект.сфпПользовательДляПереключенияЗвонков) Тогда	
			Возврат;
		КонецЕсли;	
		СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, сфпСтарыйПользовательДляПереключения);
		ПользовательОбновлен	= сфпСофтФонПроСервер.сфпЗаписатьНовогоПользователя(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков, Истина);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков);
			СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	
	// +CRM_Модуль
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи, "Партнеры");
	Оповестить("Запись_Партнеры", Объект.Ссылка);
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		ОповеститьОбИзменении(КонтрагентПартнера);
	Иначе
		МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	КонецЕсли;
	// -CRM_Модуль
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// +CRM_Модуль
	//// СтандартныеПодсистемы.Свойства
	//УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//// Конец СтандартныеПодсистемы.Свойства
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		ПартнерыИКонтрагенты.ПроверитьКорректностьЗаполненияКонтрагента(ЭтаФорма, КонтрагентПартнера, Отказ);
	Иначе
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли; 
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Не CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		Если Не ПроверяемыеРеквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ЮрФизЛицо"));
		КонецЕсли;
		Если Не ПроверяемыеРеквизиты.Найти("ВидКонтрагента") = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВидКонтрагента"));
		КонецЕсли;
	КонецЕсли;
	// -CRM_Модуль
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область КонтактнаяИнформация_КонтактныеЛица

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатие(Команда)
	
	Если СтрНайти(Команда.Имя, "КомандаИзменитьКИ") > 0 Тогда
		ЭлементСпискаКИ = Элементы.Найти(СтрЗаменить(Команда.Имя, "КомандаИзменитьКИ", "ГруппаЗаголовокКИ"));
		Если ЭлементСпискаКИ <> Неопределено Тогда
			ЭлементСпискаКИ.Родитель.Видимость = Ложь;
			Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = Истина;
			ИнициализацияКонтактнойИнформации();
			УстановитьВидимостьРеквизитовКИ();
		КонецЕсли;
	ИначеЕсли СтрНайти(Команда.Имя, "СкрытьРедактируемуюКИ") > 0 Тогда
		ОбновлениеКонтактнойИнформацииСписком();
		Элементы.ГруппаКИПартнера.Видимость = Истина;
		Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = Ложь;
	Иначе	
		CRM_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияНажатие(ЭтотОбъект, Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКонтактнойИнформации()
	Если ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		И НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновлениеКонтактнойИнформацииСписком()
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъектаСписоком(ЭтотОбъект, Объект.Ссылка, "ГруппаКИПартнера");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаНажатие(Команда)
	
	Если Команда.Имя = "ЭлементЕщеКонтакты" Тогда
		Если Объект.Ссылка.Пустая() Тогда
			ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
				|Добавление контактных лиц возможно только после записи данных.
				|Данные будут записаны.'");
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КонтактныеЛицаНажатиеЗавершение", ЭтотОбъект, Команда);	
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
		Иначе
			CRM_КлиентыКлиент.КонтактныеЛицаНажатие(ЭтотОбъект, Команда);
		КонецЕсли;
	Иначе
		CRM_КлиентыКлиент.КонтактныеЛицаНажатие(ЭтотОбъект, Команда);
		Если Команда.Имя = "СделатьКЛОсновным" Тогда
			Если Элементы["ГруппаСписокКЛ"].Скрыта() Тогда
				ОбновитьСписокКонтактов();
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Контактное лицо не выбрано!'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаНажатиеЗавершение(Ответ, Команда) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			CRM_КлиентыКлиент.КонтактныеЛицаНажатие(ЭтотОбъект, Команда);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_КлиентыКлиент.КонтактныеЛицаВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКоманд = CRM_ЛентаСобытийКлиент.ИменаКомандОбъектовЛенты();
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		ПозицияРазделителя = СтрНайти(ДанныеСсылки, ИмяКоманды);
		Если ПозицияРазделителя > 0 Тогда
			ПараметрКоманды = Сред(ДанныеСсылки, ПозицияРазделителя + СтрДлина(ИмяКоманды));
			CRM_ЛентаСобытийКлиент.ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияРазделителя = СтрНайти(ДанныеСсылки, "ЛентаЗагрузитьЕще");
	Если ПозицияРазделителя > 0 Тогда
		Лента_КоличествоОбъектовИстории = Лента_КоличествоОбъектовИстории + 50;
		Лента_Прокрутить = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(ДанныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборВсеСобытияПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		НастройкаОтбора.Пометка = ПометкаВсеСобытия;
	КонецЦикла;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборПриИзменении(Элемент)
	
	ПометкаСобытие = Истина;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		ПометкаСобытие = Мин(ПометкаСобытие, НастройкаОтбора.Пометка);
	КонецЦикла;
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	НастройкаВсеСобытия.Пометка = ПометкаСобытие;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

// Общее

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаПриИзменении(Элемент = Неопределено)
	
	Если БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) И БыстрыйВвод_КэшированноеВремя > 0 Тогда
		БыстрыйВвод_ДатаНачала = БыстрыйВвод_ДатаНачала + БыстрыйВвод_КэшированноеВремя;
		БыстрыйВвод_КэшированноеВремя = 0;
	КонецЕсли;
	
	Если НачалоДня(БыстрыйВвод_КэшированнаяДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания) Тогда
		ВремяЗавершения = БыстрыйВвод_ДатаОкончания - НачалоДня(БыстрыйВвод_ДатаОкончания);
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаНачала) + ВремяЗавершения;
	КонецЕсли;
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + 3600;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(БыстрыйВвод_ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", БыстрыйВвод_ДатаНачала);
	КонецЕсли;
	БыстрыйВвод_КэшированноеВремя = БыстрыйВвод_ДатаНачала - НачалоДня(БыстрыйВвод_ДатаНачала);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, ПараметрыОткрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаНачала,
		Элемент, БыстрыйВвод_ДатаНачала, Ложь, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаНачала = ВыбранныйЭлемент.Значение;
	БыстрыйВвод_ДатаНачалаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияПриИзменении(Элемент)
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + 3600;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение", ЭтотОбъект);
	ДобавлятьДлительность = (НачалоДня(БыстрыйВвод_ДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания));
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаОкончания,
		Элемент, БыстрыйВвод_ДатаНачала, ДобавлятьДлительность, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаОкончания = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

// Примечание

&НаКлиенте
Процедура БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТемаЗаполнена = ЗначениеЗаполнено(Текст);
	ВысотаТемы = ?(ТемаЗаполнена, 2, 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_Команды1", "Видимость", ТемаЗаполнена);
	БыстрыйВвод_Тема = Текст;
	
КонецПроцедуры

// Взаимодействие

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидПриИзменении(Элемент)
	
	БыстрыйВвод_Тема = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	
	Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	
	Если БыстрыйВвод_ВзаимодействиеНаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаОкончания) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

// Задача

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаПриИзменении(Элемент)
	
	БыстрыйВвод_ДатаОкончания = CRM_ЛентаСобытий.ДатаОкончанияПоВарианту(БыстрыйВвод_ДатаНачала, БыстрыйВвод_ЗадачаВариантСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Письмо

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ПисьмоУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(БыстрыйВвод_ПисьмоУчетнаяЗапись) Тогда
		ПоказатьЗначение(, БыстрыйВвод_ПисьмоУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейПисьма;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейКопий;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ЭтотОбъект[ИмяТаблицы].Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элемент.УстановитьГраницыВыделения(1, НачалоКолонки, 1, КонецКолонки);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования,, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение,, ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый СписокЗначений;
	ДанныеПолучателей = ЭтотОбъект[ИмяТаблицы];
	СтруктураДанных = CRM_ЛентаСобытий.ПреобразоватьИменаПолучателей(ДанныеПолучателей,
		БыстрыйВвод_ПисьмоУчетнаяЗапись, Результат, СоответствияАдресовИКонтактов);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	Для Каждого ДанныеПолучателя Из СтруктураДанных.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), ДанныеПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ГруппаАдресов = "Кому";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ГруппаАдресов = "Копии";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ГруппаАдресов = "Скрытые";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучатели), "Кому");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиКопий), "Копии");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий), "Скрытые");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",		БыстрыйВвод_ПисьмоУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных",	СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",	ГруппаАдресов);
	ПараметрыОткрытия.Вставить("ГруппаАдресов",		ГруппаАдресов);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("ОбщаяФорма.CRM_АдреснаяКнига", ПараметрыОткрытия,,,,, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ПисьмоПолучатели.Очистить();
	БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
	БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
	
	Для Каждого Элемент Из Результат Цикл
		
		Если Элемент.Группа = "Кому" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ИначеЕсли Элемент.Группа = "Копии" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ИначеЕсли Элемент.Группа = "Скрытые" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		
	КонецЦикла;
	
	ДанныеКонтактов = Новый Структура;
	ДанныеКонтактов.Вставить("Кому", БыстрыйВвод_ПисьмоПолучатели);
	ДанныеКонтактов.Вставить("Копии", БыстрыйВвод_ПисьмоПолучателиКопий);
	ДанныеКонтактов.Вставить("Скрытые", БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий);
	
	ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
	
	БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
	БыстрыйВвод_ПисьмоСписокПолучателейКопий		= ПредставленияКонтактов.Копии;
	БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий	= ПредставленияКонтактов.Скрытые;
	
	ВидимостьПолучателейКопий = БыстрыйВвод_ПисьмоПолучателиКопий.Количество() > 0;
	ВидимостьПолучателейСкрытыхКопий = БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейКопий", "Видимость", ВидимостьПолучателейКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейКопии", "Видимость", Не ВидимостьПолучателейКопий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий", "Видимость", ВидимостьПолучателейСкрытыхКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейСкрытойКопии", "Видимость", Не ВидимостьПолучателейСкрытыхКопий);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Кому)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Копии)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Скрытые копии)'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокСписка);
	ПараметрыОткрытия.Вставить("МассивПолучателей", ЭтотОбъект[ИмяТаблицы]);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БыстрыйВвод_АктивенАвтоПодбор Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстДоМаркера = Лев(Элемент.ТекстРедактирования, КонецКолонки-1);
	ТекстПослеМаркера = Сред(Элемент.ТекстРедактирования, КонецКолонки);
	
	СборнаяСтрока = "";
	
	Если Найти(ТекстДоМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
		Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
			Если Индекс = (МассивПодстрок.Количество()-1) Тогда
				Продолжить;
			КонецЕсли;
			СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока="", "", ",") + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	СборнаяСтрока = СборнаяСтрока +?(СборнаяСтрока="", "", ",")+ ВыбранноеЗначение;
	
	Если Найти(ТекстПослеМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстПослеМаркера, ",");
		Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
			СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначение = СборнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БыстрыйВвод_АктивенАвтоПодбор = (Не Ожидание = 0);
	
	Если БыстрыйВвод_АктивенАвтоПодбор Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ТекстДоМаркера = Лев(Текст, КонецКолонки-1);
		ТекстПослеМаркера = Сред(Текст, КонецКолонки);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И Найти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество()-1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И Найти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если Не ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = CRM_ЛентаСобытий.СписокПолучателейАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из БыстрыйВвод_ПисьмоИсторияАдресов Цикл
					Если Найти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БыстрыйВвод_ПисьмоИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

// Чат

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("Идентификатор", ВыбранноеЗначение);
	НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйПолучатель = НайденныеСтроки[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область CRM_Модуль

&НаКлиенте
Процедура ИННИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(Текст) 
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"КодПоОКПО",,);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Назначение",ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки"));
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ШаблонЭтикетки = Неопределено;

	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",ПараметрыФормы,,,,, Новый ОписаниеОповещения("ШаблонЭтикеткиНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ШаблонЭтикетки = Результат;
    Если ШаблонЭтикетки=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Объект.ШаблонЭтикетки =  ШаблонЭтикетки;

КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ОбработатьИзмененияГоловногоКонтрагента();
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииКППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияКПП" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущийКПП", КПП);
		ПараметрыФормы.Вставить("ИсторияКПП", ИсторияКПП);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияКПППослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииНаименованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияНаименований" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущееНаименованиеПолное", Объект.НаименованиеПолное);
		ПараметрыФормы.Вставить("ИсторияНаименований", ИсторияНаименований);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыФормы.Вставить("ЮрФизлицо", ЮрФизЛицо);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияНаименованийПослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = Объект.НаименованиеПолное;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Если ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		ОбособленноеПодразделение = Истина;
		
		Если ГоловнойКонтрагент = КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо." + ВидКонтрагента);
		ОбособленноеПодразделение = Ложь;
		
		Если ГоловнойКонтрагент <> КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СтароеЗначениеЮрФизЛицо = Объект.ЮрФизЛицо;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Иначе
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
	
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УправлениеДоступностью();
	ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// +CRM Модуль
	CRM_ВидПартнераПриИзменении(Элемент);
	
	Элементы.ГруппаСтраницаИностраннойРегистрации.Видимость = (ВидКонтрагента ="ЮрЛицоНеРезидент");
	
	Если ВидКонтрагента ="ФизЛицо" Или ВидКонтрагента ="ИндивидуальныйПредприниматель" Тогда
		Элементы.Наименование.КнопкаВыбора = Истина;
		
		Элементы.ГруппаКПП.Видимость = Ложь;
		Элементы.ГруппаИНН.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Иначе	
		Элементы.Наименование.КнопкаВыбора = Ложь;
		Элементы.НаименованиеВыбор.СписокВыбора.Очистить();
		
		Элементы.ГруппаКПП.Видимость = Истина;
		Элементы.ГруппаИНН.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
	КонецЕсли;
	
	// -CRM Модуль
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДоговорПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru='Элемент справочника еще не записан.';en='The element of the reference manual is not written down yet.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события НачалоВыбора поля БанковскийСчетПоУмолчанию.
//
Процедура БанковскийСчетПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru='Элемент справочника еще не записан.';en='The element of the reference manual is not written down yet.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // БанковскийСчетПоУмолчаниюНачалоВыбора()

&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("Поставщик",			НСтр("ru = 'Поставщик'"),		Объект.Поставщик);
	CRM_ВсеТипыОтношений.Добавить("Клиент",				НСтр("ru = 'Покупатель'"),		Объект.Клиент);
	CRM_ВсеТипыОтношений.Добавить("Конкурент",			НСтр("ru = 'Конкурент'"),		Объект.Конкурент);
	// +CRM_Модуль
	CRM_ВсеТипыОтношений.Добавить("Перевозчик",			"Перевозчик",		Объект.Перевозчик);
	CRM_ВсеТипыОтношений.Добавить("ОбслуживаетсяТорговымиПредставителями",	"Обслуживается торговыми представителями",	Объект.ОбслуживаетсяТорговымиПредставителями);
	// -CRM_Модуль
	CRM_ВсеТипыОтношений.Добавить("ПрочиеОтношения",	НСтр("ru = 'Прочие отношения'"),Объект.ПрочиеОтношения);
	CRM_ВсеТипыОтношений.Добавить("CRM_Госорганы",		НСтр("ru = 'Госорганы'"),		Объект.CRM_Госорганы);
	CRM_ВсеТипыОтношений.Добавить("CRM_Учредитель",		НСтр("ru = 'Учредитель'"),		Объект.CRM_Учредитель);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаКлиенте
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
	
КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// +CRM_Модуль
	//СтандартнаяОбработка	= Ложь;
	//ДополнительныеПараметры	= Новый Структура;
	//ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	//CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом';en='Mark the types of relationships with customer'"));
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		ДополнительныеПараметры.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
	// -CRM_Модуль
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	// +CRM_Модуль
	//Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	//CRM_ЗаполнитьТипыОтношений();
	//Модифицированность = Истина;
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	НовыеЗначенияТипыОтношений = Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		НовыеЗначенияТипыОтношений.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
		
	КонецЦикла;
	
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Поставщик И Не НовыеЗначенияТипыОтношений.Поставщик Тогда
		
		Если НовыеЗначенияТипыОтношений.Перевозчик Тогда
			
			ЭлементПеревозчик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Перевозчик");
			
			ЭлементПеревозчик.Пометка = Ложь;		
			
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.Перевозчик И НовыеЗначенияТипыОтношений.Перевозчик Тогда
		
		Если Не НовыеЗначенияТипыОтношений.Поставщик Тогда
			
			ЭлементПоставщик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Поставщик");
			
			ЭлементПоставщик.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Клиент И Не НовыеЗначенияТипыОтношений.Клиент Тогда
		
		Если НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
			
			ЭлементОбслуживаетсяТорговымиПредставителями = CRM_ВсеТипыОтношений.НайтиПоЗначению("ОбслуживаетсяТорговымиПредставителями");
			
			ЭлементОбслуживаетсяТорговымиПредставителями.Пометка = Ложь;
			
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.ОбслуживаетсяТорговымиПредставителями И НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
		
		Если Не НовыеЗначенияТипыОтношений.Клиент Тогда
			
			ЭлементКлиент = CRM_ВсеТипыОтношений.НайтиПоЗначению("Клиент");
			
			ЭлементКлиент.Пометка = Истина;		
			
		КонецЕсли;
		
	КонецЕсли; 
	
	CRM_ЗаполнитьТипыОтношений();
	// -CRM_Модуль
	
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "ОсновнойМенеджер".
//
Процедура ОсновнойМенеджерОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Удаление основного менеджера запрещено.';en='The removal of the main manager is prohibited.'"));
КонецПроцедуры // ОсновнойМенеджерОчистка()

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	// +CRM_Модуль
	//ТекстСообщения = "";
	//Если ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
	//	ЭтоЮрЛицо = (Объект.ЮрФизЛицо = ЭтоКомпания);
	//	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.CRM_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.CRM_ИНН");
	//	Иначе
	//		ВыполнитьЗаполнениеРеквизитовПоИНН();
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	//ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	//ОбновитьОтображениеИндексыСПАРК();
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	ЭтоЮрЛицо = ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо);
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ИНН) Тогда
		
		ИННЗаполненКорректно = Ложь;
		
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"ИНН",,);
			
	КонецЕсли;

	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		РезультатЗапуска = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеДанныеПартнераПоИННЗапустить(ИНН,
		                                                                                               ЮрФизЛицо,
		                                                                                               УникальныйИдентификатор,
		                                                                                               ФоновоеЗаданиеИдентификатор);
		
		ФоновоеЗаданиеИдентификатор  = РезультатЗапуска.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатЗапуска.АдресХранилища;
		Если РезультатЗапуска.ЗаданиеЗапущено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПараметрыОбработчика.ТекущийИнтервал = 2;
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатЗапуска.РеквизитыКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	УправлениеДоступностью();
	
	// -CRM_Модуль
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	
	// +CRM_Модуль_Партнеры
	//текБизнесРегион = Объект.БизнесРегион;
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаБизнесРегионПриИзменении(ЭтаФорма, Элемент);
	// -CRM_Модуль_Партнеры
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "Задолженность" Тогда
		// +CRM_Модуль
		//ПараметрыФормы = Новый Структура("Отбор,КлючВарианта, СформироватьПриОткрытии",Новый Структура("Клиент", Объект.Ссылка),"Ведомость", Истина);
		//ОткрытьФорму("Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма", ПараметрыФормы);
		ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
		ПараметрыФормы.СформироватьПриОткрытии = Истина;
		Если ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
			ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
			ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
			ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
			ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("Партнер", Объект.Ссылка);
			ПараметрыФормы.КлючНазначенияИспользования = "Партнер";
		КонецЕсли;
		ПараметрыФормы.КлючВарианта = "РасчетыСПартнерами";
		ОткрытьФорму("Отчет.РасчетыСПартнерами.Форма",ПараметрыФормы);
		// +CRM_Модуль
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Продажи" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Клиент", Объект.Ссылка));
				ПараметрыФормы.Вставить("КлючВарианта", "Основной");
				ИмяФормыОтчета = "Отчет.Продажи.Форма";
			Иначе
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Клиент", Объект.Ссылка));
				ПараметрыФормы.Вставить("КлючВарианта", "РасчетыСКлиентами");
				ИмяФормыОтчета = "Отчет.РасчетыСКлиентами.Форма";
			КонецЕсли;
		Иначе	
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Клиент", Объект.Ссылка));
			ПараметрыФормы.Вставить("КлючВарианта", "ПоНеделямДням");
			ИмяФормыОтчета = "Отчет.CRM_Продажи.Форма";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Потенциал" Тогда
		Элементы.ГруппаПотенциалы.Показать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура сфпПользовательДляПереключенияЗвонковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ВыбранноеЗначение, Истина)) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='У выбранного пользователя не заполнен текущий внутренний номер, маршрутизация невозможна.';en='The selected user does not have the current internal number, routing is not possible.'"));
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Объект.CRM_Фамилия)) 
			 Или (ПустаяСтрока(Объект.CRM_Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текФамилия, СокрЛП(Объект.CRM_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Фамилия) И ПустаяСтрока(текФамилия) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия),   СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.CRM_Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Объект.CRM_Имя)) 
			 Или (ПустаяСтрока(Объект.CRM_Имя) И Не ПустаяСтрока(текИмя)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текИмя, СокрЛП(Объект.CRM_Имя)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Имя) И ПустаяСтрока(текИмя) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия), 	 СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.CRM_Имя);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
		
		Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
		
	КонецЕсли;
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текОтчество)) 
			Или (ПустаяСтрока(Объект.CRM_Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текОтчество, СокрЛП(Объект.CRM_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
		
			Объект.Наименование = СокрЛП(Объект.CRM_Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Отчество) И ПустаяСтрока(текОтчество) Тогда

			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.CRM_Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	текОтчество = СокрЛП(Объект.CRM_Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
			
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		
		МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Если МассивПредставлений.Количество() > 0 Тогда
			Если ДанныеВыбора = Неопределено Тогда
				ДанныеВыбора = Новый СписокЗначений();
			КонецЕсли;
			Для Каждого тДанные Из МассивПредставлений Цикл
				ДанныеВыбора.Вставить(0, тДанные, тДанные);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	РедактированиеПредставления = Истина;
	
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		
		Если Не РедактированиеФИО И Не ПредставлениеВыбраноИзСписка Тогда
			
			ФИО = Объект.Наименование;
			ФИО = СтрЗаменить(ФИО,",","");
			ФИО = СтрЗаменить(ФИО,".","");		
			ФИО = СтрЗаменить(ФИО,";","");
			
			Если ПустаяСтрока(Объект.CRM_Фамилия) Или Объект.Ссылка.Пустая() Тогда
				
				ПервоеСлово = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				
				Объект.CRM_Фамилия = ПервоеСлово;			
				
				Объект.CRM_Имя = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
					Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
				КонецЕсли;
				
				Объект.CRM_Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаРедактированиеФИО.Показать();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеВыбраноИзСписка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВыборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		Если Не ПредставлениеВыбраноИзСписка Тогда
			
			СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
			Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	Объект.CRM_НапоминатьОДнеРождения = ЗначениеЗаполнено(Объект.ДатаРождения);
	Элементы.CRM_НапоминатьОДнеРождения.Доступность = ЗначениеЗаполнено(Объект.ДатаРождения);
	ВидимостьИДоступностьПоляПолныхЛет();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПодчиненныеПартнеры(Ссылка)
	Возврат ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Ссылка);
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_Обновить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПоказатьОтборы(Команда)
	
	Элементы.Лента_СписокОтборов.Показать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура БыстрыйВвод_СменитьСтраницу(Команда)
	
	ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	ПереключитьСтраницуБыстрогоВвода(ИмяКомандыМассив[1]);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Создать(Команда)
	
	Если Не CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		БыстрыйВвод_СоздатьЗавершение(Истина, Новый Структура);
	Иначе
		ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьПродолжить", ЭтотОбъект, Новый Структура);
		ТекстВопроса = НСтр("ru = 'Данные будут записаны. Продолжить?'");
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьЗавершение", ЭтотОбъект, Новый Структура);
		CRM_ОбщегоНазначенияКлиент.Записать(ЭтотОбъект, Истина, ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если ОбъектЗаписан Тогда
		ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Отменить(Команда)
	
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейСкрытойКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейСкрытойКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметры(Команда)
	
	Если CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаКлиента", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕще(Команда)
	
	ОпоыещениеЗавершения = Новый ОписаниеОповещения("ОбычныйВвод_ПоказатьЕщеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОпоыещениеЗавершения, ОбычныйВвод_Команды, Элементы.ОбычныйВвод_ПоказатьЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕщеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйТипОбъекта = ВыбранныйЭлемент.Значение;
	CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаКлиента", ВыбранныйТипОбъекта, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами	
	
КонецПроцедуры

#КонецОбласти

#Область CRM_Модуль

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагента(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Контрагент", КонтрагентПартнера);
	ПараметрыЗаполнения.Вставить("ИНН",        ИНН);
	ПараметрыЗаполнения.Вставить("Партнер",    Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("ИспользоватьПартнеровКакКонтрагентов", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьГоловногоКонтрагентаЗавершение", ЭтотОбъект);
	ПартнерыИКонтрагентыКлиент.ЗаполнитьГоловногоКонтрагента(ЭтотОбъект, ПараметрыЗаполнения, Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ГоловнойКонтрагент = ВыбранноеЗначение;
		Модифицированность = Истина;
		ОбработатьИзмененияГоловногоКонтрагента();
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВидПартнераНажатие(Команда)
	
	Если Объект.ЮрФизЛицо = ЭтоЧастноеЛицо Тогда
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	Иначе	
		Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда // Отработал обработчик, а не програмный вызов.
			Объект.ДатаРождения					= Дата("00010101");
			Объект.CRM_НапоминатьОДнеРождения	= Ложь;
			Объект.Пол							= ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	ИзменитьВидПартнераНаСервере(СтрЗаменить(Команда.Имя, "Команда", ""));
	
	// +CRM_Модуль
	//// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Элементы.ГруппаРедактированиеФИО.Скрыть();
	
	ПартнерЧастноеЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	
	Элементы.Пол.Доступность                             = ПартнерЧастноеЛицо;
	Элементы.ДатаРождения.Доступность                    = ПартнерЧастноеЛицо;
	Элементы.ВариантОтправкиЭлектронногоЧека.Доступность = ПартнерЧастноеЛицо;
	
	CRM_ВидПартнераПриИзменении(Команда);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	// +CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	// +CRM_Модуль
	//Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если НЕ ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
	//	ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено';en='The field ""TIN"" is empty'"));
	//	ТекущийЭлемент = Элементы.ИНН;
	//	Возврат;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Объект.Наименование) 
	//	ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
	//	ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?';en='Reload the current account?'");
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
	//	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//Иначе
	//	ВыполнитьЗаполнениеРеквизитовПоИНН();
	//КонецЕсли;
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	//ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	//ОбновитьОтображениеИндексыСПАРК();
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН,
		                                                                          ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                                                                          ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                       ИНН,
		                       ФоновоеЗаданиеИдентификатор);
		
		ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	// +CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКПП(Команда)
	// +CRM_Модуль
	//CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(Объект.CRM_ИНН, Объект.CRM_КПП, Ложь, ЭтотОбъект.УникальныйИдентификатор);
	CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь, ЭтотОбъект.УникальныйИдентификатор);
	// -CRM_Модуль
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", Объект.НаименованиеПолное);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента",ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ СамообслуживаниеКлиентСервер.ЭтоИНН(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
	                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
	                       Результат,
	                       ФоновоеЗаданиеИдентификатор);
	
	ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, Истина);
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	ТекущийЭлемент = Элементы.НаименованиеПолное;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузки(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к запрету отгрузки возможен только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область CRM_Модуль

&НаСервере
Процедура ОбработатьИзмененияГоловногоКонтрагента()
	
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент, "ИНН");
		Элементы.ЗаполнитьПоИНН.Доступность = Не ПустаяСтрока(ИНН);
	КонецЕсли;
	
	СамообслуживаниеКлиентСервер.УстановитьВидимостьПредупрежденийГоловногоКонтрагента(
		ЭтотОбъект, ОбособленноеПодразделение, ГоловнойКонтрагент, ИНН);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьСтавокДляКрыма(Форма)
	
	ПоставщикИРезидент = Форма.Объект.Поставщик
		И (Форма.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"))
		И (Форма.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо"));
	
	Форма.Элементы.НДСпоСтавкам4и2.Доступность = ПоставщикИРезидент;
	Если Не ПоставщикИРезидент Тогда
		Форма.НДСпоСтавкам4и2 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрагентаПартнера()
	
	СоздатьКонтрагента = КонтрагентПартнера.Пустая();
	
	Если СоздатьКонтрагента Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе
		КонтрагентОбъект = КонтрагентПартнера.ПолучитьОбъект();
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
	
	КонтрагентОбъект.Наименование = Объект.Наименование;
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо И Не ПустаяСтрока(Объект.CRM_Имя + Объект.CRM_Фамилия + Объект.CRM_Отчество) Тогда
		КонтрагентОбъект.НаименованиеПолное = СокрЛП(Объект.CRM_Фамилия + " " + Объект.CRM_Имя + " " + Объект.CRM_Отчество);
	Иначе
		КонтрагентОбъект.НаименованиеПолное = Объект.НаименованиеПолное;
	КонецЕсли;		
	КонтрагентОбъект.НаименованиеМеждународное = НаименованиеМеждународное;
	КонтрагентОбъект.ИНН                       = ИНН;
	КонтрагентОбъект.Партнер                   = Объект.Ссылка;
	КонтрагентОбъект.ЮрФизЛицо                 = ЮрФизЛицо;
	КонтрагентОбъект.НДСпоСтавкам4и2           = НДСПоСтавкам4и2;
	КонтрагентОбъект.КодПоОКПО                 = КодПоОКПО;
	КонтрагентОбъект.КПП                       = КПП;
	КонтрагентОбъект.ОбособленноеПодразделение = ОбособленноеПодразделение;
	КонтрагентОбъект.СтранаРегистрации         = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, СтранаРегистрации, Справочники.СтраныМира.Россия);
	КонтрагентОбъект.РегистрационныйНомер      = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, РегистрационныйНомер, "");
	КонтрагентОбъект.НалоговыйНомер            = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, НалоговыйНомер, "");
	
	КонтрагентОбъект.ИсторияКПП.Загрузить(ИсторияКПП.Выгрузить());
	КонтрагентОбъект.ИсторияНаименований.Загрузить(ИсторияНаименований.Выгрузить());
	
	Если Не ЗначениеЗаполнено(ГоловнойКонтрагент) И Не ОбособленноеПодразделение Тогда
		
		Если СоздатьКонтрагента Тогда
			НоваяСсылка = Справочники.Контрагенты.ПолучитьСсылку();
			КонтрагентОбъект.УстановитьСсылкуНового(НоваяСсылка);
			ГоловнойКонтрагент = КонтрагентОбъект.ПолучитьСсылкуНового();
		Иначе
			ГоловнойКонтрагент = КонтрагентПартнера;
		КонецЕсли;
		
	КонецЕсли;
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	ПартнерыИКонтрагенты.ЗаполнитьКонтактнуюИнформациюКонтрагентаПартнера(КонтрагентОбъект, ЭтотОбъект, Объект.КонтактнаяИнформация, Ложь);
	
	Если Не (СоздатьКонтрагента Или ОбособленноеПодразделение) И ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ПартнерыИКонтрагенты.ИзменитьИННПодчиненныхКонтрагентов(КонтрагентПартнера, ИНН);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, КонтрагентОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонтрагентОбъект.Записать();
	
	КонтрагентПартнера = КонтрагентОбъект.Ссылка;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
					Попытка 
						ВладелецФормы.ТекущаяСтрока = РезультатЗакрытия.Объект; 
					Исключение
						ФормаСписка = ПолучитьФорму("Справочник.Партнеры.ФормаСписка");
						ФормаСписка.Открыть();
						ФормаСписка.ТекущийЭлемент.ТекущаяСтрока = РезультатЗакрытия.Объект;
					КонецПопытки;
					Модифицированность = Ложь;
					Закрыть();
					Возврат;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	Записать(Новый Структура("ЗаписыватьБезПроверки", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЗапретаОтгрузки()
	
	Если ИспользоватьЗапретОтгрузки И Объект.Клиент Тогда
		Если ОтгрузкаЗапрещена Тогда
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
		Иначе
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияКПППослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ИсторияКПП") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияКПП = Результат.ИсторияКПП;
		НоваяИсторияКПП.Сортировать("Период");
	
		ИсторияКПП.Очистить();
		Если НоваяИсторияКПП.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияКПП Цикл
				ЗаписьИстории = ИсторияКПП.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееКПП = НоваяИсторияКПП[НоваяИсторияКПП.Количество()-1].КПП;
		
		Если НовоеТекущееКПП <> КПП Тогда
			
			КПП = НовоеТекущееКПП;
			
			Если НЕ ПустаяСтрока(КПП)
				И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения) Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,"КПП",,);
		
			КонецЕсли;
				
			ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
			УправлениеДоступностью();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованийПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ИсторияНаименований") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияНаименований = Результат.ИсторияНаименований;
		НоваяИсторияНаименований.Сортировать("Период");
	
		ИсторияНаименований.Очистить();
		Если НоваяИсторияНаименований.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияНаименований Цикл
				ЗаписьИстории = ИсторияНаименований.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееНаименование = НоваяИсторияНаименований[НоваяИсторияНаименований.Количество()-1].НаименованиеПолное;
		
		Если НовоеТекущееНаименование <> Объект.НаименованиеПолное Тогда
			
			Объект.НаименованиеПолное = НовоеТекущееНаименование;
			
		КонецЕсли;
		
		УправлениеДоступностью();
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьЗапретОтгрузки(Партнер, ОтгрузкаЗапрещена)
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()

	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = НСтр("ru = 'Контрагент (создание)'");
		
	Иначе
		
		Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Контрагент)'"), Объект.Наименование);
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Партнер)'"), Объект.Наименование);
		КонецЕсли; 	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИНН.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННФизЛицо.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЮрФизЛицо");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
		СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ФизЛицо);
		СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИНН");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	Иначе
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппаДоступа.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуютсяОграниченияДоступаНаУровнеЗаписей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаРождения.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Пол.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЮрФизЛицо");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)
	
	Объект.Наименование = РеквизитыКонтрагента.Наименование;
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Если КПП <> РеквизитыКонтрагента.КПП Тогда
			КПП = РеквизитыКонтрагента.КПП;
			ИсторияКПП.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ИНН") Тогда
		ИНН = РеквизитыКонтрагента.ИНН;
	КонецЕсли;
	
	Если Объект.НаименованиеПолное <> РеквизитыКонтрагента.НаименованиеСокращенное Тогда
		Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		ИсторияНаименований.Очистить();
	КонецЕсли;
	
	ОбновитьКИ = Ложь;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ИнициализацияКонтактнойИнформации();
		ЗаполнитьЭлементКонтактнойИнформации(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		                                                                РеквизитыКонтрагента.Телефон);
		ОбновитьКИ = Истина;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено  Тогда
		ИнициализацияКонтактнойИнформации();
		ЗаполнитьЭлементКонтактнойИнформации(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
		                                                                РеквизитыКонтрагента.ЮридическийАдрес);
		ОбновитьКИ = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Модифицированность = Истина;
	
	Если ОбновитьКИ Тогда
		ОбновлениеКонтактнойИнформацииСписком();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатВыполнения.РеквизитыКонтрагента);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = ПартнерыИКонтрагентыКлиент.ИнициироватьСтруктураДанныхДляСравнения();
	ДанныеДляСравнения.Наименование            = Объект.Наименование;
	ДанныеДляСравнения.НаименованиеСокращенное = Объект.НаименованиеПолное;
	ДанныеДляСравнения.ИНН                     = ИНН;
	ДанныеДляСравнения.КПП                     = КПП;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции

&НаКлиенте
Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно)

	Возврат СамообслуживаниеКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               НастройкиПодключенияКСервисуИППЗаданы,
	               ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
	               ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"),
	               ОбособленноеПодразделение); 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма, КнопкаНедоступнаБезусловно = Ложь)

	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма,
	                                                                       Форма.ЮрФизЛицо,
	                                                                       Форма.ИНН,
	                                                                       Форма.ОбособленноеПодразделение,
	                                                                       Форма.НастройкиПодключенияКСервисуИППЗаданы,
	                                                                       КнопкаНедоступнаБезусловно);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(Форма)
	
	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(Форма,
	                                                                                    Форма.ЮрФизЛицо,
	                                                                                    Форма.Объект.НаименованиеПолное,
	                                                                                    Форма.ОбособленноеПодразделение,
	                                                                                    Форма.НастройкиПодключенияКСервисуИППЗаданы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРеквизитыПроверкиКонтрагента(Форма)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Форма.РеквизитыПроверкиКонтрагентов.ЮрФизЛицо                 = Форма.ЮрФизЛицо;
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо        = (Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") 
		                                                            Или  Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент  = (Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнятьПоискДублейПриЗаписиПартнера()
	
	Возврат Константы.CRM_ВыполнятьПоискДублейПриЗаписиПартнера.Получить();
	
КонецФункции

&НаСервере
Функция СоздатьСтруктуруПоиска(СтруктураОбъекта)
	
	СтруктураПоиска = Новый Структура;
	
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если РеквизитыПоиска <> Неопределено Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = Найти(Значение,";");
					
					Ключ = Сред(Значение,1,ТочкаСЗапятой-1);
					СтруктураПоиска.Вставить(Ключ, Сред(Значение,ТочкаСЗапятой+1));
					Если Ключ = "CRM_ИНН" Тогда
						СтруктураОбъекта.Вставить("CRM_ИНН", ИНН);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// +CRM Модуль
	Для Каждого Стр Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Представление = Стр.Представление;
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураПоиска.Вставить("АдресЭлектроннойПочты", "ПОДОБНО");
			СтруктураОбъекта.Вставить("АдресЭлектроннойПочты", Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураПоиска.Вставить("Адрес", "ПОДОБНО");
			СтруктураОбъекта.Вставить("Адрес", Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			СтруктураПоиска.Вставить("Телефон", "ПОДОБНО");
			СтруктураОбъекта.Вставить("Телефон", Представление);
		КонецЕсли;
		
	КонецЦикла;
	// -CRM Модуль
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьДублиПартнеров(Знач Партнер, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие)
	
	// +CRM Модуль
	//Выборка = CRM_КлиентыСервер.НайтиДубли(Партнер, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	Выборка = CRM_КлиентыСервер.НайтиДублиПартнеров(Партнер, СтруктураПоиска);
	// -CRM Модуль
	Если Выборка <> Неопределено И Выборка.Количество()>0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УправлениеДоступностью()
	
	ПартнерыИКонтрагенты.УправлениеЭлементамиЮридическихРеквизитов(
		ЭтотОбъект, ЮрФизЛицо, ОбособленноеПодразделение, ИНН);
	
	СамообслуживаниеКлиентСервер.УстановитьВидимостьПредупрежденийГоловногоКонтрагента(
		ЭтотОбъект, ОбособленноеПодразделение, ГоловнойКонтрагент, ИНН);
	
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(ЭтотОбъект);
	
	СамообслуживаниеКлиентСервер.УправлениеСтраницамиЮрФизЛицоПриИзменении(ЭтотОбъект, ЮрФизЛицо);
	
	ОбновитьДоступностьСтавокДляКрыма(ЭтотОбъект);
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		ПартнерыИКонтрагенты.ОбновитьСтрокиИстории(ИсторияКПП, ИсторияНаименований, ПереходКИсторииКПП, ПереходКИсторииНаименования);
		
		Элементы.КПП.ТолькоПросмотр                           = ИсторияКПП.Количество() > 1;
		Элементы.НаименованиеПолное.ТолькоПросмотр    = ИсторияНаименований.Количество() > 1;
		
	КонецЕсли;	
		
	//Страна регистрация видна только в том случае, когда контрагент не является резидентом РФ.
	//В противном случае - и для физ лиц и для ИП и для юр лиц страна регистрации всегда Россия.
	Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.ТекущаяСтраница = 
		?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент,
		Элементы.ГруппаСтраницаИностраннойРегистрации, Элементы.ГруппаСтраницаРоссийскогоКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИЧтенииНаСервере()
	
	НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры);
	
	Если ОбособленноеПодразделение Тогда
		ВидКонтрагента = "ОбособленноеПодразделение";
	ИначеЕсли ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ВидКонтрагента = ОбщегоНазначения.ИмяЗначенияПеречисления(ЮрФизЛицо);
	КонецЕсли;
	
	УправлениеДоступностью();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВидПартнераПриИзменении(Элемент)
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	Если НЕ (Элемент = Неопределено) Тогда
		ИзменениеВидаКИТелефонаПриСменеВидаПартнера();
	КонецЕсли;		
	УстановитьВидимостьРеквизитовКИ();
	УстановитьВидимостьРеквизитов();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ВидимостьИДоступностьПоляПолныхЛет()
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
		Элементы.КолвоПолныхЛет.Видимость = Ложь;
	Иначе
		КолвоПолныхЛет = НСтр("ru = 'Возраст'") + ": " + ВычислитьКолвоПолныхЛет();
		Элементы.КолвоПолныхЛет.Видимость = Истина;
	КонецЕсли;		 
КонецПроцедуры	

&НаСервере
Функция ВычислитьКолвоПолныхЛет()	
	РазницаВГодах = Год(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса())-Год(Объект.ДатаРождения);
	Если Месяц(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) > Месяц(Объект.ДатаРождения) Тогда
		Возврат РазницаВГодах;	
	ИначеЕсли Месяц(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) = Месяц(Объект.ДатаРождения) И
		День(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) >= День(Объект.ДатаРождения) Тогда
		Возврат РазницаВГодах;
	Иначе 
		Возврат РазницаВГодах - 1;
	КонецЕсли;		
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьПолноеНаименование()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ПравоваяФормаКлиентаПоУмолчанию");
			Объект.НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Объект.Наименование),СокрЛП(ПравоваяФорма)+" """+СокрЛП(Объект.Наименование)+"""");
		КонецЕсли;
	Иначе
		Объект.НаименованиеПолное = СокрЛП(Объект.Наименование);			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКонтактов()
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	CRM_КлиентыСервер.ВывестиКонтактныеЛицаПартнера(ЭтотОбъект, Объект.Ссылка, Объект.CRM_ОсновноеКонтактноеЛицо, "ГруппаКонтакты", МассивТиповКИ);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактноеЛицо(Ссылка)
	
	Если Ссылка.Владелец = Объект.Ссылка Тогда
		Если НЕ ЗначениеЗаполнено(Объект.CRM_ОсновноеКонтактноеЛицо) Тогда
			
			Объект.CRM_ОсновноеКонтактноеЛицо = Ссылка;
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;	
			Модифицированность = Ложь;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьФайлыЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает информацию о первичном интересе.
Функция ПолучитьПервичныйИнтерес(Партнер)
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса,
		|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса,
		|	ИсточникиПервичногоИнтересаСрезПоследних.Партнер
		|ИЗ
		|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних(&Период, Партнер = &Партнер) КАК ИсточникиПервичногоИнтересаСрезПоследних
		|УПОРЯДОЧИТЬ ПО
		|	ИсточникиПервичногоИнтересаСрезПоследних.Период УБЫВ";
		
		Запрос.УстановитьПараметр("Партнер"	,Партнер);
		Запрос.УстановитьПараметр("Период"	,CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("КаналПервичногоИнтереса,ИсточникПервичногоИнтереса,Партнер",
	ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка(),
	Неопределено,
	Справочники.Партнеры.ПустаяСсылка());
	
КонецФункции

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Интерес = ПолучитьПервичныйИнтерес(Объект.Ссылка);
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			
			Элементы.ИсточникПервичногоИнтереса.Видимость = ЗначениеЗаполнено(ИсточникПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция CRM_ПолучитьПотенциал()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекПодразделение = ТекПользователь.Подразделение;
	Если ЗначениеЗаполнено(ТекПодразделение) Тогда
		Возврат CRM_РасчетПотенциалаСервер.ПолучитьПотенциалКлиента(Объект.Ссылка, ТекПодразделение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформационныеНадписи()
	
	// +CRM_Модуль
	//Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПокупателями) Тогда
	//	Элементы.тЗадолженность.Видимость = Истина;
	//	СтруктураОтбора = Новый Структура("Контрагент", Объект.Ссылка);
	//	тзДолги = РегистрыНакопления.РасчетыСПокупателями.Остатки(,СтруктураОтбора,,"СуммаВал");
	//	Долг = тзДолги.Итог("СуммаВал");
	//	Элементы.тЗадолженность.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Должен нам'"), Долг, "Задолженность");
	//Иначе	
	//	Элементы.тЗадолженность.Видимость = Ложь;
	//КонецЕсли;
	
	Элементы.тЗадолженность.Видимость = (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Элементы.тЗадолженность.Видимость Тогда
		
		Долг = 0;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ВалютаУчета = Константы.ВалютаУправленческогоУчета.Получить();
			Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
				ЭтаФорма.Элементы.тЗадолженность.Видимость = Истина;
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	РасчетыСКлиентамиОстатки.Валюта,
				|	РасчетыСКлиентамиОстатки.СуммаОстаток
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
				|ГДЕ
				|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам В
				|			(ВЫБРАТЬ
				|				АналитикаУчетаПоПартнерам.КлючАналитики
				|			ИЗ
				|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
				|			ГДЕ";
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&Партнер))";
				Иначе
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер = &Партнер)";
				КонецЕсли;
				РасчетыСКлиентами = Запрос.Выполнить().Выгрузить();
				Для Каждого СтрокаРасчетов Из РасчетыСКлиентами Цикл
					Если СтрокаРасчетов.Валюта = ВалютаУчета Тогда
						Долг = Долг + СтрокаРасчетов.СуммаОстаток;		
					Иначе
						СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаРасчетов.Валюта, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчета,  CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						Долг = Долг + РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаРасчетов.СуммаОстаток, СтрокаРасчетов.Валюта, ВалютаУчета,
						СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
						СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭтаФорма.Элементы.тЗадолженность.Видимость = Ложь;
			КонецЕсли;	
			Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
				ЭтаФорма.Элементы.тЗадолженность.Видимость = Истина;
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	РасчетыСПоставщикамиОстатки.Валюта,
				|	РасчетыСПоставщикамиОстатки.СуммаОстаток
				|ИЗ
				|	РегистрНакопления.РасчетыСПоставщиками.Остатки КАК РасчетыСПоставщикамиОстатки
				|ГДЕ
				|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам В
				|			(ВЫБРАТЬ
				|				АналитикаУчетаПоПартнерам.КлючАналитики
				|			ИЗ
				|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
				|			ГДЕ";
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(Объект.Ссылка) Тогда
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&Партнер))";
				Иначе
					Запрос.Текст = Запрос.Текст + "						   
					|				АналитикаУчетаПоПартнерам.Партнер = &Партнер)";
				КонецЕсли;
				РасчетыСПоставщиками = Запрос.Выполнить().Выгрузить();
				Для Каждого СтрокаРасчетов Из РасчетыСПоставщиками Цикл
					Если СтрокаРасчетов.Валюта = ВалютаУчета Тогда
						Долг = Долг + СтрокаРасчетов.СуммаОстаток;		
					Иначе
						СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаРасчетов.Валюта, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчета,  CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
						Долг = Долг + РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаРасчетов.СуммаОстаток, СтрокаРасчетов.Валюта, ВалютаУчета,
						СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
						СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.тЗадолженность.Заголовок = ЗаголовокНадписиВзаиморасчетов(?(Долг<0, НСтр("ru = 'Должны мы'"), НСтр("ru = 'Должен нам'")), Долг, "Задолженность");
		
	КонецЕсли;	
	
	// -CRM_Модуль
	
	Если Элементы.тПотенциал.Видимость Тогда
		
		CRM_Потенциал = CRM_ПолучитьПотенциал();
		
		CRM_Потенциалы.Отбор.Клиент.ВидСравнения  = ВидСравнения;
		CRM_Потенциалы.Отбор.Клиент.Использование = Истина;
		CRM_Потенциалы.Отбор.Клиент.Значение      = Объект.Ссылка;
		НаборПотенциалов = РегистрыСведений.CRM_Потенциалы.СоздатьНаборЗаписей();
		НаборПотенциалов.Отбор.Клиент.ВидСравнения  = ВидСравнения.Равно;
		НаборПотенциалов.Отбор.Клиент.Использование = Истина;
		НаборПотенциалов.Отбор.Клиент.Значение      = Объект.Ссылка;
		НаборПотенциалов.Прочитать();
		CRM_Потенциалы.Загрузить(НаборПотенциалов.Выгрузить());
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		Для Каждого ТекЗапись Из CRM_Потенциалы Цикл 
			ТекЗапись.Валюта = ВалютаУпр;
			ТекЗапись.ПериодРасчета = Объект.ОсновнойМенеджер.Подразделение.CRM_ПериодРасчетаПотенциала;
		КонецЦикла;
	
		Период = Объект.ОсновнойМенеджер.Подразделение.CRM_ПериодРасчетаПотенциала; 
		Элементы.тПотенциал.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Потенциал'"), CRM_Потенциал, "Потенциал");
		
	КонецЕсли;
	
	// +CRM_Модуль
	//Запрос = Новый Запрос();
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	CRM_ПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
	//               |ИЗ
	//               |	РегистрНакопления.CRM_Продажи.Обороты(, , , Партнер = &Партнер) КАК CRM_ПродажиОбороты";
	//
	//Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
	//	Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
	//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Продажи.Обороты(", "Продажи.Обороты(");
	//		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СтоимостьОборот", ".СуммаОборот");
	//	Иначе
	//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Продажи.Обороты(", "ВыручкаИСебестоимостьПродаж.Обороты(");
	//		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СтоимостьОборот", ".СуммаВыручкиСНДСРеглОборот");
	//	КонецЕсли;
	//КонецЕсли;
	//Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
	//ТабВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	//СуммаВзаиморасчетов =  ТабВзаиморасчетов.Итог("СтоимостьОборот");
	
	//СуммаВзаиморасчетов = 0;
	
	//Элементы.тПродажи.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Продажи'"), СуммаВзаиморасчетов, "Продажи");
	// -CRM_Модуль
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокНадписиВзаиморасчетов(Заголовок, Сумма, НавиСсылка)
	
	КрупныйШрифт = Новый Шрифт(,10, Истина,,);
	МелкийШрифт  = Новый Шрифт(,9, Истина,,);
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Заголовок + ": ", Новый Шрифт(,10,), ЦветаСтиля.CRM_ЦветДополнительногоТекста));
	
	Если ЗначениеЗаполнено(Сумма) Тогда
		СуммаСтрокой = Формат(?(Сумма<0, -Сумма, Сумма), "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
		ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
		КомпонентыЧисла = Новый Массив;
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя), КрупныйШрифт, ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя+1), МелкийШрифт, ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , НавиСсылка));
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Нет'"), КрупныйШрифт, ЦветаСтиля.CRM_ОсновнойГолубой, , НавиСсылка));
	КонецЕсли;
	// КомпонентыФС.Добавить(" " + Константы.ВалютаУправленческогоУчета.Получить().СимвольноеПредставление);
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС, , );
	
КонецФункции

&НаСервере
Процедура ИзменениеВидаКИТелефонаПриСменеВидаПартнера()
		
	// Задача при смене физ. лица на юр. лицо менять вид КИ "Мобильный телефон частного лица" на "Рабочий телефон".
	Если Объект.ЮрФизЛицо =  ЭтоКомпания Тогда
		СтруктураОтбора			=  Новый Структура("Вид, CRM_ОсновнойДляСвязи", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"), Истина);
		ОпределятьОсновнуюКИ	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() = 0);
		СтруктураОтбора			= Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица"));
		ОтборПоВидуКИ			= ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора);
		ЭтоОсновной 			= Ложь;
		Для Каждого СтрокаКИ Из ОтборПоВидуКИ Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				Продолжить;
			КонецЕсли;				
			Если ОпределятьОсновнуюКИ Тогда
				ЭтоОсновной			 = Истина;
				ОпределятьОсновнуюКИ = Ложь;
			КонецЕсли;	
			СтруктураПоиска = Новый Структура("Вид, Представление", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"), СтрокаКИ.Представление);
			Если (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска).Количество() = 0) Тогда
				СтрокаКИ.Вид		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера");
				СтрокаКИ.Родитель 	= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПартнеры");
				Если ЭтоОсновной Тогда
					СтрокаКИ.CRM_ОсновнойДляСвязи = Истина;
					//CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элементы["ОсновнойДляСвязи"+СтрокаКИ.ИмяРеквизита]);
					ЭтоОсновной = Ложь;
				Иначе
					СтрокаКИ.CRM_ОсновнойДляСвязи = ложь;
				КонецЕсли;	
			КонецЕсли;				
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановкаНастройкаВидимостиНаСервере()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	ИзменениеВидаКИТелефонаПриСменеВидаПартнера();
	УстановитьВидимостьРеквизитовКИ();
	УстановитьВидимостьРеквизитов();
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость реквизитов формы.
//
Процедура УстановитьВидимостьРеквизитов()
	
	Если CRM_ИспользоватьПартнеровКакКонтрагентов Тогда
		
		Элементы.СтраницыВидовПартнераИКонтрагента.ТекущаяСтраница = Элементы.СтраницаВидыКонтрагента;
		
		//Элементы.ПустаяДекорацияКонтактнаяИнформация.Видимость = Ложь;
		Элементы.Родитель.Видимость = Ложь;
		Элементы.НаименованиеМеждународное.Видимость = Истина;
		
		Элементы.ГруппаСтраницаИностраннойРегистрации.Видимость = (ВидКонтрагента ="ЮрЛицоНеРезидент");
		
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = (ВидКонтрагента ="ЮрЛицо");
		Элементы.НДСпоСтавкам4и2.Видимость = НЕ (ВидКонтрагента = "ФизЛицо" ИЛИ ВидКонтрагента = "ЮрЛицоНеРезидент");
		
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.Видимость = Ложь;
		
	Иначе
		
		Элементы.СтраницыВидовПартнераИКонтрагента.ТекущаяСтраница = Элементы.СтраницаВидыПартнера;
		
		Элементы.ГруппаЮридическиеРеквизиты.Видимость = Ложь;
		Элементы.ДекорацияРазделительЮрРеквизитов.Видимость = Ложь;
		
		Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.Видимость = Ложь;
		Элементы.ГруппаРезультатПроверкиКонтрагентов.Видимость = Ложь;
		Элементы.ГруппаГоловнойКонтрагент.Видимость = Ложь;
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
		Элементы.ГруппаПредупреждениеГоловнойКонтрагент.Видимость = Ложь;
		Элементы.НДСпоСтавкам4и2.Видимость = Ложь;
		Элементы.ЗаполнитьПоНаименованиюПоДаннымЕдиныхГосРеестров.Видимость = Ложь;
		Элементы.НаименованиеПолное.Видимость = Ложь;
		Элементы.ПереходКИсторииНаименования.Видимость = Ложь;
		Элементы.ПереходКИсторииКПП.Видимость = Ложь;
		Элементы.НаименованиеМеждународное.Видимость = Ложь;
		
		Элементы.СтраницыНаименованиеПолноеКомпанияЧастноеЛицо.Видимость = (Объект.ЮрФизЛицо = ЭтоКомпания);
		
	КонецЕсли;
	
	Если (НЕ CRM_ИспользоватьПартнеровКакКонтрагентов И Объект.ЮрФизЛицо = ЭтоЧастноеЛицо) ИЛИ
		 (CRM_ИспользоватьПартнеровКакКонтрагентов И (ВидКонтрагента ="ФизЛицо" Или ВидКонтрагента ="ИндивидуальныйПредприниматель")) Тогда
		 
		Элементы.Наименование.КнопкаВыбора = Истина;
		
		Элементы.ГруппаКПП.Видимость = Ложь;
		Элементы.ГруппаИНН.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		 
	Иначе	
		Элементы.Наименование.КнопкаВыбора = Ложь;
		Элементы.НаименованиеВыбор.СписокВыбора.Очистить();
		
		Элементы.ГруппаКПП.Видимость = Истина;
		Элементы.ГруппаИНН.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
	КонецЕсли;
	
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		Элементы.ГруппаФизЛицо.Видимость = Истина;
		Элементы.Пол.Видимость = Истина;
		Элементы.ГруппаКодПоОКПО.Видимость = Ложь;
	Иначе
		Элементы.ГруппаФизЛицо.Видимость = Ложь;
		Элементы.Пол.Видимость = Ложь;
		Элементы.ГруппаКодПоОКПО.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ГруппаРаботаетВОрганизациях.Видимость = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	
	// +СофтФон
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Истина;
		Если сфпСофтФонПроСервер.сфпРолиДоступны("сфпУправлениеМаршрутизацией, ПолныеПрава") Тогда
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Истина;
		Иначе
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Ложь;
	КонецЕсли;
	// -СофтФон
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	Если НЕ Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры, Ложь);
	флагВыводаГиперСсылки	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки ИЛИ (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить",Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки ИЛИ (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	КонецЕсли;
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДопРеквизита.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Выводить = Ложь;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление());
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;	
		
		Если СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания Тогда
			Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо Тогда
			Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры Тогда
			Выводить = Истина;
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты Тогда
			Выводить = Истина;
		КонецЕсли;
			
// +CRM
		
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации["ГруппаКонтактнаяИнформация"].ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить И ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ ((РедактироватьДР И НЕ СкрыватьПолеКИ) ИЛИ флаг_1))
										И ?(Тип(Элементы[СтрокаДобавленногоРеквизита.Значение])=Тип("КнопкаФормы"), Элементы[СтрокаДобавленногоРеквизита.Значение].Заголовок<>"", Истина));
			КонецЕсли;
		КонецЦИкла;
// -CRM
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПартнерыПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.ПартнерыПрисоединенныеФайлы КАК ПартнерыПрисоединенныеФайлы
	|ГДЕ
	|	ПартнерыПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ ПартнерыПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Files'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Files'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Files('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаСервере
Процедура ИзменитьВидПартнераНаСервере(ВидПартнера)
	
	Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо[ВидПартнера];
	Модифицированность = Истина;
	РасцветкаВыбораПартнера();
	УстановкаНастройкаВидимостиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасцветкаВыбораПартнера()
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		ГолубаяКнопка = Элементы.ЮридическоеЛицо;
		СераяКнопка = Элементы.ФизическоеЛицо;
	Иначе
		ГолубаяКнопка = Элементы.ФизическоеЛицо;
		СераяКнопка = Элементы.ЮридическоеЛицо;
	КонецЕсли;
	ГолубаяКнопка.Пометка = Истина;
	ГолубаяКнопка.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
	ГолубаяКнопка.ЦветРамки = ЦветаСтиля.CRM_ОсновнойГолубой;
	ГолубаяКнопка.Шрифт = Новый Шрифт(,,Истина);
	СераяКнопка.ЦветФона = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
	СераяКнопка.Пометка = Ложь;
	СераяКнопка.ЦветРамки = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
	ГолубаяКнопка.Шрифт = Новый Шрифт();
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
#Область СтандартныеПодсистемы_РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

// +CRM_Модуль
//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ВыполнитьЗаполнениеРеквизитовПоИНН();
//	КонецЕсли;
//	
//КонецПроцедуры 

//&НаКлиенте
//Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
//	
//	ОписаниеОшибки = "";
//	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
//	
//	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
//		// Обработка ошибок
//		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
//			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
//				|необходимо подключиться к Интернет-поддержке пользователей.
//				|Подключиться сейчас?'");
//			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
//			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
//		Иначе
//			ПоказатьПредупреждение(, ОписаниеОшибки);
//		КонецЕсли;
//	ИначеЕсли Объект.ЮрФизЛицо = ЭтоКомпания Тогда
//		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
//		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);		
//	КонецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, ЗаполнятьИНН = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		ПартнерыИКонтрагентыКлиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(РеквизитыКонтрагента.ОписаниеОшибки);
	Иначе
		
		РезультатСравнения = ПартнерыИКонтрагентыКлиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента,
		                                                                                                         ДанныеОбъектаДляСравнения(),
		                                                                                                         ЗаполнятьИНН);
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 
// -CRM_Модуль

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	// +CRM_Модуль
	//Если ЭтоЮридическоеЛицо Тогда
	//	РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(Объект.CRM_ИНН);
	//Иначе
	//	РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Объект.CRM_ИНН);
	//КонецЕсли;
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
	КонецЕсли;
	// -CRM_Модуль
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, , "ДатаРегистрации");
	
	ОбновитьКИ = Ложь;
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			ИнициализацияКонтактнойИнформации();
			ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес, 
				РеквизитыКонтрагента.ЮридическийАдрес);
				ОбновитьКИ = Истина;
				Если Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость Тогда	
				УстановитьВидимостьРеквизитовКИ();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.CRM_Фамилия	= РеквизитыКонтрагента.Фамилия;
		Объект.CRM_Имя		= РеквизитыКонтрагента.Имя;
		Объект.CRM_Отчество	= РеквизитыКонтрагента.Отчество;
		Объект.Пол	= ?(РеквизитыКонтрагента.Пол = "1", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
	КонецЕсли;
	
	// +CRM_Модуль
	//Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер") И ЗначениеЗаполнено(РеквизитыКонтрагента.РегистрационныйНомер) Тогда
	//	Объект.CRM_ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	//КонецЕсли;
	// -CRM_Модуль
	
	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		ИнициализацияКонтактнойИнформации();
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера, 
			РеквизитыКонтрагента.Телефон);
		ОбновитьКИ = Истина;
	КонецЕсли;
		
	Если РеквизитыКонтрагента.Свойство("РегистрацияВНалоговомОргане") И РеквизитыКонтрагента.РегистрацияВНалоговомОргане<>Неопределено
			И РеквизитыКонтрагента.РегистрацияВНалоговомОргане.Свойство("ДатаРегистрации") Тогда
		Объект.CRM_ДатаРегистрацииКомпании = РеквизитыКонтрагента.РегистрацияВНалоговомОргане.ДатаРегистрации;
	Иначе
		Объект.CRM_ДатаРегистрацииКомпании = РеквизитыКонтрагента.ДатаРегистрации;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ОбновитьКИ Тогда
		ОбновлениеКонтактнойИнформацииСписком();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	Если Элементы.Найти(ДанныеСтроки.ИмяРеквизита)<>Неопределено Тогда
		ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	КонецЕсли;
	
КонецПроцедуры

// +CRM_Модуль
//&НаКлиенте
//Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
//		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
//		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
//	КонецЕсли;

//КонецПроцедуры

//&НаКлиенте
//Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

//	Если Результат <> Неопределено 
//		И Результат <> КодВозвратаДиалога.Отмена Тогда
//		ВыполнитьЗаполнениеРеквизитовПоИНН();
//	КонецЕсли;

//КонецПроцедуры
// -CRM_Модуль

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()

	ОтключитьЗаполнениеПоИНН = Неопределено;	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

	Если ЗначениеЗаполнено(ТекстЗаполнения)
		И (СтрДлина(ТекстЗаполнения) = 10 ИЛИ СтрДлина(ТекстЗаполнения) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстЗаполнения) Тогда // Текст заполнения содержит ИНН.
	
		Объект.Наименование = "";
		// +CRM_Модуль
		//Объект.CRM_ИНН = ТекстЗаполнения;
		ИНН = ТекстЗаполнения;
		// -CRM_Модуль
		Объект.ЮрФизЛицо = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.КомпанияЧастноеЛицо.Компания,
			Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
			
		ЗаполнитьРеквизитыПоИНННаСервере();
		
		ТекстЗаполнения = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область КонтактнаяИнформацияБСП

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru='Скрыть дополнительные контактные данные';en='Hide an additional contact information'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru='Ввести дополнительную контактную информацию';en='Please, enter additional contact info'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru='Необходимо записать элемент';en='It is necessary to write down an element'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru='Необходимо записать элемент';en='It is necessary to write down an element'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];

	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение,,ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСайтаКомпании);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияБезДействия(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта");
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

#КонецОбласти

#Область НастройкаРасположенияЭлементов

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормы(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение", ЭтотОбъект);
	CRM_УправлениеЭлементамиНаФормахКлиент.НастройкаРасположенияЭлементовФормы(ЭтотОбъект, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение(Результат, ДопПараметры) Экспорт
	Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры)
	CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	ОбновитьОтображениеИндексыСПАРК();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		// +CRM_Модуль
		//Объект.CRM_ИНН, // Искать по ИНН
		ИНН, // Искать по ИНН
		// -CRM_Модуль
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	// +CRM_Модуль
	//СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект);
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект, 
					Новый Структура("КонтрагентСсылка", КонтрагентПартнера));
	// -CRM_Модуль
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьпортретКлиента(Команда)
	ОткрытьФорму("РегистрСведений.CRM_РасположениеРеквизитовКлиентов.Форма.ФормаНастройки", Новый Структура(), ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область МеханизмКартинок

&НаСервере
Процедура CRM_УправлениеВидимостьюКартинки()
	Элементы.АдресКартинки.Видимость = ЗначениеЗаполнено(АдресКартинки);		
	Элементы.КомандаУстановитьЛогоФото.Видимость = НЕ ЗначениеЗаполнено(АдресКартинки);		
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьЛогоФото(Команда)
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки
		= НСтр("ru='Картинка не доступна (не доступен том) обратитесь к администратору.';en='Picture unavailable (volume unavailable) of contact the administrator.'");
	Объект.CRM_Фотография = Справочники.ПартнерыПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';en='Select an image, you need to record the object. Write down?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	// +CRM_УТ
	#Если НЕ ВебКлиент Тогда
	// -CRM_УТ
	ВыборИзображения   = Ложь;
	// +CRM_УТ
	#КонецЕсли
	// -CRM_УТ
	
	CRM_УправлениеВидимостьюКартинки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	Если ПустаяСтрока(АдресКартинки) Тогда Возврат; КонецЕсли;
	АдресКартинки = "";
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.ПартнерыПрисоединенныеФайлы.ПустаяСсылка");
	Модифицированность = Истина;
	CRM_УправлениеВидимостьюКартинки();	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';en='Select an image, you need to record the object. Write down?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе 
        Возврат
    КонецЕсли;
    
    ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
    
    ВыборИзображения = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
    ВыборИзображения = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования';en='No image to edit'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра';en='No image to view'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.CRM_Фотография = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаетВОрганизациях

&НаКлиенте
Процедура КлиентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Клиенты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Клиент), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КлиентыПередНачаломДобавленияЗавершение", ЭтотОбъект);
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Перед выполнением данного действия необходимо записать данные.
								   |Записать данные?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавленияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
		Возврат;
	КонецЕсли;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("ЭтоКонтактныйКлиент", Истина);
	ПараметрыНового.Вставить("КонтактныйКлиент", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбновитьЛенту()
	
	ПараметрыЛенты = Новый Структура;
	ПараметрыЛенты.Вставить("Режим",			"ЛентаКлиента");
	ПараметрыЛенты.Вставить("Объект",			Объект.Ссылка);
	ПараметрыЛенты.Вставить("АдресКартинок",	Лента_АдресКартинок);
	ПараметрыЛенты.Вставить("Отбор",			Лента_Отбор);
	ПараметрыЛенты.Вставить("ОбъектовИстории",	Лента_КоличествоОбъектовИстории);
	ПараметрыЛенты.Вставить("Прокрутить",		Лента_Прокрутить);
	ПараметрыЛенты.Вставить("Пустая",			Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ПолучателиЧата = Новый Массив;
	Лента_HTML = CRM_ЛентаСобытий.СформироватьЛенту(ПараметрыЛенты, ПолучателиЧата);
	
	Лента_Прокрутить = Ложь;
	
	Если Лента_ЗначенияНастроек.ИспользоватьЧаты Тогда
		CRM_ЛентаСобытийКлиент.НастроитьОбластьВводаПослеФормированияЛенты(ПолучателиЧата, ЭтотОбъект);
		ВидимостьКомандыЧат = (БыстрыйВвод_ЧатПолучатели.Количество() > 0);
		Если БыстрыйВвод_ТекущийТипОбъекта = "Чат" И Не ВидимостьКомандыЧат Тогда
			ПереключитьСтраницуБыстрогоВвода("Примечание");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура ПереключитьСтраницуБыстрогоВвода(Знач НовыйТипОбъекта, Знач ПолныйСброс = Ложь)
	
	Если БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта И Не ПолныйСброс Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;
	ТекущийШрифтКнопки = Элементы[ИмяТекущиейКнопки].Шрифт;
	Элементы[ИмяТекущиейКнопки].Шрифт = Новый Шрифт(ТекущийШрифтКнопки,,, Ложь);
	
	ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
	ШрифтКнопки = Элементы[ИмяКнопки].Шрифт;
	Элементы[ИмяКнопки].Шрифт = Новый Шрифт(ШрифтКнопки,,, Истина);
	
	ИмяТекущейСтраницы = "БыстрыйВвод_Страница" + БыстрыйВвод_ТекущийТипОбъекта;
	Элементы[ИмяТекущейСтраницы].Видимость = Ложь;
	
	ИмяСтраницы = "БыстрыйВвод_Страница" + НовыйТипОбъекта;
	Элементы[ИмяСтраницы].Видимость = Истина;
	
	БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта;
	
	НастроитьОбластьВводаПоСтранице(ПолныйСброс);
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		Элементы.БыстрыйВвод_ПримечаниеТема.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВвода()
	
	НастроитьОбластьВводаПоСтранице();
	
	// Настройки элементов.
	Элементы.БыстрыйВвод_ЗадачаПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Время.Видимость = Лента_ЗначенияНастроек.ВремяВСрокахЗадач;
	Элементы.БыстрыйВвод_Письмо.Видимость	= Лента_ЗначенияНастроек.ДоступнаПочта;
	
	БыстрыйВвод_ПисьмоОтправлятьСразу = Ложь;
	НастройкиРаботыСПочтой = Взаимодействия.ПолучитьНастройкуРаботаСПочтой();
	Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу") И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
		БыстрыйВвод_ПисьмоОтправлятьСразу = Истина;
	КонецЕсли;
	
	// Обычный ввод
	ОбычныйВвод_Команды.Очистить();
	ОписанияКоманд = CRM_ЛентаСобытий.КомандыОбычногоВводаЛенты("ЛентаКлиента", Лента_ЗначенияНастроек);
	Если ОписанияКоманд.Количество() = 0 Тогда
		Элементы.ОбычныйВвод_ПоказатьЕще.Видимость = Ложь;
	Иначе
		Для Каждого ОписаниеКоманды Из ОписанияКоманд Цикл
			НоваяКоманда = ОбычныйВвод_Команды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, ОписаниеКоманды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВводаПоСтранице(Знач ПолныйСброс = Ложь)
	
	//Общее
	ТекущаяДата = ТекущаяДатаСеанса();
	БыстрыйВвод_ДатаНачала = ТекущаяДата;
	Если ПолныйСброс Тогда
		// При создании или отмене создания объекта.
		БыстрыйВвод_Тема = "";
		БыстрыйВвод_Содержание = "";
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		
		ТемаЗаполнена = ЗначениеЗаполнено(БыстрыйВвод_Тема);
		ВысотаТемы = ?(ТемаЗаполнена, 2, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_Команды1", "Видимость", ТемаЗаполнена);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		ДанныеВидаВзаимодействия = CRM_ЛентаСобытий.ДанныеВидаВзаимодействияПоУмолчанию("ЛентаКлиента");
		БыстрыйВвод_ВзаимодействиеВид = ДанныеВидаВзаимодействия.Ссылка;
		Если БыстрыйВвод_Тема = "" Тогда
			БыстрыйВвод_Тема = ДанныеВидаВзаимодействия.Описание;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеНаВесьДень = Ложь;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = Истина;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = Истина;
		БыстрыйВвод_ДатаОкончания = ТекущаяДата + 3600;
		БыстрыйВвод_ВзаимодействиеПолучатель = Объект.CRM_ОсновноеКонтактноеЛицо;
		
		Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.Видимость = CRM_ЛентаСобытий.ЭтоПартнерСКонтактами(Объект.Ссылка);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Задача" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ЗадачаВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
		БыстрыйВвод_ДатаОкончания = ТекущаяДата + 86400;
		БыстрыйВвод_ЗадачаПолучатель = ТекущийПользователь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ПисьмоПолучатели.Очистить();
		БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
		БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
		БыстрыйВвод_ПисьмоСписокПолучателейПисьма = "";
		БыстрыйВвод_ПисьмоСписокПолучателейКопий = "";
		БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий = "";
		
		УчетныеЗаписиПочтыСписокВыбора = Элементы.БыстрыйВвод_ПисьмоОтправительПредставление.СписокВыбора;
		УчетныеЗаписиПочтыСписокВыбора.Очистить();
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(УчетныеЗаписиПочтыСписокВыбора,, ТекущийПользователь);
		Если УчетныеЗаписиПочтыСписокВыбора.Количество() > 0 Тогда
			УчетнаяЗаписьПоУмолчанию = CRM_ЛентаСобытий.УчетнаяЗаписьПоУмолчанию(ТекущийПользователь);
			ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию);
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора[0];
			КонецЕсли;
			БыстрыйВвод_ПисьмоУчетнаяЗапись = ЭлементСписка.Значение;
			БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВладельцыКонтактнойИнформации.Добавить(Объект.Ссылка);
			КонтактыПартнера = CRM_ЛентаСобытий.КонтактыПартнера(Объект.Ссылка);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВладельцыКонтактнойИнформации, КонтактыПартнера);
		КонецЕсли;
		
		ДанныеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		БыстрыйВвод_ПисьмоИсторияАдресов.Очистить();
		Для Каждого Строка Из ДанныеКонтактнойИнформации Цикл
			ПредставлениеАдресаКонтакта = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Строка.Объект, Строка.Представление, "");
			БыстрыйВвод_ПисьмоИсторияАдресов.Добавить(ПредставлениеАдресаКонтакта);
		КонецЦикла;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		
		// Если смогли переключиться на эту страницу - значит, получатели есть.
		ПервыйПолучатель = БыстрыйВвод_ЧатПолучатели[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя = ПервыйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес = ПервыйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель = ПервыйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя = ПервыйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись = ПервыйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа = ПервыйПолучатель.Группа;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

&НаКлиенте
Процедура ГиперссылкаПерейтиЗначенияКлассификаторовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти
//-Классификаторы
