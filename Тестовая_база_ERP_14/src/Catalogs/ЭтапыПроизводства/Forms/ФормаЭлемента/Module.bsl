#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ();
	
	Параметры.Свойство("Режим", Режим);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
//++ НЕ УТКА
	Если Режим = "СпецификацияЗаказа" Тогда
		
		ДоступностьРеквизитов = Истина;
		
		СвойстваЭтапа = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		АвтоЗаголовок = Ложь;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (Этап производства)';
				|en = '%1 (Production stage)'"),
			СвойстваЭтапа.Наименование);
		
		ЗаполнитьЗначенияСвойств(Объект, СвойстваЭтапа, , "ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров");
		
		Объект.ВидыРабочихЦентров.Загрузить(СвойстваЭтапа.ВидыРабочихЦентров);
		Объект.АльтернативныеВидыРабочихЦентров.Загрузить(СвойстваЭтапа.АльтернативныеВидыРабочихЦентров);
		
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Элементы.АльтернативнаяКоманднаяПанель.Видимость = Истина;
		Элементы.АльтернативнаяКоманднаяПанель.ПодчиненныеЭлементы.ЗавершитьРедактирование.КнопкаПоУмолчанию = Истина;
		
		Элементы.ПорядокЭтаповСтраницы.ТекущаяСтраница = Элементы.ПорядокЭтаповСтраницы.ПодчиненныеЭлементы.СтраницаСпецификацияЗаказа;
		
		Если СвойстваЭтапа.Выполняется ИЛИ СвойстваЭтапа.ЕстьКорректировкиМатериалов Тогда
			
			Элементы.СпособПроизводства.ТолькоПросмотр = Истина;
			Элементы.СпособПроизводства.Подсказка = ПолучитьТекстПодсказкиСпособПроизводства(
																	СвойстваЭтапа.Выполняется,
																	СвойстваЭтапа.ЕстьКорректировкиМатериалов); 
			
		КонецЕсли;
		
		НомерЭтапаФорма = Формат(СвойстваЭтапа.НомерЭтапаФорма, "ЧГ=0");
		НомерСледующегоЭтапаФорма = Формат(СвойстваЭтапа.НомерСледующегоЭтапаФорма, "ЧГ=0");
		
		Если ТолькоПросмотр Тогда
			Элементы.ЗавершитьРедактирование.Заголовок = НСтр("ru = 'Закрыть';
																|en = 'Close'");
		КонецЕсли;
		
		// Эти элементы не редактируются в спецификации заказа
		Элементы.РазбиватьМаршрутныеЛисты.Видимость = Ложь;
		Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.Видимость = Ложь;
		Элементы.ДекорацияМаксимальноеКоличествоЕдиницПартийИзделия.Видимость = Ложь;
		Элементы.РазбиватьМаршрутныеЛистыПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.МаксимальноеКоличествоЕдиницПартийИзделияПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.ДекорацияМаксимальноеКоличествоЕдиницПартийИзделияПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.ДекорацияОпределяетсяМаршрутнойКартой.Видимость = Ложь;
		Элементы.НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = Ложь;
		
		ПриЧтенииСозданииНаСервере();
		
	Иначе
//-- НЕ УТКА
	
		Элементы.АльтернативнаяКоманднаяПанель.Видимость = Ложь;
		Элементы.ВидыРабочихЦентровИспользовать.Видимость = Ложь;
		
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", Объект);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
		// Конец СтандартныеПодсистемы.Свойства
		
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//++ НЕ УТКА
	Если Режим <> "СпецификацияЗаказа" Тогда
	//-- НЕ УТКА
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.МаксимальноеКоличествоЕдиницПартийИзделия = МаксимальноеКоличествоЕдиницПартийИзделия;
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				ТекущийОбъект.ПланироватьРаботуВидовРабочихЦентров,
				ТекущийОбъект.ВидыРабочихЦентров,
				ТекущийОбъект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЭтапыПроизводства",, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастроитьЭлементыФормы();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//++ НЕ УТКА
	Если ИмяСобытия = "Запись_МаршрутныеКарты" И Источник = Объект.МаршрутнаяКарта Тогда
		ПрочитатьНастройкиМаршрутнойКарты(ЭтаФорма);
	КонецЕсли;
	//-- НЕ УТКА
	
	// Некоторые механизмы недоступны в режиме редактирования спецификации заказа
	Если Режим <> "СпецификацияЗаказа" Тогда		
		// Подсистема "Свойства"
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Режим = "СпецификацияЗаказа" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			ТекстВопроса = Нстр("ru = 'Данные были изменены. Перенести изменения?';
								|en = 'Data was changed. Transfer the changes?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПередЗакрытием", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
//++ НЕ УТКА
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаОтбораПоСвойствамИРасчетаПоФормулам" Тогда
		
		ТекущиеДанные = Элементы[ИсточникВыбора.ИмяТЧ].ТекущиеДанные;
		Если УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормуламЗавершение(ВыбранноеЗначение, ТекущиеДанные, Объект.ОтборПоСвойствам) Тогда
			
			ВидыРабочихЦентровПересчитатьВремяРаботы(ТекущиеДанные);
			РассчитатьДлительность();
			
			Модифицированность = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Режим <> "СпецификацияЗаказа" Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ РазбиватьМаршрутныеЛисты 
		//++ НЕ УТКА
		ИЛИ НЕ Объект.МаршрутнаяКарта.Пустая() 
		//-- НЕ УТКА
		Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособПроизводстваПриИзменении(Элемент)

	Объект.ПроизводствоНаСтороне = Булево(СпособПроизводства);
	
	Если Объект.ПроизводствоНаСтороне Тогда
		
		Объект.ПланироватьРаботуВидовРабочихЦентров = Ложь;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПроизводствоНаСтороне");
	
	ЗаполнитьПояснениеОсновныхНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутнаяКартаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	МаршрутнаяКартаПриИзмененииНаСервере();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьРаботуВидовРабочихЦентровПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПланироватьРаботуВидовРабочихЦентров");
	
	РассчитатьДлительность();
	
	ЗаполнитьПояснениеОсновныхНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияДлительностиЭтапаПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияДлительностиЭтапа.Пустая() Тогда
		Объект.ЕдиницаИзмеренияДлительностиЭтапа = ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
	РассчитатьДлительность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
	РассчитатьДлительность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОдновременноПроизводимоеКоличествоЕдиницПартийИзделийПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий");
	
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьМаршрутныеЛистыПриИзменении(Элемент)
	
	Если НЕ РазбиватьМаршрутныеЛисты Тогда
		Если МаксимальноеКоличествоЕдиницПартийИзделия <> 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 0;
		КонецЕсли; 
	Иначе
		Если МаксимальноеКоличествоЕдиницПартийИзделия = 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 1;
		КонецЕсли; 
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РазбиватьМаршрутныеЛисты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
	РассчитатьДлительность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершающийБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
	РассчитатьДлительность();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПереработчикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются");
	ТекущаяСтрока.Номенклатура = Объект.УслугаПереработчика;
	ТекущаяСтрока.Характеристика = Объект.ХарактеристикаУслугиПереработчика;
	ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.ХарактеристикаУслугиПереработчика);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
	Элементы.ХарактеристикаУслугиПереработчика.Доступность = ХарактеристикиИспользуются;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРаботыВидовРабочихЦентровПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	УправлениеДаннымиОбИзделияхКлиент.ПорядокРаботыВидовРабочихЦентровПриИзменении(
		ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Истина);
	
	РассчитатьДлительность();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРабочихЦентров

&НаКлиенте
Процедура ВидыРабочихЦентровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.ВидыРабочихЦентровПередНачаломДобавления(
		ТекущиеДанные, 
		ВидыРабочихЦентров, 
		Элементы.ВидыРабочихЦентров, 
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Отказ,
		ИспользуетсяПроизводство22 И Режим <> "СпецификацияЗаказа");
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВидыРабочихЦентров");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
		Если НЕ ТекущиеДанные.Альтернативный Тогда
			ТекущиеДанные.Использовать = Истина;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//++ НЕ УТКА
	Если НЕ ОтменаРедактирования Тогда
		РассчитатьДлительность();
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	ТаблицаФормы = Элементы.ВидыРабочихЦентров;
	МассивКлючей = Новый Массив;
	Для каждого ИдентификаторСтроки Из ТаблицаФормы.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
		
		Если МассивКлючей.Найти(ДанныеСтроки.КлючСвязи) = Неопределено Тогда
			МассивКлючей.Добавить(ДанныеСтроки.КлючСвязи);
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.Альтернативный Тогда
			
			КоллекцияАльтернатив = ДанныеСтроки.ПолучитьЭлементы();
			Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
				Если МассивКлючей.Найти(СтрокаАльтернатива.КлючСвязи) = Неопределено Тогда
					МассивКлючей.Добавить(СтрокаАльтернатива.КлючСвязи);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого КлючСвязи Из МассивКлючей Цикл
		СписокСтрок = Объект.ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			Объект.ОтборПоСвойствам.Удалить(НайденнаяСтрока);
		КонецЦикла; 
	КонецЦикла;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПослеУдаления(Элемент)
	
	//++ НЕ УТКА
	
	// Нужно проверить что выбран вид РЦ
	КоллекцияОсновныхВидовРЦ = ВидыРабочихЦентров.ПолучитьЭлементы();
	Для каждого СтрокаОсновнойВидРЦ Из КоллекцияОсновныхВидовРЦ Цикл
		Если СтрокаОсновнойВидРЦ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияАльтернатив = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		ИспользуетсяАльтернатива = Ложь;
		Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
			Если СтрокаАльтернатива.Использовать Тогда
				ИспользуетсяАльтернатива = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ИспользуетсяАльтернатива Тогда
			СтрокаОсновнойВидРЦ.Использовать = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	ПриИзмененииСоставаВидовРабочихЦентров();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	ОбработатьВыборПоляВТаблице("ВидыРабочихЦентров", Поле.Имя, СтандартнаяОбработка);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровИспользоватьПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	// Это всегда установка флажка
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		РодительЭлемента = ТекущиеДанные;
		КоллекцияАльтернатив = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		КоллекцияАльтернатив = РодительЭлемента.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
		Если СтрокаАльтернатива.Использовать И СтрокаАльтернатива <> ТекущиеДанные Тогда
			СтрокаАльтернатива.Использовать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если РодительЭлемента.Использовать И РодительЭлемента <> ТекущиеДанные Тогда
		РодительЭлемента.Использовать = Ложь;
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровВидРабочегоЦентраПриИзмененииНаСервере();
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВариантНаладкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровВариантНаладкиПриИзмененииНаСервере();
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВремяРаботыПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровЕдиницаИзмеренияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(Команда)
	
//++ НЕ УТКА
	Если Объект.МаршрутнаяКарта.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать маршрутную карту';
								|en = 'Select an operations sheet'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МаршрутнаяКарта");
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте();
	
	ПриИзмененииСоставаВидовРабочихЦентров();
//-- НЕ УТКА
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Виды рабочих центров"".';
								|en = 'Line of the ""Work center kinds"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ВидыРабочихЦентров");
		
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ВидыРабочихЦентров");
//-- НЕ УТКА
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ПеренестиДанныеВСпецификациюЗаказаИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьАльтернативныйВидРЦ(Команда)
	
//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.ДобавитьАльтернативныйВидРЦ(
				ТекущиеДанные, 
				ВидыРабочихЦентров, 
				Элементы.ВидыРабочихЦентров,
				Объект.ПорядокРаботыВидовРабочихЦентров,
				ЕстьСинхроннаяЗагрузка,
				ИспользуетсяПроизводство22);
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоэффициентМаршрутнойКарты(Команда)
	
	//++ НЕ УТКА
	
	Объект.КоэффициентМаршрутнойКарты = КоэффициентМаршрутнойКарты(Объект.Владелец, Объект.МаршрутнаяКарта);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Коэффициент рассчитан';
			|en = 'Factor is calculated'"),
		,
		,
		БиблиотекаКартинок.Информация32);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемы

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

//++ НЕ УТКА
#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

&НаКлиенте
Функция ПроверитьПолучитьОсновноеИзделиеСпецификации(ОсновноеИзделие = Неопределено)

	ОсновноеИзделие = ДанныеОсновногоИзделияСпецификации(Объект.Владелец);
	
	Если ОсновноеИзделие <> Неопределено Тогда
		Номенклатура = ОсновноеИзделие.Номенклатура;
	Иначе
		Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	Если Номенклатура.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо указать основное изделие спецификации.';
								|en = 'Specify main BOM product.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Номенклатура;

КонецФункции

&НаСервереБезКонтекста
Функция ДанныеОсновногоИзделияСпецификации(Спецификация)
	
	ОсновноеИзделие = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(Спецификация);
	Возврат ОсновноеИзделие;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, ИмяТЧ)
	
	Номенклатура = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ);
	
	Если ТекущиеДанные.СинхроннаяЗагрузка ИЛИ ЕстьСинхроннаяЗагрузка Тогда
		СоставНастроек = Новый Структура("ОтборПоСвойствам");
	Иначе
		СоставНастроек = Неопределено;
	КонецЕсли;
	
	ОтборПоСвойствам = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.ОтборПоСвойствам,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаОтбораПоСвойствам());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормулам(
						ЭтаФорма,
						ИмяТЧ,
						ОтборПоСвойствам,
						Номенклатура,
						НЕ ДоступностьРеквизитов,
						СоставНастроек,
						АдресВХранилище);
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ)
	
	ДанныеДляРасчета = Справочники.РесурсныеСпецификации.ВыгрузитьДанныеДляКонструктораФормул(
		Объект.Владелец,
		ИмяТЧ);
	
	Результат = ПоместитьВоВременноеХранилище(ДанныеДляРасчета, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПодсистемыПроизводство);

	ИспользоватьПланированиеПроизводства = Константы.ИспользоватьПланированиеПроизводства.Получить();
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
	
	СпособПроизводства = Число(Объект.ПроизводствоНаСтороне);
	ПрочитатьРеквизитыПодразделения(Истина);
	
	ДоступноОписаниеПартииВыпуска = УправлениеДаннымиОбИзделиях.ДоступноОписаниеПартииВыпуска();
	ЗаполнитьОписаниеПартииВыпуска();

//++ НЕ УТКА
	ЗаполнитьВидыРабочихЦентров();
	ПрочитатьНастройкиМаршрутнойКарты(ЭтотОбъект);
//-- НЕ УТКА
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтотОбъект);
	
//++ НЕ УТКА
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.УслугаПереработчика);
	Элементы.ХарактеристикаУслугиПереработчика.Доступность = ХарактеристикиИспользуются;
//-- НЕ УТКА
	
	ЗаполнитьПояснениеОсновныхНастроек(ЭтотОбъект);
	
	УстановитьДоступностьПоСтатусуСервер();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ОтметкаНезаполненного для партии маршрутных листов
	#Область МаксимальноеКоличествоЕдиницПартийИзделияОтметка
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазбиватьМаршрутныеЛисты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
//++ НЕ УТКА
	
	#Область ВидыРабочихЦентров
	
	Если Режим <> "СпецификацияЗаказа" Тогда
		
		УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
			ЭтаФорма,
			"",
			"ВидыРабочихЦентров",
			"ВремяРаботы");
		
	КонецЕсли;
	
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеВидыРабочихЦентров(
		ЭтаФорма, "ВидыРабочихЦентров");
	
	// Скрываем редактирование времени работы, если применяется синхронная загрузка, но не выбран вариант наладки.
	#Область ВремяРаботыПриСинхроннойЗагрузке_Скрыть
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ВидыРабочихЦентровВремяРаботы"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ВидыРабочихЦентровЕдиницаИзмерения"].Имя);
	
	ОтборГруппаИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборГруппаИ = ОтборГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ДобавитьОтборОформленияСинхроннаяЗагрузкаВариантНаладкиНеЗаполнен(ОтборГруппаИ);
	
	ОтборГруппаИ = ОтборГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ДобавитьОтборОформленияОдновременнаяЗагрузка(ОтборГруппаИ);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Скрываем надпись предназначенную для синхронной загрузки
	#Область ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке_Скрыть
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке");
		
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
	ОтборГруппаНЕ = ОтборГруппа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаНЕ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
		
	ДобавитьОтборОформленияСинхроннаяЗагрузкаВариантНаладкиНеЗаполнен(ОтборГруппаНЕ);
		
	ОтборГруппаНЕ = ОтборГруппа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаНЕ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
		
	ДобавитьОтборОформленияОдновременнаяЗагрузка(ОтборГруппаНЕ);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	// Показываем надпись предназначенную для синхронной загрузки если вариант наладки не выбран.
	#Область ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке_Показать
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке");

	ДобавитьОтборОформленияСинхроннаяЗагрузкаВариантНаладкиНеЗаполнен(Элемент.Отбор);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<определяется вариантом наладки>';
																|en = '<determined by setup option>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	#КонецОбласти
	
	// Показываем надпись при одновременном порядке работы если время определяется синхронными видами РЦ.
	#Область ВидыРабочихЦентровВремяРаботыПриСинхроннойОдновременнойЗагрузке_Показать
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке");
		
	ДобавитьОтборОформленияОдновременнаяЗагрузка(Элемент.Отбор);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<определяется ВРЦ с синхронной загрузкой>';
																|en = '<WCK with synchronous load is determined>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	#КонецОбласти
	
	#КонецОбласти
	
	// ОтметкаНезаполненного для коэффициента маршрутной карты
	#Область КоэффициентМаршрутнойКарты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоэффициентМаршрутнойКарты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МаршрутнаяКарта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
//-- НЕ УТКА
	
	#Область Прочее
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
		"ХарактеристикаУслугиПереработчика",
		"ХарактеристикиИспользуются");
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ДанныеСпецификации = ДанныеРесурснойСпецификации();
	
	Элементы.ПорядокЭтаповСтраницы.Видимость = ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс;
	Элементы.СпособПроизводства.Видимость = ИспользуетсяПроизводствоНаСтороне И Не ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс;
	
//++ НЕ УТКА
	Если ИспользуетсяПроизводствоНаСтороне
		И (ДанныеСпецификации.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ Объект.ПроизводствоНаСтороне) Тогда
		Элементы.СпособПроизводства.Видимость = Истина;
	Иначе
		Элементы.СпособПроизводства.Видимость = Ложь;
	КонецЕсли;
//-- НЕ УТКА
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
		ДанныеСпецификации.ВыпускПроизвольнымиПорциями, Элементы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
	
	Элементы.СтраницаОписание.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Описание);

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ПроизводствоНаСтороне")
		ИЛИ СтруктураРеквизитов.Свойство("ПланироватьРаботуВидовРабочихЦентров")
		ИЛИ СтруктураРеквизитов.Свойство("ВидыРабочихЦентров")
		ИЛИ Инициализация Тогда
		
		ИспользоватьВРЦ = Объект.ПланироватьРаботуВидовРабочихЦентров;
		
		Планирование22 = Форма.ИспользуетсяПроизводство22
			И Форма.ИспользуетсяПланированиеПоПроизводственнымРесурсам;
		
		ПланированиеПоЗагрузкеВРЦ = ИспользоватьВРЦ
			И (Планирование22 ИЛИ Форма.ИспользуетсяПроизводство21);
		
		СобственноеПроизводство = (Форма.СпособПроизводства = 0);
		
		Элементы.СтраницаПереработка.Видимость = НЕ СобственноеПроизводство;
		
		Элементы.ИнтервалПланирования.Видимость = ПланированиеПоЗагрузкеВРЦ
			И СобственноеПроизводство;
		
		Элементы.ГруппаБуферы.Видимость = ПланированиеПоЗагрузкеВРЦ
			И СобственноеПроизводство;
			
		Элементы.ГруппаОдновременноПроизводимоеКоличество.Видимость = ИспользоватьВРЦ;
		
		Элементы.Непрерывный.Видимость = ПланированиеПоЗагрузкеВРЦ
			И СобственноеПроизводство;
		
		Элементы.ПланироватьРаботуВидовРабочихЦентров.Видимость = СобственноеПроизводство;
		
		Элементы.ВидыРабочихЦентров.Видимость = ИспользоватьВРЦ;
		
		Элементы.НастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = НЕ Форма.ИспользуетсяПроизводство21;
		
		Элементы.ГруппаМаршрутнаяКарта.Видимость = Форма.УправлениеПредприятием И СобственноеПроизводство;
		
		Элементы.СтраницыРазбиватьМаршрутныеЛисты.Видимость = Форма.УправлениеПредприятием
			И Форма.ИспользуетсяПроизводство21
			И СобственноеПроизводство;
		
		ДлительностьТолькоПросмотр = РассчитыватьДлительностьАвтоматически(Форма);
		
		Элементы.ДлительностьЭтапа.ТолькоПросмотр = ДлительностьТолькоПросмотр;
		Элементы.ЕдиницаИзмеренияДлительностиЭтапа.ТолькоПросмотр = ДлительностьТолькоПросмотр;
		
		//++ НЕ УТКА
		Элементы.ПорядокРаботыВидовРабочихЦентров.Видимость = ИспользоватьВРЦ
			И Планирование22
			И Форма.Режим <> "СпецификацияЗаказа";
		
		Если Элементы.ПорядокРаботыВидовРабочихЦентров.Видимость Тогда
			
			НесколькоВидовРЦ = Форма.ВидыРабочихЦентров.ПолучитьЭлементы().Количество() > 1;
			
			Если НесколькоВидовРЦ Тогда
				Элементы.ПорядокРаботыВидовРабочихЦентров.ПодсказкаВвода = "";
			Иначе
				Элементы.ПорядокРаботыВидовРабочихЦентров.ПодсказкаВвода = НСтр("ru = '<не используется>';
																				|en = '<not used>'");
			КонецЕсли;
			
			Если Форма.ДоступностьРеквизитов И НЕ Форма.СпецификацияЗакрыта Тогда
				Элементы.ПорядокРаботыВидовРабочихЦентров.ТолькоПросмотр = НЕ НесколькоВидовРЦ;
			КонецЕсли;
			
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РазбиватьМаршрутныеЛисты")
		ИЛИ Инициализация Тогда
		
		Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.ТолькоПросмотр = 
			НЕ (Форма.РазбиватьМаршрутныеЛисты И НЕ Форма.СпецификацияЗакрыта);
		
	КонецЕсли;
	
//++ НЕ УТКА
	ОтображатьКоэффициент = Форма.ИспользуетсяПроизводство22 И НЕ Форма.ИспользуетсяПроизводство21;
	Если СтруктураРеквизитов.Свойство("МаршрутнаяКарта")
		ИЛИ Инициализация Тогда
		
		Если Форма.ДоступностьРеквизитов И НЕ Форма.СпецификацияЗакрыта Тогда
			Элементы.КоэффициентМаршрутнойКарты.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.МаршрутнаяКарта);
		КонецЕсли;
		
		Элементы.КоэффициентМаршрутнойКарты.Видимость = ОтображатьКоэффициент;
		Элементы.РассчитатьКоэффициентМаршрутнойКарты.Видимость = ОтображатьКоэффициент И Форма.РассчитыватьКоэффициент;
		
	КонецЕсли;
	
	Элементы.РассчитатьКоэффициентМаршрутнойКарты.Доступность = ОтображатьКоэффициент И НЕ Элементы.КоэффициентМаршрутнойКарты.ТолькоПросмотр;
//-- НЕ УТКА
	
	// Одновременно производимое количество единиц/партий изделий
	Если СтруктураРеквизитов.Свойство("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий")
		ИЛИ Инициализация Тогда
		
		ПодсказкаВвода = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
			Форма.ОписаниеПартииВыпуска,
			Объект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		Элементы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий.Подсказка = ПодсказкаВвода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСтатусуСервер()
	
	Если Режим = "СпецификацияЗаказа" ИЛИ ТолькоПросмотр ИЛИ Объект.Владелец.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Статус");
	ДоступностьРеквизитов = (СтатусВладельца = Перечисления.СтатусыСпецификаций.ВРазработке);
	СпецификацияЗакрыта = (СтатусВладельца = Перечисления.СтатусыСпецификаций.Закрыта);
	
	Элементы.НомерЭтапа.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.НомерСледующегоЭтапа.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.Подразделение.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.СпособПроизводства.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.МаршрутнаяКарта.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.КоэффициентМаршрутнойКарты.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.ПланироватьРаботуВидовРабочихЦентров.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.ВидыРабочихЦентров.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.Партнер.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.ГрафикРаботыПартнера.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	Элементы.ПорядокРаботыВидовРабочихЦентров.ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	
	Элементы.ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте.Доступность = ДоступностьРеквизитов;
	Элементы.ДобавитьАльтернативный.Доступность= ДоступностьРеквизитов;
	
	// Если спецификация закрыта то сделаем недоступными остальные реквизиты
	Элементы.ПредварительныйБуфер.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.ЗавершающийБуфер.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.ДлительностьЭтапа.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.ЕдиницаИзмеренияДлительностиЭтапа.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.Непрерывный.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.РазбиватьМаршрутныеЛисты.ТолькоПросмотр = СпецификацияЗакрыта;
	Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.ТолькоПросмотр = СпецификацияЗакрыта;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеПартииВыпуска()
	
	Если Режим <> "СпецификацияЗаказа" И ДоступноОписаниеПартииВыпуска Тогда
	
		Если Параметры.Свойство("ОписаниеПартииВыпуска")
			И Параметры.ОписаниеПартииВыпуска <> Неопределено Тогда
			
			ОписаниеПартииВыпуска = Параметры.ОписаниеПартииВыпуска;
			
		Иначе
			
			ОписаниеПартииВыпуска = Справочники.РесурсныеСпецификации.ОписаниеПартииВыпуска(Объект.Владелец);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДанныеРесурснойСпецификации()
	
	Если Режим <> "СпецификацияЗаказа" И ЗначениеЗаполнено(Объект.Владелец) Тогда
		СоставРеквизитов = "ТипПроизводственногоПроцесса,ВыпускПроизвольнымиПорциями,МногоэтапныйПроизводственныйПроцесс";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец, СоставРеквизитов);
	Иначе
		ЗначенияРеквизитов = Новый Структура("
		|ТипПроизводственногоПроцесса,
		|ВыпускПроизвольнымиПорциями,
		|МногоэтапныйПроизводственныйПроцесс",
		Перечисления.ТипыПроизводственныхПроцессов.Сборка, Ложь, Ложь);
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;

КонецФункции

&НаСервере
Процедура ПрочитатьРеквизитыПодразделения(ЭтоЧтениеОбъекта)

	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	
	//++ НЕ УТКА
	ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
	
	Если НЕ ЭтоЧтениеОбъекта Тогда
		УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
					ВидыРабочихЦентров, 
					Объект.ПланироватьРаботуВидовРабочихЦентров,
					Объект.ВидыРабочихЦентров,
					Объект.АльтернативныеВидыРабочихЦентров);
		
		УправлениеДаннымиОбИзделиях.ПроверитьСоответствиеРеквизитовПодразделению(Объект);
		
		ЗаполнитьВидыРабочихЦентров();
	КонецЕсли; 
	//-- НЕ УТКА
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора);
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора);
	
	ПроверитьВыборЕдиницыИзмеренияБуферов(НЕ ЭтоЧтениеОбъекта);

КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ДобавитьОтборОформленияСинхроннаяЗагрузкаВариантНаладкиНеЗаполнен(Группа)
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ВидРабочегоЦентра");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
		
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ВариантНаладки");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборОформленияОдновременнаяЗагрузка(Группа)
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьСинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ПорядокРаботыВидовРабочихЦентров");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстПодсказкиСпособПроизводства(Выполняется, ЕстьКорректировкиМатериалов)
	
	ТекстПодсказки = НСтр("ru = 'Изменить способ производства невозможно';
							|en = 'Cannot change the production method'");
	
	Если Выполняется Тогда
		ТекстПодсказки = ТекстПодсказки + Символы.ПС + " - " + НСтр("ru = 'начато выполнение этапа';
																	|en = 'stage execution start'");
	КонецЕсли;
	
	Если ЕстьКорректировкиМатериалов Тогда
		ТекстПодсказки = ТекстПодсказки + Символы.ПС + " - " + НСтр("ru = 'по материалам этапа введены корректировки';
																	|en = 'adjusting entries are entered by the stage materials'");
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьНастройкиМаршрутнойКарты(Форма)

	Если Форма.Объект.МаршрутнаяКарта.Пустая() Тогда
		
		Форма.РазбиватьМаршрутныеЛисты = (Форма.Объект.МаксимальноеКоличествоЕдиницПартийИзделия <> 0);
		
		Форма.МаксимальноеКоличествоЕдиницПартийИзделия = Форма.Объект.МаксимальноеКоличествоЕдиницПартийИзделия;
		
		Форма.Элементы.СтраницыРазбиватьМаршрутныеЛисты.ТекущаяСтраница = Форма.Элементы.СтраницаРазбиватьМаршрутныеЛисты;
		
		Форма.РассчитыватьКоэффициент = Ложь;
		
	Иначе
		
		ПараметрыМК = ПараметрыМаршрутнойКарты(Форма.Объект.МаршрутнаяКарта);
		
		Форма.РазбиватьМаршрутныеЛистыПоМаршрутнойКарте = (ПараметрыМК.МаксимальноеКоличествоЕдиницПартийИзделия <> 0);
		
		Форма.Элементы.СтраницыРазбиватьМаршрутныеЛисты.ТекущаяСтраница =
			Форма.Элементы.СтраницаРазбиватьМаршрутныеЛистыПоМаршрутнойКарте;
			
		Форма.РассчитыватьКоэффициент = ПараметрыМК.РассчитыватьКоэффициент;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыМаршрутнойКарты(МаршрутнаяКарта)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		МаршрутнаяКарта,
		"МаксимальноеКоличествоЕдиницПартийИзделия, РассчитыватьКоэффициент");
		
КонецФункции

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоДляБуферов(Форма)

	Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияПредварительногоБуфера)
		И Форма.Объект.ПредварительныйБуфер <> 0 Тогда
		Форма.Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 	

	Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияЗавершающегоБуфера)
		И Форма.Объект.ЗавершающийБуфер <> 0 Тогда
		Форма.Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПояснениеОсновныхНастроек(Форма)
	
	МассивСтрок = Новый Массив;
	
	//++ НЕ УТКА
	
	ПланироватьПоПроизводственнымРесурсам = Форма.ИспользуетсяПланированиеПоПроизводственнымРесурсам;
	ПланироватьПоМатериальнымРесурсам = Форма.ИспользуетсяПланированиеПоМатериальнымРесурсам;
	ИспользоватьВРЦ = Форма.Объект.ПланироватьРаботуВидовРабочихЦентров;
	ИспользоватьПланыПроизводства = Форма.ИспользоватьПланированиеПроизводства;
	ПроизводствоНаСтороне = НЕ (Форма.СпособПроизводства = 0);
	
	Если (НЕ ПланироватьПоПроизводственнымРесурсам И ПланироватьПоМатериальнымРесурсам)
		И Форма.ИспользуетсяПроизводство21
		И ИспользоватьВРЦ Тогда
		
		МассивСтрок.Добавить(
			НСтр("ru = 'Виды рабочих центров используются для построения графика с учетом доступности (в управлении производством версии 2.1).';
				|en = 'Work center kinds are used to create a schedule considering availability (in Production management, version 2.1).'"));
		
		МассивСтрок.Добавить(
			НСтр("ru = 'Длительность этапа используется для построения графика производства (в управлении производством версии 2.2).';
				|en = 'Stage duration is used to create a production schedule (in Production management, version 2.2).'"));
		
	Иначе
		
		Если (ПланироватьПоПроизводственнымРесурсам ИЛИ Форма.ИспользуетсяПроизводство21) И ИспользоватьВРЦ Тогда
			
			МассивСтрок.Добавить(
				НСтр("ru = 'Виды рабочих центров используются для построения графика с учетом доступности.';
					|en = 'Work center kinds are used to create a schedule considering availability.'"));
			
		ИначеЕсли ИспользоватьПланыПроизводства И ИспользоватьВРЦ Тогда
			
			МассивСтрок.Добавить(
				НСтр("ru = 'Виды рабочих центров используются для расчета потребностей по планам производства.';
					|en = 'Work center kinds are used to calculate demands according to production plans.'"));
				
		ИначеЕсли ИспользоватьВРЦ Тогда
			
			МассивСтрок.Добавить(НСтр("ru = 'Виды рабочих центров задаются справочно.';
										|en = 'Work center types are set for reference. '"));
			
		КонецЕсли;
		
		Если (
				(ПланироватьПоПроизводственнымРесурсам ИЛИ Форма.ИспользуетсяПроизводство21)
				И НЕ ИспользоватьВРЦ
			)
			ИЛИ (
					НЕ ПланироватьПоПроизводственнымРесурсам И ПланироватьПоМатериальнымРесурсам
				)
			ИЛИ ПроизводствоНаСтороне Тогда
			
			МассивСтрок.Добавить(
				НСтр("ru = 'Длительность этапа используется для построения графика производства.';
					|en = 'Stage duration is used to create a production schedule.'"));
			
		ИначеЕсли ПланироватьПоПроизводственнымРесурсам И ИспользоватьВРЦ Тогда
			
			МассивСтрок.Добавить(
				НСтр("ru = 'Длительность этапа используется для определения сроков изготовления продукции без построения графика.';
					|en = 'Stage duration is used to determine product manufacturing deadlines without making a schedule.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РассчитыватьДлительностьАвтоматически(Форма) Тогда
		
		МассивСтрок.Добавить(
				НСтр("ru = 'Длительность рассчитывается автоматически по размеру буферов и времени работы видов рабочих центров.';
					|en = 'Duration is calculated automatically according to the buffer size and working hours of work center kinds.'"));
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	ПоказыватьПояснение = МассивСтрок.ВГраница() <> -1;
	
	Если ПоказыватьПояснение Тогда
		
		Форма.Элементы.ПояснениеОсновныхНастроекНадпись.Заголовок = СтрСоединить(МассивСтрок, " ");
		
	КонецЕсли;
	
	Форма.Элементы.ГруппаПояснениеОсновныхНастроек.Видимость = ПоказыватьПояснение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьДлительностьАвтоматически(Форма)
	
	Возврат Форма.Объект.ПланироватьРаботуВидовРабочихЦентров
		И (
			Форма.ИспользуетсяПланированиеПоПроизводственнымРесурсам
			ИЛИ (
					Форма.ИспользуетсяПроизводство21
					И НЕ Форма.ИспользуетсяПланированиеПоМатериальнымРесурсам
				)
		);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьДлительность()
	
	//++ НЕ УТКА
	
	Если РассчитыватьДлительностьАвтоматически(ЭтотОбъект) Тогда
		РассчитатьДлительностьНаСервере();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте()
	
	Справочники.ЭтапыПроизводства.ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(Объект);
	ПроверитьВыборЕдиницыИзмеренияБуферов(Истина);

	// По умолчанию используем основные виды РЦ
	Для каждого СтрокаОсновнойВидРЦ Из Объект.ВидыРабочихЦентров Цикл
		СтрокаОсновнойВидРЦ.Использовать = Истина;
	КонецЦикла;
	
	ЗаполнитьВидыРабочихЦентров();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентров()
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
		Объект.ВидыРабочихЦентров,
		Ложь,
		Истина,
		Объект.ОтборПоСвойствам);
		
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
		Объект.АльтернативныеВидыРабочихЦентров,
		Ложь,
		Истина,
		Объект.ОтборПоСвойствам);
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьВидыРабочихЦентров(
		Объект.ВидыРабочихЦентров,
		Объект.АльтернативныеВидыРабочихЦентров,
		ВидыРабочихЦентров,
		Истина);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ()

	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ВидыРабочихЦентров.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
				Неопределено,
				Неопределено,
				Истина,
		ТекущиеДанные);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
	Если ТекущиеДанные.СинхроннаяЗагрузка Тогда
		ТекущиеДанные.РасчетПоФормуле = Ложь;
		ТекущиеДанные.АлгоритмРасчетаКоличества = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзмененииНаСервере()

	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ВидыРабочихЦентров.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ();

КонецПроцедуры
 
&НаСервере
Процедура ВидыРабочихЦентровВариантНаладкиПриИзмененииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ();
	
КонецПроцедуры

&НаСервере
Процедура МаршрутнаяКартаПриИзмененииНаСервере()
	
	ПрочитатьНастройкиМаршрутнойКарты(ЭтаФорма);
	
	Если РассчитыватьКоэффициент Тогда
		
		Объект.КоэффициентМаршрутнойКарты = КоэффициентМаршрутнойКарты(Объект.Владелец, Объект.МаршрутнаяКарта);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.МаршрутнаяКарта) Тогда
			Объект.КоэффициентМаршрутнойКарты = 0;
		ИначеЕсли Объект.КоэффициентМаршрутнойКарты = 0 Тогда
			Объект.КоэффициентМаршрутнойКарты = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "МаршрутнаяКарта");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоэффициентМаршрутнойКарты(РесурснаяСпецификация, МаршрутнаяКарта)
	
	ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(
		РесурснаяСпецификация);
	
	Возврат Справочники.МаршрутныеКарты.КоэффициентМаршрутнойКартыДляСпецификации(
		ДанныеСпецификации, МаршрутнаяКарта);
	
КонецФункции

&НаСервере
Процедура РассчитатьДлительностьНаСервере()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
		ВидыРабочихЦентров, 
		СправочникОбъект.ПланироватьРаботуВидовРабочихЦентров,
		СправочникОбъект.ВидыРабочихЦентров,
		СправочникОбъект.АльтернативныеВидыРабочихЦентров);
	
	СправочникОбъект.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ();
	
	ЗаполнитьЗначенияСвойств(Объект, СправочникОбъект, "ЕдиницаИзмеренияДлительностиЭтапа, ДлительностьЭтапа");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПересчитатьВремяРаботы(ТекущиеДанные)
	
	УправлениеДаннымиОбИзделияхКлиент.ВидыРабочихЦентровПересчитатьВремяРаботы(
			ТекущиеДанные,
			ВидыРабочихЦентров,
			Объект.ПорядокРаботыВидовРабочихЦентров,
			ЕстьСинхроннаяЗагрузка,
			ИспользуетсяПроизводство22,
			Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСоставаВидовРабочихЦентров()
	
УправлениеДаннымиОбИзделияхКлиент.ПриИзмененииСоставаВидовРабочихЦентров(
		ВидыРабочихЦентров, 
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ИспользуетсяПроизводство22 И Режим <> "СпецификацияЗаказа");
	
	РассчитатьДлительность();
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВидыРабочихЦентров");
	
КонецПроцедуры

//-- НЕ УТКА

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()

	ПрочитатьРеквизитыПодразделения(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПоляВТаблице(ИмяТаблицы, ИмяПоля, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
//++ НЕ УТКА
	Если (ИмяПоля = "ВидыРабочихЦентровВидРабочегоЦентра")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабочегоЦентра)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабочегоЦентра);
		
	ИначеЕсли (ИмяПоля = "ВидыРабочихЦентровВариантНаладки")
		И ЗначениеЗаполнено(ТекущиеДанные.ВариантНаладки)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВариантНаладки);
		
	КонецЕсли;
//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеренестиДанныеВСпецификациюЗаказаИЗакрыть();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеЭтапа()

	//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				Объект.ПланироватьРаботуВидовРабочихЦентров,
				Объект.ВидыРабочихЦентров,
				Объект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЭтапОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ЭтапОбъект.ПроверитьЗаполнениеРеквизитов(Ложь);
	
КонецФункции

&НаСервере
Функция ДанныеЭтапаВХранилище()
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				Объект.ПланироватьРаботуВидовРабочихЦентров,
				Объект.ВидыРабочихЦентров,
				Объект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	СвойстваЭтапа = Новый Структура;
	
	СвойстваЭтапа.Вставить("Подразделение",                          Объект.Подразделение);
	СвойстваЭтапа.Вставить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий",         Объект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
	СвойстваЭтапа.Вставить("МаршрутнаяКарта",                        Объект.МаршрутнаяКарта);
	СвойстваЭтапа.Вставить("ПланироватьРаботуВидовРабочихЦентров",   Объект.ПланироватьРаботуВидовРабочихЦентров);
	СвойстваЭтапа.Вставить("Описание",                               Объект.Описание);
	СвойстваЭтапа.Вставить("ДлительностьЭтапа",                      Объект.ДлительностьЭтапа);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияДлительностиЭтапа",      Объект.ЕдиницаИзмеренияДлительностиЭтапа);
	СвойстваЭтапа.Вставить("ПредварительныйБуфер",                   Объект.ПредварительныйБуфер);
	СвойстваЭтапа.Вставить("ЗавершающийБуфер",                       Объект.ЗавершающийБуфер);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияПредварительногоБуфера", Объект.ЕдиницаИзмеренияПредварительногоБуфера);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияЗавершающегоБуфера",     Объект.ЕдиницаИзмеренияЗавершающегоБуфера);
	СвойстваЭтапа.Вставить("НаименованиеЭтапа",                      Объект.Наименование);
	СвойстваЭтапа.Вставить("Непрерывный",                            Объект.Непрерывный);
	
	СвойстваЭтапа.Вставить("ПроизводствоНаСтороне",                  Объект.ПроизводствоНаСтороне);
	СвойстваЭтапа.Вставить("Партнер",                                Объект.Партнер);
	СвойстваЭтапа.Вставить("ГрафикРаботыПартнера",                   Объект.ГрафикРаботыПартнера);
	СвойстваЭтапа.Вставить("УслугаПереработчика",                    Объект.УслугаПереработчика);
	СвойстваЭтапа.Вставить("ХарактеристикаУслугиПереработчика",      Объект.ХарактеристикаУслугиПереработчика);
	СвойстваЭтапа.Вставить("СтатьяКалькуляции",                      Объект.СтатьяКалькуляции);
	
	СвойстваЭтапа.Вставить("ВидыРабочихЦентров",                     Объект.ВидыРабочихЦентров.Выгрузить());
	СвойстваЭтапа.Вставить("АльтернативныеВидыРабочихЦентров",       Объект.АльтернативныеВидыРабочихЦентров.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СвойстваЭтапа, УникальныйИдентификатор);
	
КонецФункции
 
&НаКлиенте
Процедура ПеренестиДанныеВСпецификациюЗаказаИЗакрыть()
	
	Если Модифицированность Тогда
		
		ОчиститьСообщения();
		
		Если НЕ ПроверитьЗаполнениеЭтапа() Тогда
			Возврат;
		КонецЕсли; 
		
		Модифицированность = Ложь;
			
		ВыбранноеЗначение = Новый Структура("ВыполняемаяОперация, АдресВХранилище", "РедактированиеЭтапаПроизводства", ДанныеЭтапаВХранилище());
			
		ОповеститьОВыборе(ВыбранноеЗначение);
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыборЕдиницыИзмеренияБуферов(ЗаменитьЗначения)

	// Предварительный буфер
	СписокВыбора = Элементы.ЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(Объект.ЕдиницаИзмеренияПредварительногоБуфера) = Неопределено 
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияПредварительногоБуфера) Тогда
		
		Если ЗаменитьЗначения Тогда
			
			Объект.ПредварительныйБуфер = 0;
			Объект.ЕдиницаИзмеренияПредварительногоБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ТекстСообщения = НСтр("ru = 'Указана некорректная единица измерения предварительного буфера.';
									|en = 'Incorrect unit of measure of the preliminary buffer is specified.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, 
						"ЕдиницаИзмеренияПредварительногоБуфера", 
						"Объект"); 
		КонецЕсли; 
		
	КонецЕсли; 

	// Завершающий буфер
	СписокВыбора = Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(Объект.ЕдиницаИзмеренияЗавершающегоБуфера) = Неопределено
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияЗавершающегоБуфера) Тогда
		
		Если ЗаменитьЗначения Тогда
			
			Объект.ЗавершающийБуфер = 0;
			Объект.ЕдиницаИзмеренияЗавершающегоБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ТекстСообщения = НСтр("ru = 'Указана некорректная единица измерения завершающего буфера.';
									|en = 'Incorrect unit of measure of the follow-up buffer is specified.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, 
						"ЕдиницаИзмеренияЗавершающегоБуфера", 
						"Объект"); 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
