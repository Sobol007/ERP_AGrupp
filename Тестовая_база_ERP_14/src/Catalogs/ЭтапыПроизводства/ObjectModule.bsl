#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет заполнение реквизитов этапа
// Используется при записи действующей спецификации и при редактировании этапа в заказе на производство.
//
// Параметры:
//	СообщитьНазваниеЭтапа - Булево - если Истина то в текст сообщений об ошибках будет добавлено представление этапа
//  ПутьКДанным     - Строка - путь к данным (путь к реквизиту формы), используется для корректного вывода сообщений
//  Отказ 			- Булево - истина, если найдены ошибки.
//
// Возвращаемое значение:
//   Булево   - Истина, если найдены ошибки заполнения.
//
Функция ПроверитьЗаполнениеРеквизитов(СообщитьНазваниеЭтапа, Знач ПутьКДанным = "", Отказ = Ложь) Экспорт

	ЕстьОшибки = Ложь;
	
	Если ПутьКДанным = "" Тогда
		КлючДанных = ЭтотОбъект;
	Иначе
		КлючДанных = Неопределено;
	КонецЕсли;
	
	ПроверитьЗаполнениеРеквизитовШапки(КлючДанных, СообщитьНазваниеЭтапа, ЕстьОшибки, ПутьКДанным);
	
	//++ НЕ УТКА
	
	Если ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ПроверитьЗаполнениеВидовРабочихЦентров(КлючДанных, СообщитьНазваниеЭтапа, ЕстьОшибки);
		
	КонецЕсли;
	
	ПроверитьЗаполнениеДлительностиЭтапа(КлючДанных, СообщитьНазваниеЭтапа, ЕстьОшибки);
	
	//-- НЕ УТКА
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

//++ НЕ УТКА

// Процедура заполняет плановую длительность и единицу измерения длительности этапа ББВ.
//
Процедура ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ() Экспорт
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(ЭтотОбъект);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Эти реквизиты проверяются только при записи действующей спецификации
	МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	МассивНепроверяемыхРеквизитов.Добавить("КоэффициентМаршрутнойКарты");
	МассивНепроверяемыхРеквизитов.Добавить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий");
	МассивНепроверяемыхРеквизитов.Добавить("ВидыРабочихЦентров");
	МассивНепроверяемыхРеквизитов.Добавить("ВидыРабочихЦентров.ВидРабочегоЦентра");
	МассивНепроверяемыхРеквизитов.Добавить("ВидыРабочихЦентров.ВремяРаботы");
	МассивНепроверяемыхРеквизитов.Добавить("ВидыРабочихЦентров.ЕдиницаИзмерения");
	МассивНепроверяемыхРеквизитов.Добавить("ВидыРабочихЦентров.ВариантНаладки");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если НомерЭтапа >= НомерСледующегоЭтапа И НомерСледующегоЭтапа <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Номер следующего этапа должен быть больше номера этапа.';
								|en = 'Next stage number should be more than the stage number.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НомерСледующегоЭтапа",, Отказ);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		СтатусСпецификации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Статус");
		Если СтатусСпецификации <> Перечисления.СтатусыСпецификаций.ВРазработке Тогда
			ПроверитьЗаполнениеРеквизитов(Ложь,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
//++ НЕ УТКА
	Если ПланироватьРаботуВидовРабочихЦентров Тогда
		
		Для каждого Строка Из ВидыРабочихЦентров Цикл
			Если Не ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
				Строка.Занятость = 0;
				Строка.ВремяРаботы = 0;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Строка Из АльтернативныеВидыРабочихЦентров Цикл
			Если Не ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
				Строка.ВремяРаботы = 0;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ();
		
	Иначе
		
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
		
	КонецЕсли;
	
	Если ВидыРабочихЦентров.Количество() > 0 Тогда
		
		НастройкиВидов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра"), "ПараллельнаяЗагрузка, ВариантЗагрузки");
		
		Для каждого СтрокаТЧ Из ВидыРабочихЦентров Цикл
			
			СтрокаТЧ.Занятость = 0;
			
			Если НЕ СтрокаТЧ.ВидРабочегоЦентра.Пустая() Тогда
				НастройкаВРЦ = НастройкиВидов.Получить(СтрокаТЧ.ВидРабочегоЦентра);
				Если НастройкаВРЦ.ПараллельнаяЗагрузка Тогда
					Если НастройкаВРЦ.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный Тогда
						СтрокаТЧ.АлгоритмРасчетаКоличества = "";
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТЧ.Занятость = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(СтрокаТЧ.ВремяРаботы, СтрокаТЧ.ЕдиницаИзмерения);
			
		КонецЦикла;
		
		Если ВидыРабочихЦентров.Количество() > 1
			И ПорядокРаботыВидовРабочихЦентров.Пустая()
			И НЕ ПроизводствоСервер.ИспользуетсяПроизводство22() Тогда
			
			ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Независимо;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если АльтернативныеВидыРабочихЦентров.Количество() > 0 Тогда
		
		НастройкиВидов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(АльтернативныеВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра"), "ПараллельнаяЗагрузка, ВариантЗагрузки");
		
		Для каждого СтрокаТЧ Из АльтернативныеВидыРабочихЦентров Цикл
			
			Если НЕ СтрокаТЧ.ВидРабочегоЦентра.Пустая() Тогда
				НастройкаВРЦ = НастройкиВидов.Получить(СтрокаТЧ.ВидРабочегоЦентра);
				Если НастройкаВРЦ.ПараллельнаяЗагрузка Тогда
					Если НастройкаВРЦ.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный Тогда
						СтрокаТЧ.АлгоритмРасчетаКоличества = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
//-- НЕ УТКА
	
	Если НЕ Владелец.Пустая() И НЕ ДополнительныеСвойства.Свойство("РазрешитьЗапись") Тогда
		
		// Если этап удаляется, то проверим что он не используется в спецификации
		Если НЕ ЭтоНовый() И ПометкаУдаления И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаСвязи.Ссылка
			|ИЗ
			|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТаблицаСвязи
			|ГДЕ
			|	ТаблицаСвязи.ЭтапРедактирование = &Этап
			|	И ТаблицаСвязи.Ссылка = &Владелец
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаСвязи.Ссылка
			|ИЗ
			|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаСвязи
			|ГДЕ
			|	ТаблицаСвязи.ЭтапРедактирование = &Этап
			|	И ТаблицаСвязи.Ссылка = &Владелец
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаСвязи.Ссылка
			|ИЗ
			|	Справочник.РесурсныеСпецификации.Трудозатраты КАК ТаблицаСвязи
			|ГДЕ
			|	ТаблицаСвязи.ЭтапРедактирование = &Этап
			|	И ТаблицаСвязи.Ссылка = &Владелец
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаСвязи.Ссылка
			|ИЗ
			|	Справочник.РесурсныеСпецификации КАК ТаблицаСвязи
			|ГДЕ
			|	ТаблицаСвязи.Ссылка = &Владелец
			|	И ТаблицаСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)";
			
			Запрос.УстановитьПараметр("Этап",     Ссылка);
			Запрос.УстановитьПараметр("Владелец", Владелец);
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ТекстСообщения = НСтр("ru = 'Этап используется в спецификации. Удаление невозможно.';
										|en = 'Stage in used in the bill of materials. Deletion is impossible.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка,,, Отказ);
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НЕ Отказ И НеобходимоРассчитатьДлительностьПроизводства() Тогда
		
		ДополнительныеСвойства.Вставить("РассчитатьДлительностьПроизводства");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Количество = 1;
	ЕдиницаИзмерения = НСтр("ru = 'партия';
							|en = 'batch'");
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Владелец") Тогда
		
		Владелец = ДанныеЗаполнения.Владелец;
		ЗаполнитьНовыйОбъект();
		
	КонецЕсли; 
	
	// Заполняем программно, т.к. ед. времени используется в нескольких местах
	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
	ЕдиницаИзмеренияЗавершающегоБуфера     = ОсновнаяЕдиницаВремениБуфера;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьНовыйОбъект();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("РассчитатьДлительностьПроизводства") Тогда
		
		УправлениеДаннымиОбИзделиях.РассчитатьДлительностьПроизводства(Владелец,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеУказанныхРеквизитов(РеквизитыДляПроверки, ЗначенияРеквизитов, ПараметрыТабличнойЧасти, КлючДанных, ПутьКДанным, СообщитьНазваниеЭтапа, Отказ)

	Для каждого ПараметрыРеквизита Из РеквизитыДляПроверки Цикл
		ИмяПоля = ПараметрыРеквизита.Значение;
		Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитов[ИмяПоля]) Тогда
			
			Если ПараметрыТабличнойЧасти = Неопределено Тогда
				
				Поле = ИмяПоля;
				Если СообщитьНазваниеЭтапа Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Поле ""%1"" не заполнено (этап: %2).';
								|en = 'The ""%1"" field is not filled in (stage: %2)'"), 
							ПараметрыРеквизита.Представление,
							КлючДанных.Наименование);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Поле ""%1"" не заполнено.';
								|en = 'The ""%1"" field is not filled in.'"), 
							ПараметрыРеквизита.Представление);
				КонецЕсли; 
				
			Иначе

				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыТабличнойЧасти.Имя, ПараметрыТабличнойЧасти.НомерСтроки, ИмяПоля);
				Если СообщитьНазваниеЭтапа Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"" (этап: %4)';
								|en = 'Fill in the ""%1"" column in line %2 of the ""%3"" list (stage: %4)'"), 
							ПараметрыРеквизита.Представление,
							ПараметрыТабличнойЧасти.НомерСтроки,
							ПараметрыТабличнойЧасти.Представление,
							КлючДанных.Наименование);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""';
								|en = 'Column ""%1"" is not filled out in line %2 of list ""%3""'"), 
							ПараметрыРеквизита.Представление,
							ПараметрыТабличнойЧасти.НомерСтроки,
							ПараметрыТабличнойЧасти.Представление);
				КонецЕсли; 
			КонецЕсли; 
					
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ); 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьНовыйОбъект()

	НомерЭтапа = Справочники.ЭтапыПроизводства.НовыйНомерЭтапа(Владелец);
	НомерСледующегоЭтапа = НомерЭтапа + 1;
	
КонецПроцедуры

Функция НеобходимоРассчитатьДлительностьПроизводства()
	
	Если НЕ ДополнительныеСвойства.Свойство("ЗапретитьРасчетДнейДоОкончания")
		И ЗначениеЗаполнено(Ссылка)
		И ЗначениеЗаполнено(Владелец)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Статус") = Перечисления.СтатусыСпецификаций.Действует Тогда
		
		ДанныеДоИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка, 
			"Подразделение,ДлительностьЭтапа,ЕдиницаИзмеренияДлительностиЭтапа");
		
			Если (Подразделение <> ДанныеДоИзменения.Подразделение
					ИЛИ ДлительностьЭтапа <> ДанныеДоИзменения.ДлительностьЭтапа
					ИЛИ ЕдиницаИзмеренияДлительностиЭтапа <> ДанныеДоИзменения.ЕдиницаИзмеренияДлительностиЭтапа
				) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизитовШапки(КлючДанных, СообщитьНазваниеЭтапа, ЕстьОшибки, ПутьКДанным)
	
	РеквизитыДляПроверки = Новый СписокЗначений;
	РеквизитыДляПроверки.Добавить("Подразделение", НСтр("ru = 'Подразделение';
														|en = 'Department'"));
	
	Если ПланироватьРаботуВидовРабочихЦентров Тогда
		
		РеквизитыДляПроверки.Добавить(
			"ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий", 
			НСтр("ru = 'Одновременно производимое количество единиц/партий изделий';
				|en = 'Quantity of product units/batches produced simultaneously'"));
		
		//++ НЕ УТКА
		Если ВидыРабочихЦентров.Количество() > 1
			И ПроизводствоСервер.ИспользуетсяПроизводство22() Тогда
			
			РеквизитыДляПроверки.Добавить(
				"ПорядокРаботыВидовРабочихЦентров", 
				НСтр("ru = 'Порядок загрузки видов рабочих центров';
					|en = 'Load procedure of work center kinds'"));
			
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДлительностьЭтапа) Тогда
		
		РеквизитыДляПроверки.Добавить(
			"ЕдиницаИзмеренияДлительностиЭтапа",
			НСтр("ru = 'Единица измерения длительности этапа';
				|en = 'Step duration unit of measure'"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МаршрутнаяКарта) Тогда
		
		РеквизитыДляПроверки.Добавить(
			"КоэффициентМаршрутнойКарты",
			НСтр("ru = 'Коэффициент маршрутной карты';
				|en = 'Operations sheet factor'"));
			
	КонецЕсли;
	
	ПроверитьЗаполнениеУказанныхРеквизитов(
		РеквизитыДляПроверки, ЭтотОбъект, Неопределено, КлючДанных, ПутьКДанным, СообщитьНазваниеЭтапа, ЕстьОшибки);
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ПроверитьЗаполнениеВидовРабочихЦентров(КлючДанных, СообщитьНазваниеЭтапа, Отказ)
	
	ПроверитьКоличествоВидовРабочихЦентров(КлючДанных, СообщитьНазваниеЭтапа, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыВидовРЦ = РеквизитыВидовРабочихЦентров();
	
	ЕстьСинхроннаяЗагрузка = Ложь;
	Для каждого КлючИЗначение Из РеквизитыВидовРЦ Цикл
		Если КлючИЗначение.Значение.СинхроннаяЗагрузка Тогда
			ЕстьСинхроннаяЗагрузка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерСтроки = 0;
	Для каждого СтрокаОсновнойВидРЦ Из ВидыРабочихЦентров Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		РеквизитыВидаРЦ = РеквизитыВидовРЦ.Получить(СтрокаОсновнойВидРЦ.ВидРабочегоЦентра);
		ПроверитьСтрокуВидаРабочегоЦентра(
			СтрокаОсновнойВидРЦ, РеквизитыВидаРЦ, НомерСтроки, КлючДанных, СообщитьНазваниеЭтапа, ЕстьСинхроннаяЗагрузка, Отказ);
		
		СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", СтрокаОсновнойВидРЦ.КлючСвязи);
   		АльтернативныеВидыРЦ = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаАльтернативныйВидРЦ Из АльтернативныеВидыРЦ Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			РеквизитыВидаРЦ = РеквизитыВидовРЦ.Получить(СтрокаАльтернативныйВидРЦ.ВидРабочегоЦентра);
			ПроверитьСтрокуВидаРабочегоЦентра(
				СтрокаАльтернативныйВидРЦ, РеквизитыВидаРЦ, НомерСтроки, КлючДанных, СообщитьНазваниеЭтапа, ЕстьСинхроннаяЗагрузка, Отказ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПроизводствоСервер.ИспользуетсяПроизводство22()
		И ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно
		И НЕ Отказ Тогда
		ПроверитьПараметрыОдновременнойРаботы(РеквизитыВидовРЦ, ЕстьСинхроннаяЗагрузка, КлючДанных, СообщитьНазваниеЭтапа, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКоличествоВидовРабочихЦентров(КлючДанных, СообщитьНазваниеЭтапа, Отказ)
	
	Если ВидыРабочихЦентров.Количество() = 0 Тогда
		Если СообщитьНазваниеЭтапа И КлючДанных <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не введено ни одной строки в список ""Виды рабочих центров"" (этап: %1).';
										|en = 'No line is entered in list ""Work center kinds"" (stage: %1).'"),
									КлючДанных.Наименование);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Виды рабочих центров"".';
									|en = 'No line is entered into the ""Work center kinds"" list.'");
		КонецЕсли; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "ВидыРабочихЦентров",, Отказ);
		Возврат;
	КонецЕсли;
	
	ДублиВидовРЦ = Новый Массив;
	СписокВидыРабочихЦентров = ВидыРабочихЦентров;
	
	Для Сч = 1 По 2 Цикл
		Для каждого СтрокаВидРЦ Из СписокВидыРабочихЦентров Цикл
			
			Если ЗначениеЗаполнено(СтрокаВидРЦ.ВидРабочегоЦентра)
				И ДублиВидовРЦ.Найти(СтрокаВидРЦ.ВидРабочегоЦентра) = Неопределено Тогда
				
				СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", СтрокаВидРЦ.ВидРабочегоЦентра);
				
		  		СписокСтрок = ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
				КоличествоДублей = СписокСтрок.Количество(); 
				
		  		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
				КоличествоДублей = КоличествоДублей + СписокСтрок.Количество(); 
				
				Если КоличествоДублей > 1 Тогда
					ДублиВидовРЦ.Добавить(СтрокаВидРЦ.ВидРабочегоЦентра);
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		СписокВидыРабочихЦентров = АльтернативныеВидыРабочихЦентров;
	КонецЦикла;
	
	Для каждого ВидРЦ Из ДублиВидовРЦ Цикл
		
		Если СообщитьНазваниеЭтапа И КлючДанных <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Вид рабочего центра ""%1"" допускается указывать не более одного раза (этап: %2).';
										|en = 'You can specify work center kind ""%1"" only once (stage: %2).'"),
									Строка(ВидРЦ),
									КлючДанных.Наименование);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Вид рабочего центра ""%1"" допускается указывать не более одного раза.';
										|en = 'You can specify work center kind ""%1"" only once.'"),
									Строка(ВидРЦ));
		КонецЕсли; 

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "ВидыРабочихЦентров",, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтрокуВидаРабочегоЦентра(СтрокаВидРЦ, РеквизитыВидаРЦ, НомерСтроки, КлючДанных, СообщитьНазваниеЭтапа, ЕстьСинхроннаяЗагрузка, Отказ)

	РеквизитыДляПроверки = Новый СписокЗначений;
	РеквизитыДляПроверки.Добавить("ВидРабочегоЦентра", НСтр("ru = 'Вид рабочего центра';
															|en = 'Work center kind'"));
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".';
							|en = 'Empty column ""%1"" of row %2 in list ""%3"".'");
	ШаблонСообщенияЭтап = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"" (этап: %4).';
								|en = 'Fill in the ""%1"" column in line %2 of the ""%3"" list (stage: %4).'");
	
	ПараметрыТабличнойЧасти = Новый Структура("Имя,Представление", "ВидыРабочихЦентров", НСтр("ru = 'Виды рабочих центров';
																								|en = 'Work center kinds'"));
	ПараметрыТабличнойЧасти.Вставить("НомерСтроки", НомерСтроки);
	
	ПроверитьЗаполнениеУказанныхРеквизитов(РеквизитыДляПроверки, СтрокаВидРЦ, ПараметрыТабличнойЧасти, КлючДанных, "", СообщитьНазваниеЭтапа, Отказ);
	
	// Проверка реквизитов, заполнение которых зависит от параметров вида РЦ
	Если РеквизитыВидаРЦ <> Неопределено Тогда
		
		// Проверка заполнения варианта наладки
		Если (РеквизитыВидаРЦ.ИспользуютсяВариантыНаладки = Истина)
			И НЕ ЗначениеЗаполнено(СтрокаВидРЦ.ВариантНаладки) Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ВариантНаладки");
			Если СообщитьНазваниеЭтапа И КлючДанных <> Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщенияЭтап, 
												НСтр("ru = 'Вариант наладки';
													|en = 'Setup option'"),
												НомерСтроки, 
												ПараметрыТабличнойЧасти.Представление,
												КлючДанных.Наименование);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщения, 
												НСтр("ru = 'Вариант наладки';
													|en = 'Setup option'"),
												НомерСтроки, 
												ПараметрыТабличнойЧасти.Представление);
			КонецЕсли; 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле,, Отказ); 
			
		КонецЕсли;
		
		ВремяОпределяетсяДругимВидомРЦ = НЕ РеквизитыВидаРЦ.СинхроннаяЗагрузка
			И ЕстьСинхроннаяЗагрузка
			И ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно
			И ПроизводствоСервер.ИспользуетсяПроизводство22();
		
		// Проверка времени работы
		// При синхронной загрузке время берется из вида РЦ и его не нужно проверять.
		Если НЕ ЗначениеЗаполнено(СтрокаВидРЦ.ВремяРаботы)
			И ПустаяСтрока(СтрокаВидРЦ.АлгоритмРасчетаКоличества)
			И НЕ РеквизитыВидаРЦ.СинхроннаяЗагрузка
			И НЕ ВремяОпределяетсяДругимВидомРЦ Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ВремяРаботы");
			Если СообщитьНазваниеЭтапа И КлючДанных <> Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщенияЭтап, 
												НСтр("ru = 'Время работы';
													|en = 'Working time'"),
												НомерСтроки, 
												ПараметрыТабличнойЧасти.Представление,
												КлючДанных.Наименование);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщения, 
												НСтр("ru = 'Время работы';
													|en = 'Working time'"),
												НомерСтроки, 
												ПараметрыТабличнойЧасти.Представление);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле,, Отказ); 
		КонецЕсли; 
		
		// Проверка Единица измерения времени
		Если НЕ ЗначениеЗаполнено(СтрокаВидРЦ.ЕдиницаИзмерения)
			И НЕ РеквизитыВидаРЦ.СинхроннаяЗагрузка
			И НЕ ВремяОпределяетсяДругимВидомРЦ Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ЕдиницаИзмерения");
			Если СообщитьНазваниеЭтапа И КлючДанных <> Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщенияЭтап, 
												НСтр("ru = 'Единица измерения времени';
													|en = 'Time unit of measure'"),
												НомерСтроки, 
												ПараметрыТабличнойЧасти.Представление,
												КлючДанных.Наименование);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщения, 
												НСтр("ru = 'Единица измерения времени';
													|en = 'Time unit of measure'"),
												НомерСтроки, 
												ПараметрыТабличнойЧасти.Представление);
			КонецЕсли; 
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле,, Отказ); 
		КонецЕсли; 
		
		// Проверка загрузки
		Если НЕ ЗначениеЗаполнено(СтрокаВидРЦ.Загрузка)
			И РеквизитыВидаРЦ.ПараллельнаяЗагрузка Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыТабличнойЧасти.Имя, НомерСтроки, "Загрузка");
			Если СообщитьНазваниеЭтапа И КлючДанных <> Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщенияЭтап, 
												НСтр("ru = 'Загрузка';
													|en = 'Load'"),
												НомерСтроки, 
												ПараметрыТабличнойЧасти.Представление,
												КлючДанных.Наименование);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщения, 
												НСтр("ru = 'Загрузка';
													|en = 'Load'"),
												НомерСтроки, 
												ПараметрыТабличнойЧасти.Представление);
			КонецЕсли; 
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле,, Отказ); 
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДлительностиЭтапа(КлючДанных, СообщитьНазваниеЭтапа, Отказ)
	
	Настройки = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	СверитьДлительностьИВРЦ = ПланироватьРаботуВидовРабочихЦентров
		И Настройки.ИспользуетсяПланированиеПоМатериальнымРесурсам
		И НЕ Настройки.ИспользуетсяПланированиеПоПроизводственнымРесурсам;
	
	Если НЕ СверитьДлительностьИВРЦ Тогда
		Возврат;
	КонецЕсли;
	
	ДлительностьВРЦ = 0;
	
	Для каждого Строка Из ВидыРабочихЦентров Цикл
		
		ДлительностьВРЦ = Макс(
			ДлительностьВРЦ,
			ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(Строка.ВремяРаботы, Строка.ЕдиницаИзмерения));
		
	КонецЦикла;
	
	ДлительностьЭтапаВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
		ДлительностьЭтапа,
		ЕдиницаИзмеренияДлительностиЭтапа);
	
	Если ДлительностьЭтапаВСекундах < ДлительностьВРЦ Тогда
		
		Если СообщитьНазваниеЭтапа И КлючДанных <> Неопределено Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Длительность этапа должна быть больше или равна времени работы видов рабочих центров (этап: %1).';
					|en = 'Stage duration should be more or equal to working hours of work center kinds (stage: %1).'"),
				КлючДанных.Наименование);
			
		Иначе
				
			ТекстСообщения = НСтр("ru = 'Длительность этапа должна быть больше или равна времени работы видов рабочих центров"".';
									|en = 'Stage duration should be more or equal to working hours of work center kinds.'");
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "ДлительностьЭтапа",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПараметрыОдновременнойРаботы(РеквизитыВидовРЦ, ЕстьСинхроннаяЗагрузка, КлючДанных, СообщитьНазваниеЭтапа, Отказ)
	
	ВремяРаботыОдинаковое = Истина;
	
	ЗначенияПроверки = Неопределено;
		
	Для каждого КлючИЗначение Из РеквизитыВидовРЦ Цикл
		
		Если НЕ ЕстьСинхроннаяЗагрузка
			ИЛИ КлючИЗначение.Значение.СинхроннаяЗагрузка Тогда
			
			Если ЗначенияПроверки = Неопределено Тогда
				ЗначенияПроверки = КлючИЗначение.Значение;
			Иначе
				
				Если КлючИЗначение.Значение.ВремяРаботы <> ЗначенияПроверки.ВремяРаботы
					ИЛИ КлючИЗначение.Значение.ЕдиницаИзмерения <> ЗначенияПроверки.ЕдиницаИзмерения Тогда
					
					ВремяРаботыОдинаковое = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ВремяРаботыОдинаковое Тогда
		
		Если СообщитьНазваниеЭтапа И КлючДанных <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При использовании порядка загрузки ""Одновременно"" время работы видов рабочих центров должно быть одинаковым (этап: %1).';
					|en = 'When using the Simultaneously load procedure, work duration of work center kinds should be the same (stage: %1).'"),
				КлючДанных.Наименование);
		Иначе
			ТекстСообщения = НСтр("ru = 'При использовании порядка загрузки ""Одновременно"" время работы видов рабочих центров должно быть одинаковым.';
									|en = 'When using the Simultaneously load procedure, work duration of work center kinds should be the same.'");
		КонецЕсли; 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "ВидыРабочихЦентров",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыВидовРабочихЦентров()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРабочихЦентров.ВидРабочегоЦентра,
	|	ВЫБОР
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА ВидыРабочихЦентров.ВремяРаботы
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И НЕ ВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА ВидыРабочихЦентров.ВидРабочегоЦентра.ВремяРаботы
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И ВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА ВидыРабочихЦентров.ВариантНаладки.ВремяРаботы
	|		ИНАЧЕ ВидыРабочихЦентров.ВремяРаботы
	|	КОНЕЦ КАК ВремяРаботы,
	|	ВЫБОР
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА ВидыРабочихЦентров.ЕдиницаИзмерения
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И НЕ ВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА ВидыРабочихЦентров.ВидРабочегоЦентра.ЕдиницаИзмерения
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И ВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА ВидыРабочихЦентров.ВариантНаладки.ЕдиницаИзмерения
	|		ИНАЧЕ ВидыРабочихЦентров.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|	КОНЕЦ КАК ИспользуютсяВариантыНаладки,
	|	ВЫБОР
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|	КОНЕЦ КАК ПараллельнаяЗагрузка,
	|	ВЫБОР
	|		КОГДА ВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|	КОНЕЦ КАК СинхроннаяЗагрузка
	|ИЗ
	|	Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра,
	|	ВЫБОР
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА АльтернативныеВидыРабочихЦентров.ВремяРаботы
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И НЕ АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВремяРаботы
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА АльтернативныеВидыРабочихЦентров.ВариантНаладки.ВремяРаботы
	|		ИНАЧЕ АльтернативныеВидыРабочихЦентров.ВремяРаботы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА АльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И НЕ АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ЕдиницаИзмерения
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА АльтернативныеВидыРабочихЦентров.ВариантНаладки.ЕдиницаИзмерения
	|		ИНАЧЕ АльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК АльтернативныеВидыРабочихЦентров
	|ГДЕ
	|	АльтернативныеВидыРабочихЦентров.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		ЗначенияРеквизитов = Новый Структура("ИспользуютсяВариантыНаладки, ПараллельнаяЗагрузка, СинхроннаяЗагрузка, ВремяРаботы, ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		
		Результат.Вставить(Выборка.ВидРабочегоЦентра, ЗначенияРеквизитов);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецЕсли