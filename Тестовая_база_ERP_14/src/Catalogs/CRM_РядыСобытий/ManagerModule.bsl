#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает расписание по ссылке на элемент справочника.
//
// Параметры:
//  Ссылка	 - Ссылка, СправочникСсылка.CRM_РядыСобытий	 - Ссылка на элемент справочника,
//  	для которого необходимо получить расписание.
// 
// Возвращаемое значение:
//  Расписание - РасписаниеРегламентногоЗадания -   Расписание регламентного задания.
//
Функция ПолучитьРасписание(Ссылка) Экспорт
	Расписание = Ссылка.Расписание.Получить();
	Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
		Возврат Расписание;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает представление расписания.
//
// Параметры:
//  Расписание		 - РасписаниеРегламентногоЗадания	 - Расписание регламентного задания.
//  Ссылка			 - Ссылка, СправочникСсылка.CRM_РядыСобытий	 - Ссылка на элемент справочника,
//  	для которого необходимо получить представление расписания.
//  ОграничитьДлиной - Число									 - Максимальная длина строки представления расписания.
// 
// Возвращаемое значение:
//  Строка - Строка представления расписания.
//
Функция ПолучитьПредставлениеРасписания(Знач Расписание = Неопределено, Ссылка = Неопределено, ОграничитьДлиной = Неопределено) Экспорт
	Если Ссылка = Неопределено И Расписание = Неопределено Тогда Возврат ""; КонецЕсли;
	
	Если Расписание = Неопределено Тогда
		Расписание = ПолучитьРасписание(Ссылка);
		Если Расписание = Неопределено Тогда Возврат ""; КонецЕсли;
	ИначеЕсли ТипЗнч(Расписание) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеРасписания = Строка(Расписание);
	
	ПозицияТочкаСЗапятой = Найти(ПредставлениеРасписания, ";");
	Если ПозицияТочкаСЗапятой > 0 Тогда
		ПредставлениеРасписания = Лев(ПредставлениеРасписания, ПозицияТочкаСЗапятой - 1);
	КонецЕсли;
	
	Если ТипЗнч(ОграничитьДлиной) = Тип("Число") Тогда
		Если СтрДлина(ПредставлениеРасписания) > ОграничитьДлиной Тогда
			ПредставлениеРасписания = Лев(ПредставлениеРасписания, ОграничитьДлиной - 3) + "...";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка(ПредставлениеРасписания);
КонецФункции

// Возвращает массив дат входящих в указанный период по расписанию.
//
// Параметры:
//  ДатаНачало		 - Дата								 - Дата начала расписания.
//  ДатаОкончания	 - Дата								 - Дата окончания расписания.
//  Ссылка			 - Ссылка, СправочникСсылка.CRM_РядыСобытий	 - Ссылка на элемент справочника,
//  	для которого необходимо получить массив дат расписания.
//  Расписание		 - РасписаниеРегламентногоЗадания			 - Расписание регламентного задания.
// 
// Возвращаемое значение:
//  МассивДат - Массив дат расписания.
//
Функция ПолучитьМассивДатРасписания(Знач ДатаНачало, Знач ДатаОкончания, Ссылка = Неопределено, Знач Расписание = Неопределено) Экспорт
	МассивДат = Новый Массив();
	
	Если Ссылка = Неопределено И Расписание = Неопределено Тогда Возврат МассивДат; КонецЕсли;
	
	Если Расписание = Неопределено Тогда
		Расписание = ПолучитьРасписание(Ссылка);
		Если Расписание = Неопределено Тогда Возврат МассивДат; КонецЕсли;
	КонецЕсли;
	
	Если ДатаНачало > ДатаОкончания Тогда Возврат МассивДат; КонецЕсли;
	
	ПустаяДата = Дата("00010101");
	ПроверяемоеВремя = Дата("00010101000001");
	
	Расписание.ВремяНачала = ПроверяемоеВремя;
	Расписание.ВремяКонца = ПустаяДата;
	
	// Формирование массива дат
	ШагДатыВСекундах = 24 * 60 * 60; // событие выполняется не чаще раза в день
	ДатаОкончанияКонецДня = КонецДня(ДатаОкончания);
	ТекДата = КонецДня(ДатаНачало);
	
	ПредыдущаяДата = Неопределено;
	Пока ТекДата <= ДатаОкончанияКонецДня Цикл
		Если ПредыдущаяДата = Неопределено Тогда
			бТребуетсяВыполнение = Расписание.ТребуетсяВыполнение(ТекДата);
		Иначе
			бТребуетсяВыполнение = Расписание.ТребуетсяВыполнение(ТекДата, ПредыдущаяДата);
		КонецЕсли;
		Если бТребуетсяВыполнение Тогда
			ДатаПоРасписанию = НачалоДня(ТекДата);
			МассивДат.Добавить(ДатаПоРасписанию);
			ПредыдущаяДата = ДатаПоРасписанию + (ПроверяемоеВремя - ПустаяДата);
		КонецЕсли;
		
		ТекДата = ТекДата + ШагДатыВСекундах;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Ссылка) И Ссылка.УчитыватьГрафикРаботы Тогда
		
		СоответствиеДат = CRM_КалендарныеГрафики.ПолучитьСоответствиеДатРабочихДней(МассивДат);
		
		НовыйМассивДат = Новый Массив;
		
		Для каждого ЭлементМассива Из МассивДат Цикл
			
			ДатаСоответствия = СоответствиеДат.Получить(ЭлементМассива); 
			
			Если ДатаСоответствия = Неопределено Тогда
				
				НовыйМассивДат.Добавить(ЭлементМассива);
				
			ИначеЕсли НовыйМассивДат.Найти(ДатаСоответствия) = Неопределено Тогда	
			
				НовыйМассивДат.Добавить(ДатаСоответствия);

			КонецЕсли;			
			
		КонецЦикла;
		
		МассивДат = НовыйМассивДат;
	
	КонецЕсли; 
	
	Возврат МассивДат;
КонецФункции

#КонецОбласти

#КонецЕсли