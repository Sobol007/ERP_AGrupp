
&НаКлиенте
Процедура КаналПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	//ПараметрыФормы.Вставить("ТекущаяСтрока",	Объект.КаналПервичногоИнтереса);
	//ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	
	Если ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(Объект.ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) И (ТипПВХ(Объект.КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если Объект.ИсточникПервичногоИнтереса = Неопределено ИЛИ Объект.ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(Объект.КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	Объект.ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(Объект.КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(Объект.ИсточникПервичногоИнтереса) И (ТипЗнч(Объект.ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ИсточникПервичногоИнтереса, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставДопРеквизитов(Команда)
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если СокрЛП(Объект.ИдентификаторИсточника) = "" Тогда
		Объект.ИдентификаторИсточника = Новый УникальныйИдентификатор;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.CRM_РольОтветственного) Тогда
		РолеваяАдресация = 1;
	КонецЕсли;
	Элементы.ОтветственныйМенеджер.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	
	// Заполним список исключений
	Если Не Объект.Ссылка.Пустая() Тогда
		Если Объект.Сценарий = Перечисления.CRM_CallTrakingСценарии.WebService Тогда
			МакетВиджета = ОбновитьДанныеВиджета();
			ЗаполнениеДанныхПоИСключениям();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.АдресРасписания) Тогда
			
			РасписаниеРегламентногоЗадания = ПолучитьИзВременногоХранилища(Объект.АдресРасписания);
			
			Если РасписаниеРегламентногоЗадания = Неопределено Тогда
				
				РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
				РасписаниеРегламентногоЗадания.ПериодПовтораДней  = 1;
				РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня  = 3600;
				
				ЗаполнитьРасписаниеЗапуска();
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Объект.Сценарий = Перечисления.CRM_CallTrakingСценарии.РучнойВвод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РолеваяАдресацияПриИзменении(Элемент)
	РолеваяАдресацияПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура РолеваяАдресацияПриИзмененииСервер()
	Элементы.ОтветственныйМенеджер.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	Если РолеваяАдресация = 0 Тогда
		Объект.CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
	Иначе
		Объект.ОтветственныйМенеджер = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		Если Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Calltouch") 
			ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic")
			ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat") 
			ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ПочтовоеСообщение") 
			ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешняяОбработка")	Тогда
			ТекстОшибки = НСтр("ru='Не заполнено расписание!'");
			ПолеВвода = "ДекорацияРасписание";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	// +CRM_Сквозная аналитика
		Если Не ЗначениеЗаполнено(Объект.CRM_РольОтветственного) И Не ЗначениеЗаполнено(Объект.ОтветственныйМенеджер) Тогда
			Если РолеваяАдресация = 0 Тогда
				ТекстОшибки = НСтр("ru='Не заполнен ответственный!';en='Not filled in responsible!'");
				ПолеВвода = "Объект.ОтветственныйМенеджер";
			Иначе
				ТекстОшибки = НСтр("ru='Не заполнена роль ответственного!';en='The role of responsible is not filled!'");
				ПолеВвода = "Объект.CRM_РольОтветственного";
			КонецЕсли;
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
		КонецЕсли;
		// Проверка заполненности реквизитов
		Отказ = ПроверкаЗаполненностиРеквизитовПоСценарию();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЛидаСвойствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура();
	ОповещениеВыбораРеквизита	= Новый ОписаниеОповещения("ОбработкаВыбораРеквизита", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура("Отбор", Новый Структура("НаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_ИсточникиПолученияЛидов")));
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбораРеквизита);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора места.
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Результат выбора места.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораРеквизита(РезультатВыбора, ДополнительныеПараметры) Экспорт
	//Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	//Объект.Место = СокрЛП(РезультатВыбора);
	//Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.CRM_Помещения") Тогда
	//	Объект.Помещение					= РезультатВыбора;
	//	Элементы.Место.РедактированиеТекста	= Ложь;
	//Иначе
	//	Объект.Помещение					= ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	//	Элементы.Место.РедактированиеТекста	= Истина;
	//КонецЕсли;
КонецПроцедуры // ОбработкаВыбораМеста()

&НаКлиенте
Процедура ДекорацияРасписаниеНажатие(Элемент)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОбмена", ЭтотОбъект);
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасписаниеЗапуска()
	
	Адрес = ПоместитьВоВременноеХранилище(РасписаниеРегламентногоЗадания,Новый УникальныйИдентификатор);
	Объект.АдресРасписания = Адрес;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбмена(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания = Результат;
		
		УстановитьНадписьРасписанияОбмена();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЗаполнитьРасписаниеЗапуска();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.ДекорацияРасписание.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостью();
	
	УстановитьНадписьРасписанияОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Если Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Истина;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаСценарийCallTouch.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость=Ложь;
		Элементы.ГруппаГенераторы.Видимость = Истина;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Истина;
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ПочтовоеСообщение") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Истина;
		Элементы.ГруппаСценарийCallTouch.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость=Ложь;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Истина;
		Если Объект.Ссылка.Пустая() Тогда
			ЗаполнитьТабличнуюЧастьСопоставлениеРеквизитов();
		КонецЕсли;
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.CallTouch") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаСценарийCallTouch.Видимость = Истина;
		Элементы.ГруппаВиджет.Видимость = ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость=Ложь;
		Элементы.ГруппаГенераторы.Видимость = Истина;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Истина;
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.WebService") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаСценарийCallTouch.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Истина;
		Элементы.МакетВиджета.Видимость = Истина;
		Элементы.ГруппаВнешняяОбработка.Видимость=Ложь;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Ложь;
		// Заполнение данных по реквизитам виджета.
		ЗаполнитьДанныеДляВиджета();
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешняяОбработка") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаСценарийCallTouch.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость=Истина;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Истина;
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаСценарийCallTouch.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость=Ложь;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Истина;
		Элементы.ДекорацияРасписание.Видимость = Истина;
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ВнешнийAPI") ИЛИ Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.РучнойВвод") Тогда
		Элементы.ГруппаСценарийCallTraking.Видимость = Ложь;
		Элементы.ГруппаСценарийПочтовоеСообщение.Видимость = Ложь;
		Элементы.ГруппаСценарийCallTouch.Видимость = Ложь;
		Элементы.ГруппаВиджет.Видимость = Истина;
		Элементы.МакетВиджета.Видимость = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость=Ложь;
		Элементы.ГруппаГенераторы.Видимость = Ложь;
		Элементы.ГруппаСценарийRoistat.Видимость = Ложь;
		Элементы.ДекорацияРасписание.Видимость = Ложь;
		Объект.ДополнительныеДанныеПоИсточникам.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьКнопок();
	
	Объект.Наименование = Объект.Сценарий;
	
	Заголовок = "Источник получения лидов: " + Объект.Сценарий;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопок()
	
	СписокВерификация 			= ?(Объект.CRM_УказыватьПричинуОтклонения,"1","0");
	СписокЗаявки 				= ?(Объект.ИспользоватьГенераторЗаявки,"1","0");
	СписокЗвонки 				= ?(Объект.ИспользоватьГенераторЗвонка,"1","0");
	СписокПрисоединенныйФайл 	= ?(Объект.ПрисоединенныйФайл,"1","0");
	СписокЯвляетсяЛидом 		= ?(Объект.CRM_ИсточникЛидов,"1","0");
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	УправлениеВидимостью();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьСопоставлениеРеквизитов(Теги = Истина)
	
	Если Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Количество() > 0 Тогда
		Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Очистить();
	КонецЕсли;
	
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "ID";
	НоваяСтр.РеквизитПоиск = "id";
	НоваяСтр.РеквизитЗаголовок = "Идентификатор заявки(ID)";
	Если Теги Тогда
		НоваяСтр.Наименование = "id";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	
	// Дата
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "Дата";
	НоваяСтр.РеквизитПоиск = "Дата";
	НоваяСтр.РеквизитЗаголовок = "Дата";
	Если Теги Тогда
		НоваяСтр.Наименование = "date_time";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	
	// Имя пользователя
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "ИмяПользователя";
	НоваяСтр.РеквизитПоиск = "Имя пользователя";
	НоваяСтр.РеквизитЗаголовок = "Имя пользователя";
	Если Теги Тогда
		НоваяСтр.Наименование = "visitor_name";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	
	// Источник трафика
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "КаналПривлечения";
	НоваяСтр.РеквизитПоиск = "Канал привлечения";
	НоваяСтр.РеквизитЗаголовок = "Канал привлечения";
	Если Теги Тогда
		НоваяСтр.Наименование = "channel";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	
	// Рекламная кампания
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "РекламнаяКампания";
	НоваяСтр.РеквизитПоиск = "Рекламная кампания";
	НоваяСтр.РеквизитЗаголовок = "Рекламная кампания";
	Если Теги Тогда
		НоваяСтр.Наименование = "campaign_name";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	
	// Рекламная кампания ИД
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "РекламнаяКампанияИД";
	НоваяСтр.РеквизитПоиск = "ID Рекламная кампания";
	НоваяСтр.РеквизитЗаголовок = "ID Рекламная кампания";
	Если Теги Тогда
		НоваяСтр.Наименование = "campaign_id";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	
	// Сайт домен
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "Сайт";
	НоваяСтр.РеквизитПоиск = "Сайт";
	НоваяСтр.РеквизитЗаголовок = "Сайт";
	Если Теги Тогда
		НоваяСтр.Наименование = "Сайт";
	КонецЕсли;
	НоваяСтр.ПоУмолчанию = Истина;
	НоваяСтр.Выбрано = Истина;
	
	// e-mail
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "ЭлектроннаяПочта";
	НоваяСтр.РеквизитПоиск = "Электронная почта";
	НоваяСтр.РеквизитЗаголовок = "Электронная почта";
	Если Теги Тогда
		НоваяСтр.Наименование = "visitor_email";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	
	// Телефон
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "Телефон";
	НоваяСтр.РеквизитПоиск = "Телефон";
	НоваяСтр.РеквизитЗаголовок = "Телефон";
	Если Теги Тогда
		НоваяСтр.Наименование = "visitor_phone_number";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	
	// Имя пользователя
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "ТекстЗаявки";
	НоваяСтр.РеквизитПоиск = "Текст заявки";
	НоваяСтр.РеквизитЗаголовок = "Текст заявки";
	Если Теги Тогда
		НоваяСтр.Наименование = "text";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	
	// Устройство пользователя
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "Устройство";
	НоваяСтр.РеквизитПоиск = "Устройство";
	НоваяСтр.РеквизитЗаголовок = "Устройство";
	Если Теги Тогда
		НоваяСтр.Наименование = "device";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	
	// Город посетителя
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	//НоваяСтр.Выбрано = Истина;
	НоваяСтр.Реквизит = "Город";
	НоваяСтр.РеквизитПоиск = "Город";
	НоваяСтр.РеквизитЗаголовок = "Город";
	Если Теги Тогда
		НоваяСтр.Наименование = "city";
	КонецЕсли;
	НоваяСтр.Выбрано = Истина;
	
	// UTM_Метки
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "utm_source";
	НоваяСтр.РеквизитПоиск = "utm_source";
	НоваяСтр.РеквизитЗаголовок = "utm_source";
	Если Теги Тогда
		НоваяСтр.Наименование = "utm_source";
	КонецЕсли;
	НоваяСтр.UTM_Метка = Истина;
	НоваяСтр.Выбрано = Истина;
	
	НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	НоваяСтр.Реквизит = "utm_medium";
	НоваяСтр.РеквизитПоиск = "utm_medium";
	НоваяСтр.РеквизитЗаголовок = "utm_medium";
	Если Теги Тогда
		НоваяСтр.Наименование = "utm_medium";
	КонецЕсли;
	НоваяСтр.UTM_Метка = Истина;
	НоваяСтр.Выбрано = Истина;
	
	// для дальнейшей разработки
	// НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	// НоваяСтр.Реквизит = "utm_campaign";
	// НоваяСтр.РеквизитПоиск = "utm_campaign";
	// НоваяСтр.РеквизитЗаголовок = "utm_campaign";
	// Если Теги Тогда
	//	НоваяСтр.Наименование = "utm_campaign";
	// КонецЕсли;
	// НоваяСтр.UTM_Метка = Истина;
	// НоваяСтр.Выбрано = Истина;
	//
	// НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	// НоваяСтр.Реквизит = "utm_term";
	// НоваяСтр.РеквизитПоиск = "utm_term";
	// НоваяСтр.РеквизитЗаголовок = "utm_term";
	// Если Теги Тогда
	//	НоваяСтр.Наименование = "utm_term";
	// КонецЕсли;
	// НоваяСтр.UTM_Метка = Истина;
	// НоваяСтр.Выбрано = Истина;
	//
	// НоваяСтр = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Добавить();
	// НоваяСтр.Реквизит = "utm_content";
	// НоваяСтр.РеквизитПоиск = "utm_content";
	// НоваяСтр.РеквизитЗаголовок = "utm_content";
	// Если Теги Тогда
	//	НоваяСтр.Наименование = "utm_content";
	// КонецЕсли;
	// НоваяСтр.UTM_Метка = Истина;
	// НоваяСтр.Выбрано = Истина;
	
	ЗаполнитьДеревоЗначений();
	
	ЗаполнитьСтрокуТелаПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначений()
	
	ТЗ = Объект.ТабличнаяЧастьСопоставлениеРеквизитов.Выгрузить();
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоРеквизитов"); 
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ПоУмолчанию",Истина);
	
	МасСтрок = ТЗ.НайтиСтроки(СтруктураОтбор);
	
	Если МасСтрок.Количество() > 0 Тогда
		
		Уровень1 = ДеревоЗначений.Строки.Добавить();
		Уровень1.Наименование = "Поля по умолчанию";
		Уровень1.Заголовок = Истина;
		
		Для Каждого Стр Из МасСтрок Цикл
			
			Уровень2 = Уровень1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Уровень2,Стр);
			Уровень2.Наименование = Стр.РеквизитПоиск;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("UTM_Метка",Истина);

	МасСтрок = ТЗ.НайтиСтроки(СтруктураОтбор);
	
	Если МасСтрок.Количество() > 0 Тогда
		
		Уровень1 = ДеревоЗначений.Строки.Добавить();
		Уровень1.Наименование = "UTM_Метки";
		Уровень1.Заголовок = Истина;
		Для Каждого Стр Из МасСтрок Цикл
			
			Уровень2 = Уровень1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Уровень2,Стр);
			Уровень2.Наименование = Стр.РеквизитПоиск;
			
		КонецЦикла;
		
	КонецЕсли;

	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("UTM_Метка",Ложь);
	СтруктураОтбор.Вставить("ПоУмолчанию",Ложь);
	
	МасСтрок = ТЗ.НайтиСтроки(СтруктураОтбор);
	
	Если МасСтрок.Количество() > 0 Тогда
		
		Уровень1 = ДеревоЗначений.Строки.Добавить();
		Уровень1.Наименование = "Поля заявки";
		Уровень1.Заголовок = Истина;
		Для Каждого Стр Из МасСтрок Цикл
			
			Уровень2 = Уровень1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Уровень2,Стр);
			Уровень2.Наименование = Стр.РеквизитПоиск;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоРеквизитов"); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТелаПисьма()
	
	ТелоПисьма = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетПочтовогоСообщения").ПолучитьТекст();
	
	СтруктураТестовогоПисьма = Новый Структура;
	
	СтруктураТестовогоПисьма.Вставить("_Сайт","rarus.ru");
	СтруктураТестовогоПисьма.Вставить("_ИсточникТрафика","Email рассылки");
	СтруктураТестовогоПисьма.Вставить("_РекламнаяКампанияИД","1111111111(id гугл или яндекс аналитики рекламных кампаний");
	СтруктураТестовогоПисьма.Вставить("_РекламнаяКампания","email рекламная кампания");
	СтруктураТестовогоПисьма.Вставить("_utm_source","google");
	СтруктураТестовогоПисьма.Вставить("_utm_medium","cpc");
	СтруктураТестовогоПисьма.Вставить("_id","000000001");
	СтруктураТестовогоПисьма.Вставить("_Дата","2019-02-18 12:34:02");
	
	Текст1 = "";
	
	Для Каждого Стр Из СтруктураТестовогоПисьма Цикл
		
		ТелоПисьма = СтрЗаменить(ТелоПисьма,Стр.Ключ,Стр.Значение);
		
	КонецЦикла;

	Для Каждого Стр Из ДеревоРеквизитов.ПолучитьЭлементы() Цикл
		
		Для Каждого Уровень2 Из Стр.ПолучитьЭлементы() Цикл
			
			Если Уровень2.Выбрано Тогда
				Если Уровень2.Наименование = "Имя пользователя" Тогда
					Текст1 = текст1 + "ФИО: Иванов И.И." + Символы.ПС;
				ИначеЕсли Уровень2.Наименование = "Электронная почта" Тогда
					Текст1 = текст1 + "Электронная почта: test@ya.ru" + Символы.ПС;
				ИначеЕсли Уровень2.Наименование = "Телефон" Тогда
					Текст1 = текст1 + "Телефон: +79999999999" + Символы.ПС;
				ИначеЕсли Уровень2.Наименование = "Текст заявки" Тогда
					Текст1 = текст1 + "Текст заявки: Прошу перезвонить или прислать ответ в электронном письме" + Символы.ПС;
				ИначеЕсли Уровень2.Наименование = "Устройство" Тогда
					Текст1 = текст1 + "Устройство: phone" + Символы.ПС;
				ИначеЕсли Уровень2.Наименование = "Город" Тогда
					Текст1 = текст1 + "Город: Москва" + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма,Текст1);
	
	СтрокаТелоПисьмо = ТелоПисьма;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияПримерФайлаНажатие(Элемент)
	
	ТекстУстановки = "";
	
	Для Каждого Стр ИЗ Объект.ТабличнаяЧастьСопоставлениеРеквизитов Цикл
		Если Стр.Выбрано Тогда
			Если ЗначениеЗаполнено(ТекстУстановки) Тогда
				 ТекстУстановки = ТекстУстановки + "," + Символы.ПС;
			 КонецЕсли;
			 
			ТекстУстановки = ТекстУстановки + """"+Стр.Наименование + """: """ + Стр.РеквизитЗаголовок + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстУстановки) Тогда
		
		Текст = "{ 
		|""data"": [
		|{ " + Символы.ПС + ТекстУстановки + "
		|},
		|{ " + Символы.ПС + ТекстУстановки + "
		|}
		|] 
		|} ";
		
	Иначе
		
		Текст = "{ 
		|""data"": [
		|{
		|""campaign_name"":""Adwords"",
		|""channel"": ""direct"",
		|""id"": 512256,
		|""visitor_email"": ""demoaccaunt1@gmail.com"",
		|""visitor_phone_number"": ""8441111994"",
		|""visitor_name"":""demoaccaunt1"",
		|""text"": ""Сможете перезвонить?"",
		|""campaign_id"": -1,
		|""date_time"":""2018-08-18 12:34:02"",
		|""device"":""PC"",
		|""city"":""N"",
		|""site"":""rarus"",
		|""site_id"":""1""
		|},
		|{
		|""campaign_name"":""Direct"",
		|""channel"":""organic"",
		|""id"": 512258,
		|""visitor_email"":""demoaccaunt2@gmail.com"",
		|""visitor_phone_number"": ""01811117321"",
		|""visitor_name"":""demoaccaunt2"",
		|""text"":""Текст заявки..."",
		|""campaign_id"":42659,
		|""date_time"":""2018-08-19 07:58:53"",
		|""device"":""phone"",
		|""city"":""N"",
		|""site"":""rarus"",
		|""site_id"":""1""
		|}
		|] 
		|} ";
		
	КонецЕсли;
	
	
	#Если ВебКлиент Тогда
		ПоказатьЗначение(,Текст);
	#Иначе
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".txt");
		
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(Текст);
		
		ТекстДок.Записать(ИмяВременногоФайла);
		
		ЗапуститьПриложение(ИмяВременногоФайла);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненностиРеквизитовПоСценарию()
	
	Если Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic") Тогда
		Если Не ЗначениеЗаполнено(Объект.Token) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен токен!'");
			ПолеВвода = "Объект.Token";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
		КонецЕсли;
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.WebService") Тогда
		Если Не ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен канал первичного интереса!'");
			ПолеВвода = "Объект.КаналПервичногоИнтереса";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ИсточникПервичногоИнтереса) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен источник первичного интереса!'");
			ПолеВвода = "Объект.ИсточникПервичногоИнтереса!";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
		КонецЕсли;
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Calltouch") Тогда
		Если Не ЗначениеЗаполнено(Объект.ИДСайта) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен идентификатор сайта!'");
			ПолеВвода = "Объект.ИДСайта";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
		КонецЕсли;
		
	ИначеЕсли Объект.Сценарий = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.ПочтовоеСообщение") Тогда              
		Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			ТекстОшибки = НСтр("ru='Не заполнена учетная запись!'");
			ПолеВвода = "Объект.УчетнаяЗапись";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ТемаПисьма) Тогда
			ТекстОшибки = НСтр("ru='Не заполнена тема письма!'");
			ПолеВвода = "Объект.ТемаПисьма";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ИсточникПисьма) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен источник письма!'");
			ПолеВвода = "Объект.ИсточникПисьма";
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ПолеВвода);
		КонецЕсли;
	Иначе
		Отказ = Ложь;
	КонецЕсли;	
	
	Возврат Отказ;
	
КонецФункции

#Область ВнешняяОбработка
&НаСервере
Функция ПолучитьДвоичныеДанныеИзХранилища()
	ОбъектПолучения = РеквизитФормыВЗначение("Объект");
	Возврат(ОбъектПолучения.ОбработкаДействия.Получить());
КонецФункции

&НаСервере
Процедура ПодготовитьКВыгрузкеОбработкуНаСервере()
	ДанныеФайла = ПолучитьДвоичныеДанныеИзХранилища();
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработку(Команда)
	ПодготовитьКВыгрузкеОбработкуНаСервере();
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
	Новый ОписаниеОповещения(
	"ВыгрузитьОбработкуПродолжение",
	ЭтотОбъект,
	Новый Структура),
	НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';en='Continue, install the file operation extension.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтаФорма);
	ИмяФайла = Объект.НазваниеОбработки+".epf";
	Файл = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Файл);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ДиалогОткрытияФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПереданныйФайл Из ПомещенныеФайлы Цикл
		Объект.ПутьКОбработке 		= ПереданныйФайл.Имя;
		ЭтаФорма.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуКлиент(Команда)
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
	Новый ОписаниеОповещения(
	"ЗагрузитьОбработкуПродолжение",
	ЭтотОбъект,
	Новый Структура),
	НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';en='Continue, install the file operation extension.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Объект.НазваниеОбработки) Тогда
		ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("ВопросЗагрузитьОбработку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияЗавершения, НСтр("ru = 'Загрузить новую обработку с диска?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВопросЗагрузитьОбработку(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузитьОбработку(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьОбработкуЗавершение", ЭтаФорма);
		ИмяФайла = Объект.НазваниеОбработки+".epf";
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр = "(*.epf)|*.epf";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		АдресФайла = Результат[0].Хранение;
		Объект.ПутьКОбработке = Результат[0].Имя;
		ЗагрузитьОбработку();
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОбработку()
	ПараметрыЗащиты = Новый("ОписаниеЗащитыОтОпасныхДействий"+"");
	ПараметрыЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Объект.ИспользуетсяСтандартнаяОбработка = Ложь;
	Обработка =  ВнешниеОбработки.Создать(ВнешниеОбработки.Подключить(АдресФайла,,Ложь, ПараметрыЗащиты), Ложь);
	Объект.НазваниеОбработки = Обработка.Метаданные().Имя;
	Если Объект.Наименование = "" Тогда
		Объект.Наименование = Обработка.Метаданные().Синоним;
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//ТекущийОбъект.ОбработкаДействия = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФайла));
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповеститьОВыборе(Объект.Ссылка);
	
КонецПроцедуры

#Область НастройкаВиджета
&НаКлиенте
Процедура ЗаполнитьДанныеДляВиджета()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеДанныеПоИсточникам.Очистить();
	
	// Заполнение обяхательных полей виджета.
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "Контакт";
	НоваяСтр.Реквизит = "ФИО";
	НоваяСтр.Служебный = Истина;
	НоваяСтр.Обязательный = Истина;
	
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "Телефон";
	НоваяСтр.Реквизит = "Телефон";
	НоваяСтр.Служебный = Истина;	
	НоваяСтр.Обязательный = Истина;
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "ЭлектроннаяПочта";
	НоваяСтр.Реквизит = "e-mail";
	НоваяСтр.Служебный = Истина;
	НоваяСтр.Обязательный = Истина;
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "Организация";
	НоваяСтр.Реквизит = "Компания";
	НоваяСтр.Служебный = Истина;
	НоваяСтр.Обязательный = Истина;
	НоваяСтр = Объект.ДополнительныеДанныеПоИсточникам.Добавить();
	НоваяСтр.Свойство = "Комментарий";
	НоваяСтр.Реквизит = "Комментарий";
	НоваяСтр.Служебный = Истина;	
	НоваяСтр.Обязательный = Истина;
	Массив = новый Массив;
	Массив.Добавить(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Элементы.ДополнительныеДанныеПоИсточникамСвойство.ОграничениеТипа = Новый ОписаниеТипов(Массив);
	МакетВиджета = ОбновитьДанныеВиджета();
	
КонецПроцедуры

&НаСервере
Функция СормироватьТекстЗамены(Наименование)
	
	Если Наименование = "Контакт" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""Имя"" name=crm_form_name placeholder=""Имя""></INPUT></P> " + Символы.ПС;
	ИначеЕсли Наименование = "Телефон" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""Телефон"" name=crm-form_phone placeholder=""+7 (123) 456 78 90"" v-mask=""'+7 (###) ### ## ##'""></INPUT></P> " + Символы.ПС; 
	ИначеЕсли Наименование = "ЭлектроннаяПочта" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""e-mail"" name=crm_form_email placeholder=""e-mail""></INPUT></P> " + Символы.ПС; 
	ИначеЕсли Наименование = "Организация" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""Название компании"" name=crm_form_work placeholder=""Название компании""></INPUT></P> " + Символы.ПС; 
	ИначеЕсли Наименование = "Комментарий" Тогда
		Возврат " <P><INPUT style=""COLOR: grey"" value=""Сообщение"" placeholder=""Сообщение""></INPUT></P> " + Символы.ПС; 
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ОбновитьДанныеВиджета()
	
	ДокОб = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	
	ТекстМакета = ДокОб.ПолучитьТекст();
	
	ТекстЗамены = "";
	
	Для Каждого Стр ИЗ Объект.ДополнительныеДанныеПоИсточникам цикл
		
		Если Стр.Служебный Тогда
			ТекстПодстановки = СормироватьТекстЗамены(Стр.Свойство);
			ТекстЗамены = ТекстЗамены + ТекстПодстановки;
		Иначе 
			ТекстПодстановки = "<P><INPUT style=""COLOR: grey"" value=""" + Стр.Реквизит + """ name=crm_form_name></INPUT></P> " + Символы.ПС;;
			//ТекстПодстановки = "<P>"+Стр.Реквизит + "<BR><INPUT style=""COLOR: grey"" value=""" + Стр.Реквизит + """ name=crm_form_name></INPUT></P> " + Символы.ПС;;
			ТекстЗамены = ТекстЗамены + ТекстПодстановки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстМакета = СтрЗаменить(ТекстМакета,"#Замена",ТекстЗамены);
	
	Возврат ТекстМакета;
	
КонецФункции

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамПриИзменении(Элемент)
	МакетВиджета = ОбновитьДанныеВиджета();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные.Служебный Тогда
		ПоказатьПредупреждение(,"Нельзя удалять служебные реквизиты");
		Отказ = Истина;
		Возврат;
	Иначе
		ЭлементДляУдаления = ТекДанные.Свойство;
		ЭлементДляУдаления = СписокИсключений.НайтиПоЗначению(ЭлементДляУдаления);
		СписокИсключений.Удалить(ЭлементДляУдаления);
		МакетВиджета = ОбновитьДанныеВиджета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Реквизит) Тогда
		Объект.ДополнительныеДанныеПоИсточникам.Удалить(Элемент.ТекущиеДанные.НомерСтроки - 1);
	КонецЕсли;
	МакетВиджета = ОбновитьДанныеВиджета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	МакетВиджета = ОбновитьДанныеВиджета();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	МакетВиджета = ОбновитьДанныеВиджета();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеПоИсточникамРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокИсключений",СписокИсключений);
	
	ОткрытьФорму("Справочник.CRM_ИсточникиПолученияЛидов.Форма.ФормаДополнительныхДанных",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ТекСтрока = Элементы.ДополнительныеДанныеПоИсточникам.ТекущиеДанные;
	ТекСтрока.Свойство = ВыбранноеЗначение;
	ТекСтрока.Реквизит 		= ПолучитьЗаголовокЗначения(ВыбранноеЗначение);
	ТекСтрока.Обязательный 	= ПолучитьОбязательноЗначения(ВыбранноеЗначение);
	МакетВиджета = ОбновитьДанныеВиджета();
	
	СписокИсключений.Добавить(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбязательноЗначения(ВыбранноеЗначение)
	
	Возврат ВыбранноеЗначение.ЗаполнятьОбязательно;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеДанныхПоИСключениям()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Служебный",Ложь);
	
	МассиСтрок = Объект.ДополнительныеДанныеПоИсточникам.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Стр ИЗ МассиСтрок Цикл
		
		СписокИсключений.Добавить(Стр.Свойство);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовокЗначения(ВыбранноеЗначение)
	
	Возврат ВыбранноеЗначение.Заголовок;
	
КонецФункции

&НаКлиенте
Процедура ЯвляетсяЛидом(Команда)
	
	НаСервереЛид();
	
КонецПроцедуры

&НаСервере
Процедура НаСервереЛид()
	
	Если Элементы.ЯвляетсяЛидом.Пометка Тогда
		Элементы.ЯвляетсяЛидом.Пометка = Ложь;
		Объект.CRM_ИсточникЛидов = Ложь;
	Иначе
		Элементы.ЯвляетсяЛидом.Пометка = Истина;
		Объект.CRM_ИсточникЛидов = Истина;
	КонецЕсли;
	
	УстановитьЦветаКнопки("ЯвляетсяЛидом",Элементы.ЯвляетсяЛидом.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбязательнаяВерификация(Команда)
	
	Если Элементы.ОбязательнаяВерификация.Пометка Тогда
		Элементы.ОбязательнаяВерификация.Пометка = Ложь;
		Объект.CRM_УказыватьПричинуОтклонения = Ложь;
	Иначе
		Элементы.ОбязательнаяВерификация.Пометка = Истина;
		Объект.CRM_УказыватьПричинуОтклонения = Истина;
	КонецЕсли;
	
	УстановитьЦветаКнопки("ОбязательнаяВерификация",Элементы.ОбязательнаяВерификация.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаКнопки(Наименование,Пометка)
	
	Если НЕ Пометка Тогда
		Элементы[Наименование].ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	Иначе
		Элементы[Наименование].ЦветТекста = ЦветаСтиля.ЦветАкцента;
		Элементы[Наименование].ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныйФайл(Команда)
	
	Если Элементы.ПрисоединенныйФайл1.Пометка Тогда
		Элементы.ПрисоединенныйФайл1.Пометка = Ложь;
		Объект.ПрисоединенныйФайл = Ложь;
	Иначе
		Элементы.ПрисоединенныйФайл1.Пометка = Истина;
		Объект.ПрисоединенныйФайл = Истина;
	КонецЕсли;
	
	УстановитьЦветаКнопки("ПрисоединенныйФайл1",Элементы.ПрисоединенныйФайл1.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГенераторЗвонка(Команда)
	
	Если Элементы.ИспользоватьГенераторЗвонка1.Пометка Тогда
		Элементы.ИспользоватьГенераторЗвонка1.Пометка = Ложь;
		Объект.ИспользоватьГенераторЗвонка = Ложь;
	Иначе
		Элементы.ИспользоватьГенераторЗвонка1.Пометка = Истина;
		Объект.ИспользоватьГенераторЗвонка = Истина;
	КонецЕсли;
	
	УстановитьЦветаКнопки("ИспользоватьГенераторЗвонка1",Элементы.ИспользоватьГенераторЗвонка1.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГенераторЗаявки(Команда)
	Если Элементы.ИспользоватьГенераторЗаявки1.Пометка Тогда
		Элементы.ИспользоватьГенераторЗаявки1.Пометка = Ложь;
		Объект.ИспользоватьГенераторЗаявки = Ложь;
	Иначе
		Элементы.ИспользоватьГенераторЗаявки1.Пометка = Истина;
		Объект.ИспользоватьГенераторЗаявки = Истина;
	КонецЕсли;
	УстановитьЦветаКнопки("ИспользоватьГенераторЗаявки1",Элементы.ИспользоватьГенераторЗаявки1.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерФайлаНажатие(Элемент)
	
	Значение = "Вы можете загружать данные с Вашего сайта с использованием API. 
	| Для этого достаточно отредактировать обработку (ссылка на сайт 1crm.ru) и вставить новую обработку в данный источник. 
	| После сохранения источника, данные с Вашего сайта будут загружаться в 1C:CRM автоматически";
	
	
	//Значение = "Вы можете вставить внешнюю обработку со своим алгоритмом. 
	//|Данная обработка будет работать по заданному Вами расписанию.
	//|Обязательные процедуры во внешней обработке:
	//|
	//|1.В модуле объекта необходимо наличие экспортной функции “ВыполнитьДействие” для запуска обработки регламентным заданием.
	//|
	//|Пример: 
	//|Функция ВыполнитьДействие() Экспорт
	//|	
	//|	Структура = Новый структура;
	//|	
	//|	Структура.Вставить(""Дата"",Дата);
	//|	Структура.Вставить(""Телефон"",Телефон);
	//|	Структура.Вставить(""Комментарий"",Комментарий);
	//|	Структура.Вставить(""ИсточникПервичногоИнтереса"",ИсточникПервичногоИнтереса);
	//|	Структура.Вставить(""КаналПервичногоИнтереса"",КаналПервичногоИнтереса);
	//|	Структура.Вставить(""ИсточникПолучения"" ,ИсточникПолучения);
	//|	
	//|	ДокОбъект = Документы.CRM_Заявка.СоздатьДокумент();
	//|	ЗаполнитьЗначенияСвойств(ДокОбъект,Структура);
	//|	
	//|	Попытка
	//|		ДокОбъект.Записать();
	//|	Исключение
	//|		
	//|	КонецПопытки;
	//|	
	//|КонецФункции ";
	
	ПоказатьЗначение(,Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПрисоединенныйФайлПриИзменении(Элемент)
	
	Признак = ?(СписокПрисоединенныйФайл = "1",Истина,Ложь);
	ИзменитьРеквизитыОтображение("ПрисоединенныйФайл",Признак);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗвонкиПриИзменении(Элемент)
	
	Признак = ?(СписокЗвонки = "1",Истина,Ложь);
	ИзменитьРеквизитыОтображение("ИспользоватьГенераторЗвонка",Признак);

КонецПроцедуры

Процедура ИзменитьРеквизитыОтображение(Наименование,Признак)
	
	Объект[Наименование] = Признак;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявкиПриИзменении(Элемент)
	
	Признак = ?(СписокЗаявки = "1",Истина,Ложь);
	ИзменитьРеквизитыОтображение("ИспользоватьГенераторЗаявки",Признак);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЯвляетсяЛидомПриИзменении(Элемент)
	
	Признак = ?(СписокЯвляетсяЛидом = "1",Истина,Ложь);
	ИзменитьРеквизитыОтображение("CRM_ИсточникЛидов",Признак);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВерификацияПриИзменении(Элемент)
	
	Признак = ?(СписокВерификация = "1",Истина,Ложь);
	ИзменитьРеквизитыОтображение("CRM_УказыватьПричинуОтклонения",Признак);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСопоставлениеРеквизитовНаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ТекСтрока = Элементы.ТабличнаяЧастьСопоставлениеРеквизитов.ТекущиеДанные;
		ТекСтрока.Выбрано = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьСтрокуТелаПисьма();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыЛида

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти 


