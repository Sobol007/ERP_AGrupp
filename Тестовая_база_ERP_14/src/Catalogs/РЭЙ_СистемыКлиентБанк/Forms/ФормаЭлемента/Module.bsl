////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Разделитель.Доступность = Ложь;
	
	Если СокрЛП(Объект.Разделитель) = "," Тогда
		РеквизитРазделитель = "Запятая";
	ИначеЕсли СокрЛП(Объект.Разделитель) = ";" Тогда
		РеквизитРазделитель = "Точка с запятой";
	ИначеЕсли Объект.Разделитель = "Таб" Тогда
		РеквизитРазделитель = "Табуляция";
	ИначеЕсли Объект.Разделитель = "ПС" Тогда
		РеквизитРазделитель = "Перевод строки";
	Иначе
		РеквизитРазделитель = "Прочий";
		Элементы.Разделитель.Доступность = Истина;
	КонецЕсли;
	
	Элементы.РазделительДокументов.Доступность = Ложь;
	
	Если СокрЛП(Объект.РазделительДокументов) = "," Тогда
		РеквизитРазделительДокументов = "Запятая";
	ИначеЕсли СокрЛП(Объект.РазделительДокументов) = ";" Тогда
		РеквизитРазделительДокументов = "Точка с запятой";
	ИначеЕсли Объект.РазделительДокументов = "Таб" Тогда
		РеквизитРазделительДокументов = "Табуляция";
	ИначеЕсли Объект.РазделительДокументов = "ПС" Тогда
		РеквизитРазделительДокументов = "Перевод строки";
	Иначе
		РеквизитРазделительДокументов = "Прочий";
		Элементы.РазделительДокументов.Доступность = Истина;
	КонецЕсли;

	
	МассивФайлов = Новый Массив;
	МассивСловарей = Новый Массив;
	
	ТекущийОбъект	= РеквизитФормыВЗначение("Объект");
	
	Макет = ТекущийОбъект.ПолучитьМакет("РасширенияФайлов");
	К = 2;
	
	Пока Истина Цикл
		ЗнФ = Макет.ПолучитьОбласть(К, 2, К, 2).ТекущаяОбласть.Текст;
		ЗнС = Макет.ПолучитьОбласть(К, 3, К, 3).ТекущаяОбласть.Текст;
		
		Если СокрЛП(ЗнФ) <> "" Тогда
			МассивФайлов.Добавить(СокрЛП(ЗнФ));
		КонецЕсли;
		Если СокрЛП(ЗнС) <> "" Тогда
			МассивСловарей.Добавить(СокрЛП(ЗнС));
		КонецЕсли;
		Если СокрЛП(ЗнФ) = "" И СокрЛП(ЗнС) = "" Тогда
			Прервать;
		КонецЕсли;
		
		К = К + 1;
	КонецЦикла;
	
	Элементы.РасширениеФайла.СписокВыбора.ЗагрузитьЗначения(МассивФайлов);
	Элементы.РасширениеСловаря.СписокВыбора.ЗагрузитьЗначения(МассивСловарей);

	тФорматЧисла 	= Формат(123456789.01, Объект.ФорматЧисел);
	тФорматДаты		= Формат(ТекущаяДата(), Объект.ФорматДаты);
	
	Элементы.КодировкаСимволов.СписокВыбора.Добавить("ANSI/OEM");// = Сп;
	Элементы.КодировкаСимволов.СписокВыбора.Добавить("Unicode");
	
	Элементы.КодоваяСтраница.СписокВыбора.Добавить("CP-1251");
	Элементы.КодоваяСтраница.СписокВыбора.Добавить("CP-866");
	Элементы.КодоваяСтраница.СписокВыбора.Добавить("UTF-8");
	Элементы.КодоваяСтраница.СписокВыбора.Добавить("UTF-16");
	
	МенеджерЗаписи = РегистрыСведений.РЭЙ_ПутьВыгрузкиКлиентБанк.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь   = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.ТипКлиентБанка = Объект.Ссылка;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
	
		ПутьВыгрузки = МенеджерЗаписи.Путь;
	
	КонецЕсли; 
	
	Сп	= Элементы.ИмяМакета.СписокВыбора;
	Сп.Очистить();
	
	МассивИменМакета	= ПолучитьМассивИменМакета(Объект.Ссылка);
	Сп.ЗагрузитьЗначения(МассивИменМакета);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.РасширениеФайла = "" Тогда
		Сообщить("Не установлено расширение файла выгрузки! Настройки не будут записаны!");
	КонецЕсли; 
	
	Если Объект.ИмяМакета = "" Тогда
		Сообщить("Не указана версия макета! Настройки не будут записаны!");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоздаватьСловарьПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматДатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Конструктор = Новый КонструкторФорматнойСтроки(Объект.ФорматДаты);
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Дата");
	
	Если Конструктор.ОткрытьМодально() Тогда
		
    	Объект.ФорматДаты = Конструктор.Текст;
		ИзменитьФорматьДаты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматЧиселНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущийФорматЧисел = Объект.ФорматЧисел;
	
	Конструктор = Новый КонструкторФорматнойСтроки(ТекущийФорматЧисел);
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Число");
	
	Если Конструктор.ОткрытьМодально() Тогда
		
    	Объект.ФорматЧисел = Конструктор.Текст;
		ИзменитьФорматьЧисел();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматЧиселПриИзменении(Элемент)
	
	ИзменитьФорматьЧисел();	
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматДатыПриИзменении(Элемент)
	
	ИзменитьФорматьДаты();	

КонецПроцедуры

&НаКлиенте
Процедура ТранслитерацияПриИзменении(Элемент)
	
	УстановитьВидимость();	
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитРазделительДокументовПриИзменении(Элемент)
		
	Элементы.РазделительДокументов.Доступность = РеквизитРазделительДокументов = "0";
	
	Если НЕ РеквизитРазделительДокументов = "0" Тогда
		Объект.РазделительДокументов = СокрЛП(РеквизитРазделительДокументов);
	Иначе
		Объект.РазделительДокументов	= "";
	КонецЕсли;
	
	УстановитьВидимость();
	
	ЭлементРазделителяДокументов =  Элементы.РеквизитРазделительДокументов.СписокВыбора.НайтиПоЗначению(Объект.РазделительДокументов);//.Представление;
	
	Если ЭлементРазделителяДокументов <> Неопределено Тогда 
		
		РеквизитРазделительДокументов	= ЭлементРазделителяДокументов.Представление;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КодировкаСимволовНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.КодировкаСимволов.СписокВыбора.Очистить();
	Элементы.КодировкаСимволов.СписокВыбора.Добавить("ANSI/OEM");
	Элементы.КодировкаСимволов.СписокВыбора.Добавить("Unicode");
	
КонецПроцедуры

&НаКлиенте
Процедура КодоваяСтраницаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.КодоваяСтраница.СписокВыбора.Очистить();
	
	Если Объект.КодировкаСимволов = "ANSI/OEM" Тогда
		
		Элементы.КодоваяСтраница.СписокВыбора.Добавить("CP-1251");
		Элементы.КодоваяСтраница.СписокВыбора.Добавить("CP-866");
		
	ИначеЕсли Объект.КодировкаСимволов = "Unicode" Тогда	
		
		Элементы.КодоваяСтраница.СписокВыбора.Добавить("UTF-8");
		Элементы.КодоваяСтраница.СписокВыбора.Добавить("UTF-16");
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КодировкаСимволовПриИзменении(Элемент)
	
	Объект.КодоваяСтраница	= "";
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитРазделительПриИзменении(Элемент)
	
	Элементы.Разделитель.Доступность = РеквизитРазделитель = "0";
	
	Если НЕ РеквизитРазделитель = "0" Тогда
		Объект.Разделитель = СокрЛП(РеквизитРазделитель);
	Иначе
		Объект.Разделитель="";
	КонецЕсли;

	УстановитьВидимость();

	ЭлементРазделителя =  Элементы.РеквизитРазделитель.СписокВыбора.НайтиПоЗначению(Объект.Разделитель);//.Представление;
	
	Если ЭлементРазделителя <> Неопределено Тогда 
		
		РеквизитРазделитель	= ЭлементРазделителя.Представление;		
		
	КонецЕсли;	
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


&НаКлиенте
Процедура УстановитьВидимость()

	Если Объект.СоздаватьСловарь Тогда 
		Элементы.ГруппаСтраницыРасширениеСловаря.ТекущаяСтраница 	= Элементы.ГруппаСтраницаРасширениеСловаряЕсть;
	Иначе 	
		Элементы.ГруппаСтраницыРасширениеСловаря.ТекущаяСтраница 	= Элементы.ГруппаСтраницаРасширениеСловаряНет;
	КонецЕсли;	
	
	Если Объект.Транслитерация Тогда
		Элементы.ГруппаСтраницыТранслитерация.ТекущаяСтраница	= Элементы.ГруппаСтраницаТранслитерацияЕсть;
	Иначе 
		Элементы.ГруппаСтраницыТранслитерация.ТекущаяСтраница	= Элементы.ГруппаСтраницаТранслитерацияНет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФорматьДаты()
	
	тФорматДаты = Формат(ТекущаяДата(), Объект.ФорматДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФорматьЧисел()
	
	тФорматЧисла = Формат(123456789.01, Объект.ФорматЧисел);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьМассивИменМакета(Ссылка)
	
	МассивИмен	= Новый Массив;
	
	Для каждого Стр Из Метаданные.Справочники.РЭЙ_СистемыКлиентБанк.Макеты Цикл
		
		ИмяЭлемента = Справочники.РЭЙ_СистемыКлиентБанк.ПолучитьИмяПредопределенного(Ссылка);
		Если Найти(Стр.Имя, ИмяЭлемента) = 0 Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		МассивИмен.Добавить(Стр.Имя);
	
	КонецЦикла;
	
	Возврат МассивИмен;
	
КонецФункции	

&НаКлиенте
Процедура ПутьВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборКаталога.Каталог = ПутьВыгрузки;
	
	Если ВыборКаталога.Выбрать() Тогда
	
		ПутьВыгрузки = ВыборКаталога.Каталог;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.РЭЙ_ПутьВыгрузкиКлиентБанк.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.ТипКлиентБанка = Объект.Ссылка;
	МенеджерЗаписи.Путь = ПутьВыгрузки;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры
