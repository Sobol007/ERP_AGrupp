
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураСервер.НастроитьОтборВПараметрахПолитикУчетаСерий(Параметры);
	
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы,
		"ГруппаИли",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
			"Предопределенный",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИли,
		"ГруппаИ",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	Для Каждого КлючЗначение из Параметры.Отбор Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			КлючЗначение.Ключ,
			КлючЗначение.Значение,
			?(ТипЗнч(КлючЗначение.Значение) = Тип("Массив")
				или ТипЗнч(КлючЗначение.Значение) = Тип("ФиксированныйМассив"), 
					ВидСравненияКомпоновкиДанных.ВСписке, 
					ВидСравненияКомпоновкиДанных.Равно),
				,
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЦикла;
	
	Параметры.Отбор.Очистить();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЭтоВыборОбщейДляВидаНоменклатурыПолитики = Параметры.Свойство("ВидНоменклатуры");
	
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	ИспользоватьТоварыВПутиОтПоставщиков  = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи = Ложь;
	//++ НЕ УТ
	ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи = ПолучитьФункциональнуюОпцию("ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи");
	//-- НЕ УТ
	
	Если ИспользоватьНеотфактурованныеПоставки
		Или ИспользоватьТоварыВПутиОтПоставщиков
		Или ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи Тогда
		
		СформироватьНадписьРасшифровкаОтбора();
		
	КонецЕсли;
	
	Элементы.ДекорацияРасшифровкаОтбора.Видимость = (ИспользоватьНеотфактурованныеПоставки
														Или ИспользоватьТоварыВПутиОтПоставщиков
														Или ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи)
													И ЭтоВыборОбщейДляВидаНоменклатурыПолитики
													И ЗначениеЗаполнено(Параметры.ВидНоменклатуры);
	
	Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Видимость = ЭтоВыборОбщейДляВидаНоменклатурыПолитики
		И Параметры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
		И (СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад()
			Или СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад());
	Если Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Видимость Тогда
		Если СкладыСервер.ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач() Тогда	
			Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Заголовок =
				НСтр("ru = 'Есть склады, для которых используется ордерная схема при отгрузке или поступлении, поэтому подконтрольной продукции ВетИС единой политикой учета серий может быть только политика, предусматривающая учет себестоимости по сериям. Но в базе не все склады ордерные на отражение излишков, недостач и порчи, что не дает сделать такую политику единой для всех складов. Выберите политику ""Серии не используются"" и проводите настройку для каждого склада.';
					|en = 'Some warehouses use advanced warehousing for shipment or receiving, therefore, only a policy in which cost accounting by series is kept can serve as a series accounting policy for products controlled by VetIS. But not all warehouses use advanced warehousing to record surplus, shortage, or damage. Thus, such policy cannot be applied to all warehouses. Select the ""Series are not used"" policy, and configure it for each warehouse.'");	
		Иначе
			Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Заголовок =
				НСтр("ru = 'Есть склады, для которых используется ордерная схема при отгрузке или поступлении, поэтому подконтрольной продукции ВетИС единой политикой учета серий может быть только политика, предусматривающая учет себестоимости по сериям.';
					|en = 'Some warehouses use advanced warehousing for shipment or receiving, therefore, only a policy in which cost accounting by series is kept can serve as a series accounting policy for products controlled by VetIS.'");
		КонецЕсли;
	КонецЕсли;		
			
	Элементы.ДекорацияОграниченияВыбораОбщейПолитикиНеВсеСкладыОрдерныеНаИзлишкиНедостачи.Видимость 
		= Не Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Видимость
		И ЭтоВыборОбщейДляВидаНоменклатурыПолитики
		И Не Параметры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ
		И СкладыСервер.ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач();
		

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияРасшифровкаОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОтключитьОтбор" Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор,,"ГруппаИ");
		
		ГруппаИ = МассивЭлементов[0];
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			"УчетСерийВНеотфактурованныхПоставкахТоваров",
			,
			,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			"УчетТоваровВПутиОтПоставщикаПоСериям",
			,
			,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			"УчетСерийВПереданныхНаХранениеТоварах",
			,
			,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.ДекорацияРасшифровкаОтбора.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьНадписьРасшифровкаОтбора()
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(НСтр("ru = 'Выбираемая политика учета серий должна иметь те же настройки учета серий при';
								|en = 'The selected billing accounting policy must have the same billing accounting settings when'"));
	
	МассивПолитикУчетаСерий = Новый Массив;
	
	Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
		МассивПолитикУчетаСерий.Добавить(НСтр("ru = 'учете товаров в пути от поставщика';
												|en = 'registering goods on the way from the supplier'"));
	КонецЕсли;
	
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		МассивПолитикУчетаСерий.Добавить(НСтр("ru = 'неотфактурованных поставках';
												|en = 'uninvoiced supplies'"));
	КонецЕсли;
	
	//++ НЕ УТ
	Если ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи Тогда
		МассивПолитикУчетаСерий.Добавить(НСтр("ru = 'учете переданных на хранение товаров';
												|en = 'registering goods transfered for storage'"));
	КонецЕсли;
	//-- НЕ УТ
	
	ТекстПолитикУчетаСерий = Символы.НПП + МассивПолитикУчетаСерий[0];
	
	Если МассивПолитикУчетаСерий.Количество() > 2 Тогда
		Для НомерЭлемента = 1 По МассивПолитикУчетаСерий.ВГраница() Цикл
			Если НомерЭлемента < МассивПолитикУчетаСерий.ВГраница() Тогда
				ТекстПолитикУчетаСерий = "," + Символы.НПП + МассивПолитикУчетаСерий[НомерЭлемента];
			Иначе
				ТекстПолитикУчетаСерий = Символы.НПП + НСтр("ru = 'и';
															|en = 'and'") + Символы.НПП + МассивПолитикУчетаСерий[НомерЭлемента]
											+ ".";
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли МассивПолитикУчетаСерий.Количество() = 2 Тогда
		ТекстПолитикУчетаСерий = ТекстПолитикУчетаСерий + Символы.НПП + НСтр("ru = 'и';
																			|en = 'and'") + Символы.НПП
									+ МассивПолитикУчетаСерий[1];
		
	КонецЕсли;
	
	МассивТекстов.Добавить(ТекстПолитикУчетаСерий);
	МассивТекстов.Добавить(НСтр("ru = 'Есть возможность';
								|en = 'There is a feature'"));
	МассивТекстов.Добавить(Символы.НПП);
	МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить отбор';
															|en = 'to clear the filter'"), , , , "ОтключитьОтбор"));
	МассивТекстов.Добавить(Символы.НПП);
	МассивТекстов.Добавить(НСтр("ru = 'и выбрать политику с отличными настройками, но это может привести к проблемам в учете.';
								|en = 'and select a policy with different settings, but this can lead to problems in accounting.'"));
	
КонецПроцедуры

#КонецОбласти
