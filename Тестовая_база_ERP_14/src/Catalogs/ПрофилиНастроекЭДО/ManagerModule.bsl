#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция формирует краткое наименование оператора из полного.
//
// Параметры:
//  Наименование - Строка - полное наименование оператора.
//
// Возвращаемое значение:
//  Строка - краткое наименование оператора.
Функция КраткоеНаименованиеОператора(Наименование) Экспорт
	
	КраткоеНаименование = СтрЗаменить(Наименование, "«", "");
	КраткоеНаименование = СтрЗаменить(КраткоеНаименование, "»", "");
	
	Если СтрНайти(КраткоеНаименование, "ЗАО ") Тогда
		КраткоеНаименование = СтрЗаменить(КраткоеНаименование, "ЗАО ", "");
	ИначеЕсли СтрНайти(КраткоеНаименование, "ООО ") Тогда
		КраткоеНаименование = СтрЗаменить(КраткоеНаименование, "ООО ", "");
	ИначеЕсли СтрНайти(КраткоеНаименование, "ПАО ") Тогда
		КраткоеНаименование = СтрЗаменить(КраткоеНаименование, "ПАО ", "");
	ИначеЕсли СтрНайти(КраткоеНаименование, "АО ") Тогда
		КраткоеНаименование = СтрЗаменить(КраткоеНаименование, "АО ", "");
	ИначеЕсли СтрНайти(КраткоеНаименование, "ОАО ") Тогда
		КраткоеНаименование = СтрЗаменить(КраткоеНаименование, "ОАО ", "");
	КонецЕсли;
	
	Возврат КраткоеНаименование;
	
КонецФункции

// Обработчик обновления на БЭД 1.3.6.7
// Заполняет реквизиты табличных частей справочников "Профили настроек ЭДО"
// и "Соглашение об использовании ЭДО".
//
Процедура ЗаполнитьРегламентЭДО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка КАК Профиль,
	|	ПрофилиНастроекЭДО.ИспользоватьУПД,
	|	ПрофилиНастроекЭДО.ИспользоватьУКД
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Профиль = Выборка.Профиль;
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		ИсходящиеДокументы = ПрофильОбъект.ИсходящиеДокументы;
		Для Каждого ТекСтрока Из ИсходящиеДокументы Цикл
			
			ТекСтрока.ТребуетсяИзвещениеОПолучении = Истина;
			
			Если ТекСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
				
				Если Выборка.ИспользоватьУПД Тогда
					ТекСтрока.ТребуетсяОтветнаяПодпись = Истина;
					
				Иначе
					ТекСтрока.ТребуетсяОтветнаяПодпись = Ложь;
				КонецЕсли;
			ИначеЕсли ТекСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				Если Выборка.ИспользоватьУКД Тогда
					ТекСтрока.ТребуетсяОтветнаяПодпись = Истина;
					
				Иначе
					ТекСтрока.ТребуетсяОтветнаяПодпись = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СчетНаОплату Тогда
				
				ТекСтрока.ТребуетсяОтветнаяПодпись = Ложь;
				
			Иначе
				ТекСтрока.ТребуетсяОтветнаяПодпись = ТекСтрока.ИспользоватьЭП;
				
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		
		ПрофильОбъект.ИзменитьДанныеВСвязанныхНастройкахЭДО(ПрофильОбъект, Ложь);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка КАК Настройка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.РасширенныйРежимНастройкиСоглашения = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Соглашение = Выборка.Настройка;
		СоглашениеОбъект = Соглашение.ПолучитьОбъект();
		Для Каждого ТекСтрока Из СоглашениеОбъект.ИсходящиеДокументы Цикл
			
			ВидЭД = ТекСтрока.ИсходящийДокумент;
			ПрофильЭДО = ТекСтрока.ПрофильНастроекЭДО;
			
			СвойстваЭД = Новый Структура("ТребуетсяИзвещение, ТребуетсяОтветнаяПодпись, ИспользоватьЭП");
			ЗаполнитьСвойстваЭДИзПрофиля(ПрофильЭДО, ВидЭД, СвойстваЭД);
			
			ЗаполнитьЗначенияСвойств(ТекСтрока, СвойстваЭД);
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СоглашениеОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.6.25
Процедура СнятьФлагОтветнойПодписиУСчетаНаОплату() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка КАК ПрофильЭДО
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.ИсходящиеДокументы КАК ПрофилиНастроекЭДОИсходящиеДокументы
	|ГДЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетНаОплату)
	|	И ПрофилиНастроекЭДОИсходящиеДокументы.ТребуетсяОтветнаяПодпись = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	ИсходящийДокументСчетНаОплату = Перечисления.ВидыЭД.СчетНаОплату;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПрофильОбъект = Выборка.ПрофильЭДО.ПолучитьОбъект();
		ИсходящиеДокументыПрофиля = ПрофильОбъект.ИсходящиеДокументы;
		
		СтрокаСчетНаОплату = ИсходящиеДокументыПрофиля.Найти(ИсходящийДокументСчетНаОплату, "ИсходящийДокумент");
		СтрокаСчетНаОплату.ТребуетсяОтветнаяПодпись = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		
		ПрофильОбъект.ИзменитьДанныеВСвязанныхНастройкахЭДО(ПрофильОбъект, Ложь);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК НастройкаЭДО
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетНаОплату)
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкаЭДООбъект = Выборка.НастройкаЭДО.ПолучитьОбъект();
		ИсходящиеДокументыНастройки = НастройкаЭДООбъект.ИсходящиеДокументы;
		
		СтрокаСчетНаОплатуНастройки = ИсходящиеДокументыНастройки.Найти(ИсходящийДокументСчетНаОплату, "ИсходящийДокумент");
		СтрокаСчетНаОплатуНастройки.ТребуетсяОтветнаяПодпись = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДООбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МассивСсылок = Новый Массив;
	
	ПустойМаршрут    = Справочники.МаршрутыПодписания.ПустаяСсылка();
	ИспользуемыеВиды = ОбменСКонтрагентамиСлужебный.ИспользуемыеВидыЭлектронныхДокументов();
	ПрикладныеВиды   = ОбменСКонтрагентамиСлужебный.ПрикладныеВидыЭлектронныхДокументов();
	
	ИспользуемыеВидыВНастройках = Новый Массив;
	ПрикладныеВидыВНастройках   = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка КАК Ссылка,
		|	ПрофилиНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ПрофилиНастроекЭДО.Наименование КАК Наименование,
		|	ПрофилиНастроекЭДО.ОператорЭДО КАК ОператорЭДО,
		|	ПрофилиНастроекЭДО.ИсходящиеДокументы.(
		|		ИспользоватьЭП КАК ИспользоватьЭП,
		|		ИсходящийДокумент КАК ИсходящийДокумент,
		|		ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|		ДокументУчета КАК ДокументУчета,
		|		МаршрутПодписания КАК МаршрутПодписания
		|	) КАК ИсходящиеДокументы
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
			И ЗначениеЗаполнено(Выборка.ОператорЭДО) Тогда
			
			ОператорЭДО = КраткоеНаименованиеОператора(Выборка.ОператорЭДО);
			Если СтрНайти(Выборка.Наименование, ОператорЭДО) = 0 Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИспользуемыеВидыВНастройках.Очистить();
		ПрикладныеВидыВНастройках.Очистить();
		
		ОтмеченКОбработке = Ложь;
		
		ВыборкаИсходящиеДокументы = Выборка.ИсходящиеДокументы.Выбрать();
		Пока ВыборкаИсходящиеДокументы.Следующий() Цикл
			
			Если ВыборкаИсходящиеДокументы.ИспользоватьЭП 
				И ВыборкаИсходящиеДокументы.МаршрутПодписания = ПустойМаршрут Тогда
				
				МассивСсылок.Добавить(Выборка.Ссылка);
				ОтмеченКОбработке = Истина;
				Прервать;
			КонецЕсли;
			
			Если ВыборкаИсходящиеДокументы.ИсходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
				ПредставлениеОснования = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(
					ВыборкаИсходящиеДокументы.ПрикладнойВидЭД);
				ПрикладныеВидыВНастройках.Добавить(ВыборкаИсходящиеДокументы.ПрикладнойВидЭД);
			Иначе
				ПредставлениеОснования = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(
					ВыборкаИсходящиеДокументы.ИсходящийДокумент);
				ИспользуемыеВидыВНастройках.Добавить(ВыборкаИсходящиеДокументы.ИсходящийДокумент);
			КонецЕсли;
			
			Если ПредставлениеОснования <> ВыборкаИсходящиеДокументы.ДокументУчета Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
				ОтмеченКОбработке = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтмеченКОбработке Тогда
			Продолжить;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИспользуемыеВиды, ИспользуемыеВидыВНастройках).Количество()
			ИЛИ   ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрикладныеВиды, ПрикладныеВидыВНастройках).Количество() Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Обрабатывать настройки можно только после обновления предопределенных маршрутов.
	Если ОбновлениеИнформационнойБазы.ОбъектОбработан("Справочник.МаршрутыПодписания").Обработан Тогда
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
			Параметры.Очередь, "Справочник.ПрофилиНастроекЭДО");
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ПрофилиНастроекЭДО");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Если Объект = Неопределено Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ЗаписатьОбъект = Ложь;
				
				ПараметрыОтбора = Новый Структура("МаршрутПодписания, ИспользоватьЭП", 
					Справочники.МаршрутыПодписания.ПустаяСсылка(), Истина);
				СтрокиСПустымМаршрутом = Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиСПустымМаршрутом.Количество() Тогда
					Для Каждого СтрокаНастройки Из СтрокиСПустымМаршрутом Цикл
						СтрокаНастройки.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
					КонецЦикла;
					
					ЗаписатьОбъект = Истина;
				КонецЕсли;
				
				Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
					И ЗначениеЗаполнено(Объект.ОператорЭДО) Тогда
					
					ОператорЭДО = КраткоеНаименованиеОператора(Объект.ОператорЭДО);
					Если СтрНайти(Объект.Наименование, ОператорЭДО) = 0 Тогда
						Объект.Наименование = Объект.Наименование + " (" + ОператорЭДО + ")";
						ЗаписатьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
				
				ИспользуемыеВиды = ОбменСКонтрагентамиСлужебный.ИспользуемыеВидыЭлектронныхДокументов();
				ПрикладныеВиды   = ОбменСКонтрагентамиСлужебный.ПрикладныеВидыЭлектронныхДокументов();
				Для Каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
					
					Если СтрокаТаблицы.ИсходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
						Индекс = ПрикладныеВиды.Найти(СтрокаТаблицы.ПрикладнойВидЭД);
						Если Индекс <> Неопределено Тогда
							ПрикладныеВиды.Удалить(Индекс);
						КонецЕсли;
						ПредставлениеОснования = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(СтрокаТаблицы.ПрикладнойВидЭД);
					Иначе
						Индекс = ИспользуемыеВиды.Найти(СтрокаТаблицы.ИсходящийДокумент);
						Если Индекс <> Неопределено Тогда
							ИспользуемыеВиды.Удалить(Индекс);
						КонецЕсли;
						ПредставлениеОснования = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(СтрокаТаблицы.ИсходящийДокумент);
					КонецЕсли;
					
					Если ПредставлениеОснования <> СтрокаТаблицы.ДокументУчета Тогда
						СтрокаТаблицы.ДокументУчета = ПредставлениеОснования;
						ЗаписатьОбъект = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				СертификатыПрофиля = Объект.СертификатыПодписейОрганизации.ВыгрузитьКолонку("Сертификат");
				ПараметрыОтбора = Новый Структура("ИспользоватьЭП", Истина);
				ИспользоватьЭП = ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи()
					И (НЕ ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(Объект.СпособОбменаЭД)
						ИЛИ ЗначениеЗаполнено(Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора)));
				
				Если ИспользуемыеВиды.Количество() Тогда
					ЗаписатьОбъект = Истина;
					
					Для Каждого ВидЭлектронногоДокумента Из ИспользуемыеВиды Цикл
						
						ОбменСКонтрагентамиСлужебный.ЗаполнитьНастройкуВидаЭлектронногоДокумента(
							Объект.ИсходящиеДокументы.Добавить(), ВидЭлектронногоДокумента, Объект.СпособОбменаЭД, ИспользоватьЭП);
						
						ДобавитьВидЭлектронногоДокументаДляПодписания(ВидЭлектронногоДокумента, СертификатыПрофиля);
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ПрикладныеВиды.Количество() Тогда
					ЗаписатьОбъект = Истина;
					
					Для Каждого ВидЭлектронногоДокумента Из ПрикладныеВиды Цикл
						ОбменСКонтрагентамиСлужебный.ЗаполнитьНастройкуПрикладногоВидаЭлектронногоДокумента(
							Объект.ИсходящиеДокументы.Добавить(), ВидЭлектронногоДокумента, ИспользоватьЭП);
					КонецЦикла;
					
					ДобавитьВидЭлектронногоДокументаДляПодписания(Перечисления.ВидыЭД.ПрикладнойЭД, СертификатыПрофиля);
					
				КонецЕсли;
				
				Объект.ИсходящиеДокументы.Сортировать("Приоритет");
				
				Если ЗаписатьОбъект Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать профиль настроек ЭДО: %1 по причине: %2';
												|en = 'Cannot process EDI settings profile %1 due to: %2'"), 
					Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ПрофилиНастроекЭДО, Выборка.Ссылка, ТекстСообщения);
				
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.ПрофилиНастроекЭДО");
	
КонецПроцедуры

// Обработчик обновления для добавления из вне библиотеки.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюВнешнийВызов(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы.
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Если МетаданныеИОтбор.ПолноеИмя = "Справочник.ПрофилиНастроекЭДО" Тогда
		МетаданныеИОтборПрофиляНастроек = МетаданныеИОтбор;
	ИначеЕсли МетаданныеИОтбор.ПолноеИмя = "Документ.ЭлектронныйДокументИсходящий" 
		ИЛИ МетаданныеИОтбор.ПолноеИмя = "Документ.ЭлектронныйДокументВходящий" Тогда
		ПрофильНастроек = МетаданныеИОтбор.Отбор.ПрофильНастроекЭДО;
		МетаданныеИОтборПрофиляНастроек = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(ПрофильНастроек);
	КонецЕсли;
	
	Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтборПрофиляНастроек);
	
КонецФункции

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСвойстваЭДИзПрофиля(ПрофильЭДО, ВидЭД, СвойстваЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.ИсходящиеДокументы КАК ПрофилиНастроекЭДОИсходящиеДокументы
	|ГДЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка = &ПрофильЭДО
	|	И ПрофилиНастроекЭДОИсходящиеДокументы.ИсходящийДокумент = &ВидЭД";
	
	Запрос.УстановитьПараметр("ПрофильЭДО", ПрофильЭДО);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СвойстваЭД, Выборка);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ДобавитьВидЭлектронногоДокументаДляПодписания(ВидЭлектронногоДокумента, СертификатыПрофиля)
	
	НаборЗаписей = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЭД.Установить(ВидЭлектронногоДокумента);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		СертификатыНабора = НаборЗаписей.ВыгрузитьКолонку("СертификатЭП");
		СертификатыКДобавлению = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СертификатыПрофиля, СертификатыНабора);
	Иначе
		СертификатыКДобавлению = СертификатыПрофиля;
	КонецЕсли;
	
	Если СертификатыКДобавлению.Количество() Тогда
		Для Каждого Сертификат Из СертификатыКДобавлению Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ВидЭД = ВидЭлектронногоДокумента;
			Запись.СертификатЭП = Сертификат;
			Запись.Использовать = Истина;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
