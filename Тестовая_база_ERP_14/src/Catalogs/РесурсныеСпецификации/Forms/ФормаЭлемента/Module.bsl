
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	УстановитьОтборПоВладельцуВСпискеЭтапов();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтатусЗаписанногоОбъекта = ТекущийОбъект.Статус;
	
	УстановитьОтборПоВладельцуВСпискеЭтапов();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РесурсныеСпецификации");
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СтатусЗаписанногоОбъекта = ТекущийОбъект.Статус;
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент, ТекущиеДанные, ВыбранноеЗначение);
		
//++ НЕ УТКА
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаАвтовыбораНоменклатуры" Тогда
		
		ОбработкаВыбораНастройкаАвтовыбораНоменклатуры(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаОтбораПоСвойствамИРасчетаПоФормулам" Тогда
		
		ОбработкаВыбораНастройкаОтбораПоСвойствамИРасчетаПоФормулам(ИсточникВыбора.ИмяТЧ, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И (ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбораСпособаПолученияМатериала") Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВыбораСпособаПолученияМатериала(ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И (ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаНастройкиПримененияМатериала") Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВыбораНастройкиПримененияМатериала(ТекущиеДанные, ВыбранноеЗначение);
//-- НЕ УТКА
	Иначе
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЭтапыПроизводства" Тогда
		
		ОбработатьИзменениеПроизводственногоПроцесса(Источник);
		
	ИначеЕсли ИмяСобытия = "Запись_ОсновныеСпецификации" Тогда
		
		Если Объект.Статус = СтатусДействующейСпецификации Тогда
			
			ОбновитьСлужебныеРеквизитыПриЗаписиОсновнойСпецификации();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, ДоступностьРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОсновноеИзделиеСпецификации

&НаКлиенте
Процедура ОсновноеИзделиеНоменклатураПриИзменении(Элемент)
	
	ОсновноеИзделиеНоменклатураПриИзмененииНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеИзделиеНоменклатураПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтруктураСтроки = ОсновноеИзделиеСпецификацииСтруктурой(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    СтруктураСтроки.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтруктураСтроки.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтаФорма, СтруктураСтроки);
	
	ОбновитьИнформациюПоОсновномуИзделиюСпецификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеХарактеристикаПриИзменении(Элемент)
	
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеКоличествоУпаковокПриИзменении(Элемент)
	
	СтруктураСтроки = ОсновноеИзделиеСпецификацииСтруктурой(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтаФорма, СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеУпаковкаПриИзменении(Элемент)
	
	СтруктураСтроки = ОсновноеИзделиеСпецификацииСтруктурой(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтаФорма, СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеИзделиеПроцентБракаПриИзменении(Элемент)
	
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураПроизводственногоПроцесса

&НаКлиенте
Процедура СтруктураПроизводственногоПроцессаПриИзменении(Элемент)
	
	Объект.МногоэтапныйПроизводственныйПроцесс = Булево(СтруктураПроизводственногоПроцесса);
	ПриИзмененииСтруктурыПроизводственногоПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПартииВыпускаПриИзменении(Элемент)
	
	Если Объект.ВыпускПроизвольнымиПорциями <> ВыпускПроизвольнымиПорциямиДоИзменения Тогда
		
		СписокРеквизитов = Новый Массив;
		Если ТребуетсяОчиститьРеквизитыПриИзмененииОписанияПартииВыпуска(СписокРеквизитов) Тогда
			
			ТекстШаблона = НСтр("ru = 'При изменении кратности выпуска будут очищены реквизиты: %1
				|Продолжить?';
				|en = 'If the release multiplier is changed, attributes will be cleared: %1
				|Continue?'");
			ТекстВопроса = СтрШаблон(ТекстШаблона, СтрСоединить(СписокРеквизитов, ", "));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьРеквизитыПриИзмененииОписанияПартииВыпуска", ЭтаФорма);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыпускПроизвольнымиПорциями");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяПартияВыпускаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "МинимальнаяПартияВыпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальнаяПартияВыпускаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОптимальнаяПартияВыпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура ОграниченСрокПролеживанияВыходныхИзделийПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НастройкаМаксимальныйСрокПролеживания");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроизводственногоПроцессаПриИзменении(Элемент)
	
	ПриИзмененииТипаПроизводственногоПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНаборПриИзменении(Элемент)
	
	Объект.ИспользоватьНесколькоВыходныхИзделий = Булево(ИспользоватьНабор);
	
	ПриИзмененииПризнакаИспользоватьНесколькоВыходныхИзделий();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПризнакаИспользоватьНесколькоВыходныхИзделий();
	
	ПрочитатьДанныеОсновногоИзделияСпецификации();;
	
	ПриИзмененииТипаПроизводственногоПроцесса();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ГруппаПроизводственныйПроцесс"
		И ПроизводственныйПроцессТребуетсяВыполнитьОтложеннуюИнициализацию() Тогда
		
		ПроизводственныйПроцессВыполнитьОтложеннуюИнициализацию();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭтапаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьСкопироватьИзменитьЭтапПроизводства(ДанныеПервогоЭтапа.Ссылка)
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяСтрокаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "НазначитьОсновной" Тогда
		
		СтруктураОшибки = Новый Структура;
		Если НЕ УправлениеДаннымиОбИзделияхКлиентСервер.СпецификациюМожноНазначитьОсновной(Объект, СтруктураОшибки) Тогда
			ПоказатьПредупреждение(Неопределено, СтруктураОшибки.ТекстОшибки,, НСтр("ru = 'Назначить основной спецификацией';
																					|en = 'Set as the main BOR'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Спецификация", Объект.Ссылка);
		
		ОткрытьФорму("РегистрСведений.ОсновныеСпецификации.Форма.НазначитьОсновнойСпецификацией", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьИнформационнуюПанельНажатие(Элемент)
	
	Элементы.ИнформационнаяПанель.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("Продукция", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Продукция");
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, ПродукцияКешТекущейСтроки, НоваяСтрока) Тогда
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ВыходныеИзделия"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия",
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияТребуетсяУказыватьСерииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущаяСтрока;
	ПродукцияТребуетсяУказыватьСерииПриИзмененииНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияТребуетсяУказыватьСерииПриИзмененииНаСервере(Идентификатор)

	ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(Идентификатор);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия",
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Продукция", "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Продукция", "ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВыходныеИзделия", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ВыходныеИзделия");
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.ВыходныеИзделия.ТекущиеДанные;
		
		КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
		
		СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(
			СтрокаТабличнойЧасти,
			КлючСвязиИсточника,
			Объект.СоответствиеСвойств);
			
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСОтборомПоСвойствам(
			СтрокаТабличнойЧасти,
			КлючСвязиИсточника,
			Объект.ОтборПоСвойствам);
			
		РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ВыходныеИзделия"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииНоменклатурыВСтрокеВыходныхИзделий(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
		Элементы.ВыходныеИзделия,
		Элементы.ВыходныеИзделия.ВыделенныеСтроки,
		Объект.СоответствиеСвойств);
		
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.ВыходныеИзделия,
		Элементы.ВыходныеИзделия.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, ВыходныеИзделияКешТекущейСтроки, НоваяСтрока) Тогда
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтаФорма);
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВозвратныеОтходы", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииНоменклатурыВСтрокеВыходныхИзделий(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
		Элементы.ВозвратныеОтходы,
		Элементы.ВозвратныеОтходы.ВыделенныеСтроки,
		Объект.СоответствиеСвойств);
		
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.ВозвратныеОтходы,
		Элементы.ВозвратныеОтходы.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		
		КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
		
		СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(
			СтрокаТабличнойЧасти,
			КлючСвязиИсточника,
			Объект.СоответствиеСвойств);
			
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСОтборомПоСвойствам(
			СтрокаТабличнойЧасти,
			КлючСвязиИсточника,
			Объект.ОтборПоСвойствам);
		
		РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	
	РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВозвратныеОтходы");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "МатериалыИУслугиСпособПолученияМатериалаРедактирование" Тогда
		
		ДанныеСтроки = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если (ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации")
				И ЗначениеЗаполнено(ДанныеСтроки.ИсточникПолученияПолуфабриката)
			ИЛИ ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
				И ЗначениеЗаполнено(ДанныеСтроки.СпецификацияРемонта)
			)Тогда
			Поле.КнопкаОткрытия = Истина;
		Иначе
			
			Поле.КнопкаОткрытия = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	ОбработатьВыборПоляВТаблице("МатериалыИУслуги", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиАвтовыбораНоменклатуры(
				Элементы.МатериалыИУслуги,
				Элементы.МатериалыИУслуги.ВыделенныеСтроки,
				Объект.СоответствиеСвойств);
				
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
				Элементы.МатериалыИУслуги,
				Элементы.МатериалыИУслуги.ВыделенныеСтроки,
				Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.МатериалыИУслуги.ТекущиеДанные;
		ПриВводеНовойСтрокиМатериалов(ЭтаФорма, СтрокаТабличнойЧасти, Копирование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИУслуги"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииНоменклатурыВСтрокеМатериалов(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияМатериалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораСпособаПолученияМатериала(ТекущиеДанные);
//-- НЕ УТКА

	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭтапРедактированиеПриИзменении(Элемент)
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(Элементы.МатериалыИУслуги.ТекущаяСтрока);
	ОбработатьИзменениеЭтапаМатериалыИУслуги(Идентификаторы);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиТребуетсяУказыватьСерииПриИзменении(Элемент)
	
	МатериалыИУслугиТребуетсяУказыватьСерииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиТребуетсяУказыватьСерииПриИзмененииНаСервере()

	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"МатериалыИУслуги", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияМатериалаРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	ЗаполнитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные);
//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияМатериалаРедактированиеОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанные.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации")
			И ЗначениеЗаполнено(ТекущиеДанные.ИсточникПолученияПолуфабриката) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ИсточникПолученияПолуфабриката);
	ИначеЕсли ТекущиеДанные.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
			И ЗначениеЗаполнено(ТекущиеДанные.СпецификацияРемонта) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СпецификацияРемонта);
	КонецЕсли;
//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПрименениеМатериалаРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастройкиПримененияМатериала(ТекущиеДанные);
//-- НЕ УТКА

	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПрименениеМатериалаРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные.ПрименениеМатериала = "";
	
	ТекущиеДанные.Вероятность = 0;
	ТекущиеДанные.Альтернативный = Ложь;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(ТекущиеДанные);
//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("Трудозатраты", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ОчиститьНастройкиОтбораПоСвойствам(
		Элементы.Трудозатраты,
		Элементы.Трудозатраты.ВыделенныеСтроки,
		Объект.ОтборПоСвойствам);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.Трудозатраты.ТекущиеДанные;
		
		КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
		
		СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСОтборомПоСвойствам(
			СтрокаТабличнойЧасти,
			КлючСвязиИсточника,
			Объект.ОтборПоСвойствам);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыСписок

&НаКлиенте
Процедура ЭтапыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьСкопироватьИзменитьЭтапПроизводства(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если СтатусЗаписанногоОбъекта = СтатусДействующейСпецификации Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		ДобавитьСкопироватьИзменитьЭтапПроизводства(Элементы.ЭтапыСписок.ТекущаяСтрока, Истина);
	Иначе
		ДобавитьСкопироватьИзменитьЭтапПроизводства();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ДобавитьСкопироватьИзменитьЭтапПроизводства(Элементы.ЭтапыСписок.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыСписокПередУдалением(Элемент, Отказ)
	
	Если СтатусЗаписанногоОбъекта = СтатусДействующейСпецификации Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыСписокПослеУдаления(Элемент)
	
	Оповестить("Запись_ЭтапыПроизводства");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Основное

&НаКлиенте
Процедура КомандаОткрытьСпецификацииИзделия(Команда)
	
	//++ НЕ УТКА
	Номенклатура = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуПрименениеНоменклатурыВПроизводстве(Номенклатура);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоМаршрутнымКартамЭтапов(Команда)
	
	//++ НЕ УТКА
	
	ТекстВопроса = НСтр("ru = 'Заполнить спецификацию по маршрутным картам этапов?';
						|en = 'Fill in the BOR according to the operations sheets of stages?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоМаршрутнымКартамЭтаповЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	Если НЕ ДоступностьРеквизитов Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикУстановитьСтатусВРазработке", ЭтотОбъект);
		ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.РазблокированиеРеквизитов", 
								Новый Структура("Объект", Объект.Ссылка),,,,,
								ОписаниеОповещения,
								РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыта(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Закрыта"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнениеОсновногоИзделия() И ПроверитьЗаполнениеОбъекта() Тогда
		ТекстПредупреждения = НСтр("ru = 'Спецификацию можно сделать действующей.';
									|en = 'Bill of materials can be made valid.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Спецификация не может быть действующей.
										|Необходимо заполнить указанные реквизиты.';
										|en = 'Bill of materials cannot be valid. 
										|Fill in the specified attributes.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстПредупреждения,, НСтр("ru = 'Проверка спецификации';
														|en = 'Check specification '"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодДействия(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала = Объект.НачалоДействия;
	Диалог.Период.ДатаОкончания = Объект.КонецДействия;
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьПериодДействияЗавершение", 
		ЭтотОбъект,
		Новый Структура());
	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодДействияЗавершение(Период, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(Период) <> Тип("СтандартныйПериод") Тогда
		Возврат;
	КонецЕсли;
	Объект.НачалоДействия = Период.ДатаНачала;
	Объект.КонецДействия = Период.ДатаОкончания;
	
	ЭтаФорма.Модифицированность = Истина;
	ЗаполнитьПредставлениеСтатусаСпецификации();
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделия_НастроитьПодборНоменклатуры(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Выходные изделия"".';
								|en = 'Line of the ""Finished products"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВыходныеИзделия", "Объект");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеОсновногоИзделия() Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтаФорма,
							"ВыходныеИзделия",
							СоответствиеСвойств, 
							Номенклатура,
							НСтр("ru = 'Указывается в спецификации';
								|en = 'Specified in specification'"),
							НЕ ДоступностьРеквизитов);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Выходные изделия"".';
								|en = 'Line of the ""Finished products"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВыходныеИзделия", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ВыходныеИзделия");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходы_НастроитьПодборНоменклатуры(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Побочный и промежуточный выход"".';
								|en = 'Line of the ""Side and intermediate product"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВозвратныеОтходы", "Объект");
		
		Возврат;
	КонецЕсли;
	
	Номенклатура = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтаФорма,
							"ВозвратныеОтходы",
							СоответствиеСвойств, 
							Номенклатура,
							НСтр("ru = 'Указывается в спецификации';
								|en = 'Specified in specification'"),
							НЕ ДоступностьРеквизитов);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Побочный и промежуточный выход"".';
								|en = 'Line of the ""Side and intermediate product"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ВозвратныеОтходы", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "ВозвратныеОтходы");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область МатериалыИУслуги

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.МатериалыИУслуги;
	ДанныеТаблицы = Объект.МатериалыИУслуги;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРазрешениеНаЗамену(Команда)
	
	//++ НЕ УТКА
	
	Номенклатура = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.МатериалыИУслуги.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Материалы = Новый Массив;
	
	Для каждого ЭлКоллекции из Элементы.МатериалыИУслуги.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.МатериалыИУслуги.ДанныеСтроки(ЭлКоллекции);
		
		Если ДанныеСтроки.СпособАвтовыбораХарактеристики <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ")
			ИЛИ ДанныеСтроки.СпособАвтовыбораНоменклатуры <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ") Тогда
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если ДанныеСтроки.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			И ДанныеСтроки.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
		СтруктураМатериала = Новый Структура;
		
		СтруктураМатериала.Вставить("ПрименениеМатериала", Строка(ДанныеСтроки.НомерСтроки) + ": " + ДанныеСтроки.ПрименениеМатериала);
		СтруктураМатериала.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		СтруктураМатериала.Вставить("Характеристика", ДанныеСтроки.Характеристика);
		СтруктураМатериала.Вставить("КоличествоУпаковок", ДанныеСтроки.КоличествоУпаковок);
		СтруктураМатериала.Вставить("Количество", ДанныеСтроки.Количество);
		СтруктураМатериала.Вставить("Упаковка", ДанныеСтроки.Упаковка);
		СтруктураМатериала.Вставить("КлючСвязиСпецификация", ДанныеСтроки.КлючСвязи);
		
		Материалы.Добавить(СтруктураМатериала);
		
	КонецЦикла;
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Выберите строки (товар, тара), для которых не используется автовыбор.';
								|en = 'Select lines (goods, package) for which automatic selection is not used.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
		
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Спецификация", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Материалы", Материалы);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.РазрешениеНаЗаменуМатериалов.ФормаОбъекта", ПараметрыФормы, , Истина);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_НастроитьПодборНоменклатуры(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".';
								|en = 'Row of the ""Materials and works"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		Возврат;
	КонецЕсли;
	
	Номенклатура = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойств = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.СоответствиеСвойств,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаСоответствияСвойств());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатуры(
							ЭтаФорма,
							"МатериалыИУслуги",
							СоответствиеСвойств, 
							Номенклатура,
							НСтр("ru = 'Указывается в спецификации';
								|en = 'Specified in specification'"),
							НЕ ДоступностьРеквизитов);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".';
								|en = 'Row of the ""Materials and works"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "МатериалыИУслуги");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПодборМатериалов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтаФорма, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслуги_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("МатериалыИУслуги");

КонецПроцедуры

#КонецОбласти

#Область Трудозатраты

&НаКлиенте
Процедура Трудозатраты_НастройкаОтбораПоСвойствамИРасчетаПоФормулам(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Трудозатраты"".';
								|en = 'Line of the ""Labor costs"" table is not selected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Трудозатраты", "Объект");
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, "Трудозатраты");
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМеханизмы

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УниверсальныеМеханизмы

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(Знач ИмяТЧ, Знач ПутьКДанным = "")

	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы[ИмяТЧ].ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ, ПутьКДанным);
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(Знач ИмяТЧ, Знач ПутьКДанным = "")
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, Объект[ИмяТЧ]);
	Иначе
		КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, Объект[ПутьКДанным]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(Знач ИмяТЧ, Знач ПутьКДанным = "")
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		Приемник = Объект[ИмяТЧ];
	Иначе
		Приемник = Объект[ПутьКДанным]
	КонецЕсли;
	
	КоличествоСтрокДоВставки = Приемник.Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ, ПутьКДанным);
	
	КоличествоВставленных = Приемник.Количество() - КоличествоСтрокДоВставки;
	
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ, ПутьКДанным = "")
	
	Перем СоставСтрок, ПараметрыОтбора;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		Приемник = Объект[ИмяТЧ];
	Иначе
		Приемник = Объект[ПутьКДанным]
	КонецЕсли;
	
	Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВыходныеИзделия" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "МатериалыИУслуги" ИЛИ ИмяТЧ = "ВозвратныеОтходы" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции";
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		СоставСтрок = "ВидРабот,Количество,СтатьяКалькуляции";
	КонецЕсли;
	
	ПодборТоваров = ИмяТЧ <> "Трудозатраты";
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если ПодборТоваров Тогда
		
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВыходныеИзделия" Тогда
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		
	КонецЕсли;
	
	СтрокиИзБуфера = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	Для каждого СтрокаИзБуфера Из СтрокиИзБуфера Цикл
		
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзБуфера, СоставСтрок);
		
		Если ПодборТоваров Тогда
			
			Если ИмяТЧ = "МатериалыИУслуги" Тогда
				ПриВводеНовойСтрокиМатериалов(ЭтаФорма, НоваяСтрока, Истина);
			ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
				НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
				УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(НоваяСтрока);
			ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
				НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, РеквизитыДоступны)
	
	Форма.Элементы.Продукция_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюПродукция_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.ВыходныеИзделия_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюВыходныеИзделия_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.ВозвратныеОтходы_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюВозвратныеОтходы_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.МатериалыИУслуги_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюМатериалыИУслуги_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
	Форма.Элементы.Трудозатраты_ВставитьСтроки.Доступность = РеквизитыДоступны;
	Форма.Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.Доступность = РеквизитыДоступны;
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураПроизводственногоПроцесса

&НаКлиенте
Функция ПроизводственныйПроцессТребуетсяВыполнитьОтложеннуюИнициализацию()
	
	Если ОписаниеПартииВыпуска = Неопределено Тогда
		Возврат ДоступноОписаниеПартииВыпуска;
	КонецЕсли;
	
	Если (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
			И Объект.ИспользоватьНесколькоВыходныхИзделий) <> ОписаниеПартииВыпуска.МножественныйВыпуск Тогда
			
		Возврат Истина;
	КонецЕсли;
	
	ДанныеОсновногоИзделия = УправлениеДаннымиОбИзделияхКлиентСервер.ДанныеОсновногоИзделияСпецификации(Объект);
	
	Для каждого КлючИЗначение Из ДанныеОсновногоИзделия Цикл
		
		Если ДанныеОсновногоИзделия[КлючИЗначение.Ключ] <> ОписаниеПартииВыпуска[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПроизводственныйПроцессВыполнитьОтложеннуюИнициализацию()
	
	ЗаполнитьОписаниеПартииВыпуска();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОписаниеПартииВыпуска,ВыпускПроизвольнымиПорциями");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтруктурыПроизводственногоПроцесса()
	
	Если Не Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		СписокТЧ = Новый Массив;
		СписокТЧ.Добавить("ВыходныеИзделия");
		СписокТЧ.Добавить("ВозвратныеОтходы");
		СписокТЧ.Добавить("МатериалыИУслуги");
		СписокТЧ.Добавить("Трудозатраты");
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			Для каждого Строка Из Объект[ИмяТЧ] Цикл
				Строка.ЭтапРедактирование = Неопределено;
			КонецЦикла;
		КонецЦикла;
		Для каждого Строка Из Объект.МатериалыИУслуги Цикл
			Если Строка.ПроизводитсяВПроцессе Тогда
				Если Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
					ИЛИ ЗначениеЗаполнено(Строка.ПланироватьНеРанее) Тогда
					ЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка);
					ЗаполнитьСтатьюКалькуляцииПоУмолчанию(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьСлужебныеРеквизиты();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаПроизводственногоПроцесса()
	
	// Сохраним основное изделие
	ОсновноеИзделие = ОсновноеИзделиеСпецификацииСтруктурой(ЭтаФорма);
	
	// Очистим реквизиты формы / объекта
	ОчиститьНеиспользуемыеДанныеПоТипуПроизводства();
	
	// Загрузим сохраненное основное изделие
	ОбработатьИзменениеДанныхОсновногоИзделия(ЭтаФорма, ОсновноеИзделие);
	
	// Заполним служебные реквизиты
	ЗаполнитьСлужебныеРеквизиты();
	
	// Настроим элементы формы
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ОчиститьНеиспользуемыеДанныеПоТипуПроизводства()
	
	СписокРеквизитов = СписокРеквизитовФормыОсновноеИзделиеСпецификации();
	
	Для каждого ИмяРеквизита Из СписокРеквизитов Цикл
		ЭтаФорма["ОсновноеИзделие" + ИмяРеквизита] = Неопределено;
	КонецЦикла;
	
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		
		СписокСтрок = Объект.СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", Строка.КлючСвязи));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			Объект.СоответствиеСвойств.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		СписокСтрок = Объект.ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", Строка.КлючСвязи));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			Объект.ОтборПоСвойствам.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	Объект.ВыходныеИзделия.Очистить();
	
	Справочники.РесурсныеСпецификации.ОчиститьНеиспользуемыеДанныеПоТипуПроизводства(Объект);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеЭтапа()
	
	Если Не Объект.МногоэтапныйПроизводственныйПроцесс Тогда
	
		Если ЗначениеЗаполнено(ДанныеПервогоЭтапа.Ссылка) Тогда
			
			ПредставлениеЭтапа = СтрШаблон(НСтр("ru = 'Этап производства: %1';
												|en = 'Production stage: %1'"), ДанныеПервогоЭтапа.Наименование);
			
			Если ДанныеПервогоЭтапа.ПроизводствоНаСтороне Тогда
				
				ПредставлениеЭтапа = ПредставлениеЭтапа + ", " + НСтр("ru = 'производство на стороне';
																		|en = 'production by third party'");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеПервогоЭтапа.Подразделение) Тогда
				
				ПредставлениеЭтапа = ПредставлениеЭтапа
					+ " ("
					+ ДанныеПервогоЭтапа.Подразделение
					+ ")";
				
			КонецЕсли;
			
		Иначе
			
			ПредставлениеЭтапа = НСтр("ru = 'Создать этап производства';
										|en = 'Create production stage'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВладельцуВСпискеЭтапов()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтапыСписок, 
		"Владелец", 
		Объект.Ссылка, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкопироватьИзменитьЭтапПроизводства(СсылкаНаЭтап = Неопределено, Копирование = Ложь)
	
	Если ТребуетсяЗаписатьСпецификациюПередДобавлениемИзменениемЭтапов() Тогда
		
		Если СсылкаНаЭтап <> Неопределено Тогда
			
			ТекстВопроса = НСтр("ru = 'Редактирование этапа возможно только после записи спецификации.
			|Записать и продолжить?';
			|en = 'You can edit the stage only after recording BOR.
			|Record and continue?'");
			
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Ввод этапов возможен только после записи спецификации.
			|Записать и продолжить?';
			|en = 'You can enter steps only after writing BOM. 
			|Write and continue?'");
			
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСкопироватьИзменитьЭтапПроизводстваЗавершение",
			ЭтаФорма,
			Новый Структура("Ссылка, Копирование", СсылкаНаЭтап, Копирование));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуЭтапаПроизводства(СсылкаНаЭтап, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкопироватьИзменитьЭтапПроизводстваЗавершение(РезультатВопроса, Параметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		
		ОткрытьФормуЭтапаПроизводства(Параметры.Ссылка, Параметры.Копирование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЭтапаПроизводства(СсылкаНаЭтап, Копирование = Ложь)

	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(СсылкаНаЭтап) Тогда
		Если Копирование Тогда
			ПараметрыФормы.Вставить("ЗначениеКопирования", СсылкаНаЭтап); // копирование существующего
		Иначе
			ПараметрыФормы.Вставить("Ключ", СсылкаНаЭтап); // открытие существующего
		КонецЕсли;
	Иначе
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка)); // создание нового
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ОписаниеПартииВыпуска", ОписаниеПартииВыпуска);
	
	ОткрытьФорму("Справочник.ЭтапыПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяОчиститьРеквизитыПриИзмененииОписанияПартииВыпуска(СписокРеквизитов)
	
	Если НЕ Объект.ВыпускПроизвольнымиПорциями Тогда
		
		Если Объект.МинимальнаяПартияВыпуска <> 0 Тогда
			СписокРеквизитов.Добавить(НСтр("ru = '""Минимальный выпуск""';
											|en = '""Minimum release""'"));
		КонецЕсли;
		
		Если Объект.ОптимальнаяПартияВыпуска <> 0 Тогда
			СписокРеквизитов.Добавить(НСтр("ru = '""Оптимальный выпуск""';
											|en = '""Optimal release""'"));
		КонецЕсли;
		
		Если Объект.ДопустимоеПревышениеОптимальнойПартииВыпуска <> 0 Тогда
			СписокРеквизитов.Добавить(НСтр("ru = '""Допустимое превышение оптимальной партии выпуска""';
											|en = '""Permissible excess of the optimal release batch""'"));
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ТребуетсяОчиститьРеквизитОдновременноПроизводимоеКоличество(Объект.Ссылка) Тогда
			СписокРеквизитов.Добавить(НСтр("ru = '""Одновременно производимое количество""';
											|en = '""Simultaneously manufactured quantity""'"));
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Возврат СписокРеквизитов.Количество() > 0;
	
КонецФункции

//++ НЕ УТКА
&НаСервереБезКонтекста
Функция ТребуетсяОчиститьРеквизитОдновременноПроизводимоеКоличество(Спецификация)
	
	Если Спецификация.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокЭтапов = Справочники.ЭтапыПроизводства.СписокЭтаповДляКоторыхЗаданоОдновременноПроизводимоеКоличество(Спецификация);
	Возврат СписокЭтапов.Количество() > 0;
	
КонецФункции
//-- НЕ УТКА

&НаКлиенте
Процедура ОчиститьРеквизитыПриИзмененииОписанияПартииВыпуска(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ВыпускПроизвольнымиПорциями = ВыпускПроизвольнымиПорциямиДоИзменения;
		Возврат;
	КонецЕсли;
	ОчиститьРеквизитыПриИзмененииОписанияПартииВыпускаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизитыПриИзмененииОписанияПартииВыпускаНаСервере()
	
	//++ НЕ УТКА
	ИмяПроцедуры = "Справочники.ЭтапыПроизводства.ОчиститьРеквизитОдновременноПроизводимоеКоличество";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Объект.Ссылка, ПараметрыВыполнения);
	//-- НЕ УТКА
	
	Если Объект.МинимальнаяПартияВыпуска <> 0 Тогда
		Объект.МинимальнаяПартияВыпуска = 0;
	КонецЕсли;
	
	Если Объект.ОптимальнаяПартияВыпуска <> 0 Тогда
		Объект.ОптимальнаяПартияВыпуска = 0;
	КонецЕсли;
	
	Если Объект.ДопустимоеПревышениеОптимальнойПартииВыпуска <> 0 Тогда
		Объект.ДопустимоеПревышениеОптимальнойПартииВыпуска = 0;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыпускПроизвольнымиПорциями,МинимальнаяПартияВыпуска,ОптимальнаяПартияВыпуска");
	
КонецПроцедуры

#КонецОбласти

#Область СпособыРаспределенияЗатрат

&НаСервере
Процедура ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия()
	
	ПараметрыРаспределенияЗатратСтруктура = Справочники.РесурсныеСпецификации.ПараметрыРаспределенияЗатрат(Объект);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

#КонецОбласти

#Область ОсновноеИзделие

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуетсяРежимРедактированияОсновногоИзделия(Форма)
	
//++ НЕ УТКА
	Если (Форма.Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
			И Форма.Объект.ИспользоватьНесколькоВыходныхИзделий ИЛИ Форма.ИспользуетсяПроизводство21)Тогда
//-- НЕ УТКА
		Возврат Ложь;
//++ НЕ УТКА
	Иначе
		Возврат Истина;
	КонецЕсли;
//-- НЕ УТКА
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеОсновногоИзделияСпецификации()
	
	Если Не ИспользуетсяРежимРедактированияОсновногоИзделия(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
		
		СписокРеквизитов = СписокРеквизитовОсновноеВыходноеИзделие();
		
		Если Объект.ВыходныеИзделия.Количество() <> 0 Тогда
			
			Для каждого ИмяРеквизита Из СписокРеквизитов Цикл
				ЭтаФорма["ОсновноеИзделие" + ИмяРеквизита] = Объект.ВыходныеИзделия[0][ИмяРеквизита];
			КонецЦикла;
			
		Иначе
			
			Для каждого ИмяРеквизита Из СписокРеквизитов Цикл
				ЭтаФорма["ОсновноеИзделие" + ИмяРеквизита] = Неопределено;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		СписокРеквизитов = СписокРеквизитовОсновноеВходящееИзделие();
		
		Для каждого ИмяРеквизита Из СписокРеквизитов Цикл
			ЭтаФорма["ОсновноеИзделие" + ИмяРеквизита] = Объект[ИмяРеквизита + "ВходящегоИзделия"];
		КонецЦикла;
		
	КонецЕсли;
	
	ОсновноеИзделиеХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(ОсновноеИзделиеНоменклатура);
	ОбновитьИнформациюПоОсновномуИзделиюСпецификации();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокРеквизитовОсновноеВыходноеИзделие()
	
	Массив = Новый Массив;
	Массив.Добавить("Номенклатура");
	Массив.Добавить("Характеристика");
	Массив.Добавить("Упаковка");
	Массив.Добавить("КоличествоУпаковок");
	Массив.Добавить("Количество");
	Массив.Добавить("ПроцентБрака");
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокРеквизитовОсновноеВходящееИзделие()
	
	Массив = Новый Массив;
	Массив.Добавить("Номенклатура");
	Массив.Добавить("Характеристика");
	Массив.Добавить("Упаковка");
	Массив.Добавить("КоличествоУпаковок");
	Массив.Добавить("Количество");
	Возврат Массив;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокРеквизитовФормыОсновноеИзделиеСпецификации()
	
	Массив = Новый Массив;
	Массив.Добавить("Номенклатура");
	Массив.Добавить("Характеристика");
	Массив.Добавить("ХарактеристикиИспользуются");
	Массив.Добавить("Упаковка");
	Массив.Добавить("КоличествоУпаковок");
	Массив.Добавить("Количество");
	Массив.Добавить("ПроцентБрака");
	Возврат Массив;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОсновноеИзделиеСпецификацииСтруктурой(Форма)
	
	СтруктураСтроки = Новый Структура();
	
	СписокРеквизитов = СписокРеквизитовФормыОсновноеИзделиеСпецификации();
	
	Для каждого ИмяРеквизита Из СписокРеквизитов Цикл
		СтруктураСтроки.Вставить(ИмяРеквизита,  Форма["ОсновноеИзделие" + ИмяРеквизита]);
	КонецЦикла;
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеДанныхОсновногоИзделия(Форма, СтруктураСтроки = Неопределено)
	
	Если СтруктураСтроки <> Неопределено Тогда
		Для каждого КлючИЗначение Из СтруктураСтроки Цикл
			Форма["ОсновноеИзделие" + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОбъектаПоДаннымОсновногоИзделия(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыОбъектаПоДаннымОсновногоИзделия(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоСборка   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ЭтоРемонт   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"));
	ЭтоРазборка = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка"));
	
	Если (ЭтоСборка ИЛИ ЭтоРемонт) Тогда
		
		СписокРеквизитов = СписокРеквизитовОсновноеВыходноеИзделие();
		
		Если Объект.ВыходныеИзделия.Количество() <> 0 Тогда
			ДанныеСтроки = Объект.ВыходныеИзделия[0];
		Иначе
			ДанныеСтроки = Объект.ВыходныеИзделия.Добавить();
			ДанныеСтроки.КлючСвязи = Новый УникальныйИдентификатор;
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(ДанныеСтроки);
		КонецЕсли;
		
		Для каждого ИмяРеквизита Из СписокРеквизитов Цикл
			ДанныеСтроки[ИмяРеквизита] = Форма["ОсновноеИзделие" + ИмяРеквизита];
		КонецЦикла;
	
	КонецЕсли;
	
	Если (ЭтоРемонт ИЛИ ЭтоРазборка) Тогда
		
		СписокРеквизитов = СписокРеквизитовОсновноеВходящееИзделие();
		
		Для каждого ИмяРеквизита Из СписокРеквизитов Цикл
			Объект[ИмяРеквизита + "ВходящегоИзделия"] = Форма["ОсновноеИзделие" + ИмяРеквизита];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоОсновномуИзделиюСпецификации()
	
	Если ОсновноеИзделиеХарактеристикиИспользуются Тогда
		Элементы.ОсновноеИзделиеХарактеристика.Доступность = Истина;
		Элементы.ОсновноеИзделиеХарактеристика.ПодсказкаВвода = НСтр("ru = '<любая характеристика>';
																	|en = '<any characteristic>'");
	Иначе
		Элементы.ОсновноеИзделиеХарактеристика.Доступность = Ложь;
		Элементы.ОсновноеИзделиеХарактеристика.ПодсказкаВвода = НСтр("ru = '<характеристики не используются>';
																	|en = '<characteristics are not used>'");
	КонецЕсли;
	
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(ОсновноеИзделиеНоменклатура, Элементы.ОсновноеИзделиеУпаковка);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеОсновногоИзделия()
	
	ЕстьОшибки = Ложь;
	
	Если ИспользуетсяРежимРедактированияОсновногоИзделия(ЭтаФорма) Тогда
		
		Если Не ЗначениеЗаполнено(ОсновноеИзделиеНоменклатура) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номенклатура';
																											|en = 'Products and services'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОсновноеИзделиеНоменклатура",, ЕстьОшибки);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОсновноеИзделиеКоличество) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Количество';
																											|en = 'Quantity'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОсновноеИзделиеКоличествоУпаковок",, ЕстьОшибки);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область ВыходныеИзделия

&НаКлиенте
Процедура ПриИзмененииНоменклатурыВСтрокеВыходныхИзделий(ТекущиеДанные)
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(ТекущиеДанные, Объект);
	
	ОчиститьНастройкуОбработатьПоСпецификации(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область МатериалыИУслуги

#Область СпособПолученияМатериала

//++ НЕ УТКА

&НаКлиенте
Процедура ОбработкаВыбораСпособаПолученияМатериала(ДанныеСтроки, ВыбранноеЗначение)
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	ЗаполнитьСлужебныеРеквизитыВСтрокеМатериалыИУслуги(ДанныеСтроки);
	
	ПроверитьЗаполнитьСтатьюКалькуляцииПоУмолчанию(ДанныеСтроки);
	ПроверитьДобавитьВыпускПромежуточногоПолуфабриката(ДанныеСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка)
	
	Если (Строка.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции")
			И Строка.ПроизводитсяВПроцессе
			И Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
		
		ИЛИ Строка.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве")
			И Строка.ПроизводитсяВПроцессе
		) Тогда
	
		ЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка);
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка)
	
	Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать");
	
	Строка.ПроизводитсяВПроцессе = Ложь;
	
	Строка.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
	Строка.ИсточникПолученияПолуфабрикатаПредставление = "";
	
	Строка.ПланироватьНеРанее = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
	Строка.ПланироватьНеРанееПредставление = "";
	
	Строка.СпецификацияРемонта = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
	Строка.СпецификацияРемонтаПредставление = "";
	
	Строка.СпособПолученияМатериалаРедактирование = НСтр("ru = 'Обеспечивать';
														|en = 'Supply'"); // ЗаполнитьПредставлениеСпособаПолученияМатериала()
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСпособаПолученияМатериала(Строка)
	
	Результат = "";
	
//++ НЕ УТКА
	Если Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации") Тогда
		
		Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) ИЛИ ИспользуетсяПроизводство21 Тогда
			
			Результат = СтрШаблон(НСтр("ru = 'Произвести по спецификации ""%1""';
										|en = 'Produce by the ""%1"" BOM'"), Строка.ИсточникПолученияПолуфабрикатаПредставление);
			
		Иначе
			
			Результат = НСтр("ru = 'Произвести по основной спецификации';
							|en = 'Produce by main BOM'");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ПланироватьНеРанее) Тогда
			
			Результат = Результат + СтрШаблон(НСтр("ru = ', планировать после этапа ""%1""';
													|en = ', schedule after the ""%1"" step'"), Строка.ПланироватьНеРанееПредставление);
			
		КонецЕсли;
		
	ИначеЕсли Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе") Тогда
		
		Если ЗначениеЗаполнено(Строка.СпецификацияРемонта) Тогда
			
			Результат = СтрШаблон(НСтр("ru = 'Ремонт по спецификации ""%1""';
										|en = 'Repair according to the ""%1"" BOM'"), Строка.СпецификацияРемонтаПредставление);
			
		Иначе
			
			Результат = СтрШаблон(НСтр("ru = 'Производится на этапе ""%1""';
										|en = 'Produced on stage ""%1""'"), Строка.ИсточникПолученияПолуфабрикатаПредставление);
			
		КонецЕсли;
		
	ИначеЕсли Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно") Тогда
		
		Результат = НСтр("ru = 'Обеспечивать обособленно';
						|en = 'Provide on pegging basis'");
		
	Иначе
		
		Результат = НСтр("ru = 'Обеспечивать';
						|en = 'Supply'");
		
	КонецЕсли;
//-- НЕ УТКА
	Строка.СпособПолученияМатериалаРедактирование = Результат;
	
КонецПроцедуры

#КонецОбласти

#Область СтатьяКалькуляции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтатьюКалькуляцииПоУмолчанию(ДанныеСтроки)
	
	Если УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки) Тогда
		
		ДанныеСтроки.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе");
		
	Иначе
		
		ДанныеСтроки.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьЗаполнитьСтатьюКалькуляцииПоУмолчанию(ДанныеСтроки)
	
	Если (ДанныеСтроки.СтатьяКалькуляции <> ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе")
			И УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки)
			
		ИЛИ ДанныеСтроки.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе")
			И НЕ УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки))
			
		Тогда
		ЗаполнитьСтатьюКалькуляцииПоУмолчанию(ДанныеСтроки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ПриВводеНовойСтрокиМатериалов(Форма, СтрокаТабличнойЧасти, Копирование = Ложь)
	
	КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
	СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(
			СтрокаТабличнойЧасти,
			КлючСвязиИсточника,
			Форма.Объект.СоответствиеСвойств);
			
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСОтборомПоСвойствам(
			СтрокаТабличнойЧасти,
			КлючСвязиИсточника,
			Форма.Объект.ОтборПоСвойствам);
	
	Если Копирование Тогда
		ПроверитьЗаполнитьСтатьюКалькуляцииПоУмолчанию(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Форма.ДанныеПервогоЭтапа, "ЭтоПервыйЭтап,ПроизводствоНаСтороне");
	ЗаполнитьСпособПолученияМатериалаПоУмолчанию(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатурыВСтрокеМатериалов(ТекущиеДанные)
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеСАвтовыбором(
		ТекущиеДанные,
		Объект);
		
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеСАвтовыбором(
		ТекущиеДанные,
		Объект);

	ЗаполнитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные);
	ЗаполнитьСтатьюКалькуляцииПоУмолчанию(ТекущиеДанные);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"МатериалыИУслуги", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЭтапаМатериалыИУслуги(Идентификаторы)
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги(Идентификаторы);
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		
		Строка = Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
		
		Если Не Строка.ПроизводитсяВПроцессе Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ЭтоПервыйЭтап И Строка.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
			ИЛИ Строка.ЭтоПервыйЭтап И ЗначениеЗаполнено(Строка.ПланироватьНеРанее)
			ИЛИ Строка.ПроизводствоНаСтороне И Не ИспользуетсяПроизводство22 Тогда
			ЗаполнитьСпособПолученияМатериалаПоУмолчанию(Строка);
			ЗаполнитьСтатьюКалькуляцииПоУмолчанию(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//++ НЕ УТКА

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

&НаКлиенте
Процедура ОбработкаВыбораНастройкаАвтовыбораНоменклатуры(ИмяТЧ, ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СпособАвтовыбораНоменклатуры = ТекущиеДанные.СпособАвтовыбораНоменклатуры;
	
	Если УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтовыборНоменклатурыЗавершение(
			ВыбранноеЗначение,
			ТекущиеДанные,
			Объект.СоответствиеСвойств) Тогда
			
		СтруктураДействий = Новый Структура;
		
		Если СпособАвтовыбораНоменклатуры <> ТекущиеДанные.СпособАвтовыбораНоменклатуры Тогда
			
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
			Если ИмяТЧ = "МатериалыИУслуги" Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
				ПроверитьЗаполнитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные);
			ИначеЕсли ИмяТЧ = "ВыходныеИзделия" Тогда
				ОчиститьНастройкуОбработатьПоСпецификации(ТекущиеДанные);
			ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
				ОчиститьНастройкуОбработатьПоСпецификации(ТекущиеДанные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
			РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		Иначе
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройкаОтбораПоСвойствамИРасчетаПоФормулам(ИмяТЧ, ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормуламЗавершение(
		ВыбранноеЗначение,
		ТекущиеДанные,
		Объект.ОтборПоСвойствам) Тогда
		
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
					И ВыбранноеЗначение.Свойство("АлгоритмРасчетаКоличества")
					И НЕ ПустаяСтрока(ВыбранноеЗначение.АлгоритмРасчетаКоличества) Тогда
					
				ТекущиеДанные.Количество = 0;
				ТекущиеДанные.КоличествоУпаковок = 0;
				Если Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
					ТекущиеДанные.ДоляСтоимости = 0;
				КонецЕсли;
				
			КонецЕсли;
			РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтбораПоСвойствамИРасчетаПоФормулам(ТекущиеДанные, ИмяТЧ)
	
	Номенклатура = ПроверитьПолучитьОсновноеИзделиеСпецификации();
	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ);

	ОтборПоСвойствам = УправлениеДаннымиОбИзделияхКлиент.РеквизитыНастроекПоСтрокеВМассивСтруктур(
		ТекущиеДанные,
		Объект.ОтборПоСвойствам,
		УправлениеДаннымиОбИзделияхКлиентСервер.РеквизитыНастройкаОтбораПоСвойствам());
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьОтборПоСвойствамИРасчетПоФормулам(
						ЭтаФорма,
						ИмяТЧ,
						ОтборПоСвойствам,
						Номенклатура,
						НЕ ДоступностьРеквизитов,
						,
						АдресВХранилище);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеДляРасчетаПоФормуламВХранилище(ИмяТЧ)
	
	ДанныеДляРасчета = Справочники.РесурсныеСпецификации.ВыгрузитьДанныеДляКонструктораФормул(
		Объект,
		ИмяТЧ,
		Объект[ИмяТЧ].НайтиПоИдентификатору(Элементы[ИмяТЧ].ТекущаяСтрока));
	
	Результат = ПоместитьВоВременноеХранилище(ДанныеДляРасчета, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	СтатусДействующейСпецификации = Перечисления.СтатусыСпецификаций.Действует;
	СтатусСпецификацииВРазработке = Перечисления.СтатусыСпецификаций.ВРазработке;
	
	ИспользоватьПараметризациюРесурсныхСпецификаций = 
		ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций");
	
	СтруктураПроизводственногоПроцесса = Число(Объект.МногоэтапныйПроизводственныйПроцесс);
	
	ИспользоватьНабор = Число(Объект.ИспользоватьНесколькоВыходныхИзделий);
	ПрочитатьДанныеОсновногоИзделияСпецификации();
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Справочники.РесурсныеСпецификации);
	Массив = Новый Массив;
	Массив.Добавить(Элементы.ВыходныеИзделияСпецификация);
	Массив.Добавить(Элементы.ВозвратныеОтходыСпецификация);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Массив, ПараметрыВыбораСпецификаций.Разборка);
	
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Справочники.РесурсныеСпецификации.ПараметрыРаспределенияЗатрат(Объект));
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "ВыходныеИзделия");
	ПродукцияКешТекущейСтруктура = Новый Структура(ВыходныеИзделияКешТекущейСтроки);
	ПродукцияКешТекущейСтроки = Новый ФиксированнаяСтруктура(ПродукцияКешТекущейСтруктура);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Стандартное оформление номенклатуры
	#Область СтандартноеОформление
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ПродукцияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВыходныеИзделияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВозвратныеОтходы.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыИУслугиНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.МатериалыИУслуги.Упаковка");
																   
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ПродукцияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
	
	УстановитьУсловноеОформлениеТабличныхЧастейСАвтовыбором();
	
	#КонецОбласти
	
	// Жирный шрифт для первой строки изделий
	#Область ЖирнымПерваяСтрока
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Продукция.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	#КонецОбласти

	// Текст <последний этап> или <первый этап>
	#Область ТекстПоследнийЭтапИлиПервыйЭтап
	
	// при разборке возможно несколько последних этапов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЭтапРедактирование.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЭтапРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ЭтапРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесколькоПоследнихЭтапов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.Разборка;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<последний этап>';
																|en = '<last stage>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыЭтапРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ЭтапРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесколькоПоследнихЭтапов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.Разборка;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<последний этап>';
																|en = '<last stage>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// при сборке возможно несколько первых этапов

	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиЭтапРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ЭтапРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесколькоПервыхЭтапов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первый этап>';
																|en = '<first stage>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыЭтапРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ЭтапРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесколькоПервыхЭтапов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первый этап>';
																|en = '<first stage>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти

	// Текст <любая характеристика>
	#Область ТекстЛюбаяХарактеристика
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияХарактеристика.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	Список.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	ОтборЭлемента.ПравоеЗначение = Список;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любая характеристика>';
																|en = '<any characteristic>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти

	// Требуется заполнить доли стоимости
	#Область ДолиСтоимости
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(ЭтаФорма, "Объект", "ВыходныеИзделия", "Продукция");
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(ЭтаФорма, "Объект", "ВыходныеИзделия", "ВыходныеИзделия");
	
	УстановитьУсловноеОформлениеПоляДоляСтоимостиВыходныхИзделий();
	
	#КонецОбласти
	
	// Запрет редактирования флага "Регистрировать серии"
	#Область СерииИспользуются
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияТребуетсяУказыватьСерии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиТребуетсяУказыватьСерии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
//++ НЕ УТКА

	// Запрет редактирования предопределенной статьи калькуляции
	#Область СтатьяКалькуляции_ПроизводитсяВПроцессе

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	// Доступность колонки "Спецификация" выходных изделий
	#Область ОбработатьПоСпецификации
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСпецификация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСпецификация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
//-- НЕ УТКА
	
//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтаФорма,
		"Объект",
		"ВыходныеИзделия",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтаФорма,
		"Объект",
		"ВозвратныеОтходы",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтаФорма,
		"Объект",
		"МатериалыИУслуги",
		"КоличествоУпаковок");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(
		ЭтаФорма,
		"Объект",
		"Трудозатраты",
		"Количество");
//-- НЕ УТКА
	
	УстановитьУсловноеОформлениеПоВерсииПодсистемыПроизводство()
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТабличныхЧастейСАвтовыбором()
	
//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтаФорма, "Объект", "ВыходныеИзделия");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтаФорма, "Объект", "ВозвратныеОтходы");
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(ЭтаФорма, "Объект", "МатериалыИУслуги");
	Возврат;
//-- НЕ УТКА

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВыходныеИзделияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
																			 "ВозвратныеОтходыХарактеристика",
																		     "Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
																			 "МатериалыИУслугиХарактеристика",
																		     "Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоВерсииПодсистемыПроизводство()
	
	// Оформление таблицы "Выходные изделия"
	#Область ВыходныеИзделия
	
	// В новой концепции управления производством выпуск продукции 
	// по рассчитываемой стоимости возможен только на последнем этапе
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЭтапРедактирование.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступноУказаниеЭтаповВВыходныхИзделиях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	// Оформление таблицы "Материалы и работы"
	#Область МатериалыИУслуги
	
	// если производство на стороне, то производство в процессе недоступно
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияМатериалаРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	// если номенклатура является набором, то редактирование вариантов обеспечения недоступно
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияМатериалаРедактирование.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоляДоляСтоимостиВыходныхИзделий()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимостиНедоступна.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДоляСтоимостиНедоступна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<недоступна>';
																|en = '<unavailable>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимостиНедоступна.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СпособРаспределенияЗатратНаВыходныеИзделия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДоляСтоимостиНедоступна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ЕстьОшибкиЗаполненияДолиСтоимости");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ЕстьОшибкиЗаполненияДолиСтоимости");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДоляСтоимостиНедоступна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСерверПовтИсп.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВыходныеИзделия, СтруктураДействий);
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвратныеОтходы, СтруктураДействий);
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги, СтруктураДействий);
	
//++ НЕ УТКА
	Если ИспользоватьПараметризациюРесурсныхСпецификаций Тогда
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.ВыходныеИзделия,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.ВозвратныеОтходы,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.МатериалыИУслуги,
			Истина,
			Истина,
			Объект.ОтборПоСвойствам);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
			Объект.Трудозатраты,
			Ложь,
			Истина,
			Объект.ОтборПоСвойствам);
		
	КонецЕсли;
//-- НЕ УТКА
	
	ДоступноОписаниеПартииВыпуска = УправлениеДаннымиОбИзделиях.ДоступноОписаниеПартииВыпуска();
	ЗаполнитьОписаниеПартииВыпуска();
	
	ЗаполнитьСлужебныеРеквизитыПроизводственногоПроцесса();
	
	ЗаполнитьСлужебныеРеквизитыВыходныеИзделия();
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();
	
	ЗаполнитьПредставлениеСтатусаСпецификации();
	
	РассчитатьДоступноУказаниеЭтаповВВыходныхИзделиях();
	РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтаФорма);
	
	ОбновитьИнформационнуюПанель();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	УправлениеПредприятием = Ложь;
//++ НЕ УТКА
	УправлениеПредприятием = Истина;
//-- НЕ УТКА
	
#Область УП_КА_21_22

	// Описание типа производственного процесса
	//  В КА и ERP, при использовании производства 2.1, выводиться заголовок в формате Продукция(N)
	ДоступноОписаниеТипаПроизводственногоПроцесса = УправлениеДаннымиОбИзделиях.ДоступноОписаниеТипаПроизводственногоПроцесса();
	Элементы.Наименование21.Видимость = Не ДоступноОписаниеТипаПроизводственногоПроцесса;
	Элементы.Наименование22.Видимость = ДоступноОписаниеТипаПроизводственногоПроцесса;
	Если ДоступноОписаниеТипаПроизводственногоПроцесса Тогда
		Элементы.ГруппаОсновное.Заголовок = НСтр("ru = 'Основное';
												|en = 'Main'");
		Элементы.ГруппаОсновноеИзделие.ОтображатьЗаголовок = Истина;
	Иначе
		Элементы.ГруппаОсновное.Заголовок = НСтр("ru = 'Продукция';
												|en = 'Products'");
		Элементы.ГруппаОсновноеИзделие.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	Если Не ДоступноОписаниеТипаПроизводственногоПроцесса
		И ПустаяСтрока(Элементы.ГруппаОсновное.ПутьКДаннымЗаголовка) Тогда
		Элементы.ГруппаОсновное.ПутьКДаннымЗаголовка = "Объект.ВыходныеИзделия.КоличествоСтрок";
	КонецЕсли;
	Элементы.ГруппаТипПроизводственногоПроцесса.Видимость = ДоступноОписаниеТипаПроизводственногоПроцесса;
	Если ДоступноОписаниеТипаПроизводственногоПроцесса Тогда
		ИсключаемыеТипы = Новый Массив;
		ИсключаемыеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций);
		ПроизводствоСервер.ЗаполнитьСписокТиповПроизводственногоПроцесса(Элементы.ТипПроизводственногоПроцесса, ИсключаемыеТипы);
	КонецЕсли;
	
	// Описание партии выпуска
	Элементы.ВыпускПроизвольнымиПорциями.Видимость = ДоступноОписаниеПартииВыпуска;
	Элементы.МинимальнаяПартияВыпуска.Видимость = ДоступноОписаниеПартииВыпуска;
	Элементы.ДопустимоеПревышениеОптимальнойПартииВыпуска.Видимость = ДоступноОписаниеПартииВыпуска;
	
	Элементы.ОптимальнаяПартияВыпуска.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство22;
	
	Элементы.ОграниченСрокПролеживанияВыходныхИзделий.Видимость    = УправлениеПредприятием И ИспользуетсяПроизводство22;
	Элементы.МаксимальныйСрокПролеживанияВыходныхИзделий.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство22;
	
	Элементы.ОптимальноеКоличествоПередачиМеждуЭтапами.Видимость = УправлениеПредприятием И НЕ ИспользуетсяПроизводство22;
	
	// Способ распределения затрат на выходные изделия
	Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость = (ИспользуетсяПроизводство22 И НЕ ИспользуетсяПроизводство21);
	
	// Разрешения на замену
	Элементы.МатериалыИУслугиВвестиРазрешениеНаЗамену.Видимость = УправлениеПредприятием;
	
	// Серии
	Элементы.ПродукцияТребуетсяУказыватьСерии.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство21;
	Элементы.МатериалыИУслугиТребуетсяУказыватьСерии.Видимость = УправлениеПредприятием И ИспользуетсяПроизводство21;
	
	// Подбор номенклатуры, расчет по формулам
	Элементы.МатериалыИУслугиНастроитьПодборНоменклатуры.Видимость                  = УправлениеПредприятием;
	Элементы.МатериалыИУслугиНастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = УправлениеПредприятием;
	
	Элементы.ТрудозатратыНастройкаОтбораПоСвойствамИРасчетаПоФормулам.Видимость = УправлениеПредприятием;
	
	// Способы получения материалов
	Элементы.МатериалыИУслугиСпособПолученияМатериалаРедактирование.Видимость = УправлениеПредприятием;
	
	// Применение материала
	ДоступноОписаниеВероятностиПримененияМатериалов = УправлениеДаннымиОбИзделиях.ДоступноОписаниеВероятностиПримененияМатериалов();
	Элементы.МатериалыИУслугиПрименениеМатериалаРедактирование.Видимость = ДоступноОписаниеВероятностиПримененияМатериалов;
	Элементы.МатериалыИУслугиПрименениеМатериала.Видимость               = НЕ ДоступноОписаниеВероятностиПримененияМатериалов;
	
	// Маршрутные карты
	Элементы.ГруппаПечатьМаршрутнойКарты.Видимость            = УправлениеПредприятием И ИспользуетсяПроизводство21;
	Элементы.ФормаЗаполнитьПоМаршрутнымКартамЭтапов.Видимость = УправлениеПредприятием;
	
#КонецОбласти
	
//++ НЕ УТКА
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.РазрешениеНаЗаменуМатериалов) Тогда
		Элементы.МатериалыИУслугиВвестиРазрешениеНаЗамену.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ПрименениеНоменклатурыВПроизводстве) Тогда
		Элементы.ФормаОткрытьСпецификацииИзделия.Видимость = Ложь;
		Элементы.ПродукцияОткрытьСпецификацииИзделия.Видимость = Ложь;
	КонецЕсли; 
//-- НЕ УТКА

	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьДоступностьКомандИзмененияСтатуса();
	
	Элементы.ГруппаДополнительно.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Описание);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	ЭтоСборка   = Истина;
	ЭтоРемонт   = Ложь;
	ЭтоРазборка = Ложь;
//++ НЕ УТКА
	ЭтоСборка   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка"));
	ЭтоРемонт   = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"));
	ЭтоРазборка = (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка"));
//-- НЕ УТКА
	
	ДоступностьРеквизитов = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.ВРазработке"));
	СпецификацияЗакрыта = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Закрыта"));
	
	ОписаниеПартииВыпуска = Форма.ОписаниеПартииВыпуска;
	
	// Настройка формы для многоэтапного производственного процесса
	Если СтруктураРеквизитов.Свойство("МногоэтапныйПроизводственныйПроцесс")
		ИЛИ Инициализация Тогда
		
		Элементы.ПродукцияЭтапРедактирование.Видимость        = Объект.МногоэтапныйПроизводственныйПроцесс;
		Элементы.ВыходныеИзделияЭтапРедактирование.Видимость  = Объект.МногоэтапныйПроизводственныйПроцесс;
		Элементы.ВозвратныеОтходыЭтапРедактирование.Видимость = Объект.МногоэтапныйПроизводственныйПроцесс;
		Элементы.МатериалыИУслугиЭтапРедактирование.Видимость = Объект.МногоэтапныйПроизводственныйПроцесс;
		Элементы.ТрудозатратыЭтапРедактирование.Видимость     = Объект.МногоэтапныйПроизводственныйПроцесс;
		
		Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
			Элементы.ОписаниеПроизводственногоПроцесса.ТекущаяСтраница = Элементы.СтраницаМногоэтапныйПроизводственныйПроцесс;
		Иначе
			Элементы.ОписаниеПроизводственногоПроцесса.ТекущаяСтраница = Элементы.СтраницаОдноэтапныйПроизводственныйПроцесс;
		КонецЕсли;
		
	КонецЕсли;
	
	// Настройка списка выбора вариантов описания ресурсных спецификаций
	Если СтруктураРеквизитов.Свойство("ОписаниеПартииВыпуска")
		ИЛИ Инициализация Тогда
		
		СписокВыбора = Элементы.ВыпускПроизвольнымиПорциями.СписокВыбора;
		СписокВыбора.Очистить();
		Если ОписаниеПартииВыпуска <> Неопределено
			И ОписаниеПартииВыпуска.КоличествоУпаковок > 0
			И Не ОписаниеПартииВыпуска.МножественныйВыпуск
			И Не ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия.Пустая()
			Тогда
			КоличествоПредставление = Формат(ОписаниеПартииВыпуска.КоличествоУпаковок, "ЧН=; ЧГ=");
			СписокВыбора.Добавить(Ложь).Представление = СтрШаблон(НСтр("ru = 'кратно %1 %2';
																		|en = 'multiple of %1 %2'"), КоличествоПредставление, ОписаниеПартииВыпуска.ЕдиницаИзмеренияИзделия);
		Иначе
			СписокВыбора.Добавить(Ложь).Представление = НСтр("ru = 'кратными партиями';
															|en = 'multiple batches'");
		КонецЕсли;
		СписокВыбора.Добавить(Истина).Представление = НСтр("ru = 'произвольными порциями';
															|en = 'in custom portions'");
		
	КонецЕсли;
	
	// Выпуск произвольными порциями
	Если СтруктураРеквизитов.Свойство("ВыпускПроизвольнымиПорциями")
		ИЛИ Инициализация Тогда
		
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
			Объект.ВыпускПроизвольнымиПорциями,
			Элементы.МинимальнаяПартияВыпуска);
		
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
			Объект.ВыпускПроизвольнымиПорциями,
			Элементы.ОптимальнаяПартияВыпуска);
			
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВводаКоличестваЕдиницПартий(
			Объект.ВыпускПроизвольнымиПорциями,
			Элементы.ДопустимоеПревышениеОптимальнойПартииВыпуска);
		
		Форма.ВыпускПроизвольнымиПорциямиДоИзменения = Объект.ВыпускПроизвольнымиПорциями;
		
	КонецЕсли;
	
	// Минимальная партия выпуска
	Если СтруктураРеквизитов.Свойство("МинимальнаяПартияВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ОписаниеПартииВыпуска")
		ИЛИ Инициализация Тогда
		
		ПодсказкаВвода = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
			Форма.ОписаниеПартииВыпуска,
			Объект.МинимальнаяПартияВыпуска);
		Элементы.МинимальнаяПартияВыпуска.Подсказка = ПодсказкаВвода;
		
	КонецЕсли;
	
	// Тип производственного процесса
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		ИЛИ Инициализация Тогда
		
//++ НЕ УТКА
		// Заголовки
		Если ЭтоСборка Тогда
			Элементы.ГруппаОсновноеИзделие.Заголовок = НСтр("ru = 'Продукция';
															|en = 'Products'");
		ИначеЕсли ЭтоРемонт Тогда
			Элементы.ГруппаОсновноеИзделие.Заголовок = НСтр("ru = 'Ремонтируемое изделие';
															|en = 'Product under repair'");
		ИначеЕсли ЭтоРазборка Тогда
			Элементы.ГруппаОсновноеИзделие.Заголовок = НСтр("ru = 'Разбираемое изделие';
															|en = 'Product being disassembled'");
		КонецЕсли;
//-- НЕ УТКА
		
		Если ЭтоСборка ИЛИ ЭтоРемонт Тогда
			Элементы.ГруппаВыходныеПобочныеИзделия.Заголовок = НСтр("ru = 'Побочный и промежуточный выход';
																	|en = 'Side and intermediate product'");
		Иначе
			Элементы.ГруппаВыходныеПобочныеИзделия.Заголовок = НСтр("ru = 'Выходные изделия';
																	|en = 'Finished products'");
		КонецЕсли;
		
		// Видимость элементов / табличных частей
		Элементы.ИспользоватьНабор.Видимость = Ложь;
//++ НЕ УТКА
		Элементы.ИспользоватьНабор.Видимость = ЭтоСборка И ДоступностьРеквизитов;
//-- НЕ УТКА

		Элементы.ГруппаВыходныеИзделия.Видимость = ЭтоРазборка;
		Элементы.ГруппаВыходныеИзделия.ОтображатьЗаголовок = ЭтоРазборка;
		
		Элементы.ГруппаВозвратныеОтходы.Видимость = ЭтоСборка ИЛИ ЭтоРазборка ИЛИ ЭтоРемонт;
		Элементы.ГруппаВозвратныеОтходы.ОтображатьЗаголовок = ЭтоРазборка;
		
		// "обработать по спецификации"
		Элементы.ВыходныеИзделияГруппаСпецификация.Видимость = ЭтоРазборка;
		Элементы.ВозвратныеОтходыГруппаСпецификация.Видимость = ЭтоРазборка;
		
		// "% брака"
		ДоступнаКолонкаПроцентБрака = Ложь;
//++ НЕ УТКА
		ДоступнаКолонкаПроцентБрака = НЕ Форма.ИспользуетсяПроизводство21;
//-- НЕ УТКА
		Элементы.ПродукцияПроцентБрака.Видимость       = (ЭтоСборка   И ДоступнаКолонкаПроцентБрака);
		Элементы.ОсновноеИзделиеПроцентБрака.Видимость = (ЭтоСборка   И ДоступнаКолонкаПроцентБрака);
		Элементы.ВыходныеИзделияПроцентБрака.Видимость = (ЭтоРазборка И ДоступнаКолонкаПроцентБрака);
		
//++ НЕ УТКА
		// Максимальный срок пролеживания изделий при ремонте ограничен этапами
		Элементы.ОграниченСрокПролеживанияВыходныхИзделий.Видимость = (ЭтоСборка ИЛИ ЭтоРазборка) И Форма.ИспользуетсяПроизводство22;
//-- НЕ УТКА
		
//++ НЕ УТКА
		// Команда "Спецификации изделий"
		Элементы.ФормаОткрытьСпецификацииИзделия.Видимость     = ИспользуетсяРежимРедактированияОсновногоИзделия(Форма);
		Элементы.ПродукцияОткрытьСпецификацииИзделия.Видимость = Не ИспользуетсяРежимРедактированияОсновногоИзделия(Форма);
//-- НЕ УТКА
		
		// Одно (несколько) выходных изделий
		Элементы.ГруппаОдноИзделие.Видимость = ИспользуетсяРежимРедактированияОсновногоИзделия(Форма);
		Элементы.ГруппаНесколькоИзделий.Видимость = Не ИспользуетсяРежимРедактированияОсновногоИзделия(Форма);
		
//++ НЕ УТКА
		// Определяем тип номенклатуры основного изделия
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(Элементы.ОсновноеИзделиеНоменклатура, Объект.ТипПроизводственногоПроцесса);
//-- НЕ УТКА
		
	КонецЕсли;
	
//++ НЕ УТКА
	
// Оптимальная партия выпуска
	Если СтруктураРеквизитов.Свойство("ОптимальнаяПартияВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ОписаниеПартииВыпуска")
		ИЛИ Инициализация Тогда
		
		ПодсказкаВвода = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
			Форма.ОписаниеПартииВыпуска, 
			Объект.ОптимальнаяПартияВыпуска);
		Элементы.ОптимальнаяПартияВыпуска.Подсказка = ПодсказкаВвода;
		Элементы.ДопустимоеПревышениеОптимальнойПартииВыпуска.Подсказка = ПодсказкаВвода;
		
	КонецЕсли;
	
	// Максимальный срок пролеживания выходных изделий
	Если СтруктураРеквизитов.Свойство("НастройкаМаксимальныйСрокПролеживания")
		ИЛИ Инициализация Тогда
		
		Элементы.МаксимальныйСрокПролеживанияВыходныхИзделий.Видимость = Объект.ОграниченСрокПролеживанияВыходныхИзделий;
		
	КонецЕсли;
	
//-- НЕ УТКА
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Функция ДоступноПроизводствоВПроцессеДляПереработки()
	
	Возврат ИспользуетсяПроизводство22;
		
КонецФункции

//-- НЕ УТКА

&НаСервере
Процедура ЗаполнитьОписаниеПартииВыпуска()
	
	Если Не ДоступноОписаниеПартииВыпуска Тогда
		Возврат;
	КонецЕсли;
	ОписаниеПартииВыпуска = Справочники.РесурсныеСпецификации.ОписаниеПартииВыпуска(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСтатусаСпецификации()
	
	Если Объект.Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
		СтатусСтрока = Строка(Объект.Статус);
	КонецЕсли;
	
	СпецификацияОсновная = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияОсновная(Объект.Ссылка);
	СтатусСтрока = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеСтатусаСпецификации(Объект.Статус, СпецификацияОсновная, Объект.НачалоДействия, Объект.КонецДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационнуюПанель()
	
	ИнформационнаяСтрока = Неопределено;
	Элементы.ИнформационнаяПанель.Видимость = Ложь;
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОсновныеСпецификации) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСпецификации = Новый Структура("Статус,ТипПроизводственногоПроцесса", Объект.Статус, Объект.ТипПроизводственногоПроцесса);
	Если НЕ УправлениеДаннымиОбИзделияхКлиентСервер.СпецификациюМожноНазначитьОсновной(СвойстваСпецификации, Новый Структура()) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТВыходныеИзделия
	|ИЗ
	|	&ВыходныеИзделия КАК ВыходныеИзделия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВыходныеИзделия.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВыходныеИзделия.Характеристика) КАК ХарактеристикаПредставление
	|ИЗ
	|	ВТВыходныеИзделия КАК ВыходныеИзделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
	|		ПО ВыходныеИзделия.Номенклатура = ОсновныеСпецификации.Номенклатура
	|			И ВыходныеИзделия.Характеристика = ОсновныеСпецификации.Характеристика
	|ГДЕ
	|	ОсновныеСпецификации.Спецификация ЕСТЬ NULL");
	Запрос.УстановитьПараметр("ВыходныеИзделия", Объект.ВыходныеИзделия.Выгрузить(,"Номенклатура,Характеристика"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстСтроки = СтрШаблон(НСтр("ru = 'Для изделия %1 не назначена основная спецификация';
									|en = 'Main BOM is not assigned to the %1 product'"),
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, Выборка.ХарактеристикаПредставление));
	ИначеЕсли Выборка.Количество() <> Объект.ВыходныеИзделия.Количество() Тогда
		ТекстСтроки = НСтр("ru = 'Для некоторых выходных изделий не назначена основная спецификация';
							|en = 'Main BOM is not assigned to some finished products'");
	Иначе
		ТекстСтроки = НСтр("ru = 'Для выходных изделий не назначена основная спецификация';
							|en = 'Main BOM is not specified for finished products'");
	КонецЕсли;
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстСтроки,, WebЦвета.Кирпичный));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '(назначить)';
															|en = '(assign)'"),,,, "НазначитьОсновной"));
	
	ИнформационнаяСтрока = Новый ФорматированнаяСтрока(МассивСтрок);
	Элементы.ИнформационнаяПанель.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСлужебныеРеквизитыПриЗаписиОсновнойСпецификации()
	
	ЗаполнитьПредставлениеСтатусаСпецификации();
	
	ОбновитьИнформационнуюПанель();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПроизводственногоПроцесса()
	
	ОписаниеПроизводственногоПроцесса = Справочники.РесурсныеСпецификации.ОписаниеПроизводственногоПроцесса(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ОписаниеПроизводственногоПроцесса);
	ЗаполнитьДанныеПервогоЭтапаПроизводственногоПроцесса();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПервогоЭтапаПроизводственногоПроцесса()
	
	ДанныеПервогоЭтапа = Новый Структура("ЭтоПервыйЭтап", Истина);
	
	ДанныеПервогоЭтапа.Вставить("Ссылка", Справочники.ЭтапыПроизводства.ПустаяСсылка());
	ДанныеПервогоЭтапа.Вставить("Наименование", "");
	
	ДанныеПервогоЭтапа.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ДанныеПервогоЭтапа.Вставить("ПроизводствоНаСтороне", Ложь);
	
	ДанныеПервогоЭтапа.Вставить("МаршрутнаяКарта", Неопределено);
//++ НЕ УТКА
	ДанныеПервогоЭтапа.Вставить("МаршрутнаяКарта", Справочники.МаршрутныеКарты.ПустаяСсылка());
//-- НЕ УТКА
	ДанныеПервогоЭтапа.Вставить("КоэффициентМаршрутнойКарты", 0);
	
	Запрос = Новый Запрос;
	
	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СписокЭтапов.Ссылка КАК Ссылка,
		|	СписокЭтапов.Наименование КАК Наименование,
		|	
		|	СписокЭтапов.Подразделение КАК Подразделение,
		|	СписокЭтапов.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	
		|	СписокЭтапов.МаршрутнаяКарта КАК МаршрутнаяКарта,
		|	СписокЭтапов.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК СписокЭтапов
		|ГДЕ
		|	СписокЭтапов.Владелец = &Владелец
		|	И НЕ СписокЭтапов.ПометкаУдаления
		|	И (СписокЭтапов.НомерЭтапа = 1)
		|	
		|УПОРЯДОЧИТЬ ПО
		|	ПроизводствоНаСтороне УБЫВ";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СписокЭтапов.Ссылка КАК Ссылка,
		|	СписокЭтапов.Наименование КАК Наименование,
		|	
		|	СписокЭтапов.Подразделение КАК Подразделение,
		|	СписокЭтапов.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	
		|	СписокЭтапов.МаршрутнаяКарта КАК МаршрутнаяКарта,
		|	СписокЭтапов.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК СписокЭтапов
		|ГДЕ
		|	СписокЭтапов.Владелец = &Владелец
		|	И НЕ СписокЭтапов.ПометкаУдаления
		|	
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа,
		|	Ссылка";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПервогоЭтапа, Выборка);
	КонецЕсли;
	
	ЗаполнитьПредставлениеЭтапа();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПроизводственногоПроцесса(Этап)
	
	Идентификаторы = Новый Массив();
	
	СписокОтборов = Новый Массив;
	СписокОтборов.Добавить(Этап);
	СписокОтборов.Добавить(Справочники.ЭтапыПроизводства.ПустаяСсылка());
	
	Для каждого ЗначениеОтбора Из СписокОтборов Цикл
		
		Отбор = Новый Структура("ЭтапРедактирование", ЗначениеОтбора);
		НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(Отбор);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			Идентификаторы.Добавить(Строка.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДанныеПервогоЭтапа.Ссылка = Этап ИЛИ Не ЗначениеЗаполнено(ДанныеПервогоЭтапа.Ссылка) Тогда
		ЗаполнитьДанныеПервогоЭтапаПроизводственногоПроцесса();
	КонецЕсли;
	
	ОбработатьИзменениеЭтапаМатериалыИУслуги(Идентификаторы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокКолонокЗаполнитьСлужебныеРеквизитыМатериалыИУслуги()
	
	СоставПолей = "НомерСтроки,ЭтапРедактирование,СпособПолученияМатериала,ИсточникПолученияПолуфабриката,СпецификацияРемонта,ПланироватьНеРанее";
	Возврат СоставПолей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги(Идентификаторы = Неопределено)
	
	СписокКолонок = СписокКолонокЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();
	
	Если Идентификаторы <> Неопределено Тогда
		СписокСтрок = Новый Массив;
		Для каждого Идентификатор Из Идентификаторы Цикл
			СписокСтрок.Добавить(Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
		ТабличнаяЧасть = Объект.МатериалыИУслуги.Выгрузить(СписокСтрок, СписокКолонок);
	Иначе
		ТабличнаяЧасть = Объект.МатериалыИУслуги.Выгрузить(, СписокКолонок);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	" + СписокКолонок + "
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ЭтапРедактирование = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫРАЗИТЬ(ТабличнаяЧасть.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства).НомерЭтапа = 1
	|
	|	КОНЕЦ КАК ЭтоПервыйЭтап,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ЭтапРедактирование = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|			ТОГДА &ПроизводствоНаСтороне
	|		ИНАЧЕ ВЫРАЗИТЬ(ТабличнаяЧасть.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства).ПроизводствоНаСтороне
	|
	|	КОНЕЦ КАК ПроизводствоНаСтороне,
	|
	|	ПРЕДСТАВЛЕНИЕ(ТабличнаяЧасть.ИсточникПолученияПолуфабриката) КАК ИсточникПолученияПолуфабрикатаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТабличнаяЧасть.ПланироватьНеРанее)             КАК ПланироватьНеРанееПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТабличнаяЧасть.СпецификацияРемонта)            КАК СпецификацияРемонтаПредставление
	|
	|ИЗ
	|	ВТ КАК ТабличнаяЧасть");
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);
	Запрос.УстановитьПараметр("ПроизводствоНаСтороне", ДанныеПервогоЭтапа.ПроизводствоНаСтороне);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = Объект.МатериалыИУслуги[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка,, "НомерСтроки");
		ЗаполнитьПредставлениеСпособаПолученияМатериала(ДанныеСтроки);
		УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(ДанныеСтроки);
	КонецЦикла;

КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеМатериалыИУслуги(Строка)
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(Строка.ПолучитьИдентификатор());
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги(Идентификаторы);

КонецПроцедуры

//-- НЕ УТКА

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();

КонецПроцедуры

&НаСервере
Процедура РассчитатьДоступноУказаниеЭтаповВВыходныхИзделиях()
	
	ДоступноУказаниеЭтаповВВыходныхИзделиях = Ложь;
	
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		
		Если ЗначениеЗаполнено(Строка.ЭтапРедактирование) Тогда
			
			ДоступноУказаниеЭтаповВВыходныхИзделиях = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоВыходныеПобочныеИзделия(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	Иначе
		ВсегоИзделий = Объект.ВозвратныеОтходы.Количество();
	КонецЕсли;
	
	Форма.ВсегоВыходныеПобочныеИзделия = ВсегоИзделий;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПолучитьБлокируемыеРеквизитыОбъекта()
	
	Результат = Новый Массив;
	
	// Элементы шапки
	Результат.Добавить("Код");
	
	Результат.Добавить("СтруктураПроизводственногоПроцесса");
	Результат.Добавить("ВыпускПроизвольнымиПорциями");
	
	Результат.Добавить("ТипПроизводственногоПроцесса");
	Результат.Добавить("ИспользоватьНабор");
	
	Результат.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	
	// Основное изделие
	Результат.Добавить("ОсновноеИзделиеНоменклатура");
	Результат.Добавить("ОсновноеИзделиеХарактеристика");
	Результат.Добавить("ОсновноеИзделиеКоличествоУпаковок");
	Результат.Добавить("ОсновноеИзделиеУпаковка");
	Результат.Добавить("ОсновноеИзделиеПроцентБрака");
	
	// Элементы табличных частей
	Результат.Добавить("Продукция");
	Результат.Добавить("ВыходныеИзделия");
	Результат.Добавить("ВозвратныеОтходы");
	Результат.Добавить("МатериалыИУслуги");
	Результат.Добавить("Трудозатраты");
	
	// Команды
	Результат.Добавить("ФормаЗаполнитьПоМаршрутнымКартамЭтапов");
	Результат.Добавить("МатериалыИУслугиРазбитьСтроку");
	Результат.Добавить("МатериалыИУслугиОткрытьПодборМатериалов");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьРеквизитов = (Объект.Статус = Перечисления.СтатусыСпецификаций.ВРазработке);
	СпецификацияЗакрыта = (Объект.Статус = Перечисления.СтатусыСпецификаций.Закрыта);
	
	МассивЭлементов = ПолучитьБлокируемыеРеквизитыОбъекта();
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	// Элементы доступные только в действующей спецификации
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("МатериалыИУслугиВвестиРазрешениеНаЗамену");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ДоступностьРеквизитов);
	
	// Элементы недоступные в действующей спецификации
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("КоманднаяПанельЭтапыСписок");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ДоступностьРеквизитов);
	
	// Если спецификация закрыта то сделаем недоступными остальные реквизиты
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("НачалоДействия");
	МассивЭлементов.Добавить("КонецДействия");
	МассивЭлементов.Добавить("ПечатьМаршрутнойКартыПоЭтапам");
	МассивЭлементов.Добавить("ПечатьМаршрутнойКартыПоМаршрутнымКартам");
	МассивЭлементов.Добавить("Ответственный");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", СпецификацияЗакрыта);
	
	Элементы.ЭтапыСписок.ИзменятьСоставСтрок = (Объект.Статус = Перечисления.СтатусыСпецификаций.ВРазработке);
	УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки") И ДоступностьРеквизитов);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеОбъекта()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.Статус = Перечисления.СтатусыСпецификаций.Действует;
	
	Возврат СправочникОбъект.ПроверитьЗаполнение();
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандИзмененияСтатуса()
	
	Элементы.УстановитьСтатусДействует.Доступность   = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Действует);
	Элементы.УстановитьСтатусаЗакрыта.Доступность    = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Закрыта);
	Элементы.УстановитьСтатусВРазработке.Доступность = (Объект.Статус <> Перечисления.СтатусыСпецификаций.ВРазработке);
	Элементы.ПроверитьЗаполнение.Доступность         = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Действует);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатусИЗаписать(Статус)
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя изменить статус помеченной на удаление спецификации.';
									|en = 'Cannot change a status of the bill of materials marked for deletion.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует")
		И Не ПроверитьЗаполнениеОсновногоИзделия() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусДоИзменения = Объект.Статус;
	
	УстановитьНовыйСтатусИЗаписатьНаСервере(Статус);
	
	Если НЕ СтатусДоИзменения = Объект.Статус Тогда
		Оповестить("Запись_РесурсныеСпецификации");
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыйСтатусИЗаписатьНаСервере(Знач Статус)
	
	ТекущийСтатус = Объект.Статус;
	Объект.Статус = Статус;
	
	СтатусИзменен = Ложь;
	
	Попытка
		
		СтатусИзменен = Записать();
		
	Исключение
		
		СобытиеЖурналаРегистрации = НСтр("ru = 'Не удалось изменить статус спецификации';
										|en = 'Cannot change the BOM status'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если НЕ СтатусИзменен Тогда
		Объект.Статус = ТекущийСтатус;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУстановитьСтатусВРазработке(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Истина Тогда
		
		УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.ВРазработке"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = Объект.МатериалыИУслуги.Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ПриВводеНовойСтрокиМатериалов(ЭтаФорма, ТекущаяСтрока);
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(Элемент, ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ПроверитьДобавитьВыпускПромежуточногоПолуфабриката(ДанныеСтроки, ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.Свойство("ДобавитьПромежуточныйВыпускПриВыборе") И ВыбранноеЗначение.ДобавитьПромежуточныйВыпускПриВыборе Тогда
		
		Шаблон = НСтр("ru = 'Добавить промежуточный выпуск полуфабриката на этап ""%1""?';
						|en = 'Add intermediate release of semi-finished product to the ""%1"" stage?'");
		ТекстВопроса = СтрШаблон(Шаблон, ДанныеСтроки.ИсточникПолученияПолуфабрикатаПредставление);
		
		ПараметрыОповещения = Новый Структура("ДанныеСтроки", ДанныеСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПромежуточныйВыпускПриВыбореЗавершение", ЭтаФорма, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромежуточныйВыпускПриВыбореЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = ДополнительныеПараметры.ДанныеСтроки;
	
	ПромежуточныйВыпуск = Объект.ВозвратныеОтходы.Добавить();
	ПромежуточныйВыпуск.КлючСвязи          = Новый УникальныйИдентификатор;
	ПромежуточныйВыпуск.ЭтапРедактирование = СтрокаИсточник.ИсточникПолученияПолуфабриката;
	ЗаполнитьЗначенияСвойств(ПромежуточныйВыпуск, СтрокаИсточник,,
		"КлючСвязи, Этап, ЭтапРедактирование");
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(
		ПромежуточныйВыпуск,
		СтрокаИсточник.КлючСвязи,
		Объект.СоответствиеСвойств);
		
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСОтборомПоСвойствам(
		ПромежуточныйВыпуск,
		СтрокаИсточник.КлючСвязи,
		Объект.ОтборПоСвойствам);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ПромежуточныйВыпуск.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ПромежуточныйВыпуск.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ПромежуточныйВыпуск, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьКоличествоВыходныеПобочныеИзделия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаршрутнымКартамЭтаповЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоМаршрутнымКартамЭтапов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоМаршрутнымКартамЭтапов()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; //временные таблицы используются повторно
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка КАК Этап,
	|	ЭтапыПроизводства.МаршрутнаяКарта           КАК МаршрутнаяКарта,
	|	МаршрутныеКарты.ИспользоватьВыходныеИзделия КАК ИспользоватьВыходныеИзделия,
	|	МаршрутныеКарты.ИспользоватьМатериалы       КАК ИспользоватьМатериалы,
	|	МаршрутныеКарты.ИспользоватьТрудозатраты    КАК ИспользоватьТрудозатраты,
	|	ВЫБОР
	|		КОГДА ЭтапыПроизводства.КоэффициентМаршрутнойКарты = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЭтапыПроизводства.КоэффициентМаршрутнойКарты
	|	КОНЕЦ КАК КоэффициентМаршрутнойКарты,
	|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	ВЫБОР
	|		КОГДА ЭтапыПроизводства.НомерЭтапа = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПервыйЭтап,
	|	ВЫБОР
	|		КОГДА ЭтапыПроизводства.НомерСледующегоЭтапа = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПоследнийЭтап
	|ПОМЕСТИТЬ СписокЭтапов
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО ЭтапыПроизводства.МаршрутнаяКарта = МаршрутныеКарты.Ссылка
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Спецификация
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Спецификация", Объект.Ссылка);
	
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса",   Объект.ТипПроизводственногоПроцесса);
	Запрос.УстановитьПараметр("НоменклатураВходящегоИзделия",   Объект.НоменклатураВходящегоИзделия);
	Запрос.УстановитьПараметр("ХарактеристикаВходящегоИзделия", Объект.ХарактеристикаВходящегоИзделия);
	
	Запрос.Выполнить();
	
	СтруктураДанных = Неопределено;
	ПолучитьДанныеМаршрутнойКарты(Запрос, СтруктураДанных);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект.ВыходныеИзделия,  СтруктураДанных.ТаблицаЭтапы, "ЭтоПоследнийЭтап", "ИспользоватьВыходныеИзделия");
	УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект.ВозвратныеОтходы, СтруктураДанных.ТаблицаЭтапы, "ЭтоПоследнийЭтап", "ИспользоватьВыходныеИзделия");
	УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект.МатериалыИУслуги, СтруктураДанных.ТаблицаЭтапы, "ЭтоПервыйЭтап",    "ИспользоватьМатериалы");
	УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект.Трудозатраты,     СтруктураДанных.ТаблицаЭтапы, "ЭтоПервыйЭтап",    "ИспользоватьТрудозатраты");
	
	МассивПроверок = Новый Массив;
	СкорректироватьОперандыАлгоритмаРасчетаКоличества(СтруктураДанных, МассивПроверок);
	
	ИсключитьРеквизиты = "";
	Если НЕ Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		ИсключитьРеквизиты = "Этап, ЭтапРедактирование";
	КонецЕсли;
	
	Если СтруктураДанных.ВыходныеИзделия <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.ВыходныеИзделия Цикл
			ЗаполнитьЗначенияСвойств(Объект.ВыходныеИзделия.Добавить(), ЭлементКоллекции,, ИсключитьРеквизиты);
		КонецЦикла; 
	КонецЕсли;
	
	Если СтруктураДанных.ВозвратныеОтходы <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.ВозвратныеОтходы Цикл
			ЗаполнитьЗначенияСвойств(Объект.ВозвратныеОтходы.Добавить(), ЭлементКоллекции,, ИсключитьРеквизиты);
		КонецЦикла; 
	КонецЕсли;
	
	Если СтруктураДанных.МатериалыИУслуги <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.МатериалыИУслуги Цикл
			НоваяСтрока = Объект.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции,, ИсключитьРеквизиты);
			ЗаполнитьСпособПолученияМатериалаПоУмолчанию(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Трудозатраты <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.Трудозатраты Цикл
			ЗаполнитьЗначенияСвойств(Объект.Трудозатраты.Добавить(), ЭлементКоллекции,, ИсключитьРеквизиты);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.СоответствиеСвойств <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.СоответствиеСвойств Цикл
			ЗаполнитьЗначенияСвойств(Объект.СоответствиеСвойств.Добавить(), ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.ОтборПоСвойствам <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.ОтборПоСвойствам Цикл
			ЗаполнитьЗначенияСвойств(Объект.ОтборПоСвойствам.Добавить(), ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	
	Объект.ИспользоватьНесколькоВыходныхИзделий = Объект.ВыходныеИзделия.Количество() > 1;
	ИспользоватьНабор = Число(Объект.ИспользоватьНесколькоВыходныхИзделий);
	
	ПрочитатьДанныеОсновногоИзделияСпецификации();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиГдеДляЭтаповУказаныМК(Таблица, ТаблицаЭтапы, ПолеАвтовыбораЭтапа, ИмяРеквизитаСостава)

	СтрокиКУдалению = Новый Массив;
	Для каждого ДанныеСтроки Из Таблица Цикл
		
		Если НЕ ДанныеСтроки.ЭтапРедактирование.Пустая() Тогда
			СтрокаЭтап = ТаблицаЭтапы.Найти(ДанныеСтроки.ЭтапРедактирование, "Этап");
		Иначе
			СтрокаЭтап = ТаблицаЭтапы.Найти(Истина, ПолеАвтовыбораЭтапа);
		КонецЕсли;
		
		Если СтрокаЭтап <> Неопределено 
			И НЕ СтрокаЭтап.МаршрутнаяКарта.Пустая() 
			И СтрокаЭтап[ИмяРеквизитаСостава] Тогда
			
			СтрокиКУдалению.Добавить(ДанныеСтроки);
		КонецЕсли; 
		
	КонецЦикла; 

	Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
		
		Найдено = Объект.СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
		Для каждого Строка Из Найдено Цикл
			Объект.СоответствиеСвойств.Удалить(Строка);
		КонецЦикла;
		
		Найдено = Объект.ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
		Для каждого Строка Из Найдено Цикл
			Объект.ОтборПоСвойствам.Удалить(Строка);
		КонецЦикла;
		
		Таблица.Удалить(ДанныеСтроки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеМаршрутнойКарты(Запрос, СтруктураДанных, ВключитьВложенныеМК = Истина)

	Если СтруктураДанных = Неопределено Тогда
		СтруктураДанных = ИнициализироватьСтруктуруДанныхДляЗаполнения();
	КонецЕсли;
	
	Поля = СтрРазделить("ИспользоватьВыходныеИзделия,ИспользоватьМатериалы,ИспользоватьТрудозатраты",",");
	
	СписокЭтапов = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("СписокЭтапов").ПолучитьДанные().Выгрузить();
	Если СтруктураДанных.ТаблицаЭтапы = Неопределено Тогда
		СписокЭтапов.Индексы.Добавить("Этап");
		СтруктураДанных.ТаблицаЭтапы = СписокЭтапов;
	Иначе
		Для каждого СтрокаЭтап Из СписокЭтапов Цикл
			Найдено = СтруктураДанных.ТаблицаЭтапы.Найти(СтрокаЭтап.Этап, "Этап");
			Для каждого Поле Из Поля Цикл
				Найдено[Поле] = Макс(Найдено[Поле], СтрокаЭтап[Поле]);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписокЭтапов.Этап,
	|	СписокЭтапов.ЭтоПервыйЭтап КАК ЭтоПервыйЭтап,
	|	СписокЭтапов.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокЭтапов.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	СписокЭтапов.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты
	|ПОМЕСТИТЬ СписокМаршрутныхКарт
	|ИЗ
	|	СписокЭтапов КАК СписокЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутнаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. ВыходныеИзделия
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	МаршрутныеКартыВыходныеИзделия.Номенклатура,
	|	МаршрутныеКартыВыходныеИзделия.Характеристика,
	|	МаршрутныеКартыВыходныеИзделия.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|	МаршрутныеКартыВыходныеИзделия.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|	МаршрутныеКартыВыходныеИзделия.Упаковка,
	|	МаршрутныеКартыВыходныеИзделия.ДоляСтоимости,
	|	МаршрутныеКартыВыходныеИзделия.СпособАвтовыбораНоменклатуры,
	|	МаршрутныеКартыВыходныеИзделия.СпособАвтовыбораХарактеристики,
	|	МаршрутныеКартыВыходныеИзделия.СвойствоСодержащееНоменклатуру,
	|	МаршрутныеКартыВыходныеИзделия.АлгоритмРасчетаКоличества,
	|	МаршрутныеКартыВыходныеИзделия.НомерСтроки,
	|	МаршрутныеКартыВыходныеИзделия.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
	|		ПО (МаршрутныеКартыВыходныеИзделия.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2. ВозвратныеОтходы
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	МаршрутныеКартыВозвратныеОтходы.Номенклатура,
	|	МаршрутныеКартыВозвратныеОтходы.Характеристика,
	|	МаршрутныеКартыВозвратныеОтходы.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|	МаршрутныеКартыВозвратныеОтходы.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|	МаршрутныеКартыВозвратныеОтходы.Упаковка,
	|	МаршрутныеКартыВозвратныеОтходы.СтатьяКалькуляции,
	|	МаршрутныеКартыВозвратныеОтходы.СпособАвтовыбораНоменклатуры,
	|	МаршрутныеКартыВозвратныеОтходы.СпособАвтовыбораХарактеристики,
	|	МаршрутныеКартыВозвратныеОтходы.СвойствоСодержащееНоменклатуру,
	|	МаршрутныеКартыВозвратныеОтходы.АлгоритмРасчетаКоличества,
	|	МаршрутныеКартыВозвратныеОтходы.ОписаниеИзделия,
	|	МаршрутныеКартыВозвратныеОтходы.НомерСтроки,
	|	МаршрутныеКартыВозвратныеОтходы.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК МаршрутныеКартыВозвратныеОтходы
	|		ПО (МаршрутныеКартыВозвратныеОтходы.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3. МатериалыИУслуги
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап,
	|		СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|		СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|		МаршрутныеКартыМатериалыИУслуги.Номенклатура,
	|		МаршрутныеКартыМатериалыИУслуги.Характеристика,
	|		МаршрутныеКартыМатериалыИУслуги.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|		МаршрутныеКартыМатериалыИУслуги.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|		МаршрутныеКартыМатериалыИУслуги.Упаковка,
	|		МаршрутныеКартыМатериалыИУслуги.СтатьяКалькуляции,
	|		МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры,
	|		МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики,
	|		МаршрутныеКартыМатериалыИУслуги.СвойствоСодержащееНоменклатуру,
	|		МаршрутныеКартыМатериалыИУслуги.АлгоритмРасчетаКоличества,
	|	ВЫБОР
	|		КОГДА МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала = """"
	|			ТОГДА МаршрутныеКартыМатериалыИУслуги.Операция
	|		ИНАЧЕ МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала
	|	КОНЕЦ КАК ПрименениеМатериала,
	|		МаршрутныеКартыМатериалыИУслуги.НомерСтроки,
	|		МаршрутныеКартыМатериалыИУслуги.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.МатериалыИУслуги КАК МаршрутныеКартыМатериалыИУслуги
	|		ПО (МаршрутныеКартыМатериалыИУслуги.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьМатериалы
	|	И ВЫБОР
	|			КОГДА &ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|				ТОГДА НЕ(МаршрутныеКартыМатериалыИУслуги.Номенклатура = &НоменклатураВходящегоИзделия
	|						И МаршрутныеКартыМатериалыИУслуги.Характеристика = &ХарактеристикаВходящегоИзделия)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4. Трудозатраты
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап,
	|		СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|		СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|		МаршрутныеКартыТрудозатраты.ВидРабот,
	|		МаршрутныеКартыТрудозатраты.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|		МаршрутныеКартыТрудозатраты.СтатьяКалькуляции,
	|		МаршрутныеКартыТрудозатраты.АлгоритмРасчетаКоличества,
	|		МаршрутныеКартыТрудозатраты.НомерСтроки,
	|		МаршрутныеКартыТрудозатраты.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.Трудозатраты КАК МаршрутныеКартыТрудозатраты
	|		ПО (МаршрутныеКартыТрудозатраты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьТрудозатраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5. СоответствиеСвойств
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап КАК Этап,
	|		СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|		МаршрутныеКартыСоответствиеСвойств.СвойствоМатериала,
	|		МаршрутныеКартыСоответствиеСвойств.СвойствоПродукции,
	|		МаршрутныеКартыСоответствиеСвойств.ЗначениеСвойства,
	|		МаршрутныеКартыСоответствиеСвойств.АлгоритмРасчетаЗначения,
	|		МаршрутныеКартыСоответствиеСвойств.СпособПодбораЗначения,
	|		МаршрутныеКартыСоответствиеСвойств.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.СоответствиеСвойств КАК МаршрутныеКартыСоответствиеСвойств
	|		ПО (МаршрутныеКартыСоответствиеСвойств.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 6. ОтборПоСвойствам
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап КАК Этап,
	|		СписокМаршрутныхКарт.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|		МаршрутныеКартыОтборПоСвойствам.Свойство,
	|		МаршрутныеКартыОтборПоСвойствам.Условие,
	|		МаршрутныеКартыОтборПоСвойствам.Значение,
	|		МаршрутныеКартыОтборПоСвойствам.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ОтборПоСвойствам КАК МаршрутныеКартыОтборПоСвойствам
	|		ПО (МаршрутныеКартыОтборПоСвойствам.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 7.
	|УНИЧТОЖИТЬ СписокЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 8. Тех. операции
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.ЭтоПервыйЭтап КАК ЭтоПервыйЭтап,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СпрОперации.ВложенныйМаршрут КАК МаршрутнаяКарта,
	|	МаршрутныеКартыВложенные.ИспользоватьВыходныеИзделия КАК ИспользоватьВыходныеИзделия,
	|	МаршрутныеКартыВложенные.ИспользоватьМатериалы КАК ИспользоватьМатериалы,
	|	МаршрутныеКартыВложенные.ИспользоватьТрудозатраты КАК ИспользоватьТрудозатраты,
	|	СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
	|	СпрОперации.Наименование КАК НаименованиеОперации
	|ПОМЕСТИТЬ СписокЭтапов
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК СпрОперации
	|		ПО (СпрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|			И СпрОперации.СодержитВложенныйМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКартыВложенные
	|		ПО (МаршрутныеКартыВложенные.Ссылка = СпрОперации.ВложенныйМаршрут)
	|ГДЕ 
	|	НЕ СпрОперации.Ссылка.ПометкаУдаления
	|	И МаршрутныеКарты.ИспользоватьОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокМаршрутныхКарт";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	// Результат[0] - СписокМаршрутныхКарт
	// Результат[1] - ВыходныеИзделия
	// Результат[2] - ВозвратныеОтходы
	// Результат[3] - МатериалыИУслуги
	// Результат[4] - Трудозатраты
	// Результат[5] - СоответствиеСвойств
	// Результат[6] - ОтборПоСвойствам
	// Результат[8] - СписокЭтапов по данным вложенных МК, который будет использоваться на следующей итерации выполнения процедуры
	
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[1].Выгрузить(), "ВыходныеИзделия" , Истина);
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[2].Выгрузить(), "ВозвратныеОтходы", Истина);
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[3].Выгрузить(), "МатериалыИУслуги", Истина);
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[4].Выгрузить(), "Трудозатраты");
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[5].Выгрузить(), "СоответствиеСвойств");
	ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, Результат[6].Выгрузить(), "ОтборПоСвойствам");
	
	Если ВключитьВложенныеМК И Результат[8].Выгрузить()[0].Количество > 0 Тогда
		ПолучитьДанныеМаршрутнойКарты(Запрос, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьДанныеВТаблицуСтруктурыДанных(СтруктураДанных, ТаблицаИсточник, ИмяТаблицыСтруктурыДанных, ИсточникОперандов = Ложь)
	
	Если СтруктураДанных[ИмяТаблицыСтруктурыДанных] = Неопределено Тогда
		СтруктураДанных[ИмяТаблицыСтруктурыДанных] = ТаблицаИсточник.СкопироватьКолонки();
	КонецЕсли;
	ТаблицаСтруктурыДанных = СтруктураДанных[ИмяТаблицыСтруктурыДанных];
	
	СтруктураПоиска = Новый Структура("Этап,МаршрутнаяКарта,КлючСвязи");
	
	Для каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		НоваяСтрока = ТаблицаСтруктурыДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИсточник);
		
		НайденныеСтроки = СтруктураДанных.ТаблицаКлючейСвязи.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			КлючСвязиНовый = НайденныеСтроки[0].КлючСвязиНовый;
		Иначе
			КлючСвязиНовый = Новый УникальныйИдентификатор;
			НоваяСтрокаКлюч = СтруктураДанных.ТаблицаКлючейСвязи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКлюч, СтруктураПоиска);
			НоваяСтрокаКлюч.КлючСвязиНовый = КлючСвязиНовый;
		КонецЕсли;
		
		НоваяСтрока.КлючСвязи = КлючСвязиНовый;
		
		Если ИсточникОперандов Тогда
			СтрокаКорректировка = СтруктураДанных.ТаблицаКорректировкиОперандов.Добавить();
			СтрокаКорректировка.Этап            = НоваяСтрока.Этап;
			СтрокаКорректировка.МаршрутнаяКарта = НоваяСтрока.МаршрутнаяКарта;
			СтрокаКорректировка.ИмяТаблицы      = ИмяТаблицыСтруктурыДанных;
			СтрокаКорректировка.ИндексСтроки    = ТаблицаСтруктурыДанных.Индекс(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьСтруктуруДанныхДляЗаполнения()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыходныеИзделия",     Неопределено);
	СтруктураДанных.Вставить("ВозвратныеОтходы",    Неопределено);
	СтруктураДанных.Вставить("МатериалыИУслуги",    Неопределено);
	СтруктураДанных.Вставить("Трудозатраты",        Неопределено);
	СтруктураДанных.Вставить("СоответствиеСвойств", Неопределено);
	СтруктураДанных.Вставить("ОтборПоСвойствам",    Неопределено);
	
	СтруктураДанных.Вставить("ТаблицаЭтапы",        Неопределено);
	
	ТаблицаКлючейСвязи = Новый ТаблицаЗначений;
	ТаблицаКлючейСвязи.Колонки.Добавить("Этап");
	ТаблицаКлючейСвязи.Колонки.Добавить("МаршрутнаяКарта");
	ТаблицаКлючейСвязи.Колонки.Добавить("КлючСвязи");
	ТаблицаКлючейСвязи.Колонки.Добавить("КлючСвязиНовый");
	
	ТаблицаКлючейСвязи.Индексы.Добавить("Этап,МаршрутнаяКарта,КлючСвязи");
	
	СтруктураДанных.Вставить("ТаблицаКлючейСвязи",  ТаблицаКлючейСвязи);
	
	ТаблицаКорректировкиОперандов = Новый ТаблицаЗначений;
	ТаблицаКорректировкиОперандов.Колонки.Добавить("Этап");
	ТаблицаКорректировкиОперандов.Колонки.Добавить("МаршрутнаяКарта");
	ТаблицаКорректировкиОперандов.Колонки.Добавить("ИмяТаблицы");
	ТаблицаКорректировкиОперандов.Колонки.Добавить("ИндексСтроки");
	
	ТаблицаКорректировкиОперандов.Индексы.Добавить("Этап,МаршрутнаяКарта");
	
	СтруктураДанных.Вставить("ТаблицаКорректировкиОперандов", ТаблицаКорректировкиОперандов);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Процедура СкорректироватьОперандыАлгоритмаРасчетаКоличества(СтруктураДанных, МассивПроверок)
	
	Для каждого ИмяТЧ Из СтрРазделить("ВыходныеИзделия,МатериалыИУслуги,ВозвратныеОтходы,Трудозатраты",",") Цикл
		Если СтруктураДанных[ИмяТЧ] <> Неопределено Тогда
			МассивПроверок.Добавить(Новый Структура("ИмяТЧ,Представление", ИмяТЧ));
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура("Этап,МаршрутнаяКарта");
	ТаблицаКорректировкиОперандов = Неопределено;
	
	Для каждого Проверка Из МассивПроверок Цикл
		
		Для каждого Строка Из СтруктураДанных[Проверка.ИмяТЧ] Цикл
			
			Если ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Отбор.Этап <> Строка.Этап ИЛИ Отбор.МаршрутнаяКарта <> Строка.МаршрутнаяКарта Тогда
				ЗаполнитьЗначенияСвойств(Отбор, Строка);
				ТаблицаКорректировкиОперандов = СтруктураДанных.ТаблицаКорректировкиОперандов.Скопировать(Отбор);
				ТаблицаКорректировкиОперандов.Сортировать("ИмяТаблицы, ИндексСтроки Убыв");
			КонецЕсли;
			
			Для каждого СтрокаКорректировка Из ТаблицаКорректировкиОперандов Цикл
				
				ИмяТаблицы    = СтрокаКорректировка.ИмяТаблицы;
				СтрокаТаблицы = СтруктураДанных[ИмяТаблицы].Получить(СтрокаКорректировка.ИндексСтроки);
				
				ОперандСтарый = СтрШаблон("%1[%2].", ИмяТаблицы, Формат(СтрокаТаблицы.НомерСтроки,"ЧН=; ЧГ="));
				ОперандНовый  = СтрШаблон("%1[%2].", ИмяТаблицы, Формат(Объект[ИмяТаблицы].Количество()+СтрокаКорректировка.ИндексСтроки+1,"ЧН=; ЧГ="));
				
				Если ОперандСтарый <> ОперандНовый Тогда
					Строка.АлгоритмРасчетаКоличества = СтрЗаменить(Строка.АлгоритмРасчетаКоличества, ОперандСтарый, ОперандНовый);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ОбработатьВыборПоляВТаблице(ИмяТаблицы, ИмяПоля, СтандартнаяОбработка)

	Если ДоступностьРеквизитов И НЕ (ТолькоПросмотр ИЛИ Элементы[ИмяПоля].ТолькоПросмотр) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если (СтрНайти(ИмяПоля, "Номенклатура") > 0
			ИЛИ СтрНайти(ИмяПоля, "Артикул") > 0)
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли СтрНайти(ИмяПоля, "Спецификация") > 0
		И ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Спецификация);
		
	ИначеЕсли СтрНайти(ИмяПоля, "ЭтапРедактирование") > 0
		И ЗначениеЗаполнено(ТекущиеДанные.ЭтапРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ЭтапРедактирование);
		
//++ НЕ УТКА
	ИначеЕсли ИмяПоля = "МатериалыИУслугиСпособПолученияМатериалаРедактирование" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораСпособаПолученияМатериала(ТекущиеДанные);

	ИначеЕсли ИмяПоля = "МатериалыИУслугиПрименениеМатериалаРедактирование"
		И ЗначениеЗаполнено(ТекущиеДанные.ПрименениеМатериалаРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуНастройкиПримененияМатериала(ТекущиеДанные);
//-- НЕ УТКА
	
	ИначеЕсли ИмяПоля = "ТрудозатратыСтатьяКалькуляции"
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли ИмяПоля = "МатериалыИУслугиСтатьяКалькуляции"
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции)
		И Не ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли (ИмяПоля = "ТрудозатратыВидРабот")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабот)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабот);
		
	ИначеЕсли (СтрНайти(ИмяПоля, "ДоляСтоимостиПроцент") > 0 ИЛИ СтрНайти(ИмяПоля, "ЕстьОшибкиЗаполненияДолиСтоимости") > 0)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФлагТребуетсяУказыватьСерии(СписокТЧ, Номенклатура, НовоеЗначение, Форма)
	
	МассивТЧ = СтрРазделить(СписокТЧ, ",");
	Для каждого ИмяТЧ Из МассивТЧ Цикл
		Для каждого ДанныеСтроки Из Форма.Объект[ИмяТЧ] Цикл
			Если ДанныеСтроки.Номенклатура = Номенклатура Тогда
				ДанныеСтроки.ТребуетсяУказыватьСерии = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяЗаписатьСпецификациюПередДобавлениемИзменениемЭтапов()
	
	Результат = (Модифицированность ИЛИ Объект.Ссылка.Пустая());
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

&НаКлиенте
Процедура ОткрытьФормуПрименениеНоменклатурыВПроизводстве(Номенклатура)
	
	ПараметрыФормы = Новый Структура("Основание,РежимСпецификацииИзделия,АктивизироватьСпецификацию", 
										Номенклатура, Истина, Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ПрименениеНоменклатурыВПроизводстве", ПараметрыФормы,, Номенклатура);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьПолучитьОсновноеИзделиеСпецификации()
	
	ОсновноеИзделие = УправлениеДаннымиОбИзделияхКлиентСервер.ДанныеОсновногоИзделияСпецификации(Объект);
	
	Если ОсновноеИзделие.Номенклатура.Пустая() Тогда
	
		ТекстСообщения = НСтр("ru = 'Необходимо указать основное изделие спецификации.';
								|en = 'Specify main BOM product.'");
		
		Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
			И Объект.ИспользоватьНесколькоВыходныхИзделий Тогда
			Поле = "Объект.ВыходныеИзделия";
		Иначе
			Поле = "Объект.НоменклатураОсновногоИзделия";
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			Поле);
		
	КонецЕсли;
	
	Возврат ОсновноеИзделие.Номенклатура;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораСпособаПолученияМатериала(ДанныеСтроки)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ТипПроизводственногоПроцесса", Объект.ТипПроизводственногоПроцесса);
	
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	
	ПараметрыФормы.Вставить("СпособАвтовыбораНоменклатуры", ДанныеСтроки.СпособАвтовыбораНоменклатуры);
	
	ПараметрыФормы.Вставить("СпособПолученияМатериала", ДанныеСтроки.СпособПолученияМатериала);
	ПараметрыФормы.Вставить("ИсточникПолученияПолуфабриката", ДанныеСтроки.ИсточникПолученияПолуфабриката);
	
	ПараметрыФормы.Вставить("СпецификацияРемонта", ДанныеСтроки.СпецификацияРемонта);
	ПараметрыФормы.Вставить("ПланироватьНеРанее", ДанныеСтроки.ПланироватьНеРанее);
	
	ПараметрыФормы.Вставить("НачалоПроизводства", Объект.НачалоДействия);
	
	ПараметрыФормы.Вставить("Этап", ДанныеСтроки.ЭтапРедактирование);
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("АдресПолуфабрикаты", ПоместитьВХранилищеПолуфабрикатыПредшествующихЭтапов(ДанныеСтроки.ПолучитьИдентификатор()));
	ПараметрыФормы.Вставить("ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыбораСпособаПолученияМатериала", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеПолуфабрикатыПредшествующихЭтапов(Идентификатор)
	
	АдресХранилища = Неопределено;
	
	ДанныеСтроки = Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ЭтапРедактирование) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		
		Если ДанныеСтроки.ХарактеристикиИспользуются Тогда
			
			ПараметрыОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
			
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(Таблица.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства) КАК Этап,
		|	Таблица.Количество КАК Количество,
		|	НЕ ВЫРАЗИТЬ(Таблица.АлгоритмРасчетаКоличества КАК СТРОКА(100)) = """" КАК РасчетПоФормуле
		|ПОМЕСТИТЬ ВТТаблицаПолуфабрикатов
		|ИЗ
		|	&ТаблицаПолуфабрикатов КАК Таблица
		|ГДЕ
		|	Таблица.ЭтапРедактирование <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка КАК Этап,
		|	ЭтапыПроизводства.Наименование КАК НаименованиеЭтапа,
		|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
		|	ЭтапыПроизводства.Подразделение КАК Подразделение,
		|	ЭтапыПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ВЫБОР
		|		КОГДА &Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление
		|		ИНАЧЕ ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление,
		|	ЕСТЬNULL(ТаблицаПолуфабрикатов.Количество, 0) / ВЫБОР
		|		КОГДА &Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаПолуфабрикатов.Количество, 0) >= &Количество
		|				ИЛИ ЕСТЬNULL(ТаблицаПолуфабрикатов.РасчетПоФормуле, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КоличествоДостаточно,
		|	ЕСТЬNULL(ТаблицаПолуфабрикатов.РасчетПоФормуле, ЛОЖЬ) КАК РасчетПоФормуле,
		|	ВЫБОР
		|		КОГДА ТаблицаПолуфабрикатов.Количество ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДобавитьПромежуточныйВыпускПриВыборе
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПолуфабрикатов КАК ТаблицаПолуфабрикатов
		|		ПО ЭтапыПроизводства.Ссылка = ТаблицаПолуфабрикатов.Этап
		|ГДЕ
		|	ЭтапыПроизводства.Ссылка В (&Предшественники)
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|	
		|	И (
		|		&ДоступноПроизводствоВПроцессеДляПереработки 
		|		ИЛИ НЕ &ДоступноПроизводствоВПроцессеДляПереработки И НЕ ЭтапыПроизводства.ПроизводствоНаСтороне
		|	)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
																					"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		// Предшественники
		МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки.ЭтапРедактирование);
		Предшественники = Справочники.ЭтапыПроизводства.Предшественники(МассивСсылок)[ДанныеСтроки.ЭтапРедактирование];
	
		Запрос.УстановитьПараметр("Предшественники", Предшественники);
		
		// ТаблицаПолуфабрикатов
		ТаблицаПолуфабрикатов = Объект.ВозвратныеОтходы.Выгрузить(
			ПараметрыОтбора,
			"ЭтапРедактирование, Количество, АлгоритмРасчетаКоличества");
		ТаблицаПолуфабрикатов.Свернуть("ЭтапРедактирование, АлгоритмРасчетаКоличества", "Количество");
		
		Запрос.УстановитьПараметр("ТаблицаПолуфабрикатов", ТаблицаПолуфабрикатов);
	
		// Полуфабрикат
		Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
		Запрос.УстановитьПараметр("Упаковка",     ДанныеСтроки.Упаковка);
		Запрос.УстановитьПараметр("Количество",   ДанныеСтроки.Количество);
		
		Запрос.УстановитьПараметр("ДоступноПроизводствоВПроцессеДляПереработки", ДоступноПроизводствоВПроцессеДляПереработки());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			АдресХранилища = ПоместитьВоВременноеХранилище(РезультатЗапроса.Выгрузить(), УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиПримененияМатериала(ДанныеСтроки)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	
	ПараметрыФормы.Вставить("ПрименениеМатериала", ДанныеСтроки.ПрименениеМатериала);
	ПараметрыФормы.Вставить("Альтернативный", ДанныеСтроки.Альтернативный);
	ПараметрыФормы.Вставить("Вероятность", ДанныеСтроки.Вероятность);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаНастройкиПримененияМатериала", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройкиПримененияМатериала(ДанныеСтроки, ВыбранноеЗначение)
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоПрименениюМатериала(ДанныеСтроки);
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные)
	
	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущиеДанные, ПараметрыРаспределенияЗатрат);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкуОбработатьПоСпецификации(ТекущиеДанные)
	
	Если ТекущиеДанные.ОбработатьПоСпецификации Тогда
		ТекущиеДанные.ОбработатьПоСпецификации = Ложь;
		ТекущиеДанные.Спецификация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец МенюОтчеты

#КонецОбласти

#КонецОбласти
