
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Возвращает структуру по умолчанию передаваемую в качестве параметра в процедуру проверки "ПроверитьЗаполнение".
//
// Возвращаемое значение:
// 		Структура - Структура параметров проверки заполнения.
//
Функция ПараметрыПроверкиЗаполнения() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ПотокОшибок", Новый Структура);
	ОбъектыЭксплуатации.ИнициализироватьПотокОшибок(Параметры.ПотокОшибок);
	
	Параметры.Вставить("СообщатьОшибки", Истина);
	Параметры.Вставить("Форма", Неопределено);
	
	Параметры.Вставить("ИспользоватьУзлыОбъектовЭксплуатации", ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации"));
	
	Параметры.Вставить("ПроверятьУзлы", Истина);
	Параметры.Вставить("ПараметрыПроверкиУзлов", Справочники.УзлыОбъектовЭксплуатации.ПараметрыПроверкиЗаполнения());
	Параметры.ПараметрыПроверкиУзлов.Вставить("СообщатьОшибки", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает описание реквизитов объекта эксплуатации
//
// Возвращаемое значение:
//		ТаблицаЗначений - Таблица с описанием реквизитов элемента справочника объектов эксплуатации.
//
Функция СоставРеквизитовОбъектаЭксплуатации() Экспорт
	
	// Описание формата возвращаемой таблицы реквизитов
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОбязателенДляЗаполнения", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ТолькоПросмотрОбязательности", Новый ОписаниеТипов("Булево"));
	
	// Значения заполняемые по-умолчанию в строку каждого из реквизитов
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("Имя", "");
	ЗначенияПоУмолчанию.Вставить("Синоним", "");
	ЗначенияПоУмолчанию.Вставить("ОбязателенДляЗаполнения", "Ложь");
	ЗначенияПоУмолчанию.Вставить("ТолькоПросмотрОбязательности", "Ложь");
	
	// Описания реквизитов, со значениями параметров отличающихся от "по-умолчанию"
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДатаСведений", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Статус", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Класс", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Подкласс", Новый Структура("ОбязателенДляЗаполнения, ТолькоПросмотрОбязательности", Ложь, Истина));
	
	// Список реквизитов, которые должны быть исключены: служебные, не используемые, предназначенные для удаления, булевы признаки
	// 		или любые другие не предназначенные для интерактивной настройки пользователем.
	СтопЛист = Новый Структура(
		"ГруппаОСМеждународныйУчет,
		|Комментарий,
		|ОбъектБытовогоНазначения,
		|ОбъектБытовогоНазначения,
		|ДатаСведений,
		|ЗарегистрированоВРеестреСистемыПлатон,
		|НедвижимоеИмущество,
		|РеквизитНедвижимоеИмуществоОбновлен,
		|Удалить_ГруппаОС,
		|Удалить_КодПоОКОФ,
		|Удалить_ШифрПоЕНАОФ,
		|Удалить_КадастровыйНомер,
		|Удалить_АмортизационнаяГруппа,
		|Удалить_Помещение,
		|Удалить_КадастровыйНомер,
		|Удалить_КодРегиона");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		СтопЛист.Удалить("ГруппаОСМеждународныйУчет");
	КонецЕсли;
	
	// Получение таблицы реквизитов из описания метаданных
	СтруктураСправочника = Метаданные.Справочники.ОбъектыЭксплуатации;
	Для Каждого Реквизит Из СтруктураСправочника.Реквизиты Цикл
		
		Если СтопЛист.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ЗначенияПоУмолчанию);
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Реквизит);
		
		СтрокаРеквизита.ОбязателенДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
		
		Если СтруктураРеквизитов.Свойство(Реквизит.Имя) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, СтруктураРеквизитов[Реквизит.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Выполняет проверку заполнения переданного объекта проверки по заданным параметрам
//
// Параметры:
// 		ОбъектПроверки - ДанныеФормыСтруктура, СправочникОбъект.ОбъектыЭксплуатации, СправочникСсылка.ОбъектыЭксплуатации, Массив
// 			- Объект, ссылка или массив ссылок на объекты эксплуатации, которые необходимо проверить на корректность заполнения
// 		ПараметрыПроверки - Структура - Структура с описанием параметров проверки заполнения, состав полей описан в функции "ПараметрыПроверкиЗаполнения"
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок при проверки.
//
Процедура ПроверитьЗаполнение(ОбъектПроверки, ПараметрыПроверки, Отказ=Ложь) Экспорт
	
	КэшированныеЗначения = Неопределено;
	ОбъектыЭксплуатации.ИнициализироватьКэшированныеЗначенияПроверкиЗаполнения(КэшированныеЗначения);
	
	ТипОбъекта = ТипЗнч(ОбъектПроверки);
	
	МассивОбъектовЭксплуатации = Новый Массив;
	
	Если ТипОбъекта = Тип("СправочникСсылка.ОбъектыЭксплуатации")
		Или ТипОбъекта = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", ОбъектПроверки);
		СформироватьЗапросПроверкиЗаполнения(Запрос.Текст);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПроверитьОбъектЭксплуатации(
				Выборка,
				ПараметрыПроверки,
				КэшированныеЗначения);
			
			МассивОбъектовЭксплуатации.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		ПроверитьОбъектЭксплуатации(
			ОбъектПроверки,
			ПараметрыПроверки,
			КэшированныеЗначения);
		
		МассивОбъектовЭксплуатации.Добавить(ОбъектПроверки.Ссылка);
		
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("ОтказПроверкиУзлов", Ложь);
	
	Если ПараметрыПроверки.ИспользоватьУзлыОбъектовЭксплуатации
		И ПараметрыПроверки.ПроверятьУзлы Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", МассивОбъектовЭксплуатации);
		СформироватьЗапросПроверкиЗаполненияУзлов(Запрос.Текст);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Справочники.УзлыОбъектовЭксплуатации.ПроверитьЗаполнение(
					Выборка,
					ПараметрыПроверки.ПараметрыПроверкиУзлов,
					ПараметрыПроверки.ОтказПроверкиУзлов, // Отказ
					КэшированныеЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПараметрыПроверкиУзлов.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.СообщатьОшибки Тогда
		ОбъектыЭксплуатации.СообщитьОшибкиПроверкиЗаполнения(ПараметрыПроверки.ПотокОшибок, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет разблокировку объекта эксплуатации для разрешения возможности интерактивного редактирования.
//
// Параметры:
// 		ОбъектЭксплуатации - СправочникСсылка.ОбъектЭксплуатации - Ссылка на элемент справочника
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок во время выполнения.
//
Процедура РазблокироватьОбъектЭксплуатации(ОбъектЭксплуатации, Отказ=Ложь) Экспорт
	
	ДанныеЗаполнения = Новый Структура("Статус", Перечисления.СтатусыОбъектовЭксплуатации.Редактируется);
	
	ОбъектСправочника = ОбъектЭксплуатации.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеЗаполнения);
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Ошибка при попытке записи объекта эксплуатации:';
								|en = 'An error occurred while trying to save facility'") + " " + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
КонецПроцедуры

//-- НЕ УТКА

// Формирует сведения об учете основного средства
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации - Основное средство для которого нужно получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения об учете.
//
Функция СведенияОбУчете(ОсновноеСредство) Экспорт

	СведенияОбУчете = ОбъектыЭксплуатацииЛокализация.СведенияОбУчете(ОсновноеСредство);
	
	Если СведенияОбУчете = Неопределено Тогда
		
		Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыАмортизацииОСУУ) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВводаВЭксплуатациюБУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюУУ,
		|	НЕОПРЕДЕЛЕНО КАК ДокументВводаВЭксплуатациюБУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ, НЕОПРЕДЕЛЕНО) КАК ДокументВводаВЭксплуатациюУУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчета, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчета,
		|	ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчета.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСнятияСУчета,
		|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК ГруппаФинансовогоУчета,
		|	ЕСТЬNULL(ПорядокУчетаОССрезПоследних.ГруппаФинансовогоУчета.Представление, """") КАК ГруппаФинансовогоУчетаПредставление,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) КАК СостояниеБУ,
		|	ЕСТЬNULL(ПорядокУчетаОСУУСрезПоследних.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.СрокИспользования, 0) КАК СрокИспользованияУУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСУУСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
		|	0 КАК СрокИспользованияБУ,
		|	0 КАК СрокИспользованияНУ,
		|	МестонахождениеОССрезПоследних.Период КАК ПериодСведенийОМестонахождении,
		|	МестонахождениеОССрезПоследних.Организация КАК Организация,
		|	ЕСТЬNULL(МестонахождениеОССрезПоследних.Организация.Представление, """") КАК ОрганизацияПредставление,
		|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ,
		|	ЕСТЬNULL(МестонахождениеОССрезПоследних.МОЛ.Представление, """") КАК МОЛПредставление,
		|	МестонахождениеОССрезПоследних.Местонахождение КАК Подразделение,
		|	ЕСТЬNULL(МестонахождениеОССрезПоследних.Местонахождение.Представление, """") КАК ПодразделениеПредставление,
		|	МестонахождениеОССрезПоследних.АдресМестонахождения КАК АдресМестонахождения
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК МестонахождениеОССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПервоначальныеСведенияОС
		|		ПО (ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
		|			И (ПервоначальныеСведенияОС.Организация = МестонахождениеОССрезПоследних.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОССрезПоследних
		|		ПО (ПорядокУчетаОССрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСУУСрезПоследних
		|		ПО (ПорядокУчетаОСУУСрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
		|			И (ПорядокУчетаОСУУСрезПоследних.Организация = МестонахождениеОССрезПоследних.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(, ОсновноеСредство = &Ссылка) КАК ПараметрыАмортизацииОСУУСрезПоследних
		|		ПО (ПараметрыАмортизацииОСУУСрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство)
		|			И (ПараметрыАмортизацииОСУУСрезПоследних.Организация = МестонахождениеОССрезПоследних.Организация)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ОсновноеСредство);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СведенияОбУчете = Новый Структура;
		Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
			СведенияОбУчете.Вставить(КолонкаЗапроса.Имя);
		КонецЦикла; 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СведенияОбУчете, Выборка);
		
	КонецЕсли; 
	
	Возврат СведенияОбУчете;

КонецФункции

// Возвращает сведения об основном средстве.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство для которого нужно получить сведения.
//  Период			 - Дата - На какую дату нужно получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения об основном средстве.
//
Функция ПервоначальныеСведения(ОсновноеСредство, Период = '000101010000') Экспорт
	
	ПервоначальныеСведения = ОбъектыЭксплуатацииЛокализация.ПервоначальныеСведения(ОсновноеСредство, Период);
	
	Если ПервоначальныеСведения = Неопределено Тогда
		
		ПервоначальныеСведения = Новый Структура;
		ПервоначальныеСведения.Вставить("Организация", Неопределено);
		ПервоначальныеСведения.Вставить("Местонахождение", Неопределено);
		ПервоначальныеСведения.Вставить("МОЛ", Неопределено);
		ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюБУ", '000101010000');
		ПервоначальныеСведения.Вставить("ДатаВводаВЭксплуатациюУУ", '000101010000');
		ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюБУ", Неопределено);
		ПервоначальныеСведения.Вставить("ДокументВводаВЭксплуатациюУУ", Неопределено);
		ПервоначальныеСведения.Вставить("СостояниеБУ", Перечисления.СостоянияОС.НеПринятоКУчету);
		ПервоначальныеСведения.Вставить("СостояниеУУ", Перечисления.СостоянияОС.НеПринятоКУчету);
		
		Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) Тогда
			
			Возврат ПервоначальныеСведения;
		КонецЕсли; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МестонахождениеОС.Организация КАК Организация,
		|	МестонахождениеОС.Местонахождение КАК Местонахождение,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ КАК ДатаВводаВЭксплуатациюУУ,
		|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ КАК ДокументВводаВЭксплуатациюУУ,
		|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(&Период, ОсновноеСредство = &Ссылка) КАК МестонахождениеОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&Период, ОсновноеСредство = &Ссылка) КАК ПервоначальныеСведенияОС
		|		ПО МестонахождениеОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		|			И МестонахождениеОС.Организация = ПервоначальныеСведенияОС.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(&Период, ОсновноеСредство = &Ссылка) КАК ПорядокУчетаОСУУ
		|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСУУ.ОсновноеСредство
		|			И МестонахождениеОС.Организация = ПорядокУчетаОСУУ.Организация";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ОсновноеСредство);
		Запрос.УстановитьПараметр("Период", Период);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат ПервоначальныеСведения;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ПервоначальныеСведения, Выборка);
		
	КонецЕсли; 
	
	Возврат ПервоначальныеСведения;

КонецФункции
 
// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
// 		Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ГруппаОС");
	Результат.Добавить("АмортизационнаяГруппа");
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("ШифрПоЕНАОФ");
	Результат.Добавить("КодПоОКОФ");
	Результат.Добавить("ГруппаОСМеждународныйУчет");
	Результат.Добавить("НедвижимоеИмущество");
	
	Возврат Результат;
	
КонецФункции

// Возвращает показатель наработки объекта эксплуатации.
//
// Параметры:
//  ОбъектЭксплуатации	 - СправочникСсылка.ОбъектыЭксплуатации	 - Объект эксплуатации.
//  Дата				 - Дата									 - Дата.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПоказателиНаработки - Показатель наработки объекта эксплуатации.
//
Функция ПоказательНаработки(ОбъектЭксплуатации, Дата) Экспорт

	ТекстЗапроса = ОбъектыЭксплуатацииЛокализация.ТекстЗапросаПоказательНаработки();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПорядокУчетаОС.ПоказательНаработки КАК ПоказательНаработки
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(&Дата, ОсновноеСредство = &Объект) КАК ПорядокУчетаОС"
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Объект", ОбъектЭксплуатации);
	Запрос.УстановитьПараметр("ИспользуетсяУправлениеВНА_2_4", ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Дата));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ПоказателиНаработки.ПустаяСсылка();
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
		
	Возврат Выборка.ПоказательНаработки;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		ВыбраннаяФорма = "ФормаВыбора2_4";
		СтандартнаяОбработка = Ложь;

	КонецЕсли;
	
	ВнеоборотныеАктивыВызовСервера.ОбработкаПолученияФормы_ОбъектыЭксплуатации(
		ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ДанныеВыбора = ВнеоборотныеАктивыВызовСервера.ДанныеВыбораОбъектовЭксплуатации(Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция ЕстьПраваНаЧтениеСведений() Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4()
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.СтоимостьОС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.АмортизацияОС)
		ИЛИ НЕ ОбъектыЭксплуатацииЛокализация.ЕстьПраваНаЧтениеСведений() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция ПредставлениеСведенийОбУчете(СведенияОбУчете, СтоимостьИАмортизация, ВключитьНезаполненные = Истина) Экспорт

	СведенияПринятКУчету1 = Новый Массив;
	СведенияПринятКУчету2 = Новый Массив;
	СведенияСрокИспользования1 = Новый Массив;
	СведенияСрокИспользования2 = Новый Массив;
	СведенияСрокИспользования3 = Новый Массив;
	СведенияЛиквидационнаяСтоимость = Новый Массив;
	СведенияСнятСУчета = Новый Массив;
	СведенияГФУ = Новый Массив;
	
	СведенияВосстановительнаяСтоимость = Новый Массив;
	СведенияНакопленнаяАмортизация = Новый Массив;
	СведенияОстаточнаяСтоимость = Новый Массив;
	
	СведенияМестонахождениеОрганизация = Новый Массив;
	СведенияМестонахождениеПодразделение = Новый Массив;
	СведенияМестонахождениеМОЛ = Новый Массив;
	СведенияМестонахождениеАдрес = Новый Массив;
	Период = '000101010000';
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		
	ДоступенВыборОтраженияВУчетах = 
		ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	#Область ОбщиеСведения
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		Если СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету
			ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
			ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета
			ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета Тогда
		
			Если ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ) 
					И ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ)
					И СведенияОбУчете.ДатаВводаВЭксплуатациюУУ = СведенияОбУчете.ДатаВводаВЭксплуатациюБУ
				ИЛИ ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ) 
					И НЕ ДоступенВыборОтраженияВУчетах Тогда
				
				СведенияПринятКУчету1.Добавить(НСтр("ru = 'Дата принятия к учету:';
													|en = 'Date of recognition:'"));
				СведенияПринятКУчету1.Добавить(" ");
				ДатаДокумента = Формат(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ, "ДЛФ=D");
				Если ЗначениеЗаполнено(СведенияОбУчете.ДокументВводаВЭксплуатациюУУ) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументВводаВЭксплуатациюУУ);
				Иначе
					СсылкаНаОбъект = Неопределено;
				КонецЕсли;
				СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
				
			Иначе
				
				Если ДоступенВыборОтраженияВУчетах
					И (СведенияОбУчете.СостояниеУУ <> Перечисления.СостоянияОС.СнятоСУчета 
						ИЛИ ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ)) Тогда
						
					СведенияПринятКУчету1.Добавить(НСтр("ru = 'Дата принятия в регл. учете:';
														|en = 'Date of entering in compl. accounting:'"));
					СведенияПринятКУчету1.Добавить(" ");
					Если ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ) Тогда
						ДатаДокумента = Формат(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ, "ДЛФ=D");
						Если ЗначениеЗаполнено(СведенияОбУчете.ДокументВводаВЭксплуатациюБУ) Тогда
							СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументВводаВЭксплуатациюБУ);
						Иначе
							СсылкаНаОбъект = Неопределено;
						КонецЕсли;
						СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
					Иначе	
						СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'принять к учету';
																						|en = 'enter in the books'"),,,, "#Создать"));
					КонецЕсли; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ)
					ИЛИ ОбъектыЭксплуатацииЛокализация.МожноПринятьКУчету(СведенияОбУчете) Тогда
					
					СведенияПринятКУчету2.Добавить(НСтр("ru = 'Дата принятия в упр. учете:';
														|en = 'Date of entering in man. accounting: '"));
					СведенияПринятКУчету2.Добавить(" ");
					Если ЗначениеЗаполнено(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ) Тогда
						ДатаДокумента = Формат(СведенияОбУчете.ДатаВводаВЭксплуатациюУУ, "ДЛФ=D");
						Если ЗначениеЗаполнено(СведенияОбУчете.ДокументВводаВЭксплуатациюУУ) Тогда
							СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументВводаВЭксплуатациюУУ);
						Иначе
							СсылкаНаОбъект = Неопределено;
						КонецЕсли;
						СведенияПринятКУчету2.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
					Иначе
						СведенияПринятКУчету2.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'принять к учету';
																						|en = 'enter in the books'"),,,, "#Создать"));
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли;
			
			Если СведенияОбУчете.ЛиквидационнаяСтоимость <> 0 Тогда
				СведенияСтрокой = СтрШаблон(НСтр("ru = 'Ликвидационная стоимость: %1 %2';
												|en = 'Residual value: %1 %2'"), 
											Строка(СведенияОбУчете.ЛиквидационнаяСтоимость),
											Строка(Константы.ВалютаУправленческогоУчета.Получить()));
				СведенияЛиквидационнаяСтоимость.Добавить(СведенияСтрокой);
			КонецЕсли; 
			
			СрокИспользованияУУ = ВнеоборотныеАктивыКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияУУ, Ложь);
			СрокИспользованияБУ = ВнеоборотныеАктивыКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияБУ, Ложь);
			СрокИспользованияНУ = ВнеоборотныеАктивыКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СведенияОбУчете.СрокИспользованияНУ, Ложь);
			
			Если СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияНУ
					И СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияУУ 
					И СведенияОбУчете.СрокИспользованияУУ <> 0
				ИЛИ СведенияОбУчете.СрокИспользованияУУ <> 0
					И СведенияОбУчете.СрокИспользованияБУ = 0
					И СведенияОбУчете.СрокИспользованияБУ = 0 Тогда
				
				СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования: %1';
																	|en = 'Useful life: %1'"), СрокИспользованияУУ));
				
			ИначеЕсли СведенияОбУчете.СрокИспользованияБУ <> 0
				И СведенияОбУчете.СрокИспользованияУУ = 0
				И (СведенияОбУчете.СрокИспользованияНУ = 0
					ИЛИ СведенияОбУчете.СрокИспользованияНУ = СведенияОбУчете.СрокИспользованияБУ) Тогда
					
				СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования: %1';
																	|en = 'Useful life: %1'"), СрокИспользованияБУ));
				
			ИначеЕсли СведенияОбУчете.СрокИспользованияНУ <> 0
				И СведенияОбУчете.СрокИспользованияУУ = 0
				И (СведенияОбУчете.СрокИспользованияБУ = 0
					ИЛИ СведенияОбУчете.СрокИспользованияБУ = СведенияОбУчете.СрокИспользованияНУ) Тогда				
					
				СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования: %1';
																	|en = 'Useful life: %1'"), СрокИспользованияНУ));
				
			Иначе
				
				Если СведенияОбУчете.СрокИспользованияБУ <> 0 Тогда
					СведенияСрокИспользования1.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (БУ):  %1';
																		|en = 'Useful life (AC): %1'"), СрокИспользованияБУ));
				КонецЕсли;
				Если СведенияОбУчете.СрокИспользованияНУ <> 0 Тогда
					СведенияСрокИспользования2.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (НУ):  %1';
																		|en = 'Useful life (TA): %1'"), СрокИспользованияНУ));
				КонецЕсли;
				Если СведенияОбУчете.СрокИспользованияУУ <> 0 Тогда
					СведенияСрокИспользования3.Добавить(СтрШаблон(НСтр("ru = 'Срок использования (УУ):  %1';
																		|en = 'Useful life (MA): %1'"), СрокИспользованияУУ));
				КонецЕсли;
				
			КонецЕсли;
				
			//
			Если СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета
				ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета Тогда
				СведенияСнятСУчета.Добавить(НСтр("ru = 'Дата снятия с учета:';
												|en = 'Deregistration date:'"));
				СведенияСнятСУчета.Добавить(" ");
				ДатаДокумента = Формат(СведенияОбУчете.ДатаСнятияСУчета, "ДЛФ=D");
				Если ЗначениеЗаполнено(СведенияОбУчете.ДокументСнятияСУчета) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументСнятияСУчета);
					СведенияСнятСУчета.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
				Иначе
					СведенияСнятСУчета.Добавить(ДатаДокумента);
				КонецЕсли;
			КонецЕсли; 
			
			СведенияГФУ.Добавить(НСтр("ru = 'Группа финансового учета:';
										|en = 'Financial accounting group:'"));
			СведенияГФУ.Добавить(" ");
			Если ЗначениеЗаполнено(СведенияОбУчете.ГруппаФинансовогоУчета) Тогда
				СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ГруппаФинансовогоУчета);
			Иначе
				СсылкаНаОбъект = Неопределено;
			КонецЕсли;
			СведенияГФУ.Добавить(Новый ФорматированнаяСтрока(СведенияОбУчете.ГруппаФинансовогоУчетаПредставление,,,, СсылкаНаОбъект));
		
		ИначеЕсли СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
			ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
			
			СведенияПринятКУчету1.Добавить(НСтр("ru = 'Дата принятия к забалансовому учету:';
												|en = 'Date of entering in off-balance accounting:'"));
			СведенияПринятКУчету1.Добавить(" ");
			ДатаДокумента = Формат(СведенияОбУчете.ДатаВводаВЭксплуатациюБУ, "ДЛФ=D");
			Если ЗначениеЗаполнено(СведенияОбУчете.ДокументВводаВЭксплуатациюБУ) Тогда
				СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.ДокументВводаВЭксплуатациюБУ);
			Иначе
				СсылкаНаОбъект = Неопределено;
			КонецЕсли;
			СведенияПринятКУчету1.Добавить(Новый ФорматированнаяСтрока(ДатаДокумента,,,, СсылкаНаОбъект));
			
		КонецЕсли; 
		
	Иначе
		СведенияПринятКУчету2.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Принять к учету';
																		|en = 'Enter in the books'"),,,, "#Создать"));
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Местонахождение
	
	Если СведенияОбУчете <> Неопределено Тогда
		
		Период = СведенияОбУчете.ПериодСведенийОМестонахождении; 
		
		СведенияМестонахождениеОрганизация.Добавить(СтрШаблон(НСтр("ru = 'Организация: %1';
																	|en = 'Company: %1'"), СведенияОбУчете.ОрганизацияПредставление));
		СведенияМестонахождениеПодразделение.Добавить(СтрШаблон(НСтр("ru = 'Подразделение: %1';
																	|en = 'Department: %1'"), СведенияОбУчете.ПодразделениеПредставление));
		
		СведенияМестонахождениеМОЛ.Добавить(НСтр("ru = 'МОЛ:';
												|en = 'Responsible employee:'"));
		СведенияМестонахождениеМОЛ.Добавить(" ");
		Если ЗначениеЗаполнено(СведенияОбУчете.МОЛ) Тогда
			СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(СведенияОбУчете.МОЛ);
			СведенияМестонахождениеМОЛ.Добавить(Новый ФорматированнаяСтрока(СведенияОбУчете.МОЛПредставление,,,, СсылкаНаОбъект));
		ИначеЕсли ВключитьНезаполненные Тогда
			СведенияМестонахождениеМОЛ.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не указан';
																				|en = 'not specified'"),, ЦветаСтиля.НезаполненноеПолеТаблицы));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбУчете.АдресМестонахождения) Тогда
			СведенияМестонахождениеАдрес.Добавить(НСтр("ru = 'Адрес:';
														|en = 'Branch ID:'"));
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(СведенияОбУчете.АдресМестонахождения);
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ПоказатьНаКарте,,,, СведенияОбУчете.АдресМестонахождения));
		ИначеЕсли ВключитьНезаполненные Тогда
			СведенияМестонахождениеАдрес.Добавить(НСтр("ru = 'Адрес:';
														|en = 'Branch ID:'"));
			СведенияМестонахождениеАдрес.Добавить(" ");
			СведенияМестонахождениеАдрес.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не указан';
																					|en = 'not specified'"),, ЦветаСтиля.НезаполненноеПолеТаблицы));
		КонецЕсли; 
		
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область Суммы
	
	Если НЕ ДоступенВыборОтраженияВУчетах 
		И ВалютаРегл = ВалютаУпр
		И СведенияОбУчете <> Неопределено Тогда
		
		ПредставлениеСуммы = ВнеоборотныеАктивыСлужебный.ПредставлениеСуммы(
			СтоимостьИАмортизация.Стоимость, НСтр("ru = 'Восстановительная стоимость:';
													|en = 'Replacement cost:'"), ВалютаУпр);
		СведенияВосстановительнаяСтоимость.Добавить(ПредставлениеСуммы);
		
		ПредставлениеСуммы = ВнеоборотныеАктивыСлужебный.ПредставлениеСуммы(
			СтоимостьИАмортизация.Амортизация, НСтр("ru = 'Накопленная амортизация:';
													|en = 'Accumulated depreciation:'"), ВалютаУпр);
		СведенияНакопленнаяАмортизация.Добавить(ПредставлениеСуммы);
		
		ПредставлениеСуммы = ВнеоборотныеАктивыСлужебный.ПредставлениеСуммы(
			СтоимостьИАмортизация.Стоимость - СтоимостьИАмортизация.Амортизация, НСтр("ru = 'Остаточная стоимость:';
																						|en = 'Residual value:'"), ВалютаУпр);
		СведенияОстаточнаяСтоимость.Добавить(ПредставлениеСуммы);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ПредставлениеСведений = Новый Структура;
	ПредставлениеСведений.Вставить("Период", Период);
	ПредставлениеСведений.Вставить("СведенияПринятКУчету1", СведенияПринятКУчету1);
	ПредставлениеСведений.Вставить("СведенияПринятКУчету2", СведенияПринятКУчету2);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования1", СведенияСрокИспользования1);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования2", СведенияСрокИспользования2);
	ПредставлениеСведений.Вставить("СведенияСрокИспользования3", СведенияСрокИспользования3);
	ПредставлениеСведений.Вставить("СведенияЛиквидационнаяСтоимость", СведенияЛиквидационнаяСтоимость);
	ПредставлениеСведений.Вставить("СведенияСнятСУчета", СведенияСнятСУчета);
	ПредставлениеСведений.Вставить("СведенияГФУ", СведенияГФУ);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеОрганизация", СведенияМестонахождениеОрганизация);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеПодразделение", СведенияМестонахождениеПодразделение);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеМОЛ", СведенияМестонахождениеМОЛ);
	ПредставлениеСведений.Вставить("СведенияМестонахождениеАдрес", СведенияМестонахождениеАдрес);
	ПредставлениеСведений.Вставить("СведенияВосстановительнаяСтоимость", СведенияВосстановительнаяСтоимость);
	ПредставлениеСведений.Вставить("СведенияНакопленнаяАмортизация", СведенияНакопленнаяАмортизация);
	ПредставлениеСведений.Вставить("СведенияОстаточнаяСтоимость", СведенияОстаточнаяСтоимость);
	
	Возврат ПредставлениеСведений;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы = Ложь, МассивОбъектов = Неопределено) Экспорт

	ОписаниеЗапросаДляВыбора = ОбъектыЭксплуатацииЛокализация.ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы, МассивОбъектов);
	
	Если ОписаниеЗапросаДляВыбора = Неопределено Тогда
		
		Если Параметры.Свойство("Контекст") Тогда
			ДоступныеКонтексты = Новый Структура(Параметры.Контекст);
		Иначе
			ДоступныеКонтексты = Новый Структура("УУ"); // По умолчанию доступны все контексты.
		КонецЕсли;
		
		ОтборСписка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Отбор", Новый Структура);
		
		Если ОтборСписка.Свойство("ОтражатьВРеглУчете")
			И НЕ ОтборСписка.ОтражатьВРеглУчете
			И ДоступныеКонтексты.Свойство("БУ") Тогда
			ДоступныеКонтексты.Удалить("БУ"); // Доступен выбор отражения в учете и в регл. учете нет отражения.
		КонецЕсли; 
		
		Если ОтборСписка.Свойство("ОтражатьВУпрУчете")
			И НЕ ОтборСписка.ОтражатьВУпрУчете
			И ДоступныеКонтексты.Свойство("УУ") Тогда
			ДоступныеКонтексты.Удалить("УУ"); // Доступен выбор отражения в учете и в упр. учете нет отражения.
		КонецЕсли; 
		
		Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
			И НЕ ЗначениеЗаполнено(Параметры.ВариантПримененияЦелевогоФинансирования) Тогда
			ОтборСписка.Удалить("НаправлениеДеятельности");
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
			ОтборСписка.Удалить("Подразделение");
			ОтборСписка.Удалить("Организация");
			ОтборСписка.Удалить("МОЛ");
		КонецЕсли;
		
		ДополнительныеПоля = "";
		ТекстОтборы = "";
		ПараметрыЗапроса = Новый Структура;
		ДоступныеПоля = Новый Массив;
		НеобходимыеТаблицы = Новый Структура;
	
		Если ДоступныеКонтексты.Свойство("УУ")
			И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
			
			ПолеОрганизация = "ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
			ПолеМОЛ = "ЕСТЬNULL(МестонахождениеОС.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
			ПолеПодразделение = "ЕСТЬNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
			ПолеАдресМестонахождения = "ЕСТЬNULL(МестонахождениеОС.АдресМестонахождения, """""""")";
			
			НеобходимыеТаблицы.Вставить("МестонахождениеОС");
			
		Иначе
			
			ПолеОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			ПолеМОЛ = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
			ПолеПодразделение = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
			ПолеАдресМестонахождения = """""";
			
		КонецЕсли;
		
		Если ДоступныеКонтексты.Свойство("УУ")
			И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОС) Тогда
			
			ПолеГФУ = "ЕСТЬNULL(ПорядокУчетаОС.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка))";
			
			НеобходимыеТаблицы.Вставить("ПорядокУчетаОС");
			
		Иначе
			
			ПолеГФУ = "ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)";
			
		КонецЕсли;
		
		Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
			И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОС)
			И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
			
			ПолеДатаПринятияКУчетуРегл = "ДАТАВРЕМЯ(1, 1, 1)";
			ПолеДатаПринятияКУчетуУпр = "ЕСТЬNULL(ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1))";
			
			НеобходимыеТаблицы.Вставить("ПервоначальныеСведенияОС");
			
		Иначе
			ПолеДатаПринятияКУчетуРегл = "ДАТАВРЕМЯ(1, 1, 1)";
			ПолеДатаПринятияКУчетуУпр = "ДАТАВРЕМЯ(1, 1, 1)";
		КонецЕсли;
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,%1 КАК Организация
			|,%2 КАК МОЛ
			|,%3 КАК Подразделение
			|,%4 КАК АдресМестонахождения
			|,%5 КАК ГруппаФинансовогоУчета
			|,%6 КАК ДатаПринятияКУчетуРегл
			|,%7 КАК ДатаПринятияКУчетуУпр";
		
		ДополнительныеПоля = СтрШаблон(
			ДополнительныеПоля, 
			ПолеОрганизация, 
			ПолеМОЛ, 
			ПолеПодразделение, 
			ПолеАдресМестонахождения, 
			ПолеГФУ,
			ПолеДатаПринятияКУчетуРегл,
			ПолеДатаПринятияКУчетуУпр);
		
		Если ДоступныеКонтексты.Свойство("УУ")
			И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) Тогда
			
			ДополнительныеПоля = ДополнительныеПоля + "
				|,ВЫБОР 
				|	КОГДА НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа 
				|		ТОГДА ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
				|	КОНЕЦ КАК СостояниеУУ";
			
			НеобходимыеТаблицы.Вставить("ПорядокУчетаОСУУ");
			
		Иначе
			
			ДополнительныеПоля = ДополнительныеПоля + ",ВЫБОР 
				|	КОГДА НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа 
				|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
				|	КОНЕЦ КАК СостояниеУУ";
			
		КонецЕсли;
		
		ДоступенВыборУчета = ОтборСписка.Свойство("ОтражатьВРеглУчете") ИЛИ ОтборСписка.Свойство("ОтражатьВУпрУчете");
		
		Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) Тогда
			
			Если ОтборСписка.Свойство("Состояние") Тогда
					
				Если ДоступныеКонтексты.Свойство("УУ") Тогда
					ТекстОтборы = "
					|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В(&Состояние)";
				КонецЕсли;
				
				Если ТипЗнч(ОтборСписка.Состояние) = Тип("ФиксированныйМассив") Тогда
					ПараметрыЗапроса.Вставить("Состояние", Новый Массив(ОтборСписка.Состояние));
				Иначе
					ПараметрыЗапроса.Вставить("Состояние", ОтборСписка.Состояние);
				КонецЕсли;
				
				Параметры.Отбор.Удалить("Состояние");
				
			Иначе
				
				Если ДоступныеКонтексты.Свойство("УУ") Тогда
					ТекстОтборы = "
					|	(ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) = &Состояние
					|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка))";
				КонецЕсли;
				
				Если ТекстОтборы <> "" Тогда
					ПараметрыЗапроса.Вставить("Состояние", Перечисления.СостоянияОС.ПустаяСсылка());
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если УстановитьВсеОтборы Тогда
			
			Для каждого КлючИЗначение Из ОтборСписка Цикл
				
				Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КлючИЗначение.Ключ = "Организация" Тогда
					ПутьКПолю = ПолеОрганизация;
				ИначеЕсли КлючИЗначение.Ключ = "Подразделение" Тогда
					ПутьКПолю = ПолеПодразделение;
				ИначеЕсли КлючИЗначение.Ключ = "МОЛ" Тогда
					ПутьКПолю = ПолеМОЛ;
				ИначеЕсли КлючИЗначение.Ключ = "НаправлениеДеятельности"
					ИЛИ КлючИЗначение.Ключ = "Статус" Тогда
					ПутьКПолю = "СправочникОбъектыЭксплуатации." + КлючИЗначение.Ключ;
				Иначе
					Продолжить;
				КонецЕсли;
				
				ЭтоМассив = ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив") 
							ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("Массив");
							
				ТекстОтборы = ТекстОтборы 
								+ Символы.ПС 
								+ ?(ТекстОтборы <> "", "И ","")
								+ ПутьКПолю 
								+ ?(ЭтоМассив, " В (&" + КлючИЗначение.Ключ + ")", " = &" + КлючИЗначение.Ключ);
								
				ПараметрыЗапроса.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
		ТекстСоединения = "";
		
		Если НеобходимыеТаблицы.Свойство("МестонахождениеОС")
			ИЛИ НеобходимыеТаблицы.Свойство("ПервоначальныеСведенияОС")
			ИЛИ НеобходимыеТаблицы.Свойство("ПорядокУчетаОСУУ")
			ИЛИ НеобходимыеТаблицы.Свойство("ПорядокУчетаОСБУ") Тогда
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК МестонахождениеОС
			|		ПО СправочникОбъектыЭксплуатации.Ссылка = МестонахождениеОС.ОсновноеСредство";
		КонецЕсли;
		
		Если НеобходимыеТаблицы.Свойство("ПорядокУчетаОС") Тогда
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаОС
			|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОС.ОсновноеСредство";
		КонецЕсли;
		
		Если НеобходимыеТаблицы.Свойство("ПервоначальныеСведенияОС") Тогда
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПервоначальныеСведенияОС
			|		ПО ПервоначальныеСведенияОС.Организация = МестонахождениеОС.Организация
			|			И ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
		КонецЕсли;
		
		Если НеобходимыеТаблицы.Свойство("ПорядокУчетаОСБУ") Тогда
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаОСБУ
			|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСБУ.ОсновноеСредство
			|			И ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация";
		КонецЕсли;
		
		Если НеобходимыеТаблицы.Свойство("ПорядокУчетаОСУУ") Тогда
			ТекстСоединения = ТекстСоединения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//) КАК ПорядокУчетаОСУУ
			|		ПО СправочникОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСУУ.ОсновноеСредство
			|			И ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация";
		КонецЕсли;
		
		ПараметрыСрезаПоследних = "";
		Если Параметры.Свойство("ДатаСведений") Тогда
			ПараметрыСрезаПоследних = "&ДатаСведений";
			ПараметрыЗапроса.Вставить("ДатаСведений", КонецДня(Параметры.ДатаСведений));
		КонецЕсли; 
		Если Параметры.Свойство("ТекущийРегистратор") Тогда
			ПараметрыСрезаПоследних = ПараметрыСрезаПоследних 
				+ ",Регистратор <> &ТекущийРегистратор";
			ПараметрыЗапроса.Вставить("ТекущийРегистратор", Параметры.ТекущийРегистратор);
		КонецЕсли; 
		ТекстСоединения = СтрЗаменить(ТекстСоединения, "//ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ//", ПараметрыСрезаПоследних);
		
		ТекстПервые = "";
		Если Параметры.Свойство("СтрокаПоиска") Тогда
			ТекстОтборы = ТекстОтборы + "
			|" + ?(ТекстОтборы <> "", "И ","")
			+ "СправочникОбъектыЭксплуатации.Наименование ПОДОБНО &СтрокаПоиска
				|	И НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа
				|	И НЕ СправочникОбъектыЭксплуатации.ПометкаУдаления";
			ТекстПервые = "РАЗРЕШЕННЫЕ ПЕРВЫЕ 10";
			ПараметрыЗапроса.Вставить("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
		КонецЕсли;
		
		Если МассивОбъектов <> Неопределено Тогда
			ТекстОтборы = ТекстОтборы + "
			|" + ?(ТекстОтборы <> "", "И ","")
			+ "СправочникОбъектыЭксплуатации.Ссылка В(&МассивОбъектов)
				|	И НЕ СправочникОбъектыЭксплуатации.ЭтоГруппа
				|	И НЕ СправочникОбъектыЭксплуатации.ПометкаУдаления";
			ПараметрыЗапроса.Вставить("МассивОбъектов", МассивОбъектов);
		КонецЕсли; 
		
		Если ТекстОтборы <> "" Тогда
			ТекстОтборы = "
			|ГДЕ
			|" + ТекстОтборы;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ //ПЕРВЫЕ//
		|	СправочникОбъектыЭксплуатации.Ссылка,
		|	СправочникОбъектыЭксплуатации.ПометкаУдаления,
		|	СправочникОбъектыЭксплуатации.Родитель,
		|	СправочникОбъектыЭксплуатации.ЭтоГруппа,
		|	СправочникОбъектыЭксплуатации.Код,
		|	СправочникОбъектыЭксплуатации.Наименование,
		|	СправочникОбъектыЭксплуатации.ИнвентарныйНомер,
		|	СправочникОбъектыЭксплуатации.ГруппаОСМеждународныйУчет,
		|	СправочникОбъектыЭксплуатации.ДатаВыпуска,
		|	СправочникОбъектыЭксплуатации.ЗаводскойНомер,
		|	СправочникОбъектыЭксплуатации.Изготовитель,
		|	СправочникОбъектыЭксплуатации.Класс,
		|	СправочникОбъектыЭксплуатации.Модель,
		|	СправочникОбъектыЭксплуатации.НаименованиеПолное,
		|	СправочникОбъектыЭксплуатации.НомерПаспорта,
		|	СправочникОбъектыЭксплуатации.ОбъектБытовогоНазначения,
		|	СправочникОбъектыЭксплуатации.Подкласс,
		|	СправочникОбъектыЭксплуатации.Расположение,
		|	СправочникОбъектыЭксплуатации.РемонтирующееПодразделение,
		|	СправочникОбъектыЭксплуатации.СерийныйНомер,
		|	СправочникОбъектыЭксплуатации.Статус,
		|	СправочникОбъектыЭксплуатации.НаправлениеДеятельности,
		|	СправочникОбъектыЭксплуатации.Комментарий
		|	//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК СправочникОбъектыЭксплуатации
		|	//СОЕДИНЕНИЯ//
		|	//ОТБОРЫ//";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//", ДополнительныеПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СОЕДИНЕНИЯ//", ТекстСоединения);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОТБОРЫ//", ТекстОтборы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ//", ТекстПервые);

		ОписаниеЗапросаДляВыбора = Новый Структура("ТекстЗапроса,ПараметрыЗапроса,ДоступныеПоля", ТекстЗапроса, ПараметрыЗапроса, ДоступныеПоля);
	
	КонецЕсли;
	
	Возврат ОписаниеЗапросаДляВыбора;
	
КонецФункции

//++ НЕ УТКА

#Область ПроверкаЗаполненияОбъектовЭксплуатации

Процедура СформироватьЗапросПроверкиЗаполнения(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.*
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В (&ОбъектыЭксплуатации)";
	
КонецПроцедуры

Процедура СформироватьЗапросПроверкиЗаполненияУзлов(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УзлыОбъектовЭксплуатации.*
		|ИЗ
		|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|ГДЕ
		|	УзлыОбъектовЭксплуатации.Владелец В(&ОбъектыЭксплуатации)
		|	И УзлыОбъектовЭксплуатации.Владелец <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
		|	И НЕ УзлыОбъектовЭксплуатации.ПометкаУдаления
		|	И УзлыОбъектовЭксплуатации.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ПустаяСсылка))";
	
КонецПроцедуры

Функция ПолучитьОбязательныеРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = КэшированныеЗначения.ОбязательныеРеквизиты.Получить(Класс);
	
	Если ОбязательныеРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(Класс) Тогда
			Запрос.Текст =
				"ВЫБРАТЬ
				|	РеквизитыДляКонтроляОбъектов.Имя,
				|	РеквизитыДляКонтроляОбъектов.Синоним
				|ИЗ
				|	Справочник.КлассыОбъектовЭксплуатации.РеквизитыДляКонтроля КАК Реквизиты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыОбъектов КАК РеквизитыДляКонтроляОбъектов
				|		ПО Реквизиты.ИмяРеквизита = РеквизитыДляКонтроляОбъектов.Имя
				|ГДЕ
				|	Реквизиты.Ссылка = &Класс
				|	И Реквизиты.ОбязателенДляЗаполнения";
		Иначе
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Реквизиты.Имя,
				|	Реквизиты.Синоним
				|ИЗ
				|	РеквизитыОбъектов КАК Реквизиты
				|ГДЕ
				|	Реквизиты.ОбязателенДляЗаполнения";
			
		КонецЕсли;
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеРеквизиты = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ОбязательныеРеквизиты.Вставить(Класс, ОбязательныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

Функция ПолучитьОбязательныеДопРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеДопРеквизиты = КэшированныеЗначения.ОбязательныеДопРеквизиты.Получить(Класс);
	
	Если ОбязательныеДопРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.Ссылка = ВЫРАЗИТЬ(&Класс КАК Справочник.КлассыОбъектовЭксплуатации).НаборСвойств
			|	И (ДопРеквизиты.Свойство.ЗаполнятьОбязательно)
			|	И НЕ ДопРеквизиты.Свойство В
			|				(ВЫБРАТЬ
			|					ОбщиеДопРеквизитыОбъектов.Свойство
			|				ИЗ
			|					ОбщиеДопРеквизитыОбъектов КАК ОбщиеДопРеквизитыОбъектов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	ОбщиеДопРеквизитыОбъектов КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.ЗаполнятьОбязательно");
		
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеДопРеквизиты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
		
		КэшированныеЗначения.ОбязательныеДопРеквизиты.Вставить(Класс, ОбязательныеДопРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеДопРеквизиты;
	
КонецФункции

Функция ПолучитьПараметрыУчетаНаработок(Класс, КэшированныеЗначения)
	
	ПараметрыУчетаНаработок = КэшированныеЗначения.ПараметрыУчетаНаработок.Получить(Класс);
	
	Если ПараметрыУчетаНаработок = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Параметры.ПоказательНаработки КАК ПоказательНаработки,
			|	Параметры.РассчитыватьОстаточныйРесурс КАК ЗаполнятьНазначенныйРесурс,
			|	Параметры.РегистрироватьОтИсточника КАК ЗаполнятьИсточник
			|ИЗ
			|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК Параметры
			|ГДЕ
			|	Параметры.Ссылка = &Класс
			|	И (Параметры.РегистрироватьОтИсточника
			|			ИЛИ Параметры.РассчитыватьОстаточныйРесурс)");
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ПараметрыУчетаНаработок = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ПараметрыУчетаНаработок.Вставить(Класс, ПараметрыУчетаНаработок);
		
	КонецЕсли;
	
	Возврат ПараметрыУчетаНаработок;
	
КонецФункции

Процедура ПроверитьОбъектЭксплуатации(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = ПолучитьОбязательныеРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
	
	Для Каждого Реквизит Из ОбязательныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(ОбъектПроверки[СокрЛП(Реквизит.Имя)]) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено.';
					|en = 'The ""%1"" field is not filled in.'"),
				СокрЛП(Реквизит.Синоним));
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект."+Реквизит.Имя,
				ТекстОшибки,
				"Реквизиты",
				0,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ОбязательныеДопРеквизиты = ПолучитьОбязательныеДопРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаДопРеквизитов = ОбъектПроверки.ДополнительныеРеквизиты.Выгрузить();
		
		Для Каждого Свойство Из ОбязательныеДопРеквизиты Цикл
			
			Если ТаблицаДопРеквизитов.Найти(Свойство, "Свойство") = Неопределено Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле ""%1"" не заполнено.';
						|en = 'The ""%1"" field is not filled in.'"),
					Свойство);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ГруппаДополнительныеРеквизиты",
					ТекстОшибки,
					"ДопРеквизиты",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Не (ПараметрыПроверки.Форма.Свойства_ИспользоватьСвойства И ПараметрыПроверки.Форма.Свойства_ИспользоватьДопРеквизиты) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ПараметрыПроверки.Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			Если Строка.ЗаполнятьОбязательно Тогда
				
				Если НЕ ЗначениеЗаполнено(ПараметрыПроверки.Форма[Строка.ИмяРеквизитаЗначение]) Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Поле ""%1"" не заполнено.';
							|en = 'The ""%1"" field is not filled in.'"),
						Строка.Наименование);
					
					ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
						ПараметрыПроверки.ПотокОшибок,
						ОбъектПроверки.Ссылка,
						Строка.ИмяРеквизитаЗначение,
						ТекстОшибки,
						"ДопРеквизиты",
						0,
						ТекстОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	РабочиеЦентры = ОбъектПроверки.РабочиеЦентры.Выгрузить();
	Для ТекИндекс=0 По РабочиеЦентры.Количество()-1 Цикл
		
		Строка = РабочиеЦентры[ТекИндекс];
		
		Если Не ЗначениеЗаполнено(Строка["РабочийЦентр"]) Тогда
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект.РабочиеЦентры[%1].РабочийЦентр",
				НСтр("ru = 'Не заполнено поле ""Рабочий центр""';
					|en = 'Fill in the ""Operation center"" field'"),
				"РабочиеЦентры",
				ТекИндекс,
				НСтр("ru = 'Не заполнена колонка ""Рабочий центр"" в строке %1 списка ""Рабочие центры""';
					|en = 'Fill in the ""Operation center"" column in line %1 of the ""Operation centers"" list'"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ПараметрыУчетаНаработки = ПолучитьПараметрыУчетаНаработок(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаПараметров = ОбъектПроверки.ПараметрыУчетаНаработок.Выгрузить();
		
		Для Каждого НастройкаПоказателя Из ПараметрыУчетаНаработки Цикл
			
			Строка = ТаблицаПараметров.Найти(НастройкаПоказателя.ПоказательНаработки, "ПоказательНаработки");
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Назначенный ресурс показателя наработки ""%1"" не заполнен';
						|en = 'Specify lifetime for the ""%1"" running time value'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.Источник)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Источник текущих значений показателя наработки ""%1"" не заполнен';
						|en = 'Specify the source of the current values of ""%1"" running time'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Для ТекИндекс=0 По ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()-1 Цикл
			
			Строка = ПараметрыПроверки.Форма.ПараметрыУчетаНаработок[ТекИндекс];
			
			Если Строка.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Назначенный ресурс показателя наработки ""%1"" не заполнен';
						|en = 'Specify lifetime for the ""%1"" running time value'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].НазначенныйРесурс",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			Если Строка.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.Источник) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Источник текущих значений показателя наработки ""%1"" не заполнен';
						|en = 'Specify the source of the current values of ""%1"" running time'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].Источник",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ПодключаемыеКоманды

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПраваПользователяПовтИсп.ПечатьЭтикетокИЦенников() Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ВнеоборотныеАктивыКлиент.ПечатьЭтикетокОбъектовЭксплуатации";
		КомандаПечати.Идентификатор = "ЭтикеткаОбъектовЭксплуатации";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки';
											|en = 'Labels'");
		
	КонецЕсли;
	
	ОбъектыЭксплуатацииЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ПринятиеКУчетуОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.МодернизацияОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПереоценкаОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПеремещениеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ПодготовкаКПередачеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеОС2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.НаработкаОбъектовЭксплуатации.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.РазукомплектацияОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//++ НЕ УТКА
	Команда = Документы.ЗаказНаРемонт.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.УстановкаЗначенийНаработки.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСписка";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//-- НЕ УТКА
	
	ОбъектыЭксплуатацииЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Команда = Отчеты.СправкаРасчетАмортизацииОС2_4.ДобавитьКомандуОтчетаПоОС(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
	КонецЕсли;
	
	ОбъектыЭксплуатацииЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ОбъектыЭксплуатацииЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	СписокЗапросов = Новый Массив;
	
	ОбъектыЭксплуатацииЛокализация.ДополнитьТекстЗапросаРегистрацииДанныхКОбработке(СписокЗапросов);
	
	Если СписокЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьРеглУчет", Константы.ИспользоватьРеглУчет.Получить());
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ОбъектыЭксплуатации";
	
	ДопПараметры = Новый Структура;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
 	Пока Выборка.Следующий() Цикл
 		
 		НачатьТранзакцию();
		
 		Попытка
			
 			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыЭксплуатации");
 			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
 			Блокировка.Заблокировать();
 			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
 				Продолжить;
			КонецЕсли;
			
			ОбъектыЭксплуатацииЛокализация.ОбработатьДанныеДляПереходаНаНовуюВерсию(ДанныеОбъекта, ДопПараметры);
			
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
 		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%';
									|en = 'Cannot process the object: %Ссылка% due to: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
 		КонецПопытки;
 
 	КонецЦикла;
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли