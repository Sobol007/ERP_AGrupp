//<--АГ:[Казначейство][24.04.2019 18:05][Дядюра С.С.]

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.СрокПлатежа = ТекущаяДата();
		Объект.Наименование = "Реестр платежных документов по " + Формат(ТекущаяДата(),"ДЛФ=D");
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		//Объект.Состояние = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована;
	КонецЕсли;
	ИнициализироватьКомпоновщикНастроек();
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Справочники.АГ_РеестрПлатежныхДокументов.ПолучитьМакет("Макет");
				
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.СрокПлатежа;
КонецПроцедуры


&НаКлиенте
Процедура СрокПлатежаПриИзменении(Элемент)
	Объект.Наименование = "Реестр платежных документов по " + Формат(Объект.СрокПлатежа,"ДЛФ=D");
КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Объект.ЗаявкиКОплате.Очистить();
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();

	//Настройки.ПараметрыДанных.Элементы.Найти("ДатаНП").Значение = НачалоДня(Объект.СрокПлатежа);
	//Настройки.ПараметрыДанных.Элементы.Найти("ДатаНП").Использование = Истина;
	
	Настройки.ПараметрыДанных.Элементы.Найти("ДатаКП").Значение = КонецДня(Объект.СрокПлатежа);
	Настройки.ПараметрыДанных.Элементы.Найти("ДатаКП").Использование = Истина;
	
	Настройки.ПараметрыДанных.Элементы.Найти("Валюта").Значение = Объект.Валюта;
	Настройки.ПараметрыДанных.Элементы.Найти("Валюта").Использование = Истина;
	
	Настройки.ПараметрыДанных.Элементы.Найти("Организация").Значение = Объект.Организация;
	Настройки.ПараметрыДанных.Элементы.Найти("Организация").Использование = Истина;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений") , Ложь, );
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных); 
	ТабРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ПроцессорВывода.УстановитьОбъект(ТабРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	Объект.ЗаявкиКОплате.Загрузить(ТабРезультат);
	ЗаполнитьТЧПП();
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБанковскийСчет(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ЗаявкиКОплате.ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого Стр Из Элементы.ЗаявкиКОплате.ВыделенныеСтроки Цикл
			Объект.ЗаявкиКОплате[Стр].БанковскийСчет = Объект.БанковскийСчет;
			УстановитьБанкСчетНаСервере(Стр);
		КонецЦикла;    
	Иначе
		Для Каждого Стр Из Объект.ЗаявкиКОплате Цикл	
			Стр.БанковскийСчет = Объект.БанковскийСчет;
			УстановитьБанкСчетНаСервере(Стр.НомерСтроки-1);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьБанкСчетНаСервере(СтрокаТЧ)
	ТекСтрока = Объект.ЗаявкиКОплате[СтрокаТЧ];	
	ДокОбъект = ТекСтрока.Заявка.ПолучитьОбъект();
	ДокОбъект.БанковскийСчет = Объект.БанковскийСчет;
	Для Каждого Стр Из ДокОбъект.РаспределениеПоСчетам Цикл
		Стр.БанковскийСчетКасса = Объект.БанковскийСчет;
	КонецЦикла;
	Если ДокОбъект.Проведен Тогда
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокОбъект.Записать();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РазместитьВсе(Команда)
	Если Элементы.ЗаявкиКОплате.ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого Стр Из Элементы.ЗаявкиКОплате.ВыделенныеСтроки Цикл
			Объект.ЗаявкиКОплате[Стр].Размещена = Истина;
			РазместитьЗаявкуНаСервере(Стр);
		КонецЦикла;
	Иначе
		Для Каждого Стр Из Объект.ЗаявкиКОплате Цикл
			Стр.Размещена = Истина;
			РазместитьЗаявкуНаСервере(Стр.НомерСтроки-1);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКОплатеРазмещенаПриИзменении(Элемент)
	Если Элементы.ЗаявкиКОплате.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РазместитьЗаявкуНаСервере(Элементы.ЗаявкиКОплате.ТекущиеДанные.НомерСтроки-1)
КонецПроцедуры

&НаСервере
Процедура РазместитьЗаявкуНаСервере(Строка)
	ТекСтрока = Объект.ЗаявкиКОплате[Строка];	
	ОбЗаявка =  ТекСтрока.Заявка.ПолучитьОбъект();
	Если ОбЗаявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована ИЛИ ОбЗаявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		Если ТекСтрока.Размещена Тогда
			ОбЗаявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
			Попытка
				ОбЗаявка.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекСтрока.Размещена = Ложь;
			КонецПопытки;
		Иначе
			ОбЗаявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована;
			Попытка
				ОбЗаявка.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекСтрока.Размещена = Ложь;
			КонецПопытки;		
		КонецЕсли;		
	Иначе
		ТекСтрока.Размещена = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура РазместитьВсеНаСервере()
	Для Каждого Стр Из Объект.ЗаявкиКОплате Цикл
		Если Стр.Заявка.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована ИЛИ Стр.Заявка.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Размещена Тогда
			ОбЗаявка = Стр.Заявка.ПолучитьОбъект();
			ОбЗаявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
			ОбЗаявка.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СдвигЗаявокСРазбиением(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ДанныеПереноса = Новый Структура;
		ДанныеПереноса.Вставить("КлючЗаписи", ДополнительныеПараметры.ЗаявкиКПереносу[0]);
		ДанныеПереноса.Вставить("Сумма", ДополнительныеПараметры.Сумма);
		
		ЗаявкиКПереносу = Новый Массив;
		ЗаявкиКПереносу.Добавить(ДанныеПереноса);
		
		ПеренестиЗаявкиКлиент(ЗаявкиКПереносу, ДополнительныеПараметры.Дата, ДополнительныеПараметры.БанковскийСчетКасса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗаявкиКлиент(ЗаявкиКПереносу, ДатаПлатежа, БанковскийСчетКасса)
	
	ДлительнаяОперация = ПеренестиЗаявкиСервер(ЗаявкиКПереносу, ДатаПлатежа, БанковскийСчетКасса);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииПереносаЗаявок", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПеренестиЗаявкиСервер(ЗаявкиКПереносу, ДатаПлатежа, БанковскийСчетКасса)
	
	ДанныеПереноса = Новый Соответствие;
	ПодготовитьДанныеПереносаЗаявок(ДанныеПереноса, ЗаявкиКПереносу, ДатаПлатежа, БанковскийСчетКасса);
	
	Если Не ДанныеПереноса.Количество() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Статус", "Ошибка");
		Результат.Вставить("АдресРезультата", "");
		Результат.Вставить("АдресДополнительногоРезультата", "");
		Результат.Вставить("КраткоеПредставлениеОшибки",
			Нстр("ru = 'Не удалось обработать заявки.'"));
		Результат.Вставить("ПодробноеПредставлениеОшибки", "");
		
		Возврат Результат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Перенос заявок на расходование денежных средств'");
	ВыполняемыйМетод = "Обработки.ПлатежныйКалендарь.ПеренестиЗаявки";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеПереноса", ДанныеПереноса);
	СтруктураПараметров.Вставить("ПланироватьСДаты", Объект.СрокПлатежа);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	Если ДанныеПереноса.Количество() = 1 Тогда
		ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииПереносаЗаявок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьДанныеПереносаЗаявок(ДанныеПереноса, ЗаявкиКПереносу, ДатаПлатежа, БанковскийСчетКасса)
	
	Для каждого ЗаявкаКПереносу Из ЗаявкиКПереносу Цикл
		
		СтруктураПереноса = Обработки.ПлатежныйКалендарь.СтруктураПереносаЗаявки();
		
		Если ТипЗнч(ЗаявкаКпереносу) = Тип("ДанныеФормыСтруктура") Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПереноса, ЗаявкаКПереносу);
			Если ЗаявкаКПереносу.Сумма < 0 Тогда
				СтруктураПереноса.СуммаПереноса = -ЗаявкаКПереносу.Сумма;
			Иначе
				СтруктураПереноса.СуммаПереноса = ЗаявкаКПереносу.Сумма;
			КонецЕсли;
			ОбъектОплаты = ЗаявкаКПереносу.ОбъектОплаты;
		
		ИначеЕсли ТипЗнч(ЗаявкаКпереносу) = Тип("РегистрСведенийКлючЗаписи.ГрафикПлатежей") Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПереноса, ЗаявкаКПереносу);
			ОтборЗаписи = Новый Структура("ОбъектОплаты, БанковскийСчетКасса, ДатаПлатежа,
				|ПоступлениеСписание, ПлательщикПолучатель, Организация, Валюта");
			ЗаполнитьЗначенияСвойств(ОтборЗаписи, ЗаявкаКПереносу);
			СтруктураПереноса.СуммаПереноса = РегистрыСведений.ГрафикПлатежей.Получить(ОтборЗаписи).Сумма;
			ОбъектОплаты = ЗаявкаКПереносу.ОбъектОплаты;
			
		ИначеЕсли ТипЗнч(ЗаявкаКПереносу) = Тип("Структура") Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПереноса, ЗаявкаКПереносу.КлючЗаписи);
			СтруктураПереноса.СуммаПереноса = ЗаявкаКПереносу.Сумма;
			ОбъектОплаты = ЗаявкаКПереносу.КлючЗаписи;
			СтруктураПереноса.БанковскийСчетКасса = ЗаявкаКПереносу.КлючЗаписи.БанковскийСчет; 
		КонецЕсли;
		
		Если ТипЗнч(ОбъектОплаты) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПереноса.БанковскийСчетКасса) Тогда
			СтруктураПереноса.ВалютаПереноса =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПереноса.БанковскийСчетКасса, "ВалютаДенежныхСредств");
		Иначе
			СтруктураПереноса.ВалютаПереноса = СтруктураПереноса.Валюта;
		КонецЕсли;
		
		ДанныеПереносаОбъектаОплаты = ДанныеПереноса.Получить(ОбъектОплаты);
		Если ДанныеПереносаОбъектаОплаты = Неопределено Тогда
			ДанныеПереносаОбъектаОплаты = Новый Массив;
		КонецЕсли;
		
		СтруктураПереноса.Коэффициент = 1;
		ДанныеПереносаОбъектаОплаты.Добавить(СтруктураПереноса);
		
		СтруктураПереносаКон = Обработки.ПлатежныйКалендарь.СтруктураПереносаЗаявки();
		ЗаполнитьЗначенияСвойств(СтруктураПереносаКон, СтруктураПереноса);
		СтруктураПереносаКон.Коэффициент = -1;
		
		Если ДатаПлатежа = "+1" Тогда
			СтруктураПереносаКон.ДатаПлатежа = ДенежныеСредстваКлиентСервер.ДатаПлатежа(СтруктураПереноса.ДатаПлатежа, 2);
		ИначеЕсли ДатаПлатежа = "-1" Тогда
			СтруктураПереносаКон.ДатаПлатежа = ДенежныеСредстваКлиентСервер.ДатаПлатежа(СтруктураПереноса.ДатаПлатежа, 0);
		Иначе
			Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
				СтруктураПереносаКон.ДатаПлатежа = ДатаПлатежа;
			Иначе
				СтруктураПереносаКон.ДатаПлатежа = ЗаявкаКПереносу.ДатаПлатежа;
			КонецЕсли;
			Если БанковскийСчетКасса <> Null Тогда
				СтруктураПереносаКон.БанковскийСчетКасса = БанковскийСчетКасса;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПереносаКон.БанковскийСчетКасса) Тогда
			СтруктураПереносаКон.ВалютаПереноса =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПереносаКон.БанковскийСчетКасса, "ВалютаДенежныхСредств");
		Иначе
			СтруктураПереносаКон.ВалютаПереноса = СтруктураПереносаКон.Валюта;
		КонецЕсли;
		
		ДанныеПереносаОбъектаОплаты.Добавить(СтруктураПереносаКон);
		
		ДанныеПереноса.Вставить(ОбъектОплаты, ДанныеПереносаОбъектаОплаты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьЗаявку(Команда)
	Если Элементы.ЗаявкиКОплате.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаявкиКПереносу = Новый Массив;
	ЗаявкиКПереносу.Добавить(Элементы.ЗаявкиКОплате.ТекущиеДанные.Заявка);
	Если Не ЗаявкиКПереносу.Количество() Тогда
		Возврат;
	КонецЕсли;	
	Если ЗаявкиКПереносу.Количество() > 1 Тогда
			
		ТекстСообщения = НСтр("ru = 'Разбиение оплаты доступно при условии выделения одной заявки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
	Иначе
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗаявкиКПереносу", ЗаявкиКПереносу);
			
		ОписаниеОповещения = Новый ОписаниеОповещения("СдвигЗаявокСРазбиением", ЭтотОбъект, ДополнительныеПараметры);
			
		ТекущиеДанныеСтроки = Элементы.ЗаявкиКОплате.ТекущиеДанные;
		
		Если ТекущиеДанныеСтроки <> Неопределено И ТекущиеДанныеСтроки.Свойство("БанковскийСчет") И ТекущиеДанныеСтроки.Свойство("СуммаЗаявки") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗаявкиКПереносу", ЗаявкиКПереносу);
			ПараметрыФормы.Вставить("БанковскийСчетКасса", ТекущиеДанныеСтроки.БанковскийСчет);
			ПараметрыФормы.Вставить("Сумма", ТекущиеДанныеСтроки.СуммаЗаявки);
				
			ОткрытьФорму("Справочник.АГ_РеестрПлатежныхДокументов.Форма.РазбиениеОплаты", ПараметрыФормы, ЭтаФорма,,,,
					ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПП(Команда)
	Результат = СформироватьСписанияДСНаСервере();
	Если Результат <> Неопределено Тогда
		ДенежныеСредстваКлиент.ОткрытьРезультатОплатыСтрокГрафика(Элементы["ЗаявкиКОплате"], Результат);
	КонецЕсли;
	ЗаполнитьТЧПП();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПП()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Ссылка КАК ПлатежноеПоручение,
	               |	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма КАК Сумма,
	               |	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
	               |	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Валюта КАК Валюта,
	               |	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Ответственный КАК Ответственный,
	               |	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка,
	               |	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен КАК Проведен
	               |ИЗ
	               |	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа
	               |ГДЕ
	               |	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств В(&СписокЗаявок)
	               |	И СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНП И &ДатаКП
	               |	И СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("СписокЗаявок",Объект.ЗаявкиКОплате.Выгрузить().ВыгрузитьКолонку("Заявка"));
	Запрос.УстановитьПараметр("ДатаНП", НачалоДня(Объект.СрокПлатежа));
	Запрос.УстановитьПараметр("ДатаКП", КонецДня(Объект.СрокПлатежа));
	Объект.ПлатежныеПоручения.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьДанныеИзБезопасногоХранилища()
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ЗащищенныеДанные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ПомощникФормированияПлатежныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗащищенныеДанные;
	
КонецФункции

&НаСервере
Функция СформироватьСписанияДСНаСервере()
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("БанковскийСчетКасса",Неопределено);
	ТаблицаЗаявок.Колонки.Добавить("Валюта",Неопределено);
	ТаблицаЗаявок.Колонки.Добавить("ДатаПлатежа",Неопределено);
	ТаблицаЗаявок.Колонки.Добавить("ОбъектОплаты",Неопределено);
	ТаблицаЗаявок.Колонки.Добавить("Организация",Неопределено);
	ТаблицаЗаявок.Колонки.Добавить("ПлательщикПолучатель",Неопределено);
	ТаблицаЗаявок.Колонки.Добавить("ПоступлениеСписание",Неопределено);
	
	Для Каждого Стр Из Объект.ЗаявкиКОплате Цикл
		Если Стр.Размещена Тогда
			Нстр = ТаблицаЗаявок.Добавить();
			Нстр.БанковскийСчетКасса = Стр.БанковскийСчет;
			Нстр.Валюта = Стр.Заявка.Валюта;
			Нстр.ОбъектОплаты = Стр.Заявка;
			Нстр.Организация = Стр.Заявка.Организация;
			Нстр.ПлательщикПолучатель = Стр.Контрагент;
			Нстр.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Списание;
			Нстр.ДатаПлатежа = Объект.СрокПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаЗаявок.Количество() Тогда
		Возврат ДенежныеСредстваСервер.ОплатитьСтрокиГрафика(ТаблицаЗаявок, "СписаниеБезналичныхДенежныхСредств");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В списке нет заявок к оплате для формирования документов списания.'"));
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаявкиКОплатеЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПП(Команда)
	ЗаполнитьТЧПП();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведениеПП(Команда)
	Если Элементы.ПлатежныеПоручения.ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого Стр Из Элементы.ПлатежныеПоручения.ВыделенныеСтроки Цикл
			ОтменитьПроведениеППНаСервере(Стр);
		КонецЦикла;
	Иначе
		Для Каждого Стр Из Объект.ПлатежныеПоручения Цикл
			ОтменитьПроведениеППНаСервере(Стр.НомерСтроки-1);
		КонецЦикла;
	КонецЕсли;	
	Объект.ПлатежныеПоручения.Очистить();
	ЗаполнитьТЧПП();
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеППНаСервере(СтрокаТЧ)
	ТекСтрока = Объект.ПлатежныеПоручения[СтрокаТЧ];	
	ДокОбъект = ТекСтрока.ПлатежноеПоручение.ПолучитьОбъект();
	ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПП(Команда)
	Если Элементы.ПлатежныеПоручения.ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого Стр Из Элементы.ПлатежныеПоручения.ВыделенныеСтроки Цикл
			УдалитьППНаСервере(Стр);
			Объект.ПлатежныеПоручения.Удалить(Объект.ПлатежныеПоручения.Индекс(Объект.ПлатежныеПоручения.НайтиПоИдентификатору(Стр)));
		КонецЦикла;
	Иначе
		Для Каждого Стр Из Объект.ПлатежныеПоручения Цикл
			УдалитьППНаСервере(Стр.НомерСтроки-1);
		КонецЦикла;
		Объект.ПлатежныеПоручения.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьППНаСервере(СтрокаТЧ)
	УстановитьПривилегированныйРежим(Истина);
		ТекСтрока = Объект.ПлатежныеПоручения.НайтиПоИдентификатору(СтрокаТЧ);	
		ДокОбъект = ТекСтрока.ПлатежноеПоручение.ПолучитьОбъект();
		ДокОбъект.ПометкаУдаления = Истина;
        ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПровестиПП(Команда)
	Если Элементы.ПлатежныеПоручения.ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого Стр Из Элементы.ПлатежныеПоручения.ВыделенныеСтроки Цикл
			ПроведениеППНаСервере(Стр);
		КонецЦикла;
	Иначе
		Для Каждого Стр Из Объект.ПлатежныеПоручения Цикл
			ПроведениеППНаСервере(Стр.НомерСтроки-1);
		КонецЦикла;
	КонецЕсли;	
	Объект.ПлатежныеПоручения.Очистить();
	ЗаполнитьТЧПП();
КонецПроцедуры

Процедура ПроведениеППНаСервере(СтрокаТЧ)
	ТекСтрока = Объект.ПлатежныеПоручения[СтрокаТЧ];	
	ДокОбъект = ТекСтрока.ПлатежноеПоручение.ПолучитьОбъект();
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры

&НаСервере
Функция ПроверитьБанковскийСчетНаСервере()
	Если Объект.БанковскийСчет.Банк.АГ_Сомнительный Тогда
		Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	Если Не ПроверитьБанковскийСчетНаСервере() Тогда
		Сообщить("Платежи по счету выбранного банка запрещены !");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаполнитьТЧПП();
КонецПроцедуры

//<--АГ:[Казначейство][24.04.2019 18:05][Дядюра С.С.]


