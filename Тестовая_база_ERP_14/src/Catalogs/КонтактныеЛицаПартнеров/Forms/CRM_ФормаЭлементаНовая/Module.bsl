
#Область ОписаниеПеременных

// ЛентаСобытий

&НаКлиенте
Перем БыстрыйВвод_КэшированноеВремя;

&НаКлиенте
Перем БыстрыйВвод_КэшированнаяДатаНачала;

&НаКлиенте
Перем БыстрыйВвод_АктивенАвтоПодбор;

&НаКлиенте
Перем Лента_Прокрутить;

// Конец ЛентаСобытий

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Установка значения реквизита АдресКартинки.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовый = Истина;
		Если НЕ Объект.CRM_Фотография.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			// +CRM
			Если ПустаяСтрока(АдресКартинки) Тогда
				ВывестиНедоступностьКартинки();
			КонецЕсли;	
			// -CRM
		Иначе
			АдресКартинки = "";
		КонецЕсли;
		CRM_УправлениеВидимостьюКартинки();
		Элементы.CRM_СоздатьФизЛицо.Видимость = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();	
	КонецЕсли; 
	
	// Обработчик механизма "Свойства".
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент<>Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик подсистемы "Контактная информация".
	CRM_УправлениеКонтактнойИнформацией.ИнициализацияКонтактнойИнформации(ЭтотОбъект);
	Если Объект.Ссылка.Пустая() Тогда
		CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация",,,, Истина);
		Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = Истина;
	Иначе
		CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация",,, Истина, Истина);
		CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъектаСписоком(ЭтотОбъект, Объект.Ссылка, "ГруппаКИКонтакта");
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПараметрыНового") Тогда
		Объект.Наименование = Параметры.ПараметрыНового.Наименование;
		
		МассивДопРеквизитов = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип,Вид",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица));
		Если МассивДопРеквизитов.количество() > 0 Тогда
			ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = Параметры.ПараметрыНового.АдресПочты;
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.РедактироватьКонтактныеДанные = НСтр("ru='Ввести дополнительную контактную информацию';en='Please, enter additional contact info'");
	УстановитьВидимостьРеквизитовКИ();
	
	РедактированиеПредставления = Ложь;
	РедактированиеФИО = Ложь;
	ПредставлениеВыбраноИзСписка = Ложь;
	
	// +СофтФон
	сфпСтарыйПользовательДляПереключения = Объект.сфпПользовательДляПереключенияЗвонков;
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Истина;
		Если сфпСофтФонПроСервер.сфпРолиДоступны("сфпУправлениеМаршрутизацией, ПолныеПрава") Тогда
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Истина;
		Иначе
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("Основание") и ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		сфпЗвонок =  Параметры.Основание;
	КонецЕсли;		
	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;			
	// -СофтФон
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.НаименованиеВыбор.КнопкаВыбора = Истина;
		Элементы.НаименованиеВыбор.КнопкаОткрытия = Истина;
	Иначе
		CRM_ФизЛицо = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьФизЛицо(Объект.Ссылка);
		Элементы.ГруппаРедактированиеФИО.Видимость = Не ЗначениеЗаполнено(CRM_ФизЛицо);
		Элементы.ФизЛицо.Видимость = Не Элементы.ГруппаРедактированиеФИО.Видимость;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		Элементы.Пол.ТолькоПросмотр					= Истина;
		Элементы.CRM_Фамилия.ТолькоПросмотр			= Истина;
		Элементы.CRM_Имя.ТолькоПросмотр				= Истина;
		Элементы.CRM_Отчество.ТолькоПросмотр		= Истина;
		Элементы.НаименованиеВыбор.ТолькоПросмотр		= Истина;
		
		//МассивВидокКИ = Новый Массив();
		//МассивВидокКИ.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
		//МассивВидокКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		//МассивВидокКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
		//Для Каждого СтрокаТаблицы Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		//	Если МассивВидокКИ.Найти(СтрокаТаблицы.Вид) <> Неопределено Тогда
		//		Элементы[СтрокаТаблицы.ИмяРеквизита].ТолькоПросмотр = Истина;
		//	КонецЕсли;
		//КонецЦикла;
		
		Элементы.НаименованиеВыбор.КнопкаОткрытия = Истина;
	КонецЕсли;
	ЭтотОбъект.CRM_ПродолжитьВводНового = Ложь;
	
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите") И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;
	
	Если Параметры.Свойство("БизнесРегион") Тогда
		БизнесРегион = Параметры.БизнесРегион;
	КонецЕсли;
	
	// Видимость табличной части "Дополнительная информация", (не вешаем на ФО, чтобы не было отличий от БСП)
	Элементы.ГруппаДополнительнаяИнформация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Создан'") + ": ", , ЦветаСтиля.CRM_ЧерныйЦветТекста));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.ДатаРегистрацииСвязи, "ДФ=d.MM.yyyy")); //+" " + НСтр("ru = 'в'") + " " + Формат(Объект.ДатаРегистрацииСвязи, "ДФ=HH.mm"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС, , );
	
	СформироватьПредставлениеВложений();
	
	// Управление элементами на форме
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(ЭтотОбъект, "КоманднаяПанельФормы");
	// Конец Управление элементами на форме
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	// ЛентаСобытий
	Лента_ЗначенияНастроек = CRM_ЛентаСобытий.НастройкиЛенты(ТекущийПользователь);
	CRM_ЛентаСобытий.НастроитьЛенту(ЭтотОбъект);
	НастроитьОбластьВвода();
	// Конец ЛентаСобытий
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		ИЛИ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	КорректироватьНапоминание = Ложь;
	Если ТекущийОбъект.Ссылка.CRM_КлючевыеСобытия.Количество() = ТекущийОбъект.CRM_КлючевыеСобытия.Количество() Тогда
		Для Каждого СтрокаТЧ Из ТекущийОбъект.Ссылка.CRM_КлючевыеСобытия Цикл
			НайденнаяСтрока = ТекущийОбъект.CRM_КлючевыеСобытия.Найти(СтрокаТЧ.ВидСобытия, "ВидСобытия");
			Если НЕ (НайденнаяСтрока = Неопределено) Тогда
				Если НЕ (НайденнаяСтрока.НапоминатьОСобытии = СтрокаТЧ.НапоминатьОСобытии) Тогда
					КорректироватьНапоминание = Истина;
					Прервать;
				ИначеЕсли НЕ (НайденнаяСтрока.ДатаСобытия = СтрокаТЧ.ДатаСобытия) Тогда
					КорректироватьНапоминание = Истина;
					Прервать;
				КонецЕсли;	
			Иначе	
				КорректироватьНапоминание = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		КорректироватьНапоминание = Истина;
	// -CRM		
	КонецЕсли;
// +CRM
	Если НЕ (CRM_ТипыОтношений = ТекущийОбъект.CRM_ТипОтношенийПредставление) Тогда
		ТекущийОбъект.CRM_ТипОтношенийПредставление = CRM_ТипыОтношений;
	КонецЕсли;
	Если НЕ (Объект.Ссылка.CRM_ОтписалсяОтEmailРассылок = Объект.CRM_ОтписалсяОтEmailРассылок) Тогда
		СпособОтправкиРассылок = Константы.CRM_СпособОтправкиРассылок.Получить();
		Если СпособОтправкиРассылок = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
			CRM_ИнтеграцияСUniSenderКлиентСервер.ПодписатьПолучателяНаРассылки(Объект, НЕ Объект.CRM_ОтписалсяОтEmailРассылок, Отказ);
		КонецЕсли;
	КонецЕсли;
// +CRM
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если КорректироватьНапоминание Тогда
		// +CRM
		//CRM_ОповещенияСервер.СформироватьУдалитьНапоминанияОДняхРождения(ТекущийОбъект.Ссылка);
		CRM_ОповещенияСервер.CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях(ТекущийОбъект.Ссылка);
		// -CRM
		КорректироватьНапоминание = Ложь;
	КонецЕсли;
	
	Элементы.НаименованиеВыбор.КнопкаВыбора = Ложь;
	
	// +CRM
	Если ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ЗаписатьФизЛицо(Объект.Ссылка, CRM_ФизЛицо);
		Элементы.ФизЛицо.Видимость = Истина;
	ИначеЕсли Не Элементы.ГруппаРедактированиеФИО.Видимость Тогда
		Элементы.ГруппаРедактированиеФИО.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры)
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Партнеры);
	КонецЕсли;
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЛентаСобытий_Обновить" Или
		ИмяСобытия = "ОбновитьПланировщик" Или
		ИмяСобытия = "Запись_ЗадачаИсполнителя" Или
		ИмяСобытия = "СохраненаЛичнаяЗадача" Или
		ИмяСобытия = "СохраненоПоручение" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "ИзмененУчаствуетВАнкетировании" Тогда
		Объект.CRM_УчаствуетВАнкетировании = Параметр;
		Модифицированность = Истина;
	// +CRM
	ИначеЕсли ИмяСобытия = "Создан новый партнер" И ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтотОбъект Тогда
		СвязатьСНовымФизЛицом(Параметр);
		Записать();
	// -CRM
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения Тогда
				
				Объект.CRM_Фотография = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
				
			КонецЕсли;
			
			ФайлКартинкиПриИзменении(Неопределено);
			СформироватьПредставлениеВложений();
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если НЕ ТекущийОбъект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущийОбъект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюКартинки();		
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ЭтоНовый Тогда
		Оповестить("НовоеКонтактноеЛицоЗаписано",Объект.Ссылка);
	Иначе	
		Оповестить("КонтактноеЛицоЗаписано",Объект.Ссылка);
	КонецЕсли;
	// Попробовать перезаписать владельца для обновления реквизитов заполненности по клиенту
	ПараметрыФормы = Новый Структура("Ключ", Объект.Владелец);
	
	ИмяФормыПартнера = "Справочник.Партнеры.ФормаОбъекта";
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
	
		ИмяФормыПартнера = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая";
	
	КонецЕсли; 
	
	ФормаВладельца = ПолучитьФорму(ИмяФормыПартнера, ПараметрыФормы);
	Если ФормаВладельца.Открыта() Тогда
		Попытка
			ФормаВладельца.Записать();
		Исключение
		КонецПопытки;
	Иначе
		ПерезаписатьВладельца(Объект.Владелец);
	КонецЕсли;
	
	// +СофтФон
	Если ЗначениеЗаполнено(сфпЗвонок) Тогда
		Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, Объект.Ссылка));						
	КонецЕсли;					
	// Записываем маршрутизацию в АТС.	
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если НЕ ЗначениеЗаполнено(сфпСтарыйПользовательДляПереключения) И НЕ ЗначениеЗаполнено(Объект.сфпПользовательДляПереключенияЗвонков) Тогда	
			Возврат;
		КонецЕсли;	
		СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, сфпСтарыйПользовательДляПереключения);
		ПользовательОбновлен	= сфпСофтФонПроСервер.сфпЗаписатьНовогоПользователя(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков, Истина);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков);
			СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		Если ИсточникВыбора.ИмяФормы = Нстр("ru='ОбщаяФорма.сфпПользователиДляПереключения';en='Generalform.sfpUsersFor Switching'") И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Объект.сфпПользовательДляПереключенияЗвонков = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru='Скрыть дополнительные контактные данные';en='Hide an additional contact information'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru='Ввести дополнительную контактную информацию';en='Please, enter additional contact info'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Объект.CRM_Фамилия)) 
			 Или (ПустаяСтрока(Объект.CRM_Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текФамилия, СокрЛП(Объект.CRM_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Фамилия) И ПустаяСтрока(текФамилия) Тогда
			
			Объект.Наименование = СокрЛП(?(ЗначениеЗаполнено(Объект.CRM_Фамилия),   СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), ""));
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.CRM_Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);	
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Объект.CRM_Имя)) 
			 Или (ПустаяСтрока(Объект.CRM_Имя) И Не ПустаяСтрока(текИмя)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текИмя, СокрЛП(Объект.CRM_Имя)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Имя) И ПустаяСтрока(текИмя) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия), 	 СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.CRM_Имя);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);	
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
		
		Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текОтчество) И текОтчество <> СокрЛП(Объект.CRM_Отчество)) 
			Или (ПустаяСтрока(Объект.CRM_Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текОтчество, СокрЛП(Объект.CRM_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
		
			Объект.Наименование = СокрЛП(Объект.CRM_Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Отчество) И ПустаяСтрока(текОтчество) Тогда

			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.CRM_Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	текОтчество = СокрЛП(Объект.CRM_Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);	
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

// +CRM
&НаСервере
Процедура СвязатьСНовымФизЛицом(ФизЛицо)
	Если ЗначениеЗаполнено(Объект.Ссылка) И ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Партнеры") И ФизЛицо.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		ЗаполнитьПоФизЛицу(ФизЛицо);
		РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ЗаписатьФизЛицо(Объект.Ссылка, ФизЛицо);
		Элементы.ГруппаРедактированиеФИО.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
// -CRM

&НаСервере
Процедура ЗаполнитьПоФизЛицу(ФизЛицо)
	Если ФизЛицо.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите элемент, а не группу!';en='Select an element, instead of group!'"));
		Возврат;
	КонецЕсли;
	
	Если ФизЛицо.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вид клиента должен быть ""Физическое лицо""!';en='The type of customer should be ""Individual""!'"));
		Возврат;
	КонецЕсли;
	
	CRM_ФизЛицо = ФизЛицо;
	
	Объект.Пол				= ФизЛицо.Пол;
	Объект.CRM_Фамилия		= ФизЛицо.CRM_Фамилия;
	Объект.CRM_Имя			= ФизЛицо.CRM_Имя;
	Объект.CRM_Отчество		= ФизЛицо.CRM_Отчество;
	Объект.Наименование		= ФизЛицо.Наименование;
	
	Элементы.Пол.ТолькоПросмотр				= Истина;
	Элементы.CRM_Фамилия.ТолькоПросмотр			= Истина;
	Элементы.CRM_Имя.ТолькоПросмотр				= Истина;
	Элементы.CRM_Отчество.ТолькоПросмотр		= Истина;
	Элементы.НаименованиеВыбор.ТолькоПросмотр		= Истина;
	
	Для Каждого СтрокаТаблицы Из ФизЛицо.КонтактнаяИнформация Цикл
		ТекТипКИ = Неопределено;
		ТекВидКИ = Неопределено;
		Если СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекТипКИ) И ЗначениеЗаполнено(ТекВидКИ) Тогда
			НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип,Вид", ТекТипКИ, ТекВидКИ));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Попытка ЭтотОбъект[НайденныеСтроки[0].ИмяРеквизита] = СтрокаТаблицы.Представление;
				Исключение КонецПопытки;
				Попытка Элементы[НайденныеСтроки[0].ИмяРеквизита].ТолькоПросмотр = Истина;
				Исключение КонецПопытки;
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "Вид");
				НоваяСтрока.Вид = ТекВидКИ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимостьРеквизитовКИ();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Наименование".
//
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Если Элемент.Имя = "Наименование" Тогда
	//	Элементы.ГруппаРедактированиеФИО.Показать();
	//Иначе
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо")));
		ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Наименование".
//
Процедура НаименованиеНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьПоФизЛицу(ВыбранноеЗначение);
		Элементы.ГруппаРедактированиеФИО.Видимость = Ложь;
		Элементы.ФизЛицо.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Не ПредставлениеВыбраноИзСписка Тогда
		
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);	
		Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Наименование".
//
Процедура НаименованиеПриИзменении(Элемент)
	РедактированиеПредставления = Истина;
	Если НЕ РедактированиеФИО И НЕ ПредставлениеВыбраноИзСписка Тогда
		ФИО = Объект.Наименование;
		Если ПустаяСтрока(Объект.CRM_Фамилия) ИЛИ Объект.Ссылка.Пустая() Тогда
			ПервоеСлово = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
			Объект.CRM_Фамилия = ПервоеСлово;			
			Объект.CRM_Имя = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
			Если НЕ ЗначениеЗаполнено(Объект.Пол) Тогда
				Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
			КонецЕсли;
			Объект.CRM_Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Наименование".
//
Процедура НаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеОткрытиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", CRM_ФизЛицо), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Наименование".
//
Процедура НаименованиеОткрытиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ЗаполнитьПоФизЛицу(CRM_ФизЛицо);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Наименование".
//
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПредставлениеВыбраноИзСписка = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля ввода "Наименование".
//
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект, Ложь);
	Если МассивПредставлений.Количество() > 0 Тогда
		Если ДанныеВыбора = Неопределено Тогда
			ДанныеВыбора = Новый СписокЗначений();
		КонецЕсли;
		Для Каждого тДанные Из МассивПредставлений Цикл
			ДанныеВыбора.Вставить(0, тДанные, тДанные);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура сфпПользовательДляПереключенияЗвонковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ВыбранноеЗначение, Истина)) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='У выбранного пользователя не заполнен текущий внутренний номер, маршрутизация невозможна.';en='The selected user does not have the current internal number, routing is not possible.'"));
	КонецЕсли;		
КонецПроцедуры

// Механизм картинок
&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюКартинки();			
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';en='Select an image, you need to record the object. Write down?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла;
	
	ВыборИзображения   = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	#Если НЕ ВебКлиент Тогда
		ВыборИзображения   = Ложь;
	#КонецЕсли
	
	CRM_УправлениеВидимостьюКартинки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ЭтаФорма.Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра';en='No image to view'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования';en='No image to edit'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.CRM_Фотография = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаСервере
Процедура CRM_УправлениеВидимостьюКартинки()
	Элементы.АдресКартинки.Видимость = ЗначениеЗаполнено(АдресКартинки);		
	Элементы.КомандаУстановитьЛогоФото.Видимость = НЕ ЗначениеЗаполнено(АдресКартинки);		
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьЛогоФото(Команда)
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.CRM_УчаствуетВАнкетировании Тогда
		
		Попытка
	  		Элементы.СправочникВнешниеПользователиВнешнийДоступ.Картинка = БиблиотекаКартинок.Пользователь;
			Элементы.СправочникВнешниеПользователиВнешнийДоступ.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Исключение
		КонецПопытки;			
		
	КонецЕсли;

	Попытка
		Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
			Если ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Вид = СпозиционироватьсяНаРеквизите Тогда
						ТекущийЭлемент = Элементы[СтрокаТаблицы.ИмяРеквизита];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Свойство = СпозиционироватьсяНаРеквизите Тогда
						ТекущийЭлемент = Элементы[СтрокаТаблицы.ИмяРеквизитаЗначение];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("Строка") Тогда
				ТекущийЭлемент = Элементы[СпозиционироватьсяНаРеквизите];
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.НаименованиеВыбор.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	// +CRM
	CRM_ЗаполнитьВсеТипыОтношений();	
	CRM_ЗаполнитьТипыОтношений();
	CRM_ЗаполнитьКлючевыеСобытия();
	// -CRM
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЛентаСобытий
	БыстрыйВвод_КэшированноеВремя = 0;
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	БыстрыйВвод_АктивенАвтоПодбор = Ложь;
	Лента_Прокрутить = Ложь;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	// Конец ЛентаСобытий
	
КонецПроцедуры

// +CRM

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Проверяем заполнен ли хотя бы один вид контактной информации.
	КонтактнаяИнформацияЗаполнена = Ложь;
	Для Каждого ЭлементКоллекции Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если НЕ ПустаяСтрока(ЭлементКоллекции.Представление) Тогда
			КонтактнаяИнформацияЗаполнена = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	// Обрабатываем отдельный случай, когда контакт заполнен по физ. лицу
	Если НЕ КонтактнаяИнформацияЗаполнена И ЗначениеЗаполнено(CRM_ФизЛицо) Тогда 
		Если Объект.КонтактнаяИнформация.Количество() > 0 Тогда
			КонтактнаяИнформацияЗаполнена = Истина;
		КонецЕсли;
	КонецЕсли;		
	Если НЕ КонтактнаяИнформацияЗаполнена И НЕ Объект.CRM_Состояние = ПредопределенноеЗначение("Перечисление.CRM_Состояние.Уволен")  Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен ни один вид контактной информации.';en='No contact information is complete.'"));
		Отказ = Истина;
	КонецЕсли;	
	// +CRM
	CRM_ЗаписатьВсеТипыОтношений();	
	// -CRM
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("CRM_Прочее",				НСтр("ru = 'Прочее'"),			Объект.CRM_Прочее);
	CRM_ВсеТипыОтношений.Добавить("CRM_ВладелецБизнеса",	НСтр("ru = 'Владелец бизнеса'"),Объект.CRM_ВладелецБизнеса);
	CRM_ВсеТипыОтношений.Добавить("CRM_Спонсор",			НСтр("ru = 'Спонсор'"),			Объект.CRM_Спонсор);
	CRM_ВсеТипыОтношений.Добавить("CRM_Заказчик",			НСтр("ru = 'Заказчик'"),		Объект.CRM_Заказчик);
	CRM_ВсеТипыОтношений.Добавить("CRM_Сторонник",			НСтр("ru = 'Сторонник'"),		Объект.CRM_Сторонник);
	CRM_ВсеТипыОтношений.Добавить("CRM_Взаимодействия",		НСтр("ru = 'Взаимодействия'"),	Объект.CRM_Взаимодействия);
	CRM_ВсеТипыОтношений.Добавить("CRM_Противник",			НСтр("ru = 'Противник'"),		Объект.CRM_Противник);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаКлиенте
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом';en='Mark the types of relationships with customer'"));
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	CRM_ЗаполнитьТипыОтношений();
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

&НаСервере
// Функция возвращает массив видов ключевых событий.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
// Массив	- Массив видов ключевых событий.
//
Функция CRM_ПолучитьМассивВидовКлючевыхСобытий()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ВидыКлючевыхСобытий.Ссылка
	               |ИЗ
	               |	Справочник.CRM_ВидыКлючевыхСобытий КАК CRM_ВидыКлючевыхСобытий
	               |ГДЕ
	               |	НЕ CRM_ВидыКлючевыхСобытий.ПометкаУдаления";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьМассивВидовКлючевыхСобытий()

&НаСервере
Процедура CRM_ЗаполнитьКлючевыеСобытияНаСервере()
	МассивВидовКлючевыхСобытий = CRM_ПолучитьМассивВидовКлючевыхСобытий();
	Для Каждого ЭлементМассива Из МассивВидовКлючевыхСобытий Цикл
		СтруктураОтбора = Новый Структура("ВидСобытия", ЭлементМассива);
		НайденныеСтроки = Объект.CRM_КлючевыеСобытия.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.CRM_КлючевыеСобытия.Добавить();
			НоваяСтрока.ВидСобытия			= ЭлементМассива;
			НоваяСтрока.НапоминатьОСобытии	= Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Процедура заполняет ТЧ "Ключевые события".
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьКлючевыеСобытия()
	CRM_ЗаполнитьКлючевыеСобытияНаСервере();
КонецПроцедуры // CRM_ЗаполнитьКлючевыеСобытия()	

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПриАктивизацииСтроки(Элемент)
	ТД = Элементы.CRM_КлючевыеСобытия.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = Истина;
	Иначе
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТД.ДатаСобытия); 	
	КонецЕсли;
КонецПроцедуры // CRM_КлючевыеСобытияПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // CRM_КлючевыеСобытияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // CRM_КлючевыеСобытияПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" колонки "ДатаСобытия" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияДатаСобытияПриИзменении(Элемент)
	ТД = Элементы.CRM_КлючевыеСобытия.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = Истина;
	Иначе
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТД.ДатаСобытия); 	
	КонецЕсли;
КонецПроцедуры // CRM_КлючевыеСобытияДатаСобытияПриИзменении()

&НаСервере
// Функция возвращает структуру поиска контактов.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура поиска контактов.
//
Функция CRM_СоздатьСтруктуруПоискаКонтактов()
	CRM_РеквизитыПоискаДублейКонтактов = Новый СписокЗначений;
	CRM_РеквизитыПоискаДублейКонтактов.Добавить("Наименование;ПОДОБНО","Наименование");
	CRM_РеквизитыПоискаДублейКонтактов.Добавить("Контакт_Телефон;=","Телефон");
	CRM_РеквизитыПоискаДублейКонтактов.Добавить("Контакт_АдресЭлектроннойПочты;=","Email");
	СтруктураПоиска = Новый Структура;
	Для Каждого СтрокаСписка Из CRM_РеквизитыПоискаДублейКонтактов Цикл
		Значение = СтрокаСписка.Значение;
		ТочкаСЗапятой = Найти(Значение, ";");
		СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
	КонецЦикла;
	Возврат СтруктураПоиска;
КонецФункции // CRM_СоздатьСтруктуруПоискаКонтактов()

&НаКлиенте
// Процедура - обработчик результата поиска дублей.
//
// Параметры:
//	РезультатЗакрытия		- Структура	- Результат закрытия формы.
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров.
//
Процедура CRM_ОбработатьРезультатПоискаДублейКонтакта(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				CRM_ПродолжитьВводНового = Истина;
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ДополнительныеПараметры = Новый Структура("Ключ", РезультатЗакрытия.Объект);
					// ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ДополнительныеПараметры);
					ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьНайденныйКонтакт", CRM_ОбщегоНазначенияКлиент, ДополнительныеПараметры);
					Модифицированность	= Ложь;
					Закрыть();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // CRM_ОбработатьРезультатПоискаДублейКонтакта() 	

&НаКлиенте
// Процедура находит дубли реквизитов контакта.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Наличие дублей
//
Процедура CRM_НайтиДублиКонтакта(Команда)
	СтруктураПоиска = CRM_СоздатьСтруктуруПоискаКонтактов();
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Наименование", Элементы.НаименованиеВыбор.ТекстРедактирования);
	СписокКонтактов = Новый СписокЗначений;
	Для Каждого СтрокаКИ Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
		Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
			Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				СписокКонтактов.Добавить("Телефон", СтрокаКИ.Представление);
			ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				СписокКонтактов.Добавить("АдресЭлектроннойПочты", СтрокаКИ.Представление);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	ПараметрыФормы			= Новый Структура("СтруктураПоиска, СписокКонтактов, СтруктураОбъекта, Контакт, Клиент", СтруктураПоиска, СписокКонтактов, СтруктураОбъекта, Объект.Ссылка, Объект.Владелец);
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеПоиска		= Новый ОписаниеОповещения("CRM_ОбработатьРезультатПоискаДублейКонтакта", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублейКонтакта", ПараметрыФормы, ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеПоиска);
КонецПроцедуры // CRM_НайтиДублиКонтакта()

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКоманд = CRM_ЛентаСобытийКлиент.ИменаКомандОбъектовЛенты();
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		ПозицияРазделителя = СтрНайти(ДанныеСсылки, ИмяКоманды);
		Если ПозицияРазделителя > 0 Тогда
			ПараметрКоманды = Сред(ДанныеСсылки, ПозицияРазделителя + СтрДлина(ИмяКоманды));
			CRM_ЛентаСобытийКлиент.ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияРазделителя = СтрНайти(ДанныеСсылки, "ЛентаЗагрузитьЕще");
	Если ПозицияРазделителя > 0 Тогда
		Лента_КоличествоОбъектовИстории = Лента_КоличествоОбъектовИстории + 50;
		Лента_Прокрутить = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(ДанныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборВсеСобытияПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		НастройкаОтбора.Пометка = ПометкаВсеСобытия;
	КонецЦикла;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборПриИзменении(Элемент)
	
	ПометкаСобытие = Истина;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		ПометкаСобытие = Мин(ПометкаСобытие, НастройкаОтбора.Пометка);
	КонецЦикла;
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	НастройкаВсеСобытия.Пометка = ПометкаСобытие;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

// Общее

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаПриИзменении(Элемент = Неопределено)
	
	Если БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) И БыстрыйВвод_КэшированноеВремя > 0 Тогда
		БыстрыйВвод_ДатаНачала = БыстрыйВвод_ДатаНачала + БыстрыйВвод_КэшированноеВремя;
		БыстрыйВвод_КэшированноеВремя = 0;
	КонецЕсли;
	
	Если НачалоДня(БыстрыйВвод_КэшированнаяДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания) Тогда
		ВремяЗавершения = БыстрыйВвод_ДатаОкончания - НачалоДня(БыстрыйВвод_ДатаОкончания);
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаНачала) + ВремяЗавершения;
	КонецЕсли;
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + 3600;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(БыстрыйВвод_ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", БыстрыйВвод_ДатаНачала);
	КонецЕсли;
	БыстрыйВвод_КэшированноеВремя = БыстрыйВвод_ДатаНачала - НачалоДня(БыстрыйВвод_ДатаНачала);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, ПараметрыОткрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаНачала,
		Элемент, БыстрыйВвод_ДатаНачала, Ложь, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаНачала = ВыбранныйЭлемент.Значение;
	БыстрыйВвод_ДатаНачалаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияПриИзменении(Элемент)
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + 3600;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение", ЭтотОбъект);
	ДобавлятьДлительность = (НачалоДня(БыстрыйВвод_ДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания));
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаОкончания,
		Элемент, БыстрыйВвод_ДатаНачала, ДобавлятьДлительность, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаОкончания = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

// Примечание

&НаКлиенте
Процедура БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТемаЗаполнена = ЗначениеЗаполнено(Текст);
	ВысотаТемы = ?(ТемаЗаполнена, 2, 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_Команды1", "Видимость", ТемаЗаполнена);
	БыстрыйВвод_Тема = Текст;
	
КонецПроцедуры

// Взаимодействие

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидПриИзменении(Элемент)
	
	БыстрыйВвод_Тема = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	
	Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	
	Если БыстрыйВвод_ВзаимодействиеНаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаОкончания) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

// Задача

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаПриИзменении(Элемент)
	
	БыстрыйВвод_ДатаОкончания = CRM_ЛентаСобытий.ДатаОкончанияПоВарианту(БыстрыйВвод_ДатаНачала, БыстрыйВвод_ЗадачаВариантСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Письмо

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ПисьмоУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(БыстрыйВвод_ПисьмоУчетнаяЗапись) Тогда
		ПоказатьЗначение(, БыстрыйВвод_ПисьмоУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейПисьма;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейКопий;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ЭтотОбъект[ИмяТаблицы].Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элемент.УстановитьГраницыВыделения(1, НачалоКолонки, 1, КонецКолонки);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования,, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение,, ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый СписокЗначений;
	ДанныеПолучателей = ЭтотОбъект[ИмяТаблицы];
	СтруктураДанных = CRM_ЛентаСобытий.ПреобразоватьИменаПолучателей(ДанныеПолучателей,
		БыстрыйВвод_ПисьмоУчетнаяЗапись, Результат, СоответствияАдресовИКонтактов);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	Для Каждого ДанныеПолучателя Из СтруктураДанных.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), ДанныеПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ГруппаАдресов = "Кому";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ГруппаАдресов = "Копии";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ГруппаАдресов = "Скрытые";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучатели), "Кому");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиКопий), "Копии");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий), "Скрытые");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",		БыстрыйВвод_ПисьмоУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных",	СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",	ГруппаАдресов);
	ПараметрыОткрытия.Вставить("ГруппаАдресов",		ГруппаАдресов);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("ОбщаяФорма.CRM_АдреснаяКнига", ПараметрыОткрытия,,,,, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ПисьмоПолучатели.Очистить();
	БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
	БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
	
	Для Каждого Элемент Из Результат Цикл
		
		Если Элемент.Группа = "Кому" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ИначеЕсли Элемент.Группа = "Копии" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ИначеЕсли Элемент.Группа = "Скрытые" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		
	КонецЦикла;
	
	ДанныеКонтактов = Новый Структура;
	ДанныеКонтактов.Вставить("Кому", БыстрыйВвод_ПисьмоПолучатели);
	ДанныеКонтактов.Вставить("Копии", БыстрыйВвод_ПисьмоПолучателиКопий);
	ДанныеКонтактов.Вставить("Скрытые", БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий);
	
	ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
	
	БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
	БыстрыйВвод_ПисьмоСписокПолучателейКопий		= ПредставленияКонтактов.Копии;
	БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий	= ПредставленияКонтактов.Скрытые;
	
	ВидимостьПолучателейКопий = БыстрыйВвод_ПисьмоПолучателиКопий.Количество() > 0;
	ВидимостьПолучателейСкрытыхКопий = БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейКопий", "Видимость", ВидимостьПолучателейКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейКопии", "Видимость", Не ВидимостьПолучателейКопий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий", "Видимость", ВидимостьПолучателейСкрытыхКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейСкрытойКопии", "Видимость", Не ВидимостьПолучателейСкрытыхКопий);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Кому)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Копии)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Скрытые копии)'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокСписка);
	ПараметрыОткрытия.Вставить("МассивПолучателей", ЭтотОбъект[ИмяТаблицы]);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БыстрыйВвод_АктивенАвтоПодбор Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстДоМаркера = Лев(Элемент.ТекстРедактирования, КонецКолонки-1);
	ТекстПослеМаркера = Сред(Элемент.ТекстРедактирования, КонецКолонки);
	
	СборнаяСтрока = "";
	
	Если Найти(ТекстДоМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
		Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
			Если Индекс = (МассивПодстрок.Количество()-1) Тогда
				Продолжить;
			КонецЕсли;
			СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока="", "", ",") + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	СборнаяСтрока = СборнаяСтрока +?(СборнаяСтрока="", "", ",")+ ВыбранноеЗначение;
	
	Если Найти(ТекстПослеМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстПослеМаркера, ",");
		Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
			СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначение = СборнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БыстрыйВвод_АктивенАвтоПодбор = (Не Ожидание = 0);
	
	Если БыстрыйВвод_АктивенАвтоПодбор Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ТекстДоМаркера = Лев(Текст, КонецКолонки-1);
		ТекстПослеМаркера = Сред(Текст, КонецКолонки);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И Найти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество()-1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И Найти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если Не ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = CRM_ЛентаСобытий.СписокПолучателейАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из БыстрыйВвод_ПисьмоИсторияАдресов Цикл
					Если Найти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БыстрыйВвод_ПисьмоИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

// Чат

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("Идентификатор", ВыбранноеЗначение);
	НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйПолучатель = НайденныеСтроки[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// -CRM

#Область ОбработчикиКомандФормы

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_Обновить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПоказатьОтборы(Команда)
	
	Элементы.Лента_СписокОтборов.Показать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура БыстрыйВвод_СменитьСтраницу(Команда)
	
	ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	ПереключитьСтраницуБыстрогоВвода(ИмяКомандыМассив[1]);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Создать(Команда)
	
	Если Не CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		БыстрыйВвод_СоздатьЗавершение(Истина, Новый Структура);
	Иначе
		ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьПродолжить", ЭтотОбъект, Новый Структура);
		ТекстВопроса = НСтр("ru = 'Данные будут записаны. Продолжить?'");
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьЗавершение", ЭтотОбъект, Новый Структура);
		CRM_ОбщегоНазначенияКлиент.Записать(ЭтотОбъект, Истина, ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если ОбъектЗаписан Тогда
		ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаКонтакта", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаКонтакта", БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Отменить(Команда)
	
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейСкрытойКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейСкрытойКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметры(Команда)
	
	Если CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаКонтакта", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕще(Команда)
	
	ОпоыещениеЗавершения = Новый ОписаниеОповещения("ОбычныйВвод_ПоказатьЕщеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОпоыещениеЗавершения, ОбычныйВвод_Команды, Элементы.ОбычныйВвод_ПоказатьЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕщеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйТипОбъекта = ВыбранныйЭлемент.Значение;
	CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаКонтакта", ВыбранныйТипОбъекта, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Процедура ПерезаписатьВладельца(Клиент)
	КлиентОбъект = Клиент.ПолучитьОбъект();
	Попытка
		КлиентОбъект.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	
	Если НЕ Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	флагВыводаГиперСсылки = Ложь;
	СтруктураОтбора		= Неопределено;
	СтруктураОтбора		= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров, Ложь);
	
	МассивСтрок = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора);
	
	флагВыводаГиперСсылки = НЕ (МассивСтрок.Количество() = 0);
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление());
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;
		
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации["ГруппаКонтактнаяИнформация"].ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ (РедактироватьДР ИЛИ флаг_1))
										И ?(Тип(Элементы[СтрокаДобавленногоРеквизита.Значение])=Тип("КнопкаФормы"), Элементы[СтрокаДобавленногоРеквизита.Значение].Заголовок<>"", Истина));
			КонецЕсли;
		КонецЦИкла;
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
		
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].WebЦвета				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки
		= НСтр("ru='Картинка не доступна (не доступен том) обратитесь к администратору.';en='Picture unavailable (volume unavailable) of contact the administrator.'");
	Объект.CRM_Фотография = Справочники.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru='Необходимо записать элемент';en='It is necessary to write down an element'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru='Необходимо записать элемент';en='It is necessary to write down an element'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];

	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, АдресЭлектроннойПочты);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСайтаКомпании);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьАдресСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта"); 		
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда 		
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее

// +CRM

&НаКлиенте
Процедура ОткрытиеФормыСоздаваемогоПартнера()
	
	СтруктураПараметры = Новый Структура("Наименование,CRM_Фамилия,CRM_Имя,CRM_Отчество,Пол");
	ЗаполнитьЗначенияСвойств(СтруктураПараметры, Объект);
	СтруктураПараметры.Вставить("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));	
	
	СоответствиеВидКИ = Новый Соответствие();
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МестоРожденияКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МестоРожденияЧастногоЛица"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица"));
	
	СоответствиеВидаИПредставления = Новый Соответствие();
	
	Для Каждого СтрокаКИ Из Объект.КонтактнаяИнформация Цикл
		ВидКИПартнера = СоответствиеВидКИ[СтрокаКИ.Вид];
		Если Не ЗначениеЗаполнено(ВидКИПартнера) Тогда
			Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				ВидКИПартнера = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера");
			ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				ВидКИПартнера = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера");
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		Если СтрокаКИ.CRM_ОсновнойДляСвязи Тогда
			СоответствиеВидаИПредставления.Вставить(СтрокаКИ.Представление + " CRM_ОсновнойДляСвязи", ВидКИПартнера);
		Иначе
			СоответствиеВидаИПредставления.Вставить(СтрокаКИ.Представление, ВидКИПартнера);			
		КонецЕсли;			
	КонецЦикла;	
	
	СтруктураПараметры.Вставить("ПреобразованиеКЛ", СоответствиеВидаИПредставления);
	
	ФормаОбъекта = ПолучитьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураПараметры), ЭтотОбъект);
	
	Попытка ФормаОбъекта.Объект.Наименование = Объект.Наименование;
	Исключение КонецПопытки;
	
	Попытка ФормаОбъекта.Элементы.ВидПартнера.Видимость = Ложь;
	Исключение КонецПопытки;
	
	Попытка ФормаОбъекта.Объект.Пол = Объект.Пол;
	Исключение КонецПопытки;	
	
	Попытка ФормаОбъекта.Объект.ДатаРождения = Объект.ДатаРождения;
	Исключение КонецПопытки;	
	
	Попытка ФормаОбъекта.Объект.CRM_НапоминатьОДнеРождения = Объект.CRM_НапоминатьОДнеРождения;
	Исключение КонецПопытки;			
	
	ФормаОбъекта.Открыть();
	
КонецПроцедуры	

&НаКлиенте
Процедура CRM_СоздатьФизЛицо(Команда)
	ОткрытиеФормыСоздаваемогоПартнера();	
КонецПроцедуры

// -CRM

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// +CRM
	CRM_УправлениеСвойствами.ИзменитьПоложениеЗаголовковЭлементов(ЭтотОбъект, "Верх");
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ФизЛицоПриИзмененииНаСервере()
	Если CRM_ФизЛицо = Объект.Владелец Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя выбрать владельца контактного лица!";
		Сообщение.Поле = "ФизЛицо";
		Сообщение.Сообщить();
		CRM_ФизЛицо = Справочники.Партнеры.ПустаяСсылка();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ФизЛицоПриИзмененииНаСервере();
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КонтактныеЛицаПартнеровПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы КАК КонтактныеЛицаПартнеровПрисоединенныеФайлы
	|ГДЕ
	|	КонтактныеЛицаПартнеровПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Fales('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область КонтактнаяИнформация_КонтактныеЛица

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатие(Команда)
	
	Если СтрНайти(Команда.Имя, "КомандаИзменитьКИ") > 0 Тогда
		ЭлементСпискаКИ = Элементы.Найти(СтрЗаменить(Команда.Имя, "КомандаИзменитьКИ", "ГруппаЗаголовокКИ"));
		Если ЭлементСпискаКИ <> Неопределено Тогда
			ЭлементСпискаКИ.Родитель.Видимость = Ложь;
			Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = Истина;
			ИнициализацияКонтактнойИнформации();
			УстановитьВидимостьРеквизитовКИ();
		КонецЕсли;
	ИначеЕсли СтрНайти(Команда.Имя, "СкрытьРедактируемуюКИ") > 0 Тогда
		ОбновлениеКонтактнойИнформацииСписком();
		Элементы.ГруппаКИКонтакта.Видимость = Истина;
		Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = Ложь;
	Иначе	
		CRM_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияНажатие(ЭтотОбъект, Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКонтактнойИнформации()
	Если ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация 
		И НЕ ЭтотОбъект["ПараметрыКонтактнойИнформации"].ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		CRM_УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновлениеКонтактнойИнформацииСписком()
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъектаСписоком(ЭтотОбъект, Объект.Ссылка, "ГруппаКИКонтакта");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьФайлыЗавершение()

#КонецОбласти

#Область НастройкаРасположенияЭлементов

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормы(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение", ЭтотОбъект);
	CRM_УправлениеЭлементамиНаФормахКлиент.НастройкаРасположенияЭлементовФормы(ЭтотОбъект, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение(Результат, ДопПараметры) Экспорт
	Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры)
	CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбновитьЛенту()
	
	ПараметрыЛенты = Новый Структура;
	ПараметрыЛенты.Вставить("Режим",			"ЛентаКонтакта");
	ПараметрыЛенты.Вставить("Объект",			Объект.Ссылка);
	ПараметрыЛенты.Вставить("АдресКартинок",	Лента_АдресКартинок);
	ПараметрыЛенты.Вставить("Отбор",			Лента_Отбор);
	ПараметрыЛенты.Вставить("ОбъектовИстории",	Лента_КоличествоОбъектовИстории);
	ПараметрыЛенты.Вставить("Прокрутить",		Лента_Прокрутить);
	ПараметрыЛенты.Вставить("Пустая",			Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ПолучателиЧата = Новый Массив;
	Лента_HTML = CRM_ЛентаСобытий.СформироватьЛенту(ПараметрыЛенты, ПолучателиЧата);
	
	Лента_Прокрутить = Ложь;
	
	Если Лента_ЗначенияНастроек.ИспользоватьЧаты Тогда
		CRM_ЛентаСобытийКлиент.НастроитьОбластьВводаПослеФормированияЛенты(ПолучателиЧата, ЭтотОбъект);
		ВидимостьКомандыЧат = (БыстрыйВвод_ЧатПолучатели.Количество() > 0);
		Если БыстрыйВвод_ТекущийТипОбъекта = "Чат" И Не ВидимостьКомандыЧат Тогда
			ПереключитьСтраницуБыстрогоВвода("Примечание");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура ПереключитьСтраницуБыстрогоВвода(Знач НовыйТипОбъекта, Знач ПолныйСброс = Ложь)
	
	Если БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта И Не ПолныйСброс Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;
	ТекущийШрифтКнопки = Элементы[ИмяТекущиейКнопки].Шрифт;
	Элементы[ИмяТекущиейКнопки].Шрифт = Новый Шрифт(ТекущийШрифтКнопки,,, Ложь);
	
	ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
	ШрифтКнопки = Элементы[ИмяКнопки].Шрифт;
	Элементы[ИмяКнопки].Шрифт = Новый Шрифт(ШрифтКнопки,,, Истина);
	
	ИмяТекущейСтраницы = "БыстрыйВвод_Страница" + БыстрыйВвод_ТекущийТипОбъекта;
	Элементы[ИмяТекущейСтраницы].Видимость = Ложь;
	
	ИмяСтраницы = "БыстрыйВвод_Страница" + НовыйТипОбъекта;
	Элементы[ИмяСтраницы].Видимость = Истина;
	
	БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта;
	
	НастроитьОбластьВводаПоСтранице(ПолныйСброс);
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		Элементы.БыстрыйВвод_ПримечаниеТема.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВвода()
	
	НастроитьОбластьВводаПоСтранице();
	
	// Настройки элементов.
	Элементы.БыстрыйВвод_ЗадачаПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Время.Видимость = Лента_ЗначенияНастроек.ВремяВСрокахЗадач;
	Элементы.БыстрыйВвод_Письмо.Видимость	= Лента_ЗначенияНастроек.ДоступнаПочта;
	
	БыстрыйВвод_ПисьмоОтправлятьСразу = Ложь;
	НастройкиРаботыСПочтой = Взаимодействия.ПолучитьНастройкуРаботаСПочтой();
	Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу") И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
		БыстрыйВвод_ПисьмоОтправлятьСразу = Истина;
	КонецЕсли;
	
	// Обычный ввод
	ОбычныйВвод_Команды.Очистить();
	ОписанияКоманд = CRM_ЛентаСобытий.КомандыОбычногоВводаЛенты("ЛентаКонтакта", Лента_ЗначенияНастроек);
	Если ОписанияКоманд.Количество() = 0 Тогда
		Элементы.ОбычныйВвод_ПоказатьЕще.Видимость = Ложь;
	Иначе
		Для Каждого ОписаниеКоманды Из ОписанияКоманд Цикл
			НоваяКоманда = ОбычныйВвод_Команды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, ОписаниеКоманды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВводаПоСтранице(Знач ПолныйСброс = Ложь)
	
	//Общее
	ТекущаяДата = ТекущаяДатаСеанса();
	БыстрыйВвод_ДатаНачала = ТекущаяДата;
	Если ПолныйСброс Тогда
		// При создании или отмене создания объекта.
		БыстрыйВвод_Тема = "";
		БыстрыйВвод_Содержание = "";
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		
		ТемаЗаполнена = ЗначениеЗаполнено(БыстрыйВвод_Тема);
		ВысотаТемы = ?(ТемаЗаполнена, 2, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_Команды1", "Видимость", ТемаЗаполнена);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		ДанныеВидаВзаимодействия = CRM_ЛентаСобытий.ДанныеВидаВзаимодействияПоУмолчанию("ЛентаКонтакта");
		БыстрыйВвод_ВзаимодействиеВид = ДанныеВидаВзаимодействия.Ссылка;
		Если БыстрыйВвод_Тема = "" Тогда
			БыстрыйВвод_Тема = ДанныеВидаВзаимодействия.Описание;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеНаВесьДень = Ложь;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = Истина;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = Истина;
		БыстрыйВвод_ДатаОкончания = ТекущаяДата + 3600;
		БыстрыйВвод_ВзаимодействиеПолучатель = Объект.Ссылка;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Задача" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ЗадачаВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
		БыстрыйВвод_ДатаОкончания = ТекущаяДата + 86400;
		БыстрыйВвод_ЗадачаПолучатель = ТекущийПользователь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		
		БыстрыйВвод_Тема = СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " ");
		
		БыстрыйВвод_ПисьмоПолучатели.Очистить();
		БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
		БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
		БыстрыйВвод_ПисьмоСписокПолучателейПисьма = "";
		БыстрыйВвод_ПисьмоСписокПолучателейКопий = "";
		БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий = "";
		
		УчетныеЗаписиПочтыСписокВыбора = Элементы.БыстрыйВвод_ПисьмоОтправительПредставление.СписокВыбора;
		УчетныеЗаписиПочтыСписокВыбора.Очистить();
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(УчетныеЗаписиПочтыСписокВыбора,, ТекущийПользователь);
		Если УчетныеЗаписиПочтыСписокВыбора.Количество() > 0 Тогда
			УчетнаяЗаписьПоУмолчанию = CRM_ЛентаСобытий.УчетнаяЗаписьПоУмолчанию(ТекущийПользователь);
			ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию);
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора[0];
			КонецЕсли;
			БыстрыйВвод_ПисьмоУчетнаяЗапись = ЭлементСписка.Значение;
			БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВладельцыКонтактнойИнформации.Добавить(Объект.Ссылка);
		КонецЕсли;
		
		ДанныеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		БыстрыйВвод_ПисьмоИсторияАдресов.Очистить();
		Для Каждого Строка Из ДанныеКонтактнойИнформации Цикл
			ПредставлениеАдресаКонтакта = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Строка.Объект, Строка.Представление, "");
			БыстрыйВвод_ПисьмоИсторияАдресов.Добавить(ПредставлениеАдресаКонтакта);
		КонецЦикла;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		
		// Если смогли переключиться на эту страницу - значит, получатели есть.
		ПервыйПолучатель = БыстрыйВвод_ЧатПолучатели[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя = ПервыйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес = ПервыйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель = ПервыйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя = ПервыйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись = ПервыйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа = ПервыйПолучатель.Группа;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти