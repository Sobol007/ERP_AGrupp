#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обработчик обновления БЭД 1.0.4.0
// Разбивает ТОРГ12 на ТОРГ12Продавец и ТОРГ12Покупатель, АктВыполненныхРабот на АктИсполнитель и АктЗаказчик.
//
Процедура ОбновитьВидыДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ИскомоеСоглашение = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		ТОРГ12Продавец = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12Продавец, "ИсходящийДокумент");
		
		Если ТОРГ12Продавец = Неопределено Тогда
			НайденнаяСтрока= ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12, "ИсходящийДокумент");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.ТОРГ12Продавец;
				НоваяСтрока.ИспользоватьЭП            = НайденнаяСтрока.ИспользоватьЭП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденнаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденнаяСтрока.Формировать;
				НоваяСтрока.МаршрутПодписания         = НайденнаяСтрока.МаршрутПодписания;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ТОРГ12Покупатель = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12Покупатель,
			"ИсходящийДокумент");
		
		Если ТОРГ12Покупатель = Неопределено Тогда
			НайденнаяСтрока = ИскомоеСоглашение.ВходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12, "ВходящийДокумент");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.ТОРГ12Покупатель;
				НоваяСтрока.ИспользоватьЭП            = НайденнаяСтрока.ИспользоватьЭП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденнаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденнаяСтрока.Формировать;
				НоваяСтрока.МаршрутПодписания         = НайденнаяСтрока.МаршрутПодписания;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		АктИсполнитель = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктИсполнитель, "ИсходящийДокумент");
		
		Если АктИсполнитель = Неопределено Тогда
			НайденнаяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктВыполненныхРабот,
				"ИсходящийДокумент");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.АктИсполнитель;
				НоваяСтрока.ИспользоватьЭП            = НайденнаяСтрока.ИспользоватьЭП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденнаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденнаяСтрока.Формировать;
				НоваяСтрока.МаршрутПодписания         = НайденнаяСтрока.МаршрутПодписания;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		АктЗаказчик = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктЗаказчик, "ИсходящийДокумент");
		
		Если АктЗаказчик = Неопределено Тогда
			НайденнаяСтрока = ИскомоеСоглашение.ВходящиеДокументы.Найти(Перечисления.ВидыЭД.АктВыполненныхРабот,
				"ВходящийДокумент");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.АктЗаказчик;
				НоваяСтрока.ИспользоватьЭП            = НайденнаяСтрока.ИспользоватьЭП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденнаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденнаяСтрока.Формировать;
				НоваяСтрока.МаршрутПодписания         = НайденнаяСтрока.МаршрутПодписания;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомоеСоглашение)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.1.6.3
// Производит заполнение версии формата в табличной части ИсходящиеДокументы.
//
Процедура ЗаполнитьВерсииФорматов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ИскомоеСоглашение = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		Для каждого ВидДокумента Из ИскомоеСоглашение.ИсходящиеДокументы Цикл
			Если ВидДокумента.Формировать И Не ЗначениеЗаполнено(ВидДокумента.ВерсияФормата)
				И ВидДокумента.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
				
				ВидДокумента.ВерсияФормата = "CML 4.02";
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомоеСоглашение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.1.7.1
// Переносит сертификат ЭП из реквизита "Сертификат авторизации" в таб.часть "СертификатыПодписейОрганизации".
//
Процедура ПеренестиСертификатАвторизацииВТЧ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка,
	|	СоглашенияОбИспользованииЭД.УдалитьСертификатАбонента
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД = &СпособОбменаЭД";
	
	Запрос.УстановитьПараметр("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СертификатЭП = Выборка.УдалитьСертификатАбонента;
		Если ЗначениеЗаполнено(СертификатЭП) Тогда
			СоглашениеЭД = Выборка.Ссылка.ПолучитьОбъект();
			НоваяСтрока = СоглашениеЭД.СертификатыПодписейОрганизации.Добавить();
			НоваяСтрока.Сертификат = СертификатЭП;
			СоглашениеЭД.УдалитьСертификатАбонента = Неопределено;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СоглашениеЭД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.1.7.4
// Производит заполнение версии формата в табличной части ИсходящиеДокументы.
//
Процедура ЗаполнитьВерсииФорматовИсходящихЭДИПакета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ИскомоеСоглашение = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		Для каждого ВидДокумента Из ИскомоеСоглашение.ИсходящиеДокументы Цикл
			Если Не ЗначениеЗаполнено(ВидДокумента.ВерсияФормата) Тогда
				ВерсияФормата = "CML 4.02";
				Если ВидДокумента.ИсходящийДокумент = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					ВерсияФормата = "";
				ИначеЕсли ВидДокумента.ИсходящийДокумент = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ВидДокумента.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидДокумента.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ВидДокумента.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					ВерсияФормата = "ФНС 5.01";
				КонецЕсли;
				ВидДокумента.ВерсияФормата = ВерсияФормата;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИскомоеСоглашение.ВерсияФорматаПакета) Тогда
			ИскомоеСоглашение.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия10;
		КонецЕсли;
			
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомоеСоглашение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.1.13.6
// Производит заполнение версии формата в табличной части ИсходящиеДокументы.
//
Процедура ОбновитьВерсииФорматовИсходящихЭДИПакета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ИскомоеСоглашение = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		Для каждого ВидДокумента Из ИскомоеСоглашение.ИсходящиеДокументы Цикл
			Если ЗначениеЗаполнено(ВидДокумента.ВерсияФормата)
				И ВидДокумента.ВерсияФормата = "CML 2.06" Тогда
				
				ВидДокумента.ВерсияФормата = "CML 2.07";
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомоеСоглашение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Обработчик обновления БЭД 1.1.14.2
// Производит заполнение реквизита "ИспользуетсяКриптография".
//
Процедура ЗаполнитьИспользованиеКриптографии() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.УдалитьИспользуетсяКриптография
	|
	|СГРУППИРОВАТЬ ПО
	|	СоглашенияОбИспользованииЭД.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации.Ссылка) > 0";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СоглашениеЭД = Результат.Ссылка.ПолучитьОбъект();
		СоглашениеЭД.ОбменДанными.Загрузка = Истина;
		СоглашениеЭД.УдалитьИспользуетсяКриптография = Истина;
		СоглашениеЭД.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.2.2.2
// Производит заполнение версии формата в табличной части ИсходящиеДокументы.
//
Процедура ОбновитьВерсиюФорматаИсходящихЭД207_208() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ИскомоеСоглашение = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		Для каждого ВидДокумента Из ИскомоеСоглашение.ИсходящиеДокументы Цикл
			Если ЗначениеЗаполнено(ВидДокумента.ВерсияФормата)
				И (ВидДокумента.ВерсияФормата = "CML 2.06"
					Или ВидДокумента.ВерсияФормата = "CML 2.07") Тогда
				ВидДокумента.ВерсияФормата = "CML 2.08";
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомоеСоглашение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Обработчик обновления БЭД 1.2.7.1
// Производит заполнение версии формата в табличной части ИсходящиеДокументы.
//
Процедура ОбновитьВерсиюФорматаИсходящихЭД501_502() Экспорт
	
	ИсходящиеДокументы = Новый Массив;
	ИсходящиеДокументы.Добавить(Перечисления.ВидыЭД.СчетФактура);
	ИсходящиеДокументы.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	ВерсияФормата = "ФНС 5.01";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка КАК Профиль
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.ИсходящиеДокументы КАК ПрофилиНастроекЭДОИсходящиеДокументы
	|ГДЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ИсходящийДокумент В(&ИсходящиеДокументы)
	|	И ПрофилиНастроекЭДОИсходящиеДокументы.ВерсияФормата = &ВерсияФормата";
	Запрос.УстановитьПараметр("ИсходящиеДокументы", ИсходящиеДокументы);
	Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФормата);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПрофильОбъект = Выборка.Профиль.ПолучитьОбъект();
			Для Каждого ТекСтрока Из ПрофильОбъект.ИсходящиеДокументы Цикл
				Если ТекСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура
					Или ТекСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					ТекСтрока.ВерсияФормата = НСтр("ru = 'ФНС 5.02';
													|en = 'FTS 5.02'");
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент В(&ИсходящиеДокументы)
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата = &ВерсияФормата";
	
	Запрос.УстановитьПараметр("ИсходящиеДокументы", ИсходящиеДокументы);
	Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФормата);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкаОбъект = Выборка.Соглашение.ПолучитьОбъект();
		Для Каждого ТекСтрока Из НастройкаОбъект.ИсходящиеДокументы Цикл
			Если ТекСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура
				Или ТекСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				ТекСтрока.ВерсияФормата = НСтр("ru = 'ФНС 5.02';
												|en = 'FTS 5.02'");
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.2.4
// Из табличной части Исходящие документы настроек и профилей ЭДО удаляются ответные титулы.
//
Процедура УдалитьОтветныеТитулы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка КАК Профиль
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.ИсходящиеДокументы КАК ПрофилиНастроекЭДОИсходящиеДокументы
	|ГДЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ИсходящийДокумент В(&ОтветныеТитулы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Настройка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент В(&ОтветныеТитулы)";
	
	ОтветныеТитулы = Новый Массив;
	ОтветныеТитулы.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	ОтветныеТитулы.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	ОтветныеТитулы.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	
	Запрос.УстановитьПараметр("ОтветныеТитулы", ОтветныеТитулы);
	Результаты = Запрос.ВыполнитьПакет();
	
	Профили = Результаты[0].Выгрузить();
	Для Каждого ТекСтрока Из Профили Цикл
		УдалитьИсходящиеЭД(ТекСтрока.Профиль, ОтветныеТитулы);
	КонецЦикла;
	
	Настройки = Результаты[1].Выгрузить();
	Для Каждого ТекСтрока Из Настройки Цикл
		УдалитьИсходящиеЭД(ТекСтрока.Настройка, ОтветныеТитулы);
	КонецЦикла;
	
КонецПроцедуры

// Функция - Получить данные печати
//
// Параметры:
//  Субъекты			 - Массив - структура, данные о субъектах, заключающих соглашение.
//  МассивИменМакетов	 - Массив - строка, наименование макетов печатных форм.
// 
// Возвращаемое значение:
//  СтруктураВозврата - данные для формирования печатной формы.
//
Функция ПолучитьДанныеПечати(Знач Субъекты, Знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого Субъект Из Субъекты Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, Субъект);
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(Субъект.НастройкаЭДО, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "ПФ_DOC_СоглашениеОбОбменеЭлектроннымиДокументами" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("Справочник.СоглашенияОбИспользованииЭД.ПФ_DOC_СоглашениеОбОбменеЭлектроннымиДокументами"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC");
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	СтруктураМакетов = Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
										ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Данные", ДанныеПоВсемОбъектам);
	СтруктураВозврата.Вставить("Макеты", СтруктураМакетов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МассивСсылок = Новый Массив;
	
	ПустойМаршрут    = Справочники.МаршрутыПодписания.ПустаяСсылка();
	ИспользуемыеВиды = ОбменСКонтрагентамиСлужебный.ИспользуемыеВидыЭлектронныхДокументов();
	ПрикладныеВиды   = ОбменСКонтрагентамиСлужебный.ПрикладныеВидыЭлектронныхДокументов();
	
	ИспользуемыеВидыВНастройках = Новый Массив;
	ПрикладныеВидыВНастройках   = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.МаршрутПодписания КАК МаршрутПодписания,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ИсходящийДокумент,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ДокументУчета КАК ДокументУчета,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Ссылка,
		|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВходящийДокумент,
		|	СоглашенияОбИспользованииЭДВходящиеДокументы.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	СоглашенияОбИспользованииЭДВходящиеДокументы.СпособОбработки КАК СпособОбработки
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДОПометкаУдаления
		|		ПО НастройкиЭДО.Организация = НастройкиЭДОПометкаУдаления.Организация
		|			И НастройкиЭДО.Контрагент = НастройкиЭДОПометкаУдаления.Контрагент
		|			И НастройкиЭДО.ДоговорКонтрагента = НастройкиЭДОПометкаУдаления.ДоговорКонтрагента
		|			И НастройкиЭДО.Ссылка <> НастройкиЭДОПометкаУдаления.Ссылка
		|ГДЕ
		|	НастройкиЭДО.ПометкаУдаления
		|	И НастройкиЭДО.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНастроек = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ИспользуемыеВидыВНастройках.Очистить();
		ПрикладныеВидыВНастройках.Очистить();
		
		ОтмеченКОбработке = Ложь;
		
		ВыборкаИсходящиеДокументы = ВыборкаНастроек.Выбрать();
		Пока ВыборкаИсходящиеДокументы.Следующий() Цикл
			
			Если ВыборкаИсходящиеДокументы.ИспользоватьЭП 
				И ВыборкаИсходящиеДокументы.МаршрутПодписания = ПустойМаршрут Тогда
				ОтмеченКОбработке = Истина;
				Прервать;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаИсходящиеДокументы.ЗаполнениеКодаТовара)
				И ЗначениеЗаполнено(ОбменСКонтрагентамиВнутренний.ВариантыЗаполненияПолейЭлектронныхДокументов(
					ВыборкаИсходящиеДокументы.ИсходящийДокумент, ВыборкаИсходящиеДокументы.ВерсияФормата)) Тогда
				ОтмеченКОбработке = Истина;
				Прервать;
			КонецЕсли;
			
			Если ВыборкаИсходящиеДокументы.ИсходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
				ПредставлениеОснования = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(
					ВыборкаИсходящиеДокументы.ПрикладнойВидЭД);
				ПрикладныеВидыВНастройках.Добавить(ВыборкаИсходящиеДокументы.ПрикладнойВидЭД);
			Иначе
				ПредставлениеОснования = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(
					ВыборкаИсходящиеДокументы.ИсходящийДокумент);
				ИспользуемыеВидыВНастройках.Добавить(ВыборкаИсходящиеДокументы.ИсходящийДокумент);
			КонецЕсли;
			
			Если ПредставлениеОснования <> ВыборкаИсходящиеДокументы.ДокументУчета Тогда
				ОтмеченКОбработке = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтмеченКОбработке Тогда
			МассивСсылок.Добавить(ВыборкаНастроек.Ссылка);
			Продолжить;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИспользуемыеВиды, ИспользуемыеВидыВНастройках).Количество()
			ИЛИ   ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрикладныеВиды, ПрикладныеВидыВНастройках).Количество() Тогда
			МассивСсылок.Добавить(ВыборкаНастроек.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаНастроек = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНастроек.Следующий() Цикл
		
		Если МассивСсылок.Найти(ВыборкаНастроек.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаВходящиеДокументы = ВыборкаНастроек.Выбрать();
		Пока ВыборкаВходящиеДокументы.Следующий() Цикл
			
			Если ВыборкаВходящиеДокументы.ВходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
				ВидЭлектронногоДокумента = ВыборкаВходящиеДокументы.ПрикладнойВидЭД;
			Иначе
				ВидЭлектронногоДокумента = ВыборкаВходящиеДокументы.ВходящийДокумент;
			КонецЕсли;
			
			СписокОпераций = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(ВидЭлектронногоДокумента, Истина);
			
			Если СписокОпераций.НайтиПоЗначению(ВыборкаВходящиеДокументы.СпособОбработки) = Неопределено Тогда
				МассивСсылок.Добавить(ВыборкаНастроек.Ссылка);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыборкаНастроек = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаНастроек.Следующий() Цикл
		МассивСсылок.Добавить(ВыборкаНастроек.Ссылка);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСсылок);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК ОсновныеНастройки
	|		ПО Настройки.Организация = ОсновныеНастройки.Организация
	|			И Настройки.Контрагент = ОсновныеНастройки.Контрагент
	|			И Настройки.ДоговорКонтрагента = ОсновныеНастройки.ДоговорКонтрагента
	|			И (ОсновныеНастройки.ИспользуетсяДляОтправки)
	|ГДЕ
	|	ОсновныеНастройки.Ссылка ЕСТЬ NULL
	|	И Настройки.СтатусПодключения = Значение(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Обрабатывать настройки можно только после обновления предопределенных маршрутов.
	Если ОбновлениеИнформационнойБазы.ОбъектОбработан("Справочник.МаршрутыПодписания").Обработан Тогда		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
			Параметры.Очередь, "Справочник.СоглашенияОбИспользованииЭД");
			
		НастройкиДляОтправки = НастройкиДляОтправкиЭД();
			
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.СоглашенияОбИспользованииЭД");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Если Объект = Неопределено Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ЗаписатьОбъект = Ложь;
				
				// Проверка наличия настройки для отправки.
				Если Объект.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
					ОтборСтрок = Новый Структура("Организация,Контрагент,ДоговорКонтрагента");
					ЗаполнитьЗначенияСвойств(ОтборСтрок, Объект);
					НайденныеСтроки = НастройкиДляОтправки.НайтиСтроки(ОтборСтрок);
					Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
						Объект.ИспользуетсяДляОтправки = Истина;
						ЗаписатьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
				
				ПараметрыОтбора = Новый Структура("МаршрутПодписания, ИспользоватьЭП", 
					Справочники.МаршрутыПодписания.ПустаяСсылка(), Истина);
				СтрокиСПустымМаршрутом = Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиСПустымМаршрутом.Количество() Тогда
					ЗаписатьОбъект = Истина;
					
					Для Каждого СтрокаНастройки Из СтрокиСПустымМаршрутом Цикл
						СтрокаНастройки.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
					КонецЦикла;
				КонецЕсли;
				
				ИспользуемыеВиды = ОбменСКонтрагентамиСлужебный.ИспользуемыеВидыЭлектронныхДокументов();
				ПрикладныеВиды   = ОбменСКонтрагентамиСлужебный.ПрикладныеВидыЭлектронныхДокументов();
				Для Каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
					
					Если СтрокаТаблицы.ИсходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
						Индекс = ПрикладныеВиды.Найти(СтрокаТаблицы.ПрикладнойВидЭД);
						Если Индекс <> Неопределено Тогда
							ПрикладныеВиды.Удалить(Индекс);
						КонецЕсли;
						ПредставлениеОснования = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(СтрокаТаблицы.ПрикладнойВидЭД);
					Иначе
						Индекс = ИспользуемыеВиды.Найти(СтрокаТаблицы.ИсходящийДокумент);
						Если Индекс <> Неопределено Тогда
							ИспользуемыеВиды.Удалить(Индекс);
						КонецЕсли;
						ПредставлениеОснования = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(СтрокаТаблицы.ИсходящийДокумент);
					КонецЕсли;
					
					Если ПредставлениеОснования <> СтрокаТаблицы.ДокументУчета Тогда
						СтрокаТаблицы.ДокументУчета = ПредставлениеОснования;
						ЗаписатьОбъект = Истина;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаполнениеКодаТовара) Тогда
						ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.ВариантыЗаполненияПолейЭлектронныхДокументов(
							СтрокаТаблицы.ИсходящийДокумент, СтрокаТаблицы.ВерсияФормата);
						
						ЗначениеСвойства = Неопределено;
						Если ВариантЗаполнения.Свойство("ТоварКод", ЗначениеСвойства) Тогда
							СтрокаТаблицы.ЗаполнениеКодаТовара = ЗначениеСвойства[0].Значение;
							ЗаписатьОбъект = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаТаблицы Из Объект.ВходящиеДокументы Цикл
					
					Если СтрокаТаблицы.ВходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
						ВидЭлектронногоДокумента = СтрокаТаблицы.ПрикладнойВидЭД;
					Иначе
						ВидЭлектронногоДокумента = СтрокаТаблицы.ВходящийДокумент;
					КонецЕсли;
					
					СписокОпераций = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(ВидЭлектронногоДокумента, Истина);
					
					Если СписокОпераций.НайтиПоЗначению(СтрокаТаблицы.СпособОбработки) = Неопределено Тогда
						ЗаписатьОбъект = Истина;
						
						СпособОбработки = "";
						Для Каждого ЭлементСписка Из СписокОпераций Цикл
							Если ЭлементСписка.Пометка Тогда
								СпособОбработки = ЭлементСписка.Значение;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						СтрокаТаблицы.СпособОбработки = СпособОбработки;
					КонецЕсли;
					
				КонецЦикла;
				
				ВходящиеДокументы = Неопределено;
				
				Если ИспользуемыеВиды.Количество() Тогда
					ЗаписатьОбъект = Истина;
					
					ВходящиеДокументы = Объект.ВходящиеДокументы.Выгрузить();
					ВходящиеДокументы.Колонки.Добавить("ВидЭДДляСортировки");
					ВходящиеДокументы.ЗагрузитьКолонку(ВходящиеДокументы.ВыгрузитьКолонку("ВходящийДокумент"), "ВидЭДДляСортировки");
					
					Для Каждого ВидЭлектронногоДокумента Из ИспользуемыеВиды Цикл
						
						ДобавитьНастройкуВидаЭлектронногоДокумента(Объект, ВидЭлектронногоДокумента, Ложь);
						
						ДобавитьСпособОбработкиВходящегоДокумента(ВходящиеДокументы, ВидЭлектронногоДокумента, Ложь)
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ПрикладныеВиды.Количество() Тогда
					ЗаписатьОбъект = Истина;
					
					Если ВходящиеДокументы = Неопределено Тогда
						ВходящиеДокументы = Объект.ВходящиеДокументы.Выгрузить();
						ВходящиеДокументы.Колонки.Добавить("ВидЭДДляСортировки");
						ВходящиеДокументы.ЗагрузитьКолонку(ВходящиеДокументы.ВыгрузитьКолонку("ВходящийДокумент"), "ВидЭДДляСортировки");
					КонецЕсли;
					
					Для Каждого ВидЭлектронногоДокумента Из ПрикладныеВиды Цикл
						
						ДобавитьНастройкуВидаЭлектронногоДокумента(Объект, ВидЭлектронногоДокумента, Истина);
						
						ДобавитьСпособОбработкиВходящегоДокумента(ВходящиеДокументы, ВидЭлектронногоДокумента, Истина)
						
					КонецЦикла;
					
				КонецЕсли;
				
				Объект.ИсходящиеДокументы.Сортировать("Приоритет");
				
				Если ВходящиеДокументы <> Неопределено Тогда
					ВходящиеДокументы.Сортировать("ВидЭДДляСортировки");
					ВходящиеДокументы.Колонки.Удалить("ВидЭДДляСортировки");
					Объект.ВходящиеДокументы.Загрузить(ВходящиеДокументы);
				КонецЕсли;
				
				Если Объект.ПометкаУдаления
					И Объект.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
					ЗаписатьОбъект = Истина;
					Объект.СтатусПодключения    = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен;
					Объект.СтатусСоглашения     = Перечисления.СтатусыСоглашенийЭД.Закрыто;
					Объект.СостояниеСоглашения  = Перечисления.СостоянияСоглашенийЭД.Закрыто;
					Объект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
				КонецЕсли;
				
				Если ЗаписатьОбъект Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать настройку ЭДО: %1 по причине: %2';
												|en = 'Cannot process EDI setting %1 due to: %2'"), 
					Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.СоглашенияОбИспользованииЭД, Выборка.Ссылка, ТекстСообщения);
				
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.СоглашенияОбИспользованииЭД");
	
КонецПроцедуры

// Обработчик обновления для добавления из вне библиотеки.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюВнешнийВызов(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы.
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Если МетаданныеИОтбор.ПолноеИмя = "Справочник.СоглашенияОбИспользованииЭД" Тогда
		МетаданныеИОтборНастройки = МетаданныеИОтбор;
	ИначеЕсли МетаданныеИОтбор.ПолноеИмя = "Документ.ЭлектронныйДокументИсходящий" 
		ИЛИ МетаданныеИОтбор.ПолноеИмя = "Документ.ЭлектронныйДокументВходящий" Тогда
		Настройка = МетаданныеИОтбор.Отбор.НастройкаЭДО;
		МетаданныеИОтборНастройки = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(Настройка);
	КонецЕсли;
	
	Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтборНастройки);
	
КонецФункции

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Функция ПолучитьОписаниеОбластейМакетаОфисногоДокумента()
	
	ОписаниеОбластей = Новый Структура;
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Шапка", "Общая");
	Возврат ОписаниеОбластей;
	
КонецФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка"
		Или ВидФормы = "ФормаВыбора" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		РеквизитыСоглашения = ОбменСКонтрагентамиСлужебный.РеквизитыНастройкиЭДО(Параметры.Ключ);
		ЭтоИнтеркампани = РеквизитыСоглашения.ЭтоИнтеркампани;
		СпособОбменаЭД = РеквизитыСоглашения.СпособОбменаЭД;
		
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") 
		И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
		И Параметры.ЗначенияЗаполнения.Свойство("ЭтоИнтеркампани")
		И Параметры.ЗначенияЗаполнения.Свойство("СпособОбменаЭД") Тогда
		
		ЭтоИнтеркампани = Параметры.ЗначенияЗаполнения.ЭтоИнтеркампани;
		СпособОбменаЭД = Параметры.ЗначенияЗаполнения.СпособОбменаЭД;
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") 
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		И ТипЗнч(Параметры.ЗначениеКопирования) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда 
		
		РеквизитыСоглашения = ОбменСКонтрагентамиСлужебный.РеквизитыНастройкиЭДО(Параметры.ЗначениеКопирования);
		ЭтоИнтеркампани = РеквизитыСоглашения.ЭтоИнтеркампани;
		СпособОбменаЭД = РеквизитыСоглашения.СпособОбменаЭД;
		
	Иначе
		ЭтоИнтеркампани = Неопределено;
		СпособОбменаЭД = Неопределено;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяФорма = "ФормаЭлемента";
	Если ЭтоИнтеркампани = Истина Тогда
		ВыбраннаяФорма = "ФормаЭлементаИнтеркампани";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьИсходящиеЭД(СправочникСсылка, ВидыЭД)
	
	СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
	ИсходящиеДокументы = СправочникОбъект.ИсходящиеДокументы;
	Счетчик = 0;
	Пока Счетчик < ИсходящиеДокументы.Количество() Цикл
		СтрокаТЗ = ИсходящиеДокументы[Счетчик];
		ИсходящийЭД = СтрокаТЗ.ИсходящийДокумент;
		Если ВидыЭД.Найти(ИсходящийЭД) = Неопределено Тогда
			Счетчик = Счетчик + 1;
			Продолжить;
		Иначе
			ИсходящиеДокументы.Удалить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

Процедура ДобавитьНастройкуВидаЭлектронногоДокумента(Объект, ВидЭлектронногоДокумента, ЭтоПрикладнойВид)
	
	НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
	
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		НоваяСтрока.ПрофильНастроекЭДО = Объект.ИсходящиеДокументы[0].ПрофильНастроекЭДО;
		НоваяСтрока.СпособОбменаЭД = Объект.ИсходящиеДокументы[0].СпособОбменаЭД;
		НоваяСтрока.ИдентификаторОрганизации = Объект.ИсходящиеДокументы[0].ИдентификаторОрганизации;
		НоваяСтрока.ИдентификаторКонтрагента = Объект.ИсходящиеДокументы[0].ИдентификаторКонтрагента;
	Иначе
		НоваяСтрока.ПрофильНастроекЭДО = Объект.ПрофильНастроекЭДО;
		НоваяСтрока.СпособОбменаЭД = Объект.СпособОбменаЭД;
		НоваяСтрока.ИдентификаторОрганизации = Объект.ИдентификаторОрганизации;
		НоваяСтрока.ИдентификаторКонтрагента = Объект.ИдентификаторКонтрагента;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИспользоватьЭП", Истина);
	ИспользоватьЭП = ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи()
		И (НЕ ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(НоваяСтрока.СпособОбменаЭД)
			ИЛИ ЗначениеЗаполнено(Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора)));
	
	Если ЭтоПрикладнойВид Тогда
		ОбменСКонтрагентамиСлужебный.ЗаполнитьНастройкуПрикладногоВидаЭлектронногоДокумента(
			НоваяСтрока, ВидЭлектронногоДокумента, ИспользоватьЭП);
	Иначе
		ОбменСКонтрагентамиСлужебный.ЗаполнитьНастройкуВидаЭлектронногоДокумента(
			НоваяСтрока, ВидЭлектронногоДокумента, НоваяСтрока.СпособОбменаЭД, ИспользоватьЭП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСпособОбработкиВходящегоДокумента(ВходящиеДокументы, ВидЭлектронногоДокумента, ЭтоПрикладнойВид)
	
	СписокОпераций = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(ВидЭлектронногоДокумента, Истина);
	
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СпособОбработки = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = ВходящиеДокументы.Добавить();
	НоваяСтрока.СпособОбработки = СпособОбработки;
	НоваяСтрока.ВидЭДДляСортировки = ВидЭлектронногоДокумента;
	Если ЭтоПрикладнойВид Тогда
		НоваяСтрока.ВходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД;
		НоваяСтрока.ПрикладнойВидЭД  = ВидЭлектронногоДокумента;
	Иначе
		НоваяСтрока.ВходящийДокумент = ВидЭлектронногоДокумента;
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиДляОтправкиЭД()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО,
	|	СоглашенияОбИспользованииЭД.Организация КАК Организация,
	|	СоглашенияОбИспользованииЭД.Контрагент КАК Контрагент,
	|	СоглашенияОбИспользованииЭД.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.ИспользуетсяДляОтправки
	|	И СоглашенияОбИспользованииЭД.СтатусПодключения = Значение(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	
	Настройки = Запрос.Выполнить().Выгрузить();
	Настройки.Индексы.Добавить("Организация,Контрагент,ДоговорКонтрагента");
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#КонецЕсли