
#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеВидовИТипов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Свойство("РежимОткрытияОкна") Тогда
		ЭтотОбъект.РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	СоответствиеВидовИТипов = Новый Соответствие;
	
	// Подготовка соответствия для выбора типов входящих документов.
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьМодифицированностьФормы = Истина;
		
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
		Объект.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Наименование = Строка(Объект.Контрагент);
		КонецЕсли;
		
		Если Параметры.Свойство("Организация") Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		
		// Заполнение по умолчанию профиля настроек ЭДО.
		Если Не ЗначениеЗаполнено(Объект.ПрофильНастроекЭДО) Тогда
			УстановитьЗначенияПоУмолчанию();
		КонецЕсли;
		
		// При создании из профиля настроек ЭДО, он передается в настройку.
		Если ЗначениеЗаполнено(Объект.ПрофильНастроекЭДО) Тогда
			ПрофильНастроекЭДОПриИзмененииНаСервере();
		КонецЕсли;
		
		ЗаполнитьПоШаблонуНаСервере("Автоматически", СоответствиеВидовИТипов);
		
		УстановитьВариантыЗаполненияПолейПоУмолчанию();
		
		ПодготовитьФорму();
	Иначе
		ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов);
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьНастройкуВходящихДокументов") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВходящиеЭлектронныеДокументы;
	КонецЕсли;
	
	АдресСоответствияВидовИТипов  = ПоместитьВоВременноеХранилище(СоответствиеВидовИТипов,УникальныйИдентификатор);
	
	ОбновитьСтатусПодключения();
	
	СкрытьПодменюЭДО();
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
	// Установка связей параметров выбора для поля "ДоговорКонтрагента".
	ОбменСКонтрагентамиСлужебный.УстановитьСвязиПараметровВыбораДоговорКонтрагента(
		Элементы.ДоговорКонтрагента, Элементы.ОрганизацияОтправитель.ПутьКДанным, Элементы.Контрагент.ПутьКДанным);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Если объект - является соглашением-Интеркампани, то ничего
	// не выполняем на сервере и при переходе процедуру при открытии, откроем нужную форму.
	Если Объект.ЭтоИнтеркампани Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента = СтрШаблон(НСтр("ru = '%1 ИНН: %2 КПП: %3';
											|en = '%1 TIN: %2 CRTR: %3'"), 
		Объект.НаименованиеКонтрагента, Объект.ИННКонтрагента, Объект.КППКонтрагента);
	
	ПодготовитьФорму();
	ЗаполнитьПредставлениеНастроек(Объект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// При заполнении настройки ЭДО на сервере взведем модифицированность вручную.
	Если УстановитьМодифицированностьФормы Тогда
		ЭтотОбъект.Модифицированность = истина;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
		Элементы.КаталогИсходящихДокументов.КнопкаВыбора = Ложь;
	#КонецЕсли
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствияВидовИТипов) Тогда
		СоответствиеВидовИТипов = ПолучитьИзВременногоХранилища(АдресСоответствияВидовИТипов);
	КонецЕсли;
	
	ВывестиПредставленияТиповДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Прочитать();
		
		ОбновитьСтатусПодключения();
		ОбновитьОтображениеДанных();
		ВывестиПредставленияТиповДокументов();
		
		ЗаполнитьПредставлениеНастроек(Объект);
		
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("ОбновитьИсходящиеЭД") Тогда
		
		Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Объект.ПрофильНастроекЭДО = Параметр Тогда
			Возврат;
		КонецЕсли;
		
		ОпределитьИспользованиеКаталога(Истина);
		
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
		И ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи") Тогда
		
		ЗаполнитьПредставлениеНастроек(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПропуститьПроверки") Тогда
		// Выполняем серверный вызов, так как нужно проверить валидность маршрута и в случае ошибок спросить у пользователя,
		// записывать ли его.
		ЕстьОшибкиЗаполнения = Ложь;
		Если Не НастройкаВалидирована(ЕстьОшибкиЗаполнения) Тогда
			Отказ = Истина;
			
			Если Не ЕстьОшибкиЗаполнения Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗаписиПолученОтвет", ЭтотОбъект, ПараметрыЗаписи);
				ТекстВопроса = НСтр("ru = 'Обнаружены возможные ошибки в настройках маршрутов. Продолжить запись?';
									|en = 'Possible errors in route settings were found. Continue writing?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, 
					НСтр("ru = 'Настройка некорректна';
						|en = 'Incorrect setting'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сохранение сертификатов в объекте из хранилища
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого ДанныеСтроки Из Объект.СертификатыПодписейКонтрагента Цикл
		Если НЕ ПустаяСтрока(ДанныеСтроки.АдресФайлаВХранилище) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресФайлаВХранилище);
			ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
			ТекущийОбъект.СертификатыПодписейКонтрагента[ДанныеСтроки.НомерСтроки - 1].Сертификат = ХранилищеЗначения;
		КонецЕсли;
	КонецЦикла; 
	
	// Помещение нового сертификата шифрования из временного хранилища
	Если Не ПустаяСтрока(АдресСертификатаКонтрагентаДляШифрования) И НЕ ПустаяСтрока(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресСертификатаКонтрагентаДляШифрования);
		ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = ХранилищеЗначения;
	ИначеЕсли ПустаяСтрока(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда 
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "РасширенныйРежимНастройкиСоглашения") Тогда
		ПараметрыЗаписи.Вставить("ОчиститьНастройкиДополнительныхПолей", Истина);
		УстановитьВариантыЗаполненияПолейПоУмолчанию();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыЗаписи, "ОчиститьНастройкиДополнительныхПолей", Ложь) Тогда
		РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ОчиститьДанныеПоНастройкеЭДО(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВывестиПредставленияТиповДокументов();
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
	ОбменСКонтрагентамиКлиент.ОповеститьОбИзмененииТекущихДелПоЭДО();
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДопустимыеСостоянияСоглашенияДляВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийЭД.Закрыто")
		ИЛИ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийЭД.ОжидаетсяСогласование") Тогда
		
		Если ЧерезОператораЭДО Тогда
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru = 'При отмене действия соглашения необходимо отклонить приглашение.
									|Отклонить?';
									|en = 'When canceling the agreement validity, you must reject the invitation.  
									|Reject?'");
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеСостояния", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Отсоединен");
			ОбновитьСтатусПодключения(Истина);
		КонецЕсли;
	Иначе
		Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
		ОбновитьСтатусПодключения(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Объект.ИдентификаторКонтрагента) Тогда 
		
		Оповещение = Новый ОписаниеОповещения("КонтрагентПриИзмененииОтветНаВопрос", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Идентификатор получателя заполнен, при изменении контрагента он будет изменен.
	                        |Изменить идентификатор получателя?';
	                        |en = 'Recipient ID is filled in, it will be changed when changing counterparty. 
	                        |Change recipient ID?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	МенятьИдентификатор = РезультатВопроса = КодВозвратаДиалога.Да;
	КонтрагентПриИзмененииНаСервере(МенятьИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильНастроекЭДОПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПрофильНастроекЭДОПриИзменении", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Будет сброшено значение в поле ""Идентификатор получателя"" на форме настройки ЭДО.
								|Продолжить?';
								|en = 'Value will be reset in the ""Recipient ID"" field on EDI setting form.
								|Continue?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Объект.Наименование = Строка(Объект.Контрагент) + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		", " + Строка(Объект.ДоговорКонтрагента), "");
	
КонецПроцедуры

// Настройки обмена через оператора

&НаКлиенте
Процедура ИдентификаторКонтрагентаПриИзменении(Элемент)
	
	Объект.ИдентификаторКонтрагента = СокрЛП(Объект.ИдентификаторКонтрагента);
	ОпределитьИспользуемыеСпособыОбменаЭД(Неопределено, Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

// Настройки прямого обмена
&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент.ТекстРедактирования, Объект.КаталогВходящихДокументов);
	
	ОбновитьВходящийКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовПриИзменении(Элемент)
	
	ОбновитьВходящийКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент.ТекстРедактирования, Объект.КаталогИсходящихДокументов);
	
	ОбновитьИсходящийКаталог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовПриИзменении(Элемент)
	
	ОбновитьИсходящийКаталог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШифроватьДанныеПакетаЭДПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеШифрованияДанных", ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки)
		ИЛИ ЗначениеЗаполнено(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		ТекстВопроса = НСтр("ru = 'Настройки шифрования будут очищены. Продолжить?';
							|en = 'Encryption settings will be cleared. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСертификатыПодписейПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеПроверкиСертификатов", ЭтотОбъект);
	Если Объект.СертификатыПодписейКонтрагента.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Настройки проверка сертификатов подписи контрагентов будут очищены. Продолжить?';
							|en = 'Settings of counterparty signature certificates check will be cleared. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ПоместитьВХранилищеСертификат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьВыборФайлаСертификатаШифрования", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, , , Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ОсновнаяНастройкаСуществует() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяДляОтправкиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения Тогда
		ТекстСообщения = НСтр("ru = 'Изменение табличной части ""Электронные документы"" возможно:
		|""групповое"" - в Профиле настроек ЭДО;
		|""индивидуальное"" - в расширенном режиме настроек.';
		|en = 'You can change tabular section ""Electronic documents"":
		|""group"" - in EDI settings profile;
		|""individual"" - in the extended mode of settings.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПриИзмененииИсходящиеДокументы(Элемент.ТекущийЭлемент.Имя, Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВидЭД = ?(ЗначениеЗаполнено(ТекущиеДанные.ПрикладнойВидЭД),
			ТекущиеДанные.ПрикладнойВидЭД, ТекущиеДанные.ИсходящийДокумент);
		СписокДоступныхВерсий = ОбменСКонтрагентамиСлужебныйКлиент.ДоступныеВерсииФорматаПоПараметрамЭД(ВидЭД,
			ТекущиеДанные.СпособОбменаЭД, Объект.ИспользоватьУПД, Объект.ИспользоватьУКД);
		ТекущийЭлементСписка = СписокДоступныхВерсий.НайтиПоЗначению(ТекущиеДанные.ВерсияФормата);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсходящиеДокументыВерсияФорматаНачалоВыбораЗавершить",
			ЭтотОбъект, ТекущиеДанные);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВерсий, Элемент, ТекущийЭлементСписка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаНачалоВыбораЗавершить(ВыбранныйЭлемент, ТекущиеДанные) Экспорт 
	
	// Изменение представления регламента ЭДО при изменении формата документа Акт об оказании услуг.
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
		ТекущиеДанные.ВерсияФормата = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Элементы.ИсходящиеДокументы.ЗакончитьРедактированиеСтроки(Ложь);
	
	УстановитьВариантыЗаполненияИсходящегоДокументаНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПриИзмененииФорматаВСтрокеНастроек(ТекущиеДанные, Истина);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУПДПриИзменении(Элемент)
	ИзменитьФлагУПДУКД();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУКДПриИзменении(Элемент)
	ИзменитьФлагУПДУКД();
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИсходящиеДокументыДополнительныеНастройки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Элемент.ТекущиеДанные;
		
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Формировать Тогда
			Возврат;
		КонецЕсли;
		
		СвойстваФормы = ОбменСКонтрагентамиСлужебныйКлиент.СвойстваДокументооборотаЭД();
		ЗаполнитьЗначенияСвойств(СвойстваФормы, ДанныеСтроки);
		
		СвойстваФормы.Вставить("ВидЭД", ?(ЗначениеЗаполнено(ДанныеСтроки.ПрикладнойВидЭД),
			ДанныеСтроки.ПрикладнойВидЭД, ДанныеСтроки.ИсходящийДокумент));
		СвойстваФормы.Вставить("ВерсияФормата", ДанныеСтроки.ВерсияФормата);
		СвойстваФормы.Вставить("СпособОбменаЭД", ДанныеСтроки.СпособОбменаЭД);
		СвойстваФормы.Вставить("ЗаполнениеКодаТовара", ДанныеСтроки.ЗаполнениеКодаТовара);
		СвойстваФормы.Вставить("ОтображатьВыборПрофиля", Истина);
		СвойстваФормы.Вставить("Организация", Объект.Организация);
		СвойстваФормы.Вставить("ИспользоватьУПД", Объект.ИспользоватьУПД);
		СвойстваФормы.Вставить("НастройкаЭДО", Объект.Ссылка);
		СвойстваФормы.Вставить("РасширенныйРежимНастройки", Объект.РасширенныйРежимНастройкиСоглашения);
		
		Если ЗначениеЗаполнено(Объект.СпособОбменаЭД) Тогда
			// Прямой обмен можно выбирать всегда: он не мешает обменам через операторов.
			РазрешенныеСпособыОбмена = Новый СписокЗначений;
			РазрешенныеСпособыОбмена.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
			РазрешенныеСпособыОбмена.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
			РазрешенныеСпособыОбмена.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
			
			// Если это обмен через оператора, то можно выбирать только профили с таким же способом обмена.
			Если Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
				РазрешенныеСпособыОбмена.Добавить(Объект.СпособОбменаЭД);
			КонецЕсли;
			СвойстваФормы.Вставить("РазрешенныеСпособыОбмена", РазрешенныеСпособыОбмена);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаДокументооборотаПродолжить", ЭтотОбъект, СвойстваФормы);
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуРегламентаЭДО(ОписаниеОповещения, СвойстваФормы, Элемент);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыПодписей

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
		ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Обработчик = Новый ОписаниеОповещения("ФайлОбработкаВыбора", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, , , Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
	ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Записать?';
							|en = 'Current EDI setting was changed. Write?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашение(Команда)
	
	ДопПараметры = Новый Структура("Действие", "Принять");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект, ДопПараметры);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Записать?';
							|en = 'Current EDI setting was changed. Write?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашение(Команда)
	
	ДопПараметры = Новый Структура("Действие", "Отклонить");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект, ДопПараметры);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Записать?';
							|en = 'Current EDI setting was changed. Write?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроек(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ТестНастроекПродолжить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Продолжить выполнение теста?';
							|en = 'Current EDI setting was changed. Continue the test execution? '");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", НСтр("ru = 'Сохранить и выполнить тест';
												|en = 'Save and test'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить тест';
												|en = 'Cancel the test'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , "Выполнить", НСтр("ru = 'Тест настроек';
																							|en = 'Test settings'"));
	Иначе
		ТестНастроекПродолжить("Выполнить", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРасширенныйРежимНастройкиСоглашения(Команда)
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения
		И Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Включение расширенного режима возможно только после записи данных.
			|Данные будут записаны.';
			|en = 'Data has not been recorded yet.
			|Enabling the extended mode is possible only after the data has been recorded.
			|The data will be recorded.'");
		Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
	ИначеЕсли Объект.РасширенныйРежимНастройкиСоглашения Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменения расширенного режима будут очищены.
			|Продолжить?';
			|en = 'Extended mode changes will be cleared.
			|Continue?'");
		Оповещение = Новый ОписаниеОповещения("ПродолжитьВключениеРасширенногоРежимаНастройкиПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	Иначе
		ВключитьРасширенныйРежимНастройкиИЗаписать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРасширенныйРежимНастройкиСоглашенияНаСервере()
	
	ИсходящиеДокументыПрофиляНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПрофильНастроекЭДО,
		"ИсходящиеДокументы");
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПрофильНастроекЭДО,
		"ИсходящиеДокументы, ИспользоватьУПД, ИспользоватьУКД");
	
	Объект.ИспользоватьУПД             = ПараметрыПрофиляНастроек.ИспользоватьУПД;
	Объект.ИспользоватьУКД             = ПараметрыПрофиляНастроек.ИспользоватьУКД;
	
	// Загружаем ТЧ из профиля настроек ЭДО.
	Объект.ИсходящиеДокументы.Очистить();
	Если ЗначениеЗаполнено(ПараметрыПрофиляНастроек.ИсходящиеДокументы) Тогда
		Объект.ИсходящиеДокументы.Загрузить(ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить());
		Объект.ИсходящиеДокументы.Сортировать("Приоритет");
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользуемыеСпособыОбменаЭД(Объект.ПрофильНастроекЭДО, Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗакрытьПослеЗаписи", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФорму()
	
	ОпределитьИспользуемыеСпособыОбменаЭД();
	
	Если ЧерезКаталог ИЛИ ЧерезЭлектроннуюПочту ИЛИ ЧерезFTP Тогда
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеПодписиЭД") Тогда
			
			Если Объект.ШифроватьДанныеПакетаЭД Тогда
				
				ДокументОбъект = РеквизитФормыВЗначение("Объект");
				ДвоичныеДанныеСертификата  = ДокументОбъект.СертификатКонтрагентаДляШифрования.Получить();
				Если ДвоичныеДанныеСертификата <> Неопределено Тогда
					СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
					ПредставлениеСертификатаКонтрагентаДляШифрования = ПредставлениеСертификата;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	КонецЕсли;
	
	ИспользуетсяДополнительнаяАналитикаПартнеры = ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры();
	Если ИспользуетсяДополнительнаяАналитикаПартнеры И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ИмяРеквизитаПартнераКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаПартнераКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользованиеКаталога();
	
	Если Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАутентификацииНаСайте = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользованиеКаталога(ОбновитьДоступностьВидимостьКоманды = Ложь)
	
	АктуальныеЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	Если Не АктуальныеЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		
		ИспользуетсяКаталогВПрограмме = Истина;
		ПараметрыОтбора = Новый Структура("ИсходящийДокумент, Формировать", Перечисления.ВидыЭД.КаталогТоваров, Истина);
		Если Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			ИспользуетсяКаталогВСоглашении = Истина;
		Иначе
			ИспользуетсяКаталогВСоглашении = Ложь;
		КонецЕсли;
	Иначе
		ИспользуетсяКаталогВПрограмме = Ложь;
	КонецЕсли;
	
	Если ОбновитьДоступностьВидимостьКоманды Тогда
		 УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(ЭтотОбъект)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Партнер.Видимость = Ложь;
	Если Форма.ИспользуетсяДополнительнаяАналитикаПартнеры
		И ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьПартнеровИКонтрагентов") Тогда
		
		Элементы.Партнер.Видимость = Истина;
	КонецЕсли;
	
	Если Форма.ЧерезКаталог Тогда
		
		ОбновитьПутиКаталоговОбмена(Форма);
		
	КонецЕсли;
	
	Элементы.ОтправитьПриглашение.Видимость                              = Форма.ЧерезОператораЭДО
		И (Объект.СтатусПодключения  = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить")
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Отсоединен")
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Ошибка"));
	Элементы.ПринятьПриглашение.Видимость                                = Форма.ЧерезОператораЭДО
		И Объект.СтатусПодключения   = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие");
	Элементы.ОтклонитьПриглашение.Видимость                              = Форма.ЧерезОператораЭДО
		И Объект.СтатусПодключения   = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие");
	
	// Прямой обмен
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезКаталог.Видимость          = Форма.ЧерезКаталог;
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезЭлектроннуюПочту.Видимость = Форма.ЧерезЭлектроннуюПочту;
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезFTP.Видимость              = Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбмена.Видимость                      = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбменаШифрование.Видимость            = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбменаДоверенныеСертификаты.Видимость = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	
	// РасширенныйРежимНастройкиСоглашения
	Элементы.ФормаВключитьРасширенныйРежимНастройкиСоглашения.Заголовок = НСтр("ru = 'Включить расширенный режим настроек ЭДО';
																				|en = 'Enable extended mode of EDI settings'");
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		Элементы.ФормаВключитьРасширенныйРежимНастройкиСоглашения.Заголовок = НСтр("ru = 'Выключить расширенный режим настроек ЭДО';
																					|en = 'Disable extended mode of EDI settings'");
	КонецЕсли;
	
	Элементы.ПрофильНастроекЭДО.Видимость                         = Не Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИдентификаторОрганизации.Видимость                   = Не Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИдентификаторКонтрагента.Видимость                   = Не Объект.РасширенныйРежимНастройкиСоглашения;
	
	Элементы.ДекорацияСтатусПодключения.Ширина = ?(Объект.РасширенныйРежимНастройкиСоглашения, 14, 17);
	
	Элементы.ИсходящиеДокументыДополнительныеНастройки.Видимость = Объект.РасширенныйРежимНастройкиСоглашения;
	
	// Использование ЭП
	Элементы.ГруппаНастройкиПрямогоОбменаШифрование.Видимость = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	Элементы.ГруппаШифрованиеДанныхПакетаЭД.Видимость                          = Объект.ШифроватьДанныеПакетаЭД;
	Элементы.ГруппаНастройкиПрямогоОбменаДоверенныеСертификатыСписок.Видимость = Объект.ПроверятьСертификатыПодписей;
	
	// Доступные состояния соглашения.
	Элементы.Состояние.Доступность = Не Форма.ЧерезОператораЭДО
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
		
	// Использование УПД и УКД
	Элементы.ИспользоватьУПД.Видимость = Объект.РасширенныйРежимНастройкиСоглашения
		И НЕ (Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP);
	Элементы.ИспользоватьУКД.Видимость = Объект.РасширенныйРежимНастройкиСоглашения
		И НЕ (Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP);
	
	УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(Форма);
	
	КонтрагентПрисоединен = (Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен"));
	КонтрагентДоступен = Не (КонтрагентПрисоединен И ЗначениеЗаполнено(Объект.Контрагент));
	Элементы.Контрагент.ТолькоПросмотр = Не КонтрагентДоступен;
	Если КонтрагентДоступен Тогда
		Элементы.Контрагент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы.Контрагент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.Контрагент.Подсказка = НСтр("ru = 'Изменение контрагента для настройки в статусе ""Присоединен"" запрещено.';
											|en = 'Change of counterparty for setting in the Connected status is prohibited.'");
	КонецЕсли;
	
	Элементы.РеквизитыКонтрагента.Видимость = ЗначениеЗаполнено(Объект.НаименованиеКонтрагента) И Не ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.СтраницаИсходящиеЭлектронныеДокументы.Видимость = Объект.ИспользуетсяДляОтправки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению") <> Неопределено Тогда
		Элементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Видимость = Форма.ИспользуетсяКаталогВПрограмме;
		Элементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Доступность = Форма.ИспользуетсяКаталогВСоглашении;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//
	УсловноеОформление.Элементы.Очистить();

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОрганизацияОтправитель.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторОрганизации.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторКонтрагента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлектроннаяПочтаКонтрагента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.FTPКаталогИсходящихДокументов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.FTPКаталогВходящихДокументов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КаталогВходящихДокументов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КаталогИсходящихДокументов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СостояниеСоглашения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыВерсияФормата.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.NotGroup;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИсходящийДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СчетФактура);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ПрикладнойЭД);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктОРасхождениях);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособОбменаЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СписокЗначений.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	ОбменСКонтрагентамиСлужебный.УстановитьУсловноеОформлениеФорматов(ЭтотОбъект);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыДополнительныеНастройки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ДополнительныеНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыДополнительныеНастройки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ДополнительныеНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыВидДокумента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИсходящийДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыЭД.ПрикладнойЭД;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВходящиеДокументыВходящийДокумент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВходящиеДокументы.ВходящийДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыЭД.ПрикладнойЭД;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПутиКаталоговОбмена(Форма)
	
	ОбновитьВходящийКаталога(Форма);
	ОбновитьИсходящийКаталог(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВходящийКаталога(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ШаблонЗаголовка = НСтр("ru = 'Полный путь: %1';
							|en = 'Full path: %1'");
	
	КаталогВходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			Форма.ПутьКРодительскомуКаталогуПрофильНастроекЭДО, Объект.КаталогВходящихДокументов);
		
	Элементы.ПояснениеКаталогаВходящихДокументов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, КаталогВходящихДокументов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсходящийКаталог(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ШаблонЗаголовка = НСтр("ru = 'Полный путь: %1';
							|en = 'Full path: %1'");
	
	КаталогИсходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			Форма.ПутьКРодительскомуКаталогуПрофильНастроекЭДО, Объект.КаталогИсходящихДокументов);
			
	Элементы.ПояснениеКаталогаИсходящихДокументов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, КаталогИсходящихДокументов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНастроекЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	&Организация";
	
	ТекстЗапросаОрганизация = "ИСТИНА";
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстЗапросаОрганизация = "ПрофилиНастроекЭДО.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Организация", ТекстЗапросаОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Объект.ПрофильНастроекЭДО = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(МенятьИдентификаторКонтрагента = Истина)
	
	Объект.Наименование = Строка(Объект.Контрагент) + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		", " + Строка(Объект.ДоговорКонтрагента), "");
		
	Если Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		Если МенятьИдентификаторКонтрагента Тогда
			Объект.ИдентификаторКонтрагента = "";
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	ИначеЕсли МенятьИдентификаторКонтрагента Тогда 
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	ОпределитьИспользуемыеСпособыОбменаЭД(Неопределено, Объект.ИдентификаторКонтрагента);
	
	Если ИспользуетсяДополнительнаяАналитикаПартнеры И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ИмяРеквизитаПартнераКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаПартнераКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрофильНастроекЭДОПриИзмененииНаСервере()
	
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПрофильНастроекЭДО,
		"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы, ИспользоватьУПД, ИспользоватьУКД");
		
	Объект.Организация                 = ПараметрыПрофиляНастроек.Организация;
	Объект.СпособОбменаЭД              = ПараметрыПрофиляНастроек.СпособОбменаЭД;
	Объект.ИдентификаторОрганизации    = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
	
	Объект.ИспользоватьУПД             = ПараметрыПрофиляНастроек.ИспользоватьУПД;
	Объект.ИспользоватьУКД             = ПараметрыПрофиляНастроек.ИспользоватьУКД;
	
	// Загружаем ТЧ из профиля настроек ЭДО.
	Объект.ИсходящиеДокументы.Очистить();
	Если ЗначениеЗаполнено(ПараметрыПрофиляНастроек.ИсходящиеДокументы) Тогда
		Объект.ИсходящиеДокументы.Загрузить(ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить());
		Объект.ИсходящиеДокументы.Сортировать("Приоритет");
	КонецЕсли;
	
	Объект.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
	Если Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(ПараметрыПрофиляНастроек.СпособОбменаЭД) Тогда
		Объект.ИдентификаторКонтрагента = "";
		Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
		Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
	Иначе
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	ОпределитьИспользуемыеСпособыОбменаЭД(Объект.ПрофильНастроекЭДО, Объект.ИдентификаторКонтрагента);
	
	Объект.ДоговорКонтрагента = Неопределено;
	
	ОбновитьСтатусПодключения();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИсходящиеДокументыПрофильНастроекЭДОПриИзмененииНаСервере(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ПрофильНастроекЭДО,
		"ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений");
		
	ДанныеСтроки.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
	ДанныеСтроки.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
	ДанныеСтроки.ИдентификаторКонтрагента = "";
	
	Если ПараметрыПрофиляНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		Если ЧерезОператораЭДО Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
			НайденныеСтроки = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторКонтрагента) Тогда
					ДанныеСтроки.ИдентификаторКонтрагента = Строка.ИдентификаторКонтрагента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	ИначеЕсли ПараметрыПрофиляНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		Если ЧерезОператораЭДО Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
			НайденныеСтроки = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторКонтрагента) Тогда
					ДанныеСтроки.ИдентификаторКонтрагента = Строка.ИдентификаторКонтрагента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	Иначе
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, ДанныеСтроки.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользуемыеСпособыОбменаЭД();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользуемыеСпособыОбменаЭД(ПрофильНастроекЭДО = Неопределено, ИдентификаторКонтрагента = Неопределено)
	
	ЧерезОператораЭДО     = Ложь;
	ЧерезКаталог          = Ложь;
	ЧерезЭлектроннуюПочту = Ложь;
	ЧерезFTP              = Ложь;
	
	// При изменении Профиля настроек ЭДО в шапке Настроек.
	Если ПрофильНастроекЭДО <> Неопределено Тогда
		ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
			"Организация, ИдентификаторОрганизации, СпособОбменаЭД");
	КонецЕсли;
	
	// Получим электронную почту контрагента для дальнейшего использования.
	ЭлектроннаяПочтаКонтрагента = ""; 
	ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента(Объект.Контрагент, ЭлектроннаяПочтаКонтрагента);
	
	Для каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
		
		Если ПрофильНастроекЭДО <> Неопределено Тогда
			СтрокаТаблицы.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
			СтрокаТаблицы.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
			СтрокаТаблицы.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
		КонецЕсли;
			
		Если ИдентификаторКонтрагента <> Неопределено Тогда
			СтрокаТаблицы.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
			ИЛИ СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")Тогда
			ЧерезОператораЭДО = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаДляПриглашения) Тогда
				Объект.ЭлектроннаяПочтаДляПриглашения = ЭлектроннаяПочтаКонтрагента;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
			ЧерезЭлектроннуюПочту = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаКонтрагента) Тогда
				Объект.ЭлектроннаяПочтаКонтрагента = ЭлектроннаяПочтаКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
			ЧерезКаталог = Истина;
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.ПрофильНастроекЭДО, "РесурсВходящихДокументов");
			
			ШаблонНаименование = НСтр("ru = '%1_%2';
										|en = '%1_%2'");
			ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагента");
			НаименованиеКонтрагента = ЗначениеРеквизитаОбъектаБезопасно(Объект.Контрагент, ИмяРеквизитаНаименованиеКонтрагента, "");
			
			ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеОрганизации");
			НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, ИмяРеквизитаНаименованиеОрганизации);
			
			Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
				Если Не ЗначениеЗаполнено(Объект.КаталогВходящихДокументов)  Тогда
					Объект.КаталогВходящихДокументов = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонНаименование,
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""),
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""))," ", "");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.КаталогИсходящихДокументов) Тогда
					Объект.КаталогИсходящихДокументов = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонНаименование,
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""),
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""))," ", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
			ЧерезFTP = Истина;
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.ПрофильНастроекЭДО, "РесурсВходящихДокументов");
			
			ШаблонНаименование = НСтр("ru = '%1_%2';
										|en = '%1_%2'");
			ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагента");
			НаименованиеКонтрагента = ЗначениеРеквизитаОбъектаБезопасно(Объект.Контрагент, ИмяРеквизитаНаименованиеКонтрагента, "");
			
			ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеОрганизации");
			НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, ИмяРеквизитаНаименованиеОрганизации);
			
			Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
				Если Не ЗначениеЗаполнено(Объект.КаталогВходящихДокументовFTP) Тогда
					Объект.КаталогВходящихДокументовFTP = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонНаименование,
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""),
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""))," ", "");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.КаталогИсходящихДокументовFTP) Тогда
					Объект.КаталогИсходящихДокументовFTP = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонНаименование,
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""),
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""))," ", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
			ИспользуетсяКаталогВПрограмме = Истина;
			Если СтрокаТаблицы.Формировать Тогда
				ИспользуетсяКаталогВСоглашении = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКаталога(ПутьККаталогу, КаталогДокументов)
	
#Если НЕ ВебКлиент Тогда
		
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогКаталога.Заголовок = НСтр("ru = 'Укажите каталог для обмена ЭД';
									|en = 'Specify a directory for ED exchange'");
	
	КаталогОбмена = ПутьКРодительскомуКаталогуПрофильНастроекЭДО;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			ПутьККаталогу);
		
		КаталогНаДиске  = Новый Файл(ПутьОбмена);
		Если КаталогНаДиске.Существует() Тогда
			КаталогОбмена = ПутьОбмена;
		КонецЕсли;
	КонецЕсли;
	ДиалогКаталога.Каталог = КаталогОбмена;
	
	Если ДиалогКаталога.Выбрать() Тогда
		СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДиалогКаталога.Каталог, Истина);
		Модифицированность = Не КаталогДокументов = СтруктураФайла.Имя;
		КаталогДокументов = СтруктураФайла.Имя;
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеПоТабЧасти(ВыбранноеЗначение, АдресВХранилище = Неопределено)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отпечаток = "";
	ДвоичныеДанные = Неопределено;
	ПредставлениеСертификата = "";
	
	Если АдресВХранилище <> Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.';
									|en = 'Certificate file must have DER X.509 format, operation aborted. '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
	КонецЕсли;
	
	ДанныеСтроки = Объект.СертификатыПодписейКонтрагента.НайтиПоИдентификатору(ВыбранноеЗначение);
	ДанныеСтроки.Отпечаток  = Отпечаток;
	ДанныеСтроки.ПредставлениеСертификатаКонтрагента = ПредставлениеСертификата;

	ДанныеСтроки.АдресФайлаВХранилище = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеСертификат(АдресВХранилище = Неопределено)
	
	ПредставлениеСертификата = "";
	
	Если АдресВХранилище <> Неопределено Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.';
									|en = 'Certificate file must have DER X.509 format, operation aborted. '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
		
	КонецЕсли;
	
	ПредставлениеСертификатаКонтрагентаДляШифрования = ПредставлениеСертификата;
	
	АдресСертификатаКонтрагентаДляШифрования = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификатор(ИмяСправочника, СсылкаНаИсточникИдентификатора, ИскомыйИдентификатор)
	
	Если Не ЗначениеЗаполнено(СсылкаНаИсточникИдентификатора) Тогда
		ИскомыйИдентификатор = "";
		Возврат;
	КонецЕсли;
	
	Если ИмяСправочника = "Контрагенты" Тогда
		ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
		ИменаРеквизитов = ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента;
		ЗначенияПоУмолчанию = Новый Структура(ИменаРеквизитов, "", "");
		ПараметрыКонтрагента = ЗначенияРеквизитовОбъектаБезопасно(СсылкаНаИсточникИдентификатора, ИменаРеквизитов, ЗначенияПоУмолчанию);
		
		СтрокаЗаполнения = Строка(ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента])
			+ "_" + Строка(ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		ИскомыйИдентификатор = СокрЛП(СтрокаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользованиеИдентификатораКонтрагентаУникально(Отказ)
	
	// Проверка на уникальное использование настройки ЭДО по реквизитам: ИдентификаторКонтрагента.
	Отбор = Новый Структура;
	Отбор.Вставить("Формировать", Истина);
	Таблица = Объект.ИсходящиеДокументы.Выгрузить(Отбор);
	
	МассивИдКонтрагентов = Таблица.ВыгрузитьКолонку("ИдентификаторКонтрагента");
	
	ЗапросПоИД = Новый Запрос;
	ЗапросПоИД.УстановитьПараметр("ТекущаяНастройка",     Объект.Ссылка);
	ЗапросПоИД.УстановитьПараметр("Организация",          Объект.Организация);
	ЗапросПоИД.УстановитьПараметр("ПрофильНастроекЭДО",   Объект.ПрофильНастроекЭДО);
	ЗапросПоИД.УстановитьПараметр("Контрагент",           Объект.Контрагент);
	ЗапросПоИД.УстановитьПараметр("МассивИдКонтрагентов", МассивИдКонтрагентов);
	ЗапросПоИД.Текст =
	"ВЫБРАТЬ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация КАК Организация,
	|	НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка <> &ТекущаяНастройка
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|	И НастройкиЭДОИсходящиеДокументы.Формировать
	|	И НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента В (&МассивИдКонтрагентов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента";
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросПоИД.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблонСообщения = НСтр("ru = 'Идентификатор контрагента %1
			|уже используется в настройке ЭДО между контрагентом %2 и организацией %3';
			|en = 'Counterparty ID %1
			|is already used in setting of EDI between counterparty %2 and company %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ИдентификаторКонтрагента,
			Выборка.Контрагент, Выборка.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусПодключения(ОбновитьДатуИзмененияСтатуса = Ложь)
	
	Если ОбновитьДатуИзмененияСтатуса Тогда
		ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
	КонецЕсли;
	
	СтатусПодключения = "" + Объект.СтатусПодключения;
	Если ЗначениеЗаполнено(Объект.ДатаИзмененияСтатуса) Тогда
		СтатусПодключения = СтатусПодключения + " "+ "("+ Формат(Объект.ДатаИзмененияСтатуса ,"ДЛФ=D")+")";
	КонецЕсли;
	
	Элементы.ОписаниеОшибки.Видимость = ЗначениеЗаполнено(Объект.ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПодменюЭДО()
	
	ВидыЭД = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(ВидыЭД);
	Если ВидыЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		Элементы.КомандыЭДО.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Тестирование настроек ЭДО
&НаСервере
Функция ПараметрыПрофиляНастроекЭДО(ПрофильНастроекЭДО)
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"РесурсВходящихДокументов, СертификатыПодписейОрганизации");
	ВыборкаСертификатов = ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации.Выбрать();
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	Если ВыборкаСертификатов.Количество() > 0 Тогда
		Пока ВыборкаСертификатов.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСертификатов.Сертификат.Пользователь)
				ИЛИ ВыборкаСертификатов.Сертификат.Пользователь = Пользователи.ТекущийПользователь() Тогда
				Сертификат = ВыборкаСертификатов.Сертификат;
				ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
				ПараметрыСертификата.Вставить("СертификатПодписи", Сертификат);
				СоотвСертификатовИИхСтруктур.Вставить(Сертификат, ПараметрыСертификата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыПрофиляНастроекЭДО.Вставить("СертификатыПодписейОрганизации", СоотвСертификатовИИхСтруктур);
	
	Возврат ПараметрыПрофиляНастроекЭДО;
	
КонецФункции

&НаСервере
Процедура ТестСвязиПрямогоОбменаНаСервере(КаталогВходящихДокументов, КаталогИсходящихДокументов, ПрофильНастроекЭДО)
	
	// Блок проверки доступа к каталогам.
	ШаблонСообщения = НСтр("ru = 'Проверка доступа к каталогам обмена.
		|%1';
		|en = 'Verifying access to exchange directories.
		|%1'");
	Попытка
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогВходящихДокументов)
			И ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогИсходящихДокументов) Тогда
			РезультатТеста = НСтр("ru = 'Пройден успешно.';
									|en = 'Passed successfully.'");
		Иначе
			РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("107");
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2';
		|en = '%1
		|%2'");
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("107");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.';
							|en = 'Exchange text by %1 profile.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ТестСвязиОбменаЧерезFTPНаСервере(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов)
	
	ОбменСКонтрагентамиСлужебный.ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФлагУПДУКД()
	
	Для каждого Строка Из Объект.ИсходящиеДокументы Цикл
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУКД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если Объект.ИспользоватьУПД Тогда
				ВерсияФормата = АктуальныйФорматУПДСЧФДОП();
				Строка.ТребуетсяОтветнаяПодпись = Истина;
			Иначе
				ВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(Строка.ИсходящийДокумент);
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Строка, Истина);
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если Объект.ИспользоватьУКД Тогда
				ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)";
				Строка.ТребуетсяОтветнаяПодпись = Истина;
			Иначе
				ВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(Строка.ИсходящийДокумент);
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			
			ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Строка, Истина);
			
		КонецЕсли;
		
		ОбновитьФлагиРегламентаПоСтроке(Строка, Объект.ИспользоватьУПД, Объект.ИспользоватьУКД);
		
		УстановитьВариантыЗаполненияИсходящегоДокумента(Строка);
		
	КонецЦикла;
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставлениеНастроек(Объект)
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.ИсходящиеДокументы Цикл
		
		ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(ТекСтрока, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагиРегламентаПоСтроке(Строка, ИспользоватьУПД, ИспользоватьУКД)
	
	ЭтоПрямойОбмен = ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(Строка.СпособОбменаЭД);
	
	// Если флаг использования установлен, нужно актуализировать флаги ответной подписи и извещения.
	Если Не ЭтоПрямойОбмен
		И Строка.Формировать Тогда
		
		ВидЭД = ?(ЗначениеЗаполнено(Строка.ПрикладнойВидЭД), Строка.ПрикладнойВидЭД, Строка.ИсходящийДокумент);
		НастройкиРегламентаЭДО = ОбменСКонтрагентамиСлужебный.НастройкиРегламентаЭДО(ВидЭД,
			Строка.ВерсияФормата, Строка.СпособОбменаЭД);
		Строка.ИспользоватьЭП = Строка.Формировать;
		Если (Строка.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") И Не ИспользоватьУПД)
			Или (Строка.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") 
			И Не ИспользоватьУКД) Тогда
			
			Если Не НастройкиРегламентаЭДО.РедактироватьОтветнуюПодпись Тогда
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			
			Если Не НастройкиРегламентаЭДО.РедактироватьИзвещение Тогда
				Строка.ТребуетсяИзвещениеОПолучении = Ложь;
			КонецЕсли;
		Иначе
			
			Строка.ТребуетсяОтветнаяПодпись = Строка.ИспользоватьЭП;
			Если Строка.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетНаОплату")
				И Не НастройкиРегламентаЭДО.РедактироватьОтветнуюПодпись Тогда
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			
			
			Если Не НастройкиРегламентаЭДО.РедактироватьИзвещение Тогда
				Строка.ТребуетсяИзвещениеОПолучении = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсходящиеДокументы(Знач ИмяКолонки, Знач ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ИмяКолонки = "ИсходящиеДокументыФормировать" Тогда
		ЗначениеЭлемента = ТекущиеДанные.Формировать;
		Если Не ЗначениеЭлемента Тогда
			ТекущиеДанные.ИспользоватьЭП = ЗначениеЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ИспользоватьЭП И НЕ ТекущиеДанные.Формировать Тогда
		Если ИмяКолонки = "ИсходящиеДокументыИспользоватьЭП" Тогда
			ТекущиеДанные.Формировать = Истина;
		Иначе
			ТекущиеДанные.ИспользоватьЭП = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.ПроизвольныйЭД
		ИЛИ Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(ТекущиеДанные.СпособОбменаЭД) Тогда
		
		Если ИмяКолонки = "ИсходящиеДокументыИспользоватьЭП" И НЕ ТекущиеДанные.ИспользоватьЭП Тогда
			ШаблонСообщения = НСтр("ru = 'Отправка документа %1 возможна только с использованием электронной подписи.';
									|en = 'You can send the ""%1"" document only if using digital signature.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.ИсходящийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ТекущиеДанные.ИспользоватьЭП = ТекущиеДанные.Формировать;
	ИначеЕсли ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		ИспользуетсяКаталогВСоглашении = ТекущиеДанные.Формировать;
	КонецЕсли;
	
	Если (ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура
		ИЛИ ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
		И ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(ТекущиеДанные.СпособОбменаЭД) Тогда
		
		ТекущиеДанные.Формировать = Ложь;
		ТекущиеДанные.ИспользоватьЭП = Ложь;
		
		ШаблонСообщения = НСтр("ru = 'Отправка документа %1 возможна только через оператора ЭДО.';
								|en = 'You can send the %1 document via EDI provider only.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если (ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец)
		И Объект.ИспользоватьУПД Тогда
		
		ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru = 'Данные документ %1 передаются в составе счет-фактуры(универсального передаточного документа).';
								|en = 'Data of the %1 document is transferred as part of tax invoice (universal transfer document).'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		И Объект.ИспользоватьУКД Тогда
		
		ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru = 'Данные документ %1 передаются в составе корректировочного счет-фактуры(универсального корректировочного документа).';
								|en = 'Data of the %1 document is transferred as part of corrective tax invoice (universal adjustment document).'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура
		И Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)"
			ИЛИ ТекущиеДанные.ВерсияФормата = "ФНС 2019 (УПД:Счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУПД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	Если ТекущиеДанные.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		И Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУКД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяКолонки = "ИсходящиеДокументыДокументУчета" Тогда
		ОбновитьФлагиРегламентаПоСтроке(ТекущиеДанные, Объект.ИспользоватьУПД, Объект.ИспользоватьУКД);
		ЗаполнитьПредставлениеНастроек(Объект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные обработчики асинхронных диалогов

&НаКлиенте
Процедура ЗакончитьИзменениеШифрованияДанных(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			ПустаяСсылка = ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка");
			Объект.СертификатОрганизацииДляРасшифровки = ПустаяСсылка;
			
			// Очистка сертификата контрагента
			ПоместитьВХранилищеСертификат();
		Иначе
			Объект.ШифроватьДанныеПакетаЭД = Не Объект.ШифроватьДанныеПакетаЭД;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПрофильНастроекЭДОПриИзменении(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			ПрофильНастроекЭДОПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьИзменениеПроверкиСертификатов(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			Объект.СертификатыПодписейКонтрагента.Очистить();
		Иначе
			Объект.ПроверятьСертификатыПодписей = Не Объект.ПроверятьСертификатыПодписей;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОбработкуПриглашений(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО",               Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
	Действие = "";
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Действие", Действие) Тогда
		Если Действие = "Принять" Тогда
			ПараметрыФормы.Вставить("Принять", Истина);
		ИначеЕсли Действие = "Отклонить" Тогда
			ПараметрыФормы.Вставить("Отклонить", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроекПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = "Отменить" Тогда
			Возврат;
		ИначеЕсли Модифицированность Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	СертификатыКПроверке = Новый Структура;
	СертификатыКПроверке.Вставить("СертификатыПодписейОрганизации", Новый Соответствие);
	
	Если ЧерезОператораЭДО Тогда
		Состояние(НСтр("ru = 'Тест настроек.';
						|en = 'Settings test.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через сервис ЭДО. Подождите...';
				|en = 'Testing ED exchange via EDI service. Wait...'"));
	КонецЕсли;
	
	ТестСвязиСервисаЭДОТакском();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОТакском()
	
	Отбор = Новый Структура;
	Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
	СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
	
	Контекст = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ТестСвязиСервиса1СЭДО", ЭтотОбъект, Контекст);
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицыИсходящихДокументов) Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПрофильНастроекЭДО", СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
	Контекст.Вставить("ОповещениеПослеВыполнения", Оповещение);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервиса1СЭДО(РезультатВыполнения = Неопределено, Контекст = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
	СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
	
	Оповещение = Новый ОписаниеОповещения("ТестНастроекПрямогоЭДО", ЭтотОбъект);
	Если Не ЗначениеЗаполнено(СтрокаТаблицыИсходящихДокументов) Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПрофильНастроекЭДО", СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
	Контекст.Вставить("ОповещениеПослеВыполнения", Оповещение);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроекПрямогоЭДО(РезультатВыполнения = Неопределено, Контекст = Неопределено) Экспорт
	
	Если ЧерезЭлектроннуюПочту Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);

		Состояние(НСтр("ru = 'Тест настроек.';
						|en = 'Settings test.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через электронную почту. Подождите...';
				|en = 'Testing ED exchange via email. Wait...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		ПроверитьУчетнуюЗаписьЭлектроннойПочты(ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов);
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если ЧерезКаталог Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Состояние(НСтр("ru = 'Тест настроек.';
						|en = 'Settings test.'"),
		,
		НСтр("ru = 'Выполняется тестирование обмена ЭД через каталог. Подождите...';
			|en = 'Testing ED exchange via directory. Wait...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов;
		
		ТестСвязиПрямогоОбменаНаСервере(
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогВходящихДокументов),
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогИсходящихДокументов),
			СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если ЧерезFTP Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		
		Состояние(НСтр("ru = 'Тест настроек.';
						|en = 'Settings test.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через FTP. Подождите...';
				|en = 'Testing ED exchange via FTP. Wait...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов;
		
		ТестСвязиОбменаЧерезFTPНаСервере(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО,
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогВходящихДокументовFTP),
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогИсходящихДокументовFTP));
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчетнуюЗаписьЭлектроннойПочты(УчетнаяЗапись)
	
	СообщениеОбОшибке = "";
	ДополнительноеСообщение = "";
	ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Проверка учетной записи эл. почты';
											|en = 'Checking an email account'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка параметров учетной записи завершилась с ошибками:
					   |%1';
					   |en = 'Account parameters check is completed with errors:
					   |%1'"), СообщениеОбОшибке ));
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Проверка учетной записи эл. почты';
											|en = 'Checking an email account'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка параметров учетной записи завершилась успешно. %1';
				|en = 'Account parameters check is completed successfully. %1'"),
			ДополнительноеСообщение));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение)
	
	 РаботаСПочтовымиСообщениями.ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПроверитьСвязьЭДО(Отпечатки, Контекст = Неопределено) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	// Получаем доступные сертификаты без учета пользователя, поскольку тест настроек и их администрирование может
	// выполнять администратор системы, а не пользователь, подписывающий документы.
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
												МассивОтпечатковСертификатов, Контекст.ПрофильНастроекЭДО, Ложь);
	
	ПарольПолучен = Ложь;
	МассивСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Соответствие Цикл
		ПарольПользователя = Неопределено;
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
			И КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина
			И КлючЗначение.Значение.Свойство("ПарольПользователя", ПарольПользователя) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(КлючЗначение.Ключ, ПарольПользователя);
		КонецЕсли;
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МассивСертификатов) Тогда
		ШаблонСообщения = НСтр("ru = 'Тест обмена по профилю: %1.
									|В профиле нет доступных сертификатов. Тест не выполнен.';
									|en = 'Exchange test for profile %1. 
									|There are no available certificates in the profile. Test was not executed. '");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контекст.ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		Возврат;
	КонецЕсли;
	
	ОбработкаПолученияМаркера = Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификата", ЭтотОбъект, Контекст);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ДействияПослеТестаСвязиЭДО", ЭтотОбъект, Контекст);
	
	ОписаниеДанных = Новый Структура;
	
	ШаблонОперация = НСтр("ru = 'Тест аутентификации: %1';
							|en = 'Authentication test: %1'");
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОперация, Контекст.ПрофильНастроекЭДО);
	ОписаниеДанных.Вставить("Операция",            Операция);

	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	ОписаниеДанных.Вставить("Данные",              ОбработкаПолученияМаркера);
	
	ОписаниеДанных.Вставить("БезПодтверждения", ПарольПолучен И МассивСертификатов.Количество() = 1);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификата(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И Не РезультатВыполнения.ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("СертификатПодписи", РезультатВыполнения.ОписаниеДанных.ВыбранныйСертификат.Ссылка);
	Контекст.Вставить("РезультатВыполнения", РезультатВыполнения);
	ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст)
	
	РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Контекст.ПрофильНастроекЭДО);
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи",        Контекст.СертификатПодписи);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД",           РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера,
		ИнтернетПоддержкаПользователейПодключена);
		
	Если Не ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификатаАутентификация", ЭтотОбъект, Контекст),
			ЭтотОбъект);
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Контекст.РезультатВыполнения;

	РезультатВыполнения.ОписаниеДанных.Данные = ЗашифрованныеДанные;
	ВыполнитьОбработкуОповещения(РезультатВыполнения.Оповещение, РезультатВыполнения.ОписаниеДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификатаАутентификация(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеТестаСвязиЭДО(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Если РезультатВыполнения.Успех = Истина Тогда
			ШаблонСообщения = НСтр("ru = 'Тест обмена по профилю: %1
										|Пройден успешно.';
										|en = 'Exchange test for profile: %1
										|Passed successfully.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контекст.ПрофильНастроекЭДО);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуСертификата(ПрофильЭДО, ДляАвторизации = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПрофильЭДО", ПрофильЭДО);
	ДополнительныеПараметры.Вставить("ДляАвторизации", ДляАвторизации);
	Оповещение = Новый ОписаниеОповещения(
		"ПослеПолученияОтпечатковВыполнитьПроверкуСертификатов", ЭтотОбъект, ДополнительныеПараметры);
		
	ВыдаватьОшибку = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, ВыдаватьОшибку);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковВыполнитьПроверкуСертификатов(Отпечатки, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ПрофильЭДО = ДополнительныеПараметры.ПрофильЭДО;
	ДляАвторизации = ДополнительныеПараметры.ДляАвторизации;
	
	// Получаем доступные сертификаты без учета пользователя, поскольку тест профиля и его администрирование может
	// выполнять администратор системы, а не пользователь, подписывающий документы.
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
		МассивОтпечатковСертификатов, ПрофильЭДО, Ложь);
	
	Сертификат = Неопределено;
	ПараметрыСертификата = Неопределено;
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		ТекСертификат = КлючЗначение.Ключ;
		Если Сертификат = Неопределено Тогда
			// Если в соответствии нет сертификатов с сохраненным паролем, то для теста возьмем первый из списка сертификат.
			Сертификат = ТекСертификат;
			ПараметрыСертификата = КлючЗначение.Значение;
		КонецЕсли;
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			Сертификат = ТекСертификат;
			ПараметрыСертификата = КлючЗначение.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Сертификат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1. В профиле нет доступных сертификатов.
			|Тест не выполнен.';
			|en = 'Exchange test for profile %1. There are no available certificates in the profile.
			|The test was not executed. '");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ОбменСКонтрагентамиСлужебныйКлиент.ТестНастроекСПроверкойСертификата(Сертификат, ЭтаФорма, ДляАвторизации, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВключениеРасширенногоРежимаНастройки()
	
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбработкаВыбора(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	// Для обновления представления сертификата на форме
	Если Результат = Истина Тогда
		ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
		ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока, Адрес);
		
		ДанныеСтроки = Объект.СертификатыПодписейКонтрагента.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.ПредставлениеСертификатаКонтрагента = ДанныеСтроки.ПредставлениеСертификатаКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьИзменениеСостояния(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НастройкаЭДО",     Объект.Ссылка);
		ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
		ПараметрыФормы.Вставить("Отклонить",                  Истина);
		
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаСертификатаШифрования(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоместитьВХранилищеСертификат(Адрес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОрганизацииДляРасшифровкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОрганизацииДляРасшифровкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьСертификатВТЧ(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатВТЧ(ВыбранноеЗначение)
	
	Объект.СертификатОрганизацииДляРасшифровки = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЧерезКаталог ИЛИ ЧерезЭлектроннуюПочту ИЛИ ЧерезFTP Тогда
		
		Если (ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки) И Не ЗначениеЗаполнено(ПредставлениеСертификатаКонтрагентаДляШифрования))
			ИЛИ (Не ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки) И ЗначениеЗаполнено(ПредставлениеСертификатаКонтрагентаДляШифрования)) Тогда
		
			ТекстСообщения = НСтр("ru = 'Для корректной работы шифрования необходимо
										|одновременно указывать сертификаты шифрования для организации и контрагента.';
										|en = 'For correct encryption it is necessary to
										|simultaneously specify encryption certificates for the company and counterparty.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыПредставлениеСпособаОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ВходящиеДокументы.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВходящиеДокументыТипДокументаПредставлениеНачалоВыбораЗавершить",ЭтотОбъект,ТекСтрока);
		Если ТекСтрока.ВходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПрикладнойЭД") Тогда
			ВидЭлектронногоДокумента = ТекСтрока.ПрикладнойВидЭД;
		Иначе
			ВидЭлектронногоДокумента = ТекСтрока.ВходящийДокумент;
		КонецЕсли;
		ПоказатьВыборИзСписка(ОписаниеОповещения, СоответствиеВидовИТипов.Получить(ВидЭлектронногоДокумента),
			Элементы.ВходящиеДокументыПредставлениеСпособаОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыТипДокументаПредставлениеНачалоВыбораЗавершить(ВыбранныйЭлемент, ТекСтрока) Экспорт 
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
		ТекСтрока.СпособОбработки = ВыбранныйЭлемент.Значение;
		ТекСтрока.ПредставлениеСпособаОбработки = ВыбранныйЭлемент.Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредставленияТиповДокументов()
	
	Для Каждого СтрокаВидаЭД Из Объект.ВходящиеДокументы Цикл
		ВидЭД = СтрокаВидаЭД.ВходящийДокумент;
		Если ЗначениеЗаполнено(СтрокаВидаЭД.ПрикладнойВидЭД) Тогда
			ВидЭД = СтрокаВидаЭД.ПрикладнойВидЭД;
		КонецЕсли;
		СписокВыбора = СоответствиеВидовИТипов.Получить(ВидЭД);
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(СтрокаВидаЭД.СпособОбработки);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаВидаЭД.ПредставлениеСпособаОбработки = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ЗаполнитьПоШаблонуНаСервере(Сред(Команда.Имя,10), СоответствиеВидовИТипов);
	ВывестиПредставленияТиповДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Знач ИмяШаблона, СоответствиеВидовИТипов)
	
	Объект.ВходящиеДокументы.Загрузить(ОбменСКонтрагентамиСлужебный.ТаблицаПредопределенногоПрофиля(ИмяШаблона));
	ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов)

	СоответствиеВидовИТипов.Очистить();
	Для Каждого СтрокаВидаЭД Из Объект.ВходящиеДокументы Цикл
		ВидЭД = СтрокаВидаЭД.ВходящийДокумент;
		Если ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
			ВидЭД = СтрокаВидаЭД.ПрикладнойВидЭД;
		КонецЕсли;
		СписокВыбора = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(ВидЭД, Истина,
			НСтр("ru = 'Автоматически';
				|en = 'Automatically'") + " - ");
		СоответствиеВидовИТипов.Вставить(ВидЭД, СписокВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументооборотаПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	
	ОбработатьИзменениеПрофиля = Ложь;
	Если Не ДанныеСтроки.ПрофильНастроекЭДО = Результат.ПрофильНастроекЭДО Тогда
		ОбработатьИзменениеПрофиля = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат, ,"ИсходящийДокумент");
	
	Модифицированность = Макс(Модифицированность, Результат.Модифицированность); 
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
	Если ОбработатьИзменениеПрофиля Тогда
		ИсходящиеДокументыПрофильНастроекЭДОПриИзмененииНаСервере(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОсновнаяНастройкаСуществует()
	
	НастройкаСуществует = Истина;
	
	// Проверка на наличие основной настройки.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиЭДО.Ссылка КАК Настройка,
	|	НастройкиЭДО.Контрагент КАК Контрагент,
	|	НастройкиЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НастройкиЭДО.Организация КАК Организация
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
	|ГДЕ
	|	НастройкиЭДО.Организация = &Организация
	|	И НастройкиЭДО.Контрагент = &Контрагент
	|	И НастройкиЭДО.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И НастройкиЭДО.СтатусПодключения = Значение(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И НастройкиЭДО.Ссылка <> &ТекущаяНастройка";
	Запрос.УстановитьПараметр("ТекущаяНастройка",   Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",         Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		НастройкаСуществует = Ложь;
		
		ШаблонСообщения = НСтр("ru = 'Поле ""Договор контрагента"", заполняется только в случае использования нескольких идентификаторов для одного контрагента.
									|В информационной базе должна быть создана настройка ЭДО без договора со статусом подключения ""Присоединен""
									|между контрагентом %1 и организацией %2';
									|en = 'The ""Counterparty contract"" field is filled in only if several IDs are used for a counterparty.
									|Create EDI setting without contract and with the ""Connected"" connection status 
									|between counterparty %1 and company %2 in the infobase'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Объект.Контрагент,
			Объект.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат НастройкаСуществует;
	
КонецФункции

#Область ПроверкиПередЗаписью

&НаСервере
Функция НастройкаВалидирована(ЕстьОшибкиЗаполнения = Ложь)
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибкиЗаполнения = Истина;	
	КонецЕсли;
	ИспользованиеИдентификатораКонтрагентаУникально(ЕстьОшибкиЗаполнения);
	
	ЕстьОшибкиВЗависимыхНастройках = Ложь;
	Если Не ЕстьОшибкиЗаполнения Тогда
		// Проверим, что все указанные маршруты возможно выполнить
		Если Объект.РасширенныйРежимНастройкиСоглашения И Не Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.Закрыто Тогда
			ПроверитьСоответствиеСертификатовМаршрутам(ЕстьОшибкиВЗависимыхНастройках);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибкиЗаполнения И Не ЕстьОшибкиВЗависимыхНастройках;

КонецФункции

&НаСервере
Процедура ПроверитьСоответствиеСертификатовМаршрутам(Отказ)
	
	// Подготовим соответствие наборов сертификатов профилям
	ИспользованныеПрофили = Объект.ИсходящиеДокументы.Выгрузить(, "ПрофильНастроекЭДО").ВыгрузитьКолонку("ПрофильНастроекЭДО");
	
	НаборыСертификатовПрофилей = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Профили", ИспользованныеПрофили);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка КАК Профиль,
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
	|		ПО ПрофилиНастроекЭДО.Ссылка = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка
	|ГДЕ
	|	ПрофилиНастроекЭДО.Ссылка В(&Профили)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Профиль,
	|	Сертификат
	|ИТОГИ ПО
	|	Профиль";
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПрофилей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	Пока ВыборкаПрофилей.Следующий() Цикл
		СертификатыПрофиля = Новый Массив;
		ИдентификаторНабора = "ИД_";
		Выборка = ВыборкаПрофилей.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если СертификатыПрофиля.Найти(Выборка.Сертификат) = Неопределено Тогда
				СертификатыПрофиля.Добавить(Выборка.Сертификат);
				ИдентификаторНабора = ИдентификаторНабора + Строка(Выборка.Сертификат.УникальныйИдентификатор());
			КонецЕсли; 
		КонецЦикла;
		
		ИдентификаторНабора = СтрЗаменить(ИдентификаторНабора, "-", "_");
		СтруктураОписанияНабораСертификатов = Новый Структура("ИдентификаторНабора, Сертификаты", 
			ИдентификаторНабора, СертификатыПрофиля);
		НаборыСертификатовПрофилей.Вставить(ВыборкаПрофилей.Профиль, СтруктураОписанияНабораСертификатов);
	КонецЦикла;
	
	// Подготовим уникальные комбинации значений наборов сертификатов, маршрутов и видов ЭД.
	УникальныеПараметрыПроверки = Новый Структура;
	Для Каждого СтрокаИсходящегоДокумента Из Объект.ИсходящиеДокументы Цикл
		Если СтрокаИсходящегоДокумента.ИспользоватьЭП И СтрокаИсходящегоДокумента.Формировать Тогда
			МаршрутПодписания 	= СтрокаИсходящегоДокумента.МаршрутПодписания;
			ВидЭД				= СтрокаИсходящегоДокумента.ИсходящийДокумент;
			ПрофильНастроекЭДО	= СтрокаИсходящегоДокумента.ПрофильНастроекЭДО;
			
			ПараметрыНабораСертификатов = НаборыСертификатовПрофилей[ПрофильНастроекЭДО];
			ИдентификаторМаршрута = СтрЗаменить(Строка(МаршрутПодписания.УникальныйИдентификатор()), "-", "_");
			ИдентификаторПараметров = ПараметрыНабораСертификатов.ИдентификаторНабора + Строка(ИдентификаторМаршрута);
			
			СтруктураОписанияПараметров = Неопределено;
			Если Не УникальныеПараметрыПроверки.Свойство(ИдентификаторПараметров, СтруктураОписанияПараметров) Тогда
				СтруктураОписанияПараметров = Новый Структура;
				СтруктураОписанияПараметров.Вставить("Сертификаты", ПараметрыНабораСертификатов.Сертификаты);
				СтруктураОписанияПараметров.Вставить("МаршрутПодписания", МаршрутПодписания);
				СтруктураОписанияПараметров.Вставить("ВидыЭД", Новый Массив);
				УникальныеПараметрыПроверки.Вставить(ИдентификаторПараметров, СтруктураОписанияПараметров);
			КонецЕсли;
			СтруктураОписанияПараметров.ВидыЭД.Добавить(ВидЭД);
		КонецЕсли;
	КонецЦикла;
	
	// Проверим валидность каждого набора параметров проверки
	Для Каждого НаборПараметровПроверки Из УникальныеПараметрыПроверки Цикл
		МаршрутПодписания = НаборПараметровПроверки.Значение.МаршрутПодписания;
		Сертификаты       = НаборПараметровПроверки.Значение.Сертификаты;
		ВидыЭД            = НаборПараметровПроверки.Значение.ВидыЭД;
		
		РезультатыПроверки = ЭлектронноеВзаимодействиеСлужебный.РезультатыПроверкиМаршрутаПоПараметрамНастройки(
			МаршрутПодписания, Сертификаты, ВидыЭД);
			
		ЭлектронноеВзаимодействиеСлужебный.ВывестиРезультатыПроверкиМаршрута(РезультатыПроверки, 
			Объект.Ссылка, МаршрутПодписания, Отказ);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиПолученОтвет(Ответ, ПараметрыЗаписи) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		НовыеПараметрыЗаписи = Новый Структура;
		НовыеПараметрыЗаписи.Вставить("ПропуститьПроверки");
		Для Каждого КлючИЗначение Из ПараметрыЗаписи Цикл
			НовыеПараметрыЗаписи.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;

		Записать(НовыеПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъектаБезопасно(Знач Ссылка, Знач Реквизиты, Знач ЗначениеПоУмолчанию = Неопределено) 
	
	Попытка
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	Исключение
		Результат = ЗначениеПоУмолчанию;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъектаБезопасно(Знач Ссылка, Знач ИмяРеквизита, Знач ЗначениеПоУмолчанию = Неопределено) 
	
	Попытка
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	Исключение
		Результат = ЗначениеПоУмолчанию;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДопустимыеСостоянияСоглашенияДляВыбора()
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(Перечисления.СостоянияСоглашенийЭД.Действует);
	СписокСостояний.Добавить(Перечисления.СостоянияСоглашенийЭД.Закрыто);
	СписокСостояний.Добавить(Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости);
	СписокСостояний.Добавить(Перечисления.СостоянияСоглашенийЭД.НаЮридическомСогласовании);
	
	Возврат СписокСостояний;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьВключениеРасширенногоРежимаНастройкиПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВключитьРасширенныйРежимНастройкиСоглашенияНаСервере();
		Объект.РасширенныйРежимНастройкиСоглашения = Не Объект.РасширенныйРежимНастройкиСоглашения;
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
	ЗавершитьВключениеРасширенногоРежимаНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ВключитьРасширенныйРежимНастройкиИЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРасширенныйРежимНастройкиИЗаписать()
	
	Объект.РасширенныйРежимНастройкиСоглашения = Истина;
	Записать();
	ЗавершитьВключениеРасширенногоРежимаНастройки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантыЗаполненияПолейПоУмолчанию()
	
	Для Каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
		ВариантыЗаполнения = ОбменСКонтрагентамиВнутренний.ВариантыЗаполненияПолейЭлектронныхДокументов(
			СтрокаТаблицы.ИсходящийДокумент, СтрокаТаблицы.ВерсияФормата);
		
		ЗначениеСвойства = Неопределено;
		Если ВариантыЗаполнения.Свойство("ТоварКод", ЗначениеСвойства) Тогда
			СтрокаТаблицы.ЗаполнениеКодаТовара = ЗначениеСвойства[0].Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантыЗаполненияИсходящегоДокументаНаСервере(Знач ИдентификаторСтроки)
	
	СтрокаТаблицы = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(ИдентификаторСтроки);
	УстановитьВариантыЗаполненияИсходящегоДокумента(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантыЗаполненияИсходящегоДокумента(СтрокаТаблицы)
	
	ВариантыЗаполнения = ОбменСКонтрагентамиВнутренний.ВариантыЗаполненияПолейЭлектронныхДокументов(
		СтрокаТаблицы.ИсходящийДокумент, СтрокаТаблицы.ВерсияФормата);
	
	СписокВариантов = Неопределено;
	Если ВариантыЗаполнения.Свойство("ТоварКод", СписокВариантов)
		И СписокВариантов.НайтиПоЗначению(СтрокаТаблицы.ЗаполнениеКодаТовара) = Неопределено Тогда
			СтрокаТаблицы.ЗаполнениеКодаТовара = СписокВариантов[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктуальныйФорматУПДСЧФДОП()
	
	ВидЭДСчетаФактуры = Перечисления.ВидыЭД.СчетФактура;
	ПризнакУПДСЧФДОП = "УПД:Счет-фактура и первичный документ";
	
	ТаблицаФорматов = ОбменСКонтрагентамиСлужебный.ФорматыЭлектронныхДокументов();
	НайденныеСтроки = ТаблицаФорматов.НайтиСтроки(Новый Структура("ВидЭлектронногоДокумента", ВидЭДСчетаФактуры));
		
	АктуальныйФормат = "";
	ПоследнийФормат = "";
	
	Для каждого СтрокаФормата Из НайденныеСтроки Цикл
		
		Если СтрНайти(СтрокаФормата.ИдентификаторФормата, ПризнакУПДСЧФДОП) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоследнийФормат = СтрокаФормата.ИдентификаторФормата;
		
		Если СтрокаФормата.Действует Тогда
			АктуальныйФормат = СтрокаФормата.ИдентификаторФормата;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(АктуальныйФормат) Тогда
		АктуальныйФормат = ПоследнийФормат;
	КонецЕсли;
	
	Возврат АктуальныйФормат;
	
КонецФункции

#КонецОбласти

