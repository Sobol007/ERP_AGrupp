#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет записи в регистр заданий.
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2	 - этап, для которого необходимо добавить задание.
//  Действия		 - Структура							 - см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий().
//
Процедура ДобавитьЗадание(ЭтапПроизводства, Действия) Экспорт
	
	Если Действия.ОбновитьСостояние ИЛИ Действия.ЗаполнитьПоОперациям Тогда
		
		Задание = НовоеЗадание(ЭтапПроизводства, Действия);
		Идентификаторы = УправлениеПроизводством.ДобавитьЗаданиеВОчередь("ЗаданияКОбработкеЭтаповПроизводства", Задание);
		
		Отбор = Новый Структура("ЭтапПроизводства", ЭтапПроизводства);
		УправлениеПроизводством.ЗапуститьЗаданиеОбработкиОчереди("ЗаданияКОбработкеЭтаповПроизводства", Отбор, Идентификаторы);
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает в фоновом режиме задание заполнения этапов производства
//
Процедура ЗапуститьЗадание() Экспорт
	
	УправлениеПроизводством.ЗапуститьЗаданиеОбработкиОчереди("ЗаданияКОбработкеЭтаповПроизводства");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовоеЗадание(ЭтапПроизводства, Действия = Неопределено)
	
	Задание = Новый Структура("ЭтапПроизводства,ОбновитьСостояние,ЗаполнитьПоОперациям");
	
	Задание.ЭтапПроизводства = ЭтапПроизводства;
	
	Если Действия <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Задание, Действия);
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

Функция СтруктураДействий() Экспорт
	
	СтруктураДействий = Новый Структура("ОбновитьСостояние, ЗаполнитьПоОперациям", Ложь, Ложь);
	Возврат СтруктураДействий;
	
КонецФункции

Функция ПараметрыОбработки() Экспорт
	
	ПараметрыОбработки = Новый Структура("Обработчик", "Документы.ЭтапПроизводства2_2.ОбработатьДокументОтложенно");
	Возврат ПараметрыОбработки;
	
КонецФункции

Функция ОчередьЗаданий(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбрабатываемыеЗадания.ЭтапПроизводства КАК ЭтапПроизводства,
	|
	|	МАКСИМУМ(ОбрабатываемыеЗадания.ОбновитьСостояние)    КАК ОбновитьСостояние,
	|	МАКСИМУМ(ОбрабатываемыеЗадания.ЗаполнитьПоОперациям) КАК ЗаполнитьПоОперациям
	|ИЗ
	|	ОбрабатываемыеЗадания КАК ОбрабатываемыеЗадания
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбрабатываемыеЗадания.ЭтапПроизводства");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Задание = НовоеЗадание(Выборка.ЭтапПроизводства);
		
		Если Выборка.ОбновитьСостояние ИЛИ Выборка.ЗаполнитьПоОперациям Тогда
			ЗаполнитьЗначенияСвойств(Задание, Выборка);
		Иначе
			Задание.ОбновитьСостояние = Истина;
			Задание.ЗаполнитьПоОперациям = Истина; // для "старых" заданий
		КонецЕсли;
		
		Результат.Добавить(Задание);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЗадание(Задание, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбрабатываемыеЗадания.Идентификатор КАК Идентификатор
	|ИЗ
	|	ОбрабатываемыеЗадания КАК ОбрабатываемыеЗадания
	|ГДЕ
	|	ОбрабатываемыеЗадания.ЭтапПроизводства = &ЭтапПроизводства");
	
	Запрос.УстановитьПараметр("ЭтапПроизводства", Задание.ЭтапПроизводства);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СоздатьНаборЗаписей();
		
		Набор.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
		
		Набор.Записать(Истина);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли