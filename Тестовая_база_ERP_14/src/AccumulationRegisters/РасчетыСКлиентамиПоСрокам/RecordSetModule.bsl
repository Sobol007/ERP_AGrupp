#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроверятьИзмененияРегистра = Неопределено;
	ДополнительныеСвойства.Свойство("ПроверятьИзмененияРегистра", ПроверятьИзмененияРегистра);
	
	Если ПроверятьИзмененияРегистра <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Неопределено;
	ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	БлокироватьДляИзменения = Истина;
	
	// Текущее состояние набора помещается во временную таблицу,
	// чтобы при записи получить изменение нового набора относительно текущего.
	
	ПараметрыСравнения = Тестирование.ДополнительныеПараметрыФормированияЗапросаСравнения();
	ПараметрыСравнения.ПроверятьКонтрольнуюСумму = Ложь;
	ТекстыЗапросовДляПолученияТаблицыИзменений = 
		ЗакрытиеМесяцаСервер.ТекстыЗапросовДляПолученияТаблицыИзмененийРегистра(ЭтотОбъект.Метаданные(), ЭтотОбъект.Отбор, ПараметрыСравнения);
	
	СтруктураПроверкиИзмененияРегистра = Новый Структура();
	СтруктураПроверкиИзмененияРегистра.Вставить("ТекстВыборкиТаблицыИзменений", ТекстыЗапросовДляПолученияТаблицыИзменений.ТекстВыборкиТаблицыИзменений);
	СтруктураПроверкиИзмененияРегистра.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураПроверкиИзмененияРегистра.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстыЗапросовДляПолученияТаблицыИзменений.ТекстВыборкиНачальныхДанных;
	Для каждого ЭлементОтбора из ЭтотОбъект.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнительныеСвойства.Свойство("Порядок") Тогда
		Запрос.УстановитьПараметр("Порядок", ДополнительныеСвойства.Порядок);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ДополнительныеСвойства.Вставить("СтруктураПроверкиИзмененияРегистра", СтруктураПроверкиИзмененияРегистра);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПроверкиИзмененияРегистра = Неопределено;
	Если Не Отказ И ДополнительныеСвойства.Свойство("СтруктураПроверкиИзмененияРегистра", СтруктураПроверкиИзмененияРегистра) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураПроверкиИзмененияРегистра.МенеджерВременныхТаблиц;
		
		// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
		// и если отличия найдены регистрация документов к отражению в регламентированном, международном учете и учете НДС.	
		Запрос.Текст = СтруктураПроверкиИзмененияРегистра.ТекстВыборкиТаблицыИзменений;
		Для каждого ЭлементОтбора из ЭтотОбъект.Отбор Цикл
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЦикла;
		
		Если ДополнительныеСвойства.Свойство("Порядок") Тогда
			Запрос.УстановитьПараметр("Порядок", ДополнительныеСвойства.Порядок);
		КонецЕсли;
		
		НеотражаемыйДокумент = ?(ДополнительныеСвойства.Свойство("НеотражаемыйДокумент"), ДополнительныеСвойства.НеотражаемыйДокумент, Неопределено);
		Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
		
		ТекстАктуализацииОтражения =
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
		|ИЗ
		|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
		|
		|ГДЕ
		|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИзменений.ДокументРегистратор";
				
		//++ НЕ УТ
		ТекстАктуализацииОтражения =
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор,
		|	ТаблицаИзменений.Период КАК Период,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
		|
		|ГДЕ
		|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИзменений.ДокументРегистратор,
		|	ТаблицаИзменений.Период,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерам";
		//-- НЕ УТ
			
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстАктуализацииОтражения;
		
		ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
		
		#Область ПроверкаДатыЗапрета
		
		ЗапросПроверкиДатыЗапрета = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период),ДАТАВРЕМЯ(3999,1,1)) КАК Период
		|ИЗ
		|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений");
		
		ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
		Если ВыборкаМинимальногоПериода.Следующий() Тогда
			ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
			
			НоваяСтрока = ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
			НоваяСтрока.Раздел = "ВзаимозачетыСписанияЗадолженности";
			
			НоваяСтрока = ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
			НоваяСтрока.Раздел = "ПродажиВозвратыОтКлиентов";
			
			НоваяСтрока = ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
			НоваяСтрока.Раздел = "РегламентныеОперации";
			
			ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.';
									|en = 'Mutual settlements data being changed is in the closed period.'");
			Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, ЭтотОбъект) Тогда
				Отказ = Истина;
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
		КонецЕсли;
		
		#КонецОбласти
		
		//++ НЕ УТ
		#Область ЗаданияКРасчетуРезервыПоСомнительнымДолгам
		
		ИмяТаблицыИзменений = НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПодготовитьТаблицуИзмененийПоАналитикеУчетаПоПартнерам(
			Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
		НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.СформироватьЗаданияКЗакрытиюМесяцаПриИзмененииРасчетов(Запрос, ИмяТаблицыИзменений);
		УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, ИмяТаблицыИзменений);
		
		#КонецОбласти
		//-- НЕ УТ
		
		//++ НЕ УТ
		РеглУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(ТаблицаИзменений);
		//-- НЕ УТ
		//++ НЕ УТКА
		МеждународныйУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВМеждународномУчете(ТаблицаИзменений);
		//-- НЕ УТКА
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
		|	Изменения.РасчетныйДокумент                    КАК Документ,
		|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
		|ИЗ
		|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК Изменения";
		
		УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСКлиентами(Запрос.Выполнить().Выгрузить());
		
		// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
		УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли