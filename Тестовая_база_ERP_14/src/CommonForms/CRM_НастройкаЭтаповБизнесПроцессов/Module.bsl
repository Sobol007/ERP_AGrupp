
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Процесс") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Процесс	= Параметры.Процесс;
	
	НастройкаЭтаповПроцесса		= (ТипЗнч(Процесс) = Тип("СправочникСсылка.Проекты"));
	НастройкаЭтаповКартыМаршрута= (ТипЗнч(Процесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов"));
	НастройкаЭтаповБизнесПроцесса= (ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"));	
	
	ТипПроцесса				= Неопределено;
	ВидОбъектаСтрокой		= "";
	РеквизитОбъектаСтрокой	= "";
	
	Если НастройкаЭтаповКартыМаршрута Тогда
		КартаМаршрута			= Процесс;
		ТипПроцесса				= Процесс.ТипПроцесса;
		ВидОбъектаСтрокой		= Процесс.ВидОбъектаСтрокой;
		РеквизитОбъектаСтрокой	= Процесс.РеквизитОбъектаСтрокой;
	ИначеЕсли ЗначениеЗаполнено(Процесс) Тогда
		КартаМаршрута			= Процесс.CRM_КартаМаршрута;
		ТипПроцесса				= Процесс.bpmТипПроцесса;
		ВидОбъектаСтрокой		= Процесс.bpmВидОбъектаСтрокой;
		РеквизитОбъектаСтрокой	= Процесс.bpmРеквизитОбъектаСтрокой;
	Иначе
		КартаМаршрута			= Процесс;
		ТипПроцесса				= Процесс.ТипПроцесса;
		ВидОбъектаСтрокой		= Процесс.ВидОбъектаСтрокой;
		РеквизитОбъектаСтрокой	= Процесс.РеквизитОбъектаСтрокой;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТочкаМаршрута) Тогда
		Заголовок = НСтр("ru='Настройка этапа:';en='Settings of a stage:'") + " " + СокрЛП(Строка(ТочкаМаршрута)) + " (" + СокрЛП(Строка(Процесс)) + ")";
	Иначе
		Заголовок = НСтр("ru='Настройка этапов';en='Settings of stages'") + " " + ?(НастройкаЭтаповПроцесса,НСтр("ru='маршрута для';en='route for'"),НСтр("ru='для';en='for'")) + " " + 
		СокрЛП(Строка(Процесс)) + ?(НастройкаЭтаповПроцесса,"",НСтр("ru = ' (Карта маршрута)'"));
	КонецЕсли;
	
#Область CRM_НастройкиЭтапов
	
	// Прочитаем настройки. Для  процессов читаем настройки карты.
	Если НастройкаЭтаповПроцесса ИЛИ  НастройкаЭтаповКартыМаршрута Тогда
		регМаршрутЗначение = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
		
		регМаршрутЗначение.Отбор.Объект.Установить(Процесс);
		регМаршрутЗначение.Прочитать();
		
		Если НастройкаЭтаповПроцесса И  регМаршрутЗначение.Количество() = 0 Тогда
			регМаршрутЗначение.Отбор.Объект.Установить(КартаМаршрута);
			регМаршрутЗначение.Прочитать();
		КонецЕсли;
	Иначе
		регМаршрутЗначение = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		регМаршрутЗначение.Отбор.Объект.Установить(Процесс);
		регМаршрутЗначение.Прочитать();
	КонецЕсли;
	
	табМаршрут_Значение = РеквизитФормыВЗначение("табМаршрут_");

	Для Каждого СтрокаМаршрута Из регМаршрутЗначение Цикл
		
		НоваяСтрока = табМаршрут_Значение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМаршрута);
		НоваяСтрока.Объект		= Процесс;
		НоваяСтрока.ИмяТочки	= СтрокаМаршрута.ТочкаМаршрута.Имя;
		
	КонецЦикла;
	табМаршрут_Значение.Сортировать("Порядок Возр");
	
	ЗначениеВРеквизитФормы(табМаршрут_Значение, "табМаршрут_");
	
#КонецОбласти
	
#Область CRM_ИсполнителиЭтапов
	
	// прочитаем исполнителей
	Если НастройкаЭтаповПроцесса ИЛИ НастройкаЭтаповКартыМаршрута Тогда
		регИсполнителиЗначение = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	Иначе
		регИсполнителиЗначение = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	КонецЕсли;
	
	регИсполнителиЗначение.Отбор.Объект.Установить(Процесс);
	регИсполнителиЗначение.Прочитать();
	
	// По процессу еще нет настроек, получим исполнителей из карты.
	Если  НастройкаЭтаповПроцесса И  регИсполнителиЗначение.Количество() = 0 Тогда
		регИсполнителиЗначение.Отбор.Объект.Установить(Процесс.CRM_КартаМаршрута);
		регИсполнителиЗначение.Прочитать();
	КонецЕсли;	
	
	табИсполнители_Значение = РеквизитФормыВЗначение("табИсполнители_");
	табИсполнители_Значение = регИсполнителиЗначение.Выгрузить();
	
	// Если исполнителей загрузили из карты.
	Если  НастройкаЭтаповПроцесса Тогда
		
		табИсполнители_Значение.Колонки.Удалить("Объект");
		табИсполнители_Значение.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
		табИсполнители_Значение.ЗаполнитьЗначения(Процесс, "Объект");
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(табИсполнители_Значение, "табИсполнители_");
	
#КонецОбласти
	
#Область bpmУсловияМаршрутизации
	
	регУсловияМаршрутизацииЗначение = РегистрыСведений.bpmУсловияМаршрутизации.СоздатьНаборЗаписей();
	Если НастройкаЭтаповПроцесса ИЛИ  НастройкаЭтаповКартыМаршрута Тогда
		регУсловияМаршрутизацииЗначение.Отбор.Объект.Установить(Процесс);
	Иначе
		//регУсловияМаршрутизацииЗначение.Отбор.Объект.Установить(Процесс);
		//регУсловияМаршрутизацииЗначение.Отбор.Объект.Установить(Процесс.КартаМаршрута);
	КонецЕсли;
	регУсловияМаршрутизацииЗначение.Прочитать();
	
	// По процессу еще нет настроек, получим из карты.
	Если  НастройкаЭтаповПроцесса И  регУсловияМаршрутизацииЗначение.Количество() = 0 Тогда
		регУсловияМаршрутизацииЗначение.Отбор.Объект.Установить(Процесс.CRM_КартаМаршрута);
		регУсловияМаршрутизацииЗначение.Прочитать();
	КонецЕсли;	
	
	
	УсловияМаршрутизации_Значение = РеквизитФормыВЗначение("УсловияМаршрутизации");
	Для Каждого СтрокаУсловия ИЗ регУсловияМаршрутизацииЗначение Цикл
		НоваяСтрока = УсловияМаршрутизации_Значение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаУсловия);
		НоваяСтрока.Объект = Процесс;
		НоваяСтрока.АдресНастройкаКомбинацииУсловий	= ПоместитьВоВременноеХранилище(СтрокаУсловия.НастройкаКомбинацииУсловий.Получить(),УникальныйИдентификатор);
		НоваяСтрока.АдресНастройкаУсловия			= ПоместитьВоВременноеХранилище(СтрокаУсловия.НастройкаУсловия.Получить(),УникальныйИдентификатор);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(УсловияМаршрутизации_Значение, "УсловияМаршрутизации");
	
#КонецОбласти
	
#Область bpmУсловияЭтапов
	
	регУсловияЭтаповЗначение = РегистрыСведений.bpmУсловияЭтапов.СоздатьНаборЗаписей();
	Если НастройкаЭтаповПроцесса ИЛИ  НастройкаЭтаповКартыМаршрута Тогда
		регУсловияЭтаповЗначение.Отбор.Объект.Установить(Процесс);
	Иначе
		//регУсловияЭтаповЗначение.Отбор.Объект.Установить(Процесс);
	КонецЕсли;
	регУсловияЭтаповЗначение.Прочитать();
	
	// По процессу еще нет настроек, получим из карты.
	Если  НастройкаЭтаповПроцесса И  регУсловияЭтаповЗначение.Количество() = 0 Тогда
		регУсловияЭтаповЗначение.Отбор.Объект.Установить(Процесс.CRM_КартаМаршрута);
		регУсловияЭтаповЗначение.Прочитать();
	КонецЕсли;	
	
	ТаблицаУсловий_Значение = РеквизитФормыВЗначение("ТаблицаУсловий");
	Для Каждого СтрокаУсловия ИЗ регУсловияЭтаповЗначение Цикл
		НоваяСтрока = ТаблицаУсловий_Значение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаУсловия);
		НоваяСтрока.Объект = Процесс;
		НоваяСтрока.АдресНастройкаКомбинацииУсловий	= ПоместитьВоВременноеХранилище(СтрокаУсловия.НастройкаКомбинацииУсловий.Получить(),УникальныйИдентификатор);
		НоваяСтрока.АдресНастройкаУсловия			= ПоместитьВоВременноеХранилище(СтрокаУсловия.НастройкаУсловия.Получить(),УникальныйИдентификатор);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаУсловий_Значение, "ТаблицаУсловий");
	
#КонецОбласти

	// Вывод актуальной версии карты маршрута.
	Если  НастройкаЭтаповПроцесса ИЛИ  НастройкаЭтаповКартыМаршрута Тогда
		СтрокаСхемыМаршрута = КартаМаршрута.ВерсииКартыМаршрута.Найти(КартаМаршрута.НомерВерсии, "НомерВерсии");
		СхемаМаршрута = СтрокаСхемыМаршрута.КартаМаршрута.Получить();
	ИначеЕсли ЗначениеЗаполнено(Процесс) Тогда	
		СтрокаСхемыМаршрута = КартаМаршрута.ВерсииКартыМаршрута.Найти(Процесс.НомерВерсииКартыМаршрута, "НомерВерсии");
		СхемаМаршрута = СтрокаСхемыМаршрута.КартаМаршрута.Получить();
	Иначе
		СхемаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("КартаМаршрутаПоУмолчанию");
	КонецЕсли;
	
	ПерерисоватьСхемуМаршрута();
	
	// Активизируем карту маршрута.
	Элементы.ГруппаКартаМаршрута.Видимость = Истина;
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница	= Элементы.СтраницаКартаМаршрута;
	Элементы.СписокДействий.Пометка			= Ложь;
	Элементы.СхемаПроцесса.Пометка			= Истина;
	
	Элементы.ПереместитьВверх.Доступность			= Ложь;
	Элементы.ПереместитьВниз.Доступность			= Ложь;
		
		
	Элементы.Состояние.Видимость				= (ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	Элементы.ГруппаСостояниеИнтереса.Видимость	= (ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	
	Если НЕ ВидОбъектаСтрокой = "" Тогда
		
		Если Метаданные.Документы.Найти(ВидОбъектаСтрокой) <> Неопределено Тогда
			МетаданныеОбъекта = Метаданные.Документы[ВидОбъектаСтрокой];
		ИначеЕсли Метаданные.Справочники.Найти(ВидОбъектаСтрокой) <> Неопределено Тогда
			МетаданныеОбъекта = Метаданные.Справочники[ВидОбъектаСтрокой];
		КонецЕсли;
		Если СтрНайти(РеквизитОбъектаСтрокой,"%Свойство%") > 0 Тогда
			СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(РеквизитОбъектаСтрокой,"%Свойство%","")));
			Элементы.ТочкаМаршрута_Состояние.ОграничениеТипа = Новый ОписаниеТипов(СсылкаНаСвойство.ТипЗначения.Типы());
			Элементы.Состояние.ОграничениеТипа = Новый ОписаниеТипов(СсылкаНаСвойство.ТипЗначения.Типы());
			
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",СсылкаНаСвойство));
			Элементы.ТочкаМаршрута_Состояние.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
			Элементы.ГруппаСостояниеИнтереса.Заголовок = СсылкаНаСвойство.Заголовок + " ("+ МетаданныеОбъекта.Синоним +")";
		Иначе
			Элементы.ТочкаМаршрута_Состояние.ОграничениеТипа = Новый ОписаниеТипов(МетаданныеОбъекта.Реквизиты[РеквизитОбъектаСтрокой].Тип.Типы());
			Если МетаданныеОбъекта.Реквизиты[РеквизитОбъектаСтрокой].Тип.Типы()[0]  = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
				Если ЗначениеЗаполнено(КартаМаршрута.СценарийИнтереса) Тогда
					ПараметрыВыбораСостояния = Новый Массив;
					ПараметрыВыбораСостояния.Добавить(Новый ПараметрВыбора("Отбор.Используется", Истина));
					ПараметрыВыбораСостояния.Добавить(Новый ПараметрВыбора("Отбор.Родитель", КартаМаршрута.СценарийИнтереса));
					Элементы.ТочкаМаршрута_Состояние.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСостояния);
				КонецЕсли;
			КонецЕсли;
			Элементы.Состояние.ОграничениеТипа = Новый ОписаниеТипов(МетаданныеОбъекта.Реквизиты[РеквизитОбъектаСтрокой].Тип.Типы());
			Элементы.ГруппаСостояниеИнтереса.Заголовок = МетаданныеОбъекта.Реквизиты[РеквизитОбъектаСтрокой].Синоним + " ("+ МетаданныеОбъекта.Синоним +")";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуДопСвойств();
	
	ПолучитьСписокДоступныхТочек();
	
	Если ТипПроцесса = перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		ОтрисоватьСвязанныеССостояниямиЭтапы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.ГруппаКартаМаршрута.Видимость И (табМаршрут_.Количество() > 0) Тогда
		// Активация первого элемента схемы.
		Элементы.табМаршрут_.ТекущаяСтрока = табМаршрут_[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='При завершении работы в форме ""';en='Upon completion of work in the form of ""'") + Заголовок + НСтр("ru='"" все изменения будут утеряны.';en='""all changes will be lost.'");
			Возврат;
		КонецЕсли;
		Отказ = Истина;
		ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбратныйВызов, НСтр("ru='Данные этапов были изменены. Продолжить?';en='These stages were changed. Continue?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность	= Ложь;
		Закрыть();
    КонецЕсли;
КонецПроцедуры // ПередЗакрытиемЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользуетсяПриИзменении(Элемент)
	
	Используется = Элементы.табМаршрут_.ТекущиеДанные.Используется;
	// В момент отключения точки маршрута необходимо скорректировать список вариантов выполнения всех точек маршрута.
	ПровертьДосупностьВариантовОтключенныхТочекМаршрута();
	
	ПерерисоватьСхемуМаршрута();
	УстановитьДоступностьРеквизитовЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаМаршрутаПриАктивизации(Элемент)
	
	Если (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДействие"))
	ИЛИ (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс"))
	ИЛИ (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыЗавершение")) Тогда
		МассивСтрок = табМаршрут_.НайтиСтроки(Новый Структура("ИмяТочки",Элемент.ТекущийЭлемент.Имя));
		Элементы.табМаршрут_.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Сч = Элемент.МинимальноеЗначение  По мин(Элемент.МаксимальноеЗначение, 59) Цикл
		Элемент.СписокВыбора.Добавить(Сч);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура рДлительностьДнейПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;	
	ТекущиеДанные.ДлительностьДней = ТочкаМаршрута_ДлительностьДней;
	
КонецПроцедуры

&НаКлиенте
Процедура рДлительностьЧасовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;	
	ТекущиеДанные.ДлительностьЧасов = ТочкаМаршрута_ДлительностьЧасов;
	
КонецПроцедуры

&НаКлиенте
Процедура рДлительностьМинутПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;	
	ТекущиеДанные.ДлительностьМинут = ТочкаМаршрута_ДлительностьМинут;
	
КонецПроцедуры

&НаКлиенте
Процедура рОтложитьДнейПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	ТекущиеДанные.ОтложитьНачалоЭтапаДней = ТочкаМаршрута_ОтложитьНачалоЭтапаДней;
	
КонецПроцедуры

&НаКлиенте
Процедура рОтложитьЧасовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	ТекущиеДанные.ОтложитьНачалоЭтапаЧасов = ТочкаМаршрута_ОтложитьНачалоЭтапаЧасов;
	
КонецПроцедуры

&НаКлиенте
Процедура рОтложитьМинутПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	ТекущиеДанные.ОтложитьНачалоЭтапаМинут = ТочкаМаршрута_ОтложитьНачалоЭтапаМинут;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаМаршрута_ОтложитьНачалоЭтапаДоступноПриИзменении(Элемент)
	
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	ТекущиеДанные.ОтложитьНачалоЭтапаДоступно = ТочкаМаршрута_ОтложитьНачалоЭтапаДоступно;
	
	
КонецПроцедуры

&НаКлиенте
Процедура рНапомнитьДнейПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	ТекущиеДанные.НапомнитьОбОкончанииДней = ТочкаМаршрута_НапомнитьОбОкончанииДней;
	
КонецПроцедуры

&НаКлиенте
Процедура рНапомнитьЧасовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	ТекущиеДанные.НапомнитьОбОкончанииЧасов = ТочкаМаршрута_НапомнитьОбОкончанииЧасов;
	
КонецПроцедуры

&НаКлиенте
Процедура рНапомнитьМинутПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	ТекущиеДанные.НапомнитьОбОкончанииМинут = ТочкаМаршрута_НапомнитьОбОкончанииМинут;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаМаршрутаЗаданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;	
	ТекущиеДанные.Задание = ТочкаМаршрута_Задание;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТочкаМаршрута) Тогда
		Массив = табМаршрут_.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТочкаМаршрута));
		Массив[0].Используется = ТочкаМаршрута_Используется;
		ПровертьДосупностьВариантовОтключенныхТочекМаршрута();
	Иначе
		Элементы.табМаршрут_.ТекущиеДанные.Используется = ТочкаМаршрута_Используется;
		ПровертьДосупностьВариантовОтключенныхТочекМаршрута();
		ПерерисоватьСхемуМаршрута();
	КонецЕсли;
	УстановитьДоступностьРеквизитовЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	
		ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
 		ТекущиеДанные.Шаблон = ТочкаМаршрута_Шаблон;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВариантовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;	
	ТекущиеДанные.ВариантВыполнения = ТочкаМаршрута_ВариантВыполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаМаршрута_СостояниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	ТекущиеДанные.Состояние = ТочкаМаршрута_Состояние;
	
	Если ВидОбъектаСтрокой = "CRM_Интерес" И НЕ ТочкаМаршрута_ЭтоТочкаЗавершения Тогда
		Элементы.ТипИсполнителяСРолями.ТолькоПросмотр = (ТипПроцесса=ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") И ЗначениеЗаполнено(ТочкаМаршрута_Состояние));
		Элементы.ТипИсполнителяБезРолей.ТолькоПросмотр = (ТипПроцесса=ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") И ЗначениеЗаполнено(ТочкаМаршрута_Состояние));
		Если ТочкаМаршрута_ЭтоГрупповаяТочка Тогда
			МассивСтрок = табИсполнители_.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТочкаМаршрута));
			Если МассивСтрок.Количество() > 0 Тогда
				МассивСтрок[0].Исполнитель	= ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Ответственный");
				МассивСтрок[0].Все			= Ложь;
			Иначе
				НоваяСтрока					= табИсполнители_.Добавить();
				НоваяСтрока.Объект			= Процесс;
				НоваяСтрока.ТочкаМаршрута	= ТочкаМаршрута;
				НоваяСтрока.Исполнитель		= ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Ответственный");
			КонецЕсли;
		Иначе
			ТочкаМаршрута_ТипИсполнителя = 3;
			ТипИсполнителяПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ОтрисоватьСвязанныеССостояниямиЭтапы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИсполнителяПриИзменении(Элемент)
	
	ТочкаМаршрута_Исполнитель1	= Неопределено;
	ТочкаМаршрута_Исполнитель2	= Неопределено;
	ТочкаМаршрута_Исполнитель3	= Неопределено;
	
	Если ТочкаМаршрута_ТипИсполнителя = 1 Тогда
		Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 2 Тогда
		Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Автор");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 3 Тогда
		Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Ответственный");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 4 Тогда
		Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Руководитель");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 7 Тогда
		Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.ИсполнительПредыдущейЗадачи");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 8 Тогда
		Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.ОсновнойМенеджер");
	КонецЕсли;
	
	ТекущиеДанныеИсп = Элементы.табИсполнители_.ТекущиеДанные;
	ТекущиеДанныеИсп.Исполнитель = Исполнитель;
	
	УстановитьОписаниеИсполнителяИВидимостьПолей();
	//Элементы.Пользователь.Видимость					= (ТочкаМаршрута_ТипИсполнителя = 0);
	//Элементы.ИсполнительТочкиМаршрута.Видимость		= (ТочкаМаршрута_ТипИсполнителя = 5);
	//Элементы.Роль.Видимость							= (ТочкаМаршрута_ТипИсполнителя = 6);
	
	Элементы.табМаршрут_.ТекущиеДанные.ИсполнительСтрокой = ОбновитьИсполнителяСтрокой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительТочкиМаршрутаПриИзменении(Элемент)
	
	ТекущиеДанныеИсп 			= Элементы.табИсполнители_.ТекущиеДанные;
	ТекущиеДанныеИсп.Исполнитель= ТочкаМаршрута_Исполнитель2;
	
	Элементы.табМаршрут_.ТекущиеДанные.ИсполнительСтрокой = ОбновитьИсполнителяСтрокой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
		
	Элементы.табИсполнители_.ТекущиеДанные.Исполнитель = ТочкаМаршрута_Исполнитель1;	
	Элементы.табМаршрут_.ТекущиеДанные.ИсполнительСтрокой = ОбновитьИсполнителяСтрокой();
	
КонецПроцедуры

&НаКлиенте
Процедура РольПриИзменении(Элемент)
		
	Элементы.табИсполнители_.ТекущиеДанные.Исполнитель = ТочкаМаршрута_Исполнитель3;	
	Элементы.табМаршрут_.ТекущиеДанные.ИсполнительСтрокой = ОбновитьИсполнителяСтрокой();
	
КонецПроцедуры

&НаКлиенте
Процедура Шаблон1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Редактируется", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.CRM_КартыМаршрутов.ФормаВыбора",ПараметрыФормы,Элемент,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИсполнителяСРолямиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = 1 Тогда
		Если НЕ ПроверитьПроцессИТочку() Тогда
			СтандартнаяОбработка = Ложь;
			Ошибка = НСтр("ru='Для карт маршрута(процессов) с типом Процесс объекта и Независимый процесс, использующихся в мастере принятия обращения, на первом этапе должен быть указан исполнитель!';en='For route maps (processes) with the Object process type and the Independent process used in the call acceptance wizard, the first stage must specify the performer!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИсполнителяБезРолейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = 1 Тогда
		Если НЕ ПроверитьПроцессИТочку() Тогда
			СтандартнаяОбработка = Ложь;
			Ошибка = НСтр("ru='Для карт маршрута(процессов) с типом Процесс объекта и Независимый процесс, использующихся в мастере принятия обращения, на первом этапе должен быть указан исполнитель!';en='For route maps (processes) with the Object process type and the Independent process used in the call acceptance wizard, the first stage must specify the performer!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормытабМаршрут

&НаКлиенте
Процедура табМаршрут_ПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("МаршрутПослеОжиданияПриАктивацииСтроки",0.1 ,Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормытабИсполнители

&НаКлиенте
Процедура табИсполнители_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанныеИсп						= Элементы.табИсполнители_.ТекущиеДанные;
		ТекущиеДанныеИсп.Объект					= Процесс;
		ТекущиеДанныеИсп.ТочкаМаршрута			= ТочкаМаршрута;
	ИначеЕсли НоваяСтрока И Копирование Тогда
		Если ТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") Тогда
			ТекущиеДанныеИсп = Элементы.табИсполнители_.ТекущиеДанные;
			Если ТекущиеДанныеИсп.Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Ответственный") Тогда
				ТекущиеДанныеИсп.Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Автор");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура табИсполнители_ПослеУдаления(Элемент)
	
	Элементы.табМаршрут_.ТекущиеДанные.ИсполнительСтрокой = ОбновитьИсполнителяСтрокой();
		
КонецПроцедуры

&НаКлиенте
Процедура табИсполнители_ПередУдалением(Элемент, Отказ)
	
	Отказ = (Элементы.табИсполнители_.ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Ответственный") И 
			 ТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта"));
	
КонецПроцедуры

&НаКлиенте
Процедура табИсполнители_ИсполнительПриИзменении(Элемент)
	
	Если Элементы.табИсполнители_.ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Ответственный")
	И ТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") Тогда
		Элементы.табИсполнители_.ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Автор");
	КонецЕсли;
	
	Элементы.табМаршрут_.ТекущиеДанные.ИсполнительСтрокой = ОбновитьИсполнителяСтрокой();
	Элементы.табИсполнители_Все.ТолькоПросмотр = ПроверитьНаРоль(Элементы.табИсполнители_.ТекущиеДанные.Исполнитель);
	
	Если Элементы.табИсполнители_Все.ТолькоПросмотр Тогда
		Элементы.табИсполнители_.ТекущиеДанные.Все = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура табИсполнители_ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.табИсполнители_.ТекущиеДанные.Исполнитель = Неопределено Тогда
		СписокТипов = Новый СписокЗначений;
		Ммассив = Новый массив;
		Ммассив.Добавить(Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач"));
		СписокТипов.Добавить(Новый ОписаниеТипов(Ммассив),"Виды исполнителей задач");
		
		Ммассив = Новый массив;
		Ммассив.Добавить(Тип("СправочникСсылка.Пользователи"));
		СписокТипов.Добавить(Новый ОписаниеТипов(Ммассив),"Пользователь");
		
		Ммассив = Новый массив;
		Ммассив.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
		СписокТипов.Добавить(Новый ОписаниеТипов(Ммассив),"Роль исполнителя");
		
		Ммассив = Новый массив;
		Ммассив.Добавить(Тип("СправочникСсылка.CRM_ТочкиМаршрутов"));
		СписокТипов.Добавить(Новый ОписаниеТипов(Ммассив),"Этап");
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещенияВыбора = Новый ОписаниеОповещения("табИсполнители_ИсполнительНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
		ПоказатьВыборИзСписка(ОписаниеОповещенияВыбора, СписокТипов, Элемент);
		
	ИначеЕсли ТипЗнч(Элементы.табИсполнители_.ТекущиеДанные.Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка"		, СписокТочекДляВыборка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор"			, СтруктураОтбора);
		ПараметрыФормы.Вставить("РежимВыбора",				Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",		Ложь);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Истина);
		
		ОткрытьФорму("Справочник.CRM_ТочкиМаршрутов.ФормаВыбора", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура табИсполнители_ИсполнительНачалоВыбораЗавершение(ВыбранныйТип, Элемент) Экспорт
	Если НЕ ВыбранныйТип = Неопределено Тогда
		Элементы.табИсполнители_Исполнитель.ОграничениеТипа = ВыбранныйТип.Значение;
		Если ВыбранныйТип.Представление = "Этап" Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Ссылка"		, СписокТочекДляВыборка);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор"			, СтруктураОтбора);
			ПараметрыФормы.Вставить("РежимВыбора",				Истина);
			ПараметрыФормы.Вставить("МножественныйВыбор",		Ложь);
			ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Истина);
			
			ОткрытьФорму("Справочник.CRM_ТочкиМаршрутов.ФормаВыбора", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ВыбранныйТип.Представление = "Виды исполнителей задач" Тогда
			ОткрытьФорму("Перечисление.CRM_ВидыИсполнителейЗадач.ФормаВыбора", , Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ВыбранныйТип.Представление = "Пользователь" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",				Истина);
			ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ВыбранныйТип.Представление = "Роль исполнителя" Тогда
			ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура табИсполнители_ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.табИсполнители_.ТекущиеДанные.Исполнитель = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура табИсполнители_ПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.табИсполнители_.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Элементы.табИсполнители_Все.ТолькоПросмотр = ПроверитьНаРоль(ТекДанные.Исполнитель);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаУсловий

&НаКлиенте
Процедура ТаблицаУсловийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаУсловийНаименование" Тогда
		
		ТекущиеДанные = Элементы.ТаблицаУсловий.ТекущиеДанные;
		
		Если ТекущиеДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.ВводДокумента") Тогда
			Возврат;
		КонецЕсли;
		
		СуществующиеУсловия = ПолучитьСуществующиеУсловияЭтапов();
		
		ПередаваемыеПараметры = Новый Структура("ЭтоУсловияЭтапов,
												|СуществующиеУсловия,
												|Объект,
												|ТочкаМаршрута,
												|Идентификатор,
												|Событие,
												|ТипДействия,
												|Проверка,
												|Исполнителю,
												|Ответственному,
												|Клиенту,
												|ВыражениеУсловия,
												|ПредставлениеОтбора,
												|СпособЗаданияУсловия,
												|Наименование,
												|Цель,
												|АдресНастройкаКомбинацииУсловий,
												|АдресНастройкаУсловия,
												|Новое");

		ПередаваемыеПараметры.ЭтоУсловияЭтапов					= Истина;
		ПередаваемыеПараметры.СуществующиеУсловия				= СуществующиеУсловия;
		ПередаваемыеПараметры.Объект							= ТекущиеДанные.Объект;
		ПередаваемыеПараметры.ТочкаМаршрута						= ТекущиеДанные.ТочкаМаршрута;
		ПередаваемыеПараметры.Идентификатор						= ТекущиеДанные.Идентификатор;
		ПередаваемыеПараметры.Событие							= ТекущиеДанные.Событие;
		ПередаваемыеПараметры.ТипДействия						= ТекущиеДанные.ТипДействия;
		ПередаваемыеПараметры.Проверка							= ТекущиеДанные.Проверка;
		ПередаваемыеПараметры.Исполнителю						= ТекущиеДанные.Исполнителю;
		ПередаваемыеПараметры.Ответственному					= ТекущиеДанные.Ответственному;
		ПередаваемыеПараметры.Клиенту							= ТекущиеДанные.Клиенту;
		ПередаваемыеПараметры.ВыражениеУсловия					= ТекущиеДанные.ВыражениеУсловия;
		ПередаваемыеПараметры.ПредставлениеОтбора				= ТекущиеДанные.ПредставлениеОтбора;
		ПередаваемыеПараметры.СпособЗаданияУсловия				= ТекущиеДанные.СпособЗаданияУсловия;
		Если ЗначениеЗаполнено(Элементы.ТаблицаУсловий.ТекущиеДанные.СпособЗаданияУсловия)Тогда
			ПередаваемыеПараметры.Наименование					= ТекущиеДанные.Наименование;
		Иначе
			ПередаваемыеПараметры.Наименование					= "Новое условие";
		КонецЕсли;
		ПередаваемыеПараметры.Цель								= ТекущиеДанные.Цель;
		ПередаваемыеПараметры.АдресНастройкаКомбинацииУсловий	= ТекущиеДанные.АдресНастройкаКомбинацииУсловий;
		ПередаваемыеПараметры.АдресНастройкаУсловия				= ТекущиеДанные.АдресНастройкаУсловия;
		ПередаваемыеПараметры.Новое								= ТекущиеДанные.Новое;
		//Если НЕ ТекущиеДанные.Новое Тогда
		//	ПередаваемыеПараметры = Новый Структура("Объект, ТочкаМаршрута, Идентификатор",ТекущиеДанные.Объект,ТекущиеДанные.ТочкаМаршрута,ТекущиеДанные.Идентификатор);
		//	ПараметрыМассив = Новый Массив;
		//	ПараметрыМассив.Добавить(ПередаваемыеПараметры);
		//	
		//	КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.bpmУсловияЭтапов", ПараметрыМассив);
		//	ПередаваемыеПараметры.Вставить("Ключ",КлючЗаписиРегистра);
		//КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаУсловийНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
		ОткрытьФорму("ОбщаяФорма.bpmУсловияЭтапов", ПередаваемыеПараметры, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если НЕ Копирование Тогда
			Если НастройкаЭтаповПроцесса ИЛИ  НастройкаЭтаповКартыМаршрута Тогда
				//Если НастройкаЭтаповПроцесса Тогда
				//	Объект = КартаМаршрута;
				//Иначе
					Объект = Процесс;
				//КонецЕсли;
			Иначе
				Объект = Процесс;
			КонецЕсли;
			Элементы.ТаблицаУсловий.ТекущиеДанные.Объект		= Объект;
			Элементы.ТаблицаУсловий.ТекущиеДанные.ТочкаМаршрута	= ТочкаМаршрута;
			Элементы.ТаблицаУсловий.ТекущиеДанные.Наименование	= "Нет";
		Иначе
			Элементы.ТаблицаУсловий.ТекущиеДанные.ВыражениеУсловия					= "";
			Элементы.ТаблицаУсловий.ТекущиеДанные.ПредставлениеОтбора				= "";
			Элементы.ТаблицаУсловий.ТекущиеДанные.СпособЗаданияУсловия				= ПредопределенноеЗначение("Перечисление.bpmСпособыЗаданияУсловия.ПустаяСсылка");
			Элементы.ТаблицаУсловий.ТекущиеДанные.Наименование						= "Нет";
			Элементы.ТаблицаУсловий.ТекущиеДанные.АдресНастройкаКомбинацииУсловий	= "";
			Элементы.ТаблицаУсловий.ТекущиеДанные.АдресНастройкаУсловия				= "";
		КонецЕсли;
		Элементы.ТаблицаУсловий.ТекущиеДанные.Новое = Истина;
		Элементы.ТаблицаУсловий.ТекущиеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловийНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекущиеДанные = Элементы.ТаблицаУсловий.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловийСобытиеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаУсловий.ТекущиеДанные;
	
	Если ТекДанные.Событие = ПредопределенноеЗначение("Перечисление.bpmСобытияЭтапа.ПриПринятииКИсполнению")
	ИЛИ ТекДанные.Событие = ПредопределенноеЗначение("Перечисление.bpmСобытияЭтапа.ПриСозданииЗадачи") Тогда
		ТекДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.Оповещение");
		ТекДанные.Проверка = Ложь;
		ТекДанные.Цель = Неопределено;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ШаблоныРассылки"));
		Элементы.ТаблицаУсловийЦель.ОграничениеТипа = новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловийТипДействияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаУсловий.ТекущиеДанные;
	
	Если ТекДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.Оповещение") Тогда
		ТекДанные.Проверка = Ложь;
		ТекДанные.Цель = Неопределено;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ШаблоныРассылки"));
		Элементы.ТаблицаУсловийЦель.ОграничениеТипа = новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ТекДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.ОповещениеСМС") Тогда
		ТекДанные.Проверка = Ложь;
		ТекДанные.Цель = Неопределено;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.SMS4B_ШаблоныСообщений"));
		Элементы.ТаблицаУсловийЦель.ОграничениеТипа = новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ТекДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.ВводДокумента") Тогда
		ТекДанные.Исполнителю		= Ложь;
		ТекДанные.Ответственному	= Ложь;
		ТекДанные.Клиенту			= Ложь;
		ТекДанные.Цель				= Неопределено;
		Элементы.ТаблицаУсловийЦель.ОграничениеТипа = новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_ВидыОбъектовБизнесПроцессов");
	ИначеЕсли ТекДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.ПроверкаУсловия") Тогда
		ТекДанные.Проверка = Ложь;
		ТекДанные.Исполнителю		= Ложь;
		ТекДанные.Ответственному	= Ложь;
		ТекДанные.Клиенту			= Ложь;
		ТекДанные.Цель				= Неопределено;
	Иначе
		ТекДанные.Цель = Неопределено;
		ТекДанные.Исполнителю		= Ложь;
		ТекДанные.Ответственному	= Ложь;
		ТекДанные.Клиенту			= Ложь;
		ТекДанные.Проверка			= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУсловийЦельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТаблицаУсловий.ТекущиеДанные;
	
	Если ТекДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.ВводДокумента")
	И ТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("ПометкаУдаления", Ложь);
		Если ВидОбъектаСтрокой = "CRM_Интерес" Тогда
			Отбор.Вставить("Ссылка", ВернутьДоступныеОбъектыПоВидуОбъктаПроцесса());
			ПараметрыФормы.Вставить("Отбор", Отбор);
		КонецЕсли;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ОткрытьФорму("ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ФормаВыбора",ПараметрыФормы, Элемент, УникальныйИдентификатор);
	ИначеЕсли ТекДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.Оповещение") Тогда
		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура("ШаблонОповещения, ПометкаУдаления", Истина, Ложь);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ОткрытьФорму("Справочник.CRM_ШаблоныРассылки.ФормаВыбора",ПараметрыФормы, Элемент, УникальныйИдентификатор);
	ИначеЕсли ТекДанные.ТипДействия = ПредопределенноеЗначение("Перечисление.bpmТипыДействий.ОповещениеСМС") Тогда
		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура("CRM_ШаблонОповещения, ПометкаУдаления", Истина, Ложь);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ОткрытьФорму("Справочник.SMS4B_ШаблоныСообщений.ФормаВыбора",ПараметрыФормы, Элемент, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаУсловий

&НаКлиенте
Процедура УсловияМаршрутизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.УсловияМаршрутизации.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если НЕ ТекущиеДанные.Новое Тогда
			ПередаваемыеПараметры = Новый Структура("Объект, ТипОбъекта, Идентификатор",ТекущиеДанные.Объект,ТекущиеДанные.ТипОбъекта,ТекущиеДанные.Идентификатор);
			ПараметрыМассив = Новый Массив;
			ПараметрыМассив.Добавить(ПередаваемыеПараметры);
			
			КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.bpmУсловияМаршрутизации", ПараметрыМассив);
			
			//ОткрытьФорму("ОбщаяФорма.bpmУсловияМаршрутизации", Новый Структура("Ключ", КлючЗаписиРегистра));
			ОписаниеОповещения = Новый ОписаниеОповещения("УсловияМаршрутизацииВыборЗавершение", ЭтотОбъект, ТекущиеДанные);
			ОткрытьФорму("ОбщаяФорма.bpmУсловияМаршрутизации", Новый Структура("Ключ, ЭтоУсловияМаршрутизации", КлючЗаписиРегистра, Истина), ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			Если НастройкаЭтаповПроцесса ИЛИ  НастройкаЭтаповКартыМаршрута Тогда
				Если НастройкаЭтаповПроцесса Тогда
					Объект = КартаМаршрута;
				Иначе
					Объект = Процесс;
				КонецЕсли;
			Иначе
				Объект = Процесс;
			КонецЕсли;
			
			ПередаваемыеПараметры = Новый Структура("Объект, ЭтоУсловияМаршрутизации",Объект, Истина);
			//ОткрытьФорму("ОбщаяФорма.bpmУсловияМаршрутизации", ПередаваемыеПараметры);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("УсловияМаршрутизацииВыборЗавершение", ЭтотОбъект, ТекущиеДанные);
			ОткрытьФорму("ОбщаяФорма.bpmУсловияМаршрутизации", ПередаваемыеПараметры, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияМаршрутизацииВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ТекущиеДанные = Элементы.УсловияМаршрутизации.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,Результат);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияМаршрутизацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	СуществующиеУсловия = ПолучитьСуществующиеУсловия();
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.УсловияМаршрутизации.ТекущиеДанные;
		
		ПередаваемыеПараметры = Новый Структура("ЭтоУсловияМаршрутизации,
												|СуществующиеУсловия,
												|Объект,
												|ТипОбъекта,
												|ВыражениеУсловия,
												|ПредставлениеОтбора,
												|СпособЗаданияУсловия,
												|Наименование,
												|Цель,
												|Событие,
												|АдресНастройкаКомбинацииУсловий,
												|АдресНастройкаУсловия");
		
		ПередаваемыеПараметры.ЭтоУсловияМаршрутизации			= Истина;
		ПередаваемыеПараметры.СуществующиеУсловия				= СуществующиеУсловия;
		ПередаваемыеПараметры.Объект							= ТекущиеДанные.Объект;
		ПередаваемыеПараметры.ТипОбъекта						= ТекущиеДанные.ТипОбъекта;
		ПередаваемыеПараметры.ВыражениеУсловия					= ТекущиеДанные.ВыражениеУсловия;
		ПередаваемыеПараметры.ПредставлениеОтбора				= ТекущиеДанные.ПредставлениеОтбора;
		ПередаваемыеПараметры.СпособЗаданияУсловия				= ТекущиеДанные.СпособЗаданияУсловия;
		ПередаваемыеПараметры.Наименование						= ТекущиеДанные.Наименование;
		ПередаваемыеПараметры.Цель								= ТекущиеДанные.Цель;
		ПередаваемыеПараметры.Событие							= ТекущиеДанные.Событие;
		ПередаваемыеПараметры.АдресНастройкаКомбинацииУсловий	= ТекущиеДанные.АдресНастройкаКомбинацииУсловий;
		ПередаваемыеПараметры.АдресНастройкаУсловия				= ТекущиеДанные.АдресНастройкаУсловия;
	Иначе
		Если НастройкаЭтаповПроцесса ИЛИ  НастройкаЭтаповКартыМаршрута Тогда
			//Если НастройкаЭтаповПроцесса Тогда
			//	Объект = КартаМаршрута;
			//Иначе
				Объект = Процесс;
			//КонецЕсли;
		Иначе
			Объект = Процесс;
		КонецЕсли;
		
		ПередаваемыеПараметры = Новый Структура("СуществующиеУсловия, Объект",СуществующиеУсловия, Объект);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УсловияМаршрутизацииНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
	ОткрытьФорму("ОбщаяФорма.bpmУсловияМаршрутизации", ПередаваемыеПараметры, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияМаршрутизацииНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		НоваяСтрока = УсловияМаршрутизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	СохранитьИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если СохранитьИзменения() Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКнопкеЗакрыть(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуЭтапов(Команда)
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница	= Элементы.СтраницаТаблицаМаршрута;
	Элементы.СписокДействий.Пометка			= Истина;
	Элементы.СхемаПроцесса.Пометка			= Ложь;
	
	Элементы.ПереместитьВверх.Доступность			= Истина;
	Элементы.ПереместитьВниз.Доступность			= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрута(Команда)
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница	= Элементы.СтраницаКартаМаршрута;
	Элементы.СписокДействий.Пометка			= Ложь;
	Элементы.СхемаПроцесса.Пометка			= Истина;
	Элементы.ГруппаКартаМаршрута.Заголовок	= НСтр("ru='Схема процесса';en='Circuit of process'");
	
	Элементы.ПереместитьВверх.Доступность				= Ложь;
	Элементы.ПереместитьВниз.Доступность				= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущийИндекс = табМаршрут_.Индекс(Элементы.табМаршрут_.ТекущиеДанные);
	
	Если НЕ ТекущийИндекс = 0 Тогда
		табМаршрут_.Сдвинуть(ТекущийИндекс, -1);
	Иначе
		табМаршрут_.Сдвинуть(ТекущийИндекс, (табМаршрут_.Количество() -1));
	КонецЕсли;
	
	ИзмененПорядок = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущийИндекс = табМаршрут_.Индекс(Элементы.табМаршрут_.ТекущиеДанные);
	
	Если НЕ ТекущийИндекс = (табМаршрут_.Количество() -1) Тогда
		табМаршрут_.Сдвинуть(ТекущийИндекс, 1);
	Иначе
		табМаршрут_.Сдвинуть(ТекущийИндекс, -(табМаршрут_.Количество() -1));
	КонецЕсли;
	
	ИзмененПорядок = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура МаршрутПослеОжиданияПриАктивацииСтроки()
	
	ТекущиеДанные = Элементы.табМаршрут_.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
		
	МассивСтрокДС = ДопСвойстваТочек.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТекущиеДанные.ТочкаМаршрута));
	
	ТочкаМаршрута									= ТекущиеДанные.ТочкаМаршрута;
	ТочкаМаршрута_Вид								= МассивСтрокДС[0].Вид;
	ТочкаМаршрута_Используется						= ТекущиеДанные.Используется;
	ТочкаМаршрута_Задание							= ТекущиеДанные.Задание;
	ТочкаМаршрута_ВариантВыполнения					= ТекущиеДанные.ВариантВыполнения;
	ТочкаМаршрута_Шаблон							= ТекущиеДанные.Шаблон;
	ТочкаМаршрута_ДлительностьДней					= ТекущиеДанные.ДлительностьДней;
	ТочкаМаршрута_ДлительностьЧасов					= ТекущиеДанные.ДлительностьЧасов;
	ТочкаМаршрута_ДлительностьМинут					= ТекущиеДанные.ДлительностьМинут;
	ТочкаМаршрута_ОтложитьНачалоЭтапаДней			= ТекущиеДанные.ОтложитьНачалоЭтапаДней;
	ТочкаМаршрута_ОтложитьНачалоЭтапаЧасов			= ТекущиеДанные.ОтложитьНачалоЭтапаЧасов;
	ТочкаМаршрута_ОтложитьНачалоЭтапаМинут			= ТекущиеДанные.ОтложитьНачалоЭтапаМинут;
	ТочкаМаршрута_НапомнитьОбОкончанииДней			= ТекущиеДанные.НапомнитьОбОкончанииДней;
	ТочкаМаршрута_НапомнитьОбОкончанииЧасов			= ТекущиеДанные.НапомнитьОбОкончанииЧасов;
	ТочкаМаршрута_НапомнитьОбОкончанииМинут			= ТекущиеДанные.НапомнитьОбОкончанииМинут;
	ТочкаМаршрута_ОтложитьНачалоЭтапаДоступно		= ТекущиеДанные.ОтложитьНачалоЭтапаДоступно;
	ТочкаМаршрута_Состояние							= ТекущиеДанные.Состояние;
	
	ТочкаМаршрута_ЕстьВарианты						= МассивСтрокДС[0].ЕстьВарианты;
	ТочкаМаршрута_ЭтоГрупповаяТочка					= МассивСтрокДС[0].Групповая;
	ТочкаМаршрута_ЭтоВложенныйБП					= МассивСтрокДС[0].ЭтоВложенныйБП;
	ТочкаМаршрута_ЭтоТочкаЗавершения				= МассивСтрокДС[0].ЭтоТочкаЗавершения;
	// Заполнения списка доступных вариантов выполнения точки маршрута.
	Если ТочкаМаршрута_ЕстьВарианты Тогда
		Элементы.СписокВариантов1.СписокВыбора.Очистить();
		Элементы.СписокВариантов2.СписокВыбора.Очистить();
		Элементы.СписокВариантов3.СписокВыбора.Очистить();
		Элементы.СписокВариантов4.СписокВыбора.Очистить();
		Для Каждого ЭлементСписка Из МассивСтрокДС[0].Варианты Цикл
			Элементы.СписокВариантов1.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			Элементы.СписокВариантов2.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			Элементы.СписокВариантов3.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			Элементы.СписокВариантов4.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
	КонецЕсли;
	
	// Отбор исполнителей по точке маршрута. 
	Элементы.табИсполнители_.ОтборСтрок = Новый ФиксированнаяСтруктура("ТочкаМаршрута", ТочкаМаршрута);
	Элементы.табИсполнители_.Обновить();
	
	// Отбор оповещений по точке маршрута. 
	Элементы.ТаблицаУсловий.ОтборСтрок = Новый ФиксированнаяСтруктура("ТочкаМаршрута", ТочкаМаршрута);
	Элементы.ТаблицаУсловий.Обновить();
	
	Если НЕ ТочкаМаршрута_ЭтоГрупповаяТочка Тогда
		
		ТекущиеДанныеИсп = Элементы.табИсполнители_.ТекущиеДанные;
		
		Если ТекущиеДанныеИсп = Неопределено Тогда
			
			МассивСтрокИсполнителей = табИсполнители_.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТочкаМаршрута));
			
			Если НЕ МассивСтрокИсполнителей.Количество() = 0 Тогда
				Элементы.табИсполнители_.ТекущаяСтрока = МассивСтрокИсполнителей[0].ПолучитьИдентификатор();
				Элементы.табИсполнители_.Обновить();
				ТекущиеДанныеИсп = Элементы.табИсполнители_.ТекущиеДанные;
			КонецЕсли;
			
			Если МассивСтрокИсполнителей.Количество() = 0 Тогда
				Исполнитель = ДобавитьВНаборНовогоИсполнителя(ТочкаМаршрута);
			Иначе
				Исполнитель = МассивСтрокИсполнителей[0].Исполнитель;
			КонецЕсли;
		Иначе
			Исполнитель = ТекущиеДанныеИсп.Исполнитель;
		КонецЕсли;
		
		//// Если нет ни одного исполнителя, то добавим строку с незаполненым исполнителем.
		//Если ТекущиеДанныеИсп = Неопределено Тогда
		//	Элементы.табИсполнители_.ТекущаяСтрока = ДобавитьВНаборНовогоИсполнителя(ТочкаМаршрута);
		//	ТекущиеДанныеИсп = Элементы.табИсполнители_.ТекущиеДанные;
		//КонецЕсли;
		
		//Исполнитель = ?(ТекущиеДанныеИсп = Неопределено,Неопределено,ТекущиеДанныеИсп.Исполнитель);
		
		ТочкаМаршрута_Исполнитель1 = Неопределено;
		ТочкаМаршрута_Исполнитель2 = Неопределено;
		ТочкаМаршрута_Исполнитель3 = Неопределено;
		
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ТочкаМаршрута_ТипИсполнителя = 0;
			ТочкаМаршрута_Исполнитель1= Исполнитель;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
			ТочкаМаршрута_ТипИсполнителя = 5;
			ТочкаМаршрута_Исполнитель2= Исполнитель;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда	
			ТочкаМаршрута_ТипИсполнителя = 6;
			ТочкаМаршрута_Исполнитель3 = Исполнитель;
		ИначеЕсли Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан") Тогда
			ТочкаМаршрута_ТипИсполнителя = 1;
		ИначеЕсли Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Автор") Тогда
			ТочкаМаршрута_ТипИсполнителя = 2;
		ИначеЕсли Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Ответственный") Тогда
			ТочкаМаршрута_ТипИсполнителя = 3;
		ИначеЕсли Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.Руководитель") Тогда
			ТочкаМаршрута_ТипИсполнителя = 4;
		ИначеЕсли Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.ИсполнительПредыдущейЗадачи") Тогда
			ТочкаМаршрута_ТипИсполнителя = 7;
		ИначеЕсли Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.ОсновнойМенеджер") Тогда
			ТочкаМаршрута_ТипИсполнителя = 8;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьРеквизитовЭтапа();
	
	УстановитьОписаниеИсполнителяИВидимостьПолей();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаРоль(Исполнитель)
	
	Возврат НЕ (ТипЗнч(Исполнитель)=Тип("СправочникСсылка.РолиИсполнителей"));
	
КонецФункции

&НаКлиенте
Процедура УстановитьОписаниеИсполнителяИВидимостьПолей()
	
	Если ТочкаМаршрута_ТипИсполнителя = 0 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Произвольный пользователь информационной базы';en='An arbitrary user of the information base'");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 1 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Исполнитель заранее не определен и выбирается вручную при переходе на этап';en='The contractor is not defined in advance and is selected manually when going to the stage'");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 2 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Будет использоваться Автор бизнес-процесса';en='The author of the business process will be used'");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 3 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Будет использоваться Ответственный бизнес-процесса';en='Responsible for the business process'");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 4 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Будет использоваться Руководитель подразделения исполнителя предыдущего этапа';en='The head of the department of the performer of the previous stage'");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 5 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Будет использоваться Исполнитель выбранного этапа';en='The Artist of the selected stage will be used'");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 6 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Будет использоваться ролевая адресация';en='Role-based addressing will be used'");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 7 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Будет использоваться исполнитель предыдущей задачи';en='The executor of the previous task will be used'");
	ИначеЕсли ТочкаМаршрута_ТипИсполнителя = 8 Тогда
		Элементы.ДекорацияОписаниеИсполнителя.Заголовок = НСтр("ru='Будет использоваться менеджер Клиента, указанного в бизнес-процессе';en='The manager of the Customer specified in the business process will be used'");
	КонецЕсли;
	
	//ТекущиеДанныеИсп = Элементы.табИсполнители_.ТекущиеДанные;
	//ТекущиеДанныеИсп.Исполнитель = Исполнитель;
	
	Элементы.Пользователь.Видимость					= (ТочкаМаршрута_ТипИсполнителя = 0);
	Элементы.ИсполнительТочкиМаршрута.Видимость		= (ТочкаМаршрута_ТипИсполнителя = 5);
	Элементы.Роль.Видимость							= (ТочкаМаршрута_ТипИсполнителя = 6);
	
//	Элементы.табМаршрут_.ТекущиеДанные.ИсполнительСтрокой = ОбновитьИсполнителяСтрокой();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхТочек()
	
	ДопустимыеВидыТочек = Новый Массив;
	ДопустимыеВидыТочек.Добавить(Перечисления.CRM_ВидыТочекМаршрута.Действие);
	ДопустимыеВидыТочек.Добавить(Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"			,КартаМаршрута);
	Запрос.УстановитьПараметр("НомерВерсии"			,КартаМаршрута.НомерВерсии);
	Запрос.УстановитьПараметр("ДопустимыеВидыТочек"	,ДопустимыеВидыТочек);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Ссылка
	               |ПОМЕСТИТЬ ДоступныеТочки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута КАК Ссылка
	               |	ИЗ
	               |		Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
	               |	ГДЕ
	               |		CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
	               |		И CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута.Владелец = &Владелец
	               |		И CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута.Вид В (&ДопустимыеВидыТочек)
	               |		И НЕ CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута.Групповая
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
	               |	ИЗ
	               |		Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	               |	ГДЕ
	               |		CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
	               |		И CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Владелец = &Владелец
	               |		И CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Вид В (&ДопустимыеВидыТочек)
	               |		И НЕ CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Групповая) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеТочки.Ссылка,
	               |	ДоступныеТочки.Ссылка.РеквизитДопУпорядочивания КАК СсылкаРеквизитДопУпорядочивания
	               |ИЗ
	               |	ДоступныеТочки КАК ДоступныеТочки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоступныеТочки.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СсылкаРеквизитДопУпорядочивания";
	
	//СписокТочек = Новый СписокЗначений;
	//СписокТочек.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	//Возврат СписокТочек;
	//Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	СписокТочекДляВыборка.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецФункции

&НаСервере
Функция ПолучитьСуществующиеУсловияЭтапов()
	
	СуществующиеУсловия = Новый Соответствие;
	
	Для Каждого СтрокаУсловия ИЗ ТаблицаУсловий Цикл
		Если СтрокаУсловия.ТочкаМаршрута = ТочкаМаршрута И ЗначениеЗаполнено(СтрокаУсловия.СпособЗаданияУсловия)Тогда
			СуществующиеУсловия.Вставить(СтрокаУсловия.Идентификатор,СтрокаУсловия.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуществующиеУсловия;
	
КонецФункции

&НаСервере
Функция ДобавитьВНаборНовогоИсполнителя(ТекущиеДанныеМаршрутТочкаМаршрута)
	
	НоваяСтрокаИсполнителя					= табИсполнители_.Добавить();
	НоваяСтрокаИсполнителя.Объект			= Процесс;
	НоваяСтрокаИсполнителя.ТочкаМаршрута	= ТекущиеДанныеМаршрутТочкаМаршрута;
	НоваяСтрокаИсполнителя.Исполнитель		= Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
	//МассивСтрок = табИсполнители_.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТекущиеДанныеМаршрутТочкаМаршрута));
	
	Возврат НоваяСтрокаИсполнителя.Исполнитель;
	
КонецФункции

&НаСервере
Функция ПолучитьЭлементСхемыПоТочке(СтрокаНабораМаршрутаТочкаМаршрута)
	
	Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ЭлементСхемы.Имя = СтрокаНабораМаршрутаТочкаМаршрута.Имя Тогда
			Возврат ЭлементСхемы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПерерисоватьСхемуМаршрута()
	
	Для Каждого СтрокаНабораМаршрута Из табМаршрут_ Цикл
		ЭлементСхемы	= ПолучитьЭлементСхемыПоТочке(СтрокаНабораМаршрута.ТочкаМаршрута);
		Если НЕ ЭлементСхемы = Неопределено Тогда
			Если НЕ СтрокаНабораМаршрута.Используется Тогда
				ЭлементСхемы.ЦветФона = WebЦвета.Белый;
				ЭлементСхемы.ЦветТекста = WebЦвета.Серый;
				ЭлементСхемы.ПрозрачныйФон = Истина;
			Иначе
				ЭлементСхемы.ЦветФона = Новый Цвет();
				ЭлементСхемы.ЦветТекста = Новый Цвет();
				ЭлементСхемы.ПрозрачныйФон = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура выполняет корректировку вариантов выполнения всех точек маршрута.
//
Процедура ПровертьДосупностьВариантовОтключенныхТочекМаршрута()
	
	Для Каждого СтрокаМаршрута Из табМаршрут_ Цикл
		Если НЕ СтрокаМаршрута.Используется Тогда
			
			Если ТипЗнч(Процесс) = Тип("СправочникСсылка.Проекты") Тогда
				НомерВерсии = Процесс.CRM_КартаМаршрута.НомерВерсии;
			ИначеЕсли ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
				НомерВерсии = Процесс.НомерВерсииКартыМаршрута;
			КонецЕсли;
			
			СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(СтрокаМаршрута.ТочкаМаршрута, НомерВерсии);
			
			Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
			ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
				
				ТабМаршрут = табМаршрут_.Выгрузить();
				СписокДоступныхВариантов = CRM_БизнесПроцессыСервер.СформироватьСписокДоступныхВариантовТочкиМаршрута(Процесс, СтрокаМаршрута.ТочкаМаршрута, ТабМаршрут);
				
				// Скорретируем список в таблице ДопСвойстваТочек.
				МассивСтрок = ДопСвойстваТочек.НайтиСтроки(Новый Структура("ТочкаМаршрута",СтрокаМаршрута.ТочкаМаршрута));
				Если НЕ СписокДоступныхВариантов = Неопределено Тогда
					МассивСтрок[0].Варианты = СписокДоступныхВариантов.Скопировать();
					МассивСтрок[0].ЕстьВарианты = Истина;
				Иначе
					МассивСтрок[0].Варианты.Очистить();
					МассивСтрок[0].ЕстьВарианты = Ложь;
				КонецЕсли;
				
				ЭлементСписка = СписокДоступныхВариантов.НайтиПоЗначению(СтрокаМаршрута.ВариантВыполнения);
				Если ЭлементСписка = Неопределено Тогда
					СтрокаМаршрута.ВариантВыполнения = СписокДоступныхВариантов[0].Значение;
				КонецЕсли;
				
				Если СтрокаМаршрута.ТочкаМаршрута = ТочкаМаршрута Тогда 
					Элементы.СписокВариантов1.СписокВыбора.Очистить();
					Элементы.СписокВариантов2.СписокВыбора.Очистить();
					Элементы.СписокВариантов3.СписокВыбора.Очистить();
					Элементы.СписокВариантов4.СписокВыбора.Очистить();
					Для Каждого ЭлементСписка Из СписокДоступныхВариантов Цикл
						Элементы.СписокВариантов1.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
						Элементы.СписокВариантов2.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
						Элементы.СписокВариантов3.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
						Элементы.СписокВариантов4.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаписатьРеквизитДопУпорядочиванияТочекМаршрута()
	
	времТаб		= РеквизитФормыВЗначение("табМаршрут_");
	Для Каждого СтрокаТаб Из времТаб Цикл
		Если НЕ СтрокаТаб.ТочкаМаршрута.РеквизитДопУпорядочивания = СтрокаТаб.Порядок Тогда
			ТочкаОбъект = СтрокаТаб.ТочкаМаршрута.ПолучитьОбъект();
			ТочкаОбъект.РеквизитДопУпорядочивания = СтрокаТаб.Порядок;
			ТочкаОбъект.ОбменДанными.Загрузка = Истина;
			ТочкаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьМаршрутИсполнителей()
	
	Если НастройкаЭтаповКартыМаршрута ИЛИ НастройкаЭтаповПроцесса Тогда
		
		времТаб		= РеквизитФормыВЗначение("табМаршрут_");
		регМаршрутЗначение = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
		регМаршрутЗначение.Отбор.Объект.Установить(Процесс);
		регМаршрутЗначение.Прочитать();
		регМаршрутЗначение.Загрузить(времТаб);
		регМаршрутЗначение.Записать();
		
		времТаб = РеквизитФормыВЗначение("ТаблицаУсловий");
		регУсловияЭтапов = РегистрыСведений.bpmУсловияЭтапов.СоздатьНаборЗаписей();
		регУсловияЭтапов.Отбор.Объект.Установить(Процесс);
		регУсловияЭтапов.Прочитать();
		регУсловияЭтапов.Очистить();
		Для Каждого СтрокаТаб ИЗ времТаб Цикл
			НоваяЗапись = регУсловияЭтапов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаб);
			Если ЗначениеЗаполнено(СтрокаТаб.СпособЗаданияУсловия) Тогда
				НоваяЗапись.НастройкаУсловия = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТаб.АдресНастройкаУсловия));
				НоваяЗапись.НастройкаКомбинацииУсловий = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТаб.АдресНастройкаКомбинацииУсловий));
			КонецЕсли;
		КонецЦикла;
		регУсловияЭтапов.Записать();
		
		времТаб = РеквизитФормыВЗначение("УсловияМаршрутизации");
		регУсловияМаршрутизации = РегистрыСведений.bpmУсловияМаршрутизации.СоздатьНаборЗаписей();
		регУсловияМаршрутизации.Отбор.Объект.Установить(Процесс);
		регУсловияМаршрутизации.Прочитать();
		регУсловияМаршрутизации.Очистить();
		Для Каждого СтрокаТаб ИЗ времТаб Цикл
			НоваяЗапись = регУсловияМаршрутизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаб);
			Если ЗначениеЗаполнено(СтрокаТаб.СпособЗаданияУсловия) Тогда
				НоваяЗапись.НастройкаУсловия = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТаб.АдресНастройкаУсловия));
				НоваяЗапись.НастройкаКомбинацииУсловий = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТаб.АдресНастройкаКомбинацииУсловий));
			КонецЕсли;
		КонецЦикла;
		регУсловияМаршрутизации.Записать();
		
	ИначеЕсли НастройкаЭтаповБизнесПроцесса Тогда
		
		времТаб		= РеквизитФормыВЗначение("табМаршрут_");
		регМаршрутЗначение = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		регМаршрутЗначение.Отбор.Объект.Установить(Процесс);
		регМаршрутЗначение.Прочитать();
		регМаршрутЗначение.Загрузить(времТаб);
		регМаршрутЗначение.Записать();
		
	КонецЕсли;
	
	//Если НастройкаЭтаповПроцесса Тогда
	//	
	//	времТаб = РеквизитФормыВЗначение("ТаблицаУсловий");
	//	регУсловияЭтапов = РегистрыСведений.bpmУсловияЭтапов.СоздатьНаборЗаписей();
	//	регУсловияЭтапов.Отбор.Объект.Установить(Процесс);
	//	регУсловияЭтапов.Прочитать();
	//	регУсловияЭтапов.Очистить();
	//	Для Каждого СтрокаТаб ИЗ времТаб Цикл
	//		НоваяЗапись = регУсловияЭтапов.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаб);
	//		Если ЗначениеЗаполнено(СтрокаТаб.СпособЗаданияУсловия) Тогда
	//			НоваяЗапись.НастройкаУсловия = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТаб.АдресНастройкаУсловия));
	//			НоваяЗапись.НастройкаКомбинацииУсловий = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТаб.АдресНастройкаКомбинацииУсловий));
	//		КонецЕсли;
	//	КонецЦикла;
	//	регУсловияЭтапов.Записать();
	//	
	//	времТаб = РеквизитФормыВЗначение("УсловияМаршрутизации");
	//	регУсловияМаршрутизации = РегистрыСведений.bpmУсловияМаршрутизации.СоздатьНаборЗаписей();
	//	регУсловияМаршрутизации.Отбор.Объект.Установить(Процесс);
	//	регУсловияМаршрутизации.Прочитать();
	//	регУсловияМаршрутизации.Очистить();
	//	Для Каждого СтрокаТаб ИЗ времТаб Цикл
	//		НоваяЗапись = регУсловияМаршрутизации.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаб);
	//		Если ЗначениеЗаполнено(СтрокаТаб.СпособЗаданияУсловия) Тогда
	//			НоваяЗапись.НастройкаУсловия = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТаб.АдресНастройкаУсловия));
	//			НоваяЗапись.НастройкаКомбинацииУсловий = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТаб.АдресНастройкаКомбинацииУсловий));
	//		КонецЕсли;
	//	КонецЦикла;
	//	регУсловияМаршрутизации.Записать();
	//	
	//КонецЕсли;
	
	времТаб		= РеквизитФормыВЗначение("табИсполнители_");
	Если НЕ НастройкаЭтаповБизнесПроцесса Тогда
		регИсполнителиЗначение = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	Иначе
		регИсполнителиЗначение = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	КонецЕсли;
	
	регИсполнителиЗначение.Отбор.Объект.Установить(Процесс);
	регИсполнителиЗначение.Прочитать();
	регИсполнителиЗначение.Загрузить(времТаб);
	регИсполнителиЗначение.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДопСвойств()
	
	ТабИсполнителей	= табИсполнители_.Выгрузить();
	ТабМаршрут		= табМаршрут_.Выгрузить();
	
	Для Каждого СтрокаНабора Из табМаршрут_ Цикл
		
		СтрокаДопСвойств = ДопСвойстваТочек.Добавить();
		СтрокаДопСвойств.ТочкаМаршрута	= СтрокаНабора.ТочкаМаршрута;
		СтрокаДопСвойств.Вид			= СтрокаНабора.ТочкаМаршрута.Вид;
		СтрокаДопСвойств.Групповая		= СтрокаНабора.ТочкаМаршрута.Групповая;
		
		Если НЕ СтрокаНабора.ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			СписокДоступныхВариантов = CRM_БизнесПроцессыСервер.СформироватьСписокДоступныхВариантовТочкиМаршрута(Процесс, СтрокаДопСвойств.ТочкаМаршрута, ТабМаршрут);
		Иначе
			СтрокаДопСвойств.ЭтоТочкаЗавершения = Истина;
			СписокДоступныхВариантов = Неопределено;
		КонецЕсли;
		
		Если НЕ СписокДоступныхВариантов = Неопределено Тогда
			СтрокаДопСвойств.Варианты = СписокДоступныхВариантов.Скопировать();
			СтрокаДопСвойств.ЕстьВарианты = Истина;
		КонецЕсли;
		
		// Свойства точки вложенного бизнес-процесса.
		Если СтрокаДопСвойств.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			СтрокаДопСвойств.ЭтоВложенныйБП			= Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитовЭтапа()
	
	Элементы.ГруппаВариантВыполнения.Видимость = ТочкаМаршрута_ЕстьВарианты;
	
	Элементы.ПанельВариантов2.ТекущаяСтраница = ?(ТочкаМаршрута_ЕстьВарианты,Элементы.ЕстьВарианты2,элементы.НетВаринатов2);
	Элементы.ПанельВариантов3.ТекущаяСтраница = ?(ТочкаМаршрута_ЕстьВарианты,Элементы.ЕстьВарианты3,элементы.НетВаринатов3);
	Элементы.ПанельВариантов4.ТекущаяСтраница = ?(ТочкаМаршрута_ЕстьВарианты,Элементы.ЕстьВарианты4,элементы.НетВаринатов4);
	
	Если НЕ ТочкаМаршрута_ЭтоВложенныйБП И НЕ ТочкаМаршрута_ЭтоТочкаЗавершения Тогда
		Элементы.ПанельНастройкиЭтапа.ТекущаяСтраница = ?(ТочкаМаршрута_Используется,Элементы.СтраницаДействиеВключено,Элементы.СтраницаДействиеОтключено);
	ИначеЕсли ТочкаМаршрута_ЭтоТочкаЗавершения Тогда
		Элементы.ПанельНастройкиЭтапа.ТекущаяСтраница = Элементы.СтраницаПустая;
	Иначе
		Элементы.ПанельНастройкиЭтапа.ТекущаяСтраница = ?(ТочкаМаршрута_Используется,Элементы.СтраницаВложенныйВключено,Элементы.СтраницаВложенныйОтключено);
	КонецЕсли;
	
	Элементы.ТочкаМаршрутаЗадание1.ТолькоПросмотр	= ложь;	//= НастройкаЭтаповПроцесса;
	Элементы.ТочкаМаршрутаЗадание3.ТолькоПросмотр		= НастройкаЭтаповПроцесса;
	Элементы.СписокВариантов1.ТолькоПросмотр			= НастройкаЭтаповПроцесса;
	Элементы.СписокВариантов3.ТолькоПросмотр			= НастройкаЭтаповПроцесса;
	
	Элементы.ГруппаСтраниц_1.Видимость					= НЕ ТочкаМаршрута_ЭтоТочкаЗавершения;
	Элементы.ГруппаОписаниеЭтапа.Видимость				= НЕ ТочкаМаршрута_ЭтоТочкаЗавершения;
	
	Элементы.ГруппаСтраниц_1.ТекущаяСтраница			= ?(ТочкаМаршрута_ЭтоГрупповаяТочка, Элементы.ИсполнительГрупповойТочки, Элементы.ИсполнительНеГрупповойТочки);
	Если ТочкаМаршрута_ЭтоТочкаЗавершения Тогда
		Элементы.ГруппаИсполнители.Видимость = Элементы.ГруппаСостояниеИнтереса.Видимость;
		Элементы.ГруппаИсполнители.Заголовок				= Элементы.ГруппаСостояниеИнтереса.Заголовок;
	Иначе
		Элементы.ГруппаИсполнители.Видимость = Истина;
		Элементы.ГруппаИсполнители.Заголовок				= ?(ТочкаМаршрута_ЭтоГрупповаяТочка, "Исполнители", "Исполнитель");
	КонецЕсли;
	
	Элементы.ИсполнительНеГрупповойТочки.ТолькоПросмотр = НЕ ТочкаМаршрута_Используется;
	Элементы.ИсполнительГрупповойТочки.ТолькоПросмотр 	= НЕ ТочкаМаршрута_Используется;
	
	Элементы.ТипИсполнителяСРолями.Видимость			= НЕ ТочкаМаршрута_ЭтоВложенныйБП;
	Элементы.ТипИсполнителяБезРолей.Видимость 			= НЕ Элементы.ТипИсполнителяСРолями.Видимость;
	Элементы.Роль.Видимость								= Элементы.Роль.Видимость И НЕ ТочкаМаршрута_ЭтоВложенныйБП;
	
	Элементы.Пользователь.Доступность					= (ТочкаМаршрута_ТипИсполнителя = 0);
	Элементы.ИсполнительТочкиМаршрута.Доступность		= (ТочкаМаршрута_ТипИсполнителя = 5);
	Элементы.Роль.Доступность							= (ТочкаМаршрута_ТипИсполнителя = 6);
	
	Элементы.ТипИсполнителяСРолями.ТолькоПросмотр = (ТипПроцесса=ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") И ВидОбъектаСтрокой = "CRM_Интерес" И  ЗначениеЗаполнено(ТочкаМаршрута_Состояние));
	Элементы.ТипИсполнителяБезРолей.ТолькоПросмотр = (ТипПроцесса=ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") И ВидОбъектаСтрокой = "CRM_Интерес" И ЗначениеЗаполнено(ТочкаМаршрута_Состояние));
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьИсполнителяСтрокой()
	
	ИсполнительСтрокой = "";
	
	МассивСтрок				= табИсполнители_.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТочкаМаршрута));
	
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		СтрокаИсполнителя = СокрЛП(Строка(ЭлементМассива.Исполнитель));
		ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой ="","","; ") + СтрокаИсполнителя;
	КонецЦикла;
	
	Возврат ИсполнительСтрокой;
	
КонецФункции

&НаСервере
Процедура ОтрисоватьСвязанныеССостояниямиЭтапы()
		
	Если ТаблицаРаскрашенныхЭлементов.Количество() > 0 Тогда
		Для Каждого СтрокаТаб ИЗ ТаблицаРаскрашенныхЭлементов Цикл
			ЭлементСхемы = СхемаМаршрута.ЭлементыГрафическойСхемы.Найти(СтрокаТаб.Имя);
			
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
				Линия = ЭлементСхемы;
				
				Линия.ЦветЛинии		= Новый Цвет(179, 172, 134);
				Линия.ЦветТекста	= Новый Цвет(179, 172, 134);
				Линия.Линия			= Новый Линия(ТипСоединительнойЛинии.Сплошная,1);
				
			Иначе
				НеЛиния = ЭлементСхемы;
				
				НеЛиния.ЦветРамки	= Новый Цвет(179, 172, 134);
				НеЛиния.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,1);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРаскрашенныхЭлементов.Очистить();
	
	Для Каждого СтрокаМаршрута ИЗ табМаршрут_ Цикл
		ЭлементСхемы = СхемаМаршрута.ЭлементыГрафическойСхемы.Найти(СтрокаМаршрута.ИмяТочки);
		Если ЗначениеЗаполнено(СтрокаМаршрута.Состояние) Тогда
			ЭлементСхемы.ЦветРамки	= Новый Цвет(0, 0, 255);
			ЭлементСхемы.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
			
			НоваяСтрока = ТаблицаРаскрашенныхЭлементов.Добавить();
			НоваяСтрока.Имя = СтрокаМаршрута.ИмяТочки;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСхемы ИЗ СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
		
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			
			Если ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыСтарт") 
			И ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
				
				Массив = ТаблицаРаскрашенныхЭлементов.НайтиСтроки(Новый Структура("Имя",ЭлементСхемы.КонецЭлемент.Имя));
				Если Массив.Количество()> 0 Тогда
					
					ЭлементСхемы.ЦветЛинии		= Новый Цвет(0, 0, 255);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.Линия			= Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
					
					НоваяСтрока		= ТаблицаРаскрашенныхЭлементов.Добавить();
					НоваяСтрока.Имя	= ЭлементСхемы.Имя;
					
					ЭлементСхемы.НачалоЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.НачалоЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
					
					НоваяСтрока		= ТаблицаРаскрашенныхЭлементов.Добавить();
					НоваяСтрока.Имя	= ЭлементСхемы.НачалоЭлемент.Имя;
				КонецЕсли;
			КонецЕслИ;
			
			Если ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
				Массив = ТаблицаРаскрашенныхЭлементов.НайтиСтроки(Новый Структура("Имя",ЭлементСхемы.НачалоЭлемент.Имя));
				Если Массив.Количество()> 0 Тогда
					
					ЭлементСхемы.ЦветЛинии		= Новый Цвет(0, 0, 255);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.Линия			= Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
					
					НоваяСтрока		= ТаблицаРаскрашенныхЭлементов.Добавить();
					НоваяСтрока.Имя	= ЭлементСхемы.Имя;
					
					Если ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыЗавершение")
					ИЛИ ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыУсловие") 
					ИЛИ ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") 
					ИЛИ ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыОбработка") 
					ИЛИ ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") 
					ИЛИ ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыРазделение") 
					ИЛИ ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыСлияние") Тогда
						
						ЭлементСхемы.КонецЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255);
						ЭлементСхемы.КонецЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
						
						НоваяСтрока		= ТаблицаРаскрашенныхЭлементов.Добавить();
						НоваяСтрока.Имя	= ЭлементСхемы.КонецЭлемент.Имя;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
				
				Если (ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыЗавершение")
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыУсловие") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыОбработка") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыРазделение") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыСлияние"))
					И (ЭлементСхемы.НачалоЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255))
					И (ЭлементСхемы.КонецЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255)) Тогда
					
					ЭлементСхемы.ЦветЛинии		= Новый Цвет(0, 0, 255);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.Линия			= Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
					
					НоваяСтрока		= ТаблицаРаскрашенныхЭлементов.Добавить();
					НоваяСтрока.Имя	= ЭлементСхемы.Имя;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(ЭлементСхемы.КонецЭлемент) = Тип("ЭлементГрафическойСхемыЗавершение") Тогда
				
				Если (ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыЗавершение")
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыУсловие") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыОбработка") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыРазделение") 
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыСлияние"))
					И (ЭлементСхемы.НачалоЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255)) Тогда
					
					ЭлементСхемы.ЦветЛинии		= Новый Цвет(0, 0, 255);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.Линия			= Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
					
					НоваяСтрока		= ТаблицаРаскрашенныхЭлементов.Добавить();
					НоваяСтрока.Имя	= ЭлементСхемы.Имя;
					
					ЭлементСхемы.КонецЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.КонецЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
					
					НоваяСтрока		= ТаблицаРаскрашенныхЭлементов.Добавить();
					НоваяСтрока.Имя	= ЭлементСхемы.КонецЭлемент.Имя;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьследующуюТочкуПроверитьЗаполненностьСостояния(ТочкаМаршрута, Знач НомерВерсии, ТаблицаПройденныхТочек = Неопределено, Маршрут)
	
	
	Перем ТекущаяТочка, ВходящаяТочка;
	
	ТекущаяТочка = ТочкаМаршрута;
	
	Если ТаблицаПройденныхТочек = Неопределено Тогда
		ТаблицаПройденныхТочек = Новый ТаблицаЗначений;
		ТаблицаПройденныхТочек.Колонки.Добавить("ТочкаМаршрута");
	КонецЕсли;
	
	Пока ТекущаяТочка.Вид <> Перечисления.CRM_ВидыТочекМаршрута.Завершение Цикл
		
		СтрокаТаб = ТаблицаПройденныхТочек.Найти(ТекущаяТочка,"ТочкаМаршрута");
		Если СтрокаТаб = Неопределено Тогда
			НоваяСтрока = ТаблицаПройденныхТочек.Добавить();
			НоваяСтрока.ТочкаМаршрута = ТекущаяТочка;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
			
			МассивСтрок = Маршрут.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТекущаяТочка));
			Если НЕ ЗначениеЗаполнено(МассивСтрок[0].Состояние) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ВходящаяТочка	= ТекущаяТочка;
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии, 0);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			
			ВходящаяТочка	= ТекущаяТочка;
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии, 0);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
			
			РезультатПрохождения = новый ТаблицаЗначений;
			РезультатПрохождения.Колонки.Добавить("Результат");
			
			МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсии);
			Для Каждого СтруктураТочки Из МассивСтруктурТочек Цикл
				НоваяСтрока = РезультатПрохождения.Добавить();
				НоваяСтрока.Результат = ПолучитьследующуюТочкуПроверитьЗаполненностьСостояния(СтруктураТочки.ИсходящаяТочка, НомерВерсии, ТаблицаПройденныхТочек, Маршрут);
			КонецЦикла;
			
			Если РезультатПрохождения.Найти(Истина,"Результат") = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			РезультатПрохождения = новый ТаблицаЗначений;
			РезультатПрохождения.Колонки.Добавить("ТочкаСлияния");
			
			МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсии);
			
			Для Каждого СтруктураТочки Из МассивСтруктурТочек Цикл
				Рез = ПолучитьследующуюТочкуПроверитьЗаполненностьСостояния(СтруктураТочки.ИсходящаяТочка, НомерВерсии, ТаблицаПройденныхТочек, Маршрут);
				
				Если ТипЗнч(Рез) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
					НоваяСтрока = РезультатПрохождения.Добавить();
					НоваяСтрока.ТочкаСлияния = Рез;
				КонецЕсли;
			КонецЦикла;
			
			Если РезультатПрохождения.Количество()=0 Тогда
				Возврат Ложь;
			Иначе
				ВходящаяТочка	= ТекущаяТочка;
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(РезультатПрохождения[0].ТочкаСлияния, НомерВерсии, 0);
				ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			Возврат ТекущаяТочка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьСостоянияУКлючевыхЭтапов(МассивОшибок)
	
	СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
	
	Для Каждого ЭлементСписка ИЗ СписокТочекСтарта Цикл
		Если ПолучитьследующуюТочкуПроверитьЗаполненностьСостояния(ЭлементСписка.Значение,КартаМаршрута.НомерВерсии, ,табМаршрут_) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция СохранитьИзменения()
	
	Если Модифицированность Тогда
		
		ЕстьОшибки = ложь;
		
		Если ТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") Тогда
			
			МассивОшибок = Новый Массив;
			
			Если НЕ ПроверитьЗаполненностьСостоянияУКлючевыхЭтапов(МассивОшибок) Тогда
				ЕстьОшибки = Истина;
				
				Ошибка = НСтр("ru='Этапы, связанные с состояниями, должны проходить от старта к завершению';en='Stages associated with states must pass from start to finish'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаМаршрута Из табМаршрут_ Цикл
			
			МассивСтрокДС = ДопСвойстваТочек.НайтиСтроки(Новый Структура("ТочкаМаршрута",СтрокаМаршрута.ТочкаМаршрута));
			Если МассивСтрокДС[0].ЭтоТочкаЗавершения Тогда Продолжить; КонецЕсли;
			
			МассивИсполнителей = табИсполнители_.НайтиСтроки(Новый Структура("ТочкаМаршрута",СтрокаМаршрута.ТочкаМаршрута));
			Если МассивИсполнителей.Количество() = 0 Тогда
				Ошибка ="";
				Ошибка = НСтр("ru='Для этапа ""';en='For a stage""'")+СтрокаМаршрута.ТочкаМаршрута + НСтр("ru='"" не указано ни одного исполнителя!';en='"" the performer is not specified!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
				ЕстьОшибки = Истина;
			Иначе
				Для Каждого ЭлементМассива Из МассивИсполнителей Цикл
					Если НЕ ЗначениеЗаполнено(ЭлементМассива.Исполнитель) Тогда
						Ошибка = "";
						Ошибка = НСтр("ru='Для этапа ""';en='For a stage""'")+СтрокаМаршрута.ТочкаМаршрута + НСтр("ru='"" не указан исполнитель!';en='"" the performer is not specified!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
						ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьОшибки Тогда
			
			Если ИзмененПорядок Тогда
				Для Каждого СтрокаТаб Из табМаршрут_ Цикл
					СтрокаТаб.Порядок = табМаршрут_.Индекс(СтрокаТаб) + 1;
				КонецЦикла;
			КонецЕсли;
			
			ПерезаписатьРеквизитДопУпорядочиванияТочекМаршрута();
			
			ИзмененПорядок = Ложь;
			
			СохранитьМаршрутИсполнителей();
			
			Модифицированность = Ложь;
			
			//Если ТипЗнч(Процесс) = Тип("СправочникСсылка.Проекты") Тогда
				Оповестить("ЗавершенаНастройкаМаршрута", Процесс, ЭтотОбъект.ВладелецФормы);
			//КонецЕсли;
			
			Возврат НЕ ЕстьОшибки;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСуществующиеУсловия()
	
	СуществующиеУсловия = Новый Соответствие;
	
	Для Каждого СтрокаУсловия ИЗ УсловияМаршрутизации Цикл
		СуществующиеУсловия.Вставить(СтрокаУсловия.Идентификатор,СтрокаУсловия.Наименование);
	КонецЦикла;
	
	Возврат СуществующиеУсловия;
	
КонецФункции

&НаСервере
Функция ВернутьДоступныеОбъектыПоВидуОбъктаПроцесса()
	
	Результат = Новый СписокЗначений;
	
	//Если ТипЗнч(Процесс) = Тип("СправочникСсылка.Проекты") Тогда
	//	ВидОбъектаСтрокой = Процесс.bpmВидОбъектаСтрокой;
	//Иначе
	//	ВидОбъектаСтрокой = Процесс.ВидОбъектаСтрокой;
	//КонецЕсли;
	
	Если ВидОбъектаСтрокой = "CRM_Интерес" Тогда
		
		СписокДоступныхТипов = Новый СписокЗначений;
		
		Для Каждого МетаДокумент ИЗ Метаданные.Документы Цикл
			Если МетаДокумент.ВводитсяНаОсновании.Содержит(Метаданные.Документы.CRM_Интерес) Тогда
				СписокДоступныхТипов.Добавить(новый ОписаниеТипов("ДокументСсылка."+МетаДокумент.Имя));
			КонецЕсли;
		КонецЦИкла;
		СписокДоступныхТипов.Добавить(новый ОписаниеТипов("ДокументСсылка.ТелефонныйЗвонок"));
		СписокДоступныхТипов.Добавить(новый ОписаниеТипов("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ВидыОбъектовБизнесПроцессов.Ссылка,
		|	CRM_ВидыОбъектовБизнесПроцессов.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов КАК CRM_ВидыОбъектовБизнесПроцессов";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ СписокДоступныхТипов.НайтиПоЗначению(Выборка.ТипЗначения) = Неопределено Тогда
				Результат.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦИкла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьПроцессИТочку()
	
	Если ТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") ИЛИ
	(ТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.НезависимыйПроцесс")
	И ?(НастройкаЭтаповКартыМаршрута,Процесс.ИспользоватьПриПринятииОбращения, Процесс.bpmИспользоватьПриПринятииОбращения)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ТочкаМаршрута);
		Запрос.УстановитьПараметр("НомерВерсии",?(НастройкаЭтаповКартыМаршрута,Процесс.НомерВерсии, Процесс.CRM_КартаМаршрута.НомерВерсии));
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
		|ГДЕ
		|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка = &Ссылка
		|	И CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
		|	И CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Старт)
		|	И НЕ CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута.ПометкаУдаления";
		
		Возврат НЕ Запрос.Выполнить().Выбрать().Следующий();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
