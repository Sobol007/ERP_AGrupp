
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если сшпОбновлениеВерсииКонфигурации.ВыполнитьОбновлениеДанныхКонфигурации() Тогда
		 
		ОбновитьНаСервере();
		
	Иначе
		
		ПрочитатьТаблицуДлительностиХранения();
		УправлениеВидимостью();
		УстновитьТекущееСостояниеПроцессовОбработки();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьТаблицуДлительностиХранения()
	
	РеквизитыФормы = ПолучитьРеквизиты("ТаблицаДлительностиХранения");
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из РеквизитыФормы Цикл
		 
		МассивУдаляемыхРеквизитов.Добавить(Колонка.Имя);
		
	КонецЦикла;   

	ТЗКонстанта = сшпРаботаСКонстантами.ПолучитьДлительностьХранения();
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из ТЗКонстанта.Колонки Цикл
		 
		ИндексНайденного = МассивУдаляемыхРеквизитов.Найти(Колонка.Имя);
		
		Если ИндексНайденного = Неопределено Тогда
			 
			НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения), "ТаблицаДлительностиХранения", Колонка.Заголовок);
			МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			
		Иначе
			
			МассивУдаляемыхРеквизитов.Удалить(ИндексНайденного);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	РеквизитыФормы = ПолучитьРеквизиты("ТаблицаДлительностиХранения");
	ТаблицаДлительностиХранения.Загрузить(ТЗКонстанта);
	
	Для Каждого Колонка Из МассивДобавляемыхРеквизитов Цикл
		 
		Элемент = Элементы.Добавить("ТаблицаДлительностиХранения" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаДлительностиХранения);
		Элемент.ПутьКДанным = "ТаблицаДлительностиХранения." + Колонка.Имя;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		
	КонецЦикла;
	   
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	
	НомерВерсии = Формат(сшпКэшируемыеФункции.ВерсияПодсистемы(), "ЧГ=0");
	
	Если НомерВерсии = "10000" Тогда
				
		Элементы.сшпИспользоватьСШП.Заголовок = "Использовать подсистему Datareon";
	
	Иначе
		
		Элементы.сшпИспользоватьСШП.Заголовок = "Использовать  подсистему Datareon (версия подсистемы " + Формат(НомерВерсии, "ЧГ=0") + ")";
	
	КонецЕсли;
	
	ТипКоннектораВебСервисы = сшпРаботаСКонстантами.ТипКоннектораВебСервисы();
	
	Элементы.сшпАвтоматическийСтартОбработчиков.Видимость	 = ТипКоннектораВебСервисы;
	Элементы.сшпДлительностьОжидания.Видимость				 = ТипКоннектораВебСервисы;
	Элементы.ГруппаТочкиПодключения.Видимость				 = ТипКоннектораВебСервисы;
	Элементы.ГруппаТекущееСостояние.Видимость				 = НаборКонстант.сшпИспользоватьСШП И Не ТипКоннектораВебСервисы;
	Элементы.ГруппаТочкиПодключенияPipe.Видимость			 = Не ТипКоннектораВебСервисы;	
	Элементы.сшпРазмерПакета.Видимость						 = НаборКонстант.сшпРежимПередачиСообщений = Перечисления.сшпРежимыПередачиСообщений.Batch;
	Элементы.сшпДлительностьОжидания.Видимость				 = Не НаборКонстант.сшпАвтоматическийСтартОбработчиков;
	
	Если НаборКонстант.сшпИспользоватьСШП Тогда 
		
		Фз = ФоновыеЗадания.Выполнить("сшпОбщегоНазначения.ПроверитьЭкземплярИнформационнойБазыДляФормыКонстант",, , "ПроверитьЭкземплярИнформационнойБазыДляФормыКонстант");
		Фз.ОжидатьЗавершения();
		
		Если Фз.ПолучитьСообщенияПользователю().Количество() = 1 Тогда 
			
			Элементы.ГруппаРассинхронизацияИдентификаторов.Видимость = Ложь;
		
		Иначе
			
			Элементы.ГруппаРассинхронизацияИдентификаторов.Видимость = Истина;
		
		КонецЕсли;
	
	Иначе
		
		Элементы.ГруппаРассинхронизацияИдентификаторов.Видимость = Ложь;
	
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
функция ПроверитьСостояниеЗаданий(Заголовок, ИмяМетода, КоличествоПотоков)
	
	ТекстСостояния = "";
	
	Фз = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяМетода, СостояниеФоновогоЗадания.Активно));
	КоличествоЗапущенных = фз.Количество();
	
	Если КоличествоЗапущенных < КоличествоПотоков Тогда 
		
		ТекстСостояния = Заголовок + Символы.ПС +
		"Запущено потоков: " + фз.Количество() + Символы.ПС + 
		"Должно быть запущено: " + КоличествоПотоков + Символы.ПС;
		
		АварийныеФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяМетода, СостояниеФоновогоЗадания.ЗавершеноАварийно));
		КоличествоАварийных = АварийныеФЗ.Количество();
		
		Если КоличествоАварийных > 0 Тогда 
			
			КоличествоАварийных = Мин(КоличествоАварийных, КоличествоПотоков - КоличествоЗапущенных);
			ТекстСостояния = ТекстСостояния + 
			"Аварийно завершены задания: " + Символы.ПС;
			
			Для Индекс = 0 по КоличествоАварийных-1 Цикл 
				
				ТекстСостояния = ТекстСостояния + 
				АварийныеФЗ[Индекс].Конец + " "
				+ ПодробноеПредставлениеОшибки(АварийныеФЗ[Индекс].ИнформацияОбОшибке) + Символы.ПС;	
			
			КонецЦикла;
		
		КонецЕсли;
		
		ТекстСостояния = ТекстСостояния + Символы.ПС;
	
	КонецЕсли;
	
	Возврат ТекстСостояния;

КонецФункции

&НаСервере
Процедура УстновитьТекущееСостояниеПроцессовОбработки() 
	
	Если сшпРаботаСКонстантами.ТипКоннектораВебСервисы() Тогда 
		
		Возврат;
	
	КонецЕсли;

	ТекстСостояния = "";
	
	Рз = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий);
	
	Если Не Рз.Использование Тогда 
		
		ТекстСостояния = "Отключено использование регламентного задания """ + Рз.Наименование + """!" + Символы.ПС;
	
	КонецЕсли;
	
	Фз = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода", Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий.ИмяМетода));
	
	Если Фз.Количество() > 0 Тогда
		
		Сообщения = Фз[0].ПолучитьСообщенияПользователю();
		
		Если Сообщения.Количество()> 0 Или Фз[0].ИнформацияОбОшибке <> Неопределено Тогда 
			
			ТекстСостояния = "Ошибка инициации обмена: " 
				+ ?(Фз[0].ИнформацияОбОшибке = неопределено, "", ПодробноеПредставлениеОшибки(Фз[0].ИнформацияОбОшибке)) + Символы.ПС;
			
			Для Каждого сообщение Из Сообщения Цикл 
				
				ТекстСостояния = ТекстСостояния + сообщение.Текст + Символы.ПС;
			
			КонецЦикла;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТекстСостояния = "" Тогда 
		
		ТекстСостояния = ПроверитьСостояниеЗаданий("Обработка служеных сообщений", "сшпPipe.ПолучениеСлужебныхСообщений", 1);
		ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Получение входящих сообщений", "сшпPipe.ПолучениеТранспортныхСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих")));
		ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Обработка очереди исходящих сообщений", "сшпPipe.ОбработкаОчередиИсходящихСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, 1));
		ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Передача исходящих сообщений", "сшпPipe.ПередачаТранспортныхСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих")));
		ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Получение квитанции по исходящим сообщениям", "сшпPipe.ПолучениеКвитанций", 1);
	
	КонецЕсли;
	
	Элементы.ДекорацияОшибокНеОбнаружено.Видимость = ТекстСостояния = "";
	Элементы.ОшибкиПриПолученииСообщений.Видимость = ТекстСостояния <> "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИдентификаторИБ(Команда)
	
	ОбновитьИдентификаторИБНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьИдентификаторИБНаСервере()
	
	Фз = ФоновыеЗадания.Выполнить("сшпРаботаСКонстантами.УстановитьИдентификаторИБ",, "УстановитьИдентификаторИБ", "УстановитьИдентификаторИБ");
	Фз.ОжидатьЗавершения();
	
	УправлениеВидимостью();

КонецПроцедуры

&НаКлиенте
Процедура сшпИспользоватьСШППриИзменении(Элемент)
	
	сшпИспользоватьСШППриИзмененииНаСервере();
	ОбновитьИнтерфейс();
	
	Если НаборКонстант.сшпИспользоватьСШП Тогда 
		
		ПодключитьОбработчикОжидания("ОбновитьТекущееСостояниеНаКлиенте", 1, Истина);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура сшпИспользоватьСШППриИзмененииНаСервере()
	
	КонстантаМенеджер = Константы.сшпИспользоватьСШП;
	КонстантаЗначение = НаборКонстант.сшпИспользоватьСШП;
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		
		КонстантаМенеджер.Установить(КонстантаЗначение);
		
		Если КонстантаЗначение = Истина Тогда 
			
			сшпОбновлениеВерсииКонфигурации.ВыполнитьОбновлениеДанныхКонфигурации();
		
		КонецЕсли;
		
		ОбновитьПовторноИспользуемыеЗначения();
		УправлениеВидимостью();
	
	КонецЕсли;
	
	Если КонстантаЗначение = Истина Тогда 
		
		ТекстСостояния = "";
		сшпОбщегоНазначения.ЗапуститьОбработкуПотоков();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	НК = РеквизитФормыВЗначение("НаборКонстант", Тип("КонстантыНабор"));
	НК.Прочитать();
	ЗначениеВРеквизитФормы(нк, "НаборКонстант");
	
	ПрочитатьТаблицуДлительностиХранения();
	УправлениеВидимостью();
	УстновитьТекущееСостояниеПроцессовОбработки();

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура сшпАдресАдаптераESBНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеНажатияАдресАдаптера", ЭтотОбъект);

	НачатьЗапускПриложения(Оповещение, ПолучитьАдресСервисаАдаптера());

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресСервисаАдаптера()
	
	сшпАдресАдаптераESB = сшпФункциональныеОпции.АдресАдаптераESB();
 	типКоннектора = сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB();
	
	Если типКоннектора = Перечисления.сшпТипыКоннекторовESB.REST Тогда
		
		Возврат "http://" + сшпАдресАдаптераESB + сшпФункциональныеОпции.ИмяСервисаESB() + "/sendMessage";
	
	ИначеЕсли типКоннектора = Перечисления.сшпТипыКоннекторовESB.SOAP Тогда
		
		Возврат сшпАдресАдаптераESB + "?singlewsdl";
	
	Иначе
		
		Возврат сшпАдресАдаптераESB;
	
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПослеНажатияАдресАдаптера(ВыбранныйЭлемент, Параметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущееСостояние(Команда)
	
	УстновитьТекущееСостояниеПроцессовОбработки();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущееСостояниеНаКлиенте()
	
	УстновитьТекущееСостояниеПроцессовОбработки();

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПотоки(Команда)
	
	сшпОбщегоНазначения.ЗапуститьОбработкуПотоков();
	ПодключитьОбработчикОжидания("ОбновитьТекущееСостояниеНаКлиенте", 1, Истина);

КонецПроцедуры

#КонецОбласти