#Область ПрограммныйИнтерфейс

#Область ВстраиваниеФормыПроверкиИПодбора

// Вызывается при возникновении событий "ПриСозданииНаСервере" форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС.
// 
// Параметры:
// 	 * Форма - УправляемаяФорма - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС:
// 	 * ПараметрыИнтеграцииФормыПроверки - Структура - см. функцию ПроверкаИПодборПродукцииМОТПКлиентСервер.ПараметрыИнтеграцииФормыПроверкиИПодбора()
//
Процедура ПриСозданииНаСервере(Форма, ПараметрыИнтеграцииФормыПроверки) Экспорт
	
	ДобавитьУдалитьЭлементыПроверкиИПодбораПриНеобходимости(Форма, ПараметрыИнтеграцииФормыПроверки, Истина);
	ЗаполнитьКешШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииФормыПроверки);
	
КонецПроцедуры

// Вызывается при возникновении событий "ПослеЗаписиНаСервере" форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС.
// 
// Параметры:
// 	 * Форма - УправляемаяФорма - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС:
// 	 * ПараметрыИнтеграцииФормыПроверки - Структура - см. функцию ПроверкаИПодборПродукцииМОТПКлиентСервер.ПараметрыИнтеграцииФормыПроверкиИПодбора()
//
Процедура ПослеЗаписиНаСервере(Форма, ПараметрыИнтеграцииФормыПроверки) Экспорт
	
	ДобавитьУдалитьЭлементыПроверкиИПодбораПриНеобходимости(Форма, ПараметрыИнтеграцииФормыПроверки);
	ЗаполнитьКешШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииФормыПроверки);
	ПроверкаИПодборПродукцииМОТПВызовСервера.ПрименитьКешШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииФормыПроверки);
	
КонецПроцедуры

// Вызывается при закрытии формы проверки и подбора табачной продукции из форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС.
// 
// Параметры:
// 	 * Форма - УправляемаяФорма - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС:
// 	 * ПараметрыИнтеграцииФормыПроверки - Структура - см. функцию ПроверкаИПодборПродукцииМОТПКлиентСервер.ПараметрыИнтеграцииФормыПроверкиИПодбора()
//
Процедура УправлениеЭлементамиОткрытияФормыПроверкиИПодбора(Форма, ПараметрыИнтеграцииФормыПроверки) Экспорт
	
	Если НЕ СуществуютЭлементыПроверкиИПодбораПродукцииМОТП(Форма) Тогда
		Возврат;
	КонецЕсли;

	ЭлементыФормы = Форма.Элементы;
	ЭлементыФормы.ГруппаСканированиеИПроверкаТабачнойПродукции.Видимость = Истина;

	Объект = Форма[ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект];
	
	МенеджерОбъекта    = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
	ЕстьПравоИзменение = ПравоДоступа("Изменение", МенеджерОбъекта.ПустаяСсылка().Метаданные());
	
	ЭтоДокументПриобретения = ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоДокументПриобретения(МенеджерОбъекта.ПустаяСсылка());
	СтатусПроверкиИПодбора  = СтатусПроверкиИПодбораДокумента(Объект.Ссылка);
	
	Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьСтатусПроверкиПодбораДокумента Тогда
		Форма.СтатусПроверкиГосИС = СтатусПроверкиИПодбора;
	КонецЕсли;
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Если ЕстьПравоИзменение Тогда
			ЭлементыФормы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
			Если ЭтоДокументПриобретения Тогда
				ЗаголовокСсылки = НСтр("ru = 'Продолжить проверку поступившей табачной продукции';
										|en = 'Продолжить проверку поступившей табачной продукции'");
			Иначе
				ЗаголовокСсылки = НСтр("ru = 'Продолжить подбор и проверку табачной продукции';
										|en = 'Продолжить подбор и проверку табачной продукции'");
			КонецЕсли;
		Иначе
			ЭлементыФормы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			Если ЭтоДокументПриобретения Тогда
				ЗаголовокСсылки = НСтр("ru = 'Промежуточные результаты проверки табачной продукции';
										|en = 'Промежуточные результаты проверки табачной продукции'");
			Иначе
				ЗаголовокСсылки = НСтр("ru = 'Промежуточные результаты подбора табачной продукции';
										|en = 'Промежуточные результаты подбора табачной продукции'");
			КонецЕсли;
		КонецЕсли;
	
		УстановитьТолькоПросмотрЭлементов(
			Форма,
			ПараметрыИнтеграцииФормыПроверки,
			Истина);
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено
		И ПараметрыИнтеграцииФормыПроверки.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		ЭлементыФормы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		Если ЭтоДокументПриобретения Тогда
			ЗаголовокСсылки = НСтр("ru = 'Результаты проверки табачной продукции';
									|en = 'Результаты проверки табачной продукции'");
		Иначе
			ЗаголовокСсылки = НСтр("ru = 'Результаты подбора табачной продукции';
									|en = 'Результаты подбора табачной продукции'");
		КонецЕсли;
		
		УстановитьТолькоПросмотрЭлементов(
			Форма,
			ПараметрыИнтеграцииФормыПроверки,
			Ложь);
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось
		ИЛИ СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
	
		Если ЕстьПравоИзменение Тогда
			ЭлементыФормы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			Если ЭтоДокументПриобретения Тогда
				ЗаголовокСсылки = НСтр("ru = 'Проверить поступившую табачную продукцию';
										|en = 'Проверить поступившую табачную продукцию'");
			Иначе
				ЗаголовокСсылки = НСтр("ru = 'Подобрать и проверить табачную продукцию';
										|en = 'Подобрать и проверить табачную продукцию'");
			КонецЕсли;
		Иначе
			ЭлементыФормы.ГруппаСканированиеИПроверкаТабачнойПродукции.Видимость = Ложь;
		КонецЕсли;
		
		УстановитьТолькоПросмотрЭлементов(
			Форма,
			ПараметрыИнтеграцииФормыПроверки,
			Ложь);
	
	Иначе
		
		ЭлементыФормы.ГруппаСканированиеИПроверкаТабачнойПродукции.Видимость = Ложь;
		
		УстановитьТолькоПросмотрЭлементов(
			Форма,
			ПараметрыИнтеграцииФормыПроверки,
			Ложь);
		
	КонецЕсли;
	
	Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьСтатусПроверкаЗавершена Тогда
		ЭлементыФормы.ВозобновитьПроверкуПродукцииМОТП.Доступность = СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
	КонецЕсли;
	
	Если ЭлементыФормы.ГруппаСканированиеИПроверкаТабачнойПродукции.Видимость Тогда
		ЭлементыФормы.ДекорацияСканироватьПроверитьТовары.Заголовок = Новый ФорматированнаяСтрока(
			ЗаголовокСсылки, ,
			ЦветаСтиля.ЦветГиперссылкиГосИС, ,
			ПроверкаИПодборПродукцииМОТПКлиентСервер.НавигационнаяСсылкаОткрытьФормуПроверкиИПодбора());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Фиксирует результаты сканирования в форме проверки и подбора в документе, из которого она была вызвана.
// 
// Параметры:
// 	ПараметрыОкончанияСканирования - Структура - содержит следующие поля:
//   * СоздаватьАктОРасхождениях       - Булево - признак, того что требуется создания документа "Акт о расхождениях".
//   * СозданныйАктОРасхождениях       - ДокументСсылка - в данный параметр требуется поместить созданный документ "Акт о расхождениях".
//   * ПроверяемыйДокумент             - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
//   * ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - содержит следующие колонки:
//   	** ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров 
//      ** ЗначениеШтрихкода - Строка
//   * ТаблицаПодобраннойПровереннойПродукции - ТаблицаЗначений - содержит следующие колонки:
//		** Номенклатура        - ОпределяемыйТип.Номекнлатура
//		** Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры
//		** Серия               - ОпределяемыйТип.СерияНоменклатуры
//		** Количество          - Число - количество по документу
//      ** КоличествоПодобрано - Число - фактическое количество по результатам проверки и подбора
//	
Процедура ЗафиксироватьРезультатПроверкиИПодбора(ПараметрыОкончанияСканирования) Экспорт
	
	ПроверкаИПодборПродукцииМОТППереопределяемый.ОтразитьРезультатыСканированияВДокументе(ПараметрыОкончанияСканирования);
	
КонецПроцедуры

// Возвращает сформированный ранее Акт о расхождениях для переданного документа.
// 
// Параметры:
// 	Документ - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях:
//	
Функция СформированныйАктОРасхождениях(Документ) Экспорт
	
	АктОРасхождениях = Неопределено;
	
	ПроверкаИПодборПродукцииМОТППереопределяемый.ПолучитьСформированныйАктОРасхождениях(Документ, АктОРасхождениях);
	
	Возврат АктОРасхождениях;
	
КонецФункции

// Возвращает для переданного документа таблицу его товаров, являющихся табачной продукцией.
// 
// Параметры:
//	* Контекст - УправляемаяФорма, ДокументСсылка - документ, табачную продукцию которого необходимо получить.
// ВозвращаемоеЗначение:
//	* ТаблицаТабачнойПродукции - ТаблицаЗначений - таблица с табачной продукцией переданного документа:
//		* GTIN           - ОпределяемыйТип.GTIN                       - штрихкод
//		* Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//		* Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//		* Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
//		* Количество     - Число                                      - количество
//
Функция ТаблицаТабачнойПродукцииДокумента(Контекст) Экспорт
	
	ТаблицаТабачнойПродукции = Новый ТаблицаЗначений();
	
	ПроверкаИПодборПродукцииМОТППереопределяемый.ПриОпределенииТабачнойПродукцииДокумента(Контекст, ТаблицаТабачнойПродукции);
	
	Возврат ТаблицаТабачнойПродукции;
	
КонецФункции

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетХешСумм

// Определяет необходимость перемаркировки по переданным данным упаковок. Упаковке требуется перемаркировка, если для упаковки с таким
// же содержимым в информационной базе определен другой штриховой код. 
//
// Параметры:
//	ДанныеУпаковок - Соответствие - содержит данные упаковок, для которых требуется получить хеш сумму:
//	* Ключ - Идентификтор строки дерева маркируемой продукции, содержащей упаковку
//	* Значение - Структура - содержит:
//       * СтрокиУчаствующиеВРасчете       - СписокЗначений - содержит штрихкоды вложенной маркируемой продукции.
//       * ИдентификаторыВложенныхУпаковок - ИдентификаторыВложенныхУпаковок - массив идентификаторов строк дерева вложенных упаковок.
//       * ЗначениеШтрихКода               - Строка - штриховой код упаковки.
//       * ХешСумма                        - Строка - ранее рассчитанные хеш-суммы упаковок.
//       * ТребуетсяПеремаркировка         - Булево - рассчитанный признак необходимости перемаркировки.
//
Процедура ОпределитьНеобходимостьПеремаркировкиПоДаннымУпаковок(ДанныеУпаковок) Экспорт
	
	ТаблицаХешСумм = Новый ТаблицаЗначений;
	ТаблицаХешСумм.Колонки.Добавить("ХешСумма",             ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаХешСумм.Колонки.Добавить("ЗначениеШтрихкода",    ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаХешСумм.Колонки.Добавить("ИдентификаторВДереве", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого ДанныеУпаковки Из ДанныеУпаковок Цикл
		
		НоваяСтрока =ТаблицаХешСумм.Добавить();
		НоваяСтрока.ХешСумма             = ДанныеУпаковки.Значение.ХешСумма;
		НоваяСтрока.ЗначениеШтрихкода    = ДанныеУпаковки.Значение.ХешСумма;
		НоваяСтрока.ИдентификаторВДереве = ДанныеУпаковки.Ключ;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаХешСумм.ХешСумма               КАК ХешСумма,
	|	ТаблицаХешСумм.ЗначениеШтрихкода      КАК ЗначениеШтрихкода,
	|	ТаблицаХешСумм.ИдентификаторВДереве   КАК ИдентификаторВДереве
	|ПОМЕСТИТЬ ПроверяемыеУпаковки
	|ИЗ
	|	&ТаблицаХешСумм КАК ТаблицаХешСумм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроверяемыеУпаковки.ИдентификаторВДереве КАК ИдентификаторВДереве,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ТребуетсяПеремаркировка
	|ИЗ
	|	ПроверяемыеУпаковки КАК ПроверяемыеУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ПроверяемыеУпаковки.ЗначениеШтрихкода = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|			И ПроверяемыеУпаковки.ХешСумма <> ШтрихкодыУпаковокТоваров.ХешСумма
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеУпаковки.ИдентификаторВДереве";
		
	Запрос.УстановитьПараметр("ТаблицаХешСумм", ТаблицаХешСумм);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		ДанныеУпаковки = ДанныеУпаковок.Получить(Выборка.ИдентификаторВДереве);
		ДанныеУпаковки.ТребуетсяПеремаркировка = Выборка.ТребуетсяПеремаркировка;
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает хеш сумму упаковки по переданным данным. 
//
// Параметры:
//	ДанныеУпаковок - Соответствие - содержит данные всех упаковок, для которых требуется получить хеш сумму:
//	 * Ключ - Идентификтор строки дерева маркируемой продукции, содержащей упаковку
//	 * Значение - Структура - содержит:
//       * СтрокиУчаствующиеВРасчете       - СписокЗначений - содержит штрихкоды вложенной маркируемой продукции.
//       * ИдентификаторыВложенныхУпаковок - ИдентификаторыВложенныхУпаковок - массив идентификаторов строк дерева вложенных упаковок.
//       * ЗначениеШтрихКода               - Строка - штриховой код упаковки.
//       * ХешСумма                        - Строка - ранее рассчитанные хеш-суммы упаковок.
//       * ТребуетсяПеремаркировка         - Булево - рассчитанный признак необходимости перемаркировки.
//  ДанныеУпаковки - Структура - данные текущей рассчитвыаемой упаковки.
//
Процедура РассчитатьХешСуммуДляУпаковки(ДанныеУпаковок, ДанныеУпаковки) Экспорт

	Если Не ПустаяСтрока(ДанныеУпаковки.ХешСумма) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторВложеннойУпаковки Из ДанныеУпаковки.ИдентификаторыВложенныхУпаковок Цикл
		ДанныеВложеннойУпаковки = ДанныеУпаковок.Получить(ИдентификаторВложеннойУпаковки);
		РассчитатьХешСуммуДляУпаковки(ДанныеУпаковок, ДанныеВложеннойУпаковки);
		ДанныеУпаковки.СтрокиУчаствующиеВРасчете.Добавить(ДанныеВложеннойУпаковки.ХешСумма);
	КонецЦикла;	
	
	ДанныеУпаковки.ИдентификаторыВложенныхУпаковок.Очистить();
	
	ДанныеУпаковки.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеУпаковки.СтрокиУчаствующиеВРасчете);

КонецПроцедуры

#КонецОбласти

#Область ОкончаниеПроверкиИПодбора

// Формирует пустую таблицу о штриховых кодах верхнего уровня, для дальнейшего наполнения информацией из форрмы проверки и подбора.
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров 
// * ЗначениеШтрихкода - Строка 
//
Функция ПустаяТаблицаШтрихкодовВерхнегоУровня() Экспорт
	
	ТаблицаШтрихкодовВерхнегоУровня = Новый ТаблицаЗначений;
	
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Возврат ТаблицаШтрихкодовВерхнегоУровня;
	
КонецФункции

// Формирует пустую таблицу информации о проверенных и под, сформированную в форме проверки и подбора.
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Номенклатура        - ОпределяемыеТипы.Номенклатура
// * Характеристика      - ОпределяемыеТипы.ХарактеристикаНоменклатуры
// * Серия               - ОпределяемыеТипы.СерияНоменклатуры
// * Количество          - Число
// * КоличествоПодобрано - Число 
Функция ПустаяТаблицаПодобраннойПровереннойПродукции() Экспорт
	
	ТаблицаПодобраннойПровереннойПродукции = Новый ТаблицаЗначений;
	
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Серия",               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Количество",          ОбщегоНазначения.ОписаниеТипаЧисло(15) );
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("КоличествоПодобрано", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	Возврат ТаблицаПодобраннойПровереннойПродукции;
	
КонецФункции 

#КонецОбласти

#Область СерииНоменклатуры

// Возвращает параметры указания серий для товаров, указанных в форме.
//
// Параметры:
//		Форма	- УправляемаяФорма - форма с товарами, для которой необходимо определить параметры указания серий.
//
// Возвращаемое значение:
//		Структура - состав полей структуры задается в процедуре ПроверкаИПодборПродукцииМОТППереопределяемый.ЗаполнитьПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Форма) Экспорт
	
	ПараметрыУказанияСерий = Новый Структура();
	ПараметрыУказанияСерий.Вставить("ИспользоватьСерииНоменклатуры", Ложь);
	
	Если Форма.ИспользоватьСерииНоменклатуры Тогда
		ПроверкаИПодборПродукцииМОТППереопределяемый.ЗаполнитьПараметрыУказанияСерий(Форма, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	0 КАК СтатусУказанияСерий
	|ИЗ
	|	&Товары КАК Товары
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ПроверкаИПодборПродукцииМОТППереопределяемый.СформироватьТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий, ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЕстьПравоДобавлениеСерий() Экспорт
	
	ПравоДобавлениеСерий = Ложь;
	
	ПроверкаИПодборПродукцииМОТППереопределяемый.ОпределитьПравоДобавлениеСерий(ПравоДобавлениеСерий);
	
	Возврат ПравоДобавлениеСерий;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ВстраиваниеФормыПроверкиИПодбора

Функция СуществуютЭлементыПроверкиИПодбораПродукцииМОТП(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	
	Возврат ЭлементыФормы.Найти("ГруппаСканированиеИПроверкаТабачнойПродукции") <> Неопределено;
	
КонецФункции

Процедура ДобавитьУдалитьЭлементыПроверкиИПодбораПриНеобходимости(Форма, ПараметрыИнтеграцииФормыПроверки, ТолькоДобавить = Ложь)
	
	Объект = Форма[ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект];
	ДатаОбъекта = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	ТабличнаяЧастьТовары = Объект[ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары];
	
	ЕстьТабачнаяПродукция = ЕстьТабачнаяПродукцияВКоллекции(ТабличнаяЧастьТовары) ИЛИ ПараметрыИнтеграцииФормыПроверки.ИспользоватьБезТабачнойПродукции;
	МаркировкаОбязательна = ДатаОбъекта >= ИнтеграцияМОТПКлиентСерверПовтИсп.ДатаОбязательнойМаркировкиТабачнойПродукции();
	
	Если ТолькоДобавить Тогда
		ДобавитьЭлементыСтатусаПроверки(Форма, ПараметрыИнтеграцииФормыПроверки);
		Если ЕстьТабачнаяПродукция И МаркировкаОбязательна Тогда
			ДобавитьЭлементыПроверкиИПодбора(Форма, ПараметрыИнтеграцииФормыПроверки);
		КонецЕсли;
	ИначеЕсли СуществуютЭлементыПроверкиИПодбораПродукцииМОТП(Форма) Тогда
		Если НЕ ЕстьТабачнаяПродукция ИЛИ НЕ МаркировкаОбязательна Тогда
			УдалитьЭлементыПроверкиИПодбора(Форма);
		КонецЕсли;
	ИначеЕсли ЕстьТабачнаяПродукция И МаркировкаОбязательна Тогда
		ДобавитьЭлементыПроверкиИПодбора(Форма, ПараметрыИнтеграцииФормыПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементыПроверкиИПодбора(Форма, ПараметрыИнтеграцииФормыПроверки)
	
	Если СуществуютЭлементыПроверкиИПодбораПродукцииМОТП(Форма) Тогда
		Возврат;
	ИначеЕсли НЕ ПравоДоступа("Использование", Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	
	Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьСтатусПроверкиПодбораДокумента
		И НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СтатусПроверкиГосИС") Тогда
		РеквизитСтатус = Новый РеквизитФормы(
			"СтатусПроверкиГосИС",
			Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиИПодбораИС"));
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(РеквизитСтатус);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	ГруппаСканированиеИПроверка = ЭлементыФормы.Добавить(
		"ГруппаСканированиеИПроверкаТабачнойПродукции",
		Тип("ГруппаФормы"),
		ЭлементыФормы[ПараметрыИнтеграцииФормыПроверки.ИмяРодительскойГруппыФормы]);
	
	ЭлементыФормы.Переместить(ГруппаСканированиеИПроверка,
		ЭлементыФормы[ПараметрыИнтеграцииФормыПроверки.ИмяРодительскойГруппыФормы],
		ЭлементыФормы[ПараметрыИнтеграцииФормыПроверки.ИмяПоследующегоЭлементаФормы]);
	
	ГруппаСканированиеИПроверка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСканированиеИПроверка.ОтображатьЗаголовок = Ложь;
	ГруппаСканированиеИПроверка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаСканированиеИПроверка.РастягиватьПоВертикали = Ложь;
	ГруппаСканированиеИПроверка.РастягиватьПоГоризонтали = Истина;
	
	ДекорацияСканироватьПроверить = ЭлементыФормы.Добавить("ДекорацияСканироватьПроверитьТовары",
		Тип("ДекорацияФормы"), ГруппаСканированиеИПроверка);
	
	ДекорацияСканироватьПроверить.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияСканироватьПроверить.УстановитьДействие("ОбработкаНавигационнойСсылки",
		"Подключаемый_ДекорацияСканироватьПроверитьТоварыОбработкаНавигационнойСсылки");
	
	ГруппаИнформацияОСканировании = ЭлементыФормы.Добавить("ГруппаИнформацияОСканированииВДругойФорме",
		Тип("ГруппаФормы"), ГруппаСканированиеИПроверка);
	
	ГруппаИнформацияОСканировании.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИнформацияОСканировании.ОтображатьЗаголовок = Ложь;
	ГруппаИнформацияОСканировании.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаИнформацияОСканировании.РастягиватьПоВертикали = Ложь;
	ГруппаИнформацияОСканировании.РастягиватьПоГоризонтали = Истина;
	
	КартинкаИнформацияОСканировании = ЭлементыФормы.Добавить("КартинкаИнформацияОСканированииВДругойФорме",
		Тип("ДекорацияФормы"), ГруппаИнформацияОСканировании);
	
	КартинкаИнформацияОСканировании.Вид = ВидДекорацииФормы.Картинка;
	КартинкаИнформацияОСканировании.Картинка = БиблиотекаКартинок.ИнформацияГосИС;
	
	НадписьИнформацияОСканировании = ЭлементыФормы.Добавить("НадписьИнформацияОСканированииВДругойФорме",
		Тип("ДекорацияФормы"), ГруппаИнформацияОСканировании);
	
	НадписьИнформацияОСканировании.Вид = ВидДекорацииФормы.Надпись;
	НадписьИнформацияОСканировании.АвтоМаксимальнаяШирина = Ложь;
	Если ПараметрыИнтеграцииФормыПроверки.БлокироватьТабличнуюЧастьТоварыПриПроверке Тогда
		НадписьИнформацияОСканировании.Заголовок = ПараметрыИнтеграцииФормыПроверки.ИнформацияДляПользователяОБлокировке;
	Иначе
		НадписьИнформацияОСканировании.Заголовок = ПараметрыИнтеграцииФормыПроверки.ИнформацияДляПользователяОПроверке;
	КонецЕсли;
	
	Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		ИмяКомандыВозобновитьПроверку = "ВозобновитьПроверкуПродукцииМОТП";
		КомандаФормы = Форма.Команды.Добавить(ИмяКомандыВозобновитьПроверку);
		КомандаФормы.Действие  = "Подключаемый_ВозобновитьПроверкуПродукцииМОТП";
		КомандаФормы.Заголовок = НСтр("ru = 'Возобновить проверку и подбор табачной продукции';
										|en = 'Возобновить проверку и подбор табачной продукции'");
		
		Кнопка = ЭлементыФормы.Добавить(
			ИмяКомандыВозобновитьПроверку,
			Тип("КнопкаФормы"),
			ЭлементыФормы[ПараметрыИнтеграцииФормыПроверки.ИмяЭлементаФормыТовары].КоманднаяПанель);
		Кнопка.ИмяКоманды = ИмяКомандыВозобновитьПроверку;
		Кнопка.ТолькоВоВсехДействиях = Истина;
	КонецЕсли;
	
	УправлениеЭлементамиОткрытияФормыПроверкиИПодбора(Форма, ПараметрыИнтеграцииФормыПроверки);
	
КонецПроцедуры

Процедура ДобавитьЭлементыСтатусаПроверки(Форма, ПараметрыИнтеграцииФормыПроверки)
	
	Если НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДанныеШтрихкодовУпаковокГосИС") Тогда
		Возврат;
	КонецЕсли;
	
	//Реквизиты
	ПутьКРеквизиту = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
	ДобавляемыеРеквизиты = Новый Массив;
	//общая
	Колонка = Новый РеквизитФормы(
		"МаркируемаяПродукцияГосИС",
		Новый ОписаниеТипов("Булево"),
		ПутьКРеквизиту,
		НСтр("ru = 'Маркируемая продукция';
			|en = 'Маркируемая продукция'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
		Колонка = Новый РеквизитФормы(
		"СтатусПроверкиГосИС",
		Новый ОписаниеТипов("Число"),
		ПутьКРеквизиту,
		НСтр("ru = 'Статус проверки подбора';
			|en = 'Статус проверки подбора'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	//кеш штрихкодов упаковок
	Таблица = Новый РеквизитФормы(
		"ДанныеШтрихкодовУпаковокГосИС",
		Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	Колонка = Новый РеквизитФормы(
		"Номенклатура",
		Метаданные.ОпределяемыеТипы.Номенклатура.Тип,
		"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы(
		"Характеристика",
		Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип,
		"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы(
		"Серия",
		Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип,
		"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы(
		"Количество",
		Новый ОписаниеТипов("Число"),
		"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы(
		"ШтрихкодыУпаковок",
		Новый ОписаниеТипов("СписокЗначений"),
		"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	//Интерфейс
	ПутьКРеквизиту = ПутьКРеквизиту + ".СтатусПроверкиГосИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
	СтрШаблон("%1СтатусПроверкиГосИС",ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары),
	Тип("ПолеФормы"),
	Форма.Элементы[ПараметрыИнтеграцииФормыПроверки.ИмяЭлементаФормыТовары],
		Форма.Элементы[ПараметрыИнтеграцииФормыПроверки.ИмяСледующейКолонки]);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяАлкогольнаяПродукцияТЧ;
	КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяАлкогольнаяПродукцияШапка;
	
КонецПроцедуры

Процедура УдалитьЭлементыПроверкиИПодбора(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементыФормы.Удалить(ЭлементыФормы.ГруппаСканированиеИПроверкаТабачнойПродукции);
	
	Если ЭлементыФормы.Найти("ВозобновитьПроверкуПродукцииМОТП") <> Неопределено Тогда
		
		Форма.Команды.Удалить(Форма.Команды["ВозобновитьПроверкуПродукцииМОТП"]);
		ЭлементыФормы.Удалить(ЭлементыФормы.ВозобновитьПроверкуПродукцииМОТП);
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьТолькоПросмотрЭлементов(Форма, ПараметрыИнтеграцииФормыПроверки, ЗаблокироватьДляРедактирования)
	
	Если НЕ ПараметрыИнтеграцииФормыПроверки.БлокироватьТабличнуюЧастьТоварыПриПроверке Тогда
		Возврат;
	КонецЕсли;

	БлокируемыеЭлементы = ПараметрыИнтеграцииФормыПроверки.БлокируемыеЭлементы;
	
	ЭлементТабличнаяЧасть = БлокируемыеЭлементы.Найти(ПараметрыИнтеграцииФормыПроверки.ИмяЭлементаФормыТовары);
	Если ЭлементТабличнаяЧасть <> Неопределено Тогда
		Форма.Элементы[ПараметрыИнтеграцииФормыПроверки.ИмяЭлементаФормыТовары].ИзменятьСоставСтрок = НЕ ЗаблокироватьДляРедактирования;
		БлокируемыеЭлементы.Удалить(ЭлементТабличнаяЧасть);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТППереопределяемый.УстановитьТолькоПросмотрЭлементов(
		Форма,
		БлокируемыеЭлементы,
		ЗаблокироватьДляРедактирования);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтатусамиПроверкиПодбораСтрок

Процедура ЗаполнитьКешШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииФормыПроверки) Экспорт
	
	Если НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	Форма.ДанныеШтрихкодовУпаковокГосИС.Очистить();
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС.Выгрузить();
	ДанныеШтрихкодовУпаковокГосИС.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	
	Объект = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
	ШтрихкодыУпаковок = Форма[Объект][ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок].Выгрузить();
	ШтрихкодыУпаковок = ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика,
	|	ШтрихкодыУпаковок.Серия,
	|	ШтрихкодыУпаковок.Количество
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия");
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыУпаковок);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СоставУпаковки);
			СтрокиКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКеша.Количество() Тогда
				СтрокиКеша[0].Количество = СтрокиКеша[0].Количество + ?(СоставУпаковки.Количество=0,1,СоставУпаковки.Количество);
				СтрокиКеша[0].ШтрихкодыУпаковок.Добавить(ИсходныйШтрихкод);
			Иначе
				НоваяСтрока = ДанныеШтрихкодовУпаковокГосИС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставУпаковки);
				Если (НоваяСтрока.Количество=0) Тогда
					НоваяСтрока.Количество=1;
				КонецЕсли;
				НоваяСтрока.ШтрихкодыУпаковок = Новый СписокЗначений;
				НоваяСтрока.ШтрихкодыУпаковок.Добавить(ИсходныйШтрихкод);
			КонецЕсли;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыУпаковок = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыУпаковок.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ДанныеШтрихкодовУпаковокГосИС.Загрузить(ДанныеШтрихкодовУпаковокГосИС);
	
КонецПроцедуры

#КонецОбласти

Функция ЕстьТабачнаяПродукцияВКоллекции(ТабличнаяЧастьТовары)
	
	ЕстьТабачнаяПродукция = Ложь;
	
	ПроверкаИПодборПродукцииМОТППереопределяемый.ЕстьТабачнаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ЕстьТабачнаяПродукция);
	
	Возврат ЕстьТабачнаяПродукция;
	
КонецФункции

Функция СтатусПроверкиИПодбораДокумента(Документ)
	
	СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось;

	Если ЗначениеЗаполнено(Документ) Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Документ", Документ);
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыПроверкиИПодбораДокументовМОТП.СтатусПроверкиИПодбора КАК СтатусПроверкиИПодбора
		|ИЗ
		|	РегистрСведений.СтатусыПроверкиИПодбораДокументовМОТП КАК СтатусыПроверкиИПодбораДокументовМОТП
		|ГДЕ
		|	СтатусыПроверкиИПодбораДокументовМОТП.Документ = &Документ
		|";
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СтатусПроверкиИПодбора = Выборка.СтатусПроверкиИПодбора;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверкиИПодбора;
	
КонецФункции

#КонецОбласти