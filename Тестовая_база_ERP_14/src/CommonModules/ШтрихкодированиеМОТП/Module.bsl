#Область ПрограммныйИнтерфейс

// Определяет по значению штрихкода принадлежность к табачной продукции: пачке, блоку, логистической упаковке.
// 
// Параметры:
// 	ЗначениеШтрихкода - Строка - Штрихкод маркируемой продукции.
// 	Детализация - Неопределено, ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - Детализация, 
// 	с которой необходимо сформировать вложенные штрихкоды.
// 	УчитыватьЛогистическуюУпаковку - Булево - Логистическая упаковка будет так же будет подвергнута анализу.
// Возвращаемое значение:
// 	Булево - Истина - в случае принадлежности штрихкода к табачной продукции, Ложь - в обратном случае.
Функция ЭтоШтрихкодТабачнойПродукции(ЗначениеШтрихкода, Детализация = Неопределено, УчитыватьЛогистическуюУпаковку = Ложь) Экспорт
	
	Если Детализация <> Неопределено Или Не УчитыватьЛогистическуюУпаковку Тогда
		Возврат ЭтоШтрихкодЕдиницыТабачнойПродукции(ЗначениеШтрихкода, Детализация);
	КонецЕсли;
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(ЗначениеШтрихкода)
		Или ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(ЗначениеШтрихкода)
		Или ШтрихкодированиеМОТПКлиентСервер.ЭтоКодЛогистическойУпаковки(ЗначениеШтрихкода);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет принадлежит ли штрихкод к пачке или блоку.
// 
// Параметры:
// 	ЗначениеШтрихкода
// Возвращаемое значение:
// 	Булево - Описание
Функция ЭтоШтрихкодЕдиницыТабачнойПродукции(ЗначениеШтрихкода, Детализация = Неопределено) Экспорт
	
	ЗначениеEAN = "";
	
	Если ЗначениеЗаполнено(Детализация) Тогда
		
		ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
		ПравилоДетализации = ПравилаДетализацииДереваУпаковок.Получить(Детализация);
		Если ПравилоДетализации.РазрешеныБлоки И Не ПравилоДетализации.РазрешеныПачки Тогда 
			
			Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(ЗначениеШтрихкода);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоКодМаркировкиТабачнойПачки(ЗначениеШтрихкода, ЗначениеEAN);
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону блока табачных пачек
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// 	GTIN          - Строка - GTIN [Исходящий].
// 	МРЦ           - Число  - МРЦ [Исходящий].
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует блоку табачных пачек.
Функция ЭтоКодМаркировкиБлока(КодМаркировки, EAN = Неопределено, МРЦ = Неопределено) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(КодМаркировки, EAN, МРЦ);
	
КонецФункции

// Вычисляет МРЦ из кода маркировки табачной пачки.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки табачной пачки.
// Возвращаемое значение:
// 	Неопределено, Число - МРЦ.
Функция МРЦКодаМаркировкиТабачнойПачки(КодМаркировки) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиТабачнойПачки(КодМаркировки);
	
КонецФункции

// Вычисляет МРЦ из кода маркировки блока табачных пачек.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки блока.
// Возвращаемое значение:
// 	Число, Неопределено - МРЦ.
Функция МРЦКодаМаркировкиБлока(КодМаркировки) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиБлока(КодМаркировки);
	
КонецФункции

// Вычисляет МРЦ из кода маркировки блока табачных пачек.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки блока.
// Возвращаемое значение:
// 	Строка, Неопределено - GTIN.
Функция ШтрихкодEANИзКодаМаркировкиБлока(КодМаркировки) Экспорт
	
	РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
	
	Если Не РезультатРазбора.Разобран Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Идентификатор01 = РезультатРазбора.ДанныеШтрихкода["01"];
		Если Идентификатор01 <> Неопределено И СтрДлина(Идентификатор01.Значение) = 14 Тогда
			
			Возврат ШтрихкодEANИзКодаМаркировкиПачки(Идентификатор01.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
// 	GTIN - Строка - GTIN.
// Возвращаемое значение:
// 	Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(GTIN) Экспорт
	
	// Пытаемся получить штрикод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

// Получить штрихкод EAN из кода маркировки табачной пачки.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
// 	Строка - Штрихкод EAN8 или EAN13.
Функция ШтрихкодEANИзКодаМаркировкиПачки(КодМаркировки) Экспорт
	
	GTIN = Лев(КодМаркировки, 14);
	
	EAN = ШтрихкодEANИзGTIN(GTIN);
	
	Возврат EAN;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону табачной пачки
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// 	GTIN          - Строка - GTIN [Возвращаемое значение].
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует табачной пачке.
Функция ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN = Неопределено) Экспорт

	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN);
	
КонецФункции

Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, Детализация) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'У документа %1 отсутствует табличная часть ШтрихкодыУпаковок.';
							|en = 'У документа %1 отсутствует табличная часть ШтрихкодыУпаковок.'");
		ВызватьИсключение СтрШаблон(ТекстОшибки, ДокументСсылка);
	КонецЕсли;
	
	ЕстьКолонкаЗначениеШтрихкода = МетаданныеДокумента.ТабличныеЧасти.ШтрихкодыУпаковок.Реквизиты.Найти("ЗначениеШтрихкода")<>Неопределено;
	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Если ЕстьКолонкаЗначениеШтрихкода Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки  КАК ШтрихкодУпаковки,
		|	ДокументШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
		|ГДЕ
		|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки  КАК ШтрихкодУпаковки,
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
		|ГДЕ
		|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	КонецЕсли;
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяДокумента);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	ШтрихкодыУпаковок = Результат.Выгрузить();
	ИзвестныеУпаковки   = Новый Массив;
	НеизвестныеУпаковки = Новый Массив;
	
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
			ИзвестныеУпаковки.Добавить(Строка.ШтрихкодУпаковки);
		Иначе
			НеизвестныеУпаковки.Добавить(Строка.ЗначениеШтрихкода);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам    = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(ДокументСсылка);
	Если ИзвестныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкодыИзвестныхУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(ИзвестныеУпаковки);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу();
		Результат.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если НеизвестныеУпаковки.Количество() > 0 Тогда
	
		Возврат ВложенныеШтрихкодыПоДаннымМОТП(НеизвестныеУпаковки, ПараметрыСканирования);
	
	КонецЕсли;
	
	ПустаяКоллекция = ИнициализацияВложенныхШтрихкодов();
	Результат       = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу();
	Результат.ВложенныеШтрихкоды = ПустаяКоллекция;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеНеизвестнойМаркируемойПродукции(Штрихкоды, ПараметрыСканирования) Экспорт
	
	ДанныеНеизвестнойМаркируемойПродукции = Новый Соответствие();
	
	Если Штрихкоды.Количество() = 0 Тогда
		Возврат ДанныеНеизвестнойМаркируемойПродукции;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		
		ДанныеНеизвестнойМаркируемойПродукции = ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(Штрихкоды); // проверяем на то что это марк товар.
		
	ИначеЕсли ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхШтрихкодовМОТП Тогда
		
		РезультатПоДаннымМОТП                 = ВложенныеШтрихкодыПоДаннымМОТП(Штрихкоды, ПараметрыСканирования);
		ДанныеНеизвестнойМаркируемойПродукции = СформироватьОбработанныеШтрихкоды(РезультатПоДаннымМОТП.ВложенныеШтрихкоды.ДеревоУпаковок);
		
	КонецЕсли;
	
	Возврат ДанныеНеизвестнойМаркируемойПродукции;

КонецФункции

Процедура ОбработатьШтрихкодыНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхШтрихкодовМОТП Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = НСтр("ru = 'Запрещено запрашивать данные по неизвестным штрихкодам в МОТП.';
												|en = 'Запрещено запрашивать данные по неизвестным штрихкодам в МОТП.'");
		
		Возврат;
	КонецЕсли; 
	
	КодыМаркировки = ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок;
	
	Результат = ВложенныеШтрихкодыПоДаннымМОТП(КодыМаркировки, ПараметрыСканирования);
	Если Результат.ЕстьОшибки Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
		
		Возврат;
	КонецЕсли;
	
	Если Результат.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления = Результат.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления;
		
		Возврат;
	КонецЕсли;
	
	ДанныеПоШтрихкодам.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоШтрихкодам.ВидыПродукции);
	ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(Результат.ВложенныеШтрихкоды, ПараметрыСканирования);
	ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, Результат.ВложенныеШтрихкоды);
	ОбработанныеШтрихкоды = СформироватьОбработанныеШтрихкоды(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ОбработанныеШтрихкоды);
	
	ШтрихкодыИзвестныхУпаковок = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ШтрихкодыИзвестныхУпаковок.Добавить(КлючЗначение.Ключ);
		ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, 
			ШтрихкодыИзвестныхУпаковок);
			
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок,
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоставНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	СоставУпаковок = Новый Структура;
	ВидыПродукции  = Новый Массив;
	ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
	
	СоставУпаковок.Вставить("ОбработанныеШтрихкоды", Новый Соответствие);
	СоставУпаковок.Вставить("ВложенныеШтрихкоды",    Неопределено);
	СоставУпаковок.Вставить("ВидыПродукции",         ВидыПродукции);
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхШтрихкодовМОТП Тогда
		Возврат СоставУпаковок;
	КонецЕсли;
	
	КодыМаркировки = ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок;
	
	Результат = ВложенныеШтрихкодыПоДаннымМОТП(КодыМаркировки, ПараметрыСканирования);
	Если Результат.ЕстьОшибки Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
		
		Возврат СоставУпаковок;
	КонецЕсли;
	
	СоставУпаковок.ВложенныеШтрихкоды    = Результат.ВложенныеШтрихкоды;
	СоставУпаковок.ОбработанныеШтрихкоды = СформироватьОбработанныеШтрихкоды(СоставУпаковок.ВложенныеШтрихкоды.ДеревоУпаковок);
	ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(СоставУпаковок.ВложенныеШтрихкоды, ПараметрыСканирования);
	
	ШтрихкодыИзвестныхУпаковок = Новый Массив;
	Для Каждого КлючЗначение Из СоставУпаковок.ОбработанныеШтрихкоды Цикл
		
		ШтрихкодыИзвестныхУпаковок.Добавить(КлючЗначение.Ключ);
		ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, 
			ШтрихкодыИзвестныхУпаковок);
			
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок,
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, Истина);
		
	КонецЦикла;
	
	Возврат СоставУпаковок;
	
КонецФункции

Функция ОбработатьВыбор(Форма, ИмяЭлементаВыбора, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	Если ИмяЭлементаВыбора = "Номенклатура" Тогда
		РезультатДобавления = ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	КонецЕсли;

	Возврат РезультатДобавления;

КонецФункции

Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	ПравилаПроверкиНаОшибки = Новый Структура;
	
	Если ПараметрыСканирования.ДопустимыеСтатусыМОТП.Количество() > 0
		И ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
			
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусыМОТП",   ПараметрыСканирования.ДопустимыеСтатусыМОТП);
		ПравилоКонтроляСтатусов.Вставить("КоллекцияСтрокСОшибками", Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыСканирования.ИННВладельца) Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий",        Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхБлоков", Новый Массив);
	
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
КонецПроцедуры

Процедура ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	Детализация = ПараметрыСканирования.Детализация;
	
	Если Не ЗначениеЗаполнено(Детализация) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок       = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары  = ВложенныеШтрихкоды.МаркированныеТовары;
	МассивУдаляемыхСтрок = Новый Массив;
	
	ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
	ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
	ОпределитьУдаляемыеСтрокиДереваПоДетализации(ДеревоУпаковок.Строки, ПравилоДетализации, МассивУдаляемыхСтрок);
	УдалитьСтрокиДереваУпаковокПоДетализации(ДеревоУпаковок, МассивУдаляемыхСтрок, МаркированныеТовары);
	
	ВложенныеШтрихкоды.МаркированныеТовары = МаркированныеТовары;
	ВложенныеШтрихкоды.ДеревоУпаковок      = ДеревоУпаковок;
	
КонецПроцедуры

// Дополнение полученных данных штрихкодов даннными, которые актуальны для табачной продукции.
// 
// Параметры:
// 	ДанныеПоШтрихкодам
// 	Параметры
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(ДеревоУпаковок.Строки, МаркированныеТовары);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДеревоУпаковок = Неопределено;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
			
		ДеревоУпаковок      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
		НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования);
		
		Для Каждого Строка Из МаркированныеТовары Цикл
			Строка.КоличествоПачек           = Строка.СтрокаДерева.КоличествоПачек;
			Строка.ГрупповаяТоварнаяУпаковка = Строка.СтрокаДерева.ГрупповаяТоварнаяУпаковка;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.Свойство("ОбработанныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды) Тогда
			
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			ДанныеКодаМаркировки = КлючЗначение.Значение;
			ДополнитьСвойстваКоллекцииДанныеШтрихкода(ДанныеКодаМаркировки);
			ДанныеКодаМаркировки.ГрупповаяТоварнаяУпаковка = ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(КлючЗначение.Ключ);
			
			Если ДеревоУпаковок <> Неопределено Тогда
				ДанныеСтроки = ДеревоУпаковок.Строки.Найти(КлючЗначение.Ключ, "ЗначениеШтрихкода");
			Иначе
				ДанныеСтроки = Неопределено;
			КонецЕсли;
				
			Если ДанныеСтроки <> Неопределено Тогда
				ДанныеКодаМаркировки.КоличествоПачек  = ДанныеСтроки.КоличествоПачек;
				ДанныеКодаМаркировки.КоличествоБлоков = ДанныеСтроки.КоличествоБлоков;
			Иначе
				ДанныеКодаМаркировки.КоличествоПачек  = 1;
				ДанныеКодаМаркировки.КоличествоБлоков = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		Если ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(СтрокаДерева.ЗначениеШтрихкода) Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(СтрокаДерева.Строки, МаркированныеТовары, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыДляПолученияСпецифики = Новый Массив;

	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
			И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		Для Каждого СтрокаТовары Из МаркированныеТовары Цикл
			ШтрихкодыДляПолученияСпецифики.Добавить(СтрокаТовары.ЗначениеШтрихкода);
		КонецЦикла;
		
	ИначеЕсли ДанныеПоШтрихкодам.Свойство("ОбработанныеШтрихкоды")
			И ДанныеПоШтрихкодам.ОбработанныеШтрихкоды <> Неопределено Тогда
				
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			
			Если КлючЗначение.Значение.Свойство("ПолученыДанныеИзМОТП") И КлючЗначение.Значение.ПолученыДанныеИзМОТП Тогда
				Продолжить;
			КонецЕсли;
			
			ШтрихкодыДляПолученияСпецифики.Добавить(КлючЗначение.Значение.Штрихкод);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ШтрихкодыДляПолученияСпецифики.Количество() = 0 Тогда
		СпецификаШтрихкодов = Неопределено;
	Иначе
		Результат = СпецификаДляДополненияДанныхПоШтрихкодам(ШтрихкодыДляПолученияСпецифики);
		Если Результат.ЕстьОшибки Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
			
			Возврат;
		Иначе
			СпецификаШтрихкодов = Результат.СпецификаШтрихкодов;
		КонецЕсли;
	КонецЕсли;
	
	ДеревоУпаковок = Неопределено;
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, СпецификаШтрихкодов);
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
		
	КонецЕсли;
	
	Если СпецификаШтрихкодов <> Неопределено Тогда
		ДополнитьСпецификойОбработанныеШтрихкоды(ДанныеПоШтрихкодам, СпецификаШтрихкодов, ДеревоУпаковок);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки перед формированием данных по штрихкодам. 
// 
// Параметры:
// 	СписокШтрихкодов - Массив - Проверяемые штрихкоды
// 	ПараметрыСканирования - Структура - См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования
// Возвращаемое значение:
// 	Соответствие - В случае удачного прохождения проверок - возвращает пустое соответствие,
//		В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования) Экспорт
	
	РезультатОбработкиШтрихкода = Неопределено;
	
	ЕстьШтрихкодТабачнойПродукции = Ложь;
	Для Каждого ЗначениеШтрихкода Из СписокШтрихкодов Цикл
		
		Если ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(ЗначениеШтрихкода) 
			Или ШтрихкодированиеМОТПКлиентСервер.ЭтоКодУпаковки(ЗначениеШтрихкода) Тогда
			
			ЕстьШтрихкодТабачнойПродукции = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьШтрихкодТабачнойПродукции И ТребуетсяАвторизацияПользователя(ПараметрыСканирования) Тогда
	
		РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатОбработкиШтрихкода.ТребуетсяАвторизация = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено) Экспорт
	
	РезультатОбработки = ИнициализироватьКоллекциюРезультатаОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Если РезультатОбработки.ТребуетсяВыборСерии <> Истина И Форма <> Неопределено Тогда
		РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Если РезультатОбработки.ТребуетсяВыборСерии Тогда
		
		ПараметрыВыбораСерии = Новый Структура("Номенклатура, Характеристика, Склад, Штрихкод");
		
		ЗаполнитьЗначенияСвойств(ПараметрыВыбораСерии, ДанныеШтрихкода);
		ПараметрыВыбораСерии.Склад = ПараметрыСканирования.Склад;
		РезультатОбработки.ПараметрыВыбораСерии = ПараметрыВыбораСерии;
		
	КонецЕсли;
	
	Возврат РезультатОбработки;

КонецФункции

// Дополнение свойств коллекции Данные штрихкода свойствами специфичными
// для табачной продукции
// 
// Параметры:
// 	КоллекцияДанныеШтрихкода - Структура
Процедура ДополнитьСвойстваКоллекцииДанныеШтрихкода(КоллекцияДанныеШтрихкода) Экспорт

	КоллекцияДанныеШтрихкода.Вставить("ГрупповаяТоварнаяУпаковка", Ложь);
	КоллекцияДанныеШтрихкода.Вставить("Контрагент",                Неопределено);
	КоллекцияДанныеШтрихкода.Вставить("ИННВладельца"               "");
	КоллекцияДанныеШтрихкода.Вставить("Статус",                    Неопределено);
	КоллекцияДанныеШтрихкода.Вставить("ПредставлениеСтатуса"       "");
	КоллекцияДанныеШтрихкода.Вставить("КоличествоПачек",           Неопределено);
	КоллекцияДанныеШтрихкода.Вставить("КоличествоБлоков",          Неопределено);
	КоллекцияДанныеШтрихкода.Вставить("ТребуетсяВыборСерии",       Ложь);
	КоллекцияДанныеШтрихкода.Вставить("МРЦ",                       0);
	КоллекцияДанныеШтрихкода.Вставить("ПолученыДанныеИзМОТП",      Ложь);

КонецПроцедуры

Функция ИнициализироватьКоллекциюРезультатаОбработкиШтрихкода(ДанныеШтрихкода = Неопределено) Экспорт

	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода();
	ДополнитьКоллекциюРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);

	Возврат РезультатОбработкиШтрихкода;

КонецФункции

Процедура ДополнитьКоллекциюРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизация",      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ГрупповаяТоварнаяУпаковка", Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборСерии",       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораСерии",      Новый Структура);

КонецПроцедуры

Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт

	Если Действие = "ОбработатьВыборСерии" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	//ИспользуютсяДанныеВыбораПоМаркируемойПродукции
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(Форма); // скорей всего есть параметры в результате обработки
	
	ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода);
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		Серия = РезультатВыбора.ДанныеВыбора.Серия;
		ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	Иначе
		Серия = РезультатВыбора;
	КонецЕсли;
	
	ДанныеШтрихкода.Серия = Серия;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеМОТПКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		ШтрихкодУпаковкиОбъект       = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
		ШтрихкодУпаковкиОбъект.Серия = Серия;
		ШтрихкодУпаковкиОбъект.Записать();
		
	КонецЕсли;
	
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Форма.УникальныйИдентификатор);
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ШтрихкодированиеИСКлиентСервер.ЭтоУпаковка(ТипУпаковки) Тогда
		ВложенныеШтрихкоды = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция СформироватьОбработанныеШтрихкоды(ДеревоУпаковок)
	
	ДанныеМаркируемойПродукции = Новый Соответствие;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДанныеКодаМаркировки = ИнициализироватьДанныеКодаМаркировки();
		ЗаполнитьЗначенияСвойств(ДанныеКодаМаркировки, СтрокаДерева);
		ДанныеКодаМаркировки.МаркируемаяПродукция = Истина;
		ДанныеКодаМаркировки.Штрихкод             = СтрокаДерева.ЗначениеШтрихкода;
		ДанныеКодаМаркировки.ПолученыДанныеИзМОТП = Истина;
		ДанныеКодаМаркировки.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
		ДанныеМаркируемойПродукции.Вставить(СтрокаДерева.ЗначениеШтрихкода, ДанныеКодаМаркировки);
		
	КонецЦикла;
	
	Возврат ДанныеМаркируемойПродукции;
	
КонецФункции

// Получение спицифичных данных, используемых только для табачной продукции
// 
// Параметры:
// 	МаркируемаяПродукция - Массив - Описание
// Возвращаемое значение:
// 	Неопределено - Описание
Функция СпецификаДляДополненияДанныхПоШтрихкодам(ШтрихкодыДляПолученияСпецифики)
	
	Результат = Новый Структура;
	Результат.Вставить("СпецификаШтрихкодов", Неопределено);
	Результат.Вставить("ЕстьОшибки",          Ложь);
	Результат.Вставить("ТекстОшибки",         "");
	
	ДанныеПоШтрихкодамМОТП = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(ШтрихкодыДляПолученияСпецифики);
	Если ДанныеПоШтрихкодамМОТП = Неопределено Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из МОТП.';
									|en = 'Не удалось получить данные из МОТП.'");
		
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодамМОТП.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Требуется обновление ключа сессии.';
									|en = 'Требуется обновление ключа сессии.'");
		
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоШтрихкодамМОТП.ТекстОшибки) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = ДанныеПоШтрихкодамМОТП.ТекстОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	СтатусыКодовМаркировки = ДанныеПоШтрихкодамМОТП.СтатусыКодовМаркировки;
	
	МассивИНН = Новый Массив;
	Для Каждого КлючЗначение Из СтатусыКодовМаркировки Цикл
	
		Если ЗначениеЗаполнено(КлючЗначение.Значение.ИННВладельца) Тогда
			МассивИНН.Добавить(КлючЗначение.Значение.ИННВладельца);
		КонецЕсли;
	
	КонецЦикла;
	
	КонтрагентыПоИНН      = КонтрагентыПоКоллекцииИНН(МассивИНН);
	ПредставленияСтатусов = ПредставленияСтатусов();
	
	Для Каждого КлючЗначение Из СтатусыКодовМаркировки Цикл
	
		Контрагент = КонтрагентыПоИНН.Получить(КлючЗначение.Значение.ИННВладельца);
		КлючЗначение.Значение.Вставить("Контрагент", Контрагент);
		
		ПредставлениеСтатуса = ПредставленияСтатусов.Получить(КлючЗначение.Значение.Статус);
		КлючЗначение.Значение.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
		
	КонецЦикла;
	
	Результат.СпецификаШтрихкодов = СтатусыКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

// Получает контрагентов по коллекции ИНН.
// 
// Параметры:
// 	КоллекцияИНН - Массив - список ИНН контрагентов
// Возвращаемое значение:
// 	Соответствие:
//		Ключ     - Строка                       - ИНН контрагента
//		Значение - СправочникСсылка.Контрагенты - элемент справочника
Функция КонтрагентыПоКоллекцииИНН(КоллекцияИНН)
	
	СоответствиеИННКонтрагентам = Новый Соответствие;
	ШтрихкодированиеИСПереопределяемый.ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, СоответствиеИННКонтрагентам);
	
	Возврат СоответствиеИННКонтрагентам;
	
КонецФункции

Функция КонтрагентПоИНН(ИНН)
	
	МассивИНН = Новый Массив;
	МассивИНН.Добавить(ИНН);
	КонтрагентыПоИНН = КонтрагентыПоКоллекцииИНН(МассивИНН);
	
	Возврат КонтрагентыПоИНН.Получить(ИНН);
	
КонецФункции

Процедура УдалитьСтрокиДереваУпаковокПоДетализации(ДеревоУпаковок, МассивУдаляемыхСтрок, МаркированныеТовары)
	
	Если МассивУдаляемыхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковокПриемник = Новый ДеревоЗначений;
	Для Каждого Колонка ИЗ ДеревоУпаковок.Колонки Цикл
		ДеревоУпаковокПриемник.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	МаркированныеТоварыПриемник = МаркированныеТовары.СкопироватьКолонки();
	СоответствиеСтрокИсточникаПриемника = Новый Соответствие;
	СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
		ДеревоУпаковокПриемник.Строки, ДеревоУпаковок.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, Неопределено);
	
	Для Каждого Строка Из МаркированныеТовары Цикл
		
		СсылкаНаСтрокуДерева = СоответствиеСтрокИсточникаПриемника.Получить(Строка.СтрокаДерева);
		Если СсылкаНаСтрокуДерева <> Неопределено Тогда
			НоваяСтрокаПриемник = МаркированныеТоварыПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, Строка);
			НоваяСтрокаПриемник.СтрокаДерева = СсылкаНаСтрокуДерева;
			НоваяСтрокаПриемник.УпаковкаВерхнегоУровня = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоУпаковок      = ДеревоУпаковокПриемник;
	МаркированныеТовары = МаркированныеТоварыПриемник;
	
КонецПроцедуры

Процедура СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(СтрокиПриемника, СтрокиИсточника, МассивУдаляемыхСтрок, 
														СоответствиеСтрокИсточникаПриемника, ВерхнийУровень)
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		Если МассивУдаляемыхСтрок.Найти(СтрокаИсточника) = Неопределено Тогда
			СтрокаПриемника = СтрокиПриемника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			СоответствиеСтрокИсточникаПриемника.Вставить(СтрокаИсточника, СтрокаПриемника);
			
			Если Не ЗначениеЗаполнено(ВерхнийУровень) Тогда
				ВерхнийУровень = СтрокаИсточника;
			КонецЕсли;
			
			СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
				СтрокаПриемника.Строки, СтрокаИсточника.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, ВерхнийУровень);
				
		Иначе
			
			СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
				СтрокиПриемника, СтрокаИсточника.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, ВерхнийУровень);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьУдаляемыеСтрокиДереваПоДетализации(СтрокиДерева, ПравилоДетализации, МассивУдаляемыхСтрок)
	
	ТекущийУровень = Неопределено;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ЗначениеЗаполнено(ТекущийУровень) Тогда
			
			Если ЭтоКодМаркировкиТабачнойПачки(СтрокаДерева.ЗначениеШтрихкода) Тогда
				ТекущийУровень = "Пачки";
			ИначеЕсли ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(СтрокаДерева.ЗначениеШтрихкода) Тогда
				ТекущийУровень = "Блоки";
			Иначе
				ТекущийУровень = "Коробки";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийУровень = "Коробки" Тогда
			
			Если ПравилоДетализации.РазрешеныКоробки И Не ПравилоДетализации.РазрешеныБлоки Тогда
				СтрокаДерева.Строки.Очистить();
				Продолжить;
			ИначеЕсли Не ПравилоДетализации.РазрешеныКоробки Тогда 
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийУровень = "Блоки" Тогда
			Если ПравилоДетализации.РазрешеныБлоки И Не ПравилоДетализации.РазрешеныПачки Тогда
				СтрокаДерева.Строки.Очистить();
				Продолжить;
			ИначеЕсли Не ПравилоДетализации.РазрешеныБлоки Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
		ОпределитьУдаляемыеСтрокиДереваПоДетализации(СтрокаДерева.Строки, ПравилоДетализации, МассивУдаляемыхСтрок);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПравилаДетализацииДереваУпаковок()
	
	ПравилаДетализации = Новый Соответствие;
	
	ДетализацияБлокиСПачками = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	ДетализацияКоробки       = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Коробки;
	ДетализацияКоробкиИБлоки = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
	ДетализацияПолная        = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
	ДетализацияПачки         = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	
	ПравилаДетализации.Вставить(ДетализацияПолная,        СвойствоПравилаДетализации(Истина, Истина, Истина));
	ПравилаДетализации.Вставить(ДетализацияКоробки,       СвойствоПравилаДетализации(Истина, Ложь,   Ложь));
	ПравилаДетализации.Вставить(ДетализацияКоробкиИБлоки, СвойствоПравилаДетализации(Истина, Истина, Ложь));
	ПравилаДетализации.Вставить(ДетализацияБлокиСПачками, СвойствоПравилаДетализации(Ложь,   Истина, Истина));
	ПравилаДетализации.Вставить(ДетализацияПачки,         СвойствоПравилаДетализации(Ложь,   Ложь,   Истина));
	
	Возврат ПравилаДетализации;
	
КонецФункции

Функция СвойствоПравилаДетализации(РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки)
	
	Возврат Новый Структура("РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки",
							РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки);
	
КонецФункции

Функция ВложенныеШтрихкодыПоДаннымМОТП(КодыМаркировок, ПараметрыСканирования) Экспорт
	
	Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу();
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
	
	Детализация = ПараметрыСканирования.Детализация;
	
	ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
	ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
	
	Если ЗначениеЗаполнено(ПравилоДетализации) И ПравилоДетализации.РазрешеныПачки Тогда
		Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
	КонецЕсли;
	
	РезультатПолученияДерева = ИнтерфейсМОТП.ДеревоУпаковок(КодыМаркировок, Детализация);
	Если РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Требуется обновление ключа сессии.';
									|en = 'Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПолученияДерева.ТекстОшибки) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = РезультатПолученияДерева.ТекстОшибки;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаEAN = РезультатПолученияДерева.GTIN;
	ТаблицаEAN.Свернуть("GTIN");
	ВложенныеШтрихкоды.ДеревоУпаковок = РезультатПолученияДерева.ДеревоУпаковок;
	
	ЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования);
	
	Результат.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	ДанныеПоEAN         = ДанныеПоEAN(ТаблицаEAN, ПараметрыСканирования);
	
	Если ДанныеПоEAN.ШтрихкодыПродукцииДляСопоставления <> Неопределено Тогда
		ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления = ДанныеПоEAN.ШтрихкодыПродукцииДляСопоставления;
		Возврат;
	КонецЕсли;
	
	ИнформацияПоEAN  = ДанныеПоEAN.ИнформацияПоEAN;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ИнформацияПоEAN",        ИнформацияПоEAN);
	ДанныеЗаполнения.Вставить("УпаковкаВерхнегоУровня", Неопределено);
	ДанныеЗаполнения.Вставить("Контрагенты",            Новый Соответствие);
	ДанныеЗаполнения.Вставить("ПредставленияСтатусов",  ПредставленияСтатусов());
	
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, Неопределено, ДанныеЗаполнения);
	СоздатьДеревоУпаковокПоПолученнымДаннымИзМОТП(ДеревоУпаковок, ПараметрыСканирования);
	НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары);
	
КонецПроцедуры

Процедура СоздатьДеревоУпаковокПоПолученнымДаннымИзМОТП(ДеревоУпаковок, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.ЗаписыватьНеизвестныеШтрихкодыУпаковок Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
			Или СтрокаДерева.КоличествоПачек = 0 Тогда
				
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	ДеревоУпаковок.Колонки.Добавить("СтатусПроверки");
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхПачек");
	
	ТаблицаШтрихкодовВерхнегоУровня = Новый ТаблицаЗначений;
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("ШтрихкодУпаковки");
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("ЗначениеШтрихкода");
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(
			ДеревоУпаковок, ТаблицаШтрихкодовВерхнегоУровня);
		ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.';
											|en = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьУпаковкуВерхнегоУровняДерева(СтрокаДерева, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеПоEAN(ТаблицаEAN, ПараметрыСканирования)
	
	МассивEAN = ТаблицаEAN.ВыгрузитьКолонку("GTIN");
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(МассивEAN);
	
	ИнформацияПоКоллекцииEAN = Новый Структура;
	ИнформацияПоEAN          = Новый Соответствие;
	ИнформацияПоКоллекцииEAN.Вставить("ИнформацияПоEAN", ИнформацияПоEAN);
	ИнформацияПоКоллекцииEAN.Вставить("ШтрихкодыПродукцииДляСопоставления");
	
	МассивИзвестныхEAN   = ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ЗначениеШтрихкодаEAN");
	МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивEAN, МассивИзвестныхEAN);
	
	Для Каждого Строка Из ДанныеПоШтрихкодамEAN Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		ИнформацияПоEAN.Вставить(Строка.ЗначениеШтрихкодаEAN, ДанныеШтрихкода);
		
	КонецЦикла;
	
	Если МассивНеизвестныхEAN.Количество() = 0 Тогда
		Возврат ИнформацияПоКоллекцииEAN;
	КонецЕсли;
	
	Если ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
		ИнформацияПоКоллекцииEAN.ШтрихкодыПродукцииДляСопоставления = МассивНеизвестныхEAN;
	Иначе
		ИнформацияНеизвестныхEANПоДаннымМОТП = ИнформацияНеизвестныхEANПоДаннымМОТП(МассивНеизвестныхEAN);
		
		Для Каждого КлючЗначение Из ИнформацияНеизвестныхEANПоДаннымМОТП Цикл
			
			ИнформацияПоШтрихкоду = Новый Структура("Номенклатура, ПредставлениеНоменклатуры");
			Если КлючЗначение.Значение = Неопределено Тогда
				ИнформацияПоШтрихкоду.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>';
																		|en = '<Не загружено>'");
			Иначе
				ИнформацияПоШтрихкоду.ПредставлениеНоменклатуры = КлючЗначение.Значение.Наименование;
			КонецЕсли;
			
			ИнформацияПоEAN.Вставить(КлючЗначение.Ключ, ИнформацияПоШтрихкоду);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИнформацияПоКоллекцииEAN;
	
КонецФункции

Функция ПредставленияСтатусов()
	
	ПредставленияСтатусов = Новый Соответствие();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыКодовМаркировкиМОТП.Ссылка                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировкиМОТП.Ссылка) КАК ПредставлениеСтатуса
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиМОТП КАК СтатусыКодовМаркировкиМОТП");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставленияСтатусов.Вставить(Выборка.Статус, Выборка.ПредставлениеСтатуса);
	КонецЦикла;
	
	Возврат ПредставленияСтатусов;
	
КонецФункции

Функция ИнформацияНеизвестныхEANПоДаннымМОТП(ШтрихкодыEANДляСопоставления)
	
	ИнформацияНеизвестныхEAN = Новый Соответствие;
	Если ШтрихкодыEANДляСопоставления.Количество() = 0 Тогда
		Возврат ИнформацияНеизвестныхEAN;
	КонецЕсли;
	
	ДанныеМОТП = ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN(ШтрихкодыEANДляСопоставления);
	
	Если ДанныеМОТП.ТребуетсяОбновлениеКлючаСессии Тогда
		ВызватьИсключение НСтр("ru = 'Требуется обновление ключа сессии.';
								|en = 'Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеМОТП.ТекстОшибки) Тогда
		ВызватьИсключение ДанныеМОТП.ТекстОшибки;
	КонецЕсли;
	
	Возврат ДанныеМОТП.ДанныеПродукцииПоШтрихкодуEAN;
	
КонецФункции

//Проверяет необходимость авторизации пользователя на сервере МОТП.
// 
// Параметры:
// 	ПараметрыСканирования - Структура - См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования.
// Возвращаемое значение:
// 	Булево.
Функция ТребуетсяАвторизацияПользователя(ПараметрыСканирования)
	
	ТребуетсяАвторизация = Ложь;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыМОТП
		Или ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхШтрихкодовМОТП Тогда
		
		Организация = ПараметрыСканирования.Организация;
		Если ИнтерфейсМОТПВызовСервера.ТребуетсяОбновлениеКлючаСессии(Организация) Тогда
			ТребуетсяАвторизация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяАвторизация;
	
КонецФункции

#Область ПроверкаНаОшибки

Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
	
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	
		ПроверитьНаОшибкиСтрокиДерева(ДеревоУпаковок.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками Цикл
				СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1';
															|en = 'Статус: %1'"), СтрокаДерева.ПредставлениеСтатуса);
				СтрокаДерева.ЕстьОшибки  = Истина;
			КонецЦикла;
			
		ИначеЕсли ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда 
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'ИНН владельца: %1';
															|en = 'ИНН владельца: %1'"), СтрокаДерева.ИННВладельца);
				СтрокаДерева.ЕстьОшибки  = Истина;
			КонецЦикла;
			
		ИначеЕсли ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхБлоков")
			И ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков Цикл
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Пустая упаковка';
												|en = 'Пустая упаковка'");
				СтрокаДерева.ЕстьОшибки  = Истина;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ПроверитьНаОшибкиОбработанныеШтрихкоды(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ПравилаПроверкиНаОшибки, 
			ПараметрыСканирования, ЕстьОшибки);
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Количество() > 0 Тогда
			
			Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками Цикл
				КлючЗначение.Значение.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1';
																	|en = 'Статус: %1'"), КлючЗначение.Значение.ПредставлениеСтатуса);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
			
			Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				КлючЗначение.Значение.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не соответствует владельцу. ИНН владельца: %1';
																	|en = 'Не соответствует владельцу. ИНН владельца: %1'"),
					КлючЗначение.Значение.ИННВладельца);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий")
			И ПравилаПроверкиНаОшибки.КонтрольСерий.Количество() > 0 Тогда
			
			Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольСерий Цикл
				КлючЗначение.Значение.ТребуетсяВыборСерии = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования)
	
	ТребуетсяВыбор = Ложь;
	
	Если (ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		Или ДанныеШтрихкода.ГрупповаяТоварнаяУпаковка) И Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		
		ШтрихкодированиеИСПереопределяемый.ОпределитьНеобходимостьВыбораСерииДляДанныхШтрихкода(ДанныеШтрихкода, ПараметрыСканирования, ТребуетсяВыбор);
		
	КонецЕсли;
	
	Возврат ТребуетсяВыбор;
	
КонецФункции

Процедура ПроверитьНаОшибкиОбработанныеШтрихкоды(ОбработанныеШтрихкоды, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			
			Если КлючЗначение.Значение.ИННВладельца <> ПараметрыСканирования.ИННВладельца Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(КлючЗначение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			ДопустимыеСтатусыМОТП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыМОТП;
			Если ДопустимыеСтатусыМОТП.Найти(КлючЗначение.Значение.Статус) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Добавить(КлючЗначение);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда

			Если ТребуетсяВыборСерии(КлючЗначение.Значение, ПараметрыСканирования) Тогда
				
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(КлючЗначение);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаОшибкиСтрокиДерева(СтрокиДерева, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхБлоков") Тогда
			
			Если ШтрихкодированиеИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) И СтрокаДерева.Строки.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			ДопустимыеСтатусыМОТП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыМОТП;
			Если ДопустимыеСтатусыМОТП.Найти(СтрокаДерева.Статус) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Добавить(СтрокаДерева);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			Если СтрокаДерева.ИННВладельца <> ПараметрыСканирования.ИННВладельца Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
		ПроверитьНаОшибкиСтрокиДерева(СтрокаДерева.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтатусыВСтрокаДерева(СтрокиДерева, ДопустимыеСтатусыМОТП, ЕстьОшибки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ДопустимыеСтатусыМОТП.Найти(СтрокаДерева.Статус) = Неопределено Тогда
			СтрокаДерева.ЕстьОшибки  = Истина;
			ЕстьОшибки               = Истина;
			СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1';
														|en = 'Статус: %1'"), СтрокаДерева.ПредставлениеСтатуса);
			ПроверитьСтатусыВСтрокаДерева(СтрокаДерева.Строки, ДопустимыеСтатусыМОТП, ЕстьОшибки);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнениеДанныхШтрихкодовСпецификой

Процедура НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция)
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
		КоллекцияОбязательныхКолонок.Вставить("КоличествоБлоков", Новый ОписаниеТипов("Число"));
		КоллекцияОбязательныхКолонок.Вставить("МРЦ",              Новый ОписаниеТипов("Число"));
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда 
		
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
		
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("ИННВладельца",              Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Контрагент",                Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ГрупповаяТоварнаяУпаковка", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("GTIN",                      Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Статус",                    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеСтатуса",      Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПачек",           Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючЗначение Из КоллекцияОбязательныхКолонок Цикл
		
		Если Коллекция.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Коллекция.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСпецификойОбработанныеШтрихкоды(ДанныеПоШтрихкодам, СпецификаШтрихкодов, ДеревоУпаковок)
	
	Если Не ДанныеПоШтрихкодам.Свойство("ОбработанныеШтрихкоды") Или СпецификаШтрихкодов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеШтрихкоды = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды;
	
	Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл
	
		ДополнитьСвойстваКоллекцииДанныеШтрихкода(КлючЗначение.Значение);
		
		Если КлючЗначение.Значение.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			КлючЗначение.Значение.КоличествоПачек           = 1;
			КлючЗначение.Значение.КоличествоБлоков          = 0;
			КлючЗначение.Значение.ГрупповаяТоварнаяУпаковка = Ложь;
		КонецЕсли;
		
		Если ДеревоУпаковок <> Неопределено Тогда
			НайденнаяСтрока = ДеревоУпаковок.Строки.Найти(КлючЗначение.Ключ, "ЗначениеШтрихкода");
			Если НайденнаяСтрока <> Неопределено Тогда
				КлючЗначение.Значение.КоличествоПачек           = НайденнаяСтрока.КоличествоПачек;
				КлючЗначение.Значение.КоличествоБлоков          = НайденнаяСтрока.КоличествоБлоков;
				КлючЗначение.Значение.ГрупповаяТоварнаяУпаковка = НайденнаяСтрока.ГрупповаяТоварнаяУпаковка;
			КонецЕсли;
		КонецЕсли;
		
		СпецификаШтрихкода = СпецификаШтрихкодов.Получить(КлючЗначение.Ключ);
		Если СпецификаШтрихкода <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(КлючЗначение.Значение, СпецификаШтрихкода);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#Область НормализацияДанныхВложенныхШтрихкодов

Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, СпецификаШтрихкодов = Неопределено)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, СпецификаШтрихкодов);
	НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары);
	
КонецПроцедуры

Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары)
	
	МаркированныеТовары.Очистить();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
	ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено)
	
	МаркированныйТовар = Перечисления.ТипыУпаковок.МаркированныйТовар;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева;
		КонецЕсли;
		
		Если СтрокаДерева.ГрупповаяТоварнаяУпаковка Или СтрокаДерева.ТипУпаковки = МаркированныйТовар Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева           = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокаДерева.Строки, МаркированныеТовары);
		
	КонецЦикла;
	
КонецПроцедуры

#Область НормализацияДанныхДереваУпаковок

Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, СпецификаШтрихкодов = Неопределено, ДанныеЗаполнения = Неопределено)
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	ЗаполнитьСтрокиДерева(ДеревоУпаковок.Строки, ПараметрыСканирования, СпецификаШтрихкодов, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДерева(СтрокиДерева, ПараметрыСканирования, СпецификаШтрихкодов = Неопределено,
	ДанныеЗаполнения = Неопределено, УпаковкаВерхнегоУровня = Неопределено)
	
	ПервыйОбходСтрокУровня = Истина;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьСтрокиДерева(СтрокаДерева.Строки, ПараметрыСканирования, СпецификаШтрихкодов, ДанныеЗаполнения, УпаковкаВерхнегоУровня);
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева);
		ЗаполнитьСтрокуДереваПоДаннымЗаполнения(СтрокаДерева, ДанныеЗаполнения);
		ЗаполнитьХарактеристикиУпаковкиСтрокиДерева(СтрокаДерева, ПервыйОбходСтрокУровня);
		ЗаполнитьСпецификуСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов);
		ЗаполнитьМРЦСтрокиДерева(СтрокаДерева, ПараметрыСканирования);
		ЗаполнитьGTINСтрокиДерева(СтрокаДерева);
		ПервыйОбходСтрокУровня = Ложь;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьGTINСтрокиДерева(СтрокаДерева)
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
		СтрокаДерева.GTIN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(СтрокаДерева.ЗначениеШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМРЦСтрокиДерева(СтрокаДерева, ПараметрыСканирования)
	
	Если ЗначениеЗаполнено(СтрокаДерева.МРЦ) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		МРЦПачки = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиТабачнойПачки(СтрокаДерева.ЗначениеШтрихкода);
		
		Если МРЦПачки = Неопределено Тогда
			
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				
				Если СтрокаДерева.Родитель.МРЦ <> 0 Тогда
					
					СтрокаДерева.МРЦ = СтрокаДерева.Родитель.МРЦ;
					
				Иначе
					
					МРЦБлока = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиБлока(СтрокаДерева.Родитель.ЗначениеШтрихкода);
					
					Если МРЦБлока <> Неопределено Тогда
						
						СтрокаДерева.Родитель.МРЦ = МРЦБлока;
						СтрокаДерева.МРЦ          = МРЦБлока;
						
					Иначе
						
						МРЦПоДаннымМОТП = МРЦПоДаннымМОТП(СтрокаДерева.ЗначениеШтрихкода, ПараметрыСканирования); 
						
						СтрокаДерева.Родитель.МРЦ = МРЦПоДаннымМОТП;
						СтрокаДерева.МРЦ          = МРЦПоДаннымМОТП;
						
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				МРЦПоДаннымМОТП = МРЦПоДаннымМОТП(СтрокаДерева.ЗначениеШтрихкода, ПараметрыСканирования);
				СтрокаДерева.МРЦ          = МРЦПоДаннымМОТП;
				
			КонецЕсли;
		
		Иначе
			
			СтрокаДерева.МРЦ = МРЦПачки;
			
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				
				МРЦБлока = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиБлока(СтрокаДерева.Родитель.ЗначениеШтрихкода);
				
				Если МРЦБлока = Неопределено Тогда
					
					СтрокаДерева.Родитель.МРЦ = МРЦПачки;
					
				Иначе
					
					СтрокаДерева.Родитель.МРЦ = МРЦБлока;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПервыйОбход = Истина;
		Для Каждого СтрокаПотомок Из СтрокаДерева.Строки Цикл
			
			Если ПервыйОбход Тогда
				СтрокаДерева.МРЦ = СтрокаПотомок.МРЦ;
				ПервыйОбход = Ложь;
			Иначе
				
				Если СтрокаДерева.МРЦ <> СтрокаПотомок.МРЦ Тогда
					СтрокаДерева.МРЦ = 0;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция МРЦПоДаннымМОТП(КодМаркировки, ПараметрыСканирования)
	
	МРЦКодаМаркировки = 0;
	
	Если Не ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		Возврат МРЦКодаМаркировки;
	КонецЕсли;
	
	Результат = ИнтерфейсМОТП.ЗапроситьМРЦДляКодаМаркировки(КодМаркировки);
	Если ПустаяСтрока(Результат.ТекстОшибки) Тогда
		МРЦКодаМаркировки = Результат.ДанныеПродукции.МРЦ;
	КонецЕсли;
	
	Возврат МРЦКодаМаркировки;
	
КонецФункции

Процедура ЗаполнитьСтрокуДереваПоДаннымЗаполнения(СтрокаДерева, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияПоКоллекцииEAN  = ДанныеЗаполнения.ИнформацияПоEAN;
	Контрагенты               = ДанныеЗаполнения.Контрагенты;
	ПредставленияСтатусов     = ДанныеЗаполнения.ПредставленияСтатусов;
	
	Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
		
		ИнформацияПоEAN = ИнформацияПоКоллекцииEAN[СтрокаДерева.GTIN];
		Если ИнформацияПоEAN <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ИнформацияПоEAN);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева.ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДерева.Статус);
	
	Контрагент = Контрагенты.Получить(СтрокаДерева.ИННВладельца);
	Если Контрагент = Неопределено Тогда
		Контрагент = КонтрагентПоИНН(СтрокаДерева.ИННВладельца);
		ДанныеЗаполнения.Контрагенты.Вставить(СтрокаДерева.ИННВладельца, Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСпецификуСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов)
	
	Если СпецификаШтрихкодов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпецификаШтрихкода = СпецификаШтрихкодов.Получить(СтрокаДерева.ЗначениеШтрихкода);
	
	Если СпецификаШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.ИННВладельца         = СпецификаШтрихкода.ИННВладельца;
	СтрокаДерева.Контрагент           = СпецификаШтрихкода.Контрагент;
	СтрокаДерева.Статус               = СпецификаШтрихкода.Статус;
	СтрокаДерева.ПредставлениеСтатуса = Строка(СпецификаШтрихкода.Статус);
	
	ЗаполнитьСпецификойРодителяСтрокиДерева(СтрокаДерева);
	ЗаполнитьСпецификойПотомковСтрокиДерева(СтрокаДерева);
	
КонецПроцедуры

Процедура ЗаполнитьСпецификойПотомковСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПотомок Из СтрокаДерева.Строки Цикл
		
		Если СтрокаПотомок.Контрагент = СтрокаДерева.Контрагент
			И СтрокаДерева.Статус = СтрокаДерева.Статус Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПотомок.ИННВладельца         = СтрокаДерева.ИННВладельца;
		СтрокаПотомок.Контрагент           = СтрокаДерева.Контрагент;
		СтрокаПотомок.Статус               = СтрокаДерева.Статус;
		СтрокаПотомок.ПредставлениеСтатуса = СтрокаДерева.ПредставлениеСтатуса;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСпецификойРодителяСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель.Контрагент = СтрокаДерева.Контрагент
		И СтрокаДерева.Родитель.Статус    = СтрокаДерева.Статус Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.Родитель.ИННВладельца         = СтрокаДерева.ИННВладельца;
	СтрокаДерева.Родитель.Контрагент           = СтрокаДерева.Контрагент;
	СтрокаДерева.Родитель.Статус               = СтрокаДерева.Статус;
	СтрокаДерева.Родитель.ПредставлениеСтатуса = СтрокаДерева.ПредставлениеСтатуса;
	
	ЗаполнитьСпецификойРодителяСтрокиДерева(СтрокаДерева.Родитель);
	
КонецПроцедуры

Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		СтрокаДерева.КоличествоПачек = 1;
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
			И ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(СтрокаДерева.ЗначениеШтрихкода) = Истина Тогда
		СтрокаДерева.ГрупповаяТоварнаяУпаковка = Истина;
		СтрокаДерева.КоличествоБлоков = 1;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		СтрокаДерева.Родитель.КоличествоПачек = СтрокаДерева.Родитель.КоличествоПачек
			+ СтрокаДерева.КоличествоПачек;
		
		СтрокаДерева.Родитель.КоличествоБлоков = СтрокаДерева.Родитель.КоличествоБлоков
			+ СтрокаДерева.КоличествоБлоков;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьХарактеристикиУпаковкиСтрокиДерева(СтрокаДерева, ПервыйОбходСтрокУровня)
	
	СтрокаДерева.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.GS1_128;
	СтрокаДерева.ВидПродукции              = Перечисления.ВидыПродукцииИС.Табачная;
	СтрокаДерева.ГрупповаяТоварнаяУпаковка = Ложь;
	СтрокаДерева.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.DataMatrix;
	
	ЭтоЛогистическаяУпаковка = Истина;
	
	Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	Если ЭтоКодМаркировкиТабачнойПачки(СтрокаДерева.ЗначениеШтрихкода) Тогда
		
		СтрокаДерева.ТипУпаковки  = Перечисления.ТипыУпаковок.МаркированныйТовар;
		СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
		ЭтоЛогистическаяУпаковка  = Ложь;
		ШтрихкодированиеИСПереопределяемый.ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева);
		
	ИначеЕсли ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(СтрокаДерева.ЗначениеШтрихкода) Тогда
		
		СтрокаДерева.ГрупповаяТоварнаяУпаковка = Истина;
		СтрокаДерева.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.DataMatrix;
		ЭтоЛогистическаяУпаковка               = Ложь;
		
	КонецЕсли;
	
	Родитель = СтрокаДерева.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Родитель.ТипУпаковки) Тогда
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	Если ПервыйОбходСтрокУровня И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.GTIN           = СтрокаДерева.GTIN;
		Родитель.Номенклатура   = СтрокаДерева.Номенклатура;
		Родитель.Характеристика = СтрокаДерева.Характеристика;
		Родитель.Серия          = СтрокаДерева.Серия;
		
		Возврат;
		
	КонецЕсли;
	
	Если Родитель.GTIN <> СтрокаДерева.GTIN 
		И Родитель.Номенклатура <> СтрокаДерева.Номенклатура
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Номенклатура = Неопределено;
		Родитель.GTIN         = Неопределено;
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		
	КонецЕсли;
	
	Если Родитель.Характеристика <> СтрокаДерева.Характеристика
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Характеристика = Неопределено;
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		
	КонецЕсли;
	
	Если Родитель.Серия <> СтрокаДерева.Серия
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Серия = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ИнициализироватьДанныеКодаМаркировки()
	
	ДанныеШтрихкода = ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода();
	ДополнитьСвойстваКоллекцииДанныеШтрихкода(ДанныеШтрихкода);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

Функция ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

Функция ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(Штрихкоды)
	
	ОбработанныеШтрихкоды       = Новый Соответствие;
	МассивEANДляПолученияДанных = Новый Массив;
	СоответствиеШтрихкодов      = Новый Соответствие;
	
	Для Каждого ЗначениеШтрихкода Из Штрихкоды Цикл
		
		ЗначениеEAN = "";
		
		Если Не ЭтоКодМаркировкиТабачнойПачки(ЗначениеШтрихкода, ЗначениеEAN) Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеШтрихкодов.Вставить(ЗначениеШтрихкода, ЗначениеEAN);
		МассивEANДляПолученияДанных.Добавить(ЗначениеEAN);
		
	КонецЦикла;
	
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(МассивEANДляПолученияДанных);
	
	Для Каждого КлючЗначение Из СоответствиеШтрихкодов Цикл
		
		НайденнаяСтрока = ДанныеПоШтрихкодамEAN.Найти(КлючЗначение.Значение, "ЗначениеШтрихкодаEAN");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДанныеКодаМаркировки = ИнициализироватьДанныеКодаМаркировки();
			ДанныеКодаМаркировки.Номенклатура              = НайденнаяСтрока.Номенклатура;
			ДанныеКодаМаркировки.Характеристика            = НайденнаяСтрока.Характеристика;
			ДанныеКодаМаркировки.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
			ДанныеКодаМаркировки.МаркируемаяПродукция      = Истина;
			ДанныеКодаМаркировки.ТипУпаковки               = Перечисления.ТипыУпаковок.МаркированныйТовар;
			ДанныеКодаМаркировки.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.DataMatrix;
			ДанныеКодаМаркировки.Штрихкод                  = КлючЗначение.Ключ;
			ДанныеКодаМаркировки.КоличествоПачек           = 1;
			ДанныеКодаМаркировки.КоличествоБлоков          = 0;
			ДанныеКодаМаркировки.ШтрихкодУпаковки          = СоздатьШтрихкодУпаковкиПоДаннымКодаМаркировки(ДанныеКодаМаркировки);
			
			ОбработанныеШтрихкоды.Вставить(КлючЗначение.Ключ, ДанныеКодаМаркировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработанныеШтрихкоды;
	
КонецФункции

Функция СоздатьШтрихкодУпаковкиПоДаннымКодаМаркировки(ДанныеКодаМаркировки)
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеКодаМаркировки);
	
	ДанныеНовойУпаковки.ЗначениеШтрихкода = ДанныеКодаМаркировки.Штрихкод;
	ДанныеНовойУпаковки.ТипУпаковки       = Перечисления.ТипыУпаковок.МаркированныйТовар;
	ДанныеНовойУпаковки.Количество        = 1;
	
	СсылкаНаСозданныйЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
	
	Возврат СсылкаНаСозданныйЭлемент;
	
КонецФункции

Функция ТипШтрихкода(ЗначениеШтрихкода) Экспорт
	
	Если ЭтоКодМаркировкиТабачнойПачки(ЗначениеШтрихкода) 
		Или ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(ЗначениеШтрихкода) Тогда
		Возврат Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе
		Возврат Перечисления.ТипыШтрихкодов.GS1_128;
	КонецЕсли;
	
КонецФункции

// Формирует вложенные штрихкоды путем получения базовых коллекций "ДеревоУпаковок" и "МаркированныеТовары" и дополнения
// их колонками специфичными для табачной продукции.
// 
// Параметры:
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов)
//   и (См. ШтрихкодированиеМОТП.НормализоватьСвойстваКоллекцииВложенныхШтрихкодов).
Функция ИнициализацияВложенныхШтрихкодов()
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок);
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.МаркированныеТовары);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Инициаилизирует структуру, описывающую результат получения вложенных штрихкродов по данным МОТП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Ошибка, возникшая в результате запроса данных из МОТП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка.
// * ВложенныеШтрихкоды - См. ШтрихкодированиеМОТП.ИнициализацияВложенныхШтрихкодов.
Функция ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВложенныеШтрихкоды", Неопределено);
	Результат.Вставить("ЕстьОшибки",         Ложь);
	Результат.Вставить("ТекстОшибки",        "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
