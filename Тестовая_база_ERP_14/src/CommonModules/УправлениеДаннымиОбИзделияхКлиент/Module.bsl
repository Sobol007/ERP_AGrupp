////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Открывает форму выбора спецификаций по номенклатуре
//
// Параметры:
//  Номенклатура				 - СправочникСсылка.Номенклатура - номенклатура
//  Характеристика				 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры
//  НачалоПроизводства			 - Дата											 - дата начала производства, на эту дату спецификация должна быть действующей
//  Подразделение				 - СправочникСсылка.СтруктураПредприятия		 - подразделение, за которым закреплено производство
//  ПараметрыВыбораСпецификаций	 - Структура									 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций()
//  Владелец					 - УправляемаяФорма								 - владелец формы.
//
Процедура ОткрытьФормуВыбораСпецификацийПоНоменклатуре(Номенклатура, Характеристика, НачалоПроизводства = '00010101', Подразделение = Неопределено, ПараметрыВыбораСпецификаций = Неопределено, Владелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Номенклатура", Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	
	ПараметрыФормы.Вставить("НачалоПроизводства", НачалоПроизводства);
	ПараметрыФормы.Вставить("Подразделение", ?(Подразделение <> Подразделение, Подразделение, ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка")));
	
	Если ПараметрыВыбораСпецификаций <> Неопределено Тогда
		ИсточникПараметров = ПараметрыВыбораСпецификаций;
	Иначе
		ИсточникПараметров = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	КонецЕсли;
	Для каждого Элемент Из ИсточникПараметров Цикл
		Если Элемент.Ключ <> "ПолучитьСпецификацииПоНоменклатуре"
			И Элемент.Ключ <> "ПолучитьСпецификацииПоСпискуНоменклатуры" Тогда
			ПараметрыФормы.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("ПолучитьСпецификацииПоНоменклатуре", Истина);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Открывает форму выбора спецификаций по номенклатуре
//
// Параметры:
//  СписокИзделий				 - ТаблицаЗначений	 - список номенклатуры, содержит колонки "Номенклатура, Характеристика, НачалоПроизводства, Подразделение"
//  ПараметрыВыбораСпецификаций	 - Структура		 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций()
//  Владелец					 - УправляемаяФорма	 - владелец формы.
//
Процедура ОткрытьФормуВыбораСпецификацийПоСпискуНоменклатуры(СписокИзделий, ПараметрыВыбораСпецификаций = Неопределено, Владелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СписокИзделий", СписокИзделий);
	
	Если ПараметрыВыбораСпецификаций <> Неопределено Тогда
		ИсточникПараметров = ПараметрыВыбораСпецификаций;
	Иначе
		ИсточникПараметров = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	КонецЕсли;
	Для каждого Элемент Из ИсточникПараметров Цикл
		Если Элемент.Ключ <> "ПолучитьСпецификацииПоНоменклатуре"
			И Элемент.Ключ <> "ПолучитьСпецификацииПоСпискуНоменклатуры" Тогда
			ПараметрыФормы.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("ПолучитьСпецификацииПоСпискуНоменклатуры", Истина);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Копирует спецификацию и этапы
//
// Параметры:
//  Источник							- СправочникСсылка.РесурсныеСпецификации - спецификация, которую нужно скопировать
//  ОписаниеОбработкиПослеКопирования	- ОписаниеОповещения - содержит описание процедуры, которую нужно вызвать после копирования.
//
Процедура КопироватьРесурснуюСпецификацию(Источник, ОписаниеОбработкиПослеКопирования = Неопределено) Экспорт

	ТекстВопроса = НСтр("ru = 'Будет создана и записана копия ресурсной спецификации (включая этапы производственного процесса).
								|Скопировать?';
								|en = 'BOR copy will be created and written (including manufacturing process stages).
								|Copy?'");
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Скопировать';
														|en = 'Copy'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура("Источник,ОписаниеОбработкиПослеКопирования", Источник, ОписаниеОбработкиПослеКопирования);
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьРесурснуюСпецификациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

// Открывает форму основных спецификаций для указанного изделия.
//
// Параметры:
//  Номенклатура 				- СправочникСсылка.Номенклатура - производимое изделие.
//  ПараметрыВыполненияКоманды	- ПараметрыВыполненияКоманды - описывает структуру, передаваемую в обработчик команды.
//
Процедура ПоказатьОсновныеСпецификацииИзделия(Номенклатура, Спецификация = Неопределено, ПараметрыВыполненияКоманды = Неопределено) Экспорт

	СтруктураБыстрогоОтбора = Новый Структура("Номенклатура", Номенклатура);
	ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора,ДляЗаданнойНоменклатуры", СтруктураБыстрогоОтбора, Истина);
	Если Спецификация <> Неопределено И НЕ Спецификация.Пустая() Тогда
		ПараметрыФормы.Вставить("ДляЗаданнойСпецификации", Спецификация);
	КонецЕсли;
	
	Если ПараметрыВыполненияКоманды = Неопределено Тогда
		ОткрытьФорму("РегистрСведений.ОсновныеСпецификации.ФормаСписка", ПараметрыФормы);
	Иначе
		ОткрытьФорму("РегистрСведений.ОсновныеСпецификации.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает новый статус для спецификаций
//
// Параметры:
//	НовыйСтатус				- ПеречислениеСсылка.СтатусыСпецификаций - новый статус
//	ПредставлениеСтатуса	- Строка - представление нового статуса
//  МассивСпецификаций		- Массив - список спецификаций.
//
Процедура УстановитьСтатусСпецификаций(НовыйСтатус, ПредставлениеСтатуса, МассивСпецификаций) Экспорт
	
	Если МассивСпецификаций.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      НовыйСтатус);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     МассивСпецификаций);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусСпецификацийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Выбранным спецификациям будет установлен статус ""%1"". Продолжить?';
						|en = 'Status ""%1"" will be set for the selected BOMs. Continue?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Назначает спецификацию основной для указанного изделия во всех подразделениях
//
// Параметры:
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - подразделение за которым закреплено обеспечение изделием
//  Номенклатура	- СправочникСсылка.Номенклатура - производимое изделие
//  Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика производимого изделия
//  Спецификация	- СправочникСсылка.РесурсныеСпецификации - основная спецификация.
//
// Возвращаемое значение:
//   Булево   - Истина, если спецификация назначена основной.
//
Функция НазначитьОсновнойСпецификациейДляВсехПодразделений(Номенклатура, Характеристика, Спецификация) Экспорт
	Перем СтруктураОшибки;
	
	СвойстваЗаписи = Новый Структура;
	
	СвойстваЗаписи.Вставить("Номенклатура",   Номенклатура);
	СвойстваЗаписи.Вставить("Характеристика", Характеристика);
	СвойстваЗаписи.Вставить("Спецификация",   Спецификация);
	
	СвойстваЗаписи.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	
	НавигационнаяСсылка = Неопределено;
	Результат = УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновнойСпецификацией(СвойстваЗаписи, НавигационнаяСсылка, СтруктураОшибки);
	
	Если Результат Тогда
		ОповеститьОЗаписиОсновнойСпецификации(СвойстваЗаписи, НавигационнаяСсылка);
	ИначеЕсли СтруктураОшибки.Свойство("ТекстОшибки") Тогда
		ПоказатьПредупреждение(,СтруктураОшибки.ТекстОшибки,, НСтр("ru = 'Не удалось назначить спецификацию основной';
																	|en = 'Cannot assign the bill of materials as the main one'"));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Формирует оповещение о записи основной спецификации
// Используется для обновления данных в формах и для информирования пользователя о завершенной операции.
//
// Параметры:
//  СвойстваЗаписи - Структура, РегистрСведенийМенеджерЗаписи - содержит значения свойств записи
//  НавигационнаяСсылка - Строка - навигационная ссылка на измененную запись.
//
Процедура ОповеститьОЗаписиОсновнойСпецификации(СвойстваЗаписи = Неопределено, НавигационнаяСсылка = Неопределено) Экспорт

	Если СвойстваЗаписи <> Неопределено Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Подразделение",  СвойстваЗаписи.Подразделение);
		СтруктураЗаписи.Вставить("Номенклатура",   СвойстваЗаписи.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика", СвойстваЗаписи.Характеристика);
		СтруктураЗаписи.Вставить("Спецификация",   СвойстваЗаписи.Спецификация);
	Иначе
		СтруктураЗаписи = Неопределено;
	КонецЕсли; 
	
	Оповестить("Запись_ОсновныеСпецификации", СтруктураЗаписи);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОсновныеСпецификации"));
	
	Если НавигационнаяСсылка <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменена основная спецификация';
											|en = 'Main BOM is changed'"), НавигационнаяСсылка);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

//++ НЕ УТКА

// Открывает форму для ввода параметров новой спецификации
//
// Параметры:
//	ТекущиеДанные		- ДанныеФормыСтруктура - содержит данные о продукции
//  						* Номенклатура		- СправочникСсылка.Номенклатура - производимое изделие
//  						* Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика производимого изделия
//  						* Спецификация		- СправочникСсылка.РесурсныеСпецификации - основная спецификация
//  ОписаниеОповещения	- ОписаниеОповещения - обработчик завершения ввода параметров, расположенный в контексте данных спецификации заказа.
//
Процедура СоздатьСпецификациюНаОснованииСпецификацииЗаказа(ТекущиеДанные, ОписаниеОповещения) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Спецификация", ТекущиеДанные.Спецификация);
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.СозданиеСпецификацииНаОснованииСпецификацииЗаказа", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА

#Область МаршрутныеКарты

// Формирует оповещение о записи основной маршрутной карты.
// Используется для обновления данных в формах и для информирования пользователя о завершенной операции.
//
// Параметры:
//  СвойстваЗаписи - Структура, РегистрСведенийМенеджерЗаписи - содержит значения свойств записи.
//  НавигационнаяСсылка - Строка - навигационная ссылка на измененную запись.
//
Процедура ОповеститьОЗаписиОсновнойМаршрутнойКарты(СвойстваЗаписи = Неопределено, НавигационнаяСсылка = Неопределено) Экспорт
	
	Если СвойстваЗаписи <> Неопределено Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Подразделение",   СвойстваЗаписи.Подразделение);
		СтруктураЗаписи.Вставить("Номенклатура",    СвойстваЗаписи.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика",  СвойстваЗаписи.Характеристика);
		СтруктураЗаписи.Вставить("МаршрутнаяКарта", СвойстваЗаписи.МаршрутнаяКарта);
	Иначе
		СтруктураЗаписи = Неопределено;
	КонецЕсли; 
	
	Оповестить("Запись_ОсновныеМаршрутныеКарты", СтруктураЗаписи);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОсновныеМаршрутныеКарты"));
	
	Если НавигационнаяСсылка <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменена основная маршрутная карта';
											|en = 'Main operations sheet is changed'"), НавигационнаяСсылка);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает новый статус для спецификаций
//
// Параметры:
//	НовыйСтатус				- ПеречислениеСсылка.СтатусыСпецификаций - новый статус
//	ПредставлениеСтатуса	- Строка - представление нового статуса
//  МассивОбъектов			- Массив - список маршрутных карт.
//
Процедура УстановитьСтатусМаршрутныхКарт(НовыйСтатус, ПредставлениеСтатуса, МассивОбъектов) Экспорт
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      НовыйСтатус);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     МассивОбъектов);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусМаршрутныхКартЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Выбранным маршрутным картам будет установлен статус ""%1"". Продолжить?';
						|en = 'Status ""%1"" will be set for the selected operations sheets. Continue?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

//++ НЕ УТКА

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

// Открывает форму настройки автовыбора номенклатуры
//
// Параметры:        	
//  ДанныеСтроки - ДанныеФормыСтруктура - строка табличной части для которой настраивается автовыбор
//  СоответствиеСвойств	- Табличная часть - содержит свойства по которым выполняется автовыбор характеристики
//  ВидИзделийИлиНоменклатура - СправочникСсылка.ВидыНоменклатуры - определяет список доступных свойств для выбора
//  НазваниеСвойстваУказываетсяВНСИ	- Строка - заголовок значения перечисления УказываетсяВНСИ
//  ФормаВладелец - Форма - форма из которой вызывается настройка автовыбора
//  ТолькоПросмотр - Булево - открыть форму только для просмотра.
//
Процедура НастроитьАвтовыборНоменклатуры(
	ФормаВладелец,
	ИмяТЧ,
	СоответствиеСвойств,
	ВидИзделийИлиНоменклатура,
	НазваниеСвойстваУказываетсяВНСИ,
	ТолькоПросмотр = Ложь) Экспорт
	
	ДанныеСтроки = ФормаВладелец.Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ПараметрыФормы.Вставить("СоответствиеСвойств", СоответствиеСвойств);
	
	ПараметрыФормы.Вставить("ВидИзделийИлиНоменклатура",        ВидИзделийИлиНоменклатура);
	ПараметрыФормы.Вставить("СвойствоСодержащееНоменклатуру",   ДанныеСтроки.СвойствоСодержащееНоменклатуру);
	ПараметрыФормы.Вставить("СпособАвтовыбораНоменклатуры",     ДанныеСтроки.СпособАвтовыбораНоменклатуры);
	ПараметрыФормы.Вставить("СпособАвтовыбораХарактеристики",   ДанныеСтроки.СпособАвтовыбораХарактеристики);
	ПараметрыФормы.Вставить("АлгоритмАвтовыбораХарактеристики", ДанныеСтроки.АлгоритмАвтовыбораХарактеристики);
	
	ПараметрыФормы.Вставить("Номенклатура",   ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	
	ПараметрыФормы.Вставить("Описание", Неопределено);
	Если НЕ ДанныеСтроки.Свойство("ПрименениеМатериала", ПараметрыФормы.Описание) Тогда
		ДанныеСтроки.Свойство("ОписаниеИзделия", ПараметрыФормы.Описание);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИмяТЧ", ИмяТЧ);
	ПараметрыФормы.Вставить("НазваниеСвойстваУказываетсяВНСИ", НазваниеСвойстваУказываетсяВНСИ);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаАвтовыбораНоменклатуры", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму настройки отбора по свойствам и алгоритма расчета количества
//
// Параметры:
//  ДанныеСтроки				 - ДанныеФормыСтруктура				 - строка таблицы
//  ВидИзделийИлиНоменклатура	 - СправочникСсылка.ВидыНоменклатуры - определяет список доступных свойств для выбора
//  ФормаВладелец				 - УправляемаяФорма					 - форма из которой вызывается настройка
//  ИмяТЧ						 - Строка							 - имя таблицы (МатериалыИУслуги, Трудозатраты, ВидыРабочихЦентров)
//  ТолькоПросмотр				 - Булево							 - открыть форму только для просмотра
//  СоставНастроек				 - Структура						 - настройки открытия формы
//  АдресДополнительныхДанных	 - Строка							 - см. УправлениеДаннымиОбИзделиях.СтруктураИсточниковДляРасчетаПоФормулам().
//
Процедура НастроитьОтборПоСвойствамИРасчетПоФормулам(
	ФормаВладелец,
	ИмяТЧ,
	ОтборПоСвойствам,
	ВидИзделийИлиНоменклатура,
	ТолькоПросмотр,
	СоставНастроек = Неопределено,
	АдресДополнительныхДанных = "") Экспорт
	
	ДанныеСтроки = ФормаВладелец.Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(
		"ИмяТЧ,
		|ТолькоПросмотр,
		|СоставНастроек,
		|
		|АлгоритмРасчетаКоличества,
		|
		|ВидИзделийИлиНоменклатура,
		|АдресДополнительныхДанных
		|");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДанныеСтроки);
	
	ПараметрыФормы.ИмяТЧ = ИмяТЧ;
	
	ПараметрыФормы.ТолькоПросмотр = ТолькоПросмотр;
	ПараметрыФормы.СоставНастроек = СоставНастроек;
	
	ПараметрыФормы.ВидИзделийИлиНоменклатура = ВидИзделийИлиНоменклатура;
	ПараметрыФормы.АдресДополнительныхДанных = АдресДополнительныхДанных;
	
	ПараметрыФормы.Вставить("ОтборПоСвойствам", ОтборПоСвойствам);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОтбораПоСвойствамИРасчетаПоФормулам", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Выполняет действия при удалении из табличной части
// - удаляет настройки автовыбора.
//
// Параметры:
//  ТаблицаФормы				- ТаблицаФормы - таблица формы на которой расположен список номенклатуры
//  ВыделенныеСтроки			- Массив - содержит массив идентификаторов выделенных строк
//  СоответствиеСвойств			- ДанныеФормыКоллекция - табличная часть "СоответствиеСвойств".
//
Процедура ОчиститьНастройкиАвтовыбораНоменклатуры(ТаблицаФормы, ВыделенныеСтроки, СоответствиеСвойств) Экспорт

	НоменклатураУказываетсяВНСИ   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	ХарактеристикаУказываетсяВНСИ = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
		
		Если ДанныеСтроки.СпособАвтовыбораНоменклатуры = НоменклатураУказываетсяВНСИ
			И ДанныеСтроки.СпособАвтовыбораХарактеристики = ХарактеристикаУказываетсяВНСИ Тогда
			Продолжить;
		КонецЕсли;
		
		СписокСтрок = СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			СоответствиеСвойств.Удалить(НайденнаяСтрока);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Выполняет действия при удалении из табличной части
// - удаляет настройки отбора по свойствам
//
// Параметры:
//  ТаблицаФормы				- ТаблицаФормы - таблица формы на которой расположен список номенклатуры
//  ВыделенныеСтроки			- Массив - содержит массив идентификаторов выделенных строк
//  СоответствиеСвойств			- ДанныеФормыКоллекция - табличная часть "СоответствиеСвойств"
//
Процедура ОчиститьНастройкиОтбораПоСвойствам(ТаблицаФормы, ВыделенныеСтроки, ОтборПоСвойствам) Экспорт
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
		
		СписокСтрок = ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			ОтборПоСвойствам.Удалить(НайденнаяСтрока);
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет действия при удалении видов рабочих центров из табличной части
// - удаляет альтернативные виды рабочих центров.
//
// Параметры:
//  ТаблицаФормы								- ТаблицаФормы - таблица формы на которой расположен список видов рабочих центров
//  АльтернативныеВидыРабочихЦентров			- ДанныеФормыКоллекция - табличная часть, содержащая альтернативные виды рабочих центров.
//
Процедура ПередУдалениемВидовРабочихЦентров(ТаблицаФормы, АльтернативныеВидыРабочихЦентров) Экспорт

	ВыделенныеСтроки = ТаблицаФормы.ВыделенныеСтроки;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
		
		СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", ДанныеСтроки.КлючСвязи);
		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			АльтернативныеВидыРабочихЦентров.Удалить(НайденнаяСтрока);
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура КопироватьРесурснуюСпецификациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = УправлениеДаннымиОбИзделияхВызовСервера.КопироватьРесурснуюСпецификацию(ДополнительныеПараметры.Источник);
	
	Если Ссылка <> Неопределено Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
		Оповестить("Запись_ЭтапыПроизводства");
		ПоказатьЗначение(, Ссылка);
		
		ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создание:';
					|en = 'Created:'"), 
				ПолучитьНавигационнуюСсылку(Ссылка), 
				Ссылка);
		
		Если ДополнительныеПараметры.ОписаниеОбработкиПослеКопирования <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОбработкиПослеКопирования, Ссылка);
		КонецЕсли; 
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось скопировать ресурсную спецификацию.';
										|en = 'Cannot copy BOR.'"));
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьСтатусСпецификацийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УправлениеДаннымиОбИзделияхВызовСервера.УстановитьСтатусСпецификаций(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Неопределено,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);
			
	Оповестить("Запись_РесурсныеСпецификации");
	ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
	
КонецПроцедуры

//++ НЕ УТКА

Процедура УстановитьСтатусМаршрутныхКартЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УправлениеДаннымиОбИзделияхВызовСервера.УстановитьСтатусМаршрутныхКарт(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Неопределено,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);
			
	Оповестить("Запись_МаршрутныеКарты");
	ОповеститьОбИзменении(Тип("СправочникСсылка.МаршрутныеКарты"));
	
КонецПроцедуры

//-- НЕ УТКА

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

Функция НастроитьАвтовыборНоменклатурыЗавершение(РезультатНастройки, ДанныеСтроки, СоответствиеСвойств) Экспорт

	Если РезультатНастройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки,
							РезультатНастройки,
							"Номенклатура,Характеристика,НоменклатураСтрокой,ХарактеристикаСтрокой,
							|СпособАвтовыбораНоменклатуры,СпособАвтовыбораХарактеристики,
							|АлгоритмАвтовыбораХарактеристики, СвойствоСодержащееНоменклатуру");
	
	Если ДанныеСтроки.Свойство("ПрименениеМатериала") Тогда
		ДанныеСтроки.ПрименениеМатериала = РезультатНастройки.Описание;
	ИначеЕсли ДанныеСтроки.Свойство("ОписаниеИзделия") Тогда
		ДанныеСтроки.ОписаниеИзделия = РезультатНастройки.Описание;
	КонецЕсли;
	
	// Удалим старые настройки
	СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
	СписокСтрок = СоответствиеСвойств.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаСоответствие Из СписокСтрок Цикл
		СоответствиеСвойств.Удалить(СтрокаСоответствие);
	КонецЦикла;
	
	// Обновим данные
	Если ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции") Тогда
		Для каждого Элемент Из РезультатНастройки.СоответствиеСвойств Цикл
			НастройкаСоответствия = СоответствиеСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НастройкаСоответствия, Элемент);
			НастройкаСоответствия.КлючСвязи = ДанныеСтроки.КлючСвязи;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ДанныеСтроки.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ДанныеСтроки.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, Неопределено);
	
	Возврат Истина;
	
КонецФункции

Функция НастроитьОтборПоСвойствамИРасчетПоФормуламЗавершение(РезультатНастройки, ДанныеСтроки, ОтборПоСвойствам) Экспорт

	Если РезультатНастройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеСтроки.АлгоритмРасчетаКоличества = РезультатНастройки.АлгоритмРасчетаКоличества;
	ДанныеСтроки.РасчетПоФормуле = НЕ ПустаяСтрока(ДанныеСтроки.АлгоритмРасчетаКоличества);
	
	// Удалим старые настройки
	СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
	СписокСтрок = ОтборПоСвойствам.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаУсловие Из СписокСтрок Цикл
		ОтборПоСвойствам.Удалить(СтрокаУсловие);
	КонецЦикла;
	
	Для каждого Условие Из РезультатНастройки.ОтборПоСвойствам Цикл
		НоваяСтрока = ОтборПоСвойствам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Условие);
		НоваяСтрока.КлючСвязи = ДанныеСтроки.КлючСвязи;
	КонецЦикла;
	
	ДанныеСтроки.УстановленОтборПоСвойствам = РезультатНастройки.ОтборПоСвойствам.Количество() > 0;
	
	// Очистим старые реквизиты
	Если ДанныеСтроки.Свойство("УдалитьОтборСвойство") Тогда
		ДанныеСтроки.УдалитьОтборСвойство         = Неопределено;
		ДанныеСтроки.УдалитьОтборЗначениеСвойства = Неопределено;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РеквизитыНастроекПоСтрокеВМассивСтруктур(ДанныеСтроки, ТаблицаНастроек, СписокРеквизитов) Экспорт
	
	Результат = Новый Массив;
	
	СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
	
	СписокСтрок = ТаблицаНастроек.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из СписокСтрок Цикл
		СтруктураДанныхСтроки = Новый Структура(СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, Строка);
		Результат.Добавить(СтруктураДанныхСтроки);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

Процедура ВидыРабочихЦентровПередНачаломДобавления(
													ТекущиеДанные,
													ВсеВидыРабочихЦентров,
													ЭлементВсеВидыРабочихЦентров,
													ПорядокРаботы,
													ЕстьСинхроннаяЗагрузка,
													Отказ,
													ИспользуетсяПроизводство22 = Истина) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		// Можно использовать стандартное добавление
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ЭлементРодитель = Неопределено Тогда
		КоллекцияОсновныхВидовРЦ = ВсеВидыРабочихЦентров.ПолучитьЭлементы();
	Иначе
		КоллекцияОсновныхВидовРЦ = ЭлементРодитель.ПолучитьЭлементы();
	КонецЕсли; 
	
	НоваяСтрока = КоллекцияОсновныхВидовРЦ.Добавить();
	НоваяСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
	НоваяСтрока.Использовать = Истина;
	
	НастроитьПорядокРаботыВидовРабочихЦентров(ВсеВидыРабочихЦентров, ПорядокРаботы, ИспользуетсяПроизводство22);
		
	ЗаполнитьПараметрыОдновременнойРаботы(
		НоваяСтрока, ВсеВидыРабочихЦентров, ПорядокРаботы, ЕстьСинхроннаяЗагрузка, ИспользуетсяПроизводство22);
	
	ЭлементВсеВидыРабочихЦентров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ЭлементВсеВидыРабочихЦентров.ИзменитьСтроку();
	
КонецПроцедуры

Процедура ДобавитьАльтернативныйВидРЦ(
										ТекущиеДанные,
										ВсеВидыРабочихЦентров,
										ЭлементВсеВидыРабочихЦентров,
										ПорядокРаботы,
										ЕстьСинхроннаяЗагрузка,
										ИспользуетсяПроизводство22 = Истина) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		// Не понятно для какого вида РЦ нужно добавить альтернативный
		Возврат;
	КонецЕсли;
	
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ЭлементРодитель = Неопределено Тогда
		ЭлементРодитель = ТекущиеДанные;
	КонецЕсли;
	
	КоллекцияАльтернативныхВидовРЦ = ЭлементРодитель.ПолучитьЭлементы();
	
	НоваяСтрока = КоллекцияАльтернативныхВидовРЦ.Добавить();
	НоваяСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
	НоваяСтрока.Альтернативный = Истина;
	
	ЗаполнитьПараметрыОдновременнойРаботы(
		НоваяСтрока, ВсеВидыРабочихЦентров, ПорядокРаботы, ЕстьСинхроннаяЗагрузка, ИспользуетсяПроизводство22);
	
	ЭлементВсеВидыРабочихЦентров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ЭлементВсеВидыРабочихЦентров.ИзменитьСтроку();
	
КонецПроцедуры

Процедура ПриИзмененииСоставаВидовРабочихЦентров(ВсеВидыРабочихЦентров, ПорядокРаботы, ИспользуетсяПроизводство22 = Истина) Экспорт
	
	НастроитьПорядокРаботыВидовРабочихЦентров(ВсеВидыРабочихЦентров, ПорядокРаботы, ИспользуетсяПроизводство22);
	
КонецПроцедуры

Процедура НастроитьПорядокРаботыВидовРабочихЦентров(ВидыРабочихЦентров, ПорядокРаботы, ИспользуетсяПроизводство22)
	
	Если ВидыРабочихЦентров.ПолучитьЭлементы().Количество() > 1 Тогда
		
		Если ПорядокРаботы.Пустая() Тогда
			
			Если ИспользуетсяПроизводство22 Тогда
				
				ПорядокРаботы = ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно");
				
			Иначе
				
				ПорядокРаботы = ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Независимо");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПорядокРаботы.Пустая() Тогда
			
			ПорядокРаботы = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидыРабочихЦентровПересчитатьВремяРаботы(
													ТекущиеДанные,
													ВидыРабочихЦентров,
													ПорядокРаботы,
													ЕстьСинхроннаяЗагрузка,
													ИспользуетсяПроизводство22,
													ЕстьРасчетПоФормулам) Экспорт
	
	Если (ИспользуетсяПроизводство22 = Ложь
			ИЛИ ПорядокРаботы <> ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно")
			ИЛИ (ЕстьСинхроннаяЗагрузка И НЕ ТекущиеДанные.СинхроннаяЗагрузка)
		) Тогда
		Возврат;
	КонецЕсли;
	УстановитьВремяРаботыПриОдновременнойЗагрузке(ВидыРабочихЦентров, ТекущиеДанные, ЕстьРасчетПоФормулам);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОдновременнойРаботы(НоваяСтрока, ВидыРабочихЦентров, ПорядокРаботы, ЕстьСинхроннаяЗагрузка, ИспользуетсяПроизводство22)
	
	Если НЕ ИспользуетсяПроизводство22
		ИЛИ ПорядокРаботы <> ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно") Тогда
		
		Возврат
		
	КонецЕсли;
	
	ЗначенияЗаполнения = ЗначенияЗаполненияПараметровОдновременнойРаботы(ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка);
	
	Если НЕ ЗначенияЗаполнения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения, "ВремяРаботы, ЕдиницаИзмерения");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияЗаполненияПараметровОдновременнойРаботы(ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка)
	
	Результат = Неопределено;
	
	Для каждого Строка Из ВидыРабочихЦентров.ПолучитьЭлементы() Цикл
		
		Для Индекс = 0 По Строка.ПолучитьЭлементы().Количество() Цикл
			
			Элемент = ?(Индекс = 0, Строка, Строка.ПолучитьЭлементы()[Индекс-1]);
			
			Если ЗначениеЗаполнено(Элемент.ВремяРаботы)
				И (НЕ ЕстьСинхроннаяЗагрузка ИЛИ Элемент.СинхроннаяЗагрузка) Тогда
			
				Результат = Элемент;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПорядокРаботыВидовРабочихЦентровПриИзменении(ВидыРабочихЦентров, ПорядокРаботы, ЕстьСинхроннаяЗагрузка, ЕстьРасчетПоФормулам) Экспорт
	
	Если ВидыРабочихЦентров.ПолучитьЭлементы().Количество() = 0
		ИЛИ ПорядокРаботы <> ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = ЗначенияЗаполненияПараметровОдновременнойРаботы(ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка);
	
	Если НЕ ЗначенияЗаполнения = Неопределено Тогда
		УстановитьВремяРаботыПриОдновременнойЗагрузке(ВидыРабочихЦентров, ЗначенияЗаполнения, ЕстьРасчетПоФормулам);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВремяРаботыПриОдновременнойЗагрузке(ВидыРабочихЦентров, ЗначенияЗаполнения, ЕстьРасчетПоФормулам)
	
	Для каждого Строка Из ВидыРабочихЦентров.ПолучитьЭлементы() Цикл
		
		Для Индекс = 0 По Строка.ПолучитьЭлементы().Количество() Цикл
			
			Элемент = ?(Индекс = 0, Строка, Строка.ПолучитьЭлементы()[Индекс-1]);
			
			Если НЕ Элемент.СинхроннаяЗагрузка Тогда
				
				СписокСвойств = "ВремяРаботы, ЕдиницаИзмерения";
			
				Если ЕстьРасчетПоФормулам Тогда
					СписокСвойств = СписокСвойств + ", РасчетПоФормуле, АлгоритмРасчетаКоличества";
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Элемент, ЗначенияЗаполнения, СписокСвойств);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьВопросКопироватьМаршрутнуюКартуСОперациями(ОписаниеОповещения) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Будет создана и записана копия маршрутной карты (включая техоперации).
								|Скопировать?';
								|en = 'Route sheet copy will be created and written (including manufacturing operations).
								|Copy?'");
	СписокКнопок = Новый СписокЗначений;								
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Скопировать';
														|en = 'Copy'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

Процедура ОповеститьОКопированииМаршрутнойКартыСОперациями() Экспорт
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.МаршрутныеКарты"));
	Оповестить("Запись_ТехнологическиеОперации");
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти
