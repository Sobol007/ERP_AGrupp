#Область ПрограммныйИнтерфейс

#Область УчетВходящегоНДС

#Область РегистрацияСчетовФактурПолученных

// Выполняет обработку навигационной ссылки форматированной строки, полученной с помощью функции УчетНДСУП.СчетаФактурыПолученныеНаОсновании(). 
// Открывает форму нового или существующего счета-фактуры. Если на основании документа зарегистрировано несколько счетов-фактур, то открывает список документов.
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма документа
// 	НавигационнаяСсылка - Строка - Навигационная ссылка форматированной строки.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных()
//
Процедура ОбработкаНавигационнойСсылкиСчетаФактурыПолученные(Форма, НавигационнаяСсылка, СтандартнаяОбработка, ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "ОткрытьСписокСчетовФактурПолученных" Тогда
		СтруктураОтбор = Новый Структура();
		СтруктураОтбор.Вставить("ДокументОснование", ПараметрыРегистрации.Ссылка);
		СтруктураОтбор.Вставить("Организация",       ПараметрыРегистрации.Организация);
		СтруктураОтбор.Вставить("ПометкаУдаления",   Ложь);
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбор);
		Если ПараметрыРегистрации.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя") Тогда
			ОткрытьФорму("Документ.СчетФактураПолученныйНалоговыйАгент.ФормаСписка", ПараметрыФормы, Форма);
		Иначе
			ОткрытьФорму("Документ.СчетФактураПолученный.ФормаСписка", ПараметрыФормы, Форма);
		КонецЕсли;
	ИначеЕсли НавигационнаяСсылка = "ОткрытьСчетФактуруПолученный" Тогда
		Ключ = УчетНДСУПСлужебныйВызовСервера.СчетФактураПолученныйПоОснованию(ПараметрыРегистрации);
		ПараметрыФормы = Новый Структура("Ключ", Ключ);
		Если ПараметрыРегистрации.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя") Тогда
			ОткрытьФорму("Документ.СчетФактураПолученныйНалоговыйАгент.ФормаОбъекта", ПараметрыФормы, Форма);
		Иначе
			ОткрытьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", ПараметрыФормы, Форма);
		КонецЕсли;
	ИначеЕсли НавигационнаяСсылка = "ОткрытьЗаявлениеОВвозеТоваров" Тогда
		Ключ = УчетНДСУПСлужебныйВызовСервера.ЗаявлениеОВвозеТоваровПоОснованию(
					ПараметрыРегистрации.Ссылка, ПараметрыРегистрации.Организация);
		ПараметрыФормы = Новый Структура("Ключ", Ключ);
		ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.ФормаОбъекта", ПараметрыФормы, Форма);
	ИначеЕсли НавигационнаяСсылка = "ВвестиНовыйСчетФактуру" Тогда
		УчетНДСУПСлужебныйКлиент.ВвестиСчетФактуруПолученный(Форма, ПараметрыРегистрации);
	ИначеЕсли НавигационнаяСсылка = "ВвестиНовыйЗаявлениеОВвозеТоваров" Тогда
		УчетНДСУПСлужебныйКлиент.ВвестиЗаявлениеОВвозеТоваров(Форма, ПараметрыРегистрации);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаВыбора() формы документа-основания счета-фактуры полученного.
// Возвращает признак того, что закрыта форма форма счета-фактуры. 
// При этом требуется обновить представление счетов-фактур на форме документа.
//
// Параметры:
// 	РезультатВыбора - Произвольный - Результат выбора.
// 	ИсточникВыбора - Произвольный - Форма, пославшая оповещение о выборе.
//
// Возвращаемое значение:
// 	Результат - Булево - Признак того, что событие закрытия формы документа.
//
Функция ЗаконченоРедактированиеСчетаФактурыПолученного(РезультатВыбора, ИсточникВыбора) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
		  ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка"
		  ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученныйНалоговыйАгент.Форма.ФормаДокумента"
		  ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученныйНалоговыйАгент.Форма.ФормаСписка"
		  ИЛИ ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаДокумента"
		  ИЛИ ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРабочееМесто" Тогда
		Результат = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область РегистрацияРучныхЗаписейКнигиПокупок

// Выполняет обработку навигационной ссылки форматированной строки, полученной с помощью функции УчетНДСУП.ЗаписиКнигиПокупокНаОсновании().
// Открывает форму списка документов или форму документа.
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма документа
// 	НавигационнаяСсылка - Строка - Навигационная ссылка форматированной строки.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииЗаписейКнигиПокупок()
//
Процедура ОбработкаНавигационнойСсылкиЗаписиКнигиПокупокНаОсновании(Форма, НавигационнаяСсылка, СтандартнаяОбработка, ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "ОткрытьСписокЗаписейКнигиПокупок" Тогда
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ДокументОснование", ПараметрыРегистрации.Ссылка);
		СтруктураОтбор.Вставить("Организация",       ПараметрыРегистрации.Организация);
		СтруктураОтбор.Вставить("ПометкаУдаления",   Ложь);
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Документ.ЗаписьКнигиПокупок.ФормаСписка", ПараметрыФормы, Форма);
	ИначеЕсли НавигационнаяСсылка = "ОткрытьЗаписьКнигиПокупок" Тогда
		Ключ = УчетНДСУПСлужебныйВызовСервера.ЗаписьКнигиПокупокПоОснованию(
					ПараметрыРегистрации.Ссылка, ПараметрыРегистрации.Организация);
		ПараметрыФормы = Новый Структура("Ключ", Ключ);
		ОткрытьФорму("Документ.ЗаписьКнигиПокупок.ФормаОбъекта", ПараметрыФормы, Форма);
	ИначеЕсли НавигационнаяСсылка = "ВвестиНовуюЗаписьКнигиПокупок"
		Или НавигационнаяСсылка = "ДобавитьЗаписьКнигиПокупок" Тогда
		УчетНДСУПСлужебныйКлиент.ВвестиЗаписьКнигиПокупок(Форма, ПараметрыРегистрации);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаВыбора() формы документа-основания.
// Возвращает признак того, что закрыта форма документа Запись книги покупок. 
// При этом требуется обновить представление записи книги покупок на форме документа-основания.
//
// Параметры:
// 	РезультатВыбора - Произвольный - Результат выбора.
// 	ИсточникВыбора - Произвольный - Форма, пославшая оповещение о выборе.
//
// Возвращаемое значение:
// 	Результат - Булево - Признак того, что событие закрытия формы документа.
//
Функция ЗаконченоРедактированиеЗаписиКнигиПокупокНаОсновании(РезультатВыбора, ИсточникВыбора) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	Если ИсточникВыбора.ИмяФормы = "Документ.ЗаписьКнигиПокупок.Форма.ФормаДокумента"
		  ИЛИ ИсточникВыбора.ИмяФормы = "Документ.ЗаписьКнигиПокупок.Форма.ФормаСписка" Тогда
		Результат = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УчетИсходящегоНДС

#Область ФормированиеСчетовФактурВыданных

// Выполняет обработку навигационной ссылки форматированной строки, полученной с помощью функции УчетНДСУП.СчетаФактурыВыданныеНаОсновании(). 
// Открывает форму нового или существующего счета-фактуры. Если на основании документа зарегистрировано несколько счетов-фактур, то открывает список документов.
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма документа
// 	НавигационнаяСсылка - Строка - Навигационная ссылка форматированной строки.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных()
//
Процедура ОбработкаНавигационнойСсылкиСчетаФактурыВыданные(Форма, НавигационнаяСсылка, СтандартнаяОбработка, ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	Если НавигационнаяСсылка = "ОткрытьСписокСчетовФактурВыданных" Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОтбор = Новый Структура();
		СтруктураОтбор.Вставить("ДокументОснование", ПараметрыРегистрации.Ссылка);
		СтруктураОтбор.Вставить("Организация",       ПараметрыРегистрации.Организация);
		СтруктураОтбор.Вставить("ПометкаУдаления",   Ложь);
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Документ.СчетФактураВыданный.ФормаСписка", ПараметрыФормы, Форма);
	ИначеЕсли НавигационнаяСсылка = "ОткрытьСчетФактуруВыданный" Тогда
		СтандартнаяОбработка = Ложь;
		Ключ = УчетНДСУПСлужебныйВызовСервера.СчетФактураВыданныйПоОснованию(
				ПараметрыРегистрации.Ссылка, ПараметрыРегистрации.Организация);
		ПараметрыФормы = Новый Структура("Ключ", Ключ);
		ОткрытьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", ПараметрыФормы, Форма);
	ИначеЕсли НавигационнаяСсылка = "ВвестиНовыйСчетФактуруВыданный" Тогда
		СтандартнаяОбработка = Ложь;
		УчетНДСУПСлужебныйКлиент.ВвестиСчетФактуруВыданный(Форма, ПараметрыРегистрации);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаВыбора() формы документа-основания счета-фактуры выданного.
// Возвращает признак того, что закрыта форма форма счета-фактуры. 
// При этом требуется обновить представление счетов-фактур на форме документа.
//
// Параметры:
// 	РезультатВыбора - Произвольный - Результат выбора.
// 	ИсточникВыбора - Произвольный - Форма, пославшая оповещение о выборе.
//
// Возвращаемое значение:
// 	Результат - Булево - Признак того, что событие закрытия формы документа.
//
Функция ЗаконченоРедактированиеСчетаФактурыВыданного(РезультатВыбора, ИсточникВыбора) Экспорт
	
	Результат = Ложь;
	//++ Локализация
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента"
		  ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		Результат = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Выполняет печать сформированных исправительный счетов-фактур.
//
// Параметры:
// 	ТаблицаИзмененныхДокументов - ТаблицаЗначений - Измененные документы продажи и их реквизиты.
// 	                              Колонки таблицы:
// 	                              * Документ - ОписаниеТипов.ОснованиеСчетФактураВыданный - Документ-основание.
// 	                              * Организация - СправочникСсылка.Организация - Организация документа-основания.
// 	                              * Дата - Дата - Дата документа-основания.
// 	                              * Ответственный - СправочникСсылка.Пользователи - Ответственный за документ-основание.
// 	Форма - УправляемаяФорма - Форма-владелец, из которой выполняется печать счетов-фактур. 
//
Процедура ПечатьИсправительныхСчетовФактурПоИзмененнымДокументам(ТаблицаИзмененныхДокументов, Форма) Экспорт
	
	//++ Локализация
	МассивДокументов = Новый Массив;
	Для каждого Строка Из ТаблицаИзмененныхДокументов Цикл
		Если МассивДокументов.Найти(Строка.Документ) = Неопределено Тогда
			МассивДокументов.Добавить(Строка.Документ);
		КонецЕсли;
	КонецЦикла;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьОбщихФорм",
		"СчетФактура",
		МассивДокументов,
		Форма, // ВладелецФормы
		Новый Структура("ПечатьВВалюте", Ложь)); // ПараметрыПечати
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСчетовФактурКомиссионеру
	
// Выполняет обработку навигационной ссылки форматированной строки, полученной с помощью функции УчетНДСУП.СчетаФактурыКомиссионеруНаОсновании(). 
// Открывает форму счета-фактуры или форму рабочего места по оформлению.
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма документа
// 	НавигационнаяСсылка - Строка - Навигационная ссылка форматированной строки.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурКомиссионеру()
//
Процедура ОбработкаНавигационнойСсылкиСчетаФактурыКомиссионеру(Форма, НавигационнаяСсылка, СтандартнаяОбработка, ПараметрыРегистрации) Экспорт

	//++ Локализация
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "ОткрытьСписокСчетовФактурКомиссионеру" Тогда
		СтруктураОтбор = Новый Структура();
		СтруктураОтбор.Вставить("ДокументОснование", ПараметрыРегистрации.Ссылка);
		СтруктураОтбор.Вставить("Организация",       ПараметрыРегистрации.Организация);
		СтруктураОтбор.Вставить("ПометкаУдаления",   Ложь);
		СтруктураОтбор.Вставить("КОформлению",       Ложь);
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбор);
		УчетНДСУПСлужебныйКлиент.ОткрытьФормуСПроверкойЗаписи("Документ.СчетФактураКомиссионеру.Форма.ФормаСпискаПоОтчетуКомиссионера",ПараметрыФормы, Форма);
	ИначеЕсли НавигационнаяСсылка = "ОткрытьСчетФактуруКомиссионеру" Тогда
		Ключ = УчетНДСУПСлужебныйВызовСервера.СчетФактураКомиссионеруПоОснованию(
					ПараметрыРегистрации.Ссылка, ПараметрыРегистрации.Организация);
		ПараметрыФормы = Новый Структура("Ключ", Ключ);
		ОткрытьФорму("Документ.СчетФактураКомиссионеру.ФормаОбъекта", ПараметрыФормы, Форма);
	ИначеЕсли НавигационнаяСсылка = "ОткрытьСчетаФактурыКомиссионеруКОформлению" Тогда
		СтруктураОтбор = Новый Структура();
		СтруктураОтбор.Вставить("ДокументОснование", ПараметрыРегистрации.Ссылка);
		СтруктураОтбор.Вставить("Организация",       ПараметрыРегистрации.Организация);
		СтруктураОтбор.Вставить("ПометкаУдаления",   Ложь);
		СтруктураОтбор.Вставить("КОформлению",       Истина);
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбор);
		УчетНДСУПСлужебныйКлиент.ОткрытьФормуСПроверкойЗаписи("Документ.СчетФактураКомиссионеру.Форма.ФормаСпискаПоОтчетуКомиссионера", ПараметрыФормы, Форма);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаВыбора() формы отчета комиссионера.
// Возвращает признак того, что закрыта форма форма счета-фактуры, списка или рабочего места по формированию. 
// При этом требуется обновить представление счетов-фактур на форме документа.
//
// Параметры:
// 	РезультатВыбора - Произвольный - Результат выбора.
// 	ИсточникВыбора - Произвольный - Форма, пославшая оповещение о выборе.
//
// Возвращаемое значение:
// 	Результат - Булево - Признак того, что событие закрытия формы редактирования счетов-фактур.
//
Функция ЗаконченоРедактированиеСчетовФактурКомиссионеру(РезультатВыбора, ИсточникВыбора) Экспорт
	
	Результат = Ложь;
	//++ Локализация
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураКомиссионеру.Форма.ФормаДокумента"
	      ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураКомиссионеру.Форма.ФормаСписка"
	      ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураКомиссионеру.Форма.ФормаСпискаПоОтчетуКомиссионера" Тогда
		Результат = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти

#Область ВыборИОформлениеСчетовФактурДляОтчетаКомитенту

// Возвращает структуру параметров для открытия формы выбора счета-фактуры для отчета комитенту.
//
// Возвращаемое значение:
// 	ПараметрыВыбора - Структура - Параметры открытия формы выбора счета-фактуры для отчета комитенту:
// 	                  * Организация - СправочникСсылка.Организация - Организация-комиссионер
// 	                  * Покупатель - СправочникСсылка.Контрагент, СправочникСсылка.Организация - Покупатель комиссионного товара.
// 	                  * Дата - Дата - Дата выставления счета-фактуры. В общем случае дата реализации товаров покупателю.
// 	                  * СчетФактура - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураКомиссионеру - 
// 	                             Ссылка на уже выбранный счет-фактуру.
// 
Функция ПараметрыВыбораСчетаФактурыДляОтчетаКомитенту() Экспорт
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Организация");
	ПараметрыВыбора.Вставить("Покупатель");
	ПараметрыВыбора.Вставить("Дата");
	ПараметрыВыбора.Вставить("ВыбранныйСчетФактура");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

// Открывает форму выбора счета-фактуры для отчета комитенту. 
// Вызывается в обработчике НачалоВыбора() поля формы счета-фактуры, выданного покупателю.
//
// Параметры:
// 	Элемент - ПолеФормы - Элемент управления.
// 	ПараметрыВыбора - Структура - Параметры выбора счета-фактуры. См. УчетНДСУПКлиент.ПараметрыВыбораСчетаФактурыДляОтчетаКомитенту().
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура НачалоВыбораСчетаФактурыДляОтчетаКомитенту(Элемент, ПараметрыВыбора, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ВыборСчетаФактурыВыданногоПокупателюКомиссионногоТовара", ПараметрыВыбора, Элемент);
	//-- Локализация
	
КонецПроцедуры

// Возвращает структуру параметров необходимых для открытия формы ОформленияСчетовФактурДляОтчетаКомитенту
//
// Возвращаемое значение:
//	Структура - Структура параметров содержащая следующие ключи
//              Организация - СправочникСсылка.Организация - содержит организацию продавца комиссионного товара
//              АдресТаблицыРеализацийКомиссионныхТоваров - Строка - содержит адрес во временном хранилище на таблицу 
//																	 документов реализации комиссионного товара
//					Таблица реализаций должна иметь колонки:
//						Ссылка - ДокументСсылка - ссылка на документ реализации
//						Дата - Дата - Дата документа реализации
//						Сумма - Число - сумма документа реализации
//						Валюта - СправочникСсылка.Валюта - валюта документа реализации
//						Партнер - СправочникСсылка.Партнеры - партнер кому был реализован комиссионный товар
//						Контрагент - СправочникСсылка.Контрагенты - контрагент кому был реализован комиссионный товар
//  
Функция ПараметрыФормыОформленияСчетовФактурДляОтчетаКомитенту() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация");
	ПараметрыФормы.Вставить("АдресТаблицыРеализацийКомиссионныхТоваров");
	Возврат ПараметрыФормы;
	
КонецФункции

// Открывает форму оформления счетов-фактур выданных.
// При закрытии формы будет сформировано оповещение о выборе, в результате выборка будет передано соответствие, в котором
//      * Ключ - Документ реализации, для которого сформирован счет-фактура
//      * Значение - Ссылка на сформированный счет-фактуру.
//
// Параметры:
//  ПараметрыФормы - Структура - Параметры открываемой формы см. УчетНДСУПКлиент.ПараметрыФормыОформленияСчетовФактурДляОтчетаКомитенту()
//  ФормаВладелец - УправляемаяФорма - форма открывающая оформление счетов-фактур 
//
Процедура ОткрытьФормуОформленияСчетовФактурДляОтчетаКомитенту(ПараметрыФормы, ФормаВладелец) Экспорт
	
	//++ Локализация
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаОформленияСчетовФактур", ПараметрыФормы, ФормаВладелец);
	//-- Локализация	
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаВыбора() для проверки необходимости обновления данных о счетах-фактурах выданных.
// Возвращает признак того, что закрыта форма оформления счетов-фактур выданных.
//
// Параметры:
// 	РезультатВыбора - Произвольный - Результат выбора.
// 	ИсточникВыбора - Произвольный - Форма, пославшая оповещение о выборе.
//
// Возвращаемое значение:
// 	Результат - Булево - Признак того, что событие закрытия формы документа.
//
Функция ЗаконченоОформлениеСчетовФактурВыданных(РезультатВыбора, ИсточникВыбора) Экспорт
	
	Результат = Ложь;
	//++ Локализация
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаОформленияСчетовФактур" Тогда
		Результат = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработкаТабличныхЧастей

// Заполняет ставку НДС в строке табличной части
// 
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	//++ Локализация
	ТекущаяСтрока.СтавкаНДС = Неопределено;
	//-- Локализация
	
КонецПроцедуры

// Рассчитывает сумму НДС в строке табличной части
// 
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураПараметровДействия - Структура - параметры действия.
//	Используются следующие значения:
//		* ЦенаВключаетНДС - обязательное
//		* НалогообложениеНДС
//		* СтавкаНДС
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения) Экспорт
	
	//++ Локализация
	Перем СтавкаНДС;
	
	НалогообложениеНДС = Неопределено;
	СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	
	Если Не СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) Тогда
		СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
		ТекущаяСтрока.Сумма,
		УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС),
		СтруктураПараметровДействия.ЦенаВключаетНДС,
		НалогообложениеНДС);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПеречислениеНДСВБюджетПоОтдельнымОперациям

// Описание
// 
// Параметры:
// 	ПараметрыПодбора - Структура - см. УчетНДСУПКлиент.ПараметрыПодбораСчетовФактурТребующихОплатыНДС().
// 	ОповещениеОПодборе - ОписаниеОповещения - оповещение, которое будет вызвано после подбора документов.
//			В обработчик в параметр «Результат» будет передан адрес временного хранилища 
//			с таблицей подобранных документов. 
//			Таблица содержит колонки:
//				- Контрагент - Поставщик.
//				- Договор - Договор с поставщиком.
//				- СчетФактура - Документ, требующий оплаты НДС.
//				- СуммаОплаты - Сумма оплаты НДС по документу.
//
Процедура ОткрытьФормуПодбораСчетовФактурТребующихОплатыНДС(ПараметрыПодбора, ОповещениеОПодборе) Экспорт
	
	//++ Локализация
	ОткрытьФорму("Обработка.ПеречислениеНДСВБюджетПоОтдельнымОперациям.Форма.ПодборНДСКУплате", ПараметрыПодбора,,,,,ОповещениеОПодборе);
	//-- Локализация
	
КонецПроцедуры

// Возвращает структуру параметров для открытия формы подбора документов, требующих оплаты НДС.
// 
// Параметры:
// Возвращаемое значение:
// 	ПараметрыПодбора - Структура - Структура параметров подбора
//							- ТипНалога - Тип оплачиваемого налога: НДС_ВвозимыеТовары или НДС_НалоговыйАгент
//							- Организация - Отбор документов по организации
//							- ДатаДокумента - Отбор документов по периоду
//							- ДокументСсылка - Ссылка на документ оплаты
//							- АдресВременногоХранилища 
//- Ссылка на временное хранилище с таблицей уже подобранных документов.
//			Таблица должна иметь следующие колонки:
//				- Контрагент - Поставщик.
//				- Договор - Договор с поставщиком.
//				- СчетФактура - Документ, по которому оплачивается НДС.
//				- СуммаОплаты - Сумма оплаты НДС по документу.
//
Функция ПараметрыПодбораСчетовФактурТребующихОплатыНДС() Экспорт
	
	ПараметрыПодбора = Новый Структура;
	//++ Локализация
	ПараметрыПодбора.Вставить("ТипНалога", Тип("ПеречислениеСсылка.ТипыНалогов"));
	ПараметрыПодбора.Вставить("Организация", Тип("СправочникСсылка.Организации"));
	ПараметрыПодбора.Вставить("ДатаДокумента");
	ПараметрыПодбора.Вставить("ДокументСсылка");
	ПараметрыПодбора.Вставить("АдресВременногоХранилища");
	//-- Локализация
	Возврат ПараметрыПодбора;
	
КонецФункции

// Открывает форму просмотра и редактирования состояния оплаты НДС по счету-фактуре.
// 
// Параметры:
// 	СчетФактура - ОпределяемыйТип.СчетФактура - Документ, требующий оплаты НДС.
//	ФормаВладелец - УправляемаяФорма - форма, вызвавшая метод
//
Процедура ОткрытьФормуСостоянияОплатыНДСПоСчетуФактуре(СчетФактура, ФормаВладелец) Экспорт
	
	//++ Локализация
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СчетФактура",   СчетФактура);
	ДополнительныеПараметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуСостоянияОплатыНДСПоСчетуФактуреЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	УчетНДСУПСлужебныйКлиент.ПроверитьВозможностьСозданияДокументаНаОсновании(ФормаВладелец, Оповещение);
	//-- Локализация
	
КонецПроцедуры

Процедура ОткрытьФормуСостоянияОплатыНДСПоСчетуФактуреЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	Если Результат <> КодВозвратаДиалога.Да 
		И Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("СчетФактура", ДополнительныеПараметры.СчетФактура);
	
	ДополнительныеПараметрыФормы = Новый Структура;
	ДополнительныеПараметрыФормы.Вставить("Ссылка", ДополнительныеПараметры.СчетФактура);
	
	ОткрытьФорму("РегистрСведений.ПодтверждениеОплатыНДСВБюджет.Форма.ФормаДокументыОплаты", ПараметрыФормы, ДополнительныеПараметры.ФормаВладелец);
	//-- Локализация
	
КонецПроцедуры

// Обновляет заголовок команды просмотра состояния оплаты НДС по документу после ручного редактирования в форме документов оплаты.
// 
// Параметры:
//	ИсточникВыбора - Произвольный - Форма, где осуществлен выбор
// 	ТекстСостояния - Строка - новый текст состояния оплаты.
// 	КомандаСостояния - КнопкаФормы - Элемент команды просмотра состояния.
Процедура ОбработкаИзмененияСостоянияОплатыНДСПоСчетуФактуре(ИсточникВыбора, ТекстСостояния, КомандаСостояния) Экспорт
	
	//++ Локализация
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет.Форма.ФормаДокументыОплаты" Тогда
		КомандаСостояния.Заголовок = ТекстСостояния;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

// Возвращает значение ставки НДС по умолчанию.
//
// Параметры:
//  Дата - Дата - дата на которую необходимо получить ставку НДС по умолчанию,
//               если дата пустая, то будет получена ставка НДС на текущую дату
//  РасчетнаяСтавка - Булево - указывает необходимость получения расчетной ставки НДС X/(100 + X).
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СтавкиНДС - значение ставки НДС.
//
Функция СтавкаНДСПоУмолчанию(Дата = Неопределено, РасчетнаяСтавка = Ложь) Экспорт
	
	ДатаПолучения = ?(ЗначениеЗаполнено(Дата), Дата, ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ДатаПолучения >= '20190101' Тогда
		Возврат ?(РасчетнаяСтавка,
			ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"),
			ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	Иначе
		Возврат ?(РасчетнаяСтавка,
			ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"),
			ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
	КонецЕсли;
	
КонецФункции

#КонецОбласти

