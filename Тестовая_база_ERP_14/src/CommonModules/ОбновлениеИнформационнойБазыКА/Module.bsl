////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки КомплекснаяАвтоматизация.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "КомплекснаяАвтоматизация";
	Описание.Версия = "2.4.8.57";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
//  Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Монопольно

#Область НачальноеЗаполнение

#Область ОбновлениеИнформационнойБазыКА_ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ПервыйЗапуск";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Отложенно

#Область НаКаждуюВерсию

#Область Справочники_ВидыБюджетов_ОчиститьКэшВспомогательныхДанных

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ВидыБюджетов.ОчиститьКэшВспомогательныхДанных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("52f3a166-c217-4aea-bb9c-137850a3ae4a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыБюджетов.ЗарегистироватьДанныеДляОчисткиКэшВспомогательныхДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "БюджетированиеСервер.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.КэшИменДокументовДляОбработкиПоПравилу,"
		+ "РегистрСведений.КэшВспомогательныхДанныхВидаБюджета";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.КэшИменДокументовДляОбработкиПоПравилу,"
		+ "РегистрСведений.КэшВспомогательныхДанныхВидаБюджета";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭкземплярБюджета,"
		+ "Отчет.РезультатРаботыПравилПолученияФактическихДанных,"
		+ "Отчет.ПроверкаСвязейПоказателейБюджетов,"
		+ "Отчет.ОборотнаяВедомостьБюджетирования,"
		+ "Отчет.БюджетныйОтчет,"
		+ "Отчет.ОборотноСальдоваяВедомостьБюджетирования,"
		+ "Отчет.РасшифровкаФормулыБюджетногоОтчета";
	Обработчик.Комментарий = НСтр("ru = 'Очищает кэш вспомогательных данных бюджетирования.';
									|en = 'It clears cache of budgeting auxiliary data.'");

#КонецОбласти

#КонецОбласти

#Область Версия_2_4_8

#Область Справочники_ПравилаЛимитовПоДаннымБюджетирования_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.8.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ПравилаЛимитовПоДаннымБюджетирования.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ac4f4d59-6d41-4006-aadb-decc7a02aafc");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПравилаЛимитовПоДаннымБюджетирования.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "БюджетированиеСервер.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ПравилаЛимитовПоДаннымБюджетирования,"
		+ "Справочник.СтатьиБюджетов,"
		+ "Справочник.МоделиБюджетирования";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ПравилаЛимитовПоДаннымБюджетирования";
	Обработчик.БлокируемыеОбъекты = "Отчет.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования,"
		+ "Документ.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.Комментарий = НСтр("ru = 'В справочнике ""Правила лимитов по данным бюджетирования"" перезаполняет табличную часть ""Иерархия аналитик""';
									|en = 'Refills the ""Dimensions hierarchy"" tabular section in the ""Limit rules by budgeting data"" catalog'");

#КонецОбласти

#Область Справочники_ОбъектыЭксплуатации_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.8.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ОбъектыЭксплуатации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0a97bfe9-77f9-4f51-970e-40c12228274b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ОбъектыЭксплуатации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьРеглУчет,"
		+ "Справочник.ОбъектыЭксплуатации";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ОбъектыЭксплуатации";
	Обработчик.БлокируемыеОбъекты = "Справочник.ОбъектыЭксплуатации";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет справочник ""Объекты эксплуатации"":
	|- очищает неиспользуемые реквизиты';
	|en = 'Updates the directory ""Operation sites"":
	|- cleans unused details'");

#КонецОбласти

#Область ВнеоборотныеАктивыЛокализация_РегламентированныйУчетВНА_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.8.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ВнеоборотныеАктивыЛокализация.РегламентированныйУчетВНА_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1aea0b78-1b99-4d99-af47-8c7d3d2938d0");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ВнеоборотныеАктивыЛокализация.РегламентированныйУчетВНА_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.РегламентированныйУчетВНА";
	Обработчик.ИзменяемыеОбъекты = "Константа.РегламентированныйУчетВНА";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает константу ""Регламентированный учет ВНА""';
									|en = 'Sets up the constant ""Regulated AR accounting""'");

#КонецОбласти

#Область Документы_ТаможеннаяДекларацияЭкспорт_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.8.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ТаможеннаяДекларацияЭкспорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5c2f5939-170b-4789-8df4-8ccfc9469386");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ТаможеннаяДекларацияЭкспорт.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
	//++ Локализация
		+ "Документ.ТаможеннаяДекларацияЭкспорт,"
	//-- Локализация
		+ "Документ.РеализацияТоваровУслуг";
	Обработчик.ИзменяемыеОбъекты = ""
	//++ Локализация
		+ "Документ.ТаможеннаяДекларацияЭкспорт"
	//-- Локализация
	;
	Обработчик.БлокируемыеОбъекты = ""
	//++ Локализация
		+ "Документ.ТаможеннаяДекларацияЭкспорт"
	//-- Локализация
	;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебные реквизиты документа ""Таможенная декларация на экспорт"".';
									|en = 'Fills in service details of the document ""Export customs declaration"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область Документы_ВыкупТоваровХранителем_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.8.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВыкупТоваровХранителем.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1c3b7c23-04a4-4f7a-beb3-109cc6aa809f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВыкупТоваровХранителем.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ВыкупТоваровХранителем";
	Обработчик.ИзменяемыеОбъекты = "Документ.ВыкупТоваровХранителем";
	Обработчик.БлокируемыеОбъекты = "Документ.ВыкупТоваровХранителем";
	Обработчик.Комментарий = НСтр("ru = 'В выкупах товаров хранителем в табличной части Товары заполняет номер ГТД. В случае если одной строке из табличной части Товары соответствует несколько номеров ГТД из табличной части ВидыЗапасов, то разбивает строки в табличной части Товары. До окончания выполнения обработчика вы не сможете редактировать выкупы товаров хранителем.';
									|en = 'Fills in the CFD number in product purchases by the keeper in the table part Products. If several CFD numbers from the table part StorageTypes match the same string from the table part Product, it splits out strings in the table part Products. You cannot edit product purchases by the keeper until the processor is completed.'");

#КонецОбласти

#Область Документы_СписаниеТоваровУХранителя_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.8.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.СписаниеТоваровУХранителя.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7d0410ce-117b-41c0-822a-b983beea22ad");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СписаниеТоваровУХранителя.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СписаниеТоваровУХранителя";
	Обработчик.ИзменяемыеОбъекты = "Документ.СписаниеТоваровУХранителя";
	Обработчик.БлокируемыеОбъекты = "Документ.СписаниеТоваровУХранителя";
	Обработчик.Комментарий = НСтр("ru = 'В списаниях товаров у хранителя в табличной части Товары заполняет номер ГТД. В случае если одной строке из табличной части Товары соответствует несколько номеров ГТД из табличной части ВидыЗапасов, то разбивает строки в табличной части Товары. До окончания выполнения обработчика вы не сможете редактировать списания товаров у хранителя.';
									|en = 'Fills in the CFD number in product disposals at the keeper in the table part Products. If several CFD numbers from the table part StorageTypes match the same string from the table part Products, it splits out strings in the table part Products. You cannot edit product disposals at the keeper until the processor is completed.'");

#КонецОбласти

#Область Документы_ПоступлениеТоваровОтХранителя_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.8.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПоступлениеТоваровОтХранителя.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b4e99e41-cb9d-4cbe-bb80-abc76c6025f5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПоступлениеТоваровОтХранителя.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПоступлениеТоваровОтХранителя";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПоступлениеТоваровОтХранителя";
	Обработчик.БлокируемыеОбъекты = "Документ.ПоступлениеТоваровОтХранителя";
	Обработчик.Комментарий = НСтр("ru = 'В поступлениях товаров от хранителя в табличной части Товары заполняет номер ГТД. В случае если одной строке из табличной части Товары соответствует несколько номеров ГТД из табличной части ВидыЗапасов, то разбивает строки в табличной части Товары. До окончания выполнения обработчика вы не сможете редактировать поступления товарво от хранителя.';
									|en = 'Fills in the CFD number in product receipts rom the keeper in the table part Products. If several CFD numbers from the table part StorageTypes match the same string from the table part Product, it splits out strings in the table part Products. You cannot edit product receipts from the keeper until the processor is completed.'");

#КонецОбласти

#КонецОбласти

#КонецОбласти

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия,
		ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "КомплекснаяАвтоматизация";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ОбновлениеУТДоКА";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлей" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.19",
		"Роль.РазделПроизводство",
		"Роль.ПодсистемаПроизводство",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.МежцеховоеУправление",
		"Подсистема.Производство.Подсистема.МежцеховоеУправление2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.ВнутрицеховоеУправление",
		"Подсистема.Производство.Подсистема.ВнутрицеховоеУправление2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.МатериальныйУчет",
		"Подсистема.Производство.Подсистема.МатериальныйУчет2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.69",
		"Роль.ПроверкаДокументовПравоИзменения",
		"Роль.ИзменениеРазрешатьИзменятьПроверенныеДокументыПоРеглУчету",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.72",
		"Подсистема.Производство.Подсистема.ПроизводственныеЗатраты",
		"Подсистема.Производство.Подсистема.ПроизводственныеЗатраты2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.72",
		"Подсистема.Производство.Подсистема.АнализСебестоимости",
		"Подсистема.Производство.Подсистема.АнализСебестоимости2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.4.2.32",
		"Роль.ДобавлениеИзменениеПогашенийСтомостиТМЦВЭксплуатации",
		"Роль.ДобавлениеИзменениеПогашенийСтоимостиТМЦВЭксплуатации",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.4.7.14",
		"Роль.ИзменениеРазрешатьИзменятьПроверенныеДокументыПоРеглУчету",
		"Роль.ИзменениеСтатусыПроверкиДокументов",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.4.8.1",
		"Роль.ДобавлениеИзменениеРегистрацийНаработок",
		"Роль.ДобавлениеИзменениеНаработкиОбъектовЭксплуатации",
		ОписаниеПодсистемы.Имя);	
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.4.8.1",
		"Роль.ДобавлениеИзменениеРегистрацийНаработокТМЦВЭксплуатации",
		"Роль.ДобавлениеИзменениеНаработкиТМЦВЭксплуатации",
		ОписаниеПодсистемы.Имя);	
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска КА.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьВалютуПлановыхЦен();
	УстановитьВалютуРасценокВидовРабот();
	
	ЗаполнитьКонстантуИспользоватьБюджетирование();
	ЗаполнитьКонстантуИспользоватьРеглУчет();
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьПредопределенныеАналитикиСтатейБюджетов();
	УправлениеДоступомЛокализация.УстановитьРодителяПрофилейДоступаЗарплатаИКадры();
	Справочники.ТипыПлатежейФЗ275.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ВидыПодтверждающихДокументов.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ДрагоценныеМатериалы.ЗаполнитьПредопределенныеДрагоценныеМатериалы();
	ПланыСчетов.Хозрасчетный.ЗаполнитьПредопределенныеНастройки();
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
	
КонецПроцедуры

Процедура ОбновлениеУТДоКА() Экспорт
	
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьПредопределенныеАналитикиСтатейБюджетов();
	УправлениеДоступомЛокализация.УстановитьРодителяПрофилейДоступаЗарплатаИКадры();
	Справочники.ТипыПлатежейФЗ275.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ВидыПодтверждающихДокументов.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ДрагоценныеМатериалы.ЗаполнитьПредопределенныеДрагоценныеМатериалы();
	ПланыСчетов.Хозрасчетный.ЗаполнитьПредопределенныеНастройки();
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьЗначениеРазделенияПоОбластямДанных();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("УправлениеТорговлей", Ложь);
	ЗначенияКонстант.Вставить("КомплекснаяАвтоматизация", Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Процедура устанавливает значение валюты плановых цен.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуПлановыхЦен()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаПлановойСебестоимостиПродукции.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаПлановойСебестоимостиПродукции.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение валюты расценок видов работ.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуРасценокВидовРабот()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРасценокВидовРабот.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаРасценокВидовРабот.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНовыхВерсийИБ

// Обработчик первого запуска КА.
// Включает константу "ИспользоватьБюджетирование".
//
Процедура ЗаполнитьКонстантуИспользоватьБюджетирование() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьБюджетирование.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	
КонецПроцедуры

// Обработчик первого запуска КА.
// Включает константу "ИспользоватьРеглУчет".
//
Процедура ЗаполнитьКонстантуИспользоватьРеглУчет() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьРеглУчет.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
