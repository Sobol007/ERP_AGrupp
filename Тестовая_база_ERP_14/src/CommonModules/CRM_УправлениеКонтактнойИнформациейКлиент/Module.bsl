////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик события ПриИзменении поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма             - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент           - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     ЭтоТабличнаяЧасть - Булево           - Флаг того, что элемент является частью таблицы формы.
//
Процедура ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт

	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	// Если это очистка, то сбрасываем представление.
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
// +CRM
	Если Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
	    Текст = СокрЛП(Элемент.Заголовок);
	Иначе
		Текст = СокрЛП(Элемент.ТекстРедактирования);
	КонецЕсли; 
	Попытка
		Форма[ДанныеСтроки.ИмяРеквизита] = Текст;
	Исключение
	КонецПопытки;
	//Текст = Элемент.ТекстРедактирования;
// -CRM
	
	Если ПустаяСтрока(Текст) Тогда
		
		ДанныеЗаполнения[Элемент.Имя] = "";
		Если ЭтоТабличнаяЧасть Тогда
			ДанныеЗаполнения[Элемент.Имя + "Значение"] = "";
		КонецЕсли;
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.Значение      = "";
		Результат = Новый Структура("ОбновитьКонтекстноеМеню, ИмяЭлементаДляРазмещения", Истина, ДанныеСтроки.ИмяЭлементаДляРазмещения);
		ОбновитьКонтекстноеМеню(Форма, ДанныеСтроки.ИмяЭлементаДляРазмещения);
		Возврат;
		
	КонецЕсли;
	
	// +CRM
	// Разложить строку телефона по полям
	Если ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
		ИЛИ ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Текст);
		ДанныеСтроки.Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", ДанныеСтроки.Комментарий);
		ДанныеСтроки.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(ДанныеСтроки.Представление, ДанныеСтроки.Вид);
		Попытка
			Форма[ДанныеСтроки.ИмяРеквизита] = ДанныеСтроки.Представление;
		Исключение
		КонецПопытки;
	Иначе
	// -CRM
	ДанныеСтроки.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Текст, ДанныеСтроки.Вид);
	ДанныеСтроки.Представление = Текст;
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "Значение"]      = ДанныеСтроки.Значение;
	КонецЕсли;
	// +CRM
	КонецЕсли;
	// -CRM
	
	Если ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Результат = Новый Структура("ОбновитьКонтекстноеМеню, ИмяЭлементаДляРазмещения", Истина, ДанныеСтроки.ИмяЭлементаДляРазмещения);
		ОбновитьКонтактнуюИнформациюФормы(Форма, Результат)
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма                - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент              - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     Модифицированность   - Булево           - Устанавливаемый флаг модифицированности формы.
//     СтандартнаяОбработка - Булево           - Устанавливаемый флаг стандартной обработки события формы.
//
Процедура НачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	
	//// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	ОбновитьКонтекстноеМеню = Ложь;
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Если ДанныеЗаполнения[Элемент.Имя] <> Элемент.ТекстРедактирования Тогда
			ДанныеЗаполнения[Элемент.Имя] = Элемент.ТекстРедактирования;
			ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть);
			ОбновитьКонтекстноеМеню  = Истина;
			Форма.Модифицированность = Истина;
		КонецЕсли;
		ТекстРедактирования = Элемент.ТекстРедактирования;
	Иначе 
		ТекстРедактирования = ?(ЗначениеЗаполнено(ДанныеСтроки.Значение), Форма[Элемент.Имя], "");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	ПараметрыОткрытия.Вставить("Представление", ДанныеСтроки.Представление);
	ПараметрыОткрытия.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
	// +CRM
	ПараметрыОткрытия.Вставить("БылиВнесеныИзменения", Ложь);
	Если CRM_ОбщегоНазначенияСервер.ПоТипуКонтактнойИнформацииПолучитьНомер(ДанныеСтроки.Тип) = 2 Тогда
		// +СофтФон
		врКодСтраны		= Неопределено;
		врКодГорода		= Неопределено;
		врНомерТелефона	= Неопределено;
		врПредставление	= Неопределено;
		// -СофтФон
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ДанныеСтроки.Значение) Тогда
			СтарыйФормат = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(
				УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(ДанныеСтроки.Значение).ДанныеXML);
			// +СофтФон
			ЗначенияПолей = СтарыйФормат.ЗначенияПолей;
			Если ЗначениеЗаполнено(СтарыйФормат.Представление) И НЕ (ПараметрыОткрытия.Представление = СтарыйФормат.Представление) Тогда
				ПараметрыОткрытия.Представление			= СтарыйФормат.Представление;
				ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
			КонецЕсли;	
			врПредставление	= "";
			// -СофтФон
		Иначе
			ЗначенияПолей = Новый СписокЗначений;
		КонецЕсли;
		// +СофтФон
		Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
			Если СтрокаЗначения.Представление = "Представление" Тогда
				Если ЗначениеЗаполнено(СтрокаЗначения.Значение) И НЕ (ПараметрыОткрытия.Представление = СтрокаЗначения.Значение) Тогда
					ПараметрыОткрытия.Представление			= СтрокаЗначения.Значение;
					ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
				КонецЕсли;	
				врПредставление	= "";
			ИначеЕсли СтрокаЗначения.Представление = "КодСтраны" Тогда
				врКодСтраны = СокрЛП(СтрокаЗначения.Значение); 
			ИначеЕсли СтрокаЗначения.Представление = "КодГорода" Тогда
				врКодГорода = СокрЛП(СтрокаЗначения.Значение); 
			ИначеЕсли СтрокаЗначения.Представление = "НомерТелефона" Тогда
				врНомерТелефона = СокрЛП(СтрокаЗначения.Значение); 
			КонецЕсли;
		КонецЦикла;
		// +СофтФон
		Если врКодСтраны = Неопределено Тогда
			ЗначенияПолей.Добавить("", "КодСтраны");
		КонецЕсли;	
		Если врКодГорода = Неопределено Тогда
			ЗначенияПолей.Добавить("", "КодГорода");
		КонецЕсли;	
		Если врНомерТелефона = Неопределено Тогда
			ЗначенияПолей.Добавить("", "НомерТелефона");
		КонецЕсли;	
		Если врПредставление = Неопределено Тогда
			ЗначенияПолей.Добавить("", "Представление");
		КонецЕсли;	
		врПредставление = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ПараметрыОткрытия.Представление, Ложь);
		Если ЗначениеЗаполнено(врПредставление) Тогда
			Если СтрДлина(врПредставление) > 5 Тогда
				сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();	
				// В представлении есть номер телефона.
				ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
				// Получаем структуру полей по представлению.
				СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ПараметрыОткрытия.Представление);
				// Если не заполнены код страны или код города, то заполняем их по умолчанию.
				Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодСтраны) Тогда
					СтруктураНомера.КодСтраны = ПараметрыСервера.КодСтраны;
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
					СтруктураНомера.КодГорода = ПараметрыСервера.КодГорода;
				КонецЕсли;	
				// Заполняем значения из структуры.
				Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
					Если СтрокаЗначения.Представление = "КодСтраны" Тогда
						Если НЕ (СтрокаЗначения.Значение = СтруктураНомера.КодСтраны) Тогда
							СтрокаЗначения.Значение					= СтруктураНомера.КодСтраны;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "КодГорода" Тогда
						Если НЕ (СтрокаЗначения.Значение = СтруктураНомера.КодГорода) Тогда
							СтрокаЗначения.Значение					= СтруктураНомера.КодГорода;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "НомерТелефона" Тогда
						Если НЕ (СтрокаЗначения.Значение = СтруктураНомера.НомерТелефона) Тогда
							СтрокаЗначения.Значение					= СтруктураНомера.НомерТелефона;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "Представление" Тогда
						Если НЕ (СтрокаЗначения.Значение = ПараметрыОткрытия.Представление) Тогда
							СтрокаЗначения.Значение					= ПараметрыОткрытия.Представление;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
			Иначе	
				сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();					
				// Заполним код страны и код города по умолчанию.
				ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
				Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
					Если СтрокаЗначения.Представление = "КодСтраны" Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаЗначения.Значение) Тогда
							СтрокаЗначения.Значение					= ПараметрыСервера.КодСтраны;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "КодГорода" Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаЗначения.Значение) 
							И ((СтрДлина(ПараметрыСервера.КодГорода) + СтрДлина(врПредставление)) = 10) Тогда
							СтрокаЗначения.Значение					= ПараметрыСервера.КодГорода;
							ПараметрыОткрытия.БылиВнесеныИзменения 	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "НомерТелефона" Тогда
						Если НЕ (СтрокаЗначения.Значение = врПредставление) Тогда
							СтрокаЗначения.Значение					= врПредставление;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "Представление" Тогда
						Если НЕ (СтрокаЗначения.Значение = ПараметрыОткрытия.Представление) Тогда
							СтрокаЗначения.Значение					= ПараметрыОткрытия.Представление;
							ПараметрыОткрытия.БылиВнесеныИзменения 	= Истина;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		Иначе	
			сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();				
		// Если это новый номер, то заполним код страны и код города по умолчанию.
			ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
			Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
				Если СтрокаЗначения.Представление = "КодСтраны" Тогда
					Если ПустаяСтрока(СтрокаЗначения.Значение) Тогда
						СтрокаЗначения.Значение					= ПараметрыСервера.КодСтраны;
						ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
					КонецЕсли;	
				ИначеЕсли СтрокаЗначения.Представление = "КодГорода" И СтрНайти(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ДанныеСтроки.Вид, "ИмяПредопределенныхДанных"), "Мобильный") = 0 Тогда
					Если ПустаяСтрока(СтрокаЗначения.Значение) Тогда
						СтрокаЗначения.Значение					= ПараметрыСервера.КодГорода;
						ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		Если ПараметрыОткрытия.БылиВнесеныИзменения Тогда
			ПараметрыОткрытия.Вставить("ЗначенияПолей", CRM_ОбщегоНазначенияСервер.ЗначениеПолейВXML(ЗначенияПолей, ДанныеСтроки.Тип));
		КонецЕсли;	
		// -СофтФон
	КонецЕсли;
	// -CRM
	Если НЕ ПараметрыОткрытия.Свойство("ЗначенияПолей") Тогда
		ПараметрыОткрытия.Вставить("Значение", ДанныеСтроки.Значение);
	КонецЕсли;
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	// +СофтФон
	Форма[Элемент.Имя] = ПараметрыОткрытия.Представление;
	Если ДанныеСтроки.Свойство("сфпВремяЗадержкиНабораДобавочногоНомера") Тогда
		ПараметрыОткрытия.Вставить("сфпВремяЗадержкиНабораДобавочногоНомера", ДанныеСтроки.сфпВремяЗадержкиНабораДобавочногоНомера);
	КонецЕсли;
	// -СофтФон
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеЗаполнения",  ДанныеЗаполнения);
	Оповещение.ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть", ЭтоТабличнаяЧасть);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	Оповещение.ДополнительныеПараметры.Вставить("ОбновитьКонтекстноеМеню", ОбновитьКонтекстноеМеню);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяЭлементаРазмещения", ДанныеСтроки.ИмяЭлементаДляРазмещения);

	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,, Оповещение);

КонецПроцедуры

// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.).
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма      - УправляемаяФорма - Форма владельца контактной информации.
//     ИмяКоманды - Строка           - Имя автоматически сгенерированной команды действия.
//
Процедура ВыполнитьКоманду(Знач Форма, Знач ИмяКоманды) Экспорт
	
	Если СтрНачинаетсяС(ИмяКоманды, "КонтактнаяИнформацияДобавитьПолеВвода") Тогда
		
		ИмяЭлементаДляРазмещения = Сред(ИмяКоманды, СтрДлина("КонтактнаяИнформацияДобавитьПолеВвода") + 1);
		Оповещение = Новый ОписаниеОповещения("КонтактнаяИнформацияДобавитьПолеВводаЗавершение", ЭтотОбъект, Новый Структура);
		Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
		Оповещение.ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		Оповещение.ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
		// +CRM
		//Форма.ПоказатьВыборИзМеню(Оповещение, Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов, Форма.Элементы.КонтактнаяИнформацияДобавитьПолеВвода);
		СписокДобавляемыхЭлементовКонтактнойИнформации	= Новый СписокЗначений;
		Для Каждого ЭлементСписка Из Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов Цикл
			СписокДобавляемыхЭлементовКонтактнойИнформации.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
		КонецЦикла;
		СписокДобавляемыхЭлементовКонтактнойИнформации.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		Если Найти(Форма.ИмяФормы, ".Партнеры") > 0 Тогда
			// Удаляем лишние виды КИ
			МассивВладельцевКИ = Новый Массив;
			МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПартнеры"));
			Если Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
				МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания"));
			ИначеЕсли Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо"));
			КонецЕсли;
			// Удаляем 
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если МассивВладельцевКИ.Найти(ЭлементОписания.Родитель) = Неопределено Тогда
					Для каждого ЭлементСписка из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
						Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид Тогда
							СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Попытка
			РедактироватьДР = Форма.РедактироватьДР;
		Исключение
			РедактироватьДР = Истина;
		КонецПопытки;	
		Если НЕ РедактироватьДР Тогда
			// Удаляем из списка выбора скрытые элементы КИ.
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если НЕ ЭлементОписания.Выводить Тогда
					ЭлементСписка = СписокДобавляемыхЭлементовКонтактнойИнформации.НайтиПоЗначению(ЭлементОписания.Вид);
					Если НЕ (ЭлементСписка = Неопределено) Тогда
						СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
					КонецЕсли;
				КонецЕсли;			
			КонецЦикла;	
		КонецЕсли;	
		Форма.ПоказатьВыборИзМеню(Оповещение, СписокДобавляемыхЭлементовКонтактнойИнформации, Форма.Элементы[ИмяКоманды]);
		// -CRM	
		
		Возврат;
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "Команда") Тогда
		
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "Команда", "");
		КомандаКонтекстногоМеню = Неопределено;
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "МенюПодменюАдрес") Тогда
		
		ИмяРеквизита         = СтрЗаменить(ИмяКоманды, "МенюПодменюАдрес", "");
		Позиция              = СтрНайти(ИмяРеквизита, "_КонтактнаяИнформацияПоле");
		ИмяРеквизитаИсточник = Лев(ИмяРеквизита, Позиция -1);
		ИмяРеквизита         = Сред(ИмяРеквизита, Позиция + 1);
		КомандаКонтекстногоМеню = Неопределено;
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "КартаЯндексМеню") 
		ИЛИ СтрНачинаетсяС(ИмяКоманды, "КартаGoogleМеню") Тогда
		
		КомандаКонтекстногоМеню = КомандаКонтекстногоМеню(ИмяКоманды);
		ИмяРеквизита = Сред(КомандаКонтекстногоМеню.ИмяРеквизита, 5);
		
	Иначе
		КомандаКонтекстногоМеню = КомандаКонтекстногоМеню(ИмяКоманды);
		ИмяРеквизита = КомандаКонтекстногоМеню.ИмяРеквизита;
	КонецЕсли;
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	ТипКонтактнойИнформации = НайденнаяСтрока.Тип;
	ИмяЭлементаДляРазмещения = НайденнаяСтрока.ИмяЭлементаДляРазмещения;
	Результат.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
	
	Если КомандаКонтекстногоМеню <> Неопределено Тогда
		Если КомандаКонтекстногоМеню.Команда = "Комментарий" Тогда
			ВвестиКомментарий(Форма, КомандаКонтекстногоМеню.ИмяРеквизита, НайденнаяСтрока, Результат);
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "История" Тогда
			УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуИсторииИзменений(Форма, НайденнаяСтрока);
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "КартаЯндекс" Тогда
			УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(НайденнаяСтрока.Представление, "Яндекс.Карты");
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "КартаGoogle" Тогда
			УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(НайденнаяСтрока.Представление, "GoogleMaps");
		Иначе
			ПервыйЭлемент = НайденнаяСтрока.ИмяРеквизита;
			Индекс =Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Индекс(НайденнаяСтрока);
			// +CRM
			//Если КомандаКонтекстногоМеню.НаправлениеПеремещения = 1 Тогда
			//	Если Индекс < Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Количество() - 1 Тогда
			//		ВторойЭлемент = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Получить(Индекс + 1).ИмяРеквизита;
			//	КонецЕсли;
			//Иначе
			//	Если Индекс > 0 Тогда
			//		ВторойЭлемент = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Получить(Индекс - 1).ИмяРеквизита;
			//	КонецЕсли;
			//КонецЕсли;
			ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
			
			ОтборПоВидуИКолонке = Новый Структура("Вид, Колонка", НайденнаяСтрока.Вид, НайденнаяСтрока.Колонка);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВидуИКолонке);
			СписокНайденныхСтрок = Новый СписокЗначений;
			СписокНайденныхСтрок.ЗагрузитьЗначения(НайденныеСтроки);
			СтрокаСписка = СписокНайденныхСтрок.НайтиПоЗначению(НайденнаяСтрока);
			
			Если КомандаКонтекстногоМеню.НаправлениеПеремещения = 1 Тогда
				Если СписокНайденныхСтрок.Индекс(СтрокаСписка) < (СписокНайденныхСтрок.Количество()-1) Тогда
					ВторойЭлемент = СписокНайденныхСтрок[СписокНайденныхСтрок.Индекс(СтрокаСписка)+1].Значение.ИмяРеквизита;
				КонецЕсли;
			Иначе
				Если СписокНайденныхСтрок.Индекс(СтрокаСписка) > 0 Тогда
					ВторойЭлемент = СписокНайденныхСтрок[СписокНайденныхСтрок.Индекс(СтрокаСписка)-1].Значение.ИмяРеквизита;
				КонецЕсли;
			КонецЕсли;
			// -CRM
			Результат = Новый Структура("ПоменятьМестамиЭлементы, ПервыйЭлемент, ВторойЭлемент", Истина, ПервыйЭлемент, ВторойЭлемент);
			ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
		КонецЕсли;
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		
		Результат = Новый Структура("ИмяРеквизита", ИмяРеквизитаИсточник);
		СтрокаПотребитель = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
		
		Комментарий = СтрокаПотребитель.Комментарий; // Сохраняем старый комментарий.
		Если СтрокаПотребитель.Свойство("МеждународныйФорматАдреса") И СтрокаПотребитель.МеждународныйФорматАдреса Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаПотребитель, НайденнаяСтрока, "Комментарий");
			ПредставлениеАдреса = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(НайденнаяСтрока.Представление);
			СтрокаПотребитель.Представление        = ПредставлениеАдреса;
			Форма[СтрокаПотребитель.ИмяРеквизита]  = ПредставлениеАдреса;
			СтрокаПотребитель.Значение             = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, ТипКонтактнойИнформации);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(СтрокаПотребитель, НайденнаяСтрока, "Значение, Представление,Комментарий");
			Форма[СтрокаПотребитель.ИмяРеквизита] = НайденнаяСтрока.Представление;
			
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
		Результат = Новый Структура();
		Результат.Вставить("ОбновитьКонтекстноеМеню",  Истина);
		Результат.Вставить("ИмяРеквизита",             СтрокаПотребитель.ИмяРеквизита);
		Результат.Вставить("Комментарий",              Комментарий);
		Результат.Вставить("ИмяЭлементаДляРазмещения", НайденнаяСтрока.ИмяЭлементаДляРазмещения);
		ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		АдресПочты = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("", АдресПочты, ТипКонтактнойИнформации);
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		
		Параметры = Новый Структура("НомерТелефона, ТипКонтактнойИнформации, Форма");
		Параметры.НомерТелефона = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		Параметры.ТипКонтактнойИнформации = ТипКонтактнойИнформации;
		Параметры.Форма = Форма;
		
		Если ПустаяСтрока(Параметры.НомерТелефона) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Для совершения звонка или отправки SMS требуется ввести номер телефона.';en='Call or send SMS, enter the phone number.'"));
			Возврат;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("Позвонить", НСтр("ru='Позвонить';en='Call'"),, БиблиотекаКартинок.CRM_ТелефонныйЗвонок);
			Список.Добавить("ОтправитьSMS", НСтр("ru='Отправить SMS...';en='Send SMS ...'"),, БиблиотекаКартинок.SMS4B_ИсходящееСообщение);
			ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
			Форма.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Форма.Элементы[ИмяКоманды]);
		Иначе
			ПозвонитьПоТелефону(Форма);
		КонецЕсли;
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype") Тогда
		Параметры = Новый Структура("ЛогинSkype");
		Параметры.ЛогинSkype = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		Список = Новый СписокЗначений;
		Список.Добавить("Позвонить", НСтр("ru='Позвонить';en='Call'"));
		Список.Добавить("НачатьЧат", НСтр("ru='Начать чат';en='Start a chat'"));
		ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюSkype", ЭтотОбъект, Параметры);
		Форма.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Форма.Элементы[ИмяКоманды]);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		АдресСсылки = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", АдресСсылки, ТипКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти // ПрограммныйИнтерфейс


#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗапускаПриложения(ВыбранныйЭлемент, Параметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
	Результат = Истина;
КонецПроцедуры

Процедура ПослеВыбораИзМенюSkype(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		Если ПустаяСтрока(ПрограммаТелефонииУстановлена("skype")) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Для совершения звонка по Skype требуется установить программу.';en='Make a Skype call, install the application.'"));
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СтрокаЗапуска = "skype:" + Параметры.ЛогинSkype;
	Если ВыбранныйЭлемент.Значение = "Позвонить" Тогда
		СтрокаЗапуска = СтрокаЗапуска + "?call";
	ИначеЕсли ВыбранныйЭлемент.Значение = "НачатьЧат" Тогда
		СтрокаЗапуска = СтрокаЗапуска + "?chat";
	Иначе
		СтрокаЗапуска = СтрокаЗапуска + "?userinfo";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапускSkype", ЭтотОбъект, СтрокаЗапуска);
	ТекстСообщения = НСтр("ru='Для запуска Skype необходимо установить расширение работы с файлами.';en='Run Skype, install the file operation extension.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);

КонецПроцедуры

Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.Форма.Объект.Ссылка) Тогда
				ТекстСообщения = НСтр("ru='Необходимо записать элемент';en='It is necessary to write down an element'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
				Если ПустаяСтрока(Параметры.НомерТелефона) Тогда Возврат; КонецЕсли;
				Структура = Новый Структура();
				Структура.Вставить("Ссылка", Параметры.Форма.Объект.Ссылка);
				Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Параметры.НомерТелефона));
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("Основание", Структура);
				ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
				ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
		Иначе
			ПозвонитьПоТелефону(Параметры.Форма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗапускSkype(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОбновитьКонтекстноеМеню") 
			И ДополнительныеПараметры.ОбновитьКонтекстноеМеню Тогда
				Результат = Новый Структура();
				Результат.Вставить("ОбновитьКонтекстноеМеню",  Истина);
				Результат.Вставить("ИмяЭлементаДляРазмещения", ДополнительныеПараметры.ИмяЭлементаРазмещения);
				ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДополнительныеПараметры.ДанныеЗаполнения;
	ДанныеНаФорме    = ДополнительныеПараметры.ДанныеСтроки;
	Результат        = ДополнительныеПараметры.Результат;
	Элемент          = ДополнительныеПараметры.Элемент;
	Форма            = ДополнительныеПараметры.Форма;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	ЗначенияПолей      = РезультатЗакрытия.КонтактнаяИнформация;
	Значение           = РезультатЗакрытия.Значение;
	Комментарий        = РезультатЗакрытия.Комментарий;
	
	Если ДанныеНаФорме.Свойство("ХранитьИсториюИзменений") И ДанныеНаФорме.ХранитьИсториюИзменений Тогда
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = ДанныеЗаполнения.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		Отбор = Новый Структура("Вид", ДанныеНаФорме.Вид);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;
		
		Отбор = Новый Структура("Вид", ДанныеНаФорме.Вид);
		НайденныеСтроки = РезультатЗакрытия.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			СтрокаСДействующимАдресом = Неопределено;
			МинимальнаяДата = Неопределено;
			
			Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
				
				НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
				НоваяКонтактнаяИнформация.ИмяЭлементаДляРазмещения = ДополнительныеПараметры.ИмяЭлементаРазмещения;
				
				Если СтрокаСДействующимАдресом = Неопределено
					ИЛИ СтрокаКонтактнойИнформации.ДействуетС > СтрокаСДействующимАдресом.ДействуетС Тогда
						СтрокаСДействующимАдресом = СтрокаКонтактнойИнформации;
				КонецЕсли;
				Если МинимальнаяДата = Неопределено
					ИЛИ СтрокаКонтактнойИнформации.ДействуетС < МинимальнаяДата Тогда
						МинимальнаяДата = СтрокаКонтактнойИнформации.ДействуетС;
				КонецЕсли;
				
			КонецЦикла;
			
			// Исправление некорректных адресов, без первоначальной даты заполнения
			Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
				Отбор = Новый Структура("ДействуетС", МинимальнаяДата);
				СтрокиСМинимальнойДатой = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
				Если СтрокиСМинимальнойДатой.Количество() > 0 Тогда
					СтрокиСМинимальнойДатой[0].ДействуетС = Дата(1, 1, 1);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаСДействующимАдресом <> Неопределено Тогда
				ТекстПредставления = СтрокаСДействующимАдресом.Представление;
				ЗначенияПолей      = СтрокаСДействующимАдресом.ЗначенияПолей;
				Значение           = СтрокаСДействующимАдресом.Значение;
				Комментарий        = СтрокаСДействующимАдресом.Комментарий;
			КонецЕсли;
			
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, НайденныеСтроки[0],, "ДействуетС");
			НоваяКонтактнаяИнформация.ИмяЭлементаДляРазмещения = ДополнительныеПараметры.ИмяЭлементаРазмещения;
			ДанныеНаФорме.ДействуетС = Дата(1, 1, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "Значение"]      = РезультатЗакрытия.Значение;
		
	Иначе
		Форма.Элементы.Найти(Элемент.Имя).РасширеннаяПодсказка.Заголовок = Комментарий;
		
		ДанныеНаФорме.Представление = ТекстПредставления;
		ДанныеНаФорме.Значение      = РезультатЗакрытия.Значение;
		ДанныеНаФорме.Комментарий   = Комментарий;
	КонецЕсли;
	
	Если РезультатЗакрытия.Свойство("АдресВВидеГиперссылки")
		И РезультатЗакрытия.АдресВВидеГиперссылки
		И НЕ ЗначениеЗаполнено(ТекстПредставления) Тогда
			ДанныеЗаполнения[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	Иначе
		ДанныеЗаполнения[Элемент.Имя] = ТекстПредставления;
	КонецЕсли;
	
	Если РезультатЗакрытия.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Результат.Вставить("ОбновитьКонтекстноеМеню", Истина);
	КонецЕсли;
	
	// +СофтФон
	Если РезультатЗакрытия.Свойство("сфпВремяЗадержкиНабораДобавочногоНомера") И
		 ДанныеНаФорме.Свойство("сфпВремяЗадержкиНабораДобавочногоНомера") Тогда
		ДанныеНаФорме.сфпВремяЗадержкиНабораДобавочногоНомера = РезультатЗакрытия.сфпВремяЗадержкиНабораДобавочногоНомера;
	КонецЕсли;
	// -СофтФон
	
	Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
КонецПроцедуры

Процедура КонтактнаяИнформацияДобавитьПолеВводаЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		// Отказ от выбора
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
	Результат.Вставить("ИмяЭлементаДляРазмещения", ДополнительныеПараметры.ИмяЭлементаДляРазмещения);
	Результат.Вставить("ИмяКоманды", ДополнительныеПараметры.ИмяКоманды);
	Если ВыбранныйЭлемент.Значение.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Результат.Вставить("ОбновитьКонтекстноеМеню", Истина);
	КонецЕсли;
	
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат);
КонецПроцедуры


#КонецОбласти // СлужебныйПрограммныйИнтерфейс


#Область СлужебныеПроцедурыИФункции

// Возвращает строку дополнительных значений по имени реквизита.
//
// Параметры:
//    Форма   - УправляемаяФорма - передаваемая форма.
//    Элемент - ДанныеФормыСтруктураСКоллекцией - данные формы.
//
// Возвращаемое значение:
//    СтрокаКоллекции - найденные данные.
//    Неопределено    - при отсутствии данных.
//
Функция ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ЭтоТабличнаяЧасть И ДанныеСтроки <> Неопределено Тогда
		
		ПутьКСтроке = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		
		ДанныеСтроки.Представление = ПутьКСтроке[Элемент.Имя];
		ДанныеСтроки.Значение      = ПутьКСтроке[Элемент.Имя + "Значение"];
		
	КонецЕсли;
	
	Возврат ДанныеСтроки;
	
КонецФункции

Функция ЭтоТабличнаяЧасть(Элемент)
	
	Родитель = Элемент.Родитель;
	
	Пока ТипЗнч(Родитель) <> Тип("УправляемаяФорма") Цикл
		
		Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определение команды контекстного меню.
Функция КомандаКонтекстногоМеню(ИмяКоманды)
	
	Результат = Новый Структура("Команда, НаправлениеПеремещения, ИмяРеквизита", Неопределено, 0, Неопределено);
	
	ИмяРеквизита = ?(СтрНачинаетсяС(ИмяКоманды, "КонтекстноеМенюПодменю"),
		СтрЗаменить(ИмяКоманды, "КонтекстноеМенюПодменю", ""), СтрЗаменить(ИмяКоманды, "КонтекстноеМеню", ""));
		
	Если СтрНачинаетсяС(ИмяРеквизита, "Вверх") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Вверх", "");
		Результат.НаправлениеПеремещения = -1;
		Результат.Команда = "Вверх";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "История") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "История", "");
		Результат.Команда = "История";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "Вниз") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Вниз", "");
		Результат.НаправлениеПеремещения = 1;
		Результат.Команда = "Вниз";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "КартаЯндекс") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "КартаЯндекс", "");
		Результат.Команда = "КартаЯндекс";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "КартаGoogle") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "КартаGoogle", "");
		Результат.Команда = "КартаGoogle";
	Иначе
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Комментарий", "");
		Результат.Команда = "Комментарий";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Ввод комментария из контекстного меню.
Процедура ВвестиКомментарий(Знач Форма, Знач ИмяРеквизита, Знач НайденнаяСтрока, Знач Результат)
	Комментарий = НайденнаяСтрока.Комментарий;
	
	Оповещение = Новый ОписаниеОповещения("ВвестиКомментарийЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяРеквизитаКомментария", "Комментарий" + ИмяРеквизита);
	Оповещение.ДополнительныеПараметры.Вставить("НайденнаяСтрока", НайденнаяСтрока);
	Оповещение.ДополнительныеПараметры.Вставить("ПредыдущийКомментарий", Комментарий);
	Оповещение.ДополнительныеПараметры.Вставить("Результат", Результат);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", НайденнаяСтрока.ИмяЭлементаДляРазмещения);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Комментарий, 
		НСтр("ru='Комментарий';en='Comment'"));
КонецПроцедуры

// Завершение немодального диалога.
Процедура ВвестиКомментарийЗавершение(Знач Комментарий, Знач ДополнительныеПараметры) Экспорт
	Если Комментарий = Неопределено Или Комментарий = ДополнительныеПараметры.ПредыдущийКомментарий Тогда
		// Отказ от ввода или нет изменений.
		Возврат;
	КонецЕсли;
	
	КомментарийБылПустой  = ПустаяСтрока(ДополнительныеПараметры.ПредыдущийКомментарий);
	КомментарийСталПустой = ПустаяСтрока(Комментарий);
	
	ДополнительныеПараметры.НайденнаяСтрока.Комментарий = Комментарий;
	
	Если КомментарийБылПустой И Не КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
	ИначеЕсли Не КомментарийБылПустой И КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
	Иначе
		Если ДополнительныеПараметры.Форма.Элементы.Найти(ДополнительныеПараметры.ИмяРеквизитаКомментария) <> Неопределено Тогда
			Элемент = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.ИмяРеквизитаКомментария];
			Элемент.Заголовок = Комментарий;
		Иначе
			ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Результат)
КонецПроцедуры

Процедура ПозвонитьПоТелефону(Знач Форма)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(Форма, Форма.Объект);	
	// -СофтФон
	
КонецПроцедуры

Процедура СовершитьЗвонок(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

// Контекстный вызов
Процедура ОбновитьКонтактнуюИнформациюФормы(Форма, Результат)

	Форма.Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

// Проверяет, установлена ли программа телефонии на компьютер.
//  Проверка возможна только в тонком клиенте для Windows.
//
// Параметры:
//  ИмяПротокола - Строка - Имя проверяемого URI протокола, возможные варианты "skype", "tel", "sip".
//                          Если параметр не указан, то проверяются все протоколы. 
// 
// Возвращаемое значение:
//  Строка - имя доступного URI протокола зарегистрирована в реестре. Пустая строка - если протокол не доступен.
//  Неопределенно если проверка не возможна.
//
Функция ПрограммаТелефонииУстановлена(ИмяПротокола = Неопределено)
	
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			Если ЗначениеЗаполнено(ИмяПротокола) Тогда
				Возврат ?(ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола), ИмяПротокола, "");
			Иначе
				СписокПротоколов = Новый Массив;
				СписокПротоколов.Добавить("tel");
				СписокПротоколов.Добавить("sip");
				СписокПротоколов.Добавить("skype");
				Для каждого ИмяПротокола Из СписокПротоколов Цикл
					Если ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола) Тогда
						Возврат ИмяПротокола;
					КонецЕсли;
				КонецЦикла;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола)
	
	Попытка
		Оболочка = Новый COMОбъект("Wscript.Shell");
		Результат = Оболочка.RegRead("HKEY_CLASSES_ROOT\" + ИмяПротокола + "\");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Процедура ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
	ВсеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НайденныеСтроки = ВсеСтроки.НайтиСтроки( 
		Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"), Ложь));
		
	ОбщееКоличествоКоманд = 0;
	Для Каждого СтрокаКИ Из ВсеСтроки Цикл
		
		Если ОбщееКоличествоКоманд > 50 Тогда // Ограничение для большого количества адресов на форме
			Прервать;
		КонецЕсли;
		
		Если СтрокаКИ.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			Продолжить;
		КонецЕсли;
		
		ПодменюКопироватьАдреса = Форма.Элементы.Найти("ПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		КонтекстноеПодменюКопироватьАдреса = Форма.Элементы.Найти("КонтекстноеПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		Если ПодменюКопироватьАдреса <> Неопределено И КонтекстноеПодменюКопироватьАдреса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		КоличествоКомандВПодменю = 0;
		СписокАдресовВПодменю = Новый Соответствие();
		СписокАдресовВПодменю.Вставить(ВРег(СтрокаКИ.Представление), Истина);
		
		Для Каждого Адрес Из НайденныеСтроки Цикл
			
			Если КоличествоКомандВПодменю > 7 Тогда // Ограничение для большого количества адресов на форме
				Прервать;
			КонецЕсли;
			
			Если Адрес.ЭтоИсторическаяКонтактнаяИнформация Или Адрес.ИмяРеквизита = СтрокаКИ.ИмяРеквизита Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "МенюПодменюАдрес" + СтрокаКИ.ИмяРеквизита + "_" + Адрес.ИмяРеквизита;
			Команда = Форма.Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				Команда.Подсказка = НСтр("ru = 'Скопировать адрес'");
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные = Истина;
				
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
				КоличествоКомандВПодменю = КоличествоКомандВПодменю + 1;
			КонецЕсли;
			
			ПредставлениеАдреса = ?(СтрокаКИ.МеждународныйФорматАдреса,
				СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Адрес.Представление), Адрес.Представление);
			
			Если СписокАдресовВПодменю[ВРег(Адрес.Представление)] <> Неопределено Тогда
				ПредставлениеАдреса = "";
			Иначе
				СписокАдресовВПодменю.Вставить(ВРег(Адрес.Представление), Истина);
			КонецЕсли;
			
			Если ПодменюКопироватьАдреса <> Неопределено Тогда
				ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды,
					ПредставлениеАдреса, ПараметрыКонтактнойИнформации, ПодменюКопироватьАдреса);
				КонецЕсли;
				
			Если КонтекстноеПодменюКопироватьАдреса <> Неопределено Тогда
				ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, 
					ПредставлениеАдреса, ПараметрыКонтактнойИнформации, КонтекстноеПодменюКопироватьАдреса);
			КонецЕсли;
			
		КонецЦикла;
		ОбщееКоличествоКоманд = ОбщееКоличествоКоманд + КоличествоКомандВПодменю;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ЗаголовокЭлемента, ПараметрыКонтактнойИнформации, Подменю)
	
	ИмяЭлемента = Подменю.Имя + "_" + ИмяКоманды;
	Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
	Если Кнопка = Неопределено Тогда
		Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
		Кнопка.ИмяКоманды = ИмяКоманды;
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяЭлемента, 1);
	КонецЕсли;
	Кнопка.Заголовок = ЗаголовокЭлемента;
	Кнопка.Видимость = ЗначениеЗаполнено(ЗаголовокЭлемента);

КонецПроцедуры

#Область МетодыCRM

// Событие ПриИзменении в колонке Представление таблицы контактной информации.
Функция CRM_ПолучитьТипПроверитьЗаполнение(Форма, Элемент) Экспорт
	
	ДанныеЗаполнения = Форма;
	
	// Если это очистка, то сбрасываем представление.
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, Ложь);
	Если ДанныеСтроки=Неопределено ИЛИ НЕ ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(Текст);
	
КонецФункции

// Событие Нажатие в поле "Основной для связи" таблицы контактной информации.
//
Процедура ОсновнойДляСвязиНажатие(Форма, Элемент) Экспорт
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ОсновнойДляСвязи", "");
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].CRM_ОсновнойДляСвязи = (НЕ НайденныеСтроки[0].CRM_ОсновнойДляСвязи);
	Элемент.Картинка = ?(НайденныеСтроки[0].CRM_ОсновнойДляСвязи, БиблиотекаКартинок.CRM_ЗвездочкаГолубая, БиблиотекаКартинок.CRM_ЗвездочкаСерая);
	Форма.Элементы[ИмяРеквизита].Шрифт	= Новый Шрифт(Форма.Элементы[ИмяРеквизита].Шрифт, , , Истина, , , );
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
	
	Если НЕ НайденныеСтроки[0].CRM_ОсновнойДляСвязи Тогда
		Возврат;
	КонецЕсли;
	
	// Производим корректировку остальных полей текущего типа КИ.
	Для Каждого СтрокаТабличнойЧасти Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип", НайденныеСтроки[0].Тип)) Цикл
		
		Если СтрокаТабличнойЧасти.ИмяРеквизита = ИмяРеквизита Тогда
			Продолжить;
		КонецЕсли;
		Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт	= Новый Шрифт(Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт, , , Ложь, , , );
		СтрокаТабличнойЧасти.CRM_ОсновнойДляСвязи = Ложь;
		Форма.Элементы["ОсновнойДляСвязи" + СтрокаТабличнойЧасти.ИмяРеквизита].Картинка = БиблиотекаКартинок.CRM_ЗвездочкаСерая;
	КонецЦикла;
	
КонецПроцедуры // ОсновнойДляСвязиНажатие()

#КонецОбласти // МетодыCRM

#Область НовыеМетодыCRM

Процедура КонтактнаяИнформацияНажатие(Форма, Команда) Экспорт
	
	Если СтрНайти(Команда.Имя, "КнопкаПодменю") > 0 Тогда
		Форма.Элементы[СтрЗаменить(Команда.Имя, "Кнопка", "")].Показать();
		Возврат;
	ИначеЕсли СтрНайти(Команда.Имя, "ЭлементСпискаКИКонтактнаяИнформация") > 0 Тогда	
		ТекущиеСтрокаКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", СтрЗаменить(Команда.Имя, "ЭлементСпискаКИ", "")));
	Иначе	
		ТекущиеСтрокаКИ = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Команда.Имя));
	КонецЕсли;
	Если ТекущиеСтрокаКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаКИ = ТекущиеСтрокаКИ[0];
	Контакт = ?(ТекущаяСтрокаКИ.Свойство("Объект"), ТекущаяСтрокаКИ.Объект, Форма.Объект.Ссылка); 
	Если ТекущаяСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
		ДанныеЗаполнения	= Новый Структура;
		ДанныеЗаполнения.Вставить("Основание",	Форма.Объект.Ссылка);	
		ДополнительныеПараметры	= Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпПозвонить(ТекущаяСтрокаКИ.Представление, Контакт, ДополнительныеПараметры);
	ИначеЕсли ТекущаяСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
	   	ПараметрыФормы = Новый Структура("Основание",Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Форма.Объект.Ссылка);
		СписокАдресов = Новый СписокЗначений;
		СписокАдресов.Добавить(Контакт, ТекущаяСтрокаКИ.Представление);
		ПараметрыФормы.Вставить("Кому", СписокАдресов);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли ТекущаяСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		АдресСайтаКомпании = ТекущаяСтрокаКИ.Представление;
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСайтаКомпании);
	ИначеЕсли ТекущаяСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		СписокКоманд = Новый СписокЗначений;
		СписокКоманд.Добавить("ПоказатьАдресНаЯндексКартах", НСтр("ru='Адрес на Яндекс.Картах';en='Address on Yandex.Maps'"),, БиблиотекаКартинок.ЯндексКарты);
		СписокКоманд.Добавить("ПоказатьАдресНаGoogleMaps", НСтр("ru='Адрес на Google Maps';en='Address on Google Maps'"),, БиблиотекаКартинок.GoogleMaps);
		Элемент = Форма.Элементы.Найти(Команда.Имя);
		ОписаниеОпопвещения = Новый ОписаниеОповещения("КонтактнаяИнформацияНажатиеПродолжение", ЭтотОбъект, ТекущаяСтрокаКИ);
		Форма.ПоказатьВыборИзМеню(ОписаниеОпопвещения, СписокКоманд, Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтактнаяИнформацияНажатиеПродолжение(Результат, СтрокаКИ) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Значение = "ПоказатьАдресНаЯндексКартах" Тогда
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(СтрокаКИ.Представление, "Яндекс.Карты");
	ИначеЕсли Результат.Значение = "ПоказатьАдресНаGoogleMaps" Тогда
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(СтрокаКИ.Представление, "GoogleMaps");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // НовыеМетодыCRM

#КонецОбласти // СлужебныеПроцедурыИФункции


