
#Область ПрограммныйИнтерфейс

// Функция - Обновить обработчик события
//
// Параметры:
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет			 - ОбъектXDTO - объект сообщения.
// 
// Возвращаемое значение:
// Булево  - Признак успешности обновления обработчика события.
//
Функция ОбновитьОбработчикСобытия(ФорматСообщения, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	ИдентификаторШаблона = "";
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
		ИдентификаторШаблона = сткПараметры.Id;
		классОбъекта = сткПараметры.ObjectClass;
		
		Если ТипЗнч(классОбъекта) = Тип("Строка") Тогда
			
			ТипИнтеграции = ?(сткПараметры.Integration = "Ingoing", Перечисления.сшпТипыИнтеграции.Входящая, Перечисления.сшпТипыИнтеграции.Исходящая); 
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
			//если именился класс или тип интеграции обработчика, то удалим старый обработчик
			ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
			                            |	тбРепозиторий.ИмяКлассаОбъекта,
			                            |	тбРепозиторий.ТипИнтеграции
			                            |ИЗ
			                            |	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
			                            |ГДЕ
			                            |	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона
			                            |	И (тбРепозиторий.ИмяКлассаОбъекта <> &ИмяКлассаОбъекта
			                            |			ИЛИ тбРепозиторий.ТипИнтеграции <> &ТипИнтеграции)");
			запросШаблон.УстановитьПараметр("ИдентификаторШаблона", Новый УникальныйИдентификатор(ИдентификаторШаблона));
			запросШаблон.УстановитьПараметр("ИмяКлассаОбъекта", КлассОбъекта);
			запросШаблон.УстановитьПараметр("ТипИнтеграции", ТипИнтеграции);
			
			РезультатЗапрос = запросШаблон.Выполнить();
			
			Если Не РезультатЗапрос.Пустой() Тогда
				
				БлокировкаСтатусы = Новый БлокировкаДанных;
				
				ЭлементБлокировка = БлокировкаСтатусы.Добавить("РегистрСведений.сшпРепозиторийОбъектовИнтеграции");
				ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИмяКлассаОбъекта", "ИмяКлассаОбъекта");
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ТипИнтеграции", "ТипИнтеграции");
				ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаСтатусы.Заблокировать();
				
				ВыборкаЗапрос = РезультатЗапрос.Выбрать();
				
				Пока ВыборкаЗапрос.Следующий() Цикл
					
					ЗаписьОбработчик = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
					ЗаписьОбработчик.ИмяКлассаОбъекта = ВыборкаЗапрос.ИмяКлассаОбъекта;
					ЗаписьОбработчик.ТипИнтеграции = ВыборкаЗапрос.ТипИнтеграции;
					ЗаписьОбработчик.Удалить();
					
					ЗаписьСтатус = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьМенеджерЗаписи();
					ЗаписьСтатус.ИдентификаторОбработчика = Новый УникальныйИдентификатор(сткПараметры.Id);
					ЗаписьСтатус.Удалить();
					
					Если ВыборкаЗапрос.ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Исходящая Тогда
						
						сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
					
					КонецЕсли;
						
				КонецЦикла;
				
			КонецЕсли;
			
			ТекЗапись = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
			ТекЗапись.ИмяКлассаОбъекта = КлассОбъекта;
			ТекЗапись.ТипИнтеграции = ТипИнтеграции;
			ТекЗапись.ПроцедураОбработки = Строка(xdtoПакет.Body) + Символы.ПС + "~Выход:";
			ТекЗапись.Версия = сткПараметры.Version; 
			ТекЗапись.ВерсияПеременных = сткПараметры.variableVersion; 
			ТекЗапись.ИдентификаторШаблона = Новый УникальныйИдентификатор(ИдентификаторШаблона);
			ТекЗапись.Наименование = сткПараметры.Name;
			
			СтрМетодХранения = Неопределено;
			СткПараметры.Свойство("KeepObjectLink", СтрМетодХранения);
			
			Если СтрМетодХранения = Неопределено Тогда
				
				ТекЗапись.МетодХранения = Перечисления.сшпМетодХранения.ПоСсылке;
				
			Иначе
					
				ТекЗапись.МетодХранения = ?(СтрМетодХранения = Истина, Перечисления.сшпМетодХранения.ПоСсылке, Перечисления.сшпМетодХранения.Сериализация);
			
			КонецЕсли;
			
			ТекЗапись.Записать(Истина);
			
			Если ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Исходящая Тогда
				
				сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
			
			КонецЕсли;
			
			НовыйСтатус = ?(СткПараметры.IsStarted = Истина, Перечисления.сшпСтатусыОбработчиков.Включен, Перечисления.сшпСтатусыОбработчиков.Отключен);
			СшпРаботаСДанными.УстановитьСтатусОбработчика(ТекЗапись.ИдентификаторШаблона, НовыйСтатус);
			
			ОбновитьСтатусыСообщенийБезОбработчика(ТипИнтеграции, КлассОбъекта);
			
			ЗафиксироватьТранзакцию();
			
			сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ТекстОшибки = "Обновление обработчика завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id шаблона = " + ИдентификаторШаблона;
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Обновление обработчика", ТекстОшибки);
		СтатусВозврата = Ложь;
		
	КонецПопытки;
	
	Возврат СтатусВозврата;
		
КонецФункции

// Функция - Удалить обработчик события
//
// Параметры:
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет			 - ОбъектXDTO - объект сообщения.
// 
// Возвращаемое значение:
// Булево  - Признак успешности выполнения операции.
//
Функция УдалитьОбработчикСобытия(ФорматСообщения, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	ИдентификаторШаблона = "";
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		ИдентификаторШаблона = xdtoПакет.Body;
		
		Если ТипЗнч(ИдентификаторШаблона) = Тип("Строка") Тогда
			
			ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
			|	тбРепозиторий.ИмяКлассаОбъекта,
			|	тбРепозиторий.ТипИнтеграции
			|ИЗ
			|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
			|ГДЕ
			|	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона");
			ЗапросШаблон.УстановитьПараметр("ИдентификаторШаблона", Новый УникальныйИдентификатор(ИдентификаторШаблона));
			
			РезультатЗапрос = ЗапросШаблон.Выполнить();
			
			Если Не РезультатЗапрос.Пустой() Тогда
				
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
				БлокировкаСтатусы = Новый БлокировкаДанных;
				
				ЭлементБлокировка = блокировкаСтатусы.Добавить("РегистрСведений.сшпРепозиторийОбъектовИнтеграции");
				ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИмяКлассаОбъекта", "ИмяКлассаОбъекта");
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ТипИнтеграции", "ТипИнтеграции");
				ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаСтатусы.Заблокировать();
				
				ВыборкаЗапрос = РезультатЗапрос.Выбрать();
				
				Пока ВыборкаЗапрос.Следующий() Цикл
					
					ЗаписьОбработчик = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
					ЗаписьОбработчик.ИмяКлассаОбъекта = ВыборкаЗапрос.ИмяКлассаОбъекта;
					ЗаписьОбработчик.ТипИнтеграции = ВыборкаЗапрос.ТипИнтеграции;
					ЗаписьОбработчик.Удалить();
					
					ЗаписьСтатус = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьМенеджерЗаписи();
					ЗаписьСтатус.ИдентификаторОбработчика = Новый УникальныйИдентификатор(ИдентификаторШаблона);
					ЗаписьСтатус.Удалить();
					
					Если ВыборкаЗапрос.ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Исходящая Тогда
						
						сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
					
					КонецЕсли;
						
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			КонецЕсли;
			
			сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ТекстОшибки = "Удаление обработчика завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id шаблона = " + ИдентификаторШаблона;
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Удаление обработчика", ТекстОшибки);
		СтатусВозврата = Ложь;
		
	КонецПопытки;
	
	Возврат СтатусВозврата;
	
КонецФункции

// Функция - Получить список версий обработчиков событий
// 
// Возвращаемое значение:
// Строка  - Список шаблонов с указанием текущей версии в формате XML.
//
Функция ПолучитьСписокВерсийОбработчиковСобытий() Экспорт
	
	xmlЗапись = Новый ЗаписьXML;
	xmlЗапись.УстановитьСтроку("UTF-8");
	
	ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
	|	тбРепозиторий.ИдентификаторШаблона,
	|	тбРепозиторий.Версия,
	|	тбРепозиторий.ВерсияПеременных,
	|	ВЫБОР КОГДА тбРепозиторий.МетодХранения = ЗНАЧЕНИЕ(Перечисление.сшпМетодХранения.ПоСсылке) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК МетодХранения,
	|	ВЫБОР КОГДА сшпСтатусыОбработчиков.Статус = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыОбработчиков.Включен) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСтатусыОбработчиков КАК сшпСтатусыОбработчиков
	|		ПО тбРепозиторий.ИдентификаторШаблона = сшпСтатусыОбработчиков.ИдентификаторОбработчика");
	РезультатЗапрос = ЗапросШаблон.Выполнить();
	
	Если Не РезультатЗапрос.Пустой() Тогда
		
		xmlЗапись.ЗаписатьНачалоЭлемента("templates1C");
		
		ВыборкаЗапрос = РезультатЗапрос.Выбрать();
		
		Пока ВыборкаЗапрос.Следующий() Цикл
			
			xmlЗапись.ЗаписатьНачалоЭлемента("template");
			
			xmlЗапись.ЗаписатьАтрибут("id", XMLСтрока(ВыборкаЗапрос.ИдентификаторШаблона));
			xmlЗапись.ЗаписатьАтрибут("version", ВыборкаЗапрос.Версия);
			xmlЗапись.ЗаписатьАтрибут("variableVersion", ВыборкаЗапрос.ВерсияПеременных);
			xmlЗапись.ЗаписатьАтрибут("KeepObjectLink", XMLСтрока(ВыборкаЗапрос.МетодХранения));
			xmlЗапись.ЗаписатьАтрибут("isStarted", XMLСтрока(ВыборкаЗапрос.Статус));
			
			xmlЗапись.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlЗапись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-ActualTemplateList", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(РезультатОбработки);
	
КонецФункции

// Функция - Получить список обработчиков событий
//
// Параметры:
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет			 - ОбъектXDTO - объект сообщения.
// 
// Возвращаемое значение:
// Строка  - массив шаблонов с текстом обработчиков в формате XML.
//
Функция ПолучитьСписокОбработчиковСобытий(ФорматСообщения, Пакет) Экспорт
	
	ИдентификаторШаблона = Неопределено;
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		xdtoCommand = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, xdtoПакет.Body);
		
		Если Не xdtoCommand.template = Неопределено Тогда
			
			ИдентификаторШаблона = Новый УникальныйИдентификатор(xdtoCommand.template.id);
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
		
	xmlЗапись = Новый ЗаписьXML;
	xmlЗапись.УстановитьСтроку("UTF-8");
	
	ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
	|	тбРепозиторий.ИмяКлассаОбъекта,
	|	тбРепозиторий.ТипИнтеграции,
	|	тбРепозиторий.ПроцедураОбработки,
	|	тбРепозиторий.Версия,
	|	тбРепозиторий.ИдентификаторШаблона,
	|	ВЫБОР КОГДА тбРепозиторий.МетодХранения = ЗНАЧЕНИЕ(Перечисление.сшпМетодХранения.ПоСсылке) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК МетодХранения,
	|	ВЫБОР КОГДА сшпСтатусыОбработчиков.Статус = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыОбработчиков.Включен) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСтатусыОбработчиков КАК сшпСтатусыОбработчиков
	|		ПО тбРепозиторий.ИдентификаторШаблона = сшпСтатусыОбработчиков.ИдентификаторОбработчика");
	
	Если ЗначениеЗаполнено(ИдентификаторШаблона) Тогда
		
		ЗапросШаблон.Текст = ЗапросШаблон.Текст + "
		|ГДЕ
		|	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона";
		ЗапросШаблон.УстановитьПараметр("ИдентификаторШаблона", ИдентификаторШаблона);
	
	КонецЕсли;
	
	РезультатЗапрос = ЗапросШаблон.Выполнить();
	
	Если Не РезультатЗапрос.Пустой() Тогда
		
		xmlЗапись.ЗаписатьНачалоЭлемента("TemplateList");
		
		ВыборкаЗапрос = РезультатЗапрос.Выбрать();
		
		Пока ВыборкаЗапрос.Следующий() Цикл
			
			xmlЗапись.ЗаписатьНачалоЭлемента("Template1C");
			
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, Строка(выборкаЗапрос.ИдентификаторШаблона), "Id"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.Версия, "Version"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, "Обработчик " + ВыборкаЗапрос.ИмяКлассаОбъекта, "Name"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ?(ВыборкаЗапрос.ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Входящая,"Ingoing", "Outgoing"), "Integration"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.ИмяКлассаОбъекта, "ObjectClass");
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.ПроцедураОбработки, "Code", Истина);
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.МетодХранения, "KeepObjectLink");
			
			xmlЗапись.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlЗапись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-TemplateSyncMessage", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(РезультатОбработки);
	
КонецФункции

// Функция - Получить номер версии подсистемы 1С
// 
// Возвращаемое значение:
// Булево  - признак успешно сформированного сообщения.
//
Функция ПолучитьВерсиюПодсистемы1С() Экспорт
	
	xmlЗапись = Новый ЗаписьXML;
	
	xmlЗапись.УстановитьСтроку("UTF-8");
	xmlЗапись.ЗаписатьНачалоЭлемента("info1C");
	
	xmlЗапись.ЗаписатьАтрибут("version", Строка(Формат(сшпКэшируемыеФункции.ВерсияПодсистемы(),"ЧГ=0")));
	
	СисИнфо = Новый СистемнаяИнформация;
	
	xmlЗапись.ЗаписатьАтрибут("platform", СисИнфо.ВерсияПриложения);
	
	xmlЗапись.ЗаписатьКонецЭлемента();

	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-ActualVersion1C", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(РезультатОбработки);
	
КонецФункции

// Функция - Получить состояние обработки данных по запросу GPS
// 
// Возвращаемое значение:
// ЗаписьXML  - состояние обработки.
//
Функция ПолучитьСостониеОбработки(ФорматСообщения, Пакет) Экспорт
	
	xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
	сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК Количество
		|ИЗ
		|	РегистрСведений.сшпОчередьВходящихСообщений КАК сшпОчередьВходящихСообщений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеСообщений
		|		ПО сшпОчередьВходящихСообщений.ИдентификаторСообщения = сшпСостояниеСообщений.ИдентификаторСообщения
		|			И (сшпСостояниеСообщений.СтатусСообщения В (&СписокСтатусов))";	
	Запрос.УстановитьПараметр("СписокСтатусов", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СостоянияОбработки = Новый Структура;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		СостоянияОбработки.Вставить("InputUnprocessedCountMessages", ВыборкаДетальныеЗаписи.Количество);
		
	Иначе
		
		СостоянияОбработки.Вставить("InputUnprocessedCountMessages", 0);
		
	КонецЕсли;
	
	МаксимальноеКоличествоСообщений = 0;
	сшпОтключитьПотокОбработкиОчередиИсходящих = ПолучитьФункциональнуюОпцию("сшпОтключитьПотокОбработкиОчередиИсходящих");
	
	Если сткПараметры.Свойство("OutputUnprocessedCountMessagesMax", МаксимальноеКоличествоСообщений) Тогда
		 
		МинимальноеКоличествоСообщений = ?(сткПараметры.Свойство("OutputUnprocessedCountMessagesMin", МинимальноеКоличествоСообщений), сткПараметры.OutputUnprocessedCountMessagesMin, 0);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК Количество
		|ИЗ
		|	РегистрСведений.сшпОчередьОтправляемыхСообщений КАК сшпОчередьОтправляемыхСообщений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеСообщений
		|		ПО сшпОчередьОтправляемыхСообщений.ИдентификаторСообщения = сшпСостояниеСообщений.ИдентификаторСообщения
		|			И (сшпСостояниеСообщений.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОжиданиеОтправки))";		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Если Не сшпОтключитьПотокОбработкиОчередиИсходящих И ВыборкаДетальныеЗаписи.Количество > МаксимальноеКоличествоСообщений Тогда 
				
				ОстановитьОбработкуИсходящих(Истина);
			
			ИначеЕсли сшпОтключитьПотокОбработкиОчередиИсходящих И ВыборкаДетальныеЗаписи.Количество < МинимальноеКоличествоСообщений Тогда
				
				ОстановитьОбработкуИсходящих(Ложь);
			
			КонецЕсли;
			
		ИначеЕсли сшпОтключитьПотокОбработкиОчередиИсходящих Тогда
			 
			ОстановитьОбработкуИсходящих(Ложь);
			
		КонецЕсли;
		
	ИначеЕсли сшпОтключитьПотокОбработкиОчередиИсходящих Тогда
		 
		ОстановитьОбработкуИсходящих(Ложь);
		
	КонецЕсли;
	
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-ProcessingStatus1C");
	РезультатОбработки.Properties = СостоянияОбработки;
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(РезультатОбработки);
	
КонецФункции

// Процедура - Остановить обработку исходящих
//
// Параметры:
//	Остановить - Булево - остановить обработку
//
Процедура ОстановитьОбработкуИсходящих(Остановить)
	
	Константы.сшпОтключитьПотокОбработкиОчередиИсходящих.Установить(Остановить);
	
	Если Остановить Тогда
		 
		ЗаписьЖурналаРегистрации("Datareon. Контроль нагрузки", УровеньЖурналаРегистрации.Информация,,, "Обработка очереди исходящих сообщений приостановлена");
		
	Иначе
		
		ЗаписьЖурналаРегистрации("Datareon. Контроль нагрузки", УровеньЖурналаРегистрации.Информация,,, "Обработка очереди исходящих сообщений возобновлена");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Получить параметры подключения к информационной базе
// 
// Возвращаемое значение:
// ЗаписьXML  - параметры подключения к информационной базе 1С.
//
Функция ПолучитьПараметрыПодключения() Экспорт
	
	СтрокаСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";");
	
	Если СтрокаСоединения.Количество() < 2 Тогда 
		
		ИмяСервера = "";
		ИмяИБ = "";
		
	Иначе
		 
		ИмяСервера = Сред(СтрокаСоединения[0], 7, СтрДлина(СтрокаСоединения[0])-7);
		ИмяИБ = Сред(СтрокаСоединения[1], 6, СтрДлина(СтрокаСоединения[1])-6);
		
	КонецЕсли;
	
	xmlЗапись = Новый ЗаписьXML;
	xmlЗапись.УстановитьСтроку("UTF-8");
	
	xmlЗапись.ЗаписатьНачалоЭлемента("database");
	
	xmlЗапись.ЗаписатьАтрибут("name", ИмяИБ);
	xmlЗапись.ЗаписатьАтрибут("serverUri", ИмяСервера);
	
	xmlЗапись.ЗаписатьКонецЭлемента();

	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-InfoBaseConnectionString1C", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(РезультатОбработки);
	
КонецФункции

// Функция - Получить структуру конфигурации
// 
// Возвращаемое значение:
// Строка  - Описание структуры конфигурации в формате передачи сообщений (XML, FastInfoset, JSON).
//
Функция ПолучитьСтруктуруКонфигурации() Экспорт
	
	xmlКонфигурация = Новый ЗаписьXML;
	xmlКонфигурация.УстановитьСтроку("UTF-8");
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Конфигурация");
	
	xmlКонфигурация.ЗаписатьАтрибут("Имя", Метаданные.Имя);
	xmlКонфигурация.ЗаписатьАтрибут("Версия", Метаданные.Версия);
	
	СоответствиеПредставленийТипов = Новый Соответствие;
	ДобавитьВДеревоСтрокиПоМетаданным(Метаданные, "Константы", xmlКонфигурация,, СоответствиеПредставленийТипов);

	МассивОбщихРеквизитов = Новый Массив;
	
	Для Каждого ЭлементМетаданных Из Метаданные.ОбщиеРеквизиты Цикл
		
		МассивТипов = ЭлементМетаданных.Тип.Типы();
		
		ОписаниеТипа = "";
		
		Для Каждого ЭлементМассиваТипов Из МассивТипов Цикл
			
			ПредставлениеТипа = СоответствиеПредставленийТипов[ЭлементМассиваТипов];
			
			Если ПредставлениеТипа = Неопределено Тогда 
				
				ПредставлениеТипа = ПолучитьПредставлениеТипа(ЭлементМассиваТипов);
				СоответствиеПредставленийТипов.Вставить(ЭлементМассиваТипов, ПредставлениеТипа);
			
			КонецЕсли;
			
			ОписаниеТипа = ОписаниеТипа + ?(ЗначениеЗаполнено(ОписаниеТипа), ";", "") + ПредставлениеТипа;
		
		КонецЦикла;
		
		АвтоИспользование = элементМетаданных.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
		СоставРеквизита = Новый Массив;
		
		Для Каждого ЭлементСостава Из элементМетаданных.Состав Цикл 
			
			Если АвтоИспользование И ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда 
				
				СоставРеквизита.Добавить(ЭлементСостава.Метаданные.ПолноеИмя());
			
			КонецЕсли;
		
		КонецЦикла;
		
		МассивОбщихРеквизитов.Добавить(Новый Структура("Имя, Состав, ОписаниеТипа", элементМетаданных.Имя, СоставРеквизита, ОписаниеТипа)); 
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Справочники");
	
	Для Каждого ЭлементМетаданных Из Метаданные.Справочники Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Документы");
	
	Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Перечисления");
	
	Для Каждого ЭлементМетаданных Из Метаданные.Перечисления Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "ЗначенияПеречисления", xmlКонфигурация, Ложь, СоответствиеПредставленийТипов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("РегистрыСведений");
	
	Для Каждого ЭлементМетаданных Из Метаданные.РегистрыСведений Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Измерения", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Ресурсы", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("ПланыВидовХарактеристик");
	
	Для Каждого ЭлементМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(ТабличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("ПланыВидовРасчета");
	
	Для Каждого ЭлементМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("ПланыСчетов");
	
	Для Каждого ЭлементМетаданных Из Метаданные.ПланыСчетов Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("РегистрыБухгалтерии");
	
	Для Каждого ЭлементМетаданных Из Метаданные.РегистрыБухгалтерии Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Измерения", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Ресурсы", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("РегистрыНакопления");
	
	Для Каждого ЭлементМетаданных Из Метаданные.РегистрыНакопления Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Измерения", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Ресурсы", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("РегистрыРасчета");
	
	Для Каждого ЭлементМетаданных Из Метаданные.РегистрыРасчета Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Измерения", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Ресурсы", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("БизнесПроцессы");
	
	Для Каждого ЭлементМетаданных Из Метаданные.БизнесПроцессы Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Задачи");
	
	Для Каждого ЭлементМетаданных Из Метаданные.Задачи Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	Пакет = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-1c-Metadata", xmlКонфигурация.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(Пакет);
	
КонецФункции

// Процедура - Добавить в дерево строки по метаданным
//
// Параметры:
//  УзелМетаданных - Метаданные - узел метаданных изкоторого будут читаться объекты
//  ИмяОбъекта - Строка - имя объекта метаданных 
//  xmlУзел - ЗаписьXML - узел в которые будет выполняться добавление элементов
//	ДобавлятьОписаниеТипа - Булево - добавлять описание типа
//	СоответствиеПредставленийТипов - Соответствие - соответствие представлений типов 
//
Процедура ДобавитьВДеревоСтрокиПоМетаданным(УзелМетаданных, ИмяОбъекта, xmlУзел, ДобавлятьОписаниеТипа = Истина, СоответствиеПредставленийТипов)
	
	xmlУзел.ЗаписатьНачалоЭлемента(ИмяОбъекта);
	
	Попытка
		
		Для Каждого ЭлементМетаданных Из УзелМетаданных[ИмяОбъекта] Цикл
			
			Если ДобавлятьОписаниеТипа Тогда
				 
				ОписаниеТипа = "";
				МассивТипов = элементМетаданных.Тип.Типы();
				
				Для Каждого ЭлементМассиваТипов Из МассивТипов Цикл
					
					ПредставлениеТипа = СоответствиеПредставленийТипов[ЭлементМассиваТипов];
					
					Если ПредставлениеТипа = Неопределено Тогда
						 
						ПредставлениеТипа = ПолучитьПредставлениеТипа(ЭлементМассиваТипов);
						СоответствиеПредставленийТипов.Вставить(ЭлементМассиваТипов, ПредставлениеТипа);
						
					КонецЕсли;
					
					ОписаниеТипа = ОписаниеТипа + ?(ЗначениеЗаполнено(ОписаниеТипа), ";", "") + ПредставлениеТипа;
					
				КонецЦикла;
			
				сшпФункцииРаботыXML.СформироватьУзелXML(xmlУзел, Неопределено, элементМетаданных.Имя, , Новый Структура("Тип", ОписаниеТипа));
				
			Иначе
				
				сшпФункцииРаботыXML.СформироватьУзелXML(xmlУзел, Неопределено, элементМетаданных.Имя,,);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
	КонецПопытки;
	
	xmlУзел.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Процедура - Добавить в дерево строки по метаданным
//
// Параметры:
//  УзелМетаданных - Метаданные - узел метаданных изкоторого будут читаться объекты 
//  ИмяОбъекта - Строка - имя объекта метаданных 
//  xmlУзел	- ЗаписьXML - узел в которые будет выполняться добавление элементов
//	МассивОбщихРеквизитов - Массив - Содержит элементы с структурой описанием общих реквизитов
//
Процедура ДобавитьВДеревоСтрокиПоОбщимРеквизитам(УзелМетаданных, ИмяОбъекта, xmlУзел, МассивОбщихРеквизитов)
	
	xmlУзел.ЗаписатьНачалоЭлемента(ИмяОбъекта);
	
	ИмяУзла = УзелМетаданных.ПолноеИмя();
	
	Попытка
		
		Для Каждого ЭлементСоответствия Из МассивОбщихРеквизитов Цикл
			
			Если ЭлементСоответствия.Состав.Найти(ИмяУзла) <> Неопределено Тогда 
				
				сшпФункцииРаботыXML.СформироватьУзелXML(xmlУзел, Неопределено, ЭлементСоответствия.Имя, , Новый Структура("Тип", ЭлементСоответствия.ОписаниеТипа));
			
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
	КонецПопытки;
	
	xmlУзел.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Функция - ПолучитьПредставлениеТипа
//
// Параметры:
//	ТипОписания - Тип - тип по которому будет получено представление
//
// Возвращаемое значение:
//	Строка - Строковое представление типа
Функция ПолучитьПредставлениеТипа(ТипОписания) Экспорт
	 
	ОМ = Метаданные.НайтиПоТипу(ТипОписания);
	
	Если Не ОМ = Неопределено Тогда
		 
		ИмяОМ = ОМ.Имя;
		НайденныйТип = Метаданные.Перечисления.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "Перечисления." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.Справочники.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "Справочники." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.Документы.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "Документы." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.ПланыВидовХарактеристик.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			
			Возврат "ПланыВидовХарактеристик." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.ПланыВидовРасчета.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "ПланыВидовРасчета." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.ПланыСчетов.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "ПланыСчетов." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.БизнесПроцессы.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "БизнесПроцессы." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.Задачи.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "Задачи." + ОМ.Имя;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Строка(ТипОписания);
		
	КонецЕсли;
	
КонецФункции

// Процедура - Обновить статусы сообщений без обработчика
//
// Параметры:
//  ТипИнтеграции	 - Перечисление.сшпТипыИнтеграции - Тип интеграции для определения очереди в котоой надо обработать сообщения. 
//  Класс			 - Строка - Идентификатор класса для которого поступил обработчик и требуется изменить статус сообщений на "ОжиданиеОбработки".
//
Процедура ОбновитьСтатусыСообщенийБезОбработчика(ТипИнтеграции, Класс) Экспорт
	
	ТекстЗапрос = "";
	
	Если ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Входящая Тогда
		
		ТекстЗапрос = "ВЫБРАТЬ
		|	тбВходящая.ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.сшпОчередьВходящихСообщений КАК тбВходящая
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбВходящая.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбВходящая.КлассСообщения = &Класс)
		|			И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОтсутствуетОбработчик))";
	
	Иначе
		
		ТекстЗапрос = "ВЫБРАТЬ
		|	тбИсходящая.ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.сшпОчередьИсходящихСообщений КАК тбИсходящая
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбИсходящая.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбИсходящая.ОбъектСобытия = &Класс)
		|			И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОтсутствуетОбработчик))";
	
	КонецЕсли;	
	
	ЗапросОбновление = Новый Запрос(ТекстЗапрос);
	ЗапросОбновление.УстановитьПараметр("Класс", Класс);
	
	РезультатЗапрос = ЗапросОбновление.Выполнить();
	
	Если Не РезультатЗапрос.Пустой() Тогда
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			
			БлокировкаСтатусы = Новый БлокировкаДанных;
			
			ЭлементБлокировка = БлокировкаСтатусы.Добавить("РегистрСведений.сшпСостояниеСообщений");
			ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
			ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИдентификаторСообщения", "ИдентификаторСообщения");
			ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
			
			БлокировкаСтатусы.Заблокировать();
			
			ВыборкаЗапрос = РезультатЗапрос.Выбрать();
			
			Пока ВыборкаЗапрос.Следующий() Цикл
				
				сшпРаботаСДанными.УстановитьСостояниеСообщения(выборкаЗапрос.ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки);
			
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ЗаписьЖурналаРегистрации("Datareon. Изменение статуса сообщения", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			ОтменитьТранзакцию();
		
		КонецПопытки;
	
	КонецЕсли;

КонецПроцедуры

// Процедура - Отправить сообщение об ошибке
//
// Параметры:
//  Класс		- Строка - тип класса ошибки. 
//  Описание	- Строка - описание ошибки. 
//  Свойства	- Структура - дополнительные свойства ошибки. 
//
Процедура ОтправитьСообщениеОбОшибке(Класс, Описание, Свойства) Экспорт
	
	Пакет = сшпОбщегоНазначения.СформироватьСтруктуруПакета("TER", Класс, Описание);
	Пакет.Properties = Свойства;
	
	сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(Пакет);
	
КонецПроцедуры	

// Функция - Управление состоянием обработчика
//
// Параметры:
//  Формат	- Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет	- ОбъектXDTO - объект сообщения.
// 
// Возвращаемое значение:
//  Булево  - Признак успешности обновления статуса обработчика события.
//
Функция УправлениеСостояниемОбработчика(Формат, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	
	Попытка
		
		xdtoСообщение = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Формат, Пакет);
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Формат, xdtoСообщение.Body);
		
		Идентификатор = xdtoПакет.Id;
		Статус = ?(Булево(xdtoПакет.IsStarted) = Истина, Перечисления.сшпСтатусыОбработчиков.Включен, Перечисления.сшпСтатусыОбработчиков.Отключен);
		
		сшпРаботаСДанными.УстановитьСтатусОбработчика(Новый УникальныйИдентификатор(идентификатор), Статус);
		сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
	
	Исключение
		
		ТекстОшибки = "Изменение статуса обработчика завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id = " + идентификатор;
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Изменение статуса обработчика", ТекстОшибки); 
		СтатусВозврата = Ложь;
	
	КонецПопытки;
	
	Возврат СтатусВозврата;	

КонецФункции

// Функция - Возврат пакетов в обработку
//
// Параметры:
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет			 - ОбъектXDTO - объект сообщения.
// 
// Возвращаемое значение:
//  Булево  - Признак успешности выполнения операции.
//
Функция ВозвратПакетовВОбработку(ФорматСообщения, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	СписокИдентификаторов = Новый Массив;
	СоотвПоиска = Новый Соответствие;
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		xdtoCommand = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, xdtoПакет.Body);
		
		Последовательность = xdtoCommand.Последовательность();
		КоличествоИдентификаторов = Последовательность.Количество();
		
		Если КоличествоИдентификаторов > 0 Тогда
			
			Для Индекс = 0 По КоличествоИдентификаторов - 1 Цикл
				
				СписокИдентификаторов.Добавить(Новый УникальныйИдентификатор(Последовательность.ПолучитьЗначение(Индекс)));
				СоотвПоиска.Вставить(СписокИдентификаторов[СписокИдентификаторов.Количество()-1], Ложь);
			
			КонецЦикла;
		
		КонецЕсли;
			
	Исключение
	
	КонецПопытки;
	
	Если СписокИдентификаторов.Количество() Тогда
		
		ЗапросСтатусы = Новый Запрос("ВЫБРАТЬ
		|	сшпСостояниеСообщений.ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеСообщений
		|ГДЕ
		|	сшпСостояниеСообщений.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОшибкаОбработки)
		|	И сшпСостояниеСообщений.ИдентификаторСообщения В(&СписокСообщений)");
		ЗапросСтатусы.УстановитьПараметр("СписокСообщений", СписокИдентификаторов);
		
		РезультатЗапрос = ЗапросСтатусы.Выполнить();
		
		Если Не РезультатЗапрос.Пустой() Тогда
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Попытка
				
				БлокировкаСтатусы = Новый БлокировкаДанных;
				
				ЭлементБлокировка = БлокировкаСтатусы.Добавить("РегистрСведений.сшпСостояниеСообщений");
				ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИдентификаторСообщения", "ИдентификаторСообщения");
				ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаСтатусы.Заблокировать();
				
				ВыборкаЗапрос = РезультатЗапрос.Выбрать();
				
				Пока ВыборкаЗапрос.Следующий() Цикл
					
					сшпРаботаСДанными.УстановитьСостояниеСообщения(ВыборкаЗапрос.ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки);
				
					ЗначСоответствия = СоотвПоиска.Получить(ВыборкаЗапрос.ИдентификаторСообщения);
					
					Если Не ЗначСоответствия = Неопределено Тогда
						
						СоотвПоиска[ВыборкаЗапрос.ИдентификаторСообщения] = Истина;
						
					КонецЕсли;
				
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			
			Исключение
				
				ОтменитьТранзакцию();
				ТекстОшибки = "Изменение статуса обработчика сообщения ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id = " + СтрСоединить(списокИдентификаторов, ",");
				сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Изменение статуса сообщения", ТекстОшибки); 
				статусВозврата = Ложь;
			
			КонецПопытки;
			
			Если СтатусВозврата И сшпФункциональныеОпции.АвтоматическийСтартОбработчиков() Тогда
				
				сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиИсходящихСообщений");
			
			КонецЕсли;	
		
		КонецЕсли;
	
		Если СтатусВозврата Тогда
			
			xmlРезультат = Новый ЗаписьXML;
			xmlРезультат.УстановитьСтроку("UTF-8");
			xmlРезультат.ЗаписатьНачалоЭлемента("RMLResult");
			
			Для Каждого СтрокаСоответствия Из СоотвПоиска Цикл
				
				xmlРезультат.ЗаписатьНачалоЭлемента("row");
				
				xmlРезультат.ЗаписатьНачалоЭлемента("Id");
				
				xmlРезультат.ЗаписатьТекст(XMLСтрока(СтрокаСоответствия.Ключ));
				
				xmlРезультат.ЗаписатьКонецЭлемента();
				
				xmlРезультат.ЗаписатьНачалоЭлемента("WasFound");
				
				xmlРезультат.ЗаписатьТекст(XMLСтрока(СтрокаСоответствия.Значение));
				
				xmlРезультат.ЗаписатьКонецЭлемента();
				
				xmlРезультат.ЗаписатьКонецЭлемента();
				
			КонецЦикла;				
			
			xmlРезультат.ЗаписатьКонецЭлемента();
			
			ПакетРезультат = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-RMLResult", xmlРезультат.Закрыть());
			
			ПакетРезультат.CorrelationId = xdtoПакет.CorrelationId;
			
			сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(ПакетРезультат);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат статусВозврата;
	
КонецФункции	

// Функция - НайтиСообщения
//
// Параметры:
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет			 - ОбъектXDTO - объект сообщения.
//	текИдентификатор - УникальныйИдентификатор - идентификатор сообщения	
// 
// Возвращаемое значение:
//  Булево  - Признак успешности выполнения операции.
//
Функция НайтиСообщения(ФорматСообщения, Пакет, текИдентификатор) Экспорт
	
	РезультВыполнения = Истина;
	ПакетРезультат = Неопределено;
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
		
		ТелоСообщения = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, xdtoПакет.Body);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТелоСообщения.Получить("text");
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НайденныеОбъекты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ НайденныеИндексированныеОбъекты
		|ИЗ
		|	НайденныеОбъекты КАК НайденныеОбъекты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	сшпОчередьИсходящихСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	сшпОчередьИсходящихСообщений.ДатаРегистрации
		|ПОМЕСТИТЬ Сообщения
		|ИЗ
		|	РегистрСведений.сшпОчередьИсходящихСообщений КАК сшпОчередьИсходящихСообщений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеИндексированныеОбъекты КАК НайденныеИндексированныеОбъекты
		|		ПО сшпОчередьИсходящихСообщений.СсылкаНаОбъект = НайденныеИндексированныеОбъекты.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(сшпСостояниеОтправляемыхСообщений.СтатусСообщения, сшпСостояниеСообщений.СтатусСообщения) КАК Status,
		|	ЕСТЬNULL(сшпСостояниеОтправляемыхСообщений.ДатаИзменения, сшпСостояниеСообщений.ДатаИзменения) КАК StatusDate,
		|	ЕСТЬNULL(сшпОчередьОтправляемыхСообщений.ИдентификаторСообщения, Сообщения.ИдентификаторСообщения) КАК Id,
		|	Сообщения.ДатаРегистрации КАК RegisterDate,
		|	ЕСТЬNULL(сшпСостояниеОтправляемыхСообщений.ОписаниеОшибки, сшпСостояниеСообщений.ОписаниеОшибки) КАК Error
		|ИЗ
		|	Сообщения КАК Сообщения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеСообщений
		|		ПО Сообщения.ИдентификаторСообщения = сшпСостояниеСообщений.ИдентификаторСообщения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сшпОчередьОтправляемыхСообщений КАК сшпОчередьОтправляемыхСообщений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеОтправляемыхСообщений
		|			ПО сшпОчередьОтправляемыхСообщений.ИдентификаторСообщения = сшпСостояниеОтправляемыхСообщений.ИдентификаторСообщения
		|		ПО Сообщения.ИдентификаторСообщения = сшпОчередьОтправляемыхСообщений.ИдентификаторБазовогоСообщения";		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		xmlРезультат = Новый ЗаписьXML;
		xmlРезультат.УстановитьСтроку("UTF-8");
		
		xmlРезультат.ЗаписатьНачалоЭлемента("FindResult");
		
		xmlРезультат.ЗаписатьНачалоЭлемента("Messages");
		
		СтруктураАтрибутов = Новый Структура("Id, Status, StatusDate, RegisterDate, Error");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураАтрибутов, ВыборкаДетальныеЗаписи);
			сшпФункцииРаботыXML.СформироватьУзелXML(xmlРезультат, Неопределено, "Message", , СтруктураАтрибутов);
			
		КонецЦикла;
		
		xmlРезультат.ЗаписатьКонецЭлемента();
		
		xmlРезультат.ЗаписатьКонецЭлемента();
		
		ПакетРезультат = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-FindResult", xmlРезультат.Закрыть());
		
		ПакетРезультат.CorrelationId = xdtoПакет.CorrelationId;
		ПакетРезультат.ReplyTo = xdtoПакет.ReplyTo;
		  
		Если СткПараметры.Свойство("NodeConfigurationId") Тогда
			                     
			СвойстваСообщения = Новый Структура("NodeConfigurationId", сткПараметры.NodeConfigurationId);
			ПакетРезультат.Properties = СвойстваСообщения;
			
		КонецЕсли;
		
		РезультВыполнения = сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(ПакетРезультат);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Datareon. Поиск сообщений", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РезультВыполнения = Ложь;
		
	КонецПопытки;
	
	Возврат РезультВыполнения;
	
КонецФункции

#КонецОбласти
