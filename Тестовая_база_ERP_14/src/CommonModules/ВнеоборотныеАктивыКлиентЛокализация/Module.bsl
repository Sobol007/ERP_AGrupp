////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы", предназначенные для локализации.
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриВыполненииКоманды(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	Если Команда.Имя = Элементы.ФормаПроводкиРеглУчета.ИмяКоманды Тогда
		ВыполнитьКомандуОткрытьПроводкиРегламентированногоУчета(Форма, ДополнительныеПараметры);
		
	//++ НЕ УТКА
	ИначеЕсли Команда.Имя = Элементы.ФормаПроводкиМеждУчета.ИмяКоманды Тогда
		ВыполнитьКомандуОткрытьПроводкиМеждународногоУчета(Форма, ДополнительныеПараметры);
	//-- НЕ УТКА
	КонецЕсли; 
	
	//-- Локализация
	
	Если ПродолжитьВыполнениеКоманды Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			Форма, 
			Команда.Имя, 
			ДополнительныеПараметры,
			ТребуетсяВызовСервера);
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыполнитьДействиеПослеРасчета(Форма, ДействиеПослеРасчета) Экспорт

	//++ Локализация
	
	Если ДействиеПослеРасчета = "ОткрытьПроводкиРегламентированногоУчета" Тогда
		ОткрытьПроводкиРегламентированногоУчета(Форма.Объект.Ссылка);
	//++ НЕ УТКА
	ИначеЕсли ДействиеПослеРасчета = "ОткрытьПроводкиМеждународногоУчета" Тогда
		ОткрытьПроводкиМеждународногоУчета(Форма.Объект.Ссылка);
	//-- НЕ УТКА
	КонецЕсли; 
	
	//-- Локализация

КонецПроцедуры

Функция ПриИзмененииПорядкаУчетаУУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы) Экспорт

	ИзмененныеРеквизиты = "";
	
	//++ Локализация
	
	ИзмененныеРеквизиты = "ПорядокУчетаУУ";
	
	Если Объект.ПорядокУчетаУУ <> ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена") 
		И Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") Тогда
			
		Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
		ИзмененныеРеквизиты = ПриИзмененииПорядкаУчетаБУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы) + "," + ИзмененныеРеквизиты;
		
	ИначеЕсли Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена") 
		И Объект.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") Тогда
			
		Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена");
		ИзмененныеРеквизиты = ПриИзмененииПорядкаУчетаБУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы) + "," + ИзмененныеРеквизиты;
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

Функция ИмяФормыДокументыПоОсновномуСредству() Экспорт

	ИмяФормы = Неопределено;
	
	//++ Локализация
	Если ВнеоборотныеАктивыВызовСервера.ИспользуетсяУправлениеВНА_2_4() Тогда
		ИмяФормы = "Обработка.ЖурналДокументовОС2_4.Форма";
	Иначе
		ИмяФормы = "Обработка.ЖурналДокументовОС.Форма";
	КонецЕсли;
	//-- Локализация
	
	Возврат ИмяФормы;
	
КонецФункции

Функция ИмяФормыДокументыПоНематериальномуАктиву() Экспорт

	ИмяФормы = Неопределено;
	
	//++ Локализация
	Если ВнеоборотныеАктивыВызовСервера.ИспользуетсяУправлениеВНА_2_4() Тогда
		ИмяФормы = "Обработка.ЖурналДокументовНМА2_4.Форма";
	Иначе
		ИмяФормы = "Обработка.ЖурналДокументовНМА.Форма";
	КонецЕсли;
	//-- Локализация
	
	Возврат ИмяФормы;
	
КонецФункции

Процедура ПриВыполненииКомандыЖурналаДокументов(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	
	Если Команда.Имя = "СписокПроводкиРеглУчета" Тогда
		
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			ОткрытьПроводкиРегламентированногоУчета(Элементы.Список.ТекущиеДанные.Ссылка);
		КонецЕсли; 
		
	//++ НЕ УТКА
	ИначеЕсли Команда.Имя = "СписокПроводкиМеждународногоУчета" Тогда
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			ОткрытьПроводкиМеждународногоУчета(Элементы.Список.ТекущиеДанные.Ссылка);
		КонецЕсли; 
	ИначеЕсли Команда.Имя = "СписокДетальноПроводкиМеждународногоУчета" Тогда
		Если Элементы.СписокДетально.ТекущиеДанные <> Неопределено Тогда
			ОткрытьПроводкиМеждународногоУчета(Элементы.СписокДетально.ТекущиеДанные.Ссылка);
		КонецЕсли; 
	ИначеЕсли Команда.Имя = "СписокАмортизацияПроводкиМеждународногоУчета" Тогда
		Если Элементы.СписокАмортизация.ТекущиеДанные <> Неопределено Тогда
			ОткрытьПроводкиМеждународногоУчета(Элементы.СписокАмортизация.ТекущиеДанные.Ссылка);
		КонецЕсли; 
	//-- НЕ УТКА
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры

Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт

	//++ Локализация
	
	ПолноеИмяОтчета = ФормаОтчета.НастройкиОтчета.ПолноеИмя;
	
	Если ПолноеИмяОтчета = "Отчет.РеестрДоговоровЛизинга" Тогда
		
		ПараметрыРасшифровки = ВнеоборотныеАктивыВызовСервера.ПараметрыРасшифровкиОтчета(
		                            ПолноеИмяОтчета,
									Расшифровка, 
									ФормаОтчета.ОтчетДанныеРасшифровки, 
									ФормаОтчета.Отчет.КомпоновщикНастроек);
		
		Если ПараметрыРасшифровки <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Отчет.АнализСубконто.ФормаОбъекта", ПараметрыРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#Область ПанельСправочниковВнеоборотныеАктивы

Процедура ПриВыполненииКоманды_ПанельСправочниковВнеоборотныеАктивы(Команда, Форма) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Команда.Имя = Элементы.ОткрытьГодовыеГрафикиАмортизацииОС.Имя Тогда
		ОткрытьФорму("Справочник.ГодовыеГрафикиАмортизацииОС.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьКлассификаторОКОФ.Имя Тогда
		ОткрытьФорму("Справочник.ОбщероссийскийКлассификаторОсновныхФондов.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьКлассификаторЕНАОФ.Имя Тогда
		ОткрытьФорму("Справочник.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов.ФормаСписка", , Форма);
	//++ НЕ УТКА
	ИначеЕсли Команда.Имя = Элементы.ОткрытьГруппыОС.Имя Тогда
		ОткрытьФорму("Справочник.ГруппыОСМеждународныйУчет.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьГруппыНМА.Имя Тогда
		ОткрытьФорму("Справочник.ГруппыНМАМеждународныйУчет.ФормаСписка", , Форма);
	//-- НЕ УТКА
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

Функция ПриИзмененииПорядкаУчетаБУ_ОС(Объект, ПрименяетсяУСНДоходыМинусРасходы = Ложь) Экспорт

	ИзмененныеРеквизиты = "ПорядокУчетаБУ";
	
	Если Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.МетодНачисленияАмортизацииБУ) Тогда
			Объект.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",МетодНачисленияАмортизацииБУ";
		КонецЕсли; 
		
		Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
		
	ИначеЕсли Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается") Тогда
		
		Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
		
	ИначеЕсли Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") Тогда
		
		Если ПрименяетсяУСНДоходыМинусРасходы Тогда
			Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключитьВСоставАмортизируемогоИмущества");
		Иначе
			Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.АмортизацияНачислена");
		КонецЕсли; 
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
		
	ИначеЕсли Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
		
		Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
		Объект.ПрименениеЦелевогоФинансирования = Ложь;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ,ПрименениеЦелевогоФинансирования";
		
	ИначеЕсли Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету") Тогда
		
		Если Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.АмортизацияНачислена") Тогда
			Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаНУ";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Объект.ПорядокУчетаБУ <> ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") 
		И Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена") Тогда
			
		Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ПорядокУчетаУУ";
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

//  Функция возвращает ОС выбранное в текущей строке таблицы ОС документа для дальнейшей передачи
// в функцию ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию. В случае невозможности
// определения ОС выдает сообщение об ошибке.
//
// Параметры
//  ПараметрыФормы   - Структура с параметрами заполнения, ключи структуры:
//  	Форма             - форма заполняемого документа
//  	Объект            - Значение основного реквизита формы - документа для заполнения
//  	ИмяТабличнойЧасти - Имя табличной части основных средств документа, значение по умолчанию "ОС".
//
// Возвращаемое значение:
//   СправочникСсылка.ОбъектыЭксплуатации, Неопределено - В случае невозможности определения ОС функция
//   	возвращает Неопределено, в противном случае функция возвращает значение ОС.
//
Функция ПолучитьОСДляЗаполнениеПоНаименованию(Параметры) Экспорт
	
	ОчиститьСообщения();
	
	Форма = Параметры.Форма;
	Объект = Параметры.Объект;
	Если Параметры.Свойство("ИмяТабличнойЧасти") Тогда
		ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	Иначе
		ИмяТабличнойЧасти = "ОС";
	КонецЕсли;
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения отсутствуют.';
								|en = 'Data for population is missing.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект." + ИмяТабличнойЧасти);
		Возврат Неопределено;
	КонецЕсли;
	
	ОсновноеСредство = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные.ОсновноеСредство;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано основное средство';
								|en = 'Fixed asset is not selected'");
		ИндексСтроки = Формат(Объект[ИмяТабличнойЧасти].Индекс(Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные), "ЧН=0; ЧГ=");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект." + ИмяТабличнойЧасти + "[" + ИндексСтроки + "].ОсновноеСредство");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОсновноеСредство;
	
КонецФункции // ПолучитьОСДляЗаполнениеПоНаименованию()

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

Процедура ВыполнитьКомандуОткрытьПроводкиРегламентированногоУчета(Форма, ДополнительныеПараметры)
	
	Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ЗаголовокДействия", НСтр("ru = 'Проводки регламентированного учета';
															|en = 'Compliance accounting postings'"));
		ПараметрыДействия.Вставить("ДействиеПослеРасчета", "ОткрытьПроводкиРегламентированногоУчета");
		ДополнительныеПараметры.Вставить("Выполнить_ЗаписатьИВыполнитьДействие", ПараметрыДействия);
		
	Иначе
		ОткрытьПроводкиРегламентированногоУчета(Форма.Объект.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьПроводкиРегламентированногоУчета(Ссылка)

	Отбор = Новый Структура("Регистратор", Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Обработка.ОтражениеДокументовВРеглУчете.Форма.ПроводкиРегламентированногоУчета", ПараметрыФормы);

КонецПроцедуры

//++ НЕ УТКА

Процедура ВыполнитьКомандуОткрытьПроводкиМеждународногоУчета(Форма, ДополнительныеПараметры)
	
	Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ЗаголовокДействия", НСтр("ru = 'Проводки международного учета';
															|en = 'International accounting postings'"));
		ПараметрыДействия.Вставить("ДействиеПослеРасчета", "ОткрытьПроводкиМеждународногоУчета");
		ДополнительныеПараметры.Вставить("Выполнить_ЗаписатьИВыполнитьДействие", ПараметрыДействия);
		
	Иначе
		ОткрытьПроводкиМеждународногоУчета(Форма.Объект.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьПроводкиМеждународногоУчета(Ссылка)

	ПараметрыОтбора = Новый Структура("Регистратор", Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("РегистрБухгалтерии.Международный.Форма.ПроводкиМеждународногоУчета", ПараметрыФормы,, Ссылка);
	
КонецПроцедуры

//-- НЕ УТКА

//-- Локализация

#КонецОбласти
