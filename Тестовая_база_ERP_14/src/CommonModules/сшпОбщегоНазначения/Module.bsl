
#Область ПрограммныйИнтерфейс

// Функция - Получить объект XDTO
//
// Параметры:
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений - текущий формат сообщения.
//  ТелоСообщения	 - Строка - Текстовое представление сообщения в указанном формате.
// 
// Возвращаемое значение:
//  ОбъектXDTO - объект сформированный фабрикойXDTO из исходного текста. В случае невозможности преобразования возвращается Неопределено.  
//
Функция ПолучитьОбъектXDTO(ФорматСообщения, ТелоСообщения, ТипОбъекта = Неопределено) Экспорт
	
	ТекОбъект = Неопределено;
	
	Попытка
		
		ТекЧтение = ПолучитьОбъектПотоковогоЧтения(ФорматСообщения, ТелоСообщения);
		
		Если Не ТекЧтение = Неопределено Тогда
		
			ТекОбъект = ПрочитатьОбъектИзПотока(ФорматСообщения, ТекЧтение, ТипОбъекта);
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Datareon.ПолучитьОбъектСообщения", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.сшпОбщегоНазначения,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	КонецПопытки;
	
	Возврат ТекОбъект;
	
КонецФункции	

// Функция - Сформировать сообщение ESB
//
// Параметры:
//  Фабрика	 - ФабрикаXDTO - фаббрика которая содержит необходимые форматы сообщений. Для отправкии сообщений другим системам необходимо использовать фабрику полученную из текущего прокси-соединения.
//  Пакет	 - Структура - Структура содержащая поля соответствующие описанию формата объекта Message1C.
// 
// Возвращаемое значение:
//  ОбъектXDTO - обект типа Message1C.
//
Функция СформироватьСообщениеESB(Фабрика, Пакет) Экспорт
	
	ТипСообщение = Фабрика.Тип("http://esb.axelot.ru", "Message");
	
	Если ТипЗнч(Пакет) = Тип("Массив") Тогда
		 
		ТипПакета 						= Фабрика.Тип("http://esb.axelot.ru", "Messages");
		XdtoПакет 						= Фабрика.Создать(ТипПакета);
		
		Для Каждого Сообщение Из Пакет Цикл 
			
			XdtoСообщение 						= Фабрика.Создать(ТипСообщение);
			ЗаполнитьПакетXDTO(Фабрика, XdtoСообщение, Сообщение);
			XdtoПакет.Message.Добавить(XdtoСообщение);
		
		КонецЦикла;
	
	Иначе
		
		XdtoПакет 						= Фабрика.Создать(ТипСообщение);
		ЗаполнитьПакетXDTO(Фабрика, XdtoПакет, Пакет);
	
	КонецЕсли;

	Возврат XdtoПакет;
	
КонецФункции

Процедура ЗаполнитьПакетXDTO(Фабрика, XdtoПакет, Сообщение)
	
	XdtoПакет.Id 					= Фабрика.Создать(Фабрика.Тип("http://schemas.microsoft.com/2003/10/Serialization/", "guid"), Строка(Сообщение.Id));
	XdtoПакет.ClassId 				= Сообщение.ClassId;
	XdtoПакет.Type					= Сообщение.Type;
	XdtoПакет.CreationTime			= ?(Сообщение.CreationTime = Неопределено, ТекущаяДата(), Сообщение.CreationTime);
	XdtoПакет.Body 					= Сообщение.Body;		
	XdtoПакет.NeedAcknowledgment	= Сообщение.NeedAcknowledgment;
	XdtoПакет.ReplyTo 				= Сообщение.ReplyTo;
	XdtoПакет.Source 				= Сообщение.Source;	
	XdtoПакет.CorrelationId 		= ?(ЗначениеЗаполнено(Сообщение.CorrelationId), Фабрика.Создать(Фабрика.Тип("http://schemas.microsoft.com/2003/10/Serialization/", "guid"), Строка(Сообщение.CorrelationId)), Неопределено);
	XdtoПакет.Properties 			= Фабрика.Создать(Фабрика.Тип("http://esb.axelot.ru", "ArrayOfMessageProperty"));
	
	Если ТипЗнч(Сообщение.Properties) = Тип("Структура") Тогда
		
		Для Каждого Свойство Из Сообщение.Properties Цикл
			
			XdtoПакет.Properties.MessageProperty.Добавить(ДобавитьСвойствоСообщения(Фабрика, Свойство.Ключ, Свойство.Значение));
		
		КонецЦикла;	
	
	КонецЕсли;
	
	Если ТипЗнч(Сообщение.Receivers) = Тип("Массив") И Сообщение.Receivers.Количество() Тогда
		 
		XdtoПакет.Receivers = Фабрика.Создать(Фабрика.Тип("http://esb.axelot.ru", "Receivers"));
		
		Для Каждого ЭлементМассива Из Сообщение.Receivers Цикл 
			
			XdtoПакет.Receivers.Receiver.Добавить(ЭлементМассива);
		
		КонецЦикла;
	Иначе
		
		XdtoПакет.Receivers = Фабрика.Создать(Фабрика.Тип("http://esb.axelot.ru", "Receivers"));
	
	КонецЕсли;
	
КонецПроцедуры

// Функция - Добавить свойство сообщения
//
// Параметры:
//  Имя		 - Строка - Имя свойства 
//  Значение - Число,Строка,Булево - значение свойства. Поддерживаются примитивные типы. 
// 
// Возвращаемое значение:
//  ОбъектXDTO - объект XDTO с типом MessageProperty.
//
Функция ДобавитьСвойствоСообщения(Фабрика, Имя, Значение)
	
	xmlСтрока = "
	|<MessageProperty xmlns=""http://esb.axelot.ru"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
	|	<Name>" + Имя + "</Name>
	|	<Value>
	|		" + ДобавитьЗначение(Значение) + "
	|	</Value>
	|</MessageProperty>";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XmlСтрока);
	
	Возврат Фабрика.ПрочитатьXML(ЧтениеXML, Фабрика.Тип("http://esb.axelot.ru", "MessageProperty"));
	
КонецФункции

// Функция - Добавить значение
//
// Параметры:
//  значение - Число,Строка,Булево - значение свойства. Поддерживаются примитивные типы .
// 
// Возвращаемое значение:
//  Строка - строка подстановки для формирования представления xml.
//
Функция ДобавитьЗначение(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
		
		Возврат ДобавитьЧисловоеЗначение(Значение);
		
	ИначеЕсли типЗначения = Тип("Строка") Тогда
		
		Возврат  ДобавитьСтроковоеЗначение(Значение);
		
	КонецЕсли;
		
	Возврат ДобавитьБулевоЗначение(Значение);
		
КонецФункции

// Функция - Добавить числовое значение
//
// Параметры:
//  Значение - Число - значение свойства.
// 
// Возвращаемое значение:
//  Строка - строка подстановки для формирования представления xml.
//
Функция ДобавитьЧисловоеЗначение(Значение)
	
	Возврат "
	|<IntegerValues>
	|	<int xmlns=""http://schemas.microsoft.com/2003/10/Serialization/Arrays"">" + XMLСтрока(Значение) + "</int>
	|</IntegerValues>
	|<Type>Integer</Type>";
	
КонецФункции

// Функция - Добавить строковое значение
//
// Параметры:
//  Значение - Строка - значение свойства.
// 
// Возвращаемое значение:
//  Строка - строка подстановки для формирования представления xml.
//
Функция ДобавитьСтроковоеЗначение(Значение)
	
	Возврат "
	|<StringValues>
	|	<string xmlns=""http://schemas.microsoft.com/2003/10/Serialization/Arrays"">" + XMLСтрока(Значение) + "</string>
	|</StringValues>
	|<Type>String</Type>";
	
КонецФункции

// Функция - Добавить булево значение
//
// Параметры:
//  значение - Булево - значение свойства.
// 
// Возвращаемое значение:
//  Строка - строка подстановки для формирования представления xml.
//
Функция ДобавитьБулевоЗначение(Значение)
	
	Возврат "
	|<BooleanValues>
	|	<boolean xmlns=""http://schemas.microsoft.com/2003/10/Serialization/Arrays"">" + XMLСтрока(Значение) + "</boolean>
	|</BooleanValues>
	|<Type>Boolean</Type>";
	
КонецФункции

// Функция - Сформировать сообщение ESB HTTP
//
// Параметры:
//  Фабрика	 - ФабрикаXDTO - фаббрика которая содержит необходимые форматы сообщений. Для отправкии сообщений другим системам необходимо использовать фабрику полученную из текущего прокси-соединения.
//  Пакет	 - Структура - Структура содержащая поля соответствующие описанию формата объекта Message1C.
// 
// Возвращаемое значение:
//  Строка - ОбъектXDTO типа Message1C сериализованный в формат сообщения.
//
Функция СформироватьСообщениеESB_HTTP(Фабрика, Пакет) Экспорт
	
	xdtoПакет = СформироватьСообщениеESB(Фабрика, Пакет);
	
	Возврат ЗаписатьОбъектВПоток(Перечисления.сшпФорматыСообщений.XML, xdtoПакет, фабрика);
	
КонецФункции

// Функция - Преобразовать структуру по формату
//
// Параметры:
//  Формат		 - Перечисление.сшпФорматыСообщений - текущий формат сообщения
//  сткДанные	 - Структура - данные которые будут преобразованны в указанный формат.
// 
// Возвращаемое значение:
//  Строка - данные структуры преобразованные в указанный формат.
//
Функция ПреобразоватьСтруктуруПоФормату(Формат = Неопределено, СткДанные) Экспорт
	
	Если Формат = Неопределено Тогда
		
		Формат = сшпФункциональныеОпции.ФорматСообщения();
		
	КонецЕсли;
		
	Если Формат = Перечисления.сшпФорматыСообщений.XML Тогда
		
		Возврат сшпФункцииРаботыXML.СформироватьXML(СткДанные);
		
	ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.JSON Тогда
		
		Возврат сшпФункцииРаботыJSON.СформироватьJSON(СткДанные);
		
	ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.FastInfoset Тогда
		
		Возврат сшпФункцииРаботыFastInfoset.СформироватьFastInfoset(СткДанные);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция - Сериализовать объект
//
// Параметры:
//  Формат		 - Перечисление.сшпФорматыСообщений - текущий формат сообщения.
//  ОбъектИсточник	 - ЛюбаяСсылка, ЛюбойОбъект	 - объект который необходимо сериализовать в указанный формат.
// 
// Возвращаемое значение:
//  Строка - данные объекта преобразованные в указанный формат. 
//
Функция СериализоватьОбъект(Формат, ОбъектИсточник) Экспорт
	
	ТекОбъект = Неопределено;
	
	Попытка
	
		Если Формат = Перечисления.сшпФорматыСообщений.XML Тогда
	
			ТекОбъект = сшпФункцииРаботыXML.СериализоватьОбъект(ОбъектИсточник);
		
		ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.JSON Тогда
		
			ТекОбъект = сшпФункцииРаботыJSON.СериализоватьОбъект(ОбъектИсточник);
		
		ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.FastInfoset Тогда
		
			ТекОбъект = сшпФункцииРаботыFastInfoset.СериализоватьОбъект(ОбъектИсточник);
		
		КонецЕсли;
	
	Исключение
	
		ЗаписьЖурналаРегистрации("Datareon. Сериализация объекта", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	
	КонецПопытки;
	
	Возврат ТекОбъект;

КонецФункции	

// Функция - Десериализовать объект
//
// Параметры:
//  Формат		 - Перечисление.сшпФорматыСообщений - текущий формат сообщения.
//  ОбъектИсточник	 - Строка - описание объект в указанном формате.
// 
// Возвращаемое значение:
//  ЛюбаяСсылка, ЛюбойОбъект	 - объект десериализованный из указанного формата. 
//
Функция ДесериализоватьОбъект(Формат, ОбъектИсточник) Экспорт
	
	ТекОбъект = Неопределено;
	
	Попытка
		
		Если Формат = Перечисления.сшпФорматыСообщений.XML Тогда
			
			ТекОбъект = сшпФункцииРаботыXML.ДесериализоватьОбъект(ОбъектИсточник);
		
		ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.JSON Тогда
			
			ТекОбъект = сшпФункцииРаботыJSON.ДесериализоватьОбъект(ОбъектИсточник);
		
		ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.FastInfoset Тогда
			
			ТекОбъект = сшпФункцииРаботыFastInfoset.ДесериализоватьОбъект(ОбъектИсточник);
		
		КонецЕсли;
	
	Исключение
		
		ЗаписьЖурналаРегистрации("Datareon. Десериализация объекта", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	
	КонецПопытки;
	
	Возврат текОбъект;

КонецФункции	

// Функция - Получить объект потокового чтения
//
// Параметры:
//  Формат		 - Перечисление.сшпФорматыСообщений - текущий формат сообщения.
//  ЧитаемаяСтрока	 - 	 - .
// 
// Возвращаемое значение:
// ЧтениеXML, ЧтениеFastInfoset, ЧтениеJSON  - объект потокового чтения заданного формата.
//
Функция ПолучитьОбъектПотоковогоЧтения(Формат, ЧитаемаяСтрока) Экспорт
	
	ТекОбъект = Неопределено;
	
	Если Формат = Перечисления.сшпФорматыСообщений.XML Тогда
		
		ТекОбъект = сшпФункцииРаботыXML.ПолучитьОбъектПотоковогоЧтения(ЧитаемаяСтрока);
		
	ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.JSON Тогда
		
		ТекОбъект = сшпФункцииРаботыJSON.ПолучитьОбъектПотоковогоЧтения(ЧитаемаяСтрока);
		
	ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.FastInfoset Тогда
		
		ТекОбъект = сшпФункцииРаботыFastInfoset.ПолучитьОбъектПотоковогоЧтения(ЧитаемаяСтрока);
		
	КонецЕсли;
	
	Возврат ТекОбъект;
	
КонецФункции

// Функция - Получить объект потоковой записи
//
// Параметры:
//  Формат		 - Перечисление.сшпФорматыСообщений - текущий формат сообщения.
// 
// Возвращаемое значение:
// ЗаписьXML, ЗаписьFastInfoset, ЗаписьJSON  - объект потоковой записи заданного формата.
//
Функция ПолучитьОбъектПотоковойЗаписи(Формат) Экспорт
	
	ТекОбъект = Неопределено;
	
	Если Формат = Перечисления.сшпФорматыСообщений.XML Тогда
		
		ТекОбъект = сшпФункцииРаботыXML.ПолучитьОбъектПотоковойЗаписи();
		
	ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.JSON Тогда
		
		ТекОбъект = сшпФункцииРаботыJSON.ПолучитьОбъектПотоковойЗаписи();
		
	ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.FastInfoset Тогда
		
		ТекОбъект = сшпФункцииРаботыFastInfoset.ПолучитьОбъектПотоковойЗаписи();
		
	КонецЕсли;
	
	Возврат ТекОбъект;
	
КонецФункции	

// Функция - Прочитать объект из потока
//
// Параметры:
//  Формат	- Перечисление.сшпФорматыСообщений - текущий формат сообщения.
//  Поток	- Строка - строка описания объекта в заданном формате.
// 
// Возвращаемое значение:
//  ЛюбаяСсылка, ЛюбойОбъект	 - объект прочитанный фабрикой XDTO из указанного формата. 
//
Функция ПрочитатьОбъектИзПотока(Формат, Поток, ТипОбъекта) Экспорт
	
	ТекОбъект = Неопределено;
	
	Попытка
		
		Если Формат = Перечисления.сшпФорматыСообщений.XML Тогда
			
			ТекОбъект = сшпФункцииРаботыXML.ПрочитатьОбъектИзПотока(Поток, ТипОбъекта);
			
		ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.JSON Тогда
			
			ТекОбъект = сшпФункцииРаботыJSON.ПрочитатьОбъектИзПотока(Поток, ТипОбъекта);
			
		ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.FastInfoset Тогда
			
			ТекОбъект = сшпФункцииРаботыFastInfoset.ПрочитатьОбъектИзПотока(Поток, ТипОбъекта);
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Datareon. Формирование объекта XDTO", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	
	КонецПопытки;
	
	Возврат ТекОбъект;

КонецФункции

// Функция - Записать объект в поток
//
// Параметры:
//  Формат	- Перечисление.сшпФорматыСообщений - текущий формат сообщения.
//  Объект 	- ЛюбаяСсылка, ЛюбойОбъект	 - объект который необходимо сериализовать в указанный формат.
//  фабрика	- ФабрикаXDTO - фабрика XDTO для преобразования объекта в строку указанного формата. 
// 
// Возвращаемое значение:
// Строка  -  Объект преобразованный в строку заданного формата.
//
Функция ЗаписатьОбъектВПоток(Формат, Объект, Фабрика = Неопределено) Экспорт
	
	СтрПредставление = "";
	
	Попытка
		
		Если Формат = Перечисления.сшпФорматыСообщений.XML Тогда
			
			СтрПредставление = сшпФункцииРаботыXML.ЗаписатьОбъектВПоток(Объект, Фабрика);
		
		ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.JSON Тогда
			
			СтрПредставление = сшпФункцииРаботыJSON.ЗаписатьОбъектВПоток(Объект, Фабрика);
		
		ИначеЕсли Формат = Перечисления.сшпФорматыСообщений.FastInfoset Тогда
			
			СтрПредставление = сшпФункцииРаботыFastInfoset.ЗаписатьОбъектВПоток(Объект, Фабрика);
		
		КонецЕсли;
	
	Исключение
		
		ЗаписьЖурналаРегистрации("Datareon. Запись объекта XDTO в файл", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	
	КонецПопытки;
	
	Возврат СтрПредставление;

КонецФункции

// Процедура - Ожидание
//
// Параметры:
//  Длительность - Число - длительность ожидания в секундах.
//
Процедура Ожидание(Длительность) Экспорт
	
	ВнешняяКомпонента = сшпКэшируемыеФункции.ПолучитьКомпоненту();
	
	Если ВнешняяКомпонента = Неопределено Тогда 
		
		Идентификатор = Новый УникальныйИдентификатор;
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;	
		Элемент = Блокировка.Добавить("РегистрСведений.сшпБлокировкаОчереди");
		Элемент.Режим = РежимБлокировкиДанных.Исключительный;
		Элемент.УстановитьЗначение("Идентификатор", Идентификатор);	
		Блокировка.Заблокировать();
		
		мсвПараметров = Новый Массив;
		мсвПараметров.Добавить(Идентификатор);
		
		Задание = ФоновыеЗадания.Выполнить("сшпОбщегоНазначения.ВыполнитьПаузу", мсвПараметров,, "Выполнить паузу 10 сек.");
		
		Попытка
			Задание.ОжидатьЗавершения(Длительность);
		Исключение
			
		КонецПопытки;             
		
		ОтменитьТранзакцию();
		
	Иначе
		
		ВнешняяКомпонента.Sleep(Длительность*1000);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Выполнить паузу
//
// Параметры:
//  Идентификатор	 - УникальныйИдентификатор - идентификатор сессии ожидания.
//
Процедура ВыполнитьПаузу(Идентификатор) Экспорт
	
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	
	Элемент = Блокировка.Добавить("РегистрСведений.сшпБлокировкаОчереди");
	Элемент.Режим = РежимБлокировкиДанных.Исключительный;
	Элемент.УстановитьЗначение("Идентификатор", Идентификатор);
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
	КонецПопытки;
	ОтменитьТранзакцию();
	
КонецПроцедуры

// Функция - Сформировать структуру пакета
//
// Параметры:
//  ТипПакета	 - Строка - тип информационного пакета. 
//  Класс		 - Строка - класс информационного пакета. 
//  ТелоПакета	 - Строка - секция Body информационного пакета. 
// 
// Возвращаемое значение:
// Структура  - структура повторяющая структуру объекта XDTO типа Message1C.
//
Функция СформироватьСтруктуруПакета(ТипПакета = "DTP", Класс = "", ТелоПакета = "") Экспорт
	
	сткПакет = Новый Структура;
	сткПакет.Вставить("Id", Строка(Новый УникальныйИдентификатор));
	сткПакет.Вставить("Type", ТипПакета);
	сткПакет.Вставить("ClassId", Класс);
	сткПакет.Вставить("Body", ТелоПакета);
	сткПакет.Вставить("CreationTime", ТекущаяУниверсальнаяДата());
	сткПакет.Вставить("NeedAcknowledgment", Ложь);
	сткПакет.Вставить("Properties", Неопределено);
	сткПакет.Вставить("Receivers", Новый Массив);
	сткПакет.Вставить("ReplyTo", Неопределено);
	сткПакет.Вставить("Source", Неопределено);	
	сткПакет.Вставить("CorrelationId", Неопределено);	

	Возврат сткПакет;

КонецФункции

// Функция - Получить количество потоков
//
// Параметры:
//  ИмяПараметра		 - Строка - имя параметра по которому выполняется поиск фоновых заданий.
//  ЗначениеПараметра	 - Массив - значения для отбора по параметру.
// 
// Возвращаемое значение:
// Число  - количество активных фоновых заданий.
//
Функция ПолучитьКоличествоПотоков(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	сткУсловияПоиска = Новый Структура;
	сткУсловияПоиска.Вставить(ИмяПараметра, ЗначениеПараметра);
	сткУсловияПоиска.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	мсвОбработчики = ФоновыеЗадания.ПолучитьФоновыеЗадания(сткУсловияПоиска);
	
	Возврат мсвОбработчики.Количество();

КонецФункции	

// Процедура - Запустить обработку потоков
//
Процедура ЗапуститьОбработкуПотоков() Экспорт
	
	сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("УправлениеПуломОбработчиков");
	
	РЗ = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий);
	
	Попытка
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(РЗ.Метаданные.ИмяМетода, РЗ.Параметры, Строка(РЗ.УникальныйИдентификатор), РЗ.Наименование);
		
	Исключение
		
		//Уже запущено
		
	КонецПопытки;
	
КонецПроцедуры

// Функция - ПеревестиДатувЧисло
// 
// Возвращаемое значение:
// Число  - Дата изменения + Задержка.
//
Функция ПеревестиДатуВЧисло(ДатаИзменения, Задержка = 0) Экспорт
	
	Возврат (ДатаИзменения - Дата(2000,1,1)) + Задержка;
	
КонецФункции

#Если Сервер Тогда
	
// Функция - Проверить экземпляр информационной базы
// 
// Возвращаемое значение:
// Булево  - Результат проверки ИБ.
//
Функция ПроверитьЭкземплярИнформационнойБазы() Экспорт
	
	ЗначениеВозврат = Истина;
	БазовыйИдентификатор = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпИдентификаторИБ");
	
	Если ЗначениеЗаполнено(БазовыйИдентификатор) Тогда
		
		ЗначениеВозврат = БазовыйИдентификатор = НРег(СтрокаСоединенияИнформационнойБазы());
		
	Иначе
		
		сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпИдентификаторИБ", НРег(СтрокаСоединенияИнформационнойБазы()));
		
	КонецЕсли;
		
	Возврат ЗначениеВозврат;
	
КонецФункции

&НаСервере
Процедура ПроверитьЭкземплярИнформационнойБазыДляФормыКонстант() Экспорт
	  
	Если сшпОбщегоНазначения.ПроверитьЭкземплярИнформационнойБазы() Тогда
		 
    	Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Проверка выполнения успешно";
		Сообщение.Сообщить();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Функция - ПолучитьКлючЗаписиПоСтрокеПоиска
// 
// Возвращаемое значение:
// КлючЗаписи, Строка  - ключ записи - если запись найдена, строка - текст ошибки.
//
Функция ПолучитьКлючЗаписиПоСтрокеПоиска(ОбработчикОчереди, СтрокаПоиска) Экспорт 
	
	Попытка
		
		ИдентификаторСообщения = Новый УникальныйИдентификатор(СтрокаПоиска);
	
	Исключение
		
		Возврат "Для поиска требуется ввести в строке уникальный идентификатор сообщения полностью";
	
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	сшпОчередьСообщений.ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений."+ ОбработчикОчереди + " КАК сшпОчередьСообщений
		|ГДЕ
		|	сшпОчередьСообщений.ИдентификаторСообщения = &ИдентификаторСообщения";	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		 
		Возврат "Сообщение не найдено";
		
	Иначе
		
		Возврат РегистрыСведений[ОбработчикОчереди].СоздатьКлючЗаписи(Новый Структура("ИдентификаторСообщения", ИдентификаторСообщения));
		
	КонецЕсли;
	
КонецФункции

#КонецЕсли

// Функция - Получить параметры сообщения структурой
//
// Параметры:
//  Сообщение	 - ОбъектXDTO - объект типа Message1C 
// 
// Возвращаемое значение:
//  Структура - структура с дополнительными свойствами сообщения.
//
функция ПолучитьПараметрыСообщенияСтруктурой(Сообщение) Экспорт
	
	СтруктураПараметры = Новый Структура;
	Если Не Сообщение = Неопределено Тогда
		
		xdtoСвойства = Сообщение.Properties.Последовательность();
		
		Если xdtoСвойства = Неопределено тогда // В зависимости от вида сериализации это может быть список или последовательность.
			
			xdtoСвойства = Сообщение.Properties.ПолучитьСписок("MessageProperty");
			
			Для Каждого текПараметр Из xdtoСвойства Цикл
				
				СтруктураПараметры.Вставить(текПараметр.Name, ПолучитьЗначениеСвойстваСообщения(текПараметр));
				 
			КонецЦикла;
			
		Иначе
			 	
			КоличествоПараметры = xdtoСвойства.Количество();
					
			Если КоличествоПараметры > 0 Тогда
				
				Для Индекс = 0 По количествоПараметры - 1 Цикл
					
					текПараметр = xdtoСвойства.ПолучитьЗначениеXDTO(Индекс);
					структураПараметры.Вставить(текПараметр.Name, ПолучитьЗначениеСвойстваСообщения(текПараметр)); 
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметры;
	
КонецФункции

// Функция - Получить значение свойства сообщения
//
// Параметры:
//  свойство - ОбъектXDTO - свойство сообщения
// 
// Возвращаемое значение:
//  Любое значение - значение свойства сообщения 
//
Функция ПолучитьЗначениеСвойстваСообщения(Свойство)
	
	типСвойства = Свойство.Получить("Value/Type");
	типСвойства = ?(типСвойства = "Double", "Boolean", типСвойства);
	
	типСвойства1С = ?(НРег(типСвойства) = "integer", "Number", типСвойства);
	 
	Узел = Свойство.Получить("Value/"+типСвойства+"Values/");
	
	ЗначениеСвойства = Узел.Получить(Узел.Свойства().Get(0).Имя);
	
	Возврат ?(ЗначениеСвойства = null или ЗначениеСвойства = Неопределено, Неопределено, XMLЗначение(Тип(типСвойства1С), ЗначениеСвойства));

КонецФункции

// Процедура - Запустить обработчик очереди
//
// Параметры:
//  обработчикочереди	 - Строка - имя функции обработчика.
//  имямодуля			 - Строка - имя модуля в котором размещена функция обработчик.
//
Процедура ЗапуститьОбработчикОчереди(ОбработчикОчереди, ИмяМодуля = "сшпОбслуживаниеОчередей") Экспорт
		
		Попытка
			
			ФоновыеЗадания.Выполнить(ИмяМодуля + "." + ОбработчикОчереди,, ОбработчикОчереди, ОбработчикОчереди);
		
		Исключение
			// Запускаем фоновое задание со статическим ключем. Запуск других экземпляров должен заканчиваться ошибкой (паттерн синглтон).
		КонецПопытки;
		
КонецПроцедуры

// Функция - Получить параметры сообщения структурой
//
// Параметры:
//  Сообщение	 - ПакетXML - Строка, содержащая XML. Ожидаемая схема XML - Message 
// 
// Возвращаемое значение:
//  Структура - структура с дополнительными свойствами сообщения.
//
функция ПолучитьПараметрыСообщенияСтруктуройПоПакетуXML(ПакетXML) Экспорт
	
	xdtoТип 				= ФабрикаXDTO.Тип("http://esb.axelot.ru", "Message");
	ПакетXDTO 				= сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.XML, ПакетXML, xdtoТип);
	
	Возврат ПолучитьПараметрыСообщенияСтруктурой(ПакетXDTO);

КонецФункции

// Процедура - Установить свойства адаптера Pipe
//
// Параметры:
//  ИДАдаптера - Строка - Идентификатор адаптера 
//	ИмяАдаптера - Строка - Имя адаптера
// 
Процедура УстановитьСвойстваАдаптераPipe(ИДАдаптера, ИмяАдаптера) Экспорт
	
	ПараметрыИзменены = Ложь;
	
	Если Не Константы.сшпИДАдаптера.Получить() = ИДАдаптера Тогда
		
		Константы.сшпИДАдаптера.Установить(ИДАдаптера);
		ПараметрыИзменены = Истина;
		
	КонецЕсли;
	
	Если Не Константы.сшпИмяАдаптера.Получить() = ИмяАдаптера Тогда
		
		Константы.сшпИмяАдаптера.Установить(ИмяАдаптера);
		ПараметрыИзменены = Истина;
		
	КонецЕсли;
	
	Если Не сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда
		 
		сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпТипИспользуемогоКоннектораESB", Перечисления.сшпТипыКоннекторовESB.Pipe);
		ПараметрыИзменены = Истина;
		
	КонецЕсли;
		
	Если ПараметрыИзменены Тогда
		 
		ОбновитьПовторноИспользуемыеЗначения();
		сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Зарегистрировать запись в журнале
//
// Параметры:
//  Уровень - УровеньЖурналаРегистрации - Уровень записи журнала 
//	Заголовок - Строка - Заголовок записи
//	ТекстСообщения -  Строка - Текс сообщения
// 
Процедура ЗарегистрироватьЗаписьВЖурнале(Уровень, Заголовок, ТекстСообщения) Экспорт
	 
	ЗаписьЖурналаРегистрации(Заголовок, Уровень,,, ТекстСообщения);
	
	Если сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда
		
		Попытка
			
			Если Уровень = УровеньЖурналаРегистрации.Ошибка Тогда
				 
				сшпPipe.УстановитьСоединениеИЗарегистрироватьОшибку(ТекстСообщения);
				
			ИначеЕсли Уровень = УровеньЖурналаРегистрации.Предупреждение Тогда 
				
				сшпPipe.УстановитьСоединениеИЗарегистрироватьПредупреждение(ТекстСообщения);
				
			ИначеЕсли Уровень = УровеньЖурналаРегистрации.Информация Тогда
				 
				сшпPipe.УстановитьСоединениеИЗарегистрироватьИнформационноеСообщение(ТекстСообщения);
				
			Иначе
				
				сшпPipe.УстановитьСоединениеИЗарегистрироватьОтладочноеСообщение(ТекстСообщения);
				
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("Datareon.Передача служебной информации в адаптер", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Установить новую версию параметров подсистемы
// 
Процедура УстановитьНовуюВерсиюПараметровПодсистемы() Экспорт
	 
	Константы.сшпВерсияПараметровПодсистемы.Установить(Новый УникальныйИдентификатор());

КонецПроцедуры

// Процедура - Параметры подсистемы обновлены
//
// Параметры:
//  ВерсияПараметровПодсистемы - УникальныйИдентификатор - версия параметров подсистемы
// 	
Функция ПараметрыПодсистемыОбновлены(ВерсияПараметровПодсистемы) Экспорт 
	
	НовоеЗначениеКонстанты = ПолучитьФункциональнуюОпцию("сшпВерсияПараметровПодсистемы");
	
	Если НовоеЗначениеКонстанты = ВерсияПараметровПодсистемы Тогда 
		
		Возврат Ложь;
	
	Иначе
		
		ВерсияПараметровПодсистемы = НовоеЗначениеКонстанты;
		
		Возврат Истина;
	
	КонецЕсли;
	
КонецФункции

// Функция - Получить текст ошибки обработчика
//
// Параметры:
//	ОшибкаОбработчика - ИнформацияОбОшибке - результат функции ИнформацияОбОшибке()
//
Функция ПолучитьТекстОшибкиОбработчика(Знач ОшибкаОбработчика) Экспорт
	
	Если ТипЗнч(ОшибкаОбработчика.Причина) = Тип("ИнформацияОбОшибке") Тогда
	
		Возврат "Не удалось обработать сообщение " + ПодробноеПредставлениеОшибки(ОшибкаОбработчика.Причина);
			
	Иначе
		
		Возврат "Не удалось обработать сообщение " + ПодробноеПредставлениеОшибки(ОшибкаОбработчика);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
