////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет проведение документов с помощью фонового задания.
//
// Параметры:
//  Список	 - ДинамическийСписок	 - Список документов.
//  ИмяФормы - Строка				 - Форма в которой реализовано фоновое проведение документов.
//
Процедура ПровестиДокументыВФономЗадании(Список, ИмяФормы) Экспорт

	ОчиститьСообщения();
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	ЕстьПомеченныеНаУдаление = Ложь;
	МожноПровести = ВнеоборотныеАктивыВызовСервера.ПроверитьВозможностьПроведения(МассивСсылок, ЕстьПомеченныеНаУдаление);
	Если ЕстьПомеченныеНаУдаление И МассивСсылок.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Помеченный на удаление документ не может быть проведен';
								|en = 'Document marked for deletion cannot be posted'");
		ПоказатьПредупреждение(,ТекстСообщения);
	ИначеЕсли МожноПровести Тогда
		ПараметрыФормы = Новый Структура("СписокДокументов", МассивСсылок);
		ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик расшифровки табличного документа формы отчета.
// См. "Расширение поля формы для поля табличного документа.ОбработкаРасшифровки" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - Форма отчета.
//   Элемент     - ПолеФормы        - Табличный документ.
//   Расшифровка - Произвольный     - Значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - Признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт

	ВнеоборотныеАктивыКлиентЛокализация.ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

// Получает данные для печати и открывает форму Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Неопределено
//
Функция ПечатьЭтикетокОбъектовЭксплуатации(ОписаниеКоманды) Экспорт
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации",
		Новый Структура("ОбъектыЭксплуатации", ОписаниеКоманды.ОбъектыПечати),
		ОписаниеКоманды.Форма,
		Новый УникальныйИдентификатор);
	
КонецФункции

// Получает данные для печати и открывает форму Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Неопределено
//
Функция ПечатьЭтикетокОбъектовЭксплуатацииИзДокумента(ОписаниеКоманды) Экспорт
	
	ДополнительныеПараметры = Новый Структура("МенеджерПечати", ОписаниеКоманды.МенеджерПечати);
	
	ДанныеДляПечати =
		УправлениеПечатьюУТВызовСервера.ДанныеДляПечатиЦенниковИЭтикеток(
			ОписаниеКоманды.Идентификатор,
			ОписаниеКоманды.ОбъектыПечати,
			ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации",
		Новый Структура("ОбъектыЭксплуатации", ДанныеДляПечати),
		ОписаниеКоманды.Форма,
		Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОповеститьОРасчетеАмортизации(ВыполненоСОшибками, Период = Неопределено) Экспорт
	
	Если ВыполненоСОшибками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполненоСОшибками Тогда
		ТекстПояснения = НСтр("ru = 'При расчете возникли ошибки';
								|en = 'Errors occurred while calculating'");
		КартинкаОповещения = БиблиотекаКартинок.АмортизацияСОшибкой;
	Иначе
		ТекстПояснения = НСтр("ru = 'Амортизация рассчитана';
								|en = 'Depreciation is calculated'");
		КартинкаОповещения = БиблиотекаКартинок.АмортизацияРассчитана;
	КонецЕсли; 
	
	ПоказатьОповещениеПользователя(,, ТекстПояснения, КартинкаОповещения);
	
КонецПроцедуры
 
#КонецОбласти
