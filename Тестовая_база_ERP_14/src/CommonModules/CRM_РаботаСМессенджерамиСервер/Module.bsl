
////////////////////////////////////////////////////////////////////////////////
// CRM работа с мессенджерами сервер
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#Область МетодыВзаимодействияСОбработкамиМессенджеров

// Отправить сообщение.
//
// Параметры:
//  ТекстСообщения	 - Строка - Текст сообщения.
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  Группа			 - Строка - Текущая группа. 
//  IDПользователя	 - Строка - ИД пользователя. 
//  Контакт			 - СправочникСсылка	 - Ссылка на контакт.
//  СписокФайлов	 - СписокЗначений - Список файлов.
//  ДопПараметры	 - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  ДокументСсылка.CRM_СообщениеМессенджера - Ссылка на созданное сообщение.
//
Функция ОтправитьСообщение(ТекстСообщения, УчетнаяЗапись, Группа, IDПользователя, Контакт, СписокФайлов, ДопПараметры = Неопределено) Экспорт
	
	Сообщение = Документы.CRM_СообщениеМессенджера.СоздатьДокумент();
	Сообщение.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Сообщение.ТекстСообщения = СокрЛП(ТекстСообщения);
	Сообщение.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее;
	Сообщение.ID_Пользователя = IDПользователя;
	Если ТипЗнч(Контакт)<>Тип("Строка") Тогда
		Сообщение.Контакт = Контакт;
		Сообщение.КонтактПредставление = Строка(Контакт);
	Иначе
		Сообщение.КонтактПредставление = Контакт;
	КонецЕсли;
	Сообщение.Группа = Группа;
	Сообщение.УчетнаяЗапись = УчетнаяЗапись;
	Сообщение.Ответственный = Пользователи.ТекущийПользователь();
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	ID_Сообщения = МодульМенеджера.ОтправитьСообщение(Сообщение.ТекстСообщения, УчетнаяЗапись, IDПользователя, СписокФайлов, ДопПараметры);
	Если ID_Сообщения<> Неопределено Тогда 
		Сообщение.ID_Сообщения = ID_Сообщения;
		Сообщение.Записать();
		Если СписокФайлов<>Неопределено Тогда
			Для каждого Вложение из СписокФайлов Цикл
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("ВладелецФайлов", Сообщение.Ссылка);
				ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
				ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(Вложение.Представление, СтрНайти(Вложение.Представление, ".")-1));
				ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(Вложение.Представление, СтрНайти(Вложение.Представление, ".")+1));
				ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Вложение.Значение);
			КонецЦикла;
		КонецЕсли;
		Возврат Сообщение.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Получить сообщения по учетной записи.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//
Процедура ПолучитьСообщенияУчетнойЗаписи(УчетнаяЗапись) Экспорт
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
		МассивСообщений = МодульМенеджера.ПолучитьСообщения(УчетнаяЗапись);
		СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка,
		                      |	CRM_УчетныеЗаписиМессенджеров.ТипМессенджера КАК ТипМессенджера
		                      |ИЗ
		                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		                      |ГДЕ
		                      |	НЕ CRM_УчетныеЗаписиМессенджеров.ПометкаУдаления");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(Выборка.ТипМессенджера);
			МассивСообщений = МодульМенеджера.ПолучитьСообщения(Выборка.Ссылка);
			СоздатьСообщенияИзПолученныхДанных(Выборка.Ссылка, МассивСообщений);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Путь к диалогу в браузере
//
// Параметры:
//  Структура	 - Структура - Передаваемая  структура.
// 
// Возвращаемое значение:
//  Строка - Путь к диалогу.
//
Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(Структура.УчетнаяЗапись.ТипМессенджера);
	Возврат МодульМенеджера.ПутьКДиалогуВБраузере(Структура);
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Выполнить запрос к ресурсу.
//
// Параметры:
//  Сервер			 - Строка - Сервер.
//  СтрокаЗапроса	 - Строка - Строка запроса.
//  Ресурс			 - Строка - Ресурс. 
//  Прокси			 - Структура - Структура прокси.
// 
// Возвращаемое значение:
//  Строка - Текст ответа.
//
Функция ВыполнитьЗапрос(Сервер, СтрокаЗапроса = "", Ресурс, Прокси=Неопределено) Экспорт  
	
	Если Прокси<>Неопределено Тогда
		HTTPПрокси = Новый ИнтернетПрокси;	
		HTTPПрокси.Установить("https", Прокси.Сервер, Прокси.Порт, Прокси.Пользователь, Прокси.Пароль, Ложь); 
	Иначе
		HTTPПрокси = Неопределено;
	КонецЕсли;
	HTTP =  Новый HTTPСоединение(Сервер,,,,HTTPПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "Content-Type: application/json");
	HTTPЗапрос = Новый HTTPЗапрос(КодироватьСтроку(Ресурс, СпособКодированияСтроки.URLВКодировкеURL));
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса,"UTF-8",ИспользованиеByteOrderMark.НеИспользовать);
		Ответ = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Иначе	
		Ответ = HTTP.Получить(HTTPЗапрос);
	КонецЕсли;
	
    ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Возврат ТекстОтвета;
КонецФункции

// Получить значение из ответа JSON.
//
// Параметры:
//  ТекстJSON	 - Строка - Текст JSON. 
// 
// Возвращаемое значение:
//  Произвольный - Значение ответа.
//
Функция ПолучитьЗначениеИзОтветаJSON(ТекстJSON)Экспорт 
	ЧтениеJSON=Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Значение=ПрочитатьJSON(ЧтениеJSON);
	Возврат Значение
КонецФункции

// Получить строку JSON
//
// Параметры:
//  Значение					 - Срока - Объект записи JSON.
//  ИспользоватьДвойныеКавычки	 - Булево - Определяет использование двойных кавычек при записи
//										свойств и значений JSON.
// 
// Возвращаемое значение:
//  Строка - Завершает запись текста JSON. 
//
Функция ПолучитьСтрокуJSON(Значение, ИспользоватьДвойныеКавычки = Ложь) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,ИспользоватьДвойныеКавычки));
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

// Не связанные сообщения контакта.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Учетная запись для отправки.
//  Группа			 - Строка - Текущая группа. 
//  ID_Пользователя	 - Строка - ИД пользователя.
// 
// Возвращаемое значение:
//  ДокументСсылка.CRM_СообщениеМессенджера - Не связанные сообщения.
//
Функция НеСвязанныеСообщенияКонтакта(УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	CRM_СообщениеМессенджера.Ссылка
	                       |ПОМЕСТИТЬ НеСвязанныеСообщения
	                       |ИЗ
	                       |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                       |ГДЕ
	                       |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                       |	И CRM_СообщениеМессенджера.Группа = &Группа
	                       |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	НеСвязанныеСообщения.Ссылка
	                       |ИЗ
	                       |	НеСвязанныеСообщения КАК НеСвязанныеСообщения
	                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                       |		ПО НеСвязанныеСообщения.Ссылка = CRM_ЖурналДокументов.Объект
	                       |			И (CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка))");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Текущий пользователь получить право учетной записи.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  ИмяПрава		 - Строка - Имя права. 
// 
// Возвращаемое значение:
//  Булево - Право учетной записи.
//
Функция ТекущийПользовательПолучитьПравоУчетнойЗаписи(УчетнаяЗапись, ИмяПрава) Экспорт
	
	ЗначениеПраваУчетнойЗаписи = Ложь;
	
	// Полноправным пользователям разрешены все действия независимо от настроек.
	Если ИмяПрава = "Администрирование" Тогда
		
		ЗначениеПраваУчетнойЗаписи = Пользователи.ЭтоПолноправныйПользователь()
	
	КонецЕсли; 
	
	Если НЕ ЗначениеПраваУчетнойЗаписи Тогда
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	CRM_УчетныеЗаписиМессенджеров.Администрирование,
			               |	CRM_УчетныеЗаписиМессенджеров.Запись
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
			               |ГДЕ
			               |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
			               |	И CRM_УчетныеЗаписиМессенджеров.Пользователь В (&Пользователь)";
			
			Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
			РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
			РолиПользователя.Добавить(ТекущийПользователь);
			Запрос.УстановитьПараметр("Пользователь", РолиПользователя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ЗначениеПраваУчетнойЗаписи = Выборка[ИмяПрава];
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЕсли; 
	
	Возврат ЗначениеПраваУчетнойЗаписи;

КонецФункции // ПолучитьПравоПользователяУчетнойЗаписи() 

// Пометить исходящие как прочтенные
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Учетная запись для отправки.
//  Группа			 - Строка - Текущая группа. 
//  ID_Пользователя	 - Строка - ИД пользователя.
//
Процедура ПометитьИсходящиеКакПрочтенные(УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Прочитано = Истина;
		СообщениеОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура - Пометить входящие как прочтенные
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  Группа			 - Строка - Текущая группа. 
//  ID_Пользователя	 - Строка - ИД пользователя.
//
Процедура ПометитьВходящиеКакПрочтенные(УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |	И НЕ CRM_СообщениеМессенджера.Прочитано");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Прочитано = Истина;
		СообщениеОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура - Записать событие мессенджера
//
// Параметры:
//  Событие			 - ПеречислениеСсылка.CRM_СобытияМессенджеров - Событие мессенджера.
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  ID_Пользователя	 - Строка - ИД пользователя.
//  Значение		 - ДокументСсылка.CRM_СообщениеМессенджера - Ссылка на документ. 
//
Процедура ЗаписатьСобытиеМессенджера(Событие, УчетнаяЗапись, ID_Пользователя, Значение=Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	CRM_УчетныеЗаписиМессенджеров.Пользователь КАК Пользователь
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
			               |ГДЕ
			               |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
			               |	И CRM_УчетныеЗаписиМессенджеров.Пользователь ССЫЛКА Справочник.Пользователи
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	ИсполнителиЗадач.Исполнитель
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			               |		ПО CRM_УчетныеЗаписиМессенджеров.Пользователь = ИсполнителиЗадач.РольИсполнителя
			               |ГДЕ
			               |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьМенеджерЗаписи();
		Запись.Пользователь = Выборка.Пользователь;
		Запись.Событие = Событие;
		Запись.УчетнаяЗапись = УчетнаяЗапись;
		Запись.ID_Пользователя = ID_Пользователя;
		Запись.Значение = Значение;
		Запись.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

// Получить события мессенджера
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Ссылка на пользователя.
// 
// Возвращаемое значение:
//  Структура - Структура события.
//
Функция ПолучитьСобытияМессенджера(Пользователь) Экспорт
	НаборЗаписей = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	События = Новый Массив;
	
	Для каждого Запись из НаборЗаписей Цикл
		Событие = Новый Структура("Событие, УчетнаяЗапись, ID_Пользователя, Значение", Неопределено, Неопределено, Неопределено, Неопределено);
		ЗаполнитьЗначенияСвойств(Событие, Запись);
		События.Добавить(Событие);
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	Возврат События;
КонецФункции

// Очистить события мессенджера.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Ссылка на пользователя.
//
Процедура ОчиститьСобытияМессенджера(Пользователь) Экспорт
	НаборЗаписей = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Записать();
КонецПроцедуры

// Связать все сообщения пользователя с контактом
//
// Параметры:
//  ТипМессенджера	 - Строка - Тип мессенджера.
//  ID_Пользователя	 - Строка - ИД пользователя.
//  Контакт			 - ОпределяемыйТип.КонтактВзаимодействия - Контакт взаимодействия.
//
Процедура СвязатьВсеСообщенияПользователяСКонтактом(ТипМессенджера, ID_Пользователя, Контакт) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись.ТипМессенджера = &ТипМессенджера");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("ТипМессенджера", ТипМессенджера);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Контакт = Контакт;
		СообщениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Создать сообщения из полученных данных
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка - Ссылка на учетную запись.
//  МассивСообщений	 - Массив - Массив сообщений. 
//
Процедура СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений) Экспорт
	Для каждого ТекСообщение из МассивСообщений Цикл
		СообщениеСсылка = НайтиСообщениеМессенджера(УчетнаяЗапись, ТекСообщение.Группа, ТекСообщение.ID_Пользователя, ТекСообщение.ID_Сообщения);
		Если СообщениеСсылка = Неопределено Тогда 
			Сообщение = Документы.CRM_СообщениеМессенджера.СоздатьДокумент();
			Если ТекСообщение.Свойство("Ссылка") Тогда
				Сообщение.УстановитьСсылкуНового(ТекСообщение.Ссылка);
			КонецЕсли;
			Сообщение.УчетнаяЗапись = УчетнаяЗапись;
			Сообщение.Ответственный = УчетнаяЗапись.Ответственный;
			Сообщение.CRM_РольОтветственного = УчетнаяЗапись.CRM_РольОтветственного;
		Иначе
			Сообщение = СообщениеСсылка.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Сообщение, ТекСообщение);
		Сообщение.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера[ТекСообщение.ВидСообщения];
		CRM_РаботаСМессенджерамиСервер.СкрытьИзАрмаПредыдущиеСообщения(Сообщение);
		Сообщение.Записать();
		Для каждого Вложение из ТекСообщение.Вложения Цикл
			Вложение.ВладелецФайлов = Сообщение.Ссылка;
			РаботаСФайлами.ДобавитьФайл(Вложение, Вложение.АдресФайлаВХранилище);
		КонецЦикла;
		CRM_РаботаСМессенджерамиСервер.ЗаписатьСобытиеМессенджера(Перечисления.CRM_СобытияМессенджеров.ПолученоНовоеСообщение, УчетнаяЗапись, Сообщение.ID_Пользователя, Сообщение.Ссылка);
	КонецЦикла;
КонецПроцедуры

// Получить список мессенджеров
// 
// Возвращаемое значение:
//  СписокЗначений - Список мессенджеров.
//
Функция ПолучитьСписокМессенджеров() Экспорт
	СписокМессенджеров = Новый СписокЗначений;
	Для каждого Обработка Из Метаданные.Обработки Цикл
		Если СтрНайти(Обработка.Имя, "CRM_РаботаСМессенджером") = 1 Тогда
			СписокМессенджеров.Добавить(СтрЗаменить(Обработка.Имя, "CRM_РаботаСМессенджером", ""));
		КонецЕсли;
	КонецЦикла;
	Возврат СписокМессенджеров;
КонецФункции

// Структура сообщения месенджера
// 
// Возвращаемое значение:
//  Структура - Структура сообщения. 
//
Функция СтруктураСообщенияМесенджера() Экспорт
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("Дата");
	СтруктураСообщения.Вставить("ID_Сообщения");
	СтруктураСообщения.Вставить("ТекстСообщения");
	СтруктураСообщения.Вставить("ВидСообщения");
	СтруктураСообщения.Вставить("ID_Пользователя");
	СтруктураСообщения.Вставить("Контакт");
	СтруктураСообщения.Вставить("КонтактПредставление");
	СтруктураСообщения.Вставить("Группа");
	СтруктураСообщения.Вставить("Прочитано");
	СтруктураСообщения.Вставить("Вложения", Новый Массив);
	Возврат СтруктураСообщения;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиСообщениеМессенджера(УчетнаяЗапись, Группа, ID_Пользователя, ID_Сообщения) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |	И CRM_СообщениеМессенджера.ID_Сообщения = &ID_Сообщения");
	Запрос.УстановитьПараметр("ID_Сообщения", ID_Сообщения);
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

Процедура СкрытьИзАрмаПредыдущиеСообщения(Сообщение) Экспорт 
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                       |ИЗ
	                       |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                       |ГДЕ
	                       |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                       |	И CRM_СообщениеМессенджера.Группа = &Группа
	                       |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
						   //|	И CRM_СообщениеМессенджера.Дата < &Дата
	                       |	И НЕ CRM_СообщениеМессенджера.CRM_СкрытьВАРМ
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	CRM_СообщениеМессенджера.Дата УБЫВ");
	Запрос.УстановитьПараметр("УчетнаяЗапись", Сообщение.УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Сообщение.Группа);
	Запрос.УстановитьПараметр("ID_Пользователя", Сообщение.ID_Пользователя);
//	Запрос.УстановитьПараметр("Дата", Сообщение.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Первый = Истина;
	Пока Выборка.Следующий() Цикл
		Если Первый Тогда
			Первый = Ложь;
			Продолжить;
		КонецЕсли;
		РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(Выборка.Ссылка);
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.CRM_СкрытьВАРМ = Истина;
		Попытка
			СообщениеОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОжиданиеСобытийМессенджера(УникальныйИдентификаторЗадания = Неопределено, ТипМессенджера = Неопределено) Экспорт
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	Если УникальныйИдентификаторЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(ТипМессенджера);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	CRM_УчетныеЗаписиМессенджеров.Ссылка
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	|ГДЕ
	|	CRM_УчетныеЗаписиМессенджеров.УникальныйИдентификаторЗадания = &УникальныйИдентификаторЗадания
	|	И CRM_УчетныеЗаписиМессенджеров.ТипМессенджера = &ТипМессенджера");
	Запрос.УстановитьПараметр("УникальныйИдентификаторЗадания", УникальныйИдентификаторЗадания);
	Запрос.УстановитьПараметр("ТипМессенджера", ТипМессенджера);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МассивСообщений = МодульМенеджера.ПолучитьСообщения(Выборка.Ссылка);
		СоздатьСообщенияИзПолученныхДанных(Выборка.Ссылка, МассивСообщений);
		Если ЭтоФайловаяБаза ИЛИ РаботаВМоделиСервисаПовтИсп.РазделениеВключено() Тогда Возврат; КонецЕсли;
		МодульМенеджера.ОжиданиеСобытий(Выборка.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
