////////////////////////////////////////////////////////////////////////////////
// Отражение зарплаты в учете
// Переопределяемое в пределах библиотеки поведение.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТУдержанияПоСотрудникамКонтрагент(МенеджерВременныхТаблиц, ИмяТаблицы = "ВТУдержанияПоСотрудникам") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдержанияПоСотрудникам.Удержание,
	|	УдержанияПоСотрудникам.ДокументОснование КАК ДокументОснование,
	|	ПолучателиУдержаний.Контрагент
	|ПОМЕСТИТЬ ВТУдержанияПоСотрудникамКонтрагент
	|ИЗ
	|	#ИмяТаблицы КАК УдержанияПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУдержаний КАК ПолучателиУдержаний
	|		ПО УдержанияПоСотрудникам.ДокументОснование = ПолучателиУдержаний.ДокументОснование
	|			И УдержанияПоСотрудникам.ФизическоеЛицо = ПолучателиУдержаний.ФизическоеЛицо
	|			И УдержанияПоСотрудникам.Удержание = ПолучателиУдержаний.Удержание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьТаблицуНДФЛ(ПериодРегистрации, Организация, МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	
	ВидыОпераций = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ(Истина);

	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	СУММА(НачисленияУдержания.Сумма) КАК Сумма,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	0 КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.Организация = &Организация
	|	И НачисленияУдержания.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачисленияУдержания.НачислениеУдержание В(&ВидыОпераций)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНДФЛ.Организация,
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сотрудник,
	|	ТаблицаНДФЛ.НачислениеУдержание,
	|	ТаблицаНДФЛ.СтатьяРасходов,
	|	ТаблицаНДФЛ.Подразделение,
	|	ТаблицаНДФЛ.Сумма,
	|	ТаблицаНДФЛ.ТерриторияВыполненияРаботВОрганизации,
	|	ТаблицаНДФЛ.РегистрацияВНалоговомОргане,
	|	ТаблицаНДФЛ.ИдентификаторСтроки
	|ИЗ
	|	ВТТаблицаНДФЛ КАК ТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Организация КАК Организация,
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.НачислениеУдержание КАК НачислениеУдержание,
	|	ВременнаяТаблица.СтатьяРасходов КАК СтатьяРасходов,
	|	ВременнаяТаблица.Подразделение КАК Подразделение,
	|	ВременнаяТаблица.Сумма КАК Сумма,
	|	ВременнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ВременнаяТаблица.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВременнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТТаблицаНДФЛ
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачислениеУдержание";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьТаблицуНачислений(ПериодРегистрации, Организация, МенеджерВременныхТаблиц, Сотрудники) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	УсловиеПоСотрудникам = "ИСТИНА";
	Если Сотрудники <> Неопределено Тогда
		УсловиеПоСотрудникам = "Начисления.Сотрудник В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	&ПериодРегистрации КАК ДатаНачала,
	|	&ПериодРегистрации КАК ДатаОкончания,
	|	&ПериодРегистрации КАК ПериодДействия,
	|	Начисления.НачислениеУдержание КАК НачислениеУдержание,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	0 КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК Сторно,
	|	ЛОЖЬ КАК ФиксСторно
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	И &УсловиеПоСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ПериодДействия,
	|	Начисления.НачислениеУдержание,
	|	Начисления.Сумма,
	|	Начисления.ДокументОснование,
	|	Начисления.ИдентификаторСтроки,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Организация КАК Организация,
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВременнаяТаблица.Подразделение КАК Подразделение,
	|	ВременнаяТаблица.СтатьяРасходов КАК СтатьяРасходов,
	|	ВременнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ВременнаяТаблица.ДатаНачала КАК ДатаНачала,
	|	ВременнаяТаблица.ДатаОкончания КАК ДатаОкончания,
	|	ВременнаяТаблица.ПериодДействия КАК ПериодДействия,
	|	ВременнаяТаблица.НачислениеУдержание КАК НачислениеУдержание,
	|	ВременнаяТаблица.Сумма КАК Сумма,
	|	ВременнаяТаблица.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВременнаяТаблица.Сторно КАК Сторно,
	|	ВременнаяТаблица.ФиксСторно КАК ФиксСторно
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВременнаяТаблица";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотрудникам", УсловиеПоСотрудникам);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьТаблицуУдержаний(ПериодРегистрации, Организация, МенеджерВременныхТаблиц) Экспорт

	ВидыОсобыхНачисленийИУдержанийНДФЛ = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдержанияПоСотрудникам.Организация КАК Организация,
	|	УдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	|	УдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|	УдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|	УдержанияПоСотрудникам.ДатаНачала КАК ДатаНачала,
	|	УдержанияПоСотрудникам.Удержание КАК Удержание,
	|	УдержанияПоСотрудникам.Сумма КАК Сумма,
	|	УдержанияПоСотрудникам.ДокументОснование КАК ДокументОснование,
	|	УдержанияПоСотрудникам.Контрагент КАК Контрагент,
	|	УдержанияПоСотрудникам.ВидОперации КАК ВидОперации,
	|	УдержанияПоСотрудникам.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	ВТУдержанияПоСотрудникам КАК УдержанияПоСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НАЧАЛОПЕРИОДА(НачисленияУдержания.Период, МЕСЯЦ),
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.Сумма,
	|	НачисленияУдержания.ДокументОснование,
	|	НачисленияУдержания.Контрагент,
	|	ВЫБОР
	|		КОГДА УдержаниеВидОперации.ВидОперации ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)
	|		КОГДА УдержаниеВидОперации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты)
	|		КОГДА УдержаниеВидОперации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты)
	|		ИНАЧЕ УдержаниеВидОперации.ВидОперации
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК УдержаниеВидОперации
	|		ПО НачисленияУдержания.НачислениеУдержание = УдержаниеВидОперации.НачислениеУдержание
	|ГДЕ
	|	НачисленияУдержания.Организация = &Организация
	|	И НачисленияУдержания.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И НЕ НачисленияУдержания.НачислениеУдержание В (&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУдержанияПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Организация КАК Организация,
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВременнаяТаблица.Подразделение КАК Подразделение,
	|	ВременнаяТаблица.СтатьяРасходов КАК СтатьяРасходов,
	|	ВременнаяТаблица.ДатаНачала КАК ДатаНачала,
	|	ВременнаяТаблица.Удержание КАК Удержание,
	|	ВременнаяТаблица.Сумма КАК Сумма,
	|	ВременнаяТаблица.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблица.Контрагент КАК Контрагент,
	|	ВременнаяТаблица.ВидОперации КАК ВидОперации,
	|	ВременнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТУдержанияПоСотрудникам
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВременнаяТаблица";
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьТаблицуНачислениеУдержаниеВидОперации(Таблица) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДополняемаяТаблица", Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НачислениеУдержание,
	|	Таблица.ВидОперации
	|ПОМЕСТИТЬ ВТДополняемаяТаблица
	|ИЗ
	|	&ДополняемаяТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополняемаяТаблица.НачислениеУдержание КАК НачислениеУдержание,
	|	ДополняемаяТаблица.ВидОперации КАК ВидОперации
	|ИЗ
	|	ВТДополняемаяТаблица КАК ДополняемаяТаблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыВыплатБывшимСотрудникам.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам)
	|ИЗ
	|	Справочник.ВидыВыплатБывшимСотрудникам КАК ВидыВыплатБывшимСотрудникам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыПрочихДоходовФизическихЛиц.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов)
	|ИЗ
	|	Справочник.ВидыПрочихДоходовФизическихЛиц КАК ВидыПрочихДоходовФизическихЛиц";
	
	Таблица = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Процедура ДополнитьМассивТиповНачисления(МассивТипов) Экспорт

	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
КонецПроцедуры

Функция ТипыПоляДокументОснование() Экспорт
	
	МассивТипов = Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип.Типы();
	МассивТиповКА = Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержанияПоКонтрагентамАкционерам.Тип.Типы();
	
	Для каждого Значение Из МассивТиповКА Цикл
		МассивТипов.Добавить(Значение);
	КонецЦикла;
		
	Возврат МассивТипов;
	
КонецФункции

// Дополняет записи набора записей регистра СведенияОДоходахНДФЛ аналитикой: Статьи финансирования и/или Статьи расходов
// Параметры 
//		Движения - коллекции наборов записей движений документа, должна содержать коллекции еще не записанных наборов
//			СведенияОДоходахНДФЛ
//			БухучетНачисленияУдержанияПоСотрудникам - коллекция может отсутствовать или быть пустой.
//			НачисленияУдержанияПоСотрудникам - коллекция может отсутствовать или быть пустой.
//		
Процедура ДополнитьСведенияОДоходахНДФЛСведениямиОРаспределенииПоСтатьям(Движения) Экспорт

	ИменаКолонок = "ФизическоеЛицо,НачислениеУдержание,ТерриторияВыполненияРаботВОрганизации,Сотрудник,Подразделение,ДатаНачала,Сумма,СтатьяРасходов,СтатьяФинансирования,ГруппаНачисленияУдержанияВыплаты";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		ИмяТаблицы = "БухучетНачисленияУдержанияПоСотрудникам";
	Иначе
		ИмяТаблицы = "НачисленияУдержанияПоСотрудникам";
	КонецЕсли;
	
	Если Движения.Найти(ИмяТаблицы) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаспределениеНачислений = Движения[ИмяТаблицы].Выгрузить(,ИменаКолонок);
	Если РаспределениеНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОДоходах = Движения.СведенияОДоходахНДФЛ.Выгрузить();
	СведенияОДоходах.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ИдентификаторСтроки = 1;
	Для каждого СтрокаТЗ Из СведенияОДоходах Цикл
		СтрокаТЗ.ИдентификаторСтроки = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	НовыеСведенияОДоходах = НовыеСведенияОДоходахДополненныеСтатьейФинансирования(СведенияОДоходах, РаспределениеНачислений);
	Если НовыеСведенияОДоходах.Количество()>0 Тогда
		Движения.СведенияОДоходахНДФЛ.Загрузить(НовыеСведенияОДоходах);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыеСведенияОДоходахДополненныеСтатьейФинансирования(СведенияОДоходах, РаспределениеНачислений) Экспорт

	НовыеСведенияОДоходах = СведенияОДоходах.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СведенияОДоходах", СведенияОДоходах);
	Запрос.УстановитьПараметр("РаспределениеНачислений", РаспределениеНачислений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходахНДФЛ.Период КАК Период,
	|	СведенияОДоходахНДФЛ.Организация КАК Организация,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Территория,
	|	СведенияОДоходахНДФЛ.Сотрудник КАК Сотрудник,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК Подразделение,
	|	СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходахНДФЛ.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСведенияОДоходах
	|ИЗ
	|	&СведенияОДоходах КАК СведенияОДоходахНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РаспределениеНачислений.НачислениеУдержание КАК Начисление,
	|	РаспределениеНачислений.ТерриторияВыполненияРаботВОрганизации КАК Территория,
	|	РаспределениеНачислений.ДатаНачала КАК ДатаНачала,
	|	РаспределениеНачислений.Сотрудник КАК Сотрудник,
	|	РаспределениеНачислений.Подразделение КАК Подразделение,
	|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеНачислений.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачислений
	|ИЗ
	|	&РаспределениеНачислений КАК РаспределениеНачислений
	|ГДЕ
	|	РаспределениеНачислений.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы))
	|	И РаспределениеНачислений.Сумма <> 0";
	Запрос.Выполнить();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			Модуль.УдалитьСуммыЗаСчетГрантовВТаблицеБухучетНачислений(Запрос.МенеджерВременныхТаблиц, "ВТРаспределениеНачислений");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеНачисленийВременная.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РаспределениеНачисленийВременная.Начисление КАК Начисление,
	|	РаспределениеНачисленийВременная.Территория КАК Территория,
	|	РаспределениеНачисленийВременная.Сотрудник КАК Сотрудник,
	|	РаспределениеНачисленийВременная.Подразделение КАК Подразделение,
	|	РаспределениеНачисленийВременная.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачисленийВременная.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(РаспределениеНачисленийВременная.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачисленийСвод
	|ИЗ
	|	ВТРаспределениеНачислений КАК РаспределениеНачисленийВременная
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНачисленийВременная.СтатьяФинансирования,
	|	РаспределениеНачисленийВременная.Сотрудник,
	|	РаспределениеНачисленийВременная.Территория,
	|	РаспределениеНачисленийВременная.ФизическоеЛицо,
	|	РаспределениеНачисленийВременная.СтатьяРасходов,
	|	РаспределениеНачисленийВременная.Подразделение,
	|	РаспределениеНачисленийВременная.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходах.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходах.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходах.СуммаВычета КАК СуммаВычета,
	|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеНачислений.Сумма КАК СуммаБУ
	|ПОМЕСТИТЬ ВТСтрокиКОбработке
	|ИЗ
	|	ВТСведенияОДоходах КАК СведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспределениеНачисленийСвод КАК РаспределениеНачислений
	|		ПО СведенияОДоходах.ФизическоеЛицо = РаспределениеНачислений.ФизическоеЛицо
	|			И СведенияОДоходах.Начисление = РаспределениеНачислений.Начисление
	|			И СведенияОДоходах.Территория = РаспределениеНачислений.Территория
	|			И СведенияОДоходах.Сотрудник = РаспределениеНачислений.Сотрудник
	|			И СведенияОДоходах.Подразделение = РаспределениеНачислений.Подразделение
	|			И (РаспределениеНачислений.Сумма <> 0)
	|ГДЕ
	|	НЕ(СведенияОДоходах.СуммаДохода = 0
	|				И СведенияОДоходах.СуммаВычета = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходах.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОДоходах.Период КАК Период,
	|	СведенияОДоходах.Организация КАК Организация,
	|	СведенияОДоходах.Сотрудник КАК Сотрудник,
	|	СведенияОДоходах.Подразделение КАК Подразделение,
	|	СведенияОДоходах.Территория КАК ТерриторияВыполненияРаботВОрганизации,
	|	СведенияОДоходах.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходах.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСтрокиБезБазы
	|ИЗ
	|	ВТСведенияОДоходах КАК СведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиКОбработке КАК СтрокиКОбработке
	|		ПО СведенияОДоходах.ИдентификаторСтроки = СтрокиКОбработке.ИдентификаторСтроки
	|ГДЕ
	|	СтрокиКОбработке.ИдентификаторСтроки ЕСТЬ NULL
	|	И НЕ(СведенияОДоходах.СуммаДохода = 0
	|				И СведенияОДоходах.СуммаВычета = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиБезБазы.Период КАК Период,
	|	СотрудникиБезБазы.Организация КАК Организация,
	|	СотрудникиБезБазы.Сотрудник КАК Сотрудник,
	|	СотрудникиБезБазы.Подразделение КАК Подразделение,
	|	СотрудникиБезБазы.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации
	|ПОМЕСТИТЬ ВТСотрудникиБезБазы
	|ИЗ
	|	ВТСтрокиБезБазы КАК СотрудникиБезБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиКОбработке.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СтрокиКОбработке.СуммаДохода КАК СуммаДохода,
	|	СтрокиКОбработке.СуммаВычета КАК СуммаВычета,
	|	СтрокиКОбработке.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтрокиКОбработке.СтатьяРасходов КАК СтатьяРасходов,
	|	СтрокиКОбработке.СуммаБУ КАК СуммаБУ
	|ИЗ
	|	ВТСтрокиКОбработке КАК СтрокиКОбработке
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СотрудникиБезБазы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ВТСтрокиБезБазы КАК СотрудникиБезБазы";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	
	РезультатРаспределения = Новый ТаблицаЗначений;
	РезультатРаспределения.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	РезультатРаспределения.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезультатРаспределения.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезультатРаспределения.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	РезультатРаспределения.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	// обработка строк, не имеющих базу
	Если Не Результат[КоличествоРезультатов].Пустой() Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
			
			ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиБезБазы");
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтрокиБезБазы.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	СведенияОБухучете.СтатьяФинансирования КАК СтатьяФинансирования,
			|	СведенияОБухучете.СтатьяРасходов КАК СтатьяРасходов,
			|	СтрокиБезБазы.СуммаДохода КАК СуммаДохода,
			|	СтрокиБезБазы.СуммаВычета КАК СуммаВычета
			|ИЗ
			|	ВТСтрокиБезБазы КАК СтрокиБезБазы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК СведенияОБухучете
			|		ПО СтрокиБезБазы.Сотрудник = СведенияОБухучете.Сотрудник
			|			И СтрокиБезБазы.Период = СведенияОБухучете.Период
			|			И СтрокиБезБазы.Подразделение = СведенияОБухучете.Подразделение
			|			И СтрокиБезБазы.ТерриторияВыполненияРаботВОрганизации = СведенияОБухучете.ТерриторияВыполненияРаботВОрганизации
			|			И СтрокиБезБазы.Организация = СведенияОБухучете.Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторСтроки";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(РезультатРаспределения.Добавить(), Выборка);
			КонецЦикла;
			
		Иначе
			
			ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
			РасчетыПоОплатеТруда = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
			Запрос.УстановитьПараметр("РасчетыПоОплатеТруда", РасчетыПоОплатеТруда);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтрокиБезБазы.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	&РасчетыПоОплатеТруда КАК СтатьяРасходов,
			|	СтрокиБезБазы.СуммаДохода КАК СуммаДохода,
			|	СтрокиБезБазы.СуммаВычета КАК СуммаВычета
			|ИЗ
			|	ВТСтрокиБезБазы КАК СтрокиБезБазы
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторСтроки";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(РезультатРаспределения.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// обработка строк, имеющих базу
	Выборка = Результат[КоличествоРезультатов-1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		
		СуммаДохода = Выборка.СуммаДохода;
		СуммаВычета = Выборка.СуммаВычета;
		
		Коэффициенты = Новый Массив;
		СтатьиФинансирования = Новый Массив;
		СтатьиРасходов = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Коэффициенты.Добавить(Выборка.СуммаБУ);
			СтатьиФинансирования.Добавить(Выборка.СтатьяФинансирования);
			СтатьиРасходов.Добавить(Выборка.СтатьяРасходов);
		КонецЦикла;
		
		Если Коэффициенты.Количество() = 1 Тогда
			
			НоваяСтрока = РезультатРаспределения.Добавить();
			НоваяСтрока.ИдентификаторСтроки  = Выборка.ИдентификаторСтроки;
			НоваяСтрока.СтатьяФинансирования = СтатьиФинансирования[0];
			НоваяСтрока.СтатьяРасходов 		 = СтатьиРасходов[0];
			НоваяСтрока.СуммаДохода 		 = СуммаДохода;
			НоваяСтрока.СуммаВычета 		 = СуммаВычета;
			
		Иначе
			
			Если СуммаДохода <> 0 Тогда
				РаспределенныеСуммыДохода = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаДохода, Коэффициенты);
			КонецЕсли;
			Если СуммаВычета <> 0 Тогда
				РаспределенныеСуммыВычета = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаВычета, Коэффициенты);	
			КонецЕсли;
			
			Для Индекс = 0 По Коэффициенты.ВГраница() Цикл
				НоваяСтрока = РезультатРаспределения.Добавить();
				НоваяСтрока.ИдентификаторСтроки  = Выборка.ИдентификаторСтроки;
				НоваяСтрока.СтатьяФинансирования = СтатьиФинансирования[Индекс];
				НоваяСтрока.СтатьяРасходов 		 = СтатьиРасходов[Индекс];
				НоваяСтрока.СуммаДохода 		 = ?(СуммаДохода = 0, 0 , РаспределенныеСуммыДохода[Индекс]);
				НоваяСтрока.СуммаВычета 		 = ?(СуммаВычета = 0, 0 , РаспределенныеСуммыВычета[Индекс]);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	

	Если РезультатРаспределения.Количество() > 0 Тогда
		
		РезультатРаспределения.Индексы.Добавить("ИдентификаторСтроки");
		Отбор = Новый Структура("ИдентификаторСтроки");
		
		Для каждого СтрокаДоходов Из СведенияОДоходах Цикл
			
			Отбор.ИдентификаторСтроки = СтрокаДоходов.ИдентификаторСтроки;
			СтрокиРаспределения = РезультатРаспределения.НайтиСтроки(Отбор);
			Если СтрокиРаспределения.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НовыеСведенияОДоходах.Добавить(), СтрокаДоходов);
			Иначе	
				Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					НоваяСтрока = НовыеСведенияОДоходах.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоходов);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеСведенияОДоходах;

КонецФункции 

// Раскладывает таблицу значений в соответствие
//	Параметры
// 		ТаблицаФизическихЛиц - таблица значений, содержит колонку ФизическоеЛицо.
//	Возвращаемое значение - Соответствие
//		Ключ - ФизическоеЛицо
//		Значение - массив ссылок на строки из таблицы, соответствующих этому физическому лицо.
//
Функция СтрокиТаблицыЗначенийПоФизическимЛицам(ТаблицаФизическихЛиц) Экспорт

	СтрокиТаблицыПоФизическимЛицам = Новый Соответствие;
	Если ТаблицаФизическихЛиц <> Неопределено Тогда
		Для Каждого Строка Из ТаблицаФизическихЛиц Цикл
			СтрокиПоФизическомуЛицу = СтрокиТаблицыПоФизическимЛицам[Строка.ФизическоеЛицо];
			Если СтрокиПоФизическомуЛицу = Неопределено Тогда
				СтрокиПоФизическомуЛицу = Новый Массив;
			КонецЕсли;
			СтрокиПоФизическомуЛицу.Добавить(Строка);
			СтрокиТаблицыПоФизическимЛицам.Вставить(Строка.ФизическоеЛицо, СтрокиПоФизическомуЛицу);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрокиТаблицыПоФизическимЛицам;

КонецФункции

Процедура РаспределитьУдержанияПоБазе(РезультатыРаспределения, ТаблицаУдержаний, БазаУдержаний, СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации, БазовыеВидыРасчета = Неопределено, ТочностьОкругленияВТаблице = Ложь, РаспределятьТолькоПоРабочимМестам = Ложь) Экспорт

	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РаспределятьТолькоПоРабочимМестам Тогда
		// поля СтатьяФинансирования и СтатьяРасходов есть в таблице ТаблицаУдержаний
		ИменаКолонокСтрокРаспределения = "ГоловнойСотрудник,Сотрудник,Подразделение,ПодразделениеУчетаЗатрат";
	Иначе
		ИменаКолонокСтрокРаспределения = "ГоловнойСотрудник,Сотрудник,Подразделение,ПодразделениеУчетаЗатрат,СтатьяФинансирования,СтатьяРасходов";
	КонецЕсли;
	
	ПоляЗаполненияАналитики = "СтатьяФинансирования,СтатьяРасходов";
	
	СтрокиБезБазы = Новый Массив;
	ОтборСтрок = Новый Структура("ФизическоеЛицо");
	Для Каждого СтрокаУдержаний Из ТаблицаУдержаний Цикл
		
		УчитыватьУжеРаспределенные = (СтрокаУдержаний.Сумма <> 0);
		
		ОтборСтрок.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
		СтрокиРаспределения = БазаУдержаний.Скопировать(ОтборСтрок);

		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиБезБазы.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		
		Если БазовыеВидыРасчета <> Неопределено Тогда
			// отберем строки распределения по базовым начислениям
			БазовыеНачисления = БазовыеВидыРасчета[СтрокаУдержаний.ВидУдержания];
			Если БазовыеНачисления <> Неопределено И БазовыеНачисления.Количество()>0 Тогда
				НовыеСтрокиРаспределения = Новый Массив;
				Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					Если БазовыеНачисления.Найти(СтрокаРаспределения.Начисление) <> Неопределено Тогда
						НовыеСтрокиРаспределения.Добавить(СтрокаРаспределения);
					КонецЕсли;
				КонецЦикла;
				СтрокиРаспределения = БазаУдержаний.Скопировать(НовыеСтрокиРаспределения);
			КонецЕсли;
		КонецЕсли;
		СтрокиРаспределения.Свернуть(ИменаКолонокСтрокРаспределения,"Сумма");
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиБезБазы.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		
		СтрокиРаспределенияБезУчетаПодразделения = Новый Массив;
		СтрокиРаспределенияСУчетомПодразделения = Новый Массив;
		СтрокиРаспределенияСУчетомОсновногоСотрудника = Новый Массив;
		Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиРаспределения Цикл
			СтрокиРаспределенияБезУчетаПодразделения.Добавить(СтрокаБазыПоФизическомуЛицу);
			// Если подразделение совпадает, то эта строка с более точным источником распределением.
			Если СтрокаУдержаний.Подразделение = СтрокаБазыПоФизическомуЛицу.Подразделение Тогда
				СтрокиРаспределенияСУчетомПодразделения.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) 
				И СтрокаУдержаний.Сотрудник = СтрокаБазыПоФизическомуЛицу.ГоловнойСотрудник Тогда
				СтрокиРаспределенияСУчетомОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЕсли;
		КонецЦикла;
		
		СтрокиРаспределения = СтрокиРаспределенияСУчетомОсновногоСотрудника;
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиРаспределения = СтрокиРаспределенияСУчетомПодразделения;
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = СтрокиРаспределенияБезУчетаПодразделения;
			КонецЕсли;
		КонецЕсли;
		
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если УчитыватьУжеРаспределенные И СтрокиУжеУдержаноПоФизическомуЛицу <> Неопределено Тогда
			Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				Если СтрокаУжеУдержаноПоФизическомуЛицу.ВидУдержания = СтрокаУдержаний.ВидУдержания 
 						И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование Тогда
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаУдержаний.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ Тогда
			Точность = 0;
		Иначе	
			Точность = ?(ТочностьОкругленияВТаблице,?(СтрокаУдержаний.ОкруглятьРезультатРаспределения,0,2),2);
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма + РанееУдержано, Коэффициенты, Точность);
		
		Если РаспределенныеСуммы <> Неопределено Тогда
			
			// минусуем уже удержанные суммы
			Если УчитыватьУжеРаспределенные И СтрокиУжеУдержаноПоФизическомуЛицу <> Неопределено Тогда
				Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
					Если СтрокаУжеУдержаноПоФизическомуЛицу.ВидУдержания = СтрокаУдержаний.ВидУдержания 
 							И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование Тогда
							
						НоваяСтрока = РезультатыРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
						Если РаспределятьТолькоПоРабочимМестам Тогда
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний, ПоляЗаполненияАналитики);
						КонецЕсли;
						
						НоваяСтрока.Результат 			= - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
						НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
						НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// плюсуем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = РезультатыРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				Если РаспределятьТолькоПоРабочимМестам Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний, ПоляЗаполненияАналитики);
				КонецЕсли;
				
				НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
				НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
				НоваяСтрока.Результат           = РаспределенныеСуммы[Индекс];
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			Если РаспределятьТолькоПоРабочимМестам Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний, ПоляЗаполненияАналитики);
			КонецЕсли;
			
			НоваяСтрока.ВидУдержания        = СтрокаУдержаний.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
			НоваяСтрока.Результат           = СтрокаУдержаний.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СвернутьРезультатыРаспределения(РезультатыРаспределения);
	
	Если СтрокиБезБазы.Количество() > 0 Тогда
		РаспределитьУдержанияПоБазеПоУмолчанию(РезультатыРаспределения, СтрокиБезБазы, Организация, ПериодРегистрации, Истина, РаспределятьТолькоПоРабочимМестам);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет распределение удержаний по статьям
//	Параметры
//		РаспределениеУдержаний, таблица значений, которая заполняется результатами отражения удержаний
//		ИсходныеДанные - структура, , см ОписаниеИсходныхДанныхДляРаспределенияУдержаний
//
Процедура ВыполнитьРаспределениеУдержаний(РаспределениеУдержаний, ИсходныеДанные) Экспорт
	
	ТаблицаУдержаний = ИсходныеДанные.ТаблицаУдержаний;
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = ИсходныеДанные.МенеджерВременныхТаблиц;
	ПериодРегистрации       = ИсходныеДанные.ПериодРегистрации;
	Организация      		= ИсходныеДанные.Организация;
	БазовыеНачисления 		= ИсходныеДанные.БазовыеНачисления;
	ВидыНачисленийДополненияРасчетнойБазы 	= ИсходныеДанные.ВидыНачисленийДополненияРасчетнойБазы;
	СтрокиУжеУдержаноПоФизическимЛицам 		= ИсходныеДанные.СтрокиУжеУдержаноПоФизическимЛицам;
	
	УдалитьВТ = Новый Массив;
	
	КатегорииОплатыБольничного = ПланыВидовРасчета.Начисления.КатегорииОплатыБольничного();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорииБЛ", КатегорииОплатыБольничного);
	Запрос.УстановитьПараметр("Удержания", ТаблицаУдержаний);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Сотрудник,
	|	Удержания.ВидУдержания,
	|	Удержания.Сумма КАК Сумма,
	|	Удержания.ДатаНачала,
	|	Удержания.ДатаОкончания,
	|	Удержания.ДокументОснование,
	|	Удержания.ПлатежныйАгент,
	|	Удержания.Получатель,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТУдержанияДляРаспределения
	|ИЗ
	|	&Удержания КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдержанияДляРаспределения.ДокументОснование КАК ИсполнительныйДокумент,
	|	УдержанияДляРаспределения.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсполнительныеДокументы
	|ИЗ
	|	ВТУдержанияДляРаспределения КАК УдержанияДляРаспределения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО УдержанияДляРаспределения.ВидУдержания = Удержания.Ссылка
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|ГДЕ
	|	УдержанияДляРаспределения.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияБазовыеВидыРасчета.Ссылка КАК Ссылка,
	|	УдержанияБазовыеВидыРасчета.ВидРасчета,
	|	УдержанияБазовыеВидыРасчета.Ссылка.КатегорияУдержания КАК КатегорияУдержания
	|ИЗ
	|	ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК УдержанияБазовыеВидыРасчета
	|ГДЕ
	|	УдержанияБазовыеВидыРасчета.Ссылка.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииБЛ)";
	
	УдалитьВТ.Добавить("ВТУдержанияДляРаспределения");
	УдалитьВТ.Добавить("ВТИсполнительныеДокументы");
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	ВыборкаБазовыеВР = Результат[КоличествоРезультатов-1].Выбрать();
	ВРОплатыБЛ = Результат[КоличествоРезультатов].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	БазовыеВидыРасчета = Новый Соответствие;
	БазовыеВидыРасчетаБезБЛ = Новый Соответствие;
	Пока ВыборкаБазовыеВР.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ВРУдержание = ВыборкаБазовыеВР.Ссылка;
		
		МассивВР = Новый Массив;
		МассивВРБезБЛ = Новый Массив;
		Если ВыборкаБазовыеВР.КатегорияУдержания = Перечисления.КатегорииУдержаний.ИсполнительныйЛист Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВР, ВидыНачисленийДополненияРасчетнойБазы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВРБезБЛ, ВидыНачисленийДополненияРасчетнойБазы);
			Пока ВыборкаБазовыеВР.Следующий() Цикл
				МассивВР.Добавить(ВыборкаБазовыеВР.ВидРасчета);
				Если ВРОплатыБЛ.Найти(ВыборкаБазовыеВР.ВидРасчета) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				МассивВРБезБЛ.Добавить(ВыборкаБазовыеВР.ВидРасчета);
			КонецЦикла;
		Иначе
			Пока ВыборкаБазовыеВР.Следующий() Цикл
				МассивВР.Добавить(ВыборкаБазовыеВР.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
			
		БазовыеВидыРасчета.Вставить(ВРУдержание, МассивВР);
		БазовыеВидыРасчетаБезБЛ.Вставить(ВРУдержание, МассивВРБезБЛ);
		
	КонецЦикла;

	// Запрашиваем условия удержаний.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсполнительныеДокументы", "ИсполнительныйДокумент");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("УсловияУдержанияПоИсполнительномуДокументу", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокУдержаний.ФизическоеЛицо,
	|	СписокУдержаний.Сотрудник,
	|	СписокУдержаний.ВидУдержания КАК ВидУдержания,
	|	СписокУдержаний.Сумма,
	|	СписокУдержаний.ДокументОснование,
	|	СписокУдержаний.ИдентификаторСтроки,
	|	СписокУдержаний.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(УсловияУдержанияПоИсполнительномуДокументу.УчитыватьБольничныеЛисты, ЛОЖЬ) КАК УчитыватьБольничныеЛисты,
	|	Удержания.ОкруглятьРезультатРаспределения
	|ИЗ
	|	ВТУдержанияДляРаспределения КАК СписокУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО СписокУдержаний.ВидУдержания = Удержания.Ссылка
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО СписокУдержаний.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И СписокУдержаний.ДатаНачала = УсловияУдержанияПоИсполнительномуДокументу.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокУдержаний.ФизическоеЛицо,
	|	СписокУдержаний.Сотрудник,
	|	СписокУдержаний.ВидУдержания КАК ВидУдержания,
	|	СписокУдержаний.Сумма,
	|	СписокУдержаний.ДокументОснование,
	|	СписокУдержаний.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокУдержаний.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(УдержанияИсполнительныйЛист.ИдентификаторСтроки, 0) КАК ИдентификаторСтрокиБазыУдержаний,
	|	Удержания.ОкруглятьРезультатРаспределения
	|ИЗ
	|	ВТУдержанияДляРаспределения КАК СписокУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО СписокУдержаний.ВидУдержания = Удержания.Ссылка
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияДляРаспределения КАК УдержанияИсполнительныйЛист
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК УдержанияВторойСписок
	|			ПО УдержанияИсполнительныйЛист.ВидУдержания = УдержанияВторойСписок.Ссылка
	|				И (УдержанияВторойСписок.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|		ПО СписокУдержаний.ПлатежныйАгент = УдержанияИсполнительныйЛист.ПлатежныйАгент
	|			И СписокУдержаний.Получатель = УдержанияИсполнительныйЛист.Получатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	ТаблицаИсполнительныеЛисты = Результат[КоличествоРезультатов-1].Выгрузить();
	РезультатВознагражденияПлатежногоАгента = Результат[КоличествоРезультатов];
	
	// Исполнительные листы
	Если ТаблицаИсполнительныеЛисты.Количество()>0 Тогда
		
		Отбор = Новый Структура("УчитыватьБольничныеЛисты", Истина);
		НайденныеСтроки = ТаблицаИсполнительныеЛисты.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()>0 Тогда
			ТаблицаРаспределения = РаспределениеУдержаний.СкопироватьКолонки();
			РаспределитьУдержанияПоБазе(ТаблицаРаспределения, НайденныеСтроки, БазовыеНачисления, СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации, БазовыеВидыРасчета, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
		КонецЕсли;
		
		Отбор.УчитыватьБольничныеЛисты = Ложь;
		НайденныеСтроки = ТаблицаИсполнительныеЛисты.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()>0 Тогда
			ТаблицаРаспределения = РаспределениеУдержаний.СкопироватьКолонки();
			РаспределитьУдержанияПоБазе(ТаблицаРаспределения, НайденныеСтроки, БазовыеНачисления, СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации, БазовыеВидыРасчетаБезБЛ, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
		КонецЕсли
		
	КонецЕсли;
	
	// Вознаграждение платежного агента, распределяем по базе исполнительных листов
	Если Не РезультатВознагражденияПлатежногоАгента.Пустой() Тогда
		
		Отбор = Новый Структура("ИдентификаторСтроки");
		Выборка = РезультатВознагражденияПлатежногоАгента.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
			
			РезультатРаспределенияИЛ = РаспределениеУдержаний.СкопироватьКолонки();
			
			Пока Выборка.Следующий() Цикл
				Отбор.ИдентификаторСтроки = Выборка.ИдентификаторСтрокиБазыУдержаний;
				ТаблицаБазы = РаспределениеУдержаний.Скопировать(Отбор);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаБазы, РезультатРаспределенияИЛ);
			КонецЦикла;
			
			КоллекцияДляРаспределения = Новый Массив;
			КоллекцияДляРаспределения.Добавить(Выборка);
			
			Если РезультатРаспределенияИЛ.Количество() = 0 Тогда
				// удерживаем из всех начислений
				ТаблицаРаспределения = РаспределениеУдержаний.СкопироватьКолонки();
				РаспределитьУдержанияПоБазе(ТаблицаРаспределения, КоллекцияДляРаспределения, БазовыеНачисления, СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации, , Истина);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
			Иначе
				
				РезультатРаспределенияИЛ.Колонки.Результат.Имя = "Сумма";
				РезультатРаспределенияИЛ.Колонки.Добавить("ГоловнойСотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
				РезультатРаспределенияИЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
				РезультатРаспределенияИЛ.ЗаполнитьЗначения(Выборка.ФизическоеЛицо,"ФизическоеЛицо");
				
				ТаблицаРаспределения = РаспределениеУдержаний.СкопироватьКолонки();
				РаспределитьУдержанияПоБазе(ТаблицаРаспределения, КоллекцияДляРаспределения, РезультатРаспределенияИЛ, Новый Соответствие, Организация, ПериодРегистрации, , Истина);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// остальные удержания
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокУдержаний.ФизическоеЛицо,
	|	СписокУдержаний.Сотрудник,
	|	СписокУдержаний.ВидУдержания,
	|	СписокУдержаний.ДатаНачала,
	|	СписокУдержаний.ДатаОкончания,
	|	СписокУдержаний.Сумма,
	|	СписокУдержаний.ДокументОснование,
	|	СписокУдержаний.ИдентификаторСтроки,
	|	СписокУдержаний.Подразделение КАК Подразделение,
	|	Удержания.СтратегияОтраженияВУчете,
	|	Удержания.СтатьяФинансирования,
	|	Удержания.СтатьяРасходов
	|ПОМЕСТИТЬ ВТПрочиеУдержанияДляРаспределения
	|ИЗ
	|	ВТУдержанияДляРаспределения КАК СписокУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО СписокУдержаний.ВидУдержания = Удержания.Ссылка
	|			И (НЕ Удержания.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрочиеУдержания.ДокументОснование КАК ДокументОснование,
	|	ПрочиеУдержания.ВидУдержания КАК ВидУдержания,
	|	ПрочиеУдержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПрочиеУдержания.ДатаНачала КАК ДатаНачала,
	|	МАКСИМУМ(БухучетПлановыхУдержаний.Период) КАК Период
	|ПОМЕСТИТЬ ВТМаксимальныеПериоды
	|ИЗ
	|	ВТПрочиеУдержанияДляРаспределения КАК ПрочиеУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхУдержаний КАК БухучетПлановыхУдержаний
	|		ПО ПрочиеУдержания.ФизическоеЛицо = БухучетПлановыхУдержаний.ФизическоеЛицо
	|			И ПрочиеУдержания.ДокументОснование = БухучетПлановыхУдержаний.ДокументОснование
	|			И ПрочиеУдержания.ВидУдержания = БухучетПлановыхУдержаний.Удержание
	|			И ПрочиеУдержания.ДатаНачала >= БухучетПлановыхУдержаний.Период
	|			И (ПрочиеУдержания.СтратегияОтраженияВУчете <> ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеУдержания.ФизическоеЛицо,
	|	ПрочиеУдержания.ДокументОснование,
	|	ПрочиеУдержания.ВидУдержания,
	|	ПрочиеУдержания.ИдентификаторСтроки,
	|	ПрочиеУдержания.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериоды.ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетПлановыхУдержаний.ДействуетДо <= МаксимальныеПериоды.ДатаНачала
	|			ТОГДА БухучетПлановыхУдержаний.СтатьяФинансированияПоОкончании
	|		ИНАЧЕ БухучетПлановыхУдержаний.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетПлановыхУдержаний.ДействуетДо <= МаксимальныеПериоды.ДатаНачала
	|			ТОГДА БухучетПлановыхУдержаний.СтатьяРасходовПоОкончании
	|		ИНАЧЕ БухучетПлановыхУдержаний.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетПлановыхУдержаний.ДействуетДо <= МаксимальныеПериоды.ДатаНачала
	|			ТОГДА БухучетПлановыхУдержаний.ИспользуетсяПоОкончании
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ПОМЕСТИТЬ ВТБухучетИзДокумента
	|ИЗ
	|	ВТМаксимальныеПериоды КАК МаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхУдержаний КАК БухучетПлановыхУдержаний
	|		ПО МаксимальныеПериоды.ФизическоеЛицо = БухучетПлановыхУдержаний.ФизическоеЛицо
	|			И МаксимальныеПериоды.Период = БухучетПлановыхУдержаний.Период
	|			И МаксимальныеПериоды.ДокументОснование = БухучетПлановыхУдержаний.ДокументОснование
	|			И МаксимальныеПериоды.ВидУдержания = БухучетПлановыхУдержаний.Удержание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеУдержания.ФизическоеЛицо,
	|	ПрочиеУдержания.Сотрудник,
	|	ПрочиеУдержания.ВидУдержания КАК ВидУдержания,
	|	ПрочиеУдержания.Сумма,
	|	ПрочиеУдержания.ДокументОснование,
	|	ПрочиеУдержания.ИдентификаторСтроки,
	|	ПрочиеУдержания.Подразделение,
	|	ПрочиеУдержания.СтатьяФинансирования,
	|	ПрочиеУдержания.СтатьяРасходов
	|ИЗ
	|	ВТПрочиеУдержанияДляРаспределения КАК ПрочиеУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетИзДокумента КАК БухучетИзДокумента
	|		ПО ПрочиеУдержания.ИдентификаторСтроки = БухучетИзДокумента.ИдентификаторСтроки
	|ГДЕ
	|	ПрочиеУдержания.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета)
	|	И БухучетИзДокумента.ИдентификаторСтроки ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеУдержания.ФизическоеЛицо,
	|	ПрочиеУдержания.Сотрудник,
	|	ПрочиеУдержания.ВидУдержания КАК ВидУдержания,
	|	ПрочиеУдержания.Сумма,
	|	ПрочиеУдержания.ДокументОснование,
	|	ПрочиеУдержания.ИдентификаторСтроки,
	|	ПрочиеУдержания.Подразделение,
	|	БухучетИзДокумента.СтатьяФинансирования,
	|	БухучетИзДокумента.СтатьяРасходов
	|ИЗ
	|	ВТПрочиеУдержанияДляРаспределения КАК ПрочиеУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетИзДокумента КАК БухучетИзДокумента
	|		ПО ПрочиеУдержания.ИдентификаторСтроки = БухучетИзДокумента.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеУдержания.ФизическоеЛицо,
	|	ПрочиеУдержания.Сотрудник,
	|	ПрочиеУдержания.ВидУдержания КАК ВидУдержания,
	|	ПрочиеУдержания.Сумма,
	|	ПрочиеУдержания.ДокументОснование,
	|	ПрочиеУдержания.ИдентификаторСтроки,
	|	ПрочиеУдержания.Подразделение,
	|	ЕСТЬNULL(Удержания.ОкруглятьРезультатРаспределения, ЛОЖЬ) КАК ОкруглятьРезультатРаспределения
	|ИЗ
	|	ВТПрочиеУдержанияДляРаспределения КАК ПрочиеУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетИзДокумента КАК БухучетИзДокумента
	|		ПО ПрочиеУдержания.ИдентификаторСтроки = БухучетИзДокумента.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО ПрочиеУдержания.ВидУдержания = Удержания.Ссылка
	|ГДЕ
	|	ПрочиеУдержания.СтратегияОтраженияВУчете <> ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета)
	|	И БухучетИзДокумента.ИдентификаторСтроки ЕСТЬ NULL ";
	
	УдалитьВТ.Добавить("ВТПрочиеУдержанияДляРаспределения");  
	УдалитьВТ.Добавить("ВТБухучетИзДокумента");
	УдалитьВТ.Добавить("ВТМаксимальныеПериоды");
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	// Обработаем удержания, для которых указан бухучет в виде расчета или в документе основании
	// для таких строк необходимо выполнить распределение только по рабочим местам.

	// удержания для которых указан бухучет в документе
	ПрочиеУдержания = Результат[КоличествоРезультатов-1].Выгрузить();
	// добавим удержания для которых указан бухучет в виде расчета
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[КоличествоРезультатов-2].Выгрузить(), ПрочиеУдержания);
	Если ПрочиеУдержания.Количество()>0 Тогда
		ТаблицаРаспределения = РаспределениеУдержаний.СкопироватьКолонки();
		РаспределитьУдержанияПоБазе(ТаблицаРаспределения, ПрочиеУдержания, БазовыеНачисления, Новый Соответствие, Организация, ПериодРегистрации, Неопределено, Ложь, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
	КонецЕсли;
	
	// Обработаем удержания со стратегией по базе или по фактическим начислениям
	ПрочиеУдержания = Результат[КоличествоРезультатов].Выгрузить();
	Если ПрочиеУдержания.Количество()>0 Тогда
		ТаблицаРаспределения = РаспределениеУдержаний.СкопироватьКолонки();
		РаспределитьУдержанияПоБазе(ТаблицаРаспределения, ПрочиеУдержания, БазовыеНачисления, СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации, БазовыеВидыРасчета, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределения, РаспределениеУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Функция БазаДляРаспределенияНДФЛ(МенеджерВременныхТаблиц, МассивФизическихЛиц, ПериодРегистрации,
								Организация, ОкончательныйРасчет, ИсключаемыеРегистраторы, ИмяВТРаспределениеНачисленийДляБазыНДФЛ) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УчетНДФЛ.СоздатьВТСведенияОДоходахДляРаспределенияНДФЛ(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, ИсключаемыеРегистраторы, МассивФизическихЛиц, ОкончательныйРасчет);
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТСведенияОДоходахДляРаспределенияНДФЛ");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			Модуль.УдалитьСуммыЗаСчетГрантовВТаблицеБухучетНачислений(Запрос.МенеджерВременныхТаблиц, ИмяВТРаспределениеНачисленийДляБазыНДФЛ);
		КонецЕсли;
	КонецЕсли;  
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Территория КАК Территория,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Начисления.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНачисленияБазаНДФЛ
	|ИЗ
	|	ВТРаспределениеНачисленийДляБазыНДФЛ КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Территория,
	|	Начисления.Подразделение,
	|	Начисления.Начисление,
	|	Начисления.ДатаНачала,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.СтатьяФинансирования,
	|	Начисления.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Территория КАК Территория,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	СУММА(Начисления.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНачисленияСвод
	|ИЗ
	|	ВТРаспределениеНачисленийДляБазыНДФЛ КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Подразделение,
	|	Начисления.Территория,
	|	Начисления.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазаНДФЛ.Сотрудник КАК Сотрудник,
	|	БазаНДФЛ.Подразделение КАК Подразделение,
	|	БазаНДФЛ.Территория КАК Территория,
	|	БазаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БазаНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БазаНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(БазаНДФЛ.Сумма) КАК Сумма,
	|	БазаНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	БазаНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	БазаНДФЛ.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		База.Сотрудник КАК Сотрудник,
	|		База.Подразделение КАК Подразделение,
	|		База.Территория КАК Территория,
	|		База.ФизическоеЛицо КАК ФизическоеЛицо,
	|		База.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|		База.КатегорияДохода КАК КатегорияДохода,
	|		Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|		Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА НачисленияСвод.Сумма = 0
	|				ТОГДА 0
	|			ИНАЧЕ База.Сумма * (ВЫРАЗИТЬ(Начисления.Сумма / НачисленияСвод.Сумма КАК ЧИСЛО(25, 10)))
	|		КОНЕЦ КАК Сумма,
	|		База.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода
	|	ИЗ
	|		ВТСведенияОДоходахДляРаспределенияНДФЛ КАК База
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияБазаНДФЛ КАК Начисления
	|			ПО База.Сотрудник = Начисления.Сотрудник
	|				И База.Начисление = Начисления.Начисление
	|				И База.Подразделение = Начисления.Подразделение
	|				И База.Территория = Начисления.Территория
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСвод КАК НачисленияСвод
	|			ПО База.Сотрудник = НачисленияСвод.Сотрудник
	|				И База.Начисление = НачисленияСвод.Начисление
	|				И База.Подразделение = НачисленияСвод.Подразделение
	|				И База.Территория = НачисленияСвод.Территория) КАК БазаНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	БазаНДФЛ.ФизическоеЛицо,
	|	БазаНДФЛ.Сотрудник,
	|	БазаНДФЛ.Подразделение,
	|	БазаНДФЛ.Территория,
	|	БазаНДФЛ.СтатьяФинансирования,
	|	БазаНДФЛ.СтатьяРасходов,
	|	БазаНДФЛ.ДатаПолученияДохода,
	|	БазаНДФЛ.КатегорияДохода,
	|	БазаНДФЛ.ДоходМежрасчетногоПериода
	|
	|ИМЕЮЩИЕ
	|	СУММА(БазаНДФЛ.Сумма) <> 0";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРаспределениеНачисленийДляБазыНДФЛ", ИмяВТРаспределениеНачисленийДляБазыНДФЛ);
	
	УдалитьВТ.Добавить("ВТНачисленияСвод");
	УдалитьВТ.Добавить("ВТНачисленияБазаНДФЛ");
	БазаРасчетаНДФЛ = Запрос.Выполнить().Выгрузить();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат БазаРасчетаНДФЛ;

КонецФункции

Процедура РаспределитьНДФЛПоБазе(РезультатыРаспределения, ТаблицаДляРаспределения, База, БазаВсеНачисления,
				СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации, ОтборТолькоПоФизлицу = Ложь) Экспорт
	
	Если ТаблицаДляРаспределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиБезБазы = Новый Массив;
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого СтрокаНДФЛ Из ТаблицаДляРаспределения Цикл
		
		// При обработке "старых" данных, у которых не заполнено поле СтрокаНДФЛ.ДатаПолученияДохода
		// оставляем прежнее поведение, не учитываем ранее удержанные суммы и из базы исключаем строки с признаком ДоходМежрасчетногоПериода.
		
		УчитыватьДатуПолученияДохода = ЗначениеЗаполнено(СтрокаНДФЛ.ДатаПолученияДохода) И СтрокаНДФЛ.ДатаПолученияДохода >= УчетНДФЛ.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев();
		УчитыватьКатегориюДохода     = УчитыватьДатуПолученияДохода И ЗначениеЗаполнено(СтрокаНДФЛ.КатегорияДохода) И СтрокаНДФЛ.ДатаПолученияДохода >= '20170101';
		УчитыватьУжеРаспределенные   = (СтрокаНДФЛ.Сумма <> 0) И УчитыватьДатуПолученияДохода;
		
		Отбор.ФизическоеЛицо = СтрокаНДФЛ.ФизическоеЛицо;
		СтрокиРаспределения = Новый Массив;
		
		Если ОтборТолькоПоФизлицу Тогда
			
			// распределение корректировок выплаты
			СтрокиРаспределения = База.НайтиСтроки(Отбор);
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = БазаВсеНачисления.НайтиСтроки(Отбор);
			КонецЕсли;
			
		Иначе // распределение строк НДФЛ
			
			СтрокиБазыПоФизлицу = База.НайтиСтроки(Отбор);
			
			Если Не УчитыватьДатуПолученияДохода Тогда
				
				СтрокиРаспределенияБезТерритории = Новый Массив;
				Для каждого СтрокаТЗ Из СтрокиБазыПоФизлицу Цикл
					Если Не СтрокаТЗ.ДоходМежрасчетногоПериода Тогда 
						Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория Тогда
							СтрокиРаспределения.Добавить(СтрокаТЗ);
						КонецЕсли;
						СтрокиРаспределенияБезТерритории.Добавить(СтрокаТЗ);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокиРаспределения.Количество() = 0 Тогда
					СтрокиРаспределения = СтрокиРаспределенияБезТерритории;	
				КонецЕсли;
				
			ИначеЕсли Не УчитыватьКатегориюДохода Тогда
				
				СтрокиРаспределенияБезДаты = Новый Массив;
				Для каждого СтрокаТЗ Из СтрокиБазыПоФизлицу Цикл
					Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода Тогда
						СтрокиРаспределения.Добавить(СтрокаТЗ);	
					ИначеЕсли СтрокаТЗ.Территория = СтрокаНДФЛ.Территория Тогда
						СтрокиРаспределенияБезДаты.Добавить(СтрокаТЗ);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокиРаспределения.Количество() = 0 Тогда
					СтрокиРаспределения = СтрокиРаспределенияБезДаты;
					Если СтрокиРаспределения.Количество() = 0 Тогда
						СтрокиРаспределения = СтрокиБазыПоФизлицу;
					КонецЕсли;
				КонецЕсли;
				
			Иначе // учитываем дату получения дохода и категорию дохода
				
				СтрокиРаспределенияБезДатыИКатегорий = Новый Массив;
				СтрокиРаспределенияБезКатегорий = Новый Массив;
				Для каждого СтрокаТЗ Из СтрокиБазыПоФизлицу Цикл
					Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода  И СтрокаТЗ.КатегорияДохода = СтрокаНДФЛ.КатегорияДохода Тогда
						СтрокиРаспределения.Добавить(СтрокаТЗ);
					ИначеЕсли СтрокаТЗ.Территория = СтрокаНДФЛ.Территория И СтрокаТЗ.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода Тогда
						СтрокиРаспределенияБезКатегорий.Добавить(СтрокаТЗ);	
					ИначеЕсли СтрокаТЗ.Территория = СтрокаНДФЛ.Территория Тогда
						СтрокиРаспределенияБезДатыИКатегорий.Добавить(СтрокаТЗ);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокиРаспределения.Количество() = 0 Тогда
					СтрокиРаспределения = СтрокиРаспределенияБезКатегорий;
					Если СтрокиРаспределения.Количество() = 0 Тогда
						СтрокиРаспределения = СтрокиРаспределенияБезДатыИКатегорий;
						Если СтрокиРаспределения.Количество() = 0 Тогда
							СтрокиРаспределения = СтрокиБазыПоФизлицу;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокиРаспределения.Количество() = 0 Тогда
				// не нашли строки распределения по базе
				СтрокиБазыПоФизлицу = БазаВсеНачисления.НайтиСтроки(Отбор);
				Для каждого СтрокаТЗ Из СтрокиБазыПоФизлицу Цикл
					Если СтрокаТЗ.Территория = СтрокаНДФЛ.Территория Тогда
						СтрокиРаспределения.Добавить(СтрокаТЗ);
					КонецЕсли;
				КонецЦикла;
				Если СтрокиРаспределения.Количество() = 0 Тогда
					СтрокиРаспределения = СтрокиБазыПоФизлицу;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокиБезБазы.Добавить(СтрокаНДФЛ);
			Продолжить;
		КонецЕсли;
		
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[СтрокаНДФЛ.ФизическоеЛицо];
		Если УчитыватьУжеРаспределенные И СтрокиУжеУдержаноПоФизическомуЛицу <> Неопределено Тогда
			Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				Если СтрокаУжеУдержаноПоФизическомуЛицу.ВидУдержания = СтрокаНДФЛ.ВидУдержания 
 						И СтрокаУжеУдержаноПоФизическомуЛицу.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода
						И СтрокаУжеУдержаноПоФизическомуЛицу.Территория = СтрокаНДФЛ.Территория
						И (Не УчитыватьКатегориюДохода Или СтрокаУжеУдержаноПоФизическомуЛицу.КатегорияДохода = СтрокаНДФЛ.КатегорияДохода) Тогда
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаНДФЛ.Сумма + РанееУдержано, Коэффициенты, 0);
		
		Если РаспределенныеСуммы <> Неопределено Тогда
			
			// минусуем уже удержанные суммы
			Если УчитыватьУжеРаспределенные И СтрокиУжеУдержаноПоФизическомуЛицу <> Неопределено Тогда
				
				Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
					Если СтрокаУжеУдержаноПоФизическомуЛицу.ВидУдержания = СтрокаНДФЛ.ВидУдержания 
						И СтрокаУжеУдержаноПоФизическомуЛицу.ДатаПолученияДохода = СтрокаНДФЛ.ДатаПолученияДохода
						И СтрокаУжеУдержаноПоФизическомуЛицу.Территория = СтрокаНДФЛ.Территория
						И (Не УчитыватьКатегориюДохода Или СтрокаУжеУдержаноПоФизическомуЛицу.КатегорияДохода = СтрокаНДФЛ.КатегорияДохода) Тогда
						
						НоваяСтрока = РезультатыРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
						
						НоваяСтрока.Результат 			= - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
						НоваяСтрока.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// плюсуем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = РезультатыРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				
				НоваяСтрока.ВидУдержания        = СтрокаНДФЛ.ВидУдержания;
				НоваяСтрока.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки;
				НоваяСтрока.Результат           = РаспределенныеСуммы[Индекс];
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = РезультатыРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			
			НоваяСтрока.ВидУдержания        = СтрокаНДФЛ.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки;
			НоваяСтрока.Результат           = СтрокаНДФЛ.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СвернутьРезультатыРаспределения(РезультатыРаспределения);
	
	Если СтрокиБезБазы.Количество() > 0 Тогда
		РаспределитьУдержанияПоБазеПоУмолчанию(РезультатыРаспределения, СтрокиБезБазы, Организация, ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Процедура СвернутьРезультатыРаспределения(РезультатыРаспределения) 

	Колонки = "";
	Для Каждого Колонка Из РезультатыРаспределения.Колонки Цикл
		Если Колонка.Имя = "Результат" Тогда
			Продолжить;
		КонецЕсли;
		Колонки = Колонки + "," + Колонка.Имя;
	КонецЦикла;
	Колонки = Сред(Колонки, 2);
	РезультатыРаспределения.Свернуть(Колонки, "Результат");
	НайденныеСтроки = РезультатыРаспределения.НайтиСтроки(Новый Структура("Результат",0));
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		РезультатыРаспределения.Удалить(СтрокаТЗ);
	КонецЦикла;	

КонецПроцедуры

// Распределение Удержаний или НДФЛ по базе по умолчанию
// Параметры 
//		РезультатыРаспределения
//		СтрокиБезБазы - массив, строки ТЗ, для которых выполняется распределение
//		Организация
//		ПериодРегистрации
//		РаспределениеУдержаний - Булево, признак того, что распределяем Удержания, иначе НДФЛ
//		РаспределятьТолькоПоРабочимМестам - Булево, если Истина, тогда в строках СтрокиБезБазы уже есть поля СтатьяФинансирования и СтатьяРасходов.
//
Процедура РаспределитьУдержанияПоБазеПоУмолчанию(РезультатыРаспределения, СтрокиБезБазы, Организация, ПериодРегистрации,
													РаспределениеУдержаний = Ложь, РаспределятьТолькоПоРабочимМестам = Ложь)

	// Массив физических лиц, данные которых еще не распределились.
	МассивФизическихЛиц = Новый Массив;
	Для Каждого СтрокаБезБазы Из СтрокиБезБазы Цикл
		МассивФизическихЛиц.Добавить(СтрокаБезБазы.ФизическоеЛицо);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивФизическихЛиц);
	
	// Таблица значений с полями
	// ФизическоеЛицо, Сотрудник, ГоловнойСотрудник, Подразделение, ТерриторияВыполненияРаботВОрганизации.
	БазаПоУмолчанию = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(МассивФизическихЛиц, ПериодРегистрации, Организация);
	
	Если РаспределятьТолькоПоРабочимМестам Тогда
		БазаУдержанийПоУмолчанию = БазаПоУмолчанию;
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Период", КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("БазаПоУмолчанию", БазаПоУмолчанию);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	БазаПоУмолчанию.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БазаПоУмолчанию.Сотрудник КАК Сотрудник,
		|	БазаПоУмолчанию.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	БазаПоУмолчанию.Подразделение КАК Подразделение,
		|	БазаПоУмолчанию.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	1000 КАК Сумма
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&БазаПоУмолчанию КАК БазаПоУмолчанию";
		Запрос.Выполнить();
		
		ОтражениеЗарплатыВБухучете.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Сумма,
		|	СведенияОБухучетеЗарплатыСотрудников.СтатьяФинансирования,
		|	СведенияОБухучетеЗарплатыСотрудников.СтатьяРасходов
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК СведенияОБухучетеЗарплатыСотрудников
		|		ПО Сотрудники.Сотрудник = СведенияОБухучетеЗарплатыСотрудников.Сотрудник";
		
		БазаУдержанийПоУмолчанию = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	БазаУдержанийПоУмолчанию.Индексы.Добавить("ФизическоеЛицо");
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо");
	Для Каждого Строка Из СтрокиБезБазы Цикл
		
		ОтборСтрок.ФизическоеЛицо = Строка.ФизическоеЛицо;
		СтрокиРаспределения = БазаУдержанийПоУмолчанию.НайтиСтроки(ОтборСтрок);
		
		Если РаспределениеУдержаний Тогда
			
			СтрокиРаспределенияСУчетомОсновногоСотрудника  = Новый Массив;
			СтрокиРаспределенияБезУчетаОсновногоСотрудника = Новый Массив;
			Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиРаспределения Цикл
				СтрокиРаспределенияБезУчетаОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
				Если ЗначениеЗаполнено(Строка.Сотрудник) 
					И Строка.Сотрудник = СтрокаБазыПоФизическомуЛицу.ГоловнойСотрудник Тогда
					СтрокиРаспределенияСУчетомОсновногоСотрудника.Добавить(СтрокаБазыПоФизическомуЛицу);
				КонецЕсли;
			КонецЦикла;
			
			СтрокиРаспределения = СтрокиРаспределенияСУчетомОсновногоСотрудника;
			Если СтрокиРаспределения.Количество() = 0 Тогда
				СтрокиРаспределения = СтрокиРаспределенияБезУчетаОсновногоСотрудника;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = РезультатыРаспределения.Добавить();
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			Если РаспределятьТолькоПоРабочимМестам Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "СтатьяФинансирования,СтатьяРасходов");
			КонецЕсли;
			НоваяСтрока.ВидУдержания        = Строка.ВидУдержания;
			НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
		КонецЕсли;
		НоваяСтрока.Результат           = Строка.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыОсобыхНачисленийЕдиновременныеПособия() Экспорт

	Пособия = Новый Массив;
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка);
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности);
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику);
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение);
	
	Возврат Пособия;

КонецФункции

Функция НоваяТаблицаРаспределениеРезультатовУдержаний() Экспорт
	
	// В методе ОтражениеЗарплатыВБухучетеРасширенный.УпорядоченнаяТаблицаРаспределениеРезультатовУдержаний выполняется
	// сортировка строк результатов распределения, при изменении состава колонок или имен необходимо
	// внести изменения в ОтражениеЗарплатыВБухучетеРасширенный.УпорядоченнаяТаблицаРаспределениеРезультатовУдержаний.
	
	МассивТиповВидУдержания = Новый Массив;
	МассивТиповВидУдержания.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповВидУдержания.Добавить(Тип("ПланВидовРасчетаСсылка.Удержания"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов(МассивТиповВидУдержания));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("КодСтатьиФинансирования", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(3)));

	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаРезультатРасчетаНДФЛ() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Территория", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	Таблица.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	
	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаКорректировкиВыплаты() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	// колонка для совместимости
	Таблица.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаРезультатРасчетаУдержаний() Экспорт
	
	МассивТиповВидУдержания = Новый Массив;
	МассивТиповВидУдержания.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповВидУдержания.Добавить(Тип("ПланВидовРасчетаСсылка.Удержания"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Сотрудник",  			Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));  
	Таблица.Колонки.Добавить("ВидУдержания", 		Новый ОписаниеТипов(МассивТиповВидУдержания));
	Таблица.Колонки.Добавить("ДокументОснование", 	Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип));
	Таблица.Колонки.Добавить("ПлатежныйАгент", 		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("Получатель", 			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("ДатаНачала", 			Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Таблица.Колонки.Добавить("ДатаОкончания", 		Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Таблица.Колонки.Добавить("Сумма", 				Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	
	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаРезультатПогашениеЗаймов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	// колонки для совместимости, для займов будут с пустыми значениями 
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип));

	
	Возврат Таблица;

КонецФункции

Функция ОписаниеИсходныхДанныхДляРаспределенияУдержаний() Экспорт

	ИсходныеДанные = Новый Структура("
	|БазовыеНачисления,
	|СтрокиУжеУдержаноПоФизическимЛицам,
	|ТаблицаУдержаний,
	|МенеджерВременныхТаблиц,
	|Организация,
	|ПериодРегистрации,
	|ВидыНачисленийДополненияРасчетнойБазы");
	
	Возврат ИсходныеДанные;

КонецФункции 

#КонецОбласти
