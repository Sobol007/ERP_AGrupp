
#Область ПрограммныйИнтерфейс


#Область ИнициализацияПараметров

// Добавляет необходимые параметры работы клиента при запуске.
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ЗапускатьРабочийСтолМенеджера", ПолучитьНастройкиОткрытия().БлокироватьИнтерфейс);			
КонецПроцедуры

// Возвращает список доступных форм.
// 
// Возвращаемое значение:
//  СписокЗначений - Список доступных форм.
//
Функция ПолучитьСписокДоступныхФорм() Экспорт
	
	ЭтоCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	ЭтоУНФ = (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM"));
	
	СписокФорм = Новый СписокЗначений;
	
	СписокФорм.Добавить("Обработка.CRM_АРМ_МоиПродажи.Форма.Форма", НСтр("ru = 'Мои продажи'"));
	СписокФорм.Добавить("Обработка.CRM_АРМ_МоиДела.Форма.Форма", НСтр("ru = 'Мои дела'"));
	СписокФорм.Добавить("Документ.CRM_Интерес.Форма.ФормаСписка", НСтр("ru = 'Интересы'"));
	СписокФорм.Добавить("Отчет.CRM_ВоронкаПродаж.Форма.Форма", НСтр("ru = 'Воронка продаж'"));
	СписокФорм.Добавить("Справочник.Номенклатура.Форма.ФормаСписка", НСтр("ru = 'Номенклатура'"));
	СписокФорм.Добавить("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаМоиЗадачи", НСтр("ru = 'Мои задачи'"));
	СписокФорм.Добавить("Обработка.CRM_КалендарьМенеджера.Форма.Форма", НСтр("ru = 'Календарь'"));
	СписокФорм.Добавить("Обработка.CRM_МенеджерПочты.Форма.Форма", НСтр("ru = 'Почта'"));
	СписокФорм.Добавить("Документ.CRM_Заявка.Форма.ФормаСписка", НСтр("ru = 'Заявки'"));
	СписокФорм.Добавить("Обработка.CRM_Мессенджер.Форма.ФормаМессенджера", НСтр("ru = 'Диалоги'"));
	СписокФорм.Добавить("ОбщаяФорма.CRM_АРМБазыЗнаний", НСтр("ru = 'Управление базой знаний'"));	
	// +CRM_Сквозная аналитика
	СписокФорм.Добавить("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.Форма", "Сквозная аналитика");
	// -CRM_Сквозная аналитика
	СписокФорм.Добавить("Обработка.CRM_УправлениеКлассификацей.Форма.ФормаНоменклатура", НСтр("ru = 'Классификация номенклатуры'"));
	СписокФорм.Добавить("Обработка.CRM_УправлениеКлассификацей.Форма.ФормаКлиентскаяБаза", НСтр("ru = 'Классификация клиентов'"));
	СписокФорм.Добавить("Документ.CRM_Телемаркетинг.Форма.ФормаСписка", НСтр("ru = 'Телемаркетинг'"));
	СписокФорм.Добавить("Документ.CRM_РассылкаЭлектронныхПисем.Форма.ФормаСписка", НСтр("ru = 'Рассылки писем'"));
	СписокФорм.Добавить("Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаСписка", НСтр("ru = 'Маркетинговые мероприятия'"));
	СписокФорм.Добавить("ОбщаяФорма.CRM_ПанельОтчетов", НСтр("ru = 'Отчеты'"));
	
	Если НЕ CRM_ЛицензированиеСервер.ВариантПоставкиСТАРТ() Тогда
		СписокФорм.Добавить("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСписка", НСтр("ru = 'Бизнес-процессы'"));
		СписокФорм.Добавить("Отчет.CRM_МониторЦелевыхПоказателей.Форма.ФормаМониторЦелевыхПоказателей", НСтр("ru = 'Монитор показателей'"));
		СписокФорм.Добавить("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаСписка", НСтр("ru = 'Все задачи'"));
		СписокФорм.Добавить("Обработка.CRM_ПланированиеПроектов.Форма.ФормаПланирования", НСтр("ru = 'Планирование проектов'"));
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы", "CRM_Модуль_ФормаСписка") Тогда
		СписокФорм.Добавить("Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаСписка", НСтр("ru = 'Коммерческие предложения'"));
	Иначе
		СписокФорм.Добавить("Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаСписка", НСтр("ru = 'Коммерческие предложения'"));
	КонецЕсли;
	
	СписокФорм.Добавить("Справочник.Проекты.Форма.CRM_ФормаСписка", НСтр("ru = 'Проекты'"));
	СписокФорм.Добавить("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаСписка", НСтр("ru = 'Задачи проектов'"));
	
	СписокФорм.Добавить("Обработка.CRM_НастройкаРазделовРешения.Форма.Форма", НСтр("ru = 'Настройки'"));
	
	Если ЭтоCRM Тогда
		СписокФорм.Добавить("Справочник.Партнеры.Форма.CRM_ФормаСписка", НСтр("ru = 'Клиенты'"));
		СписокФорм.Добавить("Документ.CRM_СчетНаОплатуПокупателю.Форма.ФормаСписка", НСтр("ru = 'Счета'"));
		СписокФорм.Добавить("Документ.СообщениеSMS.Форма.SMS4B_ФормаСписка", НСтр("ru = 'SMS'"));
	ИначеЕсли ЭтоУНФ Тогда
		
	Иначе // это ERP/КА2/УТиВсК
		// Справочники
		СписокФорм.Добавить("Справочник.Партнеры.Форма.CRM_Модуль_ФормаСписка", НСтр("ru = 'Клиенты'"));
		СписокФорм.Добавить("Справочник.ПретензииКлиентов.Форма.ФормаСписка", НСтр("ru = 'Претензии клиентов'"));
		СписокФорм.Добавить("Справочник.СделкиСКлиентами.Форма.ФормаСписка", НСтр("ru = 'Сделки с клиентами'"));
		
		// Документы
		СписокФорм.Добавить("Документ.АвансовыйОтчет.Форма.ФормаСписка", НСтр("ru = 'Авансовые отчеты'"));
		СписокФорм.Добавить("Документ.АктВыполненныхРабот.Форма.ФормаСписка", НСтр("ru = 'Акты выполненных работ'"));
		СписокФорм.Добавить("Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаСписка", НСтр("ru = 'Внутреннее потребление товаров'"));
		СписокФорм.Добавить("Документ.ВозвратТоваровОтКлиента.Форма.ФормаСписка", НСтр("ru = 'Возврат товаров от клиентов'"));
		СписокФорм.Добавить("Документ.ВозвратТоваровПоставщику.Форма.ФормаСписка", НСтр("ru = 'Возврат товаров поставщику'"));
		СписокФорм.Добавить("Документ.ДоверенностьВыданная.Форма.ФормаСписка", НСтр("ru = 'Доверенности'"));
		СписокФорм.Добавить("Документ.ЗаданиеТорговомуПредставителю.Форма.ФормаСписка", НСтр("ru = 'Задания торговым представителям'"));
		СписокФорм.Добавить("Документ.ЗаказНаПеремещение.Форма.ФормаСписка", НСтр("ru = 'Заказы на перемещение '"));
		СписокФорм.Добавить("Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов", НСтр("ru = 'Заказы клиентов'"));
		СписокФорм.Добавить("Документ.ЗаказНаСборку.Форма.ФормаСписка", НСтр("ru = 'Заказы на сборку'"));
		СписокФорм.Добавить("Документ.ЗаказПоставщику.Форма.ФормаСпискаДокументов", НСтр("ru = 'Заказы поставщикам'"));
		СписокФорм.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСписка", НСтр("ru = 'Заявки на возврат'"));
		СписокФорм.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаСписка", НСтр("ru = 'Заявки на расход ДС'"));
		СписокФорм.Добавить("Документ.ОтчетКомиссионера.Форма.ФормаСписка", НСтр("ru = 'Отчеты комиссионеров'"));
		СписокФорм.Добавить("Документ.ОтчетКомитенту.Форма.ФормаСписка", НСтр("ru = 'Отчеты комитентам'"));
		СписокФорм.Добавить("Документ.ОтчетОРозничныхПродажах.Форма.ФормаСписка", НСтр("ru = 'Отчеты о розничных продажах'"));
		СписокФорм.Добавить("Документ.ПеремещениеТоваров.Форма.ФормаСписка", НСтр("ru = 'Перемещения товаров'"));
		СписокФорм.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств.Форма.ФормаСписка", НСтр("ru = 'Поступления безнал. ДС'"));
		СписокФорм.Добавить("Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаСписка", НСтр("ru = 'Списания безнал. ДС'"));
		СписокФорм.Добавить("Документ.ПриобретениеТоваровУслуг.Форма.ФормаСписка", НСтр("ru = 'Приобретение товаров'"));
		СписокФорм.Добавить("Документ.ПриходныйКассовыйОрдер.Форма.ФормаСписка", НСтр("ru = 'Приходные кассовые ордера'"));
		СписокФорм.Добавить("Документ.РасходныйКассовыйОрдер.Форма.ФормаСписка", НСтр("ru = 'Расходные кассовые ордера'"));
		СписокФорм.Добавить("Документ.ПриходныйОрдерНаТовары.Форма.ФормаСписка", НСтр("ru = 'Приходные ордера на товары'"));
		СписокФорм.Добавить("Документ.РасходныйОрдерНаТовары.Форма.ФормаСписка", НСтр("ru = 'Расходные ордера на товары'"));
		СписокФорм.Добавить("Документ.РеализацияТоваровУслуг.Форма.ФормаСписка", НСтр("ru = 'Реализации товаров'"));
		СписокФорм.Добавить("Документ.СборкаТоваров.Форма.ФормаСписка", НСтр("ru = 'Сборка товаров'"));
		СписокФорм.Добавить("Документ.СчетНаОплатуКлиенту.Форма.ФормаСписка", НСтр("ru = 'Счета на оплату'"));
		СписокФорм.Добавить("Документ.СчетФактураВыданный.Форма.ФормаСписка", НСтр("ru = 'Счета-фактуры выданные'"));
		// СписокФорм.Добавить("Документ.ТранспортнаяНакладная.Форма.ФормаСписка", "Транспортные накладные"); // пока нет обоих обработчиков
		
		// Журналы
		СписокФорм.Добавить("ЖурналДокументов.АвансовыеОтчеты.Форма.ФормаСписка", НСтр("ru = 'Авансовые отчеты'"));
		
		// Обработки
		СписокФорм.Добавить("Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка", "Безналичные платежи");
		СписокФорм.Добавить("Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаСписка", НСтр("ru = 'Внутренние документы'"));
		СписокФорм.Добавить("Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов", НСтр("ru = 'Документы закупки'"));
		СписокФорм.Добавить("Обработка.ЖурналДокументовИнтеркампани.Форма.ФормаСписка", НСтр("ru = 'Документы между организациями'"));
		СписокФорм.Добавить("Обработка.ЖурналДокументовНДС.Форма.СписокДокументов", НСтр("ru = 'Журнал документов НДС'"));
		СписокФорм.Добавить("Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов", НСтр("ru = 'Документы продажи'"));
		// СписокФорм.Добавить("Обработка.ЖурналСкладскихАктов.Форма.ФормаСписка", "Журнал складских актов"); // пока нет второго обработчика в форме
		СписокФорм.Добавить("Обработка.ПрайсЛист.Форма.Форма", НСтр("ru = 'Цены (прайс-лист)'"));
		СписокФорм.Добавить("Обработка.ПрайсЛистПоставщика.Форма.Форма", НСтр("ru = 'Цены поставщиков'"));
		// СписокФорм.Добавить("Обработка.КлиентБанк.Форма.ЗагрузкаВыписки", "Обмен с банками"); // пока нет второго обработчика в форме
		СписокФорм.Добавить("Документ.ЧекККМ.Форма.ФормаДокументаРМК", НСтр("ru = 'Рабочее место кассира'"));
		
	КонецЕсли;
	
	// +СофтФон
	СписокФорм.Добавить("Обработка.сфпАРМ_Телефония.Форма.Форма", НСтр("ru = 'Телефония'"));
	// -СофтФон
	
	CRM_РабочийСтолСерверПереопределяемый.ПолучитьСписокДоступныхФорм(СписокФорм);
	
	ПроверитьДоступностьФорм(СписокФорм);
	
	Возврат СписокФорм;
	
КонецФункции

Процедура ПроверитьДоступностьФорм(СписокФорм)
	
	СписокДляУдаления = Новый СписокЗначений;
	
	Для Каждого ЭлементФорма Из СписокФорм Цикл
		Если НЕ ФормаДоступнаПоФункциональнымОпциям(ЭлементФорма.Значение) Тогда
			СписокДляУдаления.Добавить(ЭлементФорма.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементФорма Из СписокДляУдаления Цикл
		ЭлементДляУдаления = СписокФорм.НайтиПоЗначению(ЭлементФорма.Значение);
		СписокФорм.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

Функция ФормаДоступнаПоФункциональнымОпциям(ИмяФормы) Экспорт
	
	НаименованиеФормыОбъекта = ИмяФормы;
	Позиция = СтрНайти(НаименованиеФормыОбъекта, ".Форма.");
	НаименованиеОбъекта = "";
	Если Позиция = 0 Тогда // пробуем проверить как общую форму
		Если СтрНайти(НаименованиеФормыОбъекта, "ОбщаяФорма.") Тогда
			НаименованиеОбъекта = НаименованиеФормыОбъекта;
		КонецЕсли;
	Иначе
		НаименованиеОбъекта = Лев(НаименованиеФормыОбъекта, Позиция-1);
	КонецЕсли;
	Возврат НЕ ЗначениеЗаполнено(НаименованиеОбъекта) ИЛИ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(НаименованиеОбъекта);
	
КонецФункции

// Возвращает список форм по умолчанию.
// 
// Возвращаемое значение:
//  СписокЗначений - Список форм по умолчанию.
//
Функция ПолучитьСписокФормПоУмолчанию() Экспорт
	
	ЭтоCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	СписокФорм = Новый СписокЗначений;
	
	СписокФорм.Добавить("Обработка.CRM_АРМ_МоиПродажи.Форма.Форма", "Мои продажи");
	СписокФорм.Добавить("Обработка.CRM_АРМ_МоиДела.Форма.Форма", "Мои дела");
	
	Если ЭтоCRM Тогда
		СписокФорм.Добавить("Справочник.Партнеры.Форма.CRM_ФормаСписка", "Клиенты");
	Иначе
		// временно отключено!
		//СписокФорм.Добавить("Справочник.Партнеры.Форма.CRM_Модуль_ФормаСписка", "Клиенты");
	КонецЕсли;
	
	СписокФорм.Добавить("Обработка.CRM_КалендарьМенеджера.Форма.Форма", "Календарь");
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		//СписокФорм.Добавить("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаМоиЗадачи", "Мои задачи");
		СписокФорм.Добавить("Обработка.CRM_МенеджерПочты.Форма.Форма", "Почта");
	КонецЕсли;
	
	СписокФорм.Добавить("ОбщаяФорма.CRM_ПанельОтчетов", "Отчеты");
	
	Если ОбщегоНазначения.РазделениеВключено() ИЛИ CRM_ЛицензированиеСервер.ВариантПоставкиСТАРТ() Тогда
		СписокФорм.Добавить("Обработка.CRM_НастройкаРазделовРешения.Форма.Форма", "Настройки");
	КонецЕсли;
	
	CRM_РабочийСтолСерверПереопределяемый.ПолучитьСписокФормПоУмолчанию(СписокФорм);
	
	Возврат СписокФорм;
	
КонецФункции

// Возвращает настройки открытия.
// 
// Возвращаемое значение:
//  Структура - Настройки открытия.
//
Функция ПолучитьНастройкиОткрытия() Экспорт
	СтруктураНастроек = Новый Структура("ОкрыватьРабочийСтол,БлокироватьИнтерфейс,ИзменятьСоставРабочегоСтола,ИзменятьРежимЗапуска", Ложь, Ложь,Истина,Истина);
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Подразделение = ТекущийПользователь.Подразделение;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_НастройкиОткрытияРабочегоСтола.ОкрыватьРабочийСтол КАК ОкрыватьРабочийСтол,
		|	CRM_НастройкиОткрытияРабочегоСтола.БлокироватьИнтерфейс КАК БлокироватьИнтерфейс,
		|	CRM_НастройкиОткрытияРабочегоСтола.ИзменятьСоставРабочегоСтола КАК ИзменятьСоставРабочегоСтола,
		|	CRM_НастройкиОткрытияРабочегоСтола.ИзменятьРежимЗапуска КАК ИзменятьРежимЗапуска
		|ИЗ
		|	РегистрСведений.CRM_НастройкиОткрытияРабочегоСтола КАК CRM_НастройкиОткрытияРабочегоСтола
		|ГДЕ
		|	CRM_НастройкиОткрытияРабочегоСтола.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", ТекущийПользователь);
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Если ТаблицаНастроек.Количество() > 0 Тогда
			СтруктураНастроек.Вставить("ОкрыватьРабочийСтол", ТаблицаНастроек[0].ОкрыватьРабочийСтол);
			СтруктураНастроек.Вставить("БлокироватьИнтерфейс", ТаблицаНастроек[0].БлокироватьИнтерфейс);
			СтруктураНастроек.Вставить("ИзменятьСоставРабочегоСтола", ТаблицаНастроек[0].ИзменятьСоставРабочегоСтола);
			СтруктураНастроек.Вставить("ИзменятьРежимЗапуска", ТаблицаНастроек[0].ИзменятьРежимЗапуска);
		Иначе
			Запрос.УстановитьПараметр("Объект", Подразделение);
			ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
			Если ТаблицаНастроек.Количество() > 0 Тогда
				СтруктураНастроек.Вставить("ОкрыватьРабочийСтол", ТаблицаНастроек[0].ОкрыватьРабочийСтол);
				СтруктураНастроек.Вставить("БлокироватьИнтерфейс", ТаблицаНастроек[0].БлокироватьИнтерфейс);
				СтруктураНастроек.Вставить("ИзменятьСоставРабочегоСтола", ТаблицаНастроек[0].ИзменятьСоставРабочегоСтола);
				СтруктураНастроек.Вставить("ИзменятьРежимЗапуска", ТаблицаНастроек[0].ИзменятьРежимЗапуска);
			Иначе
				Запрос.УстановитьПараметр("Объект", "Общие настройки");
				ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
				Если ТаблицаНастроек.Количество() > 0 Тогда
					СтруктураНастроек.Вставить("ОкрыватьРабочийСтол", ТаблицаНастроек[0].ОкрыватьРабочийСтол);
					СтруктураНастроек.Вставить("БлокироватьИнтерфейс", ТаблицаНастроек[0].БлокироватьИнтерфейс);
					СтруктураНастроек.Вставить("ИзменятьСоставРабочегоСтола", ТаблицаНастроек[0].ИзменятьСоставРабочегоСтола);
					СтруктураНастроек.Вставить("ИзменятьРежимЗапуска", ТаблицаНастроек[0].ИзменятьРежимЗапуска);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураНастроек;
КонецФункции

// Возвращает структуру интерфейса рабочего стола.
// 
// Возвращаемое значение:
//  Структура - Структура интерфейса рабочего стола.
//
Функция СтруктураИнтерфейсаРабочегоСтола() Экспорт

	СтруктураИнтерфейса = Новый Структура;
	
	СтруктураИнтерфейса.Вставить("ФонТумблеров"					    , ЦветаСтиля.CRM_ФонТумблеров);
	СтруктураИнтерфейса.Вставить("ЦветШрифтаТумблеров"				, ЦветаСтиля.CRM_ЦветШрифтаТумблеров);
	СтруктураИнтерфейса.Вставить("ДанныеЛоготипа"					, Константы.CRM_ЛоготипРабочегоСтола.Получить().Получить());
	СтруктураИнтерфейса.Вставить("ДвоичныеДанныеЛоготипаПоУмолчанию", БиблиотекаКартинок.CRM_ЛоготипРабочийСтол);
	
	Возврат СтруктураИнтерфейса;
	
КонецФункции // СтруктураИнтерфейсаРабочегоСтола()

#КонецОбласти

#Область Инициализация

// Функция помещает массив структур в таблицу значений.
//
// Параметры:
//  мСтруктур	 - Массив - Массив структур. 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений.
//
Функция МассивСтруктурВТаблицуЗначений(мСтруктур)Экспорт 
	Если НЕ (ТипЗнч(мСтруктур) = Тип("Массив")) ИЛИ (мСтруктур.Количество() = 0) ИЛИ (мСтруктур[0].Количество() = 0) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;		
	ТЗ = Новый ТаблицаЗначений;
	СтруктураПолей = "";
	СтруктураКолонок = мСтруктур[0];
	Для Каждого Поле Из СтруктураКолонок Цикл
		СтруктураПолей = СтруктураПолей + "," + Поле.Ключ;
	КонецЦикла;
	СтруктураКолонок = Новый Структура(СтруктураПолей);
	Для Каждого Поле Из СтруктураКолонок Цикл
		ТЗ.Колонки.Добавить(Поле.Ключ);
	КонецЦикла;
	Для Каждого Строка Из мСтруктур Цикл
		СтрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Строка);
	КонецЦикла;
	Возврат ТЗ;
КонецФункции

// Возвращает таблицу скрытых настроек рабочего стола.
// 
// Возвращаемое значение:
//  Массив - Массив с таблицей структур.
//
Функция ПолучитьТаблицуСкрытыхНастроекРабочегоСтола() Экспорт
	
	
	ТекущийПользователь	 = Пользователи.ТекущийПользователь();
	ТекущееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиОткрытияРабочегоСтола.Объект КАК Объект,
	|	CRM_НастройкиОткрытияРабочегоСтола.ИндивидуальныеНастройки КАК ИндивидуальныеНастройки
	|ИЗ
	|	РегистрСведений.CRM_НастройкиОткрытияРабочегоСтола КАК CRM_НастройкиОткрытияРабочегоСтола
	|ГДЕ
	|	CRM_НастройкиОткрытияРабочегоСтола.ИндивидуальныеНастройки";
	ТабНастроек = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиРабочегоСтола.ИмяФормы КАК ИмяФормы,
	|	НастройкиРабочегоСтола.Синоним КАК Синоним,
	|	НастройкиРабочегоСтола.Наименование КАК Наименование,
	|	НастройкиРабочегоСтола.Параметры КАК Параметры,
	|	НастройкиРабочегоСтола.Объект КАК Объект,
	|	НастройкиРабочегоСтола.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.Пользователи)
	|			ТОГДА 0
	|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.СтруктураПредприятия)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокНастроек,
	|	НастройкиРабочегоСтола.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.CRM_НастройкиРабочегоСтола КАК НастройкиРабочегоСтола
	|ГДЕ
	|	НастройкиРабочегоСтола.Объект = &ОбъектНастроек
	|	И НастройкиРабочегоСтола.Скрытая
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокНастроек,
	|	Порядок";
	
	НастройкаПользователя = ТабНастроек.Найти(ТекущийПользователь, "Объект");
	НастройкаПодразделения = ТабНастроек.Найти(ТекущееПодразделение, "Объект");
	
	МассивСтруктур = Новый Массив;
	
	Если НастройкаПользователя <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОбъектНастроек", ТекущийПользователь);
		
		
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	ИначеЕсли НастройкаПодразделения <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОбъектНастроек", ТекущееПодразделение);
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	Иначе
		Запрос.УстановитьПараметр("ОбъектНастроек", "Общие настройки");
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	КонецЕсли;
КонецФункции

// Сформировать настройки рабочего стола формы.
//
// Параметры:
//  Форма					 - УправляемаяФорма - Передаваемая форма.
//  ИмяОписания				 - Строка - Название таблицы значений.
//  ЭлементыРабочегоСтола	 - ТаблицаЗначений - элементы таблицы значений.
//
Процедура СформироватьНастройкиРабочегоСтолаФормы(Форма, ИмяОписания, ЭлементыРабочегоСтола) Экспорт

	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяКоманды"     , Новый ОписаниеТипов("Строка") , ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Порядок"        , Новый ОписаниеТипов("Число" ,,, Новый КвалификаторыЧисла(10))  , ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПорядокНастроек", Новый ОписаниеТипов("Число" ,,, Новый КвалификаторыЧисла(10))  , ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяФормы"       , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Наименование"	  , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор"  , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)) , ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Синоним"        , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Параметры"      , Новый ОписаниеТипов("Строка") , ИмяОписания));
	
	// Напоминания
	ИмяОписания_Напоминания = ИмяОписания + "ТаблицаНапоминаний";
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания_Напоминания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Важность"      	   , Новый ОписаниеТипов("Число") 									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СрокИсполнения"	   , Новый ОписаниеТипов("Строка")									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Счетчик"		 	   , Новый ОписаниеТипов("Строка")									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Содержание"	 	   , Новый ОписаниеТипов("Строка")									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДатаНачала"	 	   , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)			, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Пользователь"	       , Новый ОписаниеТипов("СправочникСсылка.Пользователи")			, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Предмет"	 	 	   , ОбщегоНазначения.ОписаниеТипаВсеСсылки()						, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДатаОповещения"	   , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)			, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Картинка"      	   , Новый ОписаниеТипов("Число") 									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПредметПредставление", Новый ОписаниеТипов("Строка")									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Партнер"      	   , Новый ОписаниеТипов("СправочникСсылка.Партнеры") 				, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактноеЛицо"      , Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров"), ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидОповещения"       , Новый ОписаниеТипов("Число") 									, ИмяОписания_Напоминания));	
	
	// Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	Форма[ИмяОписания].Загрузить(ЭлементыРабочегоСтола);
		
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма, из обработчика события которой происходит вызов процедуры.
//	Отказ - Булево - признак отказа.
//
Процедура ПриСозданииНаСервере(Форма, Отказ) Экспорт
	Если CRM_ЛицензированиеСервер.РабочийСтолCRMИспользуется() Тогда	
		CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().РабочийСтолПриСозданииНаСервере(Форма, Отказ);
		
		// +СофтФон
		// Индикатор активного телефонного звонка
		ИмяОписания = "сфпИндикаторАктивногоЗвонка";
		
		Команда = Форма.Команды.Найти(ИмяОписания);
		Если Команда = Неопределено Тогда
			Команда = Форма.Команды.Добавить(ИмяОписания);
			Команда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			Команда.Заголовок = НСтр("ru = 'Панель звонка'");
			Команда.Подсказка = НСтр("ru = 'Открыть панель звонка'");
		КонецЕсли;
		
		Попытка
			Элемент = Форма.Элементы.Вставить(ИмяОписания, Тип("КнопкаФормы"), Форма.Элементы.скОбластьДействий, Форма.Элементы.CRM_ОткрытьЗаметки);
			Элемент.Отображение = ОтображениеКнопки.Картинка;
			Элемент.Заголовок = НСтр("ru='Панель звонка'");
			Элемент.Картинка = БиблиотекаКартинок.сфпИндикаторАктивногоЗвонка;
			Элемент.ИмяКоманды = ИмяОписания;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Элемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			Элемент.Видимость = Ложь;
			Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
		Исключение КонецПопытки;	
		// -СофтФон
	КонецЕсли;	
	
КонецПроцедуры

// Определяет разделы глобального командного интерфейса, в которых предусмотрены панели отчетов.
// В Разделы необходимо добавить метаданные тех подсистем первого уровня,
// в которых размещены команды вызова панелей отчетов.
//
// Параметры:
//   Разделы - СписокЗначений - разделы, в которые выведены команды открытия панели отчетов.
//       * Значение - ОбъектМетаданных: Подсистема, Строка - подсистема раздела глобального командного интерфейса,
//           либо ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы для начальной страницы.
//       * Представление - Строка - заголовок панели отчетов в этом разделе.
//
// Пример:
//	Разделы.Добавить(Метаданные.Подсистемы.Анкетирование, НСтр("ru='Отчеты по анкетированию';en='Reports on questioning'"));
//	Разделы.Добавить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы(), НСтр("ru='Основные отчеты';en='Basic reports'"));
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	Разделы.Добавить(Метаданные.Подсистемы["скОтчетыРабочегоСтола"]);
КонецПроцедуры

#Область Заметки

Функция ЗаметкиПользователя(Знач ТекущийПользователь = Неопределено) Экспорт

	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	КонецЕсли;	
	
	МассивЗаметок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникЗаметки.Ссылка,
		|	СправочникЗаметки.ПометкаУдаления,
		|	СправочникЗаметки.Предопределенный,
		|	СправочникЗаметки.Наименование,
		|	СправочникЗаметки.Автор,
		|	СправочникЗаметки.Содержание,
		|	СправочникЗаметки.ТекстСодержания,
		|	СправочникЗаметки.ДляРабочегоСтола,
		|	СправочникЗаметки.Пометка,
		|	СправочникЗаметки.ПредставлениеПредмета,
		|	СправочникЗаметки.ДатаИзменения
		|ИЗ
		|	Справочник.Заметки КАК СправочникЗаметки
		|ГДЕ
		|	НЕ СправочникЗаметки.ПометкаУдаления
		|	И СправочникЗаметки.Автор = &Пользователь
		|	И СправочникЗаметки.ДляРабочегоСтола = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		СтруктураЭлемента = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			СтруктураЭлемента.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
		СтруктураЭлемента.Вставить("ИдентификаторСсылки", XMLСтрока(Выборка.Ссылка));
		
		// ЦветСтиля = вогОбщегоНазначения.КомментарийЗначенияПеречисления(Выборка.Пометка);
		СтруктураЭлемента.Вставить("ЦветСтиля", "yellow");
		
		МассивЗаметок.Добавить(СтруктураЭлемента);
		
	КонецЦикла;
	
	Возврат МассивЗаметок;
	
КонецФункции // ЗаметкиПользователя()

Функция СкрытьЭлементЗаметки(Идентификатор) Экспорт
		
	Объект = СсылкаЭлемента(Идентификатор, "Справочник.Заметки").ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Объект.Заблокировать();
	Объект.ДляРабочегоСтола = Ложь;
	
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // СкрытьЭлементЗаметки()

#КонецОбласти

Функция СсылкаЭлемента(ИдентификаторЭлемента, ИмяМенеджераОбъекта) Экспорт

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераОбъекта);	
	Возврат МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторЭлемента, "_", "-")));
	
КонецФункции // СсылкаЭлемента()

Функция ПолучитьBase64ДанныеКартинки(Картинка) Экспорт
	ДвоичныеДанныеКартинки = Картинка.ПолучитьДвоичныеДанные();
	Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	СтруктураДанныхКартинки = Новый Структура("Base64ДанныеКартинки, Формат", Base64ДанныеКартинки, Картинка.Формат());
	Возврат СтруктураДанныхКартинки;
КонецФункции


#Область Напоминания

Функция ПолучитьИмяОбъектаМетаданныхДляОткрытияФормы(СсылкаНаОбъект) Экспорт
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ПолноеИмя();
КонецФункции

Функция ПолучитьИмяОсновнойФормыОбъектаМетаданных(СсылкаНаОбъект) Экспорт
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ОсновнаяФормаОбъекта.Имя;
КонецФункции	

Функция ЭтоЛичнаяЗадача(ЗадачаСсылка) Экспорт
	Возврат ЗадачаСсылка.CRM_Личная;	
КонецФункции

Функция ЭтоНезависимыйПроцесс(ЗадачаСсылка) Экспорт
	
	Возврат (ЗадачаСсылка.БизнесПроцесс.КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс);
	
КонецФункции

Функция ПрекратитьНапоминание(ВыделеннаяСтрока) Экспорт 
	РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, ВыделеннаяСтрока);
	РегистрСведенийМенеджерЗаписи.Прочитать();
	СтруктураНапоминания = Новый Структура();
	СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
	Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
		
		Если	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам 
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности = (ТекущаяДата()-1);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		ИначеЕсли РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
			
			СтруктураДлительности = Новый Структура();
			СтруктураДлительности.Вставить("Дней"	,0);
			СтруктураДлительности.Вставить("Часов"	,0);
			СтруктураДлительности.Вставить("Минут"	,0);
			СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
			СтруктураДлительности.Вставить("ВидОповещения"		,РегистрСведенийМенеджерЗаписи.ВидОповещения);
			
			Если РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
				
				СтруктураДлительности.Минут = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
				
				СтруктураДлительности.Часов = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
				
				СтруктураДлительности.Дней = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
				
				СтруктураДлительности.Дней = РегистрСведенийМенеджерЗаписи.СрокОповещения*7;
				
			КонецЕсли;
			
			ДатаНачала = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(РегистрСведенийМенеджерЗаписи.ДатаНачала,12)),СтруктураДлительности,,Неопределено);
			
			РегистрСведенийМенеджерЗаписи.ДатаНачала		= ДатаНачала;
			РегистрСведенийМенеджерЗаписи.ДатаОповещения	= ДатаНачала;
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности	= ДатаНачала + (60*60*24*7);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		ИначеЕсли ТипЗнч(РегистрСведенийМенеджерЗаписи.Предмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности = (ТекущаяДата()-60*60*24);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		Иначе
			РегистрСведенийМенеджерЗаписи.Удалить();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
		МассивКлючейНапоминаний = CRM_НапоминанияСервер.ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя(ВыделеннаяСтрока.Предмет, ВыделеннаяСтрока.Пользователь);
		
		Для каждого КлючНапоминанияУчетнойЗаписи Из МассивКлючейНапоминаний Цикл
			
			РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, КлючНапоминанияУчетнойЗаписи);
			РегистрСведенийМенеджерЗаписи.Прочитать();
			СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
			Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
			
				Если РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
				
					РегистрСведенийМенеджерЗаписи.Удалить();
				
				КонецЕсли; 
			
			КонецЕсли;	
			
		КонецЦикла; 
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", Истина);
		
	КонецЕсли;
	Возврат СтруктураНапоминания;
КонецФункции

Функция ПеренестиНапоминание(ВыделеннаяСтрока, ЗначениеОтложенногоВремени, ПараметрСмещение) Экспорт

	НоваяДатаНапоминания = ТекущаяДата();
	РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, ВыделеннаяСтрока);
	РегистрСведенийМенеджерЗаписи.Прочитать();
	СтруктураНапоминания = Новый Структура();
	СтруктураНапоминания.Вставить("Выбран",			РегистрСведенийМенеджерЗаписи.Выбран());
	Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
		
		РегистрСведенийМенеджерЗаписи.ДатаОповещения = НоваяДатаНапоминания + ЗначениеОтложенногоВремени + ПараметрСмещение;
		РегистрСведенийМенеджерЗаписи.Счетчик = РегистрСведенийМенеджерЗаписи.Счетчик + 1;
		РегистрСведенийМенеджерЗаписи.Записать(Истина);
		
	ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
		МассивКлючейНапоминаний = CRM_НапоминанияСервер.ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя(ВыделеннаяСтрока.Предмет, ВыделеннаяСтрока.Пользователь);
		
		Для каждого КлючНапоминанияУчетнойЗаписи Из МассивКлючейНапоминаний Цикл
			
			РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, КлючНапоминанияУчетнойЗаписи);
			РегистрСведенийМенеджерЗаписи.Прочитать();
			СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
			Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
			
				Если РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
							
					РегистрСведенийМенеджерЗаписи.ДатаОповещения = НоваяДатаНапоминания + ЗначениеОтложенногоВремени + ПараметрСмещение;
					РегистрСведенийМенеджерЗаписи.Счетчик = РегистрСведенийМенеджерЗаписи.Счетчик + 1;
					РегистрСведенийМенеджерЗаписи.Записать(Истина);
							
				КонецЕсли; 
			
			КонецЕсли;	
			
		КонецЦикла; 
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", Истина);
		
	КонецЕсли;
	Возврат СтруктураНапоминания;

КонецФункции // ПеренестиНапоминание()

#КонецОбласти
























































































































































Функция ПолучитьТаблицуНастроекРабочегоСтола(ПолучатьСкрытые = Ложь) Экспорт
	
	
	ТекущийПользователь	 = Пользователи.ТекущийПользователь();
	ТекущееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиОткрытияРабочегоСтола.Объект КАК Объект,
	|	CRM_НастройкиОткрытияРабочегоСтола.ИндивидуальныеНастройки КАК ИндивидуальныеНастройки
	|ИЗ
	|	РегистрСведений.CRM_НастройкиОткрытияРабочегоСтола КАК CRM_НастройкиОткрытияРабочегоСтола
	|ГДЕ
	|	CRM_НастройкиОткрытияРабочегоСтола.ИндивидуальныеНастройки";
	ТабНастроек = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиРабочегоСтола.ИмяФормы КАК ИмяФормы,
	|	НастройкиРабочегоСтола.Синоним КАК Синоним,
	|	НастройкиРабочегоСтола.Наименование КАК Наименование,
	|	НастройкиРабочегоСтола.Параметры КАК Параметры,
	|	НастройкиРабочегоСтола.Объект КАК Объект,
	|	НастройкиРабочегоСтола.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.Пользователи)
	|			ТОГДА 0
	|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.СтруктураПредприятия)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокНастроек,
	|	НастройкиРабочегоСтола.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.CRM_НастройкиРабочегоСтола КАК НастройкиРабочегоСтола
	|ГДЕ
	|	НастройкиРабочегоСтола.Объект = &ОбъектНастроек
	|	И НЕ НастройкиРабочегоСтола.Скрытая
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокНастроек,
	|	Порядок";
	
	НастройкаПользователя = ТабНастроек.Найти(ТекущийПользователь, "Объект");
	НастройкаПодразделения = ТабНастроек.Найти(ТекущееПодразделение, "Объект");
	
	Если ПолучатьСкрытые Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ НастройкиРабочегоСтола.Скрытая", "");
	КонецЕсли;
	МассивСтруктур = Новый Массив;
	
	Если НастройкаПользователя <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОбъектНастроек", ТекущийПользователь);
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	ИначеЕсли НастройкаПодразделения <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОбъектНастроек", ТекущееПодразделение);
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	Иначе
		Запрос.УстановитьПараметр("ОбъектНастроек", "Общие настройки");
		
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);
	КонецЕсли;
КонецФункции

Процедура ИнициализироватьРабочийСтолСервер(Форма, Отказ) Экспорт
	
	ЭлементыРабочегоСтола = ПолучитьТаблицуНастроекРабочегоСтола();
	Если ЭлементыРабочегоСтола.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Состав рабочего стола не определен. '"));
	    Возврат;
		
	КонецЕсли;
	ЭлементыРабочегоСтола.Сортировать("ПорядокНастроек Убыв, Порядок Убыв");
	
	// ИмяОписания = "CRM_НастройкиРабочегоСтола";
	
	// СформироватьНастройкиРабочегоСтолаФормы(Форма, ИмяОписания, ЭлементыРабочегоСтола);
	// Форма.ИмяОписания = ИмяОписания;
	
КонецПроцедуры

Функция ТаблицаВМассивСтруктур(Знач ТаблицаЗначений) Экспорт
	Результат = Новый Массив;
	
	ИменаКолонок = "";
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонок = Сред(ИменаКолонок, 2);
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		Результат.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти