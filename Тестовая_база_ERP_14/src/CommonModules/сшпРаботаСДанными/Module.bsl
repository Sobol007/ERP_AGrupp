
#Область ПрограммныйИнтерфейс

// Функция - Установить параметры адаптера
//
// Параметры:
//  Параметры - Структура - Структура параметров.
//
Функция УстановитьПараметрыАдаптера(Параметры) Экспорт
	
	ЗначенияКонстантИзменены = Ложь;
	
	Для Каждого текПараметр Из Параметры Цикл
		
		Если текПараметр.Ключ = "AdapterType" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпТипИспользуемогоКоннектораESB", Перечисления.сшпТипыКоннекторовESB[текПараметр.Значение]);
		
		ИначеЕсли текПараметр.Ключ = "Uri" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпАдресАдаптераESB", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "ConfigurationName" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпИмяСервисаESB", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "EndpointName" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпИмяТочкиПодключенияESB", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "MessageFormat" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпФорматСообщений", Перечисления.сшпФорматыСообщений[текПараметр.Значение]);
		
		ИначеЕсли текПараметр.Ключ = "ServerMode" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпРежимПередачиСообщений", Перечисления.сшпРежимыПередачиСообщений[текПараметр.Значение]);
		
		ИначеЕсли текПараметр.Ключ = "MaxBatchSize" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпРазмерПакета", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "AutoStartProcessing" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпАвтоматическийСтартОбработчиков", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "WaitingTime" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпДлительностьОжидания", текПараметр.Значение);
			
		ИначеЕсли текПараметр.Ключ = "MaxFlowIn" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "MaxFlowOut" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "ShutDown" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпОтключитьПотокиОбработкиДанных", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "SerializationFormat" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпФорматДляСериализации", Перечисления.сшпФорматыСообщений[текПараметр.Значение]);
		
		ИначеЕсли текПараметр.Ключ = "LiveTime" Тогда
			
			ТекущаяТаблица = сшпРаботаСКонстантами.ПолучитьДлительностьХранения();
			ИмяКонстанты = "сшпДлительностьХраненияСообщенийПоОчередямИСостояниям";
			ТаблицаДлительностиОжидания = сшпРаботаСКонстантами.СформироватьЗначениеКонстантыДлительностьХранения();
			
			КоличествоСтрокВТаблице = СтрЧислоСтрок(текПараметр.Значение)-1;
			КоличествоСтрокВТекущейТаблице = ТекущаяТаблица.Количество();
			
			Если КоличествоСтрокВТаблице = 0 Тогда 
				
				Если Не КоличествоСтрокВТекущейТаблице = 0 Тогда 
					
					Константы[ИмяКонстанты].Установить(Новый ХранилищеЗначения(ТаблицаДлительностиОжидания));
					ЗначенияКонстантИзменены = Истина;
				
				КонецЕсли;
				
				Продолжить;
			
			КонецЕсли;
			
			ПроверятьНаличиеИзменений = КоличествоСтрокВТаблице = КоличествоСтрокВТекущейТаблице;
			СтрокаТекущейТаблицы = Неопределено;
			СтруктураКолонок = Новый Структура;
			ИзмененияНайдены = Не ПроверятьНаличиеИзменений;
			
			Для Счетчик = 1 По КоличествоСтрокВТаблице+1 Цикл
				
				ТекСтрока = СтрПолучитьСтроку(текПараметр.Значение, Счетчик);
				МассивПараметров = СтрРазделить(ТекСтрока, ";");
				
				Если Счетчик = 1 Тогда 
					
					Для Каждого ИмяКолонки Из ТаблицаДлительностиОжидания.Колонки Цикл 
						
						ИндексКолонки = МассивПараметров.Найти(ИмяКолонки.Имя);
						
						Если ИндексКолонки = Неопределено Тогда 
							
							ЗаписьЖурналаРегистрации("Datareon. Обработка системного сообщения", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.сшпРаботаСДанными,, "Сообщение CSA содержит не корректную структуру параметра LiveTime: в параметре не определено поле " + ИмяКолонки.Имя);
							Счетчик = СтрЧислоСтрок(текПараметр.Значение);
						
						Иначе
							
							СтруктураКолонок.Вставить(ИмяКолонки.Имя, ИндексКолонки);
						
						КонецЕсли;
					
					КонецЦикла;
				
				Иначе
					
					НоваяСтрокаТЗ = ТаблицаДлительностиОжидания.Добавить();
					
					Если ПроверятьНаличиеИзменений Тогда 
						
						СтрокаТекущейТаблицы = ТекущаяТаблица[Счетчик-2];
					
					КонецЕсли;
					
					Для Каждого ЭлементСтруктуры Из СтруктураКолонок Цикл 
						
						Если ЭлементСтруктуры.Ключ = "ТипОчереди" Тогда
							
							НоваяСтрокаТЗ[ЭлементСтруктуры.Ключ] = Перечисления.сшпТипыОчередей[МассивПараметров[ЭлементСтруктуры.Значение]];
						
						ИначеЕсли ЭлементСтруктуры.Ключ = "СтатусСообщения" Тогда 
							
							НоваяСтрокаТЗ[ЭлементСтруктуры.Ключ] = Перечисления.сшпСтатусыСообщений[МассивПараметров[ЭлементСтруктуры.Значение]];
						
						Иначе
							
							НоваяСтрокаТЗ[ЭлементСтруктуры.Ключ] = МассивПараметров[ЭлементСтруктуры.Значение];
						
						КонецЕсли;
						
						Если ПроверятьНаличиеИзменений И СтрокаТекущейТаблицы[ЭлементСтруктуры.Ключ] <> НоваяСтрокаТЗ[ЭлементСтруктуры.Ключ] Тогда 
							
							ИзмененияНайдены = Истина;
						
						КонецЕсли;
					
					КонецЦикла;
				
				КонецЕсли;
			
			КонецЦикла;
			
			ЗначениеКонстанты = Новый ХранилищеЗначения(ТаблицаДлительностиОжидания);
			Если ИзмененияНайдены Тогда
				
				Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
				РезультатУстановки = Истина;
			
			Иначе
				
				РезультатУстановки = Ложь;
			
			КонецЕсли; 
		
		ИначеЕсли текПараметр.Ключ = "LiveTimeDefault" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпДлительностьХраненияСообщений", текПараметр.Значение);
		
		Иначе
			
			РезультатУстановки = Ложь;
		
		КонецЕсли;	
		
		ЗначенияКонстантИзменены = ЗначенияКонстантИзменены Или РезультатУстановки;
	
	КонецЦикла;
	
	РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпИспользоватьСШП", Истина);
	ЗначенияКонстантИзменены = ЗначенияКонстантИзменены Или РезультатУстановки;
	
	Если ЗначенияКонстантИзменены Тогда 
		
		сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
	
	КонецЕсли;

	Возврат ЗначенияКонстантИзменены;
	
КонецФункции

// Процедура - Установить состояние сообщения
//
// Параметры:
//  Идентификатор	 - УникальныйИдентификатор - индентификатор сообщения.
//  НовоеСостояние	 - Перечисление.сшпСтатусыСообщений - новое состояние сообщения. 
//	Задержка		 - Число - Секунд задержки
//	ОписаниеОшибки	 - Строка - Описание ошибки
//	ИндексПотока	 - Число - индекс потока
//
Процедура УстановитьСостояниеСообщения(Идентификатор, НовоеСостояние, Задержка = 0, ОписаниеОшибки = "", ИндексПотока = 0) Экспорт
	
	ИдентификаторСообщения = ?(ТипЗнч(Идентификатор) = Тип("Строка"), Новый УникальныйИдентификатор(Идентификатор), Идентификатор);
			
	Набор = сшпКэшируемыеФункции.ПолучитьОбъектНабораЗаписейСостоянияСообщений();
	
	Набор.Очистить();
	
	Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения, Истина);
		
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ДатаИзменения = ТекущаяДатаСеанса();
	ТекЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	ТекЗапись.СтатусСообщения = НовоеСостояние;
	ТекЗапись.Задержка = Задержка;
	ТекЗапись.ЗадержкаЧисло = сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекЗапись.ДатаИзменения, ТекЗапись.Задержка);
	ТекЗапись.ОписаниеОшибки = ОписаниеОшибки;
	ТекЗапись.ИндексПотока = ИндексПотока;
	
	Набор.Записать(Истина);	
	
КонецПроцедуры

// Процедура - Удалить сообщение
//
// Параметры:
//  ТипОчереди - Перечисление.сшпТипыОчередей - тип очереди, указывает очередь из которой необходимо удалить сообщение. 
//  Идентификатор - УникальныйИдентификатор - индентификатор сообщения.
//
Процедура УдалитьСообщение(ТипОчереди, Идентификатор) Экспорт
	
	Если ТипОчереди = Перечисления.сшпТипыОчередей.Системная Тогда
		
		ТекЗапись = РегистрыСведений.сшпОчередьСистемныхСообщений.СоздатьМенеджерЗаписи();
		
	ИначеЕсли ТипОчереди = Перечисления.сшпТипыОчередей.Входящая Тогда
		
		ТекЗапись = РегистрыСведений.сшпОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
		
	ИначеЕсли ТипОчереди = Перечисления.сшпТипыОчередей.Исходящая Тогда
		
		ТекЗапись = РегистрыСведений.сшпОчередьИсходящихСообщений.СоздатьМенеджерЗаписи();
		
	ИначеЕсли ТипОчереди = Перечисления.сшпТипыОчередей.Отправки Тогда
		
		ТекЗапись = РегистрыСведений.сшпОчередьОтправляемыхСообщений.СоздатьМенеджерЗаписи();
		
	ИначеЕсли ТипОчереди = Перечисления.сшпТипыОчередей.ОтправкиСистемныхСообщений Тогда
		
		ТекЗапись = РегистрыСведений.сшпОчередьОтправляемыхСистемныхСообщений.СоздатьМенеджерЗаписи();
		
	КонецЕсли;
	
	ТекЗапись.ИдентификаторСообщения = Идентификатор;
	ТекЗапись.Удалить();
	
	текЗапись = РегистрыСведений.сшпСостояниеСообщений.СоздатьМенеджерЗаписи();
	
	текЗапись.ИдентификаторСообщения = Идентификатор;
	текЗапись.Удалить();
	
КонецПроцедуры	

// Процедура - Поместить в очередь исходящих
//
// Параметры:
//  ТипОбъекта - Строка - Имя объекта по которому произошло событие
//  ОбъектСобщения - Строка, ДвоичныеДанные - сериализованное представление объекта на момент события
//  Формат - Перечисление.сшпФорматыСообщений - формат в котором выполняется сериализация сообщения 
//  Метод - Перечисление.сшпМетодХранения - метод сохранения объекта события
//	ПомещатьВХранилищеЗначения - Булево - помещение в хранилище значений
//	ЭтоУдаление - Булево - удаление  
//	СсылкаНаОбъект - ЛюбаяСсылка - Ссылка на объект помещаемый в очередь
//
Процедура ПоместитьВОчередьИсходящих(ТипОбъекта, ОбъектСобщения, Формат = Неопределено, Метод = Неопределено, ПомещатьВХранилищеЗначения = Истина, ЭтоУдаление = Ложь, СсылкаНаОбъект = Неопределено) Экспорт
	
	ИдентификаторСообщения = Новый УникальныйИдентификатор();
	УстановитьСостояниеСообщения(ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.Новое);
	
	Набор = РегистрыСведений.сшпОчередьИсходящихСообщений.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения, Истина);
	Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	
	Если ПомещатьВХранилищеЗначения Тогда
		 
		ТекЗапись.Хранилище = Новый ХранилищеЗначения(ОбъектСобщения);
		
	Иначе
		
		ТекЗапись.Хранилище = ОбъектСобщения;
		
	КонецЕсли;
	
	ТекЗапись.МетодХранения = ?(Метод = Неопределено, Перечисления.сшпМетодХранения.Сериализация, Метод);
	ТекЗапись.ДатаРегистрации = ТекущаяДатаСеанса();
	ТекЗапись.ОбъектСобытия = ТипОбъекта;
	ТекЗапись.ФорматСообщения = ?(Формат = Неопределено, сшпФункциональныеОпции.ФорматСериализации(), Формат);
	ТекЗапись.ЭтоУдаление = ЭтоУдаление;
	ТекЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
	
	Если ЭтоУдаление Тогда
		 
		Набор.ДополнительныеСвойства.Вставить("ЭтоУдаление");
		
	КонецЕсли;
	
 	Набор.Записать(Истина);
	
КонецПроцедуры

// Процедура - Поместить в очередь входящих
//
// Параметры:
//  Формат		- Перечисление.сшпФорматыСообщений - формат поступившего сообщения. 
//  xdtoПакет	- ОбъектXDTO - объект типа message1C. 
//
Процедура ПоместитьВОчередьВходящих(формат, xdtoПакет) Экспорт
	
	ИдентификаторСообщения = ?(ТипЗнч(xdtoПакет.Id) = Тип("Строка"), Новый УникальныйИдентификатор(xdtoПакет.Id), xdtoПакет.Id);
	УстановитьСостояниеСообщения(ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.Новое);
	
	Набор = РегистрыСведений.сшпОчередьВходящихСообщений.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения, Истина);
	Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	ТекЗапись.ДатаРегистрации = ТекущаяДатаСеанса();
	ТекЗапись.ФорматСообщения = Формат;
	ТекЗапись.КлассСообщения = xdtoПакет.ClassId;
	ТекЗапись.ДатаСоздания = МестноеВремя(xdtoПакет.CreationTime, ЧасовойПояс());
	
	xmlПакет = сшпОбщегоНазначения.ЗаписатьОбъектВПоток(Формат, xdtoПакет);
	текЗапись.Хранилище = Новый ХранилищеЗначения(xmlПакет);
	
	Набор.Записать(Истина);
	
КонецПроцедуры

// Процедура - Поместить в системную очередь
//
// Параметры:
//  Идентификатор	 - Строка - индентификатор сообщения. 
//  Формат			 - Перечисление.сшпФорматыСообщений - формат поступившего сообщения. 
//  Класс			 - Строка - Идентификатор класса поступившего сообщения. 
//  ОбъектСообщения	 - Строка, ДвоичныеДанные - Тело сообщения в указанном формате.
//
Процедура ПоместитьВСистемнуюОчередь(Идентификатор, Формат = Неопределено, Класс, ОбъектСообщения = Неопределено) Экспорт
	
	ИдентификаторСообщения = ?(ЗначениеЗаполнено(Идентификатор), Новый УникальныйИдентификатор(Идентификатор),  Новый УникальныйИдентификатор);
	УстановитьСостояниеСообщения(ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.Новое);
	
	Набор = РегистрыСведений.сшпОчередьСистемныхСообщений.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения, Истина);
	Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	ТекЗапись.Хранилище = Новый ХранилищеЗначения(?(ОбъектСообщения = Неопределено, "Значение не установлено", ОбъектСообщения));
	ТекЗапись.ДатаРегистрации = ТекущаяДатаСеанса();
	ТекЗапись.ФорматСообщения = ?(Формат = Неопределено, сшпФункциональныеОпции.ФорматСообщения(), Формат);
	ТекЗапись.КлассСообщения = Класс;
	
	Набор.Записать(Истина);
	
	Если Не Класс = "SSM" Тогда
		
		Попытка
			
			ФоновыеЗадания.Выполнить("сшпОбслуживаниеОчередей.ОбработкаОчередиСистемныхСообщений",, "ОбработкаОчередиСистемныхСообщений", "ОбработкаОчередиСистемныхСообщений");
		
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - Обработать запись очереди
//
// Параметры:
//  Ключ		 - КлючЗаписиРегистраСведений - Ключ записи для которой выполняется изменение статуса 
//  НовыйСтатус	 - Строка - Название нового статуса сообщения.
//
Процедура ОбработатьЗаписьОчереди(Ключ, НовыйСтатус) Экспорт
	
	УстановитьСостояниеСообщения(Ключ.ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений[НовыйСтатус]);

КонецПроцедуры	

// Процедура - Установить статус обработчика
//
// Параметры:
//  Идентификатор	- УникальныйИдентификатор - индентификатор обработчика.
//  Статус	 		- Перечисление.сшпСтатусыОбработчиков - новый статус обработчика. 
//
Процедура УстановитьСтатусОбработчика(Идентификатор, Статус) Экспорт
	
	ИдентификаторОбработчика = ?(ТипЗнч(Идентификатор) = Тип("Строка"), Новый УникальныйИдентификатор(Идентификатор), Идентификатор);
	
	Набор = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторОбработчика.Установить(ИдентификаторОбработчика, Истина);
	Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ДатаИзменения = ТекущаяДатаСеанса();
	ТекЗапись.ИдентификаторОбработчика = ИдентификаторОбработчика;
	ТекЗапись.Статус = Статус;
	
	Набор.Записать(Истина);
	
	сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти
