////////////////////////////////////////////////////////////////////////////////
// Управление производством: содержит процедуры для управления производством.
// Модуль входит в подсистему "УправлениеПредприятием".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкиПодсистемы

// Получает настройки подсистемы "Межцеховое управление"
// 
// Возвращаемое значение:
//   - Структура - настройки управления производством.
//
Функция НастройкиУправленияПроизводством() Экспорт
	
	НастройкиПодсистемы = Новый Структура();
	
	НаборКонстант = Константы.СоздатьНабор(
		"МетодикаУправленияПроизводством,
		|ИспользоватьПланированиеПоПроизводственнымРесурсам,
		|ИспользоватьПланированиеПоМатериальнымРесурсам,
		|ИспользоватьИнтервалПланированияЧас");
	НаборКонстант.Прочитать();

	НастройкиПодсистемы.Вставить("ПланируетсяГрафикПроизводства", ИспользуетсяГрафикПроизводства(НаборКонстант));
	НастройкиПодсистемы.Вставить("ИспользуетсяПланированиеПоПроизводственнымРесурсам", НаборКонстант.ИспользоватьПланированиеПоПроизводственнымРесурсам);
	НастройкиПодсистемы.Вставить("ИспользуетсяПланированиеПоМатериальнымРесурсам", НаборКонстант.ИспользоватьПланированиеПоМатериальнымРесурсам);
	НастройкиПодсистемы.Вставить("ФорматДатыГрафика", ФорматнаяСтрокаДляДатыГрафикаПроизводства(НаборКонстант));
	
	Возврат НастройкиПодсистемы;
	
КонецФункции

// Определяет используется ли график производства.
// 
// Параметры:
//  НаборКонстант - КонстантыНабор - значения констант.
// 
// Возвращаемое значение:
//   Булево - Истина, если график производства используется.
//
Функция ИспользуетсяГрафикПроизводства(НаборКонстант = Неопределено) Экспорт
	
	Если НаборКонстант <> Неопределено Тогда
		МетодикаУправления = НаборКонстант.МетодикаУправленияПроизводством;
	Иначе 
		МетодикаУправления = Константы.МетодикаУправленияПроизводством.Получить();
	КонецЕсли;
	
	Возврат МетодикаУправления <> Перечисления.МетодикаУправленияПроизводством.БезПланирования;
	
КонецФункции

// Определяет используется ли производство на стороне
// 
// Возвращаемое значение:
//   Булево - Истина, если используется планирование по производственным ресурсам.
//
Функция ИспользуетсяПроизводствоНаСтороне() Экспорт
	
	Возврат Константы.ИспользоватьПроизводствоНаСтороне.Получить();
	
КонецФункции

// Определяет форматную строку для даты графика производства
//
// Параметры:
//  НаборКонстант - КонстантыНабор - значения констант.
// 
// Возвращаемое значение:
//  Строка - форматная строка
//
Функция ФорматнаяСтрокаДляДатыГрафикаПроизводства(НаборКонстант = Неопределено) Экспорт
	
	Если НаборКонстант <> Неопределено Тогда
		ИспользоватьИнтервалПланированияЧас = НаборКонстант.ИспользоватьИнтервалПланированияЧас;
	Иначе 
		ИспользоватьИнтервалПланированияЧас = Константы.ИспользоватьИнтервалПланированияЧас.Получить();
	КонецЕсли;
	
	Если ИспользоватьИнтервалПланированияЧас Тогда
		Результат = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		Результат = "ДЛФ=D";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает вариант обособление материалов в производстве.
//
// Параметры:
//  Настройки	 - Структура - см. НастройкиУправленияПроизводством().
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыОбособленияМатериаловВПроизводстве - вариант обособление материалов в производстве.
//
Функция ВариантОбособленияМатериаловВПроизводстве() Экспорт
	
	ВариантОбособления = Константы.ВариантОбособленияМатериаловВПроизводстве.Получить();
	
	Если ВариантОбособления.Пустая() Тогда
		Возврат Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства;
	Иначе
		Возврат ВариантОбособления;
	КонецЕсли;
	
КонецФункции

// Определяет, используются ли серии в производстве версии 2.2.
//
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  *ИспользоватьСерииНоменклатуры - Булево
//  *УчитыватьСебестоимостьПоСериям - Булево.
//
Функция ИспользованиеСерийВПроизводстве22() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить(
		"ИспользоватьСерииНоменклатуры",
		ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство22"));
	
	Результат.Вставить(
		"УчитыватьСебестоимостьПоСериям",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямПроизводство22"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказНаПроизводство

// Добавляет на форму списка условное оформление для поля Приоритет
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма.
//  ИмяСписка			 - Строка			- имя динамического списка.
//  ИмяПоля				 - Строка			- имя поля Приоритет динамического списка.
//  ИспользуетсяОтбор	 - Булево			- Истина, если используется отбор и для него необходимо установить условное оформление.
//  ИмяЭлемента			 - Строка			- имя колонки Приоритет динамического списка.
//  ИмяПоляОтбора		 - Строка			- имя реквизита формы для отбора.
//  ИмяЭлементаОтбора	 - Строка			- имя элемента формы для отбора.
//
Процедура УстановитьУсловноеОформлениеПоляПриоритет(Форма, ИмяСписка, ИмяПоля, ИмяЭлемента, ИспользуетсяОтбор = Ложь, ИмяПоляОтбора = Неопределено, ИмяЭлементаОтбора = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Приоритеты.Ссылка                      КАК Приоритет,
		|	-Приоритеты.РеквизитДопУпорядочивания  КАК ПриоритетНомер,
		|	Приоритеты.Цвет                        КАК Цвет,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Приоритеты.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.Приоритеты КАК Приоритеты");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// колонка
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоля);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.ПриоритетНомер;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Выборка.Цвет.Получить());
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Выборка.Представление);
			
			// отбор
			Если ИспользуетсяОтбор Тогда
				
				Элемент = УсловноеОформление.Элементы.Добавить();
				
				Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Выборка.Приоритет;
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Выборка.Цвет.Получить());
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму списка условное оформление поля ДатаПроизводства
//
//  Параметры:
//   Форма - УправляемаяФорма - форма документа.
//   ИмяСписка - Строка - имя динамического списка.
//   ИмяПоляДата - Строка - условное оформление формы.
//
Процедура УстановитьУсловноеОформлениеПоляДатаПроизводства(Форма, ИмяСписка = "Список", ИмяПоляДата = "Дата") Экспорт
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);

	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", ФорматнаяСтрокаДляДатыГрафикаПроизводства());
	
КонецПроцедуры

#КонецОбласти

#Область Этап

// Структура заполнения данных при изменении статуса
//
// Параметры:
//  Объект					 - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктур	 - этап
//  ПлановаяДатаПоступления	 - Дата - плановая дата поступления изделий.
// 
// Возвращаемое значение:
//   - Структура - данные заполнения.
//
Функция ДанныеЗаполненияПриИзмененииСтатуса(Объект, Знач ПлановаяДатаПоступления = Неопределено) Экспорт
	
	Результат = Новый Структура("ДатаСобытия,ПлановаяДатаПоступления");
	
	Если ПлановаяДатаПоступления <> Неопределено Тогда
		Результат.ПлановаяДатаПоступления = ПлановаяДатаПоступления;
	Иначе
		Результат.ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступления(Объект.Ссылка);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Выполняет необходимые действия с объектом при изменении отметки выполнения этапа производства.
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап
//  ДанныеЗаполнения - Структура - см. метод ДанныеЗаполненияПриИзмененииСтатуса().
// 
// Возвращаемое значение:
//  Строка - содержит список реквизитов, которые были изменены при изменении отметки выполнения.
//
Функция ЗаполнитьРеквизитыЭтапаПриИзмененииОтметкиВыполнения(Объект, ДанныеЗаполнения = Неопределено) Экспорт
	
	СтатусФормируется = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	СтатусСформирован = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
	СтатусКВыполнению = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
	СтатусНачат       = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
	СтатусЗавершен    = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	НачатоВыполнение    = (Объект.ФактическоеНачалоЭтапа <> '000101010000');
	ЗавершеноВыполнение = (Объект.ФактическоеОкончаниеЭтапа <> '000101010000');
	
	ИзмененныеРеквизиты = "Статус";
	
	Если ЗавершеноВыполнение Тогда
		
		Объект.Статус = СтатусЗавершен;
		
	ИначеЕсли НачатоВыполнение 
		И Объект.Статус = СтатусЗавершен Тогда
		
		Объект.Статус = СтатусНачат;
		
	ИначеЕсли НачатоВыполнение 
		И (Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению) Тогда
		
		Объект.Статус = СтатусНачат;
		
	ИначеЕсли НЕ НачатоВыполнение
		И (Объект.Статус = СтатусНачат
			ИЛИ Объект.Статус = СтатусЗавершен) Тогда
		
		Объект.Статус = СтатусКВыполнению;
		
	КонецЕсли;
	
	ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения, ИзмененныеРеквизиты);
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

// Выполняет действия необходимые при изменения статуса документа
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап
//  СтатусДоИзменения - Перечисления.СтатусыЭтаповПроизводства2_2 - статус до изменений
//  ДанныеЗаполнения - Структура - см. метод ДанныеЗаполненияПриИзмененииСтатуса().
// 
// Возвращаемое значение:
//  Строка - содержит список реквизитов, которые были изменены при смене статуса.
//
Функция ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(Объект, СтатусДоИзменения, ДанныеЗаполнения = Неопределено) Экспорт
	
	СтатусФормируется = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	СтатусСформирован = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
	СтатусКВыполнению = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
	СтатусНачат       = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
	СтатусЗавершен    = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	ИзмененныеРеквизиты = "";
	
	ДатаСобытия = Неопределено;
	Если ДанныеЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения.Свойство("ДатаСобытия", ДатаСобытия);
	КонецЕсли;
	
	Если Объект.Статус <> СтатусДоИзменения Тогда
		
		ИзмененныеРеквизиты = "Статус";
		
		НачатоВыполнение =    (Объект.Статус = СтатусНачат ИЛИ Объект.Статус = СтатусЗавершен);
		ЗавершеноВыполнение = (Объект.Статус = СтатусЗавершен);
		
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ФактическоеНачалоЭтапа,
													 |ФактическоеОкончаниеЭтапа,
													 |НачатоВыполнениеЭтапа,
													 |ЗавершеноВыполнениеЭтапа,
													 |Выполнено";
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					НачатоВыполнение, 
					Объект.ФактическоеНачалоЭтапа,
					ДатаСобытия);
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					ЗавершеноВыполнение, 
					Объект.ФактическоеОкончаниеЭтапа,
					ДатаСобытия,
					ЗавершеноВыполнение);
		
		ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения, ИзмененныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

// Возвращает параметры для открытия формы Документ.ЭтапПроизводства2_2.Форма.ФормаРучногоРазмещенияВГрафике.
//
// Параметры:
//  Объект					 - ДокументОбъект.ЭтапПроизводства2_2 - этап производства
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - параметры формы ручного размещения этапа в графике.
//
Функция ПараметрыФормыРучногоРазмещенияЭтапаВГрафике(Объект, УникальныйИдентификатор) Экспорт

	ПараметрыФормы = Новый Структура;
	
	// Данные этапа
	
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("Статус", Объект.Статус);
	ПараметрыФормы.Вставить("Распоряжение", Объект.Распоряжение);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	
	// Данные графика производства
	
	ПараметрыФормы.Вставить("РучноеРазмещениеВГрафике", Объект.РучноеРазмещениеВГрафике);
	ПараметрыФормы.Вставить("ГрафикПроизводства");
	
	// Занятость видов рабочих центров
	
	АдресНормативы = "";
	АдресСтруктураЗанятости = "";
	
	Если Объект.РучноеРазмещениеВГрафике
		ИЛИ Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
		
		// Нормативы
		
		ВидыРабочихЦентров = ИспользуемыеВидыРабочихЦентров(Объект);
		
		АдресНормативы = ПоместитьВоВременноеХранилище(ВидыРабочихЦентров, УникальныйИдентификатор);
		
		// Занятость видов рабочих центров
		
		Если Объект.РучноеРазмещениеВГрафике Тогда
			
			ЗанятоЭтапом = Объект.ЗанятостьВидовРабочихЦентров.Выгрузить();
			
			МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ЗанятоЭтапом, "ВидРабочегоЦентра");
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ЗанятоЭтапом = РегистрыНакопления.ДоступностьВидовРабочихЦентров.ЗанятоЭтапом(Объект.Ссылка);
			
			Если ЗанятоЭтапом.Количество() > 0 Тогда
				МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ЗанятоЭтапом, "ВидРабочегоЦентра");
			Иначе
				МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ВидыРабочихЦентров, "ВидРабочегоЦентра");
			КонецЕсли;
			
		КонецЕсли;
		
		ЗанятоЭтапом.Свернуть("ВидРабочегоЦентра, ДатаИнтервала", "Количество");
		ЗанятоЭтапом.Индексы.Добавить("ВидРабочегоЦентра, ДатаИнтервала");
		
		СтруктураЗанятости = Новый Структура("
				|ЗанятоЭтапом, МассивВРЦ",
				ЗанятоЭтапом,
				МассивВРЦ);
			
		АдресСтруктураЗанятости = ПоместитьВоВременноеХранилище(СтруктураЗанятости, УникальныйИдентификатор)
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресНормативы", АдресНормативы);
	ПараметрыФормы.Вставить("АдресСтруктураЗанятости", АдресСтруктураЗанятости);
	
	Возврат ПараметрыФормы;

КонецФункции

// Возвращает основное изделие объекта (определяется по первой строке).
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап производства.
//
// Возвращаемое значение:
//   - Структура - номенклатура и характеристика основного изделия.
//
Функция ОсновноеИзделиеПартииПроизводства(Объект) Экспорт
	
	ОсновноеИзделие = Новый Структура("Номенклатура, Характеристика");
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
		
		Строки = Объект.ВыходныеИзделия.НайтиСтроки(Новый Структура("Отменено", Ложь));
		Если Строки.Количество() > 0 Тогда
			ОсновноеИзделие.Номенклатура = Строки[0].Номенклатура;
			ОсновноеИзделие.Характеристика = Строки[0].Характеристика;
		КонецЕсли;
		
	ИначеЕсли Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		
		Строки = Объект.ОбеспечениеМатериаламиИРаботами;
		Если Строки.Количество() > 0 Тогда
			ОсновноеИзделие.Номенклатура = Строки[0].Номенклатура;
			ОсновноеИзделие.Характеристика = Строки[0].Характеристика;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОсновноеИзделие;
	
КонецФункции

#КонецОбласти

#Область ПланированиеГрафика

// Инициирует планирование графика производства.
//
// Параметры:
//  НастройкиПланирования - Структура - настройки планирования графика.
//  АдресХранилища - УникальныйИдентификатор, Строка - адрес во временном хранилище,
//		по которому надо поместить результаты планирования.
//
Процедура ПланироватьИЗаписатьГрафикВФоне(НастройкиПланирования, АдресХранилища) Экспорт
	
	Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьИЗаписатьГрафикВФоне(
		НастройкиПланирования, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область Аналоги

// Выполняет замену материала на его аналог
//
// Параметры:
//  ТабличнаяЧасть	- ДанныеФормыКоллекция	 - табличная часть в которой требуется выполнить замену
//  АдресВХранилище	- Строка				 - адрес хранилища в котором находится выбор аналога.
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//  * СписокОшибок - Массив, Неопределено - содержит список ошибок, если не удалось выполнить замену
//  * СписокИзмененныхСтрок - Массив - содержит список измененных строк.
//
Функция ВыполнитьЗаменуНаАналог(ТабличнаяЧасть, АдресВХранилище) Экспорт
	
	Результат = Новый Структура("СписокОшибок,СписокИзмененныхСтрок", Неопределено, Неопределено);
	
	СписокОшибок = Новый Массив;
	МассивЗаменяемыхСтрок = Новый Массив;
	
	КоличествоОстаток = Новый Соответствие;
	
	СтруктураОтбора = Новый Структура;
	НаборыМатериалов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Проверяем возможность применения замены.
	Для Каждого СтрокаМатериал Из НаборыМатериалов.Материалы Цикл
		
		Если НаборыМатериалов.ПоСпецификации Тогда
			СтруктураОтбора.Вставить("КлючСвязиСпецификация", СтрокаМатериал.КлючСвязиСпецификация);
		Иначе
			СтруктураОтбора.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", СтрокаМатериал.Характеристика);
		КонецЕсли;
		
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка применения аналога. Материал ""%1"" на этапе не потребляется.';
											|en = 'An error occurred while using substitute. The ""%1"" material is not used at the stage.'"), 
											СокрЛП(СтрокаМатериал.Номенклатура));
			СписокОшибок.Добавить(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		СтрокаСпецификации = НайденныеСтроки[0];
		Идентификатор = СтрокаСпецификации.ПолучитьИдентификатор();
		
		Если СтрокаСпецификации.Количество < СтрокаМатериал.Количество Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка применения аналога. Материала ""%1"" на этапе недостаточно для замены по разрешению.';
											|en = 'An error occurred while using substitute. The ""%1"" material is not enough at the stage for replacement by permission.'"), 
											СокрЛП(СтрокаМатериал.Номенклатура));
			СписокОшибок.Добавить(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		МассивЗаменяемыхСтрок.Добавить(СтрокаСпецификации);
		КоличествоОстаток.Вставить(Идентификатор, СтрокаСпецификации.Количество - СтрокаМатериал.Количество);
		
	КонецЦикла;
	
	Если СписокОшибок.Количество() <> 0 Тогда
		Результат.СписокОшибок = СписокОшибок;
		Возврат Результат;
	КонецЕсли;
	
	// Удаление строк или изменение количества.
	СписокИзмененныхСтрок = Новый Массив;
	
	ЗначенияРеквизитовНовыхСтрок = Новый Структура("
	// для заказа на производства (2.1)
	|Склад,
	|ДатаОтгрузки,
	|ВариантОбеспечения,
	// для обработки группового редактирования этапов производства
	|Ссылка,
	// сохраняемые реквизиты
	|СтатьяКалькуляции, ПрименениеМатериала
	|");
	
	Для Каждого СтрокаСпецификации Из МассивЗаменяемыхСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовНовыхСтрок, СтрокаСпецификации);
		
		Идентификатор = СтрокаСпецификации.ПолучитьИдентификатор();
		ИндексТекущейСтроки = ТабличнаяЧасть.Индекс(СтрокаСпецификации);
		
		Если КоличествоОстаток[Идентификатор] > 0 Тогда
			
			СтрокаСпецификации.Количество = КоличествоОстаток[Идентификатор];
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСпецификации, СтруктураДействий, Неопределено);
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			
			СписокИзмененныхСтрок.Добавить(СтрокаСпецификации);
			
		Иначе
			
			ТабличнаяЧасть.Удалить(СтрокаСпецификации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаАналог Из НаборыМатериалов.Аналоги Цикл
		
		НоваяСтрокаМатериалыИУслуги = ТабличнаяЧасть.Вставить(ИндексТекущейСтроки);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМатериалыИУслуги, ЗначенияРеквизитовНовыхСтрок);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМатериалыИУслуги, СтрокаАналог);
		
		СписокИзмененныхСтрок.Добавить(НоваяСтрокаМатериалыИУслуги);
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		
	КонецЦикла;
	
	Результат.СписокИзмененныхСтрок = СписокИзмененныхСтрок;
	
	Возврат Результат;
	
КонецФункции

// Заполняет признак наличия аналогов
//
// Параметры:
//  Таблица					 - ДанныеФормыКоллекция, ТаблицаЗначений	 - список в котором нужно заполнить признак "ЕстьАналоги"
//  ПараметрыВыбораАналогов	 - Структура								 - содержит дополнительные сведения необходимые для заполнения
//  Строки					 - Массив									 - массив строк табличной части для обработки.
//
Процедура ОтметитьНаличиеАналогов(Таблица, ПараметрыВыбораАналогов, Строки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск аналогов без учета спецификации.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки     КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура    КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика  КАК Характеристика
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиВПроизводстве.Материал КАК Материал,
	|	АналогиВПроизводстве.ХарактеристикаМатериала КАК ХарактеристикаМатериала,
	|	АналогиВПроизводстве.Спецификация КАК Спецификация,
	|	АналогиВПроизводстве.КлючСвязиСпецификация КАК КлючСвязиСпецификация,
	|	АналогиВПроизводстве.Подразделение КАК Подразделение,
	|	АналогиВПроизводстве.ЗаказКлиента КАК ЗаказКлиента,
	|	АналогиВПроизводстве.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	АналогиВПроизводстве.Изделие КАК Изделие,
	|	АналогиВПроизводстве.ХарактеристикаИзделия КАК ХарактеристикаИзделия,
	|	АналогиВПроизводстве.Аналог КАК Аналог,
	|	АналогиВПроизводстве.ХарактеристикаАналога КАК ХарактеристикаАналога
	|ПОМЕСТИТЬ ВсеАналоги
	|ИЗ
	|	РегистрСведений.АналогиВПроизводстве КАК АналогиВПроизводстве
	|ГДЕ
	|	АналогиВПроизводстве.Период <= &Дата
	|	И (АналогиВПроизводстве.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ АналогиВПроизводстве.ПериодЗавершения >= &Дата)
	|	И АналогиВПроизводстве.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	И (АналогиВПроизводстве.Подразделение = &Подразделение
	|			ИЛИ АналогиВПроизводстве.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ЗаказКлиента = &ЗаказКлиента
	|			ИЛИ АналогиВПроизводстве.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|			ИЛИ АналогиВПроизводстве.ЗаказНаПроизводство В (
	|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка),
	|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка),
	|					НЕОПРЕДЕЛЕНО))
	|	И (АналогиВПроизводстве.Изделие = &Изделие
	|			ИЛИ АналогиВПроизводстве.Изделие = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ХарактеристикаИзделия = &ХарактеристикаИзделия
	|			ИЛИ АналогиВПроизводстве.ХарактеристикаИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВсеАналоги.Аналог ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьАналог
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеАналоги КАК ВсеАналоги
	|		ПО ТабличнаяЧасть.Номенклатура = ВсеАналоги.Материал
	|			И ТабличнаяЧасть.Характеристика = ВсеАналоги.ХарактеристикаМатериала
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки");
	
	Запрос.УстановитьПараметр("Дата",                  ПараметрыВыбораАналогов.ДатаОкончанияДействияРазрешений);
	Запрос.УстановитьПараметр("Спецификация",          ПараметрыВыбораАналогов.Спецификация);
	Запрос.УстановитьПараметр("Подразделение",         ПараметрыВыбораАналогов.Подразделение);
	Запрос.УстановитьПараметр("ЗаказНаПроизводство",   ПараметрыВыбораАналогов.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("Изделие",               ПараметрыВыбораАналогов.Изделие);
	Запрос.УстановитьПараметр("ХарактеристикаИзделия", ПараметрыВыбораАналогов.ХарактеристикаИзделия);
	Запрос.УстановитьПараметр("ЗаказКлиента",          ПараметрыВыбораАналогов.ЗаказКлиента);
	
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		ВременнаяТаблица = Таблица.Скопировать(Строки, "НомерСтроки, Номенклатура, Характеристика");
	Иначе
		ВременнаяТаблица = Таблица.Выгрузить(Строки, "НомерСтроки, Номенклатура, Характеристика");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Таблица", ВременнаяТаблица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Поиск аналогов с учетом спецификации.
	Если ЗначениеЗаполнено(ПараметрыВыбораАналогов.Спецификация) Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		|	АналогиВПроизводстве.КлючСвязиСпецификация КАК КлючСвязиСпецификация
		|ИЗ
		|	РегистрСведений.АналогиВПроизводстве КАК АналогиВПроизводстве
		|ГДЕ
		|	АналогиВПроизводстве.Период <= &Дата
		|			И (АналогиВПроизводстве.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ АналогиВПроизводстве.ПериодЗавершения >= &Дата)
		|	И АналогиВПроизводстве.Спецификация = &Спецификация
		|	И (АналогиВПроизводстве.Подразделение = &Подразделение
		|			ИЛИ АналогиВПроизводстве.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|	И (АналогиВПроизводстве.ЗаказКлиента = &ЗаказКлиента
		|			ИЛИ АналогиВПроизводстве.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))
		|	И (АналогиВПроизводстве.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|			ИЛИ АналогиВПроизводстве.ЗаказНаПроизводство В (
		|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка),
		|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка),
		|					НЕОПРЕДЕЛЕНО))
		|	И (АналогиВПроизводстве.Изделие = &Изделие
		|			ИЛИ АналогиВПроизводстве.Изделие = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|	И (АналогиВПроизводстве.ХарактеристикаИзделия = &ХарактеристикаИзделия
		|			ИЛИ АналогиВПроизводстве.ХарактеристикаИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	АналогиВПроизводстве.КлючСвязиСпецификация";
		
		АналогиСтрокСпецификаций = Запрос.Выполнить().Выгрузить();
		АналогиСтрокСпецификаций.Индексы.Добавить("КлючСвязиСпецификация");
		
	Иначе
		
		АналогиСтрокСпецификаций = Новый ТаблицаЗначений;
		АналогиСтрокСпецификаций.Колонки.Добавить("КлючСвязиСпецификация");
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("КлючСвязиСпецификация");
	
	Пока Выборка.Следующий() Цикл
		
		Строка = Таблица[Выборка.НомерСтроки - 1];
		
		Если Выборка.ЕстьАналог Тогда
			
			Строка.ЕстьАналогиМатериала = Выборка.ЕстьАналог;
			
		Иначе
			
			СтруктураОтбора.КлючСвязиСпецификация = Строка.КлючСвязиСпецификация;
			
			НайденныеСтроки = АналогиСтрокСпецификаций.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Строка.ЕстьАналогиМатериала = Истина;
			Иначе
				Строка.ЕстьАналогиМатериала = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет признак наличия аналогов материала
//
// Параметры:
//  Номенклатура			 - СправочникСсылка.Номенклатура				 - номенклатура
//  Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры
//  КлючСвязиСпецификация	 - УникальныйИдентификатор						 - уникальный идентификатор строки материала ресурсной спецификации
//  ПараметрыВыбораАналогов	 - Структура									 - содержит дополнительные сведения необходимые для заполнения.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть аналоги материала.
//
Функция ПроверитьНаличиеАналогов(Номенклатура, Характеристика, КлючСвязиСпецификация, ПараметрыВыбораАналогов) Экспорт
	
	ТабличнаяЧасть = Новый ТаблицаЗначений;
	
	ТабличнаяЧасть.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТабличнаяЧасть.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабличнаяЧасть.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТабличнаяЧасть.Колонки.Добавить("КлючСвязиСпецификация", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТабличнаяЧасть.Колонки.Добавить("ЕстьАналогиМатериала", Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = ТабличнаяЧасть.Добавить();
	
		НоваяСтрока.НомерСтроки = 1;
		
		НоваяСтрока.Номенклатура   = Номенклатура;
		НоваяСтрока.Характеристика = Характеристика;
		
		НоваяСтрока.КлючСвязиСпецификация = КлючСвязиСпецификация;
	
	ОтметитьНаличиеАналогов(ТабличнаяЧасть, ПараметрыВыбораАналогов);
	
	ЕстьАналоги = ТабличнаяЧасть[0].ЕстьАналогиМатериала;
	Возврат ЕстьАналоги;
	
КонецФункции

#КонецОбласти

#Область ОчередьЗаданий

// Добавляет задание или список заданий в очередь
//
// Параметры:
//  Очередь 	- Строка			 - имя очереди (имя регистра сведений очереди).
//  Задание 	- Структура, Массив	 - структура со значениями измерений, реквизитов и ресурсов
//											или массив заданий, для регистрации нескольких заданий за раз.
// 
// Возвращаемое значение:
//  Массив - идентификаторы новых заданий.
//
Функция ДобавитьЗаданиеВОчередь(Очередь, Задание) Экспорт
	
	СписокЗаданий = ОбщегоНазначенияУТКлиентСервер.Массив(Задание);
	
	Идентификаторы = Новый Массив;
	ДеньРегистрации = Цел((ТекущаяУниверсальнаяДата() - '20000101000000') / 86400);
	
	НаборЗаписей = РегистрыСведений[Очередь].СоздатьНаборЗаписей();
	
	Для каждого ТекущиеДанные Из СписокЗаданий Цикл
		
		НовоеЗадание = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеЗадание, ТекущиеДанные);
		
		НовоеЗадание.ДеньРегистрации = ДеньРегистрации;
		НовоеЗадание.Идентификатор = Новый УникальныйИдентификатор;
		
		Идентификаторы.Добавить(НовоеЗадание.Идентификатор);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей.Записать(Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Идентификаторы;
	
КонецФункции

// Запускает фоновое задание обработчик очереди
//
// Параметры:
//  Очередь			 - Строка							 - имя очереди (имя регистра сведений очереди).
//  Отбор			 - Структура						 - задания по этому отбору будут обрабатываться первыми.
//  Идентификатор	 - УникальныйИдентификатор, Массив	 - идентификатор или список идентификаторов заданий
//	  Если фоновое задание запускается в той же транзакции, что и добавление новых заданий в очередь возможна ситуация,
//	     когда фоновое задание запущено, транзакция не завершена и задания для обработки не видны сеансу фонового задания.
//	  Для решения этой проблемой перед обработкой первой порции заданий из очереди открывается транзакция
//       и устанавливается блокировка на задания в очереди по идентификатору.
//
Процедура ЗапуститьЗаданиеОбработкиОчереди(Очередь, Отбор = Неопределено, Идентификатор = Неопределено) Экспорт
	
	Если ОчередьЗаданийПуста(Очередь, Отбор) Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = Очередь + ".ОбработкаОчереди";
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючПоиска = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(КлючПоиска);
	Если Задания.ВГраница() <> -1 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяЭкспортнойПроцедуры = "УправлениеПроизводством.ОбработатьОчередьЗаданий";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Очередь", Очередь);
	ПараметрыЗаполнения.Вставить("Отбор", Отбор);
	ПараметрыЗаполнения.Вставить("Идентификатор", Идентификатор);
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗаполнения);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Обработка очереди <%1>';
										|en = 'Processing queue <%1>'"), Метаданные.РегистрыСведений[Очередь].Синоним);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет наличие изменений в табличной части документа.
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект	 - проверяемый документ
//  ДанныеДоИзменения	 - Структура		 - структура, содержащая данные документа до изменения
//  ИмяТаблицы			 - Строка			 - имя проверяемой таблицы
//  Реквизиты			 - Массив			 - массив проверяемых реквизитов.
// 
// Возвращаемое значение:
//   - Булево - признак наличия изменений в табличной части.
//
Функция ИзмененаТабличнаяЧастьДокумента(ДокументОбъект, ДанныеДоИзменения, ИмяТаблицы, Реквизиты = Неопределено) Экспорт
	
	Результат = Ложь;
	
	ТаблицаДоИзменения = ДанныеДоИзменения[ИмяТаблицы];
	
	Если Реквизиты = Неопределено Тогда
		
		Реквизиты = Новый Массив;
		Для каждого Колонка Из ТаблицаДоИзменения.Колонки Цикл
			Реквизиты.Добавить(Колонка.Имя);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаДоИзменения.Количество() <> ДокументОбъект[ИмяТаблицы].Количество() Тогда
		
		Результат = Истина;
		
	Иначе
		
		Для Индекс = 0 По ТаблицаДоИзменения.Количество()-1 Цикл
			
			СтрокаДоИзменения = ТаблицаДоИзменения[Индекс];
			СтрокаПослеИзменения = ДокументОбъект[ИмяТаблицы][Индекс];
			
			Для каждого Реквизит Из Реквизиты Цикл
				Если СтрокаДоИзменения[Реквизит] <> СтрокаПослеИзменения[Реквизит] Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет корректность заполнения количества в табличной части
//
// Параметры:
//  Объект - ДокументОбъект, ОбработкаОбъект - объект, который нужно проверить
//  ИмяТЧ - Строка - имя проверяемой табличной части
//  МассивНепроверяемыхРеквизитов - Массив - реквизиты, которые необходимо
//		исключить из стандартной процедуры проверки заполнения
//  Отказ - Булево - флаг отказа от записи объекта (выполнения заданного действия).
//
Процедура ПроверитьЗаполнениеКоличестваВТЧ(Объект, ИмяТЧ, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	КлючДанных  = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	ПутьКДанным = "Объект";
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".Количество");
	
	ПредставлениеТЧ                          = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаКоличествоУпаковок = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.КоличествоУпаковок.Синоним;
	
	ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';
									|en = 'The ""%ПредставлениеКолонки%"" column is not populated in line %НомерСтроки% of the ""%ПредставлениеТЧ%"" list'");
	ШаблонОшибкаКоличества = СтрЗаменить(ШаблонОшибкаКоличества, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';
								|en = 'Null quantity is detected while converting into the storage unit in line %НомерСтроки% of list ""%ПредставлениеТЧ%""'");
	ШаблонОшибкаПересчета = СтрЗаменить(ШаблонОшибкаПересчета, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	
	Для Каждого СтрокаТаб Из Объект[ИмяТЧ] Цикл
		
		Если СтрокаТаб.Количество = 0 
			И СтрокаТаб.КоличествоУпаковок <> 0 Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПутьКДанным,Отказ);
			
		ИначеЕсли СтрокаТаб.Количество = 0 Или СтрокаТаб.КоличествоУпаковок = 0 Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковок);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПутьКДанным,Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения служебных констант ИспользоватьСерииНоменклатурыПроизводство22
//	и УчитыватьСебестоимостьПоСериямПроизводство22 по данным видов номенклатуры и политик учета серий.
//
Процедура НастроитьИспользованиеСерийВПроизводстве22() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВидыНоменклатуры.ИспользоватьСерии) КАК ИспользоватьСерииНоменклатурыПроизводство22,
		|	МАКСИМУМ(ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ)) КАК УчитыватьСебестоимостьПоСериямПроизводство22
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВидыНоменклатуры.ИспользоватьСерии) ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Константы.ИспользоватьСерииНоменклатурыПроизводство22 КАК ИспользоватьСерииНоменклатурыПроизводство22,
		|	Константы.УчитыватьСебестоимостьПоСериямПроизводство22 КАК УчитыватьСебестоимостьПоСериямПроизводство22
		|ИЗ
		|	Константы КАК Константы");
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьСерииНоменклатурыПроизводство22");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.УчитыватьСебестоимостьПоСериямПроизводство22");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			
			НовыеЗначения = МассивРезультатов[0].Выбрать();
			НовыеЗначения.Следующий();
		
			СтарыеЗначения = МассивРезультатов[1].Выбрать();
			СтарыеЗначения.Следующий();
				
			Если НовыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22
				<> СтарыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22 Тогда
				
				Константы.ИспользоватьСерииНоменклатурыПроизводство22.Установить(
					НовыеЗначения.ИспользоватьСерииНоменклатурыПроизводство22);
				
			КонецЕсли;
			
			Если НовыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22
				<> СтарыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22 Тогда
				
				Константы.УчитыватьСебестоимостьПоСериямПроизводство22.Установить(
					НовыеЗначения.УчитыватьСебестоимостьПоСериямПроизводство22);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Шаблон = НСтр("ru = 'Не удалось установить значение константы ""Использовать серии номенклатуры производство 2.2"" по причине: %1';
						|en = 'Cannot set value of the ""Use product series production 2.2"" constant due to: %1'");
		ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка константы ""Использовать серии номенклатуры производство 2.2""';
				|en = 'Set the ""Use product series production 2.2"" constant'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Константы.ИспользоватьСерииНоменклатурыПроизводство22,
			,
			ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаказНаПроизводство

Функция ДобавитьКомандуСоздатьНаОснованииЗаказ(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПроизводствоСервер.ИспользуетсяПроизводство22() Тогда
		МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство2_2;
	Иначе
		МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство;
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", МенеджерОбъекта) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер =  МенеджерОбъекта.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МенеджерОбъекта);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Этап

#Область ВыходныеИзделия

Процедура ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(ТабличнаяЧасть, СтрокиЗаполнения = Неопределено) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть,
		СтруктураДействий,
		СтрокиЗаполнения);
	
	ЗаполнитьПризнакЦеховаяКладовая(ТабличнаяЧасть, "Получатель", СтрокиЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

Процедура ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(ТабличнаяЧасть, СтрокиЗаполнения = Неопределено) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть,
		СтруктураДействий,
		СтрокиЗаполнения);
	
	ЗаполнитьПризнакЦеховаяКладовая(ТабличнаяЧасть, "Склад", СтрокиЗаполнения);
	
КонецПроцедуры

Процедура УдалитьНедопустимыеВариантыОбеспечения(Операция, Товары, ДанныеЗаполнения)
	
	СтрокиПолуфабрикатов = Новый Соответствие;
	ИдентификаторыСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		Идентификатор = СтрокаОбеспечения.Идентификатор;
		Если ИдентификаторыСтрокКУдалению.Найти(Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
			СтрокаТовары = Товары.НайтиПоИдентификатору(Идентификатор);
		ИначеЕсли Операция = "ИндексыСтрок" Тогда
			СтрокаТовары = Товары[Идентификатор];
		КонецЕсли;
		Если СтрокаТовары.Производится Тогда
			
			Если СтрокаОбеспечения.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Обособленно
				И СтрокаОбеспечения.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
					
				Если ИдентификаторыСтрокКУдалению.Найти(Идентификатор) = Неопределено Тогда
					ИдентификаторыСтрокКУдалению.Добавить(Идентификатор);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыСтрокКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоМассив = ТипЗнч(ДанныеЗаполнения) = Тип("Массив");
	
	СтрокиКУдалению = Новый Массив; 
	Для Сч = 0 По ДанныеЗаполнения.Количество() - 1 Цикл
		СтрокаОбеспечения = ДанныеЗаполнения[Сч];
		Если ИдентификаторыСтрокКУдалению.Найти(СтрокаОбеспечения.Идентификатор) <> Неопределено Тогда
			СтрокиКУдалению.Добавить(?(ЭтоМассив, Сч, СтрокаОбеспечения));
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаОбеспечения Из СтрокиКУдалению Цикл
		ДанныеЗаполнения.Удалить(СтрокаОбеспечения);
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьДатуОтгрузки(Объект, СтрокаТовары, СтрокаОбеспечения, ЖелаемаяДатаОбеспечения) Экспорт
	
	Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
		ИЛИ СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
		
		СтрокаТовары.ДатаОтгрузки = НачалоДня(ТекущаяДатаСеанса());
		
	ИначеЕсли НЕ Объект.НеОтгружатьЧастями И СтрокаОбеспечения.Отгружено = 0 Тогда
		
		СтрокаТовары.ДатаОтгрузки = Макс(СтрокаОбеспечения.ДатаОтгрузки, ЖелаемаяДатаОбеспечения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьЖелаемуюДатуОбеспеченияЭтапа(Объект, ЖелаемаяДата) Экспорт
	
	Объект.ЖелаемаяДатаОбеспечения = ЖелаемаяДата;
	
	Для каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		Если Строка.ДатаОтгрузки < ЖелаемаяДата Тогда
			Строка.ДатаОтгрузки = ЖелаемаяДата;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Нормативы

Функция ПолучитьНормативы(Нормативы, МассивДанных, СтруктураПоиска, ЕстьУпаковки = Ложь) Экспорт
	
	Результат = ПроизводствоСервер.СоздатьМассив(МассивДанных.Количество(), 0);
	
	Если ЗначениеЗаполнено(Нормативы) Тогда
		
		Если ЕстьУпаковки Тогда
			
			ДанныеСтрокСУпаковками = Новый Массив;
			СоответствиеСтрокСУпаковками = Новый Соответствие;
			Индекс = 0;
			Для Х = 0 По МассивДанных.ВГраница() Цикл
				ДанныеСтроки = МассивДанных[Х];
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
					ИЛИ ДанныеСтроки.ХарактеристикиИспользуются И НЕ ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
				СписокСтрок = Нормативы.НайтиСтроки(СтруктураПоиска);
				Если СписокСтрок.Количество() <> 0 Тогда
					
					Результат[Х] = СписокСтрок[0].Количество;
					Если ЗначениеЗаполнено(ДанныеСтроки.Упаковка) Тогда
						ДанныеСтрокСУпаковками.Добавить(ДанныеСтроки);
						СоответствиеСтрокСУпаковками.Вставить(Индекс, Х);
						Индекс = Индекс + 1;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДанныеСтрокСУпаковками.Количество() <> 0 Тогда
				КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(ДанныеСтрокСУпаковками);
				Для Сч = 0 По ДанныеСтрокСУпаковками.ВГраница() Цикл
					Х = СоответствиеСтрокСУпаковками.Получить(Сч);
					ТекущиеДанные = МассивДанных[Х];
					Коэффициент = КоэффициентыУпаковок.Получить(ТекущиеДанные.Номенклатура).Получить(ТекущиеДанные.Упаковка);
					Результат[Х] = Результат[Х] / Коэффициент;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Для Х = 0 По МассивДанных.ВГраница() Цикл
				ДанныеСтроки = МассивДанных[Х];
				
				ЗначениеНеЗаполнено = Ложь;
				Для каждого КлючИЗначение Из СтруктураПоиска Цикл
					Если ЗначениеЗаполнено(КлючИЗначение.Ключ) Тогда
						Продолжить;
					КонецЕсли;
					ЗначениеНеЗаполнено = Истина;
					Прервать;
				КонецЦикла;
				Если ЗначениеНеЗаполнено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
				СписокСтрок = Нормативы.НайтиСтроки(СтруктураПоиска);
				Если СписокСтрок.Количество() <> 0 Тогда
					Результат[Х] = СписокСтрок[0].Количество;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ОбновитьПризнакТребуетсяЗаполнитьПолеЭтапПотребитель(Форма, СписокЗаказов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|ГДЕ
	|	Заказы.Ссылка В (&СписокЗаказов)
	|	И Заказы.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
	|");
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Форма.ТребуетсяЗаполнитьПолеЭтапПотребитель = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// Описывает служебные данные которые используются при редактировании этапа
//
// Параметры:
//  Режим	 - Строка	 - режим редактирования этапа (варианты: Объект, Обработка).
// 
// Возвращаемое значение:
//  Структура - параметры редактирования этапа.
//
Функция ПараметрыРедактированияЭтапа(Режим) Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("Режим", Режим);
	Результат.Вставить("ЭтоЗаказПереработчику", Ложь);
	
	Результат.Вставить("ИмяРеквизитаОбъект", "Объект");
	Результат.Вставить("ИмяРеквизитаСсылка", "Ссылка");
	
	Результат.Вставить("ИмяРеквизитаПараметрыУказанияСерий", "ПараметрыУказанияСерий");
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьПризнакЦеховаяКладовая(ТаблицаФормы, ИмяПоля = "Склад", Строки = Неопределено) Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Таблица.%Склад% КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Склад.ЦеховаяКладовая КАК ЦеховаяКладовая
	|ИЗ
	|	Таблица КАК Таблица";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Склад%", ИмяПоля);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", ТаблицаФормы.Выгрузить(Строки, "НомерСтроки," + ИмяПоля));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаФормы[Выборка.НомерСтроки-1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаправлениеВыпускаВТЧ(КоллекцияСтрок) Экспорт
	
	Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
		
		Если ДанныеСтроки.СписатьНаРасходы Тогда
			ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		ИначеЕсли ДанныеСтроки.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
		Иначе
			ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.СтатьяРасходов) Тогда
			ДанныеСтроки.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СтатьяРасходовПриИзменении(СтрокаТаблицы, Объект, КэшированныеЗначения) Экспорт
	
	Если СтрокаТаблицы.СтатьяРасходов = Неопределено Тогда
		СтрокаТаблицы.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
			СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		КонецЕсли;
	Иначе
		
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
		
		СтрокаТаблицы.СчетУчета = Неопределено;
		СтрокаТаблицы.Субконто1 = Неопределено;
		СтрокаТаблицы.Субконто2 = Неопределено;
		СтрокаТаблицы.Субконто3 = Неопределено;
		СтрокаТаблицы.ПредставлениеОтраженияВРеглУчете = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(СтрокаТаблицы);
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна,
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация,
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения = Неопределено, ИзмененныеРеквизиты = "")
	
	СтатусФормируется = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется");
	СтатусСформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	СтатусКВыполнению = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");
	СтатусНачат       = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат");
	СтатусЗавершен    = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");
	
	Если Объект.Статус = СтатусЗавершен Тогда
		
		Объект.Выполнено = Объект.Запланировано;
		
	ИначеЕсли Объект.Статус <> СтатусНачат Тогда
		
		Объект.Выполнено = 0;
		
	КонецЕсли;
	
	ПлановаяДатаПоступления = Неопределено;
	Если ДанныеЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения.Свойство("ПлановаяДатаПоступления", ПлановаяДатаПоступления);
	КонецЕсли;
	
	Если ПлановаяДатаПоступления = Неопределено Тогда
		ПлановаяДатаПоступления = '00010101';
	КонецЕсли;
	
	ИменаТаблицИзделия = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
	
	// Выходные изделия и трудозатраты
	Если (Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению
			ИЛИ Объект.Статус = СтатусЗавершен)
		И НЕ Объект.ПроизводствоНаСтороне Тогда
		
		Отметка = (Объект.Статус = СтатусЗавершен);
		
		УстановитьОтметкуПроизведено = Истина;
		
		Если Объект.Статус = СтатусЗавершен Тогда
			
			СтруктураОтбора = Новый Структура("Произведено", Истина);
			
			Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
				
				Если Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора).ВГраница() <> -1 Тогда
					
					УстановитьОтметкуПроизведено = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если УстановитьОтметкуПроизведено Тогда
			
			ДатаПроизводства = Неопределено;
			
			Если Объект.ПроизводствоОднойДатой Тогда
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Отметка,
							Объект.ДатаПроизводства,, Истина);
				
				ДатаПроизводства = Объект.ДатаПроизводства;
				
			КонецЕсли;
			
			Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
				
				Для Каждого Строка Из Объект[ИмяТаблицы] Цикл
					
					Строка.Произведено = Отметка;
					
					УправлениеПроизводством.УстановитьДатуПоОтметке(
								Отметка, 
								Строка.ДатаПроизводства, ДатаПроизводства, Истина);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Документы.ЭтапПроизводства2_2.ЗаполнитьЦеныПоВидуЦен(Объект);
			
		КонецЕсли;
		
		УстановитьОтметкуВыполнено = Истина;
		
		Если Объект.Статус = СтатусЗавершен Тогда
			
			СтруктураОтбора = Новый Структура("Выполнено", Истина);
			
			Если Объект.Трудозатраты.НайтиСтроки(СтруктураОтбора).ВГраница() <> -1 Тогда
				
				УстановитьОтметкуВыполнено = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если УстановитьОтметкуВыполнено Тогда
			
			Для Каждого Строка Из Объект.Трудозатраты Цикл
				
				Строка.Выполнено = Отметка;
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Отметка, 
							Строка.ДатаВыполнения,, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = СтатусНачат Тогда
		
		Если Объект.ПроизводствоОднойДатой Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
						Истина, 
						Объект.ДатаПроизводства, ПлановаяДатаПоступления);
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Произведено", Ложь);
		
		Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
			
			Для Каждого Строка Из Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора) Цикл
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Истина, 
							Строка.ДатаПроизводства, ПлановаяДатаПоступления);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Обеспечение, расход и экономия материалов
	Если НЕ Объект.ПроизводствоНаСтороне Тогда
		
		Если (Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению) Тогда
		
			Документы.ЭтапПроизводства2_2.ОтменитьДействиеОтгрузить(Объект);
			
			Если Объект.Статус = СтатусФормируется Тогда
				Документы.ЭтапПроизводства2_2.ОтменитьДействиеРезервировать(Объект);
			КонецЕсли;
			
			Объект.РасходМатериаловИРабот.Очистить();
			
			Объект.ЭкономияМатериалов.Очистить();
			Объект.ЭкономияМатериаловСерии.Очистить();
			
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",РасходМатериаловИРабот,ЭкономияМатериалов";
			
		ИначеЕсли Объект.Статус = СтатусЗавершен Тогда
			
			Если Объект.ОбеспечениеМатериаламиИРаботами.Количество() > 0 Тогда
				
				СтрокиКОтгрузке = Новый Массив;
				Для каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
					Если НЕ (Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
						 ИЛИ Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно) Тогда
						СтрокиКОтгрузке.Добавить(Строка);
					КонецЕсли;
				КонецЦикла;
				
				ТребуетсяЗаполнитьОбеспечение = (СтрокиКОтгрузке.Количество() <> 0);
				
				Если (ТребуетсяЗаполнитьОбеспечение) Тогда
					
					ОтгружатьЧастями = (СтрокиКОтгрузке.Количество() <> Объект.ОбеспечениеМатериаламиИРаботами.Количество());
					Если Объект.НеОтгружатьЧастями Тогда
						Если ОтгружатьЧастями Тогда
							Объект.НеОтгружатьЧастями = Ложь;
							Объект.ДатаОтгрузки = '00010101';
						Иначе
							Объект.ДатаОтгрузки = НачалоДня(ТекущаяДатаСеанса());
						КонецЕсли;
					КонецЕсли;
					
					Документы.ЭтапПроизводства2_2.УстановитьДействиеОтгрузить(Объект);
					
				КонецЕсли;
				
				ТребуетсяЗаполнитьРасход = (Объект.РасходМатериаловИРабот.Количество() = 0);
				ТребуетсяЗаполнитьЭкономию = (Объект.ЭкономияМатериалов.Количество() = 0);
				
				Если (ТребуетсяЗаполнитьРасход ИЛИ ТребуетсяЗаполнитьЭкономию) Тогда
					
					РасходРазнымиДатами = (НЕ ТребуетсяЗаполнитьРасход ИЛИ НЕ ТребуетсяЗаполнитьЭкономию);
					Если Объект.РасходОднойДатой Тогда
						Если РасходРазнымиДатами Тогда
							Объект.РасходОднойДатой = Ложь;
							Объект.ДатаРасхода = '00010101';
						Иначе
							Объект.ДатаРасхода = НачалоДня(ТекущаяДатаСеанса());
						КонецЕсли;
					КонецЕсли;
					
					Если ТребуетсяЗаполнитьРасход Тогда
						
						Документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект);
						ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",РасходМатериаловИРабот";
						
					ИначеЕсли ТребуетсяЗаполнитьЭкономию Тогда
						
						Документы.ЭтапПроизводства2_2.ЗаполнитьНеизрасходованныеМатериалы(Объект);
						ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ЭкономияМатериалов";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ДатаОтгрузки,НеОтгружатьЧастями,ДатаРасхода,РасходОднойДатой";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// От статуса зависит указание серий
	ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(Объект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	
КонецПроцедуры

Функция ВыполняетсяПакетноеФормированиеЭтапов(Объект) Экспорт
	
	Возврат Объект.ДополнительныеСвойства.Свойство(КлючПакетныйРежимФормированияЭтапов());
	
КонецФункции

Функция КлючПакетныйРежимФормированияЭтапов() Экспорт
	
	Возврат "ПакетныйРежимФормированияЭтапов";
	
КонецФункции

Функция ЗаполнитьВариантОбеспеченияЭтапа(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыРедактированияЭтапа, ПараметрыУказанияСерий = Неопределено) Экспорт

	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары" И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	СтатусФормируется = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется");
	СтатусСформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	СтатусКВыполнению = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");
	
	ДанныеЭтапов = Новый Соответствие;
	ИмяРеквизитаСсылка = ПараметрыРедактированияЭтапа.ИмяРеквизитаСсылка;
	
	УдалитьНедопустимыеВариантыОбеспечения(Операция, Объект.ОбеспечениеМатериаламиИРаботами, ДанныеЗаполнения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");
	
	ЗаполнитьДатыОтгрузки = Ложь;
	ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
	
	Если ПараметрыРедактированияЭтапа.ЭтоЗаказПереработчику Тогда
		ЖелаемаяДата = Объект.ЖелаемаяДатаОтгрузки;
	Иначе
		ЖелаемаяДата = Объект.ЖелаемаяДатаОбеспечения;
	КонецЕсли;
	
	ДатаПоУмолчанию = Макс(ТекущаяДатаСеанса, ЖелаемаяДата);
	
	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	СписокЭтаповОтгрузить = Новый Массив;
	ЕстьОтгрузить = Ложь;
	ЕстьРезервировать = Ложь;
	
	ПараметрыОбновленияДатыОтгрузки = ОбеспечениеСервер.ПараметрыОбновленияДатыОтгрузкиВДокументе();
	ПараметрыОбновленияДатыОтгрузки.ОтгружатьОднойДатой    = Объект.НеОтгружатьЧастями;
	ПараметрыОбновленияДатыОтгрузки.ЖелаемаяДатаОтгрузки   = ЖелаемаяДата;
	ПараметрыОбновленияДатыОтгрузки.ДатаОтгрузкиВДокументе = Объект.ДатаОтгрузки;
	
	ОбеспечениеСервер.СдвинутьДатыИСвернутьДублиСтрок(ДанныеЗаполнения, Операция, ПараметрыОбновленияДатыОтгрузки);
	
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		// Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда
			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
		Иначе
			ТекСтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами.Вставить(Объект.ОбеспечениеМатериаламиИРаботами.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;
		
		// Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад, ДатаОтгрузки");
		
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;
		
		Если ПараметрыРедактированияЭтапа.Режим = "Обработка" Тогда
			ДанныеЭтапа = Новый Структура();
			Если ЗначениеЗаполнено(ТекСтрокаТовары[ИмяРеквизитаСсылка]) Тогда
				ДанныеЭтапа = ДанныеЭтапов.Получить(ТекСтрокаТовары[ИмяРеквизитаСсылка]);
				Если ДанныеЭтапа = Неопределено Тогда
					СтруктураПоиска = Новый Структура(ИмяРеквизитаСсылка, ТекСтрокаТовары[ИмяРеквизитаСсылка]);
					ДанныеЭтапа = Объект.Этапы.НайтиСтроки(СтруктураПоиска)[0];
					ДанныеЭтапов.Вставить(ТекСтрокаТовары[ИмяРеквизитаСсылка], ДанныеЭтапа);
				КонецЕсли;
				ПараметрыДействия = ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(ДанныеЭтапа);
				ОбеспечениеПроизводстваКлиентСервер.ЗаполнитьНазначениеОбеспеченияВСтрокеЭтапаПроизводства(ТекСтрокаТовары, ПараметрыДействия);
			КонецЕсли;
		Иначе
			ПараметрыДействия = ОбеспечениеПроизводстваКлиентСервер.ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(Объект);
			ОбеспечениеПроизводстваКлиентСервер.ЗаполнитьНазначениеОбеспеченияВСтрокеЭтапаПроизводства(ТекСтрокаТовары, ПараметрыДействия);
		КонецЕсли;
		
		Если ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
			ИЛИ ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			
			Если ПараметрыРедактированияЭтапа.Режим = "Обработка" 
				И СписокЭтаповОтгрузить.Найти(ТекСтрокаТовары[ИмяРеквизитаСсылка]) = Неопределено Тогда
				СписокЭтаповОтгрузить.Добавить(ТекСтрокаТовары[ИмяРеквизитаСсылка]);
			Иначе
				ЕстьОтгрузить = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада 
			ИЛИ ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда
			Если НЕ ПараметрыРедактированияЭтапа.Режим = "Обработка" Тогда
				ЕстьРезервировать = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.НеОтгружатьЧастями Тогда
			
			ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок"
				Или ДатаПоУмолчанию > Объект.ДатаОтгрузки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.ДатаОтгрузки = ДатаПоУмолчанию;
				ЗаполнитьДатыОтгрузки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;
	
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
	
	Если ПараметрыРедактированияЭтапа.Режим = "Обработка" Тогда
		
		Для каждого ЭтапСсылка Из СписокЭтаповОтгрузить Цикл
			СтруктураПоиска = Новый Структура(ИмяРеквизитаСсылка, ЭтапСсылка);
			СписокСтрок = Объект.Этапы.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0
				И (СписокСтрок[0].Статус = СтатусФормируется
					ИЛИ СписокСтрок[0].Статус = СтатусСформирован
					ИЛИ СписокСтрок[0].Статус = СтатусКВыполнению) Тогда
				СписокСтрок[0].Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыРедактированияЭтапа.ЭтоЗаказПереработчику Тогда
			
			Если СписокЭтаповОтгрузить.Количество() <> 0
				И Форма.Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован Тогда
				Форма.Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЕстьОтгрузить Тогда
			
			Если Объект.Статус = СтатусФормируется
				ИЛИ Объект.Статус = СтатусСформирован
				ИЛИ Объект.Статус = СтатусКВыполнению Тогда
				
				Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
				УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
					Объект, 
					Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
				
			КонецЕсли;
			
		ИначеЕсли ЕстьРезервировать Тогда
			
			Если Объект.Статус = СтатусФормируется Тогда
				
				Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
				УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
					Объект, 
					Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	
	Если ЗаполнитьДатыОтгрузки Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(
				Объект.ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	
	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

Процедура УстановитьДатуВыполненияТрудозатраты(ТекущиеДанные, ДатаСобытияЗавершение) Экспорт
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(ТекущиеДанные.Выполнено, ТекущиеДанные.ДатаВыполнения, ДатаСобытияЗавершение);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление 

Процедура УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма,
		ПрефиксЭлементов + ИмяТЧ + "НоменклатураЕдиницаИзмерения", 
		ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		ПрефиксЭлементов + ИмяТЧ + "Характеристика",
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма,
		Ложь,
		ПрефиксЭлементов + ИмяТЧ + "Серия",
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий",
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		Форма,
		Ложь,
		ПрефиксЭлементов + ИмяТЧ + "СтатусУказанияСерий",
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		Форма,
		ПрефиксЭлементов + ИмяТЧ + "Назначение",
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры",
		Ложь);
		
	#КонецОбласти
	
	// Дата производства обязательна к заполнению в статусе начат, завершен
	#Область ДатаПроизводства
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "ДатаПроизводства"].Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область Назначение
	
	// Назначение обязательно: в давальческой схеме, при производстве разбираемого изделия.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Назначение"].Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	// Давальческая схема
	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Производство и дальнейшая разборка изделия
	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Назначение не указывается при списании на расходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Назначение"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	// Представление поля НаправлениеВыпуска
	#Область НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НаправлениеВыпуска"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НаправлениеВыпуска"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To department'"));

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НаправлениеВыпуска"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на расходы';
																|en = 'Write off as expenses'"));
	#КонецОбласти
	
	// Статья и аналитика только если списываем на расходы, иначе указывается получатель.
	#Область АналитикаРасходов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "СтатьяРасходов"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "АналитикаРасходов"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "АналитикаАктивовПассивов"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "СчетРеглУчетаРасходов"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "СчетРеглУчетаАктивовПассивов"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// текст аналитики расходов, если статья не выбрана
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "АналитикаРасходов"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "АналитикаАктивовПассивов"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью>';
																|en = '<select an item>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	// Представление полей при отмене строк
	#Область ОтменаСтрок
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Произведено"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Получатель"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы[ПрефиксЭлементов + ИмяТЧ],
		Элементы[ПрефиксЭлементов + ИмяТЧ + "Отменено"].Имя,
		Элементы[ПрефиксЭлементов + ИмяТЧ + "ПричинаОтмены"].Имя);
	
	#КонецОбласти
	
	// Обработать по спецификации
	#Область ОбработатьПоСпецификации
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Спецификация"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без спецификации>';
																|en = '<without bill of resources>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Спецификация"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ОбработатьПоСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Спецификация"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "ОбработатьПоСпецификации"].Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	// Подразделение-получатель
	УстановитьУсловноеОформлениеПодразделениеПолучатель(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов, ПутиКДанным);
	
	// Статьи расходов, активов/пассивов
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура(ИмяТЧ));
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(Форма, ИмяТЧ, ТипыСтатей);
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(Форма, ИмяТЧ, ТипыСтатей);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеОбеспеченияЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма, 
		ПрефиксЭлементов + ИмяТЧ + "НоменклатураЕдиницаИзмерения", 
        ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма, 
		ПрефиксЭлементов + ИмяТЧ + "Характеристика",
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма, 
		"СерииВсегдаВТЧТовары", 
		ПрефиксЭлементов + ИмяТЧ + "Серия", 
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий", 
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");

	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ДатаОтгрузки", "ДатаОтгрузки", ИмяТЧ, "ДатаОтгрузкиОбязательна");
		
	#КонецОбласти
	
	// Надпись <спецификация не задана>
	#Область Текст_ПроизводитсяНаЭтапе
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Спецификация"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Производится");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<спецификация не задана>';
																|en = '<bill of materials is not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Запрет редактирования спецификации если не установлен флаг Производится
	#Область Обеспечение_Спецификация_ТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Спецификация"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Производится");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Склад можно выбрать только для товаров
	#Область ТолькоПросмотрСклад
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Склад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	УстановитьУсловноеОформлениеСтатьиКалькуляцииЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов, ПутиКДанным);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеЭкономияМатериаловЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма,
		ПрефиксЭлементов + ИмяТЧ + "НоменклатураЕдиницаИзмерения", 
		ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		ПрефиксЭлементов + ИмяТЧ + "Характеристика",
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма,
		Ложь,
		ПрефиксЭлементов + ИмяТЧ + "Серия",
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий",
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		Форма,
		Ложь,
		ПрефиксЭлементов + ИмяТЧ + "СтатусУказанияСерий",
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий");
	
	#КонецОбласти
	
	// Текст для поля Действия
	#Область Действия
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Действия"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Действия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Передать на склад';
																|en = 'Transfer to warehouse'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Действия"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Действия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на расходы';
																|en = 'Write off as expenses'"));
	#КонецОбласти
	
	// ТолькоПросмотр для поля АналитикаРасходов
	#Область АналитикаРасходов
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "СтатьяРасходов"].Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "АналитикаРасходов"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "АналитикаАктивовПассивов"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "СчетРеглУчетаРасходов"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "СчетРеглУчетаАктивовПассивов"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Назначение не указывается для тары
	#Область Назначение_МногооборотнаяТара
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Обособить"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НадписьНазначение"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется для тары>';
																|en = '<not used for package>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Назначение не указывается при списании на расходы
	#Область Назначение_СписатьНаРасходы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Обособить"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НадписьНазначение"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Подразделение-получатель
	УстановитьУсловноеОформлениеПодразделениеПолучатель(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов, ПутиКДанным);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура(ИмяТЧ));
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(Форма, ИмяТЧ, ТипыСтатей);
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(Форма, ИмяТЧ, ТипыСтатей);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасходМатериаловИРаботЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма,
		ПрефиксЭлементов + ИмяТЧ + "НоменклатураЕдиницаИзмерения", 
		ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		ПрефиксЭлементов + ИмяТЧ + "Характеристика",
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма,
		"СерииВсегдаВТЧТовары",
		ПрефиксЭлементов + ИмяТЧ + "Серия",
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий",
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	
	#КонецОбласти
	
	УстановитьУсловноеОформлениеСтатьиКалькуляцииЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов, ПутиКДанным);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеТрудозатраты(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "") Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Исполнитель"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Выполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПодразделениеПолучатель(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено)

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Получатель совпадает с выпускающим подразделением
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Получатель"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "Подразделение"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Получатель не обязателен к заполнению
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Получатель"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСтатьиКалькуляцииЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено, ЕстьОтменаСтрок = Ложь) Экспорт
	
	// Описание:
	// - статья калькуляции обязательна в статусе Начат и Завершен если строка не отменена.
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "СтатьяКалькуляции"].Имя);
	
	ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Если ЕстьОтменаСтрок Тогда
		
		ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеФиксированнойСтоимостиЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт
	
	// Описание:
	// - цена и сумма для побочных изделий обязательна в статусе Начат и Завершен, если продукция выпущена
	// - цена и сумма для побочных изделий доступна, если продукция выпущена или вид цен не заполнен.
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Цена"].Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Сумма"].Имя);
	
	ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Цена"].Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Сумма"].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ПутиКДанным = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "ЭтапПотребитель"].Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "ЭтапПотребитель"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗаполнитьПолеЭтапПотребитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "ЭтапПотребитель"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗаполнитьПолеЭтапПотребитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Графы

// Возвращает граф этапов производства, представленный в виде списка смежности.
//
// Параметры:
//  ДанныеЗаполнения - РезультатЗапроса	 - данные для заполнения графа.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - Таблица значений, хранящая вершины и ребра графа.
//                        Вершины хранятся как строки таблицы значений,
//                        ребра - как значение одной из колонок.
//
Функция Граф(ДанныеЗаполнения = Неопределено) Экспорт
	
	Типы = Новый Массив;
	Типы.Добавить(Справочники.ТипВсеСсылки());
	Типы.Добавить(Документы.ТипВсеСсылки());
	
	Граф = Новый ТаблицаЗначений();
	Граф.Колонки.Добавить("Ссылка",          Новый ОписаниеТипов(Типы));
	Граф.Колонки.Добавить("Ребра",           Новый ОписаниеТипов("Массив"));
	Граф.Колонки.Добавить("КоличествоРебер", Новый ОписаниеТипов("Число"));
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("РезультатЗапроса") 
		И НЕ ДанныеЗаполнения.Пустой() Тогда
		
		Вершина = Неопределено;
		Выборка = ДанныеЗаполнения.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Вершина = Неопределено
				ИЛИ Вершина.Ссылка <> Выборка.Вершина Тогда
				Вершина = ДобавитьВершинуВСписокСмежности(Граф, Выборка.Вершина);
			КонецЕсли;
			
			Если Выборка.СмежнаяВершина <> null Тогда
				ДобавитьСмежнуюВершинуВСписокСмежности(Вершина, Выборка.СмежнаяВершина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Граф.Индексы.Добавить("Ссылка");
	
	Возврат Граф;
	
КонецФункции

// Выполняет поиск циклов в графе, в качестве алгоритма поиска 
//  используется нерекурсивный обход графа в глубину.
//
// Параметры:
//  Граф - ТаблицаЗначений - см. описание функции Граф()
//  НачалоДуги - ЛюбаяСсылка - вершина (начало дуги, на которой найден цикл)
//  КонецДуги - ЛюбаяСсылка - вершина (конец дуги, на которой найден цикл).
// 
// Возвращаемое значение:
//   - Булево - Истина, если цикл найден.
//
Функция ЕстьЦиклыВГрафе(Граф, НачалоДуги = Неопределено, КонецДуги = Неопределено) Экспорт
	
	Если Граф.Количество() < 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Граф.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Число"));
	Граф.Колонки.Добавить("ИндексСмежнойВершины", Новый ОписаниеТипов("Число"));
	Граф.ЗаполнитьЗначения(-1, "ИндексСмежнойВершины");
	
	ЕстьЦиклы = Ложь;
	
	Белый = 0;
	Серый = 1;
	Черный = 2;
	
	Вершина = Граф[0];
	Вершина.Цвет = Серый;
	
	Стек = Новый Массив;
	Стек.Добавить(Вершина);
	
	Пока Стек.ВГраница() <> -1 И НЕ ЕстьЦиклы Цикл
		
		Вершина = Стек[0];
		
		Если Вершина.ИндексСмежнойВершины + 1 < Вершина.КоличествоРебер Тогда
			
			Для Индекс = Вершина.ИндексСмежнойВершины + 1 По Вершина.КоличествоРебер - 1 Цикл
				
				Вершина.ИндексСмежнойВершины = Индекс;
				
				СмежнаяВершина = Граф.Найти(Вершина.Ребра[Индекс], "Ссылка");
				
				Если СмежнаяВершина.Цвет = Серый Тогда
					
					ЕстьЦиклы  = Истина;
					НачалоДуги = Вершина.Ссылка;
					КонецДуги  = СмежнаяВершина.Ссылка;
					
					Прервать;
					
				ИначеЕсли СмежнаяВершина.Цвет = Белый Тогда
					
					СмежнаяВершина.Цвет = Серый;
					
					Стек.Вставить(0,СмежнаяВершина);
					
					Прервать;
				
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Вершина.Цвет = Черный;
			
			Стек.Удалить(0);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Граф.Колонки.Удалить("Цвет");
	Граф.Колонки.Удалить("ИндексСмежнойВершины");
	
	Возврат ЕстьЦиклы;
	
КонецФункции

// Возвращает окружение вершины.
//
// Параметры:
//  Вершина - СтрокаТаблицыЗначений - строка таблицы значений, см. описание функции Граф().
// 
// Возвращаемое значение:
//   - Массив - Окружение вершины.
//
Функция НайтиОкружениеВершины(Вершина) Экспорт
	
	Результат = Новый Массив;
	
	// Добавим служебное поле для работы алгоритма
	Вершина.Владелец().Колонки.Добавить("Посещена", Новый ОписаниеТипов("Булево"));
	
	ПоискВГлубину(Вершина, Результат);
	
	// Удалим текущую вершину
	Результат.Удалить(Результат.Найти(Вершина.Ссылка));
	
	// Удалим служебное поле
	Вершина.Владелец().Колонки.Удалить("Посещена");
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск в глубину.
//
// Параметры:
//  Вершина		 - СтрокаТаблицыЗначений - строка таблицы значений, см. описание функции Граф().
//  Результат	 - Массив - Посещенные вершины.
//
Процедура ПоискВГлубину(Вершина, Результат) Экспорт
	
	Если Вершина.Посещена Тогда
		Возврат;
	КонецЕсли;
	
	Вершина.Посещена = Истина;
	Результат.Добавить(Вершина.Ссылка);
	
	Для Каждого Ребро Из Вершина.Ребра Цикл
		
		СмежнаяВершина = Вершина.Владелец().Найти(Ребро, "Ссылка");
		ПоискВГлубину(СмежнаяВершина, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает направление обхода графа "Вперед"
// 
// Возвращаемое значение:
//   - Число - направление обхода графа "Вперед".
//
Функция НаправлениеОбходаГрафаВперед() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает направление обхода графа "Назад"
// 
// Возвращаемое значение:
//   - Число - направление обхода графа "Назад".
//
Функция НаправлениеОбходаГрафаНазад() Экспорт
	
	Возврат -1;
	
КонецФункции

// Добавить вершину в список смежности
//
// Параметры:
//  Граф	 - ТаблицаЗначений					 - см. УправлениеПроизводством.Граф()
//  Ссылка	 - ДокументСсылка, СправочникСсылка	 - ссылка на вершину.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - вершина.
//
Функция ДобавитьВершинуВСписокСмежности(Граф, Ссылка) Экспорт
	
	Вершина = Граф.Добавить();
	Вершина.Ссылка = Ссылка;
	Возврат Вершина;
	
КонецФункции

// Добавить смежную вершину в список смежности
//
// Параметры:
//  Вершина	 - СтрокаТаблицыЗначений			 - вершина
//  Ссылка	 - ДокументСсылка, СправочникСсылка	 - ссылка на смежную вершину.
//
Процедура ДобавитьСмежнуюВершинуВСписокСмежности(Вершина, Ссылка) Экспорт
	
	Вершина.Ребра.Добавить(Ссылка);
	Вершина.КоличествоРебер = Вершина.КоличествоРебер + 1;
	
КонецПроцедуры

#КонецОбласти

#Область Запросы

Функция ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса) Экспорт
	
	Возврат СтрСоединить(ТекстыЗапроса, "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|");
			
КонецФункции

#КонецОбласти

#Область СтруктурыДанных

// Структура данных графика производства
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - структура данных.
//
Функция СтруктураДанныхГрафикПроизводства() Экспорт
	
	ПараметрыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОТДата = Новый ОписаниеТипов(Новый ОписаниеТипов("Дата"),,,,, ПараметрыДаты);
	ОТБулево = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	
	Результат.Колонки.Добавить("НачалоЭтапа", ОТДата);
	Результат.Колонки.Добавить("ОкончаниеПредварительногоБуфера", ОТДата);
	Результат.Колонки.Добавить("НачалоЗавершающегоБуфера", ОТДата);
	Результат.Колонки.Добавить("ОкончаниеЭтапа", ОТДата);
	Результат.Колонки.Добавить("НаКритическомПути", ОТБулево);
	Результат.Колонки.Добавить("ОграничиваетСрокВыпуска", ОТБулево);
	
	Результат.Колонки.Добавить("Рассчитан", ОТБулево);
	
	Результат.Индексы.Добавить("Этап");
	
	Возврат Результат;
	
КонецФункции

// Структура данных изделий этапа производства
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - структура данных.
//
Функция СтруктураДанныхИзделияЭтапа() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Результат.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Результат.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));

	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("Получатель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Результат.Колонки.Добавить("Назначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Результат.Колонки.Добавить("ЭтапПотребитель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	Результат.Колонки.Добавить("Упаковка", ОписаниеТипов);
	
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("КоличествоУпаковок");
	
	Возврат Результат;
	
КонецФункции

// Структура данных этапа производства для проверки заполнения
// 
// Возвращаемое значение:
//   - Структура - структура данных.
//
Функция ДанныеЭтаповДляПроверкиЗаполнения() Экспорт
	
	Результат = Новый Структура;
	
	МетаданныеДокумента = Метаданные.Документы.ЭтапПроизводства2_2;
	ОписаниеТипаДокумента = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	// Шапка
	Реквизиты = Новый ТаблицаЗначений;
	Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Реквизиты.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Реквизиты.Колонки.Добавить("Ссылка", ОписаниеТипаДокумента);
	Результат.Вставить("Реквизиты", Реквизиты);
	// ТЧ
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ПобочныеИзделия");
	СписокТЧ.Добавить("ОбеспечениеМатериаламиИРаботами");
	СписокТЧ.Добавить("РасходМатериаловИРабот");
	СписокТЧ.Добавить("ЭкономияМатериалов");
	СписокТЧ.Добавить("Трудозатраты");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		Результат.Вставить("ПроверятьТЧ" + ИмяТЧ, Ложь);
		Результат.Вставить(ИмяТЧ, ТабличнаяЧастьДокументаЭтапПроизводства(ИмяТЧ));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыДокументаЭтапПроизводства() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ЭтапПроизводства2_2;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка", Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	
	Для каждого Реквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
		Реквизиты.Вставить(Реквизит.Имя, Реквизит.Тип.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Реквизиты.Вставить(Реквизит.Имя, Реквизит.Тип.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

Функция ТабличнаяЧастьДокументаЭтапПроизводства(ИмяТЧ) Экспорт
	
	ТабличнаяЧасть = Новый ТаблицаЗначений;
	МетаданныеДокумента = Метаданные.Документы.ЭтапПроизводства2_2;
	ОписаниеТипаДокумента = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Для каждого Реквизит Из МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].СтандартныеРеквизиты Цикл
		ТабличнаяЧасть.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Для каждого Реквизит Из МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
		ТабличнаяЧасть.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	ТабличнаяЧасть.Колонки.Добавить("Ссылка", ОписаниеТипаДокумента);
	Возврат ТабличнаяЧасть;
	
КонецФункции

#КонецОбласти

#Область ОчередьЗаданий

Процедура ОбработатьОчередьЗаданий(Параметры) Экспорт
	
	Очередь = Параметры.Очередь;
	Обработчик = РегистрыСведений[Очередь].ПараметрыОбработки().Обработчик;
	
	ПараметрыОбработчика = Новый Массив(2); // (Задание, ПропуститьЗадание = Ложь)
	
	ОжидатьЗавершениеЗаписиЗаданийВОчередь(Очередь, Параметры.Идентификатор);
	
	Итерация = 1;
	ЗаданияКОбработке = ПолучитьЗаданияИзОчередиДляОбработки(Очередь, Параметры.Отбор);
	
	Пока ЗаданияКОбработке <> Неопределено И Итерация <> 3 Цикл
		
		СписокЗаданий = РегистрыСведений[Очередь].ОчередьЗаданий(ЗаданияКОбработке);
		
		Пока СписокЗаданий.ВГраница() <> - 1 Цикл
			
			ПараметрыОбработчика[0] = СписокЗаданий[0];
			ПараметрыОбработчика[1] = Ложь;
			
			Попытка
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(
					Обработчик,
					ПараметрыОбработчика);
				
			Исключение
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьОшибкуОбработкиОчередиЗаданий(Очередь, ТекстОшибки, СписокЗаданий[0]);
				
			КонецПопытки;
			
			Если ПараметрыОбработчика[1] <> Истина Тогда
				
				РегистрыСведений[Очередь].УдалитьЗадание(СписокЗаданий[0], ЗаданияКОбработке);
				
			КонецЕсли;
			
			СписокЗаданий.Удалить(0);
			
		КонецЦикла;
		
		ЗаданияКОбработке = ПолучитьЗаданияИзОчередиДляОбработки(Очередь);
		Итерация = Итерация + 1
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗаданияИзОчередиДляОбработки(Очередь, Отбор = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ОбрабатываемыеЗадания
	|ИЗ
	|	РегистрСведений.%1 КАК Очередь
	|ГДЕ
	|	%2
	|");
	
	ТекстОтбора = "ИСТИНА";
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		СтрокиОтбора = Новый Массив;
		Для каждого КлючЗначение Из Отбор Цикл
			СтрокиОтбора.Добавить(КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ);
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		ТекстОтбора = СтрСоединить(СтрокиОтбора, " И ");
		
	КонецЕсли;
	Запрос.Текст = СтрШаблон(Запрос.Текст, Очередь, ТекстОтбора);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Выгрузить()[0].Количество = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ОчередьЗаданийПуста(Очередь, Отбор)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.%1 КАК Очередь
	|ГДЕ
	|	%2");
	
	ТекстОтбора = "ИСТИНА";
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		СтрокиОтбора = Новый Массив;
		Для каждого КлючЗначение Из Отбор Цикл
			СтрокиОтбора.Добавить(КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ);
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		ТекстОтбора = СтрСоединить(СтрокиОтбора, " И ");
		
	КонецЕсли;
	Запрос.Текст = СтрШаблон(Запрос.Текст, Очередь, ТекстОтбора);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОжидатьЗавершениеЗаписиЗаданийВОчередь(Очередь, Идентификатор = Неопределено)
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ИмяОчереди = "РегистрСведений." + Очередь;
			
			БлокировкаДанных = Новый БлокировкаДанных;
			
			Если ТипЗнч(Идентификатор) <> Тип("Массив") Тогда
				БлокировкаДанных.Добавить(ИмяОчереди).УстановитьЗначение("Идентификатор", Идентификатор);
			Иначе
				Для каждого ЭлементБлокировки Из Идентификатор Цикл
					БлокировкаДанных.Добавить(ИмяОчереди).УстановитьЗначение("Идентификатор", ЭлементБлокировки);
				КонецЦикла;
			КонецЕсли;
			
			БлокировкаДанных.Заблокировать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ЗаписатьОшибкуОбработкиОчередиЗаданий(Очередь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуОбработкиОчередиЗаданий(Очередь, ТекстОшибки, Задание = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Обработка очереди заданий';
						|en = 'Job queue processing'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ЗначениеЗаполнено(Задание) Тогда
		
		ОписаниеЗадания = Новый Массив;
		Для каждого КлючИЗначение Из Задание Цикл
			ОписаниеЗадания.Добавить(СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
		КонецЦикла;
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка обработки задания :
			|
			|%2
			|
			|%3';
			|en = 'An error occurred while processing the job:
			|
			|%2
			|
			|%3'"), СтрСоединить(ОписаниеЗадания, ";" + Символы.ПС), ТекстОшибки);
		
	Иначе
		ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегистрыСведений[Очередь],
		,
		ОписаниеОшибки);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область ПереработкаДавальческогоСырья

// Используется для заполнения флага "Передать давальцу" в производственных документах,
//  отражающих факт производства давальческой продукции.
//
// Параметры:
//  Коллекция - ТабличнаяЧасть, Массив - Табличная часть документа, либо массив строк табличной части документа,
//                                       содержащие реквизит Назначение и реквизит ПередатьДавальцу.
//
Процедура ЗаполнитьФлагПередатьДавальцуПоНазначениюВКоллекции(Коллекция) Экспорт
	
	Назначения = Новый Массив;
	Для Каждого ТекСтрока Из Коллекция Цикл
		Назначения.Добавить(ТекСтрока.Назначение);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Назначения, Справочники.Назначения.ПустаяСсылка());
	
	СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(Назначения);
	
	Для Каждого Строка Из Коллекция Цикл
		
		СвойстваНазначения = СвойстваНазначений.Получить(Строка.Назначение);
		Строка.ПередатьДавальцу = СвойстваНазначения <> Неопределено И СвойстваНазначения.ЭтоДавальческаяПродукция;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#Область ПереходНаУправлениеПроизводствомВерсии22

Процедура ОтключитьПроизводство21() Экспорт
	
	Константы.ИспользоватьУправлениеПроизводством.Установить(Ложь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Функция ЕстьНезавершенныеОперацииВПроизводстве21() Экспорт
	
	Если КоличествоВыполняющихсяЗаказовНаПроизводство21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоЗаказовМатериаловОжидающихИсполнения21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоРаспоряженийНаОформлениеВыпускаПродукции21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоВыпусковТребующихСписанияЗатрат21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьОстаткиМатериаловИРаботВПроизводстве21() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НезавершенныеПроизводственныеПроцессы21() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КоличествоВыполняющихсяЗаказовНаПроизводство",       КоличествоВыполняющихсяЗаказовНаПроизводство21());
	Результат.Вставить("КоличествоЗаказовМатериаловОжидающихИсполнения",     КоличествоЗаказовМатериаловОжидающихИсполнения21());
	Результат.Вставить("КоличествоРаспоряженийНаОформлениеВыпускаПродукции", КоличествоРаспоряженийНаОформлениеВыпускаПродукции21());
	Результат.Вставить("КоличествоВыпусковТребующихСписанияЗатрат",          КоличествоВыпусковТребующихСписанияЗатрат21());
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоВыполняющихсяЗаказовНаПроизводство21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказНаПроизводство.Ссылка) КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Проведен
		|	И ЗаказНаПроизводство.Статус <> &СтатусЗавершен");
		
	Запрос.УстановитьПараметр("СтатусЗавершен", Перечисления.СтатусыЗаказовНаПроизводство.Закрыт);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;

КонецФункции

Функция КоличествоЗаказовМатериаловОжидающихИсполнения21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказМатериаловВПроизводство.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТРаспоряжения
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство КАК ЗаказМатериаловВПроизводство
		|ГДЕ
		|	ЗаказМатериаловВПроизводство.Проведен
		|	И НЕ ЗаказМатериаловВПроизводство.УправлениеПроизводством2_2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(
		|			,
		|			Распоряжение В
		|				(ВЫБРАТЬ
		|					ТОтбора.Ссылка
		|				ИЗ
		|					ВТРаспоряжения КАК ТОтбора)) КАК Остатки
		|ГДЕ
		|	(Остатки.ЗаказаноОстаток > 0
		|		ИЛИ Остатки.ВРезервеОстаток > 0
		|		ИЛИ Остатки.КОформлениюОстаток > 0)");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция КоличествоРаспоряженийНаОформлениеВыпускаПродукции21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(, ) КАК Остатки
		|ГДЕ
		|	Остатки.КОформлениюОстаток > 0");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция КоличествоВыпусковТребующихСписанияЗатрат21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Остатки(, ) КАК Остатки");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция ЕстьОстаткиМатериаловИРаботВПроизводстве21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Остатки.Организация    КАК Организация,
		|	Остатки.Номенклатура   КАК Номенклатура,
		|	Остатки.Характеристика КАК Характеристика,
		|	Остатки.Подразделение  КАК Подразделение,
		|	Остатки.Серия          КАК Серия,
		|	Остатки.Назначение     КАК Назначение
		|ИЗ
		|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
		|			,
		|			Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|												ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				И Подразделение ССЫЛКА Справочник.СтруктураПредприятия) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток <> 0");
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область Прочее

// Устанавливает дату с учетом переданной отметки
//
// Параметры:
//  Отметка		 - Булево	 - отметка
//  ПолеДата	 - Дата		 - реквизит, в котором нужно установить дату
//  ДатаСобытия	 - Дата		 - устанавливаемая дата
//  Затереть	 - Булево	 - признак, что дату нужно установить принудительно.
//
Процедура УстановитьДатуПоОтметке(Отметка, ПолеДата, ДатаСобытия = Неопределено, Затереть = Ложь) Экспорт
	
	Если ДатаСобытия = Неопределено Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ Отметка И ПолеДата <> '000101010000' Тогда
		ПолеДата  = '000101010000';
	ИначеЕсли Отметка И (ПолеДата = '000101010000' ИЛИ Затереть) Тогда
		ПолеДата = ДатаСобытия;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает используемые виды рабочих центров
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап производства.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ИспользуемыеВидыРабочихЦентров(Объект) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров");
	Результат.Колонки.Добавить("ВидРабочегоЦентра", ОписаниеТипа);
	
	ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени");
	Результат.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипа);
	
	ОписаниеТипа = ОбщегоНазначения.ОписаниеТипаЧисло(10, 1, ДопустимыйЗнак.Неотрицательный);
	Результат.Колонки.Добавить("ВремяРаботы", ОписаниеТипа);
	
	ПараметрыОтбора = Новый Структура("Использовать", Истина);
	
	Для Каждого Строка Из Объект.ВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора) Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора) Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ОтразитьРаспоряженияНаПередачуИзПроизводства(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспоряженияНаПередачуИзПроизводства;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.РаспоряженияНаПередачуИзПроизводства;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

Функция ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, ИмяПоля)
	
	ПутьКДаннымПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПутиКДанным, ИмяПоля, ИмяОбъекта + "." + ИмяПоля);
	Возврат Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
КонецФункции

Процедура ОбновитьПлановыеДатыПоступления(Объект, ПлановаяДатаПоступления, ПредыдущееЗначение) Экспорт
	                                              
	// После ручного изменения графика, необходимо обновить плановые даты производства
	Если Объект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ НЕ Объект.РучноеРазмещениеВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПроизводствоОднойДатой
		И Объект.ДатаПроизводства = ПредыдущееЗначение Тогда
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					Истина, 
					Объект.ДатаПроизводства,
					ПлановаяДатаПоступления,
					Истина);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("Произведено", Ложь);
	СтруктураОтбора.Вставить("ДатаПроизводства", ПредыдущееЗначение);
	
	ИменаТаблиц = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		Для Каждого Строка Из Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора) Цикл
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
						Истина, 
						Строка.ДатаПроизводства,
						ПлановаяДатаПоступления,
						Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
