#Область ПрограммныйИнтерфейс

// Возвращает дату передачи выплаты пособий в ФСС.
//
// Параметры:
//  Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//	Дата
//
Функция ДатаПередачиФССВыплатыПособий(Организация) Экспорт
	Настройки = НастройкиУчетаПособийСоциальногоСтрахования(Организация);
	
	Если Настройки.ПособияВыплачиваютсяСтрахователем
		Или Не ЗначениеЗаполнено(Настройки.ДатаПередачиФССВыплатыПособий) Тогда
		Возврат МаксимальнаяДатаПередачиФССВыплатыПособий();
	КонецЕсли;
	
	Возврат Настройки.ДатаПередачиФССВыплатыПособий;
КонецФункции

// Определяет по статусу является ли объект редактируемым или нет
//
// Параметры
//  Статус - Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.
//
// Возвращаемое значение:
//    Булево - истина, если статус позволяет редактировать документ.
//
Функция СтатусПозволяетРедактироватьДокумент(Статус) Экспорт
	Массив = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.СтатусыПозволяющиеРедактироватьДокументы();
	Возврат Массив.Найти(Статус) <> Неопределено;
КонецФункции

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	СоответствиеСсылокСвойствам = Новый Соответствие;
	ДокументыРеестрыСведений = Новый Массив;
	ДокументыРеестрыДанныхЭЛН = Новый Массив;
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка)  = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий") Тогда
			ДокументыРеестрыСведений.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		ИначеЕсли ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем") Тогда
			ДокументыРеестрыДанныхЭЛН.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыРеестрыСведений.Количество() = 0 И ДокументыРеестрыДанныхЭЛН.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыРеестрыСведений", ДокументыРеестрыСведений);
	Запрос.УстановитьПараметр("ДокументыРеестрыДанныхЭЛН", ДокументыРеестрыДанныхЭЛН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата КАК ДатаСоздания,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Организация,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Организация.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата, ДЕНЬ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата, ДЕНЬ) КАК ДатаОкончания,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Комментарий
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
	|ГДЕ
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка В(&ДокументыРеестрыСведений)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Ссылка,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата КАК ДатаСоздания,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Организация,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Организация.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата, ДЕНЬ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата, ДЕНЬ) КАК ДатаОкончания,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Комментарий
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК РеестрДанныхЭЛНЗаполняемыхРаботодателем
	|ГДЕ
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Ссылка В(&ДокументыРеестрыДанныхЭЛН)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
		ЗапрашиваемыеДанные.ВариантОтчета = "-";
	КонецЦикла;
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность.
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'Пилотный проект ФСС';
													|en = 'SSF pilot project '");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = Неопределено;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.РеестрСведенийВФСС;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'ЭЛН';
													|en = 'ESLR'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = Неопределено;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.РеестрДанныхЭЛНЗаполняемыхРаботодателем;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Функция ЗаголовокГиперссылкиЗаявления(СсылкаОснования) Экспорт
	Заявление = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.НайтиЗаявлениеПоОснованию(СсылкаОснования, , "Представление");
	Если Заявление = Неопределено Тогда
		Возврат НСтр("ru = 'Ввести заявление сотрудника на выплату пособия';
					|en = 'Enter an employee allowance payment request'");
	Иначе
		Возврат Заявление.Представление;
	КонецЕсли;
КонецФункции

Процедура ОбновитьГиперссылкуУведомленияОПрекращенииОтпускаПоУходу(Форма, ИмяГруппы, ИмяРеквизита, Основание, Организация, Сотрудник, ДатаПрекращенияОплаты) Экспорт
	ВидимостьГруппы = Ложь;
	Если Форма.ИспользуетсяРасчетЗарплаты
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования)
		И ПравоДоступа("Чтение", Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком)
		И ПравоДоступа("Чтение", Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия)
		И ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Организация, ДатаПрекращенияОплаты) Тогда
		Менеджер = Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком;
		Уведомление = Менеджер.НайтиУведомлениеПоОснованию(Основание, "Ссылка, Представление");
		Если ЗначениеЗаполнено(Уведомление.Ссылка) Тогда
			Форма[ИмяРеквизита] = Уведомление.Представление;
			ВидимостьГруппы = Истина;
		ИначеЕсли ПравоДоступа("Добавление", Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком)
			И Менеджер.ДанныеОДетях(Уведомление.Ссылка, Сотрудник, ДатаПрекращенияОплаты).Количество() > 0 Тогда
			Форма[ИмяРеквизита] = НСтр("ru = 'Ввести уведомление о прекращении отпуска по уходу за ребенком';
										|en = 'Enter the notification of termination of the child care leave'");
			ВидимостьГруппы = Истина;
		КонецЕсли;
	КонецЕсли;
	Форма.Элементы[ИмяГруппы].Видимость = ВидимостьГруппы;
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеЗаявленийВТаблицеДетей(Форма, ПутьКТаблице, ИмяТаблицы, ИмяКолонки) Экспорт
	
	Если ПутьКТаблице = "" Тогда
		ПутьКПолюОтбора = ИмяТаблицы + "." + ИмяКолонки;
	Иначе
		ПутьКПолюОтбора = ПутьКТаблице + "." + ИмяТаблицы + "." + ИмяКолонки;
	КонецЕсли;
	
	ЭлементУО = ДобавитьЭлементУсловногоОформления(Форма, ИмяТаблицы + ИмяКолонки);
	УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = 'Заявление не введено';
																	|en = 'Application is not entered'"));
	ДобавитьОтборУсловногоОформления(ЭлементУО, ПутьКПолюОтбора, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакВыплачиваетсяФСССуществующихДокументов(МенеджерВременныхТаблиц) Экспорт
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ЗаполнитьПризнакВыплачиваетсяФСССуществующихДокументов(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ДопустимыеЗначенияРайонногоКоэффициента() Экспорт
	
	ДопустимыеЗначенияРайонногоКоэффициента = Новый Массив;
	
	ROWSET 	= КорневойЭлементРеестраПилотногоПроектаФСС();
	ROW 	= ЭлементРеестраПилотногоПроектаФСС(ROWSET);
	ФасетыРК = ROW.Свойства().Получить("KF_REG").Тип.Фасеты.Перечисления;
	
	Для Каждого Фасет Из ФасетыРК Цикл
		Если ПустаяСтрока(Фасет.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПриведенноеЗначение = Число(Фасет.Значение) / 100;
		
		ДопустимыеЗначенияРайонногоКоэффициента.Добавить(ПриведенноеЗначение);
		
	КонецЦикла;
	
	Возврат ДопустимыеЗначенияРайонногоКоэффициента;
	
КонецФункции

Функция КатегорииНачисленийПособийПоПрямымВыплатамФСС() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.КатегорииНачисленийПособийПоПрямымВыплатамФСС();
	
КонецФункции

Функция ПособиеПлатитУчастникПилотногоПроекта(Организация, ПериодРегистрации) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если МаксимальнаяДатаПередачиФССВыплатыПособий() <= ПериодРегистрации Тогда // Прямые выплаты распространились на всю страну.
		Возврат Истина;
	КонецЕсли;
	
	// Получение настроек из регистра.
	Настройки = НастройкиУчетаПособийСоциальногоСтрахования(Организация);
	
	// Установка значений по умолчанию.
	Если Не ЗначениеЗаполнено(Настройки.ДатаПередачиФССВыплатыПособий) Тогда
		Настройки.ДатаПередачиФССВыплатыПособий = ДатаВступленияРегионаОрганизацииВПроектПоПрямымВыплатам(Организация, ПериодРегистрации);
		Если Настройки.ДатаПередачиФССВыплатыПособий = Неопределено Тогда
			Настройки.ДатаПередачиФССВыплатыПособий = МаксимальнаяДатаПередачиФССВыплатыПособий();
		КонецЕсли;
	КонецЕсли;
	
	// Проверка настроек из регистра.
	Возврат Не Настройки.ПособияВыплачиваютсяСтрахователем
		И Настройки.ДатаПередачиФССВыплатыПособий <= ПериодРегистрации;
КонецФункции

Функция ТекстСообщенияЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Организация %1 зарегистрирована в одном из регионов, где в настоящее время проводится Пилотный проект ФСС по непосредственной выплате пособий.
	|Необходимо указать дату вступления в Пилотный проект в учетной политике организации, либо уточнить ИНН и КПП организации.';
	|en = 'The %1 company is registered in one of the regions where SSF pilot project on direct allowance payment is being implemented.
	|Specify the date of joining the pilot project in the company accounting policy or specify TIN and CRTR of the company.'");
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Функция - Проверить выплату пособия участником пилотного проекта ФСС
//
// Параметры:
//  Организация	 - 	СправочникСсылка.Организации - ссылка на организацию выплаты которой проверяются
//  ПериодРегистрации - Дата
//  Пособия		 - 	Таблица значение, колонки: Начисление, Результат.
//
// Возвращаемое значение:
//  ТекстОшибки - строка.
//
Функция ПроверитьОплатуПособийУчастникомПилотногоПроектаФСС(Организация, ПериодРегистрации, Пособия) Экспорт
	
	ТекстОшибки = "";
	
	Если Пособия.Количество() = 0 Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ДатаПередачиФССВыплатыПособий = ДатаПередачиФССВыплатыПособий(Организация);
	
	Если Не ЗначениеЗаполнено(ДатаПередачиФССВыплатыПособий) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если ПериодРегистрации < ДатаПередачиФССВыплатыПособий Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	КатегорииНачисленийПособийПоПрямымВыплатамФСС = КатегорииНачисленийПособийПоПрямымВыплатамФСС();
	Для каждого Пособие Из Пособия Цикл
		ОписаниеНачисления = ЗарплатаКадрыПовтИсп.ПолучитьИнформациюОВидеРасчета(Пособие.Начисление);
		Если КатегорииНачисленийПособийПоПрямымВыплатамФСС.Найти(ОписаниеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено
			И Пособие.Результат > 0 Тогда
			Если ПериодРегистрации < МаксимальнаяДатаПередачиФССВыплатыПособий() Тогда
				ТекстОшибки = НСтр("ru = 'С %1 пособие %2 не может быть начислено в организации - участнике пилотного проекта по прямым выплатам пособий.';
									|en = 'Since %1 allowance %2 cannot be accrued in a company - participant of pilot project for direct allowance payments.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'С %1 пособие %2 не может быть начислено. Выплата пособий передана ФСС.';
									|en = 'Since %1 the grant %2 cannot be accrued. Payment of grants is transferred to FSS.'");
			КонецЕсли;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(ДатаПередачиФССВыплатыПособий, "ДЛФ=D"), Пособие.Начисление);
			Возврат ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Функция подготавливает пустую таблицу для механизма проверки оплаты пособий участником пилотного проекта ФСС.
//
// Возвращаемое значение:
//  Таблица - ТаблицаЗначений
//
Функция ПустаяТаблицаДляПроверкиОплатыПособийУчастникомПилотногоПроектаФСС() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Начисление");
	Таблица.Колонки.Добавить("Результат");

	Возврат Таблица;
	
КонецФункции

#Область ОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.37";
	Обработчик.Процедура = "Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ЗаполнитьТабличнуюЧастьФизическихЛицИНаборыЗначенийДоступа";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.37";
	Обработчик.Процедура = "Документы.ОписьЗаявленийСотрудниковНаВыплатуПособий.ЗаполнитьТабличнуюЧастьФизическихЛицИНаборыЗначенийДоступа";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.130";
	Обработчик.Процедура = "Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ВосстановитьСсылкиВОтправках";
	// оставляем обработчик монопольным из-за небольшого количества данных
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.8";
	Обработчик.Процедура = "ПрямыеВыплатыПособийСоциальногоСтрахования.УстановитьПараметрыНабораСвойствСправочников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1dd222d9-ba86-43d7-a9dc-26b6f25247c3");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников прямых выплат пособий социального страхования';
									|en = 'Setup of parameters for the set of features of directories for direct social security grant payments'");
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСправочников(ПараметрыОбновления = НеОпределено) Экспорт
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_МедицинскиеОрганизации", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Определяет есть ли в массиве начислений пособия оплачиваемые за счет ФСС
//
// Параметры
//  МассивНачислений - массив или список значений содержащий виды расчетов.
//
// Возвращаемое значение:
//    Булево - истина, если в массиве начислений есть пособия за счет ФСС.
//
Функция КоллекцияСодержитПособияЗаСчетФСС(МассивНачислений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&МассивНачислений)
	|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&МассивКатегорий)";
	Запрос.УстановитьПараметр("МассивНачислений", МассивНачислений);
	Запрос.УстановитьПараметр("МассивКатегорий", ПрямыеВыплатыПособийСоциальногоСтрахования.КатегорииНачисленийПособийПоПрямымВыплатамФСС());
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#Область ОбработкаПроверкиЗаполнения

// Проверяет корректность сведений о документе, удостоверяющем личность.
//
// Параметры:
//   Отказ - Булево - Если Истина, то документ не прошел проверку.
//   ДокументОбъект - ДокументОбъект - Объект, в котором указаны сведения.
//   ИменаРеквизитов - Структура - Имена реквизитов объекта со сведениями о документе, удостоверяющем личность.
//
Процедура ПроверитьДокументУдостоверяющийЛичность(Отказ, ДокументОбъект, ИменаРеквизитов) Экспорт
	СоответствиеОшибок = Новый Соответствие;
	ПравилаПроверкиДанныхФизическогоЛица = Новый Массив;
	ФизическиеЛицаЗарплатаКадры.ДобавитьПравилоПроверкиУдостоверенияЛичности(
		ПравилаПроверкиДанныхФизическогоЛица,
		ИменаРеквизитов.ВидДокумента,
		ИменаРеквизитов.СерияДокумента,
		ИменаРеквизитов.НомерДокумента,
		ИменаРеквизитов.ДатаВыдачиДокумента,
		ИменаРеквизитов.КемВыданДокумент,
		НСтр("ru = 'Документ, удостоверяющий личность';
			|en = 'Identity document'"),
		Истина,
		Ложь);
	ДанныеФизическогоЛицаДляПроверки = Новый Структура;
	ДанныеФизическогоЛицаДляПроверки.Вставить("Наименование",                      ДокументОбъект[ИменаРеквизитов.Сотрудник]);
	ДанныеФизическогоЛицаДляПроверки.Вставить("ФизическоеЛицо",                    ДокументОбъект[ИменаРеквизитов.ФизическоеЛицо]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.ВидДокумента,        ДокументОбъект[ИменаРеквизитов.ВидДокумента]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.СерияДокумента,      ДокументОбъект[ИменаРеквизитов.СерияДокумента]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.НомерДокумента,      ДокументОбъект[ИменаРеквизитов.НомерДокумента]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.ДатаВыдачиДокумента, ДокументОбъект[ИменаРеквизитов.ДатаВыдачиДокумента]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.КемВыданДокумент,    ДокументОбъект[ИменаРеквизитов.КемВыданДокумент]);
	ФизическиеЛицаЗарплатаКадры.ПроверитьДанныеФизическогоЛица(
		ДанныеФизическогоЛицаДляПроверки,
		ПравилаПроверкиДанныхФизическогоЛица,
		СоответствиеОшибок);
	Для Каждого КлючИЗначение Из СоответствиеОшибок Цикл
		Для Каждого ОписаниеОшибки Из КлючИЗначение.Значение Цикл
			Если ОписаниеОшибки.ПолеФормы <> "КемВыдан"
				И ОписаниеОшибки.ПолеФормы <> "ДатаВыдачи" Тогда
				ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ОписаниеОшибки.ТекстОшибки, ОписаниеОшибки.ПолеФормы);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Определяет, является ли организация участником проекта прямых выплат
// и, если является, введена ли для этой организации дата передачи в ФСС выплаты пособий.
//
// Параметры
//   Организация - СправочникСсылка.Организации - Организация.
//   ДатаАктуальности - Дата - Дата, на которую проверяется участие в проекте по прямым выплатам.
//
// Возвращаемое значение:
//   Булево - Истина, если на указанную дату организация участвует в пилотном проекте и дата вступления не заполнена.
//            Ложь, если на указанную дату организация или регион не участвуют в пилотном проекте.
//
Функция ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация, ДатаАктуальности) Экспорт
	
	ДатаВступленияРегиона = ДатаВступленияРегионаОрганизацииВПроектПоПрямымВыплатам(Организация, ДатаАктуальности);
	Если ДатаВступленияРегиона = МаксимальнаяДатаПередачиФССВыплатыПособий() 
		Или ДатаАктуальности >= МаксимальнаяДатаПередачиФССВыплатыПособий() Тогда
		Возврат Ложь; // Прямые выплаты распространились на всю страну.
	ИначеЕсли ДатаВступленияРегиона = Неопределено
		Или ДатаВступленияРегиона > ДатаАктуальности Тогда
		Возврат Ложь; // Регион не участвует в пилотном проекте или на указанную дату регион еще не участвовал в проекте.
	КонецЕсли;
	
	// Регион участвует, чтение настроек учета.
	Настройки = НастройкиУчетаПособийСоциальногоСтрахования(Организация);
	Если Настройки.ПособияВыплачиваютсяСтрахователем Тогда
		Возврат Ложь; // Для организации действует особый порядок выплаты пособий (не через ФСС).
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(Настройки.ДатаПередачиФССВыплатыПособий); // Не заполнена дата вступления?
	
КонецФункции

// Возвращает дату вступления региона организации в проект по прямым выплатам.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация.
//
// Возвращаемое значение:
//   Неопределено - Если нет информации о регистрации в налоговом органе в регионе еще не действует проект по прямым выплатам.
//   Дата - Дата вступления региона в проект по прямым выплатам.
//
Функция ДатаВступленияРегионаОрганизацииВПроектПоПрямымВыплатам(Организация, ДатаАктуальности) Экспорт
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаАктуальности);
	Если РегистрацияВНалоговомОргане.Пустая() Тогда
		Возврат Неопределено; // Нет информации о регистрации в налоговом органе.
	КонецЕсли;
	КодыРегионовПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахованияКлиентСервер.КодыРегионовПилотногоПроекта();
	Если ЗарплатаКадры.ЭтоЮридическоеЛицо(Организация) Тогда
		КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
		КодРегиона = Лев(КПП, 2);
	Иначе
		КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");
		КодРегиона = Лев(КодНалоговогоОргана, 2);
	КонецЕсли;
	ДатаРегиона = КодыРегионовПилотногоПроекта[КодРегиона];
	Возврат ?(ЗначениеЗаполнено(ДатаРегиона), ДатаРегиона, МаксимальнаяДатаПередачиФССВыплатыПособий());
КонецФункции

// Возвращает настройки учета пособий социального страхования по организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация.
//
// Возвращаемое значение:
//   Структура - Сведения из регистра НастройкиУчетаПособийСоциальногоСтрахования.
//       * ДатаПередачиФССВыплатыПособий - Дата - Дата передачи выплаты пособий в ФСС.
//       * ПособияВыплачиваютсяСтрахователем - Булево - Истина, если пособия выплачиваются страхователем.
//
Функция НастройкиУчетаПособийСоциальногоСтрахования(Организация)
	Отбор = Новый Структура("Организация", Организация);
	Возврат РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования.Получить(Отбор);
КонецФункции

Функция МаксимальнаяДатаПередачиФССВыплатыПособий()

	Возврат '20210101';

КонецФункции

#Область УсловноеОформлениеФормы

// Добавляет элемент условного оформления в форму.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которую необходимо добавить условное оформление.
//   Поля - Строка - Имена элементов формы, разделенные запятыми, для которых применяется оформление.
//       Например: "Поле1, Поле2".
//
// Возвращаемое значение:
//   ЭлементУсловногоОформленияКомпоновкиДанных - Добавленный элемент.
//
Функция ДобавитьЭлементУсловногоОформления(Форма, Поля)
	ЭлементУсловногоОформленияКД = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияКД.Использование = Истина;
	
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		Поля = СтрРазделить(Поля, ",", Ложь);
	КонецЕсли;
	Для Каждого Поле Из Поля Цикл
		ПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
		ПолеКД.Использование = Истина;
		ПолеКД.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Поле));
	КонецЦикла;
	
	Возврат ЭлементУсловногоОформленияКД;
КонецФункции

// Устанавливает параметр условного оформления.
//
// Параметры:
//   ЭлементУсловногоОформленияКД - ЭлементУсловногоОформленияКомпоновкиДанных - Элемент условного оформления формы.
//   Параметр - Строка - Имя параметра или параметр компоновки данных, значение которого нужно установить.
//   Значение - Произвольный - Значение, которое нужно установить.
//       Имена параметров и их значения см. в синтакс-помощнике: "ОформлениеКомпоновкиДанных", блок "Описание".
//
Процедура УстановитьПараметрУсловногоОформления(ЭлементУсловногоОформленияКД, Параметр, Значение)
	ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных(Параметр),
		Значение);
КонецПроцедуры

// Добавляет отбор элемента условного оформления.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которую необходимо добавить условное оформление.
//   Поле - Строка - Имя поля отбора.
//   ВидСравнения - ВидСравненияКомпоновкиДанных, Строка - Вид сравнения отбора.
//       Если указано значение "=", то используется ВидСравненияКомпоновкиДанных.Равно.
//   Значение - Произвольный - Значение отбора. Необязательный если ВидСравнения = Заполнено или НеЗаполнено.
//
// Возвращаемое значение:
//   ЭлементОтбораКомпоновкиДанных - Добавленный элемент отбора.
//
Функция ДобавитьОтборУсловногоОформления(ЭлементУсловногоОформленияКД, Поле, ВидСравнения, Значение = Неопределено)
	Если ТипЗнч(ВидСравнения) = Тип("ВидСравненияКомпоновкиДанных") Тогда
		ВидСравненияКД = ВидСравнения;
	Иначе
		Если ВидСравнения = "=" Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
		ИначеЕсли ВидСравнения = ">" Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.Больше;
		ИначеЕсли ВидСравнения = ">=" Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ИначеЕсли ВидСравнения = "<" Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.Меньше;
		ИначеЕсли ВидСравнения = "<=" Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный параметр ""ВидСравнения"" = ""%1""';
											|en = 'Unknown parameter ""ВидСравнения"" = ""%1""'"), ВидСравнения);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементОтбораКД = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораКД.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Поле);
	ЭлементОтбораКД.ВидСравнения   = ВидСравненияКД;
	ЭлементОтбораКД.ПравоеЗначение = Значение;
	
	Возврат ЭлементОтбораКД;
КонецФункции

#КонецОбласти

#Область Печать

Функция ДатаВступленияВСилуФорм2017Года() Экспорт
	Возврат '20171229';
КонецФункции

Процедура ВывестиШапкуИПодвалЗаявленияОВозмещении_2012(Макет, Выборка) Экспорт
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(27);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.НаименованиеТерриториальногоОрганаФСС), ДлиныСтрок), Макет, "Наименование_ФСС_", 135);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.ОрганизацияНаименование), ДлиныСтрок), Макет, "ФИО_Заявителя_", 135);
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.РегистрационныйНомерФСС, Макет, "РегистрационныйНомер_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ДополнительныйКодФСС, Макет, "ДополнительныйКод_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КодПодчиненностиФСС, Макет, "КодПодчиненности_", 5);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ИНН, Макет, "ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КПП, Макет, "КПП_", 9);
	
	Если ЗначениеЗаполнено(Выборка.АдресОрганизации) Тогда
		СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(Выборка.АдресОрганизации, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));	
		Если СтруктураАдреса <> Неопределено 
			И СтруктураАдреса.Свойство("Индекс") Тогда
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтруктураАдреса.Индекс, Макет, "АдресРегистрации_", 6);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Регион), Макет, "АдресРегистрации_", 17, 7);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Район), Макет, "АдресРегистрации_", 17, 24);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(?(ЗначениеЗаполнено(СтруктураАдреса.Город), СтруктураАдреса.Город + " " + СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.НаселенныйПункт)), Макет, "АдресРегистрации_", 34, 41);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Улица), Макет, "АдресРегистрации_", 37, 75);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Дом), Макет, "АдресРегистрации_", 8, 112);
			Если ВРег(СтруктураАдреса.ТипКорпуса) = "СТРОЕНИЕ" Тогда
				ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Корпус), Макет, "АдресРегистрации_", 3, 123);
			Иначе
				ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Корпус), Макет, "АдресРегистрации_", 3, 120);
			КонецЕсли;;
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Квартира), Макет, "АдресРегистрации_", 6, 126);
		КонецЕсли;
	КонецЕсли;
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(39);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.НаименованиеБанка), ДлиныСтрок), Макет, "НаименованиеБанка_", 78);
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.НомерСчета, Макет, "НомерСчета_", 20);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.БИКБанка, Макет, "БИК_", 9);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.НомерЛицевогоСчета, Макет, "ЛицСчет_", 12);
	
	Если ЗначениеЗаполнено(Выборка.ТелефонСоставителя) Тогда
		СтруктураТелефона = УправлениеКонтактнойИнформацией.СведенияОТелефоне(Выборка.ТелефонСоставителя);
		Телефон = СтрЗаменить(СтруктураТелефона.КодГорода, "-", "") + СтрЗаменить(СтруктураТелефона.НомерТелефона, "-", "");
		Телефон = СтрЗаменить(Телефон, " ", ""); 
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(Телефон, Макет, "ТелефонСоставителя_", 10);
	КонецЕсли;
	Макет.Параметры.ДолжностьРуководителя = "" + Выборка.ДолжностьРуководителя;
	Макет.Параметры.ФИОРуководителя = "" + Выборка.ФИОРуководителя;
	
КонецПроцедуры

Процедура ВывестиШапкуИПодвалЗаявленияОВозмещении_2017(Макет, Выборка) Экспорт
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(27);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.НаименованиеТерриториальногоОрганаФСС), ДлиныСтрок), Макет, "Наименование_ФСС_", 135);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.ОрганизацияНаименование), ДлиныСтрок), Макет, "ФИО_Заявителя_", 135);
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.РегистрационныйНомерФСС, Макет, "РегистрационныйНомер_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ДополнительныйКодФСС, Макет, "ДополнительныйКод_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КодПодчиненностиФСС, Макет, "КодПодчиненности_", 5);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ИНН, Макет, "ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КПП, Макет, "КПП_", 9);
	
	Если ЗначениеЗаполнено(Выборка.АдресОрганизации) Тогда
		СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(Выборка.АдресОрганизации, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));	
		Если СтруктураАдреса <> Неопределено 
			И СтруктураАдреса.Свойство("Индекс") Тогда
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтруктураАдреса.Индекс, Макет, "АдресРегистрации_", 6);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Регион), Макет, "АдресРегистрации_", 37, 7);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Район), Макет, "АдресРегистрации_", 37, 24);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(?(
				ЗначениеЗаполнено(СтруктураАдреса.Город),
				СтруктураАдреса.Город + " " + СтруктураАдреса.НаселенныйПункт,
				СтруктураАдреса.НаселенныйПункт)), Макет, "АдресРегистрации_", 34, 81);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Улица), Макет, "АдресРегистрации_", 37, 115);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Дом), Макет, "АдресРегистрации_", 7, 152);
			Если ВРег(СтруктураАдреса.ТипКорпуса) = "СТРОЕНИЕ" Тогда
				ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Корпус), Макет, "АдресРегистрации_", 3, 162);
			Иначе
				ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Корпус), Макет, "АдресРегистрации_", 3, 159);
			КонецЕсли;;
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Квартира), Макет, "АдресРегистрации_", 5, 165);
		КонецЕсли;
	КонецЕсли;
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(39);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.НаименованиеБанка), ДлиныСтрок), Макет, "НаименованиеБанка_", 78);
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.НомерСчета, Макет, "НомерСчета_", 20);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.БИКБанка, Макет, "БИК_", 9);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.НомерЛицевогоСчета, Макет, "ЛицСчет_", 12);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КБК, Макет, "КБК_", 20);
	
	Если ЗначениеЗаполнено(Выборка.ТелефонСоставителя) Тогда
		СтруктураТелефона = УправлениеКонтактнойИнформацией.СведенияОТелефоне(Выборка.ТелефонСоставителя);
		Телефон = СтрЗаменить(СтруктураТелефона.КодГорода, "-", "") + СтрЗаменить(СтруктураТелефона.НомерТелефона, "-", "");
		Телефон = СтрЗаменить(Телефон, " ", ""); 
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(Телефон, Макет, "ТелефонСоставителя_", 10);
	КонецЕсли;
	Макет.Параметры.ДолжностьРуководителя = "" + Выборка.ДолжностьРуководителя;
	Макет.Параметры.ФИОРуководителя = "" + Выборка.ФИОРуководителя;
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(СокрЛП(Выборка.АдресЭлектроннойПочтыОрганизации), Макет, "АдресЭлектроннойПочты_", 28);
КонецПроцедуры

#КонецОбласти

#Область ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов

Функция ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Документ, ОплатаДнейУходаЗаДетьмиИнвалидами = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Документ, ОплатаДнейУходаЗаДетьмиИнвалидами);
	
КонецФункции

Функция ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов();
	
КонецФункции

Функция ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ИспользуетсяЗаполнениеДокументаЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов();
	
КонецФункции

#КонецОбласти

#Область ЗаявлениеВФССОВозмещенииРасходовНаПогребение

Функция ДанныеЗаполненияЗаявленияВФССОВозмещенииРасходовНаПогребение(Организация, Ссылка, ЕдиновременноеПособие = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДанныеЗаполненияЗаявленияВФССОВозмещенииРасходовНаПогребение(Организация, Ссылка, ЕдиновременноеПособие);
	
КонецФункции

Функция ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииРасходовНаПогребение() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииРасходовНаПогребение();
	
КонецФункции

Функция ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииРасходовНаПогребение() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииРасходовНаПогребение();
	
КонецФункции

#КонецОбласти

#Область ЗаявлениеСотрудникаНаВыплатуПособия

Функция БанковскиеРеквизитыСотрудникаДляВыплатыЗарплаты(Дата, Организация, Сотрудник, ФизическоеЛицо) Экспорт
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.БанковскиеРеквизитыСотрудникаДляВыплатыЗарплаты(Дата, Организация, Сотрудник, ФизическоеЛицо);
КонецФункции

Процедура ПередЗаписьюБольничного(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПометкаУдаленияСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "ПометкаУдаления");
	Если ДокументОбъект.ПометкаУдаления = ПометкаУдаленияСсылки Тогда
		Возврат; // Пометка удаления не изменилась.
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Заявление = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.НайтиЗаявлениеПоОснованию(ДокументОбъект.Ссылка, , "Ссылка, ПометкаУдаления");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Заявление <> Неопределено И Заявление.ПометкаУдаления <> ДокументОбъект.ПометкаУдаления Тогда
		
		Если Не ПравоДоступа("Изменение", Заявление.Ссылка.Метаданные()) Тогда
			ТекстОшибки = НСтр("ru = '%1 - недостаточно прав для изменения пометки удаления,
				|поскольку на его основании введено заявление сотрудника на выплату пособия.';
				|en = '%1 - insufficient rights to change the deletion mark
				|as employee application for allowance payment was entered on its basis.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОбъект.Ссылка);
			ЗафиксироватьОтказЗаписи(Отказ, Неопределено, ТекстОшибки, ДокументОбъект.Ссылка);
		КонецЕсли;
		
		ЗаявлениеОбъект = Заявление.Ссылка.ПолучитьОбъект();
		Попытка
			ЗаявлениеОбъект.Заблокировать();
			ЗаявлениеОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
		Исключение
			Если ДокументОбъект.ПометкаУдаления Тогда
				ТекстОшибки = НСтр("ru = 'При установке пометки удаления документа ""%1""
					|не удалось пометить на удаление документ ""%2""';
					|en = 'Cannot mark the ""%2"" document for deletion when setting a deletion mark for the ""%1"" document
					| '");
			Иначе
				ТекстОшибки = НСтр("ru = 'При снятии пометки удаления документа ""%1""
					|не удалось снять пометку удаления документа ""%2""';
					|en = 'Cannot clear a deletion mark for the ""%2"" document
					|when clearing a deletion mark for the ""%1"" document'");
			КонецЕсли;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОбъект.Ссылка, Заявление.Ссылка);
			ЗафиксироватьОтказЗаписи(Отказ, ИнформацияОбОшибке(), ТекстОшибки, ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОтказЗаписи(Отказ, ИнформацияОбОшибке, ТекстОшибки, Ссылка)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Кратко   = ТекстОшибки + ":" + Символы.ПС + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке) + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.';
																																				|en = 'See details in log.'");
		Подробно = ТекстОшибки + ":" + Символы.ПС + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписьЖурналаРегистрации(
			УчетПособийСоциальногоСтрахованияКлиентСервер.НаименованиеПодсистемы(Неопределено),
			УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(),
			Ссылка,
			Подробно);
	Иначе
		Кратко = ТекстОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(Кратко, Символы.ПС, " "), Ссылка, , , Отказ);
	
	ВызватьИсключение Кратко;
КонецПроцедуры

Функция РеестрПоЗаявлению(Заявление) Экспорт
	
	Реестр = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реестры.Ссылка,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СтатусДокумента
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК Реестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
	|		ПО Реестры.Ссылка = РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка
	|ГДЕ
	|	Реестры.Заявление = &Заявление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Ссылка,
	|	ОписьЗаявленийСотрудниковНаВыплатуПособий.СтатусДокумента
	|ИЗ
	|	Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий.Заявления КАК ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий КАК ОписьЗаявленийСотрудниковНаВыплатуПособий
	|		ПО ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Ссылка = ОписьЗаявленийСотрудниковНаВыплатуПособий.Ссылка
	|ГДЕ
	|	ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Заявление = &Заявление";
	Запрос.УстановитьПараметр("Заявление", Заявление);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Реестр = Новый Структура("Реестр, СтатусДокумента", Выборка.Ссылка, Выборка.СтатусДокумента);
	КонецЕсли;
	
	Возврат Реестр;
	
КонецФункции

Функция РайонныйКоэффициентРФПодразделенияОрганизацииДляЗаявленияСотрудникаНаВыплатуПособия(Организация, Подразделение = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.РайонныйКоэффициентРФПодразделенияОрганизацииДляЗаявленияСотрудникаНаВыплатуПособия(Организация, Подразделение);
	
КонецФункции

// Функция находит вид на жительство или разрешение на проживание для физлица
Функция ДокументРазрешениеНаПроживаниеФизическогоЛица(ФизическоеЛицо, Дата) Экспорт
	
	СтруктураПолейДокумента  = Новый Структура("ВидДокумента, Серия, Номер, ДатаВыдачи");
	СтруктураПолейДокумента.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	СтруктураПолейДокумента.Серия = "";
	СтруктураПолейДокумента.Номер = "";
	СтруктураПолейДокумента.ДатаВыдачи = '00010101';
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ВидыДокументовФизическихЛиц.КодМВД КАК КодМВД,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, Физлицо = &ФизическоеЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка
	|			И (ВидыДокументовФизическихЛиц.КодМВД = ""12""
	|				ИЛИ ВидыДокументовФизическихЛиц.КодМВД = ""15"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодМВД";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПолейДокумента, Выборка);
	КонецЕсли;
	
	Возврат	 СтруктураПолейДокумента
	
КонецФункции

Функция ТипДокументаОснованияЗаявленияСотрудникаНаВыплатуПособия(Заявление) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ТипДокументаОснованияЗаявленияСотрудникаНаВыплатуПособия(Заявление);
	
КонецФункции

Функция СписокДетейПоУходуЗаКоторымиПредоставленОтпуск(ДокументОснование) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.СписокДетейПоУходуЗаКоторымиПредоставленОтпуск(ДокументОснование);
	
КонецФункции

Функция ВидПособияИмеетДокументОснование(ВидПособия) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ВидПособияИмеетДокументОснование(ВидПособия);
	
КонецФункции

Функция ДоляРабочегоВремениСотрудника(Сотрудник, Дата) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДоляРабочегоВремениСотрудника(Сотрудник, Дата);
	
КонецФункции

Процедура ДобавитьКомандыПечатиЗаявленияСотрудникаНаВыплатуПособия(КомандыПечати) Экспорт

	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДобавитьКомандыПечатиЗаявленияСотрудникаНаВыплатуПособия(КомандыПечати);

КонецПроцедуры

Функция КодыПричинИсправления(КодыПричин = Неопределено) Экспорт
	Если ТипЗнч(КодыПричин) = Тип("СписокЗначений") Тогда
		Список = КодыПричин;
	Иначе
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Список.Добавить("01", НСтр("ru = 'Представлены дополнительные сведения о выплатах в расчетном периоде';
								|en = 'Additional information about payments in payroll period is submitted'"));
	Список.Добавить("02", НСтр("ru = 'Поступление от застрахованного лица заявления о замене одного года или двух лет расчетного периода предшествующими годами';
								|en = 'Receipt of an application from an insured person for replacement of one or two years of the payroll period with the previous years'"));
	Список.Добавить("03", НСтр("ru = 'По результатам документальной выездной (камеральной) проверки';
								|en = 'Based on the results of documentary field tax inspection'"));
	Список.Добавить("04", НСтр("ru = 'Перерасчет листка нетрудоспособности при признании несчастного случая на производстве страховым';
								|en = 'Recalculation of sick leave record if industrial accident is considered insurable'"));
	Список.Добавить("05", НСтр("ru = 'Перерасчет листка нетрудоспособности в случае ошибки в расчете работодателя';
								|en = 'Recalculation of sick leave record in case of employer calculation error'"));
	Список.Добавить("06", НСтр("ru = 'Иное';
								|en = 'Other'"));
	
	Для Каждого Элемент Из Список Цикл
		Элемент.Представление = Элемент.Значение + ". " + Элемент.Представление;
	КонецЦикла;
	
	Возврат Список;
КонецФункции

#КонецОбласти

#Область РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий

Функция ЗапросРеестраПрямыхВыплатПоПервичнымДокументам(Объект, ТаблицаОснований, ИмяВТ) Экспорт
	Если Не ЗначениеЗаполнено(Объект.ВидРеестра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",           Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("ВидРеестра",       Объект.ВидРеестра);
	Запрос.УстановитьПараметр("ДатаНачалаАктуальности", ДобавитьМесяц(Объект.Дата, -6));
	Запрос.УстановитьПараметр("ТаблицаОснований", ТаблицаОснований);
	
	ПриОпределенииЗапросаРеестраПрямыхВыплатПоПервичнымДокументам(Запрос, Объект, ТаблицаОснований);
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрНайти(Запрос.Текст, "ВТУчтенныеЗаявления") > 0 Тогда
		СоздатьВТУчтенныеЗаявления(Запрос);
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Если ИмяВТ <> Неопределено Тогда
		ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		ПоследнийЗапрос.ТаблицаДляПомещения = ИмяВТ;
	ИначеЕсли ТаблицаОснований = Неопределено Тогда
		ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		ПоследнийЗапрос.Порядок.Добавить("Заявления.ФамилияПолучателя");
		ПоследнийЗапрос.Порядок.Добавить("Заявления.ИмяПолучателя");
		ПоследнийЗапрос.Порядок.Добавить("Заявления.ОтчествоПолучателя");
		ПоследнийЗапрос.Порядок.Добавить("Заявления.Дата");
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Запрос;
КонецФункции

Процедура ПриОпределенииЗапросаРеестраПрямыхВыплатПоПервичнымДокументам(Запрос, Объект, ТаблицаОснований)
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ПриОпределенииЗапросаРеестраПрямыхВыплатПоПервичнымДокументам(Запрос, Объект, ТаблицаОснований);
	
КонецПроцедуры

Процедура СоздатьВТУчтенныеЗаявления(Запрос)
	ИсходныйТекстЗапроса = Запрос.Текст;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСведений.Заявление КАК Заявление,
	|	ТаблицаСведений.ПервичныйДокумент КАК ПервичныйДокумент
	|ПОМЕСТИТЬ ВТУчтенныеЗаявления
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК ТаблицаСведений
	|ГДЕ
	|	ТаблицаСведений.Ссылка.Дата >= &ДатаНачалаАктуальности
	|	И ТаблицаСведений.Ссылка <> &Ссылка
	|	И ТаблицаСведений.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = ИсходныйТекстЗапроса;
КонецПроцедуры

#КонецОбласти

#Область РаботаСXDTO

Функция URIПространстваИменРеестровФСС()
	Возврат "http://pilot.fss.ru/1.7";
КонецФункции

Функция КорневойЭлементРеестраПилотногоПроектаФСС() Экспорт
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИменРеестровФСС());
	ТипROWSET = ПакетXDTO.КорневыеСвойства.Получить("ROWSET").Тип;
	Возврат ФабрикаXDTO.Создать(ТипROWSET);
КонецФункции

Функция ЭлементРеестраПилотногоПроектаФСС(КорневойXDTOЭлемент) Экспорт
	
	ТипROW = КорневойXDTOЭлемент.Свойства().Получить("ROW").Тип;
	
	Возврат ФабрикаXDTO.Создать(ТипROW);
	
КонецФункции

Функция СписокЭлементовРеестраПилотногоПроектаФСС(ROWSET) Экспорт
	
	Возврат ROWSET["ROW"];
	
КонецФункции

Функция ЗаписатьРеестрВСтрокуXML(ROWSET) Экспорт
	
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML();
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, ROWSET, "ROWSET");
	СтрокаXML = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML);
	
	Возврат СтрокаXML;
	
КонецФункции

Процедура УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML) Экспорт
	
	АтрибутXMLNS = "xmlns=""" + URIПространстваИменРеестровФСС() + """";
	СтрокаXML = СтрЗаменить(СтрокаXML, АтрибутXMLNS, "");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
