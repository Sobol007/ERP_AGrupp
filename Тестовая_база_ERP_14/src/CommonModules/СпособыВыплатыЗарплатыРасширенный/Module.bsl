////////////////////////////////////////////////////////////////////////////////
// Способы выплаты зарплаты.
// Процедуры и функции объекта и менеджера.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыеОписанияПоставляемых() Экспорт
	Описания = Новый ТаблицаЗначений;
	Описания.Колонки.Добавить("ИмяПредопределенныхДанных", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));
	Описания.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Для Каждого Реквизит Из Метаданные.Справочники.СпособыВыплатыЗарплаты.Реквизиты Цикл
		Если СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;	
		Описания.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Возврат Описания
КонецФункции

Функция ДобавитьОписаниеПоставляемого(Описания) Экспорт
	Описание = Описания.Добавить();
	
	Описание.Поставляемый = Истина;
	Описание.Округление = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	Описание.ПроцентВыплаты = 100;
	
	Возврат Описание
КонецФункции

Функция ОписанияПоставляемых() Экспорт
	
	Описания = НовыеОписанияПоставляемых();
	
	Описание = ДобавитьОписаниеПоставляемого(Описания);
	Описание.Наименование            = НСтр("ru = 'Аванс';
											|en = 'Advance'");
	Описание.ХарактерВыплаты         = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
	Описание.СпособПолучения         = Перечисления.СпособыПолученияЗарплатыКВыплате.Аванс;
	Описание.ГруппаВидовДоговоров    = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	Описание.ОкончательныйРасчетНДФЛ = Ложь;
	
	Описание = ДобавитьОписаниеПоставляемого(Описания);
	Описание.ИмяПредопределенныхДанных = "Зарплата";
	Описание.Наименование              = НСтр("ru = 'Зарплата за месяц';
												|en = 'Salary per month'");
	Описание.ХарактерВыплаты           = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.СпособПолучения           = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
	Описание.ГруппаВидовДоговоров      = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	Описание.ОкончательныйРасчетНДФЛ   = Истина;
	
	Описание = ДобавитьОписаниеПоставляемого(Описания);
	Описание.Наименование            = НСтр("ru = 'Зарплата работников и служащих';
											|en = 'Salary of workers and employees'");
	Описание.ХарактерВыплаты         = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.СпособПолучения         = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
	Описание.ГруппаВидовДоговоров    = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.РаботникиСлужащие;
	Описание.ОкончательныйРасчетНДФЛ = Истина;
	
	Описание = ДобавитьОписаниеПоставляемого(Описания);
	Описание.Наименование            = НСтр("ru = 'Вознаграждение сотрудникам по договорам ГПХ';
											|en = 'Remuneration to employees under civil law contracts'");
	Описание.ХарактерВыплаты         = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.СпособПолучения         = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
	Описание.ГруппаВидовДоговоров    = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ПоДоговорамГПХ;
	Описание.ОкончательныйРасчетНДФЛ = Истина;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ОписаниеПоставляемыхОтпусковИБольничныхПодРасчет(), 
		Описания); 
		
	Описание = ДобавитьОписаниеПоставляемого(Описания);
	Описание.Наименование            = НСтр("ru = 'Начисление зарплаты';
											|en = 'Salary accounting'");
	Описание.ХарактерВыплаты         = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.СпособПолучения         = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
	Описание.ВидДокументаОснования   = Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты;
	Описание.ГруппаВидовДоговоров    = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	Описание.ОкончательныйРасчетНДФЛ = Истина;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			Модуль.СпособыВыплатыЗарплатыОписанияПоставляемых(), 
			Описания); 
	КонецЕсли;
	
	МежрасчетныеВыплаты = Новый Соответствие;
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.БольничныйЛист,                    НСтр("ru = 'Больничные листы';
																															|en = 'Sick leave records'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ВозвратНДФЛ,                       НСтр("ru = 'Возврат НДФЛ';
																															|en = 'PIT return'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ЕдиновременноеПособиеЗаСчетФСС,    НСтр("ru = 'Единовременные пособия за счет ФСС';
																															|en = 'One-time allowances out of SSF funds'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Командировка,                      НСтр("ru = 'Командировки';
																															|en = 'Business trips'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.КомпенсацияЗаЗадержкуЗарплаты,     НСтр("ru = 'Компенсации за задержку зарплаты';
																															|en = 'Compensations for late payment of salary'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.МатериальнаяПомощь,                НСтр("ru = 'Материальная помощь';
																															|en = 'Support payment'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты,                НСтр("ru = 'Доначисление';
																															|en = 'Additional accrual '"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами, НСтр("ru = 'Оплата дней ухода за детьми-инвалидами';
																															|en = 'Payment for disabled child care days '"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОплатаПоСреднемуЗаработку,         НСтр("ru = 'Отсутствие с сохранением оплаты';
																															|en = 'Paid absence'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Отпуск,                            НСтр("ru = 'Отпуска';
																															|en = 'Leaves'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком,           НСтр("ru = 'Отпуска по уходу за ребенком';
																															|en = 'Child care leaves'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Премия,                            НСтр("ru = 'Премии';
																															|en = 'Bonuses'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ПростойСотрудников,                НСтр("ru = 'Простои';
																															|en = 'Downtime'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.РазовоеНачисление,                 НСтр("ru = 'Разовые начисления';
																															|en = 'One-time accruals'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Увольнение,                        НСтр("ru = 'Увольнения';
																															|en = 'Terminations of employment'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеПоДоговорам,             НСтр("ru = 'Начисления по договорам';
																															|en = 'Accruals under contracts'"));

	ВидыДокументовСОкончательнымРасчетом = Новый Массив;
	ВидыДокументовСОкончательнымРасчетом.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком);
	ВидыДокументовСОкончательнымРасчетом.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Увольнение);
	
	ДоступныеВидыДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ДоступныеПоМетаданным();	
	Для Каждого МежрасчетнаяВыплата Из МежрасчетныеВыплаты Цикл
		
		Если ДоступныеВидыДокументаОснования.Найти(МежрасчетнаяВыплата.Ключ) = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		Описание = ДобавитьОписаниеПоставляемого(Описания);
		Описание.Наименование = МежрасчетнаяВыплата.Значение;
		Описание.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;	
		Если ВидыДокументовСОкончательнымРасчетом.Найти(МежрасчетнаяВыплата.Ключ) <> Неопределено Тогда
			Описание.СпособПолучения         = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
			Описание.ОкончательныйРасчетНДФЛ = Истина;
		Иначе	
			Описание.СпособПолучения         = Перечисления.СпособыПолученияЗарплатыКВыплате.ОтдельныйРасчет;
			Описание.ОкончательныйРасчетНДФЛ = Ложь;
		КонецЕсли;	
		Описание.ВидДокументаОснования   = МежрасчетнаяВыплата.Ключ;
		Описание.ГруппаВидовДоговоров    = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
		
	КонецЦикла;	
	
	Возврат Описания;
			
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

/// Обработчики обновления

Процедура НачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	СпособыВыплатыЗарплаты.ХарактерВыплаты КАК ХарактерВыплаты,
	|	СпособыВыплатыЗарплаты.СпособПолучения КАК СпособПолучения,
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования КАК ВидДокументаОснования,
	|	СпособыВыплатыЗарплаты.ГруппаВидовДоговоров КАК ГруппаВидовДоговоров,
	|	СпособыВыплатыЗарплаты.ОкончательныйРасчетНДФЛ КАК ОкончательныйРасчетНДФЛ
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Поставляемый";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = КлючПоставляемых();
	Для Каждого ОписаниеПоставляемого Из ОписанияПоставляемых() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеПоставляемого);
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпособВыплатыОбъект.ПометкаУдаления = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ОписаниеПоставляемого.ИмяПредопределенныхДанных) Тогда
				Предопределенный = 
					ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты." + ОписаниеПоставляемого.ИмяПредопределенныхДанных);
				СпособВыплатыОбъект	= Предопределенный.ПолучитьОбъект();
			Иначе	
				СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
			КонецЕсли	
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеПоставляемого,, "ИмяПредопределенныхДанных");
		
		СпособВыплатыОбъект.Записать();
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПризнакПоставляемый() Экспорт
	
	// Предопределенный элемент по определению поставляемый.
	СпособВыплатыСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты.Зарплата");
	СпособВыплатыОбъект = СпособВыплатыСсылка.ПолучитьОбъект();
	Если НЕ СпособВыплатыОбъект.Поставляемый Тогда
		СпособВыплатыОбъект.Поставляемый = Истина;
		СпособВыплатыОбъект.Записать();
	КонецЕсли;	
	
	// Выбираем не помеченные как поставляемые.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	СпособыВыплатыЗарплаты.ХарактерВыплаты КАК ХарактерВыплаты,
	|	СпособыВыплатыЗарплаты.СпособПолучения КАК СпособПолучения,
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования КАК ВидДокументаОснования,
	|	СпособыВыплатыЗарплаты.ГруппаВидовДоговоров КАК ГруппаВидовДоговоров,
	|	СпособыВыплатыЗарплаты.ОкончательныйРасчетНДФЛ КАК ОкончательныйРасчетНДФЛ
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	НЕ СпособыВыплатыЗарплаты.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = КлючПоставляемых();
	СтруктураПоиска.Вставить("Поставляемый");
	
	Для Каждого ОписаниеПоставляемого Из ОписанияПоставляемых() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеПоставляемого);
		
		// Проверяем наличие поставляемого.
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			// Если такой поставляемый уже есть - ничего делать не надо.
			Продолжить;
		КонецЕсли;	
		
		// Ищем такой же, но без признака поставляемых.
		СтруктураПоиска.Поставляемый = Ложь;
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпособВыплатыОбъект.Поставляемый = Истина;
			СпособВыплатыОбъект.Записать();
		КонецЕсли;	
		
	КонецЦикла	
	
КонецПроцедуры

Процедура ДобавитьВыплатуОтпускаПоУходуЗаРебенком() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &ОтпускПоУходуЗаРебенком
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("ОтпускПоУходуЗаРебенком", Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеОтпускаПоУходуЗаРебенком = 
			ОписанияПоставляемых().Найти(
				Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком, 
				"ВидДокументаОснования");
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеОтпускаПоУходуЗаРебенком,, "ИмяПредопределенныхДанных");
		СпособВыплатыОбъект.ОбменДанными.Загрузка = Истина;
		СпособВыплатыОбъект.Записать();
		
	КонецЕсли	
	
КонецПроцедуры	

Процедура УстановитьХарактерВыплатыОкончательныхРасчетовПоОснованию() Экспорт

	// Выбираем способы выплаты с основаниями, подразумевающими окончательный расчет.
	
	ВидыДокументовСОкончательнымРасчетом = Новый Массив;
	ВидыДокументовСОкончательнымРасчетом.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком);
	ВидыДокументовСОкончательнымРасчетом.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Увольнение);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДокументовСОкончательнымРасчетом", ВидыДокументовСОкончательнымРасчетом);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования В(&ВидыДокументовСОкончательнымРасчетом)
	|	И СпособыВыплатыЗарплаты.ХарактерВыплаты <> ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		 СпособВыплаты = Выборка.Ссылка.ПолучитьОбъект();
		 
		 СпособВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		 
		 СпособВыплаты.ОбменДанными.Загрузка = Истина;
		 СпособВыплаты.Записать()
		 
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьАванс() Экспорт
	
	// Выбираем авансовые способы выплаты, не являющиеся Авансом
	ОписаниеАванса = 
		ОписанияПоставляемых().Найти(
			Перечисления.ХарактерВыплатыЗарплаты.Аванс, "ХарактерВыплаты"); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	СпособыВыплатыЗарплаты.Наименование КАК Наименование,
	|	СпособыВыплатыЗарплаты.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Поставляемый
	|	И СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)";
	УстаревшиеАвансы = Запрос.Выполнить().Выгрузить();
	
	СтрокаАванса = УстаревшиеАвансы.Найти(ОписаниеАванса.Наименование, "Наименование");
	Если СтрокаАванса = Неопределено Тогда
		// Если нет Аванса, то создаем
		СпособВыплатыАванс = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыАванс, ОписаниеАванса,, "ИмяПредопределенныхДанных");
		СпособВыплатыАванс.Записать();
	Иначе
		// Если Аванс есть, то запоминаем, а остальные - устаревшие
		СпособВыплатыАванс = СтрокаАванса.Ссылка;
		Если СтрокаАванса.ПометкаУдаления Тогда
			ЭлементСправочника = СтрокаАванса.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;	
		УстаревшиеАвансы.Удалить(СтрокаАванса);
	КонецЕсли;	
	
	// Ищем ведомости с устаревшими авансами
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УстаревшиеАвансы", УстаревшиеАвансы.ВыгрузитьКолонку("Ссылка"));
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.СпособВыплаты В(&УстаревшиеАвансы)";
	
	ТипыВедомостей = Новый Массив;
	ТипыВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПолноеИмя());
	ТипыВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПолноеИмя());
	ТипыВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ПолноеИмя());
	ТипыВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ПолноеИмя());
	
	ЗапросыВедомостей = Новый Массив;
	Для Каждого ТипВедомости Из ТипыВедомостей Цикл
		ТекстЗапросаПоТипуВедомости = СтрЗаменить(ШаблонЗапроса, "#Ведомость", ТипВедомости);
		ЗапросыВедомостей.Добавить(ТекстЗапросаПоТипуВедомости);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ЗапросыВедомостей, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	ВыборкаВедомостей = Запрос.Выполнить().Выбрать();
	
	// Заменяем в ведомостях устаревшие авансовые способы выплаты на Аванс
	Пока ВыборкаВедомостей.Следующий() Цикл
		
		Ведомость = ВыборкаВедомостей.Ссылка.ПолучитьОбъект();
		Ведомость.СпособВыплаты = СпособВыплатыАванс.Ссылка;
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла;	
	
	// Удаляем устаревшие авансовые способы выплаты
	Для Каждого УстаревшийАванс Из УстаревшиеАвансы Цикл
		Если НЕ УстаревшийАванс.ПометкаУдаления Тогда
			ЭлементСправочника = УстаревшийАванс.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.УстановитьПометкуУдаления(Истина);
		КонецЕсли	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ДобавитьВыплатуДоначисления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &НачислениеЗарплаты
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("НачислениеЗарплаты", Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеДоначисления = 
			ОписанияПоставляемых().Найти(
				Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты, 
				"ВидДокументаОснования");
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеДоначисления,, "ИмяПредопределенныхДанных");
		СпособВыплатыОбъект.ОбменДанными.Загрузка = Истина;
		СпособВыплатыОбъект.Записать();
		
	КонецЕсли	
	
КонецПроцедуры	

Процедура ДобавитьВыплатуКомпенсацииЗадержкиЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &КомпенсацияЗаЗадержкуЗарплаты
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("КомпенсацияЗаЗадержкуЗарплаты", Перечисления.ВидыДокументовМежрасчетныхНачислений.КомпенсацияЗаЗадержкуЗарплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеКомпенсации = 
			ОписанияПоставляемых().Найти(
				Перечисления.ВидыДокументовМежрасчетныхНачислений.КомпенсацияЗаЗадержкуЗарплаты, 
				"ВидДокументаОснования");
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеКомпенсации,, "ИмяПредопределенныхДанных");
		СпособВыплатыОбъект.ОбменДанными.Загрузка = Истина;
		СпособВыплатыОбъект.Записать();
		
	КонецЕсли	
	
КонецПроцедуры	

Процедура ДобавитьВыплатуНачисленияПоДоговорам(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &НачислениеПоДоговорам
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("НачислениеПоДоговорам", Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеПоДоговорам);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеНачисленияПоДоговорам = 
			ОписанияПоставляемых().Найти(
				Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеПоДоговорам,
				"ВидДокументаОснования");
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеНачисленияПоДоговорам,, "ИмяПредопределенныхДанных");
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
		
	КонецЕсли
	
КонецПроцедуры

Процедура ДобавитьВыплатуОтпусковИБольничныхПодРасчет(ПараметрыОбновления = НеОпределено) Экспорт
	
	Описания = ОписаниеПоставляемыхОтпусковИБольничныхПодРасчет();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОписаниеПоставляемых", Описания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОписаниеПоставляемых.ХарактерВыплаты КАК ХарактерВыплаты,
	|	ОписаниеПоставляемых.ВидДокументаОснования КАК ВидДокументаОснования
	|ПОМЕСТИТЬ ВТПоставляемые
	|ИЗ
	|	&ОписаниеПоставляемых КАК ОписаниеПоставляемых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Поставляемые.ХарактерВыплаты КАК ХарактерВыплаты,
	|	Поставляемые.ВидДокументаОснования КАК ВидДокументаОснования
	|ИЗ
	|	ВТПоставляемые КАК Поставляемые
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|		ПО Поставляемые.ХарактерВыплаты = СпособыВыплатыЗарплаты.ХарактерВыплаты
	|			И Поставляемые.ВидДокументаОснования = СпособыВыплатыЗарплаты.ВидДокументаОснования
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОписаниеДобавляемых = Описания.СкопироватьКолонки();
	Если Не РезультатЗапроса.Пустой() Тогда
		ПараметрыОтбора = Новый Структура("ХарактерВыплаты, ВидДокументаОснования");
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
			ЗаполнитьЗначенияСвойств(ОписаниеДобавляемых.Добавить(), Описания.НайтиСтроки(ПараметрыОтбора)[0]);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьПоОписаниям(ОписаниеДобавляемых, ПараметрыОбновления)	
		
КонецПроцедуры

Процедура ЗаполнитьГруппуВидовДоговоров(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ГруппаВидовДоговоров = ЗНАЧЕНИЕ(Перечисление.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);		
		
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпособВыплатыОбъект.ГруппаВидовДоговоров = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
		КонецЦикла;		
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьВыплатыДенежногоДовольствияЗарплатыШтатнымВознагражденийДоговорникам(ПараметрыОбновления = НеОпределено) Экспорт
	
	ДобавитьПоОписаниям(
		ОписанияПоставляемых(), 
		ПараметрыОбновления)	
		
КонецПроцедуры

Процедура УстановитьМежрасчетныйПорядокВыплатыПриОкончательномРасчетеПоОснованиям(ПараметрыОбновления = Неопределено) Экспорт 
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	// Условие на пустой СпособПолучения нужен на случай, если в отложенном режиме этот обработчик запустится раньше,
	// чем обработчик заполнения реквизита СпособПолучения в БЗКБ.
	// См. Справочники.СпособыВыплатыЗарплаты.ЗаполнитьСпособПолученияЗарплатыКВыплате
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	(СпособыВыплатыЗарплаты.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет)
	|			ИЛИ СпособыВыплатыЗарплаты.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияЗарплатыКВыплате.ПустаяСсылка))
	|	И СпособыВыплатыЗарплаты.ВидДокументаОснования <> ЗНАЧЕНИЕ(Перечисление.ВидыДокументовМежрасчетныхНачислений.ПустаяСсылка)
	|	И СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)";
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.Справочники.СпособыВыплатыЗарплаты);
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	Иначе
		ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	КонецЕсли;	

	ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
	Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
		
		ОписаниеБлокировки.ПоляБлокировки.Ссылка = ВыборкаОбновляемыхДанных.Ссылка;
		Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
			Возврат	
		КонецЕсли;
		
		СпособВыплаты = ВыборкаОбновляемыхДанных.Ссылка.ПолучитьОбъект();
		СпособВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
		Если Не ЗначениеЗаполнено(СпособВыплаты.СпособПолучения) Тогда
			СпособВыплаты.СпособПолучения = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
			СпособВыплаты.ОкончательныйРасчетНДФЛ = Истина;
		КонецЕсли;	
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплаты);
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);			
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВыплатуНачисленияЗарплаты(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &НачислениеЗарплаты
	|	И СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("НачислениеЗарплаты", Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить(
			"ВидДокументаОснования", 
			Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты);
		ПараметрыОтбора.Вставить(
			"ХарактерВыплаты", 
			Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
		ОписаниеНачисленияЗарплаты = ОписанияПоставляемых().НайтиСтроки(ПараметрыОтбора)[0];
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеНачисленияЗарплаты,, "ИмяПредопределенныхДанных");
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
		
	КонецЕсли
	
КонецПроцедуры

/// Служебные методы

Процедура ДобавитьПоОписаниям(Знач Описания, Знач ПараметрыОбновления = НеОпределено)
	
	ОписанияДобавляемых = ДобавитьПоОписаниямКОбработке(Описания);
	
	Если ОписанияДобавляемых.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		ДобавитьПоОписаниямОбработать(ОписанияДобавляемых)
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьПоОписаниямКОбработке(Описания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОписаниеПоставляемых", Описания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОписаниеПоставляемых.ХарактерВыплаты КАК ХарактерВыплаты,
	|	ОписаниеПоставляемых.СпособПолучения КАК СпособПолучения,
	|	ОписаниеПоставляемых.ВидДокументаОснования КАК ВидДокументаОснования,
	|	ОписаниеПоставляемых.ГруппаВидовДоговоров КАК ГруппаВидовДоговоров,
	|	ОписаниеПоставляемых.ОкончательныйРасчетНДФЛ КАК ОкончательныйРасчетНДФЛ
	|ПОМЕСТИТЬ ВТПоставляемые
	|ИЗ
	|	&ОписаниеПоставляемых КАК ОписаниеПоставляемых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Поставляемые.ХарактерВыплаты КАК ХарактерВыплаты,
	|	Поставляемые.СпособПолучения КАК СпособПолучения,
	|	Поставляемые.ВидДокументаОснования КАК ВидДокументаОснования,
	|	Поставляемые.ГруппаВидовДоговоров КАК ГруппаВидовДоговоров,
	|	Поставляемые.ОкончательныйРасчетНДФЛ КАК ОкончательныйРасчетНДФЛ
	|ИЗ
	|	ВТПоставляемые КАК Поставляемые
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|		ПО Поставляемые.ХарактерВыплаты = СпособыВыплатыЗарплаты.ХарактерВыплаты
	|			И Поставляемые.СпособПолучения = СпособыВыплатыЗарплаты.СпособПолучения
	|			И Поставляемые.ВидДокументаОснования = СпособыВыплатыЗарплаты.ВидДокументаОснования
	|			И Поставляемые.ГруппаВидовДоговоров = СпособыВыплатыЗарплаты.ГруппаВидовДоговоров
	|			И Поставляемые.ОкончательныйРасчетНДФЛ = СпособыВыплатыЗарплаты.ОкончательныйРасчетНДФЛ
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОписаниеДобавляемых = Описания.СкопироватьКолонки();
	Если Не РезультатЗапроса.Пустой() Тогда
		ПараметрыОтбора = КлючПоставляемых();
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
			ЗаполнитьЗначенияСвойств(ОписаниеДобавляемых.Добавить(), Описания.НайтиСтроки(ПараметрыОтбора)[0]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеДобавляемых
	
КонецФункции	

Процедура ДобавитьПоОписаниямОбработать(ОписаниеДобавляемых)
	
	Для Каждого ОписаниеЭлемента Из ОписаниеДобавляемых Цикл
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеЭлемента,, "ИмяПредопределенныхДанных");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
	КонецЦикла	
	
КонецПроцедуры

Функция ОписаниеПоставляемыхОтпусковИБольничныхПодРасчет()
	
	Описания = НовыеОписанияПоставляемых();
	
	Описание = ДобавитьОписаниеПоставляемого(Описания);
	Описание.Наименование            = НСтр("ru = 'Отпуска (под расчет)';
											|en = 'Leaves (for calculation)'");
	Описание.ХарактерВыплаты         = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	Описание.СпособПолучения         = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
	Описание.ВидДокументаОснования   = Перечисления.ВидыДокументовМежрасчетныхНачислений.Отпуск;
	Описание.ГруппаВидовДоговоров    = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	Описание.ОкончательныйРасчетНДФЛ = Истина;
     	
	Описание = ДобавитьОписаниеПоставляемого(Описания);
	Описание.Наименование            = НСтр("ru = 'Больничные листы (под расчет)';
											|en = 'Sick leave records (for calculation)'");
	Описание.ХарактерВыплаты         = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	Описание.СпособПолучения         = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
	Описание.ВидДокументаОснования   = Перечисления.ВидыДокументовМежрасчетныхНачислений.БольничныйЛист;
	Описание.ГруппаВидовДоговоров    = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	Описание.ОкончательныйРасчетНДФЛ = Истина;
	
	Возврат Описания
	
КонецФункции	

Функция КлючПоставляемых()
	Возврат Новый Структура("ХарактерВыплаты, СпособПолучения, ВидДокументаОснования, ГруппаВидовДоговоров, ОкончательныйРасчетНДФЛ")
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийОбъекта

Процедура ОбработкаПроверкиЗаполнения(СпособВыплаты, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ЗначениеЗаполнено(СпособВыплаты.ВидДокументаОснования) Тогда
		
		ДоступныеВидыДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ДоступныеПоМетаданным();

		Если ДоступныеВидыДокументаОснования.Найти(СпособВыплаты.ВидДокументаОснования) = Неопределено Тогда
			ТекстОшибки = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ ""%1"" недоступен в этой конфигурации';
						|en = 'The ""%1"" document is not available in this configuration'"), 
					СпособВыплаты.ВидДокументаОснования);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				СпособВыплаты.Ссылка, 
				"ВидДокументаОснования",
				, 
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийМенеджера

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	ДоступныеВидыДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ДоступныеПоФункциональнымОпциям();
	ДоступныеГруппыВидовДоговоров   = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ДоступныеПоФункциональнымОпциям();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеВидыДокументаОснования", ДоступныеВидыДокументаОснования);
	Запрос.УстановитьПараметр("ДоступныеГруппыВидовДоговоров",   ДоступныеГруппыВидовДоговоров);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				И СпособыВыплатыЗарплаты.ВидДокументаОснования = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовМежрасчетныхНачислений.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Вес
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	НЕ СпособыВыплатыЗарплаты.ПометкаУдаления
	|	И (СпособыВыплатыЗарплаты.ВидДокументаОснования = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовМежрасчетныхНачислений.ПустаяСсылка)
	|			ИЛИ СпособыВыплатыЗарплаты.ВидДокументаОснования В (&ДоступныеВидыДокументаОснования))
	|	И (СпособыВыплатыЗарплаты.ГруппаВидовДоговоров = ЗНАЧЕНИЕ(Перечисление.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ПустаяСсылка)
	|			ИЛИ СпособыВыплатыЗарплаты.ГруппаВидовДоговоров В (&ДоступныеГруппыВидовДоговоров))
	|	И &ПараметрыОтбора
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вес,
	|	СпособыВыплатыЗарплаты.Наименование";
	
	УсловияОтбора = Новый Массив;
	Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
		ИмяПараметра = "Отбор" + ЭлементОтбора.Ключ;
		Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.Значение);
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
			УсловияОтбора.Добавить(СтрШаблон("СпособыВыплатыЗарплаты.%1 В (&%2)", ЭлементОтбора.Ключ, ИмяПараметра));
		Иначе
			УсловияОтбора.Добавить(СтрШаблон("СпособыВыплатыЗарплаты.%1 = &%2", ЭлементОтбора.Ключ, ИмяПараметра));
		КонецЕсли; 
	КонецЦикла;
	Если УсловияОтбора.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрыОтбора", "ИСТИНА");
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрыОтбора", СтрСоединить(УсловияОтбора, " И "));
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти
