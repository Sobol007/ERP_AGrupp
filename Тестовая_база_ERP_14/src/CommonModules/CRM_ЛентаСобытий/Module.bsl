
#Область ПрограммныйИнтерфейс

Функция НастройкиЛенты(Знач Пользователь) Экспорт
	
	ЗначенияНастроек = Новый Структура;
	ЗначенияНастроек.Вставить("ИспользоватьБП",			ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы"));
	ЗначенияНастроек.Вставить("ИспользоватьКП",			ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам"));
	ЗначенияНастроек.Вставить("ИспользоватьСофтФон",	ПолучитьФункциональнуюОпцию("сфпИспользоватьСофтФон"));
	ЗначенияНастроек.Вставить("ИспользоватьЧаты",		ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами"));
	ЗначенияНастроек.Вставить("ИспользоватьSMS",		ОтправкаSMS.НастройкаОтправкиSMSВыполнена());
	ЗначенияНастроек.Вставить("ВремяВСрокахЗадач",		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"));
	
	ДоступныеУчетныеЗаписи = Новый СписокЗначений;
	CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(ДоступныеУчетныеЗаписи,, Пользователь);
	ЗначенияНастроек.Вставить("ДоступнаПочта",			ДоступныеУчетныеЗаписи.Количество() > 0);
	
	Возврат ЗначенияНастроек;
	
КонецФункции

Процедура НастроитьЛенту(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Предварительная инициализация.
	Форма.БыстрыйВвод_ТекущийТипОбъекта = "Примечание";
	
	Элементы.ОбычныйВвод_ПоказатьЕще.Заголовок = НСтр("ru = 'Еще'") + " " + Символ(9660);
	
	Форма.Лента_HTML = CRM_ЛентаСобытийПовтИсп.ТекстЗаглушкиЛенты();
	
	ШаблонКартинки = Документы.CRM_Интерес.ПолучитьМакет("Лента_Картинки");
	Форма.Лента_АдресКартинок = ПоместитьВоВременноеХранилище(Новый Картинка(ШаблонКартинки), Форма.УникальныйИдентификатор);
	
	Форма.Лента_КартинкаФильтрАктивный = БиблиотекаКартинок.CRM_ФильтрАктивный;
	Форма.Лента_КартинкаФильтрНеактивный = БиблиотекаКартинок.CRM_ФильтрНеАктивный;
	
	Форма.Лента_КоличествоОбъектовИстории = 50;
	
	// Отборы - создание элементов
	Для Сч = 1 По Форма.Лента_Отбор.Количество()-1 Цикл
		Элементы.Удалить(Элементы["Лента_Отбор"+Сч]);
	КонецЦикла;
	Форма.Лента_Отбор.Очистить();
	
	НастройкиОтбора = CRM_ЛентаСобытийПовтИсп.ОтборыОбъектовЛенты(Форма.Лента_ЗначенияНастроек);
	Для Каждого НастройкаОтбора Из НастройкиОтбора Цикл
		НоваяНастройка = Форма.Лента_Отбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяНастройка, НастройкаОтбора);
	КонецЦикла;
	
	Для Сч = 1 По Форма.Лента_Отбор.Количество()-1 Цикл
		
		ГруппаОтбора = Элементы.Добавить("Лента_Отбор"+Сч, Тип("ГруппаФормы"), Элементы.Лента_СписокОтборов);
		ГруппаОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаОтбора.Высота = 1;
		ГруппаОтбора.РастягиватьПоВертикали = Ложь;
		ГруппаОтбора.ОтображатьЗаголовок = Ложь;
		
		ПометкаОтбора = Элементы.Добавить("Лента_Отбор"+Сч+"Пометка", Тип("ПолеФормы"), ГруппаОтбора);
		ПометкаОтбора.Вид = ВидПоляФормы.ПолеФлажка;
		ПометкаОтбора.ПутьКДанным = "Лента_Отбор["+Сч+"].Пометка";
		ПометкаОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПометкаОтбора.УстановитьДействие("ПриИзменении", "Лента_ОтборПриИзменении");
		
		ПредставлениеОтбора = Элементы.Добавить("Лента_Отбор"+Сч+"Представление", Тип("ПолеФормы"), ГруппаОтбора);
		ПредставлениеОтбора.Вид = ВидПоляФормы.ПолеНадписи;
		ПредставлениеОтбора.ПутьКДанным = "Лента_Отбор["+Сч+"].Представление";
		ПредставлениеОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПредставлениеОтбора.Ширина = 10;
		ПредставлениеОтбора.РастягиватьПоГоризонтали = Ложь;
		ПредставлениеОтбора.Высота = 1;
		ПредставлениеОтбора.РастягиватьПоВертикали = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОбъектБыстрыйВвод(Знач Режим, Знач ТипОбъекта, Знач ДанныеЗаполнения) Экспорт
	
	Если ТипОбъекта = "Примечание" Тогда
		
		ЗаметкаОбъект = Справочники.Заметки.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ЗаметкаОбъект, ДанныеЗаполнения);
		
		ФорматированныйТекст = Новый ФорматированныйДокумент;
		ФорматированныйТекст.УстановитьHTML(ДанныеЗаполнения.ТекстСодержания, Новый Структура);
		Содержание = Новый ХранилищеЗначения(ФорматированныйТекст, Новый СжатиеДанных(9));
		ЗаметкаОбъект.Содержание = Содержание;
		
		ЗаметкаОбъект.Записать();
		
	ИначеЕсли ТипОбъекта = "Взаимодействие" Тогда
		
		ДокументОбъект = Документы.CRM_Взаимодействие.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		Если ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
			НоваяСтрока = ДокументоБъект.СторонниеЛица.Добавить();
			НоваяСтрока.Партнер = ДокументОбъект.Партнер;
			НоваяСтрока.КонтактноеЛицо = ДокументОбъект.КонтактноеЛицо;
			НоваяСтрока.ПосетитМероприятие = 2;
		КонецЕсли;
		ДокументОбъект.Записать();
		
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		
		ЗадачаОбъект = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ДанныеЗаполнения);
		ЗадачаОбъект.Записать();
		
	ИначеЕсли ТипОбъекта = "Письмо" Тогда
		
		CRM_ЛентаСобытий.СоздатьЭлектронноеПисьмоВФормеИнтереса(Режим, ДанныеЗаполнения);
		
	ИначеЕсли ТипОбъекта = "Чат" Тогда
		
		СообщениеСсылка = CRM_РаботаСМессенджерамиСервер.ОтправитьСообщение(
			ДанныеЗаполнения.Содержание,
			ДанныеЗаполнения.УчетнаяЗапись,
			ДанныеЗаполнения.Группа,
			ДанныеЗаполнения.Адрес,
			?(ЗначениеЗаполнено(ДанныеЗаполнения.Получатель), ДанныеЗаполнения.Получатель, ДанныеЗаполнения.ПредставлениеПолучателя),
			Новый СписокЗначений);
			
			Если Режим = "ЛентаИнтереса" И ЗначениеЗаполнено(СообщениеСсылка) Тогда
				
				ТаблицаСвязей = Новый ТаблицаЗначений;
				ТаблицаСвязей.Колонки.Добавить("Ссылка");
				ТаблицаСвязей.Колонки.Добавить("СостояниеИнтереса");
				ТаблицаСвязей.Колонки.Добавить("ВведенНаОсновании");
				ТаблицаСвязей.Колонки.Добавить("ОсновнойИнтерес");
				
				НоваяСтрока = ТаблицаСвязей.Добавить();
				НоваяСтрока.Ссылка = ДанныеЗаполнения.ДокументОснование;
				НоваяСтрока.СостояниеИнтереса = ДанныеЗаполнения.СостояниеИнтереса;
				НоваяСтрока.ВведенНаОсновании = Ложь;
				НоваяСтрока.ОсновнойИнтерес = Истина;
				
				СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
				СообщениеОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
				СообщениеОбъект.Записать();
				
			КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьЛенту(Знач ПараметрыЛенты, ПолучателиЧата = Неопределено) Экспорт
	
	Если ПараметрыЛенты.Пустая Тогда
		Возврат CRM_ЛентаСобытийПовтИсп.ТекстЗаглушкиЛенты();
	КонецЕсли;
	
	// Получатели чата для области ввода заполняются по итогам формирования ленты.
	ЗаполнитьПолучателейЧата = Ложь;
	Если ПолучателиЧата <> Неопределено Тогда
		ЗаполнитьПолучателейЧата = Истина;
		ПолучателиЧатаТаблица = Новый ТаблицаЗначений;
		ПолучателиЧатаТаблица.Колонки.Добавить("Идентификатор",);
		ПолучателиЧатаТаблица.Колонки.Добавить("Адрес",);
		ПолучателиЧатаТаблица.Колонки.Добавить("Представление");
		ПолучателиЧатаТаблица.Колонки.Добавить("Контакт");
		ПолучателиЧатаТаблица.Колонки.Добавить("УчетнаяЗапись");
		ПолучателиЧатаТаблица.Колонки.Добавить("Группа");
	КонецЕсли;
	
	// Отборы и параметры формирования.
	ВключенныеТипыОбъектов = ТипыОбъектовЛентыПоОтбору(ПараметрыЛенты.Отбор);
	ВключеныПрочие = ВключеныПрочиеДокументыЛентыПоОтбору(ПараметрыЛенты.Отбор);
	Если ВключеныПрочие Тогда
		ПрочиеТипыОбъектов = CRM_ЛентаСобытийПовтИсп.ПрочиеТипыОбъектовЛенты();
	Иначе
		ПрочиеТипыОбъектов = Новый Массив;
	КонецЕсли;
	
	Прокрутить = ПараметрыЛенты.Прокрутить;
	ВывестиОбъектовИстории = ПараметрыЛенты.ОбъектовИстории;
	ВыведеноОбъектовИстории = 0;
	ВсегоОбъектовИстории = 0;
	
	ПараметрыЗапросаЛенты = Новый Структура;
	ПараметрыЗапросаЛенты.Вставить("Режим",					ПараметрыЛенты.Режим);
	ПараметрыЗапросаЛенты.Вставить("ВключенаИстория",		ВключенаИсторияЛентыПоОтбору(ПараметрыЛенты.Отбор));
	ПараметрыЗапросаЛенты.Вставить("ВключеныПримечания",	ВключеныПримечанияЛентыПоОтбору(ПараметрыЛенты.Отбор));
	ПараметрыЗапросаЛенты.Вставить("ОбъектовИстории",		ПараметрыЛенты.ОбъектовИстории);
	
	Запрос = Новый Запрос;
	Запрос.Текст = CRM_ЛентаСобытийПовтИсп.ТекстЗапросаДанныхЛенты(ПараметрыЗапросаЛенты);
	
	Запрос.Параметры.Вставить("ТекущаяДата",			ТекущаяДатаСеанса());
	Запрос.Параметры.Вставить("Объект",					ПараметрыЛенты.Объект);
	Запрос.Параметры.Вставить("ВключенныеТипыОбъектов",	ВключенныеТипыОбъектов);
	Запрос.Параметры.Вставить("ПрочиеТипыОбъектов",		ПрочиеТипыОбъектов);
	
	// Получение данных.
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатЗапросаКоличество = РезультатЗапроса[5];
	Если Не РезультатЗапросаКоличество.Пустой() Тогда
		ВыборкаКоличество = РезультатЗапросаКоличество.Выбрать();
		ВыборкаКоличество.Следующий();
		ВсегоОбъектовИстории = ВыборкаКоличество.Количество;
	КонецЕсли;
	РезультатЗапросаОбъекты = РезультатЗапроса[6];
	Если РезультатЗапросаОбъекты.Пустой() Тогда
		Возврат CRM_ЛентаСобытийПовтИсп.ТекстЗаглушкиЛенты();
	КонецЕсли;
	
	ШаблонЛенты = CRM_ЛентаСобытийПовтИсп.ТекстШаблонаЛенты();
	ШаблонЛенты = СтрЗаменить(ШаблонЛенты, "SPRITE_URL", ПараметрыЛенты.АдресКартинок);
	
	ЧтениеHTML = Новый ЧтениеHTML;
	
	ЧтениеHTML.УстановитьСтроку(ШаблонЛенты);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	// Параметры вывода объектов.
	СекундВСутках = 86400;
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	ДатаВчера = ДатаСегодня - СекундВСутках;
	ДатаЗавтра = ДатаСегодня + СекундВСутках;
	ТекущийГод = Год(ДатаСегодня);
	
	ДатаБезВремениПредыдущая = Дата("00010101");
	ПредставлениеДня = "";
	
	ТипОбъектаПредыдущий = "";
	БлокОбъектПредыдущий = Неопределено;
	РазделПредыдущий = 0;
	
	СчетчикГруппировки = 0;
	ВыведенЗаголовокЗапланировано = Ложь;
	
	БлокОбложкаЛенты = ДокументHTML.ПолучитьЭлементПоИдентификатору("wrapper");
	БлокРодительОбъекта = БлокОбложкаЛенты;
	НадписьПоказать = Неопределено;
	НадписьСкрыть = Неопределено;
	
	// Вывод сделан так исходя из необходимости вывести ленту за один обход выборки без итогов и группировок.
	ВыборкаОбъекты = РезультатЗапросаОбъекты.Выбрать();
	Пока ВыборкаОбъекты.Следующий() Цикл
		
		ДатаБезВремени = ВыборкаОбъекты.ДатаБезВремени;
		ТипОбъекта = ВыборкаОбъекты.Тип;
		Раздел = ВыборкаОбъекты.Раздел;
		
		// Вывод заголовка с датой или надписью "Запланировано".
		Если Раздел = 0 И Не ВыведенЗаголовокЗапланировано Тогда
			БлокЗапланировано = ДокументHTML.СоздатьЭлемент("div");
			БлокЗапланировано.УстановитьАтрибут("class", "interest__title");
			БлокЗапланировано.ТекстовоеСодержимое = НСтр("ru = 'Запланировано'");
			БлокОбложкаЛенты.ДобавитьДочерний(БлокЗапланировано);
			ВыведенЗаголовокЗапланировано = Истина;
		КонецЕсли;
		
		Если ДатаБезВремени <> ДатаБезВремениПредыдущая Или Раздел <> РазделПредыдущий Тогда
			
			Если ВыборкаОбъекты.ДатаБезВремени = ДатаСегодня Тогда
				ПредставлениеДня = НСтр("ru = 'Сегодня'");
			ИначеЕсли ВыборкаОбъекты.ДатаБезВремени = ДатаВчера Тогда
				ПредставлениеДня = НСтр("ru = 'Вчера'");
			ИначеЕсли ВыборкаОбъекты.ДатаБезВремени = ДатаЗавтра Тогда
				ПредставлениеДня = НСтр("ru = 'Завтра'");
			Иначе
				Если ВыборкаОбъекты.Год = ТекущийГод Тогда
					ПредставлениеДня = ТРег(Формат(ДатаБезВремени, "ДФ='d MMMM'"));
				Иначе
					ПредставлениеДня = ТРег(Формат(ДатаБезВремени, "ДФ='d MMMM yyyy'"));
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаОбъекты.Раздел = 1 Тогда
				БлокПериод = ДокументHTML.СоздатьЭлемент("div");
				БлокПериод.УстановитьАтрибут("class", "interest__title");
				БлокПериод.ТекстовоеСодержимое = ПредставлениеДня;
				БлокОбложкаЛенты.ДобавитьДочерний(БлокПериод);
			КонецЕсли;
			
		КонецЕсли;
		
		// Добавление якоря для прокрутки документа при выводе.
		Если Прокрутить И ВыведеноОбъектовИстории = ВывестиОбъектовИстории - 50 Тогда
			ЭлементЯкорь = ДокументHTML.СоздатьЭлемент("a");
			ЭлементЯкорь.УстановитьАтрибут("id", "scrollmore");
			БлокОбложкаЛенты.ДобавитьДочерний(ЭлементЯкорь);
			ДокументHTML.Тело.УстановитьАтрибут("onload", "scrollToElement()");
		КонецЕсли;
		
		// Получение данных для заполнения объекта ленты.
		ДанныеОбъекта = СтруктураОбъектаЛенты();
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ВыборкаОбъекты);
		ПредставлениеВремени = Формат(ДанныеОбъекта.Дата, "ДФ=HH:mm");
		Если ТипОбъекта = "ЗадачаПланов" Тогда
			ДанныеОбъекта.ПредставлениеДаты = ПредставлениеДня + НСтр("ru = ' до '") + ПредставлениеВремени;
		ИначеЕсли ТипОбъекта = "ВзаимодействиеПланов" Тогда
			ДанныеОбъекта.ПредставлениеДаты = ПредставлениеДня + " " + ПредставлениеВремени;
		ИначеЕсли ТипОбъекта = "ЗадачаИстории" Тогда
			ДанныеОбъекта.ПредставлениеДаты = НСтр("ru = 'До '") + ПредставлениеВремени;
		Иначе
			ДанныеОбъекта.ПредставлениеДаты = ПредставлениеВремени;
		КонецЕсли;
		
		// Определение родителя объекта - группа однотипных объектов или корневой контейнер ленты.
		Если ТипОбъекта <> ТипОбъектаПредыдущий Или ДатаБезВремени <> ДатаБезВремениПредыдущая Тогда
			Если СчетчикГруппировки > 2 Тогда
				Если НадписьПоказать <> Неопределено Тогда
					НадписьПоказать.ТекстовоеСодержимое = ТекстКомандыСкрытьРазвернуть(ТипОбъектаПредыдущий, СчетчикГруппировки-1, Истина) + " ";
				КонецЕсли;
				Если НадписьПоказать <> Неопределено Тогда
					НадписьСкрыть.ТекстовоеСодержимое = ТекстКомандыСкрытьРазвернуть(ТипОбъектаПредыдущий, СчетчикГруппировки-1, Ложь) + " ";
				КонецЕсли;
			КонецЕсли;
			Если ВыборкаОбъекты.Группировка Тогда
				БлокГруппаОбъектов = ДокументHTML.СоздатьЭлемент("div");
				БлокГруппаОбъектов.УстановитьАтрибут("class", "interest__group");
				БлокОбложкаЛенты.ДобавитьДочерний(БлокГруппаОбъектов);
				БлокРодительОбъекта = БлокГруппаОбъектов;
			Иначе
				БлокРодительОбъекта = БлокОбложкаЛенты;
			КонецЕсли;
			СчетчикГруппировки = 0;
		КонецЕсли;
		
		// Для группы 3 и более объектов - добавление "раскрывашки" внизу и уточнение родителя объекта.
		Если ВыборкаОбъекты.Группировка Тогда
			СчетчикГруппировки = СчетчикГруппировки + 1;
			Если СчетчикГруппировки = 3 Тогда
				
				БлокГруппаОбъектов.УстановитьАтрибут("class", "interest__group interest__group--collapse");
				
				БлокКонтейнер = ДокументHTML.СоздатьЭлемент("div");
				БлокКонтейнер.УстановитьАтрибут("class", "interest__collapse-content");
				БлокКонтейнер.ДобавитьДочерний(БлокОбъектПредыдущий);
				БлокГруппаОбъектов.ДобавитьДочерний(БлокКонтейнер);
				
				// Гиперссылка "Показать еще".
				БлокПоказать = ДокументHTML.СоздатьЭлемент("div");
				БлокПоказать.УстановитьАтрибут("class", "interest__collapse-link");
				БлокПоказать.УстановитьАтрибут("onclick", "showObjects(this)");
				БлокГруппаОбъектов.ДобавитьДочерний(БлокПоказать);
				
				БлокПоказатьОбложка = ДокументHTML.СоздатьЭлемент("div");
				БлокПоказать.ДобавитьДочерний(БлокПоказатьОбложка);
				
				НадписьПоказать = ДокументHTML.СоздатьЭлемент("span");
				БлокПоказатьОбложка.ДобавитьДочерний(НадписьПоказать);
				
				ИконкаПоказать = ДокументHTML.СоздатьЭлемент("i");
				ИконкаПоказать.УстановитьАтрибут("class", "icon icon__arrow");
				БлокПоказатьОбложка.ДобавитьДочерний(ИконкаПоказать);
				
				// Гиперссылка "Скрыть".
				БлокСкрыть = ДокументHTML.СоздатьЭлемент("div");
				БлокСкрыть.УстановитьАтрибут("class", "interest__expand-link");
				БлокСкрыть.УстановитьАтрибут("onclick", "hideObjects(this)");
				БлокСкрыть.УстановитьАтрибут("hidden", "true");
				БлокГруппаОбъектов.ДобавитьДочерний(БлокСкрыть);
				
				БлокСкрытьОбложка = ДокументHTML.СоздатьЭлемент("div");
				БлокСкрыть.ДобавитьДочерний(БлокСкрытьОбложка);
				
				НадписьСкрыть = ДокументHTML.СоздатьЭлемент("span");
				БлокСкрытьОбложка.ДобавитьДочерний(НадписьСкрыть);
				
				ИконкаСкрыть = ДокументHTML.СоздатьЭлемент("i");
				ИконкаСкрыть.УстановитьАтрибут("class", "icon icon__arrow");
				БлокСкрытьОбложка.ДобавитьДочерний(ИконкаСкрыть);
				
				БлокРодительОбъекта = БлокКонтейнер;
				
			КонецЕсли;
		КонецЕсли;
		
		// Добавление команды открытия объекта по щелчку на блоке.
		Если ВыборкаОбъекты.ЕстьКоманды Тогда
			
			ГиперссылкаОткрыть = ДокументHTML.СоздатьЭлемент("a");
			ГиперссылкаОткрыть.УстановитьАтрибут("class", "interest__item-wrap");
			Если ТипОбъекта = "ВзаимодействиеПланов" Тогда
				ГиперссылкаОткрыть.Гиперссылка = "ЛентаОткрытьВзаимодействиеПланов_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
			ИначеЕсли ТипОбъекта = "ВзаимодействиеИстории" Тогда
				ГиперссылкаОткрыть.Гиперссылка = "ЛентаОткрытьВзаимодействиеИстории_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
			ИначеЕсли ТипОбъекта = "ЗадачаПланов" Тогда
				Если ДанныеОбъекта.Вид Тогда
					ГиперссылкаОткрыть.Гиперссылка = "ЛентаОткрытьЛичнуюЗадачуПланов_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				Иначе
					ГиперссылкаОткрыть.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ссылка);
				КонецЕсли;
			ИначеЕсли ТипОбъекта = "ЗадачаИстории" Тогда
				Если ДанныеОбъекта.Вид Тогда
					ГиперссылкаОткрыть.Гиперссылка = "ЛентаОткрытьЛичнуюЗадачуИстории_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				Иначе
					ГиперссылкаОткрыть.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ссылка);
				КонецЕсли;
			ИначеЕсли ТипОбъекта = "Примечание" Тогда
				ГиперссылкаОткрыть.Гиперссылка = "ЛентаОткрытьПримечание_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
			Иначе
				ГиперссылкаОткрыть.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ссылка);
			КонецЕсли;
			БлокРодительОбъекта.ДобавитьДочерний(ГиперссылкаОткрыть);
			
			БлокКонтейнерОбъекта =  ДокументHTML.СоздатьЭлемент("object");
			БлокКонтейнерОбъекта.УстановитьАтрибут("type", "interesting/solution");
			ГиперссылкаОткрыть.ДобавитьДочерний(БлокКонтейнерОбъекта);
			
			БлокОбъект = ДокументHTML.СоздатьЭлемент("div");
			БлокОбъект.УстановитьАтрибут("class", "interest__item");
			БлокКонтейнерОбъекта.ДобавитьДочерний(БлокОбъект);
			
			Если ВыборкаОбъекты.Группировка Тогда
				БлокОбъектПредыдущий = ГиперссылкаОткрыть;
			КонецЕсли;
			
		Иначе
			
			БлокОбъект = ДокументHTML.СоздатьЭлемент("div");
			БлокОбъект.УстановитьАтрибут("class", "interest__item");
			БлокРодительОбъекта.ДобавитьДочерний(БлокОбъект);
			
			Если ВыборкаОбъекты.Группировка Тогда
				БлокОбъектПредыдущий = БлокОбъект;
			КонецЕсли;
			
		КонецЕсли;
		
		// Отрисовка содержиого объекта.
		Если ТипОбъекта = "ВзаимодействиеПланов" Тогда
			
			ЗаполнитьHTMLВзаимодействиеПланов(ДокументHTML, БлокОбъект, ДанныеОбъекта, ДатаСегодня);
			
		ИначеЕсли ТипОбъекта = "ЗадачаПланов" Тогда
			
			ЗаполнитьHTMLЗадачаПланов(ДокументHTML, БлокОбъект, ДанныеОбъекта, ДатаСегодня);
			
		ИначеЕсли ТипОбъекта = "Примечание" Тогда
			
			ЗаполнитьHTMLПримечание(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "ВзаимодействиеИстории" Тогда
			
			ЗаполнитьHTMLВзаимодействиеИстории(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "ЗадачаИстории" Тогда
			
			ЗаполнитьHTMLЗадачаИстории(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "ТелефонныйЗвонок" Тогда
			
			ЗаполнитьHTMLТелефонныйЗвонок(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "ЭлектронноеПисьмо" Тогда
			
			ЗаполнитьHTMLЭлектронноеПисьмо(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "СообщениеЧата" Тогда
			
			Если ЗаполнитьПолучателейЧата И ДанныеОбъекта.Входящий Тогда
				ДобавитьПолучателяЧата(ПолучателиЧатаТаблица, ДанныеОбъекта)
			КонецЕсли;
			ЗаполнитьHTMLСообщениеЧата(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "СообщениеSMS" Тогда
			
			ЗаполнитьHTMLСообщениеSMS(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "Заявка" Тогда
			
			ЗаполнитьHTMLЗаявка(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "Интерес" Тогда
			
			ЗаполнитьHTMLИнтерес(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "ПрочийДокумент" Тогда
			
			ЗаполнитьHTMLПрочийДокумент(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "СозданиеИнтереса" Тогда
			
			БлокОбъект.УстановитьАтрибут("class", "interest__history");
			ЗаполнитьHTMLСозданиеИнтереса(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "ЗавершениеИнтереса" Тогда
			
			БлокОбъект.УстановитьАтрибут("class", "interest__history");
			ЗаполнитьHTMLЗавершениеИнтереса(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		ИначеЕсли ТипОбъекта = "ЗаписьИстории" Тогда
			
			БлокОбъект.УстановитьАтрибут("class", "interest__history");
			ЗаполнитьHTMLЗаписьИстории(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
		КонецЕсли;
		
		// Добавление команд меню объекта.
		Если ВыборкаОбъекты.ЕстьКоманды Тогда
			
			СписокКоманд = ДобавитьHTMLСписокКоманд(ДокументHTML, БлокОбъект, ДанныеОбъекта);
			
			Если ТипОбъекта = "Примечание" Тогда
				
				ИмяКоманды = НСтр("ru = 'Изменить'");
				СсылкаКоманды = "ЛентаОткрытьПримечание_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				
				ИмяКоманды = НСтр("ru = 'Удалить'");
				СсылкаКоманды = "ЛентаУдалитьПримечание_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				
			ИначеЕсли ТипОбъекта = "ВзаимодействиеПланов" Тогда
				
				ИмяКоманды = НСтр("ru = 'Изменить'");
				СсылкаКоманды = "ЛентаОткрытьВзаимодействиеПланов_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				
				ИмяКоманды = НСтр("ru = 'Отменить'");
				СсылкаКоманды = "ЛентаОтменитьВзаимодействие_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				
			ИначеЕсли ТипОбъекта = "ВзаимодействиеИстории" Тогда
				
				ИмяКоманды = НСтр("ru = 'Изменить'");
				СсылкаКоманды = "ЛентаОткрытьВзаимодействиеИстории_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				
			ИначеЕсли ТипОбъекта = "ЗадачаПланов" Тогда
				
				ИмяКоманды = НСтр("ru = 'Изменить'");
				Если ДанныеОбъекта.Вид Тогда // Личная
					СсылкаКоманды = "ЛентаОткрытьЛичнуюЗадачуПланов_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				Иначе
					СсылкаКоманды = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ссылка);
				КонецЕсли;
				ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				
				Если ДанныеОбъекта.Вид Тогда
					ИмяКоманды = НСтр("ru = 'Удалить'");
					СсылкаКоманды = "ЛентаУдалитьЗадачу_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
					ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				КонецЕсли;
			
			ИначеЕсли ТипОбъекта = "ЗадачаИстории" Тогда
				
				ИмяКоманды = НСтр("ru = 'Изменить'");
				Если ДанныеОбъекта.Вид Тогда // Личная
					СсылкаКоманды = "ЛентаОткрытьЛичнуюЗадачуИстории_" + ДанныеОбъекта.Ссылка.УникальныйИдентификатор();
				Иначе
					СсылкаКоманды = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ссылка);
				КонецЕсли;
				ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				
			Иначе
				
				ИмяКоманды = НСтр("ru = 'Изменить'");
				СсылкаКоманды = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Ссылка);
				ДобавитьHTMLКоманду(ДокументHTML, СписокКоманд, ИмяКоманды, СсылкаКоманды);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаБезВремениПредыдущая = ДатаБезВремени;
		ТипОбъектаПредыдущий = ТипОбъекта;
		РазделПредыдущий = Раздел;
		Если Раздел = 1 Тогда
			ВыведеноОбъектовИстории = ВыведеноОбъектовИстории + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод гиперссылки "Еще N объектов".
	ОстатокОбъектовИстории = ВсегоОбъектовИстории - ВывестиОбъектовИстории;
	Если ОстатокОбъектовИстории > 0 Тогда
		
		БлокЗагрузитьЕще = ДокументHTML.СоздатьЭлемент("div");
		БлокЗагрузитьЕще.УстановитьАтрибут("class", "show__more");
		БлокОбложкаЛенты.ДобавитьДочерний(БлокЗагрузитьЕще);
		
		КоличествоЗагрузитьЕще = Мин(50, ОстатокОбъектовИстории);
		
		ЭлементЗагрузитьЕще = ДокументHTML.СоздатьЭлемент("a");
		ЭлементЗагрузитьЕще.УстановитьАтрибут("class", "show__more__link");
		ЭлементЗагрузитьЕще.Гиперссылка = "ЛентаЗагрузитьЕще";
		ЭлементЗагрузитьЕще.ТекстовоеСодержимое = НСтр("ru = 'Загрузить еще '") + СтрЗаменить(КоличествоЗагрузитьЕще, Символы.НПП, "");
		БлокЗагрузитьЕще.ДобавитьДочерний(ЭлементЗагрузитьЕще);
		
	КонецЕсли;
	
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	Если ЗаполнитьПолучателейЧата Тогда
		ПолучателиЧата = ОбщегоНазначения.ТаблицаЗначенийВМассив(ПолучателиЧатаТаблица);
	КонецЕсли;
	
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

Функция КомандыОбычногоВводаЛенты(Знач Режим, Знач ЗначенияНастроек) Экспорт
	
	Объекты = Новый СписокЗначений;
	
	Если Режим = "ЛентаИнтереса" Тогда
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Объекты.Добавить("Счет", НСтр("ru = 'Счет'"));
		Иначе
			Объекты.Добавить("ЗаказКлиента", НСтр("ru = 'Заказ клиента'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияНастроек.ИспользоватьБП Тогда
		Объекты.Добавить("Поручение", НСтр("ru = 'Поручение'"));
	КонецЕсли;
	
	Если Режим = "ЛентаИнтереса" И ЗначенияНастроек.ИспользоватьКП Тогда
		Объекты.Добавить("КоммерческоеПредложение", НСтр("ru = 'Коммерческое предложение'"));
	КонецЕсли;
	
	Если Режим = "ЛентаИнтереса" Или Режим = "ЛентаКлиента" Тогда
		Объекты.Добавить("Интерес", НСтр("ru = 'Интерес'"));
	КонецЕсли;
	
	Если (Режим = "ЛентаИнтереса" Или Режим = "ЛентаКлиента") И ЗначенияНастроек.ИспользоватьБП Тогда
		Объекты.Добавить("БизнесПроцесс", НСтр("ru = 'Бизнес-процесс'"));
	КонецЕсли;
	
	Если ЗначенияНастроек.ИспользоватьSMS Тогда
		Объекты.Добавить("СообщениеSMS", НСтр("ru = 'Сообщение SMS'"));
	КонецЕсли;
	
	Возврат Объекты;
	
КонецФункции

Функция СсылкаПоИдентификатору(Знач Идентификатор, Знач Тип) Экспорт
	
	Если Тип = "Заметки" Тогда
		МенеджерОбъекта = Справочники;
	ИначеЕсли Тип = "ЗадачаИсполнителя" Тогда
		МенеджерОбъекта = Задачи;
	Иначе
		МенеджерОбъекта = Документы;
	КонецЕсли;
	
	Возврат МенеджерОбъекта[Тип].ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	
КонецФункции

Процедура ВыполнитьКомандуЛентыНаСервере(Знач ПараметрыКоманды) Экспорт
	
	ОбъектСсылка = СсылкаПоИдентификатору(ПараметрыКоманды.Идентификатор, ПараметрыКоманды.Тип);
	Если ОбъектСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ОбъектСсылка.ПолучитьОбъект();
	
	Если ПараметрыКоманды.Команда = "Удалить" Тогда
		Объект.ПометкаУдаления = Истина;
	ИначеЕсли ПараметрыКоманды.Команда = "Отменить" Тогда
		Если ПараметрыКоманды.Тип = "CRM_Взаимодействие" Тогда
			Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Записать();
	
КонецПроцедуры

Функция ДанныеВидаВзаимодействияПоУмолчанию(Знач Режим, Знач СостояниеИнтереса = Неопределено) Экспорт
	
	ДанныеВидаВзаимодействия = Новый Структура;
	ДанныеВидаВзаимодействия.Вставить("Ссылка", Справочники.CRM_ВидыВзаимодействий.ПустаяСсылка());
	ДанныеВидаВзаимодействия.Вставить("Описание", "");
	
	Если Режим = "ЛентаИнтереса" Тогда
		
		Если Не ЗначениеЗаполнено(СостояниеИнтереса) Тогда
			Возврат ДанныеВидаВзаимодействия;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыВзаимодействий.Ссылка КАК Ссылка,
		|	ВидыВзаимодействий.Описание КАК Описание
		|ИЗ
		|	Справочник.CRM_ВидыВзаимодействий КАК ВидыВзаимодействий
		|ГДЕ
		|	ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
		|	И ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
		|	И ВидыВзаимодействий.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		|	И ВидыВзаимодействий.СостояниеИнтереса = &СостояниеИнтереса
		|	И НЕ ВидыВзаимодействий.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_ВидыВзаимодействий.ОбзвонКлиентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыВзаимодействий.Ссылка,
		|	ВидыВзаимодействий.Описание
		|ИЗ
		|	Справочник.CRM_ВидыВзаимодействий КАК ВидыВзаимодействий
		|ГДЕ
		|	ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
		|	И ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
		|	И ВидыВзаимодействий.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		|	И ВидыВзаимодействий.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
		|	И НЕ ВидыВзаимодействий.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_ВидыВзаимодействий.ОбзвонКлиентов)");
		
		Запрос.Параметры.Вставить("СостояниеИнтереса", СостояниеИнтереса);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат ДанныеВидаВзаимодействия;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДанныеВидаВзаимодействия, Выборка);
		КонецЕсли;
		
	ИначеЕсли Режим = "ЛентаКлиента" Или Режим = "ЛентаКонтакта" Тогда
		
		ВидВзаимодействия = Константы.CRM_ВидВзаимодействияПоУмолчанию.Получить();
		Если Не ЗначениеЗаполнено(ВидВзаимодействия) Тогда
			ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.Встреча;
		КонецЕсли;
		Описание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидВзаимодействия, "Описание");
		
		ДанныеВидаВзаимодействия.Ссылка = ВидВзаимодействия;
		ДанныеВидаВзаимодействия.Описание = Описание;
		
	КонецЕсли;
	
	Возврат ДанныеВидаВзаимодействия;
	
КонецФункции

Функция ЭтоПартнерСКонтактами(Знач Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контакты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|ГДЕ
	|	Контакты.Владелец = &Партнер");
	Запрос.Параметры.Вставить("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция КонтактыПартнера(Знач Партнер) Экспорт
	
	КонтактыПартнера = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат КонтактыПартнера;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контакты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК Контакты
	|ГДЕ
	|	Контакты.Владелец = &Партнер");
	Запрос.Параметры.Вставить("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КонтактыПартнера;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтактыПартнера.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат КонтактыПартнера;
	
КонецФункции

Функция УчетнаяЗаписьПоУмолчанию(Знач Пользователь) Экспорт
	
	ОсновнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ <> Неопределено И
		ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись",, ПользовательИБ.Имя);
		Если ОсновнаяУчетнаяЗапись = Неопределено Тогда
			ОсновнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОсновнаяУчетнаяЗапись;
	
КонецФункции

Функция ПодписьПользователя(Знач УчетнаяЗапись, Знач Пользователь, Знач ПодписьПересылаемогоПисьма = Ложь) Экспорт
	
	НаборРегистра = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 Тогда
	
		Если ПодписьПересылаемогоПисьма Тогда
			Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьПересылаемогоПисьма) Тогда
				Возврат Неопределено;
			КонецЕсли;
			Подпись = НаборРегистра[0].ПодписьПересылаемогоПисьма;
		Иначе
			Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьИсходящегоПисьма) Тогда
				Возврат Неопределено;
			КонецЕсли;
			Подпись = НаборРегистра[0].ПодписьИсходящегоПисьма;
		КонецЕсли;
		СтруктураВложений = Новый Структура;
		ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Подпись, Подпись.Текст, СтруктураВложений);
		
	Иначе
		
		ТекстHTML = "";
		СтруктураВложений = Новый Структура;
		
	КонецЕсли;
	
	ТекстПодписиФорматированныйДокумент = Новый ФорматированныйДокумент;
	ТекстПодписиФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
	Возврат ТекстПодписиФорматированныйДокумент;
	
КонецФункции

Процедура ДобавитьФорматированныйДокументКФорматированномуДокументу(ПриемникДокумент, ДобавляемыйДокумент) Экспорт

	Для Инд = 0 По ДобавляемыйДокумент.Элементы.Количество() -1 Цикл
		ДобавляемыйЭлемент = ДобавляемыйДокумент.Элементы[Инд];
		Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ПараграфФорматированногоДокумента") Тогда
			НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараграф, ДобавляемыйЭлемент, "ТипПараграфа, ГоризонтальноеПоложение, МеждустрочныйИнтервал,Отступ");
			ДобавитьФорматированныйДокументКФорматированномуДокументу(НовыйПараграф, ДобавляемыйЭлемент);
		Иначе
			Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Текст, Тип("ТекстФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,ДобавляемыйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Картинка, Тип("КартинкаФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,ДобавляемыйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				Если ТипЗнч(ДобавляемыйДокумент) = Тип("ПараграфФорматированногоДокумента") 
					И (ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.МаркированныйСписок
					Или ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.НумерованныйСписок) Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить( , Тип("ПереводСтрокиФорматированногоДокумента"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПредставленияКонтактовПисьма(Знач ДанныеКонтактов) Экспорт
	
	ДанныеКонтактов.Кому = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ДанныеКонтактов.Кому, Ложь);
	ДанныеКонтактов.Копии = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ДанныеКонтактов.Копии, Ложь);
	ДанныеКонтактов.Скрытые = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ДанныеКонтактов.Скрытые, Ложь);
	
	Возврат ДанныеКонтактов;
	
КонецФункции

Процедура СоздатьЭлектронноеПисьмоВФормеИнтереса(Знач Режим, Знач ДанныеЗаполнения) Экспорт
	
	ПисьмоОбъект = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	ПисьмоОбъект.Заполнить(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(ПисьмоОбъект, ДанныеЗаполнения);
	
	//Для Каждого СтрокаПолучателя Из ДанныеЗаполнения.ПолучателиПисьма Цикл
	//	ЗаполнитьЗначенияСвойств(ПисьмоОбъект.ПолучателиПисьма.Добавить(), СтрокаПолучателя);
	//КонецЦикла;
	//Для Каждого СтрокаПолучателя Из ДанныеЗаполнения.ПолучателиКопий Цикл
	//	ЗаполнитьЗначенияСвойств(ПисьмоОбъект.ПолучателиКопий.Добавить(), СтрокаПолучателя);
	//КонецЦикла;
	//Для Каждого СтрокаПолучателя Из ДанныеЗаполнения.ПолучателиСкрытыхКопий Цикл
	//	ЗаполнитьЗначенияСвойств(ПисьмоОбъект.ПолучателиСкрытыхКопий.Добавить(), СтрокаПолучателя);
	//КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ДанныеЗаполнения.ТекстHTML) Тогда
		
		ТелоПисьмаHTML = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.ТекстHTML);
		ПисьмоОбъект.ТекстHTML = ТелоПисьмаHTML.ТекстHTML;
		
		СтруктураВложений = ТелоПисьмаHTML.СтруктураВложений;
		Если СтруктураВложений.Количество() > 0 Тогда
			
			ТаблицаСоответствийИменВложенийИдентификаторам = Новый ТаблицаЗначений;
			ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИмяФайла");
			ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИдентификаторФайлаДляHTML");
			ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("Картинка");
			Для Каждого Вложение Из СтруктураВложений Цикл
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = Вложение.Ключ;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = Вложение.Значение;
			КонецЦикла;
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПисьмоОбъект.ТекстHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам);
			
			ПисьмоОбъект.ТекстHTML	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			ПисьмоОбъект.Текст		= Взаимодействия.ПолучитьОбычныйТекстИзHTML(ПисьмоОбъект.ТекстHTML);
			
			ПисьмоОбъект.Записать();
			
			Для Каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
				
				ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
				
				ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
				АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, ДанныеЗаполнения.УникальныйИдентификатор);
					ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
					ПисьмоОбъект.Ссылка,
					АдресКартинкиВоВременномХранилище,
					ИмяФайлаВложения,
					ДвоичныеДанныеКартинки.Размер());
				
				Если ПрисоединенныйФайл <> Неопределено Тогда
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
					ПрисоединенныйФайлОбъект.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.ОтправлятьСразу Тогда
		
		ПисьмоОбъект.Записать();
		
		ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
		ИмяСервераИсходящейПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОбъект.УчетнаяЗапись, "СерверИсходящейПочты", Истина);
		Если УправлениеЭлектроннойПочтой.СерверИсходящейПочтыНеТребуетДополнительнойОтправкиПоIMAP(ИмяСервераИсходящейПочты) Тогда
			ИдентификаторПисьма = CRM_Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект,, ПараметрыПисьма);
		Иначе
			ИдентификаторПисьма = CRM_Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект,, ПараметрыПисьма, "Все");
		КонецЕсли;
		
		ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
		Если ПараметрыПисьма.Свойство("ПротоколПочты") И ПараметрыПисьма.ПротоколПочты = "IMAP" Тогда
			ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщения;
		КонецЕсли;
		
		ПисьмоОбъект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
		ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
		
		Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные);
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка);
		
	Иначе
		
		ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие);
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка);
		
	КонецЕсли;
	
	Если Режим = "ЛентаИнтереса" Тогда
		ТаблицаСвязей = Новый ТаблицаЗначений;
		ТаблицаСвязей.Колонки.Добавить("Ссылка");
		ТаблицаСвязей.Колонки.Добавить("СостояниеИнтереса");
		ТаблицаСвязей.Колонки.Добавить("ВведенНаОсновании");
		ТаблицаСвязей.Колонки.Добавить("ОсновнойИнтерес");
		
		НоваяСтрока = ТаблицаСвязей.Добавить();
		НоваяСтрока.Ссылка = ДанныеЗаполнения.ДокументОснование;
		НоваяСтрока.СостояниеИнтереса = ДанныеЗаполнения.СостояниеИнтереса;
		НоваяСтрока.ВведенНаОсновании = Ложь;
		НоваяСтрока.ОсновнойИнтерес = Истина;
		
		ПисьмоОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
	КонецЕсли;
	
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

Функция ТекстыПисьма(Знач ТекстПисьма, Знач УчетнаяЗапись, Знач Пользователь) Экспорт
	
	ДокументHTML	= Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ТекстПисьма);
	ТекстHTML		= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	ТекстHTML		= СтрЗаменить(ТекстHTML, "size=""2""","");
	ВложенияHTML	= Новый Структура;
	
	ПодписьПользователя = CRM_ЛентаСобытий.ПодписьПользователя(УчетнаяЗапись, Пользователь);
	Если ПодписьПользователя <> Неопределено Тогда
		ТекстПисьмаФД = Новый ФорматированныйДокумент;
		ТекстПисьмаФД.УстановитьHTML(ТекстHTML, Новый Структура);
		CRM_ЛентаСобытий.ДобавитьФорматированныйДокументКФорматированномуДокументу(ТекстПисьмаФД, ПодписьПользователя);
		ТекстПисьмаФД.ПолучитьHTML(ТекстHTML, ВложенияHTML);
		ТекстHTML = ПоместитьВоВременноеХранилище(Новый Структура("ТекстHTML,СтруктураВложений", ТекстHTML, ВложенияHTML), Новый УникальныйИдентификатор);
		ТекстПисьма = ТекстПисьмаФД.ПолучитьТекст();
	КонецЕсли;
	
	Возврат Новый Структура("ТекстПисьма,ТекстHTML", ТекстПисьма, ТекстHTML);
	
КонецФункции

Функция ПараметрыРабочегоДня(Знач Пользователь) Экспорт
	
	ВремяНачала = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяНачалаРабочегоДня");
	ВремяОкончания = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяОкончанияРабочегоДня");
	
	Если Не ЗначениеЗаполнено(ВремяНачала) Тогда
		ВремяНачала = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВремяОкончания) Тогда
		ВремяОкончания = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	
	Возврат Новый Структура("ВремяНачала, ВремяОкончания", ВремяНачала, ВремяОкончания);
	
КонецФункции

Функция ДатаОкончанияПоВарианту(Знач ДатаНачала, Знач ВариантСрока) Экспорт
	
	Если ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Сейчас Тогда
		ДатаОкончания	= ДатаНачала;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через15Минут Тогда
		ДатаОкончания	= ДатаНачала + 900;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезЧас Тогда
		ДатаОкончания	= ДатаНачала + 3600;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через4Часа Тогда
		ДатаОкончания	= ДатаНачала + 14400;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через8Часов Тогда
		ДатаОкончания	= ДатаНачала + 28800;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень Тогда
		ДатаОкончания	= ДатаНачала + 86400;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриДня Тогда
		ДатаОкончания	= ДатаНачала + 259200;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезНеделю Тогда
		ДатаОкончания	= ДатаНачала + 604800;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели Тогда
		ДатаОкончания	= ДатаНачала + 1209600;
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезМесяц Тогда
		ДатаОкончания	= ДобавитьМесяц(ДатаНачала, 1);
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца Тогда
		ДатаОкончания	= ДобавитьМесяц(ДатаНачала, 3);
	Иначе
		ДатаОкончания	= ДатаНачала;
	КонецЕсли;
	
	Возврат ДатаОкончания;
	
КонецФункции

Функция ПреобразоватьИменаПолучателей(ФормаИмяТаблицы, УчетнаяЗаписьЭП, МассивСтруктур, ФормаСоответствия) Экспорт
	
	МассивСтруктурИтог = Новый Массив;
	
	ТабПолучателей = ФормаИмяТаблицы.Выгрузить();
	
	ФормаИмяТаблицы.Очистить();
	Для Каждого Стр Из МассивСтруктур Цикл
		новСтр = ФормаИмяТаблицы.Добавить();
		СтрокаТаблицы = ТабПолучателей.Найти(Стр.АдресЭП, "Адрес");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(новСтр, СтрокаТаблицы);
		Иначе
			новСтр.Адрес = Стр.АдресЭП;
			новСтр.Представление = Стр.Представление;
			новСтр.Контакт = ПолучитьКонтактПоАдресу(УчетнаяЗаписьЭП, Стр.АдресЭП, Стр.Представление, ФормаСоответствия);
		КонецЕсли;
		
		СтруктураПолучателя = Новый Структура("Адрес,Представление,Контакт");
		ЗаполнитьЗначенияСвойств(СтруктураПолучателя,новСтр);
		
		МассивСтруктурИтог.Добавить(СтруктураПолучателя);
		
	КонецЦикла;
	
	Возврат Новый Структура("Получатели, СоответствиеАдресов", МассивСтруктурИтог, ФормаСоответствия.ВыгрузитьЗначения()); 
	
КонецФункции

Функция ПолучитьКонтактПоАдресу(УчетнаяЗаписьЭП, Адрес, Знач Представление = Неопределено, СоответствияАдресовИКонтактовР)
	
	Для Каждого Элемент Из СоответствияАдресовИКонтактовР Цикл
		Если Элемент.Представление = Адрес Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

	Контакт = Адрес;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	2 КАК Флаг
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|	И НЕ ОбъектСКонтактнойИнформацией.АдресЭП = &АдресУЗ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	1
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	0
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	Флаг";
	
	Запрос.УстановитьПараметр("АдресУЗ", УчетнаяЗаписьЭП.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("АдресЭП", Адрес);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Представление = Неопределено И Выборка.Следующий() Тогда
		Контакт = Выборка.Ссылка;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если СокрЛП(Строка(Выборка.Ссылка)) = Представление Тогда
				Контакт = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СоответствияАдресовИКонтактовР.Добавить(Контакт, Адрес);
	Возврат Контакт;
	
КонецФункции

Функция СписокПолучателейАвтоПодборНаСервере(СтрокаДляПоиска) Экспорт
	
	СписокАдресов = Новый СписокЗначений;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =МенеджерВТ;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	Контакты.Ссылка КАК Контакт,
	|	Контакты.АдресЭП КАК АдресЭП
	|	ПОМЕСТИТЬ ВТВыборкаАдресов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		(КонтактнаяИнформация.АдресЭП ПОДОБНО &Представление
	|		ИЛИ КонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &Представление)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП ПОДОБНО &Представление
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &Представление
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты";
	
	Запрос.УстановитьПараметр("Представление","%"+СтрокаДляПоиска+"%");
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Выполнить();
	
	// Формируем новый запрос из временной таблицы.
	
	Запрос.Текст ="ВЫБРАТЬ 
	|	Контакт,
	|	АдресЭП,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Контакт) = ТИП(Справочник.КонтактныеЛицаПартнеров)
	|	ТОГДА Контакт.Владелец.Наименование
	|	ИНАЧЕ NULL КОНЕЦ КАК Владелец
	|ИЗ
	|	ВТВыборкаАдресов
	|ИТОГИ ПО
	|	АдресЭП";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока (ВыборкаПоСсылкам.Следующий()) Цикл
			
			СписокАдресов.Добавить(СокрЛП(Строка(ВыборкаПоСсылкам.Контакт.Наименование))+ " <"+ Выборка.АдресЭП + "> "+ ?(ЗначениеЗаполнено(ВыборкаПоСсылкам.Владелец),"("+ВыборкаПоСсылкам.Владелец+")",""));
		
		КонецЦикла;
		
	КонецЦикла;

	Возврат СписокАдресов;
	
КонецФункции

Функция ЗначениеРеквизитаОбъекта(Знач Ссылка, Знач ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипыОбъектовЛентыПоОтбору(Знач ОтборЛенты)
	
	ТипыОбъектов = Новый Массив;
	
	Для Каждого НастройкаОтбора Из ОтборЛенты Цикл
		
		Если Не НастройкаОтбора.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОтбора = НастройкаОтбора.Значение;
		Если ИмяОтбора = "Взаимодействия" Тогда
			ТипыОбъектов.Добавить(Тип("ДокументСсылка.CRM_Взаимодействие"));
		ИначеЕсли ИмяОтбора = "Задачи" Тогда
			ТипыОбъектов.Добавить(Тип("ЗадачаСсылка.ЗадачаИсполнителя"));
		ИначеЕсли ИмяОтбора = "Звонки" Тогда
			ТипыОбъектов.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
		ИначеЕсли ИмяОтбора = "Письма" Тогда
			ТипыОбъектов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
			ТипыОбъектов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ИначеЕсли ИмяОтбора = "Чаты" Тогда
			ТипыОбъектов.Добавить(Тип("ДокументСсылка.CRM_СообщениеМессенджера"));
		ИначеЕсли ИмяОтбора = "SMS" Тогда
			ТипыОбъектов.Добавить(Тип("ДокументСсылка.СообщениеSMS"));
		ИначеЕсли ИмяОтбора = "Примечания" Тогда
			ТипыОбъектов.Добавить(Тип("СправочникСсылка.Заметки"));
		ИначеЕсли ИмяОтбора = "Документы" Тогда
			ТипыОбъектов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
			ТипыОбъектов.Добавить(Тип("ДокументСсылка.CRM_Заявка"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТипыОбъектов;
	
КонецФункции

Функция ВключеныПримечанияЛентыПоОтбору(Знач ОтборЛенты)
	
	ВыводитьИсторию = Ложь;
	
	НастройкаВсеСобытия = ОтборЛенты.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Если ПометкаВсеСобытия Тогда
		ВыводитьИсторию = Истина;
	Иначе
		НастройкаИстория = ОтборЛенты.НайтиПоЗначению("Примечания");
		ВыводитьИсторию = НастройкаИстория.Пометка;
	КонецЕсли;
	
	Возврат ВыводитьИсторию;
	
КонецФункции

Функция ВключенаИсторияЛентыПоОтбору(Знач ОтборЛенты)
	
	ВыводитьИсторию = Ложь;
	
	НастройкаВсеСобытия = ОтборЛенты.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Если ПометкаВсеСобытия Тогда
		ВыводитьИсторию = Истина;
	Иначе
		НастройкаИстория = ОтборЛенты.НайтиПоЗначению("История");
		ВыводитьИсторию = НастройкаИстория.Пометка;
	КонецЕсли;
	
	Возврат ВыводитьИсторию;
	
КонецФункции

Функция ВключеныПрочиеДокументыЛентыПоОтбору(Знач ОтборЛенты)
	
	ВыводитьПрочие = Ложь;
	
	НастройкаВсеСобытия = ОтборЛенты.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Если ПометкаВсесобытия Тогда
		ВыводитьПрочие = Истина;
	Иначе
		НастройкаИстория = ОтборЛенты.НайтиПоЗначению("Документы");
		ВыводитьПрочие = НастройкаИстория.Пометка;
	КонецЕсли;
	
	Возврат ВыводитьПрочие;
	
КонецФункции

Функция СтруктураОбъектаЛенты()
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("Ссылка",					Неопределено);
	ДанныеОбъекта.Вставить("Номер",						"");
	ДанныеОбъекта.Вставить("Дата",						'00010101');
	ДанныеОбъекта.Вставить("ДатаБезВремени",			'00010101');
	ДанныеОбъекта.Вставить("Год",						0);
	ДанныеОбъекта.Вставить("ПредставлениеДаты",			"");
	
	ДанныеОбъекта.Вставить("Тип",						"");
	ДанныеОбъекта.Вставить("Вид",						Неопределено);
	ДанныеОбъекта.Вставить("Входящий",					Ложь);
	ДанныеОбъекта.Вставить("Состояние",					Неопределено);
	ДанныеОбъекта.Вставить("УчетнаяЗапись",				Неопределено);
	
	ДанныеОбъекта.Вставить("ТемаИнтереса",				"");
	ДанныеОбъекта.Вставить("Интерес",					Неопределено);
	
	ДанныеОбъекта.Вставить("Отправитель",				Неопределено);
	ДанныеОбъекта.Вставить("Получатель",				Неопределено);
	
	ДанныеОбъекта.Вставить("Длительность",				0);
	ДанныеОбъекта.Вставить("Тема",						"");
	ДанныеОбъекта.Вставить("Сумма",						0);
	ДанныеОбъекта.Вставить("Валюта",					Неопределено);
	ДанныеОбъекта.Вставить("Результат",					"");
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ТекстКомандыСкрытьРазвернуть(Знач ТипОбъекта, Знач Количество, Знач Развернуть)
	
	Если ТипОбъекта = "ТелефонныйЗвонок" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 звонок;;Еще %1 звонка;Еще %1 звонков;Еще %1 звонка",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 звонок;;Скрыть %1 звонка;Скрыть %1 звонков;Скрыть %1 звонка",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ЭлектронноеПисьмо" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 письмо;;Еще %1 письма;Еще %1 писем;Еще %1 письма",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 письмо;;Скрыть %1 письма;Скрыть %1 писем;Скрыть %1 письма",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "СообщениеЧата" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 чат;;Еще %1 чата;Еще %1 чатов;Еще %1 чата",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 чат;;Скрыть %1 чата;Скрыть %1 чатов;Скрыть %1 чата",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "СообщениеSMS" Тогда
		
		Если Развернуть Тогда
			Возврат СтрокаСЧислом(";Еще %1 SMS;;Еще %1 SMS;Еще %1 SMS;Еще %1 SMS",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		Иначе
			Возврат СтрокаСЧислом(";Скрыть %1 SMS;;Скрыть %1 SMS;Скрыть %1 SMS;Скрыть %1 SMS",
				Количество, ВидЧисловогоЗначения.Количественное, "L=ru");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИнтервалВремениВСекундахСтрокой(Знач ИнтервалВСекундах)
	
	Часов = Цел(ИнтервалВСекундах/60/60);
	Минут = Цел((ИнтервалВСекундах - Часов*60*60)/60);
	Секунд = ИнтервалВСекундах - Часов*60*60 - Минут*60;
	
	ОписаниеИнтервала =
		?(Часов = 0, "", Строка(Часов) + НСтр("ru = ' ч '")) +
		?(Минут = 0, "", Строка(Минут) + НСтр("ru = ' мин '")) +
		?(Секунд = 0, "", Строка(Секунд) + НСтр("ru = ' сек '"));
	
	Возврат СокрЛП(ОписаниеИнтервала);
	
КонецФункции

Функция ИнтервалВремениВЧасахСтрокой(Знач ИнтервалВЧасах)
	
	Дней = Цел(ИнтервалВЧасах/24);
	Часов = Цел(ИнтервалВЧасах - Дней*24);
	
	ОписаниеИнтервала =
		?(Дней = 0, "", Строка(Дней) + НСтр("ru = ' дн '")) +
		?(Часов = 0, "", Строка(Часов) + НСтр("ru = ' ч '"));
	
	Возврат СокрЛП(ОписаниеИнтервала);
	
КонецФункции

Процедура ДобавитьПолучателяЧата(ПолучателиЧатаТаблица, Знач ДанныеОбъекта)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Адрес",			ДанныеОбъекта.Результат);
	ПараметрыОтбора.Вставить("Контакт",			ДанныеОбъекта.Отправитель);
	ПараметрыОтбора.Вставить("УчетнаяЗапись",	ДанныеОбъекта.УчетнаяЗапись);
	ПараметрыОтбора.Вставить("Представление",	ДанныеОбъекта.Вид);
	ПараметрыОтбора.Вставить("Группа",			ДанныеОбъекта.Валюта);
	
	НайденныеСтроки = ПолучателиЧатаТаблица.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ПолучателиЧатаТаблица.Добавить();
		НоваяСтрока.Идентификатор	= Строка(Новый УникальныйИдентификатор);
		НоваяСтрока.Адрес			= ДанныеОбъекта.Результат;
		НоваяСтрока.Контакт			= ДанныеОбъекта.Отправитель;
		НоваяСтрока.УчетнаяЗапись	= ДанныеОбъекта.УчетнаяЗапись;
		НоваяСтрока.Представление	= ДанныеОбъекта.Вид;
		НоваяСтрока.Группа			= ДанныеОбъекта.Валюта;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьHTMLВзаимодействиеПланов(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта, Знач ДатаСегодня)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__calendar");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	Если ДанныеОбъекта.Длительность > 0 Тогда
		ЭлементДата.УстановитьАтрибут("class", "text__bold text__red");
	Иначе
		Если ДанныеОбъекта.ДатаБезВремени = ДатаСегодня Тогда
			ЭлементДата.УстановитьАтрибут("class", "text__bold text__green");
		Иначе
			ЭлементДата.УстановитьАтрибут("class", "text__bold text__gray");
		КонецЕсли;
	КонецЕсли;
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементВид = ДокументHTML.СоздатьЭлемент("span");
	ЭлементВид.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Вид);
	БлокЗаголовок.ДобавитьДочерний(ЭлементВид);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Получатель) Тогда
		ЭлементСвязка = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСвязка.ТекстовоеСодержимое = НСтр("ru = ' с '");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	Иначе
		ЭлементСвязка = ДокументHTML.СоздатьТекстовыйУзел(" ");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	КонецЕсли;
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Получатель);
	ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Получатель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗадачаПланов(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта, Знач ДатаСегодня)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__task");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	Если ДанныеОбъекта.Длительность > 0 Тогда
		ЭлементДата.УстановитьАтрибут("class", "text__bold text__red");
	Иначе
		Если ДанныеОбъекта.ДатаБезВремени = ДатаСегодня Тогда
			ЭлементДата.УстановитьАтрибут("class", "text__bold text__green");
		Иначе
			ЭлементДата.УстановитьАтрибут("class", "text__bold text__gray");
		КонецЕсли;
	КонецЕсли;
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Получатель);
	ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Получатель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLПримечание(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__note");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLВзаимодействиеИстории(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Входящий Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-interaction");
	Иначе
		Если ДанныеОбъекта.Состояние = Перечисления.CRM_ТипыСостоянийСобытий.Завершено Тогда
			БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__calendar-check");
		Иначе
			БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__calendar");
		КонецЕсли
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементВид = ДокументHTML.СоздатьЭлемент("span");
	ЭлементВид.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Вид);
	БлокЗаголовок.ДобавитьДочерний(ЭлементВид);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Получатель) Тогда
		ЭлементСвязка = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСвязка.ТекстовоеСодержимое = НСтр("ru = ' с '");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	Иначе
		ЭлементСвязка = ДокументHTML.СоздатьТекстовыйУзел(" ");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	КонецЕсли;
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Получатель);
	ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Получатель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Состояние = Перечисления.CRM_ТипыСостоянийСобытий.Отменено Тогда
		БлокТема.УстановитьАтрибут("class", "interest__content text__gray text__strike");
	Иначе
		БлокТема.УстановитьАтрибут("class", "interest__content text__gray");
	КонецЕсли;
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	БлокРезультат = ДокументHTML.СоздатьЭлемент("div");
	БлокРезультат.УстановитьАтрибут("class", "interest__content");
	БлокРезультат.ТекстовоеСодержимое = ДанныеОбъекта.Результат;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокРезультат);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗадачаИстории(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Состояние Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__task");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__task-done");
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Получатель);
	ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Получатель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Состояние Тогда
		БлокТема.УстановитьАтрибут("class", "interest__content text__gray text__strike");
	Иначе
		БлокТема.УстановитьАтрибут("class", "interest__content text__gray");
	КонецЕсли;
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
	БлокРезультат = ДокументHTML.СоздатьЭлемент("div");
	БлокРезультат.УстановитьАтрибут("class", "interest__content");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокРезультат);
	БлокРезультат.ТекстовоеСодержимое = ДанныеОбъекта.Результат;
	
КонецПроцедуры

Процедура ЗаполнитьHTMLТелефонныйЗвонок(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Входящий Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-call");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__outgoing-call");
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	Если Не ДанныеОбъекта.Состояние = Перечисления.сфпСостоянияЗвонков.Отвеченный Тогда
		ЭлементДата.УстановитьАтрибут("class", "text__red text__bold");
		БлокОбъект.УстановитьАтрибут("class", "interest__item interest__item--missed");
	КонецЕсли;
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Отправитель) = Тип("Строка") Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Отправитель);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	Если ДанныеОбъекта.Длительность > 0 Тогда
		ЭлементДлительность = ДокументHTML.СоздатьЭлемент("span");
		ЭлементДлительность.ТекстовоеСодержимое = " (" + ИнтервалВремениВСекундахСтрокой(ДанныеОбъекта.Длительность) + ")";
		БлокЗаголовок.ДобавитьДочерний(ЭлементДлительность);
	КонецЕсли;
	
	БлокПолучатель = ДокументHTML.СоздатьЭлемент("div");
	БлокПолучатель.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПолучатель);
	
	ЭлементКому = ДокументHTML.СоздатьЭлемент("span");
	ЭлементКому.ТекстовоеСодержимое = Нстр("ru = 'Кому: '");
	БлокПолучатель.ДобавитьДочерний(ЭлементКому);
	
	Если ТипЗнч(ДанныеОбъекта.Получатель) = Тип("Строка") Тогда
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Получатель);
	КонецЕсли;
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Получатель);
	БлокПолучатель.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЭлектронноеПисьмо(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Входящий Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-letter");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__outgoing-letter");
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементСостояние = ДокументHTML.СоздатьЭлемент("span");
	Если ДанныеОбъекта.Входящий Тогда
		ЭлементСостояние.ТекстовоеСодержимое = НСтр("ru = 'Получено от '");
	Иначе
		Если ДанныеОбъекта.Состояние = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
			ЭлементСостояние.ТекстовоеСодержимое = НСтр("ru = 'Отправлено от '");
		Иначе
			ЭлементСостояние.ТекстовоеСодержимое = НСтр("ru = 'Создано '");
		КонецЕсли;
	КонецЕсли;
	БлокЗаголовок.ДобавитьДочерний(ЭлементСостояние);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокПолучатель = ДокументHTML.СоздатьЭлемент("div");
	БлокПолучатель.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПолучатель);
	
	ЭлементКому = ДокументHTML.СоздатьЭлемент("span");
	ЭлементКому.ТекстовоеСодержимое = Нстр("ru = 'Кому: '");
	БлокПолучатель.ДобавитьДочерний(ЭлементКому);
	
	ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("span");
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Получатель);
	БлокПолучатель.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLСообщениеЧата(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	Если ДанныеОбъекта.Входящий Тогда
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-message");
	Иначе
		БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__outgoing-message");
	КонецЕсли;
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Отправитель) = Тип("Строка") Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Отправитель);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементУчетнаяЗапись = ДокументHTML.СоздатьЭлемент("span");
	ЭлементУчетнаяЗапись.ТекстовоеСодержимое = НСтр("ru = ' в '") + Строка(ДанныеОбъекта.УчетнаяЗапись);
	БлокЗаголовок.ДобавитьДочерний(ЭлементУчетнаяЗапись);
	
	БлокПолучатель = ДокументHTML.СоздатьЭлемент("div");
	БлокПолучатель.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПолучатель);
	
	ЭлементКому = ДокументHTML.СоздатьЭлемент("span");
	ЭлементКому.ТекстовоеСодержимое = Нстр("ru = 'Кому: '");
	БлокПолучатель.ДобавитьДочерний(ЭлементКому);
	
	Если ТипЗнч(ДанныеОбъекта.Получатель) = Тип("Строка") Тогда
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Получатель);
	КонецЕсли;
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Получатель);
	БлокПолучатель.ДобавитьДочерний(ЭлементПолучатель);
	
	Если Не ДанныеОбъекта.Состояние Тогда
		ЭлементСостояние = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСостояние.ТекстовоеСодержимое = НСтр("ru = ' (не прочитано)'");
		БлокПолучатель.ДобавитьДочерний(ЭлементСостояние);
	КонецЕсли;
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLСообщениеSMS(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__incoming-sms");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Отправитель) = Тип("Строка") Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Отправитель);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	Если Не ДанныеОбъекта.Состояние Тогда
		ЭлементСостояние = ДокументHTML.СоздатьЭлемент("span");
		ЭлементСостояние.ТекстовоеСодержимое = НСтр("ru = ' (не доставлено)'");
		БлокЗаголовок.ДобавитьДочерний(ЭлементСостояние);
	КонецЕсли;
	
	БлокПолучатель = ДокументHTML.СоздатьЭлемент("div");
	БлокПолучатель.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокПолучатель);
	
	ЭлементКому = ДокументHTML.СоздатьЭлемент("span");
	ЭлементКому.ТекстовоеСодержимое = Нстр("ru = 'Кому: '");
	БлокПолучатель.ДобавитьДочерний(ЭлементКому);
	
	Если ТипЗнч(ДанныеОбъекта.Получатель) = Тип("Строка") Тогда
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементПолучатель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементПолучатель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Получатель);
	КонецЕсли;
	ЭлементПолучатель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Получатель);
	БлокПолучатель.ДобавитьДочерний(ЭлементПолучатель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	БлокТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗаявка(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__request");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.УстановитьАтрибут("class", "text__gray");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	СтрокаОрганизации = "";
	Если ЗначениеЗаполнено(ДанныеОбъекта.Вид) Тогда
		СтрокаОрганизации = " (" + Строка(ДанныеОбъекта.Вид) + ")";
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель) + СтрокаОрганизации;
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.ТекстовоеСодержимое = Строка(ДанныеОбъекта.УчетнаяЗапись) + ": " + ДанныеОбъекта.Тема;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLИнтерес(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__interest");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "text__gray");
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Отправитель) = Тип("Строка") Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Отправитель);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	СтрокаСуммы = "";
	Если ДанныеОбъекта.Сумма > 0 Тогда
		СтрокаСуммы = " " + Формат(ДанныеОбъекта.Сумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(ДанныеОбъекта.Валюта);
	КонецЕсли;
	БлокТема.ТекстовоеСодержимое = НСтр("ru = 'Интерес клиента: '") + ДанныеОбъекта.Тема + СтрокаСуммы;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLПрочийДокумент(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокИконкаОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокИконкаОбъекта.УстановитьАтрибут("class", "icon icon__other-docs");
	БлокОбъект.ДобавитьДочерний(БлокИконкаОбъекта);
	
	БлокСодержаниеОбъекта = ДокументHTML.СоздатьЭлемент("div");
	БлокСодержаниеОбъекта.УстановитьАтрибут("class", "interest__props");
	БлокОбъект.ДобавитьДочерний(БлокСодержаниеОбъекта);
	
	БлокЗаголовок = ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, ДанныеОбъекта);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Отправитель) = Тип("Строка") Или ДанныеОбъекта.Отправитель = Неопределено Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Отправитель);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	БлокТема = ДокументHTML.СоздатьЭлемент("div");
	БлокТема.УстановитьАтрибут("class", "interest__content");
	СтрокаСуммы = "";
	Если ДанныеОбъекта.Сумма > 0 Тогда
		СтрокаСуммы = " " + Формат(ДанныеОбъекта.Сумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(ДанныеОбъекта.Валюта);
	КонецЕсли;
	БлокТема.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Вид) + " " + "№" +
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОбъекта.Номер) + " " +СтрокаСуммы;
	БлокСодержаниеОбъекта.ДобавитьДочерний(БлокТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLСозданиеИнтереса(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "interest__props text__gray");
	БлокОбъект.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Отправитель) = Тип("Строка") Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Отправитель);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементСобытие = ДокументHTML.СоздатьЭлемент("span");
	ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru = ' создан интерес: '");
	БлокЗаголовок.ДобавитьДочерний(ЭлементСобытие);
	
	ЭлементТема = ДокументHTML.СоздатьЭлемент("span");
	ЭлементТема.ТекстовоеСодержимое = ДанныеОбъекта.Тема;
	БлокЗаголовок.ДобавитьДочерний(ЭлементТема);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗавершениеИнтереса(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "interest__props text__gray");
	БлокОбъект.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.Отправитель) = Тип("Строка") Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Отправитель);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.Отправитель);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементСобытие = ДокументHTML.СоздатьЭлемент("span");
	Если ДанныеОбъекта.Состояние Тогда
		ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru = ' интерес завершен успешно'");
	Иначе
		ЭлементСобытие.ТекстовоеСодержимое = НСтр("ru = ' интерес завершен неудачно'");
	КонецЕсли;
	БлокЗаголовок.ДобавитьДочерний(ЭлементСобытие);
	
КонецПроцедуры

Процедура ЗаполнитьHTMLЗаписьИстории(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
	БлокЗаголовок.УстановитьАтрибут("class", "interest__props text__gray");
	БлокОбъект.ДобавитьДочерний(БлокЗаголовок);
	
	ЭлементДата = ДокументHTML.СоздатьЭлемент("span");
	ЭлементДата.ТекстовоеСодержимое = ДанныеОбъекта.ПредставлениеДаты + " ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементДата);
	
	ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Если ТипЗнч(ДанныеОбъекта.УчетнаяЗапись) = Тип("Строка") Или ДанныеОбъекта.УчетнаяЗапись = Неопределено Тогда
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("span");
	Иначе
		ЭлементОтправитель = ДокументHTML.СоздатьЭлемент("a");
		ЭлементОтправитель.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.УчетнаяЗапись);
	КонецЕсли;
	ЭлементОтправитель.ТекстовоеСодержимое = Строка(ДанныеОбъекта.УчетнаяЗапись);
	БлокЗаголовок.ДобавитьДочерний(ЭлементОтправитель);
	
	ЭлементИзмененноеПоле = ДокументHTML.СоздатьЭлемент("span");
	ЭлементИзмененноеПоле.ТекстовоеСодержимое = НСтр("ru = ' изменено поле ""'") + Строка(ДанныеОбъекта.Вид) + """ с ";
	БлокЗаголовок.ДобавитьДочерний(ЭлементИзмененноеПоле);
	
	ЭлементСтароеЗначение = ДокументHTML.СоздатьЭлемент("span");
	ЭлементСтароеЗначение.ТекстовоеСодержимое = """" + Строка(ДанныеОбъекта.Отправитель) + """";
	БлокЗаголовок.ДобавитьДочерний(ЭлементСтароеЗначение);
	
	ЭлементСвязка = ДокументHTML.СоздатьЭлемент("span");
	ЭлементСвязка.ТекстовоеСодержимое = НСтр("ru = ' на '");
	БлокЗаголовок.ДобавитьДочерний(ЭлементСвязка);
	
	ЭлементНовоеЗначение = ДокументHTML.СоздатьЭлемент("span");
	ЭлементНовоеЗначение.ТекстовоеСодержимое = """" + Строка(ДанныеОбъекта.Получатель) + """";
	БлокЗаголовок.ДобавитьДочерний(ЭлементНовоеЗначение);
	
КонецПроцедуры

Функция ДобавитьHTMLСписокКоманд(ДокументHTML, БлокОбъект, Знач ДанныеОбъекта)
	
	БлокКоманды = ДокументHTML.СоздатьЭлемент("div");
	БлокКоманды.УстановитьАтрибут("class", "interest__menu");
	БлокОбъект.ДобавитьДочерний(БлокКоманды);
	
	ЭлементСписокКоманд = ДокументHTML.СоздатьЭлемент("ul");
	БлокКоманды.ДобавитьДочерний(ЭлементСписокКоманд);
	
	Возврат ЭлементСписокКоманд;
	
КонецФункции

Процедура ДобавитьHTMLКоманду(ДокументHTML, ЭлементСписокКоманд, Знач ИмяКоманды, Знач СсылкаКоманды)
	
	ЭлементКоманда = ДокументHTML.СоздатьЭлемент("li");
	ЭлементСписокКоманд.ДобавитьДочерний(ЭлементКоманда);
	
	ЭлементСсылкаКоманды = ДокументHTML.СоздатьЭлемент("a");
	ЭлементСсылкаКоманды.Гиперссылка = СсылкаКоманды;
	ЭлементСсылкаКоманды.ТекстовоеСодержимое = ИмяКоманды;
	ЭлементКоманда.ДобавитьДочерний(ЭлементСсылкаКоманды);
	
КонецПроцедуры

Функция ДобавитьHTMLБлокЗаголовка(ДокументHTML, БлокСодержаниеОбъекта, Знач ДанныеОбъекта)
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Интерес) Тогда
		
		БлокОбложкаЗаголовка = ДокументHTML.СоздатьЭлемент("div");
		БлокОбложкаЗаголовка.УстановитьАтрибут("class", "overflow-hidden");
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокОбложкаЗаголовка);
		
		БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
		БлокЗаголовок.УстановитьАтрибут("class", "interest__props--info text__gray");
		БлокОбложкаЗаголовка.ДобавитьДочерний(БлокЗаголовок);
		
		БлокГиперссылкаИнтереса = ДокументHTML.СоздатьЭлемент("div");
		БлокГиперссылкаИнтереса.УстановитьАтрибут("class", "interest__props--link");
		БлокОбложкаЗаголовка.ДобавитьДочерний(БлокГиперссылкаИнтереса);
		
		ГиперссылкаИнтереса = ДокументHTML.СоздатьЭлемент("a");
		ГиперссылкаИнтереса.Гиперссылка = ПолучитьНавигационнуюСсылку(ДанныеОбъекта.Интерес);
		ТемаИнтереса = СокрЛП(ДанныеОбъекта.ТемаИнтереса);
		ДлинаТемы = СтрДлина(ТемаИнтереса);
		ГиперссылкаИнтереса.ТекстовоеСодержимое = ТемаИнтереса;//;?(ДлинаТемы > 150, Лев(ТемаИнтереса, 147) + "...", ТемаИнтереса);
		БлокГиперссылкаИнтереса.ДобавитьДочерний(ГиперссылкаИнтереса);
		
	Иначе
		
		БлокЗаголовок = ДокументHTML.СоздатьЭлемент("div");
		БлокЗаголовок.УстановитьАтрибут("class", "text__gray");
		БлокСодержаниеОбъекта.ДобавитьДочерний(БлокЗаголовок);
		
	КонецЕсли;
	
	Возврат БлокЗаголовок;
	
КонецФункции

#КонецОбласти
