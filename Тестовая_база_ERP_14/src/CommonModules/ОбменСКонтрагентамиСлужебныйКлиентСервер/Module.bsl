////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеКлиентСервер: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет представление настроек регламента ЭДО.
//
// Параметры:
//  СтрокаТаблицы		 - ДанныеФормыЭлементКоллекции - строка таблицы, содержащей данные регламента.
//  ИспользуетсяПрофиль	 - Булево - признак указания в строке профиля настроек.
//
Процедура ЗаполнитьПредставлениеРегламентаЭДОВСтроке(СтрокаТаблицы, ИспользуетсяПрофиль = Ложь) Экспорт 

	Если ИспользуетсяПрофиль Тогда
		Профиль = ""+СтрокаТаблицы.ПрофильНастроекЭДО;
	Иначе
		Профиль = "";
	КонецЕсли;
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	Если СтрокаТаблицы.ИспользоватьЭП И ИспользоватьЭП Тогда
		Подпись = НСтр("ru = 'Подпись';
						|en = 'Signature'");
		
		Маршрут = "";
		Если ЗначениеЗаполнено(СтрокаТаблицы.МаршрутПодписания) Тогда
			Маршрут = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(маршрут: %1)';
					|en = '(route: %1)'"), СтрокаТаблицы.МаршрутПодписания);
		КонецЕсли;
	Иначе
		Подпись = НСтр("ru = 'Без подписи';
						|en = 'Without signature'");
		Маршрут = "";
	КонецЕсли;
	
	Если Не ИспользуетсяПрофиль Тогда
		ИнформацияОПодписи = НРег(ИнформацияОПодписи);
	КонецЕсли;
	
	ОтветнаяПодпись = "";
	Если СтрокаТаблицы.ТребуетсяОтветнаяПодпись И ИспользоватьЭП Тогда
		ОтветнаяПодпись = НСтр("ru = 'ответная подпись';
								|en = 'response signature'");
	КонецЕсли;
	
	ИзвещениеОПолучении = "";
	Если СтрокаТаблицы.ТребуетсяИзвещениеОПолучении Тогда
		ИзвещениеОПолучении = НСтр("ru = 'извещение о получении';
									|en = 'receipt notification'");
	КонецЕсли;
	
	ДополнительныеНастройки = "";
	ДополнительныеНастройки = ДополнительныеНастройки
		+ Профиль
		+ ?(Не Профиль = "", ", ", "")
		+ Подпись
		+ Маршрут
		+ ?(Не ИзвещениеОПолучении = "",","+ " ", "")
		+ ИзвещениеОПолучении
		+ ?(Не ОтветнаяПодпись = "",","+ " ", "")
		+ ОтветнаяПодпись;
		
	СтрокаТаблицы.ДополнительныеНастройки = ДополнительныеНастройки;

КонецПроцедуры

// Только для внутреннего использования
Функция ЭтоПрямойОбмен(СпособОбменаЭД) Экспорт
	
	Результат = Ложь;
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог")
		Или СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту")
		Или СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область СопоставлениеНоменклатуры

// См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
Функция НоваяНоменклатураИнформационнойБазы(Знач Номенклатура = Неопределено, Знач Характеристика = Неопределено, Знач Упаковка = Неопределено) Экспорт
	
	НоменклатураИБ = Новый Структура;
	НоменклатураИБ.Вставить("Номенклатура", Номенклатура);
	НоменклатураИБ.Вставить("Характеристика", Характеристика);
	НоменклатураИБ.Вставить("Упаковка", Упаковка);
	
	Возврат НоменклатураИБ;
	
КонецФункции

// См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
Функция НоваяНоменклатураКонтрагента(Знач Владелец = Неопределено, Знач Идентификатор = Неопределено) Экспорт
	
	НоменклатураКонтрагента = Новый Структура;
	НоменклатураКонтрагента.Вставить("Владелец", Владелец);
	НоменклатураКонтрагента.Вставить("Идентификатор", ?(ЗначениеЗаполнено(Идентификатор), Идентификатор, ""));
	НоменклатураКонтрагента.Вставить("Наименование", "");
	НоменклатураКонтрагента.Вставить("Характеристика", "");
	НоменклатураКонтрагента.Вставить("ЕдиницаИзмерения", "");
	НоменклатураКонтрагента.Вставить("ЕдиницаИзмеренияКод", "");
	НоменклатураКонтрагента.Вставить("Артикул", "");
	НоменклатураКонтрагента.Вставить("СтавкаНДС", "");
	НоменклатураКонтрагента.Вставить("Штрихкод", "");
	НоменклатураКонтрагента.Вставить("ИдентификаторНоменклатурыСервиса", "");
	НоменклатураКонтрагента.Вставить("ИдентификаторХарактеристикиСервиса", "");
	
	Возврат НоменклатураКонтрагента;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Процедура УстановитьСвойствоСтруктуры(Структура, Знач ИерархияСвойств, Знач Значение) Экспорт
	
	Если ТипЗнч(ИерархияСвойств) = Тип("Строка") Тогда
		ИерархияСвойств = СтрРазделить(ИерархияСвойств, ".");
	КонецЕсли;
	
	ТекущееСвойство = ИерархияСвойств[0];
	
	Если ИерархияСвойств.Количество() = 1 Тогда
		
		Структура.Вставить(ТекущееСвойство, Значение);
		
	Иначе
		
		ТекущееЗначение = Неопределено;
		Если Не Структура.Свойство(ТекущееСвойство, ТекущееЗначение) Тогда
			ТекущееЗначение = Новый Структура;
		КонецЕсли;
		ИерархияСвойств.Удалить(0);
		УстановитьСвойствоСтруктуры(ТекущееЗначение, ИерархияСвойств, Значение);
		Структура.Вставить(ТекущееСвойство, ТекущееЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормированияДокумента

Функция ТипРазделаДополнительныхПолейШапка() Экспорт
	Возврат "Шапка";
КонецФункции

Функция ТипРазделаДополнительныхПолейТаблица() Экспорт
	Возврат "Таблица";
КонецФункции

#КонецОбласти

#КонецОбласти