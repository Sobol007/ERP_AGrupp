
////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для работы с виджетами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавить виджет формы.
//
// Параметры:
//  Форма			 - УправляемаяФорма - Передаваемая форма.
//  ГруппаВиджеты	 - Строка - Группа отображения виджета. 
//  Виджет			 - СправочникСсылка.CRM_Виджеты - Ссылка на справочник CRM_Виджеты.
// 
// Возвращаемое значение:
//  Структура - Данные добавляемого виджета.
//
Функция ДобавитьВиджетФормы(Форма, ГруппаВиджеты = "ГруппаВиджеты", Виджет) Экспорт
	
	УдалитьЭлементыВиджетов(Форма);
	
	СписокВиджетовПользователя = ВиджетыПользователя(Форма.ТекущийПользователь);
	Если СписокВиджетовПользователя.Количество() > 0 Тогда
		ИндексНовогоВиджета = Формат(Число(СписокВиджетовПользователя[СписокВиджетовПользователя.Количество()-1].Представление)+1, "ЧЦ=2; ЧДЦ=; ЧВН=");
	Иначе
		ИндексНовогоВиджета = Формат(1, "ЧЦ=2; ЧДЦ=; ЧВН=")
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь 		= Форма.ТекущийПользователь;
	МенеджерЗаписи.Виджет 				= Виджет;
	МенеджерЗаписи.ИндексВиджета 		= ИндексНовогоВиджета;
	МенеджерЗаписи.ПериодОбновления 	= Виджет.ИсточникДанных.ПериодОбновления;
	МенеджерЗаписи.ТипАналитики 		= Перечисления.CRM_ВидыРазверткиПоказателей.Аналитика1;
	МенеджерЗаписи.ЗначениеАналитики 	= Форма.ТекущийПользователь;
	МенеджерЗаписи.Записать();
	
	Форма.СписокВиджетовПользователя = ВиджетыПользователя(Форма.ТекущийПользователь);
	Форма.КоличествоВиджетовНаФорме = Форма.СписокВиджетовПользователя.Количество();
	ИнициализироватьЭлементыВиджетов(Форма, ГруппаВиджеты);
	Для Каждого ЭлементСписка Из Форма.СписокВиджетовПользователя Цикл
		ИндексВиджета = ЭлементСписка.Представление; 
		ОбновитьВиджет(Форма, ИндексВиджета);
	КонецЦикла;
	
	ДанныеВиджета = Новый Структура;
	ДанныеВиджета.Вставить("Виджет",					Виджет);
	ДанныеВиджета.Вставить("ИндексВиджета",				ИндексНовогоВиджета);
	ДанныеВиджета.Вставить("ПериодОбновленияВиджета",	Виджет.ИсточникДанных.ПериодОбновления);
	
	Возврат ДанныеВиджета;
	
КонецФункции

// Удалить виджет формы.
//
// Параметры:
//  Форма			 - УправляемаяФорма - Передаваемая форма.
//  ГруппаВиджеты	 - Строка - Группа отображения виджета. 
//  Виджет			 - СправочникСсылка.CRM_Виджеты - Ссылка на справочник CRM_Виджеты.
// 
Процедура УдалитьВиджетФормы(Форма, ГруппаВиджеты = "ГруппаВиджеты", Виджет) Экспорт
	
	СписокВиджетовПользователя = ВиджетыПользователя(Форма.ТекущийПользователь);
	НайденныйЭлемент = СписокВиджетовПользователя.НайтиПоЗначению(Виджет);
	Если НайденныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВиджета = Формат(НайденныйЭлемент.Представление);
	
	УдалитьЭлементыВиджетов(Форма);
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь 		= Форма.ТекущийПользователь;
	МенеджерЗаписи.Виджет 				= Виджет;
	МенеджерЗаписи.ИндексВиджета 		= ИндексВиджета;
	МенеджерЗаписи.Удалить();
	
	// Пересчет порядковых номеров.
	Для Сч = Число(ИндексВиджета) По СписокВиджетовПользователя.Количество() Цикл
		ЭлементСписка = СписокВиджетовПользователя[Сч-1];
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь 		= Форма.ТекущийПользователь;
		МенеджерЗаписи.Виджет 				= ЭлементСписка.Значение;
		МенеджерЗаписи.ИндексВиджета 		= Формат(Сч+1, "ЧЦ=2; ЧДЦ=; ЧВН=");
		МенеджерЗаписи.Прочитать();
		Если ЗначениеЗаполнено(МенеджерЗаписи.Пользователь) Тогда
			МенеджерЗаписи.ИндексВиджета 	= Формат(Сч, "ЧЦ=2; ЧДЦ=; ЧВН=");
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Форма.СписокВиджетовПользователя = ВиджетыПользователя(Форма.ТекущийПользователь);
	Форма.КоличествоВиджетовНаФорме = Форма.СписокВиджетовПользователя.Количество();
	ИнициализироватьЭлементыВиджетов(Форма, ГруппаВиджеты);
	Для Каждого ЭлементСписка Из Форма.СписокВиджетовПользователя Цикл
		ИндексВиджета = ЭлементСписка.Представление; 
		ОбновитьВиджет(Форма, ИндексВиджета);
	КонецЦикла;
	
КонецПроцедуры

// Обновление виджета формы.
//
// Параметры:
//  Форма			 - УправляемаяФорма - Передаваемая форма.
//  ГруппаВиджеты	 - Строка - Группа отображения виджета. 
//
Процедура ОбновитьВиджетыФормы(Форма, ГруппаВиджеты = "ГруппаВиджеты") Экспорт
	
	УдалитьЭлементыВиджетов(Форма);
	
	Форма.СписокВиджетовПользователя = ВиджетыПользователя(Форма.ТекущийПользователь);
	Форма.КоличествоВиджетовНаФорме = Форма.СписокВиджетовПользователя.Количество();
	ИнициализироватьЭлементыВиджетов(Форма, ГруппаВиджеты);
	
	Для Каждого ЭлементСписка Из Форма.СписокВиджетовПользователя Цикл
		ИндексВиджета = ЭлементСписка.Представление; 
		ОбновитьВиджет(Форма, ИндексВиджета);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет текущий виджет.
//
// Параметры:
//  Форма			 - УправляемаяФорма - Передаваемая форма.
//  ИндексВиджета	 - Строка - Индекс виджета. 
//
Процедура ОбновитьВиджет(Форма, ИндексВиджета) Экспорт
	
	Для Каждого ЭлементСпискаВиджетов Из Форма.СписокВиджетовПользователя Цикл
		тВиджет = ЭлементСпискаВиджетов.Значение;
		тИндекс = ЭлементСпискаВиджетов.Представление; 
		тПользователь = Форма.ТекущийПользователь;
		Если ИндексВиджета = тИндекс Тогда
			Форма["Виджет" + тИндекс] = ЗаполнитьHTMLПолеВиджета(тВиджет, тИндекс, тПользователь);
			Прервать;
		ИначеЕсли ИндексВиджета = "Прочие" И Число(тИндекс) > 4 Тогда
			Форма["Виджет" + тИндекс] = ЗаполнитьHTMLПолеВиджета(тВиджет, тИндекс, тПользователь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получить значение аналитики из настроек виджета.
//
// Параметры:
//  Виджет			 - СправочникСсылка.CRM_Виджеты - Ссылка на справочник CRM_Виджеты.
//  ИндексВиджета	 - Строка - Индекс виджета. 
//  Пользователь	 - СправочникСсылка.Пользователи - Ссылка на пользователя. 
// 
// Возвращаемое значение:
//  Характеристика.CRM_ТипыАналитикПоказателей - Значение аналитики.
//
Функция ПолучитьЗначениеАналитикиИзНастроекВиджета(Виджет, ИндексВиджета = "", Пользователь) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь	 	= Пользователь;
	МенеджерЗаписи.Виджет 			= Виджет;
	МенеджерЗаписи.ИндексВиджета 	= ИндексВиджета;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() 
		И ИндексВиджета <> "" Тогда
		ЗначениеАналитики = МенеджерЗаписи.ЗначениеАналитики;
	Иначе
		ЗначениеАналитики = Пользователь;
	КонецЕсли;
	Возврат ЗначениеАналитики;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьЭлементыВиджетов(Форма)
	
	Если Форма.КоличествоВиджетовНаФорме = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивУдаляемых = Новый Массив;
	Для Каждого ЭлементВиджет Из Форма.СписокВиджетовПользователя Цикл
		ИндексВиджета = ЭлементВиджет.Представление;
		МассивУдаляемых.Добавить("Виджет" + ИндексВиджета);
		УдаляемыйЭлемент = Форма.Элементы.Найти("ГруппаВиджет" + ИндексВиджета);
		Если УдаляемыйЭлемент <> Неопределено Тогда
			Форма.Элементы.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(, МассивУдаляемых);
	
	Форма.СписокВиджетовПользователя = Новый СписокЗначений;
	Форма.КоличествоВиджетовНаФорме = 0;
	
КонецПроцедуры

Процедура ИнициализироватьЭлементыВиджетов(Форма, ГруппаВиджеты = "ГруппаВиджеты")
	
	// Добавим виджеты по новым данным.
	МассивДобавляемых = Новый Массив;
	МассивНовыхЭлементов = Новый Массив;
	Для Каждого ЭлементВиджет Из Форма.СписокВиджетовПользователя Цикл
		ИндексВиджета = ЭлементВиджет.Представление;
		СтрокаHTML = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
		МассивДобавляемых.Добавить(Новый РеквизитФормы("Виджет" + ИндексВиджета, СтрокаHTML));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемых,);
	
	// создадим элементы формы
	Индекс = 0;
	Для Каждого Реквизит Из МассивДобавляемых Цикл
		
		ЭлементСписка = Форма.СписокВиджетовПользователя.Получить(Индекс);
		Форма[Реквизит.Имя] = ЗаполнитьHTMLПолеВиджета(ЭлементСписка.Значение, ЭлементСписка.Представление, Форма.ТекущийПользователь);
		Индекс = Индекс + 1;
		
		НоваяГруппаФормы = Форма.Элементы.Вставить("Группа" + Реквизит.Имя, Тип("ГруппаФормы"), ?(ГруппаВиджеты <> "", Форма.Элементы[ГруппаВиджеты], Неопределено), Форма.Элементы.ДекорацияДобавитьНовыйВиджет);
		НоваяГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа; 
		НоваяГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппаФормы.ОтображатьЗаголовок = Ложь;
		НоваяГруппаФормы.Высота = 6;
		НоваяГруппаФормы.Ширина = 23; 
		НоваяГруппаФормы.РастягиватьПоВертикали = Ложь; 
		НоваяГруппаФормы.РастягиватьПоГоризонтали = Ложь; 
		
		НовыйЭлемент = Форма.Элементы.Добавить(Реквизит.Имя, Тип("ПолеФормы"), НоваяГруппаФормы);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		НовыйЭлемент.Высота = 6;
		НовыйЭлемент.Ширина = 23; 
		НовыйЭлемент.РастягиватьПоВертикали = Ложь; 
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь; 
		НовыйЭлемент.ПутьКДанным = Реквизит.Имя; 
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.УстановитьДействие("ПриНажатии", "Подключаемый_HTMLПриНажатии");
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьЭлементыВиджетов()

Функция ВиджетыПользователя(Пользователь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВиджетыПользователя = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиВиджетов.Виджет КАК Виджет,
	|	НастройкиВиджетов.ИндексВиджета КАК ИндексВиджета
	|ИЗ
	|	РегистрСведений.CRM_НастройкиВиджетов КАК НастройкиВиджетов
	|ГДЕ
	|	НастройкиВиджетов.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексВиджета");
	
	Запрос.Параметры.Вставить("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ВиджетыПользователя;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВиджетыПользователя.Добавить(Выборка.Виджет, Выборка.ИндексВиджета);
	КонецЦикла;
	
	Возврат ВиджетыПользователя;
	
КонецФункции

#Область HTMLВиджетов

// Заполняет поле виджета.
//
// Параметры:
//  Виджет			 - СправочникСсылка.CRM_Виджеты - Виджет.
//  ИндексВиджета	 - Число - Индекс виджета.
// 
// Возвращаемое значение:
//  Строка - Представление виджета.
//
Функция ЗаполнитьHTMLПолеВиджета(Виджет, ИндексВиджета = "", ТекущийПользователь)
	
	//УстановитьПривилегированныйРежим(Истина);
	
	Показатель = Виджет.ИсточникДанных;
	
	Заголовок = Показатель.КраткоеНаименование;
	Единица = Показатель.ЕдиницаИзмерения;
	
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь	 	= ТекущийПользователь;
	МенеджерЗаписи.Виджет 			= Виджет;
	МенеджерЗаписи.ИндексВиджета 	= ИндексВиджета;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() 
		И ИндексВиджета <> "" Тогда // Для виджета в АРМ Ключевых показателей - всегда по текущему пользователю.
		ТипАналитики = МенеджерЗаписи.ТипАналитики;
		ЗначениеАналитики = МенеджерЗаписи.ЗначениеАналитики;
	Иначе
		ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.Аналитика1;
		ЗначениеАналитики = ТекущийПользователь;
	КонецЕсли;
	Если ТипЗнч(ЗначениеАналитики) = Тип("СправочникСсылка.Пользователи") Тогда
		Менеджер = ЗначениеАналитики;
	Иначе
		Менеджер = Неопределено;
	КонецЕсли;
	ДатаРасчета = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	ТаблицаДанных = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьТаблицуПоказателя(Показатель, ДатаРасчета, Менеджер, Истина);
	КонтролируемыйПоказатель = Показатель.КонтролируемыйПоказатель;
	
	Если КонтролируемыйПоказатель = "" Тогда
		Возврат "";
	КонецЕсли;
	ТаблицаПлан = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьТаблицуПланаПоказателя(Показатель, ДатаРасчета, Менеджер, Ложь);
	ПланНеУстановлен = (ТаблицаПлан.Количество() = 0);
	Если ТаблицаДанных.Колонки.Найти(КонтролируемыйПоказатель) = Неопределено Тогда
		ЗначениеПоказателя	= 0;
		Цель				= 0;
		ЦветПоказателя		= 0;
		ДинамикаПоказателя	= Новый Структура();
		ДинамикаПоказателя.Вставить("Тренд", 0);
	Иначе	
		ЗначениеПоказателя	= ТаблицаДанных.Итог(КонтролируемыйПоказатель);
		Цель				= ТаблицаДанных.Итог("ЗначениеПоказателя");
		ЦветПоказателя		= CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьЦветПоказателя(Показатель, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ТекущийПользователь,, ТаблицаДанных);
		ДинамикаПоказателя	= CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьДинамикуПоказателя(Показатель, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ТекущийПользователь);
	КонецЕсли;
	Возврат HTMLПредставлениеВиджета(Заголовок, Единица, ЗначениеПоказателя, Цель, ЦветПоказателя, ДинамикаПоказателя, ИндексВиджета <> "", ПланНеУстановлен);
	
КонецФункции // ЗаполнитьHTMLПолеВиджета()

// Возвращает html представление виджета.
//
// Параметры:
//   Заголовок - Строка - html текст заголовка виджета.
//   Подвал - Строка - html текст подвала виджета.
//   ТелоВиджета - Строка - html текст тела виджета.
//   ФонаВиджета - Строка - цвет фона виджета в виде шестнадцатеричного значения.
//   ЦветРамкиТаблицы - Строка - цвет рамок таблиц в виджете, в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка - html представление виджета.
//
Функция HTMLПредставлениеВиджета(Заголовок = "", Единица = "", ЗначениеПоказателя, Цель, ЦветПоказателя, ДинамикаПоказателя, ОтображатьНастройки, ПланНеУстановлен)
	
	//УспешностьВиджета = ?(ДинамикаУспех <> Неопределено, ДинамикаУспех, РезультатУспех);
	//УспешностьВиджета =  ;
	ЗначениеСтрокой = Формат(ЗначениеПоказателя,"ЧДЦ=; ЧН=0; ЧГ=0");
	ДлинаЗначения = СтрДлина(ЗначениеСтрокой);
	ЗначениеПорядок = "";
	Если ДлинаЗначения > 3 И ДлинаЗначения <= 6 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' тыс'");
	ИначеЕсли ДлинаЗначения > 6 И ДлинаЗначения <= 9 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' млн'");
	ИначеЕсли ДлинаЗначения > 9 И ДлинаЗначения <= 12 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' млрд'");
	ИначеЕсли ДлинаЗначения > 12 И ДлинаЗначения <= 15 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' блн'");
	ИначеЕсли ДлинаЗначения > 15 И ДлинаЗначения <= 18 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' блрд'");
	ИначеЕсли ДлинаЗначения > 18 И ДлинаЗначения <= 21 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' трн'");
	ИначеЕсли ДлинаЗначения > 21 И ДлинаЗначения <= 24 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' тррд'");
	ИначеЕсли ДлинаЗначения > 24 И ДлинаЗначения <= 27 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' кван'");
	ИначеЕсли ДлинаЗначения > 27 И ДлинаЗначения <= 30 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' квард'");
	ИначеЕсли ДлинаЗначения > 30 И ДлинаЗначения <= 33 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' квин'");
	ИначеЕсли ДлинаЗначения > 33 И ДлинаЗначения <= 36 Тогда
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя/1000000000000000000000000000000000), "ЧДЦ=; ЧН=0; ЧГ=0");
		ЗначениеПорядок = НСтр("ru = ' квирд'");
	Иначе                             
		ЗначениеСтрокой = Формат(Окр(ЗначениеПоказателя), "ЧДЦ=; ЧН=0; ЧГ=0");
	КонецЕсли;
	
	ЕдиницаИзмеренияСтрокой = НРег(?(ЗначениеПорядок <> "", ЗначениеПорядок, "") + ?(Единица <> "", " " + Лев(Единица, 3), ""));
	//ДвоичныеДанныеКартинки = БиблиотекаКартинок.CRM_ВиджетНастроить.ПолучитьДвоичныеДанные();
	//Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	//КартинкаШестеренка = "data:image/" + БиблиотекаКартинок.CRM_ВиджетНастроить.Формат() + ";base64," + Base64ДанныеКартинки;
	КартинкаШестеренка1 = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.CRM_ВиджетНастроить, Новый УникальныйИдентификатор);
	
	//ДвоичныеДанныеКартинки = БиблиотекаКартинок.CRM_ВиджетНастроитьАктивная.ПолучитьДвоичныеДанные();
	//Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	//КартинкаШестеренкаАкт = "data:image/" + БиблиотекаКартинок.CRM_ВиджетНастроитьАктивная.Формат() + ";base64," + Base64ДанныеКартинки;
	КартинкаШестеренкаАкт1 = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.CRM_ВиджетНастроитьАктивная, Новый УникальныйИдентификатор);
	
	HTMLТекст = "<html><head>
	|<style type=""text/css"">
	|	html {
	//|		width: 220px;
	//|		height: 80px;
	|		width: 100%;
	|		height: 100%;
	|";
	Если ПланНеУстановлен Тогда
		HTMLТекст = HTMLТекст + "border-width: 1px;
		|border-color: #e4e4e4;
		|";	
	Иначе	
		HTMLТекст = HTMLТекст + "border-width: " + ?(ЦветПоказателя = 0, "1px 1px 1px 3px", "1px") + ";
		|border-color: " + ?(ЦветПоказателя = 0, "#e4e4e4 #e4e4e4 #e4e4e4 #d34343", "#e4e4e4") + ";
		|";	
	КонецЕсли;
	HTMLТекст = HTMLТекст + "border-style: solid;
	|		}
	|	body {
	|		overflow: hidden;
	|		margin-top:  0px;
	|		margin-bottom: 0px;
	|		margin-left: 0px;
	|		margin-right: 0px;
	|		background-color: #f5f5f5;
	|		}
	|	a {
	|		text-decoration: none;
	|	}
	//|	a.rollover {
	//|		background: url(" + КартинкаШестеренка + "); /* Путь к файлу с исходным рисунком  */
	//|		background-repeat: no-repeat;
	//|		position: absolute;
	//|		top: 5px;
	//|		right: 5px;
	//|		display: block; /*  Рисунок как блочный элемент */
	//|		width: 16px; /* Ширина рисунка */
	//|		height: 16px; /*  Высота рисунка */
	//|	}
	//|	a.rollover:hover {
	//|		background: url(" + КартинкаШестеренкаАкт + "); /* Путь к файлу с заменяемым рисунком  */
	//|		background-repeat: no-repeat;
	//|	}
	|	.bottomdiv {
	|		position: fixed;
	|		bottom: 4px;
	|		right: 6px;
	//|		width: 220px;
	|		width: 100%;
	|		text-align: right;
	|		vertical-align: bottom;
	|		height: 8px;
	|	}
	|	.bottomdivnew {
	|		position: fixed;
	|		bottom: 4px;
	|		right: 6px;
	//|		width: 220px;
	|		width: 100%;
	|		text-align: left;
	|		vertical-align: bottom;
	|		height: 8px;
	|	}
	|</style>
	|<body>";
	
	// группа Настройка
	//HTMLТекст = HTMLТекст + "<a href=""РасшифроватьЗначение"">";
	
	HTMLТекст = HTMLТекст + "<table width=""100%"" height=""20%"">";
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td width=""93%"">";
	Если ПланНеУстановлен Тогда
		HTMLТекст = HTMLТекст + "<font face=""Arial"" size=""1"" color=""#888888"">";
		HTMLТекст = HTMLТекст + НСтр("ru = 'План не установлен'");
		HTMLТекст = HTMLТекст + "</font>";
	КонецЕсли;	
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "<td width=""7%"">";
	Если ОтображатьНастройки Тогда
	HTMLТекст = HTMLТекст + "<a href=""НастройкаВиджета""><img border=0 title="""+НСтр("ru = 'Настройка'")+""" src="""+КартинкаШестеренка1+""" onmouseover=""this.src='"+КартинкаШестеренкаАкт1+"';"" onmouseout=""this.src='"+КартинкаШестеренка1+"';""></a>";
	//HTMLТекст = HTMLТекст + "<a href=""НастройкаВиджета"" class=""rollover""></a>";
	Иначе
		HTMLТекст = HTMLТекст + "&nbsp";
	КонецЕсли;
	HTMLТекст = HTMLТекст + "</td></tr></table>";
	
	// основная группа
	//   R  G  B
	// #B2 22 22 - красный цвет
	// #FF 8C 00 - желтый цвет
	// #3C B3 71 - зеленый цвет

	HTMLТекст = HTMLТекст + "<table width=""100%"" height=""60%"">";
	HTMLТекст = HTMLТекст + "<tr>";
	//HTMLТекст = HTMLТекст + "<td width=""85px"" height=""64px"" align=""center"">";
	HTMLТекст = HTMLТекст + "<td width=""39%"" align=""center"">";
	Если ЦветПоказателя = 0 Тогда
		HTMLТекст = HTMLТекст + "<font face=""Arial"" size=""6"" color=""#B22222"">";
	ИначеЕсли ЦветПоказателя = 1 Тогда
		HTMLТекст = HTMLТекст + "<font face=""Arial"" size=""6"" color=""#FF8C00"">";
	ИначеЕсли ЦветПоказателя = 2 Тогда
		HTMLТекст = HTMLТекст + "<font face=""Arial"" size=""6"" color=""#3CB371"">";
	КонецЕсли;	
	Если ПланНеУстановлен Тогда
		HTMLТекст = HTMLТекст + "<font face=""Arial"" size=""6"" color=""#888888"">";
	КонецЕсли;	
	HTMLТекст = HTMLТекст + ЗначениеСтрокой;
	HTMLТекст = HTMLТекст + "</font>";
	//HTMLТекст = HTMLТекст + "</td>";
	Если НЕ ПланНеУстановлен Тогда
		//HTMLТекст = HTMLТекст + "<td width=""20px"" height=""64px"" align=""center"">";
		Если ДинамикаПоказателя.Тренд = -1 Тогда
			ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.CRM_ВиджетыДинамикаОтрицательнаяВниз);
		ИначеЕсли ДинамикаПоказателя.Тренд = 0 Тогда
			ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.CRM_ВиджетыДинамикаНет);
		ИначеЕсли ДинамикаПоказателя.Тренд = 1 Тогда
			ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.CRM_ВиджетыДинамикаПоложительнаяВверх);
		КонецЕсли;
	КонецЕсли;	
			
	//HTMLТекст = HTMLТекст + "<br>";
	HTMLТекст = HTMLТекст + "</td>";
	
	// заголовок виджета
	//HTMLТекст = HTMLТекст + "<td width=""115px"" height=""64px"" align=""left"">";
	HTMLТекст = HTMLТекст + "<td width=""52%"" align=""left"">";
	HTMLТекст = HTMLТекст + "<font face=""Arial"" size=""1"" color=""#666666"">";
	HTMLТекст = HTMLТекст + Заголовок + ?(ЕдиницаИзмеренияСтрокой <> "", ", " + ЕдиницаИзмеренияСтрокой, "");
	HTMLТекст = HTMLТекст + "</font>";
	HTMLТекст = HTMLТекст + "</td></tr></table>";
	
	HTMLТекст = HTMLТекст + "<table width=""100%"" height=""20%"">";
	HTMLТекст = HTMLТекст + "<tr width=""100%"">";
	HTMLТекст = HTMLТекст + "<td align=""left"" width=""50%"">";
	// группа Расшифровать
	//HTMLТекст = HTMLТекст + "<div class=""bottomdivnew"">";
	HTMLТекст = HTMLТекст + "<font face=""Arial"" size=""1"" color=""#0066cc"">";
	HTMLТекст = HTMLТекст + "<a href=""Расшифровать"">" + НСтр("ru='Расшифровать';en='Decrypt'") + "</a>";
	HTMLТекст = HTMLТекст + "</font>";
	//HTMLТекст = HTMLТекст + "</div>";
	HTMLТекст = HTMLТекст + "</td>";	
	// группа Обновить
	HTMLТекст = HTMLТекст + "<td align=""right"" width=""50%"">";
	//HTMLТекст = HTMLТекст + "<div class=""bottomdiv"">";
	HTMLТекст = HTMLТекст + "<font face=""Arial"" size=""1"" color=""#0066cc"">";
	HTMLТекст = HTMLТекст + "<a href=""Обновить"">" + НСтр("ru='Обновить';en='Update'") + "</a>";
	HTMLТекст = HTMLТекст + "</font>";
		
	//HTMLТекст = HTMLТекст + "</div>";
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	HTMLТекст = HTMLТекст + "</table>";
	//// белая полоса внизу
	//HTMLТекст = HTMLТекст + "<table><tr height=""1px"" bgcolor=""#ffffff""></tr></table>";
	
	//HTMLТекст = HTMLТекст + "</a>";
	HTMLТекст = HTMLТекст + "</body></html>";
	
	УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

// Добавляет картинку в текст html.
//
// Параметры:
//   HTMLТекст - Строка - текст html.
//   Картинка - Картинка.
//   Ссылка - Строка - ссылки для вставки в тег <a>.
//
Процедура ДобавитьКартинку(HTMLТекст, Картинка, Ссылка = "")
	
	ДвоичныеДанныеКартинки = Картинка.ПолучитьДвоичныеДанные();
	Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		HTMLТекст = HTMLТекст + "<a href=" + Ссылка + ">";
	КонецЕсли;
	
	HTMLТекст = HTMLТекст
		+ "<img src='data:image/"
		+ Картинка.Формат()
		+ ";base64,"
		+ Base64ДанныеКартинки + "'; border = ""0"";>";
		
	Если ЗначениеЗаполнено(Ссылка) Тогда
		HTMLТекст = HTMLТекст + "</a>";
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКартинку()

// Удаляет вредоносный код html из текста.
//
// Параметры:
//   Текст - Строка - текст.
//
Процедура УдалитьВредоносныйКодИзТекста(Текст)
	
	НРегТекст = НРег(Текст);
	
	МассивСтрокБезВредоносногоТекста = Новый Массив;
	
	// Удаление скриптов
	НомерСкрипта = 1;
	ПозицияНачалаОбработки = 1;
	
	Пока Истина Цикл
		
		ПозицияНачалаОткрывающегоТегаScript = СтрНайти(НРегТекст, "<script",,, НомерСкрипта);
		ПозицияНачалаЗакрывающегоТегаScript = СтрНайти(НРегТекст, "</script",,, НомерСкрипта);
		
		Если ПозицияНачалаОткрывающегоТегаScript = 0 Или ПозицияНачалаЗакрывающегоТегаScript = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияОкончанияОткрывающегоТегаScript = СтрНайти(НРегТекст, ">",, ПозицияНачалаОткрывающегоТегаScript + 1);
		ПозицияОкончанияЗакрывающегоТегаScript = СтрНайти(НРегТекст, ">",, ПозицияНачалаЗакрывающегоТегаScript + 1);
		
		Если ПозицияОкончанияОткрывающегоТегаScript = 0 Или ПозицияОкончанияЗакрывающегоТегаScript = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Добавим текст до скрипта
		ТекстДоСкрипта = Сред(Текст, ПозицияНачалаОбработки, ПозицияНачалаОткрывающегоТегаScript - ПозицияНачалаОбработки);
		МассивСтрокБезВредоносногоТекста.Добавить(ТекстДоСкрипта);
		
		ПозицияНачалаОбработки = ПозицияОкончанияЗакрывающегоТегаScript + 1;
		НомерСкрипта = НомерСкрипта + 1;
		
	КонецЦикла;
	
	Если МассивСтрокБезВредоносногоТекста.Количество() > 0 Тогда
		
		// Добавим текст после последнего скрипта.
		ТекстДоСкрипта = Сред(Текст, ПозицияНачалаОбработки);
		МассивСтрокБезВредоносногоТекста.Добавить(ТекстДоСкрипта);
		
		// Сформируем итоговую строку без скрипта.
		Текст = СтрСоединить(МассивСтрокБезВредоносногоТекста);
	КонецЕсли;
	
КонецПроцедуры // УдалитьВредоносныйКодИзТекста()

#КонецОбласти

#КонецОбласти
