
////////////////////////////////////////////////////////////////////////////////
// Синхронизация календарей
//  
////////////////////////////////////////////////////////////////////////////////
#Область СлужебныйПрограммныйИнтерфейс

#Область Синхронизация

Функция ОписанияКалендарей(СервисКалендарей, ДанныеАвторизации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
		Возврат CRM_ОбменСGoogle.ОписанияКалендарей(ДанныеАвторизации);
	Иначе
		Возврат CRM_СинхронизацияКалендарейПереопределяемый.ОписанияКалендарей(СервисКалендарей, ДанныеАвторизации);
	КонецЕсли;
	
КонецФункции

Процедура СинхронизироватьКалендарь(ДанныеАвторизации, Знач АдресХранилища = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнициализироватьУзелПланаОбменаДляКалендаря();
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Календарь = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "КалендарьДляСинхронизации");
	Если Не ЗначениеЗаполнено(Календарь) Тогда
		Возврат;
	КонецЕсли;
	
	СервисКалендарей = Календарь.СервисКалендарей;
	Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
		CRM_ОбменСGoogle.ВыгрузитьДанныеКалендаря(Календарь, ДанныеАвторизации);
		CRM_ОбменСGoogle.ЗагрузитьДанныеКалендаря(Календарь, ДанныеАвторизации);
	Иначе
		CRM_СинхронизацияКалендарейПереопределяемый.ВыгрузитьДанныеКалендаря(СервисКалендарей, Календарь, ДанныеАвторизации);
		CRM_СинхронизацияКалендарейПереопределяемый.ЗагрузитьДанныеКалендаря(СервисКалендарей, Календарь, ДанныеАвторизации);
	КонецЕсли;
	
	УзелОбмена = ПланыОбмена.CRM_СинхронизацияКалендарей.УзелДляКалендаря(Календарь);
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбменаОбъект.ДатаПоследнейСинхронизации = ТекущаяДатаСеанса();
	УзелОбменаОбъект.Записать();
	
КонецПроцедуры

Процедура УдалитьВзаимодействиеИзКалендаря(Взаимодействие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ответственный = Взаимодействие.Ответственный;
	Календарь = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный, "КалендарьДляСинхронизации");
	
	Если Не ЗначениеЗаполнено(Календарь) Тогда
		Возврат;
	КонецЕсли;
	
	СервисКалендарей = Календарь.СервисКалендарей;
	
	Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
		CRM_ОбменСGoogle.УдалитьВзаимодействиеИзКалендаря(Календарь, Взаимодействие);
	Иначе
		CRM_СинхронизацияКалендарейПереопределяемый.УдалитьВзаимодействиеИзКалендаря(СервисКалендарей, Календарь, Взаимодействие);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Авторизация

Процедура ПрочитатьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, Пользователь) Экспорт
	
	Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
		CRM_ОбменСGoogle.ПрочитатьДанныеАвторизации(ДанныеАвторизации, Пользователь);
	Иначе
		CRM_СинхронизацияКалендарейПереопределяемый.ПрочитатьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, Пользователь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, Пользователь) Экспорт
	
	Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
		CRM_ОбменСGoogle.ОбновитьДанныеАвторизации(ДанныеАвторизации, Пользователь);
	Иначе
		CRM_СинхронизацияКалендарейПереопределяемый.ОбновитьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, Пользователь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, Пользователь) Экспорт
	
	Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
		CRM_ОбменСGoogle.ЗаписатьДанныеАвторизации(ДанныеАвторизации, Пользователь);
	Иначе
		CRM_СинхронизацияКалендарейПереопределяемый.ЗаписатьДанныеАвторизации(СервисКалендарей, ДанныеАвторизации, Пользователь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанныеАвторизации(СервисКалендарей, Пользователь) Экспорт
	
	Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
		CRM_ОбменСGoogle.УдалитьДанныеАвторизации(Пользователь);
	Иначе
		CRM_СинхронизацияКалендарейПереопределяемый.УдалитьДанныеАвторизации(СервисКалендарей, Пользователь);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеАвторизацииДействительны(СервисКалендарей, ДанныеАвторизации) Экспорт
	
	Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
		Возврат CRM_ОбменСGoogle.ДанныеАвторизацииДействительны(ДанныеАвторизации);
	Иначе
		Возврат CRM_СинхронизацияКалендарейПереопределяемый.ДанныеАвторизацииДействительны(СервисКалендарей, ДанныеАвторизации);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Заполнение

Функция СтруктураДанныхВзаимодействия() Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("Идентификатор",				"");
	ДанныеЗаполнения.Вставить("ETag",						"");
	
	ДанныеЗаполнения.Вставить("ДатаНачала",					Дата(1,1,1));
	ДанныеЗаполнения.Вставить("ДатаОкончания",				Дата(1,1,1));
	ДанныеЗаполнения.Вставить("НаВесьДень",					Ложь);
	
	ДанныеЗаполнения.Вставить("Тема",						"");
	ДанныеЗаполнения.Вставить("Содержание",					"");
	ДанныеЗаполнения.Вставить("Комментарий",				"");
	ДанныеЗаполнения.Вставить("Место",						"");
	ДанныеЗаполнения.Вставить("Отменено",					Ложь);
	ДанныеЗаполнения.Вставить("ИндексЦвета",				"");
	ДанныеЗаполнения.Вставить("Гиперссылка",				"");

	ДанныеЗаполнения.Вставить("ГостиМогутИзменятьСобытие",	Ложь);
	ДанныеЗаполнения.Вставить("ГостиМогутВидетьГостей",		Истина);
	ДанныеЗаполнения.Вставить("ГостиМогутПриглашатьГостей",	Истина);
	
	ДанныеЗаполнения.Вставить("Участники",					Новый Массив);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаполнитьВзаимодействие(Календарь, ДанныеЗаполнения) Экспорт
	
	Пользователь = Календарь.Пользователь;
	
	ВзаимодействиеОбъект = РегистрыСведений.CRM_СобытияКалендаря.СобытиеКалендаряПоИдентификатору(
		ДанныеЗаполнения.Идентификатор,
		Пользователь);
	
	Попытка
		ВзаимодействиеОбъект.Заблокировать();
	Исключение
		Возврат;
	КонецПопытки;
	
	ДатаНачалаСинхронизации = Календарь.СервисКалендарей.ДатаНачалаСинхронизации;
	Если ЗначениеЗаполнено(ВзаимодействиеОбъект.Дата) И
		ВзаимодействиеОбъект.Дата < ДатаНачалаСинхронизации Тогда
		Возврат;
	КонецЕсли;
	
	СтатусОтменено = Справочники.CRM_СостоянияСобытий.Отменено;
	СтатусЗавершено = Справочники.CRM_СостоянияСобытий.Завершено;
	СтатусЗапланировано = Справочники.CRM_СостоянияСобытий.Запланировано;
	
	Если ВзаимодействиеОбъект.СтатусВзаимодействия <> СтатусЗавершено Тогда
		Если ДанныеЗаполнения.Отменено Тогда
			ВзаимодействиеОбъект.СтатусВзаимодействия = СтатусОтменено;
		Иначе
			ВзаимодействиеОбъект.СтатусВзаимодействия = СтатусЗапланировано;
		КонецЕсли;
	КонецЕсли;
	
	Если ВзаимодействиеОбъект.СтатусВзаимодействия = СтатусОтменено И Не ЗначениеЗаполнено(ВзаимодействиеОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	//ВзаимодействиеОбъект.ОбменДанными.Загрузка = Истина;
	ВзаимодействиеОбъект.ДополнительныеСвойства.Вставить("ИмпортИзВнешнегоКалендаря", Истина);
	ВзаимодействиеОбъект.ДополнительныеСвойства.Вставить("Идентификатор",			ДанныеЗаполнения.Идентификатор);
	ВзаимодействиеОбъект.ДополнительныеСвойства.Вставить("ETag",					ДанныеЗаполнения.ETag);
	ВзаимодействиеОбъект.ДополнительныеСвойства.Вставить("ИндексЦвета",				ДанныеЗаполнения.ИндексЦвета);
	ВзаимодействиеОбъект.ДополнительныеСвойства.Вставить("Гиперссылка",				ДанныеЗаполнения.Гиперссылка);
	
	Если ВзаимодействиеОбъект.СтатусВзаимодействия = СтатусОтменено Или ВзаимодействиеОбъект.СтатусВзаимодействия = СтатусЗавершено Тогда
		ВзаимодействиеОбъект.Записать();
		ВзаимодействиеОбъект.ОтразитьВКалендаре();
		Возврат;
	КонецЕсли;
	
	#Область ОсновныеРеквизиты
	
	Если Не ЗначениеЗаполнено(ВзаимодействиеОбъект.СтатусВзаимодействия) Тогда
		ВзаимодействиеОбъект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Запланировано;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВзаимодействиеОбъект.ВидВзаимодействия) Тогда
		ВзаимодействиеОбъект.ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.Встреча;
	КонецЕсли;
	
	ВзаимодействиеОбъект.Дата = ТекущаяДатаСеанса();
	
	Если ДанныеЗаполнения.НаВесьДень Тогда
		ВзаимодействиеОбъект.ПлановаяДата			= НачалоДня(ДанныеЗаполнения.ДатаНачала); 
		ВзаимодействиеОбъект.ПлановаяДатаЗавершение	= КонецДня(ДанныеЗаполнения.ДатаНачала);
		ВзаимодействиеОбъект.НаВесьДень				= Истина;
	Иначе
		ВзаимодействиеОбъект.ПлановаяДата			= ДанныеЗаполнения.ДатаНачала;
		ВзаимодействиеОбъект.ПлановаяДатаЗавершение	= ДанныеЗаполнения.ДатаОкончания;
	КонецЕсли;
	
	ВзаимодействиеОбъект.Тема						= ДанныеЗаполнения.Тема;
	
	СодержаниеВзаимодействия = ДанныеЗаполнения.Содержание;
	Если Не ЗначениеЗаполнено(ВзаимодействиеОбъект.Ссылка) Тогда
		Если СтрНайти(СодержаниеВзаимодействия, ДанныеЗаполнения.Комментарий) = 0 Тогда
			Если ЗначениеЗаполнено(СодержаниеВзаимодействия) Тогда
				СодержаниеВзаимодействия = СодержаниеВзаимодействия + Символы.ПС + Символы.ПС + ДанныеЗаполнения.Комментарий;
			Иначе
				СодержаниеВзаимодействия = ДанныеЗаполнения.Комментарий;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ВзаимодействиеОбъект.Содержание					= СодержаниеВзаимодействия;
	
	ВзаимодействиеОбъект.Автор = Пользователь;
	ВзаимодействиеОбъект.Ответственный = Пользователь;
	ВзаимодействиеОбъект.Подразделение = ВзаимодействиеОбъект.Ответственный.Подразделение;
	
	МестоСобытия = ДанныеЗаполнения.Место;
	ПомещениеСобытия = Справочники.CRM_Помещения.Другое;
	
	Если ЗначениеЗаполнено(МестоСобытия) Тогда
		НайденноеПомещение = Справочники.CRM_Помещения.НайтиПоНаименованию(МестоСобытия);
		Если ЗначениеЗаполнено(НайденноеПомещение) Тогда
			ПомещениеСобытия = НайденноеПомещение;
		КонецЕсли;
	КонецЕсли;
	
	ВзаимодействиеОбъект.Место = МестоСобытия;
	ВзаимодействиеОбъект.Помещение = ПомещениеСобытия;
	
	#КонецОбласти
	
	#Область Участники
	
	ВзаимодействиеОбъект.ГостиМогутИзменятьМероприятие		= ДанныеЗаполнения.ГостиМогутИзменятьСобытие; 
	ВзаимодействиеОбъект.ГостиМогутВидетьСписокГостей		= ДанныеЗаполнения.ГостиМогутВидетьГостей;
	ВзаимодействиеОбъект.ГостиМогутПриглашатьДругихГостей	= ДанныеЗаполнения.ГостиМогутПриглашатьГостей;
	
	СвоиЛица = ВзаимодействиеОбъект.СвоиЛица.ВыгрузитьКолонки();
	СторонниеЛица = ВзаимодействиеОбъект.СторонниеЛица.ВыгрузитьКолонки();
	
	// Участников без e-mail нужно оставить как есть.
	Для Каждого СтрокаУчастника Из ВзаимодействиеОбъект.СвоиЛица Цикл
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Адрес) Тогда
			ЗаполнитьЗначенияСвойств(СвоиЛица.Добавить(), СтрокаУчастника);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУчастника Из ВзаимодействиеОбъект.СторонниеЛица Цикл
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Адрес) Тогда
			ЗаполнитьЗначенияСвойств(СторонниеЛица.Добавить(), СтрокаУчастника);
		КонецЕсли;
	КонецЦикла;
	
	// Участников с e-mail взять из данных события.
	ОтветственныйПосетитМероприятие = 0;
	Для Каждого Участник Из ДанныеЗаполнения.Участники Цикл
		
		// Опознали себя.
		Если Участник.УчастникЭтоЯ Тогда
			ОтветственныйПосетитМероприятие = Участник.УчастникОтклик;
			Продолжить;
		КонецЕсли;
		
		// Нашли участника в своих лицах.
		НайденнаяСтрока = ВзаимодействиеОбъект.СвоиЛица.Найти(Участник.УчастникАдрес, "Адрес");
		Если НайденнаяСтрока <> Неопределено Тогда
			НоваяСтрока = СвоиЛица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.ПосетитМероприятие	= Участник.УчастникОтклик;
			Продолжить;
		КонецЕсли;
		
		// Нашли участника в сторонних лицах.
		НайденнаяСтрока = ВзаимодействиеОбъект.СторонниеЛица.Найти(Участник.УчастникАдрес, "Адрес");
		Если НайденнаяСтрока <> Неопределено Тогда
			НоваяСтрока = СторонниеЛица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.ПосетитМероприятие	= Участник.УчастникОтклик;
			Продолжить;
		КонецЕсли;
		
		// Не нашли.
		ДанныеКонтакта = КонтактПоEMail(Участник.УчастникАдрес);
		Если ДанныеКонтакта <> Неопределено Тогда
			
			Если ДанныеКонтакта.Контакт = Пользователь Тогда
				ОтветственныйПосетитМероприятие = Участник.УчастникОтклик;
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеКонтакта.Контакт) = Тип("СправочникСсылка.Пользователи") Или
				ТипЗнч(ДанныеКонтакта.Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				НоваяСтрока = СвоиЛица.Добавить();
				НоваяСтрока.Лицо				= ДанныеКонтакта.Контакт;
				НоваяСтрока.Адрес				= Участник.УчастникАдрес;
				НоваяСтрока.ПосетитМероприятие	= Участник.УчастникОтклик;
			ИначеЕсли ТипЗнч(ДанныеКонтакта.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				НоваяСтрока = СторонниеЛица.Добавить();
				НоваяСтрока.Партнер				= ДанныеКонтакта.Владелец;
				НоваяСтрока.КонтактноеЛицо		= ДанныеКонтакта.Контакт;
				НоваяСтрока.Адрес				= Участник.УчастникАдрес;
			ИначеЕсли ТипЗнч(ДанныеКонтакта.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				НоваяСтрока = СторонниеЛица.Добавить();
				НоваяСтрока.Партнер				= ДанныеКонтакта.Контакт;
				НоваяСтрока.Адрес				= Участник.УчастникАдрес;
			КонецЕсли;
			
		Иначе
			ФизическоеЛицо = СоздатьФизическоеЛицо(Участник.УчастникИмя, Участник.УчастникАдрес);
			НоваяСтрока = СвоиЛица.Добавить();
			НоваяСтрока.Адрес				= Участник.УчастникАдрес;
			НоваяСтрока.Лицо				= ФизическоеЛицо;
			НоваяСтрока.ПосетитМероприятие	= Участник.УчастникОтклик;
		КонецЕсли;
		
	КонецЦикла;
	
	ВзаимодействиеОбъект.ОтветственныйПосетитМероприятие = ОтветственныйПосетитМероприятие;
	
	Если СвоиЛица.Количество() = 0 Тогда
		ВзаимодействиеОбъект.СвоиЛица.Очистить();
	Иначе
		ВзаимодействиеОбъект.СвоиЛица.Загрузить(СвоиЛица);
	КонецЕсли;
	Если СторонниеЛица.Количество() = 0 Тогда
		ВзаимодействиеОбъект.СторонниеЛица.Очистить();
	Иначе
		ВзаимодействиеОбъект.СторонниеЛица.Загрузить(СвоиЛица);
	КонецЕсли;
	
	#КонецОбласти
	
	ВзаимодействиеОбъект.Записать();
	ВзаимодействиеОбъект.ОтразитьВКалендаре();
	
КонецПроцедуры

Функция ПрочитатьВзаимодействие(Календарь, Взаимодействие) Экспорт
	
	ДанныеВзаимодействия = СтруктураДанныхВзаимодействия();
	
	ДанныеСобытия = РегистрыСведений.CRM_СобытияКалендаря.ИдентификаторыПоСобытиюКалендаря(Взаимодействие.Ссылка, Календарь.Пользователь);
	Идентификатор			= ДанныеСобытия.Идентификатор;
	ETag					= ДанныеСобытия.ETag;
	ИндексЦвета				= ДанныеСобытия.ИндексЦвета;
	
	ДанныеВзаимодействия.Идентификатор				= Идентификатор;
	ДанныеВзаимодействия.ETag						= ETag;
	ДанныеВзаимодействия.Отменено					= Взаимодействие.ПометкаУдаления Или
		Взаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено Или
		Взаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
	
	#Область ОсновныеРеквизиты
	
	ДанныеВзаимодействия.ДатаНачала					= Взаимодействие.ПлановаяДата;
	ДанныеВзаимодействия.ДатаОкончания				= Взаимодействие.ПлановаяДатаЗавершение;
	ДанныеВзаимодействия.НаВесьДень					= Взаимодействие.НаВесьДень;
	
	ДанныеВзаимодействия.Тема						= Взаимодействие.Тема;
	ДанныеВзаимодействия.Содержание					= Взаимодействие.Содержание;
	ДанныеВзаимодействия.Место						= Взаимодействие.Место;
	ДанныеВзаимодействия.ИндексЦвета				= ИндексЦвета;
	
	#КонецОбласти
	
	#Область Участники
	
	ДанныеВзаимодействия.ГостиМогутИзменятьСобытие	= Взаимодействие.ГостиМогутИзменятьМероприятие;
	ДанныеВзаимодействия.ГостиМогутВидетьГостей		= Взаимодействие.ГостиМогутВидетьСписокГостей;
	ДанныеВзаимодействия.ГостиМогутПриглашатьГостей	= Взаимодействие.ГостиМогутПриглашатьДругихГостей;
	
	Если Взаимодействие.ОтветственныйПосетитМероприятие <> 0 Тогда
		ОрганизаторАдрес = EmailКонтакта(Взаимодействие.Ответственный);
		Если ЗначениеЗаполнено(ОрганизаторАдрес) Тогда
			НовыйУчастник = Новый Структура;
			НовыйУчастник.Вставить("УчастникИмя", Строка(Взаимодействие.Ответственный));
			НовыйУчастник.Вставить("УчастникАдрес", ОрганизаторАдрес);
			НовыйУчастник.Вставить("УчастникОтклик", Взаимодействие.ОтветственныйПосетитМероприятие);
			ДанныеВзаимодействия.Участники.Добавить(НовыйУчастник);
		КонецЕсли;
	КонецЕсли;
	Для Каждого ДанныеУчастника Из Взаимодействие.СвоиЛица Цикл
		УчастникАдрес = ДанныеУчастника.Адрес;
		Если ЗначениеЗаполнено(УчастникАдрес) Тогда
			НовыйУчастник = Новый Структура;
			НовыйУчастник.Вставить("УчастникИмя", ?(ЗначениеЗаполнено(ДанныеУчастника.Лицо), Строка(ДанныеУчастника.Лицо), ДанныеУчастника.Адрес));
			НовыйУчастник.Вставить("УчастникАдрес", УчастникАдрес);
			НовыйУчастник.Вставить("УчастникОтклик", ДанныеУчастника.ПосетитМероприятие);
			ДанныеВзаимодействия.Участники.Добавить(НовыйУчастник);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеУчастника Из Взаимодействие.СторонниеЛица Цикл
		УчастникАдрес = ДанныеУчастника.Адрес;
		Если ЗначениеЗаполнено(УчастникАдрес) Тогда
			НовыйУчастник = Новый Структура;
			НовыйУчастник.Вставить("УчастникИмя", ?(ЗначениеЗаполнено(ДанныеУчастника.КонтактноеЛицо), Строка(ДанныеУчастника.КонтактноеЛицо), Строка(ДанныеУчастника.Партнер)));
			НовыйУчастник.Вставить("УчастникАдрес", УчастникАдрес);
			НовыйУчастник.Вставить("УчастникОтклик", ДанныеУчастника.ПосетитМероприятие);
			ДанныеВзаимодействия.Участники.Добавить(НовыйУчастник);
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	ДанныеВзаимодействия.Вставить("Ссылка", Взаимодействие.Ссылка);
	ДанныеВзаимодействия.Вставить("ОтправлятьУведомление", Взаимодействие.РассылатьУведомленияПриИзменении);
	
	Возврат ДанныеВзаимодействия;
	
КонецФункции

#КонецОбласти

#Область Вспомогательные

Функция ВключенаСинхронизацияКалендаря(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПользователиСНастроеннымиСинхронизациями = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПользователей.Значение КАК Календарь
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьДляСинхронизации)
	|	И НастройкиПользователей.Пользователь = &Пользователь");
	
	ЗапросПользователиСНастроеннымиСинхронизациями.Параметры.Вставить("Пользователь", Пользователь);
	РезультатЗапроса = ЗапросПользователиСНастроеннымиСинхронизациями.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Обработчик регламентного задания CRM_СинхронизацияКалендарей
//
Процедура ЗаданиеСинхронизироватьКалендарь() Экспорт
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПользователиСНастроеннымиСинхронизациями = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Значение КАК Календарь,
	|	Календари.СервисКалендарей КАК СервисКалендарей
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_КалендариСотрудников КАК Календари
	|		ПО НастройкиПользователей.Значение = Календари.Ссылка
	|ГДЕ
	|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьДляСинхронизации)");
	
	РезультатЗапроса = ЗапросПользователиСНастроеннымиСинхронизациями.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеАвторизации = Новый Структура;
		ПрочитатьДанныеАвторизации(Выборка.СервисКалендарей, ДанныеАвторизации, Выборка.Пользователь);
		
		Если Не CRM_СинхронизацияКалендарейКлиентСервер.ДанныеАвторизацииЗаполнены(Выборка.СервисКалендарей, ДанныеАвторизации) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ДанныеАвторизацииДействительны(Выборка.СервисКалендарей, ДанныеАвторизации) Тогда
			ОбновитьДанныеАвторизации(Выборка.СервисКалендарей, ДанныеАвторизации, Выборка.Пользователь);
			ПрочитатьДанныеАвторизации(Выборка.СервисКалендарей, ДанныеАвторизации, Выборка.Пользователь);
		КонецЕсли;
		
		СинхронизироватьКалендарь(ДанныеАвторизации,, Выборка.Пользователь);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СостояниеСинхронизацииКалендаря(Календарь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеСинхронизации = Новый Структура("Действие,Картинка,ЗаголовокДействия,ТекстПодсказки");
	
	ГиперссылкаНастройки = Новый ФорматированнаяСтрока(НСтр("ru='Настроить';en='Adjust'"),,,, "Настройка");
	ГиперссылкаСправка = Новый ФорматированнаяСтрока(НСтр("ru='Справка';en='Help'"),,,, "Справка");
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		
		УзелОбмена = ПланыОбмена.CRM_СинхронизацияКалендарей.УзелДляКалендаря(Календарь);
		ДатаСинхронизации = УзелОбмена.ДатаПоследнейСинхронизации;
		ДатаТекущая = ТекущаяДатаСеанса();
		Интервал = ДатаТекущая - ДатаСинхронизации;
		
		Действие				= "Синхронизация";
		ЗаголовокДействия		= НСтр("ru='Синхронизировать';en='Synchronize'");
		
		ТекстПодсказки			= НСтр("ru = 'Последний обмен: '") +
			ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(ДатаСинхронизации);
		
		Если Интервал < 60 * 60 * 1 Тогда // 1 час
			Картинка			= БиблиотекаКартинок.CRM_СинхронизацияНетПроблем;
		Иначе
			Картинка			= БиблиотекаКартинок.CRM_СинхронизацияПроблема;
		КонецЕсли;
		
		ГиперссылкаОтключить = Новый ФорматированнаяСтрока(НСтр("ru='Отключить';en='Disable'"),,,, "Отключить");
		
		СостояниеСинхронизации.ТекстПодсказки		= Новый ФорматированнаяСтрока(
			Картинка, " ", ТекстПодсказки, Символы.ПС, Символы.ПС,
			ГиперссылкаНастройки, "  ",
			ГиперссылкаОтключить, "  ",
			БиблиотекаКартинок.CRM_Справка10, " ", ГиперссылкаСправка);
	
	Иначе
		
		Действие				= "Настройка";
		ЗаголовокДействия	= НСтр("ru='Настроить синхронизацию';en='Configure synchronization'");
		
		ТекстПодсказки			= НСтр("ru = 'Не настроена синхронизация'");
		Картинка				= БиблиотекаКартинок.CRM_СинхронизацияНеНастроена;
		
		СостояниеСинхронизации.ТекстПодсказки		= Новый ФорматированнаяСтрока(
			Картинка, " ", ТекстПодсказки, Символы.ПС, Символы.ПС,
			ГиперссылкаНастройки, "  ",
			БиблиотекаКартинок.CRM_Справка10, " ", ГиперссылкаСправка);
		
	КонецЕсли;
	
	СостояниеСинхронизации.Действие				= Действие;
	СостояниеСинхронизации.ЗаголовокДействия	= ЗаголовокДействия;
	СостояниеСинхронизации.Картинка				= Картинка;
	
	Возврат СостояниеСинхронизации;
	
КонецФункции

Функция КартинкаСервисаКалендарей(СервисКалендарей) Экспорт
	
	Если Не ЗначениеЗаполнено(СервисКалендарей) Тогда
		Возврат БиблиотекаКартинок.SMS4B_Настройки;
	КонецЕсли;
	
	Если СервисКалендарей = Справочники.CRM_СервисыКалендарей.Google Тогда
		Возврат БиблиотекаКартинок.CRM_СервисGoogle;
	Иначе
		Возврат CRM_СинхронизацияКалендарейПереопределяемый.КартинкаСервисаКалендарей(СервисКалендарей);
	КонецЕсли;
	
КонецФункции

// Формирует ключ из идентификатора посредством расчета хеш-суммы по алгоритму SHA-256
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор, для которого нужно получить ключ
//  КонтекстПроверки - Строка - параметр передаётся в процедуру ОбщегоНазначенияКлиентСервер.Проверить()
//  и позволяет определить, откуда произошёл вызов в случае ошибки. 
// 
// Возвращаемое значение:
//  Строка - строка длинной 64 символа, значение вычисленной хеш-суммы
//
Функция КлючИзИдентификатора(Идентификатор, КонтекстПроверки) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЗначениеЗаполнено(Идентификатор),
		НСтр("ru = 'Не указан Идентификатор для преобразования его в Ключ'"),
		КонтекстПроверки);
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипЗнч(Идентификатор) = Тип("Строка"),
		НСтр("ru = 'Идентификатор должен быть строкового типа'"),
		КонтекстПроверки);
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(Идентификатор);
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

Процедура ИнициализироватьУзелПланаОбменаДляКалендаря() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтотУзел = ПланыОбмена.CRM_СинхронизацияКалендарей.ЭтотУзел();
	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код")) Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбъект = ЭтотУзел.ПолучитьОбъект();
	УзелОбъект.ОбменДанными.Загрузка = Истина;
	УзелОбъект.УстановитьНовыйКод();
	УзелОбъект.Наименование = НСтр("ru = 'Этот узел'");
	УзелОбъект.Записать();
	
КонецПроцедуры

Процедура ДобавитьАктуальныеЗаписиВОчередьНаОтправку(Календарь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Взаимодействия.Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Ответственный = &Пользователь
	|	И НЕ Взаимодействия.ПометкаУдаления
	|	И Взаимодействия.ПлановаяДата >= &Период");
	
	Запрос.УстановитьПараметр("Пользователь", Календарь.Пользователь);
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УзелДляКалендаря = ПланыОбмена.CRM_СинхронизацияКалендарей.УзелДляКалендаря(Календарь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелДляКалендаря, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьОчередьНаОтправку(Календарь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СинхронизацияКалендарей.Ссылка
	|ИЗ
	|	ПланОбмена.CRM_СинхронизацияКалендарей КАК СинхронизацияКалендарей
	|ГДЕ
	|	НЕ СинхронизацияКалендарей.ЭтотУзел
	|	И СинхронизацияКалендарей.Календарь = &Календарь");
	Запрос.УстановитьПараметр("Календарь", Календарь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КонтактПоEMail(EMail)
	
	Если Не ЗначениеЗаполнено(EMail) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	НЕОПРЕДЕЛЕНО КАК Владелец,
	|	КонтактнаяИнформация.Ссылка КАК Контакт
	|ПОМЕСТИТЬ НайденныеКонтакты
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.АдресЭП = &EMail
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	НЕОПРЕДЕЛЕНО,
	|	КонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.АдресЭП = &EMail
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	НЕОПРЕДЕЛЕНО,
	|	КонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.АдресЭП = &EMail
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	КонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.АдресЭП = &EMail
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НайденныеКонтакты.Контакт КАК Контакт,
	|	НайденныеКонтакты.Владелец КАК Владелец
	|ИЗ
	|	НайденныеКонтакты КАК НайденныеКонтакты
	|
	|УПОРЯДОЧИТЬ ПО
	|	НайденныеКонтакты.Порядок";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("EMail", EMail);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатПоиска = Новый Структура("Контакт, Владелец");
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(РезультатПоиска, Выборка);
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция EmailКонтакта(Контакт)
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидКонтактнойИнформации = CRM_ОбщегоНазначенияПовтИсп.ВидEMailДляОповещений(Справочники.ВидыКонтактнойИнформации.СправочникПользователи);
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидКонтактнойИнформации = CRM_ОбщегоНазначенияПовтИсп.ВидEMailДляОповещений(Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидКонтактнойИнформации = CRM_ОбщегоНазначенияПовтИсп.ВидEMailДляОповещений(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидКонтактнойИнформации = CRM_ОбщегоНазначенияПовтИсп.ВидEMailДляОповещений(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
	Иначе
		Возврат "";
	КонецЕсли;
	
	КонтактнаяИнформация = Контакт.КонтактнаяИнформация;
	
	ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ВидКонтактнойИнформации));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].АдресЭП;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", ТипКонтактнойИнформации));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].АдресЭП;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция СоздатьФизическоеЛицо(Имя, Адрес)
	
	ФизическоеЛицо				= Справочники.ФизическиеЛица.СоздатьЭлемент();
	ФизическоеЛицо.Наименование	= Имя;
	
	СтрокаАдреса				= ФизическоеЛицо.КонтактнаяИнформация.Добавить();
	СтрокаАдреса.Тип			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	СтрокаАдреса.Вид			= Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	СтрокаАдреса.Представление	= Адрес;
	СтрокаАдреса.АдресЭП		= Адрес;
	
	ФизическоеЛицо.Записать();
	
	Возврат ФизическоеЛицо.Ссылка;
	
КонецФункции

#Область ОбработчикиВыгрузкиЗагрузкиДанных

// Вызывается при регистрации произвольных обработчиков выгрузки данных.
//
// Параметры: ТаблицаОбработчиков - ТаблицаЗначений, в данной процедуре требуется
//  дополнить эту таблицу значений информацией о регистрируемых произвольных
//  обработчиках выгрузки данных. Колонки:
//    ОбъектМетаданных - ОбъектМетаданных, при выгрузке данных которого должен
//      вызываться регистрируемый обработчик,
//    Обработчик - ОбщийМодуль, общий модуль, в котором реализован произвольный
//      обработчик выгрузки данных. Набор экспортных процедур, которые должны
//      быть реализованы в обработчике, зависит от установки значений следующих
//      колонок таблицы значений,
//    Версия - Строка - номер версии интерфейса обработчиков выгрузки / загрузки данных,
//      поддерживаемого обработчиком,
//    ПередВыгрузкойТипа - Булево, флаг необходимости вызова обработчика перед
//      выгрузкой всех объектов информационной базы, относящихся к данному объекту
//      метаданных. Если присвоено значение Истина - в общем модуле обработчика должна
//      быть реализована экспортируемая процедура ПередВыгрузкойТипа(),
//      поддерживающая следующие параметры:
//        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//          контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера,
//        Сериализатор - СериализаторXDTO, инициализированный с поддержкой выполнения
//          аннотации ссылок. В случае, если в произвольном обработчике выгрузки требуется
//          выполнять выгрузку дополнительных данных - следует использовать
//          СериализаторXDTO, переданный в процедуру ПередВыгрузкойТипа() в качестве
//          значения параметра Сериализатор, а не полученных с помощью свойства глобального
//          контекста СериализаторXDTO,
//        ОбъектМетаданных - ОбъектМетаданных, перед выгрузкой данных которого
//          был вызван обработчик,
//        Отказ - Булево. Если в процедуре ПередВыгрузкойТипа() установить значение
//          данного параметра равным Истина - выгрузка объектов, соответствующих
//          текущему объекту метаданных, выполняться не будет.
//    ПередВыгрузкойОбъекта - Булево, флаг необходимости вызова обработчика перед
//      выгрузкой конкретного объекта информационной базы. Если присвоено значение
//      Истина - в общем модуле обработчика должна быть реализована экспортируемая процедура
//      ПередВыгрузкойОбъекта(), поддерживающая следующие параметры:
//        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//          контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера,
//        МенеджерВыгрузкиОбъекта - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерВыгрузкиДанныхИнформационнойБазы -
//          менеджер выгрузки текущего объекта. Подробнее см. комментарий к программному интерфейсу обработки
//          ВыгрузкаЗагрузкаДанныхМенеджерВыгрузкиДанныхИнформационнойБазы. Параметр передается только при вызове
//          процедур обработчиков, для которых при регистрации указана версия не ниже 1.0.0.1,
//        Сериализатор - СериализаторXDTO, инициализированный с поддержкой выполнения
//          аннотации ссылок. В случае, если в произвольном обработчике выгрузки требуется
//          выполнять выгрузку дополнительных данных - следует использовать
//          СериализаторXDTO, переданный в процедуру ПередВыгрузкойОбъекта() в качестве
//          значения параметра Сериализатор, а не полученных с помощью свойства глобального
//          контекста СериализаторXDTO,
//        Объект - КонстантаМенеджерЗначения.*, СправочникОбъект.*, ДокументОбъект.*,
//          БизнесПроцессОбъект.*, ЗадачаОбъект.*, ПланСчетовОбъект.*, ПланОбменаОбъект.*,
//          ПланВидовХарактеристикОбъект.*, ПланВидовРасчетаОбъект.*, РегистрСведенийНаборЗаписей.*,
//          РегистрНакопленияНаборЗаписей.*, РегистрБухгалтерииНаборЗаписей.*,
//          РегистрРасчетаНаборЗаписей.*, ПоследовательностьНаборЗаписей.*, ПерерасчетНаборЗаписей.* -
//          объект данных информационной базы, перед выгрузкой которого был вызван обработчик.
//          Значение, переданное в процедуру ПередВыгрузкойОбъекта() в качестве значения параметра
//          Объект может быть модифицировано внутри обработчика ПередВыгрузкойОбъекта(), при
//          этом внесенные изменения будут отражены в сериализации объекта в файлах выгрузки, но
//          не будут зафиксированы в информационной базе
//        Артефакты - Массив(ОбъектXDTO) - набор дополнительной информации, логически неразрывно
//          связанной с объектом, но не являющейся его частью (артефакты объекта). Артефакты должны
//          сформированы внутри обработчика ПередВыгрузкойОбъекта() и добавлены в массив, переданный
//          в качестве значения параметра Артефакты. Каждый артефакт должен являться XDTO-объектом,
//          для типа которого в качестве базового типа используется абстрактный XDTO-тип
//          {http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1}Artefact. Допускается использовать XDTO-пакеты,
//          помимо изначально поставляемых в составе подсистемы ВыгрузкаЗагрузкаДанных. В дальнейшем
//          артефакты, сформированные в процедуре ПередВыгрузкойОбъекта(), будут доступны в процедурах
//          обработчиков загрузки данных (см. комментарий к процедуре ПриРегистрацииОбработчиковЗагрузкиДанных().
//        Отказ - Булево. Если в процедуре ПередВыгрузкойОбъекта() установить значение
//           данного параметра равным Истина - выгрузка объекта, для которого был вызван обработчик,
//           выполняться не будет.
//    ПослеВыгрузкиТипа() - Булево, флаг необходимости вызова обработчика после выгрузки всех
//      объектов информационной базы, относящихся к данному объекту метаданных. Если присвоено значение
//      Истина - в общем модуле обработчика должна быть реализована экспортируемая процедура
//      ПослеВыгрузкиТипа(), поддерживающая следующие параметры:
//        Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//          контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//          к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера,
//        Сериализатор - СериализаторXDTO, инициализированный с поддержкой выполнения
//          аннотации ссылок. В случае, если в произвольном обработчике выгрузки требуется
//          выполнять выгрузку дополнительных данных - следует использовать
//          СериализаторXDTO, переданный в процедуру ПослеВыгрузкиТипа() в качестве
//          значения параметра Сериализатор, а не полученных с помощью свойства глобального
//          контекста СериализаторXDTO,
//        ОбъектМетаданных - ОбъектМетаданных, после выгрузки данных которого
//          был вызван обработчик.
//
Процедура ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков) Экспорт
	
	ОбрабатываемыеОбъектыМетаданных = Новый Массив;
	ОбрабатываемыеОбъектыМетаданных.Добавить(Метаданные.Документы.CRM_Взаимодействие);
	
	Для Каждого ТекОбъектМетаданных Из ОбрабатываемыеОбъектыМетаданных Цикл
		НовыйОбработчик = ТаблицаОбработчиков.Добавить();
		НовыйОбработчик.ОбъектМетаданных = ТекОбъектМетаданных;
		НовыйОбработчик.Обработчик = CRM_ОбменСGoogle;
		НовыйОбработчик.ПередВыгрузкойОбъекта = Истина;
		НовыйОбработчик.Версия = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_1();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	ЗаменитьНедопустимыеСимволыВСтроковыхРеквизитах(Объект, ОбъектМетаданных.СтандартныеРеквизиты);
	
	ЗаменитьНедопустимыеСимволыВСтроковыхРеквизитах(Объект, ОбъектМетаданных.Реквизиты);
	
	Для Каждого ТекТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Для Каждого ТекСтрока Из Объект[ТекТабличнаяЧасть.Имя] Цикл
			ЗаменитьНедопустимыеСимволыВСтроковыхРеквизитах(ТекСтрока, ТекТабличнаяЧасть.Реквизиты);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьНедопустимыеСимволыВСтроковыхРеквизитах(Данные, КоллекцияРеквизитовОбъектаМетаданных)
	
	Для Каждого ТекРеквизит Из КоллекцияРеквизитовОбъектаМетаданных Цикл
		Если ТипЗнч(Данные[ТекРеквизит.Имя]) = Тип("Строка") Тогда
			Данные[ТекРеквизит.Имя] = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Данные[ТекРеквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
