#Область ПрограммныйИнтерфейс

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых
// (на любом уровне вложенности, в т.ч. частично) находится продукция требуемого вида.
//
// Параметры:
//  ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//  ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
//
// Возвращаемое значение:
//  Массив - Массив - подходящие элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
Процедура ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС) Экспорт
	
	//++ НЕ ГОСИС
	ШтрихкодыУпаковок = ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет соответствие штрихкодов данными по номенклатуре, характеристике, маркируемой продукции.
//
// Параметры:
//  Штрихкоды            - Соответствие - Спискок штрихкодов.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ЗаполнитьИнформациюПоШтрихкодам(Штрихкоды, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	СписокШтрихкодов = Новый Массив;
	Для Каждого КлючЗначение Из Штрихкоды Цикл
		СписокШтрихкодов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, СписокШтрихкодов);
	
	Для Каждого КлючЗначение Из КэшированныеЗначения.Штрихкоды Цикл
		Если Штрихкоды[КлючЗначение.Ключ] <> Неопределено Тогда
			Штрихкоды[КлючЗначение.Ключ].Номенклатура         = КлючЗначение.Значение.Номенклатура;
			Штрихкоды[КлючЗначение.Ключ].Характеристика       = КлючЗначение.Значение.Характеристика;
			Штрихкоды[КлючЗначение.Ключ].МаркируемаяПродукция = КлючЗначение.Значение.МаркируемаяПродукция;
		КонецЕсли;
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В функции нужно реализовать подготовку данных для дальнейшей обработки штрихкодов.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой происходит обработка,
//  ДанныеШтрихкодов - Массив - полученные штрихкоды,
//  ПараметрыЗаполнения - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
//
// Возвращаемое значение:
//  Структура - подготовленные данные.
Процедура ПодготовитьДанныеДляОбработкиШтрихкодов(Форма, ДанныеШтрихкодов, ПараметрыЗаполнения, СтруктураДействий) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(Форма);
	Если ШтрихкодированиеИСКлиентСервер.ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		ШтрихкодированиеНоменклатурыЕГАИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
			Форма, ДанныеШтрихкодов, ПараметрыЗаполнения, СтруктураДействий)
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура обрабатывает введенные штрихкоды:
// 1. Добавляет введенные штрихкоды в табличную часть документа;
// 2. Вызывает помощник создания штрихкода, если он не был найден.
// Параметры:
//  Форма - УправляемаяФорма - форма для которой будут обработаны введенные штрихкоды.
//  Объект - ДанныеФормыСтруктура - объект формы.
//  СтруктураПараметров - Структура - структура формируется функцией ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов()
//                                    и заполняется данными из формы.
//  КэшированныеЗначения - Структура - кэш формы.
Процедура ОбработатьШтрихкоды(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(
		Форма, Форма.Объект,
		ДанныеДляОбработки, КэшированныеЗначения);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// В процедуре требуется реализовать алгоритм обработки полученных штрихкодов из ТСД.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой происходит обработка,
//  ДанныеДляОбработки - Структура - подготовленные ранее данные для обработки,
//  КэшированныеЗначения - Структура - используется механизмом обработки изменения реквизитов ТЧ.
Процедура ОбработатьДанныеИзТСД(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(
		Форма, Форма.Объект,
		ДанныеДляОбработки, КэшированныеЗначения);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Добавляет в текст запроса вид продукции.
//
// Параметры:
//  ТекстЗапроса - Строка - исходящий, дополняемый текст запроса.
Процедура ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСУТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Добавляет в текст запроса вид продукции для постоения дерева.
//
// Параметры:
//  ТекстЗапроса    - Строка - исходящий, дополняемый текст запроса.
//  УровнейВЗапросе - Число - количество уровней вложений.
Процедура ОпределитьВидПродукцииТекстаЗапросаДереваУпаковок(ТекстЗапроса, УровнейВЗапросе) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСУТ.ОпределитьВидПродукцииТекстаЗапросаДереваУпаковок(ТекстЗапроса, УровнейВЗапросе);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Возвращается контрагентов по списку ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В (&КоллекцияИНН)");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет в таблице данные по штрихкодам EAN.
// 
// Параметры:
//  ДанныеПоШтрихкодамEAN - ТаблицаЗначений - передается с обязательной колонкой ЗначениеШтрихкодаEAN, возвращает:
//   * Номенклатура
//   * ПредставлениеНоменклатуры
//   * Характеристика
//   * ЗначениеШтрихкодаEAN
Процедура ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСУТ.ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается при определении необходимости выбора серий.
// 
// Параметры:
//  ДанныеШтрихкода       - Структура - данные штрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
//  ТребуетсяВыбор        - Булево - исходящий, признак необходимости выбора серии.
Процедура ОпределитьНеобходимостьВыбораСерииДляДанныхШтрихкода(ДанныеШтрихкода, ПараметрыСканирования, ТребуетсяВыбор) Экспорт
	
	//++ НЕ ГОСИС
	
	ПараметрыУказанияСерий = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыСканирования.ПараметрыУказанияСерий);
	ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии;
	
	КэшированныеЗначения = ПараметрыСканирования.КэшированныеЗначения;
	Склад                = ПараметрыСканирования.Склад;
	
	ТекущаяСтрока = Новый Структура;
	
	ТекущаяСтрока.Вставить("Номенклатура",    ДанныеШтрихкода.Номенклатура);
	ТекущаяСтрока.Вставить("Характеристика",  ДанныеШтрихкода.Характеристика);
	ТекущаяСтрока.Вставить("ТипНоменклатуры");
	ТекущаяСтрока.Вставить("НомерСтроки",             1);
	ТекущаяСтрока.Вставить("Количество",              1);
	ТекущаяСтрока.Вставить("КоличествоПодобрано",     1);
	ТекущаяСтрока.Вставить("СтатусУказанияСерий",     0);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются");
	ТекущаяСтрока.Вставить("Серия");
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
		ТекущаяСтрока.Характеристика);
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));

	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТребуетсяВыбор = Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(ТекущаяСтрока.СтатусУказанияСерий, ПараметрыУказанияСерий);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет заполнение параметра "ШтрихкодыУпаковок" значениями штрихкодов документа.
// 
// Параметры:
//  Документ - ДокументСсылка - Документ, для которого выполняется обработка штрихкодов.
//  ШтрихкодыУпаковок - Массив из Строка - Коллекция значений штрихкодов.
Процедура ЗаполнитьШтрихкодыУпаковокДокумента(Документ, ШтрихкодыУпаковок) Экспорт
	
	//++ НЕ ГОСИС
	ШтрихкодыУпаковок = Документ.ШтрихкодыУпаковок.ВыгрузитьКолонку("ЗначениеШтрихкода");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Собирает данные из документа основания.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
//  ТаблицаДанных - ТаблицаЗначений - Данные из документа основания.
Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования, ТаблицаДанных) Экспорт
	
	//++ НЕ ГОСИС
	
	ИнтеграцияЕГАИСУТ.СформироватьДанныеДокументаОснования(ПараметрыСканирования.ДокументОснование, 
		ПараметрыСканирования.ДокументЕГАИС, ТаблицаДанных);
		
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заменяет значение Неопределено на соответствующие пустые ссылки.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева значений для заполнения.
Процедура ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева) Экспорт
	
	//++ НЕ ГОСИС
	
	Если СтрокаДерева.Номенклатура = Неопределено Тогда
		СтрокаДерева.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Если СтрокаДерева.Характеристика = Неопределено Тогда
		СтрокаДерева.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если СтрокаДерева.Серия = Неопределено Тогда
		СтрокаДерева.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре необходимо реализовать обработку данных штрихкода для общей формы. результат обработки штрихкода следует
// вернуть в параметре РезультатОбработки.
// 
// Параметры:
//  Форма - УправляемаяФорма - Общая форма.
//  ДанныеШтрихкода - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  РезультатОброботки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Процедура ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОброботки) Экспорт
	
	//++ НЕ ГОСИС
	РезультатОброботки = ИнтеграцияИСУТ.ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти