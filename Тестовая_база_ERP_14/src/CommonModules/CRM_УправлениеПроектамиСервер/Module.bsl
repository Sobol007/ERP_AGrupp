
////////////////////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ "УПРАВЛЕНИЕ ПРОЕКТАМИ"

// Функция возвращает общую сумму плановых затрат по всем этапам проекта.
//
// Параметры:
//	Проект	- СправочникСсылка	- Проект, по которому считаем общие плановые затраты.
//
// Возвращаемое значение:
//	Число	- Сумма общих плановых затрат.
//
Функция ПолучитьПлановыеЗатратыПоПроекту(Проект) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(CRM_ЭтапыПроектовЗатраты.Сумма) КАК Сумма
	               |ИЗ
	               |	Справочник.CRM_ЭтапыПроектов.Затраты КАК CRM_ЭтапыПроектовЗатраты
	               |ГДЕ
	               |	CRM_ЭтапыПроектовЗатраты.Ссылка.Владелец = &Проект
	               |	И (НЕ CRM_ЭтапыПроектовЗатраты.Ссылка.ПометкаУдаления)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПолучитьПлановыеЗатратыПоПроекту()

Функция ТекущееПодразделение() Экспорт
	 Возврат Пользователи.ТекущийПользователь().Подразделение;
КонецФункции
 
Функция ПолучитьКИУчастника(Участник) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Участник);
	ТелефоныПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив, Перечисления.ТипыКонтактнойИнформации.Телефон);
	АдресаПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Новый Структура;
	Если ТелефоныПользователя.Количество()>0 Тогда
		Результат.Вставить("Телефон", ТелефоныПользователя[0].Представление);
	Иначе
		Результат.Вставить("Телефон", "");
	КонецЕсли;
	Если АдресаПользователя.Количество()>0 Тогда
		Результат.Вставить("Адрес", АдресаПользователя[0].Представление);
	Иначе
		Результат.Вставить("Адрес", "");
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ПометитьНаУдалениеСвязанныеОбъекты(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Проекты") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ЭтапКалендарногоПлана.Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ЭтапКалендарногоПлана.Проект = &Источник");
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ШаблоныПроектов") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &Источник");
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ЭтапКалендарногоПлана.Этап = &Источник");
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ШаблоныЭтаповПроектов") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ШаблонЭтапаКалендарногоПлана.ШаблонЭтапаПроекта = &Источник");
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ДополнительныеСвойства.Вставить("УдалениеСвязанныхОбъектов", Истина);
		Объект.ПометкаУдаления = Истина;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьЗадачиПроекта(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Проекты") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ЭтапКалендарногоПлана.Ссылка
		                      |ИЗ
		                      |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
		                      |ГДЕ
		                      |	CRM_ЭтапКалендарногоПлана.Проект = &Источник");
		
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена;
		Объект.КомментарийОтменыЗадачи = НСтр("ru = 'Отмена проекта'");
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПлановуюДатуОкончанияПроекта(Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания) КАК ПлановаяДатаОкончанияПроекта
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	               |	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления
	               |	И НЕ CRM_ЭтапКалендарногоПлана.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена)
	               |";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(Выборка.ПлановаяДатаОкончанияПроекта =  NULL, Неопределено, Выборка.ПлановаяДатаОкончанияПроекта);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции //ПолучитьПлановуюДатуОкончанияПроекта()

#Область РаботаСШаблонамиПроектов

// Функция возвращает созданный шаблон проекта на основании проекта.
//
// Параметры:
//	Проект	- СправочникСсылка	- Проект, на основании которого создаем шаблон проекта.
//  Параметры - Структура
//
// Возвращаемое значение:
//	СправочникСсылка - созданный шаблон проекта.
//
Функция СоздатьШаблонНаОснованииПроекта(Проект, Параметры) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		ШаблонПроекта = Справочники.CRM_ШаблоныПроектов.СоздатьЭлемент();
		
		ШаблонПроекта.Заполнить(Неопределено);
		
		ШаблонПроекта.Наименование = Проект.Наименование;
		ШаблонПроекта.Комментарий = Проект.Комментарий;
		ШаблонПроекта.CRM_Подразделение = Проект.CRM_Подразделение;
		ПереноситьОтветственныхЭтапов = Ложь;
		Если Параметры.Свойство("ОтветственныхПроектаИЭтапов") И Параметры.ОтветственныхПроектаИЭтапов Тогда
			ПереноситьОтветственныхЭтапов = Истина;
			ШаблонПроекта.Ответственный = Проект.Ответственный;
		КонецЕсли;
		ШаблонПроекта.CRM_КомментарийHTML = ШаблонПроекта.CRM_КомментарийHTML;
		ШаблонПроекта.CRM_КолонкиКалендарногоГрафика = Новый ХранилищеЗначения(Проект.CRM_КолонкиКалендарногоГрафика.Получить());
		
		ШаблонПроекта.Записать();
		
		// Создадим структуру пакетов задач для нового проекта
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_ЭтапыПроектов.Ссылка КАК Ссылка,
		               |	CRM_ЭтапыПроектов.Наименование КАК Наименование,
		               |	CRM_ЭтапыПроектов.Ответственный КАК Ответственный
		               |ИЗ
		               |	Справочник.CRM_ЭтапыПроектов КАК CRM_ЭтапыПроектов
		               |ГДЕ
		               |	CRM_ЭтапыПроектов.Владелец = &Проект
		               |	И НЕ CRM_ЭтапыПроектов.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Проект", Проект);
		ДеревоПакетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		СоответствиеЭтаповПроектов = Новый Соответствие;
		СоздатьЭтапыШаблонаПроектаПоПроектуРекурсивно(ДеревоПакетов.Строки, ШаблонПроекта.Ссылка, СоответствиеЭтаповПроектов, ПереноситьОтветственныхЭтапов);
		
		Если Параметры.Свойство("ЗадачиИКонтрольныеТочки") И Параметры.ЗадачиИКонтрольныеТочки Тогда
			// Создадим задачи на основе шаблонов задач
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка,
			               |	CRM_ЭтапКалендарногоПлана.ПлановаяДатаНачала КАК ПлановаяДатаНачала,
			               |	CRM_ЭтапКалендарногоПлана.ПлановаяДлительность КАК ПлановаяДлительность,
			               |	CRM_ЭтапКалендарногоПлана.Описание КАК Описание,
			               |	CRM_ЭтапКалендарногоПлана.Тема КАК Тема,
			               |	CRM_ЭтапКалендарногоПлана.ТипЭтапа КАК ТипЭтапа,
			               |	CRM_ЭтапКалендарногоПлана.Важность КАК Важность,
			               |	CRM_ЭтапКалендарногоПлана.Подразделение КАК Подразделение,
			               |	CRM_ЭтапКалендарногоПлана.Этап КАК Этап
			               |ИЗ
			               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
			               |ГДЕ
			               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
			               |	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Проект", Проект);
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество()>0 Тогда
				Результат.Сортировать("ПлановаяДатаНачала");
				МинимальнаяДатаНачала = Результат[0].ПлановаяДатаНачала;
			КонецЕсли;
			Для каждого Задача из  Результат Цикл
				ШаблонЭтапа = Документы.CRM_ШаблонЭтапаКалендарногоПлана.СоздатьДокумент();
				ШаблонЭтапа.Заполнить(ШаблонПроекта.Ссылка);
				ШаблонЭтапа.Описание = Задача.Описание;
				ШаблонЭтапа.ШаблонПроекта   = ШаблонПроекта.Ссылка;
				ШаблонЭтапа.Тема	  = Задача.Тема;
				ШаблонЭтапа.ТипЭтапа = Задача.ТипЭтапа;
				
				ШаблонЭтапа.ШаблонЭтапаПроекта = СоответствиеЭтаповПроектов.Получить(Задача.Этап);
				
				// установка дат
				ШаблонЭтапа.Смещение = (Задача.ПлановаяДатаНачала-МинимальнаяДатаНачала)/86400;
				ШаблонЭтапа.ПродолжительностьДней = Задача.ПлановаяДлительность;
				
				// ЭТИ 2 РЕКВИЗИТА НУЖНО ВКЛЮЧИТЬ В МЕХАНИЗМ!!
				ШаблонЭтапа.Важность = Задача.Важность;
				ШаблонЭтапа.Подразделение = Задача.Подразделение;
				
				// Заполнение табличных частей
				// ТЧ "ЧекЛист"
				Если Параметры.Свойство("ЧекЛисты") И Параметры.ЧекЛисты Тогда
					Для каждого СтрокаШаблона Из Задача.Ссылка.ЧекЛист Цикл
						СтрокаЗадачи = ШаблонЭтапа.ЧекЛист.Добавить();
						СтрокаЗадачи.ОписаниеЗадачи = СтрокаШаблона.ОписаниеЗадачи;
					КонецЦикла;
				КонецЕсли;
				
				// ТЧ "Участники"
				Если (Параметры.Свойство("ТолькоОтветственныхЗадач") И Параметры.ТолькоОтветственныхЗадач) 
					ИЛИ (Параметры.Свойство("ВсехУчастниковЗадач") И Параметры.ВсехУчастниковЗадач) Тогда
					Если Задача.Ссылка.Участники.Количество()>0 Тогда
						Для каждого СтрокаШаблона Из Задача.Ссылка.Участники Цикл
							Если Параметры.ВсехУчастниковЗадач ИЛИ (Параметры.ТолькоОтветственныхЗадач И СтрокаШаблона.Ответственный) Тогда
								НовыйУчастник = ШаблонЭтапа.Участники.Добавить();
								ЗаполнитьЗначенияСвойств(НовыйУчастник, СтрокаШаблона);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				// ТЧ "ВариантыКонтекстаФайлов"
				Если Параметры.Свойство("КонтекстыФайловЗадач") И Параметры.КонтекстыФайловЗадач Тогда
					Для каждого СтрокаШаблона Из Задача.Ссылка.ВариантыКонтекстаФайлов Цикл
						СтрокаЗадачи = ШаблонЭтапа.ВариантыКонтекстаФайлов.Добавить();
						СтрокаЗадачи.ВариантКонтекстаФайлов = СтрокаШаблона.ВариантКонтекстаФайлов;
					КонецЦикла;
				КонецЕсли;
				
				ШаблонЭтапа.Записать();
				
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ШаблонПроекта.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		СтрОшибка = ПодробноеПредставлениеОшибки(ИнфОбОшибке);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось создать структуру шаблона проекта'")
			+ ?(ЗначениеЗаполнено(СтрОшибка), ": " + Символы.ПС + СтрОшибка, "."));
			
		Возврат Справочники.CRM_ШаблоныПроектов.ПустаяСсылка();
		
	КонецПопытки;
	
КонецФункции

Процедура СоздатьЭтапыШаблонаПроектаПоПроектуРекурсивно(Строки, ШаблонПроекта, СоответствиеЭтаповПроектов, ПереноситьОтветственныхЭтапов, Родитель = Неопределено)
	
	Для каждого Строка Из Строки Цикл
		НовыйПакет = Справочники.CRM_ШаблоныЭтаповПроектов.СоздатьЭлемент();
		НовыйПакет.Наименование = Строка.Наименование;
		Если ПереноситьОтветственныхЭтапов Тогда
			НовыйПакет.Ответственный = Строка.Ответственный;
		КонецЕсли;
		НовыйПакет.ШаблонПроекта = ШаблонПроекта;
		Если Строка.Родитель <> Неопределено Тогда
			НовыйПакет.Родитель = Родитель;
		КонецЕсли;
		
		НовыйПакет.Записать();
		СоответствиеЭтаповПроектов.Вставить(Строка.Ссылка, НовыйПакет.Ссылка);
		
		Если Строка.Строки.Количество() > 0 Тогда
			СоздатьЭтапыШаблонаПроектаПоПроектуРекурсивно(Строка.Строки, ШаблонПроекта, СоответствиеЭтаповПроектов, ПереноситьОтветственныхЭтапов, НовыйПакет.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //СоздатьЭтапыПроектовПоШаблонуРекурсивно()

#КонецОбласти //РаботаСШаблонамиПроектов

#Область ФормированиеПроекта

Процедура СоздатьПроектПоШаблону(ШаблонПроекта, СозданныйПроект) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		НовыйПроект = Справочники.Проекты.СоздатьЭлемент();
		
		НовыйПроект.Заполнить(Неопределено);
		
		НовыйПроект.Наименование = ШаблонПроекта.Наименование;
		НовыйПроект.ПлановаяДатаНачала  = ТекущаяДатаСеанса();
		НовыйПроект.CRM_ЭтоПроект  = Истина;
		НовыйПроект.CRM_Планируемый  = Истина;
		НовыйПроект.Комментарий = ШаблонПроекта.Комментарий;
		НовыйПроект.CRM_Подразделение = ШаблонПроекта.CRM_Подразделение;
		НовыйПроект.Ответственный = ШаблонПроекта.Ответственный;
		НовыйПроект.CRM_КомментарийHTML = ШаблонПроекта.CRM_КомментарийHTML;
		НовыйПроект.CRM_Статус 	 = Перечисления.CRM_СтатусыПроектов.Планируется;
		НовыйПроект.CRM_КолонкиКалендарногоГрафика = Новый ХранилищеЗначения(ШаблонПроекта.CRM_КолонкиКалендарногоГрафика.Получить());
		
		НовыйПроект.Записать();
		
		// Перенесем вложения (в том числе картинки форматированного описания)
		CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(ШаблонПроекта, НовыйПроект.Ссылка);
		
		// Создадим структуру пакетов задач для нового проекта
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Ссылка,
		               |	CRM_ШаблоныЭтаповПроектов.Наименование КАК Наименование,
		               |	CRM_ШаблоныЭтаповПроектов.Ответственный КАК Ответственный
		               |ИЗ
		               |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
		               |ГДЕ
		               |	CRM_ШаблоныЭтаповПроектов.ШаблонПроекта = &ШаблонПроекта
		               |	И НЕ CRM_ШаблоныЭтаповПроектов.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("ШаблонПроекта", ШаблонПроекта);
		ДеревоПакетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		СоответствиеЭтаповПроектов = Новый Соответствие;
		СоздатьЭтапыПроектовПоШаблонуРекурсивно(ДеревоПакетов.Строки, НовыйПроект.Ссылка, СоответствиеЭтаповПроектов);
		
		// Создадим задачи на основе шаблонов задач
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_ШаблонЭтапаКалендарногоПлана.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.CRM_ШаблонЭтапаКалендарногоПлана КАК CRM_ШаблонЭтапаКалендарногоПлана
		               |ГДЕ
		               |	CRM_ШаблонЭтапаКалендарногоПлана.ШаблонПроекта = &ШаблонПроекта
		               |	И НЕ CRM_ШаблонЭтапаКалендарногоПлана.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ШаблонПроекта", ШаблонПроекта);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			ШаблонЭтапа = Результат.ссылка;
			Этап = Документы.CRM_ЭтапКалендарногоПлана.СоздатьДокумент();
			Этап.Заполнить(НовыйПроект.Ссылка);
			Этап.Описание = ШаблонЭтапа.Описание;
			Этап.Проект   = НовыйПроект.Ссылка;
			Этап.Статус   = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована;
			Этап.Тема	  = ШаблонЭтапа.Тема;
			Этап.ТипЭтапа = ШаблонЭтапа.ТипЭтапа;
			
			Этап.Этап = СоответствиеЭтаповПроектов.Получить(ШаблонЭтапа.ШаблонЭтапаПроекта);
			
			// установка дат
			Смещение = ШаблонЭтапа.Смещение;
			Этап.ПлановаяДатаНачала	 = НовыйПроект.ПлановаяДатаНачала + Смещение * 86400;
			Если Этап.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
				Этап.ПлановаяДатаОкончания = Этап.ПлановаяДатаНачала;
			Иначе
				Этап.ПлановаяДатаОкончания = Этап.ПлановаяДатаНачала + (ШаблонЭтапа.ПродолжительностьДней-1) * 86400;
			КонецЕсли;
			Этап.ПлановаяДлительность	 = ШаблонЭтапа.ПродолжительностьДней;
			
			// ЭТИ 2 РЕКВИЗИТА НУЖНО ВКЛЮЧИТЬ В МЕХАНИЗМ!!
			Этап.Важность = ШаблонЭтапа.Важность;
			Этап.Подразделение = ШаблонЭтапа.Подразделение;
			
			// Заполнение табличных частей
			// ТЧ "ЧекЛист"
			Для каждого СтрокаШаблона Из ШаблонЭтапа.ЧекЛист Цикл
				СтрокаЗадачи = Этап.ЧекЛист.Добавить();
				СтрокаЗадачи.ОписаниеЗадачи = СтрокаШаблона.ОписаниеЗадачи;
			КонецЦикла;
			
			// ТЧ "Участники"
			Если ШаблонЭтапа.Участники.Количество()>0 Тогда
				Для каждого СтрокаШаблона Из ШаблонЭтапа.Участники Цикл
					НовыйУчастник = Этап.Участники.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйУчастник, СтрокаШаблона);
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(Этап.Этап.Ответственный) ИЛИ ЗначениеЗаполнено(НовыйПроект.Ответственный) Тогда
					НовыйУчастник = Этап.Участники.Добавить();
					НовыйУчастник.Ответственный = Истина;
					НовыйУчастник.Пользователь = ?(ЗначениеЗаполнено(Этап.Этап.Ответственный), Этап.Этап.Ответственный, НовыйПроект.Ответственный);
					КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(НовыйУчастник.Пользователь);
					НовыйУчастник.Адрес = КИПользователя.Адрес;
					НовыйУчастник.Телефон = КИПользователя.Телефон;
				КонецЕсли;
			КонецЕсли;
			
			// ТЧ "ВариантыКонтекстаФайлов"
			Для каждого СтрокаШаблона Из ШаблонЭтапа.ВариантыКонтекстаФайлов Цикл
				СтрокаЗадачи = Этап.ВариантыКонтекстаФайлов.Добавить();
				СтрокаЗадачи.ВариантКонтекстаФайлов = СтрокаШаблона.ВариантКонтекстаФайлов;
			КонецЦикла;
			
			Этап.Записать();
			
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(ШаблонЭтапа, Этап.Ссылка);

		КонецЦикла;
		
		НовыйПроект.ПлановаяДатаОкончания = ПолучитьПлановуюДатуОкончанияПроекта(НовыйПроект.Ссылка);
		НовыйПроект.Записать();
		
		ЗафиксироватьТранзакцию();
		
		СозданныйПроект = НовыйПроект.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнфОбОшибке = ИнформацияОбОшибке();
		СтрОшибка = ПодробноеПредставлениеОшибки(ИнфОбОшибке);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось создать структуру проекта'")
			+ ?(ЗначениеЗаполнено(СтрОшибка), ": " + Символы.ПС + СтрОшибка, "."));
			
		СозданныйПроект  = Неопределено;
		
	КонецПопытки;
	
КонецПроцедуры //СоздатьПроектПоШаблону()

Процедура СоздатьЭтапыПроектовПоШаблонуРекурсивно(Строки, Проект, СоответствиеЭтаповПроектов, Родитель = Неопределено)
	
	Для каждого Строка Из Строки Цикл
		НовыйПакет = Справочники.CRM_ЭтапыПроектов.СоздатьЭлемент();
		НовыйПакет.Наименование = Строка.Наименование;
		НовыйПакет.Ответственный = Строка.Ответственный;
		НовыйПакет.Владелец = Проект;
		Если Строка.Родитель <> Неопределено Тогда
			НовыйПакет.Родитель = Родитель;
		КонецЕсли;
		
		НовыйПакет.Записать();
		СоответствиеЭтаповПроектов.Вставить(Строка.Ссылка, НовыйПакет.Ссылка);
		
		Если Строка.Строки.Количество() > 0 Тогда
			СоздатьЭтапыПроектовПоШаблонуРекурсивно(Строка.Строки, Проект, СоответствиеЭтаповПроектов, НовыйПакет.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //СоздатьЭтапыПроектовПоШаблонуРекурсивно()

#КонецОбласти //ФормированиеПроекта
