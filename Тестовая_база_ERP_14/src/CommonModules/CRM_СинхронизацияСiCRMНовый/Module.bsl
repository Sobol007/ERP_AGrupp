Процедура УстановитьУзелОбменаУСтрокДерева(Дерево, УзелОбмена)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			УстановитьУзелОбменаУСтрокДерева(Строка, УзелОбмена);
			
		Иначе
			
			Строка.СсылкаНаУзелОбмена = УзелОбмена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьПорциюДанных(Узел, МассивОбъектовДляВыгрузки)
	
	ОбработкаОбмена = Обработки.CRM_УниверсальныйОбменДаннымиXML.Создать();
	
	ИмяФайлаПравил = ПолучитьИмяВременногоФайла("xml");
	ИмяФайлаОбмена = ПолучитьИмяВременногоФайла("xml");
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		МакетПравил = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("CRM_ПравилаКонвертации");
	Иначе 
		МакетПравил = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("УТ_ПравилаКонвертации");
	КонецЕсли;
	МакетПравил.Записать(ИмяФайлаПравил);
	
	//ДДПравил = Узел.ПравилаОбмена.Получить();
	//ДДПравил.Записать(ИмяФайлаПравил);	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
	ОбработкаОбмена.ИмяФайлаПравилОбмена = ИмяФайлаПравил;
	ОбработкаОбмена.ЗагрузитьПравилаОбмена();
	ОбработкаОбмена.ИнициализироватьПервоначальныеЗначенияПараметров();
	ОбработкаОбмена.Параметры.Очистить();
	ОбработкаОбмена.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0;
	УстановитьУзелОбменаУСтрокДерева(ОбработкаОбмена.ТаблицаПравилВыгрузки, Узел);
	
	РезультатВыгрузки = Ложь;
	ОбработкаОбмена.ВыполнитьВыгрузкуCRM(МассивОбъектовДляВыгрузки, РезультатВыгрузки);
	Если РезультатВыгрузки Тогда  
		
		ДанныеВыгрузки = Новый ДвоичныеДанные(ИмяФайлаОбмена);
		Менеджер = РегистрыСведений.CRM_ДанныеДляВыгрузкиВiCRM.СоздатьМенеджерЗаписи();
		Менеджер.Размер = ДанныеВыгрузки.Размер();
		Менеджер.Пользователь = Узел.Пользователь;
		Менеджер.ИдентификаторФайла = Строка(Новый УникальныйИдентификатор);
		Менеджер.ДанныеФайла = Новый ХранилищеЗначения(ДанныеВыгрузки);
		Менеджер.ВремяФайла = ТекущаяДатаСеанса();
		Менеджер.УзелОбмена =  Узел;
		Менеджер.Записать();	
		
		Для Каждого ЭлементМассива Из МассивОбъектовДляВыгрузки Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЭлементМассива);
		КонецЦикла;	
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаОбмена);
	
	УдалитьФайлы(ИмяФайлаПравил);
КонецПроцедуры	

Процедура СоздатьДанныеДляВыгрузки(Узел) Экспорт
	// Проверяем есть ли новые данные к выгрузке
	СтруктураИзменений = CRM_СинхронизацияСервер.ЕстьДанныеДляВыгрузки(Узел);
	Если СтруктураИзменений.ЕстьИзменения Тогда
		КоличествоНайденныхДляЗаписиОбъектов = 0;
		МассивОбъектовДляВыгрузки = НОвый Массив;
		ВыборкаИзменений = СтруктураИзменений.Изменения;
		Пока ВыборкаИзменений.Следующий() Цикл
			Данные = ВыборкаИзменений.Получить(); 
			МассивОбъектовДляВыгрузки.Добавить(Данные);
			КоличествоНайденныхДляЗаписиОбъектов = КоличествоНайденныхДляЗаписиОбъектов + 1;
			Если КоличествоНайденныхДляЗаписиОбъектов = 2000 Тогда
				ВыгрузитьПорциюДанных(Узел, МассивОбъектовДляВыгрузки);
				
				КоличествоНайденныхДляЗаписиОбъектов = 0;
				МассивОбъектовДляВыгрузки = НОвый Массив;
			КонецЕсли;	
		КонецЦикла;
		Если МассивОбъектовДляВыгрузки.Количество() > 0 Тогда
			ВыгрузитьПорциюДанных(Узел, МассивОбъектовДляВыгрузки);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	


Функция ВыгрузитьДанныеВФайлXML(Узел, ТаблицаВыгрузки, ИмяФайлаРазрешений, ОписаниеПравил, Индекс = 0)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Synchronization");
	
	Если ЗначениеЗаполнено(ИмяФайлаРазрешений) Тогда
		
		ЗаписьXML.ЗаписатьАтрибут("accessfile", ИмяФайлаРазрешений);
		
	КонецЕсли;
	
	CRM_СинхронизацияСервер.ЗаписатьРежим(ЗаписьXML);
	
	CRM_СинхронизацияСервер.ДобавитьСоответствияТипов(ОписаниеПравил, Ложь);
	
	ВыгруженоОбъектов = 0;
	// Перебор по зарегистрированным изменениям программы
	
	//КоличествоЭлементов = Мин(Индекс + 1000, ТаблицаВыгрузки.Количество());
	
	Пока ТаблицаВыгрузки.Следующий() Цикл
		
		//Строка = ТаблицаВыгрузки[Индекс];
		ЭтоУдалениеОбъекта = Ложь;
		ЗначениеДляОтменыИзменений = ТаблицаВыгрузки.Получить();
		МетаданныеОбъектаВыгрузки = ЗначениеДляОтменыИзменений.Метаданные();
		ДатаИзменения = ТекущаяДатаСеанса();
		// Получаем выборку переноса
		Если Метаданные.Константы.Содержит(МетаданныеОбъектаВыгрузки) Тогда // Константы
			
			CRM_СинхронизацияСервер.ЗаписатьXMLОбъект(ЗначениеДляОтменыИзменений, ЗаписьXML, ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
			
			
			Константа = Неопределено;
			
		ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъектаВыгрузки) Тогда // Документы
			ДокументОбъект = ЗначениеДляОтменыИзменений;
			ОтправлятьДокумент = Истина;
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") или ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") или ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				Если НЕ ДокументОбъект.УчетнаяЗапись.CRM_ВыгружатьВiCRM Тогда
					ОтправлятьДокумент = Ложь;
				КонецЕсли;	
			КонецЕсли;
			Если ДокументОбъект <> Неопределено И ОтправлятьДокумент Тогда // Для удаленных объектов обработка ниже
				CRM_СинхронизацияСервер.ЗаписатьXMLОбъект(ДокументОбъект, ЗаписьXML, ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
			Иначе 
				ЭтоУдалениеОбъекта = Истина;
			КонецЕсли; 
			
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъектаВыгрузки) Тогда // Справочники
			
			// Если справочник иерархический, то необходимо вначале выгружать группы
			// , а затем элементы, так как при загрузке будут чиститься реквизиты
			// "Родитель" для тех элементов, у которых родитель как объект не будет найден
			// а именно для предопределенных родителей, так как они временно не переносятся.
			СправочникОбъект = ЗначениеДляОтменыИзменений;
			Если СправочникОбъект <> Неопределено Тогда // Для удаленных объектов обработка ниже
				CRM_СинхронизацияСервер.ЗаписатьXMLОбъект(СправочникОбъект, ЗаписьXML, ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
			Иначе 
				ЭтоУдалениеОбъекта = Истина;
			КонецЕсли; 		
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъектаВыгрузки) Тогда // Регистры сведений
			
			CRM_СинхронизацияСервер.ЗаписатьXMLОбъект(ЗначениеДляОтменыИзменений, ЗаписьXML, ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
			
		КонецЕсли;
		
		Если ЭтоУдалениеОбъекта Тогда
			CRM_СинхронизацияСервер.ЗаписатьXMLОбъект(Новый УдалениеОбъекта(ЗначениеДляОтменыИзменений), ЗаписьXML, ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
		КонецЕсли; 
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЗначениеДляОтменыИзменений);
			
		
		//Если Строка.ЭтоОтправкаСоответствия = Истина Тогда
		//	
		//	CRM_СинхронизацияСервер.УстановитьФлагОтправкиСоответствия(Узел, Строка.Значение, Истина);
		//	
		//КонецЕсли;
		
		Индекс = Индекс + 1;
		ВыгруженоОбъектов = ВыгруженоОбъектов + 1;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция СформироватьФайлРазрешений(Разрешения)
	
	Если Разрешения.Количество() = 0 Тогда
		
		Возврат "";
		
	КонецЕсли; 
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	ЗаписатьJSON(Запись, Разрешения,, "ПреобразованиеЗначенийJSON", CRM_СинхронизацияСервер);
	
	
	
	Возврат Запись.Закрыть();
	
КонецФункции


Процедура ЗарегистрироватьНовыйУзелОбмена(КодУзла, Пользователь) Экспорт
	УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(КодУзла);
	Если УзелОбмена.Пустая() Тогда Возврат конецЕсли;
	
	Для Каждого ЭлементПлана Из Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав Цикл
		Если Метаданные.Справочники.Содержит(ЭлементПлана.Метаданные) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементПлана.Метаданные);
		КонецЕсли;	
		Если Метаданные.Константы.Содержит(ЭлементПлана.Метаданные) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементПлана.Метаданные);
		КонецЕсли;
		Если Метаданные.РегистрыСведений.Содержит(ЭлементПлана.Метаданные) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементПлана.Метаданные);
		КонецЕсли;
		Если Метаданные.Задачи.Содержит(ЭлементПлана.Метаданные) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементПлана.Метаданные);
		КонецЕсли;
		Если Метаданные.Документы.Содержит(ЭлементПлана.Метаданные) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_Интерес.Ссылка КАК Ссылка
			|ИЗ
			|	Документ."+ЭлементПлана.Метаданные.Имя+" КАК CRM_Интерес";
			МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Для Каждого ОбъектРегистрации Из МассивОбъектов Цикл
				ОбменДаннымиСобытия.ЗарегистрироватьИзмененияДанных(УзелОбмена, ОбъектРегистрации);
			КонецЦикла;	
		КонецЕсли;
		Если Метаданные.Задачи.Содержит(ЭлементПлана.Метаданные) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка
			|ИЗ
			|	Задача."+ЭлементПлана.Метаданные.Имя+" КАК ЗадачаИсполнителя";
			МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Для Каждого ОбъектРегистрации Из МассивОбъектов Цикл
				ОбменДаннымиСобытия.ЗарегистрироватьИзмененияДанных(УзелОбмена, ОбъектРегистрации);
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
	СоздатьДанныеДляВыгрузки(УзелОбмена);
КонецПроцедуры

Функция ПолучитьСписокДоступныхПользователейДляОбмена(ТекущийПользователь) Экспорт
	Запрос = Новый Запрос;
	ЭтоРазделенныйСеанс = РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() И НЕ ЭтоРазделенныйСеанс Тогда
		МассивПользователей = Новый Массив;
		СписокПользователей = Новый СписокЗначений;
		СписокПользователей.ЗагрузитьЗначения(МассивПользователей);
		
		Возврат МассивПользователей;
	КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_РасширенныйДоступПоПодразделениям.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ тмпРасширенныйДоступ
		|ИЗ
		|	РегистрСведений.CRM_РасширенныйДоступПоПодразделениям КАК CRM_РасширенныйДоступПоПодразделениям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.CRM_ИспользоватьДолжностныеПозиции КАК CRM_ИспользоватьДолжностныеПозиции
		|		ПО CRM_ИспользоватьДолжностныеПозиции.Значение = ИСТИНА
		|ГДЕ
		|	CRM_РасширенныйДоступПоПодразделениям.ДолжностнаяПозиция В ИЕРАРХИИ(&ДолжностнаяПозиция)
		|	И &ДолжностнаяПозиция <> ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		|	И &КОРПВерсия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ПОМЕСТИТЬ тмпТекущееПодразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.ТекущийРуководитель = &ПользовательФЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ тмпТекущееПодразделениеПользователя
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Пользователи.Подразделение = СтруктураПредприятия.Ссылка)
		|			И (Пользователи.Ссылка = &Пользователь)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка
		|ПОМЕСТИТЬ тмпДанныеСправочника
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				тмпТекущееПодразделениеПользователя.Ссылка
		|			ИЗ
		|				тмпТекущееПодразделениеПользователя КАК тмпТекущееПодразделениеПользователя)
		|	И НЕ СтруктураПредприятия.Ссылка В
		|				(ВЫБРАТЬ
		|					тмпТекущееПодразделениеПользователя.Ссылка
		|				ИЗ
		|					тмпТекущееПодразделениеПользователя КАК тмпТекущееПодразделениеПользователя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Подразделение
		|ПОМЕСТИТЬ тмпДоступныеПодразделения
		|ИЗ
		|	(ВЫБРАТЬ
		|		тмпРасширенныйДоступ.Подразделение КАК Подразделение
		|	ИЗ
		|		тмпРасширенныйДоступ КАК тмпРасширенныйДоступ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		тмпДанныеСправочника.Ссылка
		|	ИЗ
		|		тмпДанныеСправочника КАК тмпДанныеСправочника) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь
		|ПОМЕСТИТЬ тмпДляСвертывания
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	(Пользователи.Подразделение В
		|				(ВЫБРАТЬ
		|					тмпДоступныеПодразделения.Подразделение
		|				ИЗ
		|					тмпДоступныеПодразделения КАК тмпДоступныеПодразделения)
		|			ИЛИ Пользователи.Подразделение В
		|				(ВЫБРАТЬ
		|					тмпТекущееПодразделение.Подразделение
		|				ИЗ
		|					тмпТекущееПодразделение КАК тмпТекущееПодразделение) ИЛИ Пользователи.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.Пустаяссылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	тмпДляСвертывания.Пользователь
		|ИЗ
		|	тмпДляСвертывания КАК тмпДляСвертывания
		|	ГДЕ тмпДляСвертывания.Пользователь.Наименование ПОДОБНО &СтрокаПоиска";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Если Метаданные.Имя = "CRM" Тогда
		Запрос.УстановитьПараметр("ПользовательФЛ", ТекущийПользователь);
	Иначе	
		Запрос.УстановитьПараметр("ПользовательФЛ", ТекущийПользователь.ФизическоеЛицо);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДолжностнаяПозиция", ТекущийПользователь.CRM_ДолжностнаяПозиция);
	Запрос.УстановитьПараметр("КОРПВерсия", CRM_ЛицензированиеСервер.ВариантПоставкиКОРП());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ тмпДляСвертывания.Пользователь.Наименование ПОДОБНО &СтрокаПоиска", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ Пользователи.Наименование ПОДОБНО &СтрокаПоиска", "");
	
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	ТаблицаПользователей.Свернуть("Пользователь");
	МассивПользователей = ТаблицаПользователей.ВыгрузитьКолонку("Пользователь");
	МассивПользователей.Добавить(ТекущийПользователь);
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.ЗагрузитьЗначения(МассивПользователей);
	
	Возврат МассивПользователей;
КонецФункции

Функция ПолучитьВышестоящихПользователей(Пользователь) Экспорт
	Подразделение =  Пользователь.Подразделение;
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.Добавить(Пользователь);
	Если Подразделение.Пустая() Тогда
		Возврат СписокПользователей;
	КонецЕсли;
	
	ВыполнятьРекурсивно = Истина;
	Пока ВыполнятьРекурсивно Цикл
		Если НЕ Подразделение.ТекущийРуководитель.Пустая() Тогда
			СписокПользователей.Добавить(Подразделение.ТекущийРуководитель);
		КонецЕсли;
		Если Подразделение.Родитель.Пустая() Тогда
			Возврат СписокПользователей;
		Иначе
			Подразделение = Подразделение.Родитель;	
		КонецЕсли;
	КонецЦикла;	
КонецФункции	

Процедура ОбновитьСпискиПользователей() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СинхронизацияСМобильнымПриложениемНовый.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый КАК CRM_СинхронизацияСМобильнымПриложениемНовый";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УзелОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УзелОбъект.Записать();
	КонецЦикла;	
КонецПроцедуры

Процедура CRM_СинхронизацияiCRMСправочникиПриЗаписи(Источник, Отказ) Экспорт
	Если НЕ Отказ И Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда
		МассивПараметров = Новый Массив;
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("CRM_СинхронизацияСiCRMНовый.ОбновитьСпискиПользователей", МассивПараметров, Строка(Новый УникальныйИдентификатор), "Заполнение пользователей синхронизации");
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьИзСпискаПлановОбмена(СписокПлановОбмена) Экспорт
		
	ИндексiCRM = СписокПлановОбмена.Найти("CRM_СинхронизацияСМобильнымПриложениемНовый");
	Если ИндексiCRM <> Неопределено Тогда
		СписокПлановОбмена.Удалить(ИндексiCRM);
	КонецЕсли;

КонецПроцедуры
