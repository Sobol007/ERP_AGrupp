////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Заполняет спецификацию в строках
//
// Параметры:
//  МассивСтрок					 - ДанныеФормыСтруктура, СтрокаТабличнойЧасти - строки в которых нужно заполнить спецификацию
//  МассивДанныхПоНоменклатуре	 - Массив									 - содержит структуру данных о номенклатуре
//  ПараметрыВыбораСпецификаций	 - Структура								 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций()
//  ТолькоНезаполненные			 - Булево									 - Истина, если нужно заполнить спецификацию только если она не указана.
//
Процедура ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанныхПоНоменклатуре, ПараметрыВыбораСпецификаций, ИмяПоляСпецификация = "Спецификация", ТолькоНезаполненные = Ложь) Экспорт

	СпецификацииИзделий = СпецификацииИзделий(МассивДанныхПоНоменклатуре, ПараметрыВыбораСпецификаций);
	
	ИмяПоля = ИмяПоляСпецификация;
	ИндексДанных = 0;
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоля]) ИЛИ НЕ ТолькоНезаполненные Тогда
			
			ДанныеСпецификации = СпецификацииИзделий[ИндексДанных];
			
			Если ДанныеСпецификации <> Неопределено Тогда
				ТекущаяСтрока[ИмяПоля] = ДанныеСпецификации.Спецификация;
			Иначе
				ТекущаяСтрока[ИмяПоля] = Неопределено;
			КонецЕсли;
			
			ЗначенияЗаполнения = Новый Структура;
			Если ДанныеСпецификации <> Неопределено Тогда
				ЗначенияЗаполнения.Вставить("ОсновнаяСпецификация", ДанныеСпецификации.ОсновнаяСпецификация);
				ЗначенияЗаполнения.Вставить("ВыбранаОсновнаяСпецификация", ДанныеСпецификации.ВыбранаОсновнаяСпецификация);
				ЗначенияЗаполнения.Вставить("МногоэтапныйПроизводственныйПроцесс", ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс);
				ЗначенияЗаполнения.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", ДанныеСпецификации.ОптимальноеКоличествоПередачиМеждуЭтапами);
			Иначе
				ЗначенияЗаполнения.Вставить("ОсновнаяСпецификация", Ложь);
				ЗначенияЗаполнения.Вставить("ВыбранаОсновнаяСпецификация", Ложь);
				ЗначенияЗаполнения.Вставить("МногоэтапныйПроизводственныйПроцесс", Ложь);
				ЗначенияЗаполнения.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", 1);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияЗаполнения);
			
		КонецЕсли;
		
		МассивДанныхПоНоменклатуре[ИндексДанных].Вставить("Спецификация", ТекущаяСтрока[ИмяПоля]);
		ИндексДанных = ИндексДанных + 1;
		
	КонецЦикла; 

КонецПроцедуры

// Заполняет основную спецификацию в коллекции данных, содержащую подразделения, номенклатуру и дату начала производства.
//
// Параметры:
//  Запрос			- Запрос - содержит текст запроса к данным
//  КоллекцияДанных	- ТаблицаЗначений - содержит подразделения, номенклатуру и дату начала производства
//	СтруктураКлючаПоискаСтроки - Структура - структура для поиска данных.
//	ПолеСпецификация - Строка - имя поля спецификации коллекции данных.
//	ТолькоНезаполненные - Булево - признак необходимости заполнять только незаполненные.
//
Процедура ЗаполнитьОсновныеСпецификацииВКоллекции(Запрос,
												КоллекцияДанных,
												СтруктураКлючаПоискаСтроки,
												ПолеСпецификация = "ОсновнаяСпецификация",
												ТолькоНезаполненные = Ложь) Экспорт

	Если КоллекцияДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("ДляСпискаНоменклатуры");
	Запрос.Текст = Запрос.Текст + "
								|;
								|
								|////////////////////////////////////////////////////////////////////////////////
								|"
								+ ПолучитьТекстЗапросаОсновнойСпецификации(ПараметрыЗапроса);
								
	ОсновныеСпецификации = Запрос.Выполнить().Выгрузить();
	ОсновныеСпецификации.Индексы.Добавить("Номенклатура,Характеристика,НачалоПроизводства");
	
	Для каждого СтрокаДанных Из КоллекцияДанных Цикл
		
		Если ТолькоНезаполненные
			И ЗначениеЗаполнено(СтрокаДанных[ПолеСпецификация]) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		Для каждого КлючПоиска Из СтруктураКлючаПоискаСтроки Цикл
			СтруктураПоиска.Вставить(КлючПоиска.Ключ, СтрокаДанных[КлючПоиска.Значение]);
		КонецЦикла;
		
		СписокОсновныхСпецификаций = ОсновныеСпецификации.НайтиСтроки(СтруктураПоиска);
		
		ОсновнаяСпецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
		Приоритет = 100;
		
		// Найдем спецификацию с минимальным приоритетом
		Для каждого СтрокаСпецификация Из СписокОсновныхСпецификаций Цикл
			Если СтрокаСпецификация.Приоритет < Приоритет Тогда
				ОсновнаяСпецификация = СтрокаСпецификация.Спецификация;
				Приоритет = СтрокаСпецификация.Приоритет;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДанных[ПолеСпецификация] = ОсновнаяСпецификация;
	КонецЦикла;

КонецПроцедуры

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция - Таблица, в которой необходимо заполнить реквизиты
// 		Поля - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
// 		МассивСтрок - Массив - массив строк, которые нужно обработать.
//
Процедура ЗаполнитьСлужебныеРеквизитыПоСпецификации(КоллекцияДанных, Поля, МассивСтрок = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Спецификация КАК Спецификация,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Ссылка КАК Спецификация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПолуфабрикаты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПустыеСтатьиКалькуляции,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяНоменклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяХарактеристика
	|ПОМЕСТИТЬ СпецификацииСПолуфабрикатами
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
	|ГДЕ
	|	МатериалыИУслуги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	ВыходныеИзделия.Ссылка КАК Ссылка,
	|	ВыходныеИзделия.Ссылка.Статус КАК Статус,
	|	ВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
	|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТВыходныеИзделия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	РесурсныеСпецификацииВозвратныеОтходы.Номенклатура,
	|	РесурсныеСпецификацииВозвратныеОтходы.Характеристика,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка.Статус,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная),
	|	РесурсныеСпецификацииВозвратныеОтходы.КоличествоУпаковок
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК РесурсныеСпецификацииВозвратныеОтходы
	|ГДЕ
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.НомерСтроки ЕСТЬ NULL 
	|				ИЛИ ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПобочныйВыход,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|				И ТаблицаДокумента.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВыходныеИзделия.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ТОГДА 2
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьПустыеСтатьиКалькуляции
	|			ТОГДА 4
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяНоменклатура
	|			ТОГДА 5
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяХарактеристика
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодОшибки,
	|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
	|	0 КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.ДоляСтоимости ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ ВыходныеИзделия.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВыходныеИзделия.КоличествоУпаковок,0) > 0 И (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок - 0.5 КАК ЧИСЛО(15, 0))) < (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок КАК ЧИСЛО(15, 3)))
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодПредупреждения,
	|	ЕСТЬNULL(ВыходныеИзделия.ТипСтоимости, ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается)) КАК ТипСтоимости
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыходныеИзделия КАК ВыходныеИзделия
	|		ПО ТаблицаДокумента.Спецификация = ВыходныеИзделия.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ВыходныеИзделия.Номенклатура
	|			И (ТаблицаДокумента.Характеристика = ВыходныеИзделия.Характеристика
	|				ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСПолуфабрикатами КАК СпецификацииСПолуфабрикатами
	|		ПО ТаблицаДокумента.Спецификация = СпецификацииСПолуфабрикатами.Спецификация";
	
	Если МассивСтрок = Неопределено Тогда
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	Иначе
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(МассивСтрок, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ОтборНомерСтроки = Новый Структура("НомерСтроки");
	
	Для Каждого Строка Из КоллекцияДанных Цикл
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		Если Выборка.НайтиСледующий(ОтборНомерСтроки) Тогда
			ЗаполнитьЗначенияСвойств(Строка, Выборка, Поля);
			Выборка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность заполнения полуфабрикатов производимых в процессе
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция - Таблица, в которой необходимо заполнить реквизиты
// 		ПараметрыПроверки - Структура - Параметры проверок, которые требуется выполнить
// 		Отказ - Булево - признак наличия ошибок заполнения
// 		Объект - СправочникОбъект.РесурсныеСпецификации,
//				ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа,
//				ДокументСсылка.ЗаказНаПроизводство - объект, связанный с проверкой.
//
Процедура ПроверитьСпецификацииПолуфабрикатов(КоллекцияДанных, ПараметрыПроверки, Отказ, Объект = Неопределено) Экспорт
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	ПутьКДанным = "";
	ИмяРеквизита = "ИсточникПолученияПолуфабриката";
	
	СтруктураПроверок = ПараметрыПроверки.СтруктураПроверок;
	ВыводитьСообщения = Истина;
	
	Если ПараметрыПроверки.Свойство("ПутьКДанным") Тогда
		ПутьКДанным = ПараметрыПроверки.ПутьКДанным;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ИмяРеквизита") Тогда
		ИмяРеквизита = ПараметрыПроверки.ИмяРеквизита;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ВыводитьСообщения") Тогда
		ВыводитьСообщения = ПараметрыПроверки.ВыводитьСообщения;
	КонецЕсли;
	
	ШаблонСообщенияНетИзделия              = НСтр("ru = 'В выходных изделиях спецификации полуфабриката должен быть полуфабрикат, который потребляется в текущей спецификации (список ""Материалы и работы"", строка %1)';
													|en = 'In the finished products of semi-finished product BOM, there should be a semi-finished product which is used in the current bill of materials (the ""Materials and works"" list, line %1)'");
	ШаблонСообщенияПереработкаНаСтороне    = НСтр("ru = 'По спецификации полуфабриката производственный процесс выполняется силами переработчика. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)';
													|en = 'Manufacturing process against the semi-finished product BOM is performed by toller. The semi-finished products should be manufactured by own effort (the ""Materials and works"" list, line %1)'");
	ШаблонСообщенияСпецификацияНеДействует = НСтр("ru = 'Спецификация полуфабриката должна быть действующей (список ""Материалы и работы"", строка %1)';
													|en = 'Semi-finished product BOM should be valid (the ""Materials and works"" list, line %1)'");
	ШаблонСообщенияНекратноеКоличество     = НСтр("ru = 'В спецификации полуфабриката выход полуфабриката должен быть кратен количеству потребляемого полуфабриката текущей спецификации (список ""Материалы и работы"", строка %1)';
													|en = 'Semi-finished product yield should be a multiple of quantity of the consumed semi-finished product of the current BOM (the ""Materials and works"" list, line %1)'");
	
	СписокСпецификаций = Новый Массив;
	СписокСтрокПромежуточныхПолуфабрикатов = Новый Массив;
	
	Для каждого Строка Из КоллекцияДанных Цикл
		
		Если Строка.ПроизводитсяВПроцессе Тогда
		
			Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
				
				Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
					
					СписокСпецификаций.Добавить(Строка.ИсточникПолученияПолуфабриката);
					
				ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов") Тогда
					
					СписокСтрокПромежуточныхПолуфабрикатов.Добавить(Строка);
					
				КонецЕсли;
			
			ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеСпецификации") Тогда // только 2.1
				
				Если Не ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
					
					Если ВыводитьСообщения Тогда
						Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
							Шаблон = НСтр("ru = 'Не заполнена колонка ""Спецификация полуфабриката"" в строке %1 списка ""Материалы и работы""';
											|en = 'The ""Semi-finished product BOM"" column is not filled in line %1 of the ""Materials and works"" list'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						Иначе
							Шаблон = НСтр("ru = 'Не заполнена колонка ""Этап выпуска полуфабриката"" в строке %1 списка ""Материалы и работы""';
											|en = 'The ""Release stage of the semi-finished product"" column is not filled in line %1 of the ""Materials and works"" list'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						КонецЕсли;
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, ИмяРеквизита);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					
					Если ВыводитьСообщения Тогда
						Шаблон = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Материалы и работы"". Колонка обязательна для заполнения для производимых полуфабрикатов.';
										|en = 'The ""Products"" column is not filled in line %1 of the ""Materials and works"" list. The column is required for manufactured semi-finished products.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "Номенклатура");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения,
							Объект,
							Поле,
							ПутьКДанным,
							Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Владелец КАК Ссылка
		|ПОМЕСТИТЬ ВТСпецификацииПолуфабрикатов
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (&СпецификацииПолуфабрикатов)
		|	И ЭтапыПроизводства.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Ссылка,
		|	РесурсныеСпецификации.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА СпецификацииСЭтапамиНаСтороне.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПереработкаНаСтороне
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецификацииПолуфабрикатов КАК СпецификацииСЭтапамиНаСтороне
		|		ПО РесурсныеСпецификации.Ссылка = СпецификацииСЭтапамиНаСтороне.Ссылка
		|ГДЕ
		|	РесурсныеСпецификации.Ссылка В(&СпецификацииПолуфабрикатов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка КАК Ссылка,
		|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура КАК Номенклатура,
		|	РесурсныеСпецификацииВыходныеИзделия.Характеристика КАК Характеристика,
		|	РесурсныеСпецификацииВыходныеИзделия.Количество КАК Количество
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
		|ГДЕ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка В(&СпецификацииПолуфабрикатов)");
	
	Запрос.УстановитьПараметр("СпецификацииПолуфабрикатов", СписокСпецификаций);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РеквизитыСпецификаций = Результат[1].Выгрузить();
	ДанныеСпецификаций    = Результат[2].Выгрузить();
	
	РеквизитыСпецификаций.Индексы.Добавить("Ссылка");
	
	Для Каждого СтрокаМатериал Из КоллекцияДанных Цикл
	
		Если НЕ СтрокаМатериал.ПроизводитсяВПроцессе 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаМатериал.ИсточникПолученияПолуфабриката)
			ИЛИ ТипЗнч(СтрокаМатериал.ИсточникПолученияПолуфабриката) <> Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", СтрокаМатериал.ИсточникПолученияПолуфабриката);
		СпецификацияПолуфабриката = ДанныеСпецификаций.НайтиСтроки(СтруктураПоиска);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, ИмяРеквизита);
		
		Реквизиты = РеквизитыСпецификаций.Найти(СтрокаМатериал.ИсточникПолученияПолуфабриката, "Ссылка");
		Если Реквизиты <> Неопределено И Реквизиты.Статус <> Перечисления.СтатусыСпецификаций.Действует И СтруктураПроверок.Свойство("СтатусСпецификации") Тогда
			
			// Спецификация не действует
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияСпецификацияНеДействует, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
		Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 И СтруктураПроверок.Свойство("ПроизводствоНаСтороне")
			И Реквизиты <> Неопределено И Реквизиты.ЕстьПереработкаНаСтороне Тогда
			
			// Производство на стороне
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПереработкаНаСтороне, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьВыходПолуфабриката = Ложь;
		Для каждого СтрокаИзделиеСпецификацииПолуфабриката Из СпецификацияПолуфабриката Цикл
			Если СтрокаМатериал.Номенклатура = СтрокаИзделиеСпецификацииПолуфабриката.Номенклатура
				И (НЕ ЗначениеЗаполнено(СтрокаИзделиеСпецификацииПолуфабриката.Характеристика)
				ИЛИ СтрокаМатериал.Характеристика = СтрокаИзделиеСпецификацииПолуфабриката.Характеристика) Тогда
				
				ЕстьВыходПолуфабриката = Истина;
				
				Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 И СтруктураПроверок.Свойство("КратностьПроизводимогоКоличества") Тогда
					Если СтрокаМатериал.Количество <> 0
						И СтрокаИзделиеСпецификацииПолуфабриката.Количество <> 0
						И Цел(СтрокаМатериал.Количество / СтрокаИзделиеСпецификацииПолуфабриката.Количество) <> СтрокаМатериал.Количество / СтрокаИзделиеСпецификацииПолуфабриката.Количество Тогда
						
						Если ВыводитьСообщения Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщенияНекратноеКоличество,
								СтрокаМатериал.НомерСтроки);
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
						Иначе
							Отказ = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПроверок.Свойство("СоответствиеСпецификации") Тогда
			Если НЕ ЕстьВыходПолуфабриката Тогда
				// Нет выхода полуфабриката
				Если ВыводитьСообщения Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияНетИзделия,
						СтрокаМатериал.НомерСтроки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов")
		И СписокСтрокПромежуточныхПолуфабрикатов.Количество() > 0 Тогда
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов = ПараметрыПроверки.ПараметрыПроверкиВнутреннихПолуфабрикатов;
		ТекстЗапроса = ТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов);
		ТаблицаПотребностиВПолуфабрикатах = ПотребностьВоВнутреннихПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, СписокСтрокПромежуточныхПолуфабрикатов);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ИспользуетсяПроизводство22", НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство22);
		
		Запрос.УстановитьПараметр("ТаблицаПотребностиВПолуфабрикатах", ТаблицаПотребностиВПолуфабрикатах);
		
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа" Тогда
			
			Запрос.УстановитьПараметр("ТаблицаЭтаповЗаказа", ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов);
		
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		КоличествоПакетов = Результат.Количество();
		
		Если Не Результат[КоличествоПакетов - 4].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 4].Выбрать();
			
			Шаблон = НСтр("ru = 'Этап выпуска полуфабриката выполняется позже этапа, на котором этот полуфабрикат потребляется (список ""Материалы и работы"", строка %1)';
							|en = 'Release stage of the semi-finished product is performed later than the stage at which this semi-finished product is consumed (the ""Materials and works"" list, line %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
					
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 3].Выбрать();
			
			Шаблон = НСтр("ru = 'Не допускается указание работ в качестве полуфабрикатов, производимых на этапах (список ""Материалы и работы"", строка %1)';
							|en = 'Cannot specify works as semi-finished products manufactured at stages (list ""Materials and works"", line %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 2].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 2].Выбрать();
			
			Шаблон = НСтр("ru = 'Этап выпуска полуфабриката выполняется переработчиком. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)';
							|en = 'Release stage of the semi-finished product is performed by a toller. Semi-finished products should be manufactured by own effort (the ""Materials and works"" list, line %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
			
			Шаблон  = НСтр("ru = 'В выходных изделиях не описан выпуск полуфабриката ""%НоменклатураХарактеристика%"" на этапе ""%ЭтапВыпуска%"" в%Достаточном% количестве%НеХватает% %Количество% %Упаковка%, см. список ""%ТаблицаПолуфабрикатов%"" (список ""Материалы и работы"", строка %НомерСтроки%)';
							|en = 'Release of semi-finished product ""%НоменклатураХарактеристика%"" at stage ""%ЭтапВыпуска%"" in %Достаточном% quantity %НеХватает% %Количество% %Упаковка% is not described in the finished products, see list ""%ТаблицаПолуфабрикатов%"" (the ""Materials and works"" list, line %НомерСтроки%)'");
			ТекстДостаточном = " " + НСтр("ru = 'достаточном';
											|en = 'sufficient'");
			ТекстНеХватает   = ", " + НСтр("ru = 'не хватает';
											|en = 'not enough'");
			
			СтруктураПоиска = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
				ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска);
			
			ТаблицаПолуфабрикатовОстаток = ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов;
			ТаблицаПолуфабрикатовОстаток.Колонки.Добавить("КоличествоДоступно");
			
			Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				НайденныеСтроки = ТаблицаПолуфабрикатовОстаток.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					СтрокаПолуфабрикат = НайденныеСтроки[0];
				Иначе
					СтрокаПолуфабрикат = Неопределено;
				КонецЕсли;
				
				Если СтрокаПолуфабрикат = Неопределено Тогда
					КоличествоДоступно = 0;
				ИначеЕсли СтрокаПолуфабрикат.КоличествоДоступно <> Неопределено Тогда
					КоличествоДоступно = СтрокаПолуфабрикат.КоличествоДоступно;
				Иначе
					КоличествоДоступно = СтрокаПолуфабрикат.Количество;
				КонецЕсли;
				
				Если КоличествоДоступно = -1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.Количество > КоличествоДоступно Тогда
					
					Если ВыводитьСообщения Тогда
						
						ТекстСообщения = СтрЗаменить(Шаблон, "%НоменклатураХарактеристика%", 
											НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, Выборка.ХарактеристикаПредставление));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапВыпуска%", Выборка.ЭтапВыпускаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", (Выборка.Количество - КоличествоДоступно)/Выборка.КоэффициентУпаковки);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.УпаковкаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаПолуфабрикатов%", ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
						
						Если СтрокаПолуфабрикат <> Неопределено Тогда
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", ТекстДостаточном);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", ТекстНеХватает);
						Иначе
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", "");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", "");
						КонецЕсли;
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
							Выборка.НомерСтроки, 
							ИмяРеквизита);
							
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							Объект, 
							Поле, 
							ПутьКДанным, 
							Отказ);
							
					Иначе
						
						Отказ = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаПолуфабрикат <> Неопределено Тогда
					СтрокаПолуфабрикат.КоличествоДоступно = Макс(КоличествоДоступно - Выборка.Количество, 0);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Проверяет последовательность этапов спецификации или операций маршрутных карт
//
// Параметры:
//  ВладелецОпераций	 - СправочникСсылка	 - ссылка на владельца операций
//  СтруктураПараметров	 - Структура		 - обязательные поля: 
//  											ИмяСправочникаОпераций, ПолеНомерОперации, ПолеНомерСледующейОперации
//  СтруктураПроверок	 - Структура		 - состав проверок и тексты сообщений об ошибках
//  Отказ				 - Булево			 - признак отмены текущего действия.
// 
// Возвращаемое значение:
//  Булево - истина, если последовательность операций правильная.
//
Функция ПоследовательностьОперацийПравильная(ВладелецОпераций, СтруктураПараметров, СтруктураПроверок, Отказ = Ложь) Экспорт
	
	ИмяСправочникаОпераций     = СтруктураПараметров.ИмяСправочникаОпераций;
	ПолеНомерОперации          = СтруктураПараметров.ПолеНомерОперации;
	ПолеНомерСледующейОперации = СтруктураПараметров.ПолеНомерСледующейОперации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпрОперации.Ссылка КАК Операция,
	               |	СпрОперации.Представление КАК Представление,
	               |	СпрОперации." + ПолеНомерОперации + " КАК НомерОперации,
	               |	СпрОперации." + ПолеНомерСледующейОперации + " КАК НомерСледующейОперации,
	               |	МАКСИМУМ(ВЫБОР
	               |		КОГДА СпрСледующиеОперации.Ссылка ЕСТЬ NULL 
	               |				И СпрОперации." + ПолеНомерСледующейОперации + " <> 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ) КАК НетСледующейОперации
	               |ИЗ
	               |	Справочник." + ИмяСправочникаОпераций + " КАК СпрОперации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочникаОпераций + " КАК СпрСледующиеОперации
	               |		ПО СпрОперации." + ПолеНомерСледующейОперации + " = СпрСледующиеОперации." + ПолеНомерОперации + "
	               |			И (СпрСледующиеОперации.Владелец = &Владелец)
	               |			И (НЕ СпрСледующиеОперации.ПометкаУдаления)
	               |ГДЕ
	               |	СпрОперации.Владелец = &Владелец
	               |	И НЕ СпрОперации.ПометкаУдаления
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СпрОперации.Ссылка,
				   |	СпрОперации.Представление,
	               |	СпрОперации." + ПолеНомерОперации + ",
	               |	СпрОперации." + ПолеНомерСледующейОперации;
	
	Запрос.УстановитьПараметр("Владелец", ВладелецОпераций);
	
	СписокОпераций = Запрос.Выполнить().Выгрузить();
	
	СписокОпераций.Колонки.Добавить("ПолеНомерСледующейОперации", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
	СписокОпераций.ЗаполнитьЗначения(ПолеНомерСледующейОперации, "ПолеНомерСледующейОперации");
	
	ЕстьОшибки = НЕ ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок, ВладелецОпераций);
	
	Отказ = Отказ ИЛИ ЕстьОшибки;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Проверяет заданный список операций/этапов на корректность по следующим критериям:
// - имеется первая операция и она одна;
// - имеется последняя операция;
// - имеются все последующие операции.
//
// Параметры:
//	СписокОпераций - ТаблицаЗначений - операции/этапы для проверки, колонки:
//		* Операция - СправочникСсылка - ссылка на этап/операцию.
//		* Представление - Строка - представление этапа/операции.
//		* НомерОперации - Число - номер операции.
//		* НомерСледующейОперации - Число - номер следующей операции.
//		* НетСледующейОперации - Булево - флаг того, что в списке отсутствует операция,
//			номер которой указан в качестве номера следующей операции.
//		* ПолеНомерСледующейОперации - Строка - наименование реквизита формы, с которым необходимо
//			связать сообщение об отсутствии следующей операции.
//  СтруктураПроверок - Структура - состав проверок и тексты сообщений об ошибках
//  ВладелецОпераций - СправочникСсылка - ссылка на владельца операций.
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная.
//
Функция ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок, ВладелецОпераций = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	
	#Область НетПервойОперации_НесколькоПервыхОпераций
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерОперации", 1));
	Если СтруктураПроверок.Свойство("НетПервойОперации")
		И СписокСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НетПервойОперации,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	ИначеЕсли СтруктураПроверок.Свойство("НесколькоПервыхОпераций")
		И СписокСтрок.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НесколькоПервыхОпераций,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НетПоследнейОперации_НесколькоПоследнихОпераций
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерСледующейОперации", 0));
	Если СтруктураПроверок.Свойство("НетПоследнейОперации")
		И СписокСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НетПоследнейОперации,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	ИначеЕсли СтруктураПроверок.Свойство("НесколькоПоследнихОпераций")
		И СписокСтрок.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НесколькоПоследнихОпераций,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки); 
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НетСледующейОперации
	
	Если СтруктураПроверок.Свойство("НетСледующейОперации") Тогда
		
		СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НетСледующейОперации", Истина));
		Для каждого ЭлементКоллекции Из СписокСтрок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтруктураПроверок.НетСледующейОперации,
				ЭлементКоллекции.Представление);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭлементКоллекции.Операция,
				ЭлементКоллекции.ПолеНомерСледующейОперации,
				,
				ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЕсли;

	#КонецОбласти
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Возвращает параметры выбора спецификаций для номенклатуры.
//
// Параметры:
//  Объект			 - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура	 - объект, для которого нужно сформировать параметры.
//  МенеджерОбъекта	 - СправочникМенеджер, ДокументМенеджер						 - менеджер объекта, для которого нужно сформировать параметры.
// 
// Возвращаемое значение:
//  Структура - параметры выбора спецификаций.
//
Функция ПараметрыВыбораСпецификаций(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций();
	
	ЗначенияРеквизитов = Неопределено;
	Если ЗначениеЗаполнено(ИменаРеквизитов) Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект))
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
		Иначе
			ЗначенияРеквизитов = Новый Структура(ИменаРеквизитов);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(МенеджерОбъекта.ПараметрыВыбораСпецификаций(ЗначенияРеквизитов));
	
КонецФункции

#КонецОбласти

#Область ЭтапыПроизводства

// Заполняет единицу измерения буфера в списке
//
// Параметры:
//  ИнтервалПланирования - ПеречисленияСсылка.ТочностьГрафикаПроизводства	 - интервал планирования
//  СписокВыбора		 - СписокЗначений									 - Список для заполнения.
//
Процедура ЗаполнитьВыборЕдиницыИзмеренияБуфера(ИнтервалПланирования, СписокВыбора) Экспорт

	СписокВыбора.Очистить();
	//++ НЕ УТКА
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		СписокВыбора.Добавить(Перечисления.ЕдиницыИзмеренияВремени.Час);
	КонецЕсли;
	//-- НЕ УТКА
	СписокВыбора.Добавить(Перечисления.ЕдиницыИзмеренияВремени.День);
	
КонецПроцедуры

// Проверяет соответствуют ли значения реквизитов выбранному подразделению
//  Если не соответствуют то значения очищаются.
//
// Параметры:
//  Объект			 - ДанныеФормы	 - Объект содержащий данные этапа.
//  СписокРеквизитов - Строка		 - Список реквизитов к проверке.
//
Процедура ПроверитьСоответствиеРеквизитовПодразделению(Объект, СписокРеквизитов = "") Экспорт

	Если Объект.Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
//++ НЕ УТКА
	ВсеРеквизиты = ПустаяСтрока(СписокРеквизитов);
	СписокРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СписокРеквизитов.Свойство("ВидыРабочихЦентров") ИЛИ ВсеРеквизиты Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВидыРабочихЦентров.Ссылка
			|ИЗ
			|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
			|ГДЕ
			|	(ВидыРабочихЦентров.Ссылка В (&ВидРабочегоЦентра)
			|		ИЛИ ВидыРабочихЦентров.Ссылка В (&АльтернативныеВидыРабочихЦентров))
			|	И ВидыРабочихЦентров.Подразделение <> &Подразделение");
		
		Запрос.УстановитьПараметр("Подразделение",     Объект.Подразделение);
		Запрос.УстановитьПараметр("ВидРабочегоЦентра", Объект.ВидыРабочихЦентров.Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра"));
		Запрос.УстановитьПараметр("АльтернативныеВидыРабочихЦентров", Объект.АльтернативныеВидыРабочихЦентров.Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра"));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", Выборка.Ссылка);
	  		СписокСтрок = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаВидРЦ Из СписокСтрок Цикл
				СтрокаВидРЦ.ВидРабочегоЦентра = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
				СтрокаВидРЦ.Использовать = Истина;
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", Выборка.Ссылка);
	  		СписокСтрок = Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаВидРЦ Из СписокСтрок Цикл
				Объект.АльтернативныеВидыРабочихЦентров.Удалить(СтрокаВидРЦ);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокРеквизитов.Свойство("МаршрутнаяКарта") ИЛИ ВсеРеквизиты Тогда
		
		Если НЕ Объект.МаршрутнаяКарта.Пустая() Тогда
			Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МаршрутнаяКарта, "Подразделение");
			Если Объект.Подразделение <> Подразделение Тогда
				Объект.МаршрутнаяКарта = Справочники.МаршрутныеКарты.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
	
	КонецЕсли;
//-- НЕ УТКА
	
КонецПроцедуры

//++ НЕ УТКА

// Процедура заполняет плановую длительность и единицу измерения длительности этапа ББВ.
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2, СправочникОбъект.ЭтапПроизводства - этап
//  ИнтервалПланирования - ПеречисленияСсылка.ТочностьГрафикаПроизводства	 - интервал планирования.
//
Процедура ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(Объект, ИнтервалПланирования = Неопределено) Экспорт
	
	ЕдиницаИзмеренияДлительностиЭтапа = Перечисления.ЕдиницыИзмеренияВремени.День;
	
	Если ИнтервалПланирования = Неопределено Тогда
		
		ИнтервалПланирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Подразделение, "ИнтервалПланирования");
			
	КонецЕсли;
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час
		ИЛИ ЗначениеЗаполнено(Объект.ПредварительныйБуфер) 
			И Объект.ЕдиницаИзмеренияПредварительногоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Час
		ИЛИ ЗначениеЗаполнено(Объект.ЗавершающийБуфер) 
			И Объект.ЕдиницаИзмеренияЗавершающегоБуфера = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
		
		ЕдиницаИзмеренияДлительностиЭтапа =  Перечисления.ЕдиницыИзмеренияВремени.Час;
		
	КонецЕсли;
	
	ЕстьРасчетПоФормулам = Ложь;
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		
		ВидыРабочихЦентров = Объект.ВидыРабочихЦентров.НайтиСтроки(Новый Структура("Использовать", Истина));
		ЕстьРасчетПоФормулам = Ложь;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ЭтапыПроизводства") Тогда
		
		ВидыРабочихЦентров = Объект.ВидыРабочихЦентров;
		ЕстьРасчетПоФормулам = Истина;
		
	КонецЕсли;
	
	ДлительностьЭтапа = 0;
	
	Если ВидыРабочихЦентров.Количество() > 0 Тогда
		
		НормативнаяДлительность = ПланированиеПроизводстваКлиентСервер.ПолучитьНормативнуюДлительностьИнтервала(
			ИнтервалПланирования, 
			ЕдиницаИзмеренияДлительностиЭтапа);
		
		НормативнаяДлительностьВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьНормативнуюДлительностьИнтервала(
			ИнтервалПланирования) * 86400;
		
		Ссылки = Новый Массив;
		Для каждого Строка Из ВидыРабочихЦентров Цикл
			Ссылки.Добавить(Строка.ВидРабочегоЦентра);
		КонецЦикла;
		МаксимальнаяДоступность = Справочники.ВидыРабочихЦентров.МаксимальнаяДоступностьВСекундах(Ссылки);
		
		ЭтоПерваяСтрока = Истина;
		
		Для каждого Строка Из ВидыРабочихЦентров Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.ВидРабочегоЦентра) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьРасчетПоФормулам И Не ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
				ВремяРаботыВСекундах = НормативнаяДлительностьВСекундах;
			Иначе
				ВремяРаботыВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
					Строка.ВремяРаботы,
					Строка.ЕдиницаИзмерения);
			КонецЕсли;
			
			МаксДоступностьВСекундах = МаксимальнаяДоступность.Получить(Строка.ВидРабочегоЦентра);
			
			КоличествоИнтервалов = Окр(ВремяРаботыВСекундах/МаксДоступностьВСекундах+0.5,0,РежимОкругления.Окр15как10);
			
			Если Объект.ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Последовательно Тогда
				
				Если Не ЭтоПерваяСтрока Тогда
					КоличествоИнтервалов = КоличествоИнтервалов - 1;
				КонецЕсли;
				
				ДлительностьЭтапа = ДлительностьЭтапа + (КоличествоИнтервалов * НормативнаяДлительность);
				
			Иначе
				
				ДлительностьЭтапа = Макс(ДлительностьЭтапа, (КоличествоИнтервалов * НормативнаяДлительность));
				
			КонецЕсли;
			
			ЭтоПерваяСтрока = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПредварительныйБуфер) Тогда
		
		Если Объект.ЕдиницаИзмеренияПредварительногоБуфера = ЕдиницаИзмеренияДлительностиЭтапа Тогда
			
			ДлительностьЭтапа = ДлительностьЭтапа + Объект.ПредварительныйБуфер;
			
		Иначе
			
			ДлительностьЭтапа = ДлительностьЭтапа + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
																		ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																					Объект.ПредварительныйБуфер, 
																					Объект.ЕдиницаИзмеренияПредварительногоБуфера), 
																		ЕдиницаИзмеренияДлительностиЭтапа);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗавершающийБуфер) Тогда
	
		Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ЕдиницаИзмеренияДлительностиЭтапа Тогда
			
			ДлительностьЭтапа = ДлительностьЭтапа + Объект.ЗавершающийБуфер;
			
		Иначе
			
			ДлительностьЭтапа = ДлительностьЭтапа + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
																		ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																					Объект.ЗавершающийБуфер, 
																					Объект.ЕдиницаИзмеренияЗавершающегоБуфера), 
																		ЕдиницаИзмеренияДлительностиЭтапа);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ЕдиницаИзмеренияДлительностиЭтапа = ЕдиницаИзмеренияДлительностиЭтапа;
	Объект.ДлительностьЭтапа                 = ДлительностьЭтапа;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Проверяет возможность описания партии выпуска по спецификации
// 
// Возвращаемое значение:
//  Булево - Истина, если описание партии выпуска по спецификации доступно
//
Функция ДоступноОписаниеПартииВыпуска() Экспорт
	
	Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	
КонецФункции

// Проверяет возможность описания типа производственного процесса (сборка, разборка, ремонт).
// 
// Возвращаемое значение:
//  Булево - Истина, если тип производственного процесса доступен.
//
Функция ДоступноОписаниеТипаПроизводственногоПроцесса() Экспорт
	
	Результат = Ложь;
//++ НЕ УТКА
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
//-- НЕ УТКА
	Возврат Результат;
	
КонецФункции

// Проверяет возможность описания вероятности применения материалов.
// 
// Возвращаемое значение:
//  Булево - Истина, если тип производственного процесса доступен.
//
Функция ДоступноОписаниеВероятностиПримененияМатериалов() Экспорт
	
	Результат = Ложь;
//++ НЕ УТКА
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
//-- НЕ УТКА
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область ДеревоСпецификаций

// Строит дерево спецификаций для изделия.
//
// Параметры:
//  Форма		 - УправляемаяФорма	 - управляемая форма, на которой расположено дерево спецификаций
//  Параметры	 - Структура		 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДереваСпецификаций().
//
Процедура ПостроитьДеревоСпецификаций(Форма, Параметры) Экспорт
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоСпецификаций");
	
	ЗаполнитьДеревоСпецификаций(Параметры, Дерево);
	
	АдресВХранилище = "";
	
	Если Параметры.ДинамическоеСчитывание Тогда
		
		Параметры.СохранятьДанные = Истина;
		
		АдресВХранилище = ЗакэшироватьСтруктуруДереваСпецификаций(
			Параметры, 
			Дерево, 
			Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Форма.АдресДереваСпецификацийВХранилище = АдресВХранилище;
	
	Если Параметры.ДинамическоеСчитывание Тогда
		
		ПараметрыОтбора = Новый Структура("ЕстьСпецификация", Истина);
		
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если Строка.Строки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			Строка.Строки.Добавить();
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСпецификаций");
	
КонецПроцедуры

// Возвращает дерево спецификаций, при динамическом считывании предварительно загружает все узлы дерева.
//
// Параметры:
//  Форма		 - УправляемаяФорма	 - управляемая форма, на которой расположено дерево спецификаций.
//
Функция ПрочитатьДеревоСпецификаций(Форма) Экспорт
	
	Если Форма.ДинамическоеСчитывание Тогда
		
		СтруктураДерева = ПолучитьИзВременногоХранилища(Форма.АдресДереваСпецификацийВХранилище);
		
		Если СтруктураДерева = Неопределено Тогда
			ВызватьИсключение Нстр("ru = 'Ошибка чтения кешированных значений!';
									|en = 'An error occurred when reading cache values.'");
		КонецЕсли;
		
		Параметры = СтруктураДерева.Параметры;
		Дерево    = СтруктураДерева.Дерево;
		
		Параметры.ДинамическоеСчитывание = Ложь;
		
		Если Параметры.СохранятьДанные Тогда
			
			ПараметрыОтбора = Новый Структура("ЕстьСпецификация,СпецификацияПрочитана", Истина, Ложь);
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			
			Для каждого СтрокаДерева Из НайденныеСтроки Цикл
				
				ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева);
				
			КонецЦикла;
			
		Иначе
			
			ЗаполнитьДеревоСпецификаций(Параметры, Дерево);
			
		КонецЕсли;
		
		Параметры.ДинамическоеСчитывание = Истина;
		
		Если Параметры.СохранятьДанные Тогда
			
			Форма.АдресДереваСпецификацийВХранилище = ЗакэшироватьСтруктуруДереваСпецификаций(
				Параметры, 
				Дерево, 
				Форма.УникальныйИдентификатор);
				
		КонецЕсли;
		
	Иначе
		
		Дерево = Форма.РеквизитФормыВЗначение("ДеревоСпецификаций");
		
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Получает подчиненные элементы строки дерева спецификаций
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные текущей строки
//  АдресВХранилище		 - Строка	 - адрес дерева спецификаций во временном хранилище
//  ОбновитьДанныеСтроки - Булево	 - признак, принудительно обновляет данные в кеше.
// 
// Возвращаемое значение:
//   - Массив - подчиненные элементы строки дерева спецификаций.
//
Функция ДеревоСпецификацийПрочитатьЭлементы(ТекущаяСтрока, АдресВХранилище, ОбновитьДанныеСтроки = Ложь) Экспорт

	КоллекцияЭлементов = Новый Массив;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	СтруктураДерева = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	КэшНеэффективен = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) > 200;
	
	Если СтруктураДерева <> Неопределено Тогда
		
		Параметры = СтруктураДерева.Параметры;
		Дерево    = СтруктураДерева.Дерево;
		
		ДеревоИзменено = Ложь;
		
		Если Параметры.СохранятьДанные Тогда
			
			СтрокаДерева = Дерево.Строки.Найти(ТекущаяСтрока.Идентификатор, "Идентификатор", Истина); 
			
			Если СтрокаДерева <> Неопределено
				И ОбновитьДанныеСтроки Тогда
				
				СтрокаДерева.Спецификация     = ТекущаяСтрока.Спецификация;
				СтрокаДерева.ЕстьСпецификация = ТекущаяСтрока.ЕстьСпецификация;
				
				СтрокаДерева.СпецификацияПрочитана = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаДерева = Дерево.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				СтрокаДерева,
				ТекущаяСтрока,
				,
				"СпецификацияПрочитана");
			
		КонецЕсли;
		
		Если СтрокаДерева <> Неопределено Тогда
			
			Если Не СтрокаДерева.СпецификацияПрочитана Тогда
			
				ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева);
				
				ДеревоИзменено = Параметры.СохранятьДанные;
				
			КонецЕсли;
		
			СтрокаДереваСпецификацийВМассивСтруктур(СтрокаДерева, КоллекцияЭлементов);
			
		КонецЕсли;
		
		Если Параметры.СохранятьДанные 
			И КэшНеэффективен Тогда 
			
			Дерево.Строки.Очистить();
			ДеревоИзменено = Истина;
			
			Параметры.СохранятьДанные = Ложь;
			
		КонецЕсли;
		
		Если ДеревоИзменено Тогда
			
			ЗакэшироватьСтруктуруДереваСпецификаций(Параметры, Дерево, АдресВХранилище);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоллекцияЭлементов;
	
КонецФункции

// Изменяет спецификацию в строке дерева спецификаций
//
// Параметры:
//  Форма			 - УправляемаяФорма		 - управляемая форма, на которой расположено дерево спецификаций
//  Параметры		 - Структура			 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДереваСпецификаций()
//  ТекущиеДанные	 - ДанныеФормыЭлементДерева	 - строка, в которой будет изменена спецификация.
//
Процедура ИзменитьСпецификациюВСтрокеДерева(Форма, Параметры, ТекущиеДанные) Экспорт

	Если Параметры.ДинамическоеСчитывание Тогда
		
		ТекущиеДанныеСтруктурой = УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой(ТекущиеДанные);
		
		АдресВХранилище = Форма.АдресДереваСпецификацийВХранилище;
		ОбновитьДанныеСтроки = Истина;
		
		КоллекцияЭлементов = ДеревоСпецификацийПрочитатьЭлементы(ТекущиеДанныеСтруктурой, АдресВХранилище, ОбновитьДанныеСтроки);
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ДеревоСпецификацийВывестиЭлементы(ТекущиеДанные, КоллекцияЭлементов);
		
	Иначе
		
		Дерево = Форма.РеквизитФормыВЗначение("ДеревоСпецификаций");
		
		СтрокаДерева = Дерево.Строки.Найти(ТекущиеДанные.Идентификатор, "Идентификатор", Истина);
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева);
		
		Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСпецификаций");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура рекурсивного добавления строк в дерево спецификации.
//
// Параметры:
//  Параметры					 - Структура - структура параметров
//  Дерево						 - ДеревоЗначений	 - заполняемое дерево значений
//  СтрокаДерева				 - СтрокаДереваЗначений	 - строка, в которую добавляются строки
//  ИспользованныеСпецификации	 - Массив				 - массив использованных спецификаций
//  КлючСвязи					 - УникальныйИдентификатор	 - ключ связи.
//
Процедура ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева, ИспользованныеСпецификации = Неопределено, КлючСвязи = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура;
	
	Если СтрокаДерева <> Неопределено Тогда
		
		СтрокаДерева.Строки.Очистить();
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.Спецификация) Тогда
			Возврат;
		КонецЕсли;
		
		НоменклатураРодителя = СтрокаДерева.Номенклатура;
		ХарактеристикаРодителя = СтрокаДерева.Характеристика;
		СпецификацияРодителя = СтрокаДерева.Спецификация;
		
		Если СтрокаДерева.Количество = 0 Тогда
			
			ДанныеОсновногоИзделия = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(
				СпецификацияРодителя,
				НоменклатураРодителя,
				ХарактеристикаРодителя);
			
			Если ДанныеОсновногоИзделия.Номенклатура.Пустая() Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеОсновногоИзделия, "Количество,КоличествоУпаковок,Упаковка");
			
		КонецЕсли;
		
		КоличествоРодителя = СтрокаДерева.Количество;
		
		ЕстьСпецификация = СтрокаДерева.ЕстьСпецификация;
		
	Иначе
		
		ДанныеОсновногоИзделия = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(Параметры.Спецификация);
		
			НоменклатураРодителя   = ДанныеОсновногоИзделия.Номенклатура;
			ХарактеристикаРодителя = ДанныеОсновногоИзделия.Характеристика;
			КоличествоРодителя     = ДанныеОсновногоИзделия.Количество;
		
		СпецификацияРодителя = Параметры.Спецификация;
		ЕстьСпецификация = Истина;
		
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева;
	
	ПолучатьВыходныеИзделия = Параметры.ВыводитьВыходныеИзделия
		ИЛИ (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СпецификацияРодителя, "ТипПроизводственногоПроцесса") = Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("МатериалыИУслуги");
	Если ПолучатьВыходныеИзделия Тогда
		ПереченьДанных.Добавить("ВыходныеИзделия");
		ПереченьДанных.Добавить("ВозвратныеОтходы");
	КонецЕсли;
	Если Параметры.ВыводитьТрудозатраты Тогда
		ПереченьДанных.Добавить("Трудозатраты");
	КонецЕсли;
	Если Параметры.ВыводитьЭтапы Тогда
		ПереченьДанных.Добавить("Этапы");
	КонецЕсли;
	
	// Список для проверки зацикливания.
	Если Не Параметры.ДинамическоеСчитывание И ИспользованныеСпецификации = Неопределено Тогда
		ИспользованныеСпецификации = Новый Массив();
	КонецЕсли;
	
	// Ресурсная спецификация или спецификация заказа на производство
	Если Не ЭтоАдресВременногоХранилища(Параметры.АдресВХранилище) Тогда
		
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуре();
		ДанныеПоНоменклатуре.Номенклатура   = НоменклатураРодителя;
		ДанныеПоНоменклатуре.Характеристика = ХарактеристикаРодителя;
		ДанныеПоНоменклатуре.Спецификация   = СпецификацияРодителя;
		ДанныеПоНоменклатуре.Количество     = КоличествоРодителя;
		
		ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(ПереченьДанных);
		ПараметрыВыборки.ВариантЗаполненияОбеспечения          = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.НеЗаполнять;
		ПараметрыВыборки.ПолучитьПредставления                 = Истина;
		ПараметрыВыборки.УчитыватьВероятностьБрака             = Ложь;
		ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска = Новый Структура("Использовать,ВыпускПроизвольнымиПорциями",Истина,Истина);
		ПараметрыВыборки.РежимПолученияДанныхНаборов           = "НеПолучать";
		ПараметрыВыборки.Вставить("СпособРасчетаМатериалов", Перечисления.СпособыРасчетаМатериалов.МаксимальноеПотребление);
		
		СтруктураДанных = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПараметрыВыборки);
		
	Иначе
		
		СтруктураДанных = ПолучитьДанныеСпецификацииЗаказа(Параметры.АдресВХранилище, КлючСвязи);
		
	КонецЕсли;
	
	ВыводитьЗаголовкиГруппировок = Параметры.ВыводитьЗаголовкиГруппировок И (Параметры.ВыводитьВыходныеИзделия ИЛИ Параметры.ВыводитьМатериалы ИЛИ Параметры.ВыводитьТрудозатраты);
	ВыводитьЭтапы                = Параметры.ВыводитьЭтапы И СтруктураДанных.Этапы.Количество() > 0;
	
	// Подготовка данных для вывода строк
	Если Не ВыводитьЭтапы Тогда
		
		// МатериалыИУслуги
		МатериалыИУслуги = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(
			СтруктураДанных.МатериалыИУслуги,
			"Номенклатура,
			|Характеристика, ХарактеристикиИспользуются,
			|
			|ЕдиницаИзмерения,
			|Упаковка,
			|
			|ПроизводитсяВПроцессе, СпособПолученияМатериала, ИсточникПолученияПолуфабриката, СпецификацияРемонта",
			"СпособАвтовыбораНоменклатуры,
			|СпособАвтовыбораХарактеристики,
			|
			|ПрименениеМатериалаРедактирование,
			|
			|КлючСвязи",
			"Количество,КоличествоУпаковок");
		МатериалыИУслуги.Колонки.Добавить("ВложеннаяСпецификация");
		
		Если ПолучатьВыходныеИзделия Тогда
		
			// ВыходныеИзделия
			ВыходныеИзделия = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(
				СтруктураДанных.ВыходныеИзделия,
				"Номенклатура,
				|Характеристика, ХарактеристикиИспользуются,
				|
				|ЕдиницаИзмерения,
				|Упаковка,
				|
				|ОбработатьПоСпецификации, Спецификация",,
				"Количество,КоличествоУпаковок");
			ВыходныеИзделия.Колонки.Добавить("ВложеннаяСпецификация");
			
			// ВозвратныеОтходы
			ВозвратныеОтходы = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(
				СтруктураДанных.ВозвратныеОтходы,
				"Номенклатура,
				|Характеристика, ХарактеристикиИспользуются,
				|
				|ЕдиницаИзмерения,
				|Упаковка,
				|
				|ОбработатьПоСпецификации, Спецификация",,
				"Количество,КоличествоУпаковок");
			ВозвратныеОтходы.Колонки.Добавить("ВложеннаяСпецификация");
		
		КонецЕсли;
		
		// Трудозатраты
		Если Параметры.ВыводитьТрудозатраты Тогда
			Трудозатраты = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(СтруктураДанных.Трудозатраты, "ВидРабот, ЕдиницаИзмерения",, "Количество");
		КонецЕсли;
		
	Иначе
		
		// МатериалыИУслуги
		МатериалыИУслуги = СтруктураДанных.МатериалыИУслуги;
		МатериалыИУслуги.Колонки.Добавить("ВложеннаяСпецификация");
		
		Если ПолучатьВыходныеИзделия Тогда
		
			// ВыходныеИзделия
			ВыходныеИзделия = СтруктураДанных.ВыходныеИзделия;
			ВыходныеИзделия.Колонки.Добавить("ВложеннаяСпецификация");
			
			// ВозвратныеОтходы
			ВозвратныеОтходы = СтруктураДанных.ВозвратныеОтходы;
			ВозвратныеОтходы.Колонки.Добавить("ВложеннаяСпецификация");
		
		КонецЕсли;
		
		// Трудозатраты
		Если Параметры.ВыводитьТрудозатраты Тогда
			Трудозатраты = СтруктураДанных.Трудозатраты;
		КонецЕсли;
		
	КонецЕсли;
	
	ПустаяСсылкаЭтап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
	НаборСтрок = Новый Структура("ВыходныеИзделия, МатериалыИУслуги, Трудозатраты", Новый Соответствие, Новый Соответствие, Новый Соответствие);
	Если ВыводитьЭтапы Тогда
		Для каждого Строка Из СтруктураДанных.Этапы Цикл
			НаборСтрок["ВыходныеИзделия"].Вставить(Строка.Этап, Новый Массив);
			НаборСтрок["МатериалыИУслуги"].Вставить(Строка.Этап, Новый Массив);
			НаборСтрок["Трудозатраты"].Вставить(Строка.Этап, Новый Массив);
		КонецЦикла;
	КонецЕсли;
	НаборСтрок["ВыходныеИзделия"].Вставить(ПустаяСсылкаЭтап, Новый Массив);
	НаборСтрок["МатериалыИУслуги"].Вставить(ПустаяСсылкаЭтап, Новый Массив);
	НаборСтрок["Трудозатраты"].Вставить(ПустаяСсылкаЭтап, Новый Массив);
	
	Если ПолучатьВыходныеИзделия Тогда
		Для каждого Строка Из ВыходныеИзделия Цикл
			ТекущийЭтап = ?(ВыводитьЭтапы, Строка.Этап, ПустаяСсылкаЭтап);
			Если Строка.ОбработатьПоСпецификации Тогда
				Строка.ВложеннаяСпецификация = Строка.Спецификация;
			КонецЕсли;
			ЕстьВложеннаяСпецификацияВСтроке = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
			Если Параметры.ВыводитьВыходныеИзделия ИЛИ ЕстьВложеннаяСпецификацияВСтроке Тогда
				Если Строка.Номенклатура = НоменклатураРодителя
					И Строка.Характеристика = ХарактеристикаРодителя Тогда
					Продолжить;
				КонецЕсли;
				НаборСтрок["ВыходныеИзделия"][ТекущийЭтап].Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Для каждого Строка Из ВозвратныеОтходы Цикл
			ТекущийЭтап = ?(ВыводитьЭтапы, Строка.Этап, ПустаяСсылкаЭтап);
			Если Строка.ОбработатьПоСпецификации Тогда
				Строка.ВложеннаяСпецификация = Строка.Спецификация;
			КонецЕсли;
			ЕстьВложеннаяСпецификацияВСтроке = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
			Если Параметры.ВыводитьВыходныеИзделия ИЛИ ЕстьВложеннаяСпецификацияВСтроке Тогда
				НаборСтрок["ВыходныеИзделия"][ТекущийЭтап].Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если МатериалыИУслуги.Количество() > 0 Тогда
		
		Для каждого Строка Из МатериалыИУслуги Цикл
			
			Если Строка.ПроизводитсяВПроцессе Тогда
				Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
					Строка.ВложеннаяСпецификация = Строка.ИсточникПолученияПолуфабриката;
				ИначеЕсли Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
					И ЗначениеЗаполнено(Строка.СпецификацияРемонта) Тогда
					Строка.ВложеннаяСпецификация = Строка.СпецификацияРемонта;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|	ТаблицаИзделия.Номенклатура                            КАК Номенклатура,
		|	ТаблицаИзделия.Характеристика                          КАК Характеристика,
		|	&НачалоПроизводства                                    КАК НачалоПроизводства
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	&ТаблицаИзделия КАК ТаблицаИзделия
		|ГДЕ
		| НЕ (ТаблицаИзделия.ПроизводитсяВПроцессе
		|		И ТаблицаИзделия.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе))
		|";
		Запрос.УстановитьПараметр("ТаблицаИзделия", МатериалыИУслуги);
		Запрос.УстановитьПараметр("НачалоПроизводства", Параметры.Дата);
		
		СтруктураКлючаПоискаСтроки = Новый Структура;
		СтруктураКлючаПоискаСтроки.Вставить("Номенклатура", "Номенклатура");
		СтруктураКлючаПоискаСтроки.Вставить("Характеристика", "Характеристика");
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьОсновныеСпецификацииВКоллекции(
			Запрос,
			МатериалыИУслуги,
			СтруктураКлючаПоискаСтроки,
			"ВложеннаяСпецификация",
			Истина);
			
		Для каждого Строка Из МатериалыИУслуги Цикл
			ТекущийЭтап = ?(ВыводитьЭтапы, Строка.Этап, ПустаяСсылкаЭтап);
			ЕстьВложеннаяСпецификацияВСтроке = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
			Если Параметры.ВыводитьМатериалы ИЛИ ЕстьВложеннаяСпецификацияВСтроке Тогда
				НаборСтрок["МатериалыИУслуги"][ТекущийЭтап].Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Если Параметры.ВыводитьТрудозатраты Тогда
		Для каждого Строка Из Трудозатраты Цикл
			ТекущийЭтап = ?(ВыводитьЭтапы, Строка.Этап, ПустаяСсылкаЭтап);
			НаборСтрок["Трудозатраты"][ТекущийЭтап].Добавить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	// Вывод строк
	УсловиеЦикла                = Истина;
	ИндексСтрокиПервогоЭтапа    = 0;
	ИндексСтрокиПоследнегоЭтапа = 0;
	Если ВыводитьЭтапы Тогда
		НаправлениеУбыв = СтруктураДанных.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка;
		Если НаправлениеУбыв Тогда
			ИндексСтрокиПервогоЭтапа    = -СтруктураДанных.Этапы.Количество()+1;
		Иначе
			ИндексСтрокиПоследнегоЭтапа = СтруктураДанных.Этапы.Количество()-1;
		КонецЕсли;
	КонецЕсли;
	ИндексСтрокиЭтапа = ИндексСтрокиПервогоЭтапа;
	
	// Цикл по этапам, выводим, если требуется, иначе за один проход выводим все.
	Пока УсловиеЦикла Цикл
		
		Если ВыводитьЭтапы Тогда
			
			// Вывод строки Этап.
			Если ИндексСтрокиЭтапа > ИндексСтрокиПоследнегоЭтапа Тогда
				УсловиеЦикла = Ложь;
				Продолжить;
			КонецЕсли;
			
			ДанныеЭтапа = СтруктураДанных.Этапы[Макс(ИндексСтрокиЭтапа,-ИндексСтрокиЭтапа)];
			ТекущийЭтап = ДанныеЭтапа.Этап;
			
			Если СтрокаДерева = Неопределено Тогда
				СтрокаРодитель = Дерево.Строки.Добавить();
			Иначе
				СтрокаРодитель = СтрокаДерева.Строки.Добавить();
			КонецЕсли;
			
			СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
			СтрокаРодитель.Номенклатура = ДанныеЭтапа.Этап;
			СтрокаРодитель.Спецификация = ДанныеЭтапа.МаршрутнаяКарта;
			СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Этап;
			СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			
		Иначе
			
			// Подготовка коллекций комплектующих, изделий и трудозатрат по всем этапам.
			УсловиеЦикла = Ложь;
			ТекущийЭтап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
			
		КонецЕсли;
		
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаЭтап = Дерево;
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаЭтап = СтрокаРодитель;
		КонецЕсли;
		
		// Вывод строк выходных изделий.
		МассивСтрок = НаборСтрок["ВыходныеИзделия"][ТекущийЭтап];
		Если ВыводитьЭтапы И ИндексСтрокиЭтапа = ИндексСтрокиПоследнегоЭтапа Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, НаборСтрок["ВыходныеИзделия"][ПустаяСсылкаЭтап]);
		КонецЕсли;
		КоличествоВыходныхИзделий = МассивСтрок.Количество();
		Если (Параметры.ВыводитьВыходныеИзделия ИЛИ КоличествоВыходныхИзделий > 0)
			И ЕстьСпецификация Тогда
			
			// Вывод строки "Выходные изделия".
			Если КоличествоВыходныхИзделий > 0 И ВыводитьЗаголовкиГруппировок Тогда
				СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
				СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
				СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия +
					" (" + (КоличествоВыходныхИзделий) + ")";
				СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия;
				СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			КонецЕсли;
			
			// Вывод строк выходных изделий и разузлование по спецификации.
			Для каждого Строка Из МассивСтрок Цикл
				
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
				
				НоваяСтрока.Спецификация = Строка.ВложеннаяСпецификация;
				НоваяСтрока.ПроизводитсяВПроцессе = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
				
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки, НоваяСтрока.ПроизводитсяВПроцессе);
				
				Если НоваяСтрока.ПроизводитсяВПроцессе Тогда
					ПродолжитьРазузлованиеПоСтрокеДерева(Параметры, Дерево, НоваяСтрока, ИспользованныеСпецификации);
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывод строк материалов.
		МассивСтрок = НаборСтрок["МатериалыИУслуги"][ТекущийЭтап];
		Если ВыводитьЭтапы И ИндексСтрокиЭтапа = ИндексСтрокиПервогоЭтапа Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, НаборСтрок["МатериалыИУслуги"][ПустаяСсылкаЭтап]);
		КонецЕсли;
		КоличествоМатериалов = МассивСтрок.Количество();
		Если (Параметры.ВыводитьМатериалы ИЛИ КоличествоМатериалов > 0)
			И ЕстьСпецификация Тогда
			
			// Вывод строки "Материалы и услуги".
			Если КоличествоМатериалов > 0 И ВыводитьЗаголовкиГруппировок Тогда
				СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
				СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
				СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги +
					" (" + КоличествоМатериалов + ")";
				СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги;
				СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			КонецЕсли;
		
			// Вывод строк материалов и разузлование по спецификации.
			Для каждого Строка Из МассивСтрок Цикл
				
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал;
				
				НоваяСтрока.Спецификация = Строка.ВложеннаяСпецификация;
				НоваяСтрока.ПроизводитсяВПроцессе = ЗначениеЗаполнено(Строка.ВложеннаяСпецификация);
				
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки, НоваяСтрока.ПроизводитсяВПроцессе);
				
				Если НоваяСтрока.ПроизводитсяВПроцессе Тогда
					ПродолжитьРазузлованиеПоСтрокеДерева(Параметры, Дерево, НоваяСтрока, ИспользованныеСпецификации, Строка.КлючСвязи);
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	
		// Вывод строк трудозатрат.
		МассивСтрок = НаборСтрок["Трудозатраты"][ТекущийЭтап];
		Если ВыводитьЭтапы И ИндексСтрокиЭтапа = ИндексСтрокиПервогоЭтапа Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, НаборСтрок["Трудозатраты"][ПустаяСсылкаЭтап]);
		КонецЕсли;
		КоличествоТрудозатрат = МассивСтрок.Количество();
		Если Параметры.ВыводитьТрудозатраты И ЕстьСпецификация И КоличествоТрудозатрат > 0 Тогда
			
			Если КоличествоТрудозатрат > 0 И ВыводитьЗаголовкиГруппировок Тогда
				СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
				СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
				СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты;
				СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
				СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты + " (" + КоличествоТрудозатрат + ")";
			КонецЕсли;
			
			Для Каждого Строка Из МассивСтрок Цикл
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.КоличествоУпаковок = Строка.Количество;
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.Номенклатура = Строка.ВидРабот;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата;
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
		ИндексСтрокиЭтапа = ИндексСтрокиЭтапа + 1;
		
	КонецЦикла;
	
	Если СтрокаДерева <> Неопределено
		И СтрокаДерева.ЕстьСпецификация Тогда
		СтрокаДерева.СпецификацияПрочитана = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования условного оформления дерева спецификаций.
//
// Параметры
//  УсловноеОформление			- Структура - структура параметров.
//
Процедура НастроитьУсловноеОформлениеДереваСпецификаций(УсловноеОформление) Экспорт
	
	// Упаковки.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийЕдиницаИзмерения");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Упаковка");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Выделение жирным строк с наименованием этапа.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыСтрокДереваСпецификаций.Этап;
	
	// Только просмотр.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийСпецификация");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Этап);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия);
	
	// Использование характеристик.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<характеристики не используются>';
																					|en = '<characteristics are not used>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ХарактеристикиИспользуются");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Материал);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие);
	
	// Использование характеристик для номенклатуры.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<любая характеристика>';
																					|en = '<any characteristic>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ХарактеристикиИспользуются");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Номенклатура и характеристика уточняется при производстве.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<уточняется при производстве>';
																					|en = '<specified during production>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораНоменклатуры");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<уточняется при производстве>';
																					|en = '<specified during production>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораХарактеристики");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	// Номенклатура и характеристика уточняется с учетом свойств.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<указывается в свойстве основного изделия>';
																					|en = '<specified in the property of the main product>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораНоменклатуры");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<подбирается по свойствам>';
																					|en = '<selected by properties>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораХарактеристики");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<подбирается по алгоритму>';
																					|en = '<selected by algorithm>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораХарактеристики");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму;
	
КонецПроцедуры

#КонецОбласти

#Область МаршрутныеКарты

// Получает маршрутные карты действующие для указанного подразделения на дату начала производства
// Маршрутная карта является действующей, если
//  - у нее статус Действует
//  - период ее действия включает начало производства.
//
// Параметры:
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение за которым закреплено обеспечение изделием
//  НачалоПроизводства	- Дата - дата начала производства, на эту дату спецификация должна быть действующей
//  СтрокаПоиска		- Строка - строка, содержащаяся в наименовании.
//
// Возвращаемое значение:
//   СписокЗначений - свойства, которые можно использовать для автовыбора.
//
Функция ДействующиеМаршрутныеКартыПодразделения(Подразделение, НачалоПроизводства, СтрокаПоиска = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныеКарты.Ссылка КАК МаршрутнаяКарта,
	|	МаршрутныеКарты.Представление КАК МаршрутнаяКартаПредставление
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|ГДЕ
	|	МаршрутныеКарты.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхКарт.Действует)
	|	И (МаршрутныеКарты.Подразделение = &Подразделение)
	|	И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МаршрутныеКарты.НачалоДействия <= &НачалоПроизводства)
	|	И (МаршрутныеКарты.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МаршрутныеКарты.КонецДействия >= НачалоПериода(&НачалоПроизводства, День))
	|
	|
	|	//СтрокаПоиска
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутнаяКартаПредставление";
	
	Если СтрокаПоиска <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СтрокаПоиска", "И МаршрутныеКарты.Наименование ПОДОБНО &Текст");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Подразделение",      Подразделение);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	Запрос.УстановитьПараметр("Текст",              "%" + СокрЛП(СтрокаПоиска) + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.МаршрутнаяКарта, Выборка.МаршрутнаяКартаПредставление);
	КонецЦикла;

	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

#Область Автовыбор

// Получает свойства, которые можно использовать для автовыбора
//
// Параметры:
//  ВидИзделий					- СправочникСсылка.ВидыНоменклатуры - набор свойств, которые можно использовать для изделий.
//  ТолькоСвойстваХарактеристик	- Булево - Истина, если нужно получить только свойства характеристик.
//
// Возвращаемое значение:
//   Массив - свойства, которые можно использовать для автовыбора.
//
Функция ПолучитьСвойстваДляАвтовыбора(ВидИзделий, ТолькоСвойстваХарактеристик = Ложь) Экспорт

	ТекстЗапроса = ТекстЗапросаДоступныеСвойстваНоменклатуры(Ложь, НЕ ТолькоСвойстваХарактеристик);
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидИзделий);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Формирует массив описаний функций автовыбора.
// 
// Возвращаемое значение:
//  Массив - массив описаний функций автовыбора, см. СоздатьОписаниеФункцииАвтовыбора
//
// Пример:
//  см. ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатуры
//
Функция ОписаниеФункцийАвтовыбораХарактеристики() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

// Формирует массив описаний функций автовыбора.
// 
// Возвращаемое значение:
//  Массив - массив описаний функций автовыбора, см. СоздатьОписаниеФункцииАвтовыбора
//
// Пример:
//  Для того чтобы дополнить список функций автовыбора свойства необходимо создать расширение конфигурации,
//  в созданное расширение добавить модуль УправлениеДаннымиОбИзделиях и реализовать следующий код:
//  
//  &Вместо("ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатуры")
//  Функция ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатурыРасширенный() Экспорт
//
//    Результат = ПродолжитьВызов();
//  
//    Описание = СоздатьОписаниеФункцииАвтовыбора("МояФункцияАвтовыбора",,НСтр("ru = 'Моя функция автовыбора'"));
//
//    Результат.Добавить(Описание);
//
//    Возврат Результат;
//
//  КонецФункции
//
Функция ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатуры() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РасчетПоФормулам

// Возвращает дерево операторов для конструктора формул
// 
Функция ПостроитьДеревоОператоров() Экспорт
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru = 'Разделители';
																				|en = 'Separators'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "(", " + "" ("" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ")", " + "") "" + ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru = 'Операторы';
																				|en = 'Operators'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru = 'Логические операторы и константы';
																				|en = 'Logical operators and constants'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'И';
																	|en = 'AND'"),      " " + НСтр("ru = 'И';
																									|en = 'AND'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'ИЛИ';
																	|en = 'OR'"),    " " + НСтр("ru = 'ИЛИ';
																									|en = 'OR'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'НЕ';
																	|en = 'NOT'"),     " " + НСтр("ru = 'НЕ';
																									|en = 'NOT'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'ИСТИНА';
																	|en = 'TRUE'"), " " + НСтр("ru = 'ИСТИНА';
																									|en = 'TRUE'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'ЛОЖЬ';
																	|en = 'FALSE'"),   " " + НСтр("ru = 'ЛОЖЬ';
																									|en = 'FALSE'") + " ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru = 'Числовые функции';
																				|en = 'Numerical functions'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Максимум';
																	|en = 'Maximum'"),          НСтр("ru = 'Макс(,)';
																										|en = 'Max(,)'"), 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Минимум';
																	|en = 'Minimum'"),           НСтр("ru = 'Мин(,)';
																										|en = 'Min(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Округление';
																	|en = 'Rounding'"),        НСтр("ru = 'Окр(,)';
																										|en = 'Round (,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Целая часть';
																	|en = 'Integer part'"),       НСтр("ru = 'Цел()';
																										|en = 'Int()'"),   1);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Степень';
																	|en = 'Degree'"),           НСтр("ru = 'Pow(,)';
																										|en = 'Pow(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Квадратный корень';
																	|en = 'Square root'"), НСтр("ru = 'Sqrt()';
																										|en = 'Sqrt()'"),  1);
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru = 'Тригонометрические функции';
																				|en = 'Trigonometric functions'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Sin';
																	|en = 'Sin'"),  НСтр("ru = 'Sin()';
																							|en = 'Sin()'"), 1);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Cos';
																	|en = 'Cos'"),  НСтр("ru = 'Cos()';
																							|en = 'Cos()'"), 1);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Tan';
																	|en = 'Tan'"),  НСтр("ru = 'Tan()';
																							|en = 'Tan()'"), 1);
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru = 'Прочие функции';
																				|en = 'Other functions'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Условие';
																	|en = 'Condition'"), "?(,,)", 3);
	
	ОписаниеФункций = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеФункцийКонструктораФормул();
	
	Для каждого Описание Из ОписаниеФункций Цикл
		
		РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, Описание.Наименование, Описание.Представление);
		
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции

// Возвращает таблицу параметров для расчета по формулам
//
// Параметры:
//  Описание	 - Структура - см. ОписаниеИсточниковДанныхОперандов()
//  НаборДанных	 - Массив	 - набор алгоритмов расчета по формулам.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - параметры для расчета по формулам.
//
Функция ПараметрыДляРасчетаПоФормулам(Описание, НаборДанных) Экспорт
	
	Если Не ЗначениеЗаполнено(НаборДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = Новый ТаблицаЗначений;
	Параметры.Колонки.Добавить("ИмяПараметра");
	Параметры.Колонки.Добавить("Ключ");
	Параметры.Колонки.Добавить("НомерСтроки");
	Параметры.Колонки.Добавить("ИмяСвойства");
	Параметры.Колонки.Добавить("ДанныеСтроки");
	Параметры.Колонки.Добавить("Найден");
	
	Для каждого МассивСтрок Из НаборДанных Цикл
		Для каждого ДанныеСтроки Из МассивСтрок Цикл
			Если ПустаяСтрока(ДанныеСтроки.АлгоритмРасчетаКоличества) Тогда
				ДанныеСтроки.Формула = "";
			Иначе
				ДанныеСтроки.Формула = УправлениеДаннымиОбИзделиях.ТрансляторФормул(ДанныеСтроки, Параметры, Описание);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.Индексы.Добавить("Ключ");
	Параметры.Индексы.Добавить("ИмяПараметра");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает значения параметров для расчета по формулам
//
// Параметры:
//  Менеджер			 - СправочникиМенеджер	 - менеджер справочника
//  ПараметрыДляРасчета	 - ТаблицаЗначений		 - см. ПараметрыДляРасчетаПоФормулам()
//  ОписаниеИсточников	 - Структура			 - см. ОписаниеИсточниковДанныхОперандов()
//  ИсточникиДанных		 - Структура			 - используется при получении данных источника в менеджере.
// 
// Возвращаемое значение:
//  Структура - данные для расчета по формулам.
//
Функция ДанныеДляРасчетаПоФормулам(Менеджер, ПараметрыДляРасчета, ОписаниеИсточников, ИсточникиДанных) Экспорт

	ДанныеДляРасчета = Новый Структура("Параметры,АвтоРасчет", Новый Структура, Новый Соответствие);
	
	ТекстыЗапроса = Новый Массив;
	Запрос = Новый Запрос;
	ПараметрыЗапроса = Запрос.Параметры;
	
	Для каждого ПутьКДанным Из ПараметрыДляРасчета Цикл
		
		Описание = Неопределено;
		Если ПустаяСтрока(ПутьКДанным.Ключ)
			ИЛИ Не ОписаниеИсточников.Свойство(ПутьКДанным.Ключ, Описание) Тогда
			Продолжить;
		КонецЕсли;
		
		Источник = Менеджер.ИсточникДанныхДляРасчетаПоФормулам(ПутьКДанным, ИсточникиДанных);
		Если Не ЗначениеЗаполнено(Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПутьКДаннымСодержитРеквизитИсточника(ПутьКДанным, Описание) Тогда
			
			ДобавитьПараметрВДанныеДляРасчета(
				ДанныеДляРасчета,
				ПутьКДанным.ИмяПараметра,
				Источник[ПутьКДанным.ИмяСвойства],
				ПараметрыДляРасчета);
			ДобавитьСоответствиеДляАвтоРасчета(ДанныеДляРасчета, ПутьКДанным, Источник);
			Продолжить;
			
		КонецЕсли;
		
		Если Описание.СодержитСвойстваНоменклатуры Тогда
			
			ДобавитьЗапросВыборкиСвойствНоменклатуры(
				ТекстыЗапроса,
				ПараметрыЗапроса,
				ПутьКДанным.ИмяПараметра,
				ПутьКДанным.ИмяСвойства,
				Источник.Номенклатура,
				Источник.Характеристика);
			
		Иначе
			
			ДобавитьЗапросВыборкиСвойствИсточника(
				ТекстыЗапроса,
				ПараметрыЗапроса,
				Источник,
				ПутьКДанным.ИмяПараметра,
				ПутьКДанным.ИмяСвойства);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|");
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьПараметрВДанныеДляРасчета(
				ДанныеДляРасчета,
				Выборка.ИмяПараметра,
				Выборка.ЗначениеПараметра,
				ПараметрыДляРасчета);
		КонецЦикла;
		ПараметрыЗапроса.Очистить();
		ТекстыЗапроса.Очистить();
		
	КонецЕсли;
	
	Для каждого Строка Из ПараметрыДляРасчета.НайтиСтроки(Новый Структура("Найден")) Цикл
		ДобавитьПараметрВДанныеДляРасчета(ДанныеДляРасчета,Строка.ИмяПараметра);
	КонецЦикла;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Рассчитывает количество в строке по формулам
//
// Параметры:
//  Строка			 - СтрокаТаблицыЗначений - текущая строка
//  ДанныеДляРасчета - Структура			 - см. ДанныеДляРасчетаПоФормулам
//  ИмяПоля			 - Строка				 - имя поля в строке.
// 
// Возвращаемое значение:
//  Булево - количество рассчитано.
//
Функция РассчитатьКоличествоПоФормуле(Строка, ДанныеДляРасчета, ИмяПоля = "Количество") Экспорт
	
	Параметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляРасчета, "Параметры");
	
	Попытка
		
		Строка[ИмяПоля] = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(Строка.Формула, Параметры);
		
	Исключение
		
		Строка[ИмяПоля] = 0;
		Возврат Ложь;
		
	КонецПопытки;
	
	Если ДанныеДляРасчета <> Неопределено Тогда
		ОбновитьДанныеАвтоРасчета(Строка, ДанныеДляРасчета, ИмяПоля);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет алгоритм расчета количества, путем сравнения с набором доступных операндов.
//
// Параметры:
// Параметры:
//  Объект - СправочникОбъект.РесурсныеСпецификации, СправочникОбъект.МаршрутныеКарты - проверяемый объект
//  ОписаниеИсточников	 - Структура			 - см. ОписаниеИсточниковДанныхОперандов()
//  ПараметрыПроверки	 - Структура - структура проверки объекта
//   * Состав             - Массив    - список проверяемых табличных частей (список структур, содержащих ключи <Имя>, <Представление>)
//   * ВыводитьСообщения  - Булево    - Истина, если нужно выводить сообщения об ошибках
//   * ОчищатьНеНайденные - Булево    - Истина, если нужно очищать формулы содержащие недоступные операнды
//  Отказ				 - Булево - выходной параметр, при ошибки устанавливается в значение Истина.
// 
// Возвращаемое значение:
//  Соответствие - список ошибок (номера строк табличных частей содержащих ошибки).
//
Функция ПроверитьОчиститьАлгоритмРасчетаКоличества(Объект, ОписаниеИсточников, ПараметрыПроверки, Отказ = Ложь) Экспорт
	
	Результат = Новый Соответствие;
	Шаблон = НСтр("ru = 'Алгоритм расчета количества содержит недоступные операнды (список ""%1"", строка %2).';
					|en = 'Quantity calculation algorithm contains unavailable operands (see line %2 of the ""%1"" list).'");
	
	Для каждого СтруктураПроверки Из ПараметрыПроверки.Состав Цикл
		
		Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(Объект[СтруктураПроверки.ИмяТЧ],, "НомерСтроки,АлгоритмРасчетаКоличества", Новый Структура("Формула", ""));
		НаборДанных = Новый Массив;
		НаборДанных.Добавить(Таблица);
		Результат.Вставить(СтруктураПроверки.ИмяТЧ, Новый Массив());
		
		ПараметрыДляРасчета = ПараметрыДляРасчетаПоФормулам(ОписаниеИсточников, НаборДанных);
		
		Для каждого Параметр Из ПараметрыДляРасчета Цикл
			
			Параметр.Найден = Ложь;
			НомерСтроки = Параметр.ДанныеСтроки.НомерСтроки;
			
			Если Результат[СтруктураПроверки.ИмяТЧ].Найти(НомерСтроки) <> Неопределено Тогда
				Продолжить; // в этой строке ошибка уже была найдена
			КонецЕсли;
			
			ОписаниеИсточника = Неопределено;
			Если ЗначениеЗаполнено(Параметр.Ключ) И ОписаниеИсточников.Свойство(Параметр.Ключ, ОписаниеИсточника) Тогда
				
				ТаблицаОперандов = Неопределено;
				НомерСтрокиПараметра = Параметр.НомерСтроки;
				КлючПараметра = Параметр.Ключ;
				
				Если НЕ ПустаяСтрока(ОписаниеИсточника.ИмяТЧ) 
					И ОписаниеИсточников.Свойство(ОписаниеИсточника.ИмяТЧ, ОписаниеИсточника) 
					И ОписаниеИсточника.Свойство("Операнды") Тогда
						ТаблицаОперандов = ОписаниеИсточника.Операнды.Скопировать(Новый Структура("НомерСтроки", НомерСтроки));
						НомерСтрокиПараметра = НомерСтроки;
						КлючПараметра = ОписаниеИсточника.Идентификатор;
				Иначе
					ОписаниеИсточника.Свойство("Операнды", ТаблицаОперандов);
				КонецЕсли;
				
				Если НомерСтрокиПараметра = Неопределено Тогда
					Идентификатор = КлючПараметра+"."+Параметр.ИмяСвойства;
				Иначе
					Идентификатор = КлючПараметра+"["+НомерСтрокиПараметра+"]."+Параметр.ИмяСвойства;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТаблицаОперандов) Тогда
					Найден = ТаблицаОперандов.Найти(Идентификатор, "Идентификатор");
					Если Найден <> Неопределено Тогда
						Если СтруктураПроверки.ИмяТЧ = Параметр.Ключ Тогда
							Если НомерСтроки > Параметр.НомерСтроки Тогда
								Параметр.Найден = Истина;
							КонецЕсли;
						Иначе
							Параметр.Найден = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ Параметр.Найден Тогда
				
				Если ПараметрыПроверки.ВыводитьСообщения Тогда
					
					ТекстСообщения = СтрШаблон(Шаблон, СтруктураПроверки.Представление, Формат(НомерСтроки, "ЧГ="));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(СтруктураПроверки.ИмяТЧ, НомерСтроки, СтруктураПроверки.Реквизит);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						,
						Отказ);
					
				КонецЕсли;
				
				Если ПараметрыПроверки.ОчищатьНеНайденные Тогда
					Объект[СтруктураПроверки.ИмяТЧ][НомерСтроки-1].АлгоритмРасчетаКоличества = "";
				КонецЕсли;
				
				Результат[СтруктураПроверки.ИмяТЧ].Добавить(НомерСтроки);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает свойства номенклатуры, которые можно использовать в конструкторе формул
//
// Параметры:
//  ВидыНоменклатуры	 - Массив - виды номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - набор свойств, которые можно использовать в конструкторе формул.
//
Функция ПолучитьСвойстваНоменклатурыДляРасчетаПоФормулам(ВидыНоменклатуры) Экспорт
	
	ТекстЗапроса = ТекстЗапросаДоступныеСвойстваНоменклатуры();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("Вид");
	
	Возврат Результат;
	
КонецФункции

// Получает свойства, которые можно использовать в конструкторе формул
//
// Параметры:
//  СписокНаборов	 - Массив - наборы доп. реквизитов и сведений.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - набор свойств, которые можно использовать в конструкторе формул.
//
Функция ПолучитьСвойстваИсточниковДляРасчетаПоФормулам(СписокНаборов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НаборСвойствДополнительныеРеквизиты.Ссылка               КАК Ссылка,
	|	НаборСвойствДополнительныеРеквизиты.Свойство             КАК Свойство,
	|	НаборСвойствДополнительныеРеквизиты.Свойство.Заголовок   КАК Представление,
	|	НаборСвойствДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборСвойствДополнительныеРеквизиты
	|ГДЕ
	|	НаборСвойствДополнительныеРеквизиты.Ссылка В (&СписокНаборов)
	|	И НЕ НаборСвойствДополнительныеРеквизиты.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("СписокНаборов", СписокНаборов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("Ссылка");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает описание функций используемых в конструкторе формул
// 
// Возвращаемое значение:
//  Структура - описание функций
//
Функция ФункцииИзОбщегоМодуля() Экспорт
	
	ОписаниеФункций = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеФункцийКонструктораФормул();
	
	Структура = Новый Структура;
	
	Для каждого Описание Из ОписаниеФункций Цикл
	
		Структура.Вставить(Описание.Идентификатор, СтрШаблон("%1.%2", Описание.ИмяМодуля, Описание.ИмяФункции));
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Устанавливает условное оформление формы спецификации и маршрутной карты,
//  связанные с автовыбором номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма спецификации или маршрутной карты.
//
Процедура УстановитьУсловноеОформлениеАвтовыбораНоменклатуры(Форма, ИмяОбъекта, ИмяТЧ) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Номенклатура - ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ИмяОбъектаИмяТЧ = ИмяОбъекта+"."+ИмяТЧ;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"Номенклатура"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// НоменклатураСтрокой - Отображать
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ГруппаОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"НоменклатураСтрокой"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// НоменклатураСтрокой - ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"НоменклатураСтрокой"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Характеристика - Текст
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"Характеристика"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>';
																|en = '<characteristics are not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// Характеристика - ТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"Характеристика"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Характеристика - ОтметкаНеЗаполненного
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ГруппаОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"Характеристика"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	
	// ХарактеристикаСтрокой - Отображать
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ГруппаОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"ХарактеристикаСтрокой"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// ХарактеристикаСтрокой - ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	Элемент.Использование = Истина;
	
	ГруппаОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъектаИмяТЧ+".СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"ХарактеристикаСтрокой"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
КонецПроцедуры

// Устанавливает условное оформление формы спецификации и маршрутной карты,
//  связанные настройкой использования и расчетом количества.
//
// Параметры:
//  Форма				 - Форма 	 - форма спецификации или маршрутной карты
//  ИмяТЧ				 - Строка	 - имя табличной части, для которой выполняется настройка
//  ИмяКолонки			 - Строка	 - имя колонки <Количество>.
//
Процедура УстановитьУсловноеОформлениеОтбораПоСвойствамИРасчетаПоФормулам(Форма, ИмяОбъекта, ИмяТЧ, ИмяКолонки) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	
	Если ПустаяСтрока(ИмяОбъекта) Тогда
		ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".РасчетПоФормуле");
	Иначе
		ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".РасчетПоФормуле");
	КонецЕсли;
	
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ОтборОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование  = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьПараметризациюРесурсныхСпецификаций");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + ИмяКолонки].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<по формуле>';
																|en = '<using formula>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Заполняет реквизиты табличной части, связанные с настройками автовыбора и расчета количества.
//
// Параметры:
//  ТабличнаяЧасть		 - ТабличнаяЧасть	 - табличная часть, для которой нужно заполнить служебные реквизиты
//  ЕстьАвтовыбор		 - Булево			 - признак, используется автовыбор
//  ЕстьРасчетПоФормуле	 - Булево			 - признак, используется расчет количества по формуле.
//
Процедура ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(ТабличнаяЧасть, ЕстьАвтовыбор, ЕстьРасчетПоФормуле, ОтборПоСвойствам) Экспорт
	
	Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
		
		Если ЕстьАвтовыбор Тогда
			
			Если ТекущаяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции Тогда
				
				ЗаголовокСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.СвойствоСодержащееНоменклатуру, "Заголовок");
				
				ТекущаяСтрока.НоменклатураСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = '<указывается в свойстве ""%1"">';
															|en = '<specified in the ""%1"" property>'"),
														ЗаголовокСвойства);
				
			ИначеЕсли ТекущаяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве Тогда
				
				ТекущаяСтрока.НоменклатураСтрокой = НСтр("ru = '<уточняется при производстве>';
														|en = '<specified during production>'");
			Иначе
				
				ТекущаяСтрока.НоменклатураСтрокой = "";
			КонецЕсли; 
			
			Если ТекущаяСтрока.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции Тогда
				
				ТекущаяСтрока.ХарактеристикаСтрокой = НСтр("ru = '<определяется по свойствам основного изделия>';
															|en = '<determined by main product properties>'");
			ИначеЕсли ТекущаяСтрока.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму Тогда
				ТекущаяСтрока.ХарактеристикаСтрокой = НСтр("ru = '<определяется по алгоритму>';
															|en = '<defined by algorithm>'");
			ИначеЕсли ТекущаяСтрока.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве Тогда
				
				ТекущаяСтрока.ХарактеристикаСтрокой = НСтр("ru = '<уточняется при производстве>';
															|en = '<specified during production>'");
			Иначе
				
				ТекущаяСтрока.ХарактеристикаСтрокой = "";
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЕстьРасчетПоФормуле Тогда
			
			Если ПустаяСтрока(ТекущаяСтрока.АлгоритмРасчетаКоличества) Тогда
				ТекущаяСтрока.РасчетПоФормуле = Ложь;
			Иначе
				ТекущаяСтрока.РасчетПоФормуле = Истина;
			КонецЕсли;
			ТекущаяСтрока.УстановленОтборПоСвойствам = ОтборПоСвойствам.НайтиСтроки(Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи)).Количество() > 0;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Спецификации

#Область СпецификацииНоменклатуры

Функция СпецификацииИзделия(Номенклатура, Характеристика, НачалоПроизводства = '00010101', Подразделение = Неопределено, ПараметрыВыбораСпецификаций = Неопределено) Экспорт
	
	СписокСпецификаций = Новый Массив;
	
	ТекстЗапроса = ТекстЗапросаВыбораСпецификацийПоНоменклатуре();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	|	СписокСпецификаций.Ссылка КАК Спецификация,
	|	СписокСпецификаций.Представление КАК СпецификацияПредставление,
	|	СписокСпецификаций.Основная КАК ОсновнаяСпецификация,
	|	СписокСпецификаций.ПриоритетОсновная КАК ПриоритетОсновная,
	|
	|	СписокСпецификаций.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	СписокСпецификаций.Ссылка.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	СписокСпецификаций.Ссылка.ОптимальноеКоличествоПередачиМеждуЭтапами КАК ОптимальноеКоличествоПередачиМеждуЭтапами
	|
	|	ИЗ (" + ТекстЗапроса + ") КАК СписокСпецификаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОсновная, Представление");

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	Запрос.УстановитьПараметр("Подразделение", ?(Подразделение <> Неопределено, Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка()));
	
	ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, ПараметрыВыбораСпецификаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСпецификации = Новый Структура("Спецификация,ОсновнаяСпецификация,МногоэтапныйПроизводственныйПроцесс,ОптимальноеКоличествоПередачиМеждуЭтапами");
			ЗаполнитьЗначенияСвойств(ДанныеСпецификации, Выборка);
			СписокСпецификаций.Добавить(ДанныеСпецификации);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокСпецификаций;
	
КонецФункции

Функция СпецификацииИзделий(ДанныеОбИзделиях, ПараметрыВыбораСпецификаций)
	
	СписокНоменклатуры = Новый ТаблицаЗначений;
	СписокНоменклатуры.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокНоменклатуры.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокНоменклатуры.Колонки.Добавить("НачалоПроизводства", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	СписокНоменклатуры.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	СписокНоменклатуры.Колонки.Добавить("ИндексДанных",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	
	Для ИндексДанных = 0 По ДанныеОбИзделиях.ВГраница() Цикл
		СтруктураДанных = ДанныеОбИзделиях[ИндексДанных];
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		НоваяСтрока.ИндексДанных = ИндексДанных;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаВыбораСпецификацийПоСпискуНоменклатуры();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СписокНоменклатуры.ИндексДанных       КАК Индекс,
	|	СписокНоменклатуры.Номенклатура       КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика     КАК Характеристика,
	|	СписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства,
	|	СписокНоменклатуры.Подразделение      КАК Подразделение
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	|	СписокСпецификаций.Индекс КАК ИндексДанных,
	|	
	|	СписокСпецификаций.Ссылка КАК Спецификация,
	|	СписокСпецификаций.Представление КАК СпецификацияПредставление,
	|	СписокСпецификаций.Основная КАК ОсновнаяСпецификация,
	|	СписокСпецификаций.ПриоритетОсновная КАК ПриоритетОсновная,
	|
	|	СписокСпецификаций.Ссылка.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	СписокСпецификаций.Ссылка.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	СписокСпецификаций.Ссылка.ОптимальноеКоличествоПередачиМеждуЭтапами КАК ОптимальноеКоличествоПередачиМеждуЭтапами
	|
	|	ИЗ (" + ТекстЗапроса + ") КАК СписокСпецификаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОсновная, Представление");
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, ПараметрыВыбораСпецификаций, Истина);
	
	СписокСпецификаций = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Массив;
	
	Для ИндексДанных = 0 По ДанныеОбИзделиях.ВГраница() Цикл
		
		СтруктураДанных = ДанныеОбИзделиях[ИндексДанных];
		
		ДанныеСпецификации = Неопределено;
		СтрокаТекущаяСпецификация = Неопределено;

		СтруктураПоиска = Новый Структура("ИндексДанных", ИндексДанных);
		СписокСпецификацийИзделия = СписокСпецификаций.НайтиСтроки(СтруктураПоиска);
		
		Если СписокСпецификацийИзделия.Количество() <> 0 Тогда
			
			СпецификацияПоУмолчанию = СписокСпецификацийИзделия[0];
			
			// Если выбрана текущая спецификация, то вернем ее, в случае если она есть в списке доступных.
			Если СтруктураДанных.Свойство("ТекущаяСпецификация") 
				И ЗначениеЗаполнено(СтруктураДанных.ТекущаяСпецификация) Тогда
				Для каждого СтрокаСпецификация Из СписокСпецификацийИзделия Цикл
					Если СтрокаСпецификация.Спецификация = СтруктураДанных.ТекущаяСпецификация Тогда
						СтрокаТекущаяСпецификация = СтрокаСпецификация;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаТекущаяСпецификация <> Неопределено Тогда
				
				ДанныеСпецификации = Новый Структура("Спецификация,ОсновнаяСпецификация,МногоэтапныйПроизводственныйПроцесс,ОптимальноеКоличествоПередачиМеждуЭтапами");
				ЗаполнитьЗначенияСвойств(ДанныеСпецификации, СтрокаТекущаяСпецификация);
				
				ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", (СпецификацияПоУмолчанию.ОсновнаяСпецификация И СпецификацияПоУмолчанию.Спецификация = СтруктураДанных.ТекущаяСпецификация));
				
			ИначеЕсли СпецификацияПоУмолчанию.ОсновнаяСпецификация ИЛИ СписокСпецификацийИзделия.Количество() = 1 Тогда
				
				ДанныеСпецификации = Новый Структура("Спецификация,ОсновнаяСпецификация,МногоэтапныйПроизводственныйПроцесс,ОптимальноеКоличествоПередачиМеждуЭтапами");
				ЗаполнитьЗначенияСвойств(ДанныеСпецификации, СпецификацияПоУмолчанию);
				
				ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", СпецификацияПоУмолчанию.ОсновнаяСпецификация);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Добавить(ДанныеСпецификации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокСпецификацийПоНоменклатуре(Номенклатура, Характеристика, НачалоПроизводства, Подразделение, Параметры) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВыбораСпецификацийПоНоменклатуре();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ?(Параметры.Свойство("СтрокаПоиска"), " ПЕРВЫЕ 51 ", "") + "
	|
	|" + Сред(ТекстЗапроса, СтрНайти(ТекстЗапроса, "ВЫБРАТЬ") + 7) + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОсновная, Представление");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, Параметры);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

Функция СписокСпецификацийПоСпискуНоменклатуры(СписокНоменклатуры, Параметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	0                                                          КАК Индекс,
	|	СписокНоменклатуры.Номенклатура                            КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика                          КАК Характеристика,
	|	НАЧАЛОПЕРИОДА(СписокНоменклатуры.НачалоПроизводства, ДЕНЬ) КАК НачалоПроизводства,
	|	СписокНоменклатуры.Подразделение                           КАК Подразделение
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|
	|	Спецификации.Ссылка         КАК Ссылка,
	|	Спецификации.Номенклатура   КАК Номенклатура,
	|	Спецификации.Характеристика КАК Характеристика
	|
	|ПОМЕСТИТЬ ВтСпецификацииНоменклатуры
	|
	|ИЗ (" + ТекстЗапросаВыбораСпецификацийПоСпискуНоменклатуры() + ") КАК Спецификации
	|
	|;" + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спецификации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтСпецификации
	|ИЗ
	|	ВтСпецификацииНоменклатуры КАК Спецификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииНоменклатуры.Номенклатура   КАК Номенклатура,
	|	СпецификацииНоменклатуры.Характеристика КАК Характеристика,
	|	Спецификации.Ссылка                     КАК Ссылка
	|ПОМЕСТИТЬ ВтКомбинации
	|ИЗ
	|	ВтСпецификацииНоменклатуры КАК СпецификацииНоменклатуры,
	|	ВтСпецификации             КАК Спецификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комбинации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтИсключения
	|ИЗ
	|	ВтКомбинации КАК Комбинации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|		ПО Комбинации.Номенклатура = СпецификацииНоменклатуры.Номенклатура
	|			И Комбинации.Характеристика = СпецификацииНоменклатуры.Характеристика
	|			И Комбинации.Ссылка = СпецификацииНоменклатуры.Ссылка
	|ГДЕ
	|	СпецификацииНоменклатуры.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спецификации.Ссылка КАК Ссылка
	|ИЗ
	|	ВтСпецификации КАК Спецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИсключения КАК Исключения
	|		ПО Спецификации.Ссылка = Исключения.Ссылка
	|ГДЕ
	|	Исключения.Ссылка ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, Параметры, Истина);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВыбораСпецификацийПоНоменклатуре()
	
	// Изготовление, сборка
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
	|					ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Основная,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация ЕСТЬ NULL
	|				ТОГДА 1
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 2
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатура.Спецификация ЕСТЬ NULL
	|				ТОГДА 3
	|			ИНАЧЕ 100
	|		КОНЕЦ) КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение
	|		ПО (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Номенклатура = &Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Характеристика = &Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Подразделение = &Подразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристика
	|		ПО (ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Номенклатура = &Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Характеристика = &Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураПодразделение
	|		ПО ((ОсновныеСпецификацииНоменклатураПодразделение.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И ОсновныеСпецификацииНоменклатураПодразделение.Номенклатура = &Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Подразделение = &Подразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатура
	|		ПО (ОсновныеСпецификацииНоменклатура.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатура.Номенклатура = &Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатура.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	
	|	И ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|			ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипСборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Изготовление, сборка (по фикс. стоимости)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	ЛОЖЬ КАК Основная,
	|	100 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	
	|	И ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|			ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипСборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	//%СпецификацииПоФиксированнойСтоимости
	|	
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Ремонт
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
	|	
	|	И ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|			ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРемонт
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Ремонт (по фикс. стоимости)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
	|	
	|	И ТабличнаяЧасть.Номенклатура = &Номенклатура
	|	И (ТабличнаяЧасть.Характеристика = &Характеристика
	|			ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРемонт
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	//%СпецификацииПоФиксированнойСтоимости
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Разборка
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Представление КАК Представление,
	|	ЛОЖЬ КАК Основная,
	|	2000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	
	|	И ТабличнаяЧасть.НоменклатураВходящегоИзделия = &Номенклатура
	|	И (ТабличнаяЧасть.ХарактеристикаВходящегоИзделия = &Характеристика
	|			ИЛИ ТабличнаяЧасть.ХарактеристикаВходящегоИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРазборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%ОтборПоискПоСтроке
	|
	|	И НЕ ТабличнаяЧасть.ПометкаУдаления
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыбораСпецификацийПоСпискуНоменклатуры()
	
	ТекстЗапроса =
	// Изготовление, сборка
	"ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс           КАК Индекс,
	|	СписокНоменклатуры.Номенклатура     КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика   КАК Характеристика,
	|	ТабличнаяЧасть.Ссылка               КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление КАК Представление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация,
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация,
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация,
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
	|					ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Основная,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация ЕСТЬ NULL
	|				ТОГДА 1
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 2
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатура.Спецификация ЕСТЬ NULL
	|				ТОГДА 3
	|			ИНАЧЕ 100
	|		КОНЕЦ) КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		 ПО ТабличнаяЧасть.Номенклатура = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение
	|		 ПО (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Характеристика = СписокНоменклатуры.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Подразделение = СписокНоменклатуры.Подразделение)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристика
	|		 ПО (ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Характеристика = СписокНоменклатуры.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураПодразделение
	|		 ПО ((ОсновныеСпецификацииНоменклатураПодразделение.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И ОсновныеСпецификацииНоменклатураПодразделение.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Подразделение = СписокНоменклатуры.Подразделение)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатура
	|		 ПО (ОсновныеСпецификацииНоменклатура.Спецификация = ТабличнаяЧасть.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатура.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатура.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипСборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНоменклатуры.Индекс, СписокНоменклатуры.Номенклатура, СписокНоменклатуры.Характеристика, ТабличнаяЧасть.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Изготовление, сборка (по фикс. стоимости)
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипСборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%СпецификацииПоФиксированнойСтоимости
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Ремонт
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРемонт
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Ремонт (по фикс. стоимости)
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление,
	|	ЛОЖЬ КАК Основная,
	|	1000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРемонт
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	//%СпецификацииПоФиксированнойСтоимости
	|
	|	И НЕ ТабличнаяЧасть.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Разборка
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Индекс,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Ссылка.Представление,
	|	ЛОЖЬ КАК Основная,
	|	2000 КАК ПриоритетОсновная
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
	|		ПО ТабличнаяЧасть.НоменклатураВходящегоИзделия = СписокНоменклатуры.Номенклатура
	|			И (ТабличнаяЧасть.ХарактеристикаВходящегоИзделия = СписокНоменклатуры.Характеристика
	|				ИЛИ ТабличнаяЧасть.ХарактеристикаВходящегоИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (ТабличнаяЧасть.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТабличнаяЧасть.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|ГДЕ
	|	ТабличнаяЧасть.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	
	|	//%ОтборСтатус
	|	//%ОтборТипРазборка
	|
	|	//%ИсключитьСпецификацию
	|	//%ИсключитьПроизводствоНаСтороне
	|
	|	И НЕ ТабличнаяЧасть.ПометкаУдаления
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВыполнитьПодстановкуПараметровВЗапросСпецификаций(Запрос, ПараметрыВыбора, ДляСпискаНоменклатуры = Ложь)
	
	ТекстЗапроса = Запрос.Текст;
	
	Если ПараметрыВыбора.Свойство("ДоступныеТипы") Тогда
		
		Если ПараметрыВыбора.ДоступныеТипы.Найти(Перечисления.ТипыПроизводственныхПроцессов.Сборка) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипСборка", "И ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипСборка", "И ЛОЖЬ");
		КонецЕсли;
		
		Если ПараметрыВыбора.ДоступныеТипы.Найти(Перечисления.ТипыПроизводственныхПроцессов.Ремонт) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипРемонт", "И ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипРемонт", "И ЛОЖЬ");
		КонецЕсли;
		
		Если ПараметрыВыбора.ДоступныеТипы.Найти(Перечисления.ТипыПроизводственныхПроцессов.Разборка) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипРазборка", "И ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборТипРазборка", "И ЛОЖЬ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ДоступныеСтатусы") Тогда
		
		Если ДляСпискаНоменклатуры Тогда
			Подстановка = "
			|И (ТабличнаяЧасть.Ссылка.Статус В (&ДоступныеСтатусы)
			
			|		ИЛИ &ВсеСпецификации)";
		Иначе
			Подстановка = "
			|И ((ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
			|		И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1) 
			|				ИЛИ ТабличнаяЧасть.Ссылка.НачалоДействия <= &НачалоПроизводства)
			|		И (ТабличнаяЧасть.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ ТабличнаяЧасть.Ссылка.КонецДействия >= НачалоПериода(&НачалоПроизводства, День))
			|		) ИЛИ ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует))
			|И (ТабличнаяЧасть.Ссылка.Статус В (&ДоступныеСтатусы)
			|		ИЛИ &ВсеСпецификации)";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборСтатус", Подстановка);
		
		Запрос.УстановитьПараметр("ДоступныеСтатусы", ПараметрыВыбора.ДоступныеСтатусы);
		Запрос.УстановитьПараметр("ВсеСпецификации", ПараметрыВыбора.ДоступныеСтатусы.ВГраница() = -1);
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ИсключитьСпецификацию") Тогда
		
		Подстановка = " И (ТабличнаяЧасть.Ссылка <> &ИсключитьСпецификацию)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ИсключитьСпецификацию", Подстановка);
		
		Запрос.УстановитьПараметр("ИсключитьСпецификацию", ПараметрыВыбора.ИсключитьСпецификацию);
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ИсключитьПроизводствоНаСтороне") И ПараметрыВыбора.ИсключитьПроизводствоНаСтороне Тогда
		
		Подстановка = "
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.ЭтапыПроизводства КАК Т
		|		ГДЕ
		|			Т.Владелец = ТабличнаяЧасть.Ссылка
		|			И Т.ПроизводствоНаСтороне
		|			И НЕ Т.ПометкаУдаления
		|		)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ИсключитьПроизводствоНаСтороне", Подстановка);
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("СтрокаПоиска") Тогда
		
		Подстановка = " И (ТабличнаяЧасть.Ссылка.Наименование ПОДОБНО &СтрокаПоиска)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ОтборПоискПоСтроке", Подстановка);
		
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СокрЛП(ПараметрыВыбора.СтрокаПоиска) + "%");
		
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("СпецификацииПоФиксированнойСтоимости") Тогда
		Если ПараметрыВыбора.СпецификацииПоФиксированнойСтоимости = "Показывать" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%СпецификацииПоФиксированнойСтоимости", "И ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%СпецификацииПоФиксированнойСтоимости", "И ЛОЖЬ");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы)

	ТаблицаЭтапы.Колонки.Добавить("УровеньЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0, ДопустимыйЗнак.Неотрицательный)));
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиЭтапы", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
	КоличествоУровней = 1;
	ЗаполнитьУровеньЭтапов(ТаблицаЭтапы, НайденныеСтроки, 1, КоличествоУровней);
	
	ПредыдущийНомер = 0;
	СмещениеНомера = 0;
	ТекущийУровень = КоличествоУровней;
	
	ТаблицаЭтапы.Сортировать("УровеньЭтапа Убыв");
	
	КлючиСвязейЭтапов = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если ТекущийУровень <> Строка.УровеньЭтапа Тогда
			СмещениеНомера = СмещениеНомера + ПредыдущийНомер;
			ТекущийУровень = Строка.УровеньЭтапа;
		КонецЕсли;
		
		Строка.НомерЭтапа = Строка.НомерЭтапа + СмещениеНомера;
		
		КлючиСвязейЭтапов.Вставить(Строка.КлючСвязи, Строка.НомерЭтапа);
		
		Если ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = Строка.НомерСледующегоЭтапа + СмещениеНомера;
		КонецЕсли;
		
		ПредыдущийНомер = Строка.НомерЭтапа;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = КлючиСвязейЭтапов.Получить(Строка.КлючСвязиЭтапы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа, КоличествоУровней)
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", Строка.КлючСвязи));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			КоличествоУровней = Макс(УровеньЭтапа, КоличествоУровней);
			
			Если Строка.НомерЭтапа = 1 Тогда
				Строка.УровеньЭтапа = КоличествоУровней;
			Иначе
				Строка.УровеньЭтапа = УровеньЭтапа;
			КонецЕсли;
			
		Иначе
			Строка.УровеньЭтапа = УровеньЭтапа;
			ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа + 1, КоличествоУровней);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает спецификацию на основании спецификации заказа
//
// Параметры:
//  Объект					 - ДанныеФормыСтруктура - содержит данные спецификации заказа
//  ДанныеПродукции			 - ДанныеФормыСтруктура - содержит данные текущей продукции заказа
//  ПараметрыСпецификации	 - Структура - содержит параметры новой спецификации.
//
// Возвращаемое значение:
//	Структура - содержит данные новой спецификации
//  				* Ссылка - СправочникСсылка.РесурсныеСпецификации - новая спецификация
//					* Наименование - Строка - наименование спецификации.
//    
Функция СоздатьСпецификациюНаОснованииСпецификацииЗаказа(Объект, ДанныеПродукции, ПараметрыСпецификации) Экспорт

	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	НачатьТранзакцию();
	
	Попытка
	
		СсылкаНового = Справочники.РесурсныеСпецификации.ПолучитьСсылку();
		
		Если ЗначениеЗаполнено(ДанныеПродукции.Спецификация) Тогда
			// Чтобы скопировать реквизиты спецификации, которых нет в заказе
			НоваяСпецификация = ДанныеПродукции.Спецификация.Скопировать();
			НоваяСпецификация.ВыходныеИзделия.Очистить();
			НоваяСпецификация.ВозвратныеОтходы.Очистить();
			НоваяСпецификация.МатериалыИУслуги.Очистить();
			НоваяСпецификация.Трудозатраты.Очистить();
			НоваяСпецификация.СоответствиеСвойств.Очистить();
			НоваяСпецификация.ДополнительныеРеквизиты.Очистить();
		Иначе
			НоваяСпецификация = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
			НоваяСпецификация.Заполнить(Неопределено);
		КонецЕсли; 
		
		НоваяСпецификация.Наименование = ПараметрыСпецификации.НаименованиеСпецификации;
		НоваяСпецификация.Описание = ПараметрыСпецификации.Описание;
		
		// Копирование Этапы
		СозданныеЭтапы = Новый Соответствие;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаЭтапы = Объект.Этапы.Выгрузить(СтруктураПоиска);
		
		ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы);
		
		Для каждого ЭтапЗаказа Из ТаблицаЭтапы Цикл
			
			Если ЗначениеЗаполнено(ЭтапЗаказа.Этап) Тогда
				// Чтобы скопировать реквизиты этапа, которых нет в заказе
				НовыйЭтап = ЭтапЗаказа.Этап.Скопировать();
				НовыйЭтап.ВидыРабочихЦентров.Очистить();
				НовыйЭтап.АльтернативныеВидыРабочихЦентров.Очистить();
				НовыйЭтап.ДополнительныеРеквизиты.Очистить();
			Иначе
				НовыйЭтап = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
				НовыйЭтап.Заполнить(Неопределено);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапЗаказа);
			НовыйЭтап.Владелец = СсылкаНового;
			
			СтруктураПоискаПоЭтапу = Новый Структура("КлючСвязиЭтапы", ЭтапЗаказа.КлючСвязи);
			ТаблицаВидыРЦ = Объект.ВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
			ТаблицаВидыРЦ.Сортировать("НомерСтроки");
			Для каждого ВидРЦЗаказа Из ТаблицаВидыРЦ Цикл
				СтрокаВидРЦ = НовыйЭтап.ВидыРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВидРЦ, ВидРЦЗаказа);
			КонецЦикла;
			
			ТаблицаАльтернативныеВидыРЦ = Объект.АльтернативныеВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
			ТаблицаАльтернативныеВидыРЦ.Сортировать("НомерСтроки");
			Для каждого АльтернативныйВидРЦ Из ТаблицаАльтернативныеВидыРЦ Цикл
				СтрокаАльтернативныйВидРЦ = НовыйЭтап.АльтернативныеВидыРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАльтернативныйВидРЦ, АльтернативныйВидРЦ);
			КонецЦикла;
			
			НовыйЭтап.ОбменДанными.Загрузка = Истина;
			НовыйЭтап.Записать();
			
			СозданныеЭтапы.Вставить(ЭтапЗаказа.КлючСвязи, НовыйЭтап.Ссылка);
			
		КонецЦикла;
		
		// Копирование ВыходныеИзделия
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Ложь);
		ТаблицаВыходныеИзделия = Объект.ВыходныеИзделия.Выгрузить(СтруктураПоиска);
		ТаблицаВыходныеИзделия.Сортировать("НомерСтроки");
		Для каждого ИзделиеЗаказа Из ТаблицаВыходныеИзделия Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ИзделиеЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИзделие = НоваяСпецификация.ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзделие, ИзделиеЗаказа);
			
			СтрокаИзделие.Количество = СтрокаИзделие.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			СтрокаИзделие.Этап = НовыйЭтап;
			СтрокаИзделие.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		// Копирование ВозвратныеОтходы
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаВозвратныеОтходы = Объект.ВозвратныеОтходы.Выгрузить(СтруктураПоиска);
		ТаблицаВозвратныеОтходы.Сортировать("НомерСтроки");
		Для каждого ОтходЗаказа Из ТаблицаВозвратныеОтходы Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ОтходЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтход = НоваяСпецификация.ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтход, ОтходЗаказа);
			
			СтрокаОтход.Количество = СтрокаОтход.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			СтрокаОтход.КоличествоУпаковок = СтрокаОтход.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаОтход);
			
			СтрокаОтход.Этап = НовыйЭтап;
			СтрокаОтход.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		// Копирование МатериалыИУслуги
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаМатериалы = Объект.МатериалыИУслуги.Выгрузить(СтруктураПоиска);
		ТаблицаМатериалы.Сортировать("НомерСтроки");
		Для каждого МатериалЗаказа Из ТаблицаМатериалы Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(МатериалЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаМатериал = НоваяСпецификация.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериал, МатериалЗаказа);
			
			СтрокаМатериал.Количество = СтрокаМатериал.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			СтрокаМатериал.КоличествоУпаковок = СтрокаМатериал.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			Если СтрокаМатериал.ПроизводитсяВПроцессе Тогда
				СтрокаМатериал.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
			Иначе
				СтрокаМатериал.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
			КонецЕсли;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаМатериал);
			
			СтрокаМатериал.Этап = НовыйЭтап;
			СтрокаМатериал.ЭтапРедактирование = НовыйЭтап;
			
		КонецЦикла;
		
		// Копирование Трудозатраты
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаТрудозатраты = Объект.Трудозатраты.Выгрузить(СтруктураПоиска);
		ТаблицаТрудозатраты.Сортировать("НомерСтроки");
		Для каждого ТрудозатратыЗаказа Из ТаблицаТрудозатраты Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ТрудозатратыЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТрудозатраты = НоваяСпецификация.Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТрудозатраты, ТрудозатратыЗаказа);
			
			СтрокаТрудозатраты.Количество = СтрокаТрудозатраты.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			СтрокаТрудозатраты.Этап = НовыйЭтап;
			СтрокаТрудозатраты.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		НоваяСпецификация.МногоэтапныйПроизводственныйПроцесс = (СозданныеЭтапы.Количество() <> 1);
		
		НоваяСпецификация.УстановитьСсылкуНового(СсылкаНового);
		НоваяСпецификация.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ПроизводствоСервер.СобытиеСозданиеСпецификации(), 
			УровеньЖурналаРегистрации.Ошибка,,Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Новый Структура("Ссылка,Наименование", НоваяСпецификация.Ссылка, НоваяСпецификация.Наименование);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область РасчетНормативнойДлительности

// Запускает расчет длительности производства, при записи объектов от которых зависит расчет.
//
// Параметры:
//  ОбъектРасчета	 - СправочникСсылка.РесурсныеСпецификации, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Календари - объект расчета
//  ПараметрыЗапуска - Структура																								 - см. РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ПараметрыЗапуска()
//  Отказ			 - Булево																									 - признак наличия ошибок.
//
Процедура РассчитатьДлительностьПроизводства(ОбъектРасчета, ПараметрыЗапуска = Неопределено, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ДобавитьЗадание(ОбъектРасчета, ПараметрыЗапуска, Отказ);
	
КонецПроцедуры

// Запускает пересчет длительности производства при назначении основной спецификаций.
//
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификация, Массив - спецификация или список спецификаций.
//
Процедура ПересчитатьДлительностьПриНазначенииОсновнойСпецификации(Спецификация) Экспорт
	
	МассивСсылок = ПроизводствоСервер.МассивЗначений(Спецификация);
	ОчередьКРасчету = Новый Массив;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		ЗависимыеСпецификации = Справочники.РесурсныеСпецификации.ЗависимыеСпецификации(Ссылка);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОчередьКРасчету, ЗависимыеСпецификации);
	КонецЦикла;
	
	Если ОчередьКРасчету.ВГраница() <> -1 Тогда
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОчередьКРасчету);
		ПараметрыЗапуска = РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ПараметрыЗапуска(Ложь);
		РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ДобавитьЗадание(ОчередьКРасчету, ПараметрыЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура СредняяНормаЧасовПоГрафикуРаботыПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Отказ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикРаботыИзИсточникаСобытия(Источник);
	Если ГрафикРаботы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СредняяНормаЧасов = 0;
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		МассивГрафиков = ПроизводствоСервер.МассивЗначений(ГрафикРаботы);
		СредняяНормаЧасов = СредняяНормаЧасовПоГрафикамРаботы(МассивГрафиков)[ГрафикРаботы];
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("СредняяНормаЧасовДоИзменения", СредняяНормаЧасов);
	
КонецПроцедуры

Процедура СредняяНормаЧасовПоГрафикуРаботыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СредняяНормаЧасовДоИзменения = 0;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("СредняяНормаЧасовДоИзменения", СредняяНормаЧасовДоИзменения)
		ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикРаботыИзИсточникаСобытия(Источник);
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивГрафиков = ПроизводствоСервер.МассивЗначений(ГрафикРаботы);
	СредняяНормаЧасов = СредняяНормаЧасовПоГрафикамРаботы(МассивГрафиков)[ГрафикРаботы];

	Если СредняяНормаЧасовДоИзменения <> СредняяНормаЧасов Тогда
		
		РассчитатьДлительностьПроизводства(ГрафикРаботы,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ГрафикРаботыИзИсточникаСобытия(Источник)
	
	Перем ГрафикРаботы;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("КонстантаМенеджерЗначения.ОсновнойКалендарьПредприятия") Тогда
		
		ГрафикРаботы = Константы.ОсновнойКалендарьПредприятия.Получить(); 
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Календари") Тогда
		
		ГрафикРаботы = Источник.Ссылка;
		
	КонецЕсли;
	
	Возврат ГрафикРаботы;
	
КонецФункции

Функция СредняяНормаЧасовПоГрафикамРаботы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Календари.Ссылка                                          КАК Ссылка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Календари.Длительность) КАК ЧИСЛО(10,3)) КАК НормаЧасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ШаблонЗаполнения.Ссылка                                                          КАК Ссылка,
	|		СУММА(РАЗНОСТЬДАТ(Расписание.ВремяНачала, Расписание.ВремяОкончания, МИНУТА)/60) КАК Длительность
	|	ИЗ
	|		Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК Расписание
	|			ПО ШаблонЗаполнения.Ссылка = Расписание.Ссылка
	|				И ШаблонЗаполнения.НомерСтроки = Расписание.НомерДня
	|	ГДЕ
	|		ШаблонЗаполнения.Ссылка В (&ГрафикиРаботы)
	|		И ШаблонЗаполнения.ДеньВключенВГрафик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШаблонЗаполнения.Ссылка,
	|		ШаблонЗаполнения.НомерСтроки) КАК Календари
	|
	|СГРУППИРОВАТЬ ПО
	|	Календари.Ссылка");
	
	Запрос.УстановитьПараметр("ГрафикиРаботы", МассивСсылок);
	
	СредняяНормаЧасов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СредняяНормаЧасов.Вставить(Выборка.Ссылка, Выборка.НормаЧасов);
	КонецЦикла;
	Для каждого Ссылка Из МассивСсылок Цикл
		Если Не ЗначениеЗаполнено(СредняяНормаЧасов[Ссылка]) Тогда
			СредняяНормаЧасов[Ссылка] = 24.000;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СредняяНормаЧасов;
	
КонецФункции

Функция СвернутаяСредняяНормаЧасовПоГрафикамРаботы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Календари.Длительность) КАК ЧИСЛО(10,3)) КАК НормаЧасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РАЗНОСТЬДАТ(Расписание.ВремяНачала, Расписание.ВремяОкончания, МИНУТА)/60) КАК Длительность
	|	ИЗ
	|		Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК Расписание
	|			ПО ШаблонЗаполнения.Ссылка = Расписание.Ссылка
	|				И ШаблонЗаполнения.НомерСтроки = Расписание.НомерДня
	|	ГДЕ
	|		ШаблонЗаполнения.Ссылка В (&ГрафикиРаботы)
	|		И ШаблонЗаполнения.ДеньВключенВГрафик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШаблонЗаполнения.НомерСтроки) КАК Календари");
	
	Запрос.УстановитьПараметр("ГрафикиРаботы", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НормаЧасов) Тогда
		Результат = Выборка.НормаЧасов;
	Иначе
		Результат = 24.000;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область ВидыРабочихЦентров

Процедура УстановитьУсловноеОформлениеВидыРабочихЦентров(Форма, ИмяТЧ) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Запрет снятия флажка Использовать для вида РЦ
	#Область ЗапретИспользовать
	
	Если Элементы.Найти(ИмяТЧ + "Использовать") <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "Использовать"].Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".Использовать");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	#КонецОбласти

	// Выделение альтернативного вида РЦ
	#Область АльтернативныйВРЦЦвет
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "ВидРабочегоЦентра"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".Альтернативный");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАльтернативногоВидаРабочихЦентров);
	
	#КонецОбласти
	
	// Варианты наладки
	#Область ВариантыНаладки
	
	Если Элементы.Найти(ИмяТЧ + "ВариантНаладки") <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "ВариантНаладки"].Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".ИспользуетсяВариантНаладки");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																	|en = '<not used>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	КонецЕсли;
	
	#КонецОбласти
	
	// Запрет редактирования времени работы, если применяется синхронная загрузка
	#Область ВремяРаботыПриСинхроннойЗагрузке
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "ВремяРаботы"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "ЕдиницаИзмерения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	// ОтметкаНезаполненного для поля Загрузка
	#Область Загрузка_ОтметкаНезаполненного
	
	Если Элементы.Найти(ИмяТЧ + "Загрузка") <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Загрузка");

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".ПараллельнаяЗагрузка");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																	|en = '<not used>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьВидыРабочихЦентров(ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров, ВсеВидыРабочихЦентров, ЗаполнитьВремяСинхроннойЗагрузки) Экспорт
	
	СписокВидовРабочихЦентров = Новый Массив;
	СписокВариантовНаладки = Новый Массив;
	
	КоллекцияВидыРЦ = ВсеВидыРабочихЦентров.ПолучитьЭлементы();	
	КоллекцияВидыРЦ.Очистить();

	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		НовыйВидРЦ = КоллекцияВидыРЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйВидРЦ, СтрокаВидРЦ);
		
		Если ЗначениеЗаполнено(НовыйВидРЦ.ВидРабочегоЦентра) Тогда
			СписокВидовРабочихЦентров.Добавить(НовыйВидРЦ.ВидРабочегоЦентра);
		КонецЕсли; 
		Если ЗначениеЗаполнено(НовыйВидРЦ.ВариантНаладки) Тогда
			СписокВариантовНаладки.Добавить(НовыйВидРЦ.ВариантНаладки);
		КонецЕсли; 
		
		КоллекцияАльтернативныеВидыРЦ = НовыйВидРЦ.ПолучитьЭлементы();
		СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", СтрокаВидРЦ.КлючСвязи);
		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		НовыйВидРЦ.ДоступноИзменениеИспользовать = (СписокСтрок.Количество() <> 0);
		Для каждого СтрокаАльтернативныйВидРЦ Из СписокСтрок Цикл
			НовыйАльтернативныйВидРЦ = КоллекцияАльтернативныеВидыРЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйАльтернативныйВидРЦ, СтрокаАльтернативныйВидРЦ);
			НовыйАльтернативныйВидРЦ.Альтернативный = Истина;
			НовыйАльтернативныйВидРЦ.ДоступноИзменениеИспользовать = Истина;
			
			Если ЗначениеЗаполнено(НовыйАльтернативныйВидРЦ.ВидРабочегоЦентра) Тогда
				СписокВидовРабочихЦентров.Добавить(НовыйАльтернативныйВидРЦ.ВидРабочегоЦентра);
			КонецЕсли; 
			Если ЗначениеЗаполнено(НовыйАльтернативныйВидРЦ.ВариантНаладки) Тогда
				СписокВариантовНаладки.Добавить(НовыйАльтернативныйВидРЦ.ВариантНаладки);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	ЗначенияРеквизитовВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
											СписокВидовРабочихЦентров, 
											"ИспользуютсяВариантыНаладки,ПараллельнаяЗагрузка,
											|ВариантЗагрузки,ВремяРаботы,ЕдиницаИзмерения");
											
	Если СписокВариантовНаладки.Количество() <> 0 Тогда
		ЗначенияРеквизитовВариантовНаладки = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
												СписокВариантовНаладки, 
												"ВремяРаботы,ЕдиницаИзмерения");
	Иначе
		ЗначенияРеквизитовВариантовНаладки = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаВидРЦ Из КоллекцияВидыРЦ Цикл
		
		РеквизитыВидаРЦ = ЗначенияРеквизитовВидовРЦ.Получить(СтрокаВидРЦ.ВидРабочегоЦентра);
		РеквизитыВариантаНаладки = ЗначенияРеквизитовВариантовНаладки.Получить(СтрокаВидРЦ.ВариантНаладки);
		ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
			РеквизитыВидаРЦ,
			РеквизитыВариантаНаладки,
			Ложь,
			СтрокаВидРЦ,
			ЗаполнитьВремяСинхроннойЗагрузки);
		
		КоллекцияАльтернативныеВидыРЦ = СтрокаВидРЦ.ПолучитьЭлементы();
		Для каждого СтрокаАльтернативныйВидРЦ Из КоллекцияАльтернативныеВидыРЦ Цикл
			
			РеквизитыВидаРЦ = ЗначенияРеквизитовВидовРЦ.Получить(СтрокаАльтернативныйВидРЦ.ВидРабочегоЦентра);
			РеквизитыВариантаНаладки = ЗначенияРеквизитовВариантовНаладки.Получить(СтрокаАльтернативныйВидРЦ.ВариантНаладки);
			ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
				РеквизитыВидаРЦ,
				РеквизитыВариантаНаладки,
				Ложь,
				СтрокаАльтернативныйВидРЦ,
				ЗаполнитьВремяСинхроннойЗагрузки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьВидыРабочихЦентров(ВсеВидыРабочихЦентров, ПланироватьРаботу, ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров) Экспорт

	ВидыРабочихЦентров.Очистить();
	АльтернативныеВидыРабочихЦентров.Очистить();
	
	Если НЕ ПланироватьРаботу Тогда
		Возврат;
	КонецЕсли;
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	ОсновныеВидыРабочихЦентров = ВсеВидыРабочихЦентров.ПолучитьЭлементы();
	Для каждого СтрокаОсновнойВидРЦ Из ОсновныеВидыРабочихЦентров Цикл
		НовыйВидРЦ = ВидыРабочихЦентров.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйВидРЦ, СтрокаОсновнойВидРЦ);
		Если НовыйВидРЦ.КлючСвязи = ПустойКлюч Тогда
			НовыйВидРЦ.КлючСвязи = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		АльтернативныеВидыРЦ = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		Для каждого СтрокаАльтернативныйВидРЦ Из АльтернативныеВидыРЦ Цикл
			НовыйАльтернативныйВидРЦ = АльтернативныеВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйАльтернативныйВидРЦ, СтрокаАльтернативныйВидРЦ);
			Если НовыйАльтернативныйВидРЦ.КлючСвязи = ПустойКлюч Тогда
				НовыйАльтернативныйВидРЦ.КлючСвязи = Новый УникальныйИдентификатор;
			КонецЕсли;
			НовыйАльтернативныйВидРЦ.КлючСвязиВидыРабочихЦентров = НовыйВидРЦ.КлючСвязи;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(РеквизитыВидаРЦ, РеквизитыВариантаНаладки, ПолучитьРеквизиты, СтрокаВидРЦ, ЗаполнитьВремяСинхроннойЗагрузки = Истина) Экспорт

	Если ПолучитьРеквизиты Тогда
		Если ЗначениеЗаполнено(СтрокаВидРЦ.ВидРабочегоЦентра) Тогда
			РеквизитыВидаРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
													СтрокаВидРЦ.ВидРабочегоЦентра, 
													"ИспользуютсяВариантыНаладки,ПараллельнаяЗагрузка,
													|ВариантЗагрузки,ВремяРаботы,ЕдиницаИзмерения");
		Иначе
			РеквизитыВидаРЦ = Неопределено;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаВидРЦ.ВариантНаладки) Тогда
			РеквизитыВариантаНаладки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
													СтрокаВидРЦ.ВариантНаладки, 
													"ВремяРаботы,ЕдиницаИзмерения");
		Иначе
			РеквизитыВариантаНаладки = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаВидРЦ.ИспользуетсяВариантНаладки = Ложь;
	СтрокаВидРЦ.ПараллельнаяЗагрузка = Ложь;
	СтрокаВидРЦ.СинхроннаяЗагрузка = Ложь;
	
	Если РеквизитыВидаРЦ = Неопределено Тогда
		СтрокаВидРЦ.ВремяРаботы = 0;
		СтрокаВидРЦ.ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВариантыНаладки = РеквизитыВидаРЦ.ИспользуютсяВариантыНаладки;
	СтрокаВидРЦ.ИспользуетсяВариантНаладки = (ИспользуютсяВариантыНаладки = Истина);
	
	СтрокаВидРЦ.ПараллельнаяЗагрузка = РеквизитыВидаРЦ.ПараллельнаяЗагрузка;
	
	Если РеквизитыВидаРЦ.ПараллельнаяЗагрузка
		И РеквизитыВидаРЦ.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный Тогда
		
		Если ЗаполнитьВремяСинхроннойЗагрузки Тогда
			
			Если ИспользуютсяВариантыНаладки Тогда
				Если РеквизитыВариантаНаладки <> Неопределено Тогда
					ВремяРаботы = РеквизитыВариантаНаладки.ВремяРаботы;
					ЕдиницаИзмерения = РеквизитыВариантаНаладки.ЕдиницаИзмерения;
				Иначе
					ВремяРаботы = 0;
					ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
				КонецЕсли; 
			Иначе
				ВремяРаботы = РеквизитыВидаРЦ.ВремяРаботы;
				ЕдиницаИзмерения = РеквизитыВидаРЦ.ЕдиницаИзмерения;
			КонецЕсли;
			СтрокаВидРЦ.ВремяРаботы = ВремяРаботы;
			СтрокаВидРЦ.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
		КонецЕсли;
		
		СтрокаВидРЦ.СинхроннаяЗагрузка = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Автовыбор_ОтборПоСвойствам_РасчетКоличества

#Область Автовыбор

Функция ОбработатьНастройкиАвтовыбораНоменклатуры(
	НаборДанных, 
	ДанныеПоНоменклатуре, 
	ИсточникНастроек, 
	ПолучитьПредставления = Ложь, 
	ПолучитьСведенияАвтовыбора = Ложь) Экспорт
	
	// инициализация служебных колонок
	НаборДанных.Колонки.Добавить("СведенияАвтовыбора", Новый ОписаниеТипов("Строка"));
	
	Результат = Новый Массив;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметризациюРесурсныхСпецификаций") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствПродукции.Свойство КАК Свойство,
	|	ЗначенияСвойствПродукции.Свойство.Заголовок КАК СвойствоЗаголовок,
	|	ЗначенияСвойствПродукции.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойствПродукции
	|ГДЕ
	|	ЗначенияСвойствПродукции.Ссылка = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствХарактеристики.Свойство,
	|	ЗначенияСвойствХарактеристики.Свойство.Заголовок,
	|	ЗначенияСвойствХарактеристики.Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойствПродукции
	|		ПО (ЗначенияСвойствПродукции.Ссылка = &Номенклатура)
	|			И ЗначенияСвойствХарактеристики.Свойство = ЗначенияСвойствПродукции.Свойство
	|ГДЕ
	|	ЗначенияСвойствХарактеристики.Ссылка = &Характеристика
	|	И ЗначенияСвойствПродукции.Свойство ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Номенклатура", ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеПоНоменклатуре.Характеристика);
	
	ЗначенияСвойствИзделия = Неопределено;
	
	Для каждого СтрокаНабораДанных Из НаборДанных Цикл
		
		Если СтрокаНабораДанных.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции
			ИЛИ СтрокаНабораДанных.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве
			ИЛИ СтрокаНабораДанных.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции
			ИЛИ СтрокаНабораДанных.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве 
			ИЛИ СтрокаНабораДанных.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму Тогда
		
			Если НЕ ЗначениеЗаполнено(ДанныеПоНоменклатуре.Номенклатура) Тогда
				СтрокаНабораДанных.СведенияАвтовыбора = НСтр("ru = 'Необходимо указать основное изделие.';
															|en = 'Specify main product.'");
				Продолжить;
			КонецЕсли; 
			
			СведенияАвтовыбораНоменклатуры   = "";
			СведенияАвтовыбораХарактеристики = "";
			
			Если СтрокаНабораДанных.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции Тогда
				СведенияАвтовыбораНоменклатуры = ВыборНоменклатурыИзСвойства(
														ДанныеПоНоменклатуре, 
														СтрокаНабораДанных, 
														ПолучитьПредставления, 
														ПолучитьСведенияАвтовыбора);
			КонецЕсли; 
			
			Если СтрокаНабораДанных.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции Тогда
				
				Если ЗначенияСвойствИзделия = Неопределено Тогда
					
					ЗначенияСвойствИзделия = Запрос.Выполнить().Выгрузить();
					ЗначенияСвойствИзделия.Индексы.Добавить("Свойство");
					ЗначенияСвойствИзделия.Индексы.Добавить("СвойствоЗаголовок");
					
				КонецЕсли;
				
				СведенияАвтовыбораХарактеристики = ВыборХарактеристикиПоСвойствам(
														ДанныеПоНоменклатуре, 
														СтрокаНабораДанных, 
														ПолучитьПредставления, 
														ПолучитьСведенияАвтовыбора, 
														ИсточникНастроек,
														ЗначенияСвойствИзделия);
														
			ИначеЕсли СтрокаНабораДанных.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоАлгоритму Тогда
			
				Если ЗначенияСвойствИзделия = Неопределено Тогда
					
					ЗначенияСвойствИзделия = Запрос.Выполнить().Выгрузить();
					ЗначенияСвойствИзделия.Индексы.Добавить("Свойство");
					ЗначенияСвойствИзделия.Индексы.Добавить("СвойствоЗаголовок");
					
				КонецЕсли;
				
				СведенияАвтовыбораХарактеристики = ВыборХарактеристикиПоАлгоритму(
														ДанныеПоНоменклатуре,
														СтрокаНабораДанных,
														ПолучитьПредставления,
														ПолучитьСведенияАвтовыбора,
														ИсточникНастроек,
														ЗначенияСвойствИзделия);
														
			КонецЕсли; 
			
			Если ПолучитьСведенияАвтовыбора Тогда
				Если СтрокаНабораДанных.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве Тогда
					СведенияАвтовыбораНоменклатуры = УточнениеМатериалаПриПроизводстве(ДанныеПоНоменклатуре, СтрокаНабораДанных, ИсточникНастроек);
					
				ИначеЕсли СтрокаНабораДанных.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве Тогда
					СведенияАвтовыбораХарактеристики = УточнениеМатериалаПриПроизводстве(ДанныеПоНоменклатуре, СтрокаНабораДанных, ИсточникНастроек);
				КонецЕсли;
				
				СтрокаНабораДанных.СведенияАвтовыбора = СведенияАвтовыбораНоменклатуры 
																+ ?(СведенияАвтовыбораНоменклатуры = "", "", " ")
																+ СведенияАвтовыбораХарактеристики;
				
			КонецЕсли;
			
			Результат.Добавить(СтрокаНабораДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьСвойстваАвтовыбораИОтбораПоСвойствам(Объект, СоответствиеСвойств, ОтборПоСвойствам, ВидИзделий) Экспорт
	
	СписокСвойств = ПолучитьСвойстваДляАвтовыбора(ВидИзделий);
	
	// Проверим настройки отбора по свойствам
	СтрокиУдалить = Новый Массив;
	Для каждого СтрокаОтбор Из ОтборПоСвойствам Цикл
		Если СписокСвойств.Найти(СтрокаОтбор.Свойство) = Неопределено Тогда
			СтрокиУдалить.Добавить(СтрокаОтбор);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаУдалить Из СтрокиУдалить Цикл
		ОтборПоСвойствам.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	// Проверим настройку автовыбора
	Для каждого ДанныеНастройки Из СоответствиеСвойств Цикл
		Если СписокСвойств.Найти(ДанныеНастройки.СвойствоПродукции) = Неопределено Тогда
			ДанныеНастройки.СвойствоПродукции = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборНоменклатурыИзСвойства(ДанныеПоНоменклатуре, СтрокаНабораДанных, ПолучитьПредставления, ПолучитьСведенияАвтовыбора)
	
	СведенияАвтовыбора = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&НоменклатураПредставление,
	|	ЗначенияСвойств.Значение КАК Номенклатура,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК УпаковкаШтучная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ИспользованиеХарактеристик, НЕОПРЕДЕЛЕНО) В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойств
	|ГДЕ
	|	ЗначенияСвойств.Ссылка = &Номенклатура
	|	И ЗначенияСвойств.Свойство = &Свойство
	|	И ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) В (&ДопустимыеТипыНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НоменклатураПредставление,
	|	ЗначенияСвойств.Значение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК УпаковкаШтучная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ИспользованиеХарактеристик, НЕОПРЕДЕЛЕНО) В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойств
	|ГДЕ
	|	ЗначенияСвойств.Ссылка = &Характеристика
	|	И ЗначенияСвойств.Свойство = &Свойство
	|	И ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) В (&ДопустимыеТипыНоменклатуры)";
				   
	Если ПолучитьПредставления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НоменклатураПредставление,", "ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).Представление, """") КАК НоменклатураПредставление,");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НоменклатураПредставление,", "");
	КонецЕсли;

	Запрос.УстановитьПараметр("Номенклатура",   ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("Свойство",       СтрокаНабораДанных.СвойствоСодержащееНоменклатуру);
	
	ДопустимыеТипыНоменклатуры = Новый Массив;
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	Запрос.УстановитьПараметр("ДопустимыеТипыНоменклатуры", ДопустимыеТипыНоменклатуры);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ПолучитьСведенияАвтовыбора Тогда
			СведенияАвтовыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Номенклатуру не удалось получить из свойства <%1>.';
											|en = 'Cannot receive products from property <%1>.'"),
										Строка(СтрокаНабораДанных.СвойствоСодержащееНоменклатуру));
		КонецЕсли; 
		
		Возврат СведенияАвтовыбора;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтрокаНабораДанных, Выборка);
	
	Возврат СведенияАвтовыбора;

КонецФункции

Функция ЗаполнитьСведенияАвтовыбора(ДанныеАвтовыбора)
	
	СведенияАвтовыбора = "";
	
	Для каждого ЭлКоллекции Из ДанныеАвтовыбора Цикл
		СведенияАвтовыбора = СведенияАвтовыбора + ?(ПустаяСтрока(СведенияАвтовыбора), "", "; ")
											+ "<" + ЭлКоллекции.Свойство + ">" + ?(ЭлКоллекции.Значение = Неопределено, "", ": " + ЭлКоллекции.Значение);
	КонецЦикла; 
	
	Возврат СведенияАвтовыбора;
	
КонецФункции

Функция ВыборХарактеристикиПоСвойствам(ДанныеПоНоменклатуре,
	СтрокаНабораДанных,
	ПолучитьПредставления,
	ПолучитьСведенияАвтовыбора,
	ИсточникНастроек,
	ЗначенияСвойствИзделия)
	
	ВладелецХарактеристикМатериала = Неопределено;
	Если Не Справочники.Номенклатура.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(СтрокаНабораДанных.Номенклатура, ВладелецХарактеристикМатериала) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоответствиеСвойств.СпособПодбораЗначения КАК СпособПодбораЗначения,
	|	СоответствиеСвойств.СвойствоМатериала КАК СвойствоМатериала,
	|	СоответствиеСвойств.СвойствоМатериала.Заголовок КАК Свойство,
	|	СоответствиеСвойств.СвойствоПродукции КАК СвойствоПродукции,
	|	СоответствиеСвойств.ЗначениеСвойства  КАК Значение,
	|	СоответствиеСвойств.АлгоритмРасчетаЗначения КАК АлгоритмРасчетаЗначения
	|ИЗ
	|	Справочник." + ИсточникНастроек + ".СоответствиеСвойств КАК СоответствиеСвойств
	|ГДЕ
	|	СоответствиеСвойств.Ссылка = &Ссылка
	|	И СоответствиеСвойств.КлючСвязи = &КлючСвязи
	|	И СоответствиеСвойств.СпособПодбораЗначения <> ЗНАЧЕНИЕ(Перечисление.СпособыПодбораЗначенияСвойстваНоменклатуры.ЛюбоеЗначение)");
	Запрос.УстановитьПараметр("КлючСвязи", СтрокаНабораДанных.КлючСвязи);
	Запрос.УстановитьПараметр("Ссылка", ДанныеПоНоменклатуре.Спецификация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ВладелецХарактеристикПродукции = Неопределено;
		Справочники.Номенклатура.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(ДанныеПоНоменклатуре.Номенклатура, ВладелецХарактеристикПродукции);
		Если ВладелецХарактеристикПродукции = ВладелецХарактеристикМатериала Тогда
			СтрокаНабораДанных.Характеристика = ДанныеПоНоменклатуре.Характеристика;
			Если ПолучитьПредставления Тогда
				СтрокаНабораДанных.ХарактеристикаПредставление = Строка(СтрокаНабораДанных.Характеристика);
			КонецЕсли;
		КонецЕсли;
		
		Возврат "";
	КонецЕсли;
	
	СоответствиеСвойств = РезультатЗапроса.Выгрузить();
	СведенияАвтовыбора = "";
	
	КоличествоСвойств = СоответствиеСвойств.Количество();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	//Характеристика_Представление,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	&ПодбираемыеХарактеристики КАК ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ХарактеристикиНоменклатуры.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ХарактеристикиНоменклатуры.Ссылка) = &КоличествоСвойств";
	
	Запрос.УстановитьПараметр("КоличествоСвойств", КоличествоСвойств);
	Запрос.УстановитьПараметр("ВладелецХарактеристикМатериала", ВладелецХарактеристикМатериала);
	
	ОписанияФункций = Новый Соответствие;
	Если СоответствиеСвойств.Найти(Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПоАлгоритму, "СпособПодбораЗначения") <> Неопределено Тогда
		
		ПараметрыАлгоритмаАвтовыбора = ПараметрыВыполненияАлгоритмаАвтовыбора(ДанныеПоНоменклатуре, СтрокаНабораДанных, ЗначенияСвойствИзделия);
		Для каждого Описание Из УправлениеДаннымиОбИзделиях.ОписаниеФункцийАвтовыбораЗначенияСвойстваНоменклатуры() Цикл
			Если НЕ ТипЗнч(Описание) = Тип("Структура") ИЛИ НЕ Описание.Свойство("ИмяФункции") Тогда
				Продолжить;
			КонецЕсли;
			ОписанияФункций.Вставить(Описание.ИмяФункции, Описание);
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстыЗапроса = Новый Массив;
	
	Для Х = 0 По КоличествоСвойств - 1 Цикл
		
		НастройкаСоответствия = СоответствиеСвойств[Х];
		
		ИмяСвойствоМатериала = "СвойствоМатериала" + Формат(Х, "ЧН=0; ЧГ=");
		ИмяЗначениеСвойства  = "ЗначениеСвойства"  + Формат(Х, "ЧН=0; ЧГ=");
		
		Если НастройкаСоответствия.СпособПодбораЗначения = Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПоСвойству
			И ЗначениеЗаполнено(НастройкаСоответствия.СвойствоПродукции) Тогда
			
			НайденноеЗначение = ЗначенияСвойствИзделия.Найти(НастройкаСоответствия.СвойствоПродукции, "Свойство");
			Если НайденноеЗначение <> Неопределено Тогда
				НастройкаСоответствия.Значение = НайденноеЗначение.Значение;
			КонецЕсли;
			
		ИначеЕсли НастройкаСоответствия.СпособПодбораЗначения = Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПоФормуле 
			И НЕ ПустаяСтрока(НастройкаСоответствия.АлгоритмРасчетаЗначения) Тогда
			
			ДанныеДляВычисления = ПодготовитьФормулуДляВычисления(НастройкаСоответствия.АлгоритмРасчетаЗначения, ЗначенияСвойствИзделия);
			
			НастройкаСоответствия.Значение = ВычислитьЗначениеСвойстваПриАвтовыборе(
				ДанныеДляВычисления.Формула, 
				ДанныеДляВычисления.Параметры, 
				ДанныеПоНоменклатуре.Спецификация);
			
		ИначеЕсли НастройкаСоответствия.СпособПодбораЗначения = Перечисления.СпособыПодбораЗначенияСвойстваНоменклатуры.ПоАлгоритму 
			И НЕ ПустаяСтрока(НастройкаСоответствия.АлгоритмРасчетаЗначения) Тогда
			
			Описание = ОписанияФункций[НастройкаСоответствия.АлгоритмРасчетаЗначения];
			
			Если Описание <> Неопределено Тогда
				
				Алгоритм = Описание.ИмяМодуля+"."+Описание.ИмяФункции+"(Параметры)";
				
				НастройкаСоответствия.Значение = ВычислитьЗначениеСвойстваПриАвтовыборе(
					Алгоритм, 
					ПараметрыАлгоритмаАвтовыбора, 
					ДанныеПоНоменклатуре.Спецификация);
					
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПодбираемыеХарактеристики.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ПодбираемыеХарактеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствХарактеристики
		|			ПО ПодбираемыеХарактеристики.Ссылка = ЗначенияСвойствХарактеристики.Ссылка
		|			И ЗначенияСвойствХарактеристики.Свойство = &СвойствоМатериала
		|ГДЕ
		|	ПодбираемыеХарактеристики.Владелец = &ВладелецХарактеристикМатериала
		|		И НЕ ПодбираемыеХарактеристики.ПометкаУдаления
		|	И ЕСТЬNULL(ЗначенияСвойствХарактеристики.Значение, НЕОПРЕДЕЛЕНО) = &ЗначениеСвойства";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СвойствоМатериала", ИмяСвойствоМатериала);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗначениеСвойства",  ИмяЗначениеСвойства);
		
		Запрос.УстановитьПараметр(ИмяСвойствоМатериала, НастройкаСоответствия.СвойствоМатериала);
		Если ЗначениеЗаполнено(НастройкаСоответствия.Значение)
			И НастройкаСоответствия.Значение <> Ложь Тогда
			Запрос.УстановитьПараметр(ИмяЗначениеСвойства, НастройкаСоответствия.Значение);
		Иначе
			Запрос.УстановитьПараметр(ИмяЗначениеСвойства, Неопределено);
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПодбираемыеХарактеристики", "(" + СтрСоединить(ТекстыЗапроса, " ОБЪЕДИНИТЬ ВСЕ ") + ")");
	
	Если ПолучитьПредставления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Характеристика_Представление", "ПРЕДСТАВЛЕНИЕ(ХарактеристикиНоменклатуры.Ссылка) КАК ХарактеристикаПредставление");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Если ПолучитьСведенияАвтовыбора Тогда
			СведенияАвтовыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Характеристику не удалось подобрать по свойствам: %1';
												|en = 'Failed to select a characteristic by properties: %1'"),
											ЗаполнитьСведенияАвтовыбора(СоответствиеСвойств));
		КонецЕсли;
		Возврат СведенияАвтовыбора;
	КонецЕсли;
	
	Выборка.Следующий();
	
	СтрокаНабораДанных.Характеристика = Выборка.Характеристика;
	Если ПолучитьПредставления Тогда
		СтрокаНабораДанных.ХарактеристикаПредставление = Выборка.ХарактеристикаПредставление;
	КонецЕсли;
	
	Возврат СведенияАвтовыбора;
	
КонецФункции

Функция ВыборХарактеристикиПоАлгоритму(ДанныеПоНоменклатуре,
	СтрокаНабораДанных,
	ПолучитьПредставления,
	ПолучитьСведенияАвтовыбора,
	ИсточникНастроек,
	ЗначенияСвойствПродукции)
	
	СведенияАвтовыбора = "";
	
	Если ПустаяСтрока(СтрокаНабораДанных.АлгоритмАвтовыбораХарактеристики) Тогда
		Возврат СведенияАвтовыбора;
	КонецЕсли;
	
	ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНабораДанных.Номенклатура, "ИспользованиеХарактеристик");
	Если ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		Возврат СведенияАвтовыбора;
	КонецЕсли;
	
	ОписаниеНайдено = Ложь;
	ОписанияФункций = ОписаниеФункцийАвтовыбораХарактеристики();
	Для каждого Описание Из ОписанияФункций Цикл
		Если ТипЗнч(Описание) = Тип("Структура")
			И Описание.Свойство("ИмяФункции")
			И Описание.ИмяФункции = СтрокаНабораДанных.АлгоритмАвтовыбораХарактеристики Тогда
			ОписаниеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеНайдено = Ложь Тогда
		Возврат СведенияАвтовыбора;
	КонецЕсли;
	
	Параметры = ПараметрыВыполненияАлгоритмаАвтовыбора(ДанныеПоНоменклатуре, СтрокаНабораДанных, ЗначенияСвойствПродукции);
	
	Результат = Неопределено;
	
	Попытка
		Алгоритм = Описание.ИмяМодуля+"."+Описание.ИмяФункции+"(Параметры)";
		СтрокаНабораДанных.Характеристика = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Алгоритм, Параметры);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Подбор характеристики по алгоритму';
				|en = 'Select characteristic by algorithm'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Если ПолучитьСведенияАвтовыбора Тогда
			СведенияАвтовыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Характеристику не удалось подобрать по алгоритму: %1';
					|en = 'Failed to select a characteristic by algorithm: %1'"),
				Описание.ИмяФункции);
		КонецЕсли;
			
		Возврат СведенияАвтовыбора;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтрокаНабораДанных.Характеристика) И ПолучитьПредставления Тогда
		СтрокаНабораДанных.ХарактеристикаПредставление = Строка(СтрокаНабораДанных.Характеристика);
	КонецЕсли;
	
	Возврат СведенияАвтовыбора;
	
КонецФункции

Функция УточнениеМатериалаПриПроизводстве(ДанныеПоНоменклатуре, СтрокаНабораДанных, ИсточникНастроек)

 	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствПродукции.Свойство КАК Свойство,
	|	ЗначенияСвойствПродукции.Значение КАК Значение,
	|	ЗначенияСвойствПродукции.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ЗначенияСвойствПродукции
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойствПродукции
	|ГДЕ
	|	ЗначенияСвойствПродукции.Ссылка = &Номенклатура
	|	И ЗначенияСвойствПродукции.Свойство В
	|			(ВЫБРАТЬ
	|				НаборыСвойствДополнительныеРеквизиты.Свойство
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|			ГДЕ
	|				НаборыСвойствДополнительныеРеквизиты.Ссылка В (&НаборПродукции)
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ЭтоГруппа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствХарактеристики.Свойство КАК Свойство,
	|	ЗначенияСвойствХарактеристики.Значение КАК Значение,
	|	ЗначенияСвойствХарактеристики.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ЗначенияСвойствХарактеристикиПродукции
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствХарактеристики
	|ГДЕ
	|	ЗначенияСвойствХарактеристики.Ссылка = &Характеристика
	|	И ЗначенияСвойствХарактеристики.Свойство В
	|			(ВЫБРАТЬ
	|				НаборыСвойствДополнительныеРеквизиты.Свойство
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|			ГДЕ
	|				НаборыСвойствДополнительныеРеквизиты.Ссылка В (&НаборХарактеристики)
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ЭтоГруппа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ЗначенияСвойствПродукции.НомерСтроки КАК НомерСтроки,
	|	ЗначенияСвойствПродукции.Свойство.Заголовок КАК Свойство,
	|	ЗначенияСвойствПродукции.Значение КАК Значение
	|ИЗ
	|	ЗначенияСвойствПродукции КАК ЗначенияСвойствПродукции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗначенияСвойствХарактеристикиПродукции.НомерСтроки,
	|	ЗначенияСвойствХарактеристикиПродукции.Свойство.Заголовок,
	|	ЗначенияСвойствХарактеристикиПродукции.Значение
	|ИЗ
	|	ЗначенияСвойствХарактеристикиПродукции КАК ЗначенияСвойствХарактеристикиПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСвойствПродукции КАК ЗначенияСвойствПродукции
	|		ПО (ЗначенияСвойствПродукции.Свойство = ЗначенияСвойствХарактеристикиПродукции.Свойство)
	|ГДЕ
	|	ЗначенияСвойствПродукции.Свойство ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	НомерСтроки";

	Запрос.УстановитьПараметр("Номенклатура",   ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеПоНоменклатуре.Характеристика);
	
	НаборПродукции = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("НаборПродукции", НаборПродукции.ВыгрузитьКолонку("Набор"));
	
	НаборХарактеристики = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("НаборХарактеристики", НаборХарактеристики.ВыгрузитьКолонку("Набор"));
	
	ДанныеАвтовыбора = Запрос.Выполнить().Выгрузить();
	
	СведенияАвтовыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Требуется уточнить с учетом свойств: %1';
										|en = 'It is required to specify considering properties: %1'"),
									ЗаполнитьСведенияАвтовыбора(ДанныеАвтовыбора));
	
	Возврат СведенияАвтовыбора;
	
КонецФункции

Процедура ОчиститьНастройкиАвтовыбораМатериалов(ДанныеСтроки, СоответствиеСвойств) Экспорт
	
	ДанныеСтроки.СпособАвтовыбораНоменклатуры   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	ДанныеСтроки.СвойствоСодержащееНоменклатуру = Неопределено;

	СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
	СписокСтрок = СоответствиеСвойств.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаСоответствие Из СписокСтрок Цикл
		СоответствиеСвойств.Удалить(СтрокаСоответствие);
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для описания функции автовыбора характеристики номенклатуры или значения свойства характеристики номенклатуры 
// в подключаемых алгоритмах. См. форму настройки автовыбора и настройку соответствия свойств.
//
// Параметры:
//  ИмяФункции            - Строка - имя функции, должна быть экспортной
//  ИмяМодуля             - Строка - имя модуля, если функция расположена не в модуле УправлениеДаннымиОбИзделиях
//  Представление         - Строка - представление, с которым функция будет отображаться в списке настройки автовыбора
//  ВозвращаемоеЗначение  - Строка - строка, содержащая имена типов возвращаемого значения, разделенных запятыми
//                        - Массив - массив значений типа Тип, состоящий возможных типов возвращаемого значения функции
//                        - ОписаниеТипов - описание возвращаемого значения
//                        Информация о возвращаемом значении используется для фильтрации списка доступных функций при выборе
//  Параметры             - Структура - структура дополнительных параметров описания, может содержать следующие ключи:
//                              - ИмяСвойства - Строка - Имя свойства, которое задается в настройках элемента свойства в группе "Для разработчиков",
//                                                       если параметр указан, то алгоритм будет применяться только к данному свойству.
//
// Возвращаемое значение:
//   СправочникСсылка.ХарактеристикаНоменклатуры - Для алгоритмов автовыбора характеристики
//   Произвольный                                - Для алгоритмов автовыбора значения свойства, содержит значение свойства
//
Функция СоздатьОписаниеФункцииАвтовыбора(ИмяФункции, ИмяМодуля = "", Представление = "", ВозвращаемоеЗначение = Неопределено, Параметры = Неопределено)
	
	Результат = Новый Структура("ИмяФункции, ИмяМодуля, Представление, ВозвращаемоеЗначение, Параметры");
	
	Результат.ИмяФункции = ИмяФункции;
	
	Если ПустаяСтрока(ИмяМодуля) Тогда
		Результат.ИмяМодуля = "УправлениеДаннымиОбИзделиях";
	Иначе
		Результат.ИмяМодуля = ИмяМодуля;
	КонецЕсли;
	
	Если ПустаяСтрока(Представление) Тогда
		Результат.Представление = ИмяФункции;
	Иначе
		Результат.Представление = Представление;
	КонецЕсли;
	
	ОписаниеВозвращаемогоЗначения = Неопределено;
	Если ВозвращаемоеЗначение <> Неопределено Тогда
		Если ТипЗнч(ВозвращаемоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ВозвращаемоеЗначение) = Тип("Строка") Тогда
			ОписаниеВозвращаемогоЗначения = Новый ОписаниеТипов(ВозвращаемоеЗначение);
		ИначеЕсли ТипЗнч(ВозвращаемоеЗначение) = Тип("ОписаниеТипов") Тогда
			ОписаниеВозвращаемогоЗначения = ВозвращаемоеЗначение;
		ИначеЕсли ТипЗнч(ВозвращаемоеЗначение) = Тип("Тип") Тогда
			ОписаниеВозвращаемогоЗначения = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВозвращаемоеЗначение));
		КонецЕсли;
	КонецЕсли;
	Результат.ВозвращаемоеЗначение = ОписаниеВозвращаемогоЗначения;
	
	Если Параметры = Неопределено Тогда
		Результат.Параметры = Новый Структура;
	Иначе
		Результат.Параметры = Параметры;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РасчетПоФормулам

#Область Транслятор

Функция ТрансляторФормул(Строка, Параметры, Описание) Экспорт
	
	Операнд = "";
	Индекс = Параметры.Количество();
	
	Формула = Строка.АлгоритмРасчетаКоличества;
	ФормулаДляРазбора = Строка.АлгоритмРасчетаКоличества;
	
	СоответствиеПараметров = Новый Соответствие;
	
	Пока СледующийОперанд(Операнд, ФормулаДляРазбора) Цикл
		
		Если СоответствиеПараметров[Операнд] <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = СтрШаблон("Параметр%1", Формат(Индекс, "ЧН=; ЧГ="));
		
		Формула = СтрЗаменить(Формула, "[" + Операнд + "]", СтрШаблон("Параметры.%1", ИмяПараметра));
		
		ПутьКДанным = Параметры.Добавить();
		ПутьКДанным.ИмяПараметра = ИмяПараметра;
		Если Не ЗаполнитьПутьКДаннымПоОперанду(
					Операнд,
					ПутьКДанным,
					Описание)
				И СтрНайти(Операнд, "Продукция") > 0
				Тогда
			// для совместимости c 2.2.3 [#...#]
			ПутьКДанным.Ключ        = "ОсновноеИзделие";
			ПутьКДанным.ИмяСвойства = НСтр("ru = 'Количество';
											|en = 'Quantity'");
		КонецЕсли;
		ПутьКДанным.ДанныеСтроки = Строка;
		
		СоответствиеПараметров.Вставить(Операнд, ИмяПараметра);
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ФункцииИзОбщегоМодуля() Цикл
		
		Формула = СтрЗаменить(Формула, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Возврат Формула;
	
КонецФункции

Функция ЗаполнитьПутьКДаннымПоОперанду(Операнд, ПутьКДанным, Описание)
	
	Для каждого КлючИЗначение Из Описание Цикл
		
		ИД = КлючИЗначение.Значение.Идентификатор;
		Длина = СтрДлина(ИД);
		Если Лев(Операнд, Длина)= ИД
			И (Сред(Операнд, Длина + 1, 1) = "." ИЛИ Сред(Операнд, Длина + 1, 1) = "[") Тогда
			
			ПутьКДанным.Ключ = КлючИЗначение.Ключ;
			
			Разделитель = ".";
			Если КлючИЗначение.Значение.Коллекция Тогда
				
				ТекстДляРазбора = Операнд;
				
				СледующийОперанд(
					Разделитель,
					ТекстДляРазбора);
				
				ПутьКДанным.НомерСтроки = ОбщегоНазначения.ОписаниеТипаЧисло(10).ПривестиЗначение(Разделитель);
				Разделитель = "["+Разделитель+"].";
				
			КонецЕсли;
			ПутьКДанным.ИмяСвойства = СтрЗаменить(Операнд, ИД + Разделитель, "");
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СледующийОперанд(Операнд, Текст)
	
	Позиция = СтрНайти(Текст, "[");
	Если Позиция > 0 Тогда
		ПозицияОкончание = СтрНайти(Текст, "]", НаправлениеПоиска.СНачала, Позиция + 1);
		Пока ПозицияОкончание > 0 Цикл
			Операнд = Сред(Текст, Позиция + 1, ПозицияОкончание - Позиция - 1);
			Если СтрЧислоВхождений(Операнд, "[") = СтрЧислоВхождений(Операнд, "]") Тогда
				Текст = Сред(Текст, ПозицияОкончание + 1);
				Возврат Истина;
			КонецЕсли;
			ПозицияОкончание = СтрНайти(Текст, "]", НаправлениеПоиска.СНачала, ПозицияОкончание + 1);
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ПодготовитьФормулуДляВычисления(АлгоритмРасчета, ЗначенияСвойств)
	
	Параметры = Новый Структура;
	
	Формула = АлгоритмРасчета;
	ФормулаДляРазбора = АлгоритмРасчета;
	
	Индекс = 0;
	Операнд = "";
	
	ОбработанныеПараметры = Новый Соответствие;
	Пока СледующийОперанд(Операнд, ФормулаДляРазбора) Цикл
		
		Если ОбработанныеПараметры[Операнд] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвойство = ЗначенияСвойств.Найти(Операнд, "СвойствоЗаголовок");
		Если СтрокаСвойство <> Неопределено Тогда
			ИмяПараметра = СтрШаблон("Параметр%1", Формат(Индекс, "ЧН=; ЧГ="));
			
			Формула = СтрЗаменить(Формула, "[" + Операнд + "]", СтрШаблон("Параметры.%1", ИмяПараметра));
			
			Параметры.Вставить(ИмяПараметра, СтрокаСвойство.Значение);
			
			ОбработанныеПараметры.Вставить(Операнд, ИмяПараметра);
			
			Индекс = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ФункцииИзОбщегоМодуля() Цикл
		Формула = СтрЗаменить(Формула, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Новый Структура("Формула, Параметры", Формула, Параметры);
	
КонецФункции

Функция ВычислитьЗначениеСвойстваПриАвтовыборе(АлгоритмРасчета, Параметры, Спецификация)
	
	Результат = Неопределено;
	
	Попытка
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(АлгоритмРасчета, Параметры);
	Исключение
			
		ЗаписьЖурналаРегистрации(
			ПроизводствоСервер.СобытиеРасчетЗначенияСвойстваПриАвтовыборе(),
			УровеньЖурналаРегистрации.Ошибка,,
			Спецификация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДанныеДляРасчета

Процедура ДобавитьЗапросВыборкиСвойствИсточника(ТекстыЗапроса, ПараметрыЗапроса, Источник, ИмяПараметра, ИмяСвойства)
	
	ИмяТаблицыХранения = ОбщегоНазначения.ИмяТаблицыПоСсылке(Источник);
	
	Индекс = ПараметрыЗапроса.Количество();
	
	ПараметрИсточник = СтрШаблон("Параметр%1", Формат(Индекс, "ЧН=; ЧГ="));
	ПараметрСвойство = СтрШаблон("Параметр%1", Формат(Индекс+1, "ЧН=; ЧГ="));
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	""" + ИмяПараметра + """ КАК ИмяПараметра,
		|	Т.Значение               КАК ЗначениеПараметра
		|ИЗ
		|	" + ИмяТаблицыХранения + ".ДополнительныеРеквизиты КАК Т
		|ГДЕ
		|	Т.Ссылка               = &" + ПараметрИсточник + "
		|	И Т.Свойство.Заголовок = &" + ПараметрСвойство + "
		|");

	ПараметрыЗапроса.Вставить(ПараметрИсточник, Источник);
	ПараметрыЗапроса.Вставить(ПараметрСвойство, ИмяСвойства);
	
КонецПроцедуры

Процедура ДобавитьЗапросВыборкиСвойствНоменклатуры(ТекстыЗапроса, ПараметрыЗапроса, ИмяПараметра, ИмяСвойства, Номенклатура, Характеристика)
	
	Индекс = ПараметрыЗапроса.Количество();
	
	ПараметрНоменклатура = СтрШаблон("Параметр%1", Формат(Индекс, "ЧН=; ЧГ="));
	ПараметрХарактеристика = СтрШаблон("Параметр%1", Формат(Индекс+1, "ЧН=; ЧГ="));
	ПараметрСвойство = СтрШаблон("Параметр%1", Формат(Индекс+2, "ЧН=; ЧГ="));
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ (ВЫБРАТЬ
		|	""" + ИмяПараметра + """ КАК ИмяПараметра,
		|	Т.Значение               КАК ЗначениеПараметра
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК Т
		|ГДЕ
		|	Т.Ссылка               = &" + ПараметрХарактеристика + "
		|	И Т.Свойство.Заголовок = &" + ПараметрСвойство + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""" + ИмяПараметра + """ КАК ИмяПараметра,
		|	Т.Значение               КАК ЗначениеПараметра
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК Т
		|ГДЕ
		|	Т.Ссылка               = &" + ПараметрНоменклатура + "
		|	И Т.Свойство.Заголовок = &" + ПараметрСвойство + ") КАК ВТ
		|");
	
	ПараметрыЗапроса.Вставить(ПараметрНоменклатура, Номенклатура);
	ПараметрыЗапроса.Вставить(ПараметрХарактеристика, Характеристика);
	ПараметрыЗапроса.Вставить(ПараметрСвойство, ИмяСвойства);
	
КонецПроцедуры

Процедура ДобавитьПараметрВДанныеДляРасчета(ДанныеДляРасчета, ИмяПараметра, Значение = 0, Параметры = Неопределено)
	
	ДанныеДляРасчета.Параметры.Вставить(ИмяПараметра, Значение);

	Если Параметры <> Неопределено Тогда
		Параметры.Найти(ИмяПараметра, "ИмяПараметра").Найден = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСоответствиеДляАвтоРасчета(ДанныеДляРасчета, ПутьКДанным, Источник)
	
	Если (ПутьКДанным.Ключ = "ВыходныеИзделия" 
		ИЛИ ПутьКДанным.Ключ = "ВозвратныеОтходы"
		ИЛИ ПутьКДанным.Ключ = "МатериалыИУслуги")
		И ПутьКДанным.ИмяСвойства = НСтр("ru = 'Количество';
										|en = 'Quantity'") Тогда
		
		Если Не ПустаяСтрока(Источник.АлгоритмРасчетаКоличества) Тогда
			
			Если ДанныеДляРасчета.АвтоРасчет[Источник.КлючСвязи] = Неопределено Тогда
				ДанныеДляРасчета.АвтоРасчет.Вставить(Источник.КлючСвязи, Новый Массив);
			КонецЕсли;
			ДанныеДляРасчета.АвтоРасчет[Источник.КлючСвязи].Добавить(ПутьКДанным.ИмяПараметра);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникиДанных

Функция СоздатьОписанияИсточникаДанныхОперандов(Идентификатор, Представление = "") Экспорт
	
	Результат = Новый Структура("
	|Идентификатор,
	|Представление,
	|
	|Реквизиты,
	|
	|СодержитСвойства, 
	|НаборСвойств,
	|
	|СодержитСвойстваНоменклатуры, 
	|Коллекция,
	|
	|ИмяТЧ,
	|ИсточникСвойствНоменклатуры,
	|");

	Результат.Идентификатор = Идентификатор;
	Если ПустаяСтрока(Представление) Тогда
		Результат.Представление = Идентификатор;
	Иначе
		Результат.Представление = Представление;
	КонецЕсли;
	
	Результат.Реквизиты = Новый Массив;
	
	Результат.СодержитСвойства = Ложь;
	Результат.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
	
	Результат.СодержитСвойстваНоменклатуры = Ложь;
	Результат.Коллекция = Ложь;
	
	Результат.ИмяТЧ = "";
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьОписанияРеквизитаИсточникаДанныхОперандов(Идентификатор, Представление = "") Экспорт
	
	Результат = Новый Структура("Идентификатор,Представление");

	Результат.Идентификатор = Идентификатор;
	Если ПустаяСтрока(Представление) Тогда
		Результат.Представление = Идентификатор;
	Иначе
		Результат.Представление = Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьТаблицуИсточниковДанныхДляРасчетаПоФормулам() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КоличествоУпаковокНаЕдиницуПартииВыпуска", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КоэффициентУпаковки", Новый ОписаниеТипов("Число"));
	
	Таблица.Колонки.Добавить("КлючСвязи");
	Таблица.Колонки.Добавить("АлгоритмРасчетаКоличества");
	
	Возврат Таблица;
	
КонецФункции

Функция СоздатьСтруктуруДанныхИсточникаДляРасчетаПоФормулам() Экспорт
	
	Возврат Новый Структура("Номенклатура,Характеристика,Количество,КлючСвязи,АлгоритмРасчетаКоличества");
	
КонецФункции

Функция ПутьКДаннымСодержитРеквизитИсточника(ПутьКДанным, Описание) Экспорт
	
	Для каждого КлючИЗначение Из Описание.Реквизиты Цикл
		
		Если КлючИЗначение.Идентификатор = ПутьКДанным.ИмяСвойства Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДополнитьОписаниеИсточниковСоставомОперандов(ОписаниеИсточников, Объект, ИмяТЧ, ДанныеСтроки = Неопределено) Экспорт
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	СписокНаборов =           Новый Массив;
	СписокНоменклатуры =      Новый Массив;
	СписокВидовНоменклатуры = Новый Массив;
	
	Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
	
		Для каждого КлючИЗначение Из ОписаниеИсточников Цикл
			
			Ключ = КлючИЗначение.Ключ;
			ОписаниеИсточника = КлючИЗначение.Значение;
			
			Если ОписаниеИсточника.СодержитСвойства Тогда
				СписокНаборов.Добавить(ОписаниеИсточника.НаборСвойств);
			КонецЕсли;
			
			Если ОписаниеИсточника.СодержитСвойстваНоменклатуры Тогда
				Если ОписаниеИсточника.Коллекция Тогда
					Для каждого Строка Из Объект[Ключ] Цикл
						Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
							СписокНоменклатуры.Добавить(Строка.Номенклатура);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЗначениеЗаполнено(ОписаниеИсточника.ИсточникСвойствНоменклатуры) Тогда
					Если ТипЗнч(ОписаниеИсточника.ИсточникСвойствНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
						СписокНоменклатуры.Добавить(ОписаниеИсточника.ИсточникСвойствНоменклатуры);
					Иначе
						СписокВидовНоменклатуры.Добавить(ОписаниеИсточника.ИсточникСвойствНоменклатуры);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, "ВидНоменклатуры");
		Для каждого Элемент Из СписокНоменклатуры Цикл
			СписокВидовНоменклатуры.Добавить(РеквизитыНоменклатуры[Элемент].ВидНоменклатуры);
		КонецЦикла;

		СписокСвойств = ПолучитьСвойстваИсточниковДляРасчетаПоФормулам(СписокНаборов);
		СписокСвойствНоменклатуры = ПолучитьСвойстваНоменклатурыДляРасчетаПоФормулам(СписокВидовНоменклатуры);
	
	КонецЕсли;

	Результат = Новый Структура;

	Для каждого КлючИЗначение Из ОписаниеИсточников Цикл
		
		Ключ = КлючИЗначение.Ключ;
		ОписаниеИсточника = КлючИЗначение.Значение;
		
		ОперандыИсточника = Новый Массив;
		
		Если ОписаниеИсточника.Коллекция Тогда
			
			КолонкиДанных = "НомерСтроки, Идентификатор, Представление";
			
			Для каждого Строка Из Объект[Ключ] Цикл
				
				Если ИмяТЧ = Ключ И ДанныеСтроки <> Неопределено И ДанныеСтроки.НомерСтроки <= Строка.НомерСтроки Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторСтроки = СтрШаблон("%1[%2].", ОписаниеИсточника.Идентификатор, Формат(Строка.НомерСтроки, "ЧН=; ЧГ="));
				ПредставлениеСтроки = СтрШаблон(НСтр("ru = 'Строка[%1].';
													|en = 'Line[%1].'"), Формат(Строка.НомерСтроки, "ЧН=; ЧГ="));
				
				Для каждого Реквизит Из ОписаниеИсточника.Реквизиты Цикл
					ОперандыИсточника.Добавить(Новый Структура(КолонкиДанных, 
							Строка.НомерСтроки, ИдентификаторСтроки + Реквизит.Идентификатор, ПредставлениеСтроки + Реквизит.Представление));
				КонецЦикла;
				
				Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
				
					Если ОписаниеИсточника.СодержитСвойства Тогда
						
						НайденныеСвойства = СписокСвойств.НайтиСтроки(Новый Структура("Ссылка",
							ОписаниеИсточника.НаборСвойств));
							
						Для каждого Свойство Из НайденныеСвойства Цикл
							Если Свойство.ТипЗначения.СодержитТип(Тип("Число")) Тогда
								ОперандыИсточника.Добавить(Новый Структура(КолонкиДанных, 
									Строка.НомерСтроки, ИдентификаторСтроки + Свойство.Представление, ПредставлениеСтроки + Свойство.Представление));
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					Если ОписаниеИсточника.СодержитСвойстваНоменклатуры И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
						
						НайденныеСвойства = СписокСвойствНоменклатуры.НайтиСтроки(Новый Структура("Вид",
							РеквизитыНоменклатуры[Строка.Номенклатура].ВидНоменклатуры));
							
						Для каждого Свойство Из НайденныеСвойства Цикл
							Если Свойство.ТипЗначения.СодержитТип(Тип("Число")) Тогда
								ОперандыИсточника.Добавить(Новый Структура(КолонкиДанных, 
									Строка.НомерСтроки, ИдентификаторСтроки + Свойство.Представление, ПредставлениеСтроки + Свойство.Представление));
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			КолонкиДанных = "Идентификатор, Представление";
			
			Если НЕ ПустаяСтрока(ОписаниеИсточника.ИмяТЧ) И ОписаниеИсточника.ИмяТЧ <> ИмяТЧ Тогда 
				Продолжить;
			КонецЕсли;
			
			Для каждого Реквизит Из ОписаниеИсточника.Реквизиты Цикл
				ОперандыИсточника.Добавить(Новый Структура(КолонкиДанных, 
					ОписаниеИсточника.Идентификатор+"."+Реквизит.Идентификатор, Реквизит.Представление));
			КонецЦикла;
				
			Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
				
				Если ОписаниеИсточника.СодержитСвойства Тогда
					НайденныеСвойства = СписокСвойств.НайтиСтроки(Новый Структура("Ссылка", ОписаниеИсточника.НаборСвойств));
					Для каждого Свойство Из НайденныеСвойства Цикл
						ОперандыИсточника.Добавить(Новый Структура(КолонкиДанных,
							ОписаниеИсточника.Идентификатор+"."+Свойство.Представление, Свойство.Представление));
					КонецЦикла;
				КонецЕсли;
				
				Если ОписаниеИсточника.СодержитСвойстваНоменклатуры Тогда
					
					ВидНоменклатуры = Неопределено;
					Если ОписаниеИсточника.ИмяТЧ <> "" И ДанныеСтроки <> Неопределено Тогда
						СтрокаТЧ = Объект[ОписаниеИсточника.ИмяТЧ][ДанныеСтроки.НомерСтроки-1];
						Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
							ВидНоменклатуры = РеквизитыНоменклатуры[СтрокаТЧ.Номенклатура].ВидНоменклатуры;
						КонецЕсли;
					ИначеЕсли ОписаниеИсточника.ИсточникСвойствНоменклатуры <> Неопределено Тогда
						Если ТипЗнч(ОписаниеИсточника.ИсточникСвойствНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
							ВидНоменклатуры = РеквизитыНоменклатуры[ОписаниеИсточника.ИсточникСвойствНоменклатуры].ВидНоменклатуры;
						Иначе
							ВидНоменклатуры = ОписаниеИсточника.ИсточникСвойствНоменклатуры;
						КонецЕсли;
					КонецЕсли;
					
					НайденныеСвойства = СписокСвойствНоменклатуры.НайтиСтроки(Новый Структура("Вид", ВидНоменклатуры));
					Для каждого Свойство Из НайденныеСвойства Цикл
						Если Свойство.ТипЗначения.СодержитТип(Тип("Число")) Тогда
							ОперандыИсточника.Добавить(Новый Структура(КолонкиДанных, 
								ОписаниеИсточника.Идентификатор+"."+Свойство.Представление, Свойство.Представление));
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОперандыИсточника.Количество() Тогда
			
			ТаблицаОперандов = Новый ТаблицаЗначений;
			ТаблицаОперандов.Колонки.Добавить("НомерСтроки",   Новый ОписаниеТипов("Число"));
			ТаблицаОперандов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
			ТаблицаОперандов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
			
			Для каждого Операнд Из ОперандыИсточника Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаОперандов.Добавить(), Операнд);
			КонецЦикла;
			
			ТаблицаОперандов.Индексы.Добавить("НомерСтроки");
			ТаблицаОперандов.Индексы.Добавить("Идентификатор");
			
			ОписаниеИсточника.Вставить("Операнды", ТаблицаОперандов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ОбновитьДанныеАвтоРасчета(Строка, ДанныеДляРасчета, ИмяПоля)

	Если (ДанныеДляРасчета.АвтоРасчет.Количество() = 0
			ИЛИ Строка.Владелец().Колонки.Найти("КлючСвязи") = Неопределено
		) Тогда
		
		Возврат;
	КонецЕсли;
	
	Параметры = ДанныеДляРасчета.АвтоРасчет[Строка.КлючСвязи];
	Если Параметры <> Неопределено Тогда
		Для каждого ИмяПараметра Из Параметры Цикл
			ДанныеДляРасчета.Параметры[ИмяПараметра] = Строка[ИмяПоля];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВыполненияАлгоритмаАвтовыбора(ДанныеПоНоменклатуре, СтрокаНабораДанных, ЗначенияСвойствИзделия)
	
	Параметры = Новый Структура("Номенклатура, Спецификация, Распоряжение");
	
	Параметры.Номенклатура = СтрокаНабораДанных.Номенклатура;
	
	ДанныеПоНоменклатуре.Свойство("Распоряжение",  Параметры.Распоряжение);
	ДанныеПоНоменклатуре.Свойство("Спецификация",  Параметры.Спецификация);
	
	ОсновноеИзделие = Новый Структура("Номенклатура, Характеристика, ЗначенияСвойств");
	
	ДанныеПоНоменклатуре.Свойство("Номенклатура",  ОсновноеИзделие.Номенклатура);
	ДанныеПоНоменклатуре.Свойство("Характеристика",ОсновноеИзделие.Характеристика);
	
	ОсновноеИзделие.ЗначенияСвойств = Новый Соответствие;
	Для каждого Строка Из ЗначенияСвойствИзделия Цикл
		ОсновноеИзделие.ЗначенияСвойств.Вставить(Строка.СвойствоЗаголовок, Строка.Значение);
	КонецЦикла;
	
	Параметры.Вставить("ОсновноеИзделие", ОсновноеИзделие);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область Прочее

Функция ТекстЗапросаДоступныеСвойстваНоменклатуры(ТолькоДействующие = Истина, ДоступныСвойстваНоменклатуры = Истина)
	
	ТекстыЗапроса = Новый Массив();
	
	// Доп реквизиты общие для всех характеристик
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Вид,
	|	ТаблицаСвойств.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
	|		ПО ИСТИНА
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В (&ВидыНоменклатуры) 
	|	И ВидыНоменклатуры.ИспользоватьХарактеристики
	|	И ТаблицаСвойств.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)
	|	И &ТолькоДействующие");
	
	// Доп реквизиты характеристик вида номенклатуры
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Вид,
	|	ТаблицаСвойств.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
	|		ПО (ВЫБОР
	|				КОГДА ВидыНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ВидыНоменклатуры.ВладелецХарактеристик.НаборСвойствХарактеристик
	|				ИНАЧЕ ВидыНоменклатуры.НаборСвойствХарактеристик
	|			КОНЕЦ = ТаблицаСвойств.Ссылка)
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)
	|	И &ТолькоДействующие");
	
	Если ДоступныСвойстваНоменклатуры Тогда
		
		// Доп реквизиты общие для номенклатуры
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Вид,
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ПО ИСТИНА
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка В (&ВидыНоменклатуры)
		|	И ТаблицаСвойств.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)
		|	И &ТолькоДействующие");
		
		// Доп реквизиты вида номенклатуры
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Вид,
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ПО ВидыНоменклатуры.НаборСвойств = ТаблицаСвойств.Ссылка
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка В (&ВидыНоменклатуры)
		|	И &ТолькоДействующие");
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Символы.ПС + " ОБЪЕДИНИТЬ " + Символы.ПС);
	
	Если ТолькоДействующие Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТолькоДействующие", "И НЕ ТаблицаСвойств.ПометкаУдаления");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТолькоДействующие", "");
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Вид                                     КАК Вид,
	|	Т.Свойство                                КАК Свойство,
	|	Т.Свойство.Заголовок                      КАК Представление,
	|	Т.Свойство.ТипЗначения                    КАК ТипЗначения,
	|	Т.Свойство.ВладелецДополнительныхЗначений КАК ВладелецДополнительныхЗначений,
	|	Т.Свойство.ПометкаУдаления                КАК ПометкаУдаления,
	|	Т.Свойство.Имя                            КАК Имя
	|ИЗ
	|	(" + ТекстЗапроса + ") КАК Т";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДеревоСпецификаций

Процедура ЗаполнитьДеревоСпецификаций(Параметры, Дерево)
	
	Дерево.Строки.Очистить();
	
	КлючСвязи = Неопределено;
	НоваяСтрокаДерева = Неопределено;
	
	ИспользованныеСпецификации = Неопределено;
	
	Номенклатура = Параметры.Номенклатура; 
	ХарактеристикаНоменклатуры = Параметры.ХарактеристикаНоменклатуры;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		НоваяСтрокаДерева = Дерево.Строки.Добавить();
		НоваяСтрокаДерева.Идентификатор = Новый УникальныйИдентификатор;
		НоваяСтрокаДерева.Номенклатура = Номенклатура;
		НоваяСтрокаДерева.Характеристика = ХарактеристикаНоменклатуры;
		
		// Проверяем используются характеристики или нет.
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
			НоваяСтрокаДерева.Номенклатура,
			НоваяСтрокаДерева.Характеристика,
			Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		НоваяСтрокаДерева.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		
		НоваяСтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		НоваяСтрокаДерева.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрокаДерева.ВидСтроки);
		НоваяСтрокаДерева.Упаковка = Номенклатура.ЕдиницаИзмерения;
		
		Если Не ЗначениеЗаполнено(Параметры.Спецификация) Тогда
			
			СпецификацияИзделия = УправлениеДаннымиОбИзделияхВызовСервера.ПолучитьОсновнуюСпецификацию(
										Справочники.СтруктураПредприятия.ПустаяСсылка(),
										Номенклатура,
										ХарактеристикаНоменклатуры,
										Параметры.Дата);
			
			Если НЕ ЗначениеЗаполнено(СпецификацияИзделия) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не найдена основная спецификация для изделия.';
						|en = 'Main BOM for the product is not found.'"),
					,
					"ДеревоСпецификаций");
				
				Возврат;
			КонецЕсли;
			
			НоваяСтрокаДерева.Спецификация = СпецификацияИзделия;
		Иначе
			НоваяСтрокаДерева.Спецификация = Параметры.Спецификация;
		КонецЕсли;
		
		// Режим по спецификации заказа
		Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
			
			НоваяСтрокаДерева.Количество			= Параметры.КоличествоВыходногоИзделия;
			НоваяСтрокаДерева.КоличествоУпаковок	= Параметры.КоличествоУпаковокВыходногоИзделия;
			НоваяСтрокаДерева.Упаковка				= Параметры.УпаковкаВыходногоИзделия;
			
			КлючСвязи								= Параметры.КлючСвязи;
			
		Иначе
			
			ДанныеОсновногоИзделия = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(
				НоваяСтрокаДерева.Спецификация,
				Номенклатура,
				ХарактеристикаНоменклатуры);
			
			Если ДанныеОсновногоИзделия.Номенклатура.Пустая() Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ДанныеОсновногоИзделия, "Количество,КоличествоУпаковок,Упаковка");
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаДерева.Упаковка) Тогда
			НоваяСтрокаДерева.Упаковка = Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
		НоваяСтрокаДерева.ЕстьСпецификация = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Спецификация) Тогда
		
		ОсновноеИзделие = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(Параметры.Спецификация);
		
		НоваяСтрокаДерева = Дерево.Строки.Добавить();
		НоваяСтрокаДерева.Идентификатор = Новый УникальныйИдентификатор;
		НоваяСтрокаДерева.Номенклатура = ОсновноеИзделие.Номенклатура;
		НоваяСтрокаДерева.Характеристика = ОсновноеИзделие.Характеристика;
		
		// Проверяем используются характеристики или нет.
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
			НоваяСтрокаДерева.Номенклатура,
			НоваяСтрокаДерева.Характеристика,
			Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		НоваяСтрокаДерева.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		
		НоваяСтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		НоваяСтрокаДерева.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрокаДерева.ВидСтроки);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ОсновноеИзделие, "Количество,КоличествоУпаковок,Упаковка");
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаДерева.Упаковка) Тогда
			НоваяСтрокаДерева.Упаковка = ОсновноеИзделие.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
		НоваяСтрокаДерева.ЕстьСпецификация = Истина;
		НоваяСтрокаДерева.Спецификация = Параметры.Спецификация;
		
	КонецЕсли;
	
	ЕстьСпецификация = (НоваяСтрокаДерева <> Неопределено И НоваяСтрокаДерева.ЕстьСпецификация ИЛИ НоваяСтрокаДерева = Неопределено);
	
	Если Не Параметры.ДинамическоеСчитывание И ЕстьСпецификация Тогда
		
		ИспользованныеСпецификации = Новый Массив;
		
		Если НоваяСтрокаДерева <> Неопределено Тогда
			ИспользованныеСпецификации.Добавить(НоваяСтрокаДерева.Спецификация);
		Иначе
			ИспользованныеСпецификации.Добавить(Параметры.Спецификация);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСтрокиДерева(Параметры, Дерево, НоваяСтрокаДерева, ИспользованныеСпецификации, КлючСвязи);
	
КонецПроцедуры

Процедура ПродолжитьРазузлованиеПоСтрокеДерева(Параметры, Дерево, СтрокаДерева, ИспользованныеСпецификации = Неопределено, КлючСвязи = Неопределено)
	
	СтрокаДерева.ЕстьСпецификация = Истина;
	
	Если Параметры.ДинамическоеСчитывание Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользованныеСпецификации.Найти(СтрокаДерева.Спецификация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованныеСпецификации.Добавить(СтрокаДерева.Спецификация);
	ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева, ИспользованныеСпецификации, КлючСвязи);
	ИспользованныеСпецификации.Удалить(ИспользованныеСпецификации.Найти(СтрокаДерева.Спецификация));
	
КонецПроцедуры

Функция ПолучитьИндексКартинки(ВидСтроки, ЕстьСпецификация = Ложь)
	
	// Этап
	Если ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Этап Тогда
		Возврат 1;
	// Материал
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал И Не ЕстьСпецификация Тогда
		Возврат 2;
	// Трудозатрата
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата Тогда
		Возврат 3;
	// Выходное изделие
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие И Не ЕстьСпецификация Тогда
		Возврат 4;
	// Полуфабрикат( материал )
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал И ЕстьСпецификация Тогда
		Возврат 7;
	// Полуфабрикат( выходное изделие )
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие И ЕстьСпецификация Тогда
		Возврат 8;
	Иначе
		Возврат 10;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеСпецификацииЗаказа(АдресВХранилище, КлючСвязи)
	
	ДанныеЗаказа = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	СтруктураОтбора = Новый Структура("КлючСвязиПолуфабрикат", КлючСвязи);
	Этапы = ДанныеЗаказа.Этапы.Скопировать(СтруктураОтбора);
	
	ВыходныеИзделия = ДанныеЗаказа.ВыходныеИзделия.СкопироватьКолонки();
	ВыходныеИзделия.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ВыходныеИзделия.Колонки.Добавить("ОбработатьПоСпецификации", Новый ОписаниеТипов("Булево"));
	ВыходныеИзделия.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));

	ВозвратныеОтходы = ДанныеЗаказа.ВыходныеИзделия.СкопироватьКолонки();
	ВозвратныеОтходы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ВозвратныеОтходы.Колонки.Добавить("ОбработатьПоСпецификации", Новый ОписаниеТипов("Булево"));
	ВозвратныеОтходы.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	
	МатериалыИУслуги = ДанныеЗаказа.МатериалыИУслуги.СкопироватьКолонки();
	МатериалыИУслуги.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	МатериалыИУслуги.Колонки.Добавить("СпособПолученияМатериала", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПолученияМатериаловВСпецификации"));
	МатериалыИУслуги.Колонки.Добавить("СпецификацияРемонта", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	
	Трудозатраты = ДанныеЗаказа.Трудозатраты.СкопироватьКолонки();
	Трудозатраты.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для Каждого СтрокаЭтапы Из Этапы Цикл
		
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", СтрокаЭтапы.КлючСвязи); 
		
		НайденныеСтроки = ДанныеЗаказа.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = МатериалыИУслуги.Добавить();
			Если Строка.ПроизводитсяВПроцессе
				И ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
				НоваяСтрока.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
			Иначе
				НоваяСтрока.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.Трудозатраты.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.ВидРабот, "ЕдиницаИзмерения");
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДанных = Новый Структура();
	
	СтруктураДанных.Вставить("ТипПроизводственногоПроцесса", Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	
	СтруктураДанных.Вставить("ВыходныеИзделия",  ВыходныеИзделия);
	СтруктураДанных.Вставить("ВозвратныеОтходы", ВозвратныеОтходы);
	СтруктураДанных.Вставить("МатериалыИУслуги", МатериалыИУслуги);
	СтруктураДанных.Вставить("Трудозатраты",     Трудозатраты);
	
	СтруктураДанных.Вставить("Этапы", Этапы);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ЗакэшироватьСтруктуруДереваСпецификаций(Параметры, Дерево, Адрес)
	
	СтруктураДерева = Новый Структура("Параметры, Дерево", Параметры, Дерево);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДерева, Адрес);

КонецФункции

Процедура СтрокаДереваСпецификацийВМассивСтруктур(Строка, МассивСтруктур)
	
	Для каждого Строка Из Строка.Строки Цикл

		СтрокаСтруктура = УправлениеДаннымиОбИзделияхКлиентСервер.СтрокаДереваСпецификацийСтруктурой(Строка);
		
		Если Не Строка.ЕстьСпецификация Тогда
			СтрокаДереваСпецификацийВМассивСтруктур(Строка, СтрокаСтруктура.Строки);
		КонецЕсли;
		
		МассивСтруктур.Добавить(СтрокаСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

Функция ТекстЗапросаСоздатьВТСпецификацииНоменклатурыПоУмолчанию(ИмяТаблицыНоменклатура = "", ТолькоОсновные = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНоменклатуры.Номенклатура       КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика     КАК Характеристика,
	|	СписокНоменклатуры.Подразделение      КАК Подразделение,
	|	СписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства,
	|
	|	ВЫБОР
	|		КОГДА РесурсныеСпецификацииВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ИНАЧЕ РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|
	|	КОНЕЦ                                 КАК Спецификация,
	|
	|	ВЫБОР
	|		КОГДА РесурсныеСпецификацииВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ РесурсныеСпецификацииВыходныеИзделия.Ссылка.Представление
	|
	|	КОНЕЦ                                 КАК СпецификацияПредставление,
	|
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация, 
	|						ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация,
	|							ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
	|								ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|
	|		КОНЕЦ)                            КАК Основная,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация ЕСТЬ NULL 
	|				ТОГДА 1
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураПодразделение.Спецификация ЕСТЬ NULL 
	|				ТОГДА 2
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатура.Спецификация ЕСТЬ NULL 
	|				ТОГДА 3
	|			ИНАЧЕ 100
	|
	|		КОНЕЦ)                            КАК ПриоритетОсновная
	|
	|ПОМЕСТИТЬ ВТСписокДействующихСпецификаций
	|ИЗ
	|	ВТСписокНоменклатуры КАК СписокНоменклатуры
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		 ПО (РесурсныеСпецификацииВыходныеИзделия.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (РесурсныеСпецификацииВыходныеИзделия.Характеристика = СписокНоменклатуры.Характеристика
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Ссылка.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
	|			И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Ссылка.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
	|			И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует))
	|			И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение
	|		 ПО (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Характеристика = СписокНоменклатуры.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Подразделение = СписокНоменклатуры.Подразделение)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристика
	|		 ПО (ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Характеристика = СписокНоменклатуры.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураПодразделение
	|		 ПО (ОсновныеСпецификацииНоменклатураПодразделение.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Подразделение = СписокНоменклатуры.Подразделение)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатура
	|		 ПО (ОсновныеСпецификацииНоменклатура.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатура.Номенклатура = СписокНоменклатуры.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатура.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Характеристика,
	|	СписокНоменклатуры.Подразделение,
	|	СписокНоменклатуры.НачалоПроизводства,
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|
	| //ИМЕЮЩИЕ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Подразделение,
	|	НачалоПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Спецификации.Номенклатура       КАК Номенклатура,
	|	Спецификации.Характеристика     КАК Характеристика,
	|	Спецификации.Подразделение      КАК Подразделение,
	|	Спецификации.НачалоПроизводства КАК НачалоПроизводства,
	|	Спецификации.Спецификация       КАК Спецификация,
	|	Спецификации.Основная           КАК Основная
	|ПОМЕСТИТЬ ВТСпецификацииНоменклатурыПоУмолчанию
	|ИЗ
	|	ВТСписокДействующихСпецификаций КАК Спецификации
	|ГДЕ
	|	Спецификации.Спецификация В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				Т.Спецификация КАК Спецификация
	|			ИЗ
	|				ВТСписокДействующихСпецификаций КАК Т
	|			ГДЕ
	|				Т.Номенклатура         = Спецификации.Номенклатура
	|				И Т.Характеристика     = Спецификации.Характеристика
	|				И Т.Подразделение      = Спецификации.Подразделение
	|				И Т.НачалоПроизводства = Спецификации.НачалоПроизводства
	|			УПОРЯДОЧИТЬ ПО
	|				Т.ПриоритетОсновная,
	|				Т.СпецификацияПредставление)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Подразделение,
	|	НачалоПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСписокДействующихСпецификаций
	|;
	|
	|////////////////////////////////////////////////////////////
	|";
	Если ИмяТаблицыНоменклатура <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСписокНоменклатуры", ИмяТаблицыНоменклатура);
	КонецЕсли;
	СтрокаПодстановки = "";
	Если ТолькоОсновные Тогда
		СтрокаПодстановки = "
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация, 
		|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация, 
		|						ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация,
		|							ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
		|								ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	) = ИСТИНА
		|";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ИМЕЮЩИЕ", СтрокаПодстановки);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса, который получает список действующих спецификаций
// Спецификация является действующей, если
//  - у нее статус Действует
//  - период ее действия включает начало производства.
//
// Параметры
//  ПараметрыЗапроса - Структура - структура, которая может содержать свойства:
//						- ДляСпискаНоменклатуры - указывает, что требуется получить спецификации для списка номенклатуры,
//													хранящейся во временной таблице СписокНоменклатуры.
//
Функция ПолучитьТекстЗапросаОсновнойСпецификации(ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОсновныеСпецификации.Спецификация,
		|	ОсновныеСпецификации.Спецификация.Представление КАК СпецификацияПредставление,
		|	ВЫБОР
		// Все совпадает
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = &Характеристика
		|				И ОсновныеСпецификации.Подразделение = &Подразделение
		|			ТОГДА 1
		
		// Для любого подразделения
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = &Характеристика
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 2
		
		// Для любой характеристики
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = &Подразделение
		|			ТОГДА 3
		
		// Для любой характеристики и любого подразделения
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
		|ГДЕ
		|	ЕСТЬNULL(Спецификация.Статус,
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ПустаяСсылка)) = 
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
		|	И (&НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ Спецификация.НачалоДействия <= &НачалоПроизводства)
		|	И (Спецификация.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ Спецификация.КонецДействия >= НачалоПериода(&НачалоПроизводства, День))
		|	И Номенклатура = &Номенклатура
		|	И (Характеристика = &Характеристика
		|		ИЛИ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|	И (Подразделение = &Подразделение
		|		ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	ИначеЕсли ПараметрыЗапроса.Свойство("ДляСпискаНоменклатуры") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СписокНоменклатуры.Подразделение КАК Подразделение,
		|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
		|	СписокНоменклатуры.Характеристика КАК Характеристика,
		|	СписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства
		|ПОМЕСТИТЬ ВТСписокНоменклатуры
		|ИЗ
		|	СписокНоменклатуры КАК СписокНоменклатуры
		|СГРУППИРОВАТЬ ПО
		|	СписокНоменклатуры.Подразделение,
		|	СписокНоменклатуры.Номенклатура,
		|	СписокНоменклатуры.Характеристика,
		|	СписокНоменклатуры.НачалоПроизводства
		|;
		|
		|ВЫБРАТЬ
		|	ОсновныеСпецификации.Спецификация,
		|	ОсновныеСпецификации.Спецификация.Представление КАК СпецификацияПредставление,
		|	ВТСписокНоменклатуры.Подразделение КАК Подразделение,
		|	ВТСписокНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВТСписокНоменклатуры.Характеристика КАК Характеристика,
		|	ВТСписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства,
		|	ВЫБОР
		// Все совпадает
		|		КОГДА ОсновныеСпецификации.Характеристика = ВТСписокНоменклатуры.Характеристика
		|				И ОсновныеСпецификации.Подразделение = ВТСписокНоменклатуры.Подразделение
		|			ТОГДА 1
		
		// Для любого подразделения
		|		КОГДА ОсновныеСпецификации.Характеристика = ВТСписокНоменклатуры.Характеристика
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 2
		
		// Для любой характеристики
		|		КОГДА ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = ВТСписокНоменклатуры.Подразделение
		|			ТОГДА 3
		
		// Для любой характеристики и любого подразделения
		|		КОГДА ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ВТСписокНоменклатуры КАК ВТСписокНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
		|		ПО (ОсновныеСпецификации.Номенклатура = ВТСписокНоменклатуры.Номенклатура)
		|			И (ОсновныеСпецификации.Характеристика = ВТСписокНоменклатуры.Характеристика
		|				ИЛИ ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (ОсновныеСпецификации.Подразделение = ВТСписокНоменклатуры.Подразделение
		|				ИЛИ ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И (ЕСТЬNULL(ОсновныеСпецификации.Спецификация.Статус,
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ПустаяСсылка)) =
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует))
		|			И (ВТСписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОсновныеСпецификации.Спецификация.НачалоДействия <= ВТСписокНоменклатуры.НачалоПроизводства)
		|			И (ОсновныеСпецификации.Спецификация.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОсновныеСпецификации.Спецификация.КонецДействия >= НачалоПериода(ВТСписокНоменклатуры.НачалоПроизводства, День))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не удалось определить запрос.';
								|en = 'Cannot determine a request.'");
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверяет соответствие полуфабриката и спецификации, которая назначена для его производства.
//
// Параметры:
//  Объект                  - СправочникОбъект.РесурсныеСпецификации,
//                              ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа,
//                              ДокументСсылка.ЗаказНаПроизводство - объект, связанный с проверкой
//  КоллекцияПолуфабрикатов - Массив - коллекция строк, содержащая данные о полуфабрикатах
//  КоллекцияЭтапов         - Массив - коллекция строк, содержащая данные о последовательности этапов
// Возвращаемое значение:
//   - Структура - Структура параметров проверки заполнения внутренних полуфабрикатов
//                  в ресурсной спецификации и спецификации заказа на производство.
//
Функция ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(Объект, Знач КоллекцияПолуфабрикатов = Неопределено, Знач КоллекцияЭтапов = Неопределено) Экспорт
	
	ПараметрыПроверкиВнутреннихПолуфабрикатов = Новый Структура("
		|Режим,
		|СтруктураПоиска,
		|ТаблицаПолуфабрикатов,
		|ТаблицаЭтапов,
		|ПредставлениеТаблицыПолуфабрикатов");
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.РесурсныеСпецификации") Тогда
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация";
		
		// структура поиска в таблице полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска = Новый Структура("
			|ИсточникПолученияПолуфабриката,
			|Номенклатура,
			|Характеристика");
		
		// таблица полуфабрикатов
		
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
		
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из КоллекцияПолуфабрикатов Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.ИсточникПолученияПолуфабриката = ЭлементКоллекции.ЭтапРедактирование;
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.АлгоритмРасчетаКоличества) Тогда
				НоваяСтрока.Количество = -1;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("
			|ИсточникПолученияПолуфабриката, 
			|Номенклатура, 
			|Характеристика", 
			"Количество");
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|ИсточникПолученияПолуфабриката, 
			|Номенклатура, 
			|Характеристика");
	
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru = 'Побочный и промежуточный выпуск';
																							|en = 'Side and intermediate release'");
		
	Иначе
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа";
		
		// структура поиска в таблице полуфабрикатов
		
		СтруктураПоиска = Новый Структура("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура,
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Вставить("СтруктураПоиска", СтруктураПоиска);
		
		// таблица полуфабрикатов
		
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиМатериалыИУслугиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
		
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
			
		Для Каждого ЭлементКоллекции Из КоллекцияПолуфабрикатов Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.КлючСвязиМатериалыИУслугиСтрока = Строка(ЭлементКоллекции.КлючСвязиМатериалыИУслуги);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика", 
			"Количество");
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// таблица полуфабрикатов
	
		ТаблицаЭтапов = Новый ТаблицаЗначений;
		ТаблицаЭтапов.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаЭтапов.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЭтапов.Колонки.Добавить("НаименованиеЭтапа", Новый ОписаниеТипов("Строка"));
		ТаблицаЭтапов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
		
		Если КоллекцияЭтапов = Неопределено Тогда
			КоллекцияЭтапов = Объект.Этапы;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из КоллекцияЭтапов Цикл
			
			НоваяСтрока = ТаблицаЭтапов.Добавить();
			
			НоваяСтрока.КлючСвязиСтрока       = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.НомерЭтапа            = ЭлементКоллекции.НомерЭтапа;
			НоваяСтрока.НаименованиеЭтапа     = ЭлементКоллекции.НаименованиеЭтапа;
			НоваяСтрока.ПроизводствоНаСтороне = ЭлементКоллекции.ПроизводствоНаСтороне;
			
		КонецЦикла;
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов = ТаблицаЭтапов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru = 'Побочный и промежуточный выпуск';
																							|en = 'Side and intermediate release'");
		
	КонецЕсли;
	
	Возврат ПараметрыПроверкиВнутреннихПолуфабрикатов;
	
КонецФункции

Функция ПотребностьВоВнутреннихПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, МассивСтрок)
	
	ТаблицаПотребностиВПолуфабрикатах = Новый ТаблицаЗначений;
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		
	Иначе
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапВыпускаСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из МассивСтрок Цикл
		
		НоваяСтрока = ТаблицаПотребностиВПолуфабрикатах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
			
			НоваяСтрока.Этап = ЭлементКоллекции.ЭтапРедактирование;
			
		Иначе
			
			НоваяСтрока.КлючСвязиСтрока = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			НоваяСтрока.КлючСвязиЭтапВыпускаСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапВыпуска);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПотребностиВПолуфабрикатах;
	
КонецФункции

Функция ТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов)
	
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Этап КАК Справочник.ЭтапыПроизводства) КАК Этап,
		|	ВЫРАЗИТЬ(Т.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства) КАК ИсточникПолученияПолуфабриката,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.НомерЭтапа >= ВЫБОР
		|			КОГДА Т.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|				ТОГДА 1
		|			ИНАЧЕ Т.Этап.НомерЭтапа
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.ПроизводствоНаСтороне
		|	И НЕ &ИспользуетсяПроизводство22
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	Т.Количество КАК Количество,
		|	Т.Номенклатура.Представление КАК НоменклатураПредставление,
		|	Т.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	Т.ИсточникПолученияПолуфабриката.Представление КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА Т.Упаковка.Представление
		|		ИНАЧЕ Т.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	НЕ Т.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Т.Упаковка",
			"Т.Номенклатура"));
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	Т.КлючСвязиЭтапыСтрока КАК КлючСвязиЭтапыСтрока,
		|	Т.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапВыпускаСтрока,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповЗаказа.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	ТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ТаблицаЭтаповЗаказа.НомерЭтапа КАК НомерЭтапа
		|ПОМЕСТИТЬ ВТТаблицаЭтаповЗаказа
		|ИЗ
		|	&ТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребностиВПолуфабрикатах.НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ПотребностиВПолуфабрикатах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповПотребления
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапыСтрока = ТаблицаЭтаповПотребления.КлючСвязиСтрока
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповВыпуска
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповВыпуска.КлючСвязиСтрока
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаЭтаповВыпуска.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповПотребления.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповВыпуска.НомерЭтапа >= ТаблицаЭтаповПотребления.НомерЭтапа
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки,
		|	ТПотребностиВПолуфабрикатах.Номенклатура КАК Номенклатура,
		|	ТПотребностиВПолуфабрикатах.Характеристика КАК Характеристика,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапыСтрока,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиСтрока КАК КлючСвязиМатериалыИУслугиСтрока,
		|	ТПотребностиВПолуфабрикатах.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ТПотребностиВПолуфабрикатах.Количество КАК Количество,
		|	ТПотребностиВПолуфабрикатах.Номенклатура.Представление КАК НоменклатураПредставление,
		|	ТПотребностиВПолуфабрикатах.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	ТТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТПотребностиВПолуфабрикатах.Упаковка.Представление
		|		ИНАЧЕ ТПотребностиВПолуфабрикатах.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	НЕ ТПотребностиВПолуфабрикатах.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТПотребностиВПолуфабрикатах.Упаковка",
			"ТПотребностиВПолуфабрикатах.Номенклатура"));
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОтборНоменклатурыПоСвойствам(ИмяТаблицыНастроек) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючСвязи КАК КлючСвязи,
	|	МИНИМУМ(ВложенныйЗапрос.Используется) КАК Используется
	|ПОМЕСТИТЬ ВТОтборПоСвойствам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТОтборПоСвойствамНастройки.КлючСвязи КАК КлючСвязи,
	|		ВЫБОР ВТОтборПоСвойствамНастройки.Условие
	|			КОГДА ""Равно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства = ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""НеРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <> ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Больше""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства > ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""БольшеИлиРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства >= ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Меньше""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства < ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""МеньшеИлиРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <= ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""ВСписке""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства В
	|						(ВЫБРАТЬ
	|							Т.ЗначениеОтбор КАК ЗначениеОтбор
	|						ИЗ
	|							ВТОтборПоСвойствамНастройки КАК Т
	|						ГДЕ
	|							Т.Условие = ""ВСписке""
	|							И Т.Свойство = ВТОтборПоСвойствамНастройки.Свойство
	|							И Т.КлючСвязи = ВТОтборПоСвойствамНастройки.КлючСвязи)
	|			КОГДА ""НеВСписке""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <> ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Заполнено""
	|				ТОГДА НЕ ВТОтборПоСвойствамНастройки.ЗначениеСвойства В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)
	|			КОГДА ""НеЗаполнено""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Используется
	|	ИЗ
	|		&ВТОтборПоСвойствамНастройки КАК ВТОтборПоСвойствамНастройки) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ВТОтборПоСвойствамНастройки", ИмяТаблицыНастроек);
	
КонецФункции

#КонецОбласти

#КонецОбласти
