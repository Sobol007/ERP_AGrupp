
#Область СлужебныйПрограммныйИнтерфейс

#Область Взаимодействия

Процедура SMS4B_ПолучениеSMS() Экспорт
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПолучениеСообщений = Константы.SMS4B_ИспользоватьПолучениеСообщений.Получить();
	Если Не ИспользоватьПолучениеСообщений Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.SMS4B_ПолучениеSMS);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru='Не выполнены настройки отправки SMS.';en='Settings of SMS sending are not executed.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.СообщениеSMS;
	
	РезультатПолучения = SMS4B_ОтправкаSMS.SMS4B_ПолучитьSMS();
	Если РезультатПолучения.Ошибка Тогда
		ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр(РезультатПолучения.ТекстОшибки, ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ДатаПолученияСообщений			= Константы.SMS4B_ДатаПолученияСообщений.Получить();
	МиллисекундаПолученияСообщений	= Константы.SMS4B_МиллисекундаПолученияСообщений.Получить();
	ПолучатьТолькоПолныеСообщения	= Константы.SMS4B_ПолучатьТолькоПолныеСообщения.Получить();
	Если ПолучатьТолькоПолныеСообщения Тогда
		ИскатьВЧастичноПолученныхСообщениях = Ложь;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СообщениеSMSАдресаты.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	СообщениеSMSАдресаты.СостояниеСообщения КАК СостояниеСообщения,
		|	СообщениеSMSАдресаты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеSMS КАК СообщениеSMS
		|		ПО СообщениеSMSАдресаты.Ссылка = СообщениеSMS.Ссылка
		|			И (СообщениеSMS.SMS4B_ТипСообщения = ЗНАЧЕНИЕ(Перечисление.SMS4B_ТипыСообщений.Входящее))
		|			И СообщениеSMSАдресаты.SMS4B_ДатаЗавершения > &ДатаПроверки
		|			И СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.SMS4B_ПолученоЧастично)
		|			И СообщениеSMSАдресаты.ИдентификаторСообщения В (&ИдентификаторыПолученныхСообщений)";
		
		Запрос.УстановитьПараметр("ДатаПроверки", РезультатПолучения.ДатаПолученияСообщений - 86400);
		ИдентификаторыПолученныхСообщений = Новый Массив;
		Для Каждого ПолученноеСообщение Из РезультатПолучения.ПолученныеСообщения Цикл
			ИдентификаторыПолученныхСообщений.Добавить(ПолученноеСообщение.ИдентификаторСообщения);
		КонецЦикла;
		Запрос.УстановитьПараметр("ИдентификаторыПолученныхСообщений", ИдентификаторыПолученныхСообщений);
		
		РезультатЗапроса = Запрос.Выполнить();
		ЗаписанныеСообщения = РезультатЗапроса.Выгрузить();
		ИскатьВЧастичноПолученныхСообщениях = Не РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	Для Каждого ПолученноеСообщение Из РезультатПолучения.ПолученныеСообщения Цикл
		
		Если ИскатьВЧастичноПолученныхСообщениях Тогда
			НайденноеСообщение = ЗаписанныеСообщения.Найти(ПолученноеСообщение.ИдентификаторСообщения, "ИдентификаторСообщения");
		Иначе
			НайденноеСообщение = Неопределено;
		КонецЕсли;
		
		Если НайденноеСообщение = Неопределено Тогда
			
			СообщениеОбъект = Документы.СообщениеSMS.СоздатьДокумент();
			СообщениеОбъект.Дата					= ТекущаяДатаСеанса();
			СообщениеОбъект.Важность				= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			СообщениеОбъект.Автор 					= Пользователи.ТекущийПользователь();
			СообщениеОбъект.Ответственный			= СообщениеОбъект.Автор;
			СообщениеОбъект.Тема					= Взаимодействия.ТемаПоТекстуСообщения(ПолученноеСообщение.ТекстСообщения);
			СообщениеОбъект.ТекстСообщения			= ПолученноеСообщение.ТекстСообщения;
			
			СообщениеОбъект.SMS4B_ТипСообщения		= Перечисления.SMS4B_ТипыСообщений.Входящее;
			СообщениеОбъект.SMS4B_ИмяОтправителя	= ПолученноеСообщение.Отправитель;
			
			СообщениеСтрока = СообщениеОбъект.Адресаты.Добавить();
			СообщениеСтрока.ПредставлениеКонтакта	= ПолученноеСообщение.Получатель;
			СообщениеСтрока.НомерДляОтправки		= ПолученноеСообщение.Получатель;
			СообщениеСтрока.КакСвязаться			= ПолученноеСообщение.Получатель;
			СообщениеСтрока.ИдентификаторСообщения	= ПолученноеСообщение.ИдентификаторСообщения;
			СообщениеСтрока.SMS4B_ТекстСообщения	= ПолученноеСообщение.ТекстСообщения;
			
		Иначе
			
			СообщениеОбъект = НайденноеСообщение.Ссылка.ПолучитьОбъект();
			СообщениеОбъект.ТекстСообщения			= СообщениеОбъект.ТекстСообщения + ПолученноеСообщение.ТекстСообщения;
			
			СообщениеСтрока =  СообщениеОбъект.Адресаты[0];
			СообщениеСтрока.SMS4B_ТекстСообщения	= СообщениеСтрока.SMS4B_ТекстСообщения + ПолученноеСообщение.ТекстСообщения;
			
		КонецЕсли;
		
		СообщениеСтрока.SMS4B_ДатаЗавершения			= ПолученноеСообщение.ДатаПолучения;
		СообщениеСтрока.SMS4B_МиллисекундаЗавершения	= ПолученноеСообщение.МиллисекундаПолучения;
		
		Если ПолученноеСообщение.ТекущаяЧасть < ПолученноеСообщение.ВсегоЧастей Тогда
			СообщениеСтрока.СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.SMS4B_ПолученоЧастично;
			СообщениеОбъект.Состояние			= Перечисления.СостоянияДокументаСообщениеSMS.SMS4B_ПолученоЧастично;
		Иначе
			СообщениеСтрока.СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.SMS4B_Получено;
			СообщениеОбъект.Состояние			= Перечисления.СостоянияДокументаСообщениеSMS.SMS4B_Получено;
			ДатаПолученияСообщений = ПолученноеСообщение.ДатаПолучения;
			МиллисекундаПолученияСообщений = ПолученноеСообщение.МиллисекундаПолучения;
		КонецЕсли; 
		
		Попытка
			СообщениеОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Взаимодействия';en='Interactions'"), УровеньЖурналаРегистрации.Предупреждение, , ,
			НСтр("ru = 'Не удалось записать входящее сообщение от номера: " + ПолученноеСообщение.Получатель + "'"));
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	Константы.SMS4B_ДатаПолученияСообщений.Установить(ДатаПолученияСообщений);
	Константы.SMS4B_МиллисекундаПолученияСообщений.Установить(МиллисекундаПолученияСообщений);
	
КонецПроцедуры

// Методы, совместимые с БСП, подсистема "Взаимодействия".

Функция ОтправкаSMSПоДокументу(Документ) Экспорт
	
	Если Не SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		Возврат Взаимодействия.ОтправкаSMSПоДокументу(Документ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выполнены настройки отправки SMS.';en='Settings of SMS sending are not executed.'"),,"Объект");
		ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(Документ);
		Возврат 0;
	КонецЕсли;
	
	НомераПолучателей = Документ.Адресаты.Выгрузить(,"НомерДляОтправки, SMS4B_ТекстСообщения");
	НомераПолучателей.Колонки.НомерДляОтправки.Имя = "НомерПолучателя";
	НомераПолучателей.Колонки.SMS4B_ТекстСообщения.Имя = "Текст";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РавномернаяРассылка",			Документ.SMS4B_РавномернаяРассылка);
	ДополнительныеПараметры.Вставить("ДатаОтправки",				Документ.ДатаКогдаОтправить);
	ДополнительныеПараметры.Вставить("ДатаАктуальностиОтправки",	Документ.ДатаАктуальностиОтправки);
	
	РезультатОтправки = SMS4B_ОтправкаSMS.ОтправитьSMS(НомераПолучателей, Документ.ТекстСообщения, Документ.SMS4B_ИмяОтправителя, Документ.ОтправлятьВТранслите, ДополнительныеПараметры);
	
	ОтразитьРезультатыОтправкиSMSВДокументе(Документ, РезультатОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОтправки.ОписаниеОшибки,,"Документ");
	КонецЕсли;
	
	Возврат РезультатОтправки.ОтправленныеСообщения.Количество();
	
КонецФункции

Процедура ПроверитьСтатусыДоставкиSMS(СообщениеSMS, Модифицированность) Экспорт
	
	Если Не SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		Взаимодействия.ПроверитьСтатусыДоставкиSMS(СообщениеSMS, Модифицированность);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.НомерСтроки,
	|	СообщениеSMSАдресаты.ИдентификаторСообщения,
	|	СообщениеSMSАдресаты.СостояниеСообщения
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	СообщениеSMSАдресаты.Ссылка = &СообщениеSMS
	|	И СообщениеSMSАдресаты.ИдентификаторСообщения <> """"
	|	И (СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправляетсяПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправленоПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера))";
	
	Запрос.УстановитьПараметр("СообщениеSMS", СообщениеSMS.Ссылка);
	
	ЕстьИзменения = Ложь;
	
	ТаблицаСообщений = Запрос.Выполнить().Выгрузить();
	СтатусыДоставки = SMS4B_ОтправкаSMS.SMS4B_СтатусыДоставки(ТаблицаСообщений.ВыгрузитьКолонку("ИдентификаторСообщения"));
	
	Для Каждого СтрокаСтатуса Из СтатусыДоставки Цикл
		
		СостояниеСообщения = СостояниеСообщенияSMSСогласноСтатусуДоставки(СтрокаСтатуса.СтатусДоставки);
		НайденноеСообщение = ТаблицаСообщений.Найти(СтрокаСтатуса.ИдентификаторСообщения, "ИдентификаторСообщения");
		Если НайденноеСообщение <> Неопределено Тогда
			Если СостояниеСообщения <> НайденноеСообщение.СостояниеСообщения Тогда
				СообщениеSMS.Адресаты[НайденноеСообщение.НомерСтроки - 1].СостояниеСообщения = СостояниеСообщения;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		СообщениеSMS.SMS4B_СтатусСтрокой = СтатусДокументаСтрокой(СообщениеSMS);
		СообщениеSMS.Состояние = СостояниеДокументаСообщениеSMS(СообщениеSMS);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаSMS() Экспорт
	
	Если Не SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		Взаимодействия.ОтправкаSMS();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаSMS);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru='Не выполнены настройки отправки SMS.';en='Settings of SMS sending are not executed.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.СообщениеSMS;
	
	ТаблицаАдресатовСообщения = Новый ТаблицаЗначений;
	ТаблицаАдресатовСообщения.Колонки.Добавить("НомерПолучателя");
	ТаблицаАдресатовСообщения.Колонки.Добавить("Текст");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMS.Ссылка КАК Ссылка,
	|	СообщениеSMS.ТекстСообщения               КАК ТекстПоУмолчанию,
	|	СообщениеSMSАдресаты.SMS4B_ТекстСообщения КАК Текст,
	|	СообщениеSMSАдресаты.НомерДляОтправки     КАК НомерПолучателя,
	|	СообщениеSMS.ОтправлятьВТранслите         КАК ОтправлятьВТранслите,
	|	СообщениеSMS.SMS4B_ИмяОтправителя         КАК ИмяОтправителя,
	|	СообщениеSMS.SMS4B_РавномернаяРассылка    КАК РавномернаяРассылка,
	|	СообщениеSMS.ДатаКогдаОтправить           КАК ДатаОтправки,
	|	СообщениеSMS.ДатаАктуальностиОтправки     КАК ДатаАктуальностиОтправки
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеSMS КАК СообщениеSMS
	|		ПО СообщениеSMSАдресаты.Ссылка = СообщениеSMS.Ссылка
	|ГДЕ
	|	СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.Исходящее)
	|	И НЕ СообщениеSMS.ПометкаУдаления
	|	И СообщениеSMSАдресаты.ИдентификаторСообщения = """"
	|	И ВЫБОР
	|			КОГДА СообщениеSMS.ДатаКогдаОтправить <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СообщениеSMS.ДатаКогдаОтправить < &ТекущаяДата
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СообщениеSMS.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СообщениеSMS.ДатаАктуальностиОтправки > &ТекущаяДата
	|		КОНЕЦ
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДокументы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументы.Следующий() Цикл
		
		ТаблицаАдресатовСообщения.Очистить();
		
		ВыборкаАдресаты = ВыборкаДокументы.Выбрать();
		Пока ВыборкаАдресаты.Следующий() Цикл
			
			ТекстПоУмолчанию         = ВыборкаАдресаты.ТекстПоУмолчанию;
			ОтправлятьВТранслите     = ВыборкаАдресаты.ОтправлятьВТранслите;
			
			ИмяОтправителя           = ВыборкаАдресаты.ИмяОтправителя;
			РавномернаяРассылка      = ВыборкаАдресаты.РавномернаяРассылка;
			ДатаОтправки             = ВыборкаАдресаты.ДатаОтправки;
			ДатаАктуальностиОтправки = ВыборкаАдресаты.ДатаАктуальностиОтправки;
			
			НоваяСтрока = ТаблицаАдресатовСообщения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаАдресаты);
			
		КонецЦикла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РавномернаяРассылка",			РавномернаяРассылка);
		ДополнительныеПараметры.Вставить("ДатаОтправки",				ДатаОтправки);
		ДополнительныеПараметры.Вставить("ДатаАктуальностиОтправки",	ДатаАктуальностиОтправки);
		
		Если ТаблицаАдресатовСообщения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(МетаданныеДокумента.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокументы.Ссылка);
			Блокировка.Заблокировать();
		
			РезультатОтправки = SMS4B_ОтправкаSMS.ОтправитьSMS(ТаблицаАдресатовСообщения, ТекстПоУмолчанию, ИмяОтправителя, ОтправлятьВТранслите, ДополнительныеПараметры);
			
			Если РезультатОтправки.ОтправленныеСообщения.Количество() = 0 Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
			ОтразитьРезультатыОтправкиSMSВДокументе(ДокументОбъект, РезультатОтправки);
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
			ДокументОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось отправить : %Ссылка% по причине: %Причина%';en='Failed to send:%Ссылка% for reason:%Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаДокументы.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеДокумента,
			                         ВыборкаДокументы.Ссылка,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновлениеСтатусовДоставкиSMS() Экспорт
	
	Если Не SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		Взаимодействия.ОбновлениеСтатусовДоставкиSMS();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru='Не выполнены настройки отправки SMS.';en='Settings of SMS sending are not executed.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.СообщениеSMS;
	
	ТаблицаИзменившихсяСтатусов = Новый ТаблицаЗначений;
	ТаблицаИзменившихсяСтатусов.Колонки.Добавить("НомерСтроки");
	ТаблицаИзменившихсяСтатусов.Колонки.Добавить("СостояниеСообщения");
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("НомерСтроки");
	ТаблицаСообщений.Колонки.Добавить("ИдентификаторСообщения");
	ТаблицаСообщений.Колонки.Добавить("СостояниеСообщения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.Ссылка КАК Ссылка,
	|	СообщениеSMSАдресаты.НомерСтроки,
	|	СообщениеSMSАдресаты.ИдентификаторСообщения,
	|	СообщениеSMSАдресаты.СостояниеСообщения
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	СообщениеSMSАдресаты.ИдентификаторСообщения <> """"
	|	И (СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправляетсяПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправленоПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера))
	|	И НЕ СообщениеSMSАдресаты.Ссылка.ПометкаУдаления
	|ИТОГИ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДокументы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументы.Следующий() Цикл
		
		ТаблицаИзменившихсяСтатусов.Очистить();
		ТаблицаСообщений.Очистить();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(МетаданныеДокумента.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокументы.Ссылка);
			Блокировка.Заблокировать();
			
			ВыборкаИдентификаторы = ВыборкаДокументы.Выбрать();
			Пока ВыборкаИдентификаторы.Следующий() Цикл
				НоваяСтрока = ТаблицаСообщений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИдентификаторы);
			КонецЦикла;
			
			СтатусыДоставки = SMS4B_ОтправкаSMS.SMS4B_СтатусыДоставки(ТаблицаСообщений.ВыгрузитьКолонку("ИдентификаторСообщения"));
			Для Каждого СтрокаСтатуса Из СтатусыДоставки Цикл
				
				СостояниеСообщения = СостояниеСообщенияSMSСогласноСтатусуДоставки(СтрокаСтатуса.СтатусДоставки);
				НайденноеСообщение = ТаблицаСообщений.Найти(СтрокаСтатуса.ИдентификаторСообщения, "ИдентификаторСообщения");
				Если НайденноеСообщение <> Неопределено Тогда
					Если СостояниеСообщения <> НайденноеСообщение.СостояниеСообщения Тогда
						НоваяСтрока = ТаблицаИзменившихсяСтатусов.Добавить();
						НоваяСтрока.НомерСтроки        = НайденноеСообщение.НомерСтроки;
						НоваяСтрока.СостояниеСообщения = СостояниеСообщения;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаИзменившихсяСтатусов.Количество() = 0 Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИзменившийсяСтатус Из ТаблицаИзменившихсяСтатусов Цикл
				ДокументОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Адресаты[ИзменившийсяСтатус.НомерСтроки - 1].СостояниеСообщения = ИзменившийсяСтатус.СостояниеСообщения;
			КонецЦикла;
			
			ДокументОбъект.SMS4B_СтатусСтрокой = СтатусДокументаСтрокой(ДокументОбъект);
			ДокументОбъект.Состояние = СостояниеДокументаСообщениеSMS(ДокументОбъект);
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
			ДокументОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обновить статусы доставки : %Ссылка% по причине: %Причина%';en='Could not update delivery status: %Ссылка% for reason:%Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаДокументы.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеДокумента,
			                         ВыборкаДокументы.Ссылка,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФункциональностьФорм

Процедура SMS4B_ФормаНастроекПриСозданииНаСервере(Форма) Экспорт
	
	// Создание команд и элементов для настройки сервиса.
	ИмяКонтейнераФормы		= "SMS4B_ГруппаНастроек";
	ИмяКомандыНастроек		= "SMS4B_РасширенныеНастройки";
	ИмяКомандыОписания		= "SMS4B_Описание";
	
	ЗаголовокКомандыНастроек = НСтр("ru='Расширенные настройки';en='Advanced settings'");
	ЗаголовокКомандыОписания = НСтр("ru='Узнать о возможностях';en='Learn about the features'");
	
	ПодсказкаНастроек = НСтр("ru='Открыть расширенные настройки сервиса SMS4B';en='Open advanced SMS4B service settings'");
	ПодсказкаОписания = НСтр("ru='Узнать больше о расширенных возможностях SMS4B для бизнеса';en='Learn more about the advanced features of SMS4B for business'");
	
	КомандаНастроек = Форма.Команды.Добавить(ИмяКомандыНастроек);
	КомандаНастроек.Действие = "Подключаемый_SMS4B_ОткрытьРасширенныеНастройки";
	КомандаНастроек.Заголовок = ЗаголовокКомандыНастроек;
	КомандаНастроек.Подсказка				= ПодсказкаНастроек;
	КомандаНастроек.Картинка				= БиблиотекаКартинок.SMS4B_Настройки;
	
	КомандаОписания = Форма.Команды.Добавить(ИмяКомандыОписания);
	КомандаОписания.Действие = "Подключаемый_SMS4B_ОткрытьОписаниеСервиса";
	КомандаОписания.Заголовок = ЗаголовокКомандыОписания;
	КомандаОписания.Подсказка				= ПодсказкаОписания;
	КомандаОписания.Картинка				= БиблиотекаКартинок.Информация;
	
	ГруппаНастроек = Форма.Элементы.Добавить(ИмяКонтейнераФормы, Тип("ГруппаФормы"));
	ГруппаНастроек.Вид						= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастроек.Группировка				= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаНастроек.Отображение				= ОтображениеОбычнойГруппы.Нет;
	ГруппаНастроек.ОтображатьЗаголовок		= Ложь;
	
	КнопкаНастроек = Форма.Элементы.Добавить(ИмяКомандыНастроек, Тип("КнопкаФормы"), ГруппаНастроек);
	КнопкаНастроек.Вид						= ВидКнопкиФормы.Гиперссылка;
	КнопкаНастроек.ИмяКоманды				= ИмяКомандыНастроек;
	
	КнопкаОписания = Форма.Элементы.Добавить(ИмяКомандыОписания, Тип("КнопкаФормы"), ГруппаНастроек);
	КнопкаОписания.Вид						= ВидКнопкиФормы.Гиперссылка;
	КнопкаОписания.ИмяКоманды				= ИмяКомандыОписания;
	
	// Настройка формы по выбранному провайдеру.
	ЭтоSMS4B = Форма.НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.SMS4B");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяКонтейнераФормы, "Видимость", ЭтоSMS4B);
	
	Если ЭтоSMS4B Тогда
		
		Форма.Элементы.ИмяОтправителя.РежимВыбораИзСписка = Истина;
		Форма.Элементы.ИмяОтправителя.РедактированиеТекста = Ложь;
		Форма.Элементы.ИмяОтправителя.УстановитьДействие("ОбработкаВыбора", "Подключаемый_SMS4B_ИмяОтправителяОбработкаВыбора");
		
		ИменаОтправителя = SMS4B_ОтправкаSMS.SMS4B_ПрочитатьНастройкиСервиса().ИменаОтправителя;
		Если ИменаОтправителя.Количество() > 0 Тогда
			Для Каждого Имя Из ИменаОтправителя Цикл
				Форма.Элементы.ИмяОтправителя.СписокВыбора.Добавить(Имя);
			КонецЦикла;
			Форма.Элементы.ИмяОтправителя.СписокВыбора.Добавить("SMS4B_Подключиться", НСтр("ru='Подключиться и обновить';en='Connect and update'"),, БиблиотекаКартинок.Обновить);
		Иначе
			Форма.Элементы.ИмяОтправителя.СписокВыбора.Добавить("SMS4B_Подключиться", НСтр("ru='Подключиться и заполнить';en='Connect and fill in'"),, БиблиотекаКартинок.Обновить);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура SMS4B_ФормаНастроекПровайдерПриИзменении(Форма) Экспорт
	
	// Настройка формы по выбранному провайдеру.
	ИмяКонтейнераФормы	= "SMS4B_ГруппаНастроек";
	ЭтоSMS4B = Форма.НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.SMS4B");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяКонтейнераФормы, "Видимость", ЭтоSMS4B);
	
	Форма.Элементы.ИмяОтправителя.РежимВыбораИзСписка = ЭтоSMS4B;
	Форма.Элементы.ИмяОтправителя.РедактированиеТекста = Не ЭтоSMS4B;
	
	Если ЭтоSMS4B Тогда
		Форма.Элементы.ИмяОтправителя.СписокВыбора.Добавить("SMS4B_Подключиться", НСтр("ru='Подключиться и заполнить';en='Connect and fill in'"),, БиблиотекаКартинок.Обновить);
		Форма.Элементы.ИмяОтправителя.УстановитьДействие("ОбработкаВыбора", "Подключаемый_SMS4B_ИмяОтправителяОбработкаВыбора");
	Иначе
		Форма.Элементы.ИмяОтправителя.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура SMS4B_СообщениеSMSОбработкаПолученияФормы(Источник, ВидФормы, Параметры,
					ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если Не SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		ВыбраннаяФорма = "Документ.СообщениеSMS.Форма.SMS4B_ФормаДокумента";
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		ВыбраннаяФорма = "Документ.СообщениеSMS.Форма.SMS4B_ФормаСписка";
	КонецЕсли;
	
КонецПроцедуры

Функция SMS4B_ТелефоныКонтакта(Контакт) Экспорт
	
	ТелефоныСписок = Новый СписокЗначений;
	
	ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контакт,,, Ложь);
	ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	Для Каждого Строка Из ТаблицаКонтактнойИнформации Цикл
		Если Строка.Тип = ТипКонтактнойИнформации Тогда
			КИЗначение = SMS4B_ОтправкаSMS.ФорматироватьНомер(Строка.Представление);
			КИПредставление = Строка.Представление;
			ТелефонысПисок.Добавить(КИЗначение, КИПредставление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТелефоныСписок;
	
КонецФункции

#КонецОбласти

#Область РаботаСАвтотекстом

Процедура SMS4B_СформироватьСписокАвтотекста(ТаблицаАвтотекста, НазначениеАвтотекста = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Назначение", НазначениеАвтотекста);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ШаблоныАвтотекста.Назначение,
	|	CRM_ШаблоныАвтотекста.Действие,
	|	CRM_ШаблоныАвтотекста.Представление
	|ИЗ
	|	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
	|ГДЕ
	|	CRM_ШаблоныАвтотекста.Назначение = &Назначение
	|	И НЕ CRM_ШаблоныАвтотекста.ПометкаУдаления
	|	И НЕ CRM_ШаблоныАвтотекста.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Ном = 0;
	Пока Выборка.Следующий() Цикл
		Ном = Ном + 1;
		НовыйТэг = ТаблицаАвтотекста.Добавить();
		НовыйТэг.Тэг					= "%" + Выборка.Представление + "%";
		НовыйТэг.ИмяКоманды				= "ВставитьТэг_" + Строка(Ном);
		НовыйТэг.ЗаголовокКоманды		= "%" + Выборка.Представление + "%";
		НовыйТэг.Действие				= Выборка.Действие;
	КонецЦикла;
	
КонецПроцедуры

Процедура SMS4B_ЗаполнитьКоманднуюПанельАвтотекста(Форма) Экспорт
	
	Для Каждого СтрокаАвтотекста ИЗ Форма.SMS4B_ТаблицаАвтотекста Цикл
		
		ИмяКоманды = "SMS4B_" + СтрокаАвтотекста.ИмяКоманды;
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
			НоваяКомандаФормы.Заголовок					= СтрокаАвтотекста.ЗаголовокКоманды;
			НоваяКомандаФормы.Действие					= "Подключаемый_SMS4B_ВставитьТэгАвтотекста";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		КонецЕсли;
		
		Если Форма.Элементы.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКнопкаФормы = Форма.Элементы.Вставить(ИмяКоманды, Тип("КнопкаФормы"), Форма.Элементы.SMS4B_АвтотекстСообщения);
			НоваяКнопкаФормы.ИмяКоманды					= ИмяКоманды;
			НоваяКнопкаФормы.Отображение					= ОтображениеКнопки.Текст;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(ТекстШаблона, Контакт, Знач ТаблицаАвтотекста) Экспорт
	
	СформированныйТекст = ТекстШаблона;
	
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		
		Если Найти(СформированныйТекст, СтрокаАвтотекста.Тэг) = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Тэг = СтрокаАвтотекста.Тэг;
		
		Действие = СтрокаАвтотекста.Действие;
		Результат = "";
		Объект = Контакт;
		Попытка
			Выполнить(Действие);
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка выполнения действия тега:';en='Run error of action of a tag:'") + Тэг + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		ЗначениеТэга = Результат;
		
		СформированныйТекст = СтрЗаменить(СформированныйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		
	КонецЦикла;
	
	Возврат СформированныйТекст;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Методы, совместимые с БСП, подсистема "Взаимодействия".

Процедура ОтразитьРезультатыОтправкиSMSВДокументе(ДокументОбъект, РезультатОтправки)
	
	Для Каждого ОтправленноеСообщение Из РезультатОтправки.ОтправленныеСообщения Цикл
		Для Каждого НайденнаяСтрока Из ДокументОбъект.Адресаты.НайтиСтроки(Новый Структура("НомерДляОтправки",ОтправленноеСообщение.НомерПолучателя)) Цикл
			НайденнаяСтрока.ИдентификаторСообщения = ОтправленноеСообщение.ИдентификаторСообщения;
			НайденнаяСтрока.СостояниеСообщения     = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
		КонецЦикла;
	КонецЦикла;
	
	ДокументОбъект.SMS4B_СтатусСтрокой = СтатусДокументаСтрокой(ДокументОбъект);
	ДокументОбъект.Состояние = СостояниеДокументаСообщениеSMS(ДокументОбъект);
	
КонецПроцедуры

Функция СостояниеДокументаСообщениеSMS(СообщениеSMS)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адресаты.СостояниеСообщения КАК Состояние
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	&Адресаты КАК Адресаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состояния.Состояние
	|ИЗ
	|	Состояния КАК Состояния";
	
	Запрос.УстановитьПараметр("Адресаты", СообщениеSMS.Адресаты.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
	КонецЕсли;
	
	ТекущийСтатус = Неопределено;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Исходящее Тогда
			
			Возврат  Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Черновик Тогда
			
			Возврат Перечисления.СостоянияСообщенияSMS.Черновик;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру Тогда
			
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером 
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
			Возврат Перечисления.СостоянияДокументаСообщениеSMS.Доставляется;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено
				 ИЛИ ТекущийСтатус = Неопределено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			КонецЕсли;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеДоставлено Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТекущийСтатус;

КонецФункции

Функция СостояниеСообщенияSMSСогласноСтатусуДоставки(СтатусДоставки)
	
	Если СтатусДоставки = "НеОтправлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером;
	ИначеЕсли СтатусДоставки = "Отправляется" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
	ИначеЕсли СтатусДоставки = "Отправлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером;
	ИначеЕсли СтатусДоставки = "НеДоставлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеДоставлено;
	ИначеЕсли СтатусДоставки = "Доставлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.Доставлено;
	ИначеЕсли СтатусДоставки = "НеОтправлялось" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером;
	ИначеЕсли СтатусДоставки = "Ошибка" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера;
	Иначе
		Возврат Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера;
	КонецЕсли;
	
КонецФункции

Функция СтатусДокументаСтрокой(Документ)
	
	ВсегоКоличество				= Документ.Адресаты.Количество();
	КоличествоОтправляемых		= 0;
	КоличествоВОчереди			= 0;
	КоличествоОтправленных		= 0;
	КоличествоНеОтправленных	= 0;
	КоличествоДоставленных		= 0;
	КоличествоНеДоставленных	= 0;
	КоличествоОшибок			= 0;
	
	Для Каждого Строка Из Документ.Адресаты Цикл
		Если Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ПустаяСсылка() Или
			 Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Черновик Тогда
			Продолжить;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Исходящее Тогда
			КоличествоОтправляемых = КоличествоОтправляемых + 1;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
			КоличествоНеОтправленных = КоличествоНеОтправленных + 1;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером Тогда
			КоличествоВОчереди = КоличествоВОчереди + 1;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером Тогда
			КоличествоОтправленных 	= КоличествоОтправленных + 1;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
			КоличествоДоставленных 	= КоличествоДоставленных + 1;
			КоличествоОтправленных 	= КоличествоОтправленных + 1;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеДоставлено Тогда
			КоличествоНеДоставленных = КоличествоНеДоставленных + 1;
			КоличествоОтправленных 	= КоличествоОтправленных + 1;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
		ИначеЕсли Строка.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтатусСтрокой = СтрЗаменить(НСтр("ru='Всего: %ВсегоКол%';en='In total %TotalNumber%'"), "%ВсегоКол%", ВсегоКоличество) + ";"
		+ ?((КоличествоВОчереди + КоличествоОтправленных + КоличествоНеОтправленных + КоличествоДоставленных 
		+ КоличествоНеДоставленных + КоличествоОшибок = 0), НСтр("ru = ' записано, но не отправлено'"), НСтр("ru = ' из них:'"))
		+ ?(КоличествоВОчереди = 0, "", НСтр("ru=' в очереди-';en='in a line-'") + КоличествоВОчереди + ";")
		+ ?(КоличествоОтправленных = 0, "", НСтр("ru = ' отправлено-'") + КоличествоОтправленных + ";")
		+ ?(КоличествоНеОтправленных = 0, "", НСтр("ru = ' не отправлено-'") + КоличествоНеОтправленных + ";")
		+ ?(КоличествоДоставленных = 0, "", НСтр("ru=' доставлено-';en='delivered-'") + КоличествоДоставленных + ";")
		+ ?(КоличествоНеДоставленных = 0, "", НСтр("ru = ' не доставлено-'") + КоличествоНеДоставленных + ";")
		+ ?(КоличествоОшибок = 0, "", НСтр("ru = ' ошибок-'") + КоличествоОшибок);
	
	Возврат СтатусСтрокой;
	
КонецФункции

Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт

	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.SMS4B_ПолучениеSMS;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;

КонецПроцедуры

#КонецОбласти

