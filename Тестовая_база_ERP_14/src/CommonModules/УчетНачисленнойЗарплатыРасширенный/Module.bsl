
#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы для авансовых расчетов.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками (не обязательно)
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета 
//			ОтработаноДней
//			ОтработаноЧасов
//			ОплаченоДней
//			ОплаченоЧасов.
//			ПериодДействия - не обязательно.
//			ДатаНачала - не обязательно.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьОтработанноеВремяАвансом(ДанныеДляПроведения, Отказ, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	Организация 		= ДанныеДляПроведения.Организация;
	
	Если Начисления.Колонки.Найти("ПериодДействия") = Неопределено Тогда
		Начисления.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
		Начисления.ЗаполнитьЗначения(ПериодРегистрации, "ПериодДействия");
	КонецЕсли;
	
	Для Каждого Строка Из Начисления Цикл
		
		НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникамАвансом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Период 		= ПериодРегистрации;
		НоваяСтрока.Организация = Организация;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
	КонецЦикла;
	
	Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Истина;
		
	Если ЗаписыватьДвижения Тогда
		Движения.ОтработанноеВремяПоСотрудникамАвансом.Записать();
		Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			Начисление
//			Сумма
//			ДокументОснование
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		Удержания - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			НачислениеУдержание
//			Сумма
//			ДокументОснование
//			Контрагент, не обязательно
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		НДФЛ - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			НачислениеУдержание
//			Сумма
//			ДокументОснование
//			РегистрацияВНалоговомОргане
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		СпособРасчетов - ПеречисленияСсылка.СпособыРасчетовСФизическимиЛицами, необязательный.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено, НДФЛ = Неопределено, СпособРасчетов = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	
	ТаблицаНачислений = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления("НачисленияУдержанияПоКонтрагентамАкционерам");
	ТаблицаУдержаний  = ТаблицаНачислений.СкопироватьКолонки();
	РегистрироватьВзаиморасчеты = (СпособРасчетов <> Неопределено);
	
	Если Начисления <> Неопределено Тогда
		
		Для Каждого Строка Из Начисления Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если Удержания <> Неопределено Тогда
		
		Для Каждого Строка Из Удержания Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУдержаний.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если НДФЛ <> Неопределено Тогда
		
		Для Каждого Строка Из НДФЛ Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = Строка.Подразделение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты      = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУдержаний.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
		
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записать();
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Ложь;
	КонецЕсли;
	
	Если РегистрироватьВзаиморасчеты Тогда
		ВзаиморасчетыПоПрочимДоходам.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, СпособРасчетов, ТаблицаНачислений, ТаблицаУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаНачисленияУдержанияПоСотрудникам() Экспорт
	
	МассивТиповНачислениеУдержание = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Измерения.НачислениеУдержание.Тип.Типы();
	МассивТиповДокументОснование = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Реквизиты.ДокументОснование.Тип.Типы();
	
	Таблица = Новый ТаблицаЗначений;

	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("НачислениеУдержание", Новый ОписаниеТипов(МассивТиповНачислениеУдержание));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ГруппаНачисленияУдержанияВыплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыНачисленияУдержанияВыплаты"));
	Таблица.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(МассивТиповДокументОснование));
	Таблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));

	Возврат Таблица;
	
КонецФункции

// Формирует движения по регистру ОтработанноеВремяПоСотрудникамКорректировка, 
// предназначенный для корректного учета отработанных дней при наличии более одного вида рабочего времени за день.
//
Процедура ЗарегистрироватьКорректировкиОтработанногоВремени(Движения, ЗаписыватьДвижения = Ложь) Экспорт
	
	// Если к этому моменту не была выполнена запись необходимых для чтения наборов записей, выполним ее.
	Если Движения.ОтработанноеВремяПоСотрудникам.Записывать Тогда
		Движения.ОтработанноеВремяПоСотрудникам.Записать();
		Движения.ОтработанноеВремяПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	Если Движения.Начисления.Записывать Тогда
		Движения.Начисления.Записать();
		Движения.Начисления.Записывать = Ложь;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Движения.ОтработанноеВремяПоСотрудникам.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникам.Период КАК ПериодРегистрации,
		|	ОтработанноеВремяПоСотрудникам.ПериодДействия КАК ПериодДействия,
		|	ОтработанноеВремяПоСотрудникам.ДатаНачала КАК ДатаНачала,
		|	ОтработанноеВремяПоСотрудникам.Организация КАК Организация,
		|	ОтработанноеВремяПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтработанноеВремяПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ОтработанноеВремяПоСотрудникам.Подразделение КАК Подразделение,
		|	ОтработанноеВремяПоСотрудникам.Начисление КАК Начисление,
		|	ОтработанноеВремяПоСотрудникам.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты
		|ПОМЕСТИТЬ ВТОтработанноеВремяПоДокументу
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникам.Регистратор = &Регистратор
		|	И ОтработанноеВремяПоСотрудникам.Начисление.ЗачетНормыВремени = ИСТИНА
		|	И ОтработанноеВремяПоСотрудникам.Начисление.ЗачетОтработанногоВремени = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтработанноеВремяПоСотрудникам.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФПДНачислений.Регистратор КАК Регистратор,
		|	ФПДНачислений.НомерСтроки КАК НомерСтроки,
		|	ФПДНачислений.Сторно КАК Сторно,
		|	ФПДНачислений.Сотрудник КАК Сотрудник,
		|	ФПДНачислений.ВидРасчета КАК ВидРасчета,
		|	ФПДНачислений.ПериодРегистрации КАК ПериодРегистрации,
		|	ФПДНачислений.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	ФПДНачислений.ПериодДействия КАК ПериодДействия,
		|	ФПДНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ФПДНачислений.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТФПДНачислений
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
		|				И ВидРасчета.ЗачетНормыВремени = ИСТИНА
		|				И (ПериодРегистрации, ПериодДействия, Сотрудник) В
		|					(ВЫБРАТЬ
		|						ВТОтработанноеВремяПоДокументу.ПериодРегистрации,
		|						ВТОтработанноеВремяПоДокументу.ПериодДействия,
		|						ВТОтработанноеВремяПоДокументу.Сотрудник
		|					ИЗ
		|						ВТОтработанноеВремяПоДокументу)) КАК ФПДНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПДНачислений.Сотрудник КАК Сотрудник,
		|	ФПДНачислений.ВидРасчета КАК Начисление,
		|	ФПДНачислений.Сторно КАК Сторно,
		|	ФПДНачислений.ПериодРегистрации КАК ПериодРегистрации,
		|	ФПДНачислений.ПериодДействия КАК ПериодДействия,
		|	ФПДНачислений.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени,
		|	ФПДНачислений.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ФПДНачислений.ПериодДействияНачало КАК НачалоИнтервала,
		|	ФПДНачислений.ПериодДействияКонец КАК ОкончаниеИнтервала
		|ПОМЕСТИТЬ ВТПересекающиесяНачисления
		|ИЗ
		|	ВТФПДНачислений КАК ФПДНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО ФПДНачислений.Регистратор = Начисления.Регистратор
		|			И ФПДНачислений.НомерСтроки = Начисления.НомерСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ФПДПересечения
		|		ПО (ФПДПересечения.Сотрудник = ФПДНачислений.Сотрудник)
		|			И (ФПДПересечения.Сторно = ФПДНачислений.Сторно)
		|			И (ФПДПересечения.ПериодРегистрации = ФПДНачислений.ПериодРегистрации)
		|			И (ФПДПересечения.ВидРасчета <> ФПДНачислений.ВидРасчета)
		|			И (ФПДПересечения.Регистратор <> ФПДНачислений.Регистратор
		|				ИЛИ ФПДПересечения.НомерСтроки <> ФПДНачислений.НомерСтроки)
		|			И (ФПДПересечения.ПериодДействияНачало <= ФПДНачислений.ПериодДействияКонец)
		|			И (ФПДПересечения.ПериодДействияКонец >= ФПДНачислений.ПериодДействияНачало)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пересечения.Сотрудник КАК Сотрудник,
		|	Пересечения.ПериодРегистрации КАК ДатаАктуальности,
		|	Пересечения.ПериодДействия КАК Месяц,
		|	НАЧАЛОПЕРИОДА(Пересечения.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(Пересечения.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиДляРасчетаВремени
		|ИЗ
		|	ВТПересекающиесяНачисления КАК Пересечения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСотрудникиДляРасчетаВремени КАК Сотрудники";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанныхОВремени = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников();
	ПараметрыПолученияДанныхОВремени.ИмяВТСотрудники = "ВТСотрудникиДляРасчетаВремени";
	
	// Для полученных пересечений периодов, нужно определить фактическое рабочее время (количество дней).
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаРабочегоВремениСотрудников(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанныхОВремени);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ПересекающиесяНачисления.НачалоИнтервала КАК НачалоИнтервала,
		|	ПересекающиесяНачисления.ВидУчетаВремени КАК ВидУчетаВремени
		|ПОМЕСТИТЬ ВТНетДанныхПоВидуУчетаВремени
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|ГДЕ
		|	ФактическоеВремя.ВидУчетаВремени ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|	ПересекающиесяНачисления.Начисление КАК Начисление,
		|	ПересекающиесяНачисления.Начисление.РеквизитДопУпорядочивания КАК ИндексНачисления,
		|	ПересекающиесяНачисления.Сторно КАК Сторно,
		|	ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия КАК ПериодДействия,
		|	ПересекающиесяНачисления.ПериодДействияНачало КАК НачалоИнтервала,
		|	ФактическоеВремя.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДанныеПоДням
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|			И (ФактическоеВремя.Дата МЕЖДУ ПересекающиесяНачисления.НачалоИнтервала И ПересекающиесяНачисления.ОкончаниеИнтервала)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.Начисление,
		|	ПересекающиесяНачисления.Начисление.РеквизитДопУпорядочивания,
		|	ПересекающиесяНачисления.Сторно,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия,
		|	ПересекающиесяНачисления.ПериодДействияНачало,
		|	ФактическоеВремя.Дата
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = &РабочееВремя)
		|			И (ФактическоеВремя.Дата МЕЖДУ ПересекающиесяНачисления.НачалоИнтервала И ПересекающиесяНачисления.ОкончаниеИнтервала)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНетДанныхПоВидуУчетаВремени КАК НетДанныхПоВидуУчетаВремени
		|		ПО (НетДанныхПоВидуУчетаВремени.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (НетДанныхПоВидуУчетаВремени.ПериодРегистрации = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (НетДанныхПоВидуУчетаВремени.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия КАК ПериодДействия,
		|	ПересекающиесяНачисления.Дата КАК Дата,
		|	ПересекающиесяНачисления.Сторно КАК Сторно,
		|	МИНИМУМ(ПересекающиесяНачисления.ИндексНачисления) КАК ИндексНачисления
		|ПОМЕСТИТЬ ВТПриоритетыНачислений
		|ИЗ
		|	ВТДанныеПоДням КАК ПересекающиесяНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия,
		|	ПересекающиесяНачисления.Дата,
		|	ПересекающиесяНачисления.Сторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник КАК Сотрудник,
		|	НеобходимыеКорректировки.Начисление КАК Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации КАК ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия КАК ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала КАК ДатаНачала,
		|	НеобходимыеКорректировки.Сторно КАК Сторно,
		|	ВЫБОР
		|		КОГДА НеобходимыеКорректировки.Сторно
		|			ТОГДА -НеобходимыеКорректировки.КорректировкаДней
		|		ИНАЧЕ НеобходимыеКорректировки.КорректировкаДней
		|	КОНЕЦ КАК КорректировкаДней
		|ПОМЕСТИТЬ ВТНеобходимыеКорректировки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|		ПересекающиесяНачисления.Начисление КАК Начисление,
		|		ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|		ПересекающиесяНачисления.ПериодДействия КАК ПериодДействия,
		|		ПересекающиесяНачисления.НачалоИнтервала КАК ДатаНачала,
		|		ПересекающиесяНачисления.Сторно КАК Сторно,
		|		КОЛИЧЕСТВО(ПересекающиесяНачисления.Дата) КАК КорректировкаДней
		|	ИЗ
		|		ВТДанныеПоДням КАК ПересекающиесяНачисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыНачислений КАК ПриоритетыНачислений
		|			ПО ПересекающиесяНачисления.Сотрудник = ПриоритетыНачислений.Сотрудник
		|				И ПересекающиесяНачисления.Сторно = ПриоритетыНачислений.Сторно
		|				И ПересекающиесяНачисления.ПериодРегистрации = ПриоритетыНачислений.ПериодРегистрации
		|				И ПересекающиесяНачисления.ПериодДействия = ПриоритетыНачислений.ПериодДействия
		|				И ПересекающиесяНачисления.Дата = ПриоритетыНачислений.Дата
		|				И ПересекающиесяНачисления.ИндексНачисления <> ПриоритетыНачислений.ИндексНачисления
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПересекающиесяНачисления.Сотрудник,
		|		ПересекающиесяНачисления.Начисление,
		|		ПересекающиесяНачисления.ПериодРегистрации,
		|		ПересекающиесяНачисления.НачалоИнтервала,
		|		ПересекающиесяНачисления.ПериодДействия,
		|		ПересекающиесяНачисления.Сторно) КАК НеобходимыеКорректировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыполненныеКорректировки.Период КАК ПериодРегистрации,
		|	ВыполненныеКорректировки.ПериодДействия КАК ПериодДействия,
		|	ВыполненныеКорректировки.ДатаНачала КАК ДатаНачала,
		|	ВыполненныеКорректировки.Организация КАК Организация,
		|	ВыполненныеКорректировки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВыполненныеКорректировки.Сотрудник КАК Сотрудник,
		|	ВыполненныеКорректировки.Подразделение КАК Подразделение,
		|	ВыполненныеКорректировки.Начисление КАК Начисление,
		|	СУММА(ВыполненныеКорректировки.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ВыполненныеКорректировки.ОплаченоДней) КАК ОплаченоДней
		|ПОМЕСТИТЬ ВТВыполненныеКорректировки
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ВыполненныеКорректировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоДокументу КАК ОтработанноеВремяПоДокументу
		|		ПО (ОтработанноеВремяПоДокументу.Сотрудник = ВыполненныеКорректировки.Сотрудник)
		|			И (ОтработанноеВремяПоДокументу.ПериодРегистрации = ВыполненныеКорректировки.Период)
		|			И (ОтработанноеВремяПоДокументу.ПериодДействия = ВыполненныеКорректировки.ПериодДействия)
		|			И (ОтработанноеВремяПоДокументу.ДатаНачала = ВыполненныеКорректировки.ДатаНачала)
		|			И (ОтработанноеВремяПоДокументу.Начисление = ВыполненныеКорректировки.Начисление)
		|			И (ВыполненныеКорректировки.Регистратор <> &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыполненныеКорректировки.Период,
		|	ВыполненныеКорректировки.ПериодДействия,
		|	ВыполненныеКорректировки.ДатаНачала,
		|	ВыполненныеКорректировки.Организация,
		|	ВыполненныеКорректировки.ФизическоеЛицо,
		|	ВыполненныеКорректировки.Сотрудник,
		|	ВыполненныеКорректировки.Подразделение,
		|	ВыполненныеКорректировки.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник КАК Сотрудник,
		|	НеобходимыеКорректировки.Начисление КАК Начисление,
		|	НеобходимыеКорректировки.Сторно КАК Сторно,
		|	НеобходимыеКорректировки.ПериодРегистрации КАК ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия КАК ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала КАК ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней КАК КорректировкаДней
		|ИЗ
		|	ВТНеобходимыеКорректировки КАК НеобходимыеКорректировки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник КАК Сотрудник,
		|	НеобходимыеКорректировки.Начисление КАК Начисление,
		|	НеобходимыеКорректировки.Сторно КАК Сторно,
		|	НеобходимыеКорректировки.ПериодРегистрации КАК ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия КАК ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала КАК ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней КАК КорректировкаДней,
		|	ОтработанноеВремяПоДокументу.Подразделение КАК Подразделение,
		|	ОтработанноеВремяПоДокументу.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтработанноеВремяПоДокументу.Организация КАК Организация,
		|	ОтработанноеВремяПоДокументу.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты,
		|	ОтработанноеВремяПоДокументу.ОтработаноДней КАК ОтработаноДнейЗарегистрировано,
		|	ОтработанноеВремяПоДокументу.ОплаченоДней КАК ОплаченоДнейЗарегистрировано,
		|	ЕСТЬNULL(ВыполненныеКорректировки.ОтработаноДней, 0) КАК ОтработаноДнейКорректировка,
		|	ЕСТЬNULL(ВыполненныеКорректировки.ОплаченоДней, 0) КАК ОплаченоДнейКорректировка
		|ИЗ
		|	ВТНеобходимыеКорректировки КАК НеобходимыеКорректировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоДокументу
		|		ПО (ОтработанноеВремяПоДокументу.Сотрудник = НеобходимыеКорректировки.Сотрудник)
		|			И (ОтработанноеВремяПоДокументу.Начисление = НеобходимыеКорректировки.Начисление)
		|			И (ОтработанноеВремяПоДокументу.Период = НеобходимыеКорректировки.ПериодРегистрации)
		|			И (ОтработанноеВремяПоДокументу.ПериодДействия = НеобходимыеКорректировки.ПериодДействия)
		|			И (ОтработанноеВремяПоДокументу.ДатаНачала = НеобходимыеКорректировки.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполненныеКорректировки КАК ВыполненныеКорректировки
		|		ПО (ВыполненныеКорректировки.Сотрудник = НеобходимыеКорректировки.Сотрудник)
		|			И (ВыполненныеКорректировки.Начисление = НеобходимыеКорректировки.Начисление)
		|			И (ВыполненныеКорректировки.Подразделение = ОтработанноеВремяПоДокументу.Подразделение)
		|			И (ВыполненныеКорректировки.ПериодРегистрации = НеобходимыеКорректировки.ПериодРегистрации)
		|			И (ВыполненныеКорректировки.ДатаНачала = НеобходимыеКорректировки.ДатаНачала)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Для обхода используем две выборки: 
	// - первая - это необходимые корректировки
	// - вторая - развернутые по подразделениям значения зарегистрированного времени и уже выполненные корректировки
	// нужна для уточненного заполнения подразделений, сведения о которых теряются в регистре расчета.
	
	ВыборкаКорректировок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	СтруктураПоиска = Новый Структура("Сотрудник, Начисление, ПериодРегистрации, ПериодДействия, ДатаНачала, Сторно");
	Пока ВыборкаКорректировок.Следующий() Цикл
		// Количество дней, которые нужно в целом по этому виду расчета скорректировать.
		КорректировкаПоНачислению = ВыборкаКорректировок.КорректировкаДней;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаКорректировок);
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			// Если строка с признаком сторно применяем обратные правила арифметики.
			// НеобходимаяКорректировка - значение, которое всего по этой строке предполагалось записать без учета уже ранее
			//                            выполненных корректировок.
			// КорректировкаПоСтроке - значение по этой строке с учетом ранее выполненных корректировок.
			Если ВыборкаКорректировок.Сторно Тогда
				НеобходимаяКорректировка = Макс(КорректировкаПоНачислению, Выборка.ОтработаноДнейЗарегистрировано);
				КорректировкаПоСтроке = Мин(НеобходимаяКорректировка - Выборка.ОтработаноДнейКорректировка, 0);
			Иначе
				НеобходимаяКорректировка = Мин(КорректировкаПоНачислению, Выборка.ОтработаноДнейЗарегистрировано);
				КорректировкаПоСтроке = Макс(НеобходимаяКорректировка - Выборка.ОтработаноДнейКорректировка, 0);
			КонецЕсли;
			
			// Уменьшаем остаток корректируемых дней.
			КорректировкаПоНачислению = КорректировкаПоНачислению - НеобходимаяКорректировка;
			
			Если КорректировкаПоСтроке = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникамКорректировка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Период = Выборка.ПериодРегистрации;
			НоваяСтрока.ОтработаноДней = - КорректировкаПоСтроке;
			НоваяСтрока.ОплаченоДней = - КорректировкаПоСтроке;
			
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать Тогда
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записать();
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует сторно записи отменяющие движения исправляемого документа по регистрам подсистемы.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент	 - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  Записывать				 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, Записывать = Ложь) Экспорт
	
	ВзаиморасчетыССотрудникамиРасширенный.СторнироватьНачисленнуюЗарплату(Движения, ИсправленныйДокумент,, Записывать);
	
КонецПроцедуры

// См. УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛИКорректировкиВыплаты
Процедура ЗарегистрироватьНДФЛИКорректировкиВыплаты(ДанныеДляПроведения, Отказ, НДФЛПоСотрудникам, КорректировкиВыплатыПоСотрудникам, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		РезультатРасчетаНДФЛ 	= НДФЛПоСотрудникам;
		КорректировкиВыплаты    = КорректировкиВыплатыПоСотрудникам;
	Иначе
		РезультатыРаспределения = РезультатыРаспределенияНДФЛИКорректировокВыплаты(ДанныеДляПроведения, НДФЛПоСотрудникам, КорректировкиВыплатыПоСотрудникам);
		РезультатРасчетаНДФЛ 	= РезультатыРаспределения.РаспределениеНДФЛ;
		КорректировкиВыплаты    = РезультатыРаспределения.РаспределениеКорректировок;
	КонецЕсли;
	
	Если РезультатРасчетаНДФЛ <> Неопределено Тогда
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(ДанныеДляПроведения, Отказ, РезультатРасчетаНДФЛ, ЗаписыватьДвижения);
	КонецЕсли;
	Если КорректировкиВыплаты <> Неопределено Тогда
		УчетНачисленнойЗарплаты.ЗарегистрироватьКорректировкиВыплаты(ДанныеДляПроведения, Отказ, КорректировкиВыплаты, ЗаписыватьДвижения);
	КонецЕсли;

КонецПроцедуры

// Выполняет регистрацию в учете удержаний и займов.
// Параметры:
// 	ДанныеДляПроведения - Структура - см. ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения.
// 	Отказ               - Булево
// 	Удержания           - ТаблицаЗначений
// 	ПогашениеЗаймов     - ТаблицаЗначений
// 	НДФЛМатВыгода       - ТаблицаЗначений
// 	ЗаписыватьДвижения  - Булево.
// 
Процедура ЗарегистрироватьУдержанияИЗаймы(ДанныеДляПроведения, Отказ, Удержания, ПогашениеЗаймов, НДФЛМатВыгода, ЗаписыватьДвижения = Ложь) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		НалогНаМатериальнуюВыгоду	= НДФЛМатВыгода;
		УдержанияЗаймов    			= ПогашениеЗаймов;
		УдержанияПоСотрудникам    	= Удержания;
	Иначе
		РезультатыРаспределения 	= РезультатРаспределенияУдержанийИЗаймов(ДанныеДляПроведения, Удержания, ПогашениеЗаймов, НДФЛМатВыгода);
		НалогНаМатериальнуюВыгоду	= РезультатыРаспределения.НалогНаМатериальнуюВыгоду;
		УдержанияЗаймов    			= РезультатыРаспределения.УдержанияЗаймов;
		УдержанияПоСотрудникам    	= РезультатыРаспределения.УдержанияПоСотрудникам;
	КонецЕсли;
	
	Если НалогНаМатериальнуюВыгоду <> Неопределено Тогда
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(ДанныеДляПроведения, Отказ, НалогНаМатериальнуюВыгоду, ЗаписыватьДвижения);
	КонецЕсли;
	
	Если УдержанияЗаймов <> Неопределено Тогда
		ЗарегистрироватьПогашениеЗаймов(ДанныеДляПроведения, Отказ, УдержанияЗаймов, ЗаписыватьДвижения);
	КонецЕсли;
	
	Если УдержанияПоСотрудникам <> Неопределено Тогда
		Если ДанныеДляПроведения.Авансом Тогда
			ЗарегистрироватьУдержанияАвансом(ДанныеДляПроведения, Отказ, УдержанияПоСотрудникам, ЗаписыватьДвижения);
		Иначе	
			УчетНачисленнойЗарплаты.ЗарегистрироватьУдержания(ДанныеДляПроведения, Отказ, УдержанияПоСотрудникам, ЗаписыватьДвижения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, описание см ДанныеДляПроведения()
//		Начисления - регистрируемые начисления.
//					Если передано Неопределено, то начисления не регистрируются.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//					если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьНачисленияАвансом(ДанныеДляПроведения, Отказ, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	Организация 		= ДанныеДляПроведения.Организация;
	
	СтрокиНачислений = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		
		НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникамАвансом.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.ПериодДействия		= ПериодРегистрации;
		НоваяСтрока.Организация			= Организация;
		НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
		
		СтрокиНачислений.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записать();
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	НачисленияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	Для Каждого Строка Из СтрокиНачислений Цикл
		НоваяСтрока = НачисленияДляВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
		Движения, Отказ, 
		Организация, ПериодРегистрации, 
		НачисленияДляВзаиморасчетов, Неопределено);
	
КонецПроцедуры

// Формирует временную таблицу ВТРаспределениеНачисленийТекущегоДокумента.
// Если ведется учет по статьям финансирования, формируется пустая таблица.
// Параметры:
// 	Движения                - КоллекцияДвижений
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - в который будет помещена
// 	                          таблица ВТРаспределениеНачисленийТекущегоДокумента,
// 	Авансом                 - Булево - признак регистрации авансовых выплат.
// 
Процедура СоздатьВТРаспределениеНачисленийТекущегоДокумента(ДанныеДляПроведения) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	Движения 				= ДанныеДляПроведения.Движения;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	Авансом 				= ДанныеДляПроведения.Авансом;
	
	Если Авансом Тогда
		ИмяТаблицыРегистра = "НачисленияУдержанияПоСотрудникамАвансом";
	Иначе
		ИмяТаблицыРегистра = "НачисленияУдержанияПоСотрудникам";
	КонецЕсли;
	
	ДвиженияНачисленийУдержаний = Движения[ИмяТаблицыРегистра];
	
	ТаблицаДокумента = ДвиженияНачисленийУдержаний.Выгрузить();
	
	Отбор = Новый Структура("ГруппаНачисленияУдержанияВыплаты,Период", Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, ПериодРегистрации);
	Начисления = ТаблицаДокумента.Скопировать(Отбор);
	
	Отбор.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
	НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		Если ТипЗнч(СтрокаТЗ.НачислениеУдержание) = Тип("ПланВидовРасчетаСсылка.Начисления") Или СтрокаТЗ.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов Тогда
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	Отбор.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы;
	НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРаспределениеНачисленийТекущегоДокумента") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТРаспределениеНачисленийТекущегоДокумента");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленияДокумента", Начисления);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДокумента.Сотрудник КАК Сотрудник,
	|	НачисленияДокумента.Подразделение КАК Подразделение,
	|	&ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияДокумента.НачислениеУдержание КАК НачислениеУдержание,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	НачисленияДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияДокумента.ДатаНачала КАК ДатаНачала,
	|	НачисленияДокумента.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачисленийТекущегоДокумента
	|ИЗ
	|	&НачисленияДокумента КАК НачисленияДокумента";
	
	Если Авансом Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТерриторияВыполненияРаботВОрганизации", "ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТерриторияВыполненияРаботВОрганизации", "НачисленияДокумента.ТерриторияВыполненияРаботВОрганизации");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры 

// Возвращает значение по умолчанию порядка учета договоров ГПХ, заданное в настройках.
//
//	Возвращаемое значение - тип ПеречислениеСсылка.СпособыРасчетовСФизическимиЛицами
//
Функция ПорядокУчетаДоговоровГПХ() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Возврат Перечисления.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка();
	КонецЕсли;
	
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	Если НастройкиРасчетаЗарплаты.ПорядокУчетаДоговоровГПХ = 1 Тогда
		Возврат Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами;
	ИначеЕсли НастройкиРасчетаЗарплаты.ПорядокУчетаДоговоровГПХ = 2 Тогда
		Возврат Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда;
	КонецЕсли;
	
КонецФункции

Функция НачисленныеОтпускаПоПериодамИВидам(Сотрудник, ВидыОтпусков, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	Если ИсключаемыеРегистраторы = Неопределено Тогда
		ИсключаемыеРегистраторы = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	Запрос.УстановитьПараметр("ВидыРасчетовОтпусков",
		ПланыВидовРасчета.Начисления.НачисленияПоОтбору(Новый Структура("ВидОтпуска", ВидыОтпусков)));
	
	РегистрыРасчета.Начисления.СоздатьВТРезультирующийПериодДействия(Запрос.МенеджерВременныхТаблиц,
		"ВидРасчета В (&ВидыРасчетовОтпусков)
		|И НЕ Регистратор В (&ИсключаемыеРегистраторы)
		|И Сотрудник = &Сотрудник",
		Запрос.Параметры, "*");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.Регистратор КАК СторнируемыйДокумент,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	Начисления.Активность КАК Активность,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Начисления.Результат КАК Результат,
	|	Начисления.ОтработаноДней КАК ОтработаноДней,
	|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
	|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
	|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
	|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|	Начисления.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериод,
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФиксСтрока КАК ФиксСтрока,
	|	Начисления.ФиксЗаполнение КАК ФиксЗаполнение,
	|	Начисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
	|	Начисления.ФиксРасчет КАК ФиксРасчет,
	|	Начисления.ФиксСторно КАК ФиксСторно,
	|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	Начисления.ДоляРезультата КАК ДоляРезультата,
	|	Начисления.Месяц КАК Месяц,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	ПоказателиНачислений.Показатель КАК Показатель,
	|	ВЫБОР
	|		КОГДА Начисления.ЭтоЧастьРПД
	|				И ПоказателиНачислений.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска)
	|			ТОГДА Начисления.КоличествоДнейРПД
	|		ИНАЧЕ ЕСТЬNULL(ЗначенияПоказателейНачислений.Значение, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	ВТРезультирующийПериодДействия КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО Начисления.ВидРасчета = ПоказателиНачислений.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО Начисления.Регистратор = ЗначенияПоказателейНачислений.Регистратор
	|			И (ПоказателиНачислений.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
	|ГДЕ
	|	НЕ Начисления.Сторно
	|	И НЕ Начисления.Регистратор В (&ИсключаемыеРегистраторы)
	|	И НЕ Начисления.ФиксСторно
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Регистратор,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействия УБЫВ,
	|	Начисления.ИдентификаторСтроки";
	
	РезультатыПоказателей = Запрос.Выполнить();
	
	ДанныеНачисленныхОтпусков = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	ДанныеНачисленныхОтпусков.Колонки.Добавить("ДатаНачалаОтпуска", Новый ОписаниеТипов("Дата"));
	ДанныеНачисленныхОтпусков.Колонки.Добавить("ДатаОкончанияОтпуска", Новый ОписаниеТипов("Дата"));
	
	НомерПоказателя = 0;
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	ТекущийПериодДействияНачало = Неопределено;
	
	Выборка = РезультатыПоказателей.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СторнируемыйДокумент") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
			Пока Выборка.Следующий() Цикл
				Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
					Или ТекущийРегистратор <> Выборка.СторнируемыйДокумент 
					Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
					
					НомерПоказателя = 1;
					НоваяСтрокаОтпуска = ДанныеНачисленныхОтпусков.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОтпуска, Выборка);
					НоваяСтрокаОтпуска.ДатаНачала = Выборка.ПериодДействияНачало;
					НоваяСтрокаОтпуска.ДатаОкончания = Выборка.ПериодДействияКонец;
					НоваяСтрокаОтпуска.ДатаНачалаОтпуска = Выборка.ПериодДействияНачало;
					НоваяСтрокаОтпуска.ДатаОкончанияОтпуска = Выборка.ПериодДействияКонец;
					НоваяСтрокаОтпуска.Начисление = Выборка.ВидРасчета;
					
				КонецЕсли;
				Если Выборка.Значение <> Неопределено Тогда
					НоваяСтрокаОтпуска["Показатель" + НомерПоказателя] = Выборка.Показатель;
					НоваяСтрокаОтпуска["Значение" + НомерПоказателя] = Выборка.Значение;
					НомерПоказателя = НомерПоказателя + 1;
				КонецЕсли;
				ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				ТекущийРегистратор = Выборка.СторнируемыйДокумент;
				ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеНачисленныхОтпусков.Сортировать("Начисление, ПериодДействия Убыв, ДатаНачалаОтпуска Убыв");
	Возврат ДанныеНачисленныхОтпусков;
	
КонецФункции

Функция ПравилаУчетаНачисленийСотрудников() Экспорт

	ПравилаУчетаНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.Льгота)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	КОНЕЦ КАК ГруппаНачисленияУдержанияВыплаты,
	|	НЕ Начисления.ЯвляетсяДоходомВНатуральнойФорме КАК УчитыватьВоВзаиморасчетах,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияМоральногоВреда), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь))
	|			ТОГДА ИСТИНА
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты)
	|				И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноИзменениеСпособаРасчетов
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилаУчетаНачисления = Новый Структура;
		ПравилаУчетаНачисления.Вставить("ГруппаНачисленияУдержанияВыплаты", Выборка.ГруппаНачисленияУдержанияВыплаты);
		ПравилаУчетаНачисления.Вставить("УчитыватьВоВзаиморасчетах", Выборка.УчитыватьВоВзаиморасчетах);
		ПравилаУчетаНачисления.Вставить("ДоступноИзменениеСпособаРасчетов", Выборка.ДоступноИзменениеСпособаРасчетов);
		
		ПравилаУчетаНачислений.Вставить(Выборка.Ссылка, ПравилаУчетаНачисления);
		
	КонецЦикла;
	
	Возврат ПравилаУчетаНачислений;

КонецФункции

// Формирует временную таблицу ВТСтатьиРасходовНачисленийПоСпособамРасчетов с полями: 
// * Ссылка         - ПланВидовРасчетаСсылка.Начисления
// * СтатьяРасходов - тип СправочникСсылка.СтатьиРасходовЗарплата
//
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//
Процедура СоздатьВТСтатьиРасходовНачисленийПоСпособамРасчетов(МенеджерВременныхТаблиц) Экспорт

	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТСтатьиРасходовНачисленийПоСпособамРасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	Запрос.УстановитьПараметр("ОплатаТруда", ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда]);
	
	СтатьиСпособыТаблица = Новый ТаблицаЗначений;
	СтатьиСпособыТаблица.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетовСФизическимиЛицами"));
	СтатьиСпособыТаблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Для каждого ЭлементКоллекции Из ОписаниеСтатейРасходов Цикл
		НоваяСтрока = СтатьиСпособыТаблица.Добавить();
		НоваяСтрока.СпособРасчетов = ЭлементКоллекции.Ключ;
		НоваяСтрока.СтатьяРасходов = ЭлементКоллекции.Значение;
	КонецЦикла;
	Запрос.УстановитьПараметр("СтатьиСпособыТаблица", СтатьиСпособыТаблица);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиСпособыТаблица.СпособРасчетов КАК СпособРасчетов,
	|	СтатьиСпособыТаблица.СтатьяРасходов КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТСтатьиСпособыТаблица
	|ИЗ
	|	&СтатьиСпособыТаблица КАК СтатьиСпособыТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты)
	|				И Начисления.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|				И Начисления.СпособРасчетовСФизическимиЛицами <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СтатьиСпособыТаблица.СтатьяРасходов, &ОплатаТруда)
	|		ИНАЧЕ &ОплатаТруда
	|	КОНЕЦ КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТСтатьиРасходовНачисленийПоСпособамРасчетов
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиСпособыТаблица КАК СтатьиСпособыТаблица
	|		ПО Начисления.СпособРасчетовСФизическимиЛицами = СтатьиСпособыТаблица.СпособРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтатьиСпособыТаблица";
	
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, описание см ДанныеДляПроведения()
//		Начисления - регистрируемые начисления.
//					Если передано Неопределено, то начисления не регистрируются.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//					если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьУдержанияАвансом(ДанныеДляПроведения, Отказ, Удержания, ЗаписыватьДвижения = Ложь)
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	Организация 		= ДанныеДляПроведения.Организация;
	
	УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.ТаблицаРаспределенияПоРабочимМестам();
	Для Каждого Строка Из Удержания Цикл
		НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.ПериодДействия		= ПериодРегистрации;
		НоваяСтрока.Организация			= Организация;
		НоваяСтрока.НачислениеУдержание = Строка.Удержание;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
	КонецЦикла;
	// Заполняем движения 
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникамАвансом);
	Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записать();
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
		НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
		Движения, Отказ, 
		Организация, ПериодРегистрации, 
		Неопределено, УдержанияДляВзаиморасчетов);
	
КонецПроцедуры

#Область ПроцедурыИФункцииРаботыСОтчетами

// Процедура формирования отчетов анализа начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНачисленнойЗарплатыБюджетныхУчреждений");
		Модуль.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс)
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		УчетНачисленнойЗарплатыБазовый.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования отчетов анализа начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаУнифицированнаяФормаТ13(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта, НастройкиОтчета) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтчетыПечатныеФормыБюджетныхУчреждений");
		Модуль.ПриКомпоновкеОтчетаУнифицированнаяФормаТ13(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта, НастройкиОтчета);
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НачисленоПовременно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоПовременно";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременно';
								|en = 'Periodically'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// НачисленоСдельно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоСдельно";
	НоваяСтрока.Заголовок = НСтр("ru = 'Сдельно';
								|en = 'By piece'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки';
								|en = 'Time-based payment and standard bonuses'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ ((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)))";
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления';
								|en = 'Other accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// ДругиеДоходы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДругиеДоходы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Другие доходы в виде различных социальных и материальных благ';
								|en = 'Other income as different social and material benefits'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент';
								|en = 'Regional factor'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка';
								|en = 'Northern allowance'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия';
								|en = 'Bonus'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему';
								|en = 'Payment by average'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение';
								|en = 'Extra pay for secondary employment'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой';
								|en = 'Simple'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 11;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспо- собности';
								|en = 'Temporary incapacity allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 12;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск';
								|en = 'Leave'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 13;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком';
								|en = 'Child care allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 10;
	НоваяСтрока.ПриоритетКолонки = 14;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 15);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы';
								|en = 'Income tax'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Аванс
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
	МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано в аванс и межрасчет-
		|ный период';
		|en = 'Issued in advance and outside
		|the payroll period'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ИсполнительныйЛист
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ИсполнительныйЛист";
	НоваяСтрока.Заголовок = НСтр("ru = 'Удержания по исполнитель-
		|ному листу';
		|en = 'Deductions based on enforcement
		|order'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания';
								|en = 'Other deductions'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 5);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийФорма0504401() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОсновныеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Основные начисления';
								|en = 'Basic accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)))";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспособности';
								|en = 'Temporary incapacity allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДниБолезни
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДниБолезни";
	НоваяСтрока.Заголовок = НСтр("ru = 'дни болезни';
								|en = 'sick days'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.РезультатУсловия = "ОплаченоДней";
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком';
								|en = 'Child care allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления';
								|en = 'Other accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки';
								|en = 'Time-based payment and standard bonuses'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ ((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)))";
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент';
								|en = 'Regional factor'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка';
								|en = 'Northern allowance'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия';
								|en = 'Bonus'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему';
								|en = 'Payment by average'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение';
								|en = 'Extra pay for secondary employment'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой';
								|en = 'Simple'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск';
								|en = 'Leave'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 11);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийФорма0504401с2015() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОсновныеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Основные начисления';
								|en = 'Basic accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда), Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда), Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)))";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспособности';
								|en = 'Temporary incapacity allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДниБолезни
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДниБолезни";
	НоваяСтрока.Заголовок = НСтр("ru = 'дни болезни';
								|en = 'sick days'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.РезультатУсловия = "ОплаченоДней";
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком';
								|en = 'Child care allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления';
								|en = 'Other accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки';
								|en = 'Time-based payment and standard bonuses'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ ((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)))";
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент';
								|en = 'Regional factor'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка';
								|en = 'Northern allowance'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия';
								|en = 'Bonus'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему';
								|en = 'Payment by average'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение';
								|en = 'Extra pay for secondary employment'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой';
								|en = 'Simple'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск';
								|en = 'Leave'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 11,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты));
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийФорма0504401() Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// Аванс
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
	МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано в аванс и межрасчет-
		|ный период';
		|en = 'Issued in advance and outside
		|the payroll period'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы физических лиц';
								|en = 'Personal income tax'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ДобровольныеСтраховыеВзносы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ДСВ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ДобровольныеСтраховыеВзносы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Страховой пенсионный взнос';
								|en = 'Insurance pension contribution'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания';
								|en = 'Other deductions'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 5);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийФорма0504401с2015(ПерваяПоловинаМесяца = Ложь) Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы физических лиц';
								|en = 'Personal income tax'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДобровольныеСтраховыеВзносы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ДСВ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ДобровольныеСтраховыеВзносы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Страховой пенсионный взнос';
								|en = 'Insurance pension contribution'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания';
								|en = 'Other deductions'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	Если Не ПерваяПоловинаМесяца Тогда
		
		// Аванс (Выплачено / заработная плата)
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = "ВыплаченоВАванс";
		НоваяСтрока.Заголовок = НСтр("ru = 'заработная
			|плата';
			|en = 'salary
			|'");
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
		НоваяСтрока.ВыводитьКолонку = Ложь;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = 4;
		НоваяСтрока.ПриоритетКолонки = 4;
		
		// Межрасчет (Выплачено / выплаты в межрасчетный период)
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = "ВыплаченоВМежрасчет";
		НоваяСтрока.Заголовок = НСтр("ru = 'в межрасчет-
			|ный период';
			|en = 'outside the 
			|payroll period '");
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
		НоваяСтрока.ВыводитьКолонку = Ложь;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = 5;
		НоваяСтрока.ПриоритетКолонки = 5;
		
	КонецЕсли;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 6);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Процедура ДополнитьДополнительныеНачисления(ДополнительныеНачисления, ПорядокКолонки, ИсключаемыеКатегории = Неопределено)
	
	МассивВсехКатегорий = Новый Массив;
	Для каждого СтрокаНачисления Из ДополнительныеНачисления Цикл
		Для каждого КатегорияКолонки Из СтрокаНачисления.КатегорииКолонки Цикл
			МассивВсехКатегорий.Добавить(КатегорияКолонки);
		КонецЦикла;
	КонецЦикла;
	
	ДействующиеКатегории = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДействующиеКатегории();
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
		Если МассивВсехКатегорий.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДействующиеКатегории.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		
		Если ИсключаемыеКатегории <> Неопределено Тогда
			ВыводитьКолонку = (ИсключаемыеКатегории.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) = Неопределено);
		Иначе
			ВыводитьКолонку = Истина;
		КонецЕсли;
		
		НоваяСтрока.ВыводитьКолонку = ВыводитьКолонку;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = МетаданныеЗначения;
		Если МассивВсехКатегорий.Найти(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДополнительныеУдержания(ДополнительныеУдержания, ПорядокКолонки)
	
	ДействующиеКатегории = Перечисления.КатегорииУдержаний.ДействующиеКатегории();
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДействующиеКатегории.Найти(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = МетаданныеЗначения;
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
//	Параметры:
//		Начисления - Таблица значений, полученная с помощью метода "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		ДанныеОтчета - дерево значений, полученное с помощью метода ПроцессорВывода.Вывести.
//		СоответствиеПользовательскихПолей - Соответствие, полученное с помощью метода ЗарплатаКадры.СоответствиеПользовательскихПолей.
//		НачальныйНомерКолонки - Первый номер колонки, начиная с которой будут выводиться дополнительные начисления.
//
//	Возвращаемое значение:
//		ПорядокНачислений - Таблица значений с колонками:
//			Имя - Строка - Имя колонки.
//			Заголовок - Строка - Представление колонки в отчете.
//			НомерКолонки - Номер колонки в отчете.
//			КатегорииКолонки - Массив - Категории начислений, выводимые в колонку.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	ПорядокНачислений = Начисления.СкопироватьКолонки("Имя, Заголовок, ПорядокКолонки, НомерКолонки, КатегорииКолонки");
	
	// Получим первые по приоритету колонки.
	Для каждого СтрокаОтчета Из ДанныеОтчета.Строки Цикл
		Для каждого СтрокаНачисления Из Начисления Цикл
			Если (СтрокаНачисления.ВыводитьНулевыеЗначения Или СоответствиеПользовательскихПолей.Получить(СтрокаНачисления.Имя) <> Неопределено)
				И СтрокаНачисления.ВыводитьКолонку И ПорядокНачислений.Найти(СтрокаНачисления.Имя, "Имя") = Неопределено Тогда
				НоваяСтрока = ПорядокНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПорядокНачислений.Сортировать("ПорядокКолонки");
	ПорядокНачислений.Колонки.Удалить("ПорядокКолонки");
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаНачисления Из ПорядокНачислений Цикл
		СтрокаНачисления.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат ПорядокНачислений;
	
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
//	Параметры:
//		Удержания - Таблица значений, полученная с помощью метода
//		            "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		ДанныеОтчета - дерево значений, полученное с помощью метода ПроцессорВывода.Вывести.
//		СоответствиеПользовательскихПолей - Соответствие, полученное с помощью метода
//		                                    ЗарплатаКадры.СоответствиеПользовательскихПолей.
//		НачальныйНомерКолонки - Первый номер колонки, начиная с которой будут выводиться дополнительные удержания.
//
//	Возвращаемое значение:
//		ПорядокУдержаний - Таблица значений с колонками:
//			Имя - Строка - Имя колонки.
//			Заголовок - Строка - Представление колонки в отчете.
//			НомерКолонки - Номер колонки в отчете.
//			КатегорииКолонки - Массив - Категории начислений, выводимые в колонку.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	ПорядокУдержаний = Удержания.СкопироватьКолонки("Имя, Заголовок, ПорядокКолонки, НомерКолонки, КатегорииКолонки");
	
	// Получим первые по приоритету колонки.
	Для каждого СтрокаОтчета Из ДанныеОтчета.Строки Цикл
		Для каждого СтрокаУдержания Из Удержания Цикл
			Если (СтрокаУдержания.ВыводитьНулевыеЗначения Или СоответствиеПользовательскихПолей.Получить(СтрокаУдержания.Имя) <> Неопределено)
				И СтрокаУдержания.ВыводитьКолонку И ПорядокУдержаний.Найти(СтрокаУдержания.Имя, "Имя") = Неопределено Тогда
				НоваяСтрока = ПорядокУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПорядокУдержаний.Сортировать("ПорядокКолонки");
	ПорядокУдержаний.Колонки.Удалить("ПорядокКолонки");
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаУдержания Из ПорядокУдержаний Цикл
		СтрокаУдержания.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат ПорядокУдержаний;
	
КонецФункции

// Возвращает условие, сформированное с учетом категории начисления/удержания.
//
//	Параметры:
//		МассивКатегорий - Массив - Категории начислений/удержаний, входящие в условие.
//		МассивВсехКатегорий - Массив - Все используемые в условиях категории, формируется для правильного формирования
//		                               условия по "Прочим" начислениям/удержаниям.
//		ВыражениеУсловия - Строка - выражение выполнения условия, по умолчанию "=".
//		ОперацияУсловия - Строка - Операция соединения условий, по умолчанию "Или".
//
//	Возвращаемое значение:
//		Условие - Строка - Сформированное условие для пользовательского поля.
//
Функция УсловиеПользовательскогоПоля(МассивКатегорий, СоответствиеКатегорий, ВидПолей, ВыражениеУсловия = "=", ОперацияУсловия = "Или", Группа = Неопределено) Экспорт
	
	Условие = "";
	Для каждого Категория Из МассивКатегорий Цикл
		Если Не ПустаяСтрока(Условие) Тогда
			Условие = Условие + " " + ОперацияУсловия + " ";
		КонецЕсли;
		ИмяПеречисления = Категория.Метаданные().Имя;
		Если ИмяПеречисления = "ВидыОсобыхНачисленийИУдержаний" Или ИмяПеречисления = "ВидыВзаиморасчетовССотрудниками" Тогда
			Параметр1 = "";
		ИначеЕсли ИмяПеречисления = "КатегорииНачисленийИНеоплаченногоВремени" Тогда
			Параметр1 = ".КатегорияНачисленияИлиНеоплаченногоВремени";
		Иначе
			Параметр1 = ".КатегорияУдержания";
		КонецЕсли;
		Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Условие + "ЕстьNULL(ВидРасчета%1, Значение(Перечисление.%3.ПустаяСсылка)) %2 Значение(Перечисление.%3.%4)",
			Параметр1, ВыражениеУсловия, ИмяПеречисления, СоответствиеКатегорий.Получить(Категория));
	КонецЦикла;
	
	ШаблонУсловия = "(" + ?(ПустаяСтрока(Условие), "", "(%1) И ") + "Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.%2))";
	Если Группа = Неопределено Тогда
		Группа = ?(ИмяПеречисления = "ВидыВзаиморасчетовССотрудниками", "Выплачено", ?(ВидПолей = "Начисления", "Начислено", "Удержано"));
	КонецЕсли;
	Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, Условие, Группа);
	
	Возврат Условие;
	
КонецФункции

// Устанавливает выражение детальных записей и итоговых записей для пользовательского поля варианта отчета.
//
//	Параметры:
//		ПользовательскоеПоле - Пользовательское поле, в которое требуется установить выражения.
//		Условие - Строка - условие выполнения выражения.
//		РезультатУсловия - Строка - Результат выполнения выражения.
//
Процедура ДополнитьПользовательскоеПоле(ПользовательскоеПоле, Условие, РезультатУсловия) Экспорт
	
	ПользовательскоеПоле.Использование = Истина;
	
	ВыражениеДетальныхЗаписей = 
	"Выбор
	|	Когда " + Условие + "
	|		Тогда " + РезультатУсловия + "
	|	Иначе 0
	|Конец";
	ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(ВыражениеДетальныхЗаписей);
	
	ВыражениеИтоговыхЗаписей = 
	"Сумма(Выбор
	|		Когда " + Условие + "
	|			Тогда " + РезультатУсловия + "
	|		Иначе 0
	|	Конец)";
	ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(ВыражениеИтоговыхЗаписей);
	
КонецПроцедуры

// Добавляет пользовательское поле в поля выбора отчета и группировки.
//
//	Параметры:
//		ВыбранныеПоля - Коллекция элементов полей выбора отчета.
//		ВыбранныеПоляГруппировки - Коллекция элементов полей выбора группировки.
//		ПользовательскоеПоле - Добавляемое пользовательское поле.
//
Процедура ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, ПользовательскоеПоле) Экспорт
	
	НовоеПолеВыбора = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
	
	НовоеПолеВыбора = ВыбранныеПоляГруппировки.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
	
КонецПроцедуры

// Добавляет пользовательские поля в вариант отчета.
//
// Параметры:
//		ДополнительныеНачисленияИУдержания - Таблица значений, полученная с помощью метода "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		НастройкиОтчета - Настройки варианта отчета.
//		КоличествоНачисленийУдержаний - Сколько всего будет дополнительных колонок. Нужно учитывать, что колонки "ПрочиеНачисления"/"ПрочиеУдержания" добавляются всегда.
//		ВидПолей - Вид добавляемых полей: "Начисления" или "Удержания".
//
Процедура ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей, НаАванс) Экспорт
	
	ПриоритетыКатегорий = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КатегорииУдержаний"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыВзаиморасчетовССотрудниками"));
	
	ПриоритетыКатегорий.Колонки.Добавить("КатегорияНачисленияУдержания", Новый ОписаниеТипов(МассивТипов));
	ПриоритетыКатегорий.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ПриоритетыКатегорий.Колонки.Добавить("ВыводитьНулевыеЗначения", Новый ОписаниеТипов("Булево"));
	Для Каждого ДопНачислениеУдержание Из ДополнительныеНачисленияИУдержания Цикл
		Для Каждого КатегорияНачисленияУдержания Из ДопНачислениеУдержание.КатегорииКолонки Цикл
			НоваяСтрокаПриоритетыКатегорий = ПриоритетыКатегорий.Добавить();
			НоваяСтрокаПриоритетыКатегорий.КатегорияНачисленияУдержания = КатегорияНачисленияУдержания;
			НоваяСтрокаПриоритетыКатегорий.Приоритет = ДопНачислениеУдержание.ПриоритетКолонки;
			НоваяСтрокаПриоритетыКатегорий.ВыводитьНулевыеЗначения = ДопНачислениеУдержание.ВыводитьНулевыеЗначения;
		КонецЦикла;
	КонецЦикла;
	
	ДатаНачала = ТекущаяДатаСеанса();
	ДатаОкончания = ТекущаяДатаСеанса();
	ПериодОтчета = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период");
	Если ПериодОтчета <> Неопределено Тогда
		ДатаНачала = ПериодОтчета.Значение.ДатаНачала;
		ДатаОкончания = ПериодОтчета.Значение.ДатаОкончания;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПриоритетыКатегорий", ПриоритетыКатегорий);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	ОрганизацияОтбора = Неопределено;
	ФизическиеЛицаОтбора = Неопределено;
	ПодразделениеОтбора = Неопределено;
	Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			ОрганизацияОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
			ПодразделениеОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизическоеЛицо") Тогда
			ФизическиеЛицаОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приоритеты.КатегорияНачисленияУдержания КАК Категория,
	|	Приоритеты.Приоритет КАК Приоритет,
	|	Приоритеты.ВыводитьНулевыеЗначения КАК ВыводитьНулевыеЗначения
	|ПОМЕСТИТЬ ВТПриоритетыКатегорий
	|ИЗ
	|	&ПриоритетыКатегорий КАК Приоритеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК НачислениеУдержание,
	|	ПриоритетыКатегорий.Приоритет КАК Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения КАК ВыводитьНулевыеЗначения
	|ПОМЕСТИТЬ ВТПриоритетыНачисленийУдержаний
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО ПриоритетыКатегорий.Категория = Начисления.КатегорияНачисленияИлиНеоплаченногоВремени
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	ПриоритетыКатегорий.Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО ПриоритетыКатегорий.Категория = Удержания.КатегорияУдержания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриоритетыКатегорий.Категория,
	|	ПриоритетыКатегорий.Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ПриоритетыНачисленийУдержаний.Приоритет КАК Приоритет
	|ИЗ
	|	ВТПриоритетыНачисленийУдержаний КАК ПриоритетыНачисленийУдержаний
	|ГДЕ
	|	(ПриоритетыНачисленийУдержаний.ВыводитьНулевыеЗначения
	|			ИЛИ ПриоритетыНачисленийУдержаний.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса), ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод))
	|			ИЛИ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|				ГДЕ
	|					НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ПриоритетыНачисленийУдержаний.НачислениеУдержание
	|					И НачисленияУдержанияПоСотрудникам.Сумма <> 0
	|					И НачисленияУдержанияПоСотрудникам.Организация В (&Организация)
	|					И НачисленияУдержанияПоСотрудникам.Подразделение В (&Подразделение)
	|					И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В (&ФизическиеЛица)
	|					И &УсловиеГруппы))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Если НаАванс Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК", "РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК");
	КонецЕсли; 
	
	Если ОрганизацияОтбора = Неопределено Тогда
		
		РазрешенныеФилиалы = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка("Справочник.Организации", Тип("СправочникСсылка.Организации"));
		Если РазрешенныеФилиалы = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Организация В (&Организация)", "");
		Иначе
			Запрос.УстановитьПараметр("Организация", РазрешенныеФилиалы);
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("Организация", ОрганизацияОтбора);
	КонецЕсли;
	
	Если ПодразделениеОтбора = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Подразделение В (&Подразделение)", "");
	Иначе
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОтбора);
	КонецЕсли;
	
	Если ФизическиеЛицаОтбора = Неопределено Тогда
		
		РазрешенныеФизическиеЛица = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка("Справочник.ФизическиеЛица", Тип("СправочникСсылка.ФизическиеЛица"));
		Если РазрешенныеФилиалы = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В (&ФизическиеЛица)", "");
		Иначе
			Запрос.УстановитьПараметр("ФизическиеЛица", РазрешенныеФизическиеЛица);
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛицаОтбора);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "500", КоличествоНачисленийУдержаний);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГруппы",
		?(ВидПолей = "Начисления", "НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)",
			"НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)"));
	ВыводимыеПриоритеты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Приоритет");
	
	МассивВсехКатегорий = Новый Массив;
	КоллекцияПользовательскихПолей = НастройкиОтчета.ПользовательскиеПоля.Элементы;
	ВыбранныеПоля = НастройкиОтчета.Выбор.Элементы;
	ГруппировкаОтчета = ЗарплатаКадрыОтчеты.ПолучитьПоследнийЭлементСтруктуры(НастройкиОтчета);
	ВыбранныеПоляГруппировки = ГруппировкаОтчета.Выбор.Элементы;
	
	СоответствиеКатегорий = Новый Соответствие;
	Если ВидПолей = "Начисления" Тогда
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
			СоответствиеКатегорий.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
		КонецЦикла;
	Иначе
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
			СоответствиеКатегорий.Вставить(Перечисления.КатегорииУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
		КонецЦикла;
	КонецЕсли;
	Для каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		СоответствиеКатегорий.Вставить(Перечисления.ВидыОсобыхНачисленийИУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
	КонецЦикла;
	Для каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыВзаиморасчетовССотрудниками.ЗначенияПеречисления Цикл
		СоответствиеКатегорий.Вставить(Перечисления.ВидыВзаиморасчетовССотрудниками[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
	КонецЦикла;
	
	ПользовательскоеУсловиеПрочие = "";
	СтрокаТаблицыПрочие = Неопределено;
	МассивСтрокДляУдаления = Новый Массив;;
	Для каждого СтрокаТаблицы Из ДополнительныеНачисленияИУдержания Цикл
		
		Если (ВидПолей = "Начисления" И СтрокаТаблицы.Имя = "ПрочиеНачисления") Или (ВидПолей = "Удержания" И СтрокаТаблицы.Имя = "ПрочиеУдержания") Тогда
			СтрокаТаблицыПрочие = ДополнительныеНачисленияИУдержания[ДополнительныеНачисленияИУдержания.Индекс(СтрокаТаблицы)];
			Продолжить;
		КонецЕсли;
		
		Если ВыводимыеПриоритеты.Найти(СтрокаТаблицы.ПриоритетКолонки) <> Неопределено Тогда
			// Сформируем условие по категориям
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				Если МассивВсехКатегорий.Найти(КатегорияКолонки) = Неопределено Тогда
					МассивВсехКатегорий.Добавить(КатегорияКолонки);
				КонецЕсли;
			КонецЦикла;
			Условие = УсловиеПользовательскогоПоля(СтрокаТаблицы.КатегорииКолонки, СоответствиеКатегорий, ВидПолей);
			Если Не ПустаяСтрока(СтрокаТаблицы.ПользовательскоеУсловие) Тогда
				// Дополним пользовательским условием
				Условие = Условие + ?(Не ПустаяСтрока(Условие), " И ", "") + СтрокаТаблицы.ПользовательскоеУсловие;
				Поз = СтрНайти(ПользовательскоеУсловиеПрочие, СтрокаТаблицы.УсловиеИсключенияИзПрочих);
				Если Поз = 0 Тогда
					ПользовательскоеУсловиеЗаполнено = Не ПустаяСтрока(ПользовательскоеУсловиеПрочие);
					ПользовательскоеУсловиеПрочие = ПользовательскоеУсловиеПрочие + ?(ПользовательскоеУсловиеЗаполнено, " И ", "") + СтрокаТаблицы.УсловиеИсключенияИзПрочих;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТаблицы.ДобавитьПользовательскоеПоле Тогда
				НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
				НовоеПоле.Заголовок = СтрокаТаблицы.Имя;
				ДополнитьПользовательскоеПоле(НовоеПоле, Условие, ?(ПустаяСтрока(СтрокаТаблицы.РезультатУсловия), "Сумма", СтрокаТаблицы.РезультатУсловия));
				ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
			КонецЕсли;
		Иначе
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим категории, которые не выводятся в колонки отчета.
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ДополнительныеНачисленияИУдержания.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	// ПрочиеНачисления
	Если ВидПолей = "Начисления" И СтрокаТаблицыПрочие <> Неопределено И СтрокаТаблицыПрочие.ДобавитьПользовательскоеПоле Тогда
		
		ПользовательскоеПоле = ПользовательскоеПолеПоЗаголовку(КоллекцияПользовательскихПолей, "ПрочиеНачисления");
		Если ПользовательскоеПоле = Неопределено Тогда
			
			ПользовательскоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			ПользовательскоеПоле.Заголовок = "ПрочиеНачисления";
			
			ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, ПользовательскоеПоле);
			
		КонецЕсли;
		
		Условие = ?(ПустаяСтрока(ПользовательскоеУсловиеПрочие), "", ПользовательскоеУсловиеПрочие + " И ") + УсловиеПользовательскогоПоля(МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, "<>", "И", "Начислено");
		ДополнитьПользовательскоеПоле(ПользовательскоеПоле, Условие, "Сумма");
		
	КонецЕсли;
	
	// ПрочиеУдержания
	Если ВидПолей = "Удержания" И СтрокаТаблицыПрочие <> Неопределено И СтрокаТаблицыПрочие.ДобавитьПользовательскоеПоле Тогда
		
		ПользовательскоеПоле = ПользовательскоеПолеПоЗаголовку(КоллекцияПользовательскихПолей, "ПрочиеУдержания");
		Если ПользовательскоеПоле = Неопределено Тогда
			
			ПользовательскоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			ПользовательскоеПоле.Заголовок = "ПрочиеУдержания";
			
			ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, ПользовательскоеПоле);
			
		КонецЕсли;
		
		Условие = ?(ПустаяСтрока(ПользовательскоеУсловиеПрочие), "", ПользовательскоеУсловиеПрочие + " И ") + УсловиеПользовательскогоПоля(МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, "<>", "И", "Удержано");
		ДополнитьПользовательскоеПоле(ПользовательскоеПоле, Условие, "Сумма");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПользовательскоеПолеПоЗаголовку(КоллекцияПользовательскихПолей, Заголовок)
	
	Для Каждого ПользовательскоеПоле Из КоллекцияПользовательскихПолей Цикл
		
		Если ПользовательскоеПоле.Заголовок = Заголовок Тогда
			Возврат ПользовательскоеПоле;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НаборДанныхНачисленияУдержания(НаборыДанных)
	
	НаборНачисленияУдержания = Неопределено;
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если НаборДанных.Имя = "НачисленияУдержания" Тогда
			НаборНачисленияУдержания = НаборДанных;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			НаборНачисленияУдержания = НаборДанныхНачисленияУдержания(НаборДанных.Элементы);
		КонецЕсли;
		
		Если НаборНачисленияУдержания <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборНачисленияУдержания;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ДополнительныеПоляКадровыхДанныхСотрудников = КадровыйУчет.ПоляПредставленийКадровыхДанныхСотрудников();
		
		ДополнительныеПоля = Новый Структура;
		ДополнительныеПоля.Вставить("Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний", ДополнительныеПоляКадровыхДанныхСотрудников);
		
		Для Каждого СтрокаДополнительногоПоля Из ДополнительныеПоляКадровыхДанныхСотрудников Цикл
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
				СтрокаДополнительногоПоля,
				"КадровыеДанныеСотрудников",
				СтрокаДополнительногоПоля.ИмяПоля,
				СтрокаДополнительногоПоля.ПутьПоляСКД,
				СтрокаДополнительногоПоля.ЗаголовокПоляСКД);
			
		КонецЦикла;
		
		// Должность по штатному расписанию
		ИмяПоля = "ДолжностьПоШтатномуРасписанию";
		
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Найти(ИмяПоля, "ИмяПоля");
		Если СтрокаДополнительногоПоля = Неопределено Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = ИмяПоля;
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)";
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"ДолжностьПоШтатномуРасписанию",
			"Работа.ДолжностьПоШтатномуРасписанию",
			НСтр("ru = 'Работа.Должность по штатному расписанию';
				|en = 'Job.Position according to the staff list'"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"ДолжностьПоШтатномуРасписаниюНаКонецПериода",
			"Работа.ДолжностьПоШтатномуРасписаниюНаКонецПериода",
			НСтр("ru = 'Работа.Должность по штатному расписанию на конец периода';
				|en = 'Job.Position according to the staff list at the end of the period'"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"ДолжностьПоШтатномуРасписаниюГоловногоСотрудникаНаКонецПериода",
			"Работа.ДолжностьПоШтатномуРасписаниюГоловногоСотрудникаНаКонецПериода",
			НСтр("ru = 'Работа.Должность по штатному расписанию основного сотрудника на конец периода';
				|en = 'Job.Position according to the staff list of the principal employee at the end of the period'"));
		
		// Разряд категория
		ИмяПоля = "РазрядКатегория";
		
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Найти(ИмяПоля, "ИмяПоля");
		Если СтрокаДополнительногоПоля = Неопределено Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = ИмяПоля;
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)";
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"РазрядКатегория",
			"РабочееМесто.РазрядКатегория");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"РазрядКатегорияНаКонецПериода",
			"РабочееМесто.РазрядКатегорияНаКонецПериода");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"РазрядКатегорияГоловногоСотрудникаНаКонецПериода",
			"РабочееМесто.РазрядКатегорияГоловногоСотрудникаНаКонецПериода",
			НСтр("ru = 'Разряд категория основного сотрудника на конец периода';
				|en = 'Category of the main employee as of the end of the period'"));
		
		// Территория
		ИмяПоля = "Территория";
		
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Найти(ИмяПоля, "ИмяПоля");
		Если СтрокаДополнительногоПоля = Неопределено Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = ИмяПоля;
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"Территория",
			"Работа.Территория",
			НСтр("ru = 'Работа.Территория';
				|en = 'Job.Territory'"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"ТерриторияНаКонецПериода",
			"Работа.ТерриторияНаКонецПериода",
			НСтр("ru = 'Работа.Территория на конец периода';
				|en = 'Job.Territory at the end of the period'"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"ТерриторияГоловногоСотрудникаНаКонецПериода",
			"Работа.ТерриторияГоловногоСотрудникаНаКонецПериода",
			НСтр("ru = 'Работа.Территория основного сотрудника на конец периода';
				|en = 'Job.Territory of the principal employee at the end of the period'"));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
			МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
			МодульУчетБюджетныхУчреждений.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			МодульОрганизационнаяСтруктура.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаспределенияРезультатов

Функция РезультатыРаспределенияНДФЛИКорректировокВыплаты(ДанныеДляПроведения, РезультатРасчетаНДФЛ, КорректировкиВыплаты)

	РезультатРаспределения = Новый Структура("РаспределениеНДФЛ,РаспределениеКорректировок");
	
	РаспределениеНДФЛ 			= ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРаспределениеРезультатовУдержаний();
	РаспределениеКорректировок 	= ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Движения 				= ДанныеДляПроведения.Движения;;
	Организация 			= ДанныеДляПроведения.Организация;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	ОкончательныйРасчет		= ДанныеДляПроведения.ОкончательныйРасчет;
	Авансом					= ДанныеДляПроведения.Авансом;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Если Авансом Тогда
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникамАвансом;
	Иначе
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	КонецЕсли;
	
	ИсключаемыйРегистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
	
	ТаблицаНДФЛ = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатРасчетаНДФЛ();
	НДФЛКЗачету = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаКорректировкиВыплаты();
	НДФЛЗачтено = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаКорректировкиВыплаты(); 
	
	СтрокиКорректировок = Новый Соответствие;
	НоваяКоллекцияКорректировкиВыплаты = Неопределено;
	Если КорректировкиВыплаты <> Неопределено Тогда
		НоваяКоллекцияКорректировкиВыплаты = КорректировкиВыплаты.СкопироватьКолонки();
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из КорректировкиВыплаты Цикл
			Сумма = СтрокаТЗ.КорректировкаВыплаты;
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокиКорректировок.Вставить(ИдентификаторСтроки, СтрокаТЗ);
			Если Сумма < 0 Тогда
				НоваяСтрока = НДФЛКЗачету.Добавить();
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
			ИначеЕсли Сумма > 0 Тогда
				НоваяСтрока = НДФЛЗачтено.Добавить();
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
			КонецЕсли;
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
		КонецЦикла;
	КонецЕсли;

	СтрокиНДФЛ = Новый Соответствие;
	НоваяКоллекцияРаспределениеНДФЛ = Неопределено;
	Если РезультатРасчетаНДФЛ <> Неопределено Тогда
		НоваяКоллекцияРаспределениеНДФЛ = РезультатРасчетаНДФЛ.СкопироватьКолонки();
		НоваяКоллекцияРаспределениеНДФЛ.Колонки.МесяцНалоговогоПериода.Имя = "ДатаПолученияДохода";
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из РезультатРасчетаНДФЛ Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				СтрокиНДФЛ.Вставить(ИдентификаторСтроки, СтрокаТЗ);
				НоваяСтрока = ТаблицаНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
				НоваяСтрока.Территория 			= СтрокаТЗ.Подразделение;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаНДФЛ.Количество() = 0 И НДФЛКЗачету.Количество() = 0 И НДФЛЗачтено.Количество() = 0 Тогда
		Возврат РезультатРаспределения;
	КонецЕсли;
	
	ФизическиеЛицаМассив = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ФизическоеЛицо", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(НДФЛКЗачету, "ФизическоеЛицо", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(НДФЛЗачтено, "ФизическоеЛицо", Истина), Истина);
	
	УдержанияМассив 	 = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдержанияМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ВидУдержания", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдержанияМассив, ОбщегоНазначения.ВыгрузитьКолонку(НДФЛКЗачету, "ВидУдержания", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдержанияМассив, ОбщегоНазначения.ВыгрузитьКолонку(НДФЛЗачтено, "ВидУдержания", Истина), Истина);
	
	УдалитьВТ = Новый Массив;
	ДанныеДляРаспределения = ДанныеДляРаспределенияНДФЛ(ДанныеДляПроведения, ФизическиеЛицаМассив, УдержанияМассив, ИсключаемыйРегистратор);
	УдалитьВТ.Добавить("ВТНачисленияДляБазыНДФЛ");
											
	УжеУдержано 	  = ДанныеДляРаспределения.УжеУдержано;
	БазаВсеНачисления = ДанныеДляРаспределения.БазаВсеНачисления;
	БазаВсеНачисления.Индексы.Добавить("ФизическоеЛицо");
		
	СтрокиУжеУдержаноПоФизическимЛицам = ОтражениеЗарплатыВУчетеРасширенный.СтрокиТаблицыЗначенийПоФизическимЛицам(УжеУдержано);
	
	Если ТаблицаНДФЛ.Количество() > 0 Или НДФЛКЗачету.Количество() > 0 Тогда
		
		ФизическиеЛицаМассив = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ФизическоеЛицо", Истина), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(НДФЛКЗачету, "ФизическоеЛицо", Истина), Истина);
		
		Если Авансом Тогда
			СформироватьНачисленияКакСведенияОДоходахНДФЛ(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, ИсключаемыйРегистратор);
		ИначеЕсли Движения.Найти("СведенияОДоходахНДФЛ") <> Неопределено Тогда
			ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, Движения.СведенияОДоходахНДФЛ, Истина);
		КонецЕсли;
		
		ИсключаемыеРегистраторы = Новый Массив;
		ИсключаемыеРегистраторы.Добавить(ИсключаемыйРегистратор);
		
		Если ОкончательныйРасчет И Не Авансом Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛицаМассив);
			Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
			|ГДЕ
			|	Начисления.ДанныеМежрасчетногоПериода
			|	И Начисления.Период = &ПериодРегистрации
			|	И Начисления.ФизическоеЛицо В(&ФизическиеЛица)
			|	И Начисления.Организация = &Организация";
			Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРегистраторы, Регистраторы, Истина);
			
		КонецЕсли;
		
		БазаРасчетаНДФЛ = ОтражениеЗарплатыВУчетеРасширенный.БазаДляРаспределенияНДФЛ(МенеджерВременныхТаблиц, ФизическиеЛицаМассив,
												ПериодРегистрации, Организация, ОкончательныйРасчет, ИсключаемыеРегистраторы, "ВТНачисленияДляБазыНДФЛ");
		БазаРасчетаНДФЛ.Индексы.Добавить("ФизическоеЛицо");
		
		// НДФЛ
		ОтражениеЗарплатыВУчетеРасширенный.РаспределитьНДФЛПоБазе(РаспределениеНДФЛ, ТаблицаНДФЛ, БазаРасчетаНДФЛ, БазаВсеНачисления,
									СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации);
									
		// НДФЛКЗачету
		ОтражениеЗарплатыВУчетеРасширенный.РаспределитьНДФЛПоБазе(РаспределениеКорректировок, НДФЛКЗачету, БазаРасчетаНДФЛ, БазаВсеНачисления,
									СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации, Истина);
		
	КонецЕсли;
	
	Если НДФЛЗачтено.Количество()>0 Тогда
		
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛЗачтено, "ФизическоеЛицо", Истина);
		// КорректировкиВыплаты могут служить базой для распределения, нужно переименовать колонку "КорректировкаВыплаты".
		БазаРасчетаНДФЛ = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(Организация, ПериодРегистрации, ФизическиеЛицаМассив, ИсключаемыйРегистратор);
		БазаРасчетаНДФЛ.Колонки.СуммаКорректировки.Имя = "Сумма";
		
		ОтражениеЗарплатыВУчетеРасширенный.РаспределитьНДФЛПоБазе(РаспределениеКорректировок, НДФЛЗачтено, БазаРасчетаНДФЛ, БазаВсеНачисления,
									СтрокиУжеУдержаноПоФизическимЛицам, Организация, ПериодРегистрации, Истина);
		
	КонецЕсли;
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	Для каждого ЭлементКоллекции Из СтрокиКорректировок Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеКорректировок.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияКорректировкиВыплаты.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияКорректировкиВыплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементКоллекции.Значение);
				НоваяСтрока.Сотрудник 		= СтрокаТЗ.Сотрудник;
				НоваяСтрока.Подразделение 	= СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 	= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.КорректировкаВыплаты = СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Для каждого ЭлементКоллекции Из СтрокиНДФЛ Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеНДФЛ.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеНДФЛ.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.ДатаПолученияДохода 	= ЭлементКоллекции.Значение.МесяцНалоговогоПериода;
				НоваяСтрока.Сотрудник 				= СтрокаТЗ.Сотрудник;
				НоваяСтрока.ПодразделениеСотрудника = СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 			= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.Сумма 					= СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РезультатРаспределения.РаспределениеКорректировок = НоваяКоллекцияКорректировкиВыплаты;
	РезультатРаспределения.РаспределениеНДФЛ = НоваяКоллекцияРаспределениеНДФЛ;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат РезультатРаспределения;
	
КонецФункции

Процедура СформироватьНачисленияКакСведенияОДоходахНДФЛ(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, ИсключаемыйРегистратор)
	
	ДатаОперации = КонецМесяца(ПериодРегистрации);
	
	ВременныйРегистратор = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);
	
	УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		ДатаОперации, 
		ДатаОперации, 
		МенеджерВременныхТаблиц, 
		ПериодРегистрации, 
		Ложь, 
		Ложь, 
		, 
		ИсключаемыйРегистратор); 
		
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.СведенияОДоходахНДФЛ);
	
КонецПроцедуры

Функция РезультатРаспределенияУдержанийИЗаймов(ДанныеДляПроведения, УдержанияПоСотрудникам, УдержанияЗаймов, НалогНаМатериальнуюВыгоду)

	РезультатРаспределения = Новый Структура("НалогНаМатериальнуюВыгоду,УдержанияЗаймов,УдержанияПоСотрудникам");
	
	РаспределениеНДФЛ 		= ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРаспределениеРезультатовУдержаний();
	РаспределениеЗаймов 	= ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРаспределениеРезультатовУдержаний();
	РаспределениеУдержаний 	= ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Движения 					= ДанныеДляПроведения.Движения;
	Организация 				= ДанныеДляПроведения.Организация;
	ПериодРегистрации 			= ДанныеДляПроведения.ПериодРегистрации;
	Авансом						= ДанныеДляПроведения.Авансом;
	МенеджерВременныхТаблиц 	= ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Если Авансом Тогда
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникамАвансом;
	Иначе
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	КонецЕсли;
	
	ИсключаемыйРегистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
	
	ТаблицаУдержаний = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатРасчетаУдержаний();
	ТаблицаЗаймов    = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатПогашениеЗаймов();
	ТаблицаНФДЛ      = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатПогашениеЗаймов();
	
	СтрокиУдержаний = Новый Соответствие;
	НоваяКоллекцияРаспределениеУдержаний = Неопределено;
	Если УдержанияПоСотрудникам <> Неопределено Тогда
		НоваяКоллекцияРаспределениеУдержаний = УдержанияПоСотрудникам.СкопироватьКолонки();
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из УдержанияПоСотрудникам Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				СтрокиУдержаний.Вставить(ИдентификаторСтроки, СтрокаТЗ);
				НоваяСтрока = ТаблицаУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ВидУдержания 		= СтрокаТЗ.Удержание;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокиЗаймов = Новый Соответствие;
	НоваяКоллекцияРаспределениеЗаймов = Неопределено;
	Если УдержанияЗаймов <> Неопределено Тогда
		НоваяКоллекцияРаспределениеЗаймов = УдержанияЗаймов.СкопироватьКолонки();
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из УдержанияЗаймов Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				СтрокиЗаймов.Вставить(ИдентификаторСтроки, СтрокаТЗ);
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ВидУдержания 		= СтрокаТЗ.Удержание;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокиНДФЛ = Новый Соответствие;
	НоваяКоллекцияРаспределениеНДФЛ = Неопределено;
	Если НалогНаМатериальнуюВыгоду <> Неопределено Тогда
		НоваяКоллекцияРаспределениеНДФЛ = НалогНаМатериальнуюВыгоду.СкопироватьКолонки();
		НоваяКоллекцияРаспределениеНДФЛ.Колонки.МесяцНалоговогоПериода.Имя = "ДатаПолученияДохода";
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из НалогНаМатериальнуюВыгоду Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				СтрокиНДФЛ.Вставить(ИдентификаторСтроки, СтрокаТЗ);
				НоваяСтрока = ТаблицаНФДЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ФизическиеЛицаМассив = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаймов, "ФизическоеЛицо", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУдержаний, "ФизическоеЛицо", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНФДЛ, "ФизическоеЛицо", Истина), Истина);
	
	УдержанияМассив 	 = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдержанияМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУдержаний, "ВидУдержания", Истина), Истина);
	
	УдалитьВТ = Новый Массив;
	ДанныеДляУчетаУдержаний = ДанныеДляРаспределенияУдержаний(ДанныеДляПроведения, ФизическиеЛицаМассив, УдержанияМассив, ИсключаемыйРегистратор);
	УдалитьВТ.Добавить("ВТНачисленияДляБазыНДФЛ");
	
	
	БазовыеНачисления = ДанныеДляУчетаУдержаний.БазовыеНачисления;
	БазовыеНачисления.Индексы.Добавить("ФизическоеЛицо");
	
	СтрокиУжеУдержаноПоФизическимЛицам = ОтражениеЗарплатыВУчетеРасширенный.СтрокиТаблицыЗначенийПоФизическимЛицам(ДанныеДляУчетаУдержаний.УжеУдержано);
	
	// ТаблицаЗаймов
	ОтражениеЗарплатыВУчетеРасширенный.РаспределитьУдержанияПоБазе(РаспределениеЗаймов, ТаблицаЗаймов, БазовыеНачисления, Новый Соответствие, Организация, ПериодРегистрации);
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	Для каждого ЭлементКоллекции Из СтрокиЗаймов Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеЗаймов.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеЗаймов.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.Сотрудник 		= СтрокаТЗ.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 	= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.Сумма 			= СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	РезультатРаспределения.УдержанияЗаймов = НоваяКоллекцияРаспределениеЗаймов;
	
	// ТаблицаНФДЛ
	ОтражениеЗарплатыВУчетеРасширенный.РаспределитьУдержанияПоБазе(РаспределениеНДФЛ, ТаблицаНФДЛ, БазовыеНачисления, Новый Соответствие, Организация, ПериодРегистрации);
	
	Для каждого ЭлементКоллекции Из СтрокиНДФЛ Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеНДФЛ.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеНДФЛ.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.ДатаПолученияДохода 	= ЭлементКоллекции.Значение.МесяцНалоговогоПериода;
				НоваяСтрока.Сотрудник 				= СтрокаТЗ.Сотрудник;
				НоваяСтрока.ПодразделениеСотрудника	= СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 			= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.Сумма 					= СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	РезультатРаспределения.НалогНаМатериальнуюВыгоду = НоваяКоллекцияРаспределениеНДФЛ;
	
	// ТаблицаУдержаний
	ДополнительныеПараметры = ОтражениеЗарплатыВУчетеРасширенный.ОписаниеИсходныхДанныхДляРаспределенияУдержаний();
	ДополнительныеПараметры.БазовыеНачисления = БазовыеНачисления;
	ДополнительныеПараметры.СтрокиУжеУдержаноПоФизическимЛицам = СтрокиУжеУдержаноПоФизическимЛицам;
	ДополнительныеПараметры.ТаблицаУдержаний = ТаблицаУдержаний;
	ДополнительныеПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДополнительныеПараметры.Организация = Организация;
	ДополнительныеПараметры.ПериодРегистрации = ПериодРегистрации;
	ДополнительныеПараметры.ВидыНачисленийДополненияРасчетнойБазы = Обработки.МенеджерРасчетаЗарплаты.ВидыНачисленийДополненияРасчетнойБазыУдержаний();;
	ОтражениеЗарплатыВУчетеРасширенный.ВыполнитьРаспределениеУдержаний(РаспределениеУдержаний, ДополнительныеПараметры);

	Для каждого ЭлементКоллекции Из СтрокиУдержаний Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеУдержаний.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеУдержаний.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.Сотрудник 		= СтрокаТЗ.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 	= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.Сумма 			= СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	РезультатРаспределения.УдержанияПоСотрудникам = НоваяКоллекцияРаспределениеУдержаний;
	
	Возврат РезультатРаспределения;
	
КонецФункции 

Функция ДанныеДляРаспределенияНДФЛ(ПараметрыРаспределения, МассивФизическихЛиц, МассивУдержания, ИсключаемыйРегистратор)
	
	Организация 			= ПараметрыРаспределения.Организация;
	ПериодРегистрации 		= ПараметрыРаспределения.ПериодРегистрации;
	ОкончательныйРасчет 	= ПараметрыРаспределения.ОкончательныйРасчет;
	МенеджерВременныхТаблиц = ПараметрыРаспределения.МенеджерВременныхТаблиц;
	Авансом 				= ПараметрыРаспределения.Авансом;
	
	ДанныеДляРаспределения = Новый Структура("БазаВсеНачисления,УжеУдержано");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("Удержания", МассивУдержания);
	
	УдалитьВТ = Новый Массив;
	
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРаспределениеНачисленийТекущегоДокумента") Тогда
		ЗарплатаКадры.СоздатьПустуюВТ(Запрос.МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоСотрудникам", "ВТРаспределениеНачисленийТекущегоДокумента");
		УдалитьВТ.Добавить("ВТРаспределениеНачисленийТекущегоДокумента");
	КонецЕсли;
	
	Если ОкончательныйРасчет Тогда
		
		Если Авансом Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленияУдержания.Сотрудник КАК Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Территория,
			|	НачисленияУдержания.Подразделение КАК Подразделение,
			|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПолученияДохода,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ) КАК КатегорияДохода,
			|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержания
			|ГДЕ
			|	НачисленияУдержания.Организация = &Организация
			|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
			|	И НачисленияУдержания.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И НачисленияУдержания.ФизическоеЛицо В(&ФизическиеЛица)
			|	И НачисленияУдержания.Регистратор <> &ИсключаемыйРегистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержания.Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо,
			|	НачисленияУдержания.Подразделение,
			|	НачисленияУдержания.НачислениеУдержание,
			|	НачисленияУдержания.СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов
			|
			|ИМЕЮЩИЕ
			|	СУММА(НачисленияУдержания.Сумма) <> 0";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияУдержания.Сотрудник КАК Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК Территория,
			|	НачисленияУдержания.Подразделение КАК Подразделение,
			|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
			|	НачисленияУдержания.ДатаПолученияДохода КАК ДатаПолученияДохода,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
			|	НачисленияУдержания.КатегорияДохода КАК КатегорияДохода,
			|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
			|ГДЕ
			|	НачисленияУдержания.Организация = &Организация
			|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
			|	И НачисленияУдержания.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И НачисленияУдержания.ФизическоеЛицо В(&ФизическиеЛица)
			|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
			|	И НачисленияУдержания.Регистратор <> &ИсключаемыйРегистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержания.Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо,
			|	НачисленияУдержания.Подразделение,
			|	НачисленияУдержания.НачислениеУдержание,
			|	НачисленияУдержания.СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов,
			|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
			|	НачисленияУдержания.ДатаПолученияДохода,
			|	НачисленияУдержания.КатегорияДохода
			|
			|ИМЕЮЩИЕ
			|	СУММА(НачисленияУдержания.Сумма) <> 0";
			
		КонецЕсли;
		
		ДанныеДляРаспределения.УжеУдержано = Запрос.Выполнить().Выгрузить();
		
		СоздатьВТРаспределениеНачислений(ПараметрыРаспределения, МассивФизическихЛиц, ИсключаемыйРегистратор);
		УдалитьВТ.Добавить("ВТРаспределениеНачислений");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Территория КАК Территория,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТНачисленияДляБазыНДФЛ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|		Начисления.Сотрудник КАК Сотрудник,
		|		Начисления.Подразделение КАК Подразделение,
		|		ВЫБОР
		|			КОГДА Начисления.ТерриторияВыполненияРаботВОрганизации ЕСТЬ НЕ NULL 
		|					И Начисления.ТерриторияВыполненияРаботВОрганизации <> НЕОПРЕДЕЛЕНО
		|					И Начисления.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|					И Начисления.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				ТОГДА Начисления.ТерриторияВыполненияРаботВОрганизации
		|			ИНАЧЕ Начисления.Подразделение
		|		КОНЕЦ КАК Территория,
		|		Начисления.Начисление КАК Начисление,
		|		Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|		Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|		Начисления.ДатаНачала КАК ДатаНачала,
		|		Начисления.Сумма КАК Сумма
		|	ИЗ
		|		ВТРаспределениеНачислений КАК Начисления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Начисления.ФизическоеЛицо,
		|		Начисления.Сотрудник,
		|		Начисления.Подразделение,
		|		ВЫБОР
		|			КОГДА Начисления.ТерриторияВыполненияРаботВОрганизации ЕСТЬ НЕ NULL 
		|					И Начисления.ТерриторияВыполненияРаботВОрганизации <> НЕОПРЕДЕЛЕНО
		|					И Начисления.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|					И Начисления.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				ТОГДА Начисления.ТерриторияВыполненияРаботВОрганизации
		|			ИНАЧЕ Начисления.Подразделение
		|		КОНЕЦ,
		|		Начисления.НачислениеУдержание,
		|		Начисления.СтатьяФинансирования,
		|		Начисления.СтатьяРасходов,
		|		Начисления.ДатаНачала,
		|		Начисления.Сумма
		|	ИЗ
		|		ВТРаспределениеНачисленийТекущегоДокумента КАК Начисления) КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.СтатьяФинансирования,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Подразделение,
		|	Начисления.Территория,
		|	Начисления.Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.СтатьяРасходов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияДляБазыНДФЛ.Сотрудник КАК Сотрудник,
		|	НачисленияДляБазыНДФЛ.Территория КАК Территория,
		|	НачисленияДляБазыНДФЛ.Подразделение КАК Подразделение,
		|	НачисленияДляБазыНДФЛ.Начисление КАК Начисление,
		|	НачисленияДляБазыНДФЛ.ДатаНачала КАК ДатаНачала,
		|	НачисленияДляБазыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияДляБазыНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НачисленияДляБазыНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
		|	НачисленияДляБазыНДФЛ.Сумма КАК Сумма
		|ИЗ
		|	ВТНачисленияДляБазыНДФЛ КАК НачисленияДляБазыНДФЛ";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Начисления.ТерриторияВыполненияРаботВОрганизации ЕСТЬ НЕ NULL 
		|				И Начисления.ТерриторияВыполненияРаботВОрганизации <> НЕОПРЕДЕЛЕНО
		|				И Начисления.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|				И Начисления.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА Начисления.ТерриторияВыполненияРаботВОрганизации
		|		ИНАЧЕ Начисления.Подразделение
		|	КОНЕЦ КАК Территория,
		|	Начисления.НачислениеУдержание КАК Начисление,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТНачисленияДляБазыНДФЛ
		|ИЗ
		|	ВТРаспределениеНачисленийТекущегоДокумента КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Подразделение,
		|	Начисления.НачислениеУдержание,
		|	Начисления.ДатаНачала,
		|	ВЫБОР
		|		КОГДА Начисления.ТерриторияВыполненияРаботВОрганизации ЕСТЬ НЕ NULL 
		|				И Начисления.ТерриторияВыполненияРаботВОрганизации <> НЕОПРЕДЕЛЕНО
		|				И Начисления.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|				И Начисления.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА Начисления.ТерриторияВыполненияРаботВОрганизации
		|		ИНАЧЕ Начисления.Подразделение
		|	КОНЕЦ,
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СтатьяРасходов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.Территория КАК Территория,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.Сумма КАК Сумма
		|ИЗ
		|	ВТНачисленияДляБазыНДФЛ КАК Начисления";
		
	КонецЕсли;
	
	ДанныеДляРаспределения.БазаВсеНачисления = Запрос.Выполнить().Выгрузить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ, Истина);
	
	Возврат ДанныеДляРаспределения;

КонецФункции

Функция ДанныеДляРаспределенияУдержаний(ПараметрыРаспределения, МассивФизическихЛиц, МассивУдержания, ИсключаемыйРегистратор)
	
	Организация 			= ПараметрыРаспределения.Организация;
	ПериодРегистрации 		= ПараметрыРаспределения.ПериодРегистрации;
	ОкончательныйРасчет 	= ПараметрыРаспределения.ОкончательныйРасчет;
	МенеджерВременныхТаблиц = ПараметрыРаспределения.МенеджерВременныхТаблиц;
	Авансом 				= ПараметрыРаспределения.Авансом;
	
	ДанныеДляРаспределения = Новый Структура("БазовыеНачисления,УжеУдержано");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("Удержания", МассивУдержания);
	
	УдалитьВТ = Новый Массив;
	
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРаспределениеНачисленийТекущегоДокумента") Тогда
		ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц,"РегистрНакопления.НачисленияУдержанияПоСотрудникам","ВТРаспределениеНачисленийТекущегоДокумента");
		УдалитьВТ.Добавить("ВТРаспределениеНачисленийТекущегоДокумента");
	КонецЕсли;
	
	Если ОкончательныйРасчет Тогда
		
		Если Авансом Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленияУдержания.Сотрудник КАК Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияУдержания.Подразделение КАК Подразделение,
			|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
			|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
			|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержания
			|ГДЕ
			|	НачисленияУдержания.Организация = &Организация
			|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
			|	И НачисленияУдержания.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И НачисленияУдержания.ФизическоеЛицо В(&ФизическиеЛица)
			|	И НачисленияУдержания.Регистратор <> &ИсключаемыйРегистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержания.Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо,
			|	НачисленияУдержания.Подразделение,
			|	НачисленияУдержания.НачислениеУдержание,
			|	НачисленияУдержания.СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов
			|
			|ИМЕЮЩИЕ
			|	СУММА(НачисленияУдержания.Сумма) <> 0";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленияУдержания.Сотрудник КАК Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияУдержания.Подразделение КАК Подразделение,
			|	НачисленияУдержания.НачислениеУдержание КАК ВидУдержания,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
			|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
			|	НачисленияУдержания.Контрагент КАК Контрагент,
			|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
			|ГДЕ
			|	НачисленияУдержания.Организация = &Организация
			|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
			|	И НачисленияУдержания.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И НачисленияУдержания.ФизическоеЛицо В(&ФизическиеЛица)
			|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
			|	И НачисленияУдержания.Регистратор <> &ИсключаемыйРегистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержания.Сотрудник,
			|	НачисленияУдержания.ФизическоеЛицо,
			|	НачисленияУдержания.Подразделение,
			|	НачисленияУдержания.НачислениеУдержание,
			|	НачисленияУдержания.СтатьяФинансирования,
			|	НачисленияУдержания.СтатьяРасходов,
			|	НачисленияУдержания.ДокументОснование,
			|	НачисленияУдержания.Контрагент
			|
			|ИМЕЮЩИЕ
			|	СУММА(НачисленияУдержания.Сумма) <> 0";
			
		КонецЕсли;
		
		ДанныеДляРаспределения.УжеУдержано = Запрос.Выполнить().Выгрузить();
		
		СоздатьВТРаспределениеНачислений(ПараметрыРаспределения, МассивФизическихЛиц, ИсключаемыйРегистратор);
		УдалитьВТ.Добавить("ВТРаспределениеНачислений");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Сотрудники.ГоловнойСотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК ГоловнойСотрудник,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.Сотрудник КАК Сотрудник,
		|		Начисления.Подразделение КАК Подразделение,
		|		Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|		Начисления.Начисление КАК Начисление,
		|		ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|		Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|		Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|		Начисления.Сумма КАК Сумма
		|	ИЗ
		|		ВТРаспределениеНачислений КАК Начисления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Начисления.Сотрудник,
		|		Начисления.Подразделение,
		|		Начисления.ФизическоеЛицо,
		|		Начисления.НачислениеУдержание,
		|		ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|		Начисления.СтатьяФинансирования,
		|		Начисления.СтатьяРасходов,
		|		Начисления.Сумма
		|	ИЗ
		|		ВТРаспределениеНачисленийТекущегоДокумента КАК Начисления) КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО Начисления.Сотрудник = Сотрудники.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Сотрудники.ГоловнойСотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)),
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СтатьяРасходов,
		|	Начисления.ПодразделениеУчетаЗатрат
		|
		|ИМЕЮЩИЕ
		|	СУММА(Начисления.Сумма) <> 0";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Сотрудники.ГоловнойСотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК ГоловнойСотрудник,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.НачислениеУдержание КАК Начисление,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ИЗ
		|	ВТРаспределениеНачисленийТекущегоДокумента КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО Начисления.Сотрудник = Сотрудники.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Сотрудники.ГоловнойСотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)),
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.НачислениеУдержание,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СтатьяРасходов
		|
		|ИМЕЮЩИЕ
		|	СУММА(Начисления.Сумма) <> 0";
		
	КонецЕсли;
	
	ДанныеДляРаспределения.БазовыеНачисления = Запрос.Выполнить().Выгрузить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ, Истина);
	
	Возврат ДанныеДляРаспределения;

КонецФункции

Процедура СоздатьВТРаспределениеНачислений(ПараметрыРаспределения, МассивФизическихЛиц, ИсключаемыйРегистратор, ДляНДФЛ = Ложь)
	
	Организация 			= ПараметрыРаспределения.Организация;
	ПериодРегистрации 		= ПараметрыРаспределения.ПериодРегистрации;
	МенеджерВременныхТаблиц = ПараметрыРаспределения.МенеджерВременныхТаблиц;
	Авансом 				= ПараметрыРаспределения.Авансом;
	ОграничениеВзысканий    = ПараметрыРаспределения.ОграничениеВзысканий;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	&ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.НачислениеУдержание КАК Начисление,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачислений
	|ИЗ
	|	#ИмяТаблицыНачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	И Начисления.Регистратор <> &ИсключаемыйРегистратор
	|	И &ДанныеМежрасчетногоПериода
	|	И Начисления.ФизическоеЛицо В(&ФизическиеЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.Подразделение,
	|	&ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.НачислениеУдержание,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка),
	|	Начисления.СтатьяРасходов,
	|	Начисления.ДатаНачала,
	|	Начисления.Сумма
	|ИЗ
	|	#ИмяТаблицыНачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы)
	|	И Начисления.Регистратор <> &ИсключаемыйРегистратор
	|	И Начисления.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|	И &ДанныеМежрасчетногоПериода
	|	И Начисления.ФизическоеЛицо В(&ФизическиеЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.Подразделение,
	|	&ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.НачислениеУдержание,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка),
	|	Начисления.СтатьяРасходов,
	|	Начисления.ДатаНачала,
	|	Начисления.Сумма
	|ИЗ
	|	#ИмяТаблицыНачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|	И Начисления.Регистратор <> &ИсключаемыйРегистратор
	|	И Начисления.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|	И &ДанныеМежрасчетногоПериода
	|	И Начисления.ФизическоеЛицо В(&ФизическиеЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.Подразделение,
	|	&ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.НачислениеУдержание,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка),
	|	Начисления.СтатьяРасходов,
	|	Начисления.ДатаНачала,
	|	Начисления.Сумма
	|ИЗ
	|	#ИмяТаблицыНачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|	И Начисления.Регистратор <> &ИсключаемыйРегистратор
	|	И Начисления.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов)
	|	И &ДанныеМежрасчетногоПериода
	|	И Начисления.ФизическоеЛицо В(&ФизическиеЛица)";
	
	Если Авансом Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеМежрасчетногоПериода", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТерриторияВыполненияРаботВОрганизации", "ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыНачисленияУдержанияПоСотрудникам", "РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТерриторияВыполненияРаботВОрганизации", "Начисления.ТерриторияВыполненияРаботВОрганизации");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыНачисленияУдержанияПоСотрудникам", "РегистрНакопления.НачисленияУдержанияПоСотрудникам");
		
		Если ОграничениеВзысканий Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеМежрасчетногоПериода", "ИСТИНА");
			
		Иначе
			
			Если ДляНДФЛ Тогда
				
				ТекстЗапросаУчитыватьВРаспределенииНДФЛ = ТекстЗапроса;
				ТекстЗапросаУчитыватьВРаспределенииНДФЛ = СтрЗаменить(ТекстЗапросаУчитыватьВРаспределенииНДФЛ, "ПОМЕСТИТЬ ВТРаспределениеНачислений", "");
				
				УсловиеДляЗамены = "Начисления.ДанныеМежрасчетногоПериод
				|И Начисления.УчитыватьВРаспределенииНДФЛ";
				ТекстЗапросаУчитыватьВРаспределенииНДФЛ = СтрЗаменить(ТекстЗапросаУчитыватьВРаспределенииНДФЛ,"&ДанныеМежрасчетногоПериода",УсловиеДляЗамены);
				
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + ТекстЗапросаУчитыватьВРаспределенииНДФЛ;
				
			КонецЕсли;
			
			ЕдиновременныеПособия = ОтражениеЗарплатыВУчетеРасширенный.ВидыОсобыхНачисленийЕдиновременныеПособия();
			Запрос.УстановитьПараметр("ЕдиновременныеПособия", ЕдиновременныеПособия);
			УсловиеИсключатьМежрасчетныеВыплаты = "НЕ Начисления.ДанныеМежрасчетногоПериода И НЕ Начисления.НачислениеУдержание В (&ЕдиновременныеПособия)";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеМежрасчетногоПериода", УсловиеИсключатьМежрасчетныеВыплаты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ФормированияДвижений

Процедура ЗарегистрироватьПогашениеЗаймов(ДанныеДляПроведения, Отказ, ПогашениеЗаймов, ЗаписыватьДвижения) 
	
	Если ПогашениеЗаймов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	
	УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	
	УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.ТаблицаРаспределенияПоРабочимМестам();
	Для Каждого Строка Из ПогашениеЗаймов Цикл
		
		НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.ПериодДействия		= ПериодРегистрации;
		НоваяСтрока.Организация			= Организация;
		НоваяСтрока.НачислениеУдержание = Строка.ВидУдержания;
		Если Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
			Или Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		Иначе
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем движения 
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	// Данные для взаиморасчетов
	Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
		Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано Тогда
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли	
	КонецЦикла;

	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ПорядокВыплаты,
			Неопределено, УдержанияДляВзаиморасчетов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


