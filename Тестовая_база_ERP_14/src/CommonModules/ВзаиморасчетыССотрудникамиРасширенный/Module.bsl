
#Область ПрограммныйИнтерфейс

// См. ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс
Процедура ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	ВзаиморасчетыССотрудникамиБазовый.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	Списки.Вставить(Метаданные.Справочники.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением, Истина);
	Списки.Вставить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком, Истина);
	Списки.Вставить(Метаданные.Документы.НачальнаяЗадолженностьПоЗарплате, Истина);
	Списки.Вставить(Метаданные.Справочники.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ВедомостиНаВыплатуЗарплаты, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт

	ВзаиморасчетыССотрудникамиБазовый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
	Описание = Описание + "
	|Справочник.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы.Изменение.Организации
	|Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Чтение.ГруппыФизическихЛиц
	|Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Чтение.Организации
	|Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Изменение.ГруппыФизическихЛиц
	|Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Изменение.Организации
	|Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Чтение.ГруппыФизическихЛиц
	|Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Чтение.Организации
	|Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Изменение.ГруппыФизическихЛиц
	|Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Изменение.Организации
	|Документ.НачальнаяЗадолженностьПоЗарплате.Чтение.ГруппыФизическихЛиц
	|Документ.НачальнаяЗадолженностьПоЗарплате.Чтение.Организации
	|Документ.НачальнаяЗадолженностьПоЗарплате.Изменение.ГруппыФизическихЛиц
	|Документ.НачальнаяЗадолженностьПоЗарплате.Изменение.Организации
	|Справочник.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы.Изменение.Организации
	|ЖурналДокументов.ВедомостиНаВыплатуЗарплаты.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ВедомостиНаВыплатуЗарплаты.Чтение.Организации
	|РегистрСведений.МестаВыплатыЗарплатыОрганизаций.Чтение.Организации
	|РегистрСведений.МестаВыплатыЗарплатыОрганизаций.Изменение.Организации
	|РегистрСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты.Чтение.Организации
	|РегистрСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Сторнирование и перерасчеты

// Сторнирует зарплату, зарегистрированную указанным документом в учете взаиморасчетов с сотрудниками.
//
// Параметры:
//	Движения             - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент - ДокументСсылка                - Документ, записи которого необходимо сторнировать.
//	ПериодРегистрации    - Дата                          - Период, которым будут зарегистрированы сторно-записи (первое число месяца периода регистрации)
//                                                         Если не указан, будут сохранены периоды регистрации
//                                                         сторнируемых движений
//  Записывать           - Булево                        - Если Истина, то наборы будут записаны сразу, если Ложь, то
//                                                         наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьНачисленнуюЗарплату(Движения, ИсправленныйДокумент, ПериодРегистрации = Неопределено, Записывать = Ложь) Экспорт
	
	ИмяУчета = "ВзаиморасчетыССотрудникамиРасширенный";
	НаборыЗаписей = ОбщегоНазначенияБЗК.ДвиженияВСтруктуру(Движения);
	
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	
	НаборЗаписей = Неопределено;
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		Если НаборыЗаписей.Свойство(МетаданныеРегистра.Имя, НаборЗаписей)
			И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(НаборЗаписей, ИмяУчета) Тогда
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		КонецЕсли;	
		Если ПериодРегистрации <> Неопределено Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Период = ПериодРегистрации
			КонецЦикла	
		КонецЕсли;	
	КонецЦикла
	
КонецПроцедуры

Функция МетаданныеРегистровПодсистемы() Экспорт
	
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.ВзаиморасчетыССотрудниками);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ЗарплатаКВыплате);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ЗарплатаКВыплатеАвансом);
	Регистры.Добавить(Метаданные.РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками);
	
	Возврат Регистры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка наличия начислений и выплат

// Проверяет, регистрировалось ли во взаиморасчетах начисление зарплаты указанным документом.
//
// Параметры:
//		ДокументОснование - Ссылка - Документ, по которому требуется проверить регистрацию начисленной зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если документом регистрировалась зарплата к выплате, иначе Ложь.
//
Функция ЗарегистрированаНачисленнаяЗарплатаДокументом(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗарегистрированаНачисленнаяЗарплатаДокументом
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ЗарплатаКВыплате.Регистратор = &ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет, регистрировалась ли во взаиморасчетах выплата зарплаты по указанному документу-основанию.
//
// Параметры:
//		ДокументОснование - Ссылка - Документ, по которому требуется проверить выплату зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если по документу выплачивалась зарплата, иначе Ложь.
//
Функция ЗарегистрированаВыплаченнаяЗарплатаПоДокументу(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗарегистрированаВыплаченнаяЗарплатаПоДокументу
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаКВыплате.ДокументОснование = &ДокументОснование
	|	И ЗарплатаКВыплате.Регистратор <> &ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет, регистрировалась ли во взаиморасчетах выплата зарплаты за указанный период.
//
// Параметры:
//		Организация          - СправочникСсылка.Организация - организация, в которой проверяется наличие выплат.
//		ПериодВзаиморасчетов - Дата                         - Период, за который требуется проверить выплату зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если за период взаиморасчетов выплачивалась зарплата, иначе Ложь.
//
Функция ЗарегистрированаВыплаченнаяЗарплатаЗаПериод(Организация, ПериодВзаиморасчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", НачалоМесяца(ПериодВзаиморасчетов));
	
	Если ПараметрыСеанса.АльтернативныйПодборСпискаСотрудников Тогда
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗарегистрированаВыплаченнаяЗарплатаЗаПериод
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|		ПО (ВзаиморасчетыССотрудниками.Регистратор = ЗарплатаКВыплате.Регистратор)
		|ГДЕ
		|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ЗарплатаКВыплате.Организация = &Организация
		|	И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодВзаиморасчетов
		|	И ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты)";
	Иначе	
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗарегистрированаВыплаченнаяЗарплатаЗаПериод
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ЗарплатаКВыплате.Организация = &Организация
		|	И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодВзаиморасчетов
		|	И ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты) В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ВзаиморасчетыССотрудниками.ВидВзаиморасчетов
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|			ГДЕ
		|				ВзаиморасчетыССотрудниками.Регистратор = ЗарплатаКВыплате.Регистратор
		|				И ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))";
	КонецЕсли;	
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Места выплаты зарплаты

Функция ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() Экспорт
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыОрганизаций() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
КонецФункции	

Функция ДоступноЧтениеМестВыплатыЗарплатыПодразделений() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыПодразделений);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыПодразделений() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() 
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыПодразделений);
КонецФункции	

Функция ДоступноЧтениеМестВыплатыЗарплатыСотрудников() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыПодразделений() 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыСотрудников() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыПодразделений() 
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников);
КонецФункции	

// Возвращает информацию о настройке места выплаты для организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций
//
Функция МестоВыплатыЗарплатыОрганизации(Организация) Экспорт
	
	МестоВыплатыЗарплатыОрганизации = РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыОрганизации.Организация = Организация;
	МестоВыплатыЗарплатыОрганизации.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыОрганизации.Выбран() Тогда
		МестоВыплатыЗарплатыОрганизации.Организация = Организация;
		МестоВыплатыЗарплатыОрганизации.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса
	КонецЕсли;	
	
	Возврат МестоВыплатыЗарплатыОрганизации
	
КонецФункции

// Возвращает информацию о настройке места выплаты для подразделения.
//
// Параметры:
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений
//
Функция МестоВыплатыЗарплатыПодразделения(Подразделение, Знач Организация = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Владелец");
	КонецЕсли;	
	
	МестоВыплатыЗарплатыПодразделения = РегистрыСведений.МестаВыплатыЗарплатыПодразделений.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыПодразделения.Подразделение	= Подразделение;
	МестоВыплатыЗарплатыПодразделения.Организация	= Организация;
	
	МестоВыплатыЗарплатыПодразделения.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыПодразделения.Выбран() Тогда
		МестоВыплатыЗарплатыПодразделения.Подразделение = Подразделение;
		МестоВыплатыЗарплатыПодразделения.Организация	= Организация;
	КонецЕсли;	
		
	Возврат МестоВыплатыЗарплатыПодразделения
	
КонецФункции

// Возвращает информацию о месте выплаты подразделения с учетом организации.
//
// Параметры:
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//	Иерархически  - булево, учитывать ли место выплаты организации.
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций.
//	или Неопределено
//
Функция МестоВыплатыЗарплатыПодразделенияОрганизации(Подразделение) Экспорт
	
	МестоВыплаты = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ МестаВыплатыЗарплатыПодразделений.Вид ЕСТЬ NULL 
	|			ТОГДА МестаВыплатыЗарплатыПодразделений.Подразделение
	|		КОГДА НЕ МестаВыплатыЗарплатыОрганизаций.Вид ЕСТЬ NULL 
	|			ТОГДА МестаВыплатыЗарплатыОрганизаций.Организация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Источник,
	|	ЕСТЬNULL(МестаВыплатыЗарплатыПодразделений.Вид, МестаВыплатыЗарплатыОрганизаций.Вид) КАК Вид,
	|	ЕСТЬNULL(МестаВыплатыЗарплатыПодразделений.МестоВыплаты, МестаВыплатыЗарплатыОрганизаций.МестоВыплаты) КАК МестоВыплаты,
	|	ПодразделенияОрганизаций.Владелец КАК Организация
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
	|		ПО (МестаВыплатыЗарплатыПодразделений.Подразделение = ПодразделенияОрганизаций.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
	|		ПО (МестаВыплатыЗарплатыОрганизаций.Организация = ПодразделенияОрганизаций.Владелец)
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Подразделение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыПодразделений.СоздатьМенеджерЗаписи();
			МестоВыплаты.Подразделение	= Выборка.Источник;
			МестоВыплаты.Организация	= Выборка.Организация;
			МестоВыплаты.Вид			= Выборка.Вид;
			МестоВыплаты.МестоВыплаты = Выборка.МестоВыплаты;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.Организации") Тогда
			МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
			МестоВыплаты.Организация	= Выборка.Организация;
			МестоВыплаты.Вид			= Выборка.Вид;
			МестоВыплаты.МестоВыплаты	= Выборка.МестоВыплаты;
		Иначе	
			МестоВыплаты = Неопределено
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат МестоВыплаты
	
КонецФункции

// Возвращает информацию о настройке места выплаты зарплаты сотрудника.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыСотрудников
//
Функция МестоВыплатыЗарплатыСотрудника(Сотрудник, Знач ФизическоеЛицо = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;	
	
	МестоВыплатыЗарплатыСотрудника = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыСотрудника.Сотрудник		= Сотрудник;
	МестоВыплатыЗарплатыСотрудника.ФизическоеЛицо	= ФизическоеЛицо;
	МестоВыплатыЗарплатыСотрудника.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыСотрудника.Выбран() Тогда
		МестоВыплатыЗарплатыСотрудника.Сотрудник		= Сотрудник;
		МестоВыплатыЗарплатыСотрудника.ФизическоеЛицо	= ФизическоеЛицо
	КонецЕсли;	
	
	Возврат МестоВыплатыЗарплатыСотрудника
	
КонецФункции

// Возвращает информацию о настройке места выплаты зарплаты сотрудника с учетом подразделения.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение
//	РегистрСведенийМенеджер.МестаВыплатыЗарплатыСотрудников,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций.
//	или Неопределено
//
Функция МестоВыплатыЗарплатыСотрудникаПодразделения(Сотрудник, Знач ФизическоеЛицо, Подразделение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;	
	
	МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МестоВыплаты.Сотрудник		= Сотрудник;
	МестоВыплаты.ФизическоеЛицо	= ФизическоеЛицо;
	МестоВыплаты.Прочитать();
	
	Если НЕ МестоВыплаты.Выбран() Тогда
		МестоВыплаты = МестоВыплатыЗарплатыПодразделенияОрганизации(Подразделение);
	КонецЕсли;	
	
	Возврат МестоВыплаты
	
КонецФункции

// Возвращает информацию о местах выплаты зарплаты сотрудников.
//
// Параметры:
//	Сотрудники - массив СправочникСсылка.Сотрудники.
//	ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение
//		Таблица значений с колонками:
//			- Сотрудник (СправочникСсылка.Сотрудники)
//			- Вид (ПеречислениеСсылка.ВидыМестВыплатыЗарплаты)
//			- МестоВыплаты.
//
Функция МестаВыплатыЗарплатыСотрудников(Сотрудники, ВидыМестВыплаты = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники",		Сотрудники);
	Запрос.УстановитьПараметр("ВидыМестВыплаты",?(ВидыМестВыплаты = Неопределено, Перечисления.ВидыМестВыплатыЗарплаты.ВсеЗначения(), ВидыМестВыплаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестаВыплатыЗарплатыСотрудников.Сотрудник КАК Сотрудник,
	|	МестаВыплатыЗарплатыСотрудников.МестоВыплаты КАК МестоВыплаты
	|ИЗ
	|	РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|ГДЕ
	|	МестаВыплатыЗарплатыСотрудников.Сотрудник В(&Сотрудники)
	|	И МестаВыплатыЗарплатыСотрудников.Вид В(&ВидыМестВыплаты)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает представление места выплаты зарплаты в виде строки.
//
// Параметры:
//	МестоВыплатыЗарплаты - РегистрСведенийМенеджер регистра МестоВыплатыЗарплаты (Организаций, Подразделений,
//	                       Сотрудников).
//	ПредставлениеНеуказанного - необязательная строка с текстом представления незаданного места выплаты.
//
// Возвращаемое значение
//	строка
//
Функция ПредставлениеМестаВыплатыЗарплаты(МестоВыплатыЗарплаты, ПредставлениеНеуказанного = "") Экспорт
	
	МестаВыплатыЗарплаты = Новый Массив;
	МестаВыплатыЗарплаты.Добавить(МестоВыплатыЗарплаты);
	
	ПредставленияНазначенийМестВыплаты = Новый Соответствие;
	ПредставленияНазначенийМестВыплаты.Вставить(
		Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций"), 
		НСтр("ru = 'Как всему подразделению:';
			|en = 'As to the entire department:'"));
	ПредставленияНазначенийМестВыплаты.Вставить(
		Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений"), 
		НСтр("ru = 'Как всему подразделению:';
			|en = 'As to the entire department:'"));

	ПредставленияМестВыплатыЗарплаты = ПредставленияМестВыплатыЗарплаты(МестаВыплатыЗарплаты, ПредставленияНазначенийМестВыплаты);
	
	ПредставлениеМестаВыплатыЗарплаты = ПредставленияМестВыплатыЗарплаты[МестоВыплатыЗарплаты];
	ПредставлениеМестаВыплатыЗарплаты = ?(ЗначениеЗаполнено(ПредставлениеМестаВыплатыЗарплаты), ПредставлениеМестаВыплатыЗарплаты, ПредставлениеНеуказанного); 
	
	Возврат ПредставлениеМестаВыплатыЗарплаты
	
КонецФункции	

// Возвращает представление мест выплаты зарплаты в виде соответствия место - представление.
//
// Параметры:
//	МестаВыплатыЗарплаты - массив элементов РегистрСведенийМенеджер одного из регистров МестоВыплатыЗарплаты
//	                       (Организаций, Подразделений, Сотрудников).
//	ПредставленияНазначенийМестВыплаты - соответствие (тип менеджера регистра сведений) - представление назначения.
//		Например Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений") - "Как всему подразделению:".
//
// Возвращаемое значение
//	соответствие
//
Функция ПредставленияМестВыплатыЗарплаты(МестаВыплатыЗарплаты, ПредставленияНазначенийМестВыплаты) Экспорт
	
	ПредставленияМестВыплатыЗарплаты = Новый Соответствие;
	
	МестаВыплаты = Новый ТаблицаЗначений;
	МестаВыплаты.Колонки.Добавить("Ссылка", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников.Ресурсы.МестоВыплаты.Тип);
	Для Каждого МестоВыплатыЗарплаты Из МестаВыплатыЗарплаты Цикл
		Если МестоВыплатыЗарплаты <> Неопределено Тогда
			МестоВыплаты = МестаВыплаты.Добавить();
			МестоВыплаты.Ссылка = МестоВыплатыЗарплаты.МестоВыплаты;
		КонецЕсли	
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МестаВыплаты", МестаВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВыплаты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТМестаВыплаты
	|ИЗ
	|	&МестаВыплаты КАК МестаВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВыплаты.Ссылка КАК МестоВыплаты,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(МестаВыплаты.Ссылка) КАК Представление
	|ИЗ
	|	ВТМестаВыплаты КАК МестаВыплаты";
	
	ВыборкаПредставлений = Запрос.Выполнить().Выбрать();
	
	СтрокаПодстановкиМестоЕсть	= НСтр("ru = '%1 %2 «%3»';
										|en = '%1 %2 «%3»'");
	СтрокаПодстановкиМестоПустое= НСтр("ru = '%1 %2';
										|en = '%1 %2'");
	
	Для Каждого МестоВыплатыЗарплаты Из МестаВыплатыЗарплаты Цикл
		
		Представление = "";
		
		ВыборкаПредставлений.Сбросить();
		Если МестоВыплатыЗарплаты <> Неопределено И ВыборкаПредставлений.НайтиСледующий(МестоВыплатыЗарплаты.МестоВыплаты, "МестоВыплаты") Тогда
			Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
				
				СтрокаПодстановки = ?(ЗначениеЗаполнено(ВыборкаПредставлений.Представление), СтрокаПодстановкиМестоЕсть, СтрокаПодстановкиМестоПустое);
				
				ПредставлениеНазначенияМестаВыплаты = ПредставленияНазначенийМестВыплаты[ТипЗнч(МестоВыплатыЗарплаты)];
				ПредставлениеНазначенияМестаВыплаты = ?(ЗначениеЗаполнено(ПредставлениеНазначенияМестаВыплаты), ПредставлениеНазначенияМестаВыплаты, "");

				Представление = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						СтрокаПодстановки, 
						ПредставлениеНазначенияМестаВыплаты, 
						МестоВыплатыЗарплаты.Вид, 
						ВыборкаПредставлений.Представление)
			КонецЕсли;              
		КонецЕсли;              
					
		ПредставленияМестВыплатыЗарплаты.Вставить(МестоВыплатыЗарплаты, СокрЛП(Представление))
		
	КонецЦикла;	
	
	Возврат ПредставленияМестВыплатыЗарплаты;
	
КонецФункции	

// Проверяет информацию о настройке мест выплаты для организации.
//
// Параметры:
//	МестоВыплатыЗарплатыОрганизации 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыОрганизации(МестоВыплатыЗарплатыОрганизации, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыОрганизации, 
		РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Проверяет информацию о настройке мест выплаты для подразделения.
//
// Параметры:
//	МестоВыплатыЗарплатыПодразделения 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыПодразделения(МестоВыплатыЗарплатыПодразделения, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыПодразделения, 
		РегистрыСведений.МестаВыплатыЗарплатыПодразделений.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Проверяет информацию о настройке мест выплаты для подразделения.
//
// Параметры:
//	МестоВыплатыЗарплатыСотрудника 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыСотрудников
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыСотрудника(МестоВыплатыЗарплатыСотрудника, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыСотрудника, 
		РегистрыСведений.МестаВыплатыЗарплатыСотрудников.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Сохраняет информацию о настройке места выплаты.
//
// Параметры:
//	МестоВыплатыЗарплаты - РегистрСведенийМенеджерЗаписи регистра МестоВыплатыЗарплаты (Организаций, Подразделений,
//	                       Сотрудников).
//
Процедура ЗаписатьМестоВыплатыЗарплаты(МестоВыплатыЗарплаты) Экспорт
	
	Если МестоВыплатыЗарплаты.Модифицированность() Тогда
		Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
			МестоВыплатыЗарплаты.МестоВыплаты = ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты);
			МестоВыплатыЗарплаты.Записать();
		Иначе	
			МестоВыплатыЗарплаты.Удалить();
		КонецЕсли	
	КонецЕсли	
	
КонецПроцедуры

// Обработчик события ПередЗаписью модулей наборов записей регистров мест выплаты
//
// Параметры:
//	НаборЗаписей - РегистрСведенийНаборЗаписей
//	Отказ - Булево - Признак отказа от записи 
//	Замещение - Булево - Режим записи набора.
//	
Процедура МестаВыплатыЗарплатыПередЗаписью(НаборЗаписей, Отказ, Замещение) Экспорт
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаборЗаписей.Метаданные().ПолноеИмя());
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если МенеджерРегистра.ДопустимыеВидыМестВыплаты().Найти(Запись.Вид) = Неопределено Тогда
			ТекстСообщения = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недопустимый вид выплаты (%1)';
						|en = 'Unavailable payment kind (%1)'"),
					Запись.Вид);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
		КонецЕсли;	
		
		ОписаниеТипов = ОписаниеТипаМестаВыплатыПоВиду(Запись.Вид); 
		
		Если ОписаниеТипов = Неопределено Тогда
			Запись.МестоВыплаты = Неопределено
		Иначе
			Если ЗначениеЗаполнено(Запись.МестоВыплаты) И НЕ ОписаниеТипов.СодержитТип(ТипЗнч(Запись.МестоВыплаты)) Тогда
				ТекстСообщения = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место выплаты (%2) не соответствует виду выплаты (%1)';
							|en = 'Payment location (%2) does not correspond to payment kind (%1)'"),
						Запись.Вид, Запись.МестоВыплаты);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
			КонецЕсли;
			Запись.МестоВыплаты = ОписаниеТипов.ПривестиЗначение(Запись.МестоВыплаты);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Возвращает описание типов, соответствующее виду места выплаты.
//
// Параметры:
//	ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение
//	ОписаниеТипов
//
Функция ОписаниеТипаМестаВыплатыПоВиду(ВидМестаВыплаты) Экспорт
	
	ОписаниеТипов = Неопределено;

	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ЗарплатныеПроекты");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	КонецЕсли;	
	
	Возврат ОписаниеТипов
	
КонецФункции	

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "РегистрыСведений.МестаВыплатыЗарплатыПодразделений.ЗаполнитьОрганизацию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "РегистрыСведений.МестаВыплатыЗарплатыСотрудников.ЗаполнитьФизическоеЛицо";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ЗаполнитьФизическоеЛицоПлановыхАвансов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.7";
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьВыплатуОтпускаПоУходуЗаРебенком";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.119";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ЗаполнитьПериодыВзаиморасчетовЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.119";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ЗаполнитьПериодыВзаиморасчетовЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.121";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ЗаполнитьФизическиеЛицаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.121";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ЗаполнитьФизическиеЛицаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.135";
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.УстановитьХарактерВыплатыОкончательныхРасчетовПоОснованию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.141";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ЗаполнитьСостав";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.141";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ЗаполнитьСостав";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.148";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ЗаполнитьНДФЛВедомостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.158";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ПеренестиКомпенсацииИзВедомостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.166";
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьАванс";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.168";
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьПериодВзаиморасчетов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.199";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СогласоватьТабличныеЧастиВедомостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.63";
	Обработчик.Процедура = "РегистрыСведений.ПорядокВыплатыДокументов.ЗаполнитьПоДокументам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.90";
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьВыплатуДоначисления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.76";
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьВыплатуКомпенсацииЗадержкиЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.76";
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьПорядокВыплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.91";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ЗаполнитьДокументыОснованияВДвиженияхВедомостейПоРегиструРасчетыНалогоплательщиковСБюджетомПоНДФЛ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.44";
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьСуммаПоДокументу";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.11";
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьСостав";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.9";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("777adac0-047c-4e7c-8dab-e5d23644bd26");
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансом";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение документов-оснований в регистре накопления ""Зарплата к выплате авансом"".';
									|en = 'Fill in base documents in the ""Salary for payment as advance"" accumulation register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.12";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e5d5efc9-393d-4b71-828c-9ecb4b4f9e70");
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьВыплатуНачисленияПоДоговорам";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способа выплаты зарплаты ""Начисления по договорам"".';
									|en = 'Add the ""Accruals under contracts"" salary pay method.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.5";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c56b78c0-b75d-4d55-aa46-ba84728324e3");
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьВыплатуОтпусковИБольничныхПодРасчет";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способов выплаты зарплаты ""Больничные листы (под расчет)"" и ""Отпуска (под расчет)"".';
									|en = 'Add salary pay methods: ""Sick leave records (for calculation)"" and ""Leaves (for calculation)"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.151";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a0f1a0a3-645a-4fb7-8db7-7b4350992d5e");
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ЗаполнитьГруппуВидовДоговоров";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение групп видов договоров с сотрудниками в способах выплаты зарплаты.';
									|en = 'Fill in groups of kinds of contracts with employees to pay salary.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.152";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e77eb31e-f75a-40d5-8112-d1eabbb203a3");
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьВыплатыДенежногоДовольствияЗарплатыШтатнымВознагражденийДоговорникам";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способов выплаты денежного довольствия военнослужащим и вознаграждения по договором ГПХ.';
									|en = 'Add payment methods for military personnel allowance and remunerations under civil law contracts.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.51";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.НачальнаяЗадолженностьПоЗарплате.ЗаполнитьСпособВводаЗадолженности";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d1f617eb-9329-4dab-b250-b6bdd0d6ce1e"); 
	Обработчик.Комментарий = НСтр("ru = 'Заполнение способа ввода задолженности в документе Начальная задолженность по зарплате.';
									|en = 'Fill in the debt input method in the Initial salary debt document.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.113";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.УстановитьМежрасчетныйПорядокВыплатыПриОкончательномРасчетеПоОснованиям";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("864bb43d-5566-4ba6-a410-9fcaca1d9398"); 
	Обработчик.Комментарий = НСтр("ru = 'Установка порядка выплаты в межрасчет способов выплаты зарплаты с окончательным расчетом на основании межрасчетных документов.';
									|en = 'Set payment procedure outside the payroll period and salary pay methods with final calculation based on documents outside the payroll period.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.49";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26aa3b14-3050-421e-8544-0cca3c515b45");
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьВыплатуНачисленияЗарплаты";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способа выплаты зарплаты ""Начисление зарплаты"".';
									|en = 'Addition of the method for payment of the salary ""Salary accrual"".'");
	
КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицоПлановыхАвансов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеАвансы.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыБезФизическогоЛица
		|ИЗ
		|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	ПлановыеАвансы.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеАвансы.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеАвансы.Период,
		|	ПлановыеАвансы.Регистратор,
		|	ПлановыеАвансы.НомерСтроки,
		|	ПлановыеАвансы.Активность,
		|	ПлановыеАвансы.Сотрудник,
		|	ПлановыеАвансы.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПлановыеАвансы.ФизическоеЛицо КАК ФизическоеЛицо1,
		|	ПлановыеАвансы.СпособРасчетаАванса,
		|	ПлановыеАвансы.Аванс,
		|	ПлановыеАвансы.ДействуетДо,
		|	ПлановыеАвансы.СпособРасчетаАвансаПоОкончании,
		|	ПлановыеАвансы.АвансПоОкончании
		|ИЗ
		|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	ПлановыеАвансы.Регистратор В
		|			(ВЫБРАТЬ
		|				РегистраторыБезФизическогоЛица.Регистратор
		|			ИЗ
		|				ВТРегистраторыБезФизическогоЛица КАК РегистраторыБезФизическогоЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлановыеАвансы.Регистратор,
		|	ПлановыеАвансы.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ПлановыеАвансы.СоздатьНаборЗаписей();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьНДФЛВедомостей() Экспорт
	
	ПолныеИменаВедомостей = Новый Массив;
	ПолныеИменаВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПолноеИмя());
	ПолныеИменаВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПолноеИмя());
	ПолныеИменаВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ПолноеИмя());
	ПолныеИменаВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ПолноеИмя());
	
	Для Каждого ПолноеИмяВедомости Из ПолныеИменаВедомостей Цикл
		
		// Выбираем проведенные ведомости, имеющие пустую ТЧ НДФЛ
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ведомость.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТОбновляемыеВедомости
		|ИЗ
		|	#ВедомостьДокумент КАК Ведомость
		|ГДЕ
		|	Ведомость.Проведен
		|	И НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1 КАК Поле1
		|				ИЗ
		|					#ВедомостьНДФЛ КАК ВедомостьСостав
		|				ГДЕ
		|					ВедомостьСостав.Ссылка = Ведомость.Ссылка)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ПолноеИмяВедомости); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьНДФЛ",		ПолноеИмяВедомости + ".НДФЛ"); 
		Запрос.Выполнить();
		
		// Получаем движения проведенных ведомостей по регистру взаиморасчетов работников с налоговой.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Ссылка,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода КАК КодДохода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК ДокументОснование,
		|	СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
		|ГДЕ
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В
		|			(ВЫБРАТЬ
		|				ОбновляемыеВедомости.Ссылка
		|			ИЗ
		|				ВТОбновляемыеВедомости КАК ОбновляемыеВедомости)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			
			Ведомость = Выборка.Ссылка.ПолучитьОбъект();
			Ведомость.НДФЛ.Очистить();
			
			Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				
				СтрокаСостава = Ведомость.Состав.Найти(Выборка.ФизическоеЛицо, "ФизическоеЛицо");
				Если СтрокаСостава = Неопределено Тогда
					СтрокаСостава = Ведомость.Состав.Добавить();
					СтрокаСостава.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				КонецЕсли;	
				
				Пока Выборка.Следующий() Цикл
					
					СтрокаНДФЛ = Ведомость.НДФЛ.Добавить();
					СтрокаНДФЛ.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
					ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, Выборка);
					
				КонецЦикла;
			КонецЦикла;
			
			Ведомость.ОбменДанными.Загрузка = Истина;
			Ведомость.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЦикла

КонецПроцедуры	

Процедура ПеренестиКомпенсацииИзВедомостей() Экспорт
	
	ВедомостиСКомпенсацией = Новый Массив;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Данные для исправленных движений ведомостей на выплату зарплаты:
	// компенсации, начисленные ведомостями.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.Регистратор КАК Ссылка,
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Период КАК Период,
	|	НачисленияУдержания.Период КАК ПериодВзаиморасчетов,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)
	|	И (НачисленияУдержания.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк
	|			ИЛИ НачисленияУдержания.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу
	|			ИЛИ НачисленияУдержания.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением
	|			ИЛИ НачисленияУдержания.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержания.Регистратор,
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.Сотрудник.ФизическоеЛицо,
	|	НачисленияУдержания.Период,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	Период,
	|	Подразделение,
	|	СтатьяФинансирования,
	|	СтатьяРасходов";
	
	ВыборкаКомпенсаций = Запрос.Выполнить().Выбрать();
	Пока ВыборкаКомпенсаций.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		// запоминаем ведомость для будущего удаления компенсаций из начислений-удержаний
		ВедомостиСКомпенсацией.Добавить(ВыборкаКомпенсаций.Ссылка);
		
		// из взаиморасчетов удаляем начисления компенсаций
		
		Взаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		Взаиморасчеты.Отбор.Регистратор.Установить(ВыборкаКомпенсаций.Ссылка);
		Взаиморасчеты.Прочитать();
		
		ЗаписиКомпенсации = Новый Массив;
		Для Каждого ЗаписьВзаиморасчетов Из Взаиморасчеты Цикл
			Если ЗаписьВзаиморасчетов.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				ЗаписиКомпенсации.Добавить(ЗаписьВзаиморасчетов);
			КонецЕсли	
		КонецЦикла;	
		
		Для Каждого ЗаписьКомпенсации Из ЗаписиКомпенсации Цикл
			Взаиморасчеты.Удалить(ЗаписьКомпенсации);
		КонецЦикла;	
		
		Взаиморасчеты.ОбменДанными.Загрузка = Истина;
		Взаиморасчеты.Записать();
		
		// в ведомость и в ее зарплату к выплате добавляем выплату компенсации
		
		Ведомость = ВыборкаКомпенсаций.Ссылка.ПолучитьОбъект();
		
		ЗарплатаКВыплате = РегистрыНакопления.ЗарплатаКВыплате.СоздатьНаборЗаписей();
		ЗарплатаКВыплате.Отбор.Регистратор.Установить(ВыборкаКомпенсаций.Ссылка);
		ЗарплатаКВыплате.Прочитать();
		
		Пока ВыборкаКомпенсаций.Следующий() Цикл
			
			СтрокаСостава = Ведомость.Состав.Найти(ВыборкаКомпенсаций.ФизическоеЛицо, "ФизическоеЛицо");
			Если СтрокаСостава = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗарплаты = Ведомость.Зарплата.Добавить();
			СтрокаЗарплаты.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, ВыборкаКомпенсаций);
			СтрокаЗарплаты.КВыплате = ВыборкаКомпенсаций.Сумма;
			
			ЗаписьЗарплатаКВыплате = ЗарплатаКВыплате.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(ЗаписьЗарплатаКВыплате, ВыборкаКомпенсаций);
			ЗаписьЗарплатаКВыплате.СуммаКВыплате = ВыборкаКомпенсаций.Сумма;
			
		КонецЦикла;
		
		Ведомость.СуммаПоДокументу = Ведомость.Зарплата.Итог("КВыплате");
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();

		ЗарплатаКВыплате.ОбменДанными.Загрузка = Истина;
		ЗарплатаКВыплате.Записать();
		
	КонецЦикла;	
	
	// Данные для движений создаваемых документов КомпенсацияЗаЗадержкуЗарплаты:
	// сумма начисленной компенсации в разрезе периодов и организаций.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Период КАК Период,
	|	НачисленияУдержанияПоСотрудникам.Организация КАК Организация,
	|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	|	НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)
	|	И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк
	|			ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу
	|			ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением
	|			ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.Период,
	|	НачисленияУдержанияПоСотрудникам.Организация,
	|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	|	НачисленияУдержанияПоСотрудникам.Подразделение,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.Период,
	|	НачисленияУдержанияПоСотрудникам.Организация";
	
	
	ВыборкаНачислений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНачислений.СледующийПоЗначениюПоля("Период") Цикл
		Пока ВыборкаНачислений.СледующийПоЗначениюПоля("Организация") Цикл
			
			НовыйДокумент = Документы.КомпенсацияЗаЗадержкуЗарплаты.СоздатьДокумент();
			НовыйДокумент.Дата = КонецМесяца(ВыборкаНачислений.Период);
			НовыйДокумент.ПериодРегистрации	= ВыборкаНачислений.Период;
			НовыйДокумент.Организация		= ВыборкаНачислений.Организация;
			НовыйДокумент.СтатьяРасходов	= ОтражениеЗарплатыВБухучетеРасширенный.СтатьяРасходов290();
			
			Пока ВыборкаНачислений.Следующий() Цикл
				
				СтрокаДокумента = НовыйДокумент.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВыборкаНачислений);
				
			КонецЦикла;
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;	
	КонецЦикла;	
	
	// Очищаем движения ведомостей по начислениям-удержаниям
	ВедомостиСКомпенсацией = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВедомостиСКомпенсацией);
	Для Каждого Ведомость Из ВедомостиСКомпенсацией Цикл
		
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ведомость);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();

	КонецЦикла;	

	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры

Процедура СогласоватьТабличныеЧастиВедомостей() Экспорт
	
	СогласуемыеПоля = Новый Соответствие;
	СогласуемыеПоля.Вставить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу"),		"ФизическоеЛицо");
	СогласуемыеПоля.Вставить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"),			"ФизическоеЛицо, НомерЛицевогоСчета");
	СогласуемыеПоля.Вставить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением"),	"ФизическоеЛицо, БанковскийСчет");
	СогласуемыеПоля.Вставить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком"),	"ФизическоеЛицо");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВКассу.Состав КАК Состав
	|		ПО Зарплата.Ссылка = Состав.Ссылка
	|			И Зарплата.ИдентификаторСтроки = Состав.ИдентификаторСтроки
	|ГДЕ
	|	НЕ Зарплата.Ссылка.Номер ЕСТЬ NULL 
	|	И Состав.Ссылка ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Состав КАК Состав
	|		ПО Зарплата.Ссылка = Состав.Ссылка
	|			И Зарплата.ИдентификаторСтроки = Состав.ИдентификаторСтроки
	|ГДЕ
	|	НЕ Зарплата.Ссылка.Номер ЕСТЬ NULL 
	|	И (Состав.Ссылка ЕСТЬ NULL 
	|			ИЛИ Зарплата.НомерЛицевогоСчета <> Состав.НомерЛицевогоСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Состав КАК Состав
	|		ПО Зарплата.Ссылка = Состав.Ссылка
	|			И Зарплата.ИдентификаторСтроки = Состав.ИдентификаторСтроки
	|ГДЕ
	|	НЕ Зарплата.Ссылка.Номер ЕСТЬ NULL 
	|	И (Состав.Ссылка ЕСТЬ NULL 
	|			ИЛИ Зарплата.БанковскийСчет <> Состав.БанковскийСчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Состав КАК Состав
	|		ПО Зарплата.Ссылка = Состав.Ссылка
	|			И Зарплата.ИдентификаторСтроки = Состав.ИдентификаторСтроки
	|ГДЕ
	|	НЕ Зарплата.Ссылка.Номер ЕСТЬ NULL 
	|	И Состав.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		ЛишниеСтроки = Новый Массив;
		Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
			СтрокаСостава = Ведомость.Состав.Найти(СтрокаЗарплаты.ИдентификаторСтроки, "ИдентификаторСтроки");
			Если СтрокаСостава = Неопределено Тогда
				ЛишниеСтроки.Добавить(СтрокаЗарплаты);
			Иначе	
				ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСостава, СогласуемыеПоля[ТипЗнч(Выборка.Ссылка)])
			КонецЕсли	
		КонецЦикла;
		Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
			Ведомость.Зарплата.Удалить(ЛишняяСтрока);
		КонецЦикла;	
		
		Ведомость.СуммаПоДокументу = Ведомость.Зарплата.Итог("КВыплате");
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснованияВДвиженияхВедомостейПоРегиструРасчетыНалогоплательщиковСБюджетомПоНДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНДФЛ.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) КАК КоличествоДокументовОснований
	|ПОМЕСТИТЬ ВТВедомости
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка.Проведен
	|	И ВедомостьНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ВедомостьНДФЛ.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНДФЛ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНДФЛ.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка.Проведен
	|	И ВедомостьНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ВедомостьНДФЛ.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНДФЛ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНДФЛ.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка.Проведен
	|	И ВедомостьНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ВедомостьНДФЛ.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНДФЛ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНДФЛ.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка.Проведен
	|	И ВедомостьНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ВедомостьНДФЛ.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНДФЛ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетом.Регистратор КАК Регистратор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыНалогоплательщиковСБюджетом.ДокументОснование) КАК КоличествоДокументовОснований
	|ПОМЕСТИТЬ ВТДвижения
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетом
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетом.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТВедомости.Ссылка
	|			ИЗ
	|				ВТВедомости)
	|	И РасчетыНалогоплательщиковСБюджетом.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И РасчетыНалогоплательщиковСБюджетом.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетом.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Ссылка КАК Ссылка
	|ИЗ
	|	ВТВедомости КАК Ведомости
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвижения КАК Движения
	|		ПО Ведомости.Ссылка = Движения.Регистратор
	|ГДЕ
	|	Ведомости.КоличествоДокументовОснований <> ЕСТЬNULL(Движения.КоличествоДокументовОснований, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомости.Ссылка.Дата,
	|	Ведомости.Ссылка.ПериодРегистрации,
	|	Ведомости.Ссылка.Номер";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();	
		ЗаполнитьДокументыОснованияВДвиженияхВедомостиПоРегиструРасчетыНалогоплательщиковСБюджетомПоНДФЛ(Ведомость);	
	КонецЦикла	
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснованияВДвиженияхВедомостиПоРегиструРасчетыНалогоплательщиковСБюджетомПоНДФЛ(Ведомость, Отказ = Ложь)
	
	ИзмеренияУдержанногоНалога = "ФизическоеЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода, Подразделение, КодДохода, РегистрацияВНалоговомОргане, ВключатьВДекларациюПоНалогуНаПрибыль, ДокументОснование";
	УдержанныйНалог = Ведомость.НДФЛ.Выгрузить(, ИзмеренияУдержанногоНалога +", "+ "Сумма");
	УдержанныйНалог.Свернуть(ИзмеренияУдержанногоНалога, "Сумма");
	УдержанныйНалог.Колонки.Добавить("Ставка",Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавки"));
	УдержанныйНалог.ЗаполнитьЗначения(Перечисления.НДФЛСтавки.Ставка13, "Ставка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ведомость.Ссылка);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Ведомость.ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&Период КАК Период,
	|	ВедомостьНДФЛ.КодДохода КАК КодДохода,
	|	ВедомостьНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
	|ПОМЕСТИТЬ ВТСтавкаРезидента
	|ИЗ
	|	#ВедомостьНДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка = &Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьНДФЛ", Ведомость.Метаданные().ПолноеИмя() + ".НДФЛ");
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента2016(МенеджерВременныхТаблиц, "ВТСтавкаРезидента");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо,
	|	СтавкаНДФЛПоСтавкеРезидента.КодДохода,
	|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента,
	|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ
	|ИЗ
	|	ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
	|ГДЕ
	|	СтавкаНДФЛПоСтавкеРезидента.Период = &Период";
	ВыборкаСтавок = Запрос.Выполнить().Выбрать();
	
	ОтборСтавок = Новый Структура("ФизическоеЛицо, КодДохода, СтавкаНалогообложенияРезидента");
	Для Каждого СтрокаНалога Из УдержанныйНалог Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтавок, СтрокаНалога);
		ВыборкаСтавок.Сбросить();
		Если ВыборкаСтавок.НайтиСледующий(ОтборСтавок) Тогда
			СтрокаНалога.Ставка = ВыборкаСтавок.СтавкаНДФЛ
		КонецЕсли;	
	КонецЦикла;	
	
	Движения = Новый Структура;
	Движения.Вставить("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ",		РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СоздатьНаборЗаписей());
	Движения.Вставить("РасчетыНалогоплательщиковСБюджетомПоНДФЛ",	РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СоздатьНаборЗаписей());
	
	Для Каждого Движение Из Движения Цикл
		Движение.Значение.Отбор.Регистратор.Установить(Ведомость.Ссылка); 
	КонецЦикла;	
	
	УчетНДФЛ.СформироватьУдержанныйНалогПоТаблицеЗначений(Движения, Отказ, Ведомость.Организация, Ведомость.Дата, УдержанныйНалог, , Ложь);
	
	Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ОбменДанными.Загрузка = Истина;
	Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
	
КонецПроцедуры

Процедура ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансом(ПараметрыОбновления = Неопределено) Экспорт
	
	Регистраторы = ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансомРегистраторыКОбновлению();
	
	Если Регистраторы.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансомВыполнить(ПараметрыОбновления, Регистраторы)
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Настройки взаиморасчетов с сотрудниками

Функция НастройкиВзаиморасчетовССотрудниками() Экспорт
	
	НастройкиВзаиморасчетов = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(РегистрыСведений.НастройкиВзаиморасчетовССотрудниками.СоздатьМенеджерЗаписи(), Метаданные.РегистрыСведений.НастройкиВзаиморасчетовССотрудниками);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиВзаиморасчетов.ПроверятьЗаполнениеФинансированияВВедомостях КАК ПроверятьЗаполнениеФинансированияВВедомостях,
		|	НастройкиВзаиморасчетов.ПроверятьСоответствиеНачисленийИВыплат КАК ПроверятьСоответствиеНачисленийИВыплат
		|ИЗ
		|	РегистрСведений.НастройкиВзаиморасчетовССотрудниками КАК НастройкиВзаиморасчетов";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(НастройкиВзаиморасчетов, Выборка);
		
	КонецЕсли; 
	
	Возврат НастройкиВзаиморасчетов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////
/// Учет начисленной и выплаченной зарплаты.

Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Начисления, Удержания);
	
	/// Регистрация порядка выплаты документа
	ЕстьДвижениеПорядокВыплатыДокументов = Ложь;
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		ЕстьДвижениеПорядокВыплатыДокументов = Движения.Свойство("ПорядокВыплатыДокументов");
	Иначе
		ЕстьДвижениеПорядокВыплатыДокументов = Движения.Найти("ПорядокВыплатыДокументов") <> Неопределено;
	КонецЕсли;
	
	Если ЕстьДвижениеПорядокВыплатыДокументов Тогда
		Если Движения.ПорядокВыплатыДокументов.Количество() = 0 Тогда 
			ПорядокВыплатыДокумента = Движения.ПорядокВыплатыДокументов.Добавить();
			ПорядокВыплатыДокумента.ДокументОснование = Движения.ЗарплатаКВыплате.Отбор.Регистратор.Значение;
			ПорядокВыплатыДокумента.ПорядокВыплаты    = ПорядокВыплаты;
			Движения.ПорядокВыплатыДокументов.Записывать = Истина;
		Иначе
			ПорядокВыплатыДокумента = Движения.ПорядокВыплатыДокументов[0];
			Если ПорядокВыплатыДокумента.ПорядокВыплаты <> ПорядокВыплаты Тогда
				 ВызватьИсключение НСтр("ru = 'Все выплаты по документу должны иметь одинаковый порядок выплаты';
										|en = 'All payments against the document must have the same payment procedure '")
			КонецЕсли	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Зарплата) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Зарплата)
КонецПроцедуры

Процедура ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки)
КонецПроцедуры

Процедура ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ПорядокВыплаты) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ПорядокВыплаты)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции создания ведомостей на выплату зарплаты.

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	
	МенеджерДокументаПоМестуВыплаты = Неопределено;
	
	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыПеречислением
	Иначе
		МенеджерДокументаПоМестуВыплаты = ВзаиморасчетыССотрудникамиБазовый.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты)
	КонецЕсли;	
		
	Возврат МенеджерДокументаПоМестуВыплаты
	
КонецФункции

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда
		ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод
	Иначе	
		ВидВзаиморасчетов = ВзаиморасчетыССотрудникамиБазовый.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты)
	КонецЕсли;
	
	Возврат ВидВзаиморасчетов
	
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) Экспорт
	
	Если Параметры.СпособПолучения = Перечисления.СпособыПолученияЗарплатыКВыплате.Аванс Тогда 
		СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники);
	ИначеЕсли Параметры.СпособПолучения = Перечисления.СпособыПолученияЗарплатыКВыплате.ОтдельныйРасчет Тогда 
		СоздатьВТЗарплатаКВыплатеМежрасчет(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	Иначе	
		ВзаиморасчетыССотрудникамиБазовый.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	КонецЕсли;
	
	// если указан отбор по финансированию, то фильтруем по статьям
	ОтборПоСтатьям = Новый Массив;
	Если ЗначениеЗаполнено(Параметры.СтатьяФинансирования) Тогда
		ОтборПоСтатьям.Добавить("СтатьяФинансирования = &СтатьяФинансирования");
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.СтатьяРасходов) Тогда
		ОтборПоСтатьям.Добавить("СтатьяРасходов = &СтатьяРасходов");
	КонецЕсли;	
	Если ОтборПоСтатьям.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("СтатьяФинансирования",	Параметры.СтатьяФинансирования);
		Запрос.УстановитьПараметр("СтатьяРасходов",			Параметры.СтатьяРасходов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
		|	ЗарплатаКВыплате.КВыплате КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеПоУказаннымСтатьям
		|ИЗ
		|	ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	&ОтборПоСтатьям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗарплатаКВыплате
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
		|	ЗарплатаКВыплате.КВыплате КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплате
		|ИЗ
		|	ВТЗарплатаКВыплатеПоУказаннымСтатьям КАК ЗарплатаКВыплате";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтатьям", СтрСоединить(ОтборПоСтатьям, " И "));
		
		Запрос.Выполнить();
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) 
	
	// аванс при наличии окончательного расчета по сотруднику не выплачивается
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиБезОкончательногоРасчета
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник
	|				ИЗ
	|					РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|				ГДЕ
	|					ВзаиморасчетыССотрудниками.Период = &ПериодРегистрации
	|					И ВзаиморасчетыССотрудниками.Организация = &Организация
	|					И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты)
	|					И НЕ ВзаиморасчетыССотрудниками.Регистратор В (&ИгнорируемыеРегистраторы)
	|					И ВзаиморасчетыССотрудниками.Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ВзаиморасчетыССотрудникамиБазовый.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, "ВТСотрудникиБезОкончательногоРасчета")
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Основания", Параметры.ДокументыОснования);	
	
	Запрос.Текст =
	// Как указанные документы-основания, так и сторнированные ими документы.
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.ДокументОснование КАК Документ
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И (ЗарплатаКВыплате.ДокументОснование = ЗарплатаКВыплате.Регистратор
	|			ИЛИ ЗарплатаКВыплате.Сторно)
	|	И ЗарплатаКВыплате.ДокументОснование <> НЕОПРЕДЕЛЕНО"
	
	+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
	
	// Документы-основания, зарегистрированные в старых релизах 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И ЗарплатаКВыплате.ДокументОснование = НЕОПРЕДЕЛЕНО
	|	И ЗарплатаКВыплате.УдалитьДокументОснование <> НЕОПРЕДЕЛЕНО";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	// Остатки сумм к выплате по указанным сотрудникам и документам
	СоздатьВТЗарплатаКВыплатеМежрасчет3022(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, РезультатыЗапросов[0].Выгрузить().ВыгрузитьКолонку("Документ"));
	СоздатьВТЗарплатаКВыплатеМежрасчет3021(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, РезультатыЗапросов[1].Выгрузить().ВыгрузитьКолонку("Документ"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеМежрасчет.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеМежрасчет.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеМежрасчет.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеМежрасчет.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеМежрасчет.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплатеМежрасчет.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеМежрасчет3022 КАК ЗарплатаКВыплатеМежрасчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеМежрасчет.Сотрудник,
	|	ЗарплатаКВыплатеМежрасчет.ФизическоеЛицо,
	|	ЗарплатаКВыплатеМежрасчет.Подразделение,
	|	ЗарплатаКВыплатеМежрасчет.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяФинансирования,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяРасходов,
	|	ЗарплатаКВыплатеМежрасчет.ДокументОснование,
	|	ЗарплатаКВыплатеМежрасчет.КВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеМежрасчет3021 КАК ЗарплатаКВыплатеМежрасчет";

  	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет3022(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, ДокументыОснования)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",              Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",     КонецМесяца(Параметры.ПериодРегистрации));
	Запрос.УстановитьПараметр("Основания",                ДокументыОснования);	
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", Параметры.ИгнорируемыеРегистраторы);	
	
	// Остатки сумм к выплате по указанным сотрудникам и документам
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеМежрасчет3022
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				,
	|				ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|					И Организация = &Организация
	|					И Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники)
	|					И ДокументОснование В (&Основания)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|		И ЗарплатаКВыплате.Организация = &Организация
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)
	|		И ЗарплатаКВыплате.ДокументОснование В(&Основания)) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет3021(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, ДокументыОснования)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("Основания",					ДокументыОснования);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.Регистратор КАК ДокументОснование,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеМежрасчет3021
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И ЗарплатаКВыплате.Сотрудник В
	|			(ВЫБРАТЬ
	|				Сотрудники.Сотрудник
	|			ИЗ
	|				#ВТСотрудники КАК Сотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.Регистратор";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные) Экспорт
	
	// Получаем плановые авансы по настройкам
	
	Если Не ПустаяСтрока(КадровыеДанные) Тогда
		КадровыеДанные = КадровыеДанные + ",";
	КонецЕсли;
	КадровыеДанные = КадровыеДанные + "ТерриторияВыполненияРаботВОрганизации";
	
	ВзаиморасчетыССотрудникамиБазовый.СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные);
	
	// Перемещаем полученные авансы в служебную таблицу
	// Готовим фильтры для обращения к подсистемам.

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыйАванс.Сотрудник КАК Сотрудник,
	|	ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыйАванс.Подразделение КАК Подразделение,
	|	ПлановыйАванс.ТерриторияВыполненияРаботВОрганизации,
	|	ПлановыйАванс.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ПлановыйАванс.СтатьяРасходов КАК СтатьяРасходов,
	|	ПлановыйАванс.СуммаКВыплате КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАвансБазовый
	|ИЗ
	|	ВТПлановыйАванс КАК ПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлановыйАванс.Сотрудник,
	|	ПлановыйАванс.Подразделение,
	|	ПлановыйАванс.ТерриторияВыполненияРаботВОрганизации,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПодразделенияПериоды
	|ИЗ
	|	ВТПлановыйАвансБазовый КАК ПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиПодразделенияПериоды.Сотрудник,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТСотрудникиПодразделенияПериоды КАК СотрудникиПодразделенияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАванс";
	
	Запрос.Выполнить();
	
	// Определяем сотрудников в состоянии, исключающем получение аванса.
	СоздатьВТСотрудникиНеПолучающиеАванс(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", Параметры.ПериодРегистрации);	
	
	// Получаем применение плановых начислений сотрудников.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеПлановыхНачислений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"));
	
	// Определяем источники финансирования зарплаты сотрудников.
	ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(
		МенеджерВременныхТаблиц,
		"ВТСотрудникиПодразделенияПериоды", ,
		Параметры.Организация);
		
	// Заполняем источники финансирования
	// Обнуляем суммы отсутствующим.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансБазовый.Сотрудник КАК Сотрудник,
	|	АвансБазовый.ФизическоеЛицо КАК ФизическоеЛицо,
	|	АвансБазовый.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(Бухучет.СтатьяФинансирования, АвансБазовый.СтатьяФинансирования) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(Бухучет.СтатьяРасходов, АвансБазовый.СтатьяРасходов) КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА СотрудникиНеПолучающиеАванс.Сотрудник ЕСТЬ NULL 
	|				И ЕСТЬNULL(ПрименениеПлановыхНачислений.Применение, ИСТИНА)
	|			ТОГДА АвансБазовый.СуммаКВыплате
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАванс
	|ИЗ
	|	ВТПлановыйАвансБазовый КАК АвансБазовый
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК Бухучет
	|		ПО АвансБазовый.Сотрудник = Бухучет.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиНеПолучающиеАванс КАК СотрудникиНеПолучающиеАванс
	|		ПО АвансБазовый.Сотрудник = СотрудникиНеПолучающиеАванс.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
	|		ПО АвансБазовый.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник";
	
 	Запрос.Выполнить();
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТПлановыйАвансБазовый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСведенияОБухучетеЗарплатыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиНеПолучающиеАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачисленийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПодразделенияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПериоды";

 	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиНеПолучающиеАванс(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Месяц = ПериодРегистрации;
	НачалоПериода	= Дата(Год(Месяц), Месяц(Месяц), 1);
	КонецПериода	= Дата(Год(Месяц), Месяц(Месяц), 15);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВременнойТаблицы);
	
	
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	СостоянияИсключающиеАванс = Новый Массив;
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.БолезньБезОплаты);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам);
	
	СостоянияСотрудников.СоздатьВТСостоянияСотрудников(
		МенеджерВременныхТаблиц,
		Сотрудники,
		СостоянияИсключающиеАванс,
		НачалоПериода, КонецПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);		
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);		
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияСотрудников.Сотрудник,
	|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
	|				КОГДА СостоянияСотрудников.Начало < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ СостоянияСотрудников.Начало
	|			КОНЕЦ, ВЫБОР
	|				КОГДА СостоянияСотрудников.Окончание > &КонецПериода
	|						ИЛИ СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ СостоянияСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) КАК Продолжительность
	|ПОМЕСТИТЬ ВТСотрудникиНеПолучающиеАванс
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияСотрудников.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
	|				КОГДА СостоянияСотрудников.Начало < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ СостоянияСотрудников.Начало
	|			КОНЕЦ, ВЫБОР
	|				КОГДА СостоянияСотрудников.Окончание > &КонецПериода
	|						ИЛИ СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ СостоянияСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) >= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ) + 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСостоянияСотрудников";
	
	Запрос.Выполнить();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы.

Функция ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансомРегистраторыКОбновлению()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеАвансом.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
	|ГДЕ
	|	ЗарплатаКВыплатеАвансом.УдалитьДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ЗарплатаКВыплатеАвансом.ДокументОснование = НЕОПРЕДЕЛЕНО";
	Возврат Запрос.Выполнить()
КонецФункции	

Процедура ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансомВыполнить(ПараметрыОбновления, Регистраторы)
	
	ВыборкаРегистраторов = Регистраторы.Выбрать();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ЗарплатаКВыплатеАвансом.НаборЗаписей", "Регистратор", ВыборкаРегистраторов.Ссылка) Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыНакопления.ЗарплатаКВыплатеАвансом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаРегистраторов.Ссылка;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДокументОснование = Запись.УдалитьДокументОснование;
		КонецЦикла;	
		
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Контроль соответствия начислений и выплат

Функция ПереплатыПоДокументамСотрудникам(МенеджерВременныхТаблиц, ИмяВТОтборы = "ВТОтборы") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТОтборы КАК Отборы
	|		ПО ЗарплатаКВыплате.ДокументОснование = Отборы.ДокументОснование
	|			И ЗарплатаКВыплате.Сотрудник = Отборы.Сотрудник
	|			И ЗарплатаКВыплате.СтатьяФинансирования = Отборы.СтатьяФинансирования
	|			И ЗарплатаКВыплате.СтатьяРасходов = Отборы.СтатьяРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТОтборы", ИмяВТОтборы);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Места выплаты зарплаты

Процедура ПроверитьМестоВыплатыЗарплаты(МестоВыплатыЗарплаты, ДопустимыеВидыМестВыплаты, Отказ)
	
	Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
		
		ТекстСообщения = "";
		
		Если ДопустимыеВидыМестВыплаты.Найти(МестоВыплатыЗарплаты.Вид) = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Недопустимый вид места выплаты зарплаты';
									|en = 'Unavailable salary payment location kind'");
		ИначеЕсли МестоВыплатыЗарплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
			Если НЕ ЗначениеЗаполнено(ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан банковский счет';
										|en = 'Bank account is not specified'");
			КонецЕсли	
		ИначеЕсли МестоВыплатыЗарплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда	
			Если НЕ ЗначениеЗаполнено(ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан раздатчик';
										|en = 'Distributor is not specified'");
			КонецЕсли	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
		КонецЕсли;	
		
	КонецЕсли	
	
КонецПроцедуры

Функция ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)
	
	ОписаниеТипов = ОписаниеТипаМестаВыплатыПоВиду(МестоВыплатыЗарплаты.Вид);
	
	Если ОписаниеТипов <> Неопределено Тогда
		ПриведенноеЗначениеМестаВыплаты = ОписаниеТипов.ПривестиЗначение(МестоВыплатыЗарплаты.МестоВыплаты);
	Иначе
		ПриведенноеЗначениеМестаВыплаты = Неопределено
	КонецЕсли;	
	
	Возврат ПриведенноеЗначениеМестаВыплаты;
	
КонецФункции	

#КонецОбласти