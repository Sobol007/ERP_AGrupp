////////////////////////////////////////////////////////////////////////////////
// Лицензирование сервер (CRM)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура записывает признак использования подсистемы CRM.
//
// Параметры:
//  ИспользоватьCRM - булево, признак использования подсистемы CRM
//
Процедура УстановитьИспользованиеCRM(ИспользоватьCRM) Экспорт
	ПараметрыСеанса.CRM_ИспользоватьCRM = ИспользоватьCRM;
КонецПроцедуры // УстановитьИспользованиеCRM()

// Переопределение параметров серий ключей защиты, определенных в конфигураци
// В зависимости от параметра Активные - возвращаются параметры или всех серий или
// доступные по установленным пользователю сеанса ролям
//
// Параметры:
//  СерииКлючейКонфигурации - Соответствие - Соответствие параметров подключения 
//											сериям ключей защиты
//
Процедура ПереопределитьСерииКлючейКонфигурации(СерииКлючейКонфигурации)Экспорт

	// Пропишем нормальные названия вместо серий ключей
	Для каждого КлючЗначение Из СерииКлючейКонфигурации Цикл
	
		Если КлючЗначение.Ключ = "52BA" Тогда
			КлючЗначение.Значение.Наименование = НСтр("en='1C: CRM CORP';ru='1С:CRM КОРП'");
			КлючЗначение.Значение.ПараметрыПодключения.ФайлыДанных["CRM_ФайлДанныхОРСР_КОРП"] = НСтр("en='1C: CRM CORP';ru='1С:CRM КОРП'");
		ИначеЕсли КлючЗначение.Ключ = "32D6" Тогда
			КлючЗначение.Значение.Наименование = НСтр("en='1C:CRM PROF';ru='1С:CRM ПРОФ'");
			КлючЗначение.Значение.ПараметрыПодключения.ФайлыДанных["CRM_ФайлДанныхОРСР_ПРОФ"] = НСтр("en='1C:CRM PROF';ru='1С:CRM ПРОФ'");
		ИначеЕсли КлючЗначение.Ключ = "6ACE" Тогда
			КлючЗначение.Значение.Наименование = НСтр("en='1C: CRM START';ru='1С:CRM СТАРТ'");
			КлючЗначение.Значение.ПараметрыПодключения.ФайлыДанных["CRM_ФайлДанныхОРСР_СТАРТ"] = НСтр("en='1C: CRM START';ru='1С:CRM СТАРТ'");
		// +iCRM
		ИначеЕсли КлючЗначение.Ключ = "719B" Тогда
			КлючЗначение.Значение.Наименование = НСтр("en='ICRM mobile application';ru='Мобильное приложение iCRM'");
		// -iCRM
		
		// +СквознаяАналитика
		ИначеЕсли КлючЗначение.Ключ = "71BC" Тогда
			КлючЗначение.Значение.Наименование = НСтр("en='1C-Rarus: Module end-to-end Analytics';ru='1С-Рарус: Модуль сквозной аналитики'");
			КлючЗначение.Значение.ТолькоНаличиеКлюча = Истина;
		// -СквознаяАналитика
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьВариантПоставкиПользователя();
	Если ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАРТ Тогда
		СерииКлючейКонфигурации.Удалить("52BA");
		СерииКлючейКонфигурации.Удалить("32D6");
	ИначеЕсли ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.ПРОФ Тогда
		СерииКлючейКонфигурации.Удалить("6ACE");
		СерииКлючейКонфигурации.Удалить("52BA");
	ИначеЕсли ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		СерииКлючейКонфигурации.Удалить("6ACE");
		СерииКлючейКонфигурации.Удалить("32D6");
	Иначе // Вариант поставки не определен, все отключаем
		СерииКлючейКонфигурации.Удалить("6ACE");
		СерииКлючейКонфигурации.Удалить("32D6");
		СерииКлючейКонфигурации.Удалить("52BA");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='The license type could not be determined because the ""Delivery Option"" is not specified! (the command ""Selecting a CRM Delivery Option"" in section 1C: CRM)';ru='Не удалось определить вид лицензии, так как не указан ""Вариант поставки""! (команда ""Выбор варианта поставки CRM"" в разделе 1С:CRM)'"));
	КонецЕсли;
	// +iCRM
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользуетсяОбменСiCRM") Тогда
		СерииКлючейКонфигурации.Удалить("719B");
	КонецЕсли;
	// -iCRM
	
	// +СквознаяАналитика
	Если НЕ Константы.CRM_СквознаяАналитика.Получить() Тогда
		СерииКлючейКонфигурации.Удалить("71BC");
	КонецЕсли;
	// -СквознаяАналитика

КонецПроцедуры // ПолучитьСерииКлючейКонфигурации()

// Процедура возвращает основной вариант поставки конфигурации.
Функция ПолучитьОсновнойВариантПоставки() Экспорт
	Возврат Константы.CRM_ОсновнойВариантПоставки.Получить();
КонецФункции

// Функция возвращает текущий вариант поставки конфигурации для пользователя.
//
// Возвращаемое значение:
//	ПеречислениеСсылкаCRM_ВариантыПоставки - текущий вариант поставки конфигурации для пользователя.
//
Функция ПолучитьВариантПоставкиПользователя() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат Перечисления.CRM_ВариантыПоставки.СТАРТ;
	Иначе	
		Возврат ПараметрыСеанса.CRM_ВариантПоставки;
	КонецЕсли;
КонецФункции

// Функция возвращает признак использования данного варианта поставки.
//
// Возвращаемое значение:
//	Булево - признак исползования данного вварианта поставки.
//
Функция ВариантПоставкиСТАРТ() Экспорт
	Возврат (ПолучитьВариантПоставкиПользователя() = Перечисления.CRM_ВариантыПоставки.СТАРТ);
КонецФункции

// Функция возвращает признак использования данного варианта поставки.
//
// Возвращаемое значение:
//	Булево - признак исползования данного вварианта поставки.
//
Функция ВариантПоставкиПРОФ() Экспорт
	Возврат (ПолучитьВариантПоставкиПользователя() = Перечисления.CRM_ВариантыПоставки.ПРОФ);
КонецФункции

// Функция возвращает признак использования данного варианта поставки.
//
// Возвращаемое значение:
//	Булево - признак исползования данного вварианта поставки.
//
Функция ВариантПоставкиКОРП() Экспорт
	Возврат (ПолучитьВариантПоставкиПользователя() = Перечисления.CRM_ВариантыПоставки.КОРП);
КонецФункции

// Функция создает и инициализирует защищенную обработку. В дальнейшем, в течении
//  сеанса, значение будет закешировано, и вызов будет возвращать тот же
//  экземпляр обработки
//  ИмяОбработки - строка с именем защищенной обработки
//  параметра лицензирования будет совпадать или превышать переданную в этом параметре
//  ОписаниеОшибки - возвращаемый параметр, содержит описание результата операции
//
// Параметры:
//  ВыводитьОшибки	 - Булево - Выводить ошибки.
// 
// Возвращаемое значение:
//  ВнешняяОбработка - Созданная обработка.
//
Функция ПолучитьЗащищеннуюОбработкуКеш(ВыводитьОшибки = Истина) Экспорт
	
	СерияМодульCRM = ПолучитьСтрокуСерииКлючейМодульCRM();
	ОписаниеОшибки = "";
	
	ВариантПоставки = ПолучитьВариантПоставкиПользователя();
	
	Если НЕ ЗначениеЗаполнено(ВариантПоставки) Тогда
		ПараметрыСеанса.CRM_ВариантПоставки = Константы.CRM_ОсновнойВариантПоставки.Получить();
	КонецЕсли;
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();	
	Если НЕ ЭтоРазделенныйРежимРаботы Тогда
		Если ВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАРТ Тогда
			ОбработкаЗащиты = слкМенеджерЗащиты.СоздатьОбъект(СерияМодульCRM, "CRM_ФайлДанныхОРСР_СТАРТ.CRM_ЗащищеннаяОбработка_СТАРТ", ОписаниеОшибки);
		ИначеЕсли ВариантПоставки = Перечисления.CRM_ВариантыПоставки.ПРОФ Тогда
			ОбработкаЗащиты = слкМенеджерЗащиты.СоздатьОбъект(СерияМодульCRM, "CRM_ФайлДанныхОРСР_ПРОФ.CRM_ЗащищеннаяОбработка_ПРОФ", ОписаниеОшибки);
		ИначеЕсли ВариантПоставки = Перечисления.CRM_ВариантыПоставки.КОРП Тогда
			ОбработкаЗащиты = слкМенеджерЗащиты.СоздатьОбъект(СерияМодульCRM, "CRM_ФайлДанныхОРСР_КОРП.CRM_ЗащищеннаяОбработка_КОРП", ОписаниеОшибки);
		Иначе
			Если ВыводитьОшибки Тогда
				ВызватьИсключение НСтр("ru='Не удалось определить версию ключа защиты!';en='Could not determine the version of the protection key!'");;
			Иначе	
				Возврат Неопределено;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		ОбработкаЗащиты = Обработки["CRM_ЗащищеннаяОбработка_СТАРТ"].Создать();
	КонецЕсли;
	
	Если ОписаниеОшибки <> "" Тогда
		Если ВыводитьОшибки Тогда
			ВызватьИсключение ОписаниеОшибки;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ОбработкаЗащиты;
	
КонецФункции // ПолучитьЗащищеннуюОбработку

// Функция создает и инициализирует защищенную обработку. В дальнейшем, в течении
//  сеанса, значение будет закешировано, и вызов будет возвращать тот же
//  экземпляр обработки
//  ИмяОбработки - строка с именем защищенной обработки
//  параметра лицензирования будет совпадать или превышать переданную в этом параметре
//  ОписаниеОшибки - возвращаемый параметр, содержит описание результата операции
//
// Параметры:
//  ВыводитьОшибки	 - Булево - Выводить ошибки.
// 
// Возвращаемое значение:
//  ВнешняяОбработка - Созданная обработка.
//
Функция ПолучитьЗащищеннуюОбработку(ВыводитьОшибки = Истина) Экспорт
	
	Возврат CRM_ЛицензированиеСерверПовтИсп.ПолучитьЗащищеннуюОбработку(ВыводитьОшибки);
	
КонецФункции // ПолучитьЗащищеннуюОбработку

// Функция возвращает признак использования подсистемы CRM.
//
// Возврат - булево, признак использования подсистемы CRM
//
Функция ПодсистемаCRMИспользуется() Экспорт
	Возврат ПараметрыСеанса.CRM_ИспользоватьCRM;
КонецФункции// ПодсистемаCRMИспользуется()

// Процедура записывает вариант поставки подсистемы CRM.
//
Процедура УстановитьВариантПоставки() Экспорт
	
	ВариантПоставки = Неопределено;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		ВариантПоставки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ИспользуемыйВариантПоставки");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантПоставки) Тогда
		ПараметрыСеанса.CRM_ВариантПоставки = ВариантПоставки;
	Иначе
		ПараметрыСеанса.CRM_ВариантПоставки = Константы.CRM_ОсновнойВариантПоставки.Получить();
	КонецЕсли;
	
КонецПроцедуры // УстановитьВариантПоставки()

// Возвращает признак:текущая конфигурация является типовой от 1С или нет
// 
// Возвращаемое значение:
//  Булево - признак что тек. конфигурация - "типовая"
//
Функция ЭтоТиповаяКонфигурация() Экспорт
	
	ИмяКонфигурации = ВРег(Метаданные.Имя);
	Возврат (ИмяКонфигурации = ВРег("УправлениеТорговлей") ИЛИ ИмяКонфигурации = ВРег("УправлениеПредприятием") ИЛИ 
			 ИмяКонфигурации = ВРег("КомплекснаяАвтоматизация"));
	
КонецФункции

// Функция возвращает серию ключа продукта
//  Режим - Число - 0: просто строка с серией, 1, серия и только ключ (1/0)
//
// Параметры:
//  Режим	 - Число - 0: просто строка с серией, 1, серия и только ключ (1/0)
// 
// Возвращаемое значение:
//  Строка - Серия ключа.
//
Функция ПолучитьСтрокуСерииКлючейМодульCRM(Режим = 0) Экспорт
	
	СерияКлюча = "";
	ВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьВариантПоставкиПользователя();
	Если ВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАРТ Тогда
		СерияКлюча = "6ACE";
	ИначеЕсли ВариантПоставки = Перечисления.CRM_ВариантыПоставки.ПРОФ Тогда
		СерияКлюча = "32D6";
	ИначеЕсли ВариантПоставки = Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		СерияКлюча = "52BA";
	КонецЕсли;
		
	Если Режим = 1 Тогда
		Возврат СерияКлюча + ",0";
Иначе
		Возврат СерияКлюча;
	КонецЕсли;
КонецФункции

// Функция возвращает признак использования рабочего стола CRM.
//
// Возврат - булево, признак использования подсистемы CRM
//
Функция РабочийСтолCRMИспользуется() Экспорт
	Возврат ПараметрыСеанса.CRM_ИспользоватьРабочийСтол;
КонецФункции// ПодсистемаCRMИспользуется()

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
// Параметры:
//  Обработчики	 - Структура - Структура с обработчиками. 
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("CRM_ВариантПоставки", "CRM_ЛицензированиеСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("CRM_ИспользоватьCRM", "CRM_ЛицензированиеСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("CRM_ИспользоватьРабочийСтол", "CRM_ЛицензированиеСервер.УстановкаПараметровСеанса");
	
КонецПроцедуры // ПриДобавленииОбработчиковУстановкиПараметровСеанса()

// Процедура освобождает текущую лицензию СЛК
//
Процедура ОсвободитьТекущуюЛицензию() Экспорт
	
	ТекущийВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьВариантПоставкиПользователя();
	
	Попытка
		Серия = "";
		Если ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАРТ Тогда
			Серия = "6ACE";
		ИначеЕсли ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.ПРОФ Тогда
			Серия = "32D6";
		ИначеЕсли ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.КОРП Тогда
			Серия = "52BA";
		КонецЕсли;
		
		Если Серия <> "" Тогда
			
			МенеджерСерииЗащиты = слкМенеджерЗащитыПовтИсп.ПолучитьМенеджерСерииЗащиты(Серия);
			Если МенеджерСерииЗащиты <> Неопределено Тогда
			
				Если слкМенеджерЗащитыСервер.СерияЗащитыИнициализирована(Серия) Тогда
					слкМенеджерЗащиты.ПолучитьМенеджерОбъектовСерииЗащиты(Серия).ОсвободитьЛицензиюСеанса();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	// Удалим инициализацию серии защиты
	МассивСерийЗащиты = СтрРазделить(ПараметрыСеанса.слкМенеджерЗащиты, ";", Ложь);
	
	СерияЗащитыКУдалению = Неопределено;
	Для каждого СерияЗащиты Из МассивСерийЗащиты Цикл
		
		МассивСерии = СтрРазделить(СерияЗащиты, ",");
		Если МассивСерии[0] = Серия Тогда
			СерияЗащитыКУдалению = СерияЗащиты;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если СерияЗащитыКУдалению <> Неопределено Тогда
		МассивСерийЗащиты.Удалить(МассивСерийЗащиты.Найти(СерияЗащитыКУдалению));	
		ПараметрыСеанса.слкМенеджерЗащиты = СтрСоединить(МассивСерийЗащиты, ";");
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.УстановитьВариантПоставки();
	ОбновитьПовторноИспользуемыеЗначения();
	
	
КонецПроцедуры // ОсвободитьТекущуюЛицензию()

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "CRM_ВариантПоставки" Тогда
		ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		ВариантПоставки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ИспользуемыйВариантПоставки");
		Если ЗначениеЗаполнено(ВариантПоставки) Тогда
			ПараметрыСеанса.CRM_ВариантПоставки = ВариантПоставки;
		Иначе
			ПараметрыСеанса.CRM_ВариантПоставки = Константы.CRM_ОсновнойВариантПоставки.Получить();
		КонецЕсли;
		УстановленныеПараметры.Добавить("CRM_ВариантПоставки");
	КонецЕсли;
	
	Если ИмяПараметра = "CRM_ИспользоватьCRM" Тогда
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ПараметрыСеанса.CRM_ИспользоватьCRM = Истина;
		Иначе
			ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
			ПараметрыСеанса.CRM_ИспользоватьCRM = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ИспользоватьCRM");
		КонецЕсли;
		УстановленныеПараметры.Добавить("CRM_ИспользоватьCRM");
	КонецЕсли;
	
	Если ИмяПараметра = "CRM_ИспользоватьРабочийСтол" Тогда
		Если ПараметрыСеанса.CRM_ИспользоватьCRM И CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку(Ложь) <> Неопределено Тогда
			ПараметрыСеанса.CRM_ИспользоватьРабочийСтол = Истина;
		Иначе
			ПараметрыСеанса.CRM_ИспользоватьРабочийСтол = Ложь;
		КонецЕсли;
		УстановленныеПараметры.Добавить("CRM_ИспользоватьРабочийСтол");
	КонецЕсли;
	
КонецПроцедуры // УстановкаПараметровСеанса()

// Обработчик подписки на событие CRM_Модуль_ПриЗаписиКонстантыОсновнойВариантПоставки.
//
Процедура ПриЗаписиКонстантыОсновнойВариантПоставки(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьВариантПоставкиПользователя();
	
	ВариантПоставки = Неопределено;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		ВариантПоставки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ИспользуемыйВариантПоставки");
	КонецЕсли;
	
	Если Источник.Значение <> ТекущийВариантПоставки И НЕ ЗначениеЗаполнено(ВариантПоставки) Тогда
		ОсвободитьТекущуюЛицензию();
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписиКонстантыОсновнойВариантПоставки()

// Для переопределения результатов функции УстановкаПараметровСеанса
// менеджера защиты СЛК.
//
// Параметры:
//	УстановленныеПараметры - Массив имен установленных параметров сеанса
//  ИменаПараметровСеанса - Массив, Неопределено - в массиве имена параметров 
//							сеанса для инициализации.
//                 
Процедура ПереопределитьПараметрыСеанса(УстановленныеПараметры, Знач ИменаПараметровСеанса) Экспорт
	
	Если ИменаПараметровСеанса.Найти("слкМенеджерЗащиты") <> Неопределено Тогда
		
		СтрокаСерииМодульCRM = CRM_ЛицензированиеСервер.ПолучитьСтрокуСерииКлючейМодульCRM(1);
		
		Если ПараметрыСеанса.слкМенеджерЗащиты = "" Тогда
			ПараметрыСеанса.слкМенеджерЗащиты = СтрокаСерииМодульCRM;
		Иначе
			ПараметрыСеанса.слкМенеджерЗащиты = ПараметрыСеанса.слкМенеджерЗащиты + ";"+СтрокаСерииМодульCRM;
		КонецЕсли;
		Если УстановленныеПараметры.Найти(слкМенеджерЗащиты) = Неопределено Тогда
			УстановленныеПараметры.Добавить("слкМенеджерЗащиты");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
