////////////////////////////////////////////////////////////////////////////////
// CRM тригеры сервер
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вернуть обработку действия
//
// Параметры:
//  Триггер	 - СправочникСсылка	 - Выполняемы триггер.
// 
// Возвращаемое значение:
//  ВнешняяОбработка, Неопределено - Возвращает обработку действия, либо Неопределено.
//
Функция ВернутьОбработкуДействия(Триггер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = Триггер.Действие.ПутьКОбработке;
	ФайлНаДиске = Новый Файл(ИмяВременногоФайла);
	Если ФайлНаДиске.Существует() Тогда
		Обработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, ложь);
		Возврат Обработка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

// Вернуть обработку условия
//
// Параметры:
//  Триггер	 - СправочникСсылка	 - Выполняемы триггер.
// 
// Возвращаемое значение:
//  ВнешняяОбработка - Возвращает обработку условия.
//
Функция ВернутьОбработкуУсловия(Триггер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = Триггер.УсловиеСрабатывания.ПутьКОбработке;
	
	Обработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, ложь);
	Возврат Обработка;
КонецФункции

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Передаваемая форма.
//  Отказ				 - Булево			 - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево			 - Признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПриСозданииНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = CRM_ТригерыСервер.ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		Попытка
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение ИЗ НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки ИЗ КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки ИЗ СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					Иначе
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
			
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка);
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - Передаваемая форма.
//  Отказ			 - Булево			 - Признак отказа от создания формы.
//  ТекущийОбъект	 - СправочникОбъект	 - Записываемый объект.
//  ПараметрыЗаписи	 - Структура		 - Структура, содержащая параметры записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПередЗаписьюНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = CRM_ТригерыСервер.ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		Попытка
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение ИЗ НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки ИЗ КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки ИЗ СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					Иначе
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка);
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма			 - УправляемаяФорма - Передаваемая форма.
//  ТекущийОбъект	 - СправочникОбъект	 - Записываемый объект. 
//  ПараметрыЗаписи	 - Структура - Структура, содержащая параметры записи. 
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПослеЗаписиНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = CRM_ТригерыСервер.ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		Попытка
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение ИЗ НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки ИЗ КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки ИЗ СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					Иначе
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка);
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТриггер(Источник, Событие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Триггеры.Ссылка
	               |ИЗ
	               |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	               |		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки = &ОбъектОбработки)
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка.Событие = &Событие)
	               |ГДЕ
	               |	CRM_Триггеры.Действует
	               |	И НЕ CRM_Триггеры.Действие = ЗНАЧЕНИЕ(Справочник.CRM_ДействияТриггеров.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Событие"			, Событие);
	Запрос.УстановитьПараметр("ОбъектОбработки"	, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник)));
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТриггеров.Следующий() Цикл
		
		Возврат ВыборкаТриггеров.Ссылка;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОбработкуДействийДляКлиента(Источник, Событие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	|		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка
	|			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки = &ОбъектОбработки)
	|			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка.Событие = &Событие)
	|			И (НЕ CRM_Триггеры.Действие = ЗНАЧЕНИЕ(Справочник.CRM_ДействияТриггеров.ПустаяСсылка))
	|			И (CRM_Триггеры.Действует)";
	Запрос.УстановитьПараметр("Событие"			, Событие);
	Запрос.УстановитьПараметр("ОбъектОбработки"	, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник)));
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТриггеров.Следующий() Цикл
		
		НастройкиДействий = ВыборкаТриггеров.Ссылка.НастройкиДействий.Получить();
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ВыборкаТриггеров.Ссылка.Действие.ОбработкаДействия.Получить(), Новый УникальныйИдентификатор());
		
		Возврат Новый Структура("ОбработкаДействий,НастройкиДействий",ВнешниеОбработки.Подключить(АдресХранилища),НастройкиДействий);;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура яCRM_ТригерыПередЗаписьюОбъекта(Источник, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Источник.Метаданные());
	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.Ссылка.Пустая());
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Триггеры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	               |		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки = &ОбъектОбработки)
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПередЗаписью))
	               |ГДЕ
	               |	CRM_Триггеры.Действует";
	Запрос.УстановитьПараметр("ОбъектОбработки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник)));
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ОбъектыДействия = Неопределено;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник, ОбъектыДействия);
		Если ПроверкаПрошла Тогда
			Если ОбъектыДействия<>Неопределено И ТипЗнч(ОбъектыДействия) = Тип("Массив") И ОбъектыДействия.Количество()>0 Тогда
				Для Каждого ОбъектДействияСсылка Из ОбъектыДействия Цикл
					ОбъектДействия = ОбъектДействияСсылка.ПолучитьОбъект();
					Попытка
						СообщениеДействия = "";
						ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, ОбъектДействия, Источник, Отказ, СообщениеДействия);
						Если ОбъектДействия.ДополнительныеСвойства.Свойство("ОбъектИзменен") Тогда
							ОбъектДействия.Записать();
						КонецЕсли;
						Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
							Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия, Источник, СообщениеДействия);
						ИначеЕсли НЕ ТриггерВыполнен Тогда
							Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия, ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия, "Действие не выполнено."));		
						КонецЕсли;
					Исключение
						Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия, ОписаниеОшибки());
						ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
					КонецПопытки;
				КонецЦикла;
			Иначе
				Попытка
					СообщениеДействия = "";
					ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник, Источник, Отказ, СообщениеДействия);
					Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
						Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник, Источник, СообщениеДействия);
					ИначеЕсли НЕ ТриггерВыполнен Тогда
						Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия, "Действие не выполнено."));		
					КонецЕсли;
				Исключение
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
					ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура яCRM_ТригерыПриЗаписиОбъекта(Источник, Отказ, РежимПроведения = Неопределено) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Источник.Метаданные());
	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Триггеры.Ссылка КАК Ссылка,
	               |	CRM_Триггеры.ОтложенноеВыполнение КАК ОтложенноеВыполнение,
	               |	CRM_Триггеры.ПовторятьПриОшибке КАК ПовторятьПриОшибке
	               |ИЗ
	               |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	               |		ПО CRM_Триггеры.УсловиеСрабатывания = CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки = &ОбъектОбработки)
	               |			И (CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка.Событие = &Событие)
	               |ГДЕ
	               |	CRM_Триггеры.Действует";
	Запрос.УстановитьПараметр("ОбъектОбработки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник)));
	Запрос.УстановитьПараметр("Событие", ?(РежимПроведения = Неопределено, Перечисления.CRM_СобытияТриггеров.ПриЗаписи, Перечисления.CRM_СобытияТриггеров.ОбработкаПроведения));
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если Источник.ДополнительныеСвойства.Свойство("ВыполнениеТриггера") И Источник.ДополнительныеСвойства.ВыполнениеТриггера = ВыборкаТриггеров.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ОбъектыДействия = Неопределено;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник, ОбъектыДействия);
		Если ПроверкаПрошла Тогда
			Если ОбъектыДействия<>Неопределено И ТипЗнч(ОбъектыДействия) = Тип("Массив") И ОбъектыДействия.Количество()>0 Тогда
				Для Каждого ОбъектДействияСсылка Из ОбъектыДействия Цикл
					Если ВыборкаТриггеров.ОтложенноеВыполнение Тогда
						ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Источник.Ссылка, ОбъектДействияСсылка);
						Продолжить;
					КонецЕсли;
					ОбъектДействия = ОбъектДействияСсылка.ПолучитьОбъект();
					Попытка
						СообщениеДействия = "";
						ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, ОбъектДействия, Источник, Отказ, СообщениеДействия);
						Если ОбъектДействия.ДополнительныеСвойства.Свойство("ОбъектИзменен") Тогда
							ОбъектДействия.Записать();
						КонецЕсли;
						Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
							Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия, Источник, СообщениеДействия);
						ИначеЕсли НЕ ТриггерВыполнен Тогда
							Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия, ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия, "Действие не выполнено."));		
							Если ВыборкаТриггеров.ПовторятьПриОшибке > 0 Тогда
								ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Источник.Ссылка, ОбъектДействия.Ссылка);
							Иначе	
								ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
							КонецЕсли;
						КонецЕсли;
					Исключение
						Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, ОбъектДействия, ОписаниеОшибки());
						Если ВыборкаТриггеров.ПовторятьПриОшибке > 0 Тогда
							ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Источник.Ссылка, ОбъектДействия.Ссылка);
						Иначе	
							ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			Иначе
				Если ВыборкаТриггеров.ОтложенноеВыполнение Тогда
					ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Источник.Ссылка, Источник.Ссылка);
					Продолжить;
				КонецЕсли;
				Попытка
					СообщениеДействия = "";
					ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник, Источник, Отказ, СообщениеДействия);
					Если Источник.ДополнительныеСвойства.Свойство("ОбъектИзменен") Тогда
						Источник.ДополнительныеСвойства.Вставить("ВыполнениеТриггера", ВыборкаТриггеров.Ссылка);
						Источник.Записать();
						Источник.ДополнительныеСвойства.Удалить("ВыполнениеТриггера");
					КонецЕсли;
					Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
						Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник, Источник, СообщениеДействия);
					ИначеЕсли НЕ ТриггерВыполнен Тогда
						Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия, "Действие не выполнено."));		
						Если ВыборкаТриггеров.ПовторятьПриОшибке > 0 Тогда
							ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Источник.Ссылка, Источник.Ссылка);
						Иначе	
							ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
						КонецЕсли;
					КонецЕсли;
				Исключение
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
					Если ВыборкаТриггеров.ПовторятьПриОшибке > 0 Тогда
						ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Ссылка, Источник.Ссылка, Источник.Ссылка);
					Иначе	
						ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Ссылка);
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

#Область ПериодическиеТриггеры

Процедура ВыполнениеПериодическогоТриггера(Параметры = Неопределено) Экспорт
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;	
	Если Параметры = Неопределено Тогда Возврат; КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры.Свойство("УникальныйИдентификаторЗадания") Тогда
		Триггер = Справочники.CRM_Триггеры.НайтиПоРеквизиту("УникальныйИдентификаторЗадания", Параметры.УникальныйИдентификаторЗадания);
		Если ЗначениеЗаполнено(Триггер) Тогда
			Попытка
				СообщениеДействия = "";
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьПериодическийТриггер(Триггер, СообщениеДействия);
				Если ТриггерВыполнен И Триггер.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьВыполнениеПериодическогоТриггера(Триггер, СообщениеДействия);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуПериодическогоТриггера(Триггер, ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия, "Действие не выполнено."));			
				КонецЕсли;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Справочники.CRM_Триггеры.ЗаписатьОшибкуПериодическогоТриггера(Триггер, ОписаниеОшибки());
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенныеТриггеры

Процедура ОтложенноеВыполнениеТриггеров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.Триггер КАК Триггер,
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.ОбъектТриггера КАК ОбъектТриггера,
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.ОбъектДействия КАК ОбъектДействия,
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.КоличествоЗапусков КАК КоличествоЗапусков
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОчередьОтложенногоВыполненияТриггеров КАК CRM_ОчередьОтложенногоВыполненияТриггеров
	                      |ГДЕ
	                      |	CRM_ОчередьОтложенногоВыполненияТриггеров.СрокВыполнения <= &СрокВыполнения");
	Запрос.УстановитьПараметр("СрокВыполнения", ТекущаяДатаСеанса());
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если ТипЗнч(ВыборкаТриггеров.ОбъектДействия) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если ВыборкаТриггеров.Триггер.ВыполнятьВСостоянииИнтереса И ЗначениеЗаполнено(ВыборкаТриггеров.Триггер.СостояниеИнтереса) Тогда
				Если ВыборкаТриггеров.Триггер.СостояниеИнтереса <> ВыборкаТриггеров.ОбъектДействия.СостояниеИнтереса Тогда
					УдалитьТриггерИзОчереди(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ВыборкаТриггеров.ОбъектДействия);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Попытка
			ОбъектДействия = ВыборкаТриггеров.ОбъектДействия.ПолучитьОбъект();
			СообщениеДействия = "";
			Отказ = Ложь;
			ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Триггер, ОбъектДействия, ВыборкаТриггеров.ОбъектТриггера, Отказ, СообщениеДействия, Истина);
			Если ОбъектДействия.ДополнительныеСвойства.Свойство("ОбъектИзменен") Тогда
				ОбъектДействия.ДополнительныеСвойства.Вставить("ВыполнениеТриггера", ВыборкаТриггеров.Триггер);
				ОбъектДействия.Записать();
				ОбъектДействия.ДополнительныеСвойства.Удалить("ВыполнениеТриггера");
			КонецЕсли;
			Если ТриггерВыполнен Тогда // И НЕ ВыборкаТриггеров.Ссылка.РазрешитьПовторноеСрабатывание
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Триггер, ОбъектДействия, ВыборкаТриггеров.ОбъектТриггера, СообщениеДействия);
				УдалитьТриггерИзОчереди(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ОбъектДействия.Ссылка);
			ИначеЕсли НЕ ТриггерВыполнен Тогда
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Триггер, ОбъектДействия, ?(ЗначениеЗаполнено(СообщениеДействия), СообщениеДействия, "Действие не выполнено."));		
				Если ВыборкаТриггеров.КоличествоЗапусков+1 < ВыборкаТриггеров.Триггер.ПовторятьПриОшибке Тогда
					ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ОбъектДействия.Ссылка, ВыборкаТриггеров.КоличествоЗапусков+1);
				Иначе	
					ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Триггер);
					УдалитьТриггерИзОчереди(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ОбъектДействия.Ссылка);
					Справочники.CRM_Триггеры.ВыполнитьДействиеПриОшибке(ВыборкаТриггеров.Триггер, ОбъектДействия.Ссылка, ВыборкаТриггеров.ОбъектТриггера);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Триггер, ОбъектДействия, ОписаниеОшибки());
			Если ВыборкаТриггеров.КоличествоЗапусков+1 < ВыборкаТриггеров.Триггер.ПовторятьПриОшибке Тогда
				ЗаписатьТриггерВОчередь(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ОбъектДействия.Ссылка, ВыборкаТриггеров.КоличествоЗапусков+1);
			Иначе
				ДобавитьОповещениеПоТриггеру(ВыборкаТриггеров.Триггер);
				УдалитьТриггерИзОчереди(ВыборкаТриггеров.Триггер, ВыборкаТриггеров.ОбъектТриггера, ОбъектДействия.Ссылка);
				Справочники.CRM_Триггеры.ВыполнитьДействиеПриОшибке(ВыборкаТриггеров.Триггер, ОбъектДействия.Ссылка, ВыборкаТриггеров.ОбъектТриггера);
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьТриггерВОчередь(Триггер, ОбъектТриггера, ОбъектДействия, НомерСрабатывания = 0)
	
	МенеджерЗаписи = РегистрыСведений.CRM_ОчередьОтложенногоВыполненияТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОбъектТриггера = ОбъектТриггера;
	МенеджерЗаписи.ОбъектДействия = ОбъектДействия;
	МенеджерЗаписи.КоличествоЗапусков = НомерСрабатывания;
	МенеджерЗаписи.СрокВыполнения = ТекущаяДатаСеанса() + Триггер.ПовторятьЧерез*60;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УдалитьТриггерИзОчереди(Триггер, ОбъектТриггера, ОбъектДействия)
	
	МенеджерЗаписи = РегистрыСведений.CRM_ОчередьОтложенногоВыполненияТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОбъектТриггера = ОбъектТриггера;
	МенеджерЗаписи.ОбъектДействия = ОбъектДействия;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

Процедура ДобавитьОповещениеПоТриггеру(Триггер)
	ТаблицаНастроекОповещений = CRM_ОповещенияСервер.ПолучитьПараметрыОповещенияПоВиду(Справочники.CRM_ВидыОповещений.ОшибкаСрабатыванияТриггера);
	МассивСтруктур = Новый Массив;
	Для Каждого СтрокаОповещения ИЗ ТаблицаНастроекОповещений Цикл
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель", СтрокаОповещения.Пользователь);
		СтруктураОповещения.Вставить("Предмет", Триггер);
		СтруктураОповещения.Вставить("ВидОповещения", СтрокаОповещения.ВидОповещения);
		СтруктураОповещения.Вставить("Канал", СтрокаОповещения.Канал);
		СтруктураОповещения.Вставить("СрокОповещения", СтрокаОповещения.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность", СтрокаОповещения.Периодичность);
		МассивСтруктур.Добавить(СтруктураОповещения);
	КонецЦикла;
	CRM_ОповещенияСервер.ДобавитьОповещение(МассивСтруктур);
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

Процедура ВключитьИспользованиеОтложенногоВыполненияТриггеров(Параметры = Неопределено) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_ОтложенноеВыполнениеТриггеров);
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);

	Для Каждого Задание Из СписокЗаданий Цикл
		
		ПараметрыЗадания = Новый Структура("Использование", Истина);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		
	КонецЦикла;
	
	Справочники.CRM_Триггеры.ЗаполнитьДанныеОПовторахВыполненияТриггеров();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
