////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Модуля CRM
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля
//                                  ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя	= "CRMМодуль";
	Описание.Версия = "3.0.15.7";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПроверитьПВХОбъектыЖурнала";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных условий триггеров.'");
 	 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных действий триггеров.'");
	
	// 3.0.1.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение шаблонов автотекста'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкорретироватьШаблоныПоказателей";
	Обработчик.Комментарий = НСтр("ru = 'Корретирует шаблоны ключевых показателей'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаменаСтатусовВКоммерческомПредложении";
	Обработчик.Комментарий = НСтр("ru = 'Заполняем реквизит Статус документа КоммерческоеПредложениеКлиенту'");
	
	// 3.0.1.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =  "CRM_РежимФормЗакладкиСервер.ИсключитьФормыИзЗакладок";
	Обработчик.Комментарий = НСтр("ru = 'Удаляем формы из режима закладок.'");
	
	// 3.0.6.7
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ЗаполнениеЮридическогоАдресаКонтрагента";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение юридического адреса контрагента из партнера'");
	
	// 3.0.7.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ОбновитьНастройкиОтправкиSMS4B";
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек для сервиса SMS4B'");
	
	// 3.0.8.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ОбновитьРеквизитыПоискаДублейПартнеров";
	Обработчик.Комментарий = НСтр("ru = 'Добавление в реквизиты поиска дублей ИНН'");
	
	// 3.0.9.4
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение шаблонов автотекста'");
	
	// +Добавлено из CRM 3.0.12
	
	// 3.0.11.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_СостоянияИнтересов.УстановитьИдентификаторыПредопределенных";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливаем идентификаторы для бывших предопределенных элементов.'");
	
	// -Добавлено из CRM 3.0.12
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ИсправитьКомментарииВариантов";
	Обработчик.Комментарий = НСтр("ru = 'Исправляем описания вариантов коммерческих предложений.'");
	
	// 3.0.13.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ОбновлениеФормРабочегоСтола";
	Обработчик.Комментарий = НСтр("ru = 'Замена формы ""Безналичные платежи"" на рабочем столе.'");
	
	// 3.0.13.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.ЗаполнитьТЧОбъектыОбработкиПриОбновлении";
	Обработчик.Комментарий = НСтр("ru = 'Обновление механизма триггеров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ИсправлениеШаблоновПоказателей";
	Обработчик.Комментарий = НСтр("ru = 'Исправление шаблонов ключевых показателей.'");
	
	// 3.0.14.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ЗаполнитьРеквизитыДляОбмена";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение служебных реквизитов для обмена с iCRM'");	
	
	// 3.0.14.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ОбновитьДействияТриггеров";
	Обработчик.Комментарий = НСтр("ru = 'Обновление действия триггера рассылки'");	
	
	// 3.0.15.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ОбновлениеШаблонаПоказателяПродажи";
	Обработчик.Комментарий = НСтр("ru = 'Обновление шаблона показателя Продажи.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ОбновлениеШаблонаПоказателяВысланныеКП";
	Обработчик.Комментарий = НСтр("ru = 'Обновление шаблона показателя ВысланныеКП.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ОбновлениеДействийТриггеров";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных действий триггеров.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ТригерыСервер.ВключитьИспользованиеОтложенногоВыполненияТриггеров";
	Обработчик.Комментарий = НСтр("ru = 'Включение регламентного задания для отложенного выполнения триггеров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ЗаполнениеПризнакаЗаметкаДляЛенты";
	Обработчик.Комментарий = НСтр("ru = 'Обработка заметок для отображения в ленте событий.'");
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры // ПередОбновлениемИнформационнойБазы()

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры // ПослеОбновленияИнформационнойБазы()

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры // ПриПодготовкеМакетаОписанияОбновлений()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
#Область ТиповыеРешения

	//Обработчик = Обработчики.Добавить();
	//Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	//Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСТиповогоРешения";

	//Обработчик = Обработчики.Добавить();
	//Обработчик.ПредыдущееИмяКонфигурации = "УправлениеПредприятием";
	//Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСТиповогоРешения";

	//Обработчик = Обработчики.Добавить();
	//Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация";
	//Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСТиповогоРешения";
	
#КонецОбласти

#Область ОбъединенныеРешения

	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей_CRM_2";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСОбъединенногоРешения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеПредприятием_CRM";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСОбъединенногоРешения";

	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация_CRM";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереходСОбъединенногоРешения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей_CRM_2";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереносПерсональныхНастроекПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеПредприятием_CRM";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереносПерсональныхНастроекПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация_CRM";
	Обработчик.Процедура = "CRM_Модуль_ОбновлениеИнформационнойБазы.ПереносПерсональныхНастроекПользователей";
	
#КонецОбласти

КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ОчиститьСведенияОПредыдущейКонфигурации") Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
	КонецЕсли;
	
	// Снимем флаг "ЭтоОсновнаяКонфигурация" с подсистемы "УправлениеТорговлей" (ПредыдущееИмяКонфигурации)
	ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Ложь);
	
КонецПроцедуры // ПриЗавершенииПереходаСДругойПрограммы()

// Получить режим обновления данных информационной базы
Функция ПолучитьРежимОбновленияДанных() Экспорт
	Возврат ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных();
КонецФункции

#КонецОбласти

#Область ПервыйЗапуск

// Процедура заполняет пустую ИБ.
//
// Параметры:
//	Нет.
//
Процедура ПервыйЗапуск() Экспорт
	
	НачатьТранзакцию();
	
	// установим доступность новых групп видов КИ
	УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	Если Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда 
		Константы.CRM_ИспользоватьБизнесПроцессы.Установить(Истина);
	КонецЕсли;
	
	// Для всех учетных записей электронной почты заполним или обновим папки электронных писем по умолчанию
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		CRM_УправлениеЭлектроннойПочтой.СоздатьПредопределенныеПапкиЭлектронныхПисемДляУчетнойЗаписи(Выборка.Ссылка);
	КонецЦикла;
	
	СписокРолей = Новый СписокЗначений();
	СписокРолей.Добавить("Роль.CRM_БазовыеПрава");
	CRM_Модуль_УправлениеДоступом.ДополнитьПрофилиГруппДоступаРолями(СписокРолей);
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы", Неопределено, , ПользовательИБ.Имя);
		
	CRM_ПользователиПереопределяемый.CRM_ЗаполнитьНастройкиВсехПользователейПоУмолчанию();
	
	КонвертироватьКоммерческиеПредложения();
	
	ЗаполнитьРеквизитыДляОбмена();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПервыйЗапуск()

// Процедура перехода с ТиповогоРешения
//
// Параметры:
//	Нет.
//
Процедура ПереходСТиповогоРешения() Экспорт
	
	НачатьТранзакцию();
	
	// установим доступность новых групп видов КИ
	УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	Если Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда 
		Константы.CRM_ИспользоватьБизнесПроцессы.Установить(Истина);
	КонецЕсли;
	
	// Для всех учетных записей электронной почты заполним или обновим папки электронных писем по умолчанию
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		CRM_УправлениеЭлектроннойПочтой.СоздатьПредопределенныеПапкиЭлектронныхПисемДляУчетнойЗаписи(Выборка.Ссылка);
	КонецЦикла;
	
	СписокРолей = Новый СписокЗначений();
	СписокРолей.Добавить("Роль.CRM_БазовыеПрава");
	CRM_Модуль_УправлениеДоступом.ДополнитьПрофилиГруппДоступаРолями(СписокРолей);
	
	// данный блок должен быть в самом конце
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы", Неопределено, , ПользовательИБ.Имя);
		
	CRM_ПользователиПереопределяемый.CRM_ЗаполнитьНастройкиВсехПользователейПоУмолчанию();		
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПереходСТиповогоРешения()

// Процедура перехода с ОбъединенногоРешения 2
//
// Параметры:
//	Нет.
//
Процедура ПереходСОбъединенногоРешения() Экспорт
	
	НачатьТранзакцию();
	
	// Установка констант
	Константы.CRM_ПериодОповещенияОПросроченныхСобытиях.Установить(Перечисления.Периодичность.Месяц);
	Константы.CRM_ПериодВыводаНезавершенныхОповещений.Установить(Перечисления.Периодичность.Месяц);
	
	Если Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда 
		Константы.CRM_ИспользоватьБизнесПроцессы.Установить(Истина);
	КонецЕсли;
	
	// установим доступность новых групп видов КИ
	УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	
	// данный блок должен быть в самом конце
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы", Неопределено, , ПользовательИБ.Имя);
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПереходСОбъединенногоРешения()

// Процедура переносит настройки, не совпавшие по идентификаторам
//
// Параметры:
//	Нет.
//
Процедура ПереносПерсональныхНастроекПользователей() Экспорт
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_НастройкиПользователей.Пользователь,
	               |	CRM_НастройкиПользователей.Настройка,
	               |	CRM_НастройкиПользователей.Значение,
	               |	ПВХ_НастройкиПользователей.ИмяПредопределенныхДанных
	               |ИЗ
	               |	РегистрСведений.CRM_НастройкиПользователей КАК CRM_НастройкиПользователей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.CRM_НастройкиПользователей КАК ПВХ_НастройкиПользователей
	               |		ПО CRM_НастройкиПользователей.Настройка = ПВХ_НастройкиПользователей.Ссылка";
				   
	СтруктураПереносаНастроек = Новый Структура;
	
	СтруктураПереносаНастроек.Вставить("Удалить_сфпПривязатьВнутреннийНомер",			  ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПривязатьВнутреннийНомер);
	СтруктураПереносаНастроек.Вставить("Удалить_сфпЛогинНаСерверСофтФон",				  ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон);
	СтруктураПереносаНастроек.Вставить("Удалить_сфпПарольНаСерверСофтФон",				  ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон);
	СтруктураПереносаНастроек.Вставить("Удалить_ПодставлятьОсновнойПроектВПоручения",	  ПланыВидовХарактеристик.CRM_НастройкиПользователей.ПодставлятьОсновнойПроектВПоручения);

	ВыборкаНастроекПользователя = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНастроекПользователя.Следующий() Цикл
		
		ЭлементДляЗамены = Неопределено;
		
		Если Не ПустаяСтрока(ВыборкаНастроекПользователя.ИмяПредопределенныхДанных)
			И СтруктураПереносаНастроек.Свойство(ВыборкаНастроекПользователя.ИмяПредопределенныхДанных, ЭлементДляЗамены) Тогда
			
			МенеджерЗаписи = РегистрыСведений.CRM_НастройкиПользователей.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаНастроекПользователя);
			
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
			
				МенеджерЗаписи.Настройка = ЭлементДляЗамены;
				
				МенеджерЗаписи.Записать();
			
			КонецЕсли;		
		
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПереходСДругойПрограммы()

#КонецОбласти

#Область ПроцедурыОбновления

Процедура ЗаполнениеЮридическогоАдресаКонтрагента(Параметры) Экспорт	
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартнерыКонтактнаяИнформация.Ссылка,
		               |	ПартнерыКонтактнаяИнформация.НомерСтроки,
		               |	ПартнерыКонтактнаяИнформация.Тип,
		               |	ПартнерыКонтактнаяИнформация.Вид,
		               |	ПартнерыКонтактнаяИнформация.Представление,
		               |	ПартнерыКонтактнаяИнформация.ЗначенияПолей,
		               |	ПартнерыКонтактнаяИнформация.Страна,
		               |	ПартнерыКонтактнаяИнформация.Регион,
		               |	ПартнерыКонтактнаяИнформация.Город,
		               |	ПартнерыКонтактнаяИнформация.АдресЭП,
		               |	ПартнерыКонтактнаяИнформация.ДоменноеИмяСервера,
		               |	ПартнерыКонтактнаяИнформация.НомерТелефона,
		               |	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов,
		               |	ПартнерыКонтактнаяИнформация.ВидДляСписка,
		               |	ПартнерыКонтактнаяИнформация.CRM_ОсновнойДляСвязи
		               |ИЗ
		               |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		               |ГДЕ
		               |	ПартнерыКонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес);
		
		УстановитьПривилегированныйРежим(Истина);
	    Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗапросКонтрагент = Новый Запрос;
			ЗапросКонтрагент.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК КонтрагентПартнера
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Партнер = &Партнер";
			
			ЗапросКонтрагент.УстановитьПараметр("Партнер", Выборка.Ссылка);
			
			ВыборкаКонтрагент = ЗапросКонтрагент.Выполнить().Выбрать();

			Если ВыборкаКонтрагент.Следующий() Тогда
				
				КонтрагентПартнера = ВыборкаКонтрагент.КонтрагентПартнера;
				
				ВвестиЮридическийАдресКонтрагента = Истина;
				
				Для каждого КонтактнаяИнформацияКонтрагента Из КонтрагентПартнера.КонтактнаяИнформация Цикл
				
					Если КонтактнаяИнформацияКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
					
						ВвестиЮридическийАдресКонтрагента = Ложь;
						
						Прервать;
						
					КонецЕсли;					
				
				КонецЦикла;
				
				Если ВвестиЮридическийАдресКонтрагента Тогда
				
					КонтрагентОбъект = КонтрагентПартнера.ПолучитьОбъект();
					
					НоваяСтрокаКонтактнойИнформации = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтактнойИнформации, Выборка, , "Вид,НомерСтроки");
					
					НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
					
					КонтрагентОбъект.Записать();
				
				КонецЕсли;		
				
			КонецЕсли;		
		
		КонецЦикла;	
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертироватьКоммерческиеПредложения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КоммерческоеПредложениеКлиентуТовары.Ссылка КАК Ссылка,
	               |	КоммерческоеПредложениеКлиентуТовары.CRM_ИДВарианта КАК CRM_ИДВарианта
	               |ИЗ
	               |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
	               |ГДЕ
	               |	КоммерческоеПредложениеКлиентуТовары.CRM_ИДВарианта <> 0";
	Если Запрос.Выполнить().Пустой() Тогда Возврат; КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КоммерческоеПредложениеКлиентуТовары.Ссылка,
	               |	СУММА(ВЫБОР
	               |			КОГДА КоммерческоеПредложениеКлиентуТовары.Активность
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК КоличествоАктивных,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоммерческоеПредложениеКлиентуТовары.НомерСтроки) КАК КоличествоСтрок
	               |ИЗ
	               |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КоммерческоеПредложениеКлиентуТовары.Ссылка";
					
					
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоСтрок > 0 Тогда
			
			КоммерческоеПредложениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Выборка.КоличествоАктивных > 0 Тогда
				
				УтвержденныйВариантИД = 1;
				НеУтвержденныйВариантИД = 2;
				
			Иначе
				
				НеУтвержденныйВариантИД = 1;
				
			КонецЕсли;
			
			ЕстьНеактивные = Ложь;
			
			Для каждого СтрокаТовары Из КоммерческоеПредложениеОбъект.Товары Цикл
				
				СтрокаТовары.CRM_ИДВарианта = ?(СтрокаТовары.Активность, УтвержденныйВариантИД, НеУтвержденныйВариантИД);
				СтрокаТовары.CRM_ИмяВарианта = "";
				СтрокаТовары.CRM_Утвержден = СтрокаТовары.Активность;
				СтрокаТовары.CRM_ЭтоРазделитель = Ложь;
				
			КонецЦикла;
			
			КомментарииНоваяСтрока = КоммерческоеПредложениеОбъект.CRM_КомментарииВариантов.Добавить();
			
			КомментарииНоваяСтрока.ИДВарианта = 1;
			КомментарииНоваяСтрока.КомментарийВарианта = "";
			
			Если Выборка.КоличествоСтрок > Выборка.КоличествоАктивных Тогда
				
				КомментарииНоваяСтрока = КоммерческоеПредложениеОбъект.CRM_КомментарииВариантов.Добавить();
				
				КомментарииНоваяСтрока.ИДВарианта = 2;
				КомментарииНоваяСтрока.КомментарийВарианта = "";
				
			КонецЕсли;
			
			КоммерческоеПредложениеОбъект.Записать();
			
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры// КонвертироватьКоммерческиеПредложения()

Процедура ОбновитьНастройкиОтправкиSMS4B() Экспорт
	
	ПровайдерSMS = Константы.ПровайдерSMS.Получить();
	Если ПровайдерSMS <> Перечисления.ПровайдерыSMS.SMS4B Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.SMS4B_НастройкиСервиса.Получить().Получить() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСервиса = SMS4B_ОтправкаSMS.SMS4B_ПрочитатьНастройкиСервиса();
	
	ИменаОтправителяСтрока = Константы.Удалить_SMS4B_НомераОтправителя.Получить();
	ИменаОтправителяСтрока = СокрЛП(СтрЗаменить(ИменаОтправителяСтрока, Символы.ВК, ""));
	Если ЗначениеЗаполнено(ИменаОтправителяСтрока) Тогда
		ИменаОтправителяМассив = СтрРазделить(ИменаОтправителяСтрока, Символы.ПС, Ложь);
		НастройкиСервиса.ИменаОтправителя = Новый ФиксированныйМассив(ИменаОтправителяМассив);
	КонецЕсли;
	
	ДатаНачалаЗапрета = Константы.Удалить_SMS4B_НачалоПериодаЗапрета.Получить();
	ДатаОкончанияЗапрета = Константы.Удалить_SMS4B_КонецПериодаЗапрета.Получить();
	
	ПериодЗапретаСтруктура = Новый Структура;
	ПериодЗапретаСтруктура.Вставить("ДатаНачала",			ДатаНачалаЗапрета);
	ПериодЗапретаСтруктура.Вставить("ДатаОкончания",		ДатаОкончанияЗапрета);
	НастройкиСервиса.ПериодЗапрета = Новый ФиксированнаяСтруктура(ПериодЗапретаСтруктура);
	
	НастройкиСервиса.СрокЖизниСообщений = Константы.Удалить_SMS4B_СрокЖизниSMS.Получить();
	
	НастройкиСервиса.МаксАктуальностьДоставки = Константы.Удалить_SMS4B_АктуальностьДоставки.Получить();
	НастройкиСервиса.МаксДлительностьДоставки = Константы.Удалить_SMS4B_ДлительностьДоставки.Получить();
	
	SMS4B_ОтправкаSMS.SMS4B_ЗаписатьНастройкиСервиса(НастройкиСервиса);
	
КонецПроцедуры

Процедура ОбновитьРеквизитыПоискаДублейПартнеров() Экспорт
	РеквизитыПоискаДублей = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить().Получить();
	Если РеквизитыПоискаДублей<>Неопределено Тогда
		Если РеквизитыПоискаДублей.НайтиПоЗначению("CRM_ИНН;=") = Неопределено Тогда
			РеквизитыПоискаДублей.Вставить(2, "CRM_ИНН;=","ИНН",Истина);
			Константы.CRM_РеквизитыПоискаДублейПартнеров.Установить(Новый ХранилищеЗначения(РеквизитыПоискаДублей));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ИсправитьКомментарииВариантов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.Ссылка КАК Ссылка,
	                |	КОЛИЧЕСТВО(КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.НомерСтроки) КАК НомерСтроки,
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.ИДВарианта) КАК ИДВарианта,
	                |	МАКСИМУМ(КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.КомментарийВарианта) КАК КомментарийВарианта
	                |ПОМЕСТИТЬ КомментарииВариантовКП
	                |ИЗ
	                |	Документ.КоммерческоеПредложениеКлиенту.CRM_КомментарииВариантов КАК КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	                |		ПО КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.Ссылка = КоммерческоеПредложениеКлиенту.Ссылка
	                |ГДЕ
	                |	НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	КоммерческоеПредложениеКлиентуCRM_КомментарииВариантов.Ссылка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КомментарииВариантовКП.Ссылка КАК Ссылка,
	                |	КомментарииВариантовКП.НомерСтроки КАК НомерСтроки,
	                |	КомментарииВариантовКП.ИДВарианта КАК ИДВарианта,
	                |	КомментарииВариантовКП.КомментарийВарианта КАК КомментарийВарианта
	                |ИЗ
	                |	КомментарииВариантовКП КАК КомментарииВариантовКП
	                |ГДЕ
	                |	КомментарииВариантовКП.НомерСтроки > КомментарииВариантовКП.ИДВарианта";
	
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	НомераВариантов = Новый Массив;
	
	Пока ВыборкаРезультата.Следующий() Цикл
		
		НомераВариантов.Очистить();
		
		КоммерческоеПредложениеОбъект = ВыборкаРезультата.Ссылка.ПолучитьОбъект();
		
		ИндексСтроки = 0;
		
		Пока ИндексСтроки < КоммерческоеПредложениеОбъект.CRM_КомментарииВариантов.Количество() Цикл
			
			CRM_КомментарииВариантовСтрока = КоммерческоеПредложениеОбъект.CRM_КомментарииВариантов[ИндексСтроки];
			
			Если НомераВариантов.Найти(CRM_КомментарииВариантовСтрока.ИДВарианта) = Неопределено Тогда
				
				НомераВариантов.Добавить(CRM_КомментарииВариантовСтрока.ИДВарианта);
				
				ИндексСтроки = ИндексСтроки + 1;		
			
			Иначе
				
				КоммерческоеПредложениеОбъект.CRM_КомментарииВариантов.Удалить(ИндексСтроки);				
				
			КонецЕсли;
		
		КонецЦикла;
		
		КоммерческоеПредложениеОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновлениеФормРабочегоСтола() Экспорт
	
	// СписокФорм - Список значений (значение - имя искомой формы, представление - имя новой формы)
	// Если не задано новое имя формы - удаляем старую из регистра
	СписокФорм = Новый СписокЗначений;
	СписокФорм.Добавить("ЖурналДокументов.БезналичныеПлатежи.Форма.ФормаСписка", "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка");
	СписокФорм.Добавить("Справочник.Партнеры.Форма.ФормаСписка", "Справочник.Партнеры.Форма.CRM_Модуль_ФормаСписка");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	CRM_НастройкиРабочегоСтола.ИмяФормы КАК ИмяФормы
	                |ИЗ
	                |	РегистрСведений.CRM_НастройкиРабочегоСтола КАК CRM_НастройкиРабочегоСтола
	                |ГДЕ
	                |	CRM_НастройкиРабочегоСтола.ИмяФормы В(&ИменаФорм)";
	
	Запрос.УстановитьПараметр("ИменаФорм", СписокФорм);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_НастройкиРабочегоСтола.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИмяФормы.Установить(Выборка.ИмяФормы);
		НаборЗаписей.Прочитать();
		
		ТЗНастроек = НаборЗаписей.Выгрузить();
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
		НоваяФорма = СписокФорм.НайтиПоЗначению(Выборка.ИмяФормы);
		Если НЕ НоваяФорма.Представление = "" Тогда
			НаборЗаписей = РегистрыСведений.CRM_НастройкиРабочегоСтола.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяФормы.Установить(НоваяФорма.Представление);
			Для каждого Запись из ТЗНастроек Цикл
				Запись.ИмяФормы = НоваяФорма.Представление;
			КонецЦикла;
			НаборЗаписей.Загрузить(ТЗНастроек);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправлениеШаблоновПоказателей() Экспорт
	
	ОбработатьПоказатель("ВыставленныеСчета");
	ОбработатьПоказатель("ВысланныеКП");
	ОбработатьПоказатель("СреднийЧек");
	ОбработатьПоказатель("Продажи");
	
КонецПроцедуры

Процедура ОбработатьПоказатель(ИмяПоказателя)
	
	Показатель	= Справочники.CRM_ШаблоныКлючевыхПоказателей[ИмяПоказателя];
	Макет		= Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет(ИмяПоказателя);
	
	ПоказательОбъект = Показатель.ПолучитьОбъект();
	
	СхемаКомпоновки = ПоказательОбъект.ХранилищеСхемыКомпоновкиДанных.Получить();
	НаборДанных = СхемаКомпоновки.НаборыДанных[0];
	
	ПараметрыСхемы = СхемаКомпоновки.Параметры;
	ПараметрМенеджер = ПараметрыСхемы["Менеджеры"];
	ПараметрМенеджер.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	
	ВариантНастроек = СхемаКомпоновки.ВариантыНастроек[0];
	ВыбранныеПоля = ВариантНастроек.Настройки.Выбор.Элементы;
	НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Менеджер");
	
	НастройкиКомпоновки = ПоказательОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если НастройкиКомпоновки<>Неопределено Тогда
		ВыбранныеПоля = НастройкиКомпоновки.Выбор.Элементы;
		НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Менеджер");
	КонецЕсли;
	
	НаборДанныхМакет = Макет.НаборыДанных[0];
	НаборДанных.Запрос = НаборДанныхМакет.Запрос;
	
	ПоказательОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновки);
	ПоказательОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновки);
	ПоказательОбъект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДляОбмена(Параметры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.CRM_ИмяПредопределенногоЭлемента = """"";
	ТабДанных = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТабДанных Цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Если Об.Предопределенный Тогда
			Об.CRM_ИмяПредопределенногоЭлемента = Об.ИмяПредопределенныхДанных;
		Иначе
			Об.CRM_ИмяПредопределенногоЭлемента = Строка(Строка.Ссылка.УникальныйИдентификатор());
		КонецЕсли;	
		Об.Записать();
	КонецЦикла;	
КонецПроцедуры

Процедура ОбновитьДействияТриггеров() Экспорт
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ОповещениеПочта.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерПочтовойРассылки"));
	ОбработкаТриггера.Записать();
КонецПроцедуры

Процедура ОбновлениеШаблонаПоказателяПродажи() Экспорт
	
	// Обработка показателей для совместимости с новой логикой.
	ОбработатьПоказатель("Продажи");
	
КонецПроцедуры

Процедура ОбновлениеШаблонаПоказателяВысланныеКП() Экспорт
	
	// Обработка показателей для совместимости с новой логикой.
	ОбработатьПоказатель("ВысланныеКП");
	
КонецПроцедуры

#Область Обновление_3_0_15_5

Процедура ОбновлениеДействийТриггеров(Параметры = Неопределено) Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ЗаявкаССайта.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗаявкаССайта"));
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ВосстановлениеИнтереса.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерВосстановлениеИнтереса"));
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ИзменениеСостоянияИнтереса.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерИзменениеСостоянияИнтереса"));
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ПересчетПотенциалаВИнтересе.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет(?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(),"","CRM_Модуль_")+"CRM_ТриггерПересчетПотенциалаВИнтересе"));
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ОповещениеПочта.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерПочтовойРассылки"));
	ОбработкаТриггера.Записать();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_15_5

#Область Обновление_3_0_15_6

Процедура ЗаполнениеПризнакаЗаметкаДляЛенты(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заметки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	Заметки.Предмет ССЫЛКА Справочник.Партнеры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заметки.Ссылка
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	Заметки.Предмет ССЫЛКА Справочник.КонтактныеЛицаПартнеров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заметки.Ссылка
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	Заметки.Предмет ССЫЛКА Документ.CRM_Интерес");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаметкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаметкаОбъект.CRM_ЗаметкаЛенты = Истина;
		ЗаметкаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_15_6

#КонецОбласти

