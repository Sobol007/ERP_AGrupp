// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеИПроверкаЗаполнения

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	
	КолонкиРеквизитов = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки;
	
	Если КолонкиРеквизитов.Найти("Артикул")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Код")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакКод",
			Новый Структура("Номенклатура", "Код"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ХарактеристикиИспользуются")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ЕдиницаИзмерения")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
			Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ТипНоменклатуры")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
//
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ИспользованиеХарактеристикСерийУпаковок

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования серий (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			Номенклатура.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВладелецСерий.ИспользоватьСерии
		|		КОГДА
		|			Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВидНоменклатуры.ИспользоватьСерии
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИспользованияСерий
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Использование = Ложь;
		Если Выборка.Следующий() Тогда
			Использование = Выборка.ПризнакИспользованияСерий;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьУпаковки");
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ОфициальноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ОфициальноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//   Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//     собственную организацию или контрагента
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
//
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") И ТорговыйОбъект = Неопределено Тогда 
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Подразделение                         КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации) КАК Организация
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ТорговыйОбъект
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Сведения, Выборка);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации) - заполняемая структура представления
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	//++ НЕ ГОСИС
	ДанныеРуководителя = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, ДатаСведений);
	ПредставлениеРуководителя.Руководитель = Строка(ДанныеРуководителя.ФизическоеЛицо);
	ПредставлениеРуководителя.Должность = Строка(ДанныеРуководителя.Должность);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация,
//  Неопределено - организация не найдена.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Организация = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, Организация);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент,
//  Неопределено - контрагент не найден.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Контрагент = Неопределено;
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Контрагент = РезультатПоиска.Ссылка;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Ложь);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ГиперссылкиВФормахДокументовОснований

// Заполняет параметры интеграции с библиотеками ГосИС по входящему объекту.
// 
// Параметры:
//  ПараметрыИнтеграции - Структура - См. ИнтеграцияИС.ПараметрыИнтеграцииВФорме.
//  ОбъектМетаданных - Метаданные - Метаданные объекта.
//
Процедура ЗаполнитьПараметрыИнтеграцииВФормеПоОбъекту(ПараметрыИнтеграции, ОбъектМетаданных) Экспорт
	
	//++ НЕ ГОСИС
	// Объекты с гиперссылками на ВетИС
	ОбъектыИнтеграцииВЕТИС = Новый Массив;
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьОбъектыМетаданныхИнтеграции(ОбъектыИнтеграцииВЕТИС);
	Если ОбъектыИнтеграцииВЕТИС.Найти(ОбъектМетаданных) <> Неопределено Тогда
		ПараметрыИнтеграции.ИменаПодсистем = "ВетИС";
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Вызывается при формировании текста гиперссылки ГОСИС в форме документа-основания.
// В данной процедуре можно переопределить текст гиперссылки ГОСИС (например ВетИС), формируемый механикой подсистемы.
// Для переопределения текста гиперссылки необходимо поместить этот текст в параметр ТекстНадписи.
//
Процедура ПриОбновленииПоляИнтеграцииВФормеДокументаОснования(Форма, Объект, ТекстНадписи) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	//++ НЕ ГОСИС
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// см ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Документ,
		Статус,
		ЕстьОшибкиПроведен,
		ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		СоглашениеДоступноВнешнемуПользователю);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры


// Возвращаяет представление объекта.
// 
// Параметры:
// 	Представление - Строка - Исходящий параметр со значением представления.
// 	ПараметрОбъект - Строка, Объект - Наименование типа объекта либо сам объект.
//
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	//++ НЕ ГОСИС
	Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(ПараметрОбъект);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//   Представление  - Строка                                     - представление для заполнения,
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	//++ НЕ ГОСИС
	Представление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		СокрЛП(Номенклатура),
		СокрЛП(Характеристика),
		Упаковка,
		Серия);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры
#КонецОбласти

#Область ПраваДоступа

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	//++ НЕ ГОСИС
	ДоступРазрешен = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовыИзБСП

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	//++ НЕ ГОСИС
	Если НастройкиФормы.ИмяФормы = "Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма" Тогда
		Обработки.ГенерацияШтрихкодовУпаковок.ПриОпределенииКомандПодключенныхКОбъекту(Команды);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	//++ НЕ ГОСИС
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// Заполняет имена реквизитов, от значений которых зависят параметры указания серий.
//
// Параметры:
//   ИменаРеквизитов - Строка           - Результат заполнения.
//   ТипОбъекта      - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//
Процедура ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ВидОперации,ТорговыйОбъект";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		ИменаРеквизитов = "Дата,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,ОперацияМаркировки,Дата";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,Дата";
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры  - Структура        - выходной, параметры указания серий, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//   Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНИсходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНВходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИСВозврат(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктПостановкиНаБалансЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктСписанияЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийПередачаВРегистр2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийВозвратИзРегистра2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСопоставлениеКлассификаторовЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийШтрихкодыУпаковокТоваров(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		
		Параметры = ИнтеграцияГИСМУТ.ПараметрыУказанияСерийМаркировкаТоваровГИСМ(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		Параметры = ИнтеграцияГИСМУТ.ПараметрыУказанияСерийПеремаркировкаТоваровГИСМ(Объект);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры       - Структура - выходной, особенности указания серий в объекте, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   Объект          - Объект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                 указания серий.
//   МенеджерОбъекта - Менеджер  - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	//++ НЕ ГОСИС
	Параметры = НоменклатураСервер.ПараметрыУказанияСерий(Объект, МенеджерОбъекта);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" объекта,
//   перерасчитывает статусы указания серий строках товарной табличной части.
//
// Параметры:
//   Объект                      - ДанныеФормыСтуктура - Основной реквизит формы объекта,
//   ПараметрыУказанияСерий      - Структура           - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   ПараметрыФормыУказанияСерий - Структура           - Состав полей определен в функции НоменклатураСервер.ПараметрыФормыУказанияСерий.
//   КэшированныеЗначения        - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, ,
		КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках товарной табличной части.
//
// Параметры:
//   Объект                 - ДанныеФормыСтуктура - Основной реквизит формы объекта.
//   ПараметрыУказанияСерий - Структура           - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий 
// другим строкам таблицы.
//
// Параметры:
//   Объект                     - ДанныеФормыСтуктура - Основной реквизит формы объекта.
//   ПараметрыУказанияСерий     - Структура           - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   ТекущаяСтрокаИдентификатор - Число               - Идентификатор текущей строки товаров в форме объекта.
//   КэшированныеЗначения       - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
	Объект,
	ПараметрыУказанияСерий,
	ТекущаяСтрокаИдентификатор,
	КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий,
		ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//   ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//   ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//   ПараметрыУказанияСерий - Структура        - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийШтрихкодыУпаковокТоваров(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыВЕТИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийЗапросСкладскогоЖурналаВЕТИС(ПараметрыУказанияСерий);
	
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС();
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийИнвентаризацияПродукцииВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПроизводственнаяОперацияВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийТТНВходящаяЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС
		ИЛИ  ТипОбъекта = Метаданные.Документы.ЧекЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат
		ИЛИ ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийМаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПеремаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса проверки заполнения серий в документе.
//
// Параметры:
//   ТекстЗапроса           - Строка           - Текст запроса проверки заполнения серий.
//   ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//   ПараметрыУказанияСерий - Структура        - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ЗаполнитьТекстЗапросаПроверкиЗаполненияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаПроверкиЗаполненияСерийПеремаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
