////////////////////////////////////////////////////////////////////////////////
// Управление производством: содержит процедуры для управления производством.
// Модуль входит в подсистему "УправлениеПредприятием".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОткрытиеФорм

// Открывает заказ на производство с выделением строки продукции
//
// Параметры:
//  Заказ		 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  ДанныеСтроки - Структура							 - см. УправлениеПроизводствомКлиентСервер.СтруктураПродукцииЗаказа()
//  Форма		 - УправляемаяФорма						 - форма из которой выполняется переход.
//
Процедура ОткрытьСтрокуЗаказаНаПроизводства(Заказ, ДанныеСтроки, Форма) Экспорт
	
	Параметры = Новый Структура("Ключ, ВыбраннаяСтрока", Заказ, ДанныеСтроки);
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаОбъекта", Параметры, Форма);
	
КонецПроцедуры

// Открывает очередь заказов
//
// Параметры:
//  СтруктураОтборов - Структура							 - устанавливаемые отборы
//  ТекущаяСтрока	 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  Форма			 - УправляемаяФорма						 - форма из которой выполняется переход.
//
Процедура ОткрытьОчередьЗаказов(СтруктураОтборов = Неопределено, ТекущаяСтрока = Неопределено, Форма = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Если СтруктураОтборов <> Неопределено Тогда
		Параметры.Вставить("СтруктураОтборов", СтруктураОтборов);
	КонецЕсли;
	Если ТекущаяСтрока <> Неопределено Тогда
		Параметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	КонецЕсли;
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.Форма.УправлениеОчередьюЗаказов", Параметры, Форма);
	
КонецПроцедуры

// Открывает форму редактирования цепочки этапов
//
// Параметры:
//  Распоряжение		 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  ПартияПроизводства	 - СправочникСсылка.ПартияПроизводства	 - партия производства
//  Продукция			 - Массив								 - массив структур, определяющих перечень дефицита продукции.
//  Форма				 - УправляемаяФорма						 - форма (владелец)
//
Процедура ОткрытьФормуРедактированияЦепочкиЭтапов(Распоряжение, ПартияПроизводства, Продукция = Неопределено, Форма = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Распоряжение", Распоряжение);
	Параметры.Вставить("ПартияПроизводства", ПартияПроизводства);
	Параметры.Вставить("Продукция", Продукция);
	
	ОткрытьФорму("Обработка.РедактированиеПоследовательностиЭтаповПроизводства.Форма", Параметры, Форма);
	
КонецПроцедуры

// Открывает форму создания новой цепочки этапов
//
// Параметры:
//  Распоряжение				 - ДокументСсылка.ЗаказНаПроизводство2_2			 - заказ на производство.
//  ТипПроизводственногоПроцесса - ПеречислениеСсылка.ТипыПроизводственныхПроцессов	 - тип производственного процесса.
//  Назначение					 - СправочникСсылка.Назначение						 - назначение продукции заказа.
//  Продукция					 - Массив											 - массив структур, определяющих перечень дефицита продукции.
//  Форма						 - УправляемаяФорма									 - форма (владелец).
//
Процедура ОткрытьФормуСозданияНовойЦепочкиЭтапов(Распоряжение,
												ТипПроизводственногоПроцесса,
												Назначение,
												Продукция = Неопределено,
												Форма = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Распоряжение", Распоряжение);
	Параметры.Вставить("ТипПроизводственногоПроцесса", ТипПроизводственногоПроцесса);
	Параметры.Вставить("Назначение", Назначение);
	Параметры.Вставить("Продукция", Продукция);
	
	ОткрытьФорму("Обработка.РедактированиеПоследовательностиЭтаповПроизводства.Форма", Параметры, Форма);
	
КонецПроцедуры

// Открывает рабочее место "Выполнение операций" с отбором по этапу производства
//
// Параметры:
//  Этап	 - ДокументСсылка.ЭтапПроизводства2_2, Массив	 - этап или список этапов
//  Форма	 - УправляемаяФорма								 - форма из которой выполняется переход.
//
Процедура ОткрытьВыполнениеОпераций(Этап, Форма) Экспорт
	
	МассивСсылок = ОбщегоНазначенияУТКлиентСервер.Массив(Этап);
	
	ВыбранноеПодразделение = Неопределено;
	Подразделения = УправлениеПроизводствомВызовСервера.ПодразделенияИсполнители(МассивСсылок);
	Для каждого Ссылка Из МассивСсылок Цикл
		
		Если ВыбранноеПодразделение = Неопределено Тогда
			ВыбранноеПодразделение = Подразделения[Ссылка];
		КонецЕсли;
		
		Если ВыбранноеПодразделение <> Подразделения[Ссылка] Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для выбранных объектов!';
											|en = 'Command cannot be executed for the selected objects.'"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПодразделения = ПроизводствоВызовСервера.ПараметрыПроизводственногоПодразделения(ВыбранноеПодразделение);
	
	Если Не ПараметрыПодразделения.ИспользоватьПооперационноеУправление Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена, в подразделении не используется пооперационное управление!';
										|en = 'Command cannot be executed, operation management is not used in the department.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Подразделение, ОтборПоЭтапам", ВыбранноеПодразделение, МассивСсылок);
	
	Если ПараметрыПодразделения.ИспользоватьПооперационноеПланирование Тогда
		ИмяФормы = "Обработка.ВыполнениеОперацийПриПланировании.Форма.РабочееМесто";
	Иначе
		ИмяФормы = "Обработка.ВыполнениеОпераций2_2.Форма.РабочееМесто";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, СтруктураПараметров, Форма);

КонецПроцедуры

// Открывает упрощенную форму отражения выполненного этапа производства
//
// Параметры:
//  ЗаказОбъект	 - ДанныеФормыСтруктура	 - заказ на производство
//  Форма		 - УправляемаяФорма		 - форма из которой выполняется переход.
//
Процедура ОткрытьФормуОтраженияВыполненногоЭтапаИзЗаказа(ЗаказОбъект, Форма) Экспорт
	
	ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
	ПустаяСпецификация = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
	
	РеквизитыШапки = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
		ЗаказОбъект.Ссылка,
		ЗаказОбъект.НазначениеПродукция,
		ЗаказОбъект.ПартияПроизводства,
		ТипПроизводственногоПроцесса,
		ПустаяСпецификация);
	
	Дата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");
	
	РеквизитыШапки.Вставить("Статус", Статус);
	РеквизитыШапки.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", ЗаказОбъект.СпособРаспределенияЗатратНаВыходныеИзделия);

	РеквизитыШапки.Вставить("НеОтгружатьЧастями",			Истина);
	РеквизитыШапки.Вставить("РасходОднойДатой",				Истина);
	РеквизитыШапки.Вставить("ПроизводствоОднойДатой",		Истина);
	РеквизитыШапки.Вставить("ВыполнениеРаботОднойДатой",	Истина);
	
	РеквизитыШапки.Вставить("Дата",							Дата);
	РеквизитыШапки.Вставить("ФактическоеНачалоЭтапа",		Дата);
	РеквизитыШапки.Вставить("ФактическоеОкончаниеЭтапа",	Дата);
	РеквизитыШапки.Вставить("ЖелаемаяДатаОбеспечения",		Дата);
	РеквизитыШапки.Вставить("ДатаОтгрузки",					Дата);
	РеквизитыШапки.Вставить("ДатаРасхода",					Дата);
	РеквизитыШапки.Вставить("ДатаПроизводства",				Дата);
	РеквизитыШапки.Вставить("ДатаВыполненияРабот",			Дата);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОтражениеВыполненного", Истина);
	Параметры.Вставить("ЗначенияЗаполнения",    ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.ФормаОбъекта", Параметры, Форма);
	
КонецПроцедуры

// Открывает форму выбора этапа-потребителя
//
// Параметры:
//  Объект					 - ДокументОбъект.ЭтапПроизводства2_2	 - этап
//  ТекущаяСтрока			 - Структура							 - данные текущей строки
//  Владелец				 - УправляемаяФорма						 - форма или элемент управления в которой выполняется выбор
//  ОписаниеОповещения		 - ОписаниеОповещения					 - содержит описание процедуры, которая будет вызвана при закрытии формы
//
Процедура ОткрытьФормуВыбораЭтапаПотребителя(Объект, ТекущаяСтрока, Владелец, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Распоряжение", Объект.Распоряжение);

	ПараметрыФормы.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	ПараметрыФормы.Вставить("Назначение", ТекущаяСтрока.Назначение);
	
	ПараметрыФормы.Вставить("Получатель", ТекущаяСтрока.Получатель);
	
	ПараметрыФормы.Вставить("Источник", Объект.Ссылка);
	
	ОткрытьФорму("РегистрНакопления.ОбеспечениеПроизводственныхПроцессов.Форма.ФормаВыбораЭтаповПроизводства",
		ПараметрыФормы,
		Владелец,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

// Открывает форму, детализирующую состояние выполнения производственных операций этапа производства.
//
// Параметры:
//  Этап	  - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//  Состояние - ПеречислениеСсылка.СостоянияОперацийЭтапаПроизводства - состояние выполнения операций.
//  Форма	  - УправляемаяФорма - владелец открываемой формы.
//
Процедура РасшифроватьСостояниеОперацийЭтапа(Этап, Состояние, Форма) Экспорт
	
	Если Этап.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ОбщегоНазначенияУТКлиентСервер.Массив(Этап);
	
	Подразделения = УправлениеПроизводствомВызовСервера.ПодразделенияИсполнители(МассивСсылок);
	Подразделение = Подразделения[Этап];
	
	ПараметрыПодразделения = ПроизводствоВызовСервера.ПараметрыПроизводственногоПодразделения(Подразделение);
	
	Если Не ПараметрыПодразделения.ИспользоватьПооперационноеУправление Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена, в подразделении не используется пооперационное управление!';
										|en = 'Command cannot be executed, operation management is not used in the department.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыПодразделения.ИспользоватьСменныеЗадания
		ИЛИ Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЭтапаПроизводства.Выполнено") Тогда
		
		ПараметрыФормы = Новый Структура("Подразделение, ОтборПоЭтапам", Подразделение, МассивСсылок);
		
		Если ПараметрыПодразделения.ИспользоватьПооперационноеПланирование Тогда
			ИмяФормы = "Обработка.ВыполнениеОперацийПриПланировании.Форма.РабочееМесто";
		Иначе
			ИмяФормы = "Обработка.ВыполнениеОпераций2_2.Форма.РабочееМесто";
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма);
		
	Иначе
		
		Если Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЭтапаПроизводства.ОжидаетЗавершения") Тогда
			
			ОткрытьФорму(
				"Документ.СменноеЗадание.ФормаСписка",
				Новый Структура("ОтборПоЭтапу", Этап),
				Форма); 
			
		ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЭтапаПроизводства.ОжидаетНазначения") Тогда
			
			ОткрытьФорму(
				"Обработка.ФормированиеСменныхЗаданий.Форма",
				Новый Структура("ОтборПоЭтапу", Этап),
				Форма); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Аналоги

// Процедура - Открыть выбор аналогов
//
// Параметры:
//  ПараметрыВыбораАналогов	 - Структура - содержит параметры выбора (см функцию УправлениеПроизводствомКлиентСервер.ПараметрыВыбораАналогов)
//  Форма					 - УправляемаяФорма - форма в которой выполняется выбор аналогов (после выбора будет вызвано событие ОбработкаВыбора()).
//
Процедура ОткрытьПодборАналогов(ПараметрыВыбораАналогов, Форма) Экспорт
	
	ОткрытьФорму("Документ.РазрешениеНаЗаменуМатериалов.Форма.ПодборАналогов", ПараметрыВыбораАналогов, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СтатьиНаИТС

// Выполняет переход по ссылке на статью "5 шагов к производству версии 2.2"
//
Процедура ОткрытьСтатью5ШаговКПроизводству22() Экспорт
	
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://its.1c.ru/db/metod81#content:6511:hdoc");
	
КонецПроцедуры

#КонецОбласти

#Область ОповещенияПользователей

// Оповещает пользователя о завершении процесса передачи этапов к выполнению.
//
// Параметры:
//  Результат	 - Структура			 - результат передачи этапов к выполнению
//  Источник	 - УникальныйИдентификатор	 - идентификатор формы, инициировавшей создание документов.
//
Процедура ОповеститьПользователяОПередачиЭтаповКВыполнению(Результат, Источник = Неопределено) Экспорт
	
	Если Результат.Количество > 0 Тогда
		
		ТекстДокументов = ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'документ';
					|en = 'document'"), НСтр("ru = 'документа';
											|en = 'document'"), НСтр("ru = 'документов';
																	|en = 'documents'"), Результат.Количество);
		
		ТекстСообщения = НСтр("ru = 'Передано к выполнению %Количество% %ТекстДокументов%';
								|en = 'Passed for execution %Количество% %ТекстДокументов%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Результат.Количество);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстДокументов%", ТекстДокументов);
		ТекстЗаголовка = НСтр("ru = 'Этапы производства переданы к выполнению';
								|en = 'Production stages are passed for execution'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ни один документ не передан к выполнению';
								|en = 'No document is passed for execution'");
		ТекстЗаголовка = НСтр("ru = 'Этапы производства не переданы к выполнению';
								|en = 'Production stages are not passed for execution'");
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Оповещает пользователя о завершении процесса создания этапов производства.
//
// Параметры:
//  РезультатФормирования	 - Структура - результат формирования этапов.
//  Источник				 - УникальныйИдентификатор - идентификатор формы, инициировавшей создание документов.
//
Процедура ОповеститьПользователяОФормированииЭтаповПроизводства(РезультатФормирования, Источник = Неопределено) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Результат формирования этапов производства';
							|en = 'Production stage generation result'");
	
	Если РезультатФормирования.ЕстьОшибка Тогда
		СтатусОповещения = СтатусОповещенияПользователя.Важное;
	Иначе
		СтатусОповещения = СтатусОповещенияПользователя.Информация;
	КонецЕсли;
	
	Если РезультатФормирования.СформированоДокументов > 0 Тогда
		
		ТекстДокументов = ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'документ';
					|en = 'document'"),
				НСтр("ru = 'документа';
					|en = 'document'"),
				НСтр("ru = 'документов';
					|en = 'documents'"),
				РезультатФормирования.СформированоДокументов);
		
		ТекстСообщения = НСтр("ru = 'Сформировано %КоличествоОбработанных% %ТекстДокументов%';
								|en = 'Generated %КоличествоОбработанных% %ТекстДокументов%'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%КоличествоОбработанных%",
			РезультатФормирования.СформированоДокументов);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстДокументов%", ТекстДокументов);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32, СтатусОповещения);
		
	ИначеЕсли НЕ РезультатФормирования.ЕстьОшибка Тогда
		
		ТекстСообщения = НСтр("ru = 'Не сформирован ни один документ';
								|en = 'No document is generated'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32, СтатусОповещения);
		
	КонецЕсли;
	
	Если РезультатФормирования.ЕстьОшибка Тогда
		
		Ссылка = ПолучитьНавигационнуюСсылку(РезультатФормирования.ОшибкаСсылка);
		
		ТекстСообщения = РезультатФормирования.ОшибкаТекст;
		ПоказатьОповещениеПользователя(ТекстЗаголовка, Ссылка, ТекстСообщения, БиблиотекаКартинок.Ошибка32, СтатусОповещения);
		
	КонецЕсли;
	
	Если РезультатФормирования.Свойство("Распоряжения") И ЗначениеЗаполнено(РезультатФормирования.Распоряжения) Тогда
		Оповестить("Запись_ЭтапыПроизводства", Новый Структура("Распоряжения", РезультатФормирования.Распоряжения));
	Иначе
		Оповестить("Запись_ЭтапыПроизводства");
	КонецЕсли;
	
КонецПроцедуры

// Оповещает пользователя о завершении процесса планирования графика производства.
//
// Параметры:
//  Результат	 - Структура - результат планирования графика производства.
//  Источник	 - УникальныйИдентификатор	 - идентификатор формы, инициировавшей создание документов.
//
Процедура ОповеститьПользователяОПланированииГрафикаПроизводства(Результат, Источник = Неопределено) Экспорт
	
	Если Результат.ЕстьОшибки Тогда
		
		Если Результат.КоличествоОбработанных > 0 Тогда
			ТекстЗаголовка = НСтр("ru = 'Запланировано %КоличествоОбработанных% из %КоличествоВсего% документов';
									|en = '%КоличествоОбработанных% documents planned out of %КоличествоВсего%'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%КоличествоОбработанных%", Результат.КоличествоОбработанных);
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%КоличествоВсего%",        Результат.КоличествоВсего);
		Иначе
			ТекстЗаголовка = НСтр("ru = 'График производства не запланирован';
									|en = 'Production schedule is not planned'");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При планировании заказа %1 возникли ошибки. Подробнее см. в рабочем месте ""Планирование графика заказа"" (нажмите для перехода).';
				|en = 'Errors occurred when planning order %1. For more information, see the ""Order schedule planning"" workplace (click to go).'"),
			УправлениеПроизводствомВызовСервера.ПредставлениеЗаказа(Результат.РаспоряжениеОшибка, ""));
		
			
		ДополнительныеПараметры = Новый Структура("Распоряжение", Результат.РаспоряжениеОшибка);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПерейтиКПланированиюГрафикаПроизводстваЗаказа", 
			ЭтотОбъект,
			ДополнительныеПараметры);
	Иначе
		
		Если Результат.КоличествоОбработанных > 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Запланировано %КоличествоОбработанных% из %КоличествоВсего% документов';
									|en = '%КоличествоОбработанных% documents planned out of %КоличествоВсего%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", Результат.КоличествоОбработанных);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        Результат.КоличествоВсего);
			ТекстЗаголовка = НСтр("ru = 'График производства запланирован';
									|en = 'Production schedule is planned'");
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не запланирован ни один документ';
									|en = 'No document is planned'");
			ТекстЗаголовка = НСтр("ru = 'График производства не запланирован';
									|en = 'Production schedule is not planned'");
			
		КонецЕсли;
		
		ОписаниеОповещения = Неопределено;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ОписаниеОповещения, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Оповещает пользователя о завершении процесса пометки на удаление этапов к выполнению.
//
// Параметры:
//  Результат - Структура - результат выполнения операции.
//
Процедура ОповеститьПользователяОПометкеНаУдалениеЭтаповПроизводства(Результат) Экспорт
	
	ОшибкаСсылка = Неопределено;
	
	Если Результат.КоличествоОбработано > 0 ИЛИ Результат.ЕстьОшибки Тогда
		
		ТекстДокументов = ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'документ';
					|en = 'document'"),
				НСтр("ru = 'документа';
					|en = 'document'"),
				НСтр("ru = 'документов';
					|en = 'documents'"),
				Результат.КоличествоОбработано);
	
		Если Результат.ЕстьОшибки Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка установки пометки на удаления этапов!';
									|en = 'An error occurred when marking stages for deletion.'");
			ТекстШаблон = НСтр("ru = 'При пометке на удаление цепочки этапов %1 возникла ошибка! Помечено на удаление %2 %3.';
								|en = 'An error occurred when marking stage chain %1 for deletion. Marked for deletion %2 %3.'");
			ТекстСообщения = СтрШаблон(ТекстШаблон,Результат.ОшибкаСсылка,Формат(Результат.КоличествоОбработано,"ЧН=; ЧГ="),ТекстДокументов);
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Этапы производства помечены на удаление.';
									|en = 'Production stages are marked for deletion.'");
			ТекстШаблон = НСтр("ru = 'Помечено на удаление %1 %2';
								|en = 'Marked for deletion %1 %2'");
			ТекстСообщения = СтрШаблон(ТекстШаблон,Формат(Результат.КоличествоОбработано,"ЧН=; ЧГ="),ТекстДокументов);
		КонецЕсли;
		
		Если Результат.ЕстьОшибки Тогда 
			ОшибкаСсылка = ПолучитьНавигационнуюСсылку(Результат.ОшибкаСсылка);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ни один документ не помечен на удаление';
								|en = 'No document is marked for deletion'");
		ТекстЗаголовка = НСтр("ru = 'Не удалось пометить на удаление этапы производства';
								|en = 'Cannot mark production stages for deletion'");
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ОшибкаСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РедактированиеЭтапаПроизводства

#Область ВыходныеИзделия

Процедура ВыходныеИзделияЭтапаПриНачалеРедактирования(Форма, ТекущиеДанные, ИмяТЧ, НоваяСтрока, Копирование) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				Форма.ИспользоватьНесколькоСкладов, 
				Форма.СкладПоУмолчанию, 
				ТекущиеДанные,
				"Получатель");
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаправлениеВыпуска(ТекущиеДанные, ИмяТЧ, Форма);
	
	Если НоваяСтрока И Не Копирование Тогда
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
		ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
	КонецЕсли;
	
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(ТекущиеДанные.НаправлениеВыпуска) Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Получатель) Тогда
		Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение")
			ИЛИ ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
			ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		Иначе
			ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	ОграничениеТипаПолучатель(Элементы[ИмяТЧ + "Получатель"], ТекущиеДанные.НаправлениеВыпуска);
	
КонецПроцедуры

Процедура ВыходныеИзделияЭтапаНаправленияВыпускаПриИзменении(ТекущиеДанные, ИмяТЧ, Форма, Объект, КэшированныеЗначения) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НаправлениеВыпуска) Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
	КонецЕсли;
	
	ТекущиеДанные.СписатьНаРасходы = (ТекущиеДанные.НаправлениеВыпуска 
		= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
		
	Если Не ТекущиеДанные.СписатьНаРасходы Тогда
		ТекущиеДанные.СтатьяРасходов = Неопределено;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов) Тогда
		ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
	КонецЕсли;
	
	ОграничениеТипаПолучатель(Элементы[ИмяТЧ + "Получатель"], ТекущиеДанные.НаправлениеВыпуска);
	ТекущиеДанные.Получатель = Элементы[ИмяТЧ + "Получатель"].ОграничениеТипа.ПривестиЗначение(ТекущиеДанные.Получатель);
	
	Если ТекущиеДанные.НаправлениеВыпуска <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТекущиеДанные.ОбработатьПоСпецификации = Ложь;
		ТекущиеДанные.Спецификация = Неопределено;
	КонецЕсли;
	
	ВыходныеИзделияЭтапаПолучательПриИзменении(ТекущиеДанные, ИмяТЧ, Форма, Объект, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ВыходныеИзделияЭтапаПолучательПриИзменении(ТекущиеДанные, ИмяТЧ, Форма, Объект, КэшированныеЗначения) Экспорт
	
	ПараметрыУказанияСерий = Форма[Форма.ПараметрыРедактированияЭтапа.ИмяРеквизитаПараметрыУказанияСерий];
	
	Если ТекущиеДанные.Получатель = Неопределено Тогда
		ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипСклада", Новый Структура("Склад, ТипСклада", "Получатель", "ТипСклада"));
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Получатель, ПараметрыУказанияСерий[ИмяТЧ]));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Функция ЗаполнитьСписокВыбораНаправлениеВыпуска(ТекущиеДанные, ИмяТЧ, Форма) Экспорт

	Элементы = Форма.Элементы;
	
	СписокВыбораЭлемента = Элементы[ИмяТЧ + "НаправлениеВыпуска"].СписокВыбора;
	СписокВыбораЭлемента.Очистить();
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение"),
									НСтр("ru = 'В подразделение';
										|en = 'To department'"));
	Иначе
		СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад"),
									НСтр("ru = 'На склад';
										|en = 'To warehouse'"));
	КонецЕсли;
	
	Если Форма.ИспользоватьСписаниеНаРасходы 		
	   И (ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
	 Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ПроизводствоНаСтороне")
	 Или Не Форма.Объект.ПроизводствоНаСтороне) Тогда
			
			СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"),
										НСтр("ru = 'Списать на расходы';
											|en = 'Write off as expenses'"));
			
	КонецЕсли;	

	Возврат СписокВыбораЭлемента;
	
КонецФункции

#КонецОбласти

Процедура ПобочныеИзделияЭтапаСуммаПриИзменении(ТекущиеДанные, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПобочныеИзделияЭтапаЦенаПриИзменении(ТекущиеДанные, КэшированныеЗначения) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПроизводитсяПриИзменении(ТекущиеДанные, Объект, ПараметрыУказанияСерий, ПараметрыВыбораСпецификаций, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура();
	
	ТекущиеДанные.Спецификация = Неопределено;
	Если ТекущиеДанные.Производится Тогда
		СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
			Объект.Дата,
			Объект.Подразделение,
			ПараметрыВыбораСпецификаций);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
		Объект,
		ТекущиеДанные,
		ПараметрыУказанияСерий,
		СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ОбеспечениеМатериаламиИРаботамиЭтапаПриНачалеРедактирования(Форма, ТекущиеДанные, НоваяСтрока, Копирование) Экспорт
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				Форма.ИспользоватьНесколькоСкладов, 
				Форма.СкладПоУмолчанию, 
				ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбеспечениеМатериаламиИРаботамиЭтапаСпецификацияПриИзменении(Объект, ТекущиеДанные, ПараметрыУказанияСерий, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура();
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
		Объект,
		ТекущиеДанные,
		ПараметрыУказанияСерий,
		СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ОбеспечениеМатериаламиИРаботамиЭтапаСкладПриИзменении(ТекущиеДанные, ПараметрыУказанияСерий, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ТекущиеДанные.Производится Тогда
		
		ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно");
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Склад) 
		И ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется") Тогда
		
		ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется")
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 
				Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ОбеспечениеМатериаламиИРаботамиЗаполнитьОбеспечение(Объект, ВыделенныеСтроки, Форма, ПутьМатериалыИУслуги) Экспорт

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
		"ОбеспечениеМатериаламиИРаботами", НСтр("ru = 'Обеспечение';
												|en = 'Supply'"));
		
	ПараметрыПроверки.Поля.Удалить("Склад");
	ПараметрыПроверки.Поля.Удалить("Подразделение");
		
	ТаблицаМатериалыИУслуги = Объект.ОбеспечениеМатериаламиИРаботами;
	
	ИдентификаторыСтрок = Новый Массив();
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл

		ДанныеСтроки = ТаблицаМатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
		Если НЕ ИспользуетсяВариантОбеспечения(ДанныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыСтрок.Добавить(Идентификатор);
		
	КонецЦикла;

	Если ИдентификаторыСтрок.Количество() > 0 Тогда

		Если ОбеспечениеКлиент.ПроверитьЗаполнение(Объект, ТаблицаМатериалыИУслуги, ИдентификаторыСтрок, ПараметрыПроверки) Тогда

			ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа("ЭтапПроизводства2_2");
			ПараметрыФормы.СписокВыбора = УправлениеПроизводствомКлиентСервер.ДоступныеВариантыОбеспечения();
			
			ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы, Форма);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ИспользуетсяВариантОбеспечения(ДанныеСтроки) Экспорт

	Если ДанныеСтроки.Производится
		И ДанныеСтроки.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

#Область ЭкономияМатериалов

Процедура ЭкономияМатериаловПриНачалеРедактирования(Форма, Объект, ТекущиеДанные, НоваяСтрока, Копирование) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				Форма.ИспользоватьНесколькоСкладов, 
				Форма.СкладПоУмолчанию, 
				ТекущиеДанные,
				"Получатель");
		
		Если Объект.РасходОднойДатой И Объект.ДатаРасхода <> '000101010000' Тогда
			ТекущиеДанные.ДатаОперации = Объект.ДатаРасхода;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭкономияЗаполнитьСписокВыбораДействия(ТекущиеДанные, Форма);
	
	Если НоваяСтрока И Не Копирование Тогда
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
		ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Действия = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства");
	КонецЕсли;
	
	ОграничениеТипаПолучатель(Элементы.ЭкономияМатериаловПолучатель, ТекущиеДанные.Действия);
	
КонецПроцедуры

Процедура ЭкономияМатериаловЭтапаДействиеПриИзменении(ТекущиеДанные, Форма, Объект, КэшированныеЗначения) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Действия) Тогда
		ТекущиеДанные.Действия = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства");
	КонецЕсли;
	
	ТекущиеДанные.СписатьНаРасходы = (ТекущиеДанные.Действия = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	Если Не ТекущиеДанные.СписатьНаРасходы Тогда
		ТекущиеДанные.СтатьяРасходов = Неопределено;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов) Тогда
		ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
	КонецЕсли;
	
	Если ТекущиеДанные.СписатьНаРасходы Тогда
		ТекущиеДанные.Обособить = Ложь;
	КонецЕсли;
	
	ОграничениеТипаПолучатель(Элементы.ЭкономияМатериаловПолучатель, ТекущиеДанные.Действия);
	
	ТекущиеДанные.Получатель = Элементы.ЭкономияМатериаловПолучатель.ОграничениеТипа.ПривестиЗначение(
												ТекущиеДанные.Получатель);
		
	ПолучательПриИзменении(ТекущиеДанные, "ЭкономияМатериалов", Форма, Объект, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЭкономияМатериаловЗаполнитьПризнакОбособленно(ТекущиеДанные, ОбеспечениеМатериаламиИРаботами) Экспорт
	
	ТекущиеДанные.Обособить = Ложь;
	
	Отбор = Новый Структура("Номенклатура, Характеристика", ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	НайденныеСтроки = ОбеспечениеМатериаламиИРаботами.НайтиСтроки(Отбор);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		Если (Строка.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно")
			ИЛИ Строка.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")) Тогда
			ТекущиеДанные.Обособить = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭкономияЗаполнитьСписокВыбораДействия(ТекущиеДанные, Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораЭлемента = Элементы.ЭкономияМатериаловДействия.СписокВыбора;
	СписокВыбораЭлемента.Очистить();
	
	СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства"),
									НСтр("ru = 'Передать на склад';
										|en = 'Transfer to warehouse'"));
	
	Если Форма.ИспользоватьСписаниеНаРасходы Тогда
		СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"),
									НСтр("ru = 'Списать на расходы';
										|en = 'Write off as expenses'"));
	КонецЕсли;
	
	Возврат СписокВыбораЭлемента;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект, Форма, ИмяТЧ, ТекущийНомерСтроки, Направление) Экспорт
	
	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Если Направление = 1 Тогда
		Для каждого Строка из Объект[ИмяТЧ] Цикл
			
			Если Строка.Номенклатура.Пустая()
					ИЛИ Строка.Характеристика.Пустая() И Строка.ХарактеристикиИспользуются Тогда
				
				Если Строка.НомерСтроки > ТекущийНомерСтроки Тогда
					
					Элементы[ИмяТЧ].ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		
		Сч = Объект[ИмяТЧ].Количество() - 1;
		
		Пока Сч >= 0 Цикл
			
			Строка = Объект[ИмяТЧ][Сч];
			
			Если Строка.Номенклатура.Пустая()
					ИЛИ Строка.Характеристика.Пустая() И Строка.ХарактеристикиИспользуются Тогда
				
				Если Строка.НомерСтроки < ТекущийНомерСтроки Тогда
					
					Элементы[ИмяТЧ].ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Сч = Сч - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВыбораСтатьиРасходов() Экспорт
	
	ПараметрыВыбораСтатьи = Новый Массив;
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина));
	
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию")));
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять"));
	
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходов", Новый ФиксированныйМассив(МассивВариантов)));
	
	Результат = Новый ФиксированныйМассив(ПараметрыВыбораСтатьи);
	Возврат Результат;
	
КонецФункции

Процедура ОграничениеТипаПолучатель(Элемент, ХозяйственнаяОперация)
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		
	Иначе
		
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("СправочникСсылка.Склады");
		
	КонецЕсли;
	
	Элемент.ОграничениеТипа = ОграничениеТипаПолучатель;

КонецПроцедуры

Процедура ПолучательПриИзменении(СтрокаТабличнойЧасти, ИмяТЧ, Форма, Объект, КэшированныеЗначения) Экспорт
	
	ПараметрыУказанияСерий = Форма[Форма.ПараметрыРедактированияЭтапа.ИмяРеквизитаПараметрыУказанияСерий];
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипСклада", Новый Структура("Склад, ТипСклада", "Получатель", "ТипСклада"));
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", СтрокаТабличнойЧасти.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПерейтиКПланированиюГрафикаПроизводстваЗаказа(ДополнительныеПараметры) Экспорт
	
	ИмяФормы = "Обработка.ПланированиеГрафикаПроизводства2_2.Форма.ПланированиеГрафикаЗаказа";
	
	ОткрытьФорму(ИмяФормы, ДополнительныеПараметры,, ДополнительныеПараметры.Распоряжение);
	
КонецПроцедуры

Процедура ПроверитьУдалитьНеполныеЦепочкиЭтаповИзСписка(Список) Экспорт
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	
	МассивЭтапов = Новый Массив;
	СоответствиеСтрок = Новый Соответствие;
	
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		Ссылка = Список.ДанныеСтроки(ТекущаяСтрока).Ссылка;
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			МассивЭтапов.Добавить(Ссылка);
			СоответствиеСтрок.Вставить(Ссылка, ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	МассивЭтапов = УправлениеПроизводствомВызовСервера.СписокДоступныхДляУдаленияЭтаповПроизводства(МассивЭтапов);
	
	Если СоответствиеСтрок.Количество() <> МассивЭтапов.Количество() Тогда
	
		Для каждого КлючИЗначение Из СоответствиеСтрок Цикл
			Если МассивЭтапов.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				ВыделенныеСтроки.Удалить(ВыделенныеСтроки.Найти(КлючИЗначение.Значение));
			КонецЕсли;
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'Частичное удаление этапов при многоэтапном производственном процессе запрещено, воспользуйтесь рабочим местом ""Структура заказа на производство""';
								|en = 'Partial deletion of stages in a multi-stage manufacturing process is prohibited. Use the ""Production order structure"" workplace'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

// Процедура сдвигает только что отредактированную строку в коллекции 
// таким образом, чтобы строки коллекции оставались упорядоченными.
//
// Параметры:
//	КоллекцияСтрок - массив строк, данные формы коллекция, таблица значений.
//	ПолеУпорядочивания - имя поля элемента коллекции, 
//		по которому производится упорядочивание.
//	ТекущаяСтрока - отредактированная строка коллекции.
//
Процедура ВосстановитьПорядокСтрокКоллекцииПослеРедактирования(КоллекцияСтрок, ПолеУпорядочивания, ТекущаяСтрока) Экспорт
	
	Если КоллекцияСтрок.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока[ПолеУпорядочивания]) <> Тип("Дата") 
		И Не ЗначениеЗаполнено(ТекущаяСтрока[ПолеУпорядочивания]) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексИсходный = КоллекцияСтрок.Индекс(ТекущаяСтрока);
	ИндексРезультат = ИндексИсходный;
	
	// Выбираем направление, в котором нужно сдвинуть.
	Направление = 0;
	Если ИндексИсходный = 0 Тогда
		// вниз
		Направление = 1;
	КонецЕсли;
	Если ИндексИсходный = КоллекцияСтрок.Количество() - 1 Тогда
		// вверх
		Направление = -1;
	КонецЕсли;
	
	Если Направление = 0 Тогда
		Если КоллекцияСтрок[ИндексИсходный][ПолеУпорядочивания] > КоллекцияСтрок[ИндексРезультат + 1][ПолеУпорядочивания] Тогда
			// вниз
			Направление = 1;
		КонецЕсли;
		Если КоллекцияСтрок[ИндексИсходный][ПолеУпорядочивания] < КоллекцияСтрок[ИндексРезультат - 1][ПолеУпорядочивания] Тогда
			// вверх
			Направление = -1;
		КонецЕсли;
	КонецЕсли;
	
	Если Направление = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = 1 Тогда
		// Сдвигать нужно пока значение в текущей строке больше, чем в следующей.
		Пока ИндексРезультат < КоллекцияСтрок.Количество() - 1 
			И КоллекцияСтрок[ИндексИсходный][ПолеУпорядочивания] > КоллекцияСтрок[ИндексРезультат + 1][ПолеУпорядочивания] Цикл
			ИндексРезультат = ИндексРезультат + 1;
		КонецЦикла;
	Иначе
		// Сдвигать нужно пока значение в текущей строке меньше, чем в предыдущей.
		Пока ИндексРезультат > 0 
			И КоллекцияСтрок[ИндексИсходный][ПолеУпорядочивания] < КоллекцияСтрок[ИндексРезультат - 1][ПолеУпорядочивания] Цикл
			ИндексРезультат = ИндексРезультат - 1;
		КонецЦикла;
	КонецЕсли;
	
	КоллекцияСтрок.Сдвинуть(ИндексИсходный, ИндексРезультат - ИндексИсходный);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
