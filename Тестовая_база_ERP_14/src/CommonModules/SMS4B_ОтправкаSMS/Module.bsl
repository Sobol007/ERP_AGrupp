
#Область СлужебныйПрограммныйИнтерфейс

Функция SMS4B_СтатусыДоставки(Знач ИдентификаторыСообщений) Экспорт
	
	ОтправкаSMS.ПроверитьПрава();
	
	// Обновление настроек сервиса.
	РезультатПодключения = SMS4B_ОбновитьНастройкиСервиса();
	Если РезультатПодключения.Ошибка Тогда
		//РезультатПолучения.ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		//ЗаписьЖурналаРегистрации(НСтр("ru='Получение SMS';en='Receive SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		//	УровеньЖурналаРегистрации.Ошибка, , , РезультатПолучения.ОписаниеОшибки);
		//Возврат РезультатПолучения;
	КонецЕсли;
	
	// Отправка запроса
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НастройкиСервиса",	РезультатПодключения.НастройкиСервиса);
	ПараметрыЗапроса.Вставить("НастройкиОтправки",	ОтправкаSMS.НастройкиОтправкиSMS());
	КодыСостояний = ЗапросСтатусовСообщений(ИдентификаторыСообщений, ПараметрыЗапроса);
	
	СтатусыДоставки = КодыСостояний.Скопировать();
	СтатусыДоставки.Колонки.Добавить("СтатусДоставки");
	
	Для Каждого Строка Из СтатусыДоставки Цикл
		Строка.СтатусДоставки = СтатусДоставкиSMS(Строка.КодСостояния);
		Если Строка.СтатусДоставки = "Ошибка" Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Не удалось получить статус доставки SMS (id: ""%3""):
				|%1 (код ошибки: %2)'"), ОписаниеОшибкиПоКоду(Строка.КодСостояния), Строка.КодСостояния, Строка.ИдентификаторСообщения);
			ЗаписьЖурналаРегистрации(НСтр("ru='Отправка SMS';en='Sending of SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусыДоставки;
	
КонецФункции

Функция SMS4B_ПолучитьSMS() Экспорт
	
	ОтправкаSMS.ПроверитьПрава();
	
	РезультатПолучения = Новый Структура;
	РезультатПолучения.Вставить("ПолученныеСообщения",				Новый Массив);
	РезультатПолучения.Вставить("ДатаПолученияСообщений",			Дата('00010101'));
	РезультатПолучения.Вставить("МиллисекундаПолученияСообщений",	0);
	РезультатПолучения.Вставить("Ошибка",							Ложь);
	РезультатПолучения.Вставить("ОписаниеОшибки",					"");
	
	// Обновление настроек сервиса.
	РезультатПодключения = SMS4B_ОбновитьНастройкиСервиса();
	Если РезультатПодключения.Ошибка Тогда
		РезультатПолучения.ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		ЗаписьЖурналаРегистрации(НСтр("ru='Получение SMS';en='Receive SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , РезультатПолучения.ОписаниеОшибки);
		Возврат РезультатПолучения;
	КонецЕсли;
	
	// Получение сообщений.
	ДатаПолученияСообщений			= Константы.SMS4B_ДатаПолученияСообщений.Получить();
	МиллисекундаПолученияСообщений	= Константы.SMS4B_МиллисекундаПолученияСообщений.Получить();
	ПолучатьТолькоПолныеСообщения	= Константы.SMS4B_ПолучатьТолькоПолныеСообщения.Получить();
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("НастройкиСервиса",					РезультатПодключения.НастройкиСервиса);
	ПараметрыПолучения.Вставить("НастройкиПолучения",				ОтправкаSMS.НастройкиОтправкиSMS());
	ПараметрыПолучения.Вставить("ДатаПолученияСообщений",			ДатаПолученияСообщений);
	ПараметрыПолучения.Вставить("МиллисекундаПолученияСообщений",	МиллисекундаПолученияСообщений);
	ПараметрыПолучения.Вставить("ПолучатьТолькоПолныеСообщения",	ПолучатьТолькоПолныеСообщения);
	
	РезультатПодключения = ВыполнитьПолучение(ПараметрыПолучения);
	Если РезультатПодключения.Ошибка Тогда
		РезультатПолучения.ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		ЗаписьЖурналаРегистрации(НСтр("ru='Получение SMS';en='Receive SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , РезультатПолучения.ОписаниеОшибки);
		Возврат РезультатПолучения;
	КонецЕсли;
	
	РезультатПолучения.Вставить("ПолученныеСообщения", РезультатПодключения.ПолученныеСообщения);
	
	Возврат РезультатПолучения;
	
КонецФункции

Функция SMS4B_ОбновитьНастройкиСервиса(ПринудительныйСбросСессии = Ложь) Экспорт
	
	НастройкиСервиса = SMS4B_ПрочитатьНастройкиСервиса();
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Ошибка",			Ложь);
	РезультатПодключения.Вставить("ОписаниеОшибки",	"");
	
	Если ЗначениеЗаполнено(НастройкиСервиса.НомерСессии) И Не ПринудительныйСбросСессии Тогда
		РезультатПодключения = ЗапросПараметровСессии(НастройкиСервиса);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиСервиса.НомерСессии) Или РезультатПодключения.Ошибка Или ПринудительныйСбросСессии Тогда
		РезультатПодключения = ОткрытьСессиюСервиса(НастройкиСервиса);
		Если РезультатПодключения.Ошибка Тогда
			Возврат РезультатПодключения;
		КонецЕсли;
		
		РезультатПодключения = ЗапросПараметровСессии(НастройкиСервиса);
		Если РезультатПодключения.Ошибка Тогда
			Возврат РезультатПодключения;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиСервиса.ИменаОтправителя.Количество() = 0 Тогда
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = "-50";
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
	КонецЕсли;
	
	SMS4B_ЗаписатьНастройкиСервиса(НастройкиСервиса);
	
	РезультатПодключения.Вставить("НастройкиСервиса", НастройкиСервиса);
	
	Возврат РезультатПодключения;
	
КонецФункции

Функция SMS4B_ПрочитатьНастройкиСервиса() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИменаОтправителя", Новый ФиксированныйМассив(Новый Массив));
	
	ПериодЗапретаСтруктура = Новый Структура;
	ПериодЗапретаСтруктура.Вставить("ДатаНачала",			Дата('00010101'));
	ПериодЗапретаСтруктура.Вставить("ДатаОкончания",		Дата('00010101'));
	
	СтруктураНастроек.Вставить("ПериодЗапрета",				Новый ФиксированнаяСтруктура(ПериодЗапретаСтруктура));
	СтруктураНастроек.Вставить("СрокЖизниСообщений",		24);
	
	СтруктураНастроек.Вставить("МаксАктуальностьДоставки",	0);
	СтруктураНастроек.Вставить("МаксДлительностьДоставки",	0);
	
	СтруктураНастроек.Вставить("ОстатокПоСчету",			0);
	
	СтруктураНастроек.Вставить("ОсновнойСервер",			Истина);
	СтруктураНастроек.Вставить("НомерСессии",				0);
	
	СтруктураНастроек.Вставить("КорректировкаUTC",			0);
	
	НастройкиСервиса = Константы.SMS4B_НастройкиСервиса.Получить().Получить();
	Если ТипЗнч(НастройкиСервиса) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, НастройкиСервиса);
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура SMS4B_ЗаписатьНастройкиСервиса(НовыеНастройки) Экспорт
	
	СтруктураНастроек = SMS4B_ПрочитатьНастройкиСервиса();
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, НовыеНастройки);
	Константы.SMS4B_НастройкиСервиса.Установить(Новый ХранилищеЗначения(СтруктураНастроек));
	
КонецПроцедуры

Функция SMS4B_ВерсияМодуля() Экспорт
	
	Возврат "4.0.0.1";
	
КонецФункции

Функция SMS4B_ИспользоватьSMS4B() Экспорт
	
	ПровайдерSMS = Константы.ПровайдерSMS.Получить();
	Возврат ПровайдерSMS = Перечисления.ПровайдерыSMS.SMS4B;
	
КонецФункции

Функция ФорматироватьНомер(Номер) Экспорт
	
	Результат = "";
	
	ДопустимыеСимволы = "+1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Результат) > 10 Тогда
		ПервыйСимвол = Лев(Результат, 1);
		Если ПервыйСимвол = "8" Тогда
			Результат = "+7" + Сред(Результат, 2);
		ИначеЕсли ПервыйСимвол <> "+" Тогда
			Результат = "+" + Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкаОтправкиSMSВыполнена() Экспорт
	
	Возврат ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	
КонецФункции

// Методы, совместимые с БСП, подсистема "ОтправкаSMS".

Функция ОтправитьSMS(НомераПолучателей, Знач Текст, ИмяОтправителя = Неопределено, ПеревестиВТранслит = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОтправкаSMS.ПроверитьПрава();
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("ОтправленныеСообщения",		Новый Массив);
	РезультатОтправки.Вставить("Ошибка",					Ложь);
	РезультатОтправки.Вставить("ОписаниеОшибки",			"");
	
	// Обновление настроек сервиса.
	РезультатПодключения = SMS4B_ОбновитьНастройкиСервиса();
	Если РезультатПодключения.Ошибка Тогда
		РезультатОтправки.ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		Возврат РезультатОтправки;
	КонецЕсли;
	
	// Обработка получателей.
	Если ТипЗнч(НомераПолучателей) = Тип("Массив") Тогда
		НомераПолучателейТаблица = Новый ТаблицаЗначений;
		НомераПолучателейТаблица.Колонки.Добавить("НомерПолучателя", Новый ОписаниеТипов("Строка"));
		НомераПолучателейТаблица.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
		НомераПолучателейТаблица.ЗагрузитьКолонку(НомераПолучателей, "НомерПолучателя");
		НомераПолучателейТаблица.ЗаполнитьЗначения(Текст, "Текст");
		НомераПолучателей = НомераПолучателейТаблица;
	КонецЕсли;
	
	НомераПолучателей.Колонки.Добавить("ИдентификаторСообщения", Новый ОписаниеТипов("Строка"));
	НомераПолучателей.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("Булево"));
	НомераПолучателей.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	
	Текст = СокрЛП(Текст);
	Если ПеревестиВТранслит Тогда
		Текст = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Текст);
	КонецЕсли;
	
	Для Каждого ДанныеСообщения Из НомераПолучателей Цикл
		ДанныеСообщения.НомерПолучателя = ФорматироватьНомер(ДанныеСообщения.НомерПолучателя);
		ДанныеСообщения.ИдентификаторСообщения = ПолучитьИдентификаторСообщения();
		ДанныеСообщения.Текст = СокрЛП(ДанныеСообщения.Текст);
		Если ПеревестиВТранслит Тогда
			ДанныеСообщения.Текст = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ДанныеСообщения.Текст);
		КонецЕсли;
	КонецЦикла;
	
	// Отправка сообщений.
	НастройкиОтправки = ОтправкаSMS.НастройкиОтправкиSMS();
	Если ИмяОтправителя = Неопределено Тогда
		ИмяОтправителя = НастройкиОтправки.ИмяОтправителя;
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("НастройкиСервиса",				РезультатПодключения.НастройкиСервиса);
	ПараметрыОтправки.Вставить("НастройкиОтправки",				НастройкиОтправки);
	ПараметрыОтправки.Вставить("ТекстПоУмолчанию",				Текст);
	ПараметрыОтправки.Вставить("ИмяОтправителя",				ИмяОтправителя);
	ПараметрыОтправки.Вставить("ДатаОтправки",					ТекущаяДата());
	ПараметрыОтправки.Вставить("ДатаАктуальностиОтправки",		Дата('00010101'));
	ПараметрыОтправки.Вставить("РавномернаяРассылка",			Ложь);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОтправки, ДополнительныеПараметры);
	КонецЕсли;
	
	РезультатПодключения = ВыполнитьОтправку(НомераПолучателей, ПараметрыОтправки);
	Если РезультатПодключения.Ошибка Тогда
		РезультатОтправки.ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		Возврат РезультатОтправки;
	КонецЕсли;
	
	// Обработка результата.
	Для Каждого ДанныеСообщения Из НомераПолучателей Цикл
		Если ДанныеСообщения.Ошибка Тогда
			РезультатОтправки.ОписаниеОшибки = РезультатОтправки.ОписаниеОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='SMS на номер %1 не отправлено';en='No SMS sent to number%1'"), ДанныеСообщения.НомерПолучателя) + ": " + ДанныеСообщения.ОписаниеОшибки + Символы.ПС;
		Иначе
			ОтправленноеСообщение = Новый Структура("НомерПолучателя, ИдентификаторСообщения");
			ЗаполнитьЗначенияСвойств(ОтправленноеСообщение, ДанныеСообщения);
			РезультатОтправки.ОтправленныеСообщения.Добавить(ОтправленноеСообщение);
		КонецЕсли;
	КонецЦикла;
	РезультатОтправки.ОписаниеОшибки = СокрП(РезультатОтправки.ОписаниеОшибки);
	
	Если Не ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Отправка SMS';en='Sending of SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , РезультатОтправки.ОписаниеОшибки);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция СтатусДоставки(Знач ИдентификаторСообщения) Экспорт
	
	ОтправкаSMS.ПроверитьПрава();
	
	Если ПустаяСтрока(ИдентификаторСообщения) Тогда
		Возврат "НеОтправлялось";
	КонецЕсли;
	
	// Обновление настроек сервиса.
	РезультатПодключения = SMS4B_ОбновитьНастройкиСервиса();
	Если РезультатПодключения.Ошибка Тогда
		Возврат "Ошибка";
	КонецЕсли;
	
	НастройкиСервиса = РезультатПодключения.НастройкиСервиса;
	НастройкиОтправки = ОтправкаSMS.НастройкиОтправкиSMS();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НастройкиСервиса",				НастройкиСервиса);
	ПараметрыЗапроса.Вставить("НастройкиОтправки",				НастройкиОтправки);
	
	// отправка запроса
	РезультатПодключения = ЗапросСтатусаСообщения(ИдентификаторСообщения, ПараметрыЗапроса);
	КодСостояния = РезультатПодключения.КодСостояния;
	
	СтатусДоставки = СтатусДоставкиSMS(КодСостояния);
	Если СтатусДоставки = "Ошибка" Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить статус доставки SMS (id: ""%3""):
			|%1 (код ошибки: %2)'"), ОписаниеОшибкиПоКоду(КодСостояния), КодСостояния, ИдентификаторСообщения);
		ЗаписьЖурналаРегистрации(НСтр("ru='Отправка SMS';en='Sending of SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецЕсли;
	
	Возврат СтатусДоставки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыКСервисуSMS4B

Функция ВыполнитьОтправку(НомераПолучателей, ПараметрыОтправки)
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Ошибка",					Ложь);
	РезультатПодключения.Вставить("ОписаниеОшибки",			"");
	
	НастройкиСервиса = ПараметрыОтправки.НастройкиСервиса;
	НастройкиОтправки = ПараметрыОтправки.НастройкиОтправки;
	
	ВебСервис = ПодключитьВебСервис(НастройкиСервиса, НастройкиОтправки, РезультатПодключения);
	Если РезультатПодключения.Ошибка Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
	
	ИмяОтправителя = ПараметрыОтправки.ИмяОтправителя;
	ТекстПоУмолчанию = ПараметрыОтправки.ТекстПоУмолчанию;
	ПериодДоставки = "";
	
	ДатаОтправки = ?(ЗначениеЗаполнено(ПараметрыОтправки.ДатаОтправки), ПараметрыОтправки.ДатаОтправки, ТекущаяДата());
	ДатаОтправкиUTC = XMLСтрока(ДатаОтправки - НастройкиСервиса.КорректировкаUTC);
	ДатаОтправкиUTC = СтрЗаменить(ДатаОтправкиUTC, "T", " ");
	
	ДатаАктуальностиОтправки = ПараметрыОтправки.ДатаАктуальностиОтправки;
	ДатаАктуальностиОтправкиUTC = ?(ЗначениеЗаполнено(ДатаАктуальностиОтправки), XMLСтрока(ДатаАктуальностиОтправки - НастройкиСервиса.КорректировкаUTC), "");
	ДатаАктуальностиОтправкиUTC = СтрЗаменить(ДатаАктуальностиОтправкиUTC, "T", " ");
	
	ФабрикаXDTOСервиса = ВебСервис.ФабрикаXDTO;
	ГруппаСообщенийXDTO = ФабрикаXDTOСервиса.Создать(ФабрикаXDTOСервиса.Тип("SMS4B", "ArrayOfGroupSMSList"));
	
	СообщенийКОтправке = НомераПолучателей.Количество();
	РазмерПакета = 100;
	СчетчикСообщенийПакета = 0;
	
	Для Каждого Сообщение Из НомераПолучателей Цикл
		
		СчетчикСообщенийПакета = СчетчикСообщенийПакета + 1;
		
		ТипКодировки = ТипКодировкиТекста(Сообщение.Текст);
		
		СообщениеXDTO = ФабрикаXDTOСервиса.Создать(ФабрикаXDTOСервиса.Тип("SMS4B", "GroupSMSList"));
		СообщениеXDTO.Установить("B", ?(ЗначениеЗаполнено(Сообщение.Текст), ШестнадцатеричноеПредставлениеСтроки(Сообщение.Текст, ТипКодировки), ""));
		СообщениеXDTO.Установить("D", Сообщение.НомерПолучателя);
		СообщениеXDTO.Установить("E", ТипКодировки);
		СообщениеXDTO.Установить("G", Сообщение.ИдентификаторСообщения);
		ГруппаСообщенийXDTO.GroupSMSList.Добавить(СообщениеXDTO);
		
		Если (СчетчикСообщенийПакета = РазмерПакета) Или (СчетчикСообщенийПакета = СообщенийКОтправке) Тогда
			
			СчетчикСообщенийПакета = 0;
			СообщенийКОтправке = СообщенийКОтправке - РазмерПакета;
			
			Если ЗначениеЗаполнено(ТекстПоУмолчанию) Тогда
				ТипКодировкиПоУмолчанию =  ТипКодировкиТекста(ТекстПоУмолчанию);
			Иначе
				ТипКодировкиПоУмолчанию = 0;
			КонецЕсли;
			
			КодГруппы = ?(ПараметрыОтправки.РавномернаяРассылка, -2, -1);
			ТелоСообщения = ?(ЗначениеЗаполнено(ТекстПоУмолчанию),
				ШестнадцатеричноеПредставлениеСтроки(ТекстПоУмолчанию, ТипКодировкиПоУмолчанию), "");
			
			Попытка
				ОтветСервиса = ВебСервис.GroupSMS(
					НастройкиСервиса.НомерСессии,
					КодГруппы,
					ИмяОтправителя,
					ТипКодировкиПоУмолчанию,
					ТелоСообщения,
					ДатаАктуальностиОтправкиUTC,
					ДатаОтправкиUTC,
					ПериодДоставки,
					ГруппаСообщенийXDTO);
			Исключение
				ОтветСервиса = Неопределено;
			КонецПопытки;
			
			Если ОтветСервиса = Неопределено Тогда
				РезультатПодключения.Ошибка = Истина;
				КодОшибки = "-99999";
				РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
				Возврат РезультатПодключения;
			КонецЕсли;
			
			РезультатЗапроса = Число(ОтветСервиса.Result);
			
			Если РезультатЗапроса > 0 Тогда
				
				//КодГруппы = РезультатОтправки.Group;
				
				ОтправленныеСообщения = ОтветСервиса.List.CheckSMSList;
				
				Для Каждого ОтправленноеСообщение Из ОтправленныеСообщения Цикл
					НайденноеСообщение = НомераПолучателей.Найти(ОтправленноеСообщение.G, "ИдентификаторСообщения");
					Если НайденноеСообщение <> Неопределено Тогда
						КодСостоянияСообщения = ОтправленноеСообщение.R;
						Если КодСостоянияСообщения <= 0 Тогда
							НайденноеСообщение.Ошибка = Истина;
							КодОшибки = ФорматироватьКод(КодСостоянияСообщения);
							НайденноеСообщение.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
						КонецЕсли;
					Иначе
						
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				РезультатПодключения.Ошибка = Истина;
				КодОшибки = ФорматироватьКод(РезультатЗапроса);
				РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
			КонецЕсли;
			
			ГруппаСообщенийXDTO.GroupSMSList.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПодключения;
	
КонецФункции

Функция ВыполнитьПолучение(ПараметрыПолучения)
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Ошибка",					Ложь);
	РезультатПодключения.Вставить("ОписаниеОшибки",			"");
	
	НастройкиСервиса = ПараметрыПолучения.НастройкиСервиса;
	НастройкиПолучения = ПараметрыПолучения.НастройкиПолучения;
	
	ВебСервис = ПодключитьВебСервис(НастройкиСервиса, НастройкиПолучения, РезультатПодключения);
	Если РезультатПодключения.Ошибка Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
	
	ДатаПолучения = ПараметрыПолучения.ДатаПолученияСообщений;
	МиллисекундаПолучения = ПараметрыПолучения.МиллисекундаПолученияСообщений;
	Если Не ЗначениеЗаполнено(ДатаПолучения) Тогда
		ДатаПолучения = НачалоДня(ТекущаяДатаСеанса());
		МиллисекундаПолучения = 0;
	КонецЕсли;
	
	ДатаПолученияUTC = ДатаПолучения - НастройкиСервиса.КорректировкаUTC;
	ДатаПолученияСтрокой = XMLСтрока(ДатаПолученияUTC);
	ДатаПолученияСтрокой = СтрЗаменить(ДатаПолученияСтрокой, "T", " ") + "." + Строка(МиллисекундаПолучения);
	
	ПолученныеСообщения = Новый ТаблицаЗначений;
	ПолученныеСообщения.Колонки.Добавить("ИдентификаторСообщения");
	ПолученныеСообщения.Колонки.Добавить("ДатаПолучения"); 
	ПолученныеСообщения.Колонки.Добавить("МиллисекундаПолучения");
	ПолученныеСообщения.Колонки.Добавить("Отправитель");
	ПолученныеСообщения.Колонки.Добавить("Получатель");
	ПолученныеСообщения.Колонки.Добавить("ТекстСообщения");
	ПолученныеСообщения.Колонки.Добавить("ВсегоЧастей");
	ПолученныеСообщения.Колонки.Добавить("ТекущаяЧасть");
	
	МаркерЧастичноПолученного = "[…]";
	ПолучатьТолькоПолныеСообщения = ПараметрыПолучения.ПолучатьТолькоПолныеСообщения;
	
	Попытка
		ОтветСервиса = ВебСервис.LoadSMS(
			НастройкиСервиса.НомерСессии,
			ДатаПолученияСтрокой,
			?(ПолучатьТолькоПолныеСообщения, 1, 0));
	Исключение
		ОтветСервиса = Неопределено;
	КонецПопытки;
	
	Если ОтветСервиса = Неопределено Тогда
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = "-99999";
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
		Возврат РезультатПодключения;
	КонецЕсли;
	
	РезультатЗапроса = Число(ОтветСервиса.Result);
	
	Если РезультатЗапроса > 0 Тогда
		
		ПолученныеСообщенияXDTO = ОтветСервиса.List.SMSList;
		Для Каждого СообщениеXDTO Из ПолученныеСообщенияXDTO Цикл
			
			ДатаСообщенияСтрокой = СтрЗаменить(Лев(СообщениеXDTO.M, 19), " ","T");
			ДатаСообщенияUTC = XMLЗначение(Тип("Дата"), ДатаСообщенияСтрокой);
			ДатаСообщения = ДатаСообщенияUTC + НастройкиСервиса.КорректировкаUTC;
			МиллисекундаСообщения = Число(Прав(СообщениеXDTO.M, 3));
			
			Если ДатаСообщенияUTC < ДатаПолученияUTC Тогда
				Продолжить;
			ИначеЕсли ДатаСообщенияUTC = ДатаПолученияUTC И МиллисекундаСообщения <= МиллисекундаПолучения Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторСообщения = СократитьИдентификаторСообщения(СообщениеXDTO.G);
			ТекущаяЧасть = Число(СообщениеXDTO.P) + 1;
			ВсегоЧастей = Число(СообщениеXDTO.A);
			
			СтрокаСообщения = Неопределено;
			Если Не ПолучатьТолькоПолныеСообщения Тогда
				НайденныеСтроки = ПолученныеСообщения.НайтиСтроки(Новый Структура("ИдентификаторСообщения", ИдентификаторСообщения));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если НайденнаяСтрока.ТекущаяЧасть = ТекущаяЧасть - 1 Тогда
							СтрокаСообщения = НайденнаяСтрока;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаСообщения = Неопределено Тогда
				СтрокаСообщения = ПолученныеСообщения.Добавить();
				СтрокаСообщения.ИдентификаторСообщения	= ИдентификаторСообщения;
				СтрокаСообщения.Отправитель				= СообщениеXDTO.S;
				СтрокаСообщения.Получатель				= СообщениеXDTO.D;
				СтрокаСообщения.ВсегоЧастей				= ВсегоЧастей;
				ТекстСообщения = СтрокаИзШестнадцатеричногоПредставления(СообщениеXDTO.B, СообщениеXDTO.E);
			Иначе
				ТекстСообщения = СтрЗаменить(СтрокаСообщения.ТекстСообщения, МаркерЧастичноПолученного, "");
				ТекстСообщения = ТекстСообщения + СтрокаИзШестнадцатеричногоПредставления(СообщениеXDTO.B, СообщениеXDTO.E);
			КонецЕсли;
			
			СтрокаСообщения.ДатаПолучения			= ДатаСообщения;
			СтрокаСообщения.МиллисекундаПолучения	= МиллисекундаСообщения;
			СтрокаСообщения.ТекущаяЧасть			= ТекущаяЧасть;
			
			ТекстСообщения = ТекстСообщения + ?(ТекущаяЧасть = ВсегоЧастей, "", МаркерЧастичноПолученного);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(0), "@");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(2), "$");
			
			СтрокаСообщения.ТекстСообщения			= ТекстСообщения;
			
		КонецЦикла;
		
	Иначе
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = ФорматироватьКод(РезультатЗапроса);
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
	КонецЕсли;
	
	РезультатПодключения.Вставить("ПолученныеСообщения", ПолученныеСообщения);
	
	Возврат РезультатПодключения;
	
КонецФункции

Функция ЗапросСтатусаСообщения(ИдентификаторСообщения, ПараметрыЗапроса)
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Ошибка",			Ложь);
	РезультатПодключения.Вставить("ОписаниеОшибки",	"");
	
	НастройкиСервиса = ПараметрыЗапроса.НастройкиСервиса;
	НастройкиОтправки = ПараметрыЗапроса.НастройкиОтправки;
	
	ВебСервис = ПодключитьВебСервис(НастройкиСервиса, НастройкиОтправки, РезультатПодключения);
	Если РезультатПодключения.Ошибка Тогда
		КодСостояния = "-10";
		Возврат КодСостояния;
	КонецЕсли;
	
	ФабрикаXDTOСервиса = ВебСервис.ФабрикаXDTO;
	МассивСообщенийXDTO = ФабрикаXDTOСервиса.Создать(ФабрикаXDTOСервиса.Тип("SMS4B", "ArrayOfString"));
	МассивСообщенийXDTO.string.Добавить(ПолучитьИдентификаторСообщения(ИдентификаторСообщения));
	
	Попытка
		ОтветСервиса = ВебСервис.CheckSMS(НастройкиСервиса.НомерСессии, МассивСообщенийXDTO);
	Исключение
		ОтветСервиса = Неопределено;
	КонецПопытки; 
	
	Если ОтветСервиса = Неопределено Тогда
		КодСостояния = "-99999";
		Возврат КодСостояния;
	КонецЕсли;
	
	РезультатЗапроса = Число(ОтветСервиса.Result);
	
	Если РезультатЗапроса > 0 Тогда
		СписокСтатусовXDTO = ОтветСервиса.List.CheckSMSList;
		КодСостояния = Число(СписокСтатусовXDTO[0].R);
		КодСостояния = ФорматироватьКод(КодСостояния);
	Иначе
		КодСостояния = ФорматироватьКод(РезультатЗапроса);
	КонецЕсли; 
	
	МассивСообщенийXDTO.string.Очистить();
	
	Возврат КодСостояния;
	
КонецФункции

Функция ЗапросСтатусовСообщений(ИдентификаторыСообщений, ПараметрыЗапроса)
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Ошибка",			Ложь);
	РезультатПодключения.Вставить("ОписаниеОшибки",	"");
	
	НастройкиСервиса = ПараметрыЗапроса.НастройкиСервиса;
	НастройкиОтправки = ПараметрыЗапроса.НастройкиОтправки;
	
	КодыСостояний = Новый ТаблицаЗначений;
	КодыСостояний.Колонки.Добавить("ИдентификаторСообщения");
	КодыСостояний.Колонки.Добавить("КодСостояния");
	
	ВебСервис = ПодключитьВебСервис(НастройкиСервиса, НастройкиОтправки, РезультатПодключения);
	Если РезультатПодключения.Ошибка Тогда
		КодСостояния = "-10";
		КодыСостояний.ЗагрузитьКолонку(ИдентификаторыСообщений, "ИдентификаторСообщения");
		КодыСостояний.ЗаполнитьЗначения(КодСостояния, "КодСостояния");
		Возврат КодыСостояний;
	КонецЕсли;
	
	ФабрикаXDTOСервиса = ВебСервис.ФабрикаXDTO;
	МассивСообщенийXDTO = ФабрикаXDTOСервиса.Создать(ФабрикаXDTOСервиса.Тип("SMS4B", "ArrayOfString"));
	Для Каждого ИдентификаторСообщения Из ИдентификаторыСообщений Цикл
		МассивСообщенийXDTO.string.Добавить(ПолучитьИдентификаторСообщения(ИдентификаторСообщения));
	КонецЦикла;
	
	Попытка
		ОтветСервиса = ВебСервис.CheckSMS(НастройкиСервиса.НомерСессии, МассивСообщенийXDTO);
	Исключение
		ОтветСервиса = Неопределено;
	КонецПопытки; 
	
	Если ОтветСервиса = Неопределено Тогда
		КодСостояния = "-99999";
		КодыСостояний.ЗагрузитьКолонку(ИдентификаторыСообщений, "ИдентификаторСообщения");
		КодыСостояний.ЗаполнитьЗначения(КодСостояния, "КодСостояния");
		Возврат КодыСостояний;
	КонецЕсли;
	
	РезультатЗапроса = Число(ОтветСервиса.Result);
	
	Если РезультатЗапроса > 0 Тогда
		СписокСтатусовXDTO = ОтветСервиса.List.CheckSMSList;
		Для Каждого СтатусXDTO Из СписокСтатусовXDTO Цикл
			НоваяСтрока = КодыСостояний.Добавить();
			НоваяСтрока.ИдентификаторСообщения = СократитьИдентификаторСообщения(СтатусXDTO.G);
			КодСостояния = Число(СтатусXDTO.R);
			НоваяСтрока.КодСостояния = ФорматироватьКод(КодСостояния);
		КонецЦикла;
	Иначе
		КодыСостояний.ЗагрузитьКолонку(ИдентификаторыСообщений, "ИдентификаторСообщения");
		КодСостояния = ФорматироватьКод(РезультатЗапроса);
		КодыСостояний.ЗаполнитьЗначения(КодСостояния, "КодСостояния");
	КонецЕсли; 
	
	МассивСообщенийXDTO.string.Очистить();
	
	Возврат КодыСостояний;
	
КонецФункции

Функция ОткрытьСессиюСервиса(НастройкиСервиса)
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Ошибка",			Ложь);
	РезультатПодключения.Вставить("ОписаниеОшибки",	"");
	
	НастройкиОтправки = ОтправкаSMS.НастройкиОтправкиSMS();
	
	Если Не ЗначениеЗаполнено(НастройкиОтправки.Логин) Или Не ЗначениеЗаполнено(НастройкиОтправки.Пароль) Тогда
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = "-1";
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
		Возврат РезультатПодключения;
	КонецЕсли;
	
	ВебСервис = ПодключитьВебСервис(НастройкиСервиса, НастройкиОтправки, РезультатПодключения);
	Если РезультатПодключения.Ошибка Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
	
	ПользовательСервиса = ПользовательСервиса(НастройкиОтправки.Логин);
	Попытка
		ОтветСервиса = ВебСервис.StartSession(ПользовательСервиса, НастройкиОтправки.Пароль, 0); 
	Исключение
		ОтветСервиса = Неопределено;
	КонецПопытки;
	
	Если ОтветСервиса = Неопределено Тогда
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = "-99999";
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
		Возврат РезультатПодключения;
	КонецЕсли;
	
	Если ОтветСервиса > 0 Тогда
		НастройкиСервиса.НомерСессии = ОтветСервиса;
	Иначе
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = ФорматироватьКод(ОтветСервиса);
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
	КонецЕсли;
	
	Возврат РезультатПодключения;
	
КонецФункции

Функция ЗапросПараметровСессии(НастройкиСервиса)
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Ошибка",			Ложь);
	РезультатПодключения.Вставить("ОписаниеОшибки",	"");
	
	НастройкиОтправки = ОтправкаSMS.НастройкиОтправкиSMS();
	
	Если Не ЗначениеЗаполнено(НастройкиОтправки.Логин) Или Не ЗначениеЗаполнено(НастройкиОтправки.Пароль) Тогда
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = "-1";
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
		Возврат РезультатПодключения;
	КонецЕсли;
	
	ВебСервис = ПодключитьВебСервис(НастройкиСервиса, НастройкиОтправки, РезультатПодключения);
	Если РезультатПодключения.Ошибка Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
	
	Попытка
		ОтветСервиса = ВебСервис.ParamSMS(НастройкиСервиса.НомерСессии); 
	Исключение
		ОтветСервиса = Неопределено;
	КонецПопытки;
	
	Если ОтветСервиса = Неопределено Тогда
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = "-99999";
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
		Возврат РезультатПодключения;
	КонецЕсли;
	
	РезультатЗапроса = Число(ОтветСервиса.Result);
	
	Если РезультатЗапроса > 0 Тогда 
		
		ИменаОтправителяСтрокой = СокрЛП(СтрЗаменить(ОтветСервиса.Addresses, Символы.ВК, ""));
		ИменаОтправителяМассив = СтрРазделить(ИменаОтправителяСтрокой, Символы.ПС, Ложь);
		НастройкиСервиса.ИменаОтправителя			= Новый ФиксированныйМассив(ИменаОтправителяМассив);
		
		НастройкиСервиса.ОстатокПоСчету				= ОтветСервиса.Rest;
		НастройкиСервиса.МаксАктуальностьДоставки	= ОтветСервиса.Limit;
		НастройкиСервиса.МаксДлительностьДоставки	= ОтветСервиса.Duration;
		
		ВремяСервераСтрокой = Сред(ОтветСервиса.UTC, 1, 19);
		ВремяСервераСтрокой = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("T-: ", ВремяСервераСтрокой, "    ");
		ВремяСервераСтрокой = СтрЗаменить(ВремяСервераСтрокой, " ", "");
		КорректировкаUTC = Окр((ТекущаяДата() - Дата(ВремяСервераСтрокой)) / 3600) * 3600;
		
		НастройкиСервиса.КорректировкаUTC			= КорректировкаUTC;
		
	Иначе
		РезультатПодключения.Ошибка = Истина;
		КодОшибки = ФорматироватьКод(РезультатЗапроса);
		РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
	КонецЕсли;
	
	Возврат РезультатПодключения;
	
КонецФункции

Функция ПодключитьВебСервис(НастройкиСервиса, НастройкиОтправки, РезультатПодключения)
	
	ВебСервис = ПолучитьВебСервис(НастройкиСервиса, НастройкиОтправки);
	Если ВебСервис = Неопределено Тогда
		НастройкиСервиса.ОсновнойСервер = Не НастройкиСервиса.ОсновнойСервер;
		ВебСервис = ПолучитьВебСервис(НастройкиСервиса, НастройкиОтправки);
		Если ВебСервис = Неопределено Тогда
			РезультатПодключения.Ошибка = Истина;
			КодОшибки = "-10";
			РезультатПодключения.ОписаниеОшибки = ОписаниеОшибкиПоКоду(КодОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВебСервис;
	
КонецФункции

Функция ПолучитьВебСервис(НастройкиСервиса, НастройкиОтправки)
	
	ПараметрыСервиса = Новый Структура;
	ПараметрыСервиса.Вставить("URIПространстваИмен",	"SMS4B");
	ПараметрыСервиса.Вставить("ИмяСервиса",				"WSSM");
	ПараметрыСервиса.Вставить("ИмяТочкиПодключения",	"WSSMSoap12");
	ПараметрыСервиса.Вставить("ИмяПользователя",	НастройкиОтправки.Логин);
	ПараметрыСервиса.Вставить("Пароль",				НастройкиОтправки.Пароль);
	
	Если НастройкиСервиса.ОсновнойСервер Тогда
		//ОпределенияВебСервисов = Новый WSОпределения("https://sms4b.ru/ws/sms.asmx?WSDL",
		//	НастройкиОтправки.Логин, НастройкиОтправки.Пароль);
		//ВебСервис = Новый WSПрокси(ОпределенияВебСервисов, "SMS4B", "WSSM", "WSSMSoap12");
		ПараметрыСервиса.Вставить("АдресWSDL", "https://sms4b.ru/ws/sms.asmx?WSDL");
	Иначе
		//ОпределенияВебСервисов = Новый WSОпределения("https://s.sms4b.ru/ws/sms.asmx?WSDL",
		//	НастройкиОтправки.Логин, НастройкиОтправки.Пароль);
		//ВебСервис = Новый WSПрокси(ОпределенияВебСервисов, "SMS4B", "WSSM", "WSSMSoap12");
		ПараметрыСервиса.Вставить("АдресWSDL", "https://s.sms4b.ru/ws/sms.asmx?WSDL");
	КонецЕсли;
	
	Попытка
		ВебСервис = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыСервиса);
	Исключение
		ВебВсервис = Неопределено;
	КонецПопытки;
	
	Возврат ВебСервис;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция ПолучитьИдентификаторСообщения(Знач ИдентификаторСообщения = "")
	
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		ИдентификаторСообщения = Лев(Строка(Новый УникальныйИдентификатор), 20);
	КонецЕсли;
	
	Если СтрДлина(ИдентификаторСообщения) = 20 Тогда
		ИдентификаторСообщения = ИдентификаторСообщения + Сред(ИдентификаторСообщения, 16, 3) + "-" + Сред(ИдентификаторСообщения, 10, 4 ) + Лев(ИдентификаторСообщения, 8);
	КонецЕсли;
	
	Возврат ИдентификаторСообщения;
	
КонецФункции

Функция СократитьИдентификаторСообщения(Знач ИдентификаторСообщения = "")
	
	Возврат Лев(ИдентификаторСообщения, 20);
	
КонецФункции

Функция ТипКодировкиТекста(Сообщение)
	
	ДлинаСообщения = СтрДлина(Сообщение);
	
	Результат = 0;
	Для К = 1 По ДлинаСообщения Цикл
		ТекСимвол = Сред(Сообщение, К, 1);
		Если ТекСимвол = "@" Тогда
			Продолжить;
		ИначеЕсли ТекСимвол = "$" Тогда
			Продолжить;
		ИначеЕсли КодСимвола(ТекСимвол) > 122 Тогда
			Результат = 1;
			Прервать;
		ИначеЕсли КодСимвола(ТекСимвол) > 96 Тогда
			Продолжить;
		ИначеЕсли  КодСимвола(ТекСимвол) > 91 Тогда
			Результат = 1;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ШестнадцатеричноеПредставлениеСтроки(Текст, ТипКодировки)
	
	Если ТипКодировки = 1 Тогда
		ДлинаКодаСимвола = 4;
	Иначе
		ДлинаКодаСимвола = 2;
	КонецЕсли;
	
	СтрокаЗнаков = "";
	Для Сч = 1 По СтрДлина(Текст) Цикл
		КодСимвола = КодСимвола(Сред(Текст, Сч, 1));
		КодСимволаШестнадцатеричный = ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(КодСимвола);
		СтрокаЗнаков = СтрокаЗнаков + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодСимволаШестнадцатеричный, ДлинаКодаСимвола, "0");
	КонецЦикла;
	
	Возврат СтрокаЗнаков;
	
КонецФункции

Функция СтрокаИзШестнадцатеричногоПредставления(Текст, ТипКодировки)
	
	Если ТипКодировки = 0 Тогда
		КоличествоСимволов = 2;
	Иначе
		КоличествоСимволов = 4;
	КонецЕсли;
	
	Сч = 1;
	СтрокаЗнаков = "";
	Пока Сч < СтрДлина(Текст) Цикл
		Строка = Сред(Текст, Сч, КоличествоСимволов);
		СтрокаЗнаков = СтрокаЗнаков + Символ(ПреобразоватьИзШестнадцатиричнойСистемыСчисленияВДесятичноеЧисло(Строка));
		Сч = Сч + КоличествоСимволов;
	КонецЦикла;
	
	Возврат СтрокаЗнаков;
	
КонецФункции

Функция ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Знач ДесятичноеЧисло)
	
	Результат = "";
	
	Пока ДесятичноеЧисло > 0 цикл
		ОстатокОтДеления = ДесятичноеЧисло % 16;
		ДесятичноеЧисло  = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
		Результат        = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьИзШестнадцатиричнойСистемыСчисленияВДесятичноеЧисло(Знач Значение)
	
	Значение = НРег(Значение);
	ДлинаСтроки = СтрДлина(Значение);
	
	Результат = 0;
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Результат = Результат * 16 + СтрНайти("0123456789abcdef", Сред(Значение, НомерСимвола, 1)) - 1;
	КонецЦикла;
	
	Возврат Формат(Результат, "ЧГ=0");
	
КонецФункции

Функция ПользовательСервиса(Логин)
	
	ДанныеДляПодключения = Новый Массив;
	ДанныеДляПодключения.Добавить(" S");
	ДанныеДляПодключения.Добавить(SMS4B_ВерсияМодуля());
	ДанныеДляПодключения.Добавить(Метаданные.Версия);
	
	ИмяКонфигурации = СтрЗаменить(Метаданные.Имя + "(" + Метаданные.КраткаяИнформация + ")", " ", "_");
	Если СтрДлина(ИмяКонфигурации) > 425 Тогда
		ИмяКонфигурации = Лев(ИмяКонфигурации, 425);
	КонецЕсли;
	ДанныеДляПодключения.Добавить(ИмяКонфигурации);
	
	ИнформацияОСистеме	= Новый СистемнаяИнформация;
	ДанныеДляПодключения.Добавить(ИнформацияОСистеме.ВерсияПриложения);
	
	ПользовательСервиса = СтрСоединить(ДанныеДляПодключения, "_");
	ПользовательСервиса = ПользовательСервиса + " " + Логин;
	
	Возврат ПользовательСервиса;
	
КонецФункции

Функция ОписанияОшибок()
	
	ОписанияОшибок = Новый Соответствие;
	
	ОписанияОшибок.Вставить("0", НСтр("ru='Превышен предел открытых сессий.';en='The limit of open sessions has been exceeded.'"));
	
	ОписанияОшибок.Вставить("-1", НСтр("ru='Неверный логин или пароль.';en='Incorrect username or password.'"));
	ОписанияОшибок.Вставить("-2", НСтр("ru='Сессия закрыта.';en='Session is closed.'"));
	
	ОписанияОшибок.Вставить("-10", НСтр("ru='Отказ сервиса.';en='Service failure.'"));
	
	ОписанияОшибок.Вставить("-20", НСтр("ru='Сбой сеанса связи.';en='Communication session failed.'"));
	ОписанияОшибок.Вставить("-21", НСтр("ru='Сообщение не идентифицировано.';en='The message is not identified.'"));
	ОписанияОшибок.Вставить("-22", НСтр("ru='Неверный идентификатор сообщения.';en='Invalid message ID.'"));
	ОписанияОшибок.Вставить("-23", НСтр("ru='Неверное смещение GMT.';en='Invalid GMT offset.'"));
	ОписанияОшибок.Вставить("-29", НСтр("ru='Отвергнуто спам-фильтром.';en='Rejected by a spam filter.'"));
	
	ОписанияОшибок.Вставить("-30", НСтр("ru='Неверная кодировка сообщения.';en='Incorrect encoding of the message.'"));
	ОписанияОшибок.Вставить("-31", НСтр("ru='Неразрешенная зона тарификации.';en='Unresolved tariff zone.'"));
	ОписанияОшибок.Вставить("-32", НСтр("ru='Неверная дата начала или окончания доставки.';en='Invalid start or end date of delivery.'"));
	ОписанияОшибок.Вставить("-33", НСтр("ru='Превышение длительности доставки.';en='Exceeding the duration of delivery.'"));
	ОписанияОшибок.Вставить("-34", НСтр("ru='Превышение срока актуальности доставки.';en='Exceed the period of actuality of delivery.'"));
	ОписанияОшибок.Вставить("-35", НСтр("ru='Неверный период доставки сообщения.';en='Invalid message delivery period.'"));
	ОписанияОшибок.Вставить("-36", НСтр("ru='Неверный код группы.';en='Invalid group code.'"));
	
	ОписанияОшибок.Вставить("-50", НСтр("ru='Неверный отправитель.';en='Invalid sender.'"));
	ОписанияОшибок.Вставить("-51", НСтр("ru='Неразрешенный получатель.';en='Unauthorized recipient.'"));
	ОписанияОшибок.Вставить("-52", НСтр("ru='Недостаточно средств на счете.';en='Insufficient funds on the account.'"));
	ОписанияОшибок.Вставить("-53", НСтр("ru='Незарегистрированный отправитель.';en='Unregistered sender.'"));
	ОписанияОшибок.Вставить("-54", НСтр("ru='Таймаут изменения счета.';en='Account change timeout.'"));
	ОписанияОшибок.Вставить("-55", НСтр("ru='Таймаут изменения счета.';en='Account change timeout.'"));
	ОписанияОшибок.Вставить("-56", НСтр("ru='Таймаут изменения счета.';en='Account change timeout.'"));
	ОписанияОшибок.Вставить("-57", НСтр("ru='Таймаут изменения счета.';en='Account change timeout.'"));
	ОписанияОшибок.Вставить("-58", НСтр("ru='Таймаут изменения счета.';en='Account change timeout.'"));
	ОписанияОшибок.Вставить("-59", НСтр("ru='Таймаут изменения счета.';en='Account change timeout.'"));
	
	ОписанияОшибок.Вставить("-65", НСтр("ru='Необходимы гарантии отправителя, обратитесь в техподдержку.';en='Sender guarantees are required, contact technical support.'"));
	ОписанияОшибок.Вставить("-66", НСтр("ru='Не задан отправитель.';en='The sender is not specified.'"));
	ОписанияОшибок.Вставить("-67", НСтр("ru='Превышение сроков отправки.';en='Exceeding the time limit for sending.'"));
	ОписанияОшибок.Вставить("-68", НСтр("ru='Аккаунт заблокирован.';en='Account is blocked.'"));
	
	ОписанияОшибок.Вставить("-99999", НСтр("ru='Не удалось соединиться с сервером.';en='Could not connect to the server.'"));
	
	Возврат ОписанияОшибок;
	
КонецФункции

Функция ОписаниеОшибкиПоКоду(КодОшибки)
	
	ОписанияОшибок = ОписанияОшибок();
	ТекстСообщения = ОписанияОшибок[КодОшибки];
	Если ТекстСообщения = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Код ошибки: ""%1"".';en='Error code: ""%1"".'"), КодОшибки);
	КонецЕсли;
	Возврат ТекстСообщения;
	
КонецФункции

// Методы, совместимые с БСП, подсистема "ОтправкаSMS".

Функция СтатусДоставкиSMS(Знач КодСостояния)
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("-21", "НеОтправлялось");
	СоответствиеСтатусов.Вставить("-22", "НеОтправлялось");
	
	Если ПустаяСтрока(КодСостояния) Или СтрНачинаетсяС(КодСостояния, "-") 
		Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодСостояния) Тогда
			Результат = СоответствиеСтатусов[НРег(КодСостояния)];
			Возврат ?(Результат = Неопределено, "Ошибка", Результат);
	КонецЕсли;
	
	КодСостояния = Число(КодСостояния);
	
	ВсегоФрагментов = КодСостояния % 256;
	ОтправленоФрагментов = Цел(КодСостояния / 256) % 256;
	ОкончательныйСтатус = КодСостояния >= 256*256;
	
	Если ОкончательныйСтатус Тогда
		Если ВсегоФрагментов = 0 Или ВсегоФрагментов > ОтправленоФрагментов Тогда
			Результат = "НеДоставлено";
		Иначе
			Результат = "Доставлено";
		КонецЕсли;
	Иначе
		Если ВсегоФрагментов = 0 Или ВсегоФрагментов > ОтправленоФрагментов Тогда
			Результат = "Отправляется";
		Иначе
			Результат = "Отправлено";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматироватьКод(Знач Код)
	
	Код = Строка(Код);
	
	Результат = "";
	
	ДопустимыеСимволы = "-1234567890";
	Для Позиция = 1 По СтрДлина(Код) Цикл
		Символ = Сред(Код,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#КонецОбласти
