////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-сеть".
// ОбщийМодуль.БизнесСеть.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбменДанными

// Выполнение команды сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ) Экспорт
	
	Если Не ПравоВыполненияОбменаДокументами(Неопределено, Истина) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Определение имени сервиса.
	ИмяСервиса = "БизнесСеть";
	Если Не ПустаяСтрока(ПараметрыКоманды.Сервис) Тогда
		ИмяСервиса = ПараметрыКоманды.Сервис;
	КонецЕсли;
	
	// Установка параметров соединения.
	ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения(ИмяСервиса);
	ПараметрыКоманды.Вставить("ИдентификаторПрограммы", ПараметрыСоединения.ИдентификаторПрограммы);
	
	// Установка времени ожидания ответа.
	Если ПараметрыКоманды.Свойство("Таймаут") И ПараметрыКоманды.Таймаут <> 0 Тогда
		Таймаут = ПараметрыКоманды.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
		
	// Инициализация соединения с сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru = 'Отсутствует соединение с сервисом 1С:Бизнес-сеть';
								|en = 'Not connected to 1C:Business Network service'")
			+ Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.';
								|en = 'See details in log.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	
	// Получение тикета сервиса.
	Если ПараметрыСоединения.Аутентификация Тогда
		КлючТикета = ПолучитьКлючТикета(Соединение, ПараметрыСоединения, ПараметрыКоманды, Отказ);
		Если Отказ ИЛИ Не ЗначениеЗаполнено(КлючТикета) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", "Bearer " + КлючТикета);
	КонецЕсли;
	
	// Установка заголовков.
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка данных.
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение запроса HTTP к сервису.
	Попытка
		
		Если ПараметрыКоманды.Метод = "DELETE" Тогда
			Запрос.Заголовки.Вставить("Content-Length", СтрДлина(Запрос.ПолучитьТелоКакСтроку()));
		КонецЕсли;
		
		Ответ = Соединение.ВызватьHTTPМетод(ПараметрыКоманды.Метод, Запрос);
		
		КодСостояния = Ответ.КодСостояния;
		Данные = Ответ.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(Данные) Тогда
			Данные = ЗначениеИзСтрокиJSON(Данные);
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.';
							|en = 'An error occurred while executing a query to the service.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПараметрыКоманды.Адрес + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
			ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
		
	КонецПопытки;
	
	// Обработка результата запроса.
	Результат = ОбработатьОтветСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ);
	
	Возврат Результат;
	
КонецФункции

// Адрес соединения URL.
//
// Параметры:
//  Сервер		 - Строка - имя сервера.
//  Порт		 - Число  - порт сервера.
//  Адрес		 - Строка - адрес сервера.
//  Защищенное	 - Булево - признак защищенного соединения.
// 
// Возвращаемое значение:
//  Строка - строка соединения, например "https://1c.ru:80/trade".
//
Функция АдресСоединенияURL(Сервер, Порт, Адрес, Защищенное) Экспорт
	
	Результат = ?(Защищенное, "https://", "http://") + Сервер + ":" + Формат(Порт, "ЧГ=")
		+ ?(Лев(Адрес, 1) = "/", "", "/") + Адрес;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОперацииСервиса

// Регистрация организаций в сервисе.
//
// Параметры:
//  СписокОрганизаций			 - Массив - ссылки на организации регистрации.
//  Отказ						 - Булево - ошибка выполнения.
//  ТребуетсяОбновитьИнтерфейс	 - Булево - требуется обновление интерфейса.
//
Процедура ЗарегистрироватьОрганизации(СписокОрганизаций, Отказ, ТребуетсяОбновитьИнтерфейс = Неопределено) Экспорт
	
	Если Не ПравоНастройкиОбменаДокументами() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка подключения программы.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПользователиБизнесСеть.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ПользователиБизнесСеть КАК ПользователиБизнесСеть";
	ПользователиЗарегистрированы = Не Запрос.Выполнить().Пустой();
	
	Если Не ПользователиЗарегистрированы ИЛИ Не ОрганизацияЗарегистрирована() Тогда
		// Очистка сохраненных данных.
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("ИдентификаторПрограммы", Неопределено);
		ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления, Истина);
		УдалитьТикеты();
		ПользователиЗарегистрированы = Ложь;
	КонецЕсли;
	
	// Проверка регистрации Абонента сервиса 1С:Бизнес-сеть.
	ПараметрыКоманды = ПараметрыКомандыПроверкаРегистрацииАбонента();
	ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийАбонент = Неопределено;
	
	// Если абонент уже существует, то новый абонент не регистрируется.
	Если ДанныеСервиса = Неопределено
		ИЛИ ДанныеСервиса = Ложь
		ИЛИ (ПользователиЗарегистрированы = Ложь И ДанныеСервиса = Истина) Тогда
		
		// Регистрация абонента и получение его идентификатора.
		ПараметрыМетода = ПараметрыКомандыРегистрацияАбонента(ПараметрыКоманды, Отказ);
		ТекущийАбонент = ВыполнитьКомандуСервиса(ПараметрыМетода, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("АдминистраторАбонента", ПараметрыКоманды.АдминистраторАбонента);
		ПараметрыОбновления.Вставить("ИдентификаторПрограммы", ПараметрыКоманды.ИдентификаторПрограммы);
		ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления);
	Иначе
		// Получение списка подключенных абонентов, по-умолчанию берем первого абонента из списка.
		ПараметрыКоманды = ПараметрыКомандыПолучитьСписокАбонентов();
		ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ДанныеСервиса) = Тип("Массив") Тогда
			Если ДанныеСервиса.Количество() = 0 Тогда
				Отказ = Истина;
				ВызватьИсключение НСтр("ru = 'Абонент сервиса 1С:Бизнес-сеть не найден.';
										|en = 'Subscriber of 1C:Business Network service is not found.'");
			Иначе
				ТекущийАбонент = ДанныеСервиса[0].id;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийАбонент = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствуют данные об администраторе абонента.';
								|en = 'Data on subscriber administrator is missing.'") ;
	КонецЕсли;
	
	// Подготовка данных для регистрации.
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Ссылка");
	ТаблицаОрганизаций.Колонки.Добавить("ИНН");
	ТаблицаОрганизаций.Колонки.Добавить("КПП");
	Для каждого ЗначениеМассива Из СписокОрганизаций Цикл
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.Ссылка = ЗначениеМассива;
	КонецЦикла;
	
	ЗаполнитьРеквизитыОрганизаций(ТаблицаОрганизаций);
	
	// Проверка организаций для регистрации.
	Для каждого СтрокаОрганизаций Из ТаблицаОрганизаций Цикл
		
		ПараметрыКоманды = ПараметрыКомандыПроверкаОрганизации(СтрокаОрганизаций, Отказ);
		ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		ОрганизацияЗарегистрированаВСервисе = Ложь;
		
		// Если организация уже зарегистрирована, проверим доступ сервису запросом списка входящих документов.
		Если ТипЗнч(ДанныеСервиса) = Тип("Массив") И ДанныеСервиса[0] = Истина Тогда
			
			ОрганизацияЗарегистрированаВСервисе = Истина;
			ПараметрыМетода = Новый Структура;
			ПараметрыМетода.Вставить("Организация", СтрокаОрганизаций.Ссылка);
			ПараметрыКоманды = ПараметрыКомандыПроверкиПравОрганизации(ПараметрыМетода, Отказ);
			ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
				
		КонецЕсли;
		
		Если Отказ Тогда
			// Очистка идентификаторов.
			УдалитьТикеты();
			Возврат;
		КонецЕсли;
		
		Если Не ОрганизацияЗарегистрированаВСервисе Тогда
			// Регистрация организации.
			ПараметрыМетода = Новый Структура;
			ПараметрыМетода.Вставить("Организация", СтрокаОрганизаций.Ссылка);
			ПараметрыМетода.Вставить("Абонент",     ТекущийАбонент);
			ПараметрыКоманды = ПараметрыКомандыРегистрацияОрганизации(ПараметрыМетода, Отказ);
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		// Успешная регистрация организации. Запись статуса в информационную базу.
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("СписокОрганизаций",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаОрганизаций.Ссылка));
		ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление пользователей в сервисе и информационной базе.
	ОбновитьПользователейВСервисе(ТекущийАбонент, Ложь, Отказ);
	
	// Проверка и установка функциональной опции.
	КонстантаМенеджер = Константы.ИспользоватьОбменБизнесСеть;
	Если Не КонстантаМенеджер.Получить() Тогда
		КонстантаМенеджер.Установить(Истина);
		ТребуетсяОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Статус регистрации организации в информационной базе.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
//                Если ссылка не указана, то проверятся, есть ли регистрация любой организации
//                в информационной базе.
//
// Возвращаемое значение:
//   Булево - признак регистрации организации.
//
Функция ОрганизацияЗарегистрирована(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииБизнесСеть.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|ГДЕ
		|	ОрганизацииБизнесСеть.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииБизнесСеть.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область ПараметрыКоманд

// Параметры команды получения реквизитов участника.
//
// Параметры:
//  ПараметрыМетода - Структура - состав:
//   * Ссылка         - Ссылка - ссылка на организацию или контрагента.
//   * ЭтоОрганизация - Булево - признак получения данных организации.
//   * ЭтоКонтрагент  - Булево - признак получения данных контрагента.
//   * ИНН            - Строка - ИНН участника.
//   * КПП            - Строка - КПП участника.
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыПолучитьРеквизитыУчастника(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	Если ПараметрыМетода.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыМетода.Ссылка) Тогда
		Если ТипЗнч(ПараметрыМетода.Ссылка) = Метаданные.ОпределяемыеТипы.Организация.Тип.Типы()[0] Тогда
			ПараметрыМетода.ЭтоОрганизация = Истина;
			ЗаполнитьРеквизитыОрганизаций(ПараметрыМетода);
			ПараметрыКоманды.Наименование = НСтр("ru = 'Получение профиля организации';
												|en = 'Receiving company profile'");
		ИначеЕсли ТипЗнч(ПараметрыМетода.Ссылка) = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.Типы()[0] Тогда
			ПараметрыМетода.ЭтоКонтрагент = Истина;
			ЗаполнитьРеквизитыКонтрагентов(ПараметрыМетода);
			ПараметрыКоманды.Наименование = НСтр("ru = 'Получение профиля контрагента';
												|en = 'Receiving counterparty profile'");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыМетода.ЭтоОрганизация = Ложь И ПараметрыМетода.ЭтоКонтрагент = Ложь Тогда
		// Если не передан параметр, то считаем что это контрагент.
		ПараметрыМетода.ЭтоКонтрагент = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыМетода.ИНН) Тогда
		Если ПараметрыМетода.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыМетода.Ссылка) Тогда
			ТестСообщения = НСтр("ru = 'Не заполнено свойство ""ИНН"" для ""%1"".';
								|en = 'The ""TIN"" property is not filled in for ""%1"".'");
			ТестСообщения = СтрШаблон(ТестСообщения, ПараметрыМетода.Ссылка);
		Иначе
			ТестСообщения = НСтр("ru = 'Не заполнено свойство ""ИНН"".';
								|en = 'The ""TIN"" property is not filled in.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТестСообщения,,,, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	Идентификаторы = ИдентификаторыУчастника(ПараметрыМетода.ИНН, ПараметрыМетода.КПП,
		ПараметрыМетода.Ссылка, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка чтения данных в 1С:Бизнес-сеть:';
				|en = 'An error occurred when reading data in 1C:Business Network:'") + " " + ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение реквизитов участника';
										|en = 'Receiving participant attributes'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/core/v1/organizations/%1/%2", Идентификаторы.ИНН, Идентификаторы.КПП);
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(404);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Наименование",     "title");
	Реквизиты.Вставить("НаименованиеЕГРН", "titleFromFns");
	Реквизиты.Вставить("ИНН",              "inn");
	Реквизиты.Вставить("КПП",              "kpp");
	Реквизиты.Вставить("ДатаРегистрации",  "registrationDate");
	Реквизиты.Вставить("Адрес",            "address");
	Реквизиты.Вставить("Описание",         "description");
	Реквизиты.Вставить("ЭлектроннаяПочта", "email");
	Реквизиты.Вставить("Факс",             "fax");
	Реквизиты.Вставить("ОГРН",             "ogrn");
	Реквизиты.Вставить("Телефон",          "phone");
	Реквизиты.Вставить("Сайт",             "site");
	ПараметрыКоманды.Вставить("ОбработкаРезультата", Реквизиты);
		
	Возврат ПараметрыКоманды;

КонецФункции

// Параметры команды отправить документ.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//   * Получатель     - Ссылка - ссылка на контрагента получателя документа.
//   * Отправитель    - Ссылка - ссылка на организацию отправителя документа.
//   * АдресХранилища - Строка - адрес временного хранилища контейнера электронного документа.
//   * АдресХранилищаПредставления - Строка - адрес временного хранилища файла с представлением документа PDF.
//   * ВидЭД          - Строка - вид электронного документа см. ВидыДокументовСервиса.
//   * Заголовок      - Строка - заголовок электронного документа, например "Товарная накладная 134 от 01.01.2000".
//   * Ссылка         - Ссылка - ссылка на учетный документ.
//   * СопроводительнаяИнформация - Строка - произвольная текстовая информация для получателя.
//   * Сумма          - Число - сумма документа
//   * КонтактноеЛицо    - Строка - контактное лицо отправителя.
//   * Телефон           - Строка - номер телефона отправителя.
//   * ЭлектроннаяПочта  - Строка - адрес электронной почты отправителя.
//   * УведомлятьПоПочте - Булево - признак необходимости уведомления отправителя об изменении статуса
//                                  обработки документа получателем.
//   * ИдентификаторыПредложений - Массив - идентификаторы торговых предложения сервиса 1С:Торговая площадка.
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыОтправитьДокумент(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды     = ОписаниеПараметровКомандыСервиса();
	ПараметрыПолучатель  = Неопределено;
	ПараметрыОтправитель = Неопределено;
	
	Если ТипЗнч(ПараметрыМетода.Получатель) = Тип("Структура") Тогда
		ПараметрыПолучатель = ПараметрыМетода.Получатель;
	Иначе
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Получатель, ПараметрыПолучатель);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Отправитель, ПараметрыОтправитель);
	
	ТекстОшибки = "";
	ИдентификаторыОтправителя = ИдентификаторыУчастника(ПараметрыОтправитель.ИНН, ПараметрыОтправитель.КПП,
		ПараметрыМетода.Отправитель, Отказ, ТекстОшибки);
	ИдентификаторыПолучателя = ИдентификаторыУчастника(ПараметрыПолучатель.ИНН, ПараметрыПолучатель.КПП,
		ПараметрыМетода.Получатель, Отказ, ТекстОшибки);

	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка отправки документов через 1С:Бизнес-сеть:';
				|en = 'Error sending documents via 1C:Business Network:'") + " "
			+ ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОрганизации = Новый Структура;
	СтруктураПолучателя = Новый Структура("inn, kpp", ИдентификаторыПолучателя.ИНН, ИдентификаторыПолучателя.КПП);
	СтруктураОтправителя = Новый Структура("inn, kpp", ИдентификаторыОтправителя.ИНН,	ИдентификаторыОтправителя.КПП);
		
	СтрокаДвоичныхДанных = Base64Строка(ПолучитьИзВременногоХранилища(ПараметрыМетода.АдресХранилища));
	ДанныеОрганизации.Вставить("destinationOrganization", СтруктураПолучателя);
	ДанныеОрганизации.Вставить("sourceOrganization", СтруктураОтправителя);
	ДанныеОрганизации.Вставить("documentDataType", "v8." + XMLСтрока(ПараметрыМетода.ВидЭД)); // Тип документа.
	ДанныеОрганизации.Вставить("documentData",  СтрокаДвоичныхДанных);
	ДанныеОрганизации.Вставить("documentTitle", ПараметрыМетода.Заголовок);
	ДанныеОрганизации.Вставить("documentGuid",  Строка(ПараметрыМетода.Ссылка.УникальныйИдентификатор()));
	ДанныеОрганизации.Вставить("info",          ПараметрыМетода.СопроводительнаяИнформация);
	ДанныеОрганизации.Вставить("moneyAmount",   ПараметрыМетода.Сумма * 100); // Сумма документа в копейках.
	ДанныеОрганизации.Вставить("metaData",      ПараметрыМетода.Ссылка.Метаданные().Имя); // Доп. информация.
	
	// Добавление представление документа PDF.
	Если ПараметрыМетода.Свойство("АдресХранилищаПредставления") 
		И ЗначениеЗаполнено(ПараметрыМетода.АдресХранилищаПредставления) Тогда
		ДвоичныеДанные = Base64Строка(ПолучитьИзВременногоХранилища(ПараметрыМетода.АдресХранилищаПредставления));
		Если ДвоичныеДанные <> Неопределено Тогда
			ДанныеОрганизации.Вставить("documentPresentationData", ДвоичныеДанные);
			ДанныеОрганизации.Вставить("documentPresentationDataType", "pdf");
		КонецЕсли;
	КонецЕсли;
	
	ПерсональныеДанные = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыМетода.КонтактноеЛицо) Тогда
		ПерсональныеДанные.Вставить("name", ПараметрыМетода.КонтактноеЛицо);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыМетода.Телефон) Тогда
		ПерсональныеДанные.Вставить("phone", ПараметрыМетода.Телефон);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыМетода.ЭлектроннаяПочта) Тогда
		ПерсональныеДанные.Вставить("email", ПараметрыМетода.ЭлектроннаяПочта);
	КонецЕсли;
	Если ПараметрыМетода.Свойство("УведомлятьПоПочте") Тогда
		ПерсональныеДанные.Вставить("notifyByEmail", ПараметрыМетода.УведомлятьПоПочте);
	КонецЕсли;
	ДанныеОрганизации.Вставить("person", ПерсональныеДанные);
	
	Если ПараметрыМетода.Свойство("ИдентификаторыПредложений") Тогда
		ДанныеОрганизации.Вставить("contextName", "CAMPAIGN"); // Служебное наименование типа.
		ДанныеОрганизации.Вставить("contextIds", ПараметрыМетода.ИдентификаторыПредложений);
	КонецЕсли;
	
	Данные = ЗначениеВJSON(ДанныеОрганизации);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Отправка документа';
										|en = 'Send document'");
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Адрес = "api/edi/v1/documents";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404,
		СтрШаблон(НСтр("ru = 'Ошибка отправки документа %1.';
						|en = 'An error occurred when sending the %1 document.'"), ПараметрыМетода.Заголовок));
		
	Возврат ПараметрыКоманды;

КонецФункции

#КонецОбласти

#Область ОписаниеПараметров

// Описание контактной информации пользователя.
//
Функция ОписаниеКонтактнойИнформацииПользователя() Экспорт
	
	СтруктураКонтактов = Новый Структура;
	СтруктураКонтактов.Вставить("ФИО", "");
	СтруктураКонтактов.Вставить("ЭлектроннаяПочта", "");
	СтруктураКонтактов.Вставить("Телефон", "");
	
	Возврат СтруктураКонтактов;
	
КонецФункции

// Описание параметров команды сервиса.
//
// Возвращаемое значение:
//  Структура - содержит стандартный набор параметров для выполнения команд сервиса, ключи:
//              Сервис                        - Строка - Имя сервиса, например, "Рубрикатор"
//                                                       (по умолчанию Бизнес-сеть).
//              Наименование                  - Строка - Полное наименование метода.
//              Адрес                         - Строка - Адрес URI метода.
//              Метод                         - Строка - Метод HTTP соединения, например POST.
//              Права                         - Строка - Необходимые права команды bn_user, bn_its.
//              Данные                        - ДвоичныеДанные, Строка - передаваемые данные.
//              Ошибки                        - Соответствие - Соответствие ошибок, например "404", "Не найдено".
//              РазрешенныеСостояния          - Массив - Коды состояний ответа сервиса, отличные от 200, при
//                                                       получении которых обработка результата будет продолжена.
//                                                       Коды состояний не должны быть указаны в ключе Ошибки.
//              БлокироватьСообщенияОбОшибках - Булево - Не выводить сообщения об ошибках.
//              ОбработкаРезультата           - Произвольный - Описание конвертации данных результата.
//
Функция ОписаниеПараметровКомандыСервиса() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Сервис",       "");
	ПараметрыКоманды.Вставить("Наименование", "");
	ПараметрыКоманды.Вставить("Адрес",        "");
	ПараметрыКоманды.Вставить("Метод",        "");
	ПараметрыКоманды.Вставить("Права",        "");
	ПараметрыКоманды.Вставить("Данные",       Неопределено);
	ПараметрыКоманды.Вставить("РазрешенныеСостояния", Новый Массив);
	ПараметрыКоманды.Вставить("Ошибки",               Новый Соответствие);
	ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках", Неопределено);
	ПараметрыКоманды.Вставить("ОбработкаРезультата",           Неопределено);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значения в формате JSON.
//
Функция ЗначениеВJSON(Данные, ПараметрыЗаписи = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Корректировка идентификаторов ИНН и КПП участника для сервиса, "0" если не заполнено.
//
// Параметры:
//   ИНН - Строка - ИНН участника.
//   КПП - Строка - КПП участника.
//   ПредставлениеУчастника - Строка - наименование участника.
//   Отказ - Булево - признак ошибки данных.
//   ТекстОшибки - Строка - текст возвращаемой ошибки.
//
// Возвращаемое значение:
//   Структура - результат корректировки:
//     * ИНН - Строка - ИНН участника.
//     * КПП - Строка - КПП участника.
//
Функция ИдентификаторыУчастника(Знач ИНН, Знач КПП, Знач Участник = Неопределено, Отказ = Неопределено,
	ТекстОшибки = "") Экспорт

	Идентификаторы = Новый Структура("ИНН, КПП");
	
	Идентификаторы.ИНН = СокрЛП(ИНН);
	Если ПустаяСтрока(Идентификаторы.ИНН) Тогда
		Идентификаторы.ИНН = "0";
	КонецЕсли;
	
	Идентификаторы.КПП = СокрЛП(КПП);
	Если ПустаяСтрока(Идентификаторы.КПП) Тогда
		Идентификаторы.КПП = "0";
	КонецЕсли;
	
	Если (СтрДлина(Идентификаторы.КПП) <> 9 И СтрДлина(Идентификаторы.ИНН) <> 12)
		ИЛИ (СтрДлина(Идентификаторы.КПП) <> 1 И СтрДлина(Идентификаторы.ИНН) <> 10) Тогда
		
		Если ЗначениеЗаполнено(Участник) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Некорректное значение ИНН ""%1"" или КПП ""%2"" для ""%3""';
										|en = 'Incorrect value of TIN ""%1"" or CRTR ""%2"" for ""%3""'"), 
				ИНН, КПП, Участник);
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Некорректное значение ИНН ""%1"" или КПП ""%2""';
										|en = 'Incorrect value of TIN ""%1"" or CRTR ""%2""'"), 
				ИНН, КПП);
		КонецЕсли;
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Идентификаторы;

КонецФункции

#КонецОбласти

#Область Прочее

// Возврат списка доступных для обмена видов документов со строковым представлением.
//
// Возвращаемое значение:
//   СписокЗначений - список с видами электронных документов.
//
Функция ВидыДокументовСервиса() Экспорт
	
	СписокВидовЭД = Новый СписокЗначений;
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель,    НСтр("ru = 'Акт выполненных работ';
																		|en = 'Acceptance note'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав, НСтр("ru = 'Акт передачи прав';
																		|en = 'Rights transfer certificate'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ,      НСтр("ru = 'Заказ покупателя';
																		|en = 'Sales order'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ЗаказТовара,       НСтр("ru = 'Заказ поставщику';
																		|en = 'Purchase order'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель,
		НСтр("ru = 'Корректировка стоимости';
			|en = 'Cost adjustment'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец,    НСтр("ru = 'Товарная накладная';
																		|en = 'Invoice'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара,
		НСтр("ru = 'Отчет о продажах комиссионного товара';
			|en = 'Account sales'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара,
		НСтр("ru = 'Отчет о списании комиссионного товара';
			|en = 'Report on consigned goods write-off'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ПрайсЛист,         НСтр("ru = 'Прайс-лист';
																		|en = 'Price list'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.СчетНаОплату,      НСтр("ru = 'Счет на оплату';
																		|en = 'Proforma invoice'"));
		
	Возврат СписокВидовЭД;
	
КонецФункции

// Возвращает признак установки функциональной опции 1С:Бизнес-сеть.
//
Функция ИспользоватьОбменБизнесСеть() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть");
	
КонецФункции

// Изменение использования регламентного задания.
//
// Параметры:
//  ИмяЗадания			- Строка - наименование регламентного задания.
//  ИмяПараметра		- Строка - наименование параметра, например "Использование".
//  ЗначениеПараметра	- Произвольный - признак использования регламентного задания.
//
Процедура ИзменитьРегламентноеЗадание(ИмяЗадания, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ПараметрыПоиска = Новый Структура("Метаданные", ИмяЗадания);
	МассивРегламентныхЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	
	Если МассивРегламентныхЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегламентноеЗадание = МассивРегламентныхЗаданий[0];
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание.УникальныйИдентификатор, ПараметрыЗадания);

КонецПроцедуры

// Заполнение реквизитов контрагентов.
//
// Параметры:
//   Данные - Структура, ТаблицаЗначений:
//     * Ссылка - СправочникСсылка - ссылка контрагента (обязательный).
//     * Наименование - Строка - полное наименование контрагента.
//     * ИНН - Строка - ИНН.
//     * КПП - Строка - КПП.
//
Процедура ЗаполнитьРеквизитыКонтрагентов(Данные) Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ИЗ
	|	&Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&СписокСсылок)";
	
	ИмяСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	РеквизитНаименование = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагента");
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Контрагенты", "Справочник." + ИмяСправочникаКонтрагенты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.Наименование", "Контрагенты." + РеквизитНаименование);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.ИНН", "Контрагенты." + РеквизитИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.КПП", "Контрагенты." + РеквизитКПП);
	Запрос.Текст = ТекстЗапроса;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СписокСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные.Ссылка);
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		СписокСсылок = Данные.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Данные.Вставить("Наименование", Выборка.Наименование);
			Данные.Вставить("ИНН", Выборка.ИНН);
			Данные.Вставить("КПП", Выборка.КПП);
			Прервать;
		ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
			ЗаполнитьЗначенияСвойств(Данные.Найти(Выборка.Ссылка, "Ссылка"), Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение реквизитов организаций.
//
// Параметры:
//   Данные - Структура, ТаблицаЗначений:
//     * Ссылка - СправочникСсылка - ссылка организации (обязательный).
//     * Наименование - Строка - полное наименование организации.
//     * ИНН - Строка - ИНН.
//     * КПП - Строка - КПП.
//
Процедура ЗаполнитьРеквизитыОрганизаций(Данные) Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП
	|ИЗ
	|	&Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокСсылок)";
	
	ИмяСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	РеквизитНаименование = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организации", "Справочник." + ИмяСправочникаОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организации.Наименование", "Организации." + РеквизитНаименование);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организации.ИНН",          "Организации." + РеквизитИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организации.КПП",          "Организации." + РеквизитКПП);
	Запрос.Текст = ТекстЗапроса;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СписокСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные.Ссылка);
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		СписокСсылок = Данные.ВыгрузитьКолонку("Ссылка");
		Если Данные.Колонки.Найти("Наименование") = Неопределено Тогда
			Данные.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		Если Данные.Колонки.Найти("ИНН") = Неопределено Тогда
			Данные.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		Если Данные.Колонки.Найти("КПП") = Неопределено Тогда
			Данные.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Данные.Вставить("Наименование", Выборка.Наименование);
			Данные.Вставить("ИНН", Выборка.ИНН);
			Данные.Вставить("КПП", Выборка.КПП);
			Прервать;
		ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
			ЗаполнитьЗначенияСвойств(Данные.Найти(Выборка.Ссылка, "Ссылка"), Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получение организаций, зарегистрированных в сервисе.
//
// Возвращаемое значение:
//   Массив - зарегистрированные организации в сервисе.
//
Функция ЗарегистрированныеОрганизации() Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник_Организации КАК Организации
	|		ПО ОрганизацииБизнесСеть.Организация = Организации.Ссылка
	|ГДЕ
	|	НЕ Организации.Ссылка ЕСТЬ NULL
	|	И НЕ ОрганизацииБизнесСеть.Организация.ПометкаУдаления";

	ИмяСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник_Организации", "Справочник." + ИмяСправочникаОрганизации);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Условное оформление гиперссылки таблицы "Показать еще".
//
// Параметры:
//  УсловноеОформление	- УсловноеОформлениеКомпоновкиДанных - условное оформление формы.
//  ТаблицаФормы		- ТаблицаФормы - элемент формы таблицы списка.
//  ПолеФормы 			- ПолеФормы - элемент формы колонки "Показать еще".
//
Процедура УсловноеОформлениеГиперссылкиПоказатьЕще(УсловноеОформление, ТаблицаФормы, ПолеФормы) Экспорт
	
	ИмяКолонкиПоказатьЕще  = ПолеФормы.Имя;
	ПутьКДаннымПоказатьЕще = ПолеФормы.ПутьКДанным;
	
	// Скрытие колонок с данными для гиперссылки "Показать еще".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказатьЕще);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ДобавитьПоляТаблицыПоКоллекции(ТаблицаФормы.ПодчиненныеЭлементы,
		ЭлементУсловногоОформления.Поля.Элементы, ПолеФормы);
		
	// Скрытие гиперссылки "Показать еще".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказатьЕще);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиПоказатьЕще);
	
	// Отображение гиперссылки "Показать еще".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Показать еще';
																					|en = 'Show more'"));
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказатьЕще);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиПоказатьЕще);
	
КонецПроцедуры

#КонецОбласти

#Область Права

// Проверяет возможность настройки взаимодействия в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Возвращаемое значение:
//  Булево - наличие права на настройку обмена документами.
//
Функция ПравоНастройкиОбменаДокументами(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОрганизацииБизнесСеть);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет возможность чтения данных обмена документами в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на чтение настроек обмена документами.
//
Функция ПравоЧтенияНастроекОбменаДокументами(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ОрганизацииБизнесСеть);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверяет возможность выполнения обмена документами в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена.
//
Функция ПравоВыполненияОбменаДокументами(Пользователь = Неопределено, ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ВходящиеДокументыБизнесСеть, Пользователь)
		И ПравоЧтенияНастроекОбменаДокументами();
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзЭлектронногоВзаимодействия

// ТехнологияСервиса.РаботаВМоделиСервиса
// См. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ПоставщикПортал1СИТС = Неопределено;
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ЭлектронноеВзаимодействиеКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для каждого ЗначениеМассива Из ПоставщикиУслуг Цикл
		Если ЗначениеМассива.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			ПоставщикПортал1СИТС = ЗначениеМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоставщикПортал1СИТС = Неопределено Тогда
		ПоставщикПортал1СИТС = Новый Структура;
		ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
		ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС';
															|en = '1C:ITS portal'"));
		ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
		ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	КонецЕсли;
	
	Услуги = ПоставщикПортал1СИТС.Услуги;
	
	// Оператор [] используется для исключения ошибки компиляции,
	// если не внедрена Библиотека "Технология сервиса".
	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", "1c-bn-access");
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'ЭДО без электронной подписи для участников 1С:Бизнес-сеть';
												|en = 'EDI without digital signature for 1C:Business Network participants'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры
// Конец ТехнологияСервиса.РаботаВМоделиСервиса

// СтандартныеПодсистемы.БазоваяФункциональность
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.14",
		"Роль.АдминистрированиеАбонентаБизнесСеть",
		"Роль.ДобавлениеИзменениеНастроекБизнесСеть",
		"БиблиотекаЭлектронныхДокументов");
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.14",
		"Роль.ВыполнениеОбменаБизнесСеть",
		"Роль.ВыполнениеОбменаДокументамиБизнесСеть",
		"БиблиотекаЭлектронныхДокументов");
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.14",
		"Роль.ОтчетыТорговыеПредложения",
		"Роль.ЧтениеТорговыхПредложенийБизнесСеть",
		"БиблиотекаЭлектронныхДокументов");
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.14",
		"Роль.СопоставлениеНоменклатуры1СБизнесСеть",
		"Роль.ДобавлениеИзменениеТорговыхПредложенийБизнесСеть",
		"БиблиотекаЭлектронныхДокументов");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.29",
		"Роль.ДобавлениеИзменениеТорговыхПредложенийБизнесСеть",
		"Роль.ДобавлениеИзменениеНастроекТорговыхПредложений",
		"БиблиотекаЭлектронныхДокументов");
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.29",
		"Роль.ЧтениеТорговыхПредложенийБизнесСеть",
		"Роль.ЧтениеНастроекТорговыхПредложений",
		"БиблиотекаЭлектронныхДокументов");
		
КонецПроцедуры
// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	ДобавитьРазрешенияВнешнихРесурсов("БизнесСеть", ЗапросыРазрешений);
	ДобавитьРазрешенияВнешнихРесурсов("Рубрикатор", ЗапросыРазрешений);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПрофилиБезопасности

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОперацииСервиса

// Отключение организаций от сервиса.
//
// Параметры:
//  СписокОрганизаций			 - Массив - ссылки на отключаемые организации.
//  РежимУдаления				 - Булево - Истина - отключение в сервисе, Ложь - только локально.
//  Отказ						 - Булево - результат исполнения.
//  ТребуетсяОбновитьИнтерфейс	 - Булево - возвращает Истина, если после исполнения требуется обновления интерфейса.
//
Процедура ОтключитьОрганизации(СписокОрганизаций, РежимУдаления, Отказ, ТребуетсяОбновитьИнтерфейс = Ложь) Экспорт
	
	Если РежимУдаления Тогда
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("СписокОрганизаций", СписокОрганизаций);
		ПараметрыКоманды = ПараметрыКомандыУдаленияОрганизации(ПараметрыМетода, Отказ);
		ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("СписокОрганизаций", СписокОрганизаций);
	ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления, Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОрганизацииБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		// Не осталось ни одной подключенной организации, требуется удалить пользователей и идентификатор клиента.
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("СписокПользователей");
		ПараметрыОбновления.Вставить("ИдентификаторПрограммы");
		ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления, Истина);
		
		// Очистка параметров соединения.
		УдалитьТикеты();
		ТребуетсяОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обновление пользователей в сервисе по данным информационной базы.
//
// Параметры:
//   ТекущийАбонент - Строка - идентификатор абонента в сервисе.
//   ОбновлятьИдентификаторыДоступа - Булево.
//   Результат - Структура - результат выполнения, см БизнесСетьКлиентСервер.ОписаниеРезультатаКомандыСервиса().
//   Отказ - Булево - признак ошибки выполнения.
//
Процедура ОбновитьПользователейВСервисе(ТекущийАбонент, ОбновлятьИдентификаторыДоступа, Отказ) Экспорт
	
	// Получение списка подключенных абонентов, по-умолчанию берем первого абонента из списка.
	Если ТекущийАбонент = Неопределено Тогда
		
		ПараметрыКоманды = ПараметрыКомандыПолучитьСписокАбонентов();
		ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура;
	
	Если ОбновлятьИдентификаторыДоступа Тогда
		
		// Обновление идентификатора информационной базы в сервисе.
		ИдентификаторПрограммы = Строка(Новый УникальныйИдентификатор);
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ИдентификаторПрограммы", ИдентификаторПрограммы);
		ПараметрыКоманды = ПараметрыКомандыОбновитьИдентификаторПрограммы(ПараметрыМетода);
		ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОбновления = Новый Структура("ИдентификаторПрограммы", ИдентификаторПрограммы);
		ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления);
		
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Данные");
	ПараметрыМетода.Вставить("СписокПользователей");
	ПараметрыМетода.Вставить("ИдентификаторПрограммы");
	СформироватьДанныеСинхронизацииПользователя(ПараметрыМетода, ОбновлятьИдентификаторыДоступа);
	
	Если ПараметрыМетода.СписокПользователей.Количество() Тогда
		ПараметрыКоманды = ПараметрыКомандыСинхронизацияПользователей(ПараметрыМетода);
		ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// Обновление данных в кэше информационной базы.
	ПараметрыОбновления = Новый Структура("СписокПользователей", ПараметрыМетода.СписокПользователей);
	ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления);
	
	Если ОбновлятьИдентификаторыДоступа Тогда
		УдалитьТикеты();
	КонецЕсли;

КонецПроцедуры

// Отправка уведомления контрагенту об отправке электронного документа.
//
// Параметры:
//   ПараметрыУдаления - Структура
//     * Организация - СправочникСсылка.Организация - организация документа.
//     * МассивИдентификаторов - Массив - массив с идентификаторами ГУИД удаляемых документов.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Функция ОтправитьУведомлениеОбОтправке(Контрагент, МассивИдентификаторов, АдресПочты, Отказ) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Получатель", Контрагент);
	ПараметрыМетода.Вставить("МассивИдентификаторов", МассивИдентификаторов);
	ПараметрыМетода.Вставить("ЭлектроннаяПочта", АдресПочты);
	ПараметрыКоманды = ПараметрыКомандыОтправитьУведомлениеОбОтправке(ПараметрыМетода);
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеТикетов

// Получение тикета в сервисе, в том числе из кэша.
//
Функция ПолучитьКлючТикета(Соединение, ПараметрыСоединения, ПараметрыКоманды, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	СписокТикетов  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователи.ТекущийПользователь(), "БизнесСетьСписокТикетов");
	УстановитьПривилегированныйРежим(Ложь);
	
	Тикет = Неопределено;
	Если ЗначениеЗаполнено(СписокТикетов) И ТипЗнч(СписокТикетов) = Тип("Соответствие") Тогда
		Тикет = СписокТикетов.Получить(ПараметрыКоманды.Права);
	КонецЕсли;
	
	// Проверка ключа в кэше и его срока действия.
	Если Тикет = Неопределено ИЛИ ТекущаяУниверсальнаяДатаВМиллисекундах() > Тикет.СрокЖизни Тогда
		
		// Проверка сохраненного идентификатора программы.
		Если Не ЗначениеЗаполнено(ПараметрыСоединения.ИдентификаторПрограммы) Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка аутентификации в сервисе 1С:Бизнес-сеть. Рекомендуется выполнить перерегистрацию организаций в сервисе.';
									|en = 'Authentication error in 1C:Business Network service. It is recommended to reregister companies in the service.'");
			ПодробностиВЖурнале = Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.';
													|en = 'See details in log.'");
			ПодробноеСообщение = ТекстСообщения + Символы.ПС + НСтр("ru = 'Описание: Не заполнен идентификатор программы.';
																	|en = 'Description: application ID is not filled in.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + ПодробностиВЖурнале,,,, Отказ);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				ПодробноеСообщение, "БизнесСеть");
			Возврат Неопределено;
		КонецЕсли;
		
		// Подготовка и получение нового ключа.
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ИдентификаторПрограммы", ПараметрыСоединения.ИдентификаторПрограммы);
		ПараметрыМетода.Вставить("Права", ПараметрыКоманды.Права);
		
		Если ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках") Тогда
			ПараметрыМетода.Вставить("БлокироватьСообщенияОбОшибках", ПараметрыКоманды.БлокироватьСообщенияОбОшибках);
		КонецЕсли;
		
		ПараметрыТикета = ПараметрыКомандыПолучениеКлюча(ПараметрыМетода, Отказ);
		Если Отказ ИЛИ ПараметрыТикета = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыТикета.Вставить("Права", ПараметрыКоманды.Права);
		
		Если ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках") Тогда
			ПараметрыТикета.Вставить("БлокироватьСообщенияОбОшибках", ПараметрыКоманды.БлокироватьСообщенияОбОшибках);
		КонецЕсли;
		
		Тикет = ПолучитьНовыйТикет(СписокТикетов, Соединение, ПараметрыСоединения, ПараметрыТикета, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тикет) Тогда
		Возврат Тикет.Ключ;
	КонецЕсли;
	
КонецФункции

// Получение нового временного тикета в сервисе.
//
Функция ПолучитьНовыйТикет(СписокТикетов, Соединение, ПараметрыСоединения, ПараметрыТикета, Отказ)
	
	ИдентификаторПрограммы = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(
		ПараметрыСоединения.ИдентификаторПрограммы + ":"));
	ТребуетсяПолноеОбновлениеТикета = Истина;
	
	
	Если Не ЗначениеЗаполнено(СписокТикетов) Тогда
		СписокТикетов = Новый Соответствие;
	КонецЕсли;
	Тикет = СписокТикетов.Получить(ПараметрыТикета.Права);
	
	Если ЗначениеЗаполнено(Тикет) Тогда
		
		АдресРесурса = "oauth/token?grant_type=refresh_token&refresh_token=" + Тикет.КлючОбновления;
		
		Попытка
			Запрос = Новый HTTPЗапрос(АдресРесурса);
			Запрос.Заголовки.Вставить("Authorization", "Basic " + ИдентификаторПрограммы);
			Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		Исключение
			Отказ = Истина;
			ВидОперации = НСтр("ru = 'Получение тикета';
								|en = 'Receive ticket'");
			ТекстОшибки = НСтр("ru = 'Ошибка соединения с сервисом 1С:Бизнес-сеть.';
								|en = 'Error connecting to 1C:Business Network service.'");
			ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		КонецПопытки;
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Ответ.КодСостояния = 200 Тогда
			// Еще не истек срок жизни refresh-token.
			ТребуетсяПолноеОбновлениеТикета = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяПолноеОбновлениеТикета Тогда
		
		АдресРесурса = "oauth/token?grant_type=password&username=" + ПараметрыТикета.Логин
			+ "&password=" + КодироватьСтроку(ПараметрыТикета.Пароль, СпособКодированияСтроки.КодировкаURL);
		Попытка
			
			Запрос = Новый HTTPЗапрос(АдресРесурса);
			Запрос.Заголовки.Вставить("Authorization", "Basic " + ИдентификаторПрограммы);
			
			Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
			
		Исключение
			
			Отказ = Истина;
			ВидОперации = НСтр("ru = 'Получение тикета';
								|en = 'Receive ticket'");
			ТекстОшибки = НСтр("ru = 'Ошибка соединения с сервисом 1С:Бизнес-сеть.';
								|en = 'Error connecting to 1C:Business Network service.'");
			ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ЗначениеИзСтрокиJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Если Ответ.КодСостояния <> 200 Тогда
		Отказ = Истина;
		ВидОперации = НСтр("ru = 'Аутентификация';
							|en = 'Authentication'");
		ТекстОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе 1С:Бизнес-сеть.';
							|en = 'An error occurred when authenticating in 1C:Business Network service.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru = 'Код состояния: %1.';
																		|en = 'State code: %1.'"), Ответ.КодСостояния);
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("error_description") Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + Результат.error_description;
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	Тикет = Новый Структура;
	Тикет.Вставить("Ключ", Результат.access_token);
	Тикет.Вставить("СрокЖизни", ТекущаяУниверсальнаяДатаВМиллисекундах() + Результат.expires_in * 1000);
	Тикет.Вставить("КлючОбновления", Результат.refresh_token);
	СписокТикетов[ПараметрыТикета.Права] = Тикет;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.ТекущийПользователь(), СписокТикетов, "БизнесСетьСписокТикетов");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Тикет;
	
КонецФункции

Процедура УдалитьТикеты()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Очистка тикетов.
	Пользователь = Пользователи.ТекущийПользователь();
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Пользователь, "БизнесСетьСписокТикетов");
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Пользователь, "ТорговыеПредложенияТикет");
		
КонецПроцедуры

#КонецОбласти

#Область ПараметрыКоманд

// Параметры команды проверки регистрации контрагентов.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//    * СписокКонтрагентов - Массив - список ссылок контрагентов.
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыПроверкаКонтрагентов(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	ДанныеКонтрагентов.Колонки.Добавить("Ссылка");
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	Для каждого ЭлементСписка Из ПараметрыМетода.СписокКонтрагентов Цикл
		НоваяСтрока = ДанныеКонтрагентов.Добавить();
		НоваяСтрока.Ссылка = ЭлементСписка;
	КонецЦикла;
	
	ЗаполнитьРеквизитыКонтрагентов(ДанныеКонтрагентов);
	
	// Формирование данных.
	ДанныеЗапроса = Новый Массив;
	Для каждого РеквизитыКонтрагента Из ДанныеКонтрагентов Цикл
		
		ТекстОшибки = "";
		Идентификаторы = ИдентификаторыУчастника(РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП,
			РеквизитыКонтрагента.Ссылка, Отказ, ТекстОшибки);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Прервать;
		КонецЕсли;

		ЭлементЗапроса = Новый Структура;
		ЭлементЗапроса.Вставить("inn", Идентификаторы.ИНН);
		ЭлементЗапроса.Вставить("kpp", Идентификаторы.КПП);
		ДанныеЗапроса.Добавить(ЭлементЗапроса);
		
	КонецЦикла;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Проверка регистрации контрагента';
										|en = 'Check counterparty registration'");
	ПараметрыКоманды.Адрес  = "api/core/v1/organizations/existence";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ЗначениеВJSON(ДанныеЗапроса);
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибочное значение ИНН или КПП.';
												|en = 'Error value of TIN or CRTR'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

// Параметры команды получения списка входящих документов.
//
// Параметры:
//  ПараметрыМетода	- Структура - состав:
//    * Организация  - Ссылка - организация (используется для проверки прав).
//    * Контрагент   - Ссылка - ссылка на отбор по контрагенту.
//    * ВидДокумента - Строка - вид документа отбора, например "ЗаказТовара", см. ВидыДокументовСервиса.
//    * ТолькоНовые  - Булево - режим получения только незагруженных электронных документов.
//    * РежимИсходящихДокументов - Булево - режим получения документов исходящий.
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыСписокВходящихДокументов(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	СписокОрганизаций = ЗарегистрированныеОрганизации();
	
	// Ограничение списка организаций по переданному параметру.
	Если ПараметрыМетода.Свойство("Организация") Тогда
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыМетода.Организация);
	ИначеЕсли СписокОрганизаций.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Информационная база не подключена к сервису 1С:Бизнес-сеть.';
				|en = 'Infobase is not connected to 1C:Business Network service.'"),,,, Отказ);
		Возврат Неопределено;
	КонецЕсли;

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокОрганизаций, "ИНН, КПП");
	МассивСтруктурыДанных = Новый Массив;
	Для каждого ЗначениеМассива Из СписокОрганизаций Цикл
		
		Если ПараметрыМетода.Свойство("Организация")
			И ЗначениеЗаполнено(ПараметрыМетода.Организация)
			И ПараметрыМетода.Организация <> ЗначениеМассива Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = "";
		Идентификаторы = ИдентификаторыУчастника(РеквизитыОрганизации.Получить(ЗначениеМассива).ИНН,
			РеквизитыОрганизации.Получить(ЗначениеМассива).КПП,	ЗначениеМассива, Отказ, ТекстОшибки);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				НСтр("ru = 'Ошибка чтения данных 1С:Бизнес-сеть по организации:';
					|en = 'Error reading 1C:Business Network data by company:'") + " "
				+ ТекстОшибки, "БизнесСеть");
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("inn", Идентификаторы.ИНН);
		СтруктураДанных.Вставить("kpp", Идентификаторы.КПП);
		МассивСтруктурыДанных.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Данные = ЗначениеВJSON(МассивСтруктурыДанных);
	
	ПараметрыЗапроса = Новый Структура;
	Если ПараметрыМетода.Свойство("Контрагент") Тогда
		РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыМетода.Контрагент, "ИНН, КПП");
		ТекстОшибки = "";
		Идентификаторы = ИдентификаторыУчастника(РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП,
			ПараметрыМетода.Контрагент, Отказ, ТекстОшибки);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				НСтр("ru = 'Ошибка отбора по контрагенту при чтении документов 1С:Бизнес-сеть:';
					|en = 'An error occurred while filtering by counterparty when reading 1C:Business Network documents:'") + " "
				+ ТекстОшибки, "БизнесСеть");
			Возврат Неопределено;
		КонецЕсли;
		ПараметрыЗапроса.Вставить("senderInn", Идентификаторы.ИНН);
		ПараметрыЗапроса.Вставить("senderKpp", Идентификаторы.КПП);
	КонецЕсли;
	
	Если ПараметрыМетода.Свойство("ВидДокумента") Тогда
		ВидДокумента = КодироватьСтроку(XMLСтрока(ПараметрыМетода.ВидДокумента),
			СпособКодированияСтроки.КодировкаURL);
		ПараметрыЗапроса.Вставить("docType", "v8." + ВидДокумента);
	КонецЕсли;
	
	// Получение списка документов без данных.
	ПараметрыЗапроса.Вставить("withData", "false");

	Если ПараметрыМетода.Свойство("РежимИсходящихДокументов") Тогда
		ПараметрыЗапроса.Вставить("inbound", ?(ПараметрыМетода.РежимИсходящихДокументов,"false", "true"));
	КонецЕсли;
	
	Если ПараметрыМетода.Свойство("ТолькоНовые") Тогда
		ПараметрыЗапроса.Вставить("deliveryStatus", "SENT");
	КонецЕсли;
	
	СтрокаПараметровЗапроса = ПреобразоватьВСтрокуПараметровHTML(ПараметрыЗапроса);
	
	ПараметрыКоманды.Адрес  = СтрШаблон("api/edi/v1/organizations/documents%1", СтрокаПараметровЗапроса);
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(404, Ложь);
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение списка документов';
										|en = 'Receiving a document list'");
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на получение данных организации в сервисе 1С:Бизнес-сеть.';
												|en = 'Insufficient rights to get company data in 1C:Business Network service.'"));
	ПараметрыКоманды.Права = "bn_user";
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Параметры команды получения документов
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//    * МассивСсылокНаОбъект - Массив - идентификаторы документов сервиса.
//    * РежимВходящихДокументов - Булево - Истина для получения входящих документов, Ложь для исходящих.
//    * ВозвращатьДанные - Булево - признак передачи данных документов.
//  Отказ			 - Булево - признак ошибки.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса
//
Функция ПараметрыКомандыПолучитьДокументы(ПараметрыМетода, Пропускать404, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
		
	ИдентификаторыДокументов = Новый Соответствие;
	Если ПараметрыМетода.Свойство("МассивСсылокНаОбъект") Тогда
		МассивДокументов = Новый Массив;
		
		Для каждого ЗначениеМассива Из ПараметрыМетода.МассивСсылокНаОбъект Цикл
			Если ТипЗнч(ЗначениеМассива) = Тип("Число") ИЛИ ТипЗнч(ЗначениеМассива) = Тип("Строка") Тогда
				УникальныйИдентификатор = ЗначениеМассива;
			Иначе
				УникальныйИдентификатор = Строка(ЗначениеМассива.УникальныйИдентификатор());
			КонецЕсли;
			МассивДокументов.Добавить(УникальныйИдентификатор);
			ИдентификаторыДокументов.Вставить(УникальныйИдентификатор, ЗначениеМассива);
		КонецЦикла; 
		Данные = ЗначениеВJSON(МассивДокументов);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыМетода.Вставить("ИдентификаторыДокументов", ИдентификаторыДокументов);
	
	Адрес = СтрШаблон("api/edi/v1/documents/byIdOrGuid?direction=%1",
		?(ПараметрыМетода.РежимВходящихДокументов, "INBOUND", "OUTBOUND"));
	Если ПараметрыМетода.Свойство("ВозвращатьДанные") Тогда
		Адрес = Адрес + СтрШаблон("&withData=%1", Формат(ПараметрыМетода.ВозвращатьДанные, "БЛ=false; БИ=true"));
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение документов по списку';
										|en = 'Receiving documents by list.'");
	ПараметрыКоманды.Адрес  = Адрес;
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на получение документа.';
												|en = 'Insufficient rights to receive the document.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, Пропускать404);
	
	Возврат ПараметрыКоманды;

КонецФункции

// Параметры команды удаления документов.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//    * Организация - Ссылка - организация.
//    * РежимИсходящихДокументов - Булево - удаление среди входящих или исходящих документов.
//    * ИдентификаторыДокументов - Массив - список идентификаторов (Строка).
//  Отказ			 - 	 - 
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыУдалитьДокументы(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	РеквизитыОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, РеквизитыОрганизации);
	Адрес = "api/edi/v1/organizations/%1/%2/documents?direction=%3";
	
	ТекстОшибки = "";
	Идентификаторы = ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,
		ПараметрыМетода.Организация, Отказ, ТекстОшибки);

	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка удаления документов в 1С:Бизнес-сеть:';
				|en = 'Error deleting documents in 1C:Business Network:'") + " " + ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыКоманды.Адрес = СтрШаблон(Адрес, Идентификаторы.ИНН, Идентификаторы.КПП,
		?(ПараметрыМетода.РежимИсходящихДокументов, "OUTBOUND", "INBOUND"));
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Удаление документов в сервисе';
										|en = 'Delete documents in service'");
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Данные = ЗначениеВJSON(ПараметрыМетода.ИдентификаторыДокументов);
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на документ.';
												|en = 'Insufficient rights to the document.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Организация или документ в сервисе не найден.';
												|en = 'Company or document not found in service.'"));

	Возврат ПараметрыКоманды;

КонецФункции

// Параметры команды изменения статусов документов.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//    * МассивДанных - Массив - структура данных:
//        * Идентификатор - Строка - идентификатор документа.
//        * Ссылка - Ссылка - ссылка документа.
//    * Статус - Строка - новый статус "Загружен", "Отклонен".
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыИзменитьСтатусыДокументов(ПараметрыМетода, Отказ = Неопределено) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	Данные = Неопределено;
	Если ПараметрыМетода.Свойство("МассивДанных") Тогда
		
		МассивДокументов = Новый Массив;
		Для каждого ЗначениеМассива Из ПараметрыМетода.МассивДанных Цикл
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("id", ЗначениеМассива.Идентификатор);
			Если ВРег(ПараметрыМетода.Статус) = ВРег("Отклонен") Тогда
				Если ЗначениеЗаполнено(ЗначениеМассива.Ссылка) Тогда
					СтруктураСтатуса.Вставить("documentGuid", Строка(ЗначениеМассива.Ссылка.УникальныйИдентификатор()));
				КонецЕсли;
				СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата отклонения:';
															|en = 'Variance date:'") + ТекущаяДатаСеанса());
				СтруктураСтатуса.Вставить("deliveryStatus", "REJECTED");
			Иначе // По умолчанию статус "Загружен".
				СтруктураСтатуса.Вставить("documentGuid", Строка(ЗначениеМассива.Ссылка.УникальныйИдентификатор()));
				СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата загрузки:';
															|en = 'Import date:'") + ТекущаяДатаСеанса());
				СтруктураСтатуса.Вставить("deliveryStatus", "DELIVERED");
			КонецЕсли;
			МассивДокументов.Добавить(СтруктураСтатуса);
		КонецЦикла;
		Данные = ЗначениеВJSON(МассивДокументов);
		
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Изменение статусов документов';
										|en = 'Change document statuses'");
	ПараметрыКоманды.Адрес  = "api/edi/v1/documents/status";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа или документ в сервисе не найден.';
												|en = 'Insufficient access rights or the document was not found in the service. '"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Документ в сервисе не найден.';
												|en = 'Document is not found in service.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Параметры команды отправки приглашений контрагентам.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//   * Организация     - Ссылка - организация отправитель приглашения.
//   * Данные          - ТаблицаЗначений - список данных приглашаемых контрагентов:
//     * ИНН - Строка - ИНН контрагента.
//     * КПП - Строка - КПП контрагента.
//     * Наименование - Строка - наименование контрагента.
//   * РольОтправителя - Строка - "Продавец", "Покупатель"
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыОтправкаПриглашенийКонтрагентам(ПараметрыМетода, Отказ = Неопределено) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, РеквизитыОрганизации);
	
	СписокПриглашений = Новый Массив;
	ТекстОшибки = "";
	Для каждого РеквизитыКонтрагента Из ПараметрыМетода.Данные Цикл
		ДанныеПриглашения = Новый Структура;
		
		Идентификаторы = ИдентификаторыУчастника(РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП,
			РеквизитыКонтрагента.Наименование, Отказ, ТекстОшибки);
			
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				НСтр("ru = 'Ошибка отправки приглашения в 1С:Бизнес-сеть:';
					|en = 'Error sending invitation to 1C:Business Network:'") + " " + ТекстОшибки, "БизнесСеть");
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеПриглашения.Вставить("inn",   Идентификаторы.ИНН);
		ДанныеПриглашения.Вставить("kpp",   Идентификаторы.КПП);
		ДанныеПриглашения.Вставить("title", РеквизитыКонтрагента.Наименование);
		ДанныеПриглашения.Вставить("email", РеквизитыКонтрагента.ЭлектроннаяПочта);
		СписокПриглашений.Добавить(ДанныеПриглашения);
	КонецЦикла;
	
	Если ПараметрыМетода.РольОтправителя = "Продавец" Тогда
		РольОтправителя = "shipper";
	ИначеЕсли ПараметрыМетода.РольОтправителя = "Покупатель" Тогда
		РольОтправителя = "customer";
	Иначе
		РольОтправителя = "general";
	КонецЕсли;
	
	ТекстОшибки = "";
	Идентификаторы = ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,
		ПараметрыМетода.Организация, Отказ, ТекстОшибки);
		
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;

	Адрес = СтрШаблон("api/core/v1/organization/%1/%2/invitations?role=%3",
		Идентификаторы.ИНН, Идентификаторы.КПП, РольОтправителя);
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Отправка приглашений контрагентам для регистрации в сервисе';
										|en = 'Send invitations to counterparties for registration in service'");
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Адрес  = Адрес;
	ПараметрыКоманды.Данные = ЗначениеВJSON(СписокПриглашений);
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Превышено максимальное количество приглашений или ошибка параметров.';
												|en = 'Maximum number of invitations has been exceeded or parameter error occurred.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для отправки приглашения.';
												|en = 'Insufficient rights to send the invitation.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена организация в сервисе.';
												|en = 'Company was not found in the service.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Параметры команды отправки приглашения контрагенту.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//   * Организация      - Ссылка - организация отправитель приглашения.
//   * Контрагент       - Ссылка - контрагент получатель приглашения.
//   * ЭлектроннаяПочта - Строка - адрес электронной почты контрагента для отправки приглашения.
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыОтправкаПриглашения(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
		
	ПараметрыОрганизации = Неопределено;
	ПараметрыКонтрагента = Неопределено;
	
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, ПараметрыОрганизации);
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Контрагент,  ПараметрыКонтрагента);
	
	Если Не ЗначениеЗаполнено(ПараметрыМетода.ЭлектроннаяПочта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан адрес электронной почты контрагента.';
																|en = 'Counterparty email address is not specified.'")
			+ " " + ПараметрыМетода.Контрагент,,,, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	ИдентификаторыОрганизации = ИдентификаторыУчастника(ПараметрыОрганизации.ИНН,
		ПараметрыОрганизации.КПП, ПараметрыМетода.Организация, Отказ, ТекстОшибки);
	ИдентификаторыКонтрагента = ИдентификаторыУчастника(ПараметрыКонтрагента.ИНН,
		ПараметрыКонтрагента.КПП, ПараметрыМетода.Контрагент, Отказ, ТекстОшибки);
		
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка отправки приглашения в 1С:Бизнес-сеть:';
				|en = 'Error sending invitation to 1C:Business Network:'") + " " + ТекстОшибки, "БизнесСеть");
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Отправка приглашения регистрации в сервисе';
										|en = 'Send registration invitation in the service'");
	Адрес = СтрШаблон("api/core/v1/organizations/%1/%2/invitation?dstEmail=%3&dstTitle=%4&srcInn=%5&srcKpp=%6",
		ИдентификаторыКонтрагента.ИНН, ИдентификаторыКонтрагента.КПП,
		ПараметрыМетода.ЭлектроннаяПочта,
		КодироватьСтроку(ПараметрыКонтрагента.ОфициальноеНаименование, СпособКодированияСтроки.КодировкаURL),
		ИдентификаторыОрганизации.ИНН, ИдентификаторыОрганизации.КПП);
	ПараметрыКоманды.Адрес = Адрес;
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для отправки приглашения.';
												|en = 'Insufficient rights to send the invitation.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена организация в сервисе.';
												|en = 'Company was not found in the service.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыПолучениеКлюча(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.Вставить("Логин");
	ПараметрыКоманды.Вставить("Пароль");
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение тикета';
										|en = 'Receive ticket'");
	
	Если ПараметрыМетода.Права = "bn_its" Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-bn-access");
			УстановитьПривилегированныйРежим(Ложь);
			Если ЗначениеЗаполнено(ДанныеАутентификации.КодОшибки) Тогда
				Если ДанныеАутентификации.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
					Отказ = Истина;
				КонецЕсли;
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
					           |%1';
					           |en = 'Cannot connect to the online support portal due to: 
					           |%1'"),
					ДанныеАутентификации.СообщениеОбОшибке);
					
					Если ПараметрыМетода.Свойство("БлокироватьСообщенияОбОшибках")
									И ПараметрыМетода.БлокироватьСообщенияОбОшибках = Истина Тогда
						
						Отказ = Истина;
						
					Иначе
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,, Отказ);
						
					КонецЕсли;
					
				Возврат Неопределено;
			КонецЕсли;
			ПараметрыКоманды.Логин  = "AUTH_TOKEN";
			ПараметрыКоманды.Пароль = ДанныеАутентификации.Тикет;
			
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ПараметрыАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			УстановитьПривилегированныйРежим(Ложь);
			Если ТипЗнч(ПараметрыАутентификации) = Тип("Структура") Тогда
				ПараметрыКоманды.Логин  = ПараметрыАутентификации.Логин;
				ПараметрыКоманды.Пароль = ПараметрыАутентификации.Пароль;
			Иначе
				ТекстОшибки = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.';
									|en = 'No connection to Online user support.'");
				ТекстСообщения = ТекстОшибки + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.';
																|en = 'See details in log.'");
				
				Если ПараметрыМетода.Свойство("БлокироватьСообщенияОбОшибках")
								И ПараметрыМетода.БлокироватьСообщенияОбОшибках = Истина Тогда
					Отказ = Истина;
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				КонецЕсли;
				ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
					ТекстОшибки, "БизнесСеть");

			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыМетода.Свойство("АдминистраторАбонента") Тогда
		
		ПараметрыКоманды.Логин  = ПараметрыМетода.АдминистраторАбонента.Логин;
		ПараметрыКоманды.Пароль = ПараметрыМетода.АдминистраторАбонента.Пароль;
		
	ИначеЕсли ПараметрыМетода.Права = "bn_user" Тогда
		
		СтруктураИдентификации = ПараметрыАутентификацииПользователя();
		Если СтруктураИдентификации <> Неопределено Тогда
			ПараметрыКоманды.Логин  = СтруктураИдентификации.Логин;
			ПараметрыКоманды.Пароль = СтруктураИдентификации.Пароль;
		Иначе
			Если ОрганизацияЗарегистрирована() Тогда
				
				ТекстОшибки = НСтр("ru = 'Недостаточно прав для работы с сервисом 1С:Бизнес-сеть.
										 |Обратитесь к администратору.';
										 |en = 'Insufficient rights to access 1C:Business Network service.
										 |Contact administrator.'");
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Отсутствуют зарегистрированные организации в сервисе 1С:Бизнес-сеть.';
									|en = 'Companies registered in 1C:Business Network service are missing.'");
			КонецЕсли;
			ТекстСообщения = ТекстОшибки + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.';
															|en = 'See details in log.'");
			ТекстОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе.';
								|en = 'Authentication error in service.'") + Символы.ПС + ТекстОшибки;
			
			Если ПараметрыМетода.Свойство("БлокироватьСообщенияОбОшибках")
						И ПараметрыМетода.БлокироватьСообщенияОбОшибках = Истина Тогда
				
				Отказ = Истина;
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
				
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
					ТекстОшибки, "БизнесСеть");
		
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПроверкаРегистрацииАбонента()

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Проверка регистрации в сервисе';
										|en = 'Check registration in service'");
	ПараметрыКоманды.Адрес = "api/core/v1/subscribers/existence";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_its";
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыРегистрацияАбонента(ПараметрыМетода, Отказ)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Регистрация организации в сервисе 1С:Бизнес-сеть';
										|en = 'Company registration in 1C:Business Network service'");
	ПараметрыКоманды.Адрес  = "api/core/v1/subscribers";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Данные = СформироватьДанныеРегистрацииАбонента(ПараметрыМетода, Отказ);
	ПараметрыКоманды.Права  = "bn_its";
	ПараметрыКоманды.Вставить("Идентификатор", ПараметрыМетода.ИдентификаторПрограммы);
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Ошибка регистрации организации в сервисе.';
												|en = 'An error occurred when registering company in the service.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для регистрации в сервисе.';
												|en = 'Insufficient rights to register in the service.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьСписокАбонентов()

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос списка абонентов';
										|en = 'Subscriber list request'");
	ПараметрыКоманды.Адрес = "api/core/v1/subscribers?withAdministrativePermissionsOnly=true";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыРегистрацияОрганизации(ПараметрыМетода, Отказ)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	РеквизитыОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, РеквизитыОрганизации);
	
	ТекстОшибки = "";
	Идентификаторы = ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,
		ПараметрыМетода.Организация, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка регистрации организации в 1С:Бизнес-сеть:';
				|en = 'An error occurred while registering the company in 1C:Business Network:'") + " "+ ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("inn", Идентификаторы.ИНН);
	ДанныеОрганизации.Вставить("kpp", Идентификаторы.КПП);
	
	Если РеквизитыОрганизации.Свойство("СокращенноеНаименование") Тогда
		НаименованиеОрганизации = РеквизитыОрганизации.СокращенноеНаименование;
	Иначе
		НаименованиеОрганизации = РеквизитыОрганизации.ПолноеНаименование;
	КонецЕсли;
	Если ПустаяСтрока(НаименованиеОрганизации) Тогда
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Не заполнено наименование организации.';
							|en = 'Company name is not filled in.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПараметрыКоманды.Адрес + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Регистрация организации';
																			|en = 'Company registration'"),
			ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	ДанныеОрганизации.Вставить("title", НаименованиеОрганизации);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Регистрация организации';
										|en = 'Company registration'");
	ПараметрыКоманды.Адрес  = СтрШаблон("api/core/v1/subscribers/%1/organizations",
		Формат(ПараметрыМетода.Абонент, "ЧГ="));
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Данные = ЗначениеВJSON(ДанныеОрганизации);
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Ошибка регистрации организации.';
												|en = 'Company registration error.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыСинхронизацияПользователей(ПараметрыМетода)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Синхронизация пользователей в сервисе';
										|en = 'Synchronize users in service'");
	ПараметрыКоманды.Адрес  = СтрШаблон("api/core/v1/subscribers/subscriberMembers/sync?endpointGuid=%1",
		ПараметрыМетода.ИдентификаторПрограммы);
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена учетная запись для программы.';
												|en = 'Account for application is not found.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для выполнения операции.';
												|en = 'Insufficient rights to perform the operation.'"));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Пользователь принадлежит другой учетной записи.';
												|en = 'User belongs to another account.'"));

	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПроверкаОрганизации(ПараметрыМетода, Отказ)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ТекстОшибки = "";
	Идентификаторы = ИдентификаторыУчастника(ПараметрыМетода.ИНН, ПараметрыМетода.КПП,
		ПараметрыМетода.Ссылка, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка проверки организации при регистрации в 1С:Бизнес-сеть:';
				|en = 'An error occurred while checking the company during registration in 1C:Business Network:'") + " " + ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗапроса = Новый Массив;
	
	СтруктураТела = Новый Структура;
	СтруктураТела.Вставить("inn", Идентификаторы.ИНН);
	СтруктураТела.Вставить("kpp", Идентификаторы.КПП); //+
	ДанныеЗапроса.Добавить(СтруктураТела);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Проверка регистрации организации';
										|en = 'Check company registration'");
	ПараметрыКоманды.Адрес  = "api/core/v1/organizations/existence";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ЗначениеВJSON(ДанныеЗапроса);
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибочное значение ИНН или КПП.';
												|en = 'Error value of TIN or CRTR'"));
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыОбновитьСтатус(ПараметрыМетода)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	Если ПараметрыМетода.Свойство("МассивДанных") Тогда
		МассивДокументов = Новый Массив;
		Для каждого ЭлементМассива Из ПараметрыМетода.МассивДанных Цикл
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("id", ЭлементМассива.Идентификатор);
			СтруктураСтатуса.Вставить("documentGuid", Строка(ЭлементМассива.Ссылка.УникальныйИдентификатор()));
			СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата загрузки:';
														|en = 'Import date:'") + ТекущаяДатаСеанса());
			МассивДокументов.Добавить(СтруктураСтатуса);
		КонецЦикла;
		Данные = ЗначениеВJSON(МассивДокументов);
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Обновление статуса документа';
										|en = 'Update document status'");
	ПараметрыКоманды.Адрес  = "api/edi/v1/documents/statusDelivered";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа или документ в сервисе не найден.';
												|en = 'Insufficient access rights or the document was not found in the service. '"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Документ в сервисе не найден.';
												|en = 'Document is not found in service.'"));
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыОбновитьИдентификаторПрограммы(ПараметрыМетода)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	Данные = Новый Структура;
	Данные.Вставить("title",        Метаданные.Синоним);
	Данные.Вставить("endpointGUID", ПараметрыМетода.ИдентификаторПрограммы);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Обновление идентификатора программы';
										|en = 'Update application ID'");
	ПараметрыКоманды.Адрес  = "api/core/v1/endpoint";
	ПараметрыКоманды.Метод  = "PUT";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ЗначениеВJSON(Данные);
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найден идентификатор программы.';
												|en = 'Application ID is not found.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа для изменения идентификатора программы.';
												|en = 'Insufficient access rights to change application ID.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыОтправитьУведомлениеОбОтправке(ПараметрыМетода)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	РеквизитыКонтрагента = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Получатель, РеквизитыКонтрагента);
	
	Адрес = "api/core/v1/organization/invitation/?dstEmail=%1&dstTitle=%2&attachDoc=true";
	ПараметрыКоманды.Наименование = НСтр("ru = 'Отправка уведомления об отправке документа';
										|en = 'Send notification of document sending'");
	ПараметрыКоманды.Адрес = СтрШаблон(Адрес, ПараметрыМетода.ЭлектроннаяПочта,
		КодироватьСтроку(РеквизитыКонтрагента.ОфициальноеНаименование, СпособКодированияСтроки.КодировкаURL));
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ЗначениеВJSON(ПараметрыМетода.МассивИдентификаторов);
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка формирования приглашений.';
												|en = 'An error occurred when generating invitations.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа к документу в сервисе.';
												|en = 'Insufficient access rights to document in the service.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найден документ в сервисе.';
												|en = 'Document is not found in service.'"));

	Возврат ПараметрыКоманды;

КонецФункции

// .Параметры команды удаления организации.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//   * СписокОрганизаций - Массив - ссылки на отключаемые организации.
//  Отказ			 - Булево - ошибка выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыУдаленияОрганизации(ПараметрыМетода, Отказ)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	СписокОрганизаций = Новый ТаблицаЗначений;
	СписокОрганизаций.Колонки.Добавить("Ссылка");
	СписокОрганизаций.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	СписокОрганизаций.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	Для каждого ЗначениеМассива Из ПараметрыМетода.СписокОрганизаций Цикл
		НоваяСтрока = СписокОрганизаций.Добавить();
		НоваяСтрока.Ссылка = ЗначениеМассива;
	КонецЦикла;
	ЗаполнитьРеквизитыОрганизаций(СписокОрганизаций);
	
	Данные = Новый Массив;
	Для каждого СтрокаТаблицы Из СписокОрганизаций Цикл
		ДанныеОрганизации = Новый Структура;
		
		ТекстОшибки = "";
		Идентификаторы = ИдентификаторыУчастника(СтрокаТаблицы.ИНН, СтрокаТаблицы.КПП,
			СтрокаТаблицы.Ссылка, Отказ, ТекстОшибки);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				НСтр("ru = 'Ошибка удаления организации в 1С:Бизнес-сеть:';
					|en = 'An error occurred when deleting the company in 1C:Business Network:'") + " "+ ТекстОшибки, "БизнесСеть");
			Возврат Неопределено;
		КонецЕсли;

		ДанныеОрганизации.Вставить("inn", Идентификаторы.ИНН);
		ДанныеОрганизации.Вставить("kpp", Идентификаторы.КПП);

		Данные.Добавить(ДанныеОрганизации);
	КонецЦикла;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Удаление организации из сервиса';
										|en = 'Delete company from service'");
	ПараметрыКоманды.Адрес = "api/core/v1/organizations/delete";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Данные = ЗначениеВJSON(Данные);
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Организация не найдена.';
												|en = 'Company is not found.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для удаления организации.';
												|en = 'Insufficient rights to delete the company.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

// Параметры команды проверки прав организации.
//
// Параметры:
//  ПараметрыМетода	- Структура - состав:
//    * Организация                 - Ссылка - организация.
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыПроверкиПравОрганизации(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, ПараметрыОрганизации);
	Идентификаторы = ИдентификаторыУчастника(ПараметрыОрганизации.ИНН, ПараметрыОрганизации.КПП);
	
	ДатаСинхронизации = КонецГода(ТекущаяДатаСеанса()); // Для проверки достаточно указать будущую дату.
	
	ПараметрыКоманды.Адрес = СтрШаблон("api/edi/v1/organizations/%1/%2/documents?fromTime=%3",
		Идентификаторы.ИНН, Идентификаторы.КПП,	Формат(ДатаСинхронизации, "ДФ=dd-MM-yyyy-HH-mm-ss"));
		
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена организация в сервисе 1С:Бизнес-сеть.';
												|en = 'Company was not found in 1C:Business Network service.'"));
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Проверка прав организации';
										|en = 'Check company rights'");
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Ошибка регистрации организации в сервисе 1С:Бизнес-сеть.
		|Возможно организация зарегистрирована под другой учетной записью.';
		|en = 'An error occurred while registering the company in 1C:Business Network service. 
		|The company may have been registered with another account.'"));
		
	ПараметрыКоманды.Права = "bn_user";
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Формирует строку параметров для HTTP запроса в формате "?Параметр1=Значение1&Параметр2...".
//
// Параметры:
//   ПараметрыЗапроса - Структура - данные для строки, ключ - имя параметра, значение - устанавливаемое значение,
//                                  кириллические символы необходимо закодировать по алгоритму Base64.
//
Функция ПреобразоватьВСтрокуПараметровHTML(ПараметрыЗапроса)
	
	Результат = "";
	Для каждого ЭлементСтруктуры Из ПараметрыЗапроса Цикл
		Результат = Результат + ?(Результат = "", "?", "&") + ЭлементСтруктуры.Ключ + "=" + ЭлементСтруктуры.Значение;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные JSON для регистрации абонента в сервисе.
//
// Параметры:
//   ПараметрыКоманды - Структура - данные заполнения.
//   Отказ - Булево - признак отказа выполнения.
//
// Возвращаемое значение:
//   Строка - данные из JSON.
//
Функция СформироватьДанныеРегистрацииАбонента(ПараметрыМетода, Отказ)
	
	ПараметрыАбонента = Новый Структура;
	ПараметрыАбонента.Вставить("title",                        Метаданные.Синоним);
	ПараметрыАбонента.Вставить("restrictAccessByOrganization", Ложь); // Контроль по организациям.
	ПараметрыАбонента.Вставить("restrictAccessByEndpoint",     Ложь); // Контроль по клиентам.
	
	ЛогинПользователя  = Строка(Новый УникальныйИдентификатор);
	ПарольПользователя = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыМетода.Вставить("АдминистраторАбонента", Новый Структура("Пользователь, Логин, Пароль",
		Пользователи.ТекущийПользователь(), ЛогинПользователя, ПарольПользователя));
	
	УчетныеДанные = Новый Структура;
	УчетныеДанные.Вставить("firstName", Строка(Пользователи.ТекущийПользователь()));
	
	// Заполнение пользователя администратор абонента.
	ПользовательСистемы = Новый Структура;
	ПользовательСистемы.Вставить("type",    "AUTOGENERATED");
	ПользовательСистемы.Вставить("login",    ЛогинПользователя);
	ПользовательСистемы.Вставить("password", ПарольПользователя);
	
	Клиент = Новый Структура;
	Клиент.Вставить("endpointGUID", ПараметрыМетода.ИдентификаторПрограммы);
	Клиент.Вставить("title",        Метаданные.Синоним);
	
	СписокКлиентов = Новый Массив;
	СписокКлиентов.Добавить(Клиент);
	ПользовательСистемы.Вставить("endpoints", СписокКлиентов);
	
	СписокПользователей = Новый Массив;
	СписокПользователей.Добавить(ПользовательСистемы);
	УчетныеДанные.Вставить("personAccounts", СписокПользователей);
	
	СписокУчетныхДанных = Новый Массив;
	СписокУчетныхДанных.Добавить(УчетныеДанные);
	
	// Заполнение абонента.
	ПараметрыАбонента.Вставить("members", СписокУчетныхДанных);
	Данные = ЗначениеВJSON(ПараметрыАбонента);
	
	Возврат Данные;
	
КонецФункции

// Получение таблицы пользователей сервиса в информационной базе.
//
// Возвращаемое значение:
//   ТаблицаЗначений - пользователи информационной базы, подключенные к сервису.
//
Функция ПользователиСервисаВИнформационнойБазе()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение списка пользователей информационной базы.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.Ссылка                      КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПользователиБизнесСеть.Пользователь ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                    КАК Подключен,
	|	ПользователиБизнесСеть.Идентификатор   КАК Идентификатор,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиБизнесСеть КАК ПользователиБизнесСеть
	|		ПО Пользователи.Ссылка = ПользователиБизнесСеть.Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	ТаблицаПользователей.Колонки.Добавить("Пароль");
	ТаблицаПользователей.Колонки.Добавить("Телефон");
	ТаблицаПользователей.Колонки.Добавить("ЭлектроннаяПочта");
	ТаблицаПользователей.Колонки.Добавить("ЭтоАдминистратор");
	
	// Анализ ролей пользователей.
	СтрокиУдаления = Новый Массив;
	СтруктураКонтактовПользователя = ОписаниеКонтактнойИнформацииПользователя();
	Для каждого СтрокаТаблицы Из ТаблицаПользователей Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			СтрокаТаблицы.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ = Неопределено Тогда
			СтрокиУдаления.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		// Для пользователей имеющих административные права устанавливается роль администратора сервиса,
		// для пользователей имеющих права обмена документами, устанавливается роль пользователя сервиса,
		// остальные пользователи не используются в сервисе.
		Если Пользователи.ЭтоПолноправныйПользователь(СтрокаТаблицы.Ссылка)
			ИЛИ	ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОрганизацииБизнесСеть, СтрокаТаблицы.Ссылка) Тогда
			СтрокаТаблицы.ЭтоАдминистратор = Истина;
		ИначеЕсли ПравоВыполненияОбменаДокументами(СтрокаТаблицы.Ссылка) Тогда
			СтрокаТаблицы.ЭтоАдминистратор = Ложь;
		Иначе
			СтрокиУдаления.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		// Получение наименования роли пользователя и адреса эл.почты.
		БизнесСетьПереопределяемый.ПолучитьКонтактнуюИнформациюПользователя(СтрокаТаблицы.Ссылка, СтруктураКонтактовПользователя);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураКонтактовПользователя);
		
	КонецЦикла;
	
	// Удаление незарегистрированных пользователей.
	Для каждого ЗначениеМассива Из СтрокиУдаления Цикл
		ТаблицаПользователей.Удалить(ЗначениеМассива);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ТаблицаПользователей;
	
КонецФункции

// Установка статус загрузки документа в информационную базы в сервисе.
//
Процедура УстановитьСтатусЗагружен(Идентификатор, Ссылка, Отказ)
	
	МассивДанных = Новый Массив;
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ссылка", Ссылка);
	СтруктураДанных.Вставить("Идентификатор", Идентификатор);
	МассивДанных.Добавить(СтруктураДанных);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("МассивДанных", МассивДанных);
	ПараметрыМетода.Вставить("Статус", "Загружен");
	ПараметрыКоманды = ПараметрыКомандыОбновитьСтатус(ПараметрыМетода);
	ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

// Формирование данных JSON для регистрации и синхронизации пользователей в сервисе.
//
// Параметры:
//   ПараметрыСинхронизации - Структура - состав:
//     * ИдентификаторПрограммы - Строка - идентификатор программы, подключенной к сервису.
//     * СписокПользователей - ТаблицаЗначений - массив пользователей для синхронизации.
//     * Данные - Строка - сформированные данные для регистрации.
//   ОбновлятьИдентификаторыДоступа - Булево - признак обновления идентификаторов.
//
Процедура СформироватьДанныеСинхронизацииПользователя(ПараметрыСинхронизации, ОбновлятьИдентификаторыДоступа)
	
	УстановитьПривилегированныйРежим(Истина);
	Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.ПользователиБизнесСеть");
	ИдентификаторПрограммы = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Ссылка, "ПарольБизнесСеть");
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получение списка пользователей в информационной базе.
	ПользователиСервиса = ПользователиСервисаВИнформационнойБазе();
		
	// Обработка данных.
	МассивУчетныхДанных = Новый Массив;
	Для каждого СтрокаТаблицы Из ПользователиСервиса Цикл
		
		// Если пользователь не подключен, присваивается новый идентификатор.
		Если ОбновлятьИдентификаторыДоступа Или Не ЗначениеЗаполнено(СтрокаТаблицы.Идентификатор) Тогда
			СтрокаТаблицы.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		// Добавление в JSON пользователя.
		ПользовательСистемы = Новый Структура;
		ПользовательСистемы.Вставить("type", "AUTOGENERATED");
		ПользовательСистемы.Вставить("login", СтрокаТаблицы.Идентификатор);
		
		// Пароль при каждом обращении генерируется новый.
		СтрокаТаблицы.Пароль = Строка(Новый УникальныйИдентификатор);
		ПользовательСистемы.Вставить("password", СтрокаТаблицы.Пароль);
		
		СписокПользователей = Новый Массив;
		СписокПользователей.Добавить(ПользовательСистемы);
		
		// Добавление в JSON учетных данных.
		УчетныеДанные = Новый Структура;
		УчетныеДанные.Вставить("firstName", Строка(СтрокаТаблицы.Ссылка));
		УчетныеДанные.Вставить("personAccounts", СписокПользователей);
		
		СписокПользователей = Новый Массив;
		СписокПользователей.Добавить(ПользовательСистемы);
		
		ПользовательАбонента = Новый Структура;
		ПользовательАбонента.Вставить("roleTitle", "user");
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлектроннаяПочта) Тогда
			ПользовательАбонента.Вставить("corporationEmail", СтрокаТаблицы.ЭлектроннаяПочта);	
		КонецЕсли;
		
		ПользовательАбонента.Вставить("isSubscriberAdministrator", ?(СтрокаТаблицы.ЭтоАдминистратор, "true", "false"));
		ПользовательАбонента.Вставить("person", УчетныеДанные);
		
		МассивУчетныхДанных.Добавить(ПользовательАбонента);
		
	КонецЦикла;
	
	ПараметрыСинхронизации.СписокПользователей    = ПользователиСервиса;
	ПараметрыСинхронизации.ИдентификаторПрограммы = ИдентификаторПрограммы;
	ПараметрыСинхронизации.Данные                 = ЗначениеВJSON(МассивУчетныхДанных);
	
КонецПроцедуры

// Формирование документа ИБ по электронному документу.
//
// Параметры:
//   ПараметрыФормирования - Структура - структура данных формирования.
//   ДанныеФормы - ДанныеФормыКоллекция - форма получатель.
//   ТекстСообщения - Строка - текст при возникновении ошибки.
//   Записывать - Булево - записывать документ.
//   Отказ - Булево - результат выполнения.
//
Процедура СформироватьДокументИБ(ПараметрыФормирования, ДокументСсылка, ТекстСообщения, Записывать,
	ОбновитьСтруктуруРазбора, Отказ) Экспорт
	
	Перем СтрокаОбъекта, ДеревоРазбора;
	
	Если ЗначениеЗаполнено(ДокументСсылка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Проведен") Тогда
		Шаблон = НСтр("ru = 'Обработка документа %1.
					|Операция возможна только для непроведенных документов.';
					|en = 'Processing document %1. 
					|The operation is available only for unposted documents.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДокументСсылка);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// В том случае если номенклатура уже была сопоставлена - используется временное хранилище,
	// если сопоставляли вручную - формируется структура разбора еще раз.
	
	Если Не ОбновитьСтруктуруРазбора
		И ЗначениеЗаполнено(ПараметрыФормирования.АдресСтруктурыРазбораЭД)
		И ЭтоАдресВременногоХранилища(ПараметрыФормирования.АдресСтруктурыРазбораЭД) Тогда
		СтруктураРазбора = ПолучитьИзВременногоХранилища(ПараметрыФормирования.АдресСтруктурыРазбораЭД);
	Иначе
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыФормирования.ДанныеФайлаРазбора);
		ДвоичныеДанныеФайла.Записать(ИмяФайла);
		
		ИмяФайлаДопДанных = Неопределено;
		Если ЭтоАдресВременногоХранилища(ПараметрыФормирования.ДанныеФайлаДопДанных) Тогда
			ИмяФайлаДопДанных = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыФормирования.ДанныеФайлаДопДанных);
			ДвоичныеДанныеФайла.Записать(ИмяФайлаДопДанных);
		КонецЕсли;
		
		СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяФайла,
			Перечисления.НаправленияЭД.Входящий, ИмяФайлаДопДанных);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		Если ИмяФайлаДопДанных <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаДопДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
		И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
		
		ДанныеЭлектронногоДокумента = Новый Структура("Контрагент", ПараметрыФормирования.Контрагент);
		Если СтрокаОбъекта.ЗначениеРеквизита = Неопределено Тогда
			ОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВСтрокахДереваДокумента(
				ДанныеЭлектронногоДокумента, СтрокаОбъекта);
		Иначе
			ОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
				ДанныеЭлектронногоДокумента, СтрокаОбъекта.ЗначениеРеквизита);
		КонецЕсли;
		
		ФорматЭлектронногоДокумента = СтруктураРазбора.ФорматЭлектронногоДокумента;
		
		ОбменСКонтрагентамиСлужебный.СформироватьДокумент(ФорматЭлектронногоДокумента, ДеревоРазбора, СтрокаОбъекта, ДокументСсылка,
			ПараметрыФормирования.Контрагент, Записывать, ТекстСообщения, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		УстановитьСтатусЗагружен(ПараметрыФормирования.Идентификатор, ДокументСсылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Возврат данных идентификации пользователя информационной базы из кэша.
//
// Параметры:
//   Пользователь - Справочник.Пользователи - проверяемый пользователь, если не указан, то текущий.
//
// Возвращаемое значение:
//   Структура - структура данных идентификации.
//
Функция ПараметрыАутентификацииПользователя(Пользователь = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Пользователь = Пользователи.СсылкаНеуказанногоПользователя(Истина)
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Служебный") Тогда
		// Получение первого пользователя по ролям.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиБизнесСеть.Пользователь КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПользователиБизнесСеть КАК ПользователиБизнесСеть";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ПравоВыполненияОбменаДокументами(Выборка.Ссылка) Тогда
				Пользователь = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользователиБизнесСеть.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ПользователиБизнесСеть КАК ПользователиБизнесСеть
	|ГДЕ
	|	ПользователиБизнесСеть.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураИдентификации = Неопределено;
	Если Выборка.Следующий() Тогда
		СтруктураИдентификации = Новый Структура;
		СтруктураИдентификации.Вставить("Пользователь", Пользователь);
		СтруктураИдентификации.Вставить("Логин", Выборка.Идентификатор);
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Пользователь, "ПарольБизнесСеть");
		СтруктураИдентификации.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураИдентификации;
	
КонецФункции

// Обновляет значения идентификаторов Бизнес-сети в программе.
//
// Параметры:
//   ПараметрыОбновления - Структура
//     * СписокОрганизаций - Массив - список организаций.
//     * СписокПользователей - Массив - список пользователей.
//     * АдминистраторАбонента - Структура - данные об администраторе абонента (Пользователь, Логин, Пароль).
//     * ИдентификаторПрограммы - Строка - идентификатор программы.
//   РежимУдаления - Булево - если Истина, удаление идентификаторов, Ложь - сохранение.
//
Процедура ОбновитьИдентификаторыБизнесСети(ПараметрыОбновления, РежимУдаления = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	МенеджерЗаписи = РегистрыСведений.ПользователиБизнесСеть.СоздатьМенеджерЗаписи();
	
	// Обновление сведений о зарегистрированных организациях.
	Если ПараметрыОбновления.Свойство("СписокОрганизаций") Тогда
		Если ЗначениеЗаполнено(ПараметрыОбновления.СписокОрганизаций) Тогда
			МенеджерЗаписиОрганизации = РегистрыСведений.ОрганизацииБизнесСеть.СоздатьМенеджерЗаписи();
			Для каждого ЭлементМассива Из ПараметрыОбновления.СписокОрганизаций Цикл
				МенеджерЗаписиОрганизации.Организация = ЭлементМассива;
				МенеджерЗаписиОрганизации.Прочитать();
				Если РежимУдаления Тогда
					МенеджерЗаписиОрганизации.Удалить();
				Иначе
					МенеджерЗаписиОрганизации.Организация = ЭлементМассива;
					МенеджерЗаписиОрганизации.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Для пустого списка удаление всех записей регистра.
			НаборЗаписей = РегистрыСведений.ОрганизацииБизнесСеть.СоздатьНаборЗаписей();
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Обновление сведений о зарегистрированных пользователях.
	Если ПараметрыОбновления.Свойство("СписокПользователей") Тогда
	
		СписокПользователей = ПараметрыОбновления.СписокПользователей;
		
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(СписокПользователей) Тогда
			// Выборка пользователей, переданных в массиве.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПользователиБизнесСеть.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ПользователиБизнесСеть КАК ПользователиБизнесСеть
			|ГДЕ
			|	ПользователиБизнесСеть.Пользователь ССЫЛКА Справочник.Пользователи
			|	И НЕ ПользователиБизнесСеть.Пользователь В (&МассивСсылок)";
			Запрос.УстановитьПараметр("МассивСсылок", СписокПользователей.ВыгрузитьКолонку("Ссылка"));
		Иначе
			// Если не передан массив пользователей, то выбор всех.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПользователиБизнесСеть.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ПользователиБизнесСеть КАК ПользователиБизнесСеть";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Если список пользователей пустой, и значение ссылки это пустой пользователь, то такую запись не удаляем,
			// так как эта запись является администратором абонента в сервисе.
			ЭтоПустойАдминистратор = НЕ ЗначениеЗаполнено(СписокПользователей)
				И (НЕ ЗначениеЗаполнено(Выборка.Пользователь)
				ИЛИ Выборка.Пользователь = Пользователи.СсылкаНеуказанногоПользователя());
			
			Если НЕ ЭтоПустойАдминистратор ИЛИ (ЭтоПустойАдминистратор И РежимУдаления) Тогда
				МенеджерЗаписи.Пользователь = Выборка.Пользователь;
				МенеджерЗаписи.Удалить();
				// Очистка пароля в хранилище.
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Выборка.Пользователь, Неопределено, "ПарольБизнесСеть");
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не РежимУдаления Тогда
			Если ЗначениеЗаполнено(СписокПользователей) Тогда
				Для каждого ЭлементМассива Из СписокПользователей Цикл
					МенеджерЗаписи.Пользователь = Справочники[ИмяСправочникаОрганизации].ПустаяСсылка();
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.Пользователь = ЭлементМассива.Ссылка;
					МенеджерЗаписи.Идентификатор  = ЭлементМассива.Идентификатор;
					МенеджерЗаписи.Записать(Истина);
					ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ЭлементМассива.Ссылка, 
						ЭлементМассива.Пароль, "ПарольБизнесСеть");
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Обновление сведений об администраторе абонента.
	Если ПараметрыОбновления.Свойство("АдминистраторАбонента") Тогда

		АдминистраторАбонента = ПараметрыОбновления.АдминистраторАбонента;
		МенеджерЗаписи.Пользователь = Справочники[ИмяСправочникаОрганизации].ПустаяСсылка();
		МенеджерЗаписи.Пользователь = АдминистраторАбонента.Пользователь;
		МенеджерЗаписи.Прочитать();
		Если РежимУдаления Тогда
			МенеджерЗаписи.Удалить();
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдминистраторАбонента.Пользователь, 
				Неопределено, "ПарольБизнесСеть");
		Иначе
			МенеджерЗаписи.Пользователь = АдминистраторАбонента.Пользователь;
			МенеджерЗаписи.Идентификатор  = АдминистраторАбонента.Логин;
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдминистраторАбонента.Пользователь, 
				АдминистраторАбонента.Пароль, "ПарольБизнесСеть");
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Обновление сведений об идентификаторе информационной базы.
	Если ПараметрыОбновления.Свойство("ИдентификаторПрограммы") Тогда
		Ссылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.ПользователиБизнесСеть");
		Если РежимУдаления Тогда
			ОбновитьПовторноИспользуемыеЗначения();
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Ссылка, Неопределено, "ПарольБизнесСеть");
		Иначе
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Ссылка,
				ПараметрыОбновления.ИдентификаторПрограммы, "ПарольБизнесСеть");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Строка)
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ПараметрыКоманды - Структура - параметры команды, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния	 - Строка - код состояния ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ПараметрыКоманды.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		ПараметрыКоманды.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Внутренняя ошибка сервиса';
															|en = 'Internal service error'"));
	КонецЕсли;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		
		ОписаниеОшибки = ПараметрыКоманды.Ошибки.Получить(КодСостояния);
		Если ОписаниеОшибки = Ложь Тогда
			Если ЗначениеЗаполнено(Данные) Тогда
				ОписаниеОшибки = НСтр("ru = 'Ошибка сервиса';
										|en = 'Service error'");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ОписаниеОшибки = Истина Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Отказ = Истина;
		ТекстОшибкиСервиса = "";
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Если Данные.Свойство("message") Тогда
				ТекстОшибкиСервиса = Данные.message;
			ИначеЕсли Данные.Свойство("error_description") Тогда
				ТекстОшибкиСервиса = Данные.error_description;
			КонецЕсли;
		КонецЕсли;
		
		ПодробныйТекстОшибки = ОписаниеОшибки
			+ ?(КодСостояния > 200, Символы.ПС + НСтр("ru = 'Код состояния:';
														|en = 'State code:'") + " " + КодСостояния, "")
			+ Символы.ПС + ПараметрыКоманды.Адрес
			+ ?(ТекстОшибкиСервиса = "", "", Символы.ПС + ТекстОшибкиСервиса);
		
		Если Не (ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках")
			И ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина) Тогда
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
				ПодробныйТекстОшибки, ОписаниеОшибки, "БизнесСеть");
		КонецЕсли;
			
		Результат = ОписаниеОшибки;
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыКоманды.ОбработкаРезультата) Тогда
			
			Если Не ЗначениеЗаполнено(Данные) Тогда
				Результат = Неопределено;
				Отказ = Истина;
			Иначе
				
				// Метод конвертации данных будет переработан в отдельный рекурсивный метод.
				Если ТипЗнч(ПараметрыКоманды.ОбработкаРезультата) = Тип("Структура")
					И ТипЗнч(Данные) = Тип("Структура") Тогда
					
					// Ожидается, что возвращается структура, которую необходимо привести к определенному составу.
					НовыеДанные = Новый Структура;
					Для каждого ЭлементСтруктуры Из ПараметрыКоманды.ОбработкаРезультата Цикл
						Если Данные.Свойство(ЭлементСтруктуры.Значение) Тогда
							НовыеДанные.Вставить(ЭлементСтруктуры.Ключ, Данные[ЭлементСтруктуры.Значение]);
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли ТипЗнч(ПараметрыКоманды.ОбработкаРезультата) = Тип("ТаблицаЗначений")
					И ТипЗнч(Данные) = Тип("Массив") Тогда
					
					// Ожидается таблица значений.
					НовыеДанные = ПараметрыКоманды.ОбработкаРезультата.Скопировать();
					Для каждого ЗначениеМассива Из Данные Цикл
						НоваяСтрока = НовыеДанные.Добавить();
						Для каждого КолонкаТаблицы Из НовыеДанные.Колонки Цикл
							Если ЗначениеМассива.Свойство(КолонкаТаблицы.Заголовок) Тогда
								НоваяСтрока[КолонкаТаблицы.Имя] = ЗначениеМассива[КолонкаТаблицы.Заголовок];
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				ИначеЕсли ТипЗнч(ПараметрыКоманды.ОбработкаРезультата) = Тип("Массив")
					И ПараметрыКоманды.ОбработкаРезультата.Количество() = 1
					И ТипЗнч(Данные) = Тип("Массив") Тогда
					
					// В первой строке содержится структура массива.
					СоставСвойств = ПараметрыКоманды.ОбработкаРезультата[0];
					НовыеДанные = Новый Массив;
					Для каждого ЗначениеМассива Из Данные Цикл
						НовыйЭлемент = Новый Структура;
						Для каждого ЭлементСтруктуры Из СоставСвойств Цикл
							Если ЗначениеМассива.Свойство(ЭлементСтруктуры.Значение) Тогда
								НовыйЭлемент.Вставить(ЭлементСтруктуры.Ключ, ЗначениеМассива[ЭлементСтруктуры.Значение]);
							КонецЕсли;
						КонецЦикла;
						НовыеДанные.Добавить(НовыйЭлемент);
					КонецЦикла;
					
				КонецЕсли;
				
				Результат = НовыеДанные;
				
			КонецЕсли;
			
		Иначе
			Результат = Данные;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ДобавитьРазрешенияВнешнихРесурсов(ИмяСервиса, ЗапросыРазрешений)
	
	ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения(ИмяСервиса);
	
	Протокол = ?(ПараметрыСоединения.ЗащищенноеСоединение <> Неопределено, "HTTPS", "HTTP");
	Адрес    = ПараметрыСоединения.Сервер;
	Порт     = ПараметрыСоединения.Порт;
	
	Если ИмяСервиса = "БизнесСеть" Тогда
		Описание = НСтр("ru = 'Обмен документами без электронной подписи в сервисе 1С:Бизнес-сеть.';
						|en = 'Exchange documents without digital signature in 1C:Business Network service.'");
	Иначе
		Описание = НСтр("ru = 'Рубрикатор номенклатуры в сервисе 1С:Бизнес-сеть.';
						|en = 'Classification list of products in 1C:Business Network service.'");
	КонецЕсли;
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.РегистрыСведений.ОрганизацииБизнесСеть.ПолноеИмя());
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ВладелецРазрешения, Истина);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);

КонецПроцедуры

Процедура ДобавитьПоляТаблицыПоКоллекции(КоллекцияДляОбхода, КоллекцияДляДобавления, ЭлементИсключения)
	
	Для каждого ЭлементКоллекции Из КоллекцияДляОбхода Цикл
		
		Если ЭлементКоллекции = ЭлементИсключения Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ГруппаФормы") Тогда
			ДобавитьПоляТаблицыПоКоллекции(ЭлементКоллекции.ПодчиненныеЭлементы, КоллекцияДляДобавления, ЭлементИсключения);
		КонецЕсли;
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ПолеФормы") Тогда
			ПолеЭлемента = КоллекцияДляДобавления.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготовка значения идентификатора сервиса.
//
// Параметры:
//   Значение - Строка - ИНН, КПП юридического лица в сервисе,, где "0" - пустое значение.
//
// Возвращаемое значение:
//   Строка - значение идентификатора сервиса.
//
Функция ЗначениеИдентификатора(Знач Значение) Экспорт
	
	Результат = Строка(Значение);
	Если Результат = "0" Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#КонецОбласти
