
#Область ПрограммныйИнтерфейс

// Выполняет рассчет.
//
Процедура ВыполнитьРассчет() Экспорт
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыКонтроля = CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПараметрыКонтроляЗаполненностиРеквизитов();
	Если ПараметрыКонтроля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Контроль реквизитов
	Для каждого КлючЗначение Из ПараметрыКонтроля.ПараметрыКонтроляРеквизитов Цикл
		ВыполнитьРассчетЗаполненостиРеквизитовОбъекта(КлючЗначение);           
		
	КонецЦикла;
	
	// Контроль реквизитов процессов
	Для каждого КлючЗначение Из ПараметрыКонтроля.ПараметрыКонтроляПроцесса Цикл
		ВыполнитьРассчетЗаполненостиРеквизитовПроцессаОбъекта(КлючЗначение);           
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

// Выполняет рассчет заполнености реквизитов объекта.
//
// Параметры:
//  КлючЗначение - КлючИЗначение - ключ и значение.
//  ОбъектСсылка - Ссылка - Ссылка на объект.
//
Процедура ВыполнитьРассчетЗаполненостиРеквизитовОбъекта(КлючЗначение, ОбъектСсылка = Неопределено) Экспорт

	ДанныеРасчета = ПолучитьДанныеРассчетаЗаполнености(КлючЗначение, ОбъектСсылка);	
	Для каждого ОписаниеОбъектаРассчета Из ДанныеРасчета Цикл
		// Запись в регистр
		МенеджерЗаполненности = РегистрыСведений.CRM_ЗаполненностьРеквизитовОбъектов.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаполненности, ОписаниеОбъектаРассчета.Значение);
		МенеджерЗаполненности.Объект = ОписаниеОбъектаРассчета.Ключ;
		
		МенеджерЗаполненности.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьРассчетЗаполнености()

// Выполняет рассчет заполнености реквизитов процесса объекта.
//
// Параметры:
//  КлючЗначение - КлючИЗначение - ключ и значение.
//  ОбъектСсылка - Ссылка - Ссылка на объект.
//
Процедура ВыполнитьРассчетЗаполненостиРеквизитовПроцессаОбъекта(КлючЗначение, ОбъектСсылка = Неопределено) Экспорт

	ДанныеРасчета = ПолучитьДанныеРассчетаЗаполнености(КлючЗначение, ОбъектСсылка);	
	Для каждого ОписаниеОбъектаРассчета Из ДанныеРасчета Цикл
		// Запись в регистр
		МенеджерЗаполненности = РегистрыСведений.CRM_ЗаполненностьРеквизитовПроцессовОбъектов.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаполненности, ОписаниеОбъектаРассчета.Значение);
		МенеджерЗаполненности.Объект = ОписаниеОбъектаРассчета.Ключ;
		
		МенеджерЗаполненности.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьРассчетЗаполнености()

// Получает данные рассчета заполнености.
//
// Параметры:
//  КлючЗначение - КлючИЗначение - ключ и значение.
//  ОбъектСсылка - Ссылка - Ссылка на объект.
// 
// Возвращаемое значение:
//  Соответствие - данные рассчета заполнености.
//
Функция ПолучитьДанныеРассчетаЗаполнености(КлючЗначение, ОбъектСсылка = Неопределено) Экспорт

	СоответствиеОбъектов = Новый Соответствие;
	МетаданныеОбъекта    = Метаданные.НайтиПоПолномуИмени(КлючЗначение.Ключ);
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru='Рассчет заполненности реквизитов объектов.';en='Calculate the completeness of the details of objects.'");
	ПараметрыЖурнала.Метаданные    = МетаданныеОбъекта;
	Если МетаданныеОбъекта = Неопределено Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, , ,
			НСтр("ru='Ошибка рассчета заполненности объекта метаданных %1';en=""Failed to calculate the metadata object's fullness%1"""), , 
			"'"+ КлючЗначение.Ключ +"'"
		);
		
		Возврат СоответствиеОбъектов;
		
	КонецЕсли;
	
	// Общие параметры
	ПараметрыКонтроляОбъекта = КлючЗначение.Значение;
	
	ВсегоРеквизитов = 0;
	
	ЗначенияОбщие		   = Новый Структура;
	ЗначенияСвойств		   = Новый Структура;
	ЗначенияКИ      	   = Новый Структура;
	ЗначенияКлассификаторы = Новый Структура;
	ЗначенияВидыФайлов     = Новый Структура;	
	
	СхемаЗапроса = Новый СхемаЗапроса;		
	
	#Область ФормированиеВременныхТаблиц
		
	// Дополнительные реквизиты
	Если ПараметрыКонтроляОбъекта.Свойство("ДополнительныйРеквизитОбъекта") Тогда
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
		ЗапросСхемы.ТаблицаДляПомещения = "ДополнительныйРеквизитОбъекта";
		
		ОператорыЗапроса = ЗапросСхемы.Операторы[0];
		
		Источник = ОператорыЗапроса.Источники.Добавить(КлючЗначение.Ключ + ".ДополнительныеРеквизиты", "ДополнительныеРеквизитыОбъекта");
		
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ДополнительныеРеквизитыОбъекта.Ссылка");
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ДополнительныеРеквизитыОбъекта.Свойство");
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ДополнительныеРеквизитыОбъекта.Значение");
		
		ЗапросСхемы.Колонки[0].Псевдоним = "Объект";
				
		ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[0]);
		ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[1]);		
		
		ОператорыЗапроса.Отбор.Добавить("ДополнительныеРеквизитыОбъекта.Свойство В (&ДополнительныйРеквизитОбъекта)");
		ЗначенияОбщие.Вставить("ДополнительныйРеквизитОбъекта", ПараметрыКонтроляОбъекта.ДополнительныйРеквизитОбъекта);
		
	КонецЕсли;
	
	// Виды контактной информации
	Сч = 1;
	Если ПараметрыКонтроляОбъекта.Свойство("ВидКонтактнойИнформацииОбъекта") Тогда
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
		ЗапросСхемы.ТаблицаДляПомещения = "ВидКонтактнойИнформацииОбъекта";
		
		ОператорыЗапроса = ЗапросСхемы.Операторы[0];
		
		Источник = ОператорыЗапроса.Источники.Добавить(КлючЗначение.Ключ + ".КонтактнаяИнформация", "КонтактнаяИнформацияОбъекта");
		
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("КонтактнаяИнформацияОбъекта.Ссылка");
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("КонтактнаяИнформацияОбъекта.Вид");
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("КонтактнаяИнформацияОбъекта.Представление");
		
		ЗапросСхемы.Колонки[0].Псевдоним = "Объект";
				
		ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[0]);
		ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[1]);		
		
		ОператорыЗапроса.Отбор.Добавить("КонтактнаяИнформацияОбъекта.Вид В (&ВидКонтактнойИнформацииОбъекта)");
		ЗначенияОбщие.Вставить("ВидКонтактнойИнформацииОбъекта", ПараметрыКонтроляОбъекта.ВидКонтактнойИнформацииОбъекта);
		
	КонецЕсли;
	
	// Классификаторы
	Если ПараметрыКонтроляОбъекта.Свойство("КлассификаторОбъекта") Тогда
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
		ЗапросСхемы.ТаблицаДляПомещения = "КлассификаторОбъекта";
		
		ОператорыЗапроса = ЗапросСхемы.Операторы[0];
		
		Источник = ОператорыЗапроса.Источники.Добавить("РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов", "ОбъектыЗначенийКлассификаторов");
		
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ОбъектыЗначенийКлассификаторов.Объект");
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец");
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора)");
		
		ЗапросСхемы.Колонки[0].Псевдоним = "Объект";
		ЗапросСхемы.Колонки[1].Псевдоним = "Классификатор";
		ЗапросСхемы.Колонки[2].Псевдоним = "ЗначенийКлассификатора";
		
		ОператорыЗапроса.Группировка.Добавить("ОбъектыЗначенийКлассификаторов.Объект");
		ОператорыЗапроса.Группировка.Добавить("ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец");
		
		ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[0]);
		ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[1]);		
		
	КонецЕсли;
	
	// Виды присоединенных файлов
	Если ПараметрыКонтроляОбъекта.Свойство("ВидыПрисоединенныхФайловОбъекта") Тогда
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
		ЗапросСхемы.ТаблицаДляПомещения = "ВидыПрисоединенныхФайловОбъекта";
		
		ОператорыЗапроса = ЗапросСхемы.Операторы[0];
		
		Источник = ОператорыЗапроса.Источники.Добавить("РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам", "ПрисоедниненныеФайлыОбъектовПоВидам");
		
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл.ВладелецФайла");
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла");
		ОператорыЗапроса.ВыбираемыеПоля.Добавить("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл)");
		
		ЗапросСхемы.Колонки[0].Псевдоним = "Объект";
		ЗапросСхемы.Колонки[1].Псевдоним = "ВидФайла";
		ЗапросСхемы.Колонки[2].Псевдоним = "ПрисоединенныхФайлов";
		
		ОператорыЗапроса.Группировка.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл.ВладелецФайла");
		ОператорыЗапроса.Группировка.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла");
		
		ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[0]);
		ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[1]);		
		
		ОператорыЗапроса.Отбор.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла В (&ВидыПрисоединенныхФайловОбъекта)");
		ЗначенияОбщие.Вставить("ВидыПрисоединенныхФайловОбъекта", ПараметрыКонтроляОбъекта.ВидыПрисоединенныхФайловОбъекта);
		
	КонецЕсли;		
	
	#КонецОбласти
	
	#Область ФормированиеДанныхВыборки
	
	ЗапросСхемы 	 = СхемаЗапроса.ПакетЗапросов.Добавить();
	ОператорыЗапроса = ЗапросСхемы.Операторы[0];
	
	Источник = ОператорыЗапроса.Источники.Добавить(КлючЗначение.Ключ, "ТаблицаОбъектаКонтроля");
	
	// Поле ссылки
	ОператорыЗапроса.ВыбираемыеПоля.Добавить("ТаблицаОбъектаКонтроля.Ссылка");
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОператорыЗапроса.Отбор.Добавить("ТаблицаОбъектаКонтроля.Ссылка = &Ссылка");
		ЗначенияОбщие.Вставить("Ссылка", ОбъектСсылка);
	      
	КонецЕсли;
	
	// Проверка иерархиии
	Если МетаданныеОбъекта.Иерархический
	  И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		ОператорыЗапроса.Отбор.Добавить("НЕ ТаблицаОбъектаКонтроля.ЭтоГруппа");		
		
	КонецЕсли;
	
	// Реквизиты
	Если ПараметрыКонтроляОбъекта.Свойство("РеквизитОбъекта") Тогда
		ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.РеквизитОбъекта.Количество();
		Для каждого РеквизитОбъекта Из ПараметрыКонтроляОбъекта.РеквизитОбъекта Цикл
			ОператорыЗапроса.ВыбираемыеПоля.Добавить("ТаблицаОбъектаКонтроля." + РеквизитОбъекта);
			
		КонецЦикла;
					
	КонецЕсли;
	
	// Табличные части
	Если ПараметрыКонтроляОбъекта.Свойство("ТабличнаяЧастьОбъекта") Тогда
		ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.ТабличнаяЧастьОбъекта.Количество();
		Для каждого ТабличнаяЧастьОбъекта Из ПараметрыКонтроляОбъекта.ТабличнаяЧастьОбъекта Цикл
			ОператорыЗапроса.ВыбираемыеПоля.Добавить("ТаблицаОбъектаКонтроля." + ТабличнаяЧастьОбъекта);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Дополнительные реквизиты
	Сч = 1;
	Если ПараметрыКонтроляОбъекта.Свойство("ДополнительныйРеквизитОбъекта") Тогда
		ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.ДополнительныйРеквизитОбъекта.Количество();
		Для каждого ДополнительныйРеквизитОбъекта Из ПараметрыКонтроляОбъекта.ДополнительныйРеквизитОбъекта Цикл
			ПсевдонимТаблицы = "ДополнительныйРеквизитОбъекта" + Формат(Сч, "ЧГ=");
			ИсточникДополнительныеРеквизиты = ОператорыЗапроса.Источники.Добавить("ДополнительныйРеквизитОбъекта", ПсевдонимТаблицы);
			
			ИмяПараметра = "Свойство" + Формат(Сч, "ЧГ=");
			ЗначенияСвойств.Вставить(ИмяПараметра, ДополнительныйРеквизитОбъекта);
			
			ИсточникДополнительныеРеквизиты.Соединения.Очистить();
			ИсточникДополнительныеРеквизиты.Соединения.Добавить(Источник, "ТаблицаОбъектаКонтроля.Ссылка = " + ПсевдонимТаблицы + ".Объект");
			ИсточникДополнительныеРеквизиты.Соединения.Добавить(Источник, "&" + ИмяПараметра + " = " + ПсевдонимТаблицы + ".Свойство");
			
			Для каждого Соединение Из ИсточникДополнительныеРеквизиты.Соединения Цикл
				Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
			
			КонецЦикла;
			
			ПолеВыражение = ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".Значение");
			ПолеВыражениеИндекс = ОператорыЗапроса.ВыбираемыеПоля.Индекс(ПолеВыражение);
			
			ЗапросСхемы.Колонки[ПолеВыражениеИндекс].Псевдоним = ИмяПараметра;
			
			Сч = Сч + 1;
			
		КонецЦикла;			
		
	КонецЕсли;
	
	// Виды контактной информации
	Сч = 1;
	Если ПараметрыКонтроляОбъекта.Свойство("ВидКонтактнойИнформацииОбъекта") Тогда
		ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.ВидКонтактнойИнформацииОбъекта.Количество();
		Для каждого ВидКонтактнойИнформацииОбъекта Из ПараметрыКонтроляОбъекта.ВидКонтактнойИнформацииОбъекта Цикл
			ПсевдонимТаблицы = "ВидКонтактнойИнформацииОбъекта" + Формат(Сч, "ЧГ=");
			ИсточникВидыКонтактнойИнформации = ОператорыЗапроса.Источники.Добавить("ВидКонтактнойИнформацииОбъекта", ПсевдонимТаблицы);
			
			ИмяПараметра = "Вид" + Формат(Сч, "ЧГ=");
			ЗначенияКИ.Вставить(ИмяПараметра, ВидКонтактнойИнформацииОбъекта);
			
			ИсточникВидыКонтактнойИнформации.Соединения.Очистить();
			ИсточникВидыКонтактнойИнформации.Соединения.Добавить(Источник, "ТаблицаОбъектаКонтроля.Ссылка = " + ПсевдонимТаблицы + ".Объект");
			ИсточникВидыКонтактнойИнформации.Соединения.Добавить(Источник, "&" + ИмяПараметра + " = " + ПсевдонимТаблицы + ".Вид");
			
			Для каждого Соединение Из ИсточникВидыКонтактнойИнформации.Соединения Цикл
				Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
			
			КонецЦикла;
			
			ПолеВыражение = ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".Представление");
			ПолеВыражениеИндекс = ОператорыЗапроса.ВыбираемыеПоля.Индекс(ПолеВыражение);
			
			ЗапросСхемы.Колонки[ПолеВыражениеИндекс].Псевдоним = ИмяПараметра;
			
			Сч = Сч + 1;
			
		КонецЦикла;			
		
	КонецЕсли;
		
	// Классификаторы
	Сч = 1;
	Если ПараметрыКонтроляОбъекта.Свойство("КлассификаторОбъекта") Тогда
		ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.КлассификаторОбъекта.Количество();  
		Для каждого КлассификаторОбъекта Из ПараметрыКонтроляОбъекта.КлассификаторОбъекта Цикл
			ПсевдонимТаблицы = "КлассификаторОбъекта" + Формат(Сч, "ЧГ=");
			ИсточникКлассификаторы = ОператорыЗапроса.Источники.Добавить("КлассификаторОбъекта", ПсевдонимТаблицы);
			
			ИмяПараметра = "Классификатор" + Формат(Сч, "ЧГ=");
			ЗначенияКлассификаторы.Вставить(ИмяПараметра, КлассификаторОбъекта);
			
			ИсточникКлассификаторы.Соединения.Очистить();
			ИсточникКлассификаторы.Соединения.Добавить(Источник, "ТаблицаОбъектаКонтроля.Ссылка = " + ПсевдонимТаблицы + ".Объект");
			ИсточникКлассификаторы.Соединения.Добавить(Источник, "&" + ИмяПараметра + " = " + ПсевдонимТаблицы + ".Классификатор");
			
			Для каждого Соединение Из ИсточникКлассификаторы.Соединения Цикл
				Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
			
			КонецЦикла;
			
			ПолеВыражение = ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".ЗначенийКлассификатора");
			ПолеВыражениеИндекс = ОператорыЗапроса.ВыбираемыеПоля.Индекс(ПолеВыражение);
			
			ЗапросСхемы.Колонки[ПолеВыражениеИндекс].Псевдоним = ИмяПараметра;
			
			Сч = Сч + 1;
			
		КонецЦикла;			
		
	КонецЕсли;
	
	// Виды присоединенных файлов
	Сч = 1;
	Если ПараметрыКонтроляОбъекта.Свойство("ВидыПрисоединенныхФайловОбъекта") Тогда
		ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.ВидыПрисоединенныхФайловОбъекта.Количество();
		Для каждого ВидыПрисоединенныхФайловОбъекта Из ПараметрыКонтроляОбъекта.ВидыПрисоединенныхФайловОбъекта Цикл
			ПсевдонимТаблицы = "ВидыПрисоединенныхФайловОбъекта" + Формат(Сч, "ЧГ=");
			ИсточникВидыПрисоединенныхФайлов = ОператорыЗапроса.Источники.Добавить("ВидыПрисоединенныхФайловОбъекта", ПсевдонимТаблицы);
			
			ИмяПараметра = "ВидПрисоединенныхФайлов" + Формат(Сч, "ЧГ=");
			ЗначенияВидыФайлов.Вставить(ИмяПараметра, ВидыПрисоединенныхФайловОбъекта);
			
			ИсточникВидыПрисоединенныхФайлов.Соединения.Очистить();
			ИсточникВидыПрисоединенныхФайлов.Соединения.Добавить(Источник, "ТаблицаОбъектаКонтроля.Ссылка = " + ПсевдонимТаблицы + ".Объект");
			ИсточникВидыПрисоединенныхФайлов.Соединения.Добавить(Источник, "&" + ИмяПараметра + " = " + ПсевдонимТаблицы + ".ВидФайла");
			
			Для каждого Соединение Из ИсточникВидыПрисоединенныхФайлов.Соединения Цикл
				Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
			
			КонецЦикла;
			
			ПолеВыражение = ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".ПрисоединенныхФайлов");
			ПолеВыражениеИндекс = ОператорыЗапроса.ВыбираемыеПоля.Индекс(ПолеВыражение);
			
			ЗапросСхемы.Колонки[ПолеВыражениеИндекс].Псевдоним = ИмяПараметра;
			
			Сч = Сч + 1;
			
		КонецЦикла;	
		
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для каждого КлючЗначениеПараметра Из ЗначенияОбщие Цикл
		Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	КонецЦикла;
	
	Для каждого КлючЗначениеПараметра Из ЗначенияСвойств Цикл
		Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	КонецЦикла;
	
	Для каждого КлючЗначениеПараметра Из ЗначенияКИ Цикл
		Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	КонецЦикла;
	
	Для каждого КлючЗначениеПараметра Из ЗначенияКлассификаторы Цикл
		Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	КонецЦикла;
	
	Для каждого КлючЗначениеПараметра Из ЗначенияВидыФайлов Цикл
		Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ОбработкаДанныхВыборки
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Параметры
		ЗаполненоРеквизитов = 0;
		
		// Реквизиты
		Если ПараметрыКонтроляОбъекта.Свойство("РеквизитОбъекта") Тогда
			Для каждого РеквизитОбъекта Из ПараметрыКонтроляОбъекта.РеквизитОбъекта Цикл
				Если ЗначениеЗаполнено(Выборка[РеквизитОбъекта]) Тогда
					ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
				
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;		

		// Табличные части
		Если ПараметрыКонтроляОбъекта.Свойство("ТабличнаяЧастьОбъекта") Тогда
			Для каждого ТабличнаяЧастьОбъекта Из ПараметрыКонтроляОбъекта.ТабличнаяЧастьОбъекта Цикл
				Если Не Выборка[ТабличнаяЧастьОбъекта].Пустой() Тогда
					ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
				
				КонецЕсли;
				
			КонецЦикла;	
			
			
		КонецЕсли;		

		// Дополнительные реквизиты
		Если ПараметрыКонтроляОбъекта.Свойство("ДополнительныйРеквизитОбъекта") Тогда
			Для каждого КлючЗначение Из ЗначенияСвойств Цикл
				Если ЗначениеЗаполнено(Выборка[КлючЗначение.Ключ]) Тогда
					ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
				
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
		
		// Виды контактной информации
		Если ПараметрыКонтроляОбъекта.Свойство("ВидКонтактнойИнформацииОбъекта") Тогда
			Для каждого КлючЗначение Из ЗначенияКИ Цикл
				Если ЗначениеЗаполнено(Выборка[КлючЗначение.Ключ]) Тогда
					ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
				
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
		
		// Классификаторы
		Если ПараметрыКонтроляОбъекта.Свойство("КлассификаторОбъекта") Тогда
			Для каждого КлючЗначение Из ЗначенияКлассификаторы Цикл
				Если ЗначениеЗаполнено(Выборка[КлючЗначение.Ключ]) Тогда
					ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
				
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Виды присоединенных файлов
		Если ПараметрыКонтроляОбъекта.Свойство("ВидыПрисоединенныхФайловОбъекта") Тогда
			Для каждого КлючЗначение Из ЗначенияВидыФайлов Цикл
				Если ЗначениеЗаполнено(Выборка[КлючЗначение.Ключ]) Тогда
					ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
				
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;		
		
		ПроцентЗаполненностиОбщий = 100 * ЗаполненоРеквизитов / ВсегоРеквизитов;
		СоответствиеОбъектов.Вставить(Выборка.Ссылка,
			Новый Структура("ВсегоРеквизитов, ЗаполненоРеквизитов, ПроцентЗаполненностиОбщий", ВсегоРеквизитов, ЗаполненоРеквизитов, ПроцентЗаполненностиОбщий)
		);
		
	КонецЦикла;
	
	#КонецОбласти
	
	Возврат СоответствиеОбъектов;
	
КонецФункции // ВыполнитьРассчетЗаполнености()

// Записывает информацию в журнал.
//
// Параметры:
//  ПараметрыЖурнала		 - Структура - Параметры журнала.
//  УровеньЖурнала			 - УровеньЖурналаРегистрации - Уровень журнала регистрации.
//  ИмяСобытия				 - Строка - Имя события.
//  КомментарийСПараметрами	 - Строка - Комментарий с параметрами.
//  ИнформацияОбОшибке		 - ИнформацияОбОшибке - Информация об ошибке.
//  Параметр1				 - Строка - первый параметр.
//  Параметр2				 - Строка - второй параметр. 
//  Параметр3				 - Строка - третий параметр.
//  Параметр4				 - Строка - четвертый параметр.
//
Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала = Неопределено, ИмяСобытия = "", 
		Знач КомментарийСПараметрами = "", ИнформацияОбОшибке = Неопределено, 
		Параметр1 = Неопределено, 
		Параметр2 = Неопределено, 
		Параметр3 = Неопределено, 
		Параметр4 = Неопределено
	) Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	// Комментарий для журнала регистрации и пользователя.
	Если Параметр1 <> Неопределено Тогда
		КомментарийСПараметрами = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийСПараметрами, Параметр1, Параметр2, Параметр3, Параметр4
		);
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТестСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТестСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТестСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(
		ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", ". "+ ИмяСобытия), 
		УровеньЖурнала, 
		ПараметрыЖурнала.Метаданные, 
		ПараметрыЖурнала.Данные, 
		КомментарийСПараметрами
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТестСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru='Подробности см. в журнале регистрации.';en='Particulars of logging see in log.'")
		Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру заполнености объекта.
//
// Параметры:
//  ОбъектСсылка - Ссылка - Ссылка на объект.
// 
// Возвращаемое значение:
//  Структура - структура заполнености объекта.
//
Функция СтруктураЗаполненостиОбъекта(ОбъектСсылка) Экспорт
	
	Результат = Новый Структура("ПроцентЗаполненностиОбщий, Картинка", 0, БиблиотекаКартинок.Пустая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий,
		|	ВЫБОР
		|		КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 25
		|			ТОГДА ""вогПроцентВыполненияЗадачи_0""
		|		КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 50
		|			ТОГДА ""вогПроцентВыполненияЗадачи_25""
		|		КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 75
		|			ТОГДА ""вогПроцентВыполненияЗадачи_50""
		|		КОГДА ЗаполненностьРеквизитовОбъектов.ПроцентЗаполненностиОбщий < 90
		|			ТОГДА ""вогПроцентВыполненияЗадачи_75""
		|		ИНАЧЕ ""вогПроцентВыполненияЗадачи_100""
		|	КОНЕЦ КАК ИмяКартинки
		|ИЗ
		|	РегистрСведений.CRM_ЗаполненностьРеквизитовОбъектов КАК ЗаполненностьРеквизитовОбъектов
		|ГДЕ
		|	ЗаполненностьРеквизитовОбъектов.Объект = &ОбъектСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ПроцентЗаполненностиОбщий = Выборка.ПроцентЗаполненностиОбщий;		
		Результат.Картинка = БиблиотекаКартинок[Выборка.ИмяКартинки];
	
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции // СтруктураЗаполненостиОбъекта()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область События

Процедура РассчетЗаполненностиРеквизитовОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() И РольДоступна("АдминистраторСистемы") Тогда Возврат КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыКонтроля = CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПараметрыКонтроляЗаполненностиРеквизитов();
	Если ПараметрыКонтроля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = Источник.Метаданные().ПолноеИмя();
	
	// Контроль реквизитов
	ПараметрыКонтроляОбъекта = ПараметрыКонтроля.ПараметрыКонтроляРеквизитов.Получить(Ключ);
	Если ПараметрыКонтроляОбъекта <> Неопределено Тогда
		Если ПараметрыКонтроляОбъекта.РассчетПриЗаписи Тогда		
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Новый Структура("Ключ, Значение", Ключ, ПараметрыКонтроляОбъекта));
			ПараметрыВыполнения.Добавить(Источник.Ссылка);
			
			НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Рассчет заполненности реквизитов объекта ""%1""';en='Calculate the completeness of the details of the object ""%1""'"), Источник);
			ФоновыеЗадания.Выполнить("CRM_КонтрольЗаполненностиРеквизитовОбъектов.ВыполнитьРассчетЗаполненостиРеквизитовОбъекта", 
				ПараметрыВыполнения,, НаименованиеЗадания);
						
		КонецЕсли;

	КонецЕсли;     
	
	// Контроль реквизитов процессов
	ПараметрыКонтроляПроцессов = ПараметрыКонтроля.ПараметрыКонтроляПроцесса.Получить(Ключ);
	Если ПараметрыКонтроляПроцессов <> Неопределено Тогда
		Если ПараметрыКонтроляПроцессов.РассчетПриЗаписи Тогда		
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(Новый Структура("Ключ, Значение", Ключ, ПараметрыКонтроляПроцессов));
			ПараметрыВыполнения.Добавить(Источник.Ссылка);
			
			НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Рассчет заполненности реквизитов процесса объекта ""%1""';en='Calculating the completeness of process details for the object ""%1""'"), Источник);
			ФоновыеЗадания.Выполнить("CRM_КонтрольЗаполненностиРеквизитовОбъектов.ВыполнитьРассчетЗаполненостиРеквизитовПроцессаОбъекта", 
				ПараметрыВыполнения,, НаименованиеЗадания);
						
		КонецЕсли;

	КонецЕсли;  	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
