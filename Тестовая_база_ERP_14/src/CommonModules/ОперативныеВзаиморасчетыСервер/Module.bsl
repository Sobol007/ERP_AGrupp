
#Область ПрограммныйИнтерфейс

// Выполняет заполнение регистров взаиморасчетов в новой архитектуре по переданной структуре параметров.
//
// Параметры:
//	- ОсновныеПараметры - Структура - Параметры пересчета, см. СтруктураПараметровЗаполненияВзаиморасчетов
//
Процедура ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры) Экспорт
	
	#Область ИнициализацияЗапросаИПеременных
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
	Организация                    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновныеПараметры.АналитикаУчетаПоПартнерам, "Организация");
	
	//Если график исполнения в договоре, то вместо графика заказа будет уточняться график договора.
	//Если пользователь каким-то образом ввел заказы с графиками по такому договору, то все этапы таких заказов будут отнесены к графику договора
	//и закрываться будут по ФИФО независимо от привязки накладных к заказам
	Если ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ГрафикИсполненияДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновныеПараметры.ОбъектРасчетов,"ГрафикИсполненияДоговора");
		ГрафикВДоговоре = ЗначениеЗаполнено(ГрафикИсполненияДоговора);
	Иначе
		ГрафикИсполненияДоговора = Неопределено;
		ГрафикВДоговоре = ЛОЖЬ;
	КонецЕсли;
	
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	ХозяйственныеОперацииНеОтгрузка = ХозяйственныеОперацииНеОтгрузка();
	
	//Хозяйственные операции для заполнения.
	ХозяйственныеОперации = Новый Соответствие; 
	ХозяйственныеОперации.Вставить("ПереносАванса", Перечисления.ХозяйственныеОперации.ПереносАванса);
	
	Если ОсновныеПараметры.ЭтоРасчетыСКлиентами Тогда
		
		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаКлиента);
		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента);
		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль);
		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток);
		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента);
		
		РасчетыПоЗаказу = ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказКлиента")
						ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
		//++ НЕ УТКА
		РасчетыПоЗаказу = РасчетыПоЗаказу ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказДавальца");
		//-- НЕ УТКА
		
		ИмяРегистраРасчетов = "РасчетыСКлиентамиПоСрокам";
		ИмяРегистраПланаОплат = "РасчетыСКлиентамиПланОплат";
		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСКлиентамиПланОтгрузок";
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	Иначе
		
		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику);
		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток);
		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль);
		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику);
		
		РасчетыПоЗаказу = ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику");
		//++ НЕ УТ
		РасчетыПоЗаказу = РасчетыПоЗаказу ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПереработчику");
		//-- НЕ УТ
		
		ИмяРегистраРасчетов = "РасчетыСПоставщикамиПоСрокам";
		ИмяРегистраПланаОплат = "РасчетыСПоставщикамиПланОплат";
		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСПоставщикамиПланПоставок";
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
	КонецЕсли;
	
	ГлобальныеПеременные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОсновныеПараметры);
	ГлобальныеПеременные.Вставить("ЕжедневнаяПереоценка", Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
	//Для уточнения плана оплат - в переменной хранится последний момент времени плана оплат,
	//чтобы при добавлении записи в план оплат можно было сразу определить есть ли планы оплат с датой больше, чем добавляемая запись.
	ГлобальныеПеременные.Вставить("МаксимальныйПорядокПланаОплат", "");
	ГлобальныеПеременные.Вставить("ГрафикВДоговоре",               ГрафикВДоговоре);
	ГлобальныеПеременные.Вставить("ПорядокПереоценки",             Новый Соответствие);
	ГлобальныеПеременные.Вставить("РазмерПорцииЗаписи",            РазмерПорцииЗаписи);
	ГлобальныеПеременные.Вставить("Организация",                   Организация);
	ГлобальныеПеременные.Вставить("ХозяйственныеОперации",         ХозяйственныеОперации);
	
	Запрос                         = Новый Запрос;
	Менеджер                       = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.УстановитьПараметр("ОбъектРасчетов",             ГлобальныеПеременные.ОбъектРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ГлобальныеПеременные.АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ВалютаРасчетов",             ГлобальныеПеременные.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами",       ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("Регистратор",                ГлобальныеПеременные.Регистратор);
	Запрос.УстановитьПараметр("Порядок",                    ГлобальныеПеременные.Порядок);
	
	Запрос.УстановитьПараметр("ВалютаУпр",                  ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегл",                 ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ПорядокЗачетаПоДатеПлатежа", Константы.ПорядокЗачетаДокументовПоДатеОперации.Получить() = 1);
	
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("ГрафикВДоговоре",            ГрафикВДоговоре);
	Запрос.УстановитьПараметр("ГрафикИсполненияДоговора",   ГрафикИсполненияДоговора);
	Запрос.УстановитьПараметр("РасчетыПоЗаказу",            РасчетыПоЗаказу);
	Запрос.УстановитьПараметр("РазмерПорцииЗаписи",         РазмерПорцииЗаписи);
	Запрос.УстановитьПараметр("ТипРасчетов",                ТипРасчетов);
	
	Запрос.УстановитьПараметр("СписокТиповЗаказов",         СписокТиповРегистраторовПланов());
	Запрос.УстановитьПараметр("НепересчитываемыеХО",        НепересчитываемыеХозяйственныеОперации());
	
	#КонецОбласти
	
	//Движения до начала пересчета и остатки.
	СформироватьВТДанныхРегистровДоНачалаРасчетов(Запрос, ГлобальныеПеременные);
	//Данные регистров с порядком меньше порядка начала расчета, далее дополняются.
	ТаблицаРасчетовПоСрокам     = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраРасчетов);
	ТаблицаПланОплат            = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОплат);
	ТаблицаПланОтгрузокПоставок = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОтгрузкиПоставки);

	//Движения после начала пересчета и остатки до начала пересчета для распределения.
	РасчетыОтгрузкиПоставки    = ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные);
	ПланыОплат                 = ПолучитьПланыОплат(Запрос, ГлобальныеПеременные);
	ПланыОтгрузокПоставок      = ПолучитьПланыОтгрузокПоставок(Запрос, ГлобальныеПеременные);
	РасчетыОплаты              = ПолучитьОплаты(Запрос, ГлобальныеПеременные);
	
	НужнаПереоценка = (ГлобальныеПеременные.ВалютаРасчетов <> ВалютаРегламентированногоУчета 
			ИЛИ ГлобальныеПеременные.ВалютаРасчетов <> ВалютаУправленческогоУчета)
		И РасчетыОтгрузкиПоставки.Количество() > 0
		И НЕ ОсновныеПараметры.НачальноеЗаполнение;
	
	Если НужнаПереоценка Тогда
		ДатаНачалаКурсов = Мин(РасчетыОтгрузкиПоставки[0].Период,
									?(РасчетыОплаты.Количество() > 0,
										РасчетыОплаты[0].Период,
										РасчетыОтгрузкиПоставки[0].Период));
		ТаблицаКурсовВалют = ПолучитьКурсыВалют(Запрос, ДатаНачалаКурсов, ГлобальныеПеременные);
		ГлобальныеПеременные.Вставить("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
		
		ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
			?(РасчетыОтгрузкиПоставки.Количество() > 0, РасчетыОтгрузкиПоставки[0].ДатаВозникновения, ТекущаяДатаСеанса()),
			ТекущаяДатаСеанса(),
			ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
	КонецЕсли;
	
	ГлобальныеПеременные.Вставить("ДокументыРасчетаКурсовыхРазниц", ДокументыРасчетаКурсовыхРазниц);
	
	//Добавляем приходные записи по плану оплаты (заказы , график договора)
	//накладные не добавляем, т.к они могут быть уменьшены авансами.
	Для Каждого Стр Из ПланыОплат Цикл
		Если НЕ Стр.ПриходДобавлен Тогда
			НовСтр = ТаблицаПланОплат.Добавить();
			НовСтр.ВидДвижения               = ВидДвиженияНакопления.Приход;
			НовСтр.ДокументРегистратор       = Стр.Регистратор;
			НовСтр.ДокументПлан              = Стр.Регистратор;
			НовСтр.ВариантОплаты             = Стр.ВариантОплаты;
			НовСтр.Период                    = Стр.Период;
			НовСтр.ДатаВозникновения         = Стр.ДатаВозникновения;
			НовСтр.ДатаПлановогоПогашения    = Стр.ДатаПлановогоПогашения;
			НовСтр.КОплате                   = Стр.КОплате;
			НовСтр.ПорядокОперации           = Стр.ПорядокОперации;
			НовСтр.ПорядокЗачета             = Стр.ПорядокОперации;
			НовСтр.ХозяйственнаяОперация     = ГлобальныеПеременные.ХозяйственныеОперации["Планирование"];
		КонецЕсли;
	КонецЦикла;
	
	//Добавляем приходные записи планов отгрузок.
	Для Каждого Стр Из ПланыОтгрузокПоставок Цикл
		Если НЕ Стр.ПриходДобавлен Тогда
			НовСтр = ТаблицаПланОтгрузокПоставок.Добавить();
			НовСтр.ВидДвижения               = ВидДвиженияНакопления.Приход;
			НовСтр.ДокументРегистратор       = Стр.Регистратор;
			НовСтр.ДокументПлан              = Стр.Регистратор;
			НовСтр.Период                    = Стр.Период;
			НовСтр.ДатаВозникновения         = Стр.ДатаВозникновения;
			НовСтр.ДатаПлановогоПогашения    = Стр.ДатаПлановогоПогашения;
			НовСтр.Сумма                     = Стр.КОтгрузкеПоставке;
			НовСтр.ПорядокЗачета             = Стр.ПорядокОперации;
			НовСтр.ПорядокОперации           = Стр.ПорядокОперации;
		КонецЕсли;
	КонецЦикла;
	
	//Для определения курса корректировки реализации в минус.
	//Ключ     - ДокументСсылка.РеализациТоваровУслуг, ДокументСсылка.АктВыполненныхРабот
	//Значение - Структура
	//     * СуммаДокумента, СуммаДокументаРегл, СуммаДокументаУпр - нужны для определения среднего курса реализации при проведении корректировок.
	ДанныеНакладных = Новый Соответствие;
	ТаблицаДанныхНакладных = ПолучитьДанныеНакладных(Запрос);
	Для Каждого Строка Из ТаблицаДанныхНакладных Цикл
		ДанныеНакладных.Вставить(Строка.Накладная,
									СтруктураСумм(Строка.Сумма,
													Строка.СуммаРегл,
													Строка.СуммаУпр));
	КонецЦикла;
	ГлобальныеПеременные.Вставить("ДанныеНакладных", ДанныеНакладных);
	
	ЗаписейОплаты           = РасчетыОплаты.Количество();
	ЗаписейОтгрузкиПоставки = РасчетыОтгрузкиПоставки.Количество();
	ЗаписейОбработать       = ЗаписейОплаты + ЗаписейОтгрузкиПоставки;
	
	Индексы = Новый Структура;
	//Индекс текущей обрабатываемой строки отгрузок.
	Индексы.Вставить("ИндексОтгрузкиПоставки", 0);
	//Индекс текущей обрабатываемой строки оплат.
	Индексы.Вставить("ИндексОплаты", 0);
	
	//Для распределения копеек в рамках документа.
	ТекущийДокументОплаты           = Неопределено;
	ТекущийДокументОтгрузкиПоставки = Неопределено;
	
	//Сколько строк отгрузки пропущено для зачета корректировкой реализации.
	ПропускОтгрузкиПоставки = 0;
	
	Пока Индексы.ИндексОплаты + Индексы.ИндексОтгрузкиПоставки < ЗаписейОбработать Цикл
		
		Если Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
			
			СтрокаОплаты           = РасчетыОплаты[Индексы.ИндексОплаты];
			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
			
			//Оплата раньше отгрузки.
			Если СтрокаОплаты.ПорядокОперации < СтрокаОтгрузкиПоставки.ПорядокОперации 
				//В пределах регистратора (при расчетах по накладным) должен происходить зачет аванса.
				ИЛИ СтрокаОплаты.Регистратор = СтрокаОтгрузкиПоставки.Регистратор Тогда
				
				//Накладную к корректировке не нашли, возвращаемся по стеку отгрузок/поставок и снимаем флаг Корректировка у оплаты.
				Если ПропускОтгрузкиПоставки <> 0 И СтрокаОплаты.ЭтоКорректировка Тогда
					ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
					ПропускОтгрузкиПоставки = 0;
					Продолжить;
				КонецЕсли;
				
				//Переброс аванса на расчетный документ - накладную.
				НеОтгрузка = ХозяйственныеОперацииНеОтгрузка.Найти(СтрокаОтгрузкиПоставки.ХозяйственнаяОперация) <> Неопределено;
				ДвойнаяЗаписьНеНужна = НеОтгрузка;
				
				//Приход предоплаты.
				Если НЕ СтрокаОплаты.ПриходДобавлен Тогда
					ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
					ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата");
				КонецЕсли;
				
				//Уменьшаем план отгрузки, если есть.
				Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
					СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
				
					Если ТекущийДокументОплаты <> СтрокаОплаты.РасчетныйДокумент Тогда
						ПредоплатаРаспределеноРегл = 0;
						ПредоплатаРаспределеноУпр  = 0;
						ТекущийДокументОплаты      = СтрокаОплаты.РасчетныйДокумент;
					КонецЕсли;
					
					Если ТекущийДокументОтгрузкиПоставки <> СтрокаОтгрузкиПоставки.РасчетныйДокумент Тогда
						ДолгРаспределеноРегл       = 0;
						ДолгРаспределеноУпр        = 0;
						ТекущийДокументОтгрузкиПоставки = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
					КонецЕсли;
					
					//Добавляем запись списания предоплаты.
					НовСтр_Предоплата_Расход                          = ТаблицаРасчетовПоСрокам.Добавить();
					НовСтр_Предоплата_Расход.ВидДвижения              = ВидДвиженияНакопления.Расход;
					НовСтр_Предоплата_Расход.ДокументРегистратор      = СтрокаОтгрузкиПоставки.Регистратор;
					НовСтр_Предоплата_Расход.ВалютаДокумента          = СтрокаОтгрузкиПоставки.ВалютаДокумента;
					НовСтр_Предоплата_Расход.Период                   = СтрокаОтгрузкиПоставки.Период;
					НовСтр_Предоплата_Расход.РасчетныйДокумент        = СтрокаОплаты.РасчетныйДокумент;
					НовСтр_Предоплата_Расход.ДатаВозникновения        = СтрокаОплаты.ДатаВозникновения;
					НовСтр_Предоплата_Расход.ДатаПлановогоПогашения   = Дата(1,1,1);
					НовСтр_Предоплата_Расход.ПорядокЗачета            = СтрокаОплаты.ПорядокЗачета;
					НовСтр_Предоплата_Расход.ПорядокОперации          = СтрокаОтгрузкиПоставки.ПорядокОперации;
					НовСтр_Предоплата_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
					НовСтр_Предоплата_Расход.СвязанныйДокумент        = СтрокаОплаты.СвязанныйДокумент;
					
					НовСтр_Предоплата_Расход.КорОбъектРасчетов        = СтрокаОплаты.КорОбъектРасчетов;
					НовСтр_Предоплата_Расход.КорАналитикаУчетаПоПартнерам = СтрокаОплаты.КорАналитикаУчетаПоПартнерам;
					
					СуммаСписания = Мин(СтрокаОплаты.Сумма, СтрокаОтгрузкиПоставки.Сумма);
					
					//Возврат аванса с ручным курсом отражаем по курсу возврата. Взаимозачет всегда по своему курсу.
					Если (СтрокаОтгрузкиПоставки.ЭтоВозвратАванса ИЛИ СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности)
						И СтрокаОтгрузкиПоставки.РучнойКурсРегл Тогда
						ПредоплатаРеглПредв = СтрокаОтгрузкиПоставки.СуммаРегл / СтрокаОтгрузкиПоставки.Сумма * СуммаСписания;
					//Остальные авансы по курсу аванса.
					Иначе
						ПредоплатаРеглПредв = СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма * СуммаСписания;
					КонецЕсли;
					
					Если (СтрокаОтгрузкиПоставки.ЭтоВозвратАванса ИЛИ СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности)
						И СтрокаОтгрузкиПоставки.РучнойКурсУпр Тогда
						ПредоплатаУпрПредв = СтрокаОтгрузкиПоставки.СуммаУпр / СтрокаОтгрузкиПоставки.Сумма * СуммаСписания;
					Иначе
						ПредоплатаУпрПредв = СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма * СуммаСписания;
					КонецЕсли;
					
					Если НеОтгрузка Тогда
						НовСтр_Предоплата_Расход.ХозяйственнаяОперация = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
					Иначе
						НовСтр_Предоплата_Расход.ХозяйственнаяОперация = ХозяйственныеОперации["ЗачетАванса"];
					КонецЕсли;
					
					НовСтр_Предоплата_Расход.Предоплата     = СуммаСписания;
					НовСтр_Предоплата_Расход.ПредоплатаРегл = Окр(ПредоплатаРеглПредв + ПредоплатаРаспределеноРегл - Окр(ПредоплатаРаспределеноРегл, 2), 2);
					НовСтр_Предоплата_Расход.ПредоплатаУпр  = Окр(ПредоплатаУпрПредв + ПредоплатаРаспределеноУпр - Окр(ПредоплатаРаспределеноУпр, 2), 2);
					
					ПредоплатаРаспределеноРегл = ПредоплатаРаспределеноРегл + ПредоплатаРеглПредв;
					ПредоплатаРаспределеноУпр  = ПредоплатаРаспределеноУпр  + ПредоплатаУпрПредв;
					
					//Уменьшаем строку оплаты на сумму зачета
					СтрокаОплаты.Сумма         = СтрокаОплаты.Сумма     - НовСтр_Предоплата_Расход.Предоплата;
					СтрокаОплаты.СуммаРегл     = СтрокаОплаты.СуммаРегл - НовСтр_Предоплата_Расход.ПредоплатаРегл; 
					СтрокаОплаты.СуммаУпр      = СтрокаОплаты.СуммаУпр  - НовСтр_Предоплата_Расход.ПредоплатаУпр;
					
					Если НЕ ДвойнаяЗаписьНеНужна Тогда
						//Отражаем приход на сумму долга по курсу предоплаты.
						НовСтр_Долг_Приход = ТаблицаРасчетовПоСрокам.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр_Долг_Приход, НовСтр_Предоплата_Расход , ,"Предоплата, ПредоплатаУпр, ПредоплатаРегл, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам");
						
						НовСтр_Долг_Приход.ВидДвижения                   = ВидДвиженияНакопления.Приход;
						НовСтр_Долг_Приход.Период                        = СтрокаОтгрузкиПоставки.Период;
						НовСтр_Долг_Приход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.Период;
						НовСтр_Долг_Приход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
						НовСтр_Долг_Приход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.Регистратор;
						НовСтр_Долг_Приход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачета;
						НовСтр_Долг_Приход.ХозяйственнаяОперация         = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
						//возврат ДС, статья должна быть
						НовСтр_Долг_Приход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
						НовСтр_Долг_Приход.СвязанныйДокумент             = Неопределено;
						
						НовСтр_Долг_Приход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
						
						Если СтрокаОтгрузкиПоставки.РучнойКурсУпр ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
							НовСтр_Долг_Приход.ДолгУпр                   = СтрокаОтгрузкиПоставки.КурсУпр * СуммаСписания;
						Иначе
							НовСтр_Долг_Приход.ДолгУпр                   = НовСтр_Предоплата_Расход.ПредоплатаУпр;
						КонецЕсли;
						Если СтрокаОтгрузкиПоставки.РучнойКурсРегл ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
							НовСтр_Долг_Приход.ДолгРегл                  = СтрокаОтгрузкиПоставки.КурсРегл * СуммаСписания;
						Иначе
							НовСтр_Долг_Приход.ДолгРегл                  = НовСтр_Предоплата_Расход.ПредоплатаРегл;
						КонецЕсли;
						
						//Переносим предоплату на расчетный документ отгрузки.
						НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр_Долг_Расход, НовСтр_Долг_Приход);
						НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
						НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ЗачетАванса"];
						НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
						НовСтр_Долг_Расход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.Регистратор;
						НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.Период;
						НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачета;
						НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОтгрузкиПоставки.Регистратор;
						НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
						
						НовСтр_Долг_Расход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
						НовСтр_Долг_Расход.ДолгУпр                       = НовСтр_Предоплата_Расход.ПредоплатаУпр;
						НовСтр_Долг_Расход.ДолгРегл                      = НовСтр_Предоплата_Расход.ПредоплатаРегл;
						
						//Если курс переноса предоплаты и прихода по долгу не совпал, делаем переоценку.
						//Возможно, когда и в оплате и в накладной ручные суммы в валюте регл. или упр. учета.
						Если НовСтр_Долг_Приход.ДолгРегл <> НовСтр_Долг_Расход.ДолгРегл 
							ИЛИ НовСтр_Долг_Приход.ДолгУпр <> НовСтр_Долг_Расход.ДолгУпр Тогда
							ДобавитьЗаписьПереоценки(ГлобальныеПеременные,
														ТаблицаРасчетовПоСрокам,
														СтрокаОтгрузкиПоставки.Период,
														НовСтр_Долг_Приход,
														"Долг",
														НовСтр_Долг_Расход.ДолгРегл - НовСтр_Долг_Приход.ДолгРегл,
														НовСтр_Долг_Расход.ДолгУпр - НовСтр_Долг_Приход.ДолгУпр);
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.РучнойКурсРегл И НЕ ДвойнаяЗаписьНеНужна Тогда
						//Остаток должен быть уменьшен ровно на ту сумму, на которую уже сформирован приход в двойной записи.
						ДолгРеглПредв = НовСтр_Долг_Приход.ДолгРегл;
					Иначе
						//Иначе пропорционально уменьшаем остаток строки.
						ДолгРеглПредв = СтрокаОтгрузкиПоставки.КурсРегл * СуммаСписания;
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.РучнойКурсУпр И НЕ ДвойнаяЗаписьНеНужна Тогда
						ДолгУпрПредв = НовСтр_Долг_Приход.ДолгУпр;
					Иначе
						ДолгУпрПредв = СтрокаОтгрузкиПоставки.КурсУпр * СуммаСписания;
					КонецЕсли;
					
					Если ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор] = Неопределено Тогда
						ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаОтгрузкиПоставки.Регистратор, СтруктураСумм());
					КонецЕсли;
					
					СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма - СуммаСписания;
					СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - Окр(ДолгРеглПредв + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
					СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр - Окр(ДолгУпрПредв + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
					
					ДолгРаспределеноРегл = ДолгРаспределеноРегл + ДолгРеглПредв;
					ДолгРаспределеноУпр  = ДолгРаспределеноУпр  + ДолгУпрПредв;
					
					ДанныеНакладной                    = ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор];
					ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента     + СуммаСписания;
					ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + НовСтр_Предоплата_Расход.ПредоплатаРегл; //-
					ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + НовСтр_Предоплата_Расход.ПредоплатаУпр;
					
					//Уменьшаем график оплаты условной задолженности на разницу суммы зачтенного аванса и строк накладной сверх заказа.
					СуммаУменьшенияГрафика = ВзаиморасчетыСервер.СписатьСумму(СуммаСписания, СтрокаОтгрузкиПоставки.КОплате);
					Если СуммаСписания > 0 И НЕ СтрокаОплаты.ГрафикСписан Тогда
						СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, СтрокаОплаты, СуммаУменьшенияГрафика, "Аванс", ПланыОплат);
					КонецЕсли;
					
					Если СтрокаОплаты.Сумма = 0 Тогда
						Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
						Если Окр(СтрокаОплаты.СуммаРегл, 2) <> 0 ИЛИ Окр(СтрокаОплаты.СуммаУпр, 2) <> 0 Тогда
							ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки.Период,
								СтрокаОплаты, "Предоплата", -Окр(СтрокаОплаты.СуммаРегл, 2), -Окр(СтрокаОплаты.СуммаУпр, 2));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
					Если СтрокаОтгрузкиПоставки.СуммаРегл <> 0 ИЛИ СтрокаОтгрузкиПоставки.СуммаУпр <> 0 Тогда
						ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
							СтрокаОтгрузкиПоставки, "Долг", -Окр(СтрокаОтгрузкиПоставки.СуммаРегл, 2), -Окр(СтрокаОтгрузкиПоставки.СуммаУпр, 2));
					КонецЕсли;
				КонецЕсли;
				
			//Отгрузка раньше оплаты.
			Иначе
				//Обычная оплата.
				Если НЕ СтрокаОплаты.ЭтоКорректировка Тогда
					
					//Добавляем строку прихода долга по отгрузке/поставке.
					Если НЕ СтрокаОтгрузкиПоставки.ПриходДобавлен И СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
						
						ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОтгрузкиПоставки);
						ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка");
						
						//Уточняется план только на сумму по заказу.
						СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма - СтрокаОтгрузкиПоставки.КОплате, "УточнениеПлана",ПланыОплат);
						//Добавляются записи плана на всю сумму включая уточнение и сверхзаказа.
						СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма, "ОтгрузкаПоставка", ПланыОплат);
					КонецЕсли;
					
					//Списываем план отгрузки если есть.
					Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
						СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
					
						//Переоценка накладной до даты оплаты.
						Если НужнаПереоценка Тогда
							ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, СтрокаОплаты);
						КонецЕсли;
						
						//Если расчетный документ накладная изменился, то сбрасываем служебные реквизиты распределения копеек.
						Если ТекущийДокументОтгрузкиПоставки <> СтрокаОтгрузкиПоставки.РасчетныйДокумент Тогда
							ДолгРаспределеноРегл       = 0;
							ДолгРаспределеноУпр        = 0;
							ТекущийДокументОтгрузкиПоставки = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
						КонецЕсли;
						
						//Добавляем строку погашения задолженности.
						НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
						НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
						НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОплаты.Регистратор;
						//Взаимозачет считаем взаимозачетом
						Если СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности Тогда
							НовСтр_Долг_Расход.ХозяйственнаяОперация         = СтрокаОплаты.ХозяйственнаяОперация;
						Иначе
							НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ПогашениеЗадолженности"];
						КонецЕсли;
						НовСтр_Долг_Расход.ВалютаДокумента               = СтрокаОплаты.ВалютаДокумента;
						НовСтр_Долг_Расход.Период                        = СтрокаОплаты.Период;
						НовСтр_Долг_Расход.ПорядокОперации               = СтрокаОплаты.ПорядокОперации;
						НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОплаты.СтатьяДвиженияДенежныхСредств;
						НовСтр_Долг_Расход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
						НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
						НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
						НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачета;
						
						СуммаСписания = Мин(СтрокаОплаты.Сумма, СтрокаОтгрузкиПоставки.Сумма);
						
						//Списываем долг по курсу аванса.
						ДолгРегл = СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма * СуммаСписания;
						ДолгУпр  = СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма * СуммаСписания;
						
						НовСтр_Долг_Расход.Долг     = СуммаСписания;
						НовСтр_Долг_Расход.ДолгРегл = Окр(ДолгРегл + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
						НовСтр_Долг_Расход.ДолгУпр  = Окр(ДолгУпр + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
						
						ДолгРаспределеноРегл = ДолгРаспределеноРегл + ДолгРегл;
						ДолгРаспределеноУпр  = ДолгРаспределеноУпр + ДолгУпр;
						
						//Уменьшаем строку оплаты на зачтенную сумму.
						СтрокаОплаты.Сумма       = СтрокаОплаты.Сумма     - СуммаСписания;
						СтрокаОплаты.СуммаРегл   = СтрокаОплаты.СуммаРегл - НовСтр_Долг_Расход.ДолгРегл;
						СтрокаОплаты.СуммаУпр    = СтрокаОплаты.СуммаУпр  - НовСтр_Долг_Расход.ДолгУпр;
						
						//Уменьшаем строку отгрузки/поставки на зачтенную сумму.
						СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма     - СуммаСписания;
						СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - НовСтр_Долг_Расход.ДолгРегл;
						СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр  - НовСтр_Долг_Расход.ДолгУпр;
						
						//Закрываем план оплаты накладной, которую зачли.
						СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, НовСтр_Долг_Расход, СуммаСписания, "ОплатаНакладной", ПланыОплат);
						
						Если СтрокаОплаты.Сумма = 0 Тогда
							Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
						Если СтрокаОтгрузкиПоставки.СуммаРегл <> 0 ИЛИ СтрокаОтгрузкиПоставки.СуммаУпр <> 0 Тогда
							ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
								СтрокаОтгрузкиПоставки, "Долг", -Окр(СтрокаОтгрузкиПоставки.СуммаРегл, 2), -Окр(СтрокаОтгрузкиПоставки.СуммаУпр, 2));
						КонецЕсли;
					КонецЕсли;
					
				//Корректировка накладной в минус.
				Иначе
					
					//Если в таблице отгрузок/поставок еще не дошли до связанного документа, пропускаем текущий.
					Если (СтрокаОплаты.СвязанныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор
						ИЛИ (СтрокаОплаты.СвязанныйДокумент = СтрокаОтгрузкиПоставки.Регистратор
								И СтрокаОтгрузкиПоставки.КОтгрузкеПоставке <> 0 
								И СтрокаОтгрузкиПоставки.Сумма = 0))
						И Индексы.ИндексОтгрузкиПоставки + 1 <= ЗаписейОтгрузкиПоставки - 1 Тогда
						
						ПропускОтгрузкиПоставки         = ПропускОтгрузкиПоставки + 1;
						Индексы.ИндексОтгрузкиПоставки  = Индексы.ИндексОтгрузкиПоставки + 1;
					
					//Если это корректировка и накладная еще не оплачена полностью, то расчетным документом должна являться накладная.
					ИначеЕсли СтрокаОплаты.СвязанныйДокумент = СтрокаОтгрузкиПоставки.Регистратор
						И СтрокаОтгрузкиПоставки.Сумма > 0 Тогда
						
						//Добавляем строку прихода по долгу для сторнируемой накладной.
						Если НЕ СтрокаОтгрузкиПоставки.ПриходДобавлен И СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
							ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка");
							//Уточняем план заказа, если есть на сумму без учета сверхзаказа.
							СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма - СтрокаОтгрузкиПоставки.КОплате, "УточнениеПлана", ПланыОплат);
							//Добавляем в планы график накладной на всю сумму.
							СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма, "ОтгрузкаПоставка", ПланыОплат);
						КонецЕсли;
						
						//Уменьшим план отгрузок и поставок, если есть.
						Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
							СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
						КонецЕсли;
						
						Если СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
						
							//Переоценка накладной до даты оплаты.
							Если НужнаПереоценка И НачалоМесяца(СтрокаОтгрузкиПоставки.ДатаВозникновения) < НачалоМесяца(СтрокаОплаты.ДатаВозникновения) Тогда
								ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, СтрокаОплаты, Ложь);
							КонецЕсли;
							
							СуммаСторно  = Мин(СтрокаОтгрузкиПоставки.Сумма, СтрокаОплаты.Сумма);
							НовСтр_Сторно = ТаблицаРасчетовПоСрокам.Добавить();
							НовСтр_Сторно.ВидДвижения = ВидДвиженияНакопления.Расход;
							
							НовСтр_Сторно.ДокументРегистратор   = СтрокаОплаты.Регистратор;
							НовСтр_Сторно.РасчетныйДокумент     = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
							НовСтр_Сторно.ХозяйственнаяОперация = СтрокаОплаты.ХозяйственнаяОперация;
							НовСтр_Сторно.ВалютаДокумента       = СтрокаОплаты.ВалютаДокумента;
							НовСтр_Сторно.СвязанныйДокумент     = СтрокаОплаты.СвязанныйДокумент;
							
							НовСтр_Сторно.Долг = СуммаСторно;
							НовСтр_Сторно.ДолгРегл = СуммаСторно * 
								(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаРегл 
									/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента);
							НовСтр_Сторно.ДолгУпр = СуммаСторно * 
								(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаУпр 
									/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента);
							
							НовСтр_Сторно.Период                   = СтрокаОплаты.Период;
							НовСтр_Сторно.ДатаПлановогоПогашения   = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
							НовСтр_Сторно.ДатаВозникновения        = СтрокаОтгрузкиПоставки.ДатаВозникновения;
							НовСтр_Сторно.ПорядокЗачета            = СтрокаОтгрузкиПоставки.ПорядокЗачета;
							НовСтр_Сторно.ПорядокОперации          = СтрокаОплаты.ПорядокОперации;
							
							//Уменьшаем строку оплаты на сумму сторно.
							СтрокаОплаты.Сумма     = СтрокаОплаты.Сумма     - НовСтр_Сторно.Долг;
							СтрокаОплаты.СуммаРегл = СтрокаОплаты.СуммаРегл - НовСтр_Сторно.ДолгРегл;
							СтрокаОплаты.СуммаУпр  = СтрокаОплаты.СуммаУпр  - НовСтр_Сторно.ДолгУпр;
							
							//Уменьшаем строку отгрузки на сумму сторно.
							СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма     - НовСтр_Сторно.Долг;
							СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - НовСтр_Сторно.ДолгРегл; 
							СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр  - НовСтр_Сторно.ДолгУпр;
							
							//Уменьшаем график оплаты накладной, если есть.
							СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, НовСтр_Сторно, СуммаСторно, "ОплатаНакладной", ПланыОплат);
							
							Если СтрокаОплаты.Сумма = 0 Тогда
								Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
							Иначе
								//Остатка для сторно по реализации больше нет, строка сторно становится обычной оплатой.
								ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
							КонецЕсли;
							
						КонецЕсли;
						
						//Если часть строк отгрузки пропущена - возвращаемся.
						Если ПропускОтгрузкиПоставки <> 0 Тогда
							Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
							ПропускОтгрузкиПоставки = 0;
						//Если отгрузка скорректировалась в 0 то идем к следующей строке.
						ИначеЕсли СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
							Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
						КонецЕсли;
						
					//Накладная уже оплачена или её нет, рассматриваем эту корректировку как обычную оплату.
					Иначе
						ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
						//Если часть строк отгрузки пропущена - возвращаемся.
						Если ПропускОтгрузкиПоставки <> 0 Тогда
							Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
							ПропускОтгрузкиПоставки = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		//Оплаты распределены, остальные отгрузки в приход.
		ИначеЕсли Индексы.ИндексОплаты = ЗаписейОплаты И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
			
			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
			
			Если НЕ СтрокаОтгрузкиПоставки.ПриходДобавлен  И СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
				
				ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОтгрузкиПоставки);
				
				Если ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор] = Неопределено Тогда
					ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаОтгрузкиПоставки.Регистратор, 
						СтруктураСумм(СтрокаОтгрузкиПоставки.Сумма, СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.СуммаУпр));
				КонецЕсли;
				
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка");
				
				СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма - СтрокаОтгрузкиПоставки.КОплате, "УточнениеПлана", ПланыОплат);
				СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма, "ОтгрузкаПоставка", ПланыОплат);
				
			КонецЕсли;
			
			Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
				СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
			КонецЕсли;
			
			Если НужнаПереоценка Тогда
				ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки);
			КонецЕсли;
			
			Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
			
		//Отгрузки распределены, остальные оплаты в приход.
		ИначеЕсли Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки = ЗаписейОтгрузкиПоставки Тогда
			
			СтрокаОплаты = РасчетыОплаты[Индексы.ИндексОплаты];
			
			ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
			
			Если НЕ СтрокаОплаты.ПриходДобавлен Тогда
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата");
			КонецЕсли;
			
			Если НЕ СтрокаОплаты.ГрафикСписан Тогда
				СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаПланОплат, СтрокаОплаты, СтрокаОплаты.Сумма, "Аванс", ПланыОплат);
			КонецЕсли;
			
			Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	#Область ФиксацияРезультатов
	
	НаборЗаписейПоСрокам = РегистрыНакопления[ИмяРегистраРасчетов].СоздатьНаборЗаписей();
	НаборЗаписейПланОплат = РегистрыНакопления[ИмяРегистраПланаОплат].СоздатьНаборЗаписей();
	НаборЗаписейПланОтгрузокПоставок = РегистрыНакопления[ИмяРегистраПланаОтгрузкиПоставки].СоздатьНаборЗаписей();
	
	Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
		НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("ПроверятьИзмененияРегистра", Истина);
		Если ОсновныеПараметры.Свойство("Регистратор") Тогда
			// При изменении проведения документа будут изменения в регистре, но по ним не следует регистрировать документ к отражению,
			//	так как он в любом случае изменит свои данные отражения при проведении (или распроведении).
			НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("НеотражаемыйДокумент", ОсновныеПараметры.Регистратор);
		КонецЕсли;
		
		ДляПроведения = Неопределено;
		СтруктураВременныеТаблицы = Неопределено;
		МенеджерВременныхТаблиц = Неопределено;
		Если ОсновныеПараметры.ДополнительныеСвойстваПроведения.Свойство("ДляПроведения", ДляПроведения) И Не ДляПроведения = Неопределено
			И ДляПроведения.Свойство("СтруктураВременныеТаблицы", СтруктураВременныеТаблицы) И Не СтруктураВременныеТаблицы = Неопределено
			И СтруктураВременныеТаблицы.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) И Не МенеджерВременныхТаблиц = Неопределено Тогда
			
			// Передадим менеджер временных таблиц в процедуру записи набора зписей по срокам.
			НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОсновныеПараметры.НачальноеЗаполнение Тогда
		
		ТаблицаРасчетовПоСрокам.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
			|РасчетныйДокумент, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ПорядокЗачета, ПорядокОперации,
			|ВалютаДокумента, СвязанныйДокумент, СтатьяДвиженияДенежныхСредств, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам",
			"Предоплата, ПредоплатаРегл, ПредоплатаУпр, Долг, ДолгРегл, ДолгУпр");
		
		ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаРасчетовПоСрокам.Индексы.Добавить("Регистратор");
		
		Если ОсновныеПараметры.Порядок <> "" Тогда
			НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("Порядок",ОсновныеПараметры.Порядок);
		КонецЕсли;
		
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
		
	КонецЕсли;
	
	ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
	ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
	ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
	ТаблицаПланОплат.Индексы.Добавить("Регистратор");
	
	ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
	
	ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
	ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
	ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
	ТаблицаПланОтгрузокПоставок.Индексы.Добавить("Регистратор");
	
	ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено И НЕ ОсновныеПараметры.НачальноеЗаполнение Тогда
		УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки);
	КонецЕсли;
	
	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
		ОсновныеПараметры.ДополнительныеСвойстваПроведения.ДляПроведения.Вставить(
			?(ГлобальныеПеременные.ЭтоРасчетыСКлиентами, "РасчетыСКлиентами", "РасчетыСПоставщиками")+"ПоСрокам",
			ТаблицаРасчетовПоСрокам);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

//Вызывает пересчет измененных расчетов по временной таблице изменений.
//
// Параметры:
//	- МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер с таблицей РасчетыСКлиентамиИзменения или РасчетыСПоставщикамиИзменения
//	- ЭтоРасчетыСКлиентами - Булево - Истина если это расчеты с клиентами.
//	- Регистратор - ДокументСсылка - Регистратор инициатор расчета.
//	- ДополнительныеСвойства - Структура - Дополнительные свойства проведения.
//
Процедура РассчитатьПоИзменениям(МенеджерВременныхТаблиц, ЭтоРасчетыСКлиентами, Регистратор, ДополнительныеСвойства = Неопределено) Экспорт
	
	ТипыПлатежныхДокументов = Новый СписокЗначений;
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(РасчетыСКлиентамиИзменения.ПорядокОперации)            КАК ПорядокОперации,
	|	МИНИМУМ(РасчетыСКлиентамиИзменения.ПорядокЗачетаПоДатеПлатежа) КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыСКлиентамиИзменения.АналитикаУчетаПоПартнерам           КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиИзменения.ОбъектРасчетов                      КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиИзменения.ВалютаРасчетов                      КАК ВалютаРасчетов,
	|	РасчетыСКлиентамиИзменения.Документ                            КАК Документ,
	|	РасчетыСКлиентамиИзменения.КорОбъектРасчетов                   КАК КорОбъектРасчетов
	|ПОМЕСТИТЬ МинимальныеПорядки
	|ИЗ РасчетыСКлиентамиИзменения КАК РасчетыСКлиентамиИзменения
	|ГДЕ
	|	РасчетыСКлиентамиИзменения.ПорядокОперации <> """"
	|	И РасчетыСКлиентамиИзменения.ПорядокЗачетаПоДатеПлатежа <> """"
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентамиИзменения.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиИзменения.ОбъектРасчетов,
	|	РасчетыСКлиентамиИзменения.ВалютаРасчетов,
	|	РасчетыСКлиентамиИзменения.Документ,
	|	РасчетыСКлиентамиИзменения.КорОбъектРасчетов
	|;
	|ВЫБРАТЬ
	|	МИНИМУМ(ВложенныйЗапрос.Порядок)          КАК Порядок,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаРасчетов            КАК ВалютаРасчетов
	|ИЗ (
	|	//Порядок зачета может быть меньше порядка оплаты только в вводе остатков.
	|	//Порядок операции для не суммовых строк не учитываем.
	|	ВЫБРАТЬ
	|		РасчетыСКлиентамиПоСрокам.ПорядокОперации КАК Порядок,
	|		Изменения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов         КАК КорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов            КАК ВалютаРасчетов
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныеПорядки КАК Изменения
	|				ПО РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыСКлиентамиПоСрокам.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыСКлиентамиПоСрокам.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыСКлиентамиПоСрокам.РасчетныйДокумент = Изменения.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСКлиентамиПланОплат.ПорядокОперации КАК Порядок,
	|		Изменения.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                   КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов                КАК КорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                   КАК ВалютаРасчетов 
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыСКлиентамиПланОплат
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныеПорядки КАК Изменения
	|				ПО РасчетыСКлиентамиПланОплат.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыСКлиентамиПланОплат.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыСКлиентамиПланОплат.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыСКлиентамиПланОплат.ДокументПлан = Изменения.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСКлиентамиПланОтгрузок.ПорядокОперации КАК Порядок,
	|		Изменения.АналитикаУчетаПоПартнерам           КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                      КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов                   КАК КорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                      КАК ВалютаРасчетов 
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыСКлиентамиПланОтгрузок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныеПорядки КАК Изменения
	|				ПО РасчетыСКлиентамиПланОтгрузок.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыСКлиентамиПланОтгрузок.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыСКлиентамиПланОтгрузок.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыСКлиентамиПланОтгрузок.ДокументПлан = Изменения.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//Порядок операции самого документа регистратора, порядок зачета не берется, т.к. может уходить в закрытые периоды (оплата долга).
	|	ВЫБРАТЬ
	|		РасчетыСКлиентамиПоСрокам.ПорядокОперации КАК Порядок,
	|		Изменения.АналитикаУчетаПоПартнерам       КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                  КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов               КАК КорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                  КАК ВалютаРасчетов
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныеПорядки КАК Изменения
	|				ПО РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыСКлиентамиПоСрокам.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыСКлиентамиПоСрокам.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыСКлиентамиПоСрокам.ДокументРегистратор = Изменения.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//Минимальные непустые порядки изменений
	|	ВЫБРАТЬ
	|		Изменения.ПорядокОперации           КАК Порядок,
	|		Изменения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов         КАК КорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов            КАК ВалютаРасчетов
	|	ИЗ
	|		МинимальныеПорядки КАК Изменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//Ищем объекты расчетов для пересчета при изменении КорОбъектаРасчетов.
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Изменения.ПорядокОперации <  Изменения.ПорядокЗачетаПоДатеПлатежа
	|				ТОГДА Изменения.ПорядокОперации
	|			ИНАЧЕ Изменения.ПорядокЗачетаПоДатеПлатежа
	|		КОНЕЦ                                    КАК Порядок,
	|		Изменения.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов              КАК КорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                 КАК ВалютаРасчетов
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныеПорядки КАК Изменения
	|				ПО РасчетыСКлиентамиПоСрокам.КорАналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыСКлиентамиПоСрокам.КорОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыСКлиентамиПоСрокам.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыСКлиентамиПоСрокам.РасчетныйДокумент = Изменения.Документ
	|					И НЕ РасчетыСКлиентамиПоСрокам.КорОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//При порядке зачета по плановой дате платежа пересчет необходимо производить с минимальной даты операции
	|	//документов, у которых плановая дата платежа больше изменяемого.
	|	ВЫБРАТЬ
	|		РасчетыСКлиентамиПоСрокам.ПорядокОперации   КАК Порядок,
	|		Изменения.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                    КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов                 КАК КорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                    КАК ВалютаРасчетов
	|	ИЗ
	|		МинимальныеПорядки КАК Изменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ 	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|				ПО РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыСКлиентамиПоСрокам.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыСКлиентамиПоСрокам.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыСКлиентамиПоСрокам.ПорядокЗачета > Изменения.ПорядокЗачетаПоДатеПлатежа
	|	ГДЕ
	|		НЕ &ПорядокЗачетаДокументовПоДатеОперации) ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаРасчетов
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ВложенныйЗапрос.КорОбъектРасчетов)
	|;
	|УНИЧТОЖИТЬ МинимальныеПорядки";
	
	Запрос.УстановитьПараметр("ПорядокЗачетаДокументовПоДатеОперации", Константы.ПорядокЗачетаДокументовПоДатеОперации.Получить() = 0);
	Запрос.УстановитьПараметр("ТипыПлатежныхДокументов", ТипыПлатежныхДокументов);
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентамиИзменения", "РасчетыСПоставщикамиИзменения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентамиПланОтгрузок", "РасчетыСПоставщикамиПланПоставок");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентами", "РасчетыСПоставщиками");
	КонецЕсли;
	
	ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаИзменений Из ТаблицаИзменений Цикл
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, СтрокаИзменений);
		ОсновныеПараметры.Порядок = Лев(СтрокаИзменений.Порядок, 8) + "000000000";
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = ЭтоРасчетыСКлиентами;
		ОсновныеПараметры.Регистратор = Регистратор;
		ОсновныеПараметры.ДополнительныеСвойстваПроведения = ДополнительныеСвойства;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

//Добавляет записи переоценки на одну дату.
//
// Параметры:
//	- МассивОрганизаций - Массив - Перечень организаций по которым необходимо выполнить переоценку.
//	- Период - Дата - Дата, на конец которой необходимо выполнить переоценку.
//
Процедура ВыполнитьПереоценкуНаДату(МассивОрганизаций, Период, ЭтоРасчетыСКлиентами = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоСрокамОстатки.Валюта                                         КАК Валюта,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения                              КАК ДатаВозникновения,
	|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|		* КурсыВалютРасчетов.Курс / КурсыВалютРасчетов.Кратность КАК ЧИСЛО(31,2))   КАК ДолгРеглОстатокРасчетный,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|		* КурсыВалютРасчетов.Курс / КурсыВалютРасчетов.Кратность
	|			/ КурсыВалютУпр.Курс * КурсыВалютУпр.Кратность КАК ЧИСЛО(31,2))         КАК ДолгУпрОстатокРасчетный,
	|	ИСТИНА                                                                          КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ ВтКРасчету
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|			&Период,
	|			АналитикаУчетаПоПартнерам.Организация В (&МассивОрганизаций)
	|				И (Валюта <> &ВалютаУправленческогоУчета ИЛИ Валюта <> &ВалютаРегламентированногоУчета)
	|		) КАК РасчетыСКлиентамиПоСрокамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУправленческогоУчета) КАК КурсыВалютУпр
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСКлиентамиПоСрокамОстатки.Валюта = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	&РасчетыСКлиентами
	|	И (РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток
	|		- ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|		* КурсыВалютРасчетов.Курс / КурсыВалютРасчетов.Кратность КАК ЧИСЛО(31,2)) >= 0.01 
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток
	|		- ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|		* КурсыВалютРасчетов.Курс / КурсыВалютРасчетов.Кратность КАК ЧИСЛО(31,2)) <= -0.01 
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток
	|		- ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|			* ЕСТЬNULL(КурсыВалютРасчетов.Курс,1) / ЕСТЬNULL(КурсыВалютРасчетов.Кратность,1)
	|				/ ЕСТЬNULL(КурсыВалютУпр.Курс,1) * ЕСТЬNULL(КурсыВалютУпр.Кратность,1) КАК ЧИСЛО(31,2)) >= 0.01
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток
	|		- ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|			* ЕСТЬNULL(КурсыВалютРасчетов.Курс,1) / ЕСТЬNULL(КурсыВалютРасчетов.Кратность,1)
	|				/ ЕСТЬNULL(КурсыВалютУпр.Курс,1) * ЕСТЬNULL(КурсыВалютУпр.Кратность,1) КАК ЧИСЛО(31,2)) <= -0.01
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаОстаток = 0
	|		И (РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток <> 0
	|			ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаУпрОстаток <> 0)
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток = 0
	|		И (РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток <> 0
	|			ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток <> 0))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоСрокам.Валюта                                         КАК Валюта,
	|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	РасчетыСПоставщикамиПоСрокам.ДатаВозникновения                              КАК ДатаВозникновения,
	|	РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	РасчетыСПоставщикамиПоСрокам.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|		* КурсыВалютРасчетов.Курс / КурсыВалютРасчетов.Кратность КАК ЧИСЛО(31,2)) КАК ДолгРеглОстатокРасчетный,
	|	РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|		* КурсыВалютРасчетов.Курс / КурсыВалютРасчетов.Кратность
	|			/ КурсыВалютУпр.Курс * КурсыВалютУпр.Кратность КАК ЧИСЛО(31,2))      КАК ДолгУпрОстатокРасчетный,
	|	ЛОЖЬ                                                                         КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|			&Период,
	|			АналитикаУчетаПоПартнерам.Организация В (&МассивОрганизаций)
	|				И (Валюта <> &ВалютаУправленческогоУчета ИЛИ Валюта <> &ВалютаРегламентированногоУчета)
	|		) КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУправленческогоУчета) КАК КурсыВалютУпр
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПоставщикамиПоСрокам.Валюта = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	&РасчетыСПоставщиками
	|	И (РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток
	|		- ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|		* КурсыВалютРасчетов.Курс / КурсыВалютРасчетов.Кратность КАК ЧИСЛО(31,2)) >= 0.01 
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток
	|		- ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|		* КурсыВалютРасчетов.Курс / КурсыВалютРасчетов.Кратность КАК ЧИСЛО(31,2)) <= -0.01 
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток
	|		- ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|			* ЕСТЬNULL(КурсыВалютРасчетов.Курс,1) / ЕСТЬNULL(КурсыВалютРасчетов.Кратность,1)
	|				/ ЕСТЬNULL(КурсыВалютУпр.Курс,1) * ЕСТЬNULL(КурсыВалютУпр.Кратность,1) КАК ЧИСЛО(31,2)) >= 0.01
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток
	|		- ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|			* ЕСТЬNULL(КурсыВалютРасчетов.Курс,1) / ЕСТЬNULL(КурсыВалютРасчетов.Кратность,1)
	|				/ ЕСТЬNULL(КурсыВалютУпр.Курс,1) * ЕСТЬNULL(КурсыВалютУпр.Кратность,1) КАК ЧИСЛО(31,2)) <= -0.01
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток = 0
	|		И (РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток <> 0
	|			ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпрОстаток <> 0)
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгОстаток = 0
	|		И (РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток <> 0
	|			ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток <> 0))
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтКРасчету.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ВтКРасчету.Валюта                                         КАК ВалютаРасчетов,
	|	ВтКРасчету.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами,
	|	Аналитика.Организация                                     КАК Организация
	|ИЗ ВтКРасчету КАК ВтКРасчету
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО ВтКРасчету.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|;
	|ВЫБРАТЬ
	|	ВтКРасчету.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами,
	|	ВтКРасчету.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ВтКРасчету.Валюта                                         КАК ВалютаРасчетов,
	|	ВтКРасчету.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	ВтКРасчету.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	ВтКРасчету.ДатаВозникновения                              КАК ДатаВозникновения,
	|	ВтКРасчету.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	ВтКРасчету.ДолгРеглОстатокРасчетный                       КАК ДолгРеглОстатокРасчетный,
	|	ВтКРасчету.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВтКРасчету.ДолгУпрОстатокРасчетный                        КАК ДолгУпрОстатокРасчетный,
	|	ВтКРасчету.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	ВтКРасчету.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	ВтКРасчету.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетыСКлиентами.ПорядокЗачета, ЕСТЬNULL(РасчетыСПоставщиками.ПорядокЗачета,""""))) КАК ПорядокЗачета,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетыСКлиентами.ВалютаДокумента, ЕСТЬNULL(РасчетыСПоставщиками.ВалютаДокумента,""""))) КАК ВалютаДокумента
	|ИЗ ВтКРасчету КАК ВтКРасчету
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
	|		ПО ВтКРасчету.ЭтоРасчетыСКлиентами
	|			И ВтКРасчету.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|			И ВтКРасчету.ОбъектРасчетов = РасчетыСКлиентами.ОбъектРасчетов
	|			И ВтКРасчету.Валюта = РасчетыСКлиентами.Валюта
	|			И ВтКРасчету.РасчетныйДокумент = РасчетыСКлиентами.РасчетныйДокумент
	|			И ВтКРасчету.ДатаПлановогоПогашения = РасчетыСКлиентами.ДатаПлановогоПогашения
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщиками
	|		ПО НЕ ВтКРасчету.ЭтоРасчетыСКлиентами
	|			И ВтКРасчету.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|			И ВтКРасчету.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов
	|			И ВтКРасчету.Валюта = РасчетыСПоставщиками.Валюта
	|			И ВтКРасчету.РасчетныйДокумент = РасчетыСПоставщиками.РасчетныйДокумент
	|			И ВтКРасчету.ДатаПлановогоПогашения = РасчетыСПоставщиками.ДатаПлановогоПогашения
	|СГРУППИРОВАТЬ ПО
	|	ВтКРасчету.ЭтоРасчетыСКлиентами,
	|	ВтКРасчету.АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов,
	|	ВтКРасчету.Валюта,
	|	ВтКРасчету.РасчетныйДокумент,
	|	ВтКРасчету.ДатаПлановогоПогашения,
	|	ВтКРасчету.ДатаВозникновения,
	|	ВтКРасчету.ПредоплатаОстаток,
	|	ВтКРасчету.ПредоплатаРеглОстаток,
	|	ВтКРасчету.ПредоплатаУпрОстаток,
	|	ВтКРасчету.ДолгРеглОстаток,
	|	ВтКРасчету.ДолгРеглОстатокРасчетный,
	|	ВтКРасчету.ДолгУпрОстаток,
	|	ВтКРасчету.ДолгУпрОстатокРасчетный";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("РасчетыСКлиентами", ЭтоРасчетыСКлиентами = Неопределено ИЛИ ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("РасчетыСПоставщиками", ЭтоРасчетыСКлиентами = Неопределено ИЛИ НЕ ЭтоРасчетыСКлиентами);
	Граница = Новый Граница(КонецДня(Период),ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Период", Граница);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОбъектыКПереоценке = РезультатыЗапроса[1].Выгрузить();
	ДетальныеЗаписи    = РезультатыЗапроса[2].Выгрузить();
	ДетальныеЗаписи.Индексы.Добавить("ЭтоРасчетыСКлиентами");
	ДетальныеЗаписи.Индексы.Добавить("АналитикаУчетаПоПартнерам");
	ДетальныеЗаписи.Индексы.Добавить("ОбъектРасчетов");
	ДетальныеЗаписи.Индексы.Добавить("ВалютаРасчетов");
	СтруктураПоиска = Новый Структура("ЭтоРасчетыСКлиентами, АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов");
	
	Порядок = Порядок(Период,"",,Тип("ДокументСсылка.РасчетКурсовыхРазниц"));
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	
	Для Каждого СтрокаПереоценки Из ОбъектыКПереоценке Цикл
		
		Если СтрокаПереоценки.ЭтоРасчетыСКлиентами Тогда
			ПереоценкаПоложительная = Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль;
			ПереоценкаОтрицательная = Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток;
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			ПереоценкаПоложительная = Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток;
			ПереоценкаОтрицательная = Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль;
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьИзмененияРегистра", Истина);
		
		ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(СтрокаПереоценки.Организация,
			Период, Период,
			СтрокаПереоценки.ЭтоРасчетыСКлиентами);
		ДокументРегистратор = ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПереоценки);
		СтрокиДетальныхЗаписей = ДетальныеЗаписи.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиДетальныхЗаписей.Количество() > 0 Тогда
			МассивСвободныхРегистраторов = СвободныеРегистраторыРасчетов(СтрокаПереоценки, НаборЗаписей.Метаданные().Имя, СтрокиДетальныхЗаписей.Количество() * 4);
			счРегистратор = 0;
			счСтрок = 0;
			
			НаборЗаписей.Отбор.Регистратор.Установить(МассивСвободныхРегистраторов[счРегистратор].Ссылка);
			НаборЗаписей.Прочитать();
			
			Для Каждого СтрокаДетальныхЗаписей Из СтрокиДетальныхЗаписей Цикл
				
				Если СтрокаДетальныхЗаписей.ДолгРеглОстаток < СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный 
					ИЛИ СтрокаДетальныхЗаписей.ДолгУпрОстаток < СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = МассивСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Приход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаПоложительная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					
					Если СтрокаДетальныхЗаписей.ДолгРеглОстаток < СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный Тогда
						НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный - СтрокаДетальныхЗаписей.ДолгРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ДолгУпрОстаток < СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
						НовСтр.ДолгУпр = СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный - СтрокаДетальныхЗаписей.ДолгУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистраторов = счРегистраторов + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(МассивСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаДетальныхЗаписей.ДолгРеглОстаток > СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный 
					ИЛИ СтрокаДетальныхЗаписей.ДолгУпрОстаток > СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = МассивСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Расход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаОтрицательная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					
					Если СтрокаДетальныхЗаписей.ДолгРеглОстаток > СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный Тогда
						НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРеглОстаток - СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ДолгУпрОстаток > СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
						НовСтр.ДолгУпр = СтрокаДетальныхЗаписей.ДолгУпрОстаток - СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистраторов = счРегистраторов + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(МассивСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаДетальныхЗаписей.ПредоплатаОстаток = 0
					И (СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток > 0
						ИЛИ СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток > 0) Тогда
					
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = МассивСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Расход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаПоложительная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					
					Если СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток > 0 Тогда
						НовСтр.ПредоплатаРегл = СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток > 0 Тогда
						НовСтр.ПредоплатаУпр = СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистраторов = счРегистраторов + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(МассивСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаДетальныхЗаписей.ПредоплатаОстаток = 0
					И (СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток < 0
						ИЛИ СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток < 0) Тогда
					
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = МассивСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = КонецДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Приход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаОтрицательная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					
					Если СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток < 0 Тогда
						НовСтр.ПредоплатаРегл = -СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток < 0 Тогда
						НовСтр.ПредоплатаУпр = -СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистраторов = счРегистраторов + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(МассивСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Возвращает строковый порядок документа по переданным параметрам.
//
// Параметры:
//	- Дата            - Дата      - Дата по которой нужно сделать строковый порядок.
//	- Номер           - Строка    - Номер документа.
//	- ВидТипДокумента - Структура - Если вид и тип документа уже определены, то они передаются в этот параметр.
//	- ТипДокумента    - Тип       - Тип ссылки документа.
//	- ВидДвижения     - Число     - 1 - Заказы, график исполнения договора.
//									2 - Накладные
//									3 - Корректировки реализации в минус
//									4 - Оплаты, возвраты
//
Функция Порядок(Дата, Номер, ВидТипДокумента = Неопределено, ТипДокумента = Неопределено, ВидДвижения = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Дата) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	ДатаСтрокой = Формат(Дата, "ДФ=yyyyMMddHHmmss");
	Если ВидТипДокумента = Неопределено Тогда
		ВидТипДокумента = ВидТипДокумента(ТипДокумента, ВидДвижения);
	КонецЕсли;
	Возврат Лев(ДатаСтрокой, 8) + ВидТипДокумента.Вид + Прав(ДатаСтрокой, 6) + ВидТипДокумента.Тип + Номер;
КонецФункции

//Возвращает структуру параметров, необходимых для заполнения регистров взаиморасчетов в новой архитектуре.
//
// Возвращаемое значение:
// 		Структура
// 			* ОбъектРасчетов - ОпределяемыйТип.ОбъектРасчетов - объект расчетов, в рамках которого происходит распределение взаиморасчетов.
// 			* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - аналитика, в рамках которой происходит распределение взаиморасчетов.
// 			* ВалютаРасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 			* ЭтоРасчетыСКлиентами - Булево - Определяет регистры для заполнения - с клиентами или с поставщиками.
// 			* Порядок - Строка - Момент времени начиная с которого необходимо выполнить распределение, подробнее в ОперативныеВзаиморасчетыСервер.Порядок().
// 			* НачальноеЗаполнение - Булево - Истина, если это начальное заполнение.
// 			* Регистратор - ДокументСсылка - Документ регистратор, инициировавший распределение.
// 			* ДополнительныеСвойстваПроведения - Структура - Структура дополнительных свойств проведения, транслируемая из регистров накопления РасчетыСКлиентами РасчетыСПоставщиками
// 				Дополняется таблицей сформированных движений для дальнейшего использования в регл и упр учете.
//
Функция СтруктураПараметровЗаполненияВзаиморасчетов() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ОбъектРасчетов");
	Структура.Вставить("АналитикаУчетаПоПартнерам");
	Структура.Вставить("ВалютаРасчетов");
	Структура.Вставить("ЭтоРасчетыСКлиентами");
	Структура.Вставить("Порядок","");
	Структура.Вставить("НачальноеЗаполнение", Ложь);
	Структура.Вставить("Регистратор", Неопределено);
	Структура.Вставить("ДополнительныеСвойстваПроведения", Неопределено);
	
	Возврат Структура;
	
КонецФункции

//Возвращает таблицу служебных документов РегистраторРасчетов для перезаписи по переданным параметрам.
//
// Параметры:
//	- Параметры - Структура
//		* ОбъектРасчетов - ОпределяемыйТип.ОбъектРасчетов - Объект расчетов.
//		* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика взаиморасчетов.
//		* Валюта - СправочникСсылка.Валюты - Валюта взаиморасчетов.
//		* ЭтоРасчетыСКлиентами - Булево - это расчеты с клиентами, а не с поставщиками.
//		* Организация - Неопределено, СправочникСсылка.Организации - Организация расчета.
//	- ИмяТаблицы - Строка - Имя регистра накопления, по которому определятся свободный регистратор или нет.
//	- КоличествоЗаписей - Число - Количество записей для последующей записи в регистр.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица со следующими колонками:
//		* Ссылка - ДокументСсылка.РегистраторРасчетов - найденный служебный документ;
//		* ТребуетсяОчистка - Булево - У данного документа есть движения в переданной таблице.
//
Функция СвободныеРегистраторыРасчетов(Параметры, ИмяТаблицы, КоличествоЗаписей)
	
	Если КоличествоЗаписей = 0 Тогда
		КоличествоРегистраторов = 0;
	Иначе
		КоличествоРегистраторов = Цел(КоличествоЗаписей/РазмерПорцииЗаписи()) + 1;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры,ИмяТаблицы + "Регистраторы") Тогда
		СписокПолныхРегистраторов = Параметры[ИмяТаблицы + "Регистраторы"];
	Иначе
		СписокПолныхРегистраторов = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюта",                    Параметры.ВалютаРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Параметры.АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ОбъектРасчетов",            Параметры.ОбъектРасчетов);
	Запрос.УстановитьПараметр("СписокПолныхРегистраторов", СписокПолныхРегистраторов);
	
	ТипРасчетов = ?(Параметры.ЭтоРасчетыСКлиентами, Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	Запрос.УстановитьПараметр("ТипРасчетов", ТипРасчетов);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "НачальноеЗаполнение") И Параметры.НачальноеЗаполнение Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегистраторРасчетов.Ссылка          КАК Ссылка,
		|	ЛОЖЬ                                КАК ТребуетсяОчистка
		|ИЗ
		|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|ГДЕ
		|	РегистраторРасчетов.ОбъектРасчетов              = &ОбъектРасчетов
		|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|	И РегистраторРасчетов.Валюта                    = &Валюта
		|	И РегистраторРасчетов.ТипРасчетов               = &ТипРасчетов
		|СГРУППИРОВАТЬ ПО
		|	РегистраторРасчетов.Ссылка";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегистраторРасчетов.Ссылка          КАК Ссылка,
		|	СУММА(1) > 0                        КАК ТребуетсяОчистка
		|ИЗ
		|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.%ИмяТаблицы% КАК Таблица
		|			ПО Таблица.Регистратор = РегистраторРасчетов.Ссылка
		|ГДЕ
		|	РегистраторРасчетов.ОбъектРасчетов              = &ОбъектРасчетов
		|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|	И РегистраторРасчетов.Валюта                    = &Валюта
		|	И РегистраторРасчетов.ТипРасчетов               = &ТипРасчетов
		|СГРУППИРОВАТЬ ПО
		|	РегистраторРасчетов.Ссылка";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицы%", ИмяТаблицы);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Пока ТаблицаДокументов.Количество() < КоличествоРегистраторов Цикл
		ДокументОбъект = Документы.РегистраторРасчетов.СоздатьДокумент();
		ДокументОбъект.Валюта = Параметры.ВалютаРасчетов;
		ДокументОбъект.АналитикаУчетаПоПартнерам = Параметры.АналитикаУчетаПоПартнерам;
		ДокументОбъект.Организация = ?(Параметры.Организация = Неопределено,
										ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.АналитикаУчетаПоПартнерам, "Организация"),
										Параметры.Организация);
		ДокументОбъект.ОбъектРасчетов = Параметры.ОбъектРасчетов;
		ДокументОбъект.ТипРасчетов = ТипРасчетов;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НовСтр = ТаблицаДокументов.Добавить();
		НовСтр.Ссылка = ДокументОбъект.Ссылка;
		НовСтр.ТребуетсяОчистка = Ложь;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

//Выполняет первоначальное заполнение регистров новой архитектуры
//
// Параметры:
//	- Параметры - Структура - параметры обработчика ожидания
//	- УникальныйИдентификатор - УникальныйИдентификатор - идентификатор обработчика ожидания.
//
Процедура ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(Параметры, УникальныйИдентификатор) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ТекущаяДатаСеанса());
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ТекущаяДатаСеанса());
		
		РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
		
		ОчиститьРегистрыВзаиморасчетов();
		
		Запрос = Новый Запрос;
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ХозяйственныеОперацииНеОтгрузка", ХозяйственныеОперацииНеОтгрузка());
		Запрос.УстановитьПараметр("ТипыПлатежныхДокументов", ТипыПлатежныхДокументов());
		Запрос.УстановитьПараметр("ТипыПервичногоДокументаПлатежки", ТипыПервичногоДокументаПлатежки());
		
		//1.Копируем движения.
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА РасчетыСКлиентами.РасчетныйДокумент <> Неопределено 
		|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
		|		ИНАЧЕ РасчетыСКлиентами.Регистратор 
		|	КОНЕЦ                                      КАК Регистратор,
		|	МИНИМУМ(РасчетыСКлиентами.ПорядокОперации) КАК ПорядокОперации,
		|	МИНИМУМ(ВЫБОР КОГДА РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатков
		|						ТОГДА РасчетыСКлиентами.ДатаРегистратора
		|				ИНАЧЕ РасчетыСКлиентами.Период
		|			КОНЕЦ)                             КАК ДатаВозникновения,
		|	МИНИМУМ(РасчетыСКлиентами.ВалютаДокумента) КАК ВалютаДокумента,
		|	МАКСИМУМ(РасчетыСКлиентами.ДатаПлатежа)    КАК ДатаПлатежа
		|ПОМЕСТИТЬ ПорядокДокументов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.Активность
		|	И НЕ РасчетыСКлиентами.ПорядокОперации = """"
		|	И РасчетыСКлиентами.Сумма <> 0
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА РасчетыСКлиентами.РасчетныйДокумент <> Неопределено 
		|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
		|		ИНАЧЕ РасчетыСКлиентами.Регистратор 
		|	КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента                          КАК ОбъектРасчетов,
		|	РасчетыСКлиентамиПоДокументам.Валюта                                КАК Валюта,
		|	РасчетыСКлиентамиПоДокументам.Регистратор                           КАК ДокументРегистратор,
		|	РасчетыСКлиентамиПоДокументам.Период                                КАК Период,
		|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент                     КАК РасчетныйДокумент,
		|	РасчетыСКлиентамиПоДокументам.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
		|	РасчетыСКлиентамиПоДокументам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
		|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
		|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
		|			ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
		|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
		|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
		|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
		|			ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
		|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0) ТОГДА
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ                                                               КАК ВидДвижения,
		|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаРеализации).ДокументОснование КАК СвязанныйДокумент,
		|
		|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата < 0 ТОГДА
		|		-РасчетыСКлиентамиПоДокументам.Предоплата 
		|	ИНАЧЕ
		|		РасчетыСКлиентамиПоДокументам.Предоплата
		|	КОНЕЦ                                                               КАК Предоплата,
		|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0 ТОГДА
		|		-РасчетыСКлиентамиПоДокументам.ПредоплатаУпр 
		|	ИНАЧЕ
		|		РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
		|	КОНЕЦ                                                               КАК ПредоплатаУпр,
		|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0 ТОГДА
		|		-РасчетыСКлиентамиПоДокументам.ПредоплатаРегл 
		|	ИНАЧЕ
		|		РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
		|	КОНЕЦ                                                               КАК ПредоплатаРегл,
		|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Долг < 0 ТОГДА
		|		-РасчетыСКлиентамиПоДокументам.Долг 
		|	ИНАЧЕ
		|		РасчетыСКлиентамиПоДокументам.Долг
		|	КОНЕЦ                                                               КАК Долг,
		|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгУпр < 0 ТОГДА
		|		-РасчетыСКлиентамиПоДокументам.ДолгУпр 
		|	ИНАЧЕ
		|		РасчетыСКлиентамиПоДокументам.ДолгУпр
		|	КОНЕЦ                                                               КАК ДолгУпр,
		|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 ТОГДА
		|		-РасчетыСКлиентамиПоДокументам.ДолгРегл 
		|	ИНАЧЕ
		|		РасчетыСКлиентамиПоДокументам.ДолгРегл
		|	КОНЕЦ                                                               КАК ДолгРегл,
		|
		|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
		|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
		|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
		|				ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
		|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
		|			ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
		|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
		|				ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
		|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0))
		|			И НЕ (РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков И 
		|					РасчетыСКлиентамиПоДокументам.РасчетныйДокумент <> Неопределено)
		|			И НЕ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
		|			ЕСТЬNULL(ПорядокДокументов.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
		|	ИНАЧЕ
		|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
		|	КОНЕЦ                                                               КАК ДатаПлановогоПогашения,
		|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения,ДАТАВРЕМЯ(1,1,1))      КАК ДатаВозникновения,
		|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                    КАК ПорядокОперации,
		|	ЕСТЬNULL(ДатыВозникновения.ПорядокОперации,"""")                    КАК ПорядокЗачета,
		|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
		|		ЕСТЬNULL(ПорядокДокументов.ВалютаДокумента,
		|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))                  КАК ВалютаДокумента
		|ПОМЕСТИТЬ ВтРасчеты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
		|		ПО ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
		|				И РасчетыСКлиентамиПоДокументам.Регистратор <> РасчетыСКлиентамиПоДокументам.РасчетныйДокумент
		|				ТОГДА РасчетыСКлиентамиПоДокументам.РасчетныйДокумент = ПорядокДокументов.Регистратор
		|				ИНАЧЕ РасчетыСКлиентамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
		|			КОНЕЦ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
		|		ПО РасчетыСКлиентамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
		|ГДЕ
		|	РасчетыСКлиентамиПоДокументам.Предоплата <> 0
		|	ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл <> 0
		|	ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр <> 0
		|	ИЛИ РасчетыСКлиентамиПоДокументам.Долг <> 0
		|	ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл <> 0
		|	ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	Расчеты.Валюта                        КАК Валюта,
		|	Расчеты.ДокументРегистратор           КАК ДокументРегистратор,
		|	Расчеты.РасчетныйДокумент             КАК РасчетныйДокумент,
		|	Расчеты.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	Расчеты.Период                        КАК Период,
		|	Расчеты.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
		|	Расчеты.ДатаВозникновения             КАК ДатаВозникновения,
		|	Расчеты.ВидДвижения                   КАК ВидДвижения,
		|	СУММА(Расчеты.Предоплата)             КАК Предоплата,
		|	СУММА(Расчеты.ПредоплатаУпр)          КАК ПредоплатаУпр,
		|	СУММА(Расчеты.ПредоплатаРегл)         КАК ПредоплатаРегл,
		|	СУММА(Расчеты.Долг)                   КАК Долг,
		|	СУММА(Расчеты.ДолгУпр)                КАК ДолгУпр,
		|	СУММА(Расчеты.ДолгРегл)               КАК ДолгРегл,
		|	Расчеты.СвязанныйДокумент             КАК СвязанныйДокумент,
		|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Расчеты.ПорядокОперации               КАК ПорядокОперации,
		|	Расчеты.ПорядокЗачета                 КАК ПорядокЗачета,
		|	Расчеты.ВалютаДокумента               КАК ВалютаДокумента,
		|	Расчеты.Организация                   КАК Организация
		|ИЗ (
		|	ВЫБРАТЬ
		|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
		|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
		|		ЗачетыОплат.Валюта                                               КАК Валюта,
		|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
		|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
		|		ЗачетыОплат.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
		|		ЗачетыОплат.Период                                               КАК Период,
		|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
		|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
		|		0                                                                КАК Предоплата,
		|		0                                                                КАК ПредоплатаУпр,
		|		0                                                                КАК ПредоплатаРегл,
		|		ЗачетыОплат.Предоплата                                           КАК Долг,
		|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
		|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
		|		Неопределено                                                     КАК СвязанныйДокумент,
		|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
		|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
		|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокЗачета,
		|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
		|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
		|	ИЗ ВтРасчеты КАК ЗачетыОплат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
		|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
		|	ГДЕ
		|		ЗачетыОплат.Предоплата > 0 
		|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
		|			И ТИПЗНАЧЕНИЯ(ЗачетыОплат.ОбъектРасчетов) НЕ В (&ТипыПлатежныхДокументов)
		|			И НЕ (ЗачетыОплат.ОбъектРасчетов ССЫЛКА Документ.ПервичныйДокумент
		|				И ВЫРАЗИТЬ(ЗачетыОплат.ОбъектРасчетов КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента В (&ТипыПервичногоДокументаПлатежки))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
		|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
		|		ЗачетыОплат.Валюта                                               КАК Валюта,
		|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
		|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)  КАК ХозяйственнаяОперация,
		|		ЗачетыОплат.Период                                               КАК Период,
		|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
		|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
		|		0                                                                КАК Предоплата,
		|		0                                                                КАК ПредоплатаУпр,
		|		0                                                                КАК ПредоплатаРегл,
		|		ЗачетыОплат.Предоплата                                           КАК Долг,
		|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
		|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
		|		Неопределено                                                     КАК СвязанныйДокумент,
		|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
		|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
		|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокЗачета,
		|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
		|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
		|	ИЗ ВтРасчеты КАК ЗачетыОплат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
		|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
		|	ГДЕ
		|		ЗачетыОплат.Предоплата > 0 
		|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
		|			И ТИПЗНАЧЕНИЯ(ЗачетыОплат.ОбъектРасчетов) НЕ В (&ТипыПлатежныхДокументов)
		|			И НЕ (ЗачетыОплат.ОбъектРасчетов ССЫЛКА Документ.ПервичныйДокумент
		|				И ВЫРАЗИТЬ(ЗачетыОплат.ОбъектРасчетов КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента В (&ТипыПервичногоДокументаПлатежки))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
		|		РасчетыПоДокументам.ОбъектРасчетов                КАК ОбъектРасчетов,
		|		РасчетыПоДокументам.Валюта                        КАК Валюта,
		|		РасчетыПоДокументам.ДокументРегистратор           КАК ДокументРегистратор,
		|		РасчетыПоДокументам.РасчетныйДокумент             КАК РасчетныйДокумент,
		|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И РасчетыПоДокументам.ХозяйственнаяОперация НЕ В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
		|			КОГДА РасчетыПоДокументам.Долг <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента)
		|			ИНАЧЕ РасчетыПоДокументам.ХозяйственнаяОперация 
		|		КОНЕЦ КАК ХозяйственнаяОперация,
		|		РасчетыПоДокументам.Период                        КАК Период,
		|		РасчетыПоДокументам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
		|		РасчетыПоДокументам.ДатаВозникновения             КАК ДатаВозникновения,
		|		РасчетыПоДокументам.ВидДвижения                   КАК ВидДвижения,
		|		РасчетыПоДокументам.Предоплата                    КАК Предоплата,
		|		РасчетыПоДокументам.ПредоплатаУпр                 КАК ПредоплатаУпр,
		|		РасчетыПоДокументам.ПредоплатаРегл                КАК ПредоплатаРегл,
		|		РасчетыПоДокументам.Долг                          КАК Долг,
		|		РасчетыПоДокументам.ДолгУпр                       КАК ДолгУпр,
		|		РасчетыПоДокументам.ДолгРегл                      КАК ДолгРегл,
		|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата > 0
		|			ТОГДА РасчетыПоДокументам.СвязанныйДокумент
		|			ИНАЧЕ Неопределено
		|		КОНЕЦ                                             КАК СвязанныйДокумент,
		|		РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		РасчетыПоДокументам.ПорядокОперации               КАК ПорядокОперации,
		|		РасчетыПоДокументам.ПорядокЗачета                 КАК ПорядокЗачета,
		|		РасчетыПоДокументам.ВалютаДокумента               КАК ВалютаДокумента,
		|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация
		|	ИЗ ВтРасчеты КАК РасчетыПоДокументам) КАК Расчеты
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	Расчеты.ДокументРегистратор,
		|	Расчеты.РасчетныйДокумент,
		|	Расчеты.ХозяйственнаяОперация,
		|	Расчеты.Период,
		|	Расчеты.ДатаПлановогоПогашения,
		|	Расчеты.ДатаВозникновения,
		|	Расчеты.ВидДвижения,
		|	Расчеты.СвязанныйДокумент,
		|	Расчеты.СтатьяДвиженияДенежныхСредств,
		|	Расчеты.ПорядокОперации,
		|	Расчеты.ПорядокЗачета,
		|	Расчеты.ВалютаДокумента,
		|	Расчеты.Организация
		|";
		
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		ТаблицаДвижений.Индексы.Добавить("АналитикаУчетаПоПартнерам");
		ТаблицаДвижений.Индексы.Добавить("ОбъектРасчетов");
		ТаблицаДвижений.Индексы.Добавить("Валюта");
		
		Соответствие = Новый Соответствие;
		Для Каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДвижений.ПорядокОперации) Тогда
				Если Соответствие.Получить(СтрокаДвижений.Период) = Неопределено Тогда
					Соответствие.Вставить(СтрокаДвижений.Период, ОперативныеВзаиморасчетыСервер.Порядок(СтрокаДвижений.Период, "",, Тип("ДокументСсылка.РасчетКурсовыхРазниц")));
				КонецЕсли;
				СтрокаДвижений.ПорядокОперации = Соответствие[СтрокаДвижений.Период];
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаАналитик = ТаблицаДвижений.Скопировать(,"АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, Организация");
		ТаблицаАналитик.Свернуть("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, Организация");
	
		Для Каждого СтрокаАналитики Из ТаблицаАналитик Цикл
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
			НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
			ТаблицаДетальныхЗаписей = ТаблицаДвижений.Скопировать(Новый Структура("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта",
				СтрокаАналитики.АналитикаУчетаПоПартнерам, СтрокаАналитики.ОбъектРасчетов, СтрокаАналитики.Валюта));
				
			ТаблицаДетальныхЗаписей.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.РегистраторРасчетов"));
			ТаблицаДетальныхЗаписей.Индексы.Добавить("Регистратор");
			
			СтруктураПараметровРегистраторов = Новый Структура;
			СтруктураПараметровРегистраторов.Вставить("ОбъектРасчетов",            СтрокаАналитики.ОбъектРасчетов);
			СтруктураПараметровРегистраторов.Вставить("АналитикаУчетаПоПартнерам", СтрокаАналитики.АналитикаУчетаПоПартнерам);
			СтруктураПараметровРегистраторов.Вставить("ВалютаРасчетов",            СтрокаАналитики.Валюта);
			СтруктураПараметровРегистраторов.Вставить("Организация",               СтрокаАналитики.Организация);
			СтруктураПараметровРегистраторов.Вставить("ЭтоРасчетыСКлиентами",      Истина);
			
			ЗаписатьПорционно(СтруктураПараметровРегистраторов, ТаблицаДетальныхЗаписей, НаборЗаписей);
		КонецЦикла;
		
		Запрос.Текст = "УНИЧТОЖИТЬ ПорядокДокументов; УНИЧТОЖИТЬ ВтРасчеты";
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА РасчетыСПоставщиками.РасчетныйДокумент <> Неопределено 
		|		ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
		|		ИНАЧЕ РасчетыСПоставщиками.Регистратор 
		|	КОНЕЦ                                         КАК Регистратор,
		|	МИНИМУМ(РасчетыСПоставщиками.ПорядокОперации) КАК ПорядокОперации,
		|	МИНИМУМ(ВЫБОР КОГДА РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводОстатков
		|						ТОГДА РасчетыСПоставщиками.ДатаРегистратора
		|				ИНАЧЕ РасчетыСПоставщиками.Период
		|			КОНЕЦ)                                КАК ДатаВозникновения,
		|	МИНИМУМ(РасчетыСПоставщиками.ВалютаДокумента) КАК ВалютаДокумента,
		|	МАКСИМУМ(РасчетыСПоставщиками.ДатаПлатежа)    КАК ДатаПлатежа
		|ПОМЕСТИТЬ ПорядокДокументов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Активность
		|	И НЕ РасчетыСПоставщиками.ПорядокОперации = """"
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА РасчетыСПоставщиками.РасчетныйДокумент <> Неопределено 
		|		ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
		|		ИНАЧЕ РасчетыСПоставщиками.Регистратор 
		|	КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику                КАК ОбъектРасчетов,
		|	РасчетыСПоставщикамиПоДокументам.Валюта                         КАК Валюта,
		|	РасчетыСПоставщикамиПоДокументам.Регистратор                    КАК ДокументРегистратор,
		|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент              КАК РасчетныйДокумент,
		|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
		|	РасчетыСПоставщикамиПоДокументам.СтатьяДвиженияДенежныхСредств  КАК СтатьяДвиженияДенежныхСредств,
		|	РасчетыСПоставщикамиПоДокументам.Период                         КАК Период,
		|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
		|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0) ТОГДА
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ                                                           КАК ВидДвижения,
		|	ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаПриобретения).ДокументОснование КАК СвязанныйДокумент,
		|
		|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата < 0  ТОГДА
		|		-РасчетыСПоставщикамиПоДокументам.Предоплата 
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиПоДокументам.Предоплата
		|	КОНЕЦ                                                           КАК Предоплата,
		|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0  ТОГДА
		|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр 
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
		|	КОНЕЦ                                                           КАК ПредоплатаУпр,
		|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0  ТОГДА
		|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл 
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
		|	КОНЕЦ                                                           КАК ПредоплатаРегл,
		|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Долг < 0  ТОГДА
		|		-РасчетыСПоставщикамиПоДокументам.Долг 
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиПоДокументам.Долг
		|	КОНЕЦ                                                           КАК Долг,
		|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0  ТОГДА
		|		-РасчетыСПоставщикамиПоДокументам.ДолгУпр 
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиПоДокументам.ДолгУпр
		|	КОНЕЦ                                                           КАК ДолгУпр,
		|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0  ТОГДА
		|		-РасчетыСПоставщикамиПоДокументам.ДолгРегл 
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиПоДокументам.ДолгРегл
		|	КОНЕЦ                                                           КАК ДолгРегл,
		|
		|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
		|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
		|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
		|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0)) 
		|			И НЕ (РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков И 
		|					РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент <> Неопределено)
		|			И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
		|			ЕСТЬNULL(ПорядокДокументов.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
		|	ИНАЧЕ
		|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
		|	КОНЕЦ                                                           КАК ДатаПлановогоПогашения,
		|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВозникновения,
		|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                КАК ПорядокОперации,
		|	ЕСТЬNULL(ДатыВозникновения.ПорядокОперации,"""")                КАК ПорядокЗачета,
		|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
		|		ЕСТЬNULL(ПорядокДокументов.ВалютаДокумента,
		|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))              КАК ВалютаДокумента
		|ПОМЕСТИТЬ ВтРасчеты
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
		|		ПО ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
		|				И РасчетыСПоставщикамиПоДокументам.Регистратор <> РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент
		|				ТОГДА РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ПорядокДокументов.Регистратор
		|				ИНАЧЕ РасчетыСПоставщикамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
		|			КОНЕЦ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
		|		ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
		|ГДЕ
		|	РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
		|	ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл <> 0
		|	ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр <> 0
		|	ИЛИ РасчетыСПоставщикамиПоДокументам.Долг <> 0
		|	ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл <> 0
		|	ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	Расчеты.Валюта                        КАК Валюта,
		|	Расчеты.ДокументРегистратор           КАК ДокументРегистратор,
		|	Расчеты.РасчетныйДокумент             КАК РасчетныйДокумент,
		|	Расчеты.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
		|	Расчеты.Период                        КАК Период,
		|	Расчеты.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
		|	Расчеты.ДатаВозникновения             КАК ДатаВозникновения,
		|	Расчеты.ВидДвижения                   КАК ВидДвижения,
		|	СУММА(Расчеты.Предоплата)             КАК Предоплата,
		|	СУММА(Расчеты.ПредоплатаУпр)          КАК ПредоплатаУпр,
		|	СУММА(Расчеты.ПредоплатаРегл)         КАК ПредоплатаРегл,
		|	СУММА(Расчеты.Долг)                   КАК Долг,
		|	СУММА(Расчеты.ДолгУпр)                КАК ДолгУпр,
		|	СУММА(Расчеты.ДолгРегл)               КАК ДолгРегл,
		|	Расчеты.СвязанныйДокумент             КАК СвязанныйДокумент,
		|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Расчеты.ПорядокОперации               КАК ПорядокОперации,
		|	Расчеты.ПорядокЗачета                 КАК ПорядокЗачета,
		|	Расчеты.ВалютаДокумента               КАК ВалютаДокумента,
		|	Расчеты.Организация                   КАК Организация
		|ИЗ (
		|	ВЫБРАТЬ
		|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
		|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
		|		ЗачетыОплат.Валюта                                               КАК Валюта,
		|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
		|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
		|		ЗачетыОплат.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
		|		ЗачетыОплат.Период                                               КАК Период,
		|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
		|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
		|		0                                                                КАК Предоплата,
		|		0                                                                КАК ПредоплатаУпр,
		|		0                                                                КАК ПредоплатаРегл,
		|		ЗачетыОплат.Предоплата                                           КАК Долг,
		|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
		|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
		|		Неопределено                                                     КАК СвязанныйДокумент,
		|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
		|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
		|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокЗачета,
		|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
		|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
		|	ИЗ ВтРасчеты КАК ЗачетыОплат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
		|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
		|	ГДЕ
		|		ЗачетыОплат.Предоплата > 0 
		|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
		|			И ТИПЗНАЧЕНИЯ(ЗачетыОплат.ОбъектРасчетов) НЕ В (&ТипыПлатежныхДокументов)
		|			И НЕ (ЗачетыОплат.ОбъектРасчетов ССЫЛКА Документ.ПервичныйДокумент
		|				И ВЫРАЗИТЬ(ЗачетыОплат.ОбъектРасчетов КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента В (&ТипыПервичногоДокументаПлатежки))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗачетыОплат.АналитикаУчетаПоПартнерам                              КАК АналитикаУчетаПоПартнерам,
		|		ЗачетыОплат.ОбъектРасчетов                                         КАК ОбъектРасчетов,
		|		ЗачетыОплат.Валюта                                                 КАК Валюта,
		|		ЗачетыОплат.ДокументРегистратор                                    КАК ДокументРегистратор,
		|		ЗачетыОплат.ДокументРегистратор                                    КАК РасчетныйДокумент,
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику) КАК ХозяйственнаяОперация,
		|		ЗачетыОплат.Период                                                 КАК Период,
		|		ДатыВозникновения.ДатаПлатежа                                      КАК ДатаПлановогоПогашения,
		|		ЗачетыОплат.Период                                                 КАК ДатаВозникновения,
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                             КАК ВидДвижения,
		|		0                                                                  КАК Предоплата,
		|		0                                                                  КАК ПредоплатаУпр,
		|		0                                                                  КАК ПредоплатаРегл,
		|		ЗачетыОплат.Предоплата                                             КАК Долг,
		|		ЗачетыОплат.ПредоплатаУпр                                          КАК ДолгУпр,
		|		ЗачетыОплат.ПредоплатаРегл                                         КАК ДолгРегл,
		|		Неопределено                                                       КАК СвязанныйДокумент,
		|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)    КАК СтатьяДвиженияДенежныхСредств,
		|		ЗачетыОплат.ПорядокОперации                                        КАК ПорядокОперации,
		|		ЗачетыОплат.ПорядокОперации                                        КАК ПорядокЗачета,
		|		ЗачетыОплат.ВалютаДокумента                                        КАК ВалютаДокумента,
		|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                  КАК Организация
		|	ИЗ ВтРасчеты КАК ЗачетыОплат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
		|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
		|	ГДЕ
		|		ЗачетыОплат.Предоплата > 0 
		|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
		|			И ТИПЗНАЧЕНИЯ(ЗачетыОплат.ОбъектРасчетов) НЕ В (&ТипыПлатежныхДокументов)
		|			И НЕ (ЗачетыОплат.ОбъектРасчетов ССЫЛКА Документ.ПервичныйДокумент
		|				И ВЫРАЗИТЬ(ЗачетыОплат.ОбъектРасчетов КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента В (&ТипыПервичногоДокументаПлатежки))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
		|		РасчетыПоДокументам.ОбъектРасчетов                КАК ОбъектРасчетов,
		|		РасчетыПоДокументам.Валюта                        КАК Валюта,
		|		РасчетыПоДокументам.ДокументРегистратор           КАК ДокументРегистратор,
		|		РасчетыПоДокументам.РасчетныйДокумент             КАК РасчетныйДокумент,
		|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И РасчетыПоДокументам.ХозяйственнаяОперация НЕ В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
		|			КОГДА РасчетыПоДокументам.Долг <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику)
		|			ИНАЧЕ РасчетыПоДокументам.ХозяйственнаяОперация 
		|		КОНЕЦ КАК ХозяйственнаяОперация,
		|		РасчетыПоДокументам.Период                        КАК Период,
		|		РасчетыПоДокументам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
		|		РасчетыПоДокументам.ДатаВозникновения             КАК ДатаВозникновения,
		|		РасчетыПоДокументам.ВидДвижения                   КАК ВидДвижения,
		|		РасчетыПоДокументам.Предоплата                    КАК Предоплата,
		|		РасчетыПоДокументам.ПредоплатаУпр                 КАК ПредоплатаУпр,
		|		РасчетыПоДокументам.ПредоплатаРегл                КАК ПредоплатаРегл,
		|		РасчетыПоДокументам.Долг                          КАК Долг,
		|		РасчетыПоДокументам.ДолгУпр                       КАК ДолгУпр,
		|		РасчетыПоДокументам.ДолгРегл                      КАК ДолгРегл,
		|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата > 0
		|			ТОГДА РасчетыПоДокументам.СвязанныйДокумент
		|			ИНАЧЕ Неопределено
		|		КОНЕЦ                                             КАК СвязанныйДокумент,
		|		РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		РасчетыПоДокументам.ПорядокОперации               КАК ПорядокОперации,
		|		РасчетыПоДокументам.ПорядокЗачета                 КАК ПорядокЗачета,
		|		РасчетыПоДокументам.ВалютаДокумента               КАК ВалютаДокумента,
		|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация
		|	ИЗ ВтРасчеты КАК РасчетыПоДокументам) КАК Расчеты
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	Расчеты.ДокументРегистратор,
		|	Расчеты.РасчетныйДокумент,
		|	Расчеты.ХозяйственнаяОперация,
		|	Расчеты.Период,
		|	Расчеты.ДатаПлановогоПогашения,
		|	Расчеты.ДатаВозникновения,
		|	Расчеты.ВидДвижения,
		|	Расчеты.СвязанныйДокумент,
		|	Расчеты.СтатьяДвиженияДенежныхСредств,
		|	Расчеты.ПорядокОперации,
		|	Расчеты.ПорядокЗачета,
		|	Расчеты.ВалютаДокумента,
		|	Расчеты.Организация
		|	";
		
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		ТаблицаДвижений.Индексы.Добавить("АналитикаУчетаПоПартнерам");
		ТаблицаДвижений.Индексы.Добавить("ОбъектРасчетов");
		ТаблицаДвижений.Индексы.Добавить("Валюта");
		
		ТаблицаАналитик = ТаблицаДвижений.Скопировать(,"АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, Организация");
		ТаблицаАналитик.Свернуть("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, Организация");
		
		Соответствие = Новый Соответствие;
		Для Каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДвижений.ПорядокОперации) Тогда
				Если Соответствие.Получить(СтрокаДвижений.Период) = Неопределено Тогда
					Соответствие.Вставить(СтрокаДвижений.Период, ОперативныеВзаиморасчетыСервер.Порядок(СтрокаДвижений.Период, "",, Тип("ДокументСсылка.РасчетКурсовыхРазниц")));
				КонецЕсли;
				СтрокаДвижений.ПорядокОперации = Соответствие[СтрокаДвижений.Период];
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаАналитики Из ТаблицаАналитик Цикл
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
			НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
			ТаблицаДетальныхЗаписей = ТаблицаДвижений.Скопировать(Новый Структура("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта",
				СтрокаАналитики.АналитикаУчетаПоПартнерам, СтрокаАналитики.ОбъектРасчетов, СтрокаАналитики.Валюта));
			
			ТаблицаДетальныхЗаписей.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.РегистраторРасчетов"));
			ТаблицаДетальныхЗаписей.Индексы.Добавить("Регистратор");
			
			СтруктураПараметровРегистраторов = Новый Структура;
			СтруктураПараметровРегистраторов.Вставить("ОбъектРасчетов",            СтрокаАналитики.ОбъектРасчетов);
			СтруктураПараметровРегистраторов.Вставить("АналитикаУчетаПоПартнерам", СтрокаАналитики.АналитикаУчетаПоПартнерам);
			СтруктураПараметровРегистраторов.Вставить("ВалютаРасчетов",            СтрокаАналитики.Валюта);
			СтруктураПараметровРегистраторов.Вставить("Организация",               СтрокаАналитики.Организация);
			СтруктураПараметровРегистраторов.Вставить("ЭтоРасчетыСКлиентами",      Ложь);
			
			ЗаписатьПорционно(СтруктураПараметровРегистраторов, ТаблицаДетальныхЗаписей, НаборЗаписей);
		КонецЦикла;
		
		//2.Заполняем планы по новому алгоритму за весь период.
		ТаблицаОбъектов = ПолучитьВсеОбъекты();
		Для Каждого Стр из ТаблицаОбъектов Цикл
			ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
			ЗаполнитьЗначенияСвойств(ОсновныеПараметры,Стр);
			ОсновныеПараметры.НачальноеЗаполнение = Истина;
			ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		КонецЦикла;
		
		РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
		
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами.';
										|en = 'Enable online mutual settlements with partners.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

//Очищает новые регистры расчетов в транзакции с блокировкой всех расчетов.
Процедура ОчиститьРегистрыПриВыключенииНовойАрхитектуры(Параметры = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ВернутьДвиженияПоРасчетамСКлиентами();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Ложь);
		РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
		
		ОчиститьРегистрыВзаиморасчетов();
		
		РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Истина);
		РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выключение онлайн взаиморасчетов с партнерами.';
										|en = 'Disable online mutual settlements with partners.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

//Заполнение новых регистров по всем объектам расчетов.
Процедура ЗаполнитьПоВсемРасчетам(НачальноеЗаполнение = Ложь) Экспорт
	
	ОчиститьРегистрыВзаиморасчетов();
	
	ТаблицаОбъектов = ПолучитьВсеОбъекты();
	Для Каждого Стр из ТаблицаОбъектов Цикл
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры,Стр);
		ОсновныеПараметры.НачальноеЗаполнение = НачальноеЗаполнение;
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанных

//Формирует временные таблицы остатков и записей для распределения
Процедура СформироватьВТДанныхРегистровДоНачалаРасчетов(Запрос, ГлобальныеПеременные)
	
	//Данные расчетов до начала пересчета.
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоСрокам.ПорядокОперации     КАК ПорядокОперации,
	|	РасчетыПоСрокам.ДокументРегистратор КАК ДокументРегистратор,
	|	РасчетыПоСрокам.ВалютаДокумента     КАК ВалютаДокумента,
	|	РасчетыПоСрокам.РасчетныйДокумент   КАК РасчетныйДокумент
	|ПОМЕСТИТЬ ВТДанныеРегистраторовОтгрузокПоставок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
	|ГДЕ
	|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|	И РасчетыПоСрокам.ОбъектРасчетов            = &ОбъектРасчетов
	|	И РасчетыПоСрокам.Валюта                    = &ВалютаРасчетов
	|	И РасчетыПоСрокам.ПорядокОперации           < &Порядок
	|	И НЕ РасчетыПоСрокам.ДокументРегистратор    = &Регистратор
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРегистратор,
	|	РасчетныйДокумент
	|;
	|ВЫБРАТЬ
	|	РасчетыПоСрокамДо.РасчетныйДокумент         КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	РасчетыПоСрокамДо.ДатаВозникновения         КАК Период,
	|	РасчетыПоСрокамДо.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамДо.ДатаВозникновения         КАК ДатаВозникновения,
	|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент)КАК СвязанныйДокумент,
	|	МИНИМУМ(ПорядкиОпераций.ПорядокОперации)    КАК ПорядокОперации,
	|	РасчетыПоСрокамДо.ПорядокЗачета             КАК ПорядокЗачета,
	|	МИНИМУМ(ПорядкиОпераций.ВалютаДокумента)                  КАК ВалютаДокумента,
	|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.Предоплата ИНАЧЕ РасчетыПоСрокамДо.Предоплата КОНЕЦ         КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.ПредоплатаРегл ИНАЧЕ РасчетыПоСрокамДо.ПредоплатаРегл КОНЕЦ КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.ПредоплатаУпр ИНАЧЕ РасчетыПоСрокамДо.ПредоплатаУпр КОНЕЦ   КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.Долг ИНАЧЕ РасчетыПоСрокамДо.Долг КОНЕЦ                     КАК Долг,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.ДолгРегл ИНАЧЕ РасчетыПоСрокамДо.ДолгРегл КОНЕЦ             КАК ДолгРегл,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.ДолгУпр ИНАЧЕ РасчетыПоСрокамДо.ДолгУпр КОНЕЦ               КАК ДолгУпр
	|ПОМЕСТИТЬ ВТРасчетыПоСрокамДоСДИ
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамДо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегистраторовОтгрузокПоставок КАК ПорядкиОпераций
	|			ПО РасчетыПоСрокамДо.ДокументРегистратор =  ПорядкиОпераций.ДокументРегистратор
	|				И РасчетыПоСрокамДо.РасчетныйДокумент =  ПорядкиОпераций.РасчетныйДокумент
	|ГДЕ
	|	РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|	И РасчетыПоСрокамДо.ОбъектРасчетов            = &ОбъектРасчетов
	|	И РасчетыПоСрокамДо.Валюта                    = &ВалютаРасчетов
	|	И РасчетыПоСрокамДо.ПорядокОперации           < &Порядок
	|	И НЕ РасчетыПоСрокамДо.ДокументРегистратор    = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСрокамДо.РасчетныйДокумент,
	|	РасчетыПоСрокамДо.ДатаПлановогоПогашения,
	|	РасчетыПоСрокамДо.ДатаВозникновения,
	|	РасчетыПоСрокамДо.ПорядокЗачета,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.Предоплата ИНАЧЕ РасчетыПоСрокамДо.Предоплата КОНЕЦ,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.ПредоплатаРегл ИНАЧЕ РасчетыПоСрокамДо.ПредоплатаРегл КОНЕЦ,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.ПредоплатаУпр ИНАЧЕ РасчетыПоСрокамДо.ПредоплатаУпр КОНЕЦ,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.Долг ИНАЧЕ РасчетыПоСрокамДо.Долг КОНЕЦ,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.ДолгРегл ИНАЧЕ РасчетыПоСрокамДо.ДолгРегл КОНЕЦ,
	|	ВЫБОР КОГДА РасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПоСрокамДо.ДолгУпр ИНАЧЕ РасчетыПоСрокамДо.ДолгУпр КОНЕЦ
	|;
	|ВЫБРАТЬ
	|	РасчетыПоСрокамДоСДИ.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыПоСрокамДоСДИ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасчетыПоСрокамДоСДИ.Период КАК Период,
	|	РасчетыПоСрокамДоСДИ.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамДоСДИ.ДатаВозникновения КАК ДатаВозникновения,
	|	МАКСИМУМ(РасчетыПоСрокамДоСДИ.СвязанныйДокумент) КАК СвязанныйДокумент,
	|	МИНИМУМ(РасчетыПоСрокамДоСДИ.ПорядокОперации) КАК ПорядокОперации,
	|	РасчетыПоСрокамДоСДИ.ПорядокЗачета КАК ПорядокЗачета,
	|	МИНИМУМ(РасчетыПоСрокамДоСДИ.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(РасчетыПоСрокамДоСДИ.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	СУММА(РасчетыПоСрокамДоСДИ.Предоплата) КАК Предоплата,
	|	СУММА(РасчетыПоСрокамДоСДИ.ПредоплатаРегл) КАК ПредоплатаРегл,
	|	СУММА(РасчетыПоСрокамДоСДИ.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(РасчетыПоСрокамДоСДИ.Долг) КАК Долг,
	|	СУММА(РасчетыПоСрокамДоСДИ.ДолгРегл) КАК ДолгРегл,
	|	СУММА(РасчетыПоСрокамДоСДИ.ДолгУпр) КАК ДолгУпр
	|ПОМЕСТИТЬ ВТРасчетыПоСрокамОстатки
	|ИЗ
	|	ВТРасчетыПоСрокамДоСДИ КАК РасчетыПоСрокамДоСДИ
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСрокамДоСДИ.РасчетныйДокумент,
	|	РасчетыПоСрокамДоСДИ.ХозяйственнаяОперация,
	|	РасчетыПоСрокамДоСДИ.Период,
	|	РасчетыПоСрокамДоСДИ.ДатаПлановогоПогашения,
	|	РасчетыПоСрокамДоСДИ.ДатаВозникновения,
	|	РасчетыПоСрокамДоСДИ.ПорядокЗачета
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыПоСрокамДоСДИ.Предоплата) > 0 
	|	ИЛИ СУММА(РасчетыПоСрокамДоСДИ.ПредоплатаРегл) > 0 
	|	ИЛИ СУММА(РасчетыПоСрокамДоСДИ.ПредоплатаУпр) > 0 
	|	ИЛИ СУММА(РасчетыПоСрокамДоСДИ.Долг) > 0
	|	ИЛИ СУММА(РасчетыПоСрокамДоСДИ.ДолгРегл) > 0
	|	ИЛИ СУММА(РасчетыПоСрокамДоСДИ.ДолгУпр) > 0
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|;
	//Планы оплат.
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1)                             КАК Период,
	|	РасчетыПланОплатДо.ДокументПлан              КАК ДокументПлан,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	РасчетыПланОплатДо.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
	|	РасчетыПланОплатДо.ДатаВозникновения         КАК ДатаВозникновения,
	|	РасчетыПланОплатДо.ПорядокЗачета             КАК ПорядокЗачета,
	|	РасчетыПланОплатДо.ВариантОплаты             КАК ВариантОплаты,
	|	
	|	СУММА(ВЫБОР КОГДА РасчетыПланОплатДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПланОплатДо.КОплате ИНАЧЕ РасчетыПланОплатДо.КОплате КОНЕЦ)     КАК КОплате
	|	
	|ПОМЕСТИТЬ ВТРасчетыПланОплатОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыПланОплатДо
	|ГДЕ
	|	РасчетыПланОплатДо.ОбъектРасчетов              = &ОбъектРасчетов
	|	И РасчетыПланОплатДо.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыПланОплатДо.Валюта                    = &ВалютаРасчетов
	|	И РасчетыПланОплатДо.ПорядокОперации           < &Порядок
	|	И НЕ РасчетыПланОплатДо.ДокументРегистратор    = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПланОплатДо.ДокументПлан,
	|	РасчетыПланОплатДо.ДатаПлановогоПогашения,
	|	РасчетыПланОплатДо.ДатаВозникновения,
	|	РасчетыПланОплатДо.ПорядокЗачета,
	|	РасчетыПланОплатДо.ВариантОплаты
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыПланОплатДо.КОплате) > 0
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПлан,
	|	ДатаПлановогоПогашения
	|;
	//Планы отгрузок.
	|ВЫБРАТЬ
	|	РасчетыПланОтгрузокДо.ДокументПлан              КАК ДокументПлан,
	|	ДАТАВРЕМЯ(1,1,1)                                КАК Период,
	|	РасчетыПланОтгрузокДо.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
	|	РасчетыПланОтгрузокДо.ДатаВозникновения         КАК ДатаВозникновения,
	|	РасчетыПланОтгрузокДо.ПорядокЗачета             КАК ПорядокЗачета,
	|	
	|	СУММА(ВЫБОР КОГДА РасчетыПланОтгрузокДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -РасчетыПланОтгрузокДо.Сумма ИНАЧЕ РасчетыПланОтгрузокДо.Сумма КОНЕЦ)              КАК Сумма
	|	
	|ПОМЕСТИТЬ ВТРасчетыПланОтгрузокПоставокОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыПланОтгрузокДо
	|ГДЕ
	|	РасчетыПланОтгрузокДо.ОбъектРасчетов              = &ОбъектРасчетов
	|	И РасчетыПланОтгрузокДо.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыПланОтгрузокДо.Валюта                    = &ВалютаРасчетов
	|	И РасчетыПланОтгрузокДо.ПорядокОперации           < &Порядок
	|	И НЕ РасчетыПланОтгрузокДо.ДокументРегистратор    = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПланОтгрузокДо.ДокументПлан,
	|	РасчетыПланОтгрузокДо.ДатаПлановогоПогашения,
	|	РасчетыПланОтгрузокДо.ДатаВозникновения,
	|	РасчетыПланОтгрузокДо.ПорядокЗачета
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыПланОтгрузокДо.Сумма) > 0
	|;";
	
	Если НЕ ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентамиПоСрокам", "РасчетыСПоставщикамиПоСрокам");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентамиПланОплат", "РасчетыСПоставщикамиПланОплат");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентамиПланОтгрузок", "РасчетыСПоставщикамиПланПоставок");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

//Возвращает записи до начала расчета (порядка), количество которых в служебном документе регистраторе меньше размера порции записи
Функция ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяТаблицы)
	
	Если НЕ ГлобальныеПеременные.НачальноеЗаполнение Тогда
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Таблица.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.%ИмяТаблицы% КАК Таблица
		|ГДЕ
		|	Таблица.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
		|	И Таблица.ОбъектРасчетов            = &ОбъектРасчетов
		|	И Таблица.Валюта                    = &ВалютаРасчетов
		|	И Таблица.ПорядокОперации           < &Порядок
		|	И НЕ Таблица.ДокументРегистратор    = &Регистратор
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Регистратор
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО(Таблица.НомерСтроки) = &РазмерПорцииЗаписи";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицы%", ИмяТаблицы);
		
		ПолныеРегистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	Иначе
		ПолныеРегистраторы = Новый Массив;
	КонецЕсли;
	
	ГлобальныеПеременные.Вставить(ИмяТаблицы + "Регистраторы", ПолныеРегистраторы);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрНакопления.%ИмяТаблицы% КАК Таблица
	|ГДЕ
	|	НЕ Таблица.Регистратор В (&МассивРегистраторов)
	|	И Таблица.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|	И Таблица.ОбъектРасчетов            = &ОбъектРасчетов
	|	И Таблица.Валюта                    = &ВалютаРасчетов
	|	И Таблица.ПорядокОперации           < &Порядок
	|	И НЕ Таблица.ДокументРегистратор    = &Регистратор";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицы%", ИмяТаблицы);
	Запрос.УстановитьПараметр("МассивРегистраторов", ПолныеРегистраторы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Возвращает таблицу планов оплат для распределения.
Функция ПолучитьПланыОплат(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.Период                 КАК Период,
	|	Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения      КАК ДатаВозникновения,
	|	Расчеты.ПорядокОперации        КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачета          КАК ПорядокЗачета,
	|	Расчеты.Регистратор            КАК Регистратор,
	|	Расчеты.РасчетныйДокумент      КАК ДокументПлан,
	|	Расчеты.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	Расчеты.ВариантОплаты          КАК ВариантОплаты,
	|	Расчеты.ВариантОплаты.Порядок  КАК ВариантОплатыПорядок,
	|	Расчеты.КОплате                КАК КОплате,
	|	ЛОЖЬ                           КАК ПриходДобавлен
	|ИЗ
	|	ВТРасчетыОтгрузкиПоставки КАК Расчеты
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&СписокТиповЗаказов)
	|		ИЛИ (Расчеты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|			И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияТоваровУслуг).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)))
	|	И Расчеты.КОплате <> 0 
	|	//УсловиеПорядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиПланаОплат.Период                 КАК Период,
	|	ОстаткиПланаОплат.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ОстаткиПланаОплат.ДатаВозникновения      КАК ДатаВозникновения,
	|	ОстаткиПланаОплат.ПорядокЗачета          КАК ПорядокОперации,
	|	ОстаткиПланаОплат.ПорядокЗачета          КАК ПорядокЗачета,
	|	ОстаткиПланаОплат.ДокументПлан           КАК Регистратор,
	|	ОстаткиПланаОплат.ДокументПлан           КАК ДокументПлан,
	|	ОстаткиПланаОплат.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ОстаткиПланаОплат.ВариантОплаты          КАК ВариантОплаты,
	|	ОстаткиПланаОплат.ВариантОплаты.Порядок  КАК ВариантОплатыПорядок,
	|	ОстаткиПланаОплат.КОплате                КАК КОплате,
	|	ИСТИНА                                   КАК ПриходДобавлен
	|ИЗ 
	|	ВТРасчетыПланОплатОстатки КАК ОстаткиПланаОплат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗачета ВОЗР,
	|	ВариантОплатыПорядок ВОЗР";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеПорядок", "И Расчеты.ПорядокОперации >= &Порядок");
	КонецЕсли;
	
	Результат  = Запрос.Выполнить();
	ПланыОплат = Результат.Выгрузить();
	ПланыОплат.Индексы.Добавить("Регистратор");
	
	Возврат ПланыОплат;
	
КонецФункции

//Возвращает таблицу планов отгрузок/поставок для распределения.
Функция ПолучитьПланыОтгрузокПоставок(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.Период                 КАК Период,
	|	Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения      КАК ДатаВозникновения,
	|	Расчеты.ПорядокОперации        КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачета          КАК ПорядокЗачета,
	|	Расчеты.Регистратор            КАК Регистратор,
	|	Расчеты.КОтгрузкеПоставке      КАК КОтгрузкеПоставке,
	|	ЛОЖЬ                           КАК ПриходДобавлен
	|ИЗ
	|	ВТРасчетыОтгрузкиПоставки КАК Расчеты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&СписокТиповЗаказов) И
	|	Расчеты.КОтгрузкеПоставке > 0
	|	//УсловиеПорядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиПланаОтгрузокПоставок.Период                 КАК Период,
	|	ОстаткиПланаОтгрузокПоставок.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ОстаткиПланаОтгрузокПоставок.ДатаВозникновения      КАК ДатаВозникновения,
	|	ОстаткиПланаОтгрузокПоставок.ПорядокЗачета          КАК ПорядокОперации,
	|	ОстаткиПланаОтгрузокПоставок.ПорядокЗачета          КАК ПорядокЗачета,
	|	ОстаткиПланаОтгрузокПоставок.ДокументПлан           КАК Регистратор,
	|	ОстаткиПланаОтгрузокПоставок.Сумма                  КАК КОтгрузкеПоставке,
	|	ИСТИНА                                              КАК ПриходДобавлен
	|ИЗ
	|	ВТРасчетыПланОтгрузокПоставокОстатки КАК ОстаткиПланаОтгрузокПоставок
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗачета ВОЗР";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//УсловиеПорядок","И Расчеты.ПорядокОперации >= &Порядок");
	КонецЕсли;
	
	Результат  = Запрос.Выполнить();
	ПланыОтгрузокПоставок = Результат.Выгрузить();
	
	Возврат ПланыОтгрузокПоставок;
	
КонецФункции

//Возвращает таблицу оплат для распределения.
Функция ПолучитьОплаты(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период                                      КАК Период,
	|	ВложенныйЗапрос.ДатаВозникновения                           КАК ДатаВозникновения,
	|	ВложенныйЗапрос.ПорядокОперации                             КАК ПорядокОперации,
	|	ВложенныйЗапрос.ПорядокЗачета                               КАК ПорядокЗачета,
	|	ВложенныйЗапрос.Регистратор                                 КАК Регистратор,
	|	ВложенныйЗапрос.РасчетныйДокумент                           КАК РасчетныйДокумент,
	|	ВложенныйЗапрос.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|	ВложенныйЗапрос.ЭтоКорректировка                            КАК ЭтоКорректировка,
	|	ВложенныйЗапрос.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ВложенныйЗапрос.ВалютаДокумента = &ВалютаРегл 
	|		ИЛИ &ВалютаРасчетов = &ВалютаРегл
	|		ИЛИ ВложенныйЗапрос.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности КАК РучнойКурсРегл,
	|	ВложенныйЗапрос.ВалютаДокумента = &ВалютаУпр 
	|		ИЛИ &ВалютаРасчетов = &ВалютаУпр
	|		ИЛИ ВложенныйЗапрос.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности КАК РучнойКурсУпр,
	|	ВложенныйЗапрос.ВалютаДокумента                             КАК ВалютаДокумента,
	|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	ВложенныйЗапрос.ПриходДобавлен                              КАК ПриходДобавлен,
	|	ВложенныйЗапрос.ГрафикСписан                                КАК ГрафикСписан,
	|	ВложенныйЗапрос.Сумма                                       КАК Сумма,
	|	ВложенныйЗапрос.СуммаРегл                                   КАК СуммаРегл,
	|	ВложенныйЗапрос.СуммаУпр                                    КАК СуммаУпр
	|ПОМЕСТИТЬ ВТРасчетыОплаты
	|ИЗ (
	|	ВЫБРАТЬ
	|		Расчеты.Период                                                   КАК Период,
	|		НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)                    КАК ДатаВозникновения,
	|		Расчеты.ПорядокОперации                                          КАК ПорядокОперации,
	|		ВЫБОР КОГДА &ПорядокЗачетаПоДатеПлатежа
	|				ТОГДА Расчеты.ПорядокЗачетаПоДатеПлатежа
	|			ИНАЧЕ Расчеты.ПорядокОперации
	|		КОНЕЦ                                                            КАК ПорядокЗачета,
	|		Расчеты.ВалютаДокумента                                          КАК ВалютаДокумента,
	|		Расчеты.СтатьяДвиженияДенежныхСредств                            КАК СтатьяДвиженияДенежныхСредств,
	|		Расчеты.Регистратор                                              КАК Регистратор,
	|		Расчеты.СвязанныйДокумент                                        КАК СвязанныйДокумент,
	|		ВЫБОР 
	|			КОГДА Расчеты.РасчетныйДокумент = Неопределено 
	|					ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|				ТОГДА Расчеты.Регистратор 
	|			ИНАЧЕ Расчеты.РасчетныйДокумент
	|		КОНЕЦ                                                            КАК РасчетныйДокумент,
	|		НЕОПРЕДЕЛЕНО                                                     КАК КорОбъектРасчетов,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|		
	|		Расчеты.ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
	|		ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В
	|			(ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
	|		ЛОЖЬ                                                             КАК ПриходДобавлен,
	|		ЛОЖЬ                                                             КАК ГрафикСписан,
	|		СУММА(ВЫБОР	КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|					ТОГДА -Расчеты.Сумма
	|				ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ)                                                           КАК Сумма,
	|		СУММА(ВЫБОР	КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|					ТОГДА -Расчеты.СуммаРегл
	|				ИНАЧЕ Расчеты.СуммаРегл
	|		КОНЕЦ)                                                           КАК СуммаРегл,
	|		СУММА(ВЫБОР	КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|					ТОГДА -Расчеты.СуммаУпр
	|				ИНАЧЕ Расчеты.СуммаУпр
	|		КОНЕЦ)                                                           КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.ЗаказКлиента              = &ОбъектРасчетов
	|		И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|		И Расчеты.Валюта                    = &ВалютаРасчетов
	|		И Расчеты.КорОбъектРасчетов         = Неопределено
	|		//УсловиеПорядок
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ),
	|		Расчеты.Период,
	|		Расчеты.ПорядокОперации,
	|		ВЫБОР КОГДА &ПорядокЗачетаПоДатеПлатежа
	|				ТОГДА Расчеты.ПорядокЗачетаПоДатеПлатежа
	|			ИНАЧЕ Расчеты.ПорядокОперации
	|		КОНЕЦ,
	|		Расчеты.ВалютаДокумента,
	|		Расчеты.СтатьяДвиженияДенежныхСредств,
	|		Расчеты.Регистратор,
	|		Расчеты.СвязанныйДокумент,
	|		ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент = Неопределено
	|					ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|				ТОГДА Расчеты.Регистратор
	|			ИНАЧЕ Расчеты.РасчетныйДокумент
	|		КОНЕЦ,
	|		Расчеты.ХозяйственнаяОперация
	|	ИМЕЮЩИЕ
	|		СУММА(ВЫБОР	КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|					ТОГДА -Расчеты.Сумма
	|				ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ) > 0
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Расчеты.Период                                                   КАК Период,
	|		НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)                    КАК ДатаВозникновения,
	|		Расчеты.ПорядокОперации                                          КАК ПорядокОперации,
	|		ВЫБОР КОГДА &ПорядокЗачетаПоДатеПлатежа
	|				ТОГДА Расчеты.ПорядокЗачетаПоДатеПлатежа
	|			ИНАЧЕ Расчеты.ПорядокОперации
	|		КОНЕЦ                                                            КАК ПорядокЗачета,
	|		Расчеты.ВалютаДокумента                                          КАК ВалютаДокумента,
	|		РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств                    КАК СтатьяДвиженияДенежныхСредств,
	|		Расчеты.Регистратор                                              КАК Регистратор,
	|		Расчеты.СвязанныйДокумент                                        КАК СвязанныйДокумент,
	|		РасчетыПоСрокам.РасчетныйДокумент                                КАК РасчетныйДокумент,
	|		Расчеты.КорОбъектРасчетов                                        КАК КорОбъектРасчетов,
	|		Расчеты.КорАналитикаУчетаПоПартнерам                             КАК КорАналитикаУчетаПоПартнерам,
	|		Расчеты.ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
	|		ЛОЖЬ                                                             КАК ЭтоКорректировка,
	|		ЛОЖЬ                                                             КАК ПриходДобавлен,
	|		ЛОЖЬ                                                             КАК ГрафикСписан,
	|		СУММА(РасчетыПоСрокам.Долг + РасчетыПоСрокам.Предоплата)         КАК Сумма,
	|		СУММА(РасчетыПоСрокам.ДолгРегл + РасчетыПоСрокам.ПредоплатаРегл) КАК СуммаРегл,
	|		СУММА(РасчетыПоСрокам.ДолгУпр + РасчетыПоСрокам.ПредоплатаУпр)   КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам 
	|				ПО Расчеты.Регистратор = РасчетыПоСрокам.ДокументРегистратор
	|				И Расчеты.КорОбъектРасчетов = РасчетыПоСрокам.ОбъектРасчетов
	|				И Расчеты.КорАналитикаУчетаПоПартнерам = РасчетыПоСрокам.АналитикаУчетаПоПартнерам
	|				И РасчетыПоСрокам.ОбъектРасчетов <> &ОбъектРасчетов
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.ЗаказКлиента              = &ОбъектРасчетов
	|		И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|		И Расчеты.Валюта                    = &ВалютаРасчетов
	|		И Расчеты.КорОбъектРасчетов         <> Неопределено
	|		//УсловиеПорядок
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.Период,
	|		НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ),
	|		Расчеты.ПорядокОперации,
	|		ВЫБОР КОГДА &ПорядокЗачетаПоДатеПлатежа
	|				ТОГДА Расчеты.ПорядокЗачетаПоДатеПлатежа
	|			ИНАЧЕ Расчеты.ПорядокОперации
	|		КОНЕЦ,
	|		Расчеты.ВалютаДокумента,
	|		РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств,
	|		Расчеты.Регистратор,
	|		Расчеты.СвязанныйДокумент,
	|		РасчетыПоСрокам.РасчетныйДокумент,
	|		Расчеты.ХозяйственнаяОперация,
	|		Расчеты.КорОбъектРасчетов,
	|		Расчеты.КорАналитикаУчетаПоПартнерам
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетыПоСрокам.Долг + РасчетыПоСрокам.Предоплата) > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиОплат.Период                                         КАК Период,
	|		ОстаткиОплат.ДатаВозникновения                              КАК ДатаВозникновения,
	|		//у оплат порядок зачета и порядок операции всегда один
	|		ОстаткиОплат.ПорядокЗачета                                  КАК ПорядокОперации,
	|		ОстаткиОплат.ПорядокЗачета                                  КАК ПорядокЗачета,
	|		ОстаткиОплат.ВалютаДокумента                                КАК ВалютаДокумента,
	|		ОстаткиОплат.СтатьяДвиженияДенежныхСредств                  КАК СтатьяДвиженияДенежныхСредств,
	|		ОстаткиОплат.РасчетныйДокумент                              КАК Регистратор,
	|		ОстаткиОплат.СвязанныйДокумент                              КАК СвязанныйДокумент,
	|		ОстаткиОплат.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|		НЕОПРЕДЕЛЕНО                                                КАК КорОбъектРасчетов,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|		ОстаткиОплат.ХозяйственнаяОперация                          КАК ХозяйственнаяОперация,
	|	
	|		ТИПЗНАЧЕНИЯ(ОстаткиОплат.РасчетныйДокумент) В (ТИП(Документ.КорректировкаРеализации),
	|		                                              ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
	|		ИСТИНА                                                      КАК ПриходДобавлен,
	|		ИСТИНА                                                      КАК ГрафикСписан,
	|	
	|		ОстаткиОплат.Предоплата                                     КАК Сумма,
	|		ОстаткиОплат.ПредоплатаРегл                                 КАК СуммаРегл,
	|		ОстаткиОплат.ПредоплатаУпр                                  КАК СуммаУпр
	|	ИЗ
	|		ВТРасчетыПоСрокамОстатки КАК ОстаткиОплат
	|	ГДЕ
	|		ОстаткиОплат.Предоплата > 0 ) КАК ВложенныйЗапрос
	|;
	|ВЫБРАТЬ
	|	РасчетыОплаты.Период                                      КАК Период,
	|	РасчетыОплаты.ДатаВозникновения                           КАК ДатаВозникновения,
	|	РасчетыОплаты.ПорядокОперации                             КАК ПорядокОперации,
	|	//Остатки сворачиваются по порядку зачета, он должен быть один на расчетный документ
	|	РасчетыОплаты.ПорядокЗачета                               КАК ПорядокЗачета,
	|	РасчетыОплаты.Регистратор                                 КАК Регистратор,
	|	РасчетыОплаты.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|	РасчетыОплаты.РасчетныйДокумент                           КАК РасчетныйДокумент,
	|	РасчетыОплаты.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	РасчетыОплаты.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
	|
	|	РасчетыОплаты.ЭтоКорректировка                            КАК ЭтоКорректировка,
	|	РасчетыОплаты.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	РасчетыОплаты.ВалютаДокумента                             КАК ВалютаДокумента,
	|	РасчетыОплаты.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|
	|	РасчетыОплаты.Сумма                                       КАК Сумма,
	|	РасчетыОплаты.СуммаРегл                                   КАК СуммаРегл,
	|	РасчетыОплаты.СуммаУпр                                    КАК СуммаУпр,
	|
	|	РасчетыОплаты.РучнойКурсРегл                              КАК РучнойКурсРегл,
	|	РасчетыОплаты.РучнойКурсУпр                               КАК РучнойКурсУпр,
	|
	|	РасчетыОплаты.ПриходДобавлен                              КАК ПриходДобавлен,
	|	РасчетыОплаты.ГрафикСписан                                КАК ГрафикСписан
	|ИЗ
	|	ВТРасчетыОплаты КАК РасчетыОплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗачета ВОЗР
	|";
	
	Если ГлобальныеПеременные.Порядок<>"" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//УсловиеПорядок","И Расчеты.ПорядокОперации >= &Порядок");
	КонецЕсли;
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,".РасчетыСКлиентами",".РасчетыСПоставщиками");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗаказКлиента","ЗаказПоставщику");
	КонецЕсли;
	
	Результат     = Запрос.Выполнить();
	РасчетыОплаты = Результат.Выгрузить();
	
	Возврат РасчетыОплаты;
	
КонецФункции

//Возвращает таблицу отгрузок/поставок для распределения.
Функция ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаРегистратора
	|	КОНЕЦ                                               КАК Период,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.ДатаРегистратора
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ)                                       КАК ДатаПлановогоПогашения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)       КАК ДатаВозникновения,
	|	Расчеты.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	Расчеты.ВариантОплаты                               КАК ВариантОплаты,
	|	Расчеты.ВалютаДокумента                             КАК ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	ВЫБОР КОГДА &ПорядокЗачетаПоДатеПлатежа
	|			ТОГДА Расчеты.ПорядокЗачетаПоДатеПлатежа
	|		ИНАЧЕ Расчеты.ПорядокОперации
	|	КОНЕЦ                                               КАК ПорядокЗачета,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	Расчеты.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|
	|	ВЫБОР
	|		КОГДА &ГрафикВДоговоре ТОГДА &ГрафикИсполненияДоговора
	|		КОГДА &РасчетыПоЗаказу ТОГДА &ОбъектРасчетов
	|		ИНАЧЕ Расчеты.ПродажаПоЗаказу 
	|	КОНЕЦ                                               КАК Заказ,
	|	ВЫБОР 
	|		КОГДА Расчеты.РасчетныйДокумент = Неопределено ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|			ТОГДА Расчеты.Регистратор 
	|		ИНАЧЕ Расчеты.РасчетныйДокумент
	|	КОНЕЦ                                               КАК РасчетныйДокумент,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ) < 0 ТОГДА 0
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ)
	|	КОНЕЦ КАК Сумма,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ)
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ)
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА -Расчеты.КОплате
	|						ИНАЧЕ Расчеты.КОплате
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА -Расчеты.КОплате
	|						ИНАЧЕ Расчеты.КОплате
	|					КОНЕЦ)
	|	КОНЕЦ КАК КОплате,
	|
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.КОтгрузке
	|			ИНАЧЕ Расчеты.КОтгрузке
	|		КОНЕЦ) КАК КОтгрузкеПоставке
	|	
	|ПОМЕСТИТЬ ВТРасчетыОтгрузкиПоставки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	&ЭтоРасчетыСКлиентами
	|	И Расчеты.Активность
	|	И Расчеты.ЗаказКлиента              = &ОбъектРасчетов
	|	И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Расчеты.Валюта                    = &ВалютаРасчетов
	|	//УсловиеПорядок
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаРегистратора
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1) 
	|			ТОГДА Расчеты.ДатаРегистратора
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ),
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.ВариантОплаты,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации,
	|	ВЫБОР КОГДА &ПорядокЗачетаПоДатеПлатежа
	|			ТОГДА Расчеты.ПорядокЗачетаПоДатеПлатежа
	|		ИНАЧЕ Расчеты.ПорядокОперации
	|	КОНЕЦ,
	|	Расчеты.Регистратор,
	|	Расчеты.СвязанныйДокумент,
	|	ВЫБОР
	|		КОГДА &ГрафикВДоговоре ТОГДА &ГрафикИсполненияДоговора
	|		КОГДА &РасчетыПоЗаказу ТОГДА &ОбъектРасчетов
	|		ИНАЧЕ Расчеты.ПродажаПоЗаказу 
	|	КОНЕЦ,
	|	Расчеты.РасчетныйДокумент
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -Расчеты.Сумма
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ) > 0 
	|	ИЛИ СУММА(Расчеты.КОплате) > 0
	|	ИЛИ СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -Расчеты.КОтгрузке
	|				ИНАЧЕ Расчеты.КОтгрузке
	|			КОНЕЦ) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаРегистратора
	|	КОНЕЦ                                               КАК Период,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.ДатаРегистратора
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ)                                       КАК ДатаПлановогоПогашения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)       КАК ДатаВозникновения,
	|	Расчеты.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	Расчеты.ВариантОплаты                               КАК ВариантОплаты,
	|	Расчеты.ВалютаДокумента                             КАК ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	ВЫБОР КОГДА &ПорядокЗачетаПоДатеПлатежа
	|			ТОГДА Расчеты.ПорядокЗачетаПоДатеПлатежа
	|		ИНАЧЕ Расчеты.ПорядокОперации
	|	КОНЕЦ                                               КАК ПорядокЗачета,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	Расчеты.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|
	|	ВЫБОР
	|		КОГДА &ГрафикВДоговоре ТОГДА &ГрафикИсполненияДоговора
	|		КОГДА &РасчетыПоЗаказу ТОГДА &ОбъектРасчетов
	|		ИНАЧЕ Расчеты.ЗакупкаПоЗаказу 
	|	КОНЕЦ                                               КАК Заказ,
	|	ВЫБОР 
	|		КОГДА Расчеты.РасчетныйДокумент = Неопределено ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|			ТОГДА Расчеты.Регистратор 
	|		ИНАЧЕ Расчеты.РасчетныйДокумент
	|	КОНЕЦ                                               КАК РасчетныйДокумент,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ)
	|	КОНЕЦ                                                    КАК Сумма,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ)
	|	КОНЕЦ                                                    КАК СуммаРегл,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ)
	|	КОНЕЦ                                                    КАК СуммаУпр,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА -Расчеты.КОплате
	|						ИНАЧЕ Расчеты.КОплате
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА -Расчеты.КОплате
	|						ИНАЧЕ Расчеты.КОплате
	|					КОНЕЦ)
	|	КОНЕЦ КАК КОплате,
	|	
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -Расчеты.КПоступлению
	|			ИНАЧЕ Расчеты.КПоступлению
	|		КОНЕЦ)                                                    КАК КОтгрузкеПоставке
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	НЕ &ЭтоРасчетыСКлиентами
	|	И Расчеты.Активность
	|	И Расчеты.ЗаказПоставщику           = &ОбъектРасчетов
	|	И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Расчеты.Валюта                    = &ВалютаРасчетов
	|	//УсловиеПорядок
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаРегистратора
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.ДатаРегистратора
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ),
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.ВариантОплаты,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации,
	|	ВЫБОР КОГДА &ПорядокЗачетаПоДатеПлатежа
	|			ТОГДА Расчеты.ПорядокЗачетаПоДатеПлатежа
	|		ИНАЧЕ Расчеты.ПорядокОперации
	|	КОНЕЦ,
	|	Расчеты.Регистратор,
	|	Расчеты.СвязанныйДокумент,
	|	ВЫБОР
	|		КОГДА &ГрафикВДоговоре ТОГДА &ГрафикИсполненияДоговора
	|		КОГДА &РасчетыПоЗаказу ТОГДА &ОбъектРасчетов
	|		ИНАЧЕ Расчеты.ЗакупкаПоЗаказу 
	|	КОНЕЦ,
	|	Расчеты.РасчетныйДокумент
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.Сумма
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ) > 0 
	|	ИЛИ СУММА(Расчеты.КОплате) > 0
	|	ИЛИ СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -Расчеты.КПоступлению
	|				ИНАЧЕ Расчеты.КПоступлению
	|			КОНЕЦ) <> 0
	|;
	|
	|ВЫБРАТЬ
	|	РасчетыОтгрузкиПоставки.Период                        КАК Период,
	|	РасчетыОтгрузкиПоставки.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	РасчетыОтгрузкиПоставки.ДатаВозникновения             КАК ДатаВозникновения,
	|	РасчетыОтгрузкиПоставки.ПорядокОперации               КАК ПорядокОперации,
	|	РасчетыОтгрузкиПоставки.ПорядокЗачета                 КАК ПорядокЗачета,
	|	РасчетыОтгрузкиПоставки.Регистратор                   КАК Регистратор,
	|	РасчетыОтгрузкиПоставки.Заказ                         КАК Заказ,
	|	РасчетыОтгрузкиПоставки.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	
	|	РасчетыОтгрузкиПоставки.Сумма                         КАК Сумма,
	|	РасчетыОтгрузкиПоставки.СуммаРегл                     КАК СуммаРегл,
	|	РасчетыОтгрузкиПоставки.СуммаУпр                      КАК СуммаУпр,
	|	РасчетыОтгрузкиПоставки.КОплате                       КАК КОплате,
	|	РасчетыОтгрузкиПоставки.КОтгрузкеПоставке             КАК КОтгрузкеПоставке,
	|	
	|	ЛОЖЬ                                                  КАК ПриходДобавлен,
	|	ЛОЖЬ                                                  КАК ПланОтгрузокПоставокСписан,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента = &ВалютаРегл 
	|		ИЛИ &ВалютаРасчетов =&ВалютаРегл
	|		ИЛИ РасчетыОтгрузкиПоставки.ХозяйственнаяОперация В (&НепересчитываемыеХО) КАК РучнойКурсРегл,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента = &ВалютаУпр 
	|		ИЛИ &ВалютаРасчетов =&ВалютаУпр
	|		ИЛИ РасчетыОтгрузкиПоставки.ХозяйственнаяОперация В (&НепересчитываемыеХО)  КАК РучнойКурсУпр,
	|	ВЫБОР
	|		КОГДА РасчетыОтгрузкиПоставки.Сумма = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыОтгрузкиПоставки.СуммаРегл
	|				/ РасчетыОтгрузкиПоставки.Сумма КАК ЧИСЛО(31,17))
	|	КОНЕЦ                                                 КАК КурсРегл,
	|	ВЫБОР
	|		КОГДА РасчетыОтгрузкиПоставки.Сумма = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыОтгрузкиПоставки.СуммаУпр
	|				/ РасчетыОтгрузкиПоставки.Сумма КАК ЧИСЛО(31,17))
	|	КОНЕЦ                                                 КАК КурсУпр,
	|	
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента               КАК ВалютаДокумента,
	|	РасчетыОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыОтгрузкиПоставки.Период                        КАК ДатаПереоценки,
	|	ВЫБОР 
	|		КОГДА &ЭтоРасчетыСКлиентами
	|			 	И (РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.СписаниеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.РасходныйКассовыйОрдер)
	|			ИЛИ НЕ &ЭтоРасчетыСКлиентами 
	|				И (РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.ПриходныйКассовыйОрдер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратАванса,
	|	РасчетыОтгрузкиПоставки.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|	ИЛИ РасчетыОтгрузкиПоставки.Регистратор ССЫЛКА Документ.КорректировкаПриобретения КАК ЭтоКорректировка,
	|	РасчетыОтгрузкиПоставки.СвязанныйДокумент КАК СвязанныйДокумент
	|	
	|ИЗ ВТРасчетыОтгрузкиПоставки КАК РасчетыОтгрузкиПоставки
	|ГДЕ
	|	РасчетыОтгрузкиПоставки.Сумма <> 0
	|	ИЛИ РасчетыОтгрузкиПоставки.КОтгрузкеПоставке < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСрокамОстатки.Период                                   КАК Период,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения                   КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения                        КАК ДатаВозникновения,
	|	РасчетыПоСрокамОстатки.ПорядокОперации                          КАК ПорядокОперации,
	|	РасчетыПоСрокамОстатки.ПорядокЗачета                            КАК ПорядокЗачета,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент                        КАК Регистратор,
	|	Неопределено                                                    КАК Заказ,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент                        КАК РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
	|		
	|	СУММА(РасчетыПоСрокамОстатки.Долг)                              КАК Сумма,
	|	СУММА(РасчетыПоСрокамОстатки.ДолгРегл)                          КАК СуммаРегл,
	|	СУММА(РасчетыПоСрокамОстатки.ДолгУпр)                           КАК СуммаУпр,
	|//В остатках по оплате только условная задолженность, тут уточняющая.
	|	СУММА(ЕСТЬNULL(РасчетыПланОплатОстатки.КОплате,0))              КАК КОплате,
	|//План по отгрузке/поставке остаток в ВТРасчетыПланОтгрузокПоставокОстатки
	|	0                                                               КАК КОтгрузкеПоставке, 
	|
	|	ИСТИНА                                                          КАК ПриходДобавлен,
	|	ИСТИНА                                                          КАК ПланОтгрузокПоставокСписан,
	|
	|	РасчетыПоСрокамОстатки.ВалютаДокумента = &ВалютаРегл 
	|		ИЛИ &ВалютаРасчетов =&ВалютаРегл
	|		ИЛИ РасчетыПоСрокамОстатки.ХозяйственнаяОперация В (&НепересчитываемыеХО)  КАК РучнойКурсРегл,
	|	РасчетыПоСрокамОстатки.ВалютаДокумента = &ВалютаУпр 
	|		ИЛИ &ВалютаРасчетов =&ВалютаУпр
	|		ИЛИ РасчетыПоСрокамОстатки.ХозяйственнаяОперация В (&НепересчитываемыеХО) КАК РучнойКурсУпр,
	|	ВЫБОР 
	|		КОГДА СУММА(РасчетыПоСрокамОстатки.Долг) = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(РасчетыПоСрокамОстатки.ДолгРегл) 
	|					/ СУММА(РасчетыПоСрокамОстатки.Долг) КАК ЧИСЛО(31,17))
	|	КОНЕЦ                                                           КАК КурсРегл,
	|	ВЫБОР 
	|		КОГДА СУММА(РасчетыПоСрокамОстатки.Долг) = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(РасчетыПоСрокамОстатки.ДолгУпр)
	|					/ СУММА(РасчетыПоСрокамОстатки.Долг) КАК ЧИСЛО(31,17))
	|	КОНЕЦ                                                           КАК КурсУпр,
	|
	|	РасчетыПоСрокамОстатки.ВалютаДокумента                          КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
	|	&ДатаПереоценки                                                 КАК ДатаПереоценки,
	|	ВЫБОР 
	|		КОГДА &ЭтоРасчетыСКлиентами
	|			 	И (РасчетыПоСрокамОстатки.РасчетныйДокумент Ссылка Документ.СписаниеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыПоСрокамОстатки.РасчетныйДокумент Ссылка Документ.РасходныйКассовыйОрдер)
	|			ИЛИ НЕ &ЭтоРасчетыСКлиентами 
	|				И (РасчетыПоСрокамОстатки.РасчетныйДокумент Ссылка Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыПоСрокамОстатки.РасчетныйДокумент Ссылка Документ.ПриходныйКассовыйОрдер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратАванса,
	|	ТИПЗНАЧЕНИЯ(РасчетыПоСрокамОстатки.РасчетныйДокумент)= ТИП(Документ.КорректировкаРеализации)
	|	ИЛИ ТИПЗНАЧЕНИЯ(РасчетыПоСрокамОстатки.РасчетныйДокумент)= ТИП(Документ.КорректировкаПриобретения) КАК ЭтоКорректировка,
	|	РасчетыПоСрокамОстатки.СвязанныйДокумент КАК СвязанныйДокумент
	|ИЗ
	|	ВТРасчетыПоСрокамОстатки КАК РасчетыПоСрокамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетыПланОплатОстатки КАК РасчетыПланОплатОстатки
	|			ПО РасчетыПоСрокамОстатки.РасчетныйДокумент = РасчетыПланОплатОстатки.ДокументПлан
	|				И РасчетыПоСрокамОстатки.ДатаПлановогоПогашения = РасчетыПланОплатОстатки.ДатаПлановогоПогашения
	|ГДЕ
	|	РасчетыПоСрокамОстатки.Долг > 0
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСрокамОстатки.Период,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения,
	|	РасчетыПоСрокамОстатки.ПорядокОперации,
	|	РасчетыПоСрокамОстатки.ПорядокЗачета,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ХозяйственнаяОперация,
	|	РасчетыПоСрокамОстатки.ВалютаДокумента,
	|	РасчетыПоСрокамОстатки.СвязанныйДокумент
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗачета ВОЗР";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//УсловиеПорядок","И Расчеты.ПорядокОперации          >= &Порядок");
		Если Запрос.Параметры.Регистратор = Тип("ДокументСсылка.ВводОстатков") Тогда
			Запрос.УстановитьПараметр("ДатаПереоценки", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлобальныеПеременные.Регистратор, "Дата"));
		Иначе
			Запрос.УстановитьПараметр("ДатаПереоценки",НачалоДня(Дата(Лев(ГлобальныеПеременные.Порядок,8))-1));
		КонецЕсли;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДатаПереоценки","РасчетыПоСрокамОстатки.Период");
	КонецЕсли;
	
	Результат       = Запрос.Выполнить();
	РасчетыОтгрузки = Результат.Выгрузить();
	
	Возврат РасчетыОтгрузки;
	
КонецФункции

//Возвращает таблицу курсов валют на промежуток между первой записью расчетов и текущей датой.
Функция ПолучитьКурсыВалют(Запрос, ДатаНачала, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|ПОМЕСТИТЬ ПериодыКурсов
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|ВЫБРАТЬ
	|	ПериодыКурсов.Дата КАК Дата,
	|	ВЫБОР КОГДА ЕСТЬNULL(КурсыВалют.Курс,0) = 0 И &ВалютаРасчетов <> &ВалютаРегл ТОГДА 0 ИНАЧЕ
	|	ЕСТЬNULL(КурсыВалют.Курс,1) / ЕСТЬNULL(КурсыВалют.Кратность,1) КОНЕЦ КАК КурсРегл,
	|	ВЫБОР КОГДА ЕСТЬNULL(КурсыВалют.Курс,0) = 0  И &ВалютаРасчетов <> &ВалютаРегл ТОГДА 0 ИНАЧЕ
	|	(ЕСТЬNULL(КурсыВалют.Курс,1) / ЕСТЬNULL(КурсыВалют.Кратность,1)) / (ЕСТЬNULL(КурсыВалютыУпр.Курс,1) / ЕСТЬNULL(КурсыВалютыУпр.Кратность,1)) КОНЕЦ КАК КурсУпр
	|ИЗ
	|	ПериодыКурсов КАК ПериодыКурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО ПериодыКурсов.Дата = КурсыВалют.Период
	|				И КурсыВалют.Валюта = &ВалютаРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютыУпр
	|			ПО ПериодыКурсов.Дата = КурсыВалютыУпр.Период
	|				И КурсыВалютыУпр.Валюта = &ВалютаУпр
	|УПОРЯДОЧИТЬ ПО
	|	Дата ВОЗР
	|;
	|ВЫБРАТЬ
	|	&ДатаНачала КАК Дата,
	|	ЕСТЬNULL(КурсыВалют.Курс,1) / ЕСТЬNULL(КурсыВалют.Кратность,1) КАК КурсРегл,
	|	(ЕСТЬNULL(КурсыВалют.Курс,1) / ЕСТЬNULL(КурсыВалют.Кратность,1)) / (ЕСТЬNULL(КурсыВалютыУпр.Курс,1) / ЕСТЬNULL(КурсыВалютыУпр.Кратность,1)) КАК КурсУпр
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаНачала) КАК КурсыВалют
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаНачала) КАК КурсыВалютыУпр
	|			ПО КурсыВалютыУпр.Валюта = &ВалютаУпр
	|ГДЕ КурсыВалют.Валюта = &ВалютаРасчетов";
	
	Запрос.УстановитьПараметр("ЕжедневнаяПереоценка", ГлобальныеПеременные.ЕжедневнаяПереоценка);
	Запрос.УстановитьПараметр("ДатаНачала",           ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",        НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВалютаРасчетов",       ГлобальныеПеременные.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаУпр",            Константы.ВалютаУправленческогоУчета.Получить());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	КурсыВалютыРасчетов = Результаты[1].Выгрузить();
	КурсыВалютСрезПоследних = Результаты[2].Выгрузить();
	
	ТекущийКурсРегл = КурсыВалютСрезПоследних[0].КурсРегл;
	ТекущийКурсУпр = КурсыВалютСрезПоследних[0].КурсУпр;
	ТекущаяДата = ДатаНачала;
	
	//Добавляем пропущенные дни.
	Если КурсыВалютыРасчетов.Количество() = 0 Тогда
		НовСтр = КурсыВалютыРасчетов.Добавить();
		НовСтр.Дата = ТекущаяДата + 86400;
		НовСтр.КурсРегл = ТекущийКурсРегл;
		НовСтр.КурсУпр = ТекущийКурсУпр;
	КонецЕсли;
	Для Каждого Стр Из КурсыВалютыРасчетов Цикл
		Если Стр.КурсРегл = 0 Тогда
			Стр.КурсРегл = ТекущийКурсРегл;
		Иначе
			ТекущийКурсРегл = Стр.КурсРегл;
		КонецЕсли;
		Если Стр.КурсУпр = 0 Тогда
			Стр.КурсУпр = ТекущийКурсУпр;
		Иначе
			ТекущийКурсУпр = Стр.КурсУпр;
		КонецЕсли;
	КонецЦикла;
	
	КурсыВалютыРасчетов.Индексы.Добавить("Дата");
	
	Возврат КурсыВалютыРасчетов;
	
КонецФункции

//Возвращает таблицу накладных и зачтенных на них, на момент пересчета, авансов.
Функция ПолучитьДанныеНакладных(Запрос)
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.СвязанныйДокумент КАК СвязанныйДокумент
	|ПОМЕСТИТЬ ВтСвязанныеДокументы
	|ИЗ (
	|	ВЫБРАТЬ
	|		Оплаты.СвязанныйДокумент КАК СвязанныйДокумент
	|	ИЗ ВТРасчетыОплаты КАК Оплаты
	|	ГДЕ ТИПЗНАЧЕНИЯ(Оплаты.Регистратор) В (ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ 
	|		Отгрузки.СвязанныйДокумент КАК СвязанныйДокумент
	|	ИЗ ВТРасчетыОтгрузкиПоставки КАК Отгрузки
	|	ГДЕ ТИПЗНАЧЕНИЯ(Отгрузки.Регистратор) В (ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения))) КАК Расчеты
	|;
	|ВЫБРАТЬ
	|	СвязанныеДокументы.СвязанныйДокумент КАК Накладная,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.Предоплата - ВТРасчетыПоСрокамДо.Долг
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.Долг
	|		КОНЕЦ,0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.ПредоплатаРегл - ВТРасчетыПоСрокамДо.ДолгРегл
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.ДолгРегл
	|		КОНЕЦ,0)) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.ПредоплатаУпр - ВТРасчетыПоСрокамДо.ДолгУпр
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.ДолгУпр
	|		КОНЕЦ,0)) КАК СуммаУпр
	|ИЗ
	|	ВтСвязанныеДокументы КАК СвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ВТРасчетыПоСрокамДо
	|			ПО СвязанныеДокументы.СвязанныйДокумент = ВТРасчетыПоСрокамДо.ДокументРегистратор
	|				И ВТРасчетыПоСрокамДо.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|				И ВТРасчетыПоСрокамДо.ОбъектРасчетов              = &ОбъектРасчетов
	|				И ВТРасчетыПоСрокамДо.Валюта                      = &ВалютаРасчетов
	|				И ВТРасчетыПоСрокамДо.ПорядокОперации             < &Порядок
	|				И НЕ ВТРасчетыПоСрокамДо.ДокументРегистратор      = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязанныеДокументы.СвязанныйДокумент
	|";
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентамиПоСрокам", "РасчетыСПоставщикамиПоСрокам");		
	КонецЕсли;
	
	ДанныеНакладных = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеНакладных
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетодыДобавленияСтрок

//Переоценивает долг до момента оплаты.
Процедура ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, СтрокаОтгрузки, СтрокаОплаты = Неопределено, ПереоценкаНаДатуОплаты = ИСТИНА)
	
	Если ГлобальныеПеременные.ЕжедневнаяПереоценка Тогда
		ДатаКэш = НачалоДня(СтрокаОтгрузки.ДатаПереоценки);
	Иначе
		ДатаКэш = НачалоДня(КонецМесяца(СтрокаОтгрузки.ДатаПереоценки));
	КонецЕсли;
	
	ОкончательнаяДатаПереоценки = ?(СтрокаОплаты <> Неопределено, НачалоДня(СтрокаОплаты.Период), ТекущаяДатаСеанса());
	
	Пока ДатаКэш < ОкончательнаяДатаПереоценки Цикл
		
		//Отгрузку могли уже переоценить до даты предыдущей оплаты.
		Если ДатаКэш > СтрокаОтгрузки.ДатаПереоценки Тогда
			СтрокаКурса = ГлобальныеПеременные.ТаблицаКурсовВалют.Найти(ДатаКэш, "Дата");
			
			СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл, 2) - СтрокаОтгрузки.СуммаРегл;
			СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсУпр, 2) - СтрокаОтгрузки.СуммаУпр;
			
			Если СуммаПереоценкиРегл <> 0 ИЛИ СуммаПереоценкиУпр <> 0 Тогда
				ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, КонецДня(ДатаКэш), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
			КонецЕсли;
			
			СтрокаОтгрузки.СуммаРегл      = СтрокаОтгрузки.СуммаРегл + СуммаПереоценкиРегл;
			СтрокаОтгрузки.СуммаУпр       = СтрокаОтгрузки.СуммаУпр + СуммаПереоценкиУпр;
			
			СтрокаОтгрузки.ДатаПереоценки = ДатаКэш;
			
		КонецЕсли;
		
		Если ГлобальныеПеременные.ЕжедневнаяПереоценка Тогда
			ДатаКэш = ДатаКэш + 86400;
		Иначе
			ДатаКэш = НачалоДня(КонецМесяца(КонецМесяца(ДатаКэш)+1));
		КонецЕсли;
		
	КонецЦикла;
	
	//Требуется переоценка на дату оплаты.
	Если СтрокаОплаты <> Неопределено И НачалоДня(СтрокаОплаты.Период) > СтрокаОтгрузки.ДатаПереоценки И ПереоценкаНаДатуОплаты Тогда
		
		СтрокаКурса = ГлобальныеПеременные.ТаблицаКурсовВалют.Найти(НачалоДня(СтрокаОплаты.Период), "Дата");
		//Долг всегда переоценивается на дату оплаты.
		СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл, 2) - СтрокаОтгрузки.СуммаРегл;
		СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсУпр, 2) - СтрокаОтгрузки.СуммаУпр;
		
		Если СуммаПереоценкиРегл <> 0 ИЛИ СуммаПереоценкиУпр <> 0 Тогда
			ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, НачалоДня(СтрокаОплаты.Период), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
		КонецЕсли;
		
		СтрокаОтгрузки.СуммаРегл      = СтрокаОтгрузки.СуммаРегл + СуммаПереоценкиРегл;
		СтрокаОтгрузки.СуммаУпр       = СтрокаОтгрузки.СуммаУпр + СуммаПереоценкиУпр;
		
		СтрокаОтгрузки.ДатаПереоценки = НачалоДня(СтрокаОплаты.Период);
		
	КонецЕсли;
	
КонецПроцедуры

//Добавляет записи прихода по ресурсам долг и предоплата.
Процедура ДобавитьПриход(ГлобальныеПеременные, ТаблицаДвиженийРасчетов, СтрокаРасчетов, ТипИсточника)
	
	НовСтр = ТаблицаДвиженийРасчетов.Добавить();
	НовСтр.ВидДвижения                   = ВидДвиженияНакопления.Приход;
	НовСтр.ДокументРегистратор           = СтрокаРасчетов.Регистратор;
	НовСтр.РасчетныйДокумент             = СтрокаРасчетов.РасчетныйДокумент;
	НовСтр.ХозяйственнаяОперация         = СтрокаРасчетов.ХозяйственнаяОперация;
	НовСтр.ВалютаДокумента               = СтрокаРасчетов.ВалютаДокумента;
	НовСтр.ДатаВозникновения             = СтрокаРасчетов.ДатаВозникновения;
	НовСтр.Период                        = СтрокаРасчетов.Период;
	НовСтр.ПорядокЗачета                 = СтрокаРасчетов.ПорядокЗачета;
	НовСтр.ПорядокОперации               = СтрокаРасчетов.ПорядокОперации;
	НовСтр.СтатьяДвиженияДенежныхСредств = СтрокаРасчетов.СтатьяДвиженияДенежныхСредств;

	Если ТипИсточника = "Оплата" Тогда
		
		НовСтр.СвязанныйДокумент     = СтрокаРасчетов.СвязанныйДокумент;
		НовСтр.КорОбъектРасчетов     = СтрокаРасчетов.КорОбъектРасчетов;
		
		НовСтр.Предоплата     = СтрокаРасчетов.Сумма;
		НовСтр.ПредоплатаРегл = СтрокаРасчетов.СуммаРегл;
		НовСтр.ПредоплатаУпр  = СтрокаРасчетов.СуммаУпр;
		НовСтр.ДатаПлановогоПогашения = Дата(1,1,1);
		
	ИначеЕсли ТипИсточника = "ОтгрузкаПоставка" Тогда
		
		НовСтр.Долг                   = СтрокаРасчетов.Сумма;
		НовСтр.ДолгРегл               = СтрокаРасчетов.СуммаРегл;
		НовСтр.ДолгУпр                = СтрокаРасчетов.СуммаУпр;
		НовСтр.ДатаПлановогоПогашения = СтрокаРасчетов.ДатаПлановогоПогашения;
		
		//Записи в ДанныеНакладных может не быть.
		Если ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор] = Неопределено Тогда
			ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаРасчетов.Регистратор, СтруктураСумм());
		КонецЕсли;
		
		//Если добавляем приход, значит авансы уже зачтены, и осталась часть долга по курсу накладной.
		ДанныеНакладной = ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор];
		ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента + СтрокаРасчетов.Сумма;
		ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + СтрокаРасчетов.СуммаРегл;
		ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + СтрокаРасчетов.СуммаУпр;
		
	КонецЕсли;
	
	СтрокаРасчетов.ПриходДобавлен = Истина;
	
КонецПроцедуры

//Добавляет записи переоценки долга.
Процедура ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, Период, СтрокаРасчетов, Тип, СуммаРегл, СуммаУпр)
	
	Если НЕ ГлобальныеПеременные.Свойство("ТаблицаКурсовВалют") Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокПереоценки = ГлобальныеПеременные.ПорядокПереоценки.Получить(Период);
	Если ПорядокПереоценки = Неопределено Тогда
		ПорядокПереоценки = Порядок(Период,"",, Тип("ДокументСсылка.РасчетКурсовыхРазниц"));
		ГлобальныеПеременные.ПорядокПереоценки.Вставить(Период, ПорядокПереоценки);
	КонецЕсли;
	
	Если СуммаРегл < 0 ИЛИ СуммаУпр < 0 Тогда
		СтрокаПереоценки = ТаблицаРасчетовПоДокументам.Добавить();
		СтрокаПереоценки.ВидДвижения              = ВидДвиженияНакопления.Расход;
		СтрокаПереоценки.ДокументРегистратор      = ГлобальныеПеременные.ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		СтрокаПереоценки.ХозяйственнаяОперация    = ГлобальныеПеременные.ХозяйственныеОперации["ПереоценкаОтрицательная"];
		СтрокаПереоценки.РасчетныйДокумент        = СтрокаРасчетов.РасчетныйДокумент;
		СтрокаПереоценки.ВалютаДокумента          = СтрокаРасчетов.ВалютаДокумента;
		СтрокаПереоценки.ДатаВозникновения        = СтрокаРасчетов.ДатаВозникновения;
		СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачета;
		СтрокаПереоценки.Период                   = Период;
		СтрокаПереоценки.ПорядокОперации          = ПорядокПереоценки;
		
		Если Тип = "Долг" Тогда
			СтрокаПереоценки.ДолгРегл             = ?(СуммаРегл < 0, -СуммаРегл, 0);
			СтрокаПереоценки.ДолгУпр              = ?(СуммаУпр < 0, -СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = СтрокаРасчетов.ДатаПлановогоПогашения;
		Иначе
			СтрокаПереоценки.ПредоплатаРегл       = ?(СуммаРегл < 0, -СуммаРегл, 0);
			СтрокаПереоценки.ПредоплатаУпр        = ?(СуммаУпр < 0, -СуммаУпр, 0);
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаРегл > 0 ИЛИ СуммаУпр > 0 Тогда
		СтрокаПереоценки = ТаблицаРасчетовПоДокументам.Добавить();
		СтрокаПереоценки.ВидДвижения              = ВидДвиженияНакопления.Приход;
		СтрокаПереоценки.ДокументРегистратор      = ГлобальныеПеременные.ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		СтрокаПереоценки.ХозяйственнаяОперация    = ГлобальныеПеременные.ХозяйственныеОперации["ПереоценкаПоложительная"];
		СтрокаПереоценки.РасчетныйДокумент        = СтрокаРасчетов.РасчетныйДокумент;
		СтрокаПереоценки.ВалютаДокумента          = СтрокаРасчетов.ВалютаДокумента;
		СтрокаПереоценки.ДатаВозникновения        = СтрокаРасчетов.ДатаВозникновения;
		СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачета;
		СтрокаПереоценки.Период                   = Период;
		СтрокаПереоценки.ПорядокОперации          = ПорядокПереоценки;
		
		Если Тип = "Долг" Тогда
			СтрокаПереоценки.ДолгРегл               = ?(СуммаРегл > 0, СуммаРегл, 0);
			СтрокаПереоценки.ДолгУпр                = ?(СуммаУпр > 0, СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения = СтрокаРасчетов.ДатаПлановогоПогашения;
		Иначе
			СтрокаПереоценки.ПредоплатаРегл         = ?(СуммаРегл > 0, СуммаРегл, 0);
			СтрокаПереоценки.ПредоплатаУпр          = ?(СуммаУпр > 0, СуммаУпр, 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Добавляет расходные движения по плану отгрузок.
Процедура СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаДвиженийПланОтгрузокПоставок, СтрокаРасчетов, ПланыОтгрузок)
	
	СуммаКРаспределению = -СтрокаРасчетов.КОтгрузкеПоставке;
	
	//Расчеты по договору, график по заказу.
	//Строки плана подбираются по заказу накладной, а не по объекту расчетов в общем.
	Если (ЗначениеЗаполнено(СтрокаРасчетов.Заказ) ИЛИ ГлобальныеПеременные.ГрафикВДоговоре) И СуммаКРаспределению > 0 Тогда
		
		СтрокиПлана = ПланыОтгрузок.НайтиСтроки(Новый Структура("Регистратор", СтрокаРасчетов.Заказ));
		Для Каждого СтрокаПланаОтгрузкиПоставки Из СтрокиПлана Цикл
			Если СтрокаПланаОтгрузкиПоставки.КОтгрузкеПоставке = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовСтр = ТаблицаДвиженийПланОтгрузокПоставок.Добавить();
			НовСтр.ВидДвижения              = ВидДвиженияНакопления.Расход;
			
			НовСтр.ДокументРегистратор      = СтрокаРасчетов.Регистратор;
			НовСтр.ДокументПлан             = СтрокаПланаОтгрузкиПоставки.Регистратор;
			НовСтр.Период                   = СтрокаРасчетов.Период;
			НовСтр.ДатаПлановогоПогашения   = СтрокаПланаОтгрузкиПоставки.ДатаПлановогоПогашения;
			НовСтр.ДатаВозникновения        = СтрокаПланаОтгрузкиПоставки.ДатаВозникновения;
			НовСтр.ПорядокОперации          = СтрокаРасчетов.ПорядокОперации;
			НовСтр.ПорядокЗачета            = СтрокаПланаОтгрузкиПоставки.ПорядокЗачета;
			
			НовСтр.Сумма = ВзаиморасчетыСервер.СписатьСумму(СтрокаПланаОтгрузкиПоставки.КОтгрузкеПоставке, СуммаКРаспределению);
		КонецЦикла;
		Для каждого СтрокаПланаОтгрузкиПоставки Из СтрокиПлана Цикл
			Если СтрокаПланаОтгрузкиПоставки.КОтгрузкеПоставке=0 Тогда
				ПланыОтгрузок.Удалить(СтрокаПланаОтгрузкиПоставки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаРасчетов.ПланОтгрузокПоставокСписан = Истина;
	
КонецПроцедуры

//Добавляет записи по плану оплат.
Процедура СкорректироватьПлановыеОплаты(ГлобальныеПеременные, ТаблицаДвиженийПланОплат, СтрокаРасчетов, ЗНАЧ СуммаКРаспределению, ТипИсточника, ПланыОплат)
	
	//Закрывает только условный план.
	Если ТипИсточника = "Аванс" Тогда
		
		Пока СуммаКРаспределению > 0 И ПланыОплат.Количество() > 0 Цикл
		
			СтрокаПланаОплаты = ПланыОплат[0];
			
				Если СтрокаПланаОплаты.КОплате = 0 Тогда
					ПланыОплат.Удалить(0);
					Продолжить;
				КонецЕсли;
				ПоследняяЗапись = ТаблицаДвиженийПланОплат[ТаблицаДвиженийПланОплат.Количество()-1];
				Если ПоследняяЗапись.ДокументРегистратор = СтрокаРасчетов.Регистратор И
					ПоследняяЗапись.ДокументПлан = СтрокаПланаОплаты.Регистратор И
					ПоследняяЗапись.ДатаПлановогоПогашения = СтрокаПланаОплаты.ДатаПлановогоПогашения И
					ПоследняяЗапись.ВариантОплаты = СтрокаПланаОплаты.ВариантОплаты Тогда
					НовСтр = ПоследняяЗапись;
				Иначе
					НовСтр = ТаблицаДвиженийПланОплат.Добавить();
					НовСтр.ВидДвижения              = ВидДвиженияНакопления.Расход;
					НовСтр.ДокументРегистратор      = СтрокаРасчетов.Регистратор;
					НовСтр.ДокументПлан             = СтрокаПланаОплаты.Регистратор;
					НовСтр.Период                   = СтрокаРасчетов.Период;
					НовСтр.ДатаПлановогоПогашения   = СтрокаПланаОплаты.ДатаПлановогоПогашения;
					НовСтр.ДатаВозникновения        = СтрокаПланаОплаты.ДатаВозникновения;
					НовСтр.ХозяйственнаяОперация    = СтрокаРасчетов.ХозяйственнаяОперация;
					НовСтр.ПорядокОперации          = СтрокаРасчетов.ПорядокОперации;
					НовСтр.ПорядокЗачета            = СтрокаПланаОплаты.ПорядокЗачета;
					НовСтр.ВариантОплаты            = СтрокаПланаОплаты.ВариантОплаты;
					НовСтр.КОплате                  = 0;
				КонецЕсли;
				
				НовСтр.КОплате = НовСтр.КОплате + ВзаиморасчетыСервер.СписатьСумму(СтрокаПланаОплаты.КОплате, СуммаКРаспределению);//
				
				Если СтрокаПланаОплаты.КОплате = 0 Тогда
					ПланыОплат.Удалить(0);
				КонецЕсли;
		КонецЦикла;
	//Закрывает то, что зачла оплата.
	ИначеЕсли ТипИсточника = "ОплатаНакладной" Тогда
		
		СтрокиЗаказа = ПланыОплат.НайтиСтроки(Новый Структура("ДокументПлан", СтрокаРасчетов.РасчетныйДокумент));
		Для Каждого СтрокаПланаОплаты Из СтрокиЗаказа Цикл
			Если СтрокаПланаОплаты.КОплате = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если СуммаКРаспределению = 0 Тогда
				Прервать;
			КонецЕсли;
			
			НовСтр = ТаблицаДвиженийПланОплат.Добавить();
			НовСтр.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаРасчетов);
			НовСтр.ХозяйственнаяОперация = ГлобальныеПеременные.ХозяйственныеОперации["ПогашениеЗадолженности"];
			НовСтр.ДокументПлан  = СтрокаРасчетов.РасчетныйДокумент;
			НовСтр.КОплате       = ВзаиморасчетыСервер.СписатьСумму(СтрокаПланаОплаты.КОплате, СуммаКРаспределению);
			НовСтр.ВариантОплаты = СтрокаПланаОплаты.ВариантОплаты;
			
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = "УточнениеПлана" Тогда
		
		//Расчеты по договору, график по заказу.
		//Строки плана подбираются по заказу накладной,а не по объекту расчетов в общем.
		Если (ЗначениеЗаполнено(СтрокаРасчетов.Заказ) ИЛИ ГлобальныеПеременные.ГрафикВДоговоре) И СуммаКРаспределению > 0 Тогда
			
			ДанныеНакладной = ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор]; //Должна уже быть внесена в ДобавитьПриход.
			СтрокаПредыдущегоСписанияПлановойОплаты = Неопределено;
			Если ДанныеНакладной.ИндексРасходПланОплаты <> -1 Тогда
				СтрокаПредыдущегоСписанияПлановойОплаты = ТаблицаДвиженийПланОплат[ДанныеНакладной.ИндексРасходПланОплаты];
			КонецЕсли;
			
			СтрокиЗаказа = ПланыОплат.НайтиСтроки(Новый Структура("Регистратор", СтрокаРасчетов.Заказ));
			Для каждого СтрокаПланаОплаты Из СтрокиЗаказа Цикл
				
				Если СтрокаПланаОплаты.КОплате = 0 ИЛИ СтрокаПланаОплаты.ПорядокОперации > СтрокаРасчетов.ПорядокОперации Тогда 
					Продолжить;
				КонецЕсли;
				
				Пока СуммаКРаспределению > 0 И СтрокаПланаОплаты.КОплате > 0 Цикл
					
					//Если накладная проведена несколькими строками и уже списывала с этой строки плана оплаты
					//то новую строку добавлять не нужно.
					Если СтрокаПредыдущегоСписанияПлановойОплаты<>Неопределено И
						СтрокаПредыдущегоСписанияПлановойОплаты.ДокументРегистратор = СтрокаРасчетов.Регистратор И
						СтрокаПредыдущегоСписанияПлановойОплаты.ДокументПлан = СтрокаПланаОплаты.Регистратор И
						СтрокаПредыдущегоСписанияПлановойОплаты.ДатаПлановогоПогашения = СтрокаПланаОплаты.ДатаПлановогоПогашения Тогда
						
						НовСтр = СтрокаПредыдущегоСписанияПлановойОплаты;
						
					Иначе
						НовСтр = ТаблицаДвиженийПланОплат.Добавить();
						НовСтр.ВидДвижения = ВидДвиженияНакопления.Расход;
						
						ДанныеНакладной.ИндексРасходПланОплаты = ТаблицаДвиженийПланОплат.Индекс(НовСтр);
						НовСтр.ДокументРегистратор      = СтрокаРасчетов.Регистратор;
						НовСтр.ДокументПлан             = СтрокаПланаОплаты.Регистратор;
						НовСтр.Период                   = СтрокаРасчетов.Период;
						НовСтр.ДатаПлановогоПогашения   = СтрокаПланаОплаты.ДатаПлановогоПогашения;
						НовСтр.ДатаВозникновения        = СтрокаПланаОплаты.ДатаВозникновения;
						НовСтр.ПорядокОперации          = СтрокаРасчетов.ПорядокОперации;
						НовСтр.ПорядокЗачета            = СтрокаПланаОплаты.ПорядокЗачета;
						НовСтр.ВариантОплаты            = СтрокаПланаОплаты.ВариантОплаты;
						НовСтр.ХозяйственнаяОперация    = СтрокаРасчетов.ХозяйственнаяОперация;
					КонецЕсли;
					
					НовСтр.КОплате = -(?(НовСтр.КОплате=Неопределено,0,НовСтр.КОплате) - ВзаиморасчетыСервер.СписатьСумму(СтрокаПланаОплаты.КОплате, СуммаКРаспределению));
					
				КонецЦикла;
			КонецЦикла;
			Для каждого СтрокаПланаОплаты Из СтрокиЗаказа Цикл
				Если СтрокаПланаОплаты.КОплате=0 Тогда
					ПланыОплат.Удалить(СтрокаПланаОплаты);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = "ОтгрузкаПоставка" Тогда
		
		//Добавление плана в планы оплат с сохранением сортировки.
		Если СуммаКРаспределению > 0 Тогда
			
			//Вставляем документ в план оплат.
			сч = 0;
			НовСтр = Неопределено;
			//Если есть строки с порядком зачета позже текущей то надо найти куда вставить запись.
			Если ГлобальныеПеременные.МаксимальныйПорядокПланаОплат > СтрокаРасчетов.ПорядокОперации Тогда
				Для сч=0 По ПланыОплат.Количество()-1 Цикл
					Если ПланыОплат[сч].ПорядокЗачета > СтрокаРасчетов.ПорядокОперации Тогда
						НовСтр = ПланыОплат.Вставить(сч);
						Прервать;
					Иначе
						сч=сч+1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НовСтр = Неопределено Тогда
				НовСтр = ПланыОплат.Добавить();
				ГлобальныеПеременные.МаксимальныйПорядокПланаОплат = СтрокаРасчетов.ПорядокЗачета;
			КонецЕсли;
			
			НовСтр.Регистратор                = СтрокаРасчетов.Регистратор;
			НовСтр.ДокументПлан               = СтрокаРасчетов.РасчетныйДокумент;
			НовСтр.Период                     = СтрокаРасчетов.Период;
			НовСтр.ДатаПлановогоПогашения     = СтрокаРасчетов.ДатаПлановогоПогашения;
			НовСтр.ДатаВозникновения          = СтрокаРасчетов.ДатаВозникновения;
			НовСтр.ПорядокОперации            = СтрокаРасчетов.ПорядокЗачета;
			НовСтр.ПорядокЗачета              = СтрокаРасчетов.ПорядокЗачета;
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				НовСтр.ВариантОплаты              = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
			Иначе
				НовСтр.ВариантОплаты              = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
			КонецЕсли;
			НовСтр.ХозяйственнаяОперация      = СтрокаРасчетов.ХозяйственнаяОперация;
			НовСтр.КОплате                    = СуммаКРаспределению;
			
			НовСтрДвижений = ТаблицаДвиженийПланОплат.Добавить();
			НовСтрДвижений.ВидДвижения               = ВидДвиженияНакопления.Приход;
			НовСтрДвижений.ДокументРегистратор       = НовСтр.Регистратор;
			НовСтрДвижений.ДокументПлан              = СтрокаРасчетов.РасчетныйДокумент;
			НовСтрДвижений.ВариантОплаты             = НовСтр.ВариантОплаты;
			НовСтрДвижений.Период                    = НовСтр.Период;
			НовСтрДвижений.ДатаПлановогоПогашения    = НовСтр.ДатаПлановогоПогашения;
			НовСтрДвижений.ДатаВозникновения         = НовСтр.ДатаВозникновения;
			НовСтрДвижений.КОплате                   = СуммаКРаспределению;
			НовСтрДвижений.ПорядокЗачета             = НовСтр.ПорядокЗачета;
			НовСтрДвижений.ПорядокОперации           = НовСтр.ПорядокОперации;
			НовСтрДвижений.ХозяйственнаяОперация     = СтрокаРасчетов.ХозяйственнаяОперация;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Пересчитывает сумму регл. и упр. учета строки расчетов по курсу связанного документа, если он проведен.
Процедура ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаРасчетов)
	
	Если СтрокаРасчетов.ЭтоКорректировка
		И ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент] <> Неопределено
		И ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента <> 0 Тогда
		СтрокаРасчетов.СуммаРегл = Окр(СтрокаРасчетов.Сумма *
			(ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаРегл
				/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		СтрокаРасчетов.СуммаУпр = Окр(СтрокаРасчетов.Сумма *
			(ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаУпр
				/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
	КонецЕсли;
	
	СтрокаРасчетов.ЭтоКорректировка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеФункции

//Возвращает таблицу объектов расчетов по которым есть движения по ресурсам "Сумма", "КОплате", "КОтгрузке"
//
// Параметры:
//	- Период - Дата - Необязательный, дата, после которой искать движения по регистрам.
//
Функция ПолучитьВсеОбъекты(Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ЗаказКлиента КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|					ТИП(Документ.ПриходныйКассовыйОрдер),
	|					ТИП(Документ.ОперацияПоПлатежнойКарте),
	|					ТИП(Документ.РасходныйКассовыйОрдер),
	|					ТИП(Документ.СписаниеБезналичныхДенежныхСредств))
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	(РасчетыСКлиентами.Сумма <> 0 ИЛИ РасчетыСКлиентами.КОплате <> 0 ИЛИ РасчетыСКлиентами.КОтгрузке <> 0)
	|	И РасчетыСКлиентами.Период >= &Период
	|	И РасчетыСКлиентами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|					ТИП(Документ.ПриходныйКассовыйОрдер),
	|					ТИП(Документ.ОперацияПоПлатежнойКарте),
	|					ТИП(Документ.РасходныйКассовыйОрдер),
	|					ТИП(Документ.СписаниеБезналичныхДенежныхСредств))
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	(РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0 ИЛИ РасчетыСПоставщиками.КПоступлению <> 0)
	|	И РасчетыСПоставщиками.Период >= &Период
	|	И РасчетыСПоставщиками.Активность
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбработки
	|";
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено,Дата(1,1,1),Период));
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Для целей сортировки документов в пределах 1 секунды.
Функция ВидТипДокумента(ТипДокумента, ВидДвижения=Неопределено) Экспорт
	
	//	При добавлении документа - добавить в конец с новым номером, не меняя типы других документов.
	
	Вид = "";
	
	Если ТипДокумента = Тип("ДокументСсылка.РасчетКурсовыхРазниц") ИЛИ ТипДокумента = Тип("ДокументСсылка.РегистраторРасчетов")Тогда
		Вид="9"; Тип="99";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Вид="2"; Тип="01";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Вид="1"; Тип="14";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Вид="1"; Тип="16";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Вид="2"; Тип="39";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Вид="2"; Тип="35";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		Вид="2"; Тип="02";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Вид="4"; Тип="41";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		Вид="4"; Тип="22";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		Вид="4"; Тип="23";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Вид="4"; Тип="33";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводОстатков") Тогда
		Вид="2"; Тип="03";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		Вид="4"; Тип="04";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		//По клиентам всегда расход.
		Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			Вид="5"; Тип="07";
		Иначе
			Вид="6"; Тип="07";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Вид="4"; Тип="06";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			Вид="5"; Тип="07";
		Иначе
			Вид="6"; Тип="07";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		Вид="2"; Тип="09";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика") Тогда
		Вид="2"; Тип="10";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГрафикИсполненияДоговора") Тогда
		Вид="1"; Тип="12";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Вид="1"; Тип="17";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		Вид="1"; Тип="18";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Вид="3"; Тип="19";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Вид="3"; Тип="20";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
		Вид="1"; Тип="21";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		Вид="2"; Тип="25";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		Вид="2"; Тип="26";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		Вид="2"; Тип="27";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		Вид="2"; Тип="28";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		Вид="2"; Тип="30";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") Тогда
		Вид="2"; Тип="31";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		Вид="2"; Тип="32";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		Вид="2"; Тип="36";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Вид="4"; Тип="37";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Вид="4"; Тип="38";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Вид="2"; Тип="40";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеЗадолженности") Тогда
		Вид="4"; Тип="42";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Вид="2"; Тип="43";
	//++ НЕ УТ
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров") Тогда
		Вид="2"; Тип="11";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		Вид="1"; Тип="15";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыбытиеДенежныхДокументов") Тогда
		Вид="2"; Тип="08";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОператораСистемыПлатон") Тогда
		Вид="2"; Тип="44";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		Вид="2"; Тип="29";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
		Вид="2"; Тип="34";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупТоваровХранителем") Тогда
		Вид="2"; Тип="45";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеПринятыхНаХранениеТоваров") Тогда
		Вид="2"; Тип="46";
	//-- НЕ УТ
	//++ НЕ УТКА
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		Вид="1"; Тип="13";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетДавальцу") Тогда
		Вид="2"; Тип="24";
	//-- НЕ УТКА
	КонецЕсли;
	
	Если Вид = "" Тогда
		
		ПодробноеПредставлениеОшибки = СтрЗаменить(
			НСтр("ru = 'Не определен порядок типа документа %1 в ""ОперативныеВзаиморасчетыСервер.ВидТипДокумента"".';
				|en = 'The procedure of document type %1 is not defined in  ""ОперативныеВзаиморасчетыСервер.ВидТипДокумента"".'"),
			"%1",
			ТипДокумента);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Оперативные взаиморасчеты с контрагентами';
										|en = 'Real-time mutual settlements with counterparties'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	Иначе
		Возврат Новый Структура("Вид,Тип",Вид,Тип);
	КонецЕсли;
	
КонецФункции

//Возвращает структуру данных реализации для передачи между служебными процедурами.
//
// Возвращаемое значение:
//	Структура - структура данных реализации.
//		* СуммаОстаток для корректировок - при первом упоминании формируется запись с первоначальной суммой, далее из нее вычитаются оплаты и корректировки.
//		* Остальные суммы для расчета среднего курса и, наверное, формирования движений по Суммам документов в валюте регл.
//		* ИндексРасходПланОплаты - Индекс последней записи с расходом по плану оплаты.
//			Так как реализация может двигаться несколькими строками возможна ситуация,
//			когда одна строка реализации закроет часть плановой оплаты, а потом другая строка закроет еще часть той же строки плановой оплаты
//			образуются неуникальные строки в наборе записей.
Функция СтруктураСумм(СуммаДокумента = 0, СуммаДокументаРегл = 0, СуммаДокументаУпр = 0)
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураСумм.Вставить("СуммаДокументаРегл", СуммаДокументаРегл);
	СтруктураСумм.Вставить("СуммаДокументаУпр", СуммаДокументаУпр);
	СтруктураСумм.Вставить("ИндексРасходПланОплаты", -1);
	Возврат СтруктураСумм;
КонецФункции

//Типы регистраторов, которые двигают план оплат, отгрузок и поставок в приход.
Функция СписокТиповРегистраторовПланов() Экспорт
	СписокТиповРегистраторовПланов = Новый СписокЗначений;
	//++ НЕ УТКА
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказДавальца"));
	//-- НЕ УТКА
	//++ НЕ УТ
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказПереработчику"));
	//-- НЕ УТ
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ГрафикИсполненияДоговора"));
	Возврат СписокТиповРегистраторовПланов;
КонецФункции

//Очищает переданный регистр расчетов с флагом ОбменДанными.Загрузка.
Процедура ОчиститьРегистр(Регистр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления."+Регистр+" КАК Расчеты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления[Регистр].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

//Типы платежных документов, для отбора при первичном заполнении регистров расчетов.
Функция ТипыПлатежныхДокументов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	Массив.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	Массив.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	Массив.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Массив.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	Массив.Добавить(Тип("ДокументСсылка.ОперацияПоЯндексКассе"));
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"));
	Возврат Массив;
КонецФункции

//Типы первичных документов ввода остатков, для отбора при первичном заполнении регистров расчетов.
Функция ТипыПервичногоДокументаПлатежки() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента);
	Массив.Добавить(Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику);
	Возврат Массив;
КонецФункции

//Для данных хоз операций не будет сформирована двойная запись в регистрах расчетов по срокам.
Функция ХозяйственныеОперацииНеОтгрузка() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.РезервированиеАвансаКлиента);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносАванса);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Возврат Массив;
КонецФункции

//По данным хоз. операциям суммы в валюте регламентированного и управленческого учета не будут пересчитаны с учетом авансов.
Функция НепересчитываемыеХозяйственныеОперации() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Возврат Массив;
КонецФункции

//Очищает все новые регистры расчетов.
Процедура ОчиститьРегистрыВзаиморасчетов() Экспорт
	
	ОчиститьРегистр("РасчетыСКлиентамиПоСрокам");
	ОчиститьРегистр("РасчетыСКлиентамиПланОплат");
	ОчиститьРегистр("РасчетыСКлиентамиПланОтгрузок");
	ОчиститьРегистр("РасчетыСПоставщикамиПоСрокам");
	ОчиститьРегистр("РасчетыСПоставщикамиПланОплат");
	ОчиститьРегистр("РасчетыСПоставщикамиПланПоставок");
	
	Выборка = Документы.РегистраторРасчетов.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = ИСТИНА;
		ДокументОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

//Возвращает движения документов Реализация товаров и услуг с хоз. операцией Товары в пути к движениям,
//пригодным для офлайн взаиморасчетов.
//
Процедура ВернутьДвиженияПоРасчетамСКлиентами()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.Регистратор                  КАК Регистратор,
	|	МАКСИМУМ(РасчетыСКлиентами.Период)             КАК МаксимальныйПериод
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности))
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) В (ТИП(Документ.РеализацияТоваровУслуг),
	|													ТИП(Документ.РеализацияУслугПрочихАктивов))
	|	И РасчетыСКлиентами.Сумма <> 0
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Регистратор
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыСКлиентами.Период) > 1");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Сумма <> 0 Тогда
				Запись.Период = Выборка.МаксимальныйПериод;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

//Количество одновременно записываемых записей регистров под одним служебным документом регистратором.
Функция РазмерПорцииЗаписи()
	Возврат 1000;
КонецФункции

Процедура ЗаписатьПорционно(СтруктураПараметровРегистраторов, ТаблицаЗаписей, НаборЗаписей) 
	
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	
	МассивСвободныхРегистраторов = СвободныеРегистраторыРасчетов(СтруктураПараметровРегистраторов, НаборЗаписей.Метаданные().Имя, ТаблицаЗаписей.Количество());
	МассивЗадействованныхРегистраторов = Новый Массив;
	
	Если МассивСвободныхРегистраторов.Количество() > 0 Тогда
		
		счСтрок = 1;
		счРегистраторов = 0;
		
		МассивСвободныхРегистраторов[счРегистраторов].ТребуетсяОчистка = Ложь;
		МассивЗадействованныхРегистраторов.Добавить(МассивСвободныхРегистраторов[счРегистраторов].Ссылка);
		
		Для Каждого Строка Из ТаблицаЗаписей Цикл
			Если счСтрок > РазмерПорцииЗаписи Тогда
				счСтрок = 1;
				счРегистраторов = счРегистраторов + 1;
				МассивСвободныхРегистраторов[счРегистраторов].ТребуетсяОчистка = Ложь;
				МассивЗадействованныхРегистраторов.Добавить(МассивСвободныхРегистраторов[счРегистраторов].Ссылка);
			КонецЕсли;
			Строка.Регистратор = МассивСвободныхРегистраторов[счРегистраторов].Ссылка;
			счСтрок = счСтрок + 1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого РегистраторРасчетов Из МассивЗадействованныхРегистраторов Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(РегистраторРасчетов);
		НаборЗаписей.Загрузить(ТаблицаЗаписей.Скопировать(Новый Структура("Регистратор", РегистраторРасчетов)));
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для Каждого СтрокаСвободныхРегистраторов Из МассивСвободныхРегистраторов Цикл
		
		Если СтрокаСвободныхРегистраторов.ТребуетсяОчистка Тогда
			НаборЗаписей.Отбор.Регистратор.Установить(РегистраторРасчетов);
			НаборЗаписей.Загрузить(ТаблицаЗаписей.Скопировать(Новый Структура("Регистратор", РегистраторРасчетов)));
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки)
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|ГДЕ            
	|	РегистраторРасчетов.ОбъектРасчетов              = &ОбъектРасчетов
	|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РегистраторРасчетов.Валюта                    = &ВалютаРасчетов
	|	И РегистраторРасчетов.ТипРасчетов               = &ТипРасчетов
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.%ИмяРегистраПланаОплат% КАК РасчетыПланОплат
	|		ГДЕ
	|			РасчетыПланОплат.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.%ИмяРегистраПланаОтгрузкиПоставки% КАК РасчетыПланОтгрузокПоставок
	|		ГДЕ
	|			РасчетыПланОтгрузокПоставок.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.%ИмяРегистраРасчетов% КАК РасчетыПоСрокам
	|		ГДЕ
	|			РасчетыПоСрокам.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ИмяРегистраРасчетов%", ИмяРегистраРасчетов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ИмяРегистраПланаОтгрузкиПоставки%", ИмяРегистраПланаОтгрузкиПоставки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ИмяРегистраПланаОплат%", ИмяРегистраПланаОплат);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьВсе(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ПараметрыВыполнения.ОкончаниеПериодаРасчета, Неопределено);
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ПараметрыВыполнения.ОкончаниеПериодаРасчета, Неопределено);
	
КонецПроцедуры

#КонецОбласти
