#Область ПрограммныйИнтерфейс

//Выполняет обработку штрихкода. Вызывается из формы документа.
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма, для которой необходимо выполнить обработку штрихкода.
// 	ДанныеШтрихкода - Структура - Исходные данные, включающие только значение штрихкода и количество,
// 		либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
// 	КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
Процедура ОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, КэшированныеЗначения) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования    = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(Форма);
	ДанныеШтрихкода.Штрихкод = НормализованныйШтрихкод(ДанныеШтрихкода.Штрихкод, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода = Форма.Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияОбработкиВводаШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
	ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = КэшированныеЗначения;
	ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ДанныеШтрихкода;
	ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Истина;

	ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

// Выполняет обработку штрихкода. Вызывается из формы проверки и подбора маркируемой продукции.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - оповещение, которое произойдет при завершении обработки.
//  Форма - УправляемаяФорма - форма, в которой отсканирован штрихкод.
//  ДанныеШтрихкода - Структура - структура с ключами:
//   * Штрихкод - Строка - считанный штрихкод,
//   * Количество - Число - количество упаковок.
//  ПараметрыСканирования - (см. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
//
Процедура ОбработатьДанныеШтрихкода(ОповещениеПриЗавершении, Форма, ДанныеШтрихкода, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(Форма);
	КонецЕсли;
	
	ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования);
	
	НормализованныйШтрихкод = НормализованныйШтрихкод(ДанныеШтрихкода.Штрихкод, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИСВызовСервера.ОбработатьШтрихкод(
		НормализованныйШтрихкод, ПараметрыСканирования, Неопределено, Форма.УникальныйИдентификатор);
	
	Если РезультатОбработкиШтрихкода <> Неопределено Тогда
		
		Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			И РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
			
			Если Форма.СоответствиеШтрихкодовСтрокДерева.Получить(НормализованныйШтрихкод) <> Неопределено Тогда
				РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатОбработкиШтрихкода.ЕстьОшибкиВДеревеУпаковок
			Или РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры
			Или Не ПустаяСтрока(РезультатОбработкиШтрихкода.ТекстОшибки)
			Или ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода) Тогда
				
			ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияОбработкиВводаШтрихкода();
			ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода; 
			ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении     = ОповещениеПриЗавершении;
			ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
			ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
			ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ДанныеШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Ложь;
			
			ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
			
		Иначе
			
			ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработкиШтрихкода.АдресДанныхШтрихкода);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ДанныеОПроблеме) Экспорт
	
	Если ДанныеОПроблеме.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		МодульШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ДанныеОПроблеме);
		
	ИначеЕсли ДанныеОПроблеме.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда
		
		МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		МодульШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ДанныеОПроблеме);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОбОкончанииОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещенияТСД(), ,
	                               НСтр("ru = 'Закончена обработка полученных из ТСД данных.';
										|en = 'Закончена обработка полученных из ТСД данных.'"),
	                               БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Процедура ОповеститьОНачалеОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещенияТСД(), ,
		                           НСтр("ru = 'Начата обработка полученных из ТСД данных.';
										|en = 'Начата обработка полученных из ТСД данных.'"),
		                           БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Функция ПараметрыЗавершенияОбработкиВводаШтрихкода() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("РезультатОбработкиШтрихкода");
	Параметры.Вставить("КэшированныеЗначения");
	Параметры.Вставить("ОповещениеПриЗавершении");
	Параметры.Вставить("ПараметрыСканирования");
	Параметры.Вставить("ДанныеШтрихкода");
	Параметры.Вставить("ВызовИзФормыДокумента");
	
	Возврат Параметры;
	
КонецФункции

Процедура ОбработатьНеизвестныеШтрихкодыЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВводШтрихкода(ДополнительныеПараметры.Форма, РезультатВыполнения.ЗарегистрированныеШтрихкоды[0],
		ДополнительныеПараметры.КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода)
	
	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		Возврат МодульШтрихкодированиеЕГАИСКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода);
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		Возврат МодульШтрихкодированиеМОТПКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования)
	
	Если Не ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
		
	ФормаСоЗначением = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма;
	ИначеЕсли Форма.ВладелецФормы <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.ВладелецФормы, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма.ВладелецФормы;
	КонецЕсли;
	
	Если ФормаСоЗначением = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаСоЗначением["АдресДанныхДокументаОснования"] <> ПараметрыСканирования.АдресДанныхДокументаОснования Тогда
		ФормаСоЗначением["АдресДанныхДокументаОснования"] = ПараметрыСканирования.АдресДанныхДокументаОснования
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода;
	ВидыПродукцииШтрихкода      = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода.ВидыПродукции;
	Форма                       = ПараметрыЗавершенияВводаШтрихкода.Форма;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СопоставлениеНоменклатурыЗавершение", ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			РезультатОбработкиШтрихкода.ШтрихкодыПродукцииДляСопоставления, Форма, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПослеОбработкиШтрихкодов", 0.1, Истина);
		
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОбщаяОшибка = Истина Тогда
		
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", РезультатОбработкиШтрихкода, Форма);
		
		Возврат;
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		МодульШтрихкодированиеЕГАИСКлиент.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		МодульШтрихкодированиеМОТПКлиент.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставлениеНоменклатурыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		Если ДополнительныеПараметры.ВызовИзФормыДокумента Тогда
		
			ОбработатьВводШтрихкода(
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.ДанныеШтрихкода,
				ДополнительныеПараметры.КэшированныеЗначения);
			
		Иначе
			
			ОбработатьДанныеШтрихкода(
				ДополнительныеПараметры.ОповещениеПриЗавершении,
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.ДанныеШтрихкода,
				ДополнительныеПараметры.ПараметрыСканирования)
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

Функция ЗаголовокОповещенияТСД()

	Возврат НСтр("ru = 'Загрузка из ТСД';
				|en = 'Загрузка из ТСД'");

КонецФункции

Функция НормализованныйШтрихкод(ЗначениеШтрихкода, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.МОТП") 
		И ШтрихкодированиеИСКлиентСервер.ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		Возврат МодульШтрихкодированиеМОТПКлиентСервер.КодМаркировкиБезКриптохвоста(ЗначениеШтрихкода);
		
	КонецЕсли;
	
	Возврат ЗначениеШтрихкода;
	
КонецФункции

Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")) <> Неопределено;
	
КонецФункции

Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")) <> Неопределено;
	
КонецФункции

#КонецОбласти
