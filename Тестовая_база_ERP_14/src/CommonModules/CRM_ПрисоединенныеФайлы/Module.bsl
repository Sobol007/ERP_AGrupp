////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает у Получателя копии присоединенных файлов Источника.
// Источник и Получатель могут быть объектами разного типа.
//
// Параметры:
//  Источник     - Ссылка - объект, имеющий присоединенные файлы для копирования.
//  Получатель   - Ссылка - объект, к которому копируются присоединенные файлы.
//  СписокОтбора - СписокЗначений - список файлов, которые копируем. 
//				   если не передан, то копируется все файлы
//
Процедура СкопироватьПрисоединенныеФайлы(Знач Источник, Знач Получатель, СписокОтбора = Неопределено) Экспорт
	
	ДоступнаЭлектроннаяПодпись = Неопределено;
	МодульЭлектроннаяПодписьСлужебный = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
	КонецЕсли;
	
	КопируемыеФайлы = РаботаСФайламиСлужебный.ВсеПодчиненныеФайлы(Источник.Ссылка);
	
	Для Каждого КопируемыйФайл Из КопируемыеФайлы Цикл
		
		Если ДоступнаЭлектроннаяПодпись = Неопределено Тогда
			ДоступнаЭлектроннаяПодпись = (МодульЭлектроннаяПодписьСлужебный <> Неопределено) 
				И (МодульЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(КопируемыйФайл)));
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КопируемыйФайл, "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СписокОтбора = Неопределено Тогда
			Если СписокОтбора.НайтиПоЗначению(КопируемыйФайл) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КопируемыйФайл);
			МенеджерПриемника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + Получатель.Метаданные().Имя + "ПрисоединенныеФайлы");
			КопияФайла = МенеджерПриемника.СоздатьЭлемент();
			
			СтрокаИсключений = "Родитель" + ?(КопияФайла.Метаданные().Владельцы.Количество() = 0, ",Владелец", "");
			ЗаполнитьЗначенияСвойств(КопияФайла, КопируемыйФайл,, СтрокаИсключений);
			
			КопияФайлаСсылка = МенеджерПриемника.ПолучитьСсылку();
			КопияФайла.УстановитьСсылкуНового(КопияФайлаСсылка);
			КопияФайла.ВладелецФайла = Получатель.Ссылка;
			КопияФайла.Редактирует = Справочники.Пользователи.ПустаяСсылка();
			
			КопияФайла.ТекстХранилище = Новый ХранилищеЗначения(КопируемыйФайл.ТекстХранилище.Получить());
			КопияФайла.ФайлХранилище =  Новый ХранилищеЗначения(КопируемыйФайл.ФайлХранилище.Получить());
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(КопируемыйФайл);
			КопияФайла.ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайлов();
			
			Если КопияФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(КопияФайлаСсылка, ДвоичныеДанные);
			Иначе
				// Добавить в один из томов (где есть свободное место).
				СведенияОФайле = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, КопияФайла.ДатаМодификацииУниверсальная,
					КопияФайла.Наименование, КопияФайла.Расширение);
				КопияФайла.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
				КопияФайла.Том = СведенияОФайле.Том;
			КонецЕсли;
			КопияФайла.Записать();
			
			Если ДоступнаЭлектроннаяПодпись Тогда
				УстановленныеПодписи = МодульЭлектроннаяПодпись.УстановленныеПодписи(КопируемыйФайл);
				МодульЭлектроннаяПодпись.ДобавитьПодпись(КопияФайла.Ссылка, УстановленныеПодписи);
				
				СертификатыИсточника = МодульЭлектроннаяПодпись.СертификатыШифрования(КопируемыйФайл);
				МодульЭлектроннаяПодпись.ЗаписатьСертификатыШифрования(КопияФайла, СертификатыИсточника);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет расширение файла и размер (копия функции из ФайловыеФункцииСлужебныйКлиентСервер),
// но проверяет не файлы, загружаемые физически (с жёсткого диска, флешки и т.д.), а
// файлы, загружаемые из присоедин. файлов других объектов.
//
// Параметры:
//  Файл						- СправочникСсылка	- Ссылка на файл.
//  Размер						- Число				- Размер файла в байтах.
//  Расширение					- Строка			- Расширение файла.
//  ВызыватьИсключение			- Булево			- Признак, что файл не подходит.
//  МассивИменФайловСОшибками	- Массив			- Массив файлов, содержащий список неподходящих для загрузки файлов.
//
Функция ПроверитьВозможностьЗагрузкиФайла(Файл,
										  Размер,
										  Расширение,
                                          ВызыватьИсключение = Истина,
                                          МассивИменФайловСОшибками = Неопределено) Экспорт
	
	ОбщиеНастройки = РаботаСФайламиСлужебныйПовтИсп.НастройкиРаботыСФайлами().ОбщиеНастройки;
	
	// Размер файла слишком большой.
	Если Размер > ОбщиеНастройки.МаксимальныйРазмерФайла Тогда
		
		РазмерВМб     = Размер / (1024 * 1024);
		РазмерВМбМакс = ОбщиеНастройки.МаксимальныйРазмерФайла / (1024 * 1024);
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб)
			           |превышает максимально допустимый размер файла (%3 Мб).'"),
			Файл.Наименование,
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", Файл.Наименование);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка расширения файла.
	Если Не РаботаСФайламиСлужебный.ПроверитьРасширениеФайлаДляЗагрузки(Расширение, Ложь) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена (""%2"").
			           |Обратитесь к администратору.'"),
			Расширение,
			Файл.Наименование);			
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", Файл.Наименование);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции    // ПроверитьВозможностьЗагрузкиФайла()

// Определяет, что к объекту присоединен по крайней мере один файл.
//
// Параметры:
//  ВладелецФайлов - Ссылка - Владелец файлов.
//  ФайлИсключение - Ссылка - Файл-исключение.
// 
// Возвращаемое значение:
//  Булево - Истина, если объект имеет файлы.
//
Функция ОбъектИмеетФайлы(Знач ВладелецФайлов, Знач ФайлИсключение = Неопределено) Экспорт // +CRM Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ВладелецФайлов", ВладелецФайлов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов";
	
	Если ФайлИсключение <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ПрисоединенныеФайлы.Ссылка <> &Ссылка";
		
		Запрос.Параметры.Вставить("Ссылка", ФайлИсключение);
	КонецЕсли;
	
	ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ВладелецФайлов);
	
	Для каждого КлючИЗначение Из ИменаСправочников Цикл
		Запрос.Текст = СтрЗаменить(
			ТекстЗапроса, "&ИмяСправочника", "Справочник." + КлючИЗначение.Ключ);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Формирует представление вложений.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма.
//  Владелец - Ссылка - Владелец.
//
Процедура СформироватьПредставлениеВложений(Форма, Владелец) Экспорт
	
	Если Владелец.Пустая() Тогда
		Форма.ФайлыПредставление = НСтр("ru='Нет файлов...';en='No files ...'");				
		Возврат;
	КонецЕсли;		
	
	ФайлыПредставление = "";
	Вложения = ПолучитьВсеПодчиненныеФайлы(Владелец);
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер/1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ФайлыПредставление = ФайлыПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + РазмерСтрокой + ")";
	КонецЦикла;
	Если ПустаяСтрока(ФайлыПредставление) Тогда
		Форма.ФайлыПредставление = НСтр("ru='Нет файлов...';en='No files ...'");				
	Иначе
		Форма.ФайлыПредставление = Сред(ФайлыПредставление, 3);
	КонецЕсли;	
			
КонецПроцедуры // СформироватьПредставлениеВложений()			 

Функция ПолучитьВсеПодчиненныеФайлы(Знач ВладелецФайлов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ВладелецФайлов);
	ТекстЗапросов = "";
	
	Для каждого КлючИЗначение Из ИменаСправочников Цикл
		Если ЗначениеЗаполнено(ТекстЗапросов) Тогда
			ТекстЗапросов = ТекстЗапросов + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.Наименование КАК ИмяФайла,
		|	ПрисоединенныеФайлы.Размер
		|ИЗ
		|	&ИмяСправочника КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + КлючИЗначение.Ключ);
		ТекстЗапросов = ТекстЗапросов + ТекстЗапроса;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапросов);
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

#КонецОбласти
