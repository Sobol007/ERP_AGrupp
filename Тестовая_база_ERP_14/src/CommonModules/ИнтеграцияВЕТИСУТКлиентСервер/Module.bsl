#Область ПрограммныйИнтерфейс

#Область ИсходящаяТранспортнаяОперацияВЕТИС

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыИсходящейТранспортнойОперации(Команды) Экспорт 
	
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"РеализацияТоваровУслуг",            НСтр("ru = 'Реализацию товаров услуг';
																													|en = 'Sales of goods services'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику';
																													|en = 'Goods return to supplier'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров';
																													|en = 'Goods transfer'"),                  "ИспользоватьПеремещениеТоваров");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями';
																													|en = 'Goods transfer between companies'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями';
																													|en = 'Goods return between companies'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	// ++ НЕ УТ
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ОтгрузкаТоваровСХранения",          НСтр("ru = 'Отгрузку товаров с хранения';
																													|en = 'Goods shipment from storage'"),          "ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ДвижениеПродукцииИМатериалов",      НСтр("ru = 'Движение продукции и материалов';
																													|en = 'Movement of products and materials'"),      "ИспользоватьУправлениеПроизводством2_2");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПередачаСырьяПереработчику",        НСтр("ru = 'Передачу сырья переработчику';
																													|en = 'Material transfer to toller'"),         "ИспользоватьПроизводствоНаСтороне");
	// -- НЕ УТ
	// ++ НЕ УТКА
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПередачаДавальцу",                  НСтр("ru = 'Передачу давальцу';
																													|en = 'Transfer to material provider'"),                    "ИспользоватьПроизводствоИзДавальческогоСырья");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ВозвратСырьяДавальцу",              НСтр("ru = 'Возврат сырья давальцу';
																													|en = 'Return of raw materials to material provider'"),               "ИспользоватьПроизводствоИзДавальческогоСырья");
	// -- НЕ УТКА
	
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"РеализацияТоваровУслуг",            НСтр("ru = 'Реализацию товаров услуг';
																													|en = 'Sales of goods services'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику';
																													|en = 'Goods return to supplier'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров';
																													|en = 'Goods transfer'"),                  "ИспользоватьПеремещениеТоваров");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями';
																													|en = 'Goods transfer between companies'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями';
																													|en = 'Goods return between companies'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	// ++ НЕ УТ
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ОтгрузкаТоваровСХранения",          НСтр("ru = 'Отгрузку товаров с хранения';
																													|en = 'Goods shipment from storage'"),          "ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ДвижениеПродукцииИМатериалов",      НСтр("ru = 'Движение продукции и материалов';
																													|en = 'Movement of products and materials'"),      "ИспользоватьУправлениеПроизводством2_2");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПередачаСырьяПереработчику",        НСтр("ru = 'Передачу сырья переработчику';
																													|en = 'Material transfer to toller'"),         "ИспользоватьПроизводствоНаСтороне");
	// -- НЕ УТ
	// ++ НЕ УТКА
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПередачаДавальцу",                  НСтр("ru = 'Передачу давальцу';
																													|en = 'Transfer to material provider'"),                    "ИспользоватьПроизводствоИзДавальческогоСырья");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ВозвратСырьяДавальцу",              НСтр("ru = 'Возврат сырья давальцу';
																													|en = 'Return of raw materials to material provider'"),               "ИспользоватьПроизводствоИзДавальческогоСырья");
	// -- НЕ УТКА
	
КонецПроцедуры

// Устанавливает видимость команд динамически формируемых для создания документов на основании.
// 
// Параметры:
// 	Форма   - УправляемаяФорма - Форма на которой находятся вызова команд.
// 	Команды - Структура - структура команд динамически формируемых для создания документов на основании.
//
Процедура УправлениеВидимостьюКомандИсходящейТранспортнойОперации(Форма, Команды) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование)Тогда
		Форма.Элементы.ГруппаКомандыЗаполненияОснования.Видимость = Ложь;
		Возврат;
	Иначе 
		Форма.Элементы.ГруппаКомандыЗаполненияОснования.Видимость = Истина;
	КонецЕсли;
		
	ОднаОрганизация = (Форма.ГрузоотправительСопоставлениеХСДляОтбораОснований = Форма.ГрузополучательСопоставлениеХСДляОтбораОснований)
		И ЗначениеЗаполнено(Форма.ГрузоотправительСопоставлениеХСДляОтбораОснований);
		
	ТолькоОрганизации = ТипЗнч(Форма.ГрузополучательСопоставлениеХСДляОтбораОснований) = Тип("СправочникСсылка.Организации")
		И НЕ ОднаОрганизация;
		
	Для Каждого КлючИЗначение Из Форма.ВидимостьПодключаемыхКоманд Цикл
		
		Если  КлючИЗначение.Значение.ИмяМетаданных = "ДвижениеПродукцииИМатериалов" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = ОднаОрганизация;
		ИначеЕсли КлючИЗначение.Значение.ИмяМетаданных = "ПеремещениеТоваров" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = ОднаОрганизация ИЛИ ТолькоОрганизации;
		ИначеЕсли КлючИЗначение.Значение.ИмяМетаданных = "ПередачаТоваровМеждуОрганизациями"
			ИЛИ КлючИЗначение.Значение.ИмяМетаданных = "ВозвратТоваровМеждуОрганизациями" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = ТолькоОрганизации;
		Иначе 
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = НЕ(ОднаОрганизация ИЛИ ТолькоОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВходящаяТранспортнаяОперацияВЕТИС

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыВходящейТранспортнойОперации(Команды) Экспорт 
	
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг';
																													|en = 'Purchase of goods and services'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ВозвратТоваровОтКлиента",           НСтр("ru = 'Возврат товаров от клиента';
																													|en = 'Return of goods from customer'"));
	//++ НЕ УТ
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПриемкаТоваровНаХранение",          НСтр("ru = 'Приемку товаров на хранение';
																													|en = 'Goods receiving for storage'"),          "ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ВыкупПринятыхНаХранениеТоваров",    НСтр("ru = 'Выкуп принятых на хранение товаров';
																													|en = 'Redemption of goods received for storage'"),   "ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПоступлениеОтПереработчика",        НСтр("ru = 'Поступление от переработчика';
																													|en = 'Receipt from toller'"),         "ИспользоватьПроизводствоНаСтороне");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ВозвратСырьяОтПереработчика",       НСтр("ru = 'Возврат сырья от переработчика';
																													|en = 'Return of raw materials from toller'"),       "ИспользоватьПроизводствоНаСтороне");
	//-- НЕ УТ
	//++ НЕ УТКА
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПоступлениеСырьяОтДавальца",        НСтр("ru = 'Поступление сырья от давальца';
																													|en = 'Supply from material provider'"),        "ИспользоватьПроизводствоИзДавальческогоСырья");
	//-- НЕ УТКА
	
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг';
																													|en = 'Purchase of goods and services'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ВозвратТоваровОтКлиента",           НСтр("ru = 'Возврат товаров от клиента';
																													|en = 'Return of goods from customer'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров';
																													|en = 'Goods transfer'"),                  "ИспользоватьПеремещениеТоваров");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями';
																													|en = 'Goods transfer between companies'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями';
																													|en = 'Goods return between companies'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	//++ НЕ УТ
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПриемкаТоваровНаХранение",          НСтр("ru = 'Приемку товаров на хранение';
																													|en = 'Goods receiving for storage'"),          "ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ВыкупПринятыхНаХранениеТоваров",    НСтр("ru = 'Выкуп принятых на хранение товаров';
																													|en = 'Redemption of goods received for storage'"),   "ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ДвижениеПродукцииИМатериалов",      НСтр("ru = 'Движение продукции и материалов';
																													|en = 'Movement of products and materials'"),      "ИспользоватьУправлениеПроизводством2_2");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПоступлениеОтПереработчика",        НСтр("ru = 'Поступление от переработчика';
																													|en = 'Receipt from toller'"),         "ИспользоватьПроизводствоНаСтороне");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ВозвратСырьяОтПереработчика",       НСтр("ru = 'Возврат сырья от переработчика';
																													|en = 'Return of raw materials from toller'"),       "ИспользоватьПроизводствоНаСтороне");
	//-- НЕ УТ
	//++ НЕ УТКА
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПоступлениеСырьяОтДавальца",        НСтр("ru = 'Поступление сырья от давальца';
																													|en = 'Supply from material provider'"),        "ИспользоватьПроизводствоИзДавальческогоСырья");
	//-- НЕ УТКА
	
КонецПроцедуры

// Устанавливает видимость команд динамически формируемых для создания документов на основании.
// 
// Параметры:
// 	Форма   - УправляемаяФорма - Форма на которой находятся вызова команд.
// 	Команды - Структура - структура команд динамически формируемых для создания документов на основании.
//
Процедура УправлениеВидимостьюКомандВходящейТранспортнойОперации(Форма, Команды) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование)Тогда
		Форма.Элементы.ГруппаКомандыЗаполненияОснования.Видимость = Ложь;
		Возврат;
	Иначе 
		Форма.Элементы.ГруппаКомандыЗаполненияОснования.Видимость = Истина;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПроизводственнаяОперацияВЕТИС

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПроизводственнойОперации(Команды) Экспорт 
	
	// ++ НЕ УТ
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПроизводствоБезЗаказа", НСтр("ru = 'Производство без заказа';
																										|en = 'Production without order'"),   "ИспользоватьУправлениеПроизводством2_2");
	// -- НЕ УТ
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СборкаТоваров",         НСтр("ru = 'Сборку (разборку) товаров';
																										|en = 'Goods assembly (disassembly)'"), "ИспользоватьСборкуРазборку");
	
	// ++ НЕ УТ
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПроизводствоБезЗаказа", НСтр("ru = 'Производство без заказа';
																										|en = 'Production without order'"),   "ИспользоватьУправлениеПроизводством2_2");
	// -- НЕ УТ
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров",         НСтр("ru = 'Сборку (разборку) товаров';
																										|en = 'Goods assembly (disassembly)'"), "ИспользоватьСборкуРазборку");
	// ++ НЕ УТКА
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ЭтапПроизводства2_2",   НСтр("ru = 'Этап производства';
																										|en = 'Production stage'"),         "ИспользоватьУправлениеПроизводством2_2");
	// -- НЕ УТКА
	
КонецПроцедуры

// Устанавливает видимость команд динамически формируемых для создания документов на основании.
// 
// Параметры:
// 	Форма   - УправляемаяФорма - Форма на которой находятся вызова команд.
// 	Команды - Структура - структура команд динамически формируемых для создания документов на основании.
//
Процедура УправлениеВидимостьюКомандПроизводственнойОперации(Форма, Команды) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование)Тогда
		Форма.Элементы.ГруппаКомандыЗаполненияОснования.Видимость = Ложь;
		Возврат;
	Иначе 
		Форма.Элементы.ГруппаКомандыЗаполненияОснования.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнвентаризацияПродукцииВЕТИС

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыИнвентаризацииПродукции(Команды) Экспорт 
	
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВнутреннееПотреблениеТоваров",      НСтр("ru = 'Внутреннее потребление товаров';
																													|en = 'Internal goods consumption'"),        "ИспользоватьВнутреннееПотребление");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СписаниеНедостачТоваров",           НСтр("ru = 'Списание недостач товаров';
																													|en = 'Write off goods shortages'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПрочееОприходованиеТоваров",        НСтр("ru = 'Прочее оприходование товаров';
																													|en = 'Other goods recording as received'"),          "ИспользоватьПрочееОприходованиеТоваров");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ОприходованиеИзлишковТоваров",      НСтр("ru = 'Оприходование излишков товаров';
																													|en = 'Goods surplus recording as received'"));
	
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотреблениеТоваров",      НСтр("ru = 'Внутреннее потребление товаров';
																													|en = 'Internal goods consumption'"),        "ИспользоватьВнутреннееПотребление");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СписаниеНедостачТоваров",           НСтр("ru = 'Списание недостач товаров';
																													|en = 'Write off goods shortages'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересортицаТоваров",                НСтр("ru = 'Пересортицу товаров';
																													|en = 'Goods misgrading'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПрочееОприходованиеТоваров",        НСтр("ru = 'Прочее оприходование товаров';
																													|en = 'Other goods recording as received'"),          "ИспользоватьПрочееОприходованиеТоваров");
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОприходованиеИзлишковТоваров",      НСтр("ru = 'Оприходование излишков товаров';
																													|en = 'Goods surplus recording as received'"));
	ПодключаемыеКомандыВЕТИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПорчаТоваров",                      НСтр("ru = 'Порчу товаров';
																													|en = 'Goods damage'"),                         "ИспользоватьКачествоТоваров");
	
КонецПроцедуры

// Устанавливает видимость команд динамически формируемых для создания документов на основании.
// 
// Параметры:
// 	Форма   - УправляемаяФорма - Форма на которой находятся вызова команд.
// 	Команды - Структура - структура команд динамически формируемых для создания документов на основании.
//
Процедура УправлениеВидимостьюКомандИнвентаризацииПродукции(Форма, Команды) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование)Тогда
		Форма.Элементы.ГруппаКомандыЗаполненияОснования.Видимость = Ложь;
		Возврат;
	Иначе 
		Форма.Элементы.ГруппаКомандыЗаполненияОснования.Видимость = Истина;
	КонецЕсли;
		
	ЕстьРасход = Ложь;
	ЕстьПриход = Ложь;
	Для Каждого СтрокаТЧ Из Форма.Объект.Товары Цикл
		Если СтрокаТЧ.КоличествоИзменениеВЕТИС<0 Тогда 
			ЕстьРасход = Истина;
		ИначеЕсли СтрокаТЧ.КоличествоИзменениеВЕТИС>0 Тогда 
			ЕстьПриход = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Форма.ВидимостьПодключаемыхКоманд Цикл
		Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование)Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = Ложь;
		ИначеЕсли КлючИЗначение.Значение.ИмяМетаданных = "ПересортицаТоваров"
			ИЛИ КлючИЗначение.Значение.ИмяМетаданных = "ПорчаТоваров" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = ЕстьПриход = ЕстьРасход;
		ИначеЕсли КлючИЗначение.Значение.ИмяМетаданных = "ОприходованиеИзлишковТоваров"
			ИЛИ КлючИЗначение.Значение.ИмяМетаданных = "ПрочееОприходованиеТоваров" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = НЕ ЕстьРасход;
		Иначе
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = НЕ ЕстьПриход;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПересчитатьКоличествоЕдиницВЕТИС(Количество, Номенклатура, ЕдиницаИзмеренияВЕТИС, НужноОкруглять, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	НовоеКоличествоВЕТИС = Неопределено;
	ТекстОшибки = Неопределено;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ДанныеЕдиницыИзмерения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(
									ЕдиницаИзмеренияВЕТИС, 
									КэшированныеЗначения,
									Номенклатура);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
			
			Если ДанныеЕдиницыИзмерения.КодОшибки <> 0 Тогда
				
				ТекстОшибки = ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(
										ДанныеЕдиницыИзмерения.КодОшибки,
										Номенклатура, 
										ЕдиницаИзмеренияВЕТИС, 
										ДанныеЕдиницыИзмерения.ТипИзмеряемойВеличины);
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			НовоеКоличествоВЕТИС = Количество / ДанныеЕдиницыИзмерения.Коэффициент;
		
			Если НужноОкруглять
				И ДанныеЕдиницыИзмерения.НужноОкруглятьКоличествоВЕТИС Тогда
				
				НовоеКоличествоВЕТИС = Окр(НовоеКоличествоВЕТИС, 0, РежимОкругления.Окр15как20);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат НовоеКоличествоВЕТИС;
	
КонецФункции

Функция ПересчитатьКоличествоЕдиниц(КоличествоВЕТИС, Номенклатура, ЕдиницаИзмеренияВЕТИС, НужноОкруглять, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	НовоеКоличество = Неопределено;
	ТекстОшибки = Неопределено;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ДанныеЕдиницыИзмерения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(
									ЕдиницаИзмеренияВЕТИС, 
									КэшированныеЗначения,
									Номенклатура);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
			
			Если ДанныеЕдиницыИзмерения.КодОшибки <> 0 Тогда
				
				ТекстОшибки = ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(
										ДанныеЕдиницыИзмерения.КодОшибки,
										Номенклатура,
										ЕдиницаИзмеренияВЕТИС,
										ДанныеЕдиницыИзмерения.ТипИзмеряемойВеличины,
										"ВЕТИС");
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			НовоеКоличество = КоличествоВЕТИС * ДанныеЕдиницыИзмерения.Коэффициент;
			
			Если НужноОкруглять
				И ДанныеЕдиницыИзмерения.НужноОкруглятьКоличество Тогда
				
				НовоеКоличество = Окр(НовоеКоличество, 0, РежимОкругления.Окр15как20);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат НовоеКоличество;
	
КонецФункции

// Возвращает параметры оформления серии по данным строки (если использование условного оформления не возможно).
//
//	Параметры:
//		ОсобыйВариантУказанияСерий - Булево, Строка - Ложь, если серии указываются в отдельной ТЧ,
//			"СерииВсегдаВТЧТовары" - если у объекта нет специальной ТЧ для указания серий,
//			"СерииПриПланированииОтгрузкиУказываютсяВТЧТовары" - если серии могут указываться в разных ТЧ,
//				при этом серии с политикой учета "При планировании отгрузки" указываются в ТЧ Товары,
//		ДанныеСтроки - Структура, ДанныеФормыЭлементКоллекции - данные, в которых содержится информация по оформлению серии
//		ПутьКПолюОтбораСтатусУказанияСерий - Строка - имя поля в "ДанныеСтроки" к реквизиту "Статус указания серий",
//														если он отличается от "СтатусУказанияСерий"
//		ПутьКПолюОтбораТипНоменклатуры - Строка - имя поля в "ДанныеСтроки" к реквизиту "Тип номенклатуры",
//														если он отличается от "ТипНоменклатуры".
//
//	Возвращаемое значение:
//		Структура - структура, содержащая поля, на основании которых можно оформить элемент формы, содержит свойства:
//			ИмяЦветаТекста - Строка - имя цвета текста поля, которое в последствии можно назначить элементу
//								"Цвет текста" поля управляемой формы, значение по умолчанию "ЦветТекстаПоля";
//			ОтметкаНезаполненного - Булево - будет назначаться в аналогичный признак поля управляемой формы, значение по умолчанию Истина;
//			ТолькоПросмотр - Булево - будет назначаться в аналогичный признак поля управляемой формы, значение по умолчанию Ложь;
//			Текст - Строка - строка, которая может быть использована в качестве представления текущего значения серии.
//
Функция ПараметрыОформленияСерииПоДаннымСтроки(ОсобыйВариантУказанияСерий, ДанныеСтроки,
														ПутьКПолюОтбораСтатусУказанияСерий = "СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "ТипНоменклатуры") Экспорт
	
	// Значения по умолчанию:
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИмяЦветаТекста", "ЦветТекстаПоля");
	СтруктураВозврата.Вставить("ОтметкаНезаполненного", Истина);
	СтруктураВозврата.Вставить("ТолькоПросмотр", Ложь);
	
	ТипНоменклатуры = ДанныеСтроки[ПутьКПолюОтбораТипНоменклатуры];
	СтатусСерии = ДанныеСтроки[ПутьКПолюОтбораСтатусУказанияСерий];
	
	СерииВсегдаВТЧТовары = (ОсобыйВариантУказанияСерий = "СерииВсегдаВТЧТовары");
	СерииПриПланированииОтгрузкиУказываютсяВТЧТовары = (ОсобыйВариантУказанияСерий = "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары");
	
	СписокТиповДляСерий = Новый СписокЗначений;
	СписокТиповДляСерий.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	СписокТиповДляСерий.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	// Для товаров
	Если СписокТиповДляСерий.НайтиПоЗначению(ТипНоменклатуры) = Неопределено Тогда
		СтруктураВозврата.Вставить("ИмяЦветаТекста", "ТекстЗапрещеннойЯчейкиЦвет");
		СтруктураВозврата.Вставить("ОтметкаНезаполненного", Ложь);
		СтруктураВозврата.Вставить("Текст", НСтр("ru = '<для товаров>';
												|en = '<for goods>'"));
		СтруктураВозврата.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	// Серия не указывается
	Если СписокТиповДляСерий.НайтиПоЗначению(ТипНоменклатуры) <> Неопределено И СтатусСерии = 0 Тогда
		СтруктураВозврата.Вставить("ИмяЦветаТекста", "ТекстЗапрещеннойЯчейкиЦвет");
		СтруктураВозврата.Вставить("ОтметкаНезаполненного", Ложь);
		СтруктураВозврата.Вставить("Текст", НСтр("ru = '<серия не указывается>';
												|en = '<series is not specified>'"));
		СтруктураВозврата.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	Если Не СерииВсегдаВТЧТовары Тогда
		
		СписокСтатусовСерий = Новый СписокЗначений;
		СписокСтатусовСерий.ЗагрузитьЗначения(НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());
		СписокСтатусовСерий.Удалить(СписокСтатусовСерий.НайтиПоЗначению(15));
		Если СерииПриПланированииОтгрузкиУказываютсяВТЧТовары Тогда
			СписокСтатусовСерий.Удалить(СписокСтатусовСерий.НайтиПоЗначению(11));
		КонецЕсли;
		
		// Серия указывается отдельно
		Если СписокТиповДляСерий.НайтиПоЗначению(ТипНоменклатуры) <> Неопределено И СтатусСерии <> 0
			И (СтатусСерии <= ?(СерииПриПланированииОтгрузкиУказываютсяВТЧТовары, 8, 11)
			Или СписокСтатусовСерий.НайтиПоЗначению(СтатусСерии) <> Неопределено) Тогда
			СтруктураВозврата.Вставить("ИмяЦветаТекста", "ТекстЗапрещеннойЯчейкиЦвет");
			СтруктураВозврата.Вставить("ОтметкаНезаполненного", Ложь);
			СтруктураВозврата.Вставить("Текст", НСтр("ru = '<серия указывается отдельно>';
													|en = '<series is specified separately>'"));
			СтруктураВозврата.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		
		СписокСтатусовСерий = Новый СписокЗначений;
		СписокСтатусовСерий.Добавить(15);
		Если СерииПриПланированииОтгрузкиУказываютсяВТЧТовары Тогда
			СписокСтатусовСерий.Добавить(11);
		КонецЕсли;
		
		//
		Если СписокТиповДляСерий.НайтиПоЗначению(ТипНоменклатуры) <> Неопределено
			И СписокСтатусовСерий.НайтиПоЗначению(СтатусСерии) <> Неопределено Тогда
			СтруктураВозврата.Вставить("ОтметкаНезаполненного", Ложь);
		КонецЕсли;		
		
	Иначе
		
		// Серия указывается в ТЧ Товары
		Если НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать().Найти(СтатусСерии) <> Неопределено Тогда
			СтруктураВозврата.Вставить("ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(КодОшибки, Номенклатура, ЕдиницаИзмеренияВЕТИС, ТипИзмеряемойВеличины, СуффиксКоличества = "")
	
	ПересчетВЕТИС        = СокрЛП(СуффиксКоличества) = "ВЕТИС";
	ТекстЕдиницыХранения = ?(ПересчетВЕТИС, НСтр("ru = 'в единицу хранения';
												|en = 'in storage units'"), НСтр("ru = 'количества (ВетИС)';
																					|en = 'quantity (VetIS)'"));
	
	ШаблонСообщенияНеЗаполненаЕдиницаИзмерения    = НСтр("ru = 'Не удалось выполнить пересчет %ЕдиницаХранения%, т.к. не заполнено поле ""Единица измерения"" в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВетИС%""';
														|en = 'Cannot recalculate %ЕдиницаХранения% as the ""Unit of measure"" field is not filled in VetIS unit of measure card ""%ЕдиницаИзмеренияВетИС%""'");
	ШаблонСообщенияНеУказанТипИзмеряемойВеличины  = НСтр("ru = 'Не удалось выполнить пересчет %ЕдиницаХранения%, т.к. в карточке номенклатуры ""%Номенклатура%"" выключена возможность указания количества в единицах измерения %ТипИзмеряемойВеличины%';
														|en = 'Cannot recalculate %ЕдиницаХранения% as in a card of products ""%Номенклатура%"" possibility to specify quantity in units of measure %ТипИзмеряемойВеличины% is disabled'");
	ШаблонСообщенияНеСопоставленыЕдиницыИзмерения = НСтр("ru = 'Не удалось выполнить пересчет %ЕдиницаХранения%. Приведите в соответствие единицу измерения в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВетИС%"" с единицей хранения номенклатуры ""%Номенклатура%"" или укажите %ТипКоличества% вручную';
														|en = 'Cannot recalculate %ЕдиницаХранения%. Match the unit of measure in the card of VetIS unit of measure ""%ЕдиницаИзмеренияВетИС%"" with a storage unit of products ""%Номенклатура%"" or specify %ТипКоличества% manually'");
	
	Если КодОшибки = 1 Тогда
		ТекстСообщения = ШаблонСообщенияНеЗаполненаЕдиницаИзмерения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаХранения%",       ТекстЕдиницыХранения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмеренияВетИС%", Строка(ЕдиницаИзмеренияВЕТИС));
	ИначеЕсли КодОшибки = 2 Тогда
		
		Если ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Вес") Тогда
			ИмяТипаИзмеряемойВеличины = НСтр("ru = 'веса';
											|en = 'weight'");
		ИначеЕсли ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Объем") Тогда
			ИмяТипаИзмеряемойВеличины = НСтр("ru = 'объема';
											|en = 'volume'");
		ИначеЕсли ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Длина") Тогда
			ИмяТипаИзмеряемойВеличины = НСтр("ru = 'длины';
											|en = 'length'");
		КонецЕсли;
		
		ТекстСообщения = ШаблонСообщенияНеУказанТипИзмеряемойВеличины;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаХранения%",       ТекстЕдиницыХранения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%",          Строка(Номенклатура));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипИзмеряемойВеличины%", ИмяТипаИзмеряемойВеличины);
		
	ИначеЕсли КодОшибки = 3 Тогда
		ТекстТипаКоличества = ?(ПересчетВЕТИС, НСтр("ru = 'количество';
													|en = 'quantity'"), НСтр("ru = 'количество (ВетИС)';
																				|en = 'Quantity (VetIS)'"));
		
		ТекстСообщения = ШаблонСообщенияНеСопоставленыЕдиницыИзмерения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаХранения%",       ТекстЕдиницыХранения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмеренияВетИС%", Строка(ЕдиницаИзмеренияВЕТИС));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%",          Строка(Номенклатура));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипКоличества%",         ТекстТипаКоличества);
	Иначе
		ТекстСообщения = "";
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти
