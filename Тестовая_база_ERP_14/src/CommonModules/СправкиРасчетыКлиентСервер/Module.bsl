// Общие требования к отчетам, работа с которыми возможна с помощью модулей СправкиРасчеты:
// - в качестве периода выбирается целое количество месяцев с начала отчетного года
//   -- допустимо использовать для отчетов, в которых опционально можно выбрать данные только за конкретный месяц
//   -- некоторые функции можно использовать в отчетах, период которых задается явно как две даты
// - программный интерфейс
//  - ПоддерживаемыеНаборыСуммовыхПоказателей()
// - параметры формы
//   -- НачалоПериода
//   -- КонецПериода
//   -- Организация
// - реквизиты формы
//   - ПредставлениеПериодаЗаголовок // период целиком для заголовка формы, с концевым разделителем "г.", используется в
//   подсистеме стандартных отчетов - ПредставлениеПериодаВыбор     // только выбранный месяц для заголовка поля выбора
//   периода, подсистема выбора периода - ПредставлениеОрганизации
//   - ДатаРегистрацииОрганизации
//   - ИдентификаторЗадания
//   - Результат.
//
// Эти требования дополнительные к накладываемым подсистемой БухгалтерскиеОтчеты.
// Отдельные функции могут накладывать дополнительные требования.
// Они описаны рядом с методами, относящимися к этим функциям.

#Область ПрограммныйИнтерфейс

// Определяет, адаптирован ли отчет для использования в подсистеме.
//
// Параметры:
//  ИмяОтчета	 - Строка - имя отчета, заданное при конфигурировании.
// 
// Возвращаемое значение:
//  Булево  - Истина, если для отчета можно использовать методы подсистемы.
//
Функция ОтчетПодключен(ИмяОтчета) Экспорт
	
	Возврат ПодключенныеОтчеты().Найти(ИмяОтчета) <> Неопределено;
	
КонецФункции

// Перечень отчетов, адаптированных для использования в подсистеме.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - строки, имена отчетов.
//
Функция ПодключенныеОтчеты() Экспорт
	
	// Перечисленные отчеты рекомендуется включить в подсистему СправкиРасчеты
	
	ИменаОтчетов =
	    "СправкаРасчетДолиНалоговойБазы
		|СправкаРасчетКалькуляцияСебестоимости
		|СправкаРасчетНалогаНаПрибыль
		|СправкаРасчетНормированияРасходов
		|СправкаРасчетПереоценкаВалютныхСредств
		|СправкаРасчетПостоянныхИВременныхРазниц
		|СправкаРасчетПризнаниеРасходовПоОСПоступившимВЛизинг
		|СправкаРасчетРаспределенияКосвенныхРасходов
		|СправкаРасчетРезервыПоСомнительнымДолгам
		|СправкаРасчетСебестоимостиПродукции
		|СправкаРасчетСписанияКосвенныхРасходов
		|СправкаРасчетТранспортныхРасходов
		|СправкаРасчетУбытковПрошлыхЛет";
	
	Возврат Новый ФиксированныйМассив(СтрРазделить(ИменаОтчетов, Символы.ПС));
	
КонецФункции

// Готовит текст заголовка справки-расчета, включающий контекст ее формирования.
//
// Текст заголовка справки-расчета (как экранной, так и печатной формы) строится всегда по одному шаблону,
// но для разных применений может содержать не все элементы шаблона или разные значения элементов.
// Скажем
// - в заголовке формы выводится краткое название отчета (как на втором шаге программного интерфейса)
//   и не выводятся названия показателей,
// - в печатной форме название отчета может содержать слова "справка-расчет", а название организации выводится отдельно.
//
// Параметры:
//  НазваниеОтчета			 - Строка - пользовательское представление отчета или его варианта
//  ПредставлениеПериода	 - Строка - пользовательское представление периода, за который формируется отчет
//  ПредставлениеОрганизации - Строка - пользовательское представление организации, по которой формируется отчет
//  ПредставлениеПоказателей - Строка - пользовательское представление набора суммовых показателей, которые содержит отчет.
// 
// Возвращаемое значение:
//  Строка - текст заголовка экранной или печатной формы.
//
Функция ТекстЗаголовка(НазваниеОтчета, ПредставлениеПериода = "", ПредставлениеОрганизации = "", ПредставлениеПоказателей = "") Экспорт
	
	Слова = Новый Массив;
	
	Слова.Добавить(НазваниеОтчета); // свойство расширения отчета
	
	Если Не ПустаяСтрока(ПредставлениеПериода) Тогда
		ПолноеПредставлениеПериода = СтрШаблон(НСтр("ru = 'за %1';
													|en = 'for %1'"), ПредставлениеПериода);// должно содержать концевой разделитель "г."
		ПолноеПредставлениеПериода = СтрЗаменить(ПолноеПредставлениеПериода, " ", Символы.НПП); // перенос отдельных элементов периода может ввести в заблуждение
		Слова.Добавить(ПолноеПредставлениеПериода);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставлениеОрганизации) Тогда
		Слова.Добавить(ПредставлениеОрганизации); 
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставлениеПоказателей) Тогда
		
		// Это - второстепенная информация. В то же время, представление показателей может быть длинным.
		// Обеспечим перенос этого названия на новую строку целиком.
		ПредставлениеПоказателейНПП = СтрЗаменить(ПредставлениеПоказателей, " ", Символы.НПП);
		
		Слова.Добавить(СтрШаблон(НСтр("ru = '(%1)';
										|en = '(%1)'"), ПредставлениеПоказателейНПП));
		
	КонецЕсли;
	
	Возврат СтрСоединить(Слова, " ");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДополнительныеФункции

Функция ОтчетПоддерживаетВыборВсяОрганизация(Форма) Экспорт
	
	// Требования к отчету для этой поддержки
	// - Форма.ПолеОрганизация // строка, ключ из СоответствиеОрганизаций
	// - Отчет.ВключатьОбособленныеПодразделения.
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СоответствиеОрганизаций");
	
КонецФункции

Функция ОтчетПоддерживаетВыборСНачалаГода(Форма) Экспорт
	
	Возврат Форма.Элементы.Найти("СНачалаГода") <> Неопределено;
	
КонецФункции

Функция ОтчетПоддерживаетВыборПроизвольногоИнтервала(Форма) Экспорт
	
	Возврат Форма.Элементы.Найти("НачалоПериода") <> Неопределено
		И Форма.Элементы.Найти("КонецПериода") <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область Умолчания

Функция ВидПериодаМесяц() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
	
КонецФункции

#КонецОбласти

#Область НаборыСуммовыхПоказателей

// Определяет, может ли пользователь в форме отчета выбирать один из наборов показателей отчета.
// Перечень показателей, среди которых может выбирать,
// см. в ПоддерживаемыеНаборыСуммовыхПоказателей() в модуле менеджера отчета.
//
// Параметры:
//  Отчет	 - ОтчетОбъект - проверяемый отчет.
// 
// Возвращаемое значение:
//  Булево - Истина, если пользователь может выбирать явно набор показателей отчета.
//
Функция ПоддерживаетсяВыборПоказателей(Отчет) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Отчет, "НаборПоказателейОтчета");
	
КонецФункции

#Область НомераНаборов

Функция ВсеНаборыСуммовыхПоказателей() Экспорт
	
	ВсеНаборы = Новый Массив;
	ВсеНаборы.Добавить(НомерНабораСуммовыхПоказателейПоУмолчанию());
	ВсеНаборы.Добавить(НомерНабораСуммовыхПоказателейНалоговыйУчет());
	ВсеНаборы.Добавить(НомерНабораСуммовыхПоказателейОтложенныхНалогов());
	
	Возврат ВсеНаборы;
	
КонецФункции

Функция НомерНабораСуммовыхПоказателейПоУмолчанию() Экспорт
	
	Возврат 1;
	
КонецФункции

Функция НомерНабораСуммовыхПоказателейНалоговыйУчет() Экспорт
	
	Возврат 2;
	
КонецФункции

Функция НомерНабораСуммовыхПоказателейОтложенныхНалогов() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция ЭтоНаборСуммовыхПоказателейНалоговыйУчет(НомерНабораСуммовыхПоказателей) Экспорт
	Возврат НомерНабораСуммовыхПоказателей = НомерНабораСуммовыхПоказателейНалоговыйУчет();
КонецФункции

Функция ЭтоНаборСуммовыхПоказателейОтложенныхНалогов(НомерНабораСуммовыхПоказателей) Экспорт
	Возврат НомерНабораСуммовыхПоказателей = НомерНабораСуммовыхПоказателейОтложенныхНалогов();
КонецФункции

Функция НаборСуммовыхПоказателейВключаетБухгалтерскийУчет(НомерНабораСуммовыхПоказателей) Экспорт
	
	Возврат НомерНабораСуммовыхПоказателей <> НомерНабораСуммовыхПоказателейНалоговыйУчет();
	
КонецФункции

Функция НазваниеНабораСуммовыхПоказателей(НомерНабораСуммовыхПоказателей) Экспорт
	
	Если ЭтоНаборСуммовыхПоказателейНалоговыйУчет(НомерНабораСуммовыхПоказателей) Тогда
		
		Возврат НСтр("ru = 'налоговый учет';
					|en = 'tax accounting'");
		
	ИначеЕсли ЭтоНаборСуммовыхПоказателейОтложенныхНалогов(НомерНабораСуммовыхПоказателей) Тогда
		
		Возврат НСтр("ru = 'бухгалтерский учет с постоянными и временными разницами';
					|en = 'bookkeeping with permanent and temporary differences'");
		
	Иначе // значение по умолчанию
		
		Возврат НСтр("ru = 'бухгалтерский учет';
					|en = 'bookkeeping'");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ИнициализироватьНаборСуммовыхПоказателей(НомерНабораСуммовыхПоказателей) Экспорт
	
	Если НомерНабораСуммовыхПоказателей = 0 Тогда
		НомерНабораСуммовыхПоказателей = НомерНабораСуммовыхПоказателейПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСоставНабораСуммовыхПоказателей(Контекст, НомерНабораСуммовыхПоказателей) Экспорт
	
	Если ЭтоНаборСуммовыхПоказателейНалоговыйУчет(НомерНабораСуммовыхПоказателей) Тогда
		
		Контекст.ПоказательБУ = Ложь;
		Контекст.ПоказательНУ = Истина;
		Контекст.ПоказательПР = Ложь;
		Контекст.ПоказательВР = Ложь;
		
	ИначеЕсли ЭтоНаборСуммовыхПоказателейОтложенныхНалогов(НомерНабораСуммовыхПоказателей) Тогда
		
		Контекст.ПоказательБУ = Истина;
		Контекст.ПоказательНУ = Ложь;
		Контекст.ПоказательПР = Истина;
		Контекст.ПоказательВР = Истина;
		
	Иначе // набор по умолчанию
		
		Контекст.ПоказательБУ = Истина;
		Контекст.ПоказательНУ = Ложь;
		Контекст.ПоказательПР = Ложь;
		Контекст.ПоказательВР = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в контексте формы на клиенте или на сервере
//
Процедура НастроитьНаборПоказателейОтчета(Форма) Экспорт
	
	Если Не ПоддерживаетсяВыборПоказателей(Форма.Отчет) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьНаборСуммовыхПоказателей(Форма.Отчет.НаборПоказателейОтчета);
	
	НастроитьКнопкиСохраненияРегистровБухгалтерскогоУчета(Форма, Форма.Отчет.НаборПоказателейОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область Формы // с контекстом

// Вызываются в контексте формы на клиенте или на сервере

Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Форма.Заголовок = ТекстЗаголовка(
		Форма.ПредставлениеТекущегоВарианта, // свойство расширения отчета
		Форма.ПредставлениеПериодаЗаголовок,
		Форма.ПредставлениеОрганизации); // может быть не заполнено, если организация одна
	
КонецПроцедуры

#Область НастройкаПоПериоду

Функция ОтчетЗаЦелыйНалоговыйПериод(Форма) Экспорт
	
	Если Не ОтчетПоддерживаетВыборСНачалаГода(Форма) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Форма.Отчет.СНачалаГода;
	
КонецФункции

Процедура НастроитьДиалогВыбораПериода(Форма) Экспорт
	
	Если Форма.Отчет.КонецПериода < Форма.ДатаРегистрацииОрганизации Тогда
		
		Форма.Отчет.КонецПериода  = КонецМесяца(Форма.ДатаРегистрацииОрганизации);
		Форма.Отчет.НачалоПериода = НачалоМесяца(Форма.Отчет.КонецПериода);
		
		Если ОтчетПоддерживаетВыборСНачалаГода(Форма) Тогда
			Форма.Отчет.СНачалаГода = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтчетПоддерживаетВыборПроизвольногоИнтервала(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПредставлениеПериодаВыбор = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ВидПериодаМесяц(),
		НачалоМесяца(Форма.Отчет.КонецПериода),
		Форма.Отчет.КонецПериода);
	
КонецПроцедуры

Функция ОпределитьПериодОтчета(Форма, ЦелыйИнтервал) Экспорт
	
	ИнформацияНалоговыйПериод = Неопределено;
	
	Если ОтчетПоддерживаетВыборПроизвольногоИнтервала(Форма) Тогда
		
		ОпределитьИнтервалОтчета(
			Форма.ПредставлениеПериодаЗаголовок,
			ИнформацияНалоговыйПериод,
			Форма.Отчет.НачалоПериода,
			Форма.Отчет.КонецПериода,
			ЦелыйИнтервал,
			Форма.Отчет.Организация,
			Форма.ДатаРегистрацииОрганизации);
			
	Иначе
		
		ЦелыйИнтервал         = ОтчетЗаЦелыйНалоговыйПериод(Форма);
		ЗарегистрированаДавно = Не ЗначениеЗаполнено(Форма.ДатаРегистрацииОрганизации)
			Или КонецГода(Форма.ДатаРегистрацииОрганизации) + 1 < НачалоГода(Форма.Отчет.КонецПериода);
		
		Если Не ЦелыйИнтервал И ЗарегистрированаДавно Тогда
			
			// Простой случай - дата регистрации уже не важна
			
			Форма.Отчет.НачалоПериода = НачалоМесяца(Форма.Отчет.КонецПериода);
				
			Форма.ПредставлениеПериодаЗаголовок = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				Форма.Отчет.НачалоПериода,
				Форма.Отчет.КонецПериода,
				Истина);
					
		Иначе
			
			ОписаниеНалоговогоПериода = СправкиРасчетыВызовСервера.ОписаниеНалоговогоПериода(
				Форма.Отчет.КонецПериода,
				Форма.Отчет.Организация);
				
			Если ЦелыйИнтервал Или НачалоМесяца(Форма.Отчет.КонецПериода) <= ОписаниеНалоговогоПериода.НачалоПериода Тогда
				
				Форма.Отчет.НачалоПериода           = ОписаниеНалоговогоПериода.НачалоПериода;
				Форма.ПредставлениеПериодаЗаголовок = ОписаниеНалоговогоПериода.ПредставлениеПериода;
				
				// может требоваться отобразить особенности налогового периода
				ИнформацияНалоговыйПериод = ОписаниеНалоговогоПериода.ИнформацияНалоговыйПериод;
				
			Иначе
				
				Форма.Отчет.НачалоПериода = НачалоМесяца(Форма.Отчет.КонецПериода);
					
				Форма.ПредставлениеПериодаЗаголовок = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
					Форма.Отчет.НачалоПериода,
					Форма.Отчет.КонецПериода,
					Истина);
					
				Если Форма.Отчет.НачалоПериода = НачалоГода(Форма.Отчет.НачалоПериода) Тогда
					// С точки зрения уплаты налогов, это не совсем начало года. Выведем об этом оповещение.
					ИнформацияНалоговыйПериод = ОписаниеНалоговогоПериода.ИнформацияНалоговыйПериод;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Форма);
	
	Возврат ИнформацияНалоговыйПериод;
	
КонецФункции

Процедура ОпределитьИнтервалОтчета(ПредставлениеПериода, ИнформацияНалоговыйПериод, НачалоПериода, КонецПериода, ЦелыйИнтервал, Организация, ДатаРегистрацииОрганизации) Экспорт
	
	// Дата регистрации важна в первые месяцы регистрации - т.е. для отчетов, начинающихся ранее февраля года, следующего
	// за годом регистрации.
	ЗарегистрированаДавно = Не ЗначениеЗаполнено(ДатаРегистрацииОрганизации)
		Или КонецГода(ДатаРегистрацииОрганизации) < ДобавитьМесяц(НачалоПериода, -1);
		
	Если ЗарегистрированаДавно Тогда
		
		// Не важны особенности определения налогового периода
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоПериода,
			КонецПериода,
			Истина);
			
		Возврат;
		
	КонецЕсли;
		
	СНачалаГода = (НачалоПериода = НачалоГода(НачалоПериода));
	
	ОписаниеНалоговогоПериода = СправкиРасчетыВызовСервера.ОписаниеНалоговогоПериода(
		КонецПериода,
		Организация);
	
	ИнформацияНалоговыйПериод = ОписаниеНалоговогоПериода.ИнформацияНалоговыйПериод;
	
	Если СНачалаГода И ЦелыйИнтервал И НачалоПериода >= ОписаниеНалоговогоПериода.НачалоПериода Тогда
		
		// Приведем дату к началу налогового периода, так, чтобы период включал целый интервал.
		НачалоПериода        = ОписаниеНалоговогоПериода.НачалоПериода;
		ПредставлениеПериода = ОписаниеНалоговогоПериода.ПредставлениеПериода;
		
	ИначеЕсли НачалоПериода = ОписаниеНалоговогоПериода.НачалоПериода
		И КонецДня(КонецПериода) > КонецМесяца(ОписаниеНалоговогоПериода.Период)
		И КонецДня(КонецПериода) = КонецМесяца(КонецПериода) Тогда
		
		// Покажем, что речь идет о целом отчетном периоде
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(КонецПериода),
			КонецПериода,
			Истина);
		
	ИначеЕсли СНачалаГода И НачалоПериода > ОписаниеНалоговогоПериода.НачалоПериода Тогда
		
		// Покажем, что несмотря на совпадение даты с началом календарного года,
		// отчет включает не все операции, относящиеся к этому году.
		
		ПредставлениеПериода = СтрШаблон(
			НСтр("ru = '%1 - %2';
				|en = '%1 - %2'"),
			Формат(НачалоПериода, "ДЛФ=D"),
			Формат(КонецПериода,  "ДЛФ=D"));
		
	Иначе
		
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоПериода,
			КонецПериода,
			Истина);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область КонтрольПовторногоВыбораОрганизации

// Контроль повторного выбора организации используется по двум причинам:
// 1. обработка выбора организации требует контекстного вызова сервера.
//    Если повторно выбрана та же организация, то вызова можно избежать.
// 2. в СправкиРасчеты.НастроитьОтборПоОрганизации() при смене организации очищаются значения
//    полей отбора, которые могут не соответствовать организации.
//    Это действие подсистема БухгалтерскиеОтчеты выполняет без фактического контроля,
//    соответствуют они или нет.

Функция ФормаПоддерживаетКонтрольПовторногоВыбораОрганизации(Форма) Экспорт
	
	// Требования к отчету для этой поддержки
	// - реквизит формы ОрганизацияПредыдущееЗначение.
	//
	// Для форм с ПоддерживаетсяВыборВсяОрганизация реквизит хранит значение ключа из СоответствиеОрганизаций,
	// соответствующее предыдущему значению сочетания выбранной организации и флага ВключатьОбособленныеПодразделения.
	//
	// Для форм без ПоддерживаетсяВыборВсяОрганизация реквизит хранит предыдущее значение ссылки на организацию.
	//
	// Тип реквизита должен соответствовать этим значениям.
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОрганизацияПредыдущееЗначение");
	
КонецФункции

Функция ОрганизацияВыбранаПовторно(Организация, Форма) Экспорт
	
	Если Не ФормаПоддерживаетКонтрольПовторногоВыбораОрганизации(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Форма.ОрганизацияПредыдущееЗначение) <> ТипЗнч(Организация) Тогда
		// Если в форме ПоддерживаетсяВыборВсяОрганизация,
		// то в ОрганизацияПредыдущееЗначение сохраняется значение ключа из СоответствиеОрганизаций.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Форма.ОрганизацияПредыдущееЗначение = Организация;
	
КонецФункции

Процедура УстановитьОрганизацияПредыдущееЗначение(Форма, Организация) Экспорт
	
	Если Не ФормаПоддерживаетКонтрольПовторногоВыбораОрганизации(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Форма.ОрганизацияПредыдущееЗначение) <> ТипЗнч(Организация) Тогда
		// Если в форме ПоддерживаетсяВыборВсяОрганизация,
		// то в ОрганизацияПредыдущееЗначение сохраняется значение ключа из СоответствиеОрганизаций.
		Возврат;
	КонецЕсли;
	
	Форма.ОрганизацияПредыдущееЗначение = Организация;
	
КонецПроцедуры

#КонецОбласти

Процедура ОтметитьОтчетНеАктуальный(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

Процедура НастроитьКнопкиСохраненияРегистровБухгалтерскогоУчета(Форма, НомерНабораСуммовыхПоказателей) Экспорт
	
	КнопкаСохранитьРегистрУчетаИПодписатьЭЦП 	= Форма.Элементы.Найти("СохранитьРегистрУчетаИПодписатьЭЦП");
	КнопкаСохранитьРегистрБухгалтерскогоУчета 	= Форма.Элементы.Найти("СохранитьРегистрБухгалтерскогоУчета");
	
	Если КнопкаСохранитьРегистрУчетаИПодписатьЭЦП = Неопределено 
		Или КнопкаСохранитьРегистрБухгалтерскогоУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьБухгалтерскийУчет = НаборСуммовыхПоказателейВключаетБухгалтерскийУчет(НомерНабораСуммовыхПоказателей);
	
	Форма.Элементы.СохранитьРегистрБухгалтерскогоУчета.Доступность            = ЕстьБухгалтерскийУчет;
	Форма.Элементы.СохранитьРегистрУчетаИПодписатьЭЦП.Доступность             = ЕстьБухгалтерскийУчет;
	Форма.Элементы.СохранитьРегистрБухгалтерскогоУчетаВсеДействия.Доступность = ЕстьБухгалтерскийУчет;
	Форма.Элементы.СохранитьРегистрУчетаИПодписатьЭЦПВсеДействия.Доступность  = ЕстьБухгалтерскийУчет;
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти
