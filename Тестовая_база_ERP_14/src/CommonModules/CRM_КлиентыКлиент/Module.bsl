////////////////////////////////////////////////////////////////////////////////
// Клиенты клиент
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Функция отделяет часть наименования физического лица (обращение и ФИО).
//
// Параметры:
//  ИсходнаяСтрока	- Строка	- Строка наименования, у которого надо отделить часть.
//
// Возвращаемое значение:
//	Строка	- Выделенная часть наименования. 
//
Функция ВыделитьЧастьНаименованияКонтактногоЛица(ИсходнаяСтрока) Экспорт
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	Возврат ВыделенноеСлово;
КонецФункции // ВыделитьЧастьНаименованияКонтактногоЛица()

// Функция возвращает список выбора представлений физического лица исходя из его обращения и ФИО.
//
// Параметры:
//  Объект	- СправочникСсылка	- Изменяемый объект. 
//
// Возвращаемое значение:
//	Массив	- Массив представлений физического лица.
//
Функция ПолучитьСписокПредставленийФизЛица(Объект, ИспользоватьИП=Истина) Экспорт
	СписокВыбора = Новый Массив;
	Если НЕ ПустаяСтрока(Объект.CRM_Фамилия) И НЕ ПустаяСтрока(Объект.CRM_Имя) Тогда
		Если ИспользоватьИП Тогда
			СписокВыбора.Добавить("ИП "+СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Объект.CRM_Имя)+?(ЗначениеЗаполнено(Объект.CRM_Отчество), " "+Объект.CRM_Отчество, ""));
		КонецЕсли;
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Объект.CRM_Имя)));
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Имя) + " " + СокрЛП(Объект.CRM_Фамилия)));
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Сред(Объект.CRM_Имя, 1, 1)) + "."));
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Объект.CRM_Фамилия) И НЕ ПустаяСтрока(Объект.CRM_Имя)
		 И НЕ ПустаяСтрока(Объект.CRM_Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Объект.CRM_Имя) + " " 
			+ СокрЛП(Объект.CRM_Отчество)));
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Сред(Объект.CRM_Имя, 1, 1)) 
			+ "." + СокрЛП(Сред(Объект.CRM_Отчество,1,1)) + "."));
	КонецЕсли; 
	Возврат СписокВыбора;
КонецФункции // ПолучитьСписокПредставленийФизЛица()

// Функция возвращает список выбора представлений физического лица исходя из его обращения и ФИО.
//
// Параметры:
//  Фамилия	 - Строка - Фамилия физического лица.
//  Имя		 - Строка - Имя физического лица.
//  Отчество - Строка - Отчество физического лица.
// 
// Возвращаемое значение:
//  Массив - Массив представлений физического лица.
//
Функция ПолучитьСписокПредставленийФизЛицаИзФИО(Фамилия, Имя, Отчество) Экспорт
	СписокВыбора = Новый Массив;
	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) Тогда
		СписокВыбора.Добавить("ИП "+СокрЛП(Фамилия) + " " + СокрЛП(Имя)+?(ЗначениеЗаполнено(Отчество), " "+Отчество, ""));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя)));
		СписокВыбора.Добавить((СокрЛП(Имя) + " " + СокрЛП(Фамилия)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя, 1, 1)) + "."));
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя)
		 И НЕ ПустаяСтрока(Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " 
			+ СокрЛП(Отчество)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя, 1, 1)) 
			+ "." + СокрЛП(Сред(Отчество,1,1)) + "."));
	КонецЕсли; 
	Возврат СписокВыбора;
КонецФункции // ПолучитьСписокПредставленийФизЛица()

// Функция определяет пол человека по его имени.
//
// Параметры:
//  Имя	 - Строка - По последней букве имени, пытаемся определить пол.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка - Пол человека, определенный по его имени.
//
Функция ОпределитьПол(Имя) Экспорт
	СписокМужскихИсключений = Новый СписокЗначений;
	СписокМужскихИсключений.Добавить("ИЛЬЯ");
	СписокМужскихИсключений.Добавить("НИКОЛА");
	СписокМужскихИсключений.Добавить("САВВА");
	СписокМужскихИсключений.Добавить("КУЗЬМА");
	СписокМужскихИсключений.Добавить("НИКИТА");
	СписокМужскихИсключений.Добавить("ДАНИЛА");
	СписокМужскихИсключений.Добавить("ЕМЕЛЯ");
	СписокЖенскихИсключений = Новый СписокЗначений;
	СписокЖенскихИсключений.Добавить("ЛЮБОВЬ");
	Окончание = ВРег(Прав(СокрП(Имя),1));
	Если (Найти("АЯ",Окончание) И СписокМужскихИсключений.НайтиПоЗначению(ВРег(Имя)) = Неопределено) Или
		СписокЖенскихИсключений.НайтиПоЗначению(ВРег(Имя)) <> Неопределено Тогда // Вероятно женщина
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	Иначе
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	КонецЕсли; 
	Возврат Пол;
КонецФункции // ОпределитьПол()

// Процедура заполняет КПП на базе ИНН.
//
// Параметры:
//  ИНН							 - Строка	 - ИНН на основании которого будет сгенерирован КПП.
//  КПП							 - Строка	 - КПП, текущий КПП контрагента.
//  БезусловноеЗаполнениеКПП	 - Булево	 - если Истина, то не будет запрашиваться подтверждение пользователя при смене
//  	КПП.
//  УникальныйИдентификаторФормы - Строка	 - Уникальный идентификатор формы.
//
Процедура ЗаполнитьКППпоИНН(Знач ИНН, КПП, БезусловноеЗаполнениеКПП = Истина, УникальныйИдентификаторФормы) Экспорт
	
	// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
	// первые 4 цифры ИНН + 01001, например:
	// ИНН 7712563009
	// КПП 771201001
		
	// Если не указано ИНН или заполнено КПП то прерываем выполнение операции.
	Если (СтрДлина(ИНН) < 4) Тогда
		Возврат;
	КонецЕсли;
	
	ПревыеСимволыИНН = Лев(ИНН, 4);
	НовоеЗначениеКПП = ПревыеСимволыИНН + "01001";
	
	// Если новое значение КПП и старое значение КПП совпадают, то прерываем выполнение операции.
	Если (НовоеЗначениеКПП = КПП) Тогда
		Возврат;
	КонецЕсли;
	
	// Если безусловно нужно поменять - меняем.
	Если БезусловноеЗаполнениеКПП ИЛИ НЕ ЗначениеЗаполнено(КПП) Тогда
		КПП = НовоеЗначениеКПП;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменить КПП  на ""%1""?';en='Change the checkpoint to "" %1""?'"), НовоеЗначениеКПП);
	// +ЕИС
	//ОтветНужноМенятьКПП = (Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да);
	//Если ОтветНужноМенятьКПП Тогда
	//	КПП = НовоеЗначениеКПП;
	//КонецЕсли;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовоеЗначениеКПП", НовоеЗначениеКПП);
	Дополнительно.Вставить("КПП", КПП);
	Дополнительно.Вставить("УникальныйИндентфикаторФормы", УникальныйИдентификаторФормы);
	
	ОповещениеОбработкиДиалога = Новый ОписаниеОповещения("ОбработкаОповещенияВопросаКПП", ЭтотОбъект, Дополнительно);
	ПоказатьВопрос(ОповещениеОбработкиДиалога, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	// -ЕИС
КонецПроцедуры

// +CRM

// Процедура открывает форму быстрого ввода партнера
//
// Параметры:
//  ФормаВладелец	 - УправляемаяФорма - Владелец формы. 
//  ПараметрыФормы	 - Структура - Параметры формы. 
//
Процедура ОткрытьФормуБыстрогоВводаПартнера(Знач ФормаВладелец = Неопределено, Знач ПараметрыФормы = Неопределено) Экспорт
	
	ИмяФормыБыстрогоВводаПартнера = "";
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы", "CRM_Модуль_ФормаБыстрогоВвода") Тогда
		
		ИмяФормыБыстрогоВводаПартнера = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаБыстрогоВвода";
		
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы", "CRM_ФормаБыстрогоВвода") Тогда
		
		ИмяФормыБыстрогоВводаПартнера = "Справочник.Партнеры.Форма.CRM_ФормаБыстрогоВвода";
		
	КонецЕсли;	
		
	Если НЕ ПустаяСтрока(ИмяФормыБыстрогоВводаПартнера) Тогда
	
		ФормаБыстрогоВводаПартнера = ПолучитьФорму(ИмяФормыБыстрогоВводаПартнера, ПараметрыФормы, ФормаВладелец);
		
		Если ПараметрыФормы.Свойство("Наименование") Тогда
			Если Не ЗначениеЗаполнено(ФормаБыстрогоВводаПартнера.Наименование) Тогда
				ФормаБыстрогоВводаПартнера.Наименование = ПараметрыФормы.Наименование;				
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыФормы.Свойство("КонтактноеЛицо") Тогда
			ФИОКЛ = ПараметрыФормы.КонтактноеЛицо;
			ФамилияКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			ИмяКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			ОтчествоКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			Если ЗначениеЗаполнено(ФамилияКЛ) Тогда
				ФормаБыстрогоВводаПартнера.ФамилияКонтактногоЛица = ФамилияКЛ;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяКЛ) Тогда
				ФормаБыстрогоВводаПартнера.ИмяКонтактногоЛица = ИмяКЛ;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчествоКЛ) Тогда
				ФормаБыстрогоВводаПартнера.ОтчествоКонтактногоЛица = ОтчествоКЛ;
			КонецЕсли;
		КонецЕсли;
		
		ФормаБыстрогоВводаПартнера.Открыть();		
	
	КонецЕсли; 
	

КонецПроцедуры

Процедура КонтактныеЛицаНажатие(Форма, Команда) Экспорт
	
	Если Команда.Имя = "ЭлементЕщеКонтакты" Тогда
		Форма.Элементы["ГруппаСписокКЛ"].Показать();
	ИначеЕсли Команда.Имя = "ДобавитьНовоеКЛ" Тогда
		Форма.Элементы["ГруппаСписокКЛ"].Скрыть();
		РеквизитПартнер = "";
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
			РеквизитПартнер = "Ссылка";
		ИначеЕсли Форма.Объект.Свойство("Партнер") Тогда
			РеквизитПартнер = "Партнер";
		КонецЕсли;
		Если РеквизитПартнер <> "" Тогда
			ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Владелец", Форма.Объект[РеквизитПартнер]), Форма);
		КонецЕсли;
	ИначеЕсли Команда.Имя = "СделатьКЛОсновным" Тогда
		ТекущаяСтрокаКЛ = Форма.Элементы.ЭлементСписокКЛ.ТекущиеДанные;
		Если ТекущаяСтрокаКЛ <> Неопределено Тогда
			Форма.Элементы["ГруппаСписокКЛ"].Скрыть();
			Если ЗначениеЗаполнено(Форма.ИмяРеквизитаКонтактноеЛицо) Тогда
				Если Лев(Форма.ИмяРеквизитаКонтактноеЛицо, 7) = "Объект." Тогда
					Форма["Объект"][Сред(Форма.ИмяРеквизитаКонтактноеЛицо, 8)] = ТекущаяСтрокаКЛ.КонтактноеЛицо;
				Иначе
					Форма[Форма.ИмяРеквизитаКонтактноеЛицо] = ТекущаяСтрокаКЛ.КонтактноеЛицо;
				КонецЕсли;
				Форма.Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрНайти(Команда.Имя, "ЭлементКЛ") > 0 Тогда
		ТекущиеСтрокиКЛ = Форма.КонтактныеЛицаПартнера.НайтиСтроки(Новый Структура("ИмяРеквизита", Команда.Имя));
		Если ТекущиеСтрокиКЛ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ПоказатьЗначение(, ТекущиеСтрокиКЛ[0].КонтактноеЛицо);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтактныеЛицаВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт

	Форма.Элементы["ГруппаСписокКЛ"].Скрыть();
	КонтактноеЛицо = Элемент.ТекущиеДанные.КонтактноеЛицо;
	Если Поле.Имя = "ЭлементСписокКЛКонтактноеЛицо" Тогда
		ПоказатьЗначение(, КонтактноеЛицо);
	ИначеЕсли СтрНайти(Поле.Имя, "КИТипа") > 0 Тогда
		КИКонтактногоЛица = Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя, "ЭлементСписокКЛ", "")];
		ТипКИКонтактногоЛица = Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя, "ЭлементСписокКЛКИТипа", "ТипКИ")];
		Если ТипКИКонтактногоЛица = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
			ДанныеЗаполнения	= Новый Структура;
			ДанныеЗаполнения.Вставить("Основание",	Форма.Объект.Ссылка);	
			ДополнительныеПараметры	= Новый Структура;
			ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
			сфпСофтФонПроКлиент.сфпПозвонить(КИКонтактногоЛица, КонтактноеЛицо, ДополнительныеПараметры);
		ИначеЕсли ТипКИКонтактногоЛица = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		   	ПараметрыФормы = Новый Структура("Основание",Форма.Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеЗаполнения", Форма.Объект.Ссылка);
			СписокАдресов = Новый СписокЗначений;
			СписокАдресов.Добавить(КонтактноеЛицо, КИКонтактногоЛица);
			ПараметрыФормы.Вставить("Кому", СписокАдресов);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// +CRM
Процедура ОбработкаОповещенияВопросаКПП(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		КПП = Дополнительно.НовоеЗначениеКПП;
	Иначе
		КПП = Дополнительно.КПП;
	КонецЕсли;
	Оповестить("Изменение КПП", КПП , Дополнительно.УникальныйИндентфикаторФормы);
КонецПроцедуры
// -CRM

#КонецОбласти
