Процедура ДвиженияПоРегистру_РЭЙ_ПлатежиПоКонтрактамВЭД(Источник, Отказ, ОтменаПроведения) Экспорт
	Имя = ВРег(СокрЛП(Источник.Метаданные().Имя));
	
	Если Имя = ВРег("СписаниеСРасчетногоСчета") Или 
		Имя = ВРег("ПлатежноеПоручениеИсходящее") Или 
		Имя = ВРег("ПлатежныйОрдерСписаниеДенежныхСредств") Или 
		Имя = ВРег("РЭЙ_ЗаявлениеНаПереводВалюты") Или 
		Имя = ВРег("АккредитивПереданный") Или
		Имя = ВРег("ПоступлениеНаРасчетныйСчет") Или 
		Имя = ВРег("ПлатежноеПоручениеВходящее") Или 
		Имя = ВРег("ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.Контрагент) Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Источник.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ОтменаПроведения Тогда
			Если Не Источник.Контрагент.РЭЙ_НеЯвляетсяРезидентом Тогда
				ОтменаПроведения = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Не ОтменаПроведения Тогда
			Если Источник.Метаданные().Реквизиты.Найти("Оплачено") <> Неопределено Тогда
				Если Не Источник.Оплачено Тогда
					ОтменаПроведения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Не ОтменаПроведения Тогда
			Если Источник.Метаданные().Реквизиты.Найти("ДатаОплаты") <> Неопределено Тогда
				ДатаОплаты = Источник.ДатаОплаты;
			Иначе
				ДатаОплаты = Источник.Дата;
			КонецЕсли;
			
			КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(Источник.Ссылка);
			
			Если ЗначениеЗаполнено(КонтрактВЭД) Тогда
				НаборЗаписей = РегистрыСведений.РЭЙ_ПлатежиПоКонтрактамВЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.РасчетныйДокумент.Установить(Источник.Ссылка);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РасчетныйДокумент = Источник.Ссылка;
				НоваяЗапись.КонтрактВЭД = КонтрактВЭД;
				НоваяЗапись.ДатаОплаты = ДатаОплаты;
				НоваяЗапись.СуммаВВалютеДокумента = Источник.СуммаДокумента;
				НоваяЗапись.СуммаВВалютеКонтракта = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(НоваяЗапись.СуммаВВалютеДокумента, Источник.Дата, Источник.ВалютаДокумента, КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов);
				
				ВалютаДолларыСША = Справочники.Валюты.НайтиПоКоду(840);
				НоваяЗапись.СуммаВДолларахСША = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(НоваяЗапись.СуммаВВалютеДокумента, Источник.Дата, Источник.ВалютаДокумента, ВалютаДолларыСША);
				
				ВалютаРублиРФ = Справочники.Валюты.НайтиПоКоду(643);
				НоваяЗапись.СуммаВРубляхРФ = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(НоваяЗапись.СуммаВВалютеДокумента, Источник.Дата, Источник.ВалютаДокумента, ВалютаРублиРФ);
				
				НаборЗаписей.Записать();
				
				РЭЙ_ЗадачиСервер.СозданиеЗадачПриПревышенииСуммы(КонтрактВЭД);
			КонецЕсли;
		КонецЕсли;
		
		Если ОтменаПроведения Тогда
			НаборЗаписей = РегистрыСведений.РЭЙ_ПлатежиПоКонтрактамВЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РасчетныйДокумент.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоРегистру_РЭЙ_ПоставкиПоКонтрактамВЭД(Источник, Отказ, ОтменаПроведения) Экспорт
	Имя = ВРег(СокрЛП(Источник.Метаданные().Имя));
	
	Если Имя = ВРег("ВозвратТоваровПоставщику") Или 
		Имя = ВРег("ВозвратТоваровОтКлиента") Или 
		Имя = ВРег("ВозвратТоваровОтПокупателя") Или 
		Имя = ВРег("ОтчетКомиссионераОПродажах") Или
		Имя = ВРег("ОтчетКомитентуОПродажах") Или 
		Имя = ВРег("ПоступлениеДопРасходов") Или 
		Имя = ВРег("ПоступлениеТоваровИзПереработки") Или 
		Имя = ВРег("ПолучениеУслугПоПереработке") Или 
		Имя = ВРег("ПоступлениеТоваровУслуг") Или 
		Имя = ВРег("ПриобретениеТоваровУслуг") Или 
		Имя = ВРег("ПриобретениеУслугПрочихАктивов") Или 
		Имя = ВРег("РеализацияТоваровУслуг") Или
		Имя = ВРег("РеализацияУслугПрочихАктивов") Тогда
		
		Если Не ОтменаПроведения Тогда
			Если Не Источник.Контрагент.РЭЙ_НеЯвляетсяРезидентом Тогда
				ОтменаПроведения = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Не ОтменаПроведения Тогда
			ДатаПоставки = Источник.Дата;
			
			КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(Источник.Ссылка);
			
			Если ЗначениеЗаполнено(КонтрактВЭД) Тогда
				НаборЗаписей = РегистрыСведений.РЭЙ_ПоставкиПоКонтрактамВЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПодтверждающийДокумент.Установить(Источник.Ссылка);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ПодтверждающийДокумент = Источник.Ссылка;
				НоваяЗапись.КонтрактВЭД = КонтрактВЭД;
				НоваяЗапись.ДатаПоставки = ДатаПоставки;
				НоваяЗапись.СуммаВВалютеДокумента = Источник.СуммаДокумента;
				НоваяЗапись.СуммаВВалютеКонтракта = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(НоваяЗапись.СуммаВВалютеДокумента, Источник.Дата, Источник.Валюта, КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов);
				
				ВалютаДолларыСША = Справочники.Валюты.НайтиПоКоду(840);
				НоваяЗапись.СуммаВДолларахСША = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(НоваяЗапись.СуммаВВалютеДокумента, Источник.Дата, Источник.Валюта, ВалютаДолларыСША);
				
				ВалютаРублиРФ = Справочники.Валюты.НайтиПоКоду(643);
				НоваяЗапись.СуммаВРубляхРФ = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(НоваяЗапись.СуммаВВалютеДокумента, Источник.Дата, Источник.Валюта, ВалютаРублиРФ);
				
				НаборЗаписей.Записать();
				
				РЭЙ_ЗадачиСервер.СозданиеЗадачПриПревышенииСуммы(КонтрактВЭД);
			КонецЕсли;
		КонецЕсли;
		
		Если ОтменаПроведения Тогда
			НаборЗаписей = РегистрыСведений.РЭЙ_ПоставкиПоКонтрактамВЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПодтверждающийДокумент.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПараметрыСеанса() Экспорт
	// РЭЙ_КлючевыеРеквизиты
	Макет = Задачи.РЭЙ_ЗадачиВЭД.ПолучитьМакет("КлючевыеРеквизиты");
	
	РезультатВидыДокументов = Новый Структура();
	
	т = 1;
	Пока т <= Макет.ВысотаТаблицы Цикл
		СписокВидовДокументов = Новый СписокЗначений;
		Пока т <= Макет.ВысотаТаблицы И Не ПустаяСтрока(Макет.Область(т, 1).Текст) Цикл
			СписокВидовДокументов.Добавить(Макет.Область(т, 1).Текст);
			т = т + 1;
		КонецЦикла;
		
		СписокРеквизитов = Новый СписокЗначений;
		Пока т <= Макет.ВысотаТаблицы И ПустаяСтрока(Макет.Область(т, 1).Текст) Цикл
			СписокРеквизитов.Добавить(Макет.Область(т, 2).Текст);
			т = т + 1;
		КонецЦикла;
		
		Для Каждого текВидДокумента Из СписокВидовДокументов Цикл
			МетаданныеДокумента = Метаданные.Документы.Найти(текВидДокумента.Значение);
			Если МетаданныеДокумента <> Неопределено Тогда
				РезультатРеквизиты = Новый Структура();
				РезультатТабличныеЧасти = Новый Структура();
				Для Каждого текРеквизит Из СписокРеквизитов Цикл
					ПозицияТочки = Найти(текРеквизит.Значение, ".");
					Если ПозицияТочки = 0 Тогда
						// Реквизит документа
						Если текРеквизит.Значение = "Дата" Тогда
							РезультатРеквизиты.Вставить(текРеквизит.Значение);
						ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(текРеквизит.Значение) <> Неопределено Тогда
							РезультатРеквизиты.Вставить(текРеквизит.Значение);
						КонецЕсли;
					Иначе
						// Реквизит табличной части
						текИмяТЧ = Сред(текРеквизит.Значение, 1, ПозицияТочки - 1);
						текИмяРеквизита = Сред(текРеквизит.Значение, ПозицияТочки + 1);
						Если МетаданныеДокумента.ТабличныеЧасти.Найти(текИмяТЧ) <> Неопределено Тогда
							Если МетаданныеДокумента.ТабличныеЧасти.Найти(текИмяТЧ).Реквизиты.Найти(текИмяРеквизита) <> Неопределено Тогда
								Если РезультатТабличныеЧасти.Свойство(текИмяТЧ) = Ложь Тогда
									РезультатТабличныеЧасти.Вставить(текИмяТЧ, Новый Структура());
								КонецЕсли;
								РезультатТабличныеЧасти[текИмяТЧ].Вставить(текИмяРеквизита);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого текТабличнаяЧасть Из РезультатТабличныеЧасти Цикл
					РезультатТабличныеЧасти.Вставить(текТабличнаяЧасть.Ключ, Новый ФиксированнаяСтруктура(РезультатТабличныеЧасти[текТабличнаяЧасть.Ключ]));
				КонецЦикла;
				
				Результат = Новый Структура();
				Результат.Вставить("Реквизиты", Новый ФиксированнаяСтруктура(РезультатРеквизиты));
				Результат.Вставить("ТабличныеЧасти", Новый ФиксированнаяСтруктура(РезультатТабличныеЧасти));
				
				Если РезультатРеквизиты.Количество() > 0 Или РезультатТабличныеЧасти.Количество() > 0 Тогда
					РезультатВидыДокументов.Вставить(текВидДокумента, Новый ФиксированнаяСтруктура(Результат));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыСеанса.РЭЙ_КлючевыеРеквизиты = Новый ФиксированнаяСтруктура(РезультатВидыДокументов);
КонецПроцедуры

Процедура ЗаполнитьДопСоглашения(ДоговорКонтрагента) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_КонтрактыВЭД.Ссылка
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	|ГДЕ
	|	РЭЙ_КонтрактыВЭД.ДоговорКонтрагента.Родитель = &ДоговорКонтрагента
	|	И РЭЙ_КонтрактыВЭД.РамочныйКонтракт";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат; // Это рамочный контракт
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_ДопСоглашения.ДопСоглашение
	|ИЗ
	|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
	|ГДЕ
	|	РЭЙ_ДопСоглашения.ДопСоглашение = &ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат; // Уже зарегистрировано в доп. соглашениях
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_КонтрактыВЭД.Ссылка
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	|ГДЕ
	|	РЭЙ_КонтрактыВЭД.ДоговорКонтрагента.Родитель = &ДоговорКонтрагентаРодитель
	|	И РЭЙ_КонтрактыВЭД.РамочныйКонтракт";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагентаРодитель", ДоговорКонтрагента.Родитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат; // В группе нет рамочного контракта ВЭД
	ИначеЕсли Выборка.Количество() > 1 Тогда
		Сообщить("В группе " + ДоговорКонтрагента.Родитель + " найдено несколько рамочных договоров. Невозможно определить контракт ВЭД.");
		Возврат;
	ИначеЕсли Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		КонтрактВЭД = Выборка.Ссылка;
		
		ЗаписьДопСоглашения = РегистрыСведений.РЭЙ_ДопСоглашения.СоздатьМенеджерЗаписи();
		ЗаписьДопСоглашения.Договор = КонтрактВЭД;
		ЗаписьДопСоглашения.ДопСоглашение = ДоговорКонтрагента;
		ЗаписьДопСоглашения.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ЗаписьДопСоглашения.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВалютныйБанковкийСчет(БанковскийСчет) Экспорт
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_БанковскиеСчетаВалютные.Ссылка
	|ИЗ
	|	Справочник.РЭЙ_БанковскиеСчетаВалютные КАК РЭЙ_БанковскиеСчетаВалютные
	|ГДЕ
	|	РЭЙ_БанковскиеСчетаВалютные.БанковскийСчет = &БанковскийСчет";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции	

Функция ПолучитьНаименованиеВалютногоБанковкогоСчета(БанковскийСчет) Экспорт
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат "";
	КонецЕсли;
	
	ВалютныйБанковскийСчет = ПолучитьВалютныйБанковкийСчет(БанковскийСчет);
	Если Не ЗначениеЗаполнено(ВалютныйБанковскийСчет) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ВалютныйБанковскийСчет.Наименование;
КонецФункции	

Процедура ТрансляцияРеквизитовВБанковскиеСчетаВалютные(ТекущийОбъект) Экспорт
	текВалютныйБанковскийСчет = РЭЙ_Привилегированный.ПолучитьВалютныйБанковкийСчет(ТекущийОбъект.Ссылка);
	Если ЗначениеЗаполнено(текВалютныйБанковскийСчет) Тогда
		ТекстСообщенияОбОшибках = Новый ТекстовыйДокумент;
		ЕстьИзменения = Ложь;
		ОбъектВалютныйБанковскийСчет = текВалютныйБанковскийСчет.ПолучитьОбъект();
		СтароеАвтоНаименование = РЭЙ_СлужебныйСервер.СформироватьНаименованиеВалютногоБанковскогоСчета(ОбъектВалютныйБанковскийСчет);
		Если текВалютныйБанковскийСчет.ВидСчета <> ТекущийОбъект.ВидСчета Тогда
			ОбъектВалютныйБанковскийСчет.ВидСчета = ТекущийОбъект.ВидСчета;
			ТекстСообщенияОбОшибках.ДобавитьСтроку("Ошибка при заполнении реквзита ""Вид счета"" в справочние ""Банковские счета валютные"".");
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если текВалютныйБанковскийСчет.Банк <> ТекущийОбъект.Банк Тогда
			ОбъектВалютныйБанковскийСчет.Банк = ТекущийОбъект.Банк;
			ТекстСообщенияОбОшибках.ДобавитьСтроку("Ошибка при заполнении реквзита ""Банк"" в справочние ""Банковские счета валютные"".");
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если текВалютныйБанковскийСчет.ВалютаДенежныхСредств <> ТекущийОбъект.ВалютаДенежныхСредств Тогда
			ОбъектВалютныйБанковскийСчет.ВалютаДенежныхСредств = ТекущийОбъект.ВалютаДенежныхСредств;
			ТекстСообщенияОбОшибках.ДобавитьСтроку("Ошибка при заполнении реквзита ""Валюта денежных средств"" в справочние ""Банковские счета валютные"".");
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если текВалютныйБанковскийСчет.Банк.РЭЙ_НеЯвляетсяРезидентом = Ложь Тогда
			Если текВалютныйБанковскийСчет.НомерСчета <> ТекущийОбъект.НомерСчета Тогда
				ОбъектВалютныйБанковскийСчет.НомерСчета = ТекущийОбъект.НомерСчета;
				ТекстСообщенияОбОшибках.ДобавитьСтроку("Ошибка при заполнении реквзита ""Номер счета"" в справочние ""Банковские счета валютные"".");
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			Попытка
				Если СтароеАвтоНаименование = ОбъектВалютныйБанковскийСчет.Наименование Тогда
					ОбъектВалютныйБанковскийСчет.Наименование = РЭЙ_СлужебныйСервер.СформироватьНаименованиеВалютногоБанковскогоСчета(ОбъектВалютныйБанковскийСчет);
				КонецЕсли;
				ОбъектВалютныйБанковскийСчет.Записать();
			Исключение
				ВызватьИсключение ТекстСообщенияОбОшибках.ПолучитьТекст();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
