////////////////////////////////////////////////////////////////////////////////
// ПОДПИСКИ НА СОБЫТИЯ
//
////////////////////////////////////////////////////////////////////////////////

Процедура РЭЙ_СозданиеЗадачПриПроведенииДокументаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Имя = ВРег(СокрЛП(Источник.Метаданные().Имя));
	
	Если Имя = ВРег("ГТДИмпорт") 
		Или Имя = ВРег("ТаможеннаяДекларацияИмпорт")
		Тогда
		Если Источник.Дата < Источник.Организация.РЭЙ_ДатаНачалаИспользованияПодсистемыВЭД Тогда
			Возврат;
		КонецЕсли;
		ДобавитьЗадачуГТДИмпорт(Источник.Ссылка);
	ИначеЕсли Имя = ВРег("ПоступлениеТоваровУслуг")
		Или Имя = ВРег("ПриобретениеТоваровУслуг")
		Или Имя = ВРег("ПриобретениеУслугПрочихАктивов") 
		Тогда
		
		Если Источник.Дата < Источник.Организация.РЭЙ_ДатаНачалаИспользованияПодсистемыВЭД Тогда
			Возврат;
		КонецЕсли;
		Если Источник.Контрагент.РЭЙ_НеЯвляетсяРезидентом Тогда
			Если Не РЭЙ_СлужебныйСервер.ПроверкаРамочногоКонтракта(Источник.Ссылка) Тогда
				Возврат;
			КонецЕсли;
			ДобавитьЗадачуПоступлениеТоваровУслугОбъект(Источник.Ссылка);
		КонецЕсли;
		
	ИначеЕсли Имя = ВРег("ПоступлениеДопРасходов") Тогда
		Если Источник.Дата < Источник.Организация.РЭЙ_ДатаНачалаИспользованияПодсистемыВЭД Тогда
			Возврат;
		КонецЕсли;
		Если Источник.Контрагент.РЭЙ_НеЯвляетсяРезидентом Тогда
			Если Не РЭЙ_СлужебныйСервер.ПроверкаРамочногоКонтракта(Источник.Ссылка) Тогда
				Возврат;
			КонецЕсли;
			ДобавитьЗадачуПоступлениеДопРасходовОбъект(Источник.Ссылка);
		КонецЕсли;
	ИначеЕсли Имя = ВРег("АктВыполненныхРабот")
		Или Имя = ВРег("РеализацияТоваровУслуг")
		Или Имя = ВРег("РеализацияУслугПрочихАктивов") 
		Тогда
		
		Если Источник.Дата < Источник.Организация.РЭЙ_ДатаНачалаИспользованияПодсистемыВЭД Тогда
			Возврат;
		КонецЕсли;
		Если Источник.Контрагент.РЭЙ_НеЯвляетсяРезидентом Тогда
			Если Не РЭЙ_СлужебныйСервер.ПроверкаРамочногоКонтракта(Источник.Ссылка) Тогда
				Возврат;
			КонецЕсли;
			ДобавитьЗадачуРеализацияТоваровУслуг(Источник.Ссылка);
		КонецЕсли;  
	ИначеЕсли Имя = ВРег("СписаниеСРасчетногоСчета") 
		Или Имя = ВРег("ПлатежноеПоручениеИсходящее") 
		Или Имя = ВРег("ПлатежныйОрдерСписаниеДенежныхСредств") 
		Или Имя = ВРег("РЭЙ_ЗаявлениеНаПереводВалюты") 
		Или Имя = ВРег("ПлатежноеПоручение")  
		Или (Имя = ВРег("АккредитивПереданный") И Источник.Оплачено) 
		Или Имя = ВРег("СписаниеБезналичныхДенежныхСредств") 
		Тогда
		
		Если Имя = ВРег("СписаниеСРасчетногоСчета") Тогда
			Если ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
				ИмяДокументОснование = ВРег(СокрЛП(Источник.ДокументОснование.Метаданные().Имя));
				Если ИмяДокументОснование = ВРег("ПлатежноеПоручение") Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Контрагент) Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Источник.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Возврат;
		КонецЕсли;
		
		Если Источник.Дата < Источник.Организация.РЭЙ_ДатаНачалаИспользованияПодсистемыВЭД Тогда
			Возврат;
		КонецЕсли;
		
		Если Не РЭЙ_СлужебныйСервер.ПроверкаРамочногоКонтракта(Источник.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		
		БанкОрганизации = Источник.БанковскийСчет.Банк;
		Если БанкОрганизации.РЭЙ_НеЯвляетсяРезидентом Тогда
			ДобавитьЗадачуПоступлениеСписаниеДенежныхСредств(Источник.Ссылка, 
			Справочники.РЭЙ_ВидыЗадачПользователей.СписаниеДенежныхСредствЧерезСчетаЗаРубежом, 
			Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом);
		Иначе
			Если Источник.Контрагент.РЭЙ_НеЯвляетсяРезидентом Тогда
				ВалютаРегл 		= Константы.ВалютаРегламентированногоУчета.Получить();
				ВалютаДокумента = Источник.БанковскийСчет.ВалютаДенежныхСредств;
				Если ВалютаРегл = ВалютаДокумента Тогда
					
					ДобавитьЗадачуПоступлениеСписаниеДенежныхСредств(Источник.Ссылка, 
					Справочники.РЭЙ_ВидыЗадачПользователей.СписаниеДенежныхСредствСРублевыхСчетов, 
					Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОПоступленииВалютыРФ);
				Иначе		
					ДобавитьЗадачуПоступлениеСписаниеДенежныхСредств(Источник.Ссылка, 
					Справочники.РЭЙ_ВидыЗадачПользователей.СписаниеДенежныхСредствСВалютныхСчетов, 
					Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОВалютныхОперациях);
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Имя = ВРег("ПоступлениеНаРасчетныйСчет")
		Или Имя = ВРег("ПлатежноеПоручениеВходящее")
		Или Имя = ВРег("ПлатежныйОрдерПоступлениеДенежныхСредств")
		Или Имя = ВРег("ПоступлениеБезналичныхДенежныхСредств") 
		Тогда
		
		Если Источник.Дата < Источник.Организация.РЭЙ_ДатаНачалаИспользованияПодсистемыВЭД Тогда
			Возврат;
		КонецЕсли;
		
		Если Не РЭЙ_СлужебныйСервер.ПроверкаРамочногоКонтракта(Источник.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		
		БанкОрганизации = Источник.БанковскийСчет.Банк;
		Если БанкОрганизации.РЭЙ_НеЯвляетсяРезидентом Тогда
			ДобавитьЗадачуПоступлениеСписаниеДенежныхСредств(Источник.Ссылка, 
			Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеДенежныхСредствЧерезСчетаЗаРубежом, 
			Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом);
		Иначе
			Если Источник.Контрагент.РЭЙ_НеЯвляетсяРезидентом Тогда
				ВалютаРегл 		= Константы.ВалютаРегламентированногоУчета.Получить();
				ВалютаДокумента = Источник.БанковскийСчет.ВалютаДенежныхСредств;
				
				Если ВалютаРегл = ВалютаДокумента Тогда
					ДобавитьЗадачуПоступлениеСписаниеДенежныхСредств(Источник.Ссылка, 
					Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеДенежныхСредствНаРублевыеСчета, 
					Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОПоступленииВалютыРФ);
				Иначе		
					ДобавитьЗадачуПоступлениеСписаниеДенежныхСредств(Источник.Ссылка, 
					Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеДенежныхСредствВИностраннойВалюте, 
					Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОВалютныхОперациях);
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РЭЙ_УдалениеЗадачПриУдаленииПроведенияДокументаОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	Если Метаданные.Задачи.РЭЙ_ЗадачиВЭД.Реквизиты.ОбъектЗадачи.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		УдалитьЗадачу(Источник.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура ДействияПриНачалеРаботы() Экспорт
	Если Не Константы.РЭЙ_ИспользоватьРегламентныеЗаданияДляОбработкиЗадачВЭД.Получить() Тогда
		ОбработкаЗадачПоКонтролюОжидаемыхСроков();
		СозданиеЗадачНаПереоформлениеПаспортаСделкиПриПриближенииДатыОкончания();
		СозданиеЗадачНаПодтверждениеАвтопролонгацииКонтракта();
		КонтрольДатыИсполненияЗадачи();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОЗДАНИЯ ЗАДАЧ
//
////////////////////////////////////////////////////////////////////////////////

Процедура ДобавитьЗадачуПоступлениеСписаниеДенежныхСредств(ДокОсн, ВидЗадачи, ВидСправки)
	СсылкаНаЗадачу = ПоискЗадачи(ДокОсн);
	Если Не ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Если Не ВидЗадачи.Использование Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ИзмененыКлючевыеРеквизиты(СсылкаНаЗадачу) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(ДокОсн);
	Если НеСоздаватьЗадачиПоКонтракту(КонтрактВЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ТекДатаРасчетная = РасчетСрокаПредоставленияСВО(ДокОсн, ВидСправки);
	Если ТекДатаРасчетная = -999999 Тогда
		Возврат;
	КонецЕсли;
	
	ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД);
	Если Не ЗначениеЗаполнено(ПаспортСделки) Тогда
		Если РольДоступна("РЭЙ_ВалютныйКонтролер") Тогда
			Сообщить("Задача не создана, т.к. по контракт не поставлен на учет в банке УК!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Задача = СсылкаНаЗадачу.ПолучитьОбъект();
		Задача.Выполнена = Ложь;
	Иначе 
		Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
	КонецЕсли; 
	
	Задача.Дата			 = НачалоДня(ДокОсн.Дата);
	Задача.ВидЗадачи     = ВидЗадачи;
	Задача.ОбъектЗадачи	 = ДокОсн;
	Задача.КонтрактВЭД   = КонтрактВЭД;
	Задача.ПаспортСделки = ПаспортСделки;
	
	Задача.Наименование = "СКВО";
	Задача.СрокИсполнения = ТекДатаРасчетная;
	Задача.Сумма = ДокОсн.СуммаДокумента;
	Задача.Валюта = ДокОсн.Валюта;

	УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
	ЗаписатьАдресациюЗадачи(Задача, ДокОсн.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
	ЗаписатьКлючевыеРеквизиты(Задача);
	
	Задача.Записать();
КонецПроцедуры	

Процедура ДобавитьЗадачуГТДИмпорт(ДокОсн)
	СсылкаНаЗадачу = ПоискЗадачи(ДокОсн);
	Если Не ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Если Не Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеТоваровУслуг.Использование Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ИзмененыКлючевыеРеквизиты(СсылкаНаЗадачу) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекДатаРасчетная = РасчетСрокаПредоставленияСПД(ДокОсн, Перечисления.РЭЙ_ПроцедураДекларирования.ПодачаГТДДоВыпускаСТаможни);
	Если ТекДатаРасчетная = -999999 Тогда
		Возврат;
	КонецЕсли;
	
	//при проведении ГТД создаем задачу, которая не была создана при проведении поступления
	ЕстьТоварныйКонтракт = Ложь;
	ТекКонтракт = Справочники.РЭЙ_КонтрактыВЭД.ПустаяСсылка();
	МассивПоступлений = Новый Массив;
	ТаблицаДокументовПартий = ДокОсн.Товары.Выгрузить(, "ДокументПоступления");
	ТаблицаДокументовПартий.Свернуть("ДокументПоступления");
	Для Каждого СтрокаТЧ Из ТаблицаДокументовПартий Цикл
		Док = СтрокаТЧ.ДокументПоступления;
		
		КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(Док);
		
		Если НеСоздаватьЗадачиПоКонтракту(КонтрактВЭД) Тогда
			Возврат;
		КонецЕсли;
		
		Если КонтрактВЭД.КонтрактТоварный Тогда
			ЕстьТоварныйКонтракт = Истина;
			текКонтрактВЭД = КонтрактВЭД;
			
			СсылкаНаЗадачу = ПоискЗадачи(Док);
			Если СсылкаНаЗадачу.Пустая() ТОгда
				МассивПоступлений.Добавить(Док);
			Иначе
				Сообщить("Сумма по документу " + РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(Док) + " не включена в задачу по созданию СПД, т.к. по этому документу уже имеется задача от " + Формат(СсылкаНаЗадачу.СрокИсполнения, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		Иначе
			Сообщить("В данном документе 'ГТД по импорту' выбран нетоварный контракт ВЭД: " + КонтрактВЭД + "! Задачи созданы не будут!");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(текКонтрактВЭД);
	Если Не ЗначениеЗаполнено(ПаспортСделки) Тогда
//		Сообщить("По выбранному контракту ВЭД не создан паспорт сделки! Задачи созданы не будут!");
		Сообщить("Выбранный контракт ВЭД не поставлен на учет в банке УК! Задачи созданы не будут!");
		Возврат;
	КонецЕсли;
	
	Если МассивПоступлений.Количество() > 0 Тогда
		СсылкаНаЗадачу = ПоискЗадачи(ДокОсн);
		Если ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
			Задача = СсылкаНаЗадачу.ПолучитьОбъект();
			Задача.Выполнена = Ложь;
		Иначе 
			Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
		КонецЕсли; 
		
		Задача.ОбъектЗадачи = ДокОсн;
		Задача.Организация = ДокОсн.Организация;
		Задача.Дата = НачалоДня(ДокОсн.Дата);
		Задача.ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеТоваровУслуг;
		Задача.КонтрактВЭД = текКонтрактВЭД;
		Задача.ПаспортСделки = ПаспортСделки;
		
		Сумма = 0; Валюта = "";
		Для К = 0 По МассивПоступлений.Количество() - 1 Цикл
			Сумма = Сумма + МассивПоступлений[К].СуммаДокумента;
			Валюта = МассивПоступлений[К].Валюта;
		КонецЦикла;
		Задача.Наименование = "СПД";
		Задача.СрокИсполнения = ТекДатаРасчетная;
		Задача.Сумма = Сумма;
		Задача.Валюта = Валюта;
		
		УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
		ЗаписатьАдресациюЗадачи(Задача, ДокОсн.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
		ЗаписатьКлючевыеРеквизиты(Задача);
		
		Задача.Записать();
	Иначе
		Сообщить("По всем документам ПТУ из данного документа 'ГТД по импорту' уже созданы задачи ВЭД! Задачи созданы не будут!");
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЗадачуПоступлениеТоваровУслугОбъект(ДокОсн)
	СсылкаНаЗадачу = ПоискЗадачи(ДокОсн);
	Если Не ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Если Не Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеТоваровУслуг.Использование Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ИзмененыКлючевыеРеквизиты(СсылкаНаЗадачу) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(ДокОсн);
	Если НеСоздаватьЗадачиПоКонтракту(КонтрактВЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтрактВЭД.ПериодическиеФиксированныеПлатежи Тогда
		Если РольДоступна("РЭЙ_ВалютныйКонтролер") Тогда
			Сообщить("Задача не создана, т.к. по контракту ВЭД предусмотрены периодические фиксированные платежи!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если КонтрактВЭД.КонтрактТоварный И Не КонтрактВЭД.Контрагент.РЭЙ_Страна.РЭЙ_УчастникТаможенногоСоюза Тогда
		ТекДатаРасчетная = РасчетСрокаПредоставленияСПД(ДокОсн, Перечисления.РЭЙ_ПроцедураДекларирования.ПодачаГТДДоВыпускаСТаможни);
		Если ТекДатаРасчетная <> -999999 Тогда
			Сообщить("В документе " + РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(ДокОсн) + ", контрагент: " + СокрЛП(ДокОсн.Контрагент) + ", указан товарный контракт ВЭД " + СокрЛП(КонтрактВЭД) + ". Задачи будут созданы документом 'ГТД по импорту'!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПроцедураДекларирования = Перечисления.РЭЙ_ПроцедураДекларирования.БезПодачиГТД;
	ТекДатаРасчетная = РасчетСрокаПредоставленияСПД(ДокОсн, ПроцедураДекларирования);
	Если ТекДатаРасчетная = -999999 Тогда
		Возврат;
	КонецЕсли;
	
	ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД);
	Если Не ЗначениеЗаполнено(ПаспортСделки) Тогда
		Сообщить("Выбранный контракт ВЭД не поставлен на учет в банке УК! Задачи созданы не будут!");
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Задача = СсылкаНаЗадачу.ПолучитьОбъект();
		Задача.Выполнена = Ложь;
	Иначе 
		Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
	КонецЕсли; 
	
	//алгоритм
	Задача.Дата			 = НачалоДня(ДокОсн.Дата);
	Задача.ВидЗадачи	 = Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеТоваровУслуг;
	Задача.ОбъектЗадачи	 = ДокОсн;
	Задача.КонтрактВЭД   = КонтрактВЭД;
	Задача.ПаспортСделки = ПаспортСделки;
	
	Задача.Наименование					= "СПД";
	Задача.СрокИсполнения				= ТекДатаРасчетная;
	Задача.Сумма = ДокОсн.СуммаДокумента;
	Задача.Валюта = ДокОсн.Валюта;

	УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
	ЗаписатьАдресациюЗадачи(Задача, ДокОсн.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
	ЗаписатьКлючевыеРеквизиты(Задача);
	
	Задача.Записать();
КонецПроцедуры	

Процедура ДобавитьЗадачуПоступлениеДопРасходовОбъект(ДокОсн)
	СсылкаНаЗадачу = ПоискЗадачи(ДокОсн);
	Если Не ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Если Не Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеТоваровУслуг.Использование Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ИзмененыКлючевыеРеквизиты(СсылкаНаЗадачу) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(ДокОсн);
	Если НеСоздаватьЗадачиПоКонтракту(КонтрактВЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтрактВЭД.ПериодическиеФиксированныеПлатежи Тогда
		Если РольДоступна("РЭЙ_ВалютныйКонтролер") Тогда
			Сообщить("Задача не создана, т.к. по контракту ВЭД предусмотрены периодические фиксированные платежи!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если КонтрактВЭД.КонтрактТоварный И Не КонтрактВЭД.Контрагент.РЭЙ_Страна.РЭЙ_УчастникТаможенногоСоюза Тогда
		ПроцедураДекларирования = Перечисления.РЭЙ_ПроцедураДекларирования.ПодачаГТДДоВыпускаСТаможни;
	Иначе
		ПроцедураДекларирования = Перечисления.РЭЙ_ПроцедураДекларирования.БезПодачиГТД;
	КонецЕсли;
	
	ТекДатаРасчетная = РасчетСрокаПредоставленияСПД(ДокОсн, ПроцедураДекларирования);
	Если ТекДатаРасчетная = -999999 Тогда
		Возврат;
	КонецЕсли;
	
	ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД);
	Если Не ЗначениеЗаполнено(ПаспортСделки) Тогда
//		Сообщить("По выбранному контракту ВЭД не создан паспорт сделки! Задачи созданы не будут!");
		Сообщить("Выбранный контракт ВЭД не поставлен на учет в банке УК! Задачи созданы не будут!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Задача = СсылкаНаЗадачу.ПолучитьОбъект();
		Задача.Выполнена = Ложь;
	Иначе 
		Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
	КонецЕсли; 
	
	//алгоритм
	Задача.Дата			= НачалоДня(ДокОсн.Дата);
	Задача.ВидЗадачи	= Справочники.РЭЙ_ВидыЗадачПользователей.ПоступлениеДопРасходов;
	Задача.ОбъектЗадачи	= ДокОсн;
	Задача.ПаспортСделки = ПаспортСделки;
	
	Задача.Наименование					= "СПД";
	Задача.СрокИсполнения				= ТекДатаРасчетная;
	Задача.Сумма = ДокОсн.СуммаДокумента;
	Задача.Валюта = ДокОсн.Валюта;

	УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
	ЗаписатьАдресациюЗадачи(Задача, ДокОсн.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
	ЗаписатьКлючевыеРеквизиты(Задача);
	
	Задача.Записать();
КонецПроцедуры	

Процедура ДобавитьЗадачуРеализацияТоваровУслуг(ДокОсн)
	СсылкаНаЗадачу = ПоискЗадачи(ДокОсн);
	Если Не ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Если Не Справочники.РЭЙ_ВидыЗадачПользователей.РеализацияТоваровУслуг.Использование Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ИзмененыКлючевыеРеквизиты(СсылкаНаЗадачу) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(ДокОсн);
	Если НеСоздаватьЗадачиПоКонтракту(КонтрактВЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтрактВЭД.ПериодическиеФиксированныеПлатежи Тогда
		Если РольДоступна("РЭЙ_ВалютныйКонтролер") Тогда
			Сообщить("Задача не создана, т.к. по контракту ВЭД предусмотрены периодические фиксированные платежи!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если КонтрактВЭД.КонтрактТоварный И Не КонтрактВЭД.Контрагент.РЭЙ_Страна.РЭЙ_УчастникТаможенногоСоюза Тогда
		ПроцедураДекларирования = Перечисления.РЭЙ_ПроцедураДекларирования.ПодачаГТДДоВыпускаСТаможни;
	Иначе
		ПроцедураДекларирования = Перечисления.РЭЙ_ПроцедураДекларирования.БезПодачиГТД;
	КонецЕсли;
	
	ТекДатаРасчетная = РасчетСрокаПредоставленияСПД(ДокОсн, ПроцедураДекларирования);
	Если ТекДатаРасчетная = -999999 Тогда
		Возврат;
	КонецЕсли;
	
	ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД);
	Если Не ЗначениеЗаполнено(ПаспортСделки) Тогда
		Сообщить("Выбранный контракт ВЭД не поставлен на учет в банке УК! Задачи созданы не будут!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Задача = СсылкаНаЗадачу.ПолучитьОбъект();
		Задача.Выполнена = Ложь;
	Иначе 
		Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
	КонецЕсли; 
	
	Задача.Дата = НачалоДня(ДокОсн.Дата);
	Задача.ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.РеализацияТоваровУслуг;
	Задача.ОбъектЗадачи	= ДокОсн;
	Задача.ПаспортСделки = ПаспортСделки;
	
	Задача.Наименование = "СПД";
	Задача.СрокИсполнения = ТекДатаРасчетная;
	Задача.Сумма = ДокОсн.СуммаДокумента;
	Задача.Валюта = ДокОсн.Валюта;

	УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
	ЗаписатьАдресациюЗадачи(Задача, ДокОсн.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
	ЗаписатьКлючевыеРеквизиты(Задача);
	
	Задача.Записать();
КонецПроцедуры	

Процедура ДобавитьЗадачуКонтрактВЭД(КонтрактВЭД) Экспорт
	СсылкаНаЗадачу = ПоискЗадачи(КонтрактВЭД);
	Если Не ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Если Не Справочники.РЭЙ_ВидыЗадачПользователей.КонтрактВЭД.Использование Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	текДатаОтсчета = Макс(КонтрактВЭД.КонтрактДатаПодписания, КонтрактВЭД.КонтрактДатаСоставления, КонтрактВЭД.КонтрактДатаНачала);
	ТекДатаРасчетная = РасчетСрокаПредоставленияПаспортаСделки(текДатаОтсчета, "Создание");
	Если ТекДатаРасчетная = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтрактВЭД.НеЯвляетсяОбъектомВалютногоКонтроля Тогда
		Если РольДоступна("РЭЙ_ВалютныйКонтролер") Тогда
			Сообщить("Задача на формирование документа 'Заявление о постановке на учет контракта' не создана, т.к. контракт ВЭД не подлежит постановке на учет в банке УК.");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Если СсылкаНаЗадачу.Выполнена Тогда
			Возврат;
		КонецЕсли;
		
		Задача = СсылкаНаЗадачу.ПолучитьОбъект();
	Иначе 
		//Если по контракту ВЭД уже есть паспорт сделки, то не нужно создавать задачу
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РЭЙ_ПаспортСделки.Ссылка
		|ИЗ
		|	Документ.РЭЙ_ПаспортСделки КАК РЭЙ_ПаспортСделки
		|ГДЕ
		|	РЭЙ_ПаспортСделки.Проведен
		|	И РЭЙ_ПаспортСделки.КонтрактВЭД = &КонтрактВЭД";
		Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
	КонецЕсли; 
	
	Задача.Дата = Макс(КонтрактВЭД.КонтрактДатаПодписания, КонтрактВЭД.КонтрактДатаСоставления, КонтрактВЭД.КонтрактДатаНачала);
	Задача.ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.КонтрактВЭД;
	Задача.ОбъектЗадачи = КонтрактВЭД;
	Задача.Наименование = "ЗПУК";
	
	Задача.СрокИсполнения = ТекДатаРасчетная;
	Задача.Сумма = ?(КонтрактВЭД.КонтрактБезСуммы, "Без суммы", КонтрактВЭД.КонтрактСумма);
	Задача.Валюта = КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
	ЗаписатьАдресациюЗадачи(Задача, КонтрактВЭД.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
	
	Задача.Записать();
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАДАЧ ПО КОНТРОЛЮ ОЖИДАЕМЫХ СРОКОВ

Процедура ОбработкаЗадачПоКонтролюОжидаемыхСроков(ДокументИсключения = Неопределено) Экспорт
	ОбработкаЗадачПоКонтролюОжидаемыхСроковСВО(ДокументИсключения);
	ОбработкаЗадачПоКонтролюОжидаемыхСроковСПД(ДокументИсключения);
КонецПроцедуры

Процедура ОбработкаЗадачПоКонтролюОжидаемыхСроковСВО(ДокументИсключения = Неопределено)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "Задача.РЭЙ_ЗадачиВЭД";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ДатаФормирования = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", ДатаФормирования);	
	Запрос.УстановитьПараметр("СсылкиСВО", РЭЙ_СлужебныйСервер.ПолучитьСсылкиНаАктуальныеСВО(, ДатаФормирования, ДокументИсключения));
	Запрос.УстановитьПараметр("СсылкиСПД", РЭЙ_СлужебныйСервер.ПолучитьСсылкиНаАктуальныеСПД(, ДатаФормирования, ДокументИсключения));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СВО.Ссылка КАК Справка,
	|	ВЫБОР
	|		КОГДА СВО.ВалютаДокумента = СВО.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА СВО.СуммаВВалютеДокумента
	|		ИНАЧЕ СВО.СуммаВВалютеКонтракта
	|	КОНЕЦ КАК Сумма,
	|	СВО.РасчетныйДокумент,
	|	СВО.НомерСтроки,
	|	СВО.КонтрактВЭД,
	|	СВО.ПаспортСделки,
	|	СВО.ОжидаемыйСрок
	|ПОМЕСТИТЬ АвансовыеСВО
	|ИЗ
	|	Документ.РЭЙ_СправкаОВалютныхОперациях.ВалютныеОперации КАК СВО
	|ГДЕ
	|	СВО.Ссылка.Проведен
	|	И СВО.ВидВалютнойОперации.ОжидаемыйСрок
	|	И СВО.Ссылка В(&СсылкиСВО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СПД.АвансоваяСправка,
	|	СПД.АвансовыйРасчетныйДокумент,
	|	СУММА(СПД.СуммаАвансаВВалютеКонтракта) КАК Сумма
	|ПОМЕСТИТЬ ЗакрытыеСВО
	|ИЗ
	|	Документ.РЭЙ_СправкаОПодтверждающихДокументах.Авансы КАК СПД
	|ГДЕ
	|	СПД.Ссылка.Проведен
	|	И СПД.Ссылка В(&СсылкиСПД)
	|
	|СГРУППИРОВАТЬ ПО
	|	СПД.АвансоваяСправка,
	|	СПД.АвансовыйРасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыеСВО.Справка КАК Справка,
	|	АвансовыеСВО.НомерСтроки,
	|	АвансовыеСВО.Сумма - ЕСТЬNULL(ЗакрытыеСВО.Сумма, 0) КАК Сумма,
	|	АвансовыеСВО.РасчетныйДокумент,
	|	АвансовыеСВО.КонтрактВЭД,
	|	АвансовыеСВО.ПаспортСделки,
	|	АвансовыеСВО.ОжидаемыйСрок
	|ПОМЕСТИТЬ СуществующиеАвансы
	|ИЗ
	|	АвансовыеСВО КАК АвансовыеСВО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗакрытыеСВО КАК ЗакрытыеСВО
	|		ПО АвансовыеСВО.Справка = ЗакрытыеСВО.АвансоваяСправка
	|			И АвансовыеСВО.РасчетныйДокумент = ЗакрытыеСВО.АвансовыйРасчетныйДокумент";
	
	Запрос.Выполнить();
	
	//Удаление отмененных задач
	текОжидаемыйСрок = РасчетДатыНачалаКонтроляОжидаемогоСрока(ДатаФормирования, "СВО");
	Если текОжидаемыйСрок = -999999 Тогда
		Запрос.УстановитьПараметр("ОжидаемыйСрок", Дата("00010101"));
	Иначе
		Запрос.УстановитьПараметр("ОжидаемыйСрок", текОжидаемыйСрок);
	КонецЕсли;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СуществующиеАвансы.Справка КАК Документ.РЭЙ_СправкаОВалютныхОперациях) КАК Справка,
	|	СуществующиеАвансы.НомерСтроки,
	|	СуществующиеАвансы.Сумма,
	|	СуществующиеАвансы.РасчетныйДокумент,
	|	СуществующиеАвансы.КонтрактВЭД,
	|	СуществующиеАвансы.ПаспортСделки,
	|	СуществующиеАвансы.ОжидаемыйСрок
	|ПОМЕСТИТЬ ДоступныеАвансы
	|ИЗ
	|	СуществующиеАвансы КАК СуществующиеАвансы
	|ГДЕ
	|	СуществующиеАвансы.Сумма > 0
	|	И СуществующиеАвансы.ОжидаемыйСрок <= &ОжидаемыйСрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РЭЙ_ЗадачиВЭД.Ссылка КАК Задача
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК РЭЙ_ЗадачиВЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеАвансы КАК ДоступныеАвансы
	|		ПО (ДоступныеАвансы.Справка = РЭЙ_ЗадачиВЭД.ОбъектЗадачи)
	|			И (ДоступныеАвансы.РасчетныйДокумент = РЭЙ_ЗадачиВЭД.РасчетныйДокумент)
	|ГДЕ
	|	РЭЙ_ЗадачиВЭД.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.РЭЙ_ВидыЗадачПользователей.ОжидаемыйСрокСВО)
	|	И РЭЙ_ЗадачиВЭД.Выполнена = ЛОЖЬ
	|	И ДоступныеАвансы.Справка ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
		ЗадачаОбъект.Удалить();
	КонецЦикла;
	Запрос.Текст = "УНИЧТОЖИТЬ ДоступныеАвансы";
	Запрос.Выполнить();
	
	//Создание новых задач
	Если текОжидаемыйСрок <> -999999 Тогда
		Запрос.УстановитьПараметр("ОжидаемыйСрок", текОжидаемыйСрок);
		Запрос.УстановитьПараметр("ДатаНачалаИспользованияАвансовВСправкахВК", Константы.РЭЙ_ДатаНачалаИспользованияАвансовВСправкахВК.Получить());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СуществующиеАвансы.Справка КАК Документ.РЭЙ_СправкаОВалютныхОперациях) КАК Справка,
		|	СуществующиеАвансы.НомерСтроки,
		|	СуществующиеАвансы.Сумма,
		|	СуществующиеАвансы.РасчетныйДокумент,
		|	СуществующиеАвансы.КонтрактВЭД,
		|	СуществующиеАвансы.ПаспортСделки,
		|	СуществующиеАвансы.ОжидаемыйСрок
		|ПОМЕСТИТЬ ДоступныеАвансы
		|ИЗ
		|	СуществующиеАвансы КАК СуществующиеАвансы
		|ГДЕ
		|	СуществующиеАвансы.Сумма > 0
		|	И СуществующиеАвансы.ОжидаемыйСрок <= &ОжидаемыйСрок
		|	И СуществующиеАвансы.ОжидаемыйСрок >= &ДатаНачалаИспользованияАвансовВСправкахВК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеАвансы.Справка КАК Справка,
		|	ДоступныеАвансы.НомерСтроки КАК НомерСтроки,
		|	ДоступныеАвансы.Сумма,
		|	ДоступныеАвансы.РасчетныйДокумент,
		|	ДоступныеАвансы.Справка.Дата КАК Дата,
		|	РЭЙ_ЗадачиВЭД.Ссылка КАК Задача,
		|	ДоступныеАвансы.Справка.Организация КАК Организация,
		|	ДоступныеАвансы.КонтрактВЭД,
		|	ДоступныеАвансы.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаКонтракта,
		|	ДоступныеАвансы.ПаспортСделки,
		|	ДоступныеАвансы.ОжидаемыйСрок
		|ИЗ
		|	ДоступныеАвансы КАК ДоступныеАвансы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.РЭЙ_ЗадачиВЭД КАК РЭЙ_ЗадачиВЭД
		|		ПО ДоступныеАвансы.Справка = РЭЙ_ЗадачиВЭД.ОбъектЗадачи
		|			И ДоступныеАвансы.РасчетныйДокумент = РЭЙ_ЗадачиВЭД.РасчетныйДокумент
		|ГДЕ
		|	(РЭЙ_ЗадачиВЭД.Ссылка ЕСТЬ NULL 
		|			ИЛИ РЭЙ_ЗадачиВЭД.Выполнена = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Справка,
		|	НомерСтроки";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.РасчетныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураЗадачи = Новый Структура("Дата, Наименование, Организация, Роль, ВидЗадачи, КонтрактВЭД, ОбъектЗадачи, РасчетныйДокумент, ПаспортСделки, СрокИсполнения, Сумма, Валюта, Выполнена, СтатусСправкиОВалютномКонтроле");
			
			СтруктураЗадачи.Дата = Выборка.Дата;
			СтруктураЗадачи.Наименование = "Корр. СКВО";
			СтруктураЗадачи.Организация = Выборка.Организация;
			СтруктураЗадачи.Роль = Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер;
			СтруктураЗадачи.ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.ОжидаемыйСрокСВО;
			СтруктураЗадачи.КонтрактВЭД = Выборка.КонтрактВЭД;
			СтруктураЗадачи.ОбъектЗадачи = Выборка.Справка;
			СтруктураЗадачи.РасчетныйДокумент = Выборка.РасчетныйДокумент;
			СтруктураЗадачи.ПаспортСделки = Выборка.ПаспортСделки;
			СтруктураЗадачи.СрокИсполнения = Выборка.ОжидаемыйСрок;
			СтруктураЗадачи.Сумма = Выборка.Сумма;
			СтруктураЗадачи.Валюта = Выборка.ВалютаКонтракта;
			СтруктураЗадачи.Выполнена = Ложь;
			СтруктураЗадачи.СтатусСправкиОВалютномКонтроле = ОпределитьСтатусСправки(СтруктураЗадачи.СрокИсполнения);
			
			Если Выборка.Задача = Null Тогда
				ЗадачаОбъект = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
				ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтруктураЗадачи);
				ЗадачаОбъект.Записать();
			Иначе
				ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
				Для Каждого ЭлементСтруктуры из СтруктураЗадачи Цикл 
					Если ЭлементСтруктуры.Значение <> ЗадачаОбъект[ЭлементСтруктуры.Ключ] Тогда
						ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтруктураЗадачи);
						ЗадачаОбъект.Записать();
						Прервать;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "УНИЧТОЖИТЬ ДоступныеАвансы";
		Запрос.Выполнить();
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ОбработкаЗадачПоКонтролюОжидаемыхСроковСПД(ДокументИсключения = Неопределено)
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "Задача.РЭЙ_ЗадачиВЭД";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ДатаФормирования = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", ДатаФормирования);	
	Запрос.УстановитьПараметр("СсылкиСВО", РЭЙ_СлужебныйСервер.ПолучитьСсылкиНаАктуальныеСВО(, ДатаФормирования, ДокументИсключения));
	Запрос.УстановитьПараметр("СсылкиСПД", РЭЙ_СлужебныйСервер.ПолучитьСсылкиНаАктуальныеСПД(, ДатаФормирования, ДокументИсключения));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СПД.Ссылка КАК Справка,
	|	ВЫБОР
	|		КОГДА СПД.ВалютаДокумента = СПД.Ссылка.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА СПД.СуммаВВалютеДокумента
	|		ИНАЧЕ СПД.СуммаВВалютеКонтракта
	|	КОНЕЦ КАК Сумма,
	|	СПД.Документ КАК РасчетныйДокумент,
	|	СПД.Ссылка.КонтрактВЭД,
	|	СПД.Ссылка.ПаспортСделки,
	|	СПД.ОжидаемыйСрок,
	|	СПД.НомерСтроки
	|ПОМЕСТИТЬ АвансовыеСПД
	|ИЗ
	|	Документ.РЭЙ_СправкаОПодтверждающихДокументах.ПодтверждающиеДокументы КАК СПД
	|ГДЕ
	|	СПД.Ссылка.Проведен
	|	И СПД.Ссылка В(&СсылкиСПД)
	|	И СПД.ПризнакПоставки = ЗНАЧЕНИЕ(Перечисление.РЭЙ_ПризнакиПоставки.ПредоставлениеРезидентомОтсрочкиОплатыНерезиденту)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СВО.АвансоваяСправка,
	|	СВО.АвансовыйРасчетныйДокумент,
	|	СУММА(ВЫБОР
	|			КОГДА СВО.ВалютаДокумента = СВО.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|				ТОГДА СВО.СуммаВВалютеДокумента
	|			ИНАЧЕ СВО.СуммаВВалютеКонтракта
	|		КОНЕЦ) КАК Сумма
	|ПОМЕСТИТЬ ЗакрытыеСПД
	|ИЗ
	|	Документ.РЭЙ_СправкаОВалютныхОперациях.ВалютныеОперации КАК СВО
	|ГДЕ
	|	СВО.Ссылка.Проведен
	|	И СВО.Ссылка В(&СсылкиСВО)
	|	И СВО.АвансоваяСправка <> ЗНАЧЕНИЕ(Документ.РЭЙ_СправкаОПодтверждающихДокументах.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СВО.АвансоваяСправка,
	|	СВО.АвансовыйРасчетныйДокумент,
	|	СВО.ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыеСПД.Справка КАК Справка,
	|	АвансовыеСПД.Сумма - ЕСТЬNULL(ЗакрытыеСПД.Сумма, 0) КАК Сумма,
	|	АвансовыеСПД.РасчетныйДокумент,
	|	АвансовыеСПД.КонтрактВЭД,
	|	АвансовыеСПД.ПаспортСделки,
	|	АвансовыеСПД.ОжидаемыйСрок,
	|	АвансовыеСПД.НомерСтроки
	|ПОМЕСТИТЬ СуществующиеАвансы
	|ИЗ
	|	АвансовыеСПД КАК АвансовыеСПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗакрытыеСПД КАК ЗакрытыеСПД
	|		ПО АвансовыеСПД.Справка = ЗакрытыеСПД.АвансоваяСправка
	|			И АвансовыеСПД.РасчетныйДокумент = ЗакрытыеСПД.АвансовыйРасчетныйДокумент";
	
	Запрос.Выполнить();
		
	
	//Удаление отмененных задач
	текОжидаемыйСрок = РасчетДатыНачалаКонтроляОжидаемогоСрока(ДатаФормирования, "СПД");
	Если текОжидаемыйСрок = -999999 Тогда
		Запрос.УстановитьПараметр("ОжидаемыйСрок", Дата("00010101"));
	Иначе
		Запрос.УстановитьПараметр("ОжидаемыйСрок", текОжидаемыйСрок);
	КонецЕсли;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СуществующиеАвансы.Справка КАК Документ.РЭЙ_СправкаОПодтверждающихДокументах) КАК Справка,
	|	СуществующиеАвансы.НомерСтроки,
	|	СуществующиеАвансы.Сумма,
	|	СуществующиеАвансы.РасчетныйДокумент,
	|	СуществующиеАвансы.КонтрактВЭД,
	|	СуществующиеАвансы.ПаспортСделки,
	|	СуществующиеАвансы.ОжидаемыйСрок
	|ПОМЕСТИТЬ ДоступныеАвансы
	|ИЗ
	|	СуществующиеАвансы КАК СуществующиеАвансы
	|ГДЕ
	|	СуществующиеАвансы.Сумма > 0
	|	И СуществующиеАвансы.ОжидаемыйСрок <= &ОжидаемыйСрок 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РЭЙ_ЗадачиВЭД.Ссылка КАК Задача
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК РЭЙ_ЗадачиВЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеАвансы КАК ДоступныеАвансы
	|		ПО (ДоступныеАвансы.Справка = РЭЙ_ЗадачиВЭД.ОбъектЗадачи)
	|			И (ДоступныеАвансы.РасчетныйДокумент = РЭЙ_ЗадачиВЭД.РасчетныйДокумент)
	|ГДЕ
	|	РЭЙ_ЗадачиВЭД.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.РЭЙ_ВидыЗадачПользователей.ОжидаемыйСрокСПД)
	|	И РЭЙ_ЗадачиВЭД.Выполнена = ЛОЖЬ
	|	И ДоступныеАвансы.Справка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
		ЗадачаОбъект.Удалить();
	КонецЦикла;
	Запрос.Текст = "УНИЧТОЖИТЬ ДоступныеАвансы";
	Запрос.Выполнить();
	
	//Создание новых задач
	Если текОжидаемыйСрок <> -999999 Тогда
		Запрос.УстановитьПараметр("ОжидаемыйСрок", текОжидаемыйСрок);
		Запрос.УстановитьПараметр("ДатаНачалаИспользованияАвансовВСправкахВК", Константы.РЭЙ_ДатаНачалаИспользованияАвансовВСправкахВК.Получить());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СуществующиеАвансы.Справка КАК Документ.РЭЙ_СправкаОПодтверждающихДокументах) КАК Справка,
		|	СуществующиеАвансы.НомерСтроки,
		|	СуществующиеАвансы.Сумма,
		|	СуществующиеАвансы.РасчетныйДокумент,
		|	СуществующиеАвансы.КонтрактВЭД,
		|	СуществующиеАвансы.ПаспортСделки,
		|	СуществующиеАвансы.ОжидаемыйСрок
		|ПОМЕСТИТЬ ДоступныеАвансы
		|ИЗ
		|	СуществующиеАвансы КАК СуществующиеАвансы
		|ГДЕ
		|	СуществующиеАвансы.Сумма > 0
		|	И СуществующиеАвансы.ОжидаемыйСрок <= &ОжидаемыйСрок
		|	И СуществующиеАвансы.ОжидаемыйСрок >= &ДатаНачалаИспользованияАвансовВСправкахВК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеАвансы.Справка КАК Справка,
		|	ДоступныеАвансы.НомерСтроки КАК НомерСтроки,
		|	ДоступныеАвансы.Сумма,
		|	ДоступныеАвансы.РасчетныйДокумент,
		|	ДоступныеАвансы.Справка.Дата КАК Дата,
		|	РЭЙ_ЗадачиВЭД.Ссылка КАК Задача,
		|	ДоступныеАвансы.Справка.Организация КАК Организация,
		|	ДоступныеАвансы.КонтрактВЭД,
		|	ДоступныеАвансы.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаКонтракта,
		|	ДоступныеАвансы.ПаспортСделки,
		|	ДоступныеАвансы.ОжидаемыйСрок
		|ИЗ
		|	ДоступныеАвансы КАК ДоступныеАвансы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.РЭЙ_ЗадачиВЭД КАК РЭЙ_ЗадачиВЭД
		|		ПО ДоступныеАвансы.Справка = РЭЙ_ЗадачиВЭД.ОбъектЗадачи
		|			И ДоступныеАвансы.РасчетныйДокумент = РЭЙ_ЗадачиВЭД.РасчетныйДокумент
		|ГДЕ
		|	(РЭЙ_ЗадачиВЭД.Ссылка ЕСТЬ NULL 
		|			ИЛИ РЭЙ_ЗадачиВЭД.Выполнена = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Справка,
		|	НомерСтроки";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.РасчетныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураЗадачи = Новый Структура("Дата, Наименование, Организация, Роль, ВидЗадачи, КонтрактВЭД, ОбъектЗадачи, РасчетныйДокумент, ПаспортСделки, СрокИсполнения, Сумма, Валюта, Выполнена, СтатусСправкиОВалютномКонтроле");
			
			СтруктураЗадачи.Дата = Выборка.Дата;
			СтруктураЗадачи.Наименование = "Корр. СПД";;
			СтруктураЗадачи.Организация = Выборка.Организация;
			СтруктураЗадачи.Роль = Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер;
			СтруктураЗадачи.ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.ОжидаемыйСрокСПД;
			СтруктураЗадачи.КонтрактВЭД = Выборка.КонтрактВЭД;
			СтруктураЗадачи.ОбъектЗадачи = Выборка.Справка;
			СтруктураЗадачи.РасчетныйДокумент = Выборка.РасчетныйДокумент;
			СтруктураЗадачи.ПаспортСделки = Выборка.ПаспортСделки;
			СтруктураЗадачи.СрокИсполнения = Выборка.ОжидаемыйСрок;
			СтруктураЗадачи.Сумма = Выборка.Сумма;
			СтруктураЗадачи.Валюта = Выборка.ВалютаКонтракта;
			СтруктураЗадачи.Выполнена = Ложь;
			СтруктураЗадачи.СтатусСправкиОВалютномКонтроле = ОпределитьСтатусСправки(СтруктураЗадачи.СрокИсполнения);
			
			Если Выборка.Задача = Null Тогда
				ЗадачаОбъект = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
				ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтруктураЗадачи);
				ЗадачаОбъект.Записать();
			Иначе
				ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
				Для Каждого ЭлементСтруктуры из СтруктураЗадачи Цикл 
					Если ЭлементСтруктуры.Значение <> ЗадачаОбъект[ЭлементСтруктуры.Ключ] Тогда
						ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтруктураЗадачи);
						ЗадачаОбъект.Записать();
						Прервать;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "УНИЧТОЖИТЬ ДоступныеАвансы";
		Запрос.Выполнить();
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция РасчетДатыНачалаКонтроляОжидаемогоСрока(ДатаОтсчета, ВидСправки)
	Перем Результат;
		
	Запрос = Новый Запрос;	
	
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаОтсчета);
	Запрос.УстановитьПараметр("ВидСправки", ВидСправки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.Период КАК Дата,
	|	Регистр.ВидСправки КАК ВидСправки,
	|	Регистр.Дни КАК Дни,
	|	Регистр.ДатаСтартаТаймера КАК ДатаСтартаТаймера,
	|	Регистр.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.РЭЙ_СрокиКонтроляПриближенияОжидаемыхСроков.СрезПоследних(&ДатаПолучения, ВидСправки = &ВидСправки) КАК Регистр";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДатаСтартаТаймера = 8 Тогда
		ИначеЕсли Выборка.ДатаСтартаТаймера = 6 Тогда
			Возврат -999999;
		Иначе
			Возврат -999999;
		КонецЕсли; 
		
		//Сообщить(Выборка.КоличествоДней)
		Если Выборка.Дни = 1  Тогда
			//"Календарные дни"
			Если Выборка.КоличествоДней = 0 Тогда
				Результат = ДатаОтсчета;
			Иначе
				Результат = ДобавитьКалендарныеДни(ДатаОтсчета, Выборка.КоличествоДней - 1);	
			КонецЕсли;	
		ИначеЕсли Выборка.Дни = 2 Тогда
			//"Рабочие дни"
			Если Выборка.КоличествоДней = 0 Тогда
				Результат = ДатаОтсчета;
			Иначе
				Результат = ДобавитьРабочиеДни(ДатаОтсчета, Выборка.КоличествоДней);	
			КонецЕсли; 
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАДАЧ ПО СОЗДАНИЮ ПАСПОРТА СДЕЛКИ ПРИ ПРЕВЫШЕНИИ ЛИМИТА

Процедура СозданиеЗадачПриПревышенииСуммы(КонтрактВЭД) Экспорт
	Если КонтрактВЭД.НеЯвляетсяОбъектомВалютногоКонтроля Тогда
		СозданиеЗадачНаСозданиеПаспортаСделкиПриПревышенииСуммы(КонтрактВЭД);
	Иначе
		Если Не КонтрактВЭД.КонтрактБезСуммы Тогда
			СозданиеЗадачНаПереоформлениеПаспортаСделкиПриПревышенииСуммы(КонтрактВЭД);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СозданиеЗадачНаСозданиеПаспортаСделкиПриПревышенииСуммы(КонтрактВЭД)
	Лимит = РегистрыСведений.РЭЙ_НастройкиПараметровВалютногоКонтроля.ПолучитьЛимитПоКонтракту(КонтрактВЭД, ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_ПлатежиПоКонтрактамВЭД.КонтрактВЭД,
	|	СУММА(РЭЙ_ПлатежиПоКонтрактамВЭД.СуммаВРубляхРФ) КАК СуммаВРубляхРФ
	|ИЗ
	|	РегистрСведений.РЭЙ_ПлатежиПоКонтрактамВЭД КАК РЭЙ_ПлатежиПоКонтрактамВЭД
	|ГДЕ
	|	РЭЙ_ПлатежиПоКонтрактамВЭД.КонтрактВЭД = &КонтрактВЭД
	|
	|СГРУППИРОВАТЬ ПО
	|	РЭЙ_ПлатежиПоКонтрактамВЭД.КонтрактВЭД
	|
	|ИМЕЮЩИЕ
	|	СУММА(РЭЙ_ПлатежиПоКонтрактамВЭД.СуммаВРубляхРФ) > &ЛимитСуммы";
	
	Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
	Запрос.УстановитьПараметр("ЛимитСуммы", Лимит.Сумма);
	
	ЕстьПревышение = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьПревышение = Истина;
	КонецЕсли;
	
	Если Не ЕстьПревышение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РЭЙ_ПоставкиПоКонтрактамВЭД.КонтрактВЭД,
		|	СУММА(РЭЙ_ПоставкиПоКонтрактамВЭД.СуммаВРубляхРФ) КАК СуммаВРубляхРФ
		|ИЗ
		|	РегистрСведений.РЭЙ_ПоставкиПоКонтрактамВЭД КАК РЭЙ_ПоставкиПоКонтрактамВЭД
		|ГДЕ
		|	РЭЙ_ПоставкиПоКонтрактамВЭД.КонтрактВЭД = &КонтрактВЭД
		|
		|СГРУППИРОВАТЬ ПО
		|	РЭЙ_ПоставкиПоКонтрактамВЭД.КонтрактВЭД
		|
		|ИМЕЮЩИЕ
		|	СУММА(РЭЙ_ПоставкиПоКонтрактамВЭД.СуммаВРубляхРФ) > &ЛимитСуммы";
		
		Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
		Запрос.УстановитьПараметр("ЛимитСуммы", Лимит.Сумма);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЕстьПревышение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПревышение Тогда
		оКонтрактВЭД = Выборка.КонтрактВЭД.ПолучитьОбъект();
		оКонтрактВЭД.НеЯвляетсяОбъектомВалютногоКонтроля = Ложь;
		оКонтрактВЭД.Записать();
		
		ДобавитьЗадачуКонтрактВЭД(оКонтрактВЭД.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура СозданиеЗадачНаПереоформлениеПаспортаСделкиПриПревышенииСуммы(КонтрактВЭД)
	ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.ПаспортСделкиПереоформлениеСумма;
	
	Если Не ВидЗадачи.Использование Тогда
		Возврат;
	КонецЕсли;
	
	ЛимитСуммы = КонтрактВЭД.КонтрактСумма;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_ПлатежиПоКонтрактамВЭД.КонтрактВЭД,
	|	СУММА(РЭЙ_ПлатежиПоКонтрактамВЭД.СуммаВВалютеКонтракта) КАК СуммаВВалютеКонтракта,
	|	МАКСИМУМ(РЭЙ_ПлатежиПоКонтрактамВЭД.ДатаОплаты) КАК ДатаОплаты
	|ИЗ
	|	РегистрСведений.РЭЙ_ПлатежиПоКонтрактамВЭД КАК РЭЙ_ПлатежиПоКонтрактамВЭД
	|ГДЕ
	|	РЭЙ_ПлатежиПоКонтрактамВЭД.КонтрактВЭД = &КонтрактВЭД
	|
	|СГРУППИРОВАТЬ ПО
	|	РЭЙ_ПлатежиПоКонтрактамВЭД.КонтрактВЭД
	|
	|ИМЕЮЩИЕ
	|	СУММА(РЭЙ_ПлатежиПоКонтрактамВЭД.СуммаВВалютеКонтракта) > &ЛимитСуммы";
	
	Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
	Запрос.УстановитьПараметр("ЛимитСуммы", ЛимитСуммы);
	
	ЕстьПревышение = Ложь;
	текДатаОтсчета = Дата("00010101");
	текСумма = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьПревышение = Истина;
		текДатаОтсчета = Выборка.ДатаОплаты;
		текСумма = Выборка.СуммаВВалютеКонтракта;
	КонецЕсли;
	
	Если Не ЕстьПревышение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РЭЙ_ПоставкиПоКонтрактамВЭД.КонтрактВЭД,
		|	СУММА(РЭЙ_ПоставкиПоКонтрактамВЭД.СуммаВВалютеКонтракта) КАК СуммаВВалютеКонтракта,
		|	МАКСИМУМ(РЭЙ_ПоставкиПоКонтрактамВЭД.ДатаПоставки) КАК ДатаПоставки
		|ИЗ
		|	РегистрСведений.РЭЙ_ПоставкиПоКонтрактамВЭД КАК РЭЙ_ПоставкиПоКонтрактамВЭД
		|ГДЕ
		|	РЭЙ_ПоставкиПоКонтрактамВЭД.КонтрактВЭД = &КонтрактВЭД
		|
		|СГРУППИРОВАТЬ ПО
		|	РЭЙ_ПоставкиПоКонтрактамВЭД.КонтрактВЭД
		|
		|ИМЕЮЩИЕ
		|	СУММА(РЭЙ_ПоставкиПоКонтрактамВЭД.СуммаВВалютеКонтракта) > &ЛимитСуммы";
		
		Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
		Запрос.УстановитьПараметр("ЛимитСуммы", ЛимитСуммы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЕстьПревышение = Истина;
			текДатаОтсчета = Выборка.ДатаПоставки;
			текСумма = Выборка.СуммаВВалютеКонтракта;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПревышение Тогда
		СоздатьЗадачуЗаявлениеВБанкПС_ПревышениеСуммы(КонтрактВЭД, текДатаОтсчета, текСумма);
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьЗадачуЗаявлениеВБанкПС_ПревышениеСуммы(КонтрактВЭД, текДатаОтсчета, текСумма) Экспорт
	ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.ПаспортСделкиПереоформлениеСумма;
	
	Если Не ВидЗадачи.Использование Тогда
		Возврат;
	КонецЕсли;
	
	ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД);
	
	Если Не ЗначениеЗаполнено(ПаспортСделки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
	|ГДЕ
	|	Задачи.ОбъектЗадачи = &ОбъектЗадачи
	|	И Задачи.ВидЗадачи = &ВидЗадачи";
	
	Запрос.УстановитьПараметр("ОбъектЗадачи", ПаспортСделки);
	Запрос.УстановитьПараметр("ВидЗадачи", ВидЗадачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	текДатаРасчетная = РасчетСрокаПредоставленияПаспортаСделки(текДатаОтсчета, "ПереоформлениеСумма");
	Если текДатаРасчетная = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
	
	Задача.Дата = текДатаОтсчета;
	Задача.ВидЗадачи = ВидЗадачи;
	Задача.ОбъектЗадачи = ПаспортСделки;
	Задача.ПаспортСделки = ПаспортСделки;
	Задача.Наименование = "ЗБ";
	Задача.Сумма = текСумма;
	Задача.Валюта = Задача.ПаспортСделки.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Задача.СрокИсполнения = текДатаРасчетная;

	УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
	ЗаписатьАдресациюЗадачи(Задача, КонтрактВЭД.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
	
	Задача.Записать();
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАДАЧ ПО СОЗДАНИЮ ПАСПОРТА СДЕЛКИ ПРИ ПРИБЛИЖЕНИИ ДАТЫ ОКОНЧАНИЯ

Процедура СозданиеЗадачНаПереоформлениеПаспортаСделкиПриПриближенииДатыОкончания() Экспорт
	ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.ПаспортСделкиПереоформлениеСрок;
	
	Если Не ВидЗадачи.Использование Тогда
		Возврат;
	КонецЕсли;
	
	текДатаОтсчета = ТекущаяДата();
	текДатаРасчетная = РасчетСрокаПредоставленияПаспортаСделки(текДатаОтсчета, "ПереоформлениеСрок");
	Если текДатаРасчетная = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_ЗадачиВЭД.Ссылка,
	|	РЭЙ_ЗадачиВЭД.КонтрактВЭД
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК РЭЙ_ЗадачиВЭД
	|ГДЕ
	|	РЭЙ_ЗадачиВЭД.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.РЭЙ_ВидыЗадачПользователей.ПаспортСделкиПереоформлениеСрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РЭЙ_КонтрактыВЭД.Ссылка
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задачи КАК Задачи
	|		ПО (Задачи.КонтрактВЭД = РЭЙ_КонтрактыВЭД.Ссылка)
	|ГДЕ
	|	Задачи.Ссылка ЕСТЬ NULL 
	|	И РЭЙ_КонтрактыВЭД.КонтрактДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И РЭЙ_КонтрактыВЭД.НеДействует = ЛОЖЬ
	|	И (РЭЙ_КонтрактыВЭД.Автопролонгация = ЛОЖЬ
	|				И РЭЙ_КонтрактыВЭД.КонтрактДатаОкончания <= &ДатаОкончанияДляПереоформленияБезАвтопролонгации
	|			ИЛИ РЭЙ_КонтрактыВЭД.Автопролонгация
	|				И РЭЙ_КонтрактыВЭД.КонтрактДатаОкончания <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, РЭЙ_КонтрактыВЭД.МинимальноеКоличествоДнейДляУведомленияОПрекращенииДействияКонтракта))";
	
	Запрос.УстановитьПараметр("ДатаОкончанияДляПереоформленияБезАвтопролонгации", текДатаРасчетная);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтрактВЭД = Выборка.Ссылка;
		ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД);
		
		Если ЗначениеЗаполнено(ПаспортСделки) Тогда
			Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
			Задача.Дата = текДатаОтсчета;
			Задача.ВидЗадачи = ВидЗадачи;
			Задача.ОбъектЗадачи = ПаспортСделки;
			Задача.ПаспортСделки = ПаспортСделки;
			Задача.Наименование = "ЗБ";
			
			Задача.СрокИсполнения = КонтрактВЭД.КонтрактДатаОкончания;
			Задача.Сумма = КонтрактВЭД.КонтрактСумма;
			Задача.Валюта = КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
			ЗаписатьАдресациюЗадачи(Задача, КонтрактВЭД.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
			
			Задача.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СозданиеЗадачНаПодтверждениеАвтопролонгацииКонтракта() Экспорт
	ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.КонтрактВЭДПодтверждениеАвтопролонгации;
	
	Если Не ВидЗадачи.Использование Тогда
		Возврат;
	КонецЕсли;
	
	текДатаОтсчета = ТекущаяДата();
	текДатаРасчетная = РасчетСрокаПредоставленияПаспортаСделки(текДатаОтсчета, "ПереоформлениеСрок");
	Если текДатаРасчетная = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_КонтрактыВЭД.Ссылка,
	|	РЭЙ_КонтрактыВЭД.КонтрактДатаОкончания,
	|	РЭЙ_КонтрактыВЭД.МинимальноеКоличествоДнейДляУведомленияОПрекращенииДействияКонтракта
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.РЭЙ_ЗадачиВЭД КАК РЭЙ_ЗадачиВЭД
	|		ПО (РЭЙ_ЗадачиВЭД.КонтрактВЭД = РЭЙ_КонтрактыВЭД.Ссылка)
	|			И (РЭЙ_ЗадачиВЭД.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.РЭЙ_ВидыЗадачПользователей.КонтрактВЭДПодтверждениеАвтопролонгации))
	|			И (РЭЙ_ЗадачиВЭД.Выполнена = ЛОЖЬ)
	|ГДЕ
	|	РЭЙ_ЗадачиВЭД.Ссылка ЕСТЬ NULL
	|	И РЭЙ_КонтрактыВЭД.КонтрактДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И РЭЙ_КонтрактыВЭД.НеДействует = ЛОЖЬ
	|	И РЭЙ_КонтрактыВЭД.Автопролонгация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатаАвтоматическойПролонгации = Выборка.КонтрактДатаОкончания - Выборка.МинимальноеКоличествоДнейДляУведомленияОПрекращенииДействияКонтракта * 86400;
		текДатаРасчетная = РасчетСрокаПредоставленияПаспортаСделки(ДатаАвтоматическойПролонгации, "Автопролонгация");
		Если текДатаРасчетная = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяДата() >= текДатаРасчетная Тогда 
			КонтрактВЭД = Выборка.Ссылка;
			ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД);
			
			Если ЗначениеЗаполнено(ПаспортСделки) Тогда
				Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
				Задача.Дата = ТекущаяДата();
				Задача.ВидЗадачи = ВидЗадачи;
				Задача.ОбъектЗадачи = КонтрактВЭД;
				Задача.ПаспортСделки = ПаспортСделки;
				Задача.Наименование = "Автопролонгация";
				Задача.Валюта = КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				Задача.СрокИсполнения = ДатаАвтоматическойПролонгации;
				
				УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
				ЗаписатьАдресациюЗадачи(Задача, КонтрактВЭД.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
				
				Задача.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЗадачуЗаявлениеВБанкПС_ПревышениеСрока(КонтрактВЭД) Экспорт
	ВидЗадачи = Справочники.РЭЙ_ВидыЗадачПользователей.ПаспортСделкиПереоформлениеСрок;
	
	Если Не ВидЗадачи.Использование Тогда
		Возврат;
	КонецЕсли;
	
	текДатаОтсчета = ТекущаяДата();
	текДатаРасчетная = РасчетСрокаПредоставленияПаспортаСделки(текДатаОтсчета, "ПереоформлениеСрок");
	Если текДатаРасчетная = -999999 Тогда
		Возврат;
	КонецЕсли;
	
	ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД);
	
	Если ЗначениеЗаполнено(ПаспортСделки) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
		|ГДЕ
		|	Задачи.ОбъектЗадачи = &ОбъектЗадачи
		|	И Задачи.ВидЗадачи = &ВидЗадачи";
		
		Запрос.УстановитьПараметр("ОбъектЗадачи", ПаспортСделки);
		Запрос.УстановитьПараметр("ВидЗадачи", ВидЗадачи);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Задача = Задачи.РЭЙ_ЗадачиВЭД.СоздатьЗадачу();
			Задача.Дата = текДатаОтсчета;
			Задача.ВидЗадачи = ВидЗадачи;
			Задача.ОбъектЗадачи = ПаспортСделки;
			Задача.ПаспортСделки = ПаспортСделки;
			Задача.Наименование = "ЗБ";
			
			Задача.СрокИсполнения = КонтрактВЭД.КонтрактДатаОкончания;
			Задача.Сумма = КонтрактВЭД.КонтрактСумма;
			Задача.Валюта = КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(Задача);
			ЗаписатьАдресациюЗадачи(Задача, КонтрактВЭД.Организация, Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
			
			Задача.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ
//
////////////////////////////////////////////////////////////////////////////////

Функция ПоискЗадачи(ОбъектЗадачи) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектЗадачи", ОбъектЗадачи);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
	|ГДЕ
	|	 Задачи.ОбъектЗадачи = &ОбъектЗадачи";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Задачи.РЭЙ_ЗадачиВЭД.ПустаяСсылка();
	КонецЕсли;
КонецФункции	

Функция ОпределитьСтатусСправки(СрокИсполнения)
	ВремяФормированияЗадач = ТекущаяДата();
	
	Если РЭЙ_СлужебныйСервер.РазницаДат(СрокИсполнения, ВремяФормированияЗадач) >= 1 Тогда
		Возврат Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаПросрочена; 
	ИначеЕсли РЭЙ_СлужебныйСервер.РазницаДат(СрокИсполнения, ВремяФормированияЗадач) = 0 Тогда
		Возврат Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаПодлежитСдачеСегодня; 
	ИначеЕсли РЭЙ_СлужебныйСервер.РазницаДат(ВремяФормированияЗадач, ДобавитьРабочиеДни(СрокИсполнения, -1)) = 0 Тогда
		Возврат Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаПодлежитСдачеЗавтра; 
	ИначеЕсли РЭЙ_СлужебныйСервер.РазницаДат(ВремяФормированияЗадач, ДобавитьРабочиеДни(СрокИсполнения, -2)) = 0 Тогда
		Возврат Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаПодлежитСдачеПослезавтра; 
	Иначе
		Возврат Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаПодлежитСозданию; 
	КонецЕсли; 
КонецФункции

Функция РасчетСрокаПредоставленияСВО(ДокОсн, ВидСправки)
	Перем Результат;
	
	Имя = СокрЛП(ВРег(ДокОсн.Метаданные().Имя));
	
	НаправлениеПлатежа = 0;
	ТаблицаРасчетныхДокументов = РЭЙ_СлужебныйСервер.ПолучитьТаблицуРасчетныхДокументов();
	СтрокаДокумента = ТаблицаРасчетныхДокументов.Найти(Имя);
	Если СтрокаДокумента <> Неопределено Тогда
		НаправлениеПлатежа = СтрокаДокумента.Направление;
	КонецЕсли;
	
	ДатаЗаписи = ДокОсн.Дата;	
	Запрос = Новый Запрос;	
	
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаЗаписи);
	Запрос.УстановитьПараметр("ВидСправки", ВидСправки);
	Запрос.УстановитьПараметр("НаправлениеПлатежа", НаправлениеПлатежа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.Период КАК Дата,
	|	Регистр.ВидСправки КАК ВидСправки,
	|	Регистр.НаправлениеПлатежа КАК НаправлениеПлатежа,
	|	Регистр.Дни КАК Дни,
	|	Регистр.ДатаСтартаТаймера КАК ДатаСтартаТаймера,
	|	Регистр.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.РЭЙ_СрокиПредставленияСправкиОВалютныхОперациях.СрезПоследних(&ДатаПолучения, ) КАК Регистр
	|ГДЕ
	|	Регистр.НаправлениеПлатежа = &НаправлениеПлатежа
	|	И Регистр.ВидСправки = &ВидСправки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//"C даты поступления на валютный банковский счет"
		ДатаОтсчета = НачалоДня(ДокОсн.Дата);
		Если Выборка.ДатаСтартаТаймера = 2 Тогда
			//"Следующих за месяцем, в течение которого были осуществлены операции"	
			ДатаОтсчета = ДобавитьКалендарныеДни(НачалоДня(КонецМесяца(ДатаОтсчета)), 1);
		ИначеЕсли Выборка.ДатаСтартаТаймера = 6 Тогда
			Возврат -999999;
		КонецЕсли; 
		//Сообщить(Выборка.КоличествоДней)
		Если Выборка.Дни = 1  Тогда
			//"Календарные дни"
			Если Выборка.КоличествоДней = 0 Тогда
				Результат = ДатаОтсчета;
			Иначе
				Результат = ДобавитьКалендарныеДни(ДатаОтсчета, Выборка.КоличествоДней - 1);	
			КонецЕсли;	
		ИначеЕсли Выборка.Дни = 2 Тогда
			//"Рабочие дни"
			Если Выборка.КоличествоДней = 0 Тогда
				Результат = ДатаОтсчета;
			Иначе
				Результат = ДобавитьРабочиеДни(ДатаОтсчета, Выборка.КоличествоДней);	
			КонецЕсли; 
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Функция РасчетСрокаПредоставленияСПД(ДокОсн, ПроцедураДекларирования)
	Перем Результат;
	
	Имя = ВРег(СокрЛП(ДокОсн.Метаданные().Имя));
	Если Имя = ВРег("ПоступлениеТоваровУслуг") Или Имя = ВРег("ГТДИмпорт") Тогда
		НаправлениеПоставки = 1;
	ИначеЕсли Имя = ВРег("ПоступлениеДопРасходов") Тогда
		НаправлениеПоставки = 1;
	ИначеЕсли Имя = ВРег("РеализацияТоваровУслуг") Тогда
		НаправлениеПоставки = 2;
	ИначеЕсли Имя = ВРег("РеализацияУслугПрочихАктивов") Тогда
		НаправлениеПоставки = 2;
	ИначеЕсли Имя = ВРег("АктВыполненныхРабот") Тогда
		НаправлениеПоставки = 2;
	ИначеЕсли Имя = ВРег("РеализацияУслугПрочихАктивов") Тогда
		НаправлениеПоставки = 2;
	ИначеЕсли Имя = ВРег("ПриобретениеТоваровУслуг") Тогда
		НаправлениеПоставки = 2;
	ИначеЕсли Имя = ВРег("ПриобретениеУслугПрочихАктивов") Тогда
		НаправлениеПоставки = 2;
	ИначеЕсли Имя = ВРег("ТаможеннаяДекларацияИмпорт") Тогда
		НаправлениеПоставки = 2;
	Иначе
		Возврат -999999;
	КонецЕсли;
	
	ДатаЗаписи = ДокОсн.Дата;	
	Запрос = Новый Запрос;	
	
	Запрос.УстановитьПараметр("ДатаПолучения",	ДатаЗаписи);
	Запрос.УстановитьПараметр("ПроцедураДекларирования", ПроцедураДекларирования);
	Запрос.УстановитьПараметр("НаправлениеПоставки", НаправлениеПоставки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сроки.Период КАК Дата,
	|	Сроки.Дни КАК Дни,
	|	Сроки.ДатаСтартаТаймера КАК ДатаСтартаТаймера,
	|	Сроки.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.РЭЙ_СрокиПредставленияСправкиОПодтверждающихДокументах.СрезПоследних(&ДатаПолучения, ) КАК Сроки
	|ГДЕ
	|	Сроки.НаправлениеПоставки = &НаправлениеПоставки
	|	И Сроки.ПроцедураДекларирования = &ПроцедураДекларирования";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//"C даты поступления на валютный банковский счет"
		ДатаОтсчета = НачалоДня(ДокОсн.Дата);
		
		Если Выборка.ДатаСтартаТаймера = 2 Тогда
			//"Следующих за месяцем, в течение которого были осуществлены операции"	
			ДатаОтсчета = ДобавитьКалендарныеДни(НачалоДня(КонецМесяца(ДатаОтсчета)),1);
		ИначеЕсли Выборка.ДатаСтартаТаймера = 3 Тогда
			//дата выпуска с таможни
			ДатаОтсчета = НачалоДня(ДокОсн.Дата);
			
			Если Имя = ВРег("РеализацияТоваровУслуг") Тогда
				КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(ДокОсн);
				Если КонтрактВЭД.ВидДокумента = Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВывозСТерриторииРФТоваровПоГТД Тогда
					Если ЗначениеЗаполнено(ДокОсн.РЭЙ_ДатаПоГТД) Тогда
						ДатаОтсчета = ДокОсн.РЭЙ_ДатаПоГТД;
					Иначе
						Сообщить("В документе """ + ДокОсн + """ дата ГТД по экспорту не заполнена. Будет использована дата документа Реализация товаров и услуг.");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.ДатаСтартаТаймера = 12 Тогда
			// Последнее число отчетного месяца
			ДатаОтсчета = НачалоДня(КонецМесяца(ДатаОтсчета));
		ИначеЕсли Выборка.ДатаСтартаТаймера = 6 Тогда
			Возврат -999999;
		КонецЕсли; 
		
		Если Выборка.Дни = 1  Тогда
			//"Календарные дни"
			Результат = ДобавитьКалендарныеДни(ДатаОтсчета,Выборка.КоличествоДней);	
		ИначеЕсли Выборка.Дни = 2  Тогда
			//"Рабочие дни"
			Результат = РЭЙ_СлужебныйСервер.ОпределитьДату(ДатаОтсчета,Выборка.КоличествоДней);	
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Функция РасчетСрокаПредоставленияПаспортаСделки(текДатаОтсчета, текПроцедура)
	Результат = Неопределено;

	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.Период КАК Дата,
	|	Регистр.Дни КАК Дни,
	|	Регистр.ДатаСтартаТаймера КАК ДатаСтартаТаймера,
	|	Регистр.КоличествоДней КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.РЭЙ_СрокиПредставленияПаспортаСделки.СрезПоследних(&ДатаПолучения, Процедура = &Процедура) КАК Регистр";
	
	Запрос.УстановитьПараметр("ДатаПолучения", текДатаОтсчета);
	Запрос.УстановитьПараметр("Процедура", текПроцедура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДатаСтартаТаймера = 7 Тогда
			ДатаОтсчета = текДатаОтсчета;
		ИначеЕсли Выборка.ДатаСтартаТаймера = 9 Тогда
			ДатаОтсчета = текДатаОтсчета;
		ИначеЕсли Выборка.ДатаСтартаТаймера = 10 Тогда
			ДатаОтсчета = текДатаОтсчета;
		ИначеЕсли Выборка.ДатаСтартаТаймера = 11 Тогда
			ДатаОтсчета = текДатаОтсчета;
		ИначеЕсли Выборка.ДатаСтартаТаймера = 6 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		Если Выборка.Дни = 1  Тогда
			//"Календарные дни"
			Если Выборка.КоличествоДней = 0 Тогда
				Результат = ДатаОтсчета;
			Иначе
				Результат = ДобавитьКалендарныеДни(ДатаОтсчета, Выборка.КоличествоДней - 1);	
			КонецЕсли;	
		ИначеЕсли Выборка.Дни = 2 Тогда
			//"Рабочие дни"
			Если Выборка.КоличествоДней = 0 Тогда
				Результат = ДатаОтсчета;
			Иначе
				Результат = ДобавитьРабочиеДни(ДатаОтсчета, Выборка.КоличествоДней);	
			КонецЕсли; 
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Функция ДобавитьКалендарныеДни(АнализируемаяДата, КолДней)
	Перем Результат;
	мДлинаСуток = 86400;
	Результат 	= АнализируемаяДата + КолДней*мДлинаСуток;
	Возврат Результат;
КонецФункции	

Функция ДобавитьРабочиеДни(ДатаНач, ЧислоДней) Экспорт
	
	Запрос = Новый  Запрос;
	Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
	Запрос.УстановитьПараметр("ЧислоДней",           ЧислоДней);
	Запрос.УстановитьПараметр("РабочийДень",         Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Если ЧислоДней > 0 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ЧислоДней + "
		|	ДанныеПроизводственногоКалендаря.Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ ДанныеПроизводственногоКалендаря.Дата > &ДатаНач
		|	 И (ДанныеПроизводственногоКалендаря.ВидДня = &РабочийДень
		|      ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = &ПредпраздничныйДень)
		|УПОРЯДОЧИТЬ ПО ДанныеПроизводственногоКалендаря.Дата
		|";
		
	Иначе
		ЧислоДней = -ЧислоДней;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ЧислоДней + "
		|	ДанныеПроизводственногоКалендаря.Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ ДанныеПроизводственногоКалендаря.Дата < &ДатаНач
		|	 И (ДанныеПроизводственногоКалендаря.ВидДня = &РабочийДень
		|      ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = &ПредпраздничныйДень)
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = ЧислоДней Тогда
		Пока Выборка.Следующий() Цикл
			ТекДата = Выборка.Дата;
		КонецЦикла;
		Возврат ТекДата;
	Иначе
		Сообщить("Не удалось рассчитать дату выполнения задачи. Проверьте, что для рассчитываемого периода заполнен регистр сведений ""Производственный календарь"".");
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции	

Функция НеСоздаватьЗадачиПоКонтракту(Контракт)
	Если Не ЗначениеЗаполнено(Контракт) Тогда
		Возврат Истина
	ИначеЕсли Контракт.НеЯвляетсяОбъектомВалютногоКонтроля Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ПолучитьСтатусЗадачиЗадачи(ДокОсн) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокОсн",	ДокОсн);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
	|ГДЕ
	|	Задачи.ОбъектЗадачи = &ДокОсн";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Если ВРег(ДокОсн.Метаданные().Имя) = ВРег("ПоступлениеТоваровУслуг") Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Задачи.Ссылка
			|ИЗ
			|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
			|ГДЕ
			|	Задачи.ОбъектЗадачи В
			|			(ВЫБРАТЬ
			|				ГТДИмпортТовары.Ссылка
			|			ИЗ
			|				Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
			|			ГДЕ
			|				ГТДИмпортТовары.ДокументПартии = &ДокОсн)";
			
			Выборка = Запрос.Выполнить().Выбрать();
		КонецЕсли;
		Если ВРег(ДокОсн.Метаданные().Имя) = ВРег("ПриобретениеТоваровУслуг") Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
			|ГДЕ
			|	Задачи.ОбъектЗадачи В
			|			(ВЫБРАТЬ
			|				ГТДИмпортТовары.Ссылка
			|			ИЗ
			|				Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ГТДИмпортТовары
			|			ГДЕ
			|				ГТДИмпортТовары.ДокументПоступления = &ДокОсн)";
			
			Выборка = Запрос.Выполнить().Выбрать();
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка.СтатусСправкиОВалютномКонтроле;
	Иначе
		Возврат Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.ПустаяСсылка();
	КонецЕсли;
КонецФункции	

Процедура КонтрольДатыИсполненияЗадачи() Экспорт
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "Задача.РЭЙ_ЗадачиВЭД";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка,
	|	Задачи.СрокИсполнения,
	|	Задачи.СтатусСправкиОВалютномКонтроле
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
	|ГДЕ
	|	НЕ Задачи.Выполнена
	|	И Задачи.СтатусСправкиОВалютномКонтроле <> ЗНАЧЕНИЕ(Перечисление.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаСоздана)
	|	И Задачи.СтатусСправкиОВалютномКонтроле <> ЗНАЧЕНИЕ(Перечисление.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаРаспечатана)
	|	И Задачи.СтатусСправкиОВалютномКонтроле <> ЗНАЧЕНИЕ(Перечисление.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаСозданаДокументПерезаписан)
	|	И Задачи.СтатусСправкиОВалютномКонтроле <> ЗНАЧЕНИЕ(Перечисление.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаРаспечатанаДокументПерезаписан)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		новСтатусСправки = ОпределитьСтатусСправки(Выборка.СрокИсполнения);
		Если Выборка.СтатусСправкиОВалютномКонтроле <> новСтатусСправки Тогда
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = новСтатусСправки;
			ЗадачаОбъект.Записать();
		КонецЕсли; 
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоТекущейДаты", НачалоДня(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка,
	|	Задачи.СрокИсполнения
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
	|ГДЕ
	|	НЕ Задачи.Выполнена
	|	И Задачи.СтатусСправкиОВалютномКонтроле = ЗНАЧЕНИЕ(Перечисление.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаРаспечатана)
	|	И Задачи.ДатаИзмененияСтатуса < &НачалоТекущейДаты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Выполнена = Истина;
		ЗадачаОбъект.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Процедура УдалитьЗадачу(ОбъектЗадачи)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОбъектЗадачи", ОбъектЗадачи);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
	|ГДЕ
	|	 Задачи.ОбъектЗадачи = &ОбъектЗадачи";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
	КонецЦикла;
КонецПроцедуры	

Процедура ЗаписатьАдресациюЗадачи(Задача, Организация, Роль)
	Задача.Организация	= Организация;
	Задача.Роль = Роль;
КонецПроцедуры

Процедура УстановитьСтатусЗадачиВЭД(ДокОсн, Статус) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокОсн",	ДокОсн);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
	|ГДЕ
	|	Задачи.ОбъектЗадачи = &ДокОсн";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Если ВРег(ДокОсн.Метаданные().Имя) = ВРег("ПоступлениеТоваровУслуг") Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Задачи.Ссылка
			|ИЗ
			|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
			|ГДЕ
			|	Задачи.ОбъектЗадачи В
			|			(ВЫБРАТЬ
			|				ГТДИмпортТовары.Ссылка
			|			ИЗ
			|				Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
			|			ГДЕ
			|				ГТДИмпортТовары.ДокументПартии = &ДокОсн)";
			
			Выборка = Запрос.Выполнить().Выбрать();
		КонецЕсли;
		Если ВРег(ДокОсн.Метаданные().Имя) = ВРег("ПриобретениеТоваровУслуг") Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
			|ГДЕ
			|	Задачи.ОбъектЗадачи В
			|			(ВЫБРАТЬ
			|				ГТДИмпортТовары.Ссылка
			|			ИЗ
			|				Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ГТДИмпортТовары
			|			ГДЕ
			|				ГТДИмпортТовары.ДокументПоступления = &ДокОсн)";
			
			Выборка = Запрос.Выполнить().Выбрать();
		КонецЕсли;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Статус  = "ПодлежитСозданию" Тогда
			ЗадачаОбъект.СтатусСправкиОВалютномКонтроле	= ОпределитьСтатусСправки(ЗадачаОбъект.СрокИсполнения); 
			ЗадачаОбъект.Выполнена = Ложь;
		ИначеЕсли Статус  = "Распечатана" Тогда
			ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаРаспечатана;
		ИначеЕсли Статус  = "Создана" Тогда
			ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаСоздана; 
		КонецЕсли; 
		
		ЗадачаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусЗадачиПриЗаписиОбъектаЗадачи(ЗадачаОбъект)
	Если ЗадачаОбъект.ЭтоНовый() Тогда
		ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = ОпределитьСтатусСправки(ЗадачаОбъект.СрокИсполнения);
	Иначе
		Если ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаСоздана Тогда
			ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаСозданаДокументПерезаписан;
			
		ИначеЕсли ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаРаспечатана Тогда
			ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаРаспечатанаДокументПерезаписан;
			
		ИначеЕсли ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаСозданаДокументПерезаписан Тогда
		ИначеЕсли ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаРаспечатанаДокументПерезаписан Тогда
		Иначе
			ЗадачаОбъект.СтатусСправкиОВалютномКонтроле = ОпределитьСтатусСправки(ЗадачаОбъект.СрокИсполнения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СнятьПризнакЗадачаВыполнена(ДокОсн) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокОсн",	ДокОсн);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК Задачи
	|ГДЕ
	|	Задачи.Выполнена
	|	И Задачи.ОбъектЗадачи = &ДокОсн";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАДАЧ ПО КОНТРОЛЮ ИЗМЕНЕНИЯ КЛЮЧЕВЫХ РЕКВИЗИТОВ

Процедура ЗаписатьКлючевыеРеквизиты(ЗадачаОбъект)
	Если ЗначениеЗаполнено(ЗадачаОбъект.ОбъектЗадачи) Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗадачаОбъект.ОбъектЗадачи)) Тогда
			СтруктураРеквизитов = Неопределено;
			Если ПараметрыСеанса.РЭЙ_КлючевыеРеквизиты.Свойство(ЗадачаОбъект.ОбъектЗадачи.Метаданные().Имя, СтруктураРеквизитов) Тогда
				// Реквизиты
				СохраняемаяСтруктура_Реквизиты = Новый Структура();
				Для Каждого текРеквизит Из СтруктураРеквизитов.Реквизиты Цикл
					НовоеЗначение = ЗадачаОбъект.ОбъектЗадачи[текРеквизит.Ключ];
					Если ТипЗнч(НовоеЗначение) = Тип("Дата") Тогда
						НовоеЗначение = НачалоДня(НовоеЗначение);
					КонецЕсли;
					СохраняемаяСтруктура_Реквизиты.Вставить(текРеквизит.Ключ, НовоеЗначение);
				КонецЦикла;
				
				// Табличные части
				СохраняемаяСтруктура_ТабличныеЧасти = Новый Структура();
				Для Каждого текТабличнаяЧасть Из СтруктураРеквизитов.ТабличныеЧасти Цикл
					НовоеЗначение = ЗадачаОбъект.ОбъектЗадачи[текТабличнаяЧасть.Ключ];
					СохраняемаяСтруктура_ТабличныеЧасти.Вставить(текТабличнаяЧасть.Ключ, Новый Структура());
					Для Каждого текСтрокаТЧ Из ЗадачаОбъект.ОбъектЗадачи[текТабличнаяЧасть.Ключ] Цикл
						текИндекс = "Строка" + Формат(ЗадачаОбъект.ОбъектЗадачи[текТабличнаяЧасть.Ключ].Индекс(текСтрокаТЧ), "ЧН=0; ЧГ=0");
						СохраняемаяСтруктура_ТабличныеЧасти[текТабличнаяЧасть.Ключ].Вставить(текИндекс, Новый Структура());
						Для Каждого текРеквизит Из текТабличнаяЧасть.Значение Цикл
							НовоеЗначение = текСтрокаТЧ[текРеквизит.Ключ];
							Если ТипЗнч(НовоеЗначение) = Тип("Дата") Тогда
								НовоеЗначение = НачалоДня(НовоеЗначение);
							КонецЕсли;
							СохраняемаяСтруктура_ТабличныеЧасти[текТабличнаяЧасть.Ключ][текИндекс].Вставить(текРеквизит.Ключ, НовоеЗначение);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				
				СохраняемаяСтруктураКлючевыхРеквизитов = Новый Структура;
				СохраняемаяСтруктураКлючевыхРеквизитов.Вставить("Реквизиты", СохраняемаяСтруктура_Реквизиты);
				СохраняемаяСтруктураКлючевыхРеквизитов.Вставить("ТабличныеЧасти", СохраняемаяСтруктура_ТабличныеЧасти);
				ЗадачаОбъект.КлючевыеРеквизиты = Новый ХранилищеЗначения(СохраняемаяСтруктураКлючевыхРеквизитов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ИзмененыКлючевыеРеквизиты(СсылкаНаЗадачу)
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаЗадачу.ОбъектЗадачи)) Тогда
		СтруктураРеквизитов = Неопределено;
		Если ПараметрыСеанса.РЭЙ_КлючевыеРеквизиты.Свойство(СсылкаНаЗадачу.ОбъектЗадачи.Метаданные().Имя, СтруктураРеквизитов) Тогда
			СохраненнаяСтруктураКлючевыхРеквизитов = СсылкаНаЗадачу.КлючевыеРеквизиты.Получить();
			СохраненныеРеквизиты = СохраненнаяСтруктураКлючевыхРеквизитов.Реквизиты;
			СохраненныеТабличныеЧасти = СохраненнаяСтруктураКлючевыхРеквизитов.ТабличныеЧасти;
			Если СохраненнаяСтруктураКлючевыхРеквизитов = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			
			Для Каждого текРеквизит Из СтруктураРеквизитов.Реквизиты Цикл
				СтароеЗначение = Неопределено;
				Если СохраненныеРеквизиты.Свойство(текРеквизит.Ключ, СтароеЗначение) Тогда
					НовоеЗначение = СсылкаНаЗадачу.ОбъектЗадачи[текРеквизит.Ключ];
					Если ТипЗнч(НовоеЗначение) = Тип("Дата") Тогда
						НовоеЗначение = НачалоДня(НовоеЗначение);
					КонецЕсли;
					Если СтароеЗначение <> НовоеЗначение Тогда
						Возврат Истина;
					КонецЕсли;
				Иначе
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого текТабличнаяЧасть Из СтруктураРеквизитов.ТабличныеЧасти Цикл
				СтароеЗначениеТЧ = Неопределено;
				Если СохраненныеТабличныеЧасти.Свойство(текТабличнаяЧасть.Ключ, СтароеЗначениеТЧ) Тогда
					НовоеЗначениеТЧ = СсылкаНаЗадачу.ОбъектЗадачи[текТабличнаяЧасть.Ключ];
					Если СтароеЗначениеТЧ.Количество() <> НовоеЗначениеТЧ.Количество() Тогда
						Возврат Истина;
					Иначе
						Для Каждого текСтрокаТЧ Из НовоеЗначениеТЧ Цикл
							текИндекс = "Строка" + Формат(НовоеЗначениеТЧ.Индекс(текСтрокаТЧ), "ЧН=0; ЧГ=0");
							Для Каждого текРеквизит Из текТабличнаяЧасть.Значение Цикл
								СтароеЗначение = Неопределено;
								Если СтароеЗначениеТЧ[текИндекс].Свойство(текРеквизит.Ключ, СтароеЗначение) Тогда
									НовоеЗначение = текСтрокаТЧ[текРеквизит.Ключ];
									Если ТипЗнч(НовоеЗначение) = Тип("Дата") Тогда
										НовоеЗначение = НачалоДня(НовоеЗначение);
									КонецЕсли;
									Если СтароеЗначение <> НовоеЗначение Тогда
										Возврат Истина;
									КонецЕсли;
								Иначе
									Возврат Истина;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНОЕ ЗАДАНИЕ

Процедура РегламентноеЗадание() Экспорт
	ОбработкаЗадачПоКонтролюОжидаемыхСроков();
	СозданиеЗадачНаПереоформлениеПаспортаСделкиПриПриближенииДатыОкончания();
	СозданиеЗадачНаПодтверждениеАвтопролонгацииКонтракта();
	КонтрольДатыИсполненияЗадачи();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ ВЕРСИИ ПОДСИСТЕМЫ ВЭД

Процедура Обновление_2_0_5_1() Экспорт
	// Заполнение индексов картинок и ключевых реквизитов
	Выборка = Задачи.РЭЙ_ЗадачиВЭД.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаписатьКлючевыеРеквизиты(ЗадачаОбъект);
		ЗадачаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры


Процедура ВыполнитьЗадачу_КонтрактВЭДПодтверждениеАвтопролонгации(Задача, НоваяДатаОкончания) Экспорт
	НачатьТранзакцию();
	
	КонтрактВЭД_Объект = Задача.ОбъектЗадачи.ПолучитьОбъект();
	КонтрактВЭД_Объект.КонтрактДатаОкончания = НоваяДатаОкончания;
	КонтрактВЭД_Объект.Записать();
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ВыполнитьЗадачу();
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры
