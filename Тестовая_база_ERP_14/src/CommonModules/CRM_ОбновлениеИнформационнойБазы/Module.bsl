////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы CRM.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля
//                                  ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя	= "CRM";
	Описание.Версия = "3.0.15.3";
	
	Если ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УТиВсК") ИЛИ ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеТорговлей_CRM_2") Тогда
		Описание.ТребуемыеПодсистемы.Добавить("УправлениеТорговлей");
	КонецЕсли;
	
	// +CRM Модуль
	// подразумеваем что если имя "типовое", то это Модуль CRM
	//Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Если ОбновлениеИнформационнойБазы.ВерсияИБ(Описание.Имя) = "0.0.0.0"
		И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя) <> "0.0.0.0" Тогда
		ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(Описание.Имя, "0.0.0.0", Ложь);
			
		Если CRM_ЛицензированиеСервер.ЭтоТиповаяКонфигурация() Тогда
			
			Если ВРег(Метаданные.Имя) = ВРег("УправлениеТорговлей") Тогда
				Константы.CRM_ОсновнойВариантПоставки.Установить(Перечисления.CRM_ВариантыПоставки.ПРОФ);
			Иначе
				Константы.CRM_ОсновнойВариантПоставки.Установить(Перечисления.CRM_ВариантыПоставки.КОРП);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// -CRM Модуль
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.


// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//  
//  Добавляет в список процедуры-обработчики обновления данных ИБ
//  для всех поддерживаемых версий библиотеки или конфигурации.
//  Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПервыйЗапуск";
	
	// Все версии
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьЗначениеКонстантыИспользоватьНапоминанияПользователя";
		Обработчик.Комментарий = НСтр("ru='Устанавливаем константу Использовать Напоминания Пользователя в Ложь';en='Set the constant Use User Account Reminders to False'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПроверитьПВХОбъектыЖурнала";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьОбновляемыеПриПереходеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьДанныеНСИ_Редакции3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкопироватьПериодыПланирования";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьДанныеПоСобытиям";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьДанныеПоПартнерамПортретИКИ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьРеквизитДопУпорядочивания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьВидЭтапаВоронокПродаж";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьОфисУПодразделений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаписатьОбъектыЗадачПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru='Заполняет свойства предопределенных видов контактной информации';en='Fills in properties of predefined types of contact information'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УдалитьИзРегистраОбъектыЭтаповСсылкуНаСобытие";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчисткаСсылкиНаСобытиеИЗаменаДокументаСМСВГруппахУниверсальногоЖурнала";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьПризнакИспользоватьДляОповещенийДляВидовКИEmailРассылки";
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.1.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПеренестиОсновнойПроизводственныйКалендарь";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.1.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьНовыеИзмеренияРегистраПродажи";
	КонецЕсли;
	
	// 3.0.1.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкорретироватьНаименованиеРегЗадания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьТипСобытиеВОбъектах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.РежимВыполнения = "Отложенно";
	КонецЕсли;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаписатьКлиентыКонтакты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьСтароеОповещениеОНовыхЭлектронныхПисьмах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru='Заполняет свойства предопределенных видов контактной информации';en='Fills in properties of predefined types of contact information'");
	
	// 3.0.1.3
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьПараметрыВзаимодействийИзИнтереса";
	Обработчик.Комментарий = НСтр("ru='Обновляет данные взаимодействий Интересов.';en='Updates the data of the Interactions of Lead.'");
	
	// 3.0.1.4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru='Заполняет свойства предопределенных видов контактной информации';en='Fills in properties of predefined types of contact information'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ВключитьИспользованиеВидовКИ";
	Обработчик.Комментарий = НСтр("ru='Устанавливает признак ""Используется"" для предопределенных видов контактной информации';en='Sets the ""Used"" flag for predefined contact types'");
	
	// 3.0.1.5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьКартуЗапроса";
	Обработчик.Комментарий = НСтр("ru='Заполняет новую предопределенную карту маршрута';en='Fills in a new predefined route map'");
	
	// 3.0.1.6
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьРегистр_CRM_СобытияКалендаря";
	Обработчик.Комментарий = НСтр("ru='Перезаполняет поля ""Партнер"" и ""Подразделение"" для АРМ Календарь менеджера';en='Fills in the ""Partner"" and ""Unit"" fields for the Workstation Manager''s calendar'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьСписокУчастниковВДокументах";
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизит  СписокУчастников в документах CRM_КонтрольнаяТочкаПроекта и CRM_Мероприятие';en='Fills the props List of Participants in the documents CRM_Control Point Project and CRM_Meeting'");
	
	// 3.0.2.1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьШаблоныПоказателей";
	Обработчик.Комментарий = НСтр("ru='Заполняет шаблоны ключивых показателей предопределенными данными';en='Fills the key indicator templates with predefined data'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.CRM_СобытияКалендаря.ЗаполнитьВремяОкончанияДляВзаимодействий";
	Обработчик.Комментарий = НСтр("ru='Заполняет в регистре событий для взаимодействий минимальный период 30 минут';en='Fills in the event register for interactions a minimum period of 30 minutes'");
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.2.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПеренестиВзаиморасчетыВРасчеты";
		Обработчик.Комментарий = НСтр("ru='Переносит записи регистра Взаиморасчеты с контрагентами в регистр Расчеты с покупателями';en='Transfers the registry entries Mutual settlements with counterparties in the register Payments with buyers'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.2.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьВидДоговора";
		Обработчик.Комментарий = НСтр("ru='Устанавливает у всех договоров вид договора с покупателем';en='Establishes for all contracts the type of contract with the buyer'");
	КонецЕсли;
	
	// 3.0.2.2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьЗначениеПризнакаИспользуется";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значения свойства Используется в значение Истина у дополнительныйх свойств';en='Sets the property values ​​Used in the value of True for additional properties'");
	
	// 3.0.2.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеДлиныТокенов";
	Обработчик.Комментарий = НСтр("ru='Обновление токенов Google';en='Updating Google tokens'");
	
	// 3.0.2.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьКартуМаршрутаПоручение";
	Обработчик.Комментарий = НСтр("ru='Перезаполнение карты маршрута Поручение из макета';en='Route re-enrollment An order from the layout'");
	
	// 3.0.3.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбъектыЭтаповВУсловияЭтапов";
	Обработчик.Комментарий = НСтр("ru='Перенос записей регистра Объекты этапов в Условия этапов';en='Transfer of register entries Phase objects in Stage conditions'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьСостоянияКартИПроцессов";
	Обработчик.Комментарий = НСтр("ru='Устанавливает состояние в Картах маршрута и Процессах';en='Sets the state in Routes Maps and Processes'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Документы.CRM_УстановкаИспользуемыхПоказателей.ПерепровестиУстановкиПоказателейСКратностью";
	Обработчик.Комментарий = НСтр("ru='Перепроведение установок показателей';en='Overhaul of indicator settings'");
	
	// 3.0.3.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьВидОбъектаКартИПроцессов";
	Обработчик.Комментарий = НСтр("ru='Устанавливает вид объекта Интерес в картах маршрутов';en='Sets the view of the object. Lead in route maps.'");
	
	// 3.0.4.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьКонстантуИспользоватьПочтовыйКлиент";
	Обработчик.Комментарий = НСтр("ru='Устанавливает константу ИспользоватьПочтовыйКлиент в Истина';en='Sets the constant UseCustomCustomer to True'");
	
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаменитьБанкиНаКлассификаторБанков";
		Обработчик.Комментарий = НСтр("ru='Заменяет в банковских счетах Банк на Классификатор';en='Replaces bank in the bank accounts with the Classifier'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "РегистрыСведений.УдалитьCRMЗначенияГруппДоступа.ПереместитьДанныеВНовыйРегистр";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.Процедура = "РегистрыСведений.УдалитьГруппыЗначенийДоступа.ПереместитьДанныеВНовыйРегистр";
		Обработчик.РежимВыполнения = "Монопольно";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.Процедура = "РегистрыСведений.УдалитьНаборыЗначенийДоступа.ПереместитьДанныеВНовыйРегистр";
		Обработчик.РежимВыполнения = "Монопольно";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.Процедура = "РегистрыСведений.УдалитьНастройкиВерсионированияОбъектов.ПереместитьДанныеВНовыйРегистр";
		Обработчик.РежимВыполнения = "Монопольно";
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИнициализироватьКонстантуИспользоватьПрочиеВзаимодействия";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьПрисоединенныеФайлыРешений";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьПрисоединенныеФайлыТелемаркетинга";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "БлокировкаРаботыСВнешнимиРесурсами.ОбновитьПараметрыБлокировкиРаботыСВнешнимиРесурсами";
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПредметыПапкиПисем";
		Обработчик.Комментарий = НСтр("ru='Создает записи регистра ПредметыПапкиВзаимодействий для писем, у которых их нет';en='Creates entries in the register. Items Folders of Interactions for letters that do not have them'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЭлектронноеПисьмоВходящееПеренестиРеквизит_Комментарий";
		Обработчик.Комментарий = НСтр("ru = 'Переносит во входящих электронных письмах значение реквизита ""_Комментарий"" в реквизит ""Комментарий"" '");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьЮрФизЛицоПартнеров";
		Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение реквизита ""Юр/Физлицо"" в справочнике ""Партнеры"" '");
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.4.3
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.3";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьЕдиницыИзмеренияПоказателей";
		Обработчик.Комментарий = НСтр("ru='Заполняет справочник ""Единицы измерения показателей"" и сами единицы в показателях';en='Fill in the reference book ""Measuring units of indicators"" and the units themselves in terms of'");
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.4.5
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.5";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьНоменклатурныеГруппы";
		Обработчик.Комментарий = НСтр("ru='Обновляет справочник номенклатурные группы после перехода на иерархию групп и элементов';en='Updates the directory of nomenclature groups after switching to the hierarchy of groups and elements'");
		
		// 3.0.4.6
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.6";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации";
	КонецЕсли;
	
	// 3.0.4.9
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.9";
	Обработчик.РежимВыполнения = "Монопольно";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьНастройкуИмениОтправителяSMS";
	Обработчик.Комментарий = НСтр("ru='Обновляет настройку имени отправителя SMS-сообщений';en=""Updates the configuration of the sender's name of SMS messages""");
	
	// 3.0.4.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.УдалитьУстаревшиеЭлементы";
	Обработчик.Комментарий = НСтр("ru='Пометка на удаление устаревших шаблонов автотекста';en='Removing obsolete AutoText templates'");
	
	// 3.0.4.13
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если НЕ Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
			Обработчик = Обработчики.Добавить();
			Обработчик.Версия = "3.0.4.13";
			Обработчик.РежимВыполнения = "Монопольно";
			Обработчик.Процедура = "Справочники.CRM_КартыМаршрутов.СкорретироватьСКД_В_КартахМаршрутовИПроцессах";
			Обработчик.Комментарий = НСтр("ru='Удаление из СКД, карт маршрутов и процессов несуществующих полей';en='Removing from SKD, maps of routes and processes of nonexistent fields'");
		КонецЕсли;
	КонецЕсли;
	
	// 3.0.4.14
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.14";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru='Создание предопределенных условий срабатывания триггеров';en='Creating predefined trigger conditions'");
	
	// 3.0.4.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкорретироватьНастройкиЭтапов";
	Обработчик.Комментарий = НСтр("ru='Корретирует настройки этапов';en='Corrects the settings for the stages'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.16";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.CRM_РасшифровкиСтатусовПисемEmailРассылки.ОбновитьРасшифровкиСтатусов";
	Обработчик.Комментарий = НСтр("ru='Перезаполнение расшифровки статусов писем Email рассылки';en='Reloading the decoding of email message statuses'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.16";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Перечисления.CRM_СпособыОтправкиРассылок.УстановитьСпособОтправкиРассылокПоУмолчанию";
	Обработчик.Комментарий = НСтр("ru='Устанавливает значение константы ""CRM_СпособОтправкиРассылок""';en='Sets the value of the constant ""CRM_Report Method of Assignments""'");
	
	// 3.0.5.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_РаботаАРМСервер.ПервоначальноеЗаполнениеАРМ";
	Обработчик.Комментарий = НСтр("ru='Заполнение данными новых АРМ';en='Filling of data with new workstations'");
	
	// 3.0.5.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьПредопределенныеДействияТриггеров";
	Обработчик.Комментарий = НСтр("ru='Обновление предопределенных действий триггеров';en='Updating predefined trigger actions'");
	
	// 3.0.5.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьКартуСогласованиеКоммерческогоПредолжения";
	Обработчик.Комментарий = НСтр("ru='Заполняем новую карту Согласование Коммерческого Предолжения';en='Fill in the new map Harmonization of commercial proposal'");
	
	// 3.0.5.5
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.5";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкорретироватьШаблоныПоказателей";
		Обработчик.Комментарий = НСтр("ru='Корретирует шаблоны ключевых показателей';en='Corrects key indicator templates'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.5";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаменаСтатусовВКоммерческомПредложении";
		Обработчик.Комментарий = НСтр("ru='Заполняем реквизит Статус документа КоммерческоеПредложениеКлиенту';en='Fill in the requisite Document status Commercial Proposal to the Customer'");
	КонецЕсли;
	
	// 3.0.5.7
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.7";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИсправитьРазделыДатЗапретаРедактирования";
		Обработчик.Комментарий = НСтр("ru='Заменяет предопределенное значение измерения Раздел в регистре сведений ""Даты запрета изменения данных""';en='Replaces the predefined value of the dimension Section in the data register ""Data prohibition for data changes""'");
	КонецЕсли;	
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.7";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИсправитьРолиИсполнителейЗадач";
		Обработчик.Комментарий = НСтр("ru='Очищает поле Роль исполнителя в задачах, которые уже приняты к исполнению.';en='Clears the role of the artist in tasks that have already been accepted for execution.'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru='Заполняет свойства предопределенных видов контактной информации';en='Fills in properties of predefined types of contact information'");
	
	// 3.0.5.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПереносФайловИзЗадачВБизнесПроцесс";
	Обработчик.Комментарий = НСтр("ru='Переносим присоединенные к задачам БП файлы в бизнес процессы';en='We transfer the files attached to the tasks of the BS into business processes'");
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.5.9
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.11";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьКлючевыеПоказатели";
		Обработчик.Комментарий = НСтр("ru='Обновляет шаблоны ключевых показателей';en='Updates templates for key metrics'");
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.5.12
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.12";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_КлиентыСервер.ЗаполнитьПроверитьПВХОбъектыЖурнала";
		Обработчик.Комментарий = НСтр("ru='Обновляет ПВХ Объекты журнала документов';en='Updates PVC Document Log Objects'");
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.5.13
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.13";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьРасположениеРеквизитовКлиентов";
		Обработчик.Комментарий = НСтр("ru='Устанавливаем расположение стандартных реквизитов';en='Set the location of standard details'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.13";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьПериодАктуальностиПоказателей";
		Обработчик.Комментарий = НСтр("ru='Устанавливаем глубину пересчета значений ключевых показателей';en='Set the depth of recalculation of key indicators'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.13";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПереименоватьПроценты";
		Обработчик.Комментарий = НСтр("ru='Устанавливаем глубину пересчета значений ключевых показателей';en='Set the depth of recalculation of key indicators'");
	КонецЕсли;
	
	// 3.0.5.14
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.14";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИзменитьТипПроцессаУПоручения";
	Обработчик.Комментарий = НСтр("ru='Меняет тип процесса у карты маршрута Поручение на Независимый';en='Changing the process type of the route map'");
	
	// 3.0.5.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =  "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДействияТриггеровРассылкаЗаявкаВосстановление";
	Обработчик.Комментарий = НСтр("ru='Заполняет предопределенные действия триггеров';en='Fills predefined trigger actions'");
	
	// 3.0.5.16
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =  "CRM_РежимФормЗакладкиСервер.ИсключитьФормыИзЗакладок";
	Обработчик.Комментарий = НСтр("ru='Удаляем формы из режима закладок.';en='Remove forms from the bookmark mode.'");
	
	// 3.0.6.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбработатьНаборыДопРеквизитов";
	Обработчик.Комментарий = НСтр("ru='Заполняем новый набор доп. реквизитов';en='Fill in a new set of add. requisites'");
	
	// 3.0.6.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.CRM_СостоянияВоронкиПродаж.ЗарегистрироватьСостоянияВоронкиПродажПриОбновлении";
	Обработчик.Комментарий = НСтр("ru='Первичное заполнение регистра CRM_СостоянияВоронкиПродаж';en='Primary filling of the CRM_Configuration registerVoronsSale'");
	
	// 3.0.6.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.CRM_СостоянияЛидов.ЗаполнениеИсточниковЛидовПриОбновлении";
	Обработчик.Комментарий = НСтр("ru='Заполняем реквизит ИсточникЛидов в учетных записях';en='We fill in the details of the SourceLead in the accounts'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.CRM_СостоянияЛидов.ЗаполнениеСостоянийЛидовПриОбновлении";
	Обработчик.Комментарий = НСтр("ru='Первичное заполнение регистра CRM_СостоянияЛидов';en='Primary filling of the CRM_List Status register'");
	
	// 3.0.6.5
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьма.ОбработкаПереходаНаНовуюСтруктуру";
	Обработчик.Комментарий = НСтр("ru='Обновляем регистр непрочитанных писем';en='Update the register of unread messages'");
	
	// 3.0.6.7
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьКонстантуСинхронизацияДанных";
	Обработчик.Комментарий = НСтр("ru='Настраиваем параметры синхронизации данных';en='Configure the data synchronization settings'");
	
	// 3.0.6.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.УдалитьCRM_ТипыОтношений.УдалениеСправочникаCRMТипыОтношений";
	Обработчик.Комментарий = НСтр("ru='Подготовка к удалению справочника УдалитьCRM_ТипыОтношений';en='Preparing to delete the directory Delete CRM_Type of the Relationships'");
	
	// 3.0.6.11
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьЖурналОтДокументовПланирование";
	Обработчик.Комментарий = НСтр("ru='Удаляет записи из обжего журнала документов';en='Removes entries from the burned document log'");	
	
	// 3.0.6.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИзменитьТипПроцессаУЗапросаНаИзменениеСроков";
	Обработчик.Комментарий = НСтр("ru='Меняет тип процесса у карты маршрута ЗапросНаИзменениеСроков на Независимый';en='Changing the process type of the route map. Requesting the Change of Terms for the Independent'");
	
	// 3.0.7.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьВидыДел";
	
	// 3.0.7.4
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ДобавитьДействияТриггеров";

	// 3.0.7.5
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбработатьНаборыДопРеквизитов";
	Обработчик.Комментарий = НСтр("ru='Заполняем новый набор доп. реквизитов';en='Fill in a new set of add. requisites'");
	
	// 3.0.7.6
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбработатьМероприятия";
	Обработчик.Комментарий = НСтр("ru='Конвертация мероприятий во взаимодействия';en='Converting activities into interactions'");
	
	// 3.0.7.7
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбработатьВзаимодействия";
	Обработчик.Комментарий = НСтр("ru='Обновление списка взаимодействий';en='Updating the list of interactions'");
	
	// 3.0.7.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УбратьМероприятия";
	Обработчик.Комментарий = НСтр("ru='Очистка журнала документов от мероприятий';en='Clearing the Document Journal from Activities'");
	
	// 3.0.8.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьКлючевыеПоказатели";
	Обработчик.Комментарий = НСтр("ru='Обновляет шаблоны ключевых показателей';en='Updates templates for key metrics'");
	
	// 3.0.8.5
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьСоставЖурналаДокументов";
	Обработчик.Комментарий = НСтр("ru='Обновляет состав групп журнала документов';en='Updates the composition of the document journal groups'");
	
	// 3.0.8.5
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьНастройкиОтправкиSMS4B";
	Обработчик.Комментарий = НСтр("ru='Обновление настроек для сервиса SMS4B';en='Update settings for SMS4B service'");
	
	// 3.0.8.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.9";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьНастройкиРабочегоСтола";
	Обработчик.Комментарий = НСтр("ru='Заполняет настройки рабочего стола';en='Fills the desktop settings'");
	
	// 3.0.8.9
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.9";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьИспользованиеЗаметок";
	Обработчик.Комментарий = НСтр("ru='Устанавливает константу Использовать заметки';en='Sets the constant Use notes'");
	
	// 3.0.8.10
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.10";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.CRM_Классификаторы.ВключениеИспользованияТегов";
	Обработчик.Комментарий = НСтр("ru='Включение использования тегов для партнеров';en='Enable tagging for partners'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.10";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.CRM_Классификаторы.ПереносТеговВКлассификаторы";
	
	// 3.0.8.11
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьРегламентныеЗаданияТригеровИУчетныхЗаписей";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УчетныеЗаписиМессенджеров.ЗаполнитьПараметрыДоступаПриОбновлении";
	Обработчик.Комментарий = НСтр("ru='Перезаполняет параметры доступа в учетных записях мессенджеров';en='Refills access parameters in messenger accounts'");
	
	// 3.0.8.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьТриггерЗаявкаПоПисьму";
	Обработчик.Комментарий = НСтр("ru='Обновляет действие триггера';en='Updates the trigger action'");

	// 3.0.8.13
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.13";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьИспользованиеКарточкиКлиента";
	Обработчик.Комментарий = НСтр("ru='Устанавливает константу Использовать карточку клиента';en='Set constant Use customer card'");
	
	// 3.0.9.4
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьТриггерБизнесПроцесс";
	Обработчик.Комментарий = НСтр("ru='Обновляет действие триггера запуска бизнес процесса';en='Updates the trigger action of the business process startup'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УдалитьТриггерАвтоответчикTelegram";
	Обработчик.Комментарий = НСтр("ru='Удаление действия триггера АвтоответчикTelegram';en='Deleting a Trigger Action'");
	
	// 3.0.9.5
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.CRM_ЗапланированныеАктивности.ЗаполнениеДанныхПриОбновлении";
	Обработчик.Комментарий = НСтр("ru='Заполнение регистра ЗапланированныеАктивности';en='Filling the register Planned Activities'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.6";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьИсториюРеквизитов";
	
	
	// 3.0.10.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_СостоянияИнтересов.ОтказОтПредопределенныхЭлементов";
	Обработчик.Комментарий = НСтр("ru='Отказ от предопределенных состояний интереса.';en='Refusal of predefined states of lead.'");
	
	// 3.0.10.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_СостоянияИнтересов.ЗаполнениеНастроекПриПереходе";
	Обработчик.Комментарий = НСтр("ru='Заполнение новых настроек сотояний интереса.';en='Filling out new settings of lead.'");
	
	// 3.0.10.5
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьТриггерыСМСиПочта";
	Обработчик.Комментарий = НСтр("ru = 'Обновляем действия триггеров");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПроставитьБаллыИДатуЗавершенияВоВзаимодействиях";
	
	// 3.0.11.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные";
	Обработчик.Комментарий = НСтр("ru='Перезаполнение шаблонов автотекста';en='Reloading AutoText Templates'");
	
	// 3.0.11.5
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьНастройкиСинхронизацииКалендарейGoogle";
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек синхронизации календарей Google.'");
	
	// 3.0.11.6
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.6";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Добавление новых предопределенных действий триггеров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.6";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Добавление новых предопределенных условий триггеров.'");
	
	// 3.0.11.7
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьВестиИсториюРеквизитовКлиентов";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливаем константу ВестиИсториюРеквизитовКлиентов в Истина.'");
	
	// 3.0.11.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_СостоянияИнтересов.УстановитьИдентификаторыПредопределенных";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливаем идентификаторы для бывших предопределенных элементов.'");
	
	// 3.0.12.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИнициализироватьДатуНачалаРаботыСПрограммой";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация даты начала работы с программой.'");
	
	// 3.0.12.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ВключитьИспользованиеМесенджеровДляFresh";
	Обработчик.Комментарий = НСтр("ru = 'Включение использования Мессенджеров для режима Fresh'");
	
	// 3.0.12.9
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьНастройкиНачальнойСтраницы";
	Обработчик.Комментарий = НСтр("ru = 'Удаление форм с начальной страницы для режима Fresh'");
	
	// 3.0.12.11
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_РаботаАРМСервер.ОчиститьЗаписиБезПользователя";
	Обработчик.Комментарий = НСтр("ru = 'Очистка лишних записей регистра'");
	
	// 3.0.12.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьКонстантуИспользоватьПанельСофтФон";
	Обработчик.Комментарий = НСтр("ru = 'Обновление константы ИспользоватьПанельСофтФон'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановкаПодразделенияПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Установка подразделения пользователям.'");

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.12.14";
		Обработчик.Процедура = "ОчередьЗаданийСлужебныйРазделениеДанных.ОбновитьЗаданияОчередиПоШаблонам";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.МонопольныйРежим = Истина;
	КонецЕсли;
	
	// 3.0.12.25
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.25";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновлениеШаблоновПоказателей";
	Обработчик.Комментарий = НСтр("ru = 'Обновление шаблонов показателей.'");
	
	// 3.0.12.29
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьТриггерыЗаявкаИИнтересПоПисьму";
	Обработчик.Комментарий = НСтр("ru = 'Обновление действий триггеров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.29";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ВосстановлениеНумерацииВиджетов";
	Обработчик.Комментарий = НСтр("ru = 'Восстановление нумерации виджетов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.29";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбрезкаЗначенийПоказателей";
	Обработчик.Комментарий = НСтр("ru = 'Обрезка значений показателей.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.30";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.РасцветкаСостоянийИнтересов";
	Обработчик.Комментарий = НСтр("ru = 'Задаем цвета состояний интересов по умолчанию.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.34";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИспользованиеТиповУслуг";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливаем функциональную опцию Использовать типы услуг.'");
	
	// 3.0.12.35
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.35";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ДобавлениеНовыхПоказателей";
	Обработчик.Комментарий = НСтр("ru = 'Обрезка значений показателей.'");
	
	// 3.0.12.35
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.35";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные";
	Обработчик.Комментарий = НСтр("ru='Перезаполнение шаблонов автотекста';en='Reloading AutoText Templates'");
	
	// 3.0.12.36
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.36";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИнициализироватьДатуНачалаРаботыСПрограммой";
	Обработчик.Комментарий = НСтр("ru = 'Инициализация даты начала работы с программой.'");
	
	// 3.0.12.37
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.37";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Документы.CRM_ЭтапКалендарногоПлана.ПереходНаНовыеРеквизитыДокумента";
	Обработчик.Комментарий = НСтр("ru = 'Перенос данных в новые реквизиты документа ""Задачи и контрольные точки проекта"".'");
	
	// 3.0.12.38
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.38";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПереходНаНовыеРеквизитыПроекта";
	Обработчик.Комментарий = НСтр("ru = 'Перенос данных в новые реквизиты Проекта.'");
	
	// 3.0.12.40
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.40";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ВключитьДопРеквизитыCRM_ЭтапКалендарногоПлана";
	Обработчик.Комментарий = НСтр("ru = 'Добавление механизма доп. реквизитов для задач и контрольных точек проектов'");
	
	// 3.0.12.41
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.41";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПереходНаНовыеРеквизитыCRM_ИсточникиПолученияЛидов";
	Обработчик.Комментарий = НСтр("ru = 'Перенос данных в новые реквизиты Источники получения заявок.'");
	
	// 3.0.12.42
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.42";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ВыполнитьРасчетПоказателей";
	Обработчик.Комментарий = НСтр("ru = 'Расчет ключевых показателей.'");
	
	// 3.0.14.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.ЗаполнитьТЧОбъектыОбработкиПриОбновлении";
	Обработчик.Комментарий = НСтр("ru = 'Обновление механизма триггеров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Добавление новых предопределенных условий триггеров.'");
 	 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных действий триггеров.'");
 	 
	// 3.0.14.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.ОбновитьДанныеПВХОбъектыЖурнала";
	Обработчик.Комментарий = НСтр("ru = 'Переименование не используемых элементов ПВХ.'");
	
	// 3.0.14.6
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.14.6";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_УправлениеДоступом.СоздатьЭлементыСправочникаГруппыДоступа";
		Обработчик.Комментарий = НСтр("ru = 'Обновление групп доступа.'");
	КонецЕсли;
	
	// +СофтФон
	// 3.0.14.7
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "сфпСофтФонПроСервер.ОбновитьРегистрКонтактыТелефонии";
	Обработчик.Комментарий = НСтр("ru = 'Обновление регистра Контакты телефонии.'");
	// -СофтФон

	// 3.0.14.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОтказОтПредопределенныхВидовКИДиалогов";
	Обработчик.Комментарий = НСтр("ru = 'Отказ от предопределенных видов контактной информации ВКонтакте и Viber.'");
	
	// 3.0.14.13
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьРеквизитыДляОбмена";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение служебных реквизитов для обмена с iCRM'");	
	
	// 3.0.15.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Документы.CRM_Интерес.ЗаполнитьНовыеРеквизиты";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых реквизитов Интереса'");	
	
	// 3.0.15.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗадействоватьНовыеФункциональныеОпции";
	Обработчик.Комментарий = НСтр("ru = 'Настройка новых функциональных опций.'");	
	
	// 3.0.15.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновлениеДействийТриггеров";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных действий триггеров.'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьКонстантуНовыйИнтерфейс";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает использование старого интерфейса.'");
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры // ПередОбновлениемИнформационнойБазы()

// Вызывается после завершения обновления данных ИБ.
// В зависимости от тех или иных условий можно отключить штатное открытие формы
// с описанием изменений в новой версии программы при первом входе в нее (после обновления),
// а также выполнить другие действия.
//
// Не рекомендуется выполнять в данной процедуре какую-либо обработку данных.
// Такие процедуры следует оформлять штатными обработчиками обновления, выполняемыми на каждую версию "*".
// 
// Параметры:
//   ПредыдущаяВерсия     - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ВыполненныеОбработчики - Массив - массив структур, описывающих сведения об обновлении каждой
//                                     библиотеки и конфигурации, с ключами:
//       * Подсистема              - Строка - имя библиотеки или конфигурации.
//       * Версия                  - Строка - например, "2.1.3.39". Номер версии библиотеки (конфигурации).
//       * ЭтоОсновнаяКонфигурация - Булево - Истина, если это основная конфигурация, а не библиотека.
//       * Обработчики             - ТаблицаЗначений - все обработчики обновления библиотеки, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ВыполненныеОбработчики  - ДеревоЗначений - выполненные обработчики обновления, библиотеке и номеру версии,
//                                   описание колонок см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ИмяОсновногоСерверногоМодуля - Строка - имя модуля библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ОсновнойСерверныйМодуль      - ОбщийМодуль - общий модуль библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ПредыдущаяВерсия             - Строка - например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//       * ТекуонстантыщаяВерсия        - Строка - например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//   ВыводитьОписаниеОбновлений - Булево - если установить Ложь, то не будет открыта форма
//                                с описанием изменений в новой версии программы. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - признак того, что обновление выполнилось в монопольном режиме.
//   ТекуонстантыщаяВерсия      - Строка - например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//
// Пример:
//  Для обхода выполненных обработчиков обновления:
//  Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
//  	Для Каждого Версия Из ИтерацияОбновления.ВыполненныеОбработчики.Строки Цикл
//  		
//  		Если Версия.Версия = "*" Тогда
//  			// Группа обработчиков, которые выполняются регулярно при каждой смене версии.
//  		Иначе
//  			// Группа обработчиков, которые выполнились для определенной версии.
//  		КонецЕсли;
//  		
//  		Для Каждого Обработчик Из Версия.Строки Цикл
//  			...
//  		КонецЦикла;
//  		
//  	КонецЦикла;
//  КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекуонстантыщаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры // ПослеОбновленияИнформационнойБазы()

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры // ПриПодготовкеМакетаОписанияОбновлений()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры // ПриЗавершенииПереходаСДругойПрограммы()

// Получает версию CRM, которая хранится в информационной базе.
//
// Возвращаемое значение:
//   Строка   - версия.
//
Функция ВерсияCRM() Экспорт
	
	Возврат ОбновлениеИнформационнойБазы.ВерсияИБ("CRM");
	
КонецФункции

// Получить режим обновления данных информационной базы
Функция ПолучитьРежимОбновленияДанных() Экспорт
	Возврат ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыТолькоДляCRM3

// Процедура заполняет предопределенный элемент справочника "Организации".
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПредопределеннуюОрганизацию() Экспорт
	
	СправочникОбъект = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию().ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.Префикс) Тогда
		СправочникОбъект.Префикс = "НФ";
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПредопределеннуюОрганизацию()

// Функция заполняет в ИБ спрвочник "Ставки НДС" и возвращает
// ссылку на ставку НДС 18% для дальнейшего использования.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//  СправочникСсылка	- Ставка НДС
//	
Функция ЗаполнитьСтавкиНДСПервыйЗапуск()
	
	// 10%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "10%";
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.Записать();
	
	// 0%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "0%";
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать();
	
	// Без НДС
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = НСтр("ru='Без НДС';en='Without VAT'");
	СтавкаНДС.НеОблагается = Истина;
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать(); 
	
	Если ТекущаяДатаСеанса() < Дата(2019, 1, 1) Тогда
		// 18%
		СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
		СтавкаНДС.Наименование = "18%";
		СтавкаНДС.Ставка = 18;	
		СтавкаНДС.Записать();
	Иначе
		// 20%
		СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
		СтавкаНДС.Наименование = "20%";
		СтавкаНДС.Ставка = 20;	
		СтавкаНДС.Записать();
	КонецЕсли;
	
	Возврат СтавкаНДС.Ссылка;
	
КонецФункции // ЗаполнитьСтавкиНДСПервыйЗапуск()

// Процедура создает регламентные задания для сегментов.
//
// Параметры:
//	Нет.
//
Процедура СоздатьРегламентныеЗаданияДляСегментов()
	
	// Создает регламентные задания для сегментов партнеров и номенклатуры с типом формирования
	// "Периодически обновлять".
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные",Метаданные.РегламентныеЗадания.ФормированиеСегментов));
	Если МассивЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденноеЗадание = Неопределено;
	
	Для каждого Задание Из МассивЗаданий Цикл
		
		Если Задание.Параметры.Количество() = 0 Тогда
			НайденноеЗадание = Задание;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СегментыНоменклатуры.Ссылка КАК Сегмент,
	|	""СегментыНоменклатуры"" КАК ТипСегмента,
	|	СегментыНоменклатуры.Наименование
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|ГДЕ
	|	(НЕ СегментыНоменклатуры.ЭтоГруппа)
	|	И (НЕ СегментыНоменклатуры.ПометкаУдаления)
	|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять)
	|	И СегментыНоменклатуры.РегламентноеЗадание = &ПустойУникальныйИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СегментыПартнеров.Ссылка,
	|	""СегментыПартнеров"",
	|	СегментыПартнеров.Наименование
	|ИЗ
	|	Справочник.СегментыПартнеров КАК СегментыПартнеров
	|ГДЕ
	|	(НЕ СегментыПартнеров.ЭтоГруппа)
	|	И (НЕ СегментыПартнеров.ПометкаУдаления)
	|	И СегментыПартнеров.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять)
	|	И СегментыПартнеров.РегламентноеЗадание = &ПустойУникальныйИдентификатор";
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСегмента = "СегментыНоменклатуры" Тогда
			
			Наименование =  НСтр("ru = 'Формирование сегмента номенклатуры: '");
			
		ИначеЕсли Выборка.ТипСегмента = "СегментыПартнеров" Тогда
			
			Наименование =  НСтр("ru = 'Формирование сегмента партнеров: '");
			
		КонецЕсли;
		
		НовоеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ФормированиеСегментов);
		НовоеЗадание.Использование = НайденноеЗадание.Использование;
		НовоеЗадание.Наименование = Наименование + СокрЛП(Выборка.Наименование);
		НовоеЗадание.Расписание = НайденноеЗадание.Расписание;
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Выборка.Сегмент);
		НовоеЗадание.Параметры = ПараметрыЗадания;
		НовоеЗадание.Записать();
		
		СегментОбъект = Выборка.Сегмент.ПолучитьОбъект();
		СегментОбъект.РегламентноеЗадание = НовоеЗадание.УникальныйИдентификатор;
		СегментОбъект.ОбменДанными.Загрузка = Истина;
		СегментОбъект.Записать();
		
	КонецЦикла;
	
	Если НайденноеЗадание.Параметры.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Справочники.СегментыНоменклатуры.ПустаяСсылка());
		НайденноеЗадание.Параметры = ПараметрыЗадания;
		НайденноеЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры //  СоздатьРегламентныеЗаданияДляСегментов()

Функция ЗапускатьМастерНастройкиРешения() Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Данные = CRM_ХранилищеНастроек.Загрузить("Запускать_CRM_МастерНастройкиРешения",,, "CRM_МастерНастройкиРешения");
		Возврат (Данные = Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет реквизит "офис" у предопределенного элемента справочника "Подразделения организации"
//
Процедура ЗаполнитьРеквизитОфисУОсновногоПодразделения() 
	
	ОсновнойОфис = Справочники.CRM_ОфисыКомпании.НайтиПоНаименованию(НСтр("ru='Основной офис';en='Main office'"));
	Если НЕ ЗначениеЗаполнено(ОсновнойОфис) Тогда
		// повторно создадим элемент справочника, если этого не удалось сделать ранее
		НовыйОфис = Справочники.CRM_ОфисыКомпании.СоздатьЭлемент();
		НовыйОфис.Наименование	= НСтр("ru='Основной офис';en='Main office'");
		НовыйОфис.CRM_ВремяПоГринвичу_GMT = 3;
		Попытка
			НовыйОфис.Записать();
			ОсновнойОфис = НовыйОфис.Ссылка;
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;		
	
	ПодразделениеОбъект = Справочники.СтруктураПредприятия["ОсновноеПодразделение"].ПолучитьОбъект();
	ПодразделениеОбъект.CRM_Офис = ОсновнойОфис.Ссылка;
	Попытка
		ПодразделениеОбъект.Записать();
	Исключение
	КонецПопытки;
	
Конецпроцедуры  // ЗаполнитьРеквизитОфисУОсновногоПодразделения()

// Процедура заполняет измерения регистра продаж.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьНовыеИзмеренияРегистраПродажи() Экспорт
	
	Выборка = Документы["CRM_СчетНаОплатуПокупателю"].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления["CRM_Продажи"].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Подразделение = Запись.ДокументПродажи.Подразделение;
				Запись.Менеджер = Запись.ДокументПродажи.Ответственный;
				Запись.Проект = Запись.ДокументПродажи.Проект;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНовыеИзмеренияРегистраПродажи()

// Процедура выполняет перенос основного производственного календаря.
//
// Параметры:
//	Нет.
//
Процедура ПеренестиОсновнойПроизводственныйКалендарь() Экспорт
	
	ОсновнойКалендарь = Справочники.Календари.НайтиПоНаименованию("Российская Федерация");
	Если ЗначениеЗаполнено(ОсновнойКалендарь) Тогда
		Константы.ОсновнойКалендарьПредприятия.Установить(ОсновнойКалендарь);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиОсновнойПроизводственныйКалендарь()

Процедура ПеренестиВзаиморасчетыВРасчеты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ВзаиморасчетыСКонтрагентами.Период,
	|	CRM_ВзаиморасчетыСКонтрагентами.Регистратор,
	|	CRM_ВзаиморасчетыСКонтрагентами.НомерСтроки,
	|	CRM_ВзаиморасчетыСКонтрагентами.Активность,
	|	CRM_ВзаиморасчетыСКонтрагентами.ВидДвижения,
	|	CRM_ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	|	CRM_ВзаиморасчетыСКонтрагентами.Партнер КАК Контрагент,
	|	CRM_ВзаиморасчетыСКонтрагентами.Сделка КАК Документ,
	|	CRM_ВзаиморасчетыСКонтрагентами.Сделка КАК Заказ,
	|	CRM_ВзаиморасчетыСКонтрагентами.Сумма КАК Сумма,
	|	CRM_ВзаиморасчетыСКонтрагентами.СуммаВал КАК СуммаВал,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.удалитьCRM_ВзаиморасчетыСКонтрагентами КАК CRM_ВзаиморасчетыСКонтрагентами
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Организация";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		Выборка = ВыборкаОрганизации.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборРегистра = РегистрыНакопления["РасчетыСПокупателями"].СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборРегистра.Прочитать();
			НаборРегистра.Очистить();
			
			Запись = НаборРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(Запись,Выборка);
			
			НаборРегистра.Записать(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидДоговора() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.ПустаяСсылка)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		Договор.ВидДоговора = Перечисления["ВидыДоговоров"].СПокупателем;
		Договор.ОбменДанными.Загрузка = Истина;
		Попытка
		Исключение
			Договор.Записать();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#Область Обновление_3_0_4_3

Процедура ЗаполнитьЕдиницыИзмеренияПоказателей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствияЕдиниц = новый Соответствие;
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка,
	|	КлассификаторЕдиницИзмерения.Код,
	|	КлассификаторЕдиницИзмерения.Наименование,
	|	КлассификаторЕдиницИзмерения.НаименованиеПолное,
	|	КлассификаторЕдиницИзмерения.МеждународноеСокращение
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	НЕ КлассификаторЕдиницИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].Балл Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].Балл, Справочники.CRM_ЕдиницыИзмеренияПоказателей.Балл);
		ИначеЕсли Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].Процент Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].Процент, Справочники.CRM_ЕдиницыИзмеренияПоказателей.Процент);
		ИначеЕсли Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].руб Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].руб, Справочники.CRM_ЕдиницыИзмеренияПоказателей.руб);
		ИначеЕсли Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].ч Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].ч, Справочники.CRM_ЕдиницыИзмеренияПоказателей.ч);
		ИначеЕсли Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].шт Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].шт, Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт);
		Иначе
			
			СпрСсылка = Справочники.CRM_ЕдиницыИзмеренияПоказателей.НайтиПоНаименованию(Выборка.Наименование,Истина);
			
			Если СпрСсылка = Справочники.CRM_ЕдиницыИзмеренияПоказателей.ПустаяСсылка() Тогда
				НовыйЭлемент = Справочники.CRM_ЕдиницыИзмеренияПоказателей.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,Выборка,,"Ссылка");
				НовыйЭлемент.ОбменДанными.Загрузка = Истина;
				НовыйЭлемент.Записать();
				
				СпрСсылка = НовыйЭлемент.Ссылка;
			КонецЕсли;
			
			СоответствияЕдиниц.Вставить(Выборка.Ссылка, СпрСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ШаблоныКлючевыхПоказателей.Ссылка КАК Ссылка,
	|	CRM_ШаблоныКлючевыхПоказателей.удалитьЕдиницаИзмерения КАК удалитьЕдиницаИзмерения
	|ИЗ
	|	Справочник.CRM_ШаблоныКлючевыхПоказателей КАК CRM_ШаблоныКлючевыхПоказателей
	|ГДЕ
	|	НЕ CRM_ШаблоныКлючевыхПоказателей.удалитьЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если СоответствияЕдиниц.Получить(Выборка.удалитьЕдиницаИзмерения) = Неопределено Тогда Продолжить; КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ЕдиницаИзмерения = СоответствияЕдиниц.Получить(Выборка.удалитьЕдиницаИзмерения);
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			СпрОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_4_3

#Область Обновление_3_0_4_5

Функция ОбработатьКоллекциюСтрок(КоллекциюСтрок, ТекущийРодитель = Неопределено)
	
	Для Каждого СтрокаДерева ИЗ КоллекциюСтрок Цикл
		
		Если НЕ СтрокаДерева.Ссылка.ЭтоГруппа И НЕ ТекущийРодитель = Неопределено Тогда
			СпрОбъек						= СтрокаДерева.Ссылка.ПолучитьОбъект();
			СпрОбъек.Родитель				= ТекущийРодитель;
			СпрОбъек.ОбменДанными.Загрузка	= Истина;
			СпрОбъек.Записать();
		ИначеЕсли СтрокаДерева.Ссылка.ЭтоГруппа Тогда
			НоваяГруппа = Справочники["НоменклатурныеГруппы"].СоздатьГруппу();
			НоваяГруппа.Наименование = СтрокаДерева.Ссылка.Наименование;
			Если НЕ ТекущийРодитель = Неопределено Тогда
				НоваяГруппа.Родитель = ТекущийРодитель;
			КонецЕсли;
			// НоваяГруппа.ОбменДанными.Загрузка	= Истина;
			НоваяГруппа.Записать();
			
			ОбработатьКоллекциюСтрок(СтрокаДерева.Строки, НоваяГруппа.Ссылка);
			
			УникальнаяСсылка = СтрокаДерева.Ссылка;
			
			НовыйЭлемент = Справочники["НоменклатурныеГруппы"].СоздатьЭлемент();
			НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
			
			НовыйЭлемент.Код			= СтрокаДерева.Ссылка.Код;
			НовыйЭлемент.Наименование	= СтрокаДерева.Ссылка.Наименование;
			НовыйЭлемент.Родитель		= НоваяГруппа.Ссылка;
			
			СтрокаДерева.Ссылка.ПолучитьОбъект().Удалить();
			
			НовыйЭлемент.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ОбновитьНоменклатурныеГруппы() Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	ДеревоГруппИЭлементов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ОбработатьКоллекциюСтрок(ДеревоГруппИЭлементов.Строки);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_4_5

#КонецОбласти // МетодыТолькоДляCRM3

#Область ПервыйЗапуск

Функция ПервыйЗапускИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.CRM_НеПервыйЗапускИБ.Получить() Тогда
		Возврат Ложь;
	Иначе
		Константы.CRM_НеПервыйЗапускИБ.Установить(Истина);
		Возврат Истина;
	КонецЕсли;	
	
	
КонецФункции // ПервыйЗапускИнформационнойБазы()

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи = ПараметрыПрописиНаРусском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
	ИначеЕсли Ссылка.Предопределенный 
		И ПустаяСтрока(Ссылка.НаименованиеПолное) Тогда
		
		// Это первое обращение к предопределенному элементу.
		СправочникОбъект = Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи = ПараметрыПрописиНаРусском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	// Установим курс и кратность = 1 на 1 января 1980.
	РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
	
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьВалюту()

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт
	
	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';en='The group of the reference manual ""%1"", the code are creat: ""%2"", name: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';en='The element of the reference manual ""%1"", the code are creat: ""%2"", name: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';en='The group of the reference manual ""%1"", the code are process: ""%2"", name: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';en='The element of the reference manual ""%1"", the code are process: ""%2"", name: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;
	
	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru='<без кода>';en='<no code>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);
	
	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1';en='It were not possible to completed action: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьСправочникОбъект()

// Процедура выполняет заполнение реквизита "CRM_ИспользоватьДляОповещений" предопределенных элементов.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений() Экспорт
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.EmailПользователя.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
КонецПроцедуры	// ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений()

// Процедура выполняет заполнение предопределенного элемента "CRM_СайтПартнера".
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьВидКонтактнойИнформацииСайтПартнера() Экспорт
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера.ПолучитьОбъект();
	СправочникОбъект.Тип								= Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	СправочникОбъект.МожноИзменятьСпособРедактирования	= Истина;
	СправочникОбъект.РедактированиеТолькоВДиалоге		= Ложь;
	СправочникОбъект.РеквизитДопУпорядочивания			= 4;
	СправочникОбъект.Записать();
	
КонецПроцедуры // ЗаполнитьВидКонтактнойИнформацииСайтПартнера()

// Процедура заполняет значение ключевого события "День рождения" 
// у контактного лица на основе реквизита ДеньРождения
//
Процедура ЗаполнитьКлючевоеСобытиеДеньРожденияКЛНаОсновеДатыРождения()
	
	ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию(Нстр("ru='День рождения контактного лица';en='Birthday of the contact person'"), Истина);
	Если ЗначениеЗаполнено(ВидСобытия) Тогда
		
		Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
				ВыборкаОбъект 			= Выборка.ПолучитьОбъект();
				НоваяСтрока 			= ВыборкаОбъект.CRM_КлючевыеСобытия.Добавить();
				НоваяСтрока.ВидСобытия 	= ВидСобытия;
				НоваяСтрока.ДатаСобытия = Выборка.ДатаРождения;
				Если Выборка.CRM_НапоминатьОДнеРождения Тогда
					НоваяСтрока.НапоминатьОСобытии = Истина;
				Иначе
					НоваяСтрока.НапоминатьОСобытии = Ложь;
				КонецЕсли;
				ВыборкаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры	

// Процедура заполняет пустую ИБ.
//
// Параметры:
//	Нет.
//
Процедура ПервыйЗапуск() Экспорт
	
	НачатьТранзакцию();
	
	Константы.CRM_ДемонстрационныйРежим.Установить(Ложь);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		// Заполним валюты.
		РУБСсылка = НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		
		// Заполним ставки НДС.
		СтавкаНДС18 = Справочники["СтавкиНДС"].НайтиПоНаименованию("18%");
		Если Не ЗначениеЗаполнено(СтавкаНДС18) Тогда
			СтавкаНДС18 = ЗаполнитьСтавкиНДСПервыйЗапуск();
		КонецЕсли; 
		
		// Заполним организации.
		НашаОрганизацияСсылка = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
		НашаОрганизация = НашаОрганизацияСсылка.ПолучитьОбъект();
		НашаОрганизация.НаименованиеПолное	  = НСтр("ru='ООО ""Наша фирма""';en='Open Company ""Our firm""'");
		НашаОрганизация.Префикс				  = "НФ-";
		НашаОрганизация.ЮрФизЛицо			  = Перечисления.ЮрФизЛицо.ЮрЛицо;
		НашаОрганизация.НДСВключатьВСтоимость = Истина;
		НашаОрганизация.СтавкаНДСПоУмолчанию  = СтавкаНДС18;
		НашаОрганизация.Записать();
		
		// Заполним виды цен.
		ВалютаВКонстанте = Константы.ВалютаУправленческогоУчета.Получить();
		Если НЕ ЗначениеЗаполнено(ВалютаВКонстанте) Тогда
			ВалютаВКонстанте = Справочники.Валюты.НайтиПоКоду("643");
		КонецЕсли;
		// Оптовая.
		ОптоваяСсылка = Справочники.ВидыЦен["Оптовая"];
		Оптовая = ОптоваяСсылка.ПолучитьОбъект();
		Оптовая.ВалютаЦены = ВалютаВКонстанте;
		Оптовая.ЦенаВключаетНДС = Истина;
		Оптовая.ПорядокОкругления = Перечисления["ПорядкиОкругления"].Окр1;
		Оптовая.ОкруглятьВБольшуюСторону = Ложь;
		Оптовая.РассчитываетсяДинамически	= Ложь;
		Оптовая.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
		Оптовая.Записать();
		
		// Учетная.
		УчетнаяСсылка = Справочники.ВидыЦен["Учетная"];
		Учетная = УчетнаяСсылка.ПолучитьОбъект();
		Учетная.ВалютаЦены = ВалютаВКонстанте;
		Учетная.ЦенаВключаетНДС = Истина;
		Учетная.ПорядокОкругления = Перечисления["ПорядкиОкругления"].Окр1;
		Учетная.ОкруглятьВБольшуюСторону = Ложь;
		Учетная.РассчитываетсяДинамически	= Ложь;
		Учетная.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
		Учетная.Записать();
		
		// Заполним константы.
		Константы.ВалютаУправленческогоУчета.Установить(РУБСсылка);
		Константы.ВалютаРегламентированногоУчета.Установить(РУБСсылка);
		// Константы.ИзвлекатьТекстыФайловНаСервере.Установить(истина);
		
		// Заполним наборы свойств.
		ОсновнаяНГСсылка = Справочники["НоменклатурныеГруппы"].ОсновнаяГруппа;
		ОсновнаяНГ = ОсновнаяНГСсылка.ПолучитьОбъект();
		ОсновнаяНГ.Записать();
		
		// Заполним реквизиты предопределенных единиц измерения.
		// Штука.
		ШтСсылка = Справочники["КлассификаторЕдиницИзмерения"].шт;
		ШтОбъект = ШтСсылка.ПолучитьОбъект();
		ШтОбъект.НаименованиеПолное = НСтр("ru='Штука';en='Piece'");
		ШтОбъект.МеждународноеСокращение = "PCE";
		ШтОбъект.Записать();
		
		ЗаполнитьПредопределеннуюОрганизацию();
		
		// Заполним константу ОсновнойКалендарьПредприятия.
		ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		Если ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
			Календарь = Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
			Если ЗначениеЗаполнено(Календарь) Тогда
				Константы.ОсновнойКалендарьПредприятия.Установить(Календарь);
			КонецЕсли;
		КонецЕсли;
		
		// Заполним предопределенный сегмент
		ИмяСпрСегменты = "СегментыПартнеров";
		Справочники[ИмяСпрСегменты].ЗаполнитьПредопределенныйСегмент();
		
		// Создаем регламентные задания для сегментов.
		СоздатьРегламентныеЗаданияДляСегментов();
	КонецЕсли; // только для CRM 3
	
	// Создание групп доступа на основании профилей групп доступа.
	МодульУправлениеДоступом = Неопределено;
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_УНФ_УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("CRM_УНФ_УправлениеДоступом");
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_Модуль_УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_УправлениеДоступом");
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеДоступом");
	КонецЕсли;
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.СоздатьЭлементыСправочникаГруппыДоступа();
	КонецЕсли;
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	// Заполнение констант.
	Константы.сфпКодСтраны.Установить("+7");
	Константы.CRM_НачалоРабочегоДня.Установить(Дата("00010101090000"));
	Константы.CRM_КонецРабочегоДня.Установить(Дата("00010101180000"));
	Константы.CRM_НачалоОбеда.Установить(Дата("00010101130000"));
	Константы.CRM_КонецОбеда.Установить(Дата("00010101140000"));
	Константы.ОтправлятьПисьмаВФорматеHTML.Установить(Истина);
	Если НЕ ЭтоРазделенныйРежимРаботы Тогда
		Константы.ФиксироватьПервичныйИнтерес.Установить(Истина);
		Константы.ИспользоватьКоммерческиеПредложенияКлиентам.Установить(Истина);
		Константы.CRM_ИспользоватьТипыУслуг.Установить(Истина);
		Константы.CRM_ИспользоватьБизнесПроцессы.Установить(Истина);
	КонецЕсли;
	Константы.ИспользоватьПочтовыйКлиент.Установить(Истина);
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	Константы.CRM_ВыполнятьПоискДублейПриЗаписиПартнера.Установить(Истина);
	Константы.CRM_ВестиИсториюРеквизитовКлиентов.Установить(Истина);
	
	РеквизитыПоискаДублейПартнеров = Новый СписокЗначений;
	РеквизитыПоискаДублейПартнеров.Добавить("Наименование;ПОДОБНО","Наименование",Истина);
	РеквизитыПоискаДублейПартнеров.Добавить("НаименованиеПолное;ПОДОБНО","Наименование полное",Истина);
	РеквизитыПоискаДублейПартнеров.Добавить("CRM_ИНН;=","ИНН",Истина);
	
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_Адрес;ПОДОБНО","Адрес");
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_АдресЭлектроннойПочты;ПОДОБНО","Email");
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_Телефон;ПОДОБНО","Телефон");
	
	Константы.CRM_РеквизитыПоискаДублейПартнеров.Установить(Новый ХранилищеЗначения(РеквизитыПоискаДублейПартнеров));
	Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	Константы.ИспользоватьДатуНачалаЗадач.Установить(Истина);
	
	// Заполним константы подсистемы Оповещений.
	Константы.CRM_ИспользоватьНапоминания.Установить(Истина); 
	Константы.CRM_ПериодПроверкиНовыхНапоминаний.Установить(30);
	Константы.CRM_УчетнаяЗаписьОповещений.Установить(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
	Константы.CRM_ПериодОповещенияОПросроченныхСобытиях.Установить(Перечисления.Периодичность.Месяц);
	Константы.CRM_ПериодВыводаНезавершенныхОповещений.Установить(Перечисления.Периодичность.Месяц);
	
	Константы.ИспользоватьПрочиеВзаимодействия.Установить(Истина);
	
	Константы.CRM_ИспользоватьКарточкуКлиента.Установить(Истина);
	
	// Константы.ИспользоватьКоммерческиеПредложенияКлиентам.Установить(Истина);
	// Константы.CRM_ПриПроведениеКоммерческогоПредложенияПредлагатьУтверждениеВарианта.Установить(Истина);
	// Константы.CRM_АвтоматическиУтверждатьЕдинственныйВариантКоммерческогоПредложения.Установить(Истина);
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.Встреча.ПолучитьОбъект();
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы;
	ВидВзаимодействия.Баллы				= 18;			
	ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча;
	ВидВзаимодействия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
	// ВидВзаимодействия.Описание = "Новое событие";
	ВидВзаимодействия.Записать();

	Константы.CRM_ВидВзаимодействияПоУмолчанию.Установить(ВидВзаимодействия.Ссылка);
	
	// Заполним предопределенные элементы справочников.
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если Метаданные.ОбщиеМодули.Найти("ОбновлениеИнформационнойБазыУТ")<>Неопределено Тогда
			ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыУТ").ЗаполнитьСвойстваВидовКонтактнойИнформации();
		КонецЕсли;
	КонецЕсли;
	CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации();
	ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений();
	
	// Заполним ПВХ каналы рекламных воздействий.
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Акция", Истина);
	
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Акция';en='Action'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.МаркетинговыеМероприятия");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Сайт компании", Истина);
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Сайт компании';en='Node of the company'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация клиента", Истина);
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация клиента';en='Recommendation of customer'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация сотрудника", Истина);
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация сотрудника';en='Recommendation of the employee'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация сотрудника клиента", Истина);
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация сотрудника клиента';en='Recommendation of the employee of customer'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	// Заполним справочник цветовые категории.
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Командировка", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='Командировка';en='Business trip'");
		ЭлементСправочника.ЦветПредставление 	= "Зеленый";
		ЭлементСправочника.ЦветИндекс 			= 4;
		ЭлементСправочника.ЦветКрасный 			= 122;
		ЭлементСправочника.ЦветЗеленый 			= 231;
		ЭлементСправочника.ЦветСиний 			= 191;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("График руководителя", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='График руководителя';en='Schedule of the principal'");
		ЭлементСправочника.ЦветПредставление 	= "Красный";
		ЭлементСправочника.ЦветИндекс 			= 0;
		ЭлементСправочника.ЦветКрасный 			= 255;
		ЭлементСправочника.ЦветЗеленый 			= 136;
		ЭлементСправочника.ЦветСиний 			= 124;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Совещание (внутреннее)", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='Совещание (внутреннее)';en='Meeting (internal)'");
		ЭлементСправочника.ЦветПредставление 	= "Лиловый";
		ЭлементСправочника.ЦветИндекс 			= 8;
		ЭлементСправочника.ЦветКрасный 			= 219;
		ЭлементСправочника.ЦветЗеленый 			= 173;
		ЭлементСправочника.ЦветСиний 			= 255;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Встреча (внешняя)", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='Встреча (внешняя)';en='Meeting (exterior)'");
		ЭлементСправочника.ЦветПредставление 	= "Оранжевый";
		ЭлементСправочника.ЦветИндекс 			= 1;
		ЭлементСправочника.ЦветКрасный 			= 255;
		ЭлементСправочника.ЦветЗеленый 			= 184;
		ЭлементСправочника.ЦветСиний 			= 120;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Личные", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='Личные';en='The personal'");
		ЭлементСправочника.ЦветПредставление 	= "Синий";
		ЭлементСправочника.ЦветИндекс 			= 7;
		ЭлементСправочника.ЦветКрасный 			= 164;
		ЭлементСправочника.ЦветЗеленый 			= 189;
		ЭлементСправочника.ЦветСиний 			= 252;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	// Для системной учетной записи электронной почты заполним папки электронных писем по умолчанию.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		СсылкаУЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		ОбъектУЗ = СсылкаУЗ.ПолучитьОбъект();
		ОбъектУЗ.Записать();
	КонецЕсли;
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	УчетнаяЗапись.ПортСервераИсходящейПочты	= 25;
	УчетнаяЗапись.ПортСервераВходящейПочты	= 110;
	УчетнаяЗапись.ВремяОжидания				= 30;
	УчетнаяЗапись.СпособPOP3Аутентификации	= Перечисления.СпособыPOP3Аутентификации.Обычная;
	УчетнаяЗапись.СпособSMTPАутентификации	= Перечисления.СпособыSMTPАутентификации.БезАутентификации;
	УчетнаяЗапись.SMTPАутентификация		= Перечисления.ВариантыSMTPАутентификации.АналогичноPOP3;
	УчетнаяЗапись.Записать();
	
	// Заполним ПВХ CRM_ОбъектыЖурналаДокументов
	CRM_КлиентыСервер.ЗаполнитьПроверитьПВХОбъектыЖурнала();
	
	// Заполним справочник CRM_ГруппыУниверсальногоЖурнала.
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьКонтакты();
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьПродажи();
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьПроцессы();

	
	// Заполнение пользовательских настроек динамических списков по умолчанию.
	CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаЗаполнитьПоУмолчанию();
	
	// Заполнение элементов справочника CRM_СостоянияСобытий.
	Справочники.CRM_СостоянияСобытий.ЗаполнитьЭлементыСправочника();
	
	// Заполнение константы CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.
	Константы.CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.Установить(1);
	
	// Заполнение регистра CRM_ОписаниеРеквизитовМетаданных.
	РегистрыСведений.CRM_ОписаниеРеквизитовМетаданных.ОбновитьЗаписи();
	
	// Видам КИ с типом АдресЭлектроннойПочты включим флаг проверки корректности.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПроверятьКорректность = Истина;
		Попытка
			СправочникОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Заполним шаблон рассылки для анкетирования.
	Справочники.CRM_ШаблоныРассылки.CRM_ЗаполнитьШаблонДляАнкетирования();
	
	// Заполним шаблоны автотекста.
	Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные();
	
	// Заполнение ролей партнеров для предопределенных элементов справочника ВидыСвязейМеждуПартнерами.
	CRM_МетодыМодулейМенеджеровСправочников.CRM_ЗаполнитьРолиПартнеровДляВидовСвязей();
	
	// Заполним реквизиты предопределенных элементов справочника обработчики событий точек маршрута.
	
	// Вложенный бизнес-процесс
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ПриСозданииВложенногоБизнесПроцесса.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ПослеСозданияВложенногоБизнесПроцесса.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВложенныйБизнесПроцессПередСозданиемЗадач.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВложенныйБизнесПроцессПриСозданииЗадач.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	СпрОбъект.Записать();
	
	// Выбор варианта
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВыборВарианта.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта;
	СпрОбъект.Записать();
	
	// Действие
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПриВыполнении.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПослеВыполнения.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПередСозданиемЗадач.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПриСозданииЗадач.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
	СпрОбъект.Записать();
	
	// Завершение
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ЗавершениеПриЗавершении.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Завершение;
	СпрОбъект.Записать();
	
	// Обработка
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.Обработка.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Обработка;
	СпрОбъект.Записать();
	
	// Старт
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПередСтартом.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПриСтарте.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПослеСтарта.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
	СпрОбъект.Записать();
	
	// Условие
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.УсловиеПроверкаУсловия.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Условие;
	СпрОбъект.Записать();
	
	// Обработка
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.Обработка.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Обработка;
	СпрОбъект.Записать();
	
	// Заполним предопределенный БП Поручение, создадим и заполним Продажа, Продажа (несколько направлений деятельности).
	Если НЕ ЭтоРазделенныйРежимРаботы Тогда	
		Для Каждого МакетКарты Из Метаданные.Справочники.CRM_КартыМаршрутов.Макеты Цикл
			
			Если МакетКарты.Имя = "КартаМаршрутаПоУмолчанию" Тогда Продолжить; КонецЕсли;
			
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет(МакетКарты.Имя);
			Если ТипЗнч(ДвоичныеДанные)<>Тип("ДвоичныеДанные") Тогда Продолжить конецЕсли;
			ДвоичныеДанные.Записать(ИмяФайла);
			
			Если МакетКарты.Имя = "Поручение" Тогда
				Если НЕ Справочники.CRM_КартыМаршрутов.Поручение.Наименование = МакетКарты.Синоним Тогда
					ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.Поручение.ПолучитьОбъект();
					ПредопределенныйОбъект.Наименование = МакетКарты.Синоним;
					ПредопределенныйОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
					ПредопределенныйОбъект.Записать();
					
					CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.Поручение, ИмяФайла);
				КонецЕсли;
				
			ИначеЕсли МакетКарты.Имя = "ЗапросНаИзменениеСроков" Тогда
				Если НЕ Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.Наименование = МакетКарты.Синоним Тогда
					ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.ПолучитьОбъект();
					ПредопределенныйОбъект.Наименование = МакетКарты.Синоним;
					ПредопределенныйОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
					ПредопределенныйОбъект.Записать();
				КонецЕсли;
				
				CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков, ИмяФайла);
				
			ИначеЕсли МакетКарты.Имя = "Обращение" Тогда
				Элемент = Неопределено;
				Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("Обращение");
				Если Не ЗначениеЗаполнено(Элемент) Тогда
					
					НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
					НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
					НоваяКарта.ИспользоватьПриПринятииОбращения = Истина;
					НоваяКарта.СостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
					НоваяКарта.Наименование = "Обращение";
					НоваяКарта.Записать();
					
					CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
				КонецЕсли;	
			Иначе
				Элемент = Неопределено;
				Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию(МакетКарты.Синоним);
				Если Не ЗначениеЗаполнено(Элемент) Тогда
					
					НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
					НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
					НоваяКарта.Наименование = МакетКарты.Синоним;
					НоваяКарта.Записать();
					
					CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
					
					СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
					АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
					НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(Новый КомпоновщикНастроекКомпоновкиДанных, АдресСхемыКомпоновкиДанных);
					НоваяКарта.Прочитать();
					НоваяКарта.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
					НоваяКарта.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновки);
					НоваяКарта.Записать();
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	// Иначе
	//	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	//	ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("Поручение");
	//	ДвоичныеДанные.Записать(ИмяФайла);
	//	
	//	ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.Поручение.ПолучитьОбъект();
	//	ПредопределенныйОбъект.Наименование = "Поручение";
	//	ПредопределенныйОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	//	ПредопределенныйОбъект.Записать();
	//	
	//	CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.Поручение, ИмяФайла);

	КонецЕсли;
	// Заполнение реквизита УспешностьЗавершения у предопределенных элементов справочника
	// CRM_ВариантыЗавершенияБизнесПроцесса.
	Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.ЗаполнитьРеквизитУспешностьЗавершения();
	
	// Установим виды точек маршрута.
	Справочники.CRM_ОбработчикиСобытийТочекМаршрута.УстановитьВидТочкиВОбработчиках();
	
	// Заполнение реквизитов предопределенных элементов справочника "CRM_КатегорииРешений".
	Справочники.CRM_КатегорииРешений.ЗаполнитьПредопределенныеКатегорииРешений();
	
	// Объекты НСИ CRM 3.0
	ЗаполнитьДанныеНСИ_Редакции3();
	
	// Заполнение предопределенных данных для работы механизма триггеров.
	Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия();
	Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия();
	
	// Заполнение должностей.
	Справочники.CRM_Должности.СоздатьЭлементыПоУмолчанию();
	
	// Заполнение причин отказа.
	Справочники.CRM_ПричиныОтказаПоИнтересам.СоздатьЭлементыПоУмолчанию();
	
	// Заполнение бизнес-регионов по классификатору.
	ЗаполнитьСправочникБизнесРегионыПоКлассификатору();
	
	// Заполнение шаблонов ключевых показателей
	ЗаполнитьШаблоныПоказателей();
	
	// История реквизитов.
	СтруктураНастройки = Новый Структура("Реквизиты,РеквизитыКонтактногоЛица,РеквизитыИнтереса", Новый Массив(), Новый Массив(), Новый Массив());;
	СтруктураНастройки.РеквизитыИнтереса.Добавить("СостояниеИнтереса");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("ОжидаемаяВыручка");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("Партнер");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("КонтактноеЛицо");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("ПотенциальныйКлиент");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("Организация");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("Ответственный");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("Подразделение");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("ТипУслуги");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("Тема");
	СтруктураНастройки.РеквизитыИнтереса.Добавить("Офис");
	РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.СохранитьНастройку(СтруктураНастройки);
	
	Перечисления.CRM_СпособыОтправкиРассылок.УстановитьСпособОтправкиРассылокПоУмолчанию();
	
	РегистрыСведений.CRM_РасшифровкиСтатусовПисемEmailРассылки.ОбновитьРасшифровкиСтатусов();
	
	ЗаполнитьРасположениеРеквизитовКлиентов();
	
	УстановитьПериодАктуальностиПоказателей();
	
	ПереименоватьПроценты();
	
	ОбработатьВзаимодействия();
	
	Если ЭтоРазделенныйРежимРаботы Тогда
		Константы.CRM_ОсновнойВариантПоставки.Установить(Перечисления.CRM_ВариантыПоставки.СТАРТ);
		Константы.CRM_ИспользоватьИнтеграциюСМессенджерами.Установить(Истина);
	Иначе
		СписокРегЗаданий = Новый СписокЗначений;
		СписокРегЗаданий.Добавить("CRM_ВыполнениеТриггеров");
		СписокРегЗаданий.Добавить("CRM_ОбменДаннымиСMSExchange");
		СписокРегЗаданий.Добавить("CRM_ОжиданиеСобытийМессенджера");
		СписокРегЗаданий.Добавить("CRM_ОтправкаОповещенийПоСМС");
		СписокРегЗаданий.Добавить("CRM_ОтправкаОповещенийПоЭлектроннойПочте");
		СписокРегЗаданий.Добавить("CRM_ОтправкаРассылокЭлектронныхПисем");
		СписокРегЗаданий.Добавить("CRM_СинхронизацияКалендарей");
		СписокРегЗаданий.Добавить("CRM_СтатусыEmailРассылок");
		СписокРегЗаданий.Добавить("CRM_ФормированиеОповещений");
		СписокРегЗаданий.Добавить("CRM_ФормированиеПоздравленийСДнемРождения");
		Для Счетчик = 1 По 10 Цикл
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания[СписокРегЗаданий[Счетчик-1].Значение].ИмяМетода);
			СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
			
			Если СписокЗаданий.Количество() = 0 Тогда
				ПараметрыЗадания = Новый Структура("Использование", Истина);
				ПараметрыЗадания.Вставить("Расписание", РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(Метаданные.РегламентныеЗадания[СписокРегЗаданий[Счетчик-1].Значение], Ложь));
				ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[СписокРегЗаданий[Счетчик-1].Значение]);
				РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
				Продолжить;
			КонецЕсли;
			
			Для Каждого Задание Из СписокЗаданий Цикл
				
				ПараметрыЗадания = Новый Структура("Использование", Задание.Использование);
				ПараметрыЗадания.Вставить("Расписание", Задание.Расписание);
				
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
			КонецЦикла;
			
		КонецЦикла;
		
		ПланыВидовХарактеристик.CRM_Классификаторы.ВключениеИспользованияТегов();
		
	КонецЕсли;
	ОбновитьСоставЖурналаДокументов();
	ЗаполнитьНастройкиРабочегоСтола();
	УстановитьИспользованиеЗаметок();
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И НЕ ЭтоРазделенныйРежимРаботы Тогда
		ПроверкаКонтрагентов.ВключитьВыключитьПроверкуКонтрагентов(Ложь);
	КонецЕсли;
	
	// Заполним служебные реквизиты для обмена с iCRM.
	ЗаполнитьРеквизитыДляОбмена();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПервыйЗапуск()

// Процедура заполняет новые объекты ИБ данными по умолчанию
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеНСИ_Редакции3() Экспорт
	
	// Заполним константу использования тегов.
	Константы.CRM_ИспользоватьТеги.Установить(Истина);
	
	// Заполним справочник "Сегменты рынка".
	Справочники.CRM_СегментыРынка.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Численность сотрудников клиента".
	Справочники.CRM_ЧисленностьСотрудниковКлиента.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Численность рабочих мест клиента".
	Справочники.CRM_ЧисленностьРабочихМестКлиента.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Виды ключевых событий".
	Справочники.CRM_ВидыКлючевыхСобытий.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Важность клиентов".
	Справочники.CRM_ВажностьКлиентов.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним справочник "Состояния интересов".
	Справочники.CRM_СостоянияИнтересов.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним предопределенные элементы справочника "Виды взаимодействий".
	Справочники.CRM_ВидыВзаимодействий.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним предопределенные элементы справочника "Офисы компании".
	Справочники.CRM_ОфисыКомпании.СоздатьЭлементыСправочникаПоУмолчанию();
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// Сразу же после заполнения офисов, заполним реквизит "Офис" у основного подразделения
		ЗаполнитьРеквизитОфисУОсновногоПодразделения();
	КонецЕсли;
	
	// Заполняем у всех контактных лиц элемент "День рождения" ТЧ "Ключевые события". 
	ЗаполнитьКлючевоеСобытиеДеньРожденияКЛНаОсновеДатыРождения();	
	
	// Загружаем всем пользователям базы настройки полей отображения содержания из типового макета.
	CRM_ОбщегоНазначенияСервер.УстановитьВсемПользователямНастройкиОтображенияСодержанияИзМакета();
	
	// Заполним предопределенные ключевые показатели.
	// CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьПредопределенныеКлючевыеПоказатели();
	
	// Заполним предопределенные виджеты.
	Справочники.CRM_Виджеты.ЗаполнитьПредопределенныеВиджеты();
	
	// Доступ к ключевым показателям и представления по умолчанию.
	ЗаполнитьДоступККлючевымПоказателямИПредставления();
	
	// Заполнение справочника CRM_ВоронкиПродаж.
	Справочники.CRM_ВоронкиПродаж.СоздатьЭлементыСправочникаПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеНСИ_Редакции3()

Процедура ЗаполнитьСправочникБизнесРегионыПоКлассификатору()
	
	МакетКлассификатор = Справочники.БизнесРегионы.ПолучитьМакет("CRM_Классификатор");
	
	ВозвратнаяСтруктура = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетКлассификатор.ПолучитьТекст());
	
	ТаблицаРегионов = ВозвратнаяСтруктура.Данные;
	Для Каждого СтрокаТаблицыРегионов Из ТаблицаРегионов Цикл
		
		Платежеспособность = ?(ПустаяСтрока(СтрокаТаблицыРегионов.Solvency), 
							   Перечисления.CRM_Платежеспособность.ПустаяСсылка(),
							   Перечисления.CRM_Платежеспособность[СтрокаТаблицыРегионов.Solvency]);
		
		НовыйЭлемент = Справочники.БизнесРегионы.СоздатьЭлемент();
		НовыйЭлемент.Наименование = СтрокаТаблицыРегионов.Name;
		НовыйЭлемент.CRM_КодПоКлассификатору  = Число(СтрокаТаблицыРегионов.Code);
		НовыйЭлемент.CRM_КодСтраны = СтрокаТаблицыРегионов.CountryCode;
		НовыйЭлемент.CRM_КодГорода = СтрокаТаблицыРегионов.SityCode;
		НовыйЭлемент.CRM_КодКЛАДР = ?(ЗначениеЗаполнено(СтрокаТаблицыРегионов.CLADRCode),Число(Лев(СтрокаТаблицыРегионов.CLADRCode,21)),0);
		НовыйЭлемент.CRM_ЧисленностьНаселения = СтрокаТаблицыРегионов.Population;
		НовыйЭлемент.CRM_Платежеспособность = Платежеспособность;
		НовыйЭлемент.CRM_ВремяПоГринвичу_GMT = СтрокаТаблицыРегионов.TimeZone;
		НовыйЭлемент.Родитель = Справочники.БизнесРегионы.НайтиПоРеквизиту("CRM_КодПоКлассификатору", Число(СтрокаТаблицыРегионов.ParentCode));
		НовыйЭлемент.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВызываемыеПриКаждомОбновлении

// Заполняет ПВХ CRM_ОбъектыЖурналаДокументов
//
Процедура ЗаполнитьПроверитьПВХОбъектыЖурнала(Параметры) Экспорт
	
	CRM_КлиентыСервер.ЗаполнитьПроверитьПВХОбъектыЖурнала();
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_3_0_1_1

// Процедура заполняет, очищает и перезаполняет все необходимые для перехода данные
Процедура ПерезаполнитьОбновляемыеПриПереходеДанные() Экспорт
	
	// Перезаполним справочник CRM_ГруппыУниверсальногоЖурнала.
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьКонтакты(Истина);
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьПродажи(Истина);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// Перенести реквизиты доступа к учетной записи
		Выборка = Справочники.УчетныеЗаписиЭлектроннойПочты.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты = Объект["УдалитьCRM_ИспользоватьSSLSMTP"];
			Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты = Объект["УдалитьCRM_ИспользоватьSSLPOP3"];
			Если НЕ Объект.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
				Объект.ПользовательSMTP = Объект.Пользователь;
				ПарольSMTP = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, ПарольSMTP, "ПарольSMTP");
			КонецЕсли;
			Попытка
				Объект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуДереваПапок(СтрокаДерева, Знач Родитель = Неопределено, СоответствиеПапок)
	
	Если (СтрокаДерева.Уровень() = 0) ИЛИ (НЕ СтрокаДерева.Ссылка = СтрокаДерева.Родитель.Ссылка) Тогда
		
		тПапка = Справочники.ПапкиЭлектронныхПисем.НайтиПоНаименованию(СтрокаДерева.Наименование, Истина, ?(Родитель = Неопределено, Неопределено, Родитель), СтрокаДерева.Владелец); 
		
		Если НЕ ЗначениеЗаполнено(тПапка) Тогда
			НоваяПапка = Справочники.ПапкиЭлектронныхПисем.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НоваяПапка, СтрокаДерева, , "Ссылка,Родитель");
			НоваяПапка.CRM_Вид = СтрокаДерева.Вид;
			НоваяПапка.CRM_ПапкаMSExchange = СтрокаДерева.ПапкаMSExchange;
		Иначе
			НоваяПапка = тПапка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(НоваяПапка, СтрокаДерева, , "Ссылка,Родитель");
			НоваяПапка.CRM_Вид = СтрокаДерева.Вид;
			НоваяПапка.CRM_ПапкаMSExchange = СтрокаДерева.ПапкаMSExchange;
		КонецЕсли;
		
		Если НЕ Родитель = Неопределено Тогда
			НоваяПапка.Родитель = Родитель;
		КонецЕсли;
		
		НоваяПапка.ОбменДанными.Загрузка = Истина;
		НоваяПапка.Записать();
		
		СоответствиеПапок.Вставить(СтрокаДерева.Ссылка, НоваяПапка.Ссылка);
		
		тПапка = НоваяПапка.Ссылка;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			Для Каждого СтрокаСтроки ИЗ СтрокаДерева.Строки Цикл
				ОбработатьСтрокуДереваПапок(СтрокаСтроки, тПапка, СоответствиеПапок);
			КонецЦИкла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет копирование периодов планирования.
//
// Параметры:
//	Нет.
//
Процедура СкопироватьПериодыПланирования() Экспорт
	
	Попытка
		
		Выборка = Справочники.УдалитьCRM_ПериодыПланирования.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ПометкаУдаления Тогда
				НовыйПериод = Справочники.CRM_ПериодыПланирования.СоздатьЭлемент();
				НовыйПериод.Наименование = Выборка.Наименование + " (*)";
				НовыйПериод.ДатаНачала = Выборка.ДатаНачала;
				НовыйПериод.ДатаОкончания = Выборка.ДатаОкончания;
				НовыйПериод.Периодичность = Перечисления.Периодичность[Строка(Выборка.Периодичность)];
				СтарыйПериод = Выборка.ПолучитьОбъект();
				СтарыйПериод.ПометкаУдаления = Истина;
				Попытка
					НовыйПериод.Записать();
					СтарыйПериод.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		// Справочник удален
	КонецПопытки;
	
КонецПроцедуры // СкопироватьПериодыПланирования()

// Процедура очищает данные по событиям.
//
// Параметры:
//	Нет.
//
Процедура ОчиститьДанныеПоСобытиям() Экспорт
	
	// Разрегистрировать документы CRM_Событие в журнале документов.
	ПВХСобытие = ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.НайтиПоНаименованию("Событие");
	Если ПВХСобытие <> Неопределено Тогда
		МассивПомеченныхОбъектов = Новый Массив();
		МассивПомеченныхОбъектов.Добавить(ПВХСобытие);
		Обработки.CRM_РегистрацияОбъектовВУниверсальномЖурналеДокументов.ЗарегистрироватьРазрегистрироватьОбъекты(МассивПомеченныхОбъектов, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ОчиститьДанныеПоСобытиям()

// Процедура заполняет данные партнеров.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеПоПартнерамПортретИКИ() Экспорт
	
	// Заполнение реквизитов партнера CRM_ПроцентЗаполненностиПортрет и CRM_ПроцентЗаполненностиКИ
	// (МодульОбъекта.ПередЗаписью).
	Выборка = Справочники.Партнеры.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				Объект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеПоПартнерамПортретИКИ()

// Процедура заполняет доступ к ключевым показателям.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДоступККлючевымПоказателямИПредставления() Экспорт
	
		
КонецПроцедуры // ЗаполнитьДоступККлючевымПоказателямИПредставления()

// Процедура перезаполняет реквизит упорядочивания.
//
// Параметры:
//	Нет.
//
Процедура ПерезаполнитьРеквизитДопУпорядочивания() Экспорт
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Справочник.Ссылка,
	|	Справочник.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.#ИмяСправочника# КАК Справочник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
	ТипыСправочников = Метаданные.ОпределяемыеТипы.CRM_ОбъектСНастраиваемымПорядком.Тип.Типы();
	Для Каждого ТипСправочника Из ТипыСправочников Цикл
		СправочникСсылка = Новый(ТипСправочника);
		Если Метаданные.Справочники.Найти(СправочникСсылка.Метаданные().Имя) = Неопределено Тогда Продолжить; КонецЕсли;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ИмяСправочника#", СправочникСсылка.Метаданные().Имя);
		Выборка = Запрос.Выполнить().Выбрать();
		ДопНомер = 1;
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.РеквизитДопУпорядочивания = ДопНомер;
			ДопНомер = ДопНомер + 1;
			Попытка
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;	
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры	// ПерезаполнитьРеквизитДопУпорядочивания()

// Процедура заполняет реквизит "ВидЭтапа" у элементов справочника "CRM_ВоронкиПродаж".
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьВидЭтапаВоронокПродаж() Экспорт
	
	Выборка = Справочники.CRM_ВоронкиПродаж.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.Предопределенный Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВидЭтапа) И ЗначениеЗаполнено(Выборка.Родитель) Тогда
				
				ВоронкаОбъект			= Выборка.Ссылка.ПолучитьОбъект();
				ВоронкаОбъект.ВидЭтапа	= Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоЭтапам;
				Попытка
					ВоронкаОбъект.Записать();
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидЭтапаВоронокПродаж()

// Процедура заполняет офис во всех всех подразделениях.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьОфисУПодразделений() Экспорт
	
	ОсновнойОфис = Справочники.CRM_ОфисыКомпании.НайтиПоНаименованию(НСтр("ru='Основной офис';en='Main office'"));
	
	Если ЗначениеЗаполнено(ОсновнойОфис) Тогда
		
		Выборка = Справочники.СтруктураПредприятия.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.CRM_Офис	= ОсновнойОфис;
			СправочникОбъект.CRM_МаксимальноеКоличествоБалловВДень = 48;
			СправочникОбъект.CRM_ПроцентПревышенияКоличестваБаллов = 10;
			Попытка
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОфисУПодразделений()

// Процедура создает записи по задачам в регистре сведений CRM_ЗадачиПользователей
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьОбъектыЗадачПользователей() Экспорт
	
	Выборка = Задачи.ЗадачаИсполнителя.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектЗадачи = Выборка.ПолучитьОбъект();
		Попытка
			ОбъектЗадачи.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьОбъектыЗадачПользователей()

// Процедура удаляет из регистра сведений "Объекты этапов" И "Объекты этапов бизнес-процессов" ссылку на документ "Событие"
//  	а также зачищает записи регистра сведений "Объекты по бизнес-процессам" по ресурсу "ВидОбъекта", имеющих
//  		ссылку на Событие. Затем помечается на удаление сам элемент ПВХ "CRM_ВидыОбъектовБизнесПроцессов"
// 
// Параметры:
//	Нет.
//
Процедура УдалитьИзРегистраОбъектыЭтаповСсылкуНаСобытие() Экспорт
	
	// Проверим наличие в ИБ элемента
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ВидыОбъектовБизнесПроцессов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов КАК CRM_ВидыОбъектовБизнесПроцессов
	|ГДЕ
	|    CRM_ВидыОбъектовБизнесПроцессов.ИмяПредопределенныхДанных = ""Событие""";	 
	
	ЭлементОтсутсвуетВДанных = Запрос.Выполнить().Пустой();
	Если ЭлементОтсутсвуетВДанных Тогда
		Возврат;
	КонецЕсли;		
	
	// сначала зачищаем регистр "CRM_ОбъектыЭтапов" по виду объекта
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	CRM_ОбъектыЭтапов.Объект,
	|	CRM_ОбъектыЭтапов.ТочкаМаршрута,
	|	CRM_ОбъектыЭтапов.ВидОбъекта,
	|	CRM_ОбъектыЭтапов.ЭтапОснования,
	|	CRM_ОбъектыЭтапов.Обязательный
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЭтапов КАК CRM_ОбъектыЭтапов
	|ГДЕ
	|	CRM_ОбъектыЭтапов.ВидОбъекта = &Событие";
	
	Запрос.УстановитьПараметр("Событие", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ОбъектыЭтапов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Результат.Объект);
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(Результат.ТочкаМаршрута);
		НаборЗаписей.Отбор.ВидОбъекта.Установить(Результат.ВидОбъекта);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;		
	
	// теперь зачищаем регистр "CRM_ОбъектыЭтаповБизнесПроцессов" по виду объекта
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	CRM_ОбъектыЭтаповБизнесПроцессов.Объект,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ТочкаМаршрута,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ВидОбъекта,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ЭтапОснования,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.Обязательный
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЭтаповБизнесПроцессов КАК CRM_ОбъектыЭтаповБизнесПроцессов
	|ГДЕ
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ВидОбъекта = &Событие";
	
	Запрос.УстановитьПараметр("Событие", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ОбъектыЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Результат.Объект);
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(Результат.ТочкаМаршрута);
		НаборЗаписей.Отбор.ВидОбъекта.Установить(Результат.ВидОбъекта);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;			
	
	// обнуляем ссылку на ВидОбъекта в регистре CRM_ОбъектыПоБизнесПроцессам
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс,
	|	CRM_ОбъектыПоБизнесПроцессам.Задача,
	|	CRM_ОбъектыПоБизнесПроцессам.ТочкаМаршрута,
	|	CRM_ОбъектыПоБизнесПроцессам.Объект,
	|	CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации,
	|	CRM_ОбъектыПоБизнесПроцессам.ВидОбъекта
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
	|ГДЕ
	|	CRM_ОбъектыПоБизнесПроцессам.ВидОбъекта = &Событие";
	
	Запрос.УстановитьПараметр("Событие", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие);
	
	Результат = Запрос.Выполнить().Выбрать();	
	Пока Результат.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(Результат.БизнесПроцесс);
		НаборЗаписей.Отбор.Задача.Установить(Результат.Задача);
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(Результат.ТочкаМаршрута);
		НаборЗаписей.Отбор.Объект.Установить(Результат.Объект);
		НаборЗаписей.Прочитать();
		Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл
			СтрокаЗаписи.ВидОбъекта = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ПустаяСсылка();
		КонецЦикла;	
		НаборЗаписей.Записать();
	КонецЦикла;	
	
	// Помечаем на удаление предопеределенный элемент ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие
	ВидОбъектаСобытие = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие.ПолучитьОбъект();
	ВидОбъектаСобытие.ОбменДанными.Загрузка = Истина;
	ВидОбъектаСобытие.ИмяПредопределенныхДанных	= "";
	ВидОбъектаСобытие.Записать();
	ВидОбъектаСобытие.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры	

// Процедура удаляет ссылку на событие во всех элементах справочника "CRM_ГруппыУниверсальногоЖурнала",
//  а также добавляет ссылки на Интерес и Взаимодействие в группу журнала "Взаимодействие",
//    а также заменяет ссылку старого документа СМС на новый документ СМС в группах универсального журнала
//
// Параметры:
//	Нет.
//
Процедура ОчисткаСсылкиНаСобытиеИЗаменаДокументаСМСВГруппахУниверсальногоЖурнала() Экспорт 
	
	Выборка		= Справочники.CRM_ГруппыУниверсальногоЖурнала.Выбрать();
	ЭтоСобытие	= CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта("Документ.УдалитьCRM_Событие");
	ДокументСМС = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта("Документ.СообщениеSMS"); 
	Пока Выборка.Следующий() Цикл
		ЗаписыватьВыборку = Ложь;
		ВыборкаОбъект = Выборка.ПолучитьОбъект();			
		КоличествоЭлементов = ВыборкаОбъект.Состав.Количество();
		Сч = 0;
		Пока Сч <= КоличествоЭлементов - 1 Цикл
			СтрокаСостава = ВыборкаОбъект.Состав.Получить(Сч);
			Если СтрокаСостава.Объект = ЭтоСобытие Тогда
				ВыборкаОбъект.Состав.Удалить(СтрокаСостава);
				КоличествоЭлементов = КоличествоЭлементов - 1;
				ЗаписыватьВыборку = Истина;
			ИначеЕсли СтрокаСостава.Объект.Наименование = Нстр("ru='SMS сообщение';en='SMS-message'") Тогда
				СтрокаСостава.Объект = ДокументСМС;
				ЗаписыватьВыборку = Истина;
				Сч = Сч + 1;
			Иначе
				Сч = Сч + 1;
			КонецЕсли;			
		КонецЦикла;
		Если ЗаписыватьВыборку Тогда
			Попытка
				ВыборкаОбъект.Записать();
			Исключение
			КонецПопытки;			
		КонецЕсли;
	КонецЦикла;		
	
	// В группу "Контакты" добавляем ссылку на взаимодействие и интерес, если этих ссылок ещё там нет
	ГруппаКонтакты = Справочники.CRM_ГруппыУниверсальногоЖурнала.Контакты;
	ДобавлятьВзаимодействие = Ложь;
	ДобавлятьИнтерес = Ложь;
	
	// Проверим, есть ли в ТЧ ссылка на взаимодействие
	МассивСтрок = ГруппаКонтакты.Состав.НайтиСтроки(Новый Структура("Объект", CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта("Документ.CRM_Взаимодействие"))); 		
	Если МассивСтрок.Количество() = 0 Тогда
		ДобавлятьВзаимодействие = Истина;
	КонецЕсли;	
	
	// Проверим, есть ли в ТЧ ссылка на интерес	
	МассивСтрок = ГруппаКонтакты.Состав.НайтиСтроки(Новый Структура("Объект", CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта("Документ.CRM_Интерес"))); 		
	Если МассивСтрок.Количество() = 0 Тогда
		ДобавлятьИнтерес = Истина;
	КонецЕсли;
	
	Если ДобавлятьВзаимодействие ИЛИ ДобавлятьИнтерес Тогда
		
		МассивТипов = Новый Массив();
		Если ДобавлятьВзаимодействие Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Взаимодействие"));
		КонецЕсли;			
		Если ДобавлятьВзаимодействие Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
		КонецЕсли;
		
		ГруппаКонтактыОбъект = ГруппаКонтакты.ПолучитьОбъект();
		Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьОбъектПоМассивуТипов(ГруппаКонтактыОбъект, МассивТипов);
		Попытка
			ГруппаКонтактыОбъект.Записать();
		Исключение
		КонецПопытки;			
		
	КонецЕсли;		
	
КонецПроцедуры	

// Процедура снимает пометку "Использовать для оповещений" у всех видов КИ Emailов Контактных лиц и Партнёров-частников
//   а также устанавливает аналогичную пометку у нового Вида "Email для рассылки" у них же
//
// Параметры:
//	Нет.
//
Процедура УстановитьПризнакИспользоватьДляОповещенийДляВидовКИEmailРассылки() Экспорт
	
	УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица,   Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,    Истина,	Ложь, Ложь,	3);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь, Ложь,	5);	
	
	// сначала снимаем флаг у необходимых видах КИ
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК КонтактнаяИнформация
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель В(&МассивРодителей)
	|	И ВидыКонтактнойИнформации.Тип = &ТипКИ
	|	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.CRM_ИспользоватьДляОповещений";
	
	Запрос.УстановитьПараметр("МассивРодителей", МассивРодителей);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектКИ = Выборка.КонтактнаяИнформация.ПолучитьОбъект();
		ОбъектКИ.CRM_ИспользоватьДляОповещений = Ложь;
		Попытка
			ОбъектКИ.Записать();
		Исключение
		КонецПопытки;			
	КонецЦикла;	
	
	// Устанавливаем флаг у новых видов КИ
	ОбъектКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица.ПолучитьОбъект();
	ОбъектКИ.CRM_ИспользоватьДляОповещений 	= Истина;
	ОбъектКИ.ПроверятьКорректность			= Истина;
	Попытка
		ОбъектКИ.Записать();
	Исключение
	КонецПопытки;	
	
	ОбъектКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица.ПолучитьОбъект();
	ОбъектКИ.CRM_ИспользоватьДляОповещений 	= Истина;
	ОбъектКИ.ПроверятьКорректность			= Истина;	
	Попытка
		ОбъектКИ.Записать();
	Исключение
	КонецПопытки;				
	
КонецПроцедуры	

#КонецОбласти // Обновление_3_0_1_1

#Область Обновление_3_0_1_2

// Процедура заполняет реквизит Наименование у регшламентного задания".
//
// Параметры:
//	Нет.
//
Процедура СкорретироватьНаименованиеРегЗадания() Экспорт
	
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийПоСМС);
	РегЗадание.Наименование = Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийПоСМС.Синоним;
	Попытка
		РегЗадание.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры // СкорретироватьНаименованиеРегЗадания()

// Процедура удаляет записи объектов с типом "Событие".
//
// Параметры:
//	Нет.
//
Процедура ОчиститьТипСобытиеВОбъектах() Экспорт
	
	// задачи по исправлению клиентской базы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ЗадачиПоИсправлениюКлиентскойБазы.БизнесПроцесс,
	|	CRM_ЗадачиПоИсправлениюКлиентскойБазы.Исполнитель,
	|	CRM_ЗадачиПоИсправлениюКлиентскойБазы.Партнер
	|ИЗ
	|	РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы КАК CRM_ЗадачиПоИсправлениюКлиентскойБазы
	|ГДЕ
	|	CRM_ЗадачиПоИсправлениюКлиентскойБазы.Партнер ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(ВыборкаДетальныеЗаписи.БизнесПроцесс);
		НаборЗаписей.Отбор.Исполнитель.Установить(ВыборкаДетальныеЗаписи.Исполнитель);
		НаборЗаписей.Отбор.Партнер.Установить(ВыборкаДетальныеЗаписи.Партнер);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// используемые решения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ИспользуемыеРешения.Объект
	|ИЗ
	|	РегистрСведений.CRM_ИспользуемыеРешения КАК CRM_ИспользуемыеРешения
	|ГДЕ
	|	CRM_ИспользуемыеРешения.Объект ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Объект);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// события календаря
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_СобытияКалендаря.ПериодНачало,
	|	CRM_СобытияКалендаря.ПериодОкончание,
	|	CRM_СобытияКалендаря.Пользователь,
	|	CRM_СобытияКалендаря.Объект
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
	|ГДЕ
	|	CRM_СобытияКалендаря.Объект ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодНачало.Установить(ВыборкаДетальныеЗаписи.ПериодНачало);
		НаборЗаписей.Отбор.ПериодОкончание.Установить(ВыборкаДетальныеЗаписи.ПериодОкончание);
		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Объект);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// напоминания
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь,
	|	CRM_Напоминания.Предмет,
	|	CRM_Напоминания.ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.Предмет ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
		НаборЗаписей.Отбор.Предмет.Установить(ВыборкаДетальныеЗаписи.Предмет);
		НаборЗаписей.Отбор.ДатаНачала.Установить(ВыборкаДетальныеЗаписи.ДатаНачала);
		НаборЗаписей.Отбор.ДатаОповещения.Установить(ВыборкаДетальныеЗаписи.ДатаОповещения);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// оповещения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Оповещения.Получатель,
	|	CRM_Оповещения.Предмет,
	|	CRM_Оповещения.ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения,
	|	CRM_Оповещения.Канал
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.Предмет ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Получатель.Установить(ВыборкаДетальныеЗаписи.Получатель);
		НаборЗаписей.Отбор.Предмет.Установить(ВыборкаДетальныеЗаписи.Предмет);
		НаборЗаписей.Отбор.ДатаОповещения.Установить(ВыборкаДетальныеЗаписи.ДатаОповещения);
		НаборЗаписей.Отбор.ВидОповещения.Установить(ВыборкаДетальныеЗаписи.ВидОповещения);
		НаборЗаписей.Отбор.Канал.Установить(ВыборкаДетальныеЗаписи.Канал);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Разрегистрировать документы CRM_Событие в журнале документов.
	ПВХСобытие = ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.НайтиПоНаименованию("Событие");
	Если ПВХСобытие <> Неопределено Тогда
		МассивПомеченныхОбъектов = Новый Массив();
		МассивПомеченныхОбъектов.Добавить(ПВХСобытие);
		Обработки.CRM_РегистрацияОбъектовВУниверсальномЖурналеДокументов.ЗарегистрироватьРазрегистрироватьОбъекты(МассивПомеченныхОбъектов, Ложь);
	КонецЕсли;
	
КонецПроцедуры // СкорретироватьНаименованиеРегЗадания()

// Процедура перезаписывать всех клиентов и контактных лиц для заполнения данных о портрете и контактной информации
//
// Параметры:
//	Нет.
//
Процедура ПерезаписатьКлиентыКонтакты(Параметры) Экспорт
	
	Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать();
	Пока Выборка.Следующий() Цикл
		тОбъект = Выборка.ПолучитьОбъект();
		Попытка
			тОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Выборка = Справочники.Партнеры.Выбрать();
	Пока Выборка.Следующий() Цикл
		тОбъект = Выборка.ПолучитьОбъект();
		Попытка
			тОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ПерезаписатьКлиентыКонтакты()

// Процедура очищает неиспользуемый вариант оповещения
//
// Параметры:
//	Нет.
//
Процедура ОчиститьСтароеОповещениеОНовыхЭлектронныхПисьмах() Экспорт
	
	Выборка = Справочники.Пользователи.Выбрать();
	ВидОповещения = Справочники.CRM_ВидыОповещений.НайтиПоНаименованию(НСтр("ru='Оповещать о новых электронных письмах';en='Notify about new emails'"));
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.CRM_ОповещенияПользовательскиеНастройки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидОповещения.Установить(ВидОповещения);
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Ссылка);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидОповещения.Установить(ВидОповещения);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь,
	|	CRM_Напоминания.Предмет,
	|	CRM_Напоминания.ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.ВидОповещения = &ВидОповещения";
	
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
		НаборЗаписей.Отбор.Предмет.Установить(ВыборкаДетальныеЗаписи.Предмет);
		НаборЗаписей.Отбор.ДатаНачала.Установить(ВыборкаДетальныеЗаписи.ДатаНачала);
		НаборЗаписей.Отбор.ДатаОповещения.Установить(ВыборкаДетальныеЗаписи.ДатаОповещения);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры // ОчиститьСтароеОповещениеОНовыхЭлектронныхПисьмах()

#КонецОбласти // Обновление_3_0_1_2

#Область Обновление_3_0_1_3

// Процедура заполняет реквизит Наименование у регламентного задания".
//
// Параметры:
//	Нет.
//
Процедура ОбновитьПараметрыВзаимодействийИзИнтереса() Экспорт
	
	Выборка = Документы.CRM_Взаимодействие.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			вОбъект = Выборка.Ссылка.ПолучитьОбъект();
			тИнтерес = Выборка.ДокументОснование;
			Если вОбъект.СтатусВзаимодействия <> Справочники.CRM_СостоянияСобытий.Завершено
				ИЛИ вОбъект.СтатусВзаимодействия <> Справочники.CRM_СостоянияСобытий.Отменено Тогда
				вОбъект.Ответственный = тИнтерес.Ответственный;
				вОбъект.Подразделение = тИнтерес.Подразделение;
			КонецЕсли;
			вОбъект.КонтактноеЛицо = тИнтерес.КонтактноеЛицо;
			вОбъект.Организация = тИнтерес.Организация;
			вОбъект.Партнер = тИнтерес.Партнер;
			вОбъект.ПотенциальныйКлиент = тИнтерес.ПотенциальныйКлиент;
			Попытка
				вОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкорретироватьНаименованиеРегЗадания()

#КонецОбласти // Обновление_3_0_1_3

#Область Обновление_3_0_1_4

// Процедура заполняет реквизит "Используется" у видов КИ
//
// Параметры:
//	Нет.
//
Процедура ВключитьИспользованиеВидовКИ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И НЕ ВидыКонтактнойИнформации.Используется";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектКИ = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектКИ.Используется = Истина;
		Попытка
			ОбъектКИ.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ВключитьИспользованиеВидовКИ()

// Процедура заполняет новую предопределенную карту
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьКартуЗапроса() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат;
	КонецЕсли;
	Для Каждого МакетКарты Из Метаданные.Справочники.CRM_КартыМаршрутов.Макеты Цикл
		
		Если МакетКарты.Имя = "ЗапросНаИзменениеСроков" Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет(МакетКарты.Имя);
			Если ТипЗнч(ДвоичныеДанные)<>Тип("ДвоичныеДанные") Тогда Продолжить конецЕсли;
			ДвоичныеДанные.Записать(ИмяФайла);
			
			Если НЕ Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.Наименование = МакетКарты.Синоним Тогда
				ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.ПолучитьОбъект();
				ПредопределенныйОбъект.Наименование = МакетКарты.Синоним;
				ПредопределенныйОбъект.Записать();
			КонецЕсли;
			
			CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков, ИмяФайла);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКартуЗапроса()

#КонецОбласти // Обновление_3_0_1_4

#Область Обновление_3_0_1_6

Процедура ЗаполнитьСписокУчастниковВДокументах(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	удалитьCRM_Мероприятие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.удалитьCRM_Мероприятие КАК удалитьCRM_Мероприятие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удалитьCRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	|		ПО (CRM_МероприятиеСторонниеЛица.Ссылка = удалитьCRM_Мероприятие.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удалитьCRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	|		ПО удалитьCRM_Мероприятие.Ссылка = CRM_МероприятиеСвоиЛица.Ссылка
	|ГДЕ
	|	(НЕ CRM_МероприятиеСторонниеЛица.Ссылка ЕСТЬ NULL 
	|				И (ВЫРАЗИТЬ(удалитьCRM_Мероприятие.СписокКлиентов КАК СТРОКА(10))) = """"
	|			ИЛИ НЕ CRM_МероприятиеСвоиЛица.Ссылка ЕСТЬ NULL 
	|				И (ВЫРАЗИТЬ(удалитьCRM_Мероприятие.СписокУчастников КАК СТРОКА(10))) = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Участники.Ссылка
	|ИЗ
	|	Документ.CRM_ЭтапКалендарногоПлана.Участники КАК Участники
	|ГДЕ
	|	(ВЫРАЗИТЬ(Участники.Ссылка.СписокУчастников КАК СТРОКА(10))) = """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.удалитьCRM_Мероприятие") Тогда
			СписокКлиентов = "";
			СписокУчастников = "";
			Для Каждого Участник Из ДокументОбъект.СторонниеЛица Цикл
				Если ЗначениеЗаполнено(Участник.Партнер) Тогда
					СписокКлиентов = СписокКлиентов + ?(СписокКлиентов = "","","; ") + Участник.Партнер;
				КонецЕсли;
				Если ЗначениеЗаполнено(Участник.КонтактноеЛицо) Тогда
					СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ") + Участник.КонтактноеЛицо;
				КонецЕсли;
			КонецЦикла;
			ДокументОбъект.СписокКлиентов = СписокКлиентов;
			Для Каждого Участник Из ДокументОбъект.СвоиЛица Цикл
				СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ") + Участник.Лицо;
			КонецЦикла;
		Иначе
			СписокУчастников = "";
			Для Каждого Участник Из ДокументОбъект.Участники Цикл
				СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ") + Участник.Пользователь;
			КонецЦикла;
		КонецЕсли;
		ДокументОбъект.СписокУчастников = СписокУчастников;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьРегистр_CRM_СобытияКалендаря(Параметры) Экспорт
	
	ВыборкаДокументов = Документы.удалитьCRM_Мероприятие.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
	ВыборкаДокументов = Документы.CRM_Взаимодействие.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_1_6

#Область Обновление_3_0_2_1

Процедура ЗаполнитьШаблоныПоказателей() Экспорт
	
	Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗаполнитьПредопределенныеПоказатели();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_2_1

#Область Обновление_3_0_2_2

// Устанавливает значения свойства Используется в значение Истина.
//
Процедура УстановитьЗначениеПризнакаИспользуется() Экспорт
	
	УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_2_2

#Область Обновление_3_0_2_3

// Устанавливает значения свойства Используется в значение Истина.
//
Процедура ИзменитьТипыХарактеристик() Экспорт
	
	
	Квалификатор = Новый КвалификаторыСтроки(255);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеСтроки = Новый ОписаниеТипов(Массив, , Квалификатор);
	
	Характеристика = ПланыВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi.ПолучитьОбъект();
	Характеристика.ТипЗначения = ОписаниеСтроки;
	Характеристика.Записать();		
	
	Характеристика = ПланыВидовХарактеристик.CRM_НастройкиПользователей.RefreshTokenGApi.ПолучитьОбъект();
	Характеристика.ТипЗначения = ОписаниеСтроки;
	Характеристика.Записать();
	
КонецПроцедуры

// Процедура обновляет токены Google.
//
Процедура ВыполнитьОбновлениеДлиныТокенов() Экспорт
	// Проверяем текущую длину токена.
	Квалификатор = Новый КвалификаторыСтроки(255);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеСтроки = Новый ОписаниеТипов(Массив, , Квалификатор);
	Если ПланыВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi.ТипЗначения = ОписаниеСтроки Тогда Возврат; КонецЕсли;
	// Обновляем длину токена обновления.
	Характеристика	= ПланыВидовХарактеристик.CRM_НастройкиПользователей.RefreshTokenGApi.ПолучитьОбъект();
	Характеристика.ТипЗначения	= ОписаниеСтроки;
	Попытка
		Характеристика.Записать();
	Исключение
	КонецПопытки;	
	// Обновляем длину токена авторизации.
	Характеристика	= ПланыВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi.ПолучитьОбъект();
	Характеристика.ТипЗначения	= ОписаниеСтроки;
	ХарактеристикаИзменена	= Истина;
	Попытка
		Характеристика.Записать();
	Исключение
		ХарактеристикаИзменена	= Ложь;
	КонецПопытки;	
	Если ХарактеристикаИзменена Тогда
		// Удаляем токены авторизации.
		НаборЗаписей	= РегистрыСведений.CRM_НастройкиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi);
		НаборЗаписей.Прочитать();
		МассивПользователей	= НаборЗаписей.ВыгрузитьКолонку("Пользователь");
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		// Получаем новые токены авторизации.
		Для Каждого ТекПользователь Из МассивПользователей Цикл
			Если ЗначениеЗаполнено(ТекПользователь) Тогда
				СтруктураТокенаАвторизации = ПолучитьКодАвторизации(ТекПользователь);
				Если НЕ (СтруктураТокенаАвторизации = Неопределено) Тогда 
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(СтруктураТокенаАвторизации.access_token, "AccessTokenGApi", ТекПользователь);
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() + Число(СтруктураТокенаАвторизации.TTL), "ВремяЖизниТокенаAPI", ТекПользователь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

// Функция обвновляет токен доступа.
// В дальнейшем токен доступа используется для непосредственного обращения к Calendar API  
//
// Возвращаемое значение:
//  СтруктураТокенов    - Неопределено,Структура - Неопределено возврящается в случае неуспешной попытки получения 
// токена доступа. Структура возвращается при успешной попытке получения токен обновления. Содержит текущий токен
// доступа и его время жизни
// 
Функция ПолучитьКодАвторизации(Пользователь = Неопределено) Экспорт
		
	МакетНастроекКонсоли = РегистрыСведений.CRM_СеансовыеДанныеGoogle.ПолучитьМакет("УдалитьПараметрыПриложенияGoogle");
	Client_id         = МакетНастроекКонсоли.ПолучитьОбласть("Client_id|Значение").ТекущаяОбласть.Текст;
	Client_secret     = МакетНастроекКонсоли.ПолучитьОбласть("Client_secret|Значение").ТекущаяОбласть.Текст;
	Redirect_uri      = МакетНастроекКонсоли.ПолучитьОбласть("Redirect_uri|Значение").ТекущаяОбласть.Текст;
	// в текущем сеансе
	Если Пользователь = Неопределено Тогда
		Refresh_token     = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("RefreshTokenGApi");
	Иначе
		Refresh_token = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "RefreshTokenGApi");
	КонецЕсли;
	СтруктураТокенов = Новый Структура;
	Сервер = "accounts.google.com";
    Ресурс = "/o/oauth2/token";
	КодОтвета = 0;
	
	Если ЗначениеЗаполнено(Refresh_token) Тогда
	    Соединение = Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	    ФайлЗапроса = ПолучитьИмяВременногоФайла();
	    ТекстовыйФайл = Новый ТекстовыйДокумент;
	    ПараметрыЗапроса = "client_id=" + Client_id + "&client_secret=" + Client_secret + "&refresh_token=" + Refresh_token + "&grant_type=refresh_token";
	    ТекстовыйФайл.УстановитьТекст(ПараметрыЗапроса);
	    ТекстовыйФайл.Записать(ФайлЗапроса);
	    ФайлРезультата = ПолучитьИмяВременногоФайла();
	    Заголовки = Новый Соответствие;
	    Заголовки.Вставить("Host","accounts.google.com");
	    Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
		ЗапросHTTP				= Новый HTTPЗапрос;
		ЗапросHTTP.АдресРесурса	= Ресурс;
		ЗапросHTTP.Заголовки	= Заголовки;
		ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);
		Попытка 
			Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
	        КодОтвета = Ответ.КодСостояния;
		Исключение
			СообщениеСОшибкой = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не удалось получить код доступа к Google API по причине: '") + Символы.ПС + СообщениеСОшибкой;
			Сообщение.Сообщить();
		КонецПопытки;
		
		Если КодОтвета = 200 Тогда
			ФайлОтвет = Новый ТекстовыйДокумент();
			ФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
			ТекстОтвета = ФайлОтвет.ПолучитьТекст();
			
			Для н = 1 По СтрЧислоСтрок(ТекстОтвета) Цикл
				ТекСтр = СтрПолучитьСтроку(ТекстОтвета, н);
				Если Найти(ТекСтр, "access_token") > 0 Тогда
					access_token = Сред(ТекСтр, 21, СтрДлина(ТекСтр) - 22);
					СтруктураТокенов.Вставить("access_token", access_token);
				КонецЕсли;
				Если Найти(ТекСтр, "expires_in") > 0 Тогда
					expires_in = Сред(ТекСтр, 18, СтрДлина(ТекСтр) - 18);
					СтруктураТокенов.Вставить("TTL", expires_in);
				КонецЕсли;
			КонецЦикла;
			Возврат СтруктураТокенов;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьКодАвторизации()

// Перезаполнение карты маршрута Поручение из макета.
//
Процедура ПерезаполнитьКартуМаршрутаПоручение() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("Поручение");
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда ДвоичныеДанные.Записать(ИмяФайла); конецЕсли;
	
	CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.Поручение, ИмяФайла);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_2_3

#Область Обновление_3_0_3_1

// Перенос записей регистра Объекты этапов в Условия этапов
//
Процедура ОбъектыЭтаповВУсловияЭтапов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыЭтапов.Объект,
	|	CRM_ОбъектыЭтапов.ТочкаМаршрута,
	|	CRM_ОбъектыЭтапов.ВидОбъекта,
	|	CRM_ОбъектыЭтапов.ЭтапОснования,
	|	CRM_ОбъектыЭтапов.Обязательный,
	|	ЛОЖЬ КАК ЭтоБизнесПроцесс
	|ПОМЕСТИТЬ ВсеЗаписи
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЭтапов КАК CRM_ОбъектыЭтапов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ОбъектыЭтаповБизнесПроцессов.Объект,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ТочкаМаршрута,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ВидОбъекта,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ЭтапОснования,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.Обязательный,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЭтаповБизнесПроцессов КАК CRM_ОбъектыЭтаповБизнесПроцессов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗаписи.Объект КАК Объект,
	|	ВсеЗаписи.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВсеЗаписи.ВидОбъекта КАК ВидОбъекта,
	|	ВсеЗаписи.ЭтапОснования КАК ЭтапОснования,
	|	ВсеЗаписи.Обязательный КАК Обязательный,
	|	ВсеЗаписи.ЭтоБизнесПроцесс КАК ЭтоБизнесПроцесс
	|ИЗ
	|	ВсеЗаписи КАК ВсеЗаписи
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТочкаМаршрута),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидОбъекта),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапОснования),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Обязательный)
	|ПО
	|	ЭтоБизнесПроцесс,
	|	Объект";
	
	ВыборкаПоФлагу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоФлагу.Следующий() Цикл
		
		Если ВыборкаПоФлагу.ЭтоБизнесПроцесс Тогда
			НаборРегистра = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
		Иначе
			НаборРегистра = РегистрыСведений.bpmУсловияЭтапов.СоздатьНаборЗаписей();
		КонецЕсли;
		
		ВыборкаПоОбъектам = ВыборкаПоФлагу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОбъектам.Следующий() Цикл
			НаборРегистра.Отбор.Объект.Установить(ВыборкаПоОбъектам.Объект);
			НаборРегистра.Прочитать();
			НаборРегистра.Очистить();
			
			Выборка = ВыборкаПоОбъектам.Выбрать();
			Пока Выборка.Следующий() Цикл
				Идентификатор = Новый УникальныйИдентификатор();
				
				новаяСтрока = НаборРегистра.Добавить();
				новаяСтрока.Объект			= ВыборкаПоОбъектам.Объект;
				новаяСтрока.ТочкаМаршрута	= Выборка.ТочкаМаршрута;
				новаяСтрока.Идентификатор	= Идентификатор;
				новаяСтрока.Событие			= Перечисления.bpmСобытияЭтапа.ПриЗавершении;
				новаяСтрока.ТипДействия		= Перечисления.bpmТипыДействий.ВводДокумента;
				новаяСтрока.Проверка		= Выборка.Обязательный;
				новаяСтрока.Цель			= Выборка.ВидОбъекта;
			КонецЦикла;
			
			НаборРегистра.Записать();
			НаборРегистра.Отбор.Сбросить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние в Картах маршрута и Процессах
//
Процедура УстановитьСостоянияКартИПроцессов() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("Обращение");
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда ДвоичныеДанные.Записать(ИмяФайла); конецЕсли;
	
	Элемент = Неопределено;
	Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("Обращение");
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		
		НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
		НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
		НоваяКарта.ИспользоватьПриПринятииОбращения = Истина;
		НоваяКарта.СостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
		НоваяКарта.Наименование = "Обращение";
		НоваяКарта.Записать();
		
		CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КартаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если КартаОбъект.Редактируется Тогда
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Запланирован;
		ИначеЕсли КартаОбъект.ПометкаУдаления Тогда
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Отменен;
		Иначе
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Действует;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КартаОбъект.ТипПроцесса) Тогда
			Если Выборка.Ссылка = Справочники.CRM_КартыМаршрутов.Поручение Тогда
				КартаОбъект.ТипПроцесса = перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
			Иначе
				КартаОбъект.ТипПроцесса = перечисления.bpmТипыПроцессов.ПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		КартаОбъект.ОбменДанными.Загрузка = Истина;
		КартаОбъект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Проекты.Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.CRM_ЭтоПроект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если КартаОбъект.ПометкаУдаления Тогда
			ПроцессОбъект.bpmСостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Отменен;
		Иначе
			ПроцессОбъект.bpmСостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Действует;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПроцессОбъект.bpmТипПроцесса) Тогда
			ПроцессОбъект.bpmТипПроцесса = перечисления.bpmТипыПроцессов.ПоУмолчанию;
		КонецЕсли;
		
		ПроцессОбъект.ОбменДанными.Загрузка = Истина;
		ПроцессОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_3_1

#Область Обновление_3_0_3_2

// Устанавливает вид объекта в Картах маршрута и Процессах
//
Процедура УстановитьВидОбъектаКартИПроцессов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КартаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если КартаОбъект.Редактируется Тогда
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Запланирован;
		ИначеЕсли КартаОбъект.ПометкаУдаления Тогда
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Отменен;
		Иначе
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Действует;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КартаОбъект.ТипПроцесса) Тогда
			КартаОбъект.ТипПроцесса = перечисления.bpmТипыПроцессов.ПоУмолчанию;
		КонецЕсли;
		КартаОбъект.удалитьВидОбъекта = Перечисления.bpmВидыОбъектовПроцесса.Интерес;
		КартаОбъект.ОбменДанными.Загрузка = Истина;
		КартаОбъект.Записать();
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_3_2

#Область Обновление_3_0_4_1

// Устанавливает константу ИспользоватьПочтовыйКлиент в Истина
//
Процедура УстановитьКонстантуИспользоватьПочтовыйКлиент() Экспорт
	
	Константы.ИспользоватьПочтовыйКлиент.Установить(Истина);
	
КонецПроцедуры


// Устанавливает константу ИспользоватьПочтовыйКлиент в Истина
//
Процедура ЗаменитьБанкиНаКлассификаторБанков() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.УдалитьБанк КАК УдалитьБанк,
	|	БанковскиеСчета.УдалитьБанкРасчетов КАК УдалитьБанкРасчетов
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	(НЕ БанковскиеСчета.УдалитьБанк = ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
	|			ИЛИ НЕ БанковскиеСчета.УдалитьБанкРасчетов = ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка))");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОбработанныеБанки = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.УдалитьБанк) Тогда
			СчетОбъект.Банк = НайтиСоздатьБанкВКлассификаторе(Выборка.УдалитьБанк, ОбработанныеБанки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.УдалитьБанкРасчетов) Тогда
			СчетОбъект.БанкРасчетов = НайтиСоздатьБанкВКлассификаторе(Выборка.УдалитьБанкРасчетов, ОбработанныеБанки);
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект, Ложь, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьБанкВКлассификаторе(СтарыйБанк, ОбработанныеБанки)
	Банк = Справочники.КлассификаторБанков.НайтиПоКоду(СтарыйБанк.Код);
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		БанкОбъект = Справочники.КлассификаторБанков.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(БанкОбъект, СтарыйБанк,, "Владелец");
		БанкОбъект.Записать();
		Банк = БанкОбъект.Ссылка;
		ОбработанныеБанки.Добавить(Банк);
	КонецЕсли;
	Если ОбработанныеБанки.НайтиПоЗначению(Банк) = Неопределено Тогда
		Если Банк.Город <> СтарыйБанк.Город
			ИЛИ Банк.КоррСчет <> СтарыйБанк.КоррСчет
			ИЛИ Банк.Адрес <> СтарыйБанк.Адрес
			ИЛИ Банк.Телефоны <> СтарыйБанк.Телефоны
			ИЛИ Банк.Наименование <> СтарыйБанк.Наименование Тогда
			
			БанкОбъект = Банк.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(БанкОбъект, СтарыйБанк,, "Владелец");
			БанкОбъект.Записать();
			
		КонецЕсли;	
		ОбработанныеБанки.Добавить(Банк);
	КонецЕсли;
	Возврат Банк;	
КонецФункции

Процедура ИнициализироватьКонстантуИспользоватьПрочиеВзаимодействия() Экспорт
	
	Константы.ИспользоватьПрочиеВзаимодействия.Установить(Истина);
	
КонецПроцедуры

Процедура ОбновитьПрисоединенныеФайлыРешений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСоответствийИменВложенийИдентификаторам = Новый ТаблицаЗначений;
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИмяФайла");
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИдентификаторФайлаДляHTML");
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("Картинка");
	
	ТаблицаСоответствийИменВложенийИдентификаторамОтветы = Новый ТаблицаЗначений;
	ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Колонки.Добавить("ИмяФайла");
	ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Колонки.Добавить("ИдентификаторФайлаДляHTML");
	ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Колонки.Добавить("Картинка");
	
	УдаленныеВложения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_РешенияПрисоединенныеФайлы.Ссылка КАК Файл,
	|	CRM_РешенияПрисоединенныеФайлы.ВладелецФайла КАК Решение,
	|	CRM_РешенияПрисоединенныеФайлы.удалитьCRM_НомерСтроки КАК CRM_НомерСтроки,
	|	ПОДСТРОКА(CRM_РешенияПрисоединенныеФайлы.удалитьCRM_ИдентификаторПочтовогоВложения, 1, 200) КАК удалитьCRM_ИдентификаторПочтовогоВложения,
	|	CRM_РешенияПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК CRM_РешенияПрисоединенныеФайлы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Решение,
	|	CRM_НомерСтроки
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Файл),
	|	СУММА(CRM_НомерСтроки),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ удалитьCRM_ИдентификаторПочтовогоВложения),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИДФайлаЭлектронногоПисьма)
	|ПО
	|	Решение";
	
	ВыборкаРешения = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивРешений = Новый Массив;
	
	Пока ВыборкаРешения.Следующий() Цикл
		
		СтруктураВложений = Новый Структура;
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВыборкаРешения.Решение.ТекстВопросаHTML);
		
		МассивФайловРешения = Новый Массив;
		МассивФайловОтветов = Новый Массив;
		
		Выборка = ВыборкаРешения.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Файл.удалитьCRM_НомерСтроки > 0 Тогда
				МассивФайловОтветов.Добавить(Выборка.Файл);
			Иначе
				МассивФайловРешения.Добавить(Выборка.Файл);
			КонецЕслИ;
		КонецЦикла;
		
		Для каждого ПрисоединенныйФайл Из МассивФайловРешения Цикл
			
			Если ПрисоединенныйФайл.удалитьCRM_ИдентификаторПочтовогоВложения = "" Тогда Продолжить; КонецЕсли;
			
			Для каждого Картинка Из ДокументHTML.Картинки Цикл
				
				АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
				
				Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.удалитьCRM_ИдентификаторПочтовогоВложения) > 0 Тогда
					
					НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
					НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
					Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
					
					СтруктураВложений.Вставить(
					ПрисоединенныйФайл.Наименование,
					Новый Картинка(ПолучитьИзВременногоХранилища(
					РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СтруктураРешения = Новый Структура;
		СтруктураРешения.Вставить("Решение", ВыборкаРешения.Решение);
		СтруктураРешения.Вставить("ТекстВопросаHTML", Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML));
		СтруктураРешения.Вставить("СтруктураВложений", СтруктураВложений);
		СтруктураРешения.Вставить("Ответы", Новый Массив);
		
		Для Каждого Ответ ИЗ ВыборкаРешения.Решение.Ответы Цикл
			
			СтрутураОтвета = Новый Структура;
			
			СтруктураВложений = Новый Структура;
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Ответ.ВариантОтветаHTML);
			
			Для каждого ПрисоединенныйФайл Из МассивФайловОтветов Цикл
				// Если НЕ ПрисоединенныйФайл.CRM_НомерСтроки = Ответ.CRM_НомерСтроки
				Если НЕ ПрисоединенныйФайл.удалитьCRM_НомерСтроки = Ответ.удалитьCRM_НомерСтроки
					ИЛИ НЕ ЗначениеЗаполнено(ПрисоединенныйФайл.удалитьCRM_ИдентификаторПочтовогоВложения) Тогда Продолжить; КонецЕсли;
				
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.удалитьCRM_ИдентификаторПочтовогоВложения) > 0 Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
						СтруктураВложений.Вставить(
						ПрисоединенныйФайл.Наименование,
						Новый Картинка(ПолучитьИзВременногоХранилища(
						РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// СтрутураОтвета.Вставить("CRM_НомерСтроки", Ответ.CRM_НомерСтроки);
			СтрутураОтвета.Вставить("CRM_НомерСтроки", Ответ.удалитьCRM_НомерСтроки);
			СтрутураОтвета.Вставить("ВариантОтветаHTML", Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML));
			СтрутураОтвета.Вставить("СтруктураВложений", СтруктураВложений);
			
			СтруктураРешения.Ответы.Добавить(СтрутураОтвета);
		КонецЦикла;
		
		МассивРешений.Добавить(СтруктураРешения);
	КонецЦикла;
	
	Для Каждого ПараметрыРешения ИЗ МассивРешений Цикл
		
		ТекущийОбъектРешение = ПараметрыРешения.Решение.ПолучитьОбъект();
		
		ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		
		Для каждого Вложение Из ПараметрыРешения.СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПараметрыРешения.ТекстВопросаHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам);
			ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			
		КонецЕсли;
		
		Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
			
			ТекущийОбъектРешение.ТекстВопросаHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			ТекущийОбъектРешение.ТекстВопроса     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъектРешение.ТекстВопросаHTML);
			
		КонецЕсли;
		
		Для Каждого СтрокаТЧ ИЗ ТекущийОбъектРешение.Ответы Цикл
			СтрокаТЧ.ИДСтроки	= СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		КонецЦИкла;
		
		Для Каждого ПараметрыОтвета ИЗ ПараметрыРешения.Ответы Цикл
			
			СтрокаТЧ			= ТекущийОбъектРешение.Ответы.Найти(ПараметрыОтвета.CRM_НомерСтроки,"удалитьCRM_НомерСтроки");
			
			ДокументHTMLТекущегоОтветаПодготовлен = Ложь;
			ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Очистить();
			
			Для каждого Вложение Из ПараметрыОтвета.СтруктураВложений Цикл
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Добавить();
				НоваяСтрока.ИмяФайла = Вложение.Ключ;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Строка(Новый УникальныйИдентификатор)+"_"+СтрокаТЧ.ИДСтроки;
				НоваяСтрока.Картинка = Вложение.Значение;
				
			КонецЦикла;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Количество() > 0 Тогда
				
				ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПараметрыОтвета.ВариантОтветаHTML);
				Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
				ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторамОтветы);
				ДокументHTMLТекущегоОтветаПодготовлен = Истина;
				
			КонецЕсли;
			
			Если ДокументHTMLТекущегоОтветаПодготовлен Тогда
				
				СтрокаТЧ.ВариантОтветаHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
				СтрокаТЧ.ВариантОтвета     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(СтрокаТЧ.ВариантОтветаHTML);
				
				Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторамОтветы Цикл
					НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Вложение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ТекущийОбъектРешение.ОбменДанными.Загрузка = Истина;
		ТекущийОбъектРешение.Записать();
		
		// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
		ТаблицаВложенийКартинокФорматированногоДокумента = ПолучитьВложенияПисьмаСНеПустымИД(ТекущийОбъектРешение.Ссылка);
		Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			УдаленныеВложения.Добавить(Вложение.Ссылка);
		КонецЦикла;
		
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЦикла;
		
		УдаленныеВложения.Очистить();
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, Новый УникальныйИдентификатор());
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			ТекущийОбъектРешение.Ссылка,
			АдресКартинкиВоВременномХранилище,
			ИмяФайлаВложения,
			ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.удалитьCRM_ИдентификаторПочтовогоВложения = "";
				ПрисоединенныйФайлОбъект.удалитьCRM_НомерСтроки = 0;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		НаборРегистра = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Решение.Установить(ТекущийОбъектРешение.Ссылка);
		НаборРегистра.Прочитать();
		Если НаборРегистра.Количество() > 0 Тогда
			Для Каждого СтрокаНабора ИЗ НаборРегистра Цикл
				Если СтрокаНабора.УдалитьОтвет > 0 Тогда
					СтрокаТЧ					= ТекущийОбъектРешение.Ответы.Найти(СтрокаНабора.УдалитьОтвет,"удалитьCRM_НомерСтроки");
					СтрокаНабора.ВыбранныйОтвет	= СтрокаТЧ.ИДСтроки;
				КонецЕсли;
			КонецЦИкла;
			НаборРегистра.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВложенияПисьмаСНеПустымИД(Письмо)
	
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = УправлениеЭлектроннойПочтой.ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
		ВладелецФайлов       = Письмо;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлыПисьма.Ссылка,
	|	ПрисоединенныеФайлыПисьма.Наименование,
	|	ПрисоединенныеФайлыПисьма.Размер,
	|	ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК ПрисоединенныеФайлыПисьма
	|ГДЕ
	|	ПрисоединенныеФайлыПисьма.ВладелецФайла = &ВладелецФайлов
	|	И (НЕ ПрисоединенныеФайлыПисьма.ПометкаУдаления)
	|	И ПОДСТРОКА(ПрисоединенныеФайлыПисьма.удалитьCRM_ИдентификаторПочтовогоВложения,1,200) <> &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("ВладелецФайлов",ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Процедура ЗаполнитьПредметыПапкиПисем(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Взаимодействие,
	|	ЭлектронноеПисьмоИсходящее.УдалитьПредмет КАК Предмет,
	|	ЭлектронноеПисьмоИсходящее.Удалить_Рассмотрено КАК Рассмотрено,
	|	ЭлектронноеПисьмоИсходящее.Удалить_РассмотретьПосле КАК РассмотретьПосле,
	|	ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка КАК ПапкаЭлектронногоПисьма,
	|	ЭлектронноеПисьмоИсходящее.Дата КАК Дата
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|ГДЕ
	|	(ПредметыПапкиВзаимодействий.Предмет ЕСТЬ NULL
	|			ИЛИ ЭлектронноеПисьмоИсходящее.УдалитьПредмет <> ПредметыПапкиВзаимодействий.Предмет
	|				И ЭлектронноеПисьмоИсходящее.УдалитьПредмет <> НЕОПРЕДЕЛЕНО
	|			ИЛИ ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка <> ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
	|				И ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка <> ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)
	|				И ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка <> НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.УдалитьПредмет,
	|	ЭлектронноеПисьмоВходящее.Удалить_Рассмотрено,
	|	ЭлектронноеПисьмоВходящее.Удалить_РассмотретьПосле,
	|	ЭлектронноеПисьмоВходящее.УдалитьCRM_Папка,
	|	ЭлектронноеПисьмоВходящее.Дата
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящее.Ссылка)
	|ГДЕ
	|	(ПредметыПапкиВзаимодействий.Предмет ЕСТЬ NULL
	|			ИЛИ ЭлектронноеПисьмоВходящее.УдалитьПредмет <> ПредметыПапкиВзаимодействий.Предмет
	|				И ЭлектронноеПисьмоВходящее.УдалитьПредмет <> НЕОПРЕДЕЛЕНО
	|			ИЛИ ЭлектронноеПисьмоВходящее.УдалитьCRM_Папка <> ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
	|				И ЭлектронноеПисьмоВходящее.УдалитьCRM_Папка <> ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)
	|				И ЭлектронноеПисьмоВходящее.УдалитьCRM_Папка <> НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	БылиИсправления = Ложь;
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
		Запись.Взаимодействие = Выборка.Взаимодействие;
		Запись.Прочитать();
		Запись.Взаимодействие = Выборка.Взаимодействие;
		Если ЗначениеЗаполнено(Выборка.Предмет) И Запись.Предмет <> Выборка.Предмет Тогда
			Запись.Предмет = Выборка.Предмет;
			БылиИсправления = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ПапкаЭлектронногоПисьма) И Запись.ПапкаЭлектронногоПисьма <> Выборка.ПапкаЭлектронногоПисьма Тогда
			Запись.ПапкаЭлектронногоПисьма = Выборка.ПапкаЭлектронногоПисьма;
			БылиИсправления = Истина;
		КонецЕсли;
		Запись.Записать();
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ БылиИсправления;
	
КонецПроцедуры

Процедура ОбновитьПрисоединенныеФайлыТелемаркетинга() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Ссылка КАК Вложение,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.удалитьCRM_ИдентификаторПочтовогоВложения,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма
	|ПОМЕСТИТЬ Вложения
	|ИЗ
	|	Справочник.CRM_ТелемаркетингПрисоединенныеФайлы КАК CRM_ТелемаркетингПрисоединенныеФайлы
	|ГДЕ
	|	НЕ (ВЫРАЗИТЬ(CRM_ТелемаркетингПрисоединенныеФайлы.удалитьCRM_ИдентификаторПочтовогоВложения КАК СТРОКА(200))) = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вложения.Вложение КАК Вложение,
	|	Вложения.ВладелецФайла КАК ВладелецФайла,
	|	Вложения.удалитьCRM_ИдентификаторПочтовогоВложения,
	|	Вложения.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Вложения КАК Вложения
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Вложение)
	|ПО
	|	ВладелецФайла";
	
	ВыборкаПоВладельцу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВладельцу.Следующий() Цикл
		
		ВладалецОбъект				= ВыборкаПоВладельцу.ВладелецФайла.ПолучитьОбъект();
		ДокументHTML				= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВладалецОбъект.Сценарий);
		
		ВыборкаПоВложениям = ВыборкаПоВладельцу.Выбрать();
		
		Пока ВыборкаПоВложениям.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоВложениям.Вложение.ИДФайлаЭлектронногоПисьма) Тогда
				ВложениеОбъект								= ВыборкаПоВложениям.Вложение.ПолучитьОбъект();
				ВложениеОбъект.ИДФайлаЭлектронногоПисьма	= Новый УникальныйИдентификатор;
				ВложениеОбъект.Наименование					= "_" + СтрЗаменить(ВложениеОбъект.ИДФайлаЭлектронногоПисьма, "-", "_");
				ВложениеОбъект.Расширение					= ВложениеОбъект.Расширение;
				ВложениеОбъект.ОбменДанными.Загрузка		= Истина;
				ВложениеОбъект.Записать();
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если АтрибутИсточникКартинки.ТекстовоеСодержимое = ВложениеОбъект.удалитьCRM_ИдентификаторПочтовогоВложения Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:"+ВложениеОбъект.ИДФайлаЭлектронногоПисьма);
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ВладалецОбъект.Сценарий = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
		ВладалецОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ВладалецОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭлектронноеПисьмоВходящееПеренестиРеквизит_Комментарий(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЭлектронноеПисьмоВходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	НЕ(ЭлектронноеПисьмоВходящее.ПометкаУдаления
	|				ИЛИ (ВЫРАЗИТЬ(ЭлектронноеПисьмоВходящее.Удалить_Комментарий КАК СТРОКА(10))) = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ПустаяСтрока(ПисьмоОбъект.Комментарий) Тогда
			
			ПисьмоОбъект.Комментарий = ПисьмоОбъект.Удалить_Комментарий;
			
		Иначе	
			
			ПисьмоОбъект.Комментарий = ПисьмоОбъект.Комментарий + Символы.ПС + ПисьмоОбъект.Удалить_Комментарий;
			
		КонецЕсли;
		
		ПисьмоОбъект.Удалить_Комментарий = "";
		
		ПисьмоОбъект.Записать();
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (Выборка.Количество() = 0);
	
КонецПроцедуры

Процедура ЗаполнитьЮрФизЛицоПартнеров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Партнеры.Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПартнерОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ПартнерОбъект["удалитьCRM_ВидПартнера"] = Перечисления["удалитьCRM_ВидПартнера"].Компания Тогда
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		ИначеЕсли ПартнерОбъект["удалитьCRM_ВидПартнера"] = Перечисления["удалитьCRM_ВидПартнера"].ЧастноеЛицо Тогда
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		
		ПартнерОбъект.ОбменДанными.Загрузка = Истина;
		ПартнерОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_4_1

#Область Обновление_3_0_4_9

Процедура ОбновитьНастройкуИмениОтправителяSMS() Экспорт
	
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяОтправителяХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ИмяОтправителя");
	ИмяОтправителяКонстанта = Константы.Удалить_SMS4B_ИмяОтправителя.Получить();
	Если ЗначениеЗаполнено(ИмяОтправителяКонстанта) И
		Не ЗначениеЗаполнено(ИмяОтправителяХранилище) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ИмяОтправителяКонстанта, "ИмяОтправителя");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_4_9

#Область Обновление_3_0_4_15

Процедура СкорретироватьНастройкиЭтапов() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка,
	|	ЛОЖЬ КАК ЭтоПроцесс
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	CRM_КартыМаршрутов.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И НЕ CRM_КартыМаршрутов.Редактируется
	|	И НЕ CRM_КартыМаршрутов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проекты.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.bpmТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И НЕ Проекты.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоПроцесс Тогда
			Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.удалитьbpmВидОбъекта) Тогда Продолжить; КонецЕсли;
			
			ПроцессКартаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроцессКартаОбъект.bpmВидОбъектаСтрокой			= "CRM_Интерес";
			ПроцессКартаОбъект.bpmРеквизитОбъектаСтрокой	= "СостояниеИнтереса";
		Иначе
			Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.удалитьВидОбъекта) Тогда Продолжить; КонецЕсли;
			
			ПроцессКартаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроцессКартаОбъект.ВидОбъектаСтрокой		= "CRM_Интерес";
			ПроцессКартаОбъект.РеквизитОбъектаСтрокой	= "СостояниеИнтереса";
		КонецЕсли;
		ПроцессКартаОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ПроцессКартаОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_НастройкиЭтапов.Объект,
	|	CRM_НастройкиЭтапов.Объект.НомерВерсии КАК НомерВерсии,
	|	0 КАК ВидОбъекта
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтапов КАК CRM_НастройкиЭтапов
	|ГДЕ
	|	CRM_НастройкиЭтапов.Объект ССЫЛКА Справочник.CRM_КартыМаршрутов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_НастройкиЭтапов.Объект,
	|	CRM_НастройкиЭтапов.Объект.CRM_КартаМаршрута.НомерВерсии,
	|	1
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтапов КАК CRM_НастройкиЭтапов
	|ГДЕ
	|	CRM_НастройкиЭтапов.Объект ССЫЛКА Справочник.Проекты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект.НомерВерсииКартыМаршрута,
	|	2
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|ГДЕ
	|	НЕ CRM_НастройкиЭтаповБизнесПроцессов.Объект.Завершен
	|	И НЕ CRM_НастройкиЭтаповБизнесПроцессов.Объект.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидОбъекта = 0 Тогда
			Карта		= Выборка.Объект;
			НомерВерсии	= Выборка.НомерВерсии;
			
		ИначеЕсли Выборка.ВидОбъекта = 1 Тогда
			Карта		= Выборка.Объект.CRM_КартаМаршрута;
			НомерВерсии	= Выборка.НомерВерсии;
			
		ИначеЕсли Выборка.ВидОбъекта = 2 Тогда
			Карта		= Выборка.Объект.КартаМаршрута;
			НомерВерсии	= Выборка.НомерВерсии;
			
		КонецЕсли;
		
		Если Выборка.ВидОбъекта = 2 Тогда
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Выборка.Объект);
		Иначе
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Выборка.Объект);
		КонецЕсли;
		
		Добавляли = Ложь;
		НаборЭтапов.Прочитать();
		Если НаборЭтапов.Количество() > 0 Тогда
			ТабНабора = НаборЭтапов.Выгрузить();
			
			ЗапросПоТочкам = Новый Запрос;
			ЗапросПоТочкам.УстановитьПараметр("Владелец",Карта);
			ЗапросПоТочкам.УстановитьПараметр("НомерВерсии",НомерВерсии);
			ЗапросПоТочкам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
			|ГДЕ
			|	CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
			|	И CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Завершение)
			|	И НЕ CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.ПометкаУдаления
			|	И CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Владелец = &Владелец";
			
			ВыборкаПоТочкам = ЗапросПоТочкам.Выполнить().Выбрать();
			Пока ВыборкаПоТочкам.Следующий() Цикл
				Если ТабНабора.Найти(ВыборкаПоТочкам.Ссылка, "ТочкаМаршрута") = Неопределено Тогда
					НоваяСтрока = ТабНабора.Добавить();
					НоваяСтрока.Объект			= Выборка.Объект;
					НоваяСтрока.ТочкаМаршрута	= ВыборкаПоТочкам.Ссылка;
					НоваяСтрока.Используется	= Истина;
					Добавляли = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Добавляли Тогда
				НаборЭтапов.Загрузить(ТабНабора);
				Попытка
					НаборЭтапов.записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_4_15

#Область Обновление_3_0_5_2

Процедура ОбновитьПредопределенныеДействияТриггеров() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ЗапретитьРедактированиеДокументаКоммерческоеПредложение.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ЗапретитьРедактированиеКП"));
	ОбработкаТриггера.НазваниеОбработки = "ЗапретитьРедактированиеДокументаКоммерческоеПредложение";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
		
КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_2

#Область Обновление_3_0_5_3

Процедура ЗаполнитьКартуСогласованиеКоммерческогоПредолжения() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат;
	КонецЕсли;
	МакетКарты = Метаданные.Справочники.CRM_КартыМаршрутов.Макеты.Найти("СогласованиеКоммерческогоПредолжения");
	
	Если НЕ МакетКарты = Неопределено Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет(МакетКарты.Имя);
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Элемент = Неопределено;
		Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию(МакетКарты.Синоним);
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			
			НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
			НоваяКарта.Наименование = МакетКарты.Синоним;
			НоваяКарта.Записать();
			
			CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_3

#Область Обновление_3_0_5_4

Процедура УстановитьЗначениеКонстантыИспользоватьНапоминанияПользователя(Параметры) Экспорт
	
	Константы.ИспользоватьНапоминанияПользователя.Установить(Ложь);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_4

#Область Обновление_3_0_5_5

Процедура ЗаменаСтатусовВКоммерческомПредложении(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КоммерческоеПредложениеКлиенту.Ссылка,
	|	КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Отменено)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
	|		КОГДА КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Действует)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
	|		КОГДА КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.ПустаяСсылка)
	|	И КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоммерческоеПредложениеКлиенту.Дата УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КПОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КПОбъект.Статус = Выборка.Статус;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КПОбъект, Ложь, Ложь);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (Выборка.Количество() = 0);
	
КонецПроцедуры

Процедура СкорретироватьШаблоныПоказателей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ШаблоныКлючевыхПоказателей.Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныКлючевыхПоказателей КАК CRM_ШаблоныКлючевыхПоказателей
	|ГДЕ
	|	НЕ CRM_ШаблоныКлючевыхПоказателей.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Показатель = Выборка.Ссылка.ПолучитьОбъект();
		СКД = Показатель.ХранилищеСхемыКомпоновкиДанных.Получить();
		
		Если СКД = Неопределено Тогда
			
			Продолжить;		
			
		КонецЕсли;		
		
		ЕстьИзменения = Ложь;
		Для Каждого НаборКоллекции ИЗ СКД.НаборыДанных Цикл
			Если НЕ ТипЗнч(НаборКоллекции) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда Продолжить; КонецЕсли;
			
			ТекстЗапроса = НаборКоллекции.Запрос;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоммерческоеПредложениеКлиенту.CRM_Состояние","КоммерческоеПредложениеКлиенту.Статус");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоммерческоеПредложениеКлиенту.Состояние","КоммерческоеПредложениеКлиенту.Статус");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоммерческоеПредложениеКлиенту.Ответственный","КоммерческоеПредложениеКлиенту.Менеджер");
			
			Если НЕ НаборКоллекции.Запрос = ТекстЗапроса Тогда
				НаборКоллекции.Запрос = ТекстЗапроса;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Параметр ИЗ СКД.Параметры Цикл
			ОписаниеТиповСтарый = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКоммерческихПредложенийКлиентам");
			ОписаниеТиповНовый = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКоммерческихПредложенийКлиентам");
			Если Параметр.ТипЗначения = ОписаниеТиповСтарый Тогда
				Значение = Параметр.Значение;
				Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.СостоянияКоммерческихПредложенийКлиентам") Тогда
					Если Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.Действует Тогда
						Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
					ИначеЕсли Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование Тогда
						Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
					ИначеЕсли Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.Отменено Тогда
						Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					Для каждого ЭлементСписка из Значение Цикл
						Если ЭлементСписка.Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.Действует Тогда
							ЭлементСписка.Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
						ИначеЕсли ЭлементСписка.Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование Тогда
							ЭлементСписка.Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
						ИначеЕсли ЭлементСписка.Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.Отменено Тогда
							ЭлементСписка.Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Параметр.ТипЗначения = ОписаниеТиповНовый;
				Параметр.Значение = Значение;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			
			Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СКД);
			Показатель.ОбменДанными.Загрузка = Истина;
			Показатель.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_5

#Область Обновление_3_0_5_5

Процедура ИсправитьРазделыДатЗапретаРедактирования() Экспорт
	
	СтарыйРаздел_CRM_Документы = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.НайтиПоНаименованию(НСтр("ru='Старые документы (CRM, не используется)';en='Old documents (CRM, not used)'"));
	
	НовыйРаздел_CRM_Документы = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.НайтиПоНаименованию(НСтр("ru='Документы CRM';en='CRM Documents'"));
	
	Если НЕ (СтарыйРаздел_CRM_Документы = Неопределено Или НовыйРаздел_CRM_Документы = Неопределено) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ДатыЗапретаИзменения.Раздел,
		|	ДатыЗапретаИзменения.Объект,
		|	ДатыЗапретаИзменения.Пользователь
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	ДатыЗапретаИзменения.Раздел = &Раздел";
		
		Запрос.УстановитьПараметр("Раздел", СтарыйРаздел_CRM_Документы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписиРегистра = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, Выборка);
			
			МенеджерЗаписиРегистра.Прочитать();
			
			Если МенеджерЗаписиРегистра.Выбран() Тогда
				
				МенеджерЗаписиРегистра.Раздел = НовыйРаздел_CRM_Документы;
				
				МенеджерЗаписиРегистра.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // ИсправитьРазделыДатЗапретаРедактирования() Экспорт

Процедура ИсправитьРолиИсполнителейЗадач() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ссылка.ПринятаКИсполнению Тогда Продолжить КонецЕсли;
		ОбъектЗадача = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗадача.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
		ОбъектЗадача.ОбменДанными.Загрузка = Истина;
		ОбъектЗадача.Записать();
	КонецЦикла;
	
КонецПроцедуры // ИсправитьРазделыДатЗапретаРедактирования() Экспорт

#КонецОбласти // Обновление_3_0_5_5

#Область Обновление_3_0_5_8

Процедура ПереносФайловИзЗадачВБизнесПроцесс(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	Справочник.ЗадачаИсполнителяПрисоединенныеФайлы КАК ЗадачаИсполнителяПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла.CRM_Личная
	|	И НЕ ЗадачаИсполнителяПрисоединенныеФайлы.ПометкаУдаления
	|ИТОГИ ПО
	|	БизнесПроцесс");
	
	ВыборкаБП = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБП.Следующий() Цикл
		ВыборкаФайл = ВыборкаБП.Выбрать();
		Пока ВыборкаФайл.Следующий() Цикл
			Файл = ВыборкаФайл.Ссылка;
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл,, Истина);
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Файл.Автор);
			ПараметрыФайла.Вставить("ВладелецФайлов", ВыборкаБП.БизнесПроцесс);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеФайла.Наименование);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ДанныеФайла.ДатаМодификацииУниверсальная);
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,, Файл.Описание);
			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (ВыборкаБП.Количество() = 0);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_8

#Область Обновление_3_0_5_11

Процедура ОбновитьКлючевыеПоказатели() Экспорт
	
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗабытыеКлиенты.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗабытыеКлиенты");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗабытыеКлиенты");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// ЗагрузкаКалендаря
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗагрузкаКалендаря.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗагрузкаКалендаря");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗагрузкаКалендаря");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// КасанияНаОдногоКлиента
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.КасанияНаОдногоКлиента.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КасанияНаОдногоКлиента");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КасанияНаОдногоКлиента");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// КачествоКлиентскойБазы
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.КачествоКлиентскойБазы.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КачествоКлиентскойБазы");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КачествоКлиентскойБазы");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// ПросроченоВзаимодействий
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПросроченоВзаимодействий.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ПросроченоВзаимодействий");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ПросроченоВзаимодействий");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// Продажи
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.Продажи.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Продажи");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Продажи");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// ПроведениеВстреч
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПроведениеВстреч.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ПроведениеВстреч");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ПроведениеВстреч");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// ТелефонныеЗвонки
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ТелефонныеЗвонки.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТелефонныеЗвонки");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТелефонныеЗвонки");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// ВысланныеКП
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВысланныеКП.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВысланныеКП");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВысланныеКП");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// ВыставленныеСчета
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВыставленныеСчета.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВыставленныеСчета");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВыставленныеСчета");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// ТеплыеКлиенты
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ТеплыеКлиенты.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТеплыеКлиенты");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТеплыеКлиенты");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// Взаимодействия
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.Взаимодействия.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Взаимодействия");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Взаимодействия");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	// СреднийЧек
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.СреднийЧек.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("СреднийЧек");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("СреднийЧек");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_11

#Область Обновление_3_0_5_13

Процедура ЗаполнитьРасположениеРеквизитовКлиентов() Экспорт
	
	НаборЗаписей = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_ОсновнаяОтрасль";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Левая";
	МенеджерЗаписи.ПорядокРасположения = 1;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_СегментРынка";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Правая";
	МенеджерЗаписи.ПорядокРасположения = 1;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_Важность";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Левая";
	МенеджерЗаписи.ПорядокРасположения = 2;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_ЧисленностьСотрудников";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Правая";
	МенеджерЗаписи.ПорядокРасположения = 2;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_СтатусРаботы";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Левая";
	МенеджерЗаписи.ПорядокРасположения = 3;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_ЧисленностьРабочихМест";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Правая";
	МенеджерЗаписи.ПорядокРасположения = 3;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Свойство,
	|	ВложенныйЗапрос.НаборСвойств
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДополнительныеРеквизиты.Свойство КАК Свойство,
	|		ДополнительныеРеквизиты.Ссылка КАК НаборСвойств
	|	ИЗ
	|		Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|	ГДЕ
	|		НЕ ДополнительныеРеквизиты.Ссылка.ЭтоГруппа
	|		И ДополнительныеРеквизиты.Ссылка В ИЕРАРХИИ(&ГруппаНабора)) КАК ВложенныйЗапрос");
	
	Запрос.УстановитьПараметр("ГруппаНабора", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры);
	ТабНаборов = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТабНаборов Цикл
		Если НЕ Строка.НаборСвойств.ПринадлежитЭлементу(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры) И Строка.НаборСвойств <> Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры Тогда Продолжить КонецЕсли;
		Если Найти(Строка.НаборСвойств.Наименование, "не  используется") > 0 Тогда Продолжить конецЕсли;
		Реквизит = Строка.Свойство;
		Если Реквизит.Пустая() Тогда Продолжить КонецЕсли;
		Менеджер = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
		ИмяУникальнаяЧасть = 
		СтрЗаменить(ВРег(Строка(Строка.НаборСвойств.УникальныйИдентификатор())), "-", "x")
		+ "_"
		+ СтрЗаменить(ВРег(Строка(Реквизит.УникальныйИдентификатор())), "-", "x");
		
		Менеджер.ИмяРеквизита =	"ДополнительныйРеквизитЗначение_" + ИмяУникальнаяЧасть;
		Менеджер.ДопРеквизит = Реквизит;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(CRM_РасположениеРеквизитовКлиентов.ПорядокРасположения) КАК ПорядокРасположения
		|ИЗ
		|	РегистрСведений.CRM_РасположениеРеквизитовКлиентов КАК CRM_РасположениеРеквизитовКлиентов
		|ГДЕ
		|	CRM_РасположениеРеквизитовКлиентов.Колонка = &ИмяКолонки";
		Запрос.УстановитьПараметр("ИмяКолонки", "Дополнительно");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПорядокЭлемента = ?(ЗначениеЗаполнено(Выборка.ПорядокРасположения), Выборка.ПорядокРасположения + 1, 1);
		Иначе
			ПорядокЭлемента = 1;
		КонецЕсли;
		
		Менеджер.ПредставлениеРеквизита = Реквизит.Наименование;
		Менеджер.Колонка = "Дополнительно";
		Менеджер.ПорядокРасположения = ПорядокЭлемента;
		Менеджер.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьПериодАктуальностиПоказателей() Экспорт
	
	Константы.CRM_ГлубинаПересчетаПоказателей.Установить(1);
	
КонецПроцедуры

Процедура ПереименоватьПроценты() Экспорт
	
	ЕдиницаПроценты = Справочники.CRM_ЕдиницыИзмеренияПоказателей.Процент.ПолучитьОбъект();
	ЕдиницаПроценты.Наименование = "%";
	ЕдиницаПроценты.Записать();
	
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВысланныеКП.ПолучитьОбъект();
	Показатель.Наименование = "Кол-во выставленных коммерческих предложений";
	Показатель.КраткоеНаименование = "Выставленные КП";
	Показатель.Записать();
КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_13

#Область Обновление_3_0_5_14

Процедура ИзменитьТипПроцессаУПоручения() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат;
	КонецЕсли;
	КартаОбъект = Справочники.CRM_КартыМаршрутов.Поручение.ПолучитьОбъект();
	КартаОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	КартаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_14

#Область Обновление_3_0_5_15

Процедура ЗаполнитьПредопределенныеДействияТриггеровРассылкаЗаявкаВосстановление() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.РассылкаПоСегменту.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерРассылкаПоСегменту"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерРассылкаПоСегменту";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ЗаявкаССайта.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗаявкаССайта"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерЗаявкаССайта";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ВосстановлениеИнтереса.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерВосстановлениеИнтереса"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерВосстановлениеИнтереса";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();


КонецПроцедуры

#КонецОбласти // Обновление_3_0_5_15

#Область Обновление_3_0_6_1

Процедура ОбработатьНаборыДопРеквизитов() Экспорт
	
	НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_ИсточникиПолученияЛидов.ПолучитьОбъект();
	НаборДопРеквизитов.Используется = Истина;
	НаборДопРеквизитов.Записать();

	НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_CRM_Взаимодействие.ПолучитьОбъект();
	НаборДопРеквизитов.Используется = Истина;
	НаборДопРеквизитов.Записать();
КонецПроцедуры

#КонецОбласти // Обновление_3_0_6_1

#Область Обновление_3_0_6_7

Процедура УстановитьКонстантуСинхронизацияДанных() Экспорт
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если Константы.ИспользоватьСинхронизациюДанных.Получить() И НЕ Константы["УдалитьCRM_ИспользоватьОбменЧерезУниверсальныйФормат"].Получить() Тогда
			Константы.ИспользоватьСинхронизациюДанных.Установить(Ложь);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти // Обновление_3_0_6_7

#Область Обновление_3_0_6_11

Процедура ОчиститьЖурналОтДокументовПланирование() Экспорт
	
	Выборка = РегистрыСведений.CRM_ЖурналДокументов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.удалитьCRM_Планирование") Тогда
			Менеджер = Выборка.ПолучитьМенеджерЗаписи();
			Менеджер.Удалить();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_6_11

#Область Обновление_3_0_6_12

Процедура ИзменитьТипПроцессаУЗапросаНаИзменениеСроков() Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Возврат;
	КонецЕсли;	
	КартаОбъект = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.ПолучитьОбъект();
	КартаОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	КартаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_6_12

#Область Обновление_3_0_7_3

Процедура ЗаполнитьВидыДел() Экспорт
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ЛичнаяЗадача.ПолучитьОбъект();
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Задача_ЗадачаИсполнителя;
	ВидВзаимодействия.ОбменДанными.Загрузка = Истина;
	ВидВзаимодействия.Записать();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_7_3

#Область Обновление_3_0_7_4

Процедура ЗаполнитьИсториюРеквизитов() Экспорт
	
	РегистрыСведений.CRM_ОписаниеРеквизитовМетаданных.ОбновитьЗаписи();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ИсторияРеквизитовПартнеров.Период КАК Период,
	|	CRM_ИсторияРеквизитовПартнеров.Партнер КАК Партнер,
	|	CRM_ИсторияРеквизитовПартнеров.Автор КАК Автор,
	|	CRM_ИсторияРеквизитовПартнеров.ПутьКДанным КАК ПутьКДанным,
	|	CRM_ИсторияРеквизитовПартнеров.Значение КАК Значение,
	|	CRM_ИсторияРеквизитовПартнеров.СтароеЗначение КАК СтароеЗначение
	|ИЗ
	|	РегистрСведений.CRM_ИсторияРеквизитовПартнеров КАК CRM_ИсторияРеквизитовПартнеров
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Партнер,
	|	ПутьКДанным";
	ДеревоИстрии = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого СтрокаОбъект Из ДеревоИстрии.Строки Цикл
		
		Для Каждого СтрокаРеквизит Из СтрокаОбъект.Строки Цикл
			Сч = 0;
			Для Каждого СтрокаИстория Из СтрокаРеквизит.Строки Цикл
				Если Сч = 0 Тогда
					Сч = Сч + 1;
					Продолжить;
				КонецЕсли;
				Менеджер = РегистрыСведений.CRM_ИсторияРеквизитовПартнеров.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Менеджер, СтрокаИстория);
				Менеджер.СтароеЗначение = СтрокаРеквизит.Строки[Сч-1].Значение;
				Менеджер.Записать(Истина); 
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;	
	СтруктураНастройки = РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.ПолучитьНастройку();
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура") И ТипЗнч(СтруктураНастройки.СтруктураНастройки) = Тип("Структура") Тогда	
		СтруктураНастройки = СтруктураНастройки.СтруктураНастройки;
		Если НЕ СтруктураНастройки.Свойство("РеквизитыИнтереса") Тогда
			СтруктураНастройки.Вставить("РеквизитыИнтереса", Новый Массив());	
			СтруктураНастройки.РеквизитыИнтереса.Добавить("СостояниеИнтереса");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("ОжидаемаяВыручка");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("Партнер");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("КонтактноеЛицо");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("ПотенциальныйКлиент");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("Организация");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("Ответственный");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("Подразделение");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("ТипУслуги");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("Тема");
			СтруктураНастройки.РеквизитыИнтереса.Добавить("Офис");
			РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.СохранитьНастройку(СтруктураНастройки);
		Иначе
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("СостояниеИнтереса") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("СостояниеИнтереса");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("ОжидаемаяВыручка") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("ОжидаемаяВыручка");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("Партнер") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("Партнер");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("КонтактноеЛицо") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("КонтактноеЛицо");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("ПотенциальныйКлиент") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("ПотенциальныйКлиент");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("Организация") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("Организация");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("Ответственный") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("Ответственный");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("Подразделение") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("Подразделение");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("ТипУслуги") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("ТипУслуги");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("Тема") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("Тема");
			КонецЕсли;	
			Если СтруктураНастройки.РеквизитыИнтереса.Найти("Офис") = Неопределено Тогда
				СтруктураНастройки.РеквизитыИнтереса.Добавить("Офис");
			КонецЕсли;	
			РегистрыСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.СохранитьНастройку(СтруктураНастройки);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ДобавитьДействияТриггеров() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.СтартПроизвольногоБП.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗапускаБизнесПроцесса"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерЗапускаБизнесПроцесса";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();	
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.СозданиеЗаявкиНаОснованииПисьма.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗаявкаПоПисьму"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерЗаявкаПоПисьму";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать()
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_7_4

#Область Обновление_3_0_7_6

Процедура ОбработатьМероприятия(Параметр) Экспорт
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.Встреча.ПолучитьОбъект();
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы;
	ВидВзаимодействия.Баллы				= 18;		
	ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча;
	ВидВзаимодействия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
	// ВидВзаимодействия.Описание = "Встреча";
	ВидВзаимодействия.Записать();
	
	Константы.CRM_ВидВзаимодействияПоУмолчанию.Установить(ВидВзаимодействия.Ссылка);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	удалитьCRM_Мероприятие.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.удалитьCRM_Мероприятие КАК удалитьCRM_Мероприятие
	               |ГДЕ                   
				   |	НЕ удалитьCRM_Мероприятие.КонвертированоВоВзаимодействие
	               |	И НЕ удалитьCRM_Мероприятие.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка.ДокументОснование) И ТипЗнч(Выборка.Ссылка.ДокументОснование) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			Взаимодействие = Выборка.Ссылка.ДокументОснование.ПолучитьОбъект();
		Иначе	
			Взаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(Взаимодействие, Выборка.Ссылка);
		Взаимодействие.СтатусВзаимодействия = Выборка.Ссылка.Состояние;
		Взаимодействие.ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.Встреча;
		Взаимодействие.Дата = Выборка.Ссылка.Дата;
		Взаимодействие.УстановитьНовыйНомер();
		Взаимодействие.ПлановаяДата = Выборка.Ссылка.Дата;
		Взаимодействие.ПлановаяДатаЗавершение = Выборка.Ссылка.ОкончаниеМероприятия;
		Взаимодействие.ДатаЗавершенияВзаимодействия = Выборка.Ссылка.ОкончаниеМероприятия;
		
		Если Взаимодействие.Автор.Пустая() Тогда
			Взаимодействие.Автор = Пользователи.АвторизованныйПользователь();
		КонецЕсли;	
		
		Если Взаимодействие.Ответственный.Пустая() Тогда
			Взаимодействие.Ответственный = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
		
		
		Взаимодействие.Содержание = Выборка.Ссылка.Тема + "
		|" + Выборка.Ссылка.Описание + "
		|Конвертировано из "+Строка(Выборка.Ссылка.Ссылка);
		Если ЗначениеЗаполнено(Взаимодействие.ДокументОснование) 
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Партнер", Взаимодействие.ДокументОснование.Метаданные()) 
			И ЗначениеЗаполнено(Взаимодействие.ДокументОснование.Партнер) Тогда
			Взаимодействие.Партнер = Взаимодействие.ДокументОснование.Партнер;	
		КонецЕсли;	
		Если ЗначениеЗаполнено(Взаимодействие.ДокументОснование) 
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("КонтактноеЛицо", Взаимодействие.ДокументОснование.Метаданные()) 
			И ЗначениеЗаполнено(Взаимодействие.ДокументОснование.КонтактноеЛицо) Тогда
			Взаимодействие.КонтактноеЛицо = Взаимодействие.ДокументОснование.КонтактноеЛицо;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Взаимодействие.ДокументОснование) 
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("ПотенциальныйКлиент", Взаимодействие.ДокументОснование.Метаданные()) 
			И ЗначениеЗаполнено(Взаимодействие.ДокументОснование.ПотенциальныйКлиент) Тогда
			Взаимодействие.ПотенциальныйКлиент = Взаимодействие.ДокументОснование.ПотенциальныйКлиент;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Взаимодействие.ДатаЗавершенияВзаимодействия) И Взаимодействие.ДатаЗавершенияВзаимодействия < ТекущаяДатаСеанса() Тогда
			Взаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
			Взаимодействие.ЗавершившийПользователь = Взаимодействие.Ответственный;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Выборка.Ссылка.ДокументОснование) И ТипЗнч(Выборка.Ссылка.ДокументОснование) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			Взаимодействие.ДокументОснование = Неопределено;
		КонецЕсли;	
		
		Для Каждого Строка Из Выборка.Ссылка.СвоиЛица Цикл
			Стр = Взаимодействие.СвоиЛица.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Строка);
		КонецЦикла;	
		Для Каждого Строка Из Выборка.Ссылка.СторонниеЛица Цикл
			Стр = Взаимодействие.СторонниеЛица.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Строка);
		КонецЦикла;
		Для Каждого Строка Из Выборка.Ссылка.CRM_Теги Цикл
			Стр = Взаимодействие.CRM_Теги.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Строка);
		КонецЦикла;
		Для Каждого Строка Из Выборка.Ссылка.Категории Цикл
			Стр = Взаимодействие.Категории.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Строка);
		КонецЦикла;
		Если Взаимодействие.Партнер.Пустая() И Взаимодействие.СторонниеЛица.Количество() = 1 Тогда
			Взаимодействие.Партнер = Взаимодействие.СторонниеЛица[0].Партнер;
			Взаимодействие.КонтактноеЛицо = Взаимодействие.СторонниеЛица[0].КонтактноеЛицо;
		КонецЕсли;	
		Взаимодействие.ОбменДанными.Загрузка = Истина;
		Взаимодействие.Записать(РежимЗаписиДокумента.Запись);
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.КонвертированоВоВзаимодействие = Истина;
		Об.ОбменДанными.Загрузка = Истина;
		Об.Записать(РежимЗаписиДокумента.Запись);

		
		
		// НаборНовый = РегистрыСведений.CRM_ДокументыВзаимодействия.СоздатьНаборЗаписей();
		// НаборНовый.Отбор.Взаимодействие.Установить(Взаимодействие.Ссылка);
		// НаборНовый.Прочитать();
		// Набор = РегистрыСведений.CRM_ДокументыВзаимодействия.СоздатьНаборЗаписей();
		// Набор.Отбор.Взаимодействие.Установить(Выборка.Ссылка);
		// Набор.Прочитать();
		// Для Каждого Запись Из Набор Цикл
		//	ЗаписьНовая = НаборНовый.Добавить();
		//	ЗаписьНовая.Взаимодействие = Взаимодействие.Ссылка;
		//	ЗаписьНовая.Документ = Запись.Документ;
		// КонецЦикла;
		// Набор.Очистить();
		// Набор.Записать(Истина);
		// НаборНовый.Записать(Истина);
		
		
		Набор = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Выборка.Ссылка);
		Набор.Прочитать();
		Набор.Очистить();
		Набор.Записать(Истина);
		
		Взаимодействие.ОбменДанными.Загрузка = Ложь;
		CRM_ВзаимодействияСервер.ПриЗаписиОбъектаКалендаря(Взаимодействие,Ложь);

			
		НаборНовый = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
		НаборНовый.Отбор.Объект.Установить(Взаимодействие.Ссылка);
		НаборНовый.Прочитать();
		Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Выборка.Ссылка);
		Набор.Прочитать();
		Для Каждого Запись Из Набор Цикл
			ЗаписьНовая = НаборНовый.Добавить();
			ЗаписьНовая.БизнесПроцесс = Запись.БизнесПроцесс;
			ЗаписьНовая.Объект = Взаимодействие.Ссылка;
			ЗаписьНовая.Задача = Запись.Задача;
			ЗаписьНовая.ТочкаМаршрута = Запись.ТочкаМаршрута;
			ЗаписьНовая.ДатаРегистрации = Запись.ДатаРегистрации;
			ЗаписьНовая.ВидОбъекта = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Взаимодействие;
		КонецЦикла;
		Набор.Очистить();
		Набор.Записать(Истина);
		НаборНовый.Записать(Истина);
		

		
		
		СтруктураОтбора = Новый Структура("ВладелецФайла", Выборка.Ссылка);
		ВыборкаФайлы = Справочники.удалитьCRM_МероприятиеПрисоединенныеФайлы.Выбрать(,, СтруктураОтбора);
		Пока ВыборкаФайлы.Следующий() Цикл
			Если НЕ ВыборкаФайлы.ПометкаУдаления Тогда
				ПрисоединенныйФайл = Справочники.CRM_ВзаимодействиеПрисоединенныеФайлы.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ПрисоединенныйФайл, ВыборкаФайлы.Ссылка,,"ТекстХранилище,ФайлХранилище,Родитель,Владелец");
				ПрисоединенныйФайл.ВладелецФайла = Взаимодействие.Ссылка;
				ПрисоединенныйФайл.ТекстХранилище = ВыборкаФайлы.ТекстХранилище;
				ПрисоединенныйФайл.ФайлХранилище = ВыборкаФайлы.ФайлХранилище;
				ПрисоединенныйФайл.Записать();
				
				Набор = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
				Набор.Отбор.Файл.Установить(ВыборкаФайлы.Ссылка);
				Набор.Прочитать();
				НаборНовый = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
				НаборНовый.Отбор.Файл.Установить(ПрисоединенныйФайл.Ссылка);
				НаборНовый.Прочитать();
				Для Каждого Запись Из Набор Цикл
					ЗаписьНовая = НаборНовый.Добавить();
					ЗаписьНовая.Файл = ПрисоединенныйФайл.Ссылка;
					ЗаписьНовая.ДвоичныеДанныеФайла = Запись.ДвоичныеДанныеФайла;
				КонецЦикла;
				
				Набор.Очистить();
				Набор.Записать(Истина);
				НаборНовый.Записать(Истина);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;	
	
	Выборка = Документы.CRM_Взаимодействие.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СокрЛП(Выборка.Тема) <> "" Тогда Продолжить конецЕсли;
		ОбъектВзаимодействие = Выборка.ПолучитьОбъект();
		тмпТема = Выборка.Содержание;
		тмпТема = СтрЗаменить(тмпТема, Символы.ПС, " ");
		тмпТема = СтрЗаменить(тмпТема, "  ", " ");
		ОбъектВзаимодействие.Тема = тмпТема;
		ОбъектВзаимодействие.Записать();
	КонецЦИкла;	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_7_6

#Область Обновление_3_0_7_7

Процедура ОбработатьВзаимодействия() Экспорт
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ОбзвонКлиентов.ПолучитьОбъект();
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес;
	ВидВзаимодействия.Записать();
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.СоздатьЭлемент();
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы;
	ВидВзаимодействия.Баллы				= 2;	
	ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок;
	ВидВзаимодействия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
	ВидВзаимодействия.Описание = "Телефонный звонок клиенту";
	ВидВзаимодействия.Наименование = "Телефонный звонок клиенту";
	ВидВзаимодействия.Записать();	
	
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.СоздатьЭлемент();
	ВидВзаимодействия.Баллы				= 2;	
	ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы;
	ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо;
	ВидВзаимодействия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
	ВидВзаимодействия.Описание = "Электронное письмо клиенту";
	ВидВзаимодействия.Наименование = "Электронное письмо клиенту";
	ВидВзаимодействия.Записать();
КонецПроцедуры

#КонецОбласти // Обновление_3_0_7_7

#Область Обновление_3_0_7_8

Процедура УбратьМероприятия() Экспорт
	
	Выборка = Документы.удалитьCRM_Мероприятие.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_7_8

#Область Обновление_3_0_8_5
Процедура ОбновитьНастройкиОтправкиSMS4B() Экспорт
	
	ПровайдерSMS = Константы.ПровайдерSMS.Получить();
	Если ПровайдерSMS <> Перечисления.ПровайдерыSMS.SMS4B Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.SMS4B_НастройкиСервиса.Получить().Получить() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСервиса = SMS4B_ОтправкаSMS.SMS4B_ПрочитатьНастройкиСервиса();
	
	ИменаОтправителяСтрока = Константы.Удалить_SMS4B_НомераОтправителя.Получить();
	ИменаОтправителяСтрока = СокрЛП(СтрЗаменить(ИменаОтправителяСтрока, Символы.ВК, ""));
	Если ЗначениеЗаполнено(ИменаОтправителяСтрока) Тогда
		ИменаОтправителяМассив = СтрРазделить(ИменаОтправителяСтрока, Символы.ПС, Ложь);
		НастройкиСервиса.ИменаОтправителя = Новый ФиксированныйМассив(ИменаОтправителяМассив);
	КонецЕсли;
	
	ДатаНачалаЗапрета = Константы.Удалить_SMS4B_НачалоПериодаЗапрета.Получить();
	ДатаОкончанияЗапрета = Константы.Удалить_SMS4B_КонецПериодаЗапрета.Получить();
	
	ПериодЗапретаСтруктура = Новый Структура;
	ПериодЗапретаСтруктура.Вставить("ДатаНачала",			ДатаНачалаЗапрета);
	ПериодЗапретаСтруктура.Вставить("ДатаОкончания",		ДатаОкончанияЗапрета);
	НастройкиСервиса.ПериодЗапрета = Новый ФиксированнаяСтруктура(ПериодЗапретаСтруктура);
	
	НастройкиСервиса.СрокЖизниСообщений = Константы.Удалить_SMS4B_СрокЖизниSMS.Получить();
	
	НастройкиСервиса.МаксАктуальностьДоставки = Константы.Удалить_SMS4B_АктуальностьДоставки.Получить();
	НастройкиСервиса.МаксДлительностьДоставки = Константы.Удалить_SMS4B_ДлительностьДоставки.Получить();
	
	SMS4B_ОтправкаSMS.SMS4B_ЗаписатьНастройкиСервиса(НастройкиСервиса);
	
КонецПроцедуры

Процедура ОбновитьСоставЖурналаДокументов() Экспорт
	
	СсылкаПВХ = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
	Если СсылкаПВХ <> Неопределено Тогда 
		Если Справочники.CRM_ГруппыУниверсальногоЖурнала.Бизнес_процессы.Состав.Найти(СсылкаПВХ, "Объект") = Неопределено Тогда
			ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Бизнес_процессы.ПолучитьОбъект();
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
			Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьОбъектПоМассивуТипов(ОбъектЖурнала, МассивТипов);
			ОбъектЖурнала.Записать();
		КонецЕсли;
		ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Контакты.ПолучитьОбъект();
		Для Каждого Строка Из ОбъектЖурнала.Состав Цикл
			Если Строка.Объект = СсылкаПВХ Тогда
				ОбъектЖурнала.Состав.Удалить(Строка.НомерСтроки-1);
			КонецЕсли;	
		КонецЦикла;
		ОбъектЖурнала.Записать();
		ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Продажи.ПолучитьОбъект();
		Для Каждого Строка Из ОбъектЖурнала.Состав Цикл
			Если Строка.Объект = СсылкаПВХ Тогда
				ОбъектЖурнала.Состав.Удалить(Строка.НомерСтроки-1);
			КонецЕсли;	
		КонецЦикла;
		ОбъектЖурнала.Записать();
	КонецЕсли;
	
	СсылкаПВХ = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип("ДокументСсылка.CRM_Интерес"));
	Если СсылкаПВХ <> Неопределено Тогда
		Если Справочники.CRM_ГруппыУниверсальногоЖурнала.Продажи.Состав.Найти(СсылкаПВХ, "Объект") = Неопределено Тогда
			ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Продажи.ПолучитьОбъект();
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
			Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьОбъектПоМассивуТипов(ОбъектЖурнала, МассивТипов);
			ОбъектЖурнала.Записать();
		КонецЕсли;
	КонецЕсли;
	СсылкаПВХ = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип("ДокументСсылка.CRM_Взаимодействие"));
	Если СсылкаПВХ <> Неопределено Тогда
		Если Справочники.CRM_ГруппыУниверсальногоЖурнала.Контакты.Состав.Найти(СсылкаПВХ, "Объект") = Неопределено Тогда
			ОбъектЖурнала = Справочники.CRM_ГруппыУниверсальногоЖурнала.Контакты.ПолучитьОбъект();
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Взаимодействие"));
			Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьОбъектПоМассивуТипов(ОбъектЖурнала, МассивТипов);
			ОбъектЖурнала.Записать();
		КонецЕсли;
	КонецЕсли;
	
		
КонецПроцедуры

#КонецОбласти // Обновление_3_0_8_5

#Область Обновление_3_0_8_7

Процедура ЗаполнитьНастройкиРабочегоСтола() Экспорт
	
	// Для Fresh установим открытие раб. стола по умолчанию при запуске
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Запись = РегистрыСведений.CRM_НастройкиОткрытияРабочегоСтола.СоздатьМенеджерЗаписи();
		Запись.Объект = "Общие настройки";
		Запись.ОкрыватьРабочийСтол = Истина;
		Запись.БлокироватьИнтерфейс = Ложь;
		Запись.ИзменятьСоставРабочегоСтола = Ложь;
		Запись.ИзменятьРежимЗапуска = Ложь;
		Запись.ИндивидуальныеНастройки = Истина;
		Запись.Записать();
	КонецЕсли;
	
	СписокФорм = CRM_РабочийСтолСервер.ПолучитьСписокФормПоУмолчанию();
	Набор = РегистрыСведений.CRM_НастройкиРабочегоСтола.СоздатьНаборЗаписей();
	Набор.Очистить();
	Счетчик = 1;
	Для Каждого Значение Из СписокФорм Цикл
		Стр = Набор.Добавить();
		Стр.ИмяФормы = Значение.Значение;
		Стр.Наименование = Значение.Представление;
		Стр.Идентификатор = Строка(Новый УникальныйИдентификатор);
		Стр.Объект = "Общие настройки";
		Стр.Порядок = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Набор.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_8_7

#Область Обновление_3_0_8_9

Процедура УстановитьИспользованиеЗаметок() Экспорт
	
	Константы.ИспользоватьЗаметки.Установить(Истина);
		
КонецПроцедуры

#КонецОбласти // Обновление_3_0_8_9

#Область Обновление_3_0_8_11

Процедура ОбновитьРегламентныеЗаданияТригеровИУчетныхЗаписей() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Триггеры.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	                      |ГДЕ
	                      |	CRM_Триггеры.УсловиеСрабатывания = &УсловиеСрабатывания");
	Запрос.УстановитьПараметр("УсловиеСрабатывания", Справочники.CRM_УсловияСрабатыванияТриггеров.ПоРасписанию);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектТриггер = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектТриггер.Записать();
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_8_11

#Область Обновление_3_0_8_12

Процедура ОбновитьТриггерЗаявкаПоПисьму() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.СозданиеЗаявкиНаОснованииПисьма.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗаявкаПоПисьму"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерЗаявкаПоПисьму";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать()
	
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_8_12

#Область Обновление_3_0_8_13

Процедура УстановитьИспользованиеКарточкиКлиента() Экспорт
	
	Константы.CRM_ИспользоватьКарточкуКлиента.Установить(Истина);
		
КонецПроцедуры

#КонецОбласти // Обновление_3_0_8_13


#Область Обновление_3_0_9_4

Процедура ОбновитьТриггерБизнесПроцесс() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.СтартПроизвольногоБП.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗапускаБизнесПроцесса"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерЗапускаБизнесПроцесса";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать()
	
	
КонецПроцедуры

Процедура УдалитьТриггерАвтоответчикTelegram() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ДействияТриггеров.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ДействияТриггеров КАК CRM_ДействияТриггеров
	                      |ГДЕ
	                      |	CRM_ДействияТриггеров.ПометкаУдаления
	                      |	И CRM_ДействияТриггеров.НазваниеОбработки ПОДОБНО &НазваниеОбработки");
	Запрос.УстановитьПараметр("НазваниеОбработки", "%CRM_ТриггерАвтоответчикTelegram%");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_9_4

#Область Обновление_3_0_10_5

Процедура ОбновитьТриггерыСМСиПочта() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.РассылкаПоСегменту.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерРассылкаПоСегменту"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерРассылкаПоСегменту";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ОповещениеСМС.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерСМСРассылки"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерСМСРассылки";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();


КонецПроцедуры

Процедура ПроставитьБаллыИДатуЗавершенияВоВзаимодействиях(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 500
	                      |	CRM_Взаимодействие.Ссылка КАК Ссылка,
	                      |	CRM_Взаимодействие.Баллы КАК Баллы,
	                      |	CRM_Взаимодействие.ВидВзаимодействия.Баллы КАК ВидВзаимодействияБаллы
	                      |ИЗ
	                      |	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |ГДЕ
	                      |	(CRM_Взаимодействие.Баллы = 0
	                      |				И CRM_Взаимодействие.ВидВзаимодействия.Баллы <> 0
	                      |			ИЛИ CRM_Взаимодействие.ДатаЗавершенияВзаимодействия = ДАТАВРЕМЯ(1, 1, 1)
	                      |				И CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено))");
	Параметры.ОбработкаЗавершена = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка.ПолучитьОбъект();
		Док.Баллы = Выборка.ВидВзаимодействияБаллы;
		Если НЕ ЗначениеЗаполнено(Док.ДатаЗавершенияВзаимодействия) Тогда
			Док.ДатаЗавершенияВзаимодействия = ?(ЗначениеЗаполнено(Док.ПлановаяДатаЗавершение),Док.ПлановаяДатаЗавершение,Док.ПлановаяДата);
		КонецЕсли;
		Попытка
			Док.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	Если Выборка.Количество() < 500 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Обновление_3_0_10_5

#Область Обновление_3_0_11_5

Процедура ОбновитьНастройкиСинхронизацииКалендарейGoogle() Экспорт
	
	ЗапросНастройки = Новый Запрос;
	ЗапросНастройки.Текст =
	"ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Значение КАК КалендарьИдентификатор
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogle)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Значение КАК КалендарьНаименование
	|ПОМЕСТИТЬ Наименования
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogleПредставление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Значение КАК КлючДоступа
	|ПОМЕСТИТЬ КлючиДоступа
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Значение КАК КлючОбновления
	|ПОМЕСТИТЬ КлючиОбновления
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.RefreshTokenGApi)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Значение КАК СинхронизацияВключена
	|ПОМЕСТИТЬ Настройки
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.СинхронизироватьКалендарьGoogle)
	|	И НастройкиПользователей.Значение = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Настройки.Пользователь КАК Пользователь,
	|	ЗНАЧЕНИЕ(Перечисление.CRM_ОбластиДоступаGoogle.Календарь) КАК ОбластьДоступа,
	|	ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка) КАК УчетнаяЗаписьЭлектроннойПочты,
	|	Наименования.КалендарьНаименование КАК КалендарьНаименование,
	|	Идентификаторы.КалендарьИдентификатор КАК КалендарьИдентификатор,
	|	КлючиДоступа.КлючДоступа КАК access_token,
	|	""Bearer"" КАК token_type,
	|	КлючиОбновления.КлючОбновления КАК refresh_token,
	|	ЛОЖЬ КАК disabled
	|ИЗ
	|	Настройки КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Идентификаторы КАК Идентификаторы
	|		ПО Настройки.Пользователь = Идентификаторы.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Наименования КАК Наименования
	|		ПО Настройки.Пользователь = Наименования.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиДоступа КАК КлючиДоступа
	|		ПО Настройки.Пользователь = КлючиДоступа.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиОбновления КАК КлючиОбновления
	|		ПО Настройки.Пользователь = КлючиОбновления.Пользователь";
	
	РезультатЗапроса = ЗапросНастройки.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаТаблица = РезультатЗапроса.Выгрузить();
	
	СеансовыеДанные = РезультатЗапросаТаблица.Скопировать(,
		"Пользователь,ОбластьДоступа,УчетнаяЗаписьЭлектроннойПочты,access_token,token_type,refresh_token,disabled");
	НаборЗаписей = РегистрыСведений.CRM_СеансовыеДанныеGoogle.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(СеансовыеДанные);
	НаборЗаписей.Записать();
	
	СервисGoogle = Справочники.CRM_СервисыКалендарей.Google;
	КалендариПользователей = РезультатЗапросаТаблица.Скопировать(,
		"Пользователь,КалендарьНаименование,КалендарьИдентификатор");
	КалендариПользователей.Колонки.Добавить("КалендарьСсылка");
	Для Каждого Строка Из КалендариПользователей Цикл
		НовыйКалендарь = Справочники.CRM_КалендариСотрудников.СоздатьЭлемент();
		НовыйКалендарь.Наименование		= Строка.КалендарьНаименование;
		НовыйКалендарь.Идентификатор	= Строка.КалендарьИдентификатор;
		НовыйКалендарь.Пользователь		= Строка.Пользователь;
		НовыйКалендарь.СервисКалендарей	= СервисGoogle;
		НовыйКалендарь.Записать();
		Строка.КалендарьСсылка = НовыйКалендарь.Ссылка;
		CRM_ОбменСGoogle.ОтключитьКаналСинхронизацииGoogle(Строка.Пользователь);
	КонецЦикла;
	
	НастройкаКалендарь = ПланыВидовХарактеристик.CRM_НастройкиПользователей.КалендарьДляСинхронизации;
	Для Каждого Строка Из КалендариПользователей Цикл
		НаборЗаписей = РегистрыСведений.CRM_НастройкиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Строка.Пользователь);
		НаборЗаписей.Отбор.Настройка.Установить(НастройкаКалендарь);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь	= Строка.Пользователь;
		НоваяЗапись.Настройка		= НастройкаКалендарь;
		НоваяЗапись.Значение		= Строка.КалендарьСсылка;
		НаборЗаписей.Записать();
		CRM_СинхронизацияКалендарей.ДобавитьАктуальныеЗаписиВОчередьНаОтправку(Строка.КалендарьСсылка);
	КонецЦикла;
	
	СервисGoogleОбъект = СервисGoogle.ПолучитьОбъект();
	СервисGoogleОбъект.ДатаНачалаСинхронизации = НачалоДня(ТекущаяДатаСеанса());
	СервисGoogleОбъект.Записать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Взаимодействия.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК Взаимодействия
	|ГДЕ
	|	НЕ Взаимодействия.ПометкаУдаления
	|	И Взаимодействия.ПлановаяДата >= &Период");
	
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВзаимодействиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВзаимодействиеОбъект.ОтразитьВКалендаре();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_11_5

#Область Обновление_3_0_11_7

Процедура УстановитьВестиИсториюРеквизитовКлиентов() Экспорт
	
	Константы.CRM_ВестиИсториюРеквизитовКлиентов.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_10_7

#Область Обновление_3_0_12_2

Процедура ИнициализироватьДатуНачалаРаботыСПрограммой() Экспорт
	
	ДатаНачалаРаботыСПрограммой = Константы.CRM_ДатаНачалаРаботыСПрограммой.Получить();
	Если Не ЗначениеЗаполнено(ДатаНачалаРаботыСПрограммой) Тогда
		Константы.CRM_ДатаНачалаРаботыСПрограммой.Установить(Дата(1980,1,1));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьИспользованиеМесенджеровДляFresh() Экспорт
	
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Константы.CRM_ИспользоватьИнтеграциюСМессенджерами.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_2

#Область Обновление_3_0_12_9

Процедура ОчиститьНастройкиНачальнойСтраницы(Параметры) Экспорт
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для каждого ПользовательИБ Из ПользователиИБ Цикл
			НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
			СоставФорм = Новый СоставФормНачальнойСтраницы;
			НастройкаНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "",
				НастройкаНачальнойСтраницы, , ПользовательИБ.Имя);
			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницыПередОчисткой", "",
				НастройкаНачальнойСтраницы, , ПользовательИБ.Имя);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_9

#Область Обновление_3_0_12_12

Процедура ОбновитьКонстантуИспользоватьПанельСофтФон(Параметры) Экспорт
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Константы.CRM_ИспользоватьКомандуПанельСофтФон.Установить(Константы.сфпИспользоватьСофтФон.Получить());
	КонецЕсли;
КонецПроцедуры

Процедура УстановкаПодразделенияПользователей(Параметры) Экспорт
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		Таблицапользователей = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка из Таблицапользователей Цикл
			ПользовательОбъект = Строка.Ссылка.ПолучитьОбъект();
			ИмяОсновногоПодразделения = "ОсновноеПодразделение";
			ПользовательОбъект.Подразделение = Справочники.СтруктураПредприятия[ИмяОсновногоПодразделения];
			ПользовательОбъект.ОбменДанными.Загрузка = Истина;
			ПользовательОбъект.Записать();
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_12

#Область Обновление_3_0_12_25

Процедура ОбновлениеШаблоновПоказателей() Экспорт
	
	// Включение используемых показателей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИспользуемыеПоказатели.Показатель КАК Показатель
	|ИЗ
	|	РегистрСведений.CRM_ИспользуемыеКлючевыеПоказатели КАК ИспользуемыеПоказатели
	|ГДЕ
	|	ИспользуемыеПоказатели.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ИспользуемыеПоказатели.Показатель,
	|	ИспользуемыеПоказатели.Менеджер");
	
	Запрос.Параметры.Вставить("ДатаНачала", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), -1));
	Запрос.Параметры.Вставить("ДатаОкончания", КонецМесяца(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПоказательОбъект = Выборка.Показатель.ПолучитьОбъект();
			ПоказательОбъект.Включен = Истина;
			ПоказательОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	// Обработка показателей для совместимости с новой логикой.
	ОбработатьПоказатель("Взаимодействия");
	ОбработатьПоказатель("ВысланныеКП");
	ОбработатьПоказатель("ВыставленныеСчета");
	ОбработатьПоказатель("ПроведениеВстреч");
	ОбработатьПоказатель("ТелефонныеЗвонки");
	ОбработатьПоказатель("ТеплыеКлиенты");
	
	ОбработатьПоказатель("ЗабытыеКлиенты");
	ОбработатьПоказатель("ЗагрузкаКалендаря");
	ОбработатьПоказатель("КасанияНаОдногоКлиента");
	ОбработатьПоказатель("КачествоКлиентскойБазы");
	ОбработатьПоказатель("ПросроченоВзаимодействий");
	
	ОбработатьПоказатель("Продажи");
	ОбработатьПоказатель("СреднийЧек");
	
КонецПроцедуры

Процедура ОбработатьПоказатель(ИмяПоказателя)
	
	Показатель	= Справочники.CRM_ШаблоныКлючевыхПоказателей[ИмяПоказателя];
	Макет		= Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет(ИмяПоказателя);
	
	ПоказательОбъект = Показатель.ПолучитьОбъект();
	
	СхемаКомпоновки = ПоказательОбъект.ХранилищеСхемыКомпоновкиДанных.Получить();
	НаборДанных = СхемаКомпоновки.НаборыДанных[0];
	
	ПараметрыСхемы = СхемаКомпоновки.Параметры;
	ПараметрМенеджер = ПараметрыСхемы["Менеджеры"];
	ПараметрМенеджер.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	
	ВариантНастроек = СхемаКомпоновки.ВариантыНастроек[0];
	ВыбранныеПоля = ВариантНастроек.Настройки.Выбор.Элементы;
	НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Менеджер");
	
	НастройкиКомпоновки = ПоказательОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если НастройкиКомпоновки<>Неопределено Тогда
		ВыбранныеПоля = НастройкиКомпоновки.Выбор.Элементы;
		НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Менеджер");
	КонецЕсли;
	
	НаборДанныхМакет = Макет.НаборыДанных[0];
	НаборДанных.Запрос = НаборДанныхМакет.Запрос;
	
	ПоказательОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновки);
	ПоказательОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновки);
	ПоказательОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_25

#Область Обновление_3_0_12_26

Процедура ОбновитьТриггерыЗаявкаИИнтересПоПисьму(Параметры) Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.СозданиеЗаявкиНаОснованииПисьма.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗаявкаПоПисьму"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерЗаявкаПоПисьму";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ЗаявкаССайта.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗаявкаССайта"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерЗаявкаССайта";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_26

#Область Обновление_3_0_12_27

Процедура ВосстановлениеНумерацииВиджетов() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_НастройкиВиджетов.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.CRM_НастройкиВиджетов КАК CRM_НастройкиВиджетов");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
		НаборЗаписей.Прочитать();
		
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		ТаблицаНабора.Сортировать("ИндексВиджета");
		
		Для Сч = 1 По ТаблицаНабора.Количество() Цикл
			СтрокаНабора = ТаблицаНабора[Сч-1];
			СтрокаНабора.ИндексВиджета = Формат(Сч, "ЧЦ=2; ЧДЦ=; ЧВН=");
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаНабора);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_27

#Область Обновление_3_0_12_28

Процедура ОбрезкаЗначенийПоказателей() Экспорт
	
	// Обрезка фактических значений показателей на текущую дату.
	ЗапросПоказатели = Новый Запрос;
	ЗапросПоказатели.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ЗапросПоказатели.Текст =
	"ВЫБРАТЬ
	|	ЗначенияПоказателей.Менеджер КАК Менеджер,
	|	ЗначенияПоказателей.Подразделение КАК Подразделение,
	|	ЗначенияПоказателей.ДатаЗначения КАК ДатаЗначения,
	|	ЗначенияПоказателей.Показатель КАК Показатель
	|ИЗ
	|	РегистрСведений.CRM_ЗначенияКлючевыхПоказателей КАК ЗначенияПоказателей
	|ГДЕ
	|	ЗначенияПоказателей.ДатаЗначения > &ТекущаяДата";
	
	РезультатЗапроса = ЗапросПоказатели.Выполнить();
	ВыборкаПоказатели = РезультатЗапроса.Выбрать();
	Пока ВыборкаПоказатели.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_ЗначенияКлючевыхПоказателей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаЗначения		= ВыборкаПоказатели.ДатаЗначения;
		МенеджерЗаписи.Менеджер			= ВыборкаПоказатели.Менеджер;
		МенеджерЗаписи.Показатель		= ВыборкаПоказатели.Показатель;
		МенеджерЗаписи.Подразделение	= ВыборкаПоказатели.Подразделение;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_28

#Область Обновление_3_0_12_30

Процедура РасцветкаСостоянийИнтересов(Параметры) Экспорт
	
	Справочники.CRM_СостоянияИнтересов.УстановитьЦветаСостояниям();
	Справочники.CRM_ВоронкиПродаж.УстановитьЦветаЭтапамВоронки();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_30

#Область Обновление_3_0_12_34

Процедура ИспользованиеТиповУслуг(Параметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("CRM_РаботаВЛокальномРежиме") Тогда
		Если CRM_ЛицензированиеСервер.ВариантПоставкиКОРП() Или CRM_ЛицензированиеСервер.ВариантПоставкиПРОФ() Тогда
			Константы.CRM_ИспользоватьТипыУслуг.Установить(Истина);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_34

#Область Обновление_3_0_12_35

Процедура ДобавлениеНовыхПоказателей(Параметры) Экспорт
	
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьКонтакты(Истина);
	Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗаполнитьПредопределенныеПоказатели();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_35

#Область Обновление_3_0_12_38

Процедура ПереходНаНовыеРеквизитыПроекта() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Проекты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Проекты КАК Проекты
	               |ГДЕ
	               |	Проекты.CRM_Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыПроектов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредопределеннаяОрганизация =CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию(); 
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.CRM_Статус = Перечисления.CRM_СтатусыПроектов.Планируется;
		СправочникОбъект.CRM_ПрогнозЗавершенияПроекта = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Выборка.Ссылка);
		
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(СправочникОбъект.Ответственный, "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если СправочникОбъект.CRM_Организация <> ЗначениеНастройки Тогда
				СправочникОбъект.CRM_Организация = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			СправочникОбъект.CRM_Организация = ПредопределеннаяОрганизация;
		КонецЕсли;
	
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_38

#Область Обновление_3_0_12_40

Процедура ВключитьДопРеквизитыCRM_ЭтапКалендарногоПлана() Экспорт
	
	СпрОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_CRM_ЭтапКалендарногоПлана.ПолучитьОбъект();
	СпрОбъект.Используется = Истина;
	СпрОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_40


#Область Обновление_3_0_12_41

Процедура ПереходНаНовыеРеквизитыCRM_ИсточникиПолученияЛидов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ИсточникиПолученияЛидов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_ИсточникиПолученияЛидов КАК CRM_ИсточникиПолученияЛидов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Сценарий = перечисления.CRM_CallTrakingСценарии.WebService;
			
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_41

#Область Обновление_3_0_12_42

Процедура ВыполнитьРасчетПоказателей() Экспорт
	
	CRM_УправлениеЦелевымиПоказателямиСервер.РасчетКлючевыхПоказателей();
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_12_42

#Область Обновление_3_0_14_8

Процедура ОтказОтПредопределенныхВидовКИДиалогов(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.ПометкаУдаления
	                      |	И (ВидыКонтактнойИнформации.Наименование = ""Viber""
	                      |			ИЛИ ВидыКонтактнойИнформации.Наименование = ""ВКонтакте"")");
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если МассивСсылок.Количество()>0 Тогда
		ТЗСсылок = НайтиПоСсылкам(МассивСсылок);
		ТЗСсылок.Свернуть("Ссылка");
		Для каждого Строка из ТЗСсылок Цикл
			ВидКИОбъект = Строка.Ссылка.ПолучитьОбъект();
			ВидКИОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_14_8

#Область Обновление_3_0_14_13

Процедура ЗаполнитьРеквизитыДляОбмена(Параметры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.CRM_ИмяПредопределенногоЭлемента = """"";
	ТабДанных = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТабДанных Цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Если Об.Предопределенный Тогда
			Об.CRM_ИмяПредопределенногоЭлемента = Об.ИмяПредопределенныхДанных;
		Иначе
			Об.CRM_ИмяПредопределенногоЭлемента = Строка(Строка.Ссылка.УникальныйИдентификатор());
		КонецЕсли;	
		Об.Записать();
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти // Обновление_3_0_14_13

#Область Обновление_3_0_15_2

Процедура ЗадействоватьНовыеФункциональныеОпции() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_РасчетПотенциалаКлиентов);
	Задание.Использование = ПолучитьФункциональнуюОпцию("CRM_РассчитыватьПотенциалКлиентов");
	Задание.Записать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ДополнительнаяИнформация КАК ДополнительнаяИнформация");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Константы.CRM_РегистрироватьДополнительнуюИнформацию.Установить(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_15_2

#Область Обновление_3_0_15_3

Процедура ОбновлениеДействийТриггеров() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ЗаявкаССайта.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗаявкаССайта"));
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ВосстановлениеИнтереса.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерВосстановлениеИнтереса"));
	ОбработкаТриггера.Записать();
	
КонецПроцедуры

Процедура УстановитьКонстантуНовыйИнтерфейс() Экспорт
	
	Константы.CRM_ИспользоватьСтарыйИнтерфейс.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти // Обновление_3_0_15_2

#КонецОбласти

