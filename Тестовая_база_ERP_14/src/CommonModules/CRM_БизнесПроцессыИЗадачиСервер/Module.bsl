
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-процессы и задачи".
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Процедура устанавливает оформление задач.
//
// Параметры:
//  УсловноеОформление	 - УсловноеОформление - оформление областей.
//
Процедура УстановитьОформлениеЗадач(Знач УсловноеОформление) Экспорт
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для важных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Важность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВариантыВажностиЗадачи.Высокая;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для принятых задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(255,252,218);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(105,72,47);
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для выполненных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(245,251,247);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(104,144,87);
	ЭлементЦветаОформления.Использование = Истина;

КонецПроцедуры

// Функция возвращает описание предмета задача в виде текстовой строки.
//
// Параметры:
//  ПредметСсылка - ЛюбаяСсылка - объект ссылочного типа, который выступает в качестве предмета задачи.
// 
// Возвращаемое значение:
//  Строка - описание предмета.
//
Функция ПредметСтрокой(ПредметСсылка) Экспорт
	
	ПредметЗаполнен = ПредметСсылка <> Неопределено И НЕ ПредметСсылка.Пустая();
	Если НЕ ПредметЗаполнен Тогда
		Возврат НСтр("ru='не задан';en='it is not set'");
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(ПредметСсылка))) Тогда
		Возврат Строка(ПредметСсылка);
	Иначе
		ПредставлениеОбъекта = ПредметСсылка.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			 ПредставлениеОбъекта = ПредметСсылка.Метаданные().Представление();
		КонецЕсли;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)", Строка(ПредметСсылка), ПредставлениеОбъекта);
	КонецЕсли;
		
КонецФункции

// Процедура устанавливает нового ответственного в выбранных документах.
//
// Параметры:
//  МассивДокументов	 - Массив - Массив выбранных документов;
//  НовыйОтветственный	 - СправочникСсылка.Пользователи - Новый ответственный.
// 
// Возвращаемое значение:
//  Строка - Строка с ошибкой, или пустая строка. 
//
Функция УстановитьНовогоОтветственного(Знач МассивДокументов, НовыйОтветственный) Экспорт
	
	НовоеПодразделение = НовыйОтветственный.Подразделение;
	
	Для Каждого ТекущийДокумент Из МассивДокументов Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			Если ТекущийДокумент.Менеджер = НовыйОтветственный Тогда Продолжить; КонецЕсли;
		Иначе
			Если ТекущийДокумент.Ответственный = НовыйОтветственный Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		МетаданныеОбъекта = ТекущийДокумент.Ссылка.Метаданные();
		
		Попытка
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				СтарыйОтветственный = ТекущийДокумент.Менеджер;
			Иначе
				СтарыйОтветственный = ТекущийДокумент.Ответственный;
			КонецЕсли;
			Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Подразделение", МетаданныеОбъекта) Тогда
				ИмяРеквизита = Нстр("ru='Подразделение';en='Department'");
			ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("CRM_Подразделение", МетаданныеОбъекта) Тогда
				ИмяРеквизита = Нстр("ru='CRM_Подразделение';en='CRM_Organization'");
			ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПодразделениеПолучатель", МетаданныеОбъекта) Тогда
				ИмяРеквизита = Нстр("ru='ПодразделениеПолучатель';en='Division Recipient'");
			Иначе
				ИмяРеквизита = "";
			КонецЕсли;
			
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				CRM_ОповещенияСервер.УдалитьОповещения(ТекущийДокумент, ТекущийДокумент.Менеджер, Истина);
			Иначе
				CRM_ОповещенияСервер.УдалитьОповещения(ТекущийДокумент, ТекущийДокумент.Ответственный, Истина);
			КонецЕсли;
			
			ТекущийДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				ТекущийДокументОбъект.Менеджер = НовыйОтветственный;
			Иначе
				ТекущийДокументОбъект.Ответственный = НовыйОтветственный;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяРеквизита) И ТекущийДокументОбъект[ИмяРеквизита] <> НовоеПодразделение Тогда
				Если ЗначениеЗаполнено(НовоеПодразделение) Тогда
					ТекущийДокументОбъект[ИмяРеквизита] = НовоеПодразделение;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				Если НЕ ЗначениеЗаполнено(НовыйОтветственный.Подразделение) Тогда
					Возврат НСтр("ru='У выбранного пользователя не заполнено подразделение. Перенаправление невозможно!';en='The selected user does not have a department. Redirection is impossible!'");
				КонецЕсли;
				ТекущийДокументОбъект.Подразделение = ТекущийДокументОбъект.Ответственный.Подразделение;
				ТекущийДокументОбъект.Офис = ТекущийДокументОбъект.Ответственный.Подразделение.CRM_Офис;
				Если ЗначениеЗаполнено(ТекущийДокументОбъект.ТипУслуги) Тогда
					// Если типа услуги нет в массиве своих услуг, то его очищаем.
					МассивСвоихТиповУслуг = CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(ТекущийДокументОбъект.Подразделение);
					Если (МассивСвоихТиповУслуг.Количество() > 0) И (МассивСвоихТиповУслуг.Найти(ТекущийДокументОбъект.ТипУслуги) = Неопределено) Тогда
						ТекущийДокументОбъект.ТипУслуги = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
					КонецЕсли;	
				КонецЕсли;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	CRM_Взаимодействие.Ссылка
				|ИЗ
				|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
				|ГДЕ
				|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
				|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
				|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)";
				
				Запрос.УстановитьПараметр("ДокументОснование", ТекущийДокумент);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					вОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					вОбъект.Ответственный = НовыйОтветственный;
					вОбъект.Подразделение = НовыйОтветственный.Подразделение;
					Попытка
						вОбъект.Записать();
					Исключение
						Возврат НСтр("ru='Не удалось обновить данные взаимодействия!';en='Failed to update the interaction data!'");
					КонецПопытки;
				КонецЦикла;
				
			КонецЕсли;
			
			ТекущийДокументОбъект.Записать();
			
			// Если объект перенаправил на себя текущий пользователь, то оповещать его об этом не надо.
			Если НЕ НовыйОтветственный = Пользователи.ТекущийПользователь() Тогда
				ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(НовыйОтветственный,Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах, ТекущийДокументОбъект.Ссылка);
				Если НЕ (ПараметрыОповещения = Неопределено) Тогда
					CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
				КонецЕсли;
			КонецЕсли;
			
			Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(ТекущийДокументОбъект.Ссылка) Тогда
				БизнесПроцесс = CRM_БизнесПроцессыСервер.ПолучитьБизнесПроцессПоОбъекту(ТекущийДокументОбъект.Ссылка);
				
				ПараметрКоманды = Новый Массив;
				ПараметрКоманды.Добавить(БизнесПроцесс);
				
				CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(ПараметрКоманды, НовыйОтветственный);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат "";
КонецФункции

// Процедура завершает взаимодействия по задаче.
//
// Параметры:
//  МассивВзаимодействий - Массив - Массив взаимодействий.
//
Процедура ЗавершитьВзавимодействияПоЗадаче(МассивВзаимодействий) Экспорт
	
	Для Каждого Взаимодействие ИЗ МассивВзаимодействий Цикл
		ИзмененноеВзаимодействие = Взаимодействие.ПолучитьОбъект();
		ИзмененноеВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
		ИзмененноеВзаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		ИзмененноеВзаимодействие.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(ИзмененноеВзаимодействие.Результат) Тогда
			ИзмененноеВзаимодействие.Результат = "Задача выполнена";
		КонецЕсли;
		ИзмененноеВзаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает карту маршрута.
//
// Параметры:
//  КартаПроцесс - СправочникСсылка.CRM_КартыМаршрутов - Карта маршрута бизнес процесса.
// 
// Возвращаемое значение:
//  Справочники.CRM_КартыМаршрутов - Возвращает карту маршрута.
//
Функция ЭтоПоручение(КартаПроцесс) Экспорт
	Если ТипЗнч(КартаПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Возврат КартаПроцесс = Справочники.CRM_КартыМаршрутов.Поручение;
	Иначе
		Возврат КартаПроцесс.CRM_КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение;
	КонецЕсли;
КонецФункции

#Область ГрупповыеПредметыБизнеспроцессов

// Формирование и заполнения групповых предметов.
//
// Параметры:
//  Форма			 - УправляемаФорма	 - Передаваемая форма.
//  Процесс			 - БизнесПроцесс.Ссылка	 - Передаваемый бизнес процесс.
//  ГруппаРазмещения - ГруппаФормы	 - группа размещения предметов для бизнес процессов.
//  ЭтоСтарт		 - Булево	 - Старт бизнес процесса. 
//
Процедура СформироватьИЗаполнитьГрупповыхПредметы(Форма, Процесс, ГруппаРазмещения, ЭтоСтарт = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	ДобавляемыеРеквизиты = Новый Массив;
	
	НастройкиСценария = Справочники.CRM_СценарииВыполненияПоручений.ПараметрыНастройки(Процесс.Сценарий);
	Для каждого ИспользуемыйОбъект из НастройкиСценария.ИспользуемыеОбъекты Цикл
		Если ЭтоСтарт И ИспользуемыйОбъект.Значение = Перечисления.CRM_ВариантыЗаполненияДанныхПроцессов.ПриВыполненииЗадач Тогда Продолжить;; КонецЕсли; 
		
		НаборНаименование = "НаборЗаписейПредметы"+ИспользуемыйОбъект.Ключ.Имя;
		
		Если Элементы.Найти(НаборНаименование)<>Неопределено Тогда Продолжить; КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(НаборНаименование, Новый ОписаниеТипов("РегистрСведенийНаборЗаписей.CRM_ПредметыБизнесПроцессов"), ));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для каждого ИспользуемыйОбъект из НастройкиСценария.ИспользуемыеОбъекты Цикл
		Если ЭтоСтарт И ИспользуемыйОбъект.Значение = Перечисления.CRM_ВариантыЗаполненияДанныхПроцессов.ПриВыполненииЗадач Тогда Продолжить; КонецЕсли; 
		
		ТипНаименование = ИспользуемыйОбъект.Ключ.Имя;
		ТипСиноним = ИспользуемыйОбъект.Ключ.Синоним;
		НаборНаименование = "НаборЗаписейПредметы"+ТипНаименование;
		
		Если Элементы.Найти(НаборНаименование)<>Неопределено Тогда Продолжить; КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.CRM_ПредметыБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
		НаборЗаписей.Отбор.ТипПредмета.Установить(ИспользуемыйОбъект.Ключ);
		НаборЗаписей.Прочитать();
		
		Форма.ЗначениеВРеквизитФормы(НаборЗаписей, НаборНаименование);
		
		НоваяГруппа = Элементы.Добавить("Группа"+НаборНаименование, Тип("ГруппаФормы"), ГруппаРазмещения);
		НоваяГруппа.Заголовок = ТипСиноним;
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		НоваяГруппа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.РастягиватьПоГоризонтали = Истина;
		НоваяГруппа.РастягиватьПоВертикали = Истина;
		
		НовыйЭлемент = Элементы.Добавить(НаборНаименование, Тип("ТаблицаФормы"), НоваяГруппа);
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.ПутьКДанным = НаборНаименование;
		НовыйЭлемент.РастягиватьПоВертикали = Истина;
		НовыйЭлемент.ТолькоПросмотр = (ИспользуемыйОбъект.Значение = Перечисления.CRM_ВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач) И Не ЭтоСтарт;
		НовыйЭлемент.УстановитьДействие("Выбор", "Подключаемый_ПредметыПроцессаВыбор");
		НовыйЭлемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ПредметыПроцессаОбработкаВыбора");
		
		Если Не НовыйЭлемент.ТолькоПросмотр Тогда
			НоваяКоманда = Форма.Команды.Добавить(НаборНаименование+"Подбор");
			НоваяКоманда.Заголовок = НСтр("ru='Подбор';en='Selection'");
			НоваяКоманда.Действие = "Подключаемый_ПредметыПроцессаПодбор";
			
			ЭлементКнопка 				= Форма.Элементы.Добавить(НаборНаименование + "Подбор", Тип("КнопкаФормы"), НовыйЭлемент.КоманднаяПанель);
			ЭлементКнопка.Вид 			= ВидКнопкиФормы.ОбычнаяКнопка;
			ЭлементКнопка.Отображение 	= ОтображениеКнопки.Картинка;
			ЭлементКнопка.Картинка 		= БиблиотекаКартинок.ЗагрузитьКлассификаторы;
			ЭлементКнопка.ИмяКоманды 	= НаборНаименование + "Подбор";
		КонецЕсли;
		
		Если НЕ ЭтоСтарт Тогда
			Колонка = Элементы.Добавить(НаборНаименование+"Обработан", Тип("ПолеФормы"), НовыйЭлемент);
			Колонка.Вид = ВидПоляФормы.ПолеФлажка;
			Колонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Колонка.ПутьКДанным = НаборНаименование+".Обработан";
			Колонка.Подсказка = НСтр("ru='Обработан';en='Processed'");
			Колонка.КартинкаШапки = БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
		КонецЕсли;
		
		Колонка = Элементы.Добавить(НаборНаименование+"Предмет", Тип("ПолеФормы"), НовыйЭлемент);
		Колонка.Вид = ВидПоляФормы.ПолеВвода;
		Колонка.ОграничениеТипа = Новый ОписаниеТипов(СтрЗаменить(ИспользуемыйОбъект.Ключ.ПолноеИмя, ".", "Ссылка."));
		Колонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Колонка.ПутьКДанным = НаборНаименование+".Предмет";
		Колонка.Заголовок = НСтр("ru='Наименование';en='Name'");
	
	КонецЦикла;
	
КонецПроцедуры

// Запись групповые предметы.
//
// Параметры:
//  Форма			 - УправляемаФорма	 - Передаваемая форма.
//  Процесс			 - БизнесПроцесс.Ссылка	 - Передаваемый бизнес процесс. 
//
Процедура ЗаписатьГрупповыеПредметы(Форма, Процесс) Экспорт
	
	НастройкиСценария = Справочники.CRM_СценарииВыполненияПоручений.ПараметрыНастройки(Процесс.Сценарий);
	Для каждого ИспользуемыйОбъект из НастройкиСценария.ИспользуемыеОбъекты Цикл
		НаборНаименование = "НаборЗаписейПредметы"+ИспользуемыйОбъект.Ключ.Имя;
		
		Если Форма.Элементы.Найти(НаборНаименование) = Неопределено Тогда Продолжить; КонецЕсли;
		
		НаборЗаписей = Форма.РеквизитФормыВЗначение(НаборНаименование);
		Если НЕ ЗначениеЗаполнено(НаборЗаписей.Отбор.БизнесПроцесс.Значение) Тогда
			НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
		КонецЕсли;
		Если НаборЗаписей.Количество()>0 Тогда
			Для Каждого Строка из НаборЗаписей Цикл
				Строка.ТипПредмета = ИспользуемыйОбъект.Ключ;
				Строка.БизнесПроцесс = Процесс;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Помечает на удаление задачи бизнес-процесса БизнесПроцессСсылка.
//
// Параметры:
//  БизнесПроцессСсылка  - бизнес-процесс.
//  ПометкаУдаления  - Булево - значение свойства ПометкаУдаления.
//
Процедура УдалитьОповещенияПриУстановкеПометкиУдаления(БизнесПроцессСсылка, ПометкаУдаления) Экспорт
	
	Если ПометкаУдаления Тогда
		Попытка
			Запрос = Новый Запрос("ВЫБРАТЬ
				|	Задачи.Ссылка КАК Ссылка 
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК Задачи
				|ГДЕ
				|	Задачи.БизнесПроцесс = &БизнесПроцесс");
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				CRM_ОповещенияСервер.УдалитьОповещения(Выборка.Ссылка);
			КонецЦикла;
		Исключение
			ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, 
				БизнесПроцессСсылка.Метаданные(), БизнесПроцессСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоНезависимыйПроцесс(КартаПроцесс) Экспорт
	
	Если ТипЗнч(КартаПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Возврат КартаПроцесс.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	Иначе
		Возврат КартаПроцесс.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьАктивныеВзаимодействияЗавершить(Задача) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.ВРаботе);
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.Запланировано);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Задача);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЕСТЬNULL(CRM_Взаимодействие.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)) КАК Взаимодействие
	|ПОМЕСТИТЬ ЗадачаИВзавимодействия
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|		ПО ЗадачаИсполнителя.Ссылка = CRM_Взаимодействие.ДокументОснование
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА ЗадачаИсполнителя.CRM_Личная
	|				ТОГДА ЗадачаИсполнителя.CRM_Личная
	|			ИНАЧЕ ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.НезависимыйПроцесс)
	|		КОНЕЦ
	|	И CRM_Взаимодействие.СтатусВзаимодействия В(&МассивСтатусов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИВзавимодействия.Взаимодействие
	|ИЗ
	|	ЗадачаИВзавимодействия КАК ЗадачаИВзавимодействия
	|ГДЕ
	|	НЕ ЗадачаИВзавимодействия.Взаимодействие = ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Взаимодействие.ПолучитьОбъект();
		Взаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
		Взаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		Взаимодействие.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(Взаимодействие.Результат) Тогда
			Взаимодействие.Результат = НСтр("ru='Задача перенаправлена';en='The task are redirect'");
		КонецЕсли;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереадресоватьЗапланированныеВзаимодействияПоЗадаче(ЗадачаСтарая, ЗадачаНовая) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Взаимодействие.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |ГДЕ
	                      |	CRM_Взаимодействие.ДокументОснование = &ЗадачаСтарая
	                      |	И CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Запланировано)");
	Запрос.УстановитьПараметр("ЗадачаСтарая", ЗадачаСтарая);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Ссылка.ПолучитьОбъект();
		Взаимодействие.ДокументОснование = ЗадачаНовая;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПринятьЗапланированныеВзаимодействияПоЗадаче(Задача, Пользователь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Взаимодействие.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |ГДЕ
	                      |	CRM_Взаимодействие.ДокументОснование = &ЗадачаСтарая
	                      |	И CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Запланировано)");
	Запрос.УстановитьПараметр("ЗадачаСтарая", Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Ссылка.ПолучитьОбъект();
		Взаимодействие.Ответственный = Пользователь;
		Взаимодействие.Подразделение = Пользователь.Подразделение;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьАктивныеВзаимодействияПеренаправить(Задача, НоваяЗадача, Ответственный) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.ВРаботе);
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.Запланировано);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Задача);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЕСТЬNULL(CRM_Взаимодействие.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)) КАК Взаимодействие
	|ПОМЕСТИТЬ ЗадачаИВзавимодействия
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|		ПО ЗадачаИсполнителя.Ссылка = CRM_Взаимодействие.ДокументОснование
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА ЗадачаИсполнителя.CRM_Личная
	|				ТОГДА ЗадачаИсполнителя.CRM_Личная
	|			ИНАЧЕ ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.НезависимыйПроцесс)
	|		КОНЕЦ
	|	И CRM_Взаимодействие.СтатусВзаимодействия В(&МассивСтатусов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИВзавимодействия.Взаимодействие
	|ИЗ
	|	ЗадачаИВзавимодействия КАК ЗадачаИВзавимодействия
	|ГДЕ
	|	НЕ ЗадачаИВзавимодействия.Взаимодействие = ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Взаимодействие.ПолучитьОбъект();
		Взаимодействие.ДокументОснование = НоваяЗадача;
		Взаимодействие.Ответственный = Ответственный;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИзбранныхПолучателей(ПараметрКоманды) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ИзбранныеПолучатели.Получатель
	               |ИЗ
	               |	РегистрСведений.CRM_ИзбранныеПолучатели КАК CRM_ИзбранныеПолучатели
	               |ГДЕ
	               |	CRM_ИзбранныеПолучатели.Пользователь = &Пользователь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_ИзбранныеПолучатели.Получатель.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
КонецФункции // ПолучитьИзбранныхПолучателей()

#КонецОбласти


