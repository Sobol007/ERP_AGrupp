
////////////////////////////////////////////////////////////////////////////////
// Воронки продаж сервер
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текст запроса расшифровки по документам.
//
// Параметры:
//  ЭтапВоронки	 - СправочникСсылка.CRM_ВоронкиПродаж - Этап воронки. 
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ВоронкаПродажПолучитьТекстЗапросаРасшифрокиПоДокументам(ЭтапВоронки) Экспорт
	
	ТекстЗапроса = "";
	
	ИмяПараметраЭтапа = "_"+СтрЗаменить(ЭтапВоронки.УникальныйИдентификатор(),"-","_");
	
	СписокИменИтоговыхТаблиц = Новый СписокЗначений;
	
	ТекстЗапросаЭтапаВоронкиПоДокументам = "";
	
	Для Каждого ЭлементЭтапа ИЗ ЭтапВоронки.Состав Цикл
			
		КартаМаршрутаЭлемента	= ЭлементЭтапа.КартаМаршрута;
		МассивТипов				= ЭлементЭтапа.ТочкаМаршрута.ТипЗначения.Типы();
		
		Для Каждого ТипДокумента ИЗ МассивТипов Цикл
			
			МетаданныеДокумента		= Метаданные.НайтиПоТипу(ТипДокумента);
			ПолноеИмяДокумента		= МетаданныеДокумента.ПолноеИмя();
			СинонимДокумента		= МетаданныеДокумента.Синоним;
			ПредставлениеТаблицы	= СтрЗаменить(ПолноеИмяДокумента,"Документ.","");
			
			Если ТипДокумента = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
				
				ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
				|ВЫБРАТЬ
				|	&Этап КАК Этап,
				|	ПредметыПапкиВзаимодействий.Предмет.Ответственный КАК Пользователь,
				|	ПредметыПапкиВзаимодействий.Предмет.ПодразделениеЗаказчик КАК Подразделение,
				|	ПредметыПапкиВзаимодействий.Предмет.ПодразделениеЗаказчик.CRM_Офис КАК Офис,
				|	ПредметыПапкиВзаимодействий.Предмет КАК Документ,
				|	ВЫБОР
				|		КОГДА ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт ЕСТЬ NULL 
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|		КОГДА ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт ССЫЛКА Справочник.Партнеры
				|			ТОГДА ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт
				|		КОГДА ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт ССЫЛКА Справочник.КонтактныеЛицаПартнеров
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|	КОНЕЦ КАК Клиент,
				|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
				|	1 КАК Количество,
				|	0 КАК Сумма,
				|	&ВалютаРегламентированногоУчета КАК Валюта,
				|	ЭлектронноеПисьмоИсходящее.Дата КАК Дата,
				|	1 КАК АктивнаяУспешноНеУдачно,
				|	ПредметыПапкиВзаимодействий.Предмет.Комментарий КАК Описание,
				|	"""+СинонимДокумента+""" КАК Процесс,
				|	"""" КАК РезультатВыполнения,
				|	ПредметыПапкиВзаимодействий.Предмет.Проведен КАК Проведен,
				|	ВЫБОР
				|		КОГДА ПредметыПапкиВзаимодействий.Предмет.Проведен
				|			ТОГДА ""Проведен""
				|		ИНАЧЕ ""Не проведен""
				|	КОНЕЦ КАК Состояние
				|ПОМЕСТИТЬ "+ИмяПараметраЭтапа+"РассылкаЭлектронныхПисем
				|ИЗ
				|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
				|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
				|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
				|			И (ЭлектронноеПисьмоИсходящееПолучателиПисьма.НомерСтроки = 1)
				|ГДЕ
				|	ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
				|	И НЕ ПредметыПапкиВзаимодействий.Предмет = ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)
				|	И НЕ ПредметыПапкиВзаимодействий.Предмет.ПометкаУдаления
				|	И ПредметыПапкиВзаимодействий.Предмет.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////";
				
				СписокИменИтоговыхТаблиц.Добавить(ИмяПараметраЭтапа+"РассылкаЭлектронныхПисем");
				
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
				
				ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
				|ВЫБРАТЬ
				|	&Этап КАК Этап,
				|	CRM_ТелемаркетингУчастники.Ссылка.Ответственный КАК Пользователь,
				|	CRM_ТелемаркетингУчастники.Ссылка.ПодразделениеЗаказчик КАК Подразделение,
				|	CRM_ТелемаркетингУчастники.Ссылка.ПодразделениеЗаказчик.CRM_Офис КАК Офис,
				|	CRM_ТелемаркетингУчастники.Ссылка КАК Документ,
				|	CRM_ТелемаркетингУчастники.Партнер КАК Клиент,
				|	CRM_ТелемаркетингУчастники.Ссылка.Проект,
				|	1 КАК Количество,
				|	0 КАК Сумма,
				|	&ВалютаРегламентированногоУчета КАК Валюта,
				|	CRM_ТелемаркетингУчастники.Ссылка.Дата КАК Дата,
				|	ВЫБОР
				|		КОГДА CRM_ТелемаркетингУчастники.Обработан
				|			ТОГДА 1
				|		КОГДА CRM_ТелемаркетингУчастники.НеДозвонились
				|			ТОГДА 0
				|	КОНЕЦ КАК АктивнаяУспешноНеУдачно,
				|	CRM_ТелемаркетингУчастники.Ссылка.Комментарий КАК Описание,
				|	"""+СинонимДокумента+""" КАК Процесс,
				|	"""" КАК РезультатВыполнения,
				|	CRM_ТелемаркетингУчастники.Ссылка.Проведен КАК Проведен,
				|	ВЫБОР
				|		КОГДА CRM_ТелемаркетингУчастники.Ссылка.Проведен
				|			ТОГДА ""Проведен""
				|		ИНАЧЕ ""Не проведен""
				|	КОНЕЦ КАК Состояние
				|ПОМЕСТИТЬ "+ИмяПараметраЭтапа+"Телемаркетинг
				|ИЗ
				|	Документ.CRM_Телемаркетинг.Участники КАК CRM_ТелемаркетингУчастники
				|ГДЕ
				|	(CRM_ТелемаркетингУчастники.Обработан
				|			ИЛИ CRM_ТелемаркетингУчастники.НеДозвонились)
				|	И НЕ CRM_ТелемаркетингУчастники.Ссылка.ПометкаУдаления
				|	И CRM_ТелемаркетингУчастники.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////";
				
				СписокИменИтоговыхТаблиц.Добавить(ИмяПараметраЭтапа+"Телемаркетинг");
				
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				
				ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
				|ВЫБРАТЬ
				|	КоммерческоеПредложениеКлиентуЗапасы.Ссылка,
				|	СУММА(1) КАК Количество
				|ПОМЕСТИТЬ КоммерческиеПредложения
				|ИЗ
				|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуЗапасы
				|ГДЕ
				|	НЕ КоммерческоеПредложениеКлиентуЗапасы.Ссылка.ПометкаУдаления
				|	И КоммерческоеПредложениеКлиентуЗапасы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И КоммерческоеПредложениеКлиентуЗапасы.CRM_Утвержден
				|
				|СГРУППИРОВАТЬ ПО
				|	КоммерческоеПредложениеКлиентуЗапасы.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&Этап КАК Этап,
				|	КоммерческиеПредложения.Ссылка.Менеджер КАК Пользователь,
				|	КоммерческиеПредложения.Ссылка.CRM_Подразделение КАК Подразделение,
				|	КоммерческиеПредложения.Ссылка.CRM_Подразделение.CRM_Офис КАК Офис,
				|	КоммерческиеПредложения.Ссылка КАК Документ,
				|	КоммерческиеПредложения.Ссылка.Партнер КАК Клиент,
				|	КоммерческиеПредложения.Ссылка.CRM_Проект КАК Проект,
				|	1 КАК Количество,"+
				?(НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(),
				"
				|	КоммерческиеПредложения.Ссылка.СуммаДокумента КАК Сумма,",
				"
				|	ВЫБОР
				|		КОГДА КоммерческиеПредложения.Ссылка.Кратность = 0
				|			ТОГДА КоммерческиеПредложения.Ссылка.СуммаДокумента * КоммерческиеПредложения.Ссылка.Курс / 1
				|		ИНАЧЕ КоммерческиеПредложения.Ссылка.СуммаДокумента * КоммерческиеПредложения.Ссылка.Курс / КоммерческиеПредложения.Ссылка.Кратность
				|	КОНЕЦ КАК Сумма,")+"
				|	&ВалютаРегламентированногоУчета КАК Валюта,
				|	КоммерческиеПредложения.Ссылка.Дата КАК Дата,
				|	1 КАК АктивнаяУспешноНеУдачно,
				|	КоммерческиеПредложения.Ссылка.Комментарий КАК Описание,
				|	"""+СинонимДокумента+""" КАК Процесс,
				|	"""" КАК РезультатВыполнения,
				|	КоммерческиеПредложения.Ссылка.Проведен КАК Проведен,
				|	ВЫБОР
				|		КОГДА КоммерческиеПредложения.Ссылка.Проведен
				|			ТОГДА ""Проведен""
				|		ИНАЧЕ ""Не проведен""
				|	КОНЕЦ КАК Состояние
				|ПОМЕСТИТЬ "+ИмяПараметраЭтапа+"КоммерческиеПредложения
				|ИЗ
				|	КоммерческиеПредложения КАК КоммерческиеПредложения
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ КоммерческиеПредложения
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////";
				
				СписокИменИтоговыхТаблиц.Добавить(ИмяПараметраЭтапа+"КоммерческиеПредложения");
				
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СообщениеSMS") Тогда
				
				ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
				|ВЫБРАТЬ
				|	&Этап КАК Этап,
				|	СообщениеSMSАдресаты.Ссылка.Ответственный КАК Пользователь,
				|	СообщениеSMSАдресаты.Ссылка.CRM_ПодразделениеЗаказчик КАК Подразделение,
				|	СообщениеSMSАдресаты.Ссылка.CRM_ПодразделениеЗаказчик.CRM_Офис КАК Офис,
				|	СообщениеSMSАдресаты.Ссылка КАК Документ,
				|	ВЫБОР
				|		КОГДА СообщениеSMSАдресаты.Контакт ССЫЛКА Справочник.Партнеры
				|			ТОГДА СообщениеSMSАдресаты.Контакт
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|	КОНЕЦ КАК Клиент,
				|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
				|	1 КАК Количество,
				|	0 КАК Сумма,
				|	&ВалютаРегламентированногоУчета КАК Валюта,
				|	СообщениеSMSАдресаты.Ссылка.Дата КАК Дата,
				|	ВЫБОР
				|		КОГДА СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.Исходящее)
				|			ТОГДА 1
				|		КОГДА СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправляетсяПровайдером)
				|			ТОГДА 1
				|		КОГДА СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.Доставлено)
				|			ТОГДА 1
				|		КОГДА СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправленоПровайдером)
				|			ТОГДА 1
				|		КОГДА СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру)
				|			ТОГДА 0
				|		КОГДА СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеОтправленоПровайдером)
				|			ТОГДА 0
				|		КОГДА СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеДоставлено)
				|			ТОГДА 0
				|		КОГДА СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеОпознаноПровайдером)
				|			ТОГДА 0
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК АктивнаяУспешноНеУдачно,
				|	СообщениеSMSАдресаты.Ссылка.Комментарий КАК Описание,
				|	"""+СинонимДокумента+""" КАК Процесс,
				|	"""" КАК РезультатВыполнения,
				|	СообщениеSMSАдресаты.Ссылка.Проведен КАК Проведен,
				|	ВЫБОР
				|		КОГДА СообщениеSMSАдресаты.Ссылка.Проведен
				|			ТОГДА ""Проведен""
				|		ИНАЧЕ ""Не проведен""
				|	КОНЕЦ КАК Состояние
				|ПОМЕСТИТЬ "+ИмяПараметраЭтапа+"СМС
				|ИЗ
				|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
				|ГДЕ
				|	НЕ СообщениеSMSАдресаты.Ссылка.ПометкаУдаления
				|	И СообщениеSMSАдресаты.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И СообщениеSMSАдресаты.Ссылка.SMS4B_ТипСообщения = ЗНАЧЕНИЕ(Перечисление.SMS4B_ТипыСообщений.Исходящее)
				|	И НЕ СообщениеSMSАдресаты.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументаСообщениеSMS.Черновик)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////";
				
				СписокИменИтоговыхТаблиц.Добавить(ИмяПараметраЭтапа+"СМС");
				
			Иначе
				Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
					РеквизитОтветственный = ПредставлениеТаблицы+".Ответственный";
				Иначе
					РеквизитОтветственный = "ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
				КонецЕсли;
				
				Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) Тогда
					
					РеквизитПодразделение = ПредставлениеТаблицы+".Подразделение";
					РеквизитОфис = ПредставлениеТаблицы+".Подразделение.CRM_Офис";
					
				ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
					
					РеквизитПодразделение = ПредставлениеТаблицы+".Ответственный.Подразделение";
					РеквизитОфис = ПредставлениеТаблицы+".Ответственный.Подразделение.CRM_Офис";
					
				Иначе
					РеквизитПодразделение = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
					РеквизитОфис = "ЗНАЧЕНИЕ(Справочник.CRM_ОфисыКомпании.ПустаяСсылка)";
				КонецЕсли;
				
				Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента) Тогда
					РеквизитПартнер = ПредставлениеТаблицы+".Партнер";
				Иначе
					РеквизитПартнер = "ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
				КонецЕсли;
				
				Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Проект", МетаданныеДокумента) Тогда
					РеквизитПроект = ПредставлениеТаблицы+".Проект";
				Иначе
					РеквизитПроект = "ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
				КонецЕсли;
				
				Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("СуммаДокумента", МетаданныеДокумента) Тогда
					РеквизитСуммаДокумента = ПредставлениеТаблицы+".СуммаДокумента";
				Иначе
					РеквизитСуммаДокумента = "0";
				КонецЕсли;
				
				ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
				|ВЫБРАТЬ
				|	&Этап КАК Этап,
				|	"+РеквизитОтветственный+" КАК Пользователь,
				|	"+РеквизитПодразделение+" КАК Подразделение,
				|	"+РеквизитОфис+" КАК Офис,
				|	"+ПредставлениеТаблицы+".Ссылка КАК Документ,
				|	"+РеквизитПартнер+" КАК Клиент,
				|	"+РеквизитПроект+" КАК Проект,
				|	1 КАК Количество,
				|	"+РеквизитСуммаДокумента+" КАК Сумма,
				|	&ВалютаРегламентированногоУчета КАК Валюта,
				|	"+ПредставлениеТаблицы+".Дата КАК Дата,
				|	1 КАК АктивнаяУспешноНеУдачно,
				|	"+ПредставлениеТаблицы+".Комментарий КАК Описание,
				|	"""+СинонимДокумента+""" КАК Процесс,
				|	"""" КАК РезультатВыполнения,
				|	"+ПредставлениеТаблицы+".Проведен КАК Проведен,
				|	ВЫБОР
				|		КОГДА "+ПредставлениеТаблицы+".Проведен
				|			ТОГДА ""Проведен""
				|		ИНАЧЕ ""Не проведен""
				|	КОНЕЦ КАК Состояние
				|ПОМЕСТИТЬ "+ИмяПараметраЭтапа+ПредставлениеТаблицы+"
				|ИЗ
				|	Документ."+ПредставлениеТаблицы+" КАК "+ПредставлениеТаблицы+"
				|ГДЕ
				|	НЕ "+ПредставлениеТаблицы+".ПометкаУдаления
				|	И "+ПредставлениеТаблицы+".Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////";
				
				СписокИменИтоговыхТаблиц.Добавить(ИмяПараметраЭтапа+ПредставлениеТаблицы);
			КонецЕсли;
			
		КонецЦИкла;
	КонецЦИкла;
	
	Если СписокИменИтоговыхТаблиц.Количество() > 1 Тогда
		
		ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Этап КАК Этап,
		|	ВложенныйЗапрос.Пользователь КАК Пользователь,
		|	ВложенныйЗапрос.Подразделение КАК Подразделение,
		|	ВложенныйЗапрос.Офис КАК Офис,
		|	ВложенныйЗапрос.Документ КАК Документ,
		|	ВложенныйЗапрос.Клиент КАК Клиент,
		|	ВложенныйЗапрос.Проект КАК Проект,
		|	ВложенныйЗапрос.Количество КАК Количество,
		|	ВложенныйЗапрос.Сумма КАК Сумма,
		|	ВложенныйЗапрос.Валюта КАК Валюта,
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.Описание КАК Описание,
		|	ВложенныйЗапрос.Процесс КАК Процесс,
		|	ВложенныйЗапрос.РезультатВыполнения КАК РезультатВыполнения,
		|	ВложенныйЗапрос.Проведен КАК Проведен,
		|	ВложенныйЗапрос.Состояние КАК Состояние,
		|	ВложенныйЗапрос.Светофор КАК Светофор
		|ИЗ
		|	(";
		
		ЭтоПервоеВхождение = Истина;
		Для Каждого ЭлементСписка ИЗ СписокИменИтоговыхТаблиц Цикл
			
			ПредставлениеИтоговойТаблицы = ЭлементСписка.Значение;
			
			Если ЭтоПервоеВхождение Тогда
				ЭтоПервоеВхождение = Ложь;
			Иначе
				ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
				
			КонецЕсли;
			
			ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
			|ВЫБРАТЬ
			|	"+ПредставлениеИтоговойТаблицы+".Этап,
			|	"+ПредставлениеИтоговойТаблицы+".Пользователь,
			|	"+ПредставлениеИтоговойТаблицы+".Подразделение,
			|	"+ПредставлениеИтоговойТаблицы+".Офис,
			|	"+ПредставлениеИтоговойТаблицы+".Документ,
			|	"+ПредставлениеИтоговойТаблицы+".Клиент,
			|	"+ПредставлениеИтоговойТаблицы+".Проект,
			|	"+ПредставлениеИтоговойТаблицы+".Количество,
			|	"+ПредставлениеИтоговойТаблицы+".Сумма,
			|	"+ПредставлениеИтоговойТаблицы+".Валюта,
			|	"+ПредставлениеИтоговойТаблицы+".Дата,
			|	"+ПредставлениеИтоговойТаблицы+".АктивнаяУспешноНеУдачно,
			|	"+ПредставлениеИтоговойТаблицы+".Описание,
			|	"+ПредставлениеИтоговойТаблицы+".Процесс,
			|	"+ПредставлениеИтоговойТаблицы+".РезультатВыполнения,
			|	"+ПредставлениеИтоговойТаблицы+".Проведен,
			|	"+ПредставлениеИтоговойТаблицы+".Состояние,
			|	"""" КАК Светофор
			|ИЗ
			|	"+ПредставлениеИтоговойТаблицы+" КАК "+ПредставлениеИтоговойТаблицы;
		КонецЦИкла;
		
		ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + ") КАК ВложенныйЗапрос
		|ГДЕ
		//|	ВложенныйЗапрос.АктивнаяУспешноНеУдачно = &АктивнаяУспешноНеУдачно";
		|	ВложенныйЗапрос.АктивнаяУспешноНеУдачно //%УСЛОВИЯ_ПО_СОСТОЯНИЯМ";
	Иначе
		ПредставлениеИтоговойТаблицы = СписокИменИтоговыхТаблиц[0].Значение;
		
		ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
		|ВЫБРАТЬ
		|	"+ПредставлениеИтоговойТаблицы+".Этап,
		|	"+ПредставлениеИтоговойТаблицы+".Пользователь,
		|	"+ПредставлениеИтоговойТаблицы+".Подразделение,
		|	"+ПредставлениеИтоговойТаблицы+".Офис,
		|	"+ПредставлениеИтоговойТаблицы+".Документ,
		|	"+ПредставлениеИтоговойТаблицы+".Клиент,
		|	"+ПредставлениеИтоговойТаблицы+".Проект,
		|	"+ПредставлениеИтоговойТаблицы+".Количество,
		|	"+ПредставлениеИтоговойТаблицы+".Сумма,
		|	"+ПредставлениеИтоговойТаблицы+".Валюта,
		|	"+ПредставлениеИтоговойТаблицы+".Дата,
		|	"+ПредставлениеИтоговойТаблицы+".Описание,
		|	"+ПредставлениеИтоговойТаблицы+".Процесс,
		|	"+ПредставлениеИтоговойТаблицы+".РезультатВыполнения,
		|	"+ПредставлениеИтоговойТаблицы+".Проведен,
		|	"+ПредставлениеИтоговойТаблицы+".Состояние,
		|	"""" КАК Светофор
		|ИЗ
		|	"+ПредставлениеИтоговойТаблицы+" КАК "+ПредставлениеИтоговойТаблицы+"
		|ГДЕ
		//|	"+ПредставлениеИтоговойТаблицы+".АктивнаяУспешноНеУдачно = &АктивнаяУспешноНеУдачно";
		|	"+ПредставлениеИтоговойТаблицы+".АктивнаяУспешноНеУдачно //%УСЛОВИЯ_ПО_СОСТОЯНИЯМ";
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка ИЗ СписокИменИтоговыхТаблиц Цикл
		
		ПредставлениеИтоговойТаблицы = ЭлементСписка.Значение;
		ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ "+ПредставлениеИтоговойТаблицы;
	КонецЦикла;
	
	ТекстЗапросаЭтапаВоронкиПоДокументам = ТекстЗапросаЭтапаВоронкиПоДокументам + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапросаЭтапаВоронкиПоДокументам;
	
КонецФункции

// Проверяет принадлежность к перечисленным типам.
//
// Параметры:
//  Тип	 - СписокЗначений - Список типов значений.
// 
// Возвращаемое значение:
//  Булево - Возвращает принадлежность к типу.
//
Функция ЭтоТипОбъектаВоронкиПродаж(Тип) Экспорт
	
	СписокИсключаемыхТипов = Новый СписокЗначений;
	СписокИсключаемыхТипов.Добавить(Тип("СправочникСсылка.МаркетинговыеМероприятия"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.CRM_ОтчетОРаботе"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.СообщениеSMS"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.Анкета"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.УдалитьCRM_Событие"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.CRM_Взаимодействие"));
	СписокИсключаемыхТипов.Добавить(Тип("ДокументСсылка.удалитьCRM_Мероприятие"));
	
	
	Если СписокИсключаемыхТипов.НайтиПоЗначению(Тип)<>Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.СодержитТип(Тип);
	
КонецФункции

// Формирует записи в регистр "Состояния воронки продаж"
//
// Параметры:
//  Источник - Объект  - Объект источник.
//  Отказ	 - Булево - Отказ записи Источника. 
//
Процедура ПриЗаписиОбъектаВоронкиПродаж(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка И Источник.ДополнительныеСвойства.Свойство("ОтключитьБизнесЛогику") Тогда
		Возврат;
	КонецЕсли;
	
	// Записи по Интересам
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		
		Если ЗначениеЗаполнено(Источник.СостояниеИнтереса) Тогда
			
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") И Источник.ДополнительныеСвойства.Свойство("ОчиститьСостоянияВоронкиПродаж") Тогда
				НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
				НаборЗаписей.Записать();
			Иначе	
				НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
				НаборЗаписей.Отбор.СостояниеЭтапа.Установить(Перечисления.CRM_СостоянияЭтаповВоронки.Активный);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					АктивнаяЗапись = НаборЗаписей[0];
					Если АктивнаяЗапись.Этап <> Источник.СостояниеИнтереса Тогда
						Если Источник.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
							СостояниеЭтапа		= Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно;
						Иначе
							СостояниеЭтапа		= Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
						КонецЕсли;
						МенеджерЗаписи = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, АктивнаяЗапись, , "СостояниеЭтапа");
						МенеджерЗаписи.СостояниеЭтапа = СостояниеЭтапа;
						МенеджерЗаписи.ДатаЗавершения = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
						МенеджерЗаписи.Записать();
						НаборЗаписей.Очистить();
						НаборЗаписей.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			НаборЗаписей.Отбор.Этап.Установить(Источник.СостояниеИнтереса);
			НаборЗаписей.Отбор.СостояниеЭтапа.Установить(Перечисления.CRM_СостоянияЭтаповВоронки.Активный);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество()>0 Тогда
				НоваяЗапись = НаборЗаписей[0];
			Иначе
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ДатаНачала = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				НоваяЗапись.Объект = Источник.Ссылка;
				НоваяЗапись.Этап = Источник.СостояниеИнтереса;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Источник.Партнер) Тогда
				НоваяЗапись.Партнер			= Источник.Партнер;
			ИначеЕсли ЗначениеЗаполнено(Источник.ПотенциальныйКлиент) Тогда
				НоваяЗапись.Партнер			= Источник.ПотенциальныйКлиент;
			КонецЕсли;
			
			НоваяЗапись.Пользователь	= Источник.Ответственный;
			НоваяЗапись.Подразделение	= Источник.Подразделение;
			НоваяЗапись.Офис			= Источник.Офис;
			НоваяЗапись.ТипУслуги		= Источник.ТипУслуги;
			НоваяЗапись.Сумма			= Источник.ОжидаемаяВыручка;
			НоваяЗапись.Количество = 1;

			НоваяЗапись.Этап   = Источник.СостояниеИнтереса;
			Если Источник.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно;
				Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаЗавершения) Тогда
					НоваяЗапись.ДатаЗавершения = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				КонецЕсли;
			ИначеЕсли Источник.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
				Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаЗавершения) Тогда
					НоваяЗапись.ДатаЗавершения = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				КонецЕсли;
			Иначе
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.Активный;
				СледДействие = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Источник.Ссылка);
				Если СледДействие <> Неопределено Тогда
					НоваяЗапись.ПлановаяДата = СледДействие.ПланируемаяДата;
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Отбор.СостояниеЭтапа.Установить(НоваяЗапись.СостояниеЭтапа);
			НаборЗаписей.Записать();
		КонецЕсли;
		
	// Записи по БизнесПроцессам
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
	И ЗначениеЗаполнено(Источник.БизнесПроцесс)
	И ТипЗнч(Источник.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		
		НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.БизнесПроцесс);
		НаборЗаписей.Отбор.Этап.Установить(Источник.CRM_ТочкаМаршрута);
		
		НоваяЗапись					= НаборЗаписей.Добавить();
		НоваяЗапись.Объект			= Источник.БизнесПроцесс;
		НоваяЗапись.Этап			= Источник.CRM_ТочкаМаршрута;
		Если ЗначениеЗаполнено(Источник.ДатаИсполнения) Тогда
			НоваяЗапись.СостояниеЭтапа = ?(Источник.CRM_Неудача, Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно, Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно);
		Иначе	
			НоваяЗапись.СостояниеЭтапа	= Перечисления.CRM_СостоянияЭтаповВоронки.Активный;
		КонецЕсли;
		НоваяЗапись.Партнер			= Источник.БизнесПроцесс.Партнер;
		НоваяЗапись.КартаМаршрута	= Источник.БизнесПроцесс.КартаМаршрута;
		НоваяЗапись.Пользователь	= Источник.БизнесПроцесс.Ответственный;
		НоваяЗапись.Подразделение	= Источник.БизнесПроцесс.Подразделение;
		Если ЗначениеЗаполнено(НоваяЗапись.Подразделение) Тогда
			НоваяЗапись.Офис			= НоваяЗапись.Подразделение.CRM_Офис;
		КонецЕсли;
		НоваяЗапись.Сумма			= Источник.БизнесПроцесс.Сумма;
		НоваяЗапись.ПлановаяДата	= Источник.СрокИсполнения;
		НоваяЗапись.ДатаНачала		= Источник.ДатаНачала;
		НоваяЗапись.ДатаЗавершения	= Источник.ДатаИсполнения;
		НоваяЗапись.Количество = 1;
		НаборЗаписей.Записать();
		
	ИначеЕсли ЭтоТипОбъектаВоронкиПродаж(ТипЗнч(Источник.Ссылка)) Тогда
		
		Если Источник.ПометкаУдаления Тогда
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			НаборЗаписей.Записать();
			Возврат;
		КонецЕсли;
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект", Источник.Ссылка);
		
		Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			
			НоваяЗапись					= НаборЗаписей.Добавить();
			НоваяЗапись.Объект			= Источник.Ссылка;
			НоваяЗапись.Этап			= ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.РассылкаЭлектронныхПисем;
			НоваяЗапись.СостояниеЭтапа	= Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
			НоваяЗапись.Пользователь	= Источник.Ответственный;
			НоваяЗапись.Подразделение	= Источник.Подразделение;
			Если ЗначениеЗаполнено(НоваяЗапись.Подразделение) Тогда
				НоваяЗапись.Офис			= НоваяЗапись.Подразделение.CRM_Офис;
			КонецЕсли;
			НоваяЗапись.ПлановаяДата	= Источник.Дата;
			НоваяЗапись.ДатаНачала		= Источник.Дата;
			НоваяЗапись.ДатаЗавершения	= Источник.Дата;
			НоваяЗапись.Количество = Источник.Получатели.Количество();

			НаборЗаписей.Записать();
			
		ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			
			СтруктураЗаписи.Вставить("Пользователь", Источник.Ответственный);
			СтруктураЗаписи.Вставить("Подразделение", Источник.Подразделение);
			Если ЗначениеЗаполнено(СтруктураЗаписи.Подразделение) Тогда
				СтруктураЗаписи.Вставить("Офис", СтруктураЗаписи.Подразделение.CRM_Офис);
			КонецЕсли;
			СтруктураЗаписи.Вставить("ПлановаяДата", Источник.ДатаНачала);
			СтруктураЗаписи.Вставить("ДатаНачала", Источник.ДатаНачала);
			СтруктураЗаписи.Вставить("ДатаЗавершения", Источник.ДатаОкончания);
			СтруктураЗаписи.Вставить("Этап", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Телемаркетинг);
			
			Если НЕ Источник.Завершен Тогда
				НоваяЗапись	= НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.Активный;
				НоваяЗапись.Количество = Источник.Участники.Количество();
			Иначе
				Успешных = Источник.Участники.НайтиСтроки(Новый Структура("Обработан", Истина)).Количество();
				НеУдачных = Источник.Участники.НайтиСтроки(Новый Структура("НеДозвонились", Истина)).Количество();
				Если Успешных > 0 Тогда
					НоваяЗапись	= НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
					НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
					НоваяЗапись.Количество = Успешных;
				КонецЕсли;
				Если НеУдачных > 0 Тогда
					НоваяЗапись	= НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
					НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно;
					НоваяЗапись.Количество = НеУдачных;
				КонецЕсли;
				Если НеУдачных = 0 И Успешных = 0 Тогда
					НоваяЗапись	= НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
					НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно;
					НоваяЗапись.Количество = 1;
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Записать();
			
		ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.СообщениеSMS") Тогда
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			
			СтруктураЗаписи.Вставить("Пользователь", Источник.Ответственный);
			СтруктураЗаписи.Вставить("Подразделение", Источник.CRM_ПодразделениеЗаказчик);
			Если ЗначениеЗаполнено(СтруктураЗаписи.Подразделение) Тогда
				СтруктураЗаписи.Вставить("Офис", СтруктураЗаписи.Подразделение.CRM_Офис);
			КонецЕсли;
			СтруктураЗаписи.Вставить("ПлановаяДата", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаНачала", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаЗавершения", Источник.Дата);
			СтруктураЗаписи.Вставить("Этап", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.СМС);
			
			Успешных = 0;
			НеУдачных = 0;
			Для каждого Сообщение из Источник.Адресаты Цикл
				Если Сообщение.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Исходящее
					ИЛИ Сообщение.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером
					ИЛИ Сообщение.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Доставлено
					ИЛИ Сообщение.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером Тогда
					
					Успешных = Успешных+1;
					
				ИначеЕсли Сообщение.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру
					ИЛИ Сообщение.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером
					ИЛИ Сообщение.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеДоставлено
					ИЛИ Сообщение.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером Тогда
					
					НеУдачных = НеУдачных+1;
					
				КонецЕсли;
			КонецЦикла;
			Если Успешных > 0 Тогда
				НоваяЗапись	= НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
				НоваяЗапись.Количество = Успешных;
			КонецЕсли;
			Если НеУдачных > 0 Тогда
				НоваяЗапись	= НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно;
				НоваяЗапись.Количество = НеУдачных;
			КонецЕсли;
			НаборЗаписей.Записать();
			
		ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			
			СтруктураЗаписи.Вставить("Пользователь", Источник.Менеджер);
			СтруктураЗаписи.Вставить("Подразделение", Источник.CRM_Подразделение);
			Если ЗначениеЗаполнено(СтруктураЗаписи.Подразделение) Тогда
				СтруктураЗаписи.Вставить("Офис", СтруктураЗаписи.Подразделение.CRM_Офис);
			КонецЕсли;
			СтруктураЗаписи.Вставить("ПлановаяДата", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаНачала", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаЗавершения", Источник.Дата);
			СтруктураЗаписи.Вставить("Партнер", Источник.Партнер);
			СтруктураЗаписи.Вставить("Сумма", Источник.СуммаДокумента);
			СтруктураЗаписи.Вставить("Этап", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.КоммерческоеПредложение);
			
			НоваяЗапись	= НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
			НоваяЗапись.Количество = 1;
			Если Источник.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина)).Количество() > 0 Тогда
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
			Иначе	
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно;
			КонецЕсли;

			НаборЗаписей.Записать();
			
		ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка." + "CRM_СчетНаОплатуПокупателю") Тогда
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			
			СтруктураЗаписи.Вставить("Пользователь", Источник.Ответственный);
			СтруктураЗаписи.Вставить("Подразделение", Источник.Подразделение);
			Если ЗначениеЗаполнено(СтруктураЗаписи.Подразделение) Тогда
				СтруктураЗаписи.Вставить("Офис", СтруктураЗаписи.Подразделение.CRM_Офис);
			КонецЕсли;
			СтруктураЗаписи.Вставить("ПлановаяДата", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаНачала", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаЗавершения", Источник.Дата);
			СтруктураЗаписи.Вставить("Партнер", Источник.Партнер);
			СтруктураЗаписи.Вставить("Сумма", Источник.СуммаДокумента);
			СтруктураЗаписи.Вставить("СуммаОтгружено", Источник.СуммаОтгрузки);
			СтруктураЗаписи.Вставить("СуммаОплачено", Источник.СуммаОплаты);
			СтруктураЗаписи.Вставить("Этап", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов["Счет"]);
			
			НоваяЗапись	= НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
			НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
			НоваяЗапись.Количество = 1;
			НаборЗаписей.Записать();
			
		ИначеЕсли  ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			
			СтруктураЗаписи.Вставить("Пользователь", Источник.Ответственный);
			СтруктураЗаписи.Вставить("Подразделение", Источник.Ответственный.Подразделение);
			Если ЗначениеЗаполнено(СтруктураЗаписи.Подразделение) Тогда
				СтруктураЗаписи.Вставить("Офис", СтруктураЗаписи.Подразделение.CRM_Офис);
			КонецЕсли;
			СтруктураЗаписи.Вставить("ПлановаяДата", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаНачала", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаЗавершения", Источник.Дата);
			//	СтруктураЗаписи.Вставить("Партнер", Источник.Партнер);
			//	СтруктураЗаписи.Вставить("Сумма", Источник.СуммаДокумента);
			//	СтруктураЗаписи.Вставить("СуммаОтгружено", Источник.СуммаОтгрузки);
			//	СтруктураЗаписи.Вставить("СуммаОплачено", Источник.СуммаОплаты);
			СтруктураЗаписи.Вставить("Этап", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Заявка);
			
			
			
			НоваяЗапись	= НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	CRM_СостоянияЛидов.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.CRM_СостоянияЛидов КАК CRM_СостоянияЛидов
			|ГДЕ
			|	CRM_СостоянияЛидов.Лид = &Лид";
			
			Запрос.УстановитьПараметр("Лид", Источник.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.Активный;
						
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если   ВыборкаДетальныеЗаписи.Состояние  = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
				НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно;
				ИначеЕсли ВыборкаДетальныеЗаписи.Состояние  = Справочники.CRM_СостоянияЛидов.Сконвертирован Тогда
					НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
				КонецЕсли;
									
			КонецЦикла;
			
			
			
			НоваяЗапись.Количество = 1;
			НаборЗаписей.Записать();
			
			
		Иначе
			
			НаборЗаписей = РегистрыСведений.CRM_СостоянияВоронкиПродаж.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			
			МетаданныеДокумента = Источник.Метаданные();
			
			Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
				СтруктураЗаписи.Вставить("Пользователь", Источник.Ответственный);
			КонецЕсли;
			
			Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) Тогда
				СтруктураЗаписи.Вставить("Подразделение", Источник.Подразделение);
			ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
				СтруктураЗаписи.Вставить("Пользователь", Источник.Ответственный.Подразделение);
			КонецЕсли;
							
			Если СтруктураЗаписи.Свойство("Подразделение") И ЗначениеЗаполнено(СтруктураЗаписи.Подразделение) Тогда
				СтруктураЗаписи.Вставить("Офис", СтруктураЗаписи.Подразделение.CRM_Офис);
			КонецЕсли;
			СтруктураЗаписи.Вставить("ПлановаяДата", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаНачала", Источник.Дата);
			СтруктураЗаписи.Вставить("ДатаЗавершения", Источник.Дата);
			
			Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента) Тогда
				СтруктураЗаписи.Вставить("Партнер", Источник.Партнер);
			КонецЕсли;
			
			ВыборкаПВХ = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Выбрать();
			Пока ВыборкаПВХ.Следующий() Цикл
				Если ВыборкаПВХ.ТипЗначения.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
					СтруктураЗаписи.Вставить("Этап", ВыборкаПВХ.Ссылка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			НоваяЗапись	= НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
			НоваяЗапись.СостояниеЭтапа = Перечисления.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно;
			НоваяЗапись.Количество = 1;
			НаборЗаписей.Записать();
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Возвращает тест запроса с данными по воронке продаж
//
// Параметры:
//  Форма	- УправляемаФорма - Форма, из которой была вызвана данная функция.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ВоронкаПродажПолучитьТекстЗапроса(Форма) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВоронкиПродаж.Ссылка КАК Этап,
	|	ВоронкиПродажСостав.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВоронкиПродаж.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ ЭтапыТочекМаршрута
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж.Состав КАК ВоронкиПродажСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ВоронкиПродаж КАК ВоронкиПродаж
	|		ПО (ВоронкиПродаж.Ссылка = ВоронкиПродажСостав.Ссылка)
	|			И (ВоронкиПродаж.Родитель = &Воронка)
	|			И (НЕ ВоронкиПродаж.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	CRM_СостоянияВоронкиПродаж.Объект КАК Объект,
	|	МИНИМУМ(CRM_СостоянияВоронкиПродаж.ДатаНачала) КАК ПерваяДата,
	|	МАКСИМУМ(ЭтапыТочекМаршрута.Порядок) КАК ПорядокМакс,
	|	МАКСИМУМ(CRM_СостоянияВоронкиПродаж.Сумма) КАК Сумма
	|ПОМЕСТИТЬ CRM_СостоянияВоронкиПродажОбъекты
	|ИЗ
	|	РегистрСведений.CRM_СостоянияВоронкиПродаж КАК CRM_СостоянияВоронкиПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыТочекМаршрута КАК ЭтапыТочекМаршрута
	|		ПО (ЭтапыТочекМаршрута.ТочкаМаршрута = CRM_СостоянияВоронкиПродаж.Этап)
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО (ПартнерыСегмента.Партнер = CRM_СостоянияВоронкиПродаж.Партнер)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИсточникиПервичногоИнтересаСрезПоследних.Период КАК Период,
	|			ИсточникиПервичногоИнтересаСрезПоследних.Партнер КАК Партнер,
	|			ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК ИсточникПривлечения,
	|			ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК ЗначениеИсточникаПривлечения
	|		ИЗ
	|			РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних КАК ИсточникиПервичногоИнтересаСрезПоследних
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(ИсточникиПервичногоИнтересаСрезПоследних.Период) КАК Период,
	|					ИсточникиПервичногоИнтересаСрезПоследних.Партнер КАК Партнер
	|				ИЗ
	|					РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних КАК ИсточникиПервичногоИнтересаСрезПоследних
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ИсточникиПервичногоИнтересаСрезПоследних.Партнер) КАК МаксДатыСреза
	|				ПО ИсточникиПервичногоИнтересаСрезПоследних.Период = МаксДатыСреза.Период
	|					И ИсточникиПервичногоИнтересаСрезПоследних.Партнер = МаксДатыСреза.Партнер) КАК СрезПервичногоИнтереса
	|		ПО CRM_СостоянияВоронкиПродаж.Партнер = СрезПервичногоИнтереса.Партнер
	|			И CRM_СостоянияВоронкиПродаж.Объект.Дата >= СрезПервичногоИнтереса.Период}
	|ГДЕ
	|	ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродаж.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА CRM_СостоянияВоронкиПродаж.ДатаЗавершения МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИНАЧЕ ВЫБОР
	|					КОГДА CRM_СостоянияВоронкиПродаж.ПлановаяДата <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА CRM_СостоянияВоронкиПродаж.ПлановаяДата МЕЖДУ &НачалоПериода И &КонецПериода
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ
	|	И (ВЫБОР
	|				КОГДА CRM_СостоянияВоронкиПродаж.Объект ССЫЛКА Документ.CRM_Интерес
	|					ТОГДА НЕ ВЫРАЗИТЬ(CRM_СостоянияВоронкиПродаж.Объект КАК Документ.CRM_Интерес).ПометкаУдаления
	|				КОГДА CRM_СостоянияВоронкиПродаж.Объект ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					ТОГДА НЕ ВЫРАЗИТЬ(CRM_СостоянияВоронкиПродаж.Объект КАК БизнесПроцесс.CRM_БизнесПроцесс).ПометкаУдаления
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	И (ВЫБОР
	|				КОГДА CRM_СостоянияВоронкиПродаж.Объект ССЫЛКА Документ.CRM_Интерес
	|					ТОГДА ВЫРАЗИТЬ(CRM_СостоянияВоронкиПродаж.Объект КАК Документ.CRM_Интерес).ДатаЗакрытия
	|				КОГДА CRM_СостоянияВоронкиПродаж.Объект ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					ТОГДА ВЫРАЗИТЬ(CRM_СостоянияВоронкиПродаж.Объект КАК БизнесПроцесс.CRM_БизнесПроцесс).ДатаЗавершения
	|				ИНАЧЕ CRM_СостоянияВоронкиПродаж.ДатаЗавершения
	|			КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИЛИ ВЫБОР
	|				КОГДА CRM_СостоянияВоронкиПродаж.Объект ССЫЛКА Документ.CRM_Интерес
	|					ТОГДА ВЫРАЗИТЬ(CRM_СостоянияВоронкиПродаж.Объект КАК Документ.CRM_Интерес).ДатаЗакрытия
	|				КОГДА CRM_СостоянияВоронкиПродаж.Объект ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					ТОГДА ВЫРАЗИТЬ(CRM_СостоянияВоронкиПродаж.Объект КАК БизнесПроцесс.CRM_БизнесПроцесс).ДатаЗавершения
	|				ИНАЧЕ CRM_СостоянияВоронкиПродаж.ДатаЗавершения
	|			КОНЕЦ = ДАТАВРЕМЯ(1, 1, 1))
	|{ГДЕ
	|	CRM_СостоянияВоронкиПродаж.Пользователь КАК Пользователь,
	|	CRM_СостоянияВоронкиПродаж.Офис КАК Офис,
	|	CRM_СостоянияВоронкиПродаж.ТипУслуги КАК ТипУслуги,
	|	CRM_СостоянияВоронкиПродаж.Подразделение КАК Подразделение,
	|	CRM_СостоянияВоронкиПродаж.Партнер.БизнесРегион КАК БизнесРегион,
	|	CRM_СостоянияВоронкиПродаж.СостояниеЭтапа КАК СостояниеЭтапа,
	|	ПартнерыСегмента.Сегмент КАК Сегмент,
	|	(CRM_СостоянияВоронкиПродаж.Партнер.ДатаРегистрации > &НачалоПериода
	|			ИЛИ CRM_СостоянияВоронкиПродаж.Партнер ССЫЛКА Справочник.CRM_ПотенциальныеКлиенты) КАК НовыйКлиент,
	|	СрезПервичногоИнтереса.ИсточникПривлечения КАК ИсточникПривлечения,
	|	СрезПервичногоИнтереса.ЗначениеИсточникаПривлечения КАК ЗначениеИсточникаПривлечения,
	|	(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродаж.Объект ССЫЛКА Документ.CRM_Интерес
	|				ТОГДА ВЫРАЗИТЬ(CRM_СостоянияВоронкиПродаж.Объект КАК Документ.CRM_Интерес).Завершен
	|			КОГДА CRM_СостоянияВоронкиПродаж.Объект ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|				ТОГДА ВЫРАЗИТЬ(CRM_СостоянияВоронкиПродаж.Объект КАК БизнесПроцесс.CRM_БизнесПроцесс).ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Завершено}
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_СостоянияВоронкиПродаж.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ПОМЕСТИТЬ КалендарныйГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(CRM_СостоянияВоронкиПродажОбъекты.ПерваяДата) КАК ПерваяДата
	|		ИЗ
	|			CRM_СостоянияВоронкиПродажОбъекты КАК CRM_СостоянияВоронкиПродажОбъекты) КАК ВложенныйЗапрос
	|		ПО КалендарныеГрафики.ДатаГрафика >= ВложенныйЗапрос.ПерваяДата
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДатаГрафика <= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_СостоянияВоронкиПродажОбъекты.Объект КАК Объект,
	|	ЭтапыТочекМаршрута.Этап КАК Этап,
	|	CRM_СостоянияВоронкиПродажОбъекты.ПерваяДата КАК ПерваяДата,
	|	CRM_СостоянияВоронкиПродажОбъекты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ЭтапыОбъектов
	|ИЗ
	|	CRM_СостоянияВоронкиПродажОбъекты КАК CRM_СостоянияВоронкиПродажОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭтапыТочекМаршрута КАК ЭтапыТочекМаршрута
	|		ПО (ЭтапыТочекМаршрута.Порядок <= CRM_СостоянияВоронкиПродажОбъекты.ПорядокМакс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыОбъектов.Этап КАК Этап,
	|	ЭтапыОбъектов.ПерваяДата КАК ПерваяДата,
	|	CRM_СостоянияВоронкиПродаж.Объект КАК Объект,
	|	CRM_СостоянияВоронкиПродаж.СостояниеЭтапа КАК СостояниеЭтапа,
	|	CRM_СостоянияВоронкиПродаж.Партнер КАК Партнер,
	|	CRM_СостоянияВоронкиПродаж.Пользователь КАК Пользователь,
	|	CRM_СостоянияВоронкиПродаж.Подразделение КАК Подразделение,
	|	CRM_СостоянияВоронкиПродаж.Офис КАК Офис,
	|	CRM_СостоянияВоронкиПродаж.КартаМаршрута КАК КартаМаршрута,
	|	CRM_СостоянияВоронкиПродаж.ТипУслуги КАК ТипУслуги,
	|	CRM_СостоянияВоронкиПродаж.ДатаНачала КАК ДатаНачала,
	|	CRM_СостоянияВоронкиПродаж.ДатаЗавершения КАК ДатаЗавершения,
	|	CRM_СостоянияВоронкиПродаж.ПлановаяДата КАК ПлановаяДата,
	|	ВЫБОР
	|		КОГДА CRM_СостоянияВоронкиПродаж.Сумма = 0
	|				ИЛИ CRM_СостоянияВоронкиПродаж.Сумма ЕСТЬ NULL
	|			ТОГДА ЭтапыОбъектов.Сумма
	|		ИНАЧЕ CRM_СостоянияВоронкиПродаж.Сумма
	|	КОНЕЦ КАК Сумма,
	|	CRM_СостоянияВоронкиПродаж.СуммаОтгружено КАК СуммаОтгружено,
	|	CRM_СостоянияВоронкиПродаж.СуммаОплачено КАК СуммаОплачено,
	|	CRM_СостоянияВоронкиПродаж.Количество КАК Количество
	|ПОМЕСТИТЬ CRM_СостоянияВоронкиПродажОтбор
	|ИЗ
	|	ЭтапыОбъектов КАК ЭтапыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СостоянияВоронкиПродаж КАК CRM_СостоянияВоронкиПродаж
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыТочекМаршрута КАК ЭтапыТочекМаршрута
	|			ПО CRM_СостоянияВоронкиПродаж.Этап = ЭтапыТочекМаршрута.ТочкаМаршрута
	|		ПО (ЭтапыТочекМаршрута.Этап = ЭтапыОбъектов.Этап)
	|			И ЭтапыОбъектов.Объект = CRM_СостоянияВоронкиПродаж.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыОбъектов.Этап КАК Этап,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияЭтаповВоронки.Активный)
	|				ТОГДА CRM_СостоянияВоронкиПродажОтбор.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоАктивных,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно)
	|				ТОГДА CRM_СостоянияВоронкиПродажОтбор.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоУспешных,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно)
	|				ТОГДА CRM_СостоянияВоронкиПродажОтбор.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНеудачных,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПропущенных,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияЭтаповВоронки.Активный)
	|				ТОГДА CRM_СостоянияВоронкиПродажОтбор.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаАктивных,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияЭтаповВоронки.ЗавершенУспешно)
	|				ТОГДА CRM_СостоянияВоронкиПродажОтбор.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаУспешных,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияЭтаповВоронки.ЗавершенНеудачно)
	|				ТОГДА CRM_СостоянияВоронкиПродажОтбор.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНеудачных,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа ЕСТЬ NULL
	|				ТОГДА ЭтапыОбъектов.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПропущенных
	|ПОМЕСТИТЬ ИтогиПоЭтапам
	|ИЗ
	|	ЭтапыОбъектов КАК ЭтапыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			CRM_СостоянияВоронкиПродажОтбор.Этап КАК Этап,
	|			CRM_СостоянияВоронкиПродажОтбор.Объект КАК Объект,
	|			МИНИМУМ(CRM_СостоянияВоронкиПродажОтбор.СостояниеЭтапа) КАК СостояниеЭтапа,
	|			МАКСИМУМ(CRM_СостоянияВоронкиПродажОтбор.Сумма) КАК Сумма,
	|			МАКСИМУМ(CRM_СостоянияВоронкиПродажОтбор.СуммаОтгружено) КАК СуммаОтгружено,
	|			МАКСИМУМ(CRM_СостоянияВоронкиПродажОтбор.СуммаОплачено) КАК СуммаОплачено,
	|			МАКСИМУМ(CRM_СостоянияВоронкиПродажОтбор.Количество) КАК Количество
	|		ИЗ
	|			CRM_СостоянияВоронкиПродажОтбор КАК CRM_СостоянияВоронкиПродажОтбор
	|		
	|		СГРУППИРОВАТЬ ПО
	|			CRM_СостоянияВоронкиПродажОтбор.Этап,
	|			CRM_СостоянияВоронкиПродажОтбор.Объект) КАК CRM_СостоянияВоронкиПродажОтбор
	|		ПО ЭтапыОбъектов.Объект = CRM_СостоянияВоронкиПродажОтбор.Объект
	|			И ЭтапыОбъектов.Этап = CRM_СостоянияВоронкиПродажОтбор.Этап
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыОбъектов.Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_СостоянияВоронкиПродажОтбор.Этап КАК Этап,
	|	CRM_СостоянияВоронкиПродажОтбор.Объект КАК Объект,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.ДатаНачала <= КалендарныйГрафик.ДатаГрафика
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВремяВыполненияВДнях,
	|	СУММА(ВЫБОР
	|			КОГДА CRM_СостоянияВоронкиПродажОтбор.ПерваяДата <= КалендарныйГрафик.ДатаГрафика
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВремяВыполненияВДняхСНачала
	|ПОМЕСТИТЬ ДлительностьПоЭтапамОбъектов
	|ИЗ
	|	CRM_СостоянияВоронкиПродажОтбор КАК CRM_СостоянияВоронкиПродажОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ КалендарныйГрафик КАК КалендарныйГрафик
	|		ПО CRM_СостоянияВоронкиПродажОтбор.ПерваяДата <= КалендарныйГрафик.ДатаГрафика
	|			И (ВЫБОР
	|				КОГДА CRM_СостоянияВоронкиПродажОтбор.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &ТекущаяДата
	|				ИНАЧЕ CRM_СостоянияВоронкиПродажОтбор.ДатаЗавершения
	|			КОНЕЦ >= КалендарныйГрафик.ДатаГрафика)
	|			И (КалендарныйГрафик.ДеньВключенВГрафик)
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_СостоянияВоронкиПродажОтбор.Этап,
	|	CRM_СостоянияВоронкиПродажОтбор.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДлительностьПоЭтапамОбъектов.Этап КАК Этап,
	|	СУММА(ДлительностьПоЭтапамОбъектов.ВремяВыполненияВДнях) КАК ВремяВыполненияВДнях,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ДлительностьПоЭтапамОбъектов.Объект) <> 0
	|			ТОГДА СУММА(ДлительностьПоЭтапамОбъектов.ВремяВыполненияВДняхСНачала) / КОЛИЧЕСТВО(ДлительностьПоЭтапамОбъектов.Объект)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяВыполненияВДняхСНачалаСред
	|ПОМЕСТИТЬ ДлительностьПоЭтапам
	|ИЗ
	|	ДлительностьПоЭтапамОбъектов КАК ДлительностьПоЭтапамОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДлительностьПоЭтапамОбъектов.Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыТочекМаршрута.Этап КАК Этап,
	|	МАКСИМУМ(ЕСТЬNULL(ИтогиПоЭтапам.КоличествоАктивных, 0)) КАК КоличествоАктивных,
	|	МАКСИМУМ(ЕСТЬNULL(ИтогиПоЭтапам.КоличествоУспешных, 0)) КАК КоличествоУспешных,
	|	МАКСИМУМ(ЕСТЬNULL(ИтогиПоЭтапам.КоличествоНеудачных, 0)) КАК КоличествоНеудачных,
	|	МАКСИМУМ(ЕСТЬNULL(ИтогиПоЭтапам.КоличествоПропущенных, 0)) КАК КоличествоПропущенных,
	|	МАКСИМУМ(ЕСТЬNULL(ИтогиПоЭтапам.СуммаАктивных, 0)) КАК СуммаАктивных,
	|	МАКСИМУМ(ЕСТЬNULL(ИтогиПоЭтапам.СуммаУспешных, 0)) КАК СуммаУспешных,
	|	МАКСИМУМ(ЕСТЬNULL(ИтогиПоЭтапам.СуммаНеудачных, 0)) КАК СуммаНеудачных,
	|	МАКСИМУМ(ЕСТЬNULL(ИтогиПоЭтапам.СуммаПропущенных, 0)) КАК СуммаПропущенных,
	|	МАКСИМУМ(ЕСТЬNULL(ДлительностьПоЭтапам.ВремяВыполненияВДнях, 0)) КАК ВремяВыполненияВДнях,
	|	МАКСИМУМ(ЕСТЬNULL(ДлительностьПоЭтапам.ВремяВыполненияВДняхСНачалаСред, 0)) КАК ВремяВыполненияВДняхСНачалаСред,
	|	ЭтапыТочекМаршрута.Порядок КАК Порядок
	|ИЗ
	|	ЭтапыТочекМаршрута КАК ЭтапыТочекМаршрута
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиПоЭтапам КАК ИтогиПоЭтапам
	|		ПО (ИтогиПоЭтапам.Этап = ЭтапыТочекМаршрута.Этап)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДлительностьПоЭтапам КАК ДлительностьПоЭтапам
	|		ПО (ДлительностьПоЭтапам.Этап = ЭтапыТочекМаршрута.Этап)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыТочекМаршрута.Этап,
	|	ЭтапыТочекМаршрута.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВоронкаПродажПолучитьТекстЗапросаРасшифрокиПоЭтапам() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВоронкаПродажПолучитьТекстЗапросаФильтраДокументов(Форма) Экспорт
	
	ТекстЗапросаПоДокументам = "";
	Если Форма.ЕстьЭтапыПоДокументам Тогда
		
		СоответствияПараметровЗапросаПоДокументам = Новый Соответствие;
		
		
		Для Каждого ЭтапВоронки ИЗ Форма.ЭтапыТекущейВоронки Цикл
			Если ЭтапВоронки.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
				
				ИмяПараметраЭтапа = "_"+СтрЗаменить(ЭтапВоронки.Этап.УникальныйИдентификатор(),"-","_");
				СоответствияПараметровЗапросаПоДокументам.Вставить(ИмяПараметраЭтапа,ЭтапВоронки.Этап);
				
				СписокИменИтоговыхТаблиц = Новый СписокЗначений;
				
				ТекстЗапросаЭтапаВоронкиПоДокументам = "";
				
				Для Каждого ЭлементЭтапа ИЗ ЭтапВоронки.Состав Цикл
					
					КартаМаршрутаЭлемента	= ЭлементЭтапа.КартаМаршрута;
					ЭтапЭлемента			= ЭтапВоронки.Этап;
					МассивТипов				= ЭлементЭтапа.ТочкаМаршрута.ТипЗначения.Типы();
					
					
					Для Каждого ТипДокумента ИЗ МассивТипов Цикл
						
						МетаданныеДокумента		= Метаданные.НайтиПоТипу(ТипДокумента);
						ПолноеИмяДокумента		= МетаданныеДокумента.ПолноеИмя();
						ПредставлениеТаблицы	= СтрЗаменить(ПолноеИмяДокумента,"Документ.","");
						Если СтрНайти(ТекстЗапросаПоДокументам, ПредставлениеТаблицы) > 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТипДокумента = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
							
							ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам+ ?(ЗначениеЗаполнено(ТекстЗапросаПоДокументам),
							"
							|ОБЪЕДИНИТЬ ВСЕ
							|","") 
																				+"ВЫБРАТЬ
							                                                      |	CRM_РассылкаЭлектронныхПисем.Ссылка,
							                                                      |	CRM_РассылкаЭлектронныхПисемПолучатели.Партнер КАК Партнер,
							                                                      |	CRM_РассылкаЭлектронныхПисемПолучатели.Партнер.БизнесРегион КАК БизнесРегион,
							                                                      |	CRM_РассылкаЭлектронныхПисемПолучатели.Партнер ССЫЛКА Справочник.Партнеры
							                                                      |			И CRM_РассылкаЭлектронныхПисемПолучатели.Партнер.ДатаРегистрации > &ДатаНачала
							                                                      |		ИЛИ CRM_РассылкаЭлектронныхПисемПолучатели.Партнер ССЫЛКА Справочник.CRM_ПотенциальныеКлиенты
							                                                      |			И CRM_РассылкаЭлектронныхПисемПолучатели.Партнер <> ЗНАЧЕНИЕ(Справочник.CRM_ПотенциальныеКлиенты.ПустаяССылка) КАК НовыйКлиент,
							                                                      |	ПартнерыСегмента.Сегмент,
							                                                      |	CRM_РассылкаЭлектронныхПисем.Дата
							                                                      |ИЗ
							                                                      |	Документ.CRM_РассылкаЭлектронныхПисем КАК CRM_РассылкаЭлектронныхПисем
							                                                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_РассылкаЭлектронныхПисем.Получатели КАК CRM_РассылкаЭлектронныхПисемПолучатели
							                                                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
							                                                      |			ПО CRM_РассылкаЭлектронныхПисемПолучатели.Партнер = ПартнерыСегмента.Партнер
							                                                      |		ПО (CRM_РассылкаЭлектронныхПисемПолучатели.Ссылка = CRM_РассылкаЭлектронныхПисем.Ссылка)";
							
						ИначеЕсли ТипДокумента = Тип("ДокументСсылка.удалитьCRM_Мероприятие") Тогда
							
							ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам+ ?(ЗначениеЗаполнено(ТекстЗапросаПоДокументам),
							"
							|ОБЪЕДИНИТЬ ВСЕ
							|","") 
																				+"ВЫБРАТЬ
							                                                      |	удалитьCRM_Мероприятие.Ссылка,
							                                                      |	CRM_МероприятиеСторонниеЛица.Партнер,
							                                                      |	CRM_МероприятиеСторонниеЛица.Партнер.БизнесРегион КАК БизнесРегион,
							                                                      |	CRM_МероприятиеСторонниеЛица.Партнер ССЫЛКА Справочник.Партнеры
							                                                      |		И CRM_МероприятиеСторонниеЛица.Партнер.ДатаРегистрации > &ДатаНачала КАК НовыйКлиент,
							                                                      |	ПартнерыСегмента.Сегмент,
							                                                      |	удалитьCRM_Мероприятие.Дата
							                                                      |ИЗ
							                                                      |	Документ.удалитьCRM_Мероприятие КАК удалитьCRM_Мероприятие
							                                                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.удалитьCRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
							                                                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
							                                                      |			ПО CRM_МероприятиеСторонниеЛица.Партнер = ПартнерыСегмента.Партнер
							                                                      |		ПО (CRM_МероприятиеСторонниеЛица.Ссылка = удалитьCRM_Мероприятие.Ссылка)";
							
						ИначеЕсли ТипДокумента = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
							
							ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам+ ?(ЗначениеЗаполнено(ТекстЗапросаПоДокументам),
							"
							|ОБЪЕДИНИТЬ ВСЕ
							|","") 
																				+"ВЫБРАТЬ
							                                                      |	CRM_Телемаркетинг.Ссылка,
							                                                      |	CRM_ТелемаркетингУчастники.Партнер,
							                                                      |	CRM_ТелемаркетингУчастники.Партнер.БизнесРегион КАК БизнесРегион,
							                                                      |	CRM_ТелемаркетингУчастники.Партнер ССЫЛКА Справочник.Партнеры
							                                                      |			И CRM_ТелемаркетингУчастники.Партнер.ДатаРегистрации > &ДатаНачала
							                                                      |		ИЛИ CRM_ТелемаркетингУчастники.Партнер ССЫЛКА Справочник.CRM_ПотенциальныеКлиенты
							                                                      |			И CRM_ТелемаркетингУчастники.Партнер <> ЗНАЧЕНИЕ(Справочник.CRM_ПотенциальныеКлиенты.ПустаяССылка) КАК НовыйКлиент,
							                                                      |	ПартнерыСегмента.Сегмент,
							                                                      |	CRM_Телемаркетинг.Дата
							                                                      |ИЗ
							                                                      |	Документ.CRM_Телемаркетинг КАК CRM_Телемаркетинг
							                                                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Телемаркетинг.Участники КАК CRM_ТелемаркетингУчастники
							                                                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
							                                                      |			ПО CRM_ТелемаркетингУчастники.Партнер = ПартнерыСегмента.Партнер
							                                                      |		ПО (CRM_ТелемаркетингУчастники.Ссылка = CRM_Телемаркетинг.Ссылка)";

						ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СообщениеSMS") Тогда
							
							ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам+ ?(ЗначениеЗаполнено(ТекстЗапросаПоДокументам),
							"
							|ОБЪЕДИНИТЬ ВСЕ
							|","") 
																				+"ВЫБРАТЬ
							                                                      |	СообщениеSMS.Ссылка,
							                                                      |	ВЫБОР
							                                                      |		КОГДА СообщениеSMSАдресаты.Контакт ССЫЛКА Справочник.КонтактныеЛицаПартнеров
							                                                      |			ТОГДА СообщениеSMSАдресаты.Контакт.Владелец
							                                                      |		ИНАЧЕ СообщениеSMSАдресаты.Контакт
							                                                      |	КОНЕЦ КАК Партнер,
							                                                      |	СообщениеSMSАдресаты.Контакт.БизнесРегион КАК БизнесРегион,
							                                                      |	СообщениеSMSАдресаты.Контакт ССЫЛКА Справочник.Партнеры
							                                                      |			И СообщениеSMSАдресаты.Контакт.ДатаРегистрации > &ДатаНачала
							                                                      |		ИЛИ СообщениеSMSАдресаты.Контакт ССЫЛКА Справочник.CRM_ПотенциальныеКлиенты
							                                                      |			И СообщениеSMSАдресаты.Контакт <> ЗНАЧЕНИЕ(Справочник.CRM_ПотенциальныеКлиенты.ПустаяССылка)
							                                                      |		ИЛИ СообщениеSMSАдресаты.Контакт ССЫЛКА Справочник.КонтактныеЛицаПартнеров
							                                                      |			И СообщениеSMSАдресаты.Контакт.Владелец.ДатаРегистрации > &ДатаНачала КАК НовыйКлиент,
							                                                      |	ПартнерыСегмента.Сегмент,
							                                                      |	СообщениеSMS.Дата
							                                                      |ИЗ
							                                                      |	Документ.СообщениеSMS КАК СообщениеSMS
							                                                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
							                                                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
							                                                      |			ПО СообщениеSMSАдресаты.Контакт = ПартнерыСегмента.Партнер
							                                                      |		ПО (СообщениеSMSАдресаты.Ссылка = СообщениеSMS.Ссылка)";
							
						Иначе
							
							Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента) Тогда
								РеквизитПартнер = ПредставлениеТаблицы+".Партнер";
								РеквизитБизнесРегион = ПредставлениеТаблицы+".Партнер.БизнесРегион";
								РеквизитНовыйКлиент = РеквизитПартнер+" ССЫЛКА Справочник.Партнеры
									|			И "+РеквизитПартнер+".ДатаРегистрации > &ДатаНачала";
							Иначе
								РеквизитПартнер = "ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
								РеквизитБизнесРегион = "ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)";
								РеквизитНовыйКлиент = "ЛОЖЬ";
							КонецЕсли;
							
				
							ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам+ ?(ЗначениеЗаполнено(ТекстЗапросаПоДокументам),
							"
							|ОБЪЕДИНИТЬ ВСЕ
							|","") + "ВЫБРАТЬ
							|	"+ПредставлениеТаблицы+".Ссылка,
							|	"+РеквизитПартнер+" КАК Партнер,
							|	"+РеквизитБизнесРегион+" КАК БизнесРегион,
							|	"+РеквизитНовыйКлиент+" КАК НовыйКлиент,
							|	ПартнерыСегмента.Сегмент,
							|	"+ПредставлениеТаблицы+".Дата
							|ИЗ
							|	Документ."+ПредставлениеТаблицы+" КАК "+ПредставлениеТаблицы+"
							|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
							|		ПО "+РеквизитПартнер+" = ПартнерыСегмента.Партнер
							|ГДЕ
							|	НЕ "+ПредставлениеТаблицы+".ПометкаУдаления";
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстЗапросаПоДокументам;
КонецФункции

Функция ВоронкаПродажПолучитьТекстЗапросаРасшифрокиПоСостояниямИнтересов() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВложенныйЗапрос.Ссылка КАК Этап,
		               |	ВложенныйЗапрос.КартаМаршрута КАК КартаМаршрута,
		               |	ВложенныйЗапрос.ТочкаМаршрута КАК ТочкаМаршрута,
		               |	ВложенныйЗапрос.РеквизитДопУпорядочивания КАК Порядок
		               |ПОМЕСТИТЬ ЭтапыТочекМаршрута
		               |ИЗ
		               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		               |		CRM_ВоронкиПродажСостав.Ссылка КАК Ссылка,
		               |		CRM_ВоронкиПродажСостав.КартаМаршрута КАК КартаМаршрута,
		               |		CRM_ВоронкиПродажСостав.ТочкаМаршрута КАК ТочкаМаршрута,
		               |		CRM_ВоронкиПродажСостав.Ссылка.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		               |	ИЗ
		               |		Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
		               |	ГДЕ
		               |		CRM_ВоронкиПродажСостав.Ссылка.Родитель = &Воронка
		               |		И НЕ CRM_ВоронкиПродажСостав.Ссылка.ПометкаУдаления
		               |	
		               |	УПОРЯДОЧИТЬ ПО
		               |		РеквизитДопУпорядочивания) КАК ВложенныйЗапрос
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	CRM_СостоянияВоронкиПродаж.Объект КАК Объект,
		               |	МАКСИМУМ(ЭтапыТочекМаршрута.Порядок) КАК ПорядокМакс
		               |ПОМЕСТИТЬ CRM_СостоянияВоронкиПродажОбъекты
		               |ИЗ
		               |	РегистрСведений.CRM_СостоянияВоронкиПродаж КАК CRM_СостоянияВоронкиПродаж
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыТочекМаршрута КАК ЭтапыТочекМаршрута
		               |		ПО (ЭтапыТочекМаршрута.ТочкаМаршрута = CRM_СостоянияВоронкиПродаж.Этап)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		               |		ПО (ПартнерыСегмента.Партнер = CRM_СостоянияВоронкиПродаж.Партнер)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ИсточникиПервичногоИнтересаСрезПоследних.Период КАК Период,
		               |			ИсточникиПервичногоИнтересаСрезПоследних.Партнер КАК Партнер,
		               |			ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК ИсточникПривлечения,
		               |			ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК ЗначениеИсточникаПривлечения
		               |		ИЗ
		               |			РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних КАК ИсточникиПервичногоИнтересаСрезПоследних
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |					МАКСИМУМ(ИсточникиПервичногоИнтересаСрезПоследних.Период) КАК Период,
		               |					ИсточникиПервичногоИнтересаСрезПоследних.Партнер КАК Партнер
		               |				ИЗ
		               |					РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних КАК ИсточникиПервичногоИнтересаСрезПоследних
		               |				
		               |				СГРУППИРОВАТЬ ПО
		               |					ИсточникиПервичногоИнтересаСрезПоследних.Партнер) КАК МаксДатыСреза
		               |				ПО ИсточникиПервичногоИнтересаСрезПоследних.Период = МаксДатыСреза.Период
		               |					И ИсточникиПервичногоИнтересаСрезПоследних.Партнер = МаксДатыСреза.Партнер) КАК СрезПервичногоИнтереса
		               |		ПО CRM_СостоянияВоронкиПродаж.Партнер = СрезПервичногоИнтереса.Партнер
		               |			И CRM_СостоянияВоронкиПродаж.Объект.Дата >= СрезПервичногоИнтереса.Период
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА CRM_СостоянияВоронкиПродаж.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		               |				ТОГДА CRM_СостоянияВоронкиПродаж.ДатаЗавершения МЕЖДУ &НачалоПериода И &КонецПериода
		               |			ИНАЧЕ ВЫБОР
		               |					КОГДА CRM_СостоянияВоронкиПродаж.ПлановаяДата <> ДАТАВРЕМЯ(1, 1, 1)
		               |						ТОГДА CRM_СостоянияВоронкиПродаж.ПлановаяДата МЕЖДУ &НачалоПериода И &КонецПериода
		               |					ИНАЧЕ ИСТИНА
		               |				КОНЕЦ
		               |		КОНЕЦ
		               |	И НЕ CRM_СостоянияВоронкиПродаж.Объект.ПометкаУдаления
		               |	И CRM_СостоянияВоронкиПродаж.СостояниеЭтапа В(&СписокСостояний)
		               |{ГДЕ
		               |	CRM_СостоянияВоронкиПродаж.Пользователь КАК Пользователь,
		               |	CRM_СостоянияВоронкиПродаж.Офис КАК Офис,
		               |	CRM_СостоянияВоронкиПродаж.ТипУслуги КАК ТипУслуги,
		               |	CRM_СостоянияВоронкиПродаж.Подразделение КАК Подразделение,
		               |	CRM_СостоянияВоронкиПродаж.Партнер.БизнесРегион КАК БизнесРегион,
		               |	ПартнерыСегмента.Сегмент КАК Сегмент,
		               |	(CRM_СостоянияВоронкиПродаж.Партнер.ДатаРегистрации > &НачалоПериода
		               |			ИЛИ CRM_СостоянияВоронкиПродаж.Партнер ССЫЛКА Справочник.CRM_ПотенциальныеКлиенты) КАК НовыйКлиент,
		               |	СрезПервичногоИнтереса.ИсточникПривлечения КАК ИсточникПривлечения,
		               |	СрезПервичногоИнтереса.ЗначениеИсточникаПривлечения КАК ЗначениеИсточникаПривлечения}
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	CRM_СостоянияВоронкиПродаж.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	CRM_Интерес.Ответственный КАК Пользователь,
	|	CRM_Интерес.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА CRM_Интерес.СостояниеИнтереса.ВидСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение)
	|			ТОГДА 1
	|		КОГДА CRM_Интерес.СостояниеИнтереса.ВидСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК АктивнаяУспешноНеУдачно,
	|	1 КАК Количество,
	|	CRM_Интерес.ОжидаемаяВыручка КАК Сумма,
	|	CRM_Интерес.Офис КАК Офис,
	|	CRM_Интерес.ТипУслуги КАК ТипУслуги,
	|	ЭтапыТочекМаршрута.Этап,
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
	|	CRM_Интерес.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА CRM_Интерес.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА CRM_Интерес.ПотенциальныйКлиент
	|		ИНАЧЕ CRM_Интерес.Партнер
	|	КОНЕЦ КАК Клиент,
	|	ВЫБОР
	|		КОГДА CRM_Интерес.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)
	|		ИНАЧЕ CRM_Интерес.Партнер.БизнесРегион
	|	КОНЕЦ КАК БизнесРегион,
	|	CRM_Интерес.Ссылка КАК Документ
	|ПОМЕСТИТЬ ВсеИнтересы
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеИнтересы.Этап,
	|	ВсеИнтересы.Пользователь,
	|	ВсеИнтересы.Подразделение,
	|	ВсеИнтересы.Документ,
	|	ВсеИнтересы.ТипУслуги,
	|	ВсеИнтересы.Клиент,
	|	ВсеИнтересы.БизнесРегион,
	|	ВсеИнтересы.Проект,
	|	ВсеИнтересы.Количество,
	|	ВсеИнтересы.Сумма,
	|	ВсеИнтересы.Дата
	|ИЗ
	|	ВсеИнтересы КАК ВсеИнтересы
	|ГДЕ
	|	ВсеИнтересы.Этап = &Этап";
		
		
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

