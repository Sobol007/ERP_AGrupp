
#Область ПроцедурыИФункцииМодуля
//
// Процедура - Управление пулом обработчиков
//
Процедура УправлениеПуломОбработчиков() Экспорт
	
	сшпОбновлениеВерсииКонфигурации.ВыполнитьОбновлениеДанныхКонфигурации();
	
	Если ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") И Не ПолучитьФункциональнуюОпцию("сшпОтключитьПотоки") Тогда
		
		Если Не сшпОбщегоНазначения.ПроверитьЭкземплярИнформационнойБазы() Тогда
			
			ЗаписьЖурналаРегистрации("Datareon. Управление пулом обработчиков", УровеньЖурналаРегистрации.Ошибка,,, "Рассинхронизация идентификаторов информационной базы");
			
			Возврат;
		
		КонецЕсли;
		
		Если Не сшпРаботаСКонстантами.ТипКоннектораВебСервисы() Тогда 
			
			Возврат;
		
		КонецЕсли;

		// Предварительная очистка от накопившегося мусора
		сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОчисткаОчередейСообщений");
		
		сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("РегистрацияВходящихСообщений");
		сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиСистемныхСообщений");
		сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиИсходящихСообщений");
		сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиВходящихСообщений");
		сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиОтправляемых");
		сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиОтправляемыхСистемныхСообщений");
	
	КонецЕсли;

КонецПроцедуры

// Процедура - Обработка очереди системных сообщений
//
Процедура ОбработкаОчередиСистемныхСообщений() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекЗапрос = Новый Запрос("ВЫБРАТЬ
	|	тбОчередь.ИдентификаторСообщения,
	|	тбОчередь.Хранилище,
	|	тбОчередь.КлассСообщения,
	|	тбСостояние.ДатаИзменения,
	|	тбОчередь.ФорматСообщения
	|ПОМЕСТИТЬ втПакеты
	|ИЗ
	|	РегистрСведений.сшпОчередьСистемныхСообщений КАК тбОчередь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
	|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
	|			И (тбСостояние.СтатусСообщения В (&СписокСтатусов))
	|			И тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тбОчередь.ИдентификаторСообщения,
	|	тбОчередь.Хранилище,
	|	тбОчередь.КлассСообщения,
	|	тбОчередь.ФорматСообщения
	|ИЗ
	|	втПакеты КАК тбОчередь
	|ГДЕ
	|	тбОчередь.КлассСообщения В(&СписокОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	тбОчередь.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тбОчередь.ИдентификаторСообщения,
	|	тбОчередь.Хранилище,
	|	тбОчередь.КлассСообщения,
	|	тбОчередь.ФорматСообщения
	|ИЗ
	|	втПакеты КАК тбОчередь
	|ГДЕ
	|	НЕ тбОчередь.КлассСообщения В (&СписокОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	тбОчередь.ДатаИзменения");
	
	МассивФильтр = Новый Массив;
	МассивФильтр.Добавить("TUM");
	МассивФильтр.Добавить("TRM");
	МассивФильтр.Добавить("TCS");
	
	ТекЗапрос.УстановитьПараметр("СписокОпераций", МассивФильтр);
	ТекЗапрос.УстановитьПараметр("СписокСтатусов", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
	ТекЗапрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
	
	МсвРезультаты = ТекЗапрос.ВыполнитьПакет();
	
	Если МсвРезультаты[1].Пустой() И МсвРезультаты[2].Пустой() Тогда //Очередь системных сообщений пустая
		
		Возврат;
	
	Иначе
		
		#Область Обработка_сообщений_на_обновление_списка_обработчиков
		
		Если Не МсвРезультаты[1].Пустой() Тогда //Есть сообщения на обновление списка обработчиков, останавливаем рабочие потоки
			
			Попытка
				
				МсвПараметры = Новый Массив;
				МсвПараметры.Добавить(МсвРезультаты[1].Выгрузить());
				ЗаданиеОбновления = ФоновыеЗадания.Выполнить("сшпОбслуживаниеОчередей.ВыполнитьИзменениеОбработчиков",МсвПараметры, "ВыполнитьИзменениеОбработчиков", "ВыполнитьИзменениеОбработчиков");
				ЗаданиеОбновления.ОжидатьЗавершения(20);
			
			Исключение
				
				ОбработкаОчередиСистемныхСообщений(); 
			
			КонецПопытки;
		
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Обработка_системных_сообщения_без_обновления_списка_обработчиков
		
		Если Не МсвРезультаты[2].Пустой() Тогда //Есть системные сообщения без обновления списка обработчиков
			
			ТекИдентификатор = "Идентификатор не определен";
			ТекВыборка =  МсвРезультаты[2].Выбрать();
			
			Пока ТекВыборка.Следующий() Цикл
				
				Попытка			
					
					ТекИдентификатор = ТекВыборка.ИдентификаторСообщения;
					ТелоПакета = ТекВыборка.Хранилище.Получить();
					
					СтатусЗавершение = Перечисления.сшпСтатусыСообщений.Обработано;
					сшпРаботаСДанными.УстановитьСостояниеСообщения(ТекИдентификатор, Перечисления.сшпСтатусыСообщений.ВОбработке);
					
					Если ТекВыборка.КлассСообщения = "TLR" Тогда
						
						сшпСистемныеСообщения.ПолучитьСписокВерсийОбработчиковСобытий();
						
					ИначеЕсли ТекВыборка.КлассСообщения = "TSR" Тогда
						
						сшпСистемныеСообщения.ПолучитьСписокОбработчиковСобытий(текВыборка.ФорматСообщения, ТелоПакета);
						
					ИначеЕсли ТекВыборка.КлассСообщения = "RML" Тогда
						
						сшпСистемныеСообщения.ВозвратПакетовВОбработку(текВыборка.ФорматСообщения, ТелоПакета);
					
					ИначеЕсли ТекВыборка.КлассСообщения = "BMR" Тогда
						
						ФоновыеЗадания.Выполнить("сшпСистемныеСообщения.ПолучитьСтруктуруКонфигурации",, ТекИдентификатор, "ПолучитьСтруктуруКонфигурации");
					
					ИначеЕсли ТекВыборка.КлассСообщения = "V1C" Тогда
						
						сшпСистемныеСообщения.ПолучитьВерсиюПодсистемы1С();
					
					ИначеЕсли ТекВыборка.КлассСообщения = "CSB" Тогда
						
						сшпСистемныеСообщения.ПолучитьПараметрыПодключения();
					
					ИначеЕсли ТекВыборка.КлассСообщения = "FND" Тогда    
						
						МсвПараметры = Новый Массив;
						МсвПараметры.Добавить(ТекВыборка.ФорматСообщения);
						МсвПараметры.Добавить(ТелоПакета);
						МсвПараметры.Добавить(ТекИдентификатор);
						
						ФоновыеЗадания.Выполнить("сшпСистемныеСообщения.НайтиСообщения",МсвПараметры, ТекИдентификатор, "НайтиСообщения");
					
					ИначеЕсли ТекВыборка.КлассСообщения = "GPS" Тогда 
						
						сшпСистемныеСообщения.ПолучитьСостониеОбработки(ТекВыборка.ФорматСообщения, ТелоПакета);
					
					ИначеЕсли ТекВыборка.КлассСообщения = "DEB" Тогда
						
						МсвПараметры = Новый Массив;
						МсвПараметры.Добавить(ТекВыборка.ФорматСообщения);
						МсвПараметры.Добавить(ТелоПакета);
						МсвПараметры.Добавить(ТекИдентификатор);
						
						ФоновыеЗадания.Выполнить("сшпОтладкаОбработчиков.ВыполнитьОтладкуОбработчика", МсвПараметры, ТекИдентификатор, "ВыполнитьОтладкуОбработчика");
					
					Иначе
						
						СтатусЗавершение = Перечисления.сшпСтатусыСообщений.ОтсутствуетОбработчик;
					
					КонецЕсли;
				
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации("Datareon. Обработка очереди системных сообщений", УровеньЖурналаРегистрации.Ошибка,, ТекИдентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					
					СтатусЗавершение = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;	
				
				КонецПопытки;
				
				сшпРаботаСДанными.УстановитьСостояниеСообщения(ТекИдентификатор, СтатусЗавершение);
			
			КонецЦикла;
		
		КонецЕсли;
		
		#КонецОбласти
	
	КонецЕсли;

КонецПроцедуры
	
// Процедура - Обработка очереди исходящих сообщений
//
Процедура ОбработкаОчередиИсходящихСообщений() Экспорт
	
	Если сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда 
		
		Возврат;
	
	КонецЕсли;
	
	Если Не сшпОбщегоНазначения.ПроверитьЭкземплярИнформационнойБазы() Тогда
		
		ЗаписьЖурналаРегистрации("Datareon. Управление пулом обработчиков", УровеньЖурналаРегистрации.Ошибка,,, "Рассинхронизация идентификаторов информационной базы");
		
		Возврат;
	
	КонецЕсли;
	
	ВремяОжидания = ?(сшпФункциональныеОпции.АвтоматическийСтартОбработчиков(), сшпКэшируемыеФункции.ДлительностьОжиданияПриАвтоматическомСтарте(), сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпДлительностьОжидания")) * 1000;
	ОстатокВремениОжидания = времяОжидания;
	МаксимумПотоков = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих");
	
	Пока ОстатокВремениОжидания > 0 Цикл
		
		СтартОжидания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если Не ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") Или ПолучитьФункциональнуюОпцию("сшпОтключитьПотоки") Или ПолучитьФункциональнуюОпцию("сшпОтключитьПотокОбработкиОчередиИсходящих") Тогда
			
			Прервать;
		
		ИначеЕсли ИдетОбработкаСистемныхСобытий() Тогда //Если включена обработка системных событий приостанавливаем рабочие потоки обработки
			
			сшпОбщегоНазначения.Ожидание(1);
			
			Продолжить;
		
		КонецЕсли;
		
		ТекКоличествоПотоков = МаксимумПотоков - сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Наименование", "СформироватьИсходящееСообщение");
		
		Если ТекКоличествоПотоков > 0 Тогда
			
			ТекЗапрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Строка(ТекКоличествоПотоков) + "
			|	тбОчередь.ИдентификаторСообщения,
			|	тбОчередь.ДатаРегистрации,
			|	тбОчередь.ФорматСообщения,
			|	тбОчередь.МетодХранения,
			|	тбОчередь.ЭтоУдаление,
			|	тбОчередь.ОбъектСобытия
			|ИЗ
			|	РегистрСведений.сшпОчередьИсходящихСообщений КАК тбОчередь
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
			|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
			|			И (тбСостояние.СтатусСообщения  В (&СписокСтатусов))
			|			И тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло
			|
			|УПОРЯДОЧИТЬ ПО
			|	тбСостояние.ДатаИзменения");
			ТекЗапрос.УстановитьПараметр("СписокСтатусов", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
			ТекЗапрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
			
			ТекРезультат = ТекЗапрос.Выполнить();
			
			Если ТекРезультат.Пустой() Тогда
				
				сшпОбщегоНазначения.Ожидание(1);
				ОстатокВремениОжидания = ОстатокВремениОжидания - (ТекущаяУниверсальнаяДатаВМиллисекундах() - СтартОжидания);
			
			Иначе
				
				ТекИдентификатор = "Идентификатор не определен";
				
				Попытка
					
					ТекВыборка = ТекРезультат.Выбрать();
					
					Пока текВыборка.Следующий() Цикл
						
						ТекИдентификатор = ТекВыборка.ИдентификаторСообщения;
						сшпРаботаСДанными.УстановитьСостояниеСообщения(ТекИдентификатор, Перечисления.сшпСтатусыСообщений.ВОбработке);
						
						МсвПараметры = Новый Массив;
						МсвПараметры.Добавить(ТекИдентификатор);
						МсвПараметры.Добавить(ТекВыборка.ФорматСообщения);
						МсвПараметры.Добавить(ТекВыборка.ОбъектСобытия);
						МсвПараметры.Добавить(ТекВыборка.МетодХранения);
						МсвПараметры.Добавить(ТекВыборка.ДатаРегистрации);
						МсвПараметры.Добавить(ТекВыборка.ЭтоУдаление);
						
						ФоновыеЗадания.Выполнить("сшпОбслуживаниеОчередей.СформироватьИсходящееСообщение", МсвПараметры, ТекИдентификатор, "СформироватьИсходящееСообщение");
					
					КонецЦикла;
					
					ОстатокВремениОжидания = ВремяОжидания;
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации("Datareon. Обработка очереди исходящих сообщений", УровеньЖурналаРегистрации.Ошибка,, ТекИдентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				КонецПопытки;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура - Обработка очереди входящих сообщений
//
Процедура ОбработкаОчередиВходящихСообщений() Экспорт
	
	Если сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если Не сшпОбщегоНазначения.ПроверитьЭкземплярИнформационнойБазы() Тогда
		
		ЗаписьЖурналаРегистрации("Datareon. Управление пулом обработчиков", УровеньЖурналаРегистрации.Ошибка,,, "Рассинхронизация идентификаторов информационной базы");
		
		Возврат;
		
	КонецЕсли;
	
	ВремяОжидания = ?(сшпФункциональныеОпции.АвтоматическийСтартОбработчиков(), сшпКэшируемыеФункции.ДлительностьОжиданияПриАвтоматическомСтарте(), сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпДлительностьОжидания")) * 1000;
	
	ОстатокВремениОжидания = ВремяОжидания;	
	МаксимумПотоков = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих");
	
	Пока ОстатокВремениОжидания > 0 Цикл
		
		СтартОжидания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если Не ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") Или ПолучитьФункциональнуюОпцию("сшпОтключитьПотоки") Тогда
			
			Прервать;
			
		ИначеЕсли ИдетОбработкаСистемныхСобытий() Тогда //Если включена обработка системных событий приостанавливаем рабочие потоки
			
			сшпОбщегоНазначения.Ожидание(1);
			Продолжить;
			
		КонецЕсли;
		
		ТекКоличествоПотоков = МаксимумПотоков - сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Наименование", "ОбработатьВходящееСообщение");
		
		Если ТекКоличествоПотоков > 0 Тогда
			
			ТекЗапрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Строка(ТекКоличествоПотоков) + "
			|	тбОчередь.ДатаРегистрации,
			|	тбОчередь.ИдентификаторСообщения,
			|	тбОчередь.ФорматСообщения,
			|	тбОчередь.КлассСообщения
			|ИЗ
			|	РегистрСведений.сшпОчередьВходящихСообщений КАК тбОчередь
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
			|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
			|			И (тбСостояние.СтатусСообщения В (&СписокСтатусов))
			|			И тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло
			|
			|УПОРЯДОЧИТЬ ПО
			|	тбОчередь.ДатаСоздания,
			|	тбСостояние.ДатаИзменения");
			ТекЗапрос.УстановитьПараметр("СписокСтатусов", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
			ТекЗапрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
			
			ТекРезультат = ТекЗапрос.Выполнить();
			
			Если ТекРезультат.Пустой() Тогда
				
				сшпОбщегоНазначения.Ожидание(1);
				ОстатокВремениОжидания = ОстатокВремениОжидания - (ТекущаяУниверсальнаяДатаВМиллисекундах() - СтартОжидания);
			
			Иначе
				
				ТекИдентификатор = "Идентификатор не определен";
				
				Попытка
					
					ТекВыборка = ТекРезультат.Выбрать();
					
					Пока ТекВыборка.Следующий() Цикл
						
						ТекИдентификатор = ТекВыборка.ИдентификаторСообщения;
						
						сшпРаботаСДанными.УстановитьСостояниеСообщения(ТекИдентификатор, Перечисления.сшпСтатусыСообщений.ВОбработке);
						
						МсвПараметры = Новый Массив;
						МсвПараметры.Добавить(ТекИдентификатор);
						МсвПараметры.Добавить(ТекВыборка.ФорматСообщения);
						МсвПараметры.Добавить(ТекВыборка.КлассСообщения);
						МсвПараметры.Добавить(ТекВыборка.ДатаРегистрации);
						
						ФоновыеЗадания.Выполнить("сшпОбслуживаниеОчередей.ОбработатьВходящееСообщение", МсвПараметры, ТекИдентификатор, "ОбработатьВходящееСообщение");
					
					КонецЦикла;
					
					ОстатокВремениОжидания = ВремяОжидания;
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации("Datareon. Обработка очереди входящих сообщений", УровеньЖурналаРегистрации.Ошибка,, ТекИдентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				КонецПопытки;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура - Обработка очереди отправляемых
//
Процедура ОбработкаОчередиОтправляемых() Экспорт
	
	Если сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда
		 
		Возврат;
	
	КонецЕсли;
	
	Коннектор = сшпВзаимодействиеСАдаптером.ПолучитьКоннектор();
	ИспользоватьПакетныйРежим = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпРежимПередачиСообщений") = Перечисления.сшпРежимыПередачиСообщений.Batch;
	РазмерПакета = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпРазмерПакета");
	КоличествоСообщений = ?(ИспользоватьПакетныйРежим, Макс(РазмерПакета, 1), 10);
	максимумПотоков = 1;
	
	МассивСообщенийДляОтправки = Новый Массив;
	
	Если Коннектор = Неопределено Тогда
		 
		Возврат;
			
	КонецЕсли;

	Пока Истина Цикл
				
		Если Не ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") Или ПолучитьФункциональнуюОпцию("сшпОтключитьПотоки") Тогда
			
			Прервать;
			
		КонецЕсли;
		
		ТекКоличествоПотоков = МаксимумПотоков - сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Наименование", "ОтправитьСообщение");
		
		Если ТекКоличествоПотоков = 0 Тогда
			 
			Продолжить;
			
		КонецЕсли;
		
		ТекЗапрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоСообщений*текКоличествоПотоков, "ЧГ=0") + "
		|	тбОчередь.ИдентификаторСообщения,
		|	тбОчередь.Хранилище
		|ИЗ
		|	РегистрСведений.сшпОчередьОтправляемыхСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОжиданиеОтправки))
		|			И тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло
		|
		|УПОРЯДОЧИТЬ ПО
		|	тбСостояние.ДатаИзменения");
		ТекЗапрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
		
		ТекРезультат = ТекЗапрос.Выполнить();
		
		Если ТекРезультат.Пустой() Тогда
			
			Прервать;
			
		Иначе
			
			ТекИдентификатор = "Идентификатор не определен";
			МассивСообщенийДляОтправки.Очистить();
			Индекс = 0;
			
			Попытка
				
				ТекВыборка = ТекРезультат.Выбрать();
				
				Пока ТекВыборка.Следующий() Цикл
					
					ТекИдентификатор = ТекВыборка.ИдентификаторСообщения;
					Сообщение = ТекВыборка.Хранилище.Получить();
					Сообщение.Id = ТекИдентификатор;
					
					Если ИспользоватьПакетныйРежим Тогда
						 
						Индекс = Индекс + 1;
						МассивСообщенийДляОтправки.Добавить(Сообщение);
						
						Если Индекс >= КоличествоСообщений Тогда
							 
							сшпОбслуживаниеОчередей.ОтправитьСообщение(Коннектор, МассивСообщенийДляОтправки);						
							Индекс = 0;
							МассивСообщенийДляОтправки.Очистить();
							
						КонецЕсли;
						
					Иначе
						
						сшпОбслуживаниеОчередей.ОтправитьСообщение(Коннектор, Сообщение);
						
					КонецЕсли;
					
					Если Коннектор = Неопределено Тогда
						 
						Возврат;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если МассивСообщенийДляОтправки.Количество() Тогда
					 
					сшпОбслуживаниеОчередей.ОтправитьСообщение(Коннектор, МассивСообщенийДляОтправки);
					
					Если Коннектор = Неопределено Тогда
						 
						Возврат;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации("Datareon. Обработка очереди отправляемых сообщений", УровеньЖурналаРегистрации.Ошибка,, ТекИдентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			КонецПопытки;
			
		КонецЕсли;
			
	КонецЦикла;

	Коннектор = Неопределено;
	
КонецПроцедуры	

// Процедура - Обработка очереди отправляемых
//
Процедура ОбработкаОчередиОтправляемыхСистемныхСообщений() Экспорт
	
	Если сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда 
		
		Возврат;
	
	КонецЕсли;
	
	Коннектор = сшпВзаимодействиеСАдаптером.ПолучитьКоннектор();
	ИспользоватьПакетныйРежим = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпРежимПередачиСообщений") = Перечисления.сшпРежимыПередачиСообщений.Batch;
	РазмерПакета = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпРазмерПакета");
	КоличествоСообщений = ?(ИспользоватьПакетныйРежим, Макс(РазмерПакета, 1), 10);
	
	МассивСообщенийДляОтправки = Новый Массив;
	
	Если Коннектор = Неопределено Тогда
		 
		Возврат;
			
	КонецЕсли;

	Пока Истина Цикл
		
		Если НЕ ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") Тогда
			
			Прервать;
			
		КонецЕсли;
		
		ТекЗапрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоСообщений, "ЧГ=0") + "
		|	тбОчередь.ИдентификаторСообщения,
		|	тбОчередь.Хранилище
		|ИЗ
		|	РегистрСведений.сшпОчередьОтправляемыхСистемныхСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОжиданиеОтправки))
		|			И тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло
		|
		|УПОРЯДОЧИТЬ ПО
		|	тбСостояние.ДатаИзменения");
		ТекЗапрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
		
		ТекРезультат = текЗапрос.Выполнить();
		
		Если ТекРезультат.Пустой() Тогда
			
			Прервать;
		
		Иначе
			
			ТекИдентификатор = "Идентификатор не определен";
			МассивСообщенийДляОтправки.Очистить();
			Индекс = 0;
			
			Попытка
				
				ТекВыборка = ТекРезультат.Выбрать();
				
				Пока ТекВыборка.Следующий() Цикл
					
					ТекИдентификатор = ТекВыборка.ИдентификаторСообщения;
					Сообщение = ТекВыборка.Хранилище.Получить();
					Сообщение.Id = ТекИдентификатор;
					
					Если ИспользоватьПакетныйРежим Тогда
						 
						Индекс = Индекс + 1;
						МассивСообщенийДляОтправки.Добавить(Сообщение);
						
						Если Индекс >= КоличествоСообщений Тогда
							 
							сшпОбслуживаниеОчередей.ОтправитьСообщение(Коннектор, МассивСообщенийДляОтправки);
							Индекс = 0;
							МассивСообщенийДляОтправки.Очистить();
						
						КонецЕсли;
						
					Иначе
						
						сшпОбслуживаниеОчередей.ОтправитьСообщение(Коннектор, Сообщение);
						
					КонецЕсли;
					
					Если Коннектор = Неопределено Тогда
						 
						Возврат;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если МассивСообщенийДляОтправки.Количество() Тогда
					 
					сшпОбслуживаниеОчередей.ОтправитьСообщение(Коннектор, МассивСообщенийДляОтправки);
					
					Если Коннектор = Неопределено Тогда
						 
						Возврат;
						
					КонецЕсли;
				
				КонецЕсли;
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации("Datareon. Обработка очереди отправляемых сообщений", УровеньЖурналаРегистрации.Ошибка,, ТекИдентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			КонецПопытки;
			
		КонецЕсли;
			
	КонецЦикла;

	Коннектор = Неопределено;

КонецПроцедуры	

// Процедура - Отправить сообщение
//
// Параметры:
//  Коннектор	 - HTTPСоединение,WSПрокси - Соединение с адаптером.
//  Сообщение	 - Массив, Структура - структура, содержащая исходящее сообщение или массив структур.
//
Процедура ОтправитьСообщение(Коннектор, Сообщение) Экспорт 
	
	сшпВзаимодействиеСАдаптером.ОтправитьСообщениеНаАдаптер(Коннектор, Сообщение);
	
	Если Коннектор = Неопределено Тогда 
		
		ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Предупреждение,,, "Отсутствует связь с адаптером");
	
	КонецЕсли;

КонецПроцедуры

// Процедура - Очистка очередей сообщений
//
Процедура ОчисткаОчередейСообщений() Экспорт
		
		//Возврат в обработку "зависших" сообщений
		ТекЗапрос = Новый Запрос("ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения КАК Идентификатор,
		|	ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Исходящая) КАК ТипОчереди
		|ИЗ
		|	РегистрСведений.сшпОчередьИсходящихСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ВОбработке))
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, МИНУТА) > 60)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения КАК Идентификатор,
		|	ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Входящая) КАК ТипОчереди
		|ИЗ
		|	РегистрСведений.сшпОчередьВходящихСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ВОбработке))
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, МИНУТА) > 60)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения КАК Идентификатор,
		|	ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Системная) КАК ТипОчереди
		|ИЗ
		|	РегистрСведений.сшпОчередьСистемныхСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ВОбработке))
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, МИНУТА) > 60)
		|");
		ТекЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		ТекВыборка = текЗапрос.Выполнить().Выбрать();
		
		Пока ТекВыборка.Следующий() Цикл
			
			Состояние = ?(ТекВыборка.ТипОчереди = Перечисления.сшпТипыОчередей.Отправки, Перечисления.сшпСтатусыСообщений.ОжиданиеОтправки, Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки);
			сшпРаботаСДанными.УстановитьСостояниеСообщения(текВыборка.Идентификатор, Состояние);
		
		КонецЦикла;
		
		//Очистка очередей от старых сообщений
		ТекЗапрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДлительностиОжидания.ТипОчереди КАК ТипОчереди,
		|	ТаблицаДлительностиОжидания.СтатусСообщения КАК СтатусСообщения,
		|	ТаблицаДлительностиОжидания.ДлительностьХранения КАК Длительность
		|ПОМЕСТИТЬ ТаблицаДлительностиОжидания
		|ИЗ
		|	&ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения КАК Идентификатор,
		|	ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Исходящая) КАК ТипОчереди
		|ИЗ
		|	РегистрСведений.сшпОчередьИсходящихСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
		|			ПО тбСостояние.СтатусСообщения = ТаблицаДлительностиОжидания.СтатусСообщения
		|				И (ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Исходящая) = ТаблицаДлительностиОжидания.ТипОчереди)
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, ДЕНЬ) > ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию))
		|			И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию) > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения,
		|	ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Входящая)
		|ИЗ
		|	РегистрСведений.сшпОчередьВходящихСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
		|			ПО тбСостояние.СтатусСообщения = ТаблицаДлительностиОжидания.СтатусСообщения
		|				И (ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Входящая) = ТаблицаДлительностиОжидания.ТипОчереди)
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, ДЕНЬ) > ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию))
		|			И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию) > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения,
		|	ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Отправки)
		|ИЗ
		|	РегистрСведений.сшпОчередьОтправляемыхСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
		|			ПО тбСостояние.СтатусСообщения = ТаблицаДлительностиОжидания.СтатусСообщения
		|				И (ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Отправки) = ТаблицаДлительностиОжидания.ТипОчереди)
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, ДЕНЬ) > ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию))
		|			И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию) > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения,
		|	ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.ОтправкиСистемныхСообщений)
		|ИЗ
		|	РегистрСведений.сшпОчередьОтправляемыхСистемныхСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
		|			ПО тбСостояние.СтатусСообщения = ТаблицаДлительностиОжидания.СтатусСообщения
		|				И (ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.ОтправкиСистемныхСообщений) = ТаблицаДлительностиОжидания.ТипОчереди)
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, ДЕНЬ) > ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию))
		|			И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию) > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения,
		|	ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Системная)
		|ИЗ
		|	РегистрСведений.сшпОчередьСистемныхСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДлительностиОжидания КАК ТаблицаДлительностиОжидания
		|			ПО тбСостояние.СтатусСообщения = ТаблицаДлительностиОжидания.СтатусСообщения
		|				И (ЗНАЧЕНИЕ(Перечисление.сшпТипыОчередей.Системная) = ТаблицаДлительностиОжидания.ТипОчереди)
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, ДЕНЬ) > ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию))
		|			И (ЕСТЬNULL(ТаблицаДлительностиОжидания.Длительность, &СрокХраненияПоУмолчанию) > 0)");
		ТекЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		ТекЗапрос.УстановитьПараметр("СрокХраненияПоУмолчанию", сшпРаботаСКонстантами.ПолучитьДлительностьХраненияПоУмолчанию());
		ТекЗапрос.УстановитьПараметр("ТаблицаДлительностиОжидания", сшпРаботаСКонстантами.ПолучитьДлительностьХранения());
		
		ТекВыборка = ТекЗапрос.Выполнить().Выбрать();
		
		Пока ТекВыборка.Следующий() Цикл
			
			сшпРаботаСДанными.УдалитьСообщение(ТекВыборка.ТипОчереди, ТекВыборка.Идентификатор);
		
		КонецЦикла;
		
		//Отмена отправки неактуальных системных сообщений
		ТекЗапрос = Новый Запрос(
		"ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.сшпОчередьОтправляемыхСистемныхСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОжиданиеОтправки))
		|			И (РАЗНОСТЬДАТ(тбОчередь.ДатаРегистрации, &ТекущаяДата, МИНУТА) > 10)");
		ТекЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		ТекВыборка = ТекЗапрос.Выполнить().Выбрать();
		
		Пока ТекВыборка.Следующий() цикл
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(ТекВыборка.ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.ОтправкаОтменена);
		
		КонецЦикла;
		
		//Отмена обработки неактуальных системных сообщений
		ФильтрСостояний = Новый СписокЗначений;
		ФильтрСостояний.Добавить(Перечисления.сшпСтатусыСообщений.Новое);
		ФильтрСостояний.Добавить(Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки);
		
		ТекЗапрос = Новый Запрос(
		"ВЫБРАТЬ
		|	тбОчередь.ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.сшпОчередьСистемныхСообщений КАК тбОчередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
		|			И (тбСостояние.СтатусСообщения В (&ФильтрСостояний))
		|			И (РАЗНОСТЬДАТ(тбСостояние.ДатаИзменения, &ТекущаяДата, МИНУТА) > 10)");
		ТекЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		ТекЗапрос.УстановитьПараметр("ФильтрСостояний", ФильтрСостояний);
		
		ТекВыборка = ТекЗапрос.Выполнить().Выбрать();
		
		Пока ТекВыборка.Следующий() цикл
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(ТекВыборка.ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.ОбработкаОтменена);
		
		КонецЦикла;
		
КонецПроцедуры	

// Процедура - Отправить исходящее сообщение 
//
// Параметры:
//  Идентификатор	 - УникальныйИдентификатор	 - Идентификатор сообщения
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений	 - Формат отправляемого сообщения
//	ТипОбъекта		 - Строка - Строковое представление имени метаданных объекта
//  МетодХранения	 - Перечисление.сшпМетодХранения - Метод хранения сообщения
//  ДатаРегистрации	 - Дата - Дата регистрации сообщения
//	ЭтоУдаление		 - Булево - Обозначение удаления 
//
Процедура СформироватьИсходящееСообщение(Идентификатор, ФорматСообщения, ТипОбъекта, МетодХранения, ДатаРегистрации, ЭтоУдаление) Экспорт
	
	Если ИдетОбработкаСистемныхСобытий() Тогда
		
		Возврат; //Если включена обработка системных событий останавливаем рабочие потоки.
	
	КонецЕсли;
	
	СткОбработчик = сшпКэшируемыеФункции.ПолучитьОбработчик(Типобъекта, Перечисления.сшпТипыИнтеграции.Исходящая, сшпФункциональныеОпции.ВерсияОбработчиков());
	
	Если Не ЗначениеЗаполнено(СткОбработчик.ПроцедураОбработки) Тогда
		
		сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОтсутствуетОбработчик);
	
	Иначе	
		
		Если СткОбработчик.Статус = Перечисления.сшпСтатусыОбработчиков.Отключен Тогда
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОбработкаОтменена);
		
		Иначе
			
			Задержка = 0;
			ОписаниеОшибки = "";
			ОтменитьОтправку = Ложь;
			ТекЗаголовокЖурнала = "Datareon. Получение объекта события";
			
			Объектсобытия = ПолучитьОбъектСобытия(Перечисления.сшпТипыИнтеграции.Исходящая, идентификатор);
			
			ТекЗаголовокЖурнала = "Datareon. Формирование сообщения";
			
			РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета();
			РезультатОбработки.Id = Идентификатор;
			
			Попытка
				
				СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано;
				ОбъектОбработки = Неопределено;
				
				Если МетодХранения = Перечисления.сшпМетодХранения.ПоСсылке Тогда
					
					Если ТипЗнч(ОбъектСобытия) = Тип("Отбор") Тогда
						
						ТипРегистра = сшпКэшируемыеФункции.ПолучитьТипОбъекта(ТипОбъекта);
						ИмяРегистра = сшпКэшируемыеФункции.ПолучитьИмяОбъекта(ТипОбъекта);
						
						Если ТипРегистра = "РегистрСведений" Тогда
							
							ОбъектОбработки = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();	
							
						ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
							
							ОбъектОбработки = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
							
						ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
							
							ОбъектОбработки = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
							
						ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
							
							ОбъектОбработки = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
							
						Иначе
							
							ВызватьИсключение "Тип: " + ТипРегистра + " не поддерживается текущей версией подсистемы ESB";
							
						КонецЕсли;
						
						Для Каждого ЭлементОтбор Из ОбъектСобытия Цикл
							
							ЗаполнитьЗначенияСвойств(ОбъектОбработки.Отбор[ЭлементОтбор.Имя], ЭлементОтбор);
						
						КонецЦикла;
						
						ОбъектОбработки.Прочитать();
					
					Иначе
						
						ОбъектОбработки = ОбъектСобытия;
						
					КонецЕсли;
					
				Иначе
						
					ОбъектОбработки = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, ОбъектСобытия);
					
				КонецЕсли;
				
				Выполнить(сткОбработчик.ПроцедураОбработки);
				
				Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано Тогда
					
					ТекЗаголовокЖурнала = "Datareon. Помещение сообщения в очередь отправки";
					ТекВозврат = сшпВзаимодействиеСАдаптером.ОтправитьСообщение(РезультатОбработки);
					
					Если Не ТекВозврат Тогда
						
						СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
						Задержка = 30;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
				
				ТекстОшибки = сшпОбщегоНазначения.ПолучитьТекстОшибкиОбработчика(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(текЗаголовокЖурнала, УровеньЖурналаРегистрации.Ошибка,, Идентификатор, ТекстОшибки);
				
				Если текЗаголовокЖурнала = "Datareon. Формирование сообщения" Тогда
					
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;
					
					СткСвойства = Новый Структура;
					СткСвойства.Вставить("TemplateId", Строка(СткОбработчик.ИдентификаторШаблона));
					СткСвойства.Вставить("TemplateVersion", СткОбработчик.Версия);
					СткСвойства.Вставить("MessageId", Строка(Идентификатор));
					СткСвойства.Вставить("TemplateName", СткОбработчик.Наименование);  
					сшпСистемныеСообщения.ОтправитьСообщениеОбОшибке("Handler", ТекстОшибки, СткСвойства);
					
				Иначе
					
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
					Задержка = 30;
					
				КонецЕсли;
					
			КонецПопытки;
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, СостояниеСообщения, Задержка, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Обработать входящее сообщение 
//
// Параметры:
//  Идентификатор	 - УникальныйИдентификатор - Идентификатор сообщения
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений	 - Формат поступившего сообщения
//  КлассСообщения	 - Строка - Идентификатор класса поступившего сообщения, по данному классу выполняется получение обработчика для сообщения
//  ДатаРегистрации	 - Дата - Дата регистрации сообщения
//
Процедура ОбработатьВходящееСообщение(Идентификатор, ФорматСообщения, КлассСообщения, ДатаРегистрации) Экспорт
	
	Если ИдетОбработкаСистемныхСобытий() Тогда
		
		Возврат; //Если включена обработка системных событий останавливаем рабочие потоки.
	
	КонецЕсли;
	
	СткОбработчик = сшпКэшируемыеФункции.ПолучитьОбработчик(КлассСообщения, Перечисления.сшпТипыИнтеграции.Входящая, сшпФункциональныеОпции.ВерсияОбработчиков());
	
	Если Не ЗначениеЗаполнено(СткОбработчик.ПроцедураОбработки) Тогда
		
		сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОтсутствуетОбработчик);
	
	Иначе
			
		Если сткОбработчик.Статус = Перечисления.сшпСтатусыОбработчиков.Отключен Тогда
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОбработкаОтменена);
		
		Иначе
				
			Попытка
				
				Задержка = 0;
				текЗаголовокЖурнала = "Datareon. Получение объекта события";
				
				ОбъектСобытия = ПолучитьОбъектСобытия(Перечисления.сшпТипыИнтеграции.Входящая, Идентификатор);
				
				ИдШаблона = СткОбработчик.ИдентификаторШаблона;
				ВерсияШаблона = СткОбработчик.Версия;
				
				СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано; // Переменная для установки нового состояние сообщения
				ОбъектСообщение = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, ОбъектСобытия);
				
				Выполнить(сткОбработчик.ПроцедураОбработки);
				
				сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, СостояниеСообщения, Задержка);
				
			Исключение
				
				ТекстОшибки = сшпОбщегоНазначения.ПолучитьТекстОшибкиОбработчика(ИнформацияОбОшибке());				
				ЗаписьЖурналаРегистрации("Datareon. Обработка сообщения", УровеньЖурналаРегистрации.Ошибка,, Идентификатор, ТекстОшибки);
				
				СткСвойства = Новый Структура;
				СткСвойства.Вставить("TemplateId", Строка(ИдШаблона));
				СткСвойства.Вставить("TemplateVersion", ВерсияШаблона);
				СткСвойства.Вставить("MessageId", Строка(Идентификатор));
				СткСвойства.Вставить("TemplateName", СткОбработчик.Наименование);  
				
				сшпСистемныеСообщения.ОтправитьСообщениеОбОшибке("Handler", ТекстОшибки, СткСвойства);
				
				сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОшибкаОбработки);
			
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Идет обработка системных событий
// 
// Возвращаемое значение:
// Булево  - Признак выполнения системных сообщений по изменению обработчиков.
//
Функция ИдетОбработкаСистемныхСобытий() Экспорт
	
	МсвКлючи = Новый Массив;
	МсвКлючи.Добавить("ВыполнитьИзменениеОбработчиков");
	
	КоличествоПотоков = сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Ключ", МсвКлючи);
	
	Возврат Не КоличествоПотоков = 0; 

КонецФункции	

// Процедура - Выполнить изменение обработчиков
//
// Параметры:
//  Сообщения	 - ТаблицаЗначений - список событий по изменению обработчиков. 
//
Процедура ВыполнитьИзменениеОбработчиков(Сообщения) Экспорт
	
	#Область Ожидание //Ожидаем завершения текущих процессов обработки рабочих очередей.
	
	СчетчикПопытки = 100;
	
	Пока Истина = Истина Цикл
		
		МсвКлючи = Новый Массив;
		МсвКлючи.Добавить("ОтправитьСообщениеНаАдаптер");
		МсвКлючи.Добавить("ОбработатьСообщениеОтАдаптера");
		
		КоличествоПотоков = сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Наименование", МсвКлючи);
		
		Если КоличествоПотоков = 0 Тогда
			
			Прервать;
			
		Иначе
			
			СчетчикПопытки = СчетчикПопытки - 1;
			
			Если СчетчикПопытки = 0 Тогда
				
				ЗаписьЖурналаРегистрации("Datareon. Обработка очереди системных сообщений", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось дождаться остановки потоков обработки рабочих очередей.");
				Возврат;
				
			Иначе
					
				сшпОбщегоНазначения.Ожидание(5);
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	#КонецОбласти
	
	ТекИдентификатор = "Идентификатор не определен";
	
	Для Каждого СтрокаСообщение Из Сообщения Цикл
		
		Попытка
			
			РезультатОперации = Истина;
			ТекИдентификатор = строкаСообщение.ИдентификаторСообщения;
			ТелоПакета = строкаСообщение.Хранилище.Получить();
			СтатусЗавершение = Перечисления.сшпСтатусыСообщений.Обработано;
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(текИдентификатор, Перечисления.сшпСтатусыСообщений.ВОбработке);
			
			Если СтрокаСообщение.КлассСообщения = "TUM" Тогда
				
				РезультатОперации = сшпСистемныеСообщения.ОбновитьОбработчикСобытия(СтрокаСообщение.ФорматСообщения, ТелоПакета);
				
			ИначеЕсли строкаСообщение.КлассСообщения = "TCS" Тогда
				
				РезультатОперации = сшпСистемныеСообщения.УправлениеСостояниемОбработчика(СтрокаСообщение.ФорматСообщения, ТелоПакета);
				
			ИначеЕсли строкаСообщение.КлассСообщения = "TRM" Тогда
				
				РезультатОперации = сшпСистемныеСообщения.УдалитьОбработчикСобытия(СтрокаСообщение.ФорматСообщения, ТелоПакета);
				
			КонецЕсли;
			
			Если Не РезультатОперации Тогда
				
				СтатусЗавершение = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;
				
			КонецЕсли;
				
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СтатусЗавершение = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;
			ЗаписьЖурналаРегистрации("Datareon. Обработка очереди системных сообщений", УровеньЖурналаРегистрации.Ошибка,, ТекИдентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		КонецПопытки;
		
		сшпРаботаСДанными.УстановитьСостояниеСообщения(ТекИдентификатор, СтатусЗавершение);
		
	КонецЦикла;
	
КонецПроцедуры	

// Функция - Получить объект события
//
// Параметры:
//  ТипОчереди		 - Перечисление.сшпТипыИнтеграции - тип очереди из которой необходимо получить данные 
//  Идентификатор	 - УникальныйИдентификатор - идентификатор события по которому требуется получить данные. 
// 
// Возвращаемое значение:
//  Строка - данные события.
//
Функция ПолучитьОбъектСобытия(ТипОчереди, Идентификатор) Экспорт 
	
	ЗапросОбъектСобытия = Новый Запрос;
	ЗапросОбъектСобытия.Текст = "ВЫБРАТЬ
	|	тбОчередь.Хранилище
	|ИЗ
	|	РегистрСведений." +?(ТипОчереди = Перечисления.сшпТипыИнтеграции.Исходящая, "сшпОчередьИсходящихСообщений", "сшпОчередьВходящихСообщений") + " КАК тбОчередь
	|ГДЕ
	|	тбОчередь.ИдентификаторСообщения = &Идентификатор";
	ЗапросОбъектСобытия.УстановитьПараметр("Идентификатор", Идентификатор);
	
	ЗапросВыборка = ЗапросОбъектСобытия.Выполнить().Выбрать();
	
	ЗапросВыборка.Следующий();
	
	Возврат ЗапросВыборка.Хранилище.Получить();
	
КонецФункции

// Процедура - Выполнить внешнюю команду
//
// Параметры:
//  Идентификатор	 - УникальныйИдентификатор	 - идентификатор текущей команды
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений	 - формат команды
//  XmlПакет		 - Строка - тело полученного сообщения команды.
//
Процедура ВыполнитьВнешнююКоманду(Идентификатор, ФорматСообщения, XmlПакет) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") И Не ПолучитьФункциональнуюОпцию("сшпОтключитьПотоки") Тогда
		
		XdtoТип 				= ФабрикаXDTO.Тип("http://esb.axelot.ru", "Message");
		XdtoПакет 				= сшпОбщегоНазначения.ПолучитьОбъектXDTO(форматсообщения, XmlПакет, XdtoТип);
		
		ОтправитьОтвет = Ложь;
		
		ТекЗаголовокЖурнала = "Datareon. Выполнение внешней команды";
		
		РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета();
		
		Попытка
						
			Выполнить(xdtoПакет.Body);
			
			Если ОтправитьОтвет Тогда
				
				ТекЗаголовокЖурнала = "Datareon. Отправка сообщения";
				
				Если Константы.сшпТипИспользуемогоКоннектораESB.Получить() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда
				
					сшпPipe.ОтправитьСообщениеБезОчереди(РезультатОбработки);
				
				Иначе
				
					сшпВзаимодействиеСАдаптером.ОтправитьСообщение(РезультатОбработки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			ИнформацияОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ТекЗаголовокЖурнала, УровеньЖурналаРегистрации.Ошибка,, Идентификатор, ИнформацияОшибка);
			
			Если ТекЗаголовокЖурнала = "Datareon. Выполнение внешней команды" Тогда
				
				сткСвойства = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(XdtoПакет);
				сшпСистемныеСообщения.ОтправитьСообщениеОбОшибке("Command", ИнформацияОшибка, СткСвойства);
				
			КонецЕсли;
				
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура - Выполнить внешнюю команду
//
// Параметры:
//  Идентификатор	 - УникальныйИдентификатор	 - идентификатор текущей команды
//	СтруктураПараметров - Структура - структура параметров пользователя
//
Процедура УстановитьПараметрыПользователя(Идентификатор, СтруктураПараметров) Экспорт
	
	ПараметрыПользователяПолучены = СтруктураПараметров.Свойство("User") И СтруктураПараметров.Свойство("Password");
	ТекЗаголовокЖурнала = "Datareon. Установка параметров пользователя";
	
	Если Не ПараметрыПользователяПолучены Тогда
		
		ИнформацияОшибка = "Полученное сообщение SUS не содержит обязательных свойств User и Password";
		ЗаписьЖурналаРегистрации(текЗаголовокЖурнала, УровеньЖурналаРегистрации.Ошибка,, Идентификатор, ИнформацияОшибка);
		сшпСистемныеСообщения.ОтправитьСообщениеОбОшибке("SUS", ИнформацияОшибка, Новый Структура());
		
		Возврат;
	
	КонецЕсли;

	ИмяПользователя = СтруктураПараметров["User"];
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	
	Попытка
		
		Если ПользовательИБ = Неопределено Тогда
			
			НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
			НовыйПользователь.Имя = ИмяПользователя;
			НовыйПользователь.ПолноеИмя = ИмяПользователя;
			НовыйПользователь.Пароль = СтруктураПараметров["Password"];
			НовыйПользователь.АутентификацияСтандартная = Истина;
			НовыйПользователь.Роли.Добавить(Метаданные.Роли.сшпОбменСESB);
			НовыйПользователь.Записать();
		
		ИначеЕсли Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.сшпОбменСESB) Тогда 
			
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.сшпОбменСESB);
			ПользовательИБ.Записать();
		
		КонецЕсли;
		
	Исключение
		
		ИнформацияОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ТекЗаголовокЖурнала, УровеньЖурналаРегистрации.Ошибка,, Идентификатор, ИнформацияОшибка);
		сшпСистемныеСообщения.ОтправитьСообщениеОбОшибке("SUS", ИнформацияОшибка, Новый Структура());
	
	КонецПопытки;

КонецПроцедуры

#КонецОбласти