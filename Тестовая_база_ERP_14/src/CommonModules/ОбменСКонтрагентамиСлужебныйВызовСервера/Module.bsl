////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебныйВызовСервера: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов.

// Получение соответствия документов и электронных документов.
//
// Параметры:
//  СписокВладельцев - Массив - владельцы электронных документов.
//  СписокЭлектронныхДокументов - Массив - электронные документы.
// 
// Возвращаемое значение:
//  Соответствие - ссылки на владельцев и электронных документов.
//
Функция ВладельцыИЭлектронныеДокументы(СписокВладельцев = Неопределено, СписокЭлектронныхДокументов = Неопределено) Экспорт
	
	СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебный.ВладельцыИЭлектронныеДокументы(
		СписокВладельцев, СписокЭлектронныхДокументов);
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ базы данных, номер версии электронного
//                                    документа которого надо изменить.
//  ЭлектронныйДокумент - ДокументСсылка.ИсходящийЭлектронныйДокумент, ВходящийЭлектронныйДокумент - ссылка на
//                                    электронный документ, который в данный момент является актуальным.
//  УдалятьСтаруюВерсию - Булево - если Истина, то старая версия ЭД будет удалена.
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ЭлектронныйДокумент = Неопределено, УдалятьСтаруюВерсию = Ложь, Знач СоздатьНовуюВерсию = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	ЗаписатьИзменения = Истина;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
			СсылкаНаОбъект, ЗначениеЗаполнено(ЭлектронныйДокумент));
		Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
		ЗаписатьИзменения = СоздатьНовуюВерсию;
	Иначе
		
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
			СсылкаНаОбъект, ЗначениеЗаполнено(ЭлектронныйДокумент));
		Если ЭлектронныйДокумент = Неопределено 
			Или ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			Или ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
	ИначеЕсли НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
	КонецЕсли;
	
	ОписаниеОснования = Неопределено;
	Для каждого Запись Из НаборЗаписей Цикл
		Если Запись.СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеОснования = Неопределено Тогда
			ОписаниеОснования = ОбменСКонтрагентамиСлужебный.ОписаниеОснованияЭлектронногоДокумента(Запись.СсылкаНаОбъект);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Запись, ОписаниеОснования);
	КонецЦикла;
	
	Если Не СоздатьНовуюВерсию Тогда
		НаборЗаписей.Очистить();
	КонецЕсли;
	
	Если ЗаписатьИзменения Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Обновляет статусы подключений настроек ЭДО
//
// Параметры:
//  СоотвСоглашенийИСтруктурСертификатов - Соответствие - параметры для обновления статусов.
//
Процедура ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	ТаблицаПриглашений = ОбменСКонтрагентамиВнутренний.ТаблицаДанныхУчастниковОбмена(СоотвСоглашенийИСтруктурСертификатов);
	ОбменСКонтрагентамиСлужебный.СохранитьПриглашения(ТаблицаПриглашений);
	
КонецПроцедуры

// Определение действующей настройки ЭДО.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - электронный документ.
//  ПараметрыЭД - Структура - параметры поиска и заполнения данными.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  СообщатьОбОшибке - Булево - признак вывода сообщения об ошибке.
// 
// Возвращаемое значение:
//  Булево - Истина, если настройка определена.
//
Функция ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД = Неопределено, ВидЭД = Неопределено, СообщатьОбОшибке = Ложь) Экспорт
	
	Результат = ОбменСКонтрагентамиСлужебный.ОпределитьДействующуюНастройкуЭДО(
		СсылкаНаВладельца, ПараметрыЭД, ВидЭД, СообщатьОбОшибке);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак существования настройки ЭДО между контрагентом и организацией.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на документ ИБ.
//  ПараметрыЭД - Структура - свойства электронного документа, соответствующие документу ИБ.
//
// Возвращаемое значение:
//  Булево - наличие настройки между организацией и контрагентом.
//
Функция НастройкаЭДСуществует(СсылкаНаВладельца, ПараметрыЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	
	Если ПараметрыЭД = Неопределено Тогда
		ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ЗначениеЗаполнено(ПараметрыЭД.Организация)
		И ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
			ПараметрВидЭД = ПараметрыЭД.ВидЭД;
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Соглашения.Ссылка КАК НастройкаЭДО,
			|	Соглашения.СтатусПодключения КАК СтатусПодключения,
			|	Соглашения.СостояниеСоглашения КАК СостояниеСоглашения,
			|	ВЫБОР
			|		КОГДА Соглашения.ДоговорКонтрагента = &ДоговорКонтрагента
			|			ТОГДА 0
			|		ИНАЧЕ 2
			|	КОНЕЦ + ВЫБОР
			|		КОГДА Соглашения.ИспользуетсяДляОтправки
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Порядок
			|ПОМЕСТИТЬ втСоглашения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
			|ГДЕ
			|	Соглашения.Контрагент = &Контрагент
			|	И Соглашения.Организация = &Организация
			|	И (Соглашения.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|			ИЛИ Соглашения.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	втСоглашения.НастройкаЭДО КАК НастройкаЭДО,
			|	втСоглашения.СтатусПодключения КАК СтатусПодключения,
			|	втСоглашения.СостояниеСоглашения КАК СостояниеСоглашения,
			|	втСоглашения.Порядок КАК Порядок
			|ИЗ
			|	втСоглашения КАК втСоглашения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияИсходящиеДокументы
			|		ПО втСоглашения.НастройкаЭДО = СоглашенияИсходящиеДокументы.Ссылка
			|			И (СоглашенияИсходящиеДокументы.Формировать)
			|			И (&СоглашенияИсходящиеДокументыВидЭД = &ВидЭД)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыЭД.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
			Запрос.УстановитьПараметр("ВидЭД",              ПараметрВидЭД);
			
			Если ОбменСКонтрагентамиСлужебный.ЭтоПрикладнойВидЭД(ПараметрВидЭД) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СоглашенияИсходящиеДокументыВидЭД",
					"СоглашенияИсходящиеДокументы.ПрикладнойВидЭД");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СоглашенияИсходящиеДокументыВидЭД",
					"СоглашенияИсходящиеДокументы.ИсходящийДокумент");
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				ПараметрыЭД.Вставить("НастройкаЭДО", Выборка.НастройкаЭДО);
				ПараметрыЭД.Вставить("СтатусПодключения", Выборка.СтатусПодключения);
				ПараметрыЭД.Вставить("СостояниеСоглашения", Выборка.СостояниеСоглашения);
				
				Результат = Истина;
				
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает основной файл электронного документа, являющегося актуальным для документа учета
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на объект ИБ или на электронный документ, по которому нужно получить статус.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы, Неопределено - ссылка на файл электронного документа или Неопределено, если
//  актуального электронного документа нет.
//
Функция ОсновнойФайлЭлектронногоДокументаПоДокументуУчета(Документ) Экспорт
	
	ОсновнойФайл = Неопределено;
	СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебный.ВладельцыИЭлектронныеДокументы(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ));
		
	Если СоответствиеВладельцевИЭД.Количество() И ЗначениеЗаполнено(СоответствиеВладельцевИЭД[Документ]) Тогда
		ОсновнойФайл = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(СоответствиеВладельцевИЭД[Документ]);
	КонецЕсли;
	
	Возврат ОсновнойФайл;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов.

#Область РаспаковкаПакетовЭД

// Получение данных пакетов ЭД.
//
// Параметры:
//  МассивПакетовЭД	 - Массив - список Пакетов ЭД.
// 
// Возвращаемое значение:
//  Структура - данные пакетов ЭД.
//
Функция ДанныеПакетовЭД(МассивПакетовЭД) Экспорт
	
	ДанныеПакетовЭД = ОбменСКонтрагентамиСлужебный.ДанныеПакетовЭД(МассивПакетовЭД);
	
	Возврат ДанныеПакетовЭД;
	
КонецФункции

// Запись данных пакетов ЭД.
// Не рекомендуется вызывать в транзакции, так как при падении переопределяемой части, может
// возникнуть ошибка "В данной транзакции уже происходили ошибки".
//
// Параметры:
//  ДанныеПакетовЭД	          - Массив - список пакетов ЭД.
//  РаспакованныеДокументы    - Структура - служебные данные:
//    * МассивСлужебныхЭД         - Массив - служебные электронные документы.
//    * НовыеДокументы            - Массив - добавляемые электронные документы.
//  КоличествоРаспакованныхЭД - Число - количество распакованных пакетов.
//
Процедура ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, РаспакованныеДокументы, КоличествоРаспакованныхЭД) Экспорт
	
	ОбменСКонтрагентамиСлужебный.ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, РаспакованныеДокументы, КоличествоРаспакованныхЭД);
	
КонецПроцедуры

// Перебирает отпечатки подписей полученных пакетов ЭД,
// получает из них открытую часть сертификата и проверяет ее корректность.
// 
// Параметры:
//  ДанныеПакетовЭД - Структура - данные полученных пакетов ЭД. 
//
Процедура ПроверитьСертификатыПодписей(ДанныеПакетовЭД) Экспорт
	
	ОбменСКонтрагентамиСлужебный.ПроверитьСертификатыПодписей(ДанныеПакетовЭД);
	
КонецПроцедуры

#КонецОбласти

// Выполняет действия с ЭД после установки электронной подписи.
//
// Параметры:
//  СоответствиеСертификатовПодписаннымЭд - Соответствие - ключ: СправочникСсылка.СертификатыЭлектроннойПодписиИШифрования,
//														   значение: массив, элементы - СправочникСсылка.ЭДПрисоединенныеФайлы;
//  ЭДСНезавершеннойПодписью - Массив - массив документов, по которым подписание еще не завершено, 
//										элементы: СправочникСсылка.ЭДПрисоединенныеФайлы.
//
Процедура ДействияПослеПодписанияЭДНаСервере(СоответствиеСертификатовПодписаннымЭд, ЭДСНезавершеннойПодписью = Неопределено) Экспорт
	
	ОбменСКонтрагентамиСлужебный.ДействияПослеПодписанияЭДНаСервере(
		СоответствиеСертификатовПодписаннымЭд, ЭДСНезавершеннойПодписью);
	
КонецПроцедуры

// Создание и отправка пакетов электронных документов.
//
// Параметры:
//  ДобавленныеФайлы - Массив - список электронных документов.
//  ПризнакПодписи - Булево - признак подписи.
//  СоотвСоглашенийИПараметровСертификатов -Соответствие - соответствие соглашений и сертификатов.
// 
// Возвращаемое значение:
//  Структура - результат выполнения функции.
//
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы,
									  Знач ПризнакПодписи,
									  Знач СоотвСоглашенийИПараметровСертификатов = Неопределено) Экспорт
	
	СтруктураРезультата = ОбменСКонтрагентамиСлужебный.СоздатьИОтправитьДокументыПЭД(
		ДобавленныеФайлы, ПризнакПодписи, СоотвСоглашенийИПараметровСертификатов);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Отправка пакетов электронных документов.
//
// Параметры:
//  МассивПакетовЭД - Массив - отправляемые пакеты.
//  СоотвСоглашенийИПараметровСертификатов - Соответствие - Соответствие соглашений и сертификатов.
//  ОтправленныеДокументы - Массив - отправленные электронные документы.
// 
// Возвращаемое значение:
//  Число - количество отправленных пакетов.
//
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, Знач СоотвСоглашенийИПараметровСертификатов,
	ОтправленныеДокументы = Неопределено) Экспорт
	
	РезультатОтправки = ОбменСКонтрагентамиСлужебный.ОтправкаПакетовЭД(
		МассивПакетовЭД, СоотвСоглашенийИПараметровСертификатов, ОтправленныеДокументы);	
	
	Возврат РезультатОтправки;
	
КонецФункции

// Параметры использования сертификатов при отправке и получении электронных документов.
//
// Возвращаемое значение:
//  Структура - параметры использования сертификатов.
//
Функция ПараметрыОтправкиПолученияЭД() Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ПараметрыОтправкиПолученияЭД();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - объект, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - Булево - Истина, если необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
// Возвращаемое значение:
//  Строка - текстовое описание состояния электронного документа.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	Результат = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
		Если ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(СсылкаНаВладельца) Тогда
			Результат = ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца);
		Иначе
			ТекущееСостояниеЭДО = СостояниеВерсииЭД(СсылкаНаВладельца);
			Результат = Строка(ТекущееСостояниеЭДО);
		КонецЕсли;
		
		ПараметрыЭД = Неопределено;
		Если НастройкаЭДСуществует(СсылкаНаВладельца, ПараметрыЭД) Тогда
			Если Не ЕстьПравоЧтенияЭД() Тогда
				ШаблонСостоянияЭД = НСтр("ru = '%1 «Недостаточно прав для чтения ЭДО»';
										|en = '%1 ""Insufficient rights to read EDI""'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Ложь;
			Иначе
				Гиперссылка = Истина;
				Если Не ЗначениеЗаполнено(Результат) Тогда
					Гиперссылка = Ложь;
					Результат = НСтр("ru = 'ЭДО не начат';
									|en = 'EDI is not started'");
				КонецЕсли;
				
				СостояниеСоглашения = Неопределено;
				ПараметрыЭД.Свойство("СостояниеСоглашения", СостояниеСоглашения);
				Если СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости Тогда
					ШаблонСостоянияЭД = НСтр("ru = '%1 (проверка технической совместимости)';
											|en = '%1 (technical compatibility check)'");
					Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Результат) Тогда
				ШаблонСостоянияЭД = НСтр("ru = '%1 (настройка ЭДО не подключена)';
										|en = '%1 (EDI setting is not connected)'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Истина;
			Иначе
				
				ЗаполнитьТекстПриглашенияКЭДО(Результат, ПараметрыЭД, СсылкаНаВладельца, Гиперссылка);
				
			КонецЕсли;
			Если Не ЕстьПравоНастройкиОбмена() Тогда
				Результат = "";
				Гиперссылка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет текст приглашения контрагента к ЭДО.
//
// Параметры:
//  ТекстПриглашения - Строка- заполняемый текст надписи формы.
//  ПараметрыЭД - Структура - свойства электронного документа, соответствующего документу ИБ.
//  СсылкаНаВладельца - ДокументСсылка - ссылка на документ ИБ.
//  Гиперссылка - Булево - определяет отображать ли надпись на форме как гиперссылку.
//
Процедура ЗаполнитьТекстПриглашенияКЭДО(ТекстПриглашения, ПараметрыЭД, СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		
		ТекстПриглашения = НСтр("ru = 'Нет действующей настройки ЭДО с организацией-получателем';
								|en = 'No valid EDI setting with a receiving company'");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЭД.Организация) И ЗначениеЗаполнено(ПараметрыЭД.Контрагент)
		И Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Гиперссылка = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрофилиНастроекЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|	И ПрофилиНастроекЭДО.Организация = &Организация
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрофилиНастроекЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|	И ПрофилиНастроекЭДО.Организация = &Организация
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияКонтрагентовБЭД.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
		|ГДЕ
		|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент";
		
		Запрос.УстановитьПараметр("Организация", ПараметрыЭД.Организация);
		Запрос.УстановитьПараметр("Контрагент",  ПараметрыЭД.Контрагент);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[0].Пустой() И Результат[1].Пустой() Тогда // нет профиля обмена через Такском
			
			Выборка = Результат[2].Выбрать();
			
			ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Подключить ""%1"" к ЭДО';
													|en = 'Connect ""%1"" to EDI'");
			
			НаименованиеОрганизацииСокращенное = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СокращенноеНаименованиеОрганизации");
			
			ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Организация, НаименованиеОрганизацииСокращенное));
			
			Если Выборка.Следующий()
				И (Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.НеПодключен
				И Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка()) Тогда
				
				ОбменСКонтрагентамиСлужебный.ЗаполнитьТекстПриглашенияКонтрагентаКЭДО(ТекстПриглашения, СсылкаНаВладельца, ПараметрыЭД.Контрагент);
				
			КонецЕсли;
		
		Иначе
			
			ПараметрыЭлектронногоДокумента = Неопределено;
			ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭлектронногоДокумента);
			
			ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Пригласить %1 к обмену электронными документами в 1С-ЭДО';
													|en = 'Invite %1 for electronic document exchange in 1C:EDI'");
			ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки, ПараметрыЭД.Контрагент);
			
			НаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагентаДляСообщенияПользователю");
			
			ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Контрагент, НаименованиеКонтрагентаДляСообщенияПользователю));
			
			Если ПараметрыЭлектронногоДокумента.Свойство("НастройкаЭДО") И ЗначениеЗаполнено(ПараметрыЭлектронногоДокумента.НастройкаЭДО) Тогда
				
				Если ПараметрыЭлектронногоДокумента.Свойство("СтатусПодключения") И ЗначениеЗаполнено(ПараметрыЭлектронногоДокумента.СтатусПодключения)
					И ПараметрыЭлектронногоДокумента.СтатусПодключения <> ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить") Тогда
					
					ТекстПриглашения = НСтр("ru = 'Настройте ЭДО с контрагентом %1';
											|en = 'Set up EDI with counterparty %1'");
					ТекстПриглашения = СтрШаблон(ТекстПриглашения, ПараметрыЭД.Контрагент);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
// Параметры:
//  ФайлЭД - Ссылка, ПеречислениеСсылка.ТипыЭлементовВерсииЭД - электронный документ или перечисление.
// 
// Возвращаемое значение:
//  Булево - Истина, если это служебный документ.
//
Функция ЭтоСлужебныйДокумент(ФайлЭД) Экспорт 
	
	ВозвращаемоеЗначение = ОбменСКонтрагентамиСлужебный.ЭтоСлужебныйДокумент(ФайлЭД);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Перезаполняет документ ИБ на основании актуального ЭД.
Функция ПерезаполнитьДокумент(Знач ПараметрыЗаполнения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("НетПраваОбработкиЭД", Ложь);
	Результат.Вставить("МассивДокументов", Новый Массив);
	Результат.Вставить("СопоставитьНоменклатуру", Ложь);
	Результат.Вставить("ПараметрыСопоставления", Неопределено);
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Результат.Отказ = Истина;
		Результат.НетПраваОбработкиЭД = Истина;
		Возврат Результат;
	КонецЕсли;
	
	МассивПроведенныхДокументов = ОбменСКонтрагентамиСлужебный.МассивПроведенныхДокументов(
		ПараметрыЗаполнения.МассивСсылок);
		
	Шаблон = НСтр("ru = 'Перезаполнение документа %1.
						|Операция возможна только для непроведенных документов.';
						|en = 'Repopulation of the %1 document.
						|The operation is available only for unposted documents.'");
	Для Каждого Документ Из МассивПроведенныхДокументов Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПараметрыЗаполнения.МассивСсылок, МассивПроведенныхДокументов);
	
	Если МассивСсылок.Количество() = 0 Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ЭД) Тогда
		СоответствиеВладельцевИЭД = Новый Соответствие;
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			СоответствиеВладельцевИЭД.Вставить(ТекущийДокумент, ПараметрыЗаполнения.ЭД);
		КонецЦикла;
	Иначе
		СоответствиеВладельцевИЭД = ВладельцыИЭлектронныеДокументы(МассивСсылок);
	КонецЕсли;
	
	Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			Шаблон = НСтр("ru = 'Электронный документ для %1 не найден';
							|en = 'Electronic document is not found for %1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
		
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из СоответствиеВладельцевИЭД Цикл
		
		ДокументИБ = ЭлементСоответствия.Ключ;
		СсылкаНаЭД = ЭлементСоответствия.Значение;
		
		Если НЕ ЗначениеЗаполнено(ДокументИБ) ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		ОбъектМетаданных = "";
		ДокументЗагружен = Ложь;
		
		ОбменСКонтрагентамиСлужебный.ПерезаполнитьДокументыИБПоЭД(ДокументИБ, СсылкаНаЭД,
			ОбъектМетаданных, ДокументЗагружен, ПараметрыЗаполнения.СпособОбработки);
		
		Если ДокументЗагружен Тогда
				
			Результат.МассивДокументов.Добавить(ДокументИБ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает двоичные данные электронного документа.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  СертификатПодписи - Ссылка - ссылка на элемент справочника Сертификаты электронной подписи.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные электронного документа.
//
Функция ПолучитьДвоичныеДанныеФайла(СсылкаНаФайлЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДвоичныеДанныеФайла(
		СсылкаНаФайлЭД, СертификатПодписи);
	
	Возврат ДвоичныеДанныеЭД;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив - ссылки на электронные документы, для которых надо определить последовательность действий.
//  МассивОтпечатковСертификатов - Массив - содержит отпечатки доступных сертификатов.
//  Действия - Строка - строковое представление необходимых действий.
//  ДопПараметры - Структура - дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - ссылки на элемент справочника ЭДПрисоединенныеФайлы.
//  СоотвСертификатовИПаролей - Соответствие - ключ - СертификатЭП, значение - пароль к сертификату.
//
// Возвращаемое значение:
//  Структура, Неопределено - результат выполненных действий.
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект,
							  Знач МассивОтпечатковСертификатов,
							  Знач Действия,
							  ДопПараметры,
							  Знач ЭД,
							  Знач СоотвСертификатовИПаролей) Экспорт
	
	СтруктураВозврата = ОбменСКонтрагентамиСлужебный.ВыполнитьДействияПоЭД(
		МассивСсылокНаОбъект, МассивОтпечатковСертификатов, Действия, ДопПараметры, ЭД, СоотвСертификатовИПаролей);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Отправка и получение электронных документов.
//
// Параметры:
//  СоответствиеПрофилейИПараметровСертификатов - Соответствие - данные профилей и параметров сертификатов.
//  ПовторноеПолучение - Булево - если Истина, то производится только получение данных.
// 
// Возвращаемое значение:
//  Структура - данные отправки и получения документов.
//
Функция ОтправитьИПолучитьДокументы(СоответствиеПрофилейИПараметровСертификатов, ПовторноеПолучение = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КолОтправленныхПакетов", 0);
	Если НЕ ПовторноеПолучение Тогда
		КолОтправленныхПакетов = ОбменСКонтрагентамиСлужебный.ОтправкаСформированныхЭД(СоответствиеПрофилейИПараметровСертификатов);
		СтруктураВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	КонецЕсли;
	
	НовыеДокументы = ОбменСКонтрагентамиСлужебный.ПолучитьНовыеЭД(СоответствиеПрофилейИПараметровСертификатов,
		ПовторноеПолучение);
	
	ОбменСКонтрагентамиСлужебный.ДополнитьПакетамиКРаспаковке(НовыеДокументы.МассивПакетовЭД, НовыеДокументы.Профили);
	СтруктураВозврата.Вставить("НовыеДокументы", НовыеДокументы);
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  ПрофилиНастроекЭДО - Массив - ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ЭлектронныеДокументы - Массив - содержит ссылки на электронные документы;
//  СтМассивовСтруктурСертификатов - Структура - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента.
//
// Возвращаемое значение:
//  Структура - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи;
//    СоотвСоглашенийИСертификатовАвторизации;
//    СоотвСертификатовИИхСтруктур.
//
Функция НастройкиЭДОИСертификатыАвторизации(Знач ПрофилиНастроекЭДО, Знач ЭлектронныеДокументы = Неопределено,
	Знач СтМассивовСтруктурСертификатов = Неопределено) Экспорт  
	
	СтруктураСоответствий = ОбменСКонтрагентамиСлужебный.НастройкиЭДОИСертификатыАвторизации(
		ПрофилиНастроекЭДО, ЭлектронныеДокументы, СтМассивовСтруктурСертификатов);
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//   МассивОтпечатковСертификатов - Массив - массив структур сертификатов, установленных в личном хранилище 
//                                           на компьютере пользователя.
//   НастройкаЭДО - СправочникСсылка.СоглашенияОбОбменеЭД - будут выбраны сертификаты,
//                  зарегистрированные в указанном соглашении и доступные текущему пользователю,
//                - СправочникСсылка.ПрофилиНастроекЭДО - будут выбраны сертификаты,
//                  зарегистрированные в указанном профиле и доступные текущему пользователю,
//                - Неопределено - будут выбраны сертификаты доступные текущему пользователю.
//   ОграничиватьПоПользователям - Булево - определяет, будет ли применен фильтр по пользователям при выборе
//                                          доступных сертификатов.
//
// Возвращаемое значение:
//  Соответствие - доступные сертификаты:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ключ соответствия.
//    * Значение - Структура - данные сертификата.
//
Функция СоответствиеДоступныхСертификатовИПараметров(Знач МассивОтпечатковСертификатов,
	Знач НастройкаЭДО = Неопределено, ОграничиватьПоПользователям = Истина) Экспорт
	
	Если ЭлектронноеВзаимодействиеСлужебный.ВыполнятьКриптооперацииНаСервере() Тогда
		МассивОтпечатковСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера);
	КонецЕсли;
	МассивСтруктур = ОбменСКонтрагентамиСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(
														МассивОтпечатковСертификатов, НастройкаЭДО, ОграничиватьПоПользователям);
	
	СоответствиеСертификатовИПаролей = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковСертификатов);
	ДанныеВозврата = Новый Соответствие;
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		Для Каждого Элемент Из МассивСтруктур Цикл
			Если ЗначениеЗаполнено(СоответствиеСертификатовИПаролей) Тогда
				ПарольКСертификату = СоответствиеСертификатовИПаролей.Получить(Элемент.Сертификат);
				Если ПарольКСертификату <> Неопределено Тогда
					Элемент.ПарольПользователя = ПарольКСертификату;
					Элемент.ПарольПолучен = Истина;
				КонецЕсли;
			КонецЕсли;
			ДанныеВозврата.Вставить(Элемент.Сертификат, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает свойства сертификата, необходимые для открытия формы сертификата.
//
// Параметры:
//  АдресДанныхСертификата - Строка - адрес во временном хранилище, где находятся двоичные данные сертификата.
//
// Возвращаемое значение:
//  Структура - описание полей см. ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат).
//
Функция СвойстваСертификата(АдресДанныхСертификата) Экспорт
	
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	
	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сертификат не найден';
																|en = 'Certificate is not found'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

// Метод проверяет наличие в регистре сведений записей о новых ЭД.
//
// Возвращаемое значение:
//  Булево - признак наличия в сервисе новых электронных документов.
//
Функция ЕстьСобытияЭДО() Экспорт
	
	ЕстьНовыеСобытия = Ложь;
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОповещатьОСобытияхЭДО() Тогда
		Возврат ЕстьНовыеСобытия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК ЕстьНовыеЭД
	|ИЗ
	|	РегистрСведений.НовыеДокументыВСервисеЭДО КАК Т
	|ГДЕ
	|	Т.ЕстьНовыеЭД = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ЕстьНовыеСобытия = Истина;
	КонецЕсли;
	
	Возврат ЕстьНовыеСобытия;
	
КонецФункции

// Возвращает название и версию конфигурации.
// 
// Возвращаемое значение:
//  Строка - название и версия конфигурации.
//
Функция ПараметрыЕстьИдея() Экспорт

	ШаблонКонфигурации = НСтр("ru = '%1 (%2)';
								|en = '%1 (%2)'");
	Конфигурация = СтрШаблон(ШаблонКонфигурации, Метаданные.Синоним, Метаданные.Версия);
	
	СтрокаВозврата = "?conf=" + КодироватьСтроку(Конфигурация, СпособКодированияСтроки.КодировкаURL);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации <> Неопределено Тогда
		СтрокаВозврата = СтрокаВозврата + "&login="
			+ КодироватьСтроку(ДанныеАутентификации.Логин, СпособКодированияСтроки.КодировкаURL);
	КонецЕсли;
	
	Возврат СтрокаВозврата;

КонецФункции

// Возвращает признак использования сертификатов пользователя в облачном сервисе.
//
// Возвращаемое значение:
//  Булево - флаг использования в сертификатов пользователя в облачном сервисе.
//
Функция ИспользованиеСертификатовОблачногоСервисаВозможно() Экспорт
	
	ИспользованиеВозможно = ОбменСКонтрагентамиСлужебный.ИспользованиеСертификатовОблачногоСервисаВозможно();
	
	Возврат ИспользованиеВозможно;
	
КонецФункции

// Определяет принадлежность сертификата пользователя к облачному сервису.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат электронной подписи и шифрования.
//
// Возвращаемое значение:
//  Булево - Истина, если сертификат является облачным.
//
Функция ЭтоСертификатОблачногоСервиса(Сертификат) Экспорт
	
	ВозвращаемоеЗначение = ОбменСКонтрагентамиСлужебный.ЭтоСертификатОблачногоСервиса(Сертификат);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает отпечатки сертификатов пользователя в облачном сервисе.
//
// Параметры:
//  ОтпечаткиОблачныхСертификатов - Соответствие - Ключ - отпечаток в формате строки Base64, а Значение - Истина;
//
Процедура ПолучитьЛичныеОтпечаткиВСервисе(ОтпечаткиСертификатов) Экспорт
	
	ОбменСКонтрагентамиСлужебный.ПолучитьЛичныеОтпечаткиВСервисе(ОтпечаткиСертификатов);
	
КонецПроцедуры
	
// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы.
//
// Параметры:
//  Файлы - Массив - массив ссылок на элементы справочника с электронным документом.
//  СтруктураЭД - Структура - Структура параметров, которые необходимо заполнить в справочнике.
//  ПоверятьОбязательныеРеквизиты - Булево - признак проверки обязательных реквизитов.
//
Процедура ИзменитьПоСсылкеПрисоединенныеФайлы(Файлы, СтруктураЭД, ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	Для Каждого Файл Из Файлы Цикл
		ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Файл, СтруктураЭД, ПоверятьОбязательныеРеквизиты);
	КонецЦикла;	
КонецПроцедуры	

// Формирует список действующих форматов электронных документов.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
// 
// Возвращаемое значение:
//  СписокЗначений - список форматов, которые действуют в настоящее время по переданному виду электронного документа.
//
Функция СписокДействующихФорматов(ВидЭлектронногоДокумента) Экспорт

	Результат = Новый СписокЗначений;
	
	ТаблицаФорматов = ОбменСКонтрагентамиСлужебный.ФорматыЭлектронныхДокументов();
	СтрокиДействующихФорматов = ТаблицаФорматов.НайтиСтроки(
		Новый Структура("ВидЭлектронногоДокумента, Действует", ВидЭлектронногоДокумента, Истина));
		
	Для Каждого СтрокаФормата Из СтрокиДействующихФорматов Цикл
		Результат.Добавить(СтрокаФормата.ИдентификаторФормата, СтрокаФормата.ПредставлениеФормата);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Запускает длительную операцию по проверке организации в сервисе 1С-ЭДО.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
//   ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, 
//     во временное хранилище которой надо поместить результат выполнения процедуры.
//
Функция ЗапуститьЗаданиеНаПроверкуОрганизацииВ1СЭДО(Знач Организация, Знач ИдентификаторФормы) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторФормы) Тогда
		УникальныйИдентификатор = ИдентификаторФормы;
	Иначе
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка организации в сервисе 1С-ЭДО.';
															|en = 'Check company in the 1C-EDI service.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСКонтрагентамиСлужебный.ПроверитьОрганизациюВ1СЭДО", Организация, ПараметрыВыполнения);
	
КонецФункции

// Формирование и отправка регистрационного пакета 1С-ЭДО.
//
// Параметры:
//  Контекст - Структура - данные для формирования пакета.
//  ИнтернетПоддержкаПользователейПодключена - Булево - в данную переменную возвращается Истина, если 
//	                                                    интернет-поддержку удалось подключить
//  ЕстьОшибки - Булево - возвращает результат отправки.
//
Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДО(Контекст, ИнтернетПоддержкаПользователейПодключена, ЕстьОшибки) Экспорт
	
	ИмяФайлаПакетаДля1СЭДО = ОбменСКонтрагентамиСлужебный.РегистрационныйПакетДляОператораЭДО(Контекст.РеквизитыПакета,
		Контекст.ЗашифрованныеДанныеОператораЭДО, Контекст.ПодписанныеДвоичныеДанныеДляОператораЭДО,
		Контекст.ДвоичныеДанныеСоглашенияНаПодключениеЭДО, Контекст.ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО);
		
	// Отправка заявления на сервис 1С-ЭДО
	ТекстЗаголовкаСообщения = НСтр("ru = 'Отправка заявления о регистрации на сервисе 1С-ЭДО';
									|en = 'Sending an application of registration in 1C:EDI service'");
	
	ШаблонСообщения = НСтр("ru = 'Выполнение операции: %1
								|Заявление № %2';
								|en = 'Operation execution: %1 
								|Application No. %2'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстЗаголовкаСообщения,
		Контекст.УникальныйИдентификаторЗаявки1СЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		ТекстСообщения, "ОбменСКонтрагентами", УровеньЖурналаРегистрации.Информация);
		
	ОбменСКонтрагентамиСлужебный.ОтправитьРегистрационныйПакет1СЭДО(ИмяФайлаПакетаДля1СЭДО, ИнтернетПоддержкаПользователейПодключена, ЕстьОшибки);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаПакетаДля1СЭДО);
	
КонецПроцедуры

#Область Права

// Возвращает признак наличия у пользователя прав на чтение электронных документов.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоЧтенияЭД(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	ОбменСКонтрагентамиПереопределяемый.ПриПроверкеПраваЧтенияЭлектронныхДокументов(ЕстьПраво);
	
	Если ЕстьПраво Тогда
		
		// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
		ОбъектыЭлементарнойФункции = Новый Массив;
		ОбъектыЭлементарнойФункции.Добавить(Метаданные.Справочники.ЭДПрисоединенныеФайлы);
		
		Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
			
			Если Не ПравоДоступа("Чтение", Объект) Тогда
				ЕстьПраво = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Возвращает признак наличия у пользователя прав на добавление и изменение электронных документов.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Ложь) Экспорт
	
	ЕстьПраво = ОбменСКонтрагентамиСлужебный.ЕстьПравоОбработкиЭД(ВыводитьСообщение);
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак наличия у пользователя прав на настройку ЭДО.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоНастройкиОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.Справочники.ПрофилиНастроекЭДО);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		
		Если Не ПравоДоступа("Изменение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак наличия у пользователя прав на выполнение ЭДО.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоВыполненияОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	ЕстьПраво = ОбменСКонтрагентамиСлужебный.ЕстьПравоВыполненияОбмена(ВыводитьСообщение);
		
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Прочее

// см. ОбменСКонтрагентамиСлужебный.ПакетЭДПоПрисоединенномуФайлу
Функция ПакетЭДПоПрисоединенномуФайлу(ПрисоединенныйФайл) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ПакетЭДПоПрисоединенномуФайлу(ПрисоединенныйФайл);
	
КонецФункции

Функция ЗапуститьПолучениеНастроекЭДОИПараметровСертификатов(Знач ПараметрыЗадания, Знач УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Обмен с контрагентами. Получение настроек ЭДО и параметров сертификатов.';
			|en = 'Exchange with counterparties. Receive EDI settings and certificate parameters.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиЭДОИПараметрыСертификатовВФоне",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

Функция ЗапуститьОтправкуПолучениеПакетовЭлектронныхДокументов(Знач ПараметрыЗадания, Знач УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Обмен с контрагентами. Отправка и получение электронных документов.';
			|en = 'Exchange with counterparties. Send and receive electronic documents.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ОтправитьПолучитьПакетыЭлектронныхДокументовВФоне",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

Функция ЗапуститьРаспаковкуПакетовЭлектронныхДокументов(Знач ПараметрыЗадания, Знач УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Обмен с контрагентами. Распаковка пакетов электронных документов.';
			|en = 'Exchange with counterparties. Unpack electronic document packages.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.РаспаковатьПакетыЭлектронныхДокументовВФоне",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

// Определяет форму просмотра электронного документа в зависимости от типа переданной ссылки.
//
// Параметры:
//  СсылкаДляПросмотра  - ДокументСсылка.ЭлектронныйДокументИсходящий, ДокументСсылка.ЭлектронныйДокументВходящий,
//        СправочникСсылка.ЭДПрисоединенныеФайлы, ОпределяемыйТип.ОснованияЭлектронныхДокументов - ссылка на объект для просмотра электронного документа.
//
// Возвращаемое значение:
//  Структура - данные для открытия формы просмотра электронного документа.
//  Неопределено - в случае, если не удалось определить форму просмотра.
//
Функция ФормаПросмотраЭлектронногоДокумента(Знач СсылкаДляПросмотра) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ЭлектронныйДокумент = Неопределено;
	
	ТипСсылкиДляПросмотра = ТипЗнч(СсылкаДляПросмотра);
	Если ТипСсылкиДляПросмотра = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаДляПросмотра, "ВладелецФайла");
		ПараметрыФормы.Вставить("ФайлЭлектронногоДокумента", СсылкаДляПросмотра);
		
	ИначеЕсли ТипСсылкиДляПросмотра = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
		ИЛИ ТипСсылкиДляПросмотра = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ЭлектронныйДокумент = СсылкаДляПросмотра;
		
	Иначе
		СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебный.ВладельцыИЭлектронныеДокументы(СсылкаДляПросмотра);
		ЭлектронныйДокумент = СоответствиеВладельцевИЭД.Получить(СсылкаДляПросмотра);
		
	КонецЕсли;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		ТекстШаблона = НСтр("ru = '%1. Электронный документ не найден.';
							|en = '%1. Electronic document was not found.'");
		ТекстСообщения = СтрШаблон(ТекстШаблона, СсылкаДляПросмотра);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	ИначеЕсли ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ВыбраннаяФорма = "Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД";
		ПараметрыФормы.Вставить("Ключ", ЭлектронныйДокумент);
		
	Иначе
		ВыбраннаяФорма = "Документ.ЭлектронныйДокументВходящий.Форма.ФормаПросмотраЭД";
		ПараметрыФормы.Вставить("Ключ", ЭлектронныйДокумент);
	КонецЕсли;
	
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("ИмяФормы", ВыбраннаяФорма);
	ДанныеФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ДанныеФормы;
	
КонецФункции

// Формирует новый произвольный электронный документ.
//
// Параметры:
//  ПараметрыФормирования	 - Структура - описывает стороны электронного документооборота:
//                                         * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент, которому нужно отправить документ.
//                                         * Организация - ОпределяемыйТип.Организация - организация, от имени которой нужно отправить документ.
//                                         * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентом - договор, по которому отправляется документ (необязателен).
//  ПараметрыФайла           - Структура - описывает файл, который нужно отправить:
//                                         * ИмяФайла - имя файла вместе с расширением.
//                                         * АдресХранилища - адрес временного хранилища, в котором содержатся двоичные данные файла.
//
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументИсходящий, Неопределено - ссылка на созданный документ или Неопределено, если не удалось создать его.
//
Функция НовыйПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла) Экспорт

	Результат = Неопределено;
	
	// Определим настройки.
	ПараметрыЭД = Новый Структура();
	ПараметрыЭД.Вставить("ВидЭД", 		       Перечисления.ВидыЭД.ПроизвольныйЭД);
	ПараметрыЭД.Вставить("Организация",        ПараметрыФормирования.Организация);
	ПараметрыЭД.Вставить("Контрагент",	       ПараметрыФормирования.Контрагент);
	ПараметрыЭД.Вставить("ДоговорКонтрагента", ПараметрыФормирования.ДоговорКонтрагента);
	ПараметрыЭД.Вставить("НаправлениеЭД",      Перечисления.НаправленияЭД.Исходящий);
	НастройкиОбменаЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	Если ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
		НачатьТранзакцию();
		Попытка
			// Создадим произвольный документ.
			ПроизвольныйДокумент = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ПроизвольныйДокумент, ПараметрыФормирования);
			ПроизвольныйДокумент.Дата                      = ТекущаяДатаСеанса();
			ПроизвольныйДокумент.ВидЭД                     = Перечисления.ВидыЭД.ПроизвольныйЭД;
			ПроизвольныйДокумент.ТипДокумента              = Перечисления.ТипыЭД.Прочее;
			ПроизвольныйДокумент.ВерсияРегламентаЭДО       = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
			ПроизвольныйДокумент.ТипЭлементаВерсииЭД       = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			ПроизвольныйДокумент.СостояниеЭДО              = Перечисления.СостоянияВерсийЭД.НеСформирован;
			ПроизвольныйДокумент.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ПроизвольныйДокумент.УникальныйИД              = Новый УникальныйИдентификатор;
			
			// Заполним служебные реквизиты.
			ПроизвольныйДокумент.ПрофильНастроекЭДО     = НастройкиОбменаЭД.ПрофильНастроекЭДО;
			ПроизвольныйДокумент.НастройкаЭДО           = НастройкиОбменаЭД.СоглашениеЭД;
			ПроизвольныйДокумент.ТребуетсяПодтверждение = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
				НастройкиОбменаЭД.ТребуетсяПодтверждение, Ложь);
			ПроизвольныйДокумент.ТребуетсяИзвещение     = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
				НастройкиОбменаЭД.ТребуетсяИзвещение, Ложь);
			МаршрутПодписания = Неопределено;
			Если Не НастройкиОбменаЭД.Свойство("МаршрутПодписания", ПроизвольныйДокумент.МаршрутПодписания)
				ИЛИ Не ЗначениеЗаполнено(ПроизвольныйДокумент.МаршрутПодписания)
				ИЛИ ПроизвольныйДокумент.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании Тогда
				
				ПроизвольныйДокумент.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;	
			КонецЕсли;
			ПроизвольныйДокумент.Записать();
			
			// Добавим присоединенный файл
			ДобавленныйФайл = Документы.ЭлектронныйДокументИсходящий.ДобавитьПрисоединенныйФайл(ПроизвольныйДокумент,
				ПараметрыФайла.АдресХранилища, ПараметрыФайла.ИмяФайла);
				
			Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				Результат = ПроизвольныйДокумент.Ссылка;
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		Исключение
			ОтменитьТранзакцию();
			ТекстИсключения = НСтр("ru = 'Не удалось создать произвольный документ по причине:';
									|en = 'Cannot create an arbitrary document due to:'") + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

#Область УсловияИспользования

// Возвращает признак принятия условий использования сервиса в разрезе профилей настроек ЭДО.
//
// Параметры:
//  НаборПрофилейНастроекЭДО - СправочникСсылка.ПрофилиНастроекЭДО, Массив - профили, для которых нужно получить признак.
//
// Возвращаемое значение:
//  Соответствие - ключ: профиль настроек ЭДО, значение: признак принятия условий использования.
//
Функция ПризнакПринятияУсловийИспользования(Знач НаборПрофилейНастроекЭДО = Неопределено) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ПризнакПринятияУсловийИспользования(НаборПрофилейНастроекЭДО);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии =  ОбменСКонтрагентамиСлужебный.ПараметрыВерсииЭлектронногоДокумента(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И ОбменСКонтрагентамиСлужебный.ВозможноУдалениеЭД(СтруктураВерсии.СостояниеВерсииЭД) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВладелецФайла", СтруктураВерсии.СсылкаНаДокумент);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД = ОбменСКонтрагентамиСлужебный.ДанныеСостоянияЭД(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		
		Комментарий = Неопределено;
		ДобавитьПричинуЗакрытия = (СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
		
		Если СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
			СостояниеВерсии = НСтр("ru = 'ЭДО завершен';
									|en = 'EDI is completed'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
			СостояниеВерсии = НСтр("ru = 'ЭДО завершен с исправлением';
									|en = 'EDI completed with correction'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
			СостояниеВерсии = НСтр("ru = 'ЭДО аннулирован';
									|en = 'EDI is canceled'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			СостояниеВерсии = НСтр("ru = 'ЭДО закрыт принудительно';
									|en = 'EDI is closed forcefully'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
			СостояниеВерсии = НСтр("ru = 'ЭДО закрыт с отклонением';
									|en = 'EDI closed with variance'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован 
			Или СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
			СостояниеВерсии = НСтр("ru = 'ЭДО не начат';
									|en = 'EDI is not started'");
		Иначе
			СостояниеВерсии = Строка(СтруктураВерсииЭД.СостояниеВерсииЭД);
		КонецЕсли;
		
		Если ДобавитьПричинуЗакрытия Тогда
			СтруктураВерсииЭД.Свойство("КомментарийРС", Комментарий);
			Причина = СтрЗаменить(НСтр("ru = ', причина: %1';
										|en = ', reason: %1'"), "%1", ?(ЗначениеЗаполнено(Комментарий), Комментарий, НСтр("ru = 'не указана';
																															|en = 'not specified'")));
			ВозвращаемоеЗначение = СостояниеВерсии + Причина;
		Иначе
			ВозвращаемоеЗначение = СостояниеВерсии;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСводногоСостояния = "";
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СсылкаНаВладельца);
	ТаблицаДанных = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеЭДПоВладельцам(МассивСсылок);

	Если ТаблицаДанных.Количество() > 0 Тогда
		Строка = ТаблицаДанных[0];
		
		ТекстСНашейСтороны = "";
		ТекстСоСтороныДругогоУчастника = "";
		
		Если Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			ТекстСводногоСостояния = НСтр("ru = 'ЭДО закрыт принудительно';
											|en = 'EDI is closed forcefully'");
		Иначе
			Если ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
				И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
				
				ТекстСНашейСтороны = НСтр("ru = 'с нашей стороны';
											|en = 'from our side'");
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
				И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
				
				ТекстСоСтороныДругогоУчастника = НСтр("ru = 'со стороны других участников';
														|en = 'from other participants'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСНашейСтороны) 
				Или ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника) Тогда
				
				ТекстСводногоСостояния = НСтр("ru = 'Требуются действия';
												|en = 'Actions are required'")+ " " + ТекстСНашейСтороны
					+ ?(ЗначениеЗаполнено(ТекстСНашейСтороны) И ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника), " и ", "")
					+ ТекстСоСтороныДругогоУчастника;
			ИначеЕсли ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
				И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
				И ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
				И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено Тогда
				
				Если Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
					ТекстСводногоСостояния = НСтр("ru = 'ЭДО завершен';
													|en = 'EDI is completed'");
				ИначеЕсли Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
					ТекстСводногоСостояния = НСтр("ru = 'ЭДО завершен с исправлением';
													|en = 'EDI completed with correction'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСводногоСостояния;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Функция ПолучитьСсылкиНаЭДДляПОА(Знач ПервичныйЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ПОА,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла.Организация КАК Организация,
	|	ЭДВладелецЭД.ВладелецФайла КАК ВладелецФайла,
	|	ВЫБОР
	|		КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = значение(Перечисление.НаправленияЭД.Входящий)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА)
	|	И ЭДВладелецЭД.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("Ссылка", ПервичныйЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ПОА", Выборка.ПОА);
		СтруктураВозврата.Вставить("Организация", Выборка.Организация);
		СтруктураВозврата.Вставить("ВладелецФайла", Выборка.ВладелецФайла);
	Иначе
		СтруктураВозврата = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса.
//
// Возвращаемое значение:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла)
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

// Используется для получения представления ЭД с клиента.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ЭД для которого надо получить представление.
//
// Возвращаемое значение:
//  Строка - представление электронного документа.
//
Функция ПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ПредставлениеЭД(СсылкаНаЭД);
	
КонецФункции

// Используется для получения списка представлений ЭД с клиента.
//
// Параметры:
//  МассивЭД - Массив - СправочникСсылка.ЭДПрисоединенныеФайлы, для которых надо сформировать список представлений.
//
// Возвращаемое значение:
//  СписокЗначений:
//     Значение - СправочникСсылка.ЭДПрисоединенныеФайлы.
//     Представление - Строка - представление электронного документа.
//
Функция СписокПредставленийЭД(МассивЭД) Экспорт
	
	СписокПредставлений = Новый СписокЗначений;
	Для Каждого ЭД Из МассивЭД Цикл
		Представление = ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(ЭД);
		СписокПредставлений.Добавить(ЭД, Представление);
	КонецЦикла;
	
	Возврат СписокПредставлений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Только для внутреннего использования
Функция СоответствиеДанныхПакетов(МассивПакетовЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.НаправлениеЭД КАК НаправлениеЭД
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка В(&МассивПакетовЭД)
	|ИТОГИ ПО
	|	ПакетЭД";
	
	Запрос.УстановитьПараметр("МассивПакетовЭД", МассивПакетовЭД);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ВыборкаПакеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПакеты.Следующий() Цикл
		ВыборкаЭД = ВыборкаПакеты.Выбрать();
		МассивЭД = Новый Массив;
		Пока ВыборкаЭД.Следующий() Цикл
			СтруктураДанныхФайла = Новый Структура;
			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ЭлектронныйДокумент", ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ДанныеФайла",         ДанныеФайла);
			СтруктураДанныхФайла.Вставить(
					"ЭтоОтправкаПодтверждения",
					ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
			ПараметрыШифрования = ОбменСКонтрагентамиСлужебный.АдресаСертификатовШифрования(
																			ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ПараметрыШифрования", ПараметрыШифрования);
			МассивЭД.Добавить(СтруктураДанныхФайла);
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаПакеты.ПакетЭД, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов

// Сохраняет результаты проверки ЭП, выполненные на клиенте.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//  МассивРезультатов - Массив - содержит данные установленных подписей.
//
Процедура СохранитьРезультатыПроверкиПодписей(ЭД, МассивРезультатов) Экспорт
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановленныеПодписи = ОбменСКонтрагентамиСлужебный.УстановленныеПодписи(ЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Элемент Из МассивРезультатов Цикл
		
		МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПодписанныйОбъект = ЭД;
		МенеджерЗаписи.ПорядковыйНомер = Элемент.НомерСтроки;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ПодписанныйОбъект = ЭД;
		МенеджерЗаписи.ПорядковыйНомер = Элемент.НомерСтроки;
		МенеджерЗаписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		МенеджерЗаписи.ПодписьВерна = Элемент.Результат;
		Если ИзменятьУстановившегоПодпись(ЭД, УстановленныеПодписи) Тогда
			МенеджерЗаписи.УстановившийПодпись = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИзменятьУстановившегоПодпись(ЭлектронныйДокумент, УстановленныеПодписи) 
	
	ЭтоИсходящийЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД")
		= Перечисления.НаправленияЭД.Исходящий;
	
	Для каждого УстановленнаяПодпись Из УстановленныеПодписи Цикл
		УсловиеСравнения = ?(УстановленнаяПодпись.Свойство("ПодписанныйОбъект"),
			ЭлектронныйДокумент = УстановленнаяПодпись.ПодписанныйОбъект,
			Истина);
		Если УсловиеСравнения Тогда
			ЭтоОтветнаяПодпись = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(УстановленнаяПодпись, "ОтветнаяПодпись", Ложь);
			Если (ЭтоИсходящийЭД И ЭтоОтветнаяПодпись) Или (Не ЭтоИсходящийЭД И Не ЭтоОтветнаяПодпись) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Операции с зашифрованными данными

// Только для внутреннего использования
Функция ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера, ИнтернетПоддержкаПользователейПодключена = Истина,
	ПоказыватьОшибки = Ложь, ПоказыватьОшибкуАутентификацииПриОтсутствииДанных = Истина) Экспорт
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СтруктураПараметровЗапросаМаркера.СпособОбменаЭД);
	ПараметрыОбработки = Новый Структура("Расшифровывать, ПоказыватьОшибки, ПоказыватьОшибкуАутентификацииПриОтсутствииДанных",
		Ложь, ПоказыватьОшибки, ПоказыватьОшибкуАутентификацииПриОтсутствииДанных);
		
	Возврат ОбменСКонтрагентамиВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, 
		ИнтернетПоддержкаПользователейПодключена, ПараметрыОбработки)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Создает присоединенные файлы пакетов, зашифрованных на клиенте.
//
// Параметры:
//  СоответствиеДанных - соответствие - содержит данные по пакетам и зашифрованным файлам.
//  СоответствиеПаролейДляЭДО - Соответствие - данные о паролях.
//
Процедура СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанных, СоотвСоглашенийИСтруктурСертификатов, КолОтправленных) Экспорт
	
	МассивПЭД = Новый Массив;
	Для Каждого ЭлементПЭД Из СоответствиеДанных Цикл
		ПакетЭД = ЭлементПЭД.Ключ;
		Если ПакетЭД.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10 Тогда
			
			ОбменСКонтрагентамиВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(
								ПакетЭД,
								ЭлементПЭД.Значение[0].ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Иначе
			ОбменСКонтрагентамиСлужебный.СформироватьЭДПрисоединенныйФайлПакета(ПакетЭД, ЭлементПЭД.Значение);
		КонецЕсли;
		МассивПЭД.Добавить(ПакетЭД);
	КонецЦикла;
		
	Если СоответствиеДанных.Количество() > 0 И ОбменСКонтрагентамиСлужебный.НемедленнаяОтправкаЭД() Тогда
		КолОтправленных = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
КонецПроцедуры

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
// Возвращаемое значение:
//  Структура или неопределено - данные электронного документа, Неопределено - если нет подписей.
//
Функция СтруктураСодержимогоЭД(ЭлектронныйДокумент) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("ВладелецФайла", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВладелецФайла"));
	СтруктураВозврата.Вставить("ДанныеЭД",      РаботаСФайлами.ДвоичныеДанныеФайла(ЭлектронныйДокумент));
	СтруктураВозврата.Вставить("Подписи",       ЭлектроннаяПодпись.УстановленныеПодписи(ЭлектронныйДокумент));
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера).
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + "EDI_" + Строка(Новый УникальныйИдентификатор) + ".tst";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru = 'Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.';
				|en = 'The specified folder %1 cannot be used for exchange as it is unavailable from the server.
				|Specify network folder for exchange.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Каталог.ПолноеИмя);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Процедура закрывает электронный документооборот для переданного массива ссылок на документы ИБ.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - массив ссылок на документы ИБ, для которых требуется закрыть ЭДО.
//  ПричинаЗакрытия - Строка - описание причины закрытия ЭДО.
//  КоличествоОбработанныхЭД - Число - число документов ИБ, для которых ЭДО был закрыт.
//
Процедура ЗакрытьДокументыПринудительно(Знач МассивСсылокНаВладельцев, Знач ПричинаЗакрытия, КоличествоОбработанныхЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СводнаяИнформацияПоСтатусу = Новый Структура;
	СводнаяИнформацияПоСтатусу.Вставить("СНашейСтороны",             Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	СводнаяИнформацияПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	СводнаяИнформацияПоСтатусу.Вставить("Комментарий",               ПричинаЗакрытия);
	
	МассивДляОчисткиРегистра = Новый Массив;
	МассивДляОчисткиМаршрута = Новый Массив;
	Для Каждого Документ Из МассивСсылокНаВладельцев Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
			ДокументОбъект = Документ.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.ПричинаОтклонения = ?(ПустаяСтрока(ДокументОбъект.ПричинаОтклонения), "", Символы.ПС) 
				+ ПричинаЗакрытия;
			ДокументОбъект.Записать();
			
			ОбменСКонтрагентамиСлужебный.ОбновитьВерсиюЭДВРегистре(Документ, Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно, СводнаяИнформацияПоСтатусу);
			МассивДляОчисткиМаршрута.Добавить(Документ);
			
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		Иначе
			МассивДляОчисткиРегистра.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляОчисткиРегистра.Количество() > 0 Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", МассивДляОчисткиРегистра);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		ТЗОбъектов = Новый ТаблицаЗначений;
		ТЗОбъектов.Колонки.Добавить("СсылкаНаОбъект");
		ТЗОбъектов.Колонки.Добавить("ЭлектронныйДокумент");
		
		Для Каждого Элемент Из МассивДляОчисткиРегистра Цикл
			НовСтрока = ТЗОбъектов.Добавить();
			СтрокаТЗ = ТЗ.Найти(Элемент, "СсылкаНаОбъект");
			ЭлектронныйДокумент = Неопределено;
			Если СтрокаТЗ <> Неопределено Тогда
				ЭлектронныйДокумент = СтрокаТЗ.ЭлектронныйДокумент;
				Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
					ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
					ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
					ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
					ДокументОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			НовСтрока.СсылкаНаОбъект = Элемент;
			НовСтрока.ЭлектронныйДокумент = ЭлектронныйДокумент;
			
			МассивДляОчисткиМаршрута.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		Для Каждого Строка Из ТЗОбъектов Цикл
			ЗаписьРегистра = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
			ЗаписьРегистра.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			ЗаписьРегистра.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			ЗаписьРегистра.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
			ЗаписьРегистра.ЭлектронныйДокумент = Строка.ЭлектронныйДокумент;
			ЗаписьРегистра.Комментарий = ПричинаЗакрытия;
			ЗаписьРегистра.Записать();
		КонецЦикла;
		
		КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + ТЗОбъектов.Количество();
	КонецЕсли;
	
	// Найдем все файлы, подчиненные переданным электронным документам
	Если МассивДляОчисткиМаршрута.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЭлектронныеДокументы", МассивДляОчисткиМаршрута);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла В(&ЭлектронныеДокументы)";
		ЭДДляОчистки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ЭлектронноеВзаимодействиеСлужебный.ОчиститьМаршрутПодписания(ЭДДляОчистки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование электронных документов

// Процедура используется для минимизации серверных вызовов, при необходимости
// получения на клиенте всех или нескольких значений, перечисленных в параметрах констант.
//
Процедура ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД = Неопределено) Экспорт
	
	НемедленнаяОтправкаЭД = ОбменСКонтрагентамиСлужебный.НемедленнаяОтправкаЭД();
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебный.ВыполнятьКриптооперацииНаСервере();

КонецПроцедуры

// Только для внутреннего использования
Функция СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУточнения = "") Экспорт
	
	МассивВозврата = ОбменСКонтрагентамиСлужебный.СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУточнения);
	
	Возврат МассивВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьДОПоДокументу(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД";
	
	ТипСсылки = ТипЗнч(Ссылка);
	Если ТипСсылки = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
		ИЛИ ТипСсылки = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипСсылки = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	СостоянияЭД.ЭлектронныйДокумент = &СсылкаНаОбъект";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
			|	И СостоянияЭД.ЭлектронныйДокумент <> НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Ссылка);
	Результат = Запрос.Выполнить();
	
	ЕстьДО = Истина;
	Если Результат.Пустой() Тогда
		ЕстьДО = Ложь;
	КонецЕсли;
	
	Возврат ЕстьДО;
	
КонецФункции

Функция ПараметрыОтклоненияЭД(МассивЭД, ФормироватьУОУ = Ложь) Экспорт
	
	ВозвращаемоеЗначение = ОбменСКонтрагентамиСлужебный.ПараметрыОтклоненияЭД(МассивЭД, ФормироватьУОУ);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПараметрыАннулированияЭД(МассивЭД) Экспорт
	
	ВозвращаемоеЗначение = ОбменСКонтрагентамиСлужебный.ПараметрыАннулированияЭД(МассивЭД);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции 

Функция ВходящийТитул(СсылкаНаЭД) Экспорт
	
	Если Не ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СсылкаНаЭД) Тогда
		ПервыйТитул = Неопределено;
	Иначе
		ПервыйТитул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
	КонецЕсли;
	
	Возврат ПервыйТитул;
	
КонецФункции

Функция ПроверитьДоступностьКаталогаFTP(ПараметрыСоединения) Экспорт
	
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
				НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	Таймаут = 30;
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыСоединения.АдресСервераFTP,
											ПараметрыСоединения.ПортFTP,
											ПараметрыСоединения.ПользовательFTP,
											ПараметрыСоединения.ПарольFTP,
											Прокси,
											ПараметрыСоединения.ПассивноеСоединениеFTP,
											Таймаут);
	Исключение
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("121");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ОбменСКонтрагентамиСлужебный.ПодготовитьПутьFTP(ПараметрыСоединения.FTPКаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(ПараметрыСоединения.FTPКаталогВходящихДокументов);
	Исключение
		ОбменСКонтрагентамиСлужебный.СоздатьКаталогиFTP(FTPСоединение, ПараметрыСоединения.FTPКаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция МассивПрофилейПакетовЭД(МассивПЭД) Экспорт 
	
	МассивПрофилейНастроекЭДО = Новый Массив;
	
	СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПЭД, "ПрофильНастроекЭДО");
	Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
		ПрофильНастроекЭДО = ЭДВладелец.Значение.ПрофильНастроекЭДО;
		Если МассивПрофилейНастроекЭДО.Найти(ПрофильНастроекЭДО) = Неопределено Тогда
			МассивПрофилейНастроекЭДО.Добавить(ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПрофилейНастроекЭДО;
	
КонецФункции

#КонецОбласти

