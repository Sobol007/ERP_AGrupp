
#Область ПрограммныйИнтерфейс

// Функция - Состояние пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.CRM_СостоянияСинхронизацииПользователя - Состояние.
//
Функция СостояниеПользователя(Пользователь) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостояниеПользователейСинхронизации.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.CRM_СостояниеПользователейСинхронизации КАК СостояниеПользователейСинхронизации
	|ГДЕ
	|	СостояниеПользователейСинхронизации.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Состояние, Перечисления.CRM_СостоянияСинхронизацииПользователя.ПустаяСсылка());

КонецФункции // ПолучитьСостояниеТекущегоПользователя()

// Записывает состояние пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  Состояние	 - ПеречислениеСсылка.CRM_СостоянияСинхронизацииПользователя - Состояние.
//
Процедура ЗаписатьСостояниеПользователя(Пользователь, Состояние) Экспорт 

	Если Не ЗначениеЗаполнено(Пользователь) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда 
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.CRM_СостояниеПользователейСинхронизации");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		
		Блокировка.Заблокировать();

	КонецЕсли;
		
		Запись = РегистрыСведений.CRM_СостояниеПользователейСинхронизации.СоздатьМенеджерЗаписи();
		Запись.Пользователь = Пользователь;
		Запись.Состояние = Состояние;
		
		Запись.Записать(Истина);

КонецПроцедуры 

// Устанавливает дату изменения объекта при записи.
//
// Параметры:
//  Источник - Ссылка - Источник.
//  Отказ	 - Булево - Отказ.
//
Процедура УстановитьДатуИзмененияОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	Если (ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель)
		 Или Источник.ОбменДанными.Загрузка)
		 И Не Источник.ДополнительныеСвойства.Свойство("ДатаИзменения") Тогда 
		 
		Возврат; 
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаИзменения = Неопределено;
	ДатаИзменения = ?(Источник.ДополнительныеСвойства.Свойство("ДатаИзменения", ДатаИзменения),
						ДатаИзменения,
						ТекущаяДата());
	
	УстановитьДатуИзмененияОбъекта(Источник.Ссылка, ДатаИзменения);
	
КонецПроцедуры

// Выполняет синхронизацию.
//
Процедура ВыполнитьСинхронизацию() Экспорт
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	Если Не АвтоматическаяСинхронизацияВключена() Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Выборка = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления Тогда Продолжить КонецЕсли;
		Если Выборка.Пользователь.Пустая() Тогда Продолжить КонецЕсли;
		CRM_СинхронизацияСiCRMНовый.СоздатьДанныеДляВыгрузки(Выборка.Ссылка);
	КонецЦикла;	
	
	Возврат;
	
	ПараметрыАвторизации = CRM_DropboxСервер.ПолучитьПараметрыАвторизации();
	
	Если ПараметрыАвторизации = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ПервыйОбмен = Не ЗначениеЗаполнено(Константы.CRM_ДатаПоследнейУспешнойСинхронизации.Получить());

	МетаданныеПапкиСинхронизации = CRM_DropboxСервер.ПолучитьМетаданные("/Sync", , , , ПараметрыАвторизации);
	
	Если МетаданныеПапкиСинхронизации = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
		
	// 3. Определяем узел обмена
	Узел = ПолучитьУзелОбменаСинхронизации();

	/////////////////////////////////////////////////////////////////////////////////////////////
	// Синхронизируем данные
	
	ПолнаяСинхронизация = Ложь;
	
	ФайлыЗагружены = ЗагрузитьДанныеИзDropbox(Узел, ПараметрыАвторизации, ПервыйОбмен, ПолнаяСинхронизация);
	
	// Если это режим полной синхронизации и все файлы загружены, тогда удаляем папку синхронизации,
	// так как все данные из этой папки далее будут выгружены туда одним файлом
	Если ПолнаяСинхронизация И ФайлыЗагружены Тогда
		
		СброситьРегистрациюИзмененийСинхронизации();
		
		CRM_DropboxСервер.УдалитьФайл("/Sync", ПараметрыАвторизации);
		CRM_DropboxСервер.СоздатьПапку("/Sync", ПараметрыАвторизации);
		
		ОбновитьЧислоГруппУровнейДоступа();
		
	КонецЕсли;
	
	СформироватьФайлыВыгрузки(Узел, ПараметрыАвторизации);
	ВыгрузитьДанныеВОблако(Узел, ПараметрыАвторизации);
	
	Если ФайлыЗагружены Тогда
		Константы.CRM_ДатаПоследнейУспешнойСинхронизации.Установить(ТекущаяДата());
	КонецЕсли;
	
	ЗаполнитьДатыПоследнейСинхронизацииПользователей();
	
КонецПроцедуры

// Проверяет все ли настроки есть для синхронизации.
// 
// Возвращаемое значение:
//  Структура - возвращает как общий итог заполненности настроек, так и
//  заполненность каждой настройки по отдельности
//
Функция НастройкиСинхронизацииЗаполнены() Экспорт
	
	// 0. Общая заполненность всех настроек
	// 1. Периодичность синхронизации
	// 2. Параметры подключения к дропбоксу
	ПериодичностьСинхронизации = 20;
	ЕстьДанныеАутентификации = CRM_DropboxКлиентСервер.АккаунтПодключен();
	ВсеНастройкиЗаполнены = ЗначениеЗаполнено(ПериодичностьСинхронизации) И ЕстьДанныеАутентификации;
	ЗаполненностьНастроек = Новый Структура("ВсеНастройкиЗаполнены, ПериодичностьСинхронизации, ЕстьДанныеАутентификации",
		ВсеНастройкиЗаполнены, ЗначениеЗаполнено(ПериодичностьСинхронизации), ЕстьДанныеАутентификации);
	Возврат ЗаполненностьНастроек;	
	
КонецФункции

// Получает узел обмена синхронизации.
// 
// Возвращаемое значение:
//  ПланыОбменаСсылка.CRM_СинхронизацияСМобильнымПриложением - Узел обмена.
//
Функция ПолучитьУзелОбменаСинхронизации() Экспорт
	
	СсылкаУзла = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложением.НайтиПоНаименованию("ОблакоСинхронизации");
	Если Не ЗначениеЗаполнено(СсылкаУзла) Тогда // Создаем если узел не найден
		Узел = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложением.СоздатьУзел();
		Узел.Наименование = "ОблакоСинхронизации";
		Узел.Код = 999;
		Узел.Записать();
		СсылкаУзла = Узел.Ссылка;
		ПланыОбмена.ЗарегистрироватьИзменения(СсылкаУзла);
	КонецЕсли;
	
	Возврат СсылкаУзла;
	
КонецФункции

// Сбрасывает регистрацию изменений синхронизации.
//
Процедура СброситьРегистрациюИзмененийСинхронизации() Экспорт
	
	Узел = ПолучитьУзелОбменаСинхронизации();
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узел);
	
КонецПроцедуры

#Область Приглашения

// Выполняет обработку после отправки приглашения.
//
// Параметры:
//  АдресПочты	 - Строка - Адрес почты. 
// 
Процедура ОбработкаПослеОтправкиПриглашения(АдресПочты) Экспорт 

	// Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("АдресПочты", АдресПочты);
	//
	// Если Не ЗначениеЗаполнено(Пользователь) Тогда
	//
	//	НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
	//	
	//	НовыйПользователь.Наименование = АдресПочты;
	//	НовыйПользователь.CRM_АдресПочты = АдресПочты;
	//	
	//	НовыйПользователь.Записать();
	//	
	//	Пользователь = НовыйПользователь.Ссылка;
	//
	// КонецЕсли;
	//
	// ЗаписатьСостояниеПользователя(Пользователь, Перечисления.CRM_СостоянияСинхронизацииПользователя.Активен);

КонецПроцедуры

// Формирует текст письма приглашения.
//
// Параметры:
//  ИмяПользователя	 - Строка - Имя пользователя.
//  ТекстПриглашения - Строка - Текст приглашения.
// 
// Возвращаемое значение:
//  Строка - Текст письма приглашения.
// 
Функция ПолучитьТекстПисьмаПриглашения(ИмяПользователя, ТекстПриглашения) Экспорт 

Макет = Обработки.CRM_НастройкаСинхронизацииПользователейiCRM.ПолучитьМакет("ШаблонПисьмаПриглашения");

Текст = Макет.ПолучитьТекст();

Текст = СтрЗаменить(Текст, "%", "%%");

Текст = СтрЗаменить(Текст, "{ТекстПриглашения}", "%1");
	
Возврат СтрШаблон(Текст, ТекстПриглашения);

КонецФункции // ПолучитьТекстПисьмаПриглашения()

#КонецОбласти 

#Область Загрузка

#КонецОбласти 

#Область Выгрузка

// Процедура - Очистить регистрацию изменения
//
// Параметры:
//  Узел	 - ПланыОбменаСсылка.CRM_СинхронизацияСМобильнымПриложением - Узел обмена.
//  Данные	 - ЛюбойТип - Данные.
//
Процедура ОчиститьРегистрациюИзменения(Узел, Данные = Неопределено) Экспорт
	
	Если Данные = Неопределено Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
	Иначе
		Для Каждого Строка Из Данные Цикл
			Если ТипЗнч(Строка) = Тип("Строка") Тогда // Это имя метаданных регистра сведений
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.НайтиПоПолномуИмени("РегистрСведений." + Строка));
			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Строка);
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выгружает данные после записи.
//
// Параметры:
//  Источник - Ссылка - Источник.
//  Отказ	 - Булево - Отказ.
//
Процедура ВыгрузитьДанныеПослеЗаписи(Источник = Неопределено, Отказ) Экспорт
		
	Если Источник <> Неопределено
		 И (ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель)
			Или Источник.ОбменДанными.Загрузка) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгружатьДанныеСразуПослеЗаписи = Истина;
	
	Если ВыгружатьДанныеСразуПослеЗаписи Тогда
		
		////////////////////////////////////////////////////////////////////
		//// Выгружаем данные
		//
		
		ПараметрыАвторизации = CRM_DropboxСервер.ПолучитьПараметрыАвторизации();
		
		Если ПараметрыАвторизации = Неопределено Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		Узел = CRM_СинхронизацияСервер.ПолучитьУзелОбменаСинхронизации();
		
		СформироватьФайлыВыгрузки(Узел, ПараметрыАвторизации);
		
	КонецЕсли;
		
КонецПроцедуры

// Регистрирует изменения присоединенных файлов при записи.
//
// Параметры:
//  Источник - Ссылка - Источник.
//  Отказ	 - Булево - Отказ.
//
Процедура CRM_РегистрацияИзмененийПрисоединенныхФайловПриЗаписи(Источник, Отказ) Экспорт
	
	Если АвтоматическаяСинхронизацияВключена()
		 И Не Источник.ОбменДанными.Загрузка
		 И Источник.Размер <= МакисмальныйРазмерВложенияВБайтах() Тогда
	
		ПланыОбмена.ЗарегистрироватьИзменения(ПолучитьУзелОбменаСинхронизации(),
												Источник);
	
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает макисмальный размер вложения в байтах.
// 
// Возвращаемое значение:
//  Число - Макисмальный размер вложения в байтах.
//
Функция МакисмальныйРазмерВложенияВБайтах() Экспорт 
	
	Возврат 15728640;

КонецФункции // МакисмальныйРазмерВложенияВБайтах()

// Формирует текст запроса по измененным объектам синхронизации.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция СформироватьТекстЗапросаПоИзмененнымОбъектамСинхронизации() Экспорт
	
	ТекстЗапроса = ""; // Начало запроса
	ПерваяИтерация = Истина;
	
	Связка = "
			|ОБЪЕДИНИТЬ
			|";
	

	Для Каждого ОбъектМетаданных Из Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложением.Состав Цикл
		
		МетаданныеОбъекта = ОбъектМетаданных.Метаданные;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
			ТекстЗапроса = ТекстЗапроса
							+ Связка
							+ "
							|ВЫБРАТЬ";
			
		Иначе 
			
			ТекстЗапроса = ТекстЗапроса
							+ "ВЫБРАТЬ РАЗЛИЧНЫЕ";
		
		КонецЕсли; 
		
		ИмяТаблицы = МетаданныеОбъекта.Имя;
		
		ПолноеИмяМетаданных = МетаданныеОбъекта.ПолноеИмя();
		
		ИмяРеквизитаГруппыДоступа = ТекстПустойГруппыДоступа();
		ТекстСоединенияГруппыДоступа = "";
		Если Не Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
			ЗаполнитьПоляГруппыДоступа(МетаданныеОбъекта, ИмяРеквизитаГруппыДоступа, ТекстСоединенияГруппыДоступа);
		КонецЕсли; 
		Если Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда // Константы

			ТекстЗапроса = ТекстЗапроса + "
			|	" + ИмяРеквизитаГруппыДоступа + ?(ПерваяИтерация, " КАК ГруппаДоступа", "") + ",
			|	" + ИмяТаблицы + ".Значение" + ?(ПерваяИтерация, " КАК ЗначениеИзменений", "") + ",
			|	0" + ?(ПерваяИтерация, " КАК УровеньИерархии", "") + ",
			|	0" + ?(ПерваяИтерация, " КАК Приоритет", "") + ",
			|	""" + ИмяТаблицы + """" + ?(ПерваяИтерация, " КАК ИмяМетаданных", "") + ",
			|	" + ТипОбъектаМетаданных(МетаданныеОбъекта) + ?(ПерваяИтерация, " КАК ТипМетаданных", "") + ",
			|	""" + ПолноеИмяМетаданных + """" + ?(ПерваяИтерация, " КАК ПолноеИмяМетаданных", "") + ",
			|   ДАТАВРЕМЯ(1,1,1)" + ?(ПерваяИтерация, " КАК ДатаИзменения", "") + ",
			|	Ложь" + ?(ПерваяИтерация, " КАК ЭтоОтправкаСоответствия", "") + ",
			|	Истина" + ?(ПерваяИтерация, " КАК ЗарегистрированноеИзменение", "") + "
			|	" + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ПерваяИтерация, " ПОМЕСТИТЬ ВТ_Изменения", "") + "
			|ИЗ
			|	Константа." + ИмяТаблицы + ".Изменения КАК " + ИмяТаблицы + "Изменения
		    |		ЛЕВОЕ СОЕДИНЕНИЕ Константа." + ИмяТаблицы + " КАК " + ИмяТаблицы + "
		    |		ПО (ИСТИНА)
			|	" + ТекстСоединенияГруппыДоступа + "
			|ГДЕ
			|	" + ИмяТаблицы + "Изменения.Узел = &Узел
			|";
			ПерваяИтерация = Ложь;
			
		ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта)
					Или Метаданные.Задачи.Содержит(МетаданныеОбъекта) 
					Или Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда // Документы

			ТекстЗапроса = ТекстЗапроса + "
			|	" + ИмяРеквизитаГруппыДоступа + ?(ПерваяИтерация, " КАК ГруппаДоступа", "") + ",
			|	" + ИмяТаблицы + ".Ссылка" + ?(ПерваяИтерация, " КАК ЗначениеИзменений", "") + ",
			|	0" + ?(ПерваяИтерация, " КАК УровеньИерархии", "") + ",
			|	0" + ?(ПерваяИтерация, " КАК Приоритет", "") + ",
			|	""" + ИмяТаблицы + """" + ?(ПерваяИтерация, " КАК ИмяМетаданных", "") + ",
			|	" + ТипОбъектаМетаданных(МетаданныеОбъекта) + ?(ПерваяИтерация, " КАК ТипМетаданных", "") + ",
			|	""" + ПолноеИмяМетаданных + """" + ?(ПерваяИтерация, " КАК ПолноеИмяМетаданных", "") + ",
			|   ЕСТЬNULL(ДатыИзмененийОбъектов.ДатаИзменения, ДАТАВРЕМЯ(1,1,1))" + ?(ПерваяИтерация, " КАК ДатаИзменения", "") + ",
			|	Ложь" + ?(ПерваяИтерация, " КАК ЭтоОтправкаСоответствия", "") + ",
			|	Истина" + ?(ПерваяИтерация, " КАК ЗарегистрированноеИзменение", "") + "
			|	" + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ПерваяИтерация, " ПОМЕСТИТЬ ВТ_Изменения", "") + "
			|ИЗ
			|	" + ПолноеИмяМетаданных + ".Изменения КАК " + ИмяТаблицы + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДатыИзмененийОбъектов КАК ДатыИзмененийОбъектов
			|   	ПО " + ИмяТаблицы + ".Ссылка = ДатыИзмененийОбъектов.Объект
			|	" + ТекстСоединенияГруппыДоступа + "
			|ГДЕ
			|	" + ИмяТаблицы + ".Узел = &Узел
			|";
			ПерваяИтерация = Ложь;
			
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда // Справочники

			ТекстЗапроса = ТекстЗапроса + "
			|	" + ИмяРеквизитаГруппыДоступа + ?(ПерваяИтерация, " КАК ГруппаДоступа", "") + ",
			|	" + ИмяТаблицы + ".Ссылка" + ?(ПерваяИтерация, " КАК ЗначениеИзменений", "") + ",
			|	" + СформироватьУровеньИерархииСправочника(МетаданныеОбъекта) + ?(ПерваяИтерация, " КАК УровеньИерархии", "") + ",
			|	0" + ?(ПерваяИтерация, " КАК Приоритет", "") + ",
			|	""" + ИмяТаблицы + """" + ?(ПерваяИтерация, " КАК ИмяМетаданных", "") + ",
			|	" + ТипОбъектаМетаданных(МетаданныеОбъекта) + ?(ПерваяИтерация, " КАК ТипМетаданных", "") + ",
			|	""" + ПолноеИмяМетаданных + """" + ?(ПерваяИтерация, " КАК ПолноеИмяМетаданных", "") + ",
			|   ЕСТЬNULL(ДатыИзмененийОбъектов.ДатаИзменения, ДАТАВРЕМЯ(1,1,1))" + ?(ПерваяИтерация, " КАК ДатаИзменения", "") + ",
			|	Не ЕСТЬNULL(ОтправленныеСоответствия.Отправлен, Истина)" + ?(ПерваяИтерация, " КАК ЭтоОтправкаСоответствия", "") + ",
			|	Истина" + ?(ПерваяИтерация, " КАК ЗарегистрированноеИзменение", "") + "
			|	" + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ПерваяИтерация, " ПОМЕСТИТЬ ВТ_Изменения", "") + "
			|ИЗ
			|	Справочник." + ИмяТаблицы + ".Изменения КАК " + ИмяТаблицы + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДатыИзмененийОбъектов КАК ДатыИзмененийОбъектов
			|   	ПО " + ИмяТаблицы + ".Ссылка = ДатыИзмененийОбъектов.Объект
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОтправленныеСоответствия КАК ОтправленныеСоответствия
			|   	ПО " + ИмяТаблицы + ".Ссылка = ОтправленныеСоответствия.Объект
			|   	И ОтправленныеСоответствия.УзелОбмена = &Узел
			|	" + ТекстСоединенияГруппыДоступа + "
			|ГДЕ
			|	" + ИмяТаблицы + ".Узел = &Узел
			|";
		
			ПерваяИтерация = Ложь;
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда // РегистрыСведений

			СинонимТаблицы = МетаданныеОбъекта.Синоним;
			ТекстЗапроса = ТекстЗапроса + "
			|	" + ИмяРеквизитаГруппыДоступа + ?(ПерваяИтерация, " КАК ГруппаДоступа", "") + ",
			|	""" + СинонимТаблицы + """" + ?(ПерваяИтерация, " КАК ЗначениеИзменений", "") + ",
			|	0" + ?(ПерваяИтерация, " КАК УровеньИерархии", "") + ",
			|	0" + ?(ПерваяИтерация, " КАК Приоритет", "") + ",
			|	""" + ИмяТаблицы + """" + ?(ПерваяИтерация, " КАК ИмяМетаданных", "") + ",
			|	" + ТипОбъектаМетаданных(МетаданныеОбъекта) + ?(ПерваяИтерация, " КАК ТипМетаданных", "") + ",
			|	""" + ПолноеИмяМетаданных + """" + ?(ПерваяИтерация, " КАК ПолноеИмяМетаданных", "") + ",
			|   ДАТАВРЕМЯ(1,1,1)" + ?(ПерваяИтерация, " КАК ДатаИзменения", "") + ",
			|	Ложь" + ?(ПерваяИтерация, " КАК ЭтоОтправкаСоответствия", "") + ",
			|	Истина" + ?(ПерваяИтерация, " КАК ЗарегистрированноеИзменение", "") + "
			|	" + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ПерваяИтерация, " ПОМЕСТИТЬ ВТ_Изменения", "") + "
			|ИЗ
			|	РегистрСведений." + ИмяТаблицы + ".Изменения КАК " + ИмяТаблицы + "
			|ГДЕ
			|	" + ИмяТаблицы + ".Узел = &Узел
			|";
			ПерваяИтерация = Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
	
		ТекстЗапроса = ТекстЗапроса + 
		"
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ПартнерыУровниДоступа.Ссылка, " + ТекстПустойГруппыДоступа() + ") КАК ГруппаДоступа,
		|	ВТ_Изменения.*
		|ИЗ
		|	ВТ_Изменения КАК ВТ_Изменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.CRM_УровниДоступа КАК ПартнерыУровниДоступа
		|		ПО ВТ_Изменения.ГруппаДоступа = ПартнерыУровниДоступа.Ссылка";
	
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет даты последней синхронизации пользователей.
//
// Параметры:
//  ПараметрыАвторизации - Структура - Параметры авторизации.
//
Процедура ЗаполнитьДатыПоследнейСинхронизацииПользователей(ПараметрыАвторизации = Неопределено) Экспорт

	Если Не АвтоматическаяСинхронизацияВключена() Тогда
	
		Возврат;
	
	КонецЕсли; 
	
		
	Если ПараметрыАвторизации = Неопределено Тогда
	
		ПараметрыАвторизации = CRM_DropboxСервер.ПолучитьПараметрыАвторизации();
	
	КонецЕсли; 
	
	Если ПараметрыАвторизации = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ПолучитьЗаписатьДатыСинхронизации(ПараметрыАвторизации);

КонецПроцедуры

Процедура ДобавитьЗаписьВРегистрСообщенийОбмена(Дата, ВидСообщения, УзелОбмена, ИмяФайла, ДанныеФайла = Неопределено, Обработан = Ложь)

	Запись = РегистрыСведений.CRM_СообщенияОбменаДанными.СоздатьМенеджерЗаписи();
	Запись.Дата = Дата;
	Запись.ВидСообщения = ВидСообщения;
	Запись.УзелОбмена = УзелОбмена;
	Запись.ИмяФайла = ИмяФайла;
	
	Если ДанныеФайла <> Неопределено Тогда
	
		Запись.ДанныеФайла = Новый ХранилищеЗначения(ДанныеФайла);
	
	КонецЕсли; 
	
	Запись.Обработан = Обработан;
	
	Запись.Записать(Истина);

КонецПроцедуры

Процедура ЗаписатьРежим(ЗаписьXML) Экспорт

	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
	
		ЗаписьXML.ЗаписатьАтрибут("Mode", "СРМ");
		
	Иначе 
		
		ЗаписьXML.ЗаписатьАтрибут("Mode", "УТиВСК");
	
	КонецЕсли; 

КонецПроцедуры

// Записывает структуру, как объект.
//
// Параметры:
//  ЗаписьXML	 - ЗаписьXML - ЗаписьXML.
//  ИмяОбъекта	 - Строка - Имя объекта.
//  Структура	 - Структура - Структура.
//
Процедура ЗаписатьСтруктуруКакОбъект(ЗаписьXML, ИмяОбъекта, Структура) Экспорт 
	
	ДокументDOM = Новый ДокументDOM;
	
	КорневойЭлемент = СоздатьЭлемент(ДокументDOM, ИмяОбъекта,,, ДокументDOM);
	
	Для каждого КлючЗначение Из Структура Цикл
	
		Если ТипЗнч(КлючЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			
			ЗаписатьТаблицуСтруктуры(ДокументDOM,  КорневойЭлемент, КлючЗначение.Ключ, КлючЗначение.Значение);
			
		Иначе 
			
			ЗаписатьПолеСтруктуры(ДокументDOM, КорневойЭлемент, КлючЗначение.Ключ, КлючЗначение.Значение);

		КонецЕсли; 
	
	КонецЦикла; 
	
	ЗаписатьДокументDOM(ДокументDOM, ЗаписьXML);

КонецПроцедуры

// Добавляет реквизит в структуру объекта.
//
// Параметры:
//  Структура	 - Структура - Структура.
//  ИмяРеквизита - Строка - Имя реквизита.
//  Значение	 - ЛюбойТип - Значение.
//  ТипXML		 - ТипДанныхXML - Тип данных XML.
//
Процедура ДобавитьРеквизитВСтруктуруОбъекта(Структура, ИмяРеквизита, Значение, ТипXML = Неопределено) Экспорт 

	ОписаниеРеквизита = ПолучитьОписаниеЗначения(Значение, ТипXML);
	
	Структура.Вставить(ИмяРеквизита, ОписаниеРеквизита);

КонецПроцедуры

// Получает описание значения.
//
// Параметры:
//  Значение	 - ЛюбойТип - Значение.
//  ТипXML		 - ТипДанныхXML - Тип данных XML.
// 
// Возвращаемое значение:
//  Структура - Описание значения.
//
Функция ПолучитьОписаниеЗначения(Значение, Знач ТипXML = Неопределено) Экспорт 

	Если ТипXML = Неопределено Тогда
	
		ТипXML = ПолучитьТипЗначенияXML(Значение);
	
	КонецЕсли; 
	
	Возврат Новый Структура("Тип, Значение", ТипXML, XMLСтрока(Значение)); 

КонецФункции

// Записывает таблицу структуры.
//
// Параметры:
//  ДокументDOM		 - ДокументDOM - ДокументDOM.
//  ЭлементРодитель	 - ЭлементФормы - Элемент-родитель.
//  ИмяТаблицы		 - Строка - Имя таблицы.
//  Таблица			 - ТаблицаЗначений - Таблица.
//  ИмяСтрокиТаблицы - Строка - Имя строки таблицы.
//
Процедура ЗаписатьТаблицуСтруктуры(ДокументDOM, ЭлементРодитель, ИмяТаблицы, Таблица, ИмяСтрокиТаблицы = "Row") Экспорт 

	ЭлементТаблицы = СоздатьЭлемент(ДокументDOM, ИмяТаблицы,,, ЭлементРодитель);
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		ЭлементСтрокиТаблицы = СоздатьЭлемент(ДокументDOM, ИмяСтрокиТаблицы,,, ЭлементТаблицы);
		
		Для каждого Колонка Из Таблица.Колонки Цикл
		
			ЗаписатьПолеСтруктуры(ДокументDOM, ЭлементСтрокиТаблицы, Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры

// Записывает реквизит выгружаемого объекта.
//
// Параметры:
//  ДокументDOM	 - ДокументDOM - ДокументDOM.
//  ИмяПоля		 - Строка - Имя поля.
//  Значение	 - ЛюбойТип	- Значение.
//
Процедура ЗаписатьРеквизитВыгружаемогоОбъекта(ДокументDOM, ИмяПоля, Значение) Экспорт 

	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	
	Если КорневойЭлемент = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ЗаписатьРеквизитВДокументDOM(ДокументDOM, КорневойЭлемент, ИмяПоля, Значение);

КонецПроцедуры

// Процедура - Записать реквизит в документ DOM
//
// Параметры:
//  ДокументDOM		 - ДокументDOM - ДокументDOM.
//  ЭлементРодитель	 - ЭлементФормы - Элемент-родитель.
//  ИмяПоля			 - Строка - Имя поля.
//  Значение		 - ЛюбойТип	- Значение.
//
Процедура ЗаписатьРеквизитВДокументDOM(ДокументDOM, ЭлементРодитель, ИмяПоля, Значение)

	ЗаписатьПолеСтруктуры(ДокументDOM, ЭлементРодитель, ИмяПоля, Значение);

КонецПроцедуры
 
Процедура ЗаписатьПолеСтруктуры(ДокументDOM, ЭлементРодитель, ИмяПоля, Знач Значение)
	
	Если ЭтоОписаниеЗначения(Значение) Тогда
		
		Тип = Значение.Тип;
		ЗначениеРеквизита = Значение.Значение;
		
	Иначе 
		
		ЗначениеРеквизита = Значение;
		Тип = Неопределено;
	
	КонецЕсли; 
	
	Атрибуты = СтруктураАтрибутовЗначенияXML(ЗначениеРеквизита, Тип);
			
	СоздатьЭлемент(ДокументDOM,
					ИмяПоля,
					ЗначениеРеквизита,
					Атрибуты,
					ЭлементРодитель);

КонецПроцедуры
 
Функция СтруктураАтрибутовЗначенияXML(Значение, ТипXML = Неопределено)

	Структура = Новый Соответствие;
	
	Если Значение = Неопределено Тогда
	
		Структура.Вставить("nil", Истина);
		
	Иначе 
		
		Если Не ЗначениеЗаполнено(ТипXML) Тогда
		
			Структура.Вставить("type", ПолучитьТипЗначенияXML(Значение));
		
		Иначе
		
			Структура.Вставить("type", ТипXML);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат Структура;

КонецФункции // СформироватьАтрибутыЗначения()
 
Функция ПолучитьТипЗначенияXML(Значение)
	
	Возврат ПолучитьТипXML(ТипЗнч(Значение));

КонецФункции // ПолучитьТипЗначения()

Функция ПолучитьТипXML(Тип)

	XMLТип = XMLТип(Тип);
	
	ИмяТипа = XMLТип.ИмяТипа;
	
	Если ИмяТипа = "decimal"
		 Или ИмяТипа = "double"
		 Или ИмяТипа = "float" Тогда
		
			ИмяТипа = "number";
			
	ИначеЕсли ИмяТипа = "dateTime" Тогда
			
			ИмяТипа = "date";
		
	КонецЕсли; 
	
	Возврат ИмяТипа;

КонецФункции // ПолучитьТипXML(()
 
Процедура ЗаписатьXMLОбъект(Объект, ЗаписьXML, ДатаИзменения, Правила, ВыгруженоОбъектов) Экспорт
	
	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
		
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
		
	Иначе 
		
		МетаданныеОбъекта = Объект.Метаданные();
	
	КонецЕсли; 	
	
	ПравилоКонвертацииОбъекта = ПолучитьСтрокуПравилКонвертацииОбъекта(Объект,
																	Правила,
																	МетаданныеОбъекта.ПолноеИмя(),
																	"ОбъектИсточник");
	
	Если ПравилоКонвертацииОбъекта = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 																
																	
																	
	ДокументDOM = ВыгрузитьОбъектВДокументDOM(Объект,
											ЗаписьXML,
											МетаданныеОбъекта,
											ДатаИзменения,
											ПравилоКонвертацииОбъекта,
											Правила); 
	
	Если Не ДокументDOM = Неопределено Тогда
	
		ЗаписатьДокументDOM(ДокументDOM, ЗаписьXML, Ложь);
		ВыгруженоОбъектов = ВыгруженоОбъектов + 1;
	
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьПравилаКонвертации() Экспорт
	
	Правила = ПолучитьПравилаКонвертацииОбъектов();
	
	Правила.Вставить("Обработчики", Обработки.CRM_ОбработчикиКонвертации.Создать());
	
	Возврат Правила;

КонецФункции // ПолучитьПравилаКонвертации()
 
Функция ВыгрузитьОбъектВДокументDOM(Объект,
									ЗаписьXML,
									МетаданныеОбъекта,
									ДатаИзменения,
									ПравилаСинхронизацииОбъекта,
									ОписаниеПравил)
									
		
										
	ОбработчикиКонвертации = ОписаниеПравил.Обработчики;
	СоответствиеТипов = ОписаниеПравил.СоответствиеТипов;
									
	ДокументDOM = Новый ДокументDOM;
	СтруктураДанныхОбъекта = Новый Структура;
	СтруктураДанныхОбъекта.Вставить("Объект", Объект);
	СтруктураДанныхОбъекта.Вставить("Метаданные", МетаданныеОбъекта);
	СтруктураДанныхОбъекта.Вставить("ЗаписьXML", ЗаписьXML);
	СтруктураДанныхОбъекта.Вставить("СтандартныйРеквизит", Ложь);
	СтруктураДанныхОбъекта.Вставить("СоответствиеТипов", СоответствиеТипов);
	СтруктураДанныхОбъекта.Вставить("ОписаниеПравил", ОписаниеПравил);
	
	КорневойЭлемент = СоздатьКорневойЭлементОбъекта(ДокументDOM, СтруктураДанныхОбъекта.Объект, ПравилаСинхронизацииОбъекта);
	
	СтруктураДанныхОбъекта.Вставить("Документ", ДокументDOM);
	СтруктураДанныхОбъекта.Вставить("КорневойЭлемент", КорневойЭлемент);
	
	Если Тип("УдалениеОбъекта") = ТипЗнч(Объект) Тогда
	
		ЗаписатьУдалениеОбъектаВДокументDOM(ДокументDOM,
											КорневойЭлемент,
											СтруктураДанныхОбъекта,
											ПравилаСинхронизацииОбъекта,
											ОбработчикиКонвертации);
	
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		 
		 ЗаписатьДанныеРегистраВДокументDOM(ДокументDOM,
		 									КорневойЭлемент,
		 									СтруктураДанныхОбъекта,
											ПравилаСинхронизацииОбъекта,
											ОбработчикиКонвертации);
		 
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта)
		 Или Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта)
		 Или Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		 Или Метаданные.Документы.Содержит(МетаданныеОбъекта)
		 Или Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта)
		 Или Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		 
		 ЗаписатьДанныеОбъектаВДокументDOM(ДокументDOM,
		 									КорневойЭлемент,
											СтруктураДанныхОбъекта,
											ПравилаСинхронизацииОбъекта,
											ОбработчикиКонвертации);
											
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда 
		
		ЗаписатьЗначениеРеквизита(ДокументDOM,
									КорневойЭлемент, 
									Новый Структура("Имя, Тип", "Value", МетаданныеОбъекта.Тип),
									СтруктураДанныхОбъекта,
									ПравилаСинхронизацииОбъекта,
									ОбработчикиКонвертации,
									Истина);
		 
	Иначе 
		 
		 Возврат Неопределено;
	
	КонецЕсли;
	 
	Если ЗначениеЗаполнено(ДатаИзменения) Тогда
	
		СоздатьЭлемент(ДокументDOM, "ДатаИзменения", XMLСтрока(ДатаИзменения),,КорневойЭлемент);
	
	КонецЕсли;
	
	Отказ = Ложь;
	
	ВыполнитьАлгоритмОбработчикаКонвертации(СтруктураДанныхОбъекта,
											ПравилаСинхронизацииОбъекта, 
											ОбработчикиКонвертации,
											"АлгоритмПриВыгрузке",
											Отказ);
											
	Если Отказ Тогда
	
		ДокументDOM = Неопределено;
	
	КонецЕсли; 
	
	Возврат ДокументDOM;
	
КонецФункции // ВыгрузитьОбъектВДокументDOM()

Процедура ЗаписатьДанныеРегистраВДокументDOM(ДокументDOM,
											КорневойЭлемент,
											ДанныеОбъекта,
											ПравилаСинхронизацииОбъекта,
											ОбработчикиКонвертации)
											
	Отказ = Ложь;
											
	ЗаписатьОтборРегистраВДокументDOM(ДокументDOM,
									 КорневойЭлемент,
									 ДанныеОбъекта,
									 ПравилаСинхронизацииОбъекта,
									 ОбработчикиКонвертации,
									 Отказ);
									 
	Если Отказ Тогда
	
		ДокументDOM = Неопределено;
		Возврат;
	
	КонецЕсли; 

	ЗаписатьСтрокиНабораЗаписей(ДокументDOM, КорневойЭлемент, ДанныеОбъекта, ПравилаСинхронизацииОбъекта, ОбработчикиКонвертации);
									 
КонецПроцедуры

Процедура ЗаписатьОтборРегистраВДокументDOM(ДокументDOM,
											КорневойЭлемент,
											ДанныеОбъекта,
											ПравилаСинхронизацииОбъекта,
											ОбработчикиКонвертации,
											Отказ)

	ЭлементОтборов = СоздатьЭлемент(ДокументDOM, "Filter",,, КорневойЭлемент);
	
	МетаданныеЗначения = ДанныеОбъекта.Метаданные;
	
	ЭтоПодчиненныйРегистр = МетаданныеЗначения.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	
	Если ЭтоПодчиненныйРегистр Тогда
		
		Если ДанныеОбъекта.Объект.Количество() = 0 Тогда
		
			Отказ = Истина;
			Возврат;
		
		КонецЕсли;
		
		СтрокаРегистра = ДанныеОбъекта.Объект[0];
		
		Если МетаданныеЗначения.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
			ДанныеОбъекта.Вставить("ЗначениеРеквизита", СтрокаРегистра.Период);						 
			
			ЗаписатьПолеОтбораПоИмениРеквизита("Период",
											ДокументDOM,
											ЭлементОтборов,
											ДанныеОбъекта,
											ПравилаСинхронизацииОбъекта,
											ОбработчикиКонвертации);
		
		КонецЕсли; 
										
		Для каждого Измерение Из МетаданныеЗначения.Измерения Цикл
		
			ДанныеОбъекта.Вставить("ЗначениеРеквизита", СтрокаРегистра[Измерение.Имя]);
			
			ЗаписатьПолеОтбораПоРеквизиту(Измерение,
										ДокументDOM,
										ЭлементОтборов,
										ДанныеОбъекта,
										ПравилаСинхронизацииОбъекта,
										ОбработчикиКонвертации);
		
		КонецЦикла; 								
		
		
	Иначе 
		
		Для каждого ЭлементОтбора Из ДанныеОбъекта.Объект.Отбор Цикл
		
			Если Не ЭлементОтбора.Использование Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			ДанныеОбъекта.Вставить("ЗначениеРеквизита", ЭлементОтбора.Значение);						 
			
			ЗаписатьПолеОтбораПоИмениРеквизита(ЭлементОтбора.Имя,
												ДокументDOM,
												ЭлементОтборов,
												ДанныеОбъекта,
												ПравилаСинхронизацииОбъекта,
												ОбработчикиКонвертации);
		
		КонецЦикла;
							 
	КонецЕсли;						 
		
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "ЗначениеРеквизита");

КонецПроцедуры

Процедура ЗаписатьПолеОтбораПоИмениРеквизита(ИмяРеквизита,
											ДокументDOM,
											ЭлементРодитель,
											ДанныеОбъекта,
											ПравилаСинхронизацииОбъекта,
											ОбработчикиКонвертации)
	
	Реквизит = ПолучитьРеквизитОтбораРегистра(ИмяРеквизита,
											 ДанныеОбъекта);
	

	ЗаписатьПолеОтбораПоРеквизиту(Реквизит,
								 ДокументDOM,
								 ЭлементРодитель,
								 ДанныеОбъекта,
								 ПравилаСинхронизацииОбъекта,
								 ОбработчикиКонвертации);

КонецПроцедуры
						 
Процедура ЗаписатьПолеОтбораПоРеквизиту(Реквизит,
										ДокументDOM,
										ЭлементРодитель,
										ДанныеОбъекта,
										ПравилаСинхронизацииОбъекта,
										ОбработчикиКонвертации)

	Если Реквизит = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ЗаписатьЗначениеРеквизита(ДокументDOM,
							 ЭлементРодитель,
							 Реквизит,
							 ДанныеОбъекта,
							 ПравилаСинхронизацииОбъекта,
							 ОбработчикиКонвертации);	

КонецПроцедуры
 						 
Функция ПолучитьРеквизитОтбораРегистра(Имя, ДанныеОбъекта)

	ПолучатьИмяСтандартногоРеквизита = Ложь;
	
	Реквизит = ПолучитьОписаниеРеквизитаОМДИзКоллекции(Имя,
												ДанныеОбъекта.Метаданные.СтандартныеРеквизиты);
														
	Если Реквизит <> Неопределено Тогда
		
		ПолучатьИмяСтандартногоРеквизита = Истина;
		
	Иначе 
		
		Реквизит = ПолучитьОписаниеРеквизитаОМДИзКоллекции(Имя,
															ДанныеОбъекта.Метаданные.Измерения);
	
	КонецЕсли;
														
	ДанныеОбъекта.СтандартныйРеквизит = ПолучатьИмяСтандартногоРеквизита;													
														
	Возврат Реквизит;													

КонецФункции // ПолучитьРеквизитОтбораРегистра()
 
Процедура ЗаписатьСтрокиНабораЗаписей(ДокументDOM, ЭлементРодитель, ДанныеОбъекта, ПравилаСинхронизацииОбъекта, ОбработчикиКонвертации)
	
	ЭлементЗаписей = СоздатьЭлемент(ДокументDOM, "Records",,, ЭлементРодитель);
	
	ТаблицаДанных = ДанныеОбъекта.Объект.Выгрузить();
	
	ДанныеОбъекта.Вставить("ТаблицаДанных", ТаблицаДанных);
	ДанныеОбъекта.Вставить("СтрокаТаблицы", Неопределено);
	
	МетаданныеОбъекта = ДанныеОбъекта.Метаданные;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		ДанныеОбъекта.СтрокаТаблицы = СтрокаТаблицы;
		
		Отказ = Ложь;
		
		ВыполнитьОбработчикПриВыгрузкеСтроки(ДанныеОбъекта, ПравилаСинхронизацииОбъекта, ОбработчикиКонвертации, Отказ);
		
		Если Отказ Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ЭлементЗаписи = СоздатьЭлемент(ДокументDOM, "Record",,, ЭлементЗаписей);
		
		ДанныеОбъекта.СтандартныйРеквизит = Истина;
		
		ЗаписатьЗначенияРеквизитов(ДокументDOM,
									ЭлементЗаписи,
									МетаданныеОбъекта.СтандартныеРеквизиты,
									ДанныеОбъекта,
									ПравилаСинхронизацииОбъекта,
									ОбработчикиКонвертации);
									
		ДанныеОбъекта.СтандартныйРеквизит = Ложь;
									
		ЗаписатьЗначенияРеквизитов(ДокументDOM,
									ЭлементЗаписи,
									МетаданныеОбъекта.Измерения,
									ДанныеОбъекта,
									ПравилаСинхронизацииОбъекта,
									ОбработчикиКонвертации);
									
		ЗаписатьЗначенияРеквизитов(ДокументDOM,
									ЭлементЗаписи,
									МетаданныеОбъекта.Ресурсы,
									ДанныеОбъекта,
									ПравилаСинхронизацииОбъекта,
									ОбработчикиКонвертации);
									
		ЗаписатьЗначенияРеквизитов(ДокументDOM,
									ЭлементЗаписи,
									МетаданныеОбъекта.Реквизиты,
									ДанныеОбъекта,
									ПравилаСинхронизацииОбъекта,
									ОбработчикиКонвертации);
	
	КонецЦикла; 
	
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "СтрокаТаблицы");
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "ТаблицаДанных");
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПриВыгрузкеСтроки(ДанныеОбъекта, ПравилоКонвертации, Обработчики, Отказ)

	ВыполнитьАлгоритмОбработчикаКонвертации(ДанныеОбъекта,
											ПравилоКонвертации,
											Обработчики,
											"АлгоритмПриВыгрузкеСтроки",
											Отказ);

КонецПроцедуры

Процедура ВыполнитьАлгоритмОбработчикаКонвертации(ДанныеОбъекта, ПравилоКонвертации, Обработчики, ИмяАлгоритма, Отказ)

	Если ПравилоКонвертации <> Неопределено
		 И ЗначениеЗаполнено(ПравилоКонвертации[ИмяАлгоритма]) Тогда
	
		ВыполнитьОбработчикКонвертации(ДанныеОбъекта,
										Обработчики,
										ПравилоКонвертации[ИмяАлгоритма],
										Отказ);
	
	КонецЕсли; 
	

КонецПроцедуры
 
Процедура УдалитьПолеОписанияОбъекта(ОписаниеОбъекта, ИмяПоля)

	Если ОписаниеОбъекта.Свойство(ИмяПоля) Тогда
		
		ОписаниеОбъекта.Удалить(ИмяПоля);
		
	КонецЕсли;

КонецПроцедуры// УдалитьПолеОписанияОбъекта()
 
Функция ПолучитьОписаниеРеквизитаОМДИзКоллекций(ИмяРеквизита,
												КоллекцияОМД1 = Неопределено,
												КоллекцияОМД2 = Неопределено,
												КоллекцияОМД3 = Неопределено,
												КоллекцияОМД4 = Неопределено,
												КоллекцияОМД5 = Неопределено,
												КоллекцияОМД6 = Неопределено)

	Реквизит = Неопределено;
	
	МассивКоллекций = Новый Массив;
	МассивКоллекций.Добавить(КоллекцияОМД1);
	МассивКоллекций.Добавить(КоллекцияОМД2);
	МассивКоллекций.Добавить(КоллекцияОМД3);
	МассивКоллекций.Добавить(КоллекцияОМД4);
	МассивКоллекций.Добавить(КоллекцияОМД5);
	МассивКоллекций.Добавить(КоллекцияОМД6);
	
	Для каждого Коллекция Из МассивКоллекций Цикл
	
		Реквизит = ПолучитьОписаниеРеквизитаОМДИзКоллекций(ИмяРеквизита, Коллекция);
		
		Если Реквизит <> Неопределено Тогда
		
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Реквизит;

КонецФункции // ПолучитьРеквизитОМДИзКоллекций()

Функция ПолучитьОписаниеРеквизитаОМДИзКоллекции(ИмяРеквизита, Коллекция)

	Реквизит = Неопределено;
	
	Для каждого ОписаниеРеквизита Из Коллекция Цикл
	
		Если ОписаниеРеквизита.Имя = ИмяРеквизита Тогда
		
			Реквизит = ОписаниеРеквизита;
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Реквизит;

КонецФункции // ПолучитьОписаниеРеквизитаОМДИзКоллекции()
  
Процедура ЗаписатьДанныеОбъектаВДокументDOM(ДокументDOM, КорневойЭлемент, ДанныеОбъекта, ПравилаСинхронизацииОбъекта, ОбработчикиКонвертации)
	
	Объект = ДанныеОбъекта.Объект;
	МетаданныеОбъекта = ДанныеОбъекта.Метаданные;

	ДанныеОбъекта.СтандартныйРеквизит = Истина;
	
	ЗаписатьЗначенияРеквизитов(ДокументDOM,
							   КорневойЭлемент,
							   МетаданныеОбъекта.СтандартныеРеквизиты,
							   ДанныеОбъекта,
							   ПравилаСинхронизацииОбъекта,
							   ОбработчикиКонвертации);
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		 И МетаданныеОбъекта.Иерархический
		 И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
		 И Объект.ЭтоГруппа Тогда
	     ДанныеОбъекта.СтандартныйРеквизит = Ложь;
	
		 ЗаписатьЗначенияРеквизитовГруппы(ДокументDOM,
		 КорневойЭлемент,
		 МетаданныеОбъекта.Реквизиты,
		 ДанныеОбъекта,
		 ПравилаСинхронизацииОбъекта,
		 ОбработчикиКонвертации);
	Иначе	
		ДанныеОбъекта.СтандартныйРеквизит = Ложь;
		
		ЗаписатьЗначенияРеквизитов(ДокументDOM,
		КорневойЭлемент,
		МетаданныеОбъекта.Реквизиты,
		ДанныеОбъекта,
		ПравилаСинхронизацииОбъекта,
		ОбработчикиКонвертации);	
	
	КонецЕсли; 
	
	
	
	Если Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
	
		ЗаписатьЗначенияРеквизитов(ДокументDOM,
								  КорневойЭлемент,
								  МетаданныеОбъекта.РеквизитыАдресации,
								  ДанныеОбъекта,
								  ПравилаСинхронизацииОбъекта,
								  ОбработчикиКонвертации);
	
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТабличнаяЧасть", "");
	
	Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		ДанныеОбъекта.ТабличнаяЧасть = ТабличнаяЧасть.Имя;
		
		ПравилоКонвертации = ПолучитьСтрокуПравилКонвертации(ПравилаСинхронизацииОбъекта,
							  										ТабличнаяЧасть.Имя);
																	
		Если ПравилоКонвертации = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ЗаписатьТабличнуюЧасть(ДокументDOM,
							  КорневойЭлемент,
							  ТабличнаяЧасть,
							  ДанныеОбъекта,
							  ПравилоКонвертации,
							  ОбработчикиКонвертации);
	
	КонецЦикла;
						  
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "ТабличнаяЧасть");					  

КонецПроцедуры
 
Функция СоздатьКорневойЭлементОбъекта(ДокументDOM, Объект, ПравилаСинхронизацииОбъекта)

	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
	
		ИмяОбъекта = "ObjectDeletion";
		
		URIПространстваИмен = "http://v8.1c.ru/data";
	
	Иначе
	
		Если ПравилаСинхронизацииОбъекта <> Неопределено
		 И ЗначениеЗаполнено(ПравилаСинхронизацииОбъекта.ОбъектПриемник) Тогда
	
			ИмяОбъекта = ПолучитьТипОбъекта(ПравилаСинхронизацииОбъекта.ОбъектПриемник);
		
		Иначе 
		
			ИмяОбъекта = XMLТипЗнч(Объект).ИмяТипа;
	
		КонецЕсли; 
		
		URIПространстваИмен = Неопределено;
		
	КонецЕсли; 
		
	Элемент = СоздатьЭлемент(ДокументDOM,
							ИмяОбъекта,
							,
							,
							ДокументDOM,
							URIПространстваИмен);
							
	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
	
		ДобавитьАтрибут(Элемент, "xmlns", "http://www.w3.org/2000/xmlns/", "http://v8.1c.ru/data");
	
	КонецЕсли;
	
	Возврат Элемент;

КонецФункции // СоздатьКорневойЭлементОбъекта()
 
Процедура ЗаписатьТабличнуюЧасть(ДокументDOM,
								ЭлементРодитель,
								ТабличнаяЧасть,
								ДанныеОбъекта,
								ПравилаКонвертации,
								ОбработчикиКонвертации)

	Объект = ДанныеОбъекта.Объект;
	
	Если ПравилаКонвертации <> Неопределено
		 И ЗначениеЗаполнено(ПравилаКонвертации.ОбъектПриемник) Тогда
	
		ИмяТабличнойЧасти = ПравилаКонвертации.ОбъектПриемник;
		
	Иначе 
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
	
	КонецЕсли;
	
	ЭлементТаблицы = СоздатьЭлемент(ДокументDOM, ИмяТабличнойЧасти,,, ЭлементРодитель);
	
	Если Объект[ТабличнаяЧасть.Имя].Количество() = 0 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Таблица = Объект[ТабличнаяЧасть.Имя].Выгрузить();
	
	КолонкаНомерСтроки = Таблица.Колонки.Найти("НомерСтроки");
	
	Если КолонкаНомерСтроки <> Неопределено Тогда
	
		Таблица.Колонки.Удалить(КолонкаНомерСтроки);
	
	КонецЕсли; 
	
	ДанныеОбъекта.Вставить("ТаблицаДанных", Таблица);
	
	ЗаписатьТаблицу(ДокументDOM,
					ЭлементТаблицы,
					ДанныеОбъекта,
					ТабличнаяЧасть,
					ПравилаКонвертации,
					ОбработчикиКонвертации);
	
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "ТаблицаДанных");

КонецПроцедуры

Процедура ЗаписатьТаблицу(ДокументDOM,
						ЭлементРодитель,
						ДанныеОбъекта,
						ОписаниеТабличнойЧасти,
						ПравилаКонвертации,
						ОбработчикиКонвертации,
						ИмяСтрокиТаблицы = "Row")

	Отказ = Ложь;
						
	ВыполнитьАлгоритмОбработчикаКонвертации(ДанныеОбъекта,
										ПравилаКонвертации,
										ОбработчикиКонвертации,
										"АлгоритмПриВыгрузке",
										Отказ);
										
	Если Отказ Тогда
	
		Возврат;
	
	КонецЕсли; 
						
	ДанныеОбъекта.Вставить("СтрокаТаблицы", Неопределено);
	
	Для каждого Строка Из ДанныеОбъекта.ТаблицаДанных Цикл
		
		ДанныеОбъекта.СтрокаТаблицы = Строка;
		
		Отказ = Ложь;
		
		ВыполнитьОбработчикПриВыгрузкеСтроки(ДанныеОбъекта, ПравилаКонвертации, ОбработчикиКонвертации, Отказ);
		
		Если Отказ Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ЭлементСтроки = СоздатьЭлемент(ДокументDOM, ИмяСтрокиТаблицы,,, ЭлементРодитель);
		ЗаписатьЗначенияРеквизитов(ДокументDOM,
									ЭлементСтроки,
									ДанныеОбъекта.ТаблицаДанных.Колонки,
									ДанныеОбъекта,
									ПравилаКонвертации,
									ОбработчикиКонвертации);
	
	КонецЦикла; 
	
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "СтрокаТаблицы");
	
КонецПроцедуры
 
Процедура ЗаписатьЗначенияРеквизитов(ДокументDOM,
									ЭлементРодитель,
									КоллекцияРеквизитов,
									ДанныеОбъекта,
									ПравилаКонвертацииРеквизитов,
									ОбработчикиКонвертации)
	Для каждого Реквизит Из КоллекцияРеквизитов Цикл                                                               
		
		ЗаписатьЗначениеРеквизита(ДокументDOM,
								  ЭлементРодитель,
								  Реквизит,
								  ДанныеОбъекта,
								  ПравилаКонвертацииРеквизитов,
								  ОбработчикиКонвертации);
	
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаписатьЗначенияРеквизитовГруппы(ДокументDOM,
									ЭлементРодитель,
									КоллекцияРеквизитов,
									ДанныеОбъекта,
									ПравилаКонвертацииРеквизитов,
									ОбработчикиКонвертации)
	Объект = ДанныеОбъекта.Объект;
	МетаданныеОбъекта = ДанныеОбъекта.Метаданные;
	Для каждого Реквизит Из КоллекцияРеквизитов Цикл                                                               
		
		Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
			И МетаданныеОбъекта.Иерархический
			И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
			И Объект.ЭтоГруппа И Строка(Реквизит.Использование) <> "ДляГруппыИЭлемента" И Строка(Реквизит.Использование) <> "ДляГруппы" Тогда
			
			Продолжить;
			
			
		КонецЕсли;
		ЗаписатьЗначениеРеквизита(ДокументDOM,
								  ЭлементРодитель,
								  Реквизит,
								  ДанныеОбъекта,
								  ПравилаКонвертацииРеквизитов,
								  ОбработчикиКонвертации);
	
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаписатьЗначениеРеквизита(ДокументDOM,
									ЭлементРодитель,
									Реквизит,
									ДанныеОбъекта,
									ПравилаКонвертацииРеквизитов,
									ОбработчикиКонвертации,
									ЭтоЗначениеКонстанты = Ложь)

	Объект = ДанныеОбъекта.Объект;
									
	ПолучатьИменаСтандартных = Ложь;
	ПолучатьИменаСтандартных = ?(ДанныеОбъекта.Свойство("СтандартныйРеквизит", ПолучатьИменаСтандартных),
								ПолучатьИменаСтандартных, Ложь);
									
	Если ПолучатьИменаСтандартных Тогда
	
		ИмяРеквизита = ПолучитьИмяСтандартногоРеквизита(Реквизит.Имя);
	
	Иначе
	
		ИмяРеквизита = Реквизит.Имя;
	
	КонецЕсли;
	
	Если ЭтоЗначениеКонстанты Тогда
	
		ПравилоКонвертации = ПравилаКонвертацииРеквизитов;
	
	Иначе
	
		ПравилоКонвертации = ПолучитьСтрокуПравилКонвертации(ПравилаКонвертацииРеквизитов, ИмяРеквизита);
		
		Если ПравилоКонвертации = Неопределено Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ПравилоКонвертации.ОбъектПриемник) Тогда
		
			ИмяРеквизита = ПравилоКонвертации.ОбъектПриемник;
	
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ДанныеОбъекта.Свойство("ЗначениеРеквизита") Тогда
	
		Значение = ДанныеОбъекта.ЗначениеРеквизита;
	
	ИначеЕсли ДанныеОбъекта.Свойство("СтрокаТаблицы") Тогда
		
		Значение = ДанныеОбъекта.СтрокаТаблицы[Реквизит.Имя];
		
	Иначе 	
	
		Значение = ДанныеОбъекта.Объект[Реквизит.Имя];
	
	КонецЕсли;
	
	ТипЗначения = Неопределено;
	
	Если Не Значение = Неопределено Тогда 
		
		ТипЗначения = ПолучитьТипЗначенияКонвертированный(ПравилоКонвертации, Значение, ДанныеОбъекта);
				
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Значение", Значение);
	ДанныеОбъекта.Вставить("ИмяРеквизита", ИмяРеквизита);
	ДанныеОбъекта.Вставить("ТипЗначения", ТипЗначения);
	
	Если ПравилоКонвертации <> Неопределено
		 И ЗначениеЗаполнено(ПравилоКонвертации.АлгоритмПреобразования) Тогда
		 
		 Отказ = Ложь;
		 
		ВыполнитьОбработчикКонвертации(ДанныеОбъекта, ОбработчикиКонвертации, ПравилоКонвертации.АлгоритмПреобразования, Отказ);
										
		Если Отказ Тогда
		
			Возврат;
		
		КонецЕсли; 								
	
	КонецЕсли; 
	
	Если ТипЗнч(Реквизит) = Тип("КолонкаТаблицыЗначений") Тогда
	
		ТипРеквизита = Реквизит.ТипЗначения;
	
	Иначе
	
		ТипРеквизита = Реквизит.Тип;
	
	КонецЕсли; 
	
	Если ПравилоКонвертации = Неопределено
		 И ТипРеквизита.Типы().Количество() > 1
		 Или ПравилоКонвертации <> Неопределено
		 И ЗначениеЗаполнено(ДанныеОбъекта.ТипЗначения) Тогда
		 
		 Атрибуты = СтруктураАтрибутовЗначенияXML(ДанныеОбъекта.Значение, ДанныеОбъекта.ТипЗначения);
		 
	Иначе 
		 
		 Атрибуты = Неопределено;
	
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеОбъекта.Значение) <> Тип("ОписаниеТипов") Тогда
	
		ЭлементРеквизита = СоздатьЭлемент(ДокументDOM, ИмяРеквизита, XMLСтрока(ДанныеОбъекта.Значение), Атрибуты, ЭлементРодитель);
	
	КонецЕсли; 
	
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "ИмяРеквизита");
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "ТипЗначения");
	УдалитьПолеОписанияОбъекта(ДанныеОбъекта, "ЗначениеРеквизита");

КонецПроцедуры
  
Процедура КонвертироватьДокументыDOM(ДокументDOM, ДокументКонвертированный, ЭлементРодитель, Правило = Неопределено, СоответствиеТиповОбъектов)

	Для каждого Узел Из ДокументDOM.ДочерниеУзлы Цикл
		
		Если ТипЗнч(Узел) = Тип("ТекстDOM") Тогда
			
			ТекстовыйУзел = ДокументКонвертированный.СоздатьТекстовыйУзел(Узел.ТекстовоеСодержимое);
			ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
			Продолжить;
		
		ИначеЕсли ТипЗнч(Узел.РодительскийУзел) = Тип("ДокументDOM") Тогда
		
			ИмяЭлемента = ПолучитьТипОбъекта(Правило.ОбъектПриемник);
			
			СтрокаРеквизита = Правило;
			
		Иначе 
			
			Если Правило <> Неопределено Тогда
			
				СтрокаРеквизита = Правило.Строки.Найти(ПолучитьИмяСтандартногоРеквизитаРу(Узел.ИмяЭлемента),
														"ОбъектИсточник");
				
			Иначе 
				
				СтрокаРеквизита = Неопределено;
			
			КонецЕсли; 
			
			Если СтрокаРеквизита <> Неопределено Тогда
			
				ИмяЭлемента = ПолучитьИмяСтандартногоРеквизита(СтрокаРеквизита.ОбъектПриемник);
				
			Иначе 
				
				ИмяЭлемента = Узел.ИмяЭлемента;
			
			КонецЕсли; 
		
		КонецЕсли; 
		
		Элемент = СоздатьЭлемент(ДокументКонвертированный, ИмяЭлемента,,, ЭлементРодитель);
		
		Для каждого АтрибутыУзла Из Узел.Атрибуты Цикл
			
			Если АтрибутыУзла.Имя = "type" Тогда
				
				Значение = КонвертироватьТипДанных(АтрибутыУзла.Значение, СоответствиеТиповОбъектов);
				
			Иначе 
				
				Значение = АтрибутыУзла.Значение;
			
			КонецЕсли; 
			
			Элемент.УстановитьАтрибут(АтрибутыУзла.URIПространстваИмен, АтрибутыУзла.Имя, Значение);
		
		КонецЦикла; 
		
		КонвертироватьДокументыDOM(Узел, ДокументКонвертированный, Элемент, СтрокаРеквизита, СоответствиеТиповОбъектов);
	
	КонецЦикла; 

КонецПроцедуры

Функция КонвертироватьТипДанных(ТипСтрокой, СоответствиеТиповОбъектов)

	Если ТипСтрокой = Неопределено Тогда
	
		Возврат ТипСтрокой;
	
	КонецЕсли; 
	
	Попытка
	
		Тип = Тип(ТипСтрокой);
	
	Исключение
		
		Возврат ТипСтрокой; 
	
	КонецПопытки; 
				
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);	
	
	Если ОбъектМетаданных = Неопределено
		 Или Не ЭтоОбъектныйТип(Тип) Тогда
	
		Возврат ТипСтрокой;
	
	КонецЕсли;
	
	ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	СоответствующийОбъект = СоответствиеТиповОбъектов.Получить(ПолноеИмяМетаданных);
	
	Если СоответствующийОбъект = Неопределено Тогда
	
		Возврат ТипСтрокой;
	
	КонецЕсли; 
	
	МассивИмени = СтрРазделить(СоответствующийОбъект, ".", Ложь);
	
	Возврат ПолучитьОпределениеОбъекта(МассивИмени[0], "Ref") + "." + МассивИмени[1];

КонецФункции // КонвертироватьТипДанных()
 
Функция ПолучитьТипОбъекта(ИмяОбъектаМетаданных)

	МассивИмен = СтрРазделить(ИмяОбъектаМетаданных, ".", Ложь);
	
	ТипОбъекта = "";

	Если МассивИмен.Количество() > 1 Тогда
	
		ТипОбъекта = ПолучитьОпределениеОбъекта(МассивИмен[0]) + "." + МассивИмен[1];
	
	КонецЕсли; 
	
	Возврат ТипОбъекта;
	
КонецФункции // ()

Функция ПолучитьОпределениеОбъекта(ВидОбъекта, СсылкаОбъект = "Object")

	Результат = "";
	
	Если ВидОбъекта = "Справочник" Тогда
	
		Результат = "Catalog" + СсылкаОбъект;
		
	ИначеЕсли ВидОбъекта = "Документ" Тогда
	
		Результат = "Document" + СсылкаОбъект;
		
	ИначеЕсли ВидОбъекта = "Задача" Тогда
	
		Результат = "Task" + СсылкаОбъект;
		
	ИначеЕсли ВидОбъекта = "БизнесПроцесс" Тогда
	
		Результат = "BusinessProcess" + СсылкаОбъект;
		
	ИначеЕсли ВидОбъекта = "РегистрСведений" Тогда
	
		Результат = "InformationRegisterRecordSet";
		
	ИначеЕсли ВидОбъекта = "Константа" Тогда
	
		Результат = "ConstantValueManager";
		
	ИначеЕсли ВидОбъекта = "РегистрНакопления" Тогда
	
		Результат = "AccumulationRegisterRecordSet";
		
	ИначеЕсли ВидОбъекта = "ПланВидовХарактеристик" Тогда
	
		Результат = "ChartOfCharacteristicTypes" + СсылкаОбъект;
		
	ИначеЕсли ВидОбъекта = "ПланОбмена" Тогда
	
		Результат = "ExchangePlan" + СсылкаОбъект;
	
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ПолучитьОпределниеОбъекта()
 
Функция СоздатьЭлемент(ДокументDOM, ИмяЭлемента, Значение = "", СтруктураАтрибутов = Неопределено, Родитель = Неопределено, URIПространстваимен = "")

	ДобавитьПространствоИмен = ЗначениеЗаполнено(URIПространстваимен);
	
	Если ДобавитьПространствоИмен Тогда
		
		Элемент = ДокументDOM.СоздатьЭлемент(URIПространстваимен, ИмяЭлемента);
		
	
	Иначе
	
		Элемент = ДокументDOM.СоздатьЭлемент(ИмяЭлемента);
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Значение) Тогда
	
		Элемент.ТекстовоеСодержимое = XMLСтрока(Значение);
		
	КонецЕсли; 
	
	Если СтруктураАтрибутов <> Неопределено Тогда
	
		Для каждого КлючИЗначение Из СтруктураАтрибутов Цикл
			
			Элемент.УстановитьАтрибут(КлючИЗначение.Ключ, XMLСтрока(КлючИЗначение.Значение));
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Если Родитель <> Неопределено Тогда
	
		Родитель.ДобавитьДочерний(Элемент);
	
	КонецЕсли; 
	
	Возврат Элемент;

КонецФункции // ДобавитьДочернийЭлемент()
 
// Записывает содержимое объекта ДокументDOM в xml.
//
// Параметры:
//  ДокументDOM	 - ДокументDOM	 - Объект ДокументDOM, либо узел документа.
//  ЗаписьXML	 - ЗаписьXML	 - Инициализированный объект записи.
//  ЗаписыватьОбъявлениеXML - Булево - Записывать объявление XML.
//
Процедура ЗаписатьДокументDOM(ДокументDOM, ЗаписьXML, ЗаписыватьОбъявлениеXML = Ложь) Экспорт

	ЗаписьDOM = Новый ЗаписьDOM;
	
	ЗаписьDOM.КонфигурацияDOM.УстановитьПараметр("xml-declaration", ЗаписыватьОбъявлениеXML);
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);

КонецПроцедуры // ЗаписатьДокументDOM()

Процедура ЗаписатьУдалениеОбъектаВДокументDOM(ДокументDOM, КорневойЭлемент, ДанныеОбъекта, ПравилаСинхронизацииОбъекта, ОбработчикиКонвертации)
		
	ПравилоСсылки = ПолучитьСтрокуПравилКонвертации(ПравилаСинхронизацииОбъекта, "Ref");
	
	ТипСтрока = ПолучитьТипЗначенияКонвертированный(ПравилоСсылки, ДанныеОбъекта.Объект.Ссылка, ДанныеОбъекта);
	
	Если Не ЗначениеЗаполнено(ТипСтрока) Тогда
	
		ДокументDOM = Неопределено;
		Возврат;
	
	КонецЕсли; 
		
	Элемент = СоздатьЭлемент(ДокументDOM,
							"d3p1:Ref",
							XMLСтрока(ДанныеОбъекта.Объект.Ссылка),
							,
							КорневойЭлемент,
							"http://v8.1c.ru/data");
							
	ДобавитьАтрибут(Элемент, "xmlns", "http://www.w3.org/2000/xmlns/");
	ДобавитьАтрибут(Элемент, "xmlns:d3p1", "http://www.w3.org/2000/xmlns/", "http://v8.1c.ru/data");
	ДобавитьАтрибут(Элемент, "xmlns:xsi", "http://www.w3.org/2000/xmlns/", "http://www.w3.org/2001/XMLSchema-instance");
	ДобавитьАтрибут(Элемент, "xsi:type", "http://www.w3.org/2001/XMLSchema-instance", ТипСтрока);

КонецПроцедуры

Процедура ДобавитьАтрибут(ЭлементРодитель, ИмяАтрибута, URIПространстваИмен = "", Значение = "")

	ЭлементРодитель.УстановитьАтрибут(URIПространстваИмен, ИмяАтрибута, Значение);	

КонецПроцедуры // ДобавитьАтрибут()

Функция ПолучитьТипЗначенияКонвертированный(ПравилоКонвертации, Значение, ДанныеОбъекта)

	ТипЗначения = Неопределено;
	
	Если ПравилоКонвертации <> Неопределено
		 И ЗначениеЗаполнено(ПравилоКонвертации.ТипПриемник) Тогда
		
		ТипЗначения = ПравилоКонвертации.ТипПриемник;
					
	Иначе 
		
		ТипЗначения = XMLТипЗнч(Значение).ИмяТипа;
		
		ТипПрименика = ДанныеОбъекта.СоответствиеТипов.Получить(ТипЗначения);
		
		Если ТипПрименика <> Неопределено Тогда
		
			ТипЗначения = ТипПрименика;
		
		КонецЕсли; 
	
	КонецЕсли;
	
	Возврат ТипЗначения;

КонецФункции // ПолучитьТипЗначения()

// Формирует файлы выгрузки.
//
// Параметры:
//  Узел	 - ПланыОбменаСсылка.CRM_СинхронизацияСМобильнымПриложением - Узел обмена.
//  ПараметрыАвторизации - Структура - Параметры авторизации.
//
Процедура СформироватьФайлыВыгрузки(Узел, ПараметрыАвторизации) Экспорт 

	ЗарегистрироватьСозданныеСоответствия(Узел);
	
	// Проверяем есть ли новые данные к выгрузке
	Если ЕстьДанныеДляВыгрузки(Узел).ЕстьИзменения Тогда
		
		ОписаниеПравил = ПолучитьПравилаКонвертации();      

		ТаблицаИзменений = СформироватьТаблицуВыгрузки(Узел, ОписаниеПравил);
		
		СписокГруппДоступа = ТаблицаИзменений.Скопировать(, "ГруппаДоступа");
		СписокГруппДоступа.Свернуть("ГруппаДоступа");

		ГруппыДоступа = СписокГруппДоступа.ВыгрузитьКолонку("ГруппаДоступа");
		
		Для каждого ГруппаДоступа Из ГруппыДоступа Цикл
			СтрокиГруппыДоступа = ТаблицаИзменений.НайтиСтроки(Новый Структура("ГруппаДоступа", ГруппаДоступа));
			Разрешения = РазрешенияГруппы(ГруппаДоступа);

			ЭлементовВыгружено = 0;
			
			Если Разрешения.Количество() > 0 Тогда
				
				ИмяФайлаРазрешений = СгенерироватьИмяФайла(РасширениеФайлаРазрешений());
				
				ПутьКФайлуРазрешений = ПолучитьИмяВременногоФайла(РасширениеФайлаРазрешений());
				
				Если СформироватьФайлРазрешений(Разрешения, ПутьКФайлуРазрешений) Тогда 
					ОтправитьФайлВОблако(Узел,
										ИмяФайлаРазрешений,
										ПутьКФайлуРазрешений,
										ПараметрыАвторизации,
										ТекущаяДата());
				КонецЕсли;
				
			Иначе 
				
				ИмяФайлаРазрешений = "";
				
			КонецЕсли; 
			
			Пока ЭлементовВыгружено < СтрокиГруппыДоступа.Количество() Цикл 
			
				// Определяем Имя файла синронизации
				ИмяФайла = СгенерироватьИмяФайла();
				ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
				
				КоличествоВыгруженныхОбъектов = ВыгрузитьДанныеВФайлXML(Узел, СтрокиГруппыДоступа, ПутьКФайлу, ИмяФайлаРазрешений, ОписаниеПравил, ЭлементовВыгружено);
				КоличествоВыгруженныхОбъектовСтрокой = ВернутьТолькоЧисла(Строка(КоличествоВыгруженныхОбъектов));
				// Впишем в имя файла данные о количестве выгруженных объектов после даты
				ИмяФайлаДляДропбокса = Лев(ИмяФайла, 19) + "_" + КоличествоВыгруженныхОбъектовСтрокой + Сред(ИмяФайла, 20);
				
				ДатаДляФайлов = ТекущаяДата();
				
				Если КоличествоВыгруженныхОбъектов > 0 Тогда
					
					Если Не ЗначениеЗаполнено(ИмяФайлаРазрешений)
						 И Не ЗначениеЗаполнено(ГруппаДоступа) Тогда //добавим признак общих данных
						ИмяФайлаДляДропбокса = Лев(ИмяФайлаДляДропбокса, СтрДлина(ИмяФайлаДляДропбокса) - 4)
												+ "_0"
												+ Прав(ИмяФайлаДляДропбокса, 4);
					КонецЕсли;
											
					ОтправитьФайлВОблако(Узел,
										ИмяФайлаДляДропбокса,
										ПутьКФайлу,
										ПараметрыАвторизации,
										ДатаДляФайлов);
																
				КонецЕсли;
			
				УдалитьФайлы(ПутьКФайлу);
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры


Процедура СформироватьФайлыВыгрузкиНовый(Узел) Экспорт 

	ЗарегистрироватьСозданныеСоответствия(Узел);
	
	// Проверяем есть ли новые данные к выгрузке
	Если ЕстьДанныеДляВыгрузки(Узел).ЕстьИзменения Тогда
		
		ОписаниеПравил = ПолучитьПравилаКонвертации();      

		ТаблицаИзменений = СформироватьТаблицуВыгрузки(Узел, ОписаниеПравил);
		
		СписокГруппДоступа = ТаблицаИзменений.Скопировать(, "ГруппаДоступа");
		СписокГруппДоступа.Свернуть("ГруппаДоступа");

		ГруппыДоступа = СписокГруппДоступа.ВыгрузитьКолонку("ГруппаДоступа");
		
		Для каждого ГруппаДоступа Из ГруппыДоступа Цикл
			СтрокиГруппыДоступа = ТаблицаИзменений.НайтиСтроки(Новый Структура("ГруппаДоступа", ГруппаДоступа));
			Разрешения = РазрешенияГруппы(ГруппаДоступа);

			ЭлементовВыгружено = 0;
			
			Если Разрешения.Количество() > 0 Тогда
				
				ИмяФайлаРазрешений = СгенерироватьИмяФайла(РасширениеФайлаРазрешений());
				
				ПутьКФайлуРазрешений = ПолучитьИмяВременногоФайла(РасширениеФайлаРазрешений());
				
				Если СформироватьФайлРазрешений(Разрешения, ПутьКФайлуРазрешений) Тогда 
					//ОтправитьФайлВОблако(Узел,
					//					ИмяФайлаРазрешений,
					//					ПутьКФайлуРазрешений,
					//					ПараметрыАвторизации,
					//					ТекущаяДата());
				КонецЕсли;
				
			Иначе 
				
				ИмяФайлаРазрешений = "";
				
			КонецЕсли; 
			
			Пока ЭлементовВыгружено < СтрокиГруппыДоступа.Количество() Цикл 
			
				// Определяем Имя файла синронизации
				ИмяФайла = СгенерироватьИмяФайла();
				ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
				
				КоличествоВыгруженныхОбъектов = ВыгрузитьДанныеВФайлXML(Узел, СтрокиГруппыДоступа, ПутьКФайлу, ИмяФайлаРазрешений, ОписаниеПравил, ЭлементовВыгружено);
				КоличествоВыгруженныхОбъектовСтрокой = ВернутьТолькоЧисла(Строка(КоличествоВыгруженныхОбъектов));
				// Впишем в имя файла данные о количестве выгруженных объектов после даты
				ИмяФайлаДляДропбокса = Лев(ИмяФайла, 19) + "_" + КоличествоВыгруженныхОбъектовСтрокой + Сред(ИмяФайла, 20);
				
				ДатаДляФайлов = ТекущаяДата();
				
				Если КоличествоВыгруженныхОбъектов > 0 Тогда
					
					Если Не ЗначениеЗаполнено(ИмяФайлаРазрешений)
						 И Не ЗначениеЗаполнено(ГруппаДоступа) Тогда //добавим признак общих данных
						ИмяФайлаДляДропбокса = Лев(ИмяФайлаДляДропбокса, СтрДлина(ИмяФайлаДляДропбокса) - 4)
												+ "_0"
												+ Прав(ИмяФайлаДляДропбокса, 4);
					КонецЕсли;
											
					//ОтправитьФайлВОблако(Узел,
					//					ИмяФайлаДляДропбокса,
					//					ПутьКФайлу,
					//					ПараметрыАвторизации,
					//					ДатаДляФайлов);
																
				КонецЕсли;
			
				УдалитьФайлы(ПутьКФайлу);
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры
#КонецОбласти 

#Область УровниДоступа
 
#КонецОбласти

// Добавляет запись в журнал.
//
// Параметры:
//  ОписаниеОшибки - ОписаниеОшибки - Описание ошибки.
// 
Процедура ДобавитьЗаписьВЖурнал(ОписаниеОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации("Синхронизация с iCRM",
							УровеньЖурналаРегистрации.Ошибка,
							,
							,
							ОписаниеОшибки);
	
КонецПроцедуры

// Возвращает расширение файла настроек.
// 
// Возвращаемое значение:
//  Строка - Расширение файла настроек.
//
Функция РасширениеФайлаНастроек() Экспорт 
	
	Возврат "sync"

КонецФункции

// Регистрирует изменений контрагента при записи.
//
// Параметры:
//  Источник - ЛюбойТип	 - Источник.
//  Отказ	 - Булево - Отказ.
//
Процедура CRM_РегистрацияИзмененийКонтрагентаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не АвтоматическаяСинхронизацияВключена() Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
		 И ЗначениеЗаполнено(Источник.Партнер)
		 И Не Источник.ОбменДанными.Загрузка Тогда
	
		ПланыОбмена.ЗарегистрироватьИзменения(ПолучитьУзелОбменаСинхронизации(), Источник.Партнер);
	
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает режим автоматической синхронизации.
//
// Параметры:
//  Включена - Булево - Включена.
//
Процедура УстановитьРежимАвтоматическойСинхронизации(Включена) Экспорт 

	РегламентноеЗадание = ПолучитьРегламентноеЗаданиеСинхонизации();
	
	РегламентноеЗадание.Использование = Включена;
	
	РегламентноеЗадание.Записать();

КонецПроцедуры // УстановитьРежимАвтоматическойСинхронизации()

// Проверяет автоматическую синхронизацию.
// 
// Возвращаемое значение:
//  Булево - Истина, если автоматическая синхронизация включена.
//
Функция АвтоматическаяСинхронизацияВключена() Экспорт 

	Возврат Константы.CRM_ИспользуетсяОбменСiCRM.Получить();

КонецФункции // СинхорнизацияАктивна()

// Получает значение из строки JSON.
//
// Параметры:
//  СтрокаJSON              - Строка - строка в формате JSON.
//  ПрочитатьВСоответствие		 - Булево - Прочитать в соответствие.
//  ПоляДаты					 - Массив - Имена свойств со значением типа Дата.
//  ИмяФункцииВосстановления	 - Строка - Имя функции восстановления.
//  МодульФункцииВосстановления	 - Строка - Модуль функции восстановления.
// 
// Возвращаемое значение:
//  ЛюбойТип - Значение.
//
Функция ЗначениеИзСтрокиJSON(СтрокаJSON,
							ПрочитатьВСоответствие = Ложь,
							ПоляДаты = Неопределено,
							ИмяФункцииВосстановления = Неопределено,
							МодульФункцииВосстановления = Неопределено) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Результат = ПрочитатьJSON(ЧтениеJSON,
							ПрочитатьВСоответствие,
							ПоляДаты,
							,
							ИмяФункцииВосстановления,
							МодульФункцииВосстановления);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;

КонецФункции // ЗначениеИзСтрокиXML()

// Помещает значение в строку JSON.
//
// Параметры:
//  Значение - ЛюбойТип - Значение.
// 
// Возвращаемое значение:
//  Строка - Строка JSON.
//
Функция ЗначениеВСтрокуJSON(Значение) Экспорт 

	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции // ЗначениеВСтрокуJSON()

// Добавляет файл в список загруженных изменений.
//
// Параметры:
//  Дата	 - Дата - Дата.
//  Узел	 - ПланыОбменаСсылка.CRM_СинхронизацияСМобильнымПриложением - Узел обмена.
//  ИмяФайла - Строка - Имя файла.
//
Процедура ДобавитьФайлВСписокЗагруженныхИзменений(Дата, Узел, ИмяФайла) Экспорт
	
	ДобавитьЗаписьВРегистрСообщенийОбмена(Дата,
										Перечисления.CRM_ВидыСообщенийОбмена.Исходящее,
										Узел,
										ИмяФайла,
										,
										Истина);
КонецПроцедуры

// Добавляет входящий файл в список загруженных.
//
// Параметры:
//  Дата	 - Дата - Дата.
//  Узел	 - ПланыОбменаСсылка.CRM_СинхронизацияСМобильнымПриложением - Узел обмена.
//  ИмяФайла - Строка - Имя файла.
//
Процедура ДобавитьВходящийФайлВСписокЗагруженных(Дата, Узел, ИмяФайла) Экспорт

	ДобавитьЗаписьВРегистрСообщенийОбмена(Дата,
										Перечисления.CRM_ВидыСообщенийОбмена.Входящее,
										Узел,
										ИмяФайла,
										,
										Истина);	

КонецПроцедуры

// Получает список файлов в папке dropbox.
//
// Параметры:
//  ИмяПапки			 - Строка - Имя папки.
//  ИскатьВПодкаталогах	 - Булево - Искать в подкаталогах.
//  ПараметрыАвторизации - Структура - Параметры авторизации.
//  ОписаниеОшибки		 - ОписаниеОшибки - Описание ошибки.
// 
// Возвращаемое значение:
//  СписокЗначений - Список файлов.
//
Функция ПолучитьСписокФайловВПапкеDropbox(ИмяПапки, ИскатьВПодкаталогах = Ложь, ПараметрыАвторизации = Неопределено, ОписаниеОшибки = Неопределено) Экспорт	
	
	Результат = Неопределено;
	
	СписокФайлов = CRM_DropboxСервер.ПолучитьСписокФайлов(ИмяПапки, ИскатьВПодкаталогах, , , ПараметрыАвторизации, ОписаниеОшибки);
	
	Пока Истина Цикл				
		
		Если ТипЗнч(СписокФайлов) = Тип("Соответствие") Тогда

			ЗаписиФайлов = СписокФайлов.Получить("entries");
			Если ЗаписиФайлов = Неопределено Тогда
				Прервать;
			КонецЕсли; 

			
			Если Результат = Неопределено Тогда
			
				Результат = Новый Структура;
				Результат.Вставить("entries", Новый Массив);
			
			КонецЕсли;
			
			Для каждого ОписаниеФайла Из ЗаписиФайлов Цикл
			
				Результат["entries"].Добавить(ОписаниеФайла);
			
			КонецЦикла; 
			
			ПолучитьЕще = СписокФайлов.Получить("has_more");

			Если ПолучитьЕще = Истина Тогда

				СписокФайлов = CRM_DropboxСервер.ПолучитьСписокФайловПродолжить(СписокФайлов["cursor"], ПараметрыАвторизации, ОписаниеОшибки);
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
		
		Иначе
			
			Прервать;
		
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ПолучитьСписокФайловВПапкеDropbox() 
 
#КонецОбласти 
									
#Область СлужебныеПроцедурыИФункции

#Область Выгрузка

Функция СформироватьУровеньИерархииСправочника(ОбъектМетаданных)

	Результат = "0";
	
	Если ОбъектМетаданных.Иерархический
		 И ОбъектМетаданных.КоличествоУровней > 0 Тогда
		 
		Результат = "";
		
		ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
		
		Если ОбъектМетаданных.ОграничиватьКоличествоУровней Тогда
		
			КоличествоУровней = ОбъектМетаданных.КоличествоУровней;
		
		Иначе
		
			КоличествоУровней = 10;
		
		КонецЕсли; 
		
		Для Уровень = 1 По КоличествоУровней Цикл
		
			Результат = УсловиеРодителяСправочника(ОбъектМетаданных.Имя, "Ссылка", Уровень)
						+ "
						|"
						+ Результат;
		
		КонецЦикла; 
		
		Результат = СтрШаблон("ВЫБОР
								|%1
								|ИНАЧЕ
								|	0
								|КОНЕЦ", Результат);
	
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // СформироватьУровеньИерархииСправочника()

Функция УсловиеРодителяСправочника(ИмяТаблицы, ИмяПоля, Уровень)

	СсылкиПоУровню = "";
	
	Для Сч = 1 По Уровень Цикл
		
		Если ЗначениеЗаполнено(СсылкиПоУровню) Тогда
		
			СсылкиПоУровню = СсылкиПоУровню + ".";
		
		КонецЕсли; 
		
		СсылкиПоУровню = СсылкиПоУровню + "Родитель";
	
	КонецЦикла; 
	
	Возврат СтрШаблон("КОГДА %1.%2.%3 ЕСТЬ НЕ NULL ТОГДА %4",
					ИмяТаблицы,
					ИмяПоля,
					СсылкиПоУровню,
					Формат(Уровень, "ЧДЦ=; ЧН=0; ЧГ=0"));

КонецФункции // ()

Процедура ВыгрузитьДанныеВОблако(Узел, ПараметрыАвторизации = Неопределено, ВыгрузитьПоследний = Ложь)
	
	мФайлы = ПолучитьНеВыгруженныеФайлыСинхронизации(Узел, ВыгрузитьПоследний);
	
	Для Каждого СтрокаИсходящегоСообщения Из мФайлы Цикл
		
		ИмяФайла = СтрокаИсходящегоСообщения.ИмяФайла;
		
		ПолноеИмяФайла = ПолучитьИмяВременногоФайла();
		
		СтрокаИсходящегоСообщения.ДанныеФайла.Получить().Записать(ПолноеИмяФайла);
		
		Если Не ОтправитьФайлВОблако(Узел, 
									ИмяФайла,
									ПолноеИмяФайла,
									ПараметрыАвторизации,
									СтрокаИсходящегоСообщения.Дата,
									Ложь) Тогда
		
			Прервать;
		
		КонецЕсли;  
		
	КонецЦикла;
				
КонецПроцедуры
 
// Имя файла состоит из версии ОС, Версии приложения ... 
// ... идентификатора клиента и даты создания
Функция СгенерироватьИмяФайла(Расширение = "xml") Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	ИмяФайла = Формат(ТекущаяДата(), "ДФ = 'дд-ММ-гггг""T""ЧЧ-мм-сс'") + "_";
	#Если МобильноеПриложениеКлиент ИЛИ МобильноеПриложениеСервер Тогда
	ИмяФайла = ИмяФайла + СисИнфо.ВерсияОС + "_";
	#Иначе
	// Для ПК в имя файла добавляем тип платформы, т.к. версия ОС содержит много ненужной информации.
	ИмяФайла = ИмяФайла + СисИнфо.ТипПлатформы + "_";
	#КонецЕсли
	ИмяФайла = ИмяФайла + СисИнфо.ВерсияПриложения + "_";
	ИмяФайла = ИмяФайла + Строка(Новый УникальныйИдентификатор) + "." + Расширение;
	Возврат ИмяФайла;
	
КонецФункции

Функция СформироватьТаблицуВыгрузки(Узел, ОписаниеПравил) Экспорт

	Запрос = Новый Запрос;

 	Запрос.Текст = СформироватьТекстЗапросаПоИзмененнымОбъектамСинхронизации();

	Запрос.УстановитьПараметр("Узел", Узел); 
	
	Попытка
	
		ТаблицаИзменений = Запрос.Выполнить().Выгрузить();	
	
	Исключение
		
		ДобавитьЗаписьВЖурнал(ОписаниеОшибки());
	
	КонецПопытки; 
	
	ЗаполнитьИзмененияРегистров(ТаблицаИзменений, Узел);
	
	ДополнительныеДанные = ПолучитьДополнительныеДанные(ТаблицаИзменений, ОписаниеПравил);
	
	Для каждого СтрокаДополнительныхДанных Из ДополнительныеДанные Цикл
	
		ЗаполнитьЗначенияСвойств(ТаблицаИзменений.Добавить(), СтрокаДополнительныхДанных);
	
	КонецЦикла; 
	
	ТаблицаИзменений.Сортировать("ГруппаДоступа, ЗарегистрированноеИзменение, Приоритет, ТипМетаданных, ИмяМетаданных, УровеньИерархии");
	
	Возврат ТаблицаИзменений;
	
КонецФункции // СформироватьТаблицуВыгрузки()

Функция ДобавитьДатыИзмененийВТаблицу(ТаблицаИзменений)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзменений.ДатаИзменения,
	|	ТаблицаИзменений.ЗарегистрированноеИзменение,
	|	ТаблицаИзменений.Значение,
	|	ТаблицаИзменений.ИмяМетаданных,
	|	ТаблицаИзменений.ПолноеИмяМетаданных,
	|	ТаблицаИзменений.Приоритет,
	|	ТаблицаИзменений.ТипМетаданных,
	|	ТаблицаИзменений.УровеньИерархии
	|ПОМЕСТИТЬ ВТ_ТаблицаИзменений
	|ИЗ
	|	&ТаблицаИзменений КАК ТаблицаИзменений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗарегистрированноеИзменение,
	|	Приоритет,
	|	ТипМетаданных
	|;
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДатыИзменения.ДатаИзменения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаИзменения,
	|	ТаблицаИзменений.*
	|ИЗ
	|	ВТ_ТаблицаИзменений КАК ТаблицаИзменений
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДатыИзмененийОбъектов КАК ДатыИзменения
	|		ПО ДатыИзменения.Объект = ТаблицаИзменений.Значение";
	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ДобавитьДатыИзмененийВТаблицу()
 
Процедура ЗаполнитьИзмененияРегистров(ТаблицаИзменений, Узел)
	
	МассивРегистров = ТаблицаИзменений.НайтиСтроки(Новый Структура("ТипМетаданных", 3));
	
	// расширим тип значений для добавления наборов записей регистров
	Значения = ТаблицаИзменений.ВыгрузитьКолонку("ЗначениеИзменений");
	ТаблицаИзменений.Колонки.Удалить(ТаблицаИзменений.Колонки.ЗначениеИзменений);
	
	ТаблицаИзменений.Колонки.Добавить("Значение");
	ТаблицаИзменений.ЗагрузитьКолонку(Значения, "Значение");
	
	Для каждого СтрокаРегистра Из МассивРегистров Цикл
	
		МетаданныеЗначения = Метаданные.НайтиПоПолномуИмени(СтрокаРегистра.ПолноеИмяМетаданных);
		ИзмененияРегистраСведений = ПланыОбмена.ВыбратьИзменения(Узел, 1, МетаданныеЗначения);
		
		ЭтоПодчиненныйРегистр = МетаданныеЗначения.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
		
		Пока ИзмененияРегистраСведений.Следующий() Цикл // Изменения регистра сведений
			
			НаборЗаписей = ИзмененияРегистраСведений.Получить();
			
			Если ЭтоПодчиненныйРегистр Тогда
				
				Для каждого СтрокаНабора Из НаборЗаписей Цикл
				
					НаборЗаписейКВыгрузке = СоздатьНаборЗаписейПоСтроке(МетаданныеЗначения, СтрокаНабора);
					
					ДобавитьНаборЗаписейВТаблицуИзменений(СтрокаРегистра,
														НаборЗаписейКВыгрузке,
														МетаданныеЗначения,
														ТаблицаИзменений,
														Ложь);
				
				КонецЦикла;
													
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);									
			
			Иначе 
				
				ДобавитьНаборЗаписейВТаблицуИзменений(СтрокаРегистра,
														НаборЗаписей,
														МетаданныеЗначения,
														ТаблицаИзменений);
			
			КонецЕсли; 
				
		КонецЦикла; // Изменения регистра сведений
		
		ТаблицаИзменений.Удалить(СтрокаРегистра);
	
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьДополнительныеДанные(ТаблицаИзменений, ОписаниеПравил)

	// Дополнительные данные сортируем следующим образом:
	// Объекты содержащиеся в реквизитах выгружаемых данных должны размещаться в первых строкахтаблицы изменений
	// Для корректной загрузки
	// Дополнительные данные заполняем рекурсивно
	// В дополнительные данные попадают объекты не участвующие в обмене, но содержащиеся в объектах обмена.
	
	ТаблицаДополнительныхДанных = ТаблицаИзменений.СкопироватьКолонки();
	
	ТаблицаДополнительныхДанных.Колонки.Удалить(ТаблицаДополнительныхДанных.Колонки.Значение); // Сбросим тип колонки
	ТаблицаДополнительныхДанных.Колонки.Добавить("Значение");
	
	ДобавляемыеТипы = Новый Массив;
	
	Для каждого СтрокаИзменений Из ТаблицаИзменений Цикл
	
		Если СтрокаИзменений.ТипМетаданных = 3 Тогда 
			
			ДобавитьДанныеНабораЗаписей(ТаблицаДополнительныхДанных, СтрокаИзменений.Значение, ДобавляемыеТипы, ОписаниеПравил);
			
		ИначеЕсли ЭтоОбъектныйТип(ТипЗнч(СтрокаИзменений.Значение)) Тогда
			
			ДобавитьДанныеОбъекта(ТаблицаДополнительныхДанных, СтрокаИзменений.Значение, ДобавляемыеТипы, ОписаниеПравил);
		
		КонецЕсли; 
	
	КонецЦикла;
	
	ТипИзменений = Новый ОписаниеТипов(ДобавляемыеТипы);
	
	МассивЗначений = ТаблицаДополнительныхДанных.ВыгрузитьКолонку("Значение");
	ТаблицаДополнительныхДанных.Колонки.Удалить(ТаблицаДополнительныхДанных.Колонки.Значение);
	ТаблицаДополнительныхДанных.Колонки.Добавить("Значение", ТипИзменений);
	
	ТаблицаДополнительныхДанных.ЗагрузитьКолонку(МассивЗначений, "Значение");
	
	Если ТаблицаДополнительныхДанных.Количество() > 0 Тогда
	
		ТаблицаДополнительныхДанных = ДобавитьДатыИзмененийВТаблицу(ТаблицаДополнительныхДанных);
	
	КонецЕсли; 
	
	Возврат ТаблицаДополнительныхДанных;

КонецФункции 

Процедура ДобавитьДанныеНабораЗаписей(ТалицаИзменений, НаборЗаписей, МассивДобавляемыхТипов, ОписаниеПравил)

	МетаданныеОбъекта = НаборЗаписей.Метаданные();
	
	Для каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
	
		ДобавитьДанныеРеквизитов(ТалицаИзменений, МетаданныеОбъекта.СтандартныеРеквизиты, СтрокаНабораЗаписей, МассивДобавляемыхТипов, ОписаниеПравил);
		ДобавитьДанныеРеквизитов(ТалицаИзменений, МетаданныеОбъекта.Измерения, СтрокаНабораЗаписей, МассивДобавляемыхТипов, ОписаниеПравил);
		ДобавитьДанныеРеквизитов(ТалицаИзменений, МетаданныеОбъекта.Ресурсы, СтрокаНабораЗаписей, МассивДобавляемыхТипов, ОписаниеПравил);
		ДобавитьДанныеРеквизитов(ТалицаИзменений, МетаданныеОбъекта.Реквизиты, СтрокаНабораЗаписей, МассивДобавляемыхТипов, ОписаниеПравил);
	
	КонецЦикла; 

КонецПроцедуры

Процедура ДобавитьДанныеОбъекта(ТалицаИзменений, Объект, МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности = 0)

	МетаданныеОбъекта = Объект.Метаданные();
	
	ДобавитьДанныеРеквизитов(ТалицаИзменений, МетаданныеОбъекта.СтандартныеРеквизиты, Объект, МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности);
	ДобавитьДанныеРеквизитов(ТалицаИзменений, МетаданныеОбъекта.Реквизиты, Объект, МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности);
	
	Если Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
	
		ДобавитьДанныеРеквизитов(ТалицаИзменений, МетаданныеОбъекта.РеквизитыАдресации, Объект, МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности);
	
	КонецЕсли; 
	
	ДобавитьДанныеТабличныхЧастей(ТалицаИзменений, МетаданныеОбъекта.ТабличныеЧасти, Объект, МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности);

КонецПроцедуры

Процедура ДобавитьДанныеТабличныхЧастей(ТаблицаИзменений, КоллекцияТабличныхЧастей, Объект, МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности = 0)

	Для каждого ТабличнаяЧасть Из КоллекцияТабличныхЧастей Цикл
	
		ТабличнаяЧастьОбъекта = Объект[ТабличнаяЧасть.Имя];
		
		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьОбъекта Цикл
		
			ДобавитьДанныеРеквизитов(ТаблицаИзменений, ТабличнаяЧасть.Реквизиты, СтрокаТабличнойЧасти,  МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности);
		
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры
 
Процедура ДобавитьДанныеРеквизитов(ТаблицаИзменений, КоллекцияРеквизитов, Объект, МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности = 0)

	Для каждого Реквизит Из КоллекцияРеквизитов Цикл
		
		ЗначениеРеквизита = Объект[Реквизит.Имя];
		
		ТипЗначения = ТипЗнч(ЗначениеРеквизита);
		
		Если УровеньВложенности <= МаксимальныйУровеньВложенности()
			 И ЗначениеРеквизита <> Объект // Исключаем зацикленность для реквизитов ссылающихся сами на себя
			 И ЗначениеЗаполнено(ЗначениеРеквизита)
			 И ЭтоОбъектныйТип(ТипЗначения)
			 И Не БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗначения)
			 И Не ОбъектПодлежитСинхронизации(ЗначениеРеквизита) Тогда 
			 
			СтрокаОбъекта = ТаблицаИзменений.Найти(ЗначениеРеквизита, "Значение");
			
			ОбъектМетаданных = ЗначениеРеквизита.Метаданные();
			
			ПравилоОбъекта = ПолучитьСтрокуПравилКонвертации(ОписаниеПравил.ПравилаКонвертации, ОбъектМетаданных.ПолноеИмя());
			
			Если ПравилоОбъекта = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			Если СтрокаОбъекта = Неопределено Тогда // Объект раннее не встречался добавляем в начало и осматриваем его содержимое
				
				Если УровеньВложенности = 0 Тогда
				
					СтрокаОбъекта  = ТаблицаИзменений.Добавить();
					
				Иначе 
					
					СтрокаОбъекта  = ТаблицаИзменений.Вставить(ТаблицаИзменений.Количество() - УровеньВложенности);
				
				КонецЕсли; 
				
				СтрокаОбъекта.ГруппаДоступа = ПолучитьГруппуДоступаОбъекта(ЗначениеРеквизита, ОбъектМетаданных);
				СтрокаОбъекта.Значение = ЗначениеРеквизита;
				СтрокаОбъекта.ТипМетаданных = ТипОбъектаМетаданных(ОбъектМетаданных);
				СтрокаОбъекта.ИмяМетаданных = ОбъектМетаданных.Имя;
				СтрокаОбъекта.ЗарегистрированноеИзменение = Ложь;
				СтрокаОбъекта.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
				
				ДобавитьДанныеОбъекта(ТаблицаИзменений, ЗначениеРеквизита, МассивДобавляемыхТипов, ОписаниеПравил, УровеньВложенности + 1);
				
				СтрокаОбъекта.Приоритет = ТаблицаИзменений.Количество() - УровеньВложенности;
			
			КонецЕсли;
			
			ТипЗначения = ТипЗнч(ЗначениеРеквизита);
			
			Если МассивДобавляемыхТипов.Найти(ТипЗначения) = Неопределено Тогда
			
				МассивДобавляемыхТипов.Добавить(ТипЗначения);
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

Функция ТипОбъектаМетаданных(ОбъектМетаданных)

	Тип = 0;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		 Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
	
		Тип = 1;
		
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных)
		 	Или Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		
		Тип = 2;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		
		Тип = 3;
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		
		Тип = 4;
			
	КонецЕсли;
	
	Возврат Тип;

КонецФункции // ТипОбъектаМетаданных()
 
Функция МаксимальныйУровеньВложенности()

	Возврат 10;	

КонецФункции // МаксимальныйУровеньВложенности()

Процедура ЗаписатьНеВыгруженныйФайлСинхронизацииВРегистр(Узел, ИмяФайла, ДанныеФайла)
	
	ДобавитьЗаписьВРегистрСообщенийОбмена(ТекущаяДата(),
											Перечисления.CRM_ВидыСообщенийОбмена.Исходящее,
											Узел,
											ИмяФайла,
											ДанныеФайла);

КонецПроцедуры

// Если есть хотя бы один элемент к выгрузки, тогда возвращается Истина
Функция ЕстьДанныеДляВыгрузки(Узел) Экспорт
	
	СтруктураВозврата = Новый Структура;
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, 1);  
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Вставить("ЕстьИзменения", Истина);
	Иначе	
		СтруктураВозврата.Вставить("ЕстьИзменения", Ложь);
	КонецЕсли;
	Выборка.Сбросить();
	СтруктураВозврата.Вставить("Изменения", Выборка);
	Возврат СтруктураВозврата;
	
КонецФункции

// Выгружает данные синхронизации в файл
// выгружаются только измененные объекты
// Параметры:
// Узел - ПланОбменаСсылка - ссылка на узел Dropbox для синхронизации
// ИмяФайла - Строка - Название файла выгрузки
// Возвращаемое значение:
// Массив - Выгруженные данные в файл
Функция ВыгрузитьДанныеВФайлXML(Узел, ТаблицаВыгрузки, ИмяФайла, ИмяФайлаРазрешений, ОписаниеПравил, Индекс = 0)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Synchronization");
	
	Если ЗначениеЗаполнено(ИмяФайлаРазрешений) Тогда
	
		ЗаписьXML.ЗаписатьАтрибут("accessfile", ИмяФайлаРазрешений);
	
	КонецЕсли;
	
	ЗаписатьРежим(ЗаписьXML);
	
	ДобавитьСоответствияТипов(ОписаниеПравил, Ложь);
	
	ВыгруженоОбъектов = 0;
	// Перебор по зарегистрированным изменениям программы
	
	КоличествоЭлементов = Мин(Индекс + 1000, ТаблицаВыгрузки.Количество());

	Пока Индекс < КоличествоЭлементов Цикл
		
		Строка = ТаблицаВыгрузки[Индекс];
		ЭтоУдалениеОбъекта = Ложь;
		ЗначениеДляОтменыИзменений = Строка.Значение;
		
		// Получаем выборку переноса
		Если Строка.ТипМетаданных = 4 Тогда // Константы
			
			Константа = Константы[Строка.ИмяМетаданных].СоздатьМенеджерЗначения();
			Константа.Значение = Строка.Значение;
			ЗаписатьXMLОбъект(Константа, ЗаписьXML, Строка.ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
			
			ЗначениеДляОтменыИзменений = Константа.Метаданные();
			
			Константа = Неопределено;
			
		ИначеЕсли Строка.ТипМетаданных = 2 Тогда // Документы
			ДокументОбъект = Строка.Значение.ПолучитьОбъект();
			ОтправлятьДокумент = Истина;
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") или ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") или ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				Если НЕ ДокументОбъект.УчетнаяЗапись.CRM_ВыгружатьВiCRM Тогда
					ОтправлятьДокумент = Ложь;
				КонецЕсли;	
			КонецЕсли;
			Если ДокументОбъект <> Неопределено И ОтправлятьДокумент Тогда // Для удаленных объектов обработка ниже
				ЗаписатьXMLОбъект(ДокументОбъект, ЗаписьXML, Строка.ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
			Иначе 
				ЭтоУдалениеОбъекта = Истина;
			КонецЕсли; 
				
		ИначеЕсли Строка.ТипМетаданных = 1 Тогда // Справочники
			
			// Если справочник иерархический, то необходимо вначале выгружать группы
			// , а затем элементы, так как при загрузке будут чиститься реквизиты
			// "Родитель" для тех элементов, у которых родитель как объект не будет найден
			// а именно для предопределенных родителей, так как они временно не переносятся.
			СправочникОбъект = Строка.Значение.ПолучитьОбъект();
			Если СправочникОбъект <> Неопределено Тогда // Для удаленных объектов обработка ниже
				ЗаписатьXMLОбъект(СправочникОбъект, ЗаписьXML, Строка.ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
			Иначе 
				ЭтоУдалениеОбъекта = Истина;
			КонецЕсли; 		
		
			
		ИначеЕсли Строка.ТипМетаданных = 3 Тогда // Регистры сведений
			
			ЗаписатьXMLОбъект(Строка.Значение, ЗаписьXML, Строка.ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
			
		КонецЕсли;

		Если ЭтоУдалениеОбъекта Тогда
			ЗаписатьXMLОбъект(Новый УдалениеОбъекта(Строка.Значение), ЗаписьXML, Строка.ДатаИзменения, ОписаниеПравил, ВыгруженоОбъектов);
		КонецЕсли; 

		Если Строка.ЗарегистрированноеИзменение Тогда
		
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЗначениеДляОтменыИзменений);
		
		КонецЕсли;
		
		Если Строка.ЭтоОтправкаСоответствия = Истина Тогда
		
			УстановитьФлагОтправкиСоответствия(Узел, Строка.Значение, Истина);
		
		КонецЕсли;

		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
	Возврат ВыгруженоОбъектов;
	
КонецФункции

Функция РазрешенияГруппы(ГруппаДоступа) Экспорт

	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
		 Или ТипЗнч(ГруппаДоступа) <> Тип("СправочникСсылка.Партнеры") Тогда
		
		Результат = Новый Массив;
		
	Иначе 
		
		Результат = ГруппаДоступа.CRM_УровниДоступа.ВыгрузитьКолонку("УровеньДоступа");
	
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // РазрешенияГруппы()
 
Функция ОтправитьФайлВОблако(Узел, ИмяФайла, ПутьКФайлу, ПараметрыАвторизации, Дата, ЗаписыватьНеудачи = Истина)

	Результат = Ложь;
	
	Если CRM_DropboxСервер.ЗагрузитьФайл("/Sync/" + ИмяФайла, ПутьКФайлу, ПараметрыАвторизации) = Неопределено Тогда
		
		Если ЗаписыватьНеудачи Тогда
		
			ЗаписатьНеВыгруженныйФайлСинхронизацииВРегистр(Узел, ИмяФайла, Новый ДвоичныеДанные(ПутьКФайлу));				
		
		КонецЕсли; 
		
	Иначе
		
		CRM_СинхронизацияСервер.ДобавитьФайлВСписокЗагруженныхИзменений(Дата,
																		Узел,
																		ИмяФайла);
		
		Результат = Истина;
		
	КонецЕсли;
	
	УдалитьФайлы(ПутьКФайлу);
	
	Возврат Результат;

КонецФункции

Функция СоздатьНаборЗаписейПоСтроке(ОбъектМетаданных, Строка)

	НаборЗаписей = НовыйОбъект(ОбъектМетаданных);
	
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
	
	Возврат НаборЗаписей;

КонецФункции
 
Процедура ДобавитьНаборЗаписейВТаблицуИзменений(СтрокаРегистра,
												НаборЗаписей,
												МетаданныеЗначения,
												ТаблицаИзменений,
												ЗарегистрированноеИзменение = Неопределено)

	ГруппаДоступа = ПолучитьГруппуДоступаОбъекта(НаборЗаписей, МетаданныеЗначения);
	
	СтрокаСНабором = ТаблицаИзменений.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаСНабором, СтрокаРегистра,, "Значение");
	
	Если ЗарегистрированноеИзменение <> Неопределено Тогда
	
		СтрокаСНабором.ЗарегистрированноеИзменение = ЗарегистрированноеИзменение;
	
	КонецЕсли; 
	
	СтрокаСНабором.ГруппаДоступа = ГруппаДоступа;
	СтрокаСНабором.Значение = НаборЗаписей;	

КонецПроцедуры
  
#КонецОбласти 

#Область Загрузка
 
Функция ПолучитьПустоеЗначение(ТипЗначения)

	Массив = Новый Массив;
	Массив.Добавить(ТипЗначения);
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	
	Возврат ОписаниеТипов.ПривестиЗначение();

КонецФункции // ПолучитьПустоеЗначение()
 
Функция ЭтоУзелСтрокиТаблицы(ИмяУзла)
	
	Возврат ИмяУзла = "Row"
			Или ИмяУзла = "Record";

КонецФункции // ЭтоТэгСтрокиТаблицы()
 
Функция ПолучитьТипЗначенияИзТаблицыРеквизитов(ТаблицаРеквизитов, ИмяРеквизита, ИмяТабличнойЧасти = "")
	
	Строки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита, ИмяТабличнойЧасти", ИмяРеквизита, ИмяТабличнойЧасти));
	
	ТипРеквизита = Неопределено;
	
	Для каждого Строка Из Строки Цикл
	
		ОписаниеТипов = Строка.ТипРеквизита;
		ТипРеквизита = ОписаниеТипов.Типы()[0];
	
	КонецЦикла;
	
	Возврат ТипРеквизита;

КонецФункции // ПолучитьТипЗначенияИзТаблицыРеквизитов()
 
Функция ПолучитьТипЗначения(Знач ТипСтрокой)

	Тип = Неопределено;
	
	ВхождениеДРазделителя = СтрНайти(ТипСтрокой, ":");
	
	Если ВхождениеДРазделителя <> 0 Тогда
			
		ТипСтрокой = Прав(ТипСтрокой, СтрДлина(ТипСтрокой) - ВхождениеДРазделителя);
	
	КонецЕсли; 
	
	Попытка
		
		Если ТипСтрокой = "decimal"
			 Или ТипСтрокой = "double"
			 Или ТипСтрокой = "float" Тогда
		
			ТипСтрокой = "number";
			
		ИначеЕсли ТипСтрокой = "dateTime" Тогда
			
			ТипСтрокой = "date";
		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТипСтрокой) Тогда
		
   			Тип = Тип(ТипСтрокой);
		
		КонецЕсли; 
	
	Исключение
		
		// Тип не определен
	
	КонецПопытки; 
	
	Возврат Тип;

КонецФункции // ПолучитьТипЗначения()

Процедура ДобавитьРеквизитыТабличнойЧастиВТаблицу(ТаблицаРеквизитов, ОписаниеТабличнойЧасти)

	ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов,
										ОписаниеТабличнойЧасти.Реквизиты,
										"ТабличнаяЧасть",
										ОписаниеТабличнойЧасти.Имя);

КонецПроцедуры
 
Процедура ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов, КоллекцияРеквизитов, ВидПоля, ИмяТабличнойЧасти = "")
	
	Для каждого Реквизит Из КоллекцияРеквизитов Цикл
	
		ДобавитьОписаниеРеквизитаВТаблицу(ТаблицаРеквизитов, Реквизит, ВидПоля, ИмяТабличнойЧасти);
	
	КонецЦикла; 

КонецПроцедуры
 
Процедура ДобавитьОписаниеРеквизитаВТаблицу(ТаблицаРеквизитов, ОписаниеРеквизита, ВидПоля, ИмяТабличнойЧасти = "")
	
	СтрокаТаблицыРеквизитов = ТаблицаРеквизитов.Добавить();
	СтрокаТаблицыРеквизитов.ВидПоля = ВидПоля;
	СтрокаТаблицыРеквизитов.ИмяРеквизита = ?(ВидПоля = "СтандартныйРеквизит",
											ПолучитьИмяСтандартногоРеквизита(ОписаниеРеквизита.Имя),
											ОписаниеРеквизита.Имя);
	СтрокаТаблицыРеквизитов.ТипРеквизита = ОписаниеРеквизита.Тип;
	СтрокаТаблицыРеквизитов.ИмяТабличнойЧасти = ИмяТабличнойЧасти;

КонецПроцедуры
 
Функция ТаблицаРеквизитовОбъекта()

	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("ВидПоля");
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
	ТаблицаРеквизитов.Колонки.Добавить("ТипРеквизита");
	ТаблицаРеквизитов.Колонки.Добавить("ИмяТабличнойЧасти");
	
	Возврат ТаблицаРеквизитов;

КонецФункции // ТаблицаРеквизитовОбъекта()
   
Функция СоответствиеСсылокИзТаблицы(ТаблицаСоответствий)

	Соответствие = Новый Соответствие;
	
	Для каждого СтрокаСоответствия Из ТаблицаСоответствий Цикл
		
		Если СтрокаСоответствия.СсылкаИсточника = СтрокаСоответствия.СсылкаПриемника Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		Соответствие.Вставить(СтрокаСоответствия.СсылкаИсточника, СтрокаСоответствия.СсылкаПриемника);
	
	КонецЦикла; 
	
	Возврат Соответствие;

КонецФункции // СоответствиеСсылокИзТаблицы()

Функция ЗаписатьКонстанту(Узел, ОбъектМетаданных, СодержимоеОбъекта, ТаблицаСоответствий)

	Значение = Неопределено;
		
	Если СодержимоеОбъекта.Свойство("Value", Значение) Тогда
	
		Объект = НовыйОбъект(ОбъектМетаданных);
		
		Объект.ОбменДанными.Загрузка = Истина;
		
		Если ОбъектПодлежитСинхронизации(Объект) Тогда
	
			Объект.ОбменДанными.Отправитель = Узел;
	
		КонецЕсли;
		
		Объект.Значение = ОбработатьЗначениеПередПомещением(Значение, ТаблицаСоответствий);
		
		Объект.Записать();
		
		Возврат Объект;
		
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции // ЗаписатьКонстанту()

Функция СтандартныеРеквизитыНабораЗаполнены(НаборЗаписей, ОбъектМетаданных)

	Результат = Истина;
	
	Для каждого Запись Из НаборЗаписей Цикл
	
		Если Не РеквизитыСтрокиЗаполнены(Запись, ОбъектМетаданных.СтандартныеРеквизиты) Тогда
		
			Результат = Ложь;
			Прервать;
		
		КонецЕсли;  
	
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // СтандартныеРеквизитыНабораЗаполненыЗаполнены()

Функция РеквизитыСтрокиЗаполнены(Строка, Реквизиты)

	Результат = Истина;
	
	Для каждого Реквизит Из Реквизиты Цикл
	
		Если Не ЗначениеЗаполнено(Строка[Реквизит.Имя]) Тогда
		
			Результат = Ложь;
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // РеквизитыСтрокиЗаполнены()
  
Функция ПолучитьОбъект(Узел,
						СсылкаИсточника,
						СодержимоеОбъекта,
						ОбъектМетаданных,
						ДанныеСоответствий,
						ИмяПредопределенныхДанных = "",
						ЭтоГруппа = Ложь,
						ОбъектСоздан)

	Объект = Неопределено;
	
	РегистрироватьНаОтправку = Ложь;
	
	ОбъектПолучен = Ложь;
	                                                         
	Для каждого Этап Из ЭтапыПоискаОбъекта(ОбъектМетаданных) Цикл
	
		Если Этап = "ИПД"
			 И ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда
		
			Ссылка = ПолучитьСсылкуПредопределенного(ОбъектМетаданных, ИмяПредопределенныхДанных);
			
			Если ЗначениеЗаполнено(Ссылка)
				И СсылкаИсточника <> Ссылка Тогда
					
				РегистрироватьНаОтправку = Истина;
		
				ДобавитьЗаписьСоответствияВРегистр(Узел,
												  СсылкаИсточника,
												  Ссылка);
											  
				ДобавитьСсылкуВТаблицуСоответствий(ДанныеСоответствий.ТаблицаСоответствий, СсылкаИсточника, Ссылка);
			
			КонецЕсли;  
			
		ИначеЕсли Этап = "СООТВЕТСТВИЕ" Тогда 
			
			Ссылка = ПолучитьСсылкуПриемника(СсылкаИсточника, ДанныеСоответствий.ТаблицаСоответствий);
						
		ИначеЕсли Этап = "ССЫЛКА" Тогда
			
			Ссылка = СсылкаИсточника;
			
		ИначеЕсли Этап = "ПОИСК" Тогда
			
			Ссылка = НайтиСсылкуПоКлючевымПолям(ОбъектМетаданных, СодержимоеОбъекта, ДанныеСоответствий.ТаблицаСоответствий);
			
			Если ЗначениеЗаполнено(Ссылка) 
				 И Ссылка <> СсылкаИсточника Тогда
				
				РегистрироватьНаОтправку = Истина;
		
				ДобавитьЗаписьСоответствияВРегистр(Узел,
												  СсылкаИсточника,
												  Ссылка);
											  
				ДобавитьСсылкуВТаблицуСоответствий(ДанныеСоответствий.ТаблицаСоответствий, СсылкаИсточника, Ссылка);
			
			КонецЕсли; 
			
		Иначе 
			
			Продолжить;
			
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект <> Неопределено Тогда
			
			ОбъектПолучен = Истина;
			Прервать;
			
		Иначе 
			
			Ссылка = Неопределено;
			
		КонецЕсли;

	КонецЦикла; 
	
	Если Не ОбъектПолучен Тогда
	
		Объект = НовыйОбъект(ОбъектМетаданных, СсылкаИсточника, ЭтоГруппа);
		
		ОбъектСоздан = Истина;
	
	КонецЕсли; 
	
	Если РегистрироватьНаОтправку Тогда 
			  
		СоздатьЗаписьОтправкиСоответствия(Узел, Объект.Ссылка);
			  
	ИначеЕсли ОбъектПодлежитСинхронизации(Объект) Тогда
	
		Объект.ОбменДанными.Отправитель = Узел;
	
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	
	Возврат Объект;

КонецФункции // ПолучитьОбъекта()

Функция ПолучитьСсылкуПоКлючевымПолям(ПолноеИмяТаблицы, СтруктураКлючевыхПолей) 

	ТекстУсловия = "";
	
	Запрос = Новый Запрос;
	
	Для каждого КлючИЗначение Из СтруктураКлючевыхПолей Цикл
	
		Если ЗначениеЗаполнено(ТекстУсловия) Тогда
		
			ТекстУсловия = ТекстУсловия + "
							|	И ";
		
		КонецЕсли; 
		
		ТекстУсловия = ТекстУсловия + СтрШаблон("Таблица.%1 = &%1", КлючИЗначение.Ключ);
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	
	КонецЦикла; 
	
	Если СтруктураКлючевыхПолей.Количество() = 0 Тогда
	
		ТекстУсловия = "Ложь";
	
	КонецЕсли;
	
	ТекстУсловия = "ГДЕ
				|	" + ТекстУсловия;
	
	Запрос.Текст =
	СтрШаблон("ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	%1 КАК Таблица
	|%2", ПолноеИмяТаблицы, ТекстУсловия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);

КонецФункции // ПолучитьСсылкуПоКлючевымПолям()

Функция ПолучитьТипЗначенияИзЧтенияXML(ЧтениеXml) Экспорт

	XMLТип = ПолучитьXMLТип(ЧтениеXml);
	
	Если ТипЗнч(XMLТип) = Тип("ТипДанныхXML") Тогда
		ТипЗначения = ИзXMLТипа(XMLТип);
		Возврат ТипЗначения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
 
Функция ДанныеСоответствий(ЭтоПервыйОбмен = Ложь) Экспорт
	
	Возврат Новый Структура("ТаблицаСоответствий, ЭтоПервыйОбмен",
							ПустаяТаблицаСсылок(),
							ЭтоПервыйОбмен);

КонецФункции // ДанныеСоответствий()
 
Функция ФайлСОбщимиДанными(ИмяФайла)

	Постфикс = "_0";
	
	ВхождениеТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	
	Если ВхождениеТочки <> 0 Тогда
		
		Имя = Лев(ИмяФайла, ВхождениеТочки - 1);
		
	Иначе 
		
		Имя = ИмяФайла;
	
	КонецЕсли; 
	
	Результат = СтрЗаканчиваетсяНа(Имя, Постфикс); 
	
	Возврат Результат;

КонецФункции // ЭтоФайлСОбщимиДанными()

Процедура ЗаменитьСсылкиВНабореЗаписей(СсылкаИсточника, СсылкаПриемника, НаборЗаписей)

	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Таблица = НаборЗаписей.Выгрузить();
	
	Отказ = Ложь;
	
	ЗаменитьСсылкиВТаблице(СсылкаИсточника, СсылкаПриемника, Таблица, Отказ);
	
	Если Не Отказ Тогда
	
		НаборЗаписей.Загрузить(Таблица);
	
	КонецЕсли; 
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры
 
Процедура ЗаменитьСсылкиТабличныхЧастейОбъекта(СсылкаИсточника, СсылкаПриемника, ОбъектМетаданных, Данные)

	Для каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		ТабЧасть = Данные[ТабличнаяЧасть.Имя];
		
		Если ТабЧасть.Количество() = 0 Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Отказ = Ложь;
		
		Таблица = ТабЧасть.Выгрузить();
		
		ЗаменитьСсылкиВТаблице(СсылкаИсточника, СсылкаПриемника, Таблица, Отказ);
		
		Если Не Отказ Тогда
		
			ТабЧасть.Загрузить(Таблица);
		
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаменитьСсылкиВТаблице(СсылкаИсточника, СсылкаПриемника, Таблица, Отказ)

	МассивКолонок = Новый Массив;
	
	ТипСсылки = ТипЗнч(СсылкаИсточника);
	
	Для каждого Колонка Из Таблица.Колонки Цикл
	
		Если Колонка.ТипЗначения.СодержитТип(ТипСсылки) Тогда
		
			МассивКолонок.Добавить(Колонка);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если МассивКолонок.Количество() = 0 Тогда
		
		Отказ = Истина;
		Возврат;
	
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
	
		Для каждого Колонка Из МассивКолонок Цикл
		
			Если СтрокаТаблицы[Колонка.Имя] = СсылкаИсточника Тогда
			
				СтрокаТаблицы[Колонка.Имя] = СсылкаПриемника;
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры
 
Процедура ЗаменитьСсылкиПоКоллекцииРеквизитов(СсылкаИсточника, СсылкаПриемника, КоллекцияРеквизитов, Данные)

	Для каждого Реквизит Из КоллекцияРеквизитов Цикл
	
		Если Реквизит.Тип.СодержитТип(ТипЗнч(СсылкаИсточника))
			 И Данные[Реквизит.Имя] = СсылкаИсточника Тогда
		
			Данные[Реквизит.Имя] = СсылкаПриемника;
		
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

Функция ПроверитьДатуИзменения(Объект, СодержимоеОбъекта)

	ДатаИзменения = ПолучитьДатуИзмененияОбъекта(Объект.Ссылка);
	ДатаИзмененияЗагрузка = Неопределено;
	ДатаИзмененияЗагрузка = ?(СодержимоеОбъекта.Свойство("ДатаИзменения", ДатаИзмененияЗагрузка),
								XMLЗначение(Тип("Дата"), ДатаИзмененияЗагрузка),
								'00010101');
								
	Результат = ДатаИзменения <= ДатаИзмененияЗагрузка;							
	
	Если Результат Тогда
	
		Объект.ДополнительныеСвойства.Вставить("ДатаИзменения", ДатаИзмененияЗагрузка);
	
	КонецЕсли; 
								
	Возврат Результат;
	
КонецФункции // ПроверитьДатуИзменения()
 
Процедура ЗаполнитьОбъект(Объект, СодержимоеОбъекта, ТаблицаРеквизитов, ИсключаемыеСвойства, ТаблицаСоответствий)

	МассивИсключаемыхСвойств = СтрРазделить(ИсключаемыеСвойства, ",", Ложь);
	
	Для каждого ПолеСодержимого Из СодержимоеОбъекта Цикл
		
		Если МассивИсключаемыхСвойств.Найти(ПолеСодержимого.Ключ) <> Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Отбор = Новый Структура("ИмяРеквизита, ИмяТабличнойЧасти", ПолеСодержимого.Ключ, "");
		
		Если ТаблицаРеквизитов.НайтиСтроки(Отбор).Количество() > 0 Тогда
			
			Попытка
			
				Объект[ПолеСодержимого.Ключ] = ОбработатьЗначениеПередПомещением(ПолеСодержимого.Значение,
																			ТаблицаСоответствий);
			
			Исключение
			
			КонецПопытки; 
						
			
		ИначеЕсли ТаблицаРеквизитов.Найти(ПолеСодержимого.Ключ, "ИмяТабличнойЧасти") <> Неопределено Тогда 
			
			Попытка
			
				ТабличнаяЧасть = Объект[ПолеСодержимого.Ключ];
				
				Если ТаблицаСОшибкой(ПолеСодержимого.Значение) Тогда // Временно. Исправляет проблему очистки табличных частей
				
					Продолжить;
				
				КонецЕсли; 
				
				ТабличнаяЧасть.Очистить();
	
			Исключение
				
				Продолжить;
			
			КонецПопытки;  
			
			Если ТипЗнч(ПолеСодержимого.Значение) = Тип("ТаблицаЗначений") Тогда
			
				ЗаполнитьТабличнуюЧастьОбъекта(ТабличнаяЧасть,
												ПолеСодержимого.Значение,
												ПолеСодержимого.Ключ,
												ТаблицаРеквизитов,
												ТаблицаСоответствий);
			
			КонецЕсли;  
				  
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

Функция ТаблицаСОшибкой(Таблица)

	Возврат ТипЗнч(Таблица) = Тип("ТаблицаЗначений")
			И Таблица.Количество() > 0
			И Таблица.Колонки.Количество() = 0

КонецФункции // ПроверитьТаблицу()
 

Процедура ЗаполнитьТабличнуюЧастьОбъекта(ТабличнаяЧасть, ТаблицаЗначений, ИмяТабличнойЧасти, ТаблицаРеквизитов, ТаблицаСоответствий)
	
	Если ТаблицаЗначений = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
			Если ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита, ИмяТабличнойЧасти", Колонка.Имя, ИмяТабличнойЧасти)).Количество() > 0 Тогда
							
				СтрокаТЧ[Колонка.Имя] = ОбработатьЗначениеПередПомещением(СтрокаТаблицы[Колонка.Имя],
																			ТаблицаСоответствий);
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры
 
Функция НайтиСсылкуПоКлючевымПолям(ОбъектМетаданных, СодержимоеОбъекта, ТаблицаСоответствий)

	КлючевыеПоля = Новый Массив;
	
	ЗаполнитьКлючевыеПоля(ОбъектМетаданных, КлючевыеПоля, СодержимоеОбъекта);
	
	СтруктураОтбора = Новый Структура;
	
	Для каждого КлючевоеПоле Из КлючевыеПоля Цикл
		
		Поле = ПолучитьИмяСтандартногоРеквизита(КлючевоеПоле);
		
		Значение = Неопределено;
		
		Если СодержимоеОбъекта.Свойство(Поле, Значение) Тогда
		
			СтруктураОтбора.Вставить(Поле, ОбработатьЗначениеПередПомещением(Значение, ТаблицаСоответствий));
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ПолучитьСсылкуПоКлючевымПолям(ОбъектМетаданных.ПолноеИмя(), СтруктураОтбора);

КонецФункции // НайтиПоКлючевымПолям()

Процедура ЗаполнитьКлючевыеПоля(ОбъектМетаданных, КлючевыеПоля, СодержимоеОбъекта)

	Если ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.Номенклатура")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("Артикул");
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.CRM_ТипУслуги")) Тогда
		
		КлючевыеПоля.Добавить("Description");
	
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.Пользователи")) Тогда
		
		Если СодержимоеОбъекта.Свойство("Идентификатор") Тогда
		
			КлючевыеПоля.Добавить("Ref");
		
		Иначе		
		
			АдресПочты = Неопределено;
			СодержимоеОбъекта.Свойство("CRM_ЕмейлДляСинхронизации", АдресПочты);
			
			Если ЗначениеЗаполнено(АдресПочты) Тогда
			
				КлючевыеПоля.Добавить("CRM_ЕмейлДляСинхронизации");
			
			Иначе
			
				КлючевыеПоля.Добавить("Description");
			
			КонецЕсли; 
		
		КонецЕсли; 
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.CRM_ВидыВзаимодействий")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("ВидСобытия");
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.CRM_КатегорииПользователей")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("Owner");
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
			КлючевыеПоля.Добавить("Owner");
		
		Иначе
		
			КлючевыеПоля.Добавить("Партнер");
		
		КонецЕсли;
		
		КлючевыеПоля.Добавить("Организация");
		
	ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
			  И ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка." + "CRM_УровниДоступа")) Тогда
		
		КлючевыеПоля.Добавить("Ref");
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.ВидыКонтактнойИнформации")) Тогда
		
		ИдентификаторПредопределенногоЭлемента = Неопределено;
		СодержимоеОбъекта.Свойство("CRM_ИмяПредопределеноого", ИдентификаторПредопределенногоЭлемента);
		
		Если ЗначениеЗаполнено(ИдентификаторПредопределенногоЭлемента) Тогда
			КлючевыеПоля.Добавить("CRM_ИмяПредопределеноого");
		Иначе
			КлючевыеПоля.Добавить("Description");
		КонецЕсли;
		
		ЭтоГруппа = Неопределено;
		СодержимоеОбъекта.Свойство("IsFolder", ЭтоГруппа);
		
		Если ЭтоГруппа <> Истина Тогда
		
			КлючевыеПоля.Добавить("Тип");
		
		КонецЕсли; 
		
		КлючевыеПоля.Добавить("Parent");
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.ПапкиЭлектронныхПисем")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("Owner");
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.ХарактеристикиНоменклатуры")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("Owner");
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.CRM_ТочкиМаршрутов")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("Owner");
		
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.БизнесРегионы")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("Parent");
		
	ИначеЕсли Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
			  И ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка." + "УпаковкиЕдиницыИзмерения")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("Owner");
		
	ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
			  И ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка." + "НоменклатурныеГруппы")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("Parent");
		
	ИначеЕсли Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
			  И ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.НаборыУпаковок")) Тогда
		
		КлючевыеПоля.Добавить("Description");
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.CRM_СостоянияИнтересов")) Тогда
		
		ИдентификаторПредопределенногоЭлемента = Неопределено;
		СодержимоеОбъекта.Свойство("ИдентификаторПредопределенногоЭлемента", ИдентификаторПредопределенногоЭлемента);

		КлючевыеПоля.Добавить("Parent");

		Если ЗначениеЗаполнено(ИдентификаторПредопределенногоЭлемента) Тогда
			КлючевыеПоля.Добавить("ИдентификаторПредопределенногоЭлемента");
		Иначе
			КлючевыеПоля.Добавить("Description");
		КонецЕсли;	
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.CRM_ВоронкиПродаж")) Тогда
		КлючевыеПоля.Добавить("Parent");
		КлючевыеПоля.Добавить("Description");
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.CRM_ВидыДелВзаимодействий")) Тогда
		КлючевыеПоля.Добавить("Description");
	ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка." + "ЕдиницыИзмерения")) Тогда
		КлючевыеПоля.Добавить("Description");	
		КлючевыеПоля.Добавить("Owner");
	ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка." + "КлассификаторЕдиницИзмерения")) Тогда
		КлючевыеПоля.Добавить("Code");
	ИначеЕсли ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип("СправочникСсылка.CRM_ВидыВзаимодействий")) Тогда
		
		КлючевыеПоля.Добавить("Description");
		КлючевыеПоля.Добавить("ВидСобытия");
		КлючевыеПоля.Добавить("ВидДела");
		КлючевыеПоля.Добавить("СостояниеИнтереса");
		КлючевыеПоля.Добавить("Направление");
		
	Иначе 
		
		// Не определены ключевые поля, ищем по коду и наименованию
		ЗаполнитьСтандартныеКлючевыеПоля(ОбъектМетаданных, КлючевыеПоля, СодержимоеОбъекта);
	
	КонецЕсли; 

КонецПроцедуры
 
Функция НовыйОбъектСправочника(ОбъектМетаданных, Ссылка, ЭтоГруппа)

	Если ЭтоГруппа Тогда
		
		Объект = Справочники[ОбъектМетаданных.Имя].СоздатьГруппу();
		
	Иначе 
		
		Объект = Справочники[ОбъектМетаданных.Имя].СоздатьЭлемент();
	
	КонецЕсли; 
	
	Объект.УстановитьСсылкуНового(Ссылка);
	
	Возврат Объект;

КонецФункции // ()
    
Процедура ПрочитатьДоЗакрывающегоУзла(ЧтениеXML, ИмяУзла)

	Если ЭтоКонецЭлемента(ЧтениеXML, ИмяУзла) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Пока ЧтениеXML.Прочитать() 
 		И Не ЭтоКонецЭлемента(ЧтениеXML, ИмяУзла) Цикл
	
		Продолжить;
		
	КонецЦикла;

КонецПроцедуры
 
Функция ПроведениеДокументаРазрешено(Документ)

	ОбъектМетаданных = Документ.Метаданные();
	Возврат Строка(ОбъектМетаданных.Проведение) = "Разрешить";

КонецФункции // ПроведениеДокументаРазрешено()
 
Функция ПрочитатьДанныеОбъекта(ЧтениеXML, УдалениеОбъекта = Ложь)

	ИмяОбъекта = ЧтениеXML.Имя;
	
	СтруктураОбъекта = Новый Структура;
	
	Пока ЧтениеXML.Прочитать() 
	 	И Не (ЧтениеXML.Имя = ИмяОбъекта
		И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			 И ЧтениеXML.Имя <> ИмяОбъекта Тогда
			 
			ИмяУзла = ЧтениеXML.Имя; 
			
			Отказ = Ложь;
			
			ЗначениеПоля = ПрочитатьОписаниеЗначения(ЧтениеXML,
											   		ИмяУзла);
											   
											   
			СтруктураОбъекта.Вставить(?(УдалениеОбъекта, "Ref", ИмяУзла), ЗначениеПоля);
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат СтруктураОбъекта;

КонецФункции // ПрочитатьДанныеОбъекта()

Функция ПрочитатьОписаниеЗначения(ЧтениеXML,
						Знач ИмяУзла,
						Знач ИмяТаблицы = "")

	Значение = Неопределено;
	ТипXML = Неопределено;
	ЗначениеНеопределено = Ложь;
	ЗначениеПолучено = Ложь;
	
	Пока Истина Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			 И ЧтениеXML.Имя <> ИмяУзла Тогда
			 
			Если ЭтоУзелСтрокиТаблицы(ЧтениеXML.Имя) Тогда
				
				Если ЗначениеПолучено Тогда
				
					ВызватьИсключение "Ошибка формата объекта! Строки табличной части не могут иметь одного родителя с реквизитами.";
				
				КонецЕсли; 

				
				Значение = ПрочитатьОписаниеТаблицы(ЧтениеXML,
													ИмяУзла,
													ЧтениеXML.Имя);
				ЗначениеПолучено = Истина;
				
				
			Иначе 
				
				Если Не ЗначениеЗаполнено(Значение) Тогда
				
					Значение = Новый Структура; 
				
				КонецЕсли; 
				
				ИмяУзлаРеквизита = ЧтениеXML.Имя;

				ЗначениеПоля = ПрочитатьОписаниеЗначения(ЧтениеXML,
														ИмяУзлаРеквизита);
												
				Значение.Вставить(ИмяУзлаРеквизита, ЗначениеПоля);

				ЗначениеПолучено = Истина;													
			
			КонецЕсли; 
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			 И ЧтениеXML.Имя = ИмяУзла Тогда
			 
			 ЗначениеНеопределено = Ложь;
			 
			 ТипXML = ЧтениеXML.ПолучитьАтрибут("type");
			 
			 Если ТипXML = Неопределено Тогда
			 
			 	ТипXML = ЧтениеXML.ПолучитьАтрибут("xsi:type");
			 
			КонецЕсли;
			
			Если ЧтениеXML.ПолучитьАтрибут("nil") = "true"
				 Или ЧтениеXML.ПолучитьАтрибут("xsi:nil") = "true" Тогда // если значение не равно неопределено, записываем пустое
			 
			 	ЗначениеНеопределено = Истина;
			 
			КонецЕсли; 
		
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда 
			
			Если ЗначениеПолучено Тогда
			
				ВызватьИсключение "Ошибка формата объекта. Текстовое значение не может иметь одного родителя с полями реквизитов.";
			
			КонецЕсли; 
			
			Если ЗначениеНеопределено Тогда
			
				ЗначениеXML = Неопределено;
				
			Иначе 
				
				ЗначениеXML = ЧтениеXML.Значение;
			
			КонецЕсли;
			
			Значение = ОписаниеЗначения(ТипXML, ЗначениеXML);
			
			ЗначениеПолучено = Истина;
			
		КонецЕсли;
		
		Если ЧтениеXML.Имя = ИмяУзла
			 И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			 Или Не ЧтениеXML.Прочитать() Тогда
		
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла;
		
	Возврат Значение;	

КонецФункции // ПрочитатьОписаниеЗначения()

Функция ПрочитатьОписаниеТаблицы(ЧтениеXML,
						ИмяУзла,
						Знач ИмяСтрокиТаблицы = "Row")
	
	Таблица = Новый ТаблицаЗначений;
	СтрокаТаблицы = Неопределено;
	
	Пока Истина Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			 И ЧтениеXML.Имя <> ИмяСтрокиТаблицы Тогда
			 
			 Если СтрокаТаблицы = Неопределено Тогда
			 
			 	ВызватьИсключение "Ошибка разбора таблицы.";
			 
			КонецЕсли;
			
			ИмяУзлаРеквизита = ЧтениеXML.Имя;
			
			Если Таблица.Колонки.Найти(ИмяУзлаРеквизита) = Неопределено Тогда
			
				Таблица.Колонки.Добавить(ИмяУзлаРеквизита);
			
			КонецЕсли;
			
			ЗначениеЯчейки = ПрочитатьОписаниеЗначения(ЧтениеXML,
														ИмяУзлаРеквизита,
														?(ИмяУзла = "Records", "", ИмяУзла));
																
			СтрокаТаблицы[ИмяУзлаРеквизита] = ЗначениеЯчейки;
			 
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			 И ЧтениеXML.Имя = ИмяСтрокиТаблицы Тогда
			 
			 СтрокаТаблицы = Таблица.Добавить();
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			 		И ЧтениеXML.Имя = ИмяСтрокиТаблицы Тогда 
			
			Если ЧтениеXML.Имя = ИмяСтрокиТаблицы Тогда
				
				СтрокаТаблицы = Неопределено;
			
			КонецЕсли; 			
		
		КонецЕсли;
		
		Если ЧтениеXML.Имя = ИмяУзла
			 И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			 Или Не ЧтениеXML.Прочитать() Тогда
		
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат Таблица;

КонецФункции // ПрочитатьОписаниеТаблицы()
 
Функция ОписаниеЗначения(Тип, Значение)

	Возврат Новый Структура("Тип, Значение", Тип, Значение); 

КонецФункции // ОписаниеЗначения()

Функция ЭтоКонецЭлемента(ЧтениеXML, ИмяУзла)

	Возврат ЧтениеXML.Имя = ИмяУзла
			И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента;

КонецФункции // ЭтоКонецЭлемента()

#КонецОбласти

#Область УровниДоступа

Функция ПолучитьНаборЗаписейСОтбором(ОбъектМетаданных, Данные)

	НаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		НаборЗаписей.Отбор["Период"].Установить(Данные.Период, Истина);
	КонецЕсли; 
	
	Для каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Значение = Данные[Измерение.Имя]; 
		
		НаборЗаписей.Отбор[Измерение.Имя].Установить(Значение, Истина);
	
	КонецЦикла;
	
	Возврат НаборЗаписей;

КонецФункции
 
Функция РасширениеФайлаРазрешений()
	
	Возврат "rls"

КонецФункции // РасширениеФайлаРазрешений()

Процедура ЗаполнитьПоляГруппыДоступа(ОбъектМетаданных, СтрокаРеквизита, СтрокаСоединения)

	СтрокаРеквизита = ТекстПустойГруппыДоступа();
	СтрокаСоединения = ""; 
	
	Если ЗаполнитьПолеЗапросаГруппыДоступа(ОбъектМетаданных, СтрокаРеквизита, СтрокаСоединения) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ДеревоПоискаГруппДоступа = CRM_СинхронизацияСерверПовтИсп.СформироватьДеревоПоискаГруппыДоступа(ОбъектМетаданных.ПолноеИмя());
	
	Если ДеревоПоискаГруппДоступа.Строки.Количество() = 0 Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ТекстПоля = ОбъектМетаданных.Имя;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		 И ОбъектМетаданных.Имя <> "Партнеры"
		 Или Метаданные.Документы.Содержит(ОбъектМетаданных)
		 Или Метаданные.Задачи.Содержит(ОбъектМетаданных)
		 Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
	
		ТекстПоля = ТекстПоля + ".Ссылка";
	
	КонецЕсли; 
	
	СтрокаРеквизита = "ЕСТЬNULL("
					+ СформироватьТекстПоляЗапроса(ТекстПоля, ДеревоПоискаГруппДоступа.Строки)
					+ ", "
					+ ТекстПустойГруппыДоступа()
					+ ")"; 

КонецПроцедуры // СоединениеГруппыДоступа()

Функция СформироватьТекстПоляЗапроса(ИсходныйТекстПоля, СтрокиДерева)
	
	Если СтрокиДерева.Количество() = 0 Тогда
	
		Возврат ИсходныйТекстПоля;
	
	КонецЕсли; 
	
	СтрокиПоРеквизиту = МассивСтрокРеквизитаСамымКороткимПутемПоиска(СтрокиДерева);
	
	НеобходимоВетвление = СтрокиПоРеквизиту.Количество() > 1;
	
	Результат = "";
	
	Если НеобходимоВетвление Тогда
	
		Результат = "ВЫБОР
					|	";
	
	КонецЕсли; 
	
	Для Индекс = 0 По СтрокиПоРеквизиту.Количество() - 1 Цикл
		
		СтрокаДерева = СтрокиПоРеквизиту[Индекс];
		
		Если Индекс > 0 Тогда
		
			Результат = Результат + "
									|";
		
		КонецЕсли; 
		
		Если НеобходимоВетвление Тогда
		
			Результат = Результат +
						СтрШаблон("КОГДА %1.%2 Ссылка %3 ТОГДА ",
									ИсходныйТекстПоля,
									СтрокаДерева.Реквизит,
									СтрокаДерева.ИмяМетаданных);
		КонецЕсли; 
		
		ТекстПоля = ИсходныйТекстПоля
					+ "."
					+ СтрокаДерева.Реквизит;
		
		Если СтрокаДерева.СоставнойТип Тогда
		
			ТекстПоля = СтрШаблон("ВЫРАЗИТЬ(%1 КАК %2)", ТекстПоля, СтрокаДерева.ИмяМетаданных);
			
		КонецЕсли; 						
		
		ТекстПоля = СформироватьТекстПоляЗапроса(ТекстПоля, СтрокаДерева.Строки);						
		
		Результат = Результат + ТекстПоля;
	
	КонецЦикла;
	
	Если НеобходимоВетвление Тогда
	
		Результат = Результат + СтрШаблон("
										|ИНАЧЕ
										|	%1
										|КОНЕЦ", ТекстПустойГруппыДоступа());
	
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // СформироватьТекстПоляЗапроса()

Функция ТекстПустойГруппыДоступа() Экспорт 
	
	Возврат "Значение(Справочник.Партнеры.ПустаяСсылка)";

КонецФункции // ТекстПустойГруппыДоступа()

Функция МассивСтрокРеквизитаСамымКороткимПутемПоиска(СтрокиДерева)

	СтрокиДерева.Сортировать("Уровней, Реквизит");
	
	СтруктураОтбора = Новый Структура("Реквизит", СтрокиДерева[0].Реквизит); 
	
	Возврат СтрокиДерева.НайтиСтроки(СтруктураОтбора);

КонецФункции // МассивСтрокРеквизитаСамымКороткимПутемПоиска()

Функция ПолучитьГруппуДоступаОбъекта(Объект, МетаданныеОбъекта)

	ДеревоПоискаГруппДоступа = CRM_СинхронизацияСерверПовтИсп.СформироватьДеревоПоискаГруппыДоступа(МетаданныеОбъекта.ПолноеИмя());
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта)
		 И Объект.Количество() <> 0 Тогда
		
		ОбъектПоиска = Объект[0];
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда 
		
		ОбъектПоиска = Объект.Отбор;
		
	Иначе
		
		ОбъектПоиска = Объект;
	
	КонецЕсли; 
	
	ГруппаДоступа = ГруппаДоступаОбъектаИзДереваПоиска(ОбъектПоиска, ДеревоПоискаГруппДоступа.Строки);
	
	Если ЗначениеЗаполнено(ГруппаДоступа)
		И CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
		И ГруппаДоступа.CRM_УровниДоступа.Количество() = 0 Тогда
	
		ГруппаДоступа = ПустаяГруппаДоступа();
	
	КонецЕсли; 
	
	Возврат ГруппаДоступа;

КонецФункции // ПолучитьГруппуДоступаОбъекта()

Функция ГруппаДоступаОбъектаИзДереваПоиска(Объект, СтрокиДерева)
	
	Результат = ПустаяГруппаДоступа();
	
	Если СтрокиДерева.Количество() = 0 Тогда
	
		Возврат Результат;
	
	КонецЕсли; 
	
	СтрокиПоРеквизиту = МассивСтрокРеквизитаСамымКороткимПутемПоиска(СтрокиДерева);
	
	Для Каждого СтрокаДерева Из СтрокиПоРеквизиту Цикл
		
		ИмяРеквизита = СтрокаДерева.Реквизит;
		
		Если ТипЗнч(Объект) = Тип("Отбор") Тогда
			
			ЭлементОтбора = Объект.Найти(ИмяРеквизита);
			
			Если ЭлементОтбора = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			ЗначениеРеквизитаОбъекта = ЭлементОтбора.Значение;
		
		Иначе 
			
			ЗначениеРеквизитаОбъекта = Объект[ИмяРеквизита];
			
		КонецЕсли; 
		
		Если ТипЗнч(ЗначениеРеквизитаОбъекта) = СтрокаДерева.Тип Тогда
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
				Результат = ГруппаДоступаОбъектаИзДереваПоиска(ЗначениеРеквизитаОбъекта, СтрокаДерева.Строки);
				
			Иначе 
				
				Результат = ЗначениеРеквизитаОбъекта;
			
			КонецЕсли; 
			
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ГруппаДоступаОбъектаИзДереваПоиска()

Функция ПустаяГруппаДоступа()

	Возврат Справочники.Партнеры.ПустаяСсылка();

КонецФункции // ПустаяГруппаДоступа()
    
Функция ПолучитьСтрокуВерхнегоУровня(СтрокаДерева)

	Если СтрокаДерева.Родитель = Неопределено Тогда
	
		Возврат СтрокаДерева;
		
	Иначе 
		
		Возврат ПолучитьСтрокуВерхнегоУровня(СтрокаДерева.Родитель);
	
	КонецЕсли; 

КонецФункции // ПолучитьСтрокуВерхнегоУровня()
  
Функция ЗаполнитьПолеЗапросаГруппыДоступа(ОбъектМетаданных, СтрокаРеквизита, СтрокаСоединения)

	Выполнено = Ложь;
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
	
 		Если ОбъектМетаданных.Имя = "ЭлектронноеПисьмоИсходящее" Тогда
			
			СтрокаРеквизита = ТекстПустойГруппыДоступа();
		 	Возврат Истина;
		 
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.Имя = "ЗадачаИсполнителя" Тогда
			
			СтрокаРеквизита = ОбъектМетаданных.Имя + ".Ссылка.Партнер";
			
		 	Возврат Истина;
		 
		КонецЕсли;
	
	КонецЕсли; 

	Возврат Выполнено;
	
КонецФункции // ЗаполнитьСтрокиРеквизитаГруппДоступа()

Функция СформироватьФайлРазрешений(Разрешения, ПутьКФайлу)
	
	Если Разрешения.Количество() = 0 Тогда
	
		Возврат Ложь;
	
	КонецЕсли; 
	
	Запись = Новый ЗаписьJSON;
	Запись.ОткрытьФайл(ПутьКФайлу, КодировкаТекста.UTF8);
	
	ЗаписатьJSON(Запись, Разрешения,, "ПреобразованиеЗначенийJSON", CRM_СинхронизацияСервер);
	
	Запись.Закрыть();
	
	Возврат Истина;

КонецФункции

Функция ПреобразованиеЗначенийJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт 

	ОбъектМД = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Метаданные.Справочники.Содержит(ОбъектМД)
			Или Метаданные.Документы.Содержит(ОбъектМД)
			Или Метаданные.Задачи.Содержит(ОбъектМД)
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМД) Тогда
	
		Возврат Строка(Значение.УникальныйИдентификатор());
		
	Иначе 
		
		Возврат Строка(Значение);
	
	КонецЕсли; 

КонецФункции
 
 
#КонецОбласти

Процедура ОбновитьЧислоГруппУровнейДоступа()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК Количество
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Число = ?(Выборка.Следующий(), Выборка.Количество, 0);
	
	Константы.CRM_ЧислоГруппУровнейДоступа.Установить(Число);

КонецПроцедуры
 
Функция КоличествоФайловDropboxДляВыполненияПолнойСинхронизации()
	
	Возврат Макс(1000, Константы.CRM_ЧислоГруппУровнейДоступа.Получить() * 100);

КонецФункции // КоличествоФайловDropboxДляВыполненияПолнойСинхронизации()

Процедура ПолучитьЗаписатьДатыСинхронизации(ПараметрыАвторизации)

	ТаблицаФайлов = ТаблицаФайлов();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФайлыВОблаке.ИмяФайла КАК ИмяФайла,
	|	ФайлыВОблаке.АдресПочты КАК АдресПочты,
	|	ФайлыВОблаке.ХэшФайла КАК ХэшФайла
	|ПОМЕСТИТЬ ВТ_СписокФайлов
	|ИЗ
	|	&ФайлыВОблаке КАК ФайлыВОблаке
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АдресПочты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ВТ_СписокФайлов.ИмяФайла КАК ИмяФайла,
	|	ВТ_СписокФайлов.ХэшФайла КАК ХэшФайла
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФайлов КАК ВТ_СписокФайлов
	|		ПО Пользователи.CRM_ЕмейлДляСинхронизации = ВТ_СписокФайлов.АдресПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ДатыЗавершенияСинхронизацииСiCRM КАК CRM_ДатыЗавершенияСинхронизацииСiCRM
	|		ПО Пользователи.Ссылка = CRM_ДатыЗавершенияСинхронизацииСiCRM.Пользователь
	|			И (CRM_ДатыЗавершенияСинхронизацииСiCRM.ХэшФайла = ВТ_СписокФайлов.ХэшФайла)
	|ГДЕ
	|	CRM_ДатыЗавершенияСинхронизацииСiCRM.Пользователь ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ФайлыВОблаке", ТаблицаФайлов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеФайла = CRM_DropboxСервер.СкачатьФайл("/Settings/" + Выборка.ИмяФайла, Истина, ПараметрыАвторизации);
		
		Если ТипЗнч(ДанныеФайла) = Тип("Соответствие") Тогда 
			
			Данные = ДанныеФайла.Получить("Данные");
			
			Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
				
				Продолжить;
				
			КонецЕсли;
	
			ТекстФайла = ПолучитьСтрокуИзДвоичныхДанных(Данные, КодировкаТекста.UTF8);
			
			СтруктураПараметров = ЗначениеИзСтрокиJSON(ТекстФайла,, "LastSyncDate");
			
			ДатаСинхронизации = Неопределено;
			
			Если СтруктураПараметров.Свойство("LastSyncDate", ДатаСинхронизации) Тогда
			
				ДобавитьЗаписьВРегистрДатСинхронизации(Выборка.Пользователь,
														ДатаСинхронизации,
														Выборка.ХэшФайла);
			
			КонецЕсли; 
	
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры // ПолучитьДатыСинхронизаций()

Процедура ДобавитьЗаписьВРегистрДатСинхронизации(Пользователь, ДатаСинхронизации, ХэшФайла)

	МенеджерЗаписи = РегистрыСведений.CRM_ДатыЗавершенияСинхронизацииСiCRM.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.ДатаПоследнейСинхронизации = ДатаСинхронизации;
	МенеджерЗаписи.ХэшФайла = ХэшФайла;
	
	МенеджерЗаписи.Записать(Истина);
	
	
КонецПроцедуры
 
Функция ТаблицаФайлов()

	СписокФайлов = ПолучитьСписокФайловВПапкеDropbox("/Settings");
	
	ТаблицаФайлов = ПустаяТаблицаФайлов();
	
	Если ТипЗнч(СписокФайлов) = Тип("Структура")
		И СписокФайлов.Свойство("entries") Тогда
		
		Для Каждого ОписаниеФайла из СписокФайлов.entries Цикл
			
			ИмяФайла = ОписаниеФайла["name"];
			
			Если Не СтрЗаканчиваетсяНа(ИмяФайла, ".is") Тогда
			
				Продолжить;
			
			КонецЕсли; 
						
			НоваяСтрока = ТаблицаФайлов.Добавить();
			НоваяСтрока.АдресПочты 	= Лев(ИмяФайла, СтрДлина(ИмяФайла) - 3);
			НоваяСтрока.ИмяФайла 	= ИмяФайла;
			НоваяСтрока.ХэшФайла = ОписаниеФайла["content_hash"];
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ТаблицаФайлов;
	
КонецФункции // ТаблицаФайловПараметров()

Функция ПустаяТаблицаФайлов()

	Таблица = Новый ТаблицаЗначений;
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500));
	
	Таблица.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));
	Таблица.Колонки.Добавить("АдресПочты", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300)));
	Таблица.Колонки.Добавить("ХэшФайла", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(70)));
	
	Возврат Таблица;
	
КонецФункции // ПолучитьПустуюТаблицуФайлов()

#КонецОбласти  

Функция ЭтоОписаниеЗначения(Структура) Экспорт 

	Возврат ТипЗнч(Структура) = Тип("Структура")
			И Структура.Количество() = 2
			И Структура.Свойство("Тип")
			И Структура.Свойство("Значение")

КонецФункции // ЭтоОписаниеЗначения()

Процедура ДобавитьОшибкуКонвертацииВЖурнал(ДанныеОбъекта, Обработчик, ОписаниеОшибки)

	СписокПолей = "";
	
	Для каждого КлючЗначение Из ДанныеОбъекта Цикл
	
		Если КлючЗначение.Ключ = "ТекущееПравило"
			 Или КлючЗначение.Ключ = "ОписаниеПравил"
			 Или КлючЗначение.Ключ = "СтрокаТаблицы"
			 Или КлючЗначение.Ключ = "ТаблицаДанных"
			 Или КлючЗначение.Ключ = "ЗаписьXML"
			 Или КлючЗначение.Ключ = "Документ"
			 Или КлючЗначение.Ключ = "СоответствиеТипов" Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СписокПолей) Тогда
		
			СписокПолей = СписокПолей + Символы.ПС;
		
		КонецЕсли; 
		
		ЗначениеОбъекта = ?(КлючЗначение.Ключ = "Метаданные", КлючЗначение.Значение.ПолноеИмя(), Строка(КлючЗначение.Значение));
		
		СписокПолей = СписокПолей + СтрШаблон("%1 = %2", КлючЗначение.Ключ,
														 ЗначениеОбъекта);
	
	КонецЦикла; 
													 
	СписокПолей = СписокПолей + "
				 |Обработчик = " + Обработчик;
				
	
	ДобавитьЗаписьВЖурнал(СтрШаблон("Ошибка конвертации значений:
									|%1
									|Описание ошибки: %2", СписокПолей, ОписаниеОшибки));

КонецПроцедуры
 
Функция ПолучитьСтрокуПравилКонвертацииОбъекта(Объект, ОписаниеПравил, ИмяОбъекта, ПолеПоиска)
	
	СтруктураПоиска = СтруктураПоискаПравил(ПолеПоиска, ИмяОбъекта);
	
	ОписаниеПравил.Обработчики.ПередВыгрузкойОбъекта(Объект, СтруктураПоиска);
	
	Возврат НайтиПравилоПоСтруктуре(ОписаниеПравил.ПравилаКонвертации, СтруктураПоиска);

КонецФункции // ПолучитьСтрокуПравилКонвертацииОбъекта()
 
Функция ПолучитьНеВыгруженныеФайлыСинхронизации(Узел, ПолучитьПоследний) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ " + ?(ПолучитьПоследний, "ПЕРВЫЕ 1", "") + "
		|	СообщенияОбменаДанными.Дата КАК Дата,
		|	СообщенияОбменаДанными.УзелОбмена КАК УзелОбмена,
		|	СообщенияОбменаДанными.ИмяФайла КАК ИмяФайла,
		|	СообщенияОбменаДанными.ДанныеФайла КАК ДанныеФайла
		|ИЗ
		|	РегистрСведений.CRM_СообщенияОбменаДанными КАК СообщенияОбменаДанными
		|ГДЕ
		|	СообщенияОбменаДанными.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенийОбмена.Исходящее)
		|	И СообщенияОбменаДанными.УзелОбмена = &УзелОбмена
		|	И НЕ СообщенияОбменаДанными.Обработан
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата " + ?(ПолучитьПоследний, "Убыв", "");
	
	Запрос.УстановитьПараметр("УзелОбмена", Узел);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА

Функция ЗагрузитьДанныеИзDropbox(Узел, ПараметрыАвторизации = Неопределено, ЭтоПервыйОбмен = Ложь, ПолнаяСинхронизация = Ложь) Экспорт
	
	// Переменные загрузки
	КоличествоФайловКЗагрузке = 0;
	ЗагруженоФайлов = 0;
	
	// Проверки для этого флага пока нет, поэтому пока Истина
	ВыполнятьСинхронизацию = Истина;	
	
	Если ВыполнятьСинхронизацию Тогда // Ревизия папки изменилась
		
		// Получим список файлов для загрузки
		СписокФайлов = ПолучитьСписокФайловДляЗагрузкиDropbox(Узел, ПолнаяСинхронизация);
		
		Если СписокФайлов <> Неопределено Тогда
			
			КоличествоФайловКЗагрузке = СписокФайлов.Количество();
			
		КонецЕсли;
				
		// Загружаем файлы
		Если ТипЗнч(СписокФайлов) = Тип("Массив") Тогда 
			
			ВременныйКаталог = ПолучитьИмяВременногоФайла() + "/";
			СоздатьКаталог(ВременныйКаталог);
			
			ДанныеСоответствий = ДанныеСоответствий(ЭтоПервыйОбмен);
			
			Для Каждого ИмяФайла Из СписокФайлов Цикл // Цикл по файлам загрузки
				
				ИмяФайлаОбмена = ПолучитьИмяВременногоФайла("xml");
				
				Если CRM_DropboxСервер.СкачатьИСохранитьФайл("/Sync/" + ИмяФайла, ИмяФайлаОбмена, ПараметрыАвторизации) Тогда // Загрузка из Дропбокса в файл
					
					Если CRM_СинхронизацияСервер.ЗагрузитьДанныеИзФайла(ИмяФайлаОбмена, Узел, ДанныеСоответствий) Тогда // Загрузка из файла в базу
						
						// Файл загрузился
						ЗагруженоФайлов = ЗагруженоФайлов + 1;
						CRM_СинхронизацияСервер.ДобавитьВходящийФайлВСписокЗагруженных(ТекущаяДата(), Узел, ИмяФайла);
					
					КонецЕсли; // Загрузка из файла в базу					
					
				КонецЕсли; // Загрузка из Дропбокса в файл
				
				УдалитьФайлы(ИмяФайлаОбмена);
				
			КонецЦикла; // Цикл по файлам загрузки
			
			ЗаменитьСсылкиСоответствий(ДанныеСоответствий);
			
			УдалитьФайлы(ВременныйКаталог);
			
		КонецЕсли;
				
	КонецЕсли; // Хеш папки изменился
	
	Возврат КоличествоФайловКЗагрузке = ЗагруженоФайлов И ВыполнятьСинхронизацию;

КонецФункции // ЗагрузитьДанныеИзDropbox()

// Возвращаемое значение:
// Булево - Истина, если загрузка прошла успешно
Функция ЗагрузитьДанныеИзФайла(ИмяФайлаОбмена, Узел, ДанныеСоответствий, ДанныеСтрокой = Неопределено) Экспорт
	
	Если ДанныеСоответствий = Неопределено Тогда
		ДанныеСоответствий = ДанныеСоответствий();
	КонецЕсли;
	
	НачатьТранзакцию();
		
	ЧтениеXML = Новый ЧтениеXML;
	
	Если ДанныеСтрокой = Неопределено Тогда
		Попытка
			ЧтениеXML.ОткрытьФайл(ИмяФайлаОбмена);
		Исключение
			ДобавитьЗаписьВЖурнал(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Попытка
			ЧтениеXML.УстановитьСтроку(ДанныеСтрокой);
		Исключение
			ДобавитьЗаписьВЖурнал(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Правила = ПолучитьПравилаКонвертации();
	
	ДобавитьСоответствияТипов(Правила, Истина); 
	
	// Текущим становится элемент Корень. 
	ЧтениеXML.Прочитать(); 
		
	// Пока есть возможность чтения(т.е. определяется тип чтения в конфигурации приемнике) или пока не конец файла чтения
	Пока ЧтениеXML.Прочитать() Цикл
		// Чтение XML и создание объекта "Данные"
		
		// Универсальный механизм чтения, работает для разных конфигурациях, но читает и
		// записывает только совпадающие объекты и их реквизиты.
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ИмяУзла = ЧтениеXML.Имя;
		
		СтруктураОбъекта = ПрочитатьДанныеОбъекта(ЧтениеXML, ИмяУзла = "ObjectDeletion");
		
		ИмяОбъекта = ИмяУзла;
		ИмяОбъектаПриемника = Неопределено;
		
		Отказ = Ложь;
		
		Правила.Обработчики.ПередИдентификациейОбъекта(ИмяОбъекта, СтруктураОбъекта, ИмяОбъектаПриемника, Отказ);
		
		Если Не ЗначениеЗаполнено(ИмяОбъектаПриемника) Тогда
		
			ИмяОбъекта = ПолучитьТипЗагружаемогоОбъекта(Правила.СоответствиеОбъектов, ИмяУзла);
			
		Иначе 
			
			ИмяОбъекта = ИмяОбъектаПриемника;
		
		КонецЕсли; 
		
		ТипОбъекта = ПолучитьТипЗначения(ИмяОбъекта);
	
		Если ТипОбъекта = Неопределено
			 Или Отказ Тогда // тип объекта был удален из конфигурации
			
			ПрочитатьДоЗакрывающегоУзла(ЧтениеXML, ИмяУзла);
			Продолжить;
			
		КонецЕсли; 
		
		Попытка
			
			Если ТипОбъекта <> Тип("УдалениеОбъекта") Тогда
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОбъекта);
				ТаблицаРеквизитов = СформироватьТаблицуРеквизитовОбъекта(ОбъектМетаданных);
				
				СтрокаПравил = ПолучитьСтрокуПравилКонвертации(Правила.ПравилаКонвертации, ОбъектМетаданных.ПолноеИмя());
				Правила.Вставить("ТекущееПравило", СтрокаПравил);
				
				ДанныеОбъекта = Новый Структура;
				ДанныеОбъекта.Вставить("МетаданныеОбъекта", ОбъектМетаданных);
				
				СтруктураОбъекта = ПрочитатьСодержимоеОбъекта(СтруктураОбъекта, ТаблицаРеквизитов, ДанныеСоответствий.ТаблицаСоответствий, Правила, ДанныеОбъекта);
				
				ДанныеОбъекта.Вставить("Объект", СтруктураОбъекта);
				
				Если Правила.ТекущееПравило <> Неопределено
					 И ЗначениеЗаполнено(Правила.ТекущееПравило.АлгоритмПриЗагрузке) Тогда
					 
					 Отказ = Ложь;
					 
					 ВыполнитьОбработчикКонвертации(ДанныеОбъекта,
					 								Правила.Обработчики, 
													Правила.ТекущееПравило.АлгоритмПриЗагрузке,
													Отказ);
													
					Если Отказ Тогда
					
						ПрочитатьДоЗакрывающегоУзла(ЧтениеXML, ИмяУзла);
						Продолжить;
					
					КонецЕсли; 
				
				КонецЕсли; 
				
			Иначе 
				
				СтруктураОбъекта = ПрочитатьУдалениеОбъекта(СтруктураОбъекта, Правила, ДанныеСоответствий.ТаблицаСоответствий);
			
			КонецЕсли; 
		
		Исключение
			
			ПрочитатьДоЗакрывающегоУзла(ЧтениеXML, ИмяУзла);
			Продолжить;
		
		КонецПопытки;
		
		ДанныеСоответствий.ТаблицаСоответствий = ЗаполнитьТаблицуСоответствий(Узел, ДанныеСоответствий.ТаблицаСоответствий);
		
		СозданНовыйОбъект = Ложь;
		
		Попытка
			
			Если ТипОбъекта <> Тип("УдалениеОбъекта") Тогда
				
				ЗаписатьОбъект(Узел, ОбъектМетаданных, СтруктураОбъекта, ТаблицаРеквизитов, ДанныеСоответствий, СозданНовыйОбъект);
				
			Иначе 
				
				ЗаписатьУдалениеОбъекта(СтруктураОбъекта, ДанныеСоответствий);
			
			КонецЕсли; 
			
		Исключение
			ДобавитьЗаписьВЖурнал(ОписаниеОшибки());
			
			ОтменитьТранзакцию();
			
			Возврат Ложь;
		КонецПопытки;

	КонецЦикла;
	// 
	
	ЗаменитьСсылкиСоответствий(ДанныеСоответствий);
	
	ЗафиксироватьТранзакцию();
			
	ЧтениеXML.Закрыть();
	
	Возврат Истина;
	
КонецФункции
 
Процедура ДобавитьСоответствияТипов(Правила, ДляОбратногоПреобразования = Ложь) Экспорт

	Правила.Вставить("СоответствиеОбъектов",	СоответствиеТиповОбъектов(Правила.ПравилаКонвертации.Строки, ДляОбратногоПреобразования));
	Правила.Вставить("СоответствиеТипов", СоответствиеТиповОбъектов(Правила.ПравилаКонвертации.Строки, ДляОбратногоПреобразования, "Ref"));

КонецПроцедуры

Функция ПолучитьТипЗагружаемогоОбъекта(СоответствиеОбъектов, ИмяУзла)

	ТипОбъекта = ПолучитьСоответствиеТипа(СоответствиеОбъектов, ИмяУзла);
	
	Если ТипОбъекта = Неопределено Тогда
	
		ТипОбъекта = ИмяУзла;
	
	КонецЕсли; 
	
	Возврат ТипОбъекта;

КонецФункции
 
Функция СоответствиеТиповОбъектов(СтрокиПравилКонвертации, ДляОбратногоПреобразования = Истина, СсылкаОбъект = "Object")
	
	Соответствие = Новый Соответствие;
	
	Для каждого СтрокаПравил Из СтрокиПравилКонвертации Цикл
		
		Если ДляОбратногоПреобразования Тогда
			
			Ключ = ПолучитьТипИзИмениМД(СтрокаПравил.ОбъектПриемник, СсылкаОбъект);
			Значение = ПолучитьТипИзИмениМД(СтрокаПравил.ОбъектИсточник, СсылкаОбъект);
			
		Иначе 
			
			Ключ = ПолучитьТипИзИмениМД(СтрокаПравил.ОбъектИсточник, СсылкаОбъект);
			Значение = ПолучитьТипИзИмениМД(СтрокаПравил.ОбъектПриемник, СсылкаОбъект);
		
		КонецЕсли; 
		
		Соответствие.Вставить(Ключ, Значение);
	
	КонецЦикла; 

	Возврат Соответствие;
	
КонецФункции // СоответствиеТиповОбъектов()

Функция ПолучитьТипИзИмениМД(ИмяМетаданных, СсылкаОбъект = "Object")

	МассивИмени = СтрРазделить(ИмяМетаданных, ".", Ложь);
	
	Возврат ПолучитьОпределениеОбъекта(МассивИмени[0], СсылкаОбъект) + "." + МассивИмени[1];

КонецФункции // ПолучитьТипИзИмениМД()
 
Функция ПолучитьСоответствиеТипа(СоответствиеОбъектов, ИскомыйТип)

	Возврат СоответствиеОбъектов.Получить(ИскомыйТип);

КонецФункции // ПолучитьСоответствиеТипа()

Процедура ЗаменитьСсылкиСоответствий(ДанныеСоответствий)
	ТаблицаСоответствий = ДанныеСоответствий.ТаблицаСоответствий;

	МассивСсылок = ТаблицаСоответствий.ВыгрузитьКолонку("СсылкаИсточника");
	
	Если МассивСсылок.Количество() = 0 Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ИсключаемыеОбъектыПоиска = Новый Массив;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		ОбъектМетаданных = Метаданные.Подсистемы["iCRM_ОблачнаяСинхронизация"];
		
	Иначе
		
		ОбъектМетаданных = Метаданные.Подсистемы["CRM_МодульCRM"].Подсистемы["iCRM_ОблачнаяСинхронизация"];
		
	КонецЕсли;	
	
	Для каждого МетаданныеОбъекта Из ОбъектМетаданных.Состав Цикл
	
		ИсключаемыеОбъектыПоиска.Добавить(МетаданныеОбъекта);
	
	КонецЦикла; 
	
	ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
	
	СоответствияСсылок = СоответствиеСсылокИзТаблицы(ТаблицаСоответствий);
	
	Для каждого СтрокаТаблицыСсылок Из ТаблицаСсылок Цикл
	
		Если ИсключаемыеОбъектыПоиска.Найти(СтрокаТаблицыСсылок.Метаданные) <> Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ЗаменитьСсылкиОбъекта(СтрокаТаблицыСсылок.Ссылка,
							 СоответствияСсылок.Получить(СтрокаТаблицыСсылок.Ссылка),
							 СтрокаТаблицыСсылок.Метаданные,
							 СтрокаТаблицыСсылок.Данные);
	
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаменитьСсылкиОбъекта(СсылкаИсточника, СсылкаПриемника, ОбъектМетаданных, Данные)

	Если СсылкаПриемника = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		 Или Метаданные.Документы.Содержит(ОбъектМетаданных)
		 Или Метаданные.Задачи.Содержит(ОбъектМетаданных)
		 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		 Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
	
		Объект = Данные.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
		
			Возврат;
		
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ОбменДанными.Получатели.Автозаполнение = Ложь;
		
		ЗаменитьСсылкиПоКоллекцииРеквизитов(СсылкаИсточника, СсылкаПриемника, ОбъектМетаданных.СтандартныеРеквизиты, Объект);
		ЗаменитьСсылкиПоКоллекцииРеквизитов(СсылкаИсточника, СсылкаПриемника, ОбъектМетаданных.Реквизиты, Объект);
		ЗаменитьСсылкиТабличныхЧастейОбъекта(СсылкаИсточника, СсылкаПриемника, ОбъектМетаданных, Объект);
		
		Если Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		
			ЗаменитьСсылкиПоКоллекцииРеквизитов(СсылкаИсточника, СсылкаПриемника, ОбъектМетаданных.РеквизитыАдресации, Объект);
		
		КонецЕсли; 
		
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
			Для каждого НаборЗаписей Из Объект.Движения Цикл
			
				ЗаменитьСсылкиВНабореЗаписей(СсылкаИсточника, СсылкаПриемника, НаборЗаписей);
			
			КонецЦикла; 
		
		КонецЕсли;
		
		Объект.Записать();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда 
		
		НаборЗаписей = ПолучитьНаборЗаписейСОтбором(ОбъектМетаданных, Данные);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		Таблица = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			НаборЗаписей.Отбор["Период"].Установить(Данные.Период, Истина);
		КонецЕсли; 
		
		Для каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Значение = Данные[Измерение.Имя];
			
			Если Измерение.Тип.СодержитТип(ТипЗнч(СсылкаИсточника))
			 	И Значение = СсылкаИсточника Тогда
				
				Значение = СсылкаПриемника;
			
			КонецЕсли; 
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(Значение, Истина);
		
		КонецЦикла;
		
		Отказ = Ложь;
		
		ЗаменитьСсылкиВТаблице(СсылкаИсточника, СсылкаПриемника, Таблица, Отказ);
		
		Если Не Отказ Тогда
		
			НаборЗаписей.Загрузить(Таблица);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Получатели.Автозаполнение = Ложь;
			
			НаборЗаписей.Записать(Истина);
		
		КонецЕсли;
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда 

		МенеджерЗначения = Константы[ОбъектМетаданных.Имя].СоздатьМенеджерЗначения();
		МенеджерЗначения.ОбменДанными.Загрузка = Истина;
		МенеджерЗначения.ОбменДанными.Получатели.Автозаполнение = Ложь;
		МенеджерЗначения.Значение = СсылкаПриемника;
		МенеджерЗначения.Записать();
		
	КонецЕсли; 

КонецПроцедуры
 
Функция ЗаписатьОбъект(Узел, ОбъектМетаданных, СодержимоеОбъекта, ТаблицаРеквизитов, ДанныеСоответствий, СозданНовыйОбъект)

	Результат = Неопределено;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		 Или Метаданные.Задачи.Содержит(ОбъектМетаданных)
		 Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
	
		Результат = ЗаписатьОбъектЭлемента(Узел, ОбъектМетаданных, СодержимоеОбъекта, ТаблицаРеквизитов, ДанныеСоответствий, СозданНовыйОбъект);
		
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		Результат = ЗаписатьДокумент(Узел, ОбъектМетаданных, СодержимоеОбъекта, ТаблицаРеквизитов, ДанныеСоответствий, СозданНовыйОбъект);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		      Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		
		Результат = ЗаписатьНаборРегистра(Узел, ОбъектМетаданных, СодержимоеОбъекта, ТаблицаРеквизитов, ДанныеСоответствий.ТаблицаСоответствий);
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		
		Результат = ЗаписатьКонстанту(Узел, ОбъектМетаданных, СодержимоеОбъекта, ДанныеСоответствий.ТаблицаСоответствий);
		
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция ЗаписатьУдалениеОбъекта(Структура, ДанныеСоответствий)

	Объект = Неопределено;
	
	Если Структура = Неопределено Тогда
	
		Возврат Объект;
	
	КонецЕсли; 
	
	Объект = Новый УдалениеОбъекта(ОбработатьЗначениеПередПомещением(Структура.Ref, ДанныеСоответствий.ТаблицаСоответствий));
	
	Объект.Записать();
	
	Возврат Объект;

КонецФункции // ЗаписатьУдалениеОбъекта()
 
Функция ОбработатьЗначениеПередПомещением(Знач Значение, ТаблицаСоответствий)

	Результат = Значение;
	
	Если ЭтоОбъектныйТип(ТипЗнч(Значение))
		 И ЗначениеЗаполнено(Значение) Тогда
	
		Результат = ПолучитьСсылкуПриемника(Значение, ТаблицаСоответствий);
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ОбработатьЗначениеПередПомещением()
 
Функция ЗаписатьНаборРегистра(Узел, ОбъектМетаданных, СодержимоеОбъекта, ТаблицаРеквизитов, ТаблицаСоответствий)

	Объект = НовыйОбъект(ОбъектМетаданных);
	
	Объект.ОбменДанными.Загрузка = Истина;
		
	Если ОбъектПодлежитСинхронизации(Объект) Тогда
	
		Объект.ОбменДанными.Отправитель = Узел;
	
	КонецЕсли;
	
	Если СодержимоеОбъекта.Свойство("Filter")
		 И СодержимоеОбъекта.Filter <> Неопределено Тогда
	
		Для каждого ЭлементОтбора Из СодержимоеОбъекта.Filter Цикл
			
			СтрокаРеквизита = ТаблицаРеквизитов.Найти(ЭлементОтбора.Ключ, "ИмяРеквизита");
			
			Если СтрокаРеквизита <> Неопределено
				 И (СтрокаРеквизита.ВидПоля = "Измерение" 
				 	Или СтрокаРеквизита.ВидПоля = "СтандартныйРеквизит") Тогда
					
					Значение = ОбработатьЗначениеПередПомещением(ЭлементОтбора.Значение, ТаблицаСоответствий);
					
					ИмяРеквизита = ЭлементОтбора.Ключ;
					
					Если СтрокаРеквизита.ВидПоля = "СтандартныйРеквизит" Тогда
					
						ИмяРеквизита = ПолучитьИмяСтандартногоРеквизитаРу(ИмяРеквизита);
					
					КонецЕсли;
					
					Если Объект.Отбор.Найти(ИмяРеквизита) = Неопределено Тогда
						
						Продолжить;
					
					КонецЕсли; 
					
					Объект.Отбор[ИмяРеквизита].Установить(Значение, Истина);
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли;
	
	Если СодержимоеОбъекта.Свойство("Records") Тогда
		
		ЗаполнитьТабличнуюЧастьОбъекта(Объект,
									  СодержимоеОбъекта.Records,
									  "",
									  ТаблицаРеквизитов,
									  ТаблицаСоответствий);
	
	КонецЕсли;
	
	Если СтандартныеРеквизитыНабораЗаполнены(Объект, ОбъектМетаданных) Тогда
	
		Объект.Записать(Истина);
		
		Возврат Объект;
		
	Иначе 
		
		Возврат Неопределено;
	
	КонецЕсли; 	

КонецФункции // ЗаписатьНаборРегистра()

Функция ЗаписатьДокумент(Узел, ОбъектМетаданных, СодержимоеОбъекта, ТаблицаРеквизитов, ДанныеСоответствий, СозданНовыйОбъект)

	Ссылка = СодержимоеОбъекта.Ref;
	
	ОбъектСоздан = Ложь;
	
	Объект = ПолучитьОбъект(Узел,
							Ссылка,
							СодержимоеОбъекта,
							ОбъектМетаданных,
							ДанныеСоответствий,
							,
							,
							ОбъектСоздан);
							
	Если Не ПроверитьДатуИзменения(Объект, СодержимоеОбъекта) Тогда
	
		//Возврат Неопределено;
	
	КонецЕсли;
	
	Проведение = Объект.Проведен;
	
	ЗаполнитьОбъект(Объект, СодержимоеОбъекта, ТаблицаРеквизитов, "Ref", ДанныеСоответствий.ТаблицаСоответствий);
	
	Объект.Записать();
	
	Если ПроведениеДокументаРазрешено(Объект)
		 И Проведение <> Объект.Проведен Тогда
		
		Попытка
			
			Объект.ОбменДанными.Загрузка = Ложь;
			Объект.ОбменДанными.Получатели.Автозаполнение = Ложь;
		
			Если Не Объект.Проведен Тогда
				
				ОчиститьДвиженияДокумента(Объект);
				Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
			Иначе 
				
				Объект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли; 
		
		Исключение
			
			ДобавитьЗаписьВЖурнал(ОписаниеОшибки());
			Возврат Неопределено;
		
		КонецПопытки; 
	
	КонецЕсли;
	
	Возврат Объект;

КонецФункции

Процедура ОчиститьДвиженияДокумента(ДокументОбъект)

	Для каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	
	КонецЦикла; 

КонецПроцедуры
 
функция ЗаписатьОбъектЭлемента(Узел, ОбъектМетаданных, СодержимоеОбъекта, ТаблицаРеквизитов, ДанныеСоответствий, СозданНовыйОбъект)

	Ссылка = СодержимоеОбъекта.Ref;
	ЭтоГруппа = Ложь;
	ИмяПредопределенныхДанных = "";
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		
		ЭтоГруппа = ?(СодержимоеОбъекта.Свойство("IsFolder", ЭтоГруппа), ЭтоГруппа, Ложь);
		ИмяПредопределенныхДанных = ?(СодержимоеОбъекта.Свойство("PredefinedDataName", ИмяПредопределенныхДанных), ИмяПредопределенныхДанных, "");
		
		Если ЭтоГруппа
		 	И НЕ ОбъектМетаданных.Иерархический Тогда
	
			Возврат Неопределено;
	
		КонецЕсли; 
	
	КонецЕсли; 
	
	СозданНовыйОбъект = Ложь;
	
	Если ОбъектМетаданных.Имя = "Пользователи" Тогда
	
		СодержимоеОбъекта.Удалить("СвойстваПользователяИБ");
	
	КонецЕсли; 
	
	Объект = ПолучитьОбъект(Узел,
							Ссылка,
							СодержимоеОбъекта,
							ОбъектМетаданных,
							ДанныеСоответствий,
							ИмяПредопределенныхДанных,
							ЭтоГруппа,
							СозданНовыйОбъект);
								
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Календари")
		И Не Объект.ЭтоНовый()						
		Или Не ПроверитьДатуИзменения(Объект, СодержимоеОбъекта) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ВидыКонтактнойИнформации")
		 И Объект.ЭтоНовый()
		 И Не СодержимоеОбъекта.Свойство("Используется") Тогда
	
		СодержимоеОбъекта.Вставить("Используется", Истина);
	
	КонецЕсли; 
							
	ЗаполнитьОбъект(Объект, СодержимоеОбъекта, ТаблицаРеквизитов, "Ref,Predefined,PredefinedDataName,IsFolder", ДанныеСоответствий.ТаблицаСоответствий);
	
	Если Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			
			Объект.Дата = Объект.ДатаНачала;
			
		Иначе
			
			Объект.Дата = ТекущаяДата();
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Если ОбъектМетаданных.Имя = "Пользователи" Тогда
	
		Объект.ОбменДанными.Загрузка = Ложь;
	
	КонецЕсли; 
	
	Объект.Записать();
	
	Возврат Объект;
	
КонецФункции

Процедура ДобавитьЗаписьСоответствияВРегистр(Узел, СсылкаИсточника, СсылкаПриемника) Экспорт 

	Запись = РегистрыСведений.CRM_СоответсвияОбъектовОбмена.СоздатьМенеджерЗаписи();
	Запись.УзелОбмена = Узел;
	Запись.ИдентификаторИсточника = Строка(СсылкаИсточника.УникальныйИдентификатор());
	Запись.ИдентификаторПриемника = Строка(СсылкаПриемника.УникальныйИдентификатор());
	Запись.СсылкаПриемника = СсылкаПриемника;
	Запись.ТипИсточника = XMLТипЗнч(СсылкаИсточника).ИмяТипа;
	Запись.ТипПриемника = XMLТипЗнч(СсылкаПриемника).ИмяТипа;

	Запись.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтандартныеКлючевыеПоля(ОбъектМетаданных, КлючевыеПоля, СодержимоеОбъекта)

	Если СодержимоеОбъекта.Свойство("Code")
		 И ОбъектСправочникаСодержитРеквизит(ОбъектМетаданных, "Код") Тогда
	
		КлючевыеПоля.Добавить("Code");
	
	КонецЕсли;
	
	Если СодержимоеОбъекта.Свойство("Description")
		 И ОбъектСправочникаСодержитРеквизит(ОбъектМетаданных, "Наименование") Тогда
	
		КлючевыеПоля.Добавить("Description");
	
	КонецЕсли;

КонецПроцедуры

Функция ОбъектСправочникаСодержитРеквизит(ОбъектМетаданных, ИмяРеквизита)
		
	Возврат КоллекцияРеквизитовСодержитИмя(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
			Или КоллекцияРеквизитовСодержитИмя(ОбъектМетаданных.Реквизиты, ИмяРеквизита);

КонецФункции // ОбъектСодержитРеквизит()

Функция КоллекцияРеквизитовСодержитИмя(Реквизиты, ИмяРеквизита)

	Результат = Ложь;
	
	Для каждого Реквизит Из Реквизиты Цикл
	
		Если Реквизит.Имя = ИмяРеквизита Тогда
		
			Результат = Истина;
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // КоллекцияРеквизитовСодержитИмя()
 
Функция ЭтапыПоискаОбъекта(ОбъектМетаданных)

	Этапы = Новый Массив;
	
	ЭтоСправочник = Метаданные.Справочники.Содержит(ОбъектМетаданных);
	
	Если ЭтоСправочник Тогда
	
		Этапы.Добавить("СООТВЕТСТВИЕ");
		Этапы.Добавить("ИПД");
	
	КонецЕсли; 
	
	Этапы.Добавить("ССЫЛКА");
	
	Если ЭтоСправочник Тогда
	
		Этапы.Добавить("ПОИСК");
	
	КонецЕсли; 
	
	Возврат Этапы;

КонецФункции // ()

Функция НовыйОбъект(ОбъектМетаданных, Ссылка = Неопределено, ЭтоГруппа = Ложь)

	Объект = Неопределено;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		
		Объект = НовыйОбъектСправочника(ОбъектМетаданных, Ссылка, ЭтоГруппа);
		
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		Объект = Документы[ОбъектМетаданных.Имя].СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		
		Объект = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		
		Объект = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		
		Объект = Константы[ОбъектМетаданных.Имя].СоздатьМенеджерЗначения();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		
		Объект = Задачи[ОбъектМетаданных.Имя].СоздатьЗадачу();
		Объект.УстановитьСсылкуНового(Ссылка);
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		
		Объект = БизнесПроцессы[ОбъектМетаданных.Имя].СоздатьБизнесПроцесс();
		Объект.УстановитьСсылкуНового(Ссылка);
		
	КонецЕсли; 
	
	Возврат Объект;

КонецФункции // ()
 
Функция ПолучитьСсылкуПредопределенного(ОбъектМетаданных, ИмяПредопределенныхДанных) Экспорт 

	Попытка
		
    		СсылкаПредопределенного = Справочники[ОбъектМетаданных.Имя][ИмяПредопределенныхДанных];
	
	Исключение
		
		// Если предопределенный элемент объявлен, но не создан
		СсылкаПредопределенного = Неопределено;
	
	КонецПопытки;
	
	Возврат СсылкаПредопределенного;

КонецФункции // ПолучитьСсылкуПредопределенного()
 
Функция ПолучитьСсылкуПриемника(СсылкаИсточника, ТаблицаСоответствий)

	СтрокаСоответствия = ТаблицаСоответствий.Найти(СсылкаИсточника, "СсылкаИсточника");
	
	Результат = СсылкаИсточника;
	
	Если СтрокаСоответствия <> Неопределено
		 И ЗначениеЗаполнено(СтрокаСоответствия.СсылкаПриемника) Тогда
	
		Результат = СтрокаСоответствия.СсылкаПриемника;
	
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ПолучитьСсылкуПриемника()

Функция ПолучитьДатуИзмененияОбъекта(Объект)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыИзмененийОбъектов.ДатаИзменения КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.CRM_ДатыИзмененийОбъектов КАК ДатыИзмененийОбъектов
	|ГДЕ
	|	ДатыИзмененийОбъектов.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ДатаИзменения, '00010101');

КонецФункции // ПолучитьДатуИзмененияОбъекта()

Процедура УстановитьДатуИзмененияОбъекта(Объект, ДатаИзменения)

	Если Не АвтоматическаяСинхронизацияВключена() Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.CRM_ДатыИзмененийОбъектов");
	ЭлементБлокировки.УстановитьЗначение("Объект", Объект);
	
	БлокировкаДанных.Заблокировать();
	
	МенеджерЗаписи = РегистрыСведений.CRM_ДатыИзмененийОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.ДатаИзменения = ДатаИзменения;
	
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

Функция ОбъектПодлежитСинхронизации(Объект)
		
	МетаданныеОбъекта = Объект.Метаданные();
	
	МетаданныеПланаОбмена = Метаданные.НайтиПоТипу(Тип("ПланОбменаСсылка.CRM_СинхронизацияСМобильнымПриложением"));
	
	Возврат МетаданныеПланаОбмена.Состав.Содержит(МетаданныеОбъекта);

КонецФункции // ОбъектПодлежитСинхронизации()

Функция ПолучитьСписокФайловДляЗагрузкиDropbox(Узел, ПолнаяСинхронизация)

	Результат = Неопределено;
	
	СписокФайлов = ПолучитьСписокФайловВПапкеDropbox("/Sync");
	
	Если ТипЗнч(СписокФайлов) = Тип("Структура")
		И СписокФайлов.Свойство("entries") Тогда
	
		ТаблицаФайловКЗагрузке = Новый ТаблицаЗначений;
		ТаблицаФайловКЗагрузке.Колонки.Добавить("ДатаФайла", Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		ТаблицаФайловКЗагрузке.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500)));
		ТаблицаФайловКЗагрузке.Колонки.Добавить("ОбщиеДанные", Новый ОписаниеТипов("Булево"));
		
		Для Каждого ОписаниеФайла из СписокФайлов["entries"] Цикл
			
			ИмяФайла = ОписаниеФайла["name"];
			
			Если СтрЗаканчиваетсяНа(ИмяФайла, РасширениеФайлаРазрешений())
				 Или СтрЗаканчиваетсяНа(ИмяФайла, РасширениеФайлаНастроек()) Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			ОбщиеДанные = ФайлСОбщимиДанными(ИмяФайла);
			
			Год     = Сред(ИмяФайла, 7, 4);
			Месяц   = Сред(ИмяФайла, 4, 2);
			День    = Сред(ИмяФайла, 1, 2);
			Час     = Сред(ИмяФайла, 12, 2);
			Минута  = Сред(ИмяФайла, 15, 2);
			Секунда = Сред(ИмяФайла, 18, 2);
			ДатаФайла = Дата(Год + Месяц + День + Час + Минута + Секунда);
			
			НоваяСтрока = ТаблицаФайловКЗагрузке.Добавить();
			НоваяСтрока.ДатаФайла 	= ДатаФайла;
			НоваяСтрока.ИмяФайла 	= ИмяФайла;
			НоваяСтрока.ОбщиеДанные = ОбщиеДанные;
			
		КонецЦикла; 
		
		ПолнаяСинхронизация = ТаблицаФайловКЗагрузке.Количество() >= КоличествоФайловDropboxДляВыполненияПолнойСинхронизации();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаФайловКЗагрузке", ТаблицаФайловКЗагрузке);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаФайловКЗагрузке.ДатаФайла КАК ДатаФайла,
		|	ТаблицаФайловКЗагрузке.ИмяФайла КАК ИмяФайла,
		|	ТаблицаФайловКЗагрузке.ОбщиеДанные КАК ОбщиеДанные
		|ПОМЕСТИТЬ ВТТаблицаФайловКЗагрузке
		|ИЗ
		|	&ТаблицаФайловКЗагрузке КАК ТаблицаФайловКЗагрузке
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИмяФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТаблицаФайловКЗагрузке.ДатаФайла КАК ДатаФайла,
		|	ВТТаблицаФайловКЗагрузке.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	ВТТаблицаФайловКЗагрузке КАК ВТТаблицаФайловКЗагрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СообщенияОбменаДанными КАК СообщенияОбменаДанными
		|		ПО ВТТаблицаФайловКЗагрузке.ИмяФайла = СообщенияОбменаДанными.ИмяФайла
		|			И (СообщенияОбменаДанными.УзелОбмена = &УзелОбмена)
		|ГДЕ
		|	СообщенияОбменаДанными.ИмяФайла ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТТаблицаФайловКЗагрузке.ОбщиеДанные УБЫВ,
		|	ДатаФайла,
		|	ИмяФайла";
		
		Запрос.УстановитьПараметр("УзелОбмена", Узел);
		РезультатЗапроса = Запрос.Выполнить();
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИмяФайла");
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьСписокФайловДляЗагрузкиDropbox()

Функция ПолучитьИмяСтандартногоРеквизита(Имя)

	ИмяРеквизита = Имя;
	
	Если Имя = "ИмяПредопределенныхДанных" Тогда
		
		ИмяРеквизита =  "PredefinedDataName";
		
	ИначеЕсли Имя = "Предопределенный" Тогда
		
		ИмяРеквизита =  "Predefined";
		
	ИначеЕсли Имя = "Ссылка" Тогда
		
		ИмяРеквизита =  "Ref";
		
	ИначеЕсли Имя = "ПометкаУдаления" Тогда
		
		ИмяРеквизита =  "DeletionMark";
		
	ИначеЕсли Имя = "ЭтоГруппа" Тогда
		
		ИмяРеквизита =  "IsFolder";
		
	ИначеЕсли Имя = "Родитель" Тогда
		
		ИмяРеквизита =  "Parent";
		
	ИначеЕсли Имя = "Наименование" Тогда
		
		ИмяРеквизита =  "Description";
		
	ИначеЕсли Имя = "Код" Тогда
		
		ИмяРеквизита =  "Code";
		
	ИначеЕсли Имя = "Владелец" Тогда
		
		ИмяРеквизита =  "Owner";
		
	ИначеЕсли Имя = "Дата" Тогда
		
		ИмяРеквизита =  "Date";
		
	ИначеЕсли Имя = "Номер" Тогда
		
		ИмяРеквизита =  "Number";
		
	ИначеЕсли Имя = "Проведен" Тогда
		
		ИмяРеквизита =  "Posted";
		
	ИначеЕсли Имя = "Период" Тогда
		
		ИмяРеквизита =  "Period";
		
	ИначеЕсли Имя = "Регистратор" Тогда
		
		ИмяРеквизита =  "Recorder";
		
	ИначеЕсли Имя = "Активность" Тогда
		
		ИмяРеквизита =  "Active";
		
	ИначеЕсли Имя = "ТипЗначения" Тогда 
		
		ИмяРеквизита = "ValueType";
		
	ИначеЕсли Имя = "БизнесПроцесс" Тогда 
		
		ИмяРеквизита = "BusinessProcess";
		
	ИначеЕсли Имя = "Выполнена" Тогда 
		
		ИмяРеквизита = "Executed";
		
	ИначеЕсли Имя = "ТочкаМаршрута" Тогда 
		
		ИмяРеквизита = "RoutePoint";
		
	ИначеЕсли Имя = "Стартован" Тогда 
		
		ИмяРеквизита = "Started";
		
	ИначеЕсли Имя = "Завершен" Тогда 
		
		ИмяРеквизита = "Completed";
		
	ИначеЕсли Имя = "ВедущаяЗадача" Тогда 
		
		ИмяРеквизита = "HeadTask";

	КонецЕсли;

	Возврат ИмяРеквизита;
	
КонецФункции // ИмяСтандартногоРеквизита()

Функция ПолучитьИмяСтандартногоРеквизитаРу(Имя)

	ИмяРеквизита = Имя;
	
	Если Имя = "PredefinedDataName" Тогда
		
		ИмяРеквизита =  "ИмяПредопределенныхДанных";
		
	ИначеЕсли Имя = "Predefined" Тогда 
		
		ИмяРеквизита =  "Предопределенный";
		
	ИначеЕсли Имя = "Ref" Тогда 
		
		ИмяРеквизита =  "Ссылка";
		
	ИначеЕсли Имя = "DeletionMark" Тогда         
		
		ИмяРеквизита =  "ПометкаУдаления";
		
	ИначеЕсли Имя = "IsFolder" Тогда    
		
		ИмяРеквизита =  "ЭтоГруппа";
		
	ИначеЕсли Имя = "Parent" Тогда  
		
		ИмяРеквизита =  "Родитель";
		
	ИначеЕсли Имя = "Description" Тогда 
		
		ИмяРеквизита =  "Наименование";
		
	ИначеЕсли Имя = "Code" Тогда 
		
		ИмяРеквизита =  "Код";
		
	ИначеЕсли Имя = "Owner" Тогда 
		
		ИмяРеквизита =  "Владелец";
		
	ИначеЕсли Имя = "Date" Тогда 
		
		ИмяРеквизита =  "Дата";
		
	ИначеЕсли Имя = "Number" Тогда 
		
		ИмяРеквизита =  "Номер";
		
	ИначеЕсли Имя = "Posted" Тогда   
		
		ИмяРеквизита =  "Проведен";
		
	ИначеЕсли Имя = "Period" Тогда 
		
		ИмяРеквизита =  "Период";
		
	ИначеЕсли Имя = "Recorder" Тогда  
		
		ИмяРеквизита =  "Регистратор";
		
	ИначеЕсли Имя = "Active" Тогда 
		
		ИмяРеквизита =  "Активность";
		
	ИначеЕсли Имя = "ValueType" Тогда 
		
		ИмяРеквизита =  "ТипЗначения";
		
	ИначеЕсли Имя = "BusinessProcess" Тогда 
		
		ИмяРеквизита = "БизнесПроцесс";
		
	ИначеЕсли Имя = "Executed" Тогда 
		
		ИмяРеквизита = "Выполнена";
		
	ИначеЕсли Имя = "RoutePoint" Тогда 
		
		ИмяРеквизита = "ТочкаМаршрута";
		
	ИначеЕсли Имя = "Started" Тогда 
		
		ИмяРеквизита = "Стартован";
		
	ИначеЕсли Имя = "Completed" Тогда 
		
		ИмяРеквизита = "Завершен";
		
	ИначеЕсли Имя = "HeadTask" Тогда 
		
		ИмяРеквизита = "ВедущаяЗадача";

	КонецЕсли;

	Возврат ИмяРеквизита;
	
КонецФункции // ИмяСтандартногоРеквизита()

Функция ПрочитатьСодержимоеОбъекта(ОписаниеСтруктурыОбъекта, ТаблицаРеквизитов, ТаблицаСоответствий, Правила, ДанныеОбъекта)

	СтруктураОбъекта = Новый Структура;
	ПравилаКонвертации = Правила.ПравилаКонвертации;
	
	ТекущееПравило = Правила.ТекущееПравило;
	
	Для каждого Реквизит Из ОписаниеСтруктурыОбъекта Цикл
	
		 ИмяРеквизита = Реквизит.Ключ;
			 
		 Если ИмяРеквизита <> "Filter"
			  И ИмяРеквизита <> "Records" Тогда
		
			  
			ЭтоКонстанта = Метаданные.Константы.Содержит(ДанныеОбъекта.МетаданныеОбъекта);
			  
			ПравилоКонвертации = ПолучитьСтрокуПравилКонвертации(ТекущееПравило,
																	?(ЭтоКонстанта,
																		ДанныеОбъекта.МетаданныеОбъекта.Имя, ИмяРеквизита),
																	"ОбъектПриемник");
		
			Правила.ТекущееПравило = ПравилоКонвертации;
			
			Если Не ЭтоКонстанта Тогда
			
				ИмяРеквизита = ПолучитьИмяРеквизитаИсточника(ПравилоКонвертации, ИмяРеквизита);
			
			КонецЕсли; 
		
		КонецЕсли; 
		
		Отказ = Ложь;
		
		ЗначениеПоля = ПрочитатьЗначение(Реквизит.Значение,
										   ТаблицаРеквизитов,
										   ИмяРеквизита,
										   ТаблицаСоответствий,
										   ,
										   Правила,
										   ДанныеОбъекта,
										   Отказ);
										   
										   
		Если Не Отказ Тогда
		
			СтруктураОбъекта.Вставить(ИмяРеквизита, ЗначениеПоля);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Правила.ТекущееПравило = ТекущееПравило;
	
	Возврат СтруктураОбъекта;

КонецФункции // ПрочитатьСодержимоеОбъекта() 

Функция ПрочитатьУдалениеОбъекта(Структура, Правила, ТаблицаСоответствий)

	ОписаниеЗначения = Неопределено;
	Структура.Свойство("Ref", ОписаниеЗначения);
	
	Если Не ЗначениеЗаполнено(ОписаниеЗначения)
		 Или Не ЭтоОписаниеЗначения(ОписаниеЗначения) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	ДанныеОбъекта = Новый Структура;
	
	ЗаполнитьТипXMLВДанныхОбъекта(Структура.Ref, ДанныеОбъекта, Правила);
	ЗаполнитьТипЗначенияВДанныхОбъекта(ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЗначения) Тогда
	
		Результат = Новый Структура("Ref", XMLЗначение(ДанныеОбъекта.ТипЗначения, Структура.Ref.Значение)); 
		
		Если ЗначениеЗаполнено(Результат.Ref) Тогда
		
			ДобавитьСсылкуВТаблицуСоответствий(ТаблицаСоответствий, Результат.Ref);
		
		КонецЕсли; 
		
		Возврат Результат;
		
	Иначе 
		
		Возврат Неопределено;
	
	КонецЕсли; 
	
КонецФункции // ПрочитатьУдалениеОбъекта()
 
Функция ПолучитьИмяРеквизитаИсточника(ПравилоКонвертации, ИмяУзла)

	Если ПравилоКонвертации <> Неопределено
		 И ЗначениеЗаполнено(ПравилоКонвертации.ОбъектИсточник) Тогда
		
		ИмяРеквизита = ПравилоКонвертации.ОбъектИсточник;
		
	Иначе 
		
		ИмяРеквизита = ИмяУзла;
	
	КонецЕсли; 
	
	Возврат ИмяРеквизита;

КонецФункции // ПолучитьИмяРеквизитаИсточника()
 
Функция ПустаяТаблицаСсылок()
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(255));
	
	ОбъектМД = Метаданные.НайтиПоТипу(Тип("РегистрСведенийНаборЗаписей.CRM_СоответсвияОбъектовОбмена"));
	СсылочныйТип = ОбъектМД.Измерения.СсылкаПриемника.Тип;
	
	ТаблицаСсылок.Колонки.Добавить("СсылкаИсточника", СсылочныйТип);
	ТаблицаСсылок.Колонки.Добавить("СсылкаПриемника", СсылочныйТип);
	ТаблицаСсылок.Колонки.Добавить("ИдентификаторИсточника", ОписаниеТиповСтрока);
	ТаблицаСсылок.Колонки.Добавить("ТипИсточника", ОписаниеТиповСтрока);
	
	Возврат ТаблицаСсылок;

КонецФункции // ПустаяТаблицаСсылок()

Процедура ДобавитьСсылкуВТаблицуСоответствий(ТаблицаСоответствий, СсылкаИсточника, СсылкаПриемника = Неопределено)
	
	СтрокаСоответствия = ТаблицаСоответствий.Найти(СсылкаИсточника, "СсылкаИсточника");
	
	Если СтрокаСоответствия = Неопределено Тогда
	
		Строка = ТаблицаСоответствий.Добавить();
		Строка.СсылкаИсточника 			= СсылкаИсточника;
		Строка.ИдентификаторИсточника	= Строка(СсылкаИсточника.УникальныйИдентификатор());
		Строка.ТипИсточника				= ПолучитьТипЗначенияXML(СсылкаИсточника);
		Если ЗначениеЗаполнено(СсылкаПриемника) Тогда
		
			Строка.СсылкаПриемника			= СсылкаПриемника;
		
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры
 
Функция ЗаполнитьТаблицуСоответствий(Узел, ТаблицаСоответствий)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСсылок.СсылкаИсточника КАК СсылкаИсточника,
	|	ТаблицаСсылок.ИдентификаторИсточника КАК ИдентификаторИсточника,
	|	ТаблицаСсылок.ТипИсточника КАК ТипИсточника
	|ПОМЕСТИТЬ ТаблицаСсылок
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторИсточника,
	|	ТипИсточника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСсылок.СсылкаИсточника КАК СсылкаИсточника,
	|	ТаблицаСсылок.ИдентификаторИсточника КАК ИдентификаторИсточника,
	|	ТаблицаСсылок.ТипИсточника КАК ТипИсточника,
	|	СоответсвияОбъектовОбмена.СсылкаПриемника КАК СсылкаПриемника
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоответсвияОбъектовОбмена КАК СоответсвияОбъектовОбмена
	|		ПО ТаблицаСсылок.ИдентификаторИсточника = СоответсвияОбъектовОбмена.ИдентификаторИсточника
	|			И ТаблицаСсылок.ТипИсточника = СоответсвияОбъектовОбмена.ТипИсточника
	|			И (СоответсвияОбъектовОбмена.УзелОбмена = &УзелОбмена)";
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСоответствий);
	Запрос.УстановитьПараметр("УзелОбмена", Узел);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ЗаполнитьТаблицуСоответствий()
 
Функция ПрочитатьЗначение(ОписаниеЗначения,
						ТаблицаРеквизитов,
						ИмяРеквизита,
						ТаблицаСоответствий,
						Знач ИмяТаблицы = "",
						Правила,
						ДанныеОбъекта,
						Отказ = Ложь)

	Значение = Неопределено;
	
	ЗначениеПолучено = Ложь;
	
	ДанныеОбъекта.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	ТекущееПравило = Правила.ТекущееПравило;
	
	Если ТипЗнч(ОписаниеЗначения) = Тип("ТаблицаЗначений") Тогда
		
	    ДанныеОбъекта.Вставить("Значение", ПрочитатьТаблицу(ОписаниеЗначения,
															ИмяРеквизита,
															СкопироватьСтруктуру(ДанныеОбъекта),
															ТаблицаРеквизитов,
															ТаблицаСоответствий,
															Правила));
	
	ИначеЕсли ОписаниеЗначения = Неопределено
			  Или ЭтоОписаниеЗначения(ОписаниеЗначения) Тогда
			  
		ЗаполнитьЗначениеИзОписания(ИмяРеквизита,
									ОписаниеЗначения,
									ТаблицаРеквизитов,
									ДанныеОбъекта,
									Правила,
									ТекущееПравило,
									ТаблицаСоответствий,
									ИмяТаблицы);
		 
	
	ИначеЕсли ТипЗнч(ОписаниеЗначения) = Тип("Структура") Тогда  
		
		ДанныеОбъекта.Вставить("Значение", Новый Структура);  
		
		Для каждого ОписаниеПодчиненногоЗначения Из ОписаниеЗначения Цикл
			
			ИмяПодчиненногоРеквизита = ОписаниеПодчиненногоЗначения.Ключ;
			
			Правила.ТекущееПравило = ПолучитьСтрокуПравилКонвертации(ТекущееПравило, ИмяПодчиненногоРеквизита, "ОбъектПриемник");
			
			ИмяРеквизитаЗначения = ПолучитьИмяРеквизитаИсточника(Правила.ТекущееПравило, ИмяПодчиненногоРеквизита);
			
			ОтказВЗаписи = Ложь;
			
			ЗначениеПоля = ПрочитатьЗначение(ОписаниеПодчиненногоЗначения.Значение,
										ТаблицаРеквизитов,
										ИмяРеквизитаЗначения,
										ТаблицаСоответствий,
										,
										Правила,
										СкопироватьСтруктуру(ДанныеОбъекта),
										ОтказВЗаписи);
										
			Если Не ОтказВЗаписи Тогда
		
				ДанныеОбъекта.Значение.Вставить(ИмяРеквизитаЗначения, ЗначениеПоля);
		
			КонецЕсли;
			
		КонецЦикла; 
	
	КонецЕсли; 
		
	Значение = ДанныеОбъекта.Значение;
	
	ДанныеОбъекта.Удалить("ИмяРеквизита");
	ДанныеОбъекта.Удалить("Значение");
	
	Правила.ТекущееПравило = ТекущееПравило;
	
	Возврат Значение;
	
КонецФункции // ПрочитатьЗначение()

Процедура ЗаполнитьЗначениеИзОписания(ИмяРеквизита,
									ОписаниеЗначения,
									ТаблицаРеквизитов,
									ДанныеОбъекта,
									Правила,
									ТекущееПравило,
									ТаблицаСоответствий,
									ИмяТаблицы = "")
	
	ЗаполнитьТипXMLВДанныхОбъекта(ОписаниеЗначения, ДанныеОбъекта, Правила);
	
	ЗаполнитьТипЗначенияВДанныхОбъекта(ДанныеОбъекта, ТаблицаРеквизитов, ИмяРеквизита, ИмяТаблицы);
	
	ДанныеОбъекта.Вставить("Значение", Неопределено);
	
	Если ОписаниеЗначения = Неопределено Тогда
	
		ДанныеОбъекта.Значение = ПолучитьПустоеЗначение(ДанныеОбъекта.ТипЗначения); 
		
	Иначе 
		
		ЗаполнитьЗначениеВДанныхОбъекта(ОписаниеЗначения.Значение, ДанныеОбъекта, ТекущееПравило, Правила, ТаблицаСоответствий);
	
	КонецЕсли; 

КонецПроцедуры // ПолучитьЗначениеИзОписания()

Процедура ЗаполнитьТипXMLВДанныхОбъекта(ОписаниеЗначения, ДанныеОбъекта, Правила)

	Если ТипЗнч(ОписаниеЗначения) = Тип("Структура") Тогда
	
		ТипСтрокой = КонвертироватьТипОбъекта(Правила, ОписаниеЗначения.Тип);
		
	Иначе
		
		ТипСтрокой = Неопределено;
	
	КонецЕсли; 
	
	ДанныеОбъекта.Вставить("ТипСтрокой", ТипСтрокой);
	
КонецПроцедуры

Процедура ЗаполнитьТипЗначенияВДанныхОбъекта(ДанныеОбъекта, ТаблицаРеквизитов = Неопределено, ИмяРеквизита = "", ИмяТаблицы = "")

	Если ДанныеОбъекта.ТипСтрокой <> Неопределено Тогда
	
		ТипЗначения = ПолучитьТипЗначения(ДанныеОбъекта.ТипСтрокой);
		
	Иначе 
		
		ТипЗначения = Неопределено;
	
	КонецЕсли; 
	
	Если ТипЗначения = Неопределено
		 И ТаблицаРеквизитов <> Неопределено Тогда
	
		ТипЗначения = ПолучитьТипЗначенияИзТаблицыРеквизитов(ТаблицаРеквизитов, ИмяРеквизита, ИмяТаблицы);
	
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТипЗначения", ТипЗначения);	

КонецПроцедуры

Процедура ЗаполнитьЗначениеВДанныхОбъекта(Значение, ДанныеОбъекта, ТекущееПравило, Правила, ТаблицаСоответствий)

	ДанныеОбъекта.Вставить("ЗначениеXML", Значение);
			
	Отказ = Ложь;
	
	Попытка
	
		Если ТекущееПравило <> Неопределено
			 И ЗначениеЗаполнено(ТекущееПравило.АлгоритмОбратногоПреобразования) Тогда
			 
			ВыполнитьОбработчикКонвертации(ДанныеОбъекта,
											Правила.Обработчики,
											ТекущееПравило.АлгоритмОбратногоПреобразования,
											Отказ); 
		
		КонецЕсли; 
	
	Исключение
	
	КонецПопытки;
	
	Если Отказ Тогда
		
		ДанныеОбъекта.Значение = Неопределено;
		
	Иначе 
		
		ДобавитьСоответствие = Ложь;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.Значение) Тогда
			
			ДобавитьСоответствие = Истина;
			
		ИначеЕсли ДанныеОбъекта.ТипЗначения = Неопределено Тогда
			
			ДанныеОбъекта.Значение = ДанныеОбъекта.ЗначениеXML; // не удалось определить тип значения, записываем данные как есть.
			
		Иначе 
			
			Попытка
			
				ДанныеОбъекта.Значение = ОбработатьЗначениеПередПомещением(XMLЗначение(ДанныеОбъекта.ТипЗначения, ДанныеОбъекта.ЗначениеXML),
																			ТаблицаСоответствий);
				
				ЗначениеПолучено = Истина;
				
				ДобавитьСоответствие = Истина;
							
			Исключение
				
				// Ошибка чтения значения
			
			КонецПопытки; 
		
		КонецЕсли;
		
		Если ДобавитьСоответствие
			 И ЭтоОбъектныйТип(ДанныеОбъекта.ТипЗначения)
			 И ЗначениеЗаполнено(ДанныеОбъекта.Значение)
			 И Не БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ДанныеОбъекта.ТипЗначения) Тогда
			
			ДобавитьСсылкуВТаблицуСоответствий(ТаблицаСоответствий,
												ДанныеОбъекта.Значение);
	
		КонецЕсли;
	
	КонецЕсли; 
	
	ДанныеОбъекта.Удалить("ЗначениеXML");
	ДанныеОбъекта.Удалить("ТипСтрокой");
	ДанныеОбъекта.Удалить("ТипЗначения");

КонецПроцедуры
  
Функция СкопироватьСтруктуру(Структура)

	Результат = Новый Структура;
	
	Для каждого КлючЗначение Из Структура Цикл
	
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // СкопироватьСтруктуру()
 
Функция КонвертироватьТипОбъекта(Правила, СтрокаТипа)
	
	Если Правила.ТекущееПравило <> Неопределено
		 И ЗначениеЗаполнено(Правила.ТекущееПравило.ТипИсточник) Тогда
	
		Возврат Правила.ТекущееПравило.ТипИсточник;
	
	КонецЕсли; 
	
	КонвертированныйТип = ПолучитьСоответствиеТипа(Правила.СоответствиеТипов, СтрокаТипа);
	
	Если КонвертированныйТип = Неопределено Тогда
	
		КонвертированныйТип = СтрокаТипа;
	
	КонецЕсли; 
	
	Возврат КонвертированныйТип;

КонецФункции // КонвертироватьТипОбъекта()
 
Функция ПрочитатьТаблицу(ОписаниеЗначения,
						ИмяТаблицы,
						ДанныеОбъекта,
						ТаблицаРеквизитов,
						ТаблицаСоответствий,
						Правила)
	
	Таблица = Новый ТаблицаЗначений;
	ДанныеОбъекта.Вставить("ИмяТаблицы", ИмяТаблицы);
	ДанныеОбъекта.Вставить("ТаблицаДанных", Таблица);
	ДанныеОбъекта.Вставить("СтрокаТаблицы", Неопределено);
	
	Отказ = Ложь;
	
	ТекущееПравило = Правила.ТекущееПравило;
	
	СоответствиеКолонок = Новый Соответствие;
	
	Для каждого СтрокаИсточник Из ОписаниеЗначения Цикл
		
		ДанныеОбъекта.Вставить("СтрокаИсточник", СтрокаИсточник);
		
		Если ТекущееПравило <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ТекущееПравило.АлгоритмПриЗагрузкеСтроки) Тогда
			
				ВыполнитьОбработчикКонвертации(ДанныеОбъекта,
												Правила.Обработчики,
												ТекущееПравило.АлгоритмПриЗагрузкеСтроки,
												Отказ);
			
			КонецЕсли; 
		
		КонецЕсли;
		
		Если Отказ Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ДанныеОбъекта.СтрокаТаблицы = Таблица.Добавить();
		
		Для каждого Колонка Из ОписаниеЗначения.Колонки Цикл
			
			ИмяРеквизитаИсточника = Колонка.Имя;
			
			Правила.ТекущееПравило = ПолучитьСтрокуПравилКонвертации(ТекущееПравило, ИмяРеквизитаИсточника, "ОбъектПриемник");
			
			ИмяРеквизита = ПолучитьИмяРеквизитаИсточника(Правила.ТекущееПравило,
														ИмяРеквизитаИсточника);
			
			Если Таблица.Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
			
				Таблица.Колонки.Добавить(ИмяРеквизита);
			
			КонецЕсли;
			
			ОтказВЗаписи = Ложь;
			
			ЗначениеЯчейки = ПрочитатьЗначение(СтрокаИсточник[ИмяРеквизитаИсточника],
												ТаблицаРеквизитов,
												ИмяРеквизита,
												ТаблицаСоответствий,
												?(ИмяТаблицы = "Records", "", ИмяТаблицы),
												Правила,
												ДанныеОбъекта,
												ОтказВЗаписи);
																
			Если Не ОтказВЗаписи Тогда
			
				ДанныеОбъекта.СтрокаТаблицы[ИмяРеквизита] = ЗначениеЯчейки;
			
			КонецЕсли;
	
		КонецЦикла; 
	
	КонецЦикла; 
	
	Правила.ТекущееПравило = ТекущееПравило;
	
	Возврат Таблица;

КонецФункции // ПрочитатьТаблицу()
 
Процедура ВыполнитьОбработчикКонвертации(ДанныеОбъекта, Обработчики, ИмяОбработчика, Отказ)

	Попытка
	
		Выполнить СтрШаблон("Обработчики.%1(ДанныеОбъекта, Отказ)", ИмяОбработчика);
		
	Исключение
		
		ДобавитьОшибкуКонвертацииВЖурнал(ДанныеОбъекта,
								ИмяОбработчика,
								ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

Функция СформироватьТаблицуРеквизитовОбъекта(ОбъектМетаданных)
	
	ТаблицаРеквизитов = ТаблицаРеквизитовОбъекта();
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		 Или Метаданные.Документы.Содержит(ОбъектМетаданных) 
		 Или Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		 Или Метаданные.Задачи.Содержит(ОбъектМетаданных)
		 Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		 Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
	
		ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов,
											ОбъектМетаданных.СтандартныеРеквизиты,
											"СтандартныйРеквизит");
		ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов,
											ОбъектМетаданных.Реквизиты,
											"Реквизит");
											
		Если Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		
			ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов,
												ОбъектМетаданных.РеквизитыАдресации,
												"РеквизитАдресации");	
		
		КонецЕсли; 
											
		Для каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
			ДобавитьРеквизитыТабличнойЧастиВТаблицу(ТаблицаРеквизитов,
													ТабличнаяЧасть);
		
		КонецЦикла; 
	
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		 Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)  Тогда 
		 
		ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов,
											ОбъектМетаданных.СтандартныеРеквизиты,
											"СтандартныйРеквизит");
		ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов,
											ОбъектМетаданных.Измерения,
											"Измерение");
		ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов,
											ОбъектМетаданных.Ресурсы,
											"Ресурс");
		ДобавитьКоллекциюРеквизитовВТаблицу(ТаблицаРеквизитов,
											ОбъектМетаданных.Реквизиты,
											"Реквизит");
											
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда 
				
		ОписаниеРеквизита = Новый Структура("Имя, Тип", "Value", ОбъектМетаданных.Тип);
		ДобавитьОписаниеРеквизитаВТаблицу(ТаблицаРеквизитов, ОписаниеРеквизита, "Реквизит");
	
	КонецЕсли;
										
	Возврат ТаблицаРеквизитов;									

КонецФункции // СформироватьТаблицуРеквизитовОбъекта()

Функция ПолучитьРегламентноеЗаданиеСинхонизации()

	УстановитьПривилегированныйРежим(Истина);
	Возврат РегламентныеЗадания.НайтиПредопределенное("CRM_СинхронизацияС_iCRM");

КонецФункции // ПолучитьРегламентноеЗаданиеСинхонизации()

функция ПолучитьПравилаКонвертацииОбъектов()

	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		МакетПравил = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("CRM_ПравилаКонвертации");
		
	Иначе 
		
		МакетПравил = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("УТ_ПравилаКонвертации");
	
	КонецЕсли; 
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(МакетПравил.ПолучитьТекст());
	
	Построитель = Новый ПостроительDOM;
	
	ДокументDOM = Построитель.Прочитать(ЧтениеXML);
	
	ОписаниеПравил = Новый Структура;
	
	СформироватьОписаниеПравилОбмена(ДокументDOM, ОписаниеПравил);
	
	ЧтениеXML.Закрыть();
	
	Возврат ОписаниеПравил;
	
КонецФункции
 
Процедура СформироватьОписаниеПравилОбмена(ДокументDOM, ОписаниеПравил)

	Для каждого Узел Из ДокументDOM.ДочерниеУзлы Цикл
	
		Если Узел.ИмяЭлемента = "ПравилаКонвертации" Тогда
			
			ОписаниеПравил.Вставить("ПравилаКонвертации", ДеревоПравилКонвертации());
			
			ПрочестьПравилаКонвертации(Узел, ОписаниеПравил.ПравилаКонвертации);
			
		Иначе 
			
			СформироватьОписаниеПравилОбмена(Узел, ОписаниеПравил);
			
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

Функция ДеревоПравилКонвертации()
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ОбъектИсточник");
	Дерево.Колонки.Добавить("ОбъектПриемник");
	Дерево.Колонки.Добавить("ТипИсточник");
	Дерево.Колонки.Добавить("ТипПриемник");
	Дерево.Колонки.Добавить("АлгоритмПриЗагрузке");
	Дерево.Колонки.Добавить("АлгоритмПриВыгрузке");
	Дерево.Колонки.Добавить("АлгоритмПриЗагрузкеСтроки");
	Дерево.Колонки.Добавить("АлгоритмПриВыгрузкеСтроки");
	Дерево.Колонки.Добавить("АлгоритмПреобразования");
	Дерево.Колонки.Добавить("АлгоритмОбратногоПреобразования");
	
	Возврат Дерево;

КонецФункции // ДеревоПравилКонвертации()
 
Процедура ПрочестьПравилаКонвертации(УзелДокумента, СтрокаДерева)

	Для каждого Узел Из УзелДокумента.ДочерниеУзлы Цикл
	
		Если Узел.ИмяЭлемента = "Правило" Тогда
			
			ПодстрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ПрочестьПравилаКонвертации(Узел, ПодстрокаДерева);
			
		ИначеЕсли Узел.ИмяЭлемента = "Правила" Тогда 
			
			ПрочестьПравилаКонвертации(Узел, СтрокаДерева);
			
		ИначеЕсли Узел.ИмяЭлемента = "ИмяИсточник" Тогда
			
			СтрокаДерева.ОбъектИсточник = Узел.ТекстовоеСодержимое;
			
		ИначеЕсли Узел.ИмяЭлемента = "ИмяПриемник" Тогда
			
			СтрокаДерева.ОбъектПриемник = Узел.ТекстовоеСодержимое;
			
		ИначеЕсли Узел.ИмяЭлемента = "ТипИсточник" Тогда
			
			СтрокаДерева.ТипИсточник = Узел.ТекстовоеСодержимое;
			
		ИначеЕсли Узел.ИмяЭлемента = "ТипПриемник" Тогда
			
			СтрокаДерева.ТипПриемник = Узел.ТекстовоеСодержимое;
			
		ИначеЕсли Узел.ИмяЭлемента = "АлгоритмПреобразования" Тогда
			
			СтрокаДерева.АлгоритмПреобразования = Узел.ТекстовоеСодержимое;
			
		ИначеЕсли Узел.ИмяЭлемента = "АлгоритмОбратногоПреобразования" Тогда
			
			СтрокаДерева.АлгоритмОбратногоПреобразования = Узел.ТекстовоеСодержимое;
			
		ИначеЕсли Узел.ИмяЭлемента = "АлгоритмПриЗагрузкеСтроки" Тогда
			
			СтрокаДерева.АлгоритмПриВыгрузкеСтроки = Узел.ТекстовоеСодержимое;
			
		ИначеЕсли Узел.ИмяЭлемента = "АлгоритмПриВыгрузкеСтроки" Тогда
			
			СтрокаДерева.АлгоритмПриВыгрузкеСтроки = Узел.ТекстовоеСодержимое;			
			
		ИначеЕсли Узел.ИмяЭлемента = "АлгоритмПриЗагрузке" Тогда
			
			СтрокаДерева.АлгоритмПриЗагрузке = Узел.ТекстовоеСодержимое;
			
		ИначеЕсли Узел.ИмяЭлемента = "АлгоритмПриВыгрузке" Тогда
			
			СтрокаДерева.АлгоритмПриВыгрузке = Узел.ТекстовоеСодержимое;
			
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

Функция ЭтоОбъектныйТип(Тип) Экспорт 
	
	ОбъектМД = Метаданные.НайтиПоТипу(Тип);
	
	Если ОбъектМД = Неопределено Тогда
	
		Возврат Ложь;
	
	КонецЕсли; 
	
	Возврат Метаданные.Справочники.Содержит(ОбъектМД)
			Или Метаданные.Документы.Содержит(ОбъектМД)
			Или Метаданные.ПланыОбмена.Содержит(ОбъектМД)
			Или Метаданные.Задачи.Содержит(ОбъектМД)
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМД)
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМД);

КонецФункции // ЭтоСсылочныйТип()

// Убирает лишние символы и оставляем только числа
// Параметры:
//     Строка
// Возвращаемое значение:
//     Строка
Функция ВернутьТолькоЧисла(Строка) Экспорт
	
	СтрокаИзЧисел = "";
	Для ТекПозиция = 1 По СтрДлина(Строка) Цикл 
		
		ТекСимвол = Сред(Строка,ТекПозиция,1);
		
		Если ТекСимвол = "0" Или ТекСимвол = "1" Или ТекСимвол = "2"
			Или ТекСимвол = "3" Или ТекСимвол = "4" Или ТекСимвол = "5"
			Или ТекСимвол = "6" Или ТекСимвол = "7" Или ТекСимвол = "8"
			Или ТекСимвол = "9" Тогда   
			
			СтрокаИзЧисел = СтрокаИзЧисел + ТекСимвол;   
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат СтрокаИзЧисел;
	
КонецФункции

Процедура СоздатьЗаписьОтправкиСоответствия(Узел, ОбъектСсылка)

	УстановитьФлагОтправкиСоответствия(Узел, ОбъектСсылка);

КонецПроцедуры

Процедура УстановитьФлагОтправкиСоответствия(Узел, ОбъектСсылка, Отправлен = Неопределено) Экспорт
	
	Если Не ОбъектПодлежитСинхронизации(ОбъектСсылка) Тогда
	
		Возврат;
	
	КонецЕсли; 

 	Запись = РегистрыСведений.CRM_ОтправленныеСоответствия.СоздатьМенеджерЗаписи();
	Запись.УзелОбмена = Узел;
	Запись.Объект = ОбъектСсылка;
	
	Если Отправлен <> Неопределено Тогда
	
		Запись.Отправлен = Отправлен; 
	
	Иначе
	
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			
			Возврат;
			
		Иначе 
			
			Запись.УзелОбмена = Узел;
			Запись.Объект = ОбъектСсылка;
	
		КонецЕсли;
	
	КонецЕсли;  
	
	Запись.Записать(Истина);
	
КонецПроцедуры

Процедура ЗарегистрироватьСозданныеСоответствия(Узел)  Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтправленныеСоответствия.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.CRM_ОтправленныеСоответствия КАК ОтправленныеСоответствия
	|ГДЕ
	|	ОтправленныеСоответствия.УзелОбмена = &УзелОбмена
	|	И НЕ ОтправленныеСоответствия.Отправлен";
	
	Запрос.УстановитьПараметр("УзелОбмена", Узел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
	    ОбменДаннымиСобытия.ЗарегистрироватьИзмененияДанных(Узел, Выборка.Объект);
		//ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Объект);
	
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьСтрокуПравилКонвертации(ПравилаКонвертации, ИмяОбъекта, ПолеПоиска = "ОбъектИсточник")

	Если ПравилаКонвертации = Неопределено Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	Возврат НайтиПравилоПоСтруктуре(ПравилаКонвертации, СтруктураПоискаПравил(ПолеПоиска, ИмяОбъекта));

КонецФункции // ПолучитьСтрокуПравилКонвертацииОбъекта()

Функция НайтиПравилоПоСтруктуре(ПравилаКонвертации, СтруктураПоискаПравил)

	Строки = ПолучитьСтрокиПравил(ПравилаКонвертации, СтруктураПоискаПравил); 
	
	Правило = Неопределено;
	
	Если Строки.Количество() > 0 Тогда
	
		Правило = Строки[0];
	
	КонецЕсли; 
	
	Возврат Правило;

КонецФункции // НайтиПравилоПоСтруктуре()
 
Функция СтруктураПоискаПравил(ПолеПоиска, ИмяОбъекта)

	Возврат Новый Структура(ПолеПоиска, ИмяОбъекта); 

КонецФункции // СтруктураПоискаПравил()
 
Функция ПолучитьСтрокиПравил(ПравилаКонвертации, СтруктураПоиска)
	
	Возврат ПравилаКонвертации.Строки.НайтиСтроки(СтруктураПоиска, Ложь);

КонецФункции // ПолучитьСтрокиПравил()

Процедура СинхронизацияiCRMРегистрацияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда Возврат КонецЕсли;
	Если НЕ Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав.Содержит(Источник.Метаданные()) Тогда Возврат КонецЕсли;
	Если ТипЗНЧ(Источник) = Тип("ДокументОбъект.CRM_Интерес") И Источник.Ответственный <> Источник.Ссылка.Ответственный Тогда
		УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоРеквизиту("Пользователь", Источник.Ответственный);
		Если НЕ УзелОбмена.Пустая() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_Взаимодействие.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
			|ГДЕ
			|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
			|	И (CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.ВРаботе)
			|			ИЛИ CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Запланировано))
			|	И НЕ CRM_Взаимодействие.ПометкаУдаления";
			Запрос.УстановитьПараметр("ДокументОснование", Источник.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Ответственный", Источник.Метаданные()) Тогда
		Если Источник.Ответственный <> Источник.Ссылка.Ответственный И НЕ Источник.Ссылка.Пустая() Тогда
			УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоРеквизиту("Пользователь", Источник.Ответственный);	
			Если НЕ УзелОбмена.Пустая() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
			Иначе	
				Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
			КонецЕсли;
			УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоРеквизиту("Пользователь", Источник.Ссылка.Ответственный);	
			Если НЕ УзелОбмена.Пустая() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
			Иначе	
				Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
			КонецЕсли;
		Иначе	
			Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
		КонецЕсли;	
	ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Менеджер", Источник.Метаданные()) Тогда
		Если Источник.Менеджер <> Источник.Ссылка.Менеджер И НЕ Источник.Ссылка.Пустая() Тогда
			УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоРеквизиту("Пользователь", Источник.Менеджер);	
			Если НЕ УзелОбмена.Пустая() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
			Иначе	
				Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
			КонецЕсли;
			УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоРеквизиту("Пользователь", Источник.Ссылка.Менеджер);	
			Если НЕ УзелОбмена.Пустая() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
			Иначе	
				Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
			КонецЕсли;
		Иначе	
			Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
		КонецЕсли;
	Иначе	
		Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
	КонецЕсли;
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("CRM_СинхронизацияСМобильнымПриложениемНовый", Источник, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура CRM_СинхронизацияiCRMРегистрацияРегистрыПередЗаписью(Источник, Отказ, Замещение) Экспорт
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда Возврат КонецЕсли;
	Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
	Если НЕ Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав.Содержит(Источник.Метаданные()) Тогда Возврат КонецЕсли;
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("CRM_СинхронизацияСМобильнымПриложениемНовый", Источник, Отказ, Замещение);
КонецПроцедуры

Процедура CRM_СинхронизацияiCRMРегистрацияКонстантыПередЗаписью(Источник, Отказ) Экспорт
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда Возврат КонецЕсли;
	Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
	Если НЕ Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав.Содержит(Источник.Метаданные()) Тогда Возврат КонецЕсли;
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("CRM_СинхронизацияСМобильнымПриложениемНовый", Источник, Отказ);
КонецПроцедуры

Процедура CRM_СинхронизацияiCRMРегистрацияПередЗаписью(Источник, Отказ) Экспорт
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда Возврат КонецЕсли;
	Если НЕ Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав.Содержит(Источник.Метаданные()) Тогда Возврат КонецЕсли;
	Если ТипЗНЧ(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") И Источник.Исполнитель <> Источник.Ссылка.Исполнитель Тогда
		УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоРеквизиту("Пользователь", Источник.Ссылка.Исполнитель);
		Если НЕ УзелОбмена.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		Иначе	
			Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
		КонецЕсли;
		УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоРеквизиту("Пользователь", Источник.Исполнитель);
		Если НЕ УзелОбмена.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		Иначе	
			Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
		КонецЕсли;
	Иначе
		Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("CRM_СинхронизацияСМобильнымПриложениемНовый", Источник, Отказ);
КонецПроцедуры


