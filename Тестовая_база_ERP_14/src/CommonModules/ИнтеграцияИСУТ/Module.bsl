// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

// Возвращяет список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
// 
// Параметры:
// 	Товары - ДанныеФормыКоллекция - ТЧ формы документа.
// Возвращаемое значение:
// 	СписокЗначений - список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
Функция ВидыПродукцииВТоварах(Товары) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Номенклатура.ТабачнаяПродукция    КАК ТабачнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.АлкогольнаяПродукция Тогда
			Если Результат.НайтиПоЗначению(Перечисления.ВидыПродукцииИС.Алкогольная) = Неопределено Тогда
				
				Результат.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная,
					СинонимПеречисления(Перечисления.ВидыПродукцииИС.Алкогольная));
					
			КонецЕсли;
		ИначеЕсли Выборка.ТабачнаяПродукция Тогда
			Если Результат.НайтиПоЗначению(Перечисления.ВидыПродукцииИС.Табачная) = Неопределено Тогда
				
				Результат.Добавить(Перечисления.ВидыПродукцииИС.Табачная,
					СинонимПеречисления(Перечисления.ВидыПродукцииИС.Табачная));
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыПродукцииИС Цикл
			Результат.Добавить(ЗначениеПеречисления, СинонимПеречисления(ЗначениеПеречисления))
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответствие количество акцизной продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
// 
// Параметры:
// 	Объект - УправляемаяФорма - форма документа для проверки.
// 	Отказ - Булево - Отказ из вызывающего метода.
Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ) Экспорт
	
	Ошибки = Неопределено;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если СтрокаТовары.Номенклатура.ТабачнаяПродукция Тогда
			
			ОтборПоПолям = ИнтеграцияИСУТКлиентСервер.ПоляДляПоискаМаркированнойПродукции();
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
			
			СтрокиАкцизныхМарок = НайтиАкцизныеМаркиПоПолямПоиска(Объект, ОтборПоПолям);
			Если Не (СтрокиАкцизныхМарок.Количество() = СтрокаТовары.Количество) Тогда
				
				Шаблон = НСтр("ru = 'В строке %1 для %2 должно быть указано акцизных марок - %3, а указано - %4.';
								|en = 'There must be %3 excise stamps in line %1 for %2. Value specified: %4.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					СтрокаТовары.НомерСтроки,
					СтрокаТовары.Номенклатура,
					СтрокаТовары.Количество,
					СтрокиАкцизныхМарок.Количество());
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					"Объект.Товары[%1].Номенклатура",
					ТекстОшибки,
					"",
					СтрокаТовары.НомерСтроки-1);
	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

// Подбирает строки из ТЧ АкцизныеМарки, соответсвующие полям структуры ПараметрыПоиска
// 
// Параметры:
// 	Источник - УправляемаяФорма - Данные формы для поиска соответствия.
// 	ПараметрыПоиска - Структура - Описание:
// 	 * Серия - CatalogRef.СерииНоменклатуры - серия для отбора.
// 	 * Характеристика - CatalogRef.ХарактеристикиНоменклатуры - характеристика для отбора.
// 	 * Номенклатура - CatalogRef.Номенклатура - номенклатура для отбора.
// Возвращаемое значение:
// 	Массив - список Акцизных марок, подходящих по параметрам поиска.
Функция НайтиАкцизныеМаркиПоПолямПоиска(Источник, ПараметрыПоиска)
	
	Результат = Новый Массив();
	 
	МаркированныеТовары = ШтрихкодыУпаковок(Источник).МаркированныеТовары;
	Подходящие = МаркированныеТовары.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого Строка Из Подходящие Цикл
		Результат.Добавить(Строка.ШтрихкодУпаковки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Удаляет акцизные марки по набору полей: номенклатура/характеристика/серия.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ДанныеОтбора - Массив (Структура см. ИнтеграцияИСУТКлиентСервер.ПоляДляПоискаМаркированнойПродукции())
//  	- Список отборов для поиска удаляемых данных в ТЧ АкцизныеМарки.
//
Процедура УдалитьАкцизныеМаркиЧека(Форма, ДанныеОтбора, Отказ, ДеревоУпаковок = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок = Неопределено Тогда
		Ошибки = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Источник = Форма.Объект;
	Иначе
		Источник = Форма;
	КонецЕсли;
	
	Если ДеревоУпаковок = Неопределено Тогда
		ДеревоУпаковок = ШтрихкодыУпаковок(Источник).ДеревоУпаковок;
	КонецЕсли;
	
	ДанныеУдалены = Ложь;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Для Каждого СтрокаДанныхОтбора Из ДанныеОтбора Цикл
			
			ОтборСерии = Новый Структура("Серия", СтрокаДерева.Серия);
			СерииВТЧТовары = Истина;
			СтрокиСерий = Источник.Серии.НайтиСтроки(ОтборСерии);
			Если СтрокиСерий.Количество() > 0 Тогда
				СерииВТЧТовары = Ложь;
				Если СтрокиСерий[0].Количество - СтрокаДанныхОтбора.Количество <= 0 Тогда
					Источник.Серии.Удалить(СтрокиСерий[0]);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДерева.Номенклатура = СтрокаДанныхОтбора.Номенклатура
				И СтрокаДерева.Характеристика = СтрокаДанныхОтбора.Характеристика
				И Не (СерииВТЧТовары Или СтрокаДерева.Серия = СтрокаДанныхОтбора.Серия) Тогда
					
					СтрокиТЧ = СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(
						Источник.АкцизныеМарки,
						СтрокаДерева);
					
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Если СтрокаТЧ.АкцизнаяМарка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
							Источник.АкцизныеМарки.Удалить(СтрокаТЧ);
							ДанныеУдалены = Истина;
						Иначе
							Шаблон = НСтр("ru = 'Невозможно удалить строку %1 (%2), товар был добавлен в упаковке.';
											|en = 'Cannot delete the %1 (%2) line, goods were added in a package.'");
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								Шаблон,
								СтрокаДанныхОтбора.НомерСтроки,
								СтрокаДанныхОтбора.Номенклатура);
								
							ОшибкаЗафиксирована = Ложь;
							Если Ошибки <> Неопределено Тогда
								Для Каждого СтрокаОшибок Из Ошибки.СписокОшибок Цикл
									Если ТекстОшибки = СтрокаОшибок.ТекстДляОднойОшибки Тогда
										ОшибкаЗафиксирована = Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							Если Не ОшибкаЗафиксирована Тогда
								ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
									Ошибки,
									"Объект.Товары[%1].Номенклатура",
									ТекстОшибки,
									"",
									СтрокаДанныхОтбора.НомерСтроки-1);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Используйте подбор и проверку продукции, доступную по кнопке ""Акцизные марки"".';
							|en = 'Use selection and check of products available by the ""Excise stamps"" button.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если Не (ДанныеУдалены Или Отказ) Тогда
		Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
			УдалитьАкцизныеМаркиЧека(Форма, ДанныеОтбора, Отказ, СтрокаДерева);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет служебные реквизиты в табличной части "Товары"
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма
//  ИмяКолонкиКоличество - Строка - Имя колонки "Количество"
//
Процедура АкцизныеМаркиЗаполнитьСлужебныеРеквизиты(Форма, ИмяКолонкиКоличество = "Количество") Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Источник = Форма.Объект;
	Иначе
		Источник = Форма;
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из Источник.Товары Цикл
		
		Если СтрокаТоваров.Номенклатура.ТабачнаяПродукция Тогда
			ОтборПоПолям = ИнтеграцияИСУТКлиентСервер.ПоляДляПоискаМаркированнойПродукции();
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТоваров);
			СтрокиАкцизныхМарок = НайтиАкцизныеМаркиПоПолямПоиска(Источник, ОтборПоПолям);
			
			КоличествоАкцизныхМарок = СтрокиАкцизныхМарок.Количество();
			
			СтрокаТоваров.МаркируемаяПродукция =    1;
			СтрокаТоваров.КоличествоАкцизныхМарок = КоличествоАкцизныхМарок;
			
			АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(СтрокаТоваров, ИмяКолонкиКоличество);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШтрихкодыУпаковок(Источник) Экспорт
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
	ТаблицаШтрихкодов.Колонки.Добавить("АлкогольнаяПродукция",         Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("Справка2",                     Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("ОрганизацияЕГАИС",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	
	Для Каждого СтрокаТЧ Из Источник.АкцизныеМарки Цикл
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ.АкцизнаяМарка;
		НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ.ШтрихкодУпаковки;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
		|	ИсходныеДанные.Справка2                     КАК Справка2,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = Справочники.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкодыУпаковокПоДокументу(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса) Экспорт
	
	ОпределениеВидаПродукции =
	"	Выбор
	|		Когда Номенклатура.АлкогольнаяПродукция
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		Когда Номенклатура.ТабачнаяПродукция
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Табачная)
	|		Иначе Значение(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	Конец ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеВидаПродукции", ОпределениеВидаПродукции);
	
КонецПроцедуры

Процедура ОпределитьВидПродукцииТекстаЗапросаДереваУпаковок(ТекстЗапроса, УровнейВЗапросе) Экспорт
	
	Для Уровень = 0 По УровнейВЗапросе Цикл
		
		ОпределениеВидаПродукции = 
		"ВЫБОР
		|	КОГДА ДанныеУпаковок.УпаковкаУровень"+Уровень+".Номенклатура <> НЕОПРЕДЕЛЕНО
		|		ТОГДА ВЫБОР
		|			КОГДА ДанныеУпаковок.УпаковкаУровень"+Уровень+".Номенклатура.АлкогольнаяПродукция
		|				ТОГДА Значение(Перечисление.ВидыПродукцииИС.Алкогольная)
		|			КОГДА ДанныеУпаковок.УпаковкаУровень"+Уровень+".Номенклатура.ТабачнаяПродукция
		|				ТОГДА Значение(Перечисление.ВидыПродукцииИС.Табачная)
		|			КОНЕЦ
		|	КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеВидаПродукции" + Уровень , ОпределениеВидаПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	ШтрихкодыEAN = ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ЗначениеШтрихкодаEAN");
	ТекстЗапроса = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура   КАК Номенклатура,
	|	Представление(ШтрихкодыНоменклатуры.Номенклатура) КАК ПредставлениеНоменклатуры,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод       КАК ЗначениеШтрихкодаEAN,
	|	&ОпределениеВидаПродукции            КАК ВидПродукции
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В (&Штрихкоды)";
	
	ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Штрихкоды", ШтрихкодыEAN);
	
	ДанныеПоШтрихкодамEAN = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых (на любом уровне вложенности, 
//   в т.ч. частично) находится продукция требуемого вида
// 
// Параметры:
//   ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
// Возвращаемое значение:
//   Массив - Массив - подходящие элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
Функция ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции = Неопределено) Экспорт
	
	Если НЕ ШтрихкодыДляПроверки.Количество() Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	ПроверятьАлкогольную = Истина;
	ПроверятьТабачную    = Истина;
	
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		ПроверятьАлкогольную = (ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная)<>Неопределено);
		ПроверятьТабачную    = (ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная)<>Неопределено);
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ПроверятьАлкогольную = (ВидыПродукции=Перечисления.ВидыПродукцииИС.Алкогольная);
		ПроверятьТабачную    = (ВидыПродукции=Перечисления.ВидыПродукцииИС.Табачная);
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверятьАлкогольную", ПроверятьАлкогольную);
	Запрос.УстановитьПараметр("ПроверятьТабачную",    ПроверятьТабачную);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	    (&ПроверятьТабачную И ШтрихкодыУпаковок.Номенклатура.ТабачнаяПродукция)
	|	ИЛИ (&ПроверятьАлкогольную И ШтрихкодыУпаковок.Номенклатура.АлкогольнаяПродукция)
	|		КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСтрокиТоваровПоВидуПродукции(Товары, ВидПродукции) Экспорт
	
	ИмяПоляОтбора = XMLСтрока(ВидПродукции) + "Продукция";
	
	ОтборПоВидуПродукции = Новый Структура(ИмяПоляОтбора, 1);
	УдаляемыеСтроки = Товары.НайтиСтроки(ОтборПоВидуПродукции);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Товары.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиАкцизныхМарокПоВидуПродукции(АкцизныеМарки, ВидПродукции) Экспорт
	
	СписокАкцизныхМарокНаУдаление = ШтрихкодыСодержащиеВидыПродукции(АкцизныеМарки.Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка"), ВидПродукции);
	
	Для Каждого АкцизнаяМарка Из СписокАкцизныхМарокНаУдаление Цикл
		
		УдаляемыеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АкцизныеМарки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды) Экспорт

	Если ТипЗнч(Форма) <> Тип("УправляемаяФорма") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма.ПроверкаЗаполненияДокументов") Тогда

		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

			Возврат ОбработатьДанныеШтрихкодаДляОбщейФормыПроверкиЗаполненияДокументов(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);

		КонецЕсли;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработатьДанныеШтрихкодаДляОбщейФормыПроверкиЗаполненияДокументов(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)

	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);

	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	ПараметрыЗаполнения.ИмяКолонкиКоличество           = "КоличествоФакт";
	ПараметрыЗаполнения.ИмяКолонкиКоличествоУпаковок   = "КоличествоУпаковокФакт";

	ПараметрыПоискаСтатусаУказанияСерии = Новый Структура;
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);

	НайденныеСтроки = Форма.Товары.НайтиСтроки(ПараметрыПоискаСтатусаУказанияСерии);

	АлкогольнаяПродукция = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
	Справка2             = Неопределено;
	Если ДанныеШтрихкода.ВидыПродукции.Количество() > 0
		И ДанныеШтрихкода.ВидыПродукции[0] = Перечисления.ВидыПродукцииИС.Алкогольная Тогда

		АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		Справка2             = ДанныеШтрихкода.Справка2;
	КонецЕсли;

	Если НайденныеСтроки.Количество() > 0 Тогда

		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
			НайденныеСтроки[0].СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда

			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          ДанныеШтрихкода.Серия);

		Иначе

			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          Справочники.СерииНоменклатуры.ПустаяСсылка());

		КонецЕсли;

		РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
			Форма.Товары,
			ПараметрыОтбора,
			Неопределено,
			АлкогольнаяПродукция,
			ПараметрыЗаполнения);

		СтрокаТЧ                        = РезультатПоиска.ПолноеСоответствие;
		СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;

	Иначе

		СтрокаТЧ                        = Неопределено;
		СтрокиТЧДляУменьшенияКоличества = Неопределено;

	КонецЕсли;

	Если СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧ = Неопределено Тогда

		СтрокаТЧ = Форма.Товары.Добавить();
		СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = АлкогольнаяПродукция;
		СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
		СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
		СтрокаТЧ.Серия                = ДанныеШтрихкода.Серия;

		ПроверитьСериюРассчитатьСтатус = Новый Структура;
		ПроверитьСериюРассчитатьСтатус.Вставить("Склад",                  Форма.Склад);
		ПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыЗаполнения.ПараметрыУказанияСерий);

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);

		Если НЕ НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
			СтрокаТЧ.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
			СтрокаТЧ.Серия = Неопределено;
		КонецЕсли;

		АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

	ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧ <> Неопределено Тогда

		АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

	Иначе

		Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл

			Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда

				Если СтрокаТЧ = Неопределено Тогда

					СтрокаТЧ = СтрокаТЧДляУменьшенияКоличества;

					СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = АлкогольнаяПродукция;

				Иначе

					Форма.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);

					Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
					Если Индекс <> Неопределено Тогда
						ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
					КонецЕсли;

				КонецЕсли;

				АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

			Иначе

				СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);

				Если СтрокаТЧ = Неопределено Тогда

					СтрокаТЧ = Форма.Товары.Вставить(Форма.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");

					СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = АлкогольнаяПродукция;

					АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

				Иначе

					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

				КонецЕсли;

			КонецЕсли;

			Прервать;

		КонецЦикла;

	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;

	АкцизныеМаркиСтрокаТЧ = Форма.АкцизныеМарки.Добавить();
	АкцизныеМаркиСтрокаТЧ.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
	АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка       = ДанныеШтрихкода.ШтрихкодУпаковки;
	АкцизныеМаркиСтрокаТЧ.Справка2            = Справка2;

	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;

	Возврат Результат;

КонецФункции

Функция СинонимПеречисления(ЗначениеПеречисления)
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Синоним;
	
КонецФункции

Функция СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, Знач СтрокаДерева, СтрокиРезультат = Неопределено)
	
	Если СтрокиРезультат <> Неопределено Тогда
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Найденные = ТЧАкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", СтрокаДерева.ШтрихкодУпаковки));
	
	Если Найденные.Количество() > 0 Тогда
		СтрокиРезультат = Найденные;
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, СтрокаДерева.Родитель, СтрокиРезультат);
	
КонецФункции

#КонецОбласти