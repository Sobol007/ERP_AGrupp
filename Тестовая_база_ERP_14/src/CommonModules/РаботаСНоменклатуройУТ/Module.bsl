
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область АвтоподборНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования.
Процедура ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияПриИзменении.
Процедура ЗаполнитьМассивПолейСобытияПриИзменении(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	МассивПолей.Добавить("Штрихкод");
	МассивПолей.Добавить("ЕдиницаИзмерения");
	МассивПолей.Добавить("Артикул");
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеВидаНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьВидНоменклатуры.
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
	
	СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеЗаполнения.Тип, ТипНоменклатуры);
	
	Родитель = ДанныеЗаполнения.РодительИнформационнойБазы;
	
	СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеЗаполнения);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
		СтруктураДанных.Вставить("ГруппаДоступа", Константы.ГруппаДоступаНоменклатурыИзСервиса.Получить());
	КонецЕсли;
	
	СтруктураДанных.Вставить("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	СтруктураДанных.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураДанных.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	СтруктураДанных.Вставить("Родитель", Родитель);
	СтруктураДанных.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураДанных.Вставить("ЕдиницаДляОтчетов", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураДанных.Вставить("ИспользоватьХарактеристики", ДанныеЗаполнения.Характеристики.Идентификаторы.Количество() > 0);
	СтруктураДанных.Вставить("ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") и 
			НЕ ЗначениеЗаполнено(СтруктураДанных.ГруппаДоступа) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнена группа доступа для вида номенклатуры.
				|Необходимо в настройках создания номенклатуры выбрать группу доступа по умолчанию.';
				|en = 'Access group for product kind is not filled in.
				|Choose the default access group in product creation settings.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ВызватьИсключение НСтр("ru = 'Ошибка создания вида номенклатуры.';
									|en = 'An error occurred when creating product kind.'");;
	КонецЕсли;
	
	Справочники.ВидыНоменклатуры.СоздатьВидНоменклатуры(СтруктураДанных, ВидНоменклатурыСсылка);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту.
Процедура ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	Если ЯвляетсяРеквизитомХарактеристики Тогда
		НаборСвойствОбъект = ВидНоменклатуры.НаборСвойствХарактеристик.ПолучитьОбъект();	
	Иначе
		НаборСвойствОбъект = ВидНоменклатуры.НаборСвойств.ПолучитьОбъект();
	КонецЕсли;
	
	Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрокаРеквизита = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();	
		
		НоваяСтрокаРеквизита.Свойство = ДополнительныйРеквизит;
		
	КонецЦикла;
	
	НаборСвойствОбъект.Записать();
		
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьЗначениеРеквизита.
Процедура СоздатьОбновитьЗначениеРеквизита(ДополнительныйРеквизит, СтрокаДанных, ЗначениеРеквизитаСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаСсылка) Тогда
		ЗначениеОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
	Иначе		
		ЗначениеВБазе = РаботаСНоменклатурой.ЗначениеПоИдентификатору(ДополнительныйРеквизит, СтрокаДанных.Идентификатор);
		
		Если ЗначениеВБазе <> Неопределено Тогда
			ЗначениеРеквизитаСсылка = ЗначениеВБазе;
			Возврат;
		КонецЕсли;
		
		ЗначениеОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	КонецЕсли;
	
	ЗначениеОбъект.Владелец           = ДополнительныйРеквизит;
	ЗначениеОбъект.Наименование       = СтрокаДанных.Наименование;
	ЗначениеОбъект.ПолноеНаименование = СтрокаДанных.Наименование;
	ЗначениеОбъект.Записать();
	
	ЗначениеРеквизитаСсылка = ЗначениеОбъект.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьДополнительныйРеквизит.
Процедура СоздатьОбновитьДополнительныйРеквизит(ВидНоменклатуры, СтрокаДанных, РеквизитСсылка) Экспорт
	
	Если ЗначениеЗаполнено(РеквизитСсылка) Тогда
		РеквизитОбъект = РеквизитСсылка.ПолучитьОбъект();
	Иначе		
		РеквизитВБазе = РаботаСНоменклатурой.РеквизитПоИдентификатору(СтрокаДанных.Идентификатор);
		
		Если РеквизитВБазе <> Неопределено Тогда
			РеквизитСсылка = РеквизитВБазе;
			Возврат;
		КонецЕсли;
		
		РеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
					
		РеквизитОбъект.ТипЗначения 
			= РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
	КонецЕсли;
	
	НаборСвойств       = ВидНоменклатуры.НаборСвойств;
	УИД                = Новый УникальныйИдентификатор();
	СтрокаУИД          = СтрЗаменить(Строка(УИД), "-", "");
	ИмяРеквизита       = СтрокаДанных.Наименование + "_" + СтрокаУИД;
	НаименованиеНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Наименование");
	Наименование       = СтрокаДанных.Наименование + " (" + НаименованиеНабора + ")";
	
	РеквизитОбъект.Имя          = ИмяРеквизита;
	РеквизитОбъект.НаборСвойств = НаборСвойств;
	РеквизитОбъект.Доступен     = Истина;	
	РеквизитОбъект.Наименование = Наименование;
	РеквизитОбъект.Заголовок    = СтрокаДанных.Наименование;
	
	РеквизитОбъект.Записать();
	
	РеквизитСсылка = РеквизитОбъект.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды.
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	
	ЕдиницыИзмерения = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ДанныеПоШтрихкодам Цикл
		
		Если ЕдиницыИзмерения.Получить(ЭлементКоллекции.Номенклатура) = Неопределено Тогда
			ЕдиницыИзмерения.Вставить(ЭлементКоллекции.Номенклатура, 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКоллекции.Номенклатура, "ЕдиницаИзмерения"));
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Штрихкод.Установить(ЭлементКоллекции.Штрихкод);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура         = ЭлементКоллекции.Номенклатура;
		НоваяЗапись.Характеристика   = ЭлементКоллекции.Характеристика;
		НоваяЗапись.Штрихкод         = ЭлементКоллекции.Штрихкод;
		НоваяЗапись.Упаковка = ЕдиницыИзмерения.Получить(ЭлементКоллекции.Номенклатура);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории.
Процедура ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеКатегории, ДанныеВидаНоменклатуры, ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка наименования
	
	Если ДанныеВидаНоменклатуры.Наименование <> ДанныеКатегории.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеКатегории.Наименование, ДанныеВидаНоменклатуры.Наименование);
	КонецЕсли; 
	
	// Проверка ставки НДС
	
	СтавкаНДССервиса = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеКатегории.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеВидаНоменклатуры.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"СтавкаНДС", СтавкаНДССервиса, ДанныеВидаНоменклатуры.СтавкаНДС, НСтр("ru = 'Ставка НДС';
																					|en = 'VAT rate'"));
	КонецЕсли; 
	
	// Проверка типа номенклатуры
	
	ТипНоменклатурыСервиса = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеКатегории.Тип, ТипНоменклатурыСервиса);
	
	Если ДанныеВидаНоменклатуры.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ТипНоменклатуры", ТипНоменклатурыСервиса, ДанныеВидаНоменклатуры.ТипНоменклатуры, 
			НСтр("ru = 'Тип номенклатуры';
				|en = 'Product type'"),,НЕ ЗначениеЗаполнено(ДанныеВидаНоменклатуры.ТипНоменклатуры));
	КонецЕсли; 
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьГруппуВидовНоменклатуры.
Процедура СоздатьОбновитьГруппуВидовНоменклатуры(ДанныеЗаполнения, ГруппаВидовНоменклатурыСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ГруппаВидовНоменклатурыСсылка) Тогда
		НоваяГруппа = ГруппаВидовНоменклатурыСсылка.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.ВидыНоменклатуры.СоздатьГруппу();
	КонецЕсли; 
	
	НоваяГруппа.Наименование = ДанныеЗаполнения.Наименование;
	НоваяГруппа.Родитель     = ДанныеЗаполнения.РодительИнформационнойБазы;
	
	НоваяГруппа.Записать();
	
	ГруппаВидовНоменклатурыСсылка = НоваяГруппа.Ссылка;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНоменклатуры

#Область ОсновныеРеквизиты

// См. РаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру.
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	// Подготовка данных
	
	СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	СсылкаНаЕдиницуИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.ЕдиницаИзмерения, СсылкаНаЕдиницуИзмерения);
	
	Вес = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.Вес.ЕдиницаИзмерения, Вес);
	
	Объем = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.Объем.ЕдиницаИзмерения, Объем);
	
	Длина = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.Длина.ЕдиницаИзмерения, Длина);
	
	Площадь = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.Площадь.ЕдиницаИзмерения, Площадь);
	
	// Заполнение объекта
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.Заполнить(Неопределено);
	
	НоменклатураОбъект.УстановитьНовыйКод();
	
	НаименованиеПолное = ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), 
		ДанныеЗаполнения.НаименованиеДляПечати, 
		ДанныеЗаполнения.Наименование);
		
	НоменклатураОбъект.Наименование = ДанныеЗаполнения.Наименование;
	НоменклатураОбъект.Артикул = ДанныеЗаполнения.Артикул;
	НоменклатураОбъект.НаименованиеПолное = НаименованиеПолное;
	НоменклатураОбъект.ЕдиницаИзмерения = СсылкаНаЕдиницуИзмерения;
	НоменклатураОбъект.СтавкаНДС = СтавкаНДС;
	НоменклатураОбъект.Описание = ДанныеЗаполнения.Описание;
	НоменклатураОбъект.ВидНоменклатуры = ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры;
	НоменклатураОбъект.ГруппаДоступа = Константы.ГруппаДоступаНоменклатурыИзСервиса.Получить();
	НоменклатураОбъект.ИспользованиеХарактеристик = НоменклатураОбъект.ВидНоменклатуры.ИспользованиеХарактеристик;
	
	Если ЗначениеЗаполнено(Вес) Тогда
		НоменклатураОбъект.ВесЕдиницаИзмерения = Вес;
		НоменклатураОбъект.ВесИспользовать = Истина;
		НоменклатураОбъект.ВесЗнаменатель = ДанныеЗаполнения.Вес.ЗнаменательКратности;
		НоменклатураОбъект.ВесЧислитель = ДанныеЗаполнения.Вес.ЧислительКратности;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объем) Тогда
		НоменклатураОбъект.ОбъемЕдиницаИзмерения = Объем;
		НоменклатураОбъект.ОбъемИспользовать = Истина;
		НоменклатураОбъект.ОбъемЗнаменатель = ДанныеЗаполнения.Объем.ЗнаменательКратности;
		НоменклатураОбъект.ОбъемЧислитель = ДанныеЗаполнения.Объем.ЧислительКратности;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Длина) Тогда
		НоменклатураОбъект.ДлинаЕдиницаИзмерения = Длина;
		НоменклатураОбъект.ДлинаИспользовать = Истина;
		НоменклатураОбъект.ДлинаЗнаменатель = ДанныеЗаполнения.Длина.ЗнаменательКратности;
		НоменклатураОбъект.ДлинаЧислитель = ДанныеЗаполнения.Длина.ЧислительКратности;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Площадь) Тогда
		НоменклатураОбъект.ПлощадьЕдиницаИзмерения = Площадь;
		НоменклатураОбъект.ПлощадьИспользовать = Истина;
		НоменклатураОбъект.ПлощадьЗнаменатель = ДанныеЗаполнения.Площадь.ЗнаменательКратности;
		НоменклатураОбъект.ПлощадьЧислитель = ДанныеЗаполнения.Площадь.ЧислительКратности;
	КонецЕсли;
	
	Для каждого Элемент Из ДанныеЗаполнения.Классификаторы Цикл
		Если СтрНайти(ВРег(Элемент.Наименование), "TNVED") <> 0 Тогда
			НоменклатураОбъект.КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиСоздатьЭлементКлассификатораТНВЭД(Элемент.Идентификатор);
		ИначеЕсли СтрНайти(ВРег(Элемент.Наименование), "OKPD2") <> 0 Тогда
			НоменклатураОбъект.КодОКПД2 = Справочники.КлассификаторОКПД2.НайтиСоздатьЭлементКлассификатораОКПД2(Элемент.Идентификатор);
		КонецЕсли;
	КонецЦикла; 
		
	Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ВидНоменклатуры) Тогда
		ТекстОшибки = НСтр("ru = 'Для номенклатуры <%1> не удалось подобрать вид номенклатуры.
		|В базе ни один вид номенклатуры не сопоставлен с категорией <%2> из сервиса 1С:Номенклатура.';
		|en = 'Cannot select product kind for the <%1> products.
		|No product kind in the base is mapped with the <%2> category from 1C:Products service.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения.Наименование, ДанныеЗаполнения.Категория.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ВызватьИсключение НСтр("ru = 'Ошибка создания номенклатуры.';
								|en = 'An error occurred when creating products.'");;
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	
	НоменклатураСсылка = НоменклатураОбъект.Ссылка;
	
	// Сохранение изображения
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Изображения) Тогда
		ПрикрепитьИзображения(НоменклатураСсылка, ДанныеЗаполнения.Изображения.ВыгрузитьКолонку("ИзображениеURL"));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Характеристики

// См. РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристику.
Процедура СоздатьХарактеристику(Характеристика, Владелец, ХарактеристикаСсылка) Экспорт
	
	НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	
	НоваяХарактеристика.Владелец = Владелец;
	НоваяХарактеристика.Наименование = Характеристика.Наименование;
	
	НоваяХарактеристика.Записать();
	
	ХарактеристикаСсылка = НоваяХарактеристика.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристикуСДополнительнымиРеквизитами.
Процедура СоздатьХарактеристикуСДополнительнымиРеквизитами(Характеристика, Владелец, ХарактеристикаСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	ЗаполнитьЗначенияРеквизитовХарактеристики(
		ЗначенияДополнительныхРеквизитов, 
		Характеристика);
	
	Если ЗначенияДополнительныхРеквизитов.Количество() <> 0 Тогда
		ХарактеристикаСсылка = Неопределено;
		СоздатьХарактеристику(Характеристика, Владелец, ХарактеристикаСсылка);
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ХарактеристикаСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРеквизиты

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьЗначенияДополнительныхРеквизитов.
Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения, НоменклатураСсылка) Экспорт 
		
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = ДополнительныйРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ДополнительныйРеквизит);
		
	КонецЦикла;
	
	Если ЗначенияДополнительныхРеквизитов.Количество() > 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры.
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	
	СоответствиеПолей = Новый Структура();
	
	СоответствиеПолей.Вставить("Наименование", "Наименование");
	СоответствиеПолей.Вставить("Артикул",      "Артикул");
	
	Для каждого ЭлементКоллекции Из СоответствиеПолей Цикл
		Если ДанныеНоменклатурыБазы[ЭлементКоллекции.Значение] <> ДанныеНоменклатурыСервиса[ЭлементКоллекции.Ключ] Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				ЭлементКоллекции.Значение, ДанныеНоменклатурыСервиса[ЭлементКоллекции.Ключ], ДанныеНоменклатурыБазы[ЭлементКоллекции.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеНоменклатурыБазы.НаименованиеПолное <> ДанныеНоменклатурыСервиса.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"НаименованиеПолное", ДанныеНоменклатурыСервиса.Наименование, ДанныеНоменклатурыБазы.НаименованиеПолное, НСтр("ru = 'Полное наименование';
																															|en = 'Full name'"));
	КонецЕсли;
	
	СтавкаНДССервиса = Перечисления.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеНоменклатурыСервиса.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеНоменклатурыБазы.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"СтавкаНДС", СтавкаНДССервиса, ДанныеНоменклатурыБазы.СтавкаНДС, НСтр("ru = 'Ставка НДС';
																					|en = 'VAT rate'"));		
	КонецЕсли; 
	
	ЕдиницаИзмеренияСервиса = ДанныеНоменклатурыСервиса.ЕдиницаИзмерения;
	
	Если Строка(ДанныеНоменклатурыБазы.ЕдиницаИзмерения) <> ЕдиницаИзмеренияСервиса.Наименование Тогда
		СоответствиеКодовОКЕИ = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(ЕдиницаИзмеренияСервиса.ОКЕИ);
		ЕдиницаИзмеренияВБазе = СоответствиеКодовОКЕИ[ЕдиницаИзмеренияСервиса.ОКЕИ];
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ЕдиницаИзмерения",  ЕдиницаИзмеренияВБазе, ДанныеНоменклатурыБазы.ЕдиницаИзмерения, НСтр("ru = 'Единица измерения';
																										|en = 'Unit of measure'"), ЕдиницаИзмеренияСервиса.Наименование);
	КонецЕсли;
	
	Если ДанныеНоменклатурыСервиса.Классификаторы.Количество() > 0 Тогда
		Для каждого Элемент Из ДанныеНоменклатурыСервиса.Классификаторы Цикл
			КодТНВЭД = ДанныеНоменклатурыБазы.КодТНВЭД;
			КодОКПД2 = ДанныеНоменклатурыБазы.КодОКПД2;
			Если СтрНайти(ВРег(Элемент.Наименование), "TNVED") <> 0 и Строка(КодТНВЭД) <> Элемент.Идентификатор Тогда
				КодТНВЭДСервис = Справочники.КлассификаторТНВЭД.НайтиСоздатьЭлементКлассификатораТНВЭД(Элемент.Идентификатор);
				РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, "КодТНВЭД", КодТНВЭДСервис, КодТНВЭД, НСтр("ru = 'ТНВЭД';
																																		|en = 'FEACN'"));
				
			ИначеЕсли СтрНайти(ВРег(Элемент.Наименование), "OKPD2") <> 0 и Строка(КодОКПД2) <> Элемент.Идентификатор Тогда
				КодОКПД2Сервис = Справочники.КлассификаторОКПД2.НайтиСоздатьЭлементКлассификатораОКПД2(Элемент.Идентификатор);		
				РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, "КодОКПД2", КодОКПД2Сервис, КодОКПД2, НСтр("ru = 'ОКПД2';
																																		|en = 'RNCPA2'"));
				
			КонецЕсли;
			
		КонецЦикла; 

	КонецЕсли;
	
	Если Строка(ДанныеНоменклатурыБазы.ВесЕдиницаИзмерения) <> ДанныеНоменклатурыСервиса.Вес.ЕдиницаИзмерения.Наименование Тогда
		
		СоответствиеКодовОКЕИ = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(ДанныеНоменклатурыСервиса.Вес.ЕдиницаИзмерения.ОКЕИ);
		ЕдиницаИзмеренияВБазе = СоответствиеКодовОКЕИ[ДанныеНоменклатурыСервиса.Вес.ЕдиницаИзмерения.ОКЕИ];
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ВесЕдиницаИзмерения", ЕдиницаИзмеренияВБазе, ДанныеНоменклатурыБазы.ВесЕдиницаИзмерения, НСтр("ru = 'Единица измерения веса';
																											|en = 'Weight unit of measure'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ВесЗнаменатель <> ДанныеНоменклатурыСервиса.Вес.ЗнаменательКратности Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ВесЗнаменатель", ДанныеНоменклатурыСервиса.Вес.ЗнаменательКратности, ДанныеНоменклатурыБазы.ВесЗнаменатель, НСтр("ru = 'Вес (знаменатель)';
																																|en = 'Weight (denominator)'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ВесЧислитель <> ДанныеНоменклатурыСервиса.Вес.ЧислительКратности Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ВесЧислитель", ДанныеНоменклатурыСервиса.Вес.ЧислительКратности, ДанныеНоменклатурыБазы.ВесЧислитель, НСтр("ru = 'Вес (числитель)';
																														|en = 'Weight (numerator)'"));
	КонецЕсли;
	
	Если Строка(ДанныеНоменклатурыБазы.ОбъемЕдиницаИзмерения) <> ДанныеНоменклатурыСервиса.Объем.ЕдиницаИзмерения.Наименование Тогда
		
		СоответствиеКодовОКЕИ = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(ДанныеНоменклатурыСервиса.Объем.ЕдиницаИзмерения.ОКЕИ);
		ЕдиницаИзмеренияВБазе = СоответствиеКодовОКЕИ[ДанныеНоменклатурыСервиса.Объем.ЕдиницаИзмерения.ОКЕИ];
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ОбъемЕдиницаИзмерения", ЕдиницаИзмеренияВБазе, ДанныеНоменклатурыБазы.ОбъемЕдиницаИзмерения, НСтр("ru = 'Единица измерения объема';
																												|en = 'Volume unit of measure'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ОбъемЗнаменатель <> ДанныеНоменклатурыСервиса.Объем.ЗнаменательКратности Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ОбъемЗнаменатель", ДанныеНоменклатурыСервиса.Объем.ЗнаменательКратности, ДанныеНоменклатурыБазы.ОбъемЗнаменатель, НСтр("ru = 'Объем (знаменатель)';
																																	|en = 'Volume (denominator)'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ОбъемЧислитель <> ДанныеНоменклатурыСервиса.Объем.ЧислительКратности Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ОбъемЧислитель", ДанныеНоменклатурыСервиса.Объем.ЧислительКратности, ДанныеНоменклатурыБазы.ОбъемЧислитель, НСтр("ru = 'Объем (числитель)';
																																|en = 'Volume (numerator)'"));
	КонецЕсли;
	
	Если Строка(ДанныеНоменклатурыБазы.ДлинаЕдиницаИзмерения) <> ДанныеНоменклатурыСервиса.Длина.ЕдиницаИзмерения.Наименование Тогда
		
		СоответствиеКодовОКЕИ = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(ДанныеНоменклатурыСервиса.Длина.ЕдиницаИзмерения.ОКЕИ);
		ЕдиницаИзмеренияВБазе = СоответствиеКодовОКЕИ[ДанныеНоменклатурыСервиса.Длина.ЕдиницаИзмерения.ОКЕИ];
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ДлинаЕдиницаИзмерения", ЕдиницаИзмеренияВБазе, ДанныеНоменклатурыБазы.ДлинаЕдиницаИзмерения, НСтр("ru = 'Единица измерения длины';
																												|en = 'Length unit of measure'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ДлинаЗнаменатель <> ДанныеНоменклатурыСервиса.Длина.ЗнаменательКратности Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ДлинаЗнаменатель", ДанныеНоменклатурыСервиса.Длина.ЗнаменательКратности, ДанныеНоменклатурыБазы.ДлинаЗнаменатель, НСтр("ru = 'Длина (знаменатель)';
																																	|en = 'Length (denominator)'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ДлинаЧислитель <> ДанныеНоменклатурыСервиса.Длина.ЧислительКратности Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ДлинаЧислитель", ДанныеНоменклатурыСервиса.Длина.ЧислительКратности, ДанныеНоменклатурыБазы.ДлинаЧислитель, НСтр("ru = 'Длина (числитель)';
																																|en = 'Length (numerator)'"));
	КонецЕсли;
	
	Если Строка(ДанныеНоменклатурыБазы.ПлощадьЕдиницаИзмерения) <> ДанныеНоменклатурыСервиса.Площадь.ЕдиницаИзмерения.Наименование Тогда
		
		СоответствиеКодовОКЕИ = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(ДанныеНоменклатурыСервиса.Площадь.ЕдиницаИзмерения.ОКЕИ);
		ЕдиницаИзмеренияВБазе = СоответствиеКодовОКЕИ[ДанныеНоменклатурыСервиса.Площадь.ЕдиницаИзмерения.ОКЕИ];
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ПлощадьЕдиницаИзмерения", ЕдиницаИзмеренияВБазе, ДанныеНоменклатурыБазы.ПлощадьЕдиницаИзмерения, НСтр("ru = 'Единица измерения площади';
																													|en = 'Area unit of measure'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ПлощадьЗнаменатель <> ДанныеНоменклатурыСервиса.Площадь.ЗнаменательКратности Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ПлощадьЗнаменатель", ДанныеНоменклатурыСервиса.Площадь.ЗнаменательКратности, ДанныеНоменклатурыБазы.ПлощадьЗнаменатель, НСтр("ru = 'Площадь (знаменатель)';
																																			|en = 'Area (denominator)'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ПлощадьЧислитель <> ДанныеНоменклатурыСервиса.Площадь.ЧислительКратности Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ПлощадьЧислитель", ДанныеНоменклатурыСервиса.Площадь.ЧислительКратности, ДанныеНоменклатурыБазы.ПлощадьЧислитель, НСтр("ru = 'Площадь (числитель)';
																																	|en = 'Area (numerator)'"));
	КонецЕсли;
	
	Если ДанныеНоменклатурыСервиса.ШтрихКоды.Количество() > 0 Тогда
		МассивШтрихкодов = ДанныеНоменклатурыБазы.Штрихкоды;		
		Для Каждого Элемент Из ДанныеНоменклатурыСервиса.ШтрихКоды Цикл
			Если МассивШтрихкодов.Найти(Элемент) = Неопределено Тогда
				РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, "Штрихкод", Элемент, "", НСтр("ru = 'Штрихкод';
																															|en = 'Barcode'"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СохранитьИзображенияНоменклатуры.
Процедура СохранитьИзображенияНоменклатуры(НоменклатураСсылка, Изображения) Экспорт
	
	Если ЗначениеЗаполнено(Изображения) Тогда
		ПрикрепитьИзображения(НоменклатураСсылка, Изображения.ВыгрузитьКолонку("ИзображениеURL"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// См. РаботаСНоменклатуройПереопределяемый.ПослеЗагрузкиНоменклатурыСервиса.
Процедура ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры(СтрокаТаблицыШтрихкодов, НоменклатураСсылка) Экспорт
		
	СтрокаТаблицыШтрихкодов.ЕдиницаИзмерения 
		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ЕдиницаИзмерения");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьКоличествоХарактеристик.
Процедура ПолучитьКоличествоХарактеристик(Номенклатура, Результат) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидНоменклатуры, "ИспользованиеХарактеристик, ИспользоватьХарактеристики");	

	Если Не ЗначенияРеквизитов.ИспользоватьХарактеристики Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		Владелец = Номенклатура;
	Иначе
		Владелец = ВидНоменклатуры;	
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ХарактеристикиНоменклатуры.Ссылка), 0) КАК КоличествоХарактеристик
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоХарактеристик;
	Иначе
		Результат = 0;	
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ТекстЗапросаХарактеристикПоВладельцу.
Процедура ТекстЗапросаХарактеристикПоВладельцу(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	Характеристики.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	Характеристики.Владелец = &Владелец";
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВариантИспользованияХарактеристик.
Процедура ПолучитьВариантИспользованияХарактеристик(ВидНоменклатуры, Результат) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидНоменклатуры, "ИспользованиеХарактеристик, ИспользоватьХарактеристики");	
	
	Если ЗначенияРеквизитов.ИспользоватьХарактеристики 
		И ЗначенияРеквизитов.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		
		Результат = "Индивидуальные";
		
	ИначеЕсли ЗначенияРеквизитов.ИспользоватьХарактеристики 
		И (ЗначенияРеквизитов.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
		   ИЛИ ЗначенияРеквизитов.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры) Тогда
		
		Результат = "Общие";
		
	ИначеЕсли (Не ЗначенияРеквизитов.ИспользоватьХарактеристики) ИЛИ (ЗначенияРеквизитов.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать) Тогда
		
		Результат = "НеВедутся";
		
	КонецЕсли;	
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьДополнительныеРеквизитыВидаНоменклатуры.
Процедура ПолучитьДополнительныеРеквизитыВидаНоменклатуры(ВидНоменклатуры, ТаблицаРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитВидаНоменклатуры,
	|	ЛОЖЬ КАК ЯвляетсяХарактеристикой,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК РеквизитВидаНоменклатурыПредставление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойств КАК НаборСвойств
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство,
	|	ИСТИНА,
	|	ДополнительныеРеквизиты.Свойство.Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойствХарактеристик КАК НаборСвойств
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере.
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Связь характеристики и номенклатуры
	
	СвязиПараметровВыбора = Новый Массив();
	СвязиПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Номенклатура", 
			"Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	Элементы.ШтрихкодыНоменклатурыХарактеристика.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
	// Добавление реквизитов
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"), "ШтрихкодыНоменклатуры"));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьАлкогольнаяПродукция", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования", Новый ОписаниеТипов("Строка")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "ШтрихкодыНоменклатуры"));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавление элементов
	
	НовыйЭлемент             = Форма.Элементы.Вставить("АлкогольнаяПродукция", Тип("ПолеФормы"), Элементы.ШтрихкодыНоменклатуры, Элементы.ШтрихкодыНоменклатурыНоменклатураСервиса);
	НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ШтрихкодыНоменклатуры.АлкогольнаяПродукция";
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Алкогольная продукция';
									|en = 'Alcoholic products'");
	НовыйЭлемент.Видимость   = Ложь;
	
	НовыйЭлемент             = Форма.Элементы.Вставить("ГруппаУпаковкаЕдиницаИзмерения", Тип("ГруппаФормы"), Элементы.ШтрихкодыНоменклатуры, Элементы.ШтрихкодыНоменклатурыКоличество);
	НовыйЭлемент.Вид         = ВидГруппыФормы.ГруппаКолонок;
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Упаковка, единица измерения';
									|en = 'Packaging, unit of measure'");
	НовыйЭлемент.Группировка = ГруппировкаКолонок.ВЯчейке;
	НовыйЭлемент.Видимость   = Истина;
	
	НовыйЭлемент            	  		= Форма.Элементы.Вставить("Упаковка", Тип("ПолеФормы"), Элементы.ГруппаУпаковкаЕдиницаИзмерения);
	НовыйЭлемент.Вид         	  		= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ОтображатьВШапке 		= Ложь;
	НовыйЭлемент.ПутьКДанным 	  		= "ШтрихкодыНоменклатуры.Упаковка";
	НовыйЭлемент.СвязиПараметровВыбора  = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	НовыйЭлемент.Видимость   	  		= Истина;
	
	Элемент = Форма.Элементы.Найти("ШтрихкодыНоменклатурыЕдиницаИзмерения");
	Элемент.ОтображатьВШапке 			= Ложь;
	Элемент.Видимость 					= Ложь;
	Форма.Элементы.Переместить(Элемент, Элементы.ГруппаУпаковкаЕдиницаИзмерения);	
	
	НовыйЭлемент            	  		= Форма.Элементы.Вставить("ЕдиницаИзмерения", Тип("ПолеФормы"), Элементы.ГруппаУпаковкаЕдиницаИзмерения);
	НовыйЭлемент.Вид         	  		= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок 				= НСтр("ru = 'Ед. изм.';
													|en = 'UOM'");
	НовыйЭлемент.ПутьКДанным 	  		= "ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения";
	НовыйЭлемент.Видимость   	  		= Истина;
	
	// Настройка видимости колонки алкогольной продукции
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	
	Для каждого ЭлементКоллекции Из Форма.Параметры.НеизвестныеШтрихкоды Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭлементКоллекции);
		Если ЗначениеЗаполнено(ДанныеСтроки.АлкогольнаяПродукция) Тогда
			Форма.ЕстьАлкогольнаяПродукция = Истина;
			НовыйЭлемент.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения.
Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ШтрихкодыНоменклатуры = Форма.ШтрихкодыНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод                      КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура                  КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика                КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка                      КАК ЕдиницаИзмерения,
	|	ШтрихкодыНоменклатуры.Номенклатура.Наименование     КАК НоменклатураПредставление,
	|	ШтрихкодыНоменклатуры.Характеристика.Наименование   КАК ХарактеристикаПредставление,
	|	ШтрихкодыНоменклатуры.Упаковка.Наименование         КАК ЕдиницаИзмеренияПредставление
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)";
	
	Запрос.УстановитьПараметр("Штрихкоды", ШтрихкодыНоменклатуры.Выгрузить(Новый Структура("Зарегистрирован", Ложь),"Штрихкод").ВыгрузитьКолонку("Штрихкод"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда // Штрихкод уже записан в БД
		
		СтрокаТЧ = ШтрихкодыНоменклатуры.НайтиСтроки(Новый Структура("Штрихкод", Выборка.Штрихкод))[0];
		
		ОписаниеОшибки = НСтр("ru = 'Такой штрихкод уже назначен для номенклатуры %Номенклатура%';
								|en = 'Such barcode is already specified  for products %Номенклатура%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Номенклатура%", """" + Выборка.НоменклатураПредставление + """"
			+ ?(ЗначениеЗаполнено(Выборка.Характеристика), " " + НСтр("ru = 'с характеристикой';
																		|en = 'with characteristic'") + " """ + Выборка.ХарактеристикаПредставление + """", "")
			+ ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения), " """ + НСтр("ru = 'с единицей измерения';
																			|en = 'with UOM'") + " " + Выборка.ЕдиницаИзмеренияПредставление + """", ""));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,"ШтрихкодыНоменклатуры["+ШтрихкодыНоменклатуры.Индекс(СтрокаТЧ)+"].Штрихкод",,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы.
Процедура ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
		
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьНоменклатуруПоШтрихкодам.
Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения,
	|	Штрихкоды.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод В(&ШтрихКоды)";
	
	Запрос.УстановитьПараметр("ШтрихКоды", ШтрихКоды);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ПолучитьШтрихкодыПоНоменклатуре(Номенклатура, Упаковка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Упаковка = &Упаковка
	|";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);

	Штрихкоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	ВозвращаемоеЗначение = Новый Массив;
	Для Каждого ЭлементМассива Из Штрихкоды Цикл
		ВозвращаемоеЗначение.Добавить(РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(ЭлементМассива));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры.
Процедура ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры(ВидНоменклатуры, ЗначенияХарактеристикТекущейБазы) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК ХарактеристикаБазы,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
	|	И НЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ЗначенияХарактеристикТекущейБазы = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовВидовНоменклатуры(Знач ВидыНоменклатуры, Результат) Экспорт
	
	Если ТипЗнч(ВидыНоменклатуры) <> Тип("Массив") Тогда
		ВидыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.Наименование КАК Наименование,
	|	ВидыНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВидыНоменклатуры.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	
	Если ТипЗнч(Номенклатура) <> Тип("Массив") Тогда
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Описание КАК Описание,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	Номенклатура.КодОКПД2 КАК КодОКПД2,
	|	Номенклатура.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
	|	Номенклатура.ВесЗнаменатель КАК ВесЗнаменатель,
	|	Номенклатура.ВесИспользовать КАК ВесИспользовать,
	|	Номенклатура.ВесЧислитель КАК ВесЧислитель,
	|	Номенклатура.ОбъемЕдиницаИзмерения КАК ОбъемЕдиницаИзмерения,
	|	Номенклатура.ОбъемЗнаменатель КАК ОбъемЗнаменатель,
	|	Номенклатура.ОбъемИспользовать КАК ОбъемИспользовать,
	|	Номенклатура.ОбъемЧислитель КАК ОбъемЧислитель,
	|	Номенклатура.ДлинаЕдиницаИзмерения КАК ДлинаЕдиницаИзмерения,
	|	Номенклатура.ДлинаЗнаменатель КАК ДлинаЗнаменатель,
	|	Номенклатура.ДлинаИспользовать КАК ДлинаИспользовать,
	|	Номенклатура.ДлинаЧислитель КАК ДлинаЧислитель,
	|	Номенклатура.ПлощадьЕдиницаИзмерения КАК ПлощадьЕдиницаИзмерения,
	|	Номенклатура.ПлощадьЗнаменатель КАК ПлощадьЗнаменатель,
	|	Номенклатура.ПлощадьИспользовать КАК ПлощадьИспользовать,
	|	Номенклатура.ПлощадьЧислитель КАК ПлощадьЧислитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("Штрихкоды");
	Для каждого Элемент Из Результат Цикл
	    Элемент.Штрихкоды = ПолучитьШтрихкодыПоНоменклатуре(Элемент.Номенклатура, Элемент.ЕдиницаИзмерения);
	КонецЦикла;    
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры.
Процедура ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ВидНоменклатуры");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатурыИзФормы.
Процедура ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = Форма.Объект.ВидНоменклатуры;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатурыИзФормы.
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	ЗначенияРеквизитов.Вставить("Описание");
	ЗначенияРеквизитов.Вставить("Артикул");
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("НаименованиеПолное");
	ЗначенияРеквизитов.Вставить("КодТНВЭД");
	ЗначенияРеквизитов.Вставить("КодОКПД2");
	ЗначенияРеквизитов.Вставить("ВесЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("ВесЗнаменатель");
	ЗначенияРеквизитов.Вставить("ВесИспользовать");
	ЗначенияРеквизитов.Вставить("ВесЧислитель");
	ЗначенияРеквизитов.Вставить("ОбъемЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("ОбъемЗнаменатель");
	ЗначенияРеквизитов.Вставить("ОбъемИспользовать");
	ЗначенияРеквизитов.Вставить("ОбъемЧислитель");
	ЗначенияРеквизитов.Вставить("ДлинаЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("ДлинаЗнаменатель");
	ЗначенияРеквизитов.Вставить("ДлинаИспользовать");
	ЗначенияРеквизитов.Вставить("ДлинаЧислитель");
	ЗначенияРеквизитов.Вставить("ПлощадьЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("ПлощадьЗнаменатель");
	ЗначенияРеквизитов.Вставить("ПлощадьИспользовать");
	ЗначенияРеквизитов.Вставить("ПлощадьЧислитель");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	МассивШтрихКодов = Новый Массив;
	МассивШтрихКодов.Добавить(Форма.Штрихкод);
	ЗначенияРеквизитов.Вставить("Штрихкоды", МассивШтрихКодов);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитовИзФормы.
Процедура ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма,Форма.Объект);
	
	ЗначенияРеквизитов = Форма.Объект.ДополнительныеРеквизиты.Выгрузить(, "Свойство, Значение");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// См. РаботаСНоменклатуройПереопределяемый.ЗарегистрироватьШтрихкоды.
Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
			
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
	Для Каждого СтрокаШтрихкода Из ШтрихкодыНоменклатуры Цикл
				
		МенеджерЗаписи                  = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Штрихкод         = СтрокаШтрихкода.Штрихкод;
		МенеджерЗаписи.Номенклатура     = СтрокаШтрихкода.Номенклатура;
		МенеджерЗаписи.Характеристика   = СтрокаШтрихкода.Характеристика;
		МенеджерЗаписи.Упаковка 		= СтрокаШтрихкода.Упаковка;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатурыВФорме.
Процедура ЗаполнитьВидНоменклатурыВФорме(Форма, ТаблицаОтличий = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаОтличий <> Неопределено Тогда
		
		// Заполнения после окна сравнения.
		
		Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
			Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры")
		и НЕ ЗначениеЗаполнено(Форма.Объект.ГруппаДоступа) Тогда
		Форма.Объект.ГруппаДоступа = Константы.ГруппаДоступаНоменклатурыИзСервиса.Получить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда	
		
		// Для новых объектов идет заполнение дополнительных реквизитов на форме для имитации их присутствия.
		
		ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатуры.
Процедура ЗаполнитьВидНоменклатуры(ВидНоменклатурыСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ВидНоменклатурыОбъект.Ссылка);
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		ВидНоменклатурыОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры")
		и НЕ ЗначениеЗаполнено(ВидНоменклатурыОбъект.ГруппаДоступа) Тогда
		ВидНоменклатурыОбъект.ГруппаДоступа = Константы.ГруппаДоступаНоменклатурыИзСервиса.Получить();
	КонецЕсли;
	
	ВидНоменклатурыОбъект.Записать();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуру.
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(НоменклатураОбъект.Ссылка);
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		Если ЭлементКоллекции.РеквизитОбъекта <> "Штрихкод" Тогда
			НоменклатураОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЕсли;		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НоменклатураОбъект.ВесЕдиницаИзмерения) Тогда
		НоменклатураОбъект.ВесИспользовать = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(НоменклатураОбъект.ОбъемЕдиницаИзмерения) Тогда
		НоменклатураОбъект.ОбъемИспользовать = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(НоменклатураОбъект.ДлинаЕдиницаИзмерения) Тогда
		НоменклатураОбъект.ДлинаИспользовать = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(НоменклатураОбъект.ПлощадьЕдиницаИзмерения) Тогда
		НоменклатураОбъект.ПлощадьИспользовать = Истина;
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатуры.
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, ДополнительныеРеквизиты) Экспорт
	
	Если ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Реквизит.РеквизитОбъекта;
		НоваяСтрока.Значение = Реквизит.НовоеЗначение;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитов.
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Номенклатура, ЗначенияРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК ВладелецСвойств,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗначенияРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуруВФорме.
Процедура ЗаполнитьНоменклатуруВФорме(Форма, ТаблицаИзменений = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаИзменений <> Неопределено Тогда
		
		// Заполнение при наличии отличий после работы формы заполнения.
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			Если ЭлементКоллекции.РеквизитОбъекта <> "Штрихкод" Тогда
				Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
			Иначе
				Форма.Штрихкод = ЭлементКоллекции.НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		// Отображение картинки на форме.
		Если Не ЗначениеЗаполнено(Форма.АдресКартинки)
			И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения)
			И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения[0].Изображения) Тогда
			
			Форма.Элементы.АдресКартинки.ТекстНевыбраннойКартинки 
				= НСтр("ru = 'Изображение появится после записи';
						|en = 'You will see the image after recording'");
		КонецЕсли;
	
	ИначеЕсли ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда
		
		// Заполнение при интерактивном создании.
		
		ЕстьДопРеквизиты = ДанныеИнтерактивногоЗаполнения.Колонки.Найти("ДополнительныеРеквизиты") <> Неопределено;
		ЕстьКлассификаторы  = ДанныеИнтерактивногоЗаполнения.Колонки.Найти("Классификаторы") <> Неопределено;
		
		Для каждого ДанныеЗаполнения Из ДанныеИнтерактивногоЗаполнения Цикл
			
			СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			РаботаСНоменклатуройУТ.ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
			
			СсылкаНаЕдиницуИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			РаботаСНоменклатуройУТ.ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.ЕдиницаИзмерения, СсылкаНаЕдиницуИзмерения);
			
			НаименованиеПолное = ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), ДанныеЗаполнения.НаименованиеДляПечати, 
			ДанныеЗаполнения.Наименование);
			Форма.Объект.Наименование = ДанныеЗаполнения.Наименование;
			Форма.Объект.Артикул = ДанныеЗаполнения.Артикул;
			Форма.Объект.НаименованиеПолное = НаименованиеПолное;
			Форма.Объект.ЕдиницаИзмерения = СсылкаНаЕдиницуИзмерения;
			Форма.Объект.СтавкаНДС = СтавкаНДС;
			Форма.Объект.Описание = ДанныеЗаполнения.Описание;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") Тогда
				Форма.Объект.ВидНоменклатуры = ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры;
			Иначе
				МассивВидов = Справочники.ВидыНоменклатуры.ПолучитьПредустановленныеВидыНоменклатуры();
				Для каждого ТекВид Из МассивВидов Цикл
					Если ТекВид.Наименование = ДанныеЗаполнения.Тип Тогда
						Форма.Объект.ВидНоменклатуры = ТекВид;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			Форма.Объект.ГруппаДоступа = Константы.ГруппаДоступаНоменклатурыИзСервиса.Получить();
			
			Если ЗначениеЗаполнено(Форма.Объект.ВидНоменклатуры) Тогда
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.ВидНоменклатуры, "ИспользованиеХарактеристик");
				Форма.Объект.ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.ВидНоменклатуры, "ИспользованиеХарактеристик");
			КонецЕсли;
			
			Если ЕстьДопРеквизиты Тогда
				Для каждого ЭлементКоллекции Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
					НоваяСтрока = Форма.Объект.ДополнительныеРеквизиты.Добавить();
					НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитИнформационнойБазы;
					НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ЭлементКоллекции);
				КонецЦикла; 
				УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Форма.Объект);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Изображения) Тогда
				Форма.ИзображенияИзСервиса.ЗагрузитьЗначения(ДанныеЗаполнения.Изображения.ВыгрузитьКолонку("ИзображениеURL"));
			КонецЕсли;
			Если ДанныеЗаполнения.ШтрихКоды.Количество() > 0
				или ДанныеЗаполнения.Характеристики.Количество() > 0 Тогда
				Штрихкоды = Новый ТаблицаЗначений;
				Штрихкоды.Колонки.Добавить("Номенклатура");
				Штрихкоды.Колонки.Добавить("Характеристика");
				Штрихкоды.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			Если ДанныеЗаполнения.ШтрихКоды.Количество() > 0 Тогда
				Форма.ШтрихКод = ДанныеЗаполнения.Штрихкоды[0];
				Для каждого Штрихкод Из ДанныеЗаполнения.Штрихкоды Цикл
					НоваяСтрока = Штрихкоды.Добавить();
					НоваяСтрока.ШтрихКод = Штрихкод;
				КонецЦикла;
				Форма.ШтрихкодыСервис = ПоместитьВоВременноеХранилище(Штрихкоды, Форма.УникальныйИдентификатор);
			ИначеЕсли ДанныеЗаполнения.Характеристики.Количество() > 0 Тогда
				Для каждого Характеристика Из ДанныеЗаполнения.Характеристики Цикл
					Для каждого Штрихкод Из Характеристика.ШтрихКоды Цикл
						Если НЕ ЗначениеЗаполнено(Характеристика.ХарактеристикаИнформационнойБазы) Тогда
							Продолжить;
						КонецЕсли;
						Для каждого Штрихкод Из ДанныеЗаполнения.Штрихкоды Цикл
							НоваяСтрока = Штрихкоды.Добавить();
							НоваяСтрока.Характеристика = Характеристика.ХарактеристикаИнформационнойБазы;
							НоваяСтрока.ШтрихКод = Штрихкод;
						КонецЦикла;
						Форма.ШтрихкодыСервис = ПоместитьВоВременноеХранилище(Штрихкоды, Форма.УникальныйИдентификатор);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Вес = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.Вес.ЕдиницаИзмерения, Вес);
			
			Объем = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.Объем.ЕдиницаИзмерения, Объем);
			
			Длина = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.Длина.ЕдиницаИзмерения, Длина);
			
			Площадь = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.Площадь.ЕдиницаИзмерения, Площадь);

			Если ЗначениеЗаполнено(Вес) Тогда
				Форма.Объект.ВесЕдиницаИзмерения = Вес;
				Форма.Объект.ВесИспользовать = Истина;
				Форма.Объект.ВесЗнаменатель = ДанныеЗаполнения.Вес.ЗнаменательКратности;
				Форма.Объект.ВесЧислитель = ДанныеЗаполнения.Вес.ЧислительКратности;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объем) Тогда
				Форма.Объект.ОбъемЕдиницаИзмерения = Объем;
				Форма.Объект.ОбъемИспользовать = Истина;
				Форма.Объект.ОбъемЗнаменатель = ДанныеЗаполнения.Объем.ЗнаменательКратности;
				Форма.Объект.ОбъемЧислитель = ДанныеЗаполнения.Объем.ЧислительКратности;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Длина) Тогда
				Форма.Объект.ДлинаЕдиницаИзмерения = Длина;
				Форма.Объект.ДлинаИспользовать = Истина;
				Форма.Объект.ДлинаЗнаменатель = ДанныеЗаполнения.Длина.ЗнаменательКратности;
				Форма.Объект.ДлинаЧислитель = ДанныеЗаполнения.Длина.ЧислительКратности;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Площадь) Тогда
				Форма.Объект.ПлощадьЕдиницаИзмерения = Площадь;
				Форма.Объект.ПлощадьИспользовать = Истина;
				Форма.Объект.ПлощадьЗнаменатель = ДанныеЗаполнения.Площадь.ЗнаменательКратности;
				Форма.Объект.ПлощадьЧислитель = ДанныеЗаполнения.Площадь.ЧислительКратности;
			КонецЕсли;

			
			Если ЕстьКлассификаторы Тогда
				Для каждого Элемент Из ДанныеЗаполнения.Классификаторы Цикл
					Если СтрНайти(ВРег(Элемент.Наименование), "TNVED") <> 0 Тогда
						Форма.Объект.КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиСоздатьЭлементКлассификатораТНВЭД(Элемент.Идентификатор);
					ИначеЕсли СтрНайти(ВРег(Элемент.Наименование), "OKPD2") <> 0 Тогда
						Форма.Объект.КодОКПД2 = Справочники.КлассификаторОКПД2.НайтиСоздатьЭлементКлассификатораОКПД2(Элемент.Идентификатор);
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.ВесЕдиницаИзмерения) Тогда
		Форма.Объект.ВесИспользовать = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Объект.ОбъемЕдиницаИзмерения) Тогда
		Форма.Объект.ОбъемИспользовать = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Объект.ДлинаЕдиницаИзмерения) Тогда
		Форма.Объект.ДлинаИспользовать = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Объект.ПлощадьЕдиницаИзмерения) Тогда
		Форма.Объект.ПлощадьИспользовать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме.
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Объект = Форма.Объект;
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		
		СтрокиРеквизита = Объект.ДополнительныеРеквизиты.
			НайтиСтроки(Новый Структура("Свойство", ЭлементКоллекции.РеквизитОбъекта));
		
		Если СтрокиРеквизита.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитОбъекта;
			НоваяСтрока.Значение = ЭлементКоллекции.НовоеЗначение;	
		Иначе
			СтрокиРеквизита[0].Значение = ЭлементКоллекции.НовоеЗначение; 
		КонецЕсли;
		
	КонецЦикла;	

	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СформироватьНаименованиеПоХарактеристике.
Процедура СформироватьНаименованиеПоХарактеристике(НаименованиеНоменклатуры, ПредставлениеХарактеристики, НаименованиеХарактеристики) Экспорт
	
	НаименованиеХарактеристики = СтрШаблон("%1 ,%2", НаименованиеНоменклатуры, ПредставлениеХарактеристики);
	
КонецПроцедуры

#КонецОбласти

#Область Разное

// См. РаботаСНоменклатуройКлиентПереопределяемый.ПриОпределенииНастроек.
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ИспользоватьВидыНоменклатуры             = Истина;
	Настройки.ИспользоватьХарактеристики               = Истина;
	Настройки.ИспользоватьПакетноеСозданиеНоменклатуры = Ложь;
	Настройки.ИспользоватьПоискПоШтрихкодуВСервисе     = Истина;
	Настройки.СохранятьИерархиюКатегорийПриЗагрузке    = Истина;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Прикрепление изображений к номенклатуре по массиву адресов.
//
// Параметры:
//  НоменклатураСсылка	 - Ссылка - владелец изображений.
//  СсылкиНаИзображения	 - Массив (Строка) - ссылки на изображения.
//
Процедура ПрикрепитьИзображения(НоменклатураСсылка, СсылкиНаИзображения) Экспорт
	
	ЭтоСсылка = ТипЗнч(НоменклатураСсылка) = Тип("СправочникСсылка.Номенклатура");
	
	СозданныеИзображения = Новый Массив;
	
	Для каждого ИзображениеURL Из СсылкиНаИзображения Цикл
		
		ДанныеИзображения = ДвоичныеДанныеПоАдресуURL(ИзображениеURL);
		
		ИмяИзображения = "";
		РасширениеИзображения = "";
		
		ПодстрокиАдреса = СтрРазделить(ИзображениеURL, "/");
		
		Если ПодстрокиАдреса.Количество() > 0  Тогда
			ИмяИзображения = ПодстрокиАдреса[ПодстрокиАдреса.ВГраница()];
			
			ПодстрокиИмени = СтрРазделить(ИмяИзображения, ".");
			
			Если ПодстрокиИмени.Количество() = 2 Тогда
				ИмяИзображения = ПодстрокиИмени[0];	
				РасширениеИзображения = ПодстрокиИмени[1];	
			КонецЕсли;	
		КонецЕсли;
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ?(ЭтоСсылка,НоменклатураСсылка,НоменклатураСсылка.Ссылка));
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяИзображения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеИзображения);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		СозданныеИзображения.Добавить(
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеИзображения)));
		
	КонецЦикла;
	
	Если СозданныеИзображения.Количество() > 0 Тогда
		НоменклатураОбъект = ?(ЭтоСсылка, НоменклатураСсылка.ПолучитьОбъект(), НоменклатураСсылка);
		НоменклатураОбъект.ФайлКартинки = СозданныеИзображения[0];
		НоменклатураОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Получение значения ставки НДС по идентификатору.
//
// Параметры:
//  Значение - Строка - значение ставки НДС (-, 10, 18, 20).
//  Ссылка	 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//
Процедура ПреобразоватьСтавкуНДССервиса(Знач Значение, Ссылка) Экспорт
	
	Если Значение = "10" Тогда
		Ссылка = Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Значение = "18" Тогда
		Ссылка = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Значение = "20" Тогда
		Ссылка = Перечисления.СтавкиНДС.НДС20;
	Иначе
		Ссылка = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецПроцедуры

// Преобразование типа объекта сервиса в объект прикладного решения.
//
// Параметры:
//  Значение	 - Строка - тип объекта сервиса.
//  Результат	 - Произвольный - преобразованный тип.
//
Процедура ПреобразоватьТипНоменклатурыСервиса(Знач Значение, Результат)

	Если Значение = "Услуга" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Услуга;
	ИначеЕсли Значение = "Товар" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Товар;
	Иначе 
		Результат = Перечисления.ТипыНоменклатуры.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры

// Поиск и создание единицы измерения, на основании данных сервиса
//
// Параметры:
//  ЕдиницаИзмеренияСервиса	 - Структура - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, колонка ЕдиницаИзмерения.
//  ЕдиницуИзмеренияСсылка	 - Справочник.Ссылка - ссылка на созданную единицу измерения.
//
Процедура ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка) Экспорт 
	
	ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка);
	
	Если ЕдиницуИзмеренияСсылка <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницуИзмеренияСсылка = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
	
	ЕдиницуИзмеренияСсылка.Наименование = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	
	ЕдиницуИзмеренияСсылка.Записать();
	
КонецПроцедуры

// Поиск единицы измерения в информационной базе, на основании данных сервиса
//
// Параметры:
//  ЕдиницаИзмеренияСервиса	 - Структура - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, колонка ЕдиницаИзмерения.
//  ЕдиницуИзмеренияСсылка	 - Справочник.Ссылка - ссылка на созданную единицу измерения.
//
Процедура ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка)
	
	КодОКЕИ = "";
	СсылкаНаЕдиницуИзмерения = Неопределено;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ", КодОКЕИ) Тогда
		СоответствиеКодовОКЕИ = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(КодОКЕИ);
		СсылкаНаЕдиницуИзмерения = СоответствиеКодовОКЕИ[КодОКЕИ];
	КонецЕсли;
	
	Если СсылкаНаЕдиницуИзмерения <> Неопределено Тогда
		ЕдиницуИзмеренияСсылка = СсылкаНаЕдиницуИзмерения;
		Возврат ;
	КонецЕсли;
	
	НаименованиеЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	
	Если НЕ ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Наименование = &Наименование
	|	И ЕдиницыИзмерения.Код = """"";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеЕдиницыИзмерения);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		ЕдиницуИзмеренияСсылка = Выгрузка[0].Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьЗначенияРеквизитовХарактеристики.
Процедура ЗаполнитьЗначенияРеквизитовХарактеристики(ЗначенияДополнительныхРеквизитов, Характеристика)
	
	ЗначенияДополнительныхРеквизитов.Очистить();
	
	Для каждого Свойство Из Характеристика.ДополнительныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(Свойство.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Свойство.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(Свойство);
		
	КонецЦикла;
	
КонецПроцедуры

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, АдресРесурса, Порт, Таймаут, ЗащищенноеСоединение, Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбщегоНазначения.ЭтоLinuxСервер() И Не ОбщегоНазначения.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения';
								|en = 'An error occurred while establishing connection when receiving the image'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения';
								|en = 'Error receiving image'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

Функция ПолучитьДанныеШтрихкода(Штрихкод) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеШтрихкода = Новый Структура("Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, Выборка);
		Возврат ДанныеШтрихкода;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьНоменклатуруПоШтрихкоду(Форма, Номенклатура) Экспорт
	
	ШтрихКоды = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(Номенклатура, 
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Номенклатура.ЕдиницаИзмерения);
	
	Если ШтрихКоды.Количество() > 0 Тогда
		НайденныеСтроки = Форма.ШтрихкодыНоменклатуры.НайтиСтроки(Новый Структура("Штрихкод", ШтрихКоды[0]));
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			ТекСтрока.Зарегистрирован = Истина;
			ТекСтрока.Номенклатура = Номенклатура;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// При объединении категорий в одну, метода заполняет представления дополнительных реквизитов на форма.
//
// Параметры:
//  Форма							 - УправляемаяФорма - форма вида номенклатуры.
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначения - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//
Процедура ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения)
	
	Объект = Форма.Объект;
	
	// Заполнение наименование на основании всех выбранных категорий.
	
	Объект.Наименование 
		= СтрСоединить(ДанныеИнтерактивногоЗаполнения.ВыгрузитьКолонку("Наименование"), "; ");
		
	// Заполнение дополнительных реквизитов и реквизитов характеристик.	
		
	ДанныеДополнительныхРеквизитов = РаботаСНоменклатурой.ОбъединитьДанныеДополнительныхРеквизитов(ДанныеИнтерактивногоЗаполнения);
	
	Для каждого ТекущийРеквизит Из ДанныеДополнительныхРеквизитов.ДополнительныеРеквизиты Цикл
		НоваяСтрока = Форма.ТаблицаДопРеквизитовНоменклатуры.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = ТекущийРеквизит.Наименование;
	КонецЦикла;
	
	Для каждого ТекущийРеквизит Из ДанныеДополнительныхРеквизитов.Характеристики.ДополнительныеРеквизиты Цикл
		НоваяСтрока = Форма.ТаблицаДопРеквизитовХарактеристик.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = ТекущийРеквизит.Наименование;
	КонецЦикла;
	
	// Установка варианта ведения учета характеристик.
	
	Если Форма.ТаблицаДопРеквизитовХарактеристик.Количество() > 0 Тогда
		Объект.ИспользоватьХарактеристики = Истина;	
		Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
	КонецЕсли;
	
	// Блокировка дополнительных реквизитов.
	
	Форма.Элементы.ТаблицаДопРеквизитовНоменклатуры.ТолькоПросмотр = Истина;
	Форма.Элементы.ТаблицаДопРеквизитовХарактеристик.ТолькоПросмотр = Истина;
		
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияНоменклатурыПоставщика

Процедура ВыполнитьДействияПриЗаписиНоменклатурыПоставщикаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка или Источник.ДополнительныеСвойства.Свойство("Синхронизация")
		или НЕ ЗначениеЗаполнено(Источник.Владелец) или НЕ ЗначениеЗаполнено(Источник.Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураИБ = ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы(Источник.Номенклатура, Источник.Характеристика, Источник.Упаковка); 
	
	НоменклатураКонтрагента = ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента(Источник.Владелец, Источник.Идентификатор);
		
	ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Источник);
	
	СоответствиеНоменклатур = ОбменСКонтрагентами.НайтиСоответствиеНоменклатуры(Новый Структура("НоменклатураКонтрагента", НоменклатураКонтрагента));
		
	УстановитьСоответствиеНоменклатуры(НоменклатураКонтрагента, НоменклатураИБ);		
	
КонецПроцедуры

Процедура ВыполнитьДействияПриЗаписиНоменклатураКонтрагентовБЭДПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка или Источник.ДополнительныеСвойства.Свойство("Синхронизация") 
		или Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;       
	
	ОбновитьСоздатьНоменклатуруПоставщика(Источник[0]);
	
КонецПроцедуры
															   
Процедура УстановитьСоответствиеНоменклатуры(Знач НоменклатураКонтрагента, Знач НоменклатураИБ = Неопределено, Замещать = Истина)
	
	Если НоменклатураИБ = Неопределено Тогда
		НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	КонецЕсли;
	
	Набор = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
	Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
	Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
	Набор.Прочитать();
	
	Если ЗначениеЗаполнено(Набор) И Не Замещать Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Неопределено;
	Если ЗначениеЗаполнено(Набор) Тогда
		Запись = Набор[0];
	Иначе
		Запись = Набор.Добавить();
	КонецЕсли;
	
	Запись.Владелец = НоменклатураКонтрагента.Владелец;
	Запись.Идентификатор = НоменклатураКонтрагента.Идентификатор;
	Запись.Наименование = НоменклатураКонтрагента.Наименование;
	Запись.НаименованиеХарактеристики = НоменклатураКонтрагента.Характеристика;
	Запись.ЕдиницаИзмерения = НоменклатураКонтрагента.ЕдиницаИзмерения;
	Запись.ЕдиницаИзмеренияКод = НоменклатураКонтрагента.ЕдиницаИзмеренияКод;
	Запись.Артикул = НоменклатураКонтрагента.Артикул;
	Запись.Штрихкод = НоменклатураКонтрагента.Штрихкод;
	Запись.ИдентификаторНоменклатурыСервиса = НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса;
	Запись.ИдентификаторХарактеристикиСервиса = НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса;
	Запись.Номенклатура = НоменклатураИБ.Номенклатура;
	Запись.Характеристика = НоменклатураИБ.Характеристика;
	Запись.Упаковка = НоменклатураИБ.Упаковка;
	
	Набор.ДополнительныеСвойства.Вставить("Синхронизация");
	
	УстановитьПривилегированныйРежим(Истина);
	Набор.Записать();
	
КонецПроцедуры

Процедура ОбновитьСоздатьНоменклатуруПоставщика(НоменклатураБЭД)
		
	Если ЗначениеЗаполнено(НоменклатураБЭД.Владелец) Тогда
		// Заполним номенклатуру поставщика
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", НоменклатураБЭД.Владелец);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", НоменклатураБЭД.Идентификатор);
		НоменклатураПоставщикаСсылка = Неопределено;
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", НоменклатураПоставщикаСсылка, ,
			РеквизитыНоменклатурыПоставщика);
		Если ЗначениеЗаполнено(НоменклатураПоставщикаСсылка) Тогда
			НоменклатураПоставщика = НоменклатураПоставщикаСсылка.ПолучитьОбъект();
		Иначе
			НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		КонецЕсли;
		НоменклатураПоставщика.ДополнительныеСвойства.Вставить("Синхронизация");
		
		Если НоменклатураПоставщика.ПометкаУдаления Тогда
			НоменклатураПоставщика.ПометкаУдаления = Ложь;			
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(НоменклатураПоставщика, НоменклатураБЭД);
		
		УстановитьПривилегированныйРежим(Истина);
		НоменклатураПоставщика.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
