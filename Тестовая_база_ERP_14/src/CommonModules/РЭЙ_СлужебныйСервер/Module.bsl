# Область Получение_Договоров_Контрактов_ПаспортовСделок

Функция ПолучитьДоговорКонтрагентаПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	Договор = Неопределено;

	МетаданныеДокумента = РасчетныйДокумент.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Если РасчетныйДокумент["РасшифровкаПлатежа"].Количество() > 0 Тогда
			Если МетаданныеДокумента.ТабличныеЧасти["РасшифровкаПлатежа"].Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				Если ЗначениеЗаполнено(РасчетныйДокумент["РасшифровкаПлатежа"][0]["ДоговорКонтрагента"]) Тогда
					Договор = РасчетныйДокумент["РасшифровкаПлатежа"][0]["ДоговорКонтрагента"];
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Договор) Тогда
				Если МетаданныеДокумента.ТабличныеЧасти["РасшифровкаПлатежа"].Реквизиты.Найти("Заказ") <> Неопределено Тогда
					Если ЗначениеЗаполнено(РасчетныйДокумент["РасшифровкаПлатежа"][0]["Заказ"]) Тогда
						Если ТипЗнч(РасчетныйДокумент["РасшифровкаПлатежа"][0]["Заказ"]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
							Договор = РасчетныйДокумент["РасшифровкаПлатежа"][0]["Заказ"];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			Если ЗначениеЗаполнено(РасчетныйДокумент["ДоговорКонтрагента"]) Тогда
				Договор = РасчетныйДокумент.ДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("Договор") <> Неопределено Тогда
			Если ЗначениеЗаполнено(РасчетныйДокумент["Договор"]) Тогда
				Договор = РасчетныйДокумент.Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Договор;
КонецФункции

Функция ПолучитьКонтрактВЭДПоДоговоруКонтрагента(Договор) Экспорт
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Справочники.РЭЙ_КонтрактыВЭД.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РЭЙ_КонтрактыВЭД.Ссылка
						  |ИЗ
	                      |	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	                      |ГДЕ
	                      |	НЕ РЭЙ_КонтрактыВЭД.ПометкаУдаления
	                      |	И РЭЙ_КонтрактыВЭД.ДоговорКонтрагента = &ДоговорКонтрагента");
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РЭЙ_ДС.Договор КАК Ссылка
						  |ИЗ
	                      |	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДС
	                      |ГДЕ
	                      |	РЭЙ_ДС.ДопСоглашение = &ДоговорКонтрагента");
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Справочники.РЭЙ_КонтрактыВЭД.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьКонтрактВЭДПоКонтрагенту(Организация, Контрагент, ВидДоговора = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РЭЙ_КонтрактыВЭД.Ссылка
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	|ГДЕ
	|	РЭЙ_КонтрактыВЭД.Контрагент = &Контрагент
	|	И РЭЙ_КонтрактыВЭД.Организация = &Организация";
	
	Если ВидДоговора <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " 
		|	И РЭЙ_КонтрактыВЭД.ДоговорКонтрагента.ВидДоговора В (&ВидДоговора)";
		
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.РЭЙ_КонтрактыВЭД.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПолучитьКонтрактВЭДПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	Договор = ПолучитьДоговорКонтрагентаПоРасчетномуДокументу(РасчетныйДокумент);
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьКонтрактВЭДПоДоговоруКонтрагента(Договор);
КонецФункции

Функция ПолучитьПаспортСделкиПоДоговору(Договор, Дата)  Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПС.Ссылка КАК Ссылка,
	|	КВ.КредитныйДоговор КАК КредитныйДоговор
	|ИЗ
	|	Документ.РЭЙ_ПаспортСделки КАК ПС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РЭЙ_КонтрактыВЭД КАК КВ
	|		ПО ПС.КонтрактВЭД = КВ.Ссылка
	|ГДЕ
	|	ПС.Проведен
	|	И (КВ.ДоговорКонтрагента = &Договор
	|			ИЛИ КВ.Ссылка В
	|				(ВЫБРАТЬ
	|					РегистрСведений.РЭЙ_ДопСоглашения.Договор
	|				ИЗ
	|					РегистрСведений.РЭЙ_ДопСоглашения
	|				ГДЕ
	|					РегистрСведений.РЭЙ_ДопСоглашения.ДопСоглашение = &Договор))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПС.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Если (Выборка.Количество()=1) Или 
		((Выборка.Количество()>1) и (НЕ Выборка[0].КредитныйДоговор))	Тогда
		Возврат Выборка[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьПаспортСделкиПоДокументу(ДокОсн)  Экспорт
	Если ДокОсн.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		Договор = ДокОсн.ДоговорКонтрагента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьПаспортСделкиПоДоговору(Договор, ДокОсн.Дата);
КонецФункции

Функция ПолучитьПаспортСделкиПоКонтрактуВЭД(КонтрактВЭД) Экспорт
	Если Не ЗначениеЗаполнено(КонтрактВЭД) Тогда
		Возврат Документы.РЭЙ_ПаспортСделки.ПустаяСсылка();
	КонецЕсли;
	Если КонтрактВЭД.НеЯвляетсяОбъектомВалютногоКонтроля Тогда
		Возврат Документы.РЭЙ_ПаспортСделки.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_ПаспортСделки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РЭЙ_ПаспортСделки КАК РЭЙ_ПаспортСделки
	|ГДЕ
	|	РЭЙ_ПаспортСделки.ПометкаУдаления = ЛОЖЬ
	|	И РЭЙ_ПаспортСделки.КонтрактВЭД = &КонтрактВЭД";
	
	Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.РЭЙ_ПаспортСделки.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПолучитьПаспортСделкиПоРасчетномуДокументу(РасчетныйДокумент)  Экспорт
	Договор = ПолучитьДоговорКонтрагентаПоРасчетномуДокументу(РасчетныйДокумент);
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьПаспортСделкиПоДоговору(Договор, КонецДня(РасчетныйДокумент.Дата));	
КонецФункции

Функция ПолучитьЗначениеФлагаРасчетыВУсловныхЕдиницах(КонтрактВЭД) Экспорт
	//Возврат КонтрактВЭД.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ПолучениеРазличныхДанных

Функция ПолучитьБанковскийСчетВалютныйПоТиповому(БанковскийСчет) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_БанковскиеСчетаВалютные.Ссылка
	|ИЗ
	|	Справочник.РЭЙ_БанковскиеСчетаВалютные КАК РЭЙ_БанковскиеСчетаВалютные
	|ГДЕ
	|	РЭЙ_БанковскиеСчетаВалютные.БанковскийСчет = &БанковскийСчет";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьБанковскийСчетПоКонтрактуВЭД(КонтрактВЭД) Экспорт
	текБанковскийСчет = Справочники[РЭЙ_Универсализация.Справочник_БанковскиеСчетаОрганизаций()].ПустаяСсылка();
	
	//1. Поиск основного расчетного счета 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_КонтрактыВЭДБанковскиеСчета.БанковскийСчет
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД.БанковскиеСчета КАК РЭЙ_КонтрактыВЭДБанковскиеСчета
	|ГДЕ
	|	РЭЙ_КонтрактыВЭДБанковскиеСчета.Ссылка = &КонтрактВЭД
	|	И РЭЙ_КонтрактыВЭДБанковскиеСчета.Основной";
	
	Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		текБанковскийСчет = Выборка.БанковскийСчет;
	КонецЕсли;
	
	//2. Поиск рублевого счета
	Если Не ЗначениеЗаполнено(текБанковскийСчет) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РЭЙ_КонтрактыВЭДБанковскиеСчета.БанковскийСчет
		|ИЗ
		|	Справочник.РЭЙ_КонтрактыВЭД.БанковскиеСчета КАК РЭЙ_КонтрактыВЭДБанковскиеСчета
		|ГДЕ
		|	РЭЙ_КонтрактыВЭДБанковскиеСчета.Ссылка = &КонтрактВЭД
		|	И РЭЙ_КонтрактыВЭДБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств = &Валюта";
		
		Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
		Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.Следующий() Тогда
				текБанковскийСчет = Выборка.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//3. Если только 1 счет, то выбираем его
	Если Не ЗначениеЗаполнено(текБанковскийСчет) Тогда
		Если КонтрактВЭД.БанковскиеСчета.Количество() = 1 Тогда
			текБанковскийСчет = КонтрактВЭД.БанковскиеСчета[0].БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Возврат текБанковскийСчет;
КонецФункции

Функция ПолучитьВидКонтактнойИнформацииСлужебныйТелефонФизЛица() Экспорт
	ВариантыПредопреденныхЭлементов = Новый Массив;
	
	ВариантыПредопреденныхЭлементов.Добавить("ТелефонФизЛицаСлужебный");
	ВариантыПредопреденныхЭлементов.Добавить("ТелефонСлужебныйФизЛица");
	ВариантыПредопреденныхЭлементов.Добавить("ТелефонСлужебный");
	ВариантыПредопреденныхЭлементов.Добавить("ТелефонРабочийФизическиеЛица");
	
	Для т = 0 По ВариантыПредопреденныхЭлементов.Количество() Цикл
		Попытка
			СсылкаНаЭлемент = Справочники.ВидыКонтактнойИнформации[ВариантыПредопреденныхЭлементов[т]];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Возврат СсылкаНаЭлемент;
	КонецЦикла;
	
	Возврат Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
КонецФункции

Функция ПолучитьНаименованиеБанкаДляПечати(Банк) Экспорт
	Если Не ПустаяСтрока(Банк.РЭЙ_НаименованиеПолное) Тогда
		Возврат Банк.РЭЙ_НаименованиеПолное;
	Иначе
		Возврат Банк.Наименование;
	КонецЕсли;
КонецФункции

Функция ПолучитьНаименованиеКонтрагентаДляПечати(Контрагент) Экспорт
	Если Не ПустаяСтрока(Контрагент.РЭЙ_НаименованиеАнгл) Тогда
		Возврат Контрагент.РЭЙ_НаименованиеАнгл;
	ИначеЕсли Не ПустаяСтрока(Контрагент.НаименованиеПолное) Тогда
		Возврат Контрагент.НаименованиеПолное;
	Иначе
		Возврат Контрагент.Наименование;
	КонецЕсли;
КонецФункции

Функция ПолучитьСлужебныйТелефонФизЛица(ФизЛицо) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ФизЛицо);
	Запрос.УстановитьПараметр("СлужебныйТелефонФизЛица", ПолучитьВидКонтактнойИнформацииСлужебныйТелефонФизЛица());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Объект
	|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И ФизическиеЛицаКонтактнаяИнформация.Вид = &СлужебныйТелефонФизЛица";
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции	

Функция СформироватьНаименованиеВалютногоБанковскогоСчета(БанковскийСчет) Экспорт
	СтрокаНаименования = СокрЛП(БанковскийСчет.НомерСчета)+ ", " + БанковскийСчет.ВалютаДенежныхСредств + ", " + БанковскийСчет.ВидСчета + " в " + БанковскийСчет.Банк.Наименование;
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	Возврат СтрокаНаименования;
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура БанковскиеСчетаПометкаУдаления(Источник, Отказ) Экспорт
	Если Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда
		БанковскийСчетВалютный = ПолучитьБанковскийСчетВалютныйПоТиповому(Источник.Ссылка);
		Если БанковскийСчетВалютный <> Неопределено Тогда
			БанковскийСчетВалютныйОбъект = БанковскийСчетВалютный.ПолучитьОбъект();
			БанковскийСчетВалютныйОбъект.ДополнительныеСвойства.Вставить("УстановкаСнятиеПометкиУдаленияХозяина");
			БанковскийСчетВалютныйОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияПриПроведенииДокумента(Источник, Отказ, РежимПроведения) Экспорт
	РЭЙ_Привилегированный.ДвиженияПоРегистру_РЭЙ_ПлатежиПоКонтрактамВЭД(Источник.Ссылка, Отказ, Ложь);
	РЭЙ_Привилегированный.ДвиженияПоРегистру_РЭЙ_ПоставкиПоКонтрактамВЭД(Источник.Ссылка, Отказ, Ложь);
	
	РЭЙ_ЗадачиСервер.РЭЙ_СозданиеЗадачПриПроведенииДокументаОбработкаПроведения(Источник.Ссылка, Отказ, РежимПроведения);
КонецПроцедуры

Процедура ДействияПриУдаленииПроведенияДокумента(Источник, Отказ) Экспорт
	РЭЙ_ЗадачиСервер.РЭЙ_УдалениеЗадачПриУдаленииПроведенияДокументаОбработкаУдаленияПроведения(Источник.Ссылка, Отказ);
	
	РЭЙ_Привилегированный.ДвиженияПоРегистру_РЭЙ_ПлатежиПоКонтрактамВЭД(Источник.Ссылка, Отказ, Истина);
	РЭЙ_Привилегированный.ДвиженияПоРегистру_РЭЙ_ПоставкиПоКонтрактамВЭД(Источник.Ссылка, Отказ, Истина);
КонецПроцедуры

Процедура ОчисткаРеквизитовПриКопировании(Источник, ОбъектКопирования) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект." + РЭЙ_Универсализация.ИмяДокумента_ПлатежноеПоручение()) Тогда
		// Заявление на перевод валюты
		Источник.РЭЙ_СправкаОВалютныхОперациях = Неопределено;
		Источник.РЭЙ_КурсВЭД = Неопределено;
		Источник.РЭЙ_ВидВалютнойОперации = Неопределено;
		Источник.РЭЙ_РасходыПоПереводу = Неопределено;
		Источник.РЭЙ_НазначениеПлатежаАнгл = Неопределено;
		Источник.РЭЙ_ДополнительнаяИнформация = Неопределено;
		Источник.РЭЙ_ДополнительнаяИнформацияВК = Неопределено;
	Иначе
		МетаданныеОбъекта = Источник.Метаданные();
		РеквизитыОбъекта = МетаданныеОбъекта.Реквизиты;
		
		Для Каждого Реквизит Из РеквизитыОбъекта Цикл
			
			ИмяРеквизита = Реквизит.Имя;
			
			Если Лев(ИмяРеквизита, 4) = "РЭЙ_" Тогда 
				Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И Источник.ЭтоГруппа = Ложь Тогда
					Источник[ИмяРеквизита] = Неопределено;
				ИначеЕсли Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И Источник.ЭтоГруппа Тогда
					Источник[ИмяРеквизита] = Неопределено;
				ИначеЕсли Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
					Источник[ИмяРеквизита] = Неопределено;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	
		
		ТабличныеЧастиОбъекта = МетаданныеОбъекта.ТабличныеЧасти;
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
			
			ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
			
			Если Лев(ИмяТабличнойЧасти, 4) = "РЭЙ_" Тогда 
				Если ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И Источник.ЭтоГруппа = Ложь Тогда
					Источник[ИмяТабличнойЧасти].Очистить();		
				ИначеЕсли ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И Источник.ЭтоГруппа Тогда
					Источник[ИмяТабличнойЧасти].Очистить();		
				ИначеЕсли ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
					Источник[ИмяТабличнойЧасти].Очистить();		
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеСМеханизмамиТиповойКонфигурации

Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	СписокОбъектов.Добавить(Документы.РЭЙ_ЗаявлениеВБанкПС);
	СписокОбъектов.Добавить(Документы.РЭЙ_ПаспортСделки);
	СписокОбъектов.Добавить(Документы.РЭЙ_СправкаОВалютныхОперациях);
	СписокОбъектов.Добавить(Документы.РЭЙ_СправкаОПодтверждающихДокументах);
КонецПроцедуры

#КонецОбласти

Функция ЕстьОбработкаКлиентБанкВЭД() Экспорт
	
	ИмяОбработки = "РЭЙ_КлиентБанкВЭД"; 
	Если Метаданные.Обработки.Найти(ИмяОбработки) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция КраткоеПредставлениеДокумента(ТекДокумент) Экспорт
	Если Не ЗначениеЗаполнено(ТекДокумент) Тогда
		Возврат "";
	ИначеЕсли Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекДокумент)) Тогда
		Возврат "";
	КонецЕсли;
	
	АббревиатураРД = ТекДокумент.Метаданные().Синоним;
	
	ИмяДокумента = ВРег(СокрЛП(ТекДокумент.Метаданные().Имя));
	
	Если ИмяДокумента = ВРег("РЭЙ_ЗаявлениеВБанкПС") Тогда
		АббревиатураРД = "ЗБ";
	ИначеЕсли ИмяДокумента = ВРег("РЭЙ_ЗаявлениеНаВалютообменнуюОперацию") Тогда
		АббревиатураРД = "ЗВОО";
	ИначеЕсли ИмяДокумента = ВРег("РЭЙ_ЗаявлениеНаПереводВалюты") Тогда
		АббревиатураРД = "ЗПИВ";
	ИначеЕсли ИмяДокумента = ВРег("РЭЙ_ПаспортСделки") Тогда
		АббревиатураРД = "ЗПУК";
	ИначеЕсли ИмяДокумента = ВРег("РЭЙ_СправкаОВалютныхОперациях") Тогда
		АббревиатураРД = "СКВО";
	ИначеЕсли ИмяДокумента = ВРег("РЭЙ_СправкаОПодтверждающихДокументах") Тогда
		АббревиатураРД = "СПД";
	ИначеЕсли ИмяДокумента = ВРег("АккредитивПереданный") Тогда					
		АббревиатураРД = "АПер";																						
	ИначеЕсли ИмяДокумента = ВРег("ВозвратТоваровОтПокупателя") Тогда
		АббревиатураРД = "ВТП";
	ИначеЕсли ИмяДокумента = ВРег("ВозвратТоваровОтКлиента") Тогда
		АббревиатураРД = "ВТК";
	ИначеЕсли ИмяДокумента = ВРег("ВозвратТоваровПоставщику") Тогда
		АббревиатураРД = "ВТП";
	ИначеЕсли ИмяДокумента = ВРег("ГТДИмпорт") Тогда					
		АббревиатураРД = "ГТДИ";																						
	ИначеЕсли ИмяДокумента = ВРег("ИнкассовоеПоручениеПереданное") Тогда
		АббревиатураРД = "ИППер";
	ИначеЕсли ИмяДокумента = ВРег("ИнкассовоеПоручениеПолученное") Тогда
		АббревиатураРД = "ИППол";
	ИначеЕсли ИмяДокумента = ВРег("КорректировкаДолга") Тогда
		АббревиатураРД = "КД";
	ИначеЕсли ИмяДокумента = ВРег("ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		АббревиатураРД = "ПОПДС";
	ИначеЕсли ИмяДокумента = ВРег("ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		АббревиатураРД = "ПОСДС";
	ИначеЕсли ИмяДокумента = ВРег("ПлатежноеПоручение") Тогда
		АббревиатураРД = "ПП";
	ИначеЕсли ИмяДокумента = ВРег("ПлатежноеПоручениеВходящее") Тогда
		АббревиатураРД = "ППВ";
	ИначеЕсли ИмяДокумента = ВРег("ПлатежноеПоручениеИсходящее") Тогда
		АббревиатураРД = "ППИ";
	ИначеЕсли ИмяДокумента = ВРег("ПлатежноеТребованиеВыставленное") Тогда
		АббревиатураРД = "ПТВ";
	ИначеЕсли ИмяДокумента = ВРег("ПлатежноеТребованиеПолученное") Тогда
		АббревиатураРД = "ПТП";
	ИначеЕсли ИмяДокумента = ВРег("ПоступлениеДопРасходов") Тогда
		АббревиатураРД = "ПДР";
	ИначеЕсли ИмяДокумента = ВРег("ПоступлениеНаРасчетныйСчет") Тогда					
		АббревиатураРД = "ПРС";																						
	ИначеЕсли ИмяДокумента = ВРег("ПоступлениеТоваровУслуг") Тогда
		АббревиатураРД = "ПТУ";
	ИначеЕсли ИмяДокумента = ВРег("ПриобретениеТоваровУслуг") Тогда
		АббревиатураРД = "ПТУ";
	ИначеЕсли ИмяДокумента = ВРег("ПриобретениеУслугПрочихАктивов") Тогда
		АббревиатураРД = "ПУПА";
	ИначеЕсли ИмяДокумента = ВРег("РеализацияТоваровУслуг") Тогда
		АббревиатураРД = "РТУ";
	ИначеЕсли ИмяДокумента = ВРег("СписаниеСРасчетногоСчета") Тогда					
		АббревиатураРД = "СРС";																						
	ИначеЕсли ИмяДокумента = ВРег("ПоступлениеБезналичныхДенежныхСредств") Тогда					
		АббревиатураРД = "ПБДС";																						
	ИначеЕсли ИмяДокумента = ВРег("СписаниеБезналичныхДенежныхСредств") Тогда					
		АббревиатураРД = "СБДС";																						
	ИначеЕсли ИмяДокумента = ВРег("ТаможеннаяДекларацияИмпорт") Тогда					
		АббревиатураРД = "ГТДИ";																						
	ИначеЕсли ИмяДокумента = ВРег("АктВыполненныхРабот") Тогда					
		АббревиатураРД = "АВР";																						
	ИначеЕсли ИмяДокумента = ВРег("ПоступлениеУслугПрочихАктивов") Тогда					
		АббревиатураРД = "ПУПА";																						
	ИначеЕсли ИмяДокумента = ВРег("РеализацияУслугПрочихАктивов") Тогда					
		АббревиатураРД = "РУПА";																						
	КонецЕсли;
	
	Возврат АббревиатураРД + " №" + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ТекДокумент.Номер, Истина, Истина) + " от " + Формат(ТекДокумент.Дата, "ДФ=dd.MM.yyyy");
	
КонецФункции

// Функция возвращает дату, отстоящую на заданное количество рабочих дней от начальной,
// в соответствии с регламентированным производственным календарем
//
// Параметры:
// ДатаНач      - начальная дата
// ЧислоДней    - количество рабочих дней, на которое искомая дата должна отстоять от начальной
//
Функция ОпределитьДату(ДатаНач, ЧислоДней) Экспорт
	
	Запрос = Новый  Запрос;
	Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
	Запрос.УстановитьПараметр("ЧислоДней",           ЧислоДней);
	Запрос.УстановитьПараметр("РабочийДень",         Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Если ЧислоДней > 0 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ЧислоДней + "
		|	ДанныеПроизводственногоКалендаря.Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ ДанныеПроизводственногоКалендаря.Дата > &ДатаНач
		|	 И (ДанныеПроизводственногоКалендаря.ВидДня = &РабочийДень
		|      ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = &ПредпраздничныйДень)
        |УПОРЯДОЧИТЬ ПО
		|	Дата
		|";
		
	Иначе
		ЧислоДней = -ЧислоДней;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ЧислоДней + "
		|	ДанныеПроизводственногоКалендаря.Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ ДанныеПроизводственногоКалендаря.Дата < &ДатаНач
		|	 И (ДанныеПроизводственногоКалендаря.ВидДня = &РабочийДень
		|      ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = &ПредпраздничныйДень)
        |УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = ЧислоДней Тогда
		Пока Выборка.Следующий() Цикл
			ТекДата = Выборка.Дата;
		КонецЦикла;
		Возврат ТекДата;
	Иначе
		#Если Клиент Тогда
		Сообщить("Не удалось рассчитать дату начала периода. Проверьте, что для рассчитываемого периода заполнен регистр сведений ""Производственный календарь"".");
		#КонецЕсли
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПересчитатьИзВалютыВВалюту(Сумма, Дата, ВалютаНач, ВалютаКон) Экспорт
	Если Не ЗначениеЗаполнено(Сумма) Или Не ЗначениеЗаполнено(Дата) Или Не ЗначениеЗаполнено(ВалютаНач) Или Не ЗначениеЗаполнено(ВалютаКон) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ВалютаНач = ВалютаКон Тогда
		Возврат Сумма;
	Иначе
		СтруктураКурсаВалютыНач = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНач, Дата);
		СтруктураКурсаВалютыКон = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКон, Дата);
		
		Результат = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма,
			ВалютаНач, ВалютаКон,
			СтруктураКурсаВалютыНач.Курс, СтруктураКурсаВалютыКон.Курс,
			СтруктураКурсаВалютыНач.Кратность, СтруктураКурсаВалютыКон.Кратность);	
		
		Возврат Результат;
	КонецЕсли;
КонецФункции

Функция ПолучитьСостояниеЗакрытияПаспортаСделки(ПаспортСделки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПаспортСделки", ПаспортСделки);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РЭЙ_ЗаявлениеВБанкПСПаспортСделки.Ссылка.ДатаЗакрытияПС КАК Дата,
	|	РЭЙ_ЗаявлениеВБанкПСПаспортСделки.Ссылка.ОснованиеЗакрытияПС КАК Основание
	|ИЗ
	|	Документ.РЭЙ_ЗаявлениеВБанкПС.ПаспортаСделок КАК РЭЙ_ЗаявлениеВБанкПСПаспортСделки
	|ГДЕ
	|	РЭЙ_ЗаявлениеВБанкПСПаспортСделки.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.РЭЙ_ВидыОперацийЗаявлениеВБанк.ЗакрытиеПаспортаСделки)
	|	И РЭЙ_ЗаявлениеВБанкПСПаспортСделки.ПаспортСделки.Ссылка = &ПаспортСделки
	|	И РЭЙ_ЗаявлениеВБанкПСПаспортСделки.Ссылка.Проведен
	|	И РЭЙ_ЗаявлениеВБанкПСПаспортСделки.Ссылка.ДатаЗакрытияПС <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПечОснованиеЗакрытия = "";
		Если ЗначениеЗаполнено(Выборка.Основание) Тогда
			ПечОснованиеЗакрытия = Выборка.Основание.Метаданные().ЗначенияПеречисления.Получить(Перечисления.РЭЙ_ОснованияЗакрытияПС.Индекс(Выборка.Основание)).Имя;
			ПечОснованиеЗакрытия = СтрЗаменить(ПечОснованиеЗакрытия, "пункт_", "");
			ПечОснованиеЗакрытия = СтрЗаменить(ПечОснованиеЗакрытия, "_", ".");
		КонецЕсли;
		
		Результат = Новый Структура("Закрыт, Дата, Основание", Истина, Выборка.Дата, ПечОснованиеЗакрытия);
	Иначе
		Результат = Новый Структура("Закрыт", Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаРамочногоКонтракта(текДокумент) Экспорт
	Если текДокумент.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		ДоговорКонтрагента = ПолучитьДоговорКонтрагентаПоРасчетномуДокументу(текДокумент);
		КонтрактВЭД = ПолучитьКонтрактВЭДПоДоговоруКонтрагента(ДоговорКонтрагента);
		Если ЗначениеЗаполнено(КонтрактВЭД) Тогда
			Если КонтрактВЭД.РамочныйКонтракт Тогда
				Если КонтрактВЭД.ДоговорКонтрагента = ДоговорКонтрагента Тогда
					Сообщить("Договор """ + ДоговорКонтрагента + """ является рамочным и не подлежит указанию в первичных документах. Укажите в первичном документе дополнительное соглашение к рамочному контракту.");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Вычисляет _разницу_ (в днях) между двумя датами.
// Чтобы вычислить _длину_ периода - нужно добавить 1
Функция РазницаДат(ДатаС, ДатаПо) Экспорт
	Разн=Цел((НачалоДня(ДатаПо) - НачалоДня(ДатаС)) / (60 * 60 * 24));
	Возврат Разн;
КонецФункции // глРазницаДат()

//// ПРОВЕРЕНО 

Функция ПолучитьТаблицуРасчетныхДокументов() Экспорт
	ТаблицаРасчетныхДокументов = Новый ТаблицаЗначений;
	ТаблицаРасчетныхДокументов.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	ТаблицаРасчетныхДокументов.Колонки.Добавить("ВидВРег", Новый ОписаниеТипов("Строка"));//Вид документа в верхнем регистре
	ТаблицаРасчетныхДокументов.Колонки.Добавить("Направление", Новый ОписаниеТипов("Число",,,, Новый КвалификаторыЧисла(1, 0)));
	ТаблицаРасчетныхДокументов.Колонки.Добавить("Проведение", Новый ОписаниеТипов("Булево")); //Разрешено или запрещено проведение
	ТаблицаРасчетныхДокументов.Колонки.Добавить("ЕстьРасшифровкаПлатежа", Новый ОписаниеТипов("Булево")); //Признак наличия ТЧ РасшифровкаПлатежа
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.Направление = 1;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "ПлатежноеПоручениеВходящее";
	НоваяСтрока.Направление = 1;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "ПлатежныйОрдерПоступлениеДенежныхСредств";
	НоваяСтрока.Направление = 1;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "ПоступлениеБезналичныхДенежныхСредств";
	НоваяСтрока.Направление = 1;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "СписаниеСРасчетногоСчета";
	НоваяСтрока.Направление = 2;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "ПлатежноеПоручениеИсходящее";
	НоваяСтрока.Направление = 2;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "ПлатежныйОрдерСписаниеДенежныхСредств";
	НоваяСтрока.Направление = 2;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "РЭЙ_ЗаявлениеНаПереводВалюты";
	НоваяСтрока.Направление = 2;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "АккредитивПереданный";
	НоваяСтрока.Направление = 2;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "ПлатежноеПоручение";
	НоваяСтрока.Направление = 2;
	
	НоваяСтрока = ТаблицаРасчетныхДокументов.Добавить();
	НоваяСтрока.Вид = "СписаниеБезналичныхДенежныхСредств";
	НоваяСтрока.Направление = 2;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетныхДокументов Цикл
		СтрокаТаблицы.ВидВРег = ВРег(СтрокаТаблицы.Вид);
	КонецЦикла;
	
	//Удаление видов документов не существующих в текущей конфигурации  
	т = 0;
	Пока т < ТаблицаРасчетныхДокументов.Количество() Цикл
		МетаданныеДокумента = Метаданные.Документы.Найти(ТаблицаРасчетныхДокументов[т].Вид);
		Если МетаданныеДокумента = Неопределено Тогда
			ТаблицаРасчетныхДокументов.Удалить(т);
		Иначе
			Если МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
				ТаблицаРасчетныхДокументов[т].Проведение = Истина;
			Иначе
				ТаблицаРасчетныхДокументов[т].Проведение = Ложь;
			КонецЕсли;
			
			Если МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
				ТаблицаРасчетныхДокументов[т].ЕстьРасшифровкаПлатежа = Истина;
			Иначе
				ТаблицаРасчетныхДокументов[т].ЕстьРасшифровкаПлатежа = Ложь;
			КонецЕсли;
			
			т = т + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРасчетныхДокументов;
КонецФункции

Функция ФизЛицоПользователя(Пользователь) Экспорт
	Возврат Пользователь.ФизическоеЛицо;
КонецФункции
	
Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайла) Экспорт
	
	Если ТипЗнч(РасширениеФайла) <> Тип("Строка")
	 ИЛИ ПустаяСтрока(РасширениеФайла) Тогда
		
		Возврат 0;
	КонецЕсли;
	
	РасширениеФайла = НРег(СокрЛП(РасширениеФайла));
	
	Если Сред(РасширениеФайла, 1, 1) <> "." Тогда
		РасширениеФайла = "." + РасширениеФайла;
	КонецЕсли;
	Расширение = НРег(РасширениеФайла) + ";";
	
	Если Найти(".dt;.1cd;.cf;.cfu;", Расширение) <> 0 Тогда
		Возврат 6; //Файлы 1С.
		
	ИначеЕсли Расширение = ".mxl;" Тогда
		Возврат 8; //Табличный Файл.
		
	ИначеЕсли Найти(".txt;.log;.ini;", Расширение) <> 0 Тогда
		Возврат 10; // Текстовый Файл.
		
	ИначеЕсли Расширение = ".epf;" Тогда
		Возврат 12; //Внешние обработки.
		
	ИначеЕсли Найти(".ico;.wmf;.emf;",Расширение) <> 0 Тогда
		Возврат 14; // Картинки.
		
	ИначеЕсли Найти(".htm;.html;.url;.mht;.mhtml;",Расширение) <> 0 Тогда
		Возврат 16; // HTML.
		
	ИначеЕсли Найти(".doc;.dot;.rtf;",Расширение) <> 0 Тогда
		Возврат 18; // Файл Microsoft Word.
		
	ИначеЕсли Найти(".xls;.xlw;",Расширение) <> 0 Тогда
		Возврат 20; // Файл Microsoft Excel.
		
	ИначеЕсли Найти(".ppt;.pps;",Расширение) <> 0 Тогда
		Возврат 22; // Файл Microsoft PowerPoint.
		
	ИначеЕсли Найти(".vsd;",Расширение) <> 0 Тогда
		Возврат 24; // Файл Microsoft Visio.
		
	ИначеЕсли Найти(".mpp;",Расширение) <> 0 Тогда
		Возврат 26; // Файл Microsoft Visio.
		
	ИначеЕсли Найти(".mdb;.adp;.mda;.mde;.ade;",Расширение) <> 0 Тогда
		Возврат 28; // База данных Microsoft Access.
		
	ИначеЕсли Найти(".xml;",Расширение) <> 0 Тогда
		Возврат 30; // xml.
		
	ИначеЕсли Найти(".msg;",Расширение) <> 0 Тогда
		Возврат 32; // Письмо электронной почты.
		
	ИначеЕсли Найти(".zip;.rar;.arj;.cab;.lzh;.ace;",Расширение) <> 0 Тогда
		Возврат 34; // Архивы.
		
	ИначеЕсли Найти(".exe;.com;.bat;.cmd;",Расширение) <> 0 Тогда
		Возврат 36; // Исполняемые файлы.
		
	ИначеЕсли Найти(".grs;",Расширение) <> 0 Тогда
		Возврат 38; // Графическая схема.
		
	ИначеЕсли Найти(".geo;",Расширение) <> 0 Тогда
		Возврат 40; // Географическая схема.
		
	ИначеЕсли Найти(".jpg;.jpeg;.jp2;.jpe;",Расширение) <> 0 Тогда
		Возврат 42; // jpg.
		
	ИначеЕсли Найти(".bmp;.dib;",Расширение) <> 0 Тогда
		Возврат 44; // bmp.
		
	ИначеЕсли Найти(".tif;.tiff;",Расширение) <> 0 Тогда
		Возврат 46; // tif.
		
	ИначеЕсли Найти(".gif;",Расширение) <> 0 Тогда
		Возврат 48; // gif.
		
	ИначеЕсли Найти(".png;",Расширение) <> 0 Тогда
		Возврат 50; // png.
		
	ИначеЕсли Найти(".pdf;",Расширение) <> 0 Тогда
		Возврат 52; // pdf.
		
	ИначеЕсли Найти(".odt;",Расширение) <> 0 Тогда
		Возврат 54; // Open Office writer.
		
	ИначеЕсли Найти(".odf;",Расширение) <> 0 Тогда
		Возврат 56; // Open Office math.
		
	ИначеЕсли Найти(".odp;",Расширение) <> 0 Тогда
		Возврат 58; // Open Office Impress.
		
	ИначеЕсли Найти(".odg;",Расширение) <> 0 Тогда
		Возврат 60; // Open Office draw.
		
	ИначеЕсли Найти(".ods;",Расширение) <> 0 Тогда
		Возврат 62; // Open Office calc.
		
	ИначеЕсли Найти(".mp3;",Расширение) <> 0 Тогда
		Возврат 64;
		
	ИначеЕсли Найти(".erf;",Расширение) <> 0 Тогда
		Возврат 66; // Внешние отчеты.
		
	ИначеЕсли Найти(".docx;",Расширение) <> 0 Тогда
		Возврат 68; // Файл Microsoft Word docx.
		
	ИначеЕсли Найти(".xlsx;",Расширение) <> 0 Тогда
		Возврат 70; // Файл Microsoft Excel xlsx.
		
	ИначеЕсли Найти(".pptx;",Расширение) <> 0 Тогда
		Возврат 72; // Файл Microsoft PowerPoint pptx.
		
	ИначеЕсли Найти(".p7s;",Расширение) <> 0 Тогда
		Возврат 74; // Файл подписи.
		
	ИначеЕсли Найти(".p7m;",Расширение) <> 0 Тогда
		Возврат 76; // зашифрованное сообщение.
	Иначе
		Возврат 4;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСуммуДокументаДляСПД(текДокумент, текКонтрактВЭД, текНомерГТД = Неопределено) Экспорт
	Перем Результат;
	
	текВидДокумента = ПолучитьВидДокумента(текДокумент);
	Если текВидДокумента = ВРег("ГТДИмпорт") Тогда 
		Результат = текДокумент.Товары.Итог("ФактурнаяСтоимость"); 
	ИначеЕсли (текВидДокумента = ВРег("ПоступлениеТоваровУслуг") Или текВидДокумента = ВРег("ПриобретениеТоваровУслуг"))
		И ЗначениеЗаполнено(текНомерГТД) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ГТДИмпортТовары.ФактурнаяСтоимость), 0) КАК ФактурнаяСтоимость,
		|	ГТДИмпортТовары.Ссылка
		|ИЗ
		|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
		|ГДЕ
		|	ГТДИмпортТовары.Ссылка.Проведен
		|	И ГТДИмпортТовары.Ссылка.НомерГТД = &НомерГТД
		|	И ГТДИмпортТовары.ДокументПартии = &ДокументПартии
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДИмпортТовары.Ссылка";
		
		Запрос.УстановитьПараметр("НомерГТД", текНомерГТД);
		Запрос.УстановитьПараметр("ДокументПартии", текДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ФактурнаяСтоимость = Выборка.ФактурнаяСтоимость;
		текГТД = Выборка.Ссылка;
		Если текКонтрактВЭД.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = Ложь Тогда
			Результат = ФактурнаяСтоимость;
		Иначе
			Если текГТД.Разделы[0].ТаможеннаяСтоимостьВВалютеРеглУчета Тогда
				Результат = ФактурнаяСтоимость;
			Иначе
				Результат = ПересчитатьИзВалютыВВалюту(ФактурнаяСтоимость, текГТД.Дата, текКонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов, Константы.ВалютаРегламентированногоУчета.Получить());
			КонецЕсли;
		КонецЕсли;
	Иначе
		// TODO Необходим другой алгоритм заполнения для флага "справки ВК с НДС", пока используется сумма документа
		
		Результат = текДокумент.СуммаДокумента;
		
		//Если текКонтрактВЭД.СправкиВКсНДС Тогда
		//	Результат = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(текДокумент);
		//Иначе
		//	Результат = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(текДокумент) - УчетНДСПереопределяемый.ПолучитьНДСДокумента(текДокумент);
		//КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСуммуДокументаДляСВО(текДокумент, текКонтрактВЭД) Экспорт
	Результат = Новый Структура("СуммаВВалютеДокумента, СуммаВВалютеКонтракта, СуммаВВалютеКонтрактаУказанаВДокументе", 0, 0, Ложь);
	
	МетаданныеДокумента = текДокумент.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Результат.СуммаВВалютеДокумента = текДокумент.РасшифровкаПлатежа.Итог("Сумма");
		Результат.СуммаВВалютеКонтракта = текДокумент.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");
		Результат.СуммаВВалютеКонтрактаУказанаВДокументе = Истина;
	Иначе
		текДатаОплаты = ПолучитьДатуОплатыРасчетногоДокумента(текДокумент);
		Результат.СуммаВВалютеДокумента = текДокумент.СуммаДокумента;
		Если ЗначениеЗаполнено(текКонтрактВЭД) Тогда
			ВалютаКонтракта = текКонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			ВалютаКонтракта = текДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		Результат.СуммаВВалютеКонтракта = ПересчитатьИзВалютыВВалюту(Результат.СуммаВВалютеДокумента, текДатаОплаты, текДокумент.ВалютаДокумента, ВалютаКонтракта);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СписокБанковОрганизации(Организация, НеЯвляетсяРезидентом = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БанковскиеСчета.Банк
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.Банк.РЭЙ_НеЯвляетсяРезидентом = &НеЯвляетсяРезидентом";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НеЯвляетсяРезидентом", НеЯвляетсяРезидентом);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку(0);
КонецФункции
		
Функция СписокДоступныхКонтрагентов(ВидДоговора = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РЭЙ_КонтрактыВЭД.Контрагент
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	|ГДЕ
	|	РЭЙ_КонтрактыВЭД.Контрагент.РЭЙ_НеЯвляетсяРезидентом";
	
	Если ВидДоговора <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " 
		|	И РЭЙ_КонтрактыВЭД.ДоговорКонтрагента.ВидДоговора В (&ВидДоговора)";
		
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	КонецЕсли;
	
	СписокКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");	
	
	Возврат СписокКонтрагентов; 	
КонецФункции

Функция ПредставлениеДни(Ном) Экспорт
	СоответствиеПредставлений = ПолучитьСоответствиеПредставлениеДни();
		
	Представление = СоответствиеПредставлений.Получить(Ном);
	
	Если Представление = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Представление;
	КонецЕсли;
КонецФункции	

Функция ПолучитьСоответствиеПредставлениеДни() Экспорт
	Результат = Новый Соответствие;
	
	Результат.Вставить(1, "Календарные");
	Результат.Вставить(2, "Рабочие");
	
	Возврат Результат;
КонецФункции

Функция ПредставлениеДатаСтартаТаймера(Ном) Экспорт
	СоответствиеПредставлений = ПолучитьСоответствиеПредставлениеДатаСтартаТаймера();
		
	Представление = СоответствиеПредставлений.Получить(Ном);
	
	Если Представление = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Представление;
	КонецЕсли;
КонецФункции	

Функция ПолучитьСоответствиеПредставлениеДатаСтартаТаймера() Экспорт
	Результат = Новый Соответствие;
	
	Результат.Вставить(1,  "Дата движения (в т.ч. плановая) по банковскому счету");
	Результат.Вставить(2,  "Первое число месяца, следующего за отчетным");
	Результат.Вставить(3,  "Дата выпуска с таможни");
	Результат.Вставить(4,  "Дата, следующая за датой принятия ГТД таможней");
	Результат.Вставить(5,  "Дата принятия СКВО третьего лица банком УК");
	Результат.Вставить(6,  "Дата не определена (задачи не создаются)");
	Результат.Вставить(7,  "Дата контракта ВЭД");
	Результат.Вставить(8,  "Дата ожидаемого срока минус указываемое количество дней");
	Результат.Вставить(9,  "Дата превышения суммы контракта");
	Результат.Вставить(10, "Дата превышения срока действия контракта");
	Результат.Вставить(11, "Дата уведомления об окончании срока учета контракта при автопролонгации");
	Результат.Вставить(12, "Последнее число отчетного месяца");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКлючСоответствия(Соответствие, Значение) Экспорт	
	Для Каждого ЭлементСоответствия Из Соответствие Цикл
		Если ЭлементСоответствия.Значение = Значение Тогда
			Возврат ЭлементСоответствия.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	Возврат Ссылка[ИмяРеквизита];
КонецФункции

Процедура УстановитьРуководителей(Объект) Экспорт
	Руководители = РЭЙ_Универсализация.ПолучитьРуководителей(Объект.Организация, Объект.Дата); 
	Объект.Руководитель = Руководители.Руководитель;
	Объект.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;	
КонецПроцедуры

Функция ПолучитьСоответствиеПредставлениеСправки() Экспорт
	Результат = Новый Соответствие;
	
	Результат.Вставить(Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОВалютныхОперациях,           "Справка о кодах видов операций (Валютные счета)");
	Результат.Вставить(Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОПоступленииВалютыРФ,         "Справка о кодах видов операций (Рублевые счета)");
	Результат.Вставить(Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом, "Справка о кодах видов операций (Счета за рубежом)");
	
	Результат.Вставить(Перечисления.РЭЙ_ПроцедураДекларирования.ПодачаГТДДоВыпускаСТаможни, "Справка о подтверждающих документах (С подачей ГТД)");
	Результат.Вставить(Перечисления.РЭЙ_ПроцедураДекларирования.БезПодачиГТД,               "Справка о подтверждающих документах (Без подачи ГТД)");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСоответствиеПредставлениеНаправлениеПлатежа() Экспорт
	Результат = Новый Соответствие;
	
	Результат.Вставить(1, "Зачисление ДС");
	Результат.Вставить(2, "Списание ДС");
	Результат.Вставить(0, "Списание по аккредитиву");
	Результат.Вставить(9, "Прочее");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСоответствиеПредставлениеНаправлениеПоставки() Экспорт
	Результат = Новый Соответствие;
	
	Результат.Вставить(1, "Поступление ТУ");
	Результат.Вставить(2, "Реализация ТУ");
	
	Возврат Результат;
КонецФункции

Функция ЕстьДублированиеПаспортаСделкиПоКонтракту(КонтрактВЭД, ПаспортСделки) Экспорт
	Если Не ЗначениеЗаполнено(КонтрактВЭД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_ПаспортСделки.Ссылка
	|ИЗ
	|	Документ.РЭЙ_ПаспортСделки КАК РЭЙ_ПаспортСделки
	|ГДЕ
	|	РЭЙ_ПаспортСделки.КонтрактВЭД = &КонтрактВЭД
	|	И РЭЙ_ПаспортСделки.Ссылка <> &ПаспортСделки
	|	И РЭЙ_ПаспортСделки.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("КонтрактВЭД", КонтрактВЭД);
	Запрос.УстановитьПараметр("ПаспортСделки", ПаспортСделки);
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ


Функция НеобходимостьОбновленияПодсистемыВЭД() Экспорт
	ОбработкаОбновления = Обработки.РЭЙ_ОбновлениеПодсистемыВЭД.Создать();
	Если Константы.РЭЙ_НомерВерсииПодсистемыВЭД.Получить() <> ОбработкаОбновления.НомерПоследнейВерсии() 
		И ОбработкаОбновления.ВыполненыПроцедурыОбновленияОсновнойКонфигурации() Тогда
			Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ДоступнаРольВалютныйКонтролер() Экспорт
	Возврат РольДоступна("РЭЙ_ВалютныйКонтролер");
КонецФункции

Функция ЕстьПравоОбновленияПодсистемыВЭД() Экспорт
	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("РЭЙ_ВалютныйКонтролер");
КонецФункции

Функция ДоступнаПодсистемаВЭД() Экспорт
	Возврат РольДоступна("РЭЙ_ВалютныйКонтролер") Или РольДоступна("РЭЙ_ЮристПоВЭД");
КонецФункции

Функция ПолучитьДатуОплатыРасчетногоДокумента(РасчетныйДокумент) Экспорт
	Если РасчетныйДокумент.Метаданные().Реквизиты.Найти("Оплачено") <> Неопределено И РасчетныйДокумент.Метаданные().Реквизиты.Найти("ДатаОплаты") <> Неопределено Тогда
		Если РасчетныйДокумент.Оплачено Тогда
			Возврат РасчетныйДокумент.ДатаОплаты;
		Иначе
			Возврат РасчетныйДокумент.Дата;
		КонецЕсли;
	Иначе
		Возврат РасчетныйДокумент.Дата;
	КонецЕсли;
КонецФункции

Функция ПолучитьСсылкиНаАктуальныеСПД(МассивКонтрактовВЭД = Неопределено, ДатаФормирования, ДокументИсключения = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СПД.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СПД.Корректировка
	|			ТОГДА СПД.Основание
	|		ИНАЧЕ СПД.Ссылка
	|	КОНЕЦ КАК ПервичнаяСправка,
	|	СПД.Дата КАК Дата
	|ПОМЕСТИТЬ СправкиСПервичными
	|ИЗ
	|	Документ.РЭЙ_СправкаОПодтверждающихДокументах КАК СПД
	|ГДЕ
	|	СПД.Проведен
	|	И (&ПоВсемКонтрактамВЭД
	|			ИЛИ СПД.КонтрактВЭД В (&МассивКонтрактовВЭД))
	|	И СПД.Дата <= &Дата
	|	И СПД.Ссылка <> &ДокументИсключения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкиСПервичными.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СправкиСПервичными.ПервичнаяСправка КАК ПервичнаяСправка,
	|		МАКСИМУМ(СправкиСПервичными.Дата) КАК Дата
	|	ИЗ
	|		СправкиСПервичными КАК СправкиСПервичными
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СправкиСПервичными.ПервичнаяСправка) КАК МаксимальныеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправкиСПервичными КАК СправкиСПервичными
	|		ПО МаксимальныеДаты.Дата = СправкиСПервичными.Дата
	|			И МаксимальныеДаты.ПервичнаяСправка = СправкиСПервичными.ПервичнаяСправка";
		
	Запрос.УстановитьПараметр("Дата", ДатаФормирования);
	Запрос.УстановитьПараметр("ДокументИсключения", ДокументИсключения);
	Если МассивКонтрактовВЭД = Неопределено Тогда
		Запрос.УстановитьПараметр("МассивКонтрактовВЭД", Новый Массив());
		Запрос.УстановитьПараметр("ПоВсемКонтрактамВЭД", Истина);
	Иначе
		Запрос.УстановитьПараметр("МассивКонтрактовВЭД", МассивКонтрактовВЭД);
		Запрос.УстановитьПараметр("ПоВсемКонтрактамВЭД", Ложь);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СсылкиНаСправкиСПД = (Новый Массив);
	Иначе
		СсылкиНаСправкиСПД = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат СсылкиНаСправкиСПД;
КонецФункции

Функция ПолучитьСсылкиНаАктуальныеСВО(МассивКонтрактовВЭД = Неопределено, ДатаФормирования, ДокументИсключения = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СВО.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СВО.Ссылка.Корректировка
	|			ТОГДА СВО.Ссылка.Основание
	|		ИНАЧЕ СВО.Ссылка
	|	КОНЕЦ КАК ПервичнаяСправка,
	|	СВО.Ссылка.Дата КАК Дата
	|ПОМЕСТИТЬ СправкиСПервичными
	|ИЗ
	|	Документ.РЭЙ_СправкаОВалютныхОперациях.ВалютныеОперации КАК СВО
	|ГДЕ
	|	СВО.Ссылка.Проведен
	|	И (&ПоВсемКонтрактамВЭД
	|			ИЛИ СВО.КонтрактВЭД В (&МассивКонтрактовВЭД))
	|	И СВО.Ссылка.Дата <= &Дата
	|	И СВО.Ссылка <> &ДокументИсключения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СВО_Ручные.Ссылка,
	|	ВЫБОР
	|		КОГДА СВО_Ручные.Ссылка.Корректировка
	|			ТОГДА СВО_Ручные.Ссылка.Основание
	|		ИНАЧЕ СВО_Ручные.Ссылка
	|	КОНЕЦ,
	|	СВО_Ручные.Ссылка.Дата
	|ИЗ
	|	Документ.РЭЙ_СправкаОВалютныхОперациях.ВалютныеОперацииРучные КАК СВО_Ручные
	|ГДЕ
	|	СВО_Ручные.Ссылка.Проведен
	|	И (&ПоВсемКонтрактамВЭД
	|			ИЛИ СВО_Ручные.КонтрактВЭД В (&МассивКонтрактовВЭД))
	|	И СВО_Ручные.Ссылка.Дата <= &Дата
	|	И СВО_Ручные.Ссылка <> &ДокументИсключения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкиСПервичными.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СправкиСПервичными.ПервичнаяСправка КАК ПервичнаяСправка,
	|		МАКСИМУМ(СправкиСПервичными.Дата) КАК Дата
	|	ИЗ
	|		СправкиСПервичными КАК СправкиСПервичными
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СправкиСПервичными.ПервичнаяСправка) КАК МаксимальныеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправкиСПервичными КАК СправкиСПервичными
	|		ПО МаксимальныеДаты.Дата = СправкиСПервичными.Дата
	|			И МаксимальныеДаты.ПервичнаяСправка = СправкиСПервичными.ПервичнаяСправка";
		
	Запрос.УстановитьПараметр("Дата", ДатаФормирования);
	Запрос.УстановитьПараметр("ДокументИсключения", ДокументИсключения);
	Если МассивКонтрактовВЭД = Неопределено Тогда
		Запрос.УстановитьПараметр("МассивКонтрактовВЭД", Новый Массив());
		Запрос.УстановитьПараметр("ПоВсемКонтрактамВЭД", Истина);
	Иначе
		Запрос.УстановитьПараметр("МассивКонтрактовВЭД", МассивКонтрактовВЭД);
		Запрос.УстановитьПараметр("ПоВсемКонтрактамВЭД", Ложь);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СсылкиНаСправкиСВО = (Новый Массив);
	Иначе
		СсылкиНаСправкиСВО = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат СсылкиНаСправкиСВО;
КонецФункции

Функция ПолучитьВидДокумента(текДокумент) Экспорт
	Если текДокумент = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ВРег(СокрЛП(текДокумент.Метаданные().Имя));
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерПодтверждающегоДокумента(СтрокаТЧ, ЭтоРучныеОперации = Ложь) Экспорт
	НомерПД = "";
	Если ЗначениеЗаполнено(СтрокаТЧ.НомерГТД) Тогда
		НомерПД = СтрокаТЧ.НомерГТД.Код;
	Иначе
		Если ЭтоРучныеОперации Тогда
			НомерПД = СтрокаТЧ.НомерНакладной;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				Если СтрокаТЧ.Документ.Метаданные().Реквизиты.Найти("РЭЙ_НомерПодтверждающегоДокумента") <> Неопределено Тогда
					НомерПД = СтрокаТЧ.Документ.РЭЙ_НомерПодтверждающегоДокумента;
				КонецЕсли;
				Если ПустаяСтрока(НомерПД) Тогда
					Если СтрокаТЧ.Документ.Метаданные().Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено Тогда
						НомерПД = СтрокаТЧ.Документ.НомерВходящегоДокумента;
					Иначе
						НомерПД = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТЧ.Документ.Номер, Истина, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НомерПД = СокрЛП(НомерПД);
	Если ПустаяСтрока(НомерПД) Тогда
		НомерПД = "БН";
	КонецЕсли;
	Возврат НомерПД;
КонецФункции

Функция ПолучитьДатуПодтверждающегоДокумента(СтрокаТЧ, ЭтоРучныеОперации = Ложь) Экспорт
	ДатаПД = "";
	Если ЗначениеЗаполнено(СтрокаТЧ.ДатаШтампаТаможни) Тогда
		ДатаПД = СтрокаТЧ.ДатаШтампаТаможни;
	Иначе
		Если ЭтоРучныеОперации Тогда
		Иначе
			Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				Если СтрокаТЧ.Документ.Метаданные().Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Документ.ДатаВходящегоДокумента) Тогда
						ДатаПД = СтрокаТЧ.Документ.ДатаВходящегоДокумента;
					Иначе
						ДатаПД = СтрокаТЧ.Документ.Дата;
					КонецЕсли;
				Иначе
					ДатаПД = СтрокаТЧ.Документ.Дата;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ДатаПД;
КонецФункции
 
Функция ПолучитьКоличествоНевыполненныхЗадач() Экспорт
	Результат = 0;
	
	СписокРолей = Новый СписокЗначений;
	Если РольДоступна("РЭЙ_ВалютныйКонтролер") Тогда
		СписокРолей.Добавить(Справочники.РЭЙ_РолиИсполнителей.РЭЙ_ВалютныйКонтролер);
	КонецЕсли;
	Если РольДоступна("РЭЙ_ЮристПоВЭД") Тогда
		СписокРолей.Добавить(Справочники.РЭЙ_РолиИсполнителей.Юрист);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РЭЙ_ЗадачиВЭД.Ссылка) КАК КоличествоЗадач
	|ИЗ
	|	Задача.РЭЙ_ЗадачиВЭД КАК РЭЙ_ЗадачиВЭД
	|ГДЕ
	|	НЕ РЭЙ_ЗадачиВЭД.ПометкаУдаления
	|	И НЕ РЭЙ_ЗадачиВЭД.Выполнена
	|	И РЭЙ_ЗадачиВЭД.СтатусСправкиОВалютномКонтроле = &СтатусСправкиОВалютномКонтроле
	|	И РЭЙ_ЗадачиВЭД.Роль В(&Роль)";

	Запрос.УстановитьПараметр("Роль", СписокРолей);
	Запрос.УстановитьПараметр("СтатусСправкиОВалютномКонтроле", Перечисления.РЭЙ_СтатусыСправокВалютногоКонтроля.СправкаПодлежитСозданию);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Результат = ВыборкаДетальныеЗаписи.КоличествоЗадач;
		
	КонецЕсли;

	Возврат Результат;	
КонецФункции

Процедура РекурсивноЗаполнитьСписокЭлементовФормыДляОформления(ЭлементУсловногоОформления, ЭлементУправления, ИсключаемыйЭлемент) Экспорт
	Для Каждого текПоле Из ЭлементУправления.ПодчиненныеЭлементы Цикл
		Если текПоле.Имя <> ИсключаемыйЭлемент Тогда
			ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(текПоле.Имя);
			
			Если ТипЗнч(текПоле) = Тип("ГруппаФормы") Тогда
				РекурсивноЗаполнитьСписокЭлементовФормыДляОформления(ЭлементУсловногоОформления, текПоле, ИсключаемыйЭлемент)
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОтобразитьЗадачиВЭДнаРабочемСтоле() Экспорт
	НастройкиНачальнойСтраницы = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиНачальнойСтраницы");
	Если НастройкиНачальнойСтраницы = Неопределено Тогда
		НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	КонецЕсли;
	СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
	СоставФорм.ПраваяКолонка.Очистить();
	СоставФорм.ПраваяКолонка.Добавить("Задача.РЭЙ_ЗадачиВЭД.Форма.ФормаСписка");
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
КонецПроцедуры

Функция ПолучитьФИОФизлица(ФизЛицо, ДатаСреза) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ, ФизическиеЛица.Наименование) КАК ФИОПолное
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|				&ДатаСреза,
	|				ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
	|					И ФизическоеЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВозвращаемаяСтрока	=  Выборка.ФИОПолное;
	Иначе 
		ВозвращаемаяСтрока	= "";
	КонецЕсли;
	
	Возврат ВозвращаемаяСтрока;
	
КонецФункции

Процедура ДобавитьКнопкуОткрытьФормуПараметрыВЭД(Форма, ИмяКомаднойПанели = "ФормаКоманднаяПанель") Экспорт
	КомандаВЭД	= Форма.Команды.Добавить("РЭЙ_ОткрытьФормуПараметрыВЭД");
	КомандаВЭД.Действие	= "РЭЙ_ОткрытьФормуПараметрыВЭД";
	
	НоваяКнопка = Форма.Элементы.Добавить("ВЭД", Тип("КнопкаФормы"), Форма.Элементы[ИмяКомаднойПанели]);

	НоваяКнопка.ИмяКоманды 	= "РЭЙ_ОткрытьФормуПараметрыВЭД";
	НоваяКнопка.Заголовок 	= "ВЭД";
КонецПроцедуры

Функция ПостроительСтроки(стрШаблон, 
	Параметр0 = Неопределено, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, 
	Параметр5 = Неопределено, Параметр6 = Неопределено, Параметр7 = Неопределено, Параметр8 = Неопределено, Параметр9 = Неопределено) Экспорт 
	
	Результат = стрШаблон;
	Если Параметр0 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{0}", Параметр0);
	КонецЕсли;
	Если Параметр1 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{1}", Параметр1);
	КонецЕсли;
	Если Параметр2 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{2}", Параметр2);
	КонецЕсли;
	Если Параметр3 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{3}", Параметр3);
	КонецЕсли;
	Если Параметр4 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{4}", Параметр4);
	КонецЕсли;
	Если Параметр5 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{5}", Параметр5);
	КонецЕсли;
	Если Параметр6 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{6}", Параметр6);
	КонецЕсли;
	Если Параметр7 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{7}", Параметр7);
	КонецЕсли;
	Если Параметр8 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{8}", Параметр8);
	КонецЕсли;
	Если Параметр9 <> Неопределено Тогда
		Результат = СтрЗаменить(Результат, "{9}", Параметр9);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьДатуКонтракта(КонтрактВЭД) Экспорт
	Если ЗначениеЗаполнено(КонтрактВЭД.КонтрактДатаПодписания) Или ЗначениеЗаполнено(КонтрактВЭД.КонтрактДатаНачала) Тогда
		Возврат Макс(КонтрактВЭД.КонтрактДатаПодписания, КонтрактВЭД.КонтрактДатаНачала);
	Иначе
		Возврат КонтрактВЭД.КонтрактДатаСоставления;
	КонецЕсли;
КонецФункции

Функция ПолучитьТаблицуКлассификатораСтран() Экспорт
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КодЧисловой", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НаименованиеАнгл", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КодАльфа2", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КодАльфа3", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("УчастникЕАЭС", Новый ОписаниеТипов("Булево"));
	
	Макет = Справочники.СтраныМира.ПолучитьМакет("РЭЙ_КлассификаторСтранМира");
	НомерСтроки = 4;
	Пока Истина Цикл
		КодЧисловой = Макет.Область(НомерСтроки, 2).Текст;
		Если Не ПустаяСтрока(КодЧисловой) Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.КодЧисловой = КодЧисловой;
			НоваяСтрока.Наименование = Макет.Область(НомерСтроки, 3).Текст;
			НоваяСтрока.КодАльфа2 = Макет.Область(НомерСтроки, 4).Текст;
			НоваяСтрока.КодАльфа3 = Макет.Область(НомерСтроки, 5).Текст;
			НоваяСтрока.НаименованиеПолное = Макет.Область(НомерСтроки, 6).Текст;
			НоваяСтрока.НаименованиеАнгл = Макет.Область(НомерСтроки, 7).Текст;
			НоваяСтрока.УчастникЕАЭС = Не ПустаяСтрока(Макет.Область(НомерСтроки, 8).Текст);
		Иначе
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

Функция ПолучитьТаблицуКлассификатораВалют() Экспорт
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КодЧисловой", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КодСимвольный", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НаименованиеАнгл", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("СтраныТерритории", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПараметрыПрописиНаАнглийском", Новый ОписаниеТипов("Строка"));
	
	Макет = Справочники.Валюты.ПолучитьМакет("РЭЙ_КлассификаторВалют");
	НомерСтроки = 4;
	Пока Истина Цикл
		КодЧисловой = Макет.Область(НомерСтроки, 2).Текст;
		Если Не ПустаяСтрока(КодЧисловой) Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.КодЧисловой = КодЧисловой;
			НоваяСтрока.КодСимвольный = Макет.Область(НомерСтроки, 3).Текст;
			НоваяСтрока.НаименованиеПолное = Макет.Область(НомерСтроки, 4).Текст;
			НоваяСтрока.НаименованиеАнгл = Макет.Область(НомерСтроки, 5).Текст;
			НоваяСтрока.СтраныТерритории = Макет.Область(НомерСтроки, 6).Текст;
			
			НаименованиеЦел = НоваяСтрока.НаименованиеАнгл + "s";
			НаименованиеДроб = "/100";
			НоваяСтрока.ПараметрыПрописиНаАнглийском = "" + НаименованиеЦел + ", " + НаименованиеЦел + ", " + НаименованиеДроб + ", " + НаименованиеДроб + ", " + 2;
		Иначе
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

Функция ВременноеХранилищеРеквизитов(Объект, МетаданныеОбъекта, УникальныйИдентификатор) Экспорт 
	
	СтруктураДанныхОбъекта = Новый Структура();
	
	РеквизитыОбъекта = Новый Структура("Код, Наименование, Ссылка, Номер, Дата");
	Для Каждого текРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Объект.Свойство(текРеквизит.Имя) Тогда
			РеквизитыОбъекта.Вставить(текРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	СтруктураДанныхОбъекта.Вставить("Реквизиты", РеквизитыОбъекта);
	
	ТабличныеЧастиОбъекта = Новый Структура();
	Для Каждого текТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если Объект.Свойство(текТабличнаяЧасть.Имя) Тогда
			ТабличныеЧастиОбъекта.Вставить(текТабличнаяЧасть.Имя, Объект[текТабличнаяЧасть.Имя].Выгрузить());
		КонецЕсли;
	КонецЦикла;
	СтруктураДанныхОбъекта.Вставить("ТабличныеЧасти", ТабличныеЧастиОбъекта);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДанныхОбъекта, УникальныйИдентификатор);
	
КонецФункции	

Процедура ЗаполнитьСвойстваОбъектаИзВременногоХранилища(Объект, АдресВременногоХранилища, ЭтотОбъект = Неопределено, ИменаРеквизитовФормы = Неопределено, ЗагружатьТабличныеЧасти = Истина) Экспорт
	
	СтруктураДанныхОбъекта = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	РеквизитыОбъекта = СтруктураДанныхОбъекта.Реквизиты;
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта,, "Ссылка");
	
	Если ИменаРеквизитовФормы <> Неопределено Тогда 
		
		Для Каждого ИмяРеквизитаФормы Из ИменаРеквизитовФормы Цикл
			ЭтотОбъект[ИмяРеквизитаФормы] = РеквизитыОбъекта[ИмяРеквизитаФормы];	
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если ЗагружатьТабличныеЧасти Тогда 
		Для Каждого текТабличнаяЧасть Из СтруктураДанныхОбъекта.ТабличныеЧасти Цикл
			Объект[текТабличнаяЧасть.Ключ].Загрузить(текТабличнаяЧасть.Значение);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

