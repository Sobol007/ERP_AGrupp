
#Область ПрограммныйИнтерфейс

#Область ОписаниеДереваЭтапов

#Область ОписаниеГруппЭтапов

// Заполнение таблицы групп этапов закрытия месяца.
// Элементы данной таблицы являются элементами верхнего уровня в дереве этапов в форме закрытия месяца.
//
// Параметр:
//	ТаблицаГруппЭтапов - Таблица значений - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияГруппЭтапов().
//
Процедура ЗаполнитьОписаниеГруппЭтаповЗакрытияМесяца(ТаблицаГруппЭтапов) Экспорт
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыРучныеОперации();
	НоваяСтрока.Наименование = НСтр("ru = 'Данные операции требуется выполнить вручную';
									|en = 'These operations must be performed manually'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыВзаиморасчеты();
	НоваяСтрока.Наименование = НСтр("ru = 'Взаиморасчеты и переоценка валютных средств';
									|en = 'Mutual settlements and currency revaluation'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыФормированиеЗатрат();
	НоваяСтрока.Наименование = НСтр("ru = 'Формирование затрат';
									|en = 'Generate costs'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыПроизводственныеЗатраты();
	НоваяСтрока.Наименование = НСтр("ru = 'Распределение производственных затрат';
									|en = 'Manufacturing cost allocation'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыСебестоимость();
	НоваяСтрока.Наименование = НСтр("ru = 'Расчет себестоимости';
									|en = 'Cost calculation'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыФормированиеФинансовогоРезультата();
	НоваяСтрока.Наименование = НСтр("ru = 'Формирование финансового результата';
									|en = 'Financial result generation'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыРегламентированныйУчет();
	НоваяСтрока.Наименование = НСтр("ru = 'Регламентированный учет';
									|en = 'Compliance accounting'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыУчетПоУСН();
	НоваяСтрока.Наименование = НСтр("ru = 'Учет по УСН';
									|en = 'STS accounting'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыМеждународныйУчет();
	НоваяСтрока.Наименование = НСтр("ru = 'Международный учет';
									|en = 'International accounting'");
	
КонецПроцедуры

#Область ИдентификаторыГруппЭтапов

// В данной области расположены идентификаторы групп этапов закрытия месяца.
// Для групп этапов используются строковые идентификаторы, т.к. для них нет потребности в ссылочных идентификаторах.

Функция ИдентификаторГруппыРучныеОперации()
	Возврат "РучныеОперации";
КонецФункции

Функция ИдентификаторГруппыВзаиморасчеты()
	Возврат "Взаиморасчеты";
КонецФункции

Функция ИдентификаторГруппыФормированиеЗатрат()
	Возврат "ФормированиеЗатрат";
КонецФункции

Функция ИдентификаторГруппыПроизводственныеЗатраты()
	Возврат "ПроизводственныеЗатраты";
КонецФункции

Функция ИдентификаторГруппыСебестоимость()
	Возврат "Себестоимость";
КонецФункции

Функция ИдентификаторГруппыФормированиеФинансовогоРезультата()
	Возврат "ФормированиеФинансовогоРезультата";
КонецФункции

Функция ИдентификаторГруппыРегламентированныйУчет()
	Возврат "РегламентированныйУчет";
КонецФункции

Функция ИдентификаторГруппыУчетПоУСН()
	Возврат "УчетПоУСН";
КонецФункции

Функция ИдентификаторГруппыМеждународныйУчет()
	Возврат "МеждународныйУчет";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОписаниеЭтапов

// Заполнение таблицы этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметр:
//	ТаблицаЭтапов - Таблица значений - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов().
//
Процедура ЗаполнитьОписаниеЭтаповЗакрытияМесяца(ТаблицаЭтапов) Экспорт

	#Область Группа_РучныеОперации
	
	ТекущийРодитель = ИдентификаторГруппыРучныеОперации();
	
	// Переход на новые режимы учета.
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереходНаНовыеРежимыУчета,
		Истина, Ложь, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.Информационный = Истина;
	НоваяСтрока.ТекстПодробнее     = ТекстПодробнееПоУмолчанию();
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПереходНаНовыеРежимыРаботы");
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьСправкуОбъекта(
		Метаданные.Обработки.ОперацииЗакрытияМесяца.Формы.ФормаСправкиПереходНаНовыеРежимыРаботы);
	
	// Ошибки в данных.
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеДублейВидовЗапасов,
		Истина, Ложь, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Исправить';
											|en = 'Correct'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ИсправлениеДублейВидовЗапасов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Справочники.ВидыЗапасов.Формы.ФормаСписка.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстПодробнее     = ТекстПодробнееПоУмолчанию();
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьРезультатыПроверки(,, НоваяСтрока.Код);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеРазвернутыхОстатковПоВзаиморасчетам,
		Истина, Ложь, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Исправить';
											|en = 'Correct'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ИсправлениеРазвернутыхОстатковПоВзаиморасчетам");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ИсправлениеРазвернутыхОстатковПоВзаиморасчетам.Формы.Форма.ПолноеИмя());
	
	// Невыполненные регламентные операции.
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОтрицательныхОстатковТоваровОрганизаций);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ИсправлениеОтрицательныхОстатковТоваровОрганизаций");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникИсправленияОстатковТоваровОрганизаций.Формы.ОсновнаяФорма.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовБудущихПериодов,
		Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Распределить';
										|en = 'Allocate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеРасходовБудущихПериодов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеРасходовБудущихПериодов.Формы.ФормаСпискаДокументов.ПолноеИмя());
	
	//++ НЕ УТ
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.СписаниеЗатратНаВыпускБезРаспоряжений);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Списать';
										|en = 'Write off'");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_СписаниеЗатратНаВыпускБезРаспоряжений");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_СписаниеЗатратНаВыпускБезРаспоряжений");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.СписаниеЗатратНаВыпуск.Формы.ФормаСпискаДокументов.ПолноеИмя());
		
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеСписаниеРезервовПредстоящихРасходов,
		Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НачислениеСписаниеРезервовПредстоящихРасходов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачислениеСписаниеРезервовПредстоящихРасходов.Формы.ФормаРабочееМесто.ПолноеИмя());
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ВсеОрганизации");
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеМатериаловИРаботНаСебестоимостьПродукции21);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеПроизводственныхЗатрат.Формы.ФормаРабочееМесто.ПолноеИмя());
	// Доп. параметры формы.
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("Состояние",     		     "ТребуетсяРаспределить");
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("Подразделение", 		     Справочники.СтруктураПредприятия.ПустаяСсылка());
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ТребуетсяСписатьЗатраты", Ложь);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПроизводстваБезЗаказов);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ОформлениеПроизводстваБезЗаказов");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеПроизводстваБезЗаказов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ОформлениеПроизводстваБезЗаказов.Формы.ФормаРабочееМесто.ПолноеИмя());
		
	//++ НЕ УТКА
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачМатериаловВПроизводство);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ОформлениеПередачМатериаловВПроизводство");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеПередачМатериаловВПроизводство");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ДвижениеПродукцииИМатериалов.Формы.РабочееМесто.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПланированиеПроизводстваПродукцииБезСпецификаций);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ПланированияПроизводстваПродукцииБезСпецификаций");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПланированияПроизводстваПродукцииБезСпецификаций");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ЗаказНаПроизводство2_2.Формы.УправлениеОчередьюЗаказов.ПолноеИмя());
	СтруктураОтборов = Новый Структура();
	СтруктураОтборов.Вставить("ТребуетсяПроверитьЭтапы", Истина);
	СтруктураОтборов.Вставить("ТребуетсяСформироватьЭтапы", Истина);
	СтруктураОтборов.Вставить("ТипПроизводственногоПроцесса", Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций);
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("СтруктураОтборов", СтруктураОтборов);
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ПроверкаЗакрытияМесяца", Истина);
	//-- НЕ УТКА
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеМатериаловИРаботНаСебестоимостьПродукции22);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_РаспределениеМатериаловИРаботНаСебестоимостьПродукции22");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеМатериаловИРаботНаСебестоимостьПродукции22");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеПроизводственныхЗатрат.Формы.ФормаРаспределениеМатериаловИРабот.ПолноеИмя());
	// Доп. параметры формы.
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("Состояние",     		     		"ТребуетсяРаспределить");
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("Подразделение", 		     		Справочники.СтруктураПредприятия.ПустаяСсылка());
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ОформитьПроизводствоБезЗаказов", Ложь);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НастройкаПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Настроить';
										|en = 'Customize'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НастройкаПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Справочники.ПравилаРаспределенияРасходов.Формы.ФормаСпискаВручную.ПолноеИмя());
	// Доп. параметры формы.
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ТолькоНезаполненные", Истина);
	//-- НЕ УТ
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачТоваров);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Оформить';
										|en = 'Register'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеПередачТоваров");
	ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиВыкуп.ПолноеИмя());
	ОписаниеДействия.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыИнтеркампани");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия;
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковТоваровКПередаче);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Оформить';
										|en = 'Register'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОстатковТоваровКПередаче");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ОформлениеОстатковТоваровКПередаче");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиТоваров21.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыкупаТоваров);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Оформить';
										|en = 'Register'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеВыкупаТоваров");
	ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиВыкуп.ПолноеИмя());
	ОписаниеДействия.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыЗакупки");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия;
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПоКомиссииМеждуОрганизациями);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Оформить';
											|en = 'Register'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОтчетовПоКомиссииМеждуОрганизациями");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоОтчетыПоКомиссии.ПолноеИмя());

	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Оформить';
											|en = 'Register'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОтчетовКомитентамОСписании");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.ЖурналыДокументов.ОтчетыКомитентам.Формы.ФормаСпискаДокументов.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеСчетовФактурИТаможенныхДокументов,
		Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Оформить';
											|en = 'Register'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеСчетовФактурИТаможенныхДокументов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникПоУчетуНДС.Формы.Форма.ПолноеИмя());
	// Доп. параметры формы.
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ТолькоОформлениеДокументов", Истина);
	
	//++ НЕ УТ
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПеречислениеНДСВБюджетПоОтдельнымОперациям,
		Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Оплатить';
											|en = 'Pay'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПеречислениеНДСВБюджет");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПеречислениеНДСВБюджетПоОтдельнымОперациям.Формы.СписокДокументов.ПолноеИмя());
	// Доп. параметры формы.
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ТолькоОформлениеДокументов", Истина);
	//-- НЕ УТ
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачисленияПоКредитамДепозитамИВыданнымЗаймам);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НачисленияПоКредитамДепозитамИВыданнымЗаймам");
	НоваяСтрока.ДействиеВыполнить = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачисленияКредитовИДепозитов.Формы.ФормаСписка.ПолноеИмя());
		
	//++ НЕ УТ
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ОтображатьВыполненныеУспешно = Истина;
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПереходНаУчетВнеоборотныхАктивовВерсии24");
	//-- НЕ УТ
	#КонецОбласти
	
	#Область Группа_Взаиморасчеты
	
	ТекущийРодитель = ИдентификаторГруппыВзаиморасчеты();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеВыполнить = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствИФинансовыхИнструментов);
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПереоценкаДенежныхСредствИФинансовыхИнструментов");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ПереоценкаДенежныхСредствИФинансовыхИнструментов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ПереоценкаДенежныхСредствИФинансовыхИнструментов");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РасчетКурсовыхРазниц.Формы.ФормаСписка.ПолноеИмя(), Истина);
	
	#КонецОбласти
	
	#Область Группа_ФормированиеЗатрат
	
	ТекущийРодитель = ИдентификаторГруппыФормированиеЗатрат();
	
	//++ НЕ УТ
	
	НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ДобавитьЭтап_ФормированиеРезервовПоСомнительнымДолгам(ТаблицаЭтапов, ТекущийРодитель);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыработкиСотрудников);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Оформить';
										|en = 'Register'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ВыработкаСотрудников");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ВыработкаСотрудников");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ВыработкаСотрудников.Формы.ФормаСпискаДокументов.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеОценочныхОбязательствРезервовПоОтпускам);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НачислениеОценочныхОбязательствРезервовПоОтпускам");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_НачислениеОценочныхОбязательствРезервовПоОтпускам");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам.Формы.ФормаСписка.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеЗарплатыВФинансовомУчете);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеОценочныхОбязательствРезервовПоОтпускам);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОтражениеЗарплатыВФинансовомУчете");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ОтражениеЗарплатыВФинансовомУчете");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете.Формы.ФормаСписка.ПолноеИмя());

	//-- НЕ УТ
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.АннулированиеПодарочныхСертификатов);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Аннулировать';
										|en = 'Cancel'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.АннулированиеПодарочныхСертификатов.Формы.ФормаСписка.ПолноеИмя());
	
	//++ НЕ УТ
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НачислениеАмортизацииОС");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_НачислениеАмортизацииОС");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.ЖурналыДокументов.РегламентныеДокументы.Формы.ФормаСписка.ПолноеИмя(), Истина);
	// Доп. параметры формы.
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Вставить("Тип", Новый Массив);
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Тип.Добавить(Тип("ДокументСсылка.АмортизацияОС"));
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Тип.Добавить(Тип("ДокументСсылка.АмортизацияОС2_4"));
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НачислениеАмортизацииНМА");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_НачислениеАмортизацииНМА");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.ЖурналыДокументов.РегламентныеДокументы.Формы.ФормаСписка.ПолноеИмя(), Истина);
	// Доп. параметры формы.
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Вставить("Тип", Новый Массив);
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Тип.Добавить(Тип("ДокументСсылка.АмортизацияНМА"));
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Тип.Добавить(Тип("ДокументСсылка.АмортизацияНМА2_4"));
	
	//-- НЕ УТ
	//++ НЕ УТКА
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОСиНМАМеждународныйУчет,
		Истина, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НачислениеАмортизацииОСиНМАМеждународныйУчет");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_НачислениеАмортизацииОСиНМАМеждународныйУчет");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.ЖурналыДокументов.РегламентныеДокументыМеждународныйУчет.Формы.ФормаСписка.ПолноеИмя(), Истина);
	// Доп. параметры формы.
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Вставить("Тип", Новый Массив);
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Тип.Добавить(Тип("ДокументСсылка.АмортизацияОСМеждународныйУчет"));
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Отбор.Тип.Добавить(Тип("ДокументСсылка.АмортизацияНМАМеждународныйУчет"));
	
	//-- НЕ УТКА
	//++ НЕ УТ
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоВнеоборотнымАктивам);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Run report'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ФормированиеДвиженийПоВнеоборотнымАктивам");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ФормированиеДвиженийПоВнеоборотнымАктивам");
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНалоговомУчетеЛизинговыхПлатежей);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Признать';
										|en = 'Recognize'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПризнаниеВНалоговомУчетеЛизинговыхПлатежей");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ПризнаниеВНалоговомУчетеЛизинговыхПлатежей");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПогашениеСтоимостиТМЦВЭксплуатации);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Погасить';
										|en = 'Pay off'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПогашениеСтоимостиТМЦВЭксплуатации");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ПогашениеСтоимостиТМЦВЭксплуатации");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ПогашениеСтоимостиТМЦВЭксплуатации.Формы.ФормаСписка.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетНалогаНаИмущество");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетНалогаНаИмущество");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетТранспортногоНалога");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетТранспортногоНалога");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетЗемельногоНалога");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетЗемельногоНалога");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетТорговогоСбора);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетТорговогоСбора");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетТорговогоСбора");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетТорговогоСбора);
	
	//-- НЕ УТ
	#КонецОбласти

	//++ НЕ УТ
	#Область Группа_ПроизводственныеЗатраты
	
	ТекущийРодитель = ИдентификаторГруппыПроизводственныеЗатраты();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НастройкаРаспределенияРасходов);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Perform'");
	НоваяСтрока.ТекстПодробнее = ТекстПодробнееПоУмолчанию();
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НастройкаРаспределенияРасходов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_НастройкаРаспределенияРасходов");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеПрочихЗатрат.Формы.ФормаРабочееМесто.ПолноеИмя());
	// Доп. параметры формы.
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Вставить("Состояние", Перечисления.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения);
	
	#КонецОбласти
	//-- НЕ УТ
	
	#Область Группа_Себестоимость
	
	ТекущийРодитель = ИдентификаторГруппыСебестоимость();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыкупаТоваров);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковТоваровКПередаче);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПоКомиссииМеждуОрганизациями);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачТоваров);
	//++ НЕ УТ
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеПроизводстваБезЗаказов);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам);
	//-- НЕ УТ
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетПартийИСебестоимости");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_РасчетПартийИСебестоимости");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетПартийИСебестоимости");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.РегистрыСведений.ПротоколыРасчетаПартийИСебестоимости.Формы.ФормаПросмотраПротоколов.ПолноеИмя());
	НоваяСтрока.ДействиеПодробнее.ОткрыватьВместоЖР = Истина;
	НоваяСтрока.ДействиеПодробнее.НеТребуетсяПриУспешномВыполнении = Истина;
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Распределить';
										|en = 'Allocate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеНДС");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РаспределениеНДС");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеНДС.Формы.ФормаСписка.ПолноеИмя());
	
	//++ НЕ УТ
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетСтоимостиВнеоборотныхАктивов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетСтоимостиВнеоборотныхАктивов");
	//-- НЕ УТ
	
	#КонецОбласти
	
	#Область Группа_ФормированиеФинансовогоРезультата
	
	ТекущийРодитель = ИдентификаторГруппыФормированиеФинансовогоРезультата();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеДоходовИРасходовПоНаправлениямДеятельности);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Распределить';
										|en = 'Allocate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеДоходовИРасходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РаспределениеДоходовИРасходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.Формы.ФормаСписка.ПолноеИмя());
	
	#КонецОбласти
	
	#Область Группа_РегламентированныйУчет
	
	ТекущийРодитель = ИдентификаторГруппыРегламентированныйУчет();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеЗаписейКнигПокупокИПродаж,
		Ложь, Истина, Ложь);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Run report'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ФормированиеЗаписейКнигПокупокИПродаж");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ФормированиеЗаписейКнигПокупокИПродаж");
	
	//++ НЕ УТ
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете,
		Ложь, Истина, Ложь);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОтражениеДокументовВРегламентированномУчете");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ОтражениеДокументовВРегламентированномУчете");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.НастройкаОтраженияДокументовВРеглУчете.Формы.ФормаНастройкиОтраженияДокументовВРеглУчете.ПолноеИмя());
		
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазниц,
		Ложь, Истина, Ложь);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетКурсовыхРазниц");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетКурсовыхРазниц");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетКурсовыхРазниц);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата,
		Ложь, Истина, Ложь);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Run report'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ФормированиеФинансовогоРезультата");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ФормированиеФинансовогоРезультата");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата);
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет);
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль);
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности);
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода);
	//-- НЕ УТ
	#КонецОбласти
	
	//++ НЕ УТ
	#Область Группа_УчетПоУСН
	
	ТекущийРодитель = ИдентификаторГруппыУчетПоУСН();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН,
		Ложь, Истина, Ложь);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Perform'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПризнаниеРасходовПриУСН");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ПризнаниеРасходовПриУСН");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникФормированияКУДиР.Формы.Форма.ПолноеИмя());
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН);

	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР,
		Ложь, Истина, Ложь);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Perform'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_СторноДоходовКУДиР");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_СторноДоходовКУДиР");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникФормированияКУДиР.Формы.Форма.ПолноеИмя());

	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаУСН,
		Ложь, Истина, Ложь);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетНалогаУСН");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетНалогаУСН");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникФормированияКУДиР.Формы.Форма.ПолноеИмя());
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН);
	
	#КонецОбласти
	//-- НЕ УТ
	
	//++ НЕ УТКА
	#Область Группа_МеждународныйУчет
	
	ТекущийРодитель = ИдентификаторГруппыМеждународныйУчет();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВМеждународномУчете,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОтражениеДокументовВМеждународномУчете");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ОтражениеДокументовВМеждународномУчете");
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ОтражениеДокументовВМеждународномУчете.Формы.Форма.ПолноеИмя());
		
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазницВФункциональнойВалюте,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетКурсовыхРазницВФункциональнойВалюте");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетКурсовыхРазницВФункциональнойВалюте");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницФункциональнаяВалюта);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ЗакрытиеСчетовУчетаДоходовИРасходовМУ,
		Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Perform'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ЗакрытиеСчетовУчетаДоходовИРасходовМУ");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ЗакрытиеСчетовУчетаДоходовИРасходовМУ");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазницВВалютеПредставления,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РасчетКурсовыхРазницВВалютеПредставления");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РасчетКурсовыхРазницВВалютеПредставления");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.УстановкаДатыЗапретаФормированияПроводокМУ,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Установить';
										|en = 'Set'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_УстановкаДатыЗапретаФормированияПроводокМУ");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_УстановкаДатыЗапретаФормированияПроводокМУ");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.РегистрыСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет.Формы.ДатыЗапретаФормирования.ПолноеИмя());
		
	#КонецОбласти
	//-- НЕ УТКА
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

// В данной области расположены:
// 1. Тексты процедур-обработчиков событий этапов закрытия месяца.
// Сами этапы описываются в ЗаполнитьОписаниеЭтаповЗакрытияМесяца().
// 2. Описание проверок состояния системы, относящиеся к этапам закрытия месяца.
// Описания проверок используется в ЗаполнитьПроверкиДляРегистрации().
// 3. Тексты процедур-проверок состояния учета.

#Область Группа_РучныеОперации

#Область ПереходНаНовыеРежимыРаботы

// Обработчики этапа.

Процедура Использование_ПереходНаНовыеРежимыРаботы(ПараметрыОбработчика) Экспорт
	
	СтатусПоУмолчанию = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение;
	ТекстГиперссылкиПоУмолчанию = НСтр("ru = 'Перейти';
										|en = 'Navigate'");
	
	// Партионный учет.
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии21() Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru = 'Партионный учет (версия 2.2)';
				|en = 'Batch accounting (version 2.2)'"),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия_ОткрытьФорму(Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.ФинансовыйРезультатИКонтроллинг.ПолноеИмя()),
			СтатусПоУмолчанию);
		
	КонецЕсли;
	
	// Взаиморасчеты.
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru = 'Взаиморасчеты (онлайн)';
				|en = 'Mutual settlements (online)'"),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия_ОткрытьФорму(Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.Казначейство.ПолноеИмя()),
			СтатусПоУмолчанию);
		
	КонецЕсли;
	
	//++ НЕ УТ
	
	// Производство.
	Если ПроизводствоСервер.НастройкиПодсистемыПроизводство().ИспользуетсяПроизводство21 Тогда
		
		Если ПроизводствоСервер.НастройкиПодсистемыПроизводство().ИспользуетсяПроизводство22 Тогда
			ТекстПояснения = НСтр("ru = 'Завершить переход на управление производством версии 2.2 и выключить функциональную опцию ""Производство (версия 2.1)""';
									|en = 'End the transfer to v. 2.2. production management and disable the functional option ""Production (v. 2.1.)""'");
		Иначе
			ТекстПояснения = НСтр("ru = 'Производство (версия 2.2)';
									|en = 'Production (v. 2.2)'");
		КонецЕсли;
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			ТекстПояснения,
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия_ОткрытьФорму(Метаданные.Обработки.ПанельАдминистрированияКА.Формы.Производство.ПолноеИмя()),
			СтатусПоУмолчанию);
		
	КонецЕсли;
	
	// Внеоборотные активы.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
	 И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов (версия 2.4)';
				|en = 'Capital asset accounting (version 2.4)'"),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия_ОткрытьФорму(Метаданные.Обработки.ПанельАдминистрированияКА.Формы.ВнеоборотныеАктивы.ПолноеИмя()),
			СтатусПоУмолчанию);
		
	КонецЕсли;
	
	//-- НЕ УТ
	
	// Учетные политики: метод оценки стоимости ФИФО (взвешенная).
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		ШаблонТекста = НСтр("ru = 'Для организации ""%1"" использовать метод оценки стоимости ""ФИФО (скользящая оценка)""';
							|en = 'For the ""%1"" company, use the ""FIFO (rolling valuation)"" method of valuation'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Для организации ""%1"" использовать метод оценки стоимости ""Средняя за месяц""';
							|en = 'For the ""%1"" company, use the ""Average per month"" method of valuation'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация В (&МассивОрганизаций)) КАК Т
	|ГДЕ
	|	Т.УчетнаяПолитика.МетодОценкиСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(Метаданные.Справочники.Организации.Формы.ФормаЭлемента.ПолноеИмя());
		ОписаниеДействия.ПараметрыФормы.Вставить("Ключ", Выборка.Организация);
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.Организация),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия,
			СтатусПоУмолчанию);
		
	КонецЦикла;
	
	Если НЕ СостояниеЭтапаОпределено(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Устаревшие режимы работы не используются.';
				|en = 'Obsolete operation modes are not used.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеДублейВидовЗапасов

// Обработчики этапа.

Процедура Использование_ИсправлениеДублейВидовЗапасов(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Справочники.ВидыЗапасов.ТекстЗапросаНаличиеДублейВидовЗапасов();
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Дублей видов запасов не найдено.';
				|en = 'Duplicate inventory kinds are not found.'"));
		
	Иначе
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Обнаружены дубли видов запасов. Требуется выполнить замену дублей и удалить помеченные виды запасов.';
				|en = 'Inventory kind duplicates are found. Replace duplicates and remove the selected inventory kinds.'"),
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеОшибокВИсходныхДанных

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ИсправлениеОшибокВИсходныхДанных(ТаблицаПроверок)
	
	// Неактивные записи в регистрах.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеактивныеЗаписиВРегистрахИсточниках",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеактивныеЗаписиВРегистрахИсточниках");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Неактивные записи в регистрах.';
			|en = 'Inactive entries in registers.'"),
		НСтр("ru = 'В регистрах, являющихся исходными данными для операция закрытия месяца, не должно быть неактивных записей.';
			|en = 'There should not be any inactive entries in the registers which serve as initial data for month-end closing operation.'"));
	
	// Заполнение видов запасов в регистре ""Себестоимость товаров"".
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ВидыЗапасовВСебестоимости",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаВидыЗапасовВСебестоимости");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Заполнение вида запасов и назначения в регистре ""Себестоимость товаров"".';
			|en = 'Fill in inventory kind and assignment in the ""Goods cost"" register.'"),
		НСтр("ru = 'При выключенной опции ""Обособленный учет себестоимости товаров по видам запасов"" поля ""Вид запасов"" в регистре ""Себестоимость товаров"" и ""Назначение"" в аналитике номенклатуры не должны быть заполнены.';
			|en = 'If the ""Separate accounting of goods cost by inventory kinds"" option is disabled, the ""Inventory kind"" field in the ""Goods cost"" register and the ""Assignment"" field in the product dimension should not be populated.'"));
	
	// Корректность реализации, указанной в возврате.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьРеализацииУказаннойВВозврате",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьРеализацииУказаннойВВозврате");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Корректность реализации, указанной в возврате.';
			|en = 'Whether the sale specified in the return is correct.'"),
		НСтр("ru = 'При изменении задним числом документа реализации товарный состав документа возврата от клиента может рассинхронизироваться с реализацией.
			|В этом случае в документе возврата необходимо или указать корректный документ реализации или вообще не указывать его.';
			|en = 'If sales document is changed post factum, goods content of customer return document can be different from the sale. 
			|In this case, specify correct document in the return document or do not specify it at all.'"));
		
	// Корректность передачи, указанной в возврате.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьПередачиУказаннойВВозврате",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьПередачиУказаннойВВозврате");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Корректность реализации, указанной в возврате.';
			|en = 'Whether the sale specified in the return is correct.'"),
		НСтр("ru = 'При изменении задним числом документа реализации товарный состав документа возврата от клиента может рассинхронизироваться с реализацией.
			|В этом случае в документе возврата необходимо или указать корректный документ реализации или вообще не указывать его.';
			|en = 'If sales document is changed post factum, goods content of customer return document can be different from the sale. 
			|In this case, specify correct document in the return document or do not specify it at all.'"));
		
	// Заполнение номеров ГТД в возвратах.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьЗаполненияНомеровГТДВВозвратах",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьЗаполненияНомеровГТДВВозвратах");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Корректность указания номеров ГТД, указанных в возврате.';
			|en = 'Correctness of indication of CFD numbers specified in the return.'"),
		НСтр("ru = 'Были оформлены возвраты товаров, для которых включен учет по номерам ГТД, но номера ГТД не были указаны.
			|В этом случае в документе возврата необходимо указать номера ГТД.';
			|en = 'Returns of goods for which accounting upon CFD numbers is enabled were registered, but CFD numbers were not specified.
			|In this case you should specify CFD numbers in documents of return.'"));
	
	// Устаревшие виды запасов с остатками.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"УстаревшиеВидыЗапасовСОстаткамиОбновитьЗаписи",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.УстаревшиеВидыЗапасовСОстаткамиОбновитьЗаписи");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Актуализация регистра сведений ""Устаревшие виды запасов с остатками""';
			|en = 'Update the ""Obsolete inventory kinds with balance"" information register'"),
		НСтр("ru = 'Регистр сведений содержит список устаревших видов запасов,
		|по которым еще есть остатки в регистре ""Товары организаций"" и которые должны быть списаны при расходе.';
		|en = 'Information register contains a list of obsolete stock balance kinds
		|by which there is balance in the ""Company goods"" register and which should be written off at release.'"));
	
	//++ НЕ УТ
	// Цена возвратных отходов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ЦенаОтходовВОтчетеПереработчика",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаЦеныВозвратныхОтходовВОтчетеПереработчика");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Цены возвратных отходов в документе ""Отчет переработчика""';
			|en = 'Prices of recyclable waste in the ""Toller report"" document'"),
		НСтр("ru = 'Цена должна быть заполнена.';
			|en = 'Price should be filled in.'"));
	//-- НЕ УТ
КонецПроцедуры

Процедура ПроверкаНеактивныеЗаписиВРегистрахИсточниках(ПараметрыПроверки) Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	Если ДополнительныеПараметры.Свойство("Период") Тогда
		Период = ДополнительныеПараметры.Период;
	Иначе
		Период = Неопределено;
	КонецЕсли;
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(Период) Тогда
		ПартионныйУчет22.ВходящиеДанныеМеханизма(ВходящиеДанные);
	Иначе
		ПартионныйУчет.ВходящиеДанныеМеханизма(ВходящиеДанные);
	КонецЕсли;
	
	РасчетСебестоимости.ВходящиеДанныеМеханизма(ВходящиеДанные);
	
	ШаблонЗапроса = "
	|%1
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""%2"" КАК ИмяРегистра,
	|	%3 КАК Организация,
	|	Т.Регистратор КАК Регистратор
	|%4
	|ИЗ
	|	%2 КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.Активность";
	
	ТекстЗапроса = "";
	
	Для Каждого КлючИЗначение Из ВходящиеДанные Цикл
		
		МетаданныеРегистра = КлючИЗначение.Ключ;
		
		Если НЕ Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра)
		 И НЕ Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
			Продолжить;
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра)
		 И МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			Продолжить;
		КонецЕсли;
			
		Если МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено Тогда
			ИмяПоляОрганизации = "Т.Организация";
		ИначеЕсли МетаданныеРегистра.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено Тогда
			ИмяПоляОрганизации = "Т.АналитикаУчетаПоПартнерам.Организация";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапроса,
				?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ"),
				МетаданныеРегистра.ПолноеИмя(),
				ИмяПоляОрганизации,
				?(ТекстЗапроса = "", "ПОМЕСТИТЬ ВТНеактивныеЗаписиРегистров", ""));
		
	КонецЦикла;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Регистратор",		НСтр("ru = 'Документ';
													|en = 'Document'"));
	СписокПолей.Добавить("ИмяРегистра",		НСтр("ru = 'Имя регистра';
													|en = 'Register name'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНеактивныеЗаписиРегистров",
		НСтр("ru = 'Обнаружены неактивные записи регистров в движениях документов организации ""%1"" за период %2';
			|en = 'Inactive register entries are detected in document records of the ""%1"" company for %2 period'"),
		СписокПолей,
		"Регистратор");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		СокрЛП(ТекстЗапроса));
	
КонецПроцедуры

Процедура ПроверкаВидыЗапасовВСебестоимости(ПараметрыПроверки) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СебестоимостьТоваров"" КАК ИмяРегистра,
	|	Т.Организация 			 КАК Организация,
	|	Т.Регистратор			 КАК Регистратор,
	|	СУММА(1) 				 КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ДвиженияСНекорректнымВидомЗапасов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО АналитикаНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВыручкаИСебестоимостьПродаж"" КАК ИмяРегистра,
	|	АналитикаПартнеров.Организация 	КАК Организация,
	|	Т.Регистратор			 		КАК Регистратор,
	|	СУММА(1) 				 		КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК АналитикаПартнеров
	|		ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО АналитикаНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И АналитикаПартнеров.Организация В(&МассивОрганизаций)
	|	И Т.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаПартнеров.Организация,
	|	Т.Регистратор";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ИмяРегистра",		  НСтр("ru = 'Имя регистра';
														|en = 'Register name'"));
	СписокПолей.Добавить("Регистратор",		  НСтр("ru = 'Документ';
														|en = 'Document'"));
	СписокПолей.Добавить("КоличествоЗаписей", НСтр("ru = 'Количество движений с ошибками';
													|en = 'Number of movements with errors'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ДвиженияСНекорректнымВидомЗапасов",
		НСтр("ru = 'Обнаружены некорректное заполнение вида запасов в движениях по регистрам себестоимости по организации ""%1"" за период %2';
			|en = 'Incorrect inventory kind population is detected in records for cost registers of the ""%1"" company for %2 period'"),
		СписокПолей,
		"Регистратор");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""СебестоимостьТоваров"" КАК ИмяРегистра,
	|	Т.Организация 			 КАК Организация,
	|	Т.Регистратор			 КАК Регистратор,
	|	СУММА(1) 				 КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ДвиженияСНекорректнымНазначением
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И АналитикаНоменклатуры.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВыручкаИСебестоимостьПродаж"" КАК ИмяРегистра,
	|	АналитикаПартнеров.Организация 	КАК Организация,
	|	Т.Регистратор			 		КАК Регистратор,
	|	СУММА(1) 				 		КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК АналитикаПартнеров
	|		ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И АналитикаПартнеров.Организация В(&МассивОрганизаций)
	|	И АналитикаНоменклатуры.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаПартнеров.Организация,
	|	Т.Регистратор";
		
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ДвиженияСНекорректнымНазначением",
		НСтр("ru = 'Обнаружены некорректное заполнение назначения в движениях по регистрам себестоимости по организации ""%1"" за период %2';
			|en = 'Incorrect assignment population is detected in records for cost registers of the ""%1"" company for %2 period'"),
		СписокПолей,
		"Регистратор");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

Процедура ПроверкаКорректностьРеализацииУказаннойВВозврате(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация 					КАК Организация,
	|	Т.Регистратор 					КАК Возврат,
	|	Т.ДокументИсточник 				КАК Реализация,
	|	Т.КорАналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатурыРеализации,
	|	Т.КорВидЗапасов 				КАК ВидЗапасовРеализации,
	|	Т.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов 					КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТВсеДвиженияВозвратов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|	И Т.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	И Т.ДокументИсточник ССЫЛКА Документ.РеализацияТоваровУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация 						   КАК Организация,
	|	Т.Возврат 							   КАК Возврат,
	|	Т.Реализация 						   КАК Реализация,
	|	Т.АналитикаУчетаНоменклатурыРеализации КАК АналитикаУчетаНоменклатурыРеализации,
	|	Т.ВидЗапасовРеализации 				   КАК ВидЗапасовРеализации,
	|	Т.АналитикаУчетаНоменклатуры 		   КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов 						   КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияВозвратов
	|ИЗ
	|	ВТВсеДвиженияВозвратов КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК Возвраты
	|		ПО Т.Возврат = Возвраты.Ссылка
	|		И Т.АналитикаУчетаНоменклатуры = Возвраты.АналитикаУчетаНоменклатуры
	|		И Т.ВидЗапасов = Возвраты.ВидЗапасов
	|ГДЕ
	|	Возвраты.СпособОпределенияСебестоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимости.ИзДокументаПродажи)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Реализация,
	|	АналитикаУчетаНоменклатурыРеализации,
	|	ВидЗапасовРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Реализация
	|ПОМЕСТИТЬ ВТРеализации
	|ИЗ
	|	ВТДвиженияВозвратов КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация 					КАК Организация,
	|	Т.Регистратор 					КАК Реализация,
	|	Т.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов 					КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияРеализаций
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализации КАК Реализации 
	|		ПО Т.Регистратор = Реализации.Реализация
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период <= &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Реализация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.Организация 						  КАК Организация,
	|	Возвраты.Возврат 							  КАК Возврат,
	|	Возвраты.Реализация 						  КАК Реализация,
	|	Возвраты.АналитикаУчетаНоменклатурыРеализации КАК АналитикаУчетаНоменклатуры,
	|	Возвраты.ВидЗапасовРеализации 				  КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТРасхожденияВозвратов
	|ИЗ
	|	ВТДвиженияВозвратов КАК Возвраты
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРеализаций КАК Реализации
	|		ПО Возвраты.Организация = Реализации.Организация
	|			И Возвраты.Реализация = Реализации.Реализация
	|			И Возвраты.АналитикаУчетаНоменклатурыРеализации = Реализации.АналитикаУчетаНоменклатуры
	|			И Возвраты.ВидЗапасовРеализации = Реализации.ВидЗапасов
	|ГДЕ
	|	Реализации.Реализация ЕСТЬ NULL";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Возврат",						НСтр("ru = 'Документ возврата';
																|en = 'Returns document'"));
	СписокПолей.Добавить("Реализация",					НСтр("ru = 'Документ реализации';
																|en = 'Sales document'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Product dimension'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																|en = 'Inventory kind'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРасхожденияВозвратов",
		НСтр("ru = 'Обнаружены возвращенные от клиента товары, отсутствующие в документе реализации организации ""%1""';
			|en = 'Goods returned from the customer that are missing in the sales document of the ""%1"" company are detected'"),
		СписокПолей,
		"Возврат");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

Процедура УстаревшиеВидыЗапасовСОстаткамиОбновитьЗаписи(ПараметрыПроверки) Экспорт
	
	РегистрыСведений.УстаревшиеВидыЗапасовСОстатками.ОбновитьЗаписи();
	
КонецПроцедуры

//++ НЕ УТ
Процедура ПроверкаЦеныВозвратныхОтходовВОтчетеПереработчика(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетПереработчика.Организация 	КАК Организация,
	|	ОтчетПереработчика.Ссылка 		КАК Регистратор,
	|	СУММА(1) 						КАК КоличествоСтрок
	|ПОМЕСТИТЬ ОтчетыПереработчикаБезЦенВозвратныхОтходов
	|ИЗ
	|	Документ.ОтчетПереработчика.ВозвратныеОтходы КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|		ПО ТаблицаПродукции.Ссылка = ОтчетПереработчика.Ссылка
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И ОтчетПереработчика.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетПереработчика.Организация В(&МассивОрганизаций)
	|	И ОтчетПереработчика.Проведен
	|	И ТаблицаПродукции.Цена = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПереработчика.Организация,
	|	ОтчетПереработчика.Ссылка";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Регистратор",		НСтр("ru = 'Документ';
													|en = 'Document'"));
	СписокПолей.Добавить("КоличествоСтрок", НСтр("ru = 'Количество строк с ошибками';
												|en = 'Quantity of lines with errors'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОтчетыПереработчикаБезЦенВозвратныхОтходов",
		НСтр("ru = 'Обнаружены незаполненные цены возвратных отходов в документах организации ""%1"" за период %2';
			|en = 'Non-populated prices of recyclable waste are detected in documents of the ""%1"" company for %2 period'"),
		СписокПолей,
		"Регистратор");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры
//-- НЕ УТ

// Выполняет проверку корректности указания документов передачи товаров между организациями возвращаемых товаров
// в документах возврата товаров между организациями.
//
// Параметр:
//	ПараметрыПроверки - Структура - параметры проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки().
//
Процедура ПроверкаКорректностьПередачиУказаннойВВозврате(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.Организация КАК Организация,
	|	Т.Регистратор КАК Возврат,
	|	Т.ДокументИсточник КАК Передача,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатурыОтгрузки,
	|	Т.ВидЗапасов КАК ВидЗапасовОтгрузки,
	|	Т.КорАналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.КорВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТВсеДвиженияВозвратов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК Возвраты
	|		ПО Т.Регистратор = Возвраты.Ссылка
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Возвраты.Организация В(&МассивОрганизаций)
	|	И Т.Организация = Возвраты.ОрганизацияПолучатель
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Организация,
	|	Т.Возврат КАК Возврат,
	|	Т.Передача КАК Передача,
	|	Т.АналитикаУчетаНоменклатурыОтгрузки КАК АналитикаУчетаНоменклатурыОтгрузки,
	|	Т.ВидЗапасовОтгрузки КАК ВидЗапасовОтгрузки,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияВозвратов
	|ИЗ
	|	ВТВсеДвиженияВозвратов КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК Передачи
	|		ПО Т.Передача = Передачи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК Возвраты
	|		ПО Т.Возврат = Возвраты.Ссылка
	|			И Т.АналитикаУчетаНоменклатуры = Возвраты.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Возвраты.ВидЗапасов
	|ГДЕ
	|	Возвраты.СпособОпределенияСебестоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимости.ИзДокументаПередачи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Передача,
	|	АналитикаУчетаНоменклатурыОтгрузки,
	|	ВидЗапасовОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Передача КАК Передача,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПередачи
	|ИЗ
	|	ВТДвиженияВозвратов КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Передача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Передачи.Организация КАК Организация,
	|	Т.Регистратор КАК Передача,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияПередач
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПередачи КАК Передачи
	|		ПО Т.Регистратор = Передачи.Передача
	|			И Т.Организация <> Передачи.Организация
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период <= &КонецПериода
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Передача,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.Организация КАК Организация,
	|	Возвраты.Возврат КАК Возврат,
	|	Возвраты.Передача КАК Передача,
	|	Возвраты.АналитикаУчетаНоменклатурыОтгрузки КАК АналитикаУчетаНоменклатуры,
	|	Возвраты.ВидЗапасовОтгрузки КАК ВидЗапасов,
	|	Передачи.АналитикаУчетаНоменклатуры КАК А1,
	|	Передачи.ВидЗапасов КАК В1
	|ПОМЕСТИТЬ ВТРасхожденияВозвратов
	|ИЗ
	|	ВТДвиженияВозвратов КАК Возвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияПередач КАК Передачи
	|		ПО Возвраты.Организация = Передачи.Организация
	|			И Возвраты.Передача = Передачи.Передача
	|			И Возвраты.АналитикаУчетаНоменклатурыОтгрузки = Передачи.АналитикаУчетаНоменклатуры
	|			И Возвраты.ВидЗапасовОтгрузки = Передачи.ВидЗапасов
	|ГДЕ
	|	Передачи.Передача ЕСТЬ NULL";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Возврат",						НСтр("ru = 'Документ возврата';
																|en = 'Returns document'"));
	СписокПолей.Добавить("Передача",					НСтр("ru = 'Документ передачи продукции';
															|en = 'Product transfer document'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Product dimension'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																|en = 'Inventory kind'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРасхожденияВозвратов",
		НСтр("ru = 'Обнаружены возвращенные от организации ""%1"" товары, отсутствующие в документе передачи товаров';
			|en = 'The products returned from the company ""%1"" were found that were absent in the product transfer document'"),
		СписокПолей,
		"Возврат");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Выполняет проверку корректности указания номеров ГТД возвращаемых товаров в документах возврата товаров
// между организациями.
//
// Параметр:
//	ПараметрыПроверки - Структура - параметры проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки().
//
Процедура ПроверкаКорректностьЗаполненияНомеровГТДВВозвратах(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка.Организация КАК Организация,
	|	Товары.Ссылка КАК Возврат
	|ПОМЕСТИТЬ ПустыеНомераГТДВДокументахВозврата
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ВестиУчетПоГТД
	|	И Товары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И Товары.Ссылка.Проведен
	|	И Товары.Ссылка.Организация В(&МассивОрганизаций)
	|	И Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ЗапретитьПоступлениеТоваровБезНомеровГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка.Организация,
	|	Товары.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ВестиУчетПоГТД
	|	И Товары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И Товары.Ссылка.Проведен
	|	И Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ЗапретитьПоступлениеТоваровБезНомеровГТД
	//++ НЕ УТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка.Организация,
	|	Товары.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ВестиУчетПоГТД
	|	И Товары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И Товары.Ссылка.Проведен
	|	И Товары.Ссылка.Организация В(&МассивОрганизаций)
	|	И Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ЗапретитьПоступлениеТоваровБезНомеровГТД
	//-- НЕ УТ
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Возврат", НСтр("ru = 'Документ возврата';
										|en = 'Returns document'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ПустыеНомераГТДВДокументахВозврата",
		НСтр("ru = 'Обнаружены возвращенные товары без номеров ГТД в организацию 
			|""%1""';
			|en = 'The products returned in the company 
			|""%1"" were found without CFD numbers'"),
		СписокПолей,
		"Возврат");
		
	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДополнительныеПараметрыЗапроса.Вставить(
		"ЗапретитьПоступлениеТоваровБезНомеровГТД", Константы.ЗапретитьПоступлениеТоваровБезНомеровГТД.Получить());
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса,
		ДополнительныеПараметрыЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область Использование_ИсправлениеРазвернутыхОстатковПоВзаиморасчетам

// Обработчики этапа.

Процедура Использование_ИсправлениеРазвернутыхОстатковПоВзаиморасчетам(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Исправление развернутых остатков по взаиморасчетам не требуется.';
				|en = 'Correction of detailed balances on mutual settlements is not required.'"));
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	Расчеты.ЗаказКлиента КАК ОбъектРасчетов,
		|	Расчеты.Валюта КАК Валюта,
		|	Расчеты.ПредоплатаОстаток КАК ПредоплатаОстаток,
		|	Расчеты.ДолгОстаток КАК ДолгОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&КонецПериода, АналитикаУчетаПоПартнерам.Организация В (&Организации)) КАК Расчеты
		|
		|ГДЕ
		|	Расчеты.ПредоплатаОстаток <> 0 И
		|	Расчеты.ДолгОстаток <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
		|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент,
		|	Расчеты.ЗаказПоставщику,
		|	Расчеты.Валюта,
		|	Расчеты.ПредоплатаОстаток,
		|	Расчеты.ДолгОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&КонецПериода, АналитикаУчетаПоПартнерам.Организация В (&Организации)) КАК Расчеты
		|
		|ГДЕ
		|	Расчеты.ПредоплатаОстаток <> 0 И
		|	Расчеты.ДолгОстаток <> 0";
		
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(ПараметрыОбработчика.ПараметрыРасчета.ДатаОкончанияПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организации", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Исправление развернутых остатков по взаиморасчетам не требуется.';
					|en = 'Correction of detailed balances on mutual settlements is not required.'"));
			
		Иначе
			
			УстановитьСостояниеВыполненСОшибками(
				ПараметрыОбработчика,
				НСтр("ru = 'Обнаружены развернутые остатки по взаиморасчетам с партнерами.';
					|en = 'Detailed balances on mutual settlements with partners are found.'"),
				,
				,
				Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеОтрицательныхОстатковТоваровОрганизаций

// Обработчики этапа.

Процедура Оформление_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ПараметрыОбработчика) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Исправление отрицательных остатков товаров организации';
															|en = 'Correct negative stock balance of the company goods'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Исправить';
															|en = 'Correct'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ТаблицаПроверок)
	
	// Отрицательные остатки товаров организаций.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ОтрицательныеОстаткиТоваровОрганизаций",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОтрицательныхОстатковТоваровОрганизаций,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОтрицательныхОстатковТоваровОрганизаций");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Отрицательные остатки в регистре ""Товары организаций""';
			|en = 'Negative stock balance in the ""Company goods"" register'"),
		НСтр("ru = 'Отрицательных остатков быть не должно.';
			|en = 'There must be no negative inventory.'"));
	
КонецПроцедуры

Функция ЗапросОтрицательныеОстаткиТоваровОрганизаций() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.ВидЗапасов КАК ВидЗапасов,
	|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	|	ТоварыОрганизаций.Период КАК Период,
	|	ТоварыОрганизаций.КоличествоОборот КАК КоличествоОборот,
	|	ТоварыОрганизаций.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	|	ТоварыОрганизаций.КОформлениюСписанияОборот КАК КОформлениюСписанияОборот,
	|	ТоварыОрганизаций.КОформлениюСписанияКонечныйОстаток КАК КОформлениюСписанияКонечныйОстаток
	|ПОМЕСТИТЬ ТоварыОрганизацийИРезервыОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(
	|			&ГраницаКонецПредыдущегоПериода,
	|			&ГраницаКонецПериода,
	|			Месяц,
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И НЕ ВидЗапасов.ТипЗапасов В (&НеконтролируемыеТипыЗапасов)) КАК ТоварыОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Резервы.Организация,
	|	Резервы.АналитикаУчетаНоменклатуры,
	|	Резервы.ВидЗапасов,
	|	Резервы.НомерГТД,
	|	Резервы.Период,
	|	Резервы.КоличествоОборот,
	|	Резервы.КоличествоКонечныйОстаток,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций.ОстаткиИОбороты(
	|			&ГраницаКонецПредыдущегоПериода,
	|			&ГраницаКонецПериода,
	|			Месяц,
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И НЕ ВидЗапасов.ТипЗапасов В (&НеконтролируемыеТипыЗапасов)) КАК Резервы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	НомерГТД,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Организация КАК Организация,
	|	Остатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов КАК ВидЗапасов,
	|	Остатки.НомерГТД КАК НомерГТД,
	|	Остатки.Период КАК Период,
	|	СУММА(Остатки.КоличествоКонечныйОстаток) КАК Количество,
	|	СУММА(Остатки.КоличествоОборот) КАК Оборот
	|ПОМЕСТИТЬ ОтрицательныеОстатки
	|ИЗ
	|	ТоварыОрганизацийИРезервыОстаткиИОбороты КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.КоличествоКонечныйОстаток) < 0 И
	|	СУММА(Остатки.КоличествоОборот) < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.Период,
	|	СУММА(Остатки.КОформлениюСписанияКонечныйОстаток),
	|	СУММА(Остатки.КОформлениюСписанияОборот)
	|ИЗ
	|	ТоварыОрганизацийИРезервыОстаткиИОбороты КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.КОформлениюСписанияКонечныйОстаток) < 0 И
	|	СУММА(Остатки.КОформлениюСписанияОборот) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыОрганизацийИРезервыОстаткиИОбороты";
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПроверкаОтрицательныхОстатковТоваровОрганизаций(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru = 'Аналитика номенклатуры';
															|en = 'Product dimension'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru = 'Вид запасов';
																|en = 'Inventory kind'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru = 'Номер ГТД';
															|en = 'CCD number'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru = 'Количество';
																|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОтрицательныеОстатки",
		НСтр("ru = 'Обнаружены отрицательные остатки товаров организации ""%1"" на конец периода %2';
			|en = 'Negative stock balance of the ""%1"" company goods is detected as of the end of the %2 period'"),
		СписокПолей);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(
		"НеконтролируемыеТипыЗапасов", Перечисления.ТипыЗапасов.НеконтролируемыеПоТоварамОрганизацииТипыЗапасов());
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ЗапросОтрицательныеОстаткиТоваровОрганизаций(),
		ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеРасходовБудущихПериодов

// Обработчики этапа.

Процедура Использование_РаспределениеРасходовБудущихПериодов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет прочих доходов и расходов не ведется';
				|en = 'Accounting of other income and expenses is not kept'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статьи.Ссылка,
	|	Статьи.ВариантРаспределенияРасходовУпр,
	|	Статьи.ВариантРаспределенияРасходовРегл
	|ПОМЕСТИТЬ СтатьиРБП
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|	ИЛИ Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статьи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация,
	|	Данные.Подразделение,
	|	Данные.НаправлениеДеятельности,
	|	Данные.СтатьяРасходов,
	|	Данные.АналитикаРасходов,
	|	Данные.СуммаПриход - Данные.СуммаРасход КАК Сумма,
	|	Данные.СуммаУпрПриход - Данные.СуммаУпрРасход КАК СуммаУпр,
	|	Данные.СуммаРеглПриход - Данные.СуммаРеглРасход КАК СуммаРегл,
	|	Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход КАК ПостояннаяРазница,
	|	Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход КАК ВременнаяРазница,
	|	Данные.БезСумм
	|ПОМЕСТИТЬ ВТНераспределенныеРБП
	|ИЗ (
	|	ВЫБРАТЬ
	|		Данные.Организация,
	|		Данные.Подразделение,
	|		Данные.СтатьяРасходов,
	|		Данные.АналитикаРасходов,
	|		Данные.НаправлениеДеятельности,
	|		СУММА(Данные.СуммаПриход) КАК СуммаПриход,
	|		СУММА(Данные.СуммаУпрПриход) КАК СуммаУпрПриход,
	|		СУММА(Данные.СуммаРеглПриход) КАК СуммаРеглПриход,
	|		СУММА(Данные.ПостояннаяРазницаПриход) КАК ПостояннаяРазницаПриход,
	|		СУММА(Данные.ВременнаяРазницаПриход) КАК ВременнаяРазницаПриход,
	|		СУММА(Данные.СуммаРасход) КАК СуммаРасход,
	|		СУММА(Данные.СуммаУпрРасход) КАК СуммаУпрРасход,
	|		СУММА(Данные.СуммаРеглРасход) КАК СуммаРеглРасход,
	|		СУММА(Данные.ПостояннаяРазницаРасход) КАК ПостояннаяРазницаРасход,
	|		СУММА(Данные.ВременнаяРазницаРасход) КАК ВременнаяРазницаРасход,
	|		СУММА(Данные.СуммаОстаток) КАК СуммаОстаток,
	|		СУММА(Данные.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	|		СУММА(Данные.СуммаРеглОстаток) КАК СуммаРеглОстаток,
	|		СУММА(Данные.ПостояннаяРазницаОстаток) КАК ПостояннаяРазницаОстаток,
	|		СУММА(Данные.ВременнаяРазницаОстаток) КАК ВременнаяРазницаОстаток,
	|		МИНИМУМ(Данные.БезСумм) КАК БезСумм
	|	ИЗ (
	|		ВЫБРАТЬ
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности,
	|			СУММА(Приходы.Сумма) КАК СуммаПриход,
	|			СУММА(Приходы.СуммаУпр) КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Приходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Приходы.СтатьяРасходов)
	|				И (Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Приходы.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.ВариантУказанияСуммыУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
	|				И Распределение.Организация = Приходы.Организация
	|				И Распределение.Подразделение = Приходы.Подразделение
	|				И Распределение.СтатьяРасходов = Приходы.СтатьяРасходов
	|				И Распределение.АналитикаРасходов = Приходы.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности = Приходы.НаправлениеДеятельности
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(Приходы.Период, ДЕНЬ) <= &КонецПериода
	|			И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Приходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности
	|			
	|		ОБЪЕДИНИТЬ ВСЕ
	|			
	|		ВЫБРАТЬ
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			СУММА(Приходы.СуммаРегл) КАК СуммаРеглПриход,
	|			СУММА(Приходы.ПостояннаяРазница) КАК ПостояннаяРазницаПриход,
	|			СУММА(Приходы.ВременнаяРазница) КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Приходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Приходы.СтатьяРасходов)
	|				И (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Приходы.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.ВариантУказанияСуммыРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
	|				И Распределение.Организация = Приходы.Организация
	|				И Распределение.Подразделение = Приходы.Подразделение
	|				И Распределение.СтатьяРасходов = Приходы.СтатьяРасходов
	|				И Распределение.АналитикаРасходов = Приходы.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности = Приходы.НаправлениеДеятельности
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(Приходы.Период, ДЕНЬ) <= &КонецПериода
	|			И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Приходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности	
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			СУММА(Расходы.Сумма) КАК СуммаРасход,
	|			СУММА(Расходы.СуммаУпр) КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Расходы.СтатьяРасходов)
	|					И (Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО Распределение.Ссылка = Расходы.Регистратор
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(ЕСТЬNULL(Распределение.Дата, Расходы.Период), ДЕНЬ) <= &КонецПериода
	|			И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ Расходы.РасчетСебестоимости
	|			И Расходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			СУММА(Расходы.СуммаРегл) КАК СуммаРеглРасход,
	|			СУММА(Расходы.ПостояннаяРазница) КАК ПостояннаяРазницаРасход,
	|			СУММА(Расходы.ВременнаяРазница) КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Расходы.СтатьяРасходов)
	|					И (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО Распределение.Ссылка = Расходы.Регистратор
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(ЕСТЬNULL(Распределение.Дата, Расходы.Период), ДЕНЬ) <= &КонецПериода
	|			И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ Расходы.РасчетСебестоимости
	|			И Расходы.Организация В (&МассивОрганизаций)
	|
	|		СГРУППИРОВАТЬ ПО
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности
	|			
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Себестоимость.Организация,
	|			Себестоимость.Подразделение,
	|			Себестоимость.СтатьяРасходовСписания,
	|			Себестоимость.АналитикаРасходов,
	|			ЕСТЬNULL(Назначения.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ИСТИНА КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.СебестоимостьТоваров КАК Себестоимость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО Статьи.Ссылка = Себестоимость.СтатьяРасходовСписания
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|				ПО Назначения.Ссылка = Себестоимость.АналитикаУчетаНоменклатуры.Назначение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Себестоимость.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.Организация = Себестоимость.Организация
	|				И Распределение.Подразделение = Себестоимость.Подразделение
	|				И Распределение.СтатьяРасходов = Себестоимость.СтатьяРасходовСписания
	|				И Распределение.АналитикаРасходов = Себестоимость.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности =
	|					ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|		ГДЕ
	|			Себестоимость.Период <= &КонецПериода
	|			И Себестоимость.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Себестоимость.Организация В (&МассивОрганизаций)
	|	
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			Остатки.Организация,
	|			Остатки.Подразделение,
	|			Остатки.СтатьяРасходов,
	|			Остатки.АналитикаРасходов,
	|			Остатки.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			Остатки.СуммаОстаток,
	|			Остатки.СуммаУпрОстаток,
	|			Остатки.СуммаРеглОстаток,
	|			Остатки.ПостояннаяРазницаОстаток,
	|			Остатки.ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы.Остатки(,
	|				СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|				ИЛИ СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|			) КАК Остатки
	|			
	|		) КАК Данные
	|	СГРУППИРОВАТЬ ПО
	|		Данные.Организация,
	|		Данные.Подразделение,
	|		Данные.СтатьяРасходов,
	|		Данные.АналитикаРасходов,
	|		Данные.НаправлениеДеятельности
	|) КАК Данные
	|
	|ГДЕ
	|	(Данные.СуммаПриход - Данные.СуммаРасход) <> 0 И Данные.СуммаОстаток <> 0
	|	ИЛИ (Данные.СуммаУпрПриход - Данные.СуммаУпрРасход) <> 0 И Данные.СуммаУпрОстаток <> 0
	|	ИЛИ (Данные.СуммаРеглПриход - Данные.СуммаРеглРасход) <> 0 И Данные.СуммаРеглОстаток <> 0
	|	ИЛИ (Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход) <> 0 И Данные.ПостояннаяРазницаОстаток <> 0
	|	ИЛИ (Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход) <> 0 И Данные.ВременнаяРазницаОстаток <> 0
	|	ИЛИ Данные.БезСумм";
	
	Запрос.Выполнить();
		
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.СтатьиРБП = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет статей расходов с вариантом распределения ""На расходы будущих периодов""';
				|en = 'No expense items with the ""For deferred expenses"" allocation option'"));
		
	ИначеЕсли РазмерыВременныхТаблиц.ВТНераспределенныеРБП = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет незакрытых оборотов по статьям расходов с вариантом распределения ""На расходы будущих периодов""';
				|en = 'No unclosed turnovers for expense item with the ""For deferred expenses"" allocation option'"));
	 
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РаспределениеРасходовБудущихПериодов(ТаблицаПроверок)
	
	// Расходы будущих периодов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеРасходыБудущихПериодов",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовБудущихПериодов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНераспределенныеРасходыБудущихПериодов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Нераспределенные расходы будущих периодов';
			|en = 'Unallocated deferred expenses '"),
		НСтр("ru = 'Не должно быть нераспределенных расходов по статьям расходов с вариантом распределения ""На расходы будущих периодов"".';
			|en = 'All expenses must be allocated by expense items with the ""For deferred expenses"" allocation option.'"));
	
КонецПроцедуры

Процедура ПроверкаНераспределенныеРасходыБудущихПериодов(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru = 'Подразделение';
															|en = 'Department'"));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru = 'Статья расходов';
															|en = 'Expense item'"));
	СписокПолей.Добавить("АналитикаРасходов", 		НСтр("ru = 'Аналитика расходов';
															|en = 'Expenditure dimension'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru = 'Направление деятельности';
														|en = 'Line of business'"));
	СписокПолей.Добавить("Сумма",		 			НСтр("ru = 'Сумма';
															|en = 'Amount'"));
	СписокПолей.Добавить("СуммаУпр",		 		НСтр("ru = 'Сумма (упр.)';
															|en = 'Amount (man.)'"));
	СписокПолей.Добавить("СуммаРегл",		 		НСтр("ru = 'Сумма (регл.)';
															|en = 'Amount (compl.)'"));
	СписокПолей.Добавить("ПостояннаяРазница",		НСтр("ru = 'Постоянная разница';
															|en = 'Permanent difference'"));
	СписокПолей.Добавить("ВременнаяРазница",		НСтр("ru = 'Временная разница';
														|en = 'Temporary difference'"));
	СписокПолей.Добавить("БезСумм",					НСтр("ru = 'Данные без сумм';
															|en = 'Data without amounts'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНераспределенныеРБП",
		НСтр("ru = 'Обнаружены нераспределенные расходы будущих периодов по организации ""%1"" за период %2';
			|en = 'Unallocated deferred expenses are detected for the ""%1"" company for %2 period'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ

#Область ОтражениеРезервов

Процедура Использование_НачислениеСписаниеРезервовПредстоящихРасходов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыУчетаРезервов.Организация КАК Организация,
	|	ОбъектыУчетаРезервов.ВидРезервов КАК ВидРезервов,
	|	ОбъектыУчетаРезервов.Ссылка КАК ОбъектУчетаРезервов
	|ПОМЕСТИТЬ ВТРезервы
	|ИЗ
	|	Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК ОбъектыУчетаРезервов
	|ГДЕ
	|	ОбъектыУчетаРезервов.НачалоПериода <= &КонецПериода
	|	И ОбъектыУчетаРезервов.КонецПериода = ДАТАВРЕМЯ(1,1,1)
	|	И ОбъектыУчетаРезервов.Организация В (&МассивОрганизаций)
	|	И НЕ ОбъектыУчетаРезервов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОбъектыУчетаРезервов.Организация КАК Организация,
	|	ОбъектыУчетаРезервов.ВидРезервов КАК ВидРезервов,
	|	ОбъектыУчетаРезервов.Ссылка КАК ОбъектУчетаРезервов
	|ИЗ
	|	Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК ОбъектыУчетаРезервов
	|ГДЕ
	|	ОбъектыУчетаРезервов.НачалоПериода <= &КонецПериода
	|	И ОбъектыУчетаРезервов.КонецПериода >= &КонецПериода
	|	И ОбъектыУчетаРезервов.Организация В (&МассивОрганизаций)
	|	И НЕ ОбъектыУчетаРезервов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РезервыПредстоящихРасходов.Организация КАК Организация,
	|	РезервыПредстоящихРасходов.ВидРезервов КАК ВидРезервов,
	|	РезервыПредстоящихРасходов.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов
	|ИЗ
	|	РегистрНакопления.РезервыПредстоящихРасходов.Остатки(&КонецПериода, Организация В (&МассивОрганизаций)) КАК РезервыПредстоящихРасходов
	|ГДЕ
	|	РезервыПредстоящихРасходов.СуммаУпрОстаток <> 0
	|	ИЛИ РезервыПредстоящихРасходов.СуммаРеглОстаток <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидРезервов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыРезервов.Организация КАК Организация,
	|	ВидыРезервов.ВидРезервов КАК ВидРезервов
	|ПОМЕСТИТЬ ВТРезервыКОтражению
	|ИЗ
	|	ВТРезервы КАК ВидыРезервов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПредстоящихРасходов КАК ОтражениеРезервов
	|		ПО (ОтражениеРезервов.Дата = &КонецПериода)
	|			И ВидыРезервов.Организация = ОтражениеРезервов.Организация
	|			И (ВидыРезервов.ВидРезервов = ОтражениеРезервов.ВидРезервов)
	|			И (ОтражениеРезервов.Проведен)
	|ГДЕ
	|	ОтражениеРезервов.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыРезервов.Организация КАК Организация,
	|	ОбъектыРезервов.ВидРезервов КАК ВидРезервов,
	|	ОбъектыРезервов.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов,
	|	ОтражениеРезервов.Ссылка КАК Документ
	|ПОМЕСТИТЬ ВТОбъектыУчетаРезервовКОтражению
	|ИЗ
	|	ВТРезервы КАК ОбъектыРезервов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПредстоящихРасходов КАК ОтражениеРезервов
	|		ПО (ОтражениеРезервов.Дата = &КонецПериода)
	|			И ОбъектыРезервов.Организация = ОтражениеРезервов.Организация
	|			И (ОбъектыРезервов.ВидРезервов = ОтражениеРезервов.ВидРезервов)
	|			И (ОтражениеРезервов.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПредстоящихРасходов.Резервы КАК РезервыОтраженияРезервов
	|		ПО ОтражениеРезервов.Ссылка = РезервыОтраженияРезервов.Ссылка
	|			И (ОбъектыРезервов.ОбъектУчетаРезервов = РезервыОтраженияРезервов.ОбъектУчетаРезервов)
	|ГДЕ
	|	РезервыОтраженияРезервов.ОбъектУчетаРезервов ЕСТЬ NULL";
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТРезервы = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет объектов учета резервов, требующих отражения начисления или списание резервов';
				|en = 'No reserve accounting objects which require accrual recording or reserve write-off'"));
		
	ИначеЕсли РазмерыВременныхТаблиц.ВТОбъектыУчетаРезервовКОтражению <> 0 Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru = 'Отражение резервов предстоящих расходов выполнено';
				|en = 'Reserve record of future expenses complete'"));
		
	ИначеЕсли РазмерыВременныхТаблиц.ВТРезервыКОтражению = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Отражение резервов предстоящих расходов выполнено';
				|en = 'Reserve record of future expenses complete'"));
		
	КонецЕсли;	
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_НачислениеСписаниеРезервовПредстоящихРасходов(ТаблицаПроверок)
	
	// Отражение резервов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаНеобходимостиНачислениеСписаниеРезервовПредстоящихРасходов",
		Перечисления.ОперацииЗакрытияМесяца.НачислениеСписаниеРезервовПредстоящихРасходов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиНачислениеСписаниеРезервовПредстоящихРасходов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не отражена операция начисления/списания резервов предстоящих расходов';
			|en = 'Accrual/write-off transaction is not recorded for future expense reserves'"),
		НСтр("ru = 'По всем видам резервов должны быть созданы документы ""Начисления и списания резервов предстоящих расходов"".';
			|en = 'The Accruals and deductions of future expense reserves documents must be created for all reserve kinds.'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиНачислениеСписаниеРезервовПредстоящихРасходов(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ВидРезервов", НСтр("ru = 'Вид резервов';
											|en = 'Reserve kind'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРезервыКОтражению",
		НСтр("ru = 'Не созданы документы ""Начисления и списания резервов предстоящих расходов"" по организации ""%1"" за период %2';
			|en = 'The Accruals and deductions of future expense reserves documents were not created for the %1 company for the period %2'"),
		СписокПолей);
		
	ШаблонТекстаОшибки = НСтр("ru = 'Для документов ""Начисления и списания резервов предстоящих расходов"" по организации ""%1"" за период %2 указаны не все объекты учета резервов';
								|en = 'Not all reserve accounting objects are specified for the ""Accruals and write-offs of future expense reserves"" documents by the ""%1"" company for period %2'");
	РасширенныйСписокПолей = СписокПолей.Скопировать();
	РасширенныйСписокПолей.Добавить("ОбъектУчетаРезервов", НСтр("ru = 'Объект учета резервов';
																|en = 'Reserve accounting object'"));
	РасширенныйСписокПолей.Добавить("Документ", НСтр("ru = 'Документ начисления и списания резервов';
													|en = 'Document of reserve accrual and write-off'"));
	ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ВТОбъектыУчетаРезервовКОтражению", ШаблонТекстаОшибки, РасширенныйСписокПолей, "Документ");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область СписаниеЗатратНаВыпускБезРаспоряжений

// Обработчики этапа.

Процедура Использование_СписаниеЗатратНаВыпускБезРаспоряжений(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет производственных операций не ведется';
				|en = 'Production operation accounting is not kept'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Организация,
	|	Т.Распоряжение,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.КоличествоКонечныйОстаток КАК КонечныйОстаток,
	|	Т.КоличествоНачальныйОстаток КАК НачальныйОстаток,
	|	Т.КоличествоПриход КАК Оборот
	|ПОМЕСТИТЬ ВТРаспоряженияНаСписание
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,,
	|		Организация В (&МассивОрганизаций)) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация,
	|	Т.Распоряжение,
	|	СУММА(1) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТКОформлению
	|ИЗ
	|	ВТРаспоряженияНаСписание КАК Т
	|ГДЕ
	|	Т.НачальныйОстаток = 0
	|	И Т.КонечныйОстаток <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстОбороты
	|ПОМЕСТИТЬ ВТОбороты
	|ИЗ
	|	ВТРаспоряженияНаСписание КАК Т
	|ГДЕ
	|	Т.НачальныйОстаток = 0
	|	И Т.КонечныйОстаток = 0
	|	И Т.Оборот <> 0";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТКОформлению = 0 И РазмерыВременныхТаблиц.ВТОбороты = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет незакрытых оборотов по регистру ""Распоряжения на списание по нормативам""';
				|en = 'No unclosed turnovers in the ""Standard write-off references"" register'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_СписаниеЗатратНаВыпускБезРаспоряжений(ПараметрыОбработчика) Экспорт
	
	ИспользуетсяПроизводство22 = ПроизводствоСервер.НастройкиПодсистемыПроизводство().ИспользуетсяПроизводство22;
	Если ИспользуетсяПроизводство22 Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Списание затрат на выпуск без распоряжений (2.1)';
															|en = 'Write off release costs without references (2.1)'");
	ИначеЕсли ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Списание затрат на выпуск';
															|en = 'Write off release costs'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Списать';
															|en = 'Write off'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_СписаниеЗатратНаВыпускБезРаспоряжений(ТаблицаПроверок)
	
	// Списание затрат на выпуск без распоряжений.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленныеСписанияЗатратНаВыпускБезРаспоряжений",
		Перечисления.ОперацииЗакрытияМесяца.СписаниеЗатратНаВыпускБезРаспоряжений,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиСписанияЗатратНаВыпускБезРаспоряжений");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформленные списания материалов (работ) на выпуски продукции без распоряжений';
			|en = 'Non-registered material (work) write-off for product releases without references'"),
		НСтр("ru = 'Должно быть оформлены все списания материалов (работ) и распределены трудозатраты на все документы ""Выпуск продукции""
			|по подразделениям, для которых списание затрат выполняется документом ""Списание затрат на выпуск"".';
			|en = 'All material (work) write-offs should be registered and labor costs should be allocated to all documents ""Product release""
			|by departments for which costs are written off with the ""Write off release costs"" document.'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиСписанияЗатратНаВыпускБезРаспоряжений(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Распоряжение", 	НСтр("ru = 'Документ выпуска';
													|en = 'Release document'"));
	СписокПолей.Добавить("КоличествоСтрок", НСтр("ru = 'Количество строк с ошибками';
												|en = 'Quantity of lines with errors'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТКОформлению",
		НСтр("ru = 'Обнаружены не оформленные списания материалов (работ) организации ""%1"" на конец периода %2';
			|en = 'Non-registered write-off of materials (works) is detected for the ""%1"" company at the end of %2 period'"),
		СписокПолей,
		"Распоряжение");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеМатериаловИРаботНаСебестоимостьПродукции21

// Обработчики этапа.

Процедура Использование_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет производственных операций не ведется';
				|en = 'Production operation accounting is not kept'"));
			
		Возврат;
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ НастройкиПроизводства.ИспользуетсяПроизводство21 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется управление производством (версия 2.1)';
				|en = 'Production management, version 2.1 is not used'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = Документы.РаспределениеПроизводственныхЗатрат.ТекстЗапросаЗаполнитьПроизводственныеЗатраты(Истина);
	
	// Доп. параметры запроса.
	Запрос.УстановитьПараметр("ОкончаниеПериода",  	     Запрос.Параметры.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаОкончаниеПериода", Запрос.Параметры.ГраницаКонецПериода);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",	     Ложь);
	Запрос.УстановитьПараметр("Организация",       	     Запрос.Параметры.МассивОрганизаций);
	Запрос.УстановитьПараметр("ВсеПодразделения",  	     Истина);
	Запрос.УстановитьПараметр("Подразделения",     	     Новый Массив);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Организация
	|ПОМЕСТИТЬ ДвиженияМатериаловВПроизводстве
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве КАК ДД
	|ГДЕ
	|	ДД.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДД.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ДД.Организация В (&МассивОрганизаций)
	|	И ДД.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Организация,
	|	МатериалыИРаботы.Подразделение,
	|	МатериалыИРаботы.Номенклатура,
	|	МатериалыИРаботы.Характеристика,
	|	МатериалыИРаботы.Серия,
	|	МатериалыИРаботы.КРаспределению КАК Количество
	|ПОМЕСТИТЬ ВТНераспределенныеМатериалыИРаботы
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.КРаспределению <> 0
	|	И МатериалыИРаботы.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Организация,
	|	МатериалыИРаботы.Подразделение,
	|	МатериалыИРаботы.Номенклатура,
	|	МатериалыИРаботы.Характеристика,
	|	МатериалыИРаботы.Серия,
	|	МатериалыИРаботы.КРаспределению КАК Количество
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияМатериаловВПроизводстве КАК ДвиженияМатериаловВПроизводстве
	|	ПО МатериалыИРаботы.Организация = ДвиженияМатериаловВПроизводстве.Организация
	|ГДЕ
	|	МатериалыИРаботы.КРаспределению <> 0
	|	И МатериалыИРаботы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И (НЕ ДвиженияМатериаловВПроизводстве.Организация ЕСТЬ NULL 
	|		ИЛИ НЕ &ИспользуетсяПроизводство22)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МатериалыИРаботы.Организация
	|ПОМЕСТИТЬ ВТРаспределенныеМатериалыИРаботы
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.РаспределеноНаПроизводство > 0";
	
	Запрос.УстановитьПараметр("ИспользуетсяПроизводство22", НастройкиПроизводства.ИспользуетсяПроизводство22);
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТНераспределенныеМатериалыИРаботы = 0
	 И РазмерыВременныхТаблиц.ВТРаспределенныеМатериалыИРаботы = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет материалов и работ для распределения на производство';
				|en = 'No materials and works to allocate to production'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21(ПараметрыОбработчика) Экспорт
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ИспользуетсяПроизводство21 = НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21;
	ИспользуетсяПроизводство22 = НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство22;
	
	Если НЕ (ИспользуетсяПроизводство21 И ИспользуетсяПроизводство22) Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Распределение материалов и работ на себестоимость продукции';
															|en = 'Allocation of materials and works to product cost'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Распределить';
															|en = 'Allocate'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21(ТаблицаПроверок)
	
	// Распределение материалов и работ на себестоимость продукции (2.1).
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеРаспределеныМатериалыИРаботыНаСебестоимостьПродукции21",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеМатериаловИРаботНаСебестоимостьПродукции21,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиРаспределенияМатериаловИРаботНаСебестоимостьПродукции21");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не распределенные материалы (работы) на производство';
			|en = 'Non-allocated materials (works) to production'"),
		НСтр("ru = 'Должно быть оформлено распределение всех материалов и работ на производство документами ""Распределение материалов и работ"".';
			|en = 'Allocation of all materials and works to production should be registered with the ""Allocation of materials and works"" documents.'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиРаспределенияМатериаловИРаботНаСебестоимостьПродукции21(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 	НСтр("ru = 'Подразделение';
													|en = 'Department'"));
	СписокПолей.Добавить("Номенклатура", 	НСтр("ru = 'Номенклатура';
													|en = 'Products and services'"));
	СписокПолей.Добавить("Характеристика", 	НСтр("ru = 'Характеристика';
													|en = 'Characteristic'"));
	СписокПолей.Добавить("Серия", 			НСтр("ru = 'Серия';
													|en = 'Series'"));
	СписокПолей.Добавить("Количество",		НСтр("ru = 'Количество';
													|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНераспределенныеМатериалыИРаботы",
		НСтр("ru = 'Обнаружены не распределенные на производство материалы (работы) организации ""%1"" на конец периода %2';
			|en = 'Materials (works) not allocated for production were detected for the ""%1"" company as of the end of %2 period'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеПроизводстваБезЗаказов

// Обработчики этапа.

Процедура Использование_ОформлениеПроизводстваБезЗаказов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет производственных операций не ведется';
				|en = 'Production operation accounting is not kept'"));
			
		Возврат;
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется управление производством (версия 2.2)';
				|en = 'Production management, version 2.2 is not used'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрВидыЗапасов.Ссылка КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТВидыЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК СпрВидыЗапасов
	|
	|ГДЕ
	|	СпрВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварТребующийПодтвержденияВыпуска)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Работа
	|ПОМЕСТИТЬ ВТРаботы
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РезервыТоваровОрганизаций.Организация КАК Организация,
	|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры,
	|	РезервыТоваровОрганизаций.НомерГТД,
	|	-1 * РезервыТоваровОрганизаций.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ВТНеоформленноеПроизводство
	|// Получаем остатки переданной продукции
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
	|		&ГраницаКонецПериода,
	|		ВидЗапасов В (ВЫБРАТЬ
	|						Т.ВидЗапасов
	|					ИЗ
	|						ВТВидыЗапасов КАК Т)) КАК РезервыТоваровОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры.МестоХранения = СпрСклады.Ссылка
	|ГДЕ
	|	РезервыТоваровОрганизаций.КоличествоОстаток < 0
	|	И СпрСклады.ЦеховаяКладовая
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Работы.Организация КАК Организация,
	|	КлючиАналитики.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	-1 * Работы.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
	|		&ГраницаКонецПериода,
	|		Номенклатура В (ВЫБРАТЬ
	|							ВТРаботы.Работа
	|						ИЗ
	|							ВТРаботы КАК ВТРаботы)) КАК Работы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитики
	|		ПО КлючиАналитики.МестоХранения = Работы.Подразделение
	|		И КлючиАналитики.Номенклатура = Работы.Номенклатура
	|		И КлючиАналитики.Характеристика = Работы.Характеристика
	|		И КлючиАналитики.Серия = Работы.Серия
	|		И КлючиАналитики.Назначение = Работы.Назначение
	|		И КлючиАналитики.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|ГДЕ
	|	Работы.КоличествоОстаток < 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка
	|ПОМЕСТИТЬ ВТДокументыПроизводства
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК Т
	|ГДЕ
	|	Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В (&МассивОрганизаций)
	|	И Т.Проведен";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТНеоформленноеПроизводство = 0 И РазмерыВременныхТаблиц.ВТДокументыПроизводства = 0 Тогда

		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет материалов и работ для списания на производство без заказов';
				|en = 'No materials and works to write off for production without orders '"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ОформлениеПроизводстваБезЗаказов(ПараметрыОбработчика) Экспорт
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ (НастройкиПроизводства.ИспользуетсяПроизводство21 И НастройкиПроизводства.ИспользуетсяПроизводство22) Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Оформление производства без заказов';
															|en = 'Register production without orders'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Оформить';
															|en = 'Register'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеПроизводстваБезЗаказов(ТаблицаПроверок)
	
	// Оформление производства без заказов (2.2).
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленноеПроизводствоБезЗаказов",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПроизводстваБезЗаказов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиОформленияПроизводстваБезЗаказов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не списаны материалы (работы) и трудозатраты на производство';
			|en = 'Materials (works) and labor costs are not written off to production'"),
		НСтр("ru = 'Должно быть оформлено списание всех материалов (работ) и трудозатрат на производство без заказов.';
			|en = 'Write-off of all materials (works) and labor costs for production without orders should be registered.'"));
		
КонецПроцедуры

Процедура ПроверкаНеобходимостиОформленияПроизводстваБезЗаказов(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", 	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Product dimension'"));
	СписокПолей.Добавить("НомерГТД", 					НСтр("ru = 'Номер ГТД';
																|en = 'CCD number'"));
	СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНеоформленноеПроизводство",
		НСтр("ru = 'Обнаружены не списанные на производство без заказа материалы (работы) организации ""%1"" на конец периода %2';
			|en = 'Materials (works) not written off for production without order are detected for the ""%1"" company as of the end of %2 period'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область ОформлениеПередачМатериаловВПроизводство

// Обработчики этапа.

Процедура Использование_ОформлениеПередачМатериаловВПроизводство(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет производственных операций не ведется';
				|en = 'Production operation accounting is not kept'"));
			
		Возврат;
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется управление производством (версия 2.2)';
				|en = 'Production management, version 2.2 is not used'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.ЭтапПроизводства КАК Ссылка
	|ПОМЕСТИТЬ ЭтапыКРаспределению
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюТоваровОрганизацийНаПроизводство КАК ДД
	|ГДЕ
	|	ДД.Организация В (&МассивОрганизаций)
	|	И ДД.ПериодЗаполнения МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Организация КАК Организация,
	|	ДД.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.Характеристика КАК Характеристика,
	|	СУММА(ДД.Количество) КАК Количество
	|ПОМЕСТИТЬ РасходыБезПередач
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реквизиты.Организация КАК Организация,
	|		Реквизиты.Ссылка КАК ЭтапПроизводства,
	|		Расход.Номенклатура КАК Номенклатура,
	|		Расход.Характеристика КАК Характеристика,
	|		СУММА(Расход.Количество) КАК Количество
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК Расход
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
	|				ПО Расход.Ссылка = Реквизиты.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЭтапыКРаспределению КАК ЭтапыКРаспределению
	|				ПО Реквизиты.Ссылка = ЭтапыКРаспределению.Ссылка
	|	ГДЕ
	|		ЭтапыКРаспределению.Ссылка ЕСТЬ NULL
	|		И Расход.ДатаРасхода МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Реквизиты.Организация В (&МассивОрганизаций)
	|		И Реквизиты.Проведен
	|		И НЕ Расход.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Реквизиты.Организация,
	|		Реквизиты.Ссылка,
	|		Расход.Номенклатура,
	|		Расход.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Реквизиты.Организация КАК Организация,
	|		Реквизиты.Ссылка КАК ЭтапПроизводства,
	|		Движения.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		Движения.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		- СУММА(Движения.Количество) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК Движения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
	|				ПО Движения.Регистратор = Реквизиты.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЭтапыКРаспределению КАК ЭтапыКРаспределению
	|				ПО Реквизиты.Ссылка = ЭтапыКРаспределению.Ссылка
	|	ГДЕ
	|		ЭтапыКРаспределению.Ссылка ЕСТЬ NULL
	|		И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Движения.Организация В (&МассивОрганизаций)
	|		И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Реквизиты.Организация,
	|		Реквизиты.Ссылка,
	|		Движения.АналитикаУчетаНоменклатуры.Номенклатура,
	|		Движения.АналитикаУчетаНоменклатуры.Характеристика
	|	
	|	) КАК ДД
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДД.Организация,
	|		ДД.ЭтапПроизводства,
	|		ДД.Номенклатура,
	|		ДД.Характеристика
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ДД.Количество) <> 0
	|";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.РасходыБезПередач = 0 Тогда

		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Все передачи материалов в производство оформлены или оформление не требуется';
				|en = 'All material transfers to production are registered or registration is not required'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ОформлениеПередачМатериаловВПроизводство(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Оформить';
															|en = 'Register'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеПередачМатериаловВПроизводство(ТаблицаПроверок)
	
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"РасходыБезПередач",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачМатериаловВПроизводство,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиОформлениеПередачМатериаловВПроизводство");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Оформление передач материалов в производство.';
			|en = 'Register material transfers to production.'"),
		НСтр("ru = 'В объеме израсходованных материалов по этапам производства должны быть оформлены передачи.';
			|en = 'Transfers must be registered for the consumed material volume by production stages.'"));
		
КонецПроцедуры

Процедура ПроверкаНеобходимостиОформлениеПередачМатериаловВПроизводство(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ЭтапПроизводства",			НСтр("ru = 'Этап производства';
															|en = 'Production stage'"));
	СписокПолей.Добавить("Номенклатура", 				НСтр("ru = 'Номенклатура';
																|en = 'Products and services'"));
	СписокПолей.Добавить("Характеристика",				НСтр("ru = 'Характеристика';
																|en = 'Characteristic'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"РасходыБезПередач",
		НСтр("ru = 'Обнаружены этапы производства, в которых отражен расход, при этом передача материалов не оформлена. Организация ""%1"", период %2';
			|en = 'Production stages with recorded expenses were found, material transfer is not registered. Company %1, period %2'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ПланированиеПроизводстваПродукцииБезСпецификаций

// Обработчики этапа.

// Процедура определяет необходимость выполнения этапа.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Использование_ПланированияПроизводстваПродукцииБезСпецификаций(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет производственных операций не ведется';
				|en = 'Production operation accounting is not kept'"));
			
		Возврат;
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется управление производством (версия 2.2)';
				|en = 'Production management, version 2.2 is not used'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	Запрос.Текст = Документы.ЗаказНаПроизводство2_2.ТекстЗапросаВТНезапланированнаяПродукцияЗаказа();
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.НезапланированнаяПродукцияБезСпецификаций = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Весь объем производства продукции по заказам без спецификаций запланировано, либо планирование не требуется.';
				|en = 'The whole volume of production by orders without bills of materials is planned or planning is not required.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет оформление этапа.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Оформление_ПланированияПроизводстваПродукцииБезСпецификаций(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Запланировать';
															|en = 'To plan'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ПланированияПроизводстваПродукцииБезСпецификаций(ТаблицаПроверок)
	
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НезапланированнаяПродукцияБезСпецификаций",
		Перечисления.ОперацииЗакрытияМесяца.ПланированиеПроизводстваПродукцииБезСпецификаций,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиПланированияПроизводстваПродукцииБезСпецификаций");
	
	ТекстКомментарий =
		НСтр("ru = 'Если по заказу на производство без спецификаций произведена часть продукции, то производство оставшейся части должно быть запланировано в полном объеме, либо отменено.';
			|en = 'If some products are manufactured by production order without bills of materials, the rest of them should be planned for production fully or canceled.'");
		
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Планирование производства продукции без спецификаций.';
			|en = 'Plan production of manufactured products without BOMs.'"),
		ТекстКомментарий);
		
КонецПроцедуры

// Процедура проверяет наличие ошибок при выполнении этапа и регистрирует их в ИБ.
//
// Параметры:
//  ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки()
//
Процедура ПроверкаНеобходимостиПланированияПроизводстваПродукцииБезСпецификаций(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ЗаказНаПроизводство",			НСтр("ru = 'Заказ на производство';
																|en = 'Production order'"));
	СписокПолей.Добавить("Номенклатура", 				НСтр("ru = 'Номенклатура';
																|en = 'Products and services'"));
	СписокПолей.Добавить("Характеристика",				НСтр("ru = 'Характеристика';
																|en = 'Characteristic'"));
	СписокПолей.Добавить("Назначение",					НСтр("ru = 'Назначение';
																|en = 'Assignment'"));
	
	ТекстШаблонОшибки =
		НСтр("ru = 'Обнаружены заказы на производство без спецификаций, по которым произведена часть продукции, а производство оставшейся части не запланировано. Организация ""%1"", период %2';
			|en = 'Production orders are found without bills of materials by which some products were manufactured and manufacturing of the rest of the products is not planned. Company %1, period %2'");
		
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"НезапланированнаяПродукцияБезСпецификаций",
		ТекстШаблонОшибки,
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#Область РаспределениеМатериаловИРаботНаСебестоимостьПродукции22

// Обработчики этапа.

Процедура Использование_РаспределениеМатериаловИРаботНаСебестоимостьПродукции22(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет производственных операций не ведется';
				|en = 'Production operation accounting is not kept'"));
			
		Возврат;
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется управление производством (версия 2.2)';
				|en = 'Production management, version 2.2 is not used'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = Документы.РаспределениеПроизводственныхЗатрат.ТекстЗапросаМатериаловИРаботВКладовых(Истина);
	
	// Доп. параметры запроса.
	Запрос.УстановитьПараметр("ВсеДвижения",             Истина);
	Запрос.УстановитьПараметр("НачалоПериода",  	     Запрос.Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода",  	     Запрос.Параметры.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаОкончаниеПериода", Запрос.Параметры.ГраницаКонецПериода);
	Запрос.УстановитьПараметр("ВсеОрганизации",	         Ложь);
	Запрос.УстановитьПараметр("Организации",       	     Запрос.Параметры.МассивОрганизаций);
	Запрос.УстановитьПараметр("ВсеПодразделения",  	     Истина);
	Запрос.УстановитьПараметр("Подразделения",     	     Новый Массив);
	Запрос.УстановитьПараметр("ВсеТипыНоменклатуры",     Истина);
	Запрос.УстановитьПараметр("ТипНоменклатуры",         Неопределено);
	Запрос.УстановитьПараметр("ВсеАналитики",	           Истина);
	Запрос.УстановитьПараметр("АналитикаУчетаНоменклатуры",Неопределено);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДД.Организация
	|ПОМЕСТИТЬ ДвиженияМатериаловВПроизводстве
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве КАК ДД
	|ГДЕ
	|	ДД.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДД.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ДД.Организация В (&МассивОрганизаций)
	|	И ДД.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Организация,
	|	МатериалыИРаботы.Подразделение,
	|	МатериалыИРаботы.Номенклатура,
	|	МатериалыИРаботы.Характеристика,
	|	МатериалыИРаботы.Серия,
	|	МатериалыИРаботы.Распределить КАК Количество
	|ПОМЕСТИТЬ ВТНераспределенныеМатериалыИРаботы
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.Распределить > 0
	|	И МатериалыИРаботы.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Организация,
	|	МатериалыИРаботы.Подразделение,
	|	МатериалыИРаботы.Номенклатура,
	|	МатериалыИРаботы.Характеристика,
	|	МатериалыИРаботы.Серия,
	|	МатериалыИРаботы.Распределить КАК Количество
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияМатериаловВПроизводстве КАК ДвиженияМатериаловВПроизводстве
	|	ПО МатериалыИРаботы.Организация = ДвиженияМатериаловВПроизводстве.Организация
	|ГДЕ
	|	МатериалыИРаботы.Распределить > 0
	|	И МатериалыИРаботы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ДвиженияМатериаловВПроизводстве.Организация ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МатериалыИРаботы.Организация
	|ПОМЕСТИТЬ ВТРаспределенныеМатериалыИРаботы
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.Распределено > 0";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТНераспределенныеМатериалыИРаботы = 0
	 И РазмерыВременныхТаблиц.ВТРаспределенныеМатериалыИРаботы = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет материалов и работ для распределения на этапы производства';
				|en = 'No materials and works to allocate to production stages'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_РаспределениеМатериаловИРаботНаСебестоимостьПродукции22(ПараметрыОбработчика) Экспорт
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ (НастройкиПроизводства.ИспользуетсяПроизводство21 И НастройкиПроизводства.ИспользуетсяПроизводство22) Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Распределение материалов и работ на себестоимость продукции';
															|en = 'Allocation of materials and works to product cost'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Распределить';
															|en = 'Allocate'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РаспределениеМатериаловИРаботНаСебестоимостьПродукции22(ТаблицаПроверок)
	
	// Распределение материалов и работ на себестоимость продукции (2.2).
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеРаспределеныМатериалыИРаботыНаСебестоимостьПродукции22",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеМатериаловИРаботНаСебестоимостьПродукции22,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиРаспределенияМатериаловИРаботНаСебестоимостьПродукции22");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не распределенные материалы (работы) на этапы производства';
			|en = 'Non-allocated materials (works) to production stages'"),
		НСтр("ru = 'Должно быть оформлено распределение всех материалов и работ на этапы производства документами ""Распределение материалов и работ"".';
			|en = 'Allocation of all materials and works to production stages should be registered with the ""Allocation of materials and works"" documents.'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиРаспределенияМатериаловИРаботНаСебестоимостьПродукции22(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 	НСтр("ru = 'Подразделение';
													|en = 'Department'"));
	СписокПолей.Добавить("Номенклатура", 	НСтр("ru = 'Номенклатура';
													|en = 'Products and services'"));
	СписокПолей.Добавить("Характеристика", 	НСтр("ru = 'Характеристика';
													|en = 'Characteristic'"));
	СписокПолей.Добавить("Серия", 			НСтр("ru = 'Серия';
													|en = 'Series'"));
	СписокПолей.Добавить("Количество",		НСтр("ru = 'Количество';
													|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНераспределенныеМатериалыИРаботы",
		НСтр("ru = 'Обнаружены не распределенные на этапы производства материалы (работы) организации ""%1"" на конец периода %2';
			|en = 'Materials (works) not allocated for production stages are detected for the ""%1"" company as of the end of %2 period'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции

// Обработчики этапа.

Процедура Использование_НастройкаПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения();
	
	ПараметрыЗакрытия = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	// Доп. параметры запроса.
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",	  Ложь);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Истина);
	Запрос.УстановитьПараметр("СписокПодразделений",  Новый Массив);
	Запрос.УстановитьПараметр("ФильтрПоСостоянию",    Перечисления.СостоянияРаспределенияРасходов.ПустаяСсылка());
	Запрос.УстановитьПараметр("НормируемыеРасходы",   Перечисления.ВидыРасходовНУ.НормируемыеРасходы());
	Запрос.УстановитьПараметр("ЗначениеПогрешностиУпр",  ПараметрыЗакрытия.ЗначениеПогрешностиРасходыУпр);
	Запрос.УстановитьПараметр("ЗначениеПогрешностиРегл",  ПараметрыЗакрытия.ЗначениеПогрешностиРасходыРегл);
	
	Запрос.Выполнить();	
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТДанныеДляРаспределения = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет данных для распределения расходов.';
				|en = 'No data for expense allocation.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Организация,
	|	Показатели.Ссылка КАК Показатель
	|ПОМЕСТИТЬ ВТНекорректныеПоказатели
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейДляРаспределенияРасходов КАК ЗначенияЕжемесячно
	|		ПО Показатели.Ссылка = ЗначенияЕжемесячно.Показатель
	|			И (НАЧАЛОПЕРИОДА(ЗначенияЕжемесячно.Период, МЕСЯЦ) = &НачалоПериода)
	|ГДЕ
	|	Показатели.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВводитсяЕжемесячно)
	|	И НЕ Показатели.ПометкаУдаления
	|	И ЗначенияЕжемесячно.Показатель ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	Показатели.Ссылка
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейДляРаспределенияРасходов.СрезПоследних(&КонецПериода, ) КАК ЗначенияПриИзменении
	|		ПО Показатели.Ссылка = ЗначенияПриИзменении.Показатель
	|ГДЕ
	|	Показатели.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВводитсяПриИзменении)
	|	И НЕ Показатели.ПометкаУдаления
	|	И ЗначенияПриИзменении.Показатель ЕСТЬ NULL 
	|";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТНекорректныеПоказатели", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Все показатели распределения расходов настроены корректно.';
				|en = 'All expense allocation indicators are configured correctly.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_НастройкаПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции(ТаблицаПроверок)
	
	// Настройка показателей для распределения расходов на себестоимость продукции.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненаНастройкаПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции",
		Перечисления.ОперацииЗакрытияМесяца.НастройкаПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиНастройкиПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не заданные значения показателей распределения расходов';
			|en = 'Values of expense allocation indicators that are not specified'"),
		НСтр("ru = 'Для показателей с базами распределения ""Вводится ежемесячно"" и ""Вводится при изменении"" должны быть заполнены значения в рассчитываемом периоде.';
			|en = 'Values in the calculated period should be calculated for indicators with the ""Entered monthly"" and ""Entered on change"" allocation bases.'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиНастройкиПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Показатель", 	НСтр("ru = 'Показатель';
												|en = 'Indicator'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНекорректныеПоказатели",
		НСтр("ru = 'Обнаружены показатели, значения которых не заданы в периоде %2';
			|en = 'Indicators detected whose values were not specified in %2 period'"),
		СписокПолей,
		"Показатель");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#Область ОформлениеПередачТоваров

// Обработчики этапа.

Процедура Использование_ОформлениеПередачТоваров(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации Тогда 
		Запрос.УстановитьПараметр("Получатель", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("Получатель", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ОформлятьПередачи", Истина);
	Запрос.Текст = ЗапасыСервер.ТекстЗапросаОформленияПоРезервамТоваровОрганизаций(Запрос, "ВТПоНоменклатуреВТКОформлениюПередач");
		
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТКОформлениюПередач", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков в регистре ""Резервы товаров организаций""';
				|en = 'No balance in the ""Company goods reserves"" register'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеПередачТоваров(ТаблицаПроверок)
	
	// Оформление передач товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненаПередачаТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачТоваров,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиОформленияПередачТоваров");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформленные передачи товаров между организациями';
			|en = 'Goods transfers between companies that are not registered'"),
		НСтр("ru = 'Должны быть оформлены документы ""Передача товаров между организациями"".';
			|en = 'The ""Goods transfer between companies"" documents should be registered.'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиОформленияПередачТоваров(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru = 'Аналитика номенклатуры';
															|en = 'Product dimension'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru = 'Вид запасов';
																|en = 'Inventory kind'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru = 'Номер ГТД';
															|en = 'CCD number'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru = 'Количество';
																|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТКОформлениюПередач",
		НСтр("ru = 'Требуется оформить передачу товаров в организацию ""%1"" на конец периода %2';
			|en = 'Register goods transfer to the ""%1"" company as of the %2 period end'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОстатковТоваровКПередаче

// Обработчики этапа.

Процедура Использование_ОформлениеОстатковТоваровКПередаче(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КПередаче.ОрганизацияВладелец КАК Организация,
	|	КПередаче.АналитикаУчетаНоменклатуры,
	|	КПередаче.ВидЗапасовПродавца КАК ВидЗапасов,
	|	КПередаче.НомерГТД,
	|	КПередаче.КоличествоКонечныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиКПередаче
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КПередаче
	|ГДЕ
	|	(КПередаче.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ КПередаче.ВидЗапасовПродавца.Организация В (&МассивОрганизаций))
	|	И КПередаче.КоличествоКонечныйОстаток <> 0
	|	И (КПередаче.КоличествоКонечныйОстаток - КПередаче.КоличествоНачальныйОстаток > 0
	|		ИЛИ КПередаче.КоличествоНачальныйОстаток = 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КПередаче.ОрганизацияВладелец КАК Организация,
	|	КПередаче.АналитикаУчетаНоменклатуры,
	|	КПередаче.ВидЗапасовПродавца КАК ВидЗапасов,
	|	КПередаче.НомерГТД,
	|	КПередаче.ВозвращеноКонечныйОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КПередаче
	|ГДЕ
	|	(КПередаче.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ КПередаче.ВидЗапасовПродавца.Организация В (&МассивОрганизаций))
	|	И КПередаче.ВозвращеноКонечныйОстаток <> 0
	|	И (КПередаче.ВозвращеноКонечныйОстаток - КПередаче.ВозвращеноНачальныйОстаток <> 0
	|		ИЛИ КПередаче.ВозвращеноНачальныйОстаток = 0)
	|";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ОстаткиКПередаче", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков в регистре ""Товары организаций к передаче""';
				|en = 'No balance in the ""Company goods for transfer"" register'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ОформлениеОстатковТоваровКПередаче(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = СтрЗаменить(ПараметрыОбработчика.ДанныеЭтапа.Наименование, "2.4", "11.4");
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеОстатковТоваровКПередаче(ТаблицаПроверок)
	
	// Оформление остатков передач товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленыОстаткиПередачТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковТоваровКПередаче,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковПередачТоваров");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформленные остатки передач товаров между организациями';
			|en = 'Non-registered transfers of stock balance between companies'"),
		НСтр("ru = 'Должны быть оформлены документы ""Передача товаров между организациями"".';
			|en = 'The ""Goods transfer between companies"" documents should be registered.'"));
		
КонецПроцедуры

Процедура ПроверкаОстатковПередачТоваров(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru = 'Аналитика номенклатуры';
															|en = 'Product dimension'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru = 'Вид запасов';
																|en = 'Inventory kind'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru = 'Номер ГТД';
															|en = 'CCD number'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru = 'Количество';
																|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОстаткиКПередаче",
		НСтр("ru = 'Обнаружены товары, требующие оформления передачи/возврата от организации ""%1"" на конец периода %2';
			|en = 'Goods that require transfer/return from the ""%1"" company to be registered are detected at the end of %2 period'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеВыкупаТоваров

// Обработчики этапа.

Процедура Использование_ОформлениеВыкупаТоваров(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации Тогда 
		Запрос.УстановитьПараметр("Получатель", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("Получатель", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ОформлятьВыкупы", Истина);
	Запрос.Текст = ЗапасыСервер.ТекстЗапросаОформленияПоРезервамТоваровОрганизаций(Запрос, "ВТПоНоменклатуреВТКОформлениюВыкупов");
		
	Запрос.Выполнить();
			
	Если РазмерВременнойТаблицы(Запрос, "ВТКОформлениюВыкупов", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков товаров к выкупу в регистре ""Резервы товаров организаций""';
				|en = 'No stock balance to redemption in the ""Company goods reserves"" register'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеВыкупаТоваров(ТаблицаПроверок)
	
	// Оформление выкупа товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленыВыкупыТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыкупаТоваров,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковТоваровКВыкупу");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформленные выкупы товаров, принятых на ответственное хранение';
			|en = 'Non-registered redemptions of goods received for safekeeping'"),
		НСтр("ru = 'Должны быть оформлены документы ""Выкуп товаров с хранения"".';
			|en = 'The ""Redemption of goods from storage"" documents should be registered.  '"));
		
КонецПроцедуры

Процедура ПроверкаОстатковТоваровКВыкупу(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru = 'Аналитика номенклатуры';
															|en = 'Product dimension'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru = 'Количество';
																|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТКОформлениюВыкупов",
		НСтр("ru = 'Обнаружены товары, требующие оформления выкупа по организации ""%1"" на конец периода %2';
			|en = 'Goods that require redemption registration are detected for the ""%1"" company at the end of %2 period'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОтчетовПоКомиссииМеждуОрганизациями

// Обработчики этапа.

Процедура Использование_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ключи.Организация КАК Комиссионер,
	|	ТоварыПереданные.ВидЗапасов.Организация КАК Комитент,
	|	Ключи.Номенклатура КАК Номенклатура,
	|	Ключи.Характеристика КАК Характеристика,
	|	Ключи.Назначение КАК Назначение,
	|	ТоварыПереданные.КоличествоКонечныйОстаток - ТоварыПереданные.КоличествоНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровПереданных
	|ИЗ
	|	РегистрНакопления.ТоварыПереданныеНаКомиссию.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК ТоварыПереданные
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = ТоварыПереданные.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ТоварыПереданные.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Организация)
	|	И (ТоварыПереданные.КоличествоКонечныйОстаток - ТоварыПереданные.КоличествоНачальныйОстаток <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключи.Организация,
	|	ТоварыПереданные.ВидЗапасов.Организация,
	|	Ключи.Номенклатура,
	|	Ключи.Характеристика,
	|	Ключи.Назначение
	|;
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ключи.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.ВидЗапасов.Организация КАК Комиссионер,
	|	КОформлению.ВидЗапасов.ВладелецТовара КАК Комитент,
	|	Ключи.Номенклатура КАК Номенклатура,
	|	Ключи.Характеристика КАК Характеристика,
	|	Ключи.Назначение КАК Назначение,
	|	КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток
	|		+ КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровКОформлениюВсе
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КОформлению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = КОформлению.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	КОформлению.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Организация)
	|	И ((КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток <> 0)
	|		ИЛИ (КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КОформлению.ВидЗапасов.Организация,
	|	КОформлению.ВидЗапасов.ВладелецТовара,
	|	Ключи.Номенклатура,
	|	Ключи.Характеристика,
	|	Ключи.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	ВЫБОР КОГДА КОформлению.Количество < ТоварыПереданные.Количество
	|		ТОГДА КОформлению.Количество
	|		ИНАЧЕ ТоварыПереданные.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровКОформлению
	|ИЗ
	|	ОстаткиТоваровКОформлениюВсе КАК КОформлению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТоваровПереданных КАК ТоварыПереданные
	|	ПО КОформлению.Комиссионер = ТоварыПереданные.Комиссионер
	|		И КОформлению.Комитент = ТоварыПереданные.Комитент
	|		И КОформлению.Номенклатура = ТоварыПереданные.Номенклатура
	|		И КОформлению.Характеристика = ТоварыПереданные.Характеристика
	|		И КОформлению.Назначение = ТоварыПереданные.Назначение
	|ГДЕ
	|	КОформлению.Количество <> 0
	|	И ТоварыПереданные.Количество <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	КОформлению.Количество КАК Количество
	|ПОМЕСТИТЬ ВТОстаткиКомитента
	|ИЗ
	|	ОстаткиТоваровКОформлению КАК КОформлению
	|ГДЕ
	|	КОформлению.Комитент В(&МассивОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	КОформлению.Количество КАК Количество
	|ПОМЕСТИТЬ ВТОстаткиКомиссионера
	|ИЗ
	|	ОстаткиТоваровКОформлению КАК КОформлению
	|ГДЕ
	|	КОформлению.Комиссионер В(&МассивОрганизаций)
	|";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТОстаткиКомитента = 0 И РазмерыВременныхТаблиц.ВТОстаткиКомиссионера = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков в регистре ""Товары к оформлению отчетов комитенту"" по схеме Интеркампани';
				|en = 'No balance in the ""Goods to be registered in reports to consignor"" register under Intercompany'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ТаблицаПроверок)
	
	// Оформление отчетов по комиссии между организациями.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненоОформлениеОтчетовПоКомиссииМеждуОрганизациями",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПоКомиссииМеждуОрганизациями,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОформленияОтчетовКомитентуМеждуОрганизациями");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформленные отчеты по комиссии между организациями';
			|en = 'Commission between companies reports that are not registered'"),
		НСтр("ru = 'Должны быть оформлены документы ""Отчет по комиссии между организациями"" и ""Отчет по комиссии между организациями о списании"".';
			|en = 'The ""Commission between companies report"" and ""Commission between companies on write-off report"" documents should be registered.'"));
		
КонецПроцедуры

Процедура ПроверкаОформленияОтчетовКомитентуМеждуОрганизациями(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комиссионер", 			   НСтр("ru = 'Организация-комиссионер';
															|en = 'Consignee company'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru = 'Аналитика номенклатуры';
															|en = 'Product dimension'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru = 'Вид запасов';
																|en = 'Inventory kind'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru = 'Номер ГТД';
															|en = 'CCD number'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru = 'Количество';
																|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиКомитента",
		НСтр("ru = 'Обнаружены товары, требующие оформления отчетов комитенту ""%1"" на конец периода %2';
			|en = 'Goods that require reports to the ""%1"" consignor were detected as of the end of %2 period'"),
		СписокПолей);
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комитент", 				   НСтр("ru = 'Организация-комитент';
															|en = 'Consignor company'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru = 'Аналитика номенклатуры';
															|en = 'Product dimension'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru = 'Вид запасов';
																|en = 'Inventory kind'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru = 'Номер ГТД';
															|en = 'CCD number'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru = 'Количество';
																|en = 'Quantity'"));
	
	ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТОстаткиКомиссионера",
		НСтр("ru = 'Обнаружены товары, требующие оформления отчетов комитенту от организации ""%1"" на конец периода %2';
			|en = 'Goods were detected that require reports to the consignor from the ""%1"" company as of the end of %2 period'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОтчетовКомитентамОСписании

// Обработчики этапа.

Процедура Использование_ОформлениеОтчетовКомитентамОСписании(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОформлению.ВидЗапасов.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры.МестоХранения КАК Комитент,
	|	КОформлению.АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД,
	|	КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ВТКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			НЕ АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Организация)
	|				И ВидЗапасов.Организация В (&МассивОрганизаций)) КАК КОформлению
	|ГДЕ
	|	КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТКОформлению", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков в регистре ""Товары к оформлению отчетов комитенту"" по сторонним комитентам';
				|en = 'No balance in the ""Goods to be registered in reports to consignor"" register for third-party consignors'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеОтчетовКомитентамОСписании(ТаблицаПроверок)
	
	// Оформление отчетов комитентам о списании.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненоОформлениеОтчетовКомитентуОСписании",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОформленияОтчетовКомитентуОСписании");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформленные отчеты комитентам о списании';
			|en = 'Non-registered write-off reports to consignors'"),
		НСтр("ru = 'Должны быть оформлены документы ""Отчет комитенту о списании"".';
			|en = 'The ""Write-off report to consignor"" documents should be registered.'"));
		
КонецПроцедуры

Процедура ПроверкаОформленияОтчетовКомитентуОСписании(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комитент", 				   НСтр("ru = 'Комитент';
															|en = 'Consignor'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru = 'Аналитика номенклатуры';
															|en = 'Product dimension'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru = 'Вид запасов';
																|en = 'Inventory kind'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru = 'Номер ГТД';
															|en = 'CCD number'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru = 'Количество';
																|en = 'Quantity'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТКОформлению",
		НСтр("ru = 'Обнаружены товары, требующие оформления отчетов комитенту о списании от организации ""%1"" на конец периода %2';
			|en = 'Goods were detected that require write-off reports to consignor from the ""%1"" company as of the end of %2 period'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеСчетовФактурИТаможенныхДокументов

// Обработчики этапа.

Процедура Использование_ОформлениеСчетовФактурИТаможенныхДокументов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ОрганизацииКОбработке = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыРасчета.МассивОрганизаций);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ОрганизацииКОбработке,
		Справочники.Организации.УправленческаяОрганизация);
	
	Если ОрганизацииКОбработке.Количество() = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Для управленческой организации данные документы не оформляются.';
				|en = 'These documents are not registered for management company.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыУчетаНДС = Новый Структура;
	ПараметрыУчетаНДС.Вставить("НачалоПериода", 	НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
	ПараметрыУчетаНДС.Вставить("КонецПериода",  	КонецМесяца(ПараметрыРасчета.ПериодРегистрации));
	ПараметрыУчетаНДС.Вставить("МассивОрганизаций", ОрганизацииКОбработке);
	
	Результат = Обработки.ПомощникПоУчетуНДС.ОперацииПоНДСКВыполнению(ПараметрыУчетаНДС);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика,
		Результат.НевыполненныеОперации + Результат.ОбязательныеНевыполненныеОперации);
	
	Если НЕ Результат.ЕстьОбязательныеОперацииКВыполнению Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет неоформленных документов.';
				|en = 'No unregistered documents.'"));
		
	Иначе
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Требуется оформление документов по учету НДС (%1 шт.)';
				|en = 'Register VAT accounting documents (%1 pcs)'"),
			Результат.ОбязательныеНевыполненныеОперации);
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстПояснения,
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ПеречислениеНДСВБюджет

// Обработчики этапа.

Процедура Использование_ПеречислениеНДСВБюджет(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ПараметрыУчетаНДС = Новый Структура;
	ПараметрыУчетаНДС.Вставить("НачалоПериода", НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
	ПараметрыУчетаНДС.Вставить("КонецПериода",  КонецМесяца(ПараметрыРасчета.ПериодРегистрации));
	ПараметрыУчетаНДС.Вставить("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	
	КоличествоДокументовКОплате = Обработки.ПеречислениеНДСВБюджетПоОтдельнымОперациям.ПолучитьКоличествоДокументовКОплате(ПараметрыУчетаНДС);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДокументовКОплате);
	
	Если НЕ КоличествоДокументовКОплате Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет неоформленных документов.';
				|en = 'No unregistered documents.'"));
		
	Иначе
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Требуется оплата НДС в бюджет по счетам-фактурам налогового агента (%1 шт.)';
				|en = 'VAT payment to budget by tax invoices of the tax agent is required (%1 pcs.)'"),
			КоличествоДокументовКОплате);
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстПояснения,
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#Область НачисленияПоКредитамДепозитамИВыданнымЗаймам

// Обработчики этапа.

Процедура Использование_НачисленияПоКредитамДепозитамИВыданнымЗаймам(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Договоры кредитов и депозитов не используются.';
				|en = 'Credit and deposit contracts are not used.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика 
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Договор.Организация КАК Организация,
	|	Договор.Ссылка КАК Договор,
	|	График.Проценты КАК ПроцентНачисленияПлан,
	|	График.Комиссия КАК КомиссияНачисленияПлан,
	|	0 КАК ПроцентНачисленияФакт,
	|	0 КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФактРазвернуто
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.ВариантГрафика.Используется
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Организация,
	|	Расчеты.Договор КАК Договор,
	|	0 КАК ПроцентНачисленияПлан,
	|	0 КАК КомиссияНачисленияПлан,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА Расчеты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентНачисленияФакт,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|		ТОГДА Расчеты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КомиссияНачисленияФакт
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|	ПО Расчеты.Договор = Договоры.Ссылка
	|		И Договоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И Расчеты.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыГрафиковФинансовыхИнструментов.Начисления)
	|		И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договоры.Организация В (&МассивОрганизаций)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Организация КАК Организация,
	|	втПланФакт.Договор КАК Договор,
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) КАК ПроцентНачисленияПлан,
	|	СУММА(втПланФакт.КомиссияНачисленияПлан) КАК КомиссияНачисленияПлан,
	|	СУММА(втПланФакт.ПроцентНачисленияФакт) КАК ПроцентНачисленияФакт,
	|	СУММА(втПланФакт.КомиссияНачисленияФакт) КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ Отклонения
	|ИЗ
	|	втПланФактРазвернуто КАК втПланФакт
	|СГРУППИРОВАТЬ ПО
	|	втПланФакт.Организация,
	|	втПланФакт.Договор
	|ИМЕЮЩИЕ
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) - СУММА(втПланФакт.ПроцентНачисленияФакт) > 0
	|		ИЛИ СУММА(втПланФакт.КомиссияНачисленияПлан) - СУММА(втПланФакт.КомиссияНачисленияФакт) > 0";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.Графики = 0 Тогда
			
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет графиков начислений и оплат по договорам кредитов и депозитов.';
				|en = 'No schedules of accruals and payments under credit and deposit contracts.'"));
		
	Иначе
		
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 есть отклонения в плановых и фактических начислениях по договорам кредитов и депозитов.';
				|en = 'There are variances in the planned and actual accruals under credit and deposit contracts of the ""%1"" company for period %2.'"),
			Запрос,
			"Отклонения",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Группа_Взаиморасчеты

#Область ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов

// Обработчики этапа.

Процедура Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность";
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьДвиженияПоРасчетам = НЕ Запрос.Выполнить().Пустой();
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
		
		НачалоРасчета = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);
		ПериодВДиапазонеПересчета = (ЗначениеЗаполнено(НачалоРасчета) И НачалоРасчета <= ПараметрыРасчета.ПериодРегистрации);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ЗаданияКЗакрытиюМесяца.Месяц) КАК Месяц
		|ИЗ
		|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
		|ГДЕ
		|	ЗаданияКЗакрытиюМесяца.Организация В(&МассивОрганизаций)
		|	И ЗаданияКЗакрытиюМесяца.Операция = &Операция";
		Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
		Запрос.УстановитьПараметр("Операция", Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НачалоРасчета = Выборка.Месяц;
		Иначе
			НачалоРасчета = ПараметрыРасчета.Период;
		КонецЕсли;
		ПериодВДиапазонеПересчета = ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина);
		ПараметрыОбработчика.ТаблицаПояснения.Очистить();
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками);
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами, РегистрыДляРасчета);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьВалютныеОстатки = Документы.РасчетКурсовыхРазниц.ЕстьВалютныеОстатки(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценкаВзаиморасчетов(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.ПериодРегистрации);
		
	Если НЕ ТребуетсяПереоценка И НЕ ПериодВДиапазонеПересчета Тогда
		
		Если НЕ ЕстьДвиженияПоРасчетам Тогда
			
			// Расчет не требуется.
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Нет движений по регистрам расчетов с клиентами и поставщиками.';
					|en = 'No records in registers of settlements with customers and suppliers.'"));
			
			Если НЕ ЕстьВалютныеОстатки Тогда
				УстановитьСостояниеНеТребуется(
					ПараметрыОбработчика,
					НСтр("ru = 'Нет валютных остатков по регистрам расчетов с клиентами и поставщиками.';
						|en = 'No currency balance in registers of payments to customers and suppliers.'"));
			КонецЕсли;
			
		Иначе
			// Расчет выполнен успешно.
		КонецЕсли;
		
	Иначе
		
		// Требуется перерасчет.
		Если ПериодВДиапазонеПересчета Тогда
			
			ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = НачалоМесяца(НачалоРасчета);
			
			ТекстОперации = НСтр("ru = 'Требуется формирование движений начиная с периода %1';
								|en = 'Movement generation is required starting from the period of %1'");
			
			УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОперации,
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(НачалоРасчета)));
			
		КонецЕсли;
		
		Если ТребуетсяПереоценка Тогда
			
			ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
				Метаданные.Отчеты.СправкаРасчетПереоценкиВалютныхСредств.ПолноеИмя() + ".Форма", Истина);
			ДействиеПодробнее.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ДействиеПодробнее.ПараметрыФормы.Вставить("ВсеОрганизации", НЕ ЗначениеЗаполнено(ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций));
			
			УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				НСтр("ru = 'Обнаружены курсовые разницы по регистрам расчетов с клиентами и поставщиками.';
					|en = 'Exchange rate differences are detected for registers of settlements with customers and suppliers.'"),
				ТекстПодробнееПоУмолчанию(),
				ДействиеПодробнее);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Актуализация движений документов по данным взаиморасчетов';
															|en = 'Update document register records according to data of mutual settlements'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Актуализировать';
																|en = 'Update'");
	Иначе
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Формирование движений по данным взаиморасчетов';
															|en = 'Generate register records according to data of mutual settlements'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Сформировать';
																|en = 'Run report'");
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
		
		РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе(ПараметрыРасчета.КонецПериода, АналитикиРасчета);
		
		//Переоценка на конец месяца или по дням если не было взаиморасчетов
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	Иначе
		
		ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
		НачалоРасчета = НачалоРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ПараметрыРасчета.КонецПериода,
			,
			ПараметрыРасчета.МассивОрганизаций);
			
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЗакрытиеМесяца.%1",
				СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
		ОписаниеЗамера 		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных	= 0;
		
		Пока НачалоРасчета <= ПараметрыОбработчика.ПараметрыРасчета.КонецПериода Цикл
		
			НомерЗадания 	 	= УвеличитьНомерЗадания();
			ОкончаниеПериода 	= КонецМесяца(НачалоРасчета);
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ДанныеКРасчетуЗаМесяц = ЗаданияКРасчетуЗаМесяц(
					НачалоРасчета,
					ОкончаниеПериода,
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
						|%2';
						|en = 'An error occurred when calculating for the %1 period: 
						|%2'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
			Для Каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				
				БылиОшибки = Ложь;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РасчетыСКлиентами.Регистратор КАК ДокументРегистратор
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
				|ГДЕ 
				|	РасчетыСКлиентами.Период <= &КонецПериода И РасчетыСКлиентами.Период >= &НачалоПериода
				|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация = &Организация
				|	И РасчетыСКлиентами.Сумма <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РасчетыСПоставщиками.Регистратор КАК ДокументРегистратор
				|ИЗ
				|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
				|ГДЕ 
				|	РасчетыСПоставщиками.Период <= &КонецПериода И РасчетыСПоставщиками.Период >= &НачалоПериода
				|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = &Организация
				|	И РасчетыСПоставщиками.Сумма <> 0";
				Запрос.УстановитьПараметр("КонецПериода",ОкончаниеПериода);
				Запрос.УстановитьПараметр("НачалоПериода",НачалоРасчета);
				Запрос.УстановитьПараметр("Организация",Организация);
				МассивВсехДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументРегистратор");
				РегистрыСведений.СуммыДокументовВВалютеРегл.РассчитатьСуммыДокументовВВалютеРегл(МассивВсехДокументов);
				
				КоличествоДанных = КоличествоДанных + МассивВсехДокументов.Количество();
				
				Запрос = Новый Запрос;
				Запрос.Текст = РегистрыСведений.СуммыДокументовВВалютеРегл.ТекстЗапросаДокументовДляПересчета();
				Запрос.УстановитьПараметр("МассивДокументов", МассивВсехДокументов);
				Запрос.УстановитьПараметр("ЭтоПроверка", Истина);
				Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
				Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
				Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Истина);
				Запрос.УстановитьПараметр("ПоВсемДокументам", Ложь);
				
				ТаблицаНерассчитанныхДокументов = Запрос.Выполнить().Выгрузить();
				
				//Попытка перепровести документы
				Для Каждого СтрокаДокумента Из ТаблицаНерассчитанныхДокументов Цикл
					Попытка
						Если НЕ ЗначениеЗаполнено(СтрокаДокумента.РасчетныйДокумент) Тогда
							Продолжить;
						КонецЕсли;
						ДокументОбъект = СтрокаДокумента.РасчетныйДокумент.ПолучитьОбъект();
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При формировании движений по данным взаиморасчетов за период %1 
								|при попытке перепроведения документа %2 произошла ошибка:
								|%3';
								|en = 'When generating the movements by data of mutual settlements for the period %1 
								|when attempting to repost the %2 document, an error occurred:
								|%3'"),
							ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
							СтрокаДокумента.РасчетныйДокумент,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Попытка перепроведения документов';
								|en = 'Attempt to repost documents'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка,
							Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
							,
							ТекстОшибки);
					КонецПопытки;
				КонецЦикла;
				
				Если ТаблицаНерассчитанныхДокументов.Количество() > 0 Тогда
					
					Шаблон = НСтр("ru = 'Не удалось выполнить распределение суммы взаиморасчетов на строки документа %1.
						|Итоги движений документа по регистрам взаиморасчетов отличается от движений по регистру сумм документа в валютах учёта.
						|Попробуйте перепровести документ вручную.';
						|en = 'Cannot allocate mutual settlements amount to the %1 document lines.
						|Totals of document movements by mutual settlements registers differs from movements by register of document amounts in accounting currencies.
						|Try to repost the document manually.'");
					
					ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
						ПараметрыОбработчика.ДанныеЭтапа.Код,
						Организация,
						ПараметрыРасчета.ПериодРегистрации);
					
					Для Каждого СтрокаДокумента Из ТаблицаНерассчитанныхДокументов Цикл
						
						ГруппаПроблем = НСтр("ru = 'При выполнении операции были диагностированы ошибки';
											|en = 'Errors were found when executing the operation'");
						
						ПолныйТекстПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаДокумента.РасчетныйДокумент);
						
						ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
							ПараметрыРегистрации,
							ГруппаПроблем,
							Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка,
							ПолныйТекстПроблемы,
							СтрокаДокумента.РасчетныйДокумент);
					КонецЦикла;
					
					БылиОшибки = Истина;
				КонецЕсли;
				
				//Обновление движений по оборотным регистрам платежных документов и взаимозачетов задолженности.
				РегистрыСведений.СуммыДокументовВВалютеРегл.ОбновитьДвиженияПоОборотнымРегистрамНепересчитываемыхДокументов(МассивВсехДокументов);
				
				Если БылиОшибки Тогда
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьРасчет(
					Неопределено,
					НомерЗадания,
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ДанныеКРасчетуЗаМесяц);
				
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
					ДанныеКРасчетуЗаМесяц.ВременныеТаблицы,
					ОкончаниеПериода + 1);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
						|%2';
						|en = 'An error occurred when calculating for the %1 period: 
						|%2'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
			НачалоРасчета = ОкончаниеПериода + 1;
			
		КонецЦикла;
		
		Для Каждого Организация Из ПараметрыРасчета.МассивОрганизаций Цикл
			
			//Переоценка на конец месяца или по дням если не было взаиморасчетов
			Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
				Организация,
				ПараметрыРасчета.КонецПериода);
			Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
				Организация,
				ПараметрыРасчета.КонецПериода);
			
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереоценкаДенежныхСредствИФинансовыхИнструментов

// Обработчики этапа.

Процедура Использование_ПереоценкаДенежныхСредствИФинансовыхИнструментов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Мультивалютный учет не ведется';
				|en = 'Multicurrency accounting is not kept'"));
			
		Возврат;
		
	КонецЕсли;
	
	ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Отчеты.СправкаРасчетПереоценкиВалютныхСредств.ПолноеИмя() + ".Форма", Истина);
	ДействиеПодробнее.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ДействиеПодробнее.ПараметрыФормы.Вставить("ВсеОрганизации", ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации);
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,,,ДействиеПодробнее) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(
			Перечисления.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов,
			РегистрыДляРасчета);
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценка(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьВалютныеОстатки = Документы.РасчетКурсовыхРазниц.ЕстьВалютныеОстатки(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
		
	Если ТребуетсяПереоценка Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Обнаружены курсовые разницы по регистрам учета денежных средств.';
				|en = 'Exchange rate differences are detected in cash management registers.'"),
			ТекстПодробнееПоУмолчанию(),
			ДействиеПодробнее);
		
	ИначеЕсли НЕ ЕстьВалютныеОстатки Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет валютных остатков по регистрам учета денежных средств.';
				|en = 'No currency balance in cash management registers.'"));
		
	КонецЕсли;
	
	УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, "ТребуетсяПереоценка", ТребуетсяПереоценка);
	
КонецПроцедуры

Процедура Оформление_ПереоценкаДенежныхСредствИФинансовыхИнструментов(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Переоценка денежных средств';
															|en = 'Cash revaluation'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Выполнить';
															|en = 'Perform'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура Выполнить_ПереоценкаДенежныхСредствИФинансовыхИнструментов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
		Неопределено,
		ПараметрыРасчета.МассивОрганизаций);
	
	ПервыйПроход  = Истина;
	
	ТребуетсяПереоценка = ПолучитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, "ТребуетсяПереоценка", Ложь);
	ЕстьЗаданиеКРасчету = (НачалоРасчета <= ПараметрыРасчета.КонецПериода);
	
	Если ТребуетсяПереоценка И НЕ ЕстьЗаданиеКРасчету Тогда
		НачалоРасчета = ПараметрыРасчета.КонецПериода; // пересчитать только указанный месяц
	КонецЕсли;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода ИЛИ ТребуетсяПереоценка Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		Если ЕстьЗаданиеКРасчету Тогда
			
			Если ПервыйПроход Тогда
				НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
			КонецЕсли;
		
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ДанныеКПереоценкеЗаМесяц = ЗаданияКРасчетуЗаМесяц(
					НачалоРасчета,
					ОкончаниеПериода,
					НомерЗаданияДоРасчета,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
						|%2';
						|en = 'An error occurred when calculating for the %1 period: 
						|%2'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
		Иначе
			
			ДанныеКПереоценкеЗаМесяц = Новый Структура("Организация", ПараметрыРасчета.МассивОрганизаций);
			
		КонецЕсли;
		
		Попытка
			РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
			ОрганизацииКПереоценке = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценка(
										ПараметрыРасчета.МассивОрганизаций, ОкончаниеПериода, РегистрыДляРасчета,,Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОрганизацииКПереоценке, ДанныеКПереоценкеЗаМесяц.Организация, Истина);
			
			Документы.РасчетКурсовыхРазниц.ПереоценитьДенежныеСредства(
				ОрганизацииКПереоценке,
				НачалоРасчета);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Переоценка денежных средств за период %1 завершилась с ошибкой:
					|%2';
					|en = 'Cash revaluation for period %1 is completed with error:
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДанныеКПереоценкеЗаМесяц.Организация,
				НачалоРасчета);
			
		КонецПопытки;
		
		Попытка
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
				Документы.РасчетКурсовыхРазниц.ПереоценитьКредитыДепозитыЗаймы(
					ДанныеКПереоценкеЗаМесяц.Организация,
					НачалоРасчета);
			КонецЕсли;
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Переоценка кредитов, депозитов, займов за период %1 завершилась с ошибкой:
					|%2';
					|en = 'Revaluation of credits, deposits, loans for period %1 is completed with error:
					|%2 '"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДанныеКПереоценкеЗаМесяц.Организация,
				НачалоРасчета);
			
		КонецПопытки;
		
		СледующийМесяц = СледующийМесяцКРасчетуДенежныхСредств(НачалоРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		Если ЕстьЗаданиеКРасчету И ПараметрыОбработчика.ТаблицаПояснения.Количество() = 0 Тогда
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(
					НомерЗаданияДоРасчета,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьРасчет(
					СледующийМесяц,
					НомерЗаданияДоРасчета,
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ДанныеКПереоценкеЗаМесяц);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
						|%2';
						|en = 'An error occurred when calculating for the %1 period: 
						|%2'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЕстьЗаданиеКРасчету И ЗначениеЗаполнено(СледующийМесяц) Тогда
			НачалоРасчета = СледующийМесяц;
		Иначе
			Если ЕстьЗаданиеКРасчету Тогда
				НачалоРасчета = КонецМесяца(НачалоРасчета) + 1; // следующий месяц
			Иначе
				НачалоРасчета = ПараметрыРасчета.КонецПериода + 1; // выход из цикла
			КонецЕсли;
		КонецЕсли;
		
		ТребуетсяПереоценка = Ложь;
		ПервыйПроход = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательные методы этапа.

Функция СледующийМесяцКРасчетуДенежныхСредств(ПериодРасчета, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	МИНИМУМ(ДенежныеСредства.Месяц) КАК МесяцКРасчету
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|
	|	) КАК ДенежныеСредства
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(ДенежныеСредства.Месяц) ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ВалютаРегл", 	   			Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ОбработанныйМесяц", 			КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("СледующийМесяц", 			КонецМесяца(ПериодРасчета) + 1);
	Запрос.УстановитьПараметр("НаКонецРассчитанногоМесяца", Новый Граница(КонецМесяца(ПериодРасчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", 			МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.МесяцКРасчету, Дата(1, 1, 1));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Группа_ФормированиеЗатрат

//++ НЕ УТ
#Область ВыработкаСотрудников

// Обработчики этапа.

Процедура Использование_ВыработкаСотрудников(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Производственный учет не ведется.';
				|en = 'Production accounting is not kept.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	// Выбираем распоряжения, по которым были движения в текущем месяце
	//  - если таблица пустая, значит оформление не требуется.
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Организация КАК Организация,
	|	ДД.Распоряжение КАК Распоряжение,
	|	ДД.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Организация В (&МассивОрганизаций)) КАК ДД
	|
	|СГРУППИРОВАТЬ ПО
	|	ДД.Организация,
	|	ДД.Распоряжение,
	|	ДД.КодСтрокиРаспоряжения
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ДД.КоличествоПриход) <> 0
	|		ИЛИ СУММА(ДД.КоличествоРасход) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// выбираем остатки по распоряжениям текущего месяца без учета периода
	//  - если остатки есть, значит требуется оформить выработку.
	|ВЫБРАТЬ
	|	Остатки.Организация КАК Организация,
	|	Остатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОрганизацииСОстаткамиКОформлению
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И (Распоряжение, КодСтрокиРаспоряжения) В
	|					(ВЫБРАТЬ
	|						Т.Распоряжение,
	|						Т.КодСтрокиРаспоряжения
	|					ИЗ
	|						Обороты КАК Т)) КАК Остатки
	|";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.Обороты = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'За указанный период работы сотрудниками не выполнялись, оформление выработки не требуется.';
				|en = 'Works were not performed by employees for the specified period; output registration is not required.'"));
		
	ИначеЕсли РазмерыВременныхТаблиц.ОрганизацииСОстаткамиКОформлению = 0 Тогда
		
		// Вся выработка оформлена.
		Возврат;
		
	Иначе
		
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 выработка оформлена не по всем сотрудникам.';
				|en = 'Output is not registered by all employees for the ""%1"" company for period %2.'"),
			Запрос,
			"ОрганизацииСОстаткамиКОформлению",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ВыработкаСотрудников(ПараметрыОбработчика) Экспорт
	
	Документы.ВыработкаСотрудников.ОформитьПриЗакрытииМесяца(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область НачислениеОценочныхОбязательствРезервовПоОтпускам

// Обработчики этапа.

Процедура Использование_НачислениеОценочныхОбязательствРезервовПоОтпускам(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет зарплаты не ведется.';
				|en = 'Payroll accounting is not kept.'"));
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетРезервовОтпусков") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет резервов отпусков не ведется.';
				|en = 'Leave reserve accounting is not kept.'"));
	КонецЕсли;
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Организация КАК Организация
	|ПОМЕСТИТЬ ОрганизацииСФормированиемРезервов
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних(&НачалоПериода, Организация В (&МассивОрганизаций)) КАК Настройки
	|ГДЕ
	|	Настройки.ФормироватьРезервОтпусковБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Организация
	|ПОМЕСТИТЬ ОрганизацииСОборотами
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
	|			&НачалоПериода,
	|			&ГраницаКонецПериода,
	|			,
	|			Организация В
	|				(ВЫБРАТЬ
	|					Т.Организация
	|				ИЗ
	|					ОрганизацииСФормированиемРезервов КАК Т)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация
	|ПОМЕСТИТЬ ОрганизацииБезРегламентныхДокументов
	|ИЗ
	|	ОрганизацииСОборотами КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеОценочныхОбязательствПоОтпускам КАК РегламентныйДокумент
	|		ПО (РегламентныйДокумент.Организация = Организации.Организация)
	|			И (РегламентныйДокумент.ПериодРегистрации = &НачалоПериода)
	|			И (РегламентныйДокумент.Проведен)
	|ГДЕ
	|	РегламентныйДокумент.Ссылка ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОрганизацииСФормированиемРезервов = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет организаций, для которых должно выполняться формирование резервов отпусков.';
				|en = 'No companies for which leave reserves must be generated.'"));
		
	ИначеЕсли РазмерыВременныхТаблиц.ОрганизацииСОборотами = 0 Тогда
			
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'По организациям, для которых должно выполняться формирование резервов отпусков, нет оборотов по регистру накопления ""Начисления удержания по сотрудникам"".';
				|en = 'No turnovers of the ""Employee earnings and deductions"" accumulation register for companies for which leave reserves must be generated.'"));
		
	Иначе
		
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 не сформирован регламентный документ ""Начисление оценочных обязательств по отпускам"".';
				|en = 'The ""Accrual of estimated liabilities for leaves"" period-end operation was not created for the ""%1"" company for the period %2.'"),
			Запрос,
			"ОрганизацииБезРегламентныхДокументов",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_НачислениеОценочныхОбязательствРезервовПоОтпускам(ПараметрыОбработчика) Экспорт
	
	ОтражениеЗарплатыВФинансовомУчетеУП.НачислениеООПриЗакрытииМесяца(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеЗарплатыВФинансовомУчете

// Обработчики этапа.

Процедура Использование_ОтражениеЗарплатыВФинансовомУчете(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет зарплаты не ведется.';
				|en = 'Payroll accounting is not kept.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Организация
	|ПОМЕСТИТЬ ОрганизацииСОборотами
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(&НачалоПериода, &ГраницаКонецПериода, , Организация В (&МассивОрганизаций)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация
	|ПОМЕСТИТЬ ОрганизацииБезРегламентныхДокументов
	|ИЗ
	|	ОрганизацииСОборотами КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеЗарплатыВФинансовомУчете КАК РегламентныйДокумент
	|		ПО (РегламентныйДокумент.Организация = Организации.Организация)
	|			И (РегламентныйДокумент.ПериодРегистрации = &НачалоПериода)
	|			И (РегламентныйДокумент.Проведен)
	|ГДЕ
	|	РегламентныйДокумент.Ссылка ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОрганизацииСОборотами = 0 Тогда
			
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет оборотов по регистру накопления ""Начисления удержания по сотрудникам"".';
				|en = 'No turnovers for the ""Employee earnings and deductions"" accumulation register.'"));
		
	Иначе
		
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 не сформирован регламентный документ ""Отражение зарплаты в финансовом учете"".';
				|en = 'The ""Recording of salary in financial accounting"" period-end operation was not generated for the ""%1"" company for period %2.'"),
			Запрос,
			"ОрганизацииБезРегламентныхДокументов",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ОтражениеЗарплатыВФинансовомУчете(ПараметрыОбработчика) Экспорт
	
	Документы.ОтражениеЗарплатыВФинансовомУчете.ОтражениеЗарплатыПриЗакрытииМесяца(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#Область АннулированиеПодарочныхСертификатов

// Обработчики этапа.

Процедура Использование_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Подарочные сертификаты не используются.';
				|en = 'Gift certificates are not used.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = Документы.АннулированиеПодарочныхСертификатов.ТекстЗапросаСертификатыКАннулированию() + Символы.ПС + ";" + Символы.ПС + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аннулирование.Организация КАК Организация
	|ПОМЕСТИТЬ АннулированныеСертификаты
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК Аннулирование
	|ГДЕ
	|	Аннулирование.Организация В(&МассивОрганизаций)
	|	И Аннулирование.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аннулирование.Проведен";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.СертификатыКАннулированию > 0 Тогда
			
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 есть сертификаты, которые необходимо аннулировать.';
				|en = 'There are certificates which should be canceled for the ""%1"" company for period %2.'"),
			Запрос,
			"СертификатыКАннулированию",
			Ложь,
			Истина);
		
	ИначеЕсли РазмерыВременныхТаблиц.АннулированныеСертификаты = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет сертификатов, которые необходимо аннулировать.';
				|en = 'No certificates to cancel.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	Документы.АннулированиеПодарочныхСертификатов.АннулироватьПодарочныеСертификатыПриЗакрытииМесяца(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область НачислениеАмортизацииОС

// Обработчики этапа.

Процедура Использование_НачислениеАмортизацииОС(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of capital assets disabled.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,, "ЗаданияКРасчетуАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода) Тогда
		ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
			ПараметрыОбработчика,
			Метаданные.Документы.АмортизацияОС2_4.Имя);
	Иначе	
		ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
			ПараметрыОбработчика,
			Метаданные.Документы.АмортизацияОС.Имя);
	КонецЕсли; 
	
КонецПроцедуры

Процедура Выполнить_НачислениеАмортизацииОС(ПараметрыОбработчика) Экспорт
	
	Если ВнеоборотныеАктивы.НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивы.ВыполнитьОперациюЗакрытияМесяцаРасчетАмортизацииОС(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область НачислениеАмортизацииНМА

// Обработчики этапа.

Процедура Использование_НачислениеАмортизацииНМА(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of capital assets disabled.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,, "ЗаданияКРасчетуАмортизацииНМА") Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода) Тогда
		ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
			ПараметрыОбработчика,
			Метаданные.Документы.АмортизацияНМА2_4.Имя);
	Иначе	
		ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
			ПараметрыОбработчика,
			Метаданные.Документы.АмортизацияНМА.Имя);
	КонецЕсли; 
	
КонецПроцедуры

Процедура Выполнить_НачислениеАмортизацииНМА(ПараметрыОбработчика) Экспорт
	
	Если ВнеоборотныеАктивы.НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивы.ВыполнитьОперациюЗакрытияМесяцаРасчетАмортизацииНМА(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаУчетВнеоборотныхАктивовВерсии24

Процедура Использование_ПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	ПериодРегистрации = ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации;
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПериодРегистрации) Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных версии 2.4 не используется.';
				|en = 'Capital asset accounting 2.4 is not used.'"));
		
		Возврат;
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных версии 2.2 не используется, переход не требуется.';
				|en = 'Capital asset accounting 2.2 is not used. Migration is not required.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ПереносДанныхЗавершен = Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.ПереносДанныхЗавершен();
	ЕстьУчетВнеоборотныхАктивов2_4 = ВнеоборотныеАктивыСлужебный.ЕстьУчетВнеоборотныхАктивов2_4();
	
	СведенияОПроблемах = Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.СведенияЗарегистрированныхПроблемах(
							ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
							
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если ПереносДанныхЗавершен = Неопределено
		И ЕстьУчетВнеоборотныхАктивов2_4
		И НЕ Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.ДанныеПроверены() Тогда
		
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			НСтр("ru = 'Переход выполнен без использования помощника';
				|en = 'Migrated without using wizard'"),,, 
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
		
		// Есть документы, но нет сведений о работе помощника.
		ТекстСостояния = НСтр("ru = 'Необходимо выполнить проверку';
								|en = 'Check is required'");
		
		Если ЭтоПолноправныйПользователь Тогда
			ТекстПодробнее = НСтр("ru = 'Проверить';
									|en = 'Verify'");
			ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
				Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.Форма.ПолноеИмя());
				
			ДействиеПодробнее.ПараметрыФормы.Вставить("РежимПереносаДанных", "Проверить");
			ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		Иначе
			ТекстПодробнее = "";
			ДействиеПодробнее = Неопределено;
		КонецЕсли;
			
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстСостояния,
			ТекстПодробнее,		
			ДействиеПодробнее);
			
	ИначеЕсли ПереносДанныхЗавершен = Неопределено
		И НЕ ЕстьУчетВнеоборотныхАктивов2_4 Тогда
			
		// Нет документов и нет сведений о работе помощника.
		ТекстСостояния = НСтр("ru = 'Переход не завершен, необходимо воспользоваться помощником перехода';
								|en = 'Migration is not completed. Use the migration wizard'");
		
		Если ЭтоПолноправныйПользователь Тогда
			ТекстПодробнее = НСтр("ru = 'Открыть';
									|en = 'Open'");
			ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
				Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.Форма.ПолноеИмя());
		Иначе
			ТекстПодробнее = "";
			ДействиеПодробнее = Неопределено;
		КонецЕсли;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстСостояния,
			ТекстПодробнее,		
			ДействиеПодробнее);
		
	ИначеЕсли ПереносДанныхЗавершен = Ложь Тогда
		
		// Помощник использовался, но перенос данных не завершен.
		ТекстСостояния = НСтр("ru = 'Переход не завершен, необходимо воспользоваться помощником перехода';
								|en = 'Migration is not completed. Use the migration wizard'");
			
		Если ЭтоПолноправныйПользователь Тогда
			ТекстПодробнее = НСтр("ru = 'Открыть';
									|en = 'Open'");
			ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
				Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.Форма.ПолноеИмя());
		Иначе
			ТекстПодробнее = "";
			ДействиеПодробнее = Неопределено;
		КонецЕсли;
			
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстСостояния,
			ТекстПодробнее,		
			ДействиеПодробнее);
		
	ИначеЕсли СведенияОПроблемах.КоличествоПроблем = 0
		И СведенияОПроблемах.КоличествоПредупреждений = 0
		И СведенияОПроблемах.КоличествоРешенныхПроблем = 0 Тогда
		
		// Перенос данных успешно завершен
		
		Если ПериодРегистрации = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4() Тогда
			
			ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
			
			ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
				Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.Форма.ПолноеИмя());
				
			ДействиеПодробнее.ПараметрыФормы.Вставить("РежимПереносаДанных", "Проверить");
			ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
				
			ДобавитьПоясняющуюИнформациюКЭтапу(
				ПараметрыОбработчика,
				НСтр("ru = 'Переход успешно завершен, если исходные данные были изменены, то рекомендуется выполнить проверку';
					|en = 'Migration completed successfully. If source data was changed, it is recommended that you check it'"),
				НСтр("ru = 'Проверить';
					|en = 'Verify'"), 
				ДействиеПодробнее, 
				Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
			
		Иначе		
			
			УстановитьСостояниеНеТребуется(ПараметрыОбработчика);
			
		КонецЕсли;
		
	ИначеЕсли СведенияОПроблемах.КоличествоПроблем <> 0 Тогда
		
		// Перенос данных завершен, имеются проблемы
		
		ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.РезультатыПерехода.ПолноеИмя());
			
		ДействиеПодробнее.ПараметрыФормы.Вставить("ОтборВажность", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
			
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Переход не завершен, имеются ошибки';
				|en = 'Migration is not completed, errors occurred'"),
			НСтр("ru = 'Подробнее';
				|en = 'Details'"),		
			ДействиеПодробнее);
			
		//
		ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.Форма.ПолноеИмя());
		ДействиеПодробнее.ПараметрыФормы.Вставить("РежимПереносаДанных", "Исправить");
		ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			НСтр("ru = 'Можно воспользоваться помощником для исправления ошибок';
				|en = 'You can use wizard to correct errors'"),
			НСтр("ru = 'Исправить';
				|en = 'Correct'"), 
			ДействиеПодробнее, 
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
			
		//	
		ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.Форма.ПолноеИмя());
			
		ДействиеПодробнее.ПараметрыФормы.Вставить("РежимПереносаДанных", "Проверить");
		ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
			
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			НСтр("ru = 'Можно воспользоваться помощником для проверки данных';
				|en = 'You may use a wizard to check data'"),
			НСтр("ru = 'Проверить';
				|en = 'Verify'"), 
			ДействиеПодробнее, 
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
		
	ИначеЕсли СведенияОПроблемах.КоличествоПредупреждений <> 0 Тогда
		
		// Перенос данных завершен, имеются предупреждения
		
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		
		ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.РезультатыПерехода.ПолноеИмя());
			
		ДействиеПодробнее.ПараметрыФормы.Вставить("ОтборВажность", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);
		ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
			
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			НСтр("ru = 'Переход завершен, имеются предупреждения';
				|en = 'Migration is completed, there are warnings'"),
			НСтр("ru = 'Подробнее';
				|en = 'Details'"),		
			ДействиеПодробнее, 
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);
			
		//	
		ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.Форма.ПолноеИмя());
			
		ДействиеПодробнее.ПараметрыФормы.Вставить("РежимПереносаДанных", "Проверить");
		ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
			
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			НСтр("ru = 'Можно воспользоваться помощником для проверки данных';
				|en = 'You may use a wizard to check data'"),
			НСтр("ru = 'Проверить';
				|en = 'Verify'"), 
			ДействиеПодробнее, 
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
			
	ИначеЕсли СведенияОПроблемах.КоличествоРешенныхПроблем <> 0 Тогда
		
		// Перенос данных завершен, проблемы решены
		
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		
		ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.РезультатыПерехода.ПолноеИмя());
			
		ДействиеПодробнее.ПараметрыФормы.Вставить("ОтборВажность", Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
		ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
			
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			НСтр("ru = 'Переход завершен, ошибки устранены';
				|en = 'Migration complete, errors resolved'"),
			НСтр("ru = 'Подробнее';
				|en = 'Details'"),		
			ДействиеПодробнее, 
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
		
		//	
		ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Формы.Форма.ПолноеИмя());
			
		ДействиеПодробнее.ПараметрыФормы.Вставить("РежимПереносаДанных", "Проверить");
		ДействиеПодробнее.ПараметрыФормы.Вставить("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
			
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			НСтр("ru = 'Можно воспользоваться помощником для проверки данных';
				|en = 'You may use a wizard to check data'"),
			НСтр("ru = 'Проверить';
				|en = 'Verify'"), 
			ДействиеПодробнее, 
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
			
	Иначе		
		
		УстановитьСостояниеНеТребуется(ПараметрыОбработчика);
		
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

//-- НЕ УТ
//++ НЕ УТКА
#Область НачислениеАмортизацииОСиНМАМеждународныйУчет

// Обработчики этапа.

Процедура Использование_НачислениеАмортизацииОСиНМАМеждународныйУчет(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеУчетнойПолитикиМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);

	Если ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода) Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Операция не используется при учете внеоборотных активов версии 2.4';
				|en = 'The operation is not used for capital asset accounting 2.4'"));
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеСредства.Организация
	|ПОМЕСТИТЬ ТребуетсяАмортизацияОС
	|ИЗ
	|	РегистрСведений.ОсновныеСредстваМеждународныйУчет.СрезПоследних(&КонецПериода, Организация В (&МассивОрганизаций)) КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И ОсновныеСредства.ПорядокУчета = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НематериальныеАктивы.Организация
	|ПОМЕСТИТЬ ТребуетсяАмортизацияНМА
	|ИЗ
	|	РегистрСведений.НематериальныеАктивыМеждународныйУчет.СрезПоследних(&КонецПериода, Организация В (&МассивОрганизаций)) КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И НематериальныеАктивы.ПорядокУчета = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АмортизацияОС.Организация КАК Организация
	|ПОМЕСТИТЬ ЕстьАмортизацияОС
	|ИЗ
	|	Документ.АмортизацияОСМеждународныйУчет КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Проведен
	|	И АмортизацияОС.Организация В(&МассивОрганизаций)
	|	И АмортизацияОС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АмортизацияНМА.Организация КАК Организация
	|ПОМЕСТИТЬ ЕстьАмортизацияНМА
	|ИЗ
	|	Документ.АмортизацияНМАМеждународныйУчет КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Проведен
	|	И АмортизацияНМА.Организация В(&МассивОрганизаций)
	|	И АмортизацияНМА.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребуетсяАмортизацияОС.Организация
	|ПОМЕСТИТЬ НетАмортизацииОС
	|ИЗ
	|	ТребуетсяАмортизацияОС КАК ТребуетсяАмортизацияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьАмортизацияОС КАК ЕстьАмортизацияОС
	|		ПО ТребуетсяАмортизацияОС.Организация = ЕстьАмортизацияОС.Организация
	|ГДЕ
	|	ЕстьАмортизацияОС.Организация ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребуетсяАмортизацияНМА.Организация
	|ПОМЕСТИТЬ НетАмортизацииНМА
	|ИЗ
	|	ТребуетсяАмортизацияНМА КАК ТребуетсяАмортизацияНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьАмортизацияНМА КАК ЕстьАмортизацияНМА
	|		ПО ТребуетсяАмортизацияНМА.Организация = ЕстьАмортизацияНМА.Организация
	|ГДЕ
	|	ЕстьАмортизацияНМА.Организация ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ТребуетсяАмортизацияОС = 0 И РазмерыВременныхТаблиц.ТребуетсяАмортизацияНМА = 0 Тогда
			
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет ОС и НМА, по которым требуется начисление амортизации.';
				|en = 'No FA or IA to accrue depreciation for.'"));
		
	Иначе
		
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 не выполнено начисление амортизации ОС.';
				|en = 'FA depreciation is not accrued for the ""%1"" company for period %2.'"),
			Запрос,
			"НетАмортизацииОС",
			Ложь,
			Истина);
		
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 не выполнено начисление амортизации НМА.';
				|en = 'IA depreciation is not accrued for the ""%1"" company for period %2.'"),
			Запрос,
			"НетАмортизацииНМА",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_НачислениеАмортизацииОСиНМАМеждународныйУчет(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов,
		Ложь); // также формирует ВТОрганизации - организации с существующей учетной политикой международного учета
		
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОС.Организация
	|ПОМЕСТИТЬ ВТОрганизацииОС
	|ИЗ
	|	РегистрСведений.ОсновныеСредстваМеждународныйУчет.СрезПоследних(&КонецПериода,
	|		Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ВТОрганизации КАК Т)) КАК ОС
	|ГДЕ
	|	ОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И ОС.ПорядокУчета = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НМА.Организация
	|ПОМЕСТИТЬ ВТОрганизацииНМА
	|ИЗ
	|	РегистрСведений.НематериальныеАктивыМеждународныйУчет.СрезПоследних(&КонецПериода,
	|		Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ВТОрганизации КАК Т)) КАК НМА
	|ГДЕ
	|	НМА.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|	И НМА.ПорядокУчета = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	ИСТИНА КАК АмортизацияОС,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РегламентнаяОперация.Ссылка
	|	КОНЕЦ КАК РегламентныйДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	ВТОрганизацииОС КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АмортизацияОСМеждународныйУчет КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Т.Организация)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Организация,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РегламентнаяОперация.Ссылка
	|	КОНЕЦ
	|ИЗ
	|	ВТОрганизацииНМА КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АмортизацияНМАМеждународныйУчет КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Т.Организация)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	Т.АмортизацияОС КАК АмортизацияОС,
	|	МАКСИМУМ(Т.РегламентныйДокумент) КАК РегламентныйДокумент
	|ПОМЕСТИТЬ ВТАктуальныеДокументы
	|ИЗ
	|	ВТДокументы КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.АмортизацияОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	Т.АмортизацияОС КАК АмортизацияОС,
	|	Т.РегламентныйДокумент,
	|	ВЫБОР
	|		КОГДА Т.РегламентныйДокумент <> Т2.РегламентныйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	ВТДокументы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеДокументы КАК Т2
	|		ПО Т.Организация = Т2.Организация
	|			И Т.АмортизацияОС = Т2.АмортизацияОС
	|			И Т.РегламентныйДокумент = Т2.РегламентныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	АмортизацияОС УБЫВ";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МетаданныеДокумента = ?(Выборка.АмортизацияОС,
			Метаданные.Документы.АмортизацияОСМеждународныйУчет,
			Метаданные.Документы.АмортизацияНМАМеждународныйУчет);
		
		Если НЕ ЗначениеЗаполнено(Выборка.РегламентныйДокумент) Тогда
			РегламентныйДокумент = Документы[МетаданныеДокумента.Имя].СоздатьДокумент();
		Иначе
			РегламентныйДокумент = Выборка.РегламентныйДокумент.ПолучитьОбъект();
		КонецЕсли;
		
		Попытка
		
			Если Выборка.Удалить Тогда
				РегламентныйДокумент.УстановитьПометкуУдаления(Истина);
				Продолжить;
			ИначеЕсли РегламентныйДокумент.Проведен Тогда
				РегламентныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
			РегламентныйДокумент.Дата 	     	= КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
			РегламентныйДокумент.Организация 	= Выборка.Организация;
			РегламентныйДокумент.Ответственный 	= Пользователи.ТекущийПользователь();
			
			РегламентныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Формирование документа ""%1"" по организации ""%2"" за период %3 завершилось с ошибкой:
					|%4';
					|en = 'Generation of the ""%1"" document by the ""%2"" company for period %3 was completed with an error:
					|%4'"),
				МетаданныеДокумента.Синоним,
				Выборка.Организация,	
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				Выборка.Организация);
			
		КонецПопытки;
		
	КонецЦикла;
	
	УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТ
#Область ФормированиеДвиженийПоВнеоборотнымАктивам

// Обработчики этапа.

Процедура Использование_ФормированиеДвиженийПоВнеоборотнымАктивам(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.Период) Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов версии 2.4 не используется.';
				|en = 'Accounting of capital assets 2.4 is not used.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,, "ЗаданияКФормированиюДвиженийПоВНА") Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ВнеоборотныеАктивы.ВыполненоОтложенноеФормированиеДвиженийПоВНА(ПараметрыОбработчика) Тогда
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов по которым требуется сформировать движения.';
				|en = 'No documents that require record generation.'"));
	КонецЕсли; 
	
КонецПроцедуры

Процедура Выполнить_ФормированиеДвиженийПоВнеоборотнымАктивам(ПараметрыОбработчика) Экспорт
	
	Если ВнеоборотныеАктивы.НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивы.ВыполнитьОперациюЗакрытияМесяцаОтложенноеФормированиеДвиженийПоВНА(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область ПризнаниеВНалоговомУчетеЛизинговыхПлатежей

// Обработчики этапа.

Процедура Использование_ПризнаниеВНалоговомУчетеЛизинговыхПлатежей(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Лизинг не используется.';
				|en = 'Leasing is not used.'"));
	КонецЕсли;
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода,
	|		Организация В (&МассивОрганизаций)) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|		ПО Т.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|			И (СпрУчетнаяПолитика.ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи)";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет организаций, для которых в учетной политике выбрано включение в состав налоговых расходов лизинговых платежей';
				|en = 'No companies for which inclusion of the lease payments inside the tax expenses is selected in accounting policy'"));
		Возврат;
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина, "ВТОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика,, "ВТОрганизации");
	
КонецПроцедуры

Процедура Выполнить_ПризнаниеВНалоговомУчетеЛизинговыхПлатежей(ПараметрыОбработчика) Экспорт
	
	Если ВнеоборотныеАктивы.НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПогашениеСтоимостиТМЦВЭксплуатации

// Обработчики этапа.

Процедура Использование_ПогашениеСтоимостиТМЦВЭксплуатации(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,, "ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
		ПараметрыОбработчика,
		Метаданные.Документы.ПогашениеСтоимостиТМЦВЭксплуатации.Имя);
	
КонецПроцедуры

Процедура Выполнить_ПогашениеСтоимостиТМЦВЭксплуатации(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.НачалоРасчета(
		ПараметрыРасчета.КонецПериода,
		ПараметрыРасчета.МассивОрганизаций);
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		Документы.ПогашениеСтоимостиТМЦВЭксплуатации.СоздатьПакетыПогашенияСтоимостиТМЦ(
			НачалоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
		НомерЗадания = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.УвеличитьНомерЗадания();
		
		НачатьТранзакцию();
		
		Попытка
			
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций);
			
			ЗаданияКРасчету = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period: 
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ЗаданияКРасчету.Организация.Количество() <> 0 Тогда
		
			Попытка
				
				Документы.ПогашениеСтоимостиТМЦВЭксплуатации.СоздатьДокументы(
					НачалоРасчета,
					ПараметрыРасчета.МассивОрганизаций,
					ЕстьОшибки);
					
				ЕстьОшибкиВыполненияРасчета = ЕстьОшибкиВыполненияРасчета(
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ПараметрыРасчета.МассивОрганизаций, 
					НачалоРасчета);
													
				Если ЕстьОшибкиВыполненияРасчета Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				
			Исключение
				
				ЕстьОшибки = Истина;
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					,
					НачалоРасчета);
			
			КонецПопытки;
			
			Если ЕстьОшибки Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЕсли; 
		
		НачатьТранзакцию();
		
		Попытка
			
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций); 
			
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета,
				ЗаданияКРасчету);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period: 
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетНалогаНаИмущество

// Обработчики этапа.

Процедура Использование_РасчетНалогаНаИмущество(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций.Количество());
	
	УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоНалогуНаИмущество(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
		
	МесяцРасчета = Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	НеобходимРасчетНалога = (МесяцРасчета = 12) ИЛИ (МесяцРасчета % 3 = 0 И УплачиваютсяАвансы);
	
	Если НЕ НеобходимРасчетНалога Тогда
		
		Если МесяцРасчета % 3 = 0 Тогда
			
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Авансы по налогу на имущество не уплачиваются.';
					|en = 'Property tax advances are not paid.'"));
					
		Иначе
			
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Налог на имущество рассчитывается в последнем месяце квартала.';
					|en = 'Property tax is calculated in the last month of the quarter. '"));
			
		КонецЕсли;
		
		Возврат;		
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура Выполнить_РасчетНалогаНаИмущество(ПараметрыОбработчика) Экспорт
	
	Если ВнеоборотныеАктивы.НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетТранспортногоНалога

// Обработчики этапа.

Процедура Использование_РасчетТранспортногоНалога(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций.Количество());
	
	УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоТранспортномуНалогу(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	МесяцРасчета = Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	НеобходимРасчетНалога = (МесяцРасчета = 12) ИЛИ (МесяцРасчета % 3 = 0 И УплачиваютсяАвансы);
	
	Если НЕ НеобходимРасчетНалога Тогда
		
		Если МесяцРасчета % 3 = 0 Тогда
			
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Авансы по транспортному налогу не уплачиваются.';
					|en = 'Vehicle tax advances are not paid.'"));
					
		Иначе
			
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Транспортный налог рассчитывается в последнем месяце квартала.';
					|en = 'Vehicle tax is calculated in the last month of the quarter. '"));
			
		КонецЕсли;
		
		Возврат;		
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура Выполнить_РасчетТранспортногоНалога(ПараметрыОбработчика) Экспорт
	
	Если ВнеоборотныеАктивы.НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетЗемельногоНалога

// Обработчики этапа.

Процедура Использование_РасчетЗемельногоНалога(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций.Количество());
	
	УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоЗемельномуНалогу(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	МесяцРасчета = Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	НеобходимРасчетНалога = (МесяцРасчета = 12) ИЛИ (МесяцРасчета % 3 = 0 И УплачиваютсяАвансы);
	
	Если НЕ НеобходимРасчетНалога Тогда
		
		Если МесяцРасчета % 3 = 0 Тогда
			
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Авансы по земельному налогу не уплачиваются.';
					|en = 'Land value tax advances are not paid.'"));
					
		Иначе
			
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Земельный налог рассчитывается в последнем месяце квартала.';
					|en = 'Land value tax is calculated in the last month of the quarter.'"));
			
		КонецЕсли;
		
		Возврат;		
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура Выполнить_РасчетЗемельногоНалога(ПараметрыОбработчика) Экспорт
	
	Если ВнеоборотныеАктивы.НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетТорговогоСбора

// Обработчики этапа.

Процедура Использование_РасчетТорговогоСбора(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("УплачиваетсяТорговыйСбор") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет торгового сбора не ведется.';
				|en = 'Sales charge accounting is not kept.'"));
			
		Возврат;
		
	КонецЕсли;
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	МесяцРасчета = Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	Если МесяцРасчета % 3 <> 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Торговый сбор рассчитывается в последнем месяце квартала.';
				|en = 'Sales charge is calculated in the last month of the quarter.'"));
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизацииДляРасчета
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПараметрыТорговыхТочекСрезПоследних.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.ПараметрыТорговыхТочек.СрезПоследних(&КонецПериода, Организация В (&МассивОрганизаций)) КАК ПараметрыТорговыхТочекСрезПоследних
	|	ГДЕ
	|		ПараметрыТорговыхТочекСрезПоследних.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийТорговыеТочки.СнятиеСУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПараметрыТорговыхТочек.Организация
	|	ИЗ
	|		РегистрСведений.ПараметрыТорговыхТочек КАК ПараметрыТорговыхТочек
	|	ГДЕ
	|		ПараметрыТорговыхТочек.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ПараметрыТорговыхТочек.Организация В(&МассивОрганизаций)) КАК Т";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТОрганизацииДляРасчета", ПараметрыОбработчика) = 0 Тогда
			
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет торговых точек для расчета налога.';
				|en = 'No sales outlets to calculate taxes.'"));
		Возврат;
		
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика,, "ВТОрганизацииДляРасчета", Ложь);
	
КонецПроцедуры

Процедура Выполнить_РасчетТорговогоСбора(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперация(ПараметрыОбработчика, ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

//++ НЕ УТ
#Область Группа_ПроизводственныеЗатраты

#Область НастройкаРаспределенияРасходов

// Обработчики этапа.

Процедура Использование_НастройкаРаспределенияРасходов(ПараметрыОбработчика) Экспорт
	
	ПараметрыЗакрытия = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения();
	
	// Доп. параметры запроса.
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",	  Ложь);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Истина);
	Запрос.УстановитьПараметр("СписокПодразделений",  Новый Массив);
	Запрос.УстановитьПараметр("ФильтрПоСостоянию",    Перечисления.СостоянияРаспределенияРасходов.ПустаяСсылка());
	Запрос.УстановитьПараметр("НормируемыеРасходы",   Перечисления.ВидыРасходовНУ.НормируемыеРасходы());
	Запрос.УстановитьПараметр("ЗначениеПогрешностиУпр",  ПараметрыЗакрытия.ЗначениеПогрешностиРасходыУпр);
	Запрос.УстановитьПараметр("ЗначениеПогрешностиРегл",  ПараметрыЗакрытия.ЗначениеПогрешностиРасходыРегл);
	
	Запрос.Выполнить();	
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТДанныеДляРаспределения = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет данных для распределения расходов.';
				|en = 'No data for expense allocation.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Организация,
	|	Таблица.Подразделение,
	|	Таблица.НаправлениеДеятельности,
	|	Таблица.СтатьяРасходов,
	|	Таблица.АналитикаРасходов
	|ПОМЕСТИТЬ ВТТребуетсяНастройкаРаспределения
	|ИЗ
	|	ВТДанныеДляРаспределения КАК Таблица
	|ГДЕ
	|	Таблица.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения))
	|";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТТребуетсяНастройкаРаспределения", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Все производственные расходы полностью распределены по статьям калькуляции.';
				|en = 'All production expenses are completely allocated to costing items.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_НастройкаРаспределенияРасходов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	СтатьиКРаспределению = Документы.РаспределениеПрочихЗатрат.СтатьиКРаспределению(
		ПараметрыРасчета.ПериодРегистрации,
		ПараметрыРасчета.МассивОрганизаций,
		Новый Массив,
		Перечисления.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения);
		
	Если СтатьиКРаспределению.Количество() = 0 Тогда // нет данных для распределения
		Возврат;
	КонецЕсли;
	
	СтатьиКРаспределению.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	СтатьиКРаспределению.Колонки.Добавить("ИДСтроки", Новый ОписаниеТипов("Число"));
	СтатьиКРаспределению.ЗаполнитьЗначения(КонецМесяца(ПараметрыРасчета.ПериодРегистрации), "Дата");
	
	НастройкиРаспределенияСтатьиРасходов = 
		Документы.РаспределениеПрочихЗатрат.ПолучитьНастройкиРаспределенияСтатейРасходов(СтатьиКРаспределению);

	Для Каждого НастройкаРаспределения Из НастройкиРаспределенияСтатьиРасходов Цикл
		
		Попытка
			Документы.РаспределениеПрочихЗатрат.СформироватьДокумент(НастройкаРаспределения);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется ручная настройка распределения расходов за период %1. Необходимость возникла из-за ошибки:
					|%2';
					|en = 'Manual setting of expense allocation for the period of %1 is required. The need occurred due to error:
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				НастройкаРаспределения.Организация);
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_НастройкаРаспределенияРасходов(ТаблицаПроверок)
	
	// Настройка распределения расходов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненаНастройкаРаспределенияРасходов",
		Перечисления.ОперацииЗакрытияМесяца.НастройкаРаспределенияРасходов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиНастройкиРаспределенияРасходов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не выполненные настройки распределения расходов';
			|en = 'Not executed expense allocation settings'"),
		НСтр("ru = 'Все производственные расходы должны быть полностью распределены по статьям калькуляции.';
			|en = 'All production expenses should be completely allocated to costing items.'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиНастройкиРаспределенияРасходов(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru = 'Подразделение';
															|en = 'Department'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru = 'Направление деятельности';
														|en = 'Line of business'"));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru = 'Статья расходов';
															|en = 'Expense item'"));
	СписокПолей.Добавить("АналитикаРасходов", 		НСтр("ru = 'Аналитика расходов';
															|en = 'Expenditure dimension'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТТребуетсяНастройкаРаспределения",
		НСтр("ru = 'Обнаружены статьи расходов, требующие ручной настройки распределения, по организации ""%1"" на конец периода %2';
			|en = 'Expense items were detected that require manual allocation configuration for the ""%1"" company as of the end of %2 period'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- НЕ УТ

#Область Группа_Себестоимость

#Область РасчетПартийИСебестоимости

// Обработчики этапа.

Процедура Использование_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	ПериодРасчета    = ПараметрыРасчета.ПериодРегистрации;
	
	// Дополним связанными по Интеркампани организациями и добавим информационные сообщения.
	ПараметрыОбработчика.ДанныеЭтапа.МассивОрганизаций = УниверсальныеМеханизмыПартийИСебестоимости.СвязиОрганизацийПоСхемеИнтеркампани(
		ПериодРасчета,
		ПараметрыРасчета.МассивОрганизаций);
	
	МассивОрганизаций = ПараметрыОбработчика.ДанныеЭтапа.МассивОрганизаций;
	МассивДополнительныеОрганизации = Новый Массив;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		Если ПараметрыРасчета.МассивОрганизаций.Найти(ТекущаяОрганизация) = Неопределено Тогда
			МассивДополнительныеОрганизации.Добавить(ТекущаяОрганизация);
		КонецЕсли;
	КонецЦикла;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, МассивОрганизаций.Количество());
	
	Если МассивДополнительныеОрганизации.Количество() > 0 Тогда
		
		ТекстДополнительныеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Также будет выполнен расчет для организаций, связанных по схеме Интеркампани: %1';
				|en = 'Calculation will be also performed for companies connected under Intercompany: %1'"),
			УниверсальныеМеханизмыПартийИСебестоимости.ПредставлениеОрганизаций(МассивДополнительныеОрганизации, ", "));
		
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			ТекстДополнительныеОрганизации,
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ВажнаяИнформация);
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, МассивОрганизаций.Количество());
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.ПроверитьНеобходимостьВключенияНастройкиРаспределениеДопРасходовПоВыбывшимТоварам(ПараметрыРасчета) Тогда
		
		ТекстРекомендации = НСтр("ru = 'Обнаружены расходы, которые можно списать на выбытия прошлых периодов.
			|Рекомендуется включить настройку ""Распределение доп. расходов по выбывшим товарам"".';
			|en = 'Expenses which can be written off as outflows of previous periods are detected.
			|It is recommended that you enable the ""Allocate add. expenses by retired goods"" setting.'");
		
		ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(
				Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.ФинансовыйРезультатИКонтроллинг.ПолноеИмя());
		
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			ТекстРекомендации,
			,
			ОписаниеДействия,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
		
	КонецЕсли;
	
	ПериодПересчетаПартийНДС = УниверсальныеМеханизмыПартийИСебестоимости.ПроверкаНеобходимостьПересчетаРегистраПартийНДС(ПараметрыРасчета);
	
	Если ЗначениеЗаполнено(ПериодПересчетаПартийНДС) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обнаружены некорректные движения по регистру ""%1"" за период %2.
				|Необходимо выполнить закрытие месяца начиная с данного периода.';
				|en = 'Incorrect movements by the ""%1"" registers for period %2 are detected.
				|Close the month starting from this period.'"),
			Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.Синоним,
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПериодПересчетаПартийНДС));
		
		ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			ТекстОшибки,
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	КонецЕсли;
	
	НачалоПериодаРасчета = УниверсальныеМеханизмыПартийИСебестоимости.НачалоПериодаРасчета(ПериодРасчета, МассивОрганизаций);
	
	Если НачалоПериодаРасчета <= ПериодРасчета Тогда
		
		ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = НачалоПериодаРасчета;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется пересчет начиная с периода %1.';
					|en = 'Recalculation is required starting from the period of %1.'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(НачалоПериодаРасчета)));
		Возврат; // партии не актуальны
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.ЕстьНекорректныеДвиженияСебестоимости(ПериодРасчета, МассивОрганизаций) Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Период еще не был пересчитан в партионном учете версии 2.2.';
				|en = 'Period has not been recalculated in batch accounting 2.2.'"));
		Возврат; // период не рассчитывался в партионном учете версии 2.2
		
	КонецЕсли;
	
	ОрганизацииСДвижениямиПоСебестоимости = УниверсальныеМеханизмыПартийИСебестоимости.ОрганизацииСДвижениямиПоСебестоимости(
		ПериодРасчета,
		МассивОрганизаций);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ОрганизацииСДвижениямиПоСебестоимости.Количество());
	
	Если ЗначениеЗаполнено(ОрганизацииСДвижениямиПоСебестоимости)
	 И НЕ УниверсальныеМеханизмыПартийИСебестоимости.ЕстьДокументыРасчетаСебестоимости(ПериодРасчета, ОрганизацииСДвижениямиПоСебестоимости) Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Расчет себестоимости в данном периоде еще не выполнялся.';
				|en = 'Cost has not been calculated in this period.'"));
		Возврат;
		
	КонецЕсли;
	
	СостояниеКорректировкиНДС = УниверсальныеМеханизмыПартийИСебестоимости.СостояниеКорректировкиНДС(ПериодРасчета, МассивОрганизаций);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если СостояниеКорректировкиНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Требуется выполнить корректировку налогообложения НДС.';
				|en = 'Adjust VAT taxation.'"));
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацииСДвижениямиПоСебестоимости)
 	 И СостояниеКорректировкиНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет движений по регистрам себестоимости и прочих расходов.';
				|en = 'No records in registers of cost and other expenses.'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстПодробнее = "";
	
	Если ТребуетсяПересчетЭтапа(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		
		ПротоколыРасчета = РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.ПолучитьПротоколыРасчета(
			ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации,
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
		УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПротоколыРасчета.Количество());
		
		Если ЗначениеЗаполнено(ПротоколыРасчета) Тогда
			ПараметрыОбработчика.ДанныеЭтапа.ТекстПодробнее = ТекстПодробнееПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации,
		Неопределено,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Дата", 					    ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	ПараметрыЗапуска.Вставить("МассивОрганизаций",  	    ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	ПараметрыЗапуска.Вставить("МестоВызоваРасчета", 	    "ЗакрытиеМесяцаСервер.Выполнить_РасчетПартийИСебестоимости");
	ПараметрыЗапуска.Вставить("ВыполняетсяЗакрытиеМесяца",  Истина);
	ПараметрыЗапуска.Вставить("АвтоматическоеТестирование", ПараметрыОбработчика.АвтоматическоеТестирование);
	
	ПартионныйУчет22.РассчитатьВсеВПопыткеИсключении(ПараметрыЗапуска);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РасчетПартийИСебестоимости(ТаблицаПроверок)
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеНДС

// Обработчики этапа.

Процедура Использование_РаспределениеНДС(ПараметрыОбработчика) Экспорт
	
	ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Ложь);
	ПроверитьКорректностьПримененияПравила5Процентов(ПараметрыОбработчика);
	
	Если СостояниеЭтапаОпределено(ПараметрыОбработчика.ДанныеЭтапа)
	 И ТребуетсяПересчетЭтапа(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
		ПараметрыОбработчика,
		Метаданные.Документы.РаспределениеНДС.Имя);
	
КонецПроцедуры

Процедура Выполнить_РаспределениеНДС(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ДанныеКРаспределению = ЗаданияКРасчетуЗаМесяц(
			НачалоПериода,
			КонецПериода,
			НомерЗаданияДоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
				|%2';
				|en = 'An error occurred when calculating for the %1 period: 
				|%2'"),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	КонецПопытки;
	
	РезультатРаспределенияНДС = Документы.РаспределениеНДС.РаспределитьНДС(
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, 
		ДанныеКРаспределению.Организация);
	
	Если РезультатРаспределенияНДС.РассчитанныеОрганизации.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьРегистрЗаданий(
				НомерЗаданияДоРасчета,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьРасчет(
				Неопределено,
				НомерЗаданияДоРасчета,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРаспределению);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period: 
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыРасчета.ПериодРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные методы этапа.

Функция ПроверитьКорректностьПримененияПравила5Процентов(ПараметрыОбработчика)
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	НеобходимаПроверка = (Месяц(ПараметрыРасчета.ПериодРегистрации) % 3 = 0);
	БылиОшибки = Ложь;
	
	Если НЕ НеобходимаПроверка Тогда
		Возврат НЕ БылиОшибки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	МАКСИМУМ(Т.ПрименитьПравило5Процентов) КАК ПрименитьПравило5Процентов
	|ПОМЕСТИТЬ ОрганизацииСДокументамиРаспределения
	|ИЗ
	|	Документ.РаспределениеНДС КАК Т
	|ГДЕ
	|	Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация КАК Организация,
	|	Организации.ПрименитьПравило5Процентов КАК ПрименитьПравило5Процентов
	|ИЗ
	|	ОрганизацииСДокументамиРаспределения КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|				&НачалоПериода,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Т.Организация
	|					ИЗ
	|						ОрганизацииСДокументамиРаспределения КАК Т)) КАК Политики
	|		ПО Организации.Организация = Политики.Организация
	|ГДЕ
	|	ЕСТЬNULL(Политики.УчетнаяПолитика.Учитывать5ПроцентныйПорог, ЛОЖЬ)";
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ТаблицаОрганизаций.Количество());
	
	Если ТаблицаОрганизаций.Количество() = 0 Тогда
		Возврат НЕ БылиОшибки;
	КонецЕсли;
	
	Оценка = Документы.РаспределениеНДС.ОценкаПримененияПравила5Процентов(
		ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"),
		ПараметрыРасчета.ПериодРегистрации);
		
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Оценка.Количество());
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
		
		СтрокаОценки = Оценка.Найти(СтрокаОрганизации.Организация, "Организация");
		
		Если СтрокаОценки = Неопределено Тогда
			
			Продолжить;
		
		ИначеЕсли НЕ СтрокаОрганизации.ПрименитьПравило5Процентов И СтрокаОценки.Доля <= 5 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У организации ""%1"" расходы по реализации не облагаемой НДС не превышают 5% от общих расходов. НДС может быть принят к вычету в полном объеме.';
					|en = 'The ""%1"" company expenses for sale not subject to VAT do not exceed 5% of total expenses. VAT can be fully accepted for deduction.'"),
				СтрокаОрганизации.Организация);
			
			ДобавитьПоясняющуюИнформациюКЭтапу(
				ПараметрыОбработчика,
				ТекстСообщения,
				,
				,
				Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
			
		ИначеЕсли СтрокаОрганизации.ПрименитьПравило5Процентов И СтрокаОценки.Доля > 5 Тогда
			
			БылиОшибки = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У организации ""%1"" расходы по реализации не облагаемой НДС превышают 5% от общих расходов. Необходимо выполнить распределение НДС между видами деятельности.';
					|en = 'The ""%1"" company expenses for sale not subject to VAT exceed 5% of total expenses. Allocate VAT among activity categories.'"),
				СтрокаОрганизации.Организация);
			
			УстановитьСостояниеВыполненСОшибками(
				ПараметрыОбработчика,
				ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат НЕ БылиОшибки;
	
КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область РасчетСтоимостиВнеоборотныхАктивов

// Обработчики этапа.

Процедура Использование_РасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.Период) Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов версии 2.4 не используется.';
				|en = 'Accounting of capital assets 2.4 is not used.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,, "ЗаданияКРасчетуСтоимостиВНА") Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ВнеоборотныеАктивы.ВыполненРасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Тогда
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов по которым требуется расчет стоимость.';
				|en = 'No documents that require cost calculation.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_РасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Экспорт
	
	Если ВнеоборотныеАктивы.НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивы.ВыполнитьОперациюЗакрытияМесяцаРасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#Область Группа_ФормированиеФинансовогоРезультата

#Область РаспределениеДоходовИРасходовПоНаправлениямДеятельности

// Обработчики этапа.

Процедура Использование_РаспределениеДоходовИРасходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	//++ НЕ УТ
	Запрос.УстановитьПараметр("НормируемыеРасходы", Перечисления.ВидыРасходовНУ.НормируемыеРасходы());
	//-- НЕ УТ
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статьи.Ссылка,
	|	Статьи.ВариантРаспределенияРасходовУпр,
	|	Статьи.ВариантРаспределенияРасходовРегл,
	|	Статьи.КосвенныеЗатратыНУ
	|ПОМЕСТИТЬ СтатьиНД
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	ИЛИ Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	ИЛИ (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|		И Статьи.КосвенныеЗатратыНУ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статьи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоПериода,
	|			&ГраницаКонецПериода,
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						Т.Ссылка
	|					 ИЗ
	|						СтатьиНД КАК Т
	|					 ГДЕ
	|						Т.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|					)) КАК Расходы
	|ГДЕ
	|	Расходы.СуммаПриход <> 0
	|	ИЛИ Расходы.СуммаУпрПриход <> 0
	|	ИЛИ Расходы.СуммаРасход <> 0
	|	ИЛИ Расходы.СуммаУпрРасход <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расходы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоПериода,
	|			&ГраницаКонецПериода,
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						Т.Ссылка
	|					 ИЗ
	|						СтатьиНД КАК Т
	|					 ГДЕ
	|						Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|					)) КАК Расходы
	|ГДЕ
	|	Расходы.СуммаРеглПриход <> 0
	|	ИЛИ Расходы.ПостояннаяРазницаПриход <> 0
	|	ИЛИ Расходы.ВременнаяРазницаПриход <> 0
	|	ИЛИ Расходы.СуммаРеглРасход <> 0
	|	ИЛИ Расходы.ПостояннаяРазницаРасход <> 0
	|	ИЛИ Расходы.ВременнаяРазницаРасход <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расходы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоПериода,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			Организация В (&МассивОрганизаций)
	|				И СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						Т.Ссылка
	|					 ИЗ
	|						СтатьиНД КАК Т
	|					 ГДЕ
	|						Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|						И Т.КосвенныеЗатратыНУ
	|					)) КАК Расходы
	|ГДЕ
	|	Расходы.ВременнаяРазницаПриход <> 0
	|	ИЛИ Расходы.ВременнаяРазницаРасход <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Доходы.Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеДоходы.Обороты(&НачалоПериода, &ГраницаКонецПериода, , Организация В (&МассивОрганизаций)) КАК Доходы
	|ГДЕ
	|	Доходы.СуммаПриход <> 0
	|	ИЛИ Доходы.СуммаУпрПриход <> 0
	|	ИЛИ Доходы.СуммаРеглПриход <> 0
	|	ИЛИ Доходы.СуммаРасход <> 0
	|	ИЛИ Доходы.СуммаУпрРасход <> 0
	|	ИЛИ Доходы.СуммаРеглРасход <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	
	Если РезультатЗапроса.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нет оборотов по регистрам прочих доходов и расходов за период %1';
					|en = 'No turnovers for registers of other income and expenses for period %1'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расходы.Организация КАК Организация,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расходы.СтатьяРасходов КАК СтатьяРасходов,
	|	Расходы.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ВТОстаткиПрочихРасходов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(
	|		&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)
	|			И СтатьяРасходов В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					СтатьиНД КАК Т)) КАК Расходы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статья
	|		ПО Статья.Ссылка = Расходы.СтатьяРасходов
	|ГДЕ
	|	(Расходы.СуммаОстаток <> 0 ИЛИ Расходы.СуммаУпрОстаток <> 0)
	|		И Статья.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	ИЛИ 
	|	(Расходы.СуммаРеглОстаток <> 0 ИЛИ Расходы.ВременнаяРазницаОстаток <> 0)
	|		И Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	//++ НЕ УТ
	|		И Статья.ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|	ИЛИ
	|	(Расходы.ПостояннаяРазницаОстаток <> 0
	|		И Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|		И НЕ Статья.ВидРасходов В (&НормируемыеРасходы)
	|		И Статья.ВидРасходов <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы))
	|	ИЛИ
	|	((Расходы.СуммаРеглОстаток - Расходы.ВременнаяРазницаОстаток - Расходы.ПостояннаяРазницаОстаток) <> 0
	|		И Расходы.ВременнаяРазницаОстаток <> 0
	|		И Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|			И Статья.КосвенныеЗатратыНУ)
	//-- НЕ УТ
	|;
	|ВЫБРАТЬ
	|	Доходы.Организация КАК Организация,
	|	Доходы.Подразделение КАК Подразделение,
	|	Доходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Доходы.СтатьяДоходов КАК СтатьяДоходов,
	|	Доходы.АналитикаДоходов КАК АналитикаДоходов
	|ПОМЕСТИТЬ ВТОстаткиПрочихДоходов
	|ИЗ
	|	РегистрНакопления.ПрочиеДоходы.Остатки(
	|		&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)
	|	) КАК Доходы
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация
	|ИЗ (
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Расходы.Организация КАК Организация
	|	ИЗ
	|		ВТОстаткиПрочихРасходов КАК Расходы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Доходы.Организация
	|	ИЗ
	|		ВТОстаткиПрочихДоходов КАК Доходы
	|	) КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Если Выборка.Количество() > 0 Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется пересчет за период %1.';
					|en = 'Recalculation for period %1 is required.'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
		
	КонецЕсли;
				
КонецПроцедуры

Процедура Выполнить_РаспределениеДоходовИРасходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	Для Каждого ТекущаяОрганизация Из ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций Цикл
		
		Попытка
			Документы.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.СоздатьДокументыЗаПериод(
				ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, 
				ТекущаяОрганизация);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Распределение доходов и расходов расходов по направлениям деятельности за период %1 завершилось с ошибкой:
					|%2';
					|en = 'Allocation of income and expenses by lines of business for period %1 was completed with an error:
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ТекущаяОрганизация);
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РаспределениеДоходовИРасходовПоНаправлениямДеятельности(ТаблицаПроверок)
	
	// Настройка распределения расходов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаОстатковПрочихДоходовИРасходов",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеДоходовИРасходовПоНаправлениямДеятельности,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковПрочихДоходовИРасходов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не распределены прочие доходы и расходы на финансовый результат';
			|en = 'Other income and expenses are not allocated on financial result'"),
		НСтр("ru = 'Все прочие доходы и расходы должны быть распределены на финансовый результат.';
			|en = 'All other income and expenses should be allocated to the financial result.'"));
	
КонецПроцедуры

Процедура ПроверкаОстатковПрочихДоходовИРасходов(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru = 'Подразделение';
															|en = 'Department'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru = 'Направление деятельности';
														|en = 'Line of business'"));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru = 'Статья расходов';
															|en = 'Expense item'"));
	СписокПолей.Добавить("АналитикаРасходов", 		НСтр("ru = 'Аналитика расходов';
															|en = 'Expenditure dimension'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиПрочихРасходов",
		НСтр("ru = 'По организации ""%1"" на конец периода %2 есть остатки по регистру прочих расходов.';
			|en = 'There is balance in the register of other expenses for the ""%1"" company as of the end of period %2.'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru = 'Подразделение';
															|en = 'Department'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru = 'Направление деятельности';
														|en = 'Line of business'"));
	СписокПолей.Добавить("СтатьяДоходов", 			НСтр("ru = 'Статья доходов';
															|en = 'Income item'"));
	СписокПолей.Добавить("АналитикаДоходов", 		НСтр("ru = 'Аналитика доходов';
															|en = 'Income dimension'"));
		
	ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТОстаткиПрочихДоходов",
		НСтр("ru = 'По организации ""%1"" на конец периода %2 есть остатки по регистру прочих доходов.';
			|en = 'There is balance by other expense register by the ""%1"" company as of the end of the period %2.'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Группа_РегламентированныйУчет

#Область ФормированиеЗаписейКнигПокупокИПродаж

// Обработчики этапа.

Процедура Использование_ФормированиеЗаписейКнигПокупокИПродаж(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = ТекстЗапросаСостояниеФормированияЗаписейКнигПокупокИПродаж();
	
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика,
		МассивРезультатов[0].Выгрузить().Количество()
		+ МассивРезультатов[1].Выгрузить().Количество());
	
	ЕстьОтраженныеВУчете                = НЕ МассивРезультатов[0].Пустой();
	ЕстьОжидающиеОтражения              = НЕ МассивРезультатов[1].Пустой();
	
	Если ЕстьОжидающиеОтражения Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидает отражения в учете НДС: %1';
					|en = 'Awaiting recording in VAT accounting: %1'"),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если НЕ ЕстьОжидающиеОтражения И НЕ ЕстьОтраженныеВУчете Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов для обработки.';
				|en = 'No documents for processing.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ФормированиеЗаписейКнигПокупокИПродаж(ПараметрыОбработчика) Экспорт
	
	УчетНДСУП.ВыполнитьЗаданияПоФормированиюКнигиПокупокПродаж( 
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ОтражениеДокументовВРегламентированномУчете

// Обработчики этапа.

Процедура Использование_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = ТекстЗапросаСостояниеОтраженияДокументов();
	
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика,
		МассивРезультатов[0].Выгрузить().Количество()
		+ МассивРезультатов[1].Выгрузить().Количество()
		+ МассивРезультатов[2].Выгрузить().Количество()
		+ МассивРезультатов[3].Выгрузить().Количество());
	
	ЕстьОтраженныеВУчете                = НЕ МассивРезультатов[0].Пустой();
	ЕстьОжидающиеОтражения              = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете              = НЕ МассивРезультатов[2].Пустой();
	ЕстьОжидающиеОтраженияНеПроверенные = НЕ МассивРезультатов[3].Пустой();
	
	Если ЕстьОжидающиеОтражения Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидает отражения в бухгалтерском и налоговом учете: %1';
					|en = 'Awaits recording in bookkeeping and tax accounting: %1'"),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если ЕстьНеОтраженныеВУчете Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не отражено в учете документов: %1';
					|en = 'Not recorded documents: %1'"),
				СокрЛП(МассивРезультатов[2].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если НЕ ЕстьНеОтраженныеВУчете И НЕ ЕстьОжидающиеОтражения И НЕ ЕстьОтраженныеВУчете И НЕ ЕстьОжидающиеОтраженияНеПроверенные Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов для отражения в учете.';
				|en = 'No documents to record in accounting.'"));
		
	КонецЕсли;
	
	Если ЕстьОжидающиеОтраженияНеПроверенные Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидает проверки для последующего отражения в учете документов: %1.';
					|en = 'Documents awaiting checking for recording in accounting: %1.'"),
				СокрЛП(МассивРезультатов[3].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	Для Каждого ТекущаяОрганизация Из ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций Цикл
		
		ДанныеПоОтражениюВУчете = РеглУчетПроведениеСервер.ИнициализироватьДанныеПоОтражениюВУчете();
	
		Попытка
			РеглУчетПроведениеСервер.ОтразитьВсе(
				КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации), 
				ТекущаяОрганизация,
				ДанныеПоОтражениюВУчете);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отражение документов в регламентированном учете за период %1 завершилось с ошибкой:
					|%2';
					|en = 'Document recording in compliance accounting for period %1 was completed with an error:
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ТекущаяОрганизация);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКурсовыхРазниц

// Обработчики этапа.

Процедура Использование_РасчетКурсовыхРазниц(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.УстановитьПараметр("ВестиУУНаПланеСчетов", 
		ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный")
		И НачалоМесяца(ПараметрыОбработчика.ПараметрыРасчета.Период) >= Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Валютный,
	|	Хозрасчетный.НалоговыйУчет,
	|	Хозрасчетный.ИсключитьСуммуБУИзПереоценкиПоПлануСчетов,
	|	Хозрасчетный.ИсключитьСуммуУУИзПереоценкиПоПлануСчетов
	|ПОМЕСТИТЬ втСчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И НЕ (Хозрасчетный.ИсключитьСуммуБУИзПереоценкиПоПлануСчетов
	|			ИЛИ &ВестиУУНаПланеСчетов И Хозрасчетный.ИсключитьСуммуУУИзПереоценкиПоПлануСчетов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Счет                    КАК Счет,
	|	Т.Организация             КАК Организация,
	|	Т.Подразделение           КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Т.Субконто1               КАК Субконто1,
	|	Т.Субконто2               КАК Субконто2,
	|	Т.Субконто3               КАК Субконто3,
	|	Т.Валюта                  КАК Валюта,
	|	Т.ВалютнаяСуммаОстаток    КАК ВалютнаяСуммаОстаток,
	|	Т.СуммаОстаток            КАК СуммаБУОстаток,
	|	Т.СуммаУУОстаток          КАК СуммаУУОстаток
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет В (ВЫБРАТЬ Т.Ссылка ИЗ втСчета КАК Т),
	|			,
	|			Организация В (&МассивОрганизаций)) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация
	|ИЗ
	|	втОстатки КАК Т";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	
	Если РезультатЗапроса.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков по переоцениваемым валютным счетам в регистре бухгалтерии ""Хозрасчетный"".';
				|en = 'No balance for revalued currency accounts in the Self-financing accounting register.'"));
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Период,
	|	Т.Валюта,
	|	Т.Курс,
	|	Т.Кратность
	|ПОМЕСТИТЬ втКурсы
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, ) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Период,
	|	Т.Валюта,
	|	Т.Курс,
	|	Т.Кратность
	|ПОМЕСТИТЬ втКурсУУ
	|ИЗ
	|	втКурсы КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО Т.Валюта = Константы.ВалютаУправленческогоУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Счет                      КАК Счет,
	|	Данные.Организация               КАК Организация,
	|	Данные.Подразделение             КАК Подразделение,
	|	Данные.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	Данные.Субконто1                 КАК Субконто1,
	|	Данные.Субконто2                 КАК Субконто2,
	|	Данные.Субконто3                 КАК Субконто3,
	|	Данные.Валюта                    КАК Валюта,
	|	Данные.ОстатокВалюты             КАК ОстатокВалюты,
	|	
	|	СУММА(Данные.ОстатокРегл)        КАК ОстатокРегл,
	|	СУММА(Данные.ОстатокПоКурсу)     КАК ОстатокПоКурсу,
	|	СУММА(Данные.АбсолютнаяРазница)  КАК АбсолютнаяРазница,
	|	СУММА(Данные.КурсоваяРазница)    КАК КурсоваяРазница,
	|	
	|	СУММА(Данные.ОстатокПоКурсуУУ)    КАК ОстатокПоКурсуУУ,
	|	СУММА(Данные.АбсолютнаяРазницаУУ) КАК АбсолютнаяРазницаУУ,
	|	СУММА(Данные.КурсоваяРазницаУУ)   КАК КурсоваяРазницаУУ
	|ПОМЕСТИТЬ ДанныеДляПереоценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Счет,
	|		Остатки.Организация,
	|		Остатки.Подразделение,
	|		Остатки.НаправлениеДеятельности,
	|		Остатки.Субконто1,
	|		Остатки.Субконто2,
	|		Остатки.Субконто3,
	|		Остатки.Валюта,
	|		Остатки.ВалютнаяСуммаОстаток КАК ОстатокВалюты,
	|		
	|		Остатки.СуммаБУОстаток КАК ОстатокРегл,
	|		Остатки.ВалютнаяСуммаОстаток * Курсы.Курс / Курсы.Кратность КАК ОстатокПоКурсу,
	|		Остатки.ВалютнаяСуммаОстаток * Курсы.Курс / Курсы.Кратность - Остатки.СуммаБУОстаток КАК АбсолютнаяРазница,
	|		ВЫРАЗИТЬ(Остатки.ВалютнаяСуммаОстаток * Курсы.Курс / Курсы.Кратность КАК ЧИСЛО(31,2)) - Остатки.СуммаБУОстаток КАК КурсоваяРазница,
	|		
	|		0 КАК ОстатокПоКурсуУУ,
	|		0 КАК АбсолютнаяРазницаУУ,
	|		0 КАК КурсоваяРазницаУУ
	|	
	|	ИЗ
	|		ВтОстатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсы КАК Курсы
	|			ПО Остатки.Валюта = Курсы.Валюта
	|	ГДЕ
	|		НЕ Остатки.Счет.ИсключитьСуммуБУИзПереоценкиПоПлануСчетов
	|		И ВЫРАЗИТЬ(Остатки.ВалютнаяСуммаОстаток * Курсы.Курс / Курсы.Кратность КАК ЧИСЛО(31,2)) <> Остатки.СуммаБУОстаток
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Остатки.Счет,
	|		Остатки.Организация,
	|		Остатки.Подразделение,
	|		Остатки.НаправлениеДеятельности,
	|		Остатки.Субконто1,
	|		Остатки.Субконто2,
	|		Остатки.Субконто3,
	|		Остатки.Валюта,
	|		Остатки.ВалютнаяСуммаОстаток КАК ОстатокВалюты,
	|		
	|		0 КАК ОстатокРегл,
	|		0 КАК ОстатокПоКурсу,
	|		0 КАК АбсолютнаяРазница,
	|		0 КАК КурсоваяРазница,
	|		
	|		Остатки.ВалютнаяСуммаОстаток * Курсы.Курс / Курсы.Кратность / КурсУУ.Курс * КурсУУ.Кратность КАК ОстатокПоКурсуУУ,
	|		Остатки.ВалютнаяСуммаОстаток * Курсы.Курс / Курсы.Кратность / КурсУУ.Курс * КурсУУ.Кратность - Остатки.СуммаУУОстаток КАК АбсолютнаяРазницаУУ,
	|		ВЫРАЗИТЬ(Остатки.ВалютнаяСуммаОстаток * Курсы.Курс / Курсы.Кратность / КурсУУ.Курс * КурсУУ.Кратность КАК ЧИСЛО(31,2)) - Остатки.СуммаУУОстаток КАК КурсоваяРазницаУУ
	|	
	|	ИЗ
	|		ВтОстатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсы КАК Курсы
	|			ПО Остатки.Валюта = Курсы.Валюта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсУУ КАК КурсУУ
	|			ПО ИСТИНА
	|	ГДЕ
	|		&ВестиУУНаПланеСчетов
	|		И НЕ Остатки.Счет.ИсключитьСуммуУУИзПереоценкиПоПлануСчетов
	|		И ВЫРАЗИТЬ(Остатки.ВалютнаяСуммаОстаток * Курсы.Курс / Курсы.Кратность / КурсУУ.Курс * КурсУУ.Кратность КАК ЧИСЛО(31,2)) <> Остатки.СуммаУУОстаток
	|	) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Счет,
	|	Данные.Организация,
	|	Данные.Подразделение,
	|	Данные.НаправлениеДеятельности,
	|	Данные.Субконто1,
	|	Данные.Субконто2,
	|	Данные.Субконто3,
	|	Данные.Валюта,
	|	Данные.ОстатокВалюты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация
	|ИЗ
	|	ДанныеДляПереоценки КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По организации ""%1"" не выполнен расчет курсовых разниц.';
					|en = 'Exchange rate difference is not calculated for the ""%1"" company.'"),
				Выборка.Организация));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Выполнить_РасчетКурсовыхРазниц(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперация(ПараметрыОбработчика, ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеФинансовогоРезультата

// Обработчики этапа.

Процедура Использование_ФормированиеФинансовогоРезультата(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Организация,
	|	Таб.ОбособленноеПодразделение,
	|	Таб.ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ (
	// Получим организации без обособленных подразделений и обособленные подразделения
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(ОбособленныеПодразделения.Ссылка, ДД.Ссылка) КАК Организация,
	|		ЕСТЬNULL(ОбособленныеПодразделения.ОбособленноеПодразделение, ЛОЖЬ) КАК ОбособленноеПодразделение,
	|		ЕСТЬNULL(ОбособленныеПодразделения.ГоловнаяОрганизация, ДД.Ссылка) КАК ГоловнаяОрганизация
	|	ИЗ
	|		Справочник.Организации КАК ДД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
	|		ПО ДД.Ссылка = ОбособленныеПодразделения.ГоловнаяОрганизация
	|			И ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ГДЕ
	|		НЕ ДД.ОбособленноеПодразделение
	|		И (ДД.Ссылка В (&МассивОрганизаций)
	|			ИЛИ ЕСТЬNULL(ОбособленныеПодразделения.Ссылка, ДД.Ссылка) В (&МассивОрганизаций)
	|		) И ДД.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Добавим ссылки на сами головные организации
	|	ВЫБРАТЬ
	|		ДД.Ссылка КАК Организация,
	|		ЛОЖЬ КАК ОбособленноеПодразделение,
	|		ДД.Ссылка КАК ГоловнаяОрганизация
	|	ИЗ
	|		Справочник.Организации КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
	|		ПО ДД.Ссылка = ОбособленныеПодразделения.ГоловнаяОрганизация
	|	ГДЕ
	|		НЕ ДД.ОбособленноеПодразделение
	|		И ОбособленныеПодразделения.ОбособленноеПодразделение
	|		И ДД.Ссылка В (&МассивОрганизаций)
	|		И ДД.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	) КАК Таб
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ 
	|	Т.Организация
	|ИЗ
	|	ВТОрганизации КАК Т
	|ГДЕ
	|	НЕ Т.Организация В (&МассивОрганизаций)
	|	ИЛИ НЕ Т.ОбособленноеПодразделение";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	
	Запрос.УстановитьПараметр("ПроверятьОстатки90хСчетов", НЕ РезультатЗапроса.Пустой());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Организация КАК Ссылка
	|ПОМЕСТИТЬ ОрганизацииСОборотами
	|ИЗ (
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация
	|	ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода,
	|		 &КонецПериода,
	|		 ,
	|		 ,
	|		 ,
	|		&ПроверятьОстатки90хСчетов И НЕ &ЭтоКонецГода
	|			И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ ВТОрганизации КАК Т ГДЕ НЕ Т.ОбособленноеПодразделение)
	|		 ) КАК ХозрасчетныйОбороты
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация
	|	ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД),
	|		 КОНЕЦПЕРИОДА(&КонецПериода, ГОД),
	|		 ,
	|		 ,
	|		 ,
	|		&ЭтоКонецГода
	|			И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ ВТОрганизации КАК Т)
	|		 ) КАК ХозрасчетныйОбороты
	|	) КАК Таб
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация КАК Ссылка
	|ПОМЕСТИТЬ НеОбособленныеПодразделенияСОборотами
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрганизацииСОборотами КАК ОрганизацииСОборотами
	|		ПО Организации.Организация = ОрганизацииСОборотами.Ссылка
	|ГДЕ
	|	НЕ Организации.ОбособленноеПодразделение
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ПОМЕСТИТЬ ОрганизацииОСНОСОборотами
	|ИЗ
	|	ОрганизацииСОборотами КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|				&КонецПериода, 
	|				Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ ВТОрганизации КАК Т)) КАК УчетныеПолитики
	|	ПО
	|		Организации.Ссылка = УчетныеПолитики.Организация
	|ГДЕ
	|	УчетныеПолитики.УчетнаяПолитика.СистемаНалогообложения ЕСТЬ NULL
	|	ИЛИ УчетныеПолитики.УчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Проводки.Организация КАК Организация,
	|	Проводки.СуммаОстаток КАК Сумма90,
	|	0 КАК Сумма91
	|ПОМЕСТИТЬ ВТОстаткиПоСчетам90и91
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи)),
	|			,
	|			&ПроверятьОстатки90хСчетов И Организация В (ВЫБРАТЬ Т.Организация ИЗ ВТОрганизации КАК Т)) КАК Проводки
	|ГДЕ
	|	(Проводки.СуммаОстаток <> 0
	|			ИЛИ Проводки.СуммаНУОстаток <> 0
	|			ИЛИ Проводки.СуммаПРОстаток <> 0
	|			ИЛИ Проводки.СуммаВРОстаток <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проводки.Организация,
	|	0,
	|	Проводки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)),
	|			,
	|			&ПроверятьОстатки90хСчетов И Организация В (ВЫБРАТЬ Т.Организация ИЗ ВТОрганизации КАК Т)) КАК Проводки
	|ГДЕ
	|	(Проводки.СуммаОстаток <> 0
	|			ИЛИ Проводки.СуммаНУОстаток <> 0
	|			ИЛИ Проводки.СуммаПРОстаток <> 0
	|			ИЛИ Проводки.СуммаВРОстаток <> 0)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Организации.ГоловнаяОрганизация КАК Ссылка,
	|	СУММА(ВТОстаткиПоСчетам90и91.Сумма90) КАК Сумма90,
	|	СУММА(ВТОстаткиПоСчетам90и91.Сумма91) КАК Сумма91
	|ПОМЕСТИТЬ ОрганизацииСОстатками90еСчета
	|ИЗ
	|	ВТОстаткиПоСчетам90и91 КАК ВТОстаткиПоСчетам90и91
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ВТОстаткиПоСчетам90и91.Организация = Организации.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.ГоловнаяОрганизация
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВТОстаткиПоСчетам90и91.Сумма90) <> 0
	|		ИЛИ СУММА(ВТОстаткиПоСчетам90и91.Сумма91) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ОрганизацииСОстаткамиПоКурсовымРазницам
	|ИЗ (
	|	ВЫБРАТЬ
	|		Остатки.Счет,
	|		Остатки.Организация,
	|		Остатки.Валюта,
	|		Остатки.Подразделение,
	|		Остатки.НаправлениеДеятельности,
	|		Остатки.Субконто1,
	|		Остатки.Субконто2,
	|		Остатки.Субконто3,
	|		Остатки.ВалютнаяСуммаОстаток КАК ОстатокВалюты,
	|		Остатки.СуммаОстаток КАК ОстатокРегл,
	|		Остатки.СуммаУУОстаток КАК ОстатокУпр,
	|		Остатки.СуммаФООстаток КАК ОстатокФО
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			НЕ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбытки))
	|			И НЕ Счет.Забалансовый,
	|			,
	|			Организация В (ВЫБРАТЬ Т.Организация ИЗ ВТОрганизации КАК Т)) КАК Остатки
	|	ГДЕ
	|		&УчетВВалютеФО
	|		И (ВЫРАЗИТЬ(&КоэффициентПересчета
	|			* ВЫБОР КОГДА &СуммаУУ ТОГДА Остатки.СуммаУУОстаток ИНАЧЕ Остатки.СуммаОстаток КОНЕЦ
	|		   КАК ЧИСЛО(31,2))) <> Остатки.СуммаФООстаток
	|	) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ОрганизацииОСНОСОборотамиУбыткиПрошлыхЛет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			НАЧАЛОПЕРИОДА(&КонецПериода, ГОД),
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбыткиПрошлыхЛет)),
	|			,
	|			Организация В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ОрганизацииОСНОСОборотами КАК Т)) КАК Т
	|ГДЕ
	|	Т.СуммаНУОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	| ВЫБРАТЬ
	|	T.Организация КАК Организация
	|ПОМЕСТИТЬ НеПеренесенУбыток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД),
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ОрганизацииОСНОСОборотами КАК Т)
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Перечисление.ВидыАктивовИОбязательств)) = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК T
	|;
	|////////////////////////////////////////////////////////////////////////////////
	| ВЫБРАТЬ
	|	T.Организация КАК Организация
	|ПОМЕСТИТЬ НеПеренесенУбытокКонецГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			&ЭтоКонецГода И Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ОрганизацииОСНОСОборотами КАК Т)
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Перечисление.ВидыАктивовИОбязательств)) = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК T
	|;
	|////////////////////////////////////////////////////////////////////////////////
	| ВЫБРАТЬ
	|	T.Организация КАК Организация
	|ПОМЕСТИТЬ УбыткиСрок10Лет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбыткиПрошлыхЛет),
	|			,
	|			Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ОрганизацииОСНОСОборотами КАК Т)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.УбыткиПрошлыхЛет).ДатаОкончанияСписания <= НАЧАЛОПЕРИОДА(&КонецПериода,ДЕНЬ)) КАК T
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	ОрганизацииСОстатками90еСчета КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	ОрганизацииСОстаткамиПоКурсовымРазницам КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияФормированиеФинансовогоРезультата.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияФормированиеФинансовогоРезультата
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрганизацииОСНОСОборотами КАК Т
	|		ПО ЗаданияФормированиеФинансовогоРезультата.Организация = Т.Ссылка
	|ГДЕ
	|	ЗаданияФормированиеФинансовогоРезультата.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата)
	|		И НАЧАЛОПЕРИОДА(ЗаданияФормированиеФинансовогоРезультата.Месяц, МЕСЯЦ) <= &НачалоПериода
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	УчетВВалютеФО = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	Запрос.УстановитьПараметр("УчетВВалютеФО", УчетВВалютеФО);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Получить() = Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.УУ Тогда
		ТекущаяВалюта = Константы.ВалютаУправленческогоУчета.Получить();
		Запрос.УстановитьПараметр("СуммаУУ", Истина);
	Иначе
		ТекущаяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Запрос.УстановитьПараметр("СуммаУУ", Ложь);
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	КоэффициентПересчетаВалютыФО = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		Константы.ВалютаФинОтчетности.Получить(),
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КоэффициентПересчета", Окр(КоэффициентПересчетаВалютыФО, 3));
	
	ЭтоКонецГода = (Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) = 12);
	Запрос.УстановитьПараметр("ЭтоКонецГода", ЭтоКонецГода);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПредставлениеПериода = ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОрганизацииСОборотами = 0
	 И РазмерыВременныхТаблиц.ОрганизацииСОстатками90еСчета = 0
	 И РазмерыВременныхТаблиц.ОрганизацииСОстаткамиПоКурсовымРазницам = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нет организаций с оборотами по регистру бухгалтерского учета за период %1';
					|en = 'No companies with turnovers for the bookkeeping register for period %1'"),
				ПредставлениеПериода));
		Возврат;
		
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата,
		"НеОбособленныеПодразделенияСОборотами",
		Ложь);
		
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет,
		"ОрганизацииОСНОСОборотамиУбыткиПрошлыхЛет",
		Ложь);
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль,
		"ОрганизацииОСНОСОборотами",
		Ложь);
	
	Если УчетВВалютеФО Тогда
		ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(
			ПараметрыОбработчика,
			Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности,
			"ОрганизацииСОстаткамиПоКурсовымРазницам",
			Ложь);
	КонецЕсли;
	
	Если ЭтоКонецГода Тогда
		ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(
			ПараметрыОбработчика,
			Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода,
			"ОрганизацииСОборотами",
			Ложь);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Получить(10).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В организации ""%1"" на конец периода %2 есть суммовые остатки по 90м счетам.';
					|en = 'There is amount balance of 90m accounts in the ""%1"" company as of the end of the period %2.'"),
				Выборка.Организация,
				ПредставлениеПериода));
		
	КонецЦикла;
			
	Выборка = РезультатЗапроса.Получить(11).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В организации ""%1"" на конец периода %2 есть суммовые остатки по курсовым разницам.';
					|en = 'There is amount balance of exchange rate differences for the %1 company as of the end of the period %2.'"),
				Выборка.Организация,
				ПредставлениеПериода));
		
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Получить(12).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В организации ""%1"" за период %2 необходимо выполнить регламентную операцию формирование финансового результата.';
					|en = 'Perform the period-end operation of financial result generation for period %2 in the ""%1"" company.'"),
				Выборка.Организация,
				ПредставлениеПериода));

		
	КонецЦикла;
	
	ТаблицаНеПеренесенУбыток = Запрос.МенеджерВременныхТаблиц.Таблицы["НеПеренесенУбыток"].ПолучитьДанные().Выгрузить();
	
	Для Каждого СтрокаОрганизации Из ТаблицаНеПеренесенУбыток Цикл
		
		НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, СтрокаОрганизации.Организация);
		Если НачалоГода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) <> НачалоНалоговогоПериода Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не выполнен перенос убытка прошлого года по НУ в организации ""%1"". Выполните операцию ""Закрытие года"" в %2 или перенесите убыток вручную.';
					|en = 'Loss of the previous year by TA is not transferred in the ""%1"" company. Execute the ""Year-end closing"" operation in %2 or transfer the loss manually.'"),
				СтрокаОрганизации.Организация, "декабре " + Формат(Год(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)-1,"ЧГ=0")));
	КонецЦикла;
	
	ТаблицаНеПеренесенУбытокКонецГода = Запрос.МенеджерВременныхТаблиц.Таблицы["НеПеренесенУбытокКонецГода"].ПолучитьДанные().Выгрузить();
	
	Для Каждого СтрокаОрганизации Из ТаблицаНеПеренесенУбытокКонецГода Цикл
		
		НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, СтрокаОрганизации.Организация);
		Если НачалоГода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) <> НачалоНалоговогоПериода Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не выполнен перенос убытка текущего года по НУ на будущее в организации ""%1"". Необходимо выполнить регламентную операцию ""Закрытие года"".';
					|en = 'Loss of the current year by TA is not transferred to the future in the ""%1"" company. Execute the ""Year-end closing"" period-end operation.'"),
				СтрокаОрганизации.Организация));
	КонецЦикла;
	
	ТаблицаУбыткиСрок10Лет = Запрос.МенеджерВременныхТаблиц.Таблицы["УбыткиСрок10Лет"].ПолучитьДанные().Выгрузить();
	
	Для Каждого СтрокаОрганизации Из ТаблицаУбыткиСрок10Лет Цикл
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В организации ""%1"" обнаружены убытки прошлых лет по НУ, по которым истек срок списания - 10 лет. Для списания убытков воспользуйтесь ручной операцией.';
					|en = 'Losses of previous years by TA were detected in the ""%1""  company by which write-off period (10 years) has expired. To write off losses, use a manual operation.'"),
				СтрокаОрганизации.Организация)
				,
				,
				,Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);
	КонецЦикла;
	
КонецПроцедуры

Процедура Выполнить_ФормированиеФинансовогоРезультата(ПараметрыОбработчика) Экспорт
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Ложь);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

//++ НЕ УТ
#Область Группа_УчетПоУСН

#Область ПризнаниеРасходовПриУСН

// Обработчики этапа.

Процедура Использование_ПризнаниеРасходовПриУСН(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	ПроверитьИспользованиеУСНДоходыМинусРасходы(ПараметрыОбработчика);
	
	ДобавитьПояснениеПоНалоговомуПериоду(ПараметрыОбработчика, "ВТОрганизации");
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина, "ВТОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика,, "ВТОрганизации");
	
КонецПроцедуры

Процедура Выполнить_ПризнаниеРасходовПриУСН(ПараметрыОбработчика) Экспорт
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СторноДоходовКУДиР

// Обработчики этапа.

Процедура Использование_СторноДоходовКУДиР(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	ПроверитьИспользованиеУСН(ПараметрыОбработчика);
	
	ДобавитьПояснениеПоНалоговомуПериоду(ПараметрыОбработчика, "ВТОрганизации");
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина, "ВТОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчетаУСН = Новый Структура("НачДата, КонДата, МассивОрганизаций",
		ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций.Количество());
	
	Если НЕ УчетУСНСервер.ТребуетсяСторноДоходовКУДиР(ПараметрыРасчетаУСН) Тогда
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет доходов для сторнирования.';
				|en = 'No income to reverse.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_СторноДоходовКУДиР(ПараметрыОбработчика) Экспорт
	
	НомерЗадания  = ТекущийНомерЗадания();
	НачалоРасчета = НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
		НомерЗадания,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	Пока НачалоРасчета <= ПараметрыОбработчика.ПараметрыРасчета.КонецПериода Цикл
		
		Для Каждого ТекущаяОрганизация Из ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций Цикл
			
			ПараметрыРасчетаУСН = Новый Структура("НачДата, КонДата, Организация",
				НачалоМесяца(НачалоРасчета),
				КонецМесяца(НачалоРасчета),
				ТекущаяОрганизация);
			
			УчетУСНСервер.СторноДоходовКУДиР(ПараметрыРасчетаУСН);
			
		КонецЦикла;
		
		НачалоРасчета = ДобавитьМесяц(НачалоРасчета, 1);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетНалогаУСН

// Обработчики этапа.

Процедура Использование_РасчетНалогаУСН(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	ПроверитьИспользованиеУСН(ПараметрыОбработчика);
	
	ДобавитьПояснениеПоНалоговомуПериоду(ПараметрыОбработчика, "ВТОрганизации");
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	МесяцРасчета = Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	Если МесяцРасчета % 3 <> 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Расчет налога выполняется в последнем месяце квартала.';
				|en = 'Tax is calculated in the last month of the quarter.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина, "ВТОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика,, "ВТОрганизации");
	
КонецПроцедуры

Процедура Выполнить_РасчетНалогаУСН(ПараметрыОбработчика) Экспорт
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- НЕ УТ

//++ НЕ УТКА
#Область Группа_МеждународныйУчет

#Область ОтражениеДокументовВМеждународномУчете

// Обработчики этапа.

Процедура Использование_ОтражениеДокументовВМеждународномУчете(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымОперативного")
	 И НЕ ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Формирование проводок по данным оперативного и регламентированного учета не используется.';
				|en = 'Posting generation for real-time and compliance accounting data is not used.'"));
	КонецЕсли;
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийМУСрезПоследних.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета.СрезПоследних(
	|			&КонецПериода,
	|			Организация В (&МассивОрганизаций)) КАК УчетнаяПолитикаОрганизацийМУСрезПоследних";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет организаций с учетной политикой международного учета.';
				|en = 'No companies with accounting policy of international accounting.'"));
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументов.Регистратор КАК Регистратор,
	|	ОтражениеДокументов.Статус КАК Статус
	|ПОМЕСТИТЬ ОтражениеДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ОтражениеДокументов.Организация = Организации.Ссылка
	|ГДЕ
	|	ОтражениеДокументов.ДатаОтражения <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете),
	|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВРучную))
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КоличествоДанных = РазмерВременнойТаблицы(Запрос, "ОтражениеДокументов", ПараметрыОбработчика);
	
	ЕстьОжидающиеОтражения = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете = НЕ МассивРезультатов[2].Пустой();
	
	Если ЕстьОжидающиеОтражения Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидает отражения в учете документов: %1';
					|en = 'Documents awaiting recording in accounting: %1'"),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если ЕстьНеОтраженныеВУчете Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не отражено в учете документов из-за отсутствия правил отражения: %1';
					|en = 'Not recorded in document accounting since there are no recording rules: %1'"),
				СокрЛП(МассивРезультатов[2].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ОтражениеДокументовВМеждународномУчете(ПараметрыОбработчика) Экспорт
	
	МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКурсовыхРазницВФункциональнойВалюте

// Обработчики этапа.

Процедура Использование_РасчетКурсовыхРазницВФункциональнойВалюте(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеУчетнойПолитикиМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоНеЗакрыто = Документы.РегламентнаяОперацияМеждународныйУчет.НезакрытыеКурсовыеРазницы(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
		Истина);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ВсегоНеЗакрыто);
	
	Если ВсегоНеЗакрыто = 0 Тогда
		
		ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперацияМУ(ПараметрыОбработчика);
		
	Иначе
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Есть незакрытые курсовые разницы для расчета.';
				|en = 'There are unclosed exchange rate differences for calculation.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_РасчетКурсовыхРазницВФункциональнойВалюте(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область ЗакрытиеСчетовУчетаДоходовИРасходовМУ

// Обработчики этапа.

Процедура Использование_ЗакрытиеСчетовУчетаДоходовИРасходовМУ(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеУчетнойПолитикиМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоНеЗакрыто = Документы.РегламентнаяОперацияМеждународныйУчет.ЕстьНезакрытыеСчетаУчетаДоходовРасходов(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ВсегоНеЗакрыто);
	
	Если ВсегоНеЗакрыто = 0 Тогда
		
		ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперацияМУ(ПараметрыОбработчика,,, Истина);
		
	Иначе
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Есть незакрытые счета учета.';
				|en = 'There are unclosed GL accounts.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ЗакрытиеСчетовУчетаДоходовИРасходовМУ(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКурсовыхРазницВВалютеПредставления

// Обработчики этапа.

Процедура Использование_РасчетКурсовыхРазницВВалютеПредставления(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеУчетнойПолитикиМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаМеждународногоУчета = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если ВалютаМеждународногоУчета.Функциональная = ВалютаМеждународногоУчета.Представления Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Функциональная валюта совпадает с валютой представления.';
				|en = 'Functional currency matches the reporting currency.'"));
		Возврат;
		
	Иначе
		
		ВсегоНеПересчитано = Документы.РегламентнаяОперацияМеждународныйУчет.НеПересчитаноВВалютуПредставления(
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
			КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
			Истина);
		
		УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ВсегоНеПересчитано);
		
		Если ВсегоНеПересчитано = 0 Тогда
			
			ВведеныРегламентныеДокументы = ПроверитьНаличиеДокументаРегламентнаяОперацияМУ(ПараметрыОбработчика);
			
		Иначе
			
			УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				НСтр("ru = 'Есть незакрытые курсовые разницы для расчета.';
					|en = 'There are unclosed exchange rate differences for calculation.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_РасчетКурсовыхРазницВВалютеПредставления(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаДатыЗапретаФормированияПроводокМУ

// Обработчики этапа.

Процедура Использование_УстановкаДатыЗапретаФормированияПроводокМУ(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаличиеУчетнойПолитикиМеждународногоУчета(ПараметрыОбработчика);
	
	Если РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_УстановкаДатыЗапретаФормированияПроводокМУ(ПараметрыОбработчика) Экспорт
	
	ДатаЗапрета = МеждународныйУчетОбщегоНазначения.ДатаЗапретаФормированияПроводок(ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	ПараметрыОбработчика.ДанныеЭтапа.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Дата запрета формирования проводок %1';
			|en = 'Posting generation closing date %1'"),
		Формат(ДатаЗапрета, "ДЛФ=DD"));
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- НЕ УТКА
#КонецОбласти


#Область МетодыДляОписанияПроверокСостоянияСистемы

// Добавляет новую проверку состояния системы в таблицу проверок и заполняет ее ключевые поля.
//
// Параметры:
//	ТаблицаПроверок 			 - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации()
//	Идентификатор 				 - Строка - уникальный строковый идентификатор (код) проверки
//	КонтекстВыполнения 			 - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца (владелец), к которому относится проверка
//	УточнениеКонтекстаВыполнения - ПеречисленияСсылка.МоментЗапускаПроверкиОперацииЗакрытияМесяца - когда надо выполнять проверку
//	Обработчик 					 - Строка - полное имя экспортной процедуры-обработчика, вызываемого для выполнения проверки
//	Важность 					 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус по умолчанию для результатов выполнения проверки.
// 
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная строка таблицы проверок.
//
Функция ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, Идентификатор, КонтекстВыполнения,
			УточнениеКонтекстаВыполнения, Обработчик, Важность = Неопределено) Экспорт
	
	ОписаниеПроверки = ТаблицаПроверок.Добавить();
	
	ОписаниеПроверки.Идентификатор 				  = Идентификатор;
	ОписаниеПроверки.ИдентификаторРодителя 		 = "ГруппаПроверокЭтапаЗакрытияМесяца";
	ОписаниеПроверки.КонтекстВыполнения 		  = КонтекстВыполнения;
	ОписаниеПроверки.УточнениеКонтекстаВыполнения = УточнениеКонтекстаВыполнения;
	ОписаниеПроверки.Обработчик 				  = Обработчик;
	ОписаниеПроверки.Важность 					  =
		?(ЗначениеЗаполнено(Важность), Важность, Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Ложь;
	ОписаниеПроверки.ВозможноИзменениеВажности   = Истина;
	
	ОписаниеПроверки.ДетализацияДоОрганизации    = Истина;
	ОписаниеПроверки.ДетализацияДоПериода        = Истина;
	ОписаниеПроверки.Используется			     = Ложь;
	
	Возврат ОписаниеПроверки;
	
КонецФункции

// Заполняет текстовые поля описания проверки состояния системы.
//
// Параметры:
//	ОписаниеПроверки - СтрокаТаблицыЗначений - строка таблицы проверок, добавленная в ДобавитьОписаниеНовойПроверки()
//	Наименование 	 - Строка - пользовательское представление проверки
//	Комментарий 	 - Строка - подробное описание проверки.
//
Процедура ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, Наименование, Комментарий = "") Экспорт
	
	ОписаниеПроверки.Наименование = Наименование;
	ОписаниеПроверки.Комментарий  = Комментарий;
	
КонецПроцедуры

// Возвращает имя формы для вывода результатов выполнения указанной проверки.
// По умолчанию результаты всех проверок отображаются с использованием формы Обработки.ОперацииЗакрытияМесяца.Формы.РезультатыПроверки
// Если при выводе результатов надо предусмотреть нестандартное поведение, то в этой функции надо указать имя своей,
// особой формы.
//
// Параметры:
//	Проверка - СправочникСсылка.ПроверкиСостоянияСистемы - проверка состояния системы.
//
// Возвращаемое значение:
//	Строка, Неопределено - переопределенное имя формы для проверки; если форма не переопределяется, то возвращается Неопределено.
//
Функция ИмяФормыРасшифровкиРезультатовПроверки(Проверка) Экспорт
	
	ИмяФормы = Неопределено;
	
	// Для проверки можно переопределить открываемую по умолчанию форму.
	
	Возврат ИмяФормы;
	
КонецФункции

#КонецОбласти

#Область МетодыДляОписанияЭтапов

// Добавляет строку в таблицу этапов.
//
// Параметр:
//	ТаблицаЭтапов - Таблица значений - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов()
//	Родитель - Строка - идентификатор группы, в которую входит данный этап, см. функции вида ИдентификаторГруппы...()
//	Код - ПеречислениеСсылка.ОперацииЗакрытияМесяца - добавляемый этап закрытия месяца
//	ОперативныйУчет - Булево - признак принадлежности этапа к оперативному учету
//	РегламентированныйУчет - Булево - признак принадлежности этапа к регламентированному учету
//	МеждународныйУчет - Булево - признак принадлежности этапа к международному учету.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная строка таблицы этапов.
//
Функция ДобавитьЭтапВТаблицу(ТаблицаЭтапов, Родитель, Код, ОперативныйУчет = Истина,
			РегламентированныйУчет = Ложь, МеждународныйУчет = Ложь, ПредшествующийЭтапУпорядочивание = Неопределено) Экспорт
	
	НоваяСтрока = ТаблицаЭтапов.Добавить();
	
	НоваяСтрока.Родитель 		  		= Родитель;
	НоваяСтрока.Код 			  		= Код;
	НоваяСтрока.ОперативныйУчет 		= ОперативныйУчет;
	НоваяСтрока.РегламентированныйУчет  = РегламентированныйУчет;
	НоваяСтрока.МеждународныйУчет 		= МеждународныйУчет;
	
	Возврат НоваяСтрока;
	
КонецФункции

#Область ОписанияВозможныхДействийЭтапов

// Описание шаблонов обработчиков событий этапа закрытия месяца.
// Используются для свойств "Действие..." этапа закрытия месяца.

// Описание действия "Выполнить указанную произвольную процедуру".
//
// Параметры:
//	Обработчик - Строка - полный путь к экспортной процедуре обработчика действия.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_СервернаяПроцедура(Обработчик) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьСервернуюПроцедуру;
	Описание.Обработчик  = Обработчик;
	Описание.НаСервере   = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть справку объекта".
//
// Параметры:
//	ОбъектМетаданных - Строка - полное имя объекта метаданных, справку которого надо открыть
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьСправкуОбъекта(ОбъектМетаданных) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия 		  = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьСправкуОбъекта;
	Описание.ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Описание.НаКлиенте   		  = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Выполнить расчет этапа".
//
// Параметры:
//	Обработчик - Строка - полный путь к экспортной процедуре обработчика действия.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ВыполнитьРасчет(Обработчик) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьРасчет;
	Описание.Обработчик  = Обработчик;
	Описание.НаСервере   = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть результаты проверки указанного этапа".
//
// Параметры:
//	Проверка 		   - СправочникСсылка.ПроверкиСостоянияСистемы - проверка состояния системы; если не указана, то отображаются результаты всех проверок
//	Проблема 		   - УникальныйИдентификатор - проблема, найденная проверкой; если не указана, то отображаются все проблемы
//	КонтекстВыполнения - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца (владелец), к которому относится проверки.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьРезультатыПроверки(Проверка = Неопределено, Проблема = Неопределено, КонтекстВыполнения = Неопределено) Экспорт
	Перем ИмяФормы;
	
	Описание = СтруктураОписанияДействия();
	
	Если ЗначениеЗаполнено(Проверка) Тогда
		ИмяФормы = ИмяФормыРасшифровкиРезультатовПроверки(Проверка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
		ИмяФормы = Метаданные.Обработки.ОперацииЗакрытияМесяца.Формы.РезультатыПроверки.ПолноеИмя();
	КонецЕсли;
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьРезультатыПроверки;
	Описание.ИмяФормы    = ИмяФормы;
	Описание.НаКлиенте   = Истина;
	
	Описание.ПараметрыФормы.Вставить("Проверка", 		   Проверка);
	Описание.ПараметрыФормы.Вставить("Проблема", 		   ОбщегоНазначенияУТКлиентСервер.Массив(Проблема));
	Описание.ПараметрыФормы.Вставить("КонтекстВыполнения", КонтекстВыполнения);
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть произвольную форму".
//
// Параметры:
//	ИмяФормы 				 - Строка - имя открываемой формы 
//	ПараметрыВСтруктуреОтбор - Булево - признак того, что параметры открываемой формы надо передать внутри параметра Отбор с типом Структура.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьФорму(ИмяФормы, ПараметрыВСтруктуреОтбор = Ложь) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьФорму;
	Описание.ИмяФормы    = ИмяФормы;
	Описание.НаКлиенте   = Истина;
	
	ПоляПараметровФормы = "Организация, МассивОрганизаций, ПериодРегистрации, Период, НачалоПериода, КонецПериода, ДатаОкончанияПериода";
	Если ПараметрыВСтруктуреОтбор Тогда
		Описание.ПараметрыФормы.Вставить("Отбор", Новый Структура(ПоляПараметровФормы));
	Иначе
		Описание.Вставить("ПараметрыФормы", Новый Структура(ПоляПараметровФормы));
	КонецЕсли;
	
	Описание.ПараметрыФормы.Вставить(ЗакрытиеМесяцаСервер.ИмяСлужебногоСвойстваОткрываемыхФорм(), Истина);
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Показать ошибки указанного этапа в журнале регистрации".
//
// Параметры:
//	РассчитываемыйЭтап - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьЖурналРегистрации(РассчитываемыйЭтап) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации;
	Описание.ИмяФормы    = Метаданные.Обработки.ЖурналРегистрации.Формы.ЖурналРегистрации.ПолноеИмя();
	Описание.НаКлиенте   = Истина;
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	СобытияЖурнала = Новый Массив;
	СобытияЖурнала.Добавить(ИмяСобытияЖурналаРегистрации(ОбщегоНазначения.ИмяЗначенияПеречисления(РассчитываемыйЭтап)));
	
	Описание.ПараметрыФормы.Вставить("ДатаНачала");
	Описание.ПараметрыФормы.Вставить("ДатаОкончания");
	Описание.ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	Описание.ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", СобытияЖурнала);
	
	Возврат Описание;
	
КонецФункции

//++ НЕ УТ

// Описание действия "Открыть форму списка документов ""Регламентная операция""".
// Отбор по типам операций берется из свойства ТипыРегламентныхОпераций описания этапа закрытия месяца.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация() Экспорт
	
	Описание = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РегламентнаяОперация.Формы.ФормаСписка.ПолноеИмя(),
		Истина);
	
	Возврат Описание;
	
КонецФункции
//-- НЕ УТ

//++ НЕ УТКА

// Описание действия "Открыть форму списка документов ""Регламентная операция (международный учет)""".
// Отбор по типам операций берется из свойства ТипыРегламентныхОпераций описания этапа закрытия месяца.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ() Экспорт
	
	Описание = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РегламентнаяОперацияМеждународныйУчет.Формы.ФормаСписка.ПолноеИмя(),
		Истина);
	
	Возврат Описание;
	
КонецФункции
//-- НЕ УТКА
#КонецОбласти

#КонецОбласти


#Область МетодыДляПроверкиСостоянияЭтаповИВыполненияЭтапов

#Область РаботаСЗапросами

// Устанавливает общие параметры и менеджер временных таблиц для запросов, используемых в механизме закрытия месяца.
//
// Параметры:
//	Запрос 									- Запрос - используемый запрос
//	ПараметрыОбработчикаИлиПараметрыРасчета - Структура - параметры обработчика события этапа или параметры расчета этапа.
//
// Возвращаемое значение:
//	Булево - признак того, что в параметре обработчика был передан менеджер временных таблиц;
//		если менеджер не был передан, то он буден добавлен в параметры обработчика для его использования в следующих обработчиках.
//
Функция ИнициализироватьЗапрос(Запрос, ПараметрыОбработчикаИлиПараметрыРасчета) Экспорт
	
	ЭтоПараметрыОбработчика = ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("ПараметрыРасчета");
	
	Если ЭтоПараметрыОбработчика Тогда
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета.ПараметрыРасчета;
	Иначе
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета;
	КонецЕсли;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	// Общие параметры запроса.
	Запрос.УстановитьПараметр("НачалоПериода",				  	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",				  	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПредыдущегоПериода",	  	НачалоМесяца(НачалоПериода - 1));
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода",	  	НачалоПериода - 1);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода",	  	КонецПериода + 1);
	
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",		  	Новый Граница(НачалоПериода, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ГраницаКонецПериода",		  	Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода",	Новый Граница(НачалоПериода - 1, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("МассивОрганизаций",			  	ПараметрыРасчета.МассивОрганизаций);
	
	// Параметры-значения функциональных опций.
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	Запрос.УстановитьПараметр("ПартионныйУчетНеИспользуется",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоПериода));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии21",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоПериода));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаПереходаНаПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	
	//++ НЕ УТ
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_2", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2"));
	//-- НЕ УТ
	
	// Менеджер временных таблиц.
	ДанныеИнициализированы = ЭтоПараметрыОбработчика И ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("МенеджерВременныхТаблиц");
	
	Если ДанныеИнициализированы Тогда
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыОбработчикаИлиПараметрыРасчета.МенеджерВременныхТаблиц;
		
	ИначеЕсли ЭтоПараметрыОбработчика Тогда
		
		ПараметрыОбработчикаИлиПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыОбработчикаИлиПараметрыРасчета.МенеджерВременныхТаблиц;
		
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	КонецЕсли;
	
	Возврат ДанныеИнициализированы;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеПроверки

// Проверяет наличие заданий в регистре сведений вида "ЗаданияК...".
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ВыполнятьССамогоРаннего 	- Булево - признак того, что пересчет должен выполняться с самого первого задания до рассчитываемого периода
//									если Ложь, то анализируется только наличие заданий в рассчитываемом периоде
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора регистра заданий по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//									если таблица не указана, то отбираются все организации из свойства МассивОрганизаций
//	ИмяРегистраЗаданий 			- Строка - имя регистра сведений с заданиями к пересчету
//									если регистра не указан, то выбираются данные регистра ЗаданияКЗакрытиюМесяца.
//	ДействиеПодробнее 	 		- Строка - см. функции вида "ОписаниеДействия_..."
//	
// Возвращаемое значение:
//	Булево - признак наличия записей регистра.
//
Функция ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, ВыполнятьССамогоРаннего,
			ИмяТаблицыОтбораОрганизаций = "", ИмяРегистраЗаданий = "", ДействиеПодробнее = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ПОМЕСТИТЬ ВТОрганизацииСЗаданиямиКЗакрытиюМесяца
	|ИЗ
	|	РегистрСведений.%1 КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %3 КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &НачалоПериода
	|	%2
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Задания.Месяц), НЕОПРЕДЕЛЕНО) КАК Месяц
	|ИЗ
	|	ВТОрганизацииСЗаданиямиКЗакрытиюМесяца КАК Задания";
	
	Если НЕ ЗначениеЗаполнено(ИмяРегистраЗаданий) Тогда
		
		// Проверяем регистр ЗаданияКЗакрытиюМесяца 
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			"ЗаданияКЗакрытиюМесяца",
			"И Задания.Операция = &РассчитываемыйЭтап",
			?(ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ИмяТаблицыОтбораОрганизаций, "ВТОрганизации"));
		
		Запрос.УстановитьПараметр("РассчитываемыйЭтап", ПараметрыОбработчика.ДанныеЭтапа.Код);
		
	Иначе
		
		// Проверяем указанный регистр
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			ИмяРегистраЗаданий,
			"",
			?(ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ИмяТаблицыОтбораОрганизаций, "ВТОрганизации"));
		
	КонецЕсли;
	
	Если НЕ ВыполнятьССамогоРаннего Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<=", "=")
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос,
		"ВТОрганизацииСЗаданиямиКЗакрытиюМесяца"
			+ ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	
	Если ЗначениеЗаполнено(Выборка.Месяц) Тогда
		
		ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = Выборка.Месяц;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется пересчет операции %1 %2';
					|en = 'Recalculation of the %1 %2 operation is required '"),
				?(ВыполнятьССамогоРаннего, НСтр("ru = 'начиная с периода';
												|en = 'starting from the period'"), НСтр("ru = 'за период';
																				|en = 'over period'")),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(Выборка.Месяц)),
				?(ЗначениеЗаполнено(ДействиеПодробнее),ТекстПодробнееПоУмолчанию(),""),
				ДействиеПодробнее);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие регламентного документа указанного вида.
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ИмяДокумента 				- Строка - имя регламентного документа, как оно указано в метаданных
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора документов по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//									если таблица не указана, то отбираются все организации из свойства МассивОрганизаций.
//	
// Возвращаемое значение:
//	Булево - признак наличия документов.
//
Функция ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, ИмяДокумента, ИмяТаблицыОтбораОрганизаций = "")
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	ВТОрганизации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1 КАК Т
	|		ПО Организации.Ссылка = Т.Организация
	|			И (Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (Т.Проведен)";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	
	Если РезультатЗапроса.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За период %1 нет заданий для расчета данной операции и отсутствуют документы ""%2"".';
					|en = 'No jobs for calculating this operation and no ""%2"" documents for period %1.'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				Метаданные.Документы[ИмяДокумента].Синоним));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	КонецЕсли;
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

//++ НЕ УТ

// Проверяет использование регламентированного учета в рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	ИзменятьСостояниеЭтапа - Булево - признак необходимости изменять состояние этапа при проверке.
//	
// Возвращаемое значение:
//	Булево - признак использования регламентированного учета.
//
Функция ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика, ИзменятьСостояниеЭтапа = Истина) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		
		Если ИзменятьСостояниеЭтапа Тогда
			
			УстановитьСостояниеОтключено(
				ПараметрыОбработчика,
				НСтр("ru = 'Регламентированный учет не ведется.';
					|en = 'Compliance accounting is not kept.'"));
			
		КонецЕсли;
		
		Возврат Ложь;
		
	Иначе
		
		ДатаНачалаВеденияРеглУчета = НачалоМесяца(Константы.ДатаНачалаВеденияРеглУчета.Получить());
		
		Если ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации < ДатаНачалаВеденияРеглУчета Тогда
			
			Если ИзменятьСостояниеЭтапа Тогда
				
				УстановитьСостояниеНеТребуется(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Регламентированный учет ведется начиная с периода %1';
							|en = 'Compliance accounting is kept from period %1'"),
						ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ДатаНачалаВеденияРеглУчета)));
				
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие документов "Регламентная операция".
//
// Параметры:
//	ПараметрыОбработчика 			   - Структура - параметры обработчика события этапа
//	ТипОперации 		 			   - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип операции документа
//											если не указан, то анализируется типы операций из свойства ТипыРегламентныхОпераций данного этапа
//	ИмяТаблицыОтбораОрганизаций 	   - Строка - имя временной таблицы для отбора документов по организациям
//											организации в указанной таблице должны находиться в поле с именем "Ссылка"
//											если таблица не указана, то отбираются все организации из свойства МассивОрганизаций
//	ДляЭтапаИспользуетсяРегистрЗаданий - Булево - признак того, что для данного этапа используется один из регистров "ЗаданияК...".
//	
// Возвращаемое значение:
//	Булево - признак наличия документов.
//
Функция ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика, Знач ТипОперации = Неопределено,
			ИмяТаблицыОтбораОрганизаций = "", ДляЭтапаИспользуетсяРегистрЗаданий = Истина)
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Ссылка    КАК ТипОперации,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТОперации
	|ИЗ
	|	Перечисление.ТипыРегламентныхОпераций КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ИСТИНА
	|ГДЕ
	|	Операции.Ссылка В (&ТипыОпераций)
	|	И НЕ (Организации.Ссылка ЕСТЬ NULL)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операции.ТипОперации КАК ТипОперации,
	|	Операции.Организация КАК Организация,
	|	Организации.Ссылка.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	КОЛИЧЕСТВО(РегламентнаяОперация.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	ВТОперации КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Операции.Организация)
	|			И (РегламентнаяОперация.ТипОперации = Операции.ТипОперации)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.Проведен)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Операции.Организация = Организации.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация,
	|	Организации.Ссылка.ОбособленноеПодразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	ЕстьОшибки    = Ложь;
	ЕстьДокументы = Ложь;
	Период 		  = ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	ТипыОпераций  = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
		
	Запрос.УстановитьПараметр("ТипыОпераций", ТипыОпераций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОбособленноеПодразделение
		 И НЕ Документы.РегламентнаяОперация.ОперацияИспользуетсяДляОбособленногоПодразделения(Выборка.ТипОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		// Для ПереоценкаСуммыВВалютеФинОтчетности и ЗакрытиеГода будем выводить сообщения об ошибках только если в отборе
		// присутствует искомая организация:
		Если Выборка.ОбособленноеПодразделение И Не ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации
			И ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций.Найти(Выборка.Организация) = Неопределено
			И (Выборка.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности
			ИЛИ Выборка.ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода) Тогда
				Продолжить;
		КонецЕсли;
		
		Если Выборка.КоличествоДокументов > 1 Тогда
			
			ЕстьОшибки = Истина;
			УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По организации ""%1"" за период %2 сформировано несколько документов регламентных операций ""%3"".';
						|en = 'Several documents of the ""%3"" period-end operations were generated for the ""%1"" company for period %2.'"),
					Выборка.Организация,
					Период,
					СокрЛП(Выборка.ТипОперации)));
					
			Продолжить;
			
		ИначеЕсли Выборка.КоличествоДокументов = 0 Тогда
			
			Если ДляЭтапаИспользуетсяРегистрЗаданий Тогда
				// Нет заданий к расчету и нет регламентного документа - расчет не требуется.
			Иначе
				// Есть данные для расчета (иначе эта процедура не вызывалась бы), но нет регламентного документа - расчет не выполнен.
				ЕстьОшибки = Истина;
				УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По организации ""%1"" за период %2 не сформирована регламентная операция ""%3"".';
							|en = 'The ""%3"" period-end operation was not generated for the ""%1"" company for period %2.'"),
						Выборка.Организация,
						Период,
						СокрЛП(Выборка.ТипОперации)));
			КонецЕсли;
			
		Иначе // есть один документ
			ЕстьДокументы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДляЭтапаИспользуетсяРегистрЗаданий И НЕ ЕстьОшибки И НЕ ЕстьДокументы Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За период %1 нет заданий для расчета данной операции и отсутствует документ ""Регламентная операция"".';
					|en = 'No jobs for calculating this operation and no ""Period-end operation"" document for period %1.'"),
				Период));
		
	КонецЕсли;
	
	УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос,
		"ВТОперации" + ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Проверяет использование учета по УСН хотя бы по одной из рассчитываемых организаций в рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	
// Возвращаемое значение:
//	Булево - признак использования УСН.
//
Функция ПроверитьИспользованиеУСН(ПараметрыОбработчика)
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСН, ЛОЖЬ) КАК ПрименяетсяУСН,
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(УчетныеПолитики.ПлательщикЕНВД, ЛОЖЬ) КАК ПлательщикЕНВД
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|				&КонецПериода, 
	|				Организация В (&МассивОрганизаций)) КАК УчетныеПолитики
	|	ПО
	|		ДанныеСправочника.Ссылка = УчетныеПолитики.Организация
	|ГДЕ
	|	ДанныеСправочника.Ссылка В (&МассивОрганизаций)
	|	И ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСН, ЛОЖЬ)";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не ведется учет организаций на УСН';
				|en = 'STS accounting of companies is not kept'"));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет использование учета "УСН доходы минус расходы" хотя бы по одной из рассчитываемых организаций в
// рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	
// Возвращаемое значение:
//	Булево - признак использования "УСН доходы минус расходы".
//
Функция ПроверитьИспользованиеУСНДоходыМинусРасходы(ПараметрыОбработчика)
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСН, ЛОЖЬ) КАК ПрименяетсяУСН,
	|	ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(УчетныеПолитики.ПлательщикЕНВД, ЛОЖЬ) КАК ПлательщикЕНВД
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|				&КонецПериода, 
	|				Организация В (&МассивОрганизаций)) КАК УчетныеПолитики
	|	ПО
	|		ДанныеСправочника.Ссылка = УчетныеПолитики.Организация
	|ГДЕ
	|	ДанныеСправочника.Ссылка В (&МассивОрганизаций)
	|	И ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСН, ЛОЖЬ)
	|	И ЕСТЬNULL(УчетныеПолитики.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ)";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не ведется учет организаций на УСН ""Доходы минус расходы""';
				|en = 'Accounting of companies under the ""Income minus expenses"" STS is not kept'"));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьПояснениеПоНалоговомуПериоду(ПараметрыОбработчика, ИмяТаблицыОтбораОрганизаций = "")
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	ВТОрганизации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Ссылка = Организации.Ссылка
	|ГДЕ
	|	КОНЕЦПЕРИОДА(ДанныеСправочника.ДатаРегистрации, ГОД) = КОНЕЦПЕРИОДА(ДанныеСправочника.ДатаРегистрации, МЕСЯЦ)
	|	И КОНЕЦПЕРИОДА(ДанныеСправочника.ДатаРегистрации, МЕСЯЦ) = &КонецПериода";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ОрганизацииЗарегистрированныеВДекабре = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		ТекстыСообщения = Новый Массив;
		ТекстыСообщения.Добавить(НСтр("ru = 'Сформированные данные';
										|en = 'Generated data'"));
		Если Запрос.Параметры.МассивОрганизаций.Количество() <> 1 Тогда
			ТекстОрганизаций = "";
			Если ОрганизацииЗарегистрированныеВДекабре.Количество() = 1 Тогда
				ТекстОрганизаций = НСтр("ru = 'по организации ""%1""';
										|en = 'by the ""%1"" company'");
			Иначе
				ТекстОрганизаций = НСтр("ru = 'по организациям <%1>';
										|en = 'by companies <%1>'");
			КонецЕсли;
			ТекстОрганизаций = СтрШаблон(ТекстОрганизаций, СтрСоединить(ОрганизацииЗарегистрированныеВДекабре, ", "));
			ТекстыСообщения.Добавить(ТекстОрганизаций);
		КонецЕсли;
		ТекстыСообщения.Добавить(НСтр("ru = 'включатся в отчет за следующий год.';
										|en = 'will be included in report for the next year.'"));
		ТекстыСообщения.Добавить(НСтр("ru = 'Так как книгу доходов и расходов за %Год% год формировать не нужно.';
										|en = 'As there is no need to generate the ledger of income and expenditure for %Год%.'"));
		ТекстСообщения = СтрСоединить(ТекстыСообщения, " ");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Год%", Формат(Год(Запрос.Параметры.КонецПериода), "ЧГ=0"));
			
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, ТекстСообщения, , , Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТ
//++ НЕ УТКА

// Проверяет использование международного учета.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	
// Возвращаемое значение:
//	Булево - признак использования международного учета.
//
Функция ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика)
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Международный финансовый учет не ведется.';
				|en = 'International accounting is not kept.'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие учетной политики международного учета хотя бы у одной рассчитываемой организации в рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика 			  - Структура - параметры обработчика события этапа
//	ТолькоФормироватьВременнуюТаблицу - Булево - если Истина, то не нужно изменять состояние этапа.
//	
// Возвращаемое значение:
//	Булево - признак наличие учетной политики.
//
Функция ПроверитьНаличиеУчетнойПолитикиМеждународногоУчета(ПараметрыОбработчика, ТолькоФормироватьВременнуюТаблицу = Ложь)
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета.СрезПоследних(&КонецПериода, Организация В (&МассивОрганизаций)) КАК Т";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		Если НЕ ТолькоФормироватьВременнуюТаблицу Тогда
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Не введены учетные политики международного учета.';
					|en = 'Accounting policies of international accounting are not entered.'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие документов "Регламентная операция (международный учет)".
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ТипОперации 		 		- ПеречислениеСсылка.ТипыРегламентныхОперацийМеждународныйУчет - тип операции документа
//									если не указан, то анализируется типы операций из свойства ТипыРегламентныхОпераций данного этапа
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора документов по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//	НаличиеДокументаОбязательно - Булево - признак обязательного наличия документа.
//	
// Возвращаемое значение:
//	Булево - признак наличия документов.
//
Функция ПроверитьНаличиеДокументаРегламентнаяОперацияМУ(ПараметрыОбработчика, Знач ТипОперации = Неопределено,
			ИмяТаблицыОтбораОрганизаций = "ВТОрганизации", НаличиеДокументаОбязательно = Ложь)
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Ссылка    КАК ТипОперации,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТОперации
	|ИЗ
	|	Перечисление.ТипыРегламентныхОперацийМеждународныйУчет КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ИСТИНА
	|ГДЕ
	|	Операции.Ссылка В (&ТипыОпераций)
	|	И НЕ (Организации.Ссылка ЕСТЬ NULL)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операции.ТипОперации КАК ТипОперации,
	|	Операции.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РегламентнаяОперация.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	ВТОперации КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперацияМеждународныйУчет КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Операции.Организация)
	|			И (РегламентнаяОперация.ТипОперации = Операции.ТипОперации)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	ЕстьОшибки    = Ложь;
	ЕстьДокументы = Ложь;
	Период 		  = ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	ТипыОпераций  = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	
	Запрос.УстановитьПараметр("ТипыОпераций", ТипыОпераций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоДокументов > 1 Тогда
			
			ЕстьОшибки = Истина;
			УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По организации ""%1"" за период %2 сформировано несколько документов регламентных операций ""%3"".';
						|en = 'Several documents of the ""%3"" period-end operations were generated for the ""%1"" company for period %2.'"),
					Выборка.Организация,
					Период,
					СокрЛП(Выборка.ТипОперации)));
					
			Продолжить;
			
		ИначеЕсли Выборка.КоличествоДокументов = 0 Тогда
			
			Если НЕ НаличиеДокументаОбязательно Тогда
				// Нет данных к расчету и нет регламентного документа - расчет не требуется.
			Иначе
				// Есть данные для расчета, но нет регламентного документа - расчет не выполнен.
				ЕстьОшибки = Истина;
				УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По организации ""%1"" за период %2 не сформирована регламентная операция ""%3"".';
							|en = 'The ""%3"" period-end operation was not generated for the ""%1"" company for period %2.'"),
						Выборка.Организация,
						Период,
						СокрЛП(Выборка.ТипОперации)));
			КонецЕсли;
			
		Иначе // есть один документ
			ЕстьДокументы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НаличиеДокументаОбязательно И НЕ ЕстьОшибки И НЕ ЕстьДокументы Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За период %1 нет данных для расчета и отсутствует документ ""Регламентная операция (международный учет)"".';
					|en = 'No data for calculation and no ""Period-end operation (international accounting)"" document for period %1.'"),
				Период));
		
	КонецЕсли;
	
	УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос,
		"ВТОперации" + ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции
//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТ
#Область ФормированиеРегламентныхДокументов

//++ НЕ УТКА

// Формирует документы "Регламентная операция (международный учет)".
//
// Параметры:
//	ПараметрыОбработчика 	- Структура - параметры обработчика события этапа
//	ТипОперации 			- ПеречислениеСсылка.ТипыРегламентныхОперацийМеждународныйУчет - тип операции документа
//								если не указан, то создаются документы со всеми типами операций из свойства ТипыРегламентныхОпераций данного этапа
//	УничтожатьВТОрганизации - Булево - признак необходимости удаления временной таблицы ВТОрганизации.
//	
Процедура СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика, Знач ТипОперации = Неопределено, УничтожатьВТОрганизации = Истина)
	
	Если НЕ ПроверитьНаличиеУчетнойПолитикиМеждународногоУчета(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РегламентнаяОперация.Ссылка
	|	КОНЕЦ КАК РегламентныйДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	ВТОрганизации КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперацияМеждународныйУчет КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Т.Ссылка)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.ТипОперации = &ТипОперации)
	|			И (РегламентнаяОперация.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	МАКСИМУМ(Т.РегламентныйДокумент) КАК РегламентныйДокумент
	|ПОМЕСТИТЬ ВТАктуальныеДокументы
	|ИЗ
	|	ВТДокументы КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	Т.РегламентныйДокумент,
	|	ВЫБОР
	|		КОГДА Т.РегламентныйДокумент <> Т2.РегламентныйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	ВТДокументы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеДокументы КАК Т2
	|		ПО Т.Организация = Т2.Организация
	|			И Т.РегламентныйДокумент = Т2.РегламентныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	ТипыОпераций = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	
	Для Каждого ТипОперации Из ТипыОпераций Цикл
		
		Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.РегламентныйДокумент) Тогда
				РегламентныйДокумент = Документы.РегламентнаяОперацияМеждународныйУчет.СоздатьДокумент();
			Иначе
				РегламентныйДокумент = Выборка.РегламентныйДокумент.ПолучитьОбъект();
			КонецЕсли;
			
			Попытка
			
				Если Выборка.Удалить Тогда
					РегламентныйДокумент.УстановитьПометкуУдаления(Истина);
					Продолжить;
				ИначеЕсли РегламентныйДокумент.Проведен Тогда
					РегламентныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
				
				РегламентныйДокумент.Дата 	     	= КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
				РегламентныйДокумент.Организация 	= Выборка.Организация;
				РегламентныйДокумент.ТипОперации   	= ТипОперации;
				РегламентныйДокумент.Ответственный 	= Пользователи.ТекущийПользователь();
				
				РегламентныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Формирование документа ""Регламентная операция (международный учет)"" по организации ""%1"" за период %2 завершилось с ошибкой:
						|%3';
						|en = 'Generation of the ""Period-end operation (international accounting)"" document by the ""%1"" company for period %2 was completed with an error:
						|%3'"),
					Выборка.Организация,	
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					Выборка.Организация,
					,
					,
					?(РегламентныйДокумент.ЭтоНовый(), Неопределено, РегламентныйДокумент.Ссылка));
				
			КонецПопытки;
			
		КонецЦикла;
		
		УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ВТДокументы, ВТАктуальныеДокументы");
		
	КонецЦикла;
	
	Если УничтожатьВТОрганизации Тогда
		УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

// Формирует документы "Регламентная операция" начиная с первого пересчитываемого периода до текущего рассчитываемого периода.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ТипОперации 		 - ПеречислениеСсылка.ТипыРегламентныхОперацийМеждународныйУчет - тип операции документа
//							если не указан, то создаются документы со всеми типами операций из свойства ТипыРегламентныхОпераций данного этапа.
//	
Процедура РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, ПоОрганизациямДляКоторыхЕстьЗадания)
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	ТипыОпераций = ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций;
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= ПараметрыОбработчика.ПараметрыРасчета.КонецПериода Цикл
		
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ЗакрытиеМесяца.%1",
			СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
		ОписаниеЗамера 		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных	= 0;
		
		НомерЗадания 	 	= УвеличитьНомерЗадания();
		ОкончаниеПериода 	= КонецМесяца(НачалоРасчета);
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ДанныеКРасчетуЗаМесяц = ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period: 
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ПоОрганизациямДляКоторыхЕстьЗадания Тогда
			
			Для каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				
				Для Каждого ТипОперации Из ТипыОпераций Цикл
					
					Если НЕ ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, НачалоРасчета) Тогда
						Продолжить;
					КонецЕсли; 
					
					РезультатРасчета = СформироватьДокументРегламентнаяОперация(
											ПараметрыОбработчика, 
											ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),
											ТипОперации, 
											НачалоРасчета);
											
					Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки) Тогда
						ЕстьОшибки = Истина;
					Иначе
						КоличествоДанных = КоличествоДанных + РезультатРасчета.КоличествоДанных;
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЦикла; 
			
		ИначеЕсли ДанныеКРасчетуЗаМесяц.Организация.Количество() <> 0 Тогда
			
			Для Каждого ТипОперации Из ТипыОпераций Цикл
				
				Если НЕ ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, НачалоРасчета) Тогда
					Продолжить;
				КонецЕсли; 
				
				РезультатРасчета = СформироватьДокументРегламентнаяОперация(
										ПараметрыОбработчика, 
										ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
										ТипОперации, 
										НачалоРасчета);
										
				Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки) Тогда
					ЕстьОшибки = Истина;
				Иначе
					КоличествоДанных = КоличествоДанных + РезультатРасчета.КоличествоДанных;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьРасчет(
				Неопределено,
				НомерЗадания,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРасчетуЗаМесяц);
			
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
				ДанныеКРасчетуЗаМесяц.ВременныеТаблицы,
				ОкончаниеПериода + 1);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period: 
					|%2'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
		НачалоРасчета = ОкончаниеПериода + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует документы "Регламентная операция" за один период.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ТипОперации 		 - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип операции документа
//							если не указан, то создаются документы со всеми типами операций из свойства ТипыРегламентныхОпераций данного этапа
//	Период 				 - Дата, Неопределено - период для формирования документов;
//							если период не указан, то формируются документы за текущий рассчитываемый период.
//	
// Возвращаемое значение:
//	Структура - результат формирования документов, см. Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации()
//		если типы операций не определен, то возвращается значение Неопределено.
//
Функция СформироватьДокументРегламентнаяОперация(ПараметрыОбработчика, МассивОрганизаций, Знач ТипОперации = Неопределено, Знач Период = Неопределено)
	
	ТипыОпераций = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	
	ТипыВыполняемыхОпераций = Новый Массив;
	
	Период = ?(ЗначениеЗаполнено(Период), Период, ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	Для Каждого ТипОперации Из ТипыОпераций Цикл
		
		Если ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, Период) Тогда
			ТипыВыполняемыхОпераций.Добавить(ТипОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипыВыполняемыхОпераций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатРасчета = Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации(
		Период,
		ТипыВыполняемыхОпераций,
		МассивОрганизаций);
	
	Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По организации ""%1"" за период %2 не удалось провести регламентную операцию ""%3"" по причине:
				|%4';
				|en = 'Cannot post the ""%3"" period-end operation for the ""%1"" company for period %2 due to:
				|%4'"),
			СокрЛП(РезультатРасчета.Организация),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(Период),
			СокрЛП(РезультатРасчета.ТипОперации),
			РезультатРасчета.ТекстОшибки);
		
		ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			?(ЗначениеЗаполнено(РезультатРасчета.Организация), РезультатРасчета.Организация, МассивОрганизаций),
			Период,
			,
			РезультатРасчета.ДокументСОшибкой);
		
	КонецЕсли;
	
	Для каждого ОписаниеОшибки Из РезультатРасчета.СписокОшибок Цикл
		
		ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ОписаниеОшибки.Организация,
			Период);
			
		ГруппаПроблем = НСтр("ru = 'При выполнении операции были диагностированы ошибки';
							|en = 'Errors were found when executing the operation'");
			
		ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРегистрации,
			ГруппаПроблем,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка,
			ОписаниеОшибки.ОписаниеПроблемы,
			ОписаниеОшибки.Объект);
			
	КонецЦикла; 
	
	Возврат РезультатРасчета;
	
КонецФункции

// Возвращает требуемую периодичность указанной регламентной операции.
//
// Параметры:
//	ТипОперации - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип регламентной операции.
//
// Возвращаемое значение:
//	 ПеречисленияСсылка.Периодичность - периодичность операции.
//
Функция ПериодичностьРегламентнойОперации(ТипОперации)
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТранспортногоНалога
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетЗемельногоНалога
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетТорговогоСбора
	 ИЛИ ТипОперации = Перечисления.ТипыРегламентныхОпераций.РасчетНалогаУСН Тогда
	 
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода Тогда
		
		Периодичность = Перечисления.Периодичность.Год;
		
	Иначе
		
		Периодичность = Перечисления.Периодичность.Месяц;
		
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции

// Проверяет совпадение указанного периода и периодичности регламентной операции.
//
// Параметры:
//	ТипОперации - ПеречислениеСсылка.ТипыРегламентныхОпераций - тип регламентной операции
//	Период 		- Дата - период для формирования документа по данной операции.
//
// Возвращаемое значение:
//	 Булево - признак необходимости формирования документа.
//
Функция ТребуетсяРегламентнаяОперацияВУказанномПериоде(ТипОперации, Период)
	
	Периодичность = ПериодичностьРегламентнойОперации(ТипОперации);
	Результат = Ложь;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = Истина;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = (Месяц(Период) % 3 = 0);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = (Месяц(Период) = 12);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверная периодичность регламентной операции';
								|en = 'Incorrect frequency of period-end operation'");
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ОпределениеИУстановкаСостоянияЭтапов

// Устанавливает состояние этапа "Не требуется".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Информация".
//
Процедура УстановитьСостояниеНеТребуется(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	 ИЛИ ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		Возврат; // если были диагностированы проблемы, то этап требует пересчета
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Отключен".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Информация".
//
Процедура УстановитьСостояниеОтключено(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ПараметрыОбработчика.ДанныеЭтапа.Отключено = Истина;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Не выполнен".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Ошибка".
//
Процедура УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		
		Если НЕ ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка;
		КонецЕсли;
		
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Выполнен с ошибками".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Предупреждение".
//
Процедура УстановитьСостояниеВыполненСОшибками(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		
		Если НЕ ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение;
		КонецЕсли;
		
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
		
	КонецЕсли;
	
КонецПроцедуры


// Проверяет, что состояние этапа отличается от незаполненного состояния по умолчанию.
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак того, что состояния этапа отличается от "Неопределено".
//
Функция СостояниеЭтапаОпределено(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено;
	
КонецФункции

// Проверяет, что состояние этапа отличается от "Выполнен успешно" и "Не требуется".
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак необходимости пересчета этапа.
//
Функция ТребуетсяПересчетЭтапа(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
		И ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
КонецФункции

// Проверяет, что состояние этапа равно "Не требуется".
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак этапа расчет которого не требуется.
//
Функция РасчетЭтапаНеТребуется(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
КонецФункции


// Добавляет поясняющую информацию к этапу.
// В дереве операций закрытия месяца отображается на третьем уровне.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Информация".
//
Процедура ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение,
			ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ОписаниеПояснения = ПараметрыОбработчика.ТаблицаПояснения.Добавить();
	
	ОписаниеПояснения.Код 				= Новый УникальныйИдентификатор;
	ОписаниеПояснения.Состояние	 		= ?(ЗначениеЗаполнено(Состояние),
		Состояние,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
	ОписаниеПояснения.Родитель 			= ПараметрыОбработчика.ДанныеЭтапа.Код;
	
	ОписаниеПояснения.Наименование 		= Пояснение;
	ОписаниеПояснения.ТекстПодробнее 	= ТекстПодробнее;
	ОписаниеПояснения.ДействиеПодробнее = ДействиеПодробнее;
	
КонецПроцедуры

// Устанавливает состояние этапа по данным указанной временной таблицы.
//
// Параметры:
//	ПараметрыОбработчика 		 - Структура - параметры обработчика события этапа
//	ШаблонТекста 		 		 - Строка - шаблон текста пояснение, формируемого для каждой строки временной таблицы;
//									в шаблоне параметр %1 заменяется на организацию, а %2 - на рассчитываемый период
//	Запрос 				 		 - Запрос - запрос с менеджером временных таблиц
//	ИмяВременнойТаблицы  		 - Строка - имя временной таблицы для установки состояния этапа;
//									обязательная колонка временной таблицы - "Организация"
//	ПоРассчитываемымОрганизациям - Булево - признак отбора строк временной таблицы по организациям из свойства МассивОрганизаций
//	ЭтоОшибка 			 		 - Булево - признак того, что строки указанной временной таблицы содержат ошибки;
//									если Истина, то будет установлено состояние этапа "Не выполнен", иначе - "Не требуется".
//
Процедура ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(ПараметрыОбработчика, ШаблонТекста, Запрос,
			ИмяВременнойТаблицы, ПоРассчитываемымОрганизациям, ЭтоОшибка = Ложь)
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяВременнойТаблицы КАК РезультатПроверки
	|		ПО Т.Ссылка = РезультатПроверки.Организация
	|ГДЕ
	|	Т.Ссылка В(&МассивОрганизаций)
	|	И ВЫБОР КОГДА РезультатПроверки.Организация ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	  КОНЕЦ = &ПоРассчитываемымОрганизациям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Запрос.УстановитьПараметр("ПоРассчитываемымОрганизациям", ПоРассчитываемымОрганизациям);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		ТекстРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста,
			Выборка.Организация,
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
		
		Если ЭтоОшибка Тогда
			УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, ТекстРезультата);
		Иначе
			УстановитьСостояниеНеТребуется(ПараметрыОбработчика, ТекстРезультата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Определяет состояние указанных этапов закрытия месяца.
//
// Параметры:
//  Этапы 							  - ПеречислениеСсылка.ОперацииЗакрытияМесяца, Массив - операции закрытия месяца
//	Период 							  - Дата - рассчитываемый период
//	МассивОрганизаций 				  - СправочникСсылка.Организации, Массив - рассчитываемые организации
//	УчетСостоянияПредшествующихЭтапов - Булево - учитывать состояние предыдущих этапов, от которых зависят указанные этапы
//	ВыполнятьПроверкиДоЭтапа 		  - Булево - выполнять проверки состояния системы, относящиеся к данной этапу.
//	ОбновитьТолькоОдинЭтап			  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - экспресс-проверка состояния только указанного этапа
//										 при этом не проверяется определение состояния предшествующих этапов, влияющих на указанный этап
//
// Возвращаемое значение:
//	Соответствие
//		Ключ - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап
//		Значение - ПеречисленияСсылка.СостоянияОперацийЗакрытияМесяца - состояние этапа
//	Если в параметр Этапы передан один этап, то возвращается не Соответствие, а значение с типом ПеречисленияСсылка.СостоянияОперацийЗакрытияМесяца.
//
Функция ОпределитьСостояниеЭтаповРасчета(Этапы, Период, МассивОрганизаций = Неопределено,
			УчетСостоянияПредшествующихЭтапов = Истина, ВыполнятьПроверкиДоЭтапа = Ложь, ОбновитьТолькоОдинЭтап = Неопределено) Экспорт
	
	// Заполним состояния этапов.
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		НачалоМесяца(Период),
		МассивОрганизаций);
	
	ПараметрыЗапускаОбновленияСостояния =
		Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных,, ОбновитьТолькоОдинЭтап);
	
	ПараметрыЗапускаОбновленияСостояния.УчетСостоянияПредшествующихЭтапов = УчетСостоянияПредшествующихЭтапов;
	ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа 		  = ВыполнятьПроверкиДоЭтапа;
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	// Вернем состояние требуемых этапов.
	МассивЭтапов = ОбщегоНазначенияУТКлиентСервер.Массив(Этапы);
	СостоянияЭтапов = Новый Соответствие;
	
	Для Каждого Этап Из МассивЭтапов Цикл
		
		СтрокаЭтапа = СтруктураДанных.ТаблицаЭтапы.Найти(Этап, "Код");
		
		Если СтрокаЭтапа <> Неопределено Тогда
			СостоянияЭтапов.Вставить(Этап, СтрокаЭтапа.Состояние);
		Иначе
			СостоянияЭтапов.Вставить(Этап, Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЭтапов.Количество() = 1 Тогда
		Возврат СостоянияЭтапов[МассивЭтапов[0]];
	КонецЕсли;
	
	Возврат СостоянияЭтапов;
	
КонецФункции

#КонецОбласти

#Область ОбменДаннымиМеждуОбработчикамиЭтапа

// Устанавливает доп. свойство обработчика этапа для передачи его в следующие за ним обработчики этапа.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ИмяСвойства 		 - Строка - ключ доп. свойства
//	ЗначениеСвойства 	 - Произвольный - значение доп. свойства.
//
Процедура УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, ИмяСвойства, ЗначениеСвойства = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	
КонецПроцедуры

// Возвращает доп. свойство обработчика этапа, установленное в предшествующих обработчиках этапа.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ИмяСвойства 		 - Строка - ключ доп. свойства
//	ЗначениеПоУмолчанию  - Произвольный - возвращаемое значение в случае, если доп. свойство с указанным именем не существует.
//
Функция ПолучитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	
	Если НЕ ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства[ИмяСвойства];
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область МетодыДляРаботыСПроблемамиСостоянияСистемы

#Область РегистрацияПроблемОбнаруженныхПриПроверкеСостоянияСистемы

// Формирует описание данных, на основании которых надо зарегистрировать найденные проблемы.
//
// Параметры:
//	ИмяВременнойТаблицы 	  - Строка - имя временной таблицы, в которой хранится информация о найденных проблемах
//								обязательное поле - "Организация"
//	ШаблонТекстаОшибки  	  - Строка - шаблон текста описания проблемы
//								в шаблоне параметр %1 заменяется на организацию, а %2 - на рассчитываемый период
//	СписокПолей 			  - СписокЗначений - список полей временной таблицы; Значение - имя поля, Представление (необязательный) - представление поля
//	ИмяПоляОбъекта 			  - Строка - имя поля, в котором хранится объект для расшифровки проблемы
//	ИмяРегистраДляРасшифровки - Строка - имя регистра, в котором зафиксирована проблема
//
// Возвращаемое значение:
//	Массив - массив описаний проблем, см. код ДополнитьПараметрыРегистрацииПроблемПроверки()
//
Функция ИнициализироватьПараметрыРегистрацииПроблемПроверки(ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта = "", ИмяРегистраДляРасшифровки = "") Экспорт
	
	ПараметрыРегистрации = Новый Массив;
	
	ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта, ИмяРегистраДляРасшифровки);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Добавляет к ранее сформированному описанию новые данные, на основании которых надо зарегистрировать найденные проблемы.
//
// Параметры:
//	ПараметрыРегистрации 	  - Массив - результат функции ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяВременнойТаблицы  	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ШаблонТекстаОшибки   	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	СписокПолей 		 	  - СписокЗначений - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяПоляОбъекта 		 	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяРегистраДляРасшифровки - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//
Процедура ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта = "", ИмяРегистраДляРасшифровки = "") Экспорт
	
	// Описание регистрации ошибки.
	ОписаниеРегистрации = Новый Структура;
	ОписаниеРегистрации.Вставить("ИмяВременнойТаблицы", 	  ИмяВременнойТаблицы);
	ОписаниеРегистрации.Вставить("ШаблонТекстаОшибки",  	  ШаблонТекстаОшибки);
	ОписаниеРегистрации.Вставить("СписокПолей", 			  СписокПолей);
	ОписаниеРегистрации.Вставить("ИмяПоляОбъекта", 	 		  ИмяПоляОбъекта);
	ОписаниеРегистрации.Вставить("ИмяРегистраДляРасшифровки", ИмяРегистраДляРасшифровки);
	ОписаниеРегистрации.Вставить("ТекстЗапросаВыборки", 	  "");
	
	// Текст запроса для выборки данных.
	ТекстПоляЗапроса = "";
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ТекстПоляЗапроса = ТекстПоляЗапроса + ?(ТекстПоляЗапроса = "", "", ",
			|	") + "Т." + ЭлементСписка.Значение;
	КонецЦикла;
	
	ТекстЗапросаВыборки =
	"ВЫБРАТЬ
	|	%1
	|ИЗ
	|	%2 КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	%1
	|
	|ИТОГИ ПО
	|	Организация";
	
	ТекстЗапросаВыборки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапросаВыборки,
		ТекстПоляЗапроса,
		ИмяВременнойТаблицы);
	
	ОписаниеРегистрации.ТекстЗапросаВыборки = ТекстЗапросаВыборки;
	
	ПараметрыРегистрации.Добавить(ОписаниеРегистрации);
	
КонецПроцедуры

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении проверки этапа закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки 			   - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки()
//	ПараметрыРегистрации 		   - Массив - результат функции ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ТекстЗапросаФормированияТаблиц - Строка - текст запроса для формирования временной таблицы с информацией о найденных проблемах
//	ДополнительныеПараметрыЗапроса - Структура - дополнительные параметры для запроса формирования временной таблицы, используемые только в данной проверке.
//
Процедура ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации,
			ТекстЗапросаФормированияТаблиц = "", ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
	
	ПроверкаДоРасчета    = ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "ПроверкаДоРасчета",    Ложь);
	ПроверкаПослеРасчета = ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "ПроверкаПослеРасчета", Ложь);
	
	Если ПроверкаДоРасчета ИЛИ ПроверкаПослеРасчета Тогда
		
		ПараметрыОбработчика = ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки(ПараметрыПроверки);
		
		Если ПроверкаДоРасчета И РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
		
	Иначе
		
		ПараметрыРасчета = ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки);
		
	КонецЕсли;
	
	МаксКоличествоОшибок = КоличествоРегистрируемыхОднотипныхОшибок();
	
	Запрос = Новый Запрос;
	
	ИнициализироватьЗапрос(
		Запрос,
		?(ПроверкаДоРасчета ИЛИ ПроверкаПослеРасчета, ПараметрыОбработчика, ПараметрыРасчета)); // получим МенеджерВременныхТаблиц
	
	ОбщегоНазначенияУТ.УстановитьПараметрыЗапроса(
		Запрос,
		ДополнительныеПараметрыЗапроса); // установим уникальные доп. параметры для проверки
	
	Если ЗначениеЗаполнено(ТекстЗапросаФормированияТаблиц) Тогда
		
		// Таблица с данными формируется не в процедуре проверки использования этапа - сформируем ее здесь.
		Запрос.Текст = ТекстЗапросаФормированияТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Для Каждого ОписаниеРегистрации Из ПараметрыРегистрации Цикл
		
		Запрос.Текст = ОписаниеРегистрации.ТекстЗапросаВыборки;
		
		ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизаций.Следующий() Цикл
			
			// Зарегистрируем проблему.
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеРегистрации.ШаблонТекстаОшибки,
				ВыборкаОрганизаций.Организация,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации));
			
			АудитСостоянияСистемы.ДобавитьСтрокуВТаблицуВыявленныхПроблем(
				ПараметрыПроверки,
				ВыборкаОрганизаций.Организация,
				ПараметрыРасчета.ПериодРегистрации,
				ТекстОшибки);
			
			Выборка = ВыборкаОрганизаций.Выбрать();
			
			НомерОшибки = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НомерОшибки = НомерОшибки + 1;
				
				Если МаксКоличествоОшибок > 0 И НомерОшибки > МаксКоличествоОшибок Тогда
					
					КоличествоНезарегистрированных = Выборка.Количество() - МаксКоличествоОшибок;
					
					ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						ТекстОшибки,
						КоличествоНезарегистрированных);
					
					Прервать;
					
				КонецЕсли;
					
				// Добавим расшифровку проблемы по объектам.
				Если ЗначениеЗаполнено(ОписаниеРегистрации.ИмяПоляОбъекта) Тогда
					
					ДобавитьОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей,
						ОписаниеРегистрации.ИмяПоляОбъекта);
					
				Иначе
					
					ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей,
						ОписаниеРегистрации.ИмяРегистраДляРасшифровки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дополнительные параметры проверки, переданные в нее механизмом закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки().
//
// Возвращаемое значение:
//	Структура - структура дополнительных параметров запуска проверки; если проверка вызвана вне механизма закрытия месяца, то возвращается пустая структура.
//
Функция ДополнительныеПараметрыПроверки(ПараметрыПроверки) Экспорт
	
	Если ТипЗнч(ПараметрыПроверки.ДополнительныеПараметры) <> Тип("Структура")
	 И ТипЗнч(ПараметрыПроверки.ДополнительныеПараметры) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыПроверки.ДополнительныеПараметры;
	
КонецФункции

// Возвращает значение указанного дополнительного параметра проверки, переданного в нее механизмом закрытия месяца.
// Если параметра с таким именем нет, то возвращается значение параметра по умолчанию.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки()
//	ИмяПараметра - Строка - ключ структуры дополнительных параметров
//	ЗначениеПоУмолчанию - Произвольный - значение, возвращаемое функцией если доп. параметра с указанным именем нет.
//
// Возвращаемое значение:
//	Произвольное - значение дополнительного параметра проверки.
//
Функция ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	Если ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Возврат ДополнительныеПараметры[ИмяПараметра];
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает признак того, что проверка вызвана механизмом закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки().
//
// Возвращаемое значение:
//	Булево - проверка вызвана из Обработка.ОперацииЗакрытияМесяца.ВыполнитьПроверкиЭтапа().
//
Функция ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Экспорт
	
	Возврат ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "Состояние", Null) <> Null;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПроблемОбнаруженныхПриРасчетеЭтапа

// Добавляет информацию о проблеме, диагностированной в ходе расчета, в общий список проблем расчета этапа.
// Запись информации о проблемах из этого списка будет выполнена централизованно самим механизмом закрытия месяца, после
// окончания расчета этапа. Использовать данную процедуру следует в случае, если в месте возникновения проблемы
// доступен универсальный параметр обработчика расчета - ПараметрыОбработчика.
// Если при расчете этапа этот параметр недоступен, то алгоритм расчета этапа
// должен регистрировать проблему самостоятельно, через ЗарегистрироватьПроблемуВыполненияРасчета().
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ТекстПодробно 		 - Строка - подробное описание проблемы; выводится в форме расшифровки проблем из формы закрытия месяца
//	Организация 		 - СправочникСсылка.Организации, Массив - организации, к которым относится данная ошибка
//							если не указано, то ошибка относится к каждой из рассчитываемых организаций
//	Период 				 - Дата - период, к которому относится ошибка
//							если не указано, то ошибка относится к периоду расчета
//	Важность 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус проблемы; по умолчанию "Ошибка"
//	Объект 				 - Произвольный - объект для расшифровки проблемы.
//	
Процедура ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстПодробно,
			Организация = Неопределено, Период = Неопределено, Важность = Неопределено, Объект = Неопределено) Экспорт
	
	ОписаниеОшибки = ПараметрыОбработчика.ТаблицаПояснения.Добавить();
	
	ОписаниеОшибки.Родитель 		 = ПараметрыОбработчика.ДанныеЭтапа.Код;
	ОписаниеОшибки.Наименование 	 = ТекстПодробно;
	ОписаниеОшибки.Состояние 		 = Важность;
	ОписаниеОшибки.Организация 		 = Организация;
	ОписаниеОшибки.Период 			 = Период;
	ОписаниеОшибки.РасшифровкаОшибки = Объект;
	
КонецПроцедуры

// Формирует описание данных, на основании которых надо зарегистрировать проблему выполнения расчета.
//
// Параметры:
//  ЭтапРасчета	- ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//	Организация - СправочникСсылка.Организации, Массив - организации, к которым относится данная проблема
//					если не указано, то проблема относится к каждой из рассчитываемых организаций
//  Период		- Дата - период расчета.
//
// Возвращаемое значение:
//	Структура - параметры регистрации проблемы расчета.
//
Функция ИнициализироватьПараметрыРегистрацииПроблемыРасчета(ЭтапРасчета, Организация, Период) Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("ЭтапРасчета", ЭтапРасчета);
	ПараметрыРегистрации.Вставить("Организация", Организация);
	ПараметрыРегистрации.Вставить("Период", 	 Период);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении расчета этапа закрытия месяца.
// Использовать данную процедуру следует в случае, если в месте возникновения проблемы
// недоступен универсальный параметр обработчика расчета - ПараметрыОбработчика.
// Если при расчете этапа этот параметр доступен, то алгоритм расчета этапа
// должен передавать информацию о проблеме механизму закрытия месяца через ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета().
//
// Параметры:
//	ПараметрыРегистрации - Структура - результат функции ИнициализироватьПараметрыРегистрацииПроблемыРасчета()
//	ТекстКратко 		 - Строка - краткая информация о проблеме; выводится в форме закрытия месяца
//	Важность 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус проблемы; по умолчанию "Ошибка"
//	ТекстПодробно 		 - Строка - подробное описание проблемы; проблемы в форме закрытия месяца группируются по ТекстКратко + Важность, а данный текст выводится в форме расшифровки проблем
//	Объект 				 - Произвольный - объект для расшифровки проблемы.
//	
Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРегистрации, ТекстКратко,
			Важность = Неопределено, ТекстПодробно = "", Объект = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРегистрации.Организация) Тогда
		МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
	Иначе			
		МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ПараметрыРегистрации.Организация);
	КонецЕсли;
	
	Проверка = СлужебнаяПроверкаЭтапа(ПараметрыРегистрации.ЭтапРасчета);
	
	Если НЕ ЗначениеЗаполнено(Важность) Тогда
		Важность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проверка, "Важность");
	КонецЕсли;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		ОписаниеПроблемы = АудитСостоянияСистемы.СформироватьОписаниеПроблемы(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстКратко,
				СокрЛП(ТекущаяОрганизация),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРегистрации.Период)),
			Важность,
			ТекстПодробно,
			Объект);
		
		АудитСостоянияСистемы.ЗарегистрироватьПроблему(
			Проверка,
			ТекущаяОрганизация,
			НачалоДня(ПараметрыРегистрации.Период),
			ОписаниеПроблемы);
		
	КонецЦикла;
	
	ПродублироватьВЖурналРегистрации(ПараметрыРегистрации.ЭтапРасчета, Важность, ТекстПодробно);
	
КонецПроцедуры

// Проверяет наличие ошибок, зарегистрированных при выполнении расчета указанного этапа закрытия месяца.
//
// Параметры:
//  ЭтапРасчета	 	  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//  МассивОрганизаций - СправочникСсылка.Организации, Массив - проверяемые организаций.
//  Период		 	  - Дата - период расчета.
// 
// Возвращаемое значение:
//  Булево - признак наличия ошибок расчета.
//
Функция ЕстьОшибкиВыполненияРасчета(ЭтапРасчета, МассивОрганизаций, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|ГДЕ
	|	Проблемы.Проверка = &Проверка
	|	И Проблемы.Организация В(&МассивОрганизаций)
	|	И НАЧАЛОПЕРИОДА(Проблемы.ПроверяемыйПериод, МЕСЯЦ) = &Период
	|	И Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка)";
	
	Запрос.УстановитьПараметр("Проверка", 	 	   СлужебнаяПроверкаЭтапа(ЭтапРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	Запрос.УстановитьПараметр("Период", 	 	   НачалоМесяца(Период));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Функция ДублироватьНайденныеПроблемыВЖурналеРегистрации()
	
	ЗначенияПараметров = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.ДублироватьНайденныеПроблемыВЖурналеРегистрации;
	
КонецФункции

Процедура ПродублироватьВЖурналРегистрации(ЭтапРасчета, ИсточникОпределенияВажностиПроблемы, ТекстОшибки)
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	ИначеЕсли НЕ ДублироватьНайденныеПроблемыВЖурналеРегистрации() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсточникОпределенияВажностиПроблемы) Тогда
		Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка;
	ИначеЕсли ТипЗнч(ИсточникОпределенияВажностиПроблемы) = Тип("ПеречислениеСсылка.ВариантыВажностиПроблемыСостоянияСистемы") Тогда
		Важность = ИсточникОпределенияВажностиПроблемы;
	Иначе
		Важность = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ВажностьПроверкиСостоянияСистемы(ИсточникОпределенияВажностиПроблемы);
	КонецЕсли;
	
	Если Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение
	 ИЛИ Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ВажнаяИнформация Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
	Иначе
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ОбщегоНазначения.ИмяЗначенияПеречисления(ЭтапРасчета)),
		УровеньЖР,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область МетодыДляРаботыСЗаданияКЗакрытиюМесяца

// Возвращает итоговый текст запроса формирования заданий к закрытию месяца по 
// - имени контрольного регистра 
// - массиву текстов запросов по отдельным операциям закрытия месяца.
// 
// Параметры:
// 	ИмяРегистра - Строка - Имя контрольного регистра.
// 	МассивТекстовЗапросовПоОперациям - Массив - Массив текстов запросов формирования заданий по отдельным операция закрытия месяца. 
//
// Возвращаемое значение:
// 	ТекстЗапроса - Строка - Итоговый текст запроса формирования заданий к закрытию месяца по контрольному регистру.
//
Функция ТекстЗапросЗаданийКЗакрытиюМесяца(ИмяРегистра, МассивТекстовЗапросовПоОперациям) Экспорт
	
	ТекстЗапросаИнициализации = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1)                                           КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка) КАК Операция,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)              КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                               КАК Документ
	|ПОМЕСТИТЬ %1ЗаданияКЗакрытиюМесяца
	|ГДЕ ЛОЖЬ
	|";
	ТекстЗапросаИнициализации = СтрШаблон(ТекстЗапросаИнициализации, ИмяРегистра);
	
	МассивТекстовЗапросовПоОперациям.Вставить(0, ТекстЗапросаИнициализации);
	
	Возврат СтрСоединить(МассивТекстовЗапросовПоОперациям, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

// Возвращает текущее значение константы "НомерЗаданияК...".
//
// Параметры:
//	ИмяКонстанты - Строка - имя константы номера задания; если не задано, то "НомерЗаданияКЗакрытиюМесяца".
//
// Возвращаемое значение:
//	Число - значение константы "НомерЗаданияКЗакрытиюМесяца". Определяет текущий номер задания для которого будет производиться расчет.
//		Все последующие действия пользователей информационной базы в целях актуализации расчетов будут писаться под более высоким номером задания.
//
Функция ТекущийНомерЗадания(Знач ИмяКонстанты = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		ИмяКонстанты = Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

// Увеличивает на 1 значение константы "НомерЗаданияК...".
//
// Параметры:
//	ИмяКонстанты - Строка - имя константы номера задания; если не задано, то "НомерЗаданияКЗакрытиюМесяца".
//
// Возвращаемое значение:
//	Число - исходный номер задания.
//
Функция УвеличитьНомерЗадания(Знач ИмяКонстанты = "") Экспорт
	
	НомерДоРасчета = 0;
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		ИмяКонстанты = Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();		
		
		НомерДоРасчета = ТекущийНомерЗадания(ИмяКонстанты);
		Константы[ИмяКонстанты].Установить(НомерДоРасчета + 1);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ " " + НСтр("ru = 'Значение константы';
						|en = 'Constant value'") + " " + ИмяКонстанты + " = " + НомерДоРасчета;
		
		ЗаписьЖурналаРегистрации(
		    ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Увеличение номера задания для расчета';
												|en = 'Increase the number of job for calculation'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ИнформацияОбОшибке);
			
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
	Возврат НомерДоРасчета;
	
КонецФункции

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//	ОперацияРасчета   - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца
//	КонецРасчета 	  - Дата - Конец месяца, на который надо контролировать актуальность расчета.
//	НомерЗадания 	  - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//						Записи выбираются только те, которые не превышают указанного номера задания.
//	МассивОрганизаций - Массив - Массив организаций, для которых контролируется актуальность.
//
// Возвращаемое значение:
//	Дата - Начало месяца на который неактуально закрытие месяца. Если последовательность актуальна в периоде КонецРасчета,
//			то будет возвращено начало следующего месяца за КонецРасчета.
//
Функция НачалоРасчета(ОперацияРасчета, КонецРасчета, НомерЗадания = Неопределено, МассивОрганизаций = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецРасчета
	|	И Задания.Операция = &ОперацияРасчета
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Задания.Месяц) ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("КонецРасчета", 	    КонецРасчета);
	Запрос.УстановитьПараметр("ОперацияРасчета", 	ОперацияРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(МассивОрганизаций));
	
	Если НЕ ЗначениеЗаполнено(НомерЗадания) Тогда
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	Иначе
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.НачалоРасчета, КонецМесяца(КонецРасчета) + 1);
	
КонецФункции

// Фиксирует удачный пересчет. Вызывается когда выполнен пересчет, для очистки записей, указывавших на необходимость пересчета.
//
// Параметры:
//	СледующийМесяц 		  - Дата - указывает месяц на начало которого будет записана необходимость об актуализации данных расчета;
//	НомерЗаданияДоРасчета - Число - номер задания для которого производился расчет (см. ТекущийНомерЗадания()), если в процессе выполнения пересчета были опять изменены исходные данные,
//							  запись об этом изменении была произведена под новым номером задания (см. УвеличитьНомерЗадания());
//	ОперацияРасчета 	  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция для которой производился расчет;
//	ДанныеКРаспределению  - Структура - Формируется в методе ЗаданияКРасчетуЗаМесяц().
//
Процедура ЗафиксироватьРасчет(СледующийМесяц, НомерЗаданияДоРасчета, ОперацияРасчета, ДанныеКРаспределению) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ИЗ
	|	КэшГраниц КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СледующийМесяц                   КАК Месяц,
	|	Границы.Операция                  КАК Операция,
	|	Границы.Организация               КАК Организация,
	|	МАКСИМУМ(Границы.НомерЗадания)    КАК НомерЗадания,
	|	НЕОПРЕДЕЛЕНО                      КАК Документ
	|ИЗ
	|	КэшГраниц КАК Границы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|	ПО &СледующийМесяц = Задания.Месяц
	|		И Границы.Операция = Задания.Операция
	|		И Границы.Организация = Задания.Организация
	|		И Границы.НомерЗадания = Задания.НомерЗадания
	|		И НЕОПРЕДЕЛЕНО = Задания.Документ
	|ГДЕ
	|	Задания.Месяц ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.Операция,
	|	Границы.Организация";
	
	Запрос.МенеджерВременныхТаблиц = ДанныеКРаспределению.ВременныеТаблицы;
	Запрос.УстановитьПараметр("СледующийМесяц", СледующийМесяц);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.Операция.Установить(Выборка.Операция);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Записать(); // Очистили рассчитанные аналитики в прошлом периоде
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СледующийМесяц) Тогда
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.Операция.Установить(Выборка.Операция);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина); // Перенесли рассчитанные аналитики в новый период
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Блокирует регистр "Задания к закрытию месяца" по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации 		  - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//	Операция 			  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Операция, по которой блокируется регистр заданий.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации, Операция) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ЭлементБлокировки.УстановитьЗначение("Операция", Операция);
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		КоличествоСтрок = Организации.Количество();
		Если КоличествоСтрок <> 0 Тогда
			Счетчик = 0;
			Пока Счетчик < КоличествоСтрок Цикл
				ИсточникБлокировки.Добавить();
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Считывает записи регистра "Задания к закрытию месяца" во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Период - Начало периода выборки данных.
//	КонецПериода  - Период - Конец периода выборки данных.
//	НомерЗадания  - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//							Записи выбираются только те, которые не превышают указанного номера задания.
//	Организации   - Массив, СправочникСсылка.Организации - Фильтр по организации.
//	Операция 	  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Фильтр по типу операции.
//
// Возвращаемое значение:
//	Структура:
//		* Организации - Массив - Массив организаций, который неактуальны в указанном периоде.
//		* ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, КонецПериода, НомерЗадания, Организации, Операция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&Организации) ИЛИ &ПоВсемОрганизациям)
	|;
	|//////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  		КонецПериода);
	Запрос.УстановитьПараметр("НомерЗадания",  		НомерЗадания);
	Запрос.УстановитьПараметр("Операция", 	   		Операция);
	Запрос.УстановитьПараметр("Организации",   		Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("Организация", 		Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Процедура формирует записи в регистре сведений "Задания к закрытию месяца",
// если текущий документ изменяет записи в оперативных регистрах.
//
// Параметры:
//	Документ 			   - ДокументСсылка - Ссылка на документ-регистратор
//	ДополнительныеСвойства - Структура - Коллекция, содержащая в себе менеджер временных таблиц.
//
Процедура ОтразитьЗаданияКЗакрытиюМесяца(Документ, ДополнительныеСвойства) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // задания устанавливаются только в главном узле.
		Возврат;
	КонецЕсли;
	
	КоллекцияКонтрольныхРегистров = КоллекцияКонтрольныхРегистров();
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ВременныеТаблицы = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц        КАК Месяц,
	|	Таблица.Организация  КАК Организация,
	|	Таблица.Операция     КАК Операция,
	|	Таблица.Документ     КАК Документ
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|";
		
	ТекстВложенногоЗапроса = "";
	ТекстУничтожитьВт = "; ";
		
	Для Каждого КонтрольныйРегистр Из КоллекцияКонтрольныхРегистров Цикл
		
		Если ВременныеТаблицы.Таблицы.Найти(КонтрольныйРегистр) <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда
				ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", КонтрольныйРегистр);
			ТекстУничтожитьВт = ТекстУничтожитьВт + "УНИЧТОЖИТЬ " + КонтрольныйРегистр + "; ";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		НомерЗадания = ТекущийНомерЗадания();
		Выборка = Запрос.Выполнить().Выбрать();
		РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область МетодыДляУстановкиОтборовВОткрываемыхФормах

// Проверяет режим открытия формы - открыта из обработки "Операции закрытия месяца" или не из нее.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка документов.
//
// Возвращаемое значение:
//	Булево - признак открытия формы из механизма закрытия месяца.
//
Функция ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Экспорт
	
	Возврат Форма.Параметры.Свойство(ИмяСлужебногоСвойстваОткрываемыхФорм());
	
КонецФункции


// Устанавливает отборы в формах регламентных документов регламентированного и международного учета,
// открываемых из формы операций закрытия месяца.
//
// Параметры:
//	Форма 					  - УправляемаяФорма - форма списка документов
//	Список 					  - ДинамическийСписок - список документов в этой форме
//	ИмяПоляДляОтбораПоПериоду - Строка - имя поля для отбора по периоду, по умолчанию "Дата".
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца.
//
Функция УстановитьОтборыВФормеСпискаРегламентныхДокументов(Форма, Список, ИмяПоляДляОтбораПоПериоду = "Дата") Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Форма.Параметры.Отбор.Очистить();
	
	// Отбор по организации.
	Если Список.Параметры.Элементы.Найти("МассивОрганизаций") <> Неопределено Тогда
		
		Список.Параметры.УстановитьЗначениеПараметра("МассивОрганизаций", Форма.Параметры.МассивОрганизаций);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Организация",
			Форма.Параметры.МассивОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			"ЗакрытиеМесяца_Организация");
		
	КонецЕсли;
	
	// Отбор по периоду.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		ИмяПоляДляОтбораПоПериоду,
		НачалоМесяца(Форма.Параметры.ПериодРегистрации),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_НачалоПериода");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		ИмяПоляДляОтбораПоПериоду,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		КонецМесяца(Форма.Параметры.ПериодРегистрации),
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_КонецПериода");
	
	// Отбор по типу операции.
	Если Форма.Параметры.Свойство("ТипОперации") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ТипОперации",
			Форма.Параметры.ТипОперации,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			"ЗакрытиеМесяца_ТипОперации");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Очищает ранее установленные отборы в формах регламентных документов регламентированного и международного учета,
// открываемых из формы операций закрытия месяца.
//
// Параметры:
//	Форма     - УправляемаяФорма - форма списка документов
//	Список    - ДинамическийСписок - список документов в этой форме
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - параметр процедуры ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца.
//
Функция ОчиститьРанееУстановленныеОтборыВФормеСпискаРегламентныхДокументов(Форма, Список, Настройки) Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СохраняемыеНастройки = Новый Структура; // имена см. в УстановитьОтборыВФормеСпискаРегламентныхДокументов()
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_Организация");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_НачалоПериода");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_КонецПериода");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_ТипОперации");
	
	Для Каждого КлючИЗначение Из СохраняемыеНастройки Цикл
		
		ОтборКомпоновки = Настройки.Элементы.Найти(КлючИЗначение.Ключ);
		
		Если ОтборКомпоновки <> Неопределено Тогда
			ОтборКомпоновки.Использование = Ложь;
			ОтборКомпоновки.ИдентификаторПользовательскойНастройки = "";
			ОтборКомпоновки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции


// Устанавливает отборы в формах списков регистров, открываемых из формы ошибок, найденных при проверке.
//
// Параметры:
//	Форма 					  - УправляемаяФорма - форма списка регистра
//	Список 					  - ДинамическийСписок - записи регистра в этой форме
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца
//
Функция УстановитьОтборыВФормеСпискаРегистра(Форма, Список) Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Форма.Параметры.Отбор.Очистить();
	
	ОтборДляРасшифровки = Форма.Параметры.ОтборДляРасшифровки;
	
	// Отбор по периоду.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Период",
		НачалоМесяца(ОтборДляРасшифровки.Период),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		СокрЛП(Новый УникальныйИдентификатор));
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Период",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		КонецМесяца(ОтборДляРасшифровки.Период),
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		СокрЛП(Новый УникальныйИдентификатор));
	
	// Отбор по остальным полям расшифровки.
	Для Каждого КлючИЗначение Из ОтборДляРасшифровки Цикл
		
		Если НРег(КлючИЗначение.Ключ) = НРег("Период") Тогда
			Продолжить; // этот отбор уже установлен
		ИначеЕсли Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			Продолжить; // нет такого поля в списке
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			КлючИЗначение.Ключ,
			КлючИЗначение.Значение,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			СокрЛП(Новый УникальныйИдентификатор));
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область ОбщиеТекстыЗапросов

//++ НЕ УТ
// Возвращает текст запроса для определения состояния отражения документов в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - текст запроса для определения состояния отражения документов.
//
Функция ТекстЗапросаСостояниеОтраженияДокументов() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И НЕ (Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (&СписокПроверяемыхТиповДокументов))
	|	И ДанныеРегистра.ДатаОтражения >= Константы.ДатаНачалаВеденияРеглУчета
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК ДанныеПроверки
	|		ПО ДанныеРегистра.Регистратор = ДанныеПроверки.Документ
	|			И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (&СписокПроверяемыхТиповДокументов)
	|			И ДанныеРегистра.Организация = ДанныеПроверки.Организация
	|			И ДанныеПроверки.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы
	|	И ДанныеРегистра.ДатаОтражения >= Константы.ДатаНачалаВеденияРеглУчета
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК ДанныеПроверки
	|		ПО ДанныеРегистра.Регистратор = ДанныеПроверки.Документ
	|			И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (&СписокПроверяемыхТиповДокументов)
	|			И ДанныеРегистра.Организация = ДанныеПроверки.Организация
	|			И ДанныеПроверки.СтатусПроверки <> ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И Константы.ОтражатьВРеглУчетеТолькоПроверенныеДокументы
	|	И ДанныеРегистра.ДатаОтражения >= Константы.ДатаНачалаВеденияРеглУчета
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|	И ДанныеРегистра.ДатаОтражения <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И (НЕ ДанныеПроверки.Документ ЕСТЬ NULL
	|		ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (&СписокПроверяемыхТиповДокументов))
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) > 0
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИспользоватьРеглУчет", ?(ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"), "ИСТИНА", "ЛОЖЬ"));
	
	СписокПроверяемыхТипов = ПроверкаДокументовСервер.ПроверяемыеТипыДокументов();
	МассивИменТиповДокументов = Новый Массив;
	
	Для Каждого ПроверяемыйТип Из СписокПроверяемыхТипов Цикл
		МассивИменТиповДокументов.Добавить("ТИП(Документ."+Метаданные.НайтиПоТипу(ПроверяемыйТип).Имя+")");
	КонецЦикла;
	
	СтрокаИменПроверяемыхТипов = СтрСоединить(МассивИменТиповДокументов, ",");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокПроверяемыхТиповДокументов", СтрокаИменПроверяемыхТипов);
		
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТ

// Возвращает текст запроса для определения состояния отражения документов в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - текст запроса для определения состояния отражения документов.
//
Функция ТекстЗапросаСостояниеФормированияЗаписейКнигПокупокИПродаж() Экспорт
	
	ТекстЗапроса =
	"
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.РегламентнаяОперация
	|	И ДанныеРегистра.Период <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.Месяц) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.СчетФактура) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Месяц <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.СчетФактура) > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает тексты запросов для получения таблицы изменений набора записей регистра накопления при его записи.
// Запросы составляются на основании метаданных регистра: измерений, ресурсов и реквизитов.
//
// Параметры:
//	МетаданныеРегистра - ОбъектМетаданных: РегистрНакопления - метаданные регистра, для которого составляется таблица изменений;
//
// Возвращаемое значение:
//	Структура
//		- ТекстВыборкиНачальныхДанных - Строка - запрос для выполнения в событии "ПередЗаписью" набора данных регистра накопления.
//			Формирует текущие записи регистра и сохраняет их во временную таблицу "НачальныеЗаписи";
//		- ТекстВыборкиТаблицыИзменений - Строка - запрос для получения итоговой таблицы изменений. Выполняется в событии "ПриЗаписи".
//			Составляется объединением таблицы НачальныеЗаписи и новой таблицы записей регистра. Выводятся только записи, по которым есть разницы (Сумма ресурсов не равна 0).
//
Функция ТекстыЗапросовДляПолученияТаблицыИзмененийРегистра(МетаданныеРегистра, Отбор, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Тестирование.ДополнительныеПараметрыФормированияЗапросаСравнения();
	КонецЕсли;
	
	ТаблицаРегистра = МетаданныеРегистра.ПолноеИмя();
	ЭтоРегистрБухгалтерии = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеРегистра) = "РегистрыБухгалтерии";
	
	Если ЭтоРегистрБухгалтерии Тогда
		
		ТаблицаРегистра = ТаблицаРегистра + ".ДвиженияССубконто(, , Регистратор = &Регистратор, , )";
		
	КонецЕсли;
	
	ТекстЗапросаВыборкиНачальныхЗаписей =
	"ВЫБРАТЬ
	|	&ВыборкаПолей
	|ПОМЕСТИТЬ #НачальныеЗаписи
	|ИЗ
	|	#ТаблицаРегистра КАК Записи
	|ГДЕ
	|	&УсловияОтбораПоРегистру
	|ИНДЕКСИРОВАТЬ ПО
	|	&ВыборкаИндексов";
	
	ТекстЗапросаВыборкиИзменений =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ВыборкаПолейТаблицыИзменений
	|ПОМЕСТИТЬ #ТаблицаИзменений
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ВыборкаПолейНачальныхЗаписей
	|	ИЗ
	|		#НачальныеЗаписи КАК НачальныеЗаписи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ВыборкаПолейНовыхЗаписей
	|	ИЗ
	|		#ТаблицаРегистра КАК Записи
	|	ГДЕ
	|		&УсловияОтбораПоРегистру) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	&ВыборкаПолейГруппировки";
	
	ВыборкаПолей = Новый Массив;
	ВыборкаПолейТаблицыИзменений = Новый Массив;
	ВыборкаПолейНачальныхЗаписей = Новый Массив;
	ВыборкаПолейНовыхЗаписей = Новый Массив;
	ВыборкаПолейГруппировки = Новый Массив;
	ВыборкаПолейФильтра = Новый Массив;
	ВыборкаУсловийОтбораПоРегистру = Новый Массив;
	
	ПоляКоллекции = Тестирование.СтруктураПолейКоллекции(МетаданныеРегистра, ДополнительныеПараметры);
	МассивПолей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Измерения, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Реквизиты, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Ресурсы, Истина);	
	МассивРесурсов = ПоляКоллекции.ЧисловыеПоля;
	МассивПолейИндексов = ПоляКоллекции.Измерения;
	
	Для каждого Поле Из МассивПолей Цикл
		
		ТекстПоля = "." + Поле + " КАК " + Поле;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + Поле);
		
	КонецЦикла;
	
	Для каждого Ресурс Из МассивРесурсов Цикл
		
		ТекстПоля = "." + Ресурс + " КАК " + Ресурс;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица." + Ресурс + ") КАК " + Ресурс); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи"+ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("-Записи"+ТекстПоля);
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица." + Ресурс + ") <> 0");
		
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ВыборкаУсловийОтбораПоРегистру.Добавить("Записи." + ЭлементОтбора.Имя + " = " + "&" + ЭлементОтбора.Имя);
			ИндексМассива = МассивПолейИндексов.Найти(ЭлементОтбора.Имя);
			Если ИндексМассива <> Неопределено Тогда
				// удалим из индексов поле, по которому накладывается отбор
				МассивПолейИндексов.Удалить(ИндексМассива);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыборкаУсловийОтбораПоРегистру.Количество() = 0 Тогда
		ВыборкаУсловийОтбораПоРегистру.Добавить("ИСТИНА");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПроверятьКонтрольнуюСумму Тогда
		// Добавим проверку на контрольную сумму (на случай когда числовых ресурсов нет или они равны 0.
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица.КонтрольнаяСумма) КАК КонтрольнаяСумма");
		ВыборкаПолейНачальныхЗаписей.Добавить("1 КАК КонтрольнаяСумма");
		ВыборкаПолейНовыхЗаписей.Добавить("-1 КАК КонтрольнаяСумма");
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица.КонтрольнаяСумма) <> 0");
	КонецЕсли;
	
	ТекстВыборкиПолей = СтрСоединить(ВыборкаПолей, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейТаблицыИзменений = СтрСоединить(ВыборкаПолейТаблицыИзменений, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейНачальныхЗаписей = СтрСоединить(ВыборкаПолейНачальныхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейНовыхЗаписей = СтрСоединить(ВыборкаПолейНовыхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейГруппировки = СтрСоединить(ВыборкаПолейГруппировки, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейФильтра = СтрСоединить(ВыборкаПолейФильтра, Символы.ПС + Символы.Таб + "ИЛИ ");
	ТекстВыборкиПолейИндексов = СтрСоединить(МассивПолейИндексов, "," + Символы.ПС + Символы.Таб);
	
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаПолей", ТекстВыборкиПолей);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#ТаблицаРегистра", ТаблицаРегистра);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&УсловияОтбораПоРегистру",
		СтрСоединить(ВыборкаУсловийОтбораПоРегистру, Символы.ПС + Символы.Таб + "И "));
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаИндексов", ТекстВыборкиПолейИндексов);
	Если МассивПолейИндексов.Количество() = 0 Тогда
		ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, Символы.ПС + "ИНДЕКСИРОВАТЬ ПО" + Символы.ПС + Символы.Таб, "");
	КонецЕсли;
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНачальныхЗаписей", ТекстВыборкиПолейНачальныхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНовыхЗаписей", ТекстВыборкиПолейНовыхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейТаблицыИзменений", ТекстВыборкиПолейТаблицыИзменений);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&УсловияОтбораПоРегистру",
		СтрСоединить(ВыборкаУсловийОтбораПоРегистру, Символы.ПС + Символы.Таб + Символы.Таб + "И "));
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаРегистра", ТаблицаРегистра);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаИзменений", "ТаблицаИзменений"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейГруппировки", ТекстВыборкиПолейГруппировки);
	Если ЗначениеЗаполнено(ТекстВыборкиПолейФильтра) Тогда
		ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + "ИМЕЮЩИЕ" + Символы.ПС + Символы.Таб + ТекстВыборкиПолейФильтра;
	КонецЕсли;
	
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #НачальныеЗаписи";
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	
	Возврат Новый Структура("ТекстВыборкиНачальныхДанных, ТекстВыборкиТаблицыИзменений", ТекстЗапросаВыборкиНачальныхЗаписей, ТекстЗапросаВыборкиИзменений);
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеТекстовыеДанные

// Возвращает текст по умолчанию для гиперссылки "Подробнее".
//
// Возвращаемое значение:
//	Строка - текст "Подробнее"
//
Функция ТекстПодробнееПоУмолчанию() Экспорт
	Возврат НСтр("ru = 'Подробнее';
				|en = 'Details'");
КонецФункции

// Возвращает имя события журнала регистрации для произвольного действия операции закрытия месяца.
//
// Параметры:
//	ДополнениеИмени - Строка - выполняемое действие.
//
// Возвращаемое значение:
//	Строка - имя события
//
Функция ИмяСобытияЖурналаРегистрации(ДополнениеИмени) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Закрытие месяца.%1';
			|en = 'Month-end closing.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		ДополнениеИмени);
	
КонецФункции

// Возвращает служебный символ, означающий что исключение было обработано в обработчике этапа закрытия месяца.
//
// Возвращаемое значение:
//	Строка - служебный символ
//
Функция СлужебныйСимвол_ИсключениеУжеОтработаноВЭтапеРасчета() Экспорт
	
	Возврат Символы.ПС + "#ИсключениеУжеЗафиксировано" + Символы.ПС;
	
КонецФункции

// Возвращает имя служебного свойства, передаваемого в параметры всех открываемых форм.
//
// Возвращаемое значение:
//	Строка - имя служебного свойства.
//
Функция ИмяСлужебногоСвойстваОткрываемыхФорм() Экспорт
	
	Возврат "ЗакрытиеМесяца";
	
КонецФункции

#КонецОбласти


#Область УстановкаБлокировкиФункционалаПриОбновленииИБ

// Проверяет возможность выполнения операции в зависимости от текущего состояния обновления ИБ.
// Если все входящие данные операции еще не обработаны, то операцию выполнять нельзя.
// В этом случае в журнал регистрации будет записана информация о необработанных данных и вызвано исключение.
//
// Параметры:
//	ВходящиеДанные 		  - Соответствие
//							  Ключ - Строка, ОбъектМетаданныхКонфигурации - входящие данные, используемые  операцией
//							  Значение - см. ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки, параметр Отбор
//	ПредставлениеОперации - Строка - пользовательское представление выполняемой операции.
//
Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации) Экспорт
	
	Если НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат; // обновление ИБ завершено полностью
	КонецЕсли;
	
	ТекстОшибкиДляИсключение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
			|Подробнее см. в Журнале регистрации.';
			|en = '%1: cannot execute - infobase update is not finished. 
			|For more information, see the Event log.'"),
		ПредставлениеОперации);
	ТекстОшибкиДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
		    |Корректное выполнение операции будет возможно после того,
			|когда будут успешно завершены все обработчики обновление исходных данных для этой операции.';
			|en = '%1: cannot execute – infobase update is not finished.
			|It will be possible to execute the operation correctly
			|when all the source data update handlers for this operation are finished successfully.'"),
		ПредставлениеОперации);
	
	ДанныеСОтборомПоСсылкам = Новый Массив;
	ОтборПоСсылкам 			= Новый Массив;
	
	ДанныеЗаблокированы = Ложь;
	
	УстановитьПривилегированныйРежим(Истина); // у текущего пользователя может не быть прав на все входящие данные, но проверить надо все
	
	Для Каждого ОписаниеДанных Из ВходящиеДанные Цикл
		
		ОбъектМетаданных = ОписаниеДанных.Ключ;
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
		КонецЕсли;
		
		Отбор = ?(ТипЗнч(ОписаниеДанных.Значение) = Тип("Булево"), Неопределено, ОписаниеДанных.Значение);
		
		Если (Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		 И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
		 ИЛИ ТипЗнч(Отбор) = Тип("Структура") Тогда
			// Проверку независимых регистров сведений выполняем по одному,
			// т.к. для них нет единообразных отборов (по регистратору).
			// Аналогично и для других типов метаданных, если для них задан "сложный" отбор в виде структуры.
			Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОбъектМетаданных, Отбор) Тогда
				
				ДанныеЗаблокированы = Истина;
				
				ЗаписьЖурналаРегистрации(
					ПредставлениеОперации,
					УровеньЖурналаРегистрации.Ошибка,
					ОбъектМетаданных,
					Отбор,
					ТекстОшибкиДляЖурнала);
				
			КонецЕсли;
		Иначе
			ДанныеСОтборомПоСсылкам.Добавить(ОбъектМетаданных.ПолноеИмя());
			Если ТипЗнч(Отбор) = Тип("Массив") Тогда
				// Добавим отбор-массив этого объекта метаданных в общий массив отборов
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСсылкам, Отбор, Истина);
			ИначеЕсли Отбор <> Неопределено Тогда
				// Добавим отбор-ссылку этого объекта метаданных в общий массив отборов
				Если ОтборПоСсылкам.Найти(Отбор) = Неопределено Тогда
					ОтборПоСсылкам.Добавить(Отбор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеСОтборомПоСсылкам.Количество() > 0 Тогда
		
		Если ОтборПоСсылкам.Количество() = 0 Тогда
			ОтборПоСсылкам = Неопределено; // без отбора
		КонецЕсли;
		
		// Проверку всех объектов, для которых возможен отбор по ссылке/регистратору, выполним за один вызов.
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ДанныеСОтборомПоСсылкам, ОтборПоСсылкам) Тогда
			
			ДанныеЗаблокированы = Истина;
			
			ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
				|
				|" + НСтр("ru = 'Необходимо дождаться завершения обработки всех данных следующих типов:';
							|en = 'Wait until data of the following types is processed:'");
			
			Для Каждого ИмяОбъектаМетаданных Из ДанныеСОтборомПоСсылкам Цикл
				// Перечислим имена объектов метаданных, среди которые есть еще не обработанные данные.
				ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
					|- " + ИмяОбъектаМетаданных;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				ПредставлениеОперации,
				УровеньЖурналаРегистрации.Ошибка,
				,
				ОтборПоСсылкам,
				ТекстОшибкиДляЖурнала);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаблокированы Тогда
		// Нельзя выполнять операцию - не завершено обновление всех ее входящих данных.
		ВызватьИсключение ТекстОшибкиДляИсключение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Метод регламентного задания "РасчетКурсовыхРазниц".
//
Процедура ВыполнитьПереоценку() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетКурсовыхРазниц);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Возврат;
	КонецЕсли;
	
	Документы.РасчетКурсовыхРазниц.ВыполнитьПереоценку(ТекущаяДатаСеанса());
	
КонецПроцедуры

// Метод регламентного задания "ЗакрытиеМесяца".
//
Процедура ВыполнитьЗакрытиеМесяца(Организация = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗакрытиеМесяца);
	
	Обработки.ОперацииЗакрытияМесяца.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ();
	
	ОписаниеЗадания = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПолучитьРегламентноеЗаданиеПоОрганизации(Организация);
	
	Если НЕ ОписаниеЗадания.НастройкаСуществует Тогда
		ВызватьИсключение НСтр("ru = 'Не задана настройка регламентного задания закрытия месяца.';
								|en = 'Setting of scheduled jobs of month-end closing is not configured.'");
	КонецЕсли;
	
	// Закрываемый период.
	Если ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодМУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодМУ;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодРУ;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодОУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодОУ;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректная настройка регламентного задания закрытия месяца.';
								|en = 'Incorrect setting of the scheduled job of month-end closing.'");
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодМУ) И ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 		И ОписаниеЗадания.ЗакрываемыйПериодМУ > ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 ИЛИ (ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 		И ОписаниеЗадания.ЗакрываемыйПериодРУ > ОписаниеЗадания.ЗакрываемыйПериодОУ) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректная настройка регламентного задания закрытия месяца.';
								|en = 'Incorrect setting of the scheduled job of month-end closing.'");
	КонецЕсли;
	
	ОписаниеЗадания.Вставить("ПервыйПериод", 	ПервыйПериод);
	ОписаниеЗадания.Вставить("ПоследнийПериод", ОписаниеЗадания.ЗакрываемыйПериодОУ);
	
	// Проверим возможность запуска расчета.
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьСостояниеАктивныхРасчетов();
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания и в регистр выполнения операций
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакЗапускаРасчета(
		ОписаниеЗадания.Организация,
		ИдентификаторРасчета,
		НСтр("ru = 'регламентное задание ""Закрытие месяца""';
			|en = 'the ""Month-end closing"" scheduled job'"),
		ПервыйПериод);
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		ВызватьИсключение АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	// Запустим расчет в фоновом задании.
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ОписаниеЗадания);
	ПараметрыЭкспортнойПроцедуры.Добавить(ИдентификаторРасчета);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("ЗакрытиеМесяцаСервер.ВыполнитьЗакрытиеМесяцаВФоновомЗадании");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить(
		"ОбщегоНазначения.ВыполнитьМетодКонфигурации",
		ПараметрыЗадания,
		ИмяФоновогоЗадания(ИдентификаторРасчета),
		НСтр("ru = 'Регламентное задание закрытия месяца';
			|en = 'Scheduled job of month-end closing'"));
	
КонецПроцедуры

// Вспомогательный метод регламентного задания "ЗакрытиеМесяца".
// Выполняет регламентное задание "ЗакрытиеМесяца" в фоне.
//
Процедура ВыполнитьЗакрытиеМесяцаВФоновомЗадании(ОписаниеЗадания, ИдентификаторРасчета) Экспорт
	
	ТекущийПериод = ОписаниеЗадания.ПервыйПериод;
	
	// Последовательное закрытие месяцев.
	Пока ТекущийПериод <= ОписаниеЗадания.ПоследнийПериод Цикл
		
		ЗакрыватьОУ = (ОписаниеЗадания.ЗакрываемыйПериодОУ = ТекущийПериод);
		ЗакрыватьРУ = (ОписаниеЗадания.ЗакрываемыйПериодРУ = ТекущийПериод);
		ЗакрыватьМУ = (ОписаниеЗадания.ЗакрываемыйПериодМУ = ТекущийПериод);
		
		Если НЕ ЗакрыватьОУ И НЕ ЗакрыватьРУ И НЕ ЗакрыватьМУ Тогда
			ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьПризнакЗапускаРасчета(
			ОписаниеЗадания.Организация,
			ИдентификаторРасчета,
			НСтр("ru = 'регламентное задание ""Закрытие месяца""';
				|en = 'the ""Month-end closing"" scheduled job'"),
			ТекущийПериод);
		
		// Заполним состояния этапов.
		СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
			ТекущийПериод,
			ОписаниеЗадания.Организация);
		
		ПараметрыЗапускаОбновленияСостояния =
			Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных);
		
		ПараметрыЗапускаОбновленияСостояния.ПроверятьДатуЗапрета 	 = Истина;
		ПараметрыЗапускаОбновленияСостояния.ОбновлятьСписокПроверок  = Истина;
		ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа = Истина;
		
		Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
		
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
		
		Если СтруктураДанных.ИзмененияЗапрещены Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЗакрытиеМесяца';
					|en = 'ЗакрытиеМесяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
				,
				СтруктураДанных.ПоясненияКЗапретуИзменений);
			
			Продолжить;
			
		КонецЕсли;
		
		// Последовательно выполним все этапы.
		Для Каждого ТекущаяСтрока Из СтруктураДанных.ТаблицаЭтапы Цикл
			
			Если ТекущаяСтрока.ВыполняетсяВручную Тогда
				Продолжить;
			КонецЕсли;
			
			Если (НЕ ЗакрыватьОУ И ТекущаяСтрока.ОперативныйУчет)
			 ИЛИ (НЕ ЗакрыватьРУ И ТекущаяСтрока.РегламентированныйУчет)
			 ИЛИ (НЕ ЗакрыватьМУ И ТекущаяСтрока.МеждународныйУчет) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
				СтруктураДанных,
				ТекущаяСтрока.Код,
				СтруктураДанных.ТаблицаЭтапы[СтруктураДанных.ТаблицаЭтапы.Количество()-1].Код);
			
			Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ИдентификаторРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// Вызывается из подписки на события ПередЗаписьюКурсовВалют.
//
// Параметры:
//	КурсыВалют - РегистрСведенийНаборЗаписей.КурсыВалют - записываемый набор
//	Движения   - КоллекцияДвижений - Коллекция движения текущего регистратора.
//	Отказ 	   - Булево - Признак отказа от проведения документа.
//
Процедура СчитатьКурсыВалютПередЗаписью(КурсыВалют, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка исключена специально, поскольку данный механизм отрабатывает
	// при получении данных в РИБ.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Курсы.Период    КАК Период,
	|	Курсы.Валюта    КАК Валюта,
	|	Курсы.Курс      КАК Курс,
	|	Курсы.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалютПередЗаписью
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК Курсы
	|ГДЕ
	|	Курсы.Период = &Период";
	
	КурсыВалют.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос.МенеджерВременныхТаблиц = КурсыВалют.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", КурсыВалют.Отбор.Период.Значение);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Вызывается из подписки на события ПроверитьНеобходимостьПереоценки.
// Если изменены курсы валют, то необходимо переоценить денежные и валютные средства, и пересчитать взаиморасчеты.
//
// Параметры:
//	КурсыВалют - РегистрСведенийНаборЗаписей.КурсыВалют - записываемый набор
//	Движения   - КоллекцияДвижений - Коллекция движения текущего регистратора.
//	Отказ 	   - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьНеобходимостьПереоценки(КурсыВалют, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка не выполняется поскольку данный механизм отрабатывает при получении данных в РИБ.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = КурсыВалют.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", КурсыВалют.Отбор.Период.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц,
	|	Т.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТИзмененныеКурсы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Период КАК Период,
	|		Т.Валюта КАК Валюта
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Т.Период КАК Период,
	|			Т.Валюта КАК Валюта,
	|			Т.Курс КАК Курс,
	|			Т.Кратность КАК Кратность
	|		ИЗ
	|			РегистрСведений.КурсыВалют КАК Т
	|		ГДЕ
	|			Т.Период = &Период
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Т.Период,
	|			Т.Валюта,
	|			-Т.Курс,
	|			-Т.Кратность
	|		ИЗ
	|			КурсыВалютПередЗаписью КАК Т) КАК Т
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Период,
	|		Т.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(Т.Курс) <> 0
	|			ИЛИ СУММА(Т.Кратность) <> 0)) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТИзмененныеКурсы.Месяц КАК Месяц
	|ИЗ
	|	ВТИзмененныеКурсы КАК ВТИзмененныеКурсы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // курсы не изменились.
	КонецЕсли;
	
	// Создадим задания к закрытию месяца.
	Запрос.УстановитьПараметр("МассивОрганизаций", Справочники.Организации.ДоступныеОрганизации());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Политики.Период, МЕСЯЦ)) КАК НачалоВеденияУчета
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК Политики
	|		ПО (Политики.Организация = Организации.Ссылка)
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ИзмененныеКурсы.Месяц КАК Месяц,
	|	ИзмененныеКурсы.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмененныеКурсы КАК ИзмененныеКурсы
	|		ПО Организации.НачалоВеденияУчета <= ИзмененныеКурсы.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Месяц КАК Месяц,
	|	Т.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствИФинансовыхИнструментов) КАК Операция
	|ИЗ
	|	ВТИзменения КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // нет данных для формирования заданий к расчету
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
	// Создадим задания к распределению расчетов.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Месяц КАК Месяц,
	|	Т.Валюта КАК Валюта
	|ИЗ
	|	ВТИзменения КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗаданияКРаспределениюРасчетовСКлиентами""      КАК ИмяРегистраЗаданий,
	|	Клиенты.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
	|	Клиенты.АналитикаУчетаПоПартнерам.Организация    КАК Организация,
	|	Клиенты.ЗаказКлиента                             КАК ОбъектРасчетов,
	|	&НачалоМесяца                                    КАК Месяц
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Клиенты
	|ГДЕ
	|	Клиенты.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И Клиенты.Валюта = &Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗаданияКРаспределениюРасчетовСПоставщиками""      КАК ИмяРегистраЗаданий,
	|	Поставщики.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
	|	Поставщики.АналитикаУчетаПоПартнерам.Организация    КАК Организация,
	|	Поставщики.ЗаказПоставщику                          КАК ОбъектРасчетов,
	|	&НачалоМесяца                                       КАК Месяц
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Поставщики
	|ГДЕ
	|	Поставщики.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И Поставщики.Валюта = &Валюта";
	
	Пока Выборка.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Валюта", 	  Выборка.Валюта);
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Выборка.Месяц));
		Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Выборка.Месяц));
		
		ВыборкаРасчетов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаРасчетов.Следующий() Цикл
			Задания = РегистрыСведений[ВыборкаРасчетов.ИмяРегистраЗаданий].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Задания, ВыборкаРасчетов);
			Задания.НомерЗадания = РегистрыСведений[ВыборкаРасчетов.ИмяРегистраЗаданий].ПолучитьНомерЗадания();
			Задания.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из подписки на события "ОчиститьЗаданияПередУдалениемДокумента".
// Производится очистка измерения "Документ" по регистрам "Задания...",
// где в текущих записях используется удаляемый документ.
//
// Параметры:
//  Источник - ДокументСсылка - Ссылка на удаляемый документ.
//	Отказ 	 - Булево - Признак необходимости прерывания удаления объекта.
//
Процедура ОчиститьЗаданияПередУдалениемДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.ИмяРегистра               КАК ИмяРегистра,
	|	Задания.Месяц                     КАК Месяц,
	|	Задания.НомерЗадания              КАК НомерЗадания,
	|	Задания.Документ                  КАК Документ,
	|	Задания.Операция                  КАК Операция,
	|	Задания.Организация               КАК Организация,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	Задания.НомерПакета               КАК НомерПакета,
	|	Задания.ОбъектУчета               КАК ОбъектУчета,
	|	Задания.ОсновноеСредство          КАК ОсновноеСредство,
	|	Задания.Пропускать                КАК ПропускатьПриЗаписи
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуСебестоимости"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		НЕОПРЕДЕЛЕНО         КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО         КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО         КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКЗакрытиюМесяца"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		Задания.Операция     КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО         КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО         КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.Операция = Дубли.Операция
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСКлиентами"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация              КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.Организация = Дубли.Организация
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСПоставщиками"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация               КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.Организация = Дубли.Организация
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	//++ НЕ УТ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуАмортизацииОС"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация               КАК Организация,
	|		НЕОПРЕДЕЛЕНО                      КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектРасчетов,
	|		Задания.НомерПакета               КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.НомерПакета = Дубли.НомерПакета
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуАмортизацииНМА"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация               КАК Организация,
	|		НЕОПРЕДЕЛЕНО                      КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектРасчетов,
	|		Задания.НомерПакета               КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.НомерПакета = Дубли.НомерПакета
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуСтоимостиВНА"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация               КАК Организация,
	|		НЕОПРЕДЕЛЕНО                      КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		Задания.ОбъектУчета               КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.ОбъектУчета = Дубли.ОбъектУчета
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКФормированиюДвиженийПоВНА"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация               КАК Организация,
	|		НЕОПРЕДЕЛЕНО                      КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		Задания.ОбъектУчета               КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.ОбъектУчета = Дубли.ОбъектУчета
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	//-- НЕ УТ
	|	) КАК Задания
	|ИТОГИ ПО
	|	Задания.ИмяРегистра
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	ВыборкаЗаданий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаданий.Следующий() Цикл
		ЗаданияКОчистке = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ЗаданияКОчистке.Отбор.Документ.Установить(Источник.Ссылка);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКОчистке, Истина);
		
		ЗаданияКЗаписи = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ВыборкаЗаписей = ВыборкаЗаданий.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл 
			Если Не ВыборкаЗаписей.ПропускатьПриЗаписи Тогда
				КЗаписи = ЗаданияКЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(КЗаписи, ВыборкаЗаписей);
			КонецЕсли;
		КонецЦикла;
		Попытка
			Если ЗаданияКЗаписи.Количество() <> 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКЗаписи, Ложь);
			КонецЕсли;
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление помеченных объектов';
					|en = 'Deletion of marked objects'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеПроверокСостоянияСистемы

// Заполняет группы проверок, выполняемых в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаГруппПроверок - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьГруппыПроверокДляРегистрации().
//
Процедура ЗаполнитьГруппыПроверокДляРегистрации(ТаблицаГруппПроверок) Экспорт
	
	ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
	ОписаниеГруппыПроверок.ИдентификаторРодителя = "";
	ОписаниеГруппыПроверок.Наименование = НСтр("ru = 'Закрытие месяца';
												|en = 'Month-end closing'");
	ОписаниеГруппыПроверок.КонтекстВыполнения = Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка();
	ОписаниеГруппыПроверок.Идентификатор = "ЗакрытиеМесяца";
	
	ТаблицаЭтапов = Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца();
	
	Для Каждого ТекущаяСтрока Из ТаблицаЭтапов Цикл
		
		ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
		ОписаниеГруппыПроверок.ИдентификаторРодителя = "ЗакрытиеМесяца";
		ОписаниеГруппыПроверок.Наименование = ТекущаяСтрока.Наименование;
		ОписаниеГруппыПроверок.КонтекстВыполнения = ТекущаяСтрока.Код;
		ОписаниеГруппыПроверок.Идентификатор = "ГруппаПроверокЭтапаЗакрытияМесяца";
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет проверки, выполняемые в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации().
//
Процедура ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	
	// Заполним проверки операций закрытия месяца.
	ОписаниеПроверок_РасчетПартийИСебестоимости(ТаблицаПроверок);
	ОписаниеПроверок_ИсправлениеОшибокВИсходныхДанных(ТаблицаПроверок);
	ОписаниеПроверок_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ТаблицаПроверок);
	ОписаниеПроверок_РаспределениеРасходовБудущихПериодов(ТаблицаПроверок);
	//++ НЕ УТ
	ОписаниеПроверок_СписаниеЗатратНаВыпускБезРаспоряжений(ТаблицаПроверок);
	ОписаниеПроверок_НачислениеСписаниеРезервовПредстоящихРасходов(ТаблицаПроверок);
	ОписаниеПроверок_РаспределениеМатериаловИРаботНаСебестоимостьПродукции21(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеПроизводстваБезЗаказов(ТаблицаПроверок);
	//++ НЕ УТКА
	ОписаниеПроверок_ОформлениеПередачМатериаловВПроизводство(ТаблицаПроверок);
	ОписаниеПроверок_ПланированияПроизводстваПродукцииБезСпецификаций(ТаблицаПроверок);
	//-- НЕ УТКА
	ОписаниеПроверок_РаспределениеМатериаловИРаботНаСебестоимостьПродукции22(ТаблицаПроверок);
	ОписаниеПроверок_НастройкаПоказателейДляРаспределенияРасходовНаСебестоимостьПродукции(ТаблицаПроверок);
	//-- НЕ УТ
	ОписаниеПроверок_ОформлениеПередачТоваров(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеОстатковТоваровКПередаче(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеВыкупаТоваров(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеОтчетовКомитентамОСписании(ТаблицаПроверок);
	//++ НЕ УТ
	НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ОписаниеПроверок_ФормированиеРезервовПоСомнительнымДолгам(ТаблицаПроверок);
	ОписаниеПроверок_НастройкаРаспределенияРасходов(ТаблицаПроверок);
	//-- НЕ УТ
	ОписаниеПроверок_РаспределениеДоходовИРасходовПоНаправлениямДеятельности(ТаблицаПроверок);
	
	// Также создадим служебные контекстные проверки,
	// к которым можно записывать сообщения о проблемах, диагностированных при выполнении расчета.
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ОперацииЗакрытияМесяца.ЗначенияПеречисления Цикл
		
		ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			ИдентификаторСлужебнойПроверкиЭтапа(Перечисления.ОперацииЗакрытияМесяца[МетаЗначение.Имя]),
			Перечисления.ОперацииЗакрытияМесяца[МетаЗначение.Имя],
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ВоВремяРасчета,
			"");
		ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Истина;
		
		ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проблемы, диагностированные при выполнении операции ""%1""';
					|en = 'Issues found when executing the ""%1"" operation'"),
				МетаЗначение.Синоним),
			НСтр("ru = 'Служебная контекстная проверка для регистрации проблем, диагностированных в ходе расчета.';
				|en = 'Service context check to register issues found during the calculation. '"));
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает служебную проверку этапа закрытия месяца.
// К таким проверкам можно записывать сообщения о проблемах, диагностированных при выполнении расчета.
//
// Параметры:
//	ЭтапРасчета 				- ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца
//	ВыдаватьОшибкуПриОтсутствии - Булево - выдавать ошибку если служебная проверка этапа не найдена.
//
// Возвращаемое значение:
//	СправочникСсылка.ПроверкиСостоянияСистемы - служебная проверка этапа закрытия месяца.
//
Функция СлужебнаяПроверкаЭтапа(ЭтапРасчета, ВыдаватьОшибкуПриОтсутствии = Истина) Экспорт
	
	Проверка = АудитСостоянияСистемы.НайтиПроверкуПоКлючевымПолям(
		ЭтапРасчета,
		ИдентификаторСлужебнойПроверкиЭтапа(ЭтапРасчета));
	
	Если НЕ ЗначениеЗаполнено(Проверка) И ВыдаватьОшибкуПриОтсутствии Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдена служебная контекстная проверка для операции ""%1""';
				|en = 'Service context check for the ""%1"" operation was not found'"),
			СокрЛП(ЭтапРасчета));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Проверка;
	
КонецФункции

// Возвращает идентификатор служебной проверки этапа закрытия месяца.
//
// Параметры:
//	ЭтапРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//
// Возвращаемое значение:
//	Строка - идентификатор служебной проверки.
//
Функция ИдентификаторСлужебнойПроверкиЭтапа(ЭтапРасчета)
	
	Идентификатор =
		"СлужебнаяКонтекстнаяПоОрганизациямПоПериодам_"
		+ ОбщегоНазначения.ИмяЗначенияПеречисления(ЭтапРасчета);
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область ОписаниеПараметровОперацийЗакрытияМесяца

// Формирует описание группа технологических параметров механизма закрытия месяца.
//
Функция ОписаниеГруппПараметровОперацииЗакрытияМесяца() Экспорт
	
	ОписаниеГруппПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеГруппПараметровОперации();
	РежимОтладки 			= ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "РегистрацияОшибок";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Регистрация ошибок';
										|en = 'Register errors'");
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, влияющие на регистрацию ошибок при расчете этапов закрытия месяца.';
			|en = 'Parameters that affect error registration while calculating month-end closing stages.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "Отладка";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Отладка расчета';
										|en = 'Calculation debugging'");
	ОписаниеГруппы.Скрыть		= НЕ РежимОтладки;
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, используемые для отладки этапов закрытия месяца.
		|Изменять данные параметры рекомендуется только в тестовых информационных базах!';
		|en = 'Parameters used to debug month-end closing stages.
		|These parameters can be changed only in test infobases.'");
		
	Возврат ОписаниеГруппПараметров;
	
КонецФункции

// Формирует описание технологических параметров механизма закрытия месяца.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. ИнициализироватьОписаниеПараметровОперации() в модуле менеджера значения константы НастройкиЗакрытияМесяца.
//
Функция ОписаниеТехнологическихПараметровЗакрытияМесяца() Экспорт
	
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	РежимОтладки	   = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	Родитель = "РегистрацияОшибок";
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "КоличествоРегистрируемыхОднотипныхОшибок";
	ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Количество регистрируемых ошибок одного вида';
													|en = 'Number of registered errors of one kind'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС     	  = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 100;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'Предназначен для ускорения обновления состояния и выполнения расчета операций.
		|Если в результате выполнения какой-либо проверки найдено большое количество однотипных ошибок,
		|то как правило нет смысла регистрировать их все - надо разбираться с причинами возникновения этих ошибок.
		|Если указано значение 0, то будут зарегистрированы все найденные ошибки.';
		|en = 'Designed to speed up the state update and perform the operation calculation.
		|If a lot of similar errors are found as a result of any check, do not register them and try to find out the reasons of these errors.
		|If the value is set to 0, then all found errors will be registered.
		|'");
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "ДублироватьНайденныеПроблемыВЖурналеРегистрации";
	ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Дублировать найденные проблемы в журнале регистрации';
													|en = 'Duplicate found issues in the event log'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'Определяет поведение механизма закрытия месяца в части работы с журналом регистрации.
		|Если установлено значение Истина, то информация о всех найденных проблемах, регистрируемые в механизме ""Аудит состояния системы"",
		|будет дублироваться в журнале регистрации.';
		|en = 'Defines the behavior of month-end closing mechanism for the event log.
		|If True value is set, information about all found issues which are registered in the ""System state audit"" mechanism
		|will be duplicated in the event log.'");
	
	Родитель = "Отладка";
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ";
	ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Не проверять окончание обновления информационной базы';
													|en = 'Do not check infobase update end'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'Позволяет пропустить проверку окончания обновления информационной базы.
		|Если это свойство не установлено и обновление входящих данных механизма расчета еще не завершено,
		|то расчет выполняться не будет, т.к. его входящие данные могут быть некорректны.';
		|en = 'Allows you to skip the infobase update check end.
		|If this property is not set and incoming data of the calculator is not updated,
		|calculation will not be executed since its incoming data might be incorrect.'");
	
	Возврат ОписаниеПараметров;
	
КонецФункции

#КонецОбласти


#Область МетодыДляОписанияЭтапов

Функция СтруктураОписанияДействия()
	
	Описание = Новый Структура;
	
	Описание.Вставить("ВидДействия", 					  Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ПустаяСсылка());
	Описание.Вставить("Обработчик",  					  "");
	Описание.Вставить("ИмяФормы",    					  "");
	Описание.Вставить("ИмяОбъектаМетаданных",			  "");
	Описание.Вставить("НаКлиенте",   					  Ложь);
	Описание.Вставить("НаСервере",   					  Ложь);
	Описание.Вставить("ОткрыватьВместоЖР", 				  Ложь);
	Описание.Вставить("НеТребуетсяПриУспешномВыполнении", Ложь);
	
	Описание.Вставить("ПараметрыФормы", 				  Новый Структура);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти


#Область МетодыДляРаботыСПроблемамиСостоянияСистемы

Функция КоличествоРегистрируемыхОднотипныхОшибок()
	
	ЗначенияПараметров = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.КоличествоРегистрируемыхОднотипныхОшибок;
	
КонецФункции

Функция ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки)
	
	// Подготовка параметров расчета.
	ПараметрыРасчета = Новый Структура("ПериодРегистрации, МассивОрганизаций");
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	// Отбор по периоду.
	Если ДополнительныеПараметры.Свойство("Период") Тогда
		Если ТипЗнч(ДополнительныеПараметры.Период) = Тип("СтандартныйПериод") Тогда
			ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.Период.ДатаНачала);
		Иначе // тип значения - Дата
			ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.Период);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.Свойство("ПериодРегистрации") Тогда
		ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.ПериодРегистрации);
	Иначе
		ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	// Отбор по организациям.
	Если ДополнительныеПараметры.Свойство("МассивОрганизаций") Тогда
		ПараметрыРасчета.МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ДополнительныеПараметры.МассивОрганизаций);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.МассивОрганизаций) Тогда
		ПараметрыРасчета.МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
	КонецЕсли;
	
	// Заполним отборы в параметрах проверки.
	ПараметрыПроверки.Отборы.Очистить();
	
	Для Каждого ТекущаяОрганизация Из ПараметрыРасчета.МассивОрганизаций Цикл
		НоваяСтрока = ПараметрыПроверки.Отборы.Добавить();
		НоваяСтрока.Организация 	  = ТекущаяОрганизация;
		НоваяСтрока.ПроверяемыйПериод = ПараметрыРасчета.ПериодРегистрации;
	КонецЦикла;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки(ПараметрыПроверки)
	
	ПараметрыРасчета = ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки);
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПараметрыРасчета", ПараметрыРасчета);
	ПараметрыОбработчика.Вставить("ДанныеЭтапа",	  СформироватьОписаниеДанныхЭтапа(ПараметрыПроверки.КонтекстВыполнения));
	ПараметрыОбработчика.Вставить("ТаблицаПояснения", Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуПоясненийКЭтапам());
	
	Если ДополнительныеПараметры.Свойство("МенеджерВременныхТаблиц") Тогда
		// Данные для проверки уже подготовлены - ее надо выполнить безусловно.
		ПараметрыОбработчика.Вставить("МенеджерВременныхТаблиц", ДополнительныеПараметры.МенеджерВременныхТаблиц);
	Иначе
		Если ДополнительныеПараметры.Свойство("Состояние")
		 И СостояниеЭтапаОпределено(ДополнительныеПараметры) И ТребуетсяПересчетЭтапа(ДополнительныеПараметры) Тогда
			// Проверять состояние уже не надо - оно известно (требуется пересчет этапа)
		Иначе
			// Проверим использование этапа расчета (необходимость выполнения проверки)
			// и заодно подготовим необходимые данные для проверки в процедуре проверки использования этапа.
			Обработки.ОперацииЗакрытияМесяца.ПроверитьИспользованиеЭтапа(ПараметрыОбработчика);
		КонецЕсли;
	КонецЕсли;
	 
	Возврат ПараметрыОбработчика;
	
КонецФункции

Функция СформироватьОписаниеДанныхЭтапа(Код)
	
	ТаблицаЭтапы = Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца();
	СтрокаЭтапа  = ТаблицаЭтапы.Найти(Код, "Код"); 
	
	Если СтрокаЭтапа = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено описание операции закрытия месяца ""%1""';
				|en = 'Description of the ""%1"" month-end closing operation was not found'"),
			СокрЛП(Код));
			
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ДанныеЭтапа = ОбщегоНазначенияУТ.ПреобразоватьСтрокуТаблицыВСтруктуру(СтрокаЭтапа);
	
	Возврат ДанныеЭтапа;
	
КонецФункции


Процедура ДобавитьОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, ИсточникДанных, ОписаниеПроблемы, СписокПолей, ИмяПоляОбъекта)
	
	Представление = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		
		ИмяПоля = ЭлементСписка.Значение;
		ЗначениеПоля = ИсточникДанных[ИмяПоля];
		
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) И ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Представление = Представление + ?(Представление = "", "", "; ")
				+ ЭлементСписка.Представление + ": """
				+ СокрЛП(ЗначениеПоля) + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	АудитСостоянияСистемы.ДобавитьОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		ИсточникДанных[ИмяПоляОбъекта],
		Представление);
		
	ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстВыполнения, ПараметрыПроверки.Проверка, Представление);
		
КонецПроцедуры

Процедура ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, ИсточникДанных, ОписаниеПроблемы, СписокПолей, ИмяРегистраДляРасшифровки = "")
	
	Расшифровка   = Новый Структура("ИмяРегистраДляРасшифровки", ИмяРегистраДляРасшифровки);
	Представление = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		
		ИмяПоля = ЭлементСписка.Значение;
		ЗначениеПоля = ИсточникДанных[ИмяПоля];
		
		Расшифровка.Вставить(ИмяПоля, ЗначениеПоля);
		
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) И ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Представление = Представление + ?(Представление = "", "", "; ")
				+ ЭлементСписка.Представление + ": """
				+ СокрЛП(ЗначениеПоля) + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	АудитСостоянияСистемы.ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		Расшифровка,
		Представление);
	
	ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстВыполнения, ПараметрыПроверки.Проверка, Представление);
	
КонецПроцедуры

Процедура ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(ПараметрыПроверки, ОписаниеПроблемы, КоличествоОбъектов)
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Еще найдено аналогичных проблем: %1';
			|en = 'Similar issues found: %1'"),
		СокрЛП(КоличествоОбъектов));
	
	АудитСостоянияСистемы.ДобавитьОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		Неопределено,
		Представление);
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстВыполнения, ПараметрыПроверки.Проверка, Представление);
	
КонецПроцедуры

#КонецОбласти


#Область МетодыДляРаботыСЗаданияКЗакрытиюМесяца

Функция КоллекцияКонтрольныхРегистров()
	
	Коллекция = Новый Массив();
	Коллекция.Добавить("СостоянияНМАОрганизацийЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СостоянияОСОрганизацийЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ВыручкаИСебестоимостьПродажЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияДенежныеСредстваДоходыРасходыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияДоходыРасходыПрочиеАктивыПассивыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияКонтрагентДоходыРасходы");
	Коллекция.Добавить("ДенежныеДокументыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваБезналичныеЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваВКассахККМЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваВПутиЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваНаличныеЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваУПодотчетныхЛицЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("КнигаУчетаДоходовИРасходовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПартииПрочихРасходовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНМатериалыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНОСиНМАЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНТоварыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасчетыПоФинансовымИнструментамЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СтоимостьОСЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СтоимостьНМАЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПервоначальныеСведенияНМАЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПервоначальныеСведенияНМАНалоговыйУчетЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПервоначальныеСведенияОСЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПервоначальныеСведенияОСНалоговыйУчетЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РезервыПоСомнительнымДолгамЗаданияКЗакрытиюМесяца");
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Коллекция.Добавить("РасчетыСКлиентамиЗаданияКЗакрытиюМесяца");
		Коллекция.Добавить("РасчетыСПоставщикамиЗаданияКЗакрытиюМесяца");
		Коллекция.Добавить("СуммыДокументовВВалютеРеглЗаданияКЗакрытиюМесяца");
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

#КонецОбласти

#Область МетодыДляРаботыСФоновымиЗаданиямиЗакрытияМесяца

Функция ТекущееСостояниеФоновогоЗадания(КлючИлиИдентификаторЗадания) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "");
	Результат.Вставить("НеНайдено", Ложь);
	Результат.Вставить("Активно", Ложь);
	Результат.Вставить("Завершено", Ложь);
	Результат.Вставить("ЗавершеноАварийно", Ложь);
	Результат.Вставить("Отменено", Ложь);
	Результат.Вставить("Начало");
	Результат.Вставить("Конец");
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Задание");
	
	Если ТипЗнч(КлючИлиИдентификаторЗадания) = Тип("Строка") Тогда
		
		ОтборЗаданий = Новый Структура("Ключ", КлючИлиИдентификаторЗадания);
		Задания      = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
		
		Если Задания.Количество() = 0 Тогда
			Задание = Неопределено;
		Иначе
			Задание = Задания[0];
		КонецЕсли;
		
	Иначе
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючИлиИдентификаторЗадания);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		
		Результат.НеНайдено = Истина;
		
		Если ТипЗнч(КлючИлиИдентификаторЗадания) = Тип("Строка") Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновое задание с ключом ""%1"" не найдено.';
					|en = 'Background job with the ""%1"" key is not found.'"),
				СокрЛП(КлючИлиИдентификаторЗадания));
		Иначе
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновое задание с идентификатором ""%1"" не найдено.';
					|en = 'Background job with the ""%1"" ID is not found.'"),
				СокрЛП(КлючИлиИдентификаторЗадания));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Задание 	   = Задание;
	Результат.Наименование = Задание.Наименование;
	Результат.Начало 	   = Задание.Начало;
	Результат.Конец 	   = Задание.Конец;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Активно = Истина;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.Завершено = Истина;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ЗавершеноАварийно = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Отменено = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтменитьВыполнениеФоновогоЗадания(ИдентификаторЗадания) Экспорт 
	
	СостояниеЗадания = ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания);
	
	Если СостояниеЗадания.Активно Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			СостояниеЗадания.Задание.Отменить();
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Отмена выполнения фонового задания';
													|en = 'Cancel the background job'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает имя уникального фонового задания закрытия месяца
//
// Возвращаемое значение:
//	Строка - Имя фонового задания с идентификатором расчета.
//
Функция ИмяФоновогоЗадания(ИдентификаторРасчета) Экспорт
	
	Возврат "ЗакрытиеМесяца_" + СокрЛП(ИдентификаторРасчета);
	
КонецФункции

#КонецОбласти


#Область МетодыДляЗамераПроизводительности

Процедура УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных = 1) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных);
	
КонецПроцедуры

Функция РазмерыВременныхТаблиц(КонтейнерВременныхТаблиц, ПараметрыОбработчика = Неопределено) Экспорт
	
	РазмерыВременныхТаблиц = УниверсальныеМеханизмыПартийИСебестоимости.РазмерыВременныхТаблиц(КонтейнерВременныхТаблиц);
	
	Если ЗначениеЗаполнено(ПараметрыОбработчика) Тогда
		УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РазмерыВременныхТаблиц.ОбщийРазмерТаблиц);
	КонецЕсли;
	
	Возврат РазмерыВременныхТаблиц;
	
КонецФункции

Функция РазмерВременнойТаблицы(КонтейнерВременныхТаблиц, ИмяТаблицы, ПараметрыОбработчика = Неопределено) Экспорт
	
	КоличествоДанных = УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(КонтейнерВременныхТаблиц, ИмяТаблицы);
	
	Если ЗначениеЗаполнено(ПараметрыОбработчика) Тогда
		УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных);
	КонецЕсли;
	
	Возврат КоличествоДанных;
	
КонецФункции

#КонецОбласти

#Область МетодыДляТестированияЗакрытияМесяца

#Область ПроверкаРасчетаЭтапов

// Выполняется в фоновом задании, создаваемом в обработке ТестированиеОперацийЗакрытийМесяца.
//
// Параметры:
//	Период - Дата - тестируемый период.
//
Процедура ТестированиеЗакрытияМесяца(Период) Экспорт
	
	// Проверим возможность запуска расчета.
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьСостояниеАктивныхРасчетов();
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания и в регистр выполнения операций
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакЗапускаРасчета(
		,
		ИдентификаторРасчета,
		НСтр("ru = 'Тестирование операций закрытия месяца';
			|en = 'Test month-end closing operations '"),
		Период);
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		ВызватьИсключение АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	// Заполним состояния этапов.
	СтруктураДанных = ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период);
	
	// Последовательно выполним все этапы (в т.ч. этапы в статусе "Выполнен успешно").
	Для Каждого ТекущаяСтрока Из СтруктураДанных.ТаблицаЭтапы Цикл
		
		Если ТекущаяСтрока.ВыполняетсяВручную
		 И ТекущаяСтрока.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			
			СтруктураПоиска = Новый Структура("Родитель", ТекущаяСтрока.Код);
			СтрокиПояснений = СтруктураДанных.ТаблицаПоясненияЭтапов.НайтиСтроки(СтруктураПоиска);

			Для Каждого СтрокаПояснения Из СтрокиПояснений Цикл
				
				Если СтрокаПояснения.Состояние <> Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка
				 И СтрокаПояснения.Состояние <> Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение Тогда
					Продолжить;
				КонецЕсли;
				
				// Продублируем проблемы, диагностированные для ручной операции, в журнале регистрации для последующего анализа.
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(
						ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущаяСтрока.Код)),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СтрокаПояснения.Наименование);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ВыполняетсяВручную
		 ИЛИ ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		
		ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
			СтруктураДанных,
			ТекущаяСтрока.Код,
			СтруктураДанных.ТаблицаЭтапы[СтруктураДанных.ТаблицаЭтапы.Количество()-1].Код);
		
		ПараметрыЗапускаРасчета.АвтоматическоеТестирование = Истина;
		
		Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
		
	КонецЦикла;
	
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ИдентификаторРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСостоянияЭтапов

// Определяет состояние этапов закрытия месяца для целей тестирования.
//
// Параметры:
//	Период 			  - Дата - тестируемый период
//	МассивОрганизаций - СправочникСсылка.Организация, Массив - организации для тестирования.
//
// Возвращаемое значение:
//	Структура - описание этапов закрытия месяца, см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов().
//
Функция ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период, МассивОрганизаций = Неопределено) Экспорт
	
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		НачалоМесяца(Период),
		МассивОрганизаций);
	
	ПараметрыЗапускаОбновленияСостояния =
		Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных);
	
	ПараметрыЗапускаОбновленияСостояния.ОбновлятьСписокПроверок    = Истина;
	ПараметрыЗапускаОбновленияСостояния.АвтоматическоеТестирование = Истина;
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Сохраняет информацию о состоянии закрытия месяца в файлы.
// Сохраняются значимые колонки таблиц ТаблицаЭтапы и ТаблицаСгруппированныхПояснений.
// Сравнив выгруженные файлы разных версий можно получить различия в состоянии этапов закрытия месяца
// и таким образом выявить "раскрывшиеся" периоды, которые в предыдущей версии были закрыты.
//
// Сохраняемые файлы имеют формат имени "<Тип выгруженных данных>_<Тестируемый период>.mxl",
// поэтому выгрузку данных одного и того же периода в разных ИБ надо выполнять в разные каталоги,
// иначе вторая выгрузка затрет результаты первой.
//
// Параметры:
//	КаталогДляВыгрузки - Строка - путь к каталогу для сохранения данных
//	Период 			   - Дата - тестируемый период
//	МассивОрганизаций  - СправочникСсылка.Организация, Массив - организации для тестирования.
//
// Возвращаемое значение:
//	Строка - информация об ошибке записи файла; если ошибок не было то возвращается пустая строка.
//
Функция СохранитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(КаталогДляВыгрузки, Период, МассивОрганизаций = Неопределено) Экспорт
	
	// Проверим некорректный вызов процедуры.
	Если НЕ ЗначениеЗаполнено(Период) ИЛИ НЕ ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда
		Возврат НСтр("ru = 'Не указаны обязательные параметры';
					|en = 'Required parameters are not specified'");
	КонецЕсли;
	
	// Заполним состояния этапов.
	СтруктураДанных = ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период, МассивОрганизаций);
	
	ТаблицаЭтапы = СтруктураДанных.ТаблицаЭтапы.Скопировать(, "Код, Состояние");
	ТаблицаСгруппированныхПояснений = СтруктураДанных.ТаблицаСгруппированныхПояснений.Скопировать(, "Родитель, Наименование, Состояние");
	
	// Колонку этапа сохраним в виде имени значения перечисления.
	ЗаполнитьКолонкуИмениЭтапаДляТестирования(ТаблицаЭтапы, "Код");
	ТаблицаЭтапы.Колонки.Удалить("Код");
	
	ЗаполнитьКолонкуИмениЭтапаДляТестирования(ТаблицаСгруппированныхПояснений, "Родитель");
	ТаблицаСгруппированныхПояснений.Колонки.Удалить("Родитель");
	
	ТаблицаЭтапы.Сортировать("Этап, Состояние");
	ТаблицаСгруппированныхПояснений.Сортировать("Этап, Наименование, Состояние");
	
	// Сохраним таблицы в файлах.
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки));
	
	СоздатьКаталог(Каталог);
	
	ИменаФайлов = ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период);
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(
		ТаблицаЭтапы,
		Каталог + ИменаФайлов.ТаблицаЭтапы);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(
		ТаблицаСгруппированныхПояснений,
		Каталог + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Сравнивает две выгрузки состояний операций закрытия месяца.
// Выгрузка выполняется функцией СохранитьСостояниеЭтаповЗакрытияМесяцаДляТестирования().
//
// Параметры:
//	Период 			      - Дата - тестируемый период
//	КаталогДляВыгрузки1   - Строка - путь к каталогу для сохранения данных №1
//	КаталогДляВыгрузки2   - Строка - путь к каталогу для сохранения данных №2
//	НеВыводитьНовыеЭтапы  - Булево - если Истина, то не будет выводиться отличие в операции,
//									 которая есть только в одной из версий сравниваемых конфигураций
//	НеВыводитьНеИзменившиесяЭтапы - Булево - если Истина, то не будут выводиться операции с одинаковым статусом.
//
// Возвращаемое значение:
//	Строка - информация о сравнении выгрузок, может быть одного из следующих видов:
//		- информация об ошибке сравнения, если что-то не так с файлами выгрузки
//		- отчет о сравнении, содержащий описание отличий в состоянии/пояснениях операций
//		- пустая строка, если нет ни ошибок, ни отличий.
//
Функция СравнитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период,
			КаталогДляВыгрузки1, КаталогДляВыгрузки2, НеВыводитьНовыеЭтапы = Ложь, НеВыводитьНеИзменившиесяЭтапы = Ложь) Экспорт
	
	ТекстыСообщений = Новый Массив;
	
	#Область ПроверкаФайлов
	
	Каталог1 = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки1));
	Каталог2 = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки2));
	
	Если НРег(Каталог1) = НРег(Каталог2) Тогда
		ТекстыСообщений.Добавить(НСтр("ru = 'Имена каталогов выгрузки №1 И №2 не должны совпадать';
										|en = 'Names of export catalogs No.1 and No.2 must not be the same'"));
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	// Проверим наличие файлов выгрузки данных за указанные периоды в указанных каталогах.
	ИменаФайлов = ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог1,
		ИменаФайлов.ТаблицаЭтапы,
		НСтр("ru = 'операций';
			|en = 'operations'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог1,
		ИменаФайлов.ТаблицаСгруппированныхПояснений,
		НСтр("ru = 'пояснений';
			|en = 'explanations'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог2,
		ИменаФайлов.ТаблицаЭтапы,
		НСтр("ru = 'операций';
			|en = 'operations'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог2,
		ИменаФайлов.ТаблицаСгруппированныхПояснений,
		НСтр("ru = 'пояснений';
			|en = 'explanations'"),
		ТекстыСообщений);
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЧтениеФайлов
	
	// Прочитаем таблицы из файлов.
	ТаблицаЭтапы1 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог1 + ИменаФайлов.ТаблицаЭтапы);
	
	Если ТипЗнч(ТаблицаЭтапы1) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаЭтапы1);
	КонецЕсли;
	
	ТаблицаСгруппированныхПояснений1 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог1 + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ТипЗнч(ТаблицаСгруппированныхПояснений1) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаСгруппированныхПояснений1);
	КонецЕсли;
	
	ТаблицаЭтапы2 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог2 + ИменаФайлов.ТаблицаЭтапы);
	
	Если ТипЗнч(ТаблицаЭтапы2) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаЭтапы2);
	КонецЕсли;
	
	ТаблицаСгруппированныхПояснений2 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог2 + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ТипЗнч(ТаблицаСгруппированныхПояснений2) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаСгруппированныхПояснений2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СравнениеФайлов
	
	// Сформируем таблицы различий.
	ТаблицаОтличийЭтапы = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ТаблицаЭтапы1,
		ТаблицаЭтапы2);
	
	Если ТипЗнч(ТаблицаОтличийЭтапы) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно сравнить таблицы состояния этапов:
					|%1';
					|en = 'Cannot compare stage state tables:
					|%1'"),
				ТаблицаОтличийЭтапы));
	КонецЕсли;
	
	ТаблицаОтличийПояснения = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ТаблицаСгруппированныхПояснений1,
		ТаблицаСгруппированныхПояснений2);
	
	Если ТипЗнч(ТаблицаОтличийПояснения) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно сравнить таблицы пояснений к этапам:
					|%1';
					|en = 'Cannot compare explanation tables to steps:
					|%1'"),
				ТаблицаОтличийПояснения));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	ИначеЕсли ТаблицаОтличийЭтапы.Количество() = 0 И ТаблицаОтличийПояснения.Количество() = 0 Тогда
		Возврат ""; // нет отличий
	КонецЕсли;
	
	// Добавим индексы для поиска по таблицам.
	ТаблицаЭтапы1.Индексы.Добавить("Этап");
	ТаблицаОтличийЭтапы.Индексы.Добавить("Этап");
	ТаблицаОтличийПояснения.Индексы.Добавить("Этап");
	
	#КонецОбласти
	
	#Область ФормированиеМассиваОтличающихсяЭтапов
	
	Этапы = ТаблицаОтличийЭтапы.Скопировать(, "Этап");
	Этапы.Свернуть("Этап", "");
	
	МассивЭтапов = Этапы.ВыгрузитьКолонку("Этап");
	
	Этапы = ТаблицаОтличийПояснения.Скопировать(, "Этап");
	Этапы.Свернуть("Этап", "");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивЭтапов, 
		Этапы.ВыгрузитьКолонку("Этап"), Истина);
	
	#КонецОбласти
	
	#Область ФормированиеОтчета
	
	ТекстыСообщений.Очистить();
	
	ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(МассивЭтапов);
	
	Для Каждого ТекущийЭтап Из МассивЭтапов Цикл
		
		Состояние1 = Неопределено;
		Состояние2 = Неопределено;
		
		// Проверим изменение состояния этапа.
		СтрокиЭтапа = ТаблицаОтличийЭтапы.НайтиСтроки(Новый Структура("Этап", ТекущийЭтап));
		
		Для Каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
			
			Если СтрокаЭтапа.СчетчикСтрокСравниваемыхТаблиц > 0 Тогда
				Состояние1 = СтрокаЭтапа.Состояние;
			Иначе
				Состояние2 = СтрокаЭтапа.Состояние;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Состояние1) И НЕ ЗначениеЗаполнено(Состояние2) Тогда
			
			// Состояние не изменилось - прочитаем его из исходной таблицы.
			СтрокаИсходнойТаблицы = ТаблицаЭтапы1.Найти(ТекущийЭтап, "Этап");
			
			Если СтрокаИсходнойТаблицы = Неопределено Тогда
				
				ТекстыСообщений.Добавить("");
				ТекстыСообщений.Добавить("////////////////////////////////////////////////////////////////////////////////");
		
				ТекстыСообщений.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка: операция ""%1"" отсутствует в таблице выгрузки операций';
							|en = 'Error: the ""%1"" operation is missing in operation export table'"),
						ТекущийЭтап));
				
				Продолжить;
				
			КонецЕсли;
			
			Состояние1 = СтрокаИсходнойТаблицы.Состояние;
			Состояние2 = Состояние1;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Состояние1) И ЗначениеЗаполнено(Состояние2) Тогда
			
			Если НеВыводитьНовыеЭтапы Тогда
				Продолжить; // этап есть только в выгрузке №2
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Операция присутствует только в выгрузке №2: ""%1""';
					|en = 'Operation exists only in export No.2: ""%1""'"),
				Состояние2);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Состояние2) И ЗначениеЗаполнено(Состояние1) Тогда
			
			Если НеВыводитьНовыеЭтапы Тогда
				Продолжить; // этап есть только в выгрузке №1
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Операция присутствует только в выгрузке №1: ""%1""';
					|en = 'Operation exists only in export No.1: ""%1""'"),
				Состояние1);
				
		ИначеЕсли Состояние1 <> Состояние2 Тогда
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Изменилось состояние операции: ""%1"" - ""%2""';
					|en = 'Operation state changed: ""%1"" - ""%2""'"),
				Состояние1,
				Состояние2);
		Иначе
			
			Если НеВыводитьНеИзменившиесяЭтапы Тогда
				Продолжить; // этап не изменился
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Состояние операции не изменилось: ""%1""';
					|en = 'Operation state not changed: ""%1""'"),
				Состояние1);
			
		КонецЕсли;
		
		ТекстыСообщений.Добавить("");
		ТекстыСообщений.Добавить("////////////////////////////////////////////////////////////////////////////////");
		
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Операция ""%1""';
					|en = '""%1"" operation'"),
				ТекущийЭтап));
		
		ТекстыСообщений.Добавить(ТекстОтличия);
		
		// Проверим изменение пояснений этапа.
		
		СтрокиЭтапа = ТаблицаОтличийПояснения.НайтиСтроки(Новый Структура("Этап", ТекущийЭтап));
		
		Если СтрокиЭтапа.Количество() = 0 Тогда 
			ТекстыСообщений.Добавить(НСтр("ru = 'Отличий в пояснениях к этапу нет';
											|en = 'There are no differences in explanations to step'"));
			Продолжить;
		КонецЕсли;
		
		ТекстыСообщений.Добавить(НСтр("ru = 'Изменились пояснения к этапу';
										|en = 'Explanations to step changed'") + ":");
		
		ШаблонТекстОтличия = "	" + НСтр("ru = 'Есть только в выгрузке №%1: ""%2"" - ""%3""';
											|en = 'Available only in export No.%1: ""%2"" - ""%3""'");
		
		Для Каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
			
			Если СтрокаЭтапа.СчетчикСтрокСравниваемыхТаблиц > 0 Тогда
				ТекстВыгрузка = "1";
			Иначе
				ТекстВыгрузка = "2";
			КонецЕсли;
			
			ТекстыСообщений.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстОтличия,
					ТекстВыгрузка,
					СтрокаЭтапа.Состояние,
					СтрокаЭтапа.Наименование));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТекстыСообщений.Количество() = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	ТекстыСообщений.Вставить(0,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отчет о сравнении состояний операций закрытия месяца.
			|В отчет включены только операции, имеющие различия в состоянии и/или в описании проблем (пояснениях).
			|
			|Проверяемый период: %1
			|Выгрузка №1: ""%2""
			|Выгрузка №2: ""%3""';
			|en = 'Report on comparison of month-end closing operation states. 
			|The report contains only operations having discrepancies in state and/or in problem description (explanation).
			|
			|Checked period: %1
			|Export No.1: ""%2""
			|Export No.2: ""%3""'"),
			Формат(Период, "ДФ='ММММ гггг'"),
			Каталог1,
			Каталог2));
		
	ТекстыСообщений.Добавить("");
	
	#КонецОбласти
	
	Возврат СтрСоединить(ТекстыСообщений, Символы.ПС);
	
КонецФункции

// Вспомогательные методы.

// Заполняет колонку "Этап" именем значения перечисления ОперацииЗакрытияМесяца.
//
Процедура ЗаполнитьКолонкуИмениЭтапаДляТестирования(Таблица, КолонкаЭтапа)
	
	Таблица.Колонки.Вставить(0, "Этап", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Этап = ОбщегоНазначения.ИмяЗначенияПеречисления(Строка[КолонкаЭтапа]);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имена файлов для выгрузки состояний и пояснений операций закрытия месяца.
//
Функция ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период)
	
	СуффиксИмениФайла = "_" + Формат(Период, "ДФ=MM-yy") + ".mxl";
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТаблицаЭтапы",
		"ЗакрытиеМесяца_ТаблицаЭтапы" + СуффиксИмениФайла);
	Результат.Вставить("ТаблицаСгруппированныхПояснений",
		"ЗакрытиеМесяца_ТаблицаСгруппированныхПояснений" + СуффиксИмениФайла);
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие файлов выгрузки состояний/пояснений операций закрытия месяца.
//
Процедура ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(Каталог, ИмяФайла, НазначениеФайла, ТекстыСообщений)
	
	Файлы = НайтиФайлы(Каталог, ИмяФайла, Ложь);
	
	Если Файлы.Количество() <> 1 Тогда
		
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден файл выгрузки таблицы %1 ""%2""';
					|en = 'Export file ""%2"" of table %1 was not found'"),
				НазначениеФайла,
				Каталог + ИмяФайла));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отладка

Функция НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ()
	
	ЗначенияПараметров = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти