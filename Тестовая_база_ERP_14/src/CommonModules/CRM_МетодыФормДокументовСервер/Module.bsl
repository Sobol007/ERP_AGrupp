
////////////////////////////////////////////////////////////////////////////////
// CRM методы форм документов сервер
//  
// В данный модуль вынесены методы подсистемы CRM, вызываемые из модулей типовых объектов. 
// Выносить можно только те методы, которые не вызывают стандартные методы типового модуля или обработчики форм. 
// Т.е. вызывают только те методы, что тоже вынесены из типового или не содержат таких вызовов.
// Для каждого объекта необходимо задать свою #Область с именем объекта и модуля, как он называется в метаданных.
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#Область Документ_Анкета_ФормаСписка

// Формирует представление строки для дерева анкет.
//
// Параметры:
//  СтрокаДерева  - СтрокаДереваЗначений - на основании ее формируется представление 
//                 анкет и опросов в дереве.
Функция ПолучитьПредставлениеСтрокиДереваАнкеты(СтрокаДерева) Экспорт
	
	СтрокаВозврата = "";
	
	ЕстьОграниченияПоСроку = ЗначениеЗаполнено(СтрокаДерева.ДатаОкончания);
	Закончился = ?(ЗначениеЗаполнено(СтрокаДерева.ДатаОкончания),
		?(ТекущаяДатаСеанса() <= СтрокаДерева.ДатаОкончания, Ложь, Истина), Ложь);
	ПараметрНаименованиеАнкеты = "'" + СтрокаДерева.Наименование + "'";
	ПараметрДатаАнкеты = "";
	ПараметрДатаОкончания = "";	
	
	Если ТипЗнч(СтрокаДерева.АнкетаОпрос) = Тип("ДокументСсылка.НазначениеОпросов") Тогда
		СтрокаВозврата = СтрокаВозврата + НСтр("ru='Анкета %1';en='Questionnaire %1'");
	ИначеЕсли ТипЗнч(СтрокаДерева.АнкетаОпрос) = Тип("ДокументСсылка.Анкета") Тогда
		СтрокаВозврата = СтрокаВозврата + НСтр("ru='Анкета  %1, последний раз редактировавшаяся %2';en='Questionnaire %1, last edited %2'");
		ПараметрДатаАнкеты = Формат(СтрокаДерева.ДатаАнкеты, "ДФ=dd.MM.yyyy");
	Иначе	
		Возврат СтрокаВозврата;
	КонецЕсли;
	
	Если ЕстьОграниченияПоСроку Тогда
		СтрокаВозврата = СтрокаВозврата + НСтр("ru=', к заполнению до %3';en=', to be filled in within %3'");
		ПараметрДатаОкончания = Формат(НачалоДня(КонецДня(СтрокаДерева.ДатаОкончания) + 1),"ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	СтрокаВозврата = СтрокаВозврата + ".";
	СтрокаВозврата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаВозврата, ПараметрНаименованиеАнкеты, ПараметрДатаАнкеты, ПараметрДатаОкончания);	
	
	Возврат СтрокаВозврата;
	
КонецФункции

// Возвращает признак проведения Анкеты.
//
// Параметры:
//  ДокументАнкета	 - ДокументСсылка - Ссылка на Анкету. 
// 
// Возвращаемое значение:
//  Булево - Признак проведения Анкеты. 
//
Функция АнкетаПроведена(ДокументАнкета) Экспорт
	
	Возврат ДокументАнкета.Проведен;
	
КонецФункции // АнкетаПроведена(ДокументАнкета)

#КонецОбласти

#Область Документ_CRM_РассылкаЭлектронныхПисем_ФормаДокумента

// Процедура - Заполнить созданный документ рассылки
//
// Параметры:
//  ДокОбъект	 - ДокументСсылка - Ссылка на документ CRM_РассылкаЭлектронныхПисем.
//  Ссылка		 - СправочникСсылка - Ссылка на справочник CRM_СпискиРассылок.
//
Процедура ЗаполнитьСозданныйДокументРассылки(ДокОбъект, Ссылка) Экспорт
	
	МассивДанных = Справочники.CRM_СпискиРассылок.ПолучитьСоставСпискаРассылки(Ссылка);
	
	Для Каждого СтрокаДанных Из МассивДанных Цикл
		
		Если ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			
			НоваяСтрока						= ДокОбъект.Получатели.Добавить();
			НоваяСтрока.Партнер				= СтрокаДанных.Контакт;
			НоваяСтрока.КонтактноеЛицо		= СтрокаДанных.Контакт.CRM_ОсновноеКонтактноеЛицо;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(СтрокаДанных.Адрес),Строка(НоваяСтрока.Партнер) + " <" + СтрокаДанных.Адрес + ">", "");
			
		ИначеЕсли ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
			
			НоваяСтрока						= ДокОбъект.Получатели.Добавить();
			НоваяСтрока.КонтактноеЛицо		= СтрокаДанных.Контакт;			
			НоваяСтрока.Партнер				= СтрокаДанных.Контакт.Владелец;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(СтрокаДанных.Адрес),Строка(НоваяСтрока.КонтактноеЛицо) + " <" + СтрокаДанных.Адрес + ">", "");
			
		ИначеЕсли ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			
			НоваяСтрока						= ДокОбъект.СвоиЛица.Добавить();
			НоваяСтрока.Пользователь		= СтрокаДанных.Контакт;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(СтрокаДанных.Адрес),Строка(НоваяСтрока.Пользователь) + " <" + СтрокаДанных.Адрес + ">", "");
			
		ИначеЕсли ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			НоваяСтрока						= ДокОбъект.ФизЛица.Добавить();
			НоваяСтрока.ФизЛицо				= СтрокаДанных.Контакт;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(СтрокаДанных.Адрес),Строка(НоваяСтрока.ФизЛицо) + " <" + СтрокаДанных.Адрес + ">", "");
			
		ИначеЕсли ТипЗнч(СтрокаДанных.Контакт) = Тип("Строка") Тогда
			
			НоваяСтрока						= ДокОбъект.Получатели.Добавить();
			НоваяСтрока.ПартнерСтрокой		= СтрокаДанных.Контакт;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаДанных.Адрес),НоваяСтрока.ПартнерСтрокой + " <" + СтрокаДанных.Адрес + ">", "");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Документ_НазначениеОпросов_ФормаДокумента

Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Объект, ИмяЭлемента, РезультатВыполнения) Экспорт
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(Объект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Документ_ЭлектронноеПисьмоИсходящее_ФормаДокумента

// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь() Экспорт
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции // ТекущийПользователь()

#КонецОбласти

#КонецОбласти
