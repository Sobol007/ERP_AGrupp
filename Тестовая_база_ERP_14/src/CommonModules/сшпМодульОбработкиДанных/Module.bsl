#Область ВспомогательныеФункции

// Запишим в регистр сведений сшпИдентификаторыОбмена запись объекта и его идентификатро
//
// Параметры:
//  Ссылка			 - [СправочникСсылка, ДокументСсылка] - Объект записи.
//  Идентификатор		 - Строка	 - Передается строковый идентификатор для установки.
//  ИдентификаторСтрока	 - Строка	 - Возвращается идентификатор, назначенный объекту обмена.
//  Отказ				 - Булево	 - Истина, если произошла ошибка.
//
Процедура ЗаписатьВИдентификаторОбмена(Ссылка, Идентификатор = Неопределено, ИдентификаторСтрока = "", Отказ = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка <> Неопределено И ЗначениеЗаполнено(Ссылка)Тогда		
		Попытка
			Запись = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
			Запись.Объект = Ссылка;
			Запись.Прочитать();
			
			Если Ложь
				Или НЕ ЗначениеЗаполнено(Запись.Идентификатор)
				Или (Истина
				     И ЗначениеЗаполнено(Идентификатор) 
					И Запись.Идентификатор <> Идентификатор)
			Тогда
				Если Идентификатор <> Неопределено Тогда 
					ИдентификаторСтрока = Идентификатор;
				Иначе	
					ИдентификаторСтрока = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				
				Запись.Объект = Ссылка;
				Запись.Идентификатор = ИдентификаторСтрока;
				Запись.Записать(Истина);	
			Иначе
				ИдентификаторСтрока = Запись.Идентификатор;
			КонецЕсли;
			
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Ошибка, , ,СтрШаблон(НСтр("ru = 'Ошибка записи в РегистрыСведений.сшпИдентификаторыОбмена: %1'"), ОписаниеОшибки()));
		КонецПопытки;		
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаписатьВИдентификаторОбмена()

Процедура СформироватьЗапросНаПолучениеДанных(ТипПакета, Идентификатор) Экспорт
	
	мсвПараметров = Новый Массив;
	мсвПараметров.Добавить(ТипПакета);
	мсвПараметров.Добавить(Идентификатор);
	
	//упУправлениеФоновымиЗадачами.ВыполнитьФоновоеЗадание("сшпМодульОбработкиДанных.ОтправитьПакетНаПолучениеДанных", мсвПараметров,, Истина);
	
КонецПроцедуры	

Процедура ОтправитьПакетНаПолучениеДанных(ТипПакета, Идентификатор) Экспорт
	
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета(, "32");
	
	СтруктураДанных = Новый Структура("Class, ID");
	СтруктураДанных["Class"] = ТипПакета;
	СтруктураДанных["ID"] = Идентификатор;	
	
	РезультатОбработки.Body = сшпОбщегоНазначения.ПреобразоватьСтруктуруПоФормату(Перечисления.сшпФорматыСообщений.XML, СтруктураДанных);	
	сшпВзаимодействиеСАдаптером.ОтправитьСообщение(РезультатОбработки);
	
КонецПроцедуры	

// Проверяет заполненность идентификатора
//
// Параметры
//  Идентификатор  - Строка, Идентификатор поиска
//
// Возвращаемое значение:
//   Булево   - признак заполненности
//
Функция ИдентификаторЗаполнен(Идентификатор) Экспорт
	
	Возврат Идентификатор <> "00000000-0000-0000-0000-000000000000" И ЗначениеЗаполнено(Идентификатор);
	
КонецФункции // ВернутьУзелОбмена()

// Процедура устанавливает статус сообщения "Ожидание обработки" (в случае если время циклической обработки сообщения не превышает 15 минут) 
// или "Ошибка обработки" (для исключения бесполезного использования фонового задания по загрузке данных)
//
// Параметры
//  ОбъектСообщение  - сообщение 
//  СостояниеСообщения - перечисление, устанавливаемый статус
//
Процедура УстановитьСостояниеСообщения(ОбъектСообщение, СостояниеСообщения, Задержка = 0) Экспорт
	
	текЗапрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	тбОчередь.ДатаРегистрации,
	|	тбСостояние.ДатаИзменения
	|ИЗ
	|	РегистрСведений.сшпОчередьВходящихСообщений КАК тбОчередь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
	|		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
	|ГДЕ
	|	тбОчередь.ИдентификаторСообщения = &ИдентификаторСообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	тбСостояние.ДатаИзменения");
	текЗапрос.УстановитьПараметр("ИдентификаторСообщения", Новый УникальныйИдентификатор(ОбъектСообщение.ID));
	Выборка = текЗапрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ДатаРегистрации = Выборка.ДатаРегистрации;
		ДатаИзменения = Выборка.ДатаИзменения;
	Иначе 
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		Задержка = 30;
		Возврат;
	КонецЕсли;
	
	РазностьДат = (ДатаИзменения - ДатаРегистрации)/60;
	Если РазностьДат > 15 Тогда 
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;
	Иначе
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		Задержка = 30;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСостояниеСообщения()

//Поиск объектов в регистре идентификаторов 
//
Функция ПолучитьОбъектыПоИдентификаторам(Идентификаторы) Экспорт
	
	ТипВходящегоЗначения = ТипЗнч(Идентификаторы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сшпИдентификаторыОбмена.Объект,
	|	сшпИдентификаторыОбмена.Идентификатор
	|ИЗ
	|	РегистрСведений.сшпИдентификаторыОбмена КАК сшпИдентификаторыОбмена
	|ГДЕ
	|	сшпИдентификаторыОбмена.Идентификатор В(&Идентификаторы)
	|	И ТИПЗНАЧЕНИЯ(сшпИдентификаторыОбмена.Объект) <> ТИП(СТРОКА)";
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Выборка = Запрос.Выполнить().Выбрать();
	Если ТипВходящегоЗначения = Тип("Строка") Тогда
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Объект) Тогда
			Возврат Выборка.Объект;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	Иначе 	
		соотИдентификаторов = Новый Соответствие;
		Пока Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Объект) Цикл 
			соотИдентификаторов.Вставить(Выборка.Идентификатор, Выборка.Объект);
		КонецЦикла;	
		Возврат соотИдентификаторов;
	КонецЕсли;
	
КонецФункции

//Поиск объектов в регистре идентификаторов 
//
Функция ПолучитьИдентификаторыПоОбъектам(Объекты) Экспорт
	
	ТипВходящегоЗначения = ТипЗнч(Объекты);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сшпИдентификаторыОбмена.Объект,
	|	сшпИдентификаторыОбмена.Идентификатор
	|ИЗ
	|	РегистрСведений.сшпИдентификаторыОбмена КАК сшпИдентификаторыОбмена
	|ГДЕ
	|	сшпИдентификаторыОбмена.Объект В(&Объекты)
	|	И ТИПЗНАЧЕНИЯ(сшпИдентификаторыОбмена.Объект) <> ТИП(СТРОКА)";
	
	Запрос.УстановитьПараметр("Объекты", Объекты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ТипВходящегоЗначения = Тип("Массив") Тогда
		
		соотИдентификаторов = Новый Соответствие;
		Пока Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Идентификатор) Цикл 
			соотИдентификаторов.Вставить(Выборка.Объект, Выборка.Идентификатор);
		КонецЦикла;	
		Возврат соотИдентификаторов;
		
	Иначе 	
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			Возврат Выборка.Идентификатор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

// Поиск объектов в регистре идентификаторов 
//
Функция ПолучитьДокументПоИдентификатору(Идентификатор, Условие = "",  сткПараметры = Неопределено) Экспорт
	
	ТипВходящегоЗначения = ТипЗнч(Идентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сшпИдентификаторыОбмена.Объект,
	|	сшпИдентификаторыОбмена.Идентификатор
	|ИЗ
	|	РегистрСведений.сшпИдентификаторыОбмена КАК сшпИдентификаторыОбмена
	|ГДЕ
	|	сшпИдентификаторыОбмена.Идентификатор = &Идентификатор
	|	И ТИПЗНАЧЕНИЯ(сшпИдентификаторыОбмена.Объект) <> ТИП(СТРОКА) " + Условие;
	Если ТипЗнч(сткПараметры) = Тип("Структура") Тогда
		Для каждого Элемент Из сткПараметры Цикл
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Объект) Тогда
		Возврат Выборка.Объект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

// Получение значения из xml-файла при файловом обмене с шиной
Функция одАтрибут(Объект, Тип, Имя) Экспорт
	
	СтрЗначение = СокрП(Объект.ПолучитьАтрибут(Имя));
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		Возврат XMLЗначение(Тип, СтрЗначение);
	Иначе
		Возврат NULL;
	КонецЕсли; 
	
КонецФункции

Процедура одПропустить(Объект, Имя="") Экспорт
	
	КолвоВложений = 0; // количество одноименных вложений
	
	Если Имя = "" Тогда
		
		Имя = Объект.ЛокальноеИмя;
		
	КонецЕсли; 
	
	Пока Объект.Прочитать() Цикл
		
		Если Объект.ЛокальноеИмя <> Имя Тогда
			Продолжить;
		КонецЕсли;
		
		ТипУзла = Объект.ТипУзла;
		
		Если ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если КолвоВложений = 0 Тогда
				
				Прервать;
				
			Иначе
				
				КолвоВложений = КолвоВложений - 1;
				
			КонецЕсли;
			
		ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			КолвоВложений = КолвоВложений + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // одПропустить() 

Функция ОбъектИзменен(Ссылка, ЗначенияРеквизитов, СтруктураРеквизитов) Экспорт
	
	МД = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	ИмяОбъекта = МД.Имя;
	ПолноеИмяОбъекта = МД.ПолноеИмя();
	
	Запрос = новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|   " + ИмяОбъекта + ".Ссылка КАК СсылкаБД
	|ИЗ
	|   " + ПолноеИмяОбъекта + " КАК " + ИмяОбъекта + "
	|ГДЕ
	|   " + ИмяОбъекта + ".Ссылка = &Cсылка";
	Запрос.УстановитьПараметр("Cсылка", Ссылка);
	
	Условие = "";
	Для Каждого Реквизит ИЗ СтруктураРеквизитов Цикл
		Если ТипЗнч(ЗначенияРеквизитов[Реквизит.Ключ]) <> Тип("Null") Тогда
			Запрос.УстановитьПараметр(Реквизит.Ключ, ЗначенияРеквизитов[Реквизит.Ключ]);
			Если Найти(",НаименованиеПолное,ПолноеНаименование,Комментарий,", "," + Реквизит.Ключ + ",") Тогда
				Условие = Условие + " И " + "ВЫРАЗИТЬ (" + ИмяОбъекта + "." + Реквизит.Ключ + " КАК СТРОКА(1000)) = &" + Реквизит.Ключ;
			Иначе
				Условие = Условие + " И " + ИмяОбъекта + "." + Реквизит.Ключ + " = &" + Реквизит.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Условие = "" Тогда
		Возврат Ложь;
	Иначе
		Запрос.Текст = Запрос.Текст + Условие;
		Возврат Запрос.Выполнить().Пустой();
	КонецЕсли;
	
КонецФункции // ОбъектИзменен()

//Процедура производит первоначальное заполнение регистра идентификаторов предопределенными значениями
//
Процедура ЗаполнитьРегистрИдентификацииПредопределеннымиЗначениями() Экспорт
	
	
#Область Справочник_ВидыКонтактнойИнформации
		
		//Адреса
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.СправочникупАдреса; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000101";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.Адрес; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000102";
		МенеджерЗаписей.Записать();
		
		//Контактные лица партнеров
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.СправочникупКонтактныеЛицаПартнеров; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000103";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000104";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000105";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000106";
		МенеджерЗаписей.Записать();
		
		//Контрагенты
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.СправочникупКонтрагенты; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000006";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000007";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000109";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000110";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000010";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000112";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000012";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000013";
		МенеджерЗаписей.Записать();
		
		//Организации
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-0000000000014";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000016";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000018";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000019";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000020";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000021";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.EmailОрганизации; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000015";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000022";
		МенеджерЗаписей.Записать();
		
		//Партнеры
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.СправочникупПартнеры; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000123";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.EmailПартнера; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000124";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.АдресПартнера; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000125";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000126";
		МенеджерЗаписей.Записать();
		
		//упСотрудники
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.СправочникупСотрудники; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000127";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000128";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000129";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000130";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000131";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000132";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000133";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000134";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.EmailСотрудника; 
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000135";
		МенеджерЗаписей.Записать();
		
		//Пользователи
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000136";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000137";
		МенеджерЗаписей.Записать();
		МенеджерЗаписей = РегистрыСведений.сшпИдентификаторыОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Объект = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
		МенеджерЗаписей.Идентификатор = "00000000-0000-0000-0000-000000000138";
		МенеджерЗаписей.Записать();
		
		
	#КонецОбласти 
	
КонецПроцедуры

Процедура УстановитьБлокировкуПоИдентификаторуОбъекта(ИдентификаторОбъекта, ТекстОшибки, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.упЗаписываемыеИдентификаторыОбъектов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", ИдентификаторОбъекта);
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		Отказ = Истина;
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Ошибка при блокировке записываемых идентификаторов объектов ID:""%1"". Ошибка:%2'"), ИдентификаторОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьПолеПакетаОбмена(соотПоляПакетаОбмена, ИмяПоляПакетаОбмена, ИмяРеквизита, ТипСтрока, Обязательный = Ложь, ИмяМенеджера = "") Экспорт
		
	сткСтруктураРеквизита = Новый Структура();
	сткСтруктураРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	сткСтруктураРеквизита.Вставить("ТипСтрока", ТипСтрока);
	сткСтруктураРеквизита.Вставить("Обязательный", Обязательный);
	сткСтруктураРеквизита.Вставить("ИмяМенеджера", ИмяМенеджера);
	
	соотПоляПакетаОбмена.Вставить(ИмяПоляПакетаОбмена, сткСтруктураРеквизита);
		
КонецПроцедуры

// Процедура - Заполнить значения полей пакета обмена
//
// Параметры:
//  сткЗначениеПолей - Структура - структура данных объекта, заполняется по правилам переданным в "соотПоляПакетаОбмена". 
//    * Ключ - Имя реквизита объекта, который будет заполнятся по подобранным данным.
//    * Значение - Значение поля, которое было подобрано или преобразовано по данным поля пакета.
//  xdtoОбъект				 - ОбъектXDTO - 
//  ОбъектЗагрузкиСтрока		 - Строка	- передается строковое представление объекта загрузки, для более точного вывода ошибок, выявленных в ходе загрузки.
//  соотПоляПакетаОбмена		 - Соответствие - передаются правила преобразования свойств пакета данных.
//  ОбъектСообщение			 - 	 - 
//  СостояниеСообщения		 - 	 - 
//  Идентификатор			 - 	 - 
//  Задержка				 - 	 - 
//  ДополнительныеПараметры	 - Структура - служит для передачи доп. параметров используемых для определения значений по некоторым типам:
//                                           если тип строки "Адрес"
//                                              Ключи:
//                                                * ВидАдреса - передается вид адреса для новых адресов.
//                                                * АдресаПакета - ТаблицаЗначений - найденные адреса пакета, для ускорения поиска
//                                                     * Наименование - Строка - наименование адреса
//                                                     * Адрес - СправочникСсылка.упАдреса - соответствующий адрес
//                                                                  
// 
//  Отказ					 - Булево - Истина, в случае ошибки.
//
Процедура ЗаполнитьЗначенияПолейПакетаОбмена(сткЗначениеПолей, xdtoОбъект, соотПоляПакетаОбмена, ОбъектСообщение = Неопределено, СостояниеСообщения = Неопределено, Идентификатор = "", Задержка = Неопределено, ДополнительныеПараметры, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мсвСсылочныеРеквизиты = Новый Массив;
	МассивИдентификаторов = Новый Массив;
	
	УточнениеМестаВозникновенияОшибки = "";
	
	Если Истина
		И ДополнительныеПараметры <> Неопределено
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
	Тогда
		УточнениеМестаВозникновенияОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "УточнениеМестаВозникновенияОшибки", "");
	КонецЕсли;
		
	Для каждого ПолеПакета Из соотПоляПакетаОбмена Цикл
		
		ИмяПоляПакетаОбмена = ПолеПакета.Ключ;
		сткСтруктураРеквизита = ПолеПакета.Значение;
		
		ИмяРеквизита = сткСтруктураРеквизита.ИмяРеквизита;
		ТипСтрока = сткСтруктураРеквизита.ТипСтрока;
		Обязательный = сткСтруктураРеквизита.Обязательный;
		ИмяМенеджера = сткСтруктураРеквизита.ИмяМенеджера;
		ЗначениеРеквизита = Неопределено;
		
		Если xdtoОбъект[ИмяПоляПакетаОбмена] = Неопределено Тогда
			Если Обязательный Тогда
				ТекстОшибки = СтрШаблон(Нстр("ru = 'Не заполнено обязательное поле пакета ""%1""'"), ИмяПоляПакетаОбмена);
				сшпМодульОбработкиДанных.ДобавитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, Неопределено, Отказ, УточнениеМестаВозникновенияОшибки);
				Прервать;
			КонецЕсли;
			сткЗначениеПолей.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			Продолжить;
		КонецЕсли;
				
		Если ТипСтрока = "Ссылка" Тогда	
			ИдентификаторОбъекта = Строка(xdtoОбъект[ИмяПоляПакетаОбмена]);
			Если сшпМодульОбработкиДанных.ИдентификаторЗаполнен(ИдентификаторОбъекта) Тогда
		 		МассивИдентификаторов.Добавить(ИдентификаторОбъекта);
				сткСсылочныйРеквизит = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(сткСтруктураРеквизита);
				сткСсылочныйРеквизит.Вставить("ИдентификаторЗначение", ИдентификаторОбъекта);
				мсвСсылочныеРеквизиты.Добавить(сткСсылочныйРеквизит);
			Иначе
				Если Обязательный Тогда
					ТекстОшибки = СтрШаблон(Нстр("ru = 'Не заполнено обязательное поле пакета ""%1""'"), ИмяПоляПакетаОбмена);
					сшпМодульОбработкиДанных.ДобавитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, Неопределено, Отказ, УточнениеМестаВозникновенияОшибки);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипСтрока = "Адрес" Тогда
			НаименованиеАдреса = Строка(xdtoОбъект[ИмяПоляПакетаОбмена]);
			ВидАдреса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВидАдреса", Справочники.упВидыАдресов.ПустаяСсылка());
			АдресаПакета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "АдресаПакета", Неопределено);
			Адрес = Справочники.упАдреса.ПустаяСсылка();
			Если АдресаПакета <> Неопределено Тогда
				мсвСтрокиАдрес = АдресаПакета.НайтиСтроки(Новый Структура("Наименование", НаименованиеАдреса));
				Если мсвСтрокиАдрес.Количество() > 0 Тогда
					Адрес = мсвСтрокиАдрес[0].Адрес;
				КонецЕсли; 
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Адрес) Тогда
				Адрес = Справочники.упАдреса.НовыйАдресПоСтроке(НаименованиеАдреса, ВидАдреса);
				Если АдресаПакета <> Неопределено Тогда
					НоваяСтрока = АдресаПакета.Добавить();
					НоваяСтрока.Наименование = НаименованиеАдреса;
					НоваяСтрока.Адрес = Адрес;
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеРеквизита = Адрес;
			сткЗначениеПолей.Вставить(ИмяРеквизита, ЗначениеРеквизита);				
			
		Иначе
			Если ТипСтрока = "Дата" Тогда
				Попытка
					ЗначениеРеквизита = XMLЗначение(Тип("Дата"), xdtoОбъект[ИмяПоляПакетаОбмена])
				Исключение
					ЗначениеРеквизита = '00010101';
					ТекстОшибки = СтрШаблон(Нстр("ru = 'Не удалось корректно преобразовать значение ""%1"" поля пакета ""%2"": Ошибка:%3'"), xdtoОбъект[ИмяПоляПакетаОбмена], ИмяПоляПакетаОбмена, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ТекстОшибки = ДополнитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, УточнениеМестаВозникновенияОшибки);
					ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Предупреждение, , ОбъектСообщение.Id, ТекстОшибки);
				КонецПопытки;
			ИначеЕсли ТипСтрока = "Строка" Тогда
				ЗначениеРеквизита = Строка(xdtoОбъект[ИмяПоляПакетаОбмена])
			ИначеЕсли ТипСтрока = "Число" Тогда
				ЗначениеРеквизита = Число(xdtoОбъект[ИмяПоляПакетаОбмена])
			ИначеЕсли ТипСтрока = "Булево" Тогда
				ЗначениеРеквизита = XMLЗначение(Тип("Булево"), xdtoОбъект[ИмяПоляПакетаОбмена]);
			Иначе
				ТекстОшибки = СтрШаблон(Нстр("ru = 'Обработка типа ""%1"" для поле пакета ""%2"" не реализована'"), ТипСтрока, ИмяПоляПакетаОбмена);
				сшпМодульОбработкиДанных.ДобавитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, Неопределено, Отказ, УточнениеМестаВозникновенияОшибки);
			КонецЕсли;
			
			Если Истина
				И Обязательный 
				И Не ЗначениеЗаполнено(ЗначениеРеквизита)
			Тогда
				ТекстОшибки = СтрШаблон(Нстр("ru = 'Не заполнено обязательное поле пакета ""%1""'"), ИмяПоляПакетаОбмена);
				сшпМодульОбработкиДанных.ДобавитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, Неопределено, Отказ, УточнениеМестаВозникновенияОшибки);
			КонецЕсли;
			
			сткЗначениеПолей.Вставить(ИмяРеквизита, ЗначениеРеквизита);	
			
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
		
	Если Истина
		И Не Отказ
		И мсвСсылочныеРеквизиты.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	сшпИдентификаторыОбмена.Объект,
		|	сшпИдентификаторыОбмена.Идентификатор
		|ИЗ
		|	РегистрСведений.сшпИдентификаторыОбмена КАК сшпИдентификаторыОбмена
		|ГДЕ
		|	сшпИдентификаторыОбмена.Идентификатор В(&Идентификаторы)
		|	И ТИПЗНАЧЕНИЯ(сшпИдентификаторыОбмена.Объект) <> ТИП(СТРОКА)";
		Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
		тбзЗначения = Запрос.Выполнить().Выгрузить();
		
		Для каждого сткСтруктураРеквизита Из мсвСсылочныеРеквизиты Цикл
			
			ИдентификаторЗначение = сткСтруктураРеквизита.ИдентификаторЗначение;
			ИмяРеквизита = сткСтруктураРеквизита.ИмяРеквизита;
			ИмяМенеджера = сткСтруктураРеквизита.ИмяМенеджера;
			ПустаяСсылка = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджера).ПустаяСсылка();
			
			ЗначениеРеквизита = ПустаяСсылка;
			
			Если сшпМодульОбработкиДанных.ИдентификаторЗаполнен(ИдентификаторЗначение) Тогда
				мсвОбъектыСИдентификатором = тбзЗначения.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторЗначение));
					
				Для каждого Строка Из мсвОбъектыСИдентификатором Цикл
					Если ТипЗнч(Строка.Объект) = ТипЗнч(ПустаяСсылка) Тогда
						ЗначениеРеквизита = Строка.Объект;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ТекстОшибки = СтрШаблон(Нстр("ru = 'Не найден элемент %1 с идентификатором ""%2""'"), ИмяРеквизита, ИдентификаторЗначение);
					сшпМодульОбработкиДанных.ДобавитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, Задержка, Отказ, УточнениеМестаВозникновенияОшибки);
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			сткЗначениеПолей.Вставить(ИмяРеквизита, ЗначениеРеквизита);	
		
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

//А ГРУПП+ Кириллов А.С. 10.07.2019
Процедура ЗаблокироватьИдентификаторОбъекта(Идентификатор) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.сшпЗаписываемыеИдентификаторыОбъектов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

Функция ПолучитьПолеПакетаОбмена(ПакетXDTO, ИмяПоля, ТипЗначенияСтрокой) Экспорт
	
	Если ПакетXDTO.Получить(ИмяПоля) <> Неопределено Тогда
		ЗначениеПоля = ПолучитьЗначениеПоля(ПакетXDTO.Получить(ИмяПоля), ТипЗначенияСтрокой);
	Иначе
		ЗначениеПоля = Неопределено;
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Не найдено ожидаемое поле ""%1"" во пакете XDTO'"), ИмяПоля);
		ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
	КонецЕсли;
	
	Возврат ЗначениеПоля;
	
КонецФункции

Функция ПолучитьЗначениеПоля(ПолеПакета, ТипЗначенияСтрокой) Экспорт
	
	Если ТипЗначенияСтрокой = "Ссылка" Тогда	
		ЗначениеПоля = Строка(ПолеПакета);
	ИначеЕсли ТипЗначенияСтрокой = "Дата" Тогда
		Попытка
			ЗначениеПоля = XMLЗначение(Тип("Дата"), ПолеПакета)
		Исключение
			ЗначениеПоля = '00010101';
			ТекстОшибки = СтрШаблон(Нстр("ru = 'Не удалось корректно преобразовать значение ""%1"" к типу ""%2"". Ошибка:%3'"), ПолеПакета, ТипЗначенияСтрокой, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
		КонецПопытки;
	ИначеЕсли ТипЗначенияСтрокой = "Строка" Тогда
		ЗначениеПоля = Строка(ПолеПакета)
	ИначеЕсли ТипЗначенияСтрокой = "Число" Тогда
		Попытка
			ЗначениеПоля = Число(ПолеПакета)
		Исключение
			ЗначениеПоля = 0;
			ТекстОшибки = СтрШаблон(Нстр("ru = 'Не удалось корректно преобразовать значение ""%1"" к типу ""%2"". Ошибка:%3'"), ПолеПакета, ТипЗначенияСтрокой, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
		КонецПопытки;
	ИначеЕсли ТипЗначенияСтрокой = "Булево" Тогда
		Попытка
			ЗначениеРеквизита = XMLЗначение(Тип("Булево"), ПолеПакета);
		Исключение
			ЗначениеПоля = Ложь;
			ТекстОшибки = СтрШаблон(Нстр("ru = 'Не удалось корректно преобразовать значение ""%1"" к типу ""%2"". Ошибка:%3'"), ПолеПакета, ТипЗначенияСтрокой, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
		КонецПопытки;
	Иначе
		ЗначениеПоля = Неопределено;
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Обработка типа ""%1"" для поля пакета не реализована'"), ТипЗначенияСтрокой);
		ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
	КонецЕсли;
	
	Возврат ЗначениеПоля;
	
КонецФункции
//А ГРУПП-

Процедура ДобавитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, Задержка, Отказ = Ложь, УточнениеМестаВозникновенияОшибки = "", СобытиеЖР = Неопределено) Экспорт
	
	Отказ = Истина;
	
	Если СобытиеЖР = Неопределено Тогда
		СобытиеЖР = СобытиеОбменПоESB();	
	КонецЕсли;
		
	Если ОбъектСообщение = Неопределено Тогда
		// Необходимо если пакет загружается не в процессе обмена по ESB.
		ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	Иначе	
		ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , ОбъектСообщение.Id, ДополнитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, УточнениеМестаВозникновенияОшибки));
		Если Задержка = Неопределено Тогда
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
		Иначе
			сшпМодульОбработкиДанных.УстановитьСостояниеСообщения(ОбъектСообщение, СостояниеСообщения, Задержка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СобытиеОбменПоESB() Экспорт
	Возврат Нстр("ru = 'Обмен по ESB'");		
КонецФункции

Функция ДополнитьОписаниеОшибки(ТекстОшибки, ОбъектСообщение, СостояниеСообщения, Идентификатор, УточнениеМестаВозникновения = "") Экспорт
	
	СлужебнаяИнформация = СтрШаблон(Нстр("ru = 'Идентификатор сообщения: %1, дата создания: %2, ClassId: %3. %4
		|'"), Идентификатор, Формат(XMLЗначение(Тип("Дата"), ОбъектСообщение.CreationTime),"ДЛФ=DT"), ОбъектСообщение.ClassId, УточнениеМестаВозникновения);
	Результат = СтрШаблон("%1%2", СлужебнаяИнформация, ТекстОшибки);
	
	Возврат Результат;
		
КонецФункции

Функция ДополнитьОписаниеОшибкиИсходящегоСообщения(ТекстОшибки, СостояниеСообщения, Идентификатор, УточнениеМестаВозникновения = "") Экспорт
	
	СлужебнаяИнформация = СтрШаблон(Нстр("ru = 'Идентификатор сообщения: %1. %2
		|'"), Идентификатор, УточнениеМестаВозникновения);
	Результат = СтрШаблон("%1%2", СлужебнаяИнформация, ТекстОшибки);
	
	Возврат Результат;
		
КонецФункции
 
#КонецОбласти

#Область ПроцедурыИФункцииПоискаОбъектов

//А ГРУПП+ Кириллов А.С. 08.07.2019
Функция НайтиОбъектПоПолямПоиска(ТипОбъекта, ВидОбъекта, ПоляПоиска) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	#ВидОбъекта.Ссылка КАК Ссылка
	               |ИЗ
	               |	#ТипОбъекта.#ВидОбъекта КАК #ВидОбъекта
	               |ГДЕ
	               |	#ТекстУсловийПоиска";
	
	ТекстУсловийПоиска = "";
	Для Каждого КлючИЗначение Из ПоляПоиска Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		ТекстУсловийПоиска = ТекстУсловийПоиска + ?(ЗначениеЗаполнено(ТекстУсловийПоиска), " И ", " ") + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
	КонецЦикла;
	ТекстУсловийПоиска = СокрЛП(ТекстУсловийПоиска);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТипОбъекта", ТипОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВидОбъекта", ВидОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловийПоиска", ТекстУсловийПоиска);
		
	Запрос.Текст = ТекстЗапроса;
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НайденныйЭлемент = Выборка.Ссылка;
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Ошибка, , ,СтрШаблон(НСтр("ru = 'Ошибка при поиске объекта по причине: %1.'"), ОписаниеОшибки()));
			НайденныйЭлемент = Неопределено;
	 	КонецЕсли;
	Исключение
		НайденныйЭлемент = Неопределено;
	КонецПопытки;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

Функция ПолучитьЗначениеПеречисления(ИмяПеречисления, ЗначениеПеречисленияСтрокой) Экспорт
	
	ЗначениеПеречисления = Неопределено;
	Попытка
		ЗначениеПеречисления = Перечисления[ИмяПеречисления][ЗначениеПеречисленияСтрокой];
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Ошибка, , ,СтрШаблон(НСтр("ru = 'Ошибка при получении значения перечисления: %1.%2 по причине: %3.'"), ИмяПеречисления, ЗначениеПеречисленияСтрокой, ОписаниеОшибки()));
	КонецПопытки;
	
	Если ЗначениеПеречисления = Неопределено Тогда
		Попытка                                                                
			ЗначениеПеречисления = Перечисления[ИмяПеречисления].ПустаяСсылка();
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Ошибка, , ,СтрШаблон(НСтр("ru = 'Ошибка при получении пустой ссылки на перечисление: %1 по причине: %2.'"), ИмяПеречисления, ОписаниеОшибки()));
		КонецПопытки;	
	КонецЕсли;
	
	Возврат ЗначениеПеречисления;
	
КонецФункции

Функция ПолучитьПредопределенныйЭлементСправочника(ИмяСправочника, ИмяПредопределенного) Экспорт
	
	СправочникСсылка = Неопределено;
	Попытка
		СправочникСсылка = Справочники[ИмяСправочника][ИмяПредопределенного];
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Ошибка, , ,СтрШаблон(НСтр("ru = 'Ошибка при получении предопределенного элемента справочника: %1.%2 по причине: %3.'"), ИмяСправочника, ИмяПредопределенного, ОписаниеОшибки()));
	КонецПопытки;
	
	Если СправочникСсылка = Неопределено Тогда
		Попытка                                                                
			СправочникСсылка = Справочники[ИмяСправочника].ПустаяСсылка();
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеОбменПоESB(), УровеньЖурналаРегистрации.Ошибка, , ,СтрШаблон(НСтр("ru = 'Ошибка при получении пустой ссылки на справочник: %1 по причине: %2.'"), ИмяСправочника, ОписаниеОшибки()));
		КонецПопытки;	
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции
//А ГРУПП-

#КонецОбласти