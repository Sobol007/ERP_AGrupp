
////////////////////////////////////////////////////////////////////////////////
// CRM взаимодействия клиент сервер
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Функция СписокКодировок() Экспорт
	
	СписокКодировок = Новый СписокЗначений;
	
	СписокКодировок.Добавить("ibm852",       НСтр("en='ibm852 (Central European DOS)';ru='ibm852 (Центральноевропейская DOS)'"));
	СписокКодировок.Добавить("ibm866",       НСтр("en='ibm866 (Cyrillic DOS)';ru='ibm866 (Кириллица DOS)'"));
	СписокКодировок.Добавить("iso-8859-1",   НСтр("en='iso-8859-1 (Western European ISO)';ru='iso-8859-1 (Западноевропейская ISO)'"));
	СписокКодировок.Добавить("iso-8859-2",   НСтр("en='iso-8859-2 (Central European ISO)';ru='iso-8859-2 (Центральноевропейская ISO)'"));
	СписокКодировок.Добавить("iso-8859-3",   НСтр("en='iso-8859-3 (Latin 3 ISO)';ru='iso-8859-3 (Латиница 3 ISO)'"));
	СписокКодировок.Добавить("iso-8859-4",   НСтр("en='iso-8859-4 (Baltic ISO)';ru='iso-8859-4 (Балтийская ISO)'"));
	СписокКодировок.Добавить("iso-8859-5",   НСтр("en='iso-8859-5 (Cyrillic ISO)';ru='iso-8859-5 (Кириллица ISO)'"));
	СписокКодировок.Добавить("iso-8859-7",   НСтр("en='iso-8859-7 (Greek ISO)';ru='iso-8859-7 (Греческая ISO)'"));
	СписокКодировок.Добавить("iso-8859-9",   НСтр("en='iso-8859-9 (Turkish ISO)';ru='iso-8859-9 (Турецкая ISO)'"));
	СписокКодировок.Добавить("iso-8859-15",  НСтр("en='iso-8859-15 (Latin 9 ISO)';ru='iso-8859-15 (Латиница 9 ISO)'"));
	СписокКодировок.Добавить("koi8-r",       НСтр("en='koi8-r (Cyrillic KOI8-R)';ru='koi8-r (Кириллица KOI8-R)'"));
	СписокКодировок.Добавить("koi8-u",       НСтр("en='koi8-u (Cyrillic KOI8-U)';ru='koi8-u (Кириллица KOI8-U)'"));
	СписокКодировок.Добавить("us-ascii",     НСтр("en='us-ascii USA';ru='us-ascii США'"));
	СписокКодировок.Добавить("utf-8",        НСтр("en='utf-8 (Unicode UTF-8)';ru='utf-8 (Юникод UTF-8)'"));
	СписокКодировок.Добавить("windows-1250", НСтр("en='windows-1250 (Central European Windows)';ru='windows-1250 (Центральноевропейская Windows)'"));
	СписокКодировок.Добавить("windows-1251", НСтр("en='windows-1251 (Cyrillic Windows)';ru='windows-1251 (Кириллица Windows)'"));
	СписокКодировок.Добавить("windows-1252", НСтр("en='windows-1252 (Western European Windows)';ru='windows-1252 (Западноевропейская Windows)'"));
	СписокКодировок.Добавить("windows-1253", НСтр("en='windows-1253 (Greek Windows)';ru='windows-1253 (Греческая Windows)'"));
	СписокКодировок.Добавить("windows-1254", НСтр("en='windows-1254 (Turkish Windows)';ru='windows-1254 (Турецкая Windows)'"));
	СписокКодировок.Добавить("windows-1257", НСтр("en='windows-1257 (Baltic Windows)';ru='windows-1257 (Балтийская Windows)'"));
	
	Возврат СписокКодировок;

КонецФункции

// Формирует представление адресата электронной почты.
//
// Параметры:
//  Имя     - Строка - имя адресата.
//  Адрес   - Строка - адрес электронной почты адресата.
//  Контакт - СправочникСсылка - контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//   Строка - сформированное представление адресата электронной почты.
//
Функция ПолучитьПредставлениеАдресата(Имя, Адрес, Контакт) Экспорт
	
	АдресСоСкобками = "<" + Адрес + ">";
	Результат = ?(Имя = Адрес ИЛИ Имя = "", Адрес, ?(ПустаяСтрока(Адрес),Имя, СокрЛП(СтрЗаменить(Имя, АдресСоСкобками, "")) + " " + АдресСоСкобками));
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Результат = Результат + " [" + ПолучитьПредставлениеКонтакта(Контакт) + "]";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление списка адресатов электронной почты для коллекции адресатов.
//
// Параметры:
//  ТаблицаАдресатов    - ТаблицаЗначений - таблица с данным адресатов.
//  ВключатьИмяКонтакта - Булево - признак необходимости включения в представление данных контакта.
//
// Возвращаемое значение:
//  Строка - сформированное представление списка адресатов электронной почты.
//
Функция ПолучитьПредставлениеСпискаАдресатов(ТаблицаАдресатов, ВключатьИмяКонтакта = Истина) Экспорт

	Представление = "";
	Для Каждого СтрокаТаблицы Из ТаблицаАдресатов Цикл
		Представление = Представление 
	              + ПолучитьПредставлениеАдресата(СтрокаТаблицы.Представление,
	                                              СтрокаТаблицы.Адрес, 
	                                             ?(ВключатьИмяКонтакта, СтрокаТаблицы.Контакт, "")) + ", ";
	КонецЦикла;

	// +CRM уберем запятую в конце.
	Представление = СокрЛП(Представление);
	
	Если Прав(Представление, 1) = "," Тогда
		ДлинаСтрокиБезЗапятой = СтрДлина(Представление) - 1;
		Представление = Лев(Представление, ДлинаСтрокиБезЗапятой);
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Проверяет, является ли переданная ссылка предметом взаимодействий.
//
// Параметры:
//  ОбъектСсылка - Ссылка - ссылка, для которой выполняется проверка,
//                          является ли она ссылкой на предмет взаимодействий.
//
// Возвращаемое значение:
//   Булево   - Истина если является, Ложь в обратном случае.
//
Функция ЯвляетсяПредметом(ОбъектСсылка) Экспорт
	
	CRM_ВзаимодействияСервер.ЯвляетсяПредметом(ОбъектСсылка);
	
КонецФункции 

// При необходимости дополняет массив строковых представлений типов предметов взаимодействий.
// Используется, если в конфигурации определен хотя бы один предмет взаимодействий. Например, заказы, вакансии и т.п.
//
// Параметры:
//  ТипыПредметов  - Массив - массив, в который добавляются строковые представления типов предметов взаимодействий.
//
Процедура ПриОпределенииВозможныхПредметов(ТипыПредметов) Экспорт
	
	// +CRM
	ТипыПредметов.Добавить("ДокументСсылка.CRM_РассылкаЭлектронныхПисем");
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю") Тогда
		ТипыПредметов.Добавить("ДокументСсылка.CRM_СчетНаОплатуПокупателю");
	КонецЕсли;
	ТипыПредметов.Добавить("ДокументСсылка.CRM_Телемаркетинг");
	ТипыПредметов.Добавить("БизнесПроцессСсылка.CRM_БизнесПроцесс");
	// -CRM
	
КонецПроцедуры

// Дополняет описания возможных типов контактов.
// Используется, если в конфигурации определен хотя бы один тип контактов взаимодействий,
// помимо справочника Пользователи. Например, партнеры, контактные лица и т.п.
//
// Параметры:
//  ТипыКонтактов - Массив - массив структур, в котором описываются возможные типы контактов.
//    Каждая структура содержит описание одного типа контактов и содержит следующие поля:
//       *Тип                                - Тип    - тип ссылки контакта.
//       *ВозможностьИнтерактивногоСоздания  - Булево - признак возможности интерактивного создания контакта из
//                                                      документов - взаимодействий.
//       *Имя                                 - Строка - имя типа контакта , как оно определено в метаданных.
//       *Представление                       - Строка - представление типа контакта для отображения пользователю.
//       *Иерархический                       - Булево - признак того, является ли справочник иерархическим.
//       *ЕстьВладелец                        - Булево - признак того, что у контакта есть владелец.
//       *ИмяВладельца                        - Строка - имя владельца контакта, как оно определено в метаданных.
//       *ИскатьПоДомену                      - Булево - признак того, что по данному типу контакта будет осуществляться
//                                                       поиск по домену.
//       *Связь                               - Строка - описывает возможную связь данного контакта с другим контактом, в
//                                                       случае когда текущий контакт является реквизитом другого контакта.
//                                                       Описывается следующей строкой "ИмяТаблицы.ИмяРеквизита".
//       *ИмяРеквизитаПредставлениеКонтакта   - Строка - имя реквизита контакта, из которого будет получено
//                                                       представление контакта.
//
Процедура ПриОпределенииВозможныхКонтактов(ТипыКонтактов) Экспорт
	
	ВзаимодействияКлиентСервер.ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(ТипыКонтактов,
	                                                                                 Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"),
	                                                                                 Истина,
	                                                                                 "CRM_ПотенциальныеКлиенты",
	                                                                                 НСтр("ru='Потенциальные клиенты';en='Potential customers'"),
	                                                                                 Ложь,
	                                                                                 Ложь,
	                                                                                 "",
	                                                                                 Ложь,
	                                                                                 "");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПредставлениеКонтакта(Контакт)

	Возврат Строка(Контакт);

КонецФункции

#КонецОбласти