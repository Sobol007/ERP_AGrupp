////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Производство"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Настройки

// Получает настройки подсистемы "Производство"
// 
// Возвращаемое значение:
//   - Структура - настройки подсистемы "Производство"
//
Функция НастройкиПодсистемыПроизводство() Экспорт
	
	Результат = Новый Структура;
	
	ИспользуетсяПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	Результат.Вставить("ИспользуетсяПроизводство", ИспользуетсяПроизводство);
	Результат.Вставить("ИспользуетсяПроизводствоНаСтороне", ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне"));
	
	Результат.Вставить("ИспользуетсяПроизводство21", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством"));
	Результат.Вставить("ИспользуетсяПроизводство22", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2"));
	
	#Область УправлениеПроизводством
	
	Результат.Вставить("ПланируетсяГрафикПроизводства", Ложь);
	Результат.Вставить("ИспользуетсяПланированиеПоПроизводственнымРесурсам", Ложь);
	Результат.Вставить("ИспользуетсяПланированиеПоМатериальнымРесурсам", Ложь);
	Результат.Вставить("ФорматДатыГрафика", "ДЛФ=D");
	
	//++ НЕ УТКА
	НастройкиУправленияПроизводством = УправлениеПроизводством.НастройкиУправленияПроизводством();
	ЗаполнитьЗначенияСвойств(Результат, НастройкиУправленияПроизводством);
	//-- НЕ УТКА
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры производственного подразделения
//
// Параметры:
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение для которого требуется получить параметры
//
// Возвращаемое значение:
//   Структура   - содержит параметры производственного подразделения
//
Функция ПараметрыПроизводственногоПодразделения(Подразделение) Экспорт
	
	СписокПодразделений = Новый Массив;
	СписокПодразделений.Добавить(Подразделение);
	Параметры = ПараметрыПроизводственныхПодразделений(СписокПодразделений);
	Возврат Параметры[Подразделение];
	
КонецФункции

// Возвращает параметры производственного подразделения
//
// Параметры:
//  СписокПодразделений - Массив - список подразделений для которых требуется получить параметры
//
// Возвращаемое значение:
//  Соответствие, где ключ - ссылка на подразделение, а Значение - структура, которая 
//				содержит параметры производственного подразделения
//
Функция ПараметрыПроизводственныхПодразделений(СписокПодразделений) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Наименование           КАК Наименование,
	|	СтруктураПредприятия.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|
	|	СтруктураПредприятия.ПроизводствоПоЗаказам  КАК ПроизводствоПоЗаказам,
	|	СтруктураПредприятия.ПроизводствоБезЗаказов КАК ПроизводствоБезЗаказов,
	|
	|	СтруктураПредприятия.ИспользуетсяСписаниеЗатратНаВыпуск КАК ИспользуетсяСписаниеЗатратНаВыпуск,
	|
	|	СтруктураПредприятия.ГрафикиРаботы.(
	|		ГрафикРаботы КАК График
	|	)                                     КАК Графики,
	|	ОсновнойКалендарьПредприятия.Значение КАК ОсновнойГрафик,
	|
//++ НЕ УТКА
	|	СтруктураПредприятия.ИнтервалПланирования           КАК ИнтервалПланирования,
	|	СтруктураПредприятия.НачалоИнтервалаПланирования    КАК НачалоИнтервалаПланирования,
	|	СтруктураПредприятия.ОкончаниеИнтервалаПланирования КАК ОкончаниеИнтервалаПланирования,
	|
	|	СтруктураПредприятия.УправлениеМаршрутнымиЛистами КАК УправлениеМаршрутнымиЛистами,
	|	СтруктураПредприятия.СпособПооперационногоУправления КАК СпособПооперационногоУправления,
	|
	|	СтруктураПредприятия.ИспользоватьПооперационноеУправление   КАК ИспользоватьПооперационноеУправление,
	|	СтруктураПредприятия.ИспользоватьПооперационноеПланирование КАК ИспользоватьПооперационноеПланирование,
	|
	|	СтруктураПредприятия.ИспользоватьМатериалыВОперациях        КАК ИспользоватьМатериалыВОперациях,
	|	СтруктураПредприятия.ИспользоватьВыходныеИзделияВОперациях  КАК ИспользоватьВыходныеИзделияВОперациях,
	|
	|	СтруктураПредприятия.ИспользоватьСменныеЗадания             КАК ИспользоватьСменныеЗадания,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.СпособНастройкиГрафикаРаботы = ЗНАЧЕНИЕ(Перечисление.СпособыНастройкиГрафикаРаботыПодразделений.Смены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                       КАК ИспользоватьСмены,
	|
	|	СтруктураПредприятия.ИспользоватьПроизводственныеУчастки    КАК ИспользоватьУчастки,
	|
//-- НЕ УТКА
	|	СтруктураПредприятия.ИспользоватьБригадныеНаряды            КАК ИспользоватьБригадныеНаряды,
	|	СтруктураПредприятия.ИспользоватьПерсональныеНаряды         КАК ИспользоватьПерсональныеНаряды,
	|
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В (&СписокПодразделений)
	|");
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);

	ЗначенияПараметров = Новый Соответствие;
	
	Для каждого Ссылка Из СписокПодразделений Цикл
		Результат = СтруктураРеквизитовПроизводственногоПодразделения();
		ЗначенияПараметров.Вставить(Ссылка, Результат);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЗначенияПараметров[Выборка.Ссылка], Выборка);
		
		Если Выборка.Графики.Пустой() Тогда
			ЗначенияПараметров[Выборка.Ссылка].ГрафикиРаботы.Добавить(Выборка.ОсновнойГрафик);
		Иначе
			ЗначенияПараметров[Выборка.Ссылка].ГрафикиРаботы = Выборка.Графики.Выгрузить().ВыгрузитьКолонку("График");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

// Определяет используется ли производство версии 2.1
// 
// Возвращаемое значение:
//   Булево - Истина, если используется производство версии 2.1
//
Функция ИспользуетсяПроизводство21() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	
КонецФункции

// Определяет используется ли производство версии 2.2
// 
// Возвращаемое значение:
//   Булево - Истина, если используется производство версии 2.2
//
Функция ИспользуетсяПроизводство22() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
КонецФункции

// Определяет, используются ли серии в производстве версии 2.2.
//
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  *ИспользоватьСерииНоменклатуры - Булево
//  *УчитыватьСебестоимостьПоСериям - Булево
//
Функция ИспользованиеСерийВПроизводстве22() Экспорт
	
	Результат = Новый Структура("ИспользоватьСерииНоменклатуры, УчитыватьСебестоимостьПоСериям", Ложь, Ложь);
	
//++ НЕ УТКА
	Результат.Вставить("ИспользоватьСерииНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство22"));
	Результат.Вставить("УчитыватьСебестоимостьПоСериям", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямПроизводство22"));
//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Обеспечение

// Возвращает текст запроса с помощью которого можно получить склад материалов.
//
// Параметры:
//  ИмяТаблицыМатериалы			 - Строка - Псевдоним таблицы "материалов". Таблица должна содержать
//		поля Номенклатура, Характеристика, Подразделение (не обязательно).
//  ИмяПоляПодразделение		 - Строка - Имя поля "Подразделение" в таблице материалов.
//		Если подразделение определяется параметром, то перед именем нужно добавить "&".
//  ВариантЗаполненияОбеспечения	 - Вариант заполнения обеспечения (см. перечисление ВариантыЗаполненияОбеспеченияПроизводства)
// 
// Возвращаемое значение:
//  Структура - содержит тексты запросов:
//  	* ТекстПолеСклад - Строка - текст для получения поля "Склад".
//  	* ТекстПолеОснование - Строка - текст для получения поля "ОснованиеДляПолучения".
//  	* ТекстСоединения - Строка - текст соединений.
//
Функция ТекстЗапросаНастройкиПередачиМатериалов(ИмяТаблицыМатериалы, ИмяПоляПодразделение = Неопределено, ВариантЗаполненияОбеспечения = Неопределено) Экспорт
	
	Если ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.НеЗаполнять Тогда
		
		ТекстПолеСклад     = "ЛОЖЬ";
		ТекстПолеОснование = "ЛОЖЬ";
		ТекстСоединения    = "";
		
	Иначе
		
		Если ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения Тогда
			
			ТекстПолеСклад = 
			"ВЫБОР
			|	КОГДА ЕСТЬNULL(НастройкаДетальная.МетодОбеспеченияПотребностей, 
			|			ЕСТЬNULL(НастройкаГруппировки.МетодОбеспеченияПотребностей, 
			|			ЕСТЬNULL(НастройкаОбщая.МетодОбеспеченияПотребностей, 
			|			ЕСТЬNULL(НастройкаГруппировкиОбщейНастройки.МетодОбеспеченияПотребностей, NULL)))) В (
			|					ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс),
			|					ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме),
			|					ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике))
			|		ТОГДА ЕСТЬNULL(НастройкаДетальная.Склад, 
			|			ЕСТЬNULL(ПринадлежностьГруппе.Склад, 
			|			ЕСТЬNULL(НастройкаОбщая.Склад, 
			|			ЕСТЬNULL(ПринадлежностьГруппеОбщейНастройки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))))
			|	ИНАЧЕ ЕСТЬNULL(СхемыОбеспеченияПроизводства.Склад, &СкладПоУмолчанию)
			|КОНЕЦ";
			
			ТекстПолеОснование = 
				"ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)";
			
			ТекстСоединения = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспеченияПроизводства КАК СхемыОбеспеченияПроизводства
			|		ПО ТаблицаМатериалы.Номенклатура.СхемаОбеспечения = СхемыОбеспеченияПроизводства.СхемаОбеспечения
			|			И ТаблицаМатериалы.Подразделение = СхемыОбеспеченияПроизводства.Подразделение
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|		ПО &ПодстановкаТоварногоОграничения";
			
			ПоляСоединенияТоварныеОграничения = 
				"ТаблицаМатериалы.Номенклатура,ТаблицаМатериалы.Характеристика,ТаблицаМатериалы.Подразделение";
			
			ТекстСоединения = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединениеПоддержанияЗапасовВКладовых(
									ТекстСоединения, "ПодстановкаТоварногоОграничения", ПоляСоединенияТоварныеОграничения);
		Иначе	
			
			ТекстПолеСклад = 
			"ЕСТЬNULL(НастройкаПередачиХарактеристика.Склад,
			|				ЕСТЬNULL(НастройкаПередачиНоменклатура.Склад, 
			|				ЕСТЬNULL(НастройкаПередачиСклад.Склад, &СкладПоУмолчанию)))";
			
			ТекстПолеОснование = 
			"ЕСТЬNULL(НастройкаПередачиХарактеристика.ОснованиеДляПолучения,
			|				ЕСТЬNULL(НастройкаПередачиНоменклатура.ОснованиеДляПолучения,
			|				ЕСТЬNULL(НастройкаПередачиСклад.ОснованиеДляПолучения,
			|						ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство))))";
			
			ТекстСоединения = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиХарактеристика
			|		ПО ТаблицаМатериалы.Подразделение = НастройкаПередачиХарактеристика.Подразделение
			|			И ТаблицаМатериалы.Номенклатура = НастройкаПередачиХарактеристика.Номенклатура
			|			И ТаблицаМатериалы.Характеристика = НастройкаПередачиХарактеристика.Характеристика
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиНоменклатура
			|		ПО ТаблицаМатериалы.Подразделение = НастройкаПередачиНоменклатура.Подразделение
			|			И ТаблицаМатериалы.Номенклатура = НастройкаПередачиНоменклатура.Номенклатура
			|			И (НастройкаПередачиНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиСклад
			|		ПО ТаблицаМатериалы.Подразделение = НастройкаПередачиСклад.Подразделение
			|			И (НастройкаПередачиСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
			|			И (НастройкаПередачиСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|			И (НастройкаПередачиХарактеристика.Подразделение ЕСТЬ NULL )
			|			И (НастройкаПередачиНоменклатура.Подразделение ЕСТЬ NULL )";
			
		КонецЕсли; 
		
		Если ИмяПоляПодразделение <> Неопределено Тогда
			Если Лев(ИмяПоляПодразделение, 1) = "&" Тогда
				ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТаблицаМатериалы.Подразделение", ИмяПоляПодразделение);
			ИначеЕсли ИмяПоляПодразделение <> "Подразделение" Тогда
				ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТаблицаМатериалы.Подразделение", "ТаблицаМатериалы." + ИмяПоляПодразделение);
			КонецЕсли; 
		КонецЕсли;
		
		Если ИмяТаблицыМатериалы <> "ТаблицаМатериалы" Тогда
			ТекстПолеСклад  = СтрЗаменить(ТекстПолеСклад,  "ТаблицаМатериалы", ИмяТаблицыМатериалы);
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТаблицаМатериалы", ИмяТаблицыМатериалы);
		КонецЕсли;
	
	КонецЕсли;
	
	ШаблоныЗапроса = Новый Структура;
	ШаблоныЗапроса.Вставить("ТекстПолеСклад",     ТекстПолеСклад);
	ШаблоныЗапроса.Вставить("ТекстПолеОснование", ТекстПолеОснование);
	ШаблоныЗапроса.Вставить("ТекстСоединения",    ТекстСоединения);
	
	Возврат ШаблоныЗапроса;

КонецФункции

// Формирует текст запроса инициализирующий временную таблицу ВтСпособыПолученияМатериалов.
// 
// Возвращаемое значение:
//   - Строка - текст запроса
//
Функция ТекстЗапросаВТСпособыПолученияМатериаловПустая() Экспорт
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО								                 КАК Распоряжение,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                 КАК Назначение,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                	 КАК Склад,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) 	 КАК ВариантОбеспечения
		|ПОМЕСТИТЬ ВтСпособыПолученияМатериалов
		|ГДЕ
		|	ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для получения полей Склад, ВариантОбеспечения
//
// Параметры:
//  ИмяТаблицыМатериалы			 - Строка - Псевдоним таблицы "материалов". Таблица должна содержать
//		поля Номенклатура, Характеристика, Подразделение (не обязательно).
//  ИмяПоляСпособПолученияМатериала	 - Строка - имя поля в котором содержится способ получения.
//  ИмяПоляПодразделение			 - Строка - имя поля в котором содержится ссылка на подразделение,
//		например "Этап.Подразделение".
//  ВариантЗаполненияОбеспечения	 - Вариант заполнения обеспечения (см. перечисление ВариантыЗаполненияОбеспеченияПроизводства)
// 
// Возвращаемое значение:
//  Структура - содержит тексты запросов:
//  	* ТекстПолеСклад - Строка - текст для получения поля "Склад".
//  	* ТекстПолеВариантОбеспечения - Строка - текст для получения поля "ВариантОбеспечения".
//  	* ТекстПолеОснование - Строка - текст для получения поля "ОснованиеДляПолучения".
//  	* ТекстПолеЗапрещеноИзменятьВариантОбеспечения - Строка - текст для получения поля 
//			"ЗапрещеноИзменятьВариантОбеспечения".
//  	* ТекстСоединения - Строка - текст соединений.
//
Функция ТекстЗапросаПараметрыОбеспечения(ИмяТаблицыМатериалы, ИмяПоляСпособПолученияМатериала = Неопределено, ИмяПоляПодразделение = Неопределено, ВариантЗаполненияОбеспечения = Неопределено) Экспорт
	
	Если ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.НеЗаполнять Тогда
		
		ТекстПолеСклад                               = "ЛОЖЬ";
		ТекстПолеВариантОбеспечения                  = "ЛОЖЬ";
		ТекстПолеОснование                           = "ЛОЖЬ";
		ТекстПолеЗапрещеноИзменятьВариантОбеспечения = "ЛОЖЬ";
		ТекстСоединения                              = "";
		
	Иначе
	
		Если ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоСхемамОбеспечения Тогда
			
			// В версии 2.2. 
			// - ПФ всегда идут через склад
			// - Для получения склада используются схемы обеспечения
			
			// Склад
			#Область ТекстПолеСклад
			ТекстПолеСклад = 
			"ВЫБОР
			|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|				ИЛИ ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
			|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа), 
			|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|		КОГДА НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад ЕСТЬ NULL
			|				И ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад <> НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад
			|		ИНАЧЕ &ТекстПоляСкладМатериалов
			|	КОНЕЦ";
			#КонецОбласти
			
			// ВариантОбеспечения
			#Область ТекстПолеВариантОбеспечения
			
			ТекстПолеВариантОбеспечения = 
			"ВЫБОР 
			|		КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно)
			|
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|
			|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
			|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) ТОГДА
			|			
			|			ВЫБОР 
			|				КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа 
			|						ИЛИ МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
			|																			ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе))
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
			|			КОНЕЦ
			|			
			|		КОГДА МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
			|															ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)) ТОГДА
			|
			|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|			
			|		КОГДА НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.ВариантОбеспечения ЕСТЬ NULL
			|			И ТаблицаСпособыПолученияМатериаловПереопределяемый.ВариантОбеспечения <> НЕОПРЕДЕЛЕНО ТОГДА
			|
			|			ТаблицаСпособыПолученияМатериаловПереопределяемый.ВариантОбеспечения
			|
			|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
			|			
			|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
			|		
			|		КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа ТОГДА
			|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
			|	
			|	КОНЕЦ";
			
			#КонецОбласти
			
		Иначе // По настройкам передачи в произвдство
			
			// Склад
			#Область ТекстПолеСклад
			ТекстПолеСклад = 
			"ВЫБОР 
			|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
			|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|		КОГДА НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад ЕСТЬ NULL ТОГДА
			|			ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад";
			
			Если ИмяПоляСпособПолученияМатериала <> Неопределено Тогда
				ТекстПолеСклад = ТекстПолеСклад + "
				|		КОГДА МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
				|															ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)) ТОГДА
				|			ВЫБОР 
				|				КОГДА СпрПодразделение.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую)
				|					ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
				|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение = МатериалыИУслуги.Подразделение
				|					ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
				|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение <> МатериалыИУслуги.Подразделение
				|					ТОГДА &ТекстПоляСкладМатериалов
				|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
				|						И ПроизводимоеВПроцессеИзделие.Этап.Подразделение <> МатериалыИУслуги.Подразделение
				|					ТОГДА &ТекстПоляСкладМатериалов
				|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			КОНЕЦ";
			КонецЕсли; 
			
			Если ВариантЗаполненияОбеспечения = Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводствоДляПланов Тогда
				
				ТекстПолеСклад = ТекстПолеСклад + "
				|		ИНАЧЕ &ТекстПоляСкладМатериалов
				|	КОНЕЦ";
				
			Иначе
				
				ТекстПолеСклад = ТекстПолеСклад + "
				|		КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
				|			ТОГДА &ТекстПоляСкладМатериалов
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|	КОНЕЦ";
				
			КонецЕсли;
			
			#КонецОбласти
			
			// ВариантОбеспечения
			#Область ТекстПолеВариантОбеспечения
			ТекстПолеВариантОбеспечения = "ВЫБОР";
			Если ИмяПоляСпособПолученияМатериала <> Неопределено Тогда
				ТекстПолеВариантОбеспечения = ТекстПолеВариантОбеспечения + "
				|		КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно)
				|
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
				|
				|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
				|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) ТОГДА
				|			
				|			ВЫБОР 
				|				КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа 
				|						ИЛИ МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
				|																			ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе))
				|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
				|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
				|			КОНЕЦ
				|			
				|		КОГДА МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
				|															ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)) ТОГДА
				|			ВЫБОР 
				|				КОГДА МатериалыИУслуги.Подразделение.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую)
				|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
				|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
				|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение = МатериалыИУслуги.Подразделение
				|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
				|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
				|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение <> МатериалыИУслуги.Подразделение
				|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
				|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
				|						И ПроизводимоеВПроцессеИзделие.Этап.Подразделение <> МатериалыИУслуги.Подразделение
				|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
				|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
				|			КОНЕЦ";
			КонецЕсли;
			
			ТекстПолеВариантОбеспечения = ТекстПолеВариантОбеспечения + "
			|			
			|		КОГДА НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.Номенклатура ЕСТЬ NULL ТОГДА
			|
			|			ТаблицаСпособыПолученияМатериаловПереопределяемый.ВариантОбеспечения
			|
			|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
			|			
			|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
			|		
			|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|				И &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
			|				ТОГДА
			|		
			|			ВЫБОР 
			|				КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа 
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
			|			КОНЕЦ
			|	
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
			|	КОНЕЦ";
			
			#КонецОбласти
			
		КонецЕсли; 
		
		ТекстЗапросаДляПолученияСклада = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
											ИмяТаблицыМатериалы, 
											ИмяПоляПодразделение,
											ВариантЗаполненияОбеспечения);
											
		ТекстПолеСклад = СтрЗаменить(
							ТекстПолеСклад, 
							"&ТекстПоляСкладМатериалов",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
		ТекстПолеОснование = ТекстЗапросаДляПолученияСклада.ТекстПолеОснование;
		
		ТекстПолеСклад = СтрЗаменить(
							ТекстПолеСклад, 
							"&ТекстПолеОснование",
							ТекстПолеОснование);
		
		ТекстПолеВариантОбеспечения = СтрЗаменить(
							ТекстПолеВариантОбеспечения, 
							"&ТекстПолеОснование",
							ТекстПолеОснование);
		
		ТекстСоединения = ТекстЗапросаДляПолученияСклада.ТекстСоединения + " 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыПолученияМатериалов КАК ТаблицаСпособыПолученияМатериаловПереопределяемый
		|		ПО ТаблицаСпособыПолученияМатериаловПереопределяемый.Номенклатура = МатериалыИУслуги.Номенклатура
		|			И ТаблицаСпособыПолученияМатериаловПереопределяемый.Характеристика = МатериалыИУслуги.Характеристика
		|			И ТаблицаСпособыПолученияМатериаловПереопределяемый.Распоряжение = &Распоряжение
		|			И ТаблицаСпособыПолученияМатериаловПереопределяемый.Назначение = &Назначение
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СпрПодразделение
		|		ПО СпрПодразделение.Ссылка = МатериалыИУслуги.Подразделение";
							
		Если ИмяПоляСпособПолученияМатериала <> Неопределено 
			И ИмяПоляСпособПолученияМатериала <> "СпособПолученияМатериала" Тогда
			
			ТекстПолеСклад = СтрЗаменить(
				ТекстПолеСклад,
				"МатериалыИУслуги.СпособПолученияМатериала",
				"МатериалыИУслуги." + ИмяПоляСпособПолученияМатериала);
			
			ТекстПолеВариантОбеспечения = СтрЗаменить(
				ТекстПолеВариантОбеспечения,
				"МатериалыИУслуги.СпособПолученияМатериала",
				"МатериалыИУслуги." + ИмяПоляСпособПолученияМатериала);
			
		КонецЕсли;
			
		Если ИмяПоляПодразделение <> Неопределено Тогда 
			
			Если Лев(ИмяПоляПодразделение, 1) = "&" Тогда
				
				ТекстПолеСклад = СтрЗаменить(
					ТекстПолеСклад,
					"МатериалыИУслуги.Подразделение",
					ИмяПоляПодразделение);
				
				ТекстПолеВариантОбеспечения = СтрЗаменить(
					ТекстПолеВариантОбеспечения,
					"МатериалыИУслуги.Подразделение",
					ИмяПоляПодразделение);
					
				ТекстСоединения = СтрЗаменить(
					ТекстСоединения,
					"МатериалыИУслуги.Подразделение",
					ИмяПоляПодразделение);
					
			ИначеЕсли ИмяПоляПодразделение <> "Подразделение" Тогда
				
				ТекстПолеСклад = СтрЗаменить(
					ТекстПолеСклад,
					"МатериалыИУслуги.Подразделение",
					"МатериалыИУслуги." + ИмяПоляПодразделение);
				
				ТекстПолеВариантОбеспечения = СтрЗаменить(
					ТекстПолеВариантОбеспечения,
					"МатериалыИУслуги.Подразделение",
					"МатериалыИУслуги." + ИмяПоляПодразделение);
					
				ТекстСоединения = СтрЗаменить(
					ТекстСоединения,
					"МатериалыИУслуги.Подразделение",
					"МатериалыИУслуги." + ИмяПоляПодразделение);
					
			КонецЕсли; 
			
		КонецЕсли; 
		
		ТекстПолеЗапрещеноИзменятьВариантОбеспечения = 
			"НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.ВариантОбеспечения ЕСТЬ NULL
			|	И ТаблицаСпособыПолученияМатериаловПереопределяемый.ВариантОбеспечения <> НЕОПРЕДЕЛЕНО";
		
		Если ИмяТаблицыМатериалы <> "МатериалыИУслуги" Тогда
			ТекстПолеСклад                               = СтрЗаменить(ТекстПолеСклад,                               "МатериалыИУслуги", ИмяТаблицыМатериалы);
			ТекстПолеВариантОбеспечения                  = СтрЗаменить(ТекстПолеВариантОбеспечения,                  "МатериалыИУслуги", ИмяТаблицыМатериалы);
			ТекстПолеЗапрещеноИзменятьВариантОбеспечения = СтрЗаменить(ТекстПолеЗапрещеноИзменятьВариантОбеспечения, "МатериалыИУслуги", ИмяТаблицыМатериалы);
			ТекстСоединения                              = СтрЗаменить(ТекстСоединения,                              "МатериалыИУслуги", ИмяТаблицыМатериалы);
		КонецЕсли;
	
	КонецЕсли;
	
	ШаблоныЗапроса = Новый Структура();
	ШаблоныЗапроса.Вставить("ТекстПолеСклад",                               ТекстПолеСклад);
	ШаблоныЗапроса.Вставить("ТекстПолеВариантОбеспечения",                  ТекстПолеВариантОбеспечения);
	ШаблоныЗапроса.Вставить("ТекстПолеОснование",                           ТекстПолеОснование);
	ШаблоныЗапроса.Вставить("ТекстПолеЗапрещеноИзменятьВариантОбеспечения", ТекстПолеЗапрещеноИзменятьВариантОбеспечения);
	ШаблоныЗапроса.Вставить("ТекстСоединения",                              ТекстСоединения);
	Возврат ШаблоныЗапроса;

КонецФункции

#КонецОбласти

#Область ВводНаОсновании

// Добавляет команду создания документа
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьПередачуМатериаловНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
			
			СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
			Операция = СписокОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
			
			Если Операция <> Неопределено Тогда
				
				КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
				КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
				КомандаСоздатьНаОсновании.Представление = Операция.Представление;
				КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьПередачуМатериаловВКладовуюНаОсновании";
				КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
				КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
				КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
				
				Возврат КомандаСоздатьНаОсновании;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Документы.ПередачаМатериаловВПроизводство.ДобавитьКомандуСоздатьНаОснованииПередачаВПроизводство(КомандыСоздатьНаОсновании);
	
КонецФункции

// Добавляет команду создания документа
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьВыпускПродукцииБезЗаказаНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Передача выпущенной продукции';
														|en = 'Transfer released products'");
		КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьВыпускПродукцииБезЗаказаНаОсновании";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РасчетДолейСтоимости

// Рассчитывает долю стоимости выходных изделий по табличной части документа
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы справочника, документа
//  ПараметрыРаспределенияЗатрат - Структура			 - структура параметров расчета, см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия()
//
Процедура РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат) Экспорт
	
	ТабличнаяЧасть = Объект[ПараметрыРаспределенияЗатрат.ИмяТЧ];
	
	Если Не ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректно переданы параметры распределения затрат.';
								|en = 'Cost allocation parameters are transferred incorrectly. '");
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки        КАК НомерСтроки,
	|
	|	Таблица.Номенклатура       КАК Номенклатура,
	|	Таблица.Характеристика     КАК Характеристика,
	|
	|	Таблица.Упаковка           КАК Упаковка,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.Количество         КАК Количество,
	|
	|	Таблица.ДоляСтоимости      КАК ДоляСтоимости
	|
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	ВыполнитьПодстановкуТекстаЗапросаАвторасчетаЛюбойХарактеристики(ТекстЗапроса, ПараметрыРаспределенияЗатрат);
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|
	|	%ДоляСтоимости% КАК ДоляСтоимости,
	|	%ДоляСтоимостиНаЕдиницу% КАК ДоляСтоимостиНаЕдиницу
	|
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|	%СоединениеДоляСтоимости%
	|;
	|";
	ПараметрыПодстановки = ПроизводствоСервер.ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
		"ТабличнаяЧасть",
		"&СпособРаспределенияЗатратНаВыходныеИзделия",
		"(Номенклатура, Характеристика) В (
		|	Выбрать
		|		Т.Номенклатура,
		|		Т.Характеристика
		|	ИЗ
		|		ТабличнаяЧасть КАК Т)");
	ПроизводствоСервер.ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, ПараметрыПодстановки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВидЦены", ПроизводствоСерверПовтИсп.ВидЦеныПлановойСтоимости());
	Запрос.УстановитьПараметр("СпособРаспределенияЗатратНаВыходныеИзделия", ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	ТаблицаЗначений = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(ТабличнаяЧасть,, "НомерСтроки, Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, Количество, ДоляСтоимости");
	Запрос.УстановитьПараметр("Таблица", ТаблицаЗначений);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.Следующий() Цикл
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(ТабличнаяЧасть[Выборка.НомерСтроки - 1], Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает долю стоимости строки табличной части
//
// Параметры:
//  ДанныеСтроки				 - Структура - строка табличной части
//  ПараметрыРаспределенияЗатрат - Структура - см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия()
// 
// Возвращаемое значение:
//  Структура - см. ПроизводствоКлиентСервер.СтруктураПолейДоляСтоимости()
//
Функция РассчитатьДолюСтоимостиНоменклатуры(ДанныеСтроки, ПараметрыРаспределенияЗатрат) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	0                   КАК НомерСтроки,
	|
	|	&Номенклатура       КАК Номенклатура,
	|	&Характеристика     КАК Характеристика,
	|
	|	&Упаковка           КАК Упаковка,
	|	&КоличествоУпаковок КАК КоличествоУпаковок,
	|	&Количество         КАК Количество,
	|
	|	0                   КАК ДоляСтоимости
	|
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|;
	|";
	ВыполнитьПодстановкуТекстаЗапросаАвторасчетаЛюбойХарактеристики(ТекстЗапроса, ПараметрыРаспределенияЗатрат);
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	%ДоляСтоимости% КАК ДоляСтоимости,
	|	%ДоляСтоимостиНаЕдиницу% КАК ДоляСтоимостиНаЕдиницу
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|	%СоединениеДоляСтоимости%
	|;
	|";
	ПараметрыПодстановки = ПроизводствоСервер.ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
		"ТабличнаяЧасть",
		"&СпособРаспределенияЗатратНаВыходныеИзделия",
		"(Номенклатура, Характеристика) В (
		|	Выбрать
		|		Т.Номенклатура,
		|		Т.Характеристика
		|	ИЗ
		|		ТабличнаяЧасть КАК Т)");
	ПроизводствоСервер.ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, ПараметрыПодстановки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура",       ДанныеСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",     ДанныеСтроки.Характеристика);
	
	Запрос.УстановитьПараметр("Упаковка",           ДанныеСтроки.Упаковка);
	Запрос.УстановитьПараметр("КоличествоУпаковок", ДанныеСтроки.КоличествоУпаковок);
	Запрос.УстановитьПараметр("Количество",         ДанныеСтроки.Количество);
	
	Запрос.УстановитьПараметр("ВидЦены", ПроизводствоСерверПовтИсп.ВидЦеныПлановойСтоимости());
	
	Если ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Запрос.УстановитьПараметр("СпособРаспределенияЗатратНаВыходныеИзделия", ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	Иначе
		Запрос.УстановитьПараметр("СпособРаспределенияЗатратНаВыходныеИзделия", ДанныеСтроки[ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия]);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = ПроизводствоКлиентСервер.СтруктураПолейДоляСтоимости();
	ЗаполнитьЗначенияСвойств(Результат,Выборка);
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает процент распределения затрат на выходные изделия по табличной части
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы справочника, документа
//  ПараметрыРаспределенияЗатрат - Структура			 - структура параметров расчета, см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия()
//  ОтборПоГруппировке			 - Произвольный			 - значение текущей группировки (если используется группировка затрат)
//
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат, Группировки = Неопределено) Экспорт
	
	Если Не ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ПараметрыРаспределенияЗатрат.ИмяТЧ];
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИтогиПоГруппировкам = ИтогиДолейСтоимостиПоГруппировкам(ТабличнаяЧасть, ПараметрыРаспределенияЗатрат, Группировки);
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		
		Отменено = (ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено И Строка.Отменено);
		
		Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> "" Тогда
			Группировка = Строка[ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат];
		Иначе
			Группировка = "";
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> "" И Группировки <> Неопределено И Группировки.Найти(Группировка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Итоги = ИтогиПоГруппировкам[Группировка];
		
		Если Итоги = Неопределено Тогда
			Строка.ДоляСтоимостиПроцент = 0;
			Строка.ДоляСтоимостиОбязательна = Ложь;
			Строка.ЕстьОшибкиЗаполненияДолиСтоимости = Ложь;
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = ?(Итоги.ДоляСтоимостиОбязательна, "ДоляСтоимости", "Количество");
		
		Если Итоги[ИмяПоля] <> 0 И НЕ Отменено
			И (НЕ Итоги.ИспользуетсяПараметризация ИЛИ Итоги.ИспользуетсяПараметризация И НЕ Итоги.ДоляСтоимостиРассчитывается)
		Тогда
			Строка.ДоляСтоимостиПроцент = (Строка[ИмяПоля] / Итоги[ИмяПоля]) * 100;
		Иначе
			Строка.ДоляСтоимостиПроцент = ?(Не Итоги.ДоляСтоимостиОбязательна И Итоги.КоличествоСтрокВГруппировке = 1, 100, 0);
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна Тогда
			Строка.ДоляСтоимостиОбязательна = Итоги.ДоляСтоимостиОбязательна И НЕ Отменено;
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения Тогда
			ЗаполнитьПризнакЕстьОшибкиЗаполненияДолиСтоимости(Строка, Итоги, Отменено, ПараметрыРаспределенияЗатрат);
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации Тогда
			Строка.ДоляСтоимостиНедоступна = Итоги.ИспользуетсяПараметризация И Итоги.ДоляСтоимостиРассчитывается;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция подготавливает параметры для открытия формы ввода долей стоимости и возвращает их.
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы справочника, документа
//  ПараметрыРаспределенияЗатрат - Структура			 - структура параметров расчета, см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия()
//	ТекущиеДанныеИдентификатор	 - Число				 - идентификатор текущей строки в форме документа;
//
// Возвращаемое значение:
//	Структура - параметры формы ввода долей стоимости
//
Функция ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ТабличнаяЧасть = Объект[ПараметрыРаспределенияЗатрат.ИмяТЧ];
	ДанныеСтроки = ТабличнаяЧасть.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	
	ДанныеПоНоменклатуре = Новый Структура("
		|Номенклатура,
		|Характеристика,
		|
		|Упаковка,
		|КоличествоУпаковок,
		|Количество,
		|
		|ДоляСтоимости,
		|ДоляСтоимостиНаЕдиницу
		|");
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеСтроки);
	ПараметрыФормы.Вставить("ДанныеПоНоменклатуре", ДанныеПоНоменклатуре);
	
	Группировки = Новый Массив;
	Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> "" Тогда
		Группировка = ДанныеСтроки[ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат];
		ПараметрыФормы.Вставить("ГруппировкаЗатрат", ДанныеСтроки[ПараметрыРаспределенияЗатрат.ПолеПредставленияГруппировкиЗатрат]);
	Иначе
		Группировка = "";
		ПараметрыФормы.Вставить("ГруппировкаЗатрат", "");
	КонецЕсли;
	Группировки.Добавить(Группировка);
	
	ИтогиПоГруппировкам = ИтогиДолейСтоимостиПоГруппировкам(ТабличнаяЧасть, ПараметрыРаспределенияЗатрат, Группировки);
	Итоги = ИтогиПоГруппировкам[Группировка];
	
	Если ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент Тогда
		ПараметрыФормы.Вставить("ДоляСтоимостиПроцент", ДанныеСтроки.ДоляСтоимостиПроцент);
		ПараметрыФормы.Вставить("ДоляСтоимостиИтого", Итоги.ДоляСтоимости);
	Иначе
		ПараметрыФормы.Вставить("ДоляСтоимостиПроцент", ?(Итоги.ДоляСтоимости <> 0, (ДанныеСтроки.ДоляСтоимости/Итоги.ДоляСтоимости) * 100, 0));
		ПараметрыФормы.Вставить("ДоляСтоимостиИтого", Итоги.ДоляСтоимости);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИспользуетсяПараметризация", Итоги.ИспользуетсяПараметризация);
	
	Если ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		ПараметрыФормы.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	Иначе
		ПараметрыФормы.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", ДанныеСтроки[ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия]);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", ПараметрыРаспределенияЗатрат.ТолькоПросмотр);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Устанавливает условное оформление для поля "Доля стоимости"
//
Процедура УстановитьУсловноеОформлениеПоляДоляСтоимости(Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "", ПутиКДанным = Неопределено) Экспорт
	
	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	// только просмотр
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "СпособРаспределенияЗатратНаВыходныеИзделия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиОбязательна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// отображение (для отмененных строк)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Устанавливает расширенное условное оформление для полей группы "Доля стоимости %"
//
Процедура УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "", ПутиКДанным = Неопределено) Экспорт
	
	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	// доля стоимости (видимость)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "СпособРаспределенияЗатратНаВыходныеИзделия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// доля стоимости (отметка незаполненного)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиОбязательна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// доля стоимости, % (видимость)
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимостиПроцент"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимостиПроцент"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// доля стоимости, индикатор (видимость)
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ЕстьОшибкиЗаполненияДолиСтоимости"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ЕстьОшибкиЗаполненияДолиСтоимости"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление поля "Доля стоимости" для отмененных строк
//
Процедура УстановитьУсловноеОформлениеПоляДоляСтоимостиОтмененныхСтрок(Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "") Экспорт
	
	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	// доля стоимости (отображение для отмененных строк)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Процедура подготавливает параметры для открытия формы ввода долей стоимости и возвращает их.
//
// Параметры:
//  Объект	 - ДокументОбъект, СправочникОбъект	 - объект, строку которого необходимо проверить
//  Строка	 - Структура	 - строка, в которой выполняется проверка доли стоимости
//
// Возвращаемое значение:
//	Булево - признак необходимости заполнения доли стоимости в строке
//
Функция ТребуетсяЗаполнитьДолюСтоимости(Объект, Строка) Экспорт
	
	Если Объект.СпособРаспределенияЗатратНаВыходныеИзделия =
			Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости Тогда
		
		Итоги = Объект.Продукция.Выгрузить(
			Новый Структура("Отменено", Ложь),
			"Номенклатура, Характеристика, ДоляСтоимости");
		
		Итоги.Свернуть("Номенклатура, Характеристика", "ДоляСтоимости");
		
		ОбщаяДоля = 0;
		Для Каждого ТекДоля Из Итоги Цикл
			ОбщаяДоля = ОбщаяДоля + ТекДоля.ДоляСтоимости
		КонецЦикла;
		
		Если Строка.ДоляСтоимости = 0
			И (Итоги.Количество() > 1
			ИЛИ Не ОбщаяДоля = 0) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Строка.ДоляСтоимости = 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ГрафикиРаботы

// Создает временную таблицу с графиками работы подразделений.
// Колонки таблицы: Ссылка, ГрафикРаботы.
//
// Параметры:
//  Ссылки					 - Массив, СправочникСсылка.СтруктураПредприятия - ссылки на подразделения.
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//  ИмяВТ					 - Строка - имя создаваемой временной таблицы.
//
Процедура СоздатьВТГрафикиРаботыПодразделений(Ссылки, МенеджерВременныхТаблиц, ИмяВТ = "ВТГрафикиРаботы") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(Графики.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение) КАК ГрафикРаботы
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК Графики
		|		ПО СтруктураПредприятия.Ссылка = Графики.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО (ИСТИНА)		
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В(&Ссылки)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки",
		?(ТипЗнч(Ссылки) = Тип("Массив"), Ссылки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылки)));
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает графики работы подразделений.
//
// Параметры:
//  Ссылки - Массив, СправочникСсылка.СтруктураПредприятия - ссылки на подразделения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//		* Ссылка - СправочникСсылка.СтруктураПредприятия - подразделение.
//		* ГрафикРаботы - СправочникСсылка.Календари - график работы.
//
Функция ГрафикиРаботыПодразделений(Ссылки) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТГрафикиРаботыПодразделений(Ссылки, МенеджерВременныхТаблиц, "ВТГрафикиРаботы");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВТГрафикиРаботы.Ссылка       КАК Ссылка,
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//++ НЕ УТКА

// Создает временную таблицу с графиками работы видов РЦ.
// Колонки таблицы: Ссылка, ГрафикРаботы.
//
// Параметры:
//  Ссылки					 - Массив, СправочникСсылка.ВидыРабочихЦентров - ссылки на виды РЦ.
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//  ИмяВТ					 - Строка - имя создаваемой временной таблицы.
//
Процедура СоздатьВТГрафикиРаботыВидовРЦ(Ссылки, МенеджерВременныхТаблиц, ИмяВТ = "ВТГрафикиРаботы") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВидыРабочихЦентров.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыРабочихЦентров.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|			ТОГДА ВидыРабочихЦентров.Календарь
		|		ИНАЧЕ ЕСТЬNULL(Графики.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
		|	КОНЕЦ КАК ГрафикРаботы
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК Графики
		|		ПО ВидыРабочихЦентров.Подразделение = Графики.Ссылка
		|			И ВидыРабочихЦентров.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВидыРабочихЦентров.Ссылка В(&Ссылки)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки",
		?(ТипЗнч(Ссылки) = Тип("Массив"), Ссылки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылки)));
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает графики работы видов РЦ.
//
// Параметры:
//  Ссылки - Массив, СправочникСсылка.ВидыРабочихЦентров - ссылки на виды РЦ.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//		* Ссылка - СправочникСсылка.ВидыРабочихЦентров - вид РЦ.
//		* ГрафикРаботы - СправочникСсылка.Календари - график работы.
//
Функция ГрафикиРаботыВидовРЦ(Ссылки) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТГрафикиРаботыВидовРЦ(Ссылки, МенеджерВременныхТаблиц, "ВТГрафикиРаботы");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВТГрафикиРаботы.Ссылка       КАК Ссылка,
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Создает временную таблицу с графиками работы рабочих центров.
// Колонки таблицы: Ссылка, ГрафикРаботы.
//
// Параметры:
//  Ссылки - Массив, СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров - ссылки на рабочие центры
//		либо виды РЦ (см. параметр ОтборПоРЦ). В последнем случае будут получены все РЦ, принадлежащие данным видам РЦ.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//	ОтборПоРЦ - Булево - Истина: первый параметр содержит ссылки на рабочие центры;
//		Ложь: первый параметр содержит ссылки на виды рабочих центров.
//  ИмяВТ  - Строка - имя создаваемой временной таблицы.
//
Процедура СоздатьВТГрафикиРаботыРЦ(Ссылки, МенеджерВременныхТаблиц, ОтборПоРЦ = Истина, ИмяВТ = "ВТГрафикиРаботы") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РабочиеЦентры.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА РабочиеЦентры.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|			ТОГДА РабочиеЦентры.Календарь
		|		КОГДА ВидыРабочихЦентров.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|			ТОГДА ВидыРабочихЦентров.Календарь
		|		ИНАЧЕ ЕСТЬNULL(Графики.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
		|	КОНЕЦ КАК ГрафикРаботы
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|		ПО РабочиеЦентры.ВидРабочегоЦентра = ВидыРабочихЦентров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК Графики
		|		ПО (ВидыРабочихЦентров.Подразделение = Графики.Ссылка)
		|			И (РабочиеЦентры.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
		|			И (ВидыРабочихЦентров.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(&ОтборПоРЦ
		|				И РабочиеЦентры.Ссылка В (&Ссылки)
		|			ИЛИ НЕ &ОтборПоРЦ
		|				И РабочиеЦентры.ВидРабочегоЦентра В (&Ссылки))";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	
	МассивСсылок = ?(ТипЗнч(Ссылки) = Тип("Массив"),
		Ссылки,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылки));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки", МассивСсылок);
	Запрос.УстановитьПараметр("ОтборПоРЦ", ОтборПоРЦ);
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает графики работы рабочих центров.
//
// Параметры:
//  Ссылки - Массив, СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров - ссылки на рабочие центры
//		либо виды РЦ (см. параметр ОтборПоРЦ). В последнем случае будут получены все РЦ, принадлежащие данным видам РЦ.
//	ОтборПоРЦ - Булево - Истина: первый параметр содержит ссылки на рабочие центры;
//		Ложь: первый параметр содержит ссылки на виды рабочих центров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//		* Ссылка - СправочникСсылка.РабочиеЦентры - рабочий центр.
//		* ГрафикРаботы - СправочникСсылка.Календари - график работы.
//
Функция ГрафикиРаботыРЦ(Ссылки, ОтборПоРЦ = Истина) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТГрафикиРаботыРЦ(Ссылки, МенеджерВременныхТаблиц, ОтборПоРЦ, "ВТГрафикиРаботы");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВТГрафикиРаботы.Ссылка       КАК Ссылка,
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#Область ТипыПроизводственногоПроцесса

// Ограничить список типов производственного процесса
//
// Параметры:
//  Элемент			- ПолеФормы	- элемент формы, в котором необходимо установить ограничение.
//  ИсключаемыеТипы	- Массив	- массив типов производственного процесса, которые не должны отображаться.
// 
Процедура ЗаполнитьСписокТиповПроизводственногоПроцесса(Элемент, ИсключаемыеТипы = Неопределено) Экспорт
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого ТипПроцесса Из Перечисления.ТипыПроизводственныхПроцессов Цикл
		
		Если Не ИсключаемыеТипы = Неопределено
			И Не ИсключаемыеТипы.Найти(ТипПроцесса) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВыбора.Добавить(ТипПроцесса);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Включает/отключает использование свойств для нормативно-справочной информации.
//
Процедура УстановитьИспользованиеСвойствСправочников() Экспорт
	
	ПараметрыНабора              = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьПроизводство.Получить();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_РесурсныеСпецификации", ПараметрыНабора);
//++ НЕ УТ
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЗаказМатериаловВПроизводство", ПараметрыНабора);	
//-- НЕ УТ	
//++ НЕ УТКА
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_МаршрутныеКарты", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВидыРабочихЦентров", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_РабочиеЦентры", ПараметрыНабора);
//-- НЕ УТКА
	
КонецПроцедуры

// Заполняет данные выбора при вводе текста в поле "Исполнитель" в этапах производства и производстве без заказа.
//
// Параметры:
//  ДанныеВыбора - СписокЗначений - список значений для заполнения
//  Текст - Строка - текст, введенный в поле
//  Параметры - Структура отбора
//    Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, в котором выполняются работы
//    Организация - СправочникСсылка.Организации - организация бригады
//
Процедура ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 20
	|	Бригады.Ссылка
	|ИЗ
	|	Справочник.Бригады КАК Бригады,
	|	Справочник.СтруктураПредприятия КАК Реквизиты
	|
	|ГДЕ
	|	Реквизиты.Ссылка = &Подразделение
	|	И Реквизиты.ИспользоватьБригадныеНаряды
	|	И НЕ Бригады.ПометкаУдаления
	|	И Бригады.Наименование ПОДОБНО &СтрокаПоиска
	|	И (Бригады.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица,
	|	Справочник.СтруктураПредприятия КАК Реквизиты
	|
	|ГДЕ
	|	Реквизиты.Ссылка = &Подразделение
	|	И Реквизиты.ИспользоватьПерсональныеНаряды
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|	И ФизическиеЛица.ФИО ПОДОБНО &СтрокаПоиска
	|";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", Текст + "%");
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	
	Если Параметры.Свойство("Организация")
		И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		Запрос.УстановитьПараметр("Организация", Неопределено);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// ИнтеграцияГИСМ

// Вычисляет, есть ли в переданных данных маркируемая продукция ГИСМ
//
// Параметры:
//  Источник	 - Структура, ДокументОбъект - источник данных
//  ПутиКДанным	 - Строка					 - пути к данным, перечисленные через ","
//
Функция ЕстьМаркируемаяПродукцияГИСМ(Источник, ПутиКДанным) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапросаВыборка = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК Таблица
	|ГДЕ
	|	Таблица.ПродукцияМаркируемаяДляГИСМ
	|	И Таблица.Ссылка В (&П_)
	|";
	ТекстЗапросаОбъединение = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Запрос = Новый Запрос();
	СписокТекстов = Новый Массив();
	СписокТЧ = СтрРазделить(ПутиКДанным, ",");
	Для Индекс = 0 По СписокТЧ.ВГраница() Цикл
		ИмяТЧ = СокрЛП(СписокТЧ[Индекс]);
		СписокТекстов.Добавить(СтрЗаменить(ТекстЗапросаВыборка, "П_", ИмяТЧ));
		Запрос.УстановитьПараметр(ИмяТЧ, Источник[ИмяТЧ].ВыгрузитьКолонку("Номенклатура"));
	КонецЦикла;
	Запрос.Текст = СтрСоединить(СписокТекстов, ТекстЗапросаОбъединение);
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьМаркируемаяПродукцияГИСМ = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЕстьМаркируемаяПродукцияГИСМ;
	
КонецФункции

// Конец ИнтеграцияГИСМ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Математика

#Область НОД

Функция НаибольшийОбщийДелительВКоллекции(Коллекция, ИмяКолонки = "Количество") Экспорт
	
	Если ТипЗнч(Коллекция) <> ТипЗнч("ТабличнаяЧасть") Тогда
		МассивЧисел = Новый Массив;
		Для Каждого ЭлементКоллекции Из Коллекция Цикл
			МассивЧисел.Добавить(ЭлементКоллекции[ИмяКолонки]);
		КонецЦикла;
	Иначе
		МассивЧисел = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(Коллекция, ИмяКолонки);
	КонецЕсли;
	
	Если МассивЧисел.Количество() < 2 Тогда
		
		НОД = 1;
		
	Иначе
		
		НОД = МассивЧисел[0];
		
		Для Индекс = 1 По МассивЧисел.Количество()-1 Цикл
		
			НОД = НаибольшийОбщийДелитель(НОД, МассивЧисел[Индекс]);
			
			Если НОД = 1 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НОД;
	
КонецФункции

Функция НаибольшийОбщийДелитель(Знач Числитель, Знач Знаменатель) Экспорт
	
	Если Числитель = 0 ИЛИ Знаменатель = 0 Тогда
		
		Возврат 1;
		
	КонецЕсли;

	Пока Знаменатель <> 0 Цикл
		
		ОстатокОтДеления = Числитель % Знаменатель;
		Числитель = Знаменатель;
		Знаменатель = ОстатокОтДеления;
		
	КонецЦикла;
	
	Возврат Числитель;

КонецФункции

#КонецОбласти

#Область НОК

Функция НаименьшееОбщееКратноеВКоллекции(Коллекция, ИмяКолонки = "Количество") Экспорт
	
	Если ТипЗнч(Коллекция) <> ТипЗнч("ТабличнаяЧасть") Тогда
		МассивЧисел = Новый Массив;
		Для Каждого ЭлементКоллекции Из Коллекция Цикл
			МассивЧисел.Добавить(ЭлементКоллекции[ИмяКолонки]);
		КонецЦикла;
	Иначе
		МассивЧисел = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(Коллекция, ИмяКолонки);
	КонецЕсли;
	
	Возврат НаименьшееОбщееКратное(МассивЧисел);
	
КонецФункции

Функция НаименьшееОбщееКратное(Числа) Экспорт

	НОК = 1;
	
	Для Каждого Число Из Числа Цикл
		
		НОК = НОК * Число / НаибольшийОбщийДелитель(НОК,Число);
		
	КонецЦикла;
	
	Возврат НОК;
	
КонецФункции

#КонецОбласти

#Область Дроби

Функция Дробь(Знач Числитель, Знач Знаменатель) Экспорт
	
	Дробь = ПроизводствоКлиентСервер.Дробь(Числитель, Знаменатель);
	Возврат Дробь;

КонецФункции

Функция МинДробь(Дробь1, Дробь2) Экспорт
	
	Если Дробь1.Числитель * Дробь2.Знаменатель < Дробь2.Числитель * Дробь1.Знаменатель Тогда
		
		Возврат Дробь(Дробь1.Числитель, Дробь1.Знаменатель);
		
	Иначе
		
		Возврат Дробь(Дробь2.Числитель, Дробь2.Знаменатель);
		
	КонецЕсли;
	
КонецФункции

Функция МаксДробь(Дробь1, Дробь2) Экспорт
	
	Если Дробь1.Числитель * Дробь2.Знаменатель > Дробь2.Числитель * Дробь1.Знаменатель Тогда
		
		Возврат Дробь(Дробь1.Числитель, Дробь1.Знаменатель);
		
	Иначе
		
		Возврат Дробь(Дробь2.Числитель, Дробь2.Знаменатель);
		
	КонецЕсли;
	
КонецФункции

Функция СуммаДробей(МассивДробей, СократитьРезультат = Ложь) Экспорт
	
	НаименьшееОбщееКратное = НаименьшееОбщееКратноеВКоллекции(МассивДробей, "Знаменатель");
	
	Числитель = 0;
	Для каждого Дробь Из МассивДробей Цикл
		Числитель = Числитель + Дробь.Числитель * НаименьшееОбщееКратное / Дробь.Знаменатель;
	КонецЦикла;
	
	Результат = ПроизводствоКлиентСервер.Дробь(Числитель, НаименьшееОбщееКратное);
	
	Если СократитьРезультат Тогда
		
		СократитьДробь(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СократитьДробь(Дробь) Экспорт
	
	НаибольшийОбщийДелитель = НаибольшийОбщийДелитель(Дробь.Числитель, Дробь.Знаменатель);
	
	Дробь.Числитель   = Дробь.Числитель / НаибольшийОбщийДелитель;
	Дробь.Знаменатель = Дробь.Знаменатель / НаибольшийОбщийДелитель;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РасчетДолейСтоимости

Функция ТекстЗапросаПроверитьДолиСтоимостиВыходныхИзделий(ПоляСвязи, ПолеГруппыЗатрат = "") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ГруппаЗатрат КАК ГруппаЗатрат,
	|	СУММА(1)			 КАК Количество
	|ПОМЕСТИТЬ ИспользоватьДолюСтоимости
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Таблица.Ссылка	  КАК Ссылка,
	|		&ГруппаЗатратПоле КАК ГруппаЗатрат,
	|		&ПоляСвязиПоле,
	|		Таблица.ДоляСтоимости = 0 КАК ПризнакДоляСтоимости
	|	ИЗ
	|		ТабличнаяЧасть КАК Таблица) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ГруппаЗатрат
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.ГруппаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка      КАК Ссылка,
	|	Таблица.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабличнаяЧасть КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользоватьДолюСтоимости КАК ИспользоватьДолюСтоимости
	|		ПО &ГруппаЗатратСоединение
	|ГДЕ
	|	Таблица.ДоляСтоимости = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ТекстЗапросаПоляСвязиПоле = "";
	МассивПолейСвязи          = СтрРазделить(ПоляСвязи, ",");
	Для каждого ПолеСвязи Из МассивПолейСвязи Цикл
		ТекстЗапросаПоляСвязиПоле = ТекстЗапросаПоляСвязиПоле + "Таблица." + ПолеСвязи + "," + Символы.ПС;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляСвязиПоле", 
		Лев(ТекстЗапросаПоляСвязиПоле, СтрДлина(ТекстЗапросаПоляСвязиПоле) - 2));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаЗатратПоле",
		?(ЗначениеЗаполнено(ПолеГруппыЗатрат), "Таблица." + ПолеГруппыЗатрат, "ИСТИНА"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаЗатратСоединение",
		?(ЗначениеЗаполнено(ПолеГруппыЗатрат), "Таблица." + ПолеГруппыЗатрат + " = ИспользоватьДолюСтоимости.ГруппаЗатрат", "(ИСТИНА)"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(ИмяТаблицы = "ТабличнаяЧасть", ИсточникСпособРаспределенияЗатратНаВыходныеИзделия = "&СпособРаспределенияЗатратНаВыходныеИзделия", ТекстЗапросаОтборПоНоменклатуре = "") Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	Параметры.Вставить("ИсточникСпособРаспределенияЗатратНаВыходныеИзделия", ИсточникСпособРаспределенияЗатратНаВыходныеИзделия);
	
	Параметры.Вставить("ДоляСтоимости",           "%ДоляСтоимости%");
	Параметры.Вставить("ДоляСтоимостиНаЕдиницу",  "%ДоляСтоимостиНаЕдиницу%");
	Параметры.Вставить("СоединениеДоляСтоимости", "%СоединениеДоляСтоимости%");
	
	Параметры.Вставить("ИсточникНоменклатура",     ИмяТаблицы + ".Номенклатура");
	Параметры.Вставить("ИсточникХарактеристика",   ИмяТаблицы + ".Характеристика");
	Параметры.Вставить("ИсточникУпаковка",         ИмяТаблицы + ".Упаковка");
	Параметры.Вставить("ИсточникЕдиницаИзмерения", ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
	Параметры.Вставить("ИсточникКоличество",       ИмяТаблицы + ".Количество");
	Параметры.Вставить("ИсточникДоляСтоимости",    ИмяТаблицы + ".ДоляСтоимости");
	
	Параметры.Вставить("ТекстЗапросаОтборПоНоменклатуре", ТекстЗапросаОтборПоНоменклатуре);
	Параметры.Вставить("ТекстЗапросаОтборСпособРаспределенияЗатрат", "&СпособРаспределенияЗатратНаВыходныеИзделия = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости)");
	
	Возврат Параметры;
	
КонецФункции

Процедура ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, Подстановка) Экспорт
	
	Шаблон = "
	|ВЫБОР
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости)
	|	
	|		ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПлановыеЦены.Цена, 0) / ЕСТЬNULL(&КоэффициентУпаковки, 1), 0) * &ИсточникКоличество КАК ЧИСЛО(31,2))
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоОбъему)
	|	
	|		ТОГДА &Объем * &ИсточникКоличество
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоВесу)
	|	
	|		ТОГДА &Вес * &ИсточникКоличество
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)
	|	
	|		ТОГДА &ИсточникДоляСтоимости
	|	
	|	ИНАЧЕ 0
	|	
	|КОНЕЦ
	|;
	|ВЫБОР
	|
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости)
	|	
	|		ТОГДА ЕСТЬNULL(ЕСТЬNULL(ПлановыеЦены.Цена, 0) / ЕСТЬNULL(&КоэффициентУпаковки, 1), 0)
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоОбъему)
	|	
	|		ТОГДА &Объем
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоВесу)
	|	
	|		ТОГДА &Вес
	|	
	|	ИНАЧЕ 0
	|
	|КОНЕЦ
	|;
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
	|		ВидЦены = &ВидЦены
	|		И &ТекстЗапросаОтборПоНоменклатуре
	|		И &ТекстЗапросаОтборСпособРаспределенияЗатрат
	|) КАК ПлановыеЦены
	|ПО &ИсточникНоменклатура   = ПлановыеЦены.Номенклатура
	| И &ИсточникХарактеристика = ПлановыеЦены.Характеристика
	|
	|";
	Шаблон = СтрЗаменить(Шаблон, "&Параметр", Подстановка.ИсточникСпособРаспределенияЗатратНаВыходныеИзделия);
	
	Шаблон = СтрЗаменить(Шаблон, "&Вес",                 Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("&ИсточникЕдиницаИзмерения", "&ИсточникНоменклатура"));
	Шаблон = СтрЗаменить(Шаблон, "&Объем",               Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("&ИсточникЕдиницаИзмерения", "&ИсточникНоменклатура"));
	Шаблон = СтрЗаменить(Шаблон, "&КоэффициентУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("&ИсточникУпаковка", "&ИсточникНоменклатура"));
	
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникНоменклатура",     Подстановка.ИсточникНоменклатура);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникХарактеристика",   Подстановка.ИсточникХарактеристика);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникУпаковка",         Подстановка.ИсточникУпаковка);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникЕдиницаИзмерения", Подстановка.ИсточникЕдиницаИзмерения);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникКоличество",       Подстановка.ИсточникКоличество);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникДоляСтоимости",    Подстановка.ИсточникДоляСтоимости);
	
	Если ЗначениеЗаполнено(Подстановка.ТекстЗапросаОтборПоНоменклатуре) Тогда
		Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаОтборПоНоменклатуре", Подстановка.ТекстЗапросаОтборПоНоменклатуре);
	Иначе
		Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаОтборПоНоменклатуре", "ИСТИНА");
	КонецЕсли;
	Если Подстановка.ИсточникСпособРаспределенияЗатратНаВыходныеИзделия = "&СпособРаспределенияЗатратНаВыходныеИзделия" Тогда
		Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаОтборСпособРаспределенияЗатрат", Подстановка.ТекстЗапросаОтборСпособРаспределенияЗатрат);
	Иначе
		Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаОтборСпособРаспределенияЗатрат", "ИСТИНА");
	КонецЕсли;
	
	Шаблоны = СтрРазделить(Шаблон,";");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Подстановка.ДоляСтоимости,           Шаблоны[0]);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Подстановка.ДоляСтоимостиНаЕдиницу,  Шаблоны[1]);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Подстановка.СоединениеДоляСтоимости, Шаблоны[2]);
	
КонецПроцедуры

Процедура ВыполнитьПодстановкуТекстаЗапросаАвторасчетаЛюбойХарактеристики(ТекстЗапроса, ПараметрыРаспределенияЗатрат)
	
	Если Не ПараметрыРаспределенияЗатрат.АвтоРасчетЛюбойХарактеристики Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабличнаяЧасть", "ТабличнаяЧастьДляАвторасчета") + 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЦеныНоменклатуры.Характеристика) КАК Характеристика
	|ПОМЕСТИТЬ ВтАвтоподборХарактеристики
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ВидЦены = &ВидЦены
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Отбор.Номенклатура
	|					ИЗ
	|						ТабличнаяЧастьДляАвторасчета КАК Отбор)) КАК ЦеныНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки        КАК НомерСтроки,
	|
	|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			) ТОГДА
	|			ЕСТЬNULL(АвтоподборХарактеристики.Характеристика, ТабличнаяЧасть.Характеристика)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                             КАК Характеристика,
	|
	|	ТабличнаяЧасть.Упаковка           КАК Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество         КАК Количество,
	|
	|	ТабличнаяЧасть.ДоляСтоимости КАК ДоляСтоимости
	|
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	ТабличнаяЧастьДляАвторасчета КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАвтоподборХарактеристики КАК АвтоподборХарактеристики
	|		ПО ТабличнаяЧасть.Номенклатура = АвтоподборХарактеристики.Номенклатура
	|			И (ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|;
	|";
	
КонецПроцедуры

Функция ИтогиДолейСтоимостиПоГруппировкам(ТабличнаяЧасть, ПараметрыРаспределенияЗатрат, Группировки = "") Экспорт
	
	Результат = Новый Соответствие;
	СвойстваГруппировок = Новый Соответствие;
	
	ПоляСвязи = СтрРазделить(ПараметрыРаспределенияЗатрат.ПоляСвязи, ",");
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		
		Если ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено И Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> "" Тогда
			Группировка = Строка[ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат];
		Иначе
			Группировка = "";
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> "" И Группировки <> Неопределено И Группировки.Найти(Группировка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуетсяПараметризация = ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации
			И (Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
				ИЛИ Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ
				ИЛИ Строка.РасчетПоФормуле);
		
		ДоляСтоимостиРассчитывается = ПроизводствоКлиентСервер.ДоляСтоимостиРассчитывается(Строка, ПараметрыРаспределенияЗатрат);
		Итоги = Результат[Группировка];
		
		Если Итоги = Неопределено Тогда
			
			Итоги = Новый Структура();
			Итоги.Вставить("Количество", Строка.Количество);
			Итоги.Вставить("ДоляСтоимости", Строка.ДоляСтоимости);
			Итоги.Вставить("ДоляСтоимостиОбязательна", ДоляСтоимостиРассчитывается);
			Итоги.Вставить("ДоляСтоимостиРассчитывается", ДоляСтоимостиРассчитывается);
			Итоги.Вставить("ИспользуетсяПараметризация", ИспользуетсяПараметризация);
			Итоги.Вставить("КоличествоСтрокВГруппировке", 1);
			
			Если ЗначениеЗаполнено(ПараметрыРаспределенияЗатрат.ДоляСтоимостиДругихДокументовВГруппировке) Тогда
				ДоляСтоимости = ПараметрыРаспределенияЗатрат.ДоляСтоимостиДругихДокументовВГруппировке;
				Если ЗначениеЗаполнено(ДоляСтоимости) Тогда
					Итоги.ДоляСтоимостиОбязательна = Истина;
					Итоги.ДоляСтоимости = Итоги.ДоляСтоимости + ДоляСтоимости;
				КонецЕсли;
			КонецЕсли;
			
			Результат.Вставить(Группировка, Итоги);
			
		Иначе
			Итоги.Количество = Итоги.Количество + Строка.Количество;
			Итоги.ДоляСтоимости = Итоги.ДоляСтоимости + Строка.ДоляСтоимости;
			Итоги.ИспользуетсяПараметризация = Макс(Итоги.ИспользуетсяПараметризация, ИспользуетсяПараметризация);
			Итоги.КоличествоСтрокВГруппировке = Итоги.КоличествоСтрокВГруппировке + 1;
		КонецЕсли;
		
		Если Не Итоги.ДоляСтоимостиОбязательна Тогда
			Если Итоги.ДоляСтоимости <> 0 Тогда
				Итоги.ДоляСтоимостиОбязательна = Истина;
			ИначеЕсли Итоги.ИспользуетсяПараметризация И Итоги.КоличествоСтрокВГруппировке > 1 Тогда
				Итоги.ДоляСтоимостиОбязательна = Истина;
			Иначе
				Если СвойстваГруппировок[Группировка] <> Неопределено Тогда
					Для каждого Поле Из ПоляСвязи Цикл
						Если Строка[Поле] <> СвойстваГруппировок[Группировка][Поле] Тогда
							Итоги.ДоляСтоимостиОбязательна = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ДанныеСтроки = Новый Структура(ПараметрыРаспределенияЗатрат.ПоляСвязи);
					ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строка);
					СвойстваГруппировок.Вставить(Группировка, ДанныеСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПризнакЕстьОшибкиЗаполненияДолиСтоимости(Строка, Итоги, Отменено, ПараметрыРаспределенияЗатрат)
	
	Строка.ЕстьОшибкиЗаполненияДолиСтоимости = Ложь;
	
	РасчетПоФормуле = (ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации И Строка.РасчетПоФормуле);
	
	Автовыбор = ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации И 
		(Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
			ИЛИ Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ);
	
	Если Отменено ИЛИ Строка.ДоляСтоимости > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Автовыбор И Итоги.ДоляСтоимостиРассчитывается Тогда
		Возврат;
	КонецЕсли;
	
	Если РасчетПоФормуле И Строка.ДоляСтоимостиНаЕдиницу > 0 И Итоги.ДоляСтоимостиРассчитывается Тогда
		Возврат;
	КонецЕсли;
	
	Если Итоги.ДоляСтоимостиОбязательна ИЛИ Строка.Количество = 0 И РасчетПоФормуле = Ложь Тогда
		Строка.ЕстьОшибкиЗаполненияДолиСтоимости = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДвижениеПродукцииИМатериалов

// КОМАНДЫ СОЗДАНИЯ НА ОСНОВАНИИ

Процедура ПроверитьВозможностьВводаНаОсновании(Реквизиты, ХозяйственнаяОперация) Экспорт
	
	Перем ТекстОшибки;
	
	Если НЕ Реквизиты.Проведен Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить документ на основании непроведенных распоряжений.';
							|en = 'Cannot register the document based on the unposted references.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство
		И Не Реквизиты.ЕстьОтгрузить Тогда
		ТекстОшибки = ОбеспечениеСервер.ТекстОшибкиНетТоваровДоступныхДляОтгрузки();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
		И Не Реквизиты.ЕстьПроизведен Тогда
		ТекстОшибки = НСтр("ru = 'Нет продукции, доступной для передачи. Для начала процесса передачи продукции
                            |необходимо установить признак ""Произведено"" в этапе производства.';
                            |en = 'No products available for transfer. To start transferring products,
                            |select the Produced check box in the production stage.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить документ по разным организациям.';
							|en = 'Cannot register the document for different companies.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство
		И Реквизиты.КоличествоСкладов > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, т.к материалы отгружаются с разных складов.
			|Для оформления документа рекомендуется использовать форму ""Получение и возврат материалов"".';
			|en = 'Cannot register the material transfer as materials are shipped from different warehouses.
			|To register the document, use the ""Receipt and return of materials"" form.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, 
			|т.к материалы отгружаются с разных складов.';
			|en = 'Cannot register the material transfer
			|as materials are shipped from different warehouses.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство
		И Реквизиты.КоличествоПодразделений > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, т.к материалы отгружаются в разные подразделения.
			|Для оформления документа рекомендуется использовать форму ""Получение и возврат материалов"".';
			|en = 'Cannot register the material transfer as materials are shipped to different departments.
			|To register the document, use the ""Receipt and return of materials"" form.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, 
			|т.к материалы отгружаются в разные подразделения.';
			|en = 'Cannot register the material transfer
			|as materials are shipped to different departments.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
		И Реквизиты.КоличествоПолучателей > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу продукции, т.к продукция передается на разные склады.
			|Для оформления документа рекомендуется использовать форму ""Получение и возврат материалов"".';
			|en = 'Cannot register the product transfer as products are transferred to different warehouses.
			|To register the document, use the ""Receipt and return of materials"" form.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу продукции, 
			|т.к продукция передается на разные склады.';
			|en = 'Cannot register the product transfer 
			|as products are transferred to different warehouses.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение
		И Реквизиты.КоличествоПолучателей > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу продукции, т.к продукция передается в разные подразделения.
			|Для оформления документа рекомендуется использовать форму ""Получение и возврат материалов"".';
			|en = 'Cannot register the products transfer as products are transferred to different departments.
			|To register the document, use the ""Receipt and return of materials"" form.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу продукции, 
			|т.к продукция передается в разные подразделения.';
			|en = 'Cannot register the product transfer 
			|as products are transferred to different departments.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборВДинамическомСписке

Процедура ДобавитьОтборВСписокОтборов(СписокОтборов, Имя, ТекстЗапроса, Параметры = Неопределено, Использовать = Истина, Операция = "СсылкаВСписке") Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Имя", Имя);
	Отбор.Вставить("ТекстЗапроса", ТекстЗапроса);
	Отбор.Вставить("Параметры", Параметры);
	Отбор.Вставить("Использовать", Использовать);
	Отбор.Вставить("Операция", Операция);
	
	СписокОтборов.Добавить(Отбор);
	
КонецПроцедуры

Процедура ВыполнитьПодстановкуОтборовВТекстЗапросаДинамическогоСписка(ТекстЗапроса, СписокОтборов, ИмяТаблицы = "ОсновнаяТаблица") Экспорт
	
	Если Не ЗначениеЗаполнено(СписокОтборов) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ПакетВыборкиДанных = СхемаЗапроса.ПакетЗапросов.Количество()-1;
	Отборы = СхемаЗапроса.ПакетЗапросов[ПакетВыборкиДанных].Операторы[0].Отбор;
	
	Для каждого Отбор Из СписокОтборов Цикл
		
		Если Не Отбор.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если Отбор.Операция = "СсылкаВСписке" Тогда
			
			ТекстОтбора = СтрШаблон("(%1.Ссылка) В
				|(
				|	%2
				|)",
				ИмяТаблицы,
				Отбор.ТекстЗапроса);
			
		ИначеЕсли Отбор.Операция = "СсылкаНеВСписке" Тогда
			
			ТекстОтбора = СтрШаблон("НЕ (%1.Ссылка) В
				|(
				|	%2
				|)",
				ИмяТаблицы,
				Отбор.ТекстЗапроса);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Передана несуществующая операция отбора!';
									|en = 'Non-existing filter operation is transferred.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
		
		ТекстОтбора = СтрЗаменить(ТекстОтбора, "&Ссылка", ИмяТаблицы + ".Ссылка");
		Отборы.Добавить(ТекстОтбора);
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура УстановитьПараметрыОтбораДинамическогоСписка(Список, СписокОтборов) Экспорт
	
	Для каждого Отбор Из СписокОтборов Цикл
		
		Если Не Отбор.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Отбор.Параметры) = Тип("Структура") Тогда
			
			Для каждого Параметр Из Отбор.Параметры Цикл
				
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					Список,
					Параметр.Ключ,
					Параметр.Значение);
				
			КонецЦикла;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список,
				Отбор.Имя,
				Отбор.Параметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЖурналаРегистрации

Функция СобытиеНазначениеОсновныхСпецификаций() Экспорт
	
	Возврат НСтр("ru = 'НСИ производства.Назначение основных спецификаций';
				|en = 'Production master data.Assign main BOMs'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеРасчетНормативнойДлительности() Экспорт
	
	Возврат НСтр("ru = 'НСИ производства.Расчет нормативной длительности';
				|en = 'Production master data.Calculate standard duration'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеСозданиеСпецификации() Экспорт
	
	Возврат НСтр("ru = 'НСИ производства.Создание спецификации';
				|en = 'Production master data.Create BOM'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЗаменаСпецификаций() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Замена спецификаций';
				|en = 'Intershop management.BOM replacement'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеПланированиеГрафикаПроизводства() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Планирование графика производства';
				|en = 'Intershop management.Production schedule planning'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
КонецФункции

Функция СобытиеРедактированиеЦепочкиЭтапов() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Редактирование цепочки этапов';
				|en = 'Intershop management.Edit stage chain'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеПередачаЭтаповКВыполнению() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Передача этапов к выполнению';
				|en = 'Intershop management.Pass stages for execution'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеПометкаНаУдалениеЭтапов() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Пометка на удаление этапов производства';
				|en = 'Intershop management.Production stage deletion mark'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеРасчетОчередиПроизводственныхОпераций() Экспорт
	
	Возврат НСтр("ru = 'Внутрицеховое управление.Формирование очереди производственных операций';
				|en = 'Shop manegement.Generation of production operation queue '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЗаполнениеЭтаповПоПроизводственнымОперациям() Экспорт
	
	Возврат НСтр("ru = 'Внутрицеховое управление.Заполнение этапов по производственным операциям';
				|en = 'Shop management.Stage population according to production operations '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеРасчетЗначенияСвойстваПриАвтовыборе() Экспорт
	
	Возврат НСтр("ru = 'НСИ производства.Расчет значения свойства при автовыборе';
				|en = 'Production master data.Property value calculation upon autoselection'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура СкопироватьЗначенияКолонки(Таблица, Источник, Приемник, СоздатьНовуюКолонку = Истина) Экспорт
	
	Если СоздатьНовуюКолонку Тогда
		
		Таблица.Колонки.Добавить(Приемник, Таблица.Колонки[Источник].ТипЗначения);
	КонецЕсли;
	Таблица.ЗагрузитьКолонку(Таблица.ВыгрузитьКолонку(Источник), Приемник); 
	
КонецПроцедуры

Функция МассивЗначений(Значение, СоздатьНовыйМассив = Ложь) Экспорт

	Перем Результат;
	
	Если ТипЗнч(Значение) <> Тип("Массив") Тогда
		
		Результат = Новый Массив;
		
		Если Значение <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
		
	ИначеЕсли СоздатьНовыйМассив Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции);
		КонецЦикла;
		
	Иначе
		
		Результат = Значение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьМассив(КоличествоЭлементов = 1, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Для Сч = 1 По КоличествоЭлементов Цикл
		
		Результат.Добавить(ЗначениеПоУмолчанию);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СледующийПараметрЗапроса(Текст, Параметр = "", Курсор = 1) Экспорт
	
	Параметр = "";
	Позиция = СтрНайти(Текст, "&", НаправлениеПоиска.СНачала, Курсор);
	Если Позиция > 0 Тогда
		Для Курсор = Позиция + 1 По СтрДлина(Текст) - 1 Цикл
			КодСимвола = КодСимвола(Текст, Курсор);
			Если (КодСимвола >= 48 И КодСимвола <= 57) // цифры
				Или (КодСимвола >= 65 И КодСимвола <= 90) // латиница большие
				Или (КодСимвола >= 97 И КодСимвола <= 122) // латиница маленькие
				Или (КодСимвола >= 1040 И КодСимвола <= 1103) // кириллица
				Или КодСимвола = 95 Тогда // символ "_"
				Продолжить;
			КонецЕсли;
			Параметр = Сред(Текст, Позиция + 1, Курсор - Позиция - 1);
			Возврат Истина;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, ИмяПоля)
	
	ПутьКДаннымПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПутиКДанным, ИмяПоля, ИмяОбъекта + "." + ИмяПоля);
	Возврат Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
КонецФункции

Функция СтруктураРеквизитовПроизводственногоПодразделения()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Наименование",           "");
	Параметры.Вставить("ПодразделениеДиспетчер", Ложь);
	
	Параметры.Вставить("ПроизводствоПоЗаказам",  Ложь);
	Параметры.Вставить("ПроизводствоБезЗаказов", Ложь);
	
	Параметры.Вставить("ИспользуетсяСписаниеЗатратНаВыпуск", Ложь);
	
	Параметры.Вставить("ГрафикиРаботы", Новый Массив);
	
//++ НЕ УТКА
	Параметры.Вставить("ИнтервалПланирования",           Перечисления.ТочностьГрафикаПроизводства.День);
	Параметры.Вставить("НачалоИнтервалаПланирования",    '00010101');
	Параметры.Вставить("ОкончаниеИнтервалаПланирования", КонецДня('00010101'));
	
	Параметры.Вставить("УправлениеМаршрутнымиЛистами",    Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ);
	Параметры.Вставить("СпособПооперационногоУправления", Перечисления.СпособыУправленияОперациями.ПустаяСсылка());
	
	Параметры.Вставить("ИспользоватьПооперационноеУправление",   Ложь);
	Параметры.Вставить("ИспользоватьМатериалыВОперациях",        Ложь);
	Параметры.Вставить("ИспользоватьВыходныеИзделияВОперациях",  Ложь);
	Параметры.Вставить("ИспользоватьПооперационноеПланирование", Ложь);
	
	Параметры.Вставить("ИспользоватьСменныеЗадания", Ложь);
	Параметры.Вставить("ИспользоватьСмены",          Ложь);
	
	Параметры.Вставить("ИспользоватьУчастки",        Ложь);
	
//-- НЕ УТКА
	Параметры.Вставить("ИспользоватьБригадныеНаряды",    Ложь);
	Параметры.Вставить("ИспользоватьПерсональныеНаряды", Ложь);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаЗаполненияРеквизитов

// Проверяет заполнение получателя в табличной части.
//
// Параметры:
//	Объект - ДокументОбъект - Проверяемый документ
//	ИмяТЧ  - Строка         - Имя табличной части
//	Отказ  - Булево         - Признак наличия ошибок.
//
Процедура ПроверитьЗаполнениеПолучателяВТабличнойЧасти(Объект, ИмяТЧ, Отказ) Экспорт
	
	МетаданныеОбъекта  = Объект.Метаданные();
	МетаданныеТЧ       = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ];
	СинонимТЧ          = МетаданныеТЧ.Синоним;
	СоставнойТип       = МетаданныеТЧ.Реквизиты.Получатель.Тип.Типы().Количество() > 1;
	
	ПризнакОтменыСтрок = ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("Отменено", МетаданныеОбъекта, ИмяТЧ);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки      КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура     КАК Номенклатура,
	|	ТабличнаяЧасть.Получатель       КАК Получатель,
	|	ТабличнаяЧасть.СписатьНаРасходы КАК СписатьНаРасходы
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	&ОтборОтменено
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&ОтборОтменено", ?(ПризнакОтменыСтрок, "НЕ ТабличнаяЧасть.Отменено", "ИСТИНА"));
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВПакете();
	
	Если СоставнойТип Тогда
		
		ТекстЗапроса = ТекстЗапроса + "	
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                      КАК НеУказан
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаПроверки
		|		ПО ТабличнаяЧасть.Получатель = ТаблицаПроверки.Ссылка
		|ГДЕ
		|	 
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|	И ЕСТЬNULL(ТаблицаПроверки.Ссылка, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ТаблицаПроверки
		|		ПО ТабличнаяЧасть.Получатель = ТаблицаПроверки.Ссылка
		|ГДЕ
		|	 
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|	И ЕСТЬNULL(ТаблицаПроверки.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "	
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА                     КАК НеУказан
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|ГДЕ
		|	 
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И ТабличнаяЧасть.СписатьНаРасходы = ЛОЖЬ
		|	И ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		
	КонецЕсли;	
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	КолонкиТаблицы = "НомерСтроки, Номенклатура, Получатель, СписатьНаРасходы" 
		+ ?(ПризнакОтменыСтрок, ", Отменено", "");
		
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Объект[ИмяТЧ].Выгрузить(, КолонкиТаблицы));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НеУказан Тогда
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "ЗАПОЛНЕНИЕ"  , "Получатель", Выборка.НомерСтроки, СинонимТЧ);
			Иначе
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ", "Получатель", Выборка.НомерСтроки, СинонимТЧ);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Получатель"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение долей стоимости в табличной части.
//
// Параметры:
//	Объект                        - ДокументОбъект - Проверяемый документ
//	ИмяТЧ                         - Строка         - Имя табличной части
//	МассивНепроверяемыхРеквизитов - Массив         - реквизиты, которые не нужно проверять платформенной проверкой
//	Отказ                         - Булево         - Признак наличия ошибок.
//
Процедура ПроверитьЗаполнениеДолейСтоимостиВТабличнойЧасти(Объект, ИмяТЧ, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	
	МассивГруппировокЗатрат = Новый Массив;
	МассивГруппировокЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	МассивГруппировокЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям);
	//++ НЕ УТКА
	МассивГруппировокЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	//-- НЕ УТКА
	
	Если МассивГруппировокЗатрат.Найти(Объект.ГруппировкаЗатрат) = Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".ДоляСтоимости");
		Возврат;
	КонецЕсли;
	
	ПроверитьСпособРаспределенияЗатрат = Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки
										 Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям;
										 
	МетаданныеОбъекта = Объект.Метаданные();
	МенеджерОбъекта   = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	
	ПараметрыРаспределенияЗатрат = МенеджерОбъекта.ПараметрыРаспределенияЗатрат(Объект);
	
	Если ПроверитьСпособРаспределенияЗатрат
	   И ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия 
			<> Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".ДоляСтоимости");
		
	ПоляСвязи                  = ПараметрыРаспределенияЗатрат.ПоляСвязи;
	ПолеГруппыЗатрат           = ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат;
	ПоляПроверкиДолейСтоимости = СтрРазделить(ПоляСвязи, ",");
	
	ШаблонПоляЗапроса = "	%1%2 КАК %3";
	
	МассивПоляЗапроса = Новый Массив;
	МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, ""				 , "&Ссылка"      , "Ссылка"));
	МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", "НомерСтроки"  , "НомерСтроки"));
	МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", "ДоляСтоимости", "ДоляСтоимости"));
	
	ПризнакОтменыСтрок = ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("Отменено", МетаданныеОбъекта, ИмяТЧ);
	Если ПризнакОтменыСтрок Тогда
		МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", "Отменено", "Отменено"));
	КонецЕсли;	
	
	ГруппаЗатратВШапке = Ложь;
	Если ЗначениеЗаполнено(ПолеГруппыЗатрат) Тогда
		
		ГруппаЗатратВШапке = Не ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта(ПолеГруппыЗатрат, МетаданныеОбъекта, ИмяТЧ);
		
		Если ГруппаЗатратВШапке Тогда
			МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, ""               , "&ГруппаЗатрат" , ПолеГруппыЗатрат));	
		Иначе
			МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", ПолеГруппыЗатрат, ПолеГруппыЗатрат));
		КонецЕсли;	
		
	КонецЕсли;	
	
	Для каждого ПолеПроверки Из ПоляПроверкиДолейСтоимости Цикл
		МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", ПолеПроверки, ПолеПроверки));	
	КонецЦикла;
	
	РазделительПолейЗапроса = ",
							  |";
	ТекстЗапросаПоля 	= СтрСоединить(МассивПоляЗапроса, РазделительПолейЗапроса);
	ТекстЗапросаУсловие = ?(ПризнакОтменыСтрок, "ГДЕ НЕ ТабличнаяЧасть.Отменено", "");
		
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|%1
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|%2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	МассивТекстыЗапроса = Новый Массив;
	МассивТекстыЗапроса.Добавить(СтрШаблон(ШаблонТекстаЗапроса, ТекстЗапросаПоля, ТекстЗапросаУсловие)); 
	МассивТекстыЗапроса.Добавить(ТекстЗапросаПроверитьДолиСтоимостиВыходныхИзделий(ПоляСвязи, ПолеГруппыЗатрат));
	
	ТекстЗапроса = СтрСоединить(МассивТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
				   
	Запрос       = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка"         , Объект.Ссылка); 
	Запрос.УстановитьПараметр("ТабличнаяЧасть" , Объект[ИмяТЧ]);
	
	Если ГруппаЗатратВШапке Тогда
		Запрос.УстановитьПараметр("ГруппаЗатрат" , Объект[ПолеГруппыЗатрат]);	
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		СинонимТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"КОЛОНКА", "ЗАПОЛНЕНИЕ", "Доля стоимости", Выборка.НомерСтроки, СинонимТЧ);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ДоляСтоимости"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти
