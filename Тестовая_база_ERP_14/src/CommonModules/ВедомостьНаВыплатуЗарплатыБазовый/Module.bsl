#Область СлужебныеПроцедурыИФункции

/// Печать

Процедура ДобавитьКомандыПечатиПриВыплатеНаКарточки(КомандыПечати) Экспорт
	
	// Список перечислений
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "СписокПеречислений";
	КомандаПечати.Представление = НСтр("ru = 'Список перечислений';
										|en = 'Transfer list'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Процедура ПечатьПриВыплатеНаКарточки(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокПеречислений") Тогда
		ТабличныйДокумент = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПечатьСпискаПеречисленийПоДокументам(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписокПеречислений", НСтр("ru = 'Список получателей';
																												|en = 'Recipient list'"), ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандыПечатиПриВыплатеНаличными(КомандыПечати) Экспорт
	
	// Расчетно-платежная ведомость (Т-49).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т49";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость (Т-49)';
										|en = 'Pay statement (T-49) '");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Платежная ведомость (Т-53)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т53";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость (Т-53)';
										|en = 'Paysheet (T-53)'");
	КомандаПечати.Порядок = 11;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Процедура ПечатьПриВыплатеНаличными(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Т53") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Т53", НСтр("ru = 'Платежная ведомость (Т-53)';
																								|en = 'Paysheet (T-53)'"), ПечатьТ53(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Т49") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Т49", НСтр("ru = 'Расчетно-платежная ведомость (Т-49)';
																								|en = 'Pay statement (T-49) '"), ПечатьТ49(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ49(МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		
		ПечатнаяФормаДокумента = Отчеты.АнализНачисленийИУдержаний.ПечатьТ49(ДокументСсылка);
		
		Если ПервыйДокумент Тогда
			ДокументРезультат = ПечатнаяФормаДокумента;
			НомерСтрокиНачало = 1;
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			// Добавим очередную ведомость к результирующему табличному документу
			ДокументРезультат.Вывести(ПечатнаяФормаДокумента);
		КонецЕсли;
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПечатьТ53(МассивОбъектов, ОбъектыПечати)
	
	ПутьКМакету = "ОбщийМакет.ПФ_MXL_Т53";
	
	Менеджер = Документы[МассивОбъектов[0].Метаданные().Имя];
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб          = Истина;
	ТабличныйДокумент.ОриентацияСтраницы   = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьНаВыплатуЗарплатыВКассу_Т53";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету);
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	// получаем данные для печати
	ВыборкаШапок = Менеджер.ВыборкаДляПечатиШапки(МассивОбъектов);
	ВыборкаСтрок = Менеджер.ВыборкаДляПечатиТаблицы(МассивОбъектов);
	
	// Структура параметров областей стандартного макета для помещения данных печати
	ДанныеПечати = УправлениеПечатьюБЗК.ПараметрыОбластейСтандартногоМакета(ПутьКМакету);
			
	ПервыйДокумент = Истина;
	Пока ВыборкаШапок.Следующий() Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ВыборкаСтрок.Количество();
		
		ОбластьМакетаШапкаДокумента  = Макет.ПолучитьОбласть("ШапкаДокумента");
		ОбластьМакетаШапкаТаблицы    = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрокаТаблицы   = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогПоСтранице  = Макет.ПолучитьОбласть("ИтогПоЛисту");
		ОбластьМакетаПодвалДокумента = Макет.ПолучитьОбласть("Подвал");
		
		// Массив с двумя строками - для разбиения на страницы.
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрокаТаблицы);
		ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
		
		ОбщегоНазначенияБЗККлиентСервер.ОчиститьЗначенияСтруктуры(ДанныеПечати.ШапкаДокумента);
		ОбщегоНазначенияБЗККлиентСервер.ОчиститьЗначенияСтруктуры(ДанныеПечати.Подвал);
		
		// выводим данные о документе
		ЗаполнитьЗначенияСвойств(ДанныеПечати.ШапкаДокумента, ВыборкаШапок);
		ДанныеПечати.ШапкаДокумента.НазваниеОрганизации = СокрЛП(ВыборкаШапок.НазваниеОрганизации);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ВыборкаШапок.Подразделение) Тогда
			ДанныеПечати.ШапкаДокумента.Подразделение = ВыборкаШапок.Подразделение.ПолноеНаименование();
		КонецЕсли;
		ДанныеПечати.ШапкаДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапок.Номер, Истина, Истина);
		ДанныеПечати.ШапкаДокумента.ОтчетныйПериодС	= НачалоМесяца(ВыборкаШапок.ПериодРегистрации);
		ДанныеПечати.ШапкаДокумента.ОтчетныйПериодПо = ?(НЕ ЗначениеЗаполнено(ВыборкаШапок.ПериодРегистрации), ВыборкаШапок.ПериодРегистрации, КонецМесяца(ВыборкаШапок.ПериодРегистрации));
		
	    ДанныеПечати.ШапкаДокумента.СообщениеОНеприменимостиПечатнойФормы = 
			ЗарплатаКадры.СообщениеОНеприменимостиПечатнойФормы(
				ВыборкаШапок.Дата,
				'20150619',
				НСтр("ru = 'Приказа Минфина РФ';
					|en = 'Order of the Ministry of Finance of the Russian Federation'"),
				'20150330',
				"52н");
		
		Если ВыборкаШапок.СуммаПоДокументу <> 0 Тогда
			ДанныеПечати.ШапкаДокумента.СуммаДок = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВыборкаШапок.СуммаПоДокументу, ВалютаУчета);
			ДанныеПечати.ШапкаДокумента.СуммаДокРублей = Цел(ВыборкаШапок.СуммаПоДокументу);
			ДанныеПечати.ШапкаДокумента.СуммаДокКопеек = (ВыборкаШапок.СуммаПоДокументу - Цел(ВыборкаШапок.СуммаПоДокументу)) * 100
		КонецЕсли;
		
		// Подвал документа.
		ЗаполнитьЗначенияСвойств(ДанныеПечати.Подвал, ВыборкаШапок);
		// Строка не локализуется т.к. является частью регламентированной формы, применяемой в РФ.
		ДанныеПечати.Подвал.РКО = "Расходный кассовый ордер № _______ от  ""___"" ___________ 20 ___ г.";
		
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ДанныеПечати.ШапкаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаДокумента);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; Итого = 0;
		
		// Выводим данные по строкам документа.
		НомерСтроки = 0;
		ВыборкаСтрок.Сбросить();
		Пока ВыборкаСтрок.НайтиСледующий(ВыборкаШапок.Ссылка, "Ведомость") Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбщегоНазначенияБЗККлиентСервер.ОчиститьЗначенияСтруктуры(ДанныеПечати.Строка);
			
			ЗаполнитьЗначенияСвойств(ДанныеПечати.Строка, ВыборкаСтрок);
			ДанныеПечати.Строка.НомерСтроки = НомерСтроки;
			ДанныеПечати.Строка.ТабельныйНомер = 
				ЗарплатаКадрыОтчеты.ТабельныйНомерНаПечать(ВыборкаСтрок.ТабельныйНомер);
				
			Если НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
					
				ДанныеПечати.Строка.Физлицо = СокрЛП(ВыборкаСтрок.Фамилия)
					+ ?(ПустаяСтрока(ВыборкаСтрок.Имя), "", " " + ВыборкаСтрок.Имя)
					+ ?(ПустаяСтрока(ВыборкаСтрок.Отчество), "", " " + ВыборкаСтрок.Отчество);
					
			Иначе
				ФИО = Новый Структура("Фамилия, Имя, Отчество");
				ФИО.Фамилия = ВыборкаСтрок.Фамилия;
				ФИО.Имя = ВыборкаСтрок.Имя;
				ФИО.Отчество = ВыборкаСтрок.Отчество;
				ДанныеПечати.Строка.Физлицо = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИО);
			КонецЕсли;
			
			ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати.Строка);
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу.
			ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвалДокумента);
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				
				ОбщегоНазначенияБЗККлиентСервер.УстановитьЗначениеСвойства(
					ОбластьМакетаИтогПоСтранице.Параметры, "ИтогоНаСтранице", ИтогоНаСтранице); 
				
				ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
				
				ВыведеноСтраниц = ВыведеноСтраниц + 1;
				ИтогоНаСтранице = 0;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
			ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаСтрок.Сумма;
			Итого = Итого + ВыборкаСтрок.Сумма;
			
		КонецЦикла; // по строкам документа
		
		Если ВыведеноСтрок > 0 Тогда 
			ОбщегоНазначенияБЗККлиентСервер.УстановитьЗначениеСвойства(
				ОбластьМакетаИтогПоСтранице.Параметры, "ИтогоНаСтранице", ИтогоНаСтранице); 
		КонецЕсли;
		ДанныеПечати.Подвал.КоличествоЛистов = ?(ВыведеноСтрок = 0,"",ВыведеноСтраниц + 1);
		
		ОбластьМакетаПодвалДокумента.Параметры.Заполнить(ДанныеПечати.Подвал); 
		
		// дополняем пустыми строками до конца страницы
		ОбщегоНазначенияБЗК.ОчиститьПараметрыТабличногоДокумента(ОбластьМакетаСтрокаТаблицы);
		ОбластиКонцаСтраницы = Новый Массив();
		ОбластиКонцаСтраницы.Добавить(ОбластьМакетаИтогПоСтранице);
		ОбластиКонцаСтраницы.Добавить(ОбластьМакетаПодвалДокумента);
		ОбщегоНазначенияБЗК.ДополнитьСтраницуТабличногоДокумента(ТабличныйДокумент, ОбластьМакетаСтрокаТаблицы, ОбластиКонцаСтраницы);  
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвалДокумента);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаШапок.Ссылка);
		
	КонецЦикла; // по документам
		
	Возврат ТабличныйДокумент;
	
КонецФункции

/// Места выплаты

Функция МестоВыплатыКасса(Ведомость) Экспорт
	МестоВыплаты = ВедомостьНаВыплатуЗарплаты.МестоВыплаты();
	МестоВыплаты.Вид      = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	МестоВыплаты.Значение = Неопределено;
	
	Возврат МестоВыплаты
КонецФункции

Процедура УстановитьМестоВыплатыКасса(Ведомость, Значение) Экспорт
КонецПроцедуры

//// Заполнение и расчет документа.

Функция МожноЗаполнитьЗарплату(Ведомость) Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru = 'Не выбрана организация';
															|en = 'Company is not selected'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru = 'Не задан период регистрации';
															|en = 'Registration period not set'"));
	ПравилаПроверки.Вставить("Дата",				НСтр("ru = 'Не задана дата документа';
														|en = 'Document date must be defined'"));
	ПравилаПроверки.Вставить("СпособВыплаты",		НСтр("ru = 'Не указан способ выплаты';
															|en = 'Payment method is not specified'"));
	
	ПравилаПроверки.Вставить("Округление",			НСтр("ru = 'Не указан способ округления';
															|en = 'Rounding method is not specified'"));
	
	Возврат	ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(Ведомость, ПравилаПроверки, Истина)

КонецФункции

Функция ПараметрыЗаполненияПоОбъекту(Объект) Экспорт
	ПараметрыЗаполнения = ВедомостьНаВыплатуЗарплаты.ПараметрыЗаполнения();
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект.СпособВыплаты) Тогда
		СпособВыплаты = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.СпособВыплаты, 
				"ХарактерВыплаты, 
				|СпособПолучения, 
				|ОкончательныйРасчетНДФЛ");
	Иначе
		СпособВыплаты = Объект.СпособВыплаты
	КонецЕсли;	
		
	ПараметрыЗаполнения.ОписаниеОперации.Организация       = Объект.Организация;
	ПараметрыЗаполнения.ОписаниеОперации.ПериодРегистрации = Объект.ПериодРегистрации;
	ПараметрыЗаполнения.ОписаниеОперации.Дата              = Объект.Дата;
	ПараметрыЗаполнения.ОписаниеОперации.ПорядокВыплаты    = СпособВыплаты.ХарактерВыплаты;
	ПараметрыЗаполнения.ОписаниеОперации.СпособПолучения   = СпособВыплаты.СпособПолучения;
	
	ПараметрыЗаполнения.ОтборСотрудников.Подразделение = Объект.Подразделение;
	
	Если ЗначениеЗаполнено(Объект.Округление) Тогда
		ПараметрыЗаполнения.ПараметрыРасчетаЗарплаты.Округление = Объект.Округление;
	Иначе
		ПараметрыЗаполнения.ПараметрыРасчетаЗарплаты.Округление = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	КонецЕсли;
	
	ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ.ПланируемаяДатаВыплаты = 
		ВедомостьНаВыплатуЗарплатыКлиентСервер.ДатаВыплаты(
			Новый Структура("ДатаВыплаты, Дата", Объект.ДатаВыплаты, Объект.Дата));
	ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ.ОкончательныйРасчет = СпособВыплаты.ОкончательныйРасчетНДФЛ;
	
	Возврат ПараметрыЗаполнения
КонецФункции

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников) Экспорт
	
	ИмяВТСотрудники = "";
	
	// Отбор сотрудников по организации и подразделению.
	СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники);
	
	// Отбор по месту выплаты зарплаты.
	СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДляКадровыхДанных", ОписаниеОперации.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаДляКадровыхДанных КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляВедомости
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники) 

	ПорядокВыплаты = ОписаниеОперации.ПорядокВыплаты;
	
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		НачалоПериода 		= НачалоМесяца(ОписаниеОперации.ПериодРегистрации);
		ОкончаниеПериода	= МИН(Дата(Год(ОписаниеОперации.ПериодРегистрации), Месяц(ОписаниеОперации.ПериодРегистрации), 15), ОписаниеОперации.Дата);
	Иначе
		НачалоПериода 		= НачалоМесяца(ОписаниеОперации.ПериодРегистрации);
		ОкончаниеПериода	= МИН(КонецМесяца(ОписаниеОперации.ПериодРегистрации), ОписаниеОперации.Дата);
	КонецЕсли;	
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация   = ОписаниеОперации.Организация;
	ПараметрыПолученияСотрудников.Подразделение = ОтборСотрудников.Подразделение;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации 	= Ложь;
	ПараметрыПолученияСотрудников.НачалоПериода    = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПериода;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Если ЗначениеЗаполнено(ОтборСотрудников.Подразделение) Тогда
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			МенеджерВременныхТаблиц, Истина, 
			ПараметрыПолученияСотрудников, 
			"ВТСотрудникиПоМестуРаботыПоШапкеВедомости");
		
	Иначе
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
		КадровыйУчет.СоздатьВТСотрудникиНеОформленныеПоТрудовомуДоговору(МенеджерВременныхТаблиц, Истина, ОписаниеОперации.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботыПоШапкеВедомости
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Сотрудник.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиНеОформленныеПоТрудовомуДоговору КАК Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиНеОформленныеПоТрудовомуДоговору";
		
		Запрос.Выполнить();
		
	КонецЕсли;	
	
	ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиПоМестуРаботыПоШапкеВедомости";
	
	// аванс не работающим на дату ведомости не выплачиваем
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		
		ПараметрыПолученияСотрудников.НачалоПериода    = НачалоДня(ОписаниеОперации.Дата);
		ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецДня(ОписаниеОперации.Дата);
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			МенеджерВременныхТаблиц, Истина, 
			ПараметрыПолученияСотрудников, 
			"ВТСотрудникиПоМестуРаботыНаДатуВедомости");
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТРаботающиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПоМестуРаботыНаДатуВедомости КАК РаботающиеСотрудники
		|		ПО Сотрудники.Сотрудник = РаботающиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПоМестуРаботыНаДатуВедомости";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТРаботающиеСотрудникиПоМестуРаботы";
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИмяВТСотрудники) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВходящиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТСотрудники КАК ВходящиеСотрудники
		|		ПО Сотрудники.Сотрудник = ВходящиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудники";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТВходящиеСотрудникиПоМестуРаботы";

	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботы
	|ИЗ
	|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуРаботы"
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МестоВыплаты = ОтборСотрудников.МестоВыплаты;
	
	Если МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		
		ОписательВременныхТаблиц = ОбменСБанкамиПоЗарплатнымПроектам.ОписаниеВременнойТаблицыДляСоздатьВТЛицевыеСчетаСотрудников(
			МенеджерВременныхТаблиц, ИмяВТСотрудники, , , ОписаниеОперации.Дата);
		
		ОбменСБанкамиПоЗарплатнымПроектам.СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(
			ОписательВременныхТаблиц, Истина, ОписаниеОперации.Организация, МестоВыплаты.Значение);
		
		Если ЗначениеЗаполнено(МестоВыплаты.Значение) Тогда
			// При указанном зарплатном проекте отбираем сотрудников с л/с в этом проекте.
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
			|ИЗ
			|	#ВТСотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
			|		ПО Сотрудники.Сотрудник = ЛицевыеСчетаСотрудников.Сотрудник
			|			И (ЛицевыеСчетаСотрудников.НомерЛицевогоСчета ЕСТЬ НЕ NULL )";
		Иначе
			// При не указанном зарплатном проекте отбираем тех сотрудников, у которых нет л/с ни в одном проекте.
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
			|ИЗ
			|	#ВТСотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
			|		ПО Сотрудники.Сотрудник = ЛицевыеСчетаСотрудников.Сотрудник
			|ГДЕ
			|	ЛицевыеСчетаСотрудников.НомерЛицевогоСчета ЕСТЬ NULL ";
		КонецЕсли	
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
		|ИЗ
		|	#ВТСотрудники КАК Сотрудники";
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуВыплаты"
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, ФизическиеЛица, ОписаниеОперации, ОтборСотрудников) Экспорт
	
	ПараметрыПолученияСотрудников =
		КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация         = ОписаниеОперации.Организация;
	ПараметрыПолученияСотрудников.Подразделение       = ОтборСотрудников.Подразделение;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.НачалоПериода       = НачалоМесяца(ОписаниеОперации.ПериодРегистрации);
	ПараметрыПолученияСотрудников.ОкончаниеПериода	  = МИН(КонецМесяца(ОписаниеОперации.ПериодРегистрации), ОписаниеОперации.Дата);
	ПараметрыПолученияСотрудников.КадровыеДанные      = "Подразделение";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиДляВедомости");
		
КонецПроцедуры	

Функция НалогиКУдержанию(ЗарплатаКВыплате, ОписаниеОперации, ПараметрыРасчета, Финансирование = Неопределено, Регистратор = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВедомостьНаВыплатуЗарплаты.СоздатьВТСписокСотрудниковПоТаблицеЗарплат(МенеджерВременныхТаблиц, ЗарплатаКВыплате, ОписаниеОперации.Организация, ОписаниеОперации.ПериодРегистрации, Регистратор);
	
	НДФЛ = 	
		УчетНДФЛ.РассчитатьУдержанныеНалоги(
			Регистратор, 
			ОписаниеОперации.Организация, 
			ОписаниеОперации.Дата, 
			МенеджерВременныхТаблиц, 
			ОписаниеОперации.ПериодРегистрации,
			ПараметрыРасчета.ОкончательныйРасчет);
			
	// Сортируем НДФЛ к удержанию.
	КолонкиСортировки = 
	"ФизическоеЛицо,
	|МесяцНалоговогоПериода,
	|КатегорияДохода,
	|СтавкаНалогообложенияРезидента,
	|КодДохода,
	|Сумма,
	|Подразделение,
	|ДокументОснование,
	|РегистрацияВНалоговомОргане";
	НДФЛ.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);
	
	Возврат НДФЛ
	
КонецФункции

///// Обработчики событий модуля объекта документов Ведомости.

Процедура ОбработкаЗаполнения(Ведомость, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ДокументОбъект.ВводНачальныхДанных Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СпособВыплаты");
	КонецЕсли;
	
	Для Каждого СтрокаСостава Из ДокументОбъект.Состав Цикл
		ЗарплатаСтроки = ДокументОбъект.Зарплата.Выгрузить(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки), "КВыплате");
		Если ЗарплатаСтроки.Итог("КВыплате") < 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У сотрудника %1 указана отрицательная сумма к выплате';
							|en = 'Negative payment amount of employee %1 is specified '"),
						СтрокаСостава.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Состав[%1].ФизическоеЛицо", СтрокаСостава.НомерСтроки-1),, Отказ);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплату(Ведомость, Отказ) Экспорт
	
	ОписаниеКолонокЗарплаты = ВзаиморасчетыССотрудниками.НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты();
	ОписаниеКолонокЗарплаты.Сумма = "КВыплате";
	
	Зарплата = ВзаиморасчетыССотрудниками.НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти(
		Ведомость.Зарплата,
		ОписаниеКолонокЗарплаты);
	
	ПорядокВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьВыплаченнуюЗарплату(
		Ведомость.Движения, 
		Отказ, 
		Ведомость.Организация, 
		Ведомость.ПериодРегистрации, 
		Зарплата,
		ПорядокВыплаты)
	
КонецПроцедуры

#КонецОбласти
