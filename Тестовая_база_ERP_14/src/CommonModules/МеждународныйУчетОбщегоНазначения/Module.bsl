////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции, используемые в подсистеме 
// международного финансового учета.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет использование группы финансового учета
// в настройках уточнения счетов учета в международном финансовом учете.
//
// Параметры:
//  ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры,
//							 СправочникСсылка.ГруппыФинансовогоУчетаРасчетов,
//							 СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств,
//                           СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов - группа финансового учета
//                               номенклатуры, расчетов с контрагентами, денежных средств, доходов/расходов.
//
// Возвращаемое значение:
//  Структура - Ключи:
//				КоличествоСвязанныхШаблонов - количество шаблонов проводок, использующих
//											  уточнение счетов с помощью данного типа групп финансового учета
//              КоличествоНастроенныхШаблонов - количество шаблонов проводок, для которых настроены счета учета
//   										    для данной группы финансового учета.
//
Функция СостояниеУточненияСчетовУчета(ГруппаФинансовогоУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаУточненияСчетов.ШаблонПроводки,
	|	ПравилаУточненияСчетов.ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета
	|ПОМЕСТИТЬ ПравилаУточненияСчетов
	|ИЗ
	|	РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточненияСчетов
	|ГДЕ
	|	ПравилаУточненияСчетов.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|;
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет) КАК ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ШаблоныПроводок
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУточненияСчетов КАК ПравилаУточненияСчетов
	|		ПО (ПравилаУточненияСчетов.ШаблонПроводки = ШаблоныПроводок.Ссылка)
	|			И (ПравилаУточненияСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет))
	|ГДЕ
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаДт В (&ТипыИсточниковУточненияСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит),
	|	ПравилаУточненияСчетов.СчетУчета
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУточненияСчетов КАК ПравилаУточненияСчетов
	|		ПО (ПравилаУточненияСчетов.ШаблонПроводки = ШаблоныПроводок.Ссылка)
	|			И (ПравилаУточненияСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит))
	|ГДЕ
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаКт В (&ТипыИсточниковУточненияСчета)
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ШаблоныПроводок.ШаблонПроводки) КАК КоличествоСвязанныхШаблонов
	|ИЗ
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ШаблоныПроводок.ШаблонПроводки) КАК КоличествоНастроенныхШаблонов
	|ИЗ
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|ГДЕ
	|	НЕ ШаблоныПроводок.СчетУчета ЕСТЬ NULL
	|";
	
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", ГруппаФинансовогоУчета);  
	Запрос.УстановитьПараметр("ТипыИсточниковУточненияСчета", МеждународныйУчетКлиентСервер.ТипыИсточниковУточненияСчета(ГруппаФинансовогоУчета));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КоличествоСвязанныхШаблонов = 0;
	КоличествоНастроенныхШаблонов = 0;
	
	ВыборкаСвязанныеШаблоны = МассивРезультатов[2].Выбрать();
	Если ВыборкаСвязанныеШаблоны.Следующий() Тогда
		КоличествоСвязанныхШаблонов = ВыборкаСвязанныеШаблоны.КоличествоСвязанныхШаблонов;
	КонецЕсли;
	ВыборкаНастроенныеШаблоны = МассивРезультатов[3].Выбрать();
	Если ВыборкаНастроенныеШаблоны.Следующий() Тогда
		КоличествоНастроенныхШаблонов = ВыборкаНастроенныеШаблоны.КоличествоНастроенныхШаблонов;
	КонецЕсли;
	
	Возврат Новый Структура("КоличествоСвязанныхШаблонов, КоличествоНастроенныхШаблонов",
							КоличествоСвязанныхШаблонов, КоличествоНастроенныхШаблонов);
	
КонецФункции

// Возвращает элемент справочника НастройкиХозяйственныхОпераций по ссылке на значение перечисления ХозяйственныеОперации.
//
// Параметры:
//  ЗначениеПеречисления - ПеречислениеСсылка.ХозяйственныеОперации - ссылка на значение перечисления ХозяйственныеОперации.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиХозяйственныеОперации - элемент справочника настроек хозяйственной операции.
//
Функция ХозяйственнаяОперацияПоПеречислению(ЗначениеПеречисления) Экспорт

	ХозяйственнаяОперация = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиХозопераций.Ссылка КАК ХозяйственнаяОперация 
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозопераций
	|ГДЕ
	|	НастройкиХозопераций.ХозяйственнаяОперация = &ЗначениеПеречисления
	|";
	
	Запрос.УстановитьПараметр("ЗначениеПеречисления", ЗначениеПеречисления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
	КонецЕсли;
	
	Возврат ХозяйственнаяОперация;

КонецФункции

// Пересчитывает сумму функциональной валюты в валюту представления
//
// Параметры:
//  Сумма - Число - Сумма в функциональной валюте 
//  Дата - Дата - дата определения курса валют.
//
// Возвращаемое значение:
//  Число - Сумма в валюте представления.
//
Функция РассчитатьСуммуПредставления(Сумма, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютаМеждународногоУчета = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();
	КурсФункциональнойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаМеждународногоУчета.Функциональная, Дата);
	КурсВалютыПредставления = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаМеждународногоУчета.Представления, Дата);
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма,КурсФункциональнойВалюты,КурсВалютыПредставления);
	
КонецФункции

// Функция получает коэффициенты пересчета сумм из заданной валюты в функциональную валюту и валюту представления.
//
// Параметры:
//  ИсходнаяВалюта - СправочникСсылка.Валюты - валюта для пересчета которой необходимо получить коэффициенты.
//  Дата - Дата - дата определения курса валют.
//
// Возвращаемое значение:
//  Структура - содержащая коэффициенты пересчета в ключах "ВФункциональнуюВалюту" и "ВВалютуПредставления".
//
Функция ПолучитьКоэффициентыПересчетаВалюты(ИсходнаяВалюта, Период)Экспорт

	ВалютаМеждународногоУчета = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период,
	|		Валюта = &ВалютаФункциональная ИЛИ Валюта = &ВалютаПредставления ИЛИ Валюта = &ИсходнаяВалюта
	|	) КАК КурсыВалют
	|");
	Запрос.УстановитьПараметр("Период",               Период);
	Запрос.УстановитьПараметр("ВалютаФункциональная", ВалютаМеждународногоУчета.Функциональная);
	Запрос.УстановитьПараметр("ВалютаПредставления",  ВалютаМеждународногоУчета.Представления);
	Запрос.УстановитьПараметр("ИсходнаяВалюта",       ИсходнаяВалюта);

	КурсВалютыФункц         = 1;
	КратностьВалютыФункц    = 1;

	КурсВалютыПред          = 1;
	КратностьВалютыПред     = 1;

	КурсИсходнойВалюты      = 1;
	КратностьИсходнойВалюты = 1;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Валюта = ВалютаМеждународногоУчета.Функциональная Тогда

			КурсВалютыФункц      = Выборка.Курс;
			КратностьВалютыФункц = Выборка.Кратность;

		КонецЕсли;

		Если Выборка.Валюта = ВалютаМеждународногоУчета.Представления Тогда

			КурсВалютыПред      = Выборка.Курс;
			КратностьВалютыПред = Выборка.Кратность;

		КонецЕсли;

		Если Выборка.Валюта = ИсходнаяВалюта Тогда

			КурсИсходнойВалюты      = Выборка.Курс;
			КратностьИсходнойВалюты = Выборка.Кратность;

		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура("ВФункциональнуюВалюту, ВВалютуПредставления");

	Результат.ВФункциональнуюВалюту  = КурсИсходнойВалюты * КратностьВалютыФункц / (КратностьИсходнойВалюты * КурсВалютыФункц); 
	Результат.ВВалютуПредставления   = КурсИсходнойВалюты * КратностьВалютыПред / (КратностьИсходнойВалюты * КурсВалютыПред);

	Возврат Результат;

КонецФункции

// Проверяет доступность чтения настроек международного финансового учета.
//
// Возвращаемое значение:
//  Булево - Истина если разрешено чтение настроек международного учета.
//
Функция ДоступноЧтениеНастроекМеждународногоУчета() Экспорт

	Возврат	ПравоДоступа("Чтение", Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета);

КонецФункции

// Проверяет доступность изменения настроек международного финансового учета.
//
// Возвращаемое значение:
//  Булево - Истина если разрешено изменение настроек международного учета.
//
Функция ДоступноИзменениеНастроекМеждународногоУчета() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета);

КонецФункции

// Установить условное оформление проводок международного учета.
// Оформляются поля таблицы формы проводок: Субконто, ПредставлениеВидаСубконто, Валюта, ТипПроводки.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//
Процедура УстановитьОформлениеПроводок(УсловноеОформление, ТаблицаПроводок) Экспорт
	
	// Не заполнено поле "ТипПроводки" отображать серым текстом "Обычная"
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипПроводки");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".ТипПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обычная';
																|en = 'Normal'"));
	
	// Поля зависящие от стороны счета
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	// Дт
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, "Дт", Индекс);
	КонецЦикла;
	УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, "Дт");
	
	// Кт
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, "Кт", Индекс);
	КонецЦикла;
	УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, "Кт");
	
КонецПроцедуры

// Заполняет вспомогательные поля представления видов субконто
//
// Параметры:
//  ТаблицаФормы  - ДанныеФормыКоллекция - Реквизит формы (таблица) содержащая проводки.
//
Процедура ЗаполнитьПредставлениеВидовСубконто(ТаблицаФормы) Экспорт

	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПредставлениеВидовСубконто(СтрокаТаблицы.СчетДт, "Дт"));
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПредставлениеВидовСубконто(СтрокаТаблицы.СчетКт, "Кт"));
	КонецЦикла;

КонецПроцедуры

// Получает строковые представления видов субконто счета.
//
// Параметры:
//  Счет - ПланСчетовСсылка - счет международного плана счетов
//  ВидДвижения - Строка - Сторона проводки "Дт" или "Кт".
//
// Возвращаемое значение:
//   Структура - Ключ структуры - Наименование поля представления вида субконто на форме ("ПредставлениеВидСубконтоДт1",
//               "ПредставлениеВидСубконтоДт2" и т.д.) Значение структуры - строковое представление вида субконто.
//
Функция ПредставлениеВидовСубконто(Счет, ВидДвижения) Экспорт

	ПредставлениеВидовСубконто = Новый Структура;
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	КоличествоВидовСубконто = Счет.ВидыСубконто.Количество();
	Для К = 1 По МаксКоличествоСубконто Цикл
		ПредставлениеВидаСубконто = ?(КоличествоВидовСубконто >= К, "<" + Счет.ВидыСубконто[К - 1].ВидСубконто + ">", Неопределено);
		ПредставлениеВидовСубконто.Вставить("ПредставлениеВидСубконто" + ВидДвижения + К, ПредставлениеВидаСубконто);
	КонецЦикла;
	СчетВалютный = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет).Валютный;
	ПредставлениеВидовСубконто.Вставить("ВалютныйУчет" + ВидДвижения, СчетВалютный);
	ПредставлениеВидовСубконто.Вставить("КоличествоСубконто" + ВидДвижения, КоличествоВидовСубконто);

	Возврат ПредставлениеВидовСубконто;

КонецФункции

// Получает заголовок кнопки для вызова команды УстановитьДатуЗапрета
//
// Параметры:
//  ДатаЗапрета  - Дата - дата запрета формирования проводок по международному учету.
//
// Возвращаемое значение:
//   Строка - Текст заголовка кнопки.
//
Функция ПредставлениеКомандыУстановитьДатуЗапрета(ДатаЗапрета = Неопределено) Экспорт
	
	Шаблон = НСтр("ru = 'Дата запрета формирования проводок %ДатаЗапрета%';
					|en = 'Closing date of posting generation %ДатаЗапрета%'");
	Замена = ?(ЗначениеЗаполнено(ДатаЗапрета),Формат(ДатаЗапрета, "ДЛФ=DD"),НСтр("ru = 'не установлена';
																				|en = 'not set'"));
	Возврат СтрЗаменить(Шаблон, "%ДатаЗапрета%", Замена);
	
КонецФункции

// Выгружает набор записей регистра бухгалтерии в строгом соответствии номеров субконто своим видам субконто - как задано
// на плане счетов.
// 
// Параметры:
//  Набор - РегистрБухгалтерииНаборЗаписей.Международный - выгружаемый набор записей.
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные набора записей.
//
Функция ВыгрузитьНаборЗаписейРегистраБухгалтерии(Набор) Экспорт
	
	МаксКоличествоСубконто = МеждународныйУчетСерверПовтИсп.МаксКоличествоСубконто();
	Запрос = Новый Запрос(ТекстЗапросаПравильныхНомеровСубконто(МаксКоличествоСубконто));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НаборДвижений", Набор.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	НовыйНабор = Набор.ВыгрузитьКолонки();
	ВидыДвижений = СтрРазделить("Дт,Кт",",");
	Для Каждого Запись Из Выборка Цикл
		НоваяЗапись = НовыйНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		Для Каждого ВидДвижения Из ВидыДвижений Цикл
			Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
				ПравильныйНомер = Запись["НомерСубконто" + ВидДвижения + НомерСубконто];
				Если ПравильныйНомер <> 0 Тогда
					НоваяЗапись["ВидСубконто" + ВидДвижения + ПравильныйНомер] = Запись["ВидСубконто" + ВидДвижения + НомерСубконто];
					НоваяЗапись["Субконто" + ВидДвижения + ПравильныйНомер] = Запись["Субконто" + ВидДвижения + НомерСубконто];
				КонецЕсли;
			КонецЦикла;// по номерам субконто
		КонецЦикла;// видам движений Дт, Кт
	КонецЦикла;// по записям набора
	
	Возврат НовыйНабор;
	
КонецФункции

// Устанавливает видимость настроек для международного учета в зависимости от включенных
// ФО международного учета и наличия настроенных шаблонов проводк для международного учета.
// 
// Параметры:
//  Ссылка - СсылкаСправочник.ГруппыФинансовогоУчетаДенежныхСредств,
//           СсылкаСправочник.ГруппыФинансовогоУчетаДоходовРасходов,
//           СсылкаСправочник.ГруппыФинансовогоУчетаНоменклатуры,
//           СсылкаСправочник.ГруппыФинансовогоУчетаРасчетов - проверяемая группа финансового учета.
//  ГруппаНастроекМФУ - ГруппаФормы - группа элементов формы в которой размещены настройки МФУ.
//  НастроитьУточнениеСчетов - КнопкаФормы - гиперссылка перехода к настройкам шаблонов проводок для международного учета.
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные набора записей.
//
Процедура УстановитьВидимостьНастроекМФУ(Ссылка, ГруппаНастроекМФУ, НастроитьУточнениеСчетов) Экспорт
	
	Если (ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымОперативного")
		ИЛИ ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного"))
		И ДоступноЧтениеНастроекМеждународногоУчета() Тогда
		
		ДанныеНастроек = СостояниеУточненияСчетовУчета(Ссылка);
		КоличествоСвязанныхШаблонов = ДанныеНастроек.КоличествоСвязанныхШаблонов;
		КоличествоНастроенныхШаблонов = ДанныеНастроек.КоличествоНастроенныхШаблонов;
		
		ВидимостьНастроек = Ложь;
		ДоступноИзменениеНастроекМФУ = ДоступноИзменениеНастроекМеждународногоУчета();
		
		Если КоличествоСвязанныхШаблонов > 0 И КоличествоНастроенныхШаблонов > 0 Тогда
			ЗаголовокГиперссылкиНастройки = Нстр("ru = 'Посмотреть настройки счетов учета по шаблонам проводок';
												|en = 'View GL account settings by posting templates'");
			Если ДоступноИзменениеНастроекМФУ Тогда
				ЗаголовокГиперссылкиНастройки = Нстр("ru = 'Изменить настройки счетов учета по шаблонам проводок';
													|en = 'Change GL account settings by posting templates'");
			КонецЕсли;
			ВидимостьНастроек = Истина;
		ИначеЕсли КоличествоСвязанныхШаблонов > 0 И КоличествоНастроенныхШаблонов = 0 Тогда
			ЗаголовокГиперссылкиНастройки = Нстр("ru = 'Настроить счета учета по шаблонам проводок';
												|en = 'Configure GL account by posting templates'");
			ВидимостьНастроек = ДоступноИзменениеНастроекМФУ;
		КонецЕсли;
		Если НастроитьУточнениеСчетов <> Неопределено Тогда
			НастроитьУточнениеСчетов.Заголовок = ЗаголовокГиперссылкиНастройки;
		КонецЕсли;
		ГруппаНастроекМФУ.Видимость = ВидимостьНастроек;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость надписей заголовков направлений деятельности
//
// Параметры:
//  ЭлементПодразделениеДт - ПолеФормы - колонка табличной части документа
//  ЭлементПодразделениеКт - ПолеФормы - колонка табличной части документа.
//
Процедура УстановитьЗаголовкиПодразделения(ЭлементПодразделениеДт, ЭлементПодразделениеКт) Экспорт
	
	ШаблонЗаголовка = НСтр("ru = 'Подразделение %1';
							|en = 'Department %1'");
	Если Справочники.НаправленияДеятельности.ИспользуетсяУчетПоНаправлениям() Тогда
		ШаблонЗаголовка = ШаблонЗаголовка + ", " + НСтр("ru = 'Направление %1';
														|en = 'Direction %1'")
	КонецЕсли;
	ЭлементПодразделениеДт.Заголовок = СтрШаблон(ШаблонЗаголовка, НСтр("ru = 'Дт';
																		|en = 'Dr'"));
	ЭлементПодразделениеКт.Заголовок = СтрШаблон(ШаблонЗаголовка, НСтр("ru = 'Кт';
																		|en = 'Cr'"));
	
КонецПроцедуры

// Получает текущую дату запрета формирования проводок международного учета
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация (или массив организаций) 
//                 для которой требуется получить дату запрета формирования проводок
//                 если не указана, то будет получена общая дата запрета для всех организаций.
//
// Возвращаемое значение:
//   Дата - дата запрета формирования проводок по международному учету.
//
Функция ДатаЗапретаФормированияПроводок(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ДатыЗапрета.ДатаЗапрета, ДЕНЬ) КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет КАК ДатыЗапрета
	|ГДЕ
	|	ДатыЗапрета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ДатыЗапрета.ДатаЗапрета <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОНЕЦПЕРИОДА(ДатыЗапрета.ДатаЗапрета, ДЕНЬ) КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет КАК ДатыЗапрета
	|ГДЕ
	|	ДатыЗапрета.Организация В(&Организации)
	|	И ДатыЗапрета.ДатаЗапрета <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатыЗапрета.ДатаЗапрета";
	
	Запрос.УстановитьПараметр("Организации", Организация);
	
	ДатыЗапрета = Запрос.ВыполнитьПакет();
	
	ПоОрганизации = ДатыЗапрета[1].Выбрать();
	Если ПоОрганизации.Следующий() Тогда
		Возврат ПоОрганизации.ДатаЗапрета;
	КонецЕсли;
	
	ДляВсех = ДатыЗапрета[0].Выбрать();
	Если ДляВсех.Следующий() Тогда
		Возврат ДляВсех.ДатаЗапрета;
	КонецЕсли;
	
	Возврат Дата(1,1,1);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Установить условное оформление полей Субконто и ПредставлениеВидаСубконто для таблицы формы проводок.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//  ДтКт - Строка - Сторона проводки "Дт" или "Кт".
//  НомерСубконто - Число,Строка - порядковый номер субконто.
//
Процедура УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, ДтКт, НомерСубконто)
	
	Номер = Строка(НомерСубконто);
	ПолеСубконто = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Субконто" + ДтКт + Номер);
	ПолеВидаСубконто = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконто" + ДтКт + Номер);
	
	// Серый текст полей субконто если указан счет и не заполнены его доступные субконто.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = ПолеВидаСубконто;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Счет" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеСубконто;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Если у счета нет субконто, то скрыть подсказки ввода
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = ПолеВидаСубконто;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеСубконто;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Установить условное оформление полей Валюта и ВалютнаяСумма для таблицы формы проводок.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//  ДтКт - Строка - Сторона проводки "Дт" или "Кт".
//  НомерСубконто - Число,Строка - порядковый номер субконто.
//
Процедура УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, ДтКт)
	
	// Если на счете ведется валютный учет и не указана валюта, то подсветить незаполненное поле.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Валюта" + ДтКт);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".ВалютныйУчет" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Валюта" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаПравильныхНомеровСубконто(МаксКоличествоСубконто)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыСубконто.Ссылка.Код КАК Код,
	|	ВидыСубконто.Ссылка КАК Счет,
	|	ВидыСубконто.НомерСтроки КАК НомерСубконто,
	|	ВидыСубконто.ВидСубконто КАК ВидСубконто
	|ПОМЕСТИТЬ СубконтоСчетов
	|ИЗ
	|	ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	ВидСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборДвижений.НомерСтроки КАК НомерСтроки,
	|	НаборДвижений.Период КАК Период,
	|	НаборДвижений.Регистратор,
	|	НаборДвижений.Организация,
	|	НаборДвижений.СчетДт,
	|	НаборДвижений.ПодразделениеДт,
	|	НаборДвижений.НаправлениеДеятельностиДт,
	|	НаборДвижений.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	НаборДвижений.СубконтоДт1 КАК СубконтоДт1,
	|	НаборДвижений.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	НаборДвижений.СубконтоДт2 КАК СубконтоДт2,
	|	НаборДвижений.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	НаборДвижений.СубконтоДт3 КАК СубконтоДт3,
	|	
	|	НаборДвижений.ВалютаДт,
	|	НаборДвижений.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	НаборДвижений.СчетКт,
	|	НаборДвижений.ПодразделениеКт,
	|	НаборДвижений.НаправлениеДеятельностиКт,
	|	НаборДвижений.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	НаборДвижений.СубконтоКт1 КАК СубконтоКт1,
	|	НаборДвижений.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	НаборДвижений.СубконтоКт2 КАК СубконтоКт2,
	|	НаборДвижений.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	НаборДвижений.СубконтоКт3 КАК СубконтоКт3,
	|
	|	//ЕщеСубконтоНабора
	|
	|	НаборДвижений.ВалютаКт,
	|	НаборДвижений.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	НаборДвижений.Сумма КАК Сумма,
	|	НаборДвижений.СуммаПредставления КАК СуммаПредставления,
	|	НаборДвижений.ШаблонПроводки
	|ПОМЕСТИТЬ НаборДвижений
	|ИЗ
	|	&НаборДвижений КАК НаборДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборДвижений.НомерСтроки КАК НомерСтроки,
	|	НаборДвижений.Период КАК Период,
	|	НаборДвижений.Регистратор,
	|	НаборДвижений.Организация,
	|	НаборДвижений.СчетДт,
	|	НаборДвижений.ПодразделениеДт,
	|	НаборДвижений.НаправлениеДеятельностиДт,
	|	ЕСТЬNULL(СубконтоСчетовДт1.НомерСубконто,0) КАК НомерСубконтоДт1,
	|	НаборДвижений.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	НаборДвижений.СубконтоДт1 КАК СубконтоДт1,
	|	ЕСТЬNULL(СубконтоСчетовДт2.НомерСубконто,0) КАК НомерСубконтоДт2,
	|	НаборДвижений.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	НаборДвижений.СубконтоДт2 КАК СубконтоДт2,
	|	ЕСТЬNULL(СубконтоСчетовДт3.НомерСубконто,0) КАК НомерСубконтоДт3,
	|	НаборДвижений.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	НаборДвижений.СубконтоДт3 КАК СубконтоДт3,
	|
	|	НаборДвижений.ВалютаДт,
	|	НаборДвижений.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	НаборДвижений.СчетКт,
	|	НаборДвижений.ПодразделениеКт,
	|	НаборДвижений.НаправлениеДеятельностиКт,
	|	ЕСТЬNULL(СубконтоСчетовКт1.НомерСубконто,0) КАК НомерСубконтоКт1,
	|	НаборДвижений.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	НаборДвижений.СубконтоКт1 КАК СубконтоКт1,
	|	ЕСТЬNULL(СубконтоСчетовКт2.НомерСубконто,0) КАК НомерСубконтоКт2,
	|	НаборДвижений.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	НаборДвижений.СубконтоКт2 КАК СубконтоКт2,
	|	ЕСТЬNULL(СубконтоСчетовКт3.НомерСубконто,0) КАК НомерСубконтоКт3,
	|	НаборДвижений.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	НаборДвижений.СубконтоКт3 КАК СубконтоКт3,
	|
	|	//ЕщеСубконтоРезультата
	|
	|	НаборДвижений.ВалютаКт,
	|	НаборДвижений.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	НаборДвижений.Сумма КАК Сумма,
	|	НаборДвижений.СуммаПредставления КАК СуммаПредставления,
	|	НаборДвижений.ШаблонПроводки
	|ИЗ
	|	НаборДвижений КАК НаборДвижений
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовДт1
	|	ПО НаборДвижений.СчетДт = СубконтоСчетовДт1.Счет
	|		И НаборДвижений.ВидСубконтоДт1 = СубконтоСчетовДт1.ВидСубконто
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовДт2
	|	ПО НаборДвижений.СчетДт = СубконтоСчетовДт2.Счет
	|		И НаборДвижений.ВидСубконтоДт2 = СубконтоСчетовДт2.ВидСубконто
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовДт3
	|	ПО НаборДвижений.СчетДт = СубконтоСчетовДт3.Счет
	|		И НаборДвижений.ВидСубконтоДт3 = СубконтоСчетовДт3.ВидСубконто
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовКт1
	|	ПО НаборДвижений.СчетКт = СубконтоСчетовКт1.Счет
	|		И НаборДвижений.ВидСубконтоКт1 = СубконтоСчетовКт1.ВидСубконто
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовКт2
	|	ПО НаборДвижений.СчетКт = СубконтоСчетовКт2.Счет
	|		И НаборДвижений.ВидСубконтоКт2 = СубконтоСчетовКт2.ВидСубконто
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовКт3
	|	ПО НаборДвижений.СчетКт = СубконтоСчетовКт3.Счет
	|		И НаборДвижений.ВидСубконтоКт3 = СубконтоСчетовКт3.ВидСубконто
	|
	|	//ЕщеСоединения
	|";
	
	Если МаксКоличествоСубконто > 3 Тогда
		ВидыДвижений = СтрРазделить("Дт,Кт",",");
		ШаблонНомерСубконто = "ЕСТЬNULL(СубконтоСчетов%1%2.НомерСубконто,0) КАК НомерСубконто%1%2,";
		
		ШаблонВидСубконто = "НаборДвижений.ВидСубконто%1%2 КАК ВидСубконто%1%2,";
		ШаблонСубконто = "НаборДвижений.Субконто%1%2 КАК Субконто%1%2,";
		
		ШаблонСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетов%1%2
							|	ПО НаборДвижений.СчетДт = СубконтоСчетов%1%2.Счет
							|		И НаборДвижений.ВидСубконто%1%2 = СубконтоСчетов%1%2.ВидСубконто";
		
		ЕщеСубконтоНабора = Новый Массив;
		ЕщеСубконтоРезультата = Новый Массив;
		ЕщеСоединения = Новый Массив;
		ВидыДвижений = СтрРазделить("Дт,Кт",",");
		РазделительСтрок = Символы.ПС+Символы.Таб;
		Для Каждого ВидДвижения Из ВидыДвижений Цикл
			Для Номер = 4 По МаксКоличествоСубконто Цикл
				
				НовыйНомер = СтрШаблон(ШаблонНомерСубконто, ВидДвижения, Номер);
				НовоеСубконто = СтрШаблон(ШаблонВидСубконто, ВидДвижения, Номер)+РазделительСтрок
								+СтрШаблон(ШаблонСубконто, ВидДвижения, Номер);
				НовоеСоединение = СтрШаблон(ШаблонСоединения, ВидДвижения, Номер);
				
				ЕщеСубконтоНабора.Добавить(НовоеСубконто);
				ЕщеСубконтоРезультата.Добавить(НовыйНомер + РазделительСтрок + НовоеСубконто);
				ЕщеСоединения.Добавить(НовоеСоединение);
				
			КонецЦикла;
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕщеСубконтоНабора", СтрСоединить(ЕщеСубконтоНабора, РазделительСтрок));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕщеСубконтоРезультата", СтрСоединить(ЕщеСубконтоРезультата, РазделительСтрок));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕщеСоединения", СтрСоединить(ЕщеСоединения, РазделительСтрок));
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

