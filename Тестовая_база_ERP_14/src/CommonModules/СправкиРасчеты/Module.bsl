#Область ПрограммныйИнтерфейс

// Возвращает символы примечания (сноски), соответствующие номеру примечания.
//
// Параметры:
//  НомерПримечания	 - Число - номер, начиная с единицы.
// 
// Возвращаемое значение:
//  Строка - один или несколько символов примечания.
//
Функция СимволыПримечания(НомерПримечания = 1) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(НСтр("ru = '*';
																		|en = '*'"), НомерПримечания);
	
КонецФункции

// Дополняет переданное слово ссылкой на примечание. Используется в основном тексте.
//
// Параметры:
//  Слово			 - Строка - слово
//  НомерПримечания	 - Число - номер примечания, начиная с единицы.
//
Процедура ДополнитьСловоСсылкойНаПримечание(Слово, НомерПримечания = 1) Экспорт
	
	Слово = СтрШаблон(НСтр("ru = '%1%2';
							|en = '%1%2'"), Слово, СимволыПримечания(НомерПримечания));
	
КонецПроцедуры

// Предваряет переданный текст идентификатором примечания соответствующего номера.
// Используется в колонтитуле (page footer) страницы.
//
// Параметры:
//  ТекстПримечания	 - Строка - пространный поясняющий текст
//  НомерПримечания	 - Число - номер примечания, начиная с единицы.
// 
// Возвращаемое значение:
//  Строка - полный текст для помещения в колонтитул.
//
Функция ДобавитьСимволыПримечания(ТекстПримечания, НомерПримечания = 1) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = '%1 %2';
							|en = '%1 %2'"), СимволыПримечания(НомерПримечания), ТекстПримечания);
	
КонецФункции

// Помещает после тела отчета текст примечания.
// Увеличивает счетчик примечаний.
// Следует использовать в обработчике ПослеВыводаРезультата.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - результат отчета
//  ТекстПримечания	  - Строка - пространный поясняющий текст
//  СчетчикПримечаний - Число - текущее (до вывода очередного примечания) значение счетчика примечаний.
//                      Перед добавлением первого примечания следует инициализировать счетчик значением 0.
// 
Процедура ДобавитьПримечание(ТабличныйДокумент, ТекстПримечания, СчетчикПримечаний = 0) Экспорт
	
	Если ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикПримечаний = СчетчикПримечаний + 1;
	
	ШаблонСтроки = ТабличныйДокумент.ПолучитьОбласть("R1");
	ШаблонСтроки.Область("R1").Очистить();
	
	// Строка для отступа
	ТабличныйДокумент.Вывести(ШаблонСтроки);
	ОбластьОтступ = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, , ТабличныйДокумент.ВысотаТаблицы, );
	ОбластьОтступ.ВысотаСтроки = 5;
	
	// Строка для текста
	ТабличныйДокумент.Вывести(ШаблонСтроки);
	ОбластьСноска = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 1, ТабличныйДокумент.ВысотаТаблицы, 1);
	
	ОбластьСноска.Шрифт = Новый Шрифт(, 8);
	ОбластьСноска.ВысотаСтроки = 0;
	
	ОбластьСноска.Текст = ДобавитьСимволыПримечания(ТекстПримечания, СчетчикПримечаний);
	
КонецПроцедуры

#КонецОбласти

#Область Формы // Все методы вызываются из контекста формы

Процедура ИнициализироватьФорму(Форма, Отказ, СтандартнаяОбработка, СобытияФормированияОтчета = Неопределено) Экспорт
	
	СкопироватьПараметрыФормыВОтчет(Форма.Отчет, Форма.Параметры);
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПоВсемРеквизитам(Форма);
	
	Если Форма.Параметры.СформироватьПриОткрытии = Истина Тогда // Если не передан, то значение Неопределено
		СтандартнаяОбработка = Ложь;
		СформироватьОтчет(Форма, СобытияФормированияОтчета); // фактически запустится в фоновом задании
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьЗагруженныеПользовательскиеНастройки(Форма, Настройки, НастройкиГруппировок = Неопределено) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, Настройки);
	БухгалтерскиеОтчеты.ИнициализироватьКомпоновщикНастроекПриЗагрузкеПользовательскихНастроек(Форма, Настройки);
	
	Если НастройкиГруппировок <> Неопределено Тогда
		ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
		ИнициализироватьГруппировки(НастройкиГруппировок, Форма.Отчет.КомпоновщикНастроек, ИмяОтчета);
	КонецЕсли;
	
	НастроитьПоВсемРеквизитам(Форма); // она же отмечает отчет неактуальным через НастроитьПоОрганизации()
	
КонецПроцедуры

Процедура НастроитьПоВсемРеквизитам(Форма)
	
	СправкиРасчетыКлиентСервер.НастроитьНаборПоказателейОтчета(Форма);
	
	НастроитьПоОрганизации(Форма);
	
КонецПроцедуры

Процедура СкопироватьПараметрыФормыВОтчет(Отчет, Параметры)
	
	КопируемыеПараметры = Новый Массив;
	КопируемыеПараметры.Добавить("НачалоПериода");
	КопируемыеПараметры.Добавить("КонецПериода");
	КопируемыеПараметры.Добавить("Организация");
	
	Для Каждого ИмяПараметра Из КопируемыеПараметры Цикл
		
		ЗначениеПараметра = Неопределено;
		
		Если Не Параметры.Свойство(ИмяПараметра, ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		Отчет[ИмяПараметра] = ЗначениеПараметра;
		
	КонецЦикла;
	
КонецПроцедуры

#Область НастройкаПоОрганизации

// Обработчик события - изменение пользователем организации.
// Перед вызовом может требоваться контролировать, что не выбрана повторно та же самая организация - 
// см. область КонтрольПовторногоВыбораОрганизации в СправкиРасчетыКлиентСервер.
//
Процедура ОрганизацияПриИзменении(Форма) Экспорт
	
	НастроитьПоОрганизации(Форма);
	
	НастроитьОтборПоОрганизации(Форма);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма);
	
КонецПроцедуры

// Обработчик события - изменение пользователем организации
//
// Расширение для отчетов поддерживающих выбор организации с обособленными подразделениями - 
// см. ПоддерживаетсяВыборВсяОрганизация().
//
// Перед вызовом может требоваться контролировать, что не выбрана повторно та же самая организация - 
// см. область КонтрольПовторногоВыбораОрганизации в СправкиРасчетыКлиентСервер.
//
Процедура ПолеОрганизацияПриИзменении(Форма) Экспорт
	
	ОбщегоНазначенияБПКлиентСервер.ОбработкаОтменыВыбораОрганизации(
		Форма.ПолеОрганизация,
		Форма.Отчет.Организация,
		Форма.Отчет.ВключатьОбособленныеПодразделения);
		
	ОрганизацияПриИзменении(Форма);
	
КонецПроцедуры

Процедура НастроитьПоОрганизации(Форма)
	
	СправкиРасчетыКлиентСервер.ОтметитьОтчетНеАктуальный(Форма);
	
	Отчет = Форма.Отчет;
	
	ПоддерживаетсяВыборВсяОрганизация = СправкиРасчетыКлиентСервер.ОтчетПоддерживаетВыборВсяОрганизация(Форма);
	
	Если Не ПоддерживаетсяВыборВсяОрганизация Тогда
		
		Форма.ПредставлениеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
			Отчет.Организация,
			Ложь);
		
		СправкиРасчетыКлиентСервер.УстановитьОрганизацияПредыдущееЗначение(Форма, Отчет.Организация);
		
	Иначе
			
		// Используется реквизит формы СоответствиеОрганизаций, заполняемый при инициализации формы подсистемой БухгалтерскиеОтчеты
		// Несмотря на свое название, он имеет тип Структура.
		
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			Форма.ПолеОрганизация, // магический ключ из СоответствиеОрганизаций
			Отчет.Организация,
			Отчет.ВключатьОбособленныеПодразделения);
		
		Форма.ПредставлениеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
			Отчет.Организация,
			Отчет.ВключатьОбособленныеПодразделения);
			
		СправкиРасчетыКлиентСервер.УстановитьОрганизацияПредыдущееЗначение(Форма, Форма.ПолеОрганизация);
		
	КонецЕсли;
	
	// От организации может зависеть особенность определения периода отчета.
	Форма.ДатаРегистрацииОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.Организация, "ДатаРегистрации");
	
	СправкиРасчетыКлиентСервер.НастроитьДиалогВыбораПериода(Форма);
	
	// Определим начало периода отчета.
	ИнформацияНалоговыйПериод = СправкиРасчетыКлиентСервер.ОпределитьПериодОтчета(Форма, Истина);
	
	// Отобразим информацию о налоговом периоде
	НастроитьЭлементИнформацияНалоговыйПериод(Форма, ИнформацияНалоговыйПериод);
	
КонецПроцедуры

Процедура НастроитьОтборПоОрганизации(Форма)
	
	Если Не БухгалтерскиеОтчетыКлиентСервер.КомпоновщикНастроекИнициализирован(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// В СправкиРасчеты.НастроитьОтборПоОрганизации() при смене организации очищаются значения
	// полей отбора, которые могут не соответствовать организации.
	// Это действие подсистема БухгалтерскиеОтчеты выполняет без фактического контроля,
	// соответствуют они или нет.
	
	БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПоПериоду

// Также вызывается из обработчика оповещения через СправкиРасчетыКлиент.ВыборПериода().
//
Процедура НастроитьЭлементИнформацияНалоговыйПериод(Форма, ИнформацияНалоговыйПериод) Экспорт
	
	ИнформированиеНалоговыйПериод.НастроитьЭлементИнформирования(
		Форма.Элементы,
		ИнформацияНалоговыйПериод,
		Форма.Элементы.Результат);
	
КонецПроцедуры

#КонецОбласти

#Область Группировки

// Для использования этой части служебного программного интерфейса в модуле менеджера
// должна быть реализована ГруппировкиЗапрещенныеФункциональнымиОпциями(),
// возвращающая перечень (массив) имен группировок, запрещенных функциональными опциями.

Процедура ИнициализироватьГруппировки(НастройкиГруппировок, КомпоновщикНастроек, ИмяОтчета) Экспорт
	
	Для Каждого Группировка Из НастройкиГруппировок Цикл
		Группировка.Очистить();
	КонецЦикла;
	
	ГруппировкиЗапрещенныеФункциональнымиОпциями = Отчеты[ИмяОтчета].ГруппировкиЗапрещенныеФункциональнымиОпциями();
	
	ЗапретитьГруппировки(КомпоновщикНастроек.ПользовательскиеНастройки, ГруппировкиЗапрещенныеФункциональнымиОпциями);
	
	ЗаполнитьГруппировки(НастройкиГруппировок, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПрименитьГруппировки(ПользовательскиеНастройки, НастройкиГруппировок) Экспорт
	
	// НастройкиГруппировок хранит несколько наборов (Групп) группировок - в том виде, как они отображаются на форме.
	// Сгруппируем их по идентификаторам пользовательских настроек - т.е. так, как они хранятся в пользовательских настройках.
	// В идеале, они должны совпадать один к одному - одна табличка на форме содержит одну пользовательскую настройку, а
	// другая - другую.
	ГруппыГруппировок = Новый Соответствие;
	Для Каждого НастройкаГруппировок Из НастройкиГруппировок Цикл
		
		Для Каждого ОписаниеГруппировки Из НастройкаГруппировок Цикл
			
			ОписаниеГруппы = ГруппыГруппировок[ОписаниеГруппировки.ИдентификаторГруппы];
			
			Если ОписаниеГруппы = Неопределено Тогда
				ОписаниеГруппы = Новый Соответствие;
				ГруппыГруппировок.Вставить(ОписаниеГруппировки.ИдентификаторГруппы, ОписаниеГруппы);
			КонецЕсли;
			
			КраткоеОписаниеГруппировки = Новый Структура;
			КраткоеОписаниеГруппировки.Вставить("Использование", ОписаниеГруппировки.Использование);
			КраткоеОписаниеГруппировки.Вставить("Индекс",        ОписаниеГруппы.Количество());
			
			ОписаниеГруппы.Вставить(ОписаниеГруппировки.Идентификатор, КраткоеОписаниеГруппировки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОписаниеГруппы Из ГруппыГруппировок Цикл
		
		Настройка = ПользовательскиеНастройки.Элементы.Найти(ОписаниеГруппы.Ключ);
		Если Настройка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Разместим элементы структуры настроек в отдельной коллекции,
		// порядок элементов в которой можно поменять (он не должен соответствовать 
		// порядку в Настройка.Структура).
		// Заодно отключим все группировки. Тогда ниже достаточно будет включить нужные.
		ЭлементыГруппировки = Новый Массив;
		Для Каждого ЭлементГруппировки Из Настройка.Структура Цикл
			ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
			ЭлементыГруппировки.Добавить(ЭлементГруппировки);
		КонецЦикла;
		
		// Выстроим элементы настройки в том же порядке, что и в группировках и включим.
		Для Каждого ЭлементГруппировки Из ЭлементыГруппировки Цикл
			
			ОписаниеГруппировки = ОписаниеГруппы.Значение[ЭлементГруппировки.ИдентификаторПользовательскойНастройки];
			Если ОписаниеГруппировки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеГруппировки.Использование Тогда
				ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
			КонецЕсли;
			
			ПравильныйИндекс = ОписаниеГруппировки.Индекс;
			ТекущийИндекс    = Настройка.Структура.Индекс(ЭлементГруппировки);
			Смещение = ПравильныйИндекс - ТекущийИндекс;
			
			Если Смещение <> 0 Тогда
				Настройка.Структура.Сдвинуть(ЭлементГруппировки, Смещение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПользовательскиеГруппировки(ПользовательскиеНастройки)
	
	ПользовательскиеГруппировки = Новый Массив;
	
	Для Каждого Настройка Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(Настройка) <> Тип("СтруктураНастроекКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Настройка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательскиеГруппировки.Добавить(Настройка);
			
	КонецЦикла;
	
	Возврат ПользовательскиеГруппировки;

КонецФункции

Процедура ЗапретитьГруппировки(ПользовательскиеНастройки, ЗапрещенныеГруппировки)
	
	Для Каждого Настройка Из ПользовательскиеГруппировки(ПользовательскиеНастройки) Цикл
		
		Для Каждого ЭлементГруппировки Из Настройка.Структура Цикл
			
			Если ТипЗнч(ЭлементГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЭлементГруппировки.Использование
				Или ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.УдаленПользователем Тогда
				Продолжить;
			КонецЕсли;
			
			// Соглашение: в одной группировке нет и запрещенных и разрешенных
			// Это важно, чтобы проще сохранять пользовательские настройки.
			Запрещена = Ложь;
			Для Каждого ПолеГруппировки Из ЭлементГруппировки.ПоляГруппировки.Элементы Цикл
				
				Если Не ПолеГруппировки.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗапрещенныеГруппировки.Найти(БухгалтерскиеОтчетыКлиентСервер.КореньПоля(ПолеГруппировки.Поле)) <> Неопределено Тогда
					Запрещена = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Запрещена Тогда
				ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.УдаленПользователем;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьГруппировки(НастройкиГруппировок, КомпоновщикНастроек)
	
	// Настроек группировок может быть несколько (это массив)
	// Разным элементам этого массива соответствуют разные пользовательские группировки
	// Предполагаем, что пользовательские группировки в коллекции пользовательских настроек всегда идут в правильном
	// порядке - от более общего ("шапки") к более частному ("таблице").
	
	Если Не ЗначениеЗаполнено(НастройкиГруппировок) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскиеГруппировки = ПользовательскиеГруппировки(КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Для ИндексГруппировки = 0 По ПользовательскиеГруппировки.ВГраница() Цикл
		
		Настройка = ПользовательскиеГруппировки[ИндексГруппировки];
		Если ИндексГруппировки > НастройкиГруппировок.ВГраница() Тогда
			// На случай, если в пользовательских настройках окажется больше настроек группировок,
			// чем полей на форме.
			НастройкаГруппировок = НастройкиГруппировок[0];// Сложим в первую
		Иначе
			НастройкаГруппировок = НастройкиГруппировок[ИндексГруппировки];
		КонецЕсли;
		
		Для Каждого ЭлементГруппировки Из Настройка.Структура Цикл
			
			Если ТипЗнч(ЭлементГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЭлементГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.УдаленПользователем Тогда
				// Запрещен
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ЭлементГруппировки.ИдентификаторПользовательскойНастройки) Тогда
				ЭлементГруппировки.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			// Ищем поля компоновки, чтобы заполнить таблицу настроек группировок
			ПолеГруппировки = Неопределено;
			Для Каждого ПолеГруппировки Из ЭлементГруппировки.ПоляГруппировки.Элементы Цикл
				
				Если Не ПолеГруппировки.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				Прервать;
			КонецЦикла;
			
			Если ПолеГруппировки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(ПолеГруппировки.Поле);
			
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НастройкаГруппировок.Добавить();
			
			НоваяСтрока.Использование       = (ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен);
			НоваяСтрока.Представление       = ДоступноеПоле.Заголовок;
			НоваяСтрока.Идентификатор       = ЭлементГруппировки.ИдентификаторПользовательскойНастройки;
			НоваяСтрока.ИдентификаторГруппы = Настройка.ИдентификаторПользовательскойНастройки;
			НоваяСтрока.Имя                 = Строка(ДоступноеПоле.Поле);
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаДанныхФормаМенеджерОтчета

Функция СформироватьОтчет(Форма, СобытияФормированияОтчета = Неопределено) Экспорт
	
	БухгалтерскиеОтчеты.ИнициализироватьКомпоновщикНастроекПриФормированииОтчета(Форма);
	
	Если Не Форма.ПроверитьЗаполнение() Тогда
		Возврат ПоложительныйРезультатВыполнения();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеИспользовать");
	
	ПодготовитьНастройкиВыполненияОтчета(Форма.Отчет.КомпоновщикНастроек.Настройки, Форма.ВыводитьЗаголовок, Форма.ВыводитьПодвал);
	
	ИмяОбработчикаЗаполнения = "ЗаполнитьПользовательскиеНастройкиДаннымиФормы";
	ПараметрыЗаполнения      = Неопределено;
	Если ОпределенОбработчикСобытия(СобытияФормированияОтчета, ИмяОбработчикаЗаполнения, ПараметрыЗаполнения) Тогда
	
		ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
		
		Отчеты[ИмяОтчета].ЗаполнитьПользовательскиеНастройкиДаннымиФормы(
			Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки,
			ПараметрыЗаполнения);
		
	КонецЕсли;
	
	Контекст = КонтекстФормированияОтчета(Форма);
	
	// В отличие от стандартных отчетов, справки-расчеты запускаем всегда в фоне,
	// поскольку они формируются не так часто и обычно содержат много данных.
	ДлительныеОперации.ОтменитьВыполнениеЗадания(Форма.ИдентификаторЗадания);
	Форма.ИдентификаторЗадания = Неопределено;
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
		Контекст,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма));
	
	Форма.АдресХранилища       = РезультатВыполнения.АдресХранилища;
	Форма.ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОтобразитьРезультатОтчета(Форма);
	КонецЕсли;
	
	Форма.Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ОтобразитьРезультатОтчета(Форма) Экспорт

	РезультатВыполнения = ПолучитьИзВременногоХранилища(Форма.АдресХранилища);
	Форма.Результат         = РезультатВыполнения.Результат;
	Форма.ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	Форма.ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

Функция КонтекстФормированияОтчета(Форма)
	
	ИдентификаторОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
	
	// Инициализация коллекции
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторОтчета",       ИдентификаторОтчета);
	Контекст.Вставить("СхемаКомпоновкиДанных",     ПолучитьИзВременногоХранилища(Форма.СхемаКомпоновкиДанных));
	Контекст.Вставить("НастройкиКомпоновкиДанных", Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	Контекст.Вставить("МакетОформления",           Форма.МакетОформления);	
	
	Контекст.Вставить("РежимРасшифровки",          Форма.Отчет.РежимРасшифровки);
	Контекст.Вставить("ДанныеРасшифровки",         Форма.ДанныеРасшифровки);
	
	Контекст.Вставить("Организация",               Форма.Отчет.Организация);
	Контекст.Вставить("НачалоПериода",             Форма.Отчет.НачалоПериода);
	Контекст.Вставить("КонецПериода",              Форма.Отчет.КонецПериода);
	
	Контекст.Вставить("ПредставлениеПериода",      Форма.ПредставлениеПериодаЗаголовок);
	Контекст.Вставить("ИнформацияНалоговыйПериод", ""); // может быть заполнено ниже
	
	Контекст.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	Контекст.Вставить("ВыводитьЕдиницуИзмерения",          Форма.ВыводитьЕдиницуИзмерения);
	Контекст.Вставить("ОтветственноеЛицо",                 Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	
	Контекст.Вставить("НаборПоказателей", Новый Массив);
	Контекст.Вставить("ПоказательБУ",     Ложь);
	Контекст.Вставить("ПоказательНУ",     Ложь);
	Контекст.Вставить("ПоказательПР",     Ложь);
	Контекст.Вставить("ПоказательВР",     Ложь);
	Контекст.Вставить("НазваниеНабораСуммовыхПоказателей", "");
	
	Контекст.Вставить("ВыполнениеОтчета", Новый Структура);// сведения, которые обработчики формирования отчета передают друг другу
	
	// Настройка данными формы
	Если СправкиРасчетыКлиентСервер.ОтчетПоддерживаетВыборВсяОрганизация(Форма) Тогда
		Контекст.Вставить("ВключатьОбособленныеПодразделения", Форма.Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;
	
	Контекст.НаборПоказателей = Отчеты[ИдентификаторОтчета].ПолучитьНаборПоказателей();
	
	ПоддерживаемыеНаборыСуммовыхПоказателей = Отчеты[ИдентификаторОтчета].ПоддерживаемыеНаборыСуммовыхПоказателей();
	Если Не ЗначениеЗаполнено(ПоддерживаемыеНаборыСуммовыхПоказателей) Тогда
		
		НомерНабораСуммовыхПоказателей = СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейПоУмолчанию();
		
	ИначеЕсли ПоддерживаемыеНаборыСуммовыхПоказателей.Количество() = 1 Тогда
		
		НомерНабораСуммовыхПоказателей = ПоддерживаемыеНаборыСуммовыхПоказателей[0];
		
	Иначе
		
		// Форма отчета должна предусматривать выбор набора показателей.
		// Выбранный набор передается через свойство отчета НаборПоказателейОтчета.
		// В зависимости от применяемой системы налогообложения некоторые наборы могут быть отключены.
		РазрешенныеНаборыСуммовыхПоказателей = РазрешенныеНаборыСуммовыхПоказателей(ПоддерживаемыеНаборыСуммовыхПоказателей);
		
		НомерНабораСуммовыхПоказателей = Форма.Отчет.НаборПоказателейОтчета;
		Если ЗначениеЗаполнено(РазрешенныеНаборыСуммовыхПоказателей) 
			И РазрешенныеНаборыСуммовыхПоказателей.Найти(НомерНабораСуммовыхПоказателей) = Неопределено Тогда
			НомерНабораСуммовыхПоказателей = РазрешенныеНаборыСуммовыхПоказателей[0];
		КонецЕсли;
		
		Если РазрешенныеНаборыСуммовыхПоказателей.Количество() > 1 Тогда
			Контекст.НазваниеНабораСуммовыхПоказателей = СправкиРасчетыКлиентСервер.НазваниеНабораСуммовыхПоказателей(НомерНабораСуммовыхПоказателей);
		КонецЕсли;
		
	КонецЕсли;
		
	СправкиРасчетыКлиентСервер.УстановитьСоставНабораСуммовыхПоказателей(Контекст, НомерНабораСуммовыхПоказателей);
	Если СправкиРасчетыКлиентСервер.ЭтоНаборСуммовыхПоказателейНалоговыйУчет(НомерНабораСуммовыхПоказателей) Тогда
		Контекст.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры;
	КонецЕсли;
	
	Если СправкиРасчетыКлиентСервер.ОтчетЗаЦелыйНалоговыйПериод(Форма)
		И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Форма.Отчет.Организация, Форма.Отчет.КонецПериода) Тогда
		
		ИнформацияНалоговыйПериод = НалоговыйУчет.ИнформацияНалоговыйПериод(Форма.Отчет.КонецПериода, Форма.Отчет.Организация);
		
		Если ИнформацияНалоговыйПериод <> Неопределено Тогда
			Контекст.ИнформацияНалоговыйПериод = ИнформацияНалоговыйПериод.Заголовок;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Контекст;
	
КонецФункции

Функция ПоложительныйРезультатВыполнения()
	
	Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	
КонецФункции

Процедура ПодготовитьНастройкиВыполненияОтчета(Настройки, ВыводитьЗаголовок, ВыводитьПодвал)
	
	Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
КонецПроцедуры

Функция РазрешенныеНаборыСуммовыхПоказателей(ПоддерживаемыеНаборы)
	
	Возврат ПоддерживаемыеНаборы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеРезультатаОтчета // Все методы вызываются из модулей менеджеров отчетов (без контекста формы, на сервере)

#Область МеханизмСобытий

Функция ОпределенОбработчикСобытия(СобытияФормированияОтчета, ИмяСобытия, ПараметрыСобытия)
	
	Если ТипЗнч(СобытияФормированияОтчета) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СобытияФормированияОтчета.Свойство(ИмяСобытия, ПараметрыСобытия);
		
КонецФункции

#КонецОбласти

#Область Шапка

Функция СинонимОтчета(Контекст)
	
	// В отличие от используемого в форме названия варианта, синоним отчета включает слова "Справка-расчет".
	
	Возврат Метаданные.Отчеты[Контекст.ИдентификаторОтчета].Синоним;
	
КонецФункции

Функция ЗаголовокОтчета(Контекст) Экспорт
	
	ПредставлениеПериодаСПримечанием = Контекст.ПредставлениеПериода;
	ДополнитьПериодОтчетаПримечанием(ПредставлениеПериодаСПримечанием, Контекст);
	
	Возврат СправкиРасчетыКлиентСервер.ТекстЗаголовка(
		СинонимОтчета(Контекст),
		ПредставлениеПериодаСПримечанием,
		"",
		Контекст.НазваниеНабораСуммовыхПоказателей);
	
КонецФункции

// Выводит шапку отчета.
//
// Параметры:
//  Результат		 - ТабличныйДокумент - табличный документ, в который выводится отчет
//  Контекст		 - Структура - см. КонтекстФормированияОтчета
//  ФиксироватьШапку - Булево - Истина, если результат содержит в явном виде шапку отчета, которую можно зафиксировать.
//                              При вызове ФиксироватьШапку может потребоваться из ПослеКомпоновкиМакета()
//                              вызвать ДобавитьФиксациюПервойТаблицы(), если шапка отчета нарисована в макетах схемы.
//                              Необходимость использовать явную фиксацию связана с тем, что автоматическая фиксация
//                              средствами СКД в версии 8.3.11 не выполняется, если задан предопределенный макет заголовка.
//                              
//
Процедура ВывестиШапкуОтчета(Результат, Контекст, ФиксироватьШапку = Ложь) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	
	// Организация
	ОбластьВывода = Макет.ПолучитьОбласть("Организация");
	ОбластьВывода.Параметры.НазваниеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
		Контекст.Организация,
		Контекст.ВключатьОбособленныеПодразделения);
	Результат.Вывести(ОбластьВывода);
	
	// Название отчета
	ОбластьВывода = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьВывода.Параметры.ЗаголовокОтчета = ЗаголовокОтчета(Контекст);
	Результат.Вывести(ОбластьВывода);
	
	// Организация и название образуют заголовок
	ОбластьЗаголовка = Результат.Область(1, , Результат.ВысотаТаблицы);
	ОбластьЗаголовка.Имя = "Заголовок";
	
	// Единица измерения
	Если Контекст.Свойство("ВыводитьЕдиницуИзмерения")
		И Контекст.ВыводитьЕдиницуИзмерения Тогда
		// Единица измерения - рубль
		ОбластьВывода = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьВывода);
	КонецЕсли;
	
	Если ФиксироватьШапку Тогда
		Контекст.ВыполнениеОтчета.Вставить("ФиксацияШапки", Результат.ВысотаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет количество строк шапки, определенной макетом схемы, для фиксации высоты первой таблицы.
// Вызывается из обработчика ПослеКомпоновкиМакета().
//
// Параметры:
//  Контекст		 - Структура - см. КонтекстФормированияОтчета
//  МакетКомпоновки	 - МакетКомпоновкиДанных - скомпонованный макет.
//
Процедура ДобавитьФиксациюПервойТаблицы(Контекст, МакетКомпоновки) Экспорт
	
	Если Не Контекст.ВыполнениеОтчета.Свойство("ФиксацияШапки") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл
		
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			
			КоличествоСтрокМакета = МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество();
			
			Контекст.ВыполнениеОтчета.ФиксацияШапки = Контекст.ВыполнениеОтчета.ФиксацияШапки + КоличествоСтрокМакета;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьФиксациюСверху(Результат, ВыполнениеОтчета)
	
	Если ВыполнениеОтчета.Свойство("ФиксацияШапки") Тогда
		Результат.ФиксацияСверху = ВыполнениеОтчета.ФиксацияШапки;
	Иначе
		// Справка-расчет обычно содержит повторяющиеся таблицы, поэтому фиксация сверху неприменима.
		Результат.ФиксацияСверху = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Примечания // (Сноски)

Функция ТребуетсяДополнитьПериодОтчетаПримечанием(Контекст) Экспорт
	
	Возврат Не ПустаяСтрока(Контекст.ИнформацияНалоговыйПериод);
	
КонецФункции

Процедура ДополнитьПериодОтчетаПримечанием(ПредставлениеПериода, Контекст, НомерПримечания = 1) Экспорт
		
	Если Не ТребуетсяДополнитьПериодОтчетаПримечанием(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьСловоСсылкойНаПримечание(ПредставлениеПериода, НомерПримечания);
	
КонецПроцедуры

#КонецОбласти

Функция ОформитьРезультатОтчета(Результат, Контекст) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(Контекст.ИдентификаторОтчета, Результат);
	
	СчетчикПримечаний = 0;
	
	Если ТребуетсяДополнитьПериодОтчетаПримечанием(Контекст) Тогда
		
		СправкиРасчеты.ДобавитьПримечание(Результат, Контекст.ИнформацияНалоговыйПериод, СчетчикПримечаний);
		
	КонецЕсли;
	
	УстановитьФиксациюСверху(Результат, Контекст.ВыполнениеОтчета);
	
	// Справка-расчет обычно содержит заведомо небольшое количество выводимых колонок, поэтому фиксация слева избыточна:
	// пользы от нее нет, а выглядит некрасиво, может пересекать заголовок и подписи.
	Результат.ФиксацияСлева = 0;
	
	Возврат СчетчикПримечаний;
	
КонецФункции

#КонецОбласти

