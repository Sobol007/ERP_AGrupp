////////////////////////////////////////////////////////////////////////////////
// Классификаторы (клиент-сервер)
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Ищет и изменяет строки классификаторов.
//
// Параметры:
//  Форма		 - УправляемаяФорма - управляемая форма.
//  КлючСтроки	 - Строка - Ключ строки.
//  Включен		 - Булево - Признак включения.
//
Процедура НайтиИзменитьСтрокиКлассификаторов(Форма, КлючСтроки, Включен) Экспорт
	
	СтрокиКлассификатора = НайтиСтрокиКлассификаторов(Форма, Новый Структура("КлючСтроки", КлючСтроки));	
	Для каждого СтрокаКлассификатора Из СтрокиКлассификатора Цикл
		Если ЗначениеЗаполнено(СтрокаКлассификатора.ДополнительныйРеквизит) Тогда
			ЗначениеРеквизита = Форма[КлючСтроки];
			
			СтрокаКлассификатора.Включен 		   = ЗначениеЗаполнено(ЗначениеРеквизита);	
			СтрокаКлассификатора.ЗначениеРеквизита = ЗначениеРеквизита;	
			
		Иначе
			СтрокаКлассификатора.Включен = Включен;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Ищет и изменяет строки классификаторов по значению.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Управляемая форма.
//  Значение - Ссылка - Значение классификатора.
//  Включен	 - Булево - Признак включения.
//
Процедура НайтиИзменитьСтрокиКлассификаторовПоЗначению(Форма, Значение, Включен) Экспорт
	
	СтрокиКлассификатора = НайтиСтрокиКлассификаторов(Форма, Новый Структура("Значение", Значение));	
	Если СтрокиКлассификатора.Количество()>0 Тогда
		Для каждого СтрокаКлассификатора Из СтрокиКлассификатора Цикл
			СтрокаКлассификатора.Включен = Включен;	
		КонецЦикла;
	Иначе
		ДобавитьЗначениеКлассификатора(Форма, Значение, Включен);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Ищет и изменяет строки классификаторов пакетно.
//
// Параметры:
//  Форма				 - УправляемаяФорма - управляемая форма.
//  КлючКлассификатора	 - Строка - Ключ классификатора.
//
Процедура НайтиИзменитьСтрокиКлассификаторовПакетно(Форма, КлючКлассификатора) Экспорт
	
	СтрокиКлассификатора = НайтиСтрокиКлассификаторов(Форма, Новый Структура("КлючКлассификатора", КлючКлассификатора));	
	ЭтоНовоеЗначение = Истина;
	Для каждого СтрокаКлассификатора Из СтрокиКлассификатора Цикл
		Если СтрокаКлассификатора.Значение = Форма[КлючКлассификатора] Тогда
			СтрокаКлассификатора.Включен = Истина;	
			ЭтоНовоеЗначение = Ложь;
		Иначе	
			СтрокаКлассификатора.Включен = Ложь;	
		КонецЕсли;

	КонецЦикла;
	Если ЭтоНовоеЗначение Тогда
		ДобавитьЗначениеКлассификатора(Форма, Форма[КлючКлассификатора], Истина);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Функция НайтиСтрокиКлассификаторов(Форма, СтруктураПоиска)
	
	Возврат Форма.CRM_ТаблицаКлассификаторов.НайтиСтроки(СтруктураПоиска);	
	
КонецФункции

// Обрабатывает навигационную ссылку тега классификаторов.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - управляемая форма.
//  Элемент				 - ЭлементФормы - Элемент формы.
//  НавигационнаяСсылка	 - Строка - Навигационная ссылка.
//  СтандартнаяОбработка - Булево - Стандартная обработка.
//
Процедура ОбработкаНавигационнойСсылкиТегаКлассификаторов(Форма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	НайтиИзменитьСтрокиКлассификаторов(Форма, Элемент.Имя, Ложь);	
	
	Форма.Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры

Процедура ДобавитьЗначениеКлассификатора(Форма, Значение, Включен)
	
	СтруктураЗначения = CRM_КлассификаторыВызовСервера.СтруктураСтрокиТаблицыКлассификаторовПоЗначению(Значение);
	Если СтруктураЗначения<>Неопределено Тогда
		СтрокаЗначения =  Форма.CRM_ТаблицаКлассификаторов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтруктураЗначения);
		СтрокаЗначения.Включен = Включен;
	КонецЕсли;
		
КонецПроцедуры

#Область ВспомогательныеПроцедурыФункции 

#Область РаботаСПериодамиИДатами

// Функция - Рассчитать начало периода
//
// Параметры:
//  КонецПериода	 - Дата	 - Дата окончания, от которой будет рассчитана дата начала периода.
//  Интервал		 - Число - Интервал.
//  Периодичность	 - ПеречислениеСсылка - Значение перечисления "Периодичность".	
// 
// Возвращаемое значение:
//	Дата	- Дата начала периода.
//
Функция РассчитатьНачалоПериода(КонецПериода, Интервал, Периодичность) Экспорт
	Возврат CRM_ОбщегоНазначенияКлиентСервер.РассчитатьНачалоПериода(КонецПериода, Интервал, Периодичность);
КонецФункции // РассчитатьНачалоПериода()

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СКД

Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	Возврат CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПараметр(Настройки, Параметр);
КонецФункции

#КонецОбласти

#КонецОбласти