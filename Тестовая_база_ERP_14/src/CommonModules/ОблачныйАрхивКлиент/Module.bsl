///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ОблачныйАрхив".
// ОбщийМодуль.ОблачныйАрхивКлиент.
//
// Все клиентские процедуры и функции для работы с "Облачным архивом".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму подключения сервиса Облачный архив.
//
Процедура ПодключитьСервисОблачныйАрхив() Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму(
		"Обработка.ОблачныйАрхив.Форма.МастерПодключенияСервиса", // Идентификатор.
		Неопределено, // Параметры открытия.
		Неопределено, // Владелец.
		"", // Уникальность.
		, // Окно.
		Неопределено, // Навигационная ссылка.
		, // ОписаниеОповещенияОЗакрытии.
		РежимОткрытияОкнаФормы.Независимый); // РежимОткрытияОкна.

КонецПроцедуры

// Вызывается из панели администрирования БСП. Сохраняет файл настроек Агента резервного копирования,
//  после чего произойдет создание резервной копии в ближайшее время.
//
Процедура СозданиеРезервнойКопии() Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму(
		"Обработка.ОблачныйАрхив.Форма.МастерСозданияРезервнойКопии", // Идентификатор.
		Неопределено, // Параметры открытия.
		Неопределено, // Владелец.
		"", // Уникальность.
		, // Окно.
		Неопределено, // Навигационная ссылка.
		, // ОписаниеОповещенияОЗакрытии.
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); // РежимОткрытияОкна.

КонецПроцедуры

// Вызывается после стандартного резервного копирования БСП.
// Активирует Агента резервного копирования, чтобы он отправил указанный файл в облако.
//
// Параметры:
//  ИмяФайла             - Строка - Полное имя файла, который необходимо выгрузить;
//  ОтсрочкаСтартаСекунд - Число - число секунд, после которого начнется выгрузка архива в облако.
//
Процедура ВыгрузитьФайлВОблако(ИмяФайла, ОтсрочкаСтартаСекунд = 30) Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	ОблачныйАрхивВызовСервера.ВыгрузитьФайлВОблако(ИмяФайла, ОтсрочкаСтартаСекунд);

КонецПроцедуры

// Вызывается из панели администрирования БСП. Открывает форму восстановления из резервной копии.
//
Процедура ВосстановлениеИзРезервнойКопии() Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму(
		"Обработка.ОблачныйАрхив.Форма.РаботаСРезервнымиКопиями", // Идентификатор.
		Неопределено, // Параметры открытия.
		Неопределено, // Владелец.
		"", // Уникальность.
		, // Окно.
		Неопределено, // Навигационная ссылка.
		, // ОписаниеОповещенияОЗакрытии.
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); // РежимОткрытияОкна.

КонецПроцедуры

// Вызывается из панели администрирования БСП. Открывает форму настроек Облачного архива.
//
Процедура НастройкаРезервногоКопирования() Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму(
		"Обработка.ОблачныйАрхив.Форма.НастройкаОблачногоАрхива", // Идентификатор.
		Неопределено, // Параметры открытия.
		Неопределено, // Владелец.
		"", // Уникальность.
		, // Окно.
		Неопределено, // Навигационная ссылка.
		, // ОписаниеОповещенияОЗакрытии.
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); // РежимОткрытияОкна.

КонецПроцедуры

// Централизованно обрабатывает нажатие всех гиперссылок.
//
// Параметры:
//  Форма                                    - УправляемаяФорма - форма, где произошло нажатие на гиперссылку;
//  Элемент                                  - ЭлементФормы - элемент формы, где произошло нажатие на гиперссылку;
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - идентификатор навигационной ссылки;
//  СтандартнаяОбработка                     - Булево - сюда передается признак выполнения стандартной обработки;
//  Параметры                                - Структура - произвольные параметры.
//
Процедура ОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Параметры) Экспорт

	СтандартнаяОбработка = Истина;

	ТипСтрока = Тип("Строка");

	НавигационнаяСсылкаЛокальная = НавигационнаяСсылкаФорматированнойСтроки;
	Если СтрЗаканчиваетсяНа(НавигационнаяСсылкаЛокальная, "\") Тогда
		НавигационнаяСсылкаЛокальная = Лев(НавигационнаяСсылкаЛокальная, СтрДлина(НавигационнаяСсылкаЛокальная) - 1);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(НавигационнаяСсылкаЛокальная, "/") Тогда
		НавигационнаяСсылкаЛокальная = Лев(НавигационнаяСсылкаЛокальная, СтрДлина(НавигационнаяСсылкаЛокальная) - 1);
	КонецЕсли;

	Если (НавигационнаяСсылкаЛокальная = "backup1C:InstallAgentOnThisPC") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ОблачныйАрхив.Форма.МастерПодключенияСервиса");

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:UpdateAgentOnThisPC") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ОблачныйАрхив.Форма.МастерОбновленияАгента");

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:HowToDeactivateAgents") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ОблачныйАрхив.Форма.ИнструкцияПоДеактивацииАгентов");

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:OpenWebPersonalAccount_Backups") Тогда
		// С целью безопасности логин и пароль не должны передаваться с сервера на клиента.
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			"https://backup.1c.ru/arhivnye-kopii?needAccessToken=true",
			НСтр("ru = 'Резервные копии сервиса Облачный архив';
				|en = '1C:Cloud Archive backups'"));

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:OpenWebPersonalAccount_DeactivateAgent") Тогда
		// С целью безопасности логин и пароль не должны передаваться с сервера на клиента.
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			"https://backup.1c.ru/dostupnye-opcii?needAccessToken=true",
			НСтр("ru = 'Деактивация Агентов резервного копирования сервиса Облачный архив';
				|en = 'Backup agent deactivation of 1C:Cloud Archive'"));

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:OpenWebPersonalAccount_BuyAgent") Тогда
		// С целью безопасности логин и пароль не должны передаваться с сервера на клиента.
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			"https://portal.1c.ru/application/list/1C-Cloud-backup?needAccessToken=true",
			НСтр("ru = 'Личный кабинет клиента сервиса Облачный архив';
				|en = 'Personal account of 1C:Cloud Archive service user'"));

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:OpenActiveSessionsList") Тогда
		СтандартнаяОбработка = Ложь;
		СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(, Форма);

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:OpenWebAboutCloudArchive") Тогда
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://portal.1c.ru/applications/2");

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:TechSupport_BackupsList") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВложений = ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылкаЛокальная);
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Облачный архив: список резервных копий';
				|en = '1C:Cloud Archive: backup list'"), // Тема
			"", // Тело
			"backup", // Получатель
			МассивВложений); // Вложения

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:TechSupport_ConnectionMaster_Login") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВложений = ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылкаЛокальная);
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Облачный архив: мастер подключения (логин)';
				|en = '1C:Cloud Archive: connection wizard (login)'"), // Тема
			"", // Сообщение
			"backup", // Получатель
			МассивВложений); // Вложения

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:TechSupport_ConnectionMaster_BackupAgentInstall") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВложений = ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылкаЛокальная);
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Облачный архив: мастер подключения (установка Агента резервного копирования)';
				|en = '1C:Cloud Archive: connection wizard (backup agent installation)'"), // Тема
			"", // Сообщение
			"backup", // Получатель
			МассивВложений); // Вложения

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:TechSupport_ConnectionMaster_BackupAgentInstall_Error") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВложений = ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылкаЛокальная);
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Облачный архив: мастер подключения (прочие ошибки)';
				|en = '1C:Cloud Archive: connection wizard (other errors)'"), // Тема
			"", // Сообщение
			"backup", // Получатель
			МассивВложений); // Вложения

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:TechSupport_BackupCreate_Error") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВложений = ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылкаЛокальная);
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Облачный архив: создание резервной копии';
				|en = '1C:Cloud Archive: create backup'"), // Тема
			"", // Сообщение
			"backup", // Получатель
			МассивВложений); // Вложения

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:TechSupport_Settings") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВложений = ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылкаЛокальная);
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Облачный архив: настройки';
				|en = '1C:Cloud Archive: settings'"), // Тема
			"", // Сообщение
			"backup", // Получатель
			МассивВложений); // Вложения

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:TechSupport_BackupAgentUpdateMaster_Update") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВложений = ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылкаЛокальная);
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Облачный архив: мастер обновления Агента резервного копирования (обновление)';
				|en = '1C:Cloud Archive: backup agent update wizard (update)'"), // Тема
			"", // Сообщение
			"backup", // Получатель
			МассивВложений); // Вложения

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:TechSupport_BackupAgentUpdateMaster_Update_Error") Тогда
		СтандартнаяОбработка = Ложь;
		МассивВложений = ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылкаЛокальная);
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Облачный архив: мастер обновления Агента резервного копирования (прочие ошибки)';
				|en = '1C:Cloud Archive: backup agent update wizard (other errors)'"), // Тема
			"", // Сообщение
			"backup", // Получатель
			МассивВложений); // Вложения

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:EventLog_BackupAgentInstall")
			ИЛИ (НавигационнаяСсылкаЛокальная = "backup1C:EventLog_BackupAgentUpdate")
			ИЛИ (НавигационнаяСсылкаЛокальная = "backup1C:EventLog_BackupCreate")
			ИЛИ (НавигационнаяСсылкаЛокальная = "backup1C:EventLog_Settings")
			ИЛИ (НавигационнаяСсылкаЛокальная = "backup1C:EventLog_BackupRestore")
			ИЛИ (НавигационнаяСсылкаЛокальная = "backup1C:BackupAgentEventLog") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("СобытиеЖурналаРегистрации, ДатаНачала, ДатаОкончания",
			ОблачныйАрхивКлиентСервер.ПолучитьСписокВсехСобытийЖурналаРегистрации(),
			ОбщегоНазначенияКлиент.ДатаСеанса() - 15*60,
			ОбщегоНазначенияКлиент.ДатаСеанса() + 1*60);
		ОткрытьФорму(
			"Обработка.ЖурналРегистрации.Форма", // Имя формы.
			ПараметрыОткрытия, // Параметры открытия.
			Форма, // Форма.
			"", // Уникальность.
			, // Окно.
			, // НавигационнаяСсылка.
			, // ОписаниеОповещенияОЗакрытии.
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); // РежимОткрытияОкна

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:EditBackupScheduler") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		ПараметрыОткрытия.Вставить("КлючНазначенияИспользования", "НастройкаРасписания"); // Идентификатор.
		ПараметрыОткрытия.Вставить("РасписаниеАвтоматическогоРезервногоКопирования", Параметры.РасписаниеАвтоматическогоРезервногоКопирования);
		ОткрытьФорму(
			"Обработка.ОблачныйАрхив.Форма.НастройкаРасписания",
			ПараметрыОткрытия,
			Форма,
			"", // Уникальность.
			, // Окно.
			, // НавигационнаяСсылка.
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:BackupAgentUpdate_WhatIsNew") Тогда
		СтандартнаяОбработка = Ложь;
		Если Параметры.Свойство("ТекстЧтоНовогоВВерсии")
				И ТипЗнч(Параметры.ТекстЧтоНовогоВВерсии) = ТипСтрока
				И НЕ ПустаяСтрока(Параметры.ТекстЧтоНовогоВВерсии) Тогда
			ПараметрыОткрытия = Новый Структура("Заголовок, ТекстХТМЛ",
				НСтр("ru = 'Что нового в версии';
					|en = 'What''s new in the version'"),
				Параметры.ТекстЧтоНовогоВВерсии);
			ОткрытьФорму(
				"Обработка.ОблачныйАрхив.Форма.ПросмотрХТМЛ",
				ПараметрыОткрытия,
				Форма,
				"",
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;

	ИначеЕсли (НавигационнаяСсылкаЛокальная = "backup1C:BackupAgentUpdate_HowToUpdate") Тогда
		СтандартнаяОбработка = Ложь;
		Если Параметры.Свойство("ТекстПорядокОбновления")
				И ТипЗнч(Параметры.ТекстПорядокОбновления) = ТипСтрока
				И НЕ ПустаяСтрока(Параметры.ТекстПорядокОбновления) Тогда
			ПараметрыОткрытия = Новый Структура("Заголовок, ТекстХТМЛ",
				НСтр("ru = 'Порядок обновления';
					|en = 'Update procedure'"),
				Параметры.ТекстПорядокОбновления);
			ОткрытьФорму(
				"Обработка.ОблачныйАрхив.Форма.ПросмотрХТМЛ",
				ПараметрыОткрытия,
				Форма,
				"",
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интеграция подсистем библиотеки.

#Область ПанельАдминистрированияБСП

// Выполняет все действия события "ПриОткрытии" формы "ПанельАдминистрированияБСП".
//
// Параметры:
//  Форма - УправляемаяФорма - форма "ПанельАдминистрированияБСП".
//
Процедура ПанельАдминистрированияБСП_ПриОткрытии(Форма) Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Форма.ПараметрыОблачногоАрхива) = Тип("Структура") Тогда
		Если Форма.ПараметрыОблачногоАрхива.Свойство("ИдентификаторФоновогоЗадания")
				И (Форма.ПараметрыОблачногоАрхива.ИдентификаторФоновогоЗадания <> Неопределено) Тогда
			// Фоновое задание не успело завершиться в ПриСозданииНаСервере.
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьСостояниеОблачногоАрхива", 5, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняет все действия события "ПриОткрытии" формы "ПанельАдминистрированияБСП".
//
// Параметры:
//  Форма      - УправляемаяФорма - форма "ПанельАдминистрированияБСП";
//  ИмяСобытия - Произвольный;
//  Параметр   - Произвольный;
//  Источник   - Произвольный.
//
Процедура ПанельАдминистрированияБСП_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	#Если НЕ ВебКлиент Тогда

	Если ИмяСобытия = "ОблачныйАрхив:УстановленАгент" Тогда
		ПараметрыОкруженияСервер = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
		ИнформацияОКлиенте = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
		АктивацииАгентовКопирования = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("АктивацииАгентовКопирования", ИмяКомпьютера());
		ПанельАдминистрированияБСП_ПереключитьНаПравильнуюСтраницу(
			Форма,
			Новый Структура("ПараметрыОкруженияСервер, ИнформацияОКлиенте, АктивацииАгентовКопирования",
				ПараметрыОкруженияСервер,
				ИнформацияОКлиенте,
				АктивацииАгентовКопирования));
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры

// Выполняет переключение на правильную закладку сервиса "Облачный архив" формы "ПанельАдминистрированияБСП".
// Вызывается с клиента.
//
// Параметры:
//  Форма     - УправляемаяФорма - форма "ПанельАдминистрированияБСП";
//  Параметры - Структура - структура с ключами:
//   * ПараметрыОкруженияСервер    - Структура - описание см. в ХранилищаНастроек.НастройкиОблачногоАрхива;
//   * ИнформацияОКлиенте          - Структура - описание см. в ХранилищаНастроек.НастройкиОблачногоАрхива;
//   * АктивацииАгентовКопирования - Структура - описание см. в ХранилищаНастроек.НастройкиОблачногоАрхива.
//
Процедура ПанельАдминистрированияБСП_ПереключитьНаПравильнуюСтраницу(Форма, Параметры) Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.ВозможнаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;

	ТекущаяДатаДляПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();

	ПараметрыОкруженияСервер = Параметры.ПараметрыОкруженияСервер;
	// ПараметрыОкруженияСервер.ПодсистемаНастроена:
	//  = 0 - подсистема не настроена;
	//  = 1 - подсистема настроена, но ни на одном компьютере не установлен агент копирования;
	//  = 2 - подсистема настроена.

	Если Форма.СпособРезервногоКопирования = "На локальном компьютере" Тогда

		Элементы.СтраницыРезервноеКопированиеИВосстановление.ТекущаяСтраница = Элементы.СтраницаНаЛокальномКомпьютере;

		// Если подсистема была отключена не более недели назад, то вывести сообщение.
		// Проверить, остались ли есть активные агенты резервного копирования, невозможно (т.к. при отключении ФО
		//  также отключается регламентное задание по проверке активированности Агентов резервного копирования).
		//  Поэтому надпись выводить всегда.
		Если (ПараметрыОкруженияСервер.ПодсистемаНастроена = 0)
				И (ПараметрыОкруженияСервер.ПредыдущееСостояниеПодсистемаНастроена <> 0) Тогда // Выключили
			Если (ПараметрыОкруженияСервер.ДатаИзмененияПодсистемаНастроена + 7*24*60*60) >= ОбщегоНазначенияКлиент.ДатаУниверсальная() Тогда
				Элементы.ГруппаНеобходимоОтключитьОблачныйАрхив.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Форма.СпособРезервногоКопирования = "1С:Облачный архив" Тогда

		Элементы.СтраницыРезервноеКопированиеИВосстановление.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхив;

		ИнформацияОКлиенте = Параметры.ИнформацияОКлиенте;
		АктивацииАгентовКопирования = Параметры.АктивацииАгентовКопирования;

		// Алгоритм на клиенте и на сервере: Агент установлен и активирован?
		Если ИнформацияОКлиенте.ЭтоАдминистраторWindows Тогда
			Если (ПараметрыОкруженияСервер.ПодсистемаНастроена = 1) ИЛИ (ПараметрыОкруженияСервер.ПодсистемаНастроена = 2) Тогда
				Если (ИнформацияОКлиенте.АгентКопированияУстановлен = Истина) Тогда
					Если (ИнформацияОКлиенте.АгентКопированияАктивирован_ЕстьФайлыСертификатов = Истина)
							И (АктивацииАгентовКопирования.АгентКопированияАктивирован_ДанныеВебСервисов = Истина)
							И (АктивацииАгентовКопирования.СрокОкончанияПодписки >= ТекущаяДатаДляПроверки) Тогда
						Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивРаботает;
					Иначе
						Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивНеПодключено;
					КонецЕсли;
				Иначе
					Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивПодключеноНаДругомКомпьютере;
				КонецЕсли;
			Иначе // 0
				Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивНеПодключено;
			КонецЕсли;
		Иначе
			Элементы.ДекорацияОблачныйАрхивОшибки.Заголовок = НСтр("ru = 'Для подключения, выполнения резервного копирования и настройки Агента резервного копирования необходимы права администратора Windows на этом компьютере.';
																	|en = 'You must have Windows Administrator permissions on this computer to connect to the backup agent, configure it and create backups.'");
			Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивОшибки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выполняет изменение способа резервного копирования в форме "ПанельАдминистрированияБСП".
// Вызывается на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - форма "ПанельАдминистрированияБСП".
//
Процедура ПанельАдминистрированияБСП_СпособРезервногоКопированияПриИзменении(Форма) Экспорт

	// Проверить техническую возможность работы с облачным архивом.
	Если НЕ ОблачныйАрхивКлиентПовтИсп.ВозможнаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	ОблачныйАрхивВызовСервера.ПанельАдминистрированияБСП_СпособРезервногоКопированияПриИзменении(Форма.СпособРезервногоКопирования);

	#Если НЕ ВебКлиент Тогда

	ПараметрыОкруженияСервер = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
	ИнформацияОКлиенте = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
	АктивацииАгентовКопирования = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("АктивацииАгентовКопирования", ИмяКомпьютера());
	ПанельАдминистрированияБСП_ПереключитьНаПравильнуюСтраницу(
		Форма,
		Новый Структура("ПараметрыОкруженияСервер, ИнформацияОКлиенте, АктивацииАгентовКопирования",
			ПараметрыОкруженияСервер,
			ИнформацияОКлиенте,
			АктивацииАгентовКопирования));

	#КонецЕсли

КонецПроцедуры

// Выполняет изменение способа резервного копирования в форме "ПанельАдминистрированияБСП".
// Вызывается на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - форма "ПанельАдминистрированияБСП".
//
Процедура ПанельАдминистрированияБСП_ПроверитьСостояниеОблачногоАрхива(Форма) Экспорт

	Если НЕ ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	#Если НЕ ВебКлиент Тогда

	ТипСтруктура = Тип("Структура");

	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьСостояниеОблачногоАрхива");

	ИдентификаторФоновогоЗадания = Форма.ПараметрыОблачногоАрхива.ИдентификаторФоновогоЗадания;
	Форма.ПараметрыОблачногоАрхива.ТекущийСчетчикПроверкиФоновогоЗадания = Форма.ПараметрыОблачногоАрхива.ТекущийСчетчикПроверкиФоновогоЗадания + 1;
	Если Форма.ПараметрыОблачногоАрхива.ТекущийСчетчикПроверкиФоновогоЗадания > 12 Тогда // Прошло более 2 минут - прервать
		// Завершить фоновое задание и отключить обработчики ожидания
		ОблачныйАрхивВызовСервера.ОтменитьФоновоеЗадание(ИдентификаторФоновогоЗадания);
		ТекстСообщения = НСтр("ru = 'Произошли ошибки при подключении к подсистеме Облачный архив:
			|Сбор данных превысил допустимое время.';
			|en = 'Errors occurred while connecting to the 1C:Cloud Archive subsystem:
			|Data collection exceeded the allowed time.'");
		Форма.ПараметрыОблачногоАрхива.Вставить("ОшибкиПодключения", ТекстСообщения);
		Форма.Элементы.ДекорацияОблачныйАрхивОшибки.Заголовок = Форма.ПараметрыОблачногоАрхива.ОшибкиПодключения;
		Форма.Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Форма.Элементы.СтраницаОблачныйАрхивОшибки;
	Иначе
		Если ИдентификаторФоновогоЗадания <> Неопределено Тогда
			Прогресс = ОблачныйАрхивВызовСервера.ДлительныеОперацииПрочитатьПрогресс(ИдентификаторФоновогоЗадания);
			// Ключи переменной Прогресс:
			//  * Процент;
			//  * Текст;
			//  * ДополнительныеПараметры - Структура с ключами:
			//    ** КодСостояния       - Число (код ошибки) или Строка ("Завершено без ошибок", "Завершено с ошибками");
			//    ** ОписаниеРезультата - Неопределено (если "Завершено без ошибок") или текст ошибки;
			Если ТипЗнч(Прогресс) = ТипСтруктура Тогда
				Если Прогресс.Свойство("Процент") И Прогресс.Свойство("Текст") Тогда
					Форма.ПрогрессПроверкиОблачногоАрхива = Прогресс.Процент;
					Форма.Элементы.ДекорацияПрогрессПроверкиОблачногоАрхиваОписание.Заголовок = Прогресс.Текст;
				КонецЕсли;
				Если Прогресс.Свойство("ДополнительныеПараметры")
						И (ТипЗнч(Прогресс.ДополнительныеПараметры) = ТипСтруктура) Тогда
					Если Прогресс.ДополнительныеПараметры.Свойство("КодСостояния") Тогда
						Если Прогресс.ДополнительныеПараметры.КодСостояния = "Завершено без ошибок" Тогда // Идентификатор.
							СтруктураНастроек = Новый Структура("ПараметрыОкруженияСервер, ИнформацияОКлиенте, АктивацииАгентовКопирования",
								Неопределено,
								ИмяКомпьютера(),
								ИмяКомпьютера());
							ПолученныеНастройки = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива(СтруктураНастроек);
							ПанельАдминистрированияБСП_ПереключитьНаПравильнуюСтраницу(
								Форма,
								ПолученныеНастройки);
						ИначеЕсли Прогресс.ДополнительныеПараметры.КодСостояния = "Завершено с ошибками" Тогда // Идентификатор.
							Форма.Элементы.ДекорацияОблачныйАрхивОшибки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Произошли ошибки при подключении к подсистеме Облачный архив:
									|%1';
									|en = 'Errors occurred when connecting to the 1C:Cloud Archive subsystem:
									|%1'"),
								Прогресс.ДополнительныеПараметры.ОписаниеРезультата);
							Форма.Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Форма.Элементы.СтраницаОблачныйАрхивОшибки;
						Иначе // В процессе сбора данных
							Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьСостояниеОблачногоАрхива", 10, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ПриНачалеРаботыСистемы

// Процедура вызывается из модуля управляемого приложения,
//  затем ОблачныйАрхивКлиент.ПриНачалеРаботыСистемы,
//  затем ОблачныйАрхивВызовСервера.ПриНачалеРаботыСистемы,
//  затем ОблачныйАрхив.ПриНачалеРаботыСистемы,
//  затем ОблачныйАрхивПереопределяемый.ПриНачалеРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	ТипЧисло = Тип("Число");

	Если ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда

		ОтключитьОбработчикОжидания("ОблачныйАрхив_ЗаполнитьПараметрыКлиента_ПервыйЗапуск");
		ИнтервалСекунд = 2*60; // Через 2 минуты
		ОблачныйАрхивКлиентПереопределяемый.ПереопределитьВремяПервогоЗаполненияПараметровКлиента(ИнтервалСекунд);
		Если (ТипЗнч(ИнтервалСекунд) <> ТипЧисло)
				ИЛИ (ИнтервалСекунд <= 0) Тогда
			ИнтервалСекунд = 2*60; // Через 2 минуты
		КонецЕсли;
		ПодключитьОбработчикОжидания("ОблачныйАрхив_ЗаполнитьПараметрыКлиента_ПервыйЗапуск", ИнтервалСекунд, Истина);

		// В "ОблачныйАрхив_ЗаполнитьПараметрыКлиента_ПервыйЗапуск" и потом в "ОблачныйАрхив_ЗаполнитьПараметрыКлиента_Регулярно" будет происходить
		//  пересчет расписания создания автоматических резервных копий на ближайшие 12 часов.
		// Непосредственно проверка, что надо делать резервную копию, будет происходить по рассчитанным данным 1 раз в минуту.
		// Расписание будет храниться в глобальной переменной ПараметрыПриложения["ИнтернетПоддержкаПользователей.ОблачныйАрхив.РасписаниеСозданияРезервныхКопий"].

	КонецЕсли;

	ОблачныйАрхивВызовСервера.ПриНачалеРаботыСистемы();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Расписание

// Процедура по расписанию создания резервных копий создает напоминания в глобальной переменной
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.ОблачныйАрхив.РасписаниеСозданияРезервныхКопий"].
//
// Параметры:
//  ВремяНачала - Дата - дата, от которой плюс 12 часов надо увидеть расписания создания резервных копий.
//
Процедура ЗаполнитьРасписаниеСозданияРезервныхКопий(ВремяНачала = Неопределено) Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипСписокЗначений = Тип("СписокЗначений");

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.ОблачныйАрхив.РасписаниеСозданияРезервныхКопий"; // Идентификатор.
	Если ВремяНачала = Неопределено Тогда
		ВремяНачала = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	лкРасписаниеСозданияРезервныхКопий = ПолучитьРасписаниеСозданияРезервныхКопий(ВремяНачала);
	Если ТипЗнч(лкРасписаниеСозданияРезервныхКопий) = ТипСписокЗначений Тогда
		ОтключитьОбработчикОжидания("ПроверитьНеобходимостьВыходаДляСозданияРезервнойКопииВОблачныйАрхив_Регулярно");
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, лкРасписаниеСозданияРезервныхКопий);
		ПодключитьОбработчикОжидания("ПроверитьНеобходимостьВыходаДляСозданияРезервнойКопииВОблачныйАрхив_Регулярно", 5*60, Ложь);
	Иначе
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, Новый СписокЗначений);
	КонецЕсли;

КонецПроцедуры

// Функция рассчитывает расписание создания резервных копий по данным регистра сведений "НастройкиОблачногоАрхиваНаЛокальномКомпьютере"
//  и заполняет список значений, который будет потом сохранен в глобальной переменной
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.ОблачныйАрхив.РасписаниеСозданияРезервныхКопий"].
//
// Параметры:
//  ВремяНачала - Дата - дата, от которой плюс 12 часов надо увидеть расписания создания резервных копий.
//
// Возвращаемое значение:
//   СписокЗначений - Список значений с параметрами:
//    * Представление - Строка - ИмяКомпьютера, где должно сработать расписание;
//    * Значение      - Дата - дата выполнения расписания.
//
Функция ПолучитьРасписаниеСозданияРезервныхКопий(ВремяНачала)

	Результат = ОблачныйАрхивВызовСервера.ПолучитьРасписаниеСозданияРезервныхКопий(ВремяНачала);

	Возврат Результат;

КонецФункции

// Процедура проверяет напоминания в глобальной переменной
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.ОблачныйАрхив.РасписаниеСозданияРезервныхКопий"],
//  и если есть активные напоминания, то задает вопрос о выходе из программы.
//
// Параметры:
//  ВремяНачала - Дата - время, от которого отсчитывается +- 15 минут для проверки, что необходимо выйти из программы.
//
Процедура ПроверитьНеобходимостьВыходаДляСозданияРезервнойКопииВОблачныйАрхив(ВремяНачала) Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипСписокЗначений = Тип("СписокЗначений");

	Если ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда

		ДатаДляПроверкиОТ = ВремяНачала - 15*60; // От текущего момента минус 15 минут.
		ДатаДляПроверкиДО = ВремяНачала + 15*60; // От текущего момента плюс 15 минут.

		Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
			ПараметрыПриложения = Новый Соответствие;
		КонецЕсли;
		ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.ОблачныйАрхив.РасписаниеСозданияРезервныхКопий"; // Идентификатор.
		лкРасписаниеСозданияРезервныхКопий = ПараметрыПриложения.Получить(ИмяПараметраПриложения);
		Если ТипЗнч(лкРасписаниеСозданияРезервныхКопий) = ТипСписокЗначений Тогда
			СписокНапоминаний = Новый СписокЗначений;
			// 1. Проверить, есть ли напоминания, что необходимо сделать резервные копии.
			// Список - отсортированный по дате. При нахождении первого элемента с датой, больше текущей, можно прерывать проверку.
			Для Каждого ТекущийЭлемент Из лкРасписаниеСозданияРезервныхКопий Цикл
				Если ТекущийЭлемент.Значение > ДатаДляПроверкиДО Тогда
					Прервать;
				КонецЕсли;
				Если (ТекущийЭлемент.Значение >= ДатаДляПроверкиОТ)
						И (ТекущийЭлемент.Значение <= ДатаДляПроверкиДО) Тогда
					СписокНапоминаний.Добавить(ТекущийЭлемент.Значение, ТекущийЭлемент.Представление);
				КонецЕсли;
			КонецЦикла;
			СписокНапоминаний.СортироватьПоЗначению(НаправлениеСортировки.Возр);

			// 2. Есть активные напоминания? Открыть форму предложения выйти из программы.
			Если СписокНапоминаний.Количество() > 0 Тогда

				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить("ВыйтиИзПрограммы", НСтр("ru = 'Выйти из программы';
														|en = 'Exit the application'"));
				Кнопки.Добавить("НапомнитьПозже", НСтр("ru = 'Напомнить позже';
														|en = 'Remind later'"));

				// Найти самое первое расписание. Если время просрочено, то написать "через 1 минуту",
				//  иначе написать, через сколько минут начнется резервное копирование.
				// Агент резервного копирования делает несколько попыток копирования, поэтому просрочка расписания не означает,
				//  что резервная копия не будет сделана.
				Если НачалоМинуты(СписокНапоминаний[0].Значение) - НачалоМинуты(ВремяНачала) <= 1*60 Тогда
					КогдаНачнетсяКопирование = НСтр("ru = '1 минуту';
													|en = '1 min'");
				ИначеЕсли НачалоМинуты(СписокНапоминаний[0].Значение) - НачалоМинуты(ВремяНачала) <= 4*60 Тогда
					КогдаНачнетсяКопирование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 минуты';
							|en = '%1 minutes'"),
						(НачалоМинуты(СписокНапоминаний[0].Значение) - НачалоМинуты(ВремяНачала)) / 60);
				ИначеЕсли НачалоМинуты(СписокНапоминаний[0].Значение) - НачалоМинуты(ВремяНачала) <= 20*60 Тогда
					КогдаНачнетсяКопирование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 минут';
							|en = '%1 minutes'"),
						(НачалоМинуты(СписокНапоминаний[0].Значение) - НачалоМинуты(ВремяНачала)) / 60);
				Иначе
					КогдаНачнетсяКопирование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 мин';
							|en = '%1 min'"),
						(НачалоМинуты(СписокНапоминаний[0].Значение) - НачалоМинуты(ВремяНачала)) / 60);
				КонецЕсли;

				ОписаниеОповещение = Новый ОписаниеОповещения("ПроверитьНеобходимостьВыходаДляСозданияРезервнойКопииВОблачныйАрхивПослеВыбора", ЭтотОбъект);
				// http://new.gramota.ru/spravka/trudnosti?layout=item&id=36_64
				ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Согласно расписанию 1С:Облачного архива, резервное копирование должно быть выполнено через %1.
						|
						|Для выполнения резервного копирования надо выйти из программы.';
						|en = 'According to 1C:Cloud Archive schedule, your data will be backed up in %1.
						|
						|Exit the application to back up.'"),
					КогдаНачнетсяКопирование);
				ПоказатьВопрос(
					ОписаниеОповещение, // ОписаниеОповещенияОЗавершении.
					ТекстОповещения, // ТекстВопроса.
					Кнопки, // Кнопки.
					30, // Таймаут.
					"ВыйтиИзПрограммы", // КнопкаПоУмолчанию.
					НСтр("ru = 'Резервное копирование 1С:Облачный архив по расписанию';
						|en = '1C:Cloud Archive backup on schedule'"), // Заголовок.
					"ВыйтиИзПрограммы"); // КнопкаТаймаута.

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьВыходаДляСозданияРезервнойКопииВОблачныйАрхивПослеВыбора(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ВыполнитьРезервноеКопирование = РезультатВопроса = "ВыйтиИзПрограммы" Или РезультатВопроса = КодВозвратаДиалога.Таймаут;

	Если ВыполнитьРезервноеКопирование Тогда
		СоединенияИБКлиент.УстановитьПризнакРаботаПользователейЗавершается(Истина);
		СоединенияИБКлиент.ЗавершитьРаботуЭтогоСеанса(Ложь); // Не выводить вопрос. Здесь же вызовется и ЗавершитьРаботуСистемы.
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтправкаСообщенийВТехподдержку

// Функция возвращает массив структур, описывающих файлы вложения.
//
// Параметры:
//  НавигационнаяСсылка - Строка - Навигационная ссылка, по которой происходит обращение в техподдержку.
//
Функция ПодготовитьСписокВложенийДляТехподдержки(НавигационнаяСсылка)

	// Необходимо заполнить массив структурами с ключами: Представление и ИмяФайла или Текст или Адрес.
	// Описание тут: ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВСлужбуТехническойПоддержки.
	//	Вложения - Массив - массив значений типа Структура, файлы вложений.
	//		Важно: допускаются только текстовые вложения (*.txt);
	//		Поля структуры элемента вложения:
	//			* Представление - Строка - представление вложения. Например:
	//				"Вложение 1.txt";
	//			Одно из полей:
	//			* ИмяФайла - Строка - полное имя файла вложения;
	//			* Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
	//			* Текст - Строка - текст вложения;
	//		К вложениям автоматически добавляется техническая информация о программе.
	Результат = Новый Массив;

	#Если НЕ ВебКлиент Тогда

	КлючОбъекта = Новый Структура;
	КлючОбъекта.Вставить("ПараметрыОкруженияСервер", "");
	КлючОбъекта.Вставить("ИнформацияОКлиенте", ИмяКомпьютера());
	КлючОбъекта.Вставить("НастройкиАгентаКопированияКлиент", ИмяКомпьютера());
	КлючОбъекта.Вставить("ПараметрыАвторизацииИПП", "");

	// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
	ВсеНастройки = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива(КлючОбъекта);

	// Дополнить настройки.
	ПараметрыОкруженияСервер         = ВсеНастройки.ПараметрыОкруженияСервер;
	ПараметрыОкруженияСервер.Вставить("РазрешенаРаботаСОблачнымАрхивом", ОблачныйАрхивКлиентПовтИсп.РазрешенаРаботаСОблачнымАрхивом());

	ИнформацияОКлиенте               = ВсеНастройки.ИнформацияОКлиенте;
	ИнформацияОКлиенте.Вставить("ПоддерживаетсяРаботаСWSH", ОблачныйАрхивКлиентПовтИсп.ПоддерживаетсяРаботаСWSH());

	НастройкиАгентаКопированияКлиент = ВсеНастройки.НастройкиАгентаКопированияКлиент;

	ПараметрыАвторизацииИПП          = ВсеНастройки.ПараметрыАвторизацииИПП;

	ВложитьАрхивЛоговИспользования    = Ложь;
	ВложитьАрхивЛоговУстановки        = Ложь;
	ВложитьВыгрузкуЖурналаРегистрации = Ложь;
	ВложитьРасписаниеАгентаРезервногоКопирования = Ложь;

	СписокФайловЛоговИспользования = "";
	СписокФайловЛоговУстановки = "";

	Если НавигационнаяСсылка = "backup1C:TechSupport_BackupsList" Тогда
		// Список резервных копий.
		// Дополнительно:
		// - расписание Агента резервного копирования;
		// - архив логов Агента резервного копирования;
		// - Выгрузка журнала регистрации.
		ВложитьАрхивЛоговИспользования = Истина;
		ВложитьРасписаниеАгентаРезервногоКопирования = Истина;
		ВложитьВыгрузкуЖурналаРегистрации = Истина;
	ИначеЕсли НавигационнаяСсылка = "backup1C:TechSupport_ConnectionMaster_Login" Тогда
		// Мастер подключения (логин).
		// Дополнительно:
		// - Выгрузка журнала регистрации.
		ВложитьВыгрузкуЖурналаРегистрации = Истина;
	ИначеЕсли НавигационнаяСсылка = "backup1C:TechSupport_ConnectionMaster_BackupAgentInstall" Тогда
		// Мастер подключения (установка).
		// Дополнительно:
		// - архив логов установки Агента резервного копирования;
		// - архив логов Агента резервного копирования;
		// - Выгрузка журнала регистрации.
		ВложитьАрхивЛоговИспользования = Истина;
		ВложитьАрхивЛоговУстановки     = Истина;
		ВложитьВыгрузкуЖурналаРегистрации = Истина;
	ИначеЕсли НавигационнаяСсылка = "backup1C:TechSupport_ConnectionMaster_BackupAgentInstall_Error" Тогда
		// Мастер подключения (прочее).
		// Дополнительно:
		// - архив логов установки Агента резервного копирования;
		// - архив логов Агента резервного копирования;
		// - Выгрузка журнала регистрации.
		ВложитьАрхивЛоговИспользования = Истина;
		ВложитьАрхивЛоговУстановки     = Истина;
		ВложитьВыгрузкуЖурналаРегистрации = Истина;
	ИначеЕсли НавигационнаяСсылка = "backup1C:TechSupport_BackupAgentUpdateMaster_Update" Тогда
		// Мастер подключения (установка).
		// Дополнительно:
		// - архив логов установки Агента резервного копирования;
		// - архив логов Агента резервного копирования;
		// - Выгрузка журнала регистрации.
		ВложитьАрхивЛоговИспользования = Истина;
		ВложитьАрхивЛоговУстановки     = Истина;
		ВложитьВыгрузкуЖурналаРегистрации = Истина;
	ИначеЕсли НавигационнаяСсылка = "backup1C:TechSupport_BackupAgentUpdateMaster_Update_Error" Тогда
		// Мастер подключения (прочее).
		// Дополнительно:
		// - архив логов установки Агента резервного копирования;
		// - архив логов Агента резервного копирования;
		// - Выгрузка журнала регистрации.
		ВложитьАрхивЛоговИспользования = Истина;
		ВложитьАрхивЛоговУстановки     = Истина;
		ВложитьВыгрузкуЖурналаРегистрации = Истина;
	ИначеЕсли НавигационнаяСсылка = "backup1C:TechSupport_BackupCreate_Error" Тогда
		// Создание резервной копии.
		// Дополнительно:
		// - расписание Агента резервного копирования;
		// - архив логов Агента резервного копирования;
		// - Выгрузка журнала регистрации.
		ВложитьРасписаниеАгентаРезервногоКопирования = Истина;
		ВложитьАрхивЛоговИспользования = Истина;
		ВложитьВыгрузкуЖурналаРегистрации = Истина;
	ИначеЕсли НавигационнаяСсылка = "backup1C:TechSupport_Settings" Тогда
		// Настройки.
		// Дополнительно:
		// - архив логов Агента резервного копирования;
		// - Выгрузка журнала регистрации.
		ВложитьРасписаниеАгентаРезервногоКопирования = Истина;
		ВложитьАрхивЛоговИспользования = Истина;
		ВложитьВыгрузкуЖурналаРегистрации = Истина;
	КонецЕсли;

	лкКаталогВременныхФайлов = ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПоследнийСимвол(КаталогВременныхФайлов(), "\/");

	Если ВложитьАрхивЛоговИспользования = Истина Тогда

		// Получить список файлов.
		СписокФайловЛоговИспользования = "";

		лкКаталогЛогов = НастройкиАгентаКопированияКлиент.КаталогЛогов;

		МассивФайлов = НайтиФайлы(лкКаталогЛогов, "*.log", Ложь);

		// Взять 5 самых новых.
		СписокФайлов = Новый СписокЗначений;

		Для Каждого ТекущийФайл Из МассивФайлов Цикл
			Если ТекущийФайл.ЭтоФайл() Тогда
				СписокФайлов.Добавить(ТекущийФайл.ПолучитьУниверсальноеВремяИзменения(), ТекущийФайл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
		СписокФайлов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);

		Если СписокФайлов.Количество() > 0 Тогда
			ВсегоФайлов = Мин(5, СписокФайлов.Количество());
			СписокФайловЛоговИспользования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Найдено %1 файлов логов работы Агента резервного копирования.';
					|en = 'The %1 backup agent log files are found.'"),
				ВсегоФайлов);
			Для Каждого ТекущийФайл Из СписокФайлов Цикл
				Результат.Добавить(Новый Структура("Представление, ИмяФайла",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Результат работы Агента резервного копирования от %1.txt';
							|en = 'Backup agent operation result from %1.txt'"),
						Формат(ТекущийФайл.Значение, "ДФ='yyyyMMdd_HHmm'")),
					ТекущийФайл.Представление));
				ВсегоФайлов = ВсегоФайлов - 1;
				Если ВсегоФайлов <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	Если ВложитьАрхивЛоговУстановки = Истина Тогда

		// Получить список файлов.
		СписокФайловЛоговУстановки = "";

		лкКаталогАгента =
			лкКаталогВременныхФайлов
			+ ПолучитьРазделительПути()
			+ "backup1C"
			+ ПолучитьРазделительПути()
			+ "BackupAgent"
			+ ПолучитьРазделительПути()
			+ "Acronis" // Имя фирмы-производителя.
			+ ПолучитьРазделительПути()
			+ "Arch"; // Подкаталог инсталляторов.

		МассивФайлов = НайтиФайлы(лкКаталогАгента, "*.log", Ложь);

		// Взять 5 самых новых.
		СписокФайлов = Новый СписокЗначений;

		Для Каждого ТекущийФайл Из МассивФайлов Цикл
			Если ТекущийФайл.ЭтоФайл() Тогда
				СписокФайлов.Добавить(ТекущийФайл.ПолучитьУниверсальноеВремяИзменения(), ТекущийФайл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
		СписокФайлов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);

		Если СписокФайлов.Количество() > 0 Тогда
			ВсегоФайлов = Мин(5, СписокФайлов.Количество());
			СписокФайловЛоговУстановки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Найдено %1 файлов логов установки.';
					|en = 'The %1 installation log files are found.'"),
				ВсегоФайлов);
			Для Каждого ТекущийФайл Из СписокФайлов Цикл
				Результат.Добавить(Новый Структура("Представление, ИмяФайла",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Результат установки Агента резервного копирования от %1.txt';
							|en = 'Installation result of backup agent from %1.txt'"),
						Формат(ТекущийФайл.Значение, "ДФ='yyyyMMdd_HHmm'")),
					ТекущийФайл.Представление));
				ВсегоФайлов = ВсегоФайлов - 1;
				Если ВсегоФайлов <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	Если ВложитьРасписаниеАгентаРезервногоКопирования = Истина Тогда
		ТекстРасписания = НСтр("ru = 'Агент резервного копирования не запускался.';
								|en = 'Backup agent is not started.'");
		Если ИнформацияОКлиенте.АгентКопированияУстановлен Тогда
			лкКаталогУстановкиАгентаКопирования = ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования;
			Если ИнформацияОКлиенте.ЭтоАдминистраторWindows = Истина Тогда
				Если НЕ ПустаяСтрока(лкКаталогУстановкиАгентаКопирования) Тогда
					ОбъектОболочка = Новый COMОбъект("WScript.Shell");
					КодВозврата     = 0;
					ТекстРезультата = "";
					ТекстОшибки     = "";
					Попытка
						СтрокаКоманды =
							""""
							+ лкКаталогУстановкиАгентаКопирования
							+ ПолучитьРазделительПути()
							+ "BackupAgent.exe"
							+ """"
							+ " print_scheduler_report";
						Процесс         = ОбъектОболочка.Exec(СтрокаКоманды);
						ТекстРезультата = ОблачныйАрхивКлиентСервер.ПрочитатьПотокВыводаПроцесса(Процесс, "StdOut", 5000);
						ТекстОшибки     = ОблачныйАрхивКлиентСервер.ПрочитатьПотокВыводаПроцесса(Процесс, "StdErr", 500);
						КодВозврата     = Процесс.ExitCode;
						ТекстРасписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Результат проверки расписания:
								|%1
								|Текст ошибки:
								|%2
								|Код возврата: %3';
								|en = 'Schedule check result:
								|%1
								|Error text:
								|%2
								|Return code: %3'"),
							СокрЛП(ТекстРезультата),
							СокрЛП(ТекстОшибки),
							КодВозврата);
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстРасписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Результат проверки расписания (ошибка):
								|%1';
								|en = 'Schedule check result (error):
								|%1'")
								+ Символы.ПС,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					КонецПопытки;
				КонецЕсли;
			Иначе
				ТекстРасписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Агент резервного копирования версии %1 установлен на этом компьютере (%2),
						|но у пользователя нет прав администратора Windows для просмотра расписания.';
						|en = 'Backup agent of version %1 is installed on this computer (%2),
						|but the user does not have Windows Administrator permissions to view the schedule.'"),
					ИнформацияОКлиенте.ВерсияУстановленногоАгентаКопирования,
					ИмяКомпьютера());
			КонецЕсли;
		Иначе
			ТекстРасписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Агент резервного копирования не установлен на этом компьютере (%1).';
					|en = 'Backup agent is not installed on this computer (%1).'"),
				ИмяКомпьютера());
		КонецЕсли;
		Результат.Добавить(
			Новый Структура("Представление, Текст",
				НСтр("ru = 'Расписание Агента резервного копирования.txt';
					|en = 'Backup agent schedule.txt'"),
				ТекстРасписания));
	КонецЕсли;

	Если ВложитьВыгрузкуЖурналаРегистрации = Истина Тогда
		// Журнал регистрации представляет интерес:
		//  - только события, имеющие отношение к Облачному архиву;
		//  - все события ошибок в программном коде.
		ВсеСобытия = ОблачныйАрхивКлиентСервер.ПолучитьСписокВсехСобытийЖурналаРегистрации();
		РезультатВыгрузкиЖурналаРегистрации = ИнтернетПоддержкаПользователейВызовСервера.ВыгрузитьВсеСобытияЖурналаРегистрации(
			Новый Структура("ДатаНачала, ДатаОкончания, Событие",
				ОбщегоНазначенияКлиент.ДатаСеанса() - 1*60*60,
				ОбщегоНазначенияКлиент.ДатаСеанса() + 1*60*60,
				ВсеСобытия),
			Новый Структура("Архивировать", Ложь));
		Если ПустаяСтрока(РезультатВыгрузкиЖурналаРегистрации.ТекстОшибки) Тогда
			Результат.Добавить(
				Новый Структура("Представление, Адрес",
					НСтр("ru = 'Журнал регистрации (все события).txt';
						|en = 'Event log (all events).txt'"),
					РезультатВыгрузкиЖурналаРегистрации.АдресВременногоХранилищаФайла));
		Иначе
			Результат.Добавить(
				Новый Структура("Представление, Текст",
					НСтр("ru = 'Журнал регистрации (ошибка).txt';
						|en = 'Event log (error).txt'"),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка выгрузки журнала регистрации:
							|%1';
							|en = 'Event log export error: 
							|%1'"),
						РезультатВыгрузкиЖурналаРегистрации.ТекстОшибки)));
		КонецЕсли;
	КонецЕсли;

	ПредставлениеПараметровРаботыОблачногоАрхива = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '----- ПараметрыОкруженияСервер -----
			|%1
			|
			|----- ИнформацияОКлиенте -----
			|%2
			|
			|----- НастройкиАгентаКопированияКлиент -----
			|%3
			|
			|----- ПараметрыАвторизацииИПП -----
			|%4
			|
			|----- Файлы логов работы -----
			|%5
			|
			|----- Файлы логов установки -----
			|%6
			|
			|----- Текст расписания Агента резервного копирования -----
			|%7';
			|en = '----- ПараметрыОкруженияСервер -----
			|%1
			|
			|----- ИнформацияОКлиенте -----
			|%2
			|
			|----- НастройкиАгентаКопированияКлиент -----
			|%3
			|
			|----- ПараметрыАвторизацииИПП -----
			|%4
			|
			|----- Operation log files -----
			|%5
			|
			|----- Installation log files -----
			|%6
			|
			|----- Backup agent schedule text -----
			|%7'")
			+ Символы.ПС
			+ Символы.ПС,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПараметрыОкруженияСервер, ": ", Символы.ПС),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ИнформацияОКлиенте, ": ", Символы.ПС),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(НастройкиАгентаКопированияКлиент, ": ", Символы.ПС),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПараметрыАвторизацииИПП, ": ", Символы.ПС),
		?(ВложитьАрхивЛоговИспользования = Истина, СписокФайловЛоговИспользования, НСтр("ru = 'Не вложены';
																						|en = 'Not attached'")), // Файлы логов работы.
		?(ВложитьАрхивЛоговУстановки = Истина, СписокФайловЛоговУстановки, НСтр("ru = 'Не вложены';
																				|en = 'Not attached'")), // Файлы логов установки.
		?(ВложитьРасписаниеАгентаРезервногоКопирования = Истина, ТекстРасписания, НСтр("ru = 'Не вложено';
																						|en = 'Not attached'"))); // Текст расписания.

	Результат.Добавить(Новый Структура("Представление, Текст",
		НСтр("ru = 'Параметры работы Облачного архива';
			|en = '1C:Cloud Archive parameters'"),
		ПредставлениеПараметровРаботыОблачногоАрхива));

	#КонецЕсли

	Если Результат.Количество() = 0 Тогда
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Скрипты

// Запускает строку команды, предварительно сохраняя ее в командном файле, что уменьшит количество ошибок с двойными кавычками.
//
// Параметры:
//  СтрокаКоманды      - Строка - командная строка;
//  ТекущийКаталог     - Строка - каталог запуска;
//  КонтекстВыполнения - Структура - описание см. ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций().
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//    * КодВозврата - Число - Код возврата;
//    * ПотокВывода - Строка - Поток вывода stdout;
//    * ПотокОшибок - Строка - Поток вывода stderr;
//    * ТекстКомандногоФайла - Строка - содержимое выполняемого командного файла.
//
Функция ВыполнитьСтрокуКоманды(СтрокаКоманды, ТекущийКаталог, КонтекстВыполнения = Неопределено) Экспорт

	ТипСтруктура = Тип("Структура");

	Т1 = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ЗаписыватьВЖурналРегистрации = Ложь;
	Если ТипЗнч(КонтекстВыполнения) <> ТипСтруктура Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("КодВозврата", -1);
	Результат.Вставить("ПотокВывода", "");
	Результат.Вставить("ПотокОшибок", "");
	Результат.Вставить("ТекстКомандногоФайла", "");

	#Если НЕ ВебКлиент Тогда

#Область ЗапускПриложения

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхивКлиентСервер.ВыполнитьСтрокуКоманды/ЗапускКомандногоФайла", // Идентификатор.
		НСтр("ru = 'ОблачныйАрхивКлиентСервер.Выполнение командной строки / Запуск командного файла';
			|en = 'ОблачныйАрхивКлиентСервер. Run command line/Execute command file'"));

		// При вызове КомандаСистемы() могут быть сложности с большим количеством кавычек.
		// Поэтому лучше сохранить команду в командный файл и запустить его.
		ИмяКомандногоФайла = ПолучитьИмяВременногоФайла("cmd");
		ИмяФайлаЛога       = ПолучитьИмяВременногоФайла("stdout.log");
		ИмяФайлаОшибок     = ПолучитьИмяВременногоФайла("stderr.err");
		ТекстКомандногоФайла = Новый ТекстовыйДокумент;
		ТекстКомандногоФайла.ДобавитьСтроку("@echo off");
		ТекстКомандногоФайла.ДобавитьСтроку(
			СтрокаКоманды
			+ "  > " + """" + ИмяФайлаЛога + """"
			+ " 2> " + """" + ИмяФайлаОшибок + """");
		ТекстКомандногоФайла.ДобавитьСтроку("exit /b %errorlevel%"); // Вернуть код возврата команды.
		ТекстКомандногоФайла.Записать(ИмяКомандногоФайла, "cp866", Символы.ПС);
		Результат.Вставить("ТекстКомандногоФайла", ТекстКомандногоФайла.ПолучитьТекст());

		ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина; // Необходимо для получения потока вывода.
		ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Ложь;
		ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Ложь;
		РезультатЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(ИмяКомандногоФайла, ПараметрыЗапускаПрограммы);
		Результат.Вставить("КодВозврата", РезультатЗапускаПрограммы.КодВозврата);

		ПотокВывода = "";
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаЛога, , , , Ложь);
			ПотокВывода = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПотокВывода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать поток вывода по причине:
					|%1';
					|en = 'Cannot read the output stream due to:
					|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		Результат.Вставить("ПотокВывода", ПотокВывода);

		ПотокОшибок = "";
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОшибок, , , , Ложь);
			ПотокОшибок = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПотокОшибок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать поток ошибок по причине:
					|%1';
					|en = 'Cannot read the error stream due to:
					|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		Результат.Вставить("ПотокОшибок", ПотокОшибок);

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Запуск командного файла.
			|Строка команды: %1
			|Код возврата: %2
			|Содержимое командного файла:
			|%ТекстКомандногоФайла%
			|Поток вывода:
			|%ПотокВывода%
			|Поток ошибок:
			|%ПотокОшибок%';
			|en = 'Command file launch.
			|Command string: %1
			|Return code: %2
			|Command file content:
			|%ТекстКомандногоФайла%
			|Output stream:
			|%ПотокВывода%
			|Error stream: 
			|%ПотокОшибок%'"),
		СтрокаКоманды,
		Результат.КодВозврата);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстКомандногоФайла%", Результат.ТекстКомандногоФайла);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПотокВывода%", Результат.ПотокВывода);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПотокОшибок%", Результат.ПотокОшибок);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		0,
		ТекстСообщения,
		Неопределено);

#КонецОбласти

#Область УдалениеВременныхФайлов

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхивКлиентСервер.ВыполнитьСтрокуКоманды/УдалитьВременныеФайлы", // Идентификатор.
		НСтр("ru = 'ОблачныйАрхивКлиентСервер.Выполнение командной строки / Удаление временных файлов';
			|en = 'ОблачныйАрхивКлиентСервер. Run command line / Delete temporary files'"));

		Попытка
			УдалитьФайлы(ИмяКомандногоФайла);
			УдалитьФайлы(ИмяФайлаЛога);
			УдалитьФайлы(ИмяФайлаОшибок);
			ПодробноеСообщение = НСтр("ru = 'Удаление временных файлов прошло успешно';
										|en = 'Temporary files successfully deleted'");
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеСообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		0,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удаление временных файлов.
				|Имя командного файла: %1
				|Имя файла лога: %2
				|Имя файла ошибок: %3
				|Подробности:
				|%4';
				|en = 'Deleting temporary files.
				|Command file name: %1
				|Log file name: %2
				|Error file name: %3
				|Details:
				|%4'"),
			ИмяКомандногоФайла,
			ИмяФайлаЛога,
			ИмяФайлаОшибок,
			ПодробноеСообщение),
		Неопределено);

#КонецОбласти

	#Иначе

	ИнтернетПоддержкаПользователейКлиентСервер.ЗарегистрироватьРезультатВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхивКлиентСервер.ВыполнитьСтрокуКоманды/ЗапускВВебКлиенте", // Идентификатор.
		НСтр("ru = 'ОблачныйАрхивКлиентСервер.Выполнение командной строки / Запуск в веб-клиенте';
			|en = 'ОблачныйАрхивКлиентСервер. Run command line/Start in web-client'"),
		0,
		НСтр("ru = 'Запуск в веб-клиенте запрещен';
			|en = 'Cannot launch in web client'"),
		Неопределено);

	#КонецЕсли

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда
		Т2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru = 'БИП:ОблачныйАрхив.Работа с внешними утилитами';
				|en = 'ISL:CloudArchive.Work with external utilities'"), // ИмяСобытия
			НСтр("ru = 'Облачный архив. Работа с внешними утилитами. Запуск произвольной команды';
				|en = '1C:Cloud Archive. Work with external utilities. Start of arbitrary command'"), // ИдентификаторШага
			"Информация", // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(Т2 - Т1), // Данные
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
				КонтекстВыполнения,
				Истина,
				"ПодробноПоШагам",
				0), // Комментарий
			ОблачныйАрхивВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
