////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Признак использования библиотеки интернет поддержки пользователей
//
// Возвращаемое значение:
//  Булево - Истина, если используется библиотека интернет поддержки пользователей.
//
Функция ИспользуетсяИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ОбменСКонтрагентамиКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	
	Если Использование = Неопределено Тогда
		
		Использование = Ложь;
		Если Подключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском() Тогда
			ОшибкаОбращенияКВебСервису = Ложь;
			Использование = Подключение1СТакскомКлиент.КонфигурацияЗарегистрированаВСервисе1СТакском(ОшибкаОбращенияКВебСервису);
			Если ОшибкаОбращенияКВебСервису Тогда
				Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаДляПросмотра - ДокументСсылка.ЭлектронныйДокументИсходящий, ДокументСсылка.ЭлектронныйДокументВходящий,
//     СправочникСсылка.ЭДПрисоединенныеФайлы, ОпределяемыйТип.ОснованияЭлектронныхДокументов - ссылка на объект для просмотра электронного документа.
//  ПараметрыФормы - Структура - дополнительные параметры просмотра.
//  ВладелецФормы  - УправляемаяФорма - форма, из которой производится открытие.
//
Процедура ОткрытьЭДДляПросмотра(СсылкаДляПросмотра, ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаДляПросмотра) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ТипСсылкиДляПросмотра = ТипЗнч(СсылкаДляПросмотра);
	Если ТипСсылкиДляПросмотра = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ИмяФормы = "Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД";
		ПараметрыФормы.Вставить("Ключ", СсылкаДляПросмотра);
		
	ИначеЕсли ТипСсылкиДляПросмотра = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяФормы = "Документ.ЭлектронныйДокументВходящий.Форма.ФормаПросмотраЭД";
		ПараметрыФормы.Вставить("Ключ", СсылкаДляПросмотра);
		
	Иначе
		ФормаПросмотра = ОбменСКонтрагентамиСлужебныйВызовСервера.ФормаПросмотраЭлектронногоДокумента(СсылкаДляПросмотра);
		Если ФормаПросмотра = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяФормы = ФормаПросмотра.ИмяФормы;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПросмотра.ПараметрыФормы, Истина);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

// Получение настроек ЭДО и параметров сертификатов.
//
// Параметры:
//  ОбработчикОповещения		 - ОписаниеОповещения - обработчик оповещения.
//  СписокНастроекЭДО			 - Массив - список настроек ЭДО.
//  СписокЭлектронныхДокументов	 - Массив - список электронных документов.
//
Процедура ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, СписокНастроекЭДО = Неопределено,
	СписокЭлектронныхДокументов = Неопределено, ПаролиКСертификатам = Неопределено) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	ВыполнятьКриптооперацииНаСервере = ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере();
	СтМассивовСтруктурСертификатов = Новый Структура;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("МассивСоглашений", СписокНастроекЭДО);
	ДополнительныеПараметры.Вставить("МассивЭД", СписокЭлектронныхДокументов);
	ДополнительныеПараметры.Вставить("ПаролиКСертификатам", ПаролиКСертификатам);
	
	ИспользуютсяЭП = ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи();
	ПоказатьОшибку = (ИспользуютсяЭП И НЕ ВыполнятьКриптооперацииНаСервере);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПолученияОтпечатковСертификатов", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьОтпечаткиСертификатов(ОписаниеОповещения, Истина, ПоказатьОшибку);
	
КонецПроцедуры

// Заполняет данные о способах получения технической поддержки по ЭДО.
//
Процедура ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки) Экспорт

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-333-9313";
	АдресЭлектроннойПочтыСлужбыПоддержки = "edo@1c.ru";

КонецПроцедуры

// Только для внутреннего использования
Процедура ОткрытьИнструкциюПо1СБухфон() Экспорт
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1c-connect.com/ru/forcustomers/");
	
КонецПроцедуры

// Открывает форму ПроверкаСертификата и возвращает результат проверки.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
//
//  ОбработкаЗавершения  - ОписаниеОповещения - вызывается при закрытии формы.
//  ПроверитьАвторизацию - Булево - если Истина, то к проверкам сертификата будет добавлен тест связи
//                                  с сервером Такском.
//  ВладелецФормы        - УправляемаяФорма - другая форма.
//  ПроверкаПриВыборе    - Булево - если Истина, тогда кнопка Проверить будет называться
//                                  "Проверить и продолжить", а кнопка Закрыть будет называться "Отмена".
//  БезПодтверждения     - Булево - если установить Истина, тогда при наличии пароля
//                            проверка будет выполнена сразу без открытия формы.
//                            Если режим ПроверкаПриВыборе и установлен параметр ОбработкаРезультата, то
//                            форма не будет открыта, если параметр ПроверкиПройдены установлен Истина.
//
Процедура ТестНастроекСПроверкойСертификата(Сертификат, ВладелецФормы, ПроверитьАвторизацию,
	ПроверкаПриВыборе, БезПодтверждения, ОбработкаЗавершения = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаТестаСертификата", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ВладелецФормы",       Неопределено);
	ДополнительныеПараметры.Вставить("ПроверкаПриВыборе",   ПроверкаПриВыборе);
	ДополнительныеПараметры.Вставить("БезПодтверждения",    БезПодтверждения);
	
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ЗаголовокФормы = НСтр("ru = 'Проверка сертификата %1';
							|en = 'Checking certificate %1'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%1", Сертификат);
	ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ДополнительныеПараметры.Вставить("ОбработкаЗавершения",
		Новый ОписаниеОповещения("ОбработкаЗавершенияТестаСертификата", ЭтотОбъект, Контекст));
	
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ЭлектроннаяПодписьКлиент.ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработкаРезультатаТестаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		
		СтруктураПроверокСертификатаНаКлиенте = ДополнительныеПараметры.Результат.ПроверкиНаСервере;
		СтруктураПроверокСертификатаНаСервере = ДополнительныеПараметры.Результат.ПроверкиНаКлиенте;
		
		РезультатСервер = Ложь;
		Если ТипЗнч(СтруктураПроверокСертификатаНаСервере) = Тип("Структура") Тогда
			РезультатСервер = СтруктураПроверокСертификатаНаСервере.Количество() > 0;
			Для каждого ЭлементСтруктуры Из СтруктураПроверокСертификатаНаСервере Цикл
				Если Не ЭлементСтруктуры.Значение Тогда
					РезультатСервер = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РезультатКлиент = Ложь;
		Если ТипЗнч(СтруктураПроверокСертификатаНаКлиенте) = Тип("Структура") Тогда
			РезультатКлиент = СтруктураПроверокСертификатаНаКлиенте.Количество() > 0;
			Для каждого ЭлементСтруктуры Из СтруктураПроверокСертификатаНаКлиенте Цикл
				Если Не ЭлементСтруктуры.Значение Тогда
					РезультатКлиент = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат = РезультатКлиент ИЛИ РезультатСервер;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьОтклонениеАннулированиеЭД(ЭД, Отклонить, ОтклонитьАннулирование = Ложь, ОбработчикОповещения = Неопределено) Экспорт
	
	Если ТипЗнч(ЭД) = Тип("Массив") Тогда
		МассивЭД = ЭД;
	Иначе
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ЭД);
	КонецЕсли;
	
	Если Отклонить Тогда
		ПараметрыОбработкиЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыОтклоненияЭД(ЭД, Ложь);
		Если ОтклонитьАннулирование Тогда
			Заголовок = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании';
							|en = 'Specify the reasons for cancellation offer rejection'");
		Иначе
			
			Если ПараметрыОбработкиЭД.Количество() > 0
				И (ПараметрыОбработкиЭД[0].ЭтоСчетФактура
					ИЛИ Не ПараметрыОбработкиЭД[0].ТребуетсяПодтверждение) Тогда
				Заголовок = НСтр("ru = 'Укажите текст запроса на уточнение';
								|en = 'Specify a query text for refinement'");
			Иначе
				Заголовок = НСтр("ru = 'Укажите причины отклонения документа';
								|en = 'Specify the reasons for the document rejection'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ФормироватьЭД = Истина;
		ПараметрыОбработкиЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыАннулированияЭД(МассивЭД);
		Заголовок = НСтр("ru = 'Укажите причины аннулирования документа';
						|en = 'Specify the reasons for document cancellation'");
	КонецЕсли;
	Если ПараметрыОбработкиЭД.Количество() > 0 Тогда
		ТекстУточнения = "";
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ПараметрыОбработкиЭД", ПараметрыОбработкиЭД);
		ПараметрыОбработки.Вставить("Отклонить", Отклонить);
		ПараметрыОбработки.Вставить("ОписаниеОповещения", ОбработчикОповещения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтклонениеАннулированиеЭДЗавершить", ЭтотОбъект, 
			ПараметрыОбработки);
		ПоказатьВводСтроки(ОписаниеОповещения, ТекстУточнения, Заголовок, , Истина);
	ИначеЕсли ТипЗнч(ОбработчикОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьПредложениеОбАннулировании(ПервичныйЭД, ОтклонитьАннулирование = Ложь) Экспорт
	
	СтруктураЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьСсылкиНаЭДДляПОА(ПервичныйЭД);
	Если ЗначениеЗаполнено(СтруктураЭД) Тогда
		Если ОтклонитьАннулирование Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработатьПредложениеОбАннулированииЗавершить", ЭтотОбъект);
			ОбработатьОтклонениеАннулированиеЭД(СтруктураЭД.ПОА, Истина, ОтклонитьАннулирование, Оповещение);
		Иначе
			ОтправитьПодтверждениеЭД(СтруктураЭД.ВладелецФайла, СтруктураЭД.ПОА);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина, ДопПараметры = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, ИмяКоманды, ДопПараметры, ЭД);
	
КонецПроцедуры

// Вызывается из процедуры ПодготовитьИОтправитьПЭДПродолжить(...).
// Вызывает процедуру ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры).
//
// Параметры:
//   Результат - МенеджерКриптографии - инициализированный менеджер криптографии.
//               Строка - описание ошибки при создании менеджера криптографии.
//               Неопределено - первый вызов метода
//   ДопПараметры - Структура:
//      Параметры                                  - Структура - входящие параметры для отправки ЭД.
//      РезультатОтправкиПЭД                        - Структура:
//         МассивПакетовДляОбработкиНаКлиенте - Массив - элементы - ДокументСсылка.ПакетыЭД.
//         КолОтправленных                    - Число.
//      СоответствиеПрофилейИПараметровСертификатов - Соответствие.
//
Процедура ВыполнитьДействияПослеОтправкиПЭД(Результат, ДопПараметры) Экспорт
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	
	ПерейтиКЗавершениюОтправки = Истина;
	МассивПакетовДляОбработкиНаКлиенте = Неопределено;
	Если ТипЗнч(РезультатОтправкиПЭД) = Тип("Структура")
		И РезультатОтправкиПЭД.Свойство("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте)
		И МассивПакетовДляОбработкиНаКлиенте.Количество() > 0 Тогда
		
		Если Результат = Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеОтправкиПЭД", ЭтотОбъект, ДопПараметры);
			ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "Шифрование");

			ПерейтиКЗавершениюОтправки = Ложь;
		ИначеЕсли ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
			ПерейтиКЗавершениюОтправки = Ложь;
			// По концепции БЭД электронный документ в пакете один.
			СоответствиеДанныхПакетов = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДанныхПакетов(
													РезультатОтправкиПЭД.МассивПакетовДляОбработкиНаКлиенте);
													
			Параметры.Вставить("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
			Параметры.Вставить("МенеджерКриптографии", Результат);
			ПодготовитьПакетыДляОтправки(ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ПерейтиКЗавершениюОтправки Тогда
		ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры ПодготовитьИОтправитьПЭД(...).
// Вызывает процедуру ВыполнитьДействияПослеОтправкиПЭД(Результат, ДопПараметры).
//
// Параметры:
//   Результат    - Структура:
//      СоответствиеПрофилейИПараметровСертификатов - Соответствие.
//   ДопПараметры - Структура:
//      Параметры                  - Структура.
//      ПризнакПодписи             - Булево.
//      ДобавленныеФайлы           - СправочникСсылка.ЭДПрисоединенныеФайлы.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения.
//
Процедура ПодготовитьИОтправитьПЭДПродолжить(Результат, ДопПараметры) Экспорт
	
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	Если НЕ (ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ТипЗнч(СоответствиеПрофилейИПараметровСертификатов) = Тип("Соответствие")) Тогда
		
		СоответствиеПрофилейИПараметровСертификатов = Новый Соответствие;
	КонецЕсли;
	
	Параметры = Неопределено;
	ПризнакПодписи = Неопределено;
	ДобавленныеФайлы = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Свойство("ДобавленныеФайлы", ДобавленныеФайлы);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	РезультатОтправкиПЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(
		ДобавленныеФайлы, ПризнакПодписи, СоответствиеПрофилейИПараметровСертификатов);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	ДопПараметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	
	Если ЗначениеЗаполнено(РезультатОтправкиПЭД.МассивПакетовДляПовторнойОтправки) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьДействияПослеОтправкиПЭД", ЭтотОбъект, ДопПараметры);
		ОтправитьМассивПакетовЭД(РезультатОтправкиПЭД.МассивПакетовДляПовторнойОтправки, Оповещение);
		
	Иначе
		ВыполнитьДействияПослеОтправкиПЭД(Неопределено, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьМассивПакетовЭД(Знач МассивПЭД, ОбработкаОповещения = Неопределено) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОбработкаОповещения", ОбработкаОповещения);
	ДопПараметры.Вставить("МассивПЭД", МассивПЭД);
	Оповещение = Новый ОписаниеОповещения("ОтправитьМассивПакетовОповещение", ЭтотОбъект, ДопПараметры);
	МассивПрофилей = ОбменСКонтрагентамиСлужебныйВызовСервера.МассивПрофилейПакетовЭД(МассивПЭД);
	ПолучитьНастройкиЭДОИПараметрыСертификатов(Оповещение, МассивПрофилей, МассивПЭД);
	
КонецПроцедуры

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД                              - СправочникСсылка.ЭДПрисоединенныеФайлы.
//  ПроверитьТолькоПоследнююПодпись - Булево - если Истина, будет проверяться только последняя установленная подпись.
//
Процедура ОпределитьСтатусыПодписей(ЭД, ПроверитьТолькоПоследнююПодпись = Ложь) Экспорт

	РезультатПроверки = Новый Массив;
	СтруктураСодержимогоЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	СтруктураСодержимогоЭД.Вставить("ПроверяемыйЭД", ЭД);
	
	Если ПроверитьТолькоПоследнююПодпись Тогда
		СтруктураСодержимогоЭД.Вставить("ИндексПроверки", СтруктураСодержимогоЭД.Подписи.Количество() - 2);
	Иначе
		СтруктураСодержимогоЭД.Вставить("ИндексПроверки", -1);
	КонецЕсли;
	
	Если СтруктураСодержимогоЭД.Подписи.Количество() Тогда
		ОпределитьСтатусОчереднойПодписи(Неопределено, СтруктураСодержимогоЭД);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать.
//  Действие             - строка, представление действия, которое необходимо произвести с электронными документами.
//  ДопПараметры         - структура, дополнительные параметры обработки электронных документов.
//  ЭД                   - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы,
//                         если нужно обработать только один ЭД.
//  ОписаниеОповещения   - ОписаниеОповещения - обработчик оповещения, который вызывается по окончании операции.
//                         В качестве результата передается Истина, если удалось выполнить действия хотя бы по одному объекту.
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект,
	Действие, ДопПараметры = "", Знач ЭД = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
	Параметры.Вставить("Действие", Действие);
	Параметры.Вставить("ДопПараметры", ДопПараметры);
	Параметры.Вставить("ЭД", ЭД);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Если (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действие, "Подписать")
			ИЛИ ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действие, "Отправить"))
		И ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи() Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьЭДПослеПолученияОтпечатков", ЭтотОбъект, Параметры);
		ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	Иначе
		ОбработатьЭДПослеПолученияОтпечатков(Неопределено, Параметры)
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПолучитьДвоичныеДанныеДляЭД(Результат, ДополнительныеПараметры) Экспорт
	
	ЭД = Неопределено;
	ОписаниеДанных = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЭД", ЭД)
		И ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		ВыбранныйСертификат = Неопределено;
		Если НЕ (ДополнительныеПараметры.Свойство("ОписаниеДанных", ОписаниеДанных)
			И ТипЗнч(ОписаниеДанных) = Тип("Структура")
			И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
			И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
			И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
			И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")) Тогда
			
			ВыбранныйСертификат = Неопределено;
		КонецЕсли;
		ДвоичныеДанныеЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ЭД, ВыбранныйСертификат);
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", ДвоичныеДанныеЭД);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Параметры);
	
КонецПроцедуры

// Подписывает ЭД и переходит в процедуру ДействияПослеПодписанияЭД(Параметры).
//
// Параметры:
//   РезультатВыполнения - Неопределено - в логике работы процедуры не участвует.
//   Параметры - Структура:
//      Результат                    - Структура:
//         СтруктураСтруктурМассивовЭДИСертификатов - Структура:
//            МассивСертификатов - Массив - один или несколько сертификатов, которыми могут быть подписаны
//               ЭД, находящиеся в следующем параметре структуры.
//            СоответствиеЭДИДД  - Соответствие:
//               Ключ     - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на подписываемый ЭД.
//               Значение - Неопределено, Строка - Адрес временного хранилища, ссылающийся на двоичные
//                  данные ЭД. Если значение не заполнено, то двоичные данные ЭД будут определяться
//                  непосредственно перед подписанием ЭД в процедуре указанной в обработчике оповещения,
//                  например: ПолучитьДвоичныеДанныеДляЭД.
//            ДанныеДляСпецОбработки - Соответствие - данные для подписания банковских ЭД.
//            СоответствиеСертификатовПодписаннымЭд - Соответствие - соответствие сертификата и массива ЭД, которые 
//            подписаны этим сертификатом, для данных документов также надо будет обновить статусы.
//      СоответствиеЭДИПодписей      - Соответствие.
//      СоотвСертификатовИИхСтруктур - Соответствие:
//         Ключ     - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//         Значение - Структура - параметры сертификата.
//
Процедура ПодписатьЭД(РезультатВыполнения, Параметры) Экспорт
	
	СтруктураСтруктурМассивовЭДИСертификатов = Неопределено;
	ВходящаяСтруктура = Параметры.Результат;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных
		+ ЭлектронноеВзаимодействиеСлужебныйКлиент.КоличествоПодписанныхЭД(РезультатВыполнения);
		
		// Оповещение произошло из процедуры БСП
		Если РезультатВыполнения.Свойство("НаборДанных") Тогда
			// Если Успех, необходимо перебрать элементы массива Набор данных
			// в подписанных эд в элементе массива являющимся структурой будет свойство "Свойства подписи"
			// такие ЭД надо добавить в массив "МассивЭД" для обновления их статусов.
			МассивЭД = Неопределено;
			СоответствиеСертификатовПодписаннымЭд = Неопределено;
			
			Если РезультатВыполнения.Свойство("ВыбранныйСертификат") Тогда
				Если НЕ Параметры.Свойство("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд) Тогда
				
					СоответствиеСертификатовПодписаннымЭд = Новый Соответствие;
					Параметры.Вставить("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд);
					
				КонецЕсли;
				
				МассивЭД = СоответствиеСертификатовПодписаннымЭд[РезультатВыполнения.ВыбранныйСертификат.Ссылка];
				Если МассивЭД = Неопределено Тогда
					МассивЭД = Новый Массив;
					СоответствиеСертификатовПодписаннымЭд.Вставить(РезультатВыполнения.ВыбранныйСертификат.Ссылка, МассивЭД);
				КонецЕсли;
			КонецЕсли;

			Для Каждого ПодписываемыеДанные Из РезультатВыполнения.НаборДанных Цикл
				Если Не ПодписываемыеДанные.Свойство("СвойстваПодписи") Тогда
					Параметры.МассивЭДКУдалениюИзОтправки.Добавить(ПодписываемыеДанные.Объект);
					Продолжить;
				КонецЕсли;
				МассивЭД.Добавить(ПодписываемыеДанные.Объект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВходящаяСтруктура.Свойство("СтруктураСтруктурМассивовЭДИСертификатов", СтруктураСтруктурМассивовЭДИСертификатов)
		И СтруктураСтруктурМассивовЭДИСертификатов.Количество() > 0 Тогда
		
		СоответствиеЭДИПодписей = Неопределено;
		Если НЕ (Параметры.Свойство("СоответствиеЭДИПодписей", СоответствиеЭДИПодписей)
			ИЛИ ТипЗнч(СоответствиеЭДИПодписей) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеЭДИПодписей", Новый Соответствие);
		КонецЕсли;
		
		Для Каждого Элемент Из СтруктураСтруктурМассивовЭДИСертификатов Цикл
			
			Структура = Элемент.Значение;
			СтруктураСтруктурМассивовЭДИСертификатов.Удалить(Элемент.Ключ);
			
			МассивСертификатов = Структура.МассивСертификатов;
			ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодписатьЭД", ЭтотОбъект, Параметры);
			ДанныеДляСпецОбработки = Неопределено;
			СоответствиеЭдИДд = Неопределено;
			Если Структура.Свойство("СоответствиеЭдИДд", СоответствиеЭдИДд)
				И ТипЗнч(СоответствиеЭдИДд) = Тип("Соответствие") Тогда
				
				Если СоответствиеЭдИДд.Количество() = 1 Тогда
					Операция = НСтр("ru = 'Подписание электронного документа';
									|en = 'Sign electronic document'");
				Иначе
					Операция = НСтр("ru = 'Подписание электронных документов';
									|en = 'Sign electronic documents'");
				КонецЕсли;
				
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("Операция",            Операция);
				ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
				ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
				ОписаниеДанных.Вставить("НаборДанных",         Новый Массив);
				ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Документ';
																	|en = 'Document'"));
				ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
				
				НаборДанных = ОписаниеДанных.НаборДанных;
				МассивЭДДляПредставления = Новый Массив;
				Для Каждого ЭлементДанных Из СоответствиеЭдИДд Цикл
					ЭД = ЭлементДанных.Ключ;
					Данные = Новый Структура;
					Если ЭлементДанных.Значение = Неопределено ИЛИ НЕ ЭтоАдресВременногоХранилища(ЭлементДанных.Значение) Тогда
						ПараметрыДляПолученияДД = Новый Структура("ЭД, ОписаниеДанных", ЭД, ОписаниеДанных);
						СсылкаНаДД = Новый ОписаниеОповещения("ПолучитьДвоичныеДанныеДляЭД", ЭтотОбъект, ПараметрыДляПолученияДД);
					Иначе
						СсылкаНаДД = ЭлементДанных.Значение;
					КонецЕсли;
					Данные.Вставить("Данные", СсылкаНаДД);
					Данные.Вставить("Объект", ЭД);
					
					НаборДанных.Добавить(Данные);
					МассивЭДДляПредставления.Добавить(ЭД);
				КонецЦикла;
				
				Если МассивЭДДляПредставления.Количество() = 1 Тогда
					ПредставлениеЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПредставлениеЭД(МассивЭДДляПредставления[0]);
					НаборДанных[0].Вставить("Представление", ПредставлениеЭД);
				Иначе
					ПредставлениеЭД = НСтр("ru = 'Электронные документы (%1)';
											|en = 'Electronic documents (%1)'");
					ПредставлениеЭД = СтрЗаменить(ПредставлениеЭД, "%1", МассивЭДДляПредставления.Количество());
					ПредставлениеЭД = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПредставлениеЭД);
					СписокПредставленийЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СписокПредставленийЭД(МассивЭДДляПредставления);
					ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставленийЭД);
					ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеЭД);
				КонецЕсли;
				ОписаниеДанных.Вставить("КонтекстОперации", Неопределено);
				УстановитьПаролиСертификатов(Параметры.СоотвСертификатовИИхСтруктур);
				ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
			Иначе
				ПодписатьЭД(Неопределено, Параметры);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Иначе
		
		// Временно сохраним пароль закрытого ключа сертификата, на случай истечения маркера.
		// При запросе нового маркера не заставляем пользователя вводить пароль еще раз.
		Если РезультатВыполнения.Свойство("КонтекстОперации") Тогда
			Параметры.Вставить("ПаролиКСертификатам", РезультатВыполнения.КонтекстОперации);
		КонецЕсли;
		
		УстановитьПаролиСертификатов(Параметры.СоотвСертификатовИИхСтруктур, Ложь);
		
		ДействияПослеПодписанияЭД(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из формы просмотра Входящего, Исходящего ЭД.
// Проверяет совпадение переданных в оповещение параметров свойствам формы.
// 
// Параметры:
//  Форма - УправляемаяФорма - ФормаПросмотраЭД документов ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий.
//  Параметр - Структура - параметр передаваемый в обработку оповещение формы.
//  ОбработатьОповещение - Булево - признак выхода из обработки оповещения формы.
//
Процедура ПриОбработкеОповещенияФормыПросмотраЭД(Форма, Параметр, ОбработатьОповещение) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ФлагВыхода = Ложь;
		Если Параметр.Свойство("ЭлектронныеДокументы") Тогда
			ФлагВыхода = Истина;
			Если ТипЗнч(Параметр.ЭлектронныеДокументы) = Тип("Массив")
				И Параметр.ЭлектронныеДокументы.Найти(Форма.ПрисоединенныйФайлСсылка) <> Неопределено Тогда
				ФлагВыхода = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ФлагВыхода2 = Ложь;
		Если Параметр.Свойство("ДокументыВладельцы") Тогда
			ФлагВыхода2 = Истина;
			Если ТипЗнч(Параметр.ДокументыВладельцы) = Тип("Массив")
				И Параметр.ДокументыВладельцы.Найти(Форма.Объект.Ссылка) <> Неопределено Тогда
					ФлагВыхода2 = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагВыхода И ФлагВыхода2 Тогда
			ОбработатьОповещение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Открывает страницу опроса на сайте ИТС
//
Процедура ОткрытьСтраницуОпроса() Экспорт
	
	ПараметрыЕстьИдея = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыЕстьИдея();
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/survey/service1cedo" + ПараметрыЕстьИдея);
	
КонецПроцедуры

// Получает отпечатки сертификатов пользователя.
//
// Параметры:
//  Оповещение     - ОписаниеОповещение - вызывается для передачи возвращаемого значение:
//                   * Соответствие - Ключ - отпечаток в формате строки Base64, а Значение - Истина;
//                   * Строка - текст ошибки создания менеджера криптографии (или другая ошибка).
//  Личные         - Булево - Если Ложь, то к личным сертификатам добавляются сертификаты получателей.
//  ВыдаватьОшибку - Булево - показать ошибку создания менеджера криптографии.
//
Процедура ПолучитьОтпечаткиСертификатов(ОповещениеОЗавершении, Личные, ПоказатьОшибку = Ложь) Экспорт
	
	Контекст = Новый Структура("Оповещение", ОповещениеОЗавершении);
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьОтпечаткиВСервисеПослеПолученияОтпечатковНаКлиенте", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Личные, ПоказатьОшибку);
	
КонецПроцедуры

// Открывает форму настройки регламента ЭДО
//
// Параметры:
//  ОписаниеОповещения	 - ОписаниеОповещения - оповещение, которое нужно вызвать при закрытии формы.
//  ПараметрыФормы		 - Структура - параметры, передаваемые в форму настройки регламента ЭДО.
//  ВладелецФормы		 - Произвольный - форма или элемент управления другой формы.
//
Процедура ОткрытьФормуРегламентаЭДО(ОписаниеОповещения, ПараметрыФормы, ВладелецФормы) Экспорт 

	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаРегламентаЭДО", 
		ПараметрыФормы,
		ВладелецФормы,
		,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Обработчик события выбора формата в профилях и настройках ЭДО.
//
// Параметры:
//  СтрокаНастроек		 - ДанныеФормыСтруктура - строка таблицы исходящих документов.
//  ИспользуетсяПрофиль	 - Булево - определяет, указывается ли профиль в строке настроек.
//
Процедура ПриИзмененииФорматаВСтрокеНастроек(СтрокаНастроек, ИспользуетсяПрофиль = Ложь) Экспорт

	// Установка флагов "Подписывать, Извещения, Ответная подпись"
	// и обновление заголовка гиперссылки.
	
	Если СтрокаНастроек.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель") Тогда
	
		Если ВРег(СтрокаНастроек.ВерсияФормата) = ВРег("ФНС 5.01 (С 2016Г.)")
			Или ВРег(СтрокаНастроек.ВерсияФормата) = ВРег("ФНС 5.01 (УПД:Первичный документ)")
			ИЛИ ВРег(СтрокаНастроек.ВерсияФормата) = ВРег("ФНС 2019 (УПД:Первичный документ)") Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНастроек.ТребуетсяОтветнаяПодпись = СтрокаНастроек.ИспользоватьЭП;
		СтрокаНастроек.ТребуетсяИзвещениеОПолучении = Истина;
		
		ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(СтрокаНастроек, ИспользуетсяПрофиль);
		
	ИначеЕсли СтрокаНастроек.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав") Тогда
	
		Если ВРег(СтрокаНастроек.ВерсияФормата) = ВРег("ФНС 5.01 (С 2016Г.)") Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНастроек.ТребуетсяОтветнаяПодпись = СтрокаНастроек.ИспользоватьЭП;
		СтрокаНастроек.ТребуетсяИзвещениеОПолучении = Истина;
		
		ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(СтрокаНастроек, ИспользуетсяПрофиль);
		
	ИначеЕсли СтрокаНастроек.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") Тогда
		
		Если Не (ВРег(СтрокаНастроек.ВерсияФормата) = ВРег("ФНС 5.01 (УПД:Счет-фактура и первичный документ)")
			ИЛИ ВРег(СтрокаНастроек.ВерсияФормата) = ВРег("ФНС 2019 (УПД:Счет-фактура и первичный документ)")) Тогда
			СтрокаНастроек.ТребуетсяОтветнаяПодпись = Ложь;
			ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(СтрокаНастроек, ИспользуетсяПрофиль);
		КонецЕсли;
		
	ИначеЕсли СтрокаНастроек.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") Тогда
		
		Если Не ВРег(СтрокаНастроек.ВерсияФормата) = ВРег("ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)") Тогда
			СтрокаНастроек.ТребуетсяОтветнаяПодпись = Ложь;
			ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(СтрокаНастроек, ИспользуетсяПрофиль);
		КонецЕсли;
		
	ИначеЕсли СтрокаНастроек.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель") Тогда
		
		Если Не ВРег(СтрокаНастроек.ВерсияФормата) = ВРег("ФНС 5.01 (УКД:Первичный документ)") Тогда
			СтрокаНастроек.ТребуетсяОтветнаяПодпись = СтрокаНастроек.ИспользоватьЭП;
			ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(СтрокаНастроек, ИспользуетсяПрофиль);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Возвращает ссылку на раздел инструкции http://1c-edo.ru/handbook/
// "Особенности настройки обмена ЭД из решений, работающих в клиент-серверном режиме"
Функция СсылкаНаИнструкциюПоНастройкеЭДО() Экспорт
	
	Возврат "http://1c-edo.ru/handbook/28/2522/";
	
КонецФункции

// Отправка и получение электронных документов асинхронно.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое вызывается при завершении операции.
//  КонтекстКлиент - Структура, Неопределено - клиентский контекст операции:
//   * ИдентификаторФормыВладельца - УникальныйИдентификатор - идентификатор формы, из которой вызван метод.
//   * ВыводитьСообщения - Булево - признак вывода сообщений пользователю, сформированных в фоновом задании.
//
Процедура НачатьОтправкуПолучениеЭлектронныхДокументов(ОповещениеОЗавершении, КонтекстКлиент = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ИдентификаторЗадания");
	Контекст.Вставить("ПаролиКСертификатам");
	Контекст.Вставить("ПаролиКСертификатам");
	Контекст.Вставить("ПовторноеПолучение", Ложь);
	Контекст.Вставить("ОбновленоСоглашений", 0);
	Контекст.Вставить("ОтправленоПакетов",   0);
	Контекст.Вставить("ПолученоПакетов",     0);
	Контекст.Вставить("РаспакованоПакетов",  0);
	Контекст.Вставить("КонтекстКлиент", КонтекстКлиент);
	Контекст.Вставить("ПроверятьПодписиНаСервере", Ложь);
	Контекст.Вставить("ПодписыватьНаСервере", Ложь);
	Контекст.Вставить("ОтпечаткиСертификатовНаКлиенте", Новый Массив);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗавершитьОтправкуПолучениеЭлектронныхДокументов", ЭтотОбъект, Контекст);
	ПараметрыФормы = Новый Структура("Заголовок", НСтр("ru = 'Отправка и получение документов';
														|en = 'Sending and receiving documents'"));
	ФормаДлительнойОперации = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДлительнаяОперация",ПараметрыФормы,,
		Истина,,,ОповещениеОЗакрытии);
	Контекст.Вставить("ФормаДлительнойОперации", ФормаДлительнойОперации);
	Контекст.Вставить("УникальныйИдентификатор", ФормаДлительнойОперации.УникальныйИдентификатор);
	
	ИспользоватьЭлектронныеПодписи = ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи();
	Если ИспользоватьЭлектронныеПодписи Тогда
		Контекст.Вставить("ОтпечаткиСертификатовНаКлиенте");
		Контекст.Вставить("ПодписыватьНаСервере", ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере());
		Контекст.Вставить("ПроверятьПодписиНаСервере", ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере());
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиЭДОИПараметрыСертификатовНачало", ЭтотОбъект, Контекст);
		ПолучитьОтпечаткиСертификатов(Оповещение, Истина);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
		ОтправитьПолучитьПакетыЭлектронныхДокументовНачало(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентами.ОтправитьПроизвольныйДокумент.
Функция НовыйПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла) Экспорт
	
	// Проверим корректность переданных параметров.
	ШаблонОшибкиПередачиПараметров = НСтр("ru = 'Отсутствует или не заполнен обязательный параметр ""%1""';
											|en = 'The required parameter ""%1"" is missing or not filled in'");
	
	Организация        = Неопределено;
	Контрагент         = Неопределено;
	ДоговорКонтрагента = Неопределено;
	
	Если Не ПараметрыФормирования.Свойство("Организация", Организация) ИЛИ Не ЗначениеЗаполнено(Организация) Тогда
		ВызватьИсключение СтрШаблон(ШаблонОшибкиПередачиПараметров, "ПараметрыФормирования.Организация");
	КонецЕсли;
	
	Если Не ПараметрыФормирования.Свойство("Контрагент", Контрагент) ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		ВызватьИсключение СтрШаблон(ШаблонОшибкиПередачиПараметров, "ПараметрыФормирования.Контрагент");
	КонецЕсли;
	
	ПараметрыФормирования.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	
	ИмяФайла       = Неопределено;
	АдресХранилища = Неопределено;
	
	Если Не ПараметрыФайла.Свойство("ИмяФайла", ИмяФайла) ИЛИ Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ВызватьИсключение СтрШаблон(ШаблонОшибкиПередачиПараметров, "ПараметрыФайла.ИмяФайла");
	КонецЕсли;
	
	Если Не ПараметрыФайла.Свойство("АдресХранилища", АдресХранилища) ИЛИ Не ЗначениеЗаполнено(АдресХранилища) Тогда
		ВызватьИсключение СтрШаблон(ШаблонОшибкиПередачиПараметров, "ПараметрыФайла.АдресХранилища");
	КонецЕсли;
	
	СформированныйДокумент = ОбменСКонтрагентамиСлужебныйВызовСервера.НовыйПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла);
	
	Возврат ?(ЗначениеЗаполнено(СформированныйДокумент), СформированныйДокумент, Неопределено);
	
КонецФункции

#Область РаботаСЭП

Процедура ОпределитьСтатусОчереднойПодписи(Результат, Параметры) Экспорт
	
	// Проверка создания менеджера криптографии.
	Если Результат = Неопределено И Параметры.Свойство("РезультатПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ИндексПроверки = Параметры.ИндексПроверки + 1;
	
	Если Не Параметры.Свойство("РезультатПроверки") Тогда
		РезультатПроверки = Новый Массив;
		Параметры.Вставить("РезультатПроверки", РезультатПроверки);
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура("НомерСтроки", Параметры.ИндексПроверки);
	
	Если Результат = Истина Тогда
		СтруктураЗаписи.Вставить("Результат", Истина);
		Параметры.РезультатПроверки.Добавить(СтруктураЗаписи);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ВидОперации = НСтр("ru = 'Проверка подписи';
							|en = 'Signature check'");
		ТекстСообщения = НСтр("ru = 'При проверке подписи электронного документа:
									|%1
									|произошла ошибка: %2';
									|en = 'When checking the electronic document signature
									|%1
									|an error occurred: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			Параметры.ПроверяемыйЭД,Результат);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, ТекстСообщения, "ЭлектронноеВзаимодействие");
		СтруктураЗаписи.Вставить("Результат", Ложь);
		Параметры.РезультатПроверки.Добавить(СтруктураЗаписи);
		Параметры.Вставить("ПодписьНеверна");
	КонецЕсли;

	Если Параметры.Подписи.Количество() > Параметры.ИндексПроверки Тогда
		Оповещение = Новый ОписаниеОповещения("ОпределитьСтатусОчереднойПодписи", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, Параметры.ДанныеЭД,
			Параметры.Подписи[Параметры.ИндексПроверки].Подпись);
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ПроверяемыйЭД") Тогда
		ОбменСКонтрагентамиСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(Параметры.ПроверяемыйЭД,
			Параметры.РезультатПроверки);
	КонецЕсли;
	
	Если Параметры.Свойство("ПроверяемыйЭД") Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(Параметры.ПроверяемыйЭД);
		Если Параметры.Свойство("ЭлектронныйДокументВладелец")
			И ЗначениеЗаполнено(Параметры.ЭлектронныйДокументВладелец) Тогда
			МассивЭД.Добавить(Параметры.ЭлектронныйДокументВладелец);
		КонецЕсли;
		Оповестить("ПроведенаПроверкаЭП", МассивЭД);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭлектронныхДокументов

Процедура ОбработатьЭДПослеПолученияОтпечатков(ОтпечаткиСертификатов, Параметры) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолУтвержденныхЭД = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	
	МассивСсылокНаОбъект = Параметры.МассивСсылокНаОбъект;
	Действие = Параметры.Действие;
	ДопПараметры = Параметры.ДопПараметры;
	ЭД = Параметры.ЭД;
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	
	МассивОтпечатковСертификатов = Новый Массив;
	ОшибкаНастройкиКриптографии =Ложь;
	
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Строка") Тогда
		МассивОтпечатковСертификатов = Новый Массив;
		ОшибкаНастройкиКриптографии = Истина;
		ДопПараметры.Вставить("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии);
	ИначеЕсли ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОтпечаткиСертификатов) = Тип("Массив") Тогда
		МассивОтпечатковСертификатов = ОтпечаткиСертификатов;
	КонецЕсли;
	
	СоответствиеСертификатаИПароля = Новый Соответствие;
	
	Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
		МассивОтпечатковСертификатов,
		Действие,
		ДопПараметры,
		ЭД,
		СоответствиеСертификатаИПароля);
	
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	НемедленнаяОтправкаЭД = Неопределено;
	ВыполнитьОповещение = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ОшибкиПриФормированииДокументов") Тогда
			ПоказатьПроблемыПриФормированииДокументов(
				МассивСсылокНаОбъект, Результат.ОшибкиПриФормированииДокументов, Действие);
		ИначеЕсли Результат.Свойство("ПрофилиЭДОБезСертификатов") Тогда
			ОткрытьФормуПомощникаРегистрацииСертификатов("Подписание", Результат.ПрофилиЭДОБезСертификатов);
		КонецЕсли;
		
		Результат.Свойство("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		Результат.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		
		Если НЕ Результат.Свойство("КолПодписанных", ИтогКолПодписанных) Тогда
			ИтогКолПодписанных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолПодготовленных", ИтогКолПодготовленных) Тогда
			ИтогКолПодготовленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолОтправленных", ИтогКолОтправленных) Тогда
			ИтогКолОтправленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД) Тогда
			ИтогКолНовыхЭД = 0;
		КонецЕсли;
		
		Если ИтогКолУтвержденныхЭД = 0 И Результат.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = Результат.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		Если ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД > 0 Тогда
			
			ОбработанныеДокументы = Неопределено;
			Если Параметры.Свойство("ЭД") Тогда
				ОбработанныеДокументы = Новый Массив;
				
				Если ТипЗнч(Параметры.ЭД) = Тип("Массив") Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбработанныеДокументы, Параметры.ЭД);
				Иначе
					
					ОбработанныеДокументы.Добавить(Параметры.ЭД);
				КонецЕсли;
			КонецЕсли;
			
			СсылкиНаОбъект = Неопределено;
			Если Параметры.Свойство("МассивСсылокНаОбъект") Тогда
				СсылкиНаОбъект = Параметры.МассивСсылокНаОбъект;
			КонецЕсли;
			
			ДокументыВладельцы = Неопределено;
			Если Результат.Свойство("МассивНовыхЭД") Тогда
				ДокументыВладельцы = Результат.МассивНовыхЭД;
			КонецЕсли;
			
			Если СсылкиНаОбъект = Неопределено Тогда
				Если Результат.Свойство("ДокументыУчета") Тогда
					СсылкиНаОбъект = Результат.ДокументыУчета;
				КонецЕсли;
				
			КонецЕсли;
						
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ЭлектронныеДокументы" ,ОбработанныеДокументы);
			ПараметрыОповещения.Вставить("ДокументыУчета", СсылкиНаОбъект);
			
			Если СтрЧислоВхождений(Действие, "Утвердить") + СтрЧислоВхождений(Действие, "Подписать") < 2 Тогда 
				Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
			КонецЕсли;
			
		КонецЕсли;
		
		// Подписание ЭД:
		
		СоотвСертификатовИМассивовЭДКПодписи = Новый Соответствие;
		
		МассивЭДКУдалениюИзОтправки = Новый Массив;
		СтруктураСтруктурМассивовЭДИСертификатов = Неопределено;
		СоотвЭДИСоглашений = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		
		ПараметрыКонтекста = Новый Структура();
		ПараметрыКонтекста.Вставить("Результат", Результат);
		ПараметрыКонтекста.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыКонтекста.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		ПараметрыКонтекста.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		ПараметрыКонтекста.Вставить("ИтогКолОтправленных", ИтогКолОтправленных);
		ПараметрыКонтекста.Вставить("ИтогКолПодготовленных", ИтогКолПодготовленных);
		ПараметрыКонтекста.Вставить("ИтогКолНовыхЭД", ИтогКолНовыхЭД);
		ПараметрыКонтекста.Вставить("ИтогКолУтвержденныхЭД", ИтогКолУтвержденныхЭД);
		ПараметрыКонтекста.Вставить("ИтогКолПодписанных", ИтогКолПодписанных);
		ПараметрыКонтекста.Вставить("Действие", Действие);
		ПараметрыКонтекста.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
		ПараметрыКонтекста.Вставить("МассивЭДКУдалениюИзОтправки", МассивЭДКУдалениюИзОтправки);
		ПараметрыКонтекста.Вставить("СоотвСертификатовИМассивовЭДКПодписи", СоотвСертификатовИМассивовЭДКПодписи);
		ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("ОповеститьОСозданииУведомления") Тогда
			ПараметрыКонтекста.Вставить("ОповеститьОСозданииУведомления", ДопПараметры.ОповеститьОСозданииУведомления);
		КонецЕсли;

		Если Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И Результат.Свойство("СтруктураСтруктурМассивовЭДИСертификатов", СтруктураСтруктурМассивовЭДИСертификатов)
			И Результат.Свойство("СоотвЭДИСоглашений", СоотвЭДИСоглашений) Тогда
			
			СоответствиеПрофилейИСертификатов = Неопределено;
			Если ДопПараметры.Свойство("СоответствиеСертификатов", СоответствиеПрофилейИСертификатов) И ЗначениеЗаполнено(СоответствиеПрофилейИСертификатов) Тогда
				СоответствиеСертификатов = ПараметрыСертификатов(СоответствиеПрофилейИСертификатов);
				Для Каждого КлючЗначение Из СоотвСертификатовИИхСтруктур Цикл
					ПараметрыСертификата = СоответствиеСертификатов.Получить(КлючЗначение.Ключ);
					ЗаполнитьПароли(КлючЗначение.Значение, ПараметрыСертификата);
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыКонтекста.Вставить("СтруктураСтруктурМассивовЭДИСертификатов", СтруктураСтруктурМассивовЭДИСертификатов);
			ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
			ПараметрыКонтекста.Вставить("ИндексПервойИтерации", 0);
			ПараметрыКонтекста.Вставить("ИндексВторойИтерации", 0);
			ПараметрыКонтекста.Вставить("ИндексТретьейИтерации", 0);
			ВыполнитьОповещение = Ложь;
			ПодписатьЭД(Неопределено, ПараметрыКонтекста);
		Иначе
			Если СоотвСертификатовИИхСтруктур = Неопределено Тогда
				СоотвСертификатовИИхСтруктур = Новый Соответствие;
			КонецЕсли;
			ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
			// Отправка ЭД:
			ВыполнитьОповещение = Ложь;
			ОтправкаЭД(ПараметрыКонтекста);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьОповещение И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	НовыйЭД = Неопределено;
	ИДПараметра = Неопределено;
	// Если выполнялось утверждение входящего титула ТОРГ-12 или Акта, то надо открыть
	// ответный титул для подписания, в окне первичного титула.
	Если ДопПараметры.Свойство("НовыйЭД", НовыйЭД) И ЗначениеЗаполнено(НовыйЭД)
		И ДопПараметры.Свойство("ИДПараметра", ИДПараметра) Тогда
		
		ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
		Если ТипЗнч(ПараметрыФормы) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ПараметрыФормы, НовыйЭД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выводит оповещение о смене ответственного.
Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""';
							|en = 'Responsible employee ""%Ответственный%""
							|is set for %КоличествоОбработанных% of %КоличествоВсего% selected electronic documents'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" установлен';
								|en = 'Responsible person ""%Ответственный%"" is set'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.';
								|en = 'Responsible person ""%Ответственный%"" is not set for any electronic document.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен';
								|en = 'Responsible person ""%Ответственный%"" is not set'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОтветственного(Знач МассивЭД, Знач ОбработкаОповещения) Экспорт
	
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭД", МассивЭД);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПеренаправлениеЭлектронныхДокументов", ПараметрыФормы, , , , , ОбработкаОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

Процедура СоздатьПакетЭДПослеШифрования(ЗашифрованныеДанные, Параметры) Экспорт
	
	ВложенныеПараметры = Неопределено;
	СоответствиеДанныхПакетов = Неопределено;
	МенеджерКриптографии = Неопределено;
	Если Параметры.Свойство("Параметры", ВложенныеПараметры) И ТипЗнч(ВложенныеПараметры) = Тип("Структура") Тогда
		ВложенныеПараметры.Свойство("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
		ВложенныеПараметры.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Если ТипЗнч(СоответствиеДанныхПакетов) = Тип("Соответствие") Тогда
		ТекИндексПакета = -1;
		Для Каждого КлючЗначение Из СоответствиеДанныхПакетов Цикл
			ТекИндексПакета = ТекИндексПакета + 1;
			Если ТекИндексПакета = Параметры.ИндексПеребораПакетов Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		МассивДанныхЭД = КлючЗначение.Значение;
		ДанныеЭД = МассивДанныхЭД[Параметры.ИндексПеребораДанных];
		
		ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
	КонецЕсли;
	
	ПодготовитьПакетыДляОтправки(Параметры)
	
КонецПроцедуры

Процедура СформироватьНовыйЭДКаталогЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Организация", Организация) Тогда
		
		СтруктураКаталога = Новый Структура;
		СтруктураКаталога.Вставить("Организация", Организация);
		СтруктураКаталога.Вставить("ТоварыКаталога", Результат);
		Параметры = Новый Структура("СтруктураКаталога", СтруктураКаталога);
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ВыгрузкаЭлектронныхДокументовВФайл", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьКаталогЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	СоглашениеЭД = Неопределено;
	ОткрыватьФормыЭД = Неопределено;
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("СоглашениеОбИспользованииЭД", СоглашениеЭД) Тогда
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(СоглашениеЭД);
		
		МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(СоглашениеЭД);
		Если МассивСсылок = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТоварыКаталога", Результат);
		
		ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить",
			СтруктураПараметров);
		
		Если ДополнительныеПараметры.Свойство("ОткрыватьФормыЭД", ОткрыватьФормыЭД)
			И ОткрыватьФормыЭД = Истина Тогда
			ОткрытьАктуальныйЭД(СоглашениеЭД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковСертификатов(Отпечатки, Параметры) Экспорт
		
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	ОбработчикОповещения = Параметры.ОбработчикОповещения;
	МассивСоглашений     = Параметры.МассивСоглашений;
	МассивЭД             = Параметры.МассивЭД;
	ПаролиКСертификатам  = Параметры.ПаролиКСертификатам;
	
	СтМассивовСтруктурСертификатов = Новый Структура;
	СтМассивовСтруктурСертификатов.Вставить("МассивОтпечатковКлиент", МассивОтпечатков);
	
	СтСоответствий = ОбменСКонтрагентамиСлужебныйВызовСервера.НастройкиЭДОИСертификатыАвторизации(
		МассивСоглашений, МассивЭД, СтМассивовСтруктурСертификатов);
	
	СтСоответствий.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
	
	СоответствиеСоглашенийИСертификатов = Неопределено;
	Если СтСоответствий.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоответствиеСоглашенийИСертификатов) Тогда
		
		ИД_Параметров = Строка(Новый УникальныйИдентификатор);
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, СтСоответствий);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ИД_Параметров",                                 ИД_Параметров);
		Параметры.Вставить("ОбработчикОповещения",                          ОбработчикОповещения);
		Параметры.Вставить("СоответствиеСоглашенийИСертификатов",           СоответствиеСоглашенийИСертификатов);
		Параметры.Вставить("ПаролиКСертификатам",                           ПаролиКСертификатам);
		
		РасшифроватьМаркер(Неопределено, Параметры);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов",
			СтСоответствий.СоответствиеПрофилейИПараметровСертификатов);
			
		СоответствиеСоглашенийИСертификатов = Новый Соответствие;
		ПараметрыОповещения.Вставить("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
		
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтпечаткиВСервисеПослеПолученияОтпечатковНаКлиенте(Отпечатки, Контекст) Экспорт
	
	Если ТипЗнч(Отпечатки) = Тип("Соответствие")
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И ОбменСКонтрагентамиСлужебныйКлиентПовтИсп.ИспользованиеСертификатовОблачногоСервисаВозможно() Тогда
		
			ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьЛичныеОтпечаткиВСервисе(Отпечатки);
		
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Отпечатки);
	
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьЭДЗавершить(Документы, ДополнительныеПараметры) Экспорт

	ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Документы);

КонецПроцедуры

#КонецОбласти

#Область КомандыПодменюЭДО

// Команда открытия электронного документа.
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ОбменСКонтрагентамиКлиентСервер.ОткрытьАктуальныйЭД");
	
	ОчиститьСообщения();
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок);
	Для Каждого СсылкаНаОбъект Из МассивСсылок Цикл
		
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(СсылкаНаОбъект);
		Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			
			ПараметрыФормы = Неопределено;
			ВладелецФормы  = Неопределено;
			
			ТипПараметровОткрытия = ТипЗнч(ПараметрыВыполненияКоманды);
			Если ТипПараметровОткрытия = Тип("ПараметрыВыполненияКоманды")
				ИЛИ (ТипПараметровОткрытия = Тип("Структура")
					И ПараметрыВыполненияКоманды.Свойство("Источник")) Тогда
				ВладелецФормы = ПараметрыВыполненияКоманды.Источник;
			КонецЕсли;
			
			ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыФормы, ВладелецФормы);
			
		Иначе
			ТекстШаблона = НСтр("ru = '%1. Электронный документ не найден.';
								|en = '%1. Electronic document was not found.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, СсылкаНаОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Команда формирования электронного документа.
Процедура СформироватьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьНовыйЭД", ОбменСКонтрагентамиКлиент, Истина);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрКоманды", ПараметрКоманды);
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
		
	Если ПараметрКоманды.Количество() > 1 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьПроведениеПослеВопросаПользователю", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Создать электронные документы для выделенных элементов?';
							|en = 'Create electronic documents for the selected items?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения вопроса проведения объекта.
Процедура ПроверитьПроведениеПослеВопросаПользователю(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры

// Команда Создать, Подписать и отправить электронный документ.
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭДЗавершить", ОбменСКонтрагентамиСлужебныйКлиент);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрКоманды", ПараметрКоманды);
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
	
	Если ПараметрКоманды.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьПроведениеПослеВопросаПользователю", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Отправить электронные документы выделенных элементов?
			|Если электронных документов нет, они будут созданы автоматически.';
			|en = 'Send electronic documents of the selected items?
			|If there are no electronic documents, they will be created automatically.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Команда открытия формы просмотра электронных документов.
Процедура ДеревоЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОткрытьДеревоЭД(ПараметрКоманды, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

// Команда создания произвольного документа на основании текущего.
Процедура СоздатьПроизвольныйЭДНаОсновании(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры
// Команда выгрузки данных в файл.
Процедура ВыгрузитьДанныеВФайл(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
		
	ОбменСКонтрагентамиКлиент.БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды);
	
КонецПроцедуры

// Команда перезаполнения объекта из электронного документа.
Процедура ПерезаполнитьДокумент(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.ПерезаполнитьДокумент(ПараметрКоманды);
	
КонецПроцедуры

// Команда загрузки документа из файла.
Процедура ЗагрузитьДанныеИзФайла(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.БыстрыйОбменЗагрузитьЭДИзФайла();
	
КонецПроцедуры

// Команда открытия обработки "ТекущиеДелаПоЭДО".
//
Процедура ОткрытьТекущиеДелаЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСКонтрагентамиКлиент.ОткрытьТекущиеДелаЭДО();
	
КонецПроцедуры

// Открыть дерево электронных документов.
//
// Параметры:
//  СсылкаНаОбъект		 - Ссылка - документ учета.
//  ПараметрыОткрытия	 - Структура - параметры открытия.
//  ЭД					 - Ссылка - электронный документ.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено, ЭД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДеревоЭлектронныхДокументов", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
			ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
			И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
			
			Окно = ПараметрыОткрытия.Окно;
		КонецЕсли;
		
		Если Не ЭД = Неопределено Тогда
			ПараметрыФормы.Вставить("ИсходныйДокумент", ЭД)
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ДеревоЭлектронныхДокументов", ПараметрыФормы,
			СсылкаНаОбъект, СсылкаНаОбъект.УникальныйИдентификатор(), Окно);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФорм

Функция СвойстваДокументооборотаЭД() Экспорт
	
	СвойстваРедактирования= Новый Структура("ИсходящийДокумент,
		|ИспользоватьЭП,
		|ТребуетсяИзвещениеОПолучении,
		|ПрофильНастроекЭДО,
		|ТребуетсяОтветнаяПодпись,
		|СпособОбменаЭД,
		|ИдентификаторОрганизации,
		|МаршрутПодписания,
		|Организация");
	
	Возврат СвойстваРедактирования;
	
КонецФункции

Функция ДоступныеВерсииФорматаПоПараметрамЭД(ИсходящийДокумент, СпособОбменаЭД, ИспользоватьУПД, ИспользоватьУКД) Экспорт 
	СписокВыбора = ОбменСКонтрагентамиСлужебныйВызовСервера.СписокДействующихФорматов(ИсходящийДокумент);
	
	ФорматыДляУдаления = Новый Массив;
	Если ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") Тогда
		Если ИспользоватьУПД Тогда
			ФорматыДляУдаления.Добавить("ФНС 5.01 (УПД:Счет-фактура)");
			ФорматыДляУдаления.Добавить("ФНС 2019 (УПД:Счет-фактура)");
		Иначе
			ФорматыДляУдаления.Добавить("ФНС 5.01 (УПД:Счет-фактура и первичный документ)");
			ФорматыДляУдаления.Добавить("ФНС 2019 (УПД:Счет-фактура и первичный документ)");
		КонецЕсли;
	ИначеЕсли ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") Тогда
		Если ИспользоватьУКД Тогда
			ФорматыДляУдаления.Добавить("ФНС 5.02");
			ФорматыДляУдаления.Добавить("ФНС 5.01 (УКД:Корректировочный счет-фактура)");
		Иначе
			ФорматыДляУдаления.Добавить("ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ИдентификаторФормата Из ФорматыДляУдаления Цикл
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ИдентификаторФормата);
		Если ЭлементСписка <> Неопределено Тогда
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокВыбора;
КонецФункции

// Только для внутреннего использования
Процедура ОбработкаЗавершенияТестаСертификата(Результат, Контекст) Экспорт
	
	ОбработкаЗавершения = Контекст.ОбработкаЗавершения;
	Контекст.ДополнительныеПараметры.Очистить();
	Контекст.Очистить();
	
	Если ТипЗнч(ОбработкаЗавершения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО(РезультатВыполнения, Контекст) Экспорт
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://portal.1c.ru/applications/30/licenseAgreement");
	
КонецПроцедуры

Процедура ОбработатьПредставлениеДанныхДляОператораЭДО(РезультатВыполнения, Контекст) Экспорт
	
	ШаблонИмениВременногоФайла = НСтр("ru = 'Данные для регистрации у оператора ЭДО_%1';
										|en = 'Data for registration with EDI_%1 provider'");
	ИмяВременногоФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениВременногоФайла,
		Контекст.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяВременногоФайла, "xml");
	
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(Контекст.ДвоичныеДанныеДляОператораЭДО, Новый УникальныйИдентификатор);
	Контекст.Вставить("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДвоичныеДанныеФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	Результат.Вставить("ДатаМодификацииУниверсальная", ОбщегоНазначенияКлиент.ДатаСеанса());
	Результат.Вставить("ОтносительныйПуть", Контекст.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО + "\");
	Результат.Вставить("ИмяФайла",          ИмяВременногоФайлаСРасширением);
	Результат.Вставить("Наименование",      ИмяВременногоФайла);
	Результат.Вставить("Расширение",        "xml");
	Результат.Вставить("ДляРедактирования", Ложь);
	Результат.Вставить("Редактирует",       Неопределено);
	Результат.Вставить("Версия",            ПредопределенноеЗначение("Справочник.ВерсииФайлов.ПустаяСсылка"));
	Результат.Вставить("ТекущаяВерсия",     ПредопределенноеЗначение("Справочник.ВерсииФайлов.ПустаяСсылка"));
	Результат.Вставить("ХранитьВерсии",     Ложь);
	Результат.Вставить("РабочийКаталогВладельца",  "");
	Результат.Вставить("ПолноеИмяФайлаВРабочемКаталоге", "");
	Результат.Вставить("ВРабочемКаталогеНаЧтение", Ложь);
	Результат.Вставить("ПолноеНаименованиеВерсии", ИмяВременногоФайла);
	Результат.Вставить("НаЧтение",   Истина);
	Результат.Вставить("Зашифрован", Ложь);
	Результат.Вставить("Размер",     Контекст.ДвоичныеДанныеДляОператораЭДО.Размер());
	Результат.Вставить("Ссылка",     ПредопределенноеЗначение("Справочник.ВерсииФайлов.ПустаяСсылка"));
	Результат.Вставить("ФайлРедактируетТекущийПользователь",     Ложь);
	
	РаботаСФайламиКлиент.ОткрытьФайл(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияСертификатовВСервисеЭДО

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДО(Оповещение, ДанныеПакета) Экспорт
	
	Если НЕ (ДанныеПакета.Свойство("РеквизитыПакета") И ЗначениеЗаполнено(ДанныеПакета.РеквизитыПакета))
		ИЛИ НЕ (ДанныеПакета.Свойство("ДвоичныеДанныеДляОператораЭДО") И ЗначениеЗаполнено(ДанныеПакета.ДвоичныеДанныеДляОператораЭДО))
		ИЛИ НЕ (ДанныеПакета.Свойство("ДвоичныеДанныеСоглашенияНаПодключениеЭДО") 
			И ЗначениеЗаполнено(ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО)) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	Контекст.Вставить("РеквизитыПакета", ДанныеПакета.РеквизитыПакета);
	Контекст.Вставить("ДвоичныеДанныеДляОператораЭДО", ДанныеПакета.ДвоичныеДанныеДляОператораЭДО);
	Контекст.Вставить("ОператорЭДОСертификат", ДанныеПакета.ОператорЭДОСертификат);
	Контекст.Вставить("Оповещение", Оповещение);
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеПодписания", ЭтотОбъект, Контекст);
	
	ОписаниеДанных = Новый Структура;
	
	Операция = НСтр("ru = 'Подписание регистрационных данных на подключение к сервису 1С-ЭДО';
					|en = 'Sign registration data for connection to 1C:EDI service'");
	ОписаниеДанных.Вставить("Операция", Операция);
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ДанныеПакета.ДобавляемыйСертификат);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("НаборДанных",         Новый Массив);
	ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО));
	ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДанныеПакета.ДвоичныеДанныеДляОператораЭДО));
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	
	СписокПредставлений = Новый СписокЗначений;
	
	Представление = НСтр("ru = 'Пользовательское соглашение на подключение к сервису 1С-ЭДО';
						|en = 'User agreement on connection to 1C:EDI service'");
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО", ЭтотОбъект, Контекст);
	СписокПредставлений.Добавить(ОписаниеПредставленияЗаявления, Представление);
	
	Представление = НСтр("ru = 'Данные для регистрации учетной записи у оператора ЭДО';
						|en = 'Data for account registration with EDI provider'");
	ОписаниеПредставленияДанных = Новый ОписаниеОповещения("ОбработатьПредставлениеДанныхДляОператораЭДО", ЭтотОбъект, Контекст);
	СписокПредставлений.Добавить(ОписаниеПредставленияДанных, Представление);
	
	ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	ОписаниеДанных.Вставить("ПредставлениеНабора", НСтр("ru = 'Пользовательское соглашение, Данные для регистрации у оператора ЭДО';
														|en = 'User agreement, Data for registration from EDI provider'"));
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеПодписания(РезультатВыполнения, Контекст) Экспорт
	
	Если Контекст.Свойство("СсылкаНаДвоичныеДанныеФайла") Тогда
		УдалитьИзВременногоХранилища(Контекст.СсылкаНаДвоичныеДанныеФайла);
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		// Оповещение произошло из процедуры БСП
		Если РезультатВыполнения.Свойство("НаборДанных") Тогда
			// Если Успех, необходимо перебрать элементы массива Набор данных
			// в подписанных эд в элементе массива являющимся структурой будет свойство "Свойства подписи"
			// такие ЭД надо добавить в массив "МассивЭД" для обновления их статусов.
			Для Каждого ПодписываемыеДанные Из РезультатВыполнения.НаборДанных Цикл
				Если Не ПодписываемыеДанные.Свойство("СвойстваПодписи") Тогда
					ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
					Контекст.Очистить();
					Возврат;
				КонецЕсли;
				
				СтруктураПодписи = ПодписываемыеДанные.СвойстваПодписи;
				Если ЭтоАдресВременногоХранилища(ПодписываемыеДанные.СвойстваПодписи) Тогда
					СтруктураПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи);
				КонецЕсли;
				Если Контекст.ДвоичныеДанныеСоглашенияНаПодключениеЭДО = ПодписываемыеДанные.Данные Тогда
				
					Контекст.Вставить("ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО", СтруктураПодписи.Подпись);
				КонецЕсли;
				Если Контекст.ДвоичныеДанныеДляОператораЭДО = ПодписываемыеДанные.Данные Тогда
				
					Контекст.Вставить("ПодписанныеДвоичныеДанныеДляОператораЭДО", СтруктураПодписи.Подпись);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Подготовим сертификат оператора ЭДО для шифрования информации
	Если Не ЗначениеЗаполнено(Контекст.ОператорЭДОСертификат) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка получения сертификата оператора ЭДО.
									|Необходимо повторить получение идентификатора участника ЭДО.';
									|en = 'An error occurred while receiving EDI provider certificate.
									|Try to receive the EDI participant ID again.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Зашифровать
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеШифрования", ЭтотОбъект, Контекст);
	
	ТекстСертификата = Контекст.ОператорЭДОСертификат;
	Если СтрНайти(ТекстСертификата, "-----BEGIN CERTIFICATE-----") > 0 Тогда
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----BEGIN CERTIFICATE-----", "");
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----END CERTIFICATE-----", "");
	КонецЕсли;
	ТекстСертификата = СтрЗаменить(ТекстСертификата, " ", ""); // из-за пробелов получаются пустые двоичные данные дальше
	ДвоичныеДанныеСертификатаОператораЭДО = Base64Значение(ТекстСертификата);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование данных для регистрации у оператора ЭДО';
														|en = 'Data encryption for registration by EDI provider'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ДвоичныеДанныеСертификатаОператораЭДО);
	ОписаниеДанных.Вставить("НаборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	ОписаниеДанных.Вставить("Данные",              Контекст.ДвоичныеДанныеДляОператораЭДО);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл';
														|en = 'File'"));
	ОписаниеДанных.Вставить("БезПодтверждения",    Ложь);
	
	Представление = Новый Структура;
	Представление.Вставить("Представление", НСтр("ru = 'Данные для регистрации у оператора ЭДО';
												|en = 'Data for registration with EDI provider'"));
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеДанныхДляОператораЭДО", ЭтотОбъект, Контекст);
	Представление.Вставить("Значение",      ОписаниеПредставленияЗаявления);
	
	ОписаниеДанных.Вставить("Представление",       Представление);
	
	ЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДОПослеШифрования(РезультатВыполнения, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если Не РезультатВыполнения.Свойство("ЗашифрованныеДанные") Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
			Контекст.Очистить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Контекст.Вставить("ЗашифрованныеДанныеОператораЭДО", РезультатВыполнения.ЗашифрованныеДанные);
	СформироватьИОтправитьРегистрационныйПакет1СЭДОЗавершение(Контекст);
	
КонецПроцедуры

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДОАутентификация(Результат, Контекст = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		// Пользователь отказался от ввода логина и пароля.
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		Возврат;
	КонецЕсли;
	
	СформироватьИОтправитьРегистрационныйПакет1СЭДОЗавершение(Контекст);
	
КонецПроцедуры

Процедура ПроверитьВыполнениеЗаявкиНаРегистрацию(Результат, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

// См. ОбменСКонтрагентамиКлиент.ОткрытьСопоставлениеНоменклатуры.
Процедура ОткрытьСопоставлениеНоменклатуры(Знач НоменклатураКонтрагентов, Знач Настройки = Неопределено, Знач ОповещениеОЗакрытии = Неопределено) Экспорт
	
	Если ТипЗнч(НоменклатураКонтрагентов) <> Тип("Массив") Тогда
		НоменклатураКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоменклатураКонтрагентов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураКонтрагентов) Тогда
		ТекстСообщения = НСтр("ru = 'Данные для сопоставления номенклатуры отсутствуют.';
								|en = 'Data for product mapping is missing.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИсполняемыеНастройки = Новый Структура;
	ИсполняемыеНастройки.Вставить("РазрешитьСохранение", Истина);
	ИсполняемыеНастройки.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.Независимый);
	ИсполняемыеНастройки.Вставить("Заголовок", Неопределено);
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ИсполняемыеНастройки, Настройки);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НоменклатураКонтрагентов", НоменклатураКонтрагентов);
	ПараметрыФормы.Вставить("РазрешитьСохранение", ИсполняемыеНастройки.РазрешитьСохранение);
	Если ЗначениеЗаполнено(ИсполняемыеНастройки.Заголовок) Тогда
		ПараметрыФормы.Вставить("Заголовок", ИсполняемыеНастройки.Заголовок);
	КонецЕсли;
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыБЭД.Форма", 
		ПараметрыФормы,,,,, ОповещениеОЗакрытии, ИсполняемыеНастройки.РежимОткрытияОкна);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиКлиент.ОткрытьВыборНоменклатурыКонтрагента.
Процедура ОткрытьВыборНоменклатурыКонтрагента(Знач ВладелецНоменклатуры, Знач ВладелецФормы) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецНоменклатуры", ВладелецНоменклатуры);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ОткрытьФорму("РегистрСведений.НоменклатураКонтрагентовБЭД.Форма.ФормаВыбора",
		ПараметрыФормы, ВладелецФормы,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуНоменклатуры.
Процедура ОткрытьФормуНоменклатуры(Знач Параметры, Знач Владелец, Знач Уникальность, Знач ОповещениеОЗакрытии) Экспорт
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуНоменклатуры(Параметры, Владелец, Уникальность, ОповещениеОЗакрытии);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры.
Процедура ОткрытьФормуВыбораНоменклатуры(Знач Параметры, Знач Владелец, Знач Уникальность) Экспорт
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры(Параметры, Владелец, Уникальность);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиКлиент.ОткрытьСписокНоменклатурыКонтрагентов.
Процедура ОткрытьСписокНоменклатурыКонтрагентов() Экспорт
	
	ОткрытьФорму("РегистрСведений.НоменклатураКонтрагентовБЭД.ФормаСписка");
	
КонецПроцедуры

// Начинает создание номенклатуры информационной базы по данным контрагента.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагентов, по которой нужно создать номенклатуру информационной базы.
//                                           См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое нужно выполнить после создания номенклатуры с результатом,
//                                               представляющим массив структур со свойствами:
//   * НоменклатураКонтрагента - Структура - элемент из параметра НаборНоменклатурыКонтрагентов, для которого создана номенклатура.
//   * НоменклатураИБ - Структура - описание созданной номенклатуры. См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
Процедура НачатьСозданиеНоменклатурыПоДаннымКонтрагента(Знач НаборНоменклатурыКонтрагентов, Знач ОповещениеОЗавершении = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ПриСозданииНоменклатурыПоДаннымКонтрагента(
		НаборНоменклатурыКонтрагентов, ОповещениеОЗавершении, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

// Показывает окно для ввод (выбора) значения учетного документа.
// Выбранное значение передается в оповещение о выборе.
//
// Параметры:
//  Настройки - Структура - настройки подбора учетного документа.
//   * ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных для выбора.
//   * ИмяТипаСсылки - Строка - имя типа ссылки для выбора. Например, "ДокументСсылка.ПоступлениеТоваровУслуг".
//   * Контрагент - ОпределяемыйТип.УчастникЭДО - контрагент по электронному документу.
//   * Организация - ОпределяемыйТип.Организация - организация по электронному документу.
//  ОповещениеОВыборе - ОписаниеОповещения - оповещение, которое выполняется при вводе (выборе) значения.
//
Процедура ПоказатьПодборУчетногоДокумента(Знач Настройки, Знач ОповещениеОВыборе) Экспорт
	
	СтандартнаяОбработка = Истина;
	ОбменСКонтрагентамиКлиентПереопределяемый.ПриПодбореУчетногоДокумента(Настройки, ОповещениеОВыборе, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Подсказка = НСтр("ru = 'Укажите документ отражения в учете';
					|en = 'Specify a document of recording in accounting'");
	ПоказатьВводЗначения(ОповещениеОВыборе,, Подсказка, Новый ОписаниеТипов(Настройки.ИмяТипаСсылки));
	
КонецПроцедуры

#КонецОбласти

#Область НачатьОтправкуПолучениеЭлектронныхДокументов

Процедура ПолучитьНастройкиЭДОИПараметрыСертификатовНачало(Результат, Контекст) Экспорт
	
	ТипРезультата = ТипЗнч(Результат);
	Если ТипРезультата = Тип("Соответствие") Тогда
		МассивОтпечатков = Новый Массив;
		Для Каждого КлючЗначение Из Результат Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ОтпечаткиСертификатов", МассивОтпечатков);
		Контекст.ОтпечаткиСертификатовНаКлиенте = МассивОтпечатков;
		
	ИначеЕсли ТипРезультата = Тип("Структура") Тогда
		ПараметрыЗадания = Результат;
		
	ИначеЕсли Контекст.ПодписыватьНаСервере Тогда
		Контекст.ПроверятьПодписиНаСервере = Истина;
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ОтпечаткиСертификатов", Новый Массив);
		Контекст.ОтпечаткиСертификатовНаКлиенте = Новый Массив;
		
	Иначе
		Контекст.ФормаДлительнойОперации.Закрыть();
		
		Если ТипРезультата = Тип("Строка") Тогда
			ВидОперации = НСтр("ru = 'Получение отпечатков сертификатов.';
								|en = 'Receive certificate thumbprints.'");
			ТекстСообщения = НСтр("ru = 'При получении отпечатков сертификатов произошла ошибка:';
									|en = 'An error occurred while receiving certificate thumbprints:'")
				+ Символы.ПС + Результат;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщения, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания.Вставить("ПовторноеПолучение", Контекст.ПовторноеПолучение);
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьПолучениеНастроекЭДОИПараметровСертификатов(
		ПараметрыЗадания, Контекст.УникальныйИдентификатор);
	
	Контекст.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиЭДОИПараметрыСертификатовЗавершение", ЭтотОбъект, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьНастройкиЭДОИПараметрыСертификатовЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено
		ИЛИ НЕ Контекст.Свойство("ФормаДлительнойОперации") Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		Контекст.ФормаДлительнойОперации.Закрыть();
		
		Если Результат.Статус = "Ошибка" Тогда
			ВидОперации = НСтр("ru = 'Получение настроек ЭДО.';
								|en = 'Receiving EDI settings.'");
			ТекстСообщения = НСтр("ru = 'При получении настроек ЭДО произошла ошибка:';
									|en = 'An error occurred while receiving EDI settings:'")
				+ Символы.ПС + Результат.КраткоеПредставлениеОшибки;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	РезультатПолученияНастроек = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если НЕ Контекст.ПовторноеПолучение Тогда
		ПараметрыОтправкиПолучения = РезультатПолученияНастроек.ПараметрыОтправкиПолучения;
	
		ЕстьПрофилиЭДОБезСертификатов = ПараметрыОтправкиПолучения.Свойство("ПрофилиЭДОБезСертификатов");
		Если НЕ ПараметрыОтправкиПолучения.ЕстьВозможностьОтправкиПолученияЭД Тогда
			
			Контекст.ФормаДлительнойОперации.Закрыть();
			
			Если ЕстьПрофилиЭДОБезСертификатов Тогда
				ОткрытьФормуПомощникаРегистрацииСертификатов("Отправка", , ПараметрыОтправкиПолучения.ПрофилиЭДОБезСертификатов);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	
		Если ЕстьПрофилиЭДОБезСертификатов Тогда
			// Откроем помощник регистрации сертификатов после отправки/получения.
			Контекст.Вставить("ПрофилиЭДОБезСертификатов", ПараметрыОтправкиПолучения.ПрофилиЭДОБезСертификатов);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиЭДОИПараметрыСертификатов = РезультатПолученияНастроек.НастройкиЭДОИПараметрыСертификатов;
	
	НастройкиЭДОИПараметрыСертификатов.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
	
	СоответствиеСоглашенийИСертификатов = Неопределено;
	Если НастройкиЭДОИПараметрыСертификатов.Свойство(
		"СоотвСоглашенийИМассиваСертификатовАвторизации", СоответствиеСоглашенийИСертификатов) Тогда
		
		ИД_Параметров = Строка(Новый УникальныйИдентификатор);
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, НастройкиЭДОИПараметрыСертификатов);
		
		Оповещение = Новый ОписаниеОповещения("ОтправитьПолучитьПакетыЭлектронныхДокументовНачало", ЭтотОбъект, Контекст);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ИД_Параметров",                       ИД_Параметров);
		Параметры.Вставить("ОбработчикОповещения",                Оповещение);
		Параметры.Вставить("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
		Параметры.Вставить("ПаролиКСертификатам",                 Контекст.ПаролиКСертификатам);
		
		РасшифроватьМаркер(Неопределено, Параметры);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов",
			НастройкиЭДОИПараметрыСертификатов.СоответствиеПрофилейИПараметровСертификатов);
			
		ОтправитьПолучитьПакетыЭлектронныхДокументовНачало(ПараметрыОповещения, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПолучитьПакетыЭлектронныхДокументовНачало(Результат, Контекст) Экспорт
	
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	
	Если Не Контекст.Свойство("ПроцессВыполнения") Тогда // первый вход в метод.
		Если ТипЗнч(Результат) <> Тип("Структура")
			ИЛИ НЕ Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов) Тогда
			Контекст.ФормаДлительнойОперации.Закрыть();
			Возврат;
		КонецЕсли;
		Контекст.Вставить("ПроцессВыполнения", Новый Структура);
		Контекст.ПроцессВыполнения.Вставить("Запуск", Результат);
		Контекст.ПроцессВыполнения.Вставить("ПринятыУсловияИспользования", Неопределено);
	ИначеЕсли Контекст.ПроцессВыполнения.Свойство("ТекущийЭтап") Тогда
		Контекст.ПроцессВыполнения.Вставить(Контекст.ПроцессВыполнения.ТекущийЭтап, Результат);
	КонецЕсли;
	
	Если Контекст.ПроцессВыполнения.ПринятыУсловияИспользования = Неопределено Тогда
		Контекст.ПроцессВыполнения.Вставить("ТекущийЭтап", "ПринятыУсловияИспользования");
		ЭтотМетод = Новый ОписаниеОповещения("ОтправитьПолучитьПакетыЭлектронныхДокументовНачало", ЭтотОбъект, Контекст);
		НаборПрофилей = Новый Массив;
		Для каждого КлючЗначение Из СоответствиеПрофилейИПараметровСертификатов Цикл
			НаборПрофилей.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		НачатьПроверкуПринятияУсловийИспользования(НаборПрофилей, ЭтотМетод);
		Возврат;
	ИначеЕсли Контекст.ПроцессВыполнения.ПринятыУсловияИспользования = Ложь Тогда
		Контекст.ФормаДлительнойОперации.Закрыть();
		Возврат;
	КонецЕсли;
	
	ОтправитьПолучитьПакетыЭлектронныхДокументовНачало_Запуск(Контекст.ПроцессВыполнения.Запуск, Контекст);
	
КонецПроцедуры

Процедура ОтправитьПолучитьПакетыЭлектронныхДокументовНачало_Запуск(Результат, Контекст) Экспорт
	
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ НЕ Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов) Тогда
		Контекст.ФормаДлительнойОперации.Закрыть();
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("ПаролиКСертификатам", Контекст.ПаролиКСертификатам);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	ПараметрыЗадания.Вставить("ПовторноеПолучение", Контекст.ПовторноеПолучение);
	ПараметрыЗадания.Вставить("ПроверятьПодписиНаСервере", Контекст.ПроверятьПодписиНаСервере);
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьОтправкуПолучениеПакетовЭлектронныхДокументов(
		ПараметрыЗадания, Контекст.УникальныйИдентификатор);
	
	Контекст.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьПолучитьПакетыЭлектронныхДокументовЗавершение", ЭтотОбъект, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	КонтекстКлиент = Неопределено;
	Контекст.Свойство("КонтекстКлиент", КонтекстКлиент);
	Если ТипЗнч(КонтекстКлиент) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОжидания, КонтекстКлиент, "ВыводитьСообщения");
	КонецЕсли;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОтправитьПолучитьПакетыЭлектронныхДокументовЗавершение(Результат, Контекст) Экспорт
	
	Контекст.Вставить("ИдентификаторЗадания", Неопределено);
	КонтекстКлиент = Неопределено;
	Контекст.Свойство("КонтекстКлиент", КонтекстКлиент);
	
	Если Результат = Неопределено
		ИЛИ НЕ Контекст.Свойство("ФормаДлительнойОперации") Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		Контекст.ФормаДлительнойОперации.Закрыть();
		
		Если Результат.Статус = "Ошибка" Тогда
			ВидОперации = НСтр("ru = 'Отправка и получение электронных документов.';
								|en = 'Sending and receiving electronic documents.'");
			ТекстСообщения = НСтр("ru = 'При выполнении отправки и получения электронных документов произошла ошибка:';
									|en = 'An error occurred when sending and receiving electronic documents:'")
				+ Символы.ПС + Результат.КраткоеПредставлениеОшибки;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	РезультатОтправкиПолучения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатОтправкиПолучения.Свойство("ТребуетсяПовторноеПолучение") Тогда
		Контекст.ПовторноеПолучение = Истина;
		Параметры = Новый Структура;
		Параметры.Вставить("РезультатОтправкиПолучения", РезультатОтправкиПолучения);
		
		ПолучитьНастройкиЭДОИПараметрыСертификатовНачало(Параметры, Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ОбновленоСоглашений", Контекст.ОбновленоСоглашений
		+ РезультатОтправкиПолучения.ОбновленоСоглашений);
	Контекст.Вставить("ОтправленоПакетов", Контекст.ОтправленоПакетов + РезультатОтправкиПолучения.ОтправленоПакетов);
	Контекст.Вставить("ПолученоПакетов",   Контекст.ПолученоПакетов + РезультатОтправкиПолучения.ПолученоПакетов);
	
	ДанныеПакетов = Неопределено;
	Если Контекст.ПроверятьПодписиНаСервере
		И РезультатОтправкиПолучения.Свойство("РаспакованныеДокументы") Тогда
		РаспаковатьПакетыЭлектронныхДокументовЗавершение(РезультатОтправкиПолучения, Контекст);
		
	ИначеЕсли РезультатОтправкиПолучения.Свойство("ДанныеПакетов", ДанныеПакетов) Тогда
		Оповещение = Новый ОписаниеОповещения("РаспаковатьПакетыЭлектронныхДокументовНачало", ЭтотОбъект, Контекст);
		НачатьОбработкуВходящихПакетовЭлектронныхДокументов(Оповещение, ДанныеПакетов);
		
	Иначе
		
		ПрофилиЭдоБезСертификатов = Неопределено;
		ОткрыватьПомощникРегистрацииСертификатов = Контекст.Свойство("ПрофилиЭДОБезСертификатов", ПрофилиЭдоБезСертификатов);
		
		Контекст.ФормаДлительнойОперации.Закрыть();
		
		Если ОткрыватьПомощникРегистрацииСертификатов Тогда
			ОткрытьФормуПомощникаРегистрацииСертификатов("Отправка", , ПрофилиЭдоБезСертификатов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Сообщения) Тогда
		Для каждого ТекущееСообщение Из Результат.Сообщения Цикл
			Если ТипЗнч(КонтекстКлиент) = Тип("Структура") Тогда
				ТекущееСообщение.ИдентификаторНазначения = КонтекстКлиент.ИдентификаторФормыВладельца;
			КонецЕсли;
			ТекущееСообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспаковатьПакетыЭлектронныхДокументовНачало(ДанныеПакетовЭД, Контекст) Экспорт
	
	КоличествоЭлементовКоллекции = ДанныеПакетовЭД.Количество();
	Для Счетчик = 1 По КоличествоЭлементовКоллекции Цикл
		ОбратныйИндекс = КоличествоЭлементовКоллекции - Счетчик;
		ПакетЭД = ДанныеПакетовЭД[ОбратныйИндекс];
		
		Если ПакетЭД.Свойство("ОписаниеОшибки") Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакетаЭД: %1 возникла ошибка:
			|%2.';
			|en = 'An error occurred when unpacking ED package: %1:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД.ПакетЭДСсылка,
				ПакетЭД.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ДанныеПакетовЭД.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДанныеПакетовЭД", ДанныеПакетовЭД);
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьРаспаковкуПакетовЭлектронныхДокументов(ПараметрыЗадания, Контекст.УникальныйИдентификатор);
	
	Контекст.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);
	
	Оповещение = Новый ОписаниеОповещения("РаспаковатьПакетыЭлектронныхДокументовЗавершение", ЭтотОбъект, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура РаспаковатьПакетыЭлектронныхДокументовЗавершение(Результат, Контекст) Экспорт
	
	Контекст.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Контекст.ПроверятьПодписиНаСервере Тогда
		РезультатРаспаковки = Результат;
	ИначеЕсли Результат = Неопределено
		ИЛИ НЕ Контекст.Свойство("ФормаДлительнойОперации") Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		Контекст.ФормаДлительнойОперации.Закрыть();
		
		Если Результат.Статус = "Ошибка" Тогда
			ВидОперации = НСтр("ru = 'Распаковка пакетов электронных документов.';
								|en = 'Unpacking electronic document packages.'");
			ТекстСообщения = НСтр("ru = 'При распаковки пакетов электронных документов произошла ошибка:';
									|en = 'An error occurred when unpacking electronic document packages:'")
				+ Символы.ПС + Результат.КраткоеПредставлениеОшибки;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	Иначе
		РезультатРаспаковки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	МассивСлужебныхЭД = РезультатРаспаковки.РаспакованныеДокументы.МассивСлужебныхЭД;
	
	НовыеДокументы = РезультатРаспаковки.РаспакованныеДокументы.НовыеДокументы;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеДокументы, МассивСлужебныхЭД);
	
	Контекст.Вставить("РаспакованоПакетов", РезультатРаспаковки.РаспакованоПакетов);
	Контекст.Вставить("НовыеДокументы", НовыеДокументы);
	
	Если МассивСлужебныхЭД.Количество() > 0 Тогда
		
		ПодписатьОтправитьСлужебныеДокументы(МассивСлужебныхЭД, Контекст.ОтпечаткиСертификатовНаКлиенте);
		
	КонецЕсли;
	
	Контекст.ФормаДлительнойОперации.Закрыть();
	
КонецПроцедуры

Процедура ЗавершитьОтправкуПолучениеЭлектронныхДокументов(Результат, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Контекст.ИдентификаторЗадания) Тогда
		ОбменСКонтрагентамиСлужебныйВызовСервера.ОтменитьВыполнениеЗадания(Контекст.ИдентификаторЗадания);
	КонецЕсли;
	
	ШаблонОповещения = НСтр("ru = 'Отправлено:(%1), Получено:(%2), Распаковано:(%3)';
							|en = 'Sent:(%1), Received:(%2), Unpacked:(%3)'");
	ТекстОповещения = СтрШаблон(ШаблонОповещения,
		Контекст.ОтправленоПакетов, Контекст.ПолученоПакетов, Контекст.РаспакованоПакетов);
	ЗаголовокОповещения = НСтр("ru = 'Электронные документы';
								|en = 'Electronic documents'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	НовыеДокументы = Неопределено;
	Если Контекст.Свойство("НовыеДокументы", НовыеДокументы) Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ЭлектронныеДокументы", НовыеДокументы);
		Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	ИначеЕсли Контекст.ОбновленоСоглашений > 0 Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	ПрофилиЭДОБезСертификатов = Неопределено;
	Если Контекст.Свойство("ПрофилиЭДОБезСертификатов", ПрофилиЭДОБезСертификатов) Тогда
		ОткрытьФормуПомощникаРегистрацииСертификатов("Отправка", , ПрофилиЭДОБезСертификатов);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
	
	Контекст.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область УсловияИспользования

Функция ПризнакПринятияУсловийИспользования(Знач НаборПрофилейНастроекЭДО)
	
	ВсеПризнаки = ОбменСКонтрагентамиСлужебныйКлиентПовтИсп.ПризнакПринятияУсловийИспользования();
	
	Признаки = Новый Соответствие;
	
	Для каждого Профиль Из НаборПрофилейНастроекЭДО Цикл
		// Если в сохраненных данных нет профиля, то это новый профиль.
		// Для нового профиля считаем, что условия приняты при его создании.
		Значение = ?(ВсеПризнаки[Профиль] = Неопределено, Истина, ВсеПризнаки[Профиль]);
		Признаки.Вставить(Профиль, Значение);
	КонецЦикла;
	
	Возврат Признаки;
	
КонецФункции

Процедура НачатьПроверкуПринятияУсловийИспользования(Знач НаборПрофилейНастроекЭДО, Знач ОбработкаПродолжения)
	
	ПризнакПринятияУсловий = ПризнакПринятияУсловийИспользования(НаборПрофилейНастроекЭДО);
	
	НеПринято = Новый Массив;
	Для каждого КлючЗначение Из ПризнакПринятияУсловий Цикл
		Если Не КлючЗначение.Значение Тогда
			НеПринято.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НеПринято) Тогда
		ЗавершитьПроверкуПринятияУсловийИспользования(Истина, ОбработкаПродолжения);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗавершитьПроверкуПринятияУсловийИспользования", ЭтотОбъект, ОбработкаПродолжения);
	
	ОткрытьФормуПринятияУсловийИспользования(НеПринято, ОбработкаЗавершения)
	
КонецПроцедуры

Процедура ЗавершитьПроверкуПринятияУсловийИспользования(Знач ПринятыУсловияИспользования, Знач ОбработкаПродолжения) Экспорт
	
	Если ПринятыУсловияИспользования = Неопределено Тогда
		ПринятыУсловияИспользования = Ложь;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ПринятыУсловияИспользования);
	
КонецПроцедуры

Процедура ОткрытьФормуПринятияУсловийИспользования(Знач НаборПрофилейНастроекЭДО = Неопределено, Знач ОбработкаЗавершения = Неопределено) Экспорт
	
	СписокПрофилейНастроекЭДО = Новый СписокЗначений;
	Если ЗначениеЗаполнено(НаборПрофилейНастроекЭДО) Тогда
		СписокПрофилейНастроекЭДО.ЗагрузитьЗначения(НаборПрофилейНастроекЭДО);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокПрофилейНастроекЭДО", СписокПрофилейНастроекЭДО);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.УсловияИспользования", 
		ПараметрыФормы,,,,, ОбработкаЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД.
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭП.
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров.
//  Параметры - дополнительные параметры обработки.
//
Процедура ПодготовитьИОтправитьПЭД(
	ДобавленныеФайлы,
	ПризнакПодписи,
	СоответствиеПрофилейИПараметровСертификатов = Неопределено,
	Параметры = Неопределено,
	ОбработчикПослеОтправкиПЭД = Неопределено)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДобавленныеФайлы", ДобавленныеФайлы);
	ДопПараметры.Вставить("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	НемедленнаяОтправкаЭД = Истина;
	Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД)
		И ТипЗнч(НемедленнаяОтправкаЭД) = Тип("Булево")) Тогда
		
		ВыполнятьКриптооперацииНаСервере = Неопределено;
		ОбменСКонтрагентамиСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодготовитьИОтправитьПЭДПродолжить", ЭтотОбъект, ДопПараметры);
	Если (СоответствиеПрофилейИПараметровСертификатов = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов)) И НемедленнаяОтправкаЭД Тогда
		
		ПолучитьНастройкиЭДОИПараметрыСертификатов(ОписаниеОповещения, , ДобавленныеФайлы);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьПакетыДляОтправки(Параметры)
	
	Если Не Параметры.Свойство("ИндексПеребораПакетов") Тогда
		Параметры.Вставить("ИндексПеребораПакетов", 0);
	КонецЕсли;
	
	Если Не Параметры.Свойство("ИндексПеребораДанных") Тогда
		Параметры.Вставить("ИндексПеребораДанных", -1);
	КонецЕсли;
	
	ВложенныеПараметры = Неопределено;
	СоответствиеДанныхПакетов = Неопределено;
	МенеджерКриптографии = Неопределено;
	Если Параметры.Свойство("Параметры", ВложенныеПараметры) И ТипЗнч(ВложенныеПараметры) = Тип("Структура") Тогда
		ВложенныеПараметры.Свойство("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
		ВложенныеПараметры.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Если ТипЗнч(СоответствиеДанныхПакетов) = Тип("Соответствие") Тогда
		Если СоответствиеДанныхПакетов.Количество() > Параметры.ИндексПеребораПакетов Тогда
			ТекИндексПакета = -1;
			// Определяем текущий обрабатываемый пакет
			Для Каждого КлючЗначение Из СоответствиеДанныхПакетов Цикл
				ТекИндексПакета = ТекИндексПакета + 1;
				Если ТекИндексПакета = Параметры.ИндексПеребораПакетов Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			МассивДанныхЭД = КлючЗначение.Значение;
			
			Если Параметры.ИндексПеребораДанных + 1 < МассивДанныхЭД.Количество() Тогда
				Параметры.ИндексПеребораДанных = Параметры.ИндексПеребораДанных + 1;
				
				ДанныеЭД = МассивДанныхЭД[Параметры.ИндексПеребораДанных];
				
				Если ДанныеЭД.ЭтоОтправкаПодтверждения Тогда
					ПодготовитьПакетыДляОтправки(Параметры);
					Возврат;
				КонецЕсли;
				
				ПараметрыШифрования = ДанныеЭД.ПараметрыШифрования;
				Если ПараметрыШифрования = Неопределено Тогда
					ПодготовитьПакетыДляОтправки(Параметры);
					Возврат;
				КонецЕсли;
				
				МассивСертификатов = Новый Массив;
				Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
					ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
					Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
				НеЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				
				Оповещение = Новый ОписаниеОповещения("СоздатьПакетЭДПослеШифрования", ЭтотОбъект, Параметры);
				
				Попытка
					МенеджерКриптографии.НачатьШифрование(Оповещение, НеЗашифрованныеДанные, МассивСертификатов);
				Исключение
					ВидОперации = НСтр("ru = 'Шифрование данных';
										|en = 'Data encryption'");
					ТекстСообщения = НСтр("ru = 'При шифровании данных произошла ошибка: %1';
											|en = 'An error occurred when encrypting data: %1'");
					КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ОписаниеОшибки());
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ТекстСообщения, КраткоеПредставлениеОшибки);
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
									ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, "ЭлектронноеВзаимодействие");
					ПодготовитьПакетыДляОтправки(Параметры);
				КонецПопытки
				
			Иначе
				Параметры.ИндексПеребораДанных = -1;
				Параметры.ИндексПеребораПакетов = Параметры.ИндексПеребораПакетов + 1; // переходим к обработке следующего пакета
				ПодготовитьПакетыДляОтправки(Параметры);
			КонецЕсли;
			Возврат
		КонецЕсли;
		
		Параметры.Удалить("ИндексПеребораПакетов");
		Параметры.Удалить("ИндексПеребораДанных");
		
		КолОтправленных = 0;
		ОбменСКонтрагентамиСлужебныйВызовСервера.СохранитьИОтправитьЗашифрованныеДанные(
				СоответствиеДанныхПакетов, Параметры.СоответствиеПрофилейИПараметровСертификатов, КолОтправленных);
		Параметры.РезультатОтправкиПЭД.КолОтправленных = Параметры.РезультатОтправкиПЭД.КолОтправленных + КолОтправленных;
	КонецЕсли;
	ВыполнитьДействияПослеОтправкиПЭДЗавершить(Параметры);
	
КонецПроцедуры

// Получение соответствия сертификатов.
//
// Параметры:
//  СоответствиеПрофилей - Структура - данные сертификатов.
// 
// Возвращаемое значение:
//  Соответствие - сертификат и значение.
//
Функция ПараметрыСертификатов(СоответствиеПрофилей)
	
	Результат = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеПрофилей Цикл
		Результат.Вставить(КлючЗначение.Значение.СертификатПодписи, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполнение проверки проведения документов.
Процедура ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры)
	
	ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
		ДополнительныеПараметры.ПараметрКоманды, ДополнительныеПараметры.Обработчик, ДополнительныеПараметры.Источник);

КонецПроцедуры

// Вызывается из процедуры ВыполнитьДействияПослеОтправкиПЭД(...).
// Выполняет описание оповещения переданное в параметре ОбработчикПослеОтправкиПЭД.
//
// Параметры:
//   ДопПараметры - Структура:
//      РезультатОтправкиПЭД       - Структура:
//         
//      Параметры                  - Структура - необязательный параметр, дополнительные параметры,
//                                               переданные из метода инициировавшего отправку ПЭД.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения - необязательный параметр, обработка результата отправки ПЭД.
//
Процедура ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры)
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
		
	Если ТипЗнч(ОбработчикПослеОтправкиПЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПослеОтправкиПЭД, РезультатОтправкиПЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьСлужебныйЭД(СсылкаНаЭД,
	ВидЭД, ТекстУточнения = "", ДопПараметры = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ТипЗнч(СсылкаНаЭД) <> Тип("Массив") Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(СсылкаНаЭД);
	Иначе
		МассивЭД = СсылкаНаЭД;
	КонецЕсли;
	
	ОбменСКонтрагентамиКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД,
		ТекстУточнения, ДопПараметры, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено, ДопПараметры = Неопределено)
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", ДопПараметры, ЭД);;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументыВладельцы", МассивСсылок);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
КонецПроцедуры

Процедура ЗаполнитьПароли(ПараметрыСертификата, Результат)
	
	ПараметрыСертификата.ПарольПользователя = Результат.ПарольПользователя;
	Если ПараметрыСертификата.Свойство("Пользователь") И Результат.Свойство("Пользователь") Тогда
		ПараметрыСертификата.Пользователь = Результат.Пользователь;
	КонецЕсли;
	ПараметрыСертификата.ПарольПолучен = Истина;
	
КонецПроцедуры

// Проверка статусов подписей после подписания электронных документов
//
// Параметры:
//  Параметры - Структура - данные электронных документов.
//
Процедура ДействияПослеПодписанияЭД(Параметры)
	
	СоответствиеСертификатовПодписаннымЭд = Неопределено;
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд)
		И ТипЗнч(СоответствиеСертификатовПодписаннымЭд) = Тип("Соответствие") Тогда
		
		ЭДСНезавершеннойПодписью = Новый Массив;
		ОбменСКонтрагентамиСлужебныйВызовСервера.ДействияПослеПодписанияЭДНаСервере(
			СоответствиеСертификатовПодписаннымЭд, ЭДСНезавершеннойПодписью);
		
		// Исключим из очереди к отправке не полностью подписанные документы
		Для Каждого ЭД Из ЭДСНезавершеннойПодписью Цикл
			Параметры.МассивЭДКУдалениюИзОтправки.Добавить(ЭД);
		КонецЦикла;
		
		Для Каждого СертификатМассивЭД Из СоответствиеСертификатовПодписаннымЭд Цикл
			Для Каждого ЭД Из СертификатМассивЭД.Значение Цикл
				ОпределитьСтатусыПодписей(ЭД, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОтправкаЭД(Параметры);
	
КонецПроцедуры

// Выполнение отправки электронного документа.
// Параметры:
//   Параметры - Структура - данные электронного документа.
//
Процедура ОтправкаЭД(Параметры)
	
	Результат = Параметры.Результат;
	МассивЭДКУдалениюИзОтправки = Параметры.МассивЭДКУдалениюИзОтправки;
	НемедленнаяОтправкаЭД = Параметры.НемедленнаяОтправкаЭД;
	СоотвСертификатовИИхСтруктур = Параметры.СоотвСертификатовИИхСтруктур;
	СоотвСоглашенийИСертификатовАвторизации = Неопределено;
	СоотвСоглашенийИМассивовЭДКОтправке = Неопределено;
	НастройкиЭДОСЭДКОтправке = Неопределено;
	СтруктураКОтправке = Неопределено;
	Если Результат.Свойство("СтруктураКОтправке", СтруктураКОтправке) Тогда
		Параметры.Вставить("СоотвСоглашенийИСтруктурСертификатов", Новый Соответствие);
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
		МассивЭД = Неопределено;
		Если СтруктураКОтправке.Свойство("БезПодписи", МассивЭД) И ТипЗнч(МассивЭД) = Тип("Массив")
			И МассивЭД.Количество() > 0 Тогда
			
			Параметры.Вставить("МассивКОтправкеБезПодписи", МассивЭД);
		КонецЕсли;
		
		Если СтруктураКОтправке.Свойство("СПодписью", МассивЭД) И ТипЗнч(МассивЭД) = Тип("Массив") Тогда
			Если МассивЭДКУдалениюИзОтправки.Количество() > 0 И МассивЭД.Количество() > 0 Тогда
				Для Каждого УдаляемыйЭД Из МассивЭДКУдалениюИзОтправки Цикл
					ТекИндекс = МассивЭД.Найти(УдаляемыйЭД);
					Если ТекИндекс <> Неопределено Тогда
						МассивЭД.Удалить(ТекИндекс);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			МассивЭД = Новый Массив;
		КонецЕсли;
		
		Параметры.Вставить("МассивКОтправке", МассивЭД);
		МассивКОтправке = Параметры.МассивКОтправке;
		
		Если НЕ (Результат.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
			И ТипЗнч(СоотвСоглашенийИСертификатовАвторизации) = Тип("Соответствие")) Тогда
			СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
		КонецЕсли;
			
		РасшифроватьМаркер = Ложь;
		Если СтруктураКОтправке.Свойство("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке)
			И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие")
			И СоотвСоглашенийИМассивовЭДКОтправке.Количество() Тогда
			Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				ПрофильНастроекЭДО = ТекЭл.Ключ;
				РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(
					ПрофильНастроекЭДО);
				ЕстьЭдКОтправке = Ложь;
				Для Каждого ОтправляемыйЭД Из ТекЭл.Значение Цикл
					Если МассивЭДКУдалениюИзОтправки.Найти(ОтправляемыйЭД) = Неопределено Тогда
						МассивКОтправке.Добавить(ОтправляемыйЭД);
						ЕстьЭдКОтправке = Истина;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьЭдКОтправке Тогда
					МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
					Если НемедленнаяОтправкаЭД И ЗначениеЗаполнено(МассивСертификатов) Тогда
						// На клиента массив ЭД к отправке через ОЭДО, может прийти только в том случае,
						// если не было возможности отправить эти ЭД с сервера (нет пароля к сертификату).
						ЕстьМаркер = Ложь;
						Для Каждого Сертификат Из МассивСертификатов Цикл
							
							КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
							СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
							
							МаркерРасшифрованный = Неопределено;
							Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
								
								СоотвСоглашенийИСтруктурСертификатов.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
								ЕстьМаркер = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ ЕстьМаркер Тогда
							// Отправка будет продолжена после расшифровки маркеров.
							РасшифроватьМаркер = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РасшифроватьМаркер Тогда
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуЭДПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
			
			ИД_Параметров = Строка(Новый УникальныйИдентификатор);
			ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, Параметры);
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИД_Параметров", ИД_Параметров);
			ДопПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
			ДопПараметры.Вставить("СоответствиеСоглашенийИСертификатов", СоотвСоглашенийИСертификатовАвторизации);
			
			Если Параметры.Свойство("ПаролиКСертификатам") Тогда
				ДопПараметры.Вставить("ПаролиКСертификатам", Параметры.ПаролиКСертификатам);
			КонецЕсли;
			
			РасшифроватьМаркер(Неопределено, ДопПараметры);
		Иначе
			ЗавершитьОтправкуЭД(Неопределено, Параметры);
		КонецЕсли;
	Иначе
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры РасшифроватьМаркер(), по выполнению Описания Оповещения созданного
// в процедуре ОтправкаЭД(Параметры).
//
// Параметры:
//   Результат - Структура:
//               СоответствиеПрофилейИПараметровСертификатов - Соответствие:
//                                   Ключ     - СправочникСсылка.ПараметрыНастроекЭДО.
//                                   Значение - Структура:
//                                              МаркерРасшифрованный - ДвоичныеДанные - расшифрованного маркера.
//                                              прочие реквизиты сертификата (необязательно).
//
//   Параметры - Структура:
//               СоотвСоглашенийИСтруктурСертификатов - Соответствие
//                                                      Ключ     - СправочникСсылка.ПараметрыНастроекЭДО.
//                                                      Значение - Структура - Параметры сертификата.
//               МассивКОтправке - Массив - ЭД подготовленные к отправке.
//
Процедура ПродолжитьОтправкуЭДПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Неопределено;
	Если НЕ (Параметры.Свойство("СоотвСоглашенийИСтруктурСертификатов", СоотвСоглашенийИСтруктурСертификатов)
			 И ТипЗнч(СоотвСоглашенийИСтруктурСертификатов) = Тип("Соответствие")) Тогда
		
		Параметры.Вставить("СоотвСоглашенийИСтруктурСертификатов", Новый Соответствие);
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	КонецЕсли;
	
	ВозврСоответствие = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
		И ТипЗнч(ВозврСоответствие) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ВозврСоответствие Цикл
			СоотвСоглашенийИСтруктурСертификатов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗавершитьОтправкуЭД(Неопределено, Параметры);
	
КонецПроцедуры

// Обрабатывает результаты очередной итерации отправки ЭД, при необходимости (во входящих параметрах есть
// не отправленные ЭД) начинает следующую итерацию отправки ЭД.
//
// Параметры:
//    Результат - Структура, Неопределено - в структуре возвращается результат прошедшей итерации отправки ЭД:
//       КолПодготовленных - Число.
//       КолОтправленных   - Число.
//    Параметры - Структура:
//    МассивКОтправке           - Массив.
//    МассивКОтправкеБезПодписи - Массив.
//    Прочие параметры.
//
Процедура ЗавершитьОтправкуЭД(Результат, Параметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	ПродолжитьВыполнитьДействияПослеОтправки = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		КолПодготовленных = 0;
		КолОтправленных = 0;
		Если НЕ(Результат.Свойство("КолПодготовленных", КолПодготовленных)
				И ТипЗнч(КолПодготовленных) = Тип("Число")) Тогда
			
			КолПодготовленных = 0;
		КонецЕсли;
		Если НЕ(Результат.Свойство("КолОтправленных", КолОтправленных)
				И ТипЗнч(КолОтправленных) = Тип("Число")) Тогда
			
			КолОтправленных = 0;
		КонецЕсли;
		Параметры.ИтогКолПодготовленных = Параметры.ИтогКолПодготовленных + КолПодготовленных;
		Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КолОтправленных;
	КонецЕсли;
	
	МассивЭД = Неопределено;
	МассивКОтправке = Неопределено;
	МассивКОтправкеБезПодписи = Неопределено;
	Если Параметры.Свойство("МассивКОтправке", МассивКОтправке)
		И ТипЗнч(МассивКОтправке) = Тип("Массив")
		И МассивКОтправке.Количество() > 0 Тогда
		
		МассивЭД = МассивКОтправке;
		Параметры.Удалить("МассивКОтправке");
		ПризнакПодписи = Истина;
	ИначеЕсли Параметры.Свойство("МассивКОтправкеБезПодписи", МассивКОтправкеБезПодписи)
		И ТипЗнч(МассивКОтправкеБезПодписи) = Тип("Массив")
		И МассивКОтправкеБезПодписи.Количество() > 0 Тогда
		
		МассивЭД = МассивКОтправкеБезПодписи;
		Параметры.Удалить("МассивКОтправкеБезПодписи");
		ПризнакПодписи = Ложь;
	КонецЕсли;
	
	Если МассивЭД <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтправкуЭД", ЭтотОбъект, Параметры);
		ПодготовитьИОтправитьПЭД(МассивЭД, ПризнакПодписи, СоотвСоглашенийИСтруктурСертификатов, Параметры, ОписаниеОповещения);
		ПродолжитьВыполнитьДействияПослеОтправки = Ложь;
	КонецЕсли;
	
	Если ПродолжитьВыполнитьДействияПослеОтправки Тогда
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Оповещение после отправки электронных документов.
//
// Параметры:
//  Параметры - Структура - показатели отправки.
//
Процедура ВыполнитьДействияПослеОтправки(Параметры)
	
	Перем Действие, ИтогКолНовыхЭД, ИтогКолУтвержденныхЭД, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных;
	
	Если НЕ Параметры.Свойство("ИтогКолНовыхЭД", ИтогКолНовыхЭД) Тогда
		ИтогКолНовыхЭД = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолУтвержденныхЭД", ИтогКолУтвержденныхЭД) Тогда
		ИтогКолУтвержденныхЭД = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолПодписанных", ИтогКолПодписанных) Тогда
		ИтогКолПодписанных = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолПодготовленных", ИтогКолПодготовленных) Тогда
		ИтогКолПодготовленных = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолОтправленных", ИтогКолОтправленных) Тогда
		ИтогКолОтправленных = 0;
	КонецЕсли;

	ОтправленныеДокументы = Неопределено;
	Если Параметры.Свойство("СоответствиеСертификатовПодписаннымЭд") Тогда
		ОтправленныеДокументы = Новый Массив;
		Для Каждого СертификатМассивЭД Из Параметры.СоответствиеСертификатовПодписаннымЭд Цикл
			Для Каждого ЭД Из СертификатМассивЭД.Значение Цикл
				ОтправленныеДокументы.Добавить(ЭД);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДокументыУчета = Неопределено;
	Если Параметры.Свойство("МассивСсылокНаОбъект") Тогда
		ДокументыУчета = Параметры.МассивСсылокНаОбъект;
	КонецЕсли;
	Если ДокументыУчета = Неопределено
		Или (ТипЗнч(ДокументыУчета) = Тип("Массив") И ДокументыУчета.Количество() = 0) Тогда
		Результат = Неопределено;
		Если Параметры.Свойство("Результат", Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			Если Результат.Свойство("ДокументыУчета") Тогда
				ДокументыУчета = Результат.ДокументыУчета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлектронныеДокументы", ОтправленныеДокументы);
	ПараметрыОповещения.Вставить("ДокументыУчета", ДокументыУчета);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);

	Если Параметры.Свойство("Действие")
		И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действие, "Показать") Тогда
		Результат = Параметры.Результат;
		МассивОбработки = "";
		Если Результат.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				ОткрытьЭДДляПросмотра(ТекЭл);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Действие")
		И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действие, "Подписать") Тогда
		Результат = Параметры.Результат;
		СоотвСообщенийОбменаИОшибокПодписи = Неопределено;
		МассивСсылокНаОбъект = Неопределено;
		Если Параметры.Свойство("МассивСсылокНаОбъект", МассивСсылокНаОбъект)
			И МассивСсылокНаОбъект <> Неопределено
			И МассивСсылокНаОбъект.Количество() = 1
			И Результат.Свойство("СоотвСообщенийОбменаИОшибокПодписи", СоотвСообщенийОбменаИОшибокПодписи) 
			И СоотвСообщенийОбменаИОшибокПодписи <> Неопределено Тогда
			Для Каждого КлючИЗначение Из СоотвСообщенийОбменаИОшибокПодписи Цикл
				СообщениеОбОшибке = ЭлектронноеВзаимодействиеСлужебныйКлиент.ПредставлениеОшибкиПодписания(КлючИЗначение.Значение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами';
							|en = 'Electronic document exchange'");
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВывестиИнформациюОбОбработанныхЭД(ТекстЗаголовка,
		ИтогКолНовыхЭД, ИтогКолУтвержденныхЭД, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных);
		
	// Выводим накопленные сообщения пользователю.
	Если Параметры.Свойство("Результат") И Параметры.Результат <> Неопределено
		И Параметры.Результат.Свойство("СообщенияПользователю") Тогда
		Для Каждого СообщениеПользователю Из Параметры.Результат.СообщенияПользователю Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ВсегоОбработано = ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД + ИтогКолПодписанных + ИтогКолПодготовленных
					+ ИтогКолОтправленных;
	
	Если Параметры.Свойство("ОповеститьОСозданииУведомления") И ВсегоОбработано > 0 Тогда
		Оповестить("СозданоУведомление", Параметры.ОповеститьОСозданииУведомления);
	КонецЕсли;
	
	ОписаниеОповещения = Неопределено;
	Если Параметры.Свойство("ОписаниеОповещения", ОписаниеОповещения)
		И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, (ВсегоОбработано > 0));
	КонецЕсли;
	
КонецПроцедуры

#Область РегистрацияСертификатовВСервисеЭДО

Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДОЗавершение(Контекст)
	
	ДанныеПакета = Новый Структура;
	ДанныеПакета.Вставить("РеквизитыПакета");
	ДанныеПакета.Вставить("ЗашифрованныеДанныеОператораЭДО");
	ДанныеПакета.Вставить("ПодписанныеДвоичныеДанныеДляОператораЭДО");
	ДанныеПакета.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО");
	ДанныеПакета.Вставить("ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО");
	ДанныеПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО");
	ЗаполнитьЗначенияСвойств(ДанныеПакета, Контекст);
	
	ЕстьОшибки = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Истина;
	ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьИОтправитьРегистрационныйПакет1СЭДО(ДанныеПакета, ИнтернетПоддержкаПользователейПодключена, ЕстьОшибки);
		
	Если Не ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("СформироватьИОтправитьРегистрационныйПакет1СЭДОАутентификация", ЭтотОбъект, Контекст),
			ЭтотОбъект);
			
	Иначе
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, НЕ ЕстьОшибки);
		Контекст.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает помощник регистрации сертификатов во время выполнении операции подписания или отправки
// электронного документа если для продолжения операции нет валидного сертификата.
//
// Параметры:
//  Операция        - Строка - Представление текущей операции. "Подписание" или "Отправка".
//  АдресДанных     - Строка - Адрес таблицы значений во временном хранилище.
//  ПрофилиНастроек - Массив - Профили настроек ЭДО, у которых нет валидных сертификатов.
//
Процедура ОткрытьФормуПомощникаРегистрацииСертификатов(Операция, АдресДанных = Неопределено, ПрофилиНастроек = Неопределено)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Операция",              Операция);
	ПараметрыОповещения.Вставить("АдресТаблицыДанных",    АдресДанных);
	ПараметрыОповещения.Вставить("ПрофилиНастроек",       ПрофилиНастроек);
	ПараметрыОповещения.Вставить("ФормаПомощникаОткрыта", Ложь);
	
	Оповестить("ПоказатьПомощникРегистрацииСертификатов", ПараметрыОповещения);
	
	Если НЕ ПараметрыОповещения.ФормаПомощникаОткрыта Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Операция",              Операция);
		ПараметрыФормы.Вставить("АдресТаблицыДанных",    АдресДанных);
		ПараметрыФормы.Вставить("ПрофилиНастроек",       ПрофилиНастроек);
		
		ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникРегистрацииСертификатов", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НачатьОтправкуПолучениеЭлектронныхДокументов

Процедура НачатьОбработкуВходящихПакетовЭлектронныхДокументов(ОповещениеОЗавершении, ДанныеПакетовЭД)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДанныеПакетовЭД", ДанныеПакетовЭД);
	Контекст.Вставить("Индекс", -1);
	
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

Процедура ПодписатьОтправитьСлужебныеДокументы(МассивДокументов, ОтпечаткиСертификатов)
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивСсылокНаОбъект", Новый Массив);
	Параметры.Вставить("Действие", "ПодписатьОтправить");
	Параметры.Вставить("ДопПараметры", Новый Структура);
	Параметры.Вставить("ЭД", МассивДокументов);
	Параметры.Вставить("ОписаниеОповещения");
	ОбработатьЭДПослеПолученияОтпечатков(ОтпечаткиСертификатов, Параметры);
	
КонецПроцедуры

#КонецОбласти

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьОбменСКонтрагентами(ТребуетсяПовторитьПолучение = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоВыполненияОбмена() Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ПараметрыОтправкиПолученияЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПараметрыОтправкиПолученияЭД();
	
	ЕстьПрофилиЭДОБезСертификатов = ПараметрыОтправкиПолученияЭД.Свойство("ПрофилиЭДОБезСертификатов");
	
	Если НЕ ПараметрыОтправкиПолученияЭД.ЕстьВозможностьОтправкиПолученияЭД Тогда
		Если ЕстьПрофилиЭДОБезСертификатов Тогда
			ОткрытьФормуПомощникаРегистрацииСертификатов("Отправка", ,ПараметрыОтправкиПолученияЭД.ПрофилиЭДОБезСертификатов);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТребуетсяПовторитьПолучение", ТребуетсяПовторитьПолучение);
	
	ПаролиКСертификатам = Неопределено;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ДополнительныеПараметры.Свойство("ПаролиКСертификатам", ПаролиКСертификатам);
	КонецЕсли;
	
	Если ЕстьПрофилиЭДОБезСертификатов Тогда
		// Откроем помощник регистрации сертификатов после отправки/получения.
		ПараметрыОповещения.Вставить("ПрофилиЭДОБезСертификатов", ПараметрыОтправкиПолученияЭД.ПрофилиЭДОБезСертификатов);
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОтправитьПолучитьЭДВыполнить", ЭтотОбъект, ПараметрыОповещения);
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	Если ПараметрыОтправкиПолученияЭД.ИспользоватьЭП Тогда
		ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработкаОповещения,,, ПаролиКСертификатам);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
		ОтправитьПолучитьЭДВыполнить(Результат, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьПолучитьЭДВыполнить(Результат, ДополнительныеПараметры) Экспорт
	
	СоответствиеПрофилейПараметровСертификатов = Неопределено;
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ НЕ Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейПараметровСертификатов) Тогда
		Возврат;
	КонецЕсли;
	
	// Блок обновления статусов настроек ЭДО и получения новых приглашений.
	ТекстСообщения = НСтр("ru = 'Выполняется получение информации о приглашениях. Подождите...';
							|en = 'Receiving invitation information. Wait...'");
	Состояние(НСтр("ru = 'Получение.';
					|en = 'Receiving.'"), , ТекстСообщения);
	ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоответствиеПрофилейПараметровСертификатов);
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Выполняется отправка и получение пакетов электронных документов. Подождите...';
							|en = 'Sending and receiving electronic document packages. Wait...'");
	Состояние(НСтр("ru = 'Отправка и получение.';
					|en = 'Send and get.'"), , ТекстСообщения);
	
	// Получение и отправка документов.
	
	ТребуетсяПовторитьПолучение = ДополнительныеПараметры.ТребуетсяПовторитьПолучение;
	СтруктураВозврата = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(
		СоответствиеПрофилейПараметровСертификатов,
		ТребуетсяПовторитьПолучение);
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами';
								|en = 'Electronic document exchange'");
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).';
							|en = 'Packages sent: (%1), packages received: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения,
		СтруктураВозврата.КолОтправленныхПакетов, СтруктураВозврата.НовыеДокументы.МассивПакетовЭД.Количество());
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	// Распаковываем принятые пакеты с электронными документами.
	
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...';
							|en = 'Unpacking electronic document packages. Wait...'");
	Состояние(НСтр("ru = 'Распаковка.';
					|en = 'Unpacking.'"), , ТекстСообщения);
	РаспаковатьПакетыЭДНаКлиенте(СтруктураВозврата.НовыеДокументы.МассивПакетовЭД);
	
	// Если использование маркера превысило 5 минут, необходимо повторное получение.
	Если ТребуетсяПовторитьПолучение Тогда
		ОтправитьПолучитьОбменСКонтрагентами(ТребуетсяПовторитьПолучение, Результат);
	Иначе
		
		Оповестить("ОбновитьНаличиеЭДО");
		
		Если ДополнительныеПараметры.Свойство("ПрофилиЭДОБезСертификатов") Тогда
			ОткрытьФормуПомощникаРегистрацииСертификатов("Отправка", ,ДополнительныеПараметры.ПрофилиЭДОБезСертификатов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает расшифрованный маркер профиля настроек ЭДО.
//
// Параметры:
//  Оповещение		 - ОписаниеОповещений - метод в который передается выполнение после получения маркера.
//  СвойстваПрофиля	 - Структура - Дополнительные параметры.
//   Профиль - СправочникСсылка.ПрофилиНастроекЭДО - ссылка на профиль для которого нужно получить маркер.
//   ИдентификаторОрганизации - строка - Идентификатор организации в сервисе ЭДО.
//
Процедура ПолучитьМаркерПрофиляЭДО(Оповещение, СвойстваПрофиля, ПредставлениеОперации = "") Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвойстваПрофиля", СвойстваПрофиля);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ДополнительныеПараметры.Вставить("ПредставлениеОперации", ПредставлениеОперации);
	ПолучениеОтпечатковПродолжить = Новый ОписаниеОповещения("ПолучитьМаркерПродолжить", ЭтотОбъект, ДополнительныеПараметры);
	
	Профили = Новый Массив;
	Профили.Добавить(СвойстваПрофиля.Профиль);
	ПолучитьНастройкиЭДОИПараметрыСертификатов(ПолучениеОтпечатковПродолжить, Профили);
	
КонецПроцедуры

// Описание оповещения процедуры получения отпечатков сертификатов "ПолучитьМаркерПрофиляЭДО".
//
// Параметры:
//  Отпечатки				 - Структура - Параметры полученных сертификатов
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры переданные в описание оповещения.
//
Процедура ПолучитьМаркерПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	ПрофильНастроекЭДО       = ДополнительныеПараметры.СвойстваПрофиля.Профиль;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейПараметровСертификатов = Неопределено;
	Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейПараметровСертификатов);
	Если Не ЗначениеЗаполнено(СоответствиеПрофилейПараметровСертификатов) Тогда
		СоответствиеПрофилейПараметровСертификатов = Новый Соответствие;
	КонецЕсли;
	
	СоответствиеСоглашенийИСертификатов = Неопределено;
	Результат.Свойство("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
	Если Не ЗначениеЗаполнено(СоответствиеСоглашенийИСертификатов) Тогда
		СоответствиеСоглашенийИСертификатов = Новый Соответствие;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СоответствиеСоглашенийИСертификатов[ПрофильНастроекЭДО]) Тогда
		
		ПредставлениеОперации = ДополнительныеПараметры.ПредставлениеОперации;
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов. Выполнение операции ""%1"" прервано.';
								|en = 'No available certificates. The ""%1"" operation is canceled.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеОперации);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РасшифрованныйМаркер = "";
	СтруктураСертификата = СоответствиеПрофилейПараметровСертификатов[ПрофильНастроекЭДО];
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		СтруктураСертификата.Свойство("МаркерРасшифрованный", РасшифрованныйМаркер);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, РасшифрованныйМаркер);
	
КонецПроцедуры

// Подключает обработчик ожидания клиентского сеанса.
//
Процедура ПодключитьОповещенияЭДО() Экспорт
	
	ОповещатьОНовыхЭД = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОповещатьОСобытияхЭДО();
	
	Если Не ОповещатьОНовыхЭД Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОповеститьОНовыхЭД", 15, Истина);
	
КонецПроцедуры

// Возвращает картинку оповещений 1С-ЭДО.
//
Функция КартинкаОповещенияЭДО() Экспорт
	
	КартинкаОповещений = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьСобытияЭДО() Тогда
		КартинкаОповещений = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	
	Возврат КартинкаОповещений;
	
КонецФункции

// Только для внутреннего использования
Процедура РаспаковатьПакетыЭДНаКлиенте(Знач МассивПакетовЭД) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...';
							|en = 'Unpacking electronic document packages. Wait...'");
	Состояние(НСтр("ru = 'Распаковка.';
					|en = 'Unpacking.'"), , ТекстСообщения);
	
	// Подготовим данные по пакетам ЭД для занесения в базу.
	ДанныеПакетовЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ДанныеПакетовЭД(МассивПакетовЭД);
	
	// Расшифруем электронные документы.
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеПакетовЭД", ДанныеПакетовЭД);
	Контекст.Вставить("Индекс", -1);
	
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

#Область РаспаковкаПакетовЭД

// Продолжение процедуры РаспаковатьПакетыЭДНаКлиенте.
Процедура ОбработатьПакетыЭДЦиклНачало(Контекст)
	
	Если Контекст.ДанныеПакетовЭД.Количество() <= Контекст.Индекс + 1 Тогда
		ОбработатьПакетыЭДПослеЦикла(Контекст);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("СтруктураПакетаЭД", Контекст.ДанныеПакетовЭД[Контекст.Индекс]);
	
	// ПакетЭД структура из элементов: МассивЭД, МассивЭП, ПакетЭДСсылка, ОписаниеОшибки.
	
	Контекст.Вставить("МассивЭД", Контекст.СтруктураПакетаЭД.МассивЭД);
	Контекст.Вставить("МассивЭП", Контекст.СтруктураПакетаЭД.МассивЭП);
	Контекст.Вставить("Счетчик", -1);
	
	РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПакетыЭДЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст)
	
	Если Контекст.МассивЭД.Количество() <= Контекст.Счетчик + 1 Тогда
		РасшифроватьЭлектронныеДокументыПослеВнутреннегоЦикла(Контекст);
		Возврат;
	КонецЕсли;

	Контекст.Счетчик = Контекст.Счетчик + 1;
	Контекст.Вставить("ЭлектронныйДокумент", Контекст.МассивЭД[Контекст.Счетчик]);
	
	Если Не Контекст.ЭлектронныйДокумент.Зашифрован Тогда
		РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("РасшифроватьЭлектронныеДокументыВнутреннийЦиклПослеРасшифровкиЭД", ЭтотОбъект, Контекст);

	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Расшифровка электронного документа';
														|en = 'Decryption of electronic document'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(Контекст.ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	Данные = Неопределено;
	Если НЕ Контекст.ЭлектронныйДокумент.Свойство("ДанныеФайлаЭД", Данные) Тогда
		Данные = Контекст.ЭлектронныйДокумент.АдресЭД;
	КонецЕсли;
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий",       Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",             Ложь);
	ОписаниеДанных.Вставить("Данные",                    Данные);
	ОписаниеДанных.Вставить("ЗаголовокДанных",           НСтр("ru = 'Файл';
																|en = 'File'"));
	ОписаниеДанных.Вставить("БезПодтверждения",          Истина);
	ОписаниеДанных.Вставить("Представление",             Контекст.ЭлектронныйДокумент.ИмяБезРасширения);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

// Завершение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыВнутреннийЦиклПослеРасшифровкиЭД(РезультатВыполнения, Контекст) Экспорт
	
	Если Не РезультатВыполнения.Успех Тогда
		Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", НСтр("ru = 'Не удалось расшифровать электронный документ из пакета.';
																	|en = 'Cannot decrypt electronic document from the package.'"));
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыполнения.РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
		Если Контекст.ЭлектронныйДокумент.Свойство("ДанныеФайлаЭД") Тогда
			Контекст.ЭлектронныйДокумент.ДанныеФайлаЭД = РезультатВыполнения.РасшифрованныеДанные;
		Иначе
			АдресЭД = ПоместитьВоВременноеХранилище(РезультатВыполнения.РасшифрованныеДанные, Контекст.ЭлектронныйДокумент.АдресЭД);
		КонецЕсли;
	Иначе
		РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РезультатВыполнения.РасшифрованныеДанные);
		Если Контекст.ЭлектронныйДокумент.Свойство("ДанныеФайлаЭД") Тогда
			Контекст.ЭлектронныйДокумент.ДанныеФайлаЭД = РасшифрованныеДанные;
		Иначе
			АдресЭД = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, Контекст.ЭлектронныйДокумент.АдресЭД);
		КонецЕсли;
	КонецЕсли;
	
	РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура РасшифроватьЭлектронныеДокументыПослеВнутреннегоЦикла(Контекст)
	
	Если Контекст.МассивЭП.Количество() = 0 Тогда
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = Неопределено;
	Контекст.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
			"ПолучениеСертификатов", Ложь);
	Иначе
		ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии(Контекст.МенеджерКриптографии, Контекст)
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		
		// Если на клиенте нет менеджера криптографии то проверка сертификата, извлекаемого из подписи, производится на сервере.
		ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьСертификатыПодписей(Контекст.ДанныеПакетовЭД);
		
		ОбработатьПакетыЭДПослеЦикла(Контекст);
		Возврат;
		
	КонецЕсли;
	
	Контекст.Вставить("Счетчик", -1);
	Контекст.Вставить("МенеджерКриптографии", Результат);
	ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры РасшифроватьЭлектронныеДокументыВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст)
	
	Если Контекст.МассивЭП.Количество() <= Контекст.Счетчик + 1 Тогда
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Счетчик = Контекст.Счетчик + 1;
	Контекст.Вставить("Подпись", Контекст.МассивЭП[Контекст.Счетчик]);
	
	Если ЗначениеЗаполнено(Контекст.Подпись.Отпечаток) Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ДанныеФайлаЭП = Неопределено;
	Если НЕ Контекст.Подпись.Свойство("ДанныеФайлаЭП", ДанныеФайлаЭП) Тогда
		ДанныеФайлаЭП = ПолучитьИзВременногоХранилища(Контекст.Подпись.АдресЭП);
		Контекст.Подпись.Вставить("ДанныеФайлаЭП", ДанныеФайлаЭП);
	КонецЕсли;
	
	// Подпись не была прочитана при записи объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеФайлаЭП) Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеПолученияСертификатовИзПодписи", ЭтотОбъект, Контекст,
			"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиПолученияСертификатовИзПодписи", ЭтотОбъект),
		ДанныеФайлаЭП);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиПолученияСертификатовИзПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонСообщения = НСтр("ru = 'Получение сертификатов из подписи: %1';
							|en = 'Receiving certificates from the signature: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", ТекстСообщения);
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеПолученияСертификатовИзПодписи(СертификатыПодписи, Контекст) Экспорт
	
	Сертификат = СертификатПодписавшейСтороны(СертификатыПодписи);
	Если Сертификат = Неопределено Тогда
		ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
		Возврат;
	Иначе
		Контекст.Вставить("Сертификат", Сертификат);
	КонецЕсли;
	
	Сертификат.НачатьВыгрузку(Новый ОписаниеОповещения(
		"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеВыгрузкиСертификата", ЭтотОбъект, Контекст,
		"ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиВыгрузкиСертификата", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеОшибкиВыгрузкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонСообщения = НСтр("ru = 'Выгрузка сертификата: %1';
							|en = 'Export certificate: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОбОшибке);
	
	Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", ТекстСообщения);
	ОбработатьПакетыЭДЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПрочитатьСертификатыПодписейВнутреннийЦиклПослеВыгрузкиСертификата(ДанныеСертификата, Контекст) Экспорт
	
	Контекст.Подпись.Вставить("Отпечаток", Base64Строка(Контекст.Сертификат.Отпечаток));
	Контекст.Подпись.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Контекст.Сертификат));
	
	Если Контекст.Подпись.Свойство("ДанныеСертификата") Тогда
		Контекст.Подпись.ДанныеСертификата = ДанныеСертификата;
	Иначе
		Контекст.Подпись.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(ДанныеСертификата, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	ДанныеЭП = Неопределено;
	Если НЕ Контекст.Подпись.Свойство("ДанныеФайлаЭП", ДанныеЭП)
		И ЗначениеЗаполнено(Контекст.Подпись.АдресЭП) Тогда
		ДанныеЭП = Контекст.Подпись.АдресЭП;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЭП) Тогда
		Контекст.СтруктураПакетаЭД.Вставить("ОписаниеОшибки", НСтр("ru = 'Не удалось найти исходные данные для проверки ответной подписи.';
																	|en = 'Cannot find source data to check the response signature.'"));
		ОбработатьПакетыЭДЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ДанныеЭД = Неопределено;
	Если НЕ (Контекст.Подпись.Свойство("ДанныеФайлаЭД", ДанныеЭД)
			ИЛИ Контекст.Подпись.Свойство("АдресЭД", ДанныеЭД)) Тогда
		
		ТипДанныхПодписи = Контекст.Подпись.ТипДанных;
		
		Для Каждого СвойстваФайлаЭлектронногоДокумента Из Контекст.МассивЭД Цикл
			
			Если (ТипДанныхПодписи = "ЭП"
					И СвойстваФайлаЭлектронногоДокумента.ТипДанных <> "ДополнительныйЭД")
				ИЛИ (ТипДанныхПодписи = "ПодписьДополнительногоЭД"
					И СвойстваФайлаЭлектронногоДокумента.ТипДанных = "ДополнительныйЭД") Тогда
				
				Если НЕ СвойстваФайлаЭлектронногоДокумента.Свойство("ДанныеФайлаЭД", ДанныеЭД) Тогда
					ДанныеЭД = СвойстваФайлаЭлектронногоДокумента.АдресЭД;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		Новый ОписаниеОповещения("ПроверитьПодписиПослеПослеВыгрузкиСертификата", ЭтотОбъект, Контекст),
		ДанныеЭД, ДанныеЭП, Контекст.МенеджерКриптографии);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписейВнутреннийЦиклНачало.
Процедура ПроверитьПодписиПослеПослеВыгрузкиСертификата(Результат, Контекст) Экспорт
	
	Контекст.Подпись.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаУниверсальная());
	Если Результат = Истина Тогда
		Контекст.Подпись.Вставить("ПодписьВерна", Истина);
	Иначе
		Контекст.Подпись.Вставить("ПодписьВерна", Ложь);
	КонецЕсли;
	
	ПрочитатьСертификатыПодписейВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПакетыЭДЦиклНачало.
Процедура ОбработатьПакетыЭДПослеЦикла(Контекст)
	
	Если Контекст.Свойство("ОповещениеОЗавершении") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.ДанныеПакетовЭД);
		Возврат;
	КонецЕсли;
	
	// Перебор массива ДанныеПакетовЭД. Отобразить ошибки и удалить ошибочные пакеты из массива.
	КоличествоЭлементовКоллекции = Контекст.ДанныеПакетовЭД.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Счетчик = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		ПакетЭД = Контекст.ДанныеПакетовЭД[Счетчик];
		
		Если ПакетЭД.Свойство("ОписаниеОшибки") Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакетаЭД: %1 возникла ошибка:
			|%2.';
			|en = 'An error occurred when unpacking ED package: %1:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД.ПакетЭДСсылка,
				ПакетЭД.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Контекст.ДанныеПакетовЭД.Удалить(Счетчик);
		КонецЕсли;
	КонецЦикла;
	
	// Если в массиве остались пакеты, то отправим их на запись в базу.
	РаспакованныеДокументы = Новый Структура;
	РаспакованныеДокументы.Вставить("МассивСлужебныхЭД", Новый Массив);
	РаспакованныеДокументы.Вставить("НовыеДокументы", Новый Массив);
	КолРаспакованныхЭД = 0;
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаписатьДанныеПакетовЭД(Контекст.ДанныеПакетовЭД, РаспакованныеДокументы, КолРаспакованныхЭД);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	
	Если МассивСлужебныхЭД.Количество() > 0 Тогда
		
		Действия = "ПодписатьОтправить";
		ОбработатьЭД(Новый Массив, Действия, , МассивСлужебныхЭД);
		
	КонецЕсли;
	
	ШаблонОповещения = НСтр("ru = 'Распаковано пакетов: %1.';
							|en = 'Unpacked packages: %1.'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолРаспакованныхЭД);
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами';
								|en = 'Electronic document exchange'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	НовыеДокументы = РаспакованныеДокументы.НовыеДокументы;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеДокументы, МассивСлужебныхЭД);
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлектронныеДокументы", НовыеДокументы);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
КонецПроцедуры

// Возвращает сертификат подписавшей стороны из коллекции сертификатов, извлеченной из даных подписи. 
// Поиск происходит с учетом того, что CN Субъекта и Издателя могут быть равны.
//
// Параметры:
//  СертификатыПодписи - Массив - Сертификаты, извлеченные из данных подписи, см. метод платформы ПолучитьСертификатыИзПодписи.
// 
// Возвращаемое значение:
// СертификатКриптографии, Неопределено - Сертификат, с помощью которого была произведена подпись.
//
Функция СертификатПодписавшейСтороны(СертификатыПодписи)
	
	СертификатыПодписиКопия = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СертификатыПодписи);
	Возврат НайтиСертификатПодписавшейСтороныРекурсивно(СертификатыПодписиКопия);
	
КонецФункции

Функция НайтиСертификатПодписавшейСтороныРекурсивно(СертификатыПодписи) 
	
	КоличествоСертификатовПодписи = СертификатыПодписи.Количество();
	Если КоличествоСертификатовПодписи = 1 Тогда
		Возврат СертификатыПодписи[0];
	ИначеЕсли КоличествоСертификатовПодписи = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока СертификатыПодписи.Количество() Цикл
		ТекущийСертификат = СертификатыПодписи[0];
		ДочернийСертификат = ДочернийСертификат(СертификатыПодписи, ТекущийСертификат.Субъект.CN);
		Если ДочернийСертификат = Неопределено Тогда
			Возврат ТекущийСертификат;
		Иначе 
			СертификатыПодписи.Удалить(0);
			Возврат НайтиСертификатПодписавшейСтороныРекурсивно(СертификатыПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции 

Функция ДочернийСертификат(МассивСертификатов, Субъект) 
	
	Для каждого Сертификат Из МассивСертификатов Цикл
		Если Сертификат.Издатель.CN = Субъект Тогда
			Возврат Сертификат; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура ПолучитьДанныеЗашифрованногоМаркера(Результат, ДополнительныеПараметры) Экспорт
	
 	ИД_Параметров = Неопределено;
	МаркерЗашифрованный = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// В переменной Параметры получаем структуру (СоотвСоглашенийИМассиваСертификатовАвторизации, СоотвСертификатовИИхСтруктур, ВозврСоответствие).
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения (ДополнительныеПараметры.ОбработкаОповещения).
		СоотвСертификатовИИхСтруктур = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур) Тогда
			
			// Результат - структура - ОписаниеДанных которая была передана в метод Расшифровать(),
			// дополненная параметром ВыбранныйСертификат на стороне БСП:
			ОписаниеДанных = Неопределено;
			ВыбранныйСертификат = Неопределено;
			Если Результат.Свойство("ОписаниеДанных", ОписаниеДанных)
				И ТипЗнч(ОписаниеДанных) = Тип("Структура")
				И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
				И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
				И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
				И СоотвСертификатовИИхСтруктур.Получить(Строка(ВыбранныйСертификат.УникальныйИдентификатор()) + "_" + ДополнительныеПараметры.ИдентификаторОрганизации) <> Неопределено Тогда
				
				СтруктураПараметровЗапросаМаркера = Параметры.СоотвСертификатовИИхСтруктур[Строка(ВыбранныйСертификат.УникальныйИдентификатор()) + "_" + ДополнительныеПараметры.ИдентификаторОрганизации];
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", ДополнительныеПараметры.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ДополнительныеПараметры.ИдентификаторОрганизации);
				
				Контекст = Новый Структура;
				Контекст.Вставить("СтруктураПараметровЗапросаМаркера", СтруктураПараметровЗапросаМаркера);
				Контекст.Вставить("Оповещение", Результат.Оповещение);
				
				ПолучитьДанныеЗашифрованногоМаркераПродолжить(Контекст);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеЗашифрованногоМаркераПродолжить(Контекст)
	
	МаркерЗашифрованный = Неопределено;
	Контекст.СтруктураПараметровЗапросаМаркера.Свойство("МаркерЗашифрованный", МаркерЗашифрованный);
	
	Если МаркерЗашифрованный = Неопределено Тогда
		
		ИнтернетПоддержкаПользователейПодключена = Истина;
		МаркерЗашифрованный = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(Контекст.СтруктураПараметровЗапросаМаркера,
			ИнтернетПоддержкаПользователейПодключена);
		
		Если Не ИнтернетПоддержкаПользователейПодключена
			И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			
			ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
				Новый ОписаниеОповещения("ПолучитьДанныеЗашифрованногоМаркераАутентификация", ЭтотОбъект, Контекст),
				ЭтотОбъект);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", МаркерЗашифрованный);
	
	Если МаркерЗашифрованный = Неопределено Тогда
		
		СертификатПодписи = "";
		Контекст.СтруктураПараметровЗапросаМаркера.Свойство("СертификатПодписи", СертификатПодписи);
		СпособОбменаЭД = "";
		Контекст.СтруктураПараметровЗапросаМаркера.Свойство("СпособОбменаЭД", СпособОбменаЭД);
		
		ВидОперации = НСтр("ru = 'Аутентификация в сервисе оператора ЭДО';
							|en = 'Authentication in EDI provider service'");
		ТекстОшибкиШаблон = НСтр("ru = 'Не удалось получить зашифрованный маркер.';
								|en = 'Cannot get encrypted marker.'") + Символы.ПС 
			+ НСтр("ru = 'Сертификат электронной подписи: %1.';
					|en = 'Digital signature certificate: %1.'") + Символы.ПС
			+ НСтр("ru = 'Способ обмена: %2.';
					|en = 'Exchange method: %2.'");
		ТекстОшибки = СтрШаблон(ТекстОшибкиШаблон, СертификатПодписи, СпособОбменаЭД);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, , "ОбменСКонтрагентами");
			
		ОписаниеОшибки = НСтр("ru = 'Не удалось пройти аутентификацию в сервисе оператора ЭДО.';
								|en = 'Cannot authenticate in the EDI provider service.'");
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Подробнее см. в журнале регистрации.';
																				|en = 'For more details, see the event log.'"));
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Параметры);
	
КонецПроцедуры

Процедура ПолучитьДанныеЗашифрованногоМаркераАутентификация(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеЗашифрованногоМаркераПродолжить(Контекст);
	
КонецПроцедуры

Процедура РасшифроватьМаркер(Результат, ДополнительныеПараметры) Экспорт
	
	ИД_Параметров = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// В переменной Параметры получаем структуру (СоотвСоглашенийИМассиваСертификатовАвторизации, СоотвСертификатовИИхСтруктур, ВозврСоответствие).
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения (ДополнительныеПараметры.ОбработкаОповещения).
		ВозврСоответствие = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		
		Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
			И ТипЗнч(ВозврСоответствие) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
			ВозврСоответствие = Параметры.СоответствиеПрофилейИПараметровСертификатов;
		КонецЕсли;
		
		// В результате приходят расшифрованные данные маркера, поместим их в ВозврСоответствие:
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Успех = Ложь;
			РасшифрованныеДанные = Неопределено;
			ПрофильНастроекЭДО = Неопределено;
			Если Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные) Тогда
				Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные) Тогда
					РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
				КонецЕсли;
				Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные")
					И ДополнительныеПараметры.Свойство("ПрофильНастроекЭДО", ПрофильНастроекЭДО) Тогда
					
					ВыбранныйСертификат = Неопределено;
					РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
					Если Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
						И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
						И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
						И Параметры.СоотвСертификатовИИхСтруктур.Получить(Строка(ВыбранныйСертификат.УникальныйИдентификатор())
							+ "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации) <> Неопределено Тогда
						
						ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[Строка(ВыбранныйСертификат.УникальныйИдентификатор())
							+ "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации];
						ПараметрыСертификата.Вставить("МаркерРасшифрованный", РасшифрованныеДанные);
						
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, ПараметрыСертификата);
					Иначе
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, Новый Структура("МаркерРасшифрованный", РасшифрованныеДанные));
					КонецЕсли;
					
					// Временно сохраним введенный пользователем пароль к сертификату,
					// чтобы не запрашивать его еще раз при повторном получении маркера.
					Если Результат <> Неопределено И Результат.Свойство("КонтекстОперации") Тогда
						
						ПаролиКСертификатам = Неопределено;
						ДополнительныеПараметры.Свойство("ПаролиКСертификатам", ПаролиКСертификатам);
						Если ПаролиКСертификатам = Неопределено Тогда
							ПаролиКСертификатам = Новый Соответствие;
						КонецЕсли;
						
						Если ТипЗнч(ПаролиКСертификатам) = Тип("Соответствие") Тогда
							
							// Происходит Отправка/Получение ЭД из Текущих дел.
							// Сохраним пароли и передадим дальше по стеку, чтобы использовать их еще раз,
							// если нужно будет получить маркер повторно.
							ПаролиКСертификатам.Вставить(ПрофильНастроекЭДО, Результат.КонтекстОперации);
							ДополнительныеПараметры.Вставить("ПаролиКСертификатам", ПаролиКСертификатам);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗапуститьФинальныйОбработчикОповещения = Истина;
		ОбработчикОповещения = Неопределено;
		
		СоответствиеСоглашенийИСертификатов = Неопределено;
		ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
		
		Если ТипЗнч(СоответствиеСоглашенийИСертификатов) = Тип("Соответствие") Тогда
			
			// Сохраним полный список доступных сертификатов в разрезе профилей. Позже он будет передан вызывавшему методу.
			Если Не ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатовИсходное") Тогда
				СоответствиеСоглашенийИСертификатовИсходное = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(СоответствиеСоглашенийИСертификатов);
				ДополнительныеПараметры.Вставить("СоответствиеСоглашенийИСертификатовИсходное", СоответствиеСоглашенийИСертификатовИсходное);
			КонецЕсли;
			
			Для Каждого Элемент Из СоответствиеСоглашенийИСертификатов Цикл
				
				ПрофильНастроекЭДО = Элемент.Ключ;
				Сертификаты        = Элемент.Значение;
				
				Если НЕ (ТипЗнч(Сертификаты) = Тип("Массив") И ЗначениеЗаполнено(ПрофильНастроекЭДО)) Тогда
					Продолжить;
				КонецЕсли;
				
				РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				МассивСертификатов = Новый Массив;
				
				Для Каждого Сертификат Из Сертификаты Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСтруктура = Параметры.СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					Если ПараметрыСтруктура.Свойство("МаркерРасшифрованный") Тогда
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, ПараметрыСтруктура);
						МассивСертификатов = Новый Массив;
						Прервать;
					Иначе
						Если ПараметрыСтруктура.ПарольПолучен Тогда
							// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
							// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
							// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
							// диалог выбора сертификата.
							МассивСертификатов = Новый Массив;
							МассивСертификатов.Добавить(Сертификат);
							Прервать;
						Иначе
							МассивСертификатов.Добавить(Сертификат);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Если массив сертификатов пустой, значит либо уже есть расшифрованный маркер, либо нет сертификатов,
				// в обоих случаях переходим к обработке следующей Настройки ЭДО.
				Если МассивСертификатов.Количество() > 0 Тогда
					
					ОписаниеДанных = Новый Структура;
					ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
					ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
					ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
					ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация в сервисе ЭДО';
															|en = 'Authentication in EDI service'"));
					ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
					
					// Если пароль к сертификату временно сохранен, то получим его и укажем в качестве контекста операции.
					КонтекстОперации = Неопределено;
					Если ДополнительныеПараметры.Свойство("ПаролиКСертификатам") Тогда
						
						Если ТипЗнч(ДополнительныеПараметры.ПаролиКСертификатам) = Тип("Соответствие") Тогда
							КонтекстОперации = ДополнительныеПараметры.ПаролиКСертификатам[ПрофильНастроекЭДО];
						Иначе
							КонтекстОперации = ДополнительныеПараметры.ПаролиКСертификатам; // управляемая форма
						КонецЕсли;
						
					КонецЕсли;
					ОписаниеДанных.Вставить("КонтекстОперации", КонтекстОперации);
					
					СтруктураПараметровЗапросаМаркера = Новый Структура();
					СтруктураПараметровЗапросаМаркера.Вставить("ИД_Параметров",  ИД_Параметров);
					СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
					СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
					
					Маркер = Новый ОписаниеОповещения("ПолучитьДанныеЗашифрованногоМаркера", ЭтотОбъект, СтруктураПараметровЗапросаМаркера);
					
					ОписаниеДанных.Вставить("Данные", Маркер);
					
					ДополнительныеПараметры.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ДополнительныеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
					
					// Удалим из соответствия обработанный элемент:
					СоответствиеСоглашенийИСертификатов.Удалить(ПрофильНастроекЭДО);
					ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьМаркер", ЭтотОбъект, ДополнительныеПараметры);
					
					ЗапуститьФинальныйОбработчикОповещения = Ложь;
					УстановитьПаролиСертификатов(Параметры.СоотвСертификатовИИхСтруктур);
					ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗапуститьФинальныйОбработчикОповещения
			И ДополнительныеПараметры.Свойство("ОбработчикОповещения", ОбработчикОповещения)
			И ТипЗнч(ОбработчикОповещения) = Тип("ОписаниеОповещения") Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие);
			
			СоответствиеСоглашенийИСертификатов = Неопределено;
			Если Не ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатовИсходное", СоответствиеСоглашенийИСертификатов) Тогда
				СоответствиеСоглашенийИСертификатов = Новый Соответствие;
			КонецЕсли;
			
			ПараметрыОповещения.Вставить("СоответствиеСоглашенийИСертификатов",
				ДополнительныеПараметры.СоответствиеСоглашенийИСертификатовИсходное);
			ПараметрыОповещения.Вставить("ПаролиКСертификатам", ДополнительныеПараметры.ПаролиКСертификатам);
			
			Если ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров] <> Неопределено Тогда
				ПараметрыПриложения.Удалить("ЭлектронноеВзаимодействие." + ИД_Параметров);
			КонецЕсли;
			
			УстановитьПаролиСертификатов(Параметры.СоотвСертификатовИИхСтруктур, Ложь);
			
			ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьМассивПакетовОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоотвСоглашенийИСтруктурСертификатов = Результат.СоответствиеПрофилейИПараметровСертификатов;
	МассивПЭД = ДополнительныеПараметры.МассивПЭД;
	
	ОтправленныеДокументы = Новый Массив;
	Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов, ОтправленныеДокументы);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлектронныеДокументы", ОтправленныеДокументы);
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
	ОбработкаОповещения = ДополнительныеПараметры.ОбработкаОповещения;
		
	Если Не ОбработкаОповещения = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьПредложениеОбАннулировании.
Процедура ОбработатьПредложениеОбАннулированииЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Оповестить("ОбновитьСостояниеЭД", ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработатьОтклонениеАннулированиеЭД.
Процедура ОбработатьОтклонениеАннулированиеЭДЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ОтклонениеВыполнено = Ложь;
	ОповещениеВыполнено = Ложь;
	ОписаниеОповещения  = Неопределено;
	ДополнительныеПараметры.Свойство("ОписаниеОповещения", ОписаниеОповещения);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		// Определим вид служебного документа
		Если ДополнительныеПараметры.Отклонить Тогда
			ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.УведомлениеОбУточнении");
		Иначе
			ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПредложениеОбАннулировании");
		КонецЕсли;
		
		// Сформируем текст оповещения
		Текст = НСтр("ru = '%1:
		|%2';
		|en = '%1:
		|%2'");
		ТекстУточнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, 
			ПользователиКлиентСервер.ТекущийПользователь(), Результат);
				
		// В зависимости от входящих требований сформируем массив документов для формирования служебных 
		// и массив для простого изменения статуса.
		ДокументыДляФормированияУОУ = Новый Массив;
		ДокументыДляПростогоОтклонения = Новый Массив;
		
		Для Каждого НаборПараметров Из ДополнительныеПараметры.ПараметрыОбработкиЭД Цикл				
			// При аннулировании параметр ФормироватьЭД всегда имеет значение Истина,
			// при отклонении может иметь значение как Истина, так и Ложь.
			
			ФормироватьУОУ = Ложь;
			Если НЕ (НаборПараметров.Свойство("ФормироватьУОУ", ФормироватьУОУ) И ФормироватьУОУ = Истина) Тогда
				ДокументыДляПростогоОтклонения.Добавить(НаборПараметров.СсылкаНаЭД);
			Иначе
				ДокументыДляФормированияУОУ.Добавить(НаборПараметров.СсылкаНаЭД);
			КонецЕсли;
		КонецЦикла;
		
		// Обработаем документы для простого отклонения
		Если ДокументыДляПростогоОтклонения.Количество() > 0 Тогда
			НовыйСтатусЭД = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Отклонен");
			СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, Результат);
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныеФайлы(ДокументыДляПростогоОтклонения, СтруктураПараметров, Ложь);
		КонецЕсли;
		
		// Сформируем служебные документы по тем ЭД, по которым это нужно
		ОповещениеВыполнено = Ложь;
		Если ДокументыДляФормированияУОУ.Количество() > 0 Тогда
			СформироватьПодписатьСлужебныйЭД(ДокументыДляФормированияУОУ, 
				ВидСлужебногоЭД, ТекстУточнения, , ОписаниеОповещения);
			ОповещениеВыполнено = Истина;
		КонецЕсли;
		
		ОтклонениеВыполнено = Истина;
	ИначеЕсли Результат <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Причина не указана, действие отменено.';
								|en = 'Reason is not specified, the action is canceled.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Если не выполняли оповещение на предыдущем шаге, выполним его сейчас
	Если Не ОповещениеВыполнено И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ОтклонениеВыполнено);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПаролиСертификатов(Знач ОписанияСертификатов, Знач Установить = Истина)
	
	Для каждого КлючЗначение Из ОписанияСертификатов Цикл
		
		Описание = КлючЗначение.Значение;
		Сертификат = Неопределено;
		
		Если ТипЗнч(КлючЗначение.Ключ) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
			Сертификат = КлючЗначение.Ключ;
		ИначеЕсли Описание.Свойство("СертификатПодписи") Тогда
			Сертификат = Описание.СертификатПодписи;
		Иначе
			Продолжить;
		КонецЕсли;
		Если Установить И Описание.ПарольПолучен И Описание.ПарольПользователя <> Неопределено Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Описание.ПарольПользователя);
		ИначеЕсли Не Установить Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПроблемыПриФормированииДокументов(СсылкиНаОбъекты, АдресСведенийОбОшибках, Действие)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСведенийОбОшибках", АдресСведенийОбОшибках);
	ПараметрыФормы.Вставить("ПодписатьОтправить", СтрНайти(Действие, "Подписать") > 0);
	ПараметрыФормы.Вставить("ФормаОткрыта", Ложь);
	
	Оповестить("ПоказатьПроблемыПриФормированииДокументов", ПараметрыФормы);
	
	Если Не ПараметрыФормы.ФормаОткрыта Тогда
		Если СсылкиНаОбъекты.Количество() = 1 Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработатьДокументПослеУстраненияОшибок", ЭтотОбъект);
			ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПомощникУстраненияОшибок", ПараметрыФормы,,,,,Оповещение);
		Иначе
			ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПроблемыПриФормированииДокументов", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДокументПослеУстраненияОшибок(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено
		ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокНаОбъекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.Документ);
	
	ДополнительныеПараметры = Неопределено;
	Если Результат.Свойство("ДополнительныеДанные") Тогда
		ДополнительныеПараметры = Новый Структура("ДополнительныеДанные", Результат.ДополнительныеДанные);
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылокНаОбъекты, Результат.Действие, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти