
#Область ОбновлениеКонфигурации

// Функция - Выполнить обновление данных конфигурации
//
// Параметры:
// 
// Возвращаемое значение:
//	Признак выполеннного обновления.
//
Функция ВыполнитьОбновлениеДанныхКонфигурации() Экспорт
	
	ОбновлениеВыполнено = Ложь;
	ТекущаяВерсия = сшпКэшируемыеФункции.ВерсияПодсистемы();

	Если ТекущаяВерсия = 10000 Тогда
		 
		НоваяВерсия = 10201;
		
	ИначеЕсли ТекущаяВерсия <= 10200 Тогда
		
		//При получении пакета CSA выполнится переход и установится новая версия
		НоваяВерсия = 10200; // Версия 1.2.0		
		 
	Иначе
		 	
		НоваяВерсия = 10301; // Версия 1.3.1
		
	КонецЕсли;
	
	Если ТекущаяВерсия < 10120 тогда
		
		ОбновлениеВерсии10120();
		
	КонецЕсли;
	
	Если ТекущаяВерсия < 10121 Тогда
		
		ОбновлениеВерсии10121();
		
	КонецЕсли;
	
	Если ТекущаяВерсия < 10200 Тогда
		
		ОбновлениеВерсии10200();
		
	КонецЕсли;
	
	Если ТекущаяВерсия < 10202 Тогда
		
		ОбновлениеВерсии10202();
		
	КонецЕсли;
	
	Если НоваяВерсия <> ТекущаяВерсия Тогда
		 
		Константы.сшпВерсияПодсистемы.Установить(НоваяВерсия); 
		
		ОбновитьПовторноИспользуемыеЗначения();
		
		ОбновлениеВыполнено = Истина;
	
	КонецЕсли;
	
	Возврат ОбновлениеВыполнено;
	
КонецФункции	

// Процедура - ОбновлениеВерсии10120
// 
Процедура ОбновлениеВерсии10120()
	
	текНабор = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьНаборЗаписей();
	текНабор.Прочитать();
	
	Для Каждого текЗапись Из текНабор Цикл
		
		Если Не ЗначениеЗаполнено(текЗапись.ПроцедураОбработки) Тогда
			
			текЗапись.ПроцедураОбработки = текЗапись.ДляУдаленияПроцедураОбработки.Получить();
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(текЗапись.Версия) Тогда
			
			текЗапись.Версия = "1";
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(текЗапись.ИдентификаторШаблона) Тогда
			
			текЗапись.ИдентификаторШаблона = Новый УникальныйИдентификатор;
		
		КонецЕсли;
	
	КонецЦикла;
	
	текНабор.Записать(Истина);

КонецПроцедуры

// Процедура - ОбновлениеВерсии10121
//
Процедура ОбновлениеВерсии10121()
	
	текНабор = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьНаборЗаписей();
	текНабор.Прочитать();
	
	Для Каждого текЗапись Из текНабор Цикл
		
		Если Не ЗначениеЗаполнено(текЗапись.МетодХранения) Тогда
			
			текЗапись.МетодХранения = Перечисления.сшпМетодХранения.Сериализация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	текНабор.Записать(Истина);
	
	ЗапросОбъект = Новый Запрос("ВЫБРАТЬ
	|	тбРепозиторий.ИдентификаторШаблона
	|ИЗ
	|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сшпСтатусыОбработчиков КАК тбСтатусы
	|		ПО тбРепозиторий.ИдентификаторШаблона = тбСтатусы.ИдентификаторОбработчика
	|ГДЕ
	|	тбСтатусы.ИдентификаторОбработчика ЕСТЬ NULL");
	ЗапросРезультат = ЗапросОбъект.Выполнить();
	
	Если Не ЗапросРезультат.Пустой() Тогда
		
		ЗапросВыборка = ЗапросРезультат.Выбрать();
		
		Пока ЗапросВыборка.Следующий() Цикл
			
			сшпРаботаСДанными.УстановитьСтатусОбработчика(ЗапросВыборка.ИдентификаторШаблона, Перечисления.сшпСтатусыОбработчиков.Включен);
		
		КонецЦикла;
			
	КонецЕсли;
		
КонецПроцедуры	

// Процедура - ОбновлениеВерсии10200
//
Процедура ОбновлениеВерсии10200()
	
	//Удаление статусов несуществующих обработчиков
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	сшпСтатусыОбработчиков.ИдентификаторОбработчика
		|ИЗ
		|	РегистрСведений.сшпСтатусыОбработчиков КАК сшпСтатусыОбработчиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК сшпРепозиторийОбъектовИнтеграции
		|		ПО сшпСтатусыОбработчиков.ИдентификаторОбработчика = сшпРепозиторийОбъектовИнтеграции.ИдентификаторШаблона
		|ГДЕ
		|	сшпРепозиторийОбъектовИнтеграции.ИдентификаторШаблона ЕСТЬ NULL ";	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаписьСтатус = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьМенеджерЗаписи();
		ЗаписьСтатус.ИдентификаторОбработчика = ВыборкаДетальныеЗаписи.ИдентификаторОбработчика;
		ЗаписьСтатус.Удалить();
	
	КонецЦикла;

	//Установка параметров очистки очередей из значения по умолчанию
	сшпДлительностьХраненияСообщенийПоОчередямИСостояниям = Константы.сшпДлительностьХраненияСообщенийПоОчередямИСостояниям.Получить().Получить();
	сшпДлительностьХраненияСообщений = сшпРаботаСКонстантами.ПолучитьДлительностьХраненияПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(сшпДлительностьХраненияСообщенийПоОчередямИСостояниям) И ЗначениеЗаполнено(сшпДлительностьХраненияСообщений) Тогда
		 
		НачатьТранзакцию();
		
		ТаблицаДлительности = сшпРаботаСКонстантами.ПолучитьДлительностьХранения();
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.Входящая, Перечисления.сшпСтатусыСообщений.Обработано, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.Входящая, Перечисления.сшпСтатусыСообщений.ОбработкаОтменена, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.Исходящая, Перечисления.сшпСтатусыСообщений.Обработано, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.Исходящая, Перечисления.сшпСтатусыСообщений.ОбработкаОтменена, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.Системная, Перечисления.сшпСтатусыСообщений.Обработано, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.Системная, Перечисления.сшпСтатусыСообщений.ОбработкаОтменена, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.Отправки, Перечисления.сшпСтатусыСообщений.Отправлено, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.Отправки, Перечисления.сшпСтатусыСообщений.ОтправкаОтменена, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.ОтправкиСистемныхСообщений, Перечисления.сшпСтатусыСообщений.Отправлено, сшпДлительностьХраненияСообщений);
		ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, Перечисления.сшпТипыОчередей.ОтправкиСистемныхСообщений, Перечисления.сшпСтатусыСообщений.ОтправкаОтменена, сшпДлительностьХраненияСообщений);
			
		ИмяКонстанты = "сшпДлительностьХраненияСообщенийПоОчередямИСостояниям";
		ЗначениеКонстанты = Новый ХранилищеЗначения(ТаблицаДлительности);
		ТекущееЗначение = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты(ИмяКонстанты);
		
		Если Не ТекущееЗначение = ЗначениеКонстанты Тогда
			
			Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
			
		КонецЕсли; 
		
		сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпДлительностьХраненияСообщений", 0);
		
		ЗафиксироватьТранзакцию();
	
	КонецЕсли;

КонецПроцедуры	

// Процедура - ОбновлениеВерсии10202
//
Процедура ОбновлениеВерсии10202()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	сшпСостояниеСообщений.ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеСообщений
		|ГДЕ
		|	сшпСостояниеСообщений.ЗадержкаЧисло = 0
		|	И сшпСостояниеСообщений.СтатусСообщения В(&СтатусыСообщений)";	
 	Запрос.УстановитьПараметр("СтатусыСообщений", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
 	
 	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МЗ = РегистрыСведений.сшпСостояниеСообщений.СоздатьМенеджерЗаписи();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МЗ.ИдентификаторСообщения = ВыборкаДетальныеЗаписи.ИдентификаторСообщения;
		МЗ.Прочитать();
		
		МЗ.ЗадержкаЧисло = сшпОбщегоНазначения.ПеревестиДатуВЧисло(МЗ.ДатаИзменения, МЗ.Задержка);
		
		МЗ.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - ДобавитьНастройкуВТаблицуДлительности
//
// Параметры:
//	ТаблицаДлительности - ТаблицаЗначений - таблица длительности 
//	ТипОчереди - Перечисление.сшпТипыОчередей - тип очереди 
//	Статус - Перечисление.сшпСтатусыСообщений - статус
//	Длительность - Число - длительность
//
Процедура ДобавитьНастройкуВТаблицуДлительности(ТаблицаДлительности, ТипОчереди, Статус, Длительность)
	
	НоваяСтрока = ТаблицаДлительности.Добавить();
	
	НоваяСтрока.ТипОчереди = ТипОчереди;
	НоваяСтрока.СтатусСообщения = Статус;
	НоваяСтрока.ДлительностьХранения = Длительность;
	
КонецПроцедуры

// Процедура - ПроверитьИспользованиеПараметров
//
// Параметры:
//	Параметры - Структура - Параметры сообщения 
//
Процедура ПроверитьИспользованиеПараметров(Параметры) Экспорт
	
	ТекущаяВерсия = сшпКэшируемыеФункции.ВерсияПодсистемы();
	
	Если ТекущаяВерсия > 10200 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого текПараметр Из Параметры Цикл
		
		Если текПараметр.Ключ = "IsUpdatedFromCsa" И текПараметр.Значение = Истина Тогда 
			
			Константы.сшпВерсияПодсистемы.Установить(10201);
			
			Возврат;
		
		КонецЕсли;
		
	КонецЦикла;
	
	МассивПараметровКУдалению = Новый Массив;
	МассивПараметровКУдалению.Добавить("AutoStartProcessing");
	МассивПараметровКУдалению.Добавить("SerializationFormat");
	МассивПараметровКУдалению.Добавить("ShutDown");
	МассивПараметровКУдалению.Добавить("WaitingTime");
	МассивПараметровКУдалению.Добавить("MaxFlowIn");
	МассивПараметровКУдалению.Добавить("MaxFlowOut");
	МассивПараметровКУдалению.Добавить("MaxFlowSend");
	МассивПараметровКУдалению.Добавить("LiveTime");
	МассивПараметровКУдалению.Добавить("LiveTimeDefault");
	
	Для Каждого ЭлементМассива Из МассивПараметровКУдалению Цикл 
		
		Если Параметры.Свойство(ЭлементМассива) Тогда 
			
			Параметры.Удалить(ЭлементМассива);
		
		КонецЕсли;
	
	КонецЦикла;
	
	//Отправка сообщения на адптер для применения настроек
	
	ДлительностьХраненияСтрокой = "";
	
	Таблица = сшпРаботаСКонстантами.ПолучитьДлительностьХранения();
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		
		ДлительностьХраненияСтрокой = ДлительностьХраненияСтрокой + Колонка.Имя + ";";
	
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		НоваяСтрока = "";
		Для Каждого Колонка Из Таблица.Колонки Цикл 
			
			НоваяСтрока = НоваяСтрока + XMLСтрока(СтрокаТЧ[Колонка.Имя]) + ";";
		
		КонецЦикла;
		
		ДлительностьХраненияСтрокой = ДлительностьХраненияСтрокой + Символы.ПС + НоваяСтрока;
	
	КонецЦикла;
	
	СвойстваСообщения = Новый Структура;
	
	СвойстваСообщения.Вставить("AdapterType", "");
	СвойстваСообщения.Вставить("Uri", "");
	СвойстваСообщения.Вставить("ConfigurationName", "");
	СвойстваСообщения.Вставить("EndpointName", "");
	СвойстваСообщения.Вставить("MessageFormat", "");
	СвойстваСообщения.Вставить("ServerMode", "");
	СвойстваСообщения.Вставить("MaxBatchSize", "");
	СвойстваСообщения.Вставить("LiveTime", ДлительностьХраненияСтрокой);
	СвойстваСообщения.Вставить("AutoStartProcessing", сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпАвтоматическийСтартОбработчиков"));
	СвойстваСообщения.Вставить("WaitingTime", сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпДлительностьОжидания"));
	СвойстваСообщения.Вставить("MaxFlowIn", сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих"));
	СвойстваСообщения.Вставить("MaxFlowOut", сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих"));
	СвойстваСообщения.Вставить("ShutDown", сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпОтключитьПотокиОбработкиДанных"));
	СвойстваСообщения.Вставить("SerializationFormat", Строка(сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпФорматДляСериализации")));
	СвойстваСообщения.Вставить("LiveTimeDefault", сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпДлительностьХраненияСообщений"));
	Сообщение = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","CSA");
	Сообщение.Properties = СвойстваСообщения;
	
	сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщение(Сообщение);
	
КонецПроцедуры

#КонецОбласти
