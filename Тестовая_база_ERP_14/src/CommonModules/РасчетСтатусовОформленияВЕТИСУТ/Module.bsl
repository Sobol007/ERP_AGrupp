// Механизм расчета статусов оформления документов ВЕТИС.
//

#Область ПрограммныйИнтерфейс

// Позволяет переопределить имена реквизитов документа-основания для документа ВЕТИС.
// 
// Параметры:
// 	см. РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаВЕТИС
//
Процедура ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаВЕТИС(
			МетаданныеДокументаОснования, МетаданныеДокументаВЕТИС, Реквизиты) Экспорт
			
	// Зададим имена реквизитов по умолчанию.
	Реквизиты.Контрагент             			= "Организация";
	Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Склад";
	
	// Определим имя реквизита "Ответственный".
	Если МетаданныеДокументаОснования.Реквизиты.Найти("Менеджер") <> Неопределено Тогда
		Реквизиты.Ответственный = "Менеджер";
	Иначе
		Реквизиты.Ответственный = "Ответственный";
	КонецЕсли;
		
	// Уточним имена реквизитов для конкретных документов.
	Если МетаданныеДокументаОснования = Метаданные.Документы.ВнутреннееПотреблениеТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "Организация";
			
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "ОрганизацияПолучатель";
			
		КонецЕсли;
		
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров Тогда
		
		Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Товары.Склад, Товары.Подразделение";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ДвижениеПродукцииИМатериалов Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "Организация";
			Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Отправитель";
			
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "ОрганизацияПолучатель,Организация";
			Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Получатель";
			
		КонецЕсли;
	//-- НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеИзлишковТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "Организация";
			
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "ОрганизацияПолучатель";
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "Организация";
			Реквизиты.ТорговыйИлиПроизводственныйОбъект = "СкладОтправитель";
			
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			Реквизиты.Контрагент = "ОрганизацияПолучатель";
			Реквизиты.ТорговыйИлиПроизводственныйОбъект = "СкладПолучатель";
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПересортицаТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПорчаТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПроизводствоБезЗаказа Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Подразделение";
	//-- НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг Тогда
		
		Реквизиты.Ответственный = "Менеджер";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СборкаТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеНедостачТоваров Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		
	//++ НЕ УТКА
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЭтапПроизводства2_2 Тогда
		
		Реквизиты.Ответственный = "Ответственный";
		Реквизиты.ТорговыйИлиПроизводственныйОбъект = "Подразделение";
	//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить текст запроса выборки данных из документов-основания для расчета статуса оформления.
// 
// Параметры:
// 	см. РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС
//
Процедура ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС(
			МетаданныеДокументаОснования, МетаданныеДокументаВЕТИС, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента();
	ТоварыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента();
	ТабличныеЧастиДокумента = Новый Массив;
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.ВнутреннееПотреблениеТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
		
	//++ НЕ УТКА
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратСырьяДавальцу Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
	//-- НЕ УТКА
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратСырьяОтПереработчика Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыПриход);
		КонецЕсли;
	//-- НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ""; // не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
		
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыПриход);
		КонецЕсли;
	//-- НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровОтКлиента Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары 	= "НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары 	= "ХарактеристикаОприходование";
			
			ТоварыПриход.ИмяПоляНоменклатураТЧСерии 	= ТоварыПриход.ИмяПоляНоменклатураТЧТовары;
			ТоварыПриход.ИмяПоляХарактеристикаТЧСерии 	= ТоварыПриход.ИмяПоляХарактеристикаТЧТовары;
			
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыПриход);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
	
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ДвижениеПродукцииИМатериалов Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ""; // не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
	//-- НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеИзлишковТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыПриход);
		КонецЕсли;
	
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОтгрузкаТоваровСХранения Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
	//-- НЕ УТ
	//++ НЕ УТКА
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаДавальцу Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
	//-- НЕ УТКА
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаСырьяПереработчику Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
	//-- НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ""; // не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ""; // не формируем - будет получен через обмен
		ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПересортицаТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			
			// Товары - приход и расход в одной ТЧ
			ТоварыПриход.ИмяПоляНоменклатураТЧТовары 	= "НоменклатураОприходование";
			ТоварыПриход.ИмяПоляХарактеристикаТЧТовары 	= "ХарактеристикаОприходование";
			ТоварыПриход.ИмяПоляСерияТЧТовары 			= "СерияОприходование";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТабличныеЧастиДокумента);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПорчаТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
		
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПоступлениеОтПереработчика Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			// ВозвратныеОтходы
			ВозвратныеОтходыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("ВозвратныеОтходы", "ВозвратныеОтходыСерии");
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			ТабличныеЧастиДокумента.Добавить(ВозвратныеОтходыПриход);
			
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТабличныеЧастиДокумента);
			
		КонецЕсли;
	//-- НЕ УТ
	//++ НЕ УТКА
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПоступлениеСырьяОтДавальца Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыПриход);
		КонецЕсли;
	//-- НЕ УТКА
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПриемкаТоваровНаХранение Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыПриход);
		КонецЕсли;
	//-- НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПриобретениеТоваровУслуг Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
			
			ТоварыПриход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)";
			
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыПриход);
			
		КонецЕсли;
		
	//++ НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПроизводствоБезЗаказа Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
			
			// ВыходныеИзделия
			ВыходныеИзделияПриход  = ШаблонОписанияПриходнойТабличнойЧастиДокумента("ВыходныеИзделия", "ВыходныеИзделияСерии");
			
			// ПобочныеИзделия
			ПобочныеИзделияПриход  = ШаблонОписанияПриходнойТабличнойЧастиДокумента("ПобочныеИзделия", "ПобочныеИзделияСерии");
			
			// МатериалыИРаботы
			МатериалыИРаботыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("МатериалыИРаботы", Неопределено);
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ВыходныеИзделияПриход);
			ТабличныеЧастиДокумента.Добавить(ПобочныеИзделияПриход);
			ТабличныеЧастиДокумента.Добавить(МатериалыИРаботыРасход);
			
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТабличныеЧастиДокумента);
			
		КонецЕсли;
	//-- НЕ УТ
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПрочееОприходованиеТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыПриход);
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РеализацияТоваровУслуг Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
			
			ТоварыРасход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)";
			
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СборкаТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
			
			// Номенклатура в шапке при сборке (приход)
			НоменклатураПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураПриход.ПостфиксВременнойТаблицы = "Приход";
			НоменклатураПриход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
			
			// Номенклатура в шапке при разборке (расход)
			НоменклатураРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("", "Серии");
			НоменклатураРасход.ПостфиксВременнойТаблицы = "Расход";
			НоменклатураРасход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
			
			// Товары при разборке (приход)
			ТоварыПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("Товары", "Серии");
			ТоварыПриход.ПостфиксВременнойТаблицы = "Приход";
			ТоварыПриход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
		
			// Товары при сборке (расход)
			ТоварыРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("Товары", "Серии");
			ТоварыРасход.ПостфиксВременнойТаблицы = "Расход";
			ТоварыРасход.ДопОтборы_Общие =
				"И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)";
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(НоменклатураПриход);
			ТабличныеЧастиДокумента.Добавить(НоменклатураРасход);
			ТабличныеЧастиДокумента.Добавить(ТоварыПриход);
			ТабличныеЧастиДокумента.Добавить(ТоварыРасход);
			
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТабличныеЧастиДокумента);
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеНедостачТоваров Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТоварыРасход);
		КонецЕсли;
		
	//++ НЕ УТКА
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ЭтапПроизводства2_2 Тогда
		
		Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
			
			// ВыходныеИзделия
			ВыходныеИзделияПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("ВыходныеИзделия", "ВыходныеИзделияСерии");
			ВыходныеИзделияПриход.ДопОтборы_ТаблицаТовары = "И ТаблицаТовары.Произведено";
			ВыходныеИзделияПриход.ДопОтборы_ТаблицаСерии  = "И ТаблицаСерии.Произведено";
			
			// ПобочныеИзделия
			ПобочныеИзделияПриход = ШаблонОписанияПриходнойТабличнойЧастиДокумента("ПобочныеИзделия", "ПобочныеИзделияСерии");
			ПобочныеИзделияПриход.ДопОтборы_ТаблицаТовары = "И ТаблицаТовары.Произведено";
			ПобочныеИзделияПриход.ДопОтборы_ТаблицаСерии  = "И ТаблицаСерии.Произведено";
			
			// РасходМатериаловИРабот
			РасходМатериаловИРаботРасход = ШаблонОписанияРасходнойТабличнойЧастиДокумента("РасходМатериаловИРабот", Неопределено);
			
			// Все ТЧ документа
			ТабличныеЧастиДокумента.Добавить(ВыходныеИзделияПриход);
			ТабличныеЧастиДокумента.Добавить(ПобочныеИзделияПриход);
			ТабличныеЧастиДокумента.Добавить(РасходМатериаловИРаботРасход);
			
			ТекстЗапроса = ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ТабличныеЧастиДокумента);
			
		КонецЕсли;
	//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблонОписанияПриходнойТабличнойЧастиДокумента(ИмяТабличнойЧастиТовары = "Товары", ИмяТабличнойЧастиСерии = NULL, ПостфиксВременнойТаблицы = "")
	
	Возврат ШаблонОписанияТабличнойЧастиДокумента(Истина, ИмяТабличнойЧастиТовары, ИмяТабличнойЧастиСерии, ПостфиксВременнойТаблицы);
	
КонецФункции

Функция ШаблонОписанияРасходнойТабличнойЧастиДокумента(ИмяТабличнойЧастиТовары = "Товары", ИмяТабличнойЧастиСерии = NULL, ПостфиксВременнойТаблицы = "")
	
	Возврат ШаблонОписанияТабличнойЧастиДокумента(Ложь, ИмяТабличнойЧастиТовары, ИмяТабличнойЧастиСерии, ПостфиксВременнойТаблицы);
	
КонецФункции

Функция ШаблонОписанияТабличнойЧастиДокумента(ВидДвиженияПриход = Истина,
			ИмяТабличнойЧастиТовары = "Товары", ИмяТабличнойЧастиСерии = NULL, ПостфиксВременнойТаблицы = "")
			
	ОписаниеТЧ = Новый Структура;
	// Вид движения
	ОписаниеТЧ.Вставить("ВидДвиженияПриход", 	         ВидДвиженияПриход);
	// ТЧ Товары
	ОписаниеТЧ.Вставить("ИмяТабличнойЧастиТовары",       ИмяТабличнойЧастиТовары);
	// ТЧ Серии
	ОписаниеТЧ.Вставить("ИмяТабличнойЧастиСерии",  	     ИмяТабличнойЧастиСерии);
	ОписаниеТЧ.Вставить("АвтоПоискСерий", 		   	     (ИмяТабличнойЧастиСерии = NULL));
	// Имена полей ТЧ Товары
	ОписаниеТЧ.Вставить("ИмяПоляНоменклатураТЧТовары",   "Номенклатура");
	ОписаниеТЧ.Вставить("ИмяПоляХарактеристикаТЧТовары", "Характеристика");
	ОписаниеТЧ.Вставить("ИмяПоляНазначениеТЧТовары", 	 "Назначение");
	ОписаниеТЧ.Вставить("ИмяПоляСерияТЧТовары",   		 "Серия");
	// Имена полей ТЧ Серии
	ОписаниеТЧ.Вставить("ИмяПоляНоменклатураТЧСерии",    "Номенклатура");
	ОписаниеТЧ.Вставить("ИмяПоляХарактеристикаТЧСерии",  "Характеристика");
	ОписаниеТЧ.Вставить("ИмяПоляНазначениеТЧСерии", 	 "Назначение");
	ОписаниеТЧ.Вставить("ИмяПоляСерияТЧСерии",   		 "Серия");
	// Модификаторы текста запроса.
	ОписаниеТЧ.Вставить("ДопСоединения_Общие",   		 "");
	ОписаниеТЧ.Вставить("ДопСоединения_ТаблицаТовары",   "");
	ОписаниеТЧ.Вставить("ДопСоединения_ТаблицаСерии",    "");
	ОписаниеТЧ.Вставить("ДопОтборы_Общие",       		 "");
	ОписаниеТЧ.Вставить("ДопОтборы_ТаблицаТовары",       "");
	ОписаниеТЧ.Вставить("ДопОтборы_ТаблицаСерии",        "");
	// Номер таблицы по порядку.
	ОписаниеТЧ.Вставить("ПостфиксВременнойТаблицы",      ПостфиксВременнойТаблицы);
	
	Возврат ОписаниеТЧ;
	
КонецФункции


Функция ТекстЗапросаДляРасчетаСтатусаОформления(МетаданныеДокументаОснования, ОписаниеТабличныхЧастей)
	
	Если ТипЗнч(ОписаниеТабличныхЧастей) <> Тип("Массив") Тогда
		// Передано описание единственной табличной части
		ТабличныеЧастиОснования = Новый Массив;
		ТабличныеЧастиОснования.Добавить(ОписаниеТабличныхЧастей);
	Иначе
		ТабличныеЧастиОснования = ОписаниеТабличныхЧастей;
	КонецЕсли;
	
	КоличествоТЧ = ТабличныеЧастиОснования.Количество();
	Если КоличествоТЧ = 0 Тогда
		УточнениеОшибки = НСтр("ru = 'Некорректный вызов ТекстЗапросаДляРасчетаСтатусаОформления';
								|en = 'Incorrect call ТекстЗапросаДляРасчетаСтатусаОформления'");
		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПодсистемы(),УточнениеОшибки); // Некорректный вызов ТекстЗапросаДляРасчетаСтатусаОформления
	КонецЕсли;
	
	Для Каждого ОписаниеТЧ Из ТабличныеЧастиОснования Цикл
		
		Если ОписаниеТЧ.АвтоПоискСерий Тогда
			
			Если КоличествоТЧ = 1 И МетаданныеДокументаОснования.ТабличныеЧасти.Найти("Серии") <> Неопределено Тогда
				ОписаниеТЧ.ИмяТабличнойЧастиСерии = "Серии";
			ИначеЕсли МетаданныеДокументаОснования.ТабличныеЧасти.Найти(ОписаниеТЧ.ИмяТабличнойЧастиТовары + "Серии") <> Неопределено Тогда
				ОписаниеТЧ.ИмяТабличнойЧастиСерии = ОписаниеТЧ.ИмяТабличнойЧастиТовары + "Серии";
			Иначе
				ОписаниеТЧ.ИмяТабличнойЧастиСерии = Неопределено;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонВременнойТаблицыПодзапроса = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.%ИмяПоляНоменклатураТЧТовары% КАК Номенклатура,
	|	ТаблицаТовары.%ИмяПоляХарактеристикаТЧТовары% КАК Характеристика,
	|	ТаблицаТовары.%ИмяПоляНазначениеТЧТовары% КАК Назначение
	|ПОМЕСТИТЬ
	|	%ИмяВременнойТаблицы%
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиТовары% КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&МассивДокументов)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение";
	
	ШаблонЗапросаССериями =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	%ВидДвиженияПриход% КАК ЭтоДвижениеПриход,
	|	ТаблицаТовары.%ИмяПоляНоменклатураТЧТовары% КАК Номенклатура,
	|	ТаблицаТовары.%ИмяПоляХарактеристикаТЧТовары% КАК Характеристика,
	|	ТаблицаТовары.%ИмяПоляСерияТЧТовары% КАК Серия,
	|	ТаблицаТовары.Количество КАК Количество
	|%СозданиеВременнойТаблицы%
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиТовары% КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаТовары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = ТаблицаТовары.%ИмяПоляНоменклатураТЧТовары%
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента%%ИмяТабличнойЧастиСерии% КАК ТаблицаСерии
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаСерии.%ИмяПоляНоменклатураТЧСерии%   = ТаблицаТовары.%ИмяПоляНоменклатураТЧТовары%
	|		И ТаблицаСерии.%ИмяПоляХарактеристикаТЧСерии% = ТаблицаТовары.%ИмяПоляХарактеристикаТЧТовары%
	|		И ТаблицаСерии.%ИмяПоляНазначениеТЧСерии%     = ТаблицаТовары.%ИмяПоляНазначениеТЧТовары%
	|%ДопСоединения_Общие%
	|%ДопСоединения_ТаблицаТовары%
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&МассивДокументов)
	|	И ТаблицаСерии.%ИмяПоляНоменклатураТЧСерии% ЕСТЬ NULL
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|%ДопОтборы_Общие%
	|%ДопОтборы_ТаблицаТовары%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка КАК Ссылка,
	|	%ВидДвиженияПриход% КАК ЭтоДвижениеПриход,
	|	ТаблицаСерии.%ИмяПоляНоменклатураТЧСерии% КАК Номенклатура,
	|	ТаблицаСерии.%ИмяПоляХарактеристикаТЧСерии% КАК Характеристика,
	|	ТаблицаСерии.%ИмяПоляСерияТЧСерии% КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиСерии% КАК ТаблицаСерии
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаСерии.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = ТаблицаСерии.%ИмяПоляНоменклатураТЧСерии%
	|	ЛЕВОЕ СОЕДИНЕНИЕ %ИмяВременнойТаблицы% КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаСерии.%ИмяПоляНоменклатураТЧСерии%   = ТаблицаТовары.Номенклатура
	|		И ТаблицаСерии.%ИмяПоляХарактеристикаТЧСерии% = ТаблицаТовары.Характеристика
	|		И ТаблицаСерии.%ИмяПоляНазначениеТЧСерии%     = ТаблицаТовары.Назначение
	|%ДопСоединения_Общие%
	|%ДопСоединения_ТаблицаСерии%
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка В (&МассивДокументов)
	|	И ТаблицаТовары.Номенклатура ЕСТЬ НЕ NULL
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|%ДопОтборы_Общие%
	|%ДопОтборы_ТаблицаСерии%
	|";
	
	ШаблонЗапросаБезСерий =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	%ВидДвиженияПриход% КАК ЭтоДвижениеПриход,
	|	ТаблицаТовары.%ИмяПоляНоменклатураТЧТовары% КАК Номенклатура,
	|	ТаблицаТовары.%ИмяПоляХарактеристикаТЧТовары% КАК Характеристика,
	|	ТаблицаТовары.%ИмяПоляСерияТЧТовары% КАК Серия,
	|	ТаблицаТовары.Количество КАК Количество
	|%СозданиеВременнойТаблицы%
	|ИЗ
	|	Документ.%ИмяДокумента%%ИмяТабличнойЧастиТовары% КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаТовары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = ТаблицаТовары.%ИмяПоляНоменклатураТЧТовары%
	|%ДопСоединения_Общие%
	|%ДопСоединения_ТаблицаТовары%
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (&МассивДокументов)
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|%ДопОтборы_Общие%
	|%ДопОтборы_ТаблицаТовары%
	|";
	
	МассивТекстовСуммированияЗапросов = Новый Массив;
	МассивТекстовОсновногоЗапроса = Новый Массив;
	
	Для НомерТаблицы = 0 По КоличествоТЧ - 1 Цикл
		
		ОписаниеТЧ = ТабличныеЧастиОснования[НомерТаблицы];
		ИмяТабличнойЧастиТовары = ?(ОписаниеТЧ.ИмяТабличнойЧастиТовары = "", "", "." + ОписаниеТЧ.ИмяТабличнойЧастиТовары);
		
		Если ОписаниеТЧ.ИмяТабличнойЧастиСерии = Неопределено Тогда
			ТекстЗапросаПоТабличнойЧасти = ШаблонЗапросаБезСерий;
		Иначе
			ТекстЗапросаПоТабличнойЧасти = ШаблонЗапросаССериями;
		КонецЕсли;
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяДокумента%", МетаданныеДокументаОснования.Имя);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%СозданиеВременнойТаблицы%",
			?(НомерТаблицы = 0, "ПОМЕСТИТЬ " + РасчетСтатусовОформленияВЕТИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента(), ""));
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ВидДвиженияПриход%",
			Формат(ОписаниеТЧ.ВидДвиженияПриход, "БЛ=Ложь; БИ=Истина"));
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяТабличнойЧастиТовары%",       ИмяТабличнойЧастиТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНоменклатураТЧТовары%",   ОписаниеТЧ.ИмяПоляНоменклатураТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляХарактеристикаТЧТовары%", ОписаниеТЧ.ИмяПоляХарактеристикаТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНазначениеТЧТовары%",     ОписаниеТЧ.ИмяПоляНазначениеТЧТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляСерияТЧТовары%",          ОписаниеТЧ.ИмяПоляСерияТЧТовары);
		
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопСоединения_Общие%",           ОписаниеТЧ.ДопСоединения_Общие);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопСоединения_ТаблицаТовары%",   ОписаниеТЧ.ДопСоединения_ТаблицаТовары);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопОтборы_Общие%",               ОписаниеТЧ.ДопОтборы_Общие);
		ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопОтборы_ТаблицаТовары%",       ОписаниеТЧ.ДопОтборы_ТаблицаТовары);
		
		Если ОписаниеТЧ.ИмяТабличнойЧастиСерии <> Неопределено Тогда
			
			ИмяВременнойТаблицы = МетаданныеДокументаОснования.Имя + ОписаниеТЧ.ИмяТабличнойЧастиТовары + ОписаниеТЧ.ПостфиксВременнойТаблицы;
			//Временная таблица - получение запроса из шаблона
			ТекстЗапросаВременнойТаблицы = ШаблонВременнойТаблицыПодзапроса;
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяДокумента%",                  МетаданныеДокументаОснования.Имя);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяВременнойТаблицы%",           ИмяВременнойТаблицы);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяПоляНоменклатураТЧТовары%",   ОписаниеТЧ.ИмяПоляНоменклатураТЧТовары);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяПоляХарактеристикаТЧТовары%", ОписаниеТЧ.ИмяПоляХарактеристикаТЧТовары);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяПоляНазначениеТЧТовары%",     ОписаниеТЧ.ИмяПоляНазначениеТЧТовары);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяПоляСерияТЧТовары%",          ОписаниеТЧ.ИмяПоляСерияТЧТовары);
			ТекстЗапросаВременнойТаблицы = СтрЗаменить(ТекстЗапросаВременнойТаблицы, "%ИмяТабличнойЧастиТовары%",       ИмяТабличнойЧастиТовары);
			МассивТекстовСуммированияЗапросов.Добавить(ТекстЗапросаВременнойТаблицы);
			
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяВременнойТаблицы%",           ИмяВременнойТаблицы);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяТабличнойЧастиСерии%",
				?(ОписаниеТЧ.ИмяТабличнойЧастиСерии = "", "", "." + ОписаниеТЧ.ИмяТабличнойЧастиСерии));
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНоменклатураТЧСерии%",   ОписаниеТЧ.ИмяПоляНоменклатураТЧСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляХарактеристикаТЧСерии%", ОписаниеТЧ.ИмяПоляХарактеристикаТЧСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляНазначениеТЧСерии%",     ОписаниеТЧ.ИмяПоляНазначениеТЧСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ИмяПоляСерияТЧСерии%",          ОписаниеТЧ.ИмяПоляСерияТЧСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопСоединения_ТаблицаСерии%",   ОписаниеТЧ.ДопСоединения_ТаблицаСерии);
			ТекстЗапросаПоТабличнойЧасти = СтрЗаменить(ТекстЗапросаПоТабличнойЧасти, "%ДопОтборы_ТаблицаСерии%",       ОписаниеТЧ.ДопОтборы_ТаблицаСерии);
			
		КонецЕсли;
		
		МассивТекстовОсновногоЗапроса.Добавить(ТекстЗапросаПоТабличнойЧасти);
		
	КонецЦикла;
	
	ШаблонОбъединение = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	МассивТекстовСуммированияЗапросов.Добавить(СтрСоединить(МассивТекстовОсновногоЗапроса, ШаблонОбъединение));
	
	ШаблонСуммирование = "
	|
	|;
	|
	|";
	
	Возврат СтрСоединить(МассивТекстовСуммированияЗапросов,ШаблонСуммирование);
	
КонецФункции

#КонецОбласти
