
#Область ПрограммныйИнтерфейс

// Получает данные по хеш суммам для переданных упаковок.
//
// Параметры:
//	ДанныеУпаковок - Соответствие Из КлючИЗначение - содержит данные упаковок, для которых требуется получить хеш сумму:
//	* Ключ - Идентификтор строки дерева маркируемой продукции, содержащей упаковку
//	* Значение - Структура - содержит:
//       ** СтрокиУчаствующиеВРасчете       - СписокЗначений - содержит штрихкоды вложенной маркируемой продукции.
//       ** ИдентификаторыВложенныхУпаковок - ИдентификаторыВложенныхУпаковок - массив идентификаторов строк дерева вложенных упаковок.
//       ** ЗначениеШтрихКода               - Строка - штриховой код упаковки.
//       ** ХешСумма                        - Строка - сюда будет помещена рассчитанная для упаковки хеш-сумма.
//       ** ТребуетсяПеремаркировка         - Булево - рассчитанный признак необходимости перемаркировки.
//
Процедура ПолучитьДанныеПоХешСуммамДляУпаковок(ДанныеУпаковок) Экспорт
	
	Для Каждого ДанныеУпаковки Из ДанныеУпаковок Цикл
		
		ПроверкаИПодборПродукцииМОТП.РассчитатьХешСуммуДляУпаковки(ДанныеУпаковок, ДанныеУпаковки.Значение);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииМОТП.ОпределитьНеобходимостьПеремаркировкиПоДаннымУпаковок(ДанныеУпаковок);
	
КонецПроцедуры

Процедура ПрименитьКешШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииФормыПроверки, ОбновлениеТаблицыТоваров = Ложь) Экспорт

	Если НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
	ТабличнаяЧастьТовары = Форма[Объект][ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары];
	
	ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧастьТовары);
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия");

	Если ОбновлениеТаблицыТоваров Тогда
		ТабличнаяЧастьШтрихкоды = Форма[Объект][ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок];
		УдалитьСвязанныеШтрихкодыУпаковок = Новый Соответствие;
		УдалитьСтрокиШтрихкодов = Новый Массив;
		//Удалились товары
		Для Каждого СтрокаТовары Из Форма.ДанныеШтрихкодовУпаковокГосИС Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТовары.Количество() = 0 Тогда
				Для Каждого ЭлементСписка Из СтрокаТовары.ШтрихкодыУпаковок Цикл
					УдалитьСвязанныеШтрихкодыУпаковок.Вставить(ЭлементСписка.Значение, Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		Если (УдалитьСвязанныеШтрихкодыУпаковок.Количество()) Тогда
			//Удалим все упаковки верхнего уровня где они есть из ТЧ
			Для Каждого СтрокаШтрихкоды Из ТабличнаяЧастьШтрихкоды Цикл
				Если УдалитьСвязанныеШтрихкодыУпаковок.Получить(СтрокаШтрихкоды.ШтрихкодУпаковки)=Истина Тогда
					УдалитьСтрокиШтрихкодов.Добавить(СтрокаШтрихкоды);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из УдалитьСтрокиШтрихкодов Цикл
				ТабличнаяЧастьШтрихкоды.Удалить(СтрокаУдалить);
			КонецЦикла;
			ПроверкаИПодборПродукцииМОТП.ЗаполнитьКешШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииФормыПроверки);
		КонецЕсли;
		
	КонецЕсли;
	 
	Для Каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
		Если СтрокаТовары.МаркируемаяПродукцияГосИС Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			КоличествоПоКлючу = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
				КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу.Количество;
			КонецЦикла;
			Если СтрокиКеша.Количество() = 0 Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			ИначеЕсли КоличествоПоКлючу = СтрокиКеша[0].Количество Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 1;
			Иначе
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			КонецЕсли;
		Иначе
			СтрокаТовары.СтатусПроверкиГосИС = 0;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВозобновитьПроверкуПоДокументу(ДокументСсылка) Экспорт
	
	Возврат РегистрыСведений.СтатусыПроверкиИПодбораДокументовМОТП.ОтразитьВозобновлениеПроверкиДокумента(ДокументСсылка);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧасть) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.МаркируемаяПродукцияГосИС Тогда
			СтрокаТабличнойЧасти.СтатусПроверкиГосИС = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти