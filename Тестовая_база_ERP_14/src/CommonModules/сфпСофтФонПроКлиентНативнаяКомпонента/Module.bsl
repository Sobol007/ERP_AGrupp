
////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции СофтФон при работе с софтфоном через нативную компоненту
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#Область КлиентскиеПроцедурыИФункцииСофтФон

// Процедура инициализирует подключение к серверу СофтФона
//
// Параметры:
//	ПоказыватьСообщения - Булево - Показывать ли сообщения об ошибках подключения пользователю
//
Процедура сфпПодключитьсяНативнаяКомпонента(ПоказыватьСообщения = Ложь) Экспорт
	
	ПараметрыПриложения.Вставить("сфпВерсияПанели", "0.0.0.0");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;	
	ТипСистемы = СистемнаяИнформация.ТипПлатформы;
	
	Если ТипСистемы = ТипПлатформы.Windows_x86 ИЛИ ТипСистемы = ТипПлатформы.Windows_x86_64 Тогда
		// Новый алгоритм получения пути установки
		Оболочка = Новый COMОбъект("WScript.Shell");
		КаталогДанныхПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
		КаталогСофтфона = КаталогДанныхПользователя + "\1C-Rarus\1C-Rarus SoftPhone\";
		
		ДополнительныеПараметры = Новый Структура("ПоказыватьСообщения,КаталогСофтфона", ПоказыватьСообщения, КаталогСофтфона);
		Оповещение = Новый ОписаниеОповещения("ПриПроверкеСуществованияКаталогаСофтФона", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);
		
		ПроверяемыйФайл = Новый Файл(КаталогСофтфона);
		ПроверяемыйФайл.НачатьПроверкуСуществования(Оповещение);
		
	ИначеЕсли ПоказыватьСообщения Тогда
		ПоказатьПредупреждение(, НСтр("ru='Работа Софтфона возможна только под управлением ОС Windows!'"));
	КонецЕсли;	

КонецПроцедуры // сфпПодключитьсяНативнаяКомпонента()

// Процедура - При проверке существования каталога софт фона
//  Процедура проверяет существование каталога с софтфоном.
//
// Параметры:
//  Существует				 - Булево	 - Признак существования компоненты.
//  ДополнительныеПараметры	 - Структура - Структура параметров
//  	ПоказыватьСообщения - Булево	 - Признак необходимости показа предупреждения пользователю при проверке существования каталога
//  	КаталогСофтфона	 - Строка	 - Путь к каталогу софтфона
//
Процедура ПриПроверкеСуществованияКаталогаСофтФона(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		Если ДополнительныеПараметры.ПоказыватьСообщения Тогда
			ПоказатьПредупреждение(,Нстр("ru='Не установлена панель Софтфона!';en='The Softphone panel is not installed!'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;					
	
	ФайлИсточник = ДополнительныеПараметры.КаталогСофтфона + "SoftPhoneClient.ini";
	ФайлПриемник = КаталогВременныхФайлов() + "SoftPhoneClient.txt";
	
	Оповещение = Новый ОписаниеОповещения("сфпПодключитьсяНативнаяКомпонента_Продолжить", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);
	НачатьКопированиеФайла(Оповещение, ФайлИсточник, ФайлПриемник);

КонецПроцедуры // ПриПроверкеСуществованияКаталогаСофтФона()

// Процедура - Сфп подключиться нативная компонента продолжить
//
// Параметры:
//  СкопированныйФайл		 - Строка	 - Путь к файлу компоненты 
//  ДополнительныеПараметры	 - Структура - Структура параметров
//  	ПоказыватьСообщения 	- Булево	- Признак необходимости показа предупреждения пользователю
//
Процедура сфпПодключитьсяНативнаяКомпонента_Продолжить(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СкопированныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлСофтфона = Новый ЧтениеТекста(СкопированныйФайл);
	ТекстФайла = ФайлСофтфона.Прочитать(1000);
	ФайлСофтфона.Закрыть();

	НомерСимволаПутиКПанели = Найти(ТекстФайла, "[ClientPath]");
	Если НомерСимволаПутиКПанели = 0 Тогда
		Если ДополнительныеПараметры.ПоказыватьСообщения Тогда
			ПоказатьПредупреждение(, Нстр("ru='Не удалось найти установленную панель Софтфона. Пожалуйста, переустановите панель!';en='The installed Softphone panel could not be found. Please reinstall the panel!'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;		
	
	ТекНомерСимвола = НомерСимволаПутиКПанели + 12;
	ПутьККомпоненте = "";
	Пока Сред(ТекстФайла,ТекНомерСимвола,1) <> "[" Цикл
		ПутьККомпоненте = ПутьККомпоненте + Сред(ТекстФайла,ТекНомерСимвола,1);
		ТекНомерСимвола = ТекНомерСимвола + 1;
	КонецЦикла;		
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ТипСистемы = СистемнаяИнформация.ТипПлатформы;
	Если ТипСистемы = ТипПлатформы.Linux_x86_64 ИЛИ ТипСистемы = ТипПлатформы.MacOS_x86_64 ИЛИ ТипСистемы = ТипПлатформы.Windows_x86_64 Тогда
		  ИмяКаталогаКомпоненты = "x64";
	Иначе ИмяКаталогаКомпоненты = "x32";
	КонецЕсли;
	
	ПутьККомпоненте = СокрЛП(ПутьККомпоненте);
	ПутьККомпоненте = СтрЗаменить(ПутьККомпоненте, "SPPanel=", "");
	ПутьККомпоненте = СтрЗаменить(ПутьККомпоненте, "SPPanel3.exe", "NativeComponent\" + ИмяКаталогаКомпоненты + "\SP_ClientNative.dll");
	
	// Дополнительная проверка на нужную версию СФ
	ДополнительныеПараметры.Вставить("ПутьККомпоненте", ПутьККомпоненте);
	ДополнительныеПараметры.Вставить("ИмяКаталогаКомпоненты", ИмяКаталогаКомпоненты);
	Оповещение = Новый ОписаниеОповещения("ПриПроверкеСуществованияКомпоненты", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);

	ПроверяемыйФайл = Новый Файл(ПутьККомпоненте);
	ПроверяемыйФайл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры // сфпПодключитьсяНативнаяКомпонента_Продолжить()

// Процедура - При проверке существования компоненты
//  Процедура проверяет существование компоненты
//
// Параметры:
//  Существует				 - Булево	 - Признак существования компоненты.
//  ДополнительныеПараметры	 - Структура - Структура параметров
//  	ПоказыватьСообщения 	- Булево	- Признак необходимости показа предупреждения пользователю при проверке существования компаненты
//  	ИмяКаталогаКомпоненты 	- Строка	- Путь к каталогу с компонентой
//  	ПутьККомпоненте	 		- Строка	- Путь к файлу компоненты
//
Процедура ПриПроверкеСуществованияКомпоненты(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		Если ДополнительныеПараметры.ПоказыватьСообщения Тогда
			ПоказатьПредупреждение(, Нстр("ru='Не найдена компонента для работы с Софтфоном. Версия панели Софтфона устарела!';en='No component was found to work with Softphone. The version of the Softphone panel is outdated!'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	КудаКопировать = КаталогВременныхФайлов() + "SP_ClientNative_"+ ДополнительныеПараметры.ИмяКаталогаКомпоненты + ".dll";
	ДополнительныеПараметры.Вставить("КудаКопировать", КудаКопировать);
	
	Оповещение = Новый ОписаниеОповещения("ПриПроверкеСуществованияВременнойКомпоненты", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);
	
	ПроверяемыйФайл = Новый Файл(КудаКопировать);
	ПроверяемыйФайл.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры // ПриПроверкеСуществованияКомпоненты()

Процедура ПриПроверкеСуществованияВременнойКомпоненты(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		Оповещение = Новый ОписаниеОповещения("сфпПодключитьсяНативнаяКомпонента_Закончить", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);
		НачатьКопированиеФайла(Оповещение, ДополнительныеПараметры.ПутьККомпоненте, ДополнительныеПараметры.КудаКопировать);
		
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("сфпПодключитьсяКомпонентаИсточник_Подключить", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(Оповещение, ДополнительныеПараметры.ПутьККомпоненте, "SP_ClientNative", ТипВнешнейКомпоненты.Native);

КонецПроцедуры // ПриПроверкеСуществованияВременнойКомпоненты()

Процедура сфпПодключитьсяКомпонентаИсточник_Подключить(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Если ДополнительныеПараметры.ПоказыватьСообщения Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удалось подключить компоненту Софтфона! Проверьте правильность её установки и наличия на диске.';en='Unable to connect the Softphone component! Check that it is installed correctly and that it is on the disk.'"), 5);
		КонецЕсли;
		
		Возврат; 
	КонецЕсли;
	
	КомпонентаИсточник = Новый("AddIn.SP_ClientNative.SPPanelNative");
	ВерсияКомпонентыИсточник = КомпонентаИсточник.Release();
	ДополнительныеПараметры.Вставить("ВерсияКомпонентыИсточник", ВерсияКомпонентыИсточник);
	КомпонентаИсточник = Неопределено;
	
	Оповещение = Новый ОписаниеОповещения("сфпПодключитьсяКомпонентаПриемник_Подключить", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(Оповещение, ДополнительныеПараметры.КудаКопировать, "SP_ClientNative", ТипВнешнейКомпоненты.Native);

КонецПроцедуры // сфпПодключитьсяКомпонентаИсточник_Подключить()

Процедура сфпПодключитьсяКомпонентаПриемник_Подключить(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Если ДополнительныеПараметры.ПоказыватьСообщения Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удалось подключить компоненту Софтфона! Проверьте правильность её установки и наличия на диске.';en='Unable to connect the Softphone component! Check that it is installed correctly and that it is on the disk.'"), 5);
		КонецЕсли;
		
		Возврат; 
	КонецЕсли;
	
	сфпПанельУправления = Новый("AddIn.SP_ClientNative.SPPanelNative");
	ВерсияКомпонентыПриемник = сфпПанельУправления.Release();
	
	Если ДополнительныеПараметры.ВерсияКомпонентыИсточник <> ВерсияКомпонентыПриемник Тогда
		сфпПанельУправления = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("сфпПодключитьсяНативнаяКомпонента_Закончить", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);
		НачатьКопированиеФайла(Оповещение, ДополнительныеПараметры.ПутьККомпоненте, ДополнительныеПараметры.КудаКопировать);
		
	Иначе	
		ДополнительныеПараметры.Вставить("СоздаватьОбъект", Ложь);
		сфпПодключитьсяНативнаяКомпонента_Подключить(Истина, ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры // сфпПодключитьсяКомпонентаПриемник_Подключить()

// Процедура - Сфп подключиться нативная компонента закончить
//
// Параметры:
//  СкопированныйФайл		 - Строка	 - Путь к файлу компоненты 
//  ДополнительныеПараметры	 - Структура - Структура параметров
//  	ПоказыватьСообщения 	- Булево	- Признак необходимости показа предупреждения пользователю
//  	ИмяКаталогаКомпоненты 	- Строка	- Путь к каталогу с компонентой
//  	ПутьККомпоненте	 		- Строка	- Путь к файлу компоненты
//
Процедура сфпПодключитьсяНативнаяКомпонента_Закончить(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СкопированныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("сфпПодключитьсяНативнаяКомпонента_Подключить", сфпСофтФонПроКлиентНативнаяКомпонента, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(Оповещение, СкопированныйФайл, "SP_ClientNative", ТипВнешнейКомпоненты.Native);

КонецПроцедуры // сфпПодключитьсяНативнаяКомпонента_Закончить()

// Процедура - Сфп подключиться нативная компонента подключить
// Процедура подключает компаненту "AddIn.SP_ClientNative.SPPanelNative"
//
// Параметры:
//  Подключено				 - Булево	 - Признак подключения компаненты
//  ДополнительныеПараметры	 - Структура - Структура параметров
//		 ПоказыватьСообщения - Булево	 - Признак необходимости показа предупреждения пользователю при подключении
//
Процедура сфпПодключитьсяНативнаяКомпонента_Подключить(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Если ДополнительныеПараметры.ПоказыватьСообщения Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удалось подключить компоненту Софтфона! Проверьте правильность её установки и наличия на диске.';en='Unable to connect the Softphone component! Check that it is installed correctly and that it is on the disk.'"), 5);
		КонецЕсли;
		
		Возврат; 
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("СоздаватьОбъект") Тогда
		сфпПанельУправления	= Новый("AddIn.SP_ClientNative.SPPanelNative");
	КонецЕсли;

	сфпНужнаАвторизация = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПривязатьВнутреннийНомер");
	Если сфпНужнаАвторизация Тогда
		ЛогинСофтфон = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпЛогинНаСерверСофтФон");
		ПарольСофтфон = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПарольНаСерверСофтФон");
		сфпПанельУправления.Autorization(ЛогинСофтфон, ПарольСофтфон, 1);
	КонецЕсли;
	
	СтрокаДоступныхДействий	= "";
	МассивДоступныхДействий = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	КоличествоДействий = МассивДоступныхДействий.Количество() - 1;
	Для НомерДействия = 2 По КоличествоДействий Цикл
		ЭлементМассива = МассивДоступныхДействий[НомерДействия];
		СтрокаДоступныхДействий	= СтрокаДоступныхДействий + Формат(НомерДействия, "ЧГ=0") + "=" + СтрЗаменить(ЭлементМассива.Наименование, " ", Символы.НПП) + ";";
	КонецЦикла;	
	
	сфпПанельУправления.RegistrationEvents(СтрокаДоступныхДействий);

	ВерсияПанели = сфпСофтФонПроКлиент.сфпПолучитьВерсиюПанели();
	ПараметрыПриложения.Вставить("сфпВерсияПанели", ВерсияПанели);
		
	сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();
	Если сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда
		Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
			сфпСофтФонПроКлиент.сфпПодключитьCLON();
		КонецЕсли;	
	КонецЕсли;
	
	Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьВнутреннююПанель") Тогда
		ПараметрыФормы = Новый Структура();
		ОткрытьФорму("ОбщаяФорма.сфпВнутренняяПанельУправления", ПараметрыФормы);
	КонецЕсли;
	
	Если сфпСоответствиеЛинийИСтатусов = Неопределено Тогда
		сфпСоответствиеЛинийИСтатусов = Новый Соответствие();
		// Добавлено вместо вызова из форм - ибо тормозит открытие формы
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПанели, "3.0.3.120") >= 0 Тогда
			сфпСофтФонПроКлиент.сфпПолучитьСостоянияЛиний();
		КонецЕсли;
	КонецЕсли;

	Состояние("Версия компоненты СофтФон: " + ВерсияПанели);

КонецПроцедуры // сфпПодключитьсяНативнаяКомпонента_Подключить()

// Процедура заполняет префиксы и настройки
//
Процедура сфпЗаполнитьПрефиксыИНастройкиНативнаяКомпонента() Экспорт
	
	сфпСтрокаНастроек = "";
	
	Попытка
		сфпПанельУправления.GetSettingsJSON(сфпСтрокаНастроек);
	Исключение КонецПопытки;
	
	Если ПустаяСтрока(сфпСтрокаНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим текущие настройки
	сфпПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
	
	// Запишем настройки сервера СофтФона
	сфпСтруктураНастроек = сфпСофтФонПроСервер.UnJSON(сфпСофтФонПроКлиент.ЗаменитьНедопустимыеСимволыXML(сфпСтрокаНастроек));
	
	Если сфпСтруктураНастроек.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтруктураДанных = Новый Структура();
	Для Каждого ЭлементМассива Из сфпСтруктураНастроек Цикл
		СтруктураДанных.Вставить(ЭлементМассива.Ключ, ЭлементМассива.Значение); 
	КонецЦикла;
	
	сфпСофтФонПроСервер.сфпЗаписатьПараметрыСервераНативнаяКомпонента(СтруктураДанных);
	
	// Если пользователь авторизовался
	Если НЕ ПустаяСтрока(СтруктураДанных["LocalPhoneNum"]) Тогда
		// Если изменился текущий внутренний номер пользователя
		Если СтруктураДанных["LocalPhoneNum"] <> сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер() Тогда
			// Запишем внутренний номер для текущего пользователя
			ТекущийПользователь	= сфпСофтФонПроСервер.сфпТекущийПользователь();
			МассивПользователей = сфпСофтФонПроСервер.сфпЗаписатьНомерПользователю(СтруктураДанных["LocalPhoneNum"], ТекущийПользователь);
			Если сфпСофтФонПроСервер.сфпИспользоватьМаршрутизацию() И НЕ сфпСофтФонПроСервер.сфпИспользоватьМаршрутизациюПоНомеруИзКИПользователя() Тогда
				// Изменим маршрутизацию в АТС
				СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
				Для Каждого ПользовательМассива Из МассивПользователей Цикл
					НаборПользователя = сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ПользовательМассива);
					Для Каждого СтрокаНабора Из НаборПользователя Цикл
						СтарыйНабор.Добавить(СтрокаНабора);
					КонецЦикла;	
				КонецЦикла;	
				НовыйНабор = сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
				// Изменяем внутренний номер на новый
				Для Каждого СтрокаНабора Из НовыйНабор Цикл
					СтрокаНабора.ВнутреннийНомер = СтруктураДанных["LocalPhoneNum"];
				КонецЦикла;	
				СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
				сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
				сфпСофтФонПроСервер.сфпПерезаписатьНомерЛинииТекущегоПользователяВРегистреПоиска(ТекущийПользователь, СтруктураДанных["LocalPhoneNum"]); 											
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяОбновитьИнтерфейс = Ложь;
	
	// Проверяем необходимость обновления интерфейса
	Если СтруктураДанных["UseRouter"] <> Неопределено И СтруктураДанных["UseRouter"] <> сфпПараметрыСервера.ИспользоватьМаршрутизацию Тогда
		ТребуетсяОбновитьИнтерфейс = Истина;
	КонецЕсли;
	Если СтруктураДанных["HistoryOn"] <> Неопределено И СтруктураДанных["HistoryOn"] <> сфпПараметрыСервера.ИспользоватьИсториюЗвонков Тогда
		// Если изменилась видимость отчетов
		ТребуетсяОбновитьИнтерфейс = Истина;
	КонецЕсли;
	Если СтруктураДанных["UseHistory"] <> Неопределено И СтруктураДанных["UseHistory"] <> сфпПараметрыСервера.ИспользоватьИсториюЗвонков Тогда
		ТребуетсяОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если ТребуетсяОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;

КонецПроцедуры // сфпЗаполнитьПрефиксыИНастройкиНативнаяКомпонента()

// Динамически подключаемый обработчик события "OnAllLinesInfo" внешней панели
//  Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//  МассивСтатусов	 - Массив	 - Массив описания состояния линий
//
Процедура сфпOnAllLinesInfoНативнаяКомпонента(МассивСтатусов) Экспорт
	МассивЛиний = Новый Массив;
	Для Каждого ЭлементМассива Из МассивСтатусов Цикл
		СтруктураЛинии = Новый Структура;
		СтруктураЛинии.Вставить("hLine",		ЭлементМассива.Получить("hLine"));
		СтруктураЛинии.Вставить("LineName",		ЭлементМассива.Получить("LineName"));
		СтруктураЛинии.Вставить("Number",		ЭлементМассива.Получить("Number"));
		СтруктураЛинии.Вставить("LineType",		ЭлементМассива.Получить("LineType"));
		СтруктураЛинии.Вставить("Provider",		ЭлементМассива.Получить("Provider"));
		СтруктураЛинии.Вставить("LineState",	ЭлементМассива.Получить("LineState"));
		МассивЛиний.Добавить(СтруктураЛинии);
	КонецЦикла;
	
	// формы больше оповещать не надо
	сфпСофтФонПроКлиент.сфпПерезаполнитьСоответствиеСостоянияЛиний(МассивЛиний);
	Оповестить("СофтФон_OnAllLinesInfo", МассивЛиний);
	
КонецПроцедуры // сфпOnAllLinesInfoНативнаяКомпонента()

#КонецОбласти

#КонецОбласти

