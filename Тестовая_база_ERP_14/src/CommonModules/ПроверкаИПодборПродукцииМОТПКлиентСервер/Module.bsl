#Область ПрограмныйИнтерфейс

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции формы проверки и подбора
//   в прикладные документы конфигураци - потребителя библиотеки ГосИС.
// 
// Параметры:
// ВозвращаемоеЗначение:
//	* ПараметрыИнтеграции - Структура - значения, используемые для интеграции формы проверки и подбора:
//		** ИспользоватьБезТабачнойПродукции           - Булево - признак показа гиперссылки в форме документа без табачной продукции
//		** БлокироватьТабличнуюЧастьТоварыПриПроверке - Булево - признак блокировки табличной части "Товары" для изменений после начала проверки в форме
//		** ИнформацияДляПользователяОБлокировке       - Строка - информационная надпись на форме над табличной частью "Товары" при БлокироватьТабличнуюЧастьТоварыПриПроверке = Истина
//		** ИнформацияДляПользователяОПроверке         - Строка - информационная надпись на форме над табличной частью "Товары" при БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь
//		** ИспользоватьСтатусПроверкаЗавершена        - Булево - признак допустимости у документа состояния завершения проверки. При значении Ложь проверку можно выполнять многократно.
//		** ИмяРеквизитаФормыОбъект                    - Строка - имя реквизита формы, содержащего объект документа
//		** ИмяТабличнойЧастиТовары                    - Строка - имя табличной части документа, содержащей номенклатуру
//		** ИмяРодительскойГруппыФормы                 - Строка - имя элемента-группы формы документа, в которую необходимо добавить гиперссылку для открытия формы проверки
//		** ИмяЭлементаФормыТовары                     - Строка - имя элемента формы документа, в котором выводится табличная часть с номенклатурой
//		** ИмяПоследующегоЭлементаФормы               - Строка - имя элемента формы, перед которым необходимо добавить гиперссылку для открытия формы проверки
//		** БлокируемыеЭлементы                        - Массив - имена элементов формы документа, которые необходимо заблокировать после начала работы с формой проверки
//		** ИспользоватьСтатусПроверкиПодбораДокумента - Булево - признак наличия у формы реквизита "СтатусПроверкиГосИС"
//		** ИспользоватьКолонкуСтатусаПроверкиПодбора  - Булево - признак использования специальной колонки в таблице товаров для отображения статуса проверки товара
//		** ИмяСледующейКолонки                        - Строка - имя колонки, перед которой необходимо вставить колонку для отображения статуса проверки товара
//		** ИмяТабличнойЧастиШтрихкодыУпаковок         - Строка - имя табличной части документа, содержащей штрихкоды упаковок номенклатуры
//
Функция ПараметрыИнтеграцииФормыПроверкиИПодбора() Экспорт
	
	ПараметрыИнтеграции = Новый Структура();
	
	//  Показывать гиперссылку в документе без табачной продукции
	ПараметрыИнтеграции.Вставить("ИспользоватьБезТабачнойПродукции", Ложь);
	//  Сценарии работы с блокированием ТЧ Товары или без ее блокирования в процессе подбора в документ
	ПараметрыИнтеграции.Вставить("БлокироватьТабличнуюЧастьТоварыПриПроверке", Истина);
	ПараметрыИнтеграции.Вставить("ИнформацияДляПользователяОБлокировке", НСтр(
		"ru = 'До окончания работы в форме сканирования и проверки табачной продукции внесение изменений в данной форме недоступно.';
		|en = 'До окончания работы в форме сканирования и проверки табачной продукции внесение изменений в данной форме недоступно.'"));
	ПараметрыИнтеграции.Вставить("ИнформацияДляПользователяОПроверке", НСтр(
		"ru = 'Выполняется проверка табачной продукции. При окончании работы в форме проверки табличная часть может быть изменена.';
		|en = 'Выполняется проверка табачной продукции. При окончании работы в форме проверки табличная часть может быть изменена.'"));
	
	//  Сценарии работы "не проверялась -> проверяется <-> проверена" или "не проверяется <-> проверяется"
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкаЗавершена", Истина);
	
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормыОбъект",      "Объект");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиТовары",      "Товары");
	ПараметрыИнтеграции.Вставить("ИмяРодительскойГруппыФормы",   "СтраницаТовары");
	ПараметрыИнтеграции.Вставить("ИмяЭлементаФормыТовары",       "Товары");
	ПараметрыИнтеграции.Вставить("ИмяПоследующегоЭлементаФормы", "Товары");
	ПараметрыИнтеграции.Вставить("БлокируемыеЭлементы",          Новый Массив);
	
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкиПодбораДокумента", Ложь);
	ПараметрыИнтеграции.Вставить("ИспользоватьКолонкуСтатусаПроверкиПодбора",  Ложь);
	ПараметрыИнтеграции.Вставить("ИмяСледующейКолонки",                        "ТоварыНоменклатура");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок",         "ШтрихкодыУпаковок");
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

// Возвращает структуру, заполненную значениями по умолчанию, используемую для передачи в форму проверки и подбора
//   при открытии из прикладных документов конфигураци - потребителя библиотеки ГосИС.
// 
// Параметры:
// ВозвращаемоеЗначение:
//	* ПараметрыОткрытия - Структура - значения, используемые для управления формой проверки и подбора:
//		** ИмяРеквизитаФормыОбъект              - Строка - имя реквизита формы документа, содержащего объект документа. Для открытия не из формы документа должен быть пустой строкой
//		** ИмяРеквизитаОрганизация              - Строка - имя реквизита документа или реквизита формы, содержащего организацию
//		** ИмяРеквизитаКонтрагент               - Строка - имя реквизита документа или реквизита формы, содержащего контрагента
//		** ИмяРеквизитаСклад                    - Строка - имя реквизита документа или реквизита формы, содержащего склад
//		** ИмяРеквизитаДокументОснование        - Строка - имя реквизита документа, содержащего его основание. Если основания нет, должен быть пустой строкой.
//		** ПроверятьНеобходимостьПеремаркировки - Булево - признак необходимости контроля состава упаковок в форме проверки.
//		** РедактированиеФормыНедоступно        - Булево - признак недоступности редактирования формы, из которой открывается форма проверки
//		** АдресПроверяемыхДанных               - Строка - адрес данных для загрузки в форму проверки, если передача данных происходит не через ссылку на документ
//		** ОписаниеОповещенияПриЗакрытии        - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия формы проверки
//		** ПроверятьМодифицированность          - Булево - признак необходимости записи документа перед открытием формы проверки
//
Функция ПараметрыОткрытияФормыПроверкиИПодбора() Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИмяРеквизитаФормыОбъект",             "Объект");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаОрганизация",             "Организация");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаКонтрагент",              "Контрагент");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаСклад",                   "Склад");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаДокументОснование",       "ДокументОснование");
	ПараметрыОткрытия.Вставить("ПроверятьНеобходимостьПеремаркировки", Истина);
	ПараметрыОткрытия.Вставить("РедактированиеФормыНедоступно",        Ложь);
	ПараметрыОткрытия.Вставить("АдресПроверяемыхДанных",               "");
	ПараметрыОткрытия.Вставить("ОписаниеОповещенияПриЗакрытии",        Неопределено);
	ПараметрыОткрытия.Вставить("ПроверятьМодифицированность",          Истина);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Возвращает строковое значение ссылки, по которой происходит переход при нажатии на гиперссылку открытия формы проверки и подбора
//   из прикладных документов конфигураци - потребителя библиотеки ГосИС.
// 
// Параметры:
// ВозвращаемоеЗначение:
//	* НавигационнаяСсылка - Строка - значение ссылки для перехода при нажатии на гиперссылку открытия формы проверки.
//
Функция НавигационнаяСсылкаОткрытьФормуПроверкиИПодбора() Экспорт
	
	Возврат "ОткрытьФормуПроверкиИПодбораТабачнойПродукции";
	
КонецФункции

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ПересчетИтогов

// Определяет типы всех упаковок в дереве маркируемой продукции
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ОпределитьТипыВсехУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ОпределитьТипУпаковки(СтрокаДерева, Истина);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого для всех упаковок дерева. 
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Истина);
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетИтоговПроверкиСодержимогоУпаковок

// Пересчитывает итоги по проверке содержимого упаковки для строки дерева маркируемой продукции. 
// 
// Параметры:
// 	СтрокаДерева             - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
// 	ПересчитыватьПодчиненные - Булево - признак необходимости пересчета подчиненных упаковок.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные) Экспорт
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Если Не СтрокаДерева.НеПересчитыватьКоличествоПачек Тогда
		СтрокаДерева.КоличествоПодчиненныхПачек      = 0;
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхБлоков        = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.НедопустимыйКодМаркировки
			Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
			
		КонецЕсли;
		
		Если ПересчитыватьПодчиненные Тогда
		
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
		
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхПачек    = СтрокаДерева.КоличествоПодчиненныхПачек + 1;
			
		ИначеЕсли ЭтоУпаковкаБлока(ПодчиненнаяСтрока) Тогда
			
			СтрокаДерева.КоличествоПодчиненныхБлоков   = СтрокаДерева.КоличествоПодчиненныхБлоков + 1;
			
		Иначе
			
			СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоПодчиненныхПачек         = СтрокаДерева.КоличествоПодчиненныхПачек         + ПодчиненнаяСтрока.КоличествоПодчиненныхПачек;
		СтрокаДерева.КоличествоПодчиненныхБлоков        = СтрокаДерева.КоличествоПодчиненныхБлоков        + ПодчиненнаяСтрока.КоличествоПодчиненныхБлоков;
		СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
		
		СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
		СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
		СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
		СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
		СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок
		+ СтрокаДерева.КоличествоПодчиненныхБлоков + СтрокаДерева.КоличествоПодчиненныхПачек;

	
	СтрокаДерева.ВсяУпаковкаПроверена = Не СтрокаДерева.НеСодержитсяВДанныхДокумента
	                                    И (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхВНаличии)
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки");
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеПолейДереваМаркированнойПродукции

// Определяет индекс картинки статуса проверки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева) Экспорт
	
	Если СтрокаДерева.НедопустимыйКодМаркировки Тогда

		СтрокаДерева.ИндексКартинкиСтатусПроверки = 1;
	
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 0;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда

		СтрокаДерева.ИндексКартинкиСтатусПроверки = 1;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 2;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 3;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 4;
	
	ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 5;
	
	ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 6;
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует представление итогов по проверки содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева) Экспорт
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является упаковкой>';
															|en = '<не является упаковкой>'");
		
	ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
		Или СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки")
		Или СтрокаДерева.НеСодержитсяВДанныхДокумента Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>';
																|en = '<не применимо>'");
	
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустой блок>';
																	|en = '<пустой блок>'");
		Иначе
			СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустая упаковка>';
																	|en = '<пустая упаковка>'");
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтсутствует = 0
		И СтрокаДерева.КоличествоПодчиненныхОтложено = 0 
		И СтрокаДерева.КоличествоПодчиненныхНеЧислилось = 0 Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2';
																		|en = 'Проверено %1 из %2'"),
		                                                 СтрокаДерева.КоличествоПодчиненныхВНаличии,
		                                                 СтрокаДерева.КоличествоПодчиненныхВсего);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтложено = 0
		      И СтрокаДерева.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3';
																		|en = 'Проверено %1 из %2, отсутствует - %3'"),
		                                                 КоличествоПроверено,
		                                                 СтрокаДерева.КоличествоПодчиненныхВсего,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтсутствует);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтсутствует = 0
		      И СтрокаДерева.КоличествоПодчиненныхНеЧислилось = 0 Тогда  
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтложено;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3';
																		|en = 'Проверено %1 из %2, отложено - %3'"),
		                                                 КоличествоПроверено,
		                                                 СтрокаДерева.КоличествоПодчиненныхВсего,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтложено);
		 
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтложено = 0
		      И СтрокаДерева.КоличествоПодчиненныхОтсутствует = 0 Тогда
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхНеЧислилось;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, не числилось - %3';
																		|en = 'Проверено %1 из %2, не числилось - %3'"),
		                                                 КоличествоПроверено,
		                                                 СтрокаДерева.КоличествоПодчиненныхВсего,
		                                                 СтрокаДерева.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтложено = 0 Тогда 
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтсутствует 
		                    + СтрокаДерева.КоличествоПодчиненныхНеЧислилось;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4';
																		|en = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 СтрокаДерева.КоличествоПодчиненныхВсего,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтсутствует,
		                                                 СтрокаДерева.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхОтсутствует = 0 Тогда 
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтложено 
		                    + СтрокаДерева.КоличествоПодчиненныхНеЧислилось;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, не числилось - %4';
																		|en = 'Проверено %1 из %2, отложено - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 СтрокаДерева.КоличествоПодчиненныхВсего,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтложено,
		                                                 СтрокаДерева.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтложено 
		                    + СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, отсутствует - %4';
																		|en = 'Проверено %1 из %2, отложено - %3, отсутствует - %4'"),
		                                                 КоличествоПроверено,
		                                                 СтрокаДерева.КоличествоПодчиненныхВсего,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтложено,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтсутствует);
		
	Иначе
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии + СтрокаДерева.КоличествоПодчиненныхОтложено 
		                    + СтрокаДерева.КоличествоПодчиненныхНеЧислилось + СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5';
																		|en = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5'"),
		                                                 КоличествоПроверено,
		                                                 СтрокаДерева.КоличествоПодчиненныхВсего,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтсутствует,
		                                                 СтрокаДерева.КоличествоПодчиненныхОтложено,
		                                                 СтрокаДерева.КоличествоПодчиненныхНеЧислилось);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева) Экспорт
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрокаДерева.Номенклатура;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
		 Или СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>';
																|en = '<нет>'");
		ИначеЕсли ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустой блок>';
																|en = '<пустой блок>'");
		Иначе
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>';
																|en = '<пустая упаковка>'");
		КонецЕсли;
		
	Иначе
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = "";
		
		Если СтрокаДерева.КоличествоПодчиненныхУпаковок > 0 Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = 'упаковок - %1';
																			|en = 'упаковок - %1'"), СтрокаДерева.КоличествоПодчиненныхУпаковок);
		КонецЕсли;
			
		Если СтрокаДерева.КоличествоПодчиненныхБлоков > 0 Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрокаДерева.ПредставлениеСодержимоеУпаковки
				+ ?(ПустаяСтрока(СтрокаДерева.ПредставлениеСодержимоеУпаковки), "", ", ")
				+ СтрШаблон(НСтр("ru = 'блоков - %1';
								|en = 'блоков - %1'"), СтрокаДерева.КоличествоПодчиненныхБлоков);
		КонецЕсли;
			
		Если СтрокаДерева.КоличествоПодчиненныхПачек > 0 Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрокаДерева.ПредставлениеСодержимоеУпаковки
				+ ?(ПустаяСтрока(СтрокаДерева.ПредставлениеСодержимоеУпаковки), "", ", ")
				+ СтрШаблон(НСтр("ru = 'пачек -  %1';
								|en = 'пачек -  %1'"), СтрокаДерева.КоличествоПодчиненныхПачек);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДерева.ТребуетсяПеремаркировка Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрШаблон(
			НСтр("ru = '(требуется разборка) %1';
				|en = '(требуется разборка) %1'"),
			СтрокаДерева.ПредставлениеСодержимоеУпаковки);
		
	КонецЕсли;

КонецПроцедуры

// Формирует признак допустимости и представление проверки данных МОТП для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
// ПараметрыПроверкиКодовМаркировки - Структура со свойствами
// 		ДопустимыеСтатусыКодовМаркировки - Массив значений типа ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - допустимые статусы кода маркировки для текущей хоз.операции
// 		КонтролироватьВладельца - Булево - необходимость контроля кода маркировки по владельцу
// 		ИННВладельца - Строка - ИНН владельца кода маркировки по данным ИС МОТП
//
Процедура ПроверитьДопустимостьКодаМаркировки(СтрокаДерева, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
	 Или СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
		
		СтрокаДерева.НедопустимыйКодМаркировки = Ложь;
		СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли НЕ ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки Тогда
		
		СтрокаДерева.НедопустимыйКодМаркировки = Ложь;
		СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = "";
		
	Иначе
		
		Если ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыКодовМаркировки.Найти(СтрокаДерева.СтатусКодаМаркировки) = Неопределено Тогда
			СтрокаДерева.НедопустимыйКодМаркировки = Истина;
			СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(НСтр("ru = 'Статус: %1';
																				|en = 'Статус: %1'"), СтрокаДерева.СтатусКодаМаркировки);
		Иначе
			СтрокаДерева.НедопустимыйКодМаркировки = Ложь;
			СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = "";
		КонецЕсли;
		
		Если ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельца
			И СтрокаДерева.ИННВладельца <> ПараметрыПроверкиКодовМаркировки.ИННВладельца Тогда
			СтрокаДерева.НедопустимыйКодМаркировки = Истина;
			СтрокаДерева.ПредставлениеПроверкиКодаМаркировки = СтрокаДерева.ПредставлениеПроверкиКодаМаркировки +
				?(ПустаяСтрока(СтрокаДерева.ПредставлениеПроверкиКодаМаркировки), "", ", ") +
				СтрШаблон(НСтр("ru = 'ИНН владельца: %1';
								|en = 'ИНН владельца: %1'"), СтрокаДерева.ИННВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеТипаУпаковки

Процедура ОпределитьТипУпаковки(СтрокаДерева, ВключаяПодчиненные)
	
	НоменклатураУпаковки   = Новый Соответствие;
	ХарактеристикаУпаковки = Новый Соответствие;
	СерияУпаковки          = Новый Соответствие;
	GTINУпаковки           = Новый Соответствие;
	
	ВУпаковкеРазнаяНоменклатура   = Ложь;
	ВУпаковкеРазныеХарактеристики = Ложь;
	ВУпаковкеРазныеСерии          = Ложь;
	ВУпаковкеРазныйGTIN           = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			Если ВключаяПодчиненные Тогда
				
				ОпределитьТипУпаковки(ПодчиненнаяСтрока, ВключаяПодчиненные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазнаяНоменклатура Тогда
			ВУпаковкеРазнаяНоменклатура = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеХарактеристики Тогда
			ВУпаковкеРазныеХарактеристики = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеСерии Тогда
			ВУпаковкеРазныеСерии = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныйGTIN Тогда
			ВУпаковкеРазныйGTIN = Истина;
		КонецЕсли;
		
		НоменклатураУпаковки.Вставить(ПодчиненнаяСтрока.Номенклатура, Истина);
		ХарактеристикаУпаковки.Вставить(ПодчиненнаяСтрока.Характеристика, Истина);
		СерияУпаковки.Вставить(ПодчиненнаяСтрока.Серия, Истина);
		GTINУпаковки.Вставить(ПодчиненнаяСтрока.GTIN, Истина);
		
	КонецЦикла;
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева,
	                              "Номенклатура", 
	                              "ВУпаковкеРазнаяНоменклатура", 
	                              НоменклатураУпаковки,
	                              ВУпаковкеРазнаяНоменклатура);
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева,
	                              "Характеристика", 
	                              "ВУпаковкеРазныеХарактеристики", 
	                              ХарактеристикаУпаковки,
	                              ВУпаковкеРазныеХарактеристики);
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева,
	                              "Серия", 
	                              "ВУпаковкеРазныеСерии", 
	                              СерияУпаковки,
	                              ВУпаковкеРазныеСерии);
	
	УстановитьЗначениеДляУпаковки(СтрокаДерева,
	                              "GTIN", 
	                              "ВУпаковкеРазныйGTIN", 
	                              GTINУпаковки,
	                              ВУпаковкеРазныйGTIN);
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
	ИначеЕсли НЕ СтрокаДерева.ВУпаковкеРазныйGTIN Тогда
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
	Иначе
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	КонецЕсли;
	
КонецПроцедуры

// Определяет тип упаковки(монотоварная или мультитоварная) при изменении строки дерева.
// Действие выполняется для текущей строки и всех её родительских строк.
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево маркируемой продукции.
// 	ИдентификаторИзмененойСтроки - Число - идентификатор изменившейся строки.
//
Процедура ОпределитьТипУпаковкиПриИзмененииСтроки(ДеревоМаркированнойПродукции, ИдентификаторИзмененойСтроки) Экспорт

	ИзмененнаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		
		ОпределитьТипУпаковки(ИзмененнаяСтрока, Ложь);
		
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		ОпределитьТипУпаковки(РодительИзмененнойСтроки, Ложь);
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеДляУпаковки(СтрокаДерева,
	                                    ИмяКолонкиЗначения,
	                                    ИмяКолонкиЕстьРазличные,
	                                    МассивЗначений,
	                                    ЕстьРазличныеБезусловно)
	
	Если ЕстьРазличныеБезусловно Тогда
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Истина;
		
	ИначеЕсли МассивЗначений.Количество() = 0 Тогда
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Ложь;
		
	ИначеЕсли МассивЗначений.Количество() = 1 Тогда
		
		Значение = Неопределено;
		Для Каждого КлючИЗначение Из МассивЗначений Цикл
			Значение = КлючИЗначение.Ключ;
		КонецЦикла;
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Значение;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Ложь;
		
	Иначе
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

Функция ТребуетсяУказаниеСерий(ПодобраннаяТабачнаяПродукция) Экспорт
	
	СтатусыСерийСерияНеУказана = ПроверкаИПодборПродукцииМОТПКлиентСервер.СтатусыСерийСерияНеУказана();
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяТабачнаяПродукция Цикл
		Если СтатусыСерийСерияНеУказана.Найти(СтрокаПодобраннойПродукции.СтатусУказанияСерий) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СтатусыСерийСерияНеУказана() Экспорт
		
	СтатусыСерияНеУказана = Новый Массив();
	
	ПроверкаИПодборПродукцииМОТПКлиентСерверПереопределяемый.СтатусыСерийСерияНеУказана(СтатусыСерияНеУказана);
	
	Возврат СтатусыСерияНеУказана;
	
КонецФункции

#КонецОбласти

// Формирует и отображает на форме информационную надпись о необходимости перемаркировки.
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма) Экспорт
	
	Если Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		
		ТекстТребуется = СтрШаблон(НСтр("ru = 'Требуется разборка упаковок - %1.';
										|en = 'Требуется разборка упаковок - %1.'"), Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать);
		СтрокаТребуется = Новый ФорматированнаяСтрока(ТекстТребуется,, Форма.ЦветТекстаТребуетВниманияГосИС);
		
		Если Форма.УстановленОтборТребуетсяПеремаркировать Тогда
			ТекстОтбор = НСтр("ru = '(снять отбор)';
								|en = '(снять отбор)'");
		Иначе
			ТекстОтбор = НСтр("ru = '(отобрать)';
								|en = '(отобрать)'");
		КонецЕсли;
		
		СтрокаОтбор = Новый ФорматированнаяСтрока(ТекстОтбор,, Форма.ЦветГиперссылки,, "ИзменитьОтборТребуетсяПеремаркировка");
		
		Форма.Элементы.ДекорацияИнформацияТребуетсяПеремаркировка.Заголовок = 
			Новый ФорматированнаяСтрока(СтрокаТребуется, " ", СтрокаОтбор);
			
		Форма.Элементы.ГруппаТребуетсяПеремаркировка.Видимость = Истина;
		
	Иначе
		
		Форма.Элементы.ГруппаТребуетсяПеремаркировка.Видимость = Ложь;
		
	КонецЕсли;
	
	Форма.ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки = Ложь;
	
	//ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
КонецПроцедуры

// Формирует и отображает на форме информационную надпись о наличии недопустимых кодов маркировки.
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНедопустимыхКодахМаркировки(Форма) Экспорт
	
	Если Форма.КоличествоНедопустимыхКодовМаркировки > 0 Тогда
		
		ТекстНедопустимыхКодов = СтрШаблон(НСтр("ru = 'Недопустимых кодов маркировки - %1.';
												|en = 'Недопустимых кодов маркировки - %1.'"), Форма.КоличествоНедопустимыхКодовМаркировки);
		СтрокаНедопустимыхКодов = Новый ФорматированнаяСтрока(ТекстНедопустимыхКодов,, Форма.ЦветТекстаТребуетВниманияГосИС);
		
		Если Форма.УстановленОтборНедопустимыеКодыМаркировки Тогда
			ТекстОтбор = НСтр("ru = '(снять отбор)';
								|en = '(снять отбор)'");
		Иначе
			ТекстОтбор = НСтр("ru = '(отобрать)';
								|en = '(отобрать)'");
		КонецЕсли;
		
		СтрокаОтбор = Новый ФорматированнаяСтрока(ТекстОтбор,, Форма.ЦветГиперссылки,, "ИзменитьОтборНедопустимыеКодыМаркировки");
		
		Форма.Элементы.ДекорацияНедопустимыеКодыМаркировки.Заголовок = 
			Новый ФорматированнаяСтрока(СтрокаНедопустимыхКодов, " ", СтрокаОтбор);
			
		Форма.Элементы.ГруппаНедопустимыеКодыМаркировки.Видимость = Истина;
		
	Иначе
		
		Форма.Элементы.ГруппаНедопустимыеКодыМаркировки.Видимость = Ложь;
		
	КонецЕсли;
	
	Форма.ТребуетсяОбновитьИнформациюНедопустимыеКодыМаркировки = Ложь;
	
	//ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
КонецПроцедуры

Функция ТекстОшибкиНеСоответствуютДокументуОснованию(ДанныеШтрихкода) Экспорт
	
	ЧастиТекстаОшибки = Новый Массив;
	
	ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Не удалось сопоставить данным документа следующие данные:';
									|en = 'Не удалось сопоставить данным документа следующие данные:'"));
	ЧастиТекстаОшибки.Добавить(" ");
	ЧастиТекстаОшибки.Добавить(
		СтрШаблон(НСтр("ru = 'номенклатура - %1';
						|en = 'номенклатура - %1'"),
			?(ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура),
				ДанныеШтрихкода.Номенклатура,
				НСтр("ru = 'Не определена';
					|en = 'Не определена'"))));
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Характеристика) Тогда
		ЧастиТекстаОшибки.Добавить(", ");
		ЧастиТекстаОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'Характеристика - %1';
							|en = 'Характеристика - %1'"), ДанныеШтрихкода.Характеристика));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		ЧастиТекстаОшибки.Добавить(", ");
		ЧастиТекстаОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'Серия - %1';
							|en = 'Серия - %1'"), ДанныеШтрихкода.Серия));
	КонецЕсли;
	Возврат СтрСоединить(ЧастиТекстаОшибки);
	
КонецФункции

Процедура УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока) Экспорт

	Если ЭтоУпаковкаБлока(ТекущаяСтрока) Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 5;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 4;
		КонецЕсли;

	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 6;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 1;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 2;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 3;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(ТекущаяСтрока) Экспорт
		
	Если ТекущаяСтрока.Количество = 0 И ТекущаяСтрока.КоличествоМОТП = 0 И ТекущаяСтрока.КоличествоПодобрано = 0 Тогда
		ТекущаяСтрока.ИндексКодаМаркировки = 0;
	ИначеЕсли ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоПодобрано И ТекущаяСтрока.КоличествоМОТП = 0 Тогда	
		ТекущаяСтрока.ИндексКодаМаркировки = 1;
	ИначеЕсли ТекущаяСтрока.КоличествоМОТП = ТекущаяСтрока.КоличествоПодобрано И ТекущаяСтрока.Количество = 0 Тогда	
		ТекущаяСтрока.ИндексКодаМаркировки = 1;
	ИначеЕсли ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоПодобрано
		И ТекущаяСтрока.КоличествоМОТП = ТекущаяСтрока.КоличествоПодобрано Тогда
		ТекущаяСтрока.ИндексКодаМаркировки = 1;
	Иначе
		ТекущаяСтрока.ИндексКодаМаркировки = 2;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьУпаковкиДляПроверки(ТекущаяСтрока, ДоступныеДляПроверкиУпаковки) Экспорт

	Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = ДоступныеДляПроверкиУпаковки.НайтиПоЗначению(ТекущаяСтрока.ЗначениеШтрихкода);
	
	Если ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
		Или ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена")
		Или ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		
		Если ЭлементСписка = Неопределено Тогда
			ДоступныеДляПроверкиУпаковки.Добавить(ТекущаяСтрока.ЗначениеШтрихкода);
		КонецЕсли;
		
	Иначе
		
		Если ЭлементСписка <> Неопределено Тогда
			ДоступныеДляПроверкиУпаковки.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока) Экспорт

	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока") Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = 'Пачки без блока';
											|en = 'Пачки без блока'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = 'Блоки без коробки';
											|en = 'Блоки без коробки'");
		
	ИначеЕсли ПустаяСтрока(ТекущаяСтрока.ЗначениеШтрихкода) 
		И (ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
		Или ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")) Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = '<не маркирована>';
											|en = '<не маркирована>'");
		
	Иначе
		
		ТекущаяСтрока.Представление = ТекущаяСтрока.ЗначениеШтрихкода;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтрокуПачкиБезБлока(ТекущаяСтрока) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока");
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуБлокиБезКоробки(ТекущаяСтрока) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки");
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

Функция ЭтоУпаковкаБлока(ТекущаяСтрока) Экспорт
	
	Возврат ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
		И ТекущаяСтрока.ГрупповаяТоварнаяУпаковка;
	
КонецФункции

// Заполняет реквизит "НомерСтроки" в коллекции
//
// Параметры:
//  КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, в которой необходимо заполнить НомерСтроки
Процедура ПересчитатьНомераСтрок(КоллекцияДанных) Экспорт
	
	НомерСтроки = 1;
	
	Для Каждого ТекущаяСтрока Из КоллекцияДанных Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область ОпределениеХозяйственнойОперации

Функция ЭтоДокументПриобретения(Контекст) Экспорт
	
	ЭтоПриобретение = Ложь;
	
	ПроверкаИПодборПродукцииМОТПКлиентСерверПереопределяемый.ЭтоДокументПриобретения(Контекст, ЭтоПриобретение);
	
	Возврат ЭтоПриобретение;
	
КонецФункции

Функция ЭтоЧекККМ(Контекст) Экспорт
	
	ЭтоЧек = Ложь;
	
	ПроверкаИПодборПродукцииМОТПКлиентСерверПереопределяемый.ЭтоЧекККМ(Контекст, ЭтоЧек);
	
	Возврат ЭтоЧек;
	
КонецФункции

Функция ЭтоЧекККМВозврат(Контекст) Экспорт
	
	ЭтоЧекВозврат = Ложь;
	
	ПроверкаИПодборПродукцииМОТПКлиентСерверПереопределяемый.ЭтоЧекККМВозврат(Контекст, ЭтоЧекВозврат);
	
	Возврат ЭтоЧекВозврат;
	
КонецФункции

#КонецОбласти

#КонецОбласти