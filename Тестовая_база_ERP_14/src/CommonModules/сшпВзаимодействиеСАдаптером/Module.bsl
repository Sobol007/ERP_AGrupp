
#Область ПрограммныйИнтерфейс

// Функция - Отправить сообщение
//
// Параметры:
//  Сообщение	 - Структура - Структура описывающая состав отправляемого сообщения. Способ обработки зависит от типа коннектора адаптера.
// 
// Возвращаемое значение:
//  Булево - Признак успешности отправки сообщения на адаптер.
//
Функция ОтправитьСообщение(Сообщение) Экспорт
	
	отправкаРезультат = Истина;
	
	Попытка
		
		записьИдентификатор = Новый УникальныйИдентификатор;
		
		новаяЗапись = РегистрыСведений.сшпОчередьОтправляемыхСообщений.СоздатьМенеджерЗаписи();
		новаяЗапись.ИдентификаторСообщения = записьИдентификатор;
		новаяЗапись.Хранилище = Новый ХранилищеЗначения(Сообщение);
		новаяЗапись.ДатаРегистрации = ТекущаяДатаСеанса();
		новаяЗапись.ИдентификаторБазовогоСообщения = Сообщение.Id;
		
		новаяЗапись.Записать(Истина);
		
		сшпРаботаСДанными.УстановитьСостояниеСообщения(записьИдентификатор, Перечисления.сшпСтатусыСообщений.ОжиданиеОтправки);
	
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Datareon. Помещение сообщения в очередь на отправку", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		отправкаРезультат = Ложь;
	
	КонецПопытки;
	
	сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиОтправляемых");
	
	Возврат отправкаРезультат;

КонецФункции

// Функция - Отправить сообщение
//
// Параметры:
//  Сообщение	 - Структура - Структура описывающая состав отправляемого сообщения. Способ обработки зависит от типа коннектора адаптера.
// 
// Возвращаемое значение:
//  Булево - Признак успешности отправки сообщения на адаптер.
//
Функция ОтправитьСистемноеСообщение(Сообщение) Экспорт
	
	отправкаРезультат = Истина;
	
	Если сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда 
		
		сшпPipe.УстановитьСоединениеИОтправитьСлужебноеСообщение(Сообщение);	
	
	Иначе
		
		Попытка
			
			записьИдентификатор = Новый УникальныйИдентификатор;
			
			новаяЗапись = РегистрыСведений.сшпОчередьОтправляемыхСистемныхСообщений.СоздатьМенеджерЗаписи();
			новаяЗапись.ИдентификаторСообщения = записьИдентификатор;
			новаяЗапись.Хранилище = Новый ХранилищеЗначения(Сообщение);
			новаяЗапись.ДатаРегистрации = ТекущаяДатаСеанса();
			
			новаяЗапись.Записать(Истина);
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(записьИдентификатор, Перечисления.сшпСтатусыСообщений.ОжиданиеОтправки);
		
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации("Datareon. Помещение системного сообщения в очередь на отправку", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			отправкаРезультат = Ложь;
		
		КонецПопытки;
		
		сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиОтправляемыхСистемныхСообщений");
	
	КонецЕсли;	
	
	Возврат отправкаРезультат;

КонецФункции

// Функция - Получение сообщения
//
// Параметры:
//  Формат		 - Перечисление.сшпФорматыСообщений	 -  формат поступившего сообщения
//  xdtoПакет	 - ОбъектXDTO.Message1C	 - сообщение в формате ОбъектXDTO
// 
// Возвращаемое значение:
//  Булево -	Признак удачной обработки полученного сообщения. 
//
Функция ПолучениеСообщения(Формат, xdtoПакет) Экспорт
	
	КодОтвета = 200;
	
	Если сшпКэшируемыеФункции.ЭтоСистемноеСообщение(xdtoПакет.Type) тогда
		
		Если ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") Тогда 
			
			xmlПакет = сшпОбщегоНазначения.ЗаписатьОбъектВПоток(Формат, xdtoПакет);
			сшпРаботаСДанными.ПоместитьВСистемнуюОчередь(xdtoПакет.Id, Формат, xdtoПакет.Type, xmlПакет);
		
		КонецЕсли;
	
	ИначеЕсли сшпКэшируемыеФункции.ЭтоКомандноеСообщение(xdtoПакет.Type) тогда
		
		Если xdtoПакет.Type = "CSM" тогда
			
			сшпОбщегоНазначения.ЗапуститьОбработкуПотоков();
		
		ИначеЕсли xdtoПакет.Type = "CSA" тогда
			
			сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
			сшпОбновлениеВерсииКонфигурации.ПроверитьИспользованиеПараметров(сткПараметры);
			сшпРаботаСДанными.УстановитьПараметрыАдаптера(сткПараметры);
		
		ИначеЕсли xdtoПакет.Type = "GCM" тогда
			
			xmlПакет = сшпОбщегоНазначения.ЗаписатьОбъектВПоток(Формат, xdtoПакет);
			
			мсвПараметры = Новый Массив;
			мсвПараметры.Добавить(xdtoПакет.Id);
			мсвПараметры.Добавить(Формат);
			мсвПараметры.Добавить(xmlПакет);
			
			ФоновыеЗадания.Выполнить("сшпОбслуживаниеОчередей.ВыполнитьВнешнююКоманду" ,мсвПараметры);
		
		ИначеЕсли xdtoПакет.Type = "SUS" тогда
			
			сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
			
			мсвПараметры = Новый Массив;
			мсвПараметры.Добавить(xdtoПакет.Id);
			мсвПараметры.Добавить(сткПараметры);
			
			ФоновыеЗадания.Выполнить("сшпОбслуживаниеОчередей.УстановитьПараметрыПользователя" ,мсвПараметры);
		
		КонецЕсли;
		
		Если Ложь Тогда 
			
			xmlПакет = сшпОбщегоНазначения.ЗаписатьОбъектВПоток(Формат, xdtoПакет);
			сшпРаботаСДанными.ПоместитьВСистемнуюОчередь(xdtoПакет.Id, Формат, xdtoПакет.Type, xmlПакет);
		
		КонецЕсли;
	
	ИначеЕсли сшпКэшируемыеФункции.ЭтоТранспортноеСообщение(xdtoПакет.Type) тогда
		
		сшпРаботаСДанными.ПоместитьВОчередьВходящих(Формат, xdtoПакет);
	
	Иначе
		
		КодОтвета = 200; // Приходит неизвестный тип пакета. Вероятно требуется обновление обработчика.
	
	КонецЕсли;	
	
	Возврат КодОтвета;

КонецФункции	

// Процедура - Отправить сообщение на адаптер
//
// Параметры:
//  коннектор	 -  WSПрокси, HTTPСоединение - объект соединения с web-сервисом. 
//  сообщение	 - Структура - структура с данными отправляемого сообщения
//
Процедура ОтправитьСообщениеНаАдаптер(коннектор, сообщение) Экспорт
	
	отправкаРезультат = Истина;
	текТипКоннектора = сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB();
	
	Если текТипКоннектора = Перечисления.сшпТипыКоннекторовESB.REST тогда
		
		отправкаРезультат = сшпHTTPСервис.ОтправитьСообщение(коннектор, Сообщение);
	
	ИначеЕсли текТипКоннектора = Перечисления.сшпТипыКоннекторовESB.SOAP тогда
		
		отправкаРезультат = сшпSOAPСервис.ОтправитьСообщение(коннектор, Сообщение);
	
	КонецЕсли;
	
	Если ТипЗнч(сообщение) = Тип("Массив") Тогда 
		
		МассивСообщений = сообщение;
	
	Иначе
		
		МассивСообщений = Новый Массив;
		МассивСообщений.Добавить(сообщение);
	
	КонецЕсли;
	
	Для Каждого ОдиночноеСообщение из МассивСообщений Цикл 
		
		Если отправкаРезультат тогда
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(ОдиночноеСообщение.Id, Перечисления.сшпСтатусыСообщений.Отправлено);
		
		Иначе
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(ОдиночноеСообщение.Id, Перечисления.сшпСтатусыСообщений.ОжиданиеОтправки, 30);
		
		КонецЕсли;	
	
	КонецЦикла;

КонецПроцедуры

// Функция - Получить коннектор
// 
// Возвращаемое значение:
//  WSПрокси, HTTPСоединение - объект соединения с web-сервисом.
//
Функция ПолучитьКоннектор() Экспорт
	
	коннектор = Неопределено;
 	типКоннектора = сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB();
	
	Если типКоннектора = Перечисления.сшпТипыКоннекторовESB.REST тогда
		
		коннектор = ПолучитьHTTPСоединение(сшпФункциональныеОпции.АдресАдаптераESB());
	
	ИначеЕсли типКоннектора = Перечисления.сшпТипыКоннекторовESB.SOAP тогда
		
		коннектор = ПолучитьWSПрокси(сшпФункциональныеОпции.АдресАдаптераESB());
	
	Иначе 
		
		ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Ошибка,,, "Не определен тип коннектора");
	
	КонецЕсли;		
	
	Возврат коннектор;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Получить WSПрокси
//
// Параметры:
//  адрес	 - Строка - строка с адресом web-сервиса. 
// 
// Возвращаемое значение:
// WSПрокси  - сформированный объект WSПрокси с по заданному адресу web-сервиса.
//
Функция ПолучитьWSПрокси(адрес)
	
	результатВозврат = Неопределено;
	
	Попытка
		
		soapСервис = WSСсылки.ESBAdapter.ПолучитьWSОпределения().Сервисы[0];
		результатВозврат =  WSСсылки.ESBAdapter.СоздатьWSПрокси("http://esb.axelot.ru", soapСервис.Имя, soapСервис.ТочкиПодключения[0].Имя,, 120, ЗащищенноеСоединение(адрес),адрес);
	
	Исключение
		
		ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось создать подключение к адаптеру по причине: " + ОписаниеОшибки());
	
	КонецПопытки;
	
	Возврат результатВозврат;

КонецФункции

// Функция - Получить HTTPСоединение
//
// Параметры:
//  адрес	 - Строка - строка с адресом http-сервиса.
// 
// Возвращаемое значение:
// HTTPСоединение  - сформированный объект HTTPСоединение с по заданному адресу http-сервиса.
//
Функция ПолучитьHTTPСоединение(адрес)
	
	значЗащищенноеСоединение = ЗащищенноеСоединение(адрес);
	
	Если Лев(НРег(адрес), 5) = "https" Тогда
		адрес = СтрЗаменить(адрес, "https://", "");
	КонецЕсли;
	
	Возврат Новый HTTPСоединение(адрес,,,,,, значЗащищенноеСоединение);

КонецФункции

//Функция - защищенное соединение
//
// Параметры:
//  адрес	 - Строка - строка с адресом сервиса.
// 
// Возвращаемое значение:
// ЗащищенноеСоединениеOpenSSL  - сформированный объект ЗащищенноеСоединениеOpenSSL.
//
Функция ЗащищенноеСоединение(Адрес)
	
	Если Лев(НРег(Адрес), 5) = "https" Тогда
		Возврат Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

#КонецОбласти
