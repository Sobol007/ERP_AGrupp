
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Взаимодействия" (CRM)
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Возвращает флаг необходимости оповещения формы взаимодействия-основания.
//
// Параметры:
//  Основание - Структура - структура, содержащая ссылку на взаимодействие, из которого создается контакт.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть респондент.
//
Функция ЕстьРеспондент(Основание) Экспорт
	
	Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("Структура") Тогда
		Для Каждого Элемент Из Основание Цикл
			Если Элемент.Ключ = "Объект"
				И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Элемент.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область ЭкспортныеПроцедурыИФункцииИзБСП

// Функция - Параметры письма для отправки
//
// Параметры:
//  Объект	 - ДокументСсылка.ЭлектронноеПисьмоИсходящее - Электронное письмо исходящее.
// 
// Возвращаемое значение:
//  Структура - Параметры исходящего электронного письма. 
//
Функция ПараметрыПисьмаДляОтправки(Объект) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		РасширениеДляФайловПодписи = МодульЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	Иначе
		РасширениеДляФайловПодписи = "p7s";
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;

	Взаимодействия.ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"Кому", "ПолучателиПисьма");
	Взаимодействия.ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"Копии", "ПолучателиКопий");
	Взаимодействия.ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"СкрытыеКопии", "ПолучателиСкрытыхКопий");
	ПараметрыПисьма.Вставить("Тема", Объект.Тема);
	ПараметрыПисьма.Вставить("Тело", ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
	                                   Объект.Текст,Объект.ТекстHTML));
	ПараметрыПисьма.Вставить("Кодировка", Объект.Кодировка);
	ПараметрыПисьма.Вставить("Важность",  УправлениеЭлектроннойПочтой.ПолучитьВажность(Объект.Важность));
	ПараметрыПисьма.Вставить("ТипТекста", Объект.ТипТекста);
	
	Если Не ПустаяСтрока(Объект.ИдентификаторыОснований) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", Объект.ИдентификаторыОснований);
	КонецЕсли;
// +CRM
	//ВложенияИзРассылки = (ЗначениеЗаполнено(Объект.Предмет)
	//						И ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Объект.Ссылка);
	ВложенияИзРассылки = (ЗначениеЗаполнено(Предмет)
							И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
							И НЕ Объект.CRM_РазрешеноРедактирование);
// -CRM
	МассивВложений = Новый Массив;

	ДанныеПрисоединенныхФайловПисьма = ДанныеПрисоединенныхФайловПисьмаОбъект(Объект);
	ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныхФайлов;
	ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.ВладелецФайлов;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
// +CRM
	//|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|	Справочник."+?(ВложенияИзРассылки,"CRM_РассылкаЭлектронныхПисемПрисоединенныеФайлы","ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы")+" КАК Файлы
// -CRM
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|;
	|
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.Письмо                     КАК Письмо,
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.ПорядковыйНомерВоВложениях КАК ПорядковыйНомерВоВложениях
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПисьмаВложения КАК ЭлектронноеПисьмоИсходящееПисьмаВложения
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.Ссылка = &ВладелецФайла
	|
	|УПОРЯДОЧИТЬ ПО ПорядковыйНомерВоВложениях ВОЗР";
// +CRM
	//Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайлов);
	//Запрос.УстановитьПараметр("ВладелецФайла", ?(ВложенияИзРассылки, Объект.Предмет, ВладелецФайлов));
	Запрос.УстановитьПараметр("ВладелецФайла", ?(ВложенияИзРассылки, Предмет, ВладелецФайлов));
// -CRM
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаВложения = РезультатЗапроса[0].Выбрать();
	ТаблицаПисьмаВложения = РезультатЗапроса[1].Выгрузить();
	
	КоличествоВложений = ТаблицаПисьмаВложения.Количество() + ВыборкаВложения.Количество();
	
	НомерОтображаемогоВложения = 1;
	Пока ВыборкаВложения.Следующий() Цикл
		
		// +CRM добавлено условие
		Если Не ВложенияИзРассылки Тогда
			ДобавитьВложениеПисьмоЕслиНеобходимо(ТаблицаПисьмаВложения, МассивВложений, НомерОтображаемогоВложения);
		КонецЕсли;
		// -CRM добавлено условие
		
		ИмяФайла = ВыборкаВложения.ПолноеНаименование + ?(ВыборкаВложения.Расширение = "", "", "." + ВыборкаВложения.Расширение);
		
		Если ПустаяСтрока(ВыборкаВложения.ИДФайлаЭлектронногоПисьма) Тогда
			ДобавитьВложение(МассивВложений, ИмяФайла, РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаВложения.Ссылка));
			НомерОтображаемогоВложения = НомерОтображаемогоВложения + 1;
		Иначе
			ДобавитьВложение(МассивВложений,
			                 ИмяФайла, 
			                 РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаВложения.Ссылка), 
			                 ВыборкаВложения.ИДФайлаЭлектронногоПисьма);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ЭлектронныеПодписиВладельца = МодульЭлектроннаяПодпись.УстановленныеПодписи(ВыборкаВложения.Ссылка);
			НомерСтроки = 1;
			Для каждого ЭП Из ЭлектронныеПодписиВладельца Цикл
				ИмяФайла = ВыборкаВложения.ПолноеНаименование + "-DS("+ НомерСтроки + ")." + РасширениеДляФайловПодписи;
				ДобавитьВложение(МассивВложений, ИмяФайла, ЭП.Подпись);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// +CRM добавлено условие
	Если Не ВложенияИзРассылки Тогда
	
	Пока НомерОтображаемогоВложения <= КоличествоВложений Цикл
		
		ДобавитьВложениеПисьмоЕслиНеобходимо(ТаблицаПисьмаВложения, МассивВложений, НомерОтображаемогоВложения);
		НомерОтображаемогоВложения = НомерОтображаемогоВложения + 1;
		
	КонецЦикла;
	
	КонецЕсли;
	// -CRM добавлено условие
	
	ПараметрыПисьма.Вставить("Вложения", МассивВложений);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Если Объект.УведомитьОДоставке Тогда
		ПараметрыПисьма.Вставить("УведомитьОДоставке", Истина);
	КонецЕсли;
	
	Если Объект.УведомитьОПрочтении Тогда
		ПараметрыПисьма.Вставить("УведомитьОПрочтении", Истина);
	КонецЕсли;
	
	// +CRM
	ПараметрыПисьма.Вставить("GUID", Строка(Объект.Ссылка.УникальныйИдентификатор()));
	// -CRM
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Функция ДанныеПрисоединенныхФайловПисьмаОбъект(ПисьмоОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("ВладелецФайлов", ПисьмоОбъект.Ссылка);
	Результат.Вставить("ИмяСправочникаПрисоединенныхФайлов", 
		УправлениеЭлектроннойПочтой.ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоОбъект.Ссылка));
		
	ВзаимодействияПереопределяемый.ПриПолученииПрисоединенныхФайлов(ПисьмоОбъект.Ссылка, Результат);
	
	// Для обратной совместимости.
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоОбъект);
	Если ДанныеПрисоединенныхФайловПисьма <> Неопределено Тогда
		Результат.ИмяСправочникаПрисоединенныхФайлов = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		Результат.ВладелецФайлов = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Находит в HTML содержимое находящееся в теге.
//
// Параметры:
//  Текст                             - Строка - текст XML, в котором выполняется поиск.
//  ИмяТега                           - Строка - тег, содержимое которого необходимо найти.
//  ВключатьОткрывающийЗакрывающийТег - Булево - признак того, что найденное включает открывающий и закрывающий тег, по
//                                               умолчанию Ложь.
//  НомерПоПорядку                    - Число  - позиция, с которой начинается поиск, по умолчанию 1.
// 
// Возвращаемое значение:
//   Строка - строка, из которой удалены символы перевода строки и возврата каретки.
//
Функция СодержимоеТегаHTML(Текст, ИмяТега, ВключатьОткрывающийЗакрывающийТег = Ложь, НомерПоПорядку = 1)
	
	Результат = Неопределено;
	
	Начало    = "<"  + ИмяТега;
	Окончание = "</" + ИмяТега + ">";
	
	НайденнаяПозицияНачало = СтрНайти(НРег(Текст), НРег(Начало), НаправлениеПоиска.СНачала, 1, НомерПоПорядку);
	НайденнаяПозицияОкончание = СтрНайти(НРег(Текст), НРег(Окончание), НаправлениеПоиска.СНачала, 1, НомерПоПорядку);
	Если НайденнаяПозицияНачало = 0
		Или НайденнаяПозицияОкончание = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Содержимое = Сред(Текст,
	                  НайденнаяПозицияНачало,
	                  НайденнаяПозицияОкончание - НайденнаяПозицияНачало + СтрДлина(Окончание));
	
	Если ВключатьОткрывающийЗакрывающийТег Тогда
		
		Результат = СокрЛП(Содержимое);
		
	Иначе
		
		ОткрывающийТег = Лев(Содержимое, СтрНайти(Содержимое, ">"));
		Содержимое = СтрЗаменить(Содержимое, ОткрывающийТег, "");
		
		ЗакрывающийТег = Прав(Содержимое, СтрДлина(Содержимое) - СтрНайти(Содержимое, "<", НаправлениеПоиска.СКонца) + 1);
		Содержимое = СтрЗаменить(Содержимое, ЗакрывающийТег, "");
		
		Результат = СокрЛП(Содержимое);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// +CRM этот блок полностью скопирован из модуля Взаимодействия,
// потому что процедура ДобавитьВложениеПисьмоЕслиНеобходимо не экспортная
// при обновлении этих процедур в БСП необходимо синхронизировать процедуры этого блока
//

Процедура ДобавитьВложениеПисьмоЕслиНеобходимо(ТаблицаПисьмаВложения, МассивВложений, НомерОтображаемогоВложения)
	
	НайденнаяСтрока = ТаблицаПисьмаВложения.Найти(НомерОтображаемогоВложения, "ПорядковыйНомерВоВложениях");
	Пока НайденнаяСтрока <> Неопределено Цикл
		ДобавитьВложениеПисьмоИсходящееПисьмо(МассивВложений, НайденнаяСтрока.Письмо);
		НомерОтображаемогоВложения = НомерОтображаемогоВложения + 1;
		НайденнаяСтрока = ТаблицаПисьмаВложения.Найти(НомерОтображаемогоВложения, "ПорядковыйНомерВоВложениях");
	КонецЦикла
	
КонецПроцедуры

Процедура ДобавитьВложениеПисьмоИсходящееПисьмо(МассивВложений, Письмо); 

	СтруктураВложение = Новый Структура;
	
	ДанныеИнтернетПочтовогоСообщения = ИнтернетПочтовоеСообщениеИзПисьма(Письмо);
	
	Если ДанныеИнтернетПочтовогоСообщения.ИнтернетПочтовоеСообщение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Представление = Взаимодействия.ПредставлениеПисьма(ДанныеИнтернетПочтовогоСообщения.ИнтернетПочтовоеСообщение.Тема,
	                                    ДанныеИнтернетПочтовогоСообщения.ДатаПисьма);
	ИмяФайла = Представление + ".eml";
	
	СтруктураВложение.Вставить("Кодировка", Письмо.Кодировка);
	СтруктураВложение.Вставить("АдресВоВременномХранилище",
	                           ПоместитьВоВременноеХранилище(ДанныеИнтернетПочтовогоСообщения.ИнтернетПочтовоеСообщение, 
	                                                         Новый УникальныйИдентификатор()));
	СтруктураВложение.Вставить("ТипСодержимого","message/rfc822");
	СтруктураВложение.Вставить("Представление", ИмяФайла);
	
	МассивВложений.Добавить(СтруктураВложение);
	
КонецПроцедуры 

Процедура ДобавитьВложение(МассивВложений, ИмяФайла, ДанныеФайла, Идентификатор = Неопределено, Кодировка = Неопределено)
	
	ДанныеВложения = Новый Структура;
	ДанныеВложения.Вставить("Представление", ИмяФайла);
	ДанныеВложения.Вставить("АдресВоВременномХранилище", ДанныеФайла);
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ДанныеВложения.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ДанныеВложения.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	МассивВложений.Добавить(ДанныеВложения);
	
КонецПроцедуры

Функция ИнтернетПочтовоеСообщениеИзВходящегоПисьма(Письмо)
	
	СтруктураВозврата = Новый Структура("ИнтернетПочтовоеСообщение, ДатаПисьма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Важность                 КАК Важность,
	|	ЭлектронноеПисьмоВходящее.ИдентификаторНаСервере   КАК Идентификатор,
	|	ЭлектронноеПисьмоВходящее.ДатаПолучения            КАК ДатаПолучения,
	|	ЭлектронноеПисьмоВходящее.Текст                    КАК Текст,
	|	ЭлектронноеПисьмоВходящее.ТекстHTML                КАК ТекстHTML,
	|	ЭлектронноеПисьмоВходящее.Кодировка                КАК Кодировка,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес         КАК ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление КАК ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.Тема                     КАК Тема,
	|	ЭлектронноеПисьмоВходящее.УведомитьОДоставке       КАК УведомитьОДоставке,
	|	ЭлектронноеПисьмоВходящее.УведомитьОПрочтении      КАК УведомитьОПрочтении
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка = &Письмо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Адрес,
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Представление,
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоВходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Адрес,
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Представление,
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК ЭлектронноеПисьмоВходящееПолучателиКопий
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Адрес,
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Представление,
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоВходящееПолучателиОтвета
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.Адрес,
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.Представление,
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.АдресаУведомленияОПрочтении КАК ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = РезультатЗапроса[0].Выбрать();
	Если ВыборкаШапка.Следующий() Тогда
		
		ОбъектИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
		ОбъектИнтернетПочтовоеСообщение.Важность               = УправлениеЭлектроннойПочтой.ПолучитьВажность(ВыборкаШапка.Важность);
		ОбъектИнтернетПочтовоеСообщение.Идентификатор.Добавить(ВыборкаШапка.Идентификатор);
		ОбъектИнтернетПочтовоеСообщение.Кодировка              = ВыборкаШапка.Кодировка;
		ОбъектИнтернетПочтовоеСообщение.Тема                   = ВыборкаШапка.Тема;
		ОбъектИнтернетПочтовоеСообщение.УведомитьОДоставке     = ВыборкаШапка.УведомитьОДоставке;
		ОбъектИнтернетПочтовоеСообщение.УведомитьОПрочтении    = ВыборкаШапка.УведомитьОПрочтении;
		ОбъектИнтернетПочтовоеСообщение.Отправитель            = ВыборкаШапка.ОтправительАдрес;
		
		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ВыборкаШапка.ОтправительПредставление, Ложь);
		Если ТипЗнч(ДанныеОтправителя) = Тип("Массив") И ДанныеОтправителя.Количество() > 0 Тогда
			ОбъектИнтернетПочтовоеСообщение.ИмяОтправителя = ДанныеОтправителя[0].Представление;
			ОбъектИнтернетПочтовоеСообщение.Отправитель    = ДанныеОтправителя[0].Адрес;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаШапка.ТекстHTML) Тогда
		
			ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ОбъектИнтернетПочтовоеСообщение.Тексты,
			                                               ВыборкаШапка.Текст, 
			                                               ТипТекстаПочтовогоСообщения.ПростойТекст,
			                                               ВыборкаШапка.Кодировка);
		
		КонецЕсли;
		
		ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ОбъектИнтернетПочтовоеСообщение.Тексты,
		                                               ВыборкаШапка.ТекстHTML, 
		                                               ТипТекстаПочтовогоСообщения.HTML,
		                                               ВыборкаШапка.Кодировка);
		
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[1].Выбрать(), "Получатели");
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[2].Выбрать(), "Копии");
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[3].Выбрать(), "ОбратныйАдрес");
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[4].Выбрать(), "АдресаУведомленияОПрочтении");
	ДобавитьВложенияПисьмаВПочтовоеСообщение(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[5].Выбрать());
	
	СтруктураВозврата.ИнтернетПочтовоеСообщение = ОбъектИнтернетПочтовоеСообщение;
	СтруктураВозврата.ДатаПисьма                = ВыборкаШапка.ДатаПолучения;

	Возврат СтруктураВозврата;

КонецФункции 

Функция ИнтернетПочтовоеСообщениеИзИсходящегоПисьма(Письмо)
	
	СтруктураВозврата = Новый Структура("ИнтернетПочтовоеСообщение, ДатаПисьма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.ДатаОтправления           КАК ДатаОтправления,
	|	ЭлектронноеПисьмоИсходящее.Важность                  КАК Важность,
	|	ЭлектронноеПисьмоИсходящее.ИдентификаторНаСервере    КАК Идентификатор,
	|	ЭлектронноеПисьмоИсходящее.ОтправительПредставление  КАК ОтправительПредставление,
	|	ЭлектронноеПисьмоИсходящее.Кодировка                 КАК Кодировка,
	|	ЭлектронноеПисьмоИсходящее.Текст                     КАК Текст,
	|	ЭлектронноеПисьмоИсходящее.ТекстHTML                 КАК ТекстHTML,
	|	ЭлектронноеПисьмоИсходящее.ТипТекста                 КАК ТипТекста,
	|	ЭлектронноеПисьмоИсходящее.Тема                      КАК Тема,
	|	ЭлектронноеПисьмоИсходящее.УведомитьОДоставке        КАК УведомитьОДоставке,
	|	ЭлектронноеПисьмоИсходящее.УведомитьОПрочтении       КАК УведомитьОПрочтении
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоИсходящееПолучателиОтвета
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.Письмо
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПисьмаВложения КАК ЭлектронноеПисьмоИсходящееПисьмаВложения
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = РезультатЗапроса[0].Выбрать();
	Если ВыборкаШапка.Следующий() Тогда
		
		ОбъектИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
		ОбъектИнтернетПочтовоеСообщение.Важность               = УправлениеЭлектроннойПочтой.ПолучитьВажность(ВыборкаШапка.Важность);
		ОбъектИнтернетПочтовоеСообщение.Идентификатор.Добавить(ВыборкаШапка.Идентификатор);
		ОбъектИнтернетПочтовоеСообщение.Кодировка              = ВыборкаШапка.Кодировка;
		ОбъектИнтернетПочтовоеСообщение.Тема                   = ВыборкаШапка.Тема;
		ОбъектИнтернетПочтовоеСообщение.УведомитьОДоставке     = ВыборкаШапка.УведомитьОДоставке;
		ОбъектИнтернетПочтовоеСообщение.УведомитьОПрочтении    = ВыборкаШапка.УведомитьОПрочтении;
		
		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ВыборкаШапка.ОтправительПредставление, Ложь);
		
		Если ТипЗнч(ДанныеОтправителя) = Тип("Массив") И ДанныеОтправителя.Количество() > 0 Тогда
			ОбъектИнтернетПочтовоеСообщение.ИмяОтправителя = ДанныеОтправителя[0].Представление;
			ОбъектИнтернетПочтовоеСообщение.Отправитель    = ДанныеОтправителя[0].Адрес;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаШапка.ТекстHTML) Тогда
		
			ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ОбъектИнтернетПочтовоеСообщение.Тексты,
			                                               ВыборкаШапка.Текст, 
			                                               ТипТекстаПочтовогоСообщения.ПростойТекст,
			                                               ВыборкаШапка.Кодировка);
		
		КонецЕсли;
		
		ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ОбъектИнтернетПочтовоеСообщение.Тексты,
		                                               ВыборкаШапка.ТекстHTML, 
		                                               ТипТекстаПочтовогоСообщения.HTML,
		                                               ВыборкаШапка.Кодировка);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[1].Выбрать(), "Получатели");
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[2].Выбрать(), "ОбратныйАдрес");
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[3].Выбрать(), "Копии");
	ДобавитьВложенияПисьмаВПочтовоеСообщение(ОбъектИнтернетПочтовоеСообщение, РезультатЗапроса[5].Выбрать());
	
	СтруктураВозврата.ИнтернетПочтовоеСообщение = ОбъектИнтернетПочтовоеСообщение;
	СтруктураВозврата.ДатаПисьма                = ВыборкаШапка.ДатаОтправления;

	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ТекстыСообщения, ТекстСообщения, ТипТекста, Кодировка)
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		
		НовыйТекст = ТекстыСообщения.Добавить(ТекстСообщения, ТипТекста);
		НовыйТекст.Кодировка = Кодировка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(Сообщение, Выборка, ИмяТаблицы)
	
	Пока Выборка.Следующий() Цикл
		
		ДобавитьПолучателяВПочтовоеСообщение(Сообщение, ИмяТаблицы, Выборка.Адрес, Выборка.Представление)
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолучателяВПочтовоеСообщение(Сообщение, ИмяТаблицы, Адрес, Представление)
	
	ПолучательПисьма                 = Сообщение[ИмяТаблицы].Добавить(Адрес);
	ПолучательПисьма.ОтображаемоеИмя = Представление;
	
КонецПроцедуры

Процедура ДобавитьВложенияПисьмаВПочтовоеСообщение(Сообщение, ВыборкаВложения)
	
	Пока ВыборкаВложения.Следующий() Цикл
		
		Имя   = ВыборкаВложения.ПолноеНаименование 
		        + ?(ВыборкаВложения.Расширение = "", "", "." + ВыборкаВложения.Расширение);
		Данные = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаВложения.Ссылка);
		
		ВложениеПисьма = Сообщение.Вложения.Добавить(Данные, Имя);

		Если НЕ ПустаяСтрока(ВыборкаВложения.ИДФайлаЭлектронногоПисьма) Тогда
			ВложениеПисьма.Идентификатор = ВыборкаВложения.ИДФайлаЭлектронногоПисьма;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ПодписиВложения = МодульЭлектроннаяПодпись.УстановленныеПодписи(ВыборкаВложения.Ссылка);
			НомерСтроки = 1;
			Для Каждого ЭП Из ПодписиВложения Цикл
				Имя = ВыборкаВложения.ПолноеНаименование + "-DS("+ НомерСтроки + ")." + РасширениеДляФайловПодписи();
				Данные = ЭП.Подпись;
				
				ВложениеПисьма = Сообщение.Вложения.Добавить(Данные, Имя);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РасширениеДляФайловПодписи()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
		
		Возврат МодульЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	Иначе
		Возврат "p7s";
	КонецЕсли;
	
КонецФункции

// -CRM этот блок полностью скопирован из модуля Взаимодействия

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет папку для электронного письма по умолчанию.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого определяется папка.
//  ВключаяПроверкиПисьмаОснования  - Булево - признак необходимости проверки на определение папки в папку письма
//                                             основания.
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиЭлектронныхПисем - папка, определенная для письма.
//
Функция CRM_ОпределитьПапкуДляПисьмаПоУмолчанию(Письмо, ВключаяПроверкиПисьмаОснования = ЛОЖЬ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ВключаяПроверкиПисьмаОснования Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Папка,
		|	Взаимодействия.Ссылка КАК Письмо
		|ПОМЕСТИТЬ ПапкиПоОснованию
		|ИЗ
		|	ЖурналДокументов.CRM_Почта КАК Взаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
		|				И ((НЕ ПапкиЭлектронныхПисем.ПредопределеннаяПапка))
		|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = Взаимодействия.Предмет)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
		|			ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
		|		ПО Взаимодействия.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|	И ТИПЗНАЧЕНИЯ(Взаимодействия.Предмет) В (ТИП(Документ.ЭлектронноеПисьмоИсходящее), ТИП(Документ.ЭлектронноеПисьмоВходящее))
		|	И ПапкиЭлектронныхПисем.Владелец = Взаимодействия.УчетнаяЗапись
		|	И НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Наименование
		|ПОМЕСТИТЬ ПапкиПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
		|	И ПапкиЭлектронныхПисем.Владелец В
		|			(ВЫБРАТЬ
		|				Взаимодействия.УчетнаяЗапись
		|			ИЗ
		|				ЖурналДокументов.CRM_Почта КАК Взаимодействия
		|			ГДЕ
		|				Взаимодействия.Ссылка = &Письмо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаимодействия.Ссылка,
		|	ВЫБОР
		|		КОГДА Взаимодействия.ПометкаУдаления
		|			ТОГДА &Удаленные
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|			ТОГДА &Входящие
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
		|			ТОГДА ВЫБОР
		|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
		|						ТОГДА &Черновики
		|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|						ТОГДА &Отправленные
		|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
		|						ТОГДА &Исходящие
		|				КОНЕЦ
		|		ИНАЧЕ &НежелательнаяПочта
		|	КОНЕЦ КАК НаименованиеПапки
		|ПОМЕСТИТЬ НаименованиеПапкиНазначения
		|ИЗ
		|	ЖурналДокументов.CRM_Почта КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаименованиеПапкиНазначения.Ссылка КАК Письмо,
		|	ВЫБОР
		|		КОГДА ПапкиПоОснованию.Папка ЕСТЬ NULL 
		|			ТОГДА ПапкиПисем.Ссылка
		|		ИНАЧЕ ПапкиПоОснованию.Папка
		|	КОНЕЦ КАК Папка
		|ИЗ
		|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
		|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПапкиПоОснованию КАК ПапкиПоОснованию
		|		ПО НаименованиеПапкиНазначения.Ссылка = ПапкиПоОснованию.Письмо";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Наименование
		|ПОМЕСТИТЬ ПапкиПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
		|	И ПапкиЭлектронныхПисем.Владелец В
		|			(ВЫБРАТЬ
		|				Взаимодействия.УчетнаяЗапись
		|			ИЗ
		|				ЖурналДокументов.CRM_Почта КАК Взаимодействия
		|			ГДЕ
		|				Взаимодействия.Ссылка = &Письмо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаимодействия.Ссылка,
		|	ВЫБОР
		|		КОГДА Взаимодействия.ПометкаУдаления
		|			ТОГДА &Удаленные
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|			ТОГДА &Входящие
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
		|			ТОГДА ВЫБОР
		|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
		|						ТОГДА &Черновики
		|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|						ТОГДА &Отправленные
		|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
		|						ТОГДА &Исходящие
		|				КОНЕЦ
		|		ИНАЧЕ &НежелательнаяПочта
		|	КОНЕЦ КАК НаименованиеПапки
		|ПОМЕСТИТЬ НаименованиеПапкиНазначения
		|ИЗ
		|ЖурналДокументов.CRM_Почта КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаименованиеПапкиНазначения.Ссылка КАК Письмо,
		|	ПапкиПисем.Ссылка КАК Папка
		|ИЗ
		|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
		|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	Взаимодействия.УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Папка;
		
	КонецЕсли;
	
КонецФункции

// Определяет папку для электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого определяется папка.
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиЭлектронныхПисем - папка, определенная для письма.
//
Функция CRM_ОпределитьПапкуДляПисьма(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Папка = CRM_ОпределитьПапкуДляПисьмаПоУмолчанию(Письмо ,Истина);
	Если ЗначениеЗаполнено(Папка) И (НЕ Папка.ПредопределеннаяПапка) Тогда
		Возврат Папка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек КАК КомпоновщикНастроек,
	|	ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку КАК ПомещатьВПапку
	|ИЗ
	|	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	|ГДЕ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец В
	|			(ВЫБРАТЬ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка = &Письмо)
	|	И НЕ ПравилаОбработкиЭлектроннойПочты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СхемаПравилаОбработки = 
				Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
			КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				КомпоновщикНастроек.Настройки.Отбор,"Ссылка",Письмо,ВидСравненияКомпоновкиДанных.Равно);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
				СхемаПравилаОбработки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			Если МакетКомпоновкиДанных.ЗначенияПараметров.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
			ЗапросПравило = Новый Запрос(ТекстЗапроса);
			Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
				ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
			КонецЦикла;
			
			Результат = ЗапросПравило.Выполнить();
			Если Не Результат.Пустой() Тогда
				Возврат Выборка.ПомещатьВПапку;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Папка;
	
КонецФункции

// Определяет папки для массива писем.
//
// Параметры:
//  МассивПисем  - Массив - массив писем для которого будут определены папки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит соответствие писем и определенных для них папок.
//
Функция CRM_ОпределитьПапкиДляМассиваПисем(МассивПисем) Экспорт
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("Папка");
	ТаблицаСоответствий.Колонки.Добавить("Письмо");
	ТаблицаСоответствий.Колонки.Добавить("ПометитьНаУдаление");
	
	Если МассивПисем.Количество() = 0 Тогда
		Возврат ТаблицаСоответствий;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец КАК УчетнаяЗапись,
	|	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек,
	|	ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку
	|ИЗ
	|	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	|ГДЕ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец В
	|			(ВЫБРАТЬ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.CRM_Почта КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка В (&МассивПисем))
	|	И (НЕ ПравилаОбработкиЭлектроннойПочты.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаУчетнаяЗапись = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУчетнаяЗапись.Следующий() Цикл
			Выборка = ВыборкаУчетнаяЗапись.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СхемаПравилаОбработки = 
					Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
				
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
				КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					КомпоновщикНастроек.Настройки.Отбор, "Ссылка", МассивПисем, ВидСравненияКомпоновкиДанных.ВСписке);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					КомпоновщикНастроек.Настройки.Отбор,
					"Ссылка.УчетнаяЗапись",
					ВыборкаУчетнаяЗапись.УчетнаяЗапись,
					ВидСравненияКомпоновкиДанных.Равно);
				
				МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
					СхемаПравилаОбработки,
					КомпоновщикНастроек.ПолучитьНастройки(),
					,,
					Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
				ЗапросПравило = Новый Запрос(ТекстЗапроса);
				Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
					ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
				КонецЦикла;
				
				РезультатПисьма = ЗапросПравило.Выполнить();
				Если Не РезультатПисьма.Пустой() Тогда
					ВыборкаПисьма = РезультатПисьма.Выбрать();
					Пока ВыборкаПисьма.Следующий() Цикл
						
						НоваяСтрокаТаблицы = ТаблицаСоответствий.Добавить();
						НоваяСтрокаТаблицы.Папка = Выборка.ПомещатьВПапку;
						НоваяСтрокаТаблицы.Письмо = ВыборкаПисьма.Ссылка;
						НоваяСтрокаТаблицы.ПометитьНаУдаление = Выборка.ПометитьНаУдаление;
						ИндексЭлементаМассиваКУдалению = МассивПисем.Найти(ВыборкаПисьма.Ссылка);
						Если ИндексЭлементаМассиваКУдалению <> Неопределено Тогда
							МассивПисем.Удалить(ИндексЭлементаМассиваКУдалению);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если МассивПисем.Количество() = 0 Тогда
					Возврат ТаблицаСоответствий;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	CRM_ОпределитьПапкиДляМассиваПисемПоУмолчанию(МассивПисем, ТаблицаСоответствий);
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Определяет папки по умолчанию для массива писем.
//
// Параметры:
//  МассивПисем  - Массив - массив писем для которого будут определены папки.
//  ТаблицаПисем  - ТаблицаЗначений - в которую помещается соответствие писем и определенных для них папок.
//
Процедура CRM_ОпределитьПапкиДляМассиваПисемПоУмолчанию(МассивПисем,ТаблицаПисем) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка,
	|	ПапкиЭлектронныхПисем.Наименование,
	|	ПапкиЭлектронныхПисем.Владелец КАК УчетнаяЗапись
	|ПОМЕСТИТЬ ПапкиПисем
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|	ЖурналДокументов.CRM_Почта КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка В (&МассивПисем))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка,
	|	ВЫБОР
	|		КОГДА Взаимодействия.ПометкаУдаления
	|			ТОГДА &Удаленные
	|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
	|			ТОГДА &Входящие
	|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	|			ТОГДА ВЫБОР
	|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	|						ТОГДА &Черновики
	|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|						ТОГДА &Отправленные
	|					КОГДА Взаимодействия.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|						ТОГДА &Исходящие
	|				КОНЕЦ
	|		ИНАЧЕ &НежелательнаяПочта
	|	КОНЕЦ КАК НаименованиеПапки,
	|	Взаимодействия.УчетнаяЗапись
	|ПОМЕСТИТЬ НаименованиеПапкиНазначения
	|ИЗ
	|	ЖурналДокументов.CRM_Почта КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Ссылка В(&МассивПисем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиПисем.Ссылка КАК Папка,
	|	НаименованиеПапкиНазначения.Ссылка КАК Письмо
	|ИЗ
	|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
	|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование
	|			И НаименованиеПапкиНазначения.УчетнаяЗапись = ПапкиПисем.УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивПисем",МассивПисем);
	Взаимодействия.УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаПисем);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает текст HTML электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//
// Возвращаемое значение:
//   Строка   - обработанный текст электронного письма.
//
Функция CRM_ОбработатьТекстHTML(Письмо, ИдентификаторФормы = Неопределено, ЭтоПисьмоРассылки = Ложь) Экспорт
	Если ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_ШаблоныРассылки") Тогда
		ТекстHTML = Письмо.Текст;
		Кодировка = "UTF-8"
	Иначе
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо,"ТекстHTML,Кодировка");
		ТекстHTML = СтруктураРеквизиты.ТекстHTML;
		Кодировка = СтруктураРеквизиты.Кодировка;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		// Добавим тег HTML если он отсутствует. Такие письма могут приходить к примеру с Gmail. 
		// Необходимо для корректного отображения в элементе формы.
		Если СтрЧислоВхождений(ТекстHTML,"<html") = 0 Тогда
			ТекстHTML = "<html>" + ТекстHTML + "</html>"
		КонецЕсли;
		Если ЭтоПисьмоРассылки Тогда
			ТаблицаФайлов = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Взаимодействия.ПолучитьЗначениеПредмета(Письмо));
		Иначе
			ТаблицаФайлов = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		КонецЕсли;
		Если ТаблицаФайлов.Количество() Тогда
			
			ТекстHTML = СодержимоеТегаHTML(ТекстHTML, "html", Истина);
			
			ДокументHTML = CRM_ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML, ТаблицаФайлов, Кодировка,,ИдентификаторФормы);
			Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

// Заполняет список доступных для создания взаимодействий.
//
// Параметры:
//  ДокументыДоступныеДляСоздания - СписокЗначений - заполняемый список значений.
//
Процедура CRM_ЗаполнитьСписокДоступныхДляСозданияДокументов(ДокументыДоступныеДляСоздания) Экспорт
	
	Для каждого РегистрируемыйДокумент Из Метаданные.ЖурналыДокументов.CRM_Почта.РегистрируемыеДокументы Цикл
		Если Не РегистрируемыйДокумент.Имя = "ЭлектронноеПисьмоВходящее" Тогда
			
			ДокументыДоступныеДляСоздания.Добавить(РегистрируемыйДокумент.Имя,РегистрируемыйДокумент.Синоним);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из обработчиков заполнения документов - взаимодействий и предметов заполнения.
// Выполняет необходимые действия по заполнению реквизитов по умолчанию.
//
// Параметры:
//  Объект - ДокументОбъект - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения  - Произвольный - значение,которое используется как основание для заполнения.
//
Процедура CRM_ЗаполнитьРеквизитыПоУмолчанию(Объект, ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контакты = Неопределено;
	ТипДанныеЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если CRM_ВзаимодействияСервер.ЯвляетсяПредметом(ДанныеЗаполнения) Тогда
		// На основании предмета
		Если ТипДанныеЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Контакты = Новый Массив;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.CRM_КонтактноеЛицо) Тогда
				ТаблицаАдресов = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ДанныеЗаполнения.CRM_КонтактноеЛицо, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				Если ТаблицаАдресов.Количество() > 0 Тогда 
					Контакты.Добавить(ДанныеЗаполнения.CRM_КонтактноеЛицо);
				КонецЕсли;	
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.CRM_Партнер) Тогда
				ТаблицаАдресов = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(ДанныеЗаполнения.CRM_Партнер, ,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				Если ТаблицаАдресов.Количество() > 0 Тогда 
					Контакты.Добавить(ДанныеЗаполнения.CRM_Партнер);
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли ТипДанныеЗаполнения = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			Контакты = Новый Массив;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.КонтактноеЛицо) Тогда
				Контакты.Добавить(ДанныеЗаполнения.КонтактноеЛицо);
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.Партнер) Тогда
				Контакты.Добавить(ДанныеЗаполнения.Партнер);
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли ТипДанныеЗаполнения = Тип("Структура") Тогда
		// +CRM
		Если ДанныеЗаполнения.Свойство("СписокТелефонов") Тогда
			Контакты = Новый Массив;
			Для Каждого ЭлементСписка Из ДанныеЗаполнения.СписокТелефонов Цикл
				СтруктураКонтакта	= Новый Структура;	
				СтруктураКонтакта.Вставить("Контакт",	ЭлементСписка.Значение.Контакт);
				СтруктураКонтакта.Вставить("Адрес",		ЭлементСписка.Представление);
				Если ЗначениеЗаполнено(ЭлементСписка.Значение.Контакт) Тогда
					СтруктураКонтакта.Вставить("Представление",	ЭлементСписка.Значение.Контакт.Наименование);
				Иначе
					СтруктураКонтакта.Вставить("Представление",	"");
				КонецЕсли;
				Контакты.Добавить(СтруктураКонтакта);
			КонецЦикла;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СписокПартнеров") Тогда
			Контакты = Новый Массив;
			Для Каждого ЭлементСписка Из ДанныеЗаполнения.СписокПартнеров Цикл
				СтруктураКонтакта	= Новый Структура;	
				Если ЗначениеЗаполнено(ЭлементСписка.Значение.КонтактноеЛицо) Тогда
					СтруктураКонтакта.Вставить("Контакт",	ЭлементСписка.Значение.КонтактноеЛицо);
				Иначе
					СтруктураКонтакта.Вставить("Контакт",	ЭлементСписка.Значение.Партнер);
				КонецЕсли;	
				СтруктураКонтакта.Вставить("Адрес",		ЭлементСписка.Представление);
				Если ЗначениеЗаполнено(ЭлементСписка.Значение.Партнер) Тогда
					СтруктураКонтакта.Вставить("Представление",	ЭлементСписка.Значение.Партнер.Наименование);
				Иначе
					СтруктураКонтакта.Вставить("Представление",	"");
				КонецЕсли;
				Контакты.Добавить(СтруктураКонтакта);
			КонецЦикла;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Ссылка") И ДанныеЗаполнения.Свойство("Телефон") Тогда
			Контакты = Новый Массив;
			СтруктураКонтакта	= Новый Структура;
			СтруктураКонтакта.Вставить("Контакт",	ДанныеЗаполнения.Ссылка);
			СтруктураКонтакта.Вставить("Адрес",		ДанныеЗаполнения.Телефон);
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Ссылка) Тогда
				СтруктураКонтакта.Вставить("Представление",	ДанныеЗаполнения.Ссылка.Наименование);
			Иначе
				СтруктураКонтакта.Вставить("Представление",	"");
			КонецЕсли;	
			Контакты.Добавить(СтруктураКонтакта);
		КонецЕсли;
		// -CRM
		
	КонецЕсли;
	
	// Заполним участников
	Если ЗначениеЗаполнено(Контакты) И (Контакты.Количество() > 0) Тогда		
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ТелефонныйЗвонок")
			Или ТипЗнч(Объект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
				Для Каждого СтрокаКонтакт Из Контакты Цикл
					
					Если ТипЗнч(СтрокаКонтакт) = Тип("Структура") Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаКонтакт.Контакт) Тогда
							СтрокаКонтакт.Адрес = "";
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") И Объект.ПолучателиПисьма.Количество() > 0 Тогда
			
			// проверим, есть ли такие контакты в списке получателей
			
			Возврат;
		//	КонтактыИндекс = 0;
		//	
		//	Пока КонтактыИндекс < Контакты.Количество() Цикл
		//		
		//		ТекущийКонтакт = Контакты[КонтактыИндекс];
		//		
		//		СтрокаКонтакта = Объект.ПолучателиПисьма.Найти(ТекущийКонтакт, "Контакт");
		//		
		//		Если СтрокаКонтакта = Неопределено Тогда
		//			
		//			КонтактыИндекс = КонтактыИндекс + 1;
		//			
		//		Иначе
		//			
		//			Контакты.Удалить(КонтактыИндекс);					
		//		
		//		КонецЕсли;				
		//
		//	КонецЦикла;
		
		КонецЕсли;		
		
		Если Контакты.Количество() > 0 Тогда
			
			Объект.ЗаполнитьКонтакты(Контакты);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть участники у документов Встреча и Запланированное взаимодействие.
//
// Параметры:
//  Контакты  - Массив - массив, содержащий участников взаимодействия.
//  Участники - ТабличнаяЧастьДокумента - табличная часть документа, которая будет заполнена
//                                        на основании массива.
//
Процедура CRM_ЗаполнитьКонтактыДляВстречи(Контакты, Участники, ТипКонтактнойИнформации = Неопределено) Экспорт
	
	Если Не Взаимодействия.КонтактыЗаполнены(Контакты) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из Контакты Цикл
		
		НоваяСтрока = Участники.Добавить();
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			НоваяСтрока.Контакт = ЭлементМассива.Контакт;
			НоваяСтрока.ПредставлениеКонтакта = ЭлементМассива.Представление;
			НоваяСтрока.КакСвязаться = CRM_ПреобразоватьАдресПоТипуИнформации(ЭлементМассива.Адрес, ТипКонтактнойИнформации);
		Иначе
			НоваяСтрока.Контакт = ЭлементМассива;
		КонецЕсли;
		// Добавляем в поле "Как связаться" телефон даже если он нестандартного вида, чтобы
		// избежать дозаполнения поля всеми телефонами этого поля (процедура ниже)
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.КакСвязаться) И ЗначениеЗаполнено(ЭлементМассива.Адрес) Тогда
			 НоваяСтрока.КакСвязаться = ЭлементМассива.Адрес;
		КонецЕсли;
		
		Взаимодействия.ДозаполнитьПоляКонтактов(НоваяСтрока.Контакт, НоваяСтрока.ПредставлениеКонтакта, НоваяСтрока.КакСвязаться, ТипКонтактнойИнформации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция CRM_ПреобразоватьАдресПоТипуИнформации(Адрес, ТипКонтактнойИнформации = Неопределено)
	
	Если ТипКонтактнойИнформации = Неопределено Или ПустаяСтрока(Адрес) Тогда
		Возврат Адрес;
	КонецЕсли;
	
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		МассивСтрокСТелефонами = Новый Массив;
		Для Каждого ЭлементМассива Из СтрРазделить(Адрес, ";", Ложь) Цикл
			Если  Взаимодействия.КорректноВведенНомерТелефона(ЭлементМассива) Тогда
				МассивСтрокСТелефонами.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСтрокСТелефонами.Количество() > 0 Тогда
			Возврат СтрСоединить(МассивСтрокСТелефонами, ";");
		КонецЕсли;
		
	Иначе
		
		Возврат Адрес
		
	КонецЕсли;
	
КонецФункции

// Заменяет в тексте HTML ИД картинок вложений на путь к файлам и создает объект документ HTML.
//
// Параметры:
//  ТекстHTML - Строка - обрабатываемый текст HTML.
//  Атрибут - ТаблицаЗначений - таблица, содержащая информацию о присоединенных файлов.
//  Кодировка - Строка - кодировка текста HTML.
//
// Возвращаемое значение:
//  ДокументHTML   - созданный документ HTML.
//
Функция CRM_ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML,ТаблицаФайлов,Кодировка = Неопределено, ОбработатьКартинки = Ложь, ИдентификаторФормы = Неопределено) Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML,Кодировка);
	
	Для каждого ПрисоединенныйФайл Из ТаблицаФайлов Цикл
		
		Для каждого Картинка Из ДокументHTML.Картинки Цикл
			
			АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
			Если АтрибутИсточникКартинки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
				
				НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
				Если ОбработатьКартинки Тогда
					Если ЭтоАдресВременногоХранилища(ПрисоединенныйФайл.Ссылка) Тогда
						ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПрисоединенныйФайл.Ссылка);
						Расширение     =  ПрисоединенныйФайл.Расширение;
					Иначе
						ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка);
						ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
						Расширение     = ДанныеФайла.Расширение;
					КонецЕсли;
					ТекстовоеСодержимое = Base64Строка(ДвоичныеДанные);
					ТекстовоеСодержимое = "data:image/" + Сред(Расширение,2) + ";base64," + Символы.ПС + ТекстовоеСодержимое;
				Иначе
					// Если данные картинки получить не удалось, то картинку не выводим. Пользователю при этом ничего не сообщаем.
					
					Если ЭтоАдресВременногоХранилища(ПрисоединенныйФайл.Ссылка) Тогда
						ТекстовоеСодержимое = ПрисоединенныйФайл.Ссылка;
					Иначе
						Попытка
						Если НЕ ИдентификаторФормы = Неопределено Тогда
							ТекстовоеСодержимое = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка,ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
						Иначе
							ТекстовоеСодержимое = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла;
						КонецЕсли;
						Исключение
							ТекстовоеСодержимое = "";
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
				
				НовыйАтрибутКартинки.ТекстовоеСодержимое = ТекстовоеСодержимое;
				Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Выполняет отправку электронного письма.
//
// Параметры:
//  Объект - ДокументОбъект.ЭлектронноеПисьмоИсходящее - отправляемое письмо.
//
// Возвращаемое значение:
//   Строка   - идентификатор почтового сообщения.
//
Функция ВыполнитьОтправкуПисьма(Объект, Соединение = Неопределено, ПараметрыПисьма = Неопределено, ПротоколПочты = "") Экспорт
	
	Если ПротоколПочты <> "" И ПротоколПочты <> "Все" И ПротоколПочты <> "IMAP" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыПисьма = Неопределено Тогда
		ПараметрыПисьма = ПараметрыПисьмаДляОтправки(Объект);
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(Объект.УчетнаяЗапись);
	
		Попытка
			
			Соединение = Новый ИнтернетПочта;
			ПротоколПодключения = ?(ПустаяСтрока(Профиль.АдресСервераIMAP),ПротоколИнтернетПочты.POP3, ПротоколИнтернетПочты.IMAP);
			Соединение.Подключиться(Профиль, ПротоколПодключения);
			
			ПротоколПочты = "";
			
			Если ПротоколПодключения = ПротоколИнтернетПочты.IMAP Тогда
				
				Если Не (Объект.УдалятьПослеОтправки
					Или УправлениеЭлектроннойПочтой.СерверИсходящейПочтыНеТребуетДополнительнойОтправкиПоIMAP(Профиль.АдресСервераSMTP)) Тогда
					
					ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
					Для Каждого ПочтовыйЯщик Из ПочтовыеЯщики Цикл
						Если НРег(ПочтовыйЯщик) = "отправленные"
							Или НРег(ПочтовыйЯщик) = "sent" Тогда
							
							Соединение.ТекущийПочтовыйЯщик = ПочтовыйЯщик;
							ПротоколПочты = "Все";
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
					|%2';
					|en = 'An error occurred when connecting to account %1
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Объект.УчетнаяЗапись,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке, Объект.УчетнаяЗапись);
			
		КонецПопытки;
		
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Соединение", Соединение);
	
	ПараметрыПисьма.Вставить("ПротоколПочты", ПротоколПочты);
	
	ИдентификаторПисьма = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Объект.УчетнаяЗапись, ПараметрыПисьма);
	
	Если ПротоколПочты = "" Тогда
		Объект.ИдентификаторСообщения = ПараметрыПисьма.ИдентификаторСообщения;
	ИначеЕсли ПротоколПочты = "IMAP" Тогда
		Объект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщенияОтправкаIMAP;
	ИначеЕсли ПротоколПочты = "Все" Тогда
		Объект.ИдентификаторСообщения = ПараметрыПисьма.ИдентификаторСообщения;
		Объект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщенияОтправкаIMAP;
	КонецЕсли;
	
	Возврат ИдентификаторПисьма;
	
КонецФункции

// Устанавливает папки для массива писем.
//
// Параметры:
//  МассивПисем  - Массив - массив писем для которого будут установлены папки.
//
Процедура CRM_УстановитьПапкиДляМассиваПисем(МассивПисем) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие В(&МассивПисем)";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	МассивПапокДляРасчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Папка");
	
	ТаблицаПапок = CRM_ОпределитьПапкиДляМассиваПисем(МассивПисем);
	Для каждого СтрокаТаблицы Из ТаблицаПапок Цикл
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(СтрокаТаблицы.Письмо, СтрокаТаблицы.Папка, Ложь);
		ПисьмоОбъект = СтрокаТаблицы.Письмо.ПолучитьОбъект();
		//ПисьмоОбъект.CRM_Папка = СтрокаТаблицы.Папка;
		Попытка
			ПисьмоОбъект.Записать();
			Если СтрокаТаблицы.ПометитьНаУдаление Тогда
				ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Папка) И МассивПапокДляРасчета.Найти(СтрокаТаблицы.Папка) = Неопределено Тогда
			МассивПапокДляРасчета.Добавить(СтрокаТаблицы.Папка);
		КонецЕсли;
	КонецЦикла;
		
	Взаимодействия.РассчитатьРассмотреноПоПапкам(Взаимодействия.ТаблицаДанныхДляРасчетаРассмотрено(МассивПапокДляРасчета, "Папка"));
	
КонецПроцедуры

// Проверяет, является ли текущий пользователь ответственным за ведение папок для учетной записи.
//
// Параметры:
//  УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для которой выполняется проверка.
//
// Возвращаемое значение:
//   Булево   - Истина, если является, Ложь в обратном случае.
//
Функция ПользовательЯвляетсяОтветственнымЗаВедениеПапок(УчетнаяЗапись) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ОтветственныйЗаВедениеПапок
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗаписьЭлектроннойПочты
	|	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь В (&ОтветственныйЗаВедениеПапок)
	|	И CRM_УчетныеЗаписиЭлектроннойПочты.Администрирование";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗапись);
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиПользователя.Добавить(ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтветственныйЗаВедениеПапок", РолиПользователя);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 
	
Функция ДанныеПрисоединенныхФайловПисьма(ПисьмоСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВладелецФайлов", ПисьмоСсылка);
	Результат.Вставить("ИмяСправочникаПрисоединенныхФайлов", 
		УправлениеЭлектроннойПочтой.ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоСсылка));
		
	ВзаимодействияПереопределяемый.ПриПолученииПрисоединенныхФайлов(ПисьмоСсылка, Результат);
	
	// Для обратной совместимости.
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоСсылка);
	Если ДанныеПрисоединенныхФайловПисьма <> Неопределено Тогда
		Результат.ИмяСправочникаПрисоединенныхФайлов = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		Результат.ВладелецФайлов = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ИнтернетПочтовоеСообщениеИзПисьма(Письмо) Экспорт
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Возврат ИнтернетПочтовоеСообщениеИзВходящегоПисьма(Письмо);
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		Возврат ИнтернетПочтовоеСообщениеИзИсходящегоПисьма(Письмо);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

#КонецОбласти

