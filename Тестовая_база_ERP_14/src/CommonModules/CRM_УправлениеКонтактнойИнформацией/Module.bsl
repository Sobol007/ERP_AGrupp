////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Обработчик для события формы ПриСозданииНаСервере.
//  Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//  Форма					 - УправляемаяФорма				 - Форма объекта-владельца, предназначенная для вывода контактной информации.
//  Объект					 - Произвольный					 - Объект-владелец контактной информации.
//  ИмяЭлементаДляРазмещения - Строка						 - Имя элемента для размещения.
//  ПоложениеЗаголовкаКИ	 - ПоложениеЗаголовкаЭлементаФормы	 - Может принимать значения
//  	ПоложениеЗаголовкаЭлементаФормы.Лево  или
//  	ПоложениеЗаголовкаЭлементаФормы.Верх (по умолчанию).
//  ИсключаемыеВиды			 - Массив							 - Исключаемые виды.
//  ОтложеннаяИнициализация	 - Булево							 - Отложенная инициализация.
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "", ПоложениеЗаголовкаКИ = "",
	Знач ИсключаемыеВиды = Неопределено, ОтложеннаяИнициализация = Ложь, ВыводитьВОднуКолонку = Ложь) Экспорт
	
	ТипПомещения = Неопределено;
	Если ИсключаемыеВиды = Неопределено Тогда
		ИсключаемыеВиды = Новый Массив;
	КонецЕсли;
	
	СкрываемыеВиды = Новый Массив;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов);
	
	// Получим список видов КИ
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	// +CRM
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи = CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи", МетаданныеОбъекта, "КонтактнаяИнформация");
	
	// +СофтФон
	ЕстьРеквизитТабличнойЧасти_сфпВремяЗадержкиНабораДобавочногоНомера = CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("сфпВремяЗадержкиНабораДобавочногоНомера", МетаданныеОбъекта, "КонтактнаяИнформация");
	// -СофтФон
	
	ЭтоКонфигурацияCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	
	Если ЭтоКонфигурацияCRM Тогда
		
		ИспользоватьПартнеровКакКонтрагентов = Ложь;
		
	Иначе
		
		ИмяОпции = "ИспользоватьПартнеровКакКонтрагентов";
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию(ИмяОпции);
	
	КонецЕсли;
	// -CRM
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	// +CRM
	Если (ИмяОбъектаМетаданных = "Партнеры") Тогда
		ГруппаВидовКИ = Новый Массив();
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"Компания"]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"ЧастноеЛицо"]);
		
		ИспользуетсяКонтактнаяИнформацияСоответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ГруппаВидовКИ, "Используется");
		ИспользуетсяКонтактнаяИнформация			 = ИспользуетсяКонтактнаяИнформацияСоответствие[Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]];
	Иначе
		ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	КонецЕсли;
	//ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	// -CRM
	
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		// Добавим новые реквизиты
		Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		КонецЕсли;
		ДобавленныеРеквизиты = Новый Массив;
		Для Каждого СтрокаРеквизита Из МассивДобавляемыхРеквизитов Цикл
			Если ПустаяСтрока(СтрокаРеквизита.Путь) Тогда
				ДобавленныеРеквизиты.Добавить(СтрокаРеквизита.Имя);
			КонецЕсли;
		КонецЦикла;
		Форма.ПараметрыКонтактнойИнформации = Новый Структура;
		Форма.ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения", ИмяЭлементаДляРазмещения);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка", ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ));
		Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеРеквизиты", ДобавленныеРеквизиты);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация", ОтложеннаяИнициализация);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды", ИсключаемыеВиды);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы", Новый СписокЗначений);
		// +CRM
		Форма.ПараметрыКонтактнойИнформации.Вставить("ВыводитьВОднуКолонку", ВыводитьВОднуКолонку);
		// -CRM
		Если Не ПустаяСтрока(ИмяЭлементаДляРазмещения) Тогда
			Форма.Элементы[ИмяЭлементаДляРазмещения].Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	Если РеквизитыОбъекта.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено Тогда
		ДанныеИдентификатораСтрокиТабличнойЧасти = "0";
	Иначе
		ДанныеИдентификатораСтрокиТабличнойЧасти = "ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0)";
	КонецЕсли;
	
	Если РеквизитыОбъекта.Найти("ДействуетС") = Неопределено Тогда
		ДанныеДействуетСТабличнойЧасти = "ДАТАВРЕМЯ(1,1,1) КАК ДействуетС,";
	Иначе
		ДанныеДействуетСТабличнойЧасти  = " КонтактнаяИнформация.ДействуетС КАК ДействуетС, ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
		|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	КонтактнаяИнформация.Вид КАК Вид, " + ДанныеДействуетСТабличнойЧасти + "
		|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
		// +CRM
		|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
		// +СофтФон
		|	КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера КАК сфпВремяЗадержкиНабораДобавочногоНомера,
		// -СофтФон
		// -CRM
		|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти,
		|	КонтактнаяИнформация.Значение,
		|	КонтактнаяИнформация.ЗначенияПолей
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ " +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка УПОРЯДОЧИТЬ ПО Вид, ДействуетС";

		// +CRM
		Если НЕ ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
		КонецЕсли;
		// +СофтФон
		Если НЕ ЕстьРеквизитТабличнойЧасти_сфпВремяЗадержкиНабораДобавочногоНомера Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера", "Ложь");
		КонецЕсли;
		// -СофтФон
		// -CRM
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
		
		// добавим контактную информацию из контрагента
		Если НЕ ЭтоКонфигурацияCRM И ИспользоватьПартнеровКакКонтрагентов И ИмяОбъектаМетаданных = "Партнеры" 
		   И (Форма.ИмяФормы = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагента" Или 
		   Форма.ИмяФормы = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая") И ЗначениеЗаполнено(Форма.КонтрагентПартнера) Тогда
			
			МассивВидовКонтрагентаВПартнере = Новый Массив;
			
			Для Каждого СтрокаКонтактнаяИнформация Из КонтактнаяИнформация Цикл
				
				Если ГруппаВидовКИ.Найти(СтрокаКонтактнаяИнформация.Вид.Родитель) = Неопределено 
				   И ГруппаВидовКИ.Найти(СтрокаКонтактнаяИнформация.Вид.Родитель.Родитель) = Неопределено Тогда
					
					Если МассивВидовКонтрагентаВПартнере.Найти(СтрокаКонтактнаяИнформация.Вид) = Неопределено Тогда
					
						МассивВидовКонтрагентаВПартнере.Добавить(СтрокаКонтактнаяИнформация.Вид);
					
					КонецЕсли;
					
				КонецЕсли; 
			
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
			|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
			|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
			// +CRM
			|	Ложь КАК CRM_ОсновнойДляСвязи,
			// -CRM
			|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти,
			|	КонтактнаяИнформация.Значение,
			|	КонтактнаяИнформация.ЗначенияПолей
			|ИЗ
			|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|   И НЕ КонтактнаяИнформация.Вид В (&МассивВидовКонтрагентаВПартнере)
			|
			|УПОРЯДОЧИТЬ ПО Вид, ДействуетС";

			//// +CRM
			//Если НЕ ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
			//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
			//КонецЕсли;
			//// -CRM
			Запрос.УстановитьПараметр("Ссылка", Форма.КонтрагентПартнера);
			Запрос.УстановитьПараметр("МассивВидовКонтрагентаВПартнере", МассивВидовКонтрагентаВПартнере);			
			
			КонтактнаяИнформацияКонтрагента = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаКонтактнаяИнформацияКонтрагента  Из КонтактнаяИнформацияКонтрагента Цикл
			
				СтрокаКонтактнаяИнформация = КонтактнаяИнформация.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаКонтактнаяИнформация, СтрокаКонтактнаяИнформацияКонтрагента);				
			
			КонецЦикла; 
			
		КонецЕсли;		
		
		Если КонтактнаяИнформация.Колонки.Найти("ХранитьИсториюИзменений") <> Неопределено Тогда
			ПредыдущийВид = Неопределено;
			Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
				Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
					И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
						Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
						НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
						ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
								НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
							КонецЕсли;
						КонецЦикла;
						ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ТекстЗапросаИсторическаяИнформация = " КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация КАК ЭтоИсторическаяКонтактнаяИнформация,
										|	КонтактнаяИнформация.ДействуетС                  КАК ДействуетС, "
	Иначе
		КонтактнаяИнформация = Объект.КонтактнаяИнформация.Выгрузить();
		
		// добавим контактную информацию из контрагента
		Если НЕ ЭтоКонфигурацияCRM И ИспользоватьПартнеровКакКонтрагентов И ИмяОбъектаМетаданных = "Партнеры" 
		   И (Форма.ИмяФормы = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагента" Или 
		   Форма.ИмяФормы = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая") И ЗначениеЗаполнено(Форма.КонтрагентПартнера) Тогда
			
			МассивВидовКонтрагентаВПартнере = Новый Массив;
			
			Для Каждого СтрокаКонтактнаяИнформация Из КонтактнаяИнформация Цикл
				
				Если ГруппаВидовКИ.Найти(СтрокаКонтактнаяИнформация.Вид.Родитель) = Неопределено 
				   И ГруппаВидовКИ.Найти(СтрокаКонтактнаяИнформация.Вид.Родитель.Родитель) = Неопределено Тогда
					
					Если МассивВидовКонтрагентаВПартнере.Найти(СтрокаКонтактнаяИнформация.Вид) = Неопределено Тогда
					
						МассивВидовКонтрагентаВПартнере.Добавить(СтрокаКонтактнаяИнформация.Вид);
					
					КонецЕсли;
					
				КонецЕсли; 
			
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
			|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
			|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
			// +CRM
			|	Ложь КАК CRM_ОсновнойДляСвязи,
			// -CRM
			|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти,
			|	КонтактнаяИнформация.Значение,
			|	КонтактнаяИнформация.ЗначенияПолей
			|ИЗ
			|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|   И НЕ КонтактнаяИнформация.Вид В (&МассивВидовКонтрагентаВПартнере)
			|
			|УПОРЯДОЧИТЬ ПО Вид, ДействуетС";

			//// +CRM
			//Если НЕ ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
			//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
			//КонецЕсли;
			//// -CRM
			Запрос.УстановитьПараметр("Ссылка", Форма.КонтрагентПартнера);
			Запрос.УстановитьПараметр("МассивВидовКонтрагентаВПартнере", МассивВидовКонтрагентаВПартнере);			
			
			КонтактнаяИнформацияКонтрагента = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаКонтактнаяИнформацияКонтрагента  Из КонтактнаяИнформацияКонтрагента Цикл
			
				СтрокаКонтактнаяИнформация = КонтактнаяИнформация.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаКонтактнаяИнформация, СтрокаКонтактнаяИнформацияКонтрагента);				
			
			КонецЦикла; 
			
		КонецЕсли;		
		
		ТекстЗапросаИсторическаяИнформация = "ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,0 КАК ДействуетС, ";
	КонецЕсли;
	
	ПредыдущийВид = Неопределено;
	Если КонтактнаяИнформация.Колонки.Найти("ХранитьИсториюИзменений") <> Неопределено Тогда
		Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
				И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
				Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
				НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
				ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
						НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
					КонецЕсли;
				КонецЦикла;
				ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление               КАК Представление,
	|	КонтактнаяИнформация.Значение КАК Значение,
	|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
	|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки, " + ТекстЗапросаИсторическаяИнформация + "
	|	КонтактнаяИнформация.Вид                         КАК Вид,
	// +CRM
	|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
	// +СофтФон
	|	КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера КАК сфпВремяЗадержкиНабораДобавочногоНомера,
	// -СофтФон
	// -CRM
	|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ 
	|	КонтактнаяИнформация
	|ИЗ
	|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид
	|;////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных    КАК ИмяПредопределенныхДанных,
	|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.Наименование                 КАК Наименование,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений      КАК ХранитьИсториюИзменений,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге КАК РедактированиеТолькоВДиалоге,
	|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.МеждународныйФорматАдреса    КАК МеждународныйФорматАдреса,
	|	ВидыКонтактнойИнформации.ПометкаУдаления              КАК ПометкаУдаления,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация, ЛОЖЬ)    КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.Значение, """") КАК Значение,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
	|	ЕСТЬNULL(КонтактнаяИнформация.ДействуетС, 0)          КАК ДействуетС,
	|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
	// +CRM
	|	ЕСТЬNULL(КонтактнаяИнформация.CRM_ОсновнойДляСвязи,Ложь) КАК CRM_ОсновнойДляСвязи,
	// +СофтФон
	|	ЕСТЬNULL(КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера,0) КАК сфпВремяЗадержкиНабораДобавочногоНомера,
	// -СофтФон
	|	ВЫБОР
	|		КОГДА (ЕСТЬNULL(КонтактнаяИнформация.CRM_ОсновнойДляСвязи,Ложь) ИЛИ ЕСТЬNULL(ВидыКонтактнойИнформации.CRM_Основной,Ложь))
	|			ТОГДА ИСТИНА
	|		КОГДА (ЕСТЬNULL(ВидыКонтактнойИнформации.Родитель, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникОрганизации))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КонтактнаяИнформация.НомерСтроки ЕСТЬ NULL 
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК Выводить,
	// -CRM
	|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + "      КАК ИдентификаторСтроки,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(200))                    КАК ИмяРеквизита,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий,
	// +CRM
	|	ВидыКонтактнойИнформации.Родитель КАК РодительКИ,
	|	ВидыКонтактнойИнформации.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 4
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 3
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДопПолеСортировки,
	|	ВЫБОР
	|		КОГДА &ВыводитьВОднуКолонку ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Колонка
	// -CRM
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КонтактнаяИнформация КАК КонтактнаяИнформация
	|ПО 
	|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И ВидыКонтактнойИнформации.Используется
	|	И ЕстьNULL(ВидыКонтактнойИнформации.Родитель.Используется, Истина)";
	// +CRM
	Если (ИмяОбъектаМетаданных = "Партнеры") Тогда
		
		Если ЭтоКонфигурацияCRM Тогда
	
			Запрос.Текст = Запрос.Текст + "
			|	И (
			|		ВидыКонтактнойИнформации.Родитель В (&ГруппаВидовКИ)
			|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель В (&ГруппаВидовКИ))";
			
		Иначе
			
			ИмяОпции = "ИспользоватьПартнеровКакКонтрагентов";
			ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию(ИмяОпции);
			
			Если ИспользоватьПартнеровКакКонтрагентов  Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|	И (
				|	(ВидыКонтактнойИнформации.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)) ИЛИ
				|	(ВидыКонтактнойИнформации.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)) ИЛИ
				|	(ВидыКонтактнойИнформации.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксКонтрагенты)) ИЛИ
				|		((ВидыКонтактнойИнформации.Родитель В (&ГруппаВидовКИ) 
				|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель В (&ГруппаВидовКИ)) 
				|		И (НЕ ВидыКонтактнойИнформации.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.CRM_ЮрАдрес)))
				|	)";
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + "
				|	И (
				|		ВидыКонтактнойИнформации.Родитель В (&ГруппаВидовКИ)
				|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель В (&ГруппаВидовКИ))";
			
			КонецЕсли;	
			
		КонецЕсли;
		
	Иначе
	// -CRM
		Запрос.Текст = Запрос.Текст + "
		|	И (
		|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
		|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
	|";
	
	// +CRM
	Если НЕ ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
	КонецЕсли;
	// +СофтФон
	Если НЕ ЕстьРеквизитТабличнойЧасти_сфпВремяЗадержкиНабораДобавочногоНомера Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера", 0);
	КонецЕсли;
	// -СофтФон
	// -CRM
	Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", КонтактнаяИнформация);
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ВыводитьВОднуКолонку", ВыводитьВОднуКолонку);
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Конвертация
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		Если ПустаяСтрока(СтрокаКИ.Значение) Тогда
			Если ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
				
				КонтактнаяИнформацияПоПолям = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(СтрокаКИ.ЗначенияПолей,
					СтрокаКИ.Тип, СтрокаКИ.Представление, Ложь);
				СтрокаКИ.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				
				СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// +CRM
	//КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	КонтактнаяИнформация.Сортировать("Колонка, ДопПолеСортировки, НомерСтроки");
	// -CRM
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	
	СозданныеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	ПредыдущийВид = Неопределено;
	ПорядковыйНомер = 1;
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
			Поз = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
				
				ТекущийВид = СтрокаКИ.Вид;
				
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3%4",
						"КонтактнаяИнформацияПоле",
						ИмяТабличнойЧасти,
						СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x"),
						ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ));
					
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			
			ТекущийВид = ОбъектКонтактнойИнформации.Вид;
			
			Если ТекущийВид <> ПредыдущийВид Тогда
				ПредыдущийВид = ТекущийВид;
			//	ПорядковыйНомер = 1;
			//Иначе
			//	ПорядковыйНомер = ПорядковыйНомер + 1;
			КонецЕсли;
			
			Индекс = СозданныеРеквизиты.Найти(ТекущийВид);
			
			Если Индекс = Неопределено Тогда
				
				ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
					"КонтактнаяИнформацияПоле",
					СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x"),
					ПорядковыйНомер);
				ПорядковыйНомер = ПорядковыйНомер + 1;
				
				ОбъектКонтактнойИнформации.ИмяРеквизита = ИмяРеквизита;
				Если Не ОтложеннаяИнициализация Тогда
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Наименование, Истина));
				КонецЕсли;
			Иначе
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
				СозданныеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
			// При обнаружении ошибок распознавания не прерываем генерацию.
			Попытка
				ОбъектКонтактнойИнформации.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ОбъектКонтактнойИнформации.Значение);
			Исключение
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ОбъектКонтактнойИнформации.ЗначенияПолей, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Некорректный формат контактной информации.';en='Incorrect contact information format.'"), ,
				ОбъектКонтактнойИнформации.ИмяРеквизита);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	ПредыдущийВид = Неопределено;
	
	// +CRM
	//ПараметрыКонтактнойИнформации = ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ,
	//	ОтложеннаяИнициализация, ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации = ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ,
		ОтложеннаяИнициализация, ИсключаемыеВиды, СкрываемыеВиды, ВыводитьВОднуКолонку);
	// -CRM
	ПараметрыКонтактнойИнформации.Владелец                     = СсылкаНаОбъект;
	ПараметрыКонтактнойИнформации.ПараметрыАдреса.ТипПомещения = ТипПомещения;
	
	// Кеш значений всех видов контактной информации у данного объекта.
	ДанныеВидовКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.ДанныеВидовКонтактнойИнформации(
		КонтактнаяИнформация.ВыгрузитьКолонку("Вид"));
		
		Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов.
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	Если ТипЗнч(Родитель) = Тип("ГруппаФормы") И Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
		
		Родитель.СквозноеВыравнивание = СквозноеВыравнивание.НеИспользовать;
		
	КонецЕсли;	
	
	// Создаем группы для контактной информации.
	ГруппаКомпоновки = Группа("ГруппаКомпоновкиКонтактнойИнформации",
	Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
	// +CRM
	Если ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
		ГруппаОсновнойДляСвязи = Группа("ГруппаОсновнойДляСвязиКонтактнойИнформации",
		Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	КонецЕсли;
	// -CRM
	ГруппаЗаголовков = Группа("ГруппаЗаголовковКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаПолейВвода = Группа("ГруппаПолейВводаКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаДействий = Группа("ГруппаДействийКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	// +CRM
	ГруппаКолонка_1 = Группа("ГруппаКолонка_1",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 4);
	ГруппаКолонка_2 = Группа("ГруппаКолонка_2",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 4);
	
	Если ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
		ГруппаОсновнойДляСвязи_1 = Группа("ГруппаОсновнойДляСвязиКонтактнойИнформации_1",
		Форма, ГруппаКолонка_1, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	КонецЕсли;
	ГруппаЗаголовков_1 = Группа("ГруппаЗаголовковКонтактнойИнформации_1",
	Форма, ГруппаКолонка_1, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	ГруппаПолейВвода_1 = Группа("ГруппаПолейВводаКонтактнойИнформации_1",
	Форма, ГруппаКолонка_1, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	ГруппаДействий_1 = Группа("ГруппаДействийКонтактнойИнформации_1",
	Форма, ГруппаКолонка_1, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	//	ГруппаДействий_1.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Если НЕ ПараметрыКонтактнойИнформации.ВыводитьВОднуКолонку Тогда
		Если ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
			ГруппаОсновнойДляСвязи_2 = Группа("ГруппаОсновнойДляСвязиКонтактнойИнформации_2",
			Форма, ГруппаКолонка_2, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
		КонецЕсли;
		ГруппаЗаголовков_2 = Группа("ГруппаЗаголовковКонтактнойИнформации_2",
		Форма, ГруппаКолонка_2, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
		ГруппаПолейВвода_2 = Группа("ГруппаПолейВводаКонтактнойИнформации_2",
		Форма, ГруппаКолонка_2, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
		ГруппаДействий_2 = Группа("ГруппаДействийКонтактнойИнформации_2",
		Форма, ГруппаКолонка_2, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	КонецЕсли;
	//	ГруппаДействий_2.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	// -CRM
	СозданныеЭлементы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	СтатусКонтекстногоМеню = 0;
	ПредыдущийЭлемент = Неопределено;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаКИ.Вид, "ИмяПредопределенныхДанных");
			Поз = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВидТЧ = Неопределено;
			
			Для Каждого СтрокаТабличнойЧастиКИ Из СтрокаКИ.Строки Цикл
				
				ВидТЧ = СтрокаТабличнойЧастиКИ.Вид;
				
				Если ВидТЧ <> ПредыдущийВидТЧ Тогда
					
					ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
					
					Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧастиКИ.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧастиКИ.ИмяРеквизита;
					
					Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧастиКИ.Тип) Тогда
						Элемент.КнопкаВыбора = Истина;
						Если ВидТЧ.РедактированиеТолькоВДиалоге Тогда
							Элемент.РедактированиеТекста = Ложь;
						КонецЕсли;
						
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
					КонецЕсли;
					Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
					
					Если ВидТЧ.ОбязательноеЗаполнение Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
					
					ЭтоНовыйВидКИ      = (СтрокаКИ.Вид <> ПредыдущийВид);
					
					ДобавитьОписаниеЭлемента(Форма, СтрокаТабличнойЧастиКИ.ИмяРеквизита, 2);
					ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧастиКИ, ДанныеВидовКонтактнойИнформации, Ложь, Ложь, Истина, ИмяЭлементаДляРазмещения);
					ПредыдущийВидТЧ = ВидТЧ;
					
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиКИ.ИдентификаторСтроки);
				
				СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
				
				Если СтрокиТаблицы.Количество() = 1 Тогда
					
					СтрокаТаблицы = СтрокиТаблицы[0];
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита] = СтрокаТабличнойЧастиКИ.Представление;
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита + "ЗначенияПолей"] = СтрокаТабличнойЧастиКИ.ЗначенияПолей;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ИндексЭлемента = СозданныеЭлементы.Найти(СтрокаКИ.Вид);
		СтатическийЭлемент = ИндексЭлемента <> Неопределено;
		
		ЭтоНовыйВидКИ = (СтрокаКИ.Вид <> ПредыдущийВид);
		
		Если ОтложеннаяИнициализация Тогда
			
			ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ДанныеВидовКонтактнойИнформации, ЭтоНовыйВидКИ,, СтатическийЭлемент, ИмяЭлементаДляРазмещения);
			Если СтатическийЭлемент Тогда
				СозданныеЭлементы.Удалить(ИндексЭлемента);
			КонецЕсли;
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ДанныеВидовКонтактнойИнформации, ЭтоНовыйВидКИ,, НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация, ИмяЭлементаДляРазмещения);
		
		Если СтатическийЭлемент Тогда
			
			СозданныеЭлементы.Удалить(ИндексЭлемента);
			
		Иначе
			
			СледующаяСтрока = ?(СозданныеЭлементы.Количество() = 0, Неопределено,
					КонтактнаяИнформация.Получить(КонтактнаяИнформация.Индекс(СтрокаКИ) + 1));
			Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
				ДобавитьСтрокуКонтактнойИнформации(Форма, СтрокаКИ, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ, КоличествоАдресов, СледующаяСтрока, ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
			ПредыдущийВид = СтрокаКИ.Вид;
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	Если Не ОтложеннаяИнициализация И Параметры.СписокДобавляемыхЭлементов.Количество() > 0 Тогда
		
		ГруппаКоманды = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода"+ИмяЭлементаДляРазмещения,
		Форма, ГруппаПолейВвода_1, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
		ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		
		ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = НСтр("ru='Добавить дополнительное поле контактной информации';en='Add an additional contact information field'");
		Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Команда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
		Кнопка.Заголовок = НСтр("ru='Добавить';en='Upload'");
		// +CRM
		Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		Кнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		Кнопка.Картинка = БиблиотекаКартинок.CRM_ПлюсГолубой;
		// -CRM
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Кнопка.ИмяКоманды = ИмяКоманды;
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		
	КонецЕсли;
	
	ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения);
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПриЧтенииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПервыйЗапуск = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" И ТипЗнч(Форма.ПараметрыКонтактнойИнформации) = Тип("Структура") Тогда
			ПервыйЗапуск = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	// +CRM
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	// -CRM
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	
	ИмяЭлементаДляРазмещения = Параметры.ГруппаДляРазмещения;
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(Параметры.ПоложениеЗаголовка), ПредопределенноеЗначение(Параметры.ПоложениеЗаголовка), ПоложениеЗаголовкаЭлементаФормы.Лево);
	ВыполненаОтложеннаяИнициализация = Параметры.ВыполненаОтложеннаяИнициализация;
	ОтложеннаяИнициализация = Параметры.ОтложеннаяИнициализация И Не ВыполненаОтложеннаяИнициализация;
	
	// +CRM
	//ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Если (ИмяОбъектаМетаданных = "Партнеры") Тогда
		ГруппаВидовКИ = Новый Массив();
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"Компания"]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"ЧастноеЛицо"]);
		
		ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ГруппаВидовКИ, "Используется");
	Иначе
		ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	КонецЕсли;
	// -CRM
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		МассивУдаляемыхРеквизитов = Параметры.ДобавленныеРеквизиты;
	Иначе
		УдалитьКомандыИЭлементыФормы(Форма, ИмяЭлементаДляРазмещения);
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		
		СтатическиеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.ИсключаемыеВиды);
		ИменаТабличныхЧастейПоВидамКИ = Неопределено;
		
		Для Каждого РеквизитФормы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
				
				Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
					Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
					ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор , "Вид");
					ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
				КонецЕсли;
				
				ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[РеквизитФормы.Вид];
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита);
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита + "ЗначенияПолей");
				
			Иначе
				
				Индекс = СтатическиеРеквизиты.Найти(РеквизитФормы.Вид);
				
				Если Индекс = Неопределено Тогда // Реквизит создается динамически.
					Если Не ОтложеннаяИнициализация Тогда
						МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
					КонецЕсли;
				Иначе
					СтатическиеРеквизиты.Удалить(Индекс);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	КонецЕсли;
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, Параметры.ИсключаемыеВиды, ОтложеннаяИнициализация);
	Параметры.ВыполненаОтложеннаяИнициализация = ВыполненаОтложеннаяИнициализация;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//    Отказ - Булево - Отказ.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок = 0;
	ПредыдущийВид = Неопределено;
	
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		Комментарий   = СтрокаТаблицы.Комментарий;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор , "Вид");
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Представление = СтрокаТабличнойЧастиФормы[ИмяРеквизита];
				Поле = "Объект." + ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧастиФормы.НомерСтроки - 1) + "]." + ИмяРеквизита;
				
				Если ОбязательноеЗаполнение И ПустаяСтрока(Представление) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Поле ""%1"" не заполнено.';en='The field ""%1"" is not filled in.'"), ВидИнформации.Наименование),,Поле);
					ТекущийУровеньОшибок = 2;
					
				Иначе
					
					ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
					
					ТекущийУровеньОшибок = УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации,
					ТипИнформации, ИмяРеквизита, , Поле);
					
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = ЗначенияПолей;
					
				КонецЕсли;
				
				УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
				
			КонецЦикла;
			
		Иначе
			
			ЭлементФормы = Форма.Элементы.Найти(ИмяРеквизита);
			Если ЭлементФормы = Неопределено Тогда
				Продолжить; // Элемент не был создан. Не была вызвана отложенная инициализация.
			КонецЕсли;
			
			Представление = Форма[ИмяРеквизита];
			
			// +CRM		
			Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница 
			И Представление = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
				Представление = "";
			ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес 
			И Представление = "<адрес не указан>" Тогда
				Представление = "";
			КонецЕсли;
			// -CRM
			
			Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление)
				И Не ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Форма, СтрокаТаблицы, ВидИнформации) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Поле ""%1"" не заполнено.';en='The field ""%1"" is not filled in.'"), ВидИнформации.Наименование),,, ИмяРеквизита);
				ТекущийУровеньОшибок = 2;
				
			Иначе
				
				ТекущийУровеньОшибок = ПроверитьЗаполнениеКонтактнойИнформации(Представление, СтрокаТаблицы.Значение,
					ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
	
				
			КонецЕсли;
			
			УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриСозданииНаСервере.
//  Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - Форма объекта-владельца, предназначенная для вывода контактной
//  	информации.
//  Объект	 - Произвольный		 - Объект-владелец контактной информации.
//  Отказ	 - Булево			 - Признак отказа от записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	Объект.КонтактнаяИнформация.Очистить();
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	// +CRM
	//ГруппаВидовКонтактнойИнформации = ГруппаВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных);
	ГруппыВидовКонтактнойИнформации = ГруппыВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных);
	// -CRM
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		
		// +CRM
		Если ЗначениеЗаполнено(ИмяРеквизита) И СтрокаТаблицы.Комментарий = "Не выводить" Тогда
			Продолжить;
		КонецЕсли;
		
		CRM_ОсновнойДляСвязи = СтрокаТаблицы.CRM_ОсновнойДляСвязи;
		// +СофтФон
		сфпВремяЗадержкиНабораДобавочногоНомера = СтрокаТаблицы.сфпВремяЗадержкиНабораДобавочногоНомера;
		// -СофтФон
		// -CRM
		
		Если НЕ Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
			Элемент = Форма.Элементы[СтрокаТаблицы.ИмяРеквизита];
			Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
				Если ПустаяСтрока(СтрокаТаблицы.Представление)
					ИЛИ СтрокаТаблицы.Представление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВосстановитьПустыеЗначениеПредставление(СтрокаТаблицы);
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор, "Вид");
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъектаМетаданных);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				ИдентификаторСтроки = СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				Значение = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "Значение"];
				
				// +CRM
				//ЗаписатьКонтактнуюИнформацию(Объект, Значение, ВидИнформации, ТипИнформации, ИдентификаторСтроки);
				ЗаписатьКонтактнуюИнформацию(Объект, Значение, ВидИнформации, ТипИнформации, ИдентификаторСтроки, CRM_ОсновнойДляСвязи);
				// -CRM
				
			КонецЦикла;

		Иначе
			// +CRM
			//Если ВидИнформации.Родитель <> ГруппаВидовКонтактнойИнформации Тогда
			Если ГруппыВидовКонтактнойИнформации.Найти(ВидИнформации.Родитель) = Неопределено Тогда
			// -CRM
				Продолжить;
			КонецЕсли;
			
			ДействуетС = ?(СтрокаТаблицы.Свойство("ДействуетС"), СтрокаТаблицы.ДействуетС, Неопределено);
			// +CRM
			//ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.Значение, ВидИнформации, ТипИнформации,, ДействуетС);
			ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.Значение, ВидИнформации, ТипИнформации, , ДействуетС, CRM_ОсновнойДляСвязи, сфпВремяЗадержкиНабораДобавочногоНомера);
			// -CRM
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму, обновляя данные.
//  Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//  Форма		 - УправляемаяФорма	 - Форма объекта-владельца, предназначенная для вывода контактной информации.
//  Объект		 - Произвольный		 - Объект-владелец контактной информации.
//  Результат	 - Произвольный		 - Необязательный служебный реквизит, полученный из предыдущего обработчика события.
// 
// Возвращаемое значение:
//  Неопределено - Неопределено.
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		ИзменитьКомментарий(Форма, Результат.ИмяРеквизита, Результат.ИмяЭлементаДляРазмещения);
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, Результат.ИмяЭлементаДляРазмещения);
	ИначеЕсли Результат.Свойство("ПоменятьМестамиЭлементы") Тогда
		
		Отбор = Новый Структура("ИмяРеквизита", Результат.ПервыйЭлемент);
		ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		ПервыйЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		Отбор = Новый Структура("ИмяРеквизита", Результат.ВторойЭлемент);
		ВторойЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		
		СписокПереносимыхСвойств = "Комментарий,Представление,Значение";
		ВременныйБуфер = Новый Структура(СписокПереносимыхСвойств);
		
		ЗаполнитьЗначенияСвойств(ВременныйБуфер, ПервыйЭлемент);
		ЗаполнитьЗначенияСвойств(ПервыйЭлемент, ВторойЭлемент, СписокПереносимыхСвойств);
		ЗаполнитьЗначенияСвойств(ВторойЭлемент, ВременныйБуфер);
		
		Форма[Результат.ПервыйЭлемент] = ПервыйЭлемент.Представление;
		Форма[Результат.ВторойЭлемент] = ВторойЭлемент.Представление;
		
		Форма.Элементы[Результат.ПервыйЭлемент].РасширеннаяПодсказка.Заголовок = ПервыйЭлемент.Комментарий;
		Форма.Элементы[Результат.ВторойЭлемент].РасширеннаяПодсказка.Заголовок = ВторойЭлемент.Комментарий;
		
	КонецЕсли;
	
	Если Результат.Свойство("ОбновитьКонтекстноеМеню") Тогда
		Если Результат.Свойство("ИмяЭлементаДляРазмещения") Тогда
			ОбновитьКонтекстноеМеню(Форма, Результат.ИмяЭлементаДляРазмещения);
			
			Если Результат.Свойство("ИмяРеквизита") Тогда
				ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
				Отбор = Новый Структура("ИмяРеквизита", Результат.ИмяРеквизита);
				НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(НайденнаяСтрока.Значение) Тогда
					КонтактнаяИнформацияПоПолям = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(НайденнаяСтрока.Значение);
					КонтактнаяИнформацияПоПолям.Comment = ?(Результат.Свойство("Комментарий"), Результат.Комментарий, "");
					НайденнаяСтрока.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Для каждого ИмяЭлементаРазмещения Из Форма.ПараметрыКонтактнойИнформации Цикл
				ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаРазмещения.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Записывает контактную информацию из XML в поля табличной части Контактная информация объекта.
//
// Параметры:
//  Объект				 - ЛюбаяСсылка						 - номер телефона или факса.
//  ЗначенияПолей		 - Строка							 - контактная информация в формате XML.
//  ВидИнформации		 - Справочник.ВидыКонтактнойИнформация	 - ссылка на вид контактной информации.
//  ТипИнформации		 - Перечисление.ТипыКонтактнойИнформация - тип контактной информации.
//  ИдентификаторСтроки	 - Число								 - идентификатор строки табличной части.
//  Дата				 - Дата									 - Дата с которой действует запись контактной информации,
//  									используется при хранение истории изменения контактной информации.
//  CRM_ОсновнойДляСвязи - Булево								 - Основной для связи.
//
Процедура ЗаписатьКонтактнуюИнформацию(Объект, Знач Значение, ВидИнформации, ТипИнформации, ИдентификаторСтроки = 0, Дата = Неопределено, CRM_ОсновнойДляСвязи = Ложь, сфпВремяЗадержкиНабораДобавочногоНомера = 0) Экспорт
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Значение) Тогда
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Значение, ТипИнформации);
	Иначе
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(Значение, ТипИнформации);
	КонецЕсли;
	
	Если Не УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Представление = ОбъектКИ.Value;
	НоваяСтрока.Значение      = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ОбъектКИ);
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(ОбъектКИ, ТипИнформации);
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	// +CRM
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи", Объект.Ссылка.Метаданные(), "КонтактнаяИнформация") Тогда
		НоваяСтрока.CRM_ОсновнойДляСвязи = CRM_ОсновнойДляСвязи;
	КонецЕсли;
	// +СофтФон
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("сфпВремяЗадержкиНабораДобавочногоНомера", Объект.Ссылка.Метаданные(), "КонтактнаяИнформация") Тогда
		НоваяСтрока.сфпВремяЗадержкиНабораДобавочногоНомера = сфпВремяЗадержкиНабораДобавочногоНомера;
	КонецЕсли;
	// -СофтФон
	// -CRM
	Если ЗначениеЗаполнено(Дата) Тогда
		НоваяСтрока.ДействуетС    = Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов ТЧ.
	ЗаполнитьТехническиеПоляКонтактнойИнформации(НоваяСтрока, ОбъектКИ, ТипИнформации);
	
КонецПроцедуры

// Выполняет отложенную инициализацию реквизитов и элементов контактной информации.
//
// Параметры:
//  Форма                    - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//  Объект                   - Произвольный - Объект-владелец контактной информации.
//  ИмяЭлементаДляРазмещения - Строка - Имя группы где размещена контактная информация.
//
Процедура ВыполнитьОтложеннуюИнициализацию(Форма, Объект, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	
	КонтактнаяИнформацияЗаглушка = Форма.Элементы.Найти("КонтактнаяИнформацияЗаглушка"); // временный элемент
	Если КонтактнаяИнформацияЗаглушка <> Неопределено Тогда
		Форма.Элементы.Удалить(КонтактнаяИнформацияЗаглушка);
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(, "Вид, Представление, Значение, Комментарий");
	Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка), ПредопределенноеЗначение(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка), ПоложениеЗаголовкаЭлементаФормы.Лево);
	// +CRM
	//ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, ПараметрыКонтактнойИнформации.ИсключаемыеВиды);
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, ПараметрыКонтактнойИнформации.ИсключаемыеВиды,, ПараметрыКонтактнойИнформации["ВыводитьВОднуКолонку"]);
	// -CRM
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	Для Каждого ВидКонтактнойИнформации Из ПараметрыКонтактнойИнформации.ИсключаемыеВиды Цикл
		
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
		МассивСтрок = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			СохраненноеЗначение = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор)[0];
			ТекущееЗначение = МассивСтрок[0];
			ЗаполнитьЗначенияСвойств(ТекущееЗначение, СохраненноеЗначение);
			Форма[ТекущееЗначение.ИмяРеквизита] = СохраненноеЗначение.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.Элементы.Найти("ПустаяДекорацияКонтактнаяИнформация") <> Неопределено Тогда
		Форма.Элементы.ПустаяДекорацияКонтактнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации.ВыполненаОтложеннаяИнициализация = Истина;
	
КонецПроцедуры

#КонецОбласти //ПрограммныйИнтерфейс


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация элементов на форме объект-владельца контактной информации.

Процедура ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, Приоритет, ЭтоКоманда = Ложь, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяЭлемента, Приоритет, ЭтоКоманда);
	
КонецПроцедуры

Процедура УдалитьОписаниеЭлемента(Форма, ИмяЭлемента, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ДобавленныеЭлементы = ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	НайденнаяСтрока = ДобавленныеЭлементы.НайтиПоЗначению(ИмяЭлемента);
	ДобавленныеЭлементы.Удалить(НайденнаяСтрока);
	
КонецПроцедуры

Функция ЗаголовокСлева(Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		ПоложениеЗаголовкаКИ = ПредопределенноеЗначение(ПоложениеЗаголовкаКИ);
	Иначе
		ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево;
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Процедура ИзменитьКомментарий(Форма, ИмяРеквизита, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	Если ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(НайденнаяСтрока.Значение) Тогда
		КонтактнаяИнформацияПоПолям = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(НайденнаяСтрока.Значение);
		КонтактнаяИнформацияПоПолям.Comment = НайденнаяСтрока.Комментарий;
		НайденнаяСтрока.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
	КонецЕсли;
	
	ПолеВвода = Форма.Элементы.Найти(ИмяРеквизита);
	ПолеВвода.РасширеннаяПодсказка.Заголовок = НайденнаяСтрока.Комментарий;
		
КонецПроцедуры

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ = Ложь, КоличествоАдресов = Неопределено, СледующаяСтрока = Неопределено, ЕстьОсновнойДляСвязи = Ложь)
	ДобавлениеНовогоЗначения = ТипЗнч(Результат) = Тип("Структура");
	
	Если ДобавлениеНовогоЗначения Тогда
		ДобавляемыйВид = Результат.ДобавляемыйВид;
		Если ТипЗнч(ДобавляемыйВид)= Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ИнформацияОВидеКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавляемыйВид, "Тип, Наименование, РедактированиеТолькоВДиалоге, ВидПоляДругое");
		Иначе
			ИнформацияОВидеКИ = ДобавляемыйВид;
			ДобавляемыйВид    = ДобавляемыйВид.Ссылка;
		КонецЕсли;
		// +CRM
		ИнформацияОВидеКИ.Вставить("CRM_ОсновнойДляСвязи", Ложь);
		
		Попытка
			
			ТаблицаКонтактнойИнформацииФормы = Форма.Объект.КонтактнаяИнформация.Выгрузить();
			
			ЕстьОсновнойДляСвязи = ТаблицаКонтактнойИнформацииФормы.Колонки.Найти("CRM_ОсновнойДляСвязи") <> Неопределено;
			
		Исключение
		КонецПопытки;	
		// -CRM
	Иначе
		ИнформацияОВидеКИ = Результат;
		ДобавляемыйВид    = Результат.Вид;
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	ОтборПоВиду = Новый Структура("Вид, ЭтоИсторическаяКонтактнаяИнформация", ДобавляемыйВид, Ложь);
	
	Если ДобавлениеНовогоЗначения Тогда
		
		НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
		
		КоличествоСтрокВида = НайденныеСтроки.Количество();
		Если КоличествоСтрокВида > 0 Тогда
			ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоСтрокВида - 1);
			ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
		Иначе
			ИндексДобавляемойСтроки = 0;
		КонецЕсли;
		
		ЭтоПоследняяСтрока = Ложь;
		Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
			ЭтоПоследняяСтрока = Истина;
		Иначе
			ИмяСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].ИмяРеквизита;
		// +CRM
			ТипСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].Тип;
		// -CRM
		КонецЕсли;
		// +CRM
		ЭтоПоследняяСтрокаКолонки = Ложь;
		Если ЭтоПоследняяСтрока Тогда
			ЭтоПоследняяСтрокаКолонки = Истина;
		Иначе
			ЭтоПоследняяСтрокаКолонки = (НЕ ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Колонка = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].Колонка);
		КонецЕсли;
		// -CRM
		НоваяСтрока = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
		
		НеУникальноеИмяРеквизита = Истина;
		
		ДобавляемыйВидУникальныйИдентификатор = СтрЗаменить(ДобавляемыйВид.УникальныйИдентификатор(), "-", "x");
		
		НомерНовогоРеквизита = КоличествоСтрокВида + 1;
		
		ОтборПоИмениРеквизита = Новый Структура;
		
		Пока НеУникальноеИмяРеквизита Цикл
			
			ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
				"КонтактнаяИнформацияПоле",
				ДобавляемыйВидУникальныйИдентификатор,
				НомерНовогоРеквизита);
				
			ОтборПоИмениРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
					
			Если ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоИмениРеквизита).Количество() > 0 Тогда
					
				НомерНовогоРеквизита = НомерНовогоРеквизита + 1;
					
			Иначе
				
				НеУникальноеИмяРеквизита = Ложь;
			
			КонецЕсли;				
				
		КонецЦикла;				
				
		НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		НоваяСтрока.Вид = ДобавляемыйВид;
		НоваяСтрока.Тип = ИнформацияОВидеКИ.Тип;
		НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Ложь;
		НоваяСтрока.ИмяЭлементаДляРазмещения  = ИмяЭлементаДляРазмещения;
		// +CRM
		НоваяСтрока.CRM_ОсновнойДляСвязи = Ложь;
		НоваяСтрока.Выводить = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Выводить;
		НоваяСтрока.Родитель = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Родитель;
		НоваяСтрока.Колонка  = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Колонка;
		// -CRM
		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), , ИнформацияОВидеКИ.Наименование, Истина));
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		ЕстьКомментарий = Ложь;
		ОбязательноеЗаполнение = Ложь;
	Иначе
		ЭтоПоследняяСтрока = СледующаяСтрока = Неопределено;
		Если Не ЭтоПоследняяСтрока Тогда
			ИмяСледующегоРеквизита = СледующаяСтрока.ИмяРеквизита;
			// +CRM
			ТипСледующегоРеквизита = СледующаяСтрока.Тип;
			// -CRM
		КонецЕсли;
		// +CRM
		ЭтоПоследняяСтрокаКолонки = Ложь;
		Если ЭтоПоследняяСтрока Тогда
			ЭтоПоследняяСтрокаКолонки = Истина;
		КонецЕсли;
		// -CRM
		ИмяРеквизита = ИнформацияОВидеКИ.ИмяРеквизита;
		ЕстьКомментарий = ЗначениеЗаполнено(ИнформацияОВидеКИ.Комментарий);
		ОбязательноеЗаполнение = ИнформацияОВидеКИ.ОбязательноеЗаполнение;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	ЗаголовокСлева = ЗаголовокСлева(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка);
	
	// Отрисовка на форме
	// +CRM
	Если Форма.Элементы.Найти("ГруппаОсновнойДляСвязиКонтактнойИнформации_2") = Неопределено Тогда
		НомерВторойКолонки = "1";
	Иначе
		НомерВторойКолонки = "2";
	КонецЕсли;
	Если ЕстьОсновнойДляСвязи Тогда
		Если (ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) ИЛИ (ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			ИЛИ (ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
			ГруппаОсновнойДляСвязи = Форма.Элементы.ГруппаОсновнойДляСвязиКонтактнойИнформации_1;
		Иначе
			ГруппаОсновнойДляСвязи = Форма.Элементы["ГруппаОсновнойДляСвязиКонтактнойИнформации_" + НомерВторойКолонки];
		КонецЕсли;
	
		Если ЭтоПоследняяСтрокаКолонки Тогда
			ДобавитьЭлементОсновнойДляСвязи(Форма, ИнформацияОВидеКИ.CRM_ОсновнойДляСвязи, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаОсновнойДляСвязи, ЗаголовокСлева, ЭтоНовыйВидКИ);
		Иначе	
			ДобавитьЭлементОсновнойДляСвязи(Форма, ИнформацияОВидеКИ.CRM_ОсновнойДляСвязи, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаОсновнойДляСвязи, ЗаголовокСлева, ЭтоНовыйВидКИ, , ИмяСледующегоРеквизита);
		КонецЕсли;
	КонецЕсли;
	// -CRM
	Если ЗаголовокСлева Тогда
		// +CRM
		//ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
		Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации_1;
		Иначе
			ГруппаЗаголовков = Форма.Элементы["ГруппаЗаголовковКонтактнойИнформации_" + НомерВторойКолонки];
		КонецЕсли;
		// -CRM
		Заголовок = Заголовок(Форма, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаЗаголовков, ИнформацияОВидеКИ.Наименование, ЭтоНовыйВидКИ, ЕстьКомментарий);
		
		Если Не ЭтоПоследняяСтрока Тогда
			СледующийЗаголовок = Форма.Элементы["Заголовок" + ИмяСледующегоРеквизита];
			Форма.Элементы.Переместить(Заголовок, ГруппаЗаголовков, СледующийЗаголовок);
		КонецЕсли;
	КонецЕсли;
	// +CRM
	//ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации_1;
	Иначе
		ГруппаПолейВвода = Форма.Элементы["ГруппаПолейВводаКонтактнойИнформации_" + НомерВторойКолонки];
	КонецЕсли;
	//ПолеВвода = ПолеВвода(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ЭтоНовыйВидКИ, ОбязательноеЗаполнение);
	ПолеВвода = ПолеВвода(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ, ОбязательноеЗаполнение, ГруппаПолейВвода);
	// -CRM
	
	Если Не ЭтоПоследняяСтрока Тогда
		
		Если СледующаяСтрока = Неопределено Тогда
			
			ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
			
			Если Форма.Элементы.Найти(ИмяСледующегоЭлемента) <> Неопределено Тогда
				ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
				СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
			КонецЕсли;
		Иначе
			
			СледующийЭлемент = Форма.Элементы[СледующаяСтрока.ИмяРеквизита];
			
		КонецЕсли;
		// +CRM
		//Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		Если НЕ ЭтоПоследняяСтрокаКолонки Тогда
			Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		ИначеЕсли ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации_1 Тогда
			ГруппаДобавить = Форма.Элементы.Найти("ГруппаКонтактнаяИнформацияДобавитьПолеВводаГруппаКонтактнаяИнформация");
			Если ГруппаДобавить<>Неопределено Тогда
				Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, ГруппаДобавить);
			КонецЕсли;
		КонецЕсли;
		// -CRM
	КонецЕсли;
	// +CRM
	//ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации_1;
	Иначе
		ГруппаДействий = Форма.Элементы["ГруппаДействийКонтактнойИнформации_" + НомерВторойКолонки];
	КонецЕсли;
	// -CRM
	Если КоличествоАдресов = Неопределено Тогда
		ОтборПоТипу = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоТипу).Количество();
	КонецЕсли;
	// +CRM
	//ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
	ИмяДействия_1 = "";
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		// Отправить E-mail
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "ОтправитьEmail";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		// Редактировать адрес сайта
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "РедактироватьАдресСайтаКомпании";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		// Редактировать адрес
		//ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "РедактироватьАдресКомпании";
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
		
		//Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		//	// Открыть адрес на интернет карте.
		//	ИмяДействия_1 = "Команда" + ИмяСледующегоРеквизита + "ОткрытьАдресНаИнтернетКарте";
		//КонецЕсли;
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		// Отправить СМС
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "ОтправитьСМСНаНомер";
		
		// Позвонить
		ИмяДействия_1 = "Команда" + ИмяСледующегоРеквизита + "ПозвонитьНаНомер";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		// Позвонить
		ИмяДействия_1 = "Команда" + ИмяСледующегоРеквизита + "ПозвонитьНаНомер";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		// Редактировать прочее
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "РедактироватьПрочее";
	КонецЕсли;
	ИмяСледующегоДействия_1 = "";
	// -CRM
	ИмяСледующегоДействия = "Команда" + ИмяСледующегоРеквизита;
	
	// Выводим комментарий
	Если ЕстьКомментарий Тогда
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок              = ИнформацияОВидеКИ.Комментарий;
		ПолеВвода.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
		ПолеВвода.РасширеннаяПодсказка.МаксимальнаяШирина     = ПолеВвода.Ширина;
		ПолеВвода.РасширеннаяПодсказка.Ширина                 = ПолеВвода.Ширина;
		
	КонецЕсли;
	
	// Заглушка , если заголовок у поля сверху.
	Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
		
		ИмяДекорации = "ДекорацияВерх" + ИмяРеквизита;
		Декорация = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаДействий);
		Декорация.Высота = 1;
		ДобавитьОписаниеЭлемента(Форма, ИмяДекорации, 1);
		
	КонецЕсли;
	
	//Действие = Действие(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий);
	Действие = СоздатьДействие(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий, ИмяЭлементаДляРазмещения);
	
	Если Не ЭтоПоследняяСтрока Тогда
		// +CRM
		Если НЕ ЭтоПоследняяСтрокаКолонки Тогда
			СледующееДействие = Форма.Элементы.Найти(ИмяСледующегоДействия);
			Если СледующееДействие = Неопределено Тогда
				СледующееДействие = Форма.Элементы.Найти(СтрЗаменить(ИмяСледующегоДействия, "Команда", "КоманднаяПанель"));
			КонецЕсли;
			Если СледующееДействие <> Неопределено Тогда
				Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
			КонецЕсли;
		КонецЕсли;	
		Если НЕ ИмяСледующегоДействия_1 = "" Тогда
			СледующееДействие = Форма.Элементы[ИмяСледующегоДействия_1];
			Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
		КонецЕсли;
		// -CRM
	КонецЕсли;
	
	Если Не ЭтоНовыйВидКИ Тогда
		Если ТаблицаКонтактнойИнформации.Количество() > 1 И ТаблицаКонтактнойИнформации[0].Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
			ПунктКонтекстногоМенюПеремещения(ПолеВвода, Форма, 1);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ПредыдущаяСтрока = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 2);
				ПунктКонтекстногоМенюПеремещения(Форма.Элементы[ПредыдущаяСтрока.ИмяРеквизита], Форма, - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлениеНовогоЗначения Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
		
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
				Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, Наименование, ЭтоНовыйВидКИ = Ложь, ЕстьКомментарий = Ложь)
	
	ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ГруппаЗаголовков);
	Элемент.Заголовок = ?(ЭтоНовыйВидКИ, Наименование + ":", "");
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		// +CRM
		//Элемент.Высота = 5;
		// -CRM
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	Иначе
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	Если ЕстьКомментарий Тогда
		
		//ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
		//Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
		//ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолеВвода(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь, Родитель = Неопределено)
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	ЗаголовокСлева = ЗаголовокСлева(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка);
	
	// добавим заголовок, иначе элементы не выравниваются
	
	Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
		
		ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
		Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ?(Родитель=Неопределено,Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации,Родитель));
		Элемент.Заголовок = ИнформацияОВидеКИ.Наименование + ":";
		Элемент.Высота = 1;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	КонецЕсли; 
	
	// +CRM
	//Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации);
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ?(Родитель=Неопределено,Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации,Родитель));
	// -CRM
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева Или Не ЭтоНовыйВидКИ, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Верх);
	//Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Если ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.Гиперссылка = Истина;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
	Иначе
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ЦветРамки = Новый Цвет(221,221,221);
		Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяРеквизита, 2);
	
	// Устанавливаем свойства поля ввода.
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		// +CRM
		//Если ИнформацияОВидеКИ.Вид.МногострочноеПоле Тогда
		//	Элемент.Высота = 5;
		//	Элемент.МногострочныйРежим = Истина;
		//Иначе
		//	Элемент.Высота = 1;
		//	Элемент.МногострочныйРежим = Ложь;
		//КонецЕсли;
		//Элемент.РастягиватьПоВертикали = Ложь;
		// -CRM
	Иначе
		
		// Ввод комментария через контекстное меню.
		ИмяКоманды = "КонтекстноеМеню" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru='Ввести комментарий';en='Enter a comment'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = НСтр("ru='Ввести комментарий';en='Enter a comment'");
		Команда.Картинка = БиблиотекаКартинок.Комментарий;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	// +CRM
	//Если ИнформацияОВидеКИ.ХранитьИсториюИзменений Тогда
	Если ТипЗнч(ИнформацияОВидеКИ) = Тип("СтрокаДереваЗначений") Тогда
		ХранитьИсториюИзменений = ИнформацияОВидеКИ.ХранитьИсториюИзменений;
	ИначеЕсли ИнформацияОВидеКИ.Свойство("ХранитьИсториюИзменений") Тогда
		ХранитьИсториюИзменений = ИнформацияОВидеКИ.ХранитьИсториюИзменений;
	Иначе
		ХранитьИсториюИзменений = Ложь;
	КонецЕсли;
	Если ХранитьИсториюИзменений Тогда
	// -CRM
		// Вывод истории контактной информации через контекстное меню.
		ИмяКоманды = "КонтекстноеМенюИстория" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru='История изменений...';en='Change history...'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.ИсторияИзменений;
		Команда.Подсказка = НСтр("ru='Показывает историю изменения контактной информации';en='Shows change history for contact information'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Ложь;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ИмяКоманды = "КонтекстноеМенюКартаЯндекс" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru='Адрес на Яндекс.Картах';en='Address on Yandex.Maps'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.ЯндексКарты;
		Команда.Подсказка = НСтр("ru='Показывает адрес на картах Яндекс.Карты';en='Shows address on Yandex.Maps'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
		ИмяКоманды = "КонтекстноеМенюКартаGoogle" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru='Адрес на Google Maps';en='Address on Google Maps'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.GoogleMaps;
		Команда.Подсказка = НСтр("ru='Показывает адрес на карте Google Maps';en='Shows address on Google Maps'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);

		ГруппКнопокРазделитель = Форма.Элементы.Добавить("ПодменюРазделительКарты" + ИмяРеквизита, Тип("ГруппаФормы"), Элемент.КонтекстноеМеню);
		ГруппКнопокРазделитель.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		Если Не ИнформацияОВидеКИ.ПометкаУдаления Тогда
			// Заполнить
			ГруппаПодменюАдреса = Форма.Элементы.Добавить("КонтекстноеПодменюКопироватьАдреса" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппКнопокРазделитель);
			ГруппаПодменюАдреса.Вид = ВидГруппыФормы.Подменю;
			ГруппаПодменюАдреса.Отображение = ОтображениеКнопки.Текст;
			ГруппаПодменюАдреса.Заголовок = НСтр("ru='Заполнить'");
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ИнформацияОВидеКИ.Тип) 
		И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		
			Элемент.КнопкаВыбора = Истина;
			
			Если ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
				Элемент.РедактированиеТекста = Ложь;
				Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
			КонецЕсли;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			
	КонецЕсли;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	// +CRM
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Элемент.Вид			= ВидПоляФормы.ПолеНадписи;
		Элемент.Гиперссылка	= Истина;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании");
	КонецЕсли;
	
	Элемент.Высота = 1;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
	Если ИнформацияОВидеКИ.CRM_ОсновнойДляСвязи Тогда
		Элемент.Шрифт			= Новый Шрифт(Элемент.Шрифт, , , Истина, , , );
	КонецЕсли;	
	
	// -CRM
	
	Возврат Элемент;
	
КонецФункции

Процедура ПунктКонтекстногоМенюПеремещения(ПредыдущийЭлемент, Форма, Направление)
	
	Если Направление > 0 Тогда
		ИмяКоманды = "КонтекстноеМенюВверх" + ПредыдущийЭлемент.Имя;
	Иначе
		ИмяКоманды = "КонтекстноеМенюВниз" + ПредыдущийЭлемент.Имя;
	КонецЕсли;
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПредыдущийЭлемент.КонтекстноеМеню);
	
	Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	Если Направление > 0 Тогда 
		ТекстКоманды = НСтр("ru='Переместить вверх';en='Move upwards'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВверх;
	Иначе
		ТекстКоманды = НСтр("ru='Переместить вниз';en='Move downwards'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВниз;
	КонецЕсли;
	Кнопка.Заголовок = ТекстКоманды;
	Команда.Подсказка = ТекстКоманды;
	Кнопка.ИмяКоманды = ИмяКоманды;
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Кнопка.Доступность = Истина;
	ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);

КонецПроцедуры

Функция СоздатьДействие(Форма, ВидКонтактнойИнформации, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь, ИмяЭлементаДляРазмещения)
	
	Тип = ВидКонтактнойИнформации.Тип;
	СоздаватьДействиеДляТипа = Новый Соответствие();
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, ?(КоличествоАдресов > 1, Истина, Ложь));
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Факс, Истина);
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	Если СоздаватьДействиеДляТипа[Тип] = Истина Тогда
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ГруппаПодменюВерхнийУровень = Форма.Элементы.Добавить("КоманднаяПанель" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаДействий);
			ГруппаПодменюВерхнийУровень.Вид = ВидГруппыФормы.КоманднаяПанель;
			ГруппаПодменюВерхнийУровень.Высота = 1;
			ГруппаПодменю = Форма.Элементы.Добавить("Подменю" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаПодменюВерхнийУровень);
			ГруппаПодменю.Вид = ВидГруппыФормы.Подменю;
			ГруппаПодменю.Картинка = БиблиотекаКартинок.МенюДополнительныеФункции;
			ГруппаПодменю.Отображение = ОтображениеКнопки.Картинка;
			
			Действие = ГруппаПодменюВерхнийУровень;
			
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ГруппаПодменюВерхнийУровень.Имя, 2);
		Иначе
			ГруппаПодменю = ГруппаДействий;
			
			// Есть действие
			ИмяКоманды = "Команда" + ИмяРеквизита;
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаПодменю);
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			Элемент.Высота = 1;
			
			Действие = Элемент;
		КонецЕсли;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			Если Не ВидКонтактнойИнформации.ПометкаУдаления Тогда
				// Ввод комментария через контекстное меню.
				ИмяКоманды = "КонтекстноеМенюПодменю" + ИмяРеквизита;
				Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаПодменю);
				Кнопка.Заголовок = НСтр("ru = 'Ввести комментарий'");
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				Команда.Подсказка = НСтр("ru = 'Ввести комментарий'");
				Команда.Картинка = БиблиотекаКартинок.Комментарий;
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные = Истина;
				Кнопка.ИмяКоманды = ИмяКоманды;
				
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			КонецЕсли;
			
			// История изменений 
			Если ВидКонтактнойИнформации.ХранитьИсториюИзменений И Не ВидКонтактнойИнформации.ПометкаУдаления Тогда
				
				ИмяКоманды = "КонтекстноеМенюПодменюИстория" + ИмяРеквизита;
				Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаПодменю);
				Кнопка.Заголовок = НСтр("ru = 'История изменений...'");
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				Команда.Картинка = БиблиотекаКартинок.ИсторияИзменений;
				Команда.Подсказка = НСтр("ru = 'Показывает историю изменения контактной информации'");
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные = Ложь;
				Кнопка.ИмяКоманды = ИмяКоманды;
				
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			КонецЕсли;
			
			// Устанавливаем свойства поля ввода.
			ГруппаРазделитель = Форма.Элементы.Добавить("ПодменюРазделительАдрес" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаПодменю);
			ГруппаРазделитель.Вид = ВидГруппыФормы.ГруппаКнопок;
			
			ИмяКоманды = "КартаЯндексМеню" + ИмяРеквизита;
			Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделитель);
			Кнопка.Заголовок = НСтр("ru = 'Адрес на Яндекс.Картах'");
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			Команда.Картинка = БиблиотекаКартинок.ЯндексКарты;
			Команда.Подсказка = НСтр("ru = 'Показывает адрес на картах Яндекс.Карты'");
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			Кнопка.ИмяКоманды = ИмяКоманды;
			
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			
			ИмяКоманды = "КартаGoogleМеню" + ИмяРеквизита;
			Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделитель);
			Кнопка.Заголовок = НСтр("ru = 'Адрес на Google Maps'");
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			Команда.Картинка = БиблиотекаКартинок.GoogleMaps;
			Команда.Подсказка = НСтр("ru = 'Показывает адрес на карте Google Maps'");
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			Кнопка.ИмяКоманды = ИмяКоманды;
			
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			
			Если Не ВидКонтактнойИнформации.ПометкаУдаления Тогда
				
				ГруппаРазделитель = Форма.Элементы.Добавить("ПодменюРазделитель" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаРазделитель);
				ГруппаРазделитель.Вид = ВидГруппыФормы.ГруппаКнопок;
				
				ГруппаПодменюАдреса = Форма.Элементы.Добавить("ПодменюКопироватьАдреса" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаРазделитель);
				ГруппаПодменюАдреса.Вид = ВидГруппыФормы.Подменю;
				ГруппаПодменюАдреса.Отображение = ОтображениеКнопки.Текст;
				ГруппаПодменюАдреса.Заголовок = НСтр("ru='Заполнить'");
			
			КонецЕсли;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Изменить'");
			Команда.Подсказка = НСтр("ru = 'Изменить адрес сайта'");
			Команда.Картинка = БиблиотекаКартинок.CRM_Изменить;
			Команда.Действие = "Подключаемый_РедактироватьАдресСайтаКомпании";
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Написать письмо'");
			Команда.Подсказка = НСтр("ru = 'Написать письмо'");
			Команда.Картинка = БиблиотекаКартинок.CRM_ЭлектронноеПисьмоСоздать;
			Команда.Действие = "Подключаемый_ОтправитьEmail";
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Если Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].МожноОтправлятьSMS Тогда
				Элемент.Заголовок = НСтр("ru = 'Позвонить или отправить SMS'");
				Команда.Подсказка = НСтр("ru = 'Позвонить или отправить SMS'");
				Команда.Картинка = БиблиотекаКартинок.ПозвонитьИлиОтправитьSMS;
			Иначе
				Элемент.Заголовок = НСтр("ru = 'Позвонить'");
				Команда.Подсказка = НСтр("ru = 'Позвонить по телефону'");
				Команда.Картинка = БиблиотекаКартинок.CRM_ТелефонныйЗвонок;
				Команда.Действие = "Подключаемый_ПозвонитьНаНомер";
			КонецЕсли;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			Элемент.Заголовок = НСтр("ru = 'Позвонить'");
			Команда.Подсказка = НСтр("ru = 'Позвонить по телефону'");
			Команда.Картинка = БиблиотекаКартинок.CRM_ТелефонныйЗвонок;
			Команда.Действие = "Подключаемый_ПозвонитьНаНомер";
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
			Элемент.Заголовок = НСтр("ru = 'Skype'");
			Команда.Подсказка = НСтр("ru = 'Skype'");
			Команда.Картинка = БиблиотекаКартинок.Skype;
		КонецЕсли;
		
	// +CRM	
	Иначе
		Действие = Форма.Элементы.Добавить("ЗаглушкаДействия" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаДействий);
		Действие.Вид = ВидДекорацииФормы.Картинка;
		Действие.Высота = 1;
		Действие.Ширина = 1;
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить("ЗаглушкаДействия" + ИмяРеквизита, 2);
	// -CRM
	КонецЕсли;
	
	Возврат Действие;
	
КонецФункции

Функция Комментарий(Форма, Комментарий, ИмяКомментария, ГруппаДляРазмещения)
	
	Элемент = Форма.Элементы.Добавить(ИмяКомментария, Тип("ДекорацияФормы"), ГруппаДляРазмещения);
	Элемент.Заголовок = Комментарий;
	
	Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.РастягиватьПоВертикали  = Ложь;
	Элемент.ВертикальноеПоложение  = ВертикальноеПоложениеЭлемента.Верх;
	
	Элемент.Высота = 1;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяКомментария, 2);
	
	Возврат Элемент;
	
КонецФункции

Процедура ВосстановитьПустыеЗначениеПредставление(СтрокаКонтактнойИнформации)
	
	Если ПустаяСтрока(СтрокаКонтактнойИнформации.Тип) Тогда
		СтрокаКонтактнойИнформации.Тип = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ТипВидаКонтактнойИнформации(
			СтрокаКонтактнойИнформации.Вид);
	КонецЕсли;
	
	// ЗначенияПолей может отсутствовать в строке контактной информации
	СведенияПолей = Новый Структура("ЗначенияПолей", Неопределено);
	ЗаполнитьЗначенияСвойств(СведенияПолей, СтрокаКонтактнойИнформации);
	ЕстьЗначенияПолей = (СведенияПолей.ЗначенияПолей <> Неопределено);
	
	ПустоеПредставление = ПустаяСтрока(СтрокаКонтактнойИнформации.Представление);
	ПустоеЗначение      = ПустаяСтрока(СтрокаКонтактнойИнформации.Значение);
	ПустыеЗначенияПолей = ?(ЕстьЗначенияПолей, ПустаяСтрока(СведенияПолей.ЗначенияПолей), Истина);
	
	ВсеПоляПустые = ПустоеПредставление И ПустоеЗначение И ПустыеЗначенияПолей;
	ВсеПоляЗаполнены = Не ПустоеПредставление И Не ПустоеЗначение И НЕ ПустыеЗначенияПолей;
	
	Если ВсеПоляПустые Или ВсеПоляЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустоеПредставление Тогда
		
		ФорматКонтактнойИнформации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКонтактнойИнформации.Вид, 
			"Тип, ВключатьСтрануВПредставление, ПроверятьПоФИАС");
		ФорматКонтактнойИнформации.Вставить("ФорматАдреса", "ФИАС");
		
		ИсточникЗначений = ?(ПустыеЗначенияПолей, СтрокаКонтактнойИнформации.Значение, СтрокаКонтактнойИнформации.ЗначенияПолей);
		
		СтрокаКонтактнойИнформации.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(
			ИсточникЗначений, ФорматКонтактнойИнформации);
		
	КонецЕсли;
	
	Если ПустоеЗначение Тогда
		
		Если Не ПустоеПредставление И ПустыеЗначенияПолей Тогда
			
			АдресПоПолям = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(
				СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Тип);
			СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(АдресПоПолям);
			
			Если ЕстьЗначенияПолей Тогда
				СтрокаКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(
					СтрокаКонтактнойИнформации.Значение, СтрокаКонтактнойИнформации.Тип);
			КонецЕсли;
			
		ИначеЕсли Не ПустыеЗначенияПолей Тогда
			
			СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(СтрокаКонтактнойИнформации.ЗначенияПолей,
				СтрокаКонтактнойИнформации.Тип);
			
		КонецЕсли;
	
	ИначеЕсли ПустыеЗначенияПолей И ЕстьЗначенияПолей Тогда
		
		СтрокаКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКонтактнойИнформации.Значение,
			СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Вид);
			
	КонецЕсли;
	
КонецПроцедуры

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Родитель, Группировка, ПорядокУдаления) 
	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда
		Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = Группировка;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяГруппы, ПорядокУдаления);		
		
	КонецЕсли;
	
	Группа.Объединенная = Ложь;
	Группа.СквозноеВыравнивание = СквозноеВыравнивание.НеИспользовать;
	
	Возврат Группа;
	
КонецФункции

Процедура ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов)
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	СоздатьПараметрыКонтактнойИнформации = Истина;
	СоздатьТаблицуКонтактнойИнформации = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" Тогда
			СоздатьПараметрыКонтактнойИнформации = Ложь;
		ИначеЕсли Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			СоздатьТаблицуКонтактнойИнформации = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	// +CRM
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	// +СофтФон
	ОписаниеТипаЧисло2_0 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
	// -СофтФон
	// -CRM
	
	Если СоздатьТаблицуКонтактнойИнформации Тогда
		
		// Создадим таблицу значений
		ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлементаДляРазмещения", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("МеждународныйФорматАдреса", Новый ОписаниеТипов("Булево"), ИмяОписания));
		// +CRM
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Выводить",				 Новый ОписаниеТипов("Булево"),										ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Родитель",				 Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"),	ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_ОсновнойДляСвязи",	 Новый ОписаниеТипов("Булево"),										ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Колонка",					 ОписаниеТипаЧисло			,										ИмяОписания));
		// +СофтФон
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("сфпВремяЗадержкиНабораДобавочногоНомера", ОписаниеТипаЧисло2_0, ИмяОписания));
		// -СофтФон
		// -CRM
		
	Иначе
		РеквизитыТаблицы = Форма.ПолучитьРеквизиты("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов");
		РеквизитыДляСоздания = Новый Соответствие;
		РеквизитыДляСоздания.Вставить("ИмяЭлементаДляРазмещения",            Истина);
		РеквизитыДляСоздания.Вставить("ХранитьИсториюИзменений",             Истина);
		РеквизитыДляСоздания.Вставить("ДействуетС",                          Истина);
		РеквизитыДляСоздания.Вставить("ЭтоИсторическаяКонтактнаяИнформация", Истина);
		РеквизитыДляСоздания.Вставить("Значение",                            Истина);
		РеквизитыДляСоздания.Вставить("МеждународныйФорматАдреса",           Истина);
		
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			Если РеквизитыДляСоздания[Реквизит.Имя] <> Неопределено Тогда
				РеквизитыДляСоздания[Реквизит.Имя] = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если РеквизитыДляСоздания["Значение"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["МеждународныйФорматАдреса"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("МеждународныйФорматАдреса", Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ИмяЭлементаДляРазмещения"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлементаДляРазмещения", Строка500, ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ХранитьИсториюИзменений"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений", Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ДействуетС"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ЭтоИсторическаяКонтактнаяИнформация"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация", Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоздатьПараметрыКонтактнойИнформации Тогда
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыКонтактнойИнформации", Новый ОписаниеТипов()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, СтрокаКонтактнойИнформации, ДанныеВидовКонтактнойИнформации, ЭтоНовыйВидКИ,
	ЭтоРеквизитТабличнойЧасти = Ложь, ЗаполнятьЗначениеРеквизита = Истина, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")
	
	НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКонтактнойИнформации.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКонтактнойИнформации.Вид;
	НоваяСтрока.Тип           = СтрокаКонтактнойИнформации.Тип;
	НоваяСтрока.ИмяЭлементаДляРазмещения  = ИмяЭлементаДляРазмещения;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	// +CRM
	НоваяСтрока.CRM_ОсновнойДляСвязи = СтрокаКонтактнойИнформации.CRM_ОсновнойДляСвязи;
	НоваяСтрока.Родитель      = СтрокаКонтактнойИнформации.РодительКИ;
	НоваяСтрока.Выводить      = СтрокаКонтактнойИнформации.Выводить;
	НоваяСтрока.Колонка       = СтрокаКонтактнойИнформации.Колонка;
	// +СофтФон
	НоваяСтрока.сфпВремяЗадержкиНабораДобавочногоНомера = СтрокаКонтактнойИнформации.сфпВремяЗадержкиНабораДобавочногоНомера;
	// -СофтФон
	// -CRM
	
	Если НоваяСтрока.Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
		НоваяСтрока.ЭтоИсторическаяКонтактнаяИнформация = СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация;
	КонецЕсли;
	
	Если НоваяСтрока.Свойство("ДействуетС") Тогда
		НоваяСтрока.ДействуетС = СтрокаКонтактнойИнформации.ДействуетС;
	КонецЕсли;
	
	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") Тогда
		НоваяСтрока.ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.ХранитьИсториюИзменений;
	КонецЕсли;
	
	Если НоваяСтрока.Свойство("МеждународныйФорматАдреса") Тогда
		НоваяСтрока.МеждународныйФорматАдреса = СтрокаКонтактнойИнформации.МеждународныйФорматАдреса;
	КонецЕсли;
	
	НоваяСтрока.Значение      = СтрокаКонтактнойИнформации.Значение;
	НоваяСтрока.Представление = СтрокаКонтактнойИнформации.Представление;
	НоваяСтрока.Комментарий   = СтрокаКонтактнойИнформации.Комментарий;
	
	Если ЗаполнятьЗначениеРеквизита И Не ЭтоРеквизитТабличнойЧасти Тогда
		Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
			И СтрокаКонтактнойИнформации.РедактированиеТолькоВДиалоге
			И ПустаяСтрока(СтрокаКонтактнойИнформации.Представление) Тогда
			Форма[СтрокаКонтактнойИнформации.ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		Иначе
			Форма[СтрокаКонтактнойИнформации.ИмяРеквизита] = СтрокаКонтактнойИнформации.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВидаКонтактнойИнформации = ДанныеВидовКонтактнойИнформации[СтрокаКонтактнойИнформации.Вид];
	ДанныеВидаКонтактнойИнформации.Вставить("Ссылка", СтрокаКонтактнойИнформации.Вид);
	
	Если ЭтоНовыйВидКИ И ДанныеВидаКонтактнойИнформации.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти И Не ДанныеВидаКонтактнойИнформации.ПометкаУдаления Тогда
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(ДанныеВидаКонтактнойИнформации, СтрокаКонтактнойИнформации.Вид.Наименование);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомандыИЭлементыФормы(Форма, ИмяЭлементаДляРазмещения)
	
	ДобавленныеЭлементы = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения).ДобавленныеЭлементы;
	ДобавленныеЭлементы.СортироватьПоПредставлению();
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		
		Если УдаляемыйЭлемент.Пометка Тогда
			// +CRM
			Попытка
				Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.Значение]);
			Исключение
			КонецПопытки;
		Иначе
			Попытка
				Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.Значение]);
			Исключение
			КонецПопытки;
			// -CRM
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//    Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает имена табличных частей документа по виду контактной информации.
//
// Параметры:
//    ТаблицаВидовКонтактнойИнформации - ТаблицаЗначений - Список видов контактной информации.
//     * Вид - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//    ИмяОбъекта                       - Строка - полное имя объекта метаданного.
//
// Возвращаемое значение:
//    Соответствие - имена табличных части или пустая строка, если табличной части нет.
//
Функция ИменаТабличныхЧастейПоВидамКИ(ТаблицаВидовКонтактнойИнформации, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Вид КАК ВидКИ
	               |ПОМЕСТИТЬ ВидыКИ
	               |ИЗ
	               |	&ТаблицаВидовКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяТабличнойЧасти,
	               |	ВидыКИ.ВидКИ КАК ВидКонтактнойИнформации
	               |ИЗ
	               |	ВидыКИ КАК ВидыКИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |		ПО ВидыКИ.ВидКИ = ВидыКонтактнойИнформации.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаВидовКонтактнойИнформации", ТаблицаВидовКонтактнойИнформации);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ИмяТабличнойЧасти) Тогда
			ИмяТабличнойЧасти = Сред(РезультатЗапроса.ИмяТабличнойЧасти, СтрНайти(РезультатЗапроса.ИмяТабличнойЧасти, ИмяОбъекта) + СтрДлина(ИмяОбъекта));
		Иначе
			ИмяТабличнойЧасти = "";
		КонецЕсли;
		
		Результат.Вставить(РезультатЗапроса.ВидКонтактнойИнформации, ИмяТабличнойЧасти);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет на наличие в форме заполненных строк КИ того же вида (за исключением текущей).
//
Функция ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Знач Форма, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока Тогда
			Представление = Форма[СтрокаВида.ИмяРеквизита];
			Если Не ПустаяСтрока(Представление) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация".

Процедура ЗаполнитьТехническиеПоляКонтактнойИнформации(СтрокаКонтактнойИнформации, Объект, ТипКонтактнойИнформации)
	
	// Заполнение дополнительных реквизитов ТЧ.
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаКонтактнойИнформации, Объект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Адрес)
	
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Регион = "";
	СтрокаТабличнойЧасти.Город  = "";
	
	ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
	Если Адрес.Свойство("Country") Тогда
		СтрокаТабличнойЧасти.Страна =  Адрес.Country;
		
		Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
			Обработки["РасширенныйВводКонтактнойИнформации"].ЗаполнитьРасширенныеРеквизитыТабличнойЧастиДляАдреса(Адрес, СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Телефон)
	
	Если НЕ ЗначениеЗаполнено(Телефон) Тогда
		Возврат;
	КонецЕсли;
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	КодСтраны     = Телефон.CountryCode;
	КодГорода     = Телефон.AreaCode;
	НомерТелефона = Телефон.Number;
	
	Если СтрНачинаетсяС(КодСтраны, "+") Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	Поз = СтрНайти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - Структура, ОбъектXDTO - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник)
	
// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = "";
	АдресСтраницы = "";
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если Источник.Свойство("value") Тогда
			АдресСтрокой = Источник.value;
		КонецЕсли;
		
	Иначе
		
		АдресСтраницы = Источник.Состав;
		ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
		Если АдресСтраницы <> Неопределено И АдресСтраницы.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
			АдресСтрокой = АдресСтраницы.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	// Удалим протокол
	Позиция = СтрНайти(АдресСтрокой, "://");
	АдресСервера = ?(Позиция = 0, АдресСтрокой, Сред(АдресСтрокой, Позиция + 3));
	
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
	
КонецПроцедуры

// Проверяет контактную информацию электронной почты и сообщает об ошибках. 
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияЭлектроннойПочты(АдресЭП, ВидИнформации, Знач ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресЭП) Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаОшибки = "";
	ЭлектроннаяПочта = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(АдресЭП, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ЭлектроннаяПочта.Value);
		Если Результат.Количество() > 1 Тогда
			
			СтрокаОшибки = НСтр("ru='Допускается ввод только одного адреса электронной почты';en='You can enter only one email address'");
			
		КонецЕсли;
	Исключение
		СтрокаОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВывестиСообщениеПользователю(СтрокаОшибки, ИмяРеквизита, ПолеРеквизита);
		УровеньОшибки = ?(ВидИнформации.ПроверятьКорректность, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;
	
	Возврат УровеньОшибки;
	
КонецФункции

// Проверяет контактную информацию.
//
Функция ПроверитьЗаполнениеКонтактнойИнформации(Представление, Значение, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "")
	
	Если ПустаяСтрока(Значение) Тогда
		
		Если ПустаяСтрока(Представление) Тогда
			Возврат 0;
		КонецЕсли;
		
		РедактированиеТолькоВДиалоге = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидИнформации, "РедактированиеТолькоВДиалоге");
		Если РедактированиеТолькоВДиалоге И СтрСравнить(Представление, УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(Представление, ВидИнформации);
		Значение = ?(ТипЗнч(КонтактнаяИнформация) = Тип("Структура"), УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформация), "");
		
	ИначеЕсли УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Значение) Тогда
		
		Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Значение, ВидИнформации);
		
	КонецЕсли;
	
	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(Значение, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(Значение, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(Значение, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(Значение, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(Значение, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое (прочее) не проверяем.
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

// Проверяет контактную информацию адреса и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	
	Если НЕ УправлениеКонтактнойИнформациейСлужебный.ЭтоНациональныйАдрес(Источник) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
		СписокОшибок = Обработки["РасширенныйВводКонтактнойИнформации"].ОшибкиЗаполненияАдресаXDTO(Источник, ВидИнформации);
		Для Каждого Элемент Из СписокОшибок Цикл
			ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита, ПолеРеквизита);
			ЕстьОшибки = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибки И ВидИнформации.ПроверятьКорректность Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Проверяет контактную информацию телефона и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

// Проверяет контактную информацию веб страницы и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита)
	
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПолеРеквизита, ИмяРеквизита);
	
КонецПроцедуры

Функция ПараметрыКонтактнойИнформацииФормы(ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения)
	Если НЕ ЗначениеЗаполнено(ИмяЭлементаДляРазмещения) ИЛИ НЕ ПараметрыКонтактнойИнформации.Свойство(ИмяЭлементаДляРазмещения) Тогда
		Для каждого ПерваяЗапись Из ПараметрыКонтактнойИнформации Цикл
			Возврат ПерваяЗапись.Значение;
		КонецЦикла;
		Возврат ПараметрыКонтактнойИнформации;
	КонецЕсли;
	Возврат ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
КонецФункции

// +CRM
//Функция ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, ОтложеннаяИнициализация, ИсключаемыеВиды)
Функция ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, ОтложеннаяИнициализация, ИсключаемыеВиды, СкрываемыеВиды, ВыводитьВОднуКолонку)
// -CRM
	
	Если ТипЗнч(Форма.ПараметрыКонтактнойИнформации) <> Тип("Структура") Тогда
		Форма.ПараметрыКонтактнойИнформации = Новый Структура;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		МодульОтправкаSMS  = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
		МожноОтправлятьSMS = МодульОтправкаSMS.ДоступнаОтправкаSMS();
	Иначе
		МожноОтправлятьSMS = Ложь;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = Новый Структура;
	ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения",              ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка",               ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ));
	ПараметрыКонтактнойИнформации.Вставить("ДобавленныеРеквизиты",             Новый СписокЗначений); 
	ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация",          ОтложеннаяИнициализация);
	ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды",                  ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
	ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы",              Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("СписокДобавляемыхЭлементов",       Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("МожноОтправлятьSMS",               МожноОтправлятьSMS);
	ПараметрыКонтактнойИнформации.Вставить("Владелец",                         Неопределено);
	ПараметрыКонтактнойИнформации.Вставить("ОбработкаНавигационнойСсылки",     Ложь);
	ПараметрыКонтактнойИнформации.Вставить("СкрываемыеВиды",                   СкрываемыеВиды);
	// +CRM
	ПараметрыКонтактнойИнформации.Вставить("ВыводитьВОднуКолонку", ВыводитьВОднуКолонку);
	// -CRM
	
	ПараметрыАдреса = Новый Структура("ТипПомещения, Страна, Индекс", "Квартира");
	ПараметрыКонтактнойИнформации.Вставить("ПараметрыАдреса", ПараметрыАдреса);
	
	Форма.ПараметрыКонтактнойИнформации.Вставить(ИмяЭлементаДляРазмещения, ПараметрыКонтактнойИнформации);
	Возврат Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
	
КонецФункции

Функция ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ)
	
	Если ПоложениеЗаголовкаЭлементаФормы.Лево = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Лево";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Верх = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Верх";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Низ = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Низ";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Право = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Право";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Нет = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Нет";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Авто = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Авто";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
	ВсеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НайденныеСтроки = ВсеСтроки.НайтиСтроки( 
		Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", Перечисления.ТипыКонтактнойИнформации.Адрес, Ложь));
		
	ОбщееКоличествоКоманд = 0;
	Для Каждого СтрокаКИ Из ВсеСтроки Цикл
		
		Если ОбщееКоличествоКоманд > 50 Тогда // Ограничение для большого количества адресов на форме
			Прервать;
		КонецЕсли;
		
		Если СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Продолжить;
		КонецЕсли;
		
		ПодменюКопироватьАдреса = Форма.Элементы.Найти("ПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		КонтекстноеПодменюКопироватьАдреса = Форма.Элементы.Найти("КонтекстноеПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		Если ПодменюКопироватьАдреса <> Неопределено И КонтекстноеПодменюКопироватьАдреса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		КоличествоКомандВПодменю = 0;
		СписокАдресовВПодменю = Новый Соответствие();
		СписокАдресовВПодменю.Вставить(ВРег(СтрокаКИ.Представление), Истина);
		
		Для Каждого Адрес Из НайденныеСтроки Цикл
			
			Если КоличествоКомандВПодменю > 7 Тогда // Ограничение для большого количества адресов на форме
				Прервать;
			КонецЕсли;
			
			Если Адрес.ЭтоИсторическаяКонтактнаяИнформация Или Адрес.ИмяРеквизита = СтрокаКИ.ИмяРеквизита Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "МенюПодменюАдрес" + СтрокаКИ.ИмяРеквизита + "_" + Адрес.ИмяРеквизита;
			Команда = Форма.Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				Команда.Подсказка = НСтр("ru = 'Скопировать адрес'");
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные = Истина;
				
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
				КоличествоКомандВПодменю = КоличествоКомандВПодменю + 1;
			КонецЕсли;
			
			ПредставлениеАдреса = ?(СтрокаКИ.МеждународныйФорматАдреса,
				СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Адрес.Представление), Адрес.Представление);
			
			Если СписокАдресовВПодменю[ВРег(Адрес.Представление)] <> Неопределено Тогда
				ПредставлениеАдреса = "";
			Иначе
				СписокАдресовВПодменю.Вставить(ВРег(Адрес.Представление), Истина);
			КонецЕсли;
			
			Если ПодменюКопироватьАдреса <> Неопределено Тогда
				ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, 
					ПредставлениеАдреса, ПараметрыКонтактнойИнформации, ПодменюКопироватьАдреса);
				КонецЕсли;
				
			Если КонтекстноеПодменюКопироватьАдреса <> Неопределено Тогда
				ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, 
					ПредставлениеАдреса, ПараметрыКонтактнойИнформации, КонтекстноеПодменюКопироватьАдреса);
			КонецЕсли;
			
		КонецЦикла;
		ОбщееКоличествоКоманд = ОбщееКоличествоКоманд + КоличествоКомандВПодменю;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ЗаголовокЭлемента, ПараметрыКонтактнойИнформации, Подменю)
	
	ИмяЭлемента = Подменю.Имя + "_" + ИмяКоманды;
	Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
	Если Кнопка = Неопределено Тогда
		Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
		Кнопка.ИмяКоманды = ИмяКоманды;
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяЭлемента, 1);
	КонецЕсли;
	Кнопка.Заголовок = ЗаголовокЭлемента;
	Кнопка.Видимость = ЗначениеЗаполнено(ЗаголовокЭлемента);

КонецПроцедуры

#Область МетодыCRM

// Обновляет один вид контактной информации.
//
// Параметры:
//    ВидКИ - Справочник.ВидыКонтактнойИнформации - вид контактной информации.
//    Тип - Перечисление.ТипыКонтактнойИнформации - тип контактной информации.
//    МожноИзменятьСпособРедактирования - Булево - Истина, если есть возможность изменять способ редактирования, Ложь -
//                                                 иначе.
//    РедактированиеТолькоВДиалоге - Булево - Истина, если редактировать только в диалоге, Ложь - иначе.
//    АдресТолькоРоссийский - Булево - Истина, если адрес только российский, Ложь - Иначе.
//    Порядок - Неопределено или Число - порядок вида контактной информации.
//
Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, ТолькоНациональныйАдрес,
	Порядок = Неопределено) Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Вид = ВидКИ;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.Порядок = Порядок;
	Если ПараметрыВида.Свойство("ТолькоНациональныйАдрес") Тогда
		ПараметрыВида.ТолькоНациональныйАдрес = ТолькоНациональныйАдрес;
	КонецЕсли;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Функция ДобавитьЭлементОсновнойДляСвязи(Форма, ОсновнойДляСвязи, Тип, ИмяРеквизита, ГруппаОсновнойДляСвязи, ЗаголовокСлева, ЭтоНовыйВидКИ = ЛОЖЬ, ЕстьКомментарий = ЛОЖЬ, ИмяСледующегоРеквизита = "")
	// Заглушка , если заголовок у поля сверху.
	Если (НЕ ЗаголовокСлева) И ЭтоНовыйВидКИ Тогда
		ИмяЗаглушки = "Заглушка1ОсновнойДляСвязи" + ИмяРеквизита;
		Заглушка1 = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаОсновнойДляСвязи);
		Заглушка1.Высота = 1;
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
	КонецЕсли;
	ИмяЭлемента = "ОсновнойДляСвязи" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаОсновнойДляСвязи);
	Элемент.Вид                   = ВидДекорацииФормы.Картинка;
	Элемент.Высота                = 1;
	Элемент.Ширина                = 2;
	Элемент.Подсказка             = "Использовать как основной способ связи данного типа";
	Элемент.ПропускатьПриВводе    = ИСТИНА;
	Элемент.Гиперссылка           = ИСТИНА;
	Элемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	Элемент.Картинка              = ?(ОсновнойДляСвязи, БиблиотекаКартинок.CRM_ЗвездочкаГолубая, БиблиотекаКартинок.CRM_ЗвездочкаСерая);
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи");
	ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, 2);
	Если ЕстьКомментарий Тогда
		ИмяЗаглушки = "Заглушка3ОсновнойДляСвязи" + ИмяРеквизита;
		Заглушка3 = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаОсновнойДляСвязи);
		Заглушка3.Высота = 1;
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяСледующегоРеквизита) Тогда
		ИмяСледующегоЭлемента = Форма.Элементы[?(ЗаголовокСлева, "", "Заглушка1") + "ОсновнойДляСвязи" + ИмяСледующегоРеквизита];
		Форма.Элементы.Переместить(Элемент, ГруппаОсновнойДляСвязи, ИмяСледующегоЭлемента);
		Если ЕстьКомментарий Тогда
			Форма.Элементы.Переместить(Заглушка3, ГруппаОсновнойДляСвязи, ИмяСледующегоЭлемента);
		КонецЕсли;
	КонецЕсли;
	Возврат Элемент;
КонецФункции // ДобавитьЭлементОсновнойДляСвязи()

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Контактная информация';en='Contact information'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ГруппаВидовКонтактнойИнформацииОбъекта(Знач ПолноеИмяОбъектаМетаданных)
	
	Возврат Справочники.ВидыКонтактнойИнформации[СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "")];
	
КонецФункции

Функция ГруппыВидовКонтактнойИнформацииОбъекта(Знач ПолноеИмяОбъектаМетаданных)
	
	МассивГрупп = Новый Массив;
	Если ПолноеИмяОбъектаМетаданных = "Справочник.Партнеры" Тогда
		
		МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		
	Иначе
		
		МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации[СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "")]);
		
	КонецЕсли;
	
	Возврат МассивГрупп;
	
КонецФункции

Функция ГруппаВидовКонтактнойИнформацииПоМетаданным(МетаданныеОбъекта) Экспорт
	
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	
	Возврат ГруппаВидовКонтактнойИнформации;

КонецФункции

#КонецОбласти // МетодыCRM

#Область НовыеМетодыCRM

Процедура ИнициализацияКонтактнойИнформации(Форма) Экспорт
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	ИмяОписания = "КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов";
	ОписаниеТиповОбъекта = Новый ОписаниеТипов("СправочникСсылка.CRM_ПотенциальныеКлиенты, СправочникСсылка.КонтактныеЛицаПартнеров, СправочникСсылка.Партнеры");
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Объект", ОписаниеТиповОбъекта, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_ОсновнойДляСвязи",	 Новый ОписаниеТипов("Булево"),										ИмяОписания));
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

КонецПроцедуры

Процедура ВывестиКонтактнуюИнформациюОбъекта(Форма, Объект, ИмяЭлементаДляРазмещения, ТипыКИ = Неопределено) Экспорт
	
	ЭлементРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	Пока ЭлементРазмещения.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Форма.Элементы.Удалить(ЭлементРазмещения.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	КИОбъекта = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Объект", Объект));
	Для каждого Стр из КИОбъекта Цикл
		Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Удалить(Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Индекс(Стр));
	КонецЦикла;
	
	Идентификатор = СТРЗаменить(Строка(Объект.УникальныйИдентификатор()), "-", "_");
	ПанельКИОбъекта = Форма.Элементы.Добавить("ГруппаТипаКИ"+Идентификатор, Тип("ГруппаФормы"), ЭлементРазмещения);
	ПанельКИОбъекта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПанельКИОбъекта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ПанельКИОбъекта.ОтображатьЗаголовок= Ложь;
	Для каждого ТипКИ из ТипыКИ Цикл
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Объект, ТипКИ);
		КоличествоКИ = КонтактнаяИнформация.Количество();
		Если КоличествоКИ > 0 Тогда
			СтрТипКИ = СтрЗаменить(ТипКИ, " ", "_");
			
			Если Форма.Команды.Найти("ЭлементТипаКИ"+Идентификатор+СтрТипКИ) = Неопределено Тогда
				Команда = Форма.Команды.Добавить("ЭлементТипаКИ"+Идентификатор+СтрТипКИ);
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
			КонецЕсли;
			
			ГруппуТипаКИ = Форма.Элементы.Добавить("ГруппуТипаКИ"+Идентификатор+СтрТипКИ, Тип("ГруппаФормы"), ПанельКИОбъекта);
			ГруппуТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппуТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппуТипаКИ.ОтображатьЗаголовок= Ложь;
				
			ГруппуЗначенияТипаКИ = Форма.Элементы.Добавить("ГруппаТипаКИВертикаль"+Идентификатор+СтрТипКИ, Тип("ГруппаФормы"), ГруппуТипаКИ);
			ГруппуЗначенияТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппуЗначенияТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппуЗначенияТипаКИ.РастягиватьПоВертикали = Ложь;
			ГруппуЗначенияТипаКИ.ОтображатьЗаголовок= Ложь;
			ГруппуЗначенияТипаКИ.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ЭлементТипаКИ = Форма.Элементы.Добавить("ЭлементТипаКИ"+Идентификатор+СтрТипКИ, Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
			ЭлементТипаКИ.Заголовок = КонтактнаяИнформация[0].Представление;
			ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
			ЭлементТипаКИ.ИмяКоманды = "ЭлементТипаКИ"+Идентификатор+СтрТипКИ;
			
			НовСтрКИ = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрКИ, КонтактнаяИнформация[0]);
			НовСтрКИ.ИмяРеквизита = "ЭлементТипаКИ"+Идентификатор+СтрТипКИ;
			НовСтрКИ.Объект = Объект;
			
			Если КоличествоКИ>1 Тогда
				
				Если Форма.Команды.Найти("КнопкаПодменюТипаКИ"+Идентификатор+СтрТипКИ) = Неопределено Тогда
					Команда = Форма.Команды.Добавить("КнопкаПодменюТипаКИ"+Идентификатор+СтрТипКИ);
					Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
				КонецЕсли;
					
				КнопкаПодменюТипаКИ = Форма.Элементы.Добавить("КнопкаПодменюТипаКИ"+Идентификатор+СтрТипКИ, Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
				КнопкаПодменюТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
				КнопкаПодменюТипаКИ.Картинка = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
				КнопкаПодменюТипаКИ.Отображение = ОтображениеКнопки.Картинка;
				КнопкаПодменюТипаКИ.ИмяКоманды = "КнопкаПодменюТипаКИ"+Идентификатор+СтрТипКИ;
				
				ПодменюТипаКИ = Форма.Элементы.Добавить("ПодменюТипаКИ"+Идентификатор+СтрТипКИ, Тип("ГруппаФормы"), ГруппуЗначенияТипаКИ);
				ПодменюТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ПодменюТипаКИ.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
				ПодменюТипаКИ.Заголовок = " ";
				ПодменюТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ПодменюТипаКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
				ПодменюТипаКИ.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_СерыйДляПодложек;
				ПодменюТипаКИ.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
				ПодменюТипаКИ.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,1,Истина);
				ПодменюТипаКИ.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
				
				Для Н = 0 по КоличествоКИ-1 Цикл
					ИмяРеквизита = "ЭлементТипаКИ"+Идентификатор+СтрТипКИ+Строка(Н);
					Если Форма.Команды.Найти(ИмяРеквизита) = Неопределено Тогда
						Команда = Форма.Команды.Добавить(ИмяРеквизита);
						Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
					КонецЕсли;
					
					ЭлементТипаКИГруппа = Форма.Элементы.Добавить(ИмяРеквизита+"Группа", Тип("ГруппаФормы"), ПодменюТипаКИ); 
					ЭлементТипаКИГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ЭлементТипаКИГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ЭлементТипаКИГруппа.ОтображатьЗаголовок= Ложь;
					ЭлементТипаКИГруппа.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
					
					ЭлементТипаКИЗаголовок = Форма.Элементы.Добавить(ИмяРеквизита+"Заголовок", Тип("ДекорацияФормы"), ЭлементТипаКИГруппа);
					ЭлементТипаКИЗаголовок.Заголовок = КонтактнаяИнформация[Н].Вид;
					
					ЭлементТипаКИ = Форма.Элементы.Добавить(ИмяРеквизита, Тип("КнопкаФормы"), ЭлементТипаКИГруппа);
					ЭлементТипаКИ.Заголовок = КонтактнаяИнформация[Н].Представление;
					ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
					ЭлементТипаКИ.ИмяКоманды = ИмяРеквизита;
					ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
					
					НовСтрКИ = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрКИ, КонтактнаяИнформация[Н]);
					НовСтрКИ.ИмяРеквизита = ИмяРеквизита;
					НовСтрКИ.Объект = Объект;
				КонецЦикла;
			Иначе
				Декорация = Форма.Элементы.Добавить("ПустаяДекорацияТипаКИ"+Идентификатор+СтрТипКИ, Тип("ДекорацияФормы"), ГруппуЗначенияТипаКИ);
				Декорация.Вид = ВидДекорацииФормы.Надпись;
				Декорация.Ширина = 2;
				Декорация.РастягиватьПоГоризонтали = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВывестиКонтактнуюИнформациюОбъектаСписоком(Форма, Объект, ИмяЭлементаДляРазмещения, ТипыКИ = Неопределено) Экспорт
	
	ЭлементРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	Пока ЭлементРазмещения.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Форма.Элементы.Удалить(ЭлементРазмещения.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	КИОбъекта = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Объект", Объект));
	Для каждого Стр из КИОбъекта Цикл
		Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Удалить(Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Индекс(Стр));
	КонецЦикла;
	
	Идентификатор = СТРЗаменить(Строка(Объект.УникальныйИдентификатор()), "-", "_");
	
	ГруппаЗаголовокКИ = Форма.Элементы.Добавить("ГруппаЗаголовокКИ"+Идентификатор, Тип("ГруппаФормы"), ЭлементРазмещения);
	ГруппаЗаголовокКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЗаголовокКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЗаголовокКИ.ОтображатьЗаголовок= Ложь;
	ГруппаЗаголовокКИ.РастягиватьПоГоризонтали = Истина;
	
	ДекорацияЗаголовокКИ = Форма.Элементы.Добавить("ДекорацияЗаголовокКИ"+Идентификатор, Тип("ДекорацияФормы"), ГруппаЗаголовокКИ);
	ДекорацияЗаголовокКИ.Заголовок = НСтр("ru = 'Контактная информация'");
	ДекорацияЗаголовокКИ.Шрифт = Новый Шрифт(, 11,);
					
	Если Форма.Команды.Найти("КомандаИзменитьКИ"+Идентификатор) = Неопределено Тогда
		Команда = Форма.Команды.Добавить("КомандаИзменитьКИ"+Идентификатор);
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
	КонецЕсли;
	
	КнопкаИзменитьКИ = Форма.Элементы.Добавить("КнопкаИзменитьКИ"+Идентификатор, Тип("КнопкаФормы"), ГруппаЗаголовокКИ);
	КнопкаИзменитьКИ.Заголовок = НСтр("ru = 'Изменить'");
	КнопкаИзменитьКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаИзменитьКИ.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КнопкаИзменитьКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	КнопкаИзменитьКИ.ИмяКоманды = "КомандаИзменитьКИ"+Идентификатор;
	
	ГруппаСписокКИ = Форма.Элементы.Добавить("ГруппаСписокКИ"+Идентификатор, Тип("ГруппаФормы"), ЭлементРазмещения);
	ГруппаСписокКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСписокКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаСписокКИ.ОтображатьЗаголовок= Ложь;
	ГруппаСписокКИ.РастягиватьПоГоризонтали = Истина;
	
	ГруппуКИЛевая = Форма.Элементы.Добавить("ГруппуКИЛевая"+Идентификатор, Тип("ГруппаФормы"), ГруппаСписокКИ);
	ГруппуКИЛевая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппуКИЛевая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппуКИЛевая.ОтображатьЗаголовок= Ложь;
	
	ГруппуКИПравая = Форма.Элементы.Добавить("ГруппуКИПравая"+Идентификатор, Тип("ГруппаФормы"), ГруппаСписокКИ);
	ГруппуКИПравая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппуКИПравая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппуКИПравая.ОтображатьЗаголовок= Ложь;
	ГруппуКИПравая.РастягиватьПоГоризонтали = Истина;

	Для каждого СтрокаКИ из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если Не ЗначениеЗаполнено(СтрокаКИ.Представление) ИЛИ Не ЗначениеЗаполнено(СтрокаКИ.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.Команды.Найти("ЭлементСпискаКИ"+СтрокаКИ.ИмяРеквизита) = Неопределено Тогда
			Команда = Форма.Команды.Добавить("ЭлементСпискаКИ"+СтрокаКИ.ИмяРеквизита);
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
		КонецЕсли;
			
		ДекорацияЗаголовокКИ = Форма.Элементы.Добавить("ДекорацияЗаголовокКИ"+СтрокаКИ.ИмяРеквизита, Тип("ДекорацияФормы"), ГруппуКИЛевая);
		ДекорацияЗаголовокКИ.Заголовок = Строка(СтрокаКИ.Вид)+":";
		//ДекорацияЗаголовокКИ.Шрифт = Новый Шрифт(,, СтрокаКИ.CRM_ОсновнойДляСвязи);;
		//ДекорацияЗаголовокКИ.ЦветТекста = Новый Цвет(109,109,109);
		ДекорацияЗаголовокКИ.Высота = 1;
			
		ЭлементТипаКИ = Форма.Элементы.Добавить("ЭлементСпискаКИ"+СтрокаКИ.ИмяРеквизита, Тип("КнопкаФормы"), ГруппуКИПравая);
		ЭлементТипаКИ.Заголовок = СтрокаКИ.Представление;
		ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементТипаКИ.ИмяКоманды = "ЭлементСпискаКИ"+СтрокаКИ.ИмяРеквизита;
		ЭлементТипаКИ.Шрифт = Новый Шрифт(, 10, СтрокаКИ.CRM_ОсновнойДляСвязи);
		
		Если ЗначениеЗаполнено(СтрокаКИ.Комментарий) Тогда
			
			ДекорацияЗаглушка = Форма.Элементы.Добавить("ДекорацияКомментарийКИЗаглушка"+СтрокаКИ.ИмяРеквизита, Тип("ДекорацияФормы"), ГруппуКИЛевая);
			
			ДекорацияКомментарийКИ = Форма.Элементы.Добавить("ДекорацияКомментарийКИ"+СтрокаКИ.ИмяРеквизита, Тип("ДекорацияФормы"), ГруппуКИПравая);
			ДекорацияКомментарийКИ.Заголовок = СтрокаКИ.Комментарий;
			ДекорацияКомментарийКИ.ЦветТекста = ЦветаСтиля.CRM_ЦветДополнительногоТекста;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти // НовыеМетодыCRM

#КонецОбласти // СлужебныеПроцедурыИФункции


