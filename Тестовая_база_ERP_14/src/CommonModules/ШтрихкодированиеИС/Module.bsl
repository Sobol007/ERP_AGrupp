
#Область ПрограммныйИнтерфейс

// Выполняет обработку штрихкода и возвращает результат этой обработки.
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма, для которой необходимо выполнить обработку штрихкода.
// 	ДанныеШтрихкода - Структура - Исходные данные, включающие только значение штрихкода и количество,
// 	либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
// 	КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// Возвращаемое значение:
// 	Структура - (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(Форма);
	КонецЕсли;
	
	Если ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода, ПараметрыСканирования)
		И ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
		Возврат РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Штрихкоды = Новый Массив();
	Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
	
	ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования);
	
	РезультатыПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(Штрихкоды, ПараметрыСканирования);
	Если РезультатыПроверок.Количество() > 0 Тогда
		Возврат РезультатыПроверок[ДанныеШтрихкода.Штрихкод];
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	
	Если ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		РезультатОбработки = РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления);
		
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ЕстьОшибки         = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	РезультатОбработки = РезультатДобавленияШтрихкодаВДокумент(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеШтрихкода, ЕстьОшибки);

	Возврат РезультатОбработки;
	
КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары». 
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
// 	Упаковки - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Массив упаковок, по которому формируются вложенные штрихкоды.
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// Возвращаемое значение:
// 	Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
// * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
// * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковок(Упаковки, ПараметрыСканирования = Неопределено) Экспорт
	
	Если Упаковки.Количество() = 0 Тогда
		
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
		
	КонецЕсли;
	
	ВложенныеШтрихкоды = ДеревоУпаковокИМаркированныеТовары(Упаковки);
	ДанныеПоШтрихкодам = Новый Структура("ВложенныеШтрихкоды", ВложенныеШтрихкоды);
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
		И ВложенныеШтрихкоды.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И ВложенныеШтрихкоды.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная) <> Неопределено Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования);
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Получает из справочника «Штрихкоды упаковок» данные по массиву значений штрихкодов.
// 
// Параметры:
// 	ЗначенияШтрихкодов - Массив - Массив штрихкодов.
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// 	*ЗначениеШтрихкода - Строка - Штрихкод.
// 	*Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
// 	*ХешСумма - Строка - Хэш сумма упаковки.
Функция ШтрихкодыУпаковок(ЗначенияШтрихкодов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	&ЗначенияШтрихкодов КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗначениеШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ХешСумма КАК ХешСумма
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = Штрихкоды.ЗначениеШтрихкода)
	|");
	
	Запрос.УстановитьПараметр("ЗначенияШтрихкодов", ЗначенияШтрихкодов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("ЗначениеШтрихкода, ХешСумма");
	
	Возврат Результат;
	
КонецФункции

// Производит анализ дерева упаковок на продукцию, которая в наличии.
// 
// Параметры:
// 	ДеревоМаркируемойПродукции - ДеревоЗначений - Иерархия хранения маркируемой продукции с упаковками.
// 	ЗначенияШтрихкодов - ТаблицаЗначений - Таблица, которая будет дополнена штрихкодами, которые в наличии.
// * ЗначениеШтрихкода - Строка - Значение штрихкода.
// Возвращаемое значение:
// 	ТаблицаЗначений -Таблица со штрихкодами, которые имеют статус "В Наличии" и содержатся в дереве упаковок.
// * ЗначениеШтрихкода - Строка - Значение штрихкода.
Функция ЗначенияШтрихкодовВНаличииИзДереваМаркируемойПродукции(ДеревоМаркируемойПродукции, ЗначенияШтрихкодов) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркируемойПродукции.Строки Цикл
		
		Если СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии
			Или СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока
			Или СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки Тогда
			
			ЗначенияШтрихкодовВНаличииИзДереваМаркируемойПродукции(СтрокаДерева, Результат);
			
			Если Не ПустаяСтрока(СтрокаДерева.ЗначениеШтрихкода) Тогда
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.ЗначениеШтрихкода = СтрокаДерева.ЗначениеШтрихкода;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет тип штрихкода по его значению
// 
// Параметры:
// 	ЗначениеШтрихкода - Строка - Штрихкод.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	ТипУпаковки
// Возвращаемое значение:
// 	Неопределено, ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
Функция ОпределитьТипШтрихкода(ЗначениеШтрихкода, ТипУпаковки) Экспорт
	
	ВидПродукции = ВидПродукцииИСПоШтрихкодуМаркировки(ЗначениеШтрихкода, Неопределено, Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") И ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		Возврат МодульШтрихкодированиеЕГАИС.ТипШтрихкода(ЗначениеШтрихкода, ТипУпаковки);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.МОТП") И ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда 
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		Возврат МодульШтрихкодированиеМОТП.ТипШтрихкода(ЗначениеШтрихкода);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары» по ссылке на документ.
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Ссылка на документ.
// 	ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому необходимо осуществить 
// 	отбор формирования вложенных штрихкодов.
// 	Детализация - Неопределено, ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - Детализация, 
// 	с которой необходимо сформировать вложенные штрихкоды.
// Возвращаемое значение:
// 	Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
// * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
// * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ВидПродукции = Неопределено, Детализация = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(ДокументСсылка,,ВидПродукции);
	
	ВложенныеШтрихкоды = Неопределено;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		ВложенныеШтрихкоды = МодульШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
	ИначеЕсли ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		ВложенныеШтрихкоды = МодульШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, Детализация);
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Обновляет информацию, находяющуюся во временном хранилище, адрес которого, как правило,
// хранится в реквизите формы «АдресСоответствияАкцизныхМарок». 
// 
// Параметры:
// 	Форма - УправялемаяФорма - форма, для которой необходимо обновить кэш маркируемой продукции.
Процедура ОбновитьКэшМаркируемойПродукции(Форма) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(Форма);
	
	Если Не ЭтоАдресВременногоХранилища(Форма.АдресСоответствияАкцизныхМарок) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеХранилища = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок);
	Если ДанныеХранилища = Неопределено Тогда
		ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования);
		ДанныеХранилища = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок);
	КонецЕсли;
	
	АкцизныеМарки   = Форма.Объект.АкцизныеМарки.Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка");
	ЗначенияВложенныхШтрихкодовАкцизныхМарок = ЗначенияВложенныхШтрихкодовАкцизныхМарок(АкцизныеМарки);
	
	МаркируемаяПродукцияДокумента = Новый Соответствие;
	Для Каждого ЗначениеШтрихкода Из ЗначенияВложенныхШтрихкодовАкцизныхМарок Цикл
		МаркируемаяПродукцияДокумента.Вставить(ЗначениеШтрихкода, ДанныеХранилища.Получить(ЗначениеШтрихкода));
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МаркируемаяПродукцияДокумента, ПараметрыСканирования.АдресСоответствияАкцизныхМарок);
	
КонецПроцедуры

// Формирует кэш маркируемой продукции по данными формы.
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма, для которой необходимо сформировать кэш маркируемой продукции.
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования). 
Процедура СформироватьКэшМаркируемойПродукции(Форма, ПараметрыСканирования = Неопределено) Экспорт
	
	ПараметрыСканированияИнициализированыЛокально = Ложь;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(Форма);
		ПараметрыСканированияИнициализированыЛокально = Истина;
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма.Объект.Товары, Форма.Объект.АкцизныеМарки);
	МаркируемаяПродукцияДокумента = Новый Соответствие;
	КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, МаркируемаяПродукцияДокумента, ПараметрыСканирования);
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок) Тогда
		
		ПоместитьВоВременноеХранилище(МаркируемаяПродукцияДокумента, ПараметрыСканирования.АдресСоответствияАкцизныхМарок);
		
	Иначе
		
		АдресСоответствияАкцизныхМарок = ПоместитьВоВременноеХранилище(МаркируемаяПродукцияДокумента, Форма.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресСоответствияАкцизныхМарок") Тогда
			Форма.АдресСоответствияАкцизныхМарок = АдресСоответствияАкцизныхМарок;
		КонецЕсли;
		
		Если Не ПараметрыСканированияИнициализированыЛокально Тогда
			ПараметрыСканирования.АдресСоответствияАкцизныхМарок = АдресСоответствияАкцизныхМарок;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Данные, заполняемые в процессе обработки штрихкодов.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * ЕстьОшибкиВДеревеУпаковок - Булево - признак, указывающий на то, что в дереве упаковок имеются ошибки.
// * ВидыПродукции - Массив - коллекция видов продукции, которые были идентифицированы при обработке штрихкодов.
// * ШтрихкодыПродукцииДляСопоставления - Неопределено, Массив - Коллекция штрихкодов EAN, требующих сопоставление пользователя.
// * ВложенныеШтрихкоды - Структура, Неопределено - включает в себя ДеревоУпаковок и таблицу МаркированныеТовары.
// * НеобработанныеШтрихкоды - Соответствие - штрихкоды, которые не удалось обработать.
// * ОбработанныеШтрихкоды - Соответствие - штрихкоды, которые удалось обработать.
// * ШтрихкодыНеизвестныхУпаковок - Массив - коллекция штрихкодов упаковок, отсутствующие в базе.
// * ШтрихкодыИзвестныхУпаковок - Массив - коллекция штрихкодов упаковок, которые известны.
// * МаркируемаяПродукция - Массив - вся продукция, подлежащая маркировке.
Функция ИнициализацияДанныхПоШтрихкодам() Экспорт
	
	ДанныеПоШтрихкодам = Новый Структура;
	
	ДанныеПоШтрихкодам.Вставить("ВсеШтрихкоды",                       Новый Массив);
	ДанныеПоШтрихкодам.Вставить("МаркируемаяПродукция",               Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыИзвестныхУпаковок",         Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыНеизвестныхУпаковок",       Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ОбработанныеШтрихкоды",              Новый Соответствие);
	ДанныеПоШтрихкодам.Вставить("НеобработанныеШтрихкоды",            Новый Соответствие);
	ДанныеПоШтрихкодам.Вставить("ВложенныеШтрихкоды",                 Неопределено);
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ВидыПродукции",                      Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ЗначенияШтрихкодовПоВидуПродукции",  Новый Соответствие);
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибкиВДеревеУпаковок",          Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибки",                         Ложь);
	ДанныеПоШтрихкодам.Вставить("ТекстОшибки",                        "");
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Выполняет поиск акцизных марок в дереве упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  ЗначенияШтрихкодов - Массив - Массив найденных штрихкодов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные штрихкоды.
Функция ЗначенияШтрихкодовИзДереваУпаковок(ДеревоУпаковок, ЗначенияШтрихкодов = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ЗначениеШтрихкода", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЗначенияШтрихкодовИзДереваУпаковок(
			СтрокаДерева,
			Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.ЗначениеШтрихкода) Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = СтрокаДерева.ЗначениеШтрихкода;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РезультатВыбора",             РезультатВыбора);
	ПараметрыВыбора.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
	ПараметрыВыбора.Вставить("КэшированныеЗначения",        КэшированныеЗначения);
	
	Возврат ПараметрыВыбора;

КонецФункции

Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	РезультатВыполнения = Неопределено;
	ВидыПродукции = Параметры.РезультатОбработкиШтрихкода.ВидыПродукции;
	Если ЕстьАлкогольнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатВыполнения = МодульШтрихкодированиеЕГАИС.ВыполнитьДействие(Форма, Действие, Параметры);
	ИначеЕсли ЕстьТабачнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатВыполнения = МодульШтрихкодированиеМОТП.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Структура, описывающая результат обработки штрихкода.
// 
// Параметры:
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// 	ДанныеШтрихкода - Неопределено, Структура - Результат анализа штрихкода, все данные, которые удалось по нему собрать.
// Возвращаемое значение:
// 	Структура - Описание:
// * ВидыПродукции - Массив - Массив видов продукции ИС.
// * ИзмененныеСтроки - Массив - Строки документа, которые были изменены в процессе обработки штрихкодов.
// * ДобавленныеСтроки - Массив - Строки документа, которые были добавлены в процессе обрабработки штрихкодов.
// * ОшибкаШтрихкодУжеДобавлен - Булево - Признак, указывающий, что обрабатываемый штрихкод был добавлен в документ ранее.
// * ОшибкаВидаПродукции - Булево - Признак, указывающий, что штрихкод относится к виду продукции, который не поддерживается.
// * ДополнительныеПараметры - Неопределено -
// * ЕстьОшибкиВДеревеУпаковок - Булево - Признак, указывающий, что где-то в дереве упаковок присутствует ошибка.
// * АдресДереваУпаковок - Строка - Адрес временного хранилища, где хранится дерево упаковок.
// * ТекстОшибки - Строка - Текст ошибки, на которую стоит обратить внимание.
// * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// * Штрихкод - Строка - Значение штрихкода.
// * ЕстьОшибки - Булево - Признак, указывающий, что есть ошибки в данных штрихкода.
// * ШтрихкодыПродукцииДляСопоставления - Неопределено, Массив - Массив неизвестных штрихкодов EAN, которые необходимо сопоставить перед обработкой.
// * ТребуетсяСопоставлениеНоменклатуры - Булево - Признак, указывающий на то, что перед обработкой необходимо сопоставить номенклатуру штрихкодам EAN.
// * ИсходныеДанные - Произвольный - Данные, которые поступили на вход для обработки.
// * ТребуетсяОбработкаШтрихкода - Булево - Признак, указывающий, что данные штрихкода не удалось обработать по стандартному алгоритму.
// * ТребуетсяВыборНоменклатуры - Булево - Признак, указывающий на необходимость выбора номенклатуры.
// * ПараметрыВыбораНоменклатуры - Структура - Параметры, участавющие в отборе при выборе номенклатуры в диалоговом окне.
// * АдресДанныхШтрихкода - Строка - Адрес временного хранилища, где хранится данные штрихкода.
Функция ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования = Неопределено, ДанныеШтрихкода = Неопределено) Экспорт
	
	ВидыПродукции = Неопределено;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.ВидыПродукции.Количество() > 0 Тогда
		ВидыПродукции = ДанныеШтрихкода.ВидыПродукции;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Новый Структура;
	
	// Для выбора значений на клиенте.
	РезультатОбработкиШтрихкода.Вставить("АдресДанныхШтрихкода",               "");
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораНоменклатуры",        Новый Структура);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборНоменклатуры",         Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные");
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяСопоставлениеНоменклатуры", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ШтрихкодыПродукцииДляСопоставления", Неопределено);
	
	// Для вывода сообщения об ошибке.
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибки",                  Ложь);
	РезультатОбработкиШтрихкода.Вставить("Штрихкод",                    "");
	РезультатОбработкиШтрихкода.Вставить("ТипШтрихкода",                Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТипУпаковки",                 Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТекстОшибки",                 "");
	РезультатОбработкиШтрихкода.Вставить("АдресДереваУпаковок",         "");
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибкиВДеревеУпаковок",   Ложь);
	РезультатОбработкиШтрихкода.Вставить("ДополнительныеПараметры",     Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ОбщаяОшибка",                 Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаШтрихкодУжеДобавлен",   Ложь);
	
	// Для обработки строк табличной части.
	РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтроки",           Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ИзмененныеСтроки",            Новый Массив);
	
	РезультатОбработкиШтрихкода.Вставить("ВидыПродукции",               Новый Массив);
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат РезультатОбработкиШтрихкода;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено Тогда
		РезультатОбработкиШтрихкода.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ВидыПродукции = ВидыПродукции;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") И ЕстьАлкогольнаяПродукцияВКоллекции(ВидыПродукции)Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьКоллекциюРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.МОТП") И ЕстьТабачнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьКоллекциюРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Инициализирует структуру, которая будет содержать в себе всю собранную и проанализированную информацию 
// по значению штрихкода.
// 
// Параметры:
// 	ПараметрыСканирования - Структура, Структура, Структура, Структура, Структура, Неопределено, Структура, Структура, Структура, Структура, Структура, Структура, Структура, Структура, Структура, Структура, Структура, Структура, Структура - Описание:
// * ИдентификаторФормы - UUID -
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Boolean -
// * ДанныеВыбораПоМаркируемойПродукции - Undefined -
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Boolean -
// * АдресДанныхДокументаОснования - Undefined -
// * КонтрольРасхожденийСДокументомОснованием - Boolean -
// * КэшированныеЗначения - Undefined -
// * ТолькоМаркируемаяПродукция - Boolean -
// * ВозможнаЗагрузкаТСД - Boolean -
// * ДокументОснование - Undefined -
// * СоздаватьШтрихкодУпаковки - Boolean -
// * АдресСоответствияАкцизныхМарок - Undefined -
// * ДопустимыеВидыПродукции - Array -
// Возвращаемое значение:
// 	Структура - Описание:
// * МаркируемаяПродукция - Неопределено -
// * ВидыПродукции - Массив -
// * ДополнительныеПараметры - Неопределено -
// * ШтрихкодУпаковки - Неопределено -
// * Штрихкод - Неопределено -
// * Упаковка - Неопределено -
// * ТипШтрихкода - Неопределено -
// * ТипУпаковки - Неопределено -
// * ТекстОшибки - Неопределено -
// * МаркированныеТовары - Массив -
// * Количество - Число -
// * ВложенныеШтрихкоды - Соответствие -
// * ПредставлениеНоменклатуры - Строка -
// * Серия - Неопределено -
// * Характеристика - Неопределено -
// * Номенклатура - Неопределено -
Функция ИнициализироватьДанныеШтрихкода(ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеШтрихкода = Новый Структура;
	
	ДанныеШтрихкода.Вставить("Номенклатура",            Неопределено);
	ДанныеШтрихкода.Вставить("Характеристика",          Неопределено);
	ДанныеШтрихкода.Вставить("Серия",                   Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеНоменклатуры", "");
	ДанныеШтрихкода.Вставить("ВложенныеШтрихкоды",      Новый Соответствие);
	ДанныеШтрихкода.Вставить("Количество",              0);
	ДанныеШтрихкода.Вставить("МаркированныеТовары",     Новый Массив);
	ДанныеШтрихкода.Вставить("ТекстОшибки",             Неопределено);
	ДанныеШтрихкода.Вставить("ТипУпаковки",             Неопределено);
	ДанныеШтрихкода.Вставить("ТипШтрихкода",            Неопределено);
	ДанныеШтрихкода.Вставить("Упаковка",                Неопределено);
	ДанныеШтрихкода.Вставить("Штрихкод",                Неопределено);
	ДанныеШтрихкода.Вставить("ШтрихкодУпаковки",        Неопределено);
	ДанныеШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	ДанныеШтрихкода.Вставить("ВидыПродукции",           Новый Массив);
	ДанныеШтрихкода.Вставить("МаркируемаяПродукция",    Неопределено);
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьСвойстваКоллекцииДанныеШтрихкода(ДанныеШтрихкода);
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьСвойстваКоллекцииДанныеШтрихкода(ДанныеШтрихкода);
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

Функция КолонкиТаблицыМаркированныеТовары() Экспорт
	
	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	КоллекцияОбязательныхКолонок.Вставить("СтрокаДерева");
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

Функция КолонкиДереваУпаковок() Экспорт
	
	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	
	КоллекцияОбязательныхКолонок.Вставить("ТипУпаковки",  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ХешСумма",     Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ЕстьОшибки",   Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ТекстОшибки",  ОбщегоНазначения.ОписаниеТипаСтрока(300));
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

Функция ИнициализироватьТаблицуМаркированныеТовары() Экспорт
	
	КолонкиТаблицы = КолонкиТаблицыМаркированныеТовары();
	
	МаркированныеТовары = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из КолонкиТаблицы Цикл
		
		МаркированныеТовары.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Возврат МаркированныеТовары;
	
КонецФункции

Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	КолонкиДереваУпаковок = КолонкиДереваУпаковок();
	ДеревоУпаковок = Новый ДеревоЗначений;
	
	Для Каждого КлючЗначение Из КолонкиДереваУпаковок Цикл
		
		ДеревоУпаковок.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение)
		
	КонецЦикла;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

Функция РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") И ЕстьАлкогольнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.МОТП") И ЕстьТабачнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

Функция ДанныеПоШтрихкодамEAN(ШтрихкодыEAN) Экспорт
	
	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Номенклатура",              Неопределено);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Характеристика",            Неопределено);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЗначениеШтрихкодаEAN",      Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидПродукции",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Для Каждого ШтрихкодEAN Из ШтрихкодыEAN Цикл
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		НоваяСтрока.ЗначениеШтрихкодаEAN = ШтрихкодEAN;
	КонецЦикла;

	ШтрихкодированиеИСПереопределяемый.ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN);

	Возврат ДанныеПоШтрихкодамEAN;

КонецФункции

Функция ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	Если Не ЕстьОшибки Тогда
		
		Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			МодульШтрихкодированиеЕГАИС.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Получение информации по коллекции штрихкодов.
// 
// Параметры:
// 	Штрихкоды - Массив - коллекция штрихкодов
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// 	КэшированныеЗначения - Неопределено - Описание
// Возвращаемое значение:
// 	Структура - см. ИнициализацияДанныхПоШтрихкодам.
Функция ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	ИдентифицироватьЗначенияШтрихкодов(Штрихкоды, ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ЗаполнитьДанныеМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если Не ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Или ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли; 
	
	Если Не ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	НеобработанныеШтрихкодыУпаковок = НеобработанныеШтрихкоды(ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, ПараметрыСканирования);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.НеобработанныеШтрихкоды, НеобработанныеШтрихкодыУпаковок, Истина);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

Функция ВидыПродукцииПоддерживаются(ВидыПродукции, ПараметрыСканирования) Экспорт
	
	ВидыПродукцииПоддерживаются = Истина;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
			ВидыПродукцииПоддерживаются = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыПродукцииПоддерживаются;
	
КонецФункции

Процедура ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт

	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
		
	Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗакэшироватьОбработанныеШтрихкоды(Форма, ДанныеШтрихкода, РезультатДобавления, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если РезультатДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресСоответствияАкцизныхМарок") Тогда
		Возврат;
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Если РезультатДобавления.ЕстьОшибкиВДеревеУпаковок Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(Форма.АдресСоответствияАкцизныхМарок) Тогда
			
			МаркируемаяПродукцияДокумента = ПолучитьИзВременногоХранилища(Форма.АдресСоответствияАкцизныхМарок);
			ПоместитьДанныеСтрокДереваВСоответствие(ВложенныеШтрихкоды.ДеревоУпаковок.Строки, МаркируемаяПродукцияДокумента);
			ПоместитьВоВременноеХранилище(МаркируемаяПродукцияДокумента, Форма.АдресСоответствияАкцизныхМарок);
			
		Иначе
			
			МаркируемаяПродукцияДокумента = Новый Соответствие;
			ПоместитьДанныеСтрокДереваВСоответствие(ВложенныеШтрихкоды.ДеревоУпаковок.Строки, МаркируемаяПродукцияДокумента);
			Форма.АдресСоответствияАкцизныхМарок = ПоместитьВоВременноеХранилище(МаркируемаяПродукцияДокумента, Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(РезультатДобавления.ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(Форма.АдресСоответствияАкцизныхМарок) Тогда
			
			МаркируемаяПродукцияДокумента = ПолучитьИзВременногоХранилища(Форма.АдресСоответствияАкцизныхМарок);
			МаркируемаяПродукцияДокумента.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
			ПоместитьВоВременноеХранилище(МаркируемаяПродукцияДокумента, Форма.АдресСоответствияАкцизныхМарок);
			
		Иначе
			
			АкцизныеМаркиВДокументе = Новый Соответствие;
			АкцизныеМаркиВДокументе.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
			
			Форма.АдресСоответствияАкцизныхМарок = ПоместитьВоВременноеХранилище(АкцизныеМаркиВДокументе, Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
			
			ТаблицаДанныхДокументаОснования = Новый ТаблицаЗначений;
			ТаблицаДанныхДокументаОснования.Колонки.Добавить("Номенклатура");
			ТаблицаДанныхДокументаОснования.Колонки.Добавить("Характеристика");
			ТаблицаДанныхДокументаОснования.Колонки.Добавить("Серия");
			ТаблицаДанныхДокументаОснования.Колонки.Добавить("Количество");
			
			ШтрихкодированиеИСПереопределяемый.СформироватьДанныеДокументаОснования(
				ПараметрыСканирования, ТаблицаДанныхДокументаОснования);
			
			ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура");
			ТаблицаДанныхДокументаОснования.Индексы.Добавить("Характеристика");
			ТаблицаДанныхДокументаОснования.Индексы.Добавить("Серия");
			
			ПараметрыСканирования.АдресДанныхДокументаОснования = ПоместитьВоВременноеХранилище(
				ТаблицаДанныхДокументаОснования,
				ПараметрыСканирования.ИдентификаторФормы);
			
		Иначе
			
			ТаблицаДанныхДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
			
		КонецЕсли;
		
		Возврат ТаблицаДанныхДокументаОснования;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено;

КонецФункции

Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная) <> Неопределено;

КонецФункции

Процедура СохранитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	СохраняемыеНастройки = Новый Структура;
	СохраняемыеНастройки.Вставить("СохраненВыборПоМаркируемойПродукции", Форма.СохраненВыборПоМаркируемойПродукции);
	СохраняемыеНастройки.Вставить("ДанныеВыбораПоМаркируемойПродукции",  Форма.ДанныеВыбораПоМаркируемойПродукции);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Ссылка, "ДанныеВыбораМаркируемойПродукции", СохраняемыеНастройки);
	
КонецПроцедуры

Процедура ВосстановитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	НастройкиВыбораМаркируемойПродукции = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Ссылка, "ДанныеВыбораМаркируемойПродукции");
	Если НастройкиВыбораМаркируемойПродукции <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, НастройкиВыбораМаркируемойПродукции);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования) Экспорт
	
	РезультатПроверок = Новый Соответствие;
	
	Для Каждого ЗначениеШтрихкода Из СписокШтрихкодов Цикл
		
		РезультатПроверки = КонтрольНаДопустимыеВидыПродукции(ЗначениеШтрихкода, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(ЗначениеШтрихкода, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПроверкаШтрихкодаНаУжеДобавленный(ЗначениеШтрихкода, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(ЗначениеШтрихкода, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатПроверок.Количество() > 0 Тогда
		Возврат РезультатПроверок;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатПроверки = МодульШтрихкодированиеМОТП.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(ЗначениеШтрихкода, РезультатПроверки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверок;
	
КонецФункции

Функция GTINПоШтрихкодуEAN(Знач ШтрихкодEAN) Экспорт
	
	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

Функция ШтрихкодыУпаковокДокумента(Документ) Экспорт
	
	ШтрихкодыУпаковок = Новый Массив();
	
	ШтрихкодированиеИСПереопределяемый.ЗаполнитьШтрихкодыУпаковокДокумента(Документ, ШтрихкодыУпаковок);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

Функция ИнициализацияВложенныхШтрихкодов() Экспорт
	
	ВложенныеШтрихкоды = Новый Структура;
	
	ВложенныеШтрихкоды.Вставить("ДеревоУпаковок",                     ИнициализироватьДеревоУпаковок());
	ВложенныеШтрихкоды.Вставить("МаркированныеТовары",                ИнициализироватьТаблицуМаркированныеТовары());
	ВложенныеШтрихкоды.Вставить("ВидыПродукции",                      Новый Массив);
	ВложенныеШтрихкоды.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
// 	GTIN - Строка - GTIN.
// Возвращаемое значение:
// 	Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(GTIN) Экспорт
	
	// Пытаемся получить штрикод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

Функция ВложенныеШтрихкодыИзвестныхУпаковок(МассивУпаковок) Экспорт
	
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();

	Если МассивУпаковок.Количество() = 0 Тогда
		Возврат ВложенныеШтрихкоды;
	КонецЕсли;
	
	ВложенныеШтрихкоды = ДеревоУпаковокИМаркированныеТовары(МассивУпаковок);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

Функция РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(НеизвестныеШтрихкодыEAN) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
	НеизвестныеШтрихкодыEANДляОбработки                   = Новый Массив;
	
	Для Каждого Элемент Из НеизвестныеШтрихкодыEAN Цикл
		НеизвестныеШтрихкодыEANДляОбработки.Добавить(Новый Структура("Штрихкод, Количество", Элемент, 1));
	КонецЦикла;
	РезультатОбработки.ШтрихкодыПродукцииДляСопоставления = НеизвестныеШтрихкодыEANДляОбработки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		РезультатОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ОбработатьДанныеШтрихкодаДляОбщейФормы(
			Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОбработки);
	Иначе
		МодульДляОбработки = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	КонецЕсли;
		
	ЗакэшироватьОбработанныеШтрихкоды(Форма, ДанныеШтрихкода, РезультатОбработки, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция МодульДляОбработки(Форма) Экспорт

	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		МодульДляОбработки = Форма;
	Иначе
		МодульДляОбработки = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Возврат МодульДляОбработки;
	
КонецФункции

Функция ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, ДобавлятьКоличество = Истина, ПараметрыСканирования = Неопределено) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДобавлятьКоличество",            ДобавлятьКоличество);
	ПараметрыЗаполнения.Вставить("ИзмененныеСтроки",               Новый Массив);
	ПараметрыЗаполнения.Вставить("ДобавленныеСтроки",              Новый Массив);
	ПараметрыЗаполнения.Вставить("УчитыватьСерии",                 Истина);
	ПараметрыЗаполнения.Вставить("ТекущаяСтрока",                  Неопределено);
	ПараметрыЗаполнения.Вставить("ЕстьКоличествоАкцизныхМарок",    Истина);
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий",         Неопределено);
	ПараметрыЗаполнения.Вставить("ИмяКолонкиКоличество",           "Количество");
	ПараметрыЗаполнения.Вставить("ИмяКолонкиКоличествоУпаковок",   "КоличествоУпаковок");
	ПараметрыЗаполнения.Вставить("ТипШтрихКода",                   Неопределено);
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыЗаполнения.Вставить("ПараметрыСканирования", ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(Форма));
	Иначе
		ПараметрыЗаполнения.Вставить("ПараметрыСканирования", ПараметрыСканирования);
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает вид продуции ИС по штрихкоду EAN
// 
// Параметры:
// 	ЗначениеШтрихкода - Строка - Штрихкода EAN
// Возвращаемое значение:
// 	Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС
Функция ВидПродукцииИСПоШтрихкодуНоменклатуры(ЗначениеШтрихкода)
	
	ШтрихкодыEAN = Новый Массив;
	ШтрихкодыEAN.Добавить(ЗначениеШтрихкода);
	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
		
	Если ДанныеПоШтрихкодамEAN.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ДанныеПоШтрихкодамEAN[0].ВидПродукции;
	
КонецФункции

Процедура ПоместитьДанныеСтрокДереваВСоответствие(СтрокиДерева, Соответствие)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДерева);
		Соответствие.Вставить(СтрокаДерева.ЗначениеШтрихкода, ДанныеШтрихкода);
		ПоместитьДанныеСтрокДереваВСоответствие(СтрокаДерева.Строки, Соответствие);
		
	КонецЦикла;
	
КонецПроцедуры

// Распознавание коллекции Штрихкоды и заполнение коллекции ДанныеПоШтрихкодам
// 
// Параметры:
// 	Штрихкоды - Массив, Массив - Коллекция штрихкодов.
// 	ДанныеПоШтрихкодам - Структура - См. ИнициализацияДанныхПоШтрихкодам.
// 	ПараметрыСканирования - Структура, Структура, Неопределено - см. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования
Процедура ИдентифицироватьЗначенияШтрихкодов(Штрихкоды, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДанныеПоШтрихкодам.ВсеШтрихкоды = Штрихкоды;
	
	Детализация = Неопределено;
	Если ПараметрыСканирования.Свойство("Детализация") И ПараметрыСканирования.Детализация <> Неопределено Тогда
		Детализация = ПараметрыСканирования.Детализация;
	КонецЕсли;
	
	ОбрабатыватьМаркируемуюПродукцию = ВедетсяУчетМаркируемойПродукции();
	
	Для Каждого ЗначениеШтрихкода Из Штрихкоды Цикл
		
		Если Не ОбрабатыватьМаркируемуюПродукцию Тогда
			
			ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Вставить(ЗначениеШтрихкода);
			Продолжить;
			
		КонецЕсли;
		
		ВидПродукцииИСПоШтрихкоду = ВидПродукцииИСПоШтрихкодуМаркировки(ЗначениеШтрихкода, Детализация);
		
		Если ВидПродукцииИСПоШтрихкоду <> Неопределено Тогда
			
			ШтрихкодВидПродукции = Новый Структура("Штрихкод, ВидПродукции", ЗначениеШтрихкода, ВидПродукцииИСПоШтрихкоду);
			ДанныеПоШтрихкодам.МаркируемаяПродукция.Добавить(ШтрихкодВидПродукции);
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(ВидПродукцииИСПоШтрихкоду);
			ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции.Вставить(ЗначениеШтрихкода, ВидПродукцииИСПоШтрихкоду);
			
		ИначеЕсли ЭтоКодУпаковки(ЗначениеШтрихкода) Тогда
			
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Добавить(ЗначениеШтрихкода);
			
		Иначе
			
			ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
			ДанныеШтрихкода.Количество = 1;
			ДанныеШтрихкода.Штрихкод   = ЗначениеШтрихкода;
			ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Вставить(ЗначениеШтрихкода, ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВидПродукцииИСПоШтрихкоду = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоШтрихкодам.ВидыПродукции);
	
	ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления = ШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам.МаркируемаяПродукция);
	
КонецПроцедуры

Функция ЭтоКодУпаковки(ЗначениеШтрихкода)
	
	ЭтоКодУпаковки = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		ЭтоКодУпаковки = МодульШтрихкодированиеЕГАИСКлиентСервер.ЭтоШтрихкодЛогистическойУпаковки(ЗначениеШтрихкода);
		
	КонецЕсли;
	
	Если ЭтоКодУпаковки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.МОТП") Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		ЭтоКодУпаковки = МодульШтрихкодированиеМОТПКлиентСервер.ЭтоКодУпаковки(ЗначениеШтрихкода);
		
	КонецЕсли;
	
	Возврат ЭтоКодУпаковки;
	
КонецФункции

Функция ВедетсяУчетМаркируемойПродукции()
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП")
		Или ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
КонецФункции

Функция ШтрихкодыПродукцииДляСопоставления(МаркируемаяПродукция)
	
	МассивШтрихкодовEAN = Новый Массив;
	Для Каждого Структура Из МаркируемаяПродукция Цикл
		Если Структура.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
			
			ШтрихкодEAN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(Структура.Штрихкод);
			Если ЗначениеЗаполнено(ШтрихкодEAN) Тогда
				МассивШтрихкодовEAN.Добавить(ШтрихкодEAN);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СуществующиеШтрихкодыВРегистре = КоллеккцияСуществующихШтрихкодовВРегистре(МассивШтрихкодовEAN);
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивШтрихкодовEAN, СуществующиеШтрихкодыВРегистре);
	
КонецФункции

Функция КоллеккцияСуществующихШтрихкодовВРегистре(ШтрихкодыEAN)
	
	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	
	Возврат ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ЗначениеШтрихкодаEAN");
	
КонецФункции

Функция ВидПродукцииИСПоШтрихкодуМаркировки(ЗначениеШтрихкода, Детализация = Неопределено, УчитыватьЛогистическуюУпаковку = Ложь)
	
	ВидПродукцииИС = Неопределено;
	
	МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
	МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") 
		И МодульШтрихкодированиеЕГАИС.ЭтоШтрихкодАлкогольнойПродукции(ЗначениеШтрихкода, УчитыватьЛогистическуюУпаковку) Тогда
		
		ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.МОТП") Тогда
		Если Детализация = Неопределено И МодульШтрихкодированиеМОТП.ЭтоШтрихкодТабачнойПродукции(ЗначениеШтрихкода, Детализация, УчитыватьЛогистическуюУпаковку) Тогда
			
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табачная;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидПродукцииИС;
	
КонецФункции

Функция ОбщиеКолонкиКоллекцийВложенныхШтрихкодов()
	
	КоллекцияОбязательныхКолонок = Новый Структура;
	
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторСтроки",    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ШтрихкодУпаковки",       Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ЗначениеШтрихкода",      Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Номенклатура",           Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Характеристика",         Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Серия",                  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ВидПродукции",           Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("УпаковкаВерхнегоУровня", Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ТипШтрихкода",           Неопределено);
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

Функция ЕстьТабачнаяПродукцияВКоллекции(Коллекция)
	
	ТабачнаяПродукция = Перечисления.ВидыПродукцииИС.Табачная;
	
	Возврат Коллекция.Найти(ТабачнаяПродукция) <> Неопределено;
	
КонецФункции

Функция ЕстьАлкогольнаяПродукцияВКоллекции(Коллекция)
	
	АлкогольнаяПродукция = Перечисления.ВидыПродукцииИС.Алкогольная;
	
	Возврат Коллекция.Найти(АлкогольнаяПродукция) <> Неопределено;
	
КонецФункции

#Область ПроверкаНаОшибки

Процедура ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ВидыПродукцииНоменклатуры = КлючЗначение.Значение.ВидыПродукции;
		Если ВидыПродукцииНоменклатуры.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидПродукцииПоШтрихкоду = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции[КлючЗначение.Ключ];
		Если ВидПродукцииПоШтрихкоду <> Неопределено
			И ВидыПродукцииНоменклатуры.Найти(ВидПродукцииПоШтрихкоду) = Неопределено Тогда
			
			ЕстьОшибки   = Истина;
			ШаблонОшибки = НСтр("ru = 'Значение штрихкода соответствует виду %1';
								|en = 'Значение штрихкода соответствует виду %1'");
			КлючЗначение.Значение.ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидПродукцииПоШтрихкоду);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок) Тогда
		Возврат;
	КонецЕсли; 
	
	МаркируемаяПродукцияДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок);
	
	//Проверка для упаковок
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ПроверитьСтрокиДереваНаУжеДобавленные(ДеревоУпаковок.Строки, МаркируемаяПродукцияДокумента, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
	Иначе
		ОбработанныеШтрихкоды = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды;
		ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ОбработанныеШтрихкоды, МаркируемаяПродукцияДокумента, ЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Истина;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		НайтиСтрокиДереваСНедопустимымВидомПродукции(ДеревоУпаковок.Строки, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСтрокиДереваСНедопустимымВидомПродукции(СтрокиДерева, ПараметрыСканирования)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(СтрокаДерева.ВидПродукции) = Неопределено Тогда
			
			СтрокаДерева.ТекстОшибки = СтрШаблон(ШаблонОшибкиНеПоддерживаетсяВидПродукции(), СтрокаДерева.ВидПродукции);
			СтрокаДерева.ЕстьОшибки  = Истина;
			
		КонецЕсли;
		
		НайтиСтрокиДереваСНедопустимымВидомПродукции(СтрокаДерева.Строки, ПараметрыСканирования);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ОбработанныеШтрихкоды, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если ОбработанныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлюЗначение Из ОбработанныеШтрихкоды Цикл
		
		Если МаркируемаяПродукцияДокумента[КлюЗначение.Ключ] <> Неопределено Тогда
			КлюЗначение.Значение.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтрокиДереваНаУжеДобавленные(СтрокиДерева, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если МаркируемаяПродукцияДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если МаркируемаяПродукцияДокумента[СтрокаДерева.ЗначениеШтрихкода] <> Неопределено Тогда
			
			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		ПроверитьСтрокиДереваНаУжеДобавленные(СтрокаДерева.Строки, МаркируемаяПродукцияДокумента, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция КонтрольНаДопустимыеВидыПродукции(ЗначениеШтрихкода, ПараметрыСканирования)
	
	РезультатОбработки = Неопределено;
	
	ВидПродукцииИС = ВидПродукцииИСПоШтрихкодуМаркировки(ЗначениеШтрихкода, Неопределено, Истина);
	
	Если ВидПродукцииИС = Неопределено Тогда
		ВидПродукцииИС = ВидПродукцииИСПоШтрихкодуНоменклатуры(ЗначениеШтрихкода);
	КонецЕсли;
	
	Если ВидПродукцииИС = Неопределено Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка()
		И ПараметрыСканирования.ТолькоМаркируемаяПродукция Тогда
		
		ПредставлениеШтрихкода = Новый ФорматированнаяСтрока(ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(ЗначениеШтрихКода),
			Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,,"СкопироватьШтриховойКодВБуферОбмена");
			
		ШаблонОшибки = НСтр("ru = 'Штрихкод %1 не соответствует допустимому виду продукции.
			|Допустимые виды продукции: %2';
			|en = 'Штрихкод %1 не соответствует допустимому виду продукции.
			|Допустимые виды продукции: %2'");
		
		РезультатОбработки          = ИнициализироватьРезультатОбработкиШтрихкода();
		ПредставлениеВидовПродукции = ПредставлениеВидовПродукции(ПараметрыСканирования.ДопустимыеВидыПродукции);
		РезультатОбработки.ТекстОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеШтрихкода, ПредставлениеВидовПродукции);
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ОбщаяОшибка = Истина;
		
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
		
	ДопустимВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
	Если Не ДопустимВидПродукции Тогда
		
		РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
		ШаблонОшибки       = ШаблонОшибкиНеПоддерживаетсяВидПродукции();
		РезультатОбработки.ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидПродукцииИС);
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ОбщаяОшибка = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПроверкаШтрихкодаНаУжеДобавленный(ЗначениеШтрихкода, ПараметрыСканирования)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МаркируемаяПродукцияДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок);
	Если Не ЗначениеЗаполнено(МаркируемаяПродукцияДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДанныеШтрихкода = МаркируемаяПродукцияДокумента.Получить(ЗначениеШтрихкода);
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеШтрихкода.ТекстОшибки             = ТекстОшибкиУжеДобавленаВДокумент();
	РезультатОбработки                      = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, ПараметрыСканирования.ИдентификаторФормы);
	РезультатОбработки.ЕстьОшибки           = Истина;
	РезультатОбработки.ОбщаяОшибка          = Истина;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ШаблонОшибкиНеПоддерживаетсяВидПродукции()
	
	Возврат НСтр("ru = 'Вид продукции: %1.';
				|en = 'Вид продукции: %1.'");
	
КонецФункции

Функция ПредставлениеВидовПродукции(ВидыПродукции)
	
	Представление = "";
	Разделитель   = "";
	
	Для Каждого Элемент Из ВидыПродукции Цикл
		
		Представление = Представление + Разделитель + Элемент;
		Разделитель = ", ";
		
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область ФормированиеИОбработкаРезультатаДобавления

Функция РезультатДобавленияШтрихкодаДанныеНеНайдены(ИсходныеДанные)

	РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатДобавления.ИсходныеДанные = ИсходныеДанные; 
	РезультатДобавления.ТребуетсяОбработкаШтрихкода = Истина;
	
	Возврат РезультатДобавления;

КонецФункции

Функция РезультатДобавленияШтрихкодаПриОшибках(Форма, ДанныеШтрихкодов, ДанныеШтрихкода, ПараметрыСканирования)
	
	Если ДанныеШтрихкодов.ЕстьОшибки Тогда
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатДобавления.ТекстОшибки = ДанныеШтрихкодов.ТекстОшибки;
		РезультатДобавления.ЕстьОшибки  = ДанныеШтрихкодов.ЕстьОшибки;
		РезультатДобавления.ОбщаяОшибка = Истина;
		
		Возврат РезультатДобавления;
	КонецЕсли;
	
	//Условие для дерева.
	Если ШтрихкодированиеИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.Штрихкод                  = ДанныеШтрихкода.Штрихкод;
		РезультатДобавления.ТипШтрихкода              = ДанныеШтрихкода.ТипШтрихкода;
		РезультатДобавления.АдресДереваУпаковок       = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, Форма.УникальныйИдентификатор);
		РезультатДобавления.ЕстьОшибкиВДеревеУпаковок = ДанныеШтрихкодов.ЕстьОшибкиВДеревеУпаковок;
		
		Если Не ВидыПродукцииПоддерживаются(ДанныеШтрихкодов.ВидыПродукции, ПараметрыСканирования) Тогда
			РезультатДобавления.ОшибкаВидаПродукции = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") И ЕстьАлкогольнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукцииПриОшибках(ДанныеШтрихкода);
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.МОТП") И ЕстьТабачнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаДляПолученияСоставаУпаковокВИерархии()
	
	ТекстЗапроса = "ВЫБРАТЬ 
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ 
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ 
	|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивУпаковок)
	|;
	|
	|ВЫБРАТЬ
	|	ИсходныеДанные.ШтрихкодУпаковки                     КАК УпаковкаУровень0,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|	ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0 КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 КАК УпаковкаУровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0 КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1 КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 КАК УпаковкаУровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.УпаковкаУровень0 КАК УпаковкаУровень0,
	|	ИсходныеДанные.УпаковкаУровень1 КАК УпаковкаУровень1,
	|	ИсходныеДанные.УпаковкаУровень2 КАК УпаковкаУровень2,
	|	ИсходныеДанные.УпаковкаУровень3 КАК УпаковкаУровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень0 ЕСТЬ NULL
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0                        КАК УпаковкаУровень0,
	|	""""                                                   КАК УпаковкаУровень0ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипШтрихкода           КАК УпаковкаУровень0ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипУпаковки            КАК УпаковкаУровень0ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень0.ЗначениеШтрихкода      КАК УпаковкаУровень0ЗначениеШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура           КАК УпаковкаУровень0Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика         КАК УпаковкаУровень0Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень0.Серия                  КАК УпаковкаУровень0Серия,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСумма               КАК УпаковкаУровень0ХешСумма,
	|	&ОпределениеВидаПродукции0                             КАК УпаковкаУровень0ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                        КАК УпаковкаУровень1,
	|	""""                                                   КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода           КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки            КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода      КАК УпаковкаУровень1ЗначениеШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура           КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика         КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия                  КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма               КАК УпаковкаУровень1ХешСумма,
	|	&ОпределениеВидаПродукции1                             КАК УпаковкаУровень1ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень2                        КАК УпаковкаУровень2,
	|	""""                                                   КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода           КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки            КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода      КАК УпаковкаУровень2ЗначениеШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура           КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика         КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия                  КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма               КАК УпаковкаУровень2ХешСумма,
	|	&ОпределениеВидаПродукции2                             КАК УпаковкаУровень2ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень3                        КАК УпаковкаУровень3,
	|	""""                                                   КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода           КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки            КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода      КАК УпаковкаУровень3ЗначениеШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура           КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика         КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия                  КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма               КАК УпаковкаУровень3ХешСумма,
	|	&ОпределениеВидаПродукции3                             КАК УпаковкаУровень3ВидПродукции
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	
	УровнейВЗапросе = 3;
	ШтрихкодированиеИСПереопределяемый.ОпределитьВидПродукцииТекстаЗапросаДереваУпаковок(ТекстЗапроса, УровнейВЗапросе);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса)
	
	ИмяВременнойТаблицы = ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки                  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодУпаковки                     КАК УпаковкаУровень0,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	&ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ИЗ
	|	&ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень0 ЕСТЬ NULL
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0                   КАК УпаковкаУровень0,
	|	ДанныеУпаковок.ИдентификаторСтроки                КАК УпаковкаУровень0ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипШтрихкода      КАК УпаковкаУровень0ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипУпаковки       КАК УпаковкаУровень0ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень0.ЗначениеШтрихкода КАК УпаковкаУровень0ЗначениеШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура      КАК УпаковкаУровень0Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика    КАК УпаковкаУровень0Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень0.Серия             КАК УпаковкаУровень0Серия,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСумма          КАК УпаковкаУровень0ХешСумма,
	|	&ОпределениеВидаПродукции0                        КАК УпаковкаУровень0ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                   КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1        КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода      КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки       КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода КАК УпаковкаУровень1ЗначениеШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура      КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика    КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия             КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма          КАК УпаковкаУровень1ХешСумма,
	|	&ОпределениеВидаПродукции1                        КАК УпаковкаУровень1ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень2                   КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2        КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода      КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки       КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода КАК УпаковкаУровень2ЗначениеШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура      КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика    КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия             КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма          КАК УпаковкаУровень2ХешСумма,
	|	&ОпределениеВидаПродукции2                        КАК УпаковкаУровень2ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень3                   КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3        КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода      КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки       КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода КАК УпаковкаУровень3ЗначениеШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура      КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика    КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия             КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма          КАК УпаковкаУровень3ХешСумма,
	|	&ОпределениеВидаПродукции3                        КАК УпаковкаУровень3ВидПродукции
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	

	УровнейВЗапросе = 3;
	ШтрихкодированиеИСПереопределяемый.ОпределитьВидПродукцииТекстаЗапросаДереваУпаковок(ТекстЗапроса, УровнейВЗапросе);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТВложенныеШтрихкодыИсходныеДанные", ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоОтсканированномуШК

// Описание
// 
// Параметры:
// 	ШтрихкодыВидыПродукции
// 	ПараметрыСканирования - Структура, Структура, Структура, Структура, Структура, Неопределено, Структура, Структура, Структура - Описание:
// * ИдентификаторФормы - UUID -
// * КэшированныеЗначения - Undefined -
// * ИдентификаторСтроки - Undefined -
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Boolean -
// * ДанныеВыбораПоМаркируемойПродукции - Undefined -
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Boolean -
// * Серия - Undefined -
// * Характеристика - Undefined -
// * Номенклатура - Undefined -
// * ДопустимыеВидыПродукции - Array -
// * АдресДанныхДокументаОснования - Undefined -
// * ЗапрашиватьНоменклатуру - Boolean -
// * КлючевыеРеквизиты - Array -
// * ВозможнаЗагрузкаТСД - Boolean -
// * ДокументОснование - Undefined -
// * КонтрольРасхожденийСДокументомОснованием - Boolean -
// * Операция - Undefined -
// * СоздаватьШтрихкодУпаковки - Boolean -
// * АдресСоответствияАкцизныхМарок - Undefined -
// 	ТипыУпаковок - Неопределено, Массив - Описание
// Возвращаемое значение:
// 	Соответствие - Описание
Процедура ЗаполнитьДанныеМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыМаркируемойПродукции = ДанныеПоШтрихкодам.МаркируемаяПродукция;
	Если ШтрихкодыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыКОбработке                = Новый Массив;
	СоответствиеШтрихкодаВидуПродукции = Новый Соответствие;
	
	Для Каждого ШтрихкодТипПродукции Из ШтрихкодыМаркируемойПродукции Цикл
		ШтрихкодыКОбработке.Добавить(ШтрихкодТипПродукции.Штрихкод);
		СоответствиеШтрихкодаВидуПродукции.Вставить(ШтрихкодТипПродукции.Штрихкод, ШтрихкодТипПродукции.ВидПродукции);
	КонецЦикла;
	
	ДанныеИзвестнойПродукции   = ДанныеИзвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, СоответствиеШтрихкодаВидуПродукции);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ДанныеИзвестнойПродукции);
	ДанныеНеизвестнойПродукции = ДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, СоответствиеШтрихкодаВидуПродукции, ПараметрыСканирования);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ДанныеНеизвестнойПродукции);
	
КонецПроцедуры

Функция ДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, СоответствиеШтрихкодаВидуПродукции, ПараметрыСканирования)
	
	ДанныеНеизвестнойПродукции                  = Новый Соответствие;
	НеобработанныеШтрихкодыАлкогольнойПродукции = Новый Массив;
	НеобработанныеШтрихкодыТабачнойПродукции    = Новый Массив;
	
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыКОбработке Цикл
		
		Если СоответствиеШтрихкодаВидуПродукции[ЗначениеШтрихкода] = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			НеобработанныеШтрихкодыАлкогольнойПродукции.Добавить(ЗначениеШтрихкода);
		ИначеЕсли (СоответствиеШтрихкодаВидуПродукции[ЗначениеШтрихкода] = Перечисления.ВидыПродукцииИС.Табачная) Тогда 
			НеобработанныеШтрихкодыТабачнойПродукции.Добавить(ЗначениеШтрихкода);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		ДанныеНеизвестнойАлкогольнойПродукции = МодульШтрихкодированиеЕГАИС.ДанныеНеизвестнойМаркируемойПродукции(НеобработанныеШтрихкодыАлкогольнойПродукции, ПараметрыСканирования);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойАлкогольнойПродукции);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.МОТП") Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		ДанныеНеизвестнойТабачнойПродукции = МодульШтрихкодированиеМОТП.ДанныеНеизвестнойМаркируемойПродукции(НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойТабачнойПродукции);
	КонецЕсли;
	
	Возврат ДанныеНеизвестнойПродукции;
	
КонецФункции

Функция ДанныеИзвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, СоответствиеШтрихкодаВидуПродукции)
	
	ДанныеМаркируемойПродукции = Новый Соответствие;
	
	ТипыУпаковок = Новый Массив;
	ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	Запрос = ИнициализацияЗапросаШтрихкодыУпаковок(ТипыУпаковок);
	Запрос.УстановитьПараметр("СписокЗначенийШтрихкодов", ШтрихкодыКОбработке);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	ТаблицаШтрихкодовУпаковок = РезультатЗапроса.Выгрузить();
	
	ОбработанныеШтрихкоды = Новый Массив;
	Для Каждого Строка Из ТаблицаШтрихкодовУпаковок Цикл
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, Строка);
		ДанныеШтрихкода.Штрихкод = Строка.ЗначениеШтрихкода;
		
		Если ЗначениеЗаполнено(Строка.ВидПродукции) Тогда
			ВидПродукции = Строка.ВидПродукции;
		Иначе
			ВидПродукции = СоответствиеШтрихкодаВидуПродукции.Получить(Строка.ЗначениеШтрихкода);
		КонецЕсли;
		
		ДанныеШтрихкода.ВидыПродукции.Добавить(ВидПродукции);
		ДанныеМаркируемойПродукции.Вставить(Строка.ЗначениеШтрихкода, ДанныеШтрихкода);
		ОбработанныеШтрихкоды.Добавить(Строка.ЗначениеШтрихкода);
	КонецЦикла;
	
	ШтрихкодыКОбработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ШтрихкодыКОбработке, ОбработанныеШтрихкоды);
	
	Возврат ДанныеМаркируемойПродукции;
	
КонецФункции

Функция ИнициализацияЗапросаШтрихкодыУпаковок(ТипыУпаковок = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
	|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия
	|ПОМЕСТИТЬ ШтрихкодыУпаковокТоваров
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&СписокЗначенийШтрихкодов)
	|	И &УсловиеПоТипамУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.ДатаУпаковки) КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода      КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ МаксимальныеДатыУпаковки
	|ИЗ
	|	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&СписокЗначенийШтрихкодов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
	|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия,
	|	&ОпределениеВидаПродукции                  КАК ВидПродукции
	|ИЗ
	|	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДатыУпаковки КАК МаксимальныеДатыУпаковки
	|		ПО ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = МаксимальныеДатыУпаковки.ЗначениеШтрихкода
	|			И ШтрихкодыУпаковокТоваров.ДатаУпаковки = МаксимальныеДатыУпаковки.ДатаУпаковки
	|");
	ШтрихкодированиеИСПереопределяемый.ОпределитьВидПродукцииТекстаЗапроса(Запрос.Текст);
	
	Если ЗначениеЗаполнено(ТипыУпаковок) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоТипамУпаковок", " ШтрихкодыУпаковокТоваров.ТипУпаковки В(&ТипыУпаковок)");
		Запрос.УстановитьПараметр("ТипыУпаковок", ТипыУпаковок);
	Иначе
		Запрос.УстановитьПараметр("УсловиеПоТипамУпаковок", Истина);
	КонецЕсли;
		
	Возврат Запрос;
	
КонецФункции

Функция СформироватьОбработанныеШтрихкодыПоВложенным(ВложенныеШтрихкоды)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	
	ОбработанныеШтрихкоды = Новый Соответствие;
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоУпаковок.Строки Цикл
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода();
		ДанныеШтрихкода.Штрихкод         = СтрокаВерхнегоУровня.ЗначениеШтрихкода;
		ДанныеШтрихкода.ШтрихкодУпаковки = СтрокаВерхнегоУровня.ШтрихкодУпаковки;
		ДанныеШтрихкода.ТипШтрихкода     = СтрокаВерхнегоУровня.ТипШтрихкода;
		ДанныеШтрихкода.ТипУпаковки      = СтрокаВерхнегоУровня.ТипУпаковки;
		ДанныеШтрихкода.Номенклатура     = СтрокаВерхнегоУровня.Номенклатура;
		ДанныеШтрихкода.Характеристика   = СтрокаВерхнегоУровня.Характеристика;
		ДанныеШтрихкода.Серия            = СтрокаВерхнегоУровня.Серия;
		ДанныеШтрихкода.ВидыПродукции    = ВложенныеШтрихкоды.ВидыПродукции;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УпаковкаВерхнегоУровня", СтрокаВерхнегоУровня);
		НайденныеСтроки = МаркированныеТовары.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаМаркированныеТовары Из НайденныеСтроки Цикл
			
			ДанныеМаркированногоТовара = Новый Структура;
			Для Каждого Колонка Из МаркированныеТовары.Колонки Цикл
				Если ТипЗнч(СтрокаМаркированныеТовары[Колонка.Имя]) <> Тип("СтрокаДереваЗначений") Тогда
					ДанныеМаркированногоТовара.Вставить(Колонка.Имя, СтрокаМаркированныеТовары[Колонка.Имя]);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеШтрихкода.МаркированныеТовары.Добавить(ДанныеМаркированногоТовара);
			
		КонецЦикла;
		
		ОбработанныеШтрихкоды.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		
	КонецЦикла;
	
	Возврат ОбработанныеШтрихкоды;
	
КонецФункции

Процедура ЗаполнитьСтрокуДереваУпаковокПоВыборке(СтрокаДерева, Выборка, Уровень)
	
	СтрокаДерева.ШтрихкодУпаковки    = Выборка["УпаковкаУровень" + Уровень];
	СтрокаДерева.ИдентификаторСтроки = Выборка["УпаковкаУровень" + Уровень + "ИдентификаторСтроки"];
	СтрокаДерева.ТипУпаковки         = Выборка["УпаковкаУровень" + Уровень + "ТипУпаковки"];
	СтрокаДерева.ТипШтрихкода        = Выборка["УпаковкаУровень" + Уровень + "ТипШтрихкода"];
	СтрокаДерева.ЗначениеШтрихкода   = Выборка["УпаковкаУровень" + Уровень + "ЗначениеШтрихкода"];
	СтрокаДерева.Номенклатура        = Выборка["УпаковкаУровень" + Уровень + "Номенклатура"];
	СтрокаДерева.Характеристика      = Выборка["УпаковкаУровень" + Уровень + "Характеристика"];
	СтрокаДерева.ХешСумма            = Выборка["УпаковкаУровень" + Уровень + "ХешСумма"];
	СтрокаДерева.Серия               = Выборка["УпаковкаУровень" + Уровень + "Серия"];
	СтрокаДерева.ВидПродукции        = Выборка["УпаковкаУровень" + Уровень + "ВидПродукции"];
	
КонецПроцедуры

Функция НайтиУпаковкиПоШтрихкодам(ДанныеПоШтрихкодам)
	
	ТипыУпаковокДляКоробок = ШтрихкодированиеИСКлиентСервер.ТипыУпаковокДляКоробок();
	Запрос = ИнициализацияЗапросаШтрихкодыУпаковок(ТипыУпаковокДляКоробок);
	Запрос.УстановитьПараметр("СписокЗначенийШтрихкодов", ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	ТаблицаШтрихкодовУпаковок = РезультатЗапроса.Выгрузить();
	
	НайденныеУпаковки = ТаблицаШтрихкодовУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок   = ТаблицаШтрихкодовУпаковок.ВыгрузитьКолонку("ЗначениеШтрихкода");
	ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок);
	
	Возврат НайденныеУпаковки;
	
КонецФункции

Процедура ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеУпаковки = НайтиУпаковкиПоШтрихкодам(ДанныеПоШтрихкодам);
	
	Если НайденныеУпаковки.Количество() > 0 Тогда
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок(НайденныеУпаковки);
		ОбработанныеШтрихкоды  = СформироватьОбработанныеШтрихкодыПоВложенным(ДанныеПоШтрихкодам.ВложенныеШтрихкоды);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ОбработанныеШтрихкоды);
		ВидыПродукцииДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ВидыПродукции;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукцииДерева, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ОбработатьШтрихкодыНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкоды) Экспорт
	
	Если ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ОбработанныеШтрихкоды.Количество() = 0 Тогда
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		
		Возврат;
		
	КонецЕсли;
	
	ДеревоИзвестныхУпаковок       = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	ДеревоУпаковокПоДаннымСервиса = ВложенныеШтрихкоды.ДеревоУпаковок;
	СоответствиеСтарыхИНовыхСтрокДерева = Новый Соответствие;
	СкопироватьСтрокиДерева(ДеревоИзвестныхУпаковок, ДеревоУпаковокПоДаннымСервиса, СоответствиеСтарыхИНовыхСтрокДерева);
	
	МаркированныеТоварыИзвестныхУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
	МаркированныеТоварыПоДаннымСервиса   = ВложенныеШтрихкоды.МаркированныеТовары;
	Для Каждого СтрокаПоДаннымСервиса Из МаркированныеТоварыПоДаннымСервиса Цикл
		
		НоваяСтрока = МаркированныеТоварыИзвестныхУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоДаннымСервиса);
		НоваяСтрока.СтрокаДерева = СоответствиеСтарыхИНовыхСтрокДерева.Получить(СтрокаПоДаннымСервиса.СтрокаДерева);
		НоваяСтрока.УпаковкаВерхнегоУровня = СоответствиеСтарыхИНовыхСтрокДерева.Получить(СтрокаПоДаннымСервиса.УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьСтрокиДерева(СтрокаДереваПриемник, СтрокаДереваИсточник, СоответствиеСтарыхИНовыхСтрокДерева)
	
	Для Каждого СтрокаИсточника Из СтрокаДереваИсточник.Строки Цикл
		
		НоваяСтрока = СтрокаДереваПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		СоответствиеСтарыхИНовыхСтрокДерева.Вставить(СтрокаИсточника, НоваяСтрока);
		СкопироватьСтрокиДерева(НоваяСтрока, СтрокаИсточника, СоответствиеСтарыхИНовыхСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыФункции

Функция СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = КэшУпаковокВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, КэшУпаковокВерхнегоУровня);
		
		КэшУпаковокВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);
		
		Возврат УпаковкаВерхнегоУровня;
		
	Иначе
		
		Возврат СтрокаДерева;
		
	КонецЕсли;
	
КонецФункции

Функция ТекстОшибкиУжеДобавленаВДокумент()
	
	Возврат НСтр("ru = 'Уже добавлена в документ';
				|en = 'Уже добавлена в документ'");
	
КонецФункции

#КонецОбласти

#Область ПолучениеТекущихДанныхДокумента

Процедура ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования)
	
	МаркируемаяПродукцияДокумента = Неопределено;

	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок) Тогда
		Возврат;
	КонецЕсли;

	МаркируемаяПродукцияДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресСоответствияАкцизныхМарок);
	Если МаркируемаяПродукцияДокумента = Неопределено Тогда
		
		ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма.Объект.Товары, Форма.Объект.АкцизныеМарки);
		
		МаркируемаяПродукцияДокумента = Новый Соответствие;
		КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, МаркируемаяПродукцияДокумента, ПараметрыСканирования);
		
		ПоместитьВоВременноеХранилище(МаркируемаяПродукцияДокумента, ПараметрыСканирования.АдресСоответствияАкцизныхМарок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоллекцияВсехШтрихкодовДерева(ДеревоУпаковок, МаркируемаяПродукцияДокумента, ПараметрыСканирования)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок Цикл
		
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, СтрокаДерева);
		ДанныеШтрихкода.Штрихкод = СтрокаДерева.ЗначениеШтрихкода;
		
		МаркируемаяПродукцияДокумента.Вставить(СтрокаДерева.ЗначениеШтрихкода, ДанныеШтрихкода);
		
		КоллекцияВсехШтрихкодовДерева(СтрокаДерева.Строки, МаркируемаяПродукцияДокумента, ПараметрыСканирования);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(ДанныеТовары, ДанныеМаркируемаяПродукция)
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
	
	Для Каждого СтрокаТЧ Из ДанныеМаркируемаяПродукция Цикл
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ.АкцизнаяМарка;
		НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ.ШтрихкодУпаковки;
		НоваяСтрока.ИдентификаторСтроки          = СтрокаТЧ.ИдентификаторСтроки;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	
	ТекстыЗапроса.Добавить(ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса), "ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

//Возвращает структуру с деревом и таблицей значений - ЕСТЬ СМЫСЛ ОБЪЕДИНИТЬ С СформироватьВложенныеШтрихкоды(...)
Функция ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц) 
	
	ВложенныеШтрихкоды  = ИнициализацияВложенныхШтрихкодов();
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня", Новый Соответствие);
	
	ПродолжатьПоиск    = Истина;
	НомерИтерации      = 1;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Если НомерИтерации = 1 Тогда
			
			Выборка = ВыборкаПерваяИтерация;
			
		Иначе
			
			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные2";
			
			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));
			
			ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстыЗапроса.Добавить(ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса),"ВложенныеШтрихкоды");
			
			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
			РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();
			
		КонецЕсли;
		
		ТаблицаШтрихкодов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковокПоВыборке(РодительскиеДанные, Выборка, ТекущийУровень);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					
					НоваяСтрока = ТаблицаШтрихкодов.Добавить();
					НоваяСтрока.ШтрихкодУпаковки     = Выборка.УпаковкаУровень3;
					НоваяСтрока.ИдентификаторСтроки  = Выборка.УпаковкаУровень3ИдентификаторСтроки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НомерИтерации   = НомерИтерации + 1;
		ПродолжатьПоиск = ТаблицаШтрихкодов.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Ключ.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

#КонецОбласти

Функция НеобработанныеШтрихкоды(ШтрихкодыНеизвестныхУпаковок, ПараметрыСканирования)
	
	НеобработанныеШтрихкоды = Новый Соответствие;
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыНеизвестныхУпаковок Цикл

		
		Если НеобработанныеШтрихкоды[ЗначениеШтрихкода] <> Неопределено Тогда
			НеобработанныеШтрихкоды[ЗначениеШтрихкода].Количество = НеобработанныеШтрихкоды[ЗначениеШтрихкода].Количество + 1;
			Продолжить;
		КонецЕсли;
			
		ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		ДанныеШтрихкода.Штрихкод   = ЗначениеШтрихкода;
		ДанныеШтрихкода.Количество = 1;
			
		НеобработанныеШтрихкоды.Вставить(ЗначениеШтрихкода, ДанныеШтрихкода); 
		
	КонецЦикла;
	
	Возврат НеобработанныеШтрихкоды;
	
КонецФункции

Функция ДопустимаАлкогольнаяПродукция(Контекст)
	
	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Алкогольная;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимаАлкогольнаяПродукция(Контекст);
	
КонецФункции

Функция ДопустимаТабачнаяПродукция(Контекст)
	
	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Табачная;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимаТабачнаяПродукция(Контекст);
	
КонецФункции

// Описание
// 
// Параметры:
// 	МассивУпаковок - Массив - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ДеревоУпаковок 
// * МаркированныеТовары 
Функция ДеревоУпаковокИМаркированныеТовары(МассивУпаковок)
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	
	Запрос       = Новый Запрос();
	Запрос.Текст = ТекстЗапросаДляПолученияСоставаУпаковокВИерархии();
	
	КоллекцияУпаковок = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивУпаковок);
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок", КоллекцияУпаковок);
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковокПоВыборке(РодительскиеДанные, Выборка, ТекущийУровень);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
						ВложенныеШтрихкоды.ВидыПродукции.Добавить(Выборка["УпаковкаУровень"+ТекущийУровень+"ВидПродукции"]);
						
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(Выборка["УпаковкаУровень"+ТекущийУровень]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Ключ.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВложенныеШтрихкоды.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВложенныеШтрихкоды.ВидыПродукции);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

Функция ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументСсылка",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьИдентификаторСтроки", Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяВременнойТаблицы",             "ВТВложенныеШтрихкодыИсходныеДанные");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗначенияВложенныхШтрихкодовАкцизныхМарок(АкцизныеМарки)
	
	ВложенныеЗначенияШтрихкодов = Новый Массив;
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ДеревоУпаковок = ИнициализироватьДеревоУпаковок();
	
	Запрос       = Новый Запрос();
	Запрос.Текст = ТекстЗапросаДляПолученияСоставаУпаковокВИерархии();
	
	КоллекцияУпаковок = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(АкцизныеМарки);
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок", КоллекцияУпаковок);
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						
						ВложенныеЗначенияШтрихкодов.Добавить(Выборка["УпаковкаУровень" + ТекущийУровень + "ЗначениеШтрихкода"]);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
						
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(Выборка["УпаковкаУровень"+ТекущийУровень]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	Возврат ВложенныеЗначенияШтрихкодов;
	
КонецФункции

Функция ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода, ПараметрыСканирования)
	
	ДанныеШтрихкодаЭталон = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
	ДанныеШтрихкодаСоответствуютФормату = Истина;
	
	Для Каждого КлючЗначение Из ДанныеШтрихкодаЭталон Цикл
		
		Если Не ДанныеШтрихкода.Свойство(КлючЗначение.Ключ) Тогда
			ДанныеШтрихкодаСоответствуютФормату = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеШтрихкодаСоответствуютФормату;
	
КонецФункции

Функция РезультатДобавленияШтрихкодаВДокумент(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования, ШтрихкодИКоличество, ЕстьОшибки)
	
	ДанныеШтрихкода    = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[ШтрихкодИКоличество.Штрихкод];
	ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	
	Если ЕстьОшибки Тогда
		Возврат РезультатДобавленияШтрихкодаПриОшибках(Форма, ДанныеПоШтрихкодам, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат РезультатДобавленияШтрихкодаДанныеНеНайдены(ШтрихкодИКоличество);
	КонецЕсли;
	
	Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		Возврат РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		Возврат ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
