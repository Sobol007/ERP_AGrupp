&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = НастройкиСистемыПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	
	РежимРаботы = Новый Структура;
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Обновление состояния элементов
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте

// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
	 ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
	 		И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
	 			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФормироватьОтчетностьПоНДСПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВестиОтдельнуюНумерациюСчетовФактурНаАвансыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИмпортныеТоварыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЗаполнениеНомеровГТДПриЗакупкеУПоставщикаПоСхемеТоварыВПутиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантКонтролироватьОстаткиНомеровГТДПриИмпортеПоСхемеТоварыВПутиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИмпортныеЗакупкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениямПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТДПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантЗапретитьПоступлениеТоваровБезНомеровГТДПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслугПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПродажиНаЭкспортНесырьевыхТоваровПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСТоварамиОблагаемымиНДСУПокупателяПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПокупкаТоваровОблагаемыхНДСУПокупателяПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТаможенныхДекларацийНаЭкспортПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Новый Структура);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если РеквизитПутьКДанным = "ВключитьВерсионированиеДокументовЗакупки" Тогда
			НаборКонстант.ИспользоватьВерсионированиеОбъектов = Истина;
			КонстантаИмя = "ИспользоватьВерсионированиеОбъектов";
		КонецЕсли;

	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если НастройкиСистемыПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьТоварыВПутиОтПоставщиков" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьТоварыВПутиОтПоставщиков;
		Элементы.ПроверятьЗаполнениеНомеровГТДПриЗакупкеУПоставщикаПоСхемеТоварыВПути.Доступность = ЗначениеКонстанты;
		Элементы.КонтролироватьОстаткиНомеровГТДПриИмпортеПоСхемеТоварыВПути.Доступность = ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьИмпортныеТовары" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьИмпортныеТовары;
		ИспользоватьТоварыВПутиОтПоставщиков = НаборКонстант.ИспользоватьТоварыВПутиОтПоставщиков;
		ИспользоватьИмпортныеЗакупки         = НаборКонстант.ИспользоватьИмпортныеТовары;
		
		Элементы.ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД.Доступность = ИспользоватьИмпортныеЗакупки;
		Элементы.ЗапретитьПоступлениеТоваровБезНомеровГТД.Доступность                    = ИспользоватьИмпортныеЗакупки;
		Элементы.ПроверятьЗаполнениеНомеровГТДПриЗакупкеУПоставщикаПоСхемеТоварыВПути.Доступность = ИспользоватьИмпортныеЗакупки;
		Элементы.КонтролироватьОстаткиНомеровГТДПриИмпортеПоСхемеТоварыВПути.Доступность = ИспользоватьИмпортныеЗакупки;
		
		Элементы.ПроверятьЗаполнениеНомеровГТДПриЗакупкеУПоставщикаПоСхемеТоварыВПути.Доступность = 
			ИспользоватьИмпортныеЗакупки И ИспользоватьТоварыВПутиОтПоставщиков;
		Элементы.КонтролироватьОстаткиНомеровГТДПриИмпортеПоСхемеТоварыВПути.Доступность = 
			ИспользоватьИмпортныеЗакупки И ИспользоватьТоварыВПутиОтПоставщиков;
		Элементы.ГруппаКомментарийЗапретитьПоступлениеТоваровОтПартнеровБезНомеровГТД.Видимость =
			ИспользоватьИмпортныеЗакупки И НЕ ИспользоватьТоварыВПутиОтПоставщиков;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьТоварыВПутиОтПоставщиков"
		Или РеквизитПутьКДанным = "" Тогда
		
		ИспользоватьТоварыВПутиОтПоставщиков = НаборКонстант.ИспользоватьТоварыВПутиОтПоставщиков;
		ИспользоватьИмпортныеЗакупки         = НаборКонстант.ИспользоватьИмпортныеТовары;
		
		Элементы.КонтролироватьОстаткиНомеровГТДПриИмпортеПоСхемеТоварыВПути.Доступность = 
			ИспользоватьИмпортныеЗакупки И ИспользоватьТоварыВПутиОтПоставщиков;
		Элементы.ГруппаКомментарийЗапретитьПоступлениеТоваровОтПартнеровБезНомеровГТД.Видимость =
			ИспользоватьИмпортныеЗакупки И НЕ ИспользоватьТоварыВПутиОтПоставщиков;
		
		Если НЕ ИспользоватьТоварыВПутиОтПоставщиков Тогда
			Константы.КонтролироватьОстаткиНомеровГТДПриИмпортеПоСхемеТоварыВПути.Установить(Ложь);
		КонецЕсли;
	КонецЕсли;

	//++ НЕ УТ
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПродажиНаЭкспортНесырьевыхТоваров" 
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ИспользоватьПродажиНаЭкспортНесырьевыхТоваров = НаборКонстант.ИспользоватьПродажиНаЭкспортНесырьевыхТоваров;
		ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг = НаборКонстант.ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг;
		
		ИспользоватьПродажиНаЭкспорт = (ИспользоватьПродажиНаЭкспортНесырьевыхТоваров ИЛИ  ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг);
		
		Если НЕ ИспользоватьПродажиНаЭкспорт Тогда
			Константы.ВестиУчетТаможенныхДекларацийНаЭкспорт.Установить(Ложь);
		КонецЕсли;
		
		Элементы.ВестиУчетТаможенныхДекларацийНаЭкспорт.Доступность = ИспользоватьПродажиНаЭкспорт;
		
	КонецЕсли;
	//-- НЕ УТ

	ОбменДаннымиУТУП.УстановитьДоступностьНастроекУзлаИнформационнойБазы(ЭтаФорма);
	
	ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным);
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным)
	
	СтруктураКонстант = Новый Структура(
	"КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям,
	|ИспользоватьИмпортныеТовары");
	
	Для Каждого КлючИЗначение Из СтруктураКонстант Цикл
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы[КлючИЗначение.Ключ],
			НаборКонстант[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти
