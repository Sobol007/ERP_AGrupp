
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Неопределено;
	Если Не Параметры.Свойство("МассивОбъектов", МассивОбъектов) Тогда
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.';en='Handling are not intended for immediate usage.'");
	КонецЕсли;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		ТаблицаОбъектов.Добавить().Объект = Ссылка;	
	КонецЦикла; 
	ТипПредмета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ссылка));
	
	Если Параметры.Свойство("ИмяТаблицы", ИмяТаблицы) Тогда
		МетаданныеСпискаОбъектов = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);	
		Если МетаданныеСпискаОбъектов <> Неопределено Тогда
			Элементы.ТаблицаОбъектовОбъект.Заголовок = МетаданныеСпискаОбъектов.Синоним;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтраницыВариантыНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ТипИсполнителя = "Пользователь";
	ТипИсполнителяПриИзмененииСервер();

	ПолучитьПараметрыНастройкиБизнесПроцессов();
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	КонтролироватьВыполнениеПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)

	Опопвещение = Новый ОписаниеОповещения("СформироватьЗавершение", ЭтотОбъект);	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не заполнена тема поручения.';en='The topic of the assignment is not completed.'"));
		Возврат;
		
	КонецЕсли;		
	Если ТипИсполнителя <> "Список" Тогда
		Если Не ЗначениеЗаполнено(Исполнитель) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не указан исполнитель. '"));
			Возврат;
		
		КонецЕсли;		
		
		ВыполнитьОбработкуОповещения(Опопвещение, КодВозвратаДиалога.Да);	
		
	Иначе	
		ПустыеСтроки = ТаблицаОбъектов.НайтиСтроки(
			Новый Структура("Исполнитель", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")));		
			
		Если ПустыеСтроки.Количество() = ТаблицаОбъектов.Количество() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'В списке не указано ни одного исполнителя. '"));
			Возврат;
		
		КонецЕсли;	
			
		Если ПустыеСтроки.Количество() > 0 Тогда
			ПоказатьВопрос(Опопвещение, НСтр("ru = 'Список содержит строки с незаполненным исполнителем. Такие строки будут пропущены. 
	                                          |Продолжить?'"), РежимДиалогаВопрос.ДаНет);		     
			
		Иначе
			ВыполнитьОбработкуОповещения(Опопвещение, КодВозвратаДиалога.Да);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗавершение(Результат, Контекст) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозварата = СформироватьСервер();
	Если ЗначениеЗаполнено(СтруктураВозварата.ТекстОшибки) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Формирование поручений...';en='Formation of commissions...'"),,
			НСтр("ru = 'Не удалось сформировать поручения. '"), БиблиотекаКартинок.Ошибка32);	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозварата.ТекстОшибки);
		
	Иначе		
		ПоказатьОповещениеПользователя(НСтр("ru='Формирование поручений...';en='Formation of commissions...'"),,
			НСтр("ru = 'Сформировано '" + СтруктураВозварата.МассивПоручений.Количество() + "' поручений. '"), БиблиотекаКартинок.Информация32);	
			
	КонецЕсли;
	
КонецПроцедуры // СформироватьЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)
	
	ПолучитьПараметрыНастройкиБизнесПроцессов();
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьИсполнителяТаблицыОбъектов();	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностнаяПозицияПриИзменении(Элемент)
	ЗаполнитьИсполнителяТаблицыОбъектов();	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбъектовПередУдалением(Элемент, Отказ)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалаПриИзменении(Элемент)
	СкорректироватьДатыЗадачи(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончанияПриИзменении(Элемент)	
	СкорректироватьДатыЗадачи(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВремяИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяИсполненияНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяИсполнения, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяИсполненияНачалоВыбораЗавершение(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяИсполнения = ВыбранноеВремя.Значение;		
		СрокИсполнения = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
		СкорректироватьДатыЗадачи(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонтроляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяКонтроляНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяКонтроля, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонтроляНачалоВыбораЗавершение(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяКонтроля = ВыбранноеВремя.Значение;
		СрокКонтроля = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
		СкорректироватьДатыЗадачи(Ложь);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьВыполнениеПриИзменении(Элемент)
	
	Элементы.Контролер.Доступность					= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.Контролер.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.АвтоОтметкаНезаполненного= КонтролироватьВыполнение;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеПроцедурыФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ПолучитьПараметрыНастройкиБизнесПроцессов()
	ПараметрыНастройкиБизнесПроцессов = Справочники.CRM_СценарииВыполненияПоручений.ПараметрыНастройки(Настройка);
КонецПроцедуры // ПолучитьПараметрыНастройкиБизнесПроцессов()

&НаСервере
Процедура ЗаполнитьИсполнителяТаблицыОбъектов()
	
	Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
		СтрокаОбъекта.Исполнитель = Неопределено;	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИсполнителяТаблицыОбъектов()

&НаСервере
Функция СформироватьСервер()

	Результат = Новый Структура("ТекстОшибки, МассивПоручений", "", Новый Массив);	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаОбъектов.Объект КАК Объект,
	                      |	ТаблицаОбъектов.Исполнитель КАК Исполнитель
	                      |ПОМЕСТИТЬ ТаблицаОбъектов
	                      |ИЗ
	                      |	&ТаблицаОбъектов КАК ТаблицаОбъектов
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблицаОбъектов.Объект КАК Объект,
	                      |	ТаблицаОбъектов.Исполнитель КАК Исполнитель
	                      |ИЗ
	                      |	ТаблицаОбъектов КАК ТаблицаОбъектов
	                      |ИТОГИ ПО
	                      |	Исполнитель");
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", РеквизитФормыВЗначение("ТаблицаОбъектов", Тип("ТаблицаЗначений")));
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("Дата", ТекущаяДата());
		ПараметрыФормирования.Вставить("ДатаИсполнения", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения));
		ПараметрыФормирования.Вставить("ДатаКонтроля", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля));
		ПараметрыФормирования.Вставить("Контролер", Контролер);
		ПараметрыФормирования.Вставить("КонтролироватьВыполнение", КонтролироватьВыполнение);
		
		ПараметрыФормирования.Вставить("Настройка", Настройка);		
		ПараметрыФормирования.Вставить("Организация", Организация);
		ПараметрыФормирования.Вставить("Тема", Наименование);
		ПараметрыФормирования.Вставить("Описание", Наименование);
		ПараметрыФормирования.Вставить("Исполнитель", ?(ЗначениеЗаполнено(Выборка.Исполнитель), Выборка.Исполнитель, Исполнитель));
		
		Попытка
			ПоручениеСсылка = СформироватьПоручение(ПараметрыФормирования);	
			Результат.МассивПоручений.Добавить(ПоручениеСсылка);
			
		Исключение
			Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
				Возврат Результат;
				
			КонецЕсли; 			
		КонецПопытки;
		
		ВыборкаОбъект = Выборка.Выбрать();
		Пока ВыборкаОбъект.Следующий() Цикл
			МенеджерКлиентовПроцесса = РегистрыСведений.CRM_ПредметыБизнесПроцессов.СоздатьМенеджерЗаписи();
			МенеджерКлиентовПроцесса.БизнесПроцесс = ПоручениеСсылка;
			МенеджерКлиентовПроцесса.Предмет = ВыборкаОбъект.Объект;
			МенеджерКлиентовПроцесса.ТипПредмета = ТипПредмета;
			
			МенеджерКлиентовПроцесса.Записать();
		КонецЦикла;
	КонецЦикла;	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

	Возврат Результат;
		
КонецФункции // СформироватьСервер()

&НаСервереБезКонтекста
Функция СформироватьПоручение(Параметры)

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекСекунды = Параметры.Дата - НачалоДня(Параметры.Дата);
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Заполнить(Справочники.CRM_КартыМаршрутов.Поручение);
	
	НовыйБизнесПроцесс.Дата						= Параметры.Дата;
	НовыйБизнесПроцесс.ДатаСтарта				= Параметры.Дата;
	НовыйБизнесПроцесс.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовыйБизнесПроцесс.Автор					= ТекущийПользователь;
	НовыйБизнесПроцесс.Ответственный			= ТекущийПользователь;
	НовыйБизнесПроцесс.Организация				= Параметры.Организация;
	НовыйБизнесПроцесс.Сценарий					= Параметры.Настройка;
	
	НовыйБизнесПроцесс.Наименование = Параметры.Тема;
	НовыйБизнесПроцесс.Описание     = Параметры.Описание;
	
	НовыйБизнесПроцесс.Записать();
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(НовыйБизнесПроцесс.Ссылка);
	НаборЭтапов.Прочитать();
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(НовыйБизнесПроцесс.Ссылка);
	НаборИсполнителей.Прочитать();
	
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
			СтрокаНабора.Исполнитель = Параметры.Исполнитель;
			НаборЭтапов[0].ДатаВыполнения = Параметры.ДатаИсполнения + ТекСекунды;
			НаборЭтапов[0].ВариантВыполнения = 1;
			НаборЭтапов[0].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(НаборЭтапов[0].ТочкаМаршрута, НаборЭтапов[0].ВариантВыполнения, НовыйБизнесПроцесс.НомерВерсииКартыМаршрута);
		ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
			НаборЭтапов[1].ДатаВыполнения = Параметры.ДатаКонтроля + ТекСекунды;
			НаборЭтапов[1].Используется	= Параметры.КонтролироватьВыполнение;
			СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Параметры.Контролер), Параметры.Контролер, ТекущийПользователь);
		КонецЕсли;
	КонецЦикла;
	
	НаборЭтапов.Записать();
	НаборИсполнителей.Записать();
	НовыйБизнесПроцесс.Старт();
	
	Возврат НовыйБизнесПроцесс.Ссылка; 

КонецФункции // СформироватьПоручение()

&НаСервере
Процедура СкорректироватьДатыЗадачи(ПриоритетДатыНачала)
	
	Если ДатаИсполнения > ДатаКонтроля Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаКонтроля = ДатаИсполнения;
		Иначе
			ДатаИсполнения = ДатаКонтроля;
		КонецЕсли;
	КонецЕсли;
	Если НачалоДня(ДатаИсполнения) = НачалоДня(ДатаКонтроля) И ВремяИсполнения > ВремяКонтроля Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяКонтроля = ВремяИсполнения;
		Иначе
			ВремяИсполнения = ВремяКонтроля;
		КонецЕсли;
	КонецЕсли;
	
	СрокИсполнения	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
	СрокКонтроля	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Элементы = Форма.Элементы;
	Если ЗначениеЗаполнено(Форма.Настройка) Тогда
		Элементы.СтраницыВариантыНастроек.ТекущаяСтраница = Элементы.СтраницаПоКаждомуОбъекту;	
	Иначе	
		Элементы.СтраницыВариантыНастроек.ТекущаяСтраница = Элементы.СтраницаПусто;	
	КонецЕсли;
	
КонецПроцедуры // НастроитьЭлементыФормы()	

&НаСервере
Процедура ТипИсполнителяПриИзмененииСервер()
	Если ТипИсполнителя = "Пользователь" Тогда
		Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли ТипИсполнителя = "Роль" Тогда
		Исполнитель = Справочники.РолиИсполнителей.ПустаяСсылка();
	Иначе
		Исполнитель = Неопределено;
	КонецЕсли;
	Элементы.Исполнитель.Видимость = (ТипИсполнителя <> "Список");
	Элементы.ТаблицаОбъектовИсполнитель.Видимость = (ТипИсполнителя = "Список");
КонецПроцедуры

&НаКлиенте
Процедура ТипИсполнителяПриИзменении(Элемент)
	ТипИсполнителяПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

