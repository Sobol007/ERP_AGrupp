#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция СуществуетПредопределенныйВидКИ(ИмяПредопределенныхДанных)

	Возврат СуществуетПредопределенныйЭлементСправочника("ВидыКонтактнойИнформации", ИмяПредопределенныхДанных); 

КонецФункции // СуществуетПредопределенныйВидКИ()

Функция СуществуетПредопределенныйЭлементСправочника(ИмяСправочника, ИмяПредопределенныхДанных)

	Попытка
	
		ВидКИ = Справочники[ИмяСправочника][ИмяПредопределенныхДанных];
		
		Возврат Истина;
	
	Исключение
		
		Возврат Ложь;
	
	КонецПопытки; 

КонецФункции // ()
 
Процедура УТ_ЗаполнитьСтруктураПоискаЕдиницИзмерения(Объект, СтруктураПоиска)
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	СтруктураПоиска.Вставить("ОбъектИсточник", МетаданныеОбъекта.ПолноеИмя());
	
	Если Объект.Владелец = Справочники["НаборыУпаковок"].БазовыеЕдиницыИзмерения Тогда
		
		СтруктураПоиска.Вставить("ОбъектПриемник", "Справочник.КлассификаторЕдиницИзмерения");
		
	Иначе 
		
		СтруктураПоиска.Вставить("ОбъектПриемник", "Справочник.ЕдиницыИзмерения");
		
	КонецЕсли; 

КонецПроцедуры
 
Функция ПолучитьПрефиксКИИзНаименования(Наименование)

	Результат = "";
	
	Если СтрНачинаетсяС(СокрЛП(Наименование), "{")
		 И СтрНайти(Наименование, "}") <> 0 Тогда
	
		ОткрывающаяСкобка = СтрНайти(Наименование, "{");
		ЗакрывающаяСкобка = СтрНайти(Наименование, "}");
		
		Результат = Сред(Наименование, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
		
		Наименование = Прав(Наименование, СтрДлина(Наименование) - ЗакрывающаяСкобка);
		
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ПолучитьПрефиксКИИзНаименоваия()
 
Функция ПолучитьРодителяИзПрефиксаКИ(Префикс)

	Родитель = Неопределено;
	
	Если Префикс = "ПК" Тогда
		
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;
		
	ИначеЕсли Префикс = "КЛ" Тогда
	
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
		
	ИначеЕсли Префикс = "О" Тогда
		
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
		
	ИначеЕсли Префикс = "П" Тогда
		
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
		
	ИначеЕсли Префикс = "ПЛ" Тогда
		
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
		
	ИначеЕсли Префикс = "ФЛ" Тогда
		
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
	
	КонецЕсли; 
	
	Возврат Родитель;

КонецФункции // ()
 
Функция ПолучитьПрефиксПоГруппеКИ(Родитель)

	Результат = "";
	
	Если Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты Тогда
	
		Результат = "ПК";
		
	ИначеЕсли Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров Тогда
	
		Результат = "КЛ";
		
	ИначеЕсли Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации Тогда
	
		Результат = "О";
		
	ИначеЕсли Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры Тогда
	
		Результат = "П";
		
	ИначеЕсли Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи Тогда
	
		Результат = "ПЛ";
		
	ИначеЕсли Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица Тогда
	
		Результат = "ФЛ";
	
	КонецЕсли; 
	
	Возврат ?(Не ЗначениеЗаполнено(Результат), "", СтрШаблон("{%1}", Результат));

КонецФункции // ПолучитьПрефиксПоГруппеКИ()
 
Функция ПолучитьСкидкуНаценку(Наименование)

	Возврат Справочники["СкидкиНаценки"].НайтиПоНаименованию(Наименование);

КонецФункции // ПолучитьСкидкуНаценку()

Функция ПолучитьКонтрагентаПартнера(Партнер)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер";
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Справочники["Контрагенты"].ПустаяСсылка());

КонецФункции // ПолучитьКонтрагентаПартнера()

Функция СоздатьКонтрагента(Идентификатор)
	
	Элемент = Справочники["Контрагенты"].СоздатьЭлемент();
	Элемент.УстановитьСсылкуНового(Справочники["Контрагенты"].ПолучитьСсылку(Идентификатор));
	
	Возврат Элемент;

КонецФункции // СоздатьКонтрагента()

Функция ПолучитьЗначениеПоляСтруктуры(Структура, ИмяПоля)

	Значение = Неопределено;
	Структура.Свойство(ИмяПоля, Значение);

	Возврат Значение;
	
КонецФункции // ПолучитьЗначениеПоляСтруктуры()

Процедура ЗаполнитьЮрФизЛицоКонтрагента(КонтрагентОбъект, ВидПартнера)

	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо")  Тогда
	
		КонтрагентОбъект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
		
	Иначе
		
		КонтрагентОбъект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		
	КонецЕсли; 

КонецПроцедуры

Функция ОбъектВыгружен(ДанныеОбъекта, Объект)

	ДополнительныеОбъекты = ПолучитьДополнительноВыгруженныеОбъекты(ДанныеОбъекта);
	
	ОбъектМетаданных = Объект.Метаданные();
	
	ИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	СписокОбъектов = ПолучитьСписокДополнительноВыгруженныхОбъектов(ДополнительныеОбъекты, ИмяМетаданных); 
	
	Возврат СписокОбъектов.Найти(Объект) <> Неопределено;

КонецФункции // ()

Функция ПолучитьДополнительноВыгруженныеОбъекты(ДанныеОбъекта)

	ДополнительныеОбъекты = Неопределено;
	
	Если Не ДанныеОбъекта.Свойство("ДополнительныеОбъекты", ДополнительныеОбъекты) Тогда
	
		ДанныеОбъекта.Вставить("ДополнительныеОбъекты", Новый Соответствие);
		ДополнительныеОбъекты = ДанныеОбъекта.ДополнительныеОбъекты;
	
	КонецЕсли; 
	
	Возврат ДополнительныеОбъекты;

КонецФункции // ПолучитьДополнительноВыгруженныеОбъекты()
 
Функция ПолучитьСписокДополнительноВыгруженныхОбъектов(ДополнительныеОбъекты, ИмяМетаданных)

	СписокОбъектов = ДополнительныеОбъекты.Получить(ИмяМетаданных);
	
	Если СписокОбъектов = Неопределено Тогда
	
		СписокОбъектов = Новый Массив;
	
	КонецЕсли;
	
	Возврат СписокОбъектов;

КонецФункции // ПолучитьСписокДополнительноВыгруженныхОбъектов()

Функция НаименованиеДублируется(Соответствие, Наименование, ПорядковыйНомер)
	
	КоличествоПовторов = Соответствие.Получить(Наименование);
	
	Результат = КоличествоПовторов <> Неопределено;
	
	Если КоличествоПовторов = Неопределено Тогда
	
		ПорядковыйНомер = 0;
		
	Иначе 
		
		ПорядковыйНомер = КоличествоПовторов + 1;
	
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // НаименованиеДублируется()
 
Функция СоответствияВыгруженныхНаименований(ОписаниеПравил)
	
	Если Не ОписаниеПравил.Свойство("СоответствияНаименований") Тогда
	
		ОписаниеПравил.Вставить("СоответствияНаименований", Новый Соответствие);
	
	КонецЕсли; 
	
	Возврат ОписаниеПравил.СоответствияНаименований;

КонецФункции // СоответствияВыгруженныхНаименований()

#Область ЭкспортныеПроцедурыИФункции

Процедура ПередИдентификациейОбъекта(ИмяОбъекта, СтруктураОбъекта, ИмяОбъектаПриемника, Отказ) Экспорт

	Если ИмяОбъекта = "CatalogObject.Файлы" Тогда
	
		ТипВладельца = Неопределено;
		РеквизитВладелец = Неопределено;
		Если НЕ (СтруктураОбъекта.Свойство("ВладелецФайла", РеквизитВладелец)
			 И CRM_СинхронизацияСервер.ЭтоОписаниеЗначения(РеквизитВладелец) 
			 И РеквизитВладелец.Свойство("Тип", ТипВладельца)
			 И ЗначениеЗаполнено(ТипВладельца)) Тогда
		
			Отказ = Истина;
			Возврат;
		
		КонецЕсли; 
		
		Если ТипВладельца = "DocumentRef.КоммерческоеПредложение" Тогда
		
			ИмяОбъектаПриемника = "CatalogObject.КоммерческоеПредложениеКлиентуПрисоединенныеФайлы";
			
		ИначеЕсли ТипВладельца = "CatalogRef.ЗадачаИсполнителя" Тогда
			
			ИмяОбъектаПриемника = "CatalogObject.ЗадачаИсполнителяПрисоединенныеФайлы";
			
		ИначеЕсли ТипВладельца = "DocumentRef.ЭлектронноеПисьмоВходящее" Тогда
			
			ИмяОбъектаПриемника = "CatalogObject.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы";
			
		ИначеЕсли ТипВладельца = "DocumentRef.ЭлектронноеПисьмоИсходящее" Тогда
			
			ИмяОбъектаПриемника = "CatalogObject.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы";
			
		ИначеЕсли ТипВладельца = "CatalogRef.Партнеры" Тогда
			
			ИмяОбъектаПриемника = "CatalogObject.ПартнерыПрисоединенныеФайлы";
			
		ИначеЕсли ТипВладельца = "CatalogRef.БизнесПроцесс" Тогда
			
			ИмяОбъектаПриемника = "CatalogObject.CRM_БизнесПроцессПрисоединенныеФайлы";
			
		ИначеЕсли ТипВладельца = "CatalogRef.Номенклатура" Тогда
			
			ИмяОбъектаПриемника = "CatalogObject.НоменклатураПрисоединенныеФайлы";
			
		ИначеЕсли ТипВладельца = "CatalogRef.Номенклатура" Тогда
			
			ИмяОбъектаПриемника = "CatalogObject.НоменклатураПрисоединенныеФайлы";
			
		ИначеЕсли ТипВладельца = "CatalogRef.КонтактныеЛицаПартнеров" Тогда
			
			ИмяОбъектаПриемника = "CatalogObject.КонтактныеЛицаПартнеровПрисоединенныеФайлы";
		
		КонецЕсли;
		
 	ИначеЕсли ИмяОбъекта = "CatalogObject.Пользователи"
		 И СтруктураОбъекта.Свойство("Идентификатор") Тогда 
		
		ИдентификаторПользователя = СтруктураОбъекта.Идентификатор;
		
		Если CRM_СинхронизацияСервер.ЭтоОписаниеЗначения(ИдентификаторПользователя) Тогда
		
			Идентификатор = ИдентификаторПользователя.Значение;
		
		Иначе
		
			Идентификатор = ИдентификаторПользователя;
		
		КонецЕсли;
		
		СсылкаПриемника = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Ссылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Ref.Значение));
		
		CRM_СинхронизацияСервер.ДобавитьЗаписьСоответствияВРегистр(CRM_СинхронизацияСервер.ПолучитьУзелОбменаСинхронизации(),
															  Ссылка,
															  СсылкаПриемника);
		
		СтруктураОбъекта.Ref.Значение = Идентификатор;
		 
	КонецЕсли; 

КонецПроцедуры

Процедура ПередВыгрузкойОбъекта(Объект, СтруктураПоиска) Экспорт 

	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникОбъект." + "УпаковкиЕдиницыИзмерения") Тогда
		
			УТ_ЗаполнитьСтруктураПоискаЕдиницИзмерения(Объект, СтруктураПоиска);
		
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры
 
Процедура Отказ(ДанныеОбъекта, Отказ) Экспорт 

 	Отказ = Истина;

КонецПроцедуры

#Область Выгрузка

Процедура УТ_ИмяПДОрганизацииПриВыгрузке(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Значение")
		 И ЗначениеЗаполнено(ДанныеОбъекта.Значение)
		 И ДанныеОбъекта.Значение = "УправленческаяОрганизация" Тогда
	
		ДанныеОбъекта.Значение = "ОсновнаяОрганизация";
	
	КонецЕсли;	

КонецПроцедуры
 
Процедура ИмяПредопределнныхДанныхВидаКИПриВыгрузке(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Значение")
		 И ЗначениеЗаполнено(ДанныеОбъекта.Значение) Тогда
	
		ДанныеОбъекта.Значение = СтрЗаменить(ДанныеОбъекта.Значение, "CRM_", "");
	
	КонецЕсли;

КонецПроцедуры
 
Процедура ПриВыгрузкеЗадачи(ДанныеОбъекта, Отказ) Экспорт 

	Если Не ДанныеОбъекта.Свойство("Объект") Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли; 
	
	Объект = ДанныеОбъекта.Объект;
	
	Отказ = Не Объект.CRM_Личная
			Или ЗначениеЗаполнено(Объект.БизнесПроцесс);

КонецПроцедуры
		
Процедура ПриВыгрузкеПользователя(ДанныеОбъекта, Отказ) Экспорт 

	Если Не ДанныеОбъекта.Свойство("Объект") Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли; 
	
	ДокументDOM = ДанныеОбъекта.Документ;
	Объект = ДанныеОбъекта.Объект;
	CRM_СинхронизацияСервер.ЗаписатьРеквизитВыгружаемогоОбъекта(ДокументDOM,
																"Идентификатор",
																Объект.Ссылка.УникальныйИдентификатор());

КонецПроцедуры		

Процедура УТ_ПриВыгрузкеЗначенияЕдиницыИзмерения(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Значение")
		 И ТипЗнч(ДанныеОбъекта.Значение) = Тип("СправочникСсылка." + "УпаковкиЕдиницыИзмерения")
		 И ЗначениеЗаполнено(ДанныеОбъекта.Значение) Тогда
	
		Если ДанныеОбъекта.Значение.Владелец = Справочники["НаборыУпаковок"].БазовыеЕдиницыИзмерения Тогда
		
			ДанныеОбъекта.ТипЗначения = "CatalogRef.КлассификаторЕдиницИзмерения";
			
		Иначе 
			
			ДанныеОбъекта.ТипЗначения = "CatalogRef.ЕдиницыИзмерения";
		
		КонецЕсли; 
	
	КонецЕсли;

КонецПроцедуры
 
Процедура УТ_СкидкаНаценкаПриВыгрузке(ДанныеОбъекта, Отказ) Экспорт 

	Если ДанныеОбъекта.Свойство("Значение")
		 И ЗначениеЗаполнено(ДанныеОбъекта.Значение) Тогда
	
		ДанныеОбъекта.Значение = ДанныеОбъекта.Значение.Наименование;
		ДанныеОбъекта.ТипЗначения = "string";
	
	КонецЕсли; 

КонецПроцедуры

Процедура УТ_ЗаполнитьДанныеПартнераПриВыгрузке(ДанныеОбъекта, Отказ) Экспорт

	Объект = ДанныеОбъекта.Объект;
	
	Контрагент = ПолучитьКонтрагентаПартнера(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ДокументDOM = ДанныеОбъекта.Документ;
	CRM_СинхронизацияСервер.ЗаписатьРеквизитВыгружаемогоОбъекта(ДокументDOM, "ИНН", Контрагент.ИНН);
	CRM_СинхронизацияСервер.ЗаписатьРеквизитВыгружаемогоОбъекта(ДокументDOM, "КПП", Контрагент.КПП);
	CRM_СинхронизацияСервер.ЗаписатьРеквизитВыгружаемогоОбъекта(ДокументDOM, "КодПоОКПО", Контрагент.КодПоОКПО);

КонецПроцедуры

Процедура УТ_ЗаполнитьВсегоВСчете(ДанныеОбъекта, Отказ) Экспорт

	Если Не ДанныеОбъекта.Свойство("ТаблицаДанных") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ДанныеОбъекта.ТаблицаДанных.Колонки.Добавить("Всего", ДанныеОбъекта.ТаблицаДанных.Колонки.Сумма.ТипЗначения);
	
	МассивЗначений = ДанныеОбъекта.ТаблицаДанных.ВыгрузитьКолонку("Сумма");
	ДанныеОбъекта.ТаблицаДанных.ЗагрузитьКолонку(МассивЗначений, "Всего");

КонецПроцедуры

Процедура ЗаполнитьОтветственногоПриВыгрузке(ДанныеОбъекта, Отказ) Экспорт

	Объект = ДанныеОбъекта.Объект;
	
	ДокументDOM = ДанныеОбъекта.Документ;
	
	Ответственный = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект." + "КоммерческоеПредложениеКлиенту") Тогда
		
		Ответственный = Объект.CRM_Автор;
	
	Иначе
	
		Ответственный = Объект.Автор;
	
	КонецЕсли;	 
	
	CRM_СинхронизацияСервер.ЗаписатьРеквизитВыгружаемогоОбъекта(ДокументDOM, "Ответственный", Ответственный);

КонецПроцедуры
 
Процедура УТ_ОбработкаБанковскихСчетовПриВыгрузке(ДанныеОбъекта, Отказ) Экспорт 

	Объект = ПолучитьЗначениеПоляСтруктуры(ДанныеОбъекта, "Объект");
	
	Если Объект = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Отказ = ТипЗнч(Объект.Владелец) <> Тип("СправочникСсылка.Организации");

КонецПроцедуры

Процедура УТ_ДополнительныйРеквизитПриВыгрузке(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Значение")
		 И ЗначениеЗаполнено(ДанныеОбъекта.Значение) Тогда
	
		ДанныеОбъекта.Значение = ДанныеОбъекта.Значение.Наименование;
		ДанныеОбъекта.ТипЗначения = "string";
	
	КонецЕсли;

КонецПроцедуры

Процедура УТ_НоменклатураПередВыгрузкой(ДанныеОбъекта, Отказ) Экспорт 
	
	ДокументDOM = ДанныеОбъекта.Документ;
	Номенклатура = ДанныеОбъекта.Объект;
	
	ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
	
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения)
		 Или ОбъектВыгружен(ДанныеОбъекта, ЕдиницаИзмерения) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	СтруктураОбъекта = Новый Структура("Code, Description, НаименованиеПолное, МеждународноеСокращение",
									ЕдиницаИзмерения.Код,
									ЕдиницаИзмерения.Наименование,
									ЕдиницаИзмерения.НаименованиеПолное,
									ЕдиницаИзмерения.МеждународноеСокращение);
									
	ТипСсылки = "CatalogRef.УТ_ЕдиницыИзмерения";								
									
	CRM_СинхронизацияСервер.ДобавитьРеквизитВСтруктуруОбъекта(СтруктураОбъекта,
																"Ref",
																ЕдиницаИзмерения,
																ТипСсылки);
	
									
	CRM_СинхронизацияСервер.ЗаписатьСтруктуруКакОбъект(ДанныеОбъекта.ЗаписьXML,
														"CatalogObject.УТ_ЕдиницыИзмерения",
														СтруктураОбъекта);
														
	CRM_СинхронизацияСервер.ЗаписатьРеквизитВыгружаемогоОбъекта(ДокументDOM, "УТ_ЕдиницаИзмерения", СтруктураОбъекта.Ref);

КонецПроцедуры

Процедура УТ_ПриВыгрузкеЕдиницыИзмерения(ДанныеОбъекта, Отказ) Экспорт
	
	Объект = ДанныеОбъекта.Объект;
	
	Отказ = Объект.Владелец <> Справочники["НаборыУпаковок"].БазовыеЕдиницыИзмерения;

КонецПроцедуры
 
Процедура ВыгрузкаХранилищаФайла(ДанныеОбъекта, Отказ) Экспорт
	
	Если ДанныеОбъекта.Свойство("ИмяРеквизита")
		 И ДанныеОбъекта.ИмяРеквизита = "Данные" Тогда
		 
		Попытка
		
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта.Объект.Ссылка);
		 
			ДанныеОбъекта.Значение = XMLСтрока(Новый ХранилищеЗначения(ДвоичныеДанные));
			ДанныеОбъекта.ТипЗначения = "ValueStorage";
		
		Исключение
			
			Возврат;
		
		КонецПопытки; 
	
	КонецЕсли;

КонецПроцедуры

Процедура ПриВыгрузкеНаименованияКИ(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Объект")
		 И ДанныеОбъекта.Свойство("Значение") Тогда
	
		Объект = ДанныеОбъекта.Объект;
		
		Родитель = Объект.Родитель;
		
		Префикс = ПолучитьПрефиксПоГруппеКИ(Родитель);
		
		Если Не ЗначениеЗаполнено(Префикс) Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		ДанныеОбъекта.Значение = Префикс + ДанныеОбъекта.Значение;
	
	КонецЕсли; 

КонецПроцедуры

Процедура ПриВыгрузкеНаименования(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Значение") Тогда

		Наименование = ДанныеОбъекта.Значение;
		
		ПорядковыйНомер = 0;
		
		Соответствие = СоответствияВыгруженныхНаименований(ДанныеОбъекта.ОписаниеПравил);
		
		Если НаименованиеДублируется(Соответствие, Наименование, ПорядковыйНомер) Тогда
		
			ДанныеОбъекта.Значение = СтрШаблон("{%1}%2", ПорядковыйНомер, Наименование);
			
		КонецЕсли; 
		
		Соответствие.Вставить(Наименование, ПорядковыйНомер);
		 
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузкаПрисоединенныхФайлов(ДанныеОбъекта, Отказ) Экспорт

	Объект = ДанныеОбъекта.Объект;
	
	Отказ = Объект.Размер > CRM_СинхронизацияСервер.МакисмальныйРазмерВложенияВБайтах();	

КонецПроцедуры
 
#КонецОбласти 

#Область Загрузка

Процедура УТ_ИмяПДОрганизацииПриЗагрузке(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("ЗначениеXML")
		 И ЗначениеЗаполнено(ДанныеОбъекта.ЗначениеXML)
		 И ДанныеОбъекта.ЗначениеXML = "ОсновнаяОрганизация" Тогда
		 
		  ДанныеОбъекта.ЗначениеXML = "УправленческаяОрганизация";
	
	КонецЕсли;

КонецПроцедуры
 
Процедура ПриЗагрузкеОрганизации(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Объект") Тогда

		Объект = ДанныеОбъекта.Объект;
		
		ИмяПД = Неопределено;
		
		Если Не Объект.Свойство("PredefinedDataName", ИмяПД)
			 Или Не ЗначениеЗаполнено(ИмяПД) Тогда
		
			Возврат;
		
		КонецЕсли;
		
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() 
			 И ИмяПД = "ОсновнаяОрганизация" Тогда
		
			ИмяПД = "УправленческаяОрганизация";
		
		КонецЕсли; 
		
		Если СуществуетПредопределенныйЭлементСправочника("Организации", ИмяПД) Тогда
			 
			Если Объект.Ref <> Справочники.Организации[ИмяПД] Тогда
			
				CRM_СинхронизацияСервер.ДобавитьЗаписьСоответствияВРегистр(CRM_СинхронизацияСервер.ПолучитьУзелОбменаСинхронизации(),
																		  Объект.Ref,
																		  Справочники.Организации[ИмяПД]);
			
			КонецЕсли;
																	  
			Отказ = Истина;
		
		КонецЕсли; 

	КонецЕсли; 

КонецПроцедуры
 
Процедура ИмяПредопределнныхДанныхВидаКИПриЗагрузке(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("ЗначениеXML")
		 И ЗначениеЗаполнено(ДанныеОбъекта.ЗначениеXML) Тогда
		 
		 Если ДанныеОбъекта.ЗначениеXML = "СправочникПотенциальныеКлиенты" Тогда
			 
			 ДанныеОбъекта.ЗначениеXML = "СправочникCRM_ПотенциальныеКлиенты";
			 
		 ИначеЕсли Не СуществуетПредопределенныйВидКИ(ДанныеОбъекта.ЗначениеXML)
			 И СуществуетПредопределенныйВидКИ("CRM_" + ДанныеОбъекта.ЗначениеXML) Тогда 
			 
			 ДанныеОбъекта.ЗначениеXML = "CRM_" + ДанныеОбъекта.ЗначениеXML;
			 
		 КонецЕсли;  
	
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗагрузкеНаименования(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("ЗначениеXML") Тогда
			
		Наименование = ДанныеОбъекта.ЗначениеXML;
		
		Если Не СтрНачинаетсяС(Наименование, "{") Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		ВхождениеСкобки = СтрНайти(Наименование, "}");
		
		Если ВхождениеСкобки = 0 Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		ДанныеОбъекта.Значение = Прав(Наименование, СтрДлина(Наименование) - ВхождениеСкобки);
			
	КонецЕсли;

КонецПроцедуры
 
Процедура ПриЗагрузкеВидаКИ(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Объект") Тогда
			
		Объект = ДанныеОбъекта.Объект;
		
		Если Не Объект.Свойство("Description") Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		Префикс = ПолучитьПрефиксКИИзНаименования(Объект.Description);
		
		Родитель = ПолучитьРодителяИзПрефиксаКИ(Префикс);
		
		Если Не ЗначениеЗаполнено(Родитель)
			 Или Не Объект.Свойство("Parent") Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		Объект.Parent = Родитель;
	
	КонецЕсли; 	

КонецПроцедуры
 
Процедура ЗагрузкаПрисоединенныхФайлов(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Объект") Тогда
		 
		ТипФайлов = Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип;
		
		Ссылка = Неопределено;
		
		Объект = ДанныеОбъекта.Объект;
		
		Если Не Объект.Свойство("Ref", Ссылка)
			 Или Не ТипФайлов.СодержитТип(ТипЗнч(Ссылка)) Тогда
		
			Отказ = Истина;
			Возврат;
		
		КонецЕсли; 
		
		ОбъектСуществует = Ссылка.ПолучитьОбъект() <> Неопределено;
		
		Если Не Объект.Свойство("ТипХраненияФайла") Тогда
			
			Если ОбъектСуществует
				 И ЗначениеЗаполнено(Ссылка.ТипХраненияФайла) Тогда
			
				ТипХранения = Ссылка.ТипХраненияФайла;
			
			Иначе
				
				ТипХранения = РаботаСФайламиСлужебный.ТипХраненияФайлов();
			
			КонецЕсли; 
			
			Объект.Вставить("ТипХраненияФайла", ТипХранения);
		
		КонецЕсли; 
		
		Если Не Объект.Свойство("ФайлХранилище") Тогда
		
			Возврат;
		
		КонецЕсли;
		
		Попытка
		
			//ХранилищеЗначения = XMLЗначение(Тип("ХранилищеЗначения"), Объект.Данные);
			ХранилищеЗначения = Объект.ФайлХранилище;
			
		Исключение
			
			Возврат;
			
		КонецПопытки; 
		
		Если Объект.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе") Тогда
		
			РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(Ссылка, ХранилищеЗначения.Получить());
		
		ИначеЕсли Объект.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВТомахНаДиске") Тогда
			
			ДатаМодификации = ПолучитьЗначениеПоляСтруктуры(Объект, "ДатаМодификацииУниверсальная");
			
			Если ДатаМодификации = Неопределено Тогда
			
				Если ОбъектСуществует Тогда
				
					ДатаМодификации = Ссылка.ДатаМодификацииУниверсальная;
				
				Иначе
				
					ДатаМодификации = ТекущаяУниверсальнаяДата();
					Объект.Вставить("ДатаМодификацииУниверсальная", ДатаМодификации);
				
				КонецЕсли; 
			
			КонецЕсли; 
						
			СведенияОФайле = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ХранилищеЗначения.Получить(),
																	ДатаМодификации,
																	ПолучитьЗначениеПоляСтруктуры(Объект, "Description"),
																	ПолучитьЗначениеПоляСтруктуры(Объект, "Расширение")); 
				
		КонецЕсли; 
			
	КонецЕсли;

КонецПроцедуры
 
Процедура ЗагрузкаПрофилейПочты(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Объект")
		 И ДанныеОбъекта.Свойство("МетаданныеОбъекта") Тогда
		
		Объект = ДанныеОбъекта.Объект;
		МетаданныеОбъекта = ДанныеОбъекта.МетаданныеОбъекта;
		
		ИмяПредопределенныхДанных = Неопределено;
		
		Если Объект.Свойство("PredefinedDataName", ИмяПредопределенныхДанных)
				И ИмяПредопределенныхДанных = "СистемнаяУчетнаяЗаписьЭлектроннойПочты"
				И Объект.Свойство("Ref") Тогда
		
			Ссылка = Объект.Ref;
			
			Отказ = Истина;
			
			СсылкаПриемника = CRM_СинхронизацияСервер.ПолучитьСсылкуПредопределенного(МетаданныеОбъекта, ИмяПредопределенныхДанных);
			
			Если Ссылка <> СсылкаПриемника
				 И ЗначениеЗаполнено(Ссылка)
				 И ЗначениеЗаполнено(СсылкаПриемника) Тогда
			
				CRM_СинхронизацияСервер.ДобавитьЗаписьСоответствияВРегистр(CRM_СинхронизацияСервер.ПолучитьУзелОбменаСинхронизации(),
																	  Ссылка,
																	  СсылкаПриемника);
			
			КонецЕсли; 
																		
			
		КонецЕсли; 	
	
	КонецЕсли;

КонецПроцедуры
 
Процедура УТ_ДополнительныйРеквизитПриЗагрузке(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("ЗначениеXML")
		 И ЗначениеЗаполнено(ДанныеОбъекта.ЗначениеXML) Тогда
	
		ДанныеОбъекта.Значение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ДанныеОбъекта.ЗначениеXML, Истина);
		ДанныеОбъекта.ТипЗначения = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	
	КонецЕсли;

КонецПроцедуры
 
Процедура УТ_ЗаполнитьКонтрагентаВДоговореПриЗагрузке(ДанныеОбъекта, Отказ) Экспорт

	Объект = ПолучитьЗначениеПоляСтруктуры(ДанныеОбъекта, "Объект");
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Партнер = ПолучитьЗначениеПоляСтруктуры(Объект, "Партнер");
	
	Если Не ЗначениеЗаполнено(Партнер)
		 Или Партнер.ПолучитьОбъект() = Неопределено
		 Или Объект.Свойство("Контрагент") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Контрагент = ПолучитьКонтрагентаПартнера(Партнер);
	
	КонтрагентОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
	
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
	КонецЕсли; 
	
	Если КонтрагентОбъект = Неопределено Тогда
	
		КонтрагентОбъект = СоздатьКонтрагента(Партнер.УникальныйИдентификатор());
	
	КонецЕсли;
	
	КонтрагентОбъект.Наименование = ПолучитьЗначениеПоляСтруктуры(Объект, "Description");
	КонтрагентОбъект.НаименованиеПолное = ПолучитьЗначениеПоляСтруктуры(Объект, "НаименованиеПолное");

КонецПроцедуры
 
Процедура УТ_ЗаполнитьДанныеКонтрагентаПриЗагрузкеПартнера(ДанныеОбъекта, Отказ) Экспорт

	Объект = ДанныеОбъекта.Объект;
	
	Если Не Объект.Свойство("Ref") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ПартнерСсылка = Объект.Ref;
	
	Контрагент = ПолучитьКонтрагентаПартнера(ПартнерСсылка);
	
	КонтрагентОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
	
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
	КонецЕсли; 
	
	Если КонтрагентОбъект = Неопределено Тогда
	
		КонтрагентОбъект = СоздатьКонтрагента(ПартнерСсылка.УникальныйИдентификатор());
	
	КонецЕсли; 
	
	КонтрагентОбъект.Партнер = ПартнерСсылка;
	КонтрагентОбъект.Наименование = ПолучитьЗначениеПоляСтруктуры(Объект, "Description");
	КонтрагентОбъект.НаименованиеПолное = ПолучитьЗначениеПоляСтруктуры(Объект, "НаименованиеПолное");
	
	ВидПартнера = ПолучитьЗначениеПоляСтруктуры(Объект, "ЮрФизЛицо");
	
	ЗаполнитьЮрФизЛицоКонтрагента(КонтрагентОбъект, ВидПартнера);
	
	КонтрагентОбъект.ИНН = ПолучитьЗначениеПоляСтруктуры(Объект, "ИНН");
	КонтрагентОбъект.КПП = ПолучитьЗначениеПоляСтруктуры(Объект, "КПП");
	КонтрагентОбъект.КодПоОКПО = ПолучитьЗначениеПоляСтруктуры(Объект, "КодПоОКПО");
	
	КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
	
	КонтрагентОбъект.Записать();

КонецПроцедуры
 
Процедура УТ_СкидкаНаценкаПриЗагрузке(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("ЗначениеXML")
		 И ЗначениеЗаполнено(ДанныеОбъекта.ЗначениеXML) Тогда
	
		ДанныеОбъекта.ЗначениеXML = ПолучитьСкидкуНаценку(ДанныеОбъекта.ЗначениеXML);
		ДанныеОбъекта.ТипЗначения = Тип("СправочникСсылка." + "СкидкиНаценки");
	
	КонецЕсли;

КонецПроцедуры
 
Процедура УТ_УстановитьЗначенияНоменклатурыПоумолчанию(ДанныеОбъекта, Отказ) Экспорт 

	Если ДанныеОбъекта.Свойство("Объект") Тогда
		
		Объект = ДанныеОбъекта.Объект;
		
		Если Объект.Свойство("ВидНоменклатуры") Тогда
		
			ВидНоменклатуры = Объект.ВидНоменклатуры;
			
		Иначе 
			
			ВидНоменклатуры = Неопределено;
		
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
			Объект.Вставить("ВидНоменклатуры", Справочники["ВидыНоменклатуры"].ВидНоменклатурыПоУмолчанию());
		
		КонецЕсли; 		
	
	КонецЕсли; 

КонецПроцедуры

Процедура УТ_ЗаполнитьЕдиницуИзмеренияПриЗагрузке(ДанныеОбъекта, Отказ) Экспорт

	Если ДанныеОбъекта.Свойство("Объект") Тогда
		
		Объект = ДанныеОбъекта.Объект;
		
		Если Объект.Свойство("Owner") Тогда
		
			Владелец = Объект.Owner;
			
		Иначе 
			
			Владелец = Неопределено;
		
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Владелец) Тогда
		
			Объект.Вставить("Owner", Справочники["НаборыУпаковок"].БазовыеЕдиницыИзмерения);
		
		КонецЕсли; 		
	
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти 

#КонецОбласти  

#КонецОбласти

#КонецЕсли