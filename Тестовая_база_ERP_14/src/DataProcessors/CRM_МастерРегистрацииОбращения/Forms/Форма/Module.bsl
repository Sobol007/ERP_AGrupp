
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ЗначениеНастройки = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ОткрыватьИнтересПриПринятииОбращения");
	ОткрыватьИнтересПриПринятииОбращения = ?(ЗначениеНастройки = Неопределено, Истина, ЗначениеНастройки);
	
	// Открыто вручную
	Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
	
	ДатаВходящегоОбращения		= ТекущаяДатаСеанса();
	ИнформацияПоИнтересуЗаписан = Истина;
	ИнформацияПоИнтересуНайденоИнтересов = -1;
	
	СуществующиеНастройки = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьНастройки();
	Если СуществующиеНастройки.Количество() = 0 Тогда
		CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета("CRM_НастройкиПолейОтображенияСодержания");
	КонецЕсли;
	
	ИнформацияПоИнтересуСоздаватьИнтерес = Ложь;
	ИнформацияПоИнтересуСоздаватьКонтакт = Ложь;
	ИнформацияПоИнтересуСоздаватьКлиента = Ложь;
	ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента = Ложь;
	
	Если Параметры.Свойство("УстановитьНовоеСостояниеИнтереса") Тогда
		УстановитьНовоеСостояниеИнтереса = Параметры.УстановитьНовоеСостояниеИнтереса;
	КонецЕсли;
	
	Если Параметры.Свойство("ПлановаяДата") Тогда
		ДатаВходящегоОбращения = Параметры.ПлановаяДата;
	КонецЕсли;
	
	Параметры.Свойство("ОткрытиеИзТелемаркетинга", ОткрытиеИзТелемаркетинга);
	
	// Открыто по входящему письму.
	Если Параметры.Свойство("ПисьмоВходящее") Тогда
		
		ОснованиеОбращения = Параметры.ПисьмоВходящее;
		Если Параметры.Свойство("ПереданаТолькоСсылкаПисьма") Тогда
			ПереданАдресЭП = ОснованиеОбращения.ОтправительАдрес;
			ИнформацияПоИнтересуТема = ОснованиеОбращения.Тема;
			
		Иначе
			ПереданАдресЭП = Параметры.АдресЭП;
			ИнформацияПоИнтересуТема = Параметры.ТемаПисьма;
		КонецЕсли;
		
		
		ПоискКлиентEmail = ПереданАдресЭП;
		ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентEmail";
		
		// Открыто по входящему письму.
	ИначеЕсли Параметры.Свойство("СообщениеМессенджера") Тогда
		
		ОснованиеОбращения = Параметры.СообщениеМессенджера;
		ИнформацияПоИнтересуТема = Параметры.СообщениеМессенджера.ТекстСообщения; 
		
		Если НЕ ЗначениеЗаполнено(ОснованиеОбращения.Контакт) Тогда
			ПоискКлиентНаименование = ОснованиеОбращения.КонтактПредставление;
		КонецЕсли;
		ПоискКлиентПрочее = Параметры.СообщениеМессенджера.ID_Пользователя;
		ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентПрочее";
		Элементы.ИдентификаторМессенджера.Заголовок = ОснованиеОбращения.УчетнаяЗапись.ТипМессенджера;
		Элементы.ИдентификаторМессенджера.Видимость = Истина;
		Элементы.ИдентификаторМессенджера1.Заголовок = ОснованиеОбращения.УчетнаяЗапись.ТипМессенджера;
		Элементы.ИдентификаторМессенджера1.Видимость = Истина;
		ИдентификаторМессенджера = Параметры.СообщениеМессенджера.ID_Пользователя; 
	ИначеЕсли Параметры.Свойство("Заявка") Тогда
		
		ОснованиеОбращения = Параметры.Заявка;
		ИнформацияПоИнтересуТема = ""; 
		
		ИнформацияПоИнтересуКаналПервичногоИнтереса = ОснованиеОбращения.КаналПервичногоИнтереса;
		ИнформацияПоИнтересуИсточникПервичногоИнтереса = ОснованиеОбращения.ИсточникПервичногоИнтереса;
		ИнформацияПоИнтересуТема = ОснованиеОбращения.Тема;
		ИнформацияПоИнтересуДокументОснование = ОснованиеОбращения;
		ПоискКлиентНаименование = ОснованиеОбращения.Наименование;
		
		ПоискКлиентТелефон	= ОснованиеОбращения.Телефон;
		ПоискКлиентEmail = ОснованиеОбращения.ЭлектроннаяПочта;
		ВыполнитьПроцедуру = "";
		Если СокрЛП(ПоискКлиентТелефон) <> "" Тогда
			ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентТелефон";
		Иначе	
			Если СокрЛП(ПоискКлиентEmail) <> "" Тогда
				ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентEmail"; 
			КонецЕсли;
		КонецЕсли;	
		
		
		// +СофтФон	
	ИначеЕсли Параметры.Свойство("ТелефонныйЗвонок") Тогда
		
		ОснованиеОбращения								= Параметры.ТелефонныйЗвонок;
		Элементы.ВходящаяКонтактнаяИнформация.Видимость	= Истина;
		Элементы.ВходящаяКонтактнаяИнформация.Заголовок	= НСтр("ru='Звонок с номера';en='Call from number'");
		ВходящаяКонтактнаяИнформация					=  Параметры.НомерТелефона;
		ПоискКлиентТелефон	= Параметры.НомерТелефона;
		ВыполнитьПроцедуру	= "ИзменитьПараметрыПоиска_ПоискКлиентТелефон";
		// -СофтФон	
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		ЗначенияЗаполнения = Параметры.ЗначенияЗаполнения;
		МассивСсылок = Новый Массив;
		Если ЗначенияЗаполнения.Свойство("КонтактноеЛицо") И ЗначениеЗаполнено(ЗначенияЗаполнения.КонтактноеЛицо) Тогда
			МассивСсылок.Добавить(ЗначенияЗаполнения.КонтактноеЛицо);
			СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
			Элементы.ДеревоПоиска.ТекущаяСтрока = ДеревоПоиска.ПолучитьЭлементы()[1].ПолучитьЭлементы()[0].ПолучитьИдентификатор();					 
		ИначеЕсли ЗначенияЗаполнения.Свойство("Партнер") И ЗначениеЗаполнено(ЗначенияЗаполнения.Партнер) Тогда
			МассивСсылок.Добавить(Параметры.Партнер);
			СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
			Элементы.ДеревоПоиска.ТекущаяСтрока = ДеревоПоиска.ПолучитьЭлементы()[1].ПолучитьИдентификатор();					 
		ИначеЕсли Параметры.Свойство("ПоискКлиентНаименование") Тогда
			ПоискКлиентНаименование = Параметры.ПоискКлиентНаименование;
			ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентНаименование";
		КонецЕсли;
		ЗначенияЗаполнения.Свойство("ВидВзаимодействия", ИнформацияПоИнтересуВидВзаимодействия);
		//ДействиеПоИнтересу = ИнформацияПоИнтересуВидВзаимодействия.Описание;
		
	ИначеЕсли Параметры.Свойство("Партнер") Тогда
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Параметры.Партнер);
		СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
		Элементы.ДеревоПоиска.ТекущаяСтрока = ДеревоПоиска.ПолучитьЭлементы().Индекс(ДеревоПоиска.ПолучитьЭлементы()[1]);					 
		ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: ';en='New Appeal'");
		ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, НСтр("ru='Принятие обращения: ';en='New Appeal'"), НСтр("ru = 'Принятие обращения: поиск данных по '") + Параметры.Партнер.Наименование);
	ИначеЕсли Параметры.Свойство("Основание") Тогда	
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ИнтересОснование = Параметры.Основание;
			
			ТекущийРежим = "НовыйИнтерес_2";
			РежимВводаОбращения = "НовыйИнтерес_2";
			ЗаполнитьИнформациюВыбранногоИнтереса(Неопределено, Истина);
			ДействиеПоИнтересу = "";
			ИнформацияПоИнтересуТема = ИнтересОснование.Тема;
			ИнформацияПоИнтересуТипУслуги = ИнтересОснование.ТипУслуги;
			ИнформацияПоИнтересуОтветственный = ИнтересОснование.Ответственный;
			Если ЗначениеЗаполнено(ИнтересОснование.Партнер) Тогда
				ИнформацияПоИнтересуКлиент = ИнтересОснование.Партнер;
				ИнформацияПоИнтересуКонтактноеЛицо = ИнтересОснование.КонтактноеЛицо;
				Элементы["Группа" + ТекущийРежим + "ПотенциальныйКлиент"].Видимость = Ложь;
				Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость = Истина;
			Иначе
				ИнформацияПоИнтересуПотенциальныйКлиент = ИнтересОснование.ПотенциальныйКлиент;
				Элементы["Группа" + ТекущийРежим + "ПотенциальныйКлиент"].Видимость = Истина;
				Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость = Ложь;
			КонецЕсли;
			ИнформацияПоИнтересуДокументОснование = ИнтересОснование;
			ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новый интерес (';en='New Appeal: New lead ('");
			ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(ИнформацияПоИнтересуКлиент)
			+ " | " + НСтр("ru = 'Контакт: '") + Строка(ИнформацияПоИнтересуКонтактноеЛицо) + ")";
			Элементы.СтраницаПринятьОбращение.Видимость = Истина;
			Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение;
			Элементы.ПерейтиК.Заголовок = НСтр("ru='Принять обращение';en='New Appeal '") + " (Ctrl+Enter)";
			Элементы.ПерейтиК.Доступность = Истина;
			ИнформацияПоИнтересуСоздаватьИнтерес = Истина;
			Элементы["Группа" + ТекущийРежим].Видимость = Истина;
			// +Софтфон
			// +Софтфон
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ЭлектронноеПисьмо");
	ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок");
	КонецЕсли;
	
	Попытка
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")
			ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			ЗаблокироватьДанныеДляРедактирования(ОснованиеОбращения,, УникальныйИдентификатор);
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если СтрНайти(ТекстОшибки, ПользователиИнформационнойБазы.ТекущийПользователь().Имя) = 0 Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецПопытки;
	
	Элементы.ИнформацияПоИнтересуВидВзаимодействия.Видимость = НЕ ЗначениеЗаполнено(ОснованиеОбращения);
	Элементы.ОписаниеВзаимодействия.Видимость = Элементы.ИнформацияПоИнтересуВидВзаимодействия.Видимость;
	
	ФиксироватьПервичныйИнтерес	= ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес");
	Элементы.ГруппаИсточникОбращения.Видимость = ФиксироватьПервичныйИнтерес;
	
	Если ФиксироватьПервичныйИнтерес Тогда
		Если ЗначениеЗаполнено(ОснованиеОбращения) И Не ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
			|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса
			|ИЗ
			|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних(, Сделка = &Сделка) КАК ИсточникиПервичногоИнтересаСрезПоследних");
			Запрос.УстановитьПараметр("Сделка", ОснованиеОбращения);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ИнформацияПоИнтересуКаналПервичногоИнтереса = Выборка.КаналПервичногоИнтереса;
				ИнформацияПоИнтересуИсточникПервичногоИнтереса = Выборка.ИсточникПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// +Comagic
	Если Параметры.Свойство("сфпСтруктураВнешнихДанных") Тогда
		сфпСтруктураВнешнихДанных = Параметры.сфпСтруктураВнешнихДанных;
		ИнформацияПоИнтересуОписание = ИнформацияПоИнтересуОписание + ?(ЗначениеЗаполнено(ИнформацияПоИнтересуОписание),Символы.ПС,"") 
			+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
			+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
			+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
		Если ФиксироватьПервичныйИнтерес Тогда
			ИмяПредопределенногоЗначения = "ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic";
			ИнформацияПоИнтересуКаналПервичногоИнтереса 		= ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
			ИнформацияПоИнтересуИсточникПервичногоИнтереса 	= сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(сфпСтруктураВнешнихДанных.comagic_context.campaign);
		КонецЕсли;
	КонецЕсли;
	// +Comagic
	
	Если Справочники.CRM_ТипУслуги.МассивТиповУслуг().Количество() = 1 Тогда
		ИнформацияПоИнтересуТипУслуги = Справочники.CRM_ТипУслуги.ПоставкаТоварыУслуги;
	КонецЕсли;
	
	Элементы.СоздатьНовогоКлиента.Видимость = Пользователи.РолиДоступны("ПолныеПрава,CRM_ДобавлениеИзменениеКлиентов");
	
	ПоляПоискаНаименование.Добавить("Партнеры", "Наименование партнеров", Истина);
	ПоляПоискаНаименование.Добавить("КонтактныеЛица", "ФИО контактных лиц", Истина);
	
	ПоляПоискаПочта.Добавить("Партнеры", "E-Mail партнеров", Истина);
	ПоляПоискаПочта.Добавить("КонтактныеЛица", "E-Mail контактных лиц", Истина);
	
	ПоляПоискаТелефон.Добавить("Партнеры", "Телефон партнеров", Истина);
	ПоляПоискаТелефон.Добавить("КонтактныеЛица", "Телефон контактных лиц", Истина);
	
	ПоляПоискаПрочее.Добавить(Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.Skype.Имя, "Skype", Истина);	
	ПоляПоискаПрочее.Добавить(Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.Адрес.Имя, "Адрес", Истина);	
	ПоляПоискаПрочее.Добавить(Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.ВебСтраница.Имя, "Сайт", Истина);	
	ПоляПоискаПрочее.Добавить(Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.Другое.Имя, "Другое", Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ВыполнитьПроцедуру) Тогда
		Если ВыполнитьПроцедуру = "РазвернутьСовсемВсе" Тогда
			РазвернутьСовсемВсе(Неопределено);
		ИначеЕсли ВыполнитьПроцедуру = "ПерейтиК" Тогда
			ПерейтиК(Неопределено, Истина);
			РазвернутьСовсемВсе(Неопределено);
		ИначеЕсли ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентEmail" Тогда
			ИзменитьПараметрыПоиска("ПоискКлиентEmail", ПоискКлиентEmail, Истина, Истина);
		ИначеЕсли ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентНаименование" Тогда
			ИзменитьПараметрыПоиска("ПоискКлиентНаименование", ПоискКлиентНаименование, Истина, Истина);
		ИначеЕсли ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентТелефон" Тогда
			ИзменитьПараметрыПоиска("ПоискКлиентТелефон", ПоискКлиентТелефон, Истина, Истина);
		ИначеЕсли ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска_ПоискКлиентПрочее" Тогда
			ИзменитьПараметрыПоиска("ПоискКлиентПрочее", ПоискКлиентПрочее, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	// +СофтФон	
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		сфпВерсияПанели = сфпСофтФонПроКлиент.сфпПолучитьВерсиюПанели();
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(сфпВерсияПанели,"3.0.3.120") >= 0 Тогда
			сфпВиднаКолонкаСтатусов = Истина;
			// Вызов этого метода сделан при начале работы в сфпСофтФонПроКлиент.сфпПодключитьСофтФон()
			//сфпСофтФонПроКлиент.сфпПолучитьСостоянияЛиний();
		Иначе
			сфпВиднаКолонкаСтатусов = Ложь;
			Элементы.сфпСтатус.Видимость = Ложь;
		КонецЕсли;		
	КонецЕсли;
	// -СофтФон	
	ОтветственныйПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ВидыВзаимодействий") Тогда
		ИнформацияПоИнтересуВидВзаимодействия = ВыбранноеЗначение;
		ОписаниеВзаимодействия = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ИнформацияПоИнтересуВидВзаимодействия, "Описание");
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ИнформацияПоИнтересуКонтактноеЛицо = ВыбранноеЗначение;
		ИнформацияПоИнтересуСоздаватьКонтакт = НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо);
		Если РежимВводаОбращения = "НовыйКонтакт_3" Тогда
			Элементы.ГруппаНовыйКонтакт_3КонтактКИ.Видимость = Ложь;
			Элементы.НовыйКонтакт_3КонтактноеЛицоПоиск.Видимость = Ложь;
			Элементы.НовыйКонтакт_3КонтактноеЛицоВыбор.Видимость = Истина;
		КонецЕсли;
		Элементы.ДекорацияТелефонEmail.Заголовок = СформироватьНадписьКонтактнойИнформации(ИнформацияПоИнтересуКонтактноеЛицо);
	КонецЕсли;
	// Если выбрали ответственного в форме выбора по типу услуги
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ИмяФормы = Нстр("ru='ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги';en='Common Form.CRM_SettingUsers for ServiceType'") Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ВыбранноеЗначение <> ИнформацияПоИнтересуОтветственный Тогда
				
				Элементы.ДействиеПоИнтересу.Видимость = (ТекущийПользователь<>ВыбранноеЗначение);		
				
				сфпНомерПеревода = "";
				ИнформацияПоИнтересуОтветственный = ВыбранноеЗначение;
				Элементы.ДекорацияОфисПодразделение.Заголовок = ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);			
				Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
					Элементы.ГруппаКнопкиСофтфона.Видимость = Истина;
					Элементы.ГруппаНомерИСтатусЛинии.Видимость = Истина;
					сфпНомерПеревода = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ИнформацияПоИнтересуОтветственный, Истина);
					Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
						Элементы.сфпВнутреннийНомер.Заголовок = Нстр("ru = 'Вн. номер: '") + сфпНомерПеревода;				
						Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
							СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
							Если СтатусЛинии <> Неопределено Тогда
								сфпСтатус = СтатусЛинии;
							Иначе
								сфпСтатус = 2;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Элементы.сфпВнутреннийНомер.Заголовок = "";
						сфпСтатус = 3;
					КонецЕсли;
					Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
						НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения));
						Если НайденныйЗвонок <> Неопределено Тогда
							Элементы.сфпПереводЗвонка.Доступность 		= Истина;
							Элементы.сфпУдержатьЗвонок.Доступность 		= Истина;
							Элементы.сфпПодтвердитьПеревод.Доступность 	= Истина;
						Иначе
							Элементы.сфпПереводЗвонка.Доступность 		= Ложь;
							Элементы.сфпУдержатьЗвонок.Доступность 		= Ложь;
							Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
						КонецЕсли;
					Иначе
						Элементы.сфпПереводЗвонка.Доступность 		= Ложь;
						Элементы.сфпУдержатьЗвонок.Доступность 		= Ложь;
						Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
					КонецЕсли;					
				Иначе
					Элементы.ГруппаКнопкиСофтфона.Видимость = Ложь;
					Элементы.ГруппаНомерИСтатусЛинии.Видимость = Ложь;
				КонецЕсли;
				Элементы.ОткрыватьИнтересПриПринятииОбращения.Видимость = (ТекущийПользователь<>ИнформацияПоИнтересуОтветственный);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Создан новый партнер" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ИнформацияПоИнтересуКлиент			= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
			ИнформацияПоИнтересуКонтактноеЛицо	= Параметр;
			РежимВводаОбращения	= "НовыйИнтерес_2";
			УстановитьПараметрыЭлементовФормы();
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
			ИнформацияПоИнтересуКлиент = Параметр;
			ЗаполнитьКЛПоИзКлиента();
			РежимВводаОбращения	= "НовыйИнтерес_2";
			УстановитьПараметрыЭлементовФормы();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаполнитьОснованиеОбращения" И ТипЗнч(Параметр) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ОснованиеОбращения	= Параметр;
		Если Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение ИЛИ ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
			сфпВидимостьИДоступностьГруппыСофтфон();
		КонецЕсли;			
	КонецЕсли;
	// +Софтфон
	Если (ИмяСобытия = "СофтФон_КонецРазговора") И (Параметр.Звонок = ОснованиеОбращения) Тогда		
		Если Элементы.сфпПереводЗвонка.Видимость Тогда
			Элементы.сфпПереводЗвонка.Доступность = Ложь;
		КонецЕсли;
		Если Элементы.сфпПодтвердитьПеревод.Доступность Тогда
			Элементы.сфпПодтвердитьПеревод.Доступность = Ложь;
		КонецЕсли;			
		Элементы.сфпУдержатьЗвонок.Доступность = Ложь;
		сфпУдержаниеЗвонка = Ложь;
	ИначеЕсли ИмяСобытия = "сфпПерезаполнитьСтатусыЛиний" Тогда		
		Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
			Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
				СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
				
				Если СтатусЛинии <> Неопределено И СтатусЛинии < 0 Тогда
					СтатусЛинии = 0;
				КонецЕсли;
				
				Если (СтатусЛинии = Неопределено ИЛИ СтатусЛинии = 1) И СтатусЛинии = 0 Тогда
					Если СтатусЛинии <> Неопределено Тогда
						сфпСтатус = СтатусЛинии;
					Иначе
						сфпСтатус = 2;
					КонецЕсли;
				ИначеЕсли НЕ сфпСтатус = СтатусЛинии Тогда
					сфпСтатус = СтатусЛинии;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = ОснованиеОбращения Тогда
			// Заполняем документ данными из CoMagic
			сфпСтруктураВнешнихДанных = Параметр.СтруктураCoMagic;
			ИнформацияПоИнтересуОписание = ИнформацияПоИнтересуОписание + ?(ЗначениеЗаполнено(ИнформацияПоИнтересуОписание),Символы.ПС,"") 
				+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
				+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
				+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
			Если ФиксироватьПервичныйИнтерес Тогда
				ИмяПредопределенногоЗначения = "ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic";
				ИнформацияПоИнтересуКаналПервичногоИнтереса 		= ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
				ИнформацияПоИнтересуИсточникПервичногоИнтереса 	= сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(сфпСтруктураВнешнихДанных.comagic_context.campaign);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// +Софтфон
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура СтраницыМастераПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Элементы.ПерейтиК.Доступность = Истина;
	Элементы.ФормаОбращениеПотеряно.Доступность = Истина;
	Если ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		тСсылка = ?(Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено, Неопределено, Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка);
		Если тСсылка = Неопределено Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru='Перейти';en='Pass'") + " (Ctrl+Enter)";
			Элементы.ПерейтиК.Доступность = Ложь;
			Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		ИначеЕсли ТипЗнч(тСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru='Зарегистрировать новый контакт клиента';en='Register a new customer contact'") + " (Ctrl+Enter)";
		ИначеЕсли ТипЗнч(тСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") ИЛИ ТипЗнч(тСсылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru='Зарегистрировать новый интерес контакта';en='Register a new contact lead'") + " (Ctrl+Enter)";
		ИначеЕсли ТипЗнч(тСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru='Зарегистрировать взаимодействие по интересу';en='Register an interaction of lead'") + " (Ctrl+Enter)";
		ИначеЕсли ТипЗнч(тСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru='Зарегистрировать взаимодействие по процессу';en='Register process interaction'") + " (Ctrl+Enter)";
		ИначеЕсли тСсылка = "НовыйКлиент" ИЛИ тСсылка = "Потенциальный" Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru='Зарегистрировать нового клиента';en='Register a new customer'") + " (Ctrl+Enter)";
		Иначе
			Элементы.ПерейтиК.Доступность = Ложь;
			Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Клиенты

&НаКлиенте
Процедура ПоискОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если СтрДлина(Текст) < 3 Тогда
		Если СтрДлина(Текст) > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Минимальная длина для поиска - 3 символа.';en='The minimum length for searching is 3 characters.'"));
		КонецЕсли;
		Текст = "";
		ПоискОчистка(Элемент, Ложь);
		Возврат;
	КонецЕсли;
	ИзменитьПараметрыПоиска(Элемент.Имя, Текст, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоискОчистка(Элемент, СтандартнаяОбработка)
	ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоискИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если Текст = "" Тогда
		ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискИспользоватьПриИзменении(Элемент)
	
	Если НЕ ПоискКлиентНаименованиеИспользовать И НЕ ПоискКлиентТелефонИспользовать И НЕ ПоискКлиентEmailИспользовать И НЕ ДетальныйПоискИспользовать Тогда
		ЭтотОбъект[Элемент.Имя] = Истина;
		Возврат;
	ИначеЕсли ЭтотОбъект[СтрЗаменить(Элемент.Имя, "Использовать", "")] = "" Тогда
		ЭтотОбъект[Элемент.Имя] = Ложь;
	КонецЕсли;
	ИзменитьПараметрыПоиска(Неопределено, Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрПоискаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДетальныйПоиск) Тогда
		ИзменитьПараметрыПоиска("ДетальныйПоиск", ДетальныйПоиск, Истина);
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ДетальныйПоискНажатие(Элемент)
	Если Элементы.ГруппаПараметрыДетальногоПоиск.Видимость Тогда
		Элементы.ГруппаПараметрыДетальногоПоиск.Видимость = Ложь;
		Элементы.ДетальныйПоискЕще.ЦветФона = Новый Цвет;
		Если ДетальныйПоискИспользовать Тогда
			ДетальныйПоискИспользовать = Ложь;
			ВыполнитьПоиск();
		КонецЕсли;
	Иначе
		Элементы.ГруппаПараметрыДетальногоПоиск.Видимость = Истина;
		Элементы.ДетальныйПоискЕще.ЦветФона = Новый Цвет(220, 220, 220);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	// ДОРАБОТАТЬ: очистка реквизитов второй страницы (если перешелкнули заново).
	Если Элементы.ДеревоПоиска.ТекущиеДанные.Объект = НСтр("ru='Прочие контакты и интересы';en='Other contacts and leads'") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ДеревоПоискаПередНачаломИзмененияЗавершение", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПередНачаломИзмененияЗавершение()
	
	ПерейтиК(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПоискаПриАктивизацииСтрокиЗавершение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПриАктивизацииСтрокиЗавершение()
	Если Элементы.СтраницыМастера.ТекущаяСтраница.Имя = "СтраницаПоиск" Тогда
		Если Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено Тогда 
			ЗаполнитьПанельИнформацииПоДанным(Неопределено);
		Иначе
			Элементы.ПерейтиК.Доступность = 			  (Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка <> "ПрочиеКонтакты");
			Элементы.ФормаОбращениеПотеряно.Доступность = (Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка <> "ПрочиеКонтакты");
			СтраницыМастераПриСменеСтраницы(Неопределено, Элементы.СтраницыМастера.ТекущаяСтраница);
			
			ЗаполнитьПанельИнформацииПоДанным(Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимВводаОбращенияПриИзменении(Элемент)
	НомерТекущий = Число(Прав(ТекущийРежим,1));
	НомерНовый = Число(Прав(РежимВводаОбращения,1));
	Если НомерНовый < НомерТекущий Тогда
		ОповещениеОтказ = Новый ОписаниеОповещения("ПовторитьПоискДляСменыРежима", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данный режим будет доступен только после 
									| повторного поиска. Повторить поиск?'");
		ПоказатьВопрос(ОповещениеОтказ, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена, , КодВозвратаДиалога.Отмена);
		РежимВводаОбращения = ТекущийРежим;
		Возврат;
	КонецЕсли;
	УстановитьПараметрыЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура НовыйКонтакт_3КонтактноеЛицоПоискНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Владелец", ИнформацияПоИнтересуКлиент);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НовыйКонтакт_3КонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаНовыйКонтакт_3КонтактКИ.Видимость = Истина;
	Элементы.НовыйКонтакт_3КонтактноеЛицоПоиск.Видимость = Истина;
	Элементы.НовыйКонтакт_3КонтактноеЛицоВыбор.Видимость = Ложь;
	ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	Элементы.ДекорацияТелефонEmail.Заголовок = "";
КонецПроцедуры

&НаКлиенте
Процедура НовыйКонтакт_3КонтактноеЛицоВыборПриИзменении(Элемент)
	ИнформацияПоИнтересуСоздаватьКонтакт = НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьТелефонККонтактуНажатие(Элемент)
	Если Найти(Элемент.Заголовок, НСтр("ru='Добавлено';en='Added'")) > 0 Тогда
		Возврат;
	КонецЕсли;
	КИДобавлена = ДобавитьНовуюКИКонтакта(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"), ПоискКлиентТелефон);
	Если КИДобавлена Тогда
		Элемент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьПочтуККонтактуНажатие(Элемент)
	Если Найти(Элемент.Заголовок, НСтр("ru='Добавлено';en='Added'")) > 0 Тогда
		Возврат;
	КонецЕсли;
	КИДобавлена = ДобавитьНовуюКИКонтакта(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"), ПоискКлиентEmail);
	Если КИДобавлена Тогда
		Элемент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Элементы.ДекорацияОфисПодразделение.Заголовок = ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);
	Элементы.ОткрыватьИнтересПриПринятииОбращения.Видимость = (ТекущийПользователь<>ИнформацияПоИнтересуОтветственный);
	Элементы.ДействиеПоИнтересу.Видимость = (ТекущийПользователь<>ИнформацияПоИнтересуОтветственный);
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", 
			Новый Структура("ТипУслуги, сфпВиднаКолонкаСтатусов", ИнформацияПоИнтересуТипУслуги, сфпВиднаКолонкаСтатусов),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",Новый Структура("сфпВиднаКолонкаСтатусов", сфпВиднаКолонкаСтатусов),ЭтотОбъект);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнтересНажатие(Элемент)
	ТекущиеДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(, ИнформацияПоИнтересуСсылка);
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные <> "ПрочиеКонтакты" И ТекущиеДанные <> "НовыйКлиент" Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыФормы

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовогоКлиента".
//
Процедура СоздатьНовогоКлиента(Команда)
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
		ПараметрыФормы.Вставить("ПотенциальныйКлиент", ИнформацияПоИнтересуПотенциальныйКлиент);
	Иначе
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Наименование", ПоискКлиентНаименование);
		СтруктураДанных.Вставить("Телефон", ПоискКлиентТелефон);
		СтруктураДанных.Вставить("АдресЭП", ПоискКлиентEmail);
		СтруктураДанных.Вставить("ОснованиеОбращения", ОснованиеОбращения);
		Если ДетальныйПоискИспользовать И ЗначениеЗаполнено(ДетальныйПоиск) Тогда
			ПараметрПоискаПредставление = Элементы.ПараметрПоиска.СписокВыбора.НайтиПоЗначению(ПараметрПоиска).Представление;
			СтруктураДанных.Вставить(ПараметрПоискаПредставление, ДетальныйПоиск);
		КонецЕсли;
		ПараметрыФормы.Вставить("ПотенциальныйКлиентСтруктура", СтруктураДанных);
	КонецЕсли;
	CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
КонецПроцедуры // СоздатьНовогоКлиента()

&НаКлиенте
Процедура ОбращениеПотеряно(Команда)
	ОповещениеПричинаОтказа = Новый ОписаниеОповещения("УказатьПричинуОтказа", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", Новый Структура, ЭтотОбъект, , , ,ОповещениеПричинаОтказа, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоиск(Команда)
	
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
	Элементы.ПерейтиК.Заголовок = НСтр("ru='Перейти';en='Pass'") + " (Ctrl+Enter)";
	Элементы.ПерейтиК.Доступность = Ложь;
	Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
	
	ИнформацияПоИнтересуЗаписан		 		= Истина;
	ИнформацияПоИнтересуСсылка				= Неопределено;
	ИнформацияПоИнтересуКлиент 				= Неопределено;
	ИнформацияПоИнтересуКонтактноеЛицо		= Неопределено;
	ИнформацияПоИнтересуПотенциальныйКлиент	= Неопределено;
	
	Если ЗначениеЗаполнено(ПоискКлиентНаименование) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентНаименование;
	ИначеЕсли ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентТелефон;
	ИначеЕсли ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентEmail;
	Иначе
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентНаименование;
	КонецЕсли;
	ИзменитьПараметрыПоиска(Неопределено, Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", 
			Новый Структура("ТипУслуги, сфпВиднаКолонкаСтатусов", ИнформацияПоИнтересуТипУслуги, сфпВиднаКолонкаСтатусов),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",Новый Структура("сфпВиднаКолонкаСтатусов", сфпВиднаКолонкаСтатусов),ЭтотОбъект);
	КонецЕсли;		
КонецПроцедуры

// +СофтФон

#Область Процедуры_и_Функции_Софтфон

&НаКлиенте
Процедура сфпПереводЗвонка(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
		СтруктураКонтакта = Новый Структура;
		СтруктураКонтакта.Вставить("НомерТелефона", сфпНомерПеревода);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("LineName", НайденныйЗвонок.LineName);
		ДополнительныеПараметры.Вставить("hCall", hCall);
		сфпВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры);		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПодтвердитьПереводЗвонка"
//
Процедура сфпПодтвердитьПереводЗвонка(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если сфпИдентификаторПереводимогоЗвонка > 0 Тогда
		// Подтверждаем перевод звонка
		сфпПанельУправления.FinishTransferCall(НайденныйЗвонок.LineName, сфпИдентификаторПереводимогоЗвонка, "");
		сфпИдентификаторПереводимогоЗвонка = 0;
		Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
		Элементы.сфпУдержатьЗвонок.Доступность 		= Ложь;
		Элементы.сфпПереводЗвонка.Доступность 		= Ложь;
		Закрыть();
	Иначе		
		// просто кладём трубку, без перевода, задаём вопрос на запись данных
		сфпПанельУправления.DropCall(НайденныйЗвонок.LineName, hCall);
		НовоеОповещение = Новый ОписаниеОповещения("сфпПослеЗавершенияРазговора", ЭтотОбъект);
		ТекстВопроса = Нстр("ru='Принять обращение?';en='Accept Appeal?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Да");
		СписокКнопок.Добавить("Отмена");
		ПоказатьВопрос(НовоеОповещение, ТекстВопроса, СписокКнопок);
	КонецЕсли;
КонецПроцедуры // ПодтвердитьПереводЗвонка()

&НаКлиенте
Процедура сфпПослеЗавершенияРазговора(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	Если Результат = "Да" Тогда
		ПерейтиК(Неопределено);
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура сфпУдержатьЗвонок(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ сфпУдержаниеЗвонка Тогда
		Элементы.сфпУдержатьЗвонок.Картинка	= БиблиотекаКартинок.сфпОтветитьПанель;
	Иначе		
		Элементы.сфпУдержатьЗвонок.Картинка	= БиблиотекаКартинок.сфпУдержаниеПанель;
	КонецЕсли;			
	сфпПанельУправления.HoldCall(НайденныйЗвонок.LineName, НайденныйЗвонок.hCall);
	сфпУдержаниеЗвонка = НЕ сфпУдержаниеЗвонка;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик оповещения переключения звонка
//
// Параметры:
//	СтруктураКонтакта		- Структура	- Структура, содержащая данные звонка
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура сфпВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры)
	Если СтруктураКонтакта = Неопределено Тогда Возврат; КонецЕсли;
	ПолеВводаНомера = СтруктураКонтакта.НомерТелефона;
	сфпИдентификаторПереводимогоЗвонка = ДополнительныеПараметры.hCall;
	ИмяЛинии = ДополнительныеПараметры.LineName; 
	сфпПанельУправления.StartTransferCall(ИмяЛинии, сфпИдентификаторПереводимогоЗвонка, ПолеВводаНомера, "");
	Элементы.сфпПодтвердитьПеревод.Доступность = Истина;
КонецПроцедуры // ВыполнитьПереключитьЗвонок()

&НаСервере
Процедура сфпОбновитьТелефонныйЗвонок(ТелефоныйЗвонок)
	ЗвонокОбъект = ТелефоныйЗвонок.ПолучитьОбъект();
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
		ЗвонокОбъект.АбонентКонтакт	= ИнформацияПоИнтересуКонтактноеЛицо;
	ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
		ЗвонокОбъект.АбонентКонтакт	= ИнформацияПоИнтересуКлиент;
	Иначе
		ЗвонокОбъект.АбонентКонтакт	= ИнформацияПоИнтересуПотенциальныйКлиент;
	КонецЕсли;	
	ЗвонокОбъект.АбонентПредставление	= ЗвонокОбъект.АбонентКонтакт.Наименование; 	
	ЗвонокОбъект.УдалитьПредмет			= ИнформацияПоИнтересуСсылка;
	Попытка
		ЗвонокОбъект.Записать();
	Исключение
	КонецПопытки;
 	СтруктураДляЗаписи = РегистрыСведений.ПредметыПапкиВзаимодействий.РеквизитыВзаимодействия();
	СтруктураДляЗаписи.Предмет                 = ЗвонокОбъект.УдалитьПредмет;
	СтруктураДляЗаписи.РассчитыватьРассмотрено = Ложь;
	РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(ЗвонокОбъект.Ссылка, СтруктураДляЗаписи);
КонецПроцедуры // СфпОбновитьТелефонныйЗвонок().

&НаСервереБезКонтекста
Функция сфпПолучитьИдентификаторЗвонка(ТелефЗвонок)
	Если ТелефЗвонок = Неопределено ИЛИ ТипЗнч(ТелефЗвонок) <> Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтрЗаменить(ТелефЗвонок.сфпИдентификаторЗвонка, Символы.НПП, ""); 
КонецФункции	

&НаСервереБезКонтекста
Функция сфпПолучитьМассивИнтересов(КонтактноеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	CRM_Интерес.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо
	|	И НЕ CRM_Интерес.Завершен
	|	И НЕ CRM_Интерес.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаКлиенте
Процедура сфпВидимостьИДоступностьГруппыСофтфон()
	сфпНомерПеревода = "";
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		Элементы.ГруппаКнопкиСофтфона.Видимость = Истина;
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Истина;
		сфпНомерПеревода = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ИнформацияПоИнтересуОтветственный, Истина);
		Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
			Элементы.сфпВнутреннийНомер.Заголовок = Нстр("ru = 'Вн. номер: '") + сфпНомерПеревода;				
			Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
				СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
				Если СтатусЛинии <> Неопределено Тогда
					сфпСтатус = СтатусЛинии;
				Иначе
					сфпСтатус = 2;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.сфпВнутреннийНомер.Заголовок = "";
			сфпСтатус = 3;
		КонецЕсли;
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения));
			Если НайденныйЗвонок <> Неопределено Тогда
				Элементы.сфпУдержатьЗвонок.Доступность 	= Истина;							
				Элементы.сфпПодтвердитьПеревод.Доступность = Истина;
				Элементы.сфпПереводЗвонка.Доступность = НЕ (сфпНомерПеревода =  сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ТекущийПользователь));				
			Иначе
				Элементы.сфпУдержатьЗвонок.Доступность 	= Ложь;							
				Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;											
				Элементы.сфпПереводЗвонка.Доступность = Ложь;				
			КонецЕсли;
		Иначе
			Элементы.сфпУдержатьЗвонок.Доступность 	= Ложь;													
			Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;														
			Элементы.сфпПереводЗвонка.Доступность = Ложь;							
		КонецЕсли;					
	Иначе
		Элементы.ГруппаКнопкиСофтфона.Видимость = Ложь;				
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Ложь;
	КонецЕсли;				
КонецПроцедуры	

&НаСервере
Функция сфпВидимостьКнопкиДобавитьТелефонУКонтакта(СсылкаНаОбъект)
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат сфпСофтФонПроСервер.сфпПроверитьНаличиеНомераТелефонаУАбонента(СсылкаНаОбъект, ПоискКлиентТелефон); 
КонецФункции


#КонецОбласти

// -СофтФон


#КонецОбласти

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	РазвернутьСовсемВсе(Команда);
	//ЭлементыКлиенты = ДеревоПоиска.ПолучитьЭлементы();
	//Для Каждого СтрокаКлиент Из ЭлементыКлиенты Цикл
	//	ИдентификаторСтроки = СтрокаКлиент.ПолучитьИдентификатор();
	//	Элементы.ДеревоПоиска.Развернуть(ИдентификаторСтроки, Истина);
	//	ЭлементыКонтакты = СтрокаКлиент.ПолучитьЭлементы();
	//	Для Каждого СтрокаКонтакт Из ЭлементыКонтакты Цикл
	//		ИдентификаторСтроки = СтрокаКонтакт.ПолучитьИдентификатор();
	//		//Если СтрокаКонтакт.Объект = НСтр("ru='Прочие контакты и интересы';en='Other contacts and leads'") Тогда
	//		//	Элементы.ДеревоПоиска.Свернуть(ИдентификаторСтроки);
	//		//Иначе
	//		Элементы.ДеревоПоиска.Развернуть(ИдентификаторСтроки, Истина);
	//		//КонецЕсли;
	//		
	//	КонецЦикла;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСовсемВсе(Команда)
	ЭлементыКлиенты = ДеревоПоиска.ПолучитьЭлементы();
	Для Каждого СтрокаКлиент Из ЭлементыКлиенты Цикл
		ИдентификаторСтроки = СтрокаКлиент.ПолучитьИдентификатор();
		Элементы.ДеревоПоиска.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	//Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		ЭлементыДерева = ДеревоПоиска.ПолучитьЭлементы();
	//Иначе
	//	ЭлементыДерева = Команда;
	//КонецЕсли;
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоПоиска.Свернуть(ИдентификаторСтроки);
		//Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
		//	СвернутьВсе(СтрокаДерева.ПолучитьЭлементы());
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	тДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
	Если тДанные <> Неопределено Тогда
		Если тДанные.Ссылка <> "ПрочиеКонтакты" И тДанные.Ссылка <> "НовыйКлиент" Тогда
			ПоказатьЗначение(, тДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтборыСписков

&НаСервере
Процедура ОбработатьВыборкуЗапроса(ВыборкаКлиентов, МассивСсылок = Неопределено, ТЗКонтакты = Неопределено, ТЗКлиенты = Неопределено, Потенциальные = Ложь)
	МассивДоступныхПользователей = ПолучитьДоступныхМенеджеров(НЕ Константы.CRM_ИспользоватьДоступныхПользователей.Получить());
	ВеткаКорень = ДеревоПоиска.ПолучитьЭлементы();
	МассивКлиентов = Новый Массив;	
	// сначала ищем среди среди найденных ключевые физ.лица
	Пока ВыборкаКлиентов.Следующий() Цикл
		Если ВыборкаКлиентов.Клиент <> Null Тогда		
			Если ТипЗнч(ВыборкаКлиентов.Клиент) = Тип("СправочникСсылка.Партнеры") 
			И ВыборкаКлиентов.Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда			
				МассивСвязанныхЛиц = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(ВыборкаКлиентов.Клиент);
				Если МассивСвязанныхЛиц.Количество() > 0 Тогда
					Для Каждого ЭлементМассива Из МассивСвязанныхЛиц Цикл
						МассивКлиентов.Добавить(ЭлементМассива.Владелец);
					КонецЦикла;						
				КонецЕсли;					
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;	
	ВыборкаКлиентов.Сбросить();
	Пока ВыборкаКлиентов.Следующий() Цикл
		Если ВыборкаКлиентов.Клиент <> Null Тогда
			Если МассивКлиентов.Найти(ВыборкаКлиентов.Клиент) <> Неопределено Тогда Продолжить; КонецЕсли;
			СтрокаКлиент = ВеткаКорень.Добавить();
			СтрокаКлиент.Ссылка = ВыборкаКлиентов.Клиент;
			СтрокаКлиент.Объект = ?(ВыборкаКлиентов.Клиент = "Потенциальный", НСтр("ru='Потенциальные клиенты';en='Potential customers'"), ВыборкаКлиентов.Клиент.Наименование);
			СтрокаКлиент.Соответствует = Потенциальные ИЛИ ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(ВыборкаКлиентов.Клиент) <> Неопределено,  Ложь);  								
			// Проверка: является ли клиент ключевым физ. лицом
			Если ТипЗнч(ВыборкаКлиентов.Клиент) = Тип("СправочникСсылка.Партнеры") 
			И ВыборкаКлиентов.Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				
				// Отдельный механизм построения дерева поиска
				МассивСвязанныхЛиц = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(ВыборкаКлиентов.Клиент);
				СтрокаКлиент.Объект = СтрокаКлиент.Объект + ?(МассивСвязанныхЛиц.Количество() > 0, Нстр("ru = ' (ключевое физ. лицо)'"), Нстр("ru = ' (физ. лицо)'"));
				Если МассивСвязанныхЛиц.Количество() > 0 Тогда
					Для Каждого ЭлементМассива Из МассивСвязанныхЛиц Цикл
						МассивКЛ = сфпСофтФонПроСервер.сфпПолучитьВсехКонтактныхЛицПартнера(ЭлементМассива.Владелец);
						ВеткаКлиент = СтрокаКлиент.ПолучитьЭлементы();
						СтрокаКонтакт = ВеткаКлиент.Добавить();
						СтрокаКонтакт.Ссылка = ЭлементМассива.Владелец;
						СтрокаКонтакт.Объект = ЭлементМассива.Владелец.Наименование;
						СтрокаКонтакт.Соответствует = ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(ЭлементМассива.Владелец) <> Неопределено,  Ложь);
						ВеткаКонтакт = СтрокаКонтакт.ПолучитьЭлементы();
						Для Каждого КонтактноеЛицо Из МассивКЛ Цикл
							СтрокаКЛ = ВеткаКонтакт.Добавить();
							СтрокаКЛ.Ссылка = КонтактноеЛицо;
							СтрокаКЛ.Объект = КонтактноеЛицо.Наименование;
							Если ЗначениеЗаполнено(ТЗКонтакты) Тогда
								Если ТЗКонтакты.Найти(КонтактноеЛицо) <> Неопределено Тогда
									СтрокаКЛ.Соответствует	= Истина;
								КонецЕсли;																			
							ИначеЕсли ЗначениеЗаполнено(МассивСсылок) Тогда									
								Если МассивСсылок.Найти(КонтактноеЛицо) <> Неопределено Тогда
									СтрокаКЛ.Соответствует	= Истина;									
								КонецЕсли;
							КонецЕсли;
							МассивИнтересов = сфпПолучитьМассивИнтересов(КонтактноеЛицо);
							ВеткаИнтерес = СтрокаКЛ.ПолучитьЭлементы();
							Для Каждого Интерес Из МассивИнтересов Цикл
								Если МассивДоступныхПользователей.Найти(Интерес.Автор) = Неопределено 
									 И МассивДоступныхПользователей.Найти(Интерес.Ответственный) = Неопределено Тогда
									 Продолжить;
								КонецЕсли;	 
								СтрокаИнтерес 			= ВеткаИнтерес.Добавить();
								СтрокаИнтерес.Ссылка 	= Интерес.Ссылка;
								СтрокаИнтерес.Объект 	= Интерес.Тема;
								СтрокаИнтерес.Соответствует = ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(Интерес.Ссылка) <> Неопределено, Ложь);								
							КонецЦикла;								
						КонецЦикла;							
					КонецЦикла;
					Продолжить;
				Иначе
					ВыборкаКонтактов = ВыборкаКлиентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				КонецЕсли;					
			Иначе	
				ВыборкаКонтактов = ВыборкаКлиентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КонецЕсли;				
		КонецЕсли;
		ВеткаКлиент = СтрокаКлиент.ПолучитьЭлементы();
		ПрочиеКонтакты = Ложь;
		Пока ВыборкаКонтактов.Следующий() Цикл
			Если ВыборкаКонтактов.Контакт <> null Тогда
				Если ВыборкаКонтактов.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка() Тогда
						КонтактСоответствует = Ложь;
						СтрокаКонтакт = ВеткаКлиент.Добавить();
						СтрокаКонтакт.Объект = НСтр("ru='<Без контакта>';en='<Without contact>'");
				ИначеЕсли ЗначениеЗаполнено(ТЗКонтакты) Тогда
					Если ТЗКонтакты.Найти(ВыборкаКонтактов.Контакт) <> Неопределено Тогда
						КонтактСоответствует = Истина;
						СтрокаКонтакт = ВеткаКлиент.Добавить();
					Иначе
						КонтактСоответствует = Ложь;
						//Если НЕ ПрочиеКонтакты Тогда
						//	КонтактСоответствует = Ложь;
						//	ПрочиеКонтакты = Истина;
						//	СтрокаПрочие = ВеткаКлиент.Вставить(0);
						//	ВеткаПрочие = СтрокаПрочие.ПолучитьЭлементы();
						//	СтрокаПрочие.Объект = НСтр("ru='Прочие контакты и интересы';en='Other contacts and leads'");
						//	СтрокаПрочие.Ссылка = "ПрочиеКонтакты";
						//КонецЕсли;
						//СтрокаКонтакт = ВеткаПрочие.Добавить();
						СтрокаКонтакт = ВеткаКлиент.Добавить();
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(МассивСсылок) Тогда
					Если МассивСсылок.Найти(ВыборкаКонтактов.Контакт) <> Неопределено Тогда
						КонтактСоответствует = Истина;
						СтрокаКонтакт = ВеткаКлиент.Добавить();
					Иначе
						КонтактСоответствует = Ложь;
						//Если НЕ ПрочиеКонтакты Тогда
						//	КонтактСоответствует = Ложь;
						//	ПрочиеКонтакты = Истина;
						//	СтрокаПрочие = ВеткаКлиент.Добавить();
						//	ВеткаПрочие = СтрокаПрочие.ПолучитьЭлементы();
						//	СтрокаПрочие.Объект = НСтр("ru='Прочие контакты и интересы';en='Other contacts and leads'");
						//	СтрокаПрочие.Ссылка = "ПрочиеКонтакты";
						//КонецЕсли;
						//СтрокаКонтакт = ВеткаПрочие.Добавить();
						СтрокаКонтакт = ВеткаКлиент.Добавить();
					КонецЕсли;
				Иначе
					КонтактСоответствует = Ложь;
					СтрокаКонтакт = ВеткаКлиент.Добавить();
				КонецЕсли;
				
				СтрокаКонтакт.Ссылка = ВыборкаКонтактов.Контакт;
				Если Не ЗначениеЗаполнено(СтрокаКонтакт.Объект) Тогда
					СтрокаКонтакт.Объект = ВыборкаКонтактов.Контакт.Наименование;
				КонецЕсли;
				СтрокаКонтакт.Соответствует = Потенциальные ИЛИ КонтактСоответствует;
				ВыборкаИнтересов = ВыборкаКонтактов.Выбрать();
				ВеткаКонтакт = СтрокаКонтакт.ПолучитьЭлементы();
				Пока ВыборкаИнтересов.Следующий() Цикл
					Если ВыборкаИнтересов.Интерес <> Null Тогда
						Если ТипЗнч(ВыборкаИнтересов.Интерес) = Тип("ДокументСсылка.CRM_Интерес") Тогда
							Если МассивДоступныхПользователей.Найти(ВыборкаИнтересов.Интерес.Автор) = Неопределено 
								И МассивДоступныхПользователей.Найти(ВыборкаИнтересов.Интерес.Ответственный) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;		 
						СтрокаИнтерес = ВеткаКонтакт.Добавить();
						СтрокаИнтерес.Ссылка = ВыборкаИнтересов.Интерес;
						Если ТипЗнч(ВыборкаИнтересов.Интерес) = Тип("ДокументСсылка.CRM_Интерес") Тогда
							СтрокаИнтерес.Объект = ВыборкаИнтересов.Интерес.Тема;
						Иначе
							СтрокаИнтерес.Объект = ВыборкаИнтересов.Интерес.Наименование;
						КонецЕсли;
						//СтрокаИнтерес.Соответствует = Потенциальные ИЛИ ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(ВыборкаИнтересов.Интерес) <> Неопределено, СтрокаКлиент.Соответствует ИЛИ СтрокаКонтакт.Соответствует);
						СтрокаИнтерес.Соответствует = ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(ВыборкаИнтересов.Интерес) <> Неопределено, Ложь);
						Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
							ВыбранПотенциальныйКлиент = (ВыборкаКлиентов.Клиент = "Потенциальный");
							ИнформацияПоИнтересуСсылка = ВыборкаИнтересов.Интерес;
							Если ВыборкаКлиентов.Клиент = "Потенциальный" Тогда
								ИнформацияПоИнтересуПотенциальныйКлиент = ИнформацияПоИнтересуСсылка.ПотенциальныйКлиент;
							Иначе
								Если ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
									ИнформацияПоИнтересуКлиент = ИнформацияПоИнтересуСсылка.CRM_Партнер;
									ИнформацияПоИнтересуКонтактноеЛицо = ИнформацияПоИнтересуСсылка.CRM_КонтактноеЛицо;
								Иначе
									ИнформацияПоИнтересуКлиент = ИнформацияПоИнтересуСсылка.Партнер;
									ИнформацияПоИнтересуКонтактноеЛицо = ИнформацияПоИнтересуСсылка.КонтактноеЛицо;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаАвтопереход(РезультатЗапроса)
	
	// проверка на автопереход
	Если РезультатЗапроса.Пустой() Тогда
		ИнформацияПоИнтересуНайденоИнтересов = 0;
		РежимВводаОбращения = "НовыйКонтакт_3";
		Элементы.СтраницаПринятьОбращение.Видимость = Истина;
		Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение;
		ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новый потенциальный клиент и интерес';en='New Appeal: New potential customer and lead'");
		Возврат;
	Иначе 
		ВыборкаКлиентовДерево = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаКлиентовДерево.Строки.Количество() = 1 И ВыборкаКлиентовДерево.Строки[0].Интерес = 1 Тогда
			ИнформацияПоИнтересуНайденоИнтересов = 1;
			РежимВводаОбращения = "ТекущийИнтерес_1";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеПоПереданнымСсылкам(МассивСсылок)
	
	ДеревоПоиска.ПолучитьЭлементы().Очистить();
	ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	
	НоваяСтрока = ДеревоПоиска.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Объект = НСтр("ru='Создать: Клиента / Потенциального клиента / Контакт / Интерес';en='Create: Customer / Potential customer / Contact / Lead'");
	НоваяСтрока.ССылка = "НовыйКлиент";
	
	МассивКлиентов 				= Новый Массив;
	МассивПотенциальныхКлиентов = Новый Массив;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
			МассивКлиентов.Добавить(Ссылка);
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Если МассивКлиентов.Найти(Ссылка.Владелец) = Неопределено Тогда
				МассивКлиентов.Добавить(Ссылка.Владелец);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			МассивПотенциальныхКлиентов.Добавить(Ссылка);
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если ЗначениеЗаполнено(Ссылка.Партнер) Тогда
				Если МассивКлиентов.Найти(Ссылка.Партнер) = Неопределено Тогда
					МассивКлиентов.Добавить(Ссылка.Партнер);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Ссылка.КонтактноеЛицо) Тогда
				Если МассивКлиентов.Найти(Ссылка.КонтактноеЛицо.Владелец) = Неопределено Тогда
					МассивКлиентов.Добавить(Ссылка.КонтактноеЛицо.Владелец);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Ссылка.ПотенциальныйКлиент) Тогда
				Если МассивПотенциальныхКлиентов.Найти(Ссылка.ПотенциальныйКлиент) = Неопределено Тогда
					МассивПотенциальныхКлиентов.Добавить(Ссылка.ПотенциальныйКлиент);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникКЛ.Владелец КАК Клиент,
	|	СправочникКЛ.Ссылка КАК Контакт
	|ПОМЕСТИТЬ ВсеСвязи
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК СправочникКЛ
	|ГДЕ
	|	СправочникКЛ.Владелец В(&МассивКлиентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Потенциальный"",
	|	СправочникПК.Ссылка
	|ИЗ
	|	Справочник.CRM_ПотенциальныеКлиенты КАК СправочникПК
	|ГДЕ
	|	СправочникПК.Ссылка В(&МассивПотенциальныхКлиентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партнеры.Ссылка, 
    |	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В(&МассивКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвязи.Клиент КАК Клиент,
	|	ВсеСвязи.Контакт КАК Контакт,
	|	ДокИнтерес.Ссылка КАК Интерес
	|ИЗ
	|	ВсеСвязи КАК ВсеСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК ДокИнтерес
	|		ПО (ДокИнтерес.ПотенциальныйКлиент = ВсеСвязи.Контакт
	|				ИЛИ (ВсеСвязи.Клиент = ДокИнтерес.Партнер И ДокИнтерес.КонтактноеЛицо = ВсеСвязи.Контакт)
	|					И НЕ ДокИнтерес.Завершен
	|					И НЕ ДокИнтерес.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеСвязи.Клиент,
	|	Интерес УБЫВ,
	|	ВсеСвязи.Контакт
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерес)
	|ПО
	|	Клиент,
	|	Контакт";
	
	Запрос.УстановитьПараметр("МассивКлиентов",					МассивКлиентов);
	Запрос.УстановитьПараметр("МассивПотенциальныхКлиентов", 	МассивПотенциальныхКлиентов);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Клиент(-ы) без контактов
	Если РезультатЗапроса.Пустой() И МассивКлиентов.Количество() > 0 Тогда
		ВеткаКорень = ДеревоПоиска.ПолучитьЭлементы();
		Для Каждого ПереданныйКлиент Из МассивКлиентов Цикл 
			СтрокаКлиент = ВеткаКорень.Добавить();
			СтрокаКлиент.Ссылка = ПереданныйКлиент;
			СтрокаКлиент.Объект = ПереданныйКлиент.Наименование;
			СтрокаКлиент.Соответствует = Истина;  
		КонецЦикла;
	Иначе
		ПроверитьНаАвтопереход(РезультатЗапроса);
		ВыборкаКлиентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбработатьВыборкуЗапроса(ВыборкаКлиентов, МассивСсылок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеПоПоиску()
	
	Элементы.ДеревоПоискаОбъект.Заголовок = НСтр("ru='Клиент | Контакт | Интерес';en='Customer | Contact | Lead'");
	
	ДеревоПоиска.ПолучитьЭлементы().Очистить();
	ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	ПоискКлиентНаименование = СтрЗаменить(ПоискКлиентНаименование,"""","""""");	
	ИскатьНаименование = ЗначениеЗаполнено(ПоискКлиентНаименование);
	ИскатьТелефон = ЗначениеЗаполнено(ПоискКлиентТелефон);
	ИскатьПочту = ЗначениеЗаполнено(ПоискКлиентEmail);
	ИскатьИНН = ЗначениеЗаполнено(ПоискКлиентИНН);
	ИскатьПрочее = ЗначениеЗаполнено(ПоискКлиентПрочее);
	
	КС = Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная);
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповС = Новый ОписаниеТипов(МассивСтрока, , КС);
	ОписаниеТиповБ = Новый ОписаниеТипов(МассивБулево);
	
	КлиентыТЗ = Новый ТаблицаЗначений;
	КлиентыТЗ.Колонки.Добавить("Ссылка", НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
	КлиентыТЗ.Колонки.Добавить("Соответствует", ОписаниеТиповБ);
	КлиентыТЗ.Колонки.Добавить("Объект", ОписаниеТиповС);
	// КлиентыТЗ.Колонки.Добавить("Телефон", ОписаниеТиповС);
	// КлиентыТЗ.Колонки.Добавить("Email", ОписаниеТиповС);
	ТелефонДляПоиска = ПоискКлиентТелефон;
	ТелефонДляПоиска = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ТелефонДляПоиска);
	Если СтрДлина(ПоискКлиентТелефон) > 10 Тогда // ищем только по последним 
		ТелефонДляПоиска = Прав(ТелефонДляПоиска, 10);
	КонецЕсли;	
	
	УсловиеСписок = "
	|ГДЕ
	|	ВложенныйЗапрос.Ссылка В(&СписокКлиентов)
	|";
	
	
	ТекстТелефон = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Контакт КАК Контакт
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|		NULL КАК Контакт
	|	ИЗ
	|		Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|	ГДЕ
	|		(ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%" + ТелефонДляПоиска + "%""
	|				ИЛИ ПартнерыКонтактнаяИнформация.НомерТелефона ПОДОБНО ""%" + ТелефонДляПоиска + "%""
	|				ИЛИ ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов ПОДОБНО ""%" + ТелефонДляПоиска + "%"")
	|		И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|		КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
	|	ИЗ
	|		Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|	ГДЕ
	|		(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%" + ТелефонДляПоиска + "%""
	|				ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона ПОДОБНО ""%" + ТелефонДляПоиска + "%""
	|				ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов ПОДОБНО ""%" + ТелефонДляПоиска + "%"")
	|		И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка, ВложенныйЗапрос.Контакт";
	
	ТекстПочта = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Контакт КАК Контакт
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка  КАК Ссылка,
	|	NULL КАК Контакт
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.АдресЭП ПОДОБНО ""%" + ПоискКлиентEmail + "%""
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП ПОДОБНО ""%" + ПоискКлиентEmail + "%""
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) КАК ВложенныйЗапрос
	|#УсловиеСписок
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка, ВложенныйЗапрос.Контакт";
	
	ТекстНаименование = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Контакт КАК Контакт
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникКлиент.Ссылка КАК Ссылка,
	|	NULL КАК Контакт
	|ИЗ
	|	Справочник.Партнеры КАК СправочникКлиент
	|ГДЕ
	|	СправочникКлиент.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""
	|	ИЛИ СправочникКлиент.НаименованиеПолное ПОДОБНО ""%" + ПоискКлиентНаименование + "%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеров.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеров.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%"") КАК ВложенныйЗапрос
	|#УсловиеСписок
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка, ВложенныйЗапрос.Контакт";
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстИНН = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочникКлиент.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК СправочникКлиент
		|ГДЕ
		|	СправочникКлиент.CRM_ИНН ПОДОБНО ""%" + ПоискКлиентИНН + "%"") КАК ВложенныйЗапрос
		|#УсловиеСписок
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка";
	ИначеЕсли НЕ CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники", "Партнеры") Тогда // Для УНФ
		ТекстИНН = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН ПОДОБНО ""%" + ПоискКлиентИНН + "%"") КАК ВложенныйЗапрос
		|#УсловиеСписок
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка";
	Иначе  // ERP, КА, УТ
		ТекстИНН = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочникКлиент.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК СправочникКлиент
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
        |		ПО Контрагенты.Партнер = СправочникКлиент.Ссылка
		|ГДЕ
		|	Контрагенты.ИНН ПОДОБНО ""%" + ПоискКлиентИНН + "%"") КАК ВложенныйЗапрос
		|#УсловиеСписок
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка";
	КонецЕсли;
	
	ТекстПрочее = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Контакт КАК Контакт
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка  КАК Ссылка,
	|	NULL КАК Контакт
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%" + ПоискКлиентПрочее + "%""
	|	И ПартнерыКонтактнаяИнформация.Тип В (&ТипыКИ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%" + ПоискКлиентПрочее + "%""
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип В (&ТипыКИ)) КАК ВложенныйЗапрос
	|#УсловиеСписок
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка, ВложенныйЗапрос.Контакт";
	
	СписокКлиентов = Новый Массив;
	СписокКонтактовСоответствие = Новый Массив;
	СписокКлиентовСоответствие = Новый Массив;
	
	ИскатьПартнеровНаименование = ПоляПоискаНаименование.НайтиПоЗначению("Партнеры").Пометка;
	ИскатьКонтактыНаименование = ПоляПоискаНаименование.НайтиПоЗначению("КонтактныеЛица").Пометка;
	
	ИскатьПартнеровПочта = ПоляПоискаПочта.НайтиПоЗначению("Партнеры").Пометка;
	ИскатьКонтактыПочта = ПоляПоискаПочта.НайтиПоЗначению("КонтактныеЛица").Пометка;
	
	ИскатьПартнеровТелефон = ПоляПоискаТелефон.НайтиПоЗначению("Партнеры").Пометка;
	ИскатьКонтактыТелефон = ПоляПоискаТелефон.НайтиПоЗначению("КонтактныеЛица").Пометка;
	
	Если ИскатьТелефон Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстТелефон;
		ТабКлиентов = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из ТабКлиентов Цикл
			Если Строка.Контакт <> Null Тогда
				Если СписокКонтактовСоответствие.Найти(Строка.Контакт) = Неопределено Тогда
					СписокКонтактовСоответствие.Добавить(Строка.Контакт);
				КонецЕсли;	
				Если ИскатьКонтактыТелефон Тогда
					Если СписокКлиентов.Найти(Строка.Ссылка) = Неопределено Тогда
						СписокКлиентов.Добавить(Строка.Ссылка);	
					КонецЕсли;
				КонецЕсли;	
			Иначе
				Если СписокКлиентовСоответствие.Найти(Строка.Ссылка) = Неопределено Тогда
					СписокКлиентовСоответствие.Добавить(Строка.Ссылка);
				КонецЕсли;
				Если ИскатьПартнеровТелефон Тогда
					Если СписокКлиентов.Найти(Строка.Ссылка) = Неопределено Тогда
						СписокКлиентов.Добавить(Строка.Ссылка);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если ИскатьПочту Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
		Запрос.Текст = СтрЗаменить(ТекстПочта, "#УсловиеСписок", ?(ИскатьТелефон, УсловиеСписок, ""));
		ТабКлиентов = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из ТабКлиентов Цикл
			Если Строка.Контакт <> Null Тогда
				Если СписокКонтактовСоответствие.Найти(Строка.Контакт) = Неопределено Тогда
					СписокКонтактовСоответствие.Добавить(Строка.Контакт);
				КонецЕсли;
				Если ИскатьКонтактыПочта Тогда
					Если СписокКлиентов.Найти(Строка.Ссылка) = Неопределено Тогда
						СписокКлиентов.Добавить(Строка.Ссылка);	
					КонецЕсли;	
				КонецЕсли;
			Иначе
				Если СписокКлиентовСоответствие.Найти(Строка.Ссылка) = Неопределено Тогда
					СписокКлиентовСоответствие.Добавить(Строка.Ссылка);
				КонецЕсли;
				Если ИскатьПартнеровПочта Тогда
					Если СписокКлиентов.Найти(Строка.Ссылка) = Неопределено Тогда
						СписокКлиентов.Добавить(Строка.Ссылка);	
					КонецЕсли;	
				КонецЕсли;

			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ИскатьНаименование Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
		Запрос.Текст = СтрЗаменить(ТекстНаименование, "#УсловиеСписок", ?(ИскатьТелефон ИЛИ ИскатьПочту, УсловиеСписок, ""));
		ТабКлиентов = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из ТабКлиентов Цикл
			Если Строка.Контакт <> Null Тогда
				Если СписокКонтактовСоответствие.Найти(Строка.Контакт) = Неопределено Тогда
					СписокКонтактовСоответствие.Добавить(Строка.Контакт);
				КонецЕсли;
				Если ИскатьКонтактыНаименование Тогда
					Если СписокКлиентов.Найти(Строка.Ссылка) = Неопределено Тогда
						СписокКлиентов.Добавить(Строка.Ссылка);	
					КонецЕсли;	
				КонецЕсли;
			Иначе
				Если СписокКлиентовСоответствие.Найти(Строка.Ссылка) = Неопределено Тогда
					СписокКлиентовСоответствие.Добавить(Строка.Ссылка);
				КонецЕсли;
				Если ИскатьПартнеровНаименование Тогда
					Если СписокКлиентов.Найти(Строка.Ссылка) = Неопределено Тогда
						СписокКлиентов.Добавить(Строка.Ссылка);	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ИскатьИНН Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
		Запрос.Текст = СтрЗаменить(ТекстИНН, "#УсловиеСписок", ?(ИскатьТелефон ИЛИ ИскатьПочту ИЛИ ИскатьНаименование, УсловиеСписок, ""));
		ТабКлиентов = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из ТабКлиентов Цикл
			Если СписокКлиентовСоответствие.Найти(Строка.Ссылка) = Неопределено Тогда
				СписокКлиентовСоответствие.Добавить(Строка.Ссылка);
			КонецЕсли;
			Если СписокКлиентов.Найти(Строка.Ссылка) = Неопределено Тогда
				СписокКлиентов.Добавить(Строка.Ссылка);	
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Если ИскатьПрочее Тогда
		СписокТипыКИ = Новый Массив;
		Для Каждого ТипКИ Из ПоляПоискаПрочее Цикл
			Если ТипКИ.Пометка Тогда
				СписокТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации[ТипКИ.Значение]);
			КонецЕсли;	
		КонецЦикла;	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
		Запрос.УстановитьПараметр("ТипыКИ", СписокТипыКИ);
		Запрос.Текст = СтрЗаменить(ТекстПрочее, "#УсловиеСписок", ?(ИскатьТелефон ИЛИ ИскатьПочту ИЛИ ИскатьНаименование ИЛИ ИскатьИНН, УсловиеСписок, ""));
		ТабКлиентов = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из ТабКлиентов Цикл
			Если СписокКлиентовСоответствие.Найти(Строка.Ссылка) = Неопределено Тогда
				СписокКлиентовСоответствие.Добавить(Строка.Ссылка);
			КонецЕсли;
			Если СписокКлиентов.Найти(Строка.Ссылка) = Неопределено Тогда
				СписокКлиентов.Добавить(Строка.Ссылка);	
			КонецЕсли;	
		КонецЦикла;

	КонецЕсли;	
	
	Для Каждого СтрокаКлиент Из СписокКлиентов Цикл
		НовыйВладелец = КлиентыТЗ.Добавить();
		НовыйВладелец.Ссылка = СтрокаКлиент;
		НовыйВладелец.Соответствует = Истина;
	КонецЦикла;
	
	Если СписокКлиентов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Клиент,
		|	КонтактныеЛицаПартнеров.Ссылка КАК Контакт
		|ПОМЕСТИТЬ ВсеКонтакты
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
		|ГДЕ
		|	Партнеры.Ссылка В(&Партнеры)
		|	И &УсловиеЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.БизнесПроцесс.Партнер КАК Партнер,
		|	ЗадачаИсполнителя.БизнесПроцесс.КонтактноеЛицо КАК КонтактноеЛицо
		|ПОМЕСТИТЬ ЗадачиНезависимыхПроцессов
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.НезависимыйПроцесс)
		|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен
		|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВсеКонтакты.Клиент КАК Клиент,
		|	ВЫБОР
		|		КОГДА CRM_Интерес.Ссылка = NULL
		|			ТОГДА ВсеКонтакты.Контакт
		|		ИНАЧЕ CRM_Интерес.КонтактноеЛицо
		|	КОНЕЦ КАК Контакт,
		|	CRM_Интерес.Ссылка КАК Интерес,
		|	CRM_Интерес.КонтактноеЛицо КАК КонтактноеЛицо,
		|	ВсеКонтакты.Клиент.Наименование КАК КлиентНаименование
		|ИЗ
		|	ВсеКонтакты КАК ВсеКонтакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
		|		ПО ВсеКонтакты.Клиент = CRM_Интерес.Партнер
		|			И (НЕ CRM_Интерес.Завершен)
		|			И (НЕ CRM_Интерес.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеКонтакты.Клиент,
		|	ВсеКонтакты.Контакт,
		|	ЗадачиНезависимыхПроцессов.Задача,
		|	NULL,
		|	ВсеКонтакты.Клиент.Наименование
		|ИЗ
		|	ВсеКонтакты КАК ВсеКонтакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиНезависимыхПроцессов КАК ЗадачиНезависимыхПроцессов
		|		ПО ВсеКонтакты.Клиент = ЗадачиНезависимыхПроцессов.Партнер
		|			И ВсеКонтакты.Контакт = ЗадачиНезависимыхПроцессов.КонтактноеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлиентНаименование
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерес)
		|ПО
		|	Клиент,
		|	Контакт");
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеЭтоГруппа", "И НЕ Партнеры.ЭтоГруппа");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеЭтоГруппа", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Партнеры", СписокКлиентов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПроверитьНаАвтопереход(РезультатЗапроса);
		
		ВыборкаКлиентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		//ОбработатьВыборкуЗапроса(ВыборкаКлиентов, Неопределено, КлиентыТЗ, КонтактыПоКИТЗ, Ложь);
		ОбработатьВыборкуЗапроса(ВыборкаКлиентов, СписокКлиентовСоответствие, СписокКонтактовСоответствие, Неопределено, Ложь);
		
	Иначе
		
		Элементы.ДеревоПоискаОбъект.Заголовок = НСтр("ru='Потенциальный клиент | Интерес';en='Potential customer | Lead'");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочникКлиентКонтактнаяИнформация.Ссылка КАК Контакт
		|ПОМЕСТИТЬ ВсеКонтакты
		|ИЗ " + ?(НЕ ИскатьТелефон И НЕ ИскатьПочту И НЕ ИскатьПрочее,"
		|	Справочник.CRM_ПотенциальныеКлиенты КАК СправочникКлиентКонтактнаяИнформация", "
		|	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК СправочникКлиентКонтактнаяИнформация") + ?(ИскатьНаименование ИЛИ ИскатьТелефон ИЛИ ИскатьПочту ИЛИ ИскатьПрочее, "
		|ГДЕ
		|	ИСТИНА И (" + ?(ИскатьНаименование, "
		|	СправочникКлиентКонтактнаяИнформация.Ссылка.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""", "") + ?(ИскатьНаименование И ИскатьТелефон, "
		|	И", "") + ?(ИскатьТелефон, "
		|	(СправочникКлиентКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И (СправочникКлиентКонтактнаяИнформация.НомерТелефона ПОДОБНО ""%" + ТелефонДляПоиска + "%"")
		|	ИЛИ (СправочникКлиентКонтактнаяИнформация.НомерТелефонаБезКодов ПОДОБНО ""%" + ТелефонДляПоиска + "%"")
		|	ИЛИ СправочникКлиентКонтактнаяИнформация.Представление ПОДОБНО ""%" + ТелефонДляПоиска + "%"")", "") + ?((ИскатьНаименование ИЛИ ИскатьТелефон) И ИскатьПочту, "
		|	И", "") + ?(ИскатьПочту, "
		|	(СправочникКлиентКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И СправочникКлиентКонтактнаяИнформация.Представление ПОДОБНО ""%" + ПоискКлиентEmail + "%"")","") + ?((ИскатьНаименование ИЛИ ИскатьТелефон ИЛИ ИскатьПочту) И ИскатьПрочее, "
		|	И", "") +?(ИскатьПрочее, "
		|	СправочникКлиентКонтактнаяИнформация.Представление ПОДОБНО ""%" + ПоискКлиентПрочее + "%""
		|	И СправочникКлиентКонтактнаяИнформация.Тип В (&ТипыКИ)", "")  + "
		|	) ", " ГДЕ ЛОЖЬ")+"
		|;
		|////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""Потенциальный"" КАК Клиент,
		|	ВсеКонтакты.Контакт,
		|	CRM_Интерес.Ссылка КАК Интерес
		|ИЗ
		|	ВсеКонтакты КАК ВсеКонтакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
		|		ПО ВсеКонтакты.Контакт = CRM_Интерес.ПотенциальныйКлиент
		|		И НЕ CRM_Интерес.Завершен
		|		И НЕ CRM_Интерес.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	Клиент, Интерес УБЫВ, Контакт
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерес)
		|ПО
		|	Клиент,
		|	Контакт");
		
		Запрос.УстановитьПараметр("ТипыКИ", СписокТипыКИ);
		РезультатЗапроса = Запрос.Выполнить();
		
		ПроверитьНаАвтопереход(РезультатЗапроса);
		
		ВыборкаКлиентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбработатьВыборкуЗапроса(ВыборкаКлиентов, Неопределено, Неопределено, Неопределено, Истина);
		
	КонецЕсли;
	
	НоваяСтрока = ДеревоПоиска.ПолучитьЭлементы().Вставить(0);
	НоваяСтрока.Объект = НСтр("ru='Создать: Клиент / Контактное лицо / Потенциальный клиент / Интерес';en='Create: Customer / Contact person / Potential customer / Lead'");
	НоваяСтрока.Ссылка = "НовыйКлиент";
	
КонецПроцедуры

#КонецОбласти

#Область ПоляОтображенияСодержания

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДанным(Ссылка)
	
	// Поле отображения содержания.
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры")  
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
			ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес")
			ИЛИ ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(Ссылка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		Если Содержание <> ПолеОтображениеСодержания Тогда
			ПолеОтображениеСодержания = Содержание;
		КонецЕсли;
	Иначе
		Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
		Если Содержание <> ПолеОтображениеСодержания Тогда
			ПолеОтображениеСодержания = Содержание;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Элементы.ОткрытьИнтерес.Доступность = Истина;
		//Элементы.ОткрытьИнтерес.Заголовок = "Интерес " + Ссылка.Номер + " от " + Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy");
		Элементы.ОткрытьИнтерес.Заголовок = "Открыть интерес";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Элементы.ОткрытьИнтерес.Доступность = Истина;
		//Элементы.ОткрытьИнтерес.Заголовок = "Задача " + Ссылка.Номер + " от " + Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy");
		Элементы.ОткрытьИнтерес.Заголовок = "Открыть " + Ссылка.БизнесПроцесс.КартаМаршрута;
	Иначе
		Элементы.ОткрытьИнтерес.Доступность = Ложь;
		Элементы.ОткрытьИнтерес.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
	МассивТипов.Добавить(Тип("ЗадачаСсылка.ЗадачаИсполнителя"));
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Процедура ПолеОтображениеСодержанияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	// Поле отображения содержания.
	Если Элемент.Имя = "ПолеОтображениеСодержания" Тогда
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ОбработкаВыбораПринятияОбращения(Результат, Дополнительно) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
		ВыбранныйСценарийИнтереса = Результат;
	Иначе
		СтартуемБизнесПроцесс	= Истина;
		Процесс					= Результат;
	КонецЕсли;
	
	Если (ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента ИЛИ ИнформацияПоИнтересуСоздаватьКонтакт) Тогда 
		Если НЕ ЗначениеЗаполнено(ПоискКлиентНаименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='The name of the contact is not filled.';ru='Не заполнено наименование контакта.'"));
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПоискКлиентEmail) И НЕ ЗначениеЗаполнено(ПоискКлиентТелефон) И НЕ ЗначениеЗаполнено(ИдентификаторМессенджера) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='The contact information is not filled.';ru='Не заполнена контактная информация.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Fill in all the necessary details for acceptance of the appeal.';ru='Заполните все необходимые реквизиты для принятия обращения.'"));
		Возврат;
	КонецЕсли;
	
	//ОбработатьКонтактыНаСервере();
	//
	//Если ИнформацияПоИнтересуСоздаватьИнтерес Тогда
	//	Если СтартуемБизнесПроцесс Тогда
	//		ЗапуститьПроцессНаКлиенте();
	//		Возврат;
	//	Иначе
	//		ОбработатьОбращениеНаСервере();
	//		Если ЗначениеЗаполнено(ИнформацияПоИнтересуСсылка) И ОткрытиеИзТелемаркетинга Тогда
	//			СтруктураОповещения = Новый Структура;
	//			СтруктураОповещения.Вставить("Партнер",			ИнформацияПоИнтересуКлиент);
	//			СтруктураОповещения.Вставить("КонтактноеЛицо",	ИнформацияПоИнтересуКонтактноеЛицо);
	//			СтруктураОповещения.Вставить("Интерес",			ИнформацияПоИнтересуСсылка);
	//			СтруктураОповещения.Вставить("ПартнерСтрокой",	ИнформацияПоИнтересуОписание);
	//			Оповестить("ОбновитьСтрокуВТелемаркетинге", СтруктураОповещения);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ВзаимодействиеСсылка = СоздатьВзаимодействиеНаСервере();
	
	Если ИнформацияПоИнтересуСоздаватьИнтерес И СтартуемБизнесПроцесс Тогда
		ОбработатьКонтактыНаСервере();
		ЗапуститьПроцессНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если ИнформацияПоИнтересуСоздаватьИнтерес Тогда
		ВзаимодействиеСсылка = ОбработкаВыбораПринятияОбращенияНаСервере();
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуСсылка) И ОткрытиеИзТелемаркетинга Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Партнер",			ИнформацияПоИнтересуКлиент);
			СтруктураОповещения.Вставить("КонтактноеЛицо",	ИнформацияПоИнтересуКонтактноеЛицо);
			СтруктураОповещения.Вставить("Интерес",			ИнформацияПоИнтересуСсылка);
			СтруктураОповещения.Вставить("ПартнерСтрокой",	ИнформацияПоИнтересуОписание);
			Оповестить("ОбновитьСтрокуВТелемаркетинге", СтруктураОповещения);
		КонецЕсли;
	Иначе
		ВзаимодействиеСсылка = СоздатьВзаимодействиеНаСервере();
	КонецЕсли;
	
	ПослеСозданияВзаимодействия(ВзаимодействиеСсылка)
	
КонецПроцедуры

&НаСервере
Функция ОбработкаВыбораПринятияОбращенияНаСервере()
	
	ОбработатьКонтактыНаСервере();
	ОбработатьОбращениеНаСервере();
	ВзаимодействиеСсылка = СоздатьВзаимодействиеНаСервере();
	
	Возврат ВзаимодействиеСсылка;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПроцессНаКлиенте()
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьПроцессНаКлиентеЗавершение", ЭтотОбъект);
	//ПараметрыФормы = Новый Структура("Основание", Процесс);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Партнер, Контакт, КартаМаршрута, Тема, Описание",
		ИнформацияПоИнтересуКлиент, ИнформацияПоИнтересуКонтактноеЛицо, Процесс, ИнформацияПоИнтересуТема, ИнформацияПоИнтересуОписание));
	Если CRM_БизнесПроцессыИЗадачиСервер.ЭтоПоручение(Процесс) Тогда
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы,,,,, ОписаниеОповещения);
	Иначе
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСтартаНезависимого", ПараметрыФормы,,,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессНаКлиентеЗавершение(БизнесПроцесс, ДопПараметры) Экспорт
	Если БизнесПроцесс <> Неопределено Тогда
		ПолучитьЗадачуПроцессаНаСервере(БизнесПроцесс);
		ВзаимодействиеСсылка = СоздатьВзаимодействиеНаСервере();
		
		Если ВзаимодействиеСсылка <> Неопределено Тогда
			ПослеСозданияВзаимодействия(ВзаимодействиеСсылка)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияВзаимодействия(ВзаимодействиеСсылка) 
	Если ВзаимодействиеСсылка <> Неопределено Тогда
		// Обрабатываем данные из Comagic
		//Если ЗначениеЗаполнено(ИнформацияПоИнтересуСсылка) и ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		//	Если НЕ (сфпСтруктураВнешнихДанных = Неопределено) И ТипЗнч(сфпСтруктураВнешнихДанных) = Тип("Структура") Тогда
		//		ФормаИнтереса = ПолучитьФорму("Документ.CRM_Интерес.ФормаОбъекта", Новый Структура("Ключ", ИнформацияПоИнтересуСсылка));
		//		ФиксироватьПервичныйИнтерес = сфпСофтФонПроСервер.сфпПолучитьЗначениеКонстантыФиксироватьПервичныйИнтерес();			
		//		//ФормаИнтереса.Объект["сфпCoMagicID"]	= сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
		//		ФормаИнтереса.Объект["Описание"]		= ФормаИнтереса.Объект["Описание"] + ?(ЗначениеЗаполнено(ФормаИнтереса.Объект["Описание"]),Символы.ПС,"") 
		//		+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
		//		+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
		//		+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
		//		Если ФиксироватьПервичныйИнтерес Тогда
		//			ИмяПредопределенногоЗначения		 		= Нстр("ru='ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic';en='Plan of Types of Characteristics. Channels of Advertising Impacts. CRM_CoMagic'");
		//			ФормаИнтереса.КаналПервичногоИнтереса 		= ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
		//			ФормаИнтереса.ИсточникПервичногоИнтереса 	= сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(сфпСтруктураВнешнихДанных.comagic_context.campaign);
		//		КонецЕсли;
		//		ФормаИнтереса.Записать();
		//	КонецЕсли;
		//КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru='Обращение принято';en='Appeal accepted'"), 
				ПолучитьНавигационнуюСсылку(ИнформацияПоИнтересуСсылка), 
				НСтр("ru='Интерес: ';en='Lead:'") + ИнформацияПоИнтересуТема + " (" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") + ")");
		
		Оповестить("ОбновитьАРМ");
		Оповестить("ПринатиеОбращения", ИнформацияПоИнтересуСсылка, ВладелецФормы);
		
		Если ТипЗнч(ОснованиеОбращения) =  Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			// Если письмо открыто, то Интерес привяжется на форме письма.
			ПараметрыФормыПисьма = Новый Структура;
			ПараметрыФормыПисьма.Вставить("Ключ", ОснованиеОбращения);
			
			CRM_ДобавитьИнтересНаСервере(ОснованиеОбращения, ИнформацияПоИнтересуСсылка);
			Если ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.ФормаОбъекта", ПараметрыФормыПисьма).Открыта() Тогда
				Оповестить("ОбработаноОбращениеПоПисьму", ОснованиеОбращения);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ОснованиеОбращения) =  Тип("ДокументСсылка.CRM_СообщениеМессенджера") ИЛИ ТипЗнч(ОснованиеОбращения) =  Тип("ДокументСсылка.CRM_Заявка") Тогда
		    CRM_ДобавитьИнтересНаСервере(ОснованиеОбращения, ИнформацияПоИнтересуСсылка);
		КонецЕсли; 
		
		//ОбновитьИнтерфейс();
		// +СофтФон
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			сфпОбновитьТелефонныйЗвонок(ОснованиеОбращения);
		    CRM_ДобавитьИнтересНаСервере(ОснованиеОбращения, ИнформацияПоИнтересуСсылка);
		КонецЕсли;
		// -СофтФон
		Если (ИнформацияПоИнтересуОтветственный = ТекущийПользователь) ИЛИ ОткрыватьИнтересПриПринятииОбращения Тогда
			Если ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", ИнформацияПоИнтересуСсылка);
				ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы);
			Иначе
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", ИнформацияПоИнтересуСсылка);
				Если ИнформацияПоИнтересуОтветственный = ТекущийПользователь Тогда
					ПараметрыФормы.Вставить("Модифицированность", Истина);
				КонецЕсли;
				ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
		КонецЕсли;
		CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ОткрыватьИнтересПриПринятииОбращения", ОткрыватьИнтересПриПринятииОбращения);
		
		Закрыть(Новый Структура("Успех, Взаимодействие", Истина, ВзаимодействиеСсылка));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиК(Команда, Автопереход = Ложь, ТекущаяСсылка = Неопределено)
	
	Если Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		
		Если НЕ Автопереход Тогда
			ИнформацияПоИнтересуПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
			ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
			ИнформацияПоИнтересуКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			Если ТекущаяСсылка = Неопределено Тогда
				ТекущаяСсылка = Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка;
			КонецЕсли;
		Иначе
			ТекущаяСсылка = ИнформацияПоИнтересуСсылка;
		КонецЕсли;
		
		ВыбранПотенциальныйКлиент = Ложь;
		Если ТипЗнч(ТекущаяСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			РежимВводаОбращения = "ТекущийИнтерес_1";
			ИнформацияПоИнтересуСсылка = ТекущаяСсылка;
			
			ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новое взаимодействие по интересу (';en='New Appeal: A new interaction of lead ('");
			
			Если НЕ Автопереход Тогда
				тДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
				Родитель = тДанные.ПолучитьРодителя();
				Если ТипЗнч(Родитель) = Тип("Строка") Тогда
					// Потенциальный
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент: '") + Строка(тДанные.Ссылка) + ")";
				Иначе
					// Клиент-Контакт
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(тДанные.ПолучитьРодителя().ПолучитьРодителя().Ссылка)
						+ " | " + НСтр("ru = 'Контакт: '") + Строка(тДанные.ПолучитьРодителя().Ссылка) + ")";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
					// Потенциальный
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент: '") + Строка(ИнформацияПоИнтересуПотенциальныйКлиент) + ")";
				Иначе
					// Клиент-Контакт
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(ИнформацияПоИнтересуКлиент) + " | " 
					+ НСтр("ru = 'Контакт: '") + Строка(ИнформацияПоИнтересуКонтактноеЛицо) + ")";
				КонецЕсли;
				ЗаполнитьПанельИнформацииПоДанным(ТекущаяСсылка);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущаяСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			//РежимВводаОбращения = "ТекущаяЗадача_1";
			РежимВводаОбращения = "ТекущийИнтерес_1";
			ИнформацияПоИнтересуСсылка = ТекущаяСсылка;
			
			ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новое взаимодействие по процессу (';en='New Appeal: New interaction on the process ('");
			
			Если НЕ Автопереход Тогда
				тДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
				Родитель = тДанные.ПолучитьРодителя();
				Если ТипЗнч(Родитель) = Тип("Строка") Тогда
					// Потенциальный
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент: '") + Строка(тДанные.Ссылка) + ")";
				Иначе
					// Клиент-Контакт
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(тДанные.ПолучитьРодителя().ПолучитьРодителя().Ссылка)
						+ " | " + НСтр("ru = 'Контакт: '") + Строка(тДанные.ПолучитьРодителя().Ссылка) + ")";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
					// Потенциальный
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент: '") + Строка(ИнформацияПоИнтересуПотенциальныйКлиент) + ")";
				Иначе
					// Клиент-Контакт
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(ИнформацияПоИнтересуКлиент) + " | " 
					+ НСтр("ru = 'Контакт: '") + Строка(ИнформацияПоИнтересуКонтактноеЛицо) + ")";
				КонецЕсли;
				ЗаполнитьПанельИнформацииПоДанным(ТекущаяСсылка);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") 
			ИЛИ ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			РежимВводаОбращения = "НовыйИнтерес_2";
			
			ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новый интерес (';en='New Appeal: New lead ('");
			
			Родитель = Элементы.ДеревоПоиска.ТекущиеДанные.ПолучитьРодителя();
			Если Родитель.Ссылка = "ПрочиеКонтакты" Тогда
				Родитель = Родитель.ПолучитьРодителя();
			КонецЕсли;
			
			Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")Тогда
				// Потенциальный
				ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент '") + Строка(ТекущаяСсылка) + ")";
			Иначе
				// Контакт
				ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(Родитель.Ссылка)
					+ " | " + НСтр("ru = 'Контакт: '") + Строка(ТекущаяСсылка) + ")";
			КонецЕсли;
				
			Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ИнформацияПоИнтересуКонтактноеЛицо = ТекущаяСсылка;
				ИнформацияПоИнтересуКлиент = Родитель.Ссылка;
			ИначеЕсли ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				ИнформацияПоИнтересуПотенциальныйКлиент = ТекущаяСсылка;
				ВыбранПотенциальныйКлиент = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущаяСсылка, "ЮрФизЛицо")  = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				РежимВводаОбращения = "НовыйИнтерес_2";
				ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новый интерес (';en='New Appeal: New lead ('");
			Иначе
				РежимВводаОбращения = "НовыйКонтакт_3";
				ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новый контакт и интерес (';en='New Appeal: New contact and lead ('");
			КонецЕсли;
			
			ИнформацияПоИнтересуКлиент = ТекущаяСсылка;
			тДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
			Родитель = тДанные.ПолучитьРодителя();
			
			ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(тДанные.Ссылка) + ")";
			
		ИначеЕсли ТекущаяСсылка = "НовыйКлиент" ИЛИ ТекущаяСсылка = "Потенциальный" Тогда
			РежимВводаОбращения = "НовыйКонтакт_3";
			ВыбранПотенциальныйКлиент = Истина;
			
			Если ТекущаяСсылка = "Потенциальный" Тогда
				ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новый потенциальный клиент и интерес';en='New Appeal: New potential customer and lead'");
			Иначе
				ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения: Новый клиент, контакт и интерес';en='New Appeal: New customer, contact and lead'");
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.СтраницаПринятьОбращение.Видимость = Истина;
		Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение;
		Элементы.ПерейтиК.Заголовок = НСтр("ru='Принять обращение';en='New Appeal '") + " (Ctrl+Enter)";
		СтраницыМастераПриСменеСтраницы(Неопределено, Элементы.СтраницыМастера.ТекущаяСтраница);
		
		УстановитьПараметрыЭлементовФормы();
		// +Софтфон
		сфпВидимостьИДоступностьГруппыСофтфон();
		// +Софтфон
		
	ИначеЕсли Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение
	И ИнформацияПоИнтересуСоздаватьИнтерес И НЕ ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента Тогда
		
		ОП = Новый ОписаниеОповещения("ОбработкаВыбораПринятияОбращения", ЭтотОбъект);
		ПараметрыВыбораСценария = Новый Структура("Ответственный, ТипУслуги", ИнформацияПоИнтересуОтветственный, ИнформацияПоИнтересуТипУслуги);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаВыбораПроцесса", ПараметрыВыбораСценария, ЭтотОбъект, , , ,ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение Тогда
		
		Если (ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента ИЛИ ИнформацияПоИнтересуСоздаватьКонтакт) Тогда 
			Если НЕ ЗначениеЗаполнено(ПоискКлиентНаименование) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено наименование контакта.';en='The name of the contact is not filled.'"));
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПоискКлиентEmail) И НЕ ЗначениеЗаполнено(ПоискКлиентТелефон) И НЕ ЗначениеЗаполнено(ИдентификаторМессенджера) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена контактная информация.';en='The contact information is not filled.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПроверитьЗаполнение() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Заполните все необходимые реквизиты для принятия обращения.';en='Fill in all the necessary details for acceptance of the appeal.'"));
			Возврат;
		КонецЕсли;
		
		Если РежимВводаОбращения <> "ТекущийИнтерес_1" Тогда
			ОП = Новый ОписаниеОповещения("ОбработкаВыбораПринятияОбращения", ЭтотОбъект);
			ПараметрыВыбораСценария = Новый Структура("Ответственный, ТипУслуги", ИнформацияПоИнтересуОтветственный, ИнформацияПоИнтересуТипУслуги);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаВыбораПроцесса", ПараметрыВыбораСценария, ЭтотОбъект, , , ,ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ВзаимодействиеСсылка = СоздатьВзаимодействиеНаСервере();
			ПослеСозданияВзаимодействия(ВзаимодействиеСсылка)
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает строку с контактной информацией объекта.
//
// Параметры:
//	ОбъектКИ	- СправочникСсылка	- Объект, для которого получается контактная информация.
//
// Возвращаемое значение:
//	Строка	- Строка с контактной информацией объекта.
//
Функция СформироватьНадписьКонтактнойИнформации(ОбъектКИ)
	ТекстНадписи = "";
	Если ЗначениеЗаполнено(ОбъектКИ) Тогда
		Если ТипЗнч(ОбъектКИ) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						СтрПредставление = НСтр("ru='Тел.: '") + СтрокаКИ.Представление;
					ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						СтрПредставление = НСтр("ru='e-mail: '") + СтрокаКИ.Представление;
					КонецЕсли;
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + СтрПредставление;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ОбъектКИ) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + ?(СтрокаКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон,НСтр("ru='Тел.: '"),НСтр("ru='e-mail: '")) + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = НСтр("ru='Нет избранной контактной информации';en='No favorite contact information'");
	КонецЕсли;
	Возврат ТекстНадписи;
КонецФункции // СформироватьНадписьКонтактнойИнформации()

&НаСервере
Функция ДобавитьНовуюКИКонтакта(ТипКИ, ЗначениеКИ)
	
	Если Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость Тогда
		// Контакт клиента
		КонтактСсылка = ИнформацияПоИнтересуКонтактноеЛицо;
	Иначе
		// Потенциальный клиент
		КонтактСсылка = ИнформацияПоИнтересуПотенциальныйКлиент;
	КонецЕсли;
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		КонстантаЗначение = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
		ВидЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	Иначе
		КонстантаЗначение = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		ВидЗначение = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	КонецЕсли;
	
	КонтактОбъект = КонтактСсылка.ПолучитьОбъект();
	НоваяСтрокаКИ = КонтактОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрокаКИ.Тип = ТипКИ;
	НоваяСтрокаКИ.Представление = ЗначениеКИ;
	НоваяСтрокаКИ.Вид = ?(ЗначениеЗаполнено(КонстантаЗначение), КонстантаЗначение, ВидЗначение);
	Попытка
		КонтактОбъект.Записать();
		Элементы.ДекорацияТелефонEmail.Заголовок = СформироватьНадписьКонтактнойИнформации(КонтактСсылка);
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось добавить контактную информацию Контакта. Подробности см. в журнале регистрации.';en='Failed to add contact contact information. For details, see the log.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Контактная информация контакта не добавлена)';en='New Appeal (Contact contact information is not added)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКЛПоИзКлиента()
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент.CRM_ОсновноеКонтактноеЛицо) Тогда
		ИнформацияПоИнтересуКонтактноеЛицо = ИнформацияПоИнтересуКлиент.CRM_ОсновноеКонтактноеЛицо;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер", ИнформацияПоИнтересуКлиент);
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛицаПартнеров.Ссылка
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Владелец = &Партнер";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИнформацияПоИнтересуКонтактноеЛицо = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрыПоиска(ЭлементИмя, ЭлементЗначение, Использование, ПриОткрытии = Ложь)
	
	ЭтотОбъект.Заголовок = НСтр("ru='Принятие обращения';en='New Appeal'");
	
	Если НЕ ПриОткрытии Тогда
		ИнформацияПоИнтересуТема = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементИмя) Тогда
		ЭтотОбъект[ЭлементИмя] = СокрЛП(ЭлементЗначение);
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ПоискКлиентНаименование) И НЕ ЗначениеЗаполнено(ПоискКлиентТелефон) И НЕ ЗначениеЗаполнено(ПоискКлиентEmail) И НЕ ЗначениеЗаполнено(ПоискКлиентИНН) И НЕ ЗначениеЗаполнено(ПоискКлиентПрочее))  Тогда
		ДеревоПоиска.ПолучитьЭлементы().Очистить();
		Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
		Элементы.ПерейтиК.Доступность = Ложь;
		Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		Элементы.ПерейтиК.Заголовок = НСтр("ru='Принять обращение';en='New Appeal '") + " (Ctrl+Enter)";
		#Если ВебКлиент Тогда
			ПодключитьОбработчикОжидания("СкрытьСтраницаПринятьОбращение", 0.1, Истина);
		#Иначе
			Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
		#КонецЕсли
		Возврат;
	Иначе
		Элементы.ГруппаВыполняетсяПоиск.Видимость = Истина;
		ПодключитьОбработчикОжидания("ВыполнитьПоиск", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСтраницаПринятьОбращение()
	
	Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.ГруппаВыполняетсяПоиск.Видимость = Истина;
	
	ИнформацияПоИнтересуПотенциальныйКлиент		 = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	ИнформацияПоИнтересуКонтактноеЛицо			 = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	ИнформацияПоИнтересуКлиент					 = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	ИнформацияПоИнтересуВидВзаимодействия		 = ПредопределенноеЗначение("Справочник.CRM_ВидыВзаимодействий.ПустаяСсылка");
	ОписаниеВзаимодействия						 = "";	
	ДействиеПоИнтересу							 = "";
	ИнформацияПоИнтересуТипУслуги				 = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
	ИнформацияПоИнтересуОтветственный			 = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИнформацияПоИнтересуСостояниеИнтереса		 = ?(НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуСостояниеИнтереса), ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"), ИнформацияПоИнтересуСостояниеИнтереса);
	
	Элементы.ДекорацияДобавитьТелефонККонтакту.Заголовок = "";
	Элементы.ДекорацияДобавитьТелефонККонтакту.Видимость = Ложь;
	Элементы.ДекорацияДобавитьПочтуККонтакту.Заголовок = "";
	Элементы.ДекорацияДобавитьПочтуККонтакту.Видимость = Ложь;
	
	ИнформацияПоИнтересуНайденоИнтересов = -1;
	
	СформироватьДанныеПоПоиску();
	РазвернутьВсе(Неопределено);
	
	Если ИнформацияПоИнтересуНайденоИнтересов = 0 ИЛИ ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
		УстановитьПараметрыЭлементовФормы();
		Элементы.ПерейтиК.Доступность = Истина;
		Элементы.ФормаОбращениеПотеряно.Доступность = Истина;
		Элементы.ПерейтиК.Заголовок = НСтр("ru='Принять обращение';en='New Appeal '") + " (Ctrl+Enter)";
		// +Софтфон
		сфпВидимостьИДоступностьГруппыСофтфон();
		// +Софтфон		
	Иначе
		Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
		Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
		Элементы.ПерейтиК.Доступность = Ложь;
		Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		Элементы.ПерейтиК.Заголовок = НСтр("ru='Перейти';en='Pass'") + " (Ctrl+Enter)";
	КонецЕсли;
	
	Элементы.ГруппаВыполняетсяПоиск.Видимость = Ложь;
	
	Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
		ПерейтиК(Неопределено, Истина);
	Иначе
	КонецЕсли;
	
	
КонецПроцедуры


#Область ОбщиеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПараметрыЭлементовФормы()
	
	Если ЗначениеЗаполнено(ТекущийРежим) Тогда
		Элементы["Группа" + ТекущийРежим].Видимость = Ложь;
	КонецЕсли;
	СменаРежимаНаНовый = ТекущийРежим = "ТекущийИнтерес_1" И (ТекущийРежим <> РежимВводаОбращения);
	ТекущийРежим = РежимВводаОбращения;
	Элементы["Группа" + ТекущийРежим].Видимость = Истина;
	
	ИнформацияПоИнтересуСоздаватьИнтерес = Ложь;
	ИнформацияПоИнтересуСоздаватьКонтакт = Ложь;
	ИнформацияПоИнтересуСоздаватьКлиента = Ложь;
	ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента = Ложь;
	Элементы.ДекорацияТелефонEmail.Заголовок = "";
	Элементы.Ответственный.ТолькоПросмотр = (ТекущийРежим = "ТекущийИнтерес_1");
	Элементы.ТипУслуги.ТолькоПросмотр = (ТекущийРежим = "ТекущийИнтерес_1");
	Элементы.ОжидаемаяВыручка.Видимость = (ТекущийРежим <> "ТекущийИнтерес_1");
	Элементы.Тема.ТолькоПросмотр = (ТекущийРежим = "ТекущийИнтерес_1");
	Элементы.Описание.ТолькоПросмотр = (ТекущийРежим = "ТекущийИнтерес_1");
	
	Элементы.СостояниеИнтереса.Видимость = (СтрНайти(РежимВводаОбращения, "Новый") = 0);
	Элементы.ИнформацияПоИнтересуВидВзаимодействия.Видимость = НЕ ЗначениеЗаполнено(ОснованиеОбращения);
	Элементы.ОписаниеВзаимодействия.Видимость = Элементы.ИнформацияПоИнтересуВидВзаимодействия.Видимость и (ТекущийРежим = "ТекущийИнтерес_1");
	
	Если ТекущийРежим = "ТекущийИнтерес_1" Тогда
		ЗаполнитьИнформациюВыбранногоИнтереса(ИнформацияПоИнтересуСсылка, Ложь);
	Иначе
		ЗаполнитьИнформациюВыбранногоИнтереса(Неопределено, Истина, СменаРежимаНаНовый);
		ИнформацияПоИнтересуСоздаватьИнтерес = Истина;
		ИнформацияПоИнтересуСостояниеИнтереса		 = ?(НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуСостояниеИнтереса), ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"), ИнформацияПоИнтересуСостояниеИнтереса);
		Если ТекущийРежим = "НовыйКонтакт_3" Тогда
			ИнформацияПоИнтересуСоздаватьКонтакт = ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент);
			ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента = ВыбранПотенциальныйКлиент ИЛИ НЕ ИнформацияПоИнтересуСоздаватьКонтакт;
		КонецЕсли;
	КонецЕсли;
	Если ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента Тогда
		ИнформацияПоИнтересуПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	КонецЕсли;
	Если ИнформацияПоИнтересуСоздаватьКонтакт Тогда
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
			Заголовок = СтрЗаменить(Заголовок, " | " + НСтр("ru = 'Контакт: '") + Строка(ИнформацияПоИнтересуКонтактноеЛицо), "");
		КонецЕсли;
		ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	Если ИнформацияПоИнтересуСоздаватьКлиента Тогда
		ИнформацияПоИнтересуКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	КонецЕсли;
	
	Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость = (ТекущийРежим = "НовыйКонтакт_3" И ИнформацияПоИнтересуСоздаватьКонтакт)
																ИЛИ (ТекущийРежим <> "НовыйКонтакт_3" И (ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент)));
	Элементы["Группа" + ТекущийРежим + "ПотенциальныйКлиент"].Видимость = НЕ Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость;
	Элементы.ДекорацияОтступКлиент.Видимость = Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость;
	
	Если Элементы["Группа" + ТекущийРежим + "ПотенциальныйКлиент"].Видимость Тогда
		Элементы.РежимВводаОбращения.СписокВыбора.НайтиПоЗначению("НовыйКонтакт_3").Представление = НСтр("ru='Новый Потенциальный клиент+Интерес';en='New Potential Customer + Lead'");
	Иначе
		Элементы.РежимВводаОбращения.СписокВыбора.НайтиПоЗначению("НовыйКонтакт_3").Представление = НСтр("ru='Новый Контакт+Интерес';en='New Contact + Lead'");
	КонецЕсли;
	ПоискКлиентКонтактнаяИнформацияПриИзменении(Неопределено);
	
	ОбъектКИ = ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо), ИнформацияПоИнтересуКонтактноеЛицо, ИнформацияПоИнтересуПотенциальныйКлиент);
	Элементы.ДекорацияТелефонEmail.Заголовок = СформироватьНадписьКонтактнойИнформации(ОбъектКИ);
	
	Если ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
			Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
				ВидимостьКнопки = сфпВидимостьКнопкиДобавитьТелефонУКонтакта(ИнформацияПоИнтересуКонтактноеЛицо);
			ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
				ВидимостьКнопки = сфпВидимостьКнопкиДобавитьТелефонУКонтакта(ИнформацияПоИнтересуПотенциальныйКлиент);
			Иначе
				ВидимостьКнопки = Ложь;
			КонецЕсли;
			Элементы.ДекорацияДобавитьТелефонККонтакту.Видимость = ВидимостьКнопки;
		Иначе
			Элементы.ДекорацияДобавитьТелефонККонтакту.Видимость = (Найти(SMS4B_ОтправкаSMS.ФорматироватьНомер(Элементы.ДекорацияТелефонEmail.Заголовок), SMS4B_ОтправкаSMS.ФорматироватьНомер(ПоискКлиентТелефон)) = 0)
				И (ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) ИЛИ ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент));
		КонецЕсли;
		Если Элементы.ДекорацияДобавитьТелефонККонтакту.Видимость Тогда
			Элементы.ДекорацияДобавитьТелефонККонтакту.Заголовок = НСтр("ru = 'Добавить '") + ПоискКлиентТелефон;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		Элементы.ДекорацияДобавитьПочтуККонтакту.Видимость = (Найти(Элементы.ДекорацияТелефонEmail.Заголовок, ПоискКлиентEmail) = 0)
																И (ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) ИЛИ ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент));
		Если Элементы.ДекорацияДобавитьПочтуККонтакту.Видимость Тогда
			Элементы.ДекорацияДобавитьПочтуККонтакту.Заголовок = НСтр("ru = 'Добавить '") + ПоискКлиентEmail;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Тема.ТолькоПросмотр = НЕ ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера;
	
	Элементы.ГруппаИсточникОбращения.Видимость = ФиксироватьПервичныйИнтерес И (ТекущийРежим <> "ТекущийИнтерес_1");
	
	Элементы.ДействиеПоИнтересу.Видимость = (ТекущийПользователь<>ИнформацияПоИнтересуОтветственный);		
	ДействиеПоИнтересу = ?(ТекущийРежим = "ТекущийИнтерес_1", НСтр("ru='Обработать обращение клиента';en='Process customer request'"), НСтр("ru='Обработать новый интерес клиента';en='Process new lead'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьЗаголовокОфисПодразделение(Ответственный)
	ПодразделениеОтветственного 	= Ответственный.Подразделение;
	ОфисОтветственного 				= ПодразделениеОтветственного.CRM_Офис;
	ТекстЗаголовка 					= ?(ЗначениеЗаполнено(ОфисОтветственного), ОфисОтветственного.Наименование, НСтр("ru='не указан';en='it is not specif'")) 
		+ " | " + ?(ЗначениеЗаполнено(ПодразделениеОтветственного), ПодразделениеОтветственного.Наименование, НСтр("ru='не указано';en='it is not specif'")); 
	Возврат ТекстЗаголовка;
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформациюВыбранногоИнтереса(Ссылка, ЭтоНовый, СменаРежимаНаНовый = Ложь)
	
	Если Ссылка = Неопределено Тогда
		Элементы.ОткрытьИнтерес.Доступность = Ложь;
		Элементы.ОткрытьИнтерес.Заголовок = "";
		Если НЕ ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ИнформацияПоИнтересуОписание = "";
	ИнформацияПоИнтересуСсылка = Ссылка;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ВидыВзаимодействий.Ссылка КАК Ссылка,
		|	CRM_ВидыВзаимодействий.ВидСобытия КАК ВидСобытия,
		|	CRM_ВидыВзаимодействий.СостояниеИнтереса КАК СостояниеИнтереса
		|ИЗ
		|	Справочник.CRM_ВидыВзаимодействий КАК CRM_ВидыВзаимодействий
		|ГДЕ
		|	CRM_ВидыВзаимодействий.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
		|	И CRM_ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
		|	И CRM_ВидыВзаимодействий.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		|	И НЕ CRM_ВидыВзаимодействий.Предопределенный
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ВидыВзаимодействий.СостояниеИнтереса УБЫВ"; 
	
	СтруктураПоиска = Новый Структура;
	Если ЗначениеЗаполнено(ОснованиеОбращения) Тогда
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			ВидСобытияПоиск = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок;
		ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ВидСобытияПоиск = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо;
		ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			ВидСобытияПоиск = Перечисления.CRM_ВидыСобытий.Прочее;
		Иначе	
			ВидСобытияПоиск = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок;
		КонецЕсли;
	Иначе	
		ВидСобытияПоиск = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок;
	КонецЕсли;
	СтруктураПоиска.Вставить("ВидСобытия", ВидСобытияПоиск);
	Если ЗначениеЗаполнено(Ссылка) И ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_ВидыВзаимодействий.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)",
			"(CRM_ВидыВзаимодействий.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
				|	ИЛИ CRM_ВидыВзаимодействий.СостояниеИнтереса = &СостояниеИнтереса)");
		Запрос.УстановитьПараметр("СостояниеИнтереса", Ссылка.СостояниеИнтереса);
		СтруктураПоиска.Вставить("СостояниеИнтереса", Ссылка.СостояниеИнтереса);
	Иначе
		СтруктураПоиска.Вставить("СостояниеИнтереса", Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.НайтиСледующий(СтруктураПоиска) Тогда
		ИнформацияПоИнтересуВидВзаимодействия	= РезультатЗапроса.Ссылка;
	Иначе
		СтруктураПоиска.Удалить("ВидСобытия");
		Если РезультатЗапроса.НайтиСледующий(СтруктураПоиска) Тогда
			ИнформацияПоИнтересуВидВзаимодействия	= РезультатЗапроса.Ссылка;
		Иначе
			СтруктураПоиска = Новый Структура("ВидСобытия", ВидСобытияПоиск);
			Если РезультатЗапроса.НайтиСледующий(СтруктураПоиска) Тогда
				ИнформацияПоИнтересуВидВзаимодействия	= РезультатЗапроса.Ссылка;
			ИначеЕсли РезультатЗапроса.Следующий() Тогда
				ИнформацияПоИнтересуВидВзаимодействия	= РезультатЗапроса.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуВидВзаимодействия) Тогда
		ОписаниеВзаимодействия = ИнформацияПоИнтересуВидВзаимодействия.Описание;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент.ОсновнойМенеджер) Тогда
			ИнформацияПоИнтересуОтветственный	= ИнформацияПоИнтересуКлиент.ОсновнойМенеджер;
		Иначе
			ИнформацияПоИнтересуОтветственный	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуОтветственный) Тогда
			ИнформацияПоИнтересуОтветственный	= ТекущийПользователь;
		КонецЕсли;
		Если СменаРежимаНаНовый Тогда
			ИнформацияПоИнтересуТема = "";
			ИнформацияПоИнтересуТипУслуги = Справочники.CRM_ТипУслуги.ПустаяСсылка();
		КонецЕсли;
		Элементы.ДекорацияОфисПодразделение.Заголовок	= ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);
		ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИнформацияПоИнтересуДатаСледующегоВзаимодействия = ДатаВходящегоОбращения;
		Элементы.ОткрыватьИнтересПриПринятииОбращения.Видимость = (ТекущийПользователь<>ИнформацияПоИнтересуОтветственный);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ИнформацияПоИнтересуДатаСледующегоВзаимодействия 	= Ссылка.СрокИсполнения;
		ИнформацияПоИнтересуОписание 						= Ссылка.Описание;
		ИнформацияПоИнтересуОтветственный 					= Ссылка.БизнесПроцесс.Ответственный;
		ИнформацияПоИнтересуСостояниеИнтереса 				= Ссылка.CRM_ТочкаМаршрута;
		ИнформацияПоИнтересуТема 							= ?(ЭтоНовый И ЗначениеЗаполнено(ИнформацияПоИнтересуТема), ИнформацияПоИнтересуТема, Ссылка.Наименование);
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
			ИнформацияПоИнтересуКлиент						= Ссылка.БизнесПроцесс.Партнер;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
			ИнформацияПоИнтересуКонтактноеЛицо				= Ссылка.БизнесПроцесс.КонтактноеЛицо;
		КонецЕсли;
		
		Элементы.ДекорацияОфисПодразделение.Заголовок 	= ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);
		
		Если Ссылка.Автор = ТекущийПользователь Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИначеЕсли ИнформацияПоИнтересуОтветственный = ТекущийПользователь Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= CRM_УправлениеДоступомВызовСервера.ЕстьДоступУровняАккаунтМенеджера(ИнформацияПоИнтересуКлиент);
		Иначе
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Ложь;
		КонецЕсли;
		
		Элементы.ТипУслуги.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		СтруктураСледующегоДействия			= РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Ссылка);
		Если СтруктураСледующегоДействия<>Неопределено Тогда
			ИнформацияПоИнтересуДатаСледующегоВзаимодействия 	= СтруктураСледующегоДействия.ПланируемаяДата;
		Иначе
			ИнформацияПоИнтересуДатаСледующегоВзаимодействия 	= ТекущаяДата();
		КонецЕсли;
		ИнформацияПоИнтересуОписание 						= Ссылка.Описание;
		ИнформацияПоИнтересуОтветственный 					= Ссылка.Ответственный;
		ИнформацияПоИнтересуПричинаОтказа 					= Ссылка.ПричинаОтказа;
		ИнформацияПоИнтересуТипУслуги 						= Ссылка.ТипУслуги;
		ИнформацияПоИнтересуСостояниеИнтереса 				= ?(УстановитьНовоеСостояниеИнтереса И ЗначениеЗаполнено(ИнформацияПоИнтересуСостояниеИнтереса), ИнформацияПоИнтересуСостояниеИнтереса, Ссылка.СостояниеИнтереса);
		ИнформацияПоИнтересуТема 							= ?(ЭтоНовый И ЗначениеЗаполнено(ИнформацияПоИнтересуТема), ИнформацияПоИнтересуТема, Ссылка.Тема);
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
			ИнформацияПоИнтересуКлиент						= Ссылка.Партнер;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
			ИнформацияПоИнтересуКонтактноеЛицо				= Ссылка.КонтактноеЛицо;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
			ИнформацияПоИнтересуПотенциальныйКлиент			= Ссылка.ПотенциальныйКлиент;
		КонецЕсли;
		
		Элементы.ДекорацияОфисПодразделение.Заголовок 	= ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);
		
		Если Ссылка.Автор = ТекущийПользователь Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИначеЕсли ИнформацияПоИнтересуОтветственный = ТекущийПользователь Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= CRM_УправлениеДоступомВызовСервера.ЕстьДоступУровняАккаунтМенеджера(ИнформацияПоИнтересуКлиент);
		Иначе
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Ложь;
		КонецЕсли;
	КонецЕсли;
	Элементы.ОткрыватьИнтересПриПринятииОбращения.Видимость = (ТекущийПользователь<>ИнформацияПоИнтересуОтветственный);

КонецПроцедуры

// Вызов закомментирован.

//&НаСервере
//Процедура ЗарегистрироватьПроцессНаСервере()
//	
//	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И ИнформацияПоИнтересуКлиент.ЭтоГруппа Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Стартовать процесс для группы клиентов нельзя!';en='You can not start a process for a group of customers!'"));
//		ИнформацияПоИнтересуЗаписан = Ложь;
//		Возврат;
//	КонецЕсли;
//	
//	ЭтоПроцесс = (ТипЗнч(Процесс) = Тип("СправочникСсылка.Проекты"));
//	
//	Попытка
//		НачатьТранзакцию();
//		
//		НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
//		НовыйБизнесПроцесс.Дата						= ТекущаяДатаСеанса();
//		НовыйБизнесПроцесс.ДатаСтарта				= ТекущаяДатаСеанса();
//		НовыйБизнесПроцесс.Организация				= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнаяОрганизация");;
//		НовыйБизнесПроцесс.Партнер					= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент), ИнформацияПоИнтересуКлиент, ИнформацияПоИнтересуКонтактноеЛицо.Владелец);
//		НовыйБизнесПроцесс.ПотенциальныйКлиент		= ИнформацияПоИнтересуПотенциальныйКлиент;
//		НовыйБизнесПроцесс.КонтактноеЛицо			= ИнформацияПоИнтересуКонтактноеЛицо;
//		НовыйБизнесПроцесс.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
//		НовыйБизнесПроцесс.Автор					= ТекущийПользователь;
//		НовыйБизнесПроцесс.Ответственный			= ИнформацияПоИнтересуОтветственный;
//		
//		НовыйБизнесПроцесс.Наименование				= ИнформацияПоИнтересуТема;
//		Если ЭтоПроцесс Тогда
//		НовыйБизнесПроцесс.Проект					= Процесс;
//		КонецЕсли;
//		НовыйБизнесПроцесс.Описание					= ИнформацияПоИнтересуОписание;
//		Если ЭтоПроцесс Тогда
//		НовыйБизнесПроцесс.КартаМаршрута			= Процесс.CRM_КартаМаршрута;
//		НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= Процесс.CRM_КартаМаршрута.НомерВерсии;
//		Иначе
//		НовыйБизнесПроцесс.КартаМаршрута			= Процесс;
//		НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= Процесс.НомерВерсии;
//		КонецЕсли;
//		СписокТочекСтарта							= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
//		НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
//		НовыйБизнесПроцесс.Записать();
//		НовыйБизнесПроцесс.Старт();
//		
//		Если НЕ НовыйБизнесПроцесс.Стартован Тогда
//			ВызватьИсключение НСтр("ru='Не удалось стартовать процесс. Подробности см. в журнале регистрации.';en='Could not start the process. For details, see the log.'");
//		КонецЕсли;
//		
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("БизнесПроцесс", НовыйБизнесПроцесс.Ссылка);
//		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//		|	ЗадачаИсполнителя.Ссылка
//		|ИЗ
//		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
//		|ГДЕ
//		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		Если Выборка.Следующий() Тогда
//			ИнформацияПоИнтересуСсылка = Выборка.Ссылка;
//			ИнформацияПоИнтересуЗадача = Выборка.Ссылка;
//		Иначе
//			ВызватьИсключение НСтр("ru='Не обнаружена задача стартованного процесса.';en='The task of the started process was not detected.'");
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ИнформацияПоИнтересуЗаписан = Ложь;
//		ОтменитьТранзакцию();
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось стартовать процесс. Подробности см. в журнале регистрации.';en='Could not start the process. For details, see the log.'"));
//		ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Процесс не стартован)';en='New Appeal  (The process is not started)'"), 
//					УровеньЖурналаРегистрации.Ошибка,,, 
//					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//	КонецПопытки;
//	
//КонецПроцедуры

&НаСервере
Процедура ПолучитьЗадачуПроцессаНаСервере(НовыйБизнесПроцесс)
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесПроцесс", НовыйБизнесПроцесс);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ИнформацияПоИнтересуСсылка = Выборка.Ссылка;
			ИнформацияПоИнтересуЗадача = Выборка.Ссылка;
		Иначе
			ВызватьИсключение НСтр("ru='Не обнаружена задача стартованного процесса.';en='The task of the started process was not detected.'");
		КонецЕсли;
	Исключение
		ИнформацияПоИнтересуЗаписан = Ложь;
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось стартовать процесс. Подробности см. в журнале регистрации.';en='Could not start the process. For details, see the log.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Процесс не стартован)';en='New Appeal  (The process is not started)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИнтересНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И ИнформацияПоИнтересуКлиент.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Создать интерес для группы клиентов нельзя!';en='You can not create lead for a group of customers!'"));
		ИнформацияПоИнтересуЗаписан = Ложь;
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		ОбъектИнтерес							 = Документы.CRM_Интерес.СоздатьДокумент();
		ОбъектИнтерес.Дата						 = ТекущаяДатаСеанса();
		ОбъектИнтерес.Автор						 = ТекущийПользователь;
		ОбъектИнтерес.СостояниеИнтереса			 = Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(ВыбранныйСценарийИнтереса);
		ОбъектИнтерес.Партнер					 = ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент), ИнформацияПоИнтересуКлиент, ИнформацияПоИнтересуКонтактноеЛицо.Владелец);
		ОбъектИнтерес.КонтактноеЛицо			 = ИнформацияПоИнтересуКонтактноеЛицо;
		ОбъектИнтерес.ДокументОснование			 = ИнформацияПоИнтересуДокументОснование;
		ОбъектИнтерес.Описание					 = ИнформацияПоИнтересуОписание;
		ОбъектИнтерес.ОжидаемаяВыручка			 = ОжидаемаяВыручка;
		
		ОбъектИнтерес.Ответственный				 = ИнформацияПоИнтересуОтветственный;
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) И ЗначениеЗаполнено(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"])
				 И ОбъектИнтерес.Партнер["CRM_УровниДоступа"].Найти(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"],"УровеньДоступа") = Неопределено И ОбъектИнтерес.Партнер["CRM_УровниДоступа"].Количество() > 0 Тогда
			
				ПартнерОбъект = ОбъектИнтерес.Партнер.ПолучитьОбъект();
				НоваяСтрокаУровня = ПартнерОбъект["CRM_УровниДоступа"].Добавить();
				НоваяСтрокаУровня["УровеньДоступа"]= ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"];
				ПартнерОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ОбъектИнтерес.Подразделение				 = ОбъектИнтерес.Ответственный.Подразделение;
		ОбъектИнтерес.Офис						 = ОбъектИнтерес.Подразделение.CRM_Офис;
		ОбъектИнтерес.ПотенциальныйКлиент		 = ИнформацияПоИнтересуПотенциальныйКлиент;
		ОбъектИнтерес.ПричинаОтказа				 = ИнформацияПоИнтересуПричинаОтказа;
		ОбъектИнтерес.ТипУслуги					 = ИнформацияПоИнтересуТипУслуги;
		ОбъектИнтерес.Тема						 = ИнформацияПоИнтересуТема;
		ОбъектИнтерес.Организация				 = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Организация) Тогда
			ОбъектИнтерес.Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) Тогда
				Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(ОбъектИнтерес.Партнер, ОбъектИнтерес.Организация);
				Если ЗначениеЗаполнено(Договор) Тогда
					ОбъектИнтерес["Договор"] = Договор;
					ОбъектИнтерес.Валюта = Договор.ВалютаРасчетов;
					ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ОбъектИнтерес.Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
					ОбъектИнтерес["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
					ОбъектИнтерес["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
					ОбъектИнтерес["ВидСкидкиНаценки"] = Договор.ВидСкидкиНаценки;
					ОбъектИнтерес["ВидЦен"] = Договор.ВидЦен;
				КонецЕсли;
			Иначе	
				ОбъектИнтерес.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
				ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ОбъектИнтерес.Дата, Новый Структура("Валюта", ОбъектИнтерес.Валюта));
				ОбъектИнтерес["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
				ОбъектИнтерес["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
				ОбъектИнтерес["ВидЦен"] = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнойВидЦенПродажи");;
			КонецЕсли;
		Иначе
			
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьРеквизитыДокумента(ОбъектИнтерес);

		КонецЕсли;	
			
		
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ОбъектИнтерес.Проект = ЗначениеНастройки;
		КонецЕсли;
		
		ОбъектИнтерес.Записать();
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) Тогда
			Менеджер = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
			Менеджер.Период = ОбъектИнтерес.Дата;
			Менеджер.Сделка = ОбъектИнтерес.Ссылка;
			Менеджер.Партнер = ?(ОбъектИнтерес.Партнер.Пустая(), ОбъектИнтерес.ПотенциальныйКлиент, ОбъектИнтерес.Партнер);
			Менеджер.КаналПервичногоИнтереса = ИнформацияПоИнтересуКаналПервичногоИнтереса;
			Менеджер.ИсточникПервичногоИнтереса = ИнформацияПоИнтересуИсточникПервичногоИнтереса;
			Менеджер.Записать(Истина);
		КонецЕсли;	
		ИнформацияПоИнтересуСсылка = ОбъектИнтерес.Ссылка;
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			ЗвонокОбъект = ОснованиеОбращения.ПолучитьОбъект();
			ЗвонокОбъект.УдалитьПредмет = ИнформацияПоИнтересуСсылка;
			ЗвонокОбъект.Записать();
		ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Контакт = Неопределено;
			Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
				Контакт = ИнформацияПоИнтересуКонтактноеЛицо;
			ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
				Контакт = ИнформацияПоИнтересуКлиент;
			ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
				Контакт = ИнформацияПоИнтересуПотенциальныйКлиент;
			КонецЕсли;
			Если ЗначениеЗаполнено(Контакт) Тогда
				CRM_РаботаСМессенджерамиСервер.СвязатьВсеСообщенияПользователяСКонтактом(ОснованиеОбращения.УчетнаяЗапись.ТипМессенджера, ОснованиеОбращения.ID_Пользователя, Контакт);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		ИнформацияПоИнтересуЗаписан = Истина;
	Исключение
		ИнформацияПоИнтересуЗаписан = Ложь;
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать интерес. Подробности см. в журнале регистрации.';en='Could not write lead. For details, see the log.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Интерес не создан)';en='New Appeal (Lead not created)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьПотенциальногоКлиентаНаСервере()
	
	НовыйПотенциальныйКлиент = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
	НовыйПотенциальныйКлиент.Наименование = ПоискКлиентНаименование;
	НовыйПотенциальныйКлиент.ОсновнойМенеджер = ИнформацияПоИнтересуОтветственный;
	
	Если ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПоискКлиентТелефон, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПотенциальныйКлиент, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПоискКлиентEmail, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПотенциальныйКлиент, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторМессенджера) И ЗначениеЗаполнено(ОснованиеОбращения) И ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(ОснованиеОбращения.УчетнаяЗапись, НовыйПотенциальныйКлиент.Ссылка);
		ТипКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ТипКИМессенджера(ОснованиеОбращения.УчетнаяЗапись);
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПотенциальныйКлиент,
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(CRM_РаботаСМессенджерамиСерверПовтИсп.НачалоАдресаСтраницыПользователя(ОснованиеОбращения.УчетнаяЗапись)
			+ИдентификаторМессенджера, ВидКИ), ВидКИ, ТипКИ);
	КонецЕсли;
	
	Попытка
		НовыйПотенциальныйКлиент.Записать();
		Возврат НовыйПотенциальныйКлиент.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать нового потенциального клиента. Подробности см. в журнале регистрации.';en='Failed to write a new potential customer. For details, see the log.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Потенциальный клиент не создан)';en='New Appeal (Potential customer not created)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЗарегистрироватьКонтактноеЛицоНаСервере(Контрагент)
	
	НовоеКЛ = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	//НовоеКЛ.Наименование = ?(РежимВводаОбращения = "НовыйКлиент_4", ПоискКлиентНаименование2, ПоискКлиентНаименование);
	НовоеКЛ.Наименование = ПоискКлиентНаименование;
	НовоеКЛ.Владелец = Контрагент; 
	НовоеКЛ.Автор = Пользователи.АвторизованныйПользователь();
	
	Если ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		КонстантаТелефон = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
		ВидКИ = ?(ЗначениеЗаполнено(КонстантаТелефон), КонстантаТелефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПоискКлиентТелефон, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		КонстантаПочта = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		ВидКИ = ?(ЗначениеЗаполнено(КонстантаПочта), КонстантаПочта, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПоискКлиентEmail, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторМессенджера) И ЗначениеЗаполнено(ОснованиеОбращения) И ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(ОснованиеОбращения.УчетнаяЗапись, НовоеКЛ.Ссылка);
		ТипКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ТипКИМессенджера(ОснованиеОбращения.УчетнаяЗапись);
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению( 
			CRM_РаботаСМессенджерамиСерверПовтИсп.НачалоАдресаСтраницыПользователя(ОснованиеОбращения.УчетнаяЗапись)+ИдентификаторМессенджера, ВидКИ), ВидКИ, ТипКИ);
	КонецЕсли;
	
	Попытка
		НовоеКЛ.Записать();
		Возврат НовоеКЛ.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать контактное лицо клиента. Подробности см. в журнале регистрации.';en='Could not write customer contact. For details, see the log.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Контакт не создан)';en='New Appeal (Contact not created)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЗарегистрироватьКлиентаНаСервере()
	
	НовыйКлиент = Справочники.Партнеры.СоздатьЭлемент();
	НовыйКлиент.УстановитьСсылкуНового(Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор));
	
	НовыйКлиент.Наименование = ПоискКлиентНаименование;
	НовыйКлиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания; 
	НовыйКлиент.ОсновнойМенеджер = ?(ЗначениеЗаполнено(CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный")),
														CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный"),
														ТекущийПользователь);; 
	НовыйКлиент.CRM_ОсновноеКонтактноеЛицо = ЗарегистрироватьКонтактноеЛицоНаСервере(НовыйКлиент.ПолучитьСсылкуНового());
	
	Попытка
		НовыйКлиент.Записать();
		Возврат НовыйКлиент.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать клиента. Подробности см. в журнале регистрации.';en='Could not write customer. For details, see the log.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Клиент не создан)';en='New Appeal (Customer not created)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ОбработатьКонтактыНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента Тогда
		ИнформацияПоИнтересуПотенциальныйКлиент = ЗарегистрироватьПотенциальногоКлиентаНаСервере();
	КонецЕсли;
	
	Если ИнформацияПоИнтересуСоздаватьКлиента Тогда
		ИнформацияПоИнтересуКлиент = ЗарегистрироватьКлиентаНаСервере();
	КонецЕсли;
	
	Если ИнформацияПоИнтересуСоздаватьКонтакт И НЕ ИнформацияПоИнтересуСоздаватьКлиента Тогда
		ИнформацияПоИнтересуКонтактноеЛицо = ЗарегистрироватьКонтактноеЛицоНаСервере(ИнформацияПоИнтересуКлиент); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОбращениеНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИнформацияПоИнтересуСоздаватьИнтерес Тогда
		Если СтартуемБизнесПроцесс Тогда
			
			//ЗарегистрироватьПроцессНаСервере();
			
		Иначе
			ЗарегистрироватьИнтересНаСервере();
			
			Если НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуСсылка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать созданный интерес!'"));
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Интерес",				ИнформацияПоИнтересуСсылка);
			Запрос.УстановитьПараметр("CRM_СостояниеИнтереса",	ИнформацияПоИнтересуСсылка.СостояниеИнтереса);
			Запрос.УстановитьПараметр("Исполнитель",			ИнформацияПоИнтересуСсылка.Ответственный);
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Задача,
			|	ЗадачаИсполнителя.CRM_СостояниеИнтереса КАК СостояниеИнтереса
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
			|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
			|	И НЕ ЗадачаИсполнителя.Выполнена
			|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ИнформацияПоИнтересуЗадача = Выборка.Задача;
				Если НЕ ИнформацияПоИнтересуСсылка.СостояниеИнтереса = Выборка.СостояниеИнтереса Тогда
					ИнтересОбъект = ИнформацияПоИнтересуСсылка.ПолучитьОбъект();
					ИнтересОбъект.СостояниеИнтереса = Выборка.СостояниеИнтереса;
					ИнтересОбъект.ОбменДанными.Загрузка = Истина;
					ИнтересОбъект.Записать();
					
					ИнформацияПоИнтересуСостояниеИнтереса = ИнформацияПоИнтересуСсылка.СостояниеИнтереса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьВзаимодействиеНаСервере()
	
	Если НЕ ИнформацияПоИнтересуЗаписан Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВзаимодействиеСсылка = Истина;
	
	Попытка
		Если ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Взаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("КонтактноеЛицо", ИнформацияПоИнтересуСсылка.CRM_КонтактноеЛицо);
			СтруктураЗаполнения.Вставить("Партнер", ИнформацияПоИнтересуСсылка.CRM_Партнер);
			СтруктураЗаполнения.Вставить("Подразделение", ИнформацияПоИнтересуСсылка.Исполнитель.Подразделение);
			СтруктураЗаполнения.Вставить("Содержание", "");
			СтруктураЗаполнения.Вставить("ДатаНачала", ТекущаяДатаСеанса());
			СтруктураЗаполнения.Вставить("ВремяС", ДатаВходящегоОбращения);
			СтруктураЗаполнения.Вставить("ВремяПо", ТекущаяДатаСеанса());
			
			Взаимодействие.Автор 						= ТекущийПользователь;
			Взаимодействие.Заполнить(СтруктураЗаполнения);
			
			Взаимодействие.Тема		 					= ОписаниеВзаимодействия;
			Взаимодействие.ДокументОснование 			= ИнформацияПоИнтересуСсылка;
			Взаимодействие.Организация			 		= ИнформацияПоИнтересуСсылка.БизнесПроцесс.Организация;
			Взаимодействие.СтатусВзаимодействия 		= Справочники.CRM_СостоянияСобытий.Завершено;
			Взаимодействие.Партнер 						= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент), ИнформацияПоИнтересуКлиент, Взаимодействие.Партнер);
			Взаимодействие.КонтактноеЛицо 				= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо), ИнформацияПоИнтересуКонтактноеЛицо, Взаимодействие.КонтактноеЛицо);
			Взаимодействие.ПлановаяДата 				= ДатаВходящегоОбращения;
			Взаимодействие.Дата 						= ДатаВходящегоОбращения;
			Взаимодействие.Ответственный 				= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуОтветственный), ИнформацияПоИнтересуОтветственный, Взаимодействие.Ответственный);
			Взаимодействие.ВидВзаимодействия			= ИнформацияПоИнтересуВидВзаимодействия;
			Взаимодействие.Баллы						= ИнформацияПоИнтересуВидВзаимодействия.Баллы;
			Взаимодействие.Задача						= ИнформацияПоИнтересуСсылка;
			Взаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
			Взаимодействие.ЗавершившийПользователь = ТекущийПользователь;
			Взаимодействие.Записать();
			
			// Добавляем документ в регистр документов взаимодействия.
			CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие.Ссылка, ОснованиеОбращения);
	        ВзаимодействиеСсылка = Взаимодействие.Ссылка;
		ИначеЕсли Не ЗначениеЗаполнено(ОснованиеОбращения) Тогда
			
			Взаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
			Взаимодействие.Автор 						= ТекущийПользователь;
			Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
				Взаимодействие.ПотенциальныйКлиент 		= ИнформацияПоИнтересуПотенциальныйКлиент;
			Иначе
				Взаимодействие.Заполнить(ИнформацияПоИнтересуСсылка);
			КонецЕсли;
			Взаимодействие.Тема = ?(ЗначениеЗаполнено(ОписаниеВзаимодействия), 
														ОписаниеВзаимодействия,
														ИнформацияПоИнтересуВидВзаимодействия.Наименование);
			Взаимодействие.ВидВзаимодействия			= ИнформацияПоИнтересуВидВзаимодействия;
			Взаимодействие.СостояниеИнтереса 			= ИнформацияПоИнтересуСсылка.СостояниеИнтереса;
			Взаимодействие.ДокументОснование 			= ИнформацияПоИнтересуСсылка;
			Взаимодействие.Организация			 		= ИнформацияПоИнтересуСсылка.Организация;
			Взаимодействие.СтатусВзаимодействия 		= Справочники.CRM_СостоянияСобытий.Завершено;
			Взаимодействие.Партнер 						= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент), ИнформацияПоИнтересуКлиент, Взаимодействие.Партнер);
			Взаимодействие.КонтактноеЛицо 				= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо), ИнформацияПоИнтересуКонтактноеЛицо, Взаимодействие.КонтактноеЛицо);
			Взаимодействие.ПлановаяДата 				= ДатаВходящегоОбращения;
			Взаимодействие.Дата 						= ДатаВходящегоОбращения;
			Взаимодействие.Ответственный 				= ТекущийПользователь;
			Взаимодействие.Подразделение				= ИнформацияПоИнтересуСсылка.Подразделение;
			Взаимодействие.Организация					= ИнформацияПоИнтересуСсылка.Организация;
			Взаимодействие.Баллы						= ИнформацияПоИнтересуВидВзаимодействия.Баллы;
			Взаимодействие.Первичное					= Истина;
			Взаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
			Взаимодействие.ЗавершившийПользователь = ТекущийПользователь;
			Если ИнформацияПоИнтересуОтветственный<>ТекущийПользователь Тогда
				Взаимодействие.Результат = НСтр("ru='Создана задача';en='Created task'");
			ИначеЕсли РежимВводаОбращения <> "ТекущийИнтерес_1" Тогда
				Взаимодействие.Результат = НСтр("ru='Создан интерес клиента';en='Lead created'");
			КонецЕсли;
			
			Если НЕ ИнформацияПоИнтересуСоздаватьИнтерес И НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуЗадача) Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Интерес",ИнформацияПоИнтересуСсылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка КАК Задача,
				|	ЗадачаИсполнителя.CRM_СостояниеИнтереса КАК СостояниеИнтереса
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
				|	И НЕ ЗадачаИсполнителя.Выполнена
				|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ИнформацияПоИнтересуЗадача = Выборка.Задача;
				КонецЕсли;
			КонецЕсли;
			
			Взаимодействие.Задача = ИнформацияПоИнтересуЗадача;
			Взаимодействие.Записать();
			
	        ВзаимодействиеСсылка = Взаимодействие.Ссылка;
		КонецЕсли;
		
		// Связать письмо с интересом
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ОснованиеОбращения);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.CRM_Интерес = ИнформацияПоИнтересуСсылка;
				Запись.СостояниеИнтереса = ИнформацияПоИнтересуСостояниеИнтереса;
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ОснованиеОбращения);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.CRM_Интерес = ИнформацияПоИнтересуСсылка;
				Запись.СостояниеИнтереса = ИнформацияПоИнтересуСостояниеИнтереса;
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ИнформацияПоИнтересуОтветственный<>ТекущийПользователь Тогда
			ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ОбъектЗадача.Автор = ТекущийПользователь;
			ОбъектЗадача.Исполнитель = ИнформацияПоИнтересуОтветственный;
			ОбъектЗадача.ПринятаКИсполнению = Истина;
			ОбъектЗадача.Наименование = ДействиеПоИнтересу;
			ОбъектЗадача.Дата = ДатаВходящегоОбращения;
			ОбъектЗадача.ДатаНачала = ДатаВходящегоОбращения;
			ОбъектЗадача.СрокИсполнения = ДатаВходящегоОбращения;
			ОбъектЗадача.CRM_Личная = Истина;
			ОбъектЗадача.Предмет = ИнформацияПоИнтересуСсылка;
			ОбъектЗадача.Описание = ИнформацияПоИнтересуТема;
			ОбъектЗадача.CRM_Партнер = ИнформацияПоИнтересуКлиент;
			ОбъектЗадача.CRM_КонтактноеЛицо = ИнформацияПоИнтересуКонтактноеЛицо;
			ОбъектЗадача.Записать();
	        ВзаимодействиеСсылка = ОбъектЗадача.Ссылка;
		КонецЕсли;
		
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок")
			ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")
			ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			
			Если ЗначениеЗаполнено(ОснованиеОбращения) И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ОснованиеОбращения) Тогда
				Если ИнформацияПоИнтересуСоздаватьИнтерес Тогда
					РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ОснованиеОбращения, Справочники.CRM_СостоянияЛидов.Сконвертирован, ИнформацияПоИнтересуСсылка);
				Иначе
					РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(ОснованиеОбращения);
				КонецЕсли;
			КонецЕсли;
			
			ОбъектОбращение = ОснованиеОбращения.ПолучитьОбъект();
			ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
			ОбъектОбращение.Ответственный = ТекущийПользователь;
			ОбъектОбращение.Записать();
			
			// Добавляем документ в регистр документов взаимодействия.
			CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(ВзаимодействиеСсылка, ОснованиеОбращения);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось создать взаимодействие. Подробности см. в журнале регистрации.';en='Failed to create an interaction. For details, see the log.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Взаимодействие не создано)';en='New Appeal  (No interaction established)'"), 
		УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	Возврат ВзаимодействиеСсылка; 
	
КонецФункции

// Вызов закомментирован.

//&НаСервереБезКонтекста
//Функция ОбработатьПотерюОбращенияНаСервере(ДатаВходящегоОбращения, ПричинаОтказаСсылка, КомментарийСтрока, Клиент, КонтактноеЛицо, ПотКлиент)
//	
//	ДатаЗавершенияОбработки = ТекущаяДатаСеанса();
//	ПринялПользователь		= Пользователи.ТекущийПользователь();
//	
//	// запись взаимодействия
//	Взаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
//	Взаимодействие.Дата							= ТекущаяДатаСеанса();
//	Взаимодействие.Партнер						= Клиент;
//	Взаимодействие.КонтактноеЛицо				= КонтактноеЛицо;
//	Взаимодействие.ПотенциальныйКлиент			= ПотКлиент;
//	Взаимодействие.Автор						= ПринялПользователь;
//	Взаимодействие.Результат					= ПричинаОтказаСсылка.Наименование;
//	Взаимодействие.Тема							= ?(ЗначениеЗаполнено(КомментарийСтрока), КомментарийСтрока, НСтр("ru='Обращение потеряно';en='The appeal is lost'"));
//	Взаимодействие.Ответственный				= ПринялПользователь;
//	Взаимодействие.ВидВзаимодействия			= Справочники.CRM_ВидыВзаимодействий.ПотеряОбращения;
//	Взаимодействие.СтатусВзаимодействия			= Справочники.CRM_СостоянияСобытий.Отменено;
//	//Взаимодействие.СостояниеИнтереса			= Справочники.CRM_СостоянияИнтересов.ПервичныйИнтерес;
//	Взаимодействие.ПлановаяДата					= ДатаВходящегоОбращения;
//	Взаимодействие.НаВесьДень					= Ложь;
//	Взаимодействие.ДатаЗавершенияВзаимодействия	= ДатаЗавершенияОбработки;
//	Взаимодействие.Организация 		  	 		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
//	
//	Попытка
//		Взаимодействие.Записать();
//		Возврат Взаимодействие.Ссылка;
//	Исключение
//		Возврат Неопределено;
//	КонецПопытки;
//	
//КонецФункции

Процедура CRM_ДобавитьИнтересНаСервере(ВходящееПисьмо, Интерес)
	
	ВходящееПисьмоОбъект = ВходящееПисьмо.ПолучитьОбъект();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаИнтерес" , Интерес);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	CRM_Интерес.Ссылка,
	               |	CRM_Интерес.СостояниеИнтереса,
	               |	ЛОЖЬ КАК ВведенНаОсновании,
	               |	ИСТИНА КАК ОсновнойИнтерес
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	CRM_Интерес.Ссылка = &СсылкаИнтерес
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_Интерес.Дата УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
	Если ТаблицаСвязей.Количество() > 0 Тогда
		ВходящееПисьмоОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
	КонецЕсли;
	ВходящееПисьмоОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ЭкспортныеПроцедурыОповещения

&НаКлиенте
Процедура УказатьПричинуОтказа(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		//
		// ДОРАБОТАТЬ: регистр сведений (?) причины неудачных обращений.
		//Ссылка = ОбработатьПотерюОбращенияНаСервере(ДатаВходящегоОбращения, 
		//											Результат.ПричинаОтказа,
		//											Результат.Комментарий,
		//											ИнформацияПоИнтересуКлиент,
		//											ИнформацияПоИнтересуКонтактноеЛицо,
		//											ИнформацияПоИнтересуПотенциальныйКлиент);
		////
		//Если Ссылка <> Неопределено Тогда
		//	ПоказатьОповещениеПользователя(НСтр("ru='Обращение потеряно';en='The appeal is lost'"), 
		//			ПолучитьНавигационнуюСсылку(Ссылка), 
		//			НСтр("ru='Причина: ';en='Reason:'") + Результат.ПричинаОтказа);
		//	//
		//КонецЕсли;
		ДописатьИнформациюВОснованиеОбращения(Результат.ПричинаОтказа, Результат.Комментарий);
		ЗаписатьСостояниеОтклоненногоЛида(ОснованиеОбращения, Результат.ПричинаОтказа, Результат.Комментарий);
		CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ОткрыватьИнтересПриПринятииОбращения", ОткрыватьИнтересПриПринятииОбращения);
		Закрыть();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДописатьИнформациюВОснованиеОбращения(ПричинаОтказа, Комментарий)
	Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ТелефонныйЗвонок = ОснованиеОбращения.ПолучитьОбъект();
		ТелефонныйЗвонок.CRM_СкрытьВАРМ = Истина;
		ТелефонныйЗвонок.Комментарий = ТелефонныйЗвонок.Комментарий+?(ЗначениеЗаполнено(ТелефонныйЗвонок.Комментарий), Символы.ПС, "")
				+НСтр("ru='Обращение потеряно по причине';en='Treatment is lost for a reason'")+": "+Строка(ПричинаОтказа)
				+Символы.ПС+Комментарий;
		АбонентВТелефонномЗвонке = ТелефонныйЗвонок.АбонентКонтакт;
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И ИнформацияПоИнтересуПотенциальныйКлиент <> АбонентВТелефонномЗвонке Тогда
			ТелефонныйЗвонок.АбонентКонтакт 		= ИнформацияПоИнтересуПотенциальныйКлиент;
			ТелефонныйЗвонок.АбонентПредставление 	= Строка(ТелефонныйЗвонок.АбонентКонтакт);
		ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) И ИнформацияПоИнтересуКонтактноеЛицо <> АбонентВТелефонномЗвонке Тогда
			ТелефонныйЗвонок.АбонентКонтакт 		= ИнформацияПоИнтересуКонтактноеЛицо;
			ТелефонныйЗвонок.АбонентПредставление 	= Строка(ТелефонныйЗвонок.АбонентКонтакт);
		КонецЕсли;
		Попытка
			ТелефонныйЗвонок.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостояниеОтклоненногоЛида(ОснованиеОбращения, ПричинаОтказа, Комментарий)
	Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_Заявка")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		
		Если ЗначениеЗаполнено(ОснованиеОбращения) И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ОснованиеОбращения) Тогда
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ОснованиеОбращения, Справочники.CRM_СостоянияЛидов.Отклонен,, ПричинаОтказа, Комментарий);
		КонецЕсли;
		
		ОбъектОбращение = ОснованиеОбращения.ПолучитьОбъект();
		ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
		Если Не ЗначениеЗаполнено(ОбъектОбращение.Ответственный) Тогда
			ОбъектОбращение.Ответственный = ТекущийПользователь;
		КонецЕсли;
		ОбъектОбращение.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоискДляСменыРежима(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Повторить Тогда
		ПовторитьПоиск(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ СтартуемБизнесПроцесс Тогда
		Ном = ПроверяемыеРеквизиты.Количество();
		Пока Ном > 0 Цикл
			Если ПроверяемыеРеквизиты[Ном-1] = "ИнформацияПоИнтересуТипУслуги" Тогда
				ПроверяемыеРеквизиты.Удалить(Ном-1);
				Прервать;
			КонецЕсли;
			Ном = Ном-1;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОснованиеОбращения) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "ИнформацияПоИнтересуВидВзаимодействия");
	КонецЕсли;
	Если НЕ Элементы.ДействиеПоИнтересу.Видимость Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "ДействиеПоИнтересу");
	КонецЕсли;
	Если ФиксироватьПервичныйИнтерес И Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина Тогда
		ПроверяемыеРеквизиты.Добавить("ИнформацияПоИнтересуИсточникПервичногоИнтереса");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура удаляет из массива проверяемых реквизитов реквизит с указанным именем.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//	ИмяРеквизита			- Строка	- Имя удаляемого реквизита.
//
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если НЕ (Индекс = Неопределено) Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьИзПроверяемыхРеквизитов()

&НаКлиенте
Процедура ПоискКлиентКонтактнаяИнформацияПриИзменении(Элемент)
	
	ОтметкаНезаполненного = НЕ (ЗначениеЗаполнено(ПоискКлиентEmail) ИЛИ ЗначениеЗаполнено(ПоискКлиентТелефон));
	Элементы.ПоискКлиентEmail3.ОтметкаНезаполненного = ОтметкаНезаполненного;
	Элементы.ПоискКлиентТелефон3.ОтметкаНезаполненного = ОтметкаНезаполненного;
	Элементы.ПоискКлиентEmail1.ОтметкаНезаполненного = ОтметкаНезаполненного;
	Элементы.ПоискКлиентТелефон1.ОтметкаНезаполненного = ОтметкаНезаполненного;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПолейПоиска(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаПолейПоискаЗавершение", ЭтотОбъект, Новый Структура("ВариантНастройки", Элемент.Имя));
	Если Элемент.Имя = "ПоискКлиентНаименование" Тогда
		СписокПолейПоиска = ПоляПоискаНаименование;
	ИначеЕсли Элемент.Имя = "ПоискКлиентТелефон" Тогда
		СписокПолейПоиска = ПоляПоискаТелефон;
	ИначеЕсли Элемент.Имя = "ПоискКлиентEmail" Тогда
		СписокПолейПоиска = ПоляПоискаПочта;
	ИначеЕсли Элемент.Имя = "ПоискКлиентПрочее" Тогда
		СписокПолейПоиска = ПоляПоискаПрочее;	
	КонецЕсли;	
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаВыбораПолейПоиска", Новый Структура("ПоляПоиска", СписокПолейПоиска), ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПолейПоискаЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если ДопПараметры.ВариантНастройки = "ПоискКлиентНаименование" Тогда
			ПоляПоискаНаименование = Результат;
		ИначеЕсли ДопПараметры.ВариантНастройки = "ПоискКлиентТелефон" Тогда
			ПоляПоискаТелефон = Результат;
		ИначеЕсли ДопПараметры.ВариантНастройки = "ПоискКлиентEmail" Тогда	
			ПоляПоискаПочта = Результат;
		ИначеЕсли ДопПараметры.ВариантНастройки = "ПоискКлиентПрочее" Тогда	
			ПоляПоискаПрочее = Результат;	
		КонецЕсли;	
		//СформироватьДанныеПоПоиску();
		//РазвернутьВсе(Неопределено);
		//
		//Если ИнформацияПоИнтересуНайденоИнтересов = 0 ИЛИ ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
		//	УстановитьПараметрыЭлементовФормы();
		//	Элементы.ПерейтиК.Доступность = Истина;
		//	Элементы.ФормаОбращениеПотеряно.Доступность = Истина;
		//	Элементы.ПерейтиК.Заголовок = НСтр("ru='Принять обращение';en='New Appeal '") + " (Ctrl+Enter)";
		//	// +Софтфон
		//	сфпВидимостьИДоступностьГруппыСофтфон();
		//	// +Софтфон		
		//Иначе
		//	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
		//	Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
		//	Элементы.ПерейтиК.Доступность = Ложь;
		//	Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		//	Элементы.ПерейтиК.Заголовок = НСтр("ru='Перейти';en='Pass'") + " (Ctrl+Enter)";
		//КонецЕсли;
		//
		//Элементы.ГруппаВыполняетсяПоиск.Видимость = Ложь;
		//
		//Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
		//	ПерейтиК(Неопределено, Истина);
		//КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентИННОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если СтрДлина(Текст) < 3 Тогда
		Если СтрДлина(Текст) > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Минимальная длина для поиска - 3 символа.';en='The minimum length for searching is 3 characters.'"));
		КонецЕсли;
		Текст = "";
		ПоискОчистка(Элемент, Ложь);
		Возврат;
	КонецЕсли;
	ИзменитьПараметрыПоиска(Элемент.Имя, Текст, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентИННИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если Текст = "" Тогда
		ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	Если ИнформацияПоИнтересуИсточникПервичногоИнтереса = Неопределено ИЛИ ИнформацияПоИнтересуИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнформацияПоИнтересуКаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
				И ТипПВХ(ИнформацияПоИнтересуКаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
		// И ЗаполнятьПервичныйИнтерес 
		И Не ЗначениеЗаполнено(ИнформацияПоИнтересуИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
				И ТипПВХ(ИнформацияПоИнтересуКаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаОчистка(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
				И ТипПВХ(ИнформацияПоИнтересуКаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
		// И ЗаполнятьПервичныйИнтерес 
		И Не ЗначениеЗаполнено(ИнформацияПоИнтересуИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
				И ТипПВХ(ИнформацияПоИнтересуКаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) Тогда
		Если ТипПВХ(ИнформацияПоИнтересуКаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИнформацияПоИнтересуИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(ИнформацияПоИнтересуКаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
				И ТипПВХ(ИнформацияПоИнтересуКаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
		// И ЗаполнятьПервичныйИнтерес 
		И Не ЗначениеЗаполнено(ИнформацияПоИнтересуИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) 
				И ТипПВХ(ИнформацияПоИнтересуКаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы	= Новый Структура("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элементы.ИсточникПервичногоИнтереса, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура ВидВзаимодействияПриИзменении(Элемент)
	ОписаниеВзаимодействия = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ИнформацияПоИнтересуВидВзаимодействия, "Описание");
КонецПроцедуры

#КонецОбласти

#КонецОбласти 






