
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если СтрДлина(СтрокаПоиска) < 3  И СтрДлина(СтрокаПоиска) > 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "СтрокаПоиска";
		Сообщение.Текст = "Минимальная длина строки поиска 3 символа";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	ВыполнитьПоиск();
	Если РезультатыПоиска.Количество() > 0 Тогда
		Элементы.РезультатыПоиска.ТекущаяСтрока = РезультатыПоиска[0].ПолучитьИдентификатор();
		РезультатыПоискаПриАктивизацииСтроки(Элемент);
	Иначе	
		РезультатыПоиска.Очистить();
		НайденныеИнтересы.Очистить();
		Элементы.ГруппаКлиент.Видимость = Ложь;
		//Элементы.СценарийПродажи.Видимость = Ложь;
		Элементы.ГруппаКонтакт.Видимость = Ложь;
		Элементы.ГруппаФИО.Видимость = Истина;
		Элементы.ФИО.Видимость = Истина;
		Элементы.ПотенциальныйКлиент.Видимость = Ложь;
		Элементы.ИДАккаунта.Видимость = ЗначениеЗаполнено(ИДАккаунта);
		Ответственный = ТекущийПользователь;
		Элементы.Компания.Доступность = Истина;
		ТипУслуги = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
		ПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
		Клиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Контакт = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
		МассивКлиентов = Новый Массив;
		МассивКлиентов.Добавить(Неопределено);
		МассивКонтактов = Новый Массив;
		МассивКонтактов.Добавить(Неопределено);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКонтактов", МассивКонтактов, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКлиентов", МассивКлиентов, Истина);
		ЗАполнитьРеквизитыИнтересаПоПоиску();
		ЗаполнитьДоступныеТипыУслуг();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаПолейПоискаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаВыбораПолейПоиска", Новый Структура("ПоляПоиска", ПоляПоиска), ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
КонецПроцедуры

&НаКлиенте
Процедура НовыйКлиент(Команда)
	СтрокаПоиска = "";
	РезультатыПоиска.Очистить();
	НайденныеИнтересы.Очистить();
	Элементы.ГруппаКлиент.Видимость = Ложь;
	//Элементы.СценарийПродажи.Видимость = Ложь;
	Элементы.ГруппаКонтакт.Видимость = Ложь;
	Элементы.ГруппаФИО.Видимость = Истина;
	Элементы.ФИО.Видимость = Истина;
	Элементы.ПотенциальныйКлиент.Видимость = Ложь;
	Элементы.ИДАккаунта.Видимость = ЗначениеЗаполнено(ИДАккаунта);
	Ответственный = ТекущийПользователь;
	Элементы.Компания.Доступность = Истина;
	ТипУслуги = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
	ПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	Клиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Контакт = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	МассивКлиентов = Новый Массив;
	МассивКлиентов.Добавить(Неопределено);
	МассивКонтактов = Новый Массив;
	МассивКонтактов.Добавить(Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКонтактов", МассивКонтактов, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКлиентов", МассивКлиентов, Истина);
	ЗАполнитьРеквизитыИнтересаПоПоиску();
	ЗаполнитьДоступныеТипыУслуг();
КонецПроцедуры

&НаСервере 
Функция ПолучитьМассивКонтактовДляОтбора(Контакт)
	УстановитьПривилегированныйРежим(Истина);
	МассивОтбораКонтакт = Новый Массив;
	МассивОтбораКонтакт.Добавить(Контакт);
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		МассивОтбораКонтакт.Добавить(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		Если Контакт.Владелец.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Владелец = &Владелец
			|	И КонтактныеЛицаПартнеров.Ссылка <> &Ссылка";
			Запрос.УстановитьПараметр("Владелец", Контакт.Владелец);
			Запрос.УстановитьПараметр("Ссылка", Контакт);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивОтбораКонтакт.Добавить(Выборка.Ссылка);
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат МассивОтбораКонтакт;
КонецФункции	

&НаКлиенте
Процедура РезультатыПоискаПриАктивизацииСтрокиОбработка()
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Индекс = Результатыпоиска.Индекс(ТекСтрока);
	Если ТекИндексСтроки <> Индекс Тогда
		Если ТекСтрока <> Неопределено Тогда
			Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
			;
			//Элементы.НайденныеИнтересы.ОтборСтрок = Новый ФиксированнаяСтруктура("Клиент", ТекСтрока.Клиент);
			МассивКлиентов = Новый Массив;
			МассивКлиентов.Добавить(ТекСтрока.Клиент);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКонтактов", ПолучитьМассивКонтактовДляОтбора(ТекСтрока.Контакт), Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКлиентов", МассивКлиентов, Истина);
			СтруктураСтроки = Новый Структура("Партнер, Контакт, ОсновнойМенеджер, ПредставлениеКлиента, ПредставлениеКонтакта", ТекСтрока.Клиент, ТекСтрока.Контакт, ТекСтрока.ОсновнойМенеджер, ТекСтрока.ПредставлениеКлиента, ТекСтрока.ПредставлениеКонтакта);
			Элементы.ФИО.КнопкаОчистки = Ложь;
			Элементы.ОтменаНовоеКЛ.Видимость = Ложь;
			КаналПриИзменении("");
			ЗАполнитьРеквизитыИнтересаПоПоиску(СтруктураСтроки);
			Ответственный = ТекСтрока.ОсновнойМенеджер;
			Если Ответственный.Пустая() Тогда
				Ответственный = ТекущийПользователь;
			КонецЕсли;
		Иначе	
			Описание = "";
			Ответственный = ТекущийПользователь;
			ЗАполнитьРеквизитыИнтересаПоПоиску();
		КонецЕсли;	
		ТекИндексСтроки = Индекс;
		ЗаполнитьДоступныеТипыУслуг();	
	КонецЕсли;
	Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Элементы.СоздатьНовыйИнтерес.Заголовок = "Запустить бизнес-процесс";
		Элементы.ОткрыватьИнтерес.Видимость = Ложь;
		Элементы.ОткрыватьИнтересОбращение.Видимость = Ложь;
	Иначе
		Элементы.СоздатьНовыйИнтерес.Заголовок = "Создать интерес";
		Элементы.ОткрыватьИнтерес.Видимость = НЕ Ответственный = ТекущийПользователь;
		Элементы.ОткрыватьИнтересОбращение.Видимость = НЕ Ответственный = ТекущийПользователь;
	КонецЕсли;
	сфпВидимостьИДоступностьГруппыСофтфон();
КонецПроцедуры

&НаКлиенте
Процедура РезультатыПоискаПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("РезультатыПоискаПриАктивизацииСтрокиОбработка", 0.2, Истина);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеТипыУслуг()
	//ДоступныеТипыУслуг.Очистить();
	//Если Ответственный.Подразделение.CRM_ТипУслуги.Количество() = 0 Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	CRM_ТипУслуги.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Справочник.CRM_ТипУслуги КАК CRM_ТипУслуги";
	//	ДоступныеТипыУслуг.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));	
	//Иначе	
	//	ДоступныеТипыУслуг.ЗагрузитьЗначения(Ответственный.Подразделение.CRM_ТипУслуги.ВыгрузитьКолонку("ТипУслуги"));	
	//КонецЕсли;	
	//Если ДоступныеТипыУслуг.Количество() = 1 Тогда
	//	ТипУслуги = ДоступныеТипыУслуг[0].Значение;
	//Иначе	
	//	ТипУслуги = Справочники.CRM_ТипУслуги.ПустаяСсылка();
	//	//СценарийПродажи = Справочники.CRM_СостоянияИнтересов.ПустаяСсылка();
	//КонецЕсли;	
	//ПараметрыВыбораТипУслуги = Новый Массив;
	//ПараметрыВыбораТипУслуги.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеТипыУслуг));
	//Элементы.ТипУслуги.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораТипУслуги);
	Если ИспользоватьТипыУслуг Тогда
		//Элементы.СценарийПродажи.Доступность = ЗначениеЗаполнено(ТипУслуги);
	КонецЕсли;
	ЗаполнитьДоступныеСценарииПродаж();
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДоступныеСценарииПродаж()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_СостоянияИнтересовТипыУслуг.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ тмпДоступныеПоФильтрам
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов.ТипыУслуг КАК CRM_СостоянияИнтересовТипыУслуг
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИспользоватьТипыУслуг
	|				ТОГДА CRM_СостоянияИнтересовТипыУслуг.ТипУслуги = &ТипУслуги
	|						ИЛИ CRM_СостоянияИнтересовТипыУслуг.ТипУслуги = ЗНАЧЕНИЕ(Справочник.CRM_ТипУслуги.Пустаяссылка)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ CRM_СостоянияИнтересовТипыУслуг.Ссылка.ПометкаУдаления
	|	И (CRM_СостоянияИнтересовТипыУслуг.Ссылка.Подразделение = &Подразделение
	|			ИЛИ CRM_СостоянияИнтересовТипыУслуг.Ссылка.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.Пустаяссылка))
	|	И CRM_СостоянияИнтересовТипыУслуг.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
	|	И НЕ CRM_СостоянияИнтересовТипыУслуг.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ тмпБезТиповУслуг
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|ГДЕ
	|	НЕ CRM_СостоянияИнтересов.Ссылка В
	|				(ВЫБРАТЬ
	|					CRM_СостоянияИнтересовТипыУслуг.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.CRM_СостоянияИнтересов.ТипыУслуг КАК CRM_СостоянияИнтересовТипыУслуг
	|				ГДЕ
	|					CRM_СостоянияИнтересовТипыУслуг.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
	|				СГРУППИРОВАТЬ ПО
	|					CRM_СостоянияИнтересовТипыУслуг.Ссылка)
	|	И НЕ CRM_СостоянияИнтересов.Ссылка.ПометкаУдаления
	|	И (CRM_СостоянияИнтересов.Ссылка.Подразделение = &Подразделение
	|			ИЛИ CRM_СостоянияИнтересов.Ссылка.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.Пустаяссылка))
	|	И CRM_СостоянияИнтересов.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тмпДоступныеПоФильтрам.Ссылка КАК Ссылка
	|ИЗ
	|	тмпДоступныеПоФильтрам КАК тмпДоступныеПоФильтрам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тмпБезТиповУслуг.Ссылка
	|ИЗ
	|	тмпБезТиповУслуг КАК тмпБезТиповУслуг";
	Запрос.УстановитьПараметр("ТипУслуги", ТипУслуги);
	Запрос.УстановитьПараметр("ИспользоватьТипыУслуг", ИспользоватьТипыУслуг);
	Запрос.УстановитьПараметр("Подразделение", Ответственный.Подразделение);

	Элементы.СценарийПродажи.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если ДоступныКарты Тогда
		ПроцессыИКарты = CRM_БизнесПроцессыСервер.ВернутьСпискиДоступныхПроцессовИКарт(Истина);
		
		Для Каждого ЭлементСписка ИЗ ПроцессыИКарты.Карты Цикл
			Элементы.СценарийПродажи.СписокВыбора.Добавить(ЭлементСписка.Значение, Строка(ЭлементСписка.Значение),,БиблиотекаКартинок.CRM_ПодсистемаБизнесПроцессы_Такси);
			Для Каждого ЭлементСпискаПроцесс ИЗ ПроцессыИКарты.Процессы Цикл
				Если ЭлементСпискаПроцесс.Значение.CRM_КартаМаршрута = ЭлементСписка.Значение Тогда
					Элементы.СценарийПродажи.СписокВыбора.Добавить(ЭлементСпискаПроцесс.Значение, "   "+Строка(ЭлементСпискаПроцесс.Значение),,БиблиотекаКартинок.Справочник);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ЭлементСписка ИЗ ПроцессыИКарты.Процессы Цикл
			Если Элементы.СценарийПродажи.СписокВыбора.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
				Элементы.СценарийПродажи.СписокВыбора.Добавить(ЭлементСписка.Значение, Строка(ЭлементСписка.Значение),,БиблиотекаКартинок.Справочник);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Элементы.СценарийПродажи.СписокВыбора.Количество() = 1 Тогда
		СценарийПродажи = Элементы.СценарийПродажи.СписокВыбора[0].Значение;
	ИначеЕсли Элементы.СценарийПродажи.СписокВыбора.НайтиПоЗначению(СценарийПродажи) = Неопределено Тогда
		СценарийПродажи = Неопределено;
	КонецЕсли;	

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьПоиск()
	
	ЭтоCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	ОбрабатыватьАктивацию = Истина;
	УстановитьПривилегированныйРежим(Истина);
	РезультатыПоиска.Очистить();
	Описание = "";
	ТекИндексСтроки = -10;  // сбросим индекс.
	ОбрабатыватьАктивацию = Истина;
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Элементы.ФИО.Доступность = Истина;
		Элементы.Компания.Доступность = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
		|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
		|	ИСТИНА КАК КлиентНайден,
		|	ЛОЖЬ КАК КонтактНайден
		|ПОМЕСТИТЬ тмпПартнеры
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ПО ПартнерыКонтактнаяИнформация.Ссылка = КонтактныеЛицаПартнеров.Владелец
		|УсловиеПоискаПартнерыКЛ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Партнеры.Ссылка,
		|	КонтактныеЛицаПартнеров.Ссылка,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
		|УсловиеПоискаПартнеры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец КАК Партнер,
		|	ИСТИНА КАК КонтактНайден,
		|	ЛОЖЬ КАК КлиентНайден
		|ПОМЕСТИТЬ тмпКонтакты
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|УсловиеПоискаКЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
		|	ЛОЖЬ КАК КлиентНайден,
		|	ИСТИНА КАК КонтактНайден,
		|	""Потенциальный клиент"" КАК Партнер
		|ПОМЕСТИТЬ тмпПотенциальныеКлиенты
		|ИЗ
		|	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК CRM_ПотенциальныеКлиентыКонтактнаяИнформация
		|ГДЕ
		|	НЕ CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка.Партнер В
		|				(ВЫБРАТЬ
		|					тмпПартнеры.Партнер КАК Партнер
		|				ИЗ
		|					тмпПартнеры КАК тмпПартнеры)
		|	И CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка.Партнер = Значение(Справочник.Партнеры.ПустаяСсылка)
		|	И НЕ CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка.Партнер В
		|				(ВЫБРАТЬ
		|					тмпКонтакты.Партнер КАК Партнер
		|				ИЗ
		|					тмпКонтакты КАК тмпКонтакты)
		|УсловиеПоискаПотенциальные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Партнер КАК Партнер,
		|	ВложенныйЗапрос.КонтактноеЛицо КАК КонтактноеЛицо,
		|	МАКСИМУМ(ВложенныйЗапрос.КлиентНайден) КАК КлиентНайден,
		|	МАКСИМУМ(ВложенныйЗапрос.КонтактНайден) КАК КонтактНайден
		|ПОМЕСТИТЬ тмпПартнерыСводная
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		тмпПартнеры.Партнер КАК Партнер,
		|		тмпПартнеры.КонтактноеЛицо КАК КонтактноеЛицо,
		|		тмпПартнеры.КлиентНайден КАК КлиентНайден,
		|		тмпПартнеры.КонтактНайден КАК КонтактНайден
		|	ИЗ
		|		тмпПартнеры КАК тмпПартнеры
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		тмпКонтакты.Партнер,
		|		тмпКонтакты.КонтактноеЛицо,
		|		тмпКонтакты.КлиентНайден,
		|		тмпКонтакты.КонтактНайден
		|	ИЗ
		|		тмпКонтакты КАК тмпКонтакты) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Партнер,
		|	ВложенныйЗапрос.КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тмпПартнерыСводная.Партнер КАК Партнер,
		|	тмпПартнерыСводная.КонтактноеЛицо КАК КонтактноеЛицо,
		|	тмпПартнерыСводная.КлиентНайден КАК КлиентНайден,
		|	тмпПартнерыСводная.КонтактНайден КАК КонтактНайден
		|ПОМЕСТИТЬ тмпИнтересыПартнеров
		|ИЗ
		|	тмпПартнерыСводная КАК тмпПартнерыСводная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тмпПотенциальныеКлиенты.КонтактноеЛицо КАК КонтактноеЛицо,
		|	тмпПотенциальныеКлиенты.КлиентНайден КАК КлиентНайден,
		|	тмпПотенциальныеКлиенты.КонтактНайден КАК КонтактНайден,
		|	тмпПотенциальныеКлиенты.Партнер КАК Партнер
		|ПОМЕСТИТЬ тмпИнтересыПотенциальныхКлиентов
		|ИЗ
		|	тмпПотенциальныеКлиенты КАК тмпПотенциальныеКлиенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тмпИнтересыПартнеров.Партнер КАК Партнер,
		|	тмпИнтересыПартнеров.КонтактноеЛицо КАК КонтактноеЛицо,
		|	тмпИнтересыПартнеров.КлиентНайден КАК КлиентНайден,
		|	тмпИнтересыПартнеров.КонтактНайден КАК КонтактНайден,
		|	ПРЕДСТАВЛЕНИЕ(тмпИнтересыПартнеров.Партнер) КАК ПредставлениеКлиента,
		|	тмпИнтересыПартнеров.КонтактноеЛицо.Наименование + ВЫБОР
		|		КОГДА тмпИнтересыПартнеров.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
		|			ТОГДА "" (уволен)""
		|		КОГДА тмпИнтересыПартнеров.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
		|			ТОГДА "" (временно не работает)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПредставлениеКонтакта
		|ПОМЕСТИТЬ тмпИтоговая
		|ИЗ
		|	тмпИнтересыПартнеров КАК тмпИнтересыПартнеров
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	тмпИнтересыПотенциальныхКлиентов.Партнер,
		|	тмпИнтересыПотенциальныхКлиентов.КонтактноеЛицо,
		|	тмпИнтересыПотенциальныхКлиентов.КлиентНайден,
		|	тмпИнтересыПотенциальныхКлиентов.КонтактНайден,
		|	ПРЕДСТАВЛЕНИЕ(тмпИнтересыПотенциальныхКлиентов.Партнер) КАК ПредставлениеКлиента,
		|	ПРЕДСТАВЛЕНИЕ(тмпИнтересыПотенциальныхКлиентов.КонтактноеЛицо) КАК ПредставлениеКонтакта
		|ИЗ
		|	тмпИнтересыПотенциальныхКлиентов КАК тмпИнтересыПотенциальныхКлиентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тмпИтоговая.Партнер КАК Клиент,
		|	тмпИтоговая.КонтактноеЛицо КАК Контакт,
		|	МАКСИМУМ(тмпИтоговая.КлиентНайден) КАК КлиентНайден,
		|	МАКСИМУМ(тмпИтоговая.КонтактНайден) КАК КонтактНайден,
		|	тмпИтоговая.ПредставлениеКлиента КАК ПредставлениеКлиента,
		|	тмпИтоговая.ПредставлениеКонтакта КАК ПредставлениеКонтакта,
		|	тмпИтоговая.Партнер.ОсновнойМенеджер КАК ОсновнойМенеджер,
		|	тмпИтоговая.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен) КАК КонтактУволен
		|ИЗ
		|	тмпИтоговая КАК тмпИтоговая
		//|ГДЕ
		//|	НЕ тмпИтоговая.КонтактноеЛицо = Значение(Справочник.КонтактныеЛицаПартнеров.Пустаяссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	тмпИтоговая.Партнер,
		|	тмпИтоговая.КонтактноеЛицо,
		|	тмпИтоговая.ПредставлениеКлиента,
		|	тмпИтоговая.ПредставлениеКонтакта,
		|	тмпИтоговая.Партнер.ОсновнойМенеджер,
		|	тмпИтоговая.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредставлениеКлиента,
		|	ПредставлениеКонтакта";
		
		УсловиеПоиска = "";
		УсловиеПоискаНаименование = "ПартнерыКонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &СтрокаПоиска ИЛИ ПартнерыКонтактнаяИнформация.Ссылка.НаименованиеПолное ПОДОБНО &СтрокаПоиска";
		УсловиеПоискаИНН = "ПартнерыКонтактнаяИнформация.Ссылка.CRM_ИНН ПОДОБНО &СтрокаПоиска";
		УсловиеПоискаКИ = "ПартнерыКонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска	ИЛИ ПартнерыКонтактнаяИнформация.НомерТелефона ПОДОБНО &СтрокаПоиска";
		
		Если ПоляПоиска[0].Пометка Тогда
			УсловиеПоиска = "ГДЕ ("+УсловиеПоискаНаименование;	
		КонецЕсли;	
		Если ПоляПоиска[1].Пометка Тогда
			Если НЕ ЭтоCRM Тогда
				Если НЕ CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники", "Партнеры") Тогда // Для УНФ
					// дописать при внедрении в УНФ
					
				Иначе  // ERP, КА, УТ
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация", 
					"Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
			        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			        |		ПО Контрагенты.Партнер = ПартнерыКонтактнаяИнформация.Ссылка");
					УсловиеПоискаИНН = "Контрагенты.ИНН ПОДОБНО &СтрокаПоиска";
				КонецЕсли;
			КонецЕсли;
			УсловиеПоиска = ?(УсловиеПоиска = "", "ГДЕ ("+УсловиеПоискаИНН, УсловиеПоиска+" ИЛИ "+УсловиеПоискаИНН);	
		КонецЕсли;
		Если ПоляПоиска[2].Пометка Тогда
			УсловиеПоиска = ?(УсловиеПоиска = "", "ГДЕ ("+УсловиеПоискаКИ, УсловиеПоиска+" ИЛИ "+УсловиеПоискаКИ);	
		КонецЕсли;
		УсловиеПоиска = ?(УсловиеПоиска = "", "ГДЕ Ложь", УсловиеПоиска+")");	
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловиеПоискаПартнерыКЛ", УсловиеПоиска);
		
		УсловиеПоиска = "ГДЕ НЕ Партнеры.ЭтоГруппа";
		УсловиеПоискаНаименование = "Партнеры.Наименование ПОДОБНО &СтрокаПоиска";
		УсловиеПоискаИНН = "Партнеры.CRM_ИНН ПОДОБНО &СтрокаПоиска";
		Если ПоляПоиска[0].Пометка Тогда
			УсловиеПоиска = УсловиеПоиска + " И ("+УсловиеПоискаНаименование;	
		КонецЕсли;	
		Если ПоляПоиска[1].Пометка Тогда
			Если НЕ ЭтоCRM Тогда
				Если НЕ CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники", "Партнеры") Тогда // Для УНФ
					// дописать при внедрении в УНФ
					
				Иначе  // ERP, КА, УТ
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Партнеры КАК Партнеры", 
					"Справочник.Партнеры КАК Партнеры
			        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			        |		ПО Контрагенты.Партнер = Партнеры.Ссылка");
					УсловиеПоискаИНН = "Контрагенты.ИНН ПОДОБНО &СтрокаПоиска";
				КонецЕсли;
			КонецЕсли;
			УсловиеПоиска = ?(НЕ ПоляПоиска[0].Пометка, " И ("+УсловиеПоискаИНН, УсловиеПоиска+" ИЛИ "+УсловиеПоискаИНН);	
		КонецЕсли;
		
		Если УсловиеПоиска = "ГДЕ НЕ Партнеры.ЭтоГруппа" Тогда
			УсловиеПоиска = "ГДЕ Ложь";
		Иначе
			Если ЭтоCRM Тогда
				УсловиеПоиска = УсловиеПоиска+")";			
			Иначе
				УсловиеПоиска = СтрЗаменить(УсловиеПоиска, "ГДЕ НЕ Партнеры.ЭтоГруппа", "ГДЕ Истина") +")";	
			КонецЕсли;			
		КонецЕсли;	
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловиеПоискаПартнеры", УсловиеПоиска);

		УсловиеПоиска = "";
		УсловиеПоискаНаименование = "КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &СтрокаПоиска";
		УсловиеПоискаКИ = "КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона ПОДОБНО &СтрокаПоиска";
		Если ПоляПоиска[3].Пометка Тогда
			УсловиеПоиска = "ГДЕ ("+УсловиеПоискаНаименование;	
		КонецЕсли;	
		Если ПоляПоиска[4].Пометка Тогда
			УсловиеПоиска = ?(УсловиеПоиска = "", "ГДЕ ("+УсловиеПоискаКИ, УсловиеПоиска+" ИЛИ "+УсловиеПоискаКИ);	
		КонецЕсли;
		УсловиеПоиска = ?(УсловиеПоиска = "", "ГДЕ Ложь", УсловиеПоиска+")");	
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловиеПоискаКЛ", УсловиеПоиска);
		
		УсловиеПоиска = "";
		УсловиеПоискаНаименование = "CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &СтрокаПоиска";
		УсловиеПоискаКИ = "CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска	ИЛИ CRM_ПотенциальныеКлиентыКонтактнаяИнформация.НомерТелефона ПОДОБНО &СтрокаПоиска";
		Если ПоляПоиска[5].Пометка Тогда
			УсловиеПоиска = "("+УсловиеПоискаНаименование;	
		КонецЕсли;	
		Если ПоляПоиска[6].Пометка Тогда
			УсловиеПоиска = ?(УсловиеПоиска = "", "("+УсловиеПоискаКИ, УсловиеПоиска+" ИЛИ "+УсловиеПоискаКИ);	
		КонецЕсли;
		УсловиеПоиска = ?(УсловиеПоиска = "", "Ложь", УсловиеПоиска+")");	
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловиеПоискаПотенциальные", " И "+УсловиеПоиска);
		
		Запрос.УстановитьПараметр("СтрокаПоиска", "%"+СтрокаПоиска+"%");
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		ТаблицаРезультат.Сортировать("ПредставлениеКлиента Возр, ПредставлениеКонтакта Возр");
		Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл
			Если ТипЗнч(СтрокаТЗ.Клиент) = Тип("СправочникСсылка.Партнеры") И СтрокаТЗ.Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				СтрокаТЗ.ПредставлениеКлиента = СтрокаТЗ.ПредставлениеКлиента + " (физ.лицо)";
			КонецЕсли;	
		КонецЦикла;
		
		РезультатыПоиска.Загрузить(ТаблицаРезультат);
		
	КонецЕсли;
	Элементы.СоздатьНовогоКлиента.Видимость = РезультатыПоиска.Количество() > 0 И Элементы.СтрокаПоиска.Доступность;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПолейПоискаЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ПоляПоиска = Результат;
		ВыполнитьПоиск();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьОписаниеСтрокиНайденного(Клиент, Контакт)
	УстановитьПривилегированныйРежим(Истина);
	//00A0F2 - голубой
	Описание = "";
	Если ЗначениеЗаполнено(Клиент) И ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Клиент);
		Описание = "<table width=""100%"" border=""0"" cellspacing=""2"">
		|<td width=""50%"" valign=""top"" style=""border-right: 1px solid"">
		|<font style=""font-size:14px;"" face=""MS Sans Serif""><a href=" + НавигационнаяСсылка + "><B>"+СокрЛП(Клиент.Наименование)+"</B></a></font>
		|<br>
		|<font style=""font-size:12px;"" face=""MS Sans Serif"">Публ. наименование: </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Клиент.НаименованиеПолное)+"</font>
		|<br>
		|";
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ЗначениеЗаполнено(Клиент["CRM_ИНН"]) Тогда
			Описание = Описание + "<font style=""font-size:12px;"" face=""MS Sans Serif"">ИНН: </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Клиент.CRM_ИНН)+"  </font><font style=""font-size:12px;"" face=""MS Sans Serif"">КПП: </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Клиент.CRM_КПП)+"</font>
			|<br>
			|";
		КонецЕсли;	
		//Если ЗначениеЗаполнено(Клиент.CRM_КПП) Тогда
		//	Описание = Описание + "<font style=""font-size:12px;"" face=""MS Sans Serif"">КПП: </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Клиент.CRM_КПП)+"</font>
		//	|<br>
		//	|";
		//КонецЕсли;
		Если ЗначениеЗаполнено(Клиент.ОсновнойМенеджер) Тогда
			Описание = Описание + "<font style=""font-size:12px;"" face=""MS Sans Serif"">Ответственный: </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Клиент.ОсновнойМенеджер)+"</font>
			|<br>
			|";
		КонецЕсли;
		//Если ЗначениеЗаполнено(Клиент.CRM_ДатаРегистрацииКомпании) Тогда
		//	Описание = Описание + "<font style=""font-size:12px;"" face=""MS Sans Serif"">Дата регистрации: </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Клиент.CRM_ДатаРегистрацииКомпании)+"</font>
		//	|<br>
		//	|";
		//КонецЕсли;
		
		ОписаниеКонтакты = "";
		Для Каждого Строка из Клиент.КонтактнаяИнформация Цикл
			Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Если ОписаниеКонтакты = "" Тогда
					ОписаниеКонтакты = "</td>
					|<td width=""50%"" valign=""top"" style=""padding-left: 10px"">
					|<font style=""font-size:14px;"" face=""MS Sans Serif""><B>Контакты</B></font>
					|<br>
					|";
				КонецЕсли;	
				ОписаниеКонтакты = ОписаниеКонтакты + "<font style=""font-size:12px;"" face=""MS Sans Serif"">"+СокрЛП(Строка.Вид)+": </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Строка.Представление)+"</font>
				|<br>
				|";	
			КонецЕсли;
		КонецЦикла;	
		Если ЗначениеЗаполнено(ОписаниеКонтакты) Тогда
			Описание = Описание + ОписаниеКонтакты;
		КонецЕсли;	
		Описание = Описание + "</td>
		|</table>
		|";
	КонецЕсли;
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Контакт);
		Описание = "<table width=""100%"" border=""0"" cellspacing=""2"">
		|<td width=""50%"" valign=""top"" style=""border-right: 1px solid"">
		|<font style=""font-size:14px;"" face=""MS Sans Serif""><a href=" + НавигационнаяСсылка + "><B>"+СокрЛП(Контакт.Наименование)+"</B></a></font>
		|<br>
		|<font style=""font-size:12px;"" face=""MS Sans Serif"">"+?(ЗначениеЗаполнено(Контакт.Организация),"Компания: ","")+"</font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Контакт.Организация)+"</font>
		|<br>
		|";
		ОписаниеКонтакты = "";
		Для Каждого Строка из Контакт.КонтактнаяИнформация Цикл
			Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Если ОписаниеКонтакты = "" Тогда
					ОписаниеКонтакты = "</td>
					|<td width=""50%"" valign=""top"" style=""padding-left: 10px"">
					|<font style=""font-size:14px;"" face=""MS Sans Serif""><B>Контакты</B></font>
					|<br>
					|";
				КонецЕсли;	
				ОписаниеКонтакты = ОписаниеКонтакты + "<font style=""font-size:12px;"" face=""MS Sans Serif"">"+СокрЛП(Строка.Вид)+": </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Строка.Представление)+"</font>
				|<br>
				|";
			КонецЕсли;	
		КонецЦикла;
		Если ЗначениеЗаполнено(ОписаниеКонтакты) Тогда
			Описание = Описание + ОписаниеКонтакты;
		КонецЕсли;
		Описание = Описание + "</td>
		|</table>
		|";
	КонецЕсли;
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Контакт);
		Описание = Описание + "<table width=""100%"" style=""border-top: 1px solid"" cellspacing=""2"">
		|<td width=""50%"" valign=""top"" style=""border-right: 1px solid"">
		|<font style=""font-size:14px;"" face=""MS Sans Serif""><a href=" + НавигационнаяСсылка + "><B>"+СокрЛП(Контакт.Наименование)+"</B></a></font>
		|<br>
		|<font style=""font-size:12px;"" face=""MS Sans Serif"">Состояние: </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Контакт.CRM_Состояние)+"</font>
		|<br>
		|";
		ОписаниеКонтакты = "";
		Для Каждого Строка из Контакт.КонтактнаяИнформация Цикл
			Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Если ОписаниеКонтакты = "" Тогда
					ОписаниеКонтакты = "</td>
					|<td width=""50%"" valign=""top"" style=""padding-left: 10px"">
					|<font style=""font-size:14px;"" face=""MS Sans Serif""><B>Контакты</B></font>
					|<br>
					|";
				КонецЕсли;	
				ОписаниеКонтакты = ОписаниеКонтакты + "<font style=""font-size:12px;"" face=""MS Sans Serif"">"+СокрЛП(Строка.Вид)+": </font><font style=""font-size:12px;color:#00A0F2;"" face=""MS Sans Serif"">"+СокрЛП(Строка.Представление)+"</font>
				|<br>
				|";
			КонецЕсли;	
		КонецЦикла;
		Если ЗначениеЗаполнено(ОписаниеКонтакты) Тогда
			Описание = Описание + ОписаниеКонтакты;
		КонецЕсли;
		Описание = Описание + "</td>
		|</table>
		|";
	КонецЕсли;	
	Описание =
	"<html>
	|<head>
	|
	|<style type=""text/css"">
	|	a {text-decoration:none;
	|	color: #000000;}
	|</style>
	|
	|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
	|<title></title>
	|</head>
	|<body>
	|" + Описание + "
	|</body>
	|</html>";
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Описание;
КонецФункции	

&НаСервере
Функция ПроверитьОбязательностьПричиныОтказа()
	Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Возврат Обращение.УчетнаяЗапись.CRM_УказыватьПричинуОтклонения;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Возврат Обращение.УчетнаяЗапись.CRM_УказыватьПричинуОтклонения;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		Возврат Обращение.ИсточникПолучения.CRM_УказыватьПричинуОтклонения;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат Константы.CRM_ОбязательноУказыватьПричинуПотериЗвонков.Получить();	
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьТипыУслуг = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг");
	
	ПоляПоиска.Добавить("Партнеры", "Наименование клиентов", Истина);
	ПоляПоиска.Добавить("ПартнерыИНН", "ИНН клиентов", Истина);
	ПоляПоиска.Добавить("ПартнерыКИ", "Контактная информация клиентов", Истина);
	ПоляПоиска.Добавить("КонтактныеЛица", "ФИО контактных лиц", Истина);
	ПоляПоиска.Добавить("КонтактныеЛицаКИ", "Контактная информация контактных лиц", Истина);
	ПоляПоиска.Добавить("ПотенциальныеКлиенты", "Наименование потенциальных клиентов", Истина);
	ПоляПоиска.Добавить("ПотенциальныеКлиентыКИ", "Контактная информация потенциальных клиентов", Истина);
	МассивКлиентов = Новый Массив;
	МассивКлиентов.Добавить(Неопределено);
	МассивКонтактов = Новый Массив;
	МассивКонтактов.Добавить(Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКонтактов", МассивКонтактов, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКлиентов", МассивКлиентов, Истина);
	Если Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить() Тогда
		Элементы.Канал.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Элементы.Источник.АвтоОтметкаНезаполненного	= Ложь;
	Элементы.Источник.ОтметкаНезаполненного		= Ложь;
	ВыполнятьПоиск = Ложь;
	Элементы.ГруппаКлиент.Видимость = Ложь;
	//Элементы.СценарийПродажи.Видимость = Ложь;
	Элементы.ГруппаКонтакт.Видимость = Ложь;
	Элементы.ГруппаФИО.Видимость = Истина;
	Элементы.ИДАккаунта.Видимость = ЗначениеЗаполнено(ИДАккаунта);
	
	
	
	ИнтересОбъект = Неопределено;
	ЭтотОбъект.Заголовок = "Принятие обращения";
	ДоступныКарты = Истина;
	ДоступноОбращение = Истина;
	Если Параметры.Свойство("ПисьмоВходящее") Тогда
		
		Обращение = Параметры.ПисьмоВходящее;
		ФИО = Параметры.ПисьмоВходящее.ОтправительПредставление;
		ПочтаКэш = Параметры.ПисьмоВходящее.ОтправительАдрес;
		СтрокаПоиска = ПочтаКэш;
		ВыполнятьПоиск = Истина;
		Тема = Параметры.ПисьмоВходящее.Тема;
	ИначеЕсли Параметры.Свойство("Телемаркетинг") Тогда
		Обращение = Параметры.Телемаркетинг;
		Если Параметры.ЗначенияЗаполнения.Свойство("КонтактноеЛицо") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.КонтактноеЛицо) Тогда
			ЗАполнитьРеквизитыИнтересаПоПоиску();
			Элементы.ГруппаКлиент.Видимость = Ложь;
			//Элементы.СценарийПродажи.Видимость = Ложь;
			Элементы.ГруппаКонтакт.Видимость = Ложь;
			Элементы.ГруппаФИО.Видимость = Истина;
			Элементы.ИДАккаунта.Видимость = ЗначениеЗаполнено(ИДАккаунта);
			
			Клиент = Параметры.ЗначенияЗаполнения.КонтактноеЛицо.Владелец;	
			Контакт = Параметры.ЗначенияЗаполнения.КонтактноеЛицо;	
			СтрокаПоиска = Клиент.НаименованиеПолное;
			Элементы.СтрокаПоиска.Доступность = Ложь;
			ВыполнятьПоиск = Ложь;
			Для каждого ЭлементСписка из ПоляПоиска Цикл
				Если ЭлементСписка.Значение <> "Партнеры" Тогда
					ЭлементСписка.Пометка = Ложь;
				КонецЕсли;	
			КонецЦикла;	       
			УстановитьПривилегированныйРежим(Истина);
			РезультатыПоиска.Очистить();
			Описание = "";
			ТекИндексСтроки = -10;  // сбросим индекс.
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.Ссылка КАК Партнер,
			|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
			|	ИСТИНА КАК КлиентНайден,
			|	ЛОЖЬ КАК КонтактНайден
			|ПОМЕСТИТЬ тмпПартнеры
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
			|ГДЕ
			|	Партнеры.Ссылка = &Клиент
			|	И КонтактныеЛицаПартнеров.Ссылка = &Контакт
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Партнер КАК Партнер,
			|	ВложенныйЗапрос.КонтактноеЛицо КАК КонтактноеЛицо,
			|	МАКСИМУМ(ВложенныйЗапрос.КлиентНайден) КАК КлиентНайден,
			|	МАКСИМУМ(ВложенныйЗапрос.КонтактНайден) КАК КонтактНайден
			|ПОМЕСТИТЬ тмпПартнерыСводная
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		тмпПартнеры.Партнер КАК Партнер,
			|		тмпПартнеры.КонтактноеЛицо КАК КонтактноеЛицо,
			|		тмпПартнеры.КлиентНайден КАК КлиентНайден,
			|		тмпПартнеры.КонтактНайден КАК КонтактНайден
			|	ИЗ
			|		тмпПартнеры КАК тмпПартнеры) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Партнер,
			|	ВложенныйЗапрос.КонтактноеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	тмпПартнерыСводная.Партнер КАК Партнер,
			|	тмпПартнерыСводная.КонтактноеЛицо КАК КонтактноеЛицо,
			|	тмпПартнерыСводная.КлиентНайден КАК КлиентНайден,
			|	тмпПартнерыСводная.КонтактНайден КАК КонтактНайден
			|ПОМЕСТИТЬ тмпИнтересыПартнеров
			|ИЗ
			|	тмпПартнерыСводная КАК тмпПартнерыСводная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	тмпИнтересыПартнеров.Партнер КАК Партнер,
			|	тмпИнтересыПартнеров.КонтактноеЛицо КАК КонтактноеЛицо,
			|	тмпИнтересыПартнеров.КлиентНайден КАК КлиентНайден,
			|	тмпИнтересыПартнеров.КонтактНайден КАК КонтактНайден,
			|	ПРЕДСТАВЛЕНИЕ(тмпИнтересыПартнеров.Партнер) КАК ПредставлениеКлиента,
			|	ПРЕДСТАВЛЕНИЕ(тмпИнтересыПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтакта
			|ПОМЕСТИТЬ тмпИтоговая
			|ИЗ
			|	тмпИнтересыПартнеров КАК тмпИнтересыПартнеров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	тмпИтоговая.Партнер КАК Клиент,
			|	тмпИтоговая.КонтактноеЛицо КАК Контакт,
			|	МАКСИМУМ(тмпИтоговая.КлиентНайден) КАК КлиентНайден,
			|	МАКСИМУМ(тмпИтоговая.КонтактНайден) КАК КонтактНайден,
			|	тмпИтоговая.Партнер.ОсновнойМенеджер КАК ОсновнойМенеджер,
			|	тмпИтоговая.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен) КАК КонтактУволен,
			|	тмпИтоговая.ПредставлениеКлиента КАК ПредставлениеКлиента,
			|	тмпИтоговая.ПредставлениеКонтакта КАК ПредставлениеКонтакта
			|ИЗ
			|	тмпИтоговая КАК тмпИтоговая
			|
			|СГРУППИРОВАТЬ ПО
			|	тмпИтоговая.Партнер,
			|	тмпИтоговая.КонтактноеЛицо,
			|	тмпИтоговая.Партнер.ОсновнойМенеджер,
			|	тмпИтоговая.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен),
			|	тмпИтоговая.ПредставлениеКлиента,
			|	тмпИтоговая.ПредставлениеКонтакта
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПредставлениеКлиента,
			|	ПредставлениеКонтакта";
			Запрос.УстановитьПараметр("Клиент", Клиент);
			Запрос.УстановитьПараметр("Контакт", Контакт);
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
			ТаблицаРезультат.Сортировать("ПредставлениеКлиента Возр, ПредставлениеКонтакта Возр");
			Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл
				Если ТипЗнч(СтрокаТЗ.Клиент) = Тип("СправочникСсылка.Партнеры") И СтрокаТЗ.Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
					СтрокаТЗ.ПредставлениеКлиента = СтрокаТЗ.ПредставлениеКлиента + " (физ.лицо)";
				КонецЕсли;	
			КонецЦикла;
			РезультатыПоиска.Загрузить(ТаблицаРезультат);
			
			НайденКлиент = Истина;
			Если ТаблицаРезультат.Количество() > 0 Тогда
				СтруктураСтроки = ТаблицаРезультат[0];
				ПредставлениеКлиента = СтруктураСтроки.ПредставлениеКлиента;
				ПредставлениеКонтакта = СтруктураСтроки.ПредставлениеКонтакта;
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("Партнер") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Партнер) Тогда
			ЗАполнитьРеквизитыИнтересаПоПоиску();
			Элементы.ГруппаКлиент.Видимость = Ложь;
			//Элементы.СценарийПродажи.Видимость = Ложь;
			Элементы.ГруппаКонтакт.Видимость = Ложь;
			Элементы.ГруппаФИО.Видимость = Истина;
			Элементы.ИДАккаунта.Видимость = ЗначениеЗаполнено(ИДАккаунта);
			
			Клиент = Параметры.ЗначенияЗаполнения.Партнер;	
			СтрокаПоиска = Клиент.НаименованиеПолное;
			Элементы.СтрокаПоиска.Доступность = Ложь;
			ВыполнятьПоиск = Ложь;
			Для каждого ЭлементСписка из ПоляПоиска Цикл
				Если ЭлементСписка.Значение <> "Партнеры" Тогда
					ЭлементСписка.Пометка = Ложь;
				КонецЕсли;	
			КонецЦикла;	       
			УстановитьПривилегированныйРежим(Истина);
			РезультатыПоиска.Очистить();
			Описание = "";
			ТекИндексСтроки = -10;  // сбросим индекс.
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.Ссылка КАК Партнер,
			|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
			|	ИСТИНА КАК КлиентНайден,
			|	ЛОЖЬ КАК КонтактНайден
			|ПОМЕСТИТЬ тмпПартнеры
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
			|ГДЕ
			|	Партнеры.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Партнер КАК Партнер,
			|	ВложенныйЗапрос.КонтактноеЛицо КАК КонтактноеЛицо,
			|	МАКСИМУМ(ВложенныйЗапрос.КлиентНайден) КАК КлиентНайден,
			|	МАКСИМУМ(ВложенныйЗапрос.КонтактНайден) КАК КонтактНайден
			|ПОМЕСТИТЬ тмпПартнерыСводная
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		тмпПартнеры.Партнер КАК Партнер,
			|		тмпПартнеры.КонтактноеЛицо КАК КонтактноеЛицо,
			|		тмпПартнеры.КлиентНайден КАК КлиентНайден,
			|		тмпПартнеры.КонтактНайден КАК КонтактНайден
			|	ИЗ
			|		тмпПартнеры КАК тмпПартнеры) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Партнер,
			|	ВложенныйЗапрос.КонтактноеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	тмпПартнерыСводная.Партнер КАК Партнер,
			|	тмпПартнерыСводная.КонтактноеЛицо КАК КонтактноеЛицо,
			|	тмпПартнерыСводная.КлиентНайден КАК КлиентНайден,
			|	тмпПартнерыСводная.КонтактНайден КАК КонтактНайден
			|ПОМЕСТИТЬ тмпИнтересыПартнеров
			|ИЗ
			|	тмпПартнерыСводная КАК тмпПартнерыСводная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	тмпИнтересыПартнеров.Партнер КАК Партнер,
			|	тмпИнтересыПартнеров.КонтактноеЛицо КАК КонтактноеЛицо,
			|	тмпИнтересыПартнеров.КлиентНайден КАК КлиентНайден,
			|	тмпИнтересыПартнеров.КонтактНайден КАК КонтактНайден,
			|	ПРЕДСТАВЛЕНИЕ(тмпИнтересыПартнеров.Партнер) КАК ПредставлениеКлиента,
			|	тмпИнтересыПартнеров.КонтактноеЛицо.Наименование + ВЫБОР
			|		КОГДА тмпИнтересыПартнеров.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
			|			ТОГДА "" (уволен)""
			|		КОГДА тмпИнтересыПартнеров.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
			|			ТОГДА "" (временно не работает)""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ПредставлениеКонтакта
			|ПОМЕСТИТЬ тмпИтоговая
			|ИЗ
			|	тмпИнтересыПартнеров КАК тмпИнтересыПартнеров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	тмпИтоговая.Партнер КАК Клиент,
			|	тмпИтоговая.КонтактноеЛицо КАК Контакт,
			|	МАКСИМУМ(тмпИтоговая.КлиентНайден) КАК КлиентНайден,
			|	МАКСИМУМ(тмпИтоговая.КонтактНайден) КАК КонтактНайден,
			|	тмпИтоговая.Партнер.ОсновнойМенеджер КАК ОсновнойМенеджер,
			|	тмпИтоговая.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен) КАК КонтактУволен,
			|	тмпИтоговая.ПредставлениеКлиента КАК ПредставлениеКлиента,
			|	тмпИтоговая.ПредставлениеКонтакта КАК ПредставлениеКонтакта
			|ИЗ
			|	тмпИтоговая КАК тмпИтоговая
			//|ГДЕ
			//|	НЕ тмпИтоговая.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.Пустаяссылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	тмпИтоговая.Партнер,
			|	тмпИтоговая.КонтактноеЛицо,
			|	тмпИтоговая.Партнер.ОсновнойМенеджер,
			|	тмпИтоговая.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен),
			|	тмпИтоговая.ПредставлениеКлиента,
			|	тмпИтоговая.ПредставлениеКонтакта
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПредставлениеКлиента,
			|	ПредставлениеКонтакта";
			Запрос.УстановитьПараметр("Ссылка", Клиент);
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
			ТаблицаРезультат.Сортировать("ПредставлениеКлиента Возр, ПредставлениеКонтакта Возр");
			Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл
				Если ТипЗнч(СтрокаТЗ.Клиент) = Тип("СправочникСсылка.Партнеры") И СтрокаТЗ.Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
					СтрокаТЗ.ПредставлениеКлиента = СтрокаТЗ.ПредставлениеКлиента + " (физ.лицо)";
				КонецЕсли;	
			КонецЦикла;
			РезультатыПоиска.Загрузить(ТаблицаРезультат);
			
			НайденКлиент = Истина;
			Если ТаблицаРезультат.Количество() > 0 Тогда
				СтруктураСтроки = ТаблицаРезультат[0];
				ПредставлениеКлиента = СтруктураСтроки.ПредставлениеКлиента;
				ПредставлениеКонтакта = СтруктураСтроки.ПредставлениеКонтакта;
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("Телефон") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Телефон) Тогда
			ТелефонКэш = Параметры.ЗначенияЗаполнения.Телефон;
			СтрокаПоиска =  ТелефонКэш;
			Если Параметры.ЗначенияЗаполнения.Свойство("КлиентСтрокой") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.КлиентСтрокой) Тогда
				ФИОКэш = Параметры.ЗначенияЗаполнения.КлиентСтрокой;
			КонецЕсли;
			ВыполнятьПоиск = Истина;
		ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("КлиентСтрокой") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.КлиентСтрокой) Тогда
			ФИОКэш = Параметры.ЗначенияЗаполнения.КлиентСтрокой;
			СтрокаПоиска = ФИОКэш;
			ВыполнятьПоиск = Истина;
		КонецЕсли;	
			
	ИначеЕсли Параметры.Свойство("СообщениеМессенджера") Тогда
		
		Обращение = Параметры.СообщениеМессенджера;
		ФИОКэш = Обращение.КонтактПредставление;
		ИДАккаунтаКэш = CRM_РаботаСМессенджерамиСерверПовтИсп.НачалоАдресаСтраницыПользователя(Обращение.УчетнаяЗапись) + Обращение.ID_Пользователя;
		
		Если ЗначениеЗаполнено(ИДАккаунтаКэш) Тогда
			СтрокаПоиска = ИДАккаунтаКэш;	
		ИначеЕсли ЗначениеЗаполнено(ФИОКэш) Тогда
			СтрокаПоиска = ФИОКэш;	
		КонецЕсли;	
		
		ВыполнятьПоиск = Истина;
	ИначеЕсли Параметры.Свойство("Заявка") Тогда
		
		Обращение = Параметры.Заявка;
		Тема = Обращение.Тема;
		ОрганизацияКэш = Обращение.Организация;
		ФИОКэш = Обращение.Наименование;
		ТелефонКэш	=  Обращение.Телефон;
		ПочтаКэш	=  Обращение.ЭлектроннаяПочта;
		Канал = Обращение.КаналПервичногоИнтереса;
		Источник = Обращение.ИсточникПервичногоИнтереса;

		Если ЗначениеЗаполнено(ТелефонКэш) Тогда
			СтрокаПоиска = ТелефонКэш;
		ИначеЕсли ЗначениеЗаполнено(ПочтаКэш) Тогда
			СтрокаПоиска = ПочтаКэш;
		ИначеЕсли ЗначениеЗаполнено(ФИОКэш) Тогда
			СтрокаПоиска = ФИОКэш;
		ИначеЕсли ЗначениеЗаполнено(ОрганизацияКэш) Тогда
			СтрокаПоиска = ОрганизацияКэш;	
		КонецЕсли;	
		ВыполнятьПоиск = Истина;	
		
		
		// +СофтФон	
	ИначеЕсли Параметры.Свойство("ТелефонныйЗвонок") Тогда
		
		Обращение = Параметры.ТелефонныйЗвонок;
		ТелефонКэш = Параметры.НомерТелефона;
		ФИОКэш = Параметры.ТелефонныйЗвонок.АбонентПредставление;
		Фио = ФИОКэш;
		СтрокаПоиска					=  Параметры.НомерТелефона;
		Если НЕ Обращение.Пустая() Тогда
			Если ЗначениеЗаполнено(Обращение.АбонентКонтакт) Тогда
				Если ТипЗнч(Обращение.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Контакт = Обращение.АбонентКонтакт;
					Клиент = Обращение.АбонентКонтакт.Владелец;
					СтрокаПоиска = Контакт.Наименование;
					ВыполнятьПоиск = Истина;
				ИначеЕсли ТипЗнч(Обращение.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Клиент = Обращение.АбонентКонтакт;
					СтрокаПоиска = Клиент.Наименование;
					ВыполнятьПоиск = Истина;
				ИначеЕсли ТипЗнч(Обращение.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
					ПотенциальныйКлиент = Обращение.АбонентКонтакт;	
					СтрокаПоиска = ПотенциальныйКлиент.Наименование;
					ВыполнятьПоиск = Истина;
				КонецЕсли;	
			КонецЕсли;
		
		КонецЕсли;	
		ВыполнятьПоиск = Истина;
		// -СофтФон	
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		
	ИначеЕсли Параметры.Свойство("Партнер") И ЗначениеЗаполнено(Параметры.Партнер)  Тогда
		ДоступныКарты = Ложь;
		ДоступноОбращение = Ложь;
		ЭтотОбъект.Заголовок = "Интерес (новый)";
		Элементы.ГруппаСвязатьСИнтересом.Видимость = Ложь;
		ЗАполнитьРеквизитыИнтересаПоПоиску();
		Элементы.ГруппаКлиент.Видимость = Ложь;
		//Элементы.СценарийПродажи.Видимость = Ложь;
		Элементы.ГруппаКонтакт.Видимость = Ложь;
		Элементы.ГруппаФИО.Видимость = Истина;
		Элементы.ИДАккаунта.Видимость = ЗначениеЗаполнено(ИДАккаунта);

		Клиент = Параметры.Партнер;	
		СтрокаПоиска = Клиент.НаименованиеПолное;
		Элементы.СтрокаПоиска.Доступность = Ложь;
		ВыполнятьПоиск = Ложь;
		Для каждого ЭлементСписка из ПоляПоиска Цикл
			Если ЭлементСписка.Значение <> "Партнеры" Тогда
				ЭлементСписка.Пометка = Ложь;
			КонецЕсли;	
		КонецЦикла;	       
		УстановитьПривилегированныйРежим(Истина);
		РезультатыПоиска.Очистить();
		Описание = "";
		ТекИндексСтроки = -10;  // сбросим индекс.

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Партнер,
		|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
		|	ИСТИНА КАК КлиентНайден,
		|	ЛОЖЬ КАК КонтактНайден
		|ПОМЕСТИТЬ тмпПартнеры
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
		|ГДЕ
		|	Партнеры.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Партнер КАК Партнер,
		|	ВложенныйЗапрос.КонтактноеЛицо КАК КонтактноеЛицо,
		|	МАКСИМУМ(ВложенныйЗапрос.КлиентНайден) КАК КлиентНайден,
		|	МАКСИМУМ(ВложенныйЗапрос.КонтактНайден) КАК КонтактНайден
		|ПОМЕСТИТЬ тмпПартнерыСводная
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		тмпПартнеры.Партнер КАК Партнер,
		|		тмпПартнеры.КонтактноеЛицо КАК КонтактноеЛицо,
		|		тмпПартнеры.КлиентНайден КАК КлиентНайден,
		|		тмпПартнеры.КонтактНайден КАК КонтактНайден
		|	ИЗ
		|		тмпПартнеры КАК тмпПартнеры) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Партнер,
		|	ВложенныйЗапрос.КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тмпПартнерыСводная.Партнер КАК Партнер,
		|	тмпПартнерыСводная.КонтактноеЛицо КАК КонтактноеЛицо,
		|	тмпПартнерыСводная.КлиентНайден КАК КлиентНайден,
		|	тмпПартнерыСводная.КонтактНайден КАК КонтактНайден
		|ПОМЕСТИТЬ тмпИнтересыПартнеров
		|ИЗ
		|	тмпПартнерыСводная КАК тмпПартнерыСводная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тмпИнтересыПартнеров.Партнер КАК Партнер,
		|	тмпИнтересыПартнеров.КонтактноеЛицо КАК КонтактноеЛицо,
		|	тмпИнтересыПартнеров.КлиентНайден КАК КлиентНайден,
		|	тмпИнтересыПартнеров.КонтактНайден КАК КонтактНайден,
		|	ПРЕДСТАВЛЕНИЕ(тмпИнтересыПартнеров.Партнер) КАК ПредставлениеКлиента,
		|	тмпИнтересыПартнеров.КонтактноеЛицо.Наименование + ВЫБОР
		|		КОГДА тмпИнтересыПартнеров.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
		|			ТОГДА "" (уволен)""
		|		КОГДА тмпИнтересыПартнеров.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
		|			ТОГДА "" (временно не работает)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПредставлениеКонтакта
		|ПОМЕСТИТЬ тмпИтоговая
		|ИЗ
		|	тмпИнтересыПартнеров КАК тмпИнтересыПартнеров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тмпИтоговая.Партнер КАК Клиент,
		|	тмпИтоговая.КонтактноеЛицо КАК Контакт,
		|	МАКСИМУМ(тмпИтоговая.КлиентНайден) КАК КлиентНайден,
		|	МАКСИМУМ(тмпИтоговая.КонтактНайден) КАК КонтактНайден,
		|	тмпИтоговая.Партнер.ОсновнойМенеджер КАК ОсновнойМенеджер,
		|	тмпИтоговая.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен) КАК КонтактУволен,
		|	тмпИтоговая.ПредставлениеКлиента КАК ПредставлениеКлиента,
		|	тмпИтоговая.ПредставлениеКонтакта КАК ПредставлениеКонтакта
		|ИЗ
		|	тмпИтоговая КАК тмпИтоговая
		//|ГДЕ
		//|	НЕ тмпИтоговая.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.Пустаяссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	тмпИтоговая.Партнер,
		|	тмпИтоговая.КонтактноеЛицо,
		|	тмпИтоговая.Партнер.ОсновнойМенеджер,
		|	тмпИтоговая.КонтактноеЛицо.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен),
		|	тмпИтоговая.ПредставлениеКлиента,
		|	тмпИтоговая.ПредставлениеКонтакта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредставлениеКлиента,
		|	ПредставлениеКонтакта";
		Запрос.УстановитьПараметр("Ссылка", Клиент);
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		ТаблицаРезультат.Сортировать("ПредставлениеКлиента Возр, ПредставлениеКонтакта Возр");
		Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл
			Если ТипЗнч(СтрокаТЗ.Клиент) = Тип("СправочникСсылка.Партнеры") И СтрокаТЗ.Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				СтрокаТЗ.ПредставлениеКлиента = СтрокаТЗ.ПредставлениеКлиента + " (физ.лицо)";
			КонецЕсли;	
		КонецЦикла;
		РезультатыПоиска.Загрузить(ТаблицаРезультат);
		
		НайденКлиент = Истина;
		Если ТаблицаРезультат.Количество() > 0 Тогда
			СтруктураСтроки = ТаблицаРезультат[0];
			ПредставлениеКлиента = СтруктураСтроки.ПредставлениеКлиента;
			ПредставлениеКонтакта = СтруктураСтроки.ПредставлениеКонтакта;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли Параметры.Свойство("Обращение") Тогда	
		
		Обращение = Параметры.Обращение;
	ИначеЕсли Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда	
		УстановитьПривилегированныйРежим(Истина);
		ДоступныКарты = Ложь;
		ДоступноОбращение = Ложь;
		ЭтотОбъект.Заголовок = "Интерес (новый)";
		Элементы.ГруппаСвязатьСИнтересом.Видимость = Ложь;
		Обращение = Параметры.Основание;
		ВыполнятьПоиск = Ложь;
		//Элементы.ГруппаЛеваяКолонка.Видимость = Ложь;
		//Элементы.НайденныеИнтересы.Видимость = Ложь;
		Элементы.СтрокаПоиска.Доступность = Ложь;
		Элементы.ПрикрепитьКВыбранному.Видимость = Ложь;
		ТипУслуги = Обращение.ТипУслуги;
		СценарийПродажи = Обращение.СостояниеИнтереса.Родитель;
		Клиент = Обращение.Партнер;
		Контакт = Обращение.КонтактноеЛицо;
		ПотенциальныйКлиент = Обращение.ПотенциальныйКлиент;
		Ответственный = Обращение.Ответственный;
		ПредставлениеКлиента = Строка(Клиент);
		ПредставлениеКонтакта = Строка(Контакт);
		ТекСтр = РезультатыПоиска.Добавить();
		Если НЕ Клиент.Пустая() Тогда
			ТекСтр.Клиент = Клиент;
			ТекСтр.Контакт = Контакт;
			ТекСтр.ПредставлениеКлиента = ПредставлениеКлиента;
			ТекСтр.ПредставлениеКонтакта = ПредставлениеКонтакта;
			ТекСтр.ОсновнойМенеджер = Ответственный;
			ТекСтр.КлиентНайден = Истина;
			ТекСтр.КонтактНайден = Истина;
		ИначеЕсли НЕ ПотенциальныйКлиент.Пустая() Тогда
			ПредставлениеКлиента = "Потенциальный клиент";
			ПредставлениеКонтакта = Строка(ПотенциальныйКлиент);
			ТекСтр.Контакт = ПотенциальныйКлиент;
			ТекСтр.ПредставлениеКлиента = ПредставлениеКлиента;
			ТекСтр.ПредставлениеКонтакта = ПредставлениеКонтакта;
			ТекСтр.ОсновнойМенеджер = Ответственный;
			ТекСтр.КлиентНайден = Истина;
			ТекСтр.КонтактНайден = Истина;
		КонецЕсли;
		СтруктураСтроки = Новый Структура("Партнер, Контакт, ОсновнойМенеджер, ПредставлениеКлиента, ПредставлениеКонтакта", Клиент, Контакт, Ответственный, ПредставлениеКлиента, ПредставлениеКонтакта);
		ЗАполнитьРеквизитыИнтересаПоПоиску(СтруктураСтроки);
		ЗаполнитьДоступныеТипыУслуг();
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтр.Клиент, ТекСтр.Контакт);
		МассивКлиентов = Новый Массив;
		МассивКлиентов.Добавить(ТекСтр.Клиент);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКонтактов", ПолучитьМассивКонтактовДляОтбора(ТекСтр.Контакт), Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКлиентов", МассивКлиентов, Истина);
		Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
			Элементы.СоздатьНовыйИнтерес.Заголовок = "Запустить бизнес-процесс";
			Элементы.ОткрыватьИнтерес.Видимость = Ложь;
			Элементы.ОткрыватьИнтересОбращение.Видимость = Ложь;
		Иначе
			Элементы.СоздатьНовыйИнтерес.Заголовок = "Создать интерес";
			Элементы.ОткрыватьИнтерес.Видимость = НЕ Ответственный = ТекущийПользователь;
			Элементы.ОткрыватьИнтересОбращение.Видимость =  НЕ Ответственный = ТекущийПользователь;
		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		Элементы.ФИО.Доступность = Ложь;
		Элементы.Компания.Доступность = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("МоиПродажи") Тогда	
		ИзАРМ = Истина;
		//ЭтотОбъект.Заголовок = "Интерес клиента (создание)";
		СценарийПродажи = Параметры.Сценарий;
		Если ИспользоватьТипыУслуг Тогда
			Если СценарийПродажи.ТипыУслуг.Количество() > 0 Тогда
				ТипУслуги = СценарийПродажи.ТипыУслуг[0].ТипУслуги;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("ИзСписка") Тогда	
		ДоступныКарты = Ложь;
		ДоступноОбращение = Ложь;
		ЭтотОбъект.Заголовок = "Интерес (новый)";
		Элементы.ГруппаСвязатьСИнтересом.Видимость = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Обращение) Тогда
		Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			МассивЗаголовка = Новый Массив();
			МассивЗаголовка.Добавить("Письмо: ");
			МассивЗаголовка.Добавить(Новый ФорматированнаяСтрока(Обращение.Тема,Новый Шрифт(,,,,Истина)));
			Элементы.ДекорацияЗаголовокОбращение.Заголовок = Новый ФорматированнаяСтрока(МассивЗаголовка);
			ЭтоЛид = РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Обращение);
		ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			МассивЗаголовка = Новый Массив();
			МассивЗаголовка.Добавить("Сообщение: ");
			МассивЗаголовка.Добавить(Новый ФорматированнаяСтрока(Обращение.ТекстСообщения,Новый Шрифт(,,,,Истина)));
			Элементы.ДекорацияЗаголовокОбращение.Заголовок = Новый ФорматированнаяСтрока(МассивЗаголовка);
			ЭтоЛид = РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Обращение);
		ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			МассивЗаголовка = Новый Массив();
			МассивЗаголовка.Добавить("Заявка: ");
			МассивЗаголовка.Добавить(Новый ФорматированнаяСтрока(Строка(Обращение),Новый Шрифт(,,,,Истина)));
			Элементы.ДекорацияЗаголовокОбращение.Заголовок = Новый ФорматированнаяСтрока(МассивЗаголовка);
			ЭтоЛид = РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Обращение);
		ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			МассивЗаголовка = Новый Массив();
			МассивЗаголовка.Добавить("Телефонный звонок: ");
			МассивЗаголовка.Добавить(Новый ФорматированнаяСтрока(Строка(Обращение),Новый Шрифт(,,,,Истина)));
			Элементы.ДекорацияЗаголовокОбращение.Заголовок = Новый ФорматированнаяСтрока(МассивЗаголовка);
			ЭтоЛид = РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Обращение);
		ИначеЕсли ТипЗнч(Обращение) = Тип("Строка") Тогда
			Если Обращение = "МоиПродажи" Тогда
				ДоступныКарты = Ложь;
				ДоступноОбращение = Ложь;
				ЭтотОбъект.Заголовок = "Интерес (новый)";
				Элементы.ГруппаСвязатьСИнтересом.Видимость = Ложь;
				ИзАРМ = Истина;
				СценарийПродажи = Параметры.Сценарий;
				Если ИспользоватьТипыУслуг Тогда
					Если СценарийПродажи.ТипыУслуг.Количество() > 0 Тогда
						ТипУслуги = СценарийПродажи.ТипыУслуг[0].ТипУслуги;
					КонецЕсли;	
				КонецЕсли;	
			Иначе	
				МассивЗаголовка = Новый Массив();
				МассивЗаголовка.Добавить("Звонок с номера: ");
				МассивЗаголовка.Добавить(Новый ФорматированнаяСтрока(Строка(Обращение),Новый Шрифт(,,,,Истина)));
				Элементы.ДекорацияЗаголовокОбращение.Заголовок = Новый ФорматированнаяСтрока(МассивЗаголовка);	
				ЭтоЛид = Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		МассивЗаголовка = Новый Массив();
		МассивЗаголовка.Добавить("Звонок с номера: ");
		МассивЗаголовка.Добавить(Новый ФорматированнаяСтрока(Строка(ТелефонКэш),Новый Шрифт(,,,,Истина)));
		Элементы.ДекорацияЗаголовокОбращение.Заголовок = Новый ФорматированнаяСтрока(МассивЗаголовка);
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Ложь;
		Элементы.ГруппаКнопкиСофтфона.Видимость = Ложь;
		Ответственный = ТекущийПользователь;
		ЭтоЛид = Истина;	
	КонецЕсли;	
	Элементы.Отклонить.Видимость = ЭтоЛид;
	ЗАполнитьРеквизитыИнтересаПоПоиску();
	
	Если ВыполнятьПоиск Тогда
		ВыполнитьПоиск();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		ПрефиксИнформационнойБазы = МодульОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	Иначе
		ПрефиксИнформационнойБазы = "";
	КонецЕсли;
	ПрефиксИнформационнойБазы = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксИнформационнойБазы, 2, "0", "Слева");
	
	ИмяФункциональнойОпции = "ПрефиксыОрганизаций";
	ИмяПараметраФункциональнойОпции = "Организация";
	ОрганизацияОтветственного = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный, "ОсновнаяОрганизация");
	Если ОрганизацияОтветственного.Пустая() Тогда
		ОрганизацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию()
	КонецЕсли;	
	ПрефиксОрганизации = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции,Новый Структура(ИмяПараметраФункциональнойОпции, ОрганизацияОтветственного));
	Если ПрефиксОрганизации = Ложь Тогда
		
		ПрефиксОрганизации = "";
		
	КонецЕсли;
	ПрефиксОрганизации = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева");
	
	ШаблонПрефикса = "[ОР][ИБ]-";
	ШаблонПрефикса = СтрЗаменить(ШаблонПрефикса, "[ОР]", ПрефиксОрганизации);
	ШаблонПрефикса = СтрЗаменить(ШаблонПрефикса, "[ИБ]", ПрефиксИнформационнойБазы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	CRM_Интерес.Номер КАК Номер
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Интерес.Дата УБЫВ";
	Запрос.УстановитьПараметр("Организация", ОрганизацияОтветственного);
	Выборка = Запрос.Выполнить().Выбрать();
	Попытка
		Если Выборка.Следующий() Тогда
			НомерСтрокой = Выборка.Номер;
			НомерСтрокой = СтрЗаменить(НомерСтрокой, ШаблонПрефикса, ""); 
			НомерЧислом = Число(НомерСтрокой) + 1;
		Иначе
			НомерЧислом = 1;
		КонецЕсли;	
		ДлинаНомера = Метаданные.Документы.CRM_Интерес.ДлинаНомера - 5;
		НомерДляТемы = ШаблонПрефикса + Формат(НомерЧислом, "ЧЦ="+ДлинаНомера+"; ЧВН=; ЧГ=");
		Элементы.Тема.ПодсказкаВвода = "#"+НомерДляТемы;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура сфпУдержатьЗвонок(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(Обращение);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ сфпУдержаниеЗвонка Тогда
		Элементы.сфпУдержатьЗвонок.Картинка	= БиблиотекаКартинок.сфпОтветитьПанель;
	Иначе		
		Элементы.сфпУдержатьЗвонок.Картинка	= БиблиотекаКартинок.сфпУдержаниеПанель;
	КонецЕсли;			
	сфпПанельУправления.HoldCall(НайденныйЗвонок.LineName, НайденныйЗвонок.hCall);
	сфпУдержаниеЗвонка = НЕ сфпУдержаниеЗвонка;
КонецПроцедуры

&НаКлиенте
Процедура сфпПереводЗвонка(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(Обращение);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
		СтруктураКонтакта = Новый Структура;
		СтруктураКонтакта.Вставить("НомерТелефона", сфпНомерПеревода);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("LineName", НайденныйЗвонок.LineName);
		ДополнительныеПараметры.Вставить("hCall", hCall);
		сфпВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры);		
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция сфпПолучитьИдентификаторЗвонка(ТелефЗвонок)
	Если ТелефЗвонок = Неопределено ИЛИ ТипЗнч(ТелефЗвонок) <> Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтрЗаменить(ТелефЗвонок.сфпИдентификаторЗвонка, Символы.НПП, ""); 
КонецФункции	

&НаКлиенте
// Процедура - обработчик оповещения переключения звонка
//
// Параметры:
//	СтруктураКонтакта		- Структура	- Структура, содержащая данные звонка
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура сфпВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры)
	Если СтруктураКонтакта = Неопределено Тогда Возврат; КонецЕсли;
	ПолеВводаНомера = СтруктураКонтакта.НомерТелефона;
	сфпИдентификаторПереводимогоЗвонка = ДополнительныеПараметры.hCall;
	ИмяЛинии = ДополнительныеПараметры.LineName; 
	сфпПанельУправления.StartTransferCall(ИмяЛинии, сфпИдентификаторПереводимогоЗвонка, ПолеВводаНомера, "");
	Элементы.сфпПодтвердитьПеревод.Доступность = Истина;
КонецПроцедуры // ВыполнитьПереключитьЗвонок()



&НаКлиенте
Процедура сфпПослеЗавершенияРазговора(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	Если Результат = "Да" Тогда
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПодтвердитьПереводЗвонка"
//
Процедура сфпПодтвердитьПереводЗвонка(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(Обращение);
	Попытка 
		hCall = Число(hCall);
	Исключение
		Возврат;
	КонецПопытки;	
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если сфпИдентификаторПереводимогоЗвонка > 0 Тогда
		// Подтверждаем перевод звонка
		сфпПанельУправления.FinishTransferCall(НайденныйЗвонок.LineName, сфпИдентификаторПереводимогоЗвонка, "");
		сфпИдентификаторПереводимогоЗвонка = 0;
		Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
		Элементы.сфпУдержатьЗвонок.Доступность 		= Ложь;
		Элементы.сфпПереводЗвонка.Доступность 		= Ложь;
		Закрыть();
	Иначе		
		// просто кладём трубку, без перевода, задаём вопрос на запись данных
		сфпПанельУправления.DropCall(НайденныйЗвонок.LineName, hCall);
		//НовоеОповещение = Новый ОписаниеОповещения("сфпПослеЗавершенияРазговора", ЭтотОбъект);
		//ТекстВопроса = Нстр("ru='Принять обращение?';en='Accept Appeal?'");
		//СписокКнопок = Новый СписокЗначений();
		//СписокКнопок.Добавить("Да");
		//СписокКнопок.Добавить("Отмена");
		//ПоказатьВопрос(НовоеОповещение, ТекстВопроса, СписокКнопок);
	КонецЕсли;
КонецПроцедуры // ПодтвердитьПереводЗвонка()



&НаКлиенте
Процедура ОписаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Попытка
			ПерейтиПоНавигационнойСсылке(ДанныеСобытия.href);
		Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		сфпВиднаКолонкаСтатусов = Ложь;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", 
			Новый Структура("ТипУслуги, сфпВиднаКолонкаСтатусов, ПоказыватьНастройкаПоТипуУслуги", ТипУслуги, сфпВиднаКолонкаСтатусов, Ложь),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",Новый Структура("сфпВиднаКолонкаСтатусов, ПоказыватьНастройкаПоТипуУслуги", сфпВиднаКолонкаСтатусов, Ложь),ЭтотОбъект);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	Если ПроверитьОбязательностьПричиныОтказа() Тогда
		
		ОповещениеПричинаОтказа = Новый ОписаниеОповещения("УказатьПричинуОтказа", ЭтотОбъект);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", Новый Структура, ЭтотОбъект, , , ,ОповещениеПричинаОтказа, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ДописатьИнформациюВОснованиеОбращения("", "");
		ЗаписатьСостояниеОтклоненногоЛида(Обращение, "", "");
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УказатьПричинуОтказа(Результат, Параметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ПричинаОтказа")
		И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		//
		// ДОРАБОТАТЬ: регистр сведений (?) причины неудачных обращений.
		//Ссылка = ОбработатьПотерюОбращенияНаСервере(ДатаВходящегоОбращения, 
		//											Результат.ПричинаОтказа,
		//											Результат.Комментарий,
		//											ИнформацияПоИнтересуКлиент,
		//											ИнформацияПоИнтересуКонтактноеЛицо,
		//											ИнформацияПоИнтересуПотенциальныйКлиент);
		////
		//Если Ссылка <> Неопределено Тогда
		//	ПоказатьОповещениеПользователя(НСтр("ru='Обращение потеряно';en='The appeal is lost'"), 
		//			ПолучитьНавигационнуюСсылку(Ссылка), 
		//			НСтр("ru='Причина: ';en='Reason:'") + Результат.ПричинаОтказа);
		//	//
		//КонецЕсли;
		ДописатьИнформациюВОснованиеОбращения(Результат.ПричинаОтказа, Результат.Комментарий);
		ЗаписатьСостояниеОтклоненногоЛида(Обращение, Результат.ПричинаОтказа, Результат.Комментарий);
	Иначе
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ДописатьИнформациюВОснованиеОбращения(ПричинаОтказа, Комментарий)
	Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ТелефонныйЗвонок = Обращение.ПолучитьОбъект();
		ТелефонныйЗвонок.CRM_СкрытьВАРМ = Истина;
		ТелефонныйЗвонок.Комментарий = ТелефонныйЗвонок.Комментарий+?(ЗначениеЗаполнено(ТелефонныйЗвонок.Комментарий), Символы.ПС, "")
				+НСтр("ru='Обращение потеряно по причине';en='Treatment is lost for a reason'")+": "+Строка(ПричинаОтказа)
				+Символы.ПС+Комментарий;
		АбонентВТелефонномЗвонке = ТелефонныйЗвонок.АбонентКонтакт;
		Если ЗначениеЗаполнено(ПотенциальныйКлиент) И ПотенциальныйКлиент <> АбонентВТелефонномЗвонке Тогда
			ТелефонныйЗвонок.АбонентКонтакт 		= ПотенциальныйКлиент;
			ТелефонныйЗвонок.АбонентПредставление 	= Строка(ТелефонныйЗвонок.АбонентКонтакт);
		ИначеЕсли ЗначениеЗаполнено(Контакт) И Контакт <> АбонентВТелефонномЗвонке Тогда
			ТелефонныйЗвонок.АбонентКонтакт 		= Контакт;
			ТелефонныйЗвонок.АбонентПредставление 	= Строка(ТелефонныйЗвонок.АбонентКонтакт);
		КонецЕсли;
		Попытка
			ТелефонныйЗвонок.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостояниеОтклоненногоЛида(ОснованиеОбращения, ПричинаОтказа, Комментарий)
	Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_Заявка")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		
		Если ЗначениеЗаполнено(ОснованиеОбращения) И РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(ОснованиеОбращения) Тогда
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ОснованиеОбращения, Справочники.CRM_СостоянияЛидов.Отклонен,, ПричинаОтказа, Комментарий);
		КонецЕсли;
		
		ОбъектОбращение = ОснованиеОбращения.ПолучитьОбъект();
		ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
		Если Не ЗначениеЗаполнено(ОбъектОбращение.Ответственный) Тогда
			ОбъектОбращение.Ответственный = ТекущийПользователь;
		КонецЕсли;
		ОбъектОбращение.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаналПриИзменении(Элемент)
	Если Источник = Неопределено ИЛИ Источник.Пустая() Тогда
		Элементы.Источник.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Канал, "ТипЗначения"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Канал) И ТипПВХ(Канал) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.Источник.Видимость = Истина;
		Элементы.Источник.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.Источник.Видимость = Ложь;
		Элементы.Источник.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Канал) И Не ЗначениеЗаполнено(Источник) Тогда
		Элементы.Источник.АвтоОтметкаНезаполненного = Истина;
		Элементы.Источник.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Канал)	И ТипПВХ(Канал) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.Источник.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Источник.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаналНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	Канал);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Канал) Тогда
		Если ТипПВХ(Канал)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	Источник);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(Канал) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(Источник) И (ТипЗнч(Источник) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Источник, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	КаналПриИзменении("");

КонецПроцедуры



&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы	= Новый Структура("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ДополнительныеПараметры.Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаСервере
Функция ПрикрепитьКВыбранномуНаСервере(ВыбранныйИнтерес)
	Попытка
		
		Если ВыбранныйИнтерес.Ответственный <> ТекущийПользователь Тогда			
			ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ОбъектЗадача.Автор = ТекущийПользователь;
			ОбъектЗадача.Исполнитель = ВыбранныйИнтерес.Ответственный;
			ОбъектЗадача.ПринятаКИсполнению = Истина;
			ОбъектЗадача.Наименование =  НСтр("ru='Обработать обращение клиента';en='Process lead'");
			ОбъектЗадача.Дата = ТекущаяДатаСеанса();
			ОбъектЗадача.ДатаНачала = ТекущаяДатаСеанса();
			ОбъектЗадача.СрокИсполнения = ТекущаяДатаСеанса();
			ОбъектЗадача.CRM_Личная = Истина;
			ОбъектЗадача.Предмет = ВыбранныйИнтерес;
			ОбъектЗадача.Описание = Содержание;
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер = Клиент;
				ОбъектЗадача.CRM_КонтактноеЛицо = Контакт;
			КонецЕсли;
			ОбъектЗадача.Записать();
		ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок")  И ЗначениеЗаполнено(Содержание) Тогда	
			ОбъектЗвонок = Обращение.ПолучитьОбъект();
			ОбъектЗвонок.Комментарий = Содержание;
			ОбъектЗвонок.Записать();
		КонецЕсли;
		ОбращениеЗаполнено = ЗначениеЗаполнено(Обращение) И ТипЗнч(Обращение) <> Тип("Строка");
		Если ЗначениеЗаполнено(Содержание) Тогда
			
			ФорматированныйТекст = Новый ФорматированныйДокумент;
			ФорматированныйТекст.УстановитьHTML(Содержание, Новый Структура);
			
			СодержаниеЗаметки = Новый ХранилищеЗначения(ФорматированныйТекст, Новый СжатиеДанных(9));
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДатаИзменения",			ТекущаяДатаСеанса());
			ДанныеЗаполнения.Вставить("Предмет",				ВыбранныйИнтерес);
			ДанныеЗаполнения.Вставить("Автор",					ТекущийПользователь);
			ДанныеЗаполнения.Вставить("Содержание",				СодержаниеЗаметки);
			ДанныеЗаполнения.Вставить("ТекстСодержания",			Содержание);
			ЗаметкаОбъект = Справочники.Заметки.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ЗаметкаОбъект, ДанныеЗаполнения);
			ЗаметкаОбъект.Записать();
		КонецЕсли;
		Если ОбращениеЗаполнено Тогда 
			
			CRM_ДобавитьИнтересНаСервере(Обращение, ВыбранныйИнтерес);
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Обращение, Справочники.CRM_СостоянияЛидов.Сконвертирован, ВыбранныйИнтерес);
			ОбъектОбращение = Обращение.ПолучитьОбъект();
			ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
			ОбъектОбращение.Ответственный = Ответственный;
			ОбъектОбращение.Записать();
		КонецЕсли;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПрикрепитьКВыбранному(Команда)
	ТекСтрока = Элементы.НайденныеИнтересы.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ПрикрепитьКВыбранномуНаСервере(ТекСтрока.Интерес) Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Обращение принято';en='Appeal accepted'"), 
			ПолучитьНавигационнуюСсылку(ТекСтрока.Интерес), 
			НСтр("ru='Интерес: ';en='Lead:'") + CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Интерес, "Тема") + " (" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") + ")");
			
			Оповестить("ОбновитьАРМ");
			Если ОткрыватьИнтересОбращение Или Ответственный = ТекущийПользователь Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", ТекСтрока.Интерес);
				ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
			ЭтотОбъект.Закрыть();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПолей(СписокПолей, СписокПолейОдноИз = Неопределено)
	ЕстьОшибки = Ложь;
	Если Не Клиент.Пустая() Тогда
			Если Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
				СписокПолей.Добавить("Контакт", "Контакт");
			КонецЕсли;	
		КонецЕсли;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		Если Не ЗначениеЗаполнено(ЭтотОбъект[ЭлементСписка.Значение]) Тогда
			ЕстьОшибки = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнено поле "+ЭлементСписка.Представление;
			Сообщение.Поле = ЭлементСписка.Значение;
			Сообщение.Сообщить();
		КонецЕсли;	
	КонецЦикла;	
	ЗаполненаКИ = Ложь;
	Если СписокПолейОдноИз <> Неопределено И НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) И НЕ ЗначениеЗаполнено(Клиент) Тогда
		ЗаполненаКИ = Истина;
		Для Каждого ЭлементСписка Из СписокПолейОдноИз Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект[ЭлементСписка.Значение]) Тогда
				ЗаполненаКИ = Ложь;
			КонецЕсли;	
		КонецЦикла;
		Если ЗаполненаКИ Тогда
			Для Каждого ЭлементСписка Из СписокПолейОдноИз Цикл
				Если Элементы[ЭлементСписка.Значение].Видимость Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Необходимо заполнить хотя бы один вид контактной информации.";
					Сообщение.Поле = ЭлементСписка.Значение;
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	//Если ТекущийРежимРаботы = "Ввод интереса контакта" Тогда
	//	Если Клиент.Пустая() Тогда
	//		Если Не ЗначениеЗаполнено(ЭтотОбъект["Почта"]) и Не ЗначениеЗаполнено(ЭтотОбъект["Телефон"]) Тогда
	//			ЕстьОшибки = Истина;
	//			Если Не ЗначениеЗаполнено(ЭтотОбъект["Почта"]) Тогда
	//				Сообщение = Новый СообщениеПользователю;
	//				Сообщение.Текст = "Не заполнено поле Email";
	//				Сообщение.Поле = "Почта";
	//				Сообщение.Сообщить();
	//			Иначе
	//				Сообщение = Новый СообщениеПользователю;
	//				Сообщение.Текст = "Не заполнено поле Телефон";
	//				Сообщение.Поле = "Телефон";
	//				Сообщение.Сообщить();
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли;	
	Возврат ЕстьОшибки ИЛИ ЗаполненаКИ;	
КонецФункции

&НаСервере
Функция ВыделитьЧастьНаименованияКонтактногоЛица(ИсходнаяСтрока)
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	Возврат ВыделенноеСлово;
КонецФункции 

&НаСервере
Функция ОпределитьПол(Имя)
	СписокМужскихИсключений = Новый СписокЗначений;
	СписокМужскихИсключений.Добавить("ИЛЬЯ");
	СписокМужскихИсключений.Добавить("НИКОЛА");
	СписокМужскихИсключений.Добавить("САВВА");
	СписокМужскихИсключений.Добавить("КУЗЬМА");
	СписокМужскихИсключений.Добавить("НИКИТА");
	СписокМужскихИсключений.Добавить("ДАНИЛА");
	СписокМужскихИсключений.Добавить("ЕМЕЛЯ");
	СписокЖенскихИсключений = Новый СписокЗначений;
	СписокЖенскихИсключений.Добавить("ЛЮБОВЬ");
	Окончание = ВРег(Прав(СокрП(Имя),1));
	Если (Найти("АЯ",Окончание) И СписокМужскихИсключений.НайтиПоЗначению(ВРег(Имя)) = Неопределено) Или
		СписокЖенскихИсключений.НайтиПоЗначению(ВРег(Имя)) <> Неопределено Тогда // Вероятно женщина
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	Иначе
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	КонецЕсли; 
	Возврат Пол;
КонецФункции

&НаСервере
Процедура СоздатьНовыйИнтересНаСервере()
	СозданныйИнтерес = Документы.CRM_Интерес.ПустаяСсылка();
	СписокПолей = Новый СписокЗначений;
	//СписокПолей.Добавить("Тема", "Тема");
	Если ПолучитьФункциональнуюОпциюФормы("CRM_ИспользоватьТипыУслуг") Тогда
		СписокПолей.Добавить("ТипУслуги", "Тип услуги");
	КонецЕсли;	
	//СписокПолей.Добавить("Содержание", "Содержание");
	СписокПолей.Добавить("Ответственный", "Ответственный");
	СписокПолей.Добавить("СценарийПродажи", "Сценарий");
	Если Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить() Тогда
		СписокПолей.Добавить("Канал", "Канал");
	КонецЕсли;
	Если НЕ Клиент.Пустая() И НЕ Элементы.ГруппаКонтакт.Видимость Тогда
		СписокПолей.Добавить("ФИО", "ФИО");
	КонецЕсли;	
	
	СписокПолейОдноИз = Новый СписокЗначений;
	СписокПолейОдноИз.Добавить("ИДАккаунта", "Идентификатор аккаунта в соц. сетях");
	СписокПолейОдноИз.Добавить("Почта", "Email");
	СписокПолейОдноИз.Добавить("Телефон", "Телефон");
	
	Если ПроверитьЗаполнениеПолей(СписокПолей, СписокПолейОдноИз) Тогда Возврат КонецЕсли;
	
	Если НЕ Клиент.Пустая() Тогда
		Попытка
			НачатьТранзакцию();
			ОбъектИнтерес							 = Документы.CRM_Интерес.СоздатьДокумент();
			ОбъектИнтерес.Дата						 = ТекущаяДатаСеанса();
			ОбъектИнтерес.Автор						 = ТекущийПользователь;
			ОбъектИнтерес.СостояниеИнтереса			 = Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(СценарийПродажи);
			ОбъектИнтерес.Партнер					 = Клиент;
			Если НЕ Элементы.ГруппаКонтакт.Видимость Тогда
				
				НовоеКЛ = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
				НовоеКЛ.Владелец = Клиент;
				ФиоКЛ = ФИО;
				НовоеКЛ.Наименование = ФИО;
				ПервоеСлово = ВыделитьЧастьНаименованияКонтактногоЛица(ФиоКЛ);
				НовоеКЛ.CRM_Фамилия = ПервоеСлово;			
				НовоеКЛ.CRM_Имя = ВыделитьЧастьНаименованияКонтактногоЛица(ФиоКЛ);
				НовоеКЛ.CRM_Состояние = Перечисления.CRM_Состояние.Работает;
				Если НЕ ЗначениеЗаполнено(НовоеКЛ.Пол) Тогда
					НовоеКЛ.Пол = ОпределитьПол(НовоеКЛ.CRM_Имя);
				КонецЕсли;
				НовоеКЛ.CRM_Отчество = ВыделитьЧастьНаименованияКонтактногоЛица(ФиоКЛ);
				Если ЗначениеЗаполнено(Телефон) Тогда
					ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
					ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
					
					СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
					ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Телефон, ВидКИ);
					УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Почта) Тогда
					ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
					ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					
					СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
					ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Почта, ВидКИ);
					УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИДАккаунта) Тогда
					ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись, Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
					ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
					
					
					СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
					ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ИДАккаунта, ВидКИ);
					НоваяСтрока = НовоеКЛ.КонтактнаяИнформация.Добавить();
					НоваяСтрока.Представление = ИДАккаунта;
					НоваяСтрока.ЗначенияПолей = ДанныеКИ;
					НоваяСтрока.Вид           = ВидКИ;
					НоваяСтрока.Тип           = ТипКИ;
				КонецЕсли;
				
				НовоеКЛ.Записать();
				Контакт			 = НовоеКЛ.Ссылка;
			КонецЕсли;	
			ОбъектИнтерес.КонтактноеЛицо			 = Контакт;
			ОбъектИнтерес.ДокументОснование			 = Обращение;
			ОбъектИнтерес.Описание					 = Содержание;
			ОбъектИнтерес.ОжидаемаяВыручка			 = ОжидаемаяВыручка;
			
			ОбъектИнтерес.Ответственный				 = Ответственный;
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) И ЗначениеЗаполнено(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"])
					И ОбъектИнтерес.Партнер["CRM_УровниДоступа"].Найти(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"],"УровеньДоступа") = Неопределено И ОбъектИнтерес.Партнер["CRM_УровниДоступа"].Количество() > 0 Тогда
					
					ПартнерОбъект = ОбъектИнтерес.Партнер.ПолучитьОбъект();
					НоваяСтрокаУровня = ПартнерОбъект["CRM_УровниДоступа"].Добавить();
					НоваяСтрокаУровня["УровеньДоступа"]= ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"];
					ПартнерОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			
			ОбъектИнтерес.Подразделение				 = ОбъектИнтерес.Ответственный.Подразделение;
			ОбъектИнтерес.Офис						 = ОбъектИнтерес.Подразделение.CRM_Офис;
			ОбъектИнтерес.ТипУслуги					 = ТипУслуги;
			ОбъектИнтерес.Тема						 = Тема;
			ОбъектИнтерес.Организация				 = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный, "ОсновнаяОрганизация");
			Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Организация) Тогда
				ОбъектИнтерес.Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
			КонецЕсли;
			
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) Тогда
					Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(ОбъектИнтерес.Партнер, ОбъектИнтерес.Организация);
					Если ЗначениеЗаполнено(Договор) Тогда
						ОбъектИнтерес["Договор"] = Договор;
						ОбъектИнтерес.Валюта = Договор.ВалютаРасчетов;
						ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ОбъектИнтерес.Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
						ОбъектИнтерес["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
						ОбъектИнтерес["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
						ОбъектИнтерес["ВидСкидкиНаценки"] = Договор.ВидСкидкиНаценки;
						ОбъектИнтерес["ВидЦен"] = Договор.ВидЦен;
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				МодульCRM_Модуль_МетодыМодулейОбъектовДокументов = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
				МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьРеквизитыДокумента(ОбъектИнтерес);

			КонецЕсли;	
			
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				ОбъектИнтерес.Проект = ЗначениеНастройки;
			КонецЕсли;
			
			ОбъектИнтерес.Записать();
			Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Тема) Тогда
				ОбъектИнтерес.Тема = "#"+ОбъектИнтерес.Номер;
			КонецЕсли;
			ОбъектИнтерес.Записать();
			
			Если ЗначениеЗаполнено(Канал) Тогда
				Менеджер = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
				Менеджер.Период = ОбъектИнтерес.Дата;
				Менеджер.Сделка = ОбъектИнтерес.Ссылка;
				Менеджер.Партнер = ?(ОбъектИнтерес.Партнер.Пустая(), ОбъектИнтерес.ПотенциальныйКлиент, ОбъектИнтерес.Партнер);
				Менеджер.КаналПервичногоИнтереса = Канал;
				Менеджер.ИсточникПервичногоИнтереса = Источник;
				Менеджер.Записать(Истина);
			КонецЕсли;	
			ИнформацияПоИнтересуСсылка = ОбъектИнтерес.Ссылка;
			Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				ЗвонокОбъект = Обращение.ПолучитьОбъект();
				ЗвонокОбъект.УдалитьПредмет = ИнформацияПоИнтересуСсылка;
				ЗвонокОбъект.Записать();
			ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
				ИнформацияПоИнтересуКонтактноеЛицо = Неопределено;
				Если ЗначениеЗаполнено(Контакт) Тогда
					ИнформацияПоИнтересуКонтактноеЛицо = Контакт;
				ИначеЕсли ЗначениеЗаполнено(Клиент) Тогда
					ИнформацияПоИнтересуКонтактноеЛицо = Клиент;
				ИначеЕсли ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
					ИнформацияПоИнтересуКонтактноеЛицо = ПотенциальныйКлиент;
				КонецЕсли;
				Если ЗначениеЗаполнено(Контакт) Тогда
					CRM_РаботаСМессенджерамиСервер.СвязатьВсеСообщенияПользователяСКонтактом(Обращение.УчетнаяЗапись.ТипМессенджера, Обращение.ID_Пользователя, Контакт);
				КонецЕсли;
			КонецЕсли;
				

			Если Ответственный <> ТекущийПользователь Тогда	
				ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				ОбъектЗадача.Автор = ТекущийПользователь;
				ОбъектЗадача.Исполнитель = Ответственный;
				ОбъектЗадача.ПринятаКИсполнению = Истина;
				ОбъектЗадача.Наименование =  НСтр("ru='Обработать новый интерес клиента';en='Process new lead'") + ?(ЗначениеЗаполнено(Содержание), "("+Содержание+")", "");
				ОбъектЗадача.Дата = ТекущаяДатаСеанса();
				ОбъектЗадача.ДатаНачала = ТекущаяДатаСеанса();
				ОбъектЗадача.СрокИсполнения = ТекущаяДатаСеанса();
				ОбъектЗадача.CRM_Личная = Истина;
				ОбъектЗадача.Предмет = ОбъектИнтерес.Ссылка;
				ОбъектЗадача.Описание = Содержание;
				Если ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
					ОбъектЗадача.CRM_Партнер = Клиент;
					ОбъектЗадача.CRM_КонтактноеЛицо = Контакт;
				КонецЕсли;
				ОбъектЗадача.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			СозданныйИнтерес = ОбъектИнтерес.Ссылка;
		Исключение
			ИнформацияПоИнтересуСсылка = Документы.CRM_Интерес.ПустаяСсылка();
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать интерес. Подробности см. в журнале регистрации.';en='Could not write lead. For details, see the log.'"));
			ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Интерес не создан)';en='New Appeal (Lead not created)'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		
		Попытка
			НачатьТранзакцию();
			Если ПотенциальныйКлиент.Пустая() Тогда
				СписокПолей = Новый СписокЗначений;
				СписокПолей.Добавить("ФИО", "ФИО");
				
				Если ПроверитьЗаполнениеПолей(СписокПолей) Тогда 
					ОтменитьТранзакцию();
					Возврат; 
				КонецЕсли;
				ПотенциальныйКлиентОбъект = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
				ПотенциальныйКлиентОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
				ПотенциальныйКлиентОбъект.Наименование = ФИО;
				ПотенциальныйКлиентОбъект.Организация = Организация;
				ПотенциальныйКлиентОбъект.ОсновнойМенеджер = ТекущийПользователь;
				Если ЗначениеЗаполнено(Телефон) Тогда
					ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
					ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
					
					СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
					Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", "");
					Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, ВидКИ);
					
					//СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
					//ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураТелефона, Представление, ВидКИ);
					УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПотенциальныйКлиентОбъект, Значение, ВидКИ, ТипКИ);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Почта) Тогда
					ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
					ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					
					СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
					ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Почта, ВидКИ);
					УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПотенциальныйКлиентОбъект, ДанныеКИ, ВидКИ, ТипКИ);
				КонецЕсли;
				Если ЗначениеЗаполнено(ИДАккаунта) Тогда
					
					ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись, Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка());
					ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
					
					
					СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
					ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ИДАккаунта, ВидКИ);
					НоваяСтрока = ПотенциальныйКлиентОбъект.КонтактнаяИнформация.Добавить();
					НоваяСтрока.Представление = ИДАккаунта;
					НоваяСтрока.ЗначенияПолей = ДанныеКИ;
					НоваяСтрока.Вид           = ВидКИ;
					НоваяСтрока.Тип           = ТипКИ;

				КонецЕсли;
				
				ПотенциальныйКлиентОбъект.Записать();
				ПотенциальныйКлиент = ПотенциальныйКлиентОбъект.Ссылка;
			КонецЕсли;
			
			ОбъектИнтерес							 = Документы.CRM_Интерес.СоздатьДокумент();
			ОбъектИнтерес.Дата						 = ТекущаяДатаСеанса();
			ОбъектИнтерес.Автор						 = ТекущийПользователь;
			ОбъектИнтерес.СостояниеИнтереса			 = Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(СценарийПродажи);
			ОбъектИнтерес.ПотенциальныйКлиент		 = ПотенциальныйКлиент;
			ОбъектИнтерес.ДокументОснование			 = Обращение;
			ОбъектИнтерес.Описание					 = Содержание;
			ОбъектИнтерес.ОжидаемаяВыручка			 = ОжидаемаяВыручка;
			
			ОбъектИнтерес.Ответственный				 = Ответственный;
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) И ЗначениеЗаполнено(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"])
					И ОбъектИнтерес.Партнер["CRM_УровниДоступа"].Найти(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"],"УровеньДоступа") = Неопределено И ОбъектИнтерес.Партнер["CRM_УровниДоступа"].Количество() > 0 Тогда
					
					ПартнерОбъект = ОбъектИнтерес.Партнер.ПолучитьОбъект();
					НоваяСтрокаУровня = ПартнерОбъект["CRM_УровниДоступа"].Добавить();
					НоваяСтрокаУровня["УровеньДоступа"]= ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"];
					ПартнерОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			
			ОбъектИнтерес.Подразделение				 = ОбъектИнтерес.Ответственный.Подразделение;
			ОбъектИнтерес.Офис						 = ОбъектИнтерес.Подразделение.CRM_Офис;
			ОбъектИнтерес.ТипУслуги					 = ТипУслуги;
			ОбъектИнтерес.Тема						 = Тема;
			ОбъектИнтерес.Организация				 = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный, "ОсновнаяОрганизация");
			Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Организация) Тогда
				ОбъектИнтерес.Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
			КонецЕсли;
			
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ОбъектИнтерес.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
				ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ОбъектИнтерес.Дата, Новый Структура("Валюта", ОбъектИнтерес.Валюта));
				ОбъектИнтерес["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
				ОбъектИнтерес["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
				ОбъектИнтерес["ВидЦен"] = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнойВидЦенПродажи");;
			Иначе
				
				МодульCRM_Модуль_МетодыМодулейОбъектовДокументов = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
				МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьРеквизитыДокумента(ОбъектИнтерес);

			КонецЕсли;	
			
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				ОбъектИнтерес.Проект = ЗначениеНастройки;
			КонецЕсли;
			
			ОбъектИнтерес.Записать();
			Если НЕ ЗначениеЗаполнено(ОбъектИнтерес.Тема) Тогда
				ОбъектИнтерес.Тема = "#"+ОбъектИнтерес.Номер;
			КонецЕсли;
			ОбъектИнтерес.Записать();
			Если ЗначениеЗаполнено(Канал) Тогда
				Менеджер = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
				Менеджер.Период = ОбъектИнтерес.Дата;
				Менеджер.Сделка = ОбъектИнтерес.Ссылка;
				Менеджер.Партнер = ?(ОбъектИнтерес.Партнер.Пустая(), ОбъектИнтерес.ПотенциальныйКлиент, ОбъектИнтерес.Партнер);
				Менеджер.КаналПервичногоИнтереса = Канал;
				Менеджер.ИсточникПервичногоИнтереса = Источник;
				Менеджер.Записать(Истина);
			КонецЕсли;	
			ИнформацияПоИнтересуСсылка = ОбъектИнтерес.Ссылка;
			Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				ЗвонокОбъект = Обращение.ПолучитьОбъект();
				ЗвонокОбъект.УдалитьПредмет = ИнформацияПоИнтересуСсылка;
				ЗвонокОбъект.Записать();
			ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
				ИнформацияПоИнтересуКонтактноеЛицо = Неопределено;
				Если ЗначениеЗаполнено(Контакт) Тогда
					ИнформацияПоИнтересуКонтактноеЛицо = Контакт;
				ИначеЕсли ЗначениеЗаполнено(Клиент) Тогда
					ИнформацияПоИнтересуКонтактноеЛицо = Клиент;
				ИначеЕсли ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
					ИнформацияПоИнтересуКонтактноеЛицо = ПотенциальныйКлиент;
				КонецЕсли;
				Если ЗначениеЗаполнено(Контакт) Тогда
					CRM_РаботаСМессенджерамиСервер.СвязатьВсеСообщенияПользователяСКонтактом(Обращение.УчетнаяЗапись.ТипМессенджера, Обращение.ID_Пользователя, Контакт);
				КонецЕсли;
			КонецЕсли;
			
						
			Если Ответственный <> ТекущийПользователь Тогда	
				ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				ОбъектЗадача.Автор = ТекущийПользователь;
				ОбъектЗадача.Исполнитель = Ответственный;
				ОбъектЗадача.ПринятаКИсполнению = Истина;
				ОбъектЗадача.Наименование =  НСтр("ru='Обработать новый интерес клиента'");
				ОбъектЗадача.Дата = ТекущаяДатаСеанса();
				ОбъектЗадача.ДатаНачала = ТекущаяДатаСеанса();
				ОбъектЗадача.СрокИсполнения = ТекущаяДатаСеанса();
				ОбъектЗадача.CRM_Личная = Истина;
				ОбъектЗадача.Предмет = ОбъектИнтерес.Ссылка;
				ОбъектЗадача.Описание = Содержание;
				ОбъектЗадача.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			СозданныйИнтерес = ОбъектИнтерес.Ссылка;
		Исключение
			ИнформацияПоИнтересуСсылка = Документы.CRM_Интерес.ПустаяСсылка();
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать интерес. Подробности см. в журнале регистрации.';en='Could not write lead. For details, see the log.'"));
			ЗаписьЖурналаРегистрации(НСтр("ru='Принятие обращения (Интерес не создан)';en='New Appeal (Lead not created)'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйИнтерес(Команда)
	Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		СписокПолей = Новый СписокЗначений;
		СписокПолей.Добавить("Ответственный", "Ответственный");
		СписокПолей.Добавить("СценарийПродажи", "Сценарий");
			
		Если ПроверитьЗаполнениеПолей(СписокПолей) Тогда Возврат КонецЕсли;
		ЗапуститьПроцессНаКлиенте();
		ЭтотОбъект.Закрыть();
	Иначе
		СоздатьНовыйИнтересНаСервере();
		
		Если НЕ СозданныйИнтерес.Пустая() Тогда
			CRM_ДобавитьИнтересНаСервере(Обращение, СозданныйИнтерес);
			ПоказатьОповещениеПользователя(НСтр("ru='Обращение принято';en='Appeal accepted'"), 
			ПолучитьНавигационнуюСсылку(СозданныйИнтерес), 
			НСтр("ru='Интерес: ';en='Lead:'") + CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СозданныйИнтерес, "Тема") + " (" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") + ")");
			
			Оповестить("ОбновитьАРМ");
			Оповестить("ПринатиеОбращения", СозданныйИнтерес, Обращение);
			Если ОткрыватьИнтерес Или Ответственный = ТекущийПользователь Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", СозданныйИнтерес);
				ПараметрыФормы.Вставить("Модифицированность", Истина);
				ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
			ЭтотОбъект.Закрыть();	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВходящееПисьмо, Интерес)
	ОбращениеЗаполнено = ЗначениеЗаполнено(ВходящееПисьмо) И ТипЗнч(ВходящееПисьмо) <> Тип("Строка") И ТипЗнч(ВходящееПисьмо) <> Тип("ДокументСсылка.CRM_Интерес") И ТипЗнч(ВходящееПисьмо) <> Тип("ДокументСсылка.CRM_Телемаркетинг");
	
	Если НЕ ОбращениеЗаполнено Тогда Возврат КонецЕсли;
	
	ВходящееПисьмоОбъект = ВходящееПисьмо.ПолучитьОбъект();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаИнтерес" , Интерес);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	CRM_Интерес.Ссылка,
	               |	CRM_Интерес.СостояниеИнтереса,
	               |	ЛОЖЬ КАК ВведенНаОсновании,
	               |	ИСТИНА КАК ОсновнойИнтерес
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	CRM_Интерес.Ссылка = &СсылкаИнтерес
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_Интерес.Дата УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
	Если ТаблицаСвязей.Количество() > 0 Тогда
		ВходящееПисьмоОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
	КонецЕсли;
	ВходящееПисьмоОбъект.Записать();
	РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ВходящееПисьмо, Справочники.CRM_СостоянияЛидов.Сконвертирован, Интерес);
	ОбъектОбращение = ВходящееПисьмо.ПолучитьОбъект();
	ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
	ОбъектОбращение.Ответственный = Ответственный;
	ОбъектОбращение.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессНаКлиенте()
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьПроцессНаКлиентеЗавершение", ЭтотОбъект);
	//ПараметрыФормы = Новый Структура("Основание", Процесс);
	СтруктураЗаполнения = Новый Структура("Партнер, Контакт, КартаМаршрута, Тема, Описание, Ответственный, Подразделение, Сумма", Клиент, Контакт, СценарийПродажи, Тема, Содержание, Ответственный, CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Ответственный, "Подразделение"), ОжидаемаяВыручка);
	Если ТипЗнч(Обращение) <> Тип("Строка") И Обращение <> Неопределено Тогда
		СтруктураЗаполнения.Вставить("Предмет", Обращение);
	КонецЕсли;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	Если CRM_БизнесПроцессыИЗадачиСервер.ЭтоПоручение(СценарийПродажи) Тогда
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы,,,,, ОписаниеОповещения);
	Иначе
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСтартаНезависимого", ПараметрыФормы,,,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессНаКлиентеЗавершение(БизнесПроцесс, ДопПараметры) Экспорт
	
КонецПроцедуры


&НаКлиенте
Процедура РезультатыПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		//Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
		Если ТипЗнч(ТекСтрока.Клиент) = Тип("СправочникСсылка.Партнеры") И Не ТекСтрока.Клиент.Пустая() Тогда
			ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", ТекСтрока.Клиент));
		КонецЕсли;	
		Если ТипЗнч(ТекСтрока.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") И Не ТекСтрока.Контакт.Пустая() Тогда
			ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта", Новый Структура("Ключ", ТекСтрока.Контакт));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайденныеИнтересыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока);
		ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыФормы);		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗАполнитьРеквизитыИнтересаПоПоиску(СтруктураСтроки = Неопределено, Перезаполнить = Истина)
	УстановитьПривилегированныйРежим(Истина);
	Элементы.ПотенциальныйКлиент.Доступность = Истина;
	Элементы.ДобавитьТелефонКлиента.Видимость = Ложь;
	Элементы.ДобавитьТелефонПК.Видимость = Ложь;
	Элементы.ДобавитьТелефонКЛ.Видимость = Ложь;
	
	Элементы.ДобавитьПочтуКлиента.Видимость = Ложь;
	Элементы.ДобавитьПочтуПК.Видимость = Ложь;
	Элементы.ДобавитьПочтуКЛ.Видимость = Ложь;
	
	Элементы.ДобавитьМессенджерКлиента.Видимость = Ложь;
	Элементы.ДобавитьМессенджерПК.Видимость = Ложь;
	Элементы.ДобавитьМессенджерКЛ.Видимость = Ложь;
	
	ПоказыватьКоммандуТелефонКлиент = Ложь;
	ПоказыватьКоммандуПочтаКлиент = Ложь;
	ПоказыватьКоммандуМессенджерКлиент = Ложь;
	
		
	ОбращениеЗаполнено = ЗначениеЗаполнено(Обращение) И ТипЗнч(Обращение) <> Тип("Строка");
	Организация = "";
	Телефон = "";
	Почта = "";
	ФИО = "";     
	ИДАккаунта = "";
	Если ЗначениеЗаполнено(ТелефонКэш) Тогда
		Телефон = ТелефонКэш;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ПочтаКэш) Тогда
		Почта = ПочтаКэш;
	КонецЕсли;		
	Если ЗначениеЗаполнено(ФИОКэш) Тогда
		ФИО = ФИОКэш;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ОрганизацияКэш) Тогда
		Организация = ОрганизацияКэш;	
	КонецЕсли;
	ПолнаяКИАккаунта = "";
	Если ЗначениеЗаполнено(ИДАккаунтаКэш) Тогда
		ИДАккаунта = ИДАккаунтаКэш;	
		//ПолнаяКИАккаунта = ИДАккаунтаКэш;
		Элементы.ИДАккаунта.Заголовок = Обращение.УчетнаяЗапись.ТипМессенджера;
		Элементы.ИДАккаунта.Видимость = Истина;
	Иначе
		Элементы.ИДАккаунта.Видимость = Ложь;
		//
	КонецЕсли;
	
	Если ТипЗнч(Обращение) <> Тип("ДокументСсылка.CRM_Интерес") Тогда
		Если СтруктураСтроки <> Неопределено Тогда
			Клиент = СтруктураСтроки.Партнер;
			Контакт = СтруктураСтроки.Контакт;
			ПотенциальныйКлиент = СтруктураСтроки.Контакт;
			НайденКлиент = ЗначениеЗаполнено(СтруктураСтроки.Партнер);
			ПредставлениеКлиента = СтруктураСтроки.ПредставлениеКлиента;
			ПредставлениеКонтакта = СтруктураСтроки.ПредставлениеКонтакта;
		ИначеЕсли Перезаполнить Тогда	
			Клиент = Справочники.Партнеры.ПустаяСсылка();
			Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			ПредставлениеКлиента = "";
			ПредставлениеКонтакта = "";
			ПотенциальныйКлиент = Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка();
			Элементы.Телефон.Видимость = Истина;
			Элементы.Почта.Видимость = Истина;
			Элементы.Компания.Видимость = Истина;
			НайденКлиент = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ПотенциальныйКлиент.Пустая() Тогда
		
		ФИО = ПотенциальныйКлиент.Наименование;
		Организация = ПотенциальныйКлиент.Организация;
		СтруктураПоиска = Новый структура("Вид, Тип", Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента, Перечисления.ТипыКонтактнойИнформации.Телефон);
		СтрокаКИ = ПотенциальныйКлиент.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
		Если СтрокаКИ.Количество() > 0 Тогда
			Телефон = СтрокаКИ[0].Представление;
		КонецЕсли;	
		СтруктураПоиска = Новый структура("Вид, Тип", Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		СтрокаКИ = ПотенциальныйКлиент.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
		Если СтрокаКИ.Количество() > 0 Тогда
			Почта = СтрокаКИ[0].Представление;
		КонецЕсли;
		Элементы.ГруппаФИО.Видимость = Истина;
		Элементы.ГруппаКонтакт.Видимость = Ложь;
		Элементы.Почта.Видимость = Ложь;
		Элементы.ГруппаКлиент.Видимость = Ложь;
		Элементы.Телефон.Видимость = Ложь;
		Элементы.ПотенциальныйКлиент.Видимость = Истина;
		Элементы.ФИО.Видимость = Ложь;
		Элементы.Компания.Доступность = Ложь;
		Элементы.Компания.Видимость = Истина;
		//Элементы.СценарийПродажи.Видимость = Ложь;
		
		НайденнаяСтрока = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(ТелефонКэш, "Представление");
		Если ЗначениеЗаполнено(ТелефонКэш) И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыТелефона = "Добавить телефон: "+ТелефонКэш;
				Элементы.ДобавитьТелефонПК.Видимость = Истина;
				Элементы.ДобавитьТелефонПК.Заголовок = ЗаголовокКоммандыТелефона;
			Иначе	
				Элементы.ДобавитьТелефонПК.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьТелефонПК.Видимость = Ложь;
		КонецЕсли;	
		
		НайденнаяСтрока = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(ПочтаКэш, "Представление");
		Если ЗначениеЗаполнено(ПочтаКэш) И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыПочта = "Добавить Email: "+ПочтаКэш;
				Элементы.ДобавитьПочтуПК.Видимость = Истина;
				Элементы.ДобавитьПочтуПК.Заголовок = ЗаголовокКоммандыПочта;
			Иначе	
				Элементы.ДобавитьПочтуПК.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьПочтуПК.Видимость = Ложь;
		КонецЕсли;
		
		НайденнаяСтрока = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(ИДАккаунтаКэш, "Представление");
		Если ЗначениеЗаполнено(ИДАккаунтаКэш) И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыПочта = "Добавить "+СокрЛП(Обращение.УчетнаяЗапись.ТипМессенджера)+": "+ИДАккаунтаКэш;
				Элементы.ДобавитьМессенджерПК.Видимость = Истина;
				Элементы.ДобавитьМессенджерПК.Заголовок = ЗаголовокКоммандыПочта;
			Иначе	
				Элементы.ДобавитьМессенджерПК.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьМессенджерПК.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;	
	Если НЕ Контакт.Пустая() Тогда
		Элементы.ГруппаФИО.Видимость = Ложь;
		Элементы.ГруппаКонтакт.Видимость = Истина;
		Элементы.Почта.Видимость = Ложь;
		Элементы.Телефон.Видимость = Ложь;
		Элементы.ГруппаКлиент.Видимость = Истина;
		Элементы.Компания.Видимость = Ложь;
		//Элементы.СценарийПродажи.Видимость = Истина;
		НайденнаяСтрока = Контакт.КонтактнаяИнформация.Найти(ТелефонКэш, "Представление");
		Если ЗначениеЗаполнено(ТелефонКэш) И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыТелефона = "Добавить телефон: "+ТелефонКэш;
				Элементы.ДобавитьТелефонКЛ.Видимость = Истина;
				Элементы.ДобавитьТелефонКЛ.Заголовок = ЗаголовокКоммандыТелефона;
			Иначе	
				Элементы.ДобавитьТелефонКЛ.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьТелефонКЛ.Видимость = Ложь;
		КонецЕсли;
		
		НайденнаяСтрока = Контакт.КонтактнаяИнформация.Найти(ПочтаКэш, "Представление");
		Если ЗначениеЗаполнено(ПочтаКэш) И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыПочта = "Добавить Email: "+ПочтаКэш;
				Элементы.ДобавитьПочтуКЛ.Видимость = Истина;
				Элементы.ДобавитьПочтуКЛ.Заголовок = ЗаголовокКоммандыПочта;
			Иначе	
				Элементы.ДобавитьПочтуКЛ.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьПочтуКЛ.Видимость = Ложь;
		КонецЕсли;
		
		НайденнаяСтрока = Контакт.КонтактнаяИнформация.Найти(ИДАккаунтаКэш, "Представление");
		Если ЗначениеЗаполнено(ИДАккаунтаКэш) И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыПочта = "Добавить "+СокрЛП(Обращение.УчетнаяЗапись.ТипМессенджера)+": "+ИДАккаунтаКэш;
				Элементы.ДобавитьМессенджерКЛ.Видимость = Истина;
				Элементы.ДобавитьМессенджерКЛ.Заголовок = ЗаголовокКоммандыПочта;
			Иначе	
				Элементы.ДобавитьМессенджерКЛ.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьМессенджерКЛ.Видимость = Ложь;
		КонецЕсли;
	Иначе
		ПоказыватьКоммандуПочтаКлиент = Истина;
		ПоказыватьКоммандуТелефонКлиент = Истина;
		ПоказыватьКоммандуМессенджерКлиент = Истина;

	КонецЕсли;
	Если НЕ Клиент.Пустая() Тогда
		Элементы.ГруппаФИО.Видимость = Ложь;
		Элементы.ГруппаКонтакт.Видимость = Истина;
		Элементы.Почта.Видимость = Ложь;
		Элементы.Телефон.Видимость = Ложь;
		Элементы.ГруппаКлиент.Видимость = Истина;
		Элементы.Компания.Видимость = Ложь;
		//Элементы.СценарийПродажи.Видимость = Истина;
		НайденнаяСтрока = Клиент.КонтактнаяИнформация.Найти(ТелефонКэш, "Представление");
		Если ЗначениеЗаполнено(ТелефонКэш) И ПоказыватьКоммандуТелефонКлиент И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыТелефона = "Добавить телефон: "+ТелефонКэш;
				Элементы.ДобавитьТелефонКлиента.Видимость = Истина;
				Элементы.ДобавитьТелефонКлиента.Заголовок = ЗаголовокКоммандыТелефона;
			Иначе	
				Элементы.ДобавитьТелефонКлиента.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьТелефонКлиента.Видимость = Ложь;
		КонецЕсли;
		
		НайденнаяСтрока = Клиент.КонтактнаяИнформация.Найти(ПочтаКэш, "Представление");
		Если ЗначениеЗаполнено(ПочтаКэш) И ПоказыватьКоммандуТелефонКлиент И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыПочта = "Добавить Email: "+ПочтаКэш;
				Элементы.ДобавитьПочтуКлиента.Видимость = Истина;
				Элементы.ДобавитьПочтуКлиента.Заголовок = ЗаголовокКоммандыПочта;
			Иначе	
				Элементы.ДобавитьПочтуКлиента.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьПочтуКлиента.Видимость = Ложь;
		КонецЕсли;
		
		НайденнаяСтрока = Клиент.КонтактнаяИнформация.Найти(ИДАккаунтаКэш, "Представление");
		Если ЗначениеЗаполнено(ИДАккаунтаКэш) И ПоказыватьКоммандуМессенджерКлиент И ОбращениеЗаполнено Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				ЗаголовокКоммандыПочта = "Добавить "+СокрЛП(Обращение.УчетнаяЗапись.ТипМессенджера)+": "+ИДАккаунтаКэш;
				Элементы.ДобавитьМессенджерКлиента.Видимость = Истина;
				Элементы.ДобавитьМессенджерКлиента.Заголовок = ЗаголовокКоммандыПочта;
			Иначе	
				Элементы.ДобавитьМессенджерКлиента.Видимость = Ложь;
			КонецЕсли;
		Иначе	
			Элементы.ДобавитьМессенджерКлиента.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;	
	ПредставлениеКонтактаБЕзДополнений = СтрЗаменить(СокрЛП(ПредставлениеКонтакта), " (уволен)", "");
	ПредставлениеКонтактаБЕзДополнений = СтрЗаменить(СокрЛП(ПредставлениеКонтактаБЕзДополнений), " (временно не работает)", "");
	
	Элементы.Контакт.КнопкаОчистки = Ложь;
	Если Не Клиент.Пустая() Тогда
		Если Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			Элементы.Контакт.КнопкаОчистки = Истина;
		КонецЕсли;	
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиента(Команда)
	ФИОКЛ = ФИО;
		
	ФамилияКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ИмяКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ОтчествоКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ПараметрыКЛ = Новый структура("ФИО, Фамилия, Имя, Отчество", ФИО, ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
	ВидПартнера = ?(ЗначениеЗаполнено(Организация), ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"), ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный, "ПравоваяФормаКлиентаПоУмолчанию");
		НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Организация),СокрЛП(ПравоваяФорма)+" """+СокрЛП(Организация)+"""");
	Иначе
		НаименованиеПолное = СокрЛП(ФИО);			
	КонецЕсли;
	
	ПараметрыНового = новый структура("Наименование, НаименованиеПолное, ВидПартнера, ПараметрыКЛ, АдресПочты, АдресПочтыКонтакта, ПотенциальныйКлиент", ?(ЗначениеЗаполнено(Организация), Организация, ФИО), НаименованиеПолное, ВидПартнера, ПараметрыКЛ, Почта, Почта, ПотенциальныйКлиент);
	ПараметрыОткрытия = новый структура("ПараметрыНового, Телефон, ОснованиеОбращения, ЗагружатьНастройки", ПараметрыНового, Телефон, Обращение, Ложь);
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы", "CRM_Модуль_ФормаБыстрогоВвода") Тогда
		
		ИмяФормыБыстрогоВводаПартнера = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаБыстрогоВвода";
		
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы", "CRM_ФормаБыстрогоВвода") Тогда
		
		ИмяФормыБыстрогоВводаПартнера = "Справочник.Партнеры.Форма.CRM_ФормаБыстрогоВвода";
		
	КонецЕсли;
	ОписаниеЗакрытияКлиента = Новый ОписаниеОповещения("ПослеЗакрытияКлиента", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыБыстрогоВводаПартнера, ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеЗакрытияКлиента);
КонецПроцедуры

&наСервере
Процедура ПослеСозданияКлиентаНаСервере(СтруктураКлиент)
	//Элементы.ГруппаЛеваяКолонка.Видимость = Ложь;
	//Элементы.НайденныеИнтересы.Видимость = Ложь;
	Элементы.СтрокаПоиска.Доступность = Ложь;
	Клиент = СтруктураКлиент.Клиент;
	Контакт = СтруктураКлиент.Контакт;
	ПредставлениеКлиента = Строка(Клиент);
	ПредставлениеКонтакта = Строка(Контакт);
	РезультатыПоиска.Очистить();
	ТекСтр = РезультатыПоиска.Добавить();
	ПотенциальныйКлиент = Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка();
	Если НЕ Клиент.Пустая() Тогда
		ТекСтр.Клиент = Клиент;
		ТекСтр.Контакт = Контакт;
		ТекСтр.ПредставлениеКлиента = ПредставлениеКлиента;
		ТекСтр.ПредставлениеКонтакта = ПредставлениеКонтакта;
		ТекСтр.ОсновнойМенеджер = Ответственный;
		ТекСтр.КлиентНайден = Истина;
		ТекСтр.КонтактНайден = Истина;
	КонецЕсли;
	СтруктураСтроки = Новый Структура("Партнер, Контакт, ОсновнойМенеджер, ПредставлениеКлиента, ПредставлениеКонтакта", Клиент, Контакт, Ответственный, ПредставлениеКлиента, ПредставлениеКонтакта);
	ЗАполнитьРеквизитыИнтересаПоПоиску(СтруктураСтроки);
	ЗаполнитьДоступныеТипыУслуг();
	Описание = ВернутьОписаниеСтрокиНайденного(ТекСтр.Клиент, ТекСтр.Контакт);
	МассивКлиентов = Новый Массив;
	МассивКлиентов.Добавить(ТекСтр.Клиент);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКонтактов", ПолучитьМассивКонтактовДляОтбора(ТекСтр.Контакт), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ИнтересыКлиента, "МассивКлиентов", МассивКлиентов, Истина);
	Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Элементы.СоздатьНовыйИнтерес.Заголовок = "Запустить бизнес-процесс";
		Элементы.ОткрыватьИнтерес.Видимость = Ложь;
		Элементы.ОткрыватьИнтересОбращение.Видимость = Ложь;
	Иначе
		Элементы.СоздатьНовыйИнтерес.Заголовок = "Создать интерес";
		Элементы.ОткрыватьИнтерес.Видимость = НЕ Ответственный = ТекущийПользователь;
		Элементы.ОткрыватьИнтересОбращение.Видимость =  НЕ Ответственный = ТекущийПользователь;
	КонецЕсли;
	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗакрытияКлиента(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПослеСозданияКлиентаНаСервере(Результат);
		Элементы.СоздатьНовогоКлиента.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтакт(Команда)
	Элементы.ГруппаФИО.Видимость = Истина;
	Элементы.Телефон.Видимость = Истина;
	Элементы.Почта.Видимость = Истина;
	Элементы.ИДАккаунта.Видимость = ЗначениеЗаполнено(ИДАккаунта);
	Элементы.ГруппаКонтакт.Видимость = Ложь;
	Элементы.СоздатьКлиента.Видимость = Ложь;
	//Элементы.ФИО.КнопкаОчистки = Истина;
	Элементы.ОтменаНовоеКЛ.Видимость = Истина;
	Элементы.ПотенциальныйКлиент.Видимость = Ложь;
	Элементы.ДобавитьТелефонКЛ.Видимость = Ложь;
	Элементы.ДобавитьПочтуКЛ.Видимость = Ложь;
	Элементы.ДобавитьМессенджерКЛ.Видимость = Ложь;
	Элементы.ФИО.Видимость = Истина;  
	КонтактКЭШ = Контакт;
	//Элементы.СценарийПродажи.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФИООчистка(Элемент, СтандартнаяОбработка)
	Элементы.ГруппаФИО.Видимость = Ложь;
	Элементы.Телефон.Видимость = Ложь;
	Элементы.Почта.Видимость = Ложь;
	//Элементы.ИДАккаунта.Видимость = Ложь;
	Элементы.ГруппаКонтакт.Видимость = Истина;
	Элементы.ФИО.КнопкаОчистки = Ложь;
	Элементы.ОтменаНовоеКЛ.Видимость = Ложь;
	Телефон = "";
	ФИО = "";
	Почта = "";
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		СтруктураСтроки = Новый Структура("Партнер, Контакт, ОсновнойМенеджер, ПредставлениеКлиента, ПредставлениеКонтакта", ТекСтрока.Клиент, ТекСтрока.Контакт, ТекСтрока.ОсновнойМенеджер, ТекСтрока.ПредставлениеКлиента, ТекСтрока.ПредставлениеКонтакта);
		ЗАполнитьРеквизитыИнтересаПоПоиску(СтруктураСтроки);
	Иначе	
		ЗАполнитьРеквизитыИнтересаПоПоиску();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// +СофтФон	
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		сфпВерсияПанели = сфпСофтФонПроКлиент.сфпПолучитьВерсиюПанели();
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(сфпВерсияПанели,"3.0.3.120") >= 0 Тогда
			сфпВиднаКолонкаСтатусов = Истина;
			// Вызов этого метода сделан при начале работы в сфпСофтФонПроКлиент.сфпПодключитьСофтФон()
			//сфпСофтФонПроКлиент.сфпПолучитьСостоянияЛиний();
		Иначе
			сфпВиднаКолонкаСтатусов = Ложь;
			Элементы.сфпСтатус.Видимость = Ложь;
		КонецЕсли;		
	КонецЕсли;
	//сфпВидимостьИДоступностьГруппыСофтфон();
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура ТипУслугиПриИзменении(Элемент)
	Если ИспользоватьТипыУслуг Тогда
		//Элементы.СценарийПродажи.Доступность = ЗначениеЗаполнено(ТипУслуги);
	КонецЕсли;	
	ЗаполнитьДоступныеСценарииПродаж();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПродажиПриИзменении(Элемент)
	Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Элементы.СоздатьНовыйИнтерес.Заголовок = "Запустить бизнес-процесс";
		Элементы.ОткрыватьИнтерес.Видимость = Ложь;
		Элементы.ОткрыватьИнтересОбращение.Видимость = Ложь;

	Иначе
		Элементы.СоздатьНовыйИнтерес.Заголовок = "Создать интерес";
		Элементы.ОткрыватьИнтерес.Видимость = НЕ Ответственный = ТекущийПользователь;
		Элементы.ОткрыватьИнтересОбращение.Видимость = НЕ Ответственный = ТекущийПользователь;

	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Элементы.СоздатьНовыйИнтерес.Заголовок = "Запустить бизнес-процесс";
		Элементы.ОткрыватьИнтерес.Видимость = Ложь;
		Элементы.ОткрыватьИнтересОбращение.Видимость = Ложь;
	Иначе
		Элементы.СоздатьНовыйИнтерес.Заголовок = "Создать интерес";
		Элементы.ОткрыватьИнтерес.Видимость = НЕ Ответственный = ТекущийПользователь;
		Элементы.ОткрыватьИнтересОбращение.Видимость = НЕ Ответственный = ТекущийПользователь;
	КонецЕсли;   
	ЗаполнитьДоступныеСценарииПродаж();
	сфпВидимостьИДоступностьГруппыСофтфон();
КонецПроцедуры

&НаКлиенте
Процедура НайденныеИнтересыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.НайденныеИнтересы.ТекущиеДанные;
	Элементы.ПрикрепитьКВыбранному.Доступность = ТекСтрока <> Неопределено И ДоступноОбращение;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Ответственный = ТекущийПользователь;
	ОтветственныйПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ИмяФормы = Нстр("ru='ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги';en='Common Form.CRM_SettingUsers for ServiceType'") Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Ответственный = ВыбранноеЗначение;
			Если ТипЗнч(СценарийПродажи) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
				Элементы.СоздатьНовыйИнтерес.Заголовок = "Запустить бизнес-процесс";
				Элементы.ОткрыватьИнтерес.Видимость = Ложь;
				Элементы.ОткрыватьИнтересОбращение.Видимость = Ложь;
			Иначе
				Элементы.СоздатьНовыйИнтерес.Заголовок = "Создать интерес";
				Элементы.ОткрыватьИнтерес.Видимость = НЕ Ответственный = ТекущийПользователь;
				Элементы.ОткрыватьИнтересОбращение.Видимость = НЕ Ответственный = ТекущийПользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКИНаСервере(ВКИ, КИ)
	Если ВКИ = "ТелефонКлиента" и Не Клиент.Пустая() Тогда
		КлиентОбъект = Клиент.ПолучитьОбъект();
		СтрокаКИ =  КлиентОбъект.КонтактнаяИнформация.Добавить();
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.НомерТелефона = КИ;
		КлиентОбъект.Записать();
		Клиент = КлиентОбъект.Ссылка;
	КонецЕсли;	
	Если ВКИ = "ТелефонКЛ" и Не Контакт.Пустая() Тогда
		КонтактОбъект = Контакт.ПолучитьОбъект();
		СтрокаКИ =  КонтактОбъект.КонтактнаяИнформация.Добавить();
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.НомерТелефона = КИ;
		КонтактОбъект.Записать();
		Контакт = КонтактОбъект.Ссылка;
	КонецЕсли;
	Если ВКИ = "ТелефонПК" и Не ПотенциальныйКлиент.Пустая() Тогда
		ПотенциальныйКлиентОбъект = ПотенциальныйКлиент.ПолучитьОбъект();
		СтрокаКИ =  ПотенциальныйКлиентОбъект.КонтактнаяИнформация.Добавить();
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.НомерТелефона = КИ;
		ПотенциальныйКлиентОбъект.Записать();
		ПотенциальныйКлиент = ПотенциальныйКлиентОбъект.Ссылка;
	КонецЕсли;
	Если ВКИ = "ПочтаКлиента" и Не Клиент.Пустая() Тогда
		КлиентОбъект = Клиент.ПолучитьОбъект();
		СтрокаКИ =  КлиентОбъект.КонтактнаяИнформация.Добавить();
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.АдресЭП = КИ;
		КлиентОбъект.Записать();
		Клиент = КлиентОбъект.Ссылка;
	КонецЕсли;	
	Если ВКИ = "ПочтаКЛ" и Не Контакт.Пустая() Тогда
		КонтактОбъект = Контакт.ПолучитьОбъект();
		СтрокаКИ =  КонтактОбъект.КонтактнаяИнформация.Добавить();
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.АдресЭП = КИ;
		КонтактОбъект.Записать();
		Контакт = КонтактОбъект.Ссылка;
	КонецЕсли;
	Если ВКИ = "ПочтаПК" и Не ПотенциальныйКлиент.Пустая() Тогда
		ПотенциальныйКлиентОбъект = ПотенциальныйКлиент.ПолучитьОбъект();
		СтрокаКИ =  ПотенциальныйКлиентОбъект.КонтактнаяИнформация.Добавить();
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.АдресЭП = КИ;
		ПотенциальныйКлиентОбъект.Записать();
		ПотенциальныйКлиент = ПотенциальныйКлиентОбъект.Ссылка;
	КонецЕсли;
	Если ВКИ = "МессенждерКлиента" и Не Клиент.Пустая() Тогда
		КлиентОбъект = Клиент.ПолучитьОбъект();
		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись, Справочники.Партнеры.ПустаяСсылка());
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, КИ, ВидКИ);
		НоваяСтрока = КлиентОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Представление = КИ;
		НоваяСтрока.ЗначенияПолей = ДанныеКИ;
		НоваяСтрока.Вид           = ВидКИ;
		НоваяСтрока.Тип           = ТипКИ;
		КлиентОбъект.Записать();
		Клиент = КлиентОбъект.Ссылка;
	КонецЕсли;	
	Если ВКИ = "МессенждерКЛ" и Не Контакт.Пустая() Тогда
		КонтактОбъект = Контакт.ПолучитьОбъект();
		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись, Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, КИ, ВидКИ);
		НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Представление = КИ;
		НоваяСтрока.ЗначенияПолей = ДанныеКИ;
		НоваяСтрока.Вид           = ВидКИ;
		НоваяСтрока.Тип           = ТипКИ;
		КонтактОбъект.Записать();
		Контакт = КонтактОбъект.Ссылка;
	КонецЕсли;
	Если ВКИ = "МессенждерПК" и Не ПотенциальныйКлиент.Пустая() Тогда
		ПотенциальныйКлиентОбъект = ПотенциальныйКлиент.ПолучитьОбъект();
		ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(Обращение.УчетнаяЗапись, Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка());
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, КИ, ВидКИ);
		НоваяСтрока = ПотенциальныйКлиентОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Представление = КИ;
		НоваяСтрока.ЗначенияПолей = ДанныеКИ;
		НоваяСтрока.Вид           = ВидКИ;
		НоваяСтрока.Тип           = ТипКИ;
		ПотенциальныйКлиентОбъект.Записать();
		ПотенциальныйКлиент = ПотенциальныйКлиентОбъект.Ссылка;
	КонецЕсли;

	ЗАполнитьРеквизитыИнтересаПоПоиску(, Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТелефонКлиента(Команда)
	ДобавитьКИНаСервере("ТелефонКлиента", ТелефонКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТелефонКЛ(Команда)
	ДобавитьКИНаСервере("ТелефонКЛ", ТелефонКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТелефонПК(Команда)
	ДобавитьКИНаСервере("ТелефонПК", ТелефонКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПочтуКЛ(Команда)
	ДобавитьКИНаСервере("ПочтаКЛ", ПочтаКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПочтуПК(Команда)
	ДобавитьКИНаСервере("ПочтаПК", ПочтаКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПочтуКлиент(Команда)
	ДобавитьКИНаСервере("ПочтаКлиента", ПочтаКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМессенджерПК(Команда)
	ДобавитьКИНаСервере("МессенждерПК", ИДАккаунтаКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМессенджерКЛ(Команда)
	ДобавитьКИНаСервере("МессенждерКЛ", ИДАккаунтаКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМессенджерКлиент(Команда)
	ДобавитьКИНаСервере("МессенждерКлиент", ИДАккаунтаКэш);
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Описание = ВернутьОписаниеСтрокиНайденного(ТекСтрока.Клиент, ТекСтрока.Контакт);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокОбращениеНажатие(Элемент)
	Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Обращение);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.ФормаОбъекта", ПараметрыФормы);
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Обращение);
		ОткрытьФорму("Документ.CRM_СообщениеМессенджера.ФормаОбъекта", ПараметрыФормы);
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Обращение);
		ОткрытьФорму("Документ.CRM_Заявка.ФормаОбъекта", ПараметрыФормы);
	ИначеЕсли ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Обращение);
		ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура сфпВидимостьИДоступностьГруппыСофтфон()
	сфпНомерПеревода = "";
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) И ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") и НЕ ИзАРМ Тогда 
		Элементы.ГруппаКнопкиСофтфона.Видимость = Истина;
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Истина;
		сфпНомерПеревода = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(Ответственный, Истина);
		Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
			Элементы.сфпВнутреннийНомер.Заголовок = Нстр("ru = 'Вн. номер: '") + сфпНомерПеревода;				
			Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
				СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
				Если СтатусЛинии <> Неопределено Тогда
					сфпСтатус = СтатусЛинии;
				Иначе
					сфпСтатус = 2;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.сфпВнутреннийНомер.Заголовок = "";
			сфпСтатус = 3;
		КонецЕсли;
		Если ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(сфпПолучитьИдентификаторЗвонка(Обращение));
			Если НайденныйЗвонок <> Неопределено Тогда
				Элементы.сфпУдержатьЗвонок.Доступность 	= Истина;							
				Элементы.сфпПодтвердитьПеревод.Доступность = Истина;
				Элементы.сфпПереводЗвонка.Доступность = НЕ (сфпНомерПеревода =  сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ТекущийПользователь));				
			Иначе
				Элементы.сфпУдержатьЗвонок.Доступность 	= Ложь;							
				Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;											
				Элементы.сфпПереводЗвонка.Доступность = Ложь;				
			КонецЕсли;
		Иначе
			Элементы.сфпУдержатьЗвонок.Доступность 	= Ложь;													
			Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;														
			Элементы.сфпПереводЗвонка.Доступность = Ложь;							
		КонецЕсли;					
	Иначе
		Элементы.ГруппаКнопкиСофтфона.Видимость = Ложь;				
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Ложь;
	КонецЕсли;				
КонецПроцедуры

&НаСервере
Процедура сфЗаполнитьПоЗвонку()
	ТелефонКэш = Параметры.НомерТелефона;
	Если НЕ Обращение.Пустая() Тогда
		Если ЗначениеЗаполнено(Обращение.АбонентКонтакт) Тогда
			Если ТипЗнч(Обращение.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Контакт = Обращение.АбонентКонтакт;
				Клиент = Обращение.АбонентКонтакт.Владелец;
				СтрокаПоиска = Контакт.Наименование;
			ИначеЕсли ТипЗнч(Обращение.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Клиент = Обращение.АбонентКонтакт;
				СтрокаПоиска = Клиент.Наименование;
			ИначеЕсли ТипЗнч(Обращение.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				ПотенциальныйКлиент = Обращение.АбонентКонтакт;	
				СтрокаПоиска = ПотенциальныйКлиент.Наименование;
			КонецЕсли;	
		КонецЕсли;
		ЗАполнитьРеквизитыИнтересаПоПоиску();
		ВыполнитьПоиск();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаполнитьОснованиеОбращения" И ТипЗнч(Параметр) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Обращение	= Параметр;
		//Если Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение ИЛИ ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
			сфпВидимостьИДоступностьГруппыСофтфон();
		//КонецЕсли;			
	КонецЕсли;
	// +Софтфон
	Если (ИмяСобытия = "СофтФон_КонецРазговора") И (Параметр.Звонок = Обращение) Тогда		
		Если Элементы.сфпПереводЗвонка.Видимость Тогда
			Элементы.сфпПереводЗвонка.Доступность = Ложь;
		КонецЕсли;
		Если Элементы.сфпПодтвердитьПеревод.Доступность Тогда
			Элементы.сфпПодтвердитьПеревод.Доступность = Ложь;
		КонецЕсли;			
		Элементы.сфпУдержатьЗвонок.Доступность = Ложь;
		сфпУдержаниеЗвонка = Ложь;
		
	ИначеЕсли ИмяСобытия = "сфпПерезаполнитьСтатусыЛиний" Тогда		
		Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
			Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
				СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
				
				Если СтатусЛинии <> Неопределено И СтатусЛинии < 0 Тогда
					СтатусЛинии = 0;
				КонецЕсли;
				
				Если (СтатусЛинии = Неопределено ИЛИ СтатусЛинии = 1) И СтатусЛинии = 0 Тогда
					Если СтатусЛинии <> Неопределено Тогда
						сфпСтатус = СтатусЛинии;
					Иначе
						сфпСтатус = 2;
					КонецЕсли;
				ИначеЕсли НЕ сфпСтатус = СтатусЛинии Тогда
					сфпСтатус = СтатусЛинии;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Обращение Тогда
			// Заполняем документ данными из CoMagic
			сфпСтруктураВнешнихДанных = Параметр.СтруктураCoMagic;
			Содержание = Содержание + ?(ЗначениеЗаполнено(Содержание),Символы.ПС,"") 
				+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
				+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
				+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
			//Если ФиксироватьПервичныйИнтерес Тогда
			//	ИмяПредопределенногоЗначения = "ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic";
			//	ИнформацияПоИнтересуКаналПервичногоИнтереса 		= ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
			//	ИнформацияПоИнтересуИсточникПервичногоИнтереса 	= сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(сфпСтруктураВнешнихДанных.comagic_context.campaign);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// +Софтфон
КонецПроцедуры

&НаКлиенте
Процедура ПочтаПриИзменении(Элемент)
	Ошибка = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(Почта);
	Если Ошибка.КодОшибки <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Почта";
		Сообщение.Текст = Ошибка.Сообщение;
		Сообщение.Сообщить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПотенциальныйКлиентОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ПотенциальныйКлиент.Пустая() Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ПотенциальныйКлиент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОткрытияПотенциального", ЭтотОбъект);
		ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта", ПараметрыФормы,,,,, ОписаниеОповещения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияПотенциального(Результат, ДопПараметры) Экспорт
	Организация = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПотенциальныйКлиент, "Организация");		
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	// +СофтФон
	// Не завершаем разговор при закрытии формы
	//сфпПодтвердитьПереводЗвонка("");
	// -СофтФон
	Оповестить("ОбновитьАРМ");
КонецПроцедуры


&НаКлиенте
Процедура ОтменаНовоеКЛ(Команда)
	Элементы.ГруппаФИО.Видимость = Ложь;
	Элементы.Телефон.Видимость = Ложь;
	Элементы.Почта.Видимость = Ложь;
	//Элементы.ИДАккаунта.Видимость = Ложь;
	Элементы.ГруппаКонтакт.Видимость = Истина;
	Элементы.ФИО.КнопкаОчистки = Ложь;
	Элементы.ОтменаНовоеКЛ.Видимость = Ложь;
	Телефон = "";
	ФИО = "";
	Почта = "";
	ТекСтрока = Элементы.РезультатыПоиска.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		СтруктураСтроки = Новый Структура("Партнер, Контакт, ОсновнойМенеджер, ПредставлениеКлиента, ПредставлениеКонтакта", ТекСтрока.Клиент, ТекСтрока.Контакт, ТекСтрока.ОсновнойМенеджер, ТекСтрока.ПредставлениеКлиента, ТекСтрока.ПредставлениеКонтакта);
		ЗАполнитьРеквизитыИнтересаПоПоиску(СтруктураСтроки);
	Иначе	
		ЗАполнитьРеквизитыИнтересаПоПоиску();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти