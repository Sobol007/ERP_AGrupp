
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	КонецЕсли;
	
	Если НЕ Клиент И НЕ Поставщик И НЕ Конкурент И НЕ ПрочиеОтношения ТОгда
		Клиент = Истина;
	КонецЕсли;
	
	//Заполним поля списков выбора
	ЗаполнитьСписокВыбораНаименованиеПрограммы(ЭтаФорма.Параметры.ВидСправочника);
	ЗаполнитьСписокВыбораВидСправочника(ЭтаФорма.Параметры.ВидСправочника);
	
	Если Не ЭтаФорма.Параметры.ВидСправочника = "" Тогда // + скрывать вид справочника + фиксировать тип родительской папки
		ЭтаФорма.ВидСправочника = ЭтаФорма.Параметры.ВидСправочника;
	Иначе
		ЭтаФорма.ВидСправочника = "Партнеры";
	КонецЕсли;
	
	Если Не ЭтаФорма.Параметры.ТипДействия = "" Тогда
		ЭтаФорма.ТипДействия = ЭтаФорма.Параметры.ТипДействия;
	Иначе
		ЭтаФорма.ТипДействия = "Стандартный";
	КонецЕсли;
	
	Если Не ЭтаФорма.Параметры.ВидЦены = "" Тогда
		
		ЭтаФорма.ВидЦены = ЭтаФорма.Параметры.ВидЦены;
		
	КонецЕсли;
	
	Если ЭтаФорма.ВидСправочника = "Партнеры" Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Импорт справочника Клиенты'")
		
	ИначеЕсли  ЭтаФорма.ВидСправочника = "Номенклатура" Тогда
		Если ЭтаФорма.ТипДействия = "Стандартный" Тогда
			ЭтаФорма.Заголовок = НСтр("ru = 'Импорт справочника Товары/услуги'")
		Иначе
			ЭтаФорма.Заголовок = НСтр("ru = 'Загрузка цен товаров и услуг'")
		КонецЕсли;	
		
	ИначеЕсли  ЭтаФорма.ВидСправочника = "Массив" Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Импорт из файла'");
		ЭтаФорма.Элементы.РеквизитыСправочника.Заголовок = НСтр("ru = 'Сопоставление полей таблицы с полями файла'");
		ЭтаФорма.Элементы.ПоляСправочникаСинонимРеквизита.Заголовок = НСтр("ru = 'Поле таблицы'")

	КонецЕсли;
	
	ЭтаФорма.ЭтаФорма.Элементы.ВидСправочника.Видимость = (ЭтаФорма.Параметры.ВидСправочника = ""
															И Не ЭтаФорма.Параметры.ВидСправочника = "Массив"
															И Не ЭтаФорма.Параметры.ВидСправочника = "ЦеныНоменклатуры");
	
	ЭтаФорма.Элементы.ПапкаРодитель.Видимость = (Не ЭтаФорма.Параметры.ВидСправочника = "Массив" И Не ЭтаФорма.ВидСправочника = "Партнеры"
												 И ЭтаФорма.ТипДействия = "Стандартный");
												 
	ЭтаФорма.ПапкаРодитель = ?(ЭтаФорма.ВидСправочника = "Массив", Неопределено, Справочники[ЭтаФорма.ВидСправочника].ПустаяСсылка());
	
	ЭтаФорма.Элементы.ПапкаРодитель.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	Элементы.ГруппаИскатьКлиентовПоАдресам.Видимость = (ВидСправочника = "Партнеры");
	Если Параметры.Свойство("ЗагрузкаВДокумент") Тогда
		ЗагрузкаВДокумент = Параметры.ЗагрузкаВДокумент;
		Заголовок = НСтр("ru = 'Загрузка клиентов в документ'");
		Если ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
			Если ЗагрузкаВДокумент = "Телемаркетинг" Тогда
				Элементы.ИскатьКлиентовПоАдресамEMail.Видимость = Ложь;
				ИскатьКлиентовПоАдресамEMail = Ложь;
			ИначеЕсли ЗагрузкаВДокумент = "РассылкаПисем" Тогда			
				Элементы.ИскатьКлиентовПоТелефонам.Видимость = Ложь;
				ИскатьКлиентовПоТелефонам = Ложь;			
			КонецЕсли;			
			Элементы.ЮрФизЛицо.Видимость = Ложь;
			Элементы.ПапкаРодитель.Видимость = Ложь;	
		КонецЕсли;
	КонецЕсли;			
	
	Если ВидСправочника = "Партнеры" И НЕ ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
		Элементы.ГруппаОтношения.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтношения.Видимость = Ложь;
	КонецЕсли;
	
	Если ВидСправочника = "Номенклатура" Тогда
		Элементы.ГруппаТипНоменклатуры.Видимость = Истина;
	Иначе
		Элементы.ГруппаТипНоменклатуры.Видимость = Ложь;
	КонецЕсли;
	
	
	Если Не Отказ Тогда		
		
		СтруктураПолей = Параметры.СтруктураПолей.Скопировать();		
	
		Если ВидСправочника = "Партнеры" Тогда
			
			// +CRM Модуль
			
			// если выключено раздельное ведение партнеров и контрагентов, контрагент должен создаваться всегда

			ИспользоватьПартнеровКакКонтрагентов = Константы.ИспользоватьПартнеровКакКонтрагентов.Получить();
			
			Если ИспользоватьПартнеровКакКонтрагентов Тогда
				
				СоздаватьКонтрагента = Истина;
				Элементы.СоздаватьКонтрагента.Доступность = Ложь;	
			
			КонецЕсли;
			// -CRM Модуль
			
			// заполним первоначальные настройки 
			ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;			
			
		КонецЕсли;		
		ЗаполнитьРеквизитыСправочника();
		
		Если ЭтаФорма.ВидСправочника = "Номенклатура" Тогда
			Если Не ЭтаФорма.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка() Тогда
				
				НоваяСтрока = Объект.ПоляСправочника.Добавить();
				НоваяСтрока.НаименованиеРеквизита	= "Цена_1";
				НоваяСтрока.СинонимРеквизита		= СокрЛП(ВидЦены.Наименование);
				НоваяСтрока.СправочникСсылка		= ВидЦены;
				
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ВидыЦен.Ссылка
				               |ИЗ
				               |	Справочник.ВидыЦен КАК ВидыЦен
				               |ГДЕ
				               |	НЕ ВидыЦен.ПометкаУдаления
				               |	И ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.Вручную)";
			
				Выборка = Запрос.Выполнить().Выбрать();
				Ном = 0;
				Пока Выборка.Следующий() Цикл
					
					Ном = Ном + 1;
					НоваяСтрока = Объект.ПоляСправочника.Добавить();
					НоваяСтрока.НаименованиеРеквизита	= "Цена_"+Строка(Ном);
					НоваяСтрока.СинонимРеквизита		= СокрЛП(Выборка.Ссылка.Наименование);
					НоваяСтрока.СправочникСсылка		= Выборка.Ссылка;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КодПрограммы = Число(Лев(НаименованиеПрограммы, 1));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПродолжение", ЭтотОбъект, Отказ);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	CRM_ЗаполнитьВсеТипыОтношений();
	CRM_ЗаполнитьТипыОтношений();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПродолжение(Подключено, Отказ) Экспорт
	
	РасширениеПодключено = Подключено;
	Если НЕ РасширениеПодключено И НЕ Отказ Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииВопрос", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Не установлено расширение для работы с файлами в Веб-клиенте! Выполнить установку?'"), РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Отказ = Истина Тогда
		Элементы.ГруппаВсе.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииУстановкаРасширения", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
	Иначе
		Элементы.ГруппаВсе.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииУстановкаРасширения(ДополнительныеПараметры) Экспорт
	
	ПриОткрытии(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ПапкаРодитель"] = Неопределено  И НЕ ТипЗнч(Настройки["ПапкаРодитель"]) = Тип("СправочникСсылка."+ВидСправочника) Тогда
		Настройки["ПапкаРодитель"] = Справочники[ЭтаФорма.ВидСправочника].ПустаяСсылка();
	КонецЕсли;
	
	// +CRM Модуль
	
	// если выключено раздельное ведение партнеров и контрагентов, контрагент должен создаваться всегда
	
	Настройки.Вставить("ИспользоватьПартнеровКакКонтрагентов", Ложь);
	
	Если ВидСправочника = "Партнеры" Тогда

		ИспользоватьПартнеровКакКонтрагентов = Константы.ИспользоватьПартнеровКакКонтрагентов.Получить();
		
		Если ИспользоватьПартнеровКакКонтрагентов Тогда
			
			Настройки.Вставить("СоздаватьКонтрагента", Истина);
			
		КонецЕсли;	
		
		Настройки.Вставить("ИспользоватьПартнеровКакКонтрагентов", ИспользоватьПартнеровКакКонтрагентов);
		
	КонецЕсли;	
	// -CRM Модуль
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ЕдиницаИзмерения"] = Неопределено 
	ИЛИ Настройки["ЕдиницаИзмерения"] = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
		ЕдиницаСсылка = НайтиСоздатьЕдиницу("796", "шт", "Штука", "PCE");
		ЕдиницаИзмерения = ЕдиницаСсылка;
	КонецЕсли;
	
	Если Настройки["ЮрФизЛицо"] = Неопределено Тогда
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
	
	Если Не Настройки["ИспользоватьПартнеровКакКонтрагентов"] Тогда
		
		ПолучитьМакетТаблицуКИСкорректироватьСписокРеквизитов();
		
	КонецЕсли;	
		
	Если ЭтаФорма.ВидСправочника = "Партнеры" Тогда
		ДобавитьУдалитьРеквизитыЮрФизЛица();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПрограммыПриИзменении(Элемент)
	
	КодПрограммы = Число(Лев(НаименованиеПрограммы, 1));
	
	Если НЕ Объект.ИмяФайлаОбмена = "" Тогда
		//MS Outlook
		Если КодПрограммы = 5 Тогда
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".txt") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".csv") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".xls") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		//Outlook Express
		ИначеЕсли КодПрограммы = 6 Тогда
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".csv") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		//The Bat!
		ИначеЕсли КодПрограммы = 7 Тогда	
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".txt") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".csv") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".tdf") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		//Файл MS Excel
		ИначеЕсли КодПрограммы = 4 Тогда
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".xls") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		//Текстовый файл
		ИначеЕсли КодПрограммы <= 3 Тогда
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".txt") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".csv") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".tdf") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	ИмяФайлаОбменаПриИзменении(Неопределено);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаПриИзменении(Элемент)
	ПрочитатьПоляИзВнешнегоФайла();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ПоляФайла.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаОбменаНачалоВыбораЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Все сделанные ранее сопоставления будут утеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыборФайла(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбораЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
		ВыборФайла(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораНаименованиеПрограммы(ВидСправочника);
	НаименованиеПрограммыПриИзменении(ЭтаФорма.Элементы.НаименованиеПрограммы);
	ЗаполнитьРеквизитыСправочника();
	ПапкаРодитель = ПредопределенноеЗначение("Справочник." + ВидСправочника + ".ПустаяСсылка");
	Элементы.ПапкаРодитель.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	Элементы.ПапкаРодитель.Видимость			= (НЕ ВидСправочника = "Партнеры");
	Элементы.ГруппаОтношения.Видимость			= (ВидСправочника = "Партнеры");
	Элементы.ГруппаТипНоменклатуры.Видимость	= (НЕ ВидСправочника = "Партнеры");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВидСправочникаНачалоВыбораПродолжение", ЭтотОбъект, Элемент);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Все сделанные ранее сопоставления будут утеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаНачалоВыбораПродолжение(Ответ, Элемент) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВидСправочникаНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения,Элементы.ВидСправочника.СписокВыбора, Элемент, );
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВидСправочника = ВыбранныйЭлемент.Значение;
		ВидСправочникаПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ВидСправочникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПапкаРодительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПапкаРодитель = ПредопределенноеЗначение("Справочник." + ВидСправочника + ".ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		ЭтоКомпания = 0;
		Элементы.ГруппаВидКомпании.Видимость = Истина;
	Иначе
		ЭтоКомпания = 1;
		Элементы.ГруппаВидКомпании.Видимость = Ложь;
	КонецЕсли;
	ДобавитьУдалитьРеквизитыЮрФизЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		ДополнительныеПараметры.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	НовыеЗначенияТипыОтношений = Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		НовыеЗначенияТипыОтношений.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Поставщик И Не НовыеЗначенияТипыОтношений.Поставщик Тогда
		
		Если НовыеЗначенияТипыОтношений.Перевозчик Тогда
			
			ЭлементПеревозчик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Перевозчик");
			
			ЭлементПеревозчик.Пометка = Ложь;		
	
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.Перевозчик И НовыеЗначенияТипыОтношений.Перевозчик Тогда
	
		Если Не НовыеЗначенияТипыОтношений.Поставщик Тогда
			
			ЭлементПоставщик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Поставщик");
			
			ЭлементПоставщик.Пометка = Истина;		
	
		КонецЕсли;
	
	КонецЕсли; 
		
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Клиент И Не НовыеЗначенияТипыОтношений.Клиент Тогда
		
		Если НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
			
			ЭлементОбслуживаетсяТорговымиПредставителями = CRM_ВсеТипыОтношений.НайтиПоЗначению("ОбслуживаетсяТорговымиПредставителями");
			
			ЭлементОбслуживаетсяТорговымиПредставителями.Пометка = Ложь;		
	
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.ОбслуживаетсяТорговымиПредставителями И НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
	
		Если Не НовыеЗначенияТипыОтношений.Клиент Тогда
			
			ЭлементКлиент = CRM_ВсеТипыОтношений.НайтиПоЗначению("Клиент");
			
			ЭлементКлиент.Пометка = Истина;		
	
		КонецЕсли;
	
	КонецЕсли; 
			
	CRM_ЗаполнитьТипыОтношений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьКонтрагентаПриИзменении(Элемент)
	
	ПолучитьМакетТаблицуКИСкорректироватьСписокРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)
	
	ЭтаФорма.ВидНоменклатуры = ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	ЗаполнитьПоляСправочникаДополнительнымиРеквизитами();
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", ПолучитьМассивОтбораПоТипу());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляСправочника

&НаКлиенте
Процедура ПоляСправочникаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаНаименованиеПоляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = СписокПолейФайла.Скопировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаНаименованиеПоляОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПоляСправочника.ТекущиеДанные;
	Если НЕ ТекущиеДанные.НаименованиеПоляПров = "" Тогда
		УдалитьСтрокуПоляФайла(ТекущиеДанные);
		ТекущиеДанные.НаименованиеПоляПров = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаНаименованиеПоляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПоляСправочника.ТекущиеДанные;
	
	Если ВыбранноеЗначение = НСтр("ru = 'Несколько полей...'") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоляСправочникаНаименованиеПоляОбработкаВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, НаименованиеРеквизита, СписокПолейФайла", Новый Структура("Объект", Объект), ТекущиеДанные.НаименованиеРеквизита, СписокПолейФайла);
		ОткрытьФорму("Обработка.CRM_ЗагрузкаСправочниковИзФайла.Форма.ФормаПодбора", ПараметрыФормы, Элемент,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе	
		
		Если НЕ ТекущиеДанные.НаименованиеПоляПров = "" И НЕ ТекущиеДанные.НаименованиеПоляПров = ВыбранноеЗначение Тогда
			УдалитьСтрокуПоляФайла(ТекущиеДанные);
		КонецЕсли;
		
		Если НЕ ВыбранноеЗначение = "" И НЕ ТекущиеДанные.НаименованиеПоляПров = ВыбранноеЗначение Тогда
			ДобавитьСтрокуПоляФайла(ТекущиеДанные, ВыбранноеЗначение);
			ТекущиеДанные.НаименованиеПоляПров = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаНаименованиеПоляОбработкаВыбораЗавершение(РезультатВыбора, ТекущиеДанные) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ТекущиеДанные.НаименованиеПоля		= ОбработатьРезультатВыбора(ТекущиеДанные, РезультатВыбора);
		ТекущиеДанные.НаименованиеПоляПров	= ТекущиеДанные.НаименованиеПоля;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если НЕ ФайлЗагрузкиВыбран Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл загрузки.'"));
		Возврат;
	КонецЕсли; 
	
	ТекстПредупреждения = "";
	Если НЕ ПроверкаСопоставленияРеквизитовПолям(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// +CRM Модуль в типовой УТ 11/ERP реквизит ВидНоменклатуры является обязательным для заполнения
	Если ВидСправочника = "Номенклатура" И НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите вид номенклатуры.'"));
		Возврат;
	КонецЕсли;
	// -CRM Модуль в типовой УТ 11/ERP реквизит ВидНоменклатуры является обязательным для заполнения
	
	Если НЕ ВидСправочника = "Массив" И ТипДействия = "Стандартный" Тогда
		
		СформироватьТаблицуЗагрузитьСправочник();
		
		//Если ВидСправочника = "Контрагенты" Тогда
		Если ВидСправочника = "Партнеры" Тогда
			ПараметрИмяСправочника = "Клиенты";
			
			// CRM_НастройкаРазделовРешения 
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ЗаписьВыполнена = CRM_НачалоРаботыСПрограммойСервер.ЗаписатьНастроенныйРазделРешения(ПредопределенноеЗначение("Перечисление.CRM_РазделыНастройкиРешения.ПортретКлиента"));
				Если ЗаписьВыполнена Тогда
					Оповестить("ОбновитьНастроенныеРазделы");
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ПараметрИмяСправочника = "Товары/услуги";
			
		КонецЕсли;	
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                         	НСтр("ru = 'Загрузка данных в справочник %1 завершена.'"),
							ПараметрИмяСправочника); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		СформироватьТаблицуЗакрытьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общие

&НаСервере
Процедура ЗаполнитьСписокВыбораНаименованиеПрограммы(ВидСправочникаСтр)
	
	ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Очистить();
	
	Если ВидСправочникаСтр = "" тогда
		
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '1. Текстовый файл (разделитель "","")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '2. Текстовый файл (разделитель "";"")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '3. Текстовый файл (разделитель ""  "")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '4. Файл MS Excel (*.xls)'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("5. MS Outlook");
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("6. Outlook Express");
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("7. The Bat!");

		
		ЭтаФорма.НаименованиеПрограммы	= "5. MS Outlook";
	//ИначеЕсли  ВидСправочникаСтр = "Контрагенты" тогда
	ИначеЕсли  ВидСправочникаСтр = "Партнеры" тогда
		
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '1. Текстовый файл (разделитель "","")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '2. Текстовый файл (разделитель "";"")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '3. Текстовый файл (разделитель ""  "")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '4. Файл MS Excel (*.xls)'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("5. MS Outlook");
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("6. Outlook Express");
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("7. The Bat!");
		
		ЭтаФорма.НаименованиеПрограммы	= "5. MS Outlook";
	ИначеЕсли  ВидСправочникаСтр = "Номенклатура" тогда 
		
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '1. Текстовый файл (разделитель "","")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '2. Текстовый файл (разделитель "";"")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '3 Текстовый файл (разделитель ""  "")'"));
		ЭтаФорма.Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '4. Файл MS Excel (*.xls)'"));
		
		ЭтаФорма.НаименованиеПрограммы	= НСтр("ru = '4. Файл MS Excel (*.xls)'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидСправочника(ВидСправочникаСтр);
	
	
	ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Очистить();
	
	Если ВидСправочникаСтр = "" тогда
		//ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Контрагенты");
		ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Партнеры", НСтр("ru = 'Клиенты'"));
		ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Номенклатура",НСтр("ru = 'Номенклатура'"));
	Иначе		
		//ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Контрагенты");
		ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Партнеры", НСтр("ru = 'Клиенты'"));
		ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Номенклатура",НСтр("ru = 'Номенклатура'"));
		ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Массив");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("Поставщик",			"Поставщик",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("Клиент",				"Покупатель",		Истина);
	Клиент = Истина;
	CRM_ВсеТипыОтношений.Добавить("Конкурент",			"Конкурент",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("Перевозчик",			"Перевозчик",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("ПрочиеОтношения",	"Прочие отношения",	Ложь);
	CRM_ВсеТипыОтношений.Добавить("ОбслуживаетсяТорговымиПредставителями",	"Обслуживается торговыми представителями",	Ложь);
	CRM_ВсеТипыОтношений.Добавить("CRM_Госорганы",		"Госорганы",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("CRM_Учредитель",		"Учредитель",		Ложь);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;
		
		Если ТипОтношений.Значение = "Поставщик"  Тогда
				
			ПоставщикИРезидент = ТипОтношений.Пометка И ЭтоКомпания = 0 И ВидКомпании <> 1;
			//Элементы.НДСпоСтавкам4и2.Доступность = ПоставщикИРезидент;
				
		КонецЕсли;
		Попытка
			ЭтотОбъект[ТипОтношений.Значение] = ТипОтношений.Пометка;
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСправочника()
	
	// Используется только при загрузке из телемаркетинга или рассылки
	Если ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
		Объект.ПоляСправочника.Очистить();
		// добавим наименование, телефон и Email
		НоваяСтрока = Объект.ПоляСправочника.Добавить();
		НоваяСтрока.Обязательный = Истина;
		НоваяСтрока.НаименованиеРеквизита 	= Нстр("ru = 'Наименование'");
		НоваяСтрока.СинонимРеквизита		= Нстр("ru = 'Наименование'");
		
		НоваяСтрока = Объект.ПоляСправочника.Добавить();
		НоваяСтрока.НаименованиеРеквизита = Нстр("ru = 'Телефон'");		
		НоваяСтрока.СинонимРеквизита = Нстр("ru = 'Телефон'");				
		НоваяСтрока.ПризнакКИ = Истина;
		
		НоваяСтрока = Объект.ПоляСправочника.Добавить();
		НоваяСтрока.НаименованиеРеквизита = Нстр("ru = 'Email'");						
		НоваяСтрока.СинонимРеквизита = Нстр("ru = 'Email'");								
		НоваяСтрока.ПризнакКИ = Истина;

		Возврат;
	КонецЕсли;		
	
	ТаблицаКИ = Неопределено;
	
	Объект.ПоляСправочника.Очистить();
	Если СтруктураПолей.Количество() > 0 Тогда
		Для Каждого ЗначениеСписка ИЗ СтруктураПолей Цикл
			НоваяСтрока = Объект.ПоляСправочника.Добавить();
			НоваяСтрока.Обязательный			= Ложь;
			НоваяСтрока.НаименованиеРеквизита	= ЗначениеСписка.Значение; 
			НоваяСтрока.СинонимРеквизита		= ЗначениеСписка.Представление;
		КонецЦикла;	
	Иначе	
		Обработка = РеквизитФормыВЗначение("Объект");
		
		Если ТипДействия = "Стандартный" Тогда
			МассивМакетов = Новый Массив;
			Если ВидСправочника = "Партнеры" Тогда
				ТаблицаКИ = СформироватьТаблицуКИ();
				
				МассивМакетов.Добавить(Обработка.ПолучитьМакет("Партнеры"));
				МассивМакетов.Добавить(Обработка.ПолучитьМакет("КонтактныеЛица"));
				Если СоздаватьКонтрагента Тогда
					МассивМакетов.Добавить(Обработка.ПолучитьМакет("Контрагенты"));				
				КонецЕсли; 
				
			Иначе
				МассивМакетов.Добавить(Обработка.ПолучитьМакет(ВидСправочника));
			КонецЕсли;
		Иначе
			МассивМакетов.Добавить(Обработка.ПолучитьМакет(ТипДействия));
		КонецЕсли;
		
		Для Каждого МакетДляЗаполнения ИЗ МассивМакетов Цикл
			
			ЗаполниттьРеквизитыСправочникаПоМакету(МакетДляЗаполнения, ТаблицаКИ);
			
		КонецЦИкла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляСправочникаДополнительнымиРеквизитами()
	
	ЗаполнитьДополнительныеРеквизиты();
	ОчиститьПоляСправочникаОтДополнительныхРеквизитов();
	
	Разделитель = ?(ВидСправочника = "Партнеры", "_Партнер", "");
	Для Каждого ДопРеквизит Из Объект.ДополнительныеРеквизиты Цикл
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита",ДопРеквизит.Наименование + Разделитель));
		Если НайденыеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ПоляСправочника.Вставить(4);
			НоваяСтрока.НаименованиеРеквизита = ДопРеквизит.Наименование + Разделитель;
			НоваяСтрока.СинонимРеквизита = ВидСправочника + " (" + ДопРеквизит.Наименование+") (доп. реквизит)";
			НоваяСтрока.ДополнительныйРеквизит = Истина;
			НоваяСтрока.СправочникСсылка = ДопРеквизит.Свойство;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляСправочникаОтДополнительныхРеквизитов()
	
	Ном = Объект.ПоляСправочника.Количество();
	
	Пока Ном > 0 Цикл
		Ном = Ном - 1;
		Если НЕ Объект.ПоляСправочника[Ном].ДополнительныйРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		НайденыеСтроки = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Наименование",СтрЗаменить(Объект.ПоляСправочника[Ном].НаименованиеРеквизита, "_Партнер", "")));
		Если НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(Объект.ПоляСправочника[Ном]));
		КонецЕсли;
	КонецЦИкла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты()
	
	Объект.ДополнительныеРеквизиты.Очистить();
	
	Если ВидСправочника = "Партнеры" Тогда
		НаборСвойствОбъекта = ПолучитьНаборыСвойствДляПартнеров();
	Иначе
		НаборСвойствОбъекта = ПолучитьНаборыСвойствДляНоменклатуры();
	КонецЕсли;
	ДополнительныеСвойстваОбъекта = Новый ТаблицаЗначений;
	ДополнительныеСвойстваОбъекта.Колонки.Добавить("Свойство");
	ТаблицаДополнительныхРеквизитов = УправлениеСвойствамиСлужебный.ЗначенияСвойств(ДополнительныеСвойстваОбъекта,НаборСвойствОбъекта, Ложь);
		
	Для Каждого СтрокаТЗ Из ТаблицаДополнительныхРеквизитов Цикл
		
		Если     СтрокаТЗ.ТипЗначения.СодержитТип(Тип("Булево"))
			 ИЛИ СтрокаТЗ.ТипЗначения.СодержитТип(Тип("Число"))
			 ИЛИ СтрокаТЗ.ТипЗначения.СодержитТип(Тип("Дата"))
			 ИЛИ СтрокаТЗ.ТипЗначения.СодержитТип(Тип("Строка"))
			 ИЛИ СтрокаТЗ.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))
			 Тогда
			 
			 Строка = Объект.ДополнительныеРеквизиты.Добавить();
			 ЗаполнитьЗначенияСвойств(Строка,СтрокаТЗ);
			 
		КонецЕсли;
		 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьРезультатВыбора(ТекущиеДанные, КоллекцияФормы)
	
	СтрокаРезультата = "";
	
	Ном = Объект.ПоляФайла.Количество();
	Если НЕ Ном = 0 Тогда
		Пока НЕ Ном = 0 Цикл
			Если Объект.ПоляФайла[Ном-1].НаименованиеРеквизита = ТекущиеДанные.НаименованиеРеквизита Тогда
				Объект.ПоляФайла.Удалить(Ном-1);
			КонецЕсли;
			Ном = Ном - 1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции ИЗ КоллекцияФормы Цикл
		НоваяСтрока = Объект.ПоляФайла.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции, , "НомерСтроки");
		
		СтрокаРезультата = СтрокаРезультата + ?(СтрокаРезультата = "", "", ";") + НоваяСтрока.НаименованиеПоля;
		
	КонецЦикла;
	
	Возврат СтрокаРезультата;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуПоляФайла(ТекущиеДанные)
	
	//МассивСтрок = Объект.ПоляФайла.НайтиСтроки(Новый Структура("НаименованиеРеквизита, НаименованиеПоля", ТекущиеДанные.НаименованиеРеквизита, ТекущиеДанные.НаименованиеПоляПров));
	//Если МассивСтрок.Количество() > 0 Тогда
	//	Объект.ПоляФайла.Удалить(Объект.ПоляФайла.Индекс(МассивСтрок[0]));
	//КонецЕсли;
	Ном = Объект.ПоляФайла.Количество();
	Если НЕ Ном = 0 Тогда
		Пока НЕ Ном = 0 Цикл
			Если Объект.ПоляФайла[Ном-1].НаименованиеРеквизита = ТекущиеДанные.НаименованиеРеквизита Тогда
				Объект.ПоляФайла.Удалить(Ном-1);
			КонецЕсли;
			Ном = Ном - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуПоляФайла(ТекущиеДанные, ВыбранноеЗначение)
	
	НоваяСтрока = Объект.ПоляФайла.Добавить();
	НоваяСтрока.НаименованиеРеквизита	= ТекущиеДанные.НаименованиеРеквизита;
	НоваяСтрока.НаименованиеПоля		= ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ФоновоеЗаданиеПроцент = Прогресс.Процент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
КонецФункции

#КонецОбласти

#Область ЧтениеРазборФайлаЗагрузки

&НаКлиенте
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь, Знач РасширениеПоУмолчанию = "xml", 
	АрхивироватьФайлДанных = Ложь, ВыборФайлаПравил = Ложь)
	
	Если РасширениеПодключено Тогда
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ТекстФайлДанных = НСтр("ru = 'Файл данных'"); 
		//MS Outlook
		Если КодПрограммы = 5 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.txt,*.csv,*.xls,*.xlsx)|*.txt;*.csv;*.xls;*.xlsx";
			ДиалогОткрытияФайла.Расширение					=	"xls";
		//Outlook Express
		ИначеЕсли КодПрограммы = 6 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.csv)|*.csv";
			ДиалогОткрытияФайла.Расширение					=	"csv";
		//The Bat!
		ИначеЕсли КодПрограммы = 7 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.txt,*.tdf,*.csv)|*.txt;*.tdf;*.csv";
			ДиалогОткрытияФайла.Расширение					=	"csv";
		//Файл MS Excel
		ИначеЕсли КодПрограммы = 4 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.xls,*.xlsx)|*.xls;*.xlsx";
			ДиалогОткрытияФайла.Расширение					=	"xls";
		// Текстовый файл
		ИначеЕсли КодПрограммы <= 3 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.txt,*.tdf,*.csv)|*.txt;*.tdf;*.csv";
			ДиалогОткрытияФайла.Расширение					=	"csv";
		КонецЕсли;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора файла необходимо установить расширение для работы с файлами в Веб-клиенте.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайлаОбмена = ВыбранныеФайлы[0];
	КонецЕсли;
	ИмяФайлаОбменаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПоляИзВнешнегоФайла()
	
	СписокПолейФайла.Очистить();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьПоляИзВнешнегоФайлаЗавершение", ЭтотОбъект, Новый структура);
	#Если ВебКлиент Тогда
		НачатьПомещениеФайла(ОписаниеОповещения,,Объект.ИмяФайлаОбмена, Истина, Новый УникальныйИдентификатор);
	#Иначе
		Если Объект.ИмяФайлаОбмена <> "" Тогда
			НачатьПомещениеФайла(ОписаниеОповещения,,Объект.ИмяФайлаОбмена, Ложь, Новый УникальныйИдентификатор);
		конецЕсли;	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПоляИзВнешнегоФайлаЗавершение(Результат, АдресExcel, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ФайлЗагрузкиВыбран = Истина;
		Объект.ИмяФайлаОбмена = ВыбранноеИмяФайла;
		Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранноеИмяФайла));
		
		ИмяФайла                 = ВыбранноеИмяФайла;
		АдресВременногоХранилища = АдресExcel;
		ФоновоеЗадание = ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение);
		НастройкиОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
		Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСДаннымиВТабличныйДокумент", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, РасширениеВыбранногоФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеВыбранногоФайла);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("Расширение", РасширениеВыбранногоФайла);
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru='Загрузка справочников из файла: Выполнение серверного метода загрузка данных из файла';en='Downloading directories from a file: Executing a server method loading data from a file'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Обработки.CRM_ЗагрузкаСправочниковИзФайла.ЗагрузитьФайлВТаблицу",
		ПараметрыВызоваСервера, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗагрузкиФайлаСДаннымиВТабличныйДокумент(ФоновоеЗадание, ДополнительныеПараметры) Экспорт

	Если ФоновоеЗадание.Статус = "Выполнено" Тогда
		АдресФайлаExcell = ФоновоеЗадание.АдресРезультата;
		Excel = ПолучитьИзВременногоХранилища(АдресФайлаExcell);
		
		Если КодПрограммы = 1 Тогда
			СписокПолейФайла = ИзСтрокиСРазделителями(Excel.ПолучитьСтроку(1), ",", Истина);
			// Текстовый файл, разделитель ",".
		ИначеЕсли КодПрограммы = 2 Тогда
			СписокПолейФайла = ИзСтрокиСРазделителями(Excel.ПолучитьСтроку(1), ";", Истина);
			// Текстовый файл, разделитель ";".
		ИначеЕсли КодПрограммы = 3 Тогда
			СписокПолейФайла = ИзСтрокиСРазделителями(Excel.ПолучитьСтроку(1), "Таб", Истина);
		Иначе
			Если нРег(Расширение) = "xls" или нРег(Расширение) = "xlsx" Тогда
				ColumnCount = Excel.ШиринаТаблицы;
			
			СписокПолейФайла = ИзСтрокиExcel(Excel, 1, ColumnCount, Истина);
			ИначеЕсли нРег(Расширение) = "csv" Тогда
				// Outlook Express
				Если КодПрограммы = 6 Тогда
					СписокПолейФайла = ИзСтрокиСРазделителями(Excel.ПолучитьСтроку(1), ";", Истина);
					// Текстовый файл, разделитель ",".
				Иначе
					СписокПолейФайла = ИзСтрокиСРазделителями(Excel.ПолучитьСтроку(1), ",", Истина);
				КонецЕсли;
			ИначеЕсли нРег(Расширение) = "txt" ИЛИ нРег(Расширение) = "tdf" Тогда	
				СписокПолейФайла = ИзСтрокиСРазделителями(Excel.ПолучитьСтроку(1), "Таб", Истина);
			КонецЕсли;
		КонецЕсли;
		
		СписокПолейФайла.Вставить(0, НСтр("ru='Несколько полей...';en='Multiple fields ...'"), НСтр("ru='Несколько полей...';en='Multiple fields ...'"));
		СопоставитьПоляФайлаПолямСправочника();
		
	Иначе
		ВывестиСообщениеОбОшибке(НСтр("ru='Не удалось произвести загрузку данных.';en='Failed to load data.'"), ФоновоеЗадание.КраткоеПредставлениеОшибки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(ТекстОшибкиДляПользователя, ТехническаяИнформация)
	ТекстСообщенияОбОшибке = ТекстОшибкиДляПользователя + Символы.ПС
		+ НСтр("ru = 'Возможная причина: Загружаемые данные некорректные.
					|Техническая информация: %1'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщенияОбОшибке, ТехническаяИнформация));
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоляФайлаПолямСправочника()
	Для Каждого ЗначениеСписка Из СписокПолейФайла Цикл
		Если ЗначениеСписка.Значение = НСтр("ru = 'Несколько полей...'") Тогда
			Продолжить;
		КонецЕсли;
		
		бНайденоПоПредставлению = Ложь;
		НайденнаяСтрока = Неопределено;
		КоличествоНайденных = 0;
		Для Каждого СтрокаТаблицы Из Объект.ПоляСправочника Цикл
			Если НайденнаяСтрока = Неопределено И ВРег(СтрокаТаблицы.НаименованиеРеквизита) = ВРег(ЗначениеСписка.Значение) Тогда
				НайденнаяСтрока = СтрокаТаблицы;
				КоличествоНайденных = КоличествоНайденных + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденнаяСтрока = Неопределено Тогда
			бНайденоПоПредставлению = Истина;
			КоличествоНайденных = 0;
			// пробуем найти по представлению
			Для Каждого СтрокаТаблицы Из Объект.ПоляСправочника Цикл
				Если НайденнаяСтрока = Неопределено И ВРег(СтрокаТаблицы.СинонимРеквизита) = ВРег(ЗначениеСписка.Значение) Тогда
					НайденнаяСтрока = СтрокаТаблицы;
					КоличествоНайденных = КоличествоНайденных + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если бНайденоПоПредставлению И КоличествоНайденных > 1 Тогда
			// неоднозначное соответствие, лучше ничего автоматом не сопоставлять
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.НаименованиеПоля) Или ЗначениеЗаполнено(НайденнаяСтрока.НаименованиеПоляПров) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока.НаименованиеПоля = ЗначениеСписка.Значение;
		НайденнаяСтрока.НаименованиеПоляПров = ЗначениеСписка.Значение;
		
		НайденныеСтроки = Объект.ПоляФайла.НайтиСтроки(Новый Структура("НаименованиеРеквизита,НаименованиеПоля", НайденнаяСтрока.НаименованиеПоля, ЗначениеСписка.Значение));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ДобавитьСтрокуПоляФайла(НайденнаяСтрока, ЗначениеСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Функция формирует список значений из строки с разделителями.
//
// Параметры
//  СтрокаТекста - строка текста с разделителями
//  Разделитель - Строка, разделитель в тексте
//  НаличиеКавычек - Булево, есть ли кавычки вокруг значений в строке
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ИзСтрокиСРазделителями(СтрокаТекста, Разделитель, ПоказыватьСотояние = Ложь)
	
	Если Разделитель = "Таб" Тогда
		Разделитель = Символы.Таб;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	
	ПрошлыйРазделитель = 0;
	КоличествоСимволов = 0;

	ДлинаСтроки = СтрДлина(СтрокаТекста);
	Для а=1 По СтрДлина(СтрокаТекста) Цикл
		
		Если ПоказыватьСотояние Тогда
			Прогресс = Окр(((а) / ДлинаСтроки) * 100);
			Состояние(НСтр("ru = 'Идет чтение файла данных...'"), Прогресс);
		КонецЕсли;
		
		Если Сред(СтрокаТекста,а,1) = Разделитель Тогда
			
			//MS Outlook
			Если Расширение = ".csv" И КодПрограммы = 5 Тогда
				ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1),КоличествоСимволов);
				Если Лев(ВыбранноеЗначение, 1) = """" И Прав(ВыбранноеЗначение, 1) = """" Тогда
					ВыбранноеЗначение = Сред(ВыбранноеЗначение,2,СтрДлина(ВыбранноеЗначение)-2);
				КонецЕсли;
			Иначе
				ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1),КоличествоСимволов);
			КонецЕсли;
			
			//The Bat!
			Если КодПрограммы = 7 Тогда
				ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\22", """");
				ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\2C", "");
			КонецЕсли;
			
			СписокПолей.Добавить(ВыбранноеЗначение);
			ПрошлыйРазделитель = а;
			КоличествоСимволов = 0;
			Продолжить;
		
		КонецЕсли;

		КоличествоСимволов = КоличествоСимволов + 1;
	
	КонецЦикла; 
	
	//MS Outlook
	Если Расширение = ".csv" И КодПрограммы = 5 Тогда
		ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 2),КоличествоСимволов - 2);
	Иначе
		ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1),КоличествоСимволов);
	КонецЕсли;
	
	//The Bat!
	Если КодПрограммы = 7 Тогда
		ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\22", """");
		ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\2C", "");
	КонецЕсли;
	
	СписокПолей.Добавить(ВыбранноеЗначение);
	
	Возврат СписокПолей;

КонецФункции

&НаКлиенте
Функция ИзСтрокиExcel(ExcelЛист, НомерСтроки, ColumnCount, ПоказыватьСотояние = Ложь)
	
	СписокПолей = Новый СписокЗначений;
	
	Для Column = 1 По ColumnCount Цикл
		ОбластьЧтения = ExcelЛист.Область(НомерСтроки, Column, НомерСтроки, Column);
		Попытка 
			СписокПолей.Добавить(ОбластьЧтения.Значение, ОбластьЧтения.Текст);
		Исключение	
			СписокПолей.Добавить(ОбластьЧтения.Текст, ОбластьЧтения.Текст);
		КонецПопытки;	
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТабличныеЧасти(УдалятьРеквизитыСправочника = Ложь)
	
	Объект.ПоляФайла.Очистить();
	
	Если УдалятьРеквизитыСправочника Тогда
		Объект.ПоляСправочника.Очистить();
	Иначе
		Для Каждого СтрокаТЧ ИЗ Объект.ПоляСправочника Цикл
			СтрокаТЧ.НаименованиеПоля = "";
			СтрокаТЧ.НаименованиеПоляПров = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

// Общее

&НаКлиенте
Процедура СформироватьТаблицуЗагрузитьСправочник()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьТаблицуЗагрузитьСправочникЗавершение", ЭтотОбъект);
	
	//Текстовый файл, разделитель ","
	Если КодПрограммы = 1 Тогда
		ЗагрузитьИзТекста(",", ОписаниеОповещения);
	//Текстовый файл, разделитель ";"
	ИначеЕсли КодПрограммы = 2 Тогда
		ЗагрузитьИзТекста(";", ОписаниеОповещения);
	//Текстовый файл, разделитель " "
	ИначеЕсли КодПрограммы = 3 Тогда
		ЗагрузитьИзТекста("Таб", ОписаниеОповещения);
	Иначе
		Если нРег(Расширение) = "xls" Или нРег(Расширение) = "xlsx" Тогда
			МассивФайла  = ЗагрузитьИзExcel();
			СформироватьТаблицуЗагрузитьСправочникЗавершение(МассивФайла, Неопределено);
		ИначеЕсли нРег(Расширение) = "csv" Тогда
			//Outlook Express
			ЗагрузитьИзТекста(?(КодПрограммы = 6,";",","), ОписаниеОповещения);
		ИначеЕсли нРег(Расширение) = "txt" ИЛИ нРег(Расширение) = "tdf" Тогда	
			ЗагрузитьИзТекста("Таб", ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуЗагрузитьСправочникЗавершение(МассивФайла, ДополнгительныеПараметры) Экспорт
	
	МассивСоответствий = СформироватьМассивСоответствий();
	СтруктураДанныхФормы = Новый Структура;
	СтруктураДанныхФормы.Вставить("ВидСправочника"			, ВидСправочника);
	СтруктураДанныхФормы.Вставить("ПапкаРодитель"			, ПапкаРодитель);
	СтруктураДанныхФормы.Вставить("ПоляСправочника"			, Объект.ПоляСправочника);
	СтруктураДанныхФормы.Вставить("ВсегоОбработано"			, 0);               
	СтруктураДанныхФормы.Вставить("Создано"					, 0);
	СтруктураДанныхФормы.Вставить("Найдено"					, 0);
	СтруктураДанныхФормы.Вставить("ЮрФизЛицо" 				, ЮрФизЛицо);
	СтруктураДанныхФормы.Вставить("КодПрограммы"			, КодПрограммы);
//	СтруктураДанныхФормы.Вставить("НаименованиеПрограммы"	, НаименованиеПрограммы);	
	
	//(+Партнеры)
	СтруктураДанныхФормы.Вставить("ДополнительныеРеквизиты",Объект.ДополнительныеРеквизиты);
	СтруктураДанныхФормы.Вставить("ДополнительныеРеквизиты1",ПолучитьДополнительныеРеквизиты());
	
	СтруктураДанныхФормы.Вставить("ИскатьКлиентовПоАдресамEMail", ИскатьКлиентовПоАдресамEMail);
	СтруктураДанныхФормы.Вставить("ИскатьКлиентовПоТелефонам", ИскатьКлиентовПоТелефонам);
	//(-Партнеры)
	
	//(+ Номенклатура)
	СтруктураДанныхФормы.Вставить("ТипНоменклатуры"	,ЭтаФорма.ТипНоменклатуры);
	СтруктураДанныхФормы.Вставить("ВидНоменклатуры"	,ЭтаФорма.ВидНоменклатуры);
	СтруктураДанныхФормы.Вставить("ЕдиницаИзмерения" , ЕдиницаИзмерения);
	ТаблицаЦен.Очистить();
	СтруктураДанныхФормы.Вставить("ТаблицаЦен"	,ЭтаФорма.ТаблицаЦен);
	//(- Номенклатура)
	
	Если ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
		// значит, обработка открыта из телемаркетинга или рассылки писем
		МассивЭлементов = ЗагрузитьНаСервереВДокумент(МассивСоответствий, МассивФайла, СтруктураДанныхФормы);
		Закрыть(МассивЭлементов);
		Возврат;
	Иначе		
		ЗагрузитьНаСервере(МассивСоответствий, МассивФайла, СтруктураДанныхФормы);
	КонецЕсли;		
	
	Если СтруктураДанныхФормы.ВсегоОбработано > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Обработано строк: " + Строка(СтруктураДанныхФормы.ВсегоОбработано) + "'");
		Если СтруктураДанныхФормы.Создано > 0 Тогда
			ТекстСообщения = ТекстСообщения + "
			|" + НСтр("ru = 'Создано новых клиентов: " + Строка(СтруктураДанныхФормы.Создано) + "'");
		КонецЕсли;
		
		Если СтруктураДанныхФормы.Найдено > 0 Тогда
			ТекстСообщения = ТекстСообщения + "
			|" + НСтр("ru = 'Найдено клиентов: "+ Строка(СтруктураДанныхФормы.Найдено) + "'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
	Если СтруктураДанныхФормы.ТаблицаЦен.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура("ТаблицаЦен", СтруктураДанныхФормы.ТаблицаЦен);
		ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта",ПараметрыФормы,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуЗакрытьФорму()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьТаблицуЗакрытьФормуЗавершение", ЭтотОбъект);
	
	//Текстовый файл, разделитель ","
	Если КодПрограммы = 1 Тогда
		ЗагрузитьИзТекста(",", ОписаниеОповещения);
	//Текстовый файл, разделитель ";"
	ИначеЕсли КодПрограммы = 2 Тогда
		ЗагрузитьИзТекста(";", ОписаниеОповещения);
	//Текстовый файл, разделитель " "
	ИначеЕсли КодПрограммы = 3 Тогда
		ЗагрузитьИзТекста("Таб", ОписаниеОповещения);
	Иначе
		Если нРег(Расширение) = ".xls" ИЛИ  нРег(Расширение) = ".xlsx" Тогда
			МассивФайла  = ЗагрузитьИзExcel();
		ИначеЕсли нРег(Расширение) = ".csv" Тогда
			//Outlook Express
			ЗагрузитьИзТекста(?(КодПрограммы = 6,";",","), ОписаниеОповещения);
		ИначеЕсли нРег(Расширение) = ".txt" ИЛИ нРег(Расширение) = ".tdf" Тогда	
			ЗагрузитьИзТекста("Таб", ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуЗакрытьФормуЗавершение(МассивФайла, ДополнительныеПараметры) Экспорт
	
	МассивСоответствий = СформироватьМассивСоответствий();
	СтрокаКлючей = "";
	
	Для Каждого ЗначениеМассива Из МассивСоответствий Цикл
		СтрокаКлючей = СтрокаКлючей + ?(СтрокаКлючей = "","",",") + ЗначениеМассива.ИмяРеквизита;
	КонецЦикла;
	
	РезультатМассив = Новый Массив;
	
	Всего = МассивФайла.Количество();
	Ном = 0;
	Для Каждого ЗначениеМассива ИЗ МассивФайла Цикл
		
		Ном = Ном + 1;
		
		Прогресс = Окр(((Ном) / Всего) * 100);
		Состояние(НСтр("ru = 'Обработка данных...'"), Прогресс);
		
		СтруктураЗначений = Новый Структура(СтрокаКлючей);
		
		ОТК = Ложь;
		Для Каждого ЗначениеМассиваСоответствий ИЗ МассивСоответствий Цикл
			
			ЗначениеРеквизита = "";
			
			Для Каждого ЗначениеСписка ИЗ ЗначениеМассиваСоответствий.СписокИндексовПолей Цикл
				ЗначениеРеквизита = ЗначениеРеквизита + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеРеквизита = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
			КонецЦикла;
			
			СтруктураЗначений[ЗначениеМассиваСоответствий.ИмяРеквизита] = ЗначениеРеквизита;
			
			Если НЕ ЗначениеРеквизита =  "" Тогда ОТК = Истина; КонецЕсли;
		КонецЦикла;
		
		Если ОТК Тогда
			РезультатМассив.Добавить(СтруктураЗначений);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтаФорма.Закрыть(РезультатМассив);	
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаСопоставленияРеквизитовПолям(ТекстПредупреждения)
	
	Если Объект.ПоляФайла.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не сопоставлены реквизиты справочника с полями файла данных.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВидСправочника = "Массив" Тогда
		ТекстПредупреждения = "";
		
		Если ВидСправочника = "Партнеры" Тогда
			Если ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
				Массив = Объект.ПоляСправочника.НайтиСтроки(новый Структура("НаименованиеРеквизита, Обязательный", "Наименование", Истина));
				Если Массив.Количество() = 0 Тогда
					ТекстПредупреждения = НСтр("ru = 'Отсутствует ключевой реквизит ""Наименование.""'");
					Возврат Ложь;
				ИначеЕсли Не ЗначениеЗаполнено(Массив[0].НаименованиеПоля) Тогда
					ТекстПредупреждения = НСтр("ru = 'Реквизит ""Наименование"" обязателен для сопоставления'");
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Массив = Объект.ПоляСправочника.НайтиСтроки(новый Структура("НаименованиеРеквизита, Обязательный", "Наименование_Партнер", Истина));
				Если Массив.Количество() = 0 Тогда
					ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Отсутствует ключевой реквизит ""Партнер (Наименование).""'");
				ИначеЕсли Не ЗначениеЗаполнено(Массив[0].НаименованиеПоля) Тогда
					ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Реквизит ""Партнер (Наименование)"" обязателен для сопоставления'");
				КонецЕсли;
				
				Если СоздаватьКонтрагента Тогда
					Массив = Объект.ПоляСправочника.НайтиСтроки(новый Структура("НаименованиеРеквизита, Обязательный", "Наименование_Контрагент", Истина));
					Если Массив.Количество() = 0 Тогда
						ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Отсутствует ключевой реквизит ""Контрагент (Наименование).""'");
					ИначеЕсли Не ЗначениеЗаполнено(Массив[0].НаименованиеПоля) Тогда
						ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Реквизит ""Контрагент (Наименование)"" обязателен для сопоставления'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Массив = Объект.ПоляСправочника.НайтиСтроки(новый Структура("НаименованиеРеквизита, Обязательный", "Наименование", Истина));
			Если Массив.Количество() = 0 Тогда
				ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Отсутствует ключевой реквизит ""Наименование.""'");
			ИначеЕсли Не ЗначениеЗаполнено(Массив[0].НаименованиеПоля) Тогда
				ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Реквизит ""Наименование"" обязателен для сопоставления'");
			КонецЕсли;
		КонецЕсли;
		
		Возврат (ТекстПредупреждения = "");
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СформироватьМассивСоответствий()
	
	МассивСоответствий = Новый Массив;
	
	Для Каждого СтрокаТЧ ИЗ Объект.ПоляСправочника Цикл
		СписокИП = Новый СписокЗначений;
		Для Каждого СтрокаПолей ИЗ Объект.ПоляФайла Цикл
			Если СтрокаПолей.НаименованиеРеквизита = СтрокаТЧ.НаименованиеРеквизита Тогда
				СписокИП.Добавить(СписокПолейФайла.Индекс(СписокПолейФайла.НайтиПоЗначению(СтрокаПолей.НаименованиеПоля))-1);
			КонецЕсли;
		КонецЦикла;
		Если СписокИП.Количество() > 0 Тогда
			
			СтруктураПолейРеквизитов = Новый Структура("Обязательный, ИмяРеквизита, ПризнакКИ, СсылкаКИ, СписокИндексовПолей, РеквизитСправочник, РеквизитДата, ДополнительныйРеквизит");
			СтруктураПолейРеквизитов.Обязательный				= СтрокаТЧ.Обязательный;
			СтруктураПолейРеквизитов.ИмяРеквизита				= СтрокаТЧ.НаименованиеРеквизита;
			СтруктураПолейРеквизитов.ПризнакКИ					= СтрокаТЧ.ПризнакКИ;
			СтруктураПолейРеквизитов.СсылкаКИ					= СтрокаТЧ.СсылкаКИ;
			СтруктураПолейРеквизитов.РеквизитСправочник			= СтрокаТЧ.РеквизитСправочник;
			СтруктураПолейРеквизитов.РеквизитДата				= СтрокаТЧ.РеквизитДата;
			СтруктураПолейРеквизитов.ДополнительныйРеквизит		= СтрокаТЧ.ДополнительныйРеквизит;
			СтруктураПолейРеквизитов.СписокИндексовПолей		= СписокИП;
			
			МассивСоответствий.Добавить(СтруктураПолейРеквизитов);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСоответствий;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуСправочника(ИмяСправчника,ЗначениеДляПоиска,Родитель = Неопределено,Владелец = Неопределено,Партнер = Неопределено,НовыхЭлементов,НайденоЭлементов)
	
	Если Владелец = Неопределено Тогда
		Ссылка = Справочники[ИмяСправчника].НайтиПоНаименованию(ЗначениеДляПоиска, Истина);
	Иначе
		Ссылка = Справочники[ИмяСправчника].НайтиПоНаименованию(ЗначениеДляПоиска, Истина,,Владелец);
	КонецЕсли;
	
	Если Ссылка = Справочники[ИмяСправчника].ПустаяСсылка() Тогда
		
		НовыхЭлементов = НовыхЭлементов + 1;
		
		//cоздадим новый элемент
		ЭлементСправочника = Справочники[ИмяСправчника].СоздатьЭлемент();
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			ЭлементСправочника.Родитель = Родитель;
		КонецЕсли;
		
		ЭлементСправочника.Наименование = ЗначениеДляПоиска;
		ЭлементСправочника.Заполнить(Неопределено);
		Если НЕ Владелец = Неопределено Тогда
			ЭлементСправочника.Владелец = Владелец;
		КонецЕсли;
		
		Если ИмяСправчника = "Контрагенты" И НЕ Партнер = Неопределено Тогда
			ЭлементСправочника.Партнер = Партнер;
		КонецЕсли;
	Иначе
		
		НайденоЭлементов = НайденоЭлементов + 1;
		
		// Получим объект
		ЭлементСправочника = Ссылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			ЭлементСправочника.Родитель = Родитель;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭлементСправочника;
	
КонецФункции

// Загрузка из Excel

&НаКлиенте
Функция ЗагрузитьИзExcel()
	
	СписокКлючейСтрутуры = "";
	Для а = 0 По (СписокПолейФайла.Количество() - 1) Цикл
		СписокКлючейСтрутуры = СписокКлючейСтрутуры + ?(СписокКлючейСтрутуры = "","",",") + "_" + СокрЛП(а);
	КонецЦикла;
	СписокКлючейСтрутуры = СписокКлючейСтрутуры + ",НомерСтрокиФайла";
	
	МассивФайла = Новый Массив;
	Excel = ПолучитьИзВременногоХранилища(АдресФайлаExcell);	
		
	ColumnCount = Excel.ШиринаТаблицы;
	RowCount = Excel.ВысотаТаблицы;
	
	Для Row = 2 По RowCount Цикл
		
		Прогресс = Окр(((Row) / RowCount) * 100);
		Состояние(НСтр("ru='Получение данных из файла.';en='Data acquisition from a file.'"), Прогресс);
				 
		ЗначенияСтроки = ИзСтрокиExcel(Excel, Row, ColumnCount);
		бЗначенияЗаполнены = Ложь;
		Для Каждого ЗначениеСписка Из ЗначенияСтроки Цикл
			Если ЗначениеЗаполнено(ЗначениеСписка.Значение) Или ЗначениеЗаполнено(ЗначениеСписка.Представление) Тогда
				бЗначенияЗаполнены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не бЗначенияЗаполнены Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолейСправочника = Новый Структура(СписокКлючейСтрутуры);
		
		СтруктураПолейСправочника.НомерСтрокиФайла = Row;
		Для б = 0 По СписокПолейФайла.Количество() - 2 Цикл
		
			СтруктураПолейСправочника["_" + СокрЛП(б)] = СокрЛП(ЗначенияСтроки[б].Значение);
		
		КонецЦикла; 
		
		МассивФайла.Добавить(СтруктураПолейСправочника);
		
	КонецЦикла;
	
	Excel = 0;
	
	Возврат МассивФайла;
	
КонецФункции

// Загрузка из текстового документа.

&НаКлиенте
Процедура ЗагрузитьИзТекста(Разделитель, ОписаниеОповещения)
	
	ТекстФайла = Новый ТекстовыйДокумент;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзТекстаЗавершение", ЭтотОбъект, Новый Структура("ТекстФайла, Разделитель, ОписаниеОповещения", ТекстФайла, Разделитель, ОписаниеОповещения));
	ТекстФайла.НачатьЧтение(ОписаниеОповещения, Объект.ИмяФайлаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТекстаЗавершение(ДополнительныеПараметры) Экспорт
	
	СписокКлючейСтрутуры = "";
	Для а = 0 По (СписокПолейФайла.Количество() - 1) Цикл
		СписокКлючейСтрутуры = СписокКлючейСтрутуры + ?(СписокКлючейСтрутуры = "","",",") + "_" + СокрЛП(а);
	КонецЦикла;
	СписокКлючейСтрутуры = СписокКлючейСтрутуры + ",НомерСтрокиФайла";
		
	МассивФайла = Новый Массив;
	
	ТекстФайла = ДополнительныеПараметры.ТекстФайла;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Для а = 2 По ТекстФайла.КоличествоСтрок() Цикл
		
		Прогресс = Окр(((а) / ТекстФайла.КоличествоСтрок()) * 100);
		Состояние(НСтр("ru = 'Получение данных из файла.'"), Прогресс);
		
		СтрокаКонтакта = ТекстФайла.ПолучитьСтроку(а);
		
		//MS Outlook
		Если КодПрограммы = 5 И НРег(Прав(Объект.ИмяФайлаОбмена,4)) = ".csv" Тогда
			// В MS Outlook каждый контакт в файле с разделителями занимает 2 строки.
			СтрокаКонтакта = СтрокаКонтакта + ТекстФайла.ПолучитьСтроку(а+1);
			а = а + 1;
		КонецЕсли;
		ЗначенияСтроки = ИзСтрокиСРазделителями(СтрокаКонтакта, Разделитель, Истина);
		
		//Если (СписокПолейФайла.Количество()-1) <> ЗначенияСтроки.Количество() Тогда
		//	
		//	Возврат МассивФайла;
		//	//Возврат ТаблицаФайла;
		//	
		//	//Если нРег(Расширение) = ".csv" Тогда
		//	//	Возврат ТаблицаФайла;
		//	//Иначе
		//	//	Для б = ЗначенияСтроки.Количество() По СписокПолейФайла.Количество() Цикл
		//	//		ЗначенияСтроки.Добавить("");
		//	//	КонецЦикла; 
		//	//КонецЕсли; 
		//КонецЕсли; 
		
		СтруктураПолейСправочника = Новый Структура(СписокКлючейСтрутуры);
		
		СтруктураПолейСправочника.НомерСтрокиФайла = а;
		//Для б = 0 По СписокПолейФайла.Количество() - 2 Цикл
		Для б = 0 По ЗначенияСтроки.Количество() -1 Цикл
		
 			СтруктураПолейСправочника["_" + СокрЛП(б)] = СокрЛП(ЗначенияСтроки[б].Значение);
		
		КонецЦикла; 
		
		МассивФайла.Добавить(СтруктураПолейСправочника);
		
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, МассивФайла);
	
КонецПроцедуры

// Передача данных в справочник.

&НаСервере
Процедура ЗагрузитьНаСервере(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
	НайтиСоздатьЭлементыСправочника(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
КонецПроцедуры

&НаСервере
// Создает при необходимости элементы загружаемого справочника
//
Процедура НайтиСоздатьЭлементыСправочника(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
	ВсегоСтрок			= МассивФайла.Количество();
	НовыхЭлементов		= 0;
	НайденоЭлементов	= 0;
	
	ТекСтрока = 0;
	Для Каждого ЗначениеМассива ИЗ МассивФайла Цикл
		
		ТекСтрока = ТекСтрока + 1;
		
		ЗначениеНаименования			= "";
		ЗначениеНаименованияКонтрагента	= "";
		ЗначениеНаименованияКЛ			= "";
		
		СтрокаНаименования = Неопределено;
		
		Если СтруктураДанныхФормы.ВидСправочника = "Номенклатура" Тогда
			Для Каждого ЗначениеМассиваСоответствий ИЗ МассивСоответствий Цикл
				Если ЗначениеМассиваСоответствий.Обязательный Тогда
					СтрокаНаименования = ЗначениеМассиваСоответствий;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ЗначениеСписка ИЗ СтрокаНаименования.СписокИндексовПолей Цикл
				ЗначениеНаименования = ЗначениеНаименования + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименования = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
			КонецЦикла;
		Иначе
			
			Наименование_КЛ	= Неопределено;
			Фамилия_КЛ		= Неопределено;
			Имя_КЛ			= Неопределено;
			Отчество_КЛ		= Неопределено;
			
			Для Каждого ЗначениеМассиваСоответствий ИЗ МассивСоответствий Цикл
				Если ЗначениеМассиваСоответствий.Обязательный Тогда
					Если (Прав(СокрЛП(ЗначениеМассиваСоответствий.ИмяРеквизита),8) = "_Партнер") Тогда
						
						СтрокаНаименования = ЗначениеМассиваСоответствий;
						Для Каждого ЗначениеСписка ИЗ СтрокаНаименования.СписокИндексовПолей Цикл
							ЗначениеНаименования = ЗначениеНаименования + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименования = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
						КонецЦикла;
					ИначеЕсли (Прав(СокрЛП(ЗначениеМассиваСоответствий.ИмяРеквизита),11) = "_Контрагент") Тогда
						
						СтрокаНаименования = ЗначениеМассиваСоответствий;
						Для Каждого ЗначениеСписка ИЗ СтрокаНаименования.СписокИндексовПолей Цикл
							ЗначениеНаименованияКонтрагента = ЗначениеНаименованияКонтрагента + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКонтрагента = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеМассиваСоответствий.ИмяРеквизита  = "Наименование_КЛ" Тогда
					Наименование_КЛ	= ЗначениеМассиваСоответствий;
				ИначеЕсли ЗначениеМассиваСоответствий.ИмяРеквизита  = "CRM_Фамилия_КЛ" Тогда	
					Фамилия_КЛ		= ЗначениеМассиваСоответствий;
				ИначеЕсли ЗначениеМассиваСоответствий.ИмяРеквизита  = "CRM_Имя_КЛ" Тогда
					Имя_КЛ			= ЗначениеМассиваСоответствий;
				ИначеЕсли ЗначениеМассиваСоответствий.ИмяРеквизита  = "CRM_Отчество_КЛ" Тогда	
					Отчество_КЛ		= ЗначениеМассиваСоответствий;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ  Наименование_КЛ = Неопределено Тогда
				Для Каждого ЗначениеСписка ИЗ Наименование_КЛ.СписокИндексовПолей Цикл
					ЗначениеНаименованияКЛ = ЗначениеНаименованияКЛ + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКЛ = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
				КонецЦикла;
			Иначе
				Если НЕ Фамилия_КЛ = Неопределено Тогда 
					Для Каждого ЗначениеСписка ИЗ Фамилия_КЛ.СписокИндексовПолей Цикл
						ЗначениеНаименованияКЛ = ЗначениеНаименованияКЛ + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКЛ = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ Имя_КЛ = Неопределено Тогда 
					Для Каждого ЗначениеСписка ИЗ Имя_КЛ.СписокИндексовПолей Цикл
						ЗначениеНаименованияКЛ = ЗначениеНаименованияКЛ + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКЛ = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ Отчество_КЛ = Неопределено Тогда 
					Для Каждого ЗначениеСписка ИЗ Отчество_КЛ.СписокИндексовПолей Цикл
						ЗначениеНаименованияКЛ = ЗначениеНаименованияКЛ + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКЛ = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураДанныхФормы.ВидСправочника = "Номенклатура" Тогда
			Если СокрЛП(ЗначениеНаименования) = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеДляПоиска = СокрЛП(ЗначениеНаименования);
			
			ЭлементСправочника = ПолучитьСсылкуСправочника(СтруктураДанныхФормы.ВидСправочника,ЗначениеДляПоиска,СтруктураДанныхФормы.ПапкаРодитель,,,НовыхЭлементов,НайденоЭлементов);
			
			ЗаполнитьРеквизитыИзМассиваСоответствий(СтруктураДанныхФормы,ЗначениеМассива,ЭлементСправочника,МассивСоответствий,"Номенклатура");
			
			ЭлементСправочника["ТипНоменклатуры"] = СтруктураДанныхФормы.ТипНоменклатуры;
			
			ЭлементСправочника["ВидНоменклатуры"] = СтруктураДанныхФормы.ВидНоменклатуры;
			
			// +CRM Модуль так как в типовой УТ 11/ERP реквизит ВидНоменклатуры обязательный, и при его выборе 
			// заполняется несколько обязательных реквизитов, помечаем реквизит формы ВидНоменклатуры,
			// как обязательный для заполнения (АвтоОтметкаНезаполненного) и добавляем механизм заполнения
			// реквизитов номенклатуры из вида номенклатуры
			Отказ = Ложь;
			Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(ЭлементСправочника, Истина, Отказ);			
			
			Если ЗначениеЗаполнено(СтруктураДанныхФормы.ЕдиницаИзмерения) Тогда
				ЭлементСправочника.ЕдиницаИзмерения = СтруктураДанныхФормы.ЕдиницаИзмерения;
			ИначеЕсли НЕ ЗначениеЗаполнено(ЭлементСправочника.ЕдиницаИзмерения) Тогда
				ЕдиницаСсылка = НайтиСоздатьЕдиницу("796", "шт", "Штука", "PCE");
				ЭлементСправочника.ЕдиницаИзмерения = ЕдиницаСсылка;
			КонецЕслИ;
			// -CRM Модуль так как в типовой УТ 11/ERP реквизит ВидНоменклатуры обязательный, и при его выборе ...
			
			Если Не Отказ Тогда
				ЭлементСправочника.Записать();
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не удалось загрузить номенклатуру'")+" - " + ЭлементСправочника.Наименование);
			КонецЕсли;
			
		Иначе
			Если СокрЛП(ЗначениеНаименования) = "" И СокрЛП(ЗначениеНаименованияКонтрагента) = ""  И СокрЛП(ЗначениеНаименованияКЛ) = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеДляПоиска		= ЗначениеНаименования;
			ЗначениеДляПоискаКонт	= ЗначениеНаименованияКонтрагента;
			ЗначениеДляПоискаКЛ		= ЗначениеНаименованияКЛ;
			
			Партнер			= ПолучитьСсылкуСправочника("Партнеры",ЗначениеДляПоиска,,,, НовыхЭлементов, НайденоЭлементов);
			ЗаполнитьРеквизитыИзМассиваСоответствий(СтруктураДанныхФормы, ЗначениеМассива, Партнер, МассивСоответствий, "Партнеры");
			Если ПустаяСтрока(Партнер.НаименованиеПолное) Тогда
				Если Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
					Партнер.НаименованиеПолное = СокрЛП(Партнер.CRM_Фамилия + " " + Партнер.CRM_Отчество + " " + Партнер.CRM_Имя);
				Иначе	
					Партнер.НаименованиеПолное = Партнер.Наименование;
				КонецЕсли;	
			КонецЕсли;	
			Для каждого ТипОтношений из CRM_ВсеТипыОтношений Цикл
				Партнер[ТипОтношений.Значение] = ТипОтношений.Пометка;
			КонецЦикла;
			Партнер.ЮрФизЛицо		= СтруктураДанныхФормы.ЮрФизЛицо;
			Партнер.Записать();
			
			ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(Партнер.Ссылка);
			
			Если НЕ ЗначениеДляПоискаКонт = "" Тогда
				Контрагент		= ПолучитьСсылкуСправочника("Контрагенты",ЗначениеДляПоискаКонт,,,Партнер.Ссылка,НовыхЭлементов,НайденоЭлементов);
				ЗаполнитьРеквизитыИзМассиваСоответствий(СтруктураДанныхФормы,ЗначениеМассива,Контрагент,МассивСоответствий,"Контрагенты");
				Контрагент.Записать();
			КонецЕсли;
			
			Если НЕ ЗначениеДляПоискаКЛ = "" Тогда
				КонтактноеЛицо	= ПолучитьСсылкуСправочника("КонтактныеЛицаПартнеров",ЗначениеДляПоискаКЛ,,Партнер.Ссылка,,НовыхЭлементов,НайденоЭлементов);
				ЗаполнитьРеквизитыИзМассиваСоответствий(СтруктураДанныхФормы,ЗначениеМассива,КонтактноеЛицо,МассивСоответствий,"КонтактныеЛицаПартнеров");
				КонтактноеЛицо.Записать();
				
				Если Не ЗначениеЗаполнено(Партнер.CRM_ОсновноеКонтактноеЛицо) Тогда
					
					Партнер.CRM_ОсновноеКонтактноеЛицо = КонтактноеЛицо.Ссылка;
					
					Партнер.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураДанныхФормы.ВидСправочника = "Номенклатура" Тогда 
			Для Каждого СтрокаРеквизитов ИЗ МассивСоответствий Цикл
				Если Лев(СтрокаРеквизитов.ИмяРеквизита,5) = "Цена_" Тогда
					
					МассивСтрокТЧ = СтруктураДанныхФормы.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита", СтрокаРеквизитов.ИмяРеквизита));
					ВидЦены = МассивСтрокТЧ[0].СправочникСсылка;
					
					Значение = "";
					Для Каждого ЗначениеСписка ИЗ СтрокаРеквизитов.СписокИндексовПолей Цикл
						Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
						Значение = СтрЗаменить(Значение, " ", "");
					КонецЦикла;
					
					Если Значение = "" Тогда Продолжить; КонецЕсли;
					
					Попытка
						
						СтрокаЦены = СтруктураДанныхФормы.ТаблицаЦен.Добавить();
						
						СтрокаЦены.Номенклатура	= ЭлементСправочника.Ссылка;
						СтрокаЦены.ВидЦены		= ВидЦены;
						СтрокаЦены.Цена			= Число(Значение);
						
					Исключение	
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Поколдуем над Контактным лицом
		//Если СтруктураДанныхФормы.ВидСправочника = "Контрагенты" Тогда
		Если СтруктураДанныхФормы.ВидСправочника = "Партнеры" Тогда
			Если НЕ СокрЛП(ЗначениеНаименования)= "" И НЕ СокрЛП(ЗначениеНаименованияКЛ)= "" Тогда
				СсылкаКЛ = Справочники.КонтактныеЛицаПартнеров.НайтиПоНаименованию(СокрЛП(ЗначениеНаименованияКЛ), Истина,,Партнер.Ссылка);
				Если СсылкаКЛ = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка() Тогда
					
					ЭлементСправочникаКЛ = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
					ЭлементСправочникаКЛ.Владелец = Партнер.Ссылка;
					ЭлементСправочникаКЛ.Наименование = СокрЛП(ЗначениеНаименованияКЛ);
					ЭлементСправочникаКЛ.Заполнить(Неопределено);
				Иначе
					ЭлементСправочникаКЛ = СсылкаКЛ.ПолучитьОбъект();
				КонецЕсли;
				
				Для Каждого СтрокаРеквизитов ИЗ МассивСоответствий Цикл
					Если НЕ Прав(СтрокаРеквизитов.ИмяРеквизита,3) = "_КЛ" ИЛИ СтрокаРеквизитов.ИмяРеквизита = "Наименование_КЛ" Тогда
						Продолжить;
					КонецЕсли;
					
					Значение = "";
					Для Каждого ЗначениеСписка ИЗ СтрокаРеквизитов.СписокИндексовПолей Цикл
						Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
					КонецЦикла;
					ИмяРеквизита = СтрокаРеквизитов.ИмяРеквизита;
					ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "_КЛ", "");
					//ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "КонтактногоЛица", "");
					
					Если НЕ СтрокаРеквизитов.ПризнакКИ Тогда
						
						Значение = СокрЛП(Значение);
						
						Если СтрокаРеквизитов.РеквизитДата Тогда
							Значение = ПропарситьЗначениеДаты(Значение, СтруктураДанныхФормы.КодПрограммы);
						КонецЕсли;
						
						Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлементСправочникаКЛ[ИмяРеквизита])) Тогда
						
							ПолноеИмя = ЭлементСправочникаКЛ[ИмяРеквизита].Метаданные().ПолноеИмя();
							Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
							
							Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементСправочникаКЛ[ИмяРеквизита])) Тогда
								
							ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементСправочникаКЛ[ИмяРеквизита])) Тогда
								СправочникСсылка = Неопределено;
								СправочникСсылка = Менеджер.НайтиПоНаименованию(Значение);
								Если ЗначениеЗаполнено(СправочникСсылка) Тогда
									ЭлементСправочникаКЛ[ИмяРеквизита] = СправочникСсылка;
								Иначе
									СправочникОбъект = Менеджер.СоздатьЭлемент();
									СправочникОбъект.Наименование = Значение;
									СправочникОбъект.Записать();
									ЭлементСправочникаКЛ[ИмяРеквизита] = СправочникОбъект.Ссылка;
								КонецЕсли;
							КонецЕсли;
						
						Иначе
							ЭлементСправочникаКЛ[ИмяРеквизита] = Значение;
						КонецЕсли;
					Иначе
						Если ЭлементСправочникаКЛ.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
							СтрокаТЧ = ЭлементСправочникаКЛ.КонтактнаяИнформация.Найти(СтрокаРеквизитов.СсылкаКИ, "Вид");
							Если СтрокаТЧ = Неопределено Тогда
								СтрокаТЧ = ЭлементСправочникаКЛ.КонтактнаяИнформация.Добавить();
							КонецЕсли;
							
							ТипИнформации = СтрокаРеквизитов.СсылкаКИ.Тип;
							
							СтрокаТЧ.Тип			= ТипИнформации;
							СтрокаТЧ.Вид			= СтрокаРеквизитов.СсылкаКИ;
							СтрокаТЧ.Представление	= Значение;
							
							Если ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон
							ИЛИ ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
								
								СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Значение);
								
								ЗначенияПолей = Новый СписокЗначений;
								ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,     "КодСтраны");
								ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,     "КодГорода");
								ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона, "НомерТелефона");
								ЗначенияПолей.Добавить(СтруктураНомера.Добавочный,    "Добавочный");
								ЗначенияПолей.Добавить(СтруктураНомера.Комментарий,   "Комментарий");
								
								СтрокаТЧ.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(
										УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(
										CRM_ОбщегоНазначенияСервер.ЗначениеПолейВXML(ЗначенияПолей, СтрокаРеквизитов.СсылкаКИ), СтрокаТЧ.Тип));
								СтрокаТЧ.Представление	= УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
									СтруктураНомера.КодСтраны, СтруктураНомера.КодГорода, СтруктураНомера.НомерТелефона, СтруктураНомера.Добавочный, СтруктураНомера.Комментарий);
							Иначе
								СтрокаТЧ.Значение	= УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Значение, СтрокаРеквизитов.СсылкаКИ);
							КонецЕсли;
							
				
						КонецЕсли;
						//(+Контактная Информация)
						//ИмяРеквизита = "";
						Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
							
							Если СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.АдресПартнера
								ИЛИ 
								СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации
								Тогда
								
								ИмяРеквизита = "CRM_ФактическийАдрес";
							//ИначеЕсли СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдрес
							//	ИЛИ
							//	СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации 
							//	Тогда 
							//	ИмяРеквизита = "CRM_ЮридическийАдрес";
							КонецЕсли;
						Иначе
							ИмяРеквизита = "CRM_" + СтрЗаменить(СтрокаРеквизитов.ИмяРеквизита, "Контрагента", "");
						КонецЕсли;
						Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
							// +CRM Модуль
							ВидКИМобильныйТелефон = ВернутьСсылкуНаВидКИМобильныйТелефонКонтрагента();
							// -CRM Модуль							
							Если СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера 
								ИЛИ 
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица 
								ИЛИ 
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации 
								Тогда
								ИмяРеквизита = "CRM_Телефон";
							ИначеЕсли 
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица
								ИЛИ
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя
								ИЛИ 
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица
								ИЛИ
								// +CRM Модуль
								//СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонЧастногоЛицаКонтрагента
								(ЗначениеЗаполнено(ВидКИМобильныйТелефон) И СтрокаТЧ.Вид = ВидКИМобильныйТелефон)
								// -CRM Модуль								
								ИЛИ
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица
								Тогда
								ИмяРеквизита = "CRM_МобильныйТелефон";
							КонецЕсли;
						КонецЕсли;
						Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
							Если СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица 
								ИЛИ
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера
								ИЛИ
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации
								ИЛИ
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя
								ИЛИ
								СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица
								Тогда
								ИмяРеквизита = "CRM_Email";
							КонецЕсли;
						КонецЕсли;
						//(-Контактная Информация)
						Если ЭлементСправочникаКЛ.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
							ЭлементСправочникаКЛ[ИмяРеквизита] = Значение;
						КонецЕсли;
					КонецЕсли;		
					
				КонецЦикла;
				
				ЭлементСправочникаКЛ.Записать();
				
				// +CRM Модуль перенесено выше
				//
				//Если Не ЗначениеЗаполнено(Партнер.CRM_ОсновноеКонтактноеЛицо) Тогда
				//	
				//	Партнер.CRM_ОсновноеКонтактноеЛицо = ЭлементСправочникаКЛ.Ссылка;
				//	
				//	Партнер.Записать();
				//	
				//КонецЕсли;
				//
				// -CRM Модуль
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Если СтруктураДанныхФормы.ВидСправочника = "Контрагенты" Тогда
	Если СтруктураДанныхФормы.ВидСправочника = "Партнеры" Тогда
		
		СтруктураДанныхФормы.ВсегоОбработано	= ВсегоСтрок;
		СтруктураДанныхФормы.Создано			= НовыхЭлементов;
		СтруктураДанныхФормы.Найдено			= НайденоЭлементов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПропарситьЗначениеДаты(Значение, КодПрограммы)
	
	//Файл MS Excel
	Если КодПрограммы = 4 Тогда
		Если (СтрДлина(Значение) = 10) И (СтрЧислоВхождений(Значение, ".") = 2) И (Найти(Значение,".") = 3) Тогда
			Попытка
				Год		= Прав(Значение,4);
				Месяц	= Сред(Значение,4,2);
				День	= Лев(Значение,2);
				Возврат Дата(Год+Месяц+День);
			Исключение
				Возврат Дата("00010101");
			КонецПопытки;
		ИначеЕсли (СтрДлина(Значение) = 8)  И (СтрЧислоВхождений(Значение, ".") = 2) И (Найти(Значение,".") = 3) Тогда
			Попытка
				Год		= Прав(Значение, 2);
				Месяц	= Сред(Значение, 4, 2);
				День	= Лев(Значение, 2);
				Если Год > Формат(ТекущаяДата(),"ДФ=yy") Тогда
					Возврат Дата("19" + Год + Месяц + День);
				Иначе
					Возврат Дата("20" + Год + Месяц + День);
				КонецЕсли;	
			Исключение
				Возврат Дата("00010101");
			КонецПопытки;	
		Иначе
			Возврат Дата("00010101");
		КонецЕсли;
	КонецЕсли;
	
	//MS Outlook ИЛИ Outlook Express
	Если КодПрограммы = 5 ИЛИ КодПрограммы = 6 Тогда
		Если (СтрДлина(Значение) = 10 И СтрЧислоВхождений(Значение, ".") = 2 И Найти(Значение,".") = 3)
		ИЛИ (СтрДлина(Значение) = 9 И СтрЧислоВхождений(Значение, ".") = 2 И Найти(Значение,".") = 2) Тогда
			
			Попытка
				Год		= Прав(Значение,4);
				Месяц	= Сред(Значение,?(Найти(Значение,".")=2,3,4),2);
				День	= Лев(Значение,?(Найти(Значение,".")=2,1,2));
				Возврат Дата(Год+Месяц+?(Найти(Значение,".")=2,"0"+День,День));
			Исключение
				Возврат Дата("00010101");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//The Bat!
	Если КодПрограммы = 7 Тогда
		Если СтрДлина(Значение) = 8 И СтрЧислоВхождений(Значение, ".") = 0 Тогда
			
			Попытка
				Год		= Лев(Значение,4);
				Месяц	= Сред(Значение,5,2);
				День	= Прав(Значение,2);
				Возврат Дата(Год+Месяц+День);
			Исключение
				Возврат Дата("00010101");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(Значение) = 10 И СтрЧислоВхождений(Значение, ".") = 2 И Найти(Значение,".") = 3 Тогда
		Попытка
			Год		= Прав(Значение,4);
			Месяц	= Сред(Значение,4,2);
			День	= Лев(Значение,2);
			Возврат Дата(Год+Месяц+День);
		Исключение
			Возврат Дата("00010101");
		КонецПопытки;
	ИначеЕсли (СтрДлина(Значение) = 8)  И (СтрЧислоВхождений(Значение, ".") = 2) И (Найти(Значение,".") = 3) Тогда
		Попытка
			Год		= Прав(Значение, 2);
			Месяц	= Сред(Значение, 4, 2);
			День	= Лев(Значение, 2);
			Если Год > Формат(ТекущаяДата(),"ДФ=yy") Тогда
				Возврат Дата("19" + Год + Месяц + День);
			Иначе
				Возврат Дата("20" + Год + Месяц + День);
			КонецЕсли;	
		Исключение
			Возврат Дата("00010101");
		КонецПопытки;	
	Иначе
		Возврат Дата("00010101");
	КонецЕсли;
	
	Возврат Дата("00010101");
	
КонецФункции

// Передача данных в документ "Телемаркетинг".

&НаСервере
Функция ЗагрузитьНаСервереВДокумент(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
	Возврат НайтиПередатьВДокументВыбранныеЭлементы(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
КонецФункции

&НаСервере
Функция НайтиПередатьВДокументВыбранныеЭлементы(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
	МассивПередачиДанных = Новый Массив;
	
	ТекСтрока = 0;
	Для Каждого ЗначениеМассива Из МассивФайла Цикл
		
		ТекСтрока = ТекСтрока + 1;
		
		ЗначениеНаименования = "";
		
		СтрокаНаименования = Неопределено;
		Для Каждого ЗначениеМассиваСоответствий Из МассивСоответствий Цикл
			Если ЗначениеМассиваСоответствий.Обязательный Тогда
				СтрокаНаименования = ЗначениеМассиваСоответствий;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЗначениеСписка Из СтрокаНаименования.СписокИндексовПолей Цикл
			ЗначениеНаименования = ЗначениеНаименования + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименования = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
		КонецЦикла;
		
		Если СокрЛП(ЗначениеНаименования) = ""  Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеДляПоиска = СокрЛП(ЗначениеНаименования);
		
		Ссылка = НайтиПартнераИлиКЛ("Партнеры", ЗначениеДляПоиска, МассивСоответствий, ЗначениеМассива, СтруктураДанныхФормы, Неопределено, ЗагрузкаВДокумент);
				
		Если Ссылка = Справочники.Партнеры.ПустаяСсылка() Тогда
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Клиент", ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
			СтруктураДанных.Вставить("Наименование", ЗначениеДляПоиска);
			
			
			Для Каждого СтрокаРеквизитов Из МассивСоответствий Цикл
				Если НЕ СтрокаРеквизитов.ПризнакКИ  Тогда
					Продолжить;
				КонецЕсли;
				
				Значение = "";
				Для Каждого ЗначениеСписка Из СтрокаРеквизитов.СписокИндексовПолей Цикл
					Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
				КонецЦикла;
				
				// Удалим ведущий и последний пробелы.
				Значение = СокрЛП(Значение);
				
				Если СтрокаРеквизитов.ИмяРеквизита = "Телефон" Тогда
					СтруктураДанных.Вставить("Телефон", Значение);					
				ИначеЕсли СтрокаРеквизитов.ИмяРеквизита = "Email" Тогда				
					СтруктураДанных.Вставить("Почта", Значение);					
				КонецЕсли;							
				
			КонецЦикла;			
			
		Иначе			
			// Получим объект
			ЭлементСправочника = Ссылка.ПолучитьОбъект();
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Клиент", Ссылка);
			СтруктураДанных.Вставить("Наименование", ЭлементСправочника.Наименование);			
			
			Если ЗначениеЗаполнено(ЗагрузкаВДокумент) И ЗагрузкаВДокумент = "Телемаркетинг" Тогда
				
				ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Ссылка, Неопределено, Перечисления.ТипыКонтактнойИнформации.Телефон);
				Если ТаблицаКИ.Количество() > 0 Тогда
					ПредставлениеНомера = ТаблицаКИ[0].Представление;
					СтруктураДанных.Вставить("Телефон", ПредставлениеНомера);
					СтруктураДанных.Вставить("Почта", "");									
				Иначе
					СтруктураДанных.Вставить("Телефон", "");					
					СтруктураДанных.Вставить("Почта", "");									
				КонецЕсли;					
				
			ИначеЕсли ЗначениеЗаполнено(ЗагрузкаВДокумент) И ЗагрузкаВДокумент = "РассылкаПисем" Тогда
				                                           
				ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Ссылка, Неопределено, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);				
				Если ТаблицаКИ.Количество() > 0 Тогда
					ПредставлениеПочты = ТаблицаКИ[0].Представление;
					СтруктураДанных.Вставить("Почта", ПредставлениеПочты);
					СтруктураДанных.Вставить("Телефон", "");					
				Иначе
					СтруктураДанных.Вставить("Телефон", "");					
					СтруктураДанных.Вставить("Почта", "");					
				КонецЕсли;	
				
			Иначе
				СтруктураДанных.Вставить("Телефон", "");					
				СтруктураДанных.Вставить("Почта", "");									
			КонецЕсли;				
			
		КонецЕсли;
		
		МассивПередачиДанных.Добавить(СтруктураДанных);	
		
	КонецЦикла;
	
	Возврат МассивПередачиДанных;
	
КонецФункции	

// ПартнерыКонтакты

&НаСервере
Процедура ДобавитьУдалитьРеквизитыЮрФизЛица()
	
	Если ЭтаФорма.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		//Удалим реквизиты ФИО
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Фамилия_Партнер"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Имя_Партнер"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Отчество_Партнер"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","ДатаРождения_Партнер"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","Пол_Партнер"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","НаименованиеПолное_Партнер"));
		Если НайденыеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ПоляСправочника.Вставить(1);
			НоваяСтрока.Обязательный			= Ложь;
			НоваяСтрока.НаименованиеРеквизита	= "НаименованиеПолное_Партнер";
			НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Партнер (Полное наименование)'");
		КонецЕсли;
		
	ИначеЕсли ЭтаФорма.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","НаименованиеПолное_Партнер"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Фамилия_Партнер"));
		Если НайденыеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ПоляСправочника.Вставить(1);
			НоваяСтрока.Обязательный			= Ложь;
			НоваяСтрока.НаименованиеРеквизита	= "CRM_Фамилия_Партнер";
			НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Партнер (Фамилия)'");
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Имя_Партнер"));
		Если НайденыеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ПоляСправочника.Вставить(2);
			НоваяСтрока.Обязательный			= Ложь;
			НоваяСтрока.НаименованиеРеквизита	= "CRM_Имя_Партнер";
			НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Партнер (Имя)'");
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Отчество_Партнер"));
		Если НайденыеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ПоляСправочника.Вставить(3);
			НоваяСтрока.Обязательный			= Ложь;
			НоваяСтрока.НаименованиеРеквизита	= "CRM_Отчество_Партнер";
			НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Партнер (Отчество)'");
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","ДатаРождения_Партнер"));
		Если НайденыеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ПоляСправочника.Вставить(4);
			НоваяСтрока.Обязательный			= Ложь;
			НоваяСтрока.НаименованиеРеквизита	= "ДатаРождения_Партнер";
			НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Партнер (Дата рождения)'");
			НоваяСтрока.РеквизитДата			= Истина;
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","Пол_Партнер"));
		Если НайденыеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ПоляСправочника.Вставить(5);
			НоваяСтрока.Обязательный			= Ложь;
			НоваяСтрока.НаименованиеРеквизита	= "Пол_Партнер";
			НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Партнер (Пол)'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПартнераИлиКЛ(СправочникСтр, ЗначениеНаименованияПартнераИлиКЛ, МассивСоответствий, ЗначениеМассива, СтруктураДанныхФормы, ПартнерВладелец = Неопределено, ТипДокумента = Неопределено)
	Если СправочникСтр = "Партнеры" Тогда
		Ссылка = Справочники.Партнеры.НайтиПоНаименованию(ЗначениеНаименованияПартнераИлиКЛ, Истина);
	ИначеЕсли СправочникСтр = "КонтактныеЛицаПартнеров" Тогда
		Ссылка = Справочники.КонтактныеЛицаПартнеров.НайтиПоНаименованию(СокрЛП(ЗначениеНаименованияПартнераИлиКЛ), Истина,, ПартнерВладелец);
	Иначе
		Возврат Справочники[СправочникСтр].НайтиПоНаименованию(СокрЛП(ЗначениеНаименованияПартнераИлиКЛ), Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) И СтруктураДанныхФормы.ИскатьКлиентовПоАдресамEMail Тогда
		МассивСсылок = НайтиПоТипуКонтактнойИнформации(СправочникСтр, МассивСоответствий, ЗначениеМассива, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ПартнерВладелец, ТипДокумента);
		Если МассивСсылок.Количество() > 0 Тогда
			Ссылка = МассивСсылок[0];
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ссылка) И СтруктураДанныхФормы.ИскатьКлиентовПоТелефонам Тогда
		МассивСсылок = НайтиПоТипуКонтактнойИнформации(СправочникСтр, МассивСоответствий, ЗначениеМассива, Перечисления.ТипыКонтактнойИнформации.Телефон, ПартнерВладелец, ТипДокумента);
		Если МассивСсылок.Количество() > 0 Тогда
			Ссылка = МассивСсылок[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПоТипуКонтактнойИнформации(СправочникСтр, МассивСоответствий, ЗначениеМассива, ТипКИ, ПартнерВладелец = Неопределено, ТипДокумента = Неопределено)
	ЗначениеКИ = Неопределено;
	Для Каждого ЗначениеМассиваСоответствий ИЗ МассивСоответствий Цикл
		Если	ЗначениеМассиваСоответствий.ПризнакКИ = Истина
			И	ЗначениеЗаполнено(ЗначениеМассиваСоответствий.СсылкаКИ)
			И	ТипЗнч(ЗначениеМассиваСоответствий.СсылкаКИ) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
			И	ЗначениеМассиваСоответствий.СсылкаКИ.Тип = ТипКИ
			И	(СправочникСтр = "КонтактныеЛицаПартнеров" И ВРег(Прав(ЗначениеМассиваСоответствий.ИмяРеквизита, 3)) = "_КЛ"
				Или СправочникСтр = "Партнеры" И Врег(Прав(ЗначениеМассиваСоответствий.ИмяРеквизита, 3)) <> "_КЛ") Тогда
			//
			ЗначениеКИ = "";
			Для Каждого ЗначениеСписка ИЗ ЗначениеМассиваСоответствий.СписокИндексовПолей Цикл
				ЗначениеКИ = ЗначениеКИ + СокрЛП(ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		
		Для Каждого СтрокаРеквизитов Из МассивСоответствий Цикл
			Если НЕ СтрокаРеквизитов.ПризнакКИ  Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = "";
			Для Каждого ЗначениеСписка Из СтрокаРеквизитов.СписокИндексовПолей Цикл
				Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
			КонецЦикла;
			Если ТипДокумента = "Телемаркетинг" И СтрокаРеквизитов.ИмяРеквизита = "Телефон" Тогда
				ЗначениеКИ = СокрЛП(Значение);
				Прервать;
			ИначеЕсли ТипДокумента = "РассылкаПисем" И СтрокаРеквизитов.ИмяРеквизита = "Email" Тогда
				ЗначениеКИ = СокрЛП(Значение);
				Прервать;				
			КонецЕсли;				
		КонецЦикла;			
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ЗначениеКИ) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + СправочникСтр + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	" + ?(ЗначениеЗаполнено(ПартнерВладелец) И СправочникСтр = "КонтактныеЛицаПартнеров", "И КонтактнаяИнформация.Ссылка.Владелец = &ПартнерВладелец", "") + "
		|	И
		|		(
		|		
		|		КонтактнаяИнформация.Представление = &ЗначениеКИ
		|		" + ?(ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "ИЛИ КонтактнаяИнформация.АдресЭП = &ЗначениеКИ", "") + "
		|		" + ?(ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон, "ИЛИ КонтактнаяИнформация.НомерТелефона = &ЗначениеКИ", "") + "
		|		" + ?(ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон, "ИЛИ КонтактнаяИнформация.НомерТелефонаБезКодов = &ЗначениеКИ", "") + "
		|		
		|		)
		|	
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ
		|");
		Запрос.УстановитьПараметр("ЗначениеКИ", ЗначениеКИ);
		Если ЗначениеЗаполнено(ПартнерВладелец) И СправочникСтр = "КонтактныеЛицаПартнеров" Тогда
			Запрос.УстановитьПараметр("ПартнерВладелец", ПартнерВладелец);
		КонецЕсли;
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьДополнительныеРеквизиты()
	Возврат Общегоназначения.ТаблицаЗначенийВМассив(Объект.ДополнительныеРеквизиты.Выгрузить());
КонецФункции

&НаСервере
Функция СформироватьТаблицуКИ()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Представление,
	|	0 КАК флаг,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
	|	И (НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Представление,
	|	1,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)
	|	И (НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Представление,
	|	2,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров)
	|	И (НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	флаг,
	|	Родитель,
	|	РеквизитДопУпорядочивания";
	
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	                                  
	КонтактнаяИнформация.Колонки.Добавить("НаименованиеРеквизита");
	КонтактнаяИнформация.Колонки.Добавить("КомментарийРеквизита");
	Для Каждого СтрокаКИ ИЗ КонтактнаяИнформация Цикл
		Если СтрокаКИ.Вид.Предопределенный Тогда
			СтрокаКИ.НаименованиеРеквизита = Справочники.ВидыКонтактнойИнформации.ПолучитьИмяПредопределенного(СтрокаКИ.Вид);
		Иначе
			СтрокаКИ.НаименованиеРеквизита = СтрокаКИ.Наименование;
		КонецЕсли;
		
		Если СтрокаКИ.флаг = 0 Тогда
			СтрокаКИ.Представление			= НСтр("ru = 'Партнер ('") + СтрокаКИ.Представление + ")";
			СтрокаКИ.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита+"_Партнер";
		ИначеЕсли СтрокаКИ.флаг = 1 Тогда
			СтрокаКИ.Представление			= НСтр("ru = 'Контрагент ('") + СтрокаКИ.Представление + ")";
			СтрокаКИ.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита+"_Контрагент";
		ИначеЕсли СтрокаКИ.флаг = 2 Тогда
			СтрокаКИ.Представление			= НСтр("ru = 'Контактное лицо ('") + СтрокаКИ.Представление + ")";
			СтрокаКИ.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита+"_КЛ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

&НаСервере
Функция ПолучитьНаборыСвойствДляПартнеров() Экспорт
	
	// +CRM Модуль добавлен новый параметр
	Возврат УправлениеСвойствамиПереопределяемый.ПолучитьНаборыСвойствДляПартнеров(Клиент, Конкурент, Поставщик, ПрочиеОтношения); //, ЮрФизЛицо);
	
КонецФункции

&НаСервере
Функция ВернутьСсылкуНаВидКИМобильныйТелефонКонтрагента()
	ВыборкаКИ = Справочники.ВидыКонтактнойИнформации.Выбрать(Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты.Ссылка);
	Пока ВыборкаКИ.Следующий() Цикл
		Если ВРЕГ(ВыборкаКИ.Наименование) = "МОБИЛЬНЫЙ ТЕЛЕФОН" Тогда
			Возврат ВыборкаКИ.Ссылка;
		КонецЕсли;			
	КонецЦикла;		
	Возврат Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
КонецФункции	

// Номенклатура

&НаСервере
Функция ПолучитьНаборыСвойствДляНоменклатуры()
	
	Наборы = Новый СписокЗначений;
	//++ НЕ ГИСМ
	НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства'"));
	
	НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "НаборСвойств");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Свойства для вида номенклатуры'"));
	//-- НЕ ГИСМ
	Возврат Наборы;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное, МеждународноеСокращение)
	
	Ссылка = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда

		СправочникОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.МеждународноеСокращение   = МеждународноеСокращение;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивОтбораПоТипу()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипНоменклатуры",ЭтаФорма.ТипНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ЭтоГруппа = ЛОЖЬ
	|	И ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура УдалитьРеквизитыСправочникаПоМакету(МакетДляЗаполнения, ТаблицаКИ)
	
	НомерСтрокиМакета = 1;
	Пока Истина Цикл
		
		ТекущаяСтрокаМакета = МакетДляЗаполнения.ПолучитьСтроку(НомерСтрокиМакета);
		
		Если ПустаяСтрока(ТекущаяСтрокаМакета) Тогда
			Прервать;
		КонецЕсли;
		
		ПрошлыйРазделитель = 0;
		КоличествоСимволов = 0;
		
		Постфикс = Неопределено;
		Для а=1 По СтрДлина(ТекущаяСтрокаМакета) Цикл
			Если Сред(ТекущаяСтрокаМакета,а,1) = "|" Тогда
				
				ВыбранноеЗначение = Сред(ТекущаяСтрокаМакета,(ПрошлыйРазделитель + 1),КоличествоСимволов);
				
				Если ПрошлыйРазделитель = 0 Тогда
					
					Если НЕ (Прав(СокрЛП(ВыбранноеЗначение),11) = "_Контрагент") Тогда
						Продолжить;
					КонецЕсли;
					
					Постфикс = 1;
					
					НаименованиеРеквизита = СокрЛП(ВыбранноеЗначение);
					
					МассивСтрок = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита",НаименованиеРеквизита));
					Если МассивСтрок.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(МассивСтрок[0]));
					
				КонецЕсли;
				
				ПрошлыйРазделитель = а;
				КоличествоСимволов = 0;
				Продолжить;
			КонецЕсли;
			
			КоличествоСимволов = КоличествоСимволов + 1;
		КонецЦикла;
		
		НомерСтрокиМакета = НомерСтрокиМакета + 1;
	КонецЦикла;
	
	Если НЕ ТаблицаКИ = Неопределено Тогда
		Для Каждого СтрокаКИ ИЗ ТаблицаКИ Цикл
			Если СтрокаКИ.флаг = Постфикс Тогда
				НаименованиеРеквизита = СтрокаКИ.НаименованиеРеквизита;
				
				МассивСтрок = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита",НаименованиеРеквизита));
				Если МассивСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(МассивСтрок[0]));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполниттьРеквизитыСправочникаПоМакету(МакетДляЗаполнения, ТаблицаКИ)
	
	НомерСтрокиМакета = 1;
	ЭтоМакетПартнера = Ложь;
	Пока Истина Цикл
		
		ТекущаяСтрокаМакета = МакетДляЗаполнения.ПолучитьСтроку(НомерСтрокиМакета);
		
		Если ПустаяСтрока(ТекущаяСтрокаМакета) Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = Объект.ПоляСправочника.Добавить();
		
		ПрошлыйРазделитель = 0;
		КоличествоСимволов = 0;
		
		Постфикс = Неопределено;
		Для а=1 По СтрДлина(ТекущаяСтрокаМакета) Цикл
			Если Сред(ТекущаяСтрокаМакета,а,1) = "|" Тогда
				
				ВыбранноеЗначение = Сред(ТекущаяСтрокаМакета,(ПрошлыйРазделитель + 1),КоличествоСимволов);
				
				Если ПрошлыйРазделитель = 0 Тогда
					Если (Прав(СокрЛП(ВыбранноеЗначение),8) = "_Партнер") Тогда
						ЭтоМакетПартнера = Истина;
						Постфикс = 0;
					КонецЕсли;
					Если (Прав(СокрЛП(ВыбранноеЗначение),11) = "_Контрагент") Тогда
						Постфикс = 1;
					КонецЕсли;
					Если (Прав(СокрЛП(ВыбранноеЗначение),3) = "_КЛ") Тогда
						Постфикс = 2;
					КонецЕсли;
					НоваяСтрока.НаименованиеРеквизита	= СокрЛП(ВыбранноеЗначение);
					Если НоваяСтрока.НаименованиеРеквизита = "БизнесРегион_Партнер" Тогда
						//это реквизиты с типом значения Справочник - для них нужна отдельная
						//обработка
						НоваяСтрока.РеквизитСправочник = Истина;
						НоваяСтрока.Обязательный	   = Ложь;
					КонецЕсли;
					
					Если НоваяСтрока.НаименованиеРеквизита = "CRM_Должность_КЛ" Тогда
						//это реквизиты с типом значения Справочник - для них нужна отдельная
						//обработка
						НоваяСтрока.РеквизитСправочник = Истина;
						НоваяСтрока.Обязательный	   = Ложь;
					КонецЕсли;	
					
					Если НоваяСтрока.НаименованиеРеквизита = "ДатаРождения_КЛ" Тогда
						//это реквизиты с типом значения Дата - для них нужна отдельная
						//обработка
						НоваяСтрока.РеквизитДата		= Истина;
						НоваяСтрока.Обязательный		= Ложь;
					КонецЕсли;	
					
				Иначе
					НоваяСтрока.СинонимРеквизита		= СокрЛП(ВыбранноеЗначение);
				КонецЕсли;
				ПрошлыйРазделитель = а;
				КоличествоСимволов = 0;
				Продолжить;
			КонецЕсли;
			
			КоличествоСимволов = КоличествоСимволов + 1;
		КонецЦикла;
		ВыбранноеЗначение = Сред(ТекущаяСтрокаМакета,(ПрошлыйРазделитель + 1),КоличествоСимволов);
		НоваяСтрока.Обязательный = ?(СокрЛП(ВыбранноеЗначение)= "Истина", Истина, Ложь);
		
		НомерСтрокиМакета = НомерСтрокиМакета + 1;
	КонецЦикла;
	
	//Если ЭтоМакетПартнера Тогда
		ЗаполнитьПоляСправочникаДополнительнымиРеквизитами();
	//КонецЕсли;
	
	Если НЕ ТаблицаКИ = Неопределено Тогда
		Для Каждого СтрокаКИ ИЗ ТаблицаКИ Цикл
			Если СтрокаКИ.флаг = Постфикс Тогда
				НоваяСтрока							= Объект.ПоляСправочника.Добавить();
				НоваяСтрока.Обязательный			= Ложь;
				НоваяСтрока.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита;
				НоваяСтрока.СинонимРеквизита		= СтрокаКИ.Представление;
				НоваяСтрока.ПризнакКИ				= Истина;
				НоваяСтрока.СсылкаКИ				= СтрокаКИ.Вид;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМакетТаблицуКИСкорректироватьСписокРеквизитов()
	
	ТаблицаКИ			= СформироватьТаблицуКИ();
	Обработка			= РеквизитФормыВЗначение("Объект");
	МакетДляЗаполнения	= Обработка.ПолучитьМакет("Контрагенты");
	
	Если ЭтаФорма.СоздаватьКонтрагента И ВидСправочника = "Партнеры" Тогда
		ЗаполниттьРеквизитыСправочникаПоМакету(МакетДляЗаполнения, ТаблицаКИ);
	Иначе
		УдалитьРеквизитыСправочникаПоМакету(МакетДляЗаполнения, ТаблицаКИ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
&НаСервереБезКонтекста
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;

	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru = '<без кода>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);

	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыИзМассиваСоответствий(СтруктураДанныхФормы,ЗначениеМассива,ЭлементСправочника,МассивСоответствий,ИмяСправочника)
	
	Для Каждого СтрокаРеквизитов ИЗ МассивСоответствий Цикл
		
		Если ИмяСправочника = "Номенклатура" Тогда
			Если СтрокаРеквизитов.Обязательный ИЛИ Лев(СтрокаРеквизитов.ИмяРеквизита,5) = "Цена_" Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если ИмяСправочника = "Партнеры" Тогда
				Если СтрокаРеквизитов.Обязательный ИЛИ НЕ (Прав(СокрЛП(СтрокаРеквизитов.ИмяРеквизита),8) = "_Партнер") Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
				Если СтрокаРеквизитов.Обязательный ИЛИ НЕ (Прав(СокрЛП(СтрокаРеквизитов.ИмяРеквизита),11) = "_Контрагент") Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ИмяСправочника = "КонтактныеЛицаПартнеров" Тогда
				Если СтрокаРеквизитов.Обязательный ИЛИ НЕ (Прав(СокрЛП(СтрокаРеквизитов.ИмяРеквизита),3) = "_КЛ") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Значение = "";
		Для Каждого ЗначениеСписка ИЗ СтрокаРеквизитов.СписокИндексовПолей Цикл
			Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
		КонецЦикла;
		
		// удалим ведущий и последний пробелы
		Значение = СокрЛП(Значение);
		
		Если НЕ СтрокаРеквизитов.ПризнакКИ И НЕ СтрокаРеквизитов.ДополнительныйРеквизит Тогда
			Если ИмяСправочника = "Номенклатура" И СтрокаРеквизитов.ИмяРеквизита = "ТипНоменклатуры" Тогда
				ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = Перечисления.ТипыНоменклатуры[Значение];
			Иначе
				Если ИмяСправочника = "Партнеры" Тогда
					ИмяРеквизита = СтрЗаменить(СтрокаРеквизитов.ИмяРеквизита, "_Партнер", "");
				ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
					ИмяРеквизита = СтрЗаменить(СтрокаРеквизитов.ИмяРеквизита, "_Контрагент", "");
				ИначеЕсли ИмяСправочника = "КонтактныеЛицаПартнеров" Тогда
					ИмяРеквизита = СтрЗаменить(СтрокаРеквизитов.ИмяРеквизита, "_КЛ", "");
				Иначе
					ИмяРеквизита = СтрокаРеквизитов.ИмяРеквизита;
				КонецЕсли;
				
				Если СтрокаРеквизитов.РеквизитСправочник Тогда
					Если ИмяСправочника = "Партнеры" И ИмяРеквизита = "БизнесРегион" И НЕ СтрокаРеквизитов.ДополнительныйРеквизит Тогда
						Если ЗначениеЗаполнено(Значение) Тогда 
							СтрокаРегион = Справочники.БизнесРегионы.НайтиПоНаименованию(Значение,Истина);
							Если СтрокаРегион.Пустая() Тогда
								СтрокаРегион = Справочники.БизнесРегионы.СоздатьЭлемент();
								СтрокаРегион.Наименование	= Значение;
								попытка 
									СтрокаРегион.Записать();
									Значение = СтрокаРегион.Ссылка;
								исключение
									Сообщить(ОписаниеОшибки());
								конецпопытки;
							Иначе
								Значение = СтрокаРегион.Ссылка;
							КонецЕсли;
						Иначе
							Значение = Справочники.БизнесРегионы.ПустаяСсылка();
						КонецЕсли;
						ЭлементСправочника[ИмяРеквизита] = Значение;
					КонецЕсли;
					
					Если ИмяСправочника = "КонтактныеЛицаПартнеров" И ИмяРеквизита = "CRM_Должность" И НЕ СтрокаРеквизитов.ДополнительныйРеквизит Тогда
						Если ЗначениеЗаполнено(Значение) Тогда 
							СтрокаДолжности = Справочники.CRM_Должности.НайтиПоНаименованию(Значение,Истина);
							Если СтрокаДолжности.Пустая() Тогда
								СтрокаДолжности = Справочники.CRM_Должности.СоздатьЭлемент();
								СтрокаДолжности.Наименование	= Значение;
								попытка 
									СтрокаДолжности.Записать();
									Значение = СтрокаДолжности.Ссылка;
								исключение
									Сообщить(ОписаниеОшибки());
								конецпопытки;
							Иначе
								Значение = СтрокаДолжности.Ссылка;
							КонецЕсли;
						Иначе
							Значение = Справочники.CRM_Должности.ПустаяСсылка();
						КонецЕсли;
						ЭлементСправочника[ИмяРеквизита] = Значение;
					КонецЕсли;
					
					
				ИначеЕсли СтрокаРеквизитов.РеквизитДата Тогда	
					
					ЭлементСправочника[ИмяРеквизита] = ПропарситьЗначениеДаты(Значение, СтруктураДанныхФормы.КодПрограммы);
					
				Иначе
					Если ИмяРеквизита = "Пол" Тогда
						Если СокрЛП(Значение) = "Мужской" Тогда
							ЭлементСправочника[ИмяРеквизита] = Перечисления.ПолФизическогоЛица.Мужской;
						ИначеЕсли СокрЛП(Значение) = "Женский" Тогда
							ЭлементСправочника[ИмяРеквизита] = Перечисления.ПолФизическогоЛица.Женский;
						КонецЕсли;
					ИначеЕсли ИмяРеквизита = "СтавкаНДС" Тогда
						ЗначениеПеречисленияНДС = ОбменССайтамиУТ.СтавкаНДСПоЗначениюПриЗагрузке(Строка(Значение));
						ЭлементСправочника[ИмяРеквизита] = ЗначениеПеречисленияНДС;
					ИначеЕсли ЭлементСправочника.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
						ЭлементСправочника[ИмяРеквизита] = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаРеквизитов.ДополнительныйРеквизит Тогда
			
			ИмяРеквизита = СтрЗаменить(СтрокаРеквизитов.ИмяРеквизита, "_Партнер", "");
			
			мСвойств = СтруктураДанныхФормы.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Наименование",ИмяРеквизита));
			Свойство = Неопределено;
			
			Если мСвойств.Количество() > 0 Тогда
				ДанныеФормыСвойство = мСвойств[0];
			Иначе
				Продолжить;
			КонецЕсли;
			
			ПВХСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ДанныеФормыСвойство.Наименование);
			Если Не ЗначениеЗаполнено(ПВХСвойство) Тогда
				Продолжить;	
			КонецЕсли;
			
			Свойство = ПВХСвойство.Ссылка;
			//ПолучимЗначение 
			ДопРеквизитыЭлемента = ЭлементСправочника.ДополнительныеРеквизиты;
			
			НайденыеСтрокиДопРекв = ДопРеквизитыЭлемента.НайтиСтроки(
					Новый Структура("Свойство",Свойство)
				);
			РедактированиеСтроки = Ложь;
			Если НайденыеСтрокиДопРекв.Количество() > 0 Тогда 
				РедактированиеСтроки = Истина;
				СтрокаТаблицы = НайденыеСтрокиДопРекв[0];
			Иначе
				СтрокаТаблицы = ЭлементСправочника.ДополнительныеРеквизиты.Добавить();	
			КонецЕсли;
			
			СтрокаТаблицы.Свойство = Свойство;
			Если Значение = "" И РедактированиеСтроки Тогда
				ЭлементСправочника.ДополнительныеРеквизиты.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			
			
			Если Свойство.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				СтрокаТаблицы.Значение = СтрЗаменить(Строка(Значение), Символы.НПП, "");		
			ИначеЕсли Свойство.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				// +CRM
				//СтрокаТаблицы.Значение = Свойство.ТипЗначения.ПривестиЗначение(Значение);
				СтрокаТаблицы.Значение = ПропарситьЗначениеДаты(Значение, СтруктураДанныхФормы.КодПрограммы);
				// -CRM
				
			ИначеЕсли Свойство.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				
				СтрокаТаблицы.Значение = Свойство.ТипЗначения.ПривестиЗначение(Значение);
			// +CRM	
			ИначеЕсли Свойство.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				СтрокаТаблицы.Значение = Значение;
				ИначеЕсли Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Валюты")) Тогда
					Выборка = Справочники.Валюты.Выбрать();
					НайденныйЭлемент = Справочники.Валюты.ПустаяСсылка();
					Пока Выборка.Следующий() Цикл
						Если НРег(Выборка.НаименованиеПолное) = НРег(Значение) Тогда
							НайденныйЭлемент = Выборка.Ссылка;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
						СтрокаТаблицы.Значение	= НайденныйЭлемент;
					Иначе
						КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
						КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
						ЗаписьОКВ = КлассификаторТаблица.Найти(Значение, "Name"); 
						Если НЕ (ЗаписьОКВ = Неопределено) Тогда
							ЭлементЗначения								= Справочники.Валюты.СоздатьЭлемент();
							ЭлементЗначения.Код							= ЗаписьОКВ.Code;
							ЭлементЗначения.Наименование				= ЗаписьОКВ.CodeSymbol;
							ЭлементЗначения.НаименованиеПолное			= ЗаписьОКВ.Name;
							ЭлементЗначения.ЗагружаетсяИзИнтернета		= ЗаписьОКВ.RBCLoading;
							ЭлементЗначения.ПараметрыПрописи			= ЗаписьОКВ.NumerationItemOptions;
							ЭлементЗначения.Записать();
							СтрокаТаблицы.Значение						= ЭлементЗначения.Ссылка;
						КонецЕсли;	
					КонецЕсли;
			// -CRM
			ИначеЕсли Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда					
				
				Выборка = Справочники.ЗначенияСвойствОбъектов.Выбрать(,Свойство,Новый Структура("Наименование",Значение));
				
				Если Выборка.Следующий() Тогда
					СтрокаТаблицы.Значение = Выборка.Ссылка;
				Иначе
					ЭлементЗначения = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
					ЭлементЗначения.Владелец = Свойство;
					ЭлементЗначения.Наименование = Значение;
					ЭлементЗначения.Записать();
					СтрокаТаблицы.Значение  = ЭлементЗначения.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если ЭлементСправочника.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
				СтрокаТЧ = ЭлементСправочника.КонтактнаяИнформация.Найти(СтрокаРеквизитов.СсылкаКИ, "Вид");
				Если СтрокаТЧ = Неопределено Тогда
					СтрокаТЧ = ЭлементСправочника.КонтактнаяИнформация.Добавить();
				КонецЕсли;
				
				ТипИнформации = СтрокаРеквизитов.СсылкаКИ.Тип;
				
				СтрокаТЧ.Тип			= ТипИнформации;
				СтрокаТЧ.Вид			= СтрокаРеквизитов.СсылкаКИ;
				СтрокаТЧ.Представление	= Значение;
				
				Если ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон
				ИЛИ ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
					
					СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Значение);
					
					ЗначенияПолей = Новый СписокЗначений;
					ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,     "КодСтраны");
					ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,     "КодГорода");
					ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона, "НомерТелефона");
					ЗначенияПолей.Добавить(СтруктураНомера.Добавочный,    "Добавочный");
					ЗначенияПолей.Добавить(СтруктураНомера.Комментарий,   "Комментарий");
					
					СтрокаТЧ.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(
							УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(
								CRM_ОбщегоНазначенияСервер.ЗначениеПолейВXML(ЗначенияПолей, СтрокаРеквизитов.СсылкаКИ), СтрокаТЧ.Тип));
					СтрокаТЧ.Представление	= УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
						СтруктураНомера.КодСтраны, СтруктураНомера.КодГорода, СтруктураНомера.НомерТелефона, СтруктураНомера.Добавочный, СтруктураНомера.Комментарий);
				Иначе
					СтрокаТЧ.Значение	= УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Значение, СтрокаРеквизитов.СсылкаКИ);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаОтношений(Элемент)
	
	ЗаполнитьПоляСправочникаДополнительнымиРеквизитами();
	
КонецПроцедуры

