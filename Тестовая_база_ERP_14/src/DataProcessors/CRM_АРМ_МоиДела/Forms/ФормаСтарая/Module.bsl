
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно открыть АРМ ""Мои дела"". Подсистема 1С:CRM не используется! (см. Персональные настройки пользователя)';en='It is impossible to open the workstation ""My work"". Subsystem 1C: CRM is not used! (see Personal settings of the user)'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Попытка
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	//Исключение
	//	Отказ = Истина;
	//	Возврат;
	//КонецПопытки;
	
	Попытка
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	ТекущаяДатаВремя = ТекущаяДатаСеанса();

	Элементы.ОсновныеОтборы.ЦветФона = Новый Цвет(220, 220, 220);
	СрокНовойЗадачи = ТекущаяДатаСеанса();
	CRM_ОбщегоНазначенияКлиентСервер.ЗаполнитьСписокВыбораВремени(СписокВыборВремени, ВремяНовойЗадачи); 
	ВидАРМ = "Канбан";
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект, Истина);
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	ВидимостьВиджетов = ХранилищеОбщихНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПанельВиджетов");
	ПоказыватьВиджетыПриОткрытии = ?(ВидимостьВиджетов <> Неопределено, ВидимостьВиджетов, Ложь);
	Элементы.ГруппаВиджеты.Видимость = ПоказыватьВиджетыПриОткрытии;
	
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	Элементы.СкрытьОтобразитьВиджеты.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Элементы.ГруппаВиджеты.Видимость = НЕ ЭтоРазделенныйРежимРаботы И ПоказыватьВиджетыПриОткрытии;
	
	ТекущийПользовательПриИзмененииНаСервере();
	
	СписокПериодов.Добавить("ПроизвольныйПериод", НСтр("ru = 'Произвольный период'"));
	СписокПериодов.Добавить("Сегодня", НСтр("ru = 'Сегодня'"));
	СписокПериодов.Добавить("3 дня", НСтр("ru = '3 дня'"));
	СписокПериодов.Добавить("Неделя", НСтр("ru = 'Неделя'"));
	СписокПериодов.Добавить("Месяц", НСтр("ru = 'Месяц'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыМоиДелаНаВебКлиенте");
	#Иначе
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыМоиДелаНаКлиенте");
	#КонецЕсли	
	#Область Виджеты
	Если ПоказыватьВиджетыПриОткрытии Тогда
		Для Каждого ЭлементСписка Из СписокВиджетовПользователя Цикл
			Если Число(ЭлементСписка.Представление) <= 4 Тогда
				ПериодОбновленияВиджета = ПолучитьПериодОбновленияВиджетаНаСервере(ЭлементСписка.Значение, ЭлементСписка.Представление);
				ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ЭлементСписка.Представление, ПериодОбновленияВиджета);
			ИначеЕсли Число(ЭлементСписка.Представление) = 5 Тогда
				ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_Прочие", 3600);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ Открыта() Тогда Возврат; КонецЕсли;
	
	Если Источник = ЭтотОбъект Тогда Возврат; КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьВиджеты" Тогда
		ОбновитьВиджетыФормы();
	ИначеЕсли ИмяСобытия = "CRM_УстановленФлагОбработано" Тогда
		ОбновитьОтборы();
	ИначеЕсли ИмяСобытия = "ОбновитьАРМ" ИЛИ ИмяСобытия = "ЗадачаВыполнена" Тогда
		ОбновитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыборВариантаОтбора(Форма, Команда)
	
	
	Если Команда.Имя = "ОтборПериод" Тогда
		ИмяСтраницы = "ЗначенияОтбораПериод";
	ИначеЕсли Команда.Имя = "ОтборТеги" Тогда
		ИмяСтраницы = "ЗначенияОтбораТеги";
	ИначеЕсли Команда.Имя = "ОтборСегменты" Тогда
		ИмяСтраницы = "ЗначенияОтбораСегменты";
	ИначеЕсли Команда.Имя = "БыстрыеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораБыстрыеОтборы";
	ИначеЕсли Команда.Имя = "ОсновныеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораОсновныеОтборы";
	ИначеЕсли Команда.Имя = "ПрочиеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораПрочиеОтборы";
	Иначе
		Возврат;
	КонецЕсли;
	
	СтраницаКОтображению = Элементы.Найти(ИмяСтраницы);
	Если СтраницаКОтображению = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельЗначенийОтбора.Видимость И Элементы.ПанельЗначенийОтбора.ТекущаяСтраница = СтраницаКОтображению Тогда
		Элементы.ПанельЗначенийОтбора.Видимость = Ложь;
		Элементы[Команда.Имя].ЦветФона   = Новый Цвет;
		Элементы[Команда.Имя].ЦветТекста = WebЦвета.Черный;
	Иначе
		Элементы.ПанельЗначенийОтбора.Видимость = Истина;
		Элементы.ПанельЗначенийОтбора.ТекущаяСтраница = СтраницаКОтображению;
		Если Элементы.Найти("ОтборПериод") <> Неопределено Тогда
			Элементы.ОтборПериод.ЦветФона   = Новый Цвет;
			Элементы.ОтборПериод.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если Элементы.Найти("ОтборТеги") <> Неопределено Тогда
			Элементы.ОтборТеги.ЦветФона   = Новый Цвет;
			Элементы.ОтборТеги.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если Элементы.Найти("БыстрыеОтборы") <> Неопределено Тогда
			Элементы.БыстрыеОтборы.ЦветФона   = Новый Цвет;
			Элементы.БыстрыеОтборы.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если Элементы.Найти("ОсновныеОтборы") <> Неопределено Тогда
			Элементы.ОсновныеОтборы.ЦветФона   = Новый Цвет;
			Элементы.ОсновныеОтборы.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если Элементы.Найти("ПрочиеОтборы") <> Неопределено Тогда
			Элементы.ПрочиеОтборы.ЦветФона   = Новый Цвет;
			Элементы.ПрочиеОтборы.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;

		//Элементы[Команда.Имя].ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
		Элементы[Команда.Имя].ЦветФона = ОбщегоНазначенияВызовСервера.ЦветСтиля("CRM_ОсновнойГолубой");
		Элементы[Команда.Имя].ЦветТекста = WebЦвета.Белый;
		СтраницаКОтображению.Видимость = Истина;
		Для каждого СтраницаЗначенийОтбора из Элементы.ПанельЗначенийОтбора.ПодчиненныеЭлементы Цикл
			Если СтраницаЗначенийОтбора <> СтраницаКОтображению Тогда
				СтраницаЗначенийОтбора.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицыСервер()
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		ЭлементыПользовательскихНастроек = ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
			Если ТипЗнч(Элемент) = ТипЗнч(ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.Настройки.Порядок) Тогда
				Элемент.Элементы.Очистить();
				Если ОтборВключатьПросроченные <> -1 Тогда
					УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
					УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
					УсловиеСортировки.ТипУпорядочивания = ?(ОтборВключатьПросроченные = 1, НаправлениеСортировкиКомпоновкиДанных.Возр, НаправлениеСортировкиКомпоновкиДанных.Убыв);
					УсловиеСортировки.Использование = Истина;
				КонецЕсли;
				УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				УсловиеСортировки.Использование = Истина;
				УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
			КонецЕсли;    
		КонецЦикла;
	КонецЦикла;
	МассивТаблиц.Добавить("ТаблицаВходящие");
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].Обновить();
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
	КонецЦикла;
	Заголовок = НСтр("ru='Мои дела';en='My Affairs'")+" / "+ ТекущийПользователь +" / " + ПредставлениеПериода;
КонецПроцедуры

&НаСервере
Процедура ОбработатьСменуПериодаОтбораСервер(ВариантПериода, Элемент)
	
	Результат = Ложь;
	
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	
	Период = ОтборСозданы[НомерПериода];
	ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
	Если Элемент<>Неопределено Тогда
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Не Период.Пометка;
		КонецЕсли;
		
		// Вариант периода может быть выбран только один.
		Для Индекс = 0 По ОтборСозданы.Количество()-1 Цикл
			
			ЭлементСпискаПериодов = ОтборСозданы[Индекс];
			Если ЭлементСпискаПериодов <> Период Тогда
				ЭлементСпискаПериодов.Пометка = Ложь;
			КонецЕсли;
			
			Если Индекс = 0 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыПроизвольныйПериод;
				Если НЕ ЭлементСпискаПериодов.Пометка Тогда
					ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
				КонецЕсли;
			ИначеЕсли Индекс = 1 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыСегодня;
			ИначеЕсли Индекс = 2 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗа3Дня;
			ИначеЕсли Индекс = 3 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаНеделю;
			ИначеЕсли Индекс = 4 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаМесяц;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭлементСпискаПериодов.Пометка Тогда
				Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
					ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
				КонецЕсли;
			Иначе
				ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
			КонецЕсли;
			
		КонецЦикла;
		
		УстановленоОтборов = 0;
		ПозицияНачало = Найти(Элементы.ОтборПериод.Заголовок, " (");
		Если ПозицияНачало <> 0 Тогда
			Элементы.ОтборПериод.Заголовок = Лев(Элементы.ОтборПериод.Заголовок, ПозицияНачало-1);
		КонецЕсли;
		
		Если УстановленоОтборов <> 0 Тогда
			Элементы.ОтборПериод.Заголовок = Элементы.ОтборПериод.Заголовок + " (" + УстановленоОтборов + ")";
		КонецЕсли;
	КонецЕсли;
	ЗначениеПериода = СписокПериодов.НайтиПоЗначению(ВариантПериода);
	Если ЗначениеПериода<>Неопределено Тогда
		ПредставлениеПериода = ЗначениеПериода.Представление;
	КонецЕсли;
	ОбновитьОтборыНаСервере();
	ОбновитьТаблицыСервер();
	ОбновитьЗаголовкиТаблиц();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВариантПериода = Настройки.Получить("ВариантПериода");
	ПериодОтбора =  Настройки.Получить("ПериодОтбора");
	ОтборСозданы[0].Значение = ПериодОтбора;
	
	ОтборВключатьПросроченные = Настройки.Получить("ОтборВключатьПросроченные");
	
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	ВыборВариантаОтбора(ЭтотОбъект, Элементы.БыстрыеОтборы);
	Если НЕ ЗначениеЗаполнено(ВариантПериода) Тогда
		ВариантПериода = "Неделя"
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОтборВключатьПросроченные) Тогда
		ОтборВключатьПросроченные = 2;
	КонецЕсли;
	
	УстановленоОтборов = 0;
	ПозицияНачало = Найти(Элементы.ПрочиеОтборы.Заголовок, " (");
	Если ПозицияНачало <> 0 Тогда
		Элементы.ПрочиеОтборы.Заголовок = Лев(Элементы.ПрочиеОтборы.Заголовок, ПозицияНачало-1);
	КонецЕсли;
	
	Если УстановленоОтборов <> 0 Тогда
		Элементы.ПрочиеОтборы.Заголовок = Элементы.ПрочиеОтборы.Заголовок + " (" + УстановленоОтборов + ")";
	КонецЕсли;
	
	ОбработатьСменуПериодаОтбораСервер(ВариантПериода, 1);
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОткрытиеФормыМоиДелаНаСервере", ВремяНачалаЗамера, 1);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	
	ТекущийПользовательПриИзмененииНаСервере();
	СформироватьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеОтборы(Элемент)
	
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборы(Элемент)
	
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериод(Элемент)
	
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Элемент)
	
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНовойЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборВремениЗавершение = Новый ОписаниеОповещения("ВыборВремениЗавершение", ЭтотОбъект);
	ТекущееВремя = СписокВыборВремени.НайтиПоЗначению(ВремяНовойЗадачи);
	ПоказатьВыборИзСписка(ВыборВремениЗавершение, СписокВыборВремени, Элемент, ТекущееВремя);
КонецПроцедуры

&НаКлиенте
Процедура ВыборВремениЗавершение(Время, ДополнительныеПараметры) Экспорт
	Если Время <> Неопределено Тогда
		ВремяНовойЗадачи = Время.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СрокНовойЗадачиПриИзменении(Элемент)
	ПроверитьДатуНовойЗадачи()
КонецПроцедуры

&НаКлиенте
Процедура ТекстНовойЗадачиПриИзменении(Элемент)
	
	Если НЕ Элементы.СрокНовойЗадачи.Видимость Тогда
		СоздатьНовуюЛичнуюЗадачу(ТекстНовойЗадачи);
		ТекстНовойЗадачи = "";
		ОбновитьТаблицы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНовойЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ТекстНовойЗадачи = Элемент.ТекстРедактирования;
	КонецЕсли;	
	Элементы.СрокНовойЗадачи.Видимость				= НЕ Элементы.СрокНовойЗадачи.Видимость;
	Элементы.ВремяНовойЗадачи.Видимость				= НЕ Элементы.ВремяНовойЗадачи.Видимость;
	Элементы.СоздатьЗадачу.Видимость				= НЕ Элементы.СоздатьЗадачу.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если ПараметрыПеретаскивания.Значение = Неопределено Тогда
		ПараметрыПеретаскивания.Значение = Элемент.ТекущаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтложенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда Возврат КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	НовыйКлюч = ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Отложенные", Строка);
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Отложенные");
	Элементы.ТаблицаОтложенные.ТекущаяСтрока = НовыйКлюч;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда Возврат КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	НовыйКлюч = ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Текущие", Строка);
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Текущие");
	Элементы.ТаблицаТекущие.ТекущаяСтрока = НовыйКлюч;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда Возврат КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	// обработать завершение задачи
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	Если ТипЗнч(ОбъектДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОбъектДействия, "CRM_Личная") И ТипЗнч(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОбъектДействия, "Предмет"))<>Тип("ДокументСсылка.CRM_Интерес") Тогда
			ЗавершитьЗадачу(ОбъектДействия);
			Оповестить("ОбновитьАРМ",, ЭтотОбъект);
		Иначе
			ТекущаяАктивность = ОбъектДействия;
			ПодключитьОбработчикОжидания("ОткрытьФормуТекущейАктивности",0.1, Истина);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектДействия) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ТекущаяАктивность = ОбъектДействия;
		ПодключитьОбработчикОжидания("ОткрытьФормуТекущейАктивности",0.1, Истина);
		Возврат;
	ИначеЕсли ТипЗнч(ОбъектДействия) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		Если ПроверитьВозможностьПеретаскивания(ПараметрыПеретаскивания.Значение, "Завершенные") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаРезультата", ЭтотОбъект, ПараметрыПеретаскивания.Значение);
			ПоказатьВводСтроки(ОписаниеОповещения, CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбъектДействия, "Результат"), НСтр("ru = 'Введите результат'"), , Истина);
		КонецЕсли;
		Возврат;
	Иначе		
		ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Завершенные", Строка);
	КонецЕсли;
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Завершенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтложенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	СтруктураСтроки = ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока);
	ПоказатьЗначение(,СтруктураСтроки.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанныеОбъект = ПолучитьОбъектСтроки(ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанныеОбъект <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанныеОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыСегодняНажатие(Элемент)
	ВариантПериода = "Сегодня";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	ВариантПериода = "3 дня";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	
	ВариантПериода = "Неделя";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)

	ВариантПериода = "Месяц";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	
	ВариантПериода = "ПроизвольныйПериод";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОчиститьНажатие(Элемент)
	ВариантПериода = "";
	
	
	Для Индекс = 0 По ЭтаФорма.ОтборСозданы.Количество()-1 Цикл
		
		ЭлементСпискаПериодов = ЭтаФорма.ОтборСозданы[Индекс];
		ЭлементСпискаПериодов.Пометка = Ложь;
		
		Если Индекс = 0 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыПроизвольныйПериод;
			ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
		ИначеЕсли Индекс = 1 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыСегодня;
		ИначеЕсли Индекс = 2 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗа3Дня;
		ИначеЕсли Индекс = 3 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗаНеделю;
		ИначеЕсли Индекс = 4 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗаМесяц;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСпискаПериодов.Пометка Тогда
			//ЭлементОтображенияПериода.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоЗначенияОтбора");
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
			
		Иначе
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	Период = ОтборСозданы[0];
	ПериодОтбора = ОтборСозданы[0].Значение;
	ПредставлениеПериода = ПредставлениеПериода(ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания, );
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВключатьПросроченныеПриИзменении(Элемент)
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПисьмаПриИзменении(Элемент)
	ТекущийПользовательПриИзмененииНаСервере();
	ОбновитьЗаголовкиТаблиц();	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗвонкиПриИзменении(Элемент)
	ТекущийПользовательПриИзмененииНаСервере();
	ОбновитьЗаголовкиТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ОбновитьОтборы();
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#Область Виджеты

&НаКлиенте
Процедура ДобавитьВиджет(Элемент)
	
	Если КоличествоВиджетовНаФорме = 99 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВиджетЗавершение", ЭтотОбъект, Новый Структура);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокОткрытыхВиджетов", СписокВиджетовПользователя);
	ПараметрыФормы.Вставить("ФормаВиджеты", Истина);
	
	ОткрытьФорму("Справочник.CRM_Виджеты.ФормаВыбора",
		ПараметрыФормы, ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВиджетЗавершение(ВыбранныйВиджет, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВиджет = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДанныеВиджета = ДобавитьВиджетФормы(ВыбранныйВиджет);
	
	Если ДанныеВиджета <> Неопределено Тогда
		Если Число(ДанныеВиджета.ИндексВиджета) <= 4 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДанныеВиджета.ИндексВиджета, ДанныеВиджета.ПериодОбновленияВиджета);
		ИначеЕсли Число(ДанныеВиджета.ИндексВиджета) = 5 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_Прочие", 3600);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВиджета = Прав(ТекущийЭлемент.Имя,2);
	Виджет = Неопределено;
	
	Для Каждого ЭлементСписка Из СписокВиджетовПользователя Цикл
		Если ЭлементСписка.Представление = ИндексВиджета Тогда
			Виджет = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Виджет) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "УдалитьВиджет") Тогда
		УдалитьВиджетФормы(Виджет);
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "ОткрытьПоказатель") Тогда
		ПоказатьЗначение( ,Виджет);
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "НастройкаВиджета") Тогда
		ОповещениеНастройкаВиджета = Новый ОписаниеОповещения("НастройкаВиджетаЗавершение", ЭтотОбъект, Новый Структура("Виджет, ИндексВиджета", Виджет, ИндексВиджета));
		ПараметрыФормы = Новый Структура("Виджет, ИндексВиджета, ТекущийПользователь", Виджет, ИндексВиджета, ТекущийПользователь);
		ОткрытьФорму("Справочник.CRM_Виджеты.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеНастройкаВиджета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Расшифровать") Тогда
		Показатель = ПолучитьИсточникДанныхВиджета(Виджет);
		ЗначениеАналитики = CRM_РаботаСВиджетамиВызовСервера.ПолучитьЗначениеАналитикиИзНастроекВиджета(Виджет, ИндексВиджета, ТекущийПользователь);
		Если ТипЗнч(ЗначениеАналитики) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей = Новый Массив;
			МассивПользователей.Добавить(ЗначениеАналитики);
		Иначе
			МассивПользователей = CRM_УправлениеЦелевымиПоказателямиСервер.ДоступныеПользователи(Истина);
		КонецЕсли;
		CRM_УправлениеЦелевымиПоказателямиКлиент.ОткрытьРасшифровкуПоказателя(Показатель, МассивПользователей);
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Обновить") Тогда
		ОбновитьВиджетыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВиджетаЗавершение(НовыеНастройки, ДополнительныеПараметры) Экспорт
	
	Если НовыеНастройки <> Неопределено Тогда
		Если НовыеНастройки = Ложь Тогда
			УдалитьВиджетФормы(ДополнительныеПараметры.Виджет);
			Возврат;
		КонецЕсли;
		ОбновитьВиджетНаСервере(ДополнительныеПараметры.ИндексВиджета);
		Если Число(ДополнительныеПараметры.ИндексВиджета) <= 4 Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДополнительныеПараметры.ИндексВиджета);
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДополнительныеПараметры.ИндексВиджета, НовыеНастройки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВид(Команда)
	УстановитьПараметрыФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьГруппировкуВходящие(Команда)
	
	Элементы.ТаблицаВходящие.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьГруппировкуПоКатегории(Команда)
	ВключитьОтключитьГруппировкуПоКатегорииНаСервере();
	Элементы.ТаблицаТекущие.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОткрючитьГруппировкуПоДате(Команда)
	
	ВключитьОткрючитьГруппировкуПоДатеНаСервере();
	Элементы.ТаблицаТекущие.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРегистр(Команда)
	
	ЗаполнитьРегистрНаСервере();
	ОбновитьДанные("Входящие", "Отложенные");
	ОбновитьДанные("Текущие", "Завершенные");
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщик(Команда)
	ЕстьЛиды = ЕстьЛидыВВыбранныхСтроках();
	Если ЕстьЛиды Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкрытьПисьмоИзАРМПланировщикЗавершение", ЭтотОбъект, ЕстьЛиды);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения",, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		СкрытьПисьмоИзАРМНаСервере();
		Оповестить("ОбновитьАРМ",, ЭтотОбъект);
		Элементы.ТаблицаВходящие.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьВиджеты(Команда)
	ПоказыватьВиджетыПриОткрытии = НЕ ПоказыватьВиджетыПриОткрытии;
	Элементы.ГруппаВиджеты.Видимость = ПоказыватьВиджетыПриОткрытии;
	СохранитьНастройкуПоказыватьВиджеты(ЭтотОбъект.ИмяФормы, ПоказыватьВиджетыПриОткрытии);
	
	Если ПоказыватьВиджетыПриОткрытии Тогда
		ОбновитьВиджетыФормы();
		Для Каждого ЭлементСписка Из СписокВиджетовПользователя Цикл
			Если Число(ЭлементСписка.Представление) <= 4 Тогда
				ПериодОбновленияВиджета = ПолучитьПериодОбновленияВиджетаНаСервере(ЭлементСписка.Значение, ЭлементСписка.Представление);
				ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ЭлементСписка.Представление, ПериодОбновленияВиджета);
			ИначеЕсли Число(ЭлементСписка.Представление) = 5 Тогда
				ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_Прочие", 3600);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Для Каждого ЭлементСписка Из СписокВиджетовПользователя Цикл
			Если Число(ЭлементСписка.Представление) <= 4 Тогда
				ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ЭлементСписка.Представление);
			ИначеЕсли Число(ЭлементСписка.Представление) = 5 Тогда
				ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_Прочие");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРММоиДела"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	
	Если НЕ ПроверитьДатуНовойЗадачи() Тогда
		Возврат;
	КонецЕсли;
	СоздатьНовуюЛичнуюЗадачу(ТекстНовойЗадачи, СрокНовойЗадачи + Час(ВремяНовойЗадачи)*3600 + Минута(ВремяНовойЗадачи)*60);
	ТекстНовойЗадачи = "";
	ОбновитьТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьЗаголовок()
	
	Заголовок = НСтр("ru='Мои дела';en='My Affairs'")+" / "+ ТекущийПользователь +" / " + ПредставлениеПериода;
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДатуНовойЗадачи()
	
	Если CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(СрокНовойЗадачи, ВремяНовойЗадачи)<ТекущаяДата() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата задачи меньше текущей даты!';en='The task date is less than the current date!'"), , "ВремяНовойЗадачи", "ВремяНовойЗадачи");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УбратьВыделенныестроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("ТаблицаВходящие");
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	МассивТаблиц.Удалить(МассивТаблиц.Найти(Элемент.Имя));
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
		Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистрНаСервере()
	
	CRM_РаботаАРМСервер.ПервоначальноеЗаполнениеАРМ();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиТаблиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыАРМ.ИзмерениеАРМ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ОбъектыАРМ.Объект) КАК Объект
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
	|ГДЕ
	|	CRM_ОбъектыАРМ.Пользователь = &Пользователь
	|И ВЫБОР
	|		КОГДА НЕ &ОтображатьПисьма
	|			ТОГДА НЕ CRM_ОбъектыАРМ.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|И ВЫБОР
	|		КОГДА НЕ &ОтображатьЗвонки
	|			ТОГДА НЕ CRM_ОбъектыАРМ.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	//ДоплнительныеОтборы
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ОбъектыАРМ.ИзмерениеАРМ";
	
		
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтображатьЗвонки", НЕ ОтображатьЗвонки);
	Запрос.УстановитьПараметр("ОтображатьПисьма", НЕ ОтображатьПисьма);
	Запрос.УстановитьПараметр("ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Заголовок", "%"+СтрокаПоискаОтбор+"%");
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	СтрокаДопОтборов = "";
	Если ОтборВключатьПросроченные = -1 Тогда
		СтрокаДопОтборов = "И ВЫБОР
		|			КОГДА (CRM_ОбъектыАРМ.КрайнийСрок < &ПериодПросроченных	И CRM_ОбъектыАРМ.КрайнийСрок > &ПустаяДата) И CRM_ОбъектыАРМ.ИзмерениеАРМ <> ""Завершенные""
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|   ";	
	КонецЕсли;	
	Если СтрокаПоискаОтбор <> "" Тогда
		СтрокаДопОтборов = СтрокаДопОтборов + "И CRM_ОбъектыАРМ.Заголовок Подобно &Заголовок
		|   ";
	КонецЕсли;	
	Если ВариантПериода <> "" Тогда
		Если ВариантПериода = "ПроизвольныйПериод" Тогда
			НомерПериода = 0;
		ИначеЕсли ВариантПериода = "Сегодня" Тогда
			НомерПериода = 1;
		ИначеЕсли ВариантПериода = "3 дня" Тогда
			НомерПериода = 2;
		ИначеЕсли ВариантПериода = "Неделя" Тогда
			НомерПериода = 3;
		ИначеЕсли ВариантПериода = "Месяц" Тогда
			НомерПериода = 4;
		КонецЕсли;
		Период = ОтборСозданы[НомерПериода];
		Запрос.УстановитьПараметр("НачДатаОтбора", Период.Значение.ДатаНачала);
		Запрос.УстановитьПараметр("КонДатаОтбора", Период.Значение.ДатаОкончания);
		
		СтрокаДопОтборов = СтрокаДопОтборов + "И CRM_ОбъектыАРМ.КрайнийСрок <= &КонДатаОтбора
		|   ";
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДоплнительныеОтборы", СтрокаДопОтборов);
	ТабСчетчика = Запрос.Выполнить().Выгрузить();
	СтрокаИзмерение = ТабСчетчика.Найти("Входящие", "ИзмерениеАРМ");
	Если СтрокаИзмерение <> Неопределено Тогда
		Элементы["Заголовок"+СтрокаИзмерение.ИзмерениеАРМ].Заголовок = НСтр("ru = 'Входящие'")+" ("+СтрокаИзмерение.Объект+")";
	Иначе	
		Элементы["ЗаголовокВходящие"].Заголовок = НСтр("ru = 'Входящие'")+" (0)";
	КонецЕсли;	
	СтрокаИзмерение = ТабСчетчика.Найти("Отложенные", "ИзмерениеАРМ");
	Если СтрокаИзмерение <> Неопределено Тогда
		Элементы["Заголовок"+СтрокаИзмерение.ИзмерениеАРМ].Заголовок = НСтр("ru = 'Отложенные'")+" ("+СтрокаИзмерение.Объект+")";
	Иначе	
		Элементы["ЗаголовокОтложенные"].Заголовок = НСтр("ru = 'Отложенные'")+" (0)";	
	КонецЕсли;
	СтрокаИзмерение = ТабСчетчика.Найти("Текущие", "ИзмерениеАРМ");
	Если СтрокаИзмерение <> Неопределено Тогда
		Элементы["Заголовок"+СтрокаИзмерение.ИзмерениеАРМ].Заголовок = НСтр("ru = 'Текущие'")+" ("+СтрокаИзмерение.Объект+")";
	Иначе	
		Элементы["ЗаголовокТекущие"].Заголовок = НСтр("ru = 'Текущие'")+" (0)";	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПисьмоИзАРМНаСервере(ПричинаОтказа=Неопределено, Комментарий="")
	Если Элементы.ТаблицаВходящие.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого  ТекСтрока Из Элементы.ТаблицаВходящие.ВыделенныеСтроки Цикл
			Если ТекСтрока <> Неопределено Тогда
				Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_Заявка") Тогда
					Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ТекСтрока.Объект) Тогда
						РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ТекСтрока.Объект, Справочники.CRM_СостоянияЛидов.Отклонен,, ПричинаОтказа, Комментарий); 
					КонецЕсли;
					Об = ТекСтрока.Объект.ПолучитьОбъект();
					Об.CRM_СкрытьВАРМ = Истина;
					Об.Записать();
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЕстьЛидыВВыбранныхСтроках()
	МассивСсылок = Новый Массив;
	Для Каждого  ТекСтрока Из Элементы.ТаблицаВходящие.ВыделенныеСтроки Цикл
		МассивСсылок.Добавить(ТекСтрока.Объект);
	КонецЦикла;
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЕстьЛидыВМассивеСсылок(МассивСсылок, Истина);
КонецФункции

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщикЗавершение(Результат, ЕстьЛиды) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		СкрытьПисьмоИзАРМНаСервере(Результат.ПричинаОтказа, Результат.Комментарий);
		Оповестить("ОбновитьАРМ",, ЭтотОбъект);
		Элементы.ТаблицаВходящие.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Откуда, Куда)
	
	Элементы["Таблица"+Откуда].Обновить();
	//Элементы["Таблица"+Куда].Обновить();
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюЛичнуюЗадачуВФоне(ЗвонокПисьмо, НовоеИзмерение)
	
	//ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Автор						= ТекущийПользователь;
	ОбъектЗадача.Исполнитель				= ОбъектЗадача.Автор;
	ОбъектЗадача.ПринятаКИсполнению			= Истина;
	ОбъектЗадача.Наименование				= ЗвонокПисьмо.Тема;
	ОбъектЗадача.Дата						= ТекущаяДатаСеанса();
	ОбъектЗадача.ДатаНачала					= ТекущаяДатаСеанса();
	ОбъектЗадача.Выполнена 					= Ложь;
	ОбъектЗадача.ДатаИсполнения				= ТекущаяДатаСеанса();
	ОбъектЗадача.СрокИсполнения				= ТекущаяДатаСеанса();
	ОбъектЗадача.CRM_Личная					= Истина;
	ОбъектЗадача.Предмет					= ЗвонокПисьмо;
	ОбъектЗадача.ПредметСтрокой				= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(ЗвонокПисьмо);
	ОбъектЗадача.Описание = "Тема: " + ЗвонокПисьмо.Тема + "
											|Введено на основании: " + ЗвонокПисьмо.Ссылка;
	Если ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Если ЗначениеЗаполнено(ЗвонокПисьмо.ОтправительКонтакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.ОтправительКонтакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.ОтправительКонтакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Если ЗначениеЗаполнено(ЗвонокПисьмо.Контакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.Контакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.Контакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
		ОбъектЗадача.Описание = "Сообщение: " + ЗвонокПисьмо.ТекстСообщения;
	Иначе
		Если ЗначениеЗаполнено(ЗвонокПисьмо.АбонентКонтакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.АбонентКонтакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.АбонентКонтакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//
	ОбъектЗадача.Записать();
	//Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	//Менеджер.Объект = ЗвонокПисьмо;
	//Менеджер.НаименованиеАРМ = "МоиДела";
	//Менеджер.ИзмерениеАРМ = "Входящие";
	//Менеджер.Пользователь = ЗвонокПисьмо.Ответственный;
	//Менеджер.Прочитать();
	//Менеджер.Удалить();
	
	Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	Менеджер.Объект = ОбъектЗадача.Ссылка;
	Менеджер.НаименованиеАРМ = "МоиДела";
	Менеджер.ИзмерениеАРМ = "Текущие";
	Менеджер.Пользователь = ТекущийПользователь;
	Менеджер.Прочитать();
	Менеджер.ИзмерениеАРМ = НовоеИзмерение;
	Менеджер.Записать(Истина);
	
	//Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ЗвонокПисьмо) Тогда
	//	РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ЗвонокПисьмо, Справочники.CRM_СостоянияЛидов.Сконвертирован, ОбъектЗадача.Ссылка);
	//КонецЕсли;
	ЗвонокПисьмоОбъект = ЗвонокПисьмо.ПолучитьОбъект();
	ЗвонокПисьмоОбъект.CRM_СкрытьВАРМ = Истина;
	ЗвонокПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
	Если Не ЗначениеЗаполнено(ЗвонокПисьмоОбъект.Ответственный) Тогда
		ЗвонокПисьмоОбъект.Ответственный = ТекущийПользователь;
	КонецЕсли;
	ЗвонокПисьмоОбъект.Записать();

КонецПроцедуры

&НаСервере
Функция ПроверкаПеретаскиванияНаСервере(Строка, НовоеИзмерение, СтрокаПереноса = Неопределено, Результат = "")
	Если ТипЗнч(Строка) = Тип("Массив") Тогда
		Строка =  Строка[0];
	КонецЕсли;	
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") ИЛИ ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		СоздатьНовуюЛичнуюЗадачуВФоне(Строка.Объект, НовоеИзмерение);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаПереноса = Неопределено Тогда
		ДатаПереноса = Неопределено;
	ИначеЕсли ТипЗнч(СтрокаПереноса) = Тип("РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ") Тогда
		
		ДатаПереноса = ПолучитьДатуЗаписи(СтрокаПереноса);
	Иначе	
		ДатаПереноса = СтрокаПереноса.Ключ;
	КонецЕсли;
	Если ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат Неопределено КонецЕсли;
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.удалитьCRM_Мероприятие") Тогда
		Если Строка.Объект.Ответственный <> Пользователи.АвторизованныйПользователь() И НовоеИзмерение = "Завершенные" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	Пользователь = Строка.Пользователь;
	Если Строка.ИзмерениеАРМ = "Входящие" И ТипЗнч(Строка.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		И НЕ Строка.Объект.ПринятаКИсполнению И Не ЗначениеЗаполнено(Строка.Объект.Исполнитель) Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Строка.Объект);
		CRM_БизнесПроцессыИЗадачиВызовСервера.ПринятьЗадачиКИсполнению(МассивЗадач);
		Пользователь = Строка.Объект.Исполнитель
	КонецЕсли;	
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		ДанныеЭтапаКалендарногоПлана = Новый Структура;
		Если НовоеИзмерение = "Завершенные" Тогда
				
			Если НЕ ЗначениеЗаполнено(Строка.Объект.ФактическаяДатаНачала) Тогда
				ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДатаНачала", Строка.Объект.ПлановаяДатаНачала);
				ФактическаяДатаНачала = Строка.Объект.ПлановаяДатаНачала;
			Иначе
				ФактическаяДатаНачала = Строка.Объект.ФактическаяДатаНачала;
			КонецЕсли;
			ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДатаОкончания", ТекущаяДатаСеанса());
			ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДлительность", (КонецДня(ТекущаяДатаСеанса()) - НачалоДня(ФактическаяДатаНачала)+1)/86400);
			Если Пользователи.ЭтоПолноправныйПользователь() ИЛИ Строка.Объект.Проект.Ответственный = ТекущийПользователь Тогда
				ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена);
			Иначе
				ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена);
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат) Тогда
				ДанныеЭтапаКалендарногоПлана.Вставить("Результат", Результат);
			КонецЕсли;
			ИзменитьЭтапКалендарногоПлана(Строка.Объект, ДанныеЭтапаКалендарногоПлана);
			Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(Строка.Объект.Проект);
			Если Строка.Объект.Проект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
				ПроектОбъект = Строка.Объект.Проект.ПолучитьОбъект();
				ПроектОбъект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
				ПроектОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли НовоеИзмерение = "Текущие" Тогда
			
			Если Строка.Объект.Проект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект должен иметь статус ""В работе""'"));
				Возврат Неопределено;
			КонецЕсли;
			ДанныеЭтапаКалендарногоПлана.Вставить("ФактическаяДатаНачала", ТекущаяДатаСеанса());
			Если Строка.Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована Тогда
				ДанныеЭтапаКалендарногоПлана.Вставить("Статус", Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе);
			КонецЕсли;
			ИзменитьЭтапКалендарногоПлана(Строка.Объект, ДанныеЭтапаКалендарногоПлана);
			
		КонецЕсли;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Строка.Объект);
	НаборЗаписей.Отбор.НаименованиеАРМ.Установить(Строка.НаименованиеАРМ);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей[0].ИзмерениеАРМ = НовоеИзмерение;
	НаборЗаписей.Записать(Истина);
	
	СтруктураНовогоКлюча = Новый Структура("НаименованиеАРМ,ИзмерениеАРМ,Пользователь,СостояниеИнтереса,Объект");
	ЗаполнитьЗначенияСвойств(СтруктураНовогоКлюча, Строка);
	СтруктураНовогоКлюча.ИзмерениеАРМ = НовоеИзмерение;
	
	Возврат РегистрыСведений.CRM_ОбъектыАРМ.СоздатьКлючЗаписи(СтруктураНовогоКлюча);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьЭтапКалендарногоПлана(Этап, ДанныеЭтапаКалендарногоПлана);
	
	ЭтапКалендарногоПлана = Этап.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЭтапКалендарногоПлана, ДанныеЭтапаКалендарногоПлана);
	ЭтапКалендарногоПлана.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЗадачу(СсылкаИлиСтруктура, СнятьСКонтроля = Ложь)
	
	Если ТипЗнч(СсылкаИлиСтруктура) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если СсылкаИлиСтруктура.CRM_Личная Тогда
			тОбъект = СсылкаИлиСтруктура.ПолучитьОбъект();
			тОбъект.Выполнена = Истина;
			тОбъект.Записать();
		Иначе
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаИлиСтруктура) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
	ИначеЕсли ТипЗнч(СсылкаИлиСтруктура) = Тип("Структура") И СсылкаИлиСтруктура.Свойство("Успех") И НЕ СсылкаИлиСтруктура.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СсылкаИлиСтруктура.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуЗаписи(СтрокаЗаписи)
	
	Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	Менеджер.Объект = СтрокаЗаписи.Объект;
	Менеджер.НаименованиеАРМ = СтрокаЗаписи.НаименованиеАРМ;
	Менеджер.ИзмерениеАРМ = СтрокаЗаписи.ИзмерениеАРМ;
	Менеджер.Пользователь = СтрокаЗаписи.Пользователь;
	Менеджер.Прочитать();
	Возврат Менеджер.ДатаДляСортировки;
	
КонецФункции	

&НаСервере
Функция ПолучитьИмяИзмерения(Значение)
	
	Возврат Значение.ИзмерениеАРМ;
	
КонецФункции

&НаСервере
Функция ПолучитьОбъектДействия(СтрокаСписка)
	Если ТипЗнч(СтрокаСписка) = Тип("Массив") Тогда
		Возврат СтрокаСписка[0].Объект;;
	Иначе
		Возврат СтрокаСписка.Объект;
	КонецЕсли;
	
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуТекущейАктивности()
	Если ТипЗнч(ТекущаяАктивность) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяАктивность);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, , );
	ИначеЕсли ТипЗнч(ТекущаяАктивность) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяАктивность);
		ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, , );
	КонецЕсли;
	ТекущаяАктивность = Неопределено;
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьПеретаскивания(Строка, НовоеИзмерение)
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		Если НовоеИзмерение = "Завершенные" Тогда
			Если Строка.Объект.Проект.CRM_Статус <> Перечисления.CRM_СтатусыПроектов.ВРаботе 
				ИЛИ Строка.Объект.Статус <> Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для смены статуса проект и этап должны иметь статус ""В работе""'"));
				Возврат Ложь;
			КонецЕсли;
			
			УстановкаРазрешена = Истина;
		
			// Проверим наличие файлов с необходимым контекстом
			СписокНедостающихКонтекстов = Новый СписокЗначений;
				
			CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(Строка.Объект, СписокНедостающихКонтекстов);
				
			Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
				УстановкаРазрешена = Ложь; 
			КонецЕсли;
				
			Если НЕ УстановкаРазрешена Тогда
				Если Строка.Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
					Сообщение = НСтр("ru = 'Для завершения задачи необходимо присоединить файл(ы) следующего контекста:'");
				Иначе
					Сообщение = НСтр("ru = 'Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:'");
				КонецЕсли;
				Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
					Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
				КонецЦикла;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПослеВводаРезультата(Результат, Строка) Экспорт
	Если Результат <> Неопределено Тогда
		ПроверкаПеретаскиванияНаСервере(Строка, "Завершенные",, Результат);
		ОбновитьДанные(ПолучитьИмяИзмерения(Строка), "Завершенные");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Объект", ВыбраннаяСтрока.Объект);
	Возврат СтруктураОбъекта;
	
КонецФункции

&НаСервере
Процедура ВключитьОткрючитьГруппировкуПоДатеНаСервере()
	
	Если ТаблицаТекущие.Группировка.Элементы.Количество() = 0 Тогда
		ТаблицаТекущие.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
	Иначе
		ТаблицаТекущие.Группировка.Элементы.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ТекущийПользовательПриИзмененииНаСервере()
	
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь).ВыгрузитьЗначения();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "Измерение", "Входящие", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ОтображатьЗвонки", НЕ ОтображатьЗвонки, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ОтображатьПисьма", НЕ ОтображатьПисьма, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "РолиПользователя", РолиПользователя, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ПустаяДата", Дата('00010101'), Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "Измерение", "Завершенные", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "РолиПользователя", РолиПользователя, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "Измерение", "Отложенные", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "РолиПользователя", РолиПользователя, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "Измерение", "Текущие", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "РолиПользователя", РолиПользователя, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "РолиПользователя", РолиПользователя, Истина);
	
	// +Виджеты
	Если ПоказыватьВиджетыПриОткрытии Тогда
		ОбновитьВиджетыФормы();
	КонецЕсли;	
	// -Виджеты
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
	
	Результат = Ложь;
	
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	
	Период = ОтборСозданы[НомерПериода];
	ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
	Если Элемент<>Неопределено Тогда
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Не Период.Пометка;
		КонецЕсли;
		
		// Вариант периода может быть выбран только один.
		Для Индекс = 0 По ОтборСозданы.Количество()-1 Цикл
			
			ЭлементСпискаПериодов = ОтборСозданы[Индекс];
			Если ЭлементСпискаПериодов <> Период Тогда
				ЭлементСпискаПериодов.Пометка = Ложь;
			КонецЕсли;
			
			Если Индекс = 0 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыПроизвольныйПериод;
				Если НЕ ЭлементСпискаПериодов.Пометка Тогда
					ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
				КонецЕсли;
			ИначеЕсли Индекс = 1 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыСегодня;
			ИначеЕсли Индекс = 2 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗа3Дня;
			ИначеЕсли Индекс = 3 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаНеделю;
			ИначеЕсли Индекс = 4 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаМесяц;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭлементСпискаПериодов.Пометка Тогда
				Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
					ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
				КонецЕсли;
			Иначе
				ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
			КонецЕсли;
			
		КонецЦикла;
		
		CRM_ТегиКлиент.СформироватьЗаголовокВариантаОтбора(Элементы.ОтборПериод, 0);
		
	КонецЕсли;
	ЗначениеПериода = СписокПериодов.НайтиПоЗначению(ВариантПериода);
	Если ЗначениеПериода<>Неопределено Тогда
		ПредставлениеПериода = ЗначениеПериода.Представление;
	КонецЕсли;
	ОбновитьОтборы();
	

КонецПроцедуры	

&НаСервере
Процедура ВключитьОтключитьГруппировкуПоКатегорииНаСервере()
	Если ТаблицаТекущие.Группировка.Элементы.Количество() = 0 Тогда
		ТаблицаТекущие.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("Категория");
	Иначе
		ТаблицаТекущие.Группировка.Элементы.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыФормы(Форма)
	Форма.Элементы.ГруппаАРМ.Видимость = (Форма.ВидАРМ = "Канбан");
	Форма.Элементы.ГруппаСписок.Видимость = НЕ Форма.Элементы.ГруппаАРМ.Видимость;
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектСтроки(СтрокаРС)
	Если СтрокаРС <> Неопределено Тогда
		Возврат СтрокаРС.Объект;
	КонецЕсли;	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ОбновитьТаблицы()
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		ЭлементыПользовательскихНастроек = ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
			Если ТипЗнч(Элемент) = ТипЗнч(ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.Настройки.Порядок) Тогда
				Элемент.Элементы.Очистить();
				Если ОтборВключатьПросроченные <> -1 Тогда
					УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
					УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
					УсловиеСортировки.ТипУпорядочивания = ?(ОтборВключатьПросроченные = 1, НаправлениеСортировкиКомпоновкиДанных.Возр, НаправлениеСортировкиКомпоновкиДанных.Убыв);
					УсловиеСортировки.Использование = Истина;
				КонецЕсли;
				УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				УсловиеСортировки.Использование = Истина;
				УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
			КонецЕсли;    
		КонецЦикла;
	КонецЦикла;
	МассивТаблиц.Добавить("ТаблицаВходящие");
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].Обновить();
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
	КонецЦикла;
	СформироватьЗаголовок();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборыНаСервере()
	
	ТекущаяДатаВремя = ТекущаяДатаСеанса();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("ТаблицаВходящие");
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	
	Период = ОтборСозданы.НайтиПоЗначению(ПериодОтбора);
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма[ИмяТаблицы], "КрайнийСрокОкончание", Период.Значение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, , Период.Пометка, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		ГруппаОтборСтрокаПоиска = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭтотОбъект[ИмяТаблицы].Отбор.Элементы, "ОтборСтрокаПоиска", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ЭлементОтбора = ГруппаОтборСтрокаПоиска.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заголовок");
		ЭлементОтбора = ГруппаОтборСтрокаПоиска.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекстОснования");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы], "Заголовок", "%"+СтрокаПоискаОтбор+"%", ВидСравненияКомпоновкиДанных.Подобно, ,  ЗначениеЗаполнено(СтрокаПоискаОтбор), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы], "ТекстОснования", "%"+СтрокаПоискаОтбор+"%", ВидСравненияКомпоновкиДанных.Подобно, ,  ЗначениеЗаполнено(СтрокаПоискаОтбор), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборы()
	

	ОбновитьОтборыНаСервере();
	
	ОбновитьТаблицы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовуюЛичнуюЗадачу(ЧтоСделать = "", Когда = Неопределено, ЗвонокПисьмо = Неопределено)
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Автор						= ТекущийПользователь;
	ОбъектЗадача.Исполнитель				= ОбъектЗадача.Автор;
	ОбъектЗадача.ПринятаКИсполнению			= Истина;
	ОбъектЗадача.Наименование				= ?(ЗвонокПисьмо = Неопределено, ЧтоСделать, ЗвонокПисьмо.Тема);
	ОбъектЗадача.Дата						= ТекущаяДатаСеанса();
	ОбъектЗадача.ДатаНачала					= ТекущаяДатаСеанса();
	ОбъектЗадача.СостояниеБизнесПроцесса	= Перечисления.СостоянияБизнесПроцессов.Активен;
	ОбъектЗадача.CRM_Личная					= Истина;
	ОбъектЗадача.Описание = ?(ЗвонокПисьмо = Неопределено, ЧтоСделать, "Тема: " + ЗвонокПисьмо.Тема + "
												|Введено на основании: " + ЗвонокПисьмо.Ссылка);
	Если ЗвонокПисьмо <> Неопределено Тогда
		ОбъектЗадача.Предмет				= ЗвонокПисьмо;
		ОбъектЗадача.ПредметСтрокой			= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(ЗвонокПисьмо);
		Если ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Если ЗначениеЗаполнено(ЗвонокПисьмо.ОтправительКонтакт)	Тогда
				Если ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.ОтправительКонтакт;
					ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
				ИначеЕсли ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.ОтправительКонтакт;
					ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Если ЗначениеЗаполнено(ЗвонокПисьмо.Контакт)	Тогда
				Если ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.Контакт;
					ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
				ИначеЕсли ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
					ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.Контакт;
					ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;
			КонецЕсли;
			ОбъектЗадача.Описание = "Сообщение: " + ЗвонокПисьмо.ТекстСообщения;
		Иначе
			Если ЗначениеЗаполнено(ЗвонокПисьмо.АбонентКонтакт)	Тогда
				Если ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.АбонентКонтакт;
					ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
				ИначеЕсли ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.АбонентКонтакт;
					ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//
	Если Когда <> Неопределено Тогда
		ОбъектЗадача.СрокИсполнения			= Когда;
	КонецЕсли;
	ОбъектЗадача.Записать();
	
КонецПроцедуры

#Область Виджеты

&НаСервере
Процедура ОбновитьВиджетыФормы()
	
	CRM_РаботаСВиджетамиВызовСервера.ОбновитьВиджетыФормы(ЭтотОбъект, "ГруппаВиджеты");
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВиджетФормы(Виджет)
	
	Возврат CRM_РаботаСВиджетамиВызовСервера.ДобавитьВиджетФормы(ЭтотОбъект, "ГруппаВиджеты", Виджет);
	
КонецФункции

&НаСервере
Процедура УдалитьВиджетФормы(Виджет)
	
	CRM_РаботаСВиджетамиВызовСервера.УдалитьВиджетФормы(ЭтотОбъект, "ГруппаВиджеты", Виджет);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_01()
	
	ОбновитьВиджетНаСервере("01");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_02()
	
	ОбновитьВиджетНаСервере("02");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_03()
	
	ОбновитьВиджетНаСервере("03");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_04()
	
	ОбновитьВиджетНаСервере("04");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_Прочие()
	
	ОбновитьВиджетНаСервере("Прочие");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетНаСервере(ИндексВиджета)
	
	CRM_РаботаСВиджетамиВызовСервера.ОбновитьВиджет(ЭтотОбъект, ИндексВиджета);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсточникДанныхВиджета(Виджет)
	
	Возврат Виджет.ИсточникДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьПериодОбновленияВиджетаНаСервере(Виджет, Индекс)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь 	= ТекущийПользователь;
	МенеджерЗаписи.Виджет 			= Виджет;
	МенеджерЗаписи.ИндексВиджета 	= Индекс;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат ?(ЗначениеЗаполнено(МенеджерЗаписи.ПериодОбновления), МенеджерЗаписи.ПериодОбновления, 3600);
	Иначе
		Если Виджет.ИсточникДанных.КонтролируемыйПоказатель = "" Тогда
			Возврат 3600;
		Иначе	
			Возврат Виджет.ИсточникДанных.ПериодОбновления;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкуПоказыватьВиджеты(КлючОбъекта, Настройка)
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ПоказыватьПанельВиджетов", Настройка);  
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
