
#Область ОписаниеПеременных

&НаКлиенте
Перем ПеретаскиваемыйРеквизит, УстанавливаемыйТекущийЭлемент;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИдентификаторМетаданныхИнтерес = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.CRM_Интерес);
	СписокСценариев = ПолучитьСписокСценариев();
	СформироватьМенюСценариев(СписокСценариев);
	
	Если Параметры.Свойство("Сценарий") Тогда
		Сценарий = Параметры.Сценарий;
	ИначеЕсли СписокСценариев.Количество()>0 Тогда
		Сценарий = СписокСценариев[0].Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Сценарий) Тогда
		НаименованиеСценария = Сценарий.Наименование;
		Элементы.ГруппаТекущийСценарий.Заголовок = "   "+НаименованиеСценария+"   ";
		СценарийПриИзмененииСервер();
		СоздатьЭлементыТриггеров();
		ИзменитьКонтекстноеМенюТриггеров();
	КонецЕсли;
	
	Элементы.СписокТиповУслуг.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИзменитьКонтекстноеМенюТриггеров();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененоСостояниеИнтереса" Тогда
		ОбновитьЗаголовокСостоянияИнтереса(Параметр);
	ИначеЕсли ИмяСобытия = "ЗаписанТриггер"	Тогда
		Если Параметр<>Неопределено Тогда
			Идентификатор = "Этап_" + СтрЗаменить(Строка(Параметр.УникальныйИдентификатор()), "-", "_");
			Элемент = Элементы.Найти(Идентификатор);
			Если Элемент<>Неопределено Тогда
				Элемент.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ЕстьСсылкаНаОбработчик = Истина;
	//Если ЗначениеЗаполнено(НаименованиеСценария) Тогда
	//	Если ЗначениеЗаполнено(Сценарий) Тогда
	//		ИзменитьНаименованиеСценария();
	//		Оповестить("ИзмененСценарийИнтереса", Сценарий);
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Сценарий.ТекстРедактирования) Тогда
		Если ЗначениеЗаполнено(Сценарий) Тогда
			НаименованиеСценария = Элементы.Сценарий.ТекстРедактирования;
			ИзменитьНаименованиеСценария();
			Элементы.ГруппаСценарийРедактирование.Видимость = Ложь;
			Элементы.ГруппаСценарий.Видимость = Истина;
			Оповестить("ИзмененСценарийИнтереса", Сценарий);
			ОтобразитьИзменениеДанных(Сценарий, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьСценарийНажатие(Элемент)
	Если ЕстьИнтересыПоСценарию() Тогда
		CRM_ОбщегоНазначенияКлиент.ПоказатьНашеПредупреждение(НСтр("ru = 'Вы не можете удалить сценарий  т.к. он используется в  Интересах клиентов'"));
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеСценарияПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(НСтр("ru = 'Вы действительно хотите удалить сценарий ""%1""?'"), CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Сценарий, "Наименование")), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ВыбратьТриггерИзМеню(ИдентификаторСостояния, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыПередНачаломДобавленияЗавершение(Действие, ИдентификаторСостояния) Экспорт
	Если Действие<>Неопределено Тогда
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.CRM_ДействияТриггеров") Тогда
			ФормаТриггера = ПолучитьФорму("Справочник.CRM_Триггеры.ФормаОбъекта", ПолучитьПараметрыСозданияТриггера(ИдентификаторСостояния, Действие), ЭтотОбъект);
			ФормаТриггера.УсловиеСрабатыванияПриИзменении(ФормаТриггера.Элементы.УсловиеСрабатывания);
			ФормаТриггера.ДействиеПриИзменении(ФормаТриггера.Элементы.Действие);
		ИначеЕсли ТипЗнч(Действие.Значение) = Тип("СправочникСсылка.CRM_ДействияТриггеров") Тогда
			ФормаТриггера = ПолучитьФорму("Справочник.CRM_Триггеры.ФормаОбъекта", ПолучитьПараметрыСозданияТриггера(ИдентификаторСостояния, Действие.Значение), ЭтотОбъект);
			ФормаТриггера.УсловиеСрабатыванияПриИзменении(ФормаТриггера.Элементы.УсловиеСрабатывания);
			ФормаТриггера.ДействиеПриИзменении(ФормаТриггера.Элементы.Действие);
		Иначе
			ВыбратьТриггерВФорме(ИдентификаторСостояния);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекСсылка = Элемент.ТекущиеДанные.Ссылка;
	Если ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.CRM_Триггеры") Тогда
		ПараметрыПеретаскивания.Значение = ТекСсылка;
	Иначе
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Картинка") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("Переместить", НСтр("ru='Переместить';en='Move'"),, БиблиотекаКартинок.ПеренестиЭлемент);
	СписокКоманд.Добавить("Копировать", НСтр("ru='Копировать';en='Copy'"),, БиблиотекаКартинок.СкопироватьЭлементСписка);
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ОписаниеОповещения = Новый ОписаниеОповещения("ТриггерыОбработкаПеретаскиваниеЗавершение", ЭтотОбъект, 
		Новый Структура("Триггер, ИдентификаторСостояния", ПараметрыПеретаскивания.Значение, ИдентификаторСостояния));
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКоманд, Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаПеретаскиваниеЗавершение(Команда, ДопПараметры) Экспорт
	Если Команда = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Команда.Значение = "Переместить" Тогда
		ПеренестиТриггерВДругоеСостояние(ДопПараметры.Триггер, ДопПараметры.ИдентификаторСостояния);
	ИначеЕсли Команда.Значение = "Копировать" Тогда
		СкопироватьТриггерВДругоеСостояние(ДопПараметры.Триггер, ДопПараметры.ИдентификаторСостояния);
	КонецЕсли;
	ОповещениеОЗакрытии();
КонецПроцедуры

// Вызов закомментирован.

//&НаКлиенте
//Процедура ТриггерыНаименованиеНажатие(Элемент)
//	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "Декорация_Этап_", "");
//	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
//	ПоказатьЗначение(,СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния));
//КонецПроцедуры

&НаКлиенте
Процедура ТриггерыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ТриггерыПриАктивизацииСтрокиОбработка", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыПриАктивизацииСтрокиОбработка()
	Для Каждого Таблица Из СписокЭлементовТриггеров Цикл
		Элементы[Таблица.Значение].ВыделенныеСтроки.Очистить();
		Элементы[Таблица.Значение].ТекущаяСтрока = Неопределено;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОЗакрытии", ЭтотОбъект, Элемент);
	Если ТипЗнч(Элемент.ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.CRM_Триггеры") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеРедактированияНастроек", ЭтотОбъект, Новый Структура("Элемент, Ссылка", Элемент, Элемент.ТекущиеДанные.Ссылка));
		ПараметрыОткрытия = Новый Структура("Ссылка", Элемент.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Справочник.CRM_СостоянияИнтересов.Форма.ФормаНастройкиСостояния", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтрНайти(Поле.Имя, "НастроитьТриггер")=1 Тогда
		ОткрытьФорму("Справочник.CRM_Триггеры.ФормаОбъекта", ПолучитьПараметрыОткрытияТриггера(ИдентификаторСостояния, Элемент.ТекущиеДанные.Ссылка), ЭтотОбъект,,,, ОписаниеОповещения);
	ИначеЕсли СтрНайти(Поле.Имя, "УдалитьТриггер")=1 Тогда
		ПометитьТриггерНаУдаление(Элемент.ТекущиеДанные.Ссылка);
		Элемент.Обновить();
	ИначеЕсли СтрНайти(Поле.Имя, "СостояниеТриггера")=1 Тогда
		ИзменитьТриггерДействует(Элемент.ТекущиеДанные.Ссылка);
		Элемент.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСостояниеИнтересаНажатие(Элемент)
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "СкрытьСостояниеИнтереса_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ДопПараметры = Новый Структура("ИдентификаторСостояния, ЭлементИмя", ИдентификаторСостояния, Элемент.Имя);
	Если ЕстьИнтересыВСостоянии(ИдентификаторСостояния) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкрытьСостояниеИнтересаПродолжение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Есть активные интересы в данном состоянии! Продолжить удаление?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		СкрытьСостояниеИнтересаПродолжение(КодВозвратаДиалога.Да, ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоменятьСостоянияМестами(Элемент)
	Смещение = -1;
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "ПоменятьСостоянияМестами", "Декорация");
	Индекс = Элементы.ГруппаТриггеры.ПодчиненныеЭлементы.Индекс(Элементы[СтрЗаменить(ИмяЭлемента, "Декорация", "Группа")]);
	ЭлементыФормыПереместить(ИмяЭлемента, СтрЗаменить(Элементы.ГруппаТриггеры.ПодчиненныеЭлементы.Получить(Индекс+Смещение).Имя, "Группа", "Декорация"));
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактироватьСостояниеИнереса(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "ПолеВводаНаименованияСостояния_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	НовоеНаименование = Элемент.ТекстРедактирования;
	Состояние = ИзменитьСостояниеИнтереса(ИдентификаторСостояния, Новый Структура("Наименование", НовоеНаименование));
	Идентификатор = СтрЗаменить(Элемент.Имя, "ПолеВводаНаименованияСостояния_", "");
	ЭтотОбъект["Наименование_"+Идентификатор] = НовоеНаименование;
	Элементы["Группа_Надписи_Редактирование_"+Идентификатор].Видимость = Ложь;
	Элементы["Группа_Надписи_"+Идентификатор].Видимость = Истина;
	Элементы["Декорация_"+Идентификатор].Заголовок = Состояние.Представление;
	Оповестить("ИзмененоСостояниеИнтереса", Состояние.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьТриггер(Элемент)
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "ДобавитьТриггер_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ВыбратьТриггерИзМеню(ИдентификаторСостояния, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииНаСервере(Подразделение, Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура СписокТиповУслугПриИзменении(Элемент)
	СписокТиповУслугПриИзмененииНаСервере(СписокТиповУслуг, Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУсловияНажатие(Элемент)
	Элементы.ГруппаУсловия.Видимость = Не Элементы.ГруппаУсловия.Видимость;
	//Если Элементы.ГруппаУсловия.Видимость Тогда
	//	Элемент.ЦветФона = Новый Цвет(220, 220, 220);
	//Иначе
	//	Элемент.ЦветФона = Новый Цвет;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИндексЦветаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Идентификатор = СтрЗаменить(Элемент.Имя, "ИндексЦветаСостояния_", "");
	ОповещениеНовое = Новый ОписаниеОповещения("ЦветНачалоВыбораЗавершение", ЭтотОбъект, Элемент.Имя);
	ПараметрыФормы = Новый Структура("ТекущийЦвет", ЭтотОбъект["ИндексЦвета_"+Идентификатор]);
	ФормаВыбораЦвета = ОткрытьФорму("Справочник.CRM_Категории.Форма.ФормаВыбораЦвета", ПараметрыФормы, Элемент,,,,
		ОповещениеНовое, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
КонецПроцедуры // ЦветНачалоВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПричиныОтказов(Команда)
	ОткрытьФорму("Справочник.CRM_ПричиныОтказаПоИнтересам.ФормаСписка", Новый Структура(), ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСостояниеИнтереса(Команда)
	ИдентификаторСостояния = СтрЗаменить(Команда.Имя, "ДобавитьСостояние_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	СкрытыеСостояния = ПолучитьСкрытыеСостояния(ИдентификаторСостояния);
	Если СкрытыеСостояния.Количество() = 0 Тогда
		КомандаДобавитьСостояниеИнтересаПродолжение(ИдентификаторСостояния);
	Иначе
		СкрытыеСостояния.Добавить("НовоеСостояние", НСтр("ru = 'Новое состояние интереса'"),, БиблиотекаКартинок.CRM_Плюс_серый);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСкрытыхСостояний", ЭтотОбъект, ИдентификаторСостояния);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СкрытыеСостояния);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйСценарий(Команда)
	Сценарий = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка");
	НаименованиеСценария = НСтр("ru = 'Новый сценарий'");
	СоздатьСценарий();
	ИзменитьСценарий(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСценария(Команда)
	ИдентификаторСценария = СтрЗаменить(Команда.Имя, "ВыбратьСценарий", "");
	ИдентификаторСценария = СтрЗаменить(ИдентификаторСценария, "_", "-");
	Сценарий = СостояниеИнтересаПоИдентификатору(ИдентификаторСценария);
	НаименованиеСценария = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Сценарий, "Наименование");
	Элементы.ГруппаТекущийСценарий.Заголовок = "   "+НаименованиеСценария+"   ";
	СценарийПриИзмененииСервер();
	СоздатьЭлементыТриггеров();
	ИзменитьКонтекстноеМенюТриггеров();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСценарий(Команда)
	Элементы.ГруппаСценарий.Видимость = Ложь;
	Элементы.ГруппаСценарийРедактирование.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ЗаписьВыполнена = CRM_НачалоРаботыСПрограммойСервер.ЗаписатьНастроенныйРазделРешения(ПредопределенноеЗначение("Перечисление.CRM_РазделыНастройкиРешения.СценарииПродаж"));
		Если ЗаписьВыполнена Тогда
			Оповестить("ОбновитьНастроенныеРазделы");
			CRM_РабочийСтолКлиент.ПереинициализироватьРабочийСтолКлиент("Обработка.CRM_АРМ_МоиПродажи.Форма.Форма");
		КонецЕсли;
	КонецЕсли;
	Оповестить("ИзмененСценарийИнтереса", Сценарий);
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СценарийПриИзмененииСервер()
	Если ЗначениеЗаполнено(Сценарий) Тогда
		Подразделение = Сценарий.Подразделение;
		СписокТиповУслуг.ЗагрузитьЗначения(Сценарий.ТипыУслуг.Выгрузить(, "ТипУслуги").ВыгрузитьКолонку("ТипУслуги"));
	Иначе
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		СписокТиповУслуг.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалениеСценарияПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьСценарийНаУдаление(Сценарий);
		Оповестить("УдаленСценарийИнтереса", Сценарий);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьСценарийНаУдаление(Сценарий)
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.УстановитьПометкуУдаления(Не СценарийОбъект.ПометкаУдаления);
КонецПроцедуры

&НаСервере
Процедура СформироватьМенюСценариев(СписокСценариев)
	Для каждого ТекСценарий Из СписокСценариев Цикл
		Идентификатор = СтрЗаменить(Строка(ТекСценарий.Значение.УникальныйИдентификатор()),"-","_");
		Команда = Команды.Добавить("ВыбратьСценарий"+Идентификатор);
		Команда.Заголовок = Строка(ТекСценарий.Значение);
		Команда.Действие = "ВыборСценария";
		
		Кнопка = Элементы.Добавить("ВыбратьСценарий"+Идентификатор, Тип("КнопкаФормы"), Элементы.ГруппаСписокСценариев);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = Кнопка.Имя;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СоздатьСценарий()
	НовыйСценарийИнтереса = Справочники.CRM_СостоянияИнтересов.СоздатьЭлемент();
	НовыйСценарийИнтереса.Наименование = НаименованиеСценария;
	НовыйСценарийИнтереса.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес;
	НовыйСценарийИнтереса.Записать();
	Сценарий = НовыйСценарийИнтереса.Ссылка;
	
	Идентификатор = СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()),"-","_");
	Команда = Команды.Добавить("ВыбратьСценарий"+Идентификатор);
	Команда.Заголовок = Строка(Сценарий);
	Команда.Действие = "ВыборСценария";
		
	Кнопка = Элементы.Добавить("ВыбратьСценарий"+Идентификатор, Тип("КнопкаФормы"), Элементы.ГруппаСписокСценариев);
	Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Кнопка.ИмяКоманды = Кнопка.Имя;
	
	Элементы.ГруппаТекущийСценарий.Заголовок = "   "+НаименованиеСценария+"   ";
	СценарийПриИзмененииСервер();
	СоздатьЭлементыТриггеров();
	ИзменитьКонтекстноеМенюТриггеров();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыТриггеров()
	
	ИдентификаторСценария = СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()),"-","_");
	Для каждого ЭлементТриггера Из Элементы.ГруппаТриггеры.ПодчиненныеЭлементы Цикл
		ЭлементТриггера.Видимость = Ложь;
		//Элементы["Группа_"+ЭлементТриггера.Значение].Видимость = Ложь;
	КонецЦикла;
	
	СписокЭлементовТриггеров.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	                      |	CRM_СостоянияИнтересов.ВидСостояния КАК ВидСостояния,
	                      |	CRM_СостоянияИнтересов.Представление КАК Представление,
	                      |	CRM_СостоянияИнтересов.Завершено КАК Завершено,
	                      |	CRM_СостоянияИнтересов.Наименование КАК Наименование,
	                      |	CRM_СостоянияИнтересов.ИндексЦвета КАК ИндексЦвета
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.Родитель = &Родитель
	                      |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления
	                      |	И CRM_СостоянияИнтересов.Используется
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания");
	Запрос.УстановитьПараметр("Родитель", Сценарий);
	ВыборкаСостояний = Запрос.Выполнить().Выбрать();
	ВыборкаСостоянийТемп = Запрос.Выполнить().Выбрать();
	СостояниеПред = Неопределено;
	Пока ВыборкаСостояний.Следующий() Цикл
		МассивРеквизитов = Новый Массив;
		ИдентификаторЭтапа = СтрЗаменить(Строка(ВыборкаСостояний.Ссылка.УникальныйИдентификатор()),"-","_");
		
		ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
		
		ЦветЭтапа = СписокЦветов[ВыборкаСостояний.ИндексЦвета].Цвет;
		СписокЭлементовТриггеров.Добавить(ИмяРеквизита, ВыборкаСостояний.Наименование);
		Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Наименование_"+ИмяРеквизита, Новый ОписаниеТипов("Строка")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДинамическийСписок")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексЦвета_"+ИмяРеквизита, Новый ОписаниеТипов("Число")));
			ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
			
			ЭтотОбъект[ИмяРеквизита].ТекстЗапроса = "ВЫБРАТЬ
			                                        |	ИСТИНА КАК Действует,
			                                        |	""Настройки"" КАК Условие,
			                                        |	ВЫРАЗИТЬ(ВЫБОР
			                                        |		КОГДА CRM_СостоянияИнтересов.ОбязательноеЗаполнениеКлиента
			                                        |				ИЛИ CRM_СостоянияИнтересов.УказаниеОжидаемойВыручки
			                                        |				ИЛИ CRM_СостоянияИнтересов.ОбязательноеПланированиеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ПланируемыеТипыАктивности.ПУСТАЯССЫЛКА)
			                                        |			ТОГДА ВЫБОР
			                                        |					КОГДА CRM_СостоянияИнтересов.ИнтерактивноеПланированиеАктивностей
			                                        |							ИЛИ CRM_СостоянияИнтересов.ЗавершатьЗапланированныеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ЗавершаемыеТипыАктивности.ПУСТАЯССЫЛКА)
			                                        |						ТОГДА ВЫБОР
			                                        |								КОГДА CRM_СостоянияИнтересов.ИнтерактивноеПланированиеАктивностей
			                                        |									ТОГДА ""- Интерактивное планирование активностей"" + &ПереносСтроки
			                                        |								ИНАЧЕ """"
			                                        |							КОНЕЦ + ВЫБОР
			                                        |								КОГДА CRM_СостоянияИнтересов.ЗавершатьЗапланированныеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ЗавершаемыеТипыАктивности.ПУСТАЯССЫЛКА)
			                                        |									ТОГДА ""- Завершать запланированные активности"" + &ПереносСтроки
			                                        |								ИНАЧЕ """"
			                                        |							КОНЕЦ + ВЫБОР
			                                        |								КОГДА CRM_СостоянияИнтересов.УказыватьДостигнутыйРезультат
			                                        |									ТОГДА ""- Указывать достигнутый результат""
			                                        |								ИНАЧЕ """"
			                                        |							КОНЕЦ
			                                        |					ИНАЧЕ """"
			                                        |				КОНЕЦ
			                                        |		ИНАЧЕ """"
			                                        |	КОНЕЦ КАК СТРОКА(500)) КАК Действие,
			                                        |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
			                                        |	"""" КАК ПустаяЯчейка,
			                                        |	ВЫРАЗИТЬ(ВЫБОР
			                                        |			КОГДА CRM_СостоянияИнтересов.ОбязательноеЗаполнениеКлиента
			                                        |					ИЛИ CRM_СостоянияИнтересов.УказаниеОжидаемойВыручки
			                                        |					ИЛИ CRM_СостоянияИнтересов.ОбязательноеПланированиеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ПланируемыеТипыАктивности.ПУСТАЯССЫЛКА)
			                                        |				ТОГДА ВЫБОР
			                                        |						КОГДА CRM_СостоянияИнтересов.ОбязательноеЗаполнениеКлиента
			                                        |							ТОГДА ""- Обязательное заполнение клиента"" + &ПереносСтроки
			                                        |						ИНАЧЕ """"
			                                        |					КОНЕЦ + ВЫБОР
			                                        |						КОГДА CRM_СостоянияИнтересов.УказаниеОжидаемойВыручки
			                                        |							ТОГДА ""- Указание ожидаемой выручки"" + &ПереносСтроки
			                                        |						ИНАЧЕ """"
			                                        |					КОНЕЦ + ВЫБОР
			                                        |						КОГДА CRM_СостоянияИнтересов.ОбязательноеПланированиеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ПланируемыеТипыАктивности.ПУСТАЯССЫЛКА)
			                                        |							ТОГДА ""- Обязательное планирование активности""
			                                        |						ИНАЧЕ """"
			                                        |					КОНЕЦ
			                                        |			ИНАЧЕ ВЫБОР
			                                        |					КОГДА CRM_СостоянияИнтересов.ИнтерактивноеПланированиеАктивностей
			                                        |							ИЛИ CRM_СостоянияИнтересов.ЗавершатьЗапланированныеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ЗавершаемыеТипыАктивности.ПУСТАЯССЫЛКА)
			                                        |						ТОГДА ВЫБОР
			                                        |								КОГДА CRM_СостоянияИнтересов.ИнтерактивноеПланированиеАктивностей
			                                        |									ТОГДА ""- Интерактивное планирование активностей"" + &ПереносСтроки
			                                        |								ИНАЧЕ """"
			                                        |							КОНЕЦ + ВЫБОР
			                                        |								КОГДА CRM_СостоянияИнтересов.ЗавершатьЗапланированныеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ЗавершаемыеТипыАктивности.ПУСТАЯССЫЛКА)
			                                        |									ТОГДА ""- Завершать запланированные активности"" + &ПереносСтроки
			                                        |								ИНАЧЕ """"
			                                        |							КОНЕЦ + ВЫБОР
			                                        |								КОГДА CRM_СостоянияИнтересов.УказыватьДостигнутыйРезультат
			                                        |									ТОГДА ""- Указывать достигнутый результат""
			                                        |								ИНАЧЕ """"
			                                        |							КОНЕЦ
			                                        |					ИНАЧЕ &НастройкиНеЗаданы
			                                        |				КОНЕЦ
			                                        |		КОНЕЦ КАК СТРОКА(500)) КАК ПредставлениеНастроекУсловия,
			                                        |	"""" КАК ПредставлениеНастроекДействия,
			                                        |	-1 КАК ИндексЦвета,
			                                        |	""          "" КАК Настроить,
			                                        |	""          "" КАК Удалить,
													|	2 КАК СостояниеТриггера,
													|	"""" КАК СостояниеТриггераСтр,
			                                        |	0 КАК Картинка
			                                        |ИЗ
			                                        |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
			                                        |ГДЕ
			                                        |	CRM_СостоянияИнтересов.Ссылка = &СостояниеИнтереса
			                                        |
			                                        |ОБЪЕДИНИТЬ ВСЕ
			                                        |
			                                        |ВЫБРАТЬ
			                                        |	CRM_Триггеры.Действует,
			                                        |	CRM_Триггеры.УсловиеСрабатывания,
			                                        |	CRM_Триггеры.Действие,
			                                        |	CRM_Триггеры.Ссылка,
			                                        |	"""",
			                                        |	CRM_Триггеры.ПредставлениеНастроекУсловия,
			                                        |	CRM_Триггеры.ПредставлениеНастроекДействия,
			                                        |	CRM_Триггеры.Действие.ИндексЦвета,
			                                        |	&Настроить,
			                                        |	&Удалить,
													|	ВЫБОР КОГДА CRM_Триггеры.Действует ТОГДА 0 ИНАЧЕ 1 КОНЕЦ,
													|	ВЫБОР КОГДА CRM_Триггеры.Действует ТОГДА ""►"" ИНАЧЕ ""ǁ"" КОНЕЦ,
			                                        |	0
			                                        |ИЗ
			                                        |	Справочник.CRM_Триггеры КАК CRM_Триггеры
			                                        |ГДЕ
			                                        |	CRM_Триггеры.СостояниеИнтереса = &СостояниеИнтереса
			                                        |	И НЕ CRM_Триггеры.ПометкаУдаления";
			
			//ЭтотОбъект[ИмяРеквизита].ОсновнаяТаблица = "Справочник.CRM_Триггеры";
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "СостояниеИнтереса", ВыборкаСостояний.Ссылка, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "ПереносСтроки", Символы.ПС, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "Настроить", НСтр("ru = 'Настроить'"), Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "Удалить", НСтр("ru = 'Удалить'"), Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "НастройкиНеЗаданы", НСтр("ru = 'Настройки не заданы'"), Истина);
			
			ЭтотОбъект[ИмяРеквизита].УстановитьОбязательноеИспользование("Ссылка", Истина);
			УО = ЭтотОбъект[ИмяРеквизита].УсловноеОформление.Элементы;
			
			// Для настройки триггера
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Истина,Ложь,Ложь,Ложь));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Условие");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексЦвета");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = -1;
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,8,, Истина));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Действие");
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеНастроекУсловия");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексЦвета");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = -1; 
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеНастроекДействия");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредставлениеНастроекДействия");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = ""; // Для настройки триггера
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Действие");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Действие");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = ""; // Для настройки триггера
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Настроить");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Настроить");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = ""; // Для настройки триггера
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Удалить");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Удалить");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = ""; // Для настройки триггера
			
			Для каждого Цвет из СписокЦветов Цикл
				ЭлементУО = УО.Добавить();
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет.Значение.Цвет);
				ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
				ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ИндексЦвета");
				ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексЦвета");
				ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементУсловия.ПравоеЗначение = Цвет.Ключ;
			КонецЦикла;
			
			ВыборкаСостоянийТемп.Сбросить();
			ВыборкаСостоянийТемп.НайтиСледующий(Новый Структура("Ссылка", ВыборкаСостояний.Ссылка));
			ГруппаЗавершено = Неопределено;
			ГруппаЗавершеноГоризонт = Неопределено;
			ГруппаЗавершеноКнопки = Неопределено;
			Если ВыборкаСостояний.Завершено Тогда
				ГруппаЗавершено = Элементы.Найти("Завершено_"+ИдентификаторСценария);
				Если ГруппаЗавершено = Неопределено Тогда
					ГруппаЗавершеноГоризонт = Элементы.Добавить("ЗавершеноГоризонт_"+ИдентификаторСценария, Тип("ГруппаФормы"), Элементы.ГруппаТриггеры);
					ГруппаЗавершеноГоризонт.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЗавершеноГоризонт.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
					ГруппаЗавершеноГоризонт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					ГруппаЗавершеноГоризонт.ОтображатьЗаголовок = Ложь;
					
					ГруппаЗавершеноКнопки = Элементы.Добавить("ГруппаЗавершеноКнопки_"+ИдентификаторСценария, Тип("ГруппаФормы"), ГруппаЗавершеноГоризонт);
					ГруппаЗавершеноКнопки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЗавершеноКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаЗавершеноКнопки.ОтображатьЗаголовок = Ложь;
					ГруппаЗавершеноКнопки.РастягиватьПоВертикали = Истина;
					
					ГруппаЗавершено = Элементы.Добавить("Завершено_"+ИдентификаторСценария, Тип("ГруппаФормы"), ГруппаЗавершеноГоризонт);
					ГруппаЗавершено.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЗавершено.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
					ГруппаЗавершено.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаЗавершено.ОтображатьЗаголовок = Ложь;
					ГруппаЗавершено.РастягиватьПоГоризонтали = Ложь;
				Иначе
					ГруппаЗавершеноГоризонт = ГруппаЗавершено.Родитель;
				КонецЕсли;
			КонецЕсли;
			Если ВыборкаСостоянийТемп.Следующий() Тогда
		        ИмяРеквизитаСлед = "Этап_"+СтрЗаменить(Строка(ВыборкаСостоянийТемп.Ссылка.УникальныйИдентификатор()),"-","_");
				ГруппаЭлементСлед = Элементы.Найти("Группа_"+ИмяРеквизитаСлед);
				Если ГруппаЭлементСлед = Неопределено Тогда
					ГруппаЭлемент = Элементы.Добавить("Группа_"+ИмяРеквизита, Тип("ГруппаФормы"), ?(ГруппаЗавершено = Неопределено, Элементы.ГруппаТриггеры, ГруппаЗавершено));
				Иначе
					ГруппаЭлемент = Элементы.Вставить("Группа_"+ИмяРеквизита, Тип("ГруппаФормы"), Элементы.ГруппаТриггеры, ?(ВыборкаСостоянийТемп.Завершено, Элементы.Найти("ЗавершеноГоризонт_"+ИдентификаторСценария), ГруппаЭлементСлед));
				КонецЕсли;
			Иначе
				ГруппаЭлемент = Элементы.Добавить("Группа_"+ИмяРеквизита, Тип("ГруппаФормы"), ?(ГруппаЗавершено = Неопределено, Элементы.ГруппаТриггеры, ГруппаЗавершено));
			КонецЕсли;
			ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлемент.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
			ГруппаЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
			ГруппаЭлемент.РастягиватьПоГоризонтали = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСостояний.ВидСостояния) Тогда
				ГруппаЭлементКнопки = Элементы.Добавить("ГруппаЭлементКнопки_"+ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент);
				ГруппаЭлементКнопки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаЭлементКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ГруппаЭлементКнопки.ОтображатьЗаголовок = Ложь;
				ГруппаЭлементКнопки.РастягиватьПоВертикали = Истина;
			КонецЕсли;
			
			Если НЕ (ВыборкаСостояний.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.Первое
				ИЛИ ВыборкаСостояний.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение) Тогда
				
				Если ГруппаЗавершено = Неопределено Тогда
					Кнопка = Элементы.Добавить("ДобавитьСостояние_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементКнопки);
				Иначе
					Кнопка = Элементы.Вставить("ДобавитьСостояние_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЗавершеноКнопки);
				КонецЕсли;
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Картинка = БиблиотекаКартинок.CRM_ПлюсГолубой;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Подсказка = НСтр("ru = 'Добавить состояние интереса'");
				Кнопка.УстановитьДействие("Нажатие", "КомандаДобавитьСостояниеИнтереса");
				Кнопка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
				Кнопка.Высота = 3;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСостояний.ВидСостояния)  Тогда
				
				Кнопка = Элементы.Добавить("ПоменятьСостоянияМестами_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементКнопки);
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Картинка = БиблиотекаКартинок.CRM_ПоменятьМестами;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Подсказка = НСтр("ru = 'Поменять этапы местами'");
				Кнопка.УстановитьДействие("Нажатие", "КомандаПоменятьСостоянияМестами");
				Кнопка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
				Кнопка.РастягиватьПоВертикали = Истина;
				Кнопка.Видимость = ЗначениеЗаполнено(СостояниеПред) И НЕ ЗначениеЗаполнено(СостояниеПред.ВидСостояния);
				
			КонецЕсли;
			
			ГруппаЭлемент1 = Элементы.Добавить("Группа1_"+ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент);
			ГруппаЭлемент1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлемент1.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
			ГруппаЭлемент1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЭлемент1.ОтображатьЗаголовок = Ложь;
			ГруппаЭлемент1.РастягиватьПоГоризонтали = Ложь;
			
			//////// Заголовок колонки состояния интереса
			
			/// Элементы заголовка по умолчанию
			ГруппаЭлементНадписи = Элементы.Добавить("Группа_Надписи_"+ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент1);
			ГруппаЭлементНадписи.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементНадписи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаЭлементНадписи.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементНадписи.РастягиватьПоГоризонтали = Истина;
			
			ДекорацияНазвание = Элементы.Добавить("Декорация_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементНадписи);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияНазвание.Заголовок = ВыборкаСостояний.Представление;
			ДекорацияНазвание.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			ДекорацияНазвание.КонтекстноеМеню.Видимость = Ложь;
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			ДекорацияНазвание.Высота = 1;
			//ДекорацияНазвание.Гиперссылка = Истина;
			ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
			//ДекорацияНазвание.УстановитьДействие("Нажатие", "ТриггерыНаименованиеНажатие");
			//ДекорацияНазвание.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Истина,, Истина);
			
			ДекорацияНазвание = Элементы.Добавить("ДекорацияРедактировать_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементНадписи);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияНазвание.Гиперссылка = Истина;
			ДекорацияНазвание.Картинка = БиблиотекаКартинок.CRM_Изменить;
			ДекорацияНазвание.УстановитьДействие("Нажатие", "РедактироватьСостояниеИнереса");
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			
			ДекорацияНазвание = Элементы.Добавить("ДобавитьТриггер_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементНадписи);
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			ДекорацияНазвание.Заголовок = НСтр("ru = '+ триггер'");
			ДекорацияНазвание.Подсказка = НСтр("ru = 'Добавить триггер'");
			ДекорацияНазвание.Высота = 1;
			ДекорацияНазвание.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
			ДекорацияНазвание.Гиперссылка = Истина;
			ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
			ДекорацияНазвание.УстановитьДействие("Нажатие", "КомандаДобавитьТриггер");
			
			/// Элементы заголовка при редактировании
			ГруппаЭлементНадписи = Элементы.Добавить("Группа_Надписи_Редактирование_"+ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент1);
			ГруппаЭлементНадписи.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементНадписи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаЭлементНадписи.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементНадписи.РастягиватьПоГоризонтали = Истина;
			ГруппаЭлементНадписи.Видимость = Ложь;
			
			ПолеВводаНазвание = Элементы.Добавить("ПолеВводаНаименованияСостояния_"+ИмяРеквизита, Тип("ПолеФормы"), ГруппаЭлементНадписи);
			ПолеВводаНазвание.Вид = ВидПоляФормы.ПолеВвода;
			ПолеВводаНазвание.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВводаНазвание.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			ПолеВводаНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			ПолеВводаНазвание.ПутьКДанным = "Наименование_"+ИмяРеквизита;
			ПолеВводаНазвание.КнопкаВыбора = Истина;
			ПолеВводаНазвание.КартинкаКнопкиВыбора = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение;
			ПолеВводаНазвание.Высота = 1;
			ПолеВводаНазвание.РастягиватьПоВертикали = Ложь;
			ПолеВводаНазвание.УстановитьДействие("НачалоВыбора", "ЗавершитьРедактироватьСостояниеИнереса");

			Если НЕ ВыборкаСостояний.Завершено Тогда
				ДекорацияИндексЦвета = Элементы.Добавить("ИндексЦветаСостояния_"+ИмяРеквизита, Тип("ПолеФормы"), ГруппаЭлементНадписи);
				ДекорацияИндексЦвета.Вид = ВидПоляФормы.ПолеКартинки;
				ДекорацияИндексЦвета.ПутьКДанным = "ИндексЦвета_"+ИмяРеквизита;
				ДекорацияИндексЦвета.КартинкаЗначений = БиблиотекаКартинок.CRM_ЦветаКатегорий;
				ДекорацияИндексЦвета.Гиперссылка = Истина;
				ДекорацияИндексЦвета.Высота = 1;
				ДекорацияИндексЦвета.Ширина = 2;
				ДекорацияИндексЦвета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ДекорацияИндексЦвета.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
				ДекорацияИндексЦвета.РастягиватьПоГоризонтали = Ложь;
				ДекорацияИндексЦвета.РастягиватьПоВертикали = Ложь;
				ДекорацияИндексЦвета.УстановитьДействие("Нажатие", "ИндексЦветаНажатие");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСостояний.ВидСостояния) Тогда
				ДекорацияНазвание = Элементы.Добавить("СкрытьСостояниеИнтереса_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементНадписи);
				ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
				ДекорацияНазвание.Заголовок = НСтр("ru = 'Удалить этап'");
				ДекорацияНазвание.Подсказка = НСтр("ru = 'Удалить этап'");
				ДекорацияНазвание.Высота = 1;
				ДекорацияНазвание.ЦветТекста = WebЦвета.Оранжевый;
				ДекорацияНазвание.Гиперссылка = Истина;
				ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
				ДекорацияНазвание.УстановитьДействие("Нажатие", "СкрытьСостояниеИнтересаНажатие");
			КонецЕсли;
			
			//////////// Динамический список колонки состояния
			ГруппаЭлементСписок = Элементы.Добавить("Группа_Список_"+ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент1);
			ГруппаЭлементСписок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЭлементСписок.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементСписок.РастягиватьПоГоризонтали = Истина;
			ГруппаЭлементСписок.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ДекорацияНазвание = Элементы.Добавить("Декорация_Цвет_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементСписок);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияНазвание.Шрифт = Новый Шрифт(,1);
			ДекорацияНазвание.Высота = 1;
			ДекорацияНазвание.ЦветФона = ЦветЭтапа;
			ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
			ДекорацияНазвание.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияНазвание.РастягиватьПоГоризонтали = Ложь;
			ДекорацияНазвание.Ширина = 30;
			
			Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаЭлементСписок);
			
			Элемент.РежимВыделенияСтроки =РежимВыделенияСтрокиТаблицы.Строка;
			Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			Элемент.ОтображениеСостоянияПросмотра.Видимость = Ложь;
			Элемент.ОтображениеСтрокиПоиска.Видимость = Ложь;
			Элемент.КоманднаяПанель.Видимость = Ложь;
			Элемент.ПутьКДанным = ИмяРеквизита;
			Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизита+".Картинка";
			Элемент.РазрешитьПеретаскивание = Истина;
			Элемент.Видимость = Истина;
			Элемент.Шапка = Ложь;
			Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
			Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
			Элемент.ГоризонтальныеЛинии = Истина;
			Элемент.ВертикальныеЛинии = Ложь;
			Элемент.Заголовок = ВыборкаСостояний.Представление;
			Элемент.КонтекстноеМеню.Видимость = Ложь;
			Элемент.ЧередованиеЦветовСтрок = Ложь;
			Элемент.Высота = 4;
			Элемент.Ширина = 30;
			Элемент.РастягиватьПоВертикали = Истина;
			Элемент.РастягиватьПоГоризонтали = Ложь;
			Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
			Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
			Элемент.УстановитьДействие("Выбор", "ТриггерыОбработкаВыбор");
			Элемент.УстановитьДействие("Перетаскивание", "ТриггерыОбработкаПеретаскивание");
			Элемент.УстановитьДействие("ПередУдалением", "ТриггерыОбработкаПередУдалением");
			Элемент.УстановитьДействие("НачалоПеретаскивания", "ТриггерыОбработкаНачалоПеретаскивания");
			Элемент.УстановитьДействие("ПроверкаПеретаскивания", "ТриггерыОбработкаПроверкаПеретаскивания");
			Элемент.УстановитьДействие("ПередНачаломДобавления", "ТриггерыПередНачаломДобавления");
			Элемент.УстановитьДействие("ПриАктивизацииСтроки", "ТриггерыПриАктивизацииСтроки");
			Если ВыборкаСостояний.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.Первое Тогда
				Элемент.АктивизироватьПоУмолчанию = Истина;
			КонецЕсли;
			
			ГруппаКолонокОбщая = Элементы.Добавить("ГруппаКолонокОбщая_" + ИмяРеквизита, Тип("ГруппаФормы"), Элементы[ИмяРеквизита]);
			ГруппаКолонокОбщая.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонокОбщая.ОтображатьЗаголовок = Ложь;
			ГруппаКолонокОбщая.Группировка = ГруппировкаКолонок.Вертикальная;
			
			ГруппаКолонокГоризонт = Элементы.Добавить("ГруппаКолонокГоризонт_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаКолонокОбщая);
			ГруппаКолонокГоризонт.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонокГоризонт.ОтображатьЗаголовок = Ложь;
			ГруппаКолонокГоризонт.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			ГруппаКолонок = Элементы.Добавить("ГруппаКолонок_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаКолонокГоризонт);
			ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.ОтображатьЗаголовок = Ложь;
			
			ГруппаКолонокНаименование = Элементы.Добавить("ГруппаКолонокНаименование_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаКолонок);
			ГруппаКолонокНаименование.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонокНаименование.ОтображатьЗаголовок = Ложь;
			ГруппаКолонокНаименование.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
				ШиринаЭлемента = 25;
			Иначе
				ШиринаЭлемента = 24;
			КонецЕсли;
			КолонкаНаименование = Элементы.Добавить("Условие" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокНаименование);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Условие";
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10, Истина,);
			КолонкаНаименование.Ширина = ШиринаЭлемента;
			
			
			КолонкаНаименование = Элементы.Добавить("СостояниеТриггера" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокНаименование);
			Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
				КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
				КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".СостояниеТриггераСтр";
				КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
				КолонкаНаименование.Ширина = 2;
			Иначе
				КолонкаНаименование.Вид = ВидПоляФормы.ПолеКартинки;
				КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".СостояниеТриггера";
				КолонкаНаименование.КартинкаЗначений = БиблиотекаКартинок.CRM_СтартПауза;
			КонецЕсли;
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ГиперссылкаЯчейки = Истина;
			
			КолонкаНаименование = Элементы.Добавить("ПредставлениеНастроекУсловия" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ПредставлениеНастроекУсловия";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЦветДополнительногоТекста;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,8,, Истина);
			КолонкаНаименование.Ширина = ШиринаЭлемента;
			
			КолонкаНаименование = Элементы.Добавить("Действие" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Действие";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10, Истина,);
			КолонкаНаименование.Ширина = ШиринаЭлемента;
			
			КолонкаНаименование = Элементы.Добавить("ПредставлениеНастроекДействия" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ПредставлениеНастроекДействия";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЦветДополнительногоТекста;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,8,, Истина);
			КолонкаНаименование.Ширина = ШиринаЭлемента;
			
			ГруппаКолонокУправление = Элементы.Добавить("ГруппаКолонокУправление_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаКолонок);
			ГруппаКолонокУправление.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонокУправление.ОтображатьЗаголовок = Ложь;
			ГруппаКолонокУправление.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			КолонкаНаименование = Элементы.Добавить("НастроитьТриггер" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокУправление);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Настроить";
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,8,Ложь,Ложь,Истина);
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			КолонкаНаименование.ГиперссылкаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.Ширина = ШиринаЭлемента/2;
			
			КолонкаНаименование = Элементы.Добавить("УдалитьТриггер" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокУправление);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Удалить";
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,8,Ложь,Ложь,Истина);
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			КолонкаНаименование.ГиперссылкаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЦветДополнительногоТекста;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.Ширина = ШиринаЭлемента/2;
			
			КолонкаНаименование = Элементы.Добавить("ИндексЦвета" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокГоризонт);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеКартинки;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ИндексЦвета";
			КолонкаНаименование.РастягиватьПоВертикали = Истина;
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			
			//КолонкаНаименование = Элементы.Добавить("ПустаяЯчейка" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокОбщая);
			//КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
			//КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ПустаяЯчейка";
			//КолонкаНаименование.ОтображатьВШапке = Ложь;
			//КолонкаНаименование.Шрифт = Новый Шрифт(,1);
			//КолонкаНаименование.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			//КолонкаНаименование.Ширина = 1;
			//КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
			
		Иначе
			Элементы["Группа_"+ИмяРеквизита].Видимость = Истина;
			ЭлементПоменятьСостоянияМестами = Элементы.Найти("ПоменятьСостоянияМестами_"+ИмяРеквизита);
			Если ЭлементПоменятьСостоянияМестами <> Неопределено Тогда
				ЭлементПоменятьСостоянияМестами.Видимость = ЗначениеЗаполнено(СостояниеПред) И НЕ ЗначениеЗаполнено(СостояниеПред.ВидСостояния);
			КонецЕсли;

			Если ВыборкаСостояний.Завершено Тогда
				ГруппаЗавершеноГоризонт = Элементы.Найти("ЗавершеноГоризонт_"+ИдентификаторСценария);
				Если ГруппаЗавершеноГоризонт <> Неопределено Тогда
					ГруппаЗавершеноГоризонт.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СостояниеПред = ВыборкаСостояний.Ссылка;
		
		ЭтотОбъект["ИндексЦвета_"+ИмяРеквизита] = ВыборкаСостояний.ИндексЦвета;
	КонецЦикла;
	
	Если ГруппаЗавершено <> Неопределено И Элементы.Найти("ЭлементПричиныОтказов"+ИмяРеквизита) = Неопределено Тогда
		ЭлементПричиныОтказов =  Элементы.Добавить("ЭлементПричиныОтказов"+ИмяРеквизита, Тип("КнопкаФормы"), ГруппаЗавершено);
		ЭлементПричиныОтказов.Шрифт = Новый Шрифт( , 10, Истина);
		ЭлементПричиныОтказов.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементПричиныОтказов.ИмяКоманды = "ОткрытьПричиныОтказов";
		ЭлементПричиныОтказов.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		ЭлементПричиныОтказов.РастягиватьПоГоризонтали = Истина;
	КонецЕсли;	
	//ФиксированнаяШирина = (СписокЭлементовТриггеров.Количество() > 6);
	//Для каждого ЭлементТриггера из СписокЭлементовТриггеров Цикл
	//	Если ФиксированнаяШирина тогда
	//		Элементы[ЭлементТриггера.Значение].РастягиватьПоГоризонтали = Ложь;
	//	Иначе
	//		Элементы[ЭлементТриггера.Значение].РастягиватьПоГоризонтали = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСозданияТриггера(ИдентификаторСостояния, Действие)
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("УсловиеСрабатывания", ПредопределенноеЗначение("Справочник.CRM_УсловияСрабатыванияТриггеров.ПриВыбореНовогоСостоянияИнтереса"));
	ПараметрыСоздания.Вставить("Действие", Действие);
	ПараметрыСоздания.Вставить("СостояниеИнтереса", Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния)));
	ПараметрыСоздания.Вставить("ФильтрОбъектДействия", ИдентификаторМетаданныхИнтерес);
	Возврат ПараметрыСоздания;
КонецФункции

&НаСервере
Процедура ПеренестиТриггерВДругоеСостояние(Триггер, ИдентификаторСостояния)
	СостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния));
	ТриггерОбъект = Триггер.ПолучитьОбъект();
	ТриггерОбъект.СостояниеИнтереса = СостояниеИнтереса;
	ТриггерОбъект.Записать();
КонецПроцедуры

&НаСервере
Процедура СкопироватьТриггерВДругоеСостояние(Триггер, ИдентификаторСостояния)
	СостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния));
	ТриггерОбъект = Триггер.Скопировать();
	ТриггерОбъект.СостояниеИнтереса = СостояниеИнтереса;
	ТриггерОбъект.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния)
	Возврат Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния));
КонецФункции

&НаКлиенте
Процедура СкрытьСостояниеИнтересаПродолжение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СкрытьСостояниеИнтереса(ДопПараметры.ИдентификаторСостояния);
		Идентификатор = СтрЗаменить(ДопПараметры.ЭлементИмя, "СкрытьСостояниеИнтереса_", "");
		Элементы["Группа_Надписи_Редактирование_"+Идентификатор].Видимость = Ложь;
		Элементы["Группа_Надписи_"+Идентификатор].Видимость = Истина;
		Элементы["Группа_"+Идентификатор].Видимость = Ложь;
		Оповестить("ИзмененСценарийИнтереса", Сценарий);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкрытьСостояниеИнтереса(ИдентификаторСостояния, Используется = Ложь)
	Если ТипЗнч(ИдентификаторСостояния) = Тип("Строка") Тогда
		Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	Иначе
		Состояние = ИдентификаторСостояния;
	КонецЕсли;
	СостояниеОбъект = Состояние.ПолучитьОбъект();
	СостояниеОбъект.Используется = Используется;
	СостояниеОбъект.Записать();
КонецПроцедуры

&НаСервере
Функция ЕстьИнтересыВСостоянии(ИдентификаторСостояния)
	Если ТипЗнч(ИдентификаторСостояния) = Тип("Строка") Тогда
		Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	Иначе
		Состояние = ИдентификаторСостояния;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_Интерес.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Интерес КАК CRM_Интерес
	                      |ГДЕ
	                      |	CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса");
	Запрос.УстановитьПараметр("СостояниеИнтереса", Состояние);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Функция ЕстьИнтересыПоСценарию()
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_Интерес.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Интерес КАК CRM_Интерес
	                      |ГДЕ
	                      |	CRM_Интерес.СостояниеИнтереса.Родитель = &Сценарий");
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Функция ПолучитьСкрытыеСостояния(ИдентификаторСостояния)
	Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(CRM_СостоянияИнтересов.РеквизитДопУпорядочивания) КАК Левый
	                      |ПОМЕСТИТЬ ЛевоеСостояние
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.Используется
	                      |	И CRM_СостоянияИнтересов.РеквизитДопУпорядочивания < &Правый
	                      |	И CRM_СостоянияИнтересов.Родитель = &Сценарий
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов,
	                      |	ЛевоеСостояние КАК ЛевоеСостояние
	                      |ГДЕ
	                      |	НЕ CRM_СостоянияИнтересов.ПометкаУдаления
	                      |	И НЕ CRM_СостоянияИнтересов.Используется
	                      |	И CRM_СостоянияИнтересов.РеквизитДопУпорядочивания МЕЖДУ ЛевоеСостояние.Левый И &Правый
	                      |	И CRM_СостоянияИнтересов.Родитель = &Сценарий");
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Правый", Состояние.РеквизитДопУпорядочивания);
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыборСкрытыхСостояний(ВыбранныйЭлемент, ИдентификаторСостояния) Экспорт
	Если ВыбранныйЭлемент<>Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "НовоеСостояние" Тогда
			КомандаДобавитьСостояниеИнтересаПродолжение(ИдентификаторСостояния);
		Иначе
			СкрытьСостояниеИнтереса(ВыбранныйЭлемент.Значение, Истина);			
			СоздатьЭлементыТриггеров();
			ИзменитьКонтекстноеМенюТриггеров();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСостояниеИнтересаПродолжение(ИдентификаторСостояния)
	Состояние = СоздатьСостояниеИнтереса(НСтр("ru = 'Новое состояние'"), ИдентификаторСостояния);
	СоздатьЭлементыТриггеров();
	ИзменитьКонтекстноеМенюТриггеров();
	Идентификатор = СтрЗаменить(Строка(Состояние.УникальныйИдентификатор()),"-","_");
	РедактироватьСостояниеИнереса(Элементы["ДекорацияРедактировать_Этап_"+Идентификатор]);
	Оповестить("ИзмененСценарийИнтереса", Сценарий);
КонецПроцедуры

&НаСервере
Функция СоздатьСостояниеИнтереса(Наименование, ИдентификаторСостояния)
	Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	
	НовоеСостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.СоздатьЭлемент();
	НовоеСостояниеИнтереса.Родитель = Сценарий;
	НовоеСостояниеИнтереса.Наименование = Наименование;
	НовоеСостояниеИнтереса.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес;
	НовоеСостояниеИнтереса.Используется = Истина;
	НовоеСостояниеИнтереса.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.ВзаимодействиеИлиЗадача;
	НовоеСостояниеИнтереса.Записать();
	ЭлементыСправочникаПереместить(НовоеСостояниеИнтереса.Ссылка, Состояние);
	
	Возврат НовоеСостояниеИнтереса.Ссылка;
КонецФункции

&НаСервере
Функция ИзменитьСостояниеИнтереса(ИдентификаторСостояния, СтруктураРеквизитов)
	Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	СостояниеОбъект = Состояние.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(СостояниеОбъект, СтруктураРеквизитов);
	СостояниеОбъект.Записать();
	Возврат Новый Структура("Ссылка, Представление", Состояние, Строка(Состояние));
КонецФункции

&НаКлиенте
Процедура РедактироватьСостояниеИнереса(Элемент)
	Идентификатор = СтрЗаменить(Элемент.Имя, "ДекорацияРедактировать_", "");
	Если ПустаяСтрока(ЭтотОбъект["Наименование_"+Идентификатор]) Тогда
		ЭтотОбъект["Наименование_"+Идентификатор] = СписокЭлементовТриггеров.НайтиПоЗначению(Идентификатор).Представление;
	КонецЕсли;
	Элементы["Группа_Надписи_Редактирование_"+Идентификатор].Видимость = Истина;
	Элементы["Группа_Надписи_"+Идентификатор].Видимость = Ложь;
	УстанавливаемыйТекущийЭлемент = "ПолеВводаНаименованияСостояния_"+Идентификатор;
	ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлемент()
	ТекущийЭлемент = Элементы[УстанавливаемыйТекущийЭлемент];
КонецПроцедуры

&НаСервере
Процедура ИзменитьТриггерДействует(Триггер)
	ТриггерОбъект = Триггер.ПолучитьОбъект();
	ТриггерОбъект.Действует = Не ТриггерОбъект.Действует;
	ТриггерОбъект.Записать();
КонецПроцедуры

&НаСервере
Процедура ПометитьТриггерНаУдаление(Триггер)
	ТриггерОбъект = Триггер.ПолучитьОбъект();
	ТриггерОбъект.УстановитьПометкуУдаления(Не ТриггерОбъект.ПометкаУдаления);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТриггерИзМеню(ИдентификаторСостояния, Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ТриггерыПередНачаломДобавленияЗавершение", ЭтотОбъект, ИдентификаторСостояния);
	ПоказатьВыборИзМеню(ОписаниеОповещения, ПолучитьСписокДействийТриггера(), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТриггерВФорме(ИдентификаторСостояния)
	ОписаниеОповещения = Новый ОписаниеОповещения("ТриггерыПередНачаломДобавленияЗавершение", ЭтотОбъект, ИдентификаторСостояния);
	ОткрытьФорму("Справочник.CRM_ДействияТриггеров.ФормаВыбора", Новый Структура("УсловиеСрабатывания", ПредопределенноеЗначение("Справочник.CRM_УсловияСрабатыванияТриггеров.ПриВыбореНовогоСостоянияИнтереса")), ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияТриггера(ИдентификаторСостояния, ВыбраннаяСтрока)
	ПараметрыСоздания = Новый Структура("ФильтрОбъектДействия, Ключ", ИдентификаторМетаданныхИнтерес, ВыбраннаяСтрока);
	ПараметрыСоздания.Вставить("СостояниеИнтереса", Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния)));
	Возврат ПараметрыСоздания;
КонецФункции

&НаСервере
Функция ПолучитьСписокДействийТриггера()
	СписокДействий = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ДействияТриггеров.Ссылка КАК Ссылка,
	                      |	CRM_ДействияТриггеров.ОписаниеТипов КАК ОписаниеТипов
	                      |ИЗ
	                      |	Справочник.CRM_ДействияТриггеров КАК CRM_ДействияТриггеров
	                      |ГДЕ
	                      |	НЕ CRM_ДействияТриггеров.ПометкаУдаления
	                      |	И НЕ CRM_ДействияТриггеров.Ссылка В(&ИсключаемыеДействия)");
	
	ИсключаемыеДействия = Справочники.CRM_ДействияТриггеров.МассивИсключаемыхПоФОПредопределенных();
	Запрос.УстановитьПараметр("ИсключаемыеДействия", ИсключаемыеДействия);
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		ОписаниеТипов = Выборка.ОписаниеТипов.Получить();
		Если ОписаниеТипов <> Неопределено И (ОписаниеТипов.Типы().Количество() = 0 ИЛИ ОписаниеТипов.СодержитТип(Тип("ДокументОбъект.CRM_Интерес"))) Тогда
			Счетчик = Счетчик + 1;
			Если Счетчик > 15 Тогда
				СписокДействий.Вставить("ОткрытьФормуВыбора", НСтр("ru = 'Показать все...'"));
				Прервать;
			КонецЕсли;
			СписокДействий.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДействий;
КонецФункции

&НаКлиенте
Процедура ОповещениеОЗакрытии(Результат = Неопределено, Элемент = Неопределено) Экспорт
	Для Каждого Таблица Из СписокЭлементовТриггеров Цикл
		Элементы[Таблица.Значение].Обновить();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияНастроек(Настройки, ДопПараметры) Экспорт
	
	Если Настройки<>Неопределено Тогда
		ДопПараметры.Элемент.Обновить();
		Если ТипЗнч(ДопПараметры.Ссылка) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
			ПредставлениеСостояния = Строка(ДопПараметры.Ссылка);
			Если Элементы["Декорация_"+ДопПараметры.Элемент.Имя].Заголовок <> ПредставлениеСостояния Тогда
				Элементы["Декорация_"+ДопПараметры.Элемент.Имя].Заголовок = ПредставлениеСостояния;
			КонецЕсли;
			ЭлементЗаголовок = Элементы.Найти("Декорация_Цвет_"+ДопПараметры.Элемент.Имя);
			СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();
			Если ЭлементЗаголовок.ЦветФона <> СписокЦветов[Настройки.ИндексЦвета].Цвет Тогда
				ЭлементЗаголовок.ЦветФона = СписокЦветов[Настройки.ИндексЦвета].Цвет;
			КонецЕсли;
		КонецЕсли;
		Оповестить("ИзмененоСостояниеИнтереса", ДопПараметры.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭлементыФормыПереместить(ПеретаскиваемыйРеквизит, Элемент)
	
	ИдентификаторСостояния = СтрЗаменить(ПеретаскиваемыйРеквизит, "Декорация_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	Перетаскиваемый = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	
	ИдентификаторСостояния = СтрЗаменить(Элемент, "Декорация_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ПередЭлементом = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	
	Если ПередЭлементом.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.Первое 
		ИЛИ ПередЭлементом.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
		
		Возврат;
	КонецЕсли;
	
	Элементы.Переместить(Элементы["Группа_"+СтрЗаменить(ПеретаскиваемыйРеквизит, "Декорация_", "")], Элементы.ГруппаТриггеры, Элементы["Группа_"+СтрЗаменить(Элемент, "Декорация_", "")]);
	ИдентификаторСостояния = СтрЗаменить(Элемент, "Декорация_Этап_", "");
	
	ВидимостьТемп = Элементы["ПоменятьСостоянияМестами_"+СтрЗаменить(ПеретаскиваемыйРеквизит, "Декорация_", "")].Видимость;
	Элементы["ПоменятьСостоянияМестами_"+СтрЗаменить(ПеретаскиваемыйРеквизит, "Декорация_", "")].Видимость = Элементы["ПоменятьСостоянияМестами_"+СтрЗаменить(Элемент, "Декорация_", "")].Видимость;
	Элементы["ПоменятьСостоянияМестами_"+СтрЗаменить(Элемент, "Декорация_", "")].Видимость = ВидимостьТемп;
	
	ЭлементыСправочникаПереместить(Перетаскиваемый, ПередЭлементом);
	
КонецПроцедуры

&НаСервере
Процедура ЭлементыСправочникаПереместить(Перетаскиваемый, ПередЭлементом)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(CRM_СостоянияИнтересов.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
	                      |ПОМЕСТИТЬ Максимальный
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания < &Порядок
	                      |	И CRM_СостоянияИнтересов.Родитель = &Родитель
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания КАК Порядок,
	                      |	Максимальный.РеквизитДопУпорядочивания КАК МаксПорядок
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
	                      |		ПО (ИСТИНА)
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания >= &Порядок1
	                      |	И CRM_СостоянияИнтересов.РеквизитДопУпорядочивания < &Порядок2
	                      |	И CRM_СостоянияИнтересов.Родитель = &Родитель
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания");
	Запрос.УстановитьПараметр("Родитель", Сценарий);
	Запрос.УстановитьПараметр("Порядок", ПередЭлементом.РеквизитДопУпорядочивания);
	Если Перетаскиваемый.РеквизитДопУпорядочивания<ПередЭлементом.РеквизитДопУпорядочивания Тогда
		Запрос.УстановитьПараметр("Порядок1", Перетаскиваемый.РеквизитДопУпорядочивания);
		Запрос.УстановитьПараметр("Порядок2", ПередЭлементом.РеквизитДопУпорядочивания);
		Дельта = -1;
	Иначе
		Запрос.УстановитьПараметр("Порядок2", Перетаскиваемый.РеквизитДопУпорядочивания);
		Запрос.УстановитьПараметр("Порядок1", ПередЭлементом.РеквизитДопУпорядочивания);
		Дельта = 1;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Макс = 1;
	Если Выборка.Следующий() Тогда
		Макс = Выборка.МаксПорядок;
	КонецЕсли;
	СостояниеОбъект = Перетаскиваемый.ПолучитьОбъект();
	СостояниеОбъект.РеквизитДопУпорядочивания = Макс + 1;
	СостояниеОбъект.ДополнительныеСвойства.Вставить("РеквизитаУпорядочиванияУстановлен", Истина);
	СостояниеОбъект.Записать();
	Если Макс + 1 = ПередЭлементом.РеквизитДопУпорядочивания Тогда
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			СостояниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СостояниеОбъект.РеквизитДопУпорядочивания = СостояниеОбъект.РеквизитДопУпорядочивания+Дельта;
			СостояниеОбъект.ДополнительныеСвойства.Вставить("РеквизитаУпорядочиванияУстановлен", Истина);
			СостояниеОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНаименованиеСценария()
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.Наименование = НаименованиеСценария;
	СценарийОбъект.Записать();
	Элементы.ГруппаТекущийСценарий.Заголовок = "   "+НаименованиеСценария+"   ";
	Идентификатор = СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()),"-","_");
	Команда = Команды.Найти("ВыбратьСценарий"+Идентификатор);
	Команда.Заголовок = Строка(Сценарий);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСценариев()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	                      |	CRM_СостоянияИнтересов.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	                      |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания");
						  
	СписокСценариев = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСценариев.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	Возврат СписокСценариев;
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокСостоянияИнтереса(СценарийСсылка)
	
	Если Сценарий = СценарийСсылка.Родитель Тогда
		ИдентификаторЭтапа = СтрЗаменить(Строка(СценарийСсылка.УникальныйИдентификатор()),"-","_");
		ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
		ЭлементГруппа = Элементы.Найти("Группа_"+ИмяРеквизита);
		Если ЭлементГруппа<>Неопределено Тогда
			ЭлементГруппа.Видимость = СценарийСсылка.Используется;
		КонецЕсли;
		ЭлементЗаголовок = Элементы.Найти("Декорация_"+ИмяРеквизита);
		Если ЭлементЗаголовок<>Неопределено Тогда
			ЭлементЗаголовок.Заголовок = Строка(СценарийСсылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодразделениеПриИзмененииНаСервере(Подразделение, Сценарий)
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.Подразделение = Подразделение;
	СценарийОбъект.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокТиповУслугПриИзмененииНаСервере(СписокТиповУслуг, Сценарий)
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.ТипыУслуг.Очистить();
	Для каждого ЭлементСписка из СписокТиповУслуг Цикл
		НовТип = СценарийОбъект.ТипыУслуг.Добавить();
		НовТип.ТипУслуги = ЭлементСписка.Значение;
	КонецЦикла;
	СценарийОбъект.Записать();
КонецПроцедуры

&НаКлиенте
// Продолжение процедуры "ЦветНачалоВыбора"
//
Процедура ЦветНачалоВыбораЗавершение(Результат, ЭлементИмя) Экспорт
	Если НЕ (Результат = Неопределено) И НЕ (Результат = КодВозвратаДиалога.Отмена) Тогда
		СтандартнаяОбработка = Ложь;
		ИдентификаторСостояния = СтрЗаменить(ЭлементИмя, "ИндексЦветаСостояния_Этап_", "");
		ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
		Состояние = ИзменитьСостояниеИнтереса(ИдентификаторСостояния, Новый Структура("ИндексЦвета", Результат[0].Картинка));
		Идентификатор = СтрЗаменить(ЭлементИмя, "ИндексЦветаСостояния_", "");
		ЭтотОбъект["ИндексЦвета_"+Идентификатор] = Результат[0].Картинка;
		Элементы["Декорация_Цвет_"+Идентификатор].ЦветФона = Новый Цвет(Результат[0].Красный, Результат[0].Зеленый, Результат[0].Синий);
		Оповестить("ИзмененоСостояниеИнтереса", Состояние.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтекстноеМенюТриггеров()
	Для каждого ЭлементТриггера из СписокЭлементовТриггеров Цикл
		Для каждого ЭлементМеню Из Элементы[ЭлементТриггера.Значение].КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			ЭлементМеню.Видимость = Ложь;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти










