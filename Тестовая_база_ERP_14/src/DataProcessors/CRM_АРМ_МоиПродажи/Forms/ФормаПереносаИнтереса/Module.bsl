
#Область ОписаниеПеременных

&НаКлиенте
Перем ВремяТемп;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияСервер.СбросНастроекПоложенияОкна(ЭтотОбъект);
	
	Интерес = Параметры.Интерес;
		
	Если Параметры.Свойство("Задача") И ЗначениеЗаполнено(Параметры.Задача) Тогда
		Задача = Параметры.Задача;
	КонецЕсли;
	
	Параметры.Свойство("ОткрытиеИзИнтереса", ОткрытиеИзИнтереса);
	
	Если Параметры.Свойство("ЭтапВоронки") Тогда
		Если ЗначениеЗаполнено(Задача) Тогда
			ПереданныйСписокСостояний	= Параметры.СписокСостояний;
			Для Каждого ЭлементСписокаСостояний ИЗ ПереданныйСписокСостояний Цикл
				Если НЕ Параметры.ЭтапВоронки.Состав.Найти(ЭлементСписокаСостояний.Значение.Состояние, "ТочкаМаршрута") = Неопределено Тогда
					СписокСостояний.Добавить(ЭлементСписокаСостояний.Значение,ЭлементСписокаСостояний.Представление);
				КонецЕсли;
			КонецЦикла;
			Если СписокСостояний.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Переход интереса на данный этап невозможен!';en='Transition of lead at this stage is impossible!'"),,,, Отказ);
				Возврат;
			КонецЕсли;
			СостояниеИнтересаУстановить		= СписокСостояний[0].Значение.Состояние;
			СостояниеИнтересаПредставление	= СписокСостояний[0].Представление;
			Этап							= СписокСостояний[0].Значение.Этап;
			ВариантВыполнения				= СписокСостояний[0].Значение.ВариантВыполнения;
			ЭтоПереход						= СписокСостояний[0].Значение.ЭтоПереход;
		Иначе
			Для Каждого тЭлемент Из Параметры.ЭтапВоронки.Состав Цикл
				Если ТипЗнч(тЭлемент.ТочкаМаршрута) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
					СписокСостояний.Добавить(тЭлемент.ТочкаМаршрута);
				КонецЕсли;
			КонецЦикла;
			Если СписокСостояний.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Переход интереса на данный этап невозможен!';en='Transition of lead at this stage is impossible!'"),,,, Отказ);
				Возврат;
			КонецЕсли;
			СостояниеИнтересаУстановить = СписокСостояний[0].Значение;
			СостояниеИнтересаПредставление = Строка(СписокСостояний[0].Значение);
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("ДанныеВыбранногоСостоянияИнтереса") Тогда	
		Если ТипЗнч(Параметры.ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура") Тогда
			СостояниеИнтересаУстановить		= Параметры.ДанныеВыбранногоСостоянияИнтереса.Состояние;
			СостояниеИнтересаПредставление	= Параметры.ДанныеВыбранногоСостоянияИнтереса.Представление;
			Этап							= Параметры.ДанныеВыбранногоСостоянияИнтереса.Этап;
			ВариантВыполнения				= Параметры.ДанныеВыбранногоСостоянияИнтереса.ВариантВыполнения;
			ЭтоПереход						= Параметры.ДанныеВыбранногоСостоянияИнтереса.ЭтоПереход;
		Иначе
			СостояниеИнтересаУстановить		= Параметры.ДанныеВыбранногоСостоянияИнтереса;
			СостояниеИнтересаПредставление	= Строка(Параметры.ДанныеВыбранногоСостоянияИнтереса);
		КонецЕсли;
		СписокСостояний.Добавить(СостояниеИнтересаУстановить, СостояниеИнтересаПредставление)	
	КонецЕсли;
	ОбработкаВыбораСостоянияИнтересаСервер();
	
	Если СписокСостояний.Количество() > 1 Тогда
		Заголовок = НСтр("ru='Изменение состояния интереса';en='Change of state of lead'");
	Иначе
		Элементы.СостояниеИнтересаПредставление.Видимость = Ложь;
		Заголовок = НСтр("ru = 'Новое состояние: '") + ?(ЗначениеЗаполнено(СписокСостояний[0].Представление), СписокСостояний[0].Представление, Строка(СписокСостояний[0].Значение));
	КонецЕсли;
	
	РазрешатьСозданиеИнтересовПоОдномуТипуУслуги = Константы.CRM_РазрешатьСозданиеИнтересовПоОдномуТипуУслуги.Получить();
	
	ОжидаемаяВыручкаУстановить = Интерес.ОжидаемаяВыручка;
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Если Параметры.Свойство("ИнтересОбъект") Тогда
		ЗаполнитьЗначенияСвойств(ИнтересОбъект, Параметры.ИнтересОбъект,, "CRM_Теги, ДополнительныеРеквизиты, " + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), "Запасы", "Товары, СкидкиНаценки"));
	Иначе
		ЗначениеВРеквизитФормы(Интерес.ПолучитьОбъект(), "ИнтересОбъект");
	КонецЕсли;
	
	ОжидаемаяВыручкаУстановить = ИнтересОбъект.ОжидаемаяВыручка; 
	
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	Если ЗаполнятьПервичныйИнтерес И Параметры.Свойство("СтруктураПервичногоИнтереса") Тогда
		КаналПервичногоИнтереса = Параметры.СтруктураПервичногоИнтереса.КаналПервичногоИнтереса;
		ИсточникПервичногоИнтереса = Параметры.СтруктураПервичногоИнтереса.ИсточникПервичногоИнтереса;
	КонецЕсли;
	
	ИнтересОбъект.СостояниеИнтереса = СостояниеИнтересаУстановить;
	
	НовоеВзаимодействие.Дата = ТекущаяДатаСеанса();
	НовоеВзаимодействие.ПлановаяДата = ТекущаяДатаСеанса();
	НовоеВзаимодействие.ПлановаяДатаЗавершение = НовоеВзаимодействие.ПлановаяДата + 3600;
	НовоеВзаимодействие.Автор = ТекущийПользователь;
	НовоеВзаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Запланировано;
	CRM_ОбщегоНазначенияСервер.ОбработкаЗаполнения(НовоеВзаимодействие, Интерес);
	НовоеВзаимодействие.ДокументОснование	= Интерес;
	НовоеВзаимодействие.КонтактноеЛицо		= Интерес.КонтактноеЛицо;
	НовоеВзаимодействие.ОжидаемаяВыручка	= Интерес.ОжидаемаяВыручка;
	НовоеВзаимодействие.Ответственный		= Интерес.Ответственный;
	НовоеВзаимодействие.Партнер				= Интерес.Партнер;
	НовоеВзаимодействие.Подразделение		= Интерес.Подразделение;
	НовоеВзаимодействие.ПотенциальныйКлиент	= Интерес.ПотенциальныйКлиент;
	НовоеВзаимодействие.Организация			= Интерес.Организация;
	Элементы.КонтактноеЛицо.Видимость = ЗначениеЗаполнено(Интерес.Партнер);
	
	ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
	НоваяЗадача.ДатаНачала = ТекущаяДатаСеанса();
	НоваяЗадача.СрокИсполнения = НоваяЗадача.ДатаНачала + 24*60*60;
	НоваяЗадача.Автор = ТекущийПользователь;
	НоваяЗадача.Исполнитель = ТекущийПользователь;
	НоваяЗадача.CRM_Личная = Истина;
	НоваяЗадача.Предмет	= Интерес;
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	ПлановаяДатаНачала = НовоеВзаимодействие.ПлановаяДата;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Создан новый партнер" Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда
			Попытка
				бФормаОткрытаИзФормыЭтогоСобытия = (Источник.ВладелецФормы = ЭтотОбъект);
			Исключение
				бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
			КонецПопытки;
		Иначе
			бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
		КонецЕсли;
		Если бФормаОткрытаИзФормыЭтогоСобытия Тогда
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				ИнтересОбъект.Партнер = Параметр;
				ИнтересОбъект.КонтактноеЛицо	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Партнер, "CRM_ОсновноеКонтактноеЛицо");
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ИнтересОбъект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				ИнтересОбъект.КонтактноеЛицо	= Параметр;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
				НовоеВзаимодействие.КонтактноеЛицо = ИнтересОбъект.КонтактноеЛицо;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
				НовоеВзаимодействие.Партнер = ИнтересОбъект.Партнер;
			КонецЕсли;
			Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;			
			Элементы.ИнтересОбъектПартнер.Видимость = Истина;			
			Элементы.ИнтересОбъектКонтактноеЛицо.Видимость = Истина;			
			Элементы.КонтактноеЛицо.Видимость = Истина;			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ВидыВзаимодействий") И Источник.ВладелецФормы = ЭтотОбъект Тогда
		ЗаполнитьСписокВыбораВидВзаимодействий();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);

	Если ЗначениеЗаполнено(НовоеВзаимодействие.Тема) Тогда
		Если НЕ ЗначениеЗаполнено(НовоеВзаимодействие.ВидВзаимодействия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен вид взаимодействия!';en='The form of interaction is not filled!'"),, "ВидВзаимодействия",, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовоеВзаимодействие.ПлановаяДата) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена плановая дата взаимодействия!';en='Scheduled date of interaction is not filled!'"),, "ПлановаяДата",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяЗадача.Наименование) Тогда
		Если НЕ ЗначениеЗаполнено(НоваяЗадача.СрокИсполнения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан срок исполнения планируемой задачи!';en='The deadline for the planned task is not specified!'"),, "ДатаОкончание", , Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяЗадача.Исполнитель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан исполнитель планируемой задачи!';en='The executor of the planned task is not specified!'"),, "Исполнитель", , Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяЗадача.Наименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена тема планируемой задачи!';en='The topic of the planned task is not filled!'"),, "Наименование", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	ДокументЗаписан = Ложь;
	Если Не ИнтересОбъект.Завершен Тогда
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ИнтересОбъект.СостояниеИнтереса, "ОбязательноеЗаполнениеКлиента") Тогда
			Если НЕ ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран клиент';en='No customer selected'"));
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем, что поля подразделение и офис заполнены.
	Если Не ЗначениеЗаполнено(ИнтересОбъект.Подразделение)  Тогда
		ПодразделениеПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Ответственный, "Подразделение");
		Если ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
			ИнтересОбъект.Подразделение	= ПодразделениеПользователя;
		Иначе
			ТекстСообщения = Нстр("ru='У текущего пользователя не заполнено подразделение!';en='The current user does not have a department!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнтересОбъект.Ответственный);
			Отказ = Истина;
			Возврат;
		КонецЕсли;						
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ИнтересОбъект.Офис)  Тогда		
		ОфисПодразделения = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Подразделение, "CRM_офис");			
		Если ЗначениеЗаполнено(ОфисПодразделения) Тогда
			ИнтересОбъект.Офис	= ОфисПодразделения;
		Иначе				
			ТекстСообщения = Нстр("ru='У подразделения пользователя не заполнен офис!';en=""The user's office does not have an office full!""");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнтересОбъект.Подразделение);
			Отказ = Истина;				
			Возврат;
		КонецЕсли;									
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса) И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеИнтересаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОП = Новый ОписаниеОповещения("ОбработкаВыбораСостоянияИнтереса", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оп, СписокСостояний, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НеПланировать(Команда)
	УстановитьЦветаТиповАктивности("НеПланировать");	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗадачи(Команда)
	УстановитьЦветаТиповАктивности("ВыборЗадачи");	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВзаимодействия(Команда)
	УстановитьЦветаТиповАктивности("ВыборВзаимодействия");	
КонецПроцедуры

#Область НовоеВзаимодействие

&НаСервере
Процедура ВидВзаимодействияПриИзмененииНаСервере()
	НовоеВзаимодействие.Тема = НовоеВзаимодействие.ВидВзаимодействия.Описание;
	НовоеВзаимодействие.Баллы = НовоеВзаимодействие.ВидВзаимодействия.Баллы;
	Если ЗначениеЗаполнено(НовоеВзаимодействие.ВидВзаимодействия.ПлановыйСрокДней) Тогда
		НовоеВзаимодействие.ПлановаяДата = ТекущаяДата() + НовоеВзаимодействие.ВидВзаимодействия.ПлановыйСрокДней*60*60*24;
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НовоеВзаимодействие.ПлановаяДата + 3600;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидВзаимодействияПриИзменении(Элемент)
	ВидВзаимодействияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура();
	Если ЗначениеЗаполнено(НовоеВзаимодействие.ПлановаяДата) Тогда
		СтруктураПараметров.Вставить("ДатаПоУмолчанию", НовоеВзаимодействие.ПлановаяДата);
	КонецЕсли;
	ВремяТемп = НовоеВзаимодействие.ПлановаяДата-НачалоДня(НовоеВзаимодействие.ПлановаяДата);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(НовоеВзаимодействие, Элемент, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров, РежимОткрытияОкна);
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаПриИзменении(Элемент)
	Если НовоеВзаимодействие.ПлановаяДата = НачалоДня(НовоеВзаимодействие.ПлановаяДата) И ЗначениеЗаполнено(ВремяТемп) Тогда
		НовоеВзаимодействие.ПлановаяДата = НовоеВзаимодействие.ПлановаяДата+ВремяТемп;
		ВремяТемп = Неопределено;
	КонецЕсли;
	Если НачалоДня(ПлановаяДатаНачала) = НачалоДня(НовоеВзаимодействие.ПлановаяДатаЗавершение) Тогда
		ВремяЗавершения = НовоеВзаимодействие.ПлановаяДатаЗавершение - НачалоДня(НовоеВзаимодействие.ПлановаяДатаЗавершение);
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НачалоДня(НовоеВзаимодействие.ПлановаяДата) + ВремяЗавершения;
	КонецЕсли;		
	Если НовоеВзаимодействие.ПлановаяДата>НовоеВзаимодействие.ПлановаяДатаЗавершение Тогда
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НовоеВзаимодействие.ПлановаяДата + 3600;
	КонецЕсли;
	ПлановаяДатаНачала = НовоеВзаимодействие.ПлановаяДата;
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПлановаяДатаВремяНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, НовоеВзаимодействие.ПлановаяДата,
		Элемент, НовоеВзаимодействие.ПлановаяДата,, ОписаниеОповещения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаВремяНачалоВыбораЗавершение(ВыбранноеВремя, Элемент) Экспорт
	
	Если ВыбранноеВремя <> Неопределено Тогда
		НовоеВзаимодействие.ПлановаяДата = ВыбранноеВремя.Значение;
		ПлановаяДатаПриИзменении(Элементы.ПлановаяДата)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаЗавершениеВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПлановаяДатаЗавершениеВремяНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, НовоеВзаимодействие.ПлановаяДатаЗавершение,
		Элемент, НовоеВзаимодействие.ПлановаяДата, Истина, ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаЗавершениеВремяНачалоВыбораЗавершение(ВыбранноеВремя, Элемент) Экспорт
	
	Если ВыбранноеВремя <> Неопределено Тогда
		НовоеВзаимодействие.ПлановаяДатаЗавершение = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НовоеВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	Элементы.ПлановаяДатаВремя.Видимость = НЕ НовоеВзаимодействие.НаВесьДень;
	Элементы.ПлановаяДатаЗавершениеВремя.Видимость = НЕ НовоеВзаимодействие.НаВесьДень;
	
	Если НовоеВзаимодействие.НаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		НовоеВзаимодействие.ПлановаяДата = НачалоДня(НовоеВзаимодействие.ПлановаяДата) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НачалоДня(НовоеВзаимодействие.ПлановаяДатаЗавершение) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область НоваяЗадача

&НаКлиенте
Процедура ВариантВыбораПериодаПриИзменении(Элемент)
	ПолучитьСрокОповещенияПоВарианту();
КонецПроцедуры

&НаСервере
Процедура ПолучитьСрокОповещенияПоВарианту()

	ТекущаяДатадляСрока = ТекущаяДатаСеанса();
	
	Если ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Сейчас Тогда
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Через15Минут Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 900;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезЧас Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 3600;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Через4Часа Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 14400;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Через8Часов Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 28800;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 86400;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриДня Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 259200;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезНеделю Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 604800;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 1209600;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезМесяц Тогда	
		
		НоваяЗадача.СрокИсполнения	= ДобавитьМесяц(ТекущаяДатадляСрока,1);
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца Тогда	
		
		НоваяЗадача.СрокИсполнения	= ДобавитьМесяц(ТекущаяДатадляСрока,3);
		
	Иначе //Если Объект.ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Вручную Тогда	
		
		Если НоваяЗадача.СрокИсполнения=Дата(1,1,1) Тогда
		
			НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока;	
		
		КонецЕсли; 
		
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьСрокОповещенияПоВарианту()

&НаКлиенте
Процедура ДатаОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВремяТемп = НоваяЗадача.СрокИсполнения-НачалоДня(НоваяЗадача.СрокИсполнения);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончаниеПриИзменении(Элемент)
	Если НоваяЗадача.СрокИсполнения = НачалоДня(НоваяЗадача.СрокИсполнения) И ЗначениеЗаполнено(ВремяТемп) Тогда
		НоваяЗадача.СрокИсполнения = НоваяЗадача.СрокИсполнения+ВремяТемп;
		ВремяТемп = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяОкончаниеНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, НоваяЗадача.СрокИсполнения,
		Элемент, НоваяЗадача.СрокИсполнения,, ОписаниеОповещения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеНачалоВыбораЗавершение(ВыбранноеВремя, Элемент) Экспорт
	
	Если ВыбранноеВремя <> Неопределено Тогда
		НоваяЗадача.СрокИсполнения = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обработать(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписью(Отказ);
	Если НЕ Отказ Тогда
		Результат = ОбработатьИнтересНаСервере();
		Если Результат<>Неопределено И Результат.Успех Тогда
			Закрыть(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовогоКлиента".
//
Процедура СоздатьНовогоКлиента(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПотенциальныйКлиент", ИнтересОбъект.ПотенциальныйКлиент);
	CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
КонецПроцедуры // СоздатьНовогоКлиента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораВидВзаимодействий()
	СостоянияИнтереса = Новый Массив;
	СостоянияИнтереса.Добавить(СостояниеИнтересаУстановить);
	СостоянияИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.СостояниеИнтереса", Новый ФиксированныйМассив(СостоянияИнтереса)));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес));
	Элементы.ВидВзаимодействия.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
КонецПроцедуры

&НаСервере
Функция ОбработатьИнтересНаСервере()
	
	НачатьТранзакцию();
	
	Попытка
		
		Результат = Новый Структура("Успех, Сообщение, Взаимодействие");
		// обработка интереса
		
		Если НЕ ОткрытиеИзИнтереса Тогда
			Если ЗаполнятьПервичныйИнтерес Тогда
				ЗаписатьПервичныйИнтерес();
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Задача
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
			|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
			|	И НЕ ЗадачаИсполнителя.Выполнена";
			Запрос.УстановитьПараметр("Интерес", Интерес);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(Задача) И Задача = ВыборкаДетальныеЗаписи.Задача Тогда
					
					Если ЭтоПереход Тогда
						
						Если (СостояниеИнтересаУстановить.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение И Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка())
							ИЛИ Этап.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
							
							ПараметрыДосрочногоЗавершения = Новый Структура();
							ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				,Истина);
							ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
							ПараметрыДосрочногоЗавершения.Вставить("Задача"							,Задача);
							
							Если Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
								ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,Задача.CRM_ТочкаМаршрута);
								ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
							Иначе
								ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,Этап);
								ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,Этап.ВариантЗавершения);
							КонецЕсли;
							
							CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
						Иначе
							CRM_БизнесПроцессыСервер.ВыполнитьПереходБизнесПроцессаНаЭтап(Задача.БизнесПроцесс, Этап);
						КонецЕсли;
					Иначе
						ЗадачаОбъект								= Задача.ПолучитьОбъект();
						ЗадачаОбъект.CRM_ВариантВыполнения			= ВариантВыполнения;
						Попытка
							ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ЗадачаОбъект.CRM_ТочкаМаршрута,
							ВариантВыполнения,
							ЗадачаОбъект.БизнесПроцесс.НомерВерсииКартыМаршрута);
						Исключение
						КонецПопытки;
						ЗадачаОбъект.Записать();
						
						CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача,,Неопределено,,);
					КонецЕсли;
					
					Если НЕ Задача.БизнесПроцесс.Завершен Тогда
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Интерес",Интерес);
						Запрос.УстановитьПараметр("CRM_СостояниеИнтереса", СостояниеИнтересаУстановить);
						Запрос.Текст = "ВЫБРАТЬ
						|	ЗадачаИсполнителя.Ссылка
						|ИЗ
						|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
						|ГДЕ
						|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
						|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
						|	И НЕ ЗадачаИсполнителя.Выполнена";
						
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СсылкаНаЗадачу = Выборка.Ссылка;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности) Тогда
			Если СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ИначеЕсли СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			Иначе
				ТипАктивности = Неопределено;
			КонецЕсли;
			РегистрыСведений.CRM_ЗапланированныеАктивности.ЗавершитьАктивности(Интерес, РезультатТекущегоВзаимодействия, ТипАктивности, СостояниеИнтересаУстановить.ОтборЗавершаемыхАктивностей);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовоеВзаимодействие.Тема) Тогда
			РеквизитФормыВЗначение("НовоеВзаимодействие").Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяЗадача.Наименование) Тогда
			НоваяЗадача.Дата = ТекущаяДатаСеанса();
			РеквизитФормыВЗначение("НоваяЗадача").Записать();
		КонецЕсли;
		
		МассивВидовВзаимодействий = Справочники.CRM_ВидыВзаимодействий.ПолучитьАвтоСоздаваемыеПоСостояниюИнтереса(СостояниеИнтересаУстановить);
		УжеСозданоВзаимодействие = МассивВидовВзаимодействий.Найти(НовоеВзаимодействие.ВидВзаимодействия);
		Если УжеСозданоВзаимодействие<>Неопределено Тогда
			МассивВидовВзаимодействий.Удалить(УжеСозданоВзаимодействие);
		КонецЕсли;
		Для каждого ВидНовогоВзаимодействия из МассивВидовВзаимодействий Цикл
			ПлановаяДата = ТекущаяДата()+ВидНовогоВзаимодействия.ПлановыйСрокДней*60*60*24;
			НовоеВзаимодействиеОбъект = Документы.CRM_Взаимодействие.СоздатьДокумент();
			НовоеВзаимодействиеОбъект.Дата					= ТекущаяДатаСеанса();
			НовоеВзаимодействиеОбъект.Автор					= ТекущийПользователь;
			НовоеВзаимодействиеОбъект.Тема					= ВидНовогоВзаимодействия.Описание;
			НовоеВзаимодействиеОбъект.Баллы					= ВидНовогоВзаимодействия.Баллы;
			НовоеВзаимодействиеОбъект.ВидВзаимодействия		= ВидНовогоВзаимодействия;
			НовоеВзаимодействиеОбъект.ДокументОснование		= Интерес;
			НовоеВзаимодействиеОбъект.КонтактноеЛицо			= Интерес.КонтактноеЛицо;
			НовоеВзаимодействиеОбъект.ОжидаемаяВыручка		= ОжидаемаяВыручкаУстановить;
			НовоеВзаимодействиеОбъект.Ответственный			= Интерес.Ответственный;
			НовоеВзаимодействиеОбъект.Партнер					= Интерес.Партнер;
			НовоеВзаимодействиеОбъект.ПлановаяДата			= ПлановаяДата;
			НовоеВзаимодействиеОбъект.Подразделение			= Интерес.Подразделение;
			НовоеВзаимодействиеОбъект.ПотенциальныйКлиент		= Интерес.ПотенциальныйКлиент;
			НовоеВзаимодействиеОбъект.Содержание				= ВидНовогоВзаимодействия.Описание;
			НовоеВзаимодействиеОбъект.СостояниеИнтереса		= СостояниеИнтересаУстановить;
			НовоеВзаимодействиеОбъект.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
			НовоеВзаимодействиеОбъект.Организация				= Интерес.Организация;
			НовоеВзаимодействиеОбъект.ПлановаяДатаЗавершение	= ПлановаяДата + 60*15;
			НовоеВзаимодействиеОбъект.Задача					= СсылкаНаЗадачу;
			НовоеВзаимодействиеОбъект.Записать();
		КонецЦикла;
		
		Если НЕ ОткрытиеИзИнтереса И ЗначениеЗаполнено(СостояниеИнтересаУстановить.ОбязательноеПланированиеАктивности) Тогда
			Если СостояниеИнтересаУстановить.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.ВзаимодействиеИЗадача Тогда
				СледАктивность = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Интерес, Перечисления.CRM_ТипыАктивности.Взаимодействие); 
				Если СледАктивность = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет запланированных взаимодействий по текущему интересу. Запись документа невозможна!';en='There are no planned interactions for the current lead. You can not record a document!'"));
					ОтменитьТранзакцию();
					Возврат Неопределено;
				КонецЕсли;
				СледАктивность = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Интерес, Перечисления.CRM_ТипыАктивности.Задача); 
				Если СледАктивность = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет запланированных задач по текущему интересу. Запись документа невозможна!';en='There are no scheduled tasks for the current lead. You can not record a document!'"));
					ОтменитьТранзакцию();
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли СостояниеИнтересаУстановить.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.Взаимодействие Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
				ТекстСообщения = НСтр("ru='Нет запланированных взаимодействий по текущему интересу. Запись документа невозможна!';en='There are no planned interactions for the current lead. You can not record a document!'")
			ИначеЕсли СостояниеИнтересаУстановить.ОбязательноеПланированиеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
				ТекстСообщения = НСтр("ru='Нет запланированных личных задач по текущему интересу. Запись документа невозможна!';en='There are no scheduled personal tasks for the current lead. You can not record a document!'")
			Иначе 
				ТипАктивности = Неопределено;
				ТекстСообщения = НСтр("ru='Нет запланированных активностей по текущему интересу. Запись документа невозможна!';en='There are no scheduled activities for the current lead. You can not record a document!'")
			КонецЕсли;
			СледАктивность = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Интерес, ТипАктивности); 
			Если СледАктивность = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	
		ИнтересОбъект.ОжидаемаяВыручка = ОжидаемаяВыручкаУстановить;
		ИнтересОбъект.ПричинаОтказа = ПричинаОтказаУстановить;
		ИнтересОбъект.СостояниеИнтереса = СостояниеИнтересаУстановить;
		ИнтересОбъект.Завершен = СостояниеИнтересаУстановить.Завершено;
		ИнтересОбъект.ДатаЗакрытия = ТекущаяДатаСеанса();
		Если Не ОткрытиеИзИнтереса Тогда
			РеквизитФормыВЗначение("ИнтересОбъект", Тип("ДокументОбъект.CRM_Интерес")).Записать();
		Иначе
			Результат.Вставить("ИнтересОбъект", ИнтересОбъект);
			Если ЗаполнятьПервичныйИнтерес Тогда
				Результат.Вставить("КаналПервичногоИнтереса", КаналПервичногоИнтереса);
				Результат.Вставить("ИсточникПервичногоИнтереса", ИсточникПервичногоИнтереса);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Результат.Взаимодействие = Интерес;
		Результат.Успех = Истина;
	Исключение
		Результат.Взаимодействие = Неопределено;
		Результат.Успех = Ложь;
		Результат.Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОтменитьТранзакцию();
		//Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Процедура удаляет из массива проверяемых реквизитов реквизит с указанным именем.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//	ИмяРеквизита			- Строка	- Имя удаляемого реквизита.
//
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если НЕ (Индекс = Неопределено) Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьИзПроверяемыхРеквизитов()

&НаСервере
// Процедура убирает лишние реквизиты из массива реквизитов для проверки на заполнение.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	
	Если ЗаполнятьПервичныйИнтерес Тогда
		Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
			НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.Партнер), Истина, Ложь);
		Иначе
			НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент), Истина, Ложь);
		КонецЕсли;	
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
				КонецЕсли;
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе	
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Если НЕ СостояниеИнтересаУстановить.УказаниеОжидаемойВыручки Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ОжидаемаяВыручкаУстановить");
	КонецЕсли;
	Если НЕ УказыватьДостигнутыйРезультат Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"РезультатТекущегоВзаимодействия");
	КонецЕсли;
	Если НЕ СостояниеИнтересаУстановить.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ПричинаОтказаУстановить");
	КонецЕсли;
	
КонецПроцедуры // ПроверяемыеРеквизиты()

&НаСервере
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
		НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.Партнер), Истина, Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент), Истина, Ложь);
	КонецЕсли;	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность	= Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
	КонецЕсли;	
	// Отметки незаполненного
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	ИначеЕсли НЕ Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
		Иначе
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаСервере
// Процедура получает предыдущий интерес партнера.
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
		ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, , ИнтересОбъект.Партнер);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
		ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, , ИнтересОбъект.ПотенциальныйКлиент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересПервичный.КаналПервичногоИнтереса) Тогда
		СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, ИнтересПервичный);
		СтрокаПервичногоИнтереса.КаналПервичногоИнтереса	= ИнтересПервичный.КаналПервичногоИнтереса;
		СтрокаПервичногоИнтереса.ИсточникПервичногоИнтереса	= ИнтересПервичный.ИсточникПервичногоИнтереса;
		СтрокаПервичногоИнтереса.Актуальность = Истина;			
		Если ЗначениеЗаполнено(ИнтересПервичный.КаналПервичногоИнтереса) 
			И ТипЗнч(ИнтересПервичный.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
					= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если ЗначениеЗаполнено(ИнтересПервичный.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = ИнтересПервичный.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(ИнтересОбъект.Дата);
				ДатаАктуальности = ИнтересПервичный.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры // ПолучитьПредыдущийПервичныйИнтересПоПартнеру()

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы	= Новый Структура("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ДополнительныеПараметры.Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаСервере
// Процедура выполняет запись первичного интереса.
//
// Параметры:
//	ТекущийОбъект	- ДокументСсылка	- Текущий объект.
//
Процедура ЗаписатьПервичныйИнтерес()
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ИнтересОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ИнтересОбъект.Ссылка);
		НаборЗаписей.Записать();
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если (НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ИсточникиПервичногоИнтереса.Период КАК Период
				|ИЗ
				|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
				|ГДЕ
				|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
				|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
				|");
				Запрос.УстановитьПараметр("Сделка", ИнтересОбъект.Ссылка);
				Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Запрос.УстановитьПараметр("Партнер", ИнтересОбъект.Партнер);
				Иначе
					Запрос.УстановитьПараметр("Партнер", ИнтересОбъект.ПотенциальныйКлиент);
				КонецЕсли;	
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = Выборка.Период;
					МенеджерЗаписи.Сделка = ИнтересОбъект.Ссылка;
					Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
						МенеджерЗаписи.Партнер = ИнтересОбъект.Партнер;
					Иначе
						МенеджерЗаписи.Партнер = ИнтересОбъект.ПотенциальныйКлиент;
					КонецЕсли;	
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				Запись = НаборЗаписей.Добавить();
				Запись.Период						= ИнтересОбъект.Дата;
				Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Запись.Партнер					= ИнтересОбъект.Партнер;
				Иначе
					Запись.Партнер					= ИнтересОбъект.ПотенциальныйКлиент;
				КонецЕсли;	
				Запись.Сделка						= ИнтересОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры // ЗаписатьПервичныйИнтерес()

&НаСервере
// Процедура выполняет чтение сохраненных значений первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	// Определяем канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если НЕ ИнтересОбъект.Ссылка.Пустая() Тогда
		 	ИнтересПервичный = Неопределено;
			Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
				ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, ИнтересОбъект.Ссылка, ИнтересОбъект.Партнер);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
				ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, ИнтересОбъект.Ссылка, ИнтересОбъект.ПотенциальныйКлиент);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИнтересПервичный) Тогда
				//Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса    = ИнтересПервичный.КаналПервичногоИнтереса;
					ИсточникПервичногоИнтереса = ИнтересПервичный.ИсточникПервичногоИнтереса;
				//КонецЕсли;
			КонецЕсли;	
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ИнтересОбъект.Завершен Тогда
		Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
			//Если НЕ ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
			//	Элементы.ИнтересОбъектКонтактноеЛицо.Видимость = Истина;
			//	Элементы.ИнтересОбъектКонтактноеЛицо.АвтоОтметкаНезаполненного = Истина;
			//	Элементы.ИнтересОбъектКонтактноеЛицо.ОтметкаНезаполненного = Истина;
			//КонецЕсли;	
		ИначеЕсли НЕ ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
			Элементы.ИнтересОбъектПотенциальныйКлиент.Видимость = Истина;
			Элементы.ИнтересОбъектПотенциальныйКлиент.АвтоОтметкаНезаполненного = Истина;
			Элементы.ИнтересОбъектПотенциальныйКлиент.ОтметкаНезаполненного = Истина;
			Элементы.ГруппаПотенциальныйКлиент.Видимость = Истина;
			Элементы.ГруппаПотенциальныйКлиент.ТолькоПросмотр = Ложь;
			Элементы.СоздатьНовогоКлиента.Видимость = Ложь;
		КонецЕсли;	
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ИнтересОбъект.СостояниеИнтереса, "ОбязательноеЗаполнениеКлиента") Тогда
			Если ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) И НЕ ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
				Элементы.ГруппаПотенциальныйКлиент.Видимость = Истина;
			Иначе
				Если НЕ ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Элементы.ИнтересОбъектПартнер.Видимость = Истина;
					Элементы.ИнтересОбъектПартнер.АвтоОтметкаНезаполненного = Истина;
					Элементы.ИнтересОбъектПартнер.ОтметкаНезаполненного = Истина;
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
					Элементы.ИнтересОбъектКонтактноеЛицо.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнятьПервичныйИнтерес Тогда
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(Дата(1,1,1));			
			Актуальность = Ложь;
			ПредыдущийИсточник = Неопределено;
			Попытка
				ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
			Исключение КонецПопытки;
			Если ПредыдущийИсточник <> Неопределено Тогда
			
				Актуальность = ПредыдущийИсточник.Актуальность;
			
			КонецЕсли;
			Если НЕ Актуальность Тогда
				Если НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
					Элементы.КаналПервичногоИнтереса.Видимость = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) И НЕ (ЗначениеЗаполнено(КаналПервичногоИнтереса) И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))) Тогда
					Элементы.ИсточникПервичногоИнтереса.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
	
КонецПроцедуры // НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаВыбораСостоянияИнтереса(Результат, Дополнительно) Экспорт
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
			СостояниеИнтересаПредставление	= Результат.Представление;
			СостояниеИнтересаУстановить		= Результат.Значение.Состояние;
			Этап							= Результат.Значение.Этап;
			ВариантВыполнения				= Результат.Значение.ВариантВыполнения;
			ЭтоПереход						= Результат.Значение.ЭтоПереход;
		Иначе
			СостояниеИнтересаПредставление	= Строка(Результат.Значение);
			СостояниеИнтересаУстановить		= Результат.Значение;
		КонецЕсли;
		
		ВидНовогоВзаимодействия = Неопределено;
		ОбработкаВыбораСостоянияИнтересаСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСостоянияИнтересаСервер()
	ЗаполнитьСписокВыбораВидВзаимодействий();
	УказаниеОжидаемойВыручки = СостояниеИнтересаУстановить.УказаниеОжидаемойВыручки;
	Элементы.ОжидаемаяВыручкаУстановить.АвтоОтметкаНезаполненного = УказаниеОжидаемойВыручки;
	Элементы.ОжидаемаяВыручкаУстановить.ОтметкаНезаполненного = УказаниеОжидаемойВыручки;
	Элементы.ОжидаемаяВыручкаУстановить.Видимость = УказаниеОжидаемойВыручки;
	Элементы.ПричинаОтказаУстановить.Видимость = (СостояниеИнтересаУстановить.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение);
	Если СостояниеИнтересаУстановить.УказыватьДостигнутыйРезультат Тогда
		Если ЗначениеЗаполнено(СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности) Тогда
			Если СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ИначеЕсли СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			Иначе
				ТипАктивности = Неопределено;
			КонецЕсли;
			УказыватьДостигнутыйРезультат = РегистрыСведений.CRM_ЗапланированныеАктивности.ЕстьАктивностиКЗавершению(Интерес, ТипАктивности, СостояниеИнтересаУстановить.ОтборЗавершаемыхАктивностей);
			Элементы.ГруппаОписание.Видимость = УказыватьДостигнутыйРезультат;
		КонецЕсли;
	Иначе	
		РезультатТекущегоВзаимодействия = "";
		Элементы.ГруппаОписание.Видимость = Ложь;
		УказыватьДостигнутыйРезультат = Ложь;
	КонецЕсли;
	ТипПланируемойАктивности = СостояниеИнтересаУстановить.ОбязательноеПланированиеАктивности;
	Если НЕ ЗначениеЗаполнено(ТипПланируемойАктивности) И НЕ СостояниеИнтересаУстановить.ИнтерактивноеПланированиеАктивностей Тогда
		АктивныйЭлементТипаАктивности = "НеПланировать";
	ИначеЕсли ТипПланируемойАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.Задача Тогда
		АктивныйЭлементТипаАктивности = "ВыборЗадачи";
	Иначе
		АктивныйЭлементТипаАктивности = "ВыборВзаимодействия";
	КонецЕсли;
	УстановитьЦветаТиповАктивности(АктивныйЭлементТипаАктивности);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаТиповАктивности(ИмяЭлементаТипаАктивности)
	АктивныйЭлементТипаАктивности = Элементы[ИмяЭлементаТипаАктивности];
	Если АктивныйЭлементТипаАктивности = Элементы.НеПланировать Тогда
		Элементы.ГруппаЗакладки.Видимость = Ложь;
	ИначеЕсли АктивныйЭлементТипаАктивности = Элементы.ВыборЗадачи Тогда
		Элементы.ГруппаЗакладки.Видимость = Истина;
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапланироватьЛичнуюЗадачу;
	Иначе
		Элементы.ГруппаЗакладки.Видимость = Истина;
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапланироватьВзаимодействие;
	КонецЕсли;
	Если АктивныйЭлементТипаАктивности.ЦветФона <> ЦветаСтиля.CRM_ОсновнойГолубой Тогда
		Для каждого Элемент из Элементы.ГруппаВидАктивности.ПодчиненныеЭлементы Цикл
			Если Элемент = АктивныйЭлементТипаАктивности Тогда
				Элемент.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
				Элемент.ЦветРамки = ЦветаСтиля.CRM_ОсновнойГолубой;
			Иначе
				Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
				Элемент.ЦветРамки = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти







