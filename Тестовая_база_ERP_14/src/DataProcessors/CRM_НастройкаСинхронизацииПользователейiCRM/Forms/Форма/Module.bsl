
&НаКлиенте
Процедура ЗаполнитьПоГруппеПользователей(Команда)
	Если Не ИспользоватьГруппыПользователей Тогда
		ПоказатьПредупреждение(, НСтр("ru='Отключена настройка ""Использовать группы пользователей""!';en='Settings ""Are disconnect to use groups of users""!'"), 10);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе,ВыборГруппПользователей", Истина, Истина, Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка", ПараметрыФормы, ЭтотОбъект, ,);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПослеУдаления(Элемент)
	ОбновитьИнформациюПоЛицензиям();
	ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
	ПеренумироватьСтрокиКлиент();
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоАктивных()
	ОтборСтрок = Новый Структура("Состояние,ИспользуетПодписку", Перечисления.CRM_СостоянияСинхронизацииПользователя.Активен, Ложь);
	МассивСтрок = ТаблицаПользователей.НайтиСтроки(ОтборСтрок);
	Возврат МассивСтрок.Количество();
КонецФункции

&НаСервере
Функция ПеренумироватьСтрокиСервер()
	Сч = 0;
	Для Каждого Строка Из ТаблицаПользователей Цикл
		Сч = Сч + 1;
		Строка.НомерСтроки = Сч;
	КонецЦикла;	
КонецФункции

&НаКлиенте
Функция ПеренумироватьСтрокиКлиент()
	Сч = 0;
	Для Каждого Строка Из ТаблицаПользователей Цикл
		Сч = Сч + 1;
		Строка.НомерСтроки = Сч;
	КонецЦикла;	
КонецФункции


&НаКлиенте
Процедура ТаблицаПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Состояние = ПредопределенноеЗначение("Перечисление.CRM_СостоянияСинхронизацииПользователя.Активен") Тогда
			Если ПолучитьКоличествоАктивных() > КолВоЛицензий Тогда
				ТекДанные.Состояние = ПредопределенноеЗначение("Перечисление.CRM_СостоянияСинхронизацииПользователя.Блокирован");
				ТекДанные.КартинкаСостояние = 1;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
	ПеренумироватьСтрокиКлиент();
	ОбновитьИнформациюПоЛицензиям();
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЛицензии(Команда)
	ОбновитьИнформациюПоЛицензиям();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор);
		Элемент.ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.CRM_СостоянияСинхронизацииПользователя.Блокирован");
		Элемент.ТекущиеДанные.КартинкаСостояние = 1;
		Если НЕ CRM_ОбщегоНазначенияСервер.РаботаВМоделиСервисаНЕРазделенныйСеанс() Тогда
			Элемент.ТекущиеДанные.ИспользуетПодписку = Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусАктивен(Команда)
	УстановитьСтатусНаСервере("Активен");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаблокирован(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениесостоянияЗавершение", ЭтотОбъект, "Заблокирован");
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='ВНИМАНИЕ! Работа пользователя в приложении iCRM будет заблокирована. Продолжить?';en='ATTENTION! User work in the iCRM application will be blocked. Continue?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтключен(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениесостоянияЗавершение", ЭтотОбъект, "Отключен");
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='ВНИМАНИЕ! При отключении пользователя ВСЕ ДАННЫЕ будут удалены из приложения iCRM при первом же запуске. Продолжить?';en='ATTENTION! When the user is disconnected, ALL DATA will be removed from the iCRM application at the first start. Continue?'"), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениесостоянияЗавершение(Ответ, НовыйСтатус) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьСтатусНаСервере(НовыйСтатус);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусНаСервере(НовыйСтатус)
	ЕстьОшибкиАктивации = Ложь;
	Для Каждого Строка Из Элементы.ТаблицаПользователей.ВыделенныеСтроки Цикл
		ТекСтрока = ТаблицаПользователей.НайтиПоИдентификатору(Строка);
		Если НовыйСтатус = "Отключен" Тогда
			Если ТекСтрока.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Отключен Тогда Продолжить КонецЕсли;
			ТекСтрока.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Отключен;
			ТекСтрока.КартинкаСостояние = 2;
		КонецЕсли;	
		Если НовыйСтатус = "Заблокирован" Тогда
			Если ТекСтрока.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Блокирован Тогда Продолжить КонецЕсли;
			ТекСтрока.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Блокирован;
			ТекСтрока.КартинкаСостояние = 1;
		КонецЕсли;
		Если НовыйСтатус = "Активен" Тогда
			Если ТекСтрока.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Активен Тогда Продолжить КонецЕсли;
			Если ТекСтрока.Пользователь.Недействителен Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Пользователь '")+ТекСтрока.Пользователь+НСтр("ru=' недействителен! Использование мобильного приложения для него недоступно.'");
				Сообщение.Сообщить();

				Продолжить;
			КонецЕсли;	
			Если ПолучитьКоличествоАктивных() < КолВоЛицензий или ТекСтрока.ИспользуетПодписку Тогда
				ТекСтрока.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Активен;
				ТекСтрока.КартинкаСостояние = 0;
			Иначе
				ТекСтрока.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Блокирован;
				ТекСтрока.КартинкаСостояние = 1;
				ЕстьОшибкиАктивации = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Если ЕстьОшибкиАктивации Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Превышено число доступных лицензий для приложения iCRM (серия ключей 719B). Для приобретения ключей обратитесь к партнеру фирмы 1С или на линию тех. поддержки CRM по адресу crm@rarus.ru';en='The number of available licenses for the iCRM application has been exceeded (key series 719B). Purchase the keys, contact your 1C partner or on the line of those. CRM support at crm@rarus.ru'");
		Сообщение.Сообщить();
	КонецЕсли;	
	ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
	ПеренумироватьСтрокиСервер();
	ОбновитьИнформациюПоЛицензиям();
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры	

&НаСервере
Процедура СформироватьФайлНастроекНаСервере()
	//Попытка
	//	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().СоздатьНастройкиСинхронизации();
	//Исключение
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = НСтр("ru='Не удалось сохранить настройки синхронизации.';en='Failed to save sync settings.'");
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СформироватьФайлНастроекСервер()
	ПриЗакрытииНаСервере();
	Если НЕ ЭтотОбъект.Модифицированность Тогда
		ПеречитатьТаблицупользователей();
		ОбновитьИнформациюПоЛицензиям();	
	КонецЕсли;
	ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
	ПеренумироватьСтрокиСервер();
КонецПроцедуры


&НаКлиенте
Процедура СформироватьФайлНастроек(Команда)
	СформироватьФайлНастроекСервер();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользуетсяОбменСiCRM") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	ФлагОтбора = "Все";
	ПеречитатьТаблицупользователей();
	
	Если Модифицированность Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
	ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
	ПеренумироватьСтрокиСервер();
	ОбновитьИнформациюПоЛицензиям();
	Элементы.ТаблицаОповещенийОповещениеНапоминание.Видимость	= Константы.CRM_ИспользоватьНапоминания.Получить();
	Элементы.ТаблицаОповещенийОповещениеSMS.Видимость			= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	Элементы.ТаблицаОповещенийОповещениеEmail.Видимость		= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	
	ЗапросНастроек = Новый Запрос;
	ЗапросНастроек.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиОтправкиОповещенийЛицензийiCRM.Пользователь КАК Пользователь,
	|	CRM_НастройкиОтправкиОповещенийЛицензийiCRM.ОповещениеSMS КАК ОповещениеSMS,
	|	CRM_НастройкиОтправкиОповещенийЛицензийiCRM.ОповещениеEmail КАК ОповещениеEmail,
	|	CRM_НастройкиОтправкиОповещенийЛицензийiCRM.ОповещениеНапоминание КАК ОповещениеНапоминание
	|ИЗ
	|	РегистрСведений.CRM_НастройкиОтправкиОповещенийЛицензийiCRM КАК CRM_НастройкиОтправкиОповещенийЛицензийiCRM";
	ТаблицаОповещений.Загрузить(ЗапросНастроек.Выполнить().Выгрузить());
	
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() И НЕ CRM_ОбщегоНазначенияСервер.РаботаВМоделиСервисаНЕРазделенныйСеанс() Тогда
		Элементы.ГруппаПодпискаiCRM.Видимость = Ложь;
		Элементы.ДекорацияСостояниеЛицензий.Видимость = Ложь;
		Элементы.ПересчитатьЛицензии.Видимость = Ложь;
		Элементы.ГруппаНастройкаОповещений.Видимость = Ложь;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ТаблицаПользователейИспользуетПодписку.Видимость = Ложь;
	КонецЕсли;	
	
	CRM_АдресПубликацииiCRM = Константы.CRM_АдресПубликацииiCRM.Получить();
	CRM_ПарольПользователяСинхронизацииiCRM = Константы.CRM_ПарольПользователяСинхронизацииiCRM.Получить();
	CRM_ПользовательСинхронизацииiCRM = Константы.CRM_ПользовательСинхронизацииiCRM.Получить();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЛицензиям()
	СтруктураЛицензий = CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПолучитьСтруктуруЛицензииiCRM(Ложь);
	КолВоЛицензий = 0;
	ТекстПодсказки = НСтр("ru='Активные ключи iCRM (серия 719B):';en='Active keys iCRM (series 719B):'");
	ТекстПодсказкиЗаблокировано = НСтр("ru='Заблокированные ключи:';en='Locked keys:'");
	ОтборСтрок = Новый Структура("ИспользуетПодписку", Ложь);
	МассивСтрок = ТаблицаПользователей.НайтиСтроки(ОтборСтрок);
	КолВоПользователей = МассивСтрок.Количество();
	ЕстьЗаблокированные = Ложь;
	Если СтруктураЛицензий = Неопределено Тогда
		ТекстПодсказки = ТекстПодсказки + НСтр("ru='Ключ № ----------
			|- Количество ключей 0, срок окончания ------
			|- Не хватает ключей '")+КолВоПользователей;
	Иначе	
		Для Каждого ЭлементЛицензия Из  СтруктураЛицензий Цикл
			Лицензия = ЭлементЛицензия.Значение;
			Если Лицензия = Неопределено Тогда Продолжить КонецЕсли;
			Если НЕ Лицензия.Просрочено Тогда
				КолВоЛицензий = КолВоЛицензий + Лицензия.КоличествоЛицензий;
				Если ТекстПодсказки <> "" Тогда
					ТекстПодсказки = ТекстПодсказки+"
					|";
				КонецЕсли;	
				ТекстПодсказки = ТекстПодсказки + НСтр("ru='С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=")+НСтр("ru='
				|- Количество ключей '")+Лицензия.КоличествоЛицензий+НСтр("ru=', срок окончания '")+формат(Лицензия.ДатаОкончания,"ДЛФ=DD");
			Иначе	
				ЕстьЗаблокированные = Истина;
				Если ТекстПодсказкиЗаблокировано <> "" Тогда
					ТекстПодсказкиЗаблокировано = ТекстПодсказкиЗаблокировано+"
					|";
				КонецЕсли;
				ТекстПодсказкиЗаблокировано = ТекстПодсказкиЗаблокировано + НСтр("ru='С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=")+НСтр("ru='
				|- Количество ключей '")+Лицензия.КоличествоЛицензий+НСтр("ru=', срок действия истек '")+формат(Лицензия.ДатаОкончания,"ДЛФ=DD");

			КонецЕсли;
	
		КонецЦикла;	
		Если ЕстьЗаблокированные Тогда
			ТекстПодсказки = ТекстПодсказки + Символы.ПС + "
			|" + ТекстПодсказкиЗаблокировано;
		КонецЕсли;	
		//Если КолВоПользователей > КолВоЛицензий Тогда
		//	ТекстПодсказки = ТекстПодсказки + "
		//	//|- Не хватает лицензий "+(КолВоПользователей-КолВоЛицензий)+ "
		//	|Получить дополнительные лицензии можно по адресу http://1crm.ru/products/icrm";
		//КонецЕсли;	
	КонецЕсли;
	//ОтборСтрок = Новый Структура("Состояние", Перечисления.CRM_СостоянияСинхронизацииПользователя.Активен);
	//МассивСтрок = ТаблицаПользователей.НайтиСтроки(ОтборСтрок);
	Элементы.ДекорацияСостояниеЛицензий.Заголовок = НСтр("ru='Всего '")+КолВоЛицензий+НСтр("ru=' ключей, свободно '")+(КолВоЛицензий-ПолучитьКоличествоАктивных());
	Элементы.ДекорацияСостояниеЛицензий.Подсказка = ТекстПодсказки;
КонецПроцедуры

&НаСервере
Процедура ПеречитатьТаблицупользователей(ТаблицаСостояний = Неопределено)
	
	ТаблицаПользователей.Загрузить(CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПолучитьТаблицуПользователей(ТаблицаСостояний, Модифицированность));
	Для Каждого Строка Из ТаблицаПользователей Цикл
		Если ЗначениеЗаполнено(Строка.ДатаОтправкиПриглашения) Тогда
			Строка.КартинкаПисьма = 0;
		Иначе
			Строка.КартинкаПисьма = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция  ПроверитьВозможностьДобавления(Пользователь)
	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
	МассивСтрок = ТаблицаПользователей.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() > 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Уже существуют настройки для пользователя '")+Пользователь;
		Сообщение.Сообщить();
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура ТаблицаПользователейПользовательПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаПользователей.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) и ПроверитьВозможностьДобавления(ТекДанные.Пользователь) Тогда
		
		СписокАдресов = СформироватьСписокАдресов(ТекДанные.Пользователь);
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.ЭлектроннаяПочта					= Адрес.Представление;
			Иначе
				ТекДанные.ЭлектроннаяПочта					= "";
			КонецЕсли;
		Иначе
			ТекДанные.ЭлектроннаяПочта					= "";
		КонецЕсли;
		ТекДанные.Подразделение = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекДанные.Пользователь, "Подразделение");
	Иначе
		ТекДанные.Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ТекДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ТекДанные.ЭлектроннаяПочта					= "";
	КонецЕсли;
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция СформироватьСписокАдресов(ТекущиеДанные, ВидКИ = Неопределено, ИспользоватьКИДляОповещений = Ложь)
	
	Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	СписокАдресов = Новый СписокЗначений;	
	
	Если НЕ Таб = Неопределено Тогда
		
		ПерваяСтрока = Неопределено;
		
		СписокЗнач = Новый СписокЗначений;
		ТекСсылка = "";
		ПерваяСтрокаБыла = Ложь;
		
		Для Каждого СтрокаТаб Из Таб Цикл
			
			СтруктураАдреса = Новый Структура;
			
			Если НЕ ТекСсылка = СтрокаТаб.Ссылка Тогда
				
				Если ПерваяСтрока = Неопределено Тогда						
					СтруктураАдреса.Вставить("Адрес"		,СокрЛП(СтрокаТаб.АдресЭП));
					СтруктураАдреса.Вставить("Представление",СокрЛП(СтрокаТаб.Представление));
					СтруктураАдреса.Вставить("Объект"		,СтрокаТаб.Ссылка);
					СписокАдресов.Добавить(СтруктураАдреса, Строка(СтрокаТаб.Ссылка));
					ТекСсылка = СтрокаТаб.Ссылка;						
				Иначе						
					СтруктураАдреса.Вставить("Адрес"		,СокрЛП(ПерваяСтрока.АдресЭП));
					СтруктураАдреса.Вставить("Представление",СокрЛП(ПерваяСтрока.Представление));
					СтруктураАдреса.Вставить("Объект"		,ПерваяСтрока.Ссылка);
					СписокАдресов.Добавить(СтруктураАдреса, Строка(ПерваяСтрока.Ссылка));
					ТекСсылка = ПерваяСтрока.Ссылка;
					ПерваяСтрока = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураАдреса = Новый Структура;
			СтруктураАдреса.Вставить("Адрес"		,СокрЛП(СтрокаТаб.АдресЭП));
			СтруктураАдреса.Вставить("Представление",СокрЛП(СтрокаТаб.Представление));
			СтруктураАдреса.Вставить("Объект"		,СтрокаТаб.Ссылка);
			СписокАдресов.Добавить(СтруктураАдреса, "   "+СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;	
		Если СписокАдресов.Количество() > 0 Тогда
			Возврат СписокАдресов;
		КонецЕсли;				
	КонецЕсли;	
	
	Возврат СписокАдресов;
	
КонецФункции


&НаКлиенте
Процедура ТаблицаПользователейЭлектроннаяПочтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.ТаблицаПользователей.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвоиЛицаАдресЗавершениеВыбора", ЭтотОбъект, ТекДанные);
	СписокАдресов = СформироватьСписокАдресов(ТекДанные.Пользователь);
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите адрес';en='Choose an address'"));
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаАдресЗавершениеВыбора(ЭлементСписка, ТекДанные) Экспорт
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	Адрес = ЭлементСписка.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекДанные.ЭлектроннаяПочта = Адрес.Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция  ПроверитьВозможностьДобавленияПочта(ЭлектроннаяПочта)
	СтруктураОтбора = Новый Структура("ЭлектроннаяПочта", ЭлектроннаяПочта);
	МассивСтрок = ТаблицаПользователей.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() > 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Уже существуют настройки с указанной почтой '")+ЭлектроннаяПочта;
		Сообщение.Сообщить();
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура ТаблицаПользователейЭлектроннаяПочтаПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	Если НЕ ПроверитьВозможностьДобавленияПочта(СокрЛП(Элемент.ТекстРедактирования)) Тогда
		ТекДанные = Элементы.ТаблицаПользователей.ТекущиеДанные;
		ТекДанные.ЭлектроннаяПочта = "";
	КонецЕсли;	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПроверитьТаблицуПользователейПередЗаписью()
	ЕстьОшибки = Ложь;
	Сч = 0;
	Для Каждого Строка Из ТаблицаПользователей Цикл
		Строка.ЭлектроннаяПочта = СокрЛП(Строка.ЭлектроннаяПочта);
		Сч = Сч + 1;
		РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Строка.ЭлектроннаяПочта));
		Если СокрЛП(Строка.ЭлектроннаяПочта) = "" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В строке '")+Сч+НСтр("ru=' у пользователя '")+Строка.Пользователь+НСтр("ru=' не заполнен адрес электронной почты.'");
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		Иначе	
			Если РезультатПроверки.КодОшибки<>0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='В строке '")+Сч+НСтр("ru=' у пользователя '")+Строка.Пользователь+НСтр("ru=' не корректно заполнен адрес электронной почты.'");
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Строка.Пользователь.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В строке '")+Сч+НСтр("ru=' не указан пользователь.'");
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
	ТабДляПроверки = ТаблицаПользователей.Выгрузить();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповД = Новый ОписаниеТипов(Массив);
	
	ТабДляПроверки.Колонки.Добавить("Колво",ОписаниеТиповД);
	Для Каждого Строка Из ТабДляПроверки Цикл
		Строка.Колво = 1;
	КонецЦикла;	
	ТабДляПроверки.Свернуть("ЭлектроннаяПочта","Колво");
	Для Каждого Строка Из ТабДляПроверки Цикл
		Если Строка.Колво > 1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Указаны одинаковые адреса электронной почты (';en='The same email addresses are shown ('")+Строка.ЭлектроннаяПочта+НСтр("ru=') для разных пользователей.';en=') for different users.'");
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
	Возврат ЕстьОшибки;
КонецФункции

&НаСервере
Процедура ПриЗакрытииНаСервере(Отказ = Неопределено)
	Если ПроверитьТаблицуПользователейПередЗаписью() Тогда
		Возврат;
	КонецЕсли;  
	НачатьТранзакцию();
	
	Константы.CRM_АдресПубликацииiCRM.Установить(CRM_АдресПубликацииiCRM);
	Константы.CRM_ПарольПользователяСинхронизацииiCRM.Установить(CRM_ПарольПользователяСинхронизацииiCRM);
	Константы.CRM_ПользовательСинхронизацииiCRM.Установить(CRM_ПользовательСинхронизацииiCRM);
	//Попытка
		НаборЗаписей = РегистрыСведений.CRM_СостояниеПользователейСинхронизации.СоздатьНаборЗаписей();
		НаборЗаписей.Записать(Истина);
		Для Каждого Строка Из ТаблицаПользователей Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Активность = Истина;
			Запись.Пользователь = Строка.Пользователь;
			Запись.Состояние = Строка.Состояние;
			Запись.IMEI = Строка.IMEI;
			Запись.Идентификатор = Строка.Идентификатор;                                           	
			Запись.ЭлектроннаяПочта = Строка.ЭлектроннаяПочта;
			Запись.ИспользуетПодписку = Строка.ИспользуетПодписку;
			Запись.ДатаОтправкиПриглашения = Строка.ДатаОтправкиПриглашения;
		КонецЦикла;	
		НаборЗаписей.Записать(Истина);
		Если ЕстьИзмененияНастроекОповещения Тогда
			ИспользоватьНапоминания	= Константы.CRM_ИспользоватьНапоминания.Получить();
			ИспользоватьОповещениеSMS = Константы.CRM_ИспользоватьОповещенияСМС.Получить();
			ИспользоватьОповещениеEmail	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
			// Сначала нужно очистить созданные оповещения
			НаборЗаписей = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидОповещения.Установить(Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Предмет.Установить(Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			СтруктураЛицензий = CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПолучитьСтруктуруЛицензииiCRM(Ложь);
			Если СтруктураЛицензий <> Неопределено Тогда
				Для Каждого ЭлементЛицензия Из  СтруктураЛицензий Цикл
					Лицензия = ЭлементЛицензия.Значение;
					Если Лицензия = Неопределено Тогда Продолжить КонецЕсли;
					Если НЕ Лицензия.Просрочено Тогда
						Для Каждого СтрокаЗаписи Из ТаблицаОповещений Цикл
							Если СтрокаЗаписи.ОповещениеEmail и ИспользоватьОповещениеEmail Тогда
								Менеджер = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
								Менеджер.ВидОповещения = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
								Менеджер.Получатель = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(Лицензия.ДатаОкончания);
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается сегодня.';en='ends today.'");
								Менеджер.Записать(Истина);
								
								Менеджер = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
								Менеджер.ВидОповещения = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
								Менеджер.Получатель = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(Лицензия.ДатаОкончания - 604800);
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается ';en='ends'") + формат(Лицензия.ДатаОкончания,"ДЛФ=DD");
								Менеджер.Записать(Истина);
								
								Менеджер = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
								Менеджер.ВидОповещения = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
								Менеджер.Получатель = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(ДобавитьМесяц(Лицензия.ДатаОкончания, -1));
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается ';en='ends'") + формат(Лицензия.ДатаОкончания,"ДЛФ=DD");
								Менеджер.Записать(Истина);
							КонецЕсли;
							Если СтрокаЗаписи.ОповещениеSMS и ИспользоватьОповещениеSMS Тогда
								Менеджер = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
								Менеджер.ВидОповещения = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Канал = Перечисления.CRM_КаналыОповещений.СМС;
								Менеджер.Получатель = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(Лицензия.ДатаОкончания);
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается сегодня.';en='ends today.'");
								Менеджер.Записать(Истина);
								
								Менеджер = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
								Менеджер.ВидОповещения = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Канал = Перечисления.CRM_КаналыОповещений.СМС;
								Менеджер.Получатель = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(Лицензия.ДатаОкончания - 604800);
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается ';en='ends'") + формат(Лицензия.ДатаОкончания,"ДЛФ=DD");
								Менеджер.Записать(Истина);
								
								Менеджер = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
								Менеджер.ВидОповещения = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Канал = Перечисления.CRM_КаналыОповещений.СМС;
								Менеджер.Получатель = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(ДобавитьМесяц(Лицензия.ДатаОкончания, -1));
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается ';en='ends'") + формат(Лицензия.ДатаОкончания,"ДЛФ=DD");
								Менеджер.Записать(Истина);
							КонецЕсли;
							Если СтрокаЗаписи.ОповещениеНапоминание и ИспользоватьНапоминания Тогда
								Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
								Менеджер.Предмет = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Пользователь = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(Лицензия.ДатаОкончания);
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается сегодня.';en='ends today.'");
								Менеджер.ДатаНачала = Менеджер.ДатаОповещения;
								Менеджер.Записать(Истина);
								
								Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
								Менеджер.Предмет = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Пользователь = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(Лицензия.ДатаОкончания - 604800);
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается ';en='ends'") + формат(Лицензия.ДатаОкончания,"ДЛФ=DD");
								Менеджер.ДатаНачала = Менеджер.ДатаОповещения;
								Менеджер.Записать(Истина);
								
								Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
								Менеджер.Предмет = Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает;
								Менеджер.Пользователь = СтрокаЗаписи.Пользователь;
								Менеджер.ДатаОповещения = НачалоДня(ДобавитьМесяц(Лицензия.ДатаОкончания, -1));
								Менеджер.ДатаАктуальности = КонецДня(Лицензия.ДатаОкончания); 
								Менеджер.Содержание = НСтр("ru='Срок действия ключа iCRM С/Н '") + Формат(Лицензия.НомерКлюча, "ЧГ=") + НСтр("ru=' заканчивается ';en='ends'") + формат(Лицензия.ДатаОкончания,"ДЛФ=DD");
								Менеджер.ДатаНачала = Менеджер.ДатаОповещения;
								Менеджер.Записать(Истина);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.CRM_НастройкиОтправкиОповещенийЛицензийiCRM.СоздатьНаборЗаписей();
			НаборЗаписей.Записать(Истина);
			Для Каждого Строка Из ТаблицаОповещений Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Строка);
				Запись.Активность = Истина;
			КонецЦикла;	
			НаборЗаписей.Записать(Истина);
			ЕстьИзмененияНастроекОповещения = Ложь;
		КонецЕсли;
		СформироватьФайлНастроекНаСервере();
		ЭтотОбъект.Модифицированность = Ложь;
		ЗафиксироватьТранзакцию();
	//Исключение
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = НСтр("ru='Не удалось сохранить настройки по причине: '") + ОписаниеОшибки();
	//	Сообщение.Сообщить();
	//	Отказ = Истина;
	//	ОтменитьТранзакцию();
	//КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если не ЗавершениеРаботы Тогда
		
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияСостояниеЛицензийНажатие(Элемент)
	ПоказатьПредупреждение(,Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ФлагОтбораПриИзменении(Элемент)
	Если ФлагОтбора = "Все" Тогда
	Элементы.ТаблицаПользователей.ОтборСтрок = Неопределено;
	ИначеЕсли ФлагОтбора = "Активные" Тогда
		Элементы.ТаблицаПользователей.ОтборСтрок = Новый ФиксированнаяСтруктура("Состояние", ПредопределенноеЗначение("Перечисление.CRM_СостоянияСинхронизацииПользователя.Активен"));
	ИначеЕсли ФлагОтбора = "Заблокированные" Тогда
		Элементы.ТаблицаПользователей.ОтборСтрок = Новый ФиксированнаяСтруктура("Состояние", ПредопределенноеЗначение("Перечисление.CRM_СостоянияСинхронизацииПользователя.Блокирован"));
	ИначеЕсли ФлагОтбора = "Отключенные" Тогда
		Элементы.ТаблицаПользователей.ОтборСтрок = Новый ФиксированнаяСтруктура("Состояние", ПредопределенноеЗначение("Перечисление.CRM_СостоянияСинхронизацииПользователя.Отключен"));
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ОтправитьПриглашениеНаСервере()
	ЗащищеннаяОбработка = CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку();
	Для Каждого Строка Из Элементы.ТаблицаПользователей.ВыделенныеСтроки Цикл
		ТекСтрока = ТаблицаПользователей.НайтиПоИдентификатору(Строка);
		Если ТекСтрока.Состояние <> Перечисления.CRM_СостоянияСинхронизацииПользователя.Активен Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Нельзя выслать приглашение не активному пользователю!";
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;	
		
		РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ТекСтрока.ЭлектроннаяПочта));
		Если РезультатПроверки.КодОшибки = 0 Тогда
			ЗащищеннаяОбработка.ОтправитьПриглашениеАдресату(СокрЛП(ТекСтрока.ЭлектроннаяПочта), ТекСтрока.Идентификатор, ТекСтрока.Пользователь);
			ТекСтрока.ДатаОтправкиПриглашения = ТекущаяДатаСеанса();
			ТекСтрока.КартинкаПисьма = 0;
			Менеджер = РегистрыСведений.CRM_СостояниеПользователейСинхронизации.СоздатьМенеджерЗаписи();
			Менеджер.Пользователь = ТекСтрока.Пользователь;
			Менеджер.ДатаОтправкиПриглашения = ТекСтрока.ДатаОтправкиПриглашения;
			Менеджер.ЭлектроннаяПочта = ТекСтрока.ЭлектроннаяПочта;
			Менеджер.Состояние = ТекСтрока.Состояние;
			Менеджер.IMEI = ТекСтрока.IMEI;
			Менеджер.Идентификатор = ТекСтрока.Идентификатор;
			Менеджер.Записать(Истина);
			
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	ОтправитьПриглашениеНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
					
		Если ЭтотОбъект.Модифицированность Тогда
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаЗакрития", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Сохранить сделанные изменения ?';en='Do you want to save the changes made?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена,,,,);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаЗакрития(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Отказ = ПроверитьТаблицуПользователейПередЗаписью();
		ПриЗакрытииНаСервере(Отказ);
		Если НЕ Отказ Тогда
			ЭтотОбъект.Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;	
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
	Если		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если ТаблицаПользователей.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список пользователей?';en='Clear the list of users?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,,);
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение)
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		
		Если ТаблицаПользователей.Количество() > 0 Тогда
		
			ТекстВопроса = НСтр("ru='Очистить список пользователей?';en='Clear the list of users?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена,,,,);
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение)
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТаблицаПользователей.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;								
		КонецЕсли;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		ОбработкаВыбораНаСервере(МассивПользователейГрупп);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТаблицаПользователей.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;												
		КонецЕсли;
		
		
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
			
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)

	Если		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СтруктураОтбора = Новый Структура("Пользователь", ВыбранныйПользовательГруппа);
				МассивСтрок = ТаблицаПользователей.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество() > 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Уже существуют настройки для пользователя '")+ВыбранныйПользовательГруппа;
					Сообщение.Сообщить();
					Продолжить;
				КонецЕсли;	
				СтрокаПолучатель = ТаблицаПользователей.Добавить();
				СтрокаПолучатель.Пользователь = ВыбранныйПользовательГруппа;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранныйПользовательГруппа,ВидыИнформации);
				СтрокаПолучатель.ЭлектроннаяПочта = АдресЭП;
				СтрокаПолучатель.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Блокирован;
				СтрокаПолучатель.КартинкаСостояние = 1;
				СтрокаПолучатель.Подразделение = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаПолучатель.Пользователь, "Подразделение");
				Если НЕ CRM_ОбщегоНазначенияСервер.РаботаВМоделиСервисаНЕРазделенныйСеанс() Тогда
					СтрокаПолучатель.ИспользуетПодписку = Истина;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ДобавитьСвоиЛицаПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда		
		
		мПользователи = ПолучитьПользователейПодразделения(ВыбранноеЗначение);
		Для Каждого Пользователь Из мПользователи Цикл
			Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
				МассивСтрок = ТаблицаПользователей.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество() > 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Уже существуют настройки для пользователя '")+Пользователь;
					Сообщение.Сообщить();
					Продолжить;
				КонецЕсли;
				СтрокаПолучатель = ТаблицаПользователей.Добавить();
				СтрокаПолучатель.Пользователь = Пользователь;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(Пользователь,ВидыИнформации);
				СтрокаПолучатель.ЭлектроннаяПочта = АдресЭП;
				СтрокаПолучатель.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Блокирован;
				СтрокаПолучатель.КартинкаСостояние = 1;
				СтрокаПолучатель.Подразделение = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаПолучатель.Пользователь, "Подразделение");
				Если НЕ CRM_ОбщегоНазначенияСервер.РаботаВМоделиСервисаНЕРазделенныйСеанс() Тогда
					СтрокаПолучатель.ИспользуетПодписку = Истина;
				КонецЕсли;
			КонецЕсли;				
		КонецЦикла;			
		Модифицированность = Истина;
				
	КонецЕсли;
	ТаблицаСостояний = ТаблицаПользователей.Выгрузить();
	ПеречитатьТаблицупользователей(ТаблицаСостояний);
	ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
	ПеренумироватьСтрокиСервер();
	ОбновитьИнформациюПоЛицензиям();
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьСвоиЛицаПоГруппеПользователей(ГруппаПользователей)
	Если Не ЗначениеЗаполнено(ГруппаПользователей) Или ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПользователиГруппы = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(ГруппаПользователей, Истина);
	Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
		СтруктураОтбора = Новый Структура("Пользователь", ПользовательСсылка);
		МассивСтрок = ТаблицаПользователей.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Уже существуют настройки для пользователя '")+ПользовательСсылка;
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		СтрокаПолучатель = ТаблицаПользователей.Добавить();
		СтрокаПолучатель.Пользователь = ПользовательСсылка;
		ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
		АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ПользовательСсылка,ВидыИнформации);
		СтрокаПолучатель.ЭлектроннаяПочта = АдресЭП;
		СтрокаПолучатель.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Блокирован;
		СтрокаПолучатель.КартинкаСостояние = 1;
		СтрокаПолучатель.Подразделение = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаПолучатель.Пользователь, "Подразделение");
		Если НЕ CRM_ОбщегоНазначенияСервер.РаботаВМоделиСервисаНЕРазделенныйСеанс() Тогда
			СтрокаПолучатель.ИспользуетПодписку = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователейПодразделения(Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникПользователи.Ссылка,
	               |	СправочникПользователи.ПометкаУдаления,
	               |	СправочникПользователи.Предопределенный,
	               |	СправочникПользователи.Наименование,
	               |	СправочникПользователи.Подразделение КАК Подразделение
	               |ИЗ
	               |	Справочник.Пользователи КАК СправочникПользователи
	               |ГДЕ
	               |	СправочникПользователи.Подразделение В(&Подразделение)
	               |	И НЕ СправочникПользователи.ПометкаУдаления";	 
	
	Если ПодразделенияСУчетомИерархии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "В(&Подразделение)", "В ИЕРАРХИИ(&Подразделение)");
	КонецЕсли;		
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоПодразделению(Команда)
	ПодразделенияСУчетомИерархии = Ложь;
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);		
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, ,);	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделениюСУчетомВложенных(Команда)
	ПодразделенияСУчетомИерархии = Истина;
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);		
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, ,);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПользователя(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ИспользоватьГруппыПользователей Тогда
		ПараметрыФормы.Вставить("ВыборГруппПользователей",	Истина);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	КонецЕсли;
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаСписка", ПараметрыФормы, Элементы.ТаблицаПользователей, , );
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СтруктураОтбора = Новый Структура("Пользователь", ВыбранныйПользовательГруппа);
				МассивСтрок = ТаблицаПользователей.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество() > 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Уже существуют настройки для пользователя '")+ВыбранныйПользовательГруппа;
					Сообщение.Сообщить();
					Продолжить;
				КонецЕсли;
				СтрокаПолучатель = ТаблицаПользователей.Добавить();
				СтрокаПолучатель.Пользователь = ВыбранныйПользовательГруппа;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранныйПользовательГруппа,ВидыИнформации);
				СтрокаПолучатель.ЭлектроннаяПочта = АдресЭП;
				СтрокаПолучатель.Состояние = ПредопределенноеЗначение("Перечисление.CRM_СостоянияСинхронизацииПользователя.Блокирован");
				СтрокаПолучатель.КартинкаСостояние = 1;
				СтрокаПолучатель.Подразделение = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаПолучатель.Пользователь, "Подразделение");
				Если НЕ CRM_ОбщегоНазначенияСервер.РаботаВМоделиСервисаНЕРазделенныйСеанс() Тогда
					СтрокаПолучатель.ИспользуетПодписку = Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ДобавитьСвоиЛицаПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
		ПеренумироватьСтрокиКлиент();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеВыделенныеСтрокиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='ВНИМАНИЕ! После удаления работа всех выбранных пользователей в приложении iCRM будет заблокирована! Продолжить?';en='ATTENTION! After the removal, the work of all selected users in the iCRM application will be blocked! Continue?'"), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОповещенийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
	ЕстьИзмененияНастроекОповещения = Истина;
КонецПроцедуры


&НаСервере
Процедура УстановитьИспользованиеПодписки(НовыйСтатус)
	ЕстьОшибкиАктивации = Ложь;
	Для Каждого Строка Из Элементы.ТаблицаПользователей.ВыделенныеСтроки Цикл
		ТекСтрока = ТаблицаПользователей.НайтиПоИдентификатору(Строка);
		Если НовыйСтатус = "Установлена" Тогда
			ТекСтрока.ИспользуетПодписку = Истина;
		КонецЕсли;	
		Если НовыйСтатус = "Снята" Тогда
			Если ПолучитьКоличествоАктивных() < КолВоЛицензий Тогда
				ТекСтрока.ИспользуетПодписку = Ложь;
			Иначе
				ТекСтрока.ИспользуетПодписку = Ложь;
				ТекСтрока.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Блокирован;
				ТекСтрока.КартинкаСостояние = 1;
				ЕстьОшибкиАктивации = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Если ЕстьОшибкиАктивации Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Превышено число доступных лицензий для приложения iCRM (серия ключей 719B). Для приобретения ключей обратитесь к партнеру фирмы 1С или на линию тех. поддержки CRM по адресу crm@rarus.ru';en='The number of available licenses for the iCRM application has been exceeded (key series 719B). Purchase the keys, contact your 1C partner or on the line of those. CRM support at crm@rarus.ru'");
		Сообщение.Сообщить();
	КонецЕсли;	
	ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
	ПеренумироватьСтрокиСервер();
	ОбновитьИнформациюПоЛицензиям();
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетПодпискуiCRM(Команда)
	УстановитьИспользованиеПодписки("Установлена");
КонецПроцедуры


&НаКлиенте
Процедура НЕИспользуетПодпискуiCRM(Команда)
	УстановитьИспользованиеПодписки("Снята");
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВыделенныеСтрокиЗавершение(Ответ, НовыйСтатус) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МассивПользователей = Новый Массив;
		Для Каждого Строка Из Элементы.ТаблицаПользователей.ВыделенныеСтроки Цикл
			
			ТекСтрока = ТаблицаПользователей.НайтиПоИдентификатору(Строка);
			
			Если ТекСтрока <> Неопределено Тогда
				МассивПользователей.Добавить(ТекСтрока.Пользователь);
			КонецЕсли;	
		КонецЦикла;
		Для Каждого ПользовательДляУдаления Из МассивПользователей Цикл
			СтруктураПоиска = Новый Структура("Пользователь", ПользовательДляУдаления);
			МассивСтрок = ТаблицаПользователей.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				ТаблицаПользователей.Удалить(МассивСтрок[0]);
			КонецЕсли;	
		КонецЦикла;	
		ТаблицаПользователей.Сортировать("Состояние, ПользовательНаименование");
		ПеренумироватьСтрокиКлиент();
		ОбновитьИнформациюПоЛицензиям();
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура CRM_АдресПубликацииiCRMПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьДанныеДляобменаНаСервере()
	Для Каждого Строка Из Элементы.ТаблицаПользователей.ВыделенныеСтроки Цикл
		ТекСтрока = ТаблицаПользователей.НайтиПоИдентификатору(Строка);
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ТекСтрока.Идентификатор);
		МассивПараметров.Добавить(ТекСтрока.Пользователь);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("CRM_СинхронизацияСiCRMНовый.ЗарегистрироватьНовыйУзелОбмена", МассивПараметров, ТекСтрока.Идентификатор, "Регистрация изменений для узла "+ТекСтрока.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьДанныеДляобмена(Команда)
	ЗарегистрироватьДанныеДляобменаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПравилаОбмена(Команда)
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ЗагрузитьПравилаПродолжение",
				ЭтотОбъект,
				Новый Структура),
			НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';en='Continue, install the file operation extension.'"));
КонецПроцедуры
		
		&НаКлиенте
Процедура ЗагрузитьПравилаПродолжение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("ВопросЗагрузитьПравила", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияЗавершения, НСтр("ru = 'Загрузить новые правила обмена с диска?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузитьПравила(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПравилаЗавершение", ЭтаФорма);
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр = "(*.xml)|*.xml";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПравилаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		АдресФайла = Результат[0].Хранение;
		ЗагрузитьОбработку(АдресФайла);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОбработку(АдресФайла)
	ПараметрыЗащиты = Новый("ОписаниеЗащитыОтОпасныхДействий"+"");
	ПараметрыЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);  // тут у нас будут двоичные данные файла.
КонецПроцедуры


