#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем МенеджерРасчетаЗарплаты;
Перем РасчитываемыйНабор;
Перем ДанныеВедущихЗаписейКаскадногоНормирования;
Перем ДанныеБазовыхНачислений;
Перем КэшЗависимостиВидовРасчета;
Перем КэшСвойстваВидовРасчетаРасчитываемогоНабора;
Перем КэшЗависимотиВидовРасчетаРасчитываемогоНабора;
Перем КэшТребованияНормируемыхПоВремениНачислений;
Перем АлгоритмРасчетаБазы;
Перем КоэффциентыНормированияПоВремениРасчитаны;
Перем ВыполненныеОчередностиКаскадногоРасчетаНачислений;
Перем ЗависимостиКаскадногоРасчета;

#КонецОбласти

Процедура РазбитьПериодыНачислений(ПериодыНачислений, ДатыРазбиения) Экспорт
	ПериодыНачислений.Сортировать("Регистратор, НомерСтроки, ПериодДействияНачало", Новый СравнениеЗначений());
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДатыРазбиения, "Регистратор, НомерСтроки");
	СтруктураПоиска = Новый Структура("Регистратор, НомерСтроки");
	
	ПредыдущийПериод = Неопределено;
	ИндексТекущейСтроки = 0;
	Пока ИндексТекущейСтроки < ПериодыНачислений.Количество() Цикл
		ТекущийПериод = ПериодыНачислений[ИндексТекущейСтроки];
		Если ПредыдущийПериод = Неопределено
			Или ТекущийПериод.Регистратор <> ПредыдущийПериод.Регистратор
			Или ТекущийПериод.НомерСтроки <> ПредыдущийПериод.НомерСтроки Тогда
				
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущийПериод);
			ДатаРазбиенияПоКлючу = ДатыРазбиения.Скопировать(СтруктураПоиска, "Дата");
			ДатаРазбиенияПоКлючу.Сортировать("Дата");
			
			ИндексТекущейСтрокиТаблицыДат = 0;
		КонецЕсли;		
		
		Пока ИндексТекущейСтрокиТаблицыДат <= ДатаРазбиенияПоКлючу.Количество() - 1 Цикл
			ТекущаяСтрокаТаблицыДат = ДатаРазбиенияПоКлючу[ИндексТекущейСтрокиТаблицыДат];
			Если НачалоДня(ТекущийПериод.ПериодДействияНачало) > НачалоДня(ТекущаяСтрокаТаблицыДат.Дата) Тогда
				ИндексТекущейСтрокиТаблицыДат = ИндексТекущейСтрокиТаблицыДат + 1;
				Продолжить;
			ИначеЕсли НачалоДня(ТекущийПериод.ПериодДействияКонец) < НачалоДня(ТекущаяСтрокаТаблицыДат.Дата) Тогда
				Прервать;
			ИначеЕсли НачалоДня(ТекущийПериод.ПериодДействияКонец) = НачалоДня(ТекущийПериод.ПериодДействияНачало) Тогда 	
				ИндексТекущейСтрокиТаблицыДат = ИндексТекущейСтрокиТаблицыДат + 1;
				Продолжить;			
			ИначеЕсли НачалоДня(ТекущаяСтрокаТаблицыДат.Дата) = НачалоДня(ТекущийПериод.ПериодДействияНачало) Тогда
				ИсходнаяДатаОкончания = ТекущийПериод.ПериодДействияКонец; 
				ТекущийПериод.ПериодДействияКонец = КонецДня(ТекущаяСтрокаТаблицыДат.Дата);	
				СтрокаНовогоПериода = ОбщегоНазначенияБЗК.ВставитьСтрокуВТаблицу(
										ПериодыНачислений, 
										ИндексТекущейСтроки + 1,
										ТекущийПериод);
					
				СтрокаНовогоПериода.ПериодДействияНачало = КонецДня(ТекущаяСтрокаТаблицыДат.Дата) + 1;
				СтрокаНовогоПериода.ПериодДействияКонец = ИсходнаяДатаОкончания;	
			Иначе	
				ИсходнаяДатаОкончания = ТекущийПериод.ПериодДействияКонец;
				ТекущийПериод.ПериодДействияКонец = НачалоДня(ТекущаяСтрокаТаблицыДат.Дата) - 1;
					
				СтрокаНовогоПериода = ОбщегоНазначенияБЗК.ВставитьСтрокуВТаблицу(
										ПериодыНачислений, 
										ИндексТекущейСтроки + 1,
										ТекущийПериод);
					
				СтрокаНовогоПериода.ПериодДействияНачало = НачалоДня(ТекущаяСтрокаТаблицыДат.Дата);
				СтрокаНовогоПериода.ПериодДействияКонец = ИсходнаяДатаОкончания;		
			КонецЕсли;	
			ИндексТекущейСтрокиТаблицыДат = ИндексТекущейСтрокиТаблицыДат + 1;		
		КонецЦикла;	
		ПредыдущийПериод = ТекущийПериод;
		ИндексТекущейСтроки  = ИндексТекущейСтроки + 1;
	КонецЦикла;	
КонецПроцедуры		

Функция НовыйРасчетнаяБаза()
	КвалификаторРезультата = Новый КвалификаторыЧисла(31, 8);
	
	РасчетнаяБазаНачислений = Новый ТаблицаЗначений();
	РасчетнаяБазаНачислений.Колонки.Добавить("Регистратор", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
	РасчетнаяБазаНачислений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	РасчетнаяБазаНачислений.Колонки.Добавить("РегистраторРазрез", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
	РасчетнаяБазаНачислений.Колонки.Добавить("НомерСтрокиРазрез", Новый ОписаниеТипов("Число"));
	РасчетнаяБазаНачислений.Колонки.Добавить("ВидРасчетаРазрез", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	РасчетнаяБазаНачислений.Колонки.Добавить("СотрудникРазрез", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РасчетнаяБазаНачислений.Колонки.Добавить("ГоловнаяОрганизацияРазрез", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РасчетнаяБазаНачислений.Колонки.Добавить("ИдентификаторСтрокиРазрез", Новый ОписаниеТипов("Число"));
	РасчетнаяБазаНачислений.Колонки.Добавить("ПериодРегистрацииРазрез", Новый ОписаниеТипов("Дата"));
	РасчетнаяБазаНачислений.Колонки.Добавить("ПериодДействияРазрез", Новый ОписаниеТипов("Дата"));
	РасчетнаяБазаНачислений.Колонки.Добавить("ПериодДействияНачалоРазрез", Новый ОписаниеТипов("Дата"));
	РасчетнаяБазаНачислений.Колонки.Добавить("ПериодДействияКонецРазрез", Новый ОписаниеТипов("Дата"));
	РасчетнаяБазаНачислений.Колонки.Добавить("РезультатБаза", Новый ОписаниеТипов("Число", КвалификаторРезультата));
	
	Возврат РасчетнаяБазаНачислений;
КонецФункции	

Функция РасчетнаяБазаНачислений(ОчередностьРасчета = Неопределено, РезультатыРасчетаБазовыхНачислений = Неопределено) Экспорт	
	РасчетнаяБаза = НовыйРасчетнаяБаза();
	
	Если РасчитываемыйНабор.Количество() = 0 Тогда
		Возврат РасчетнаяБаза;
	КонецЕсли;	
	
	Если Не КоэффциентыНормированияПоВремениРасчитаны Тогда
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		РассчитатьКоэффциентыНормированияПоВремени(ДанныеБазовыхНачислений.ФактическиеПериоды);                         
		Если ДанныеВедущихЗаписейКаскадногоНормирования <> Неопределено Тогда
			РассчитатьКоэффциентыНормированияПоВремени(ДанныеВедущихЗаписейКаскадногоНормирования.ФактическиеПериоды);	  
		КонецЕсли;
		Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
		КоэффциентыНормированияПоВремениРасчитаны = Истина;
	КонецЕсли;	 
	
	Если РезультатыРасчетаБазовыхНачислений <> Неопределено Тогда 		
		УточнитьРезультатыБазовыхЗаписей(ДанныеБазовыхНачислений.Записи, РезультатыРасчетаБазовыхНачислений);
		Если ДанныеВедущихЗаписейКаскадногоНормирования <> Неопределено Тогда
			УточнитьРезультатыБазовыхЗаписей(ДанныеВедущихЗаписейКаскадногоНормирования.ФактическиеПериоды, РезультатыРасчетаБазовыхНачислений);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ОчередностьРасчета = Неопределено Тогда
		ОчередностьКаскадногоНормирования = МаксимальнаяОчередностьНачислений();
	Иначе
		ОчередностьКаскадногоНормирования = ОчередностьРасчета - 1;
	КонецЕсли;	
	
	Если ДанныеВедущихЗаписейКаскадногоНормирования <> Неопределено Тогда 
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Для ТекущаяОчередность = 1 По ОчередностьКаскадногоНормирования Цикл
			Если ВыполненныеОчередностиКаскадногоРасчетаНачислений[ТекущаяОчередность] <>  Истина Тогда
				РасчитатьКоэффциентыЗаписейНормируемыхКаскадно(ДанныеВедущихЗаписейКаскадногоНормирования, ДанныеВедущихЗаписейКаскадногоНормирования, ТекущаяОчередность);
				РасчитатьКоэффциентыЗаписейНормируемыхКаскадно(ДанныеБазовыхНачислений, ДанныеВедущихЗаписейКаскадногоНормирования, ТекущаяОчередность);
				ВыполненныеОчередностиКаскадногоРасчетаНачислений.Вставить(ТекущаяОчередность, Истина);
			КонецЕсли;	
		КонецЦикла;	
		Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
	КонецЕсли;	
	
	СовйстваВидовРасчета = СвойстваВидовРасчетаРасчитываемогоНабора();
	ЗависимостиВР = ЗависимотиВидовРасчетаРасчитываемогоНабора();

	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеБазовыхНачислений.ФактическиеПериоды, "Регистратор, НомерСтроки");
	СтруктураПоискаПериодов = Новый Структура("Регистратор, НомерСтроки");

	ПоляПоиска = "Сотрудник, БазовыйПериодОсновнойЗаписиНачало, БазовыйПериодОсновнойЗаписиКонец";
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеБазовыхНачислений.Записи, ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Для Каждого РасчитываемаяЗапись Из РасчитываемыйНабор Цикл
		ЗависимостиРасчитываемогоВР = ЗависимостиВР[РасчитываемаяЗапись.ВидРасчета];
		Если ОчередностьРасчета <> Неопределено
			И СовйстваВидовРасчета[РасчитываемаяЗапись.ВидРасчета].ОчередностьРасчета <> ОчередностьРасчета
			Или ЗависимостиРасчитываемогоВР = Неопределено Тогда
				
			Продолжить;
		КонецЕсли;		
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, РасчитываемаяЗапись);
		СтруктураПоиска.БазовыйПериодОсновнойЗаписиНачало = РасчитываемаяЗапись.БазовыйПериодНачало;
		СтруктураПоиска.БазовыйПериодОсновнойЗаписиКонец = РасчитываемаяЗапись.БазовыйПериодКонец;
		БазовыеЗаписи = ДанныеБазовыхНачислений.Записи.НайтиСтроки(СтруктураПоиска);
		Для Каждого БазоваяЗапись Из БазовыеЗаписи Цикл
			Если ЗависимостиРасчитываемогоВР[БазоваяЗапись.ВидРасчета] <> Неопределено Тогда
				СтрокаРезультатаРасчета = РасчетнаяБаза.Добавить();
				СтрокаРезультатаРасчета.Регистратор = РасчитываемаяЗапись.Регистратор;
				СтрокаРезультатаРасчета.НомерСтроки = РасчитываемаяЗапись.НомерСтроки;
				СтрокаРезультатаРасчета.РегистраторРазрез = БазоваяЗапись.Регистратор;
				СтрокаРезультатаРасчета.НомерСтрокиРазрез = БазоваяЗапись.НомерСтроки;
				СтрокаРезультатаРасчета.ВидРасчетаРазрез = БазоваяЗапись.ВидРасчета;
				СтрокаРезультатаРасчета.СотрудникРазрез = БазоваяЗапись.Сотрудник;
				СтрокаРезультатаРасчета.ГоловнаяОрганизацияРазрез = БазоваяЗапись.ГоловнаяОрганизация;
				СтрокаРезультатаРасчета.ИдентификаторСтрокиРазрез = БазоваяЗапись.ИдентификаторСтроки;
				СтрокаРезультатаРасчета.ПериодРегистрацииРазрез = БазоваяЗапись.ПериодРегистрации;
				СтрокаРезультатаРасчета.ПериодДействияРазрез = БазоваяЗапись.ПериодДействия;
				СтрокаРезультатаРасчета.ПериодДействияНачалоРазрез = БазоваяЗапись.ПериодДействияНачало;
				СтрокаРезультатаРасчета.ПериодДействияКонецРазрез = БазоваяЗапись.ПериодДействияКонец;
				
				Если БазоваяЗапись.НеобходимоНормировать Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаПериодов, БазоваяЗапись);
					Периоды = ДанныеБазовыхНачислений.ФактическиеПериоды.НайтиСтроки(СтруктураПоискаПериодов);				
					Для Каждого ТекущийПериод Из Периоды Цикл
						Если ОбщегоНазначенияБЗК.ДатаВИнтервале(ТекущийПериод.ПериодДействияНачало, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец) Тогда
							СтрокаРезультатаРасчета.РезультатБаза = СтрокаРезультатаРасчета.РезультатБаза + БазоваяЗапись.Результат * ТекущийПериод.Коэффициент;
						КонецЕсли;	
					КонецЦикла;
				Иначе
					СтрокаРезультатаРасчета.РезультатБаза = БазоваяЗапись.Результат; 	
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;	
	
	Возврат РасчетнаяБаза;
КонецФункции	

Функция РасчетнаяБазаУдержаний(ОчередностьРасчета = Неопределено, РезультатыРасчетаБазовыхНачислений = Неопределено) Экспорт	
	РасчетнаяБаза = НовыйРасчетнаяБаза();
	РасчетнаяБаза.Колонки.Добавить("РезультатБазаВЦеломзаМесяц", Новый ОписаниеТипов("Число"));
	
	Если РасчитываемыйНабор.Количество() = 0 Тогда
		Возврат РасчетнаяБаза;
	КонецЕсли;	
	
	Если Не КоэффциентыНормированияПоВремениРасчитаны Тогда
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		РассчитатьКоэффциентыНормированияПоВремени(ДанныеБазовыхНачислений.ФактическиеПериоды);                          
		Если ДанныеВедущихЗаписейКаскадногоНормирования <> Неопределено Тогда
			РассчитатьКоэффциентыНормированияПоВремени(ДанныеВедущихЗаписейКаскадногоНормирования.ФактическиеПериоды);	  
		КонецЕсли;
		Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
		КоэффциентыНормированияПоВремениРасчитаны = Истина;
	КонецЕсли;	 
	
	Если РезультатыРасчетаБазовыхНачислений <> Неопределено Тогда 		
		УточнитьРезультатыБазовыхЗаписей(ДанныеБазовыхНачислений.Записи, РезультатыРасчетаБазовыхНачислений);
		Если ДанныеВедущихЗаписейКаскадногоНормирования <> Неопределено Тогда
			УточнитьРезультатыБазовыхЗаписей(ДанныеВедущихЗаписейКаскадногоНормирования.ФактическиеПериоды, РезультатыРасчетаБазовыхНачислений);
		КонецЕсли;	
	КонецЕсли;	
	
	ОчередностьКаскадногоНормирования = МаксимальнаяОчередностьНачислений();	
	
	Если ДанныеВедущихЗаписейКаскадногоНормирования <> Неопределено Тогда 
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Для ТекущаяОчередность = 0 По ОчередностьКаскадногоНормирования Цикл
			Если ВыполненныеОчередностиКаскадногоРасчетаНачислений[ТекущаяОчередность] <>  Истина Тогда
				РасчитатьКоэффциентыЗаписейНормируемыхКаскадно(ДанныеВедущихЗаписейКаскадногоНормирования, ДанныеВедущихЗаписейКаскадногоНормирования, ТекущаяОчередность);
				РасчитатьКоэффциентыЗаписейНормируемыхКаскадно(ДанныеБазовыхНачислений, ДанныеВедущихЗаписейКаскадногоНормирования, ТекущаяОчередность);
				ВыполненныеОчередностиКаскадногоРасчетаНачислений.Вставить(ТекущаяОчередность, Истина);
			КонецЕсли;	
		КонецЦикла;	
		Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
	КонецЕсли;	
	
	СовйстваВидовРасчета = СвойстваВидовРасчетаРасчитываемогоНабора();
	ЗависимостиВР = ЗависимотиВидовРасчетаРасчитываемогоНабора();

	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеБазовыхНачислений.ФактическиеПериоды, "Регистратор, НомерСтроки");
	СтруктураПоискаПериодов = Новый Структура("Регистратор, НомерСтроки");

	ПоляПоиска = "ФизическоеЛицо, ГоловнаяОрганизация, БазовыйПериодОсновнойЗаписиНачало, БазовыйПериодОсновнойЗаписиКонец";
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеБазовыхНачислений.Записи, ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	ПоляПоискаПоСотруднику = "ФизическоеЛицо, Сотрудник, ГоловнаяОрганизация, БазовыйПериодОсновнойЗаписиНачало, БазовыйПериодОсновнойЗаписиКонец";
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеБазовыхНачислений.Записи, ПоляПоискаПоСотруднику);
	СтруктураПоискаПоСотруднику = Новый Структура(ПоляПоискаПоСотруднику);
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Для Каждого РасчитываемаяЗапись Из РасчитываемыйНабор Цикл
		ЗависимостиРасчитываемогоВР = ЗависимостиВР[РасчитываемаяЗапись.ВидРасчета];
		Если ОчередностьРасчета <> Неопределено
			И СовйстваВидовРасчета[РасчитываемаяЗапись.ВидРасчета].ОчередностьРасчета <> ОчередностьРасчета
			Или ЗависимостиРасчитываемогоВР = Неопределено Тогда
				
			Продолжить;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(РасчитываемаяЗапись.Сотрудник) Тогда
			ТекущийОтбор = СтруктураПоискаПоСотруднику;
		Иначе
			ТекущийОтбор = СтруктураПоиска;
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(ТекущийОтбор, РасчитываемаяЗапись);
		ТекущийОтбор.БазовыйПериодОсновнойЗаписиНачало = РасчитываемаяЗапись.БазовыйПериодНачало;
		ТекущийОтбор.БазовыйПериодОсновнойЗаписиКонец = РасчитываемаяЗапись.БазовыйПериодКонец;
		ТекущийОтбор.ГоловнаяОрганизация  = РасчитываемаяЗапись.Организация; 
		
		БазовыеЗаписи = ДанныеБазовыхНачислений.Записи.НайтиСтроки(ТекущийОтбор);
		Для Каждого БазоваяЗапись Из БазовыеЗаписи Цикл
			Если ЗависимостиРасчитываемогоВР[БазоваяЗапись.ВидРасчета] <> Неопределено Тогда
				СтрокаРезультатаРасчета = РасчетнаяБаза.Добавить();
				СтрокаРезультатаРасчета.Регистратор = РасчитываемаяЗапись.Регистратор;
				СтрокаРезультатаРасчета.НомерСтроки = РасчитываемаяЗапись.НомерСтроки;
				СтрокаРезультатаРасчета.ВидРасчетаРазрез = БазоваяЗапись.ВидРасчета;
				
				СтрокаРезультатаРасчета.РезультатБазаВЦеломзаМесяц = БазоваяЗапись.Результат;
				Если БазоваяЗапись.НеобходимоНормировать Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаПериодов, БазоваяЗапись);
					Периоды = ДанныеБазовыхНачислений.ФактическиеПериоды.НайтиСтроки(СтруктураПоискаПериодов);				
					Для Каждого ТекущийПериод Из Периоды Цикл
						Если ОбщегоНазначенияБЗК.ДатаВИнтервале(ТекущийПериод.ПериодДействияНачало, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец) Тогда
							СтрокаРезультатаРасчета.РезультатБаза = СтрокаРезультатаРасчета.РезультатБаза + БазоваяЗапись.Результат * ТекущийПериод.Коэффициент;
						КонецЕсли;	
					КонецЦикла;
				ИначеЕсли РасчитываемаяЗапись.МесяцУдержания = БазоваяЗапись.ПериодДействия Тогда
					Если ОбщегоНазначенияБЗК.ДатаВИнтервале(БазоваяЗапись.ПериодДействияНачало, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец)
						Или ОбщегоНазначенияБЗК.ДатаВИнтервале(РасчитываемаяЗапись.БазовыйПериодНачало, БазоваяЗапись.ПериодДействияНачало, БазоваяЗапись.ПериодДействияКонец) Тогда
						
						СтрокаРезультатаРасчета.РезультатБаза = БазоваяЗапись.Результат;
					КонецЕсли;	
				ИначеЕсли РасчитываемаяЗапись.МесяцУдержания < БазоваяЗапись.ПериодДействия Тогда
					Если КонецДня(РасчитываемаяЗапись.БазовыйПериодКонец) = КонецМесяца(РасчитываемаяЗапись.БазовыйПериодКонец) Тогда
						СтрокаРезультатаРасчета.РезультатБаза = БазоваяЗапись.Результат;
					КонецЕсли;
				ИначеЕсли РасчитываемаяЗапись.МесяцУдержания > БазоваяЗапись.ПериодДействия	Тогда
					Если РасчитываемаяЗапись.БазовыйПериодНачало = НачалоМесяца(РасчитываемаяЗапись.БазовыйПериодНачало) Тогда
						СтрокаРезультатаРасчета.РезультатБаза = БазоваяЗапись.Результат;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
	РасчетнаяБаза.Свернуть("Регистратор, НомерСтроки, ВидРасчетаРазрез", "РезультатБаза, РезультатБазаВЦеломзаМесяц");
	
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;	
	
	Возврат РасчетнаяБаза;
КонецФункции	

Процедура РасчитатьКоэффциентыЗаписейНормируемыхКаскадно(ДанныеНормируемыхЗаписей, ДанныеВедущихЗаписей, ОчередностьРасчета = Неопределено)
	ДанныеНормируемыхЗаписей.ФактическиеПериоды.Колонки.Добавить("БазаРаспределения", Новый ОписаниеТипов("Число"));
	
	ОтборНормируемыхЗаписей = Новый Структура("НормироватьКаскадно", Истина);
	
	Если ОчередностьРасчета <> Неопределено Тогда
		ОтборНормируемыхЗаписей.Вставить("ОчередностьРасчета", ОчередностьРасчета);
	КонецЕсли;	
	
	НормируемыеЗаписиОчередности = ДанныеНормируемыхЗаписей.ФактическиеПериоды.НайтиСтроки(ОтборНормируемыхЗаписей);
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеВедущихЗаписей.ФактическиеПериоды, "Сотрудник, ПериодДействия, ВидРасчета");
	СтруктураПоискаВедущихЗаписей = Новый Структура("Сотрудник, ПериодДействия, ВидРасчета");
			
	Для Каждого НормируемаяЗапись Из НормируемыеЗаписиОчередности Цикл
		БазовыеВидыРасчета = ЗависимостиКаскадногоРасчета[НормируемаяЗапись.ВидРасчета];
		Если БазовыеВидыРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаВедущихЗаписей, НормируемаяЗапись);	
		
		БазаРаспределенияИтог = 0;
		Для Каждого ОписаниеБазовогоВидаРасчета Из БазовыеВидыРасчета Цикл
			СтруктураПоискаВедущихЗаписей.ВидРасчета = ОписаниеБазовогоВидаРасчета.Значение.ВидРасчета;
			
			ВедущиеЗаписи = ДанныеВедущихЗаписей.ФактическиеПериоды.НайтиСтроки(СтруктураПоискаВедущихЗаписей);
			 							
			Для Каждого ТекущаяВедущаяЗапись Из ВедущиеЗаписи Цикл
				Если ОбщегоНазначенияБЗК.ДатаВИнтервале(ТекущаяВедущаяЗапись.ПериодДействияНачало, НормируемаяЗапись.ПериодДействияНачало, НормируемаяЗапись.ПериодДействияКонец) 
					И ОбщегоНазначенияБЗК.ДатаВИнтервале(ТекущаяВедущаяЗапись.ПериодДействияКонец, НормируемаяЗапись.ПериодДействияНачало, НормируемаяЗапись.ПериодДействияКонец) Тогда
					
					БазаРаспределения = ТекущаяВедущаяЗапись.Результат * ТекущаяВедущаяЗапись.Коэффициент;
					НормируемаяЗапись.БазаРаспределения = НормируемаяЗапись.БазаРаспределения + БазаРаспределения;
				КонецЕсли;	
			КонецЦикла;				
		КонецЦикла;	
	КонецЦикла;	
	
	ИтогиПоНормируемымЗаписям = ДанныеНормируемыхЗаписей.ФактическиеПериоды.Скопировать(НормируемыеЗаписиОчередности, "Регистратор, НомерСтроки, БазаРаспределения");
	ИтогиПоНормируемымЗаписям.Свернуть("Регистратор, НомерСтроки", "БазаРаспределения");
	ИтогиПоНормируемымЗаписям.Индексы.Добавить("Регистратор, НомерСтроки");
	СтруктураПоискаИтогов = Новый Структура("Регистратор, НомерСтроки");
	
	Для Каждого Период Из НормируемыеЗаписиОчередности Цикл
		Если Период.НормироватьКаскадно Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаИтогов, Период);
			СтрокаИтогов = ИтогиПоНормируемымЗаписям.НайтиСтроки(СтруктураПоискаИтогов)[0];
			Период.Коэффициент = ?(СтрокаИтогов.БазаРаспределения = 0, 0, Период.БазаРаспределения / СтрокаИтогов.БазаРаспределения);
		КонецЕсли;	
	КонецЦикла;			
	ДанныеНормируемыхЗаписей.ФактическиеПериоды.Колонки.Удалить("БазаРаспределения");
КонецПроцедуры	

Процедура РассчитатьКоэффциентыНормированияПоВремени(ПериодыНормируемыхНачислений)	
	Если ПериодыНормируемыхНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПериодыНормируемыхНачислений.Колонки.Добавить("Время", Новый ОписаниеТипов("Число"));
	ПериодыНормируемыхНачислений.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	РабочееВремя = МенеджерРасчетаЗарплаты.РабочееВремя();
	СтруктураПоискаРабочегоВремени = МенеджерРасчетаЗарплаты.СтрукутраПоискаДанныхОВремени();
		
	ТребованияНачислений = ТребованияНормируемыхПоВремениНачислений();
		
	Для Каждого Период Из ПериодыНормируемыхНачислений Цикл
		Если Период.НормироватьКаскадно Тогда
				
			Продолжить;
		КонецЕсли;	
		
		ТребованияТекущегоНачисления = ТребованияНачислений[Период.ВидРасчета];
		                                                                       	
		ДанныеОВремениЗаПериод = МенеджерРасчетаЗарплаты.ДанныеОВременияЗаПериод(
			Период, 
			Период.ПериодДействияНачало,
			Период.ПериодДействияКонец, 
			РабочееВремя, 
			ТребованияТекущегоНачисления, 
			СтруктураПоискаРабочегоВремени,
			Ложь);	
		
		Если Период.ВремяВЧасах Тогда
			Период.Время = ДанныеОВремениЗаПериод.Часов;
		Иначе
			Период.Время = ДанныеОВремениЗаПериод.Дней;
		КонецЕсли;	
	КонецЦикла;
	
	ИтогиПоНормируемымЗаписям = ПериодыНормируемыхНачислений.Скопировать();
	ИтогиПоНормируемымЗаписям.Свернуть("Регистратор, НомерСтроки", "Время");
	ИтогиПоНормируемымЗаписям.Индексы.Добавить("Регистратор, НомерСтроки");
	СтруктураПоискаИтогов = Новый Структура("Регистратор, НомерСтроки");
	Для Каждого Период Из ПериодыНормируемыхНачислений Цикл
		Если Период.НормироватьКаскадно Тогда
			Продолжить;
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(СтруктураПоискаИтогов, Период);
		СтрокаИтогов = ИтогиПоНормируемымЗаписям.НайтиСтроки(СтруктураПоискаИтогов)[0];
		Период.Коэффициент = ?(СтрокаИтогов.Время = 0, 0, Период.Время / СтрокаИтогов.Время);
	КонецЦикла;
КонецПроцедуры	

Процедура УточнитьРезультатыБазовыхЗаписей(БазовыеЗаписи, РезультатыРасчетаБазовыхНачислений)
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(РезультатыРасчетаБазовыхНачислений, "Регистратор, НомерСтроки");
	СтруктураПоиска = Новый Структура("Регистратор, НомерСтроки");
	
	Для Каждого ВедущаяЗапись Из БазовыеЗаписи Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВедущаяЗапись);
		НайденныеСтроки = РезультатыРасчетаБазовыхНачислений.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВедущаяЗапись.Результат = НайденныеСтроки[0].Результат;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Функция МаксимальнаяОчередностьНачислений()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Начисления.ОчередностьРасчета) КАК ОчередностьРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОчередностьРасчета;
	Иначе
		Возврат 0;
	КонецЕсли;		
КонецФункции	

Процедура ИнициализироватьРасчетБазыНачислений(ОписаниеНабораРасчитываемыхЗаписей, УстанавливаемыйМенеджерРасчетаЗарплаты, РасчетПоДаннымТекущегоНабора = Ложь, ДанныеТекущегоНабораНачислений = Неопределено, ИсключаемыйРегистратор = Неопределено, ПолучатьПодробнуюРасшифровку = Ложь) Экспорт
	МенеджерРасчетаЗарплаты = УстанавливаемыйМенеджерРасчетаЗарплаты;	
	ИсключаемыйРегистратор = ИсключаемыйРегистратор;
	
	ИнициализироватьРасчетБазы(ОписаниеНабораРасчитываемыхЗаписей, АлгоритмыПолученияБазы().БазаНачислений, ПолучатьПодробнуюРасшифровку, РасчетПоДаннымТекущегоНабора, ДанныеТекущегоНабораНачислений, ИсключаемыйРегистратор);
КонецПроцедуры	

Процедура ИнициализироватьРасчетБазыУдержаний(ОписаниеНабораРасчитываемыхЗаписей, УстанавливаемыйМенеджерРасчетаЗарплаты, РасчетПоДаннымТекущегоНабора = Ложь, ДанныеТекущегоНабораНачислений = Неопределено, ИсключаемыйРегистратор = Неопределено) Экспорт
	МенеджерРасчетаЗарплаты = УстанавливаемыйМенеджерРасчетаЗарплаты;	
	ИсключаемыйРегистратор = ИсключаемыйРегистратор;
	
	ИнициализироватьРасчетБазы(ОписаниеНабораРасчитываемыхЗаписей, АлгоритмыПолученияБазы().БазаУдержаний, Истина, РасчетПоДаннымТекущегоНабора, ДанныеТекущегоНабораНачислений, ИсключаемыйРегистратор);
КонецПроцедуры	

Процедура ИнициализироватьРасчетБазы(ОписаниеНабораРасчитываемыхЗаписей, ИспользуемыйАлгоритмРасчета, ПолучатьПодробнуюРасшифровку, РасчетПоДаннымТекущегоНабора, ДанныеТекущегоНабораНачислений = Неопределено, ИсключаемыйРегистратор = Неопределено) 
	АлгоритмРасчетаБазы = ИспользуемыйАлгоритмРасчета;

	КоэффциентыНормированияПоВремениРасчитаны = Ложь;
	
	УстановитьРасчитываемыйНабор(ОписаниеНабораРасчитываемыхЗаписей);
		
	ВидыРасчетаСПодробнойРасшифровкой = Новый Соответствие();	
		
	ДанныеБазовыхНачислений = ДанныеБазовыхНачислений(
								ОписаниеНабораРасчитываемыхЗаписей, 
								ИспользуемыйАлгоритмРасчета, 
								РасчетПоДаннымТекущегоНабора,
								ВидыРасчетаСПодробнойРасшифровкой,
								ПолучатьПодробнуюРасшифровку,
								ДанныеТекущегоНабораНачислений, 
								ИсключаемыйРегистратор);
	
	
	ДатыРазбиения = ДатыРазбиенияПериодовНормируемыхНачислений(ДанныеБазовыхНачислений.Записи);
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазбитьПериодыНачислений(ДанныеБазовыхНачислений.ФактическиеПериоды, ДатыРазбиения);   
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;

	СтруктураПоискаНормируемыхЗаписей = Новый Структура("НеобходимоНормировать, НормироватьКаскадно", Истина, Истина);
	КаскадноНормируемыеЗаписи = ДанныеБазовыхНачислений.Записи.НайтиСтроки(СтруктураПоискаНормируемыхЗаписей);
	
	Если КаскадноНормируемыеЗаписи.Количество() > 0 Тогда
		ДанныеВедущихЗаписейКаскадногоНормирования = ДанныеВедущихЗаписейКаскадногоНормирования(ДанныеБазовыхНачислений, ДанныеТекущегоНабораНачислений, РасчетПоДаннымТекущегоНабора, ИсключаемыйРегистратор);
		
		КаскадноНормируемыеВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(КаскадноНормируемыеЗаписи, "ВидРасчета", Истина);
		
		КаскадноНормируемыеВедущиеЗаписи = ДанныеВедущихЗаписейКаскадногоНормирования.Записи.НайтиСтроки(СтруктураПоискаНормируемыхЗаписей);
		ВидыРасчета =  ОбщегоНазначения.ВыгрузитьКолонку(КаскадноНормируемыеВедущиеЗаписи, "ВидРасчета", Истина);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КаскадноНормируемыеВидыРасчета, ВидыРасчета, Истина);
		
		ОтборБазовыхВидовРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеВедущихЗаписейКаскадногоНормирования.Записи, "ВидРасчета", Истина);
		
		ЗависимостиКаскадногоРасчета = ЗависимостиВидовРасчета("ПланВидовРасчета.Начисления.БазовыеВидыРасчета", КаскадноНормируемыеВидыРасчета, ОтборБазовыхВидовРасчета);
	КонецЕсли;	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();	
	УстановитФильтрДанныхОВремени();
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
КонецПроцедуры	

Процедура ЗавершитьРасчетБазы() Экспорт 
	МенеджерРасчетаЗарплаты = Неопределено;	
КонецПроцедуры

Функция УстановитьРасчитываемыйНабор(ОписаниеНабораРасчитываемыхЗаписей)
	Если ОписаниеНабораРасчитываемыхЗаписей.Тип = Тип("ТаблицаЗначений") Тогда
		РасчитываемыйНабор = ОписаниеНабораРасчитываемыхЗаписей.РасчитываемыеЗаписи;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + ОписаниеНабораРасчитываемыхЗаписей.ИмяВТРасчитываемыеЗаписи);
		Запрос.МенеджерВременныхТаблиц = ОписаниеНабораРасчитываемыхЗаписей.МенеджерВременныхТаблиц;
		РасчитываемыйНабор = Запрос.Выполнить().Выгрузить();	
	КонецЕсли;				
КонецФункции	

Процедура УстановитФильтрДанныхОВремени()
	СтруктураПоиска = Новый Структура("НормироватьКаскадно", Ложь);
	БазовыеНачисленияНормируемыеПоВремени = ДанныеБазовыхНачислений.ФактическиеПериоды.НайтиСтроки(СтруктураПоиска);
		
	ТребованияНачислений = ТребованияНормируемыхПоВремениНачислений();
	
	МенеджерРасчетаЗарплаты.ЗаполнитьФильтрПолученияРабочегоВремени(
		БазовыеНачисленияНормируемыеПоВремени, 
		ТребованияНачислений,
		Ложь, 
		Ложь);
	
	Если ДанныеВедущихЗаписейКаскадногоНормирования <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("НормироватьКаскадно", Ложь);
		БазовыеНачисленияНормируемыеПоВремени = ДанныеВедущихЗаписейКаскадногоНормирования.ФактическиеПериоды.НайтиСтроки(СтруктураПоиска);
		
		МенеджерРасчетаЗарплаты.ЗаполнитьФильтрПолученияРабочегоВремени(
			БазовыеНачисленияНормируемыеПоВремени, 
			ТребованияНачислений, 
			Ложь, 
			Ложь);
	КонецЕсли;		
КонецПроцедуры	

Функция ТребованияНормируемыхПоВремениНачислений()
	Если КэшТребованияНормируемыхПоВремениНачислений <> Неопределено Тогда
		Возврат КэшТребованияНормируемыхПоВремениНачислений;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("НеобходимоНормировать, НормироватьКаскадно", Истина, Ложь);
	БазовыеНачисленияНормируемыеПоВремени = ДанныеБазовыхНачислений.Записи.НайтиСтроки(СтруктураПоиска);
	
	ВидыРасчетаОтбор = ОбщегоНазначения.ВыгрузитьКолонку(БазовыеНачисленияНормируемыеПоВремени, "ВидРасчета");
	
	Если ДанныеВедущихЗаписейКаскадногоНормирования <> Неопределено Тогда
		ВидыРасчетаВедущихЗаписей = ОбщегоНазначения.ВыгрузитьКолонку(
										ДанныеВедущихЗаписейКаскадногоНормирования.Записи, 
										"ВидРасчета");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыРасчетаОтбор, ВидыРасчетаВедущихЗаписей, Истина);
	КонецЕсли;	

	КэшТребованияНормируемыхПоВремениНачислений = ПланыВидовРасчета.Начисления.ТребованияНачисленийТаблица(ВидыРасчетаОтбор);
	
	Возврат КэшТребованияНормируемыхПоВремениНачислений;
КонецФункции	

Функция СвойстваВидовРасчетаРасчитываемогоНабора()
	Если КэшСвойстваВидовРасчетаРасчитываемогоНабора <> Неопределено Тогда
		Возврат КэшСвойстваВидовРасчетаРасчитываемогоНабора;
	КонецЕсли;
	
	Если РасчитываемыйНабор = Неопределено Тогда
		ВызватьИсключение "ru = 'Не установлен набор рассчитываемых записей видов расчета.'";
	КонецЕсли;	
	
	ОтборВидовРасчета = РасчитываемыйНабор.ВыгрузитьКолонку("ВидРасчета");
	ОтборВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборВидовРасчета);
	
	КэшСвойстваВидовРасчетаРасчитываемогоНабора = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборВидовРасчета, "ОчередностьРасчета");
	
	Возврат КэшСвойстваВидовРасчетаРасчитываемогоНабора;
КонецФункции	

Функция ЗависимотиВидовРасчетаРасчитываемогоНабора()
	Если КэшЗависимостиВидовРасчета <> Неопределено Тогда
		Возврат КэшЗависимостиВидовРасчета;
	КонецЕсли;
	
	Если РасчитываемыйНабор = Неопределено Тогда
		ВызватьИсключение "ru = 'Не установлен набор рассчитываемых записей видов расчета.'";
	КонецЕсли;	
	
	ОтборВидовРасчета = РасчитываемыйНабор.ВыгрузитьКолонку("ВидРасчета");
	ОтборВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборВидовРасчета);
	ТаблицаБазровыхВР = ТаблицаБазовыхВидовРасчета(АлгоритмРасчетаБазы);	
	
	КэшЗависимостиВидовРасчета = ЗависимостиВидовРасчета(ТаблицаБазровыхВР, ОтборВидовРасчета);
	
	Возврат КэшЗависимостиВидовРасчета;
КонецФункции

Функция ДанныеБазовыхНачислений(ОписаниеНабораРасчитываемыхЗаписей, АлгоритмОтбораБазовыхЗаписей, РасчетПоДаннымТекущегоНабора, ВидыРасчетаСПодробнойРасшифрокой, ПолучатьРасшифровкуБезусловно = Ложь, ДанныеТекущегоНабораНачислений = Неопределено, ИсключаемыйРегистратор = Неопределено)		
	Результат = Новый Структура("Записи, ФактическиеПериоды");	
	БазовыеЗаписи = НовыйБазовыеЗаписи();
	
	Если РасчитываемыйНабор.Количество() = 0 Тогда
		Результат.Записи = БазовыеЗаписи;
		Результат.ФактическиеПериоды = НовыйФактическиеПериоды();
		
		Возврат Результат;
	КонецЕсли;			
	
	Если Не РасчетПоДаннымТекущегоНабора Тогда
		ЗаполнитьБазовыеЗаписиПоДаннымИБ(БазовыеЗаписи, ОписаниеНабораРасчитываемыхЗаписей, АлгоритмОтбораБазовыхЗаписей, ИсключаемыйРегистратор, ПолучатьРасшифровкуБезусловно);
	КонецЕсли;	
	Если ДанныеТекущегоНабораНачислений <> Неопределено Тогда		
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ЗаполнитьБазовыеЗаписиНачисленийПоТекущемуНабору(
			ОписаниеНабораРасчитываемыхЗаписей, 
			БазовыеЗаписи, 
			ДанныеТекущегоНабораНачислений.ТаблицаНабора, 
			АлгоритмОтбораБазовыхЗаписей,
			ВидыРасчетаСПодробнойРасшифрокой);
			
		Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;	
	КонецЕсли;			
		
	ФактическиеПериоды = ФактическиеПериодыНормируемыхЗаписей(БазовыеЗаписи, ДанныеТекущегоНабораНачислений);	
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	УточнитьНеобходимостьНормирования(БазовыеЗаписи, ФактическиеПериоды);
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;	
	
	Результат.Записи = БазовыеЗаписи;
	Результат.ФактическиеПериоды = ФактическиеПериоды;
	
	Возврат Результат;
КонецФункции

Функция ДатыРазбиенияПериодовНормируемыхНачислений(БазовыеЗаписи)
	ДатыРазбиения = Новый ТаблицаЗначений();
	ДатыРазбиения.Колонки.Добавить("Регистратор");
	ДатыРазбиения.Колонки.Добавить("НомерСтроки");
	ДатыРазбиения.Колонки.Добавить("Дата");
	
	Для Каждого Запись Из БазовыеЗаписи Цикл
		Если Запись.НеобходимоНормировать Тогда
			СтрокаТаблицыДат = ДатыРазбиения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДат, Запись, "Регистратор, НомерСтроки");
			СтрокаТаблицыДат.Дата = НачалоДня(Запись.БазовыйПериодОсновнойЗаписиНачало);
			
			СтрокаТаблицыДат = ДатыРазбиения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДат, Запись, "Регистратор, НомерСтроки");
			СтрокаТаблицыДат.Дата = КонецДня(Запись.БазовыйПериодОсновнойЗаписиКонец) + 1;		
		КонецЕсли;	
	КонецЦикла;	
	
	ДатыРазбиения.Свернуть("Регистратор, НомерСтроки, Дата");
	
	Возврат ДатыРазбиения;
КонецФункции	

Функция ЗапросПолученияБазовыхЗаписей(ИмяВТРасчитываемыйНабор, АлгоритмОтбораБазовыхЗаписей, ИсключаемыйРегистратор = Неопределено, ПолучатьРасшифровкуБезусловно = Ложь)
	ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеПакетаЗапросов.Параметры.Вставить("ИсключаемыйРегистратор", ИсключаемыйРегистратор);

	ОписаниеПакетаЗапросов.Параметры.Вставить("ВидыРасчетаСПодробнойРасшифровкой", Новый Массив());
	ОписаниеПакетаЗапросов.Параметры.Вставить("ПолучатьРасшифровкуБезусловно", ПолучатьРасшифровкуБезусловно);

	БазовыеИзмерения = БазовыеИзмерения(АлгоритмОтбораБазовыхЗаписей);
	БазовыеИзмеренияМассив = ОбщегоНазначения.ВыгрузитьКолонку(БазовыеИзмерения, "Ключ");
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(ИмяВТРасчитываемыйНабор, БазовыеИзмеренияМассив);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра = БазовыеИзмерения;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("Начисления");
	
	ШаблонЗапроса =  
	"ВЫБРАТЬ
	|	БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало КАК БазовыйПериодОсновнойЗаписиНачало,
	|	БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец КАК БазовыйПериодОсновнойЗаписиКонец,
	|	БазовыеЗаписи.ВидРасчета КАК ВидРасчета,
	|	БазовыеЗаписи.Сотрудник КАК Сотрудник,
	|	БазовыеЗаписи.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	БазовыеЗаписи.ПериодДействияБазовый КАК ПериодДействияБазовый,
	|	БазовыеЗаписи.ОчередностьРасчета КАК ОчередностьРасчета,
	|	БазовыеЗаписи.НеобходимоНормировать КАК НеобходимоНормировать,
	|	ВЫБОР
	|		КОГДА НЕ БазовыеЗаписи.НормироватьКаскадно
	|				И БазовыеЗаписи.ЕстьВытесняющиеНачисления
	|			ТОГДА ИСТИНА
	|		КОГДА БазовыеЗаписи.ПериодДействияБазовый
	|				И БазовыеЗаписи.ЕстьВытесняющиеНачисления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимФПДПриНормировании,
	|	БазовыеЗаписи.НормироватьКаскадно КАК НормироватьКаскадно,
	|	БазовыеЗаписи.ЗаписьТекущегоНабора КАК ЗаписьТекущегоНабора,
	|	СУММА(БазовыеЗаписи.Результат) КАК Результат,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.Регистратор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.НомерСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ИдентификаторСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодРегистрации
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодДействия,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодДействияНачало
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодДействияКонец
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ГрафикРаботы
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ОбщийГрафик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбщийГрафик,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодРегистрацииВремени
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодРегистрацииВремени,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ВремяВЧасах
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВремяВЧасах,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ЕстьВытесняющиеНачисления
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьВытесняющиеНачисления,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисляетсяВЦеломЗаМесяц,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ВремяВЦеломЗаПериод
	|			ТОГДА БазовыеЗаписи.ВремяВЦеломЗаПериод
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВремяВЦеломЗаПериод
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеЗаписи.БазовыйПериодНачало КАК БазовыйПериодОсновнойЗаписиНачало,
	|		ОсновныеЗаписи.БазовыйПериодКонец КАК БазовыйПериодОсновнойЗаписиКонец,
	|		БазовыеЗаписи.Регистратор КАК Регистратор,
	|		БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
	|		БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрации,
	|		БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
	|		БазовыеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
	|		БазовыеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
	|		БазовыеЗаписи.ВидРасчета КАК ВидРасчета,
	|		&ШаблонНеобходимоНормировать КАК НеобходимоНормировать,
	|		ВЫБОР
	|			КОГДА &НеобходимоНормировать
	|					ИЛИ ОсновныеЗаписи.ВидРасчета В (&ВидыРасчетаСПодробнойРасшифровкой)
	|					ИЛИ &ПолучатьРасшифровкуБезусловно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПолучатьПодробнуюРасшифровку,
	|		БазовыеЗаписи.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
	|		БазовыеЗаписи.ВидРасчета.ЕстьВытесняющиеНачисления КАК ЕстьВытесняющиеНачисления,
	|		БазовыеЗаписи.Сотрудник КАК Сотрудник,
	|		БазовыеЗаписи.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		БазовыеЗаписи.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|		БазовыеЗаписи.Результат КАК Результат,
	|		БазовыеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
	|		БазовыеЗаписи.ОбщийГрафик КАК ОбщийГрафик,
	|		БазовыеЗаписи.ВремяВЧасах КАК ВремяВЧасах,
	|		БазовыеЗаписи.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|		ВЫБОР
	|			КОГДА БазовыеЗаписи.ВидРасчета.ТребуетсяРасчетБазы
	|					И БазовыеЗаписи.ПериодДействия = НАЧАЛОПЕРИОДА(БазовыеЗаписи.БазовыйПериодНачало, МЕСЯЦ)
	|					И БазовыеЗаписи.ПериодДействия = НАЧАЛОПЕРИОДА(БазовыеЗаписи.БазовыйПериодКонец, МЕСЯЦ)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НормироватьКаскадно,
	|		ЛОЖЬ КАК ЗаписьТекущегоНабора,
	|		БазовыеЗаписи.ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый,
	|		БазовыеЗаписи.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета,
	|		БазовыеЗаписи.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериод
	|	ИЗ
	|		ВТОсновныеЗаписи КАК ОсновныеЗаписи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК БазовыеЗаписи
	|			ПО (&ШаблонУсловиеСвязиИзмерениям)
	|				И (&ШаблонУсловиеСвязиПоПериоду)
	|				И (БазовыеЗаписи.Регистратор <> &ИсключаемыйРегистратор)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
	|			ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
	|				И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)) КАК БазовыеЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	БазовыеЗаписи.ВидРасчета,
	|	БазовыеЗаписи.Сотрудник,
	|	БазовыеЗаписи.ФизическоеЛицо,
	|	БазовыеЗаписи.ГоловнаяОрганизация,
	|	БазовыеЗаписи.ОчередностьРасчета,
	|	БазовыеЗаписи.ЗаписьТекущегоНабора,
	|	БазовыеЗаписи.БазовыйПериодОсновнойЗаписиНачало,
	|	БазовыеЗаписи.БазовыйПериодОсновнойЗаписиКонец,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.Регистратор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.НомерСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ИдентификаторСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодРегистрации
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодДействияНачало
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодДействияКонец
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ГрафикРаботы
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ОбщийГрафик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ПериодРегистрацииВремени
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ВремяВЧасах
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	БазовыеЗаписи.НеобходимоНормировать,
	|	БазовыеЗаписи.ПериодДействияБазовый,
	|	БазовыеЗаписи.НормироватьКаскадно,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.ЕстьВытесняющиеНачисления
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ПолучатьПодробнуюРасшифровку
	|			ТОГДА БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ БазовыеЗаписи.НормироватьКаскадно
	|				И БазовыеЗаписи.ЕстьВытесняющиеНачисления
	|			ТОГДА ИСТИНА
	|		КОГДА БазовыеЗаписи.ПериодДействияБазовый
	|				И БазовыеЗаписи.ЕстьВытесняющиеНачисления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ВремяВЦеломЗаПериод
	|			ТОГДА БазовыеЗаписи.ВремяВЦеломЗаПериод
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ОписаниеВнешнегоЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеВнешнегоЗапроса);
	
	ОписаниеЗапросаДетальныхЗаписей = ЗарплатаКадрыПериодическиеРегистры.ОписаниеТаблицыЗапросаПоПсевдониму(ОписаниеВнешнегоЗапроса.Операторы[0], "БазовыеЗаписи").ОписаниеЗапроса;
	ОператорЗапросаДетальныхЗаписей = ОписаниеЗапросаДетальныхЗаписей.Операторы[0];
	
	ТаблицаБазовыхВидовРасчета = ТаблицаБазовыхВидовРасчета(АлгоритмОтбораБазовыхЗаписей);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаДетальныхЗаписей, "БазовыеВидыРасчета", ТаблицаБазовыхВидовРасчета);
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ОсновныеЗаписи", "БазовыеЗаписи");	
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра, 
		ОписаниеРегистра, 
		"БазовыйПериодНачало, БазовыйПериодКонец", 
		ОператорЗапросаДетальныхЗаписей);	
	
	ВыражениеПоляНеобходимоНормировать = ВыражениеПоляЗапросаНеобходимоНормировать(АлгоритмОтбораБазовыхЗаписей);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхЗаписей, 0, ВыражениеПоляНеобходимоНормировать, "НеобходимоНормировать");
	
	ВыражениеПоляПоучатьПодробнуюРасшифровку = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапросаДетальныхЗаписей, "ПолучатьПодробнуюРасшифровку");
	ВыражениеПоляПоучатьПодробнуюРасшифровку = СтрЗаменить(ВыражениеПоляПоучатьПодробнуюРасшифровку, "&НеобходимоНормировать", ВыражениеПоляНеобходимоНормировать);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхЗаписей, 0, ВыражениеПоляПоучатьПодробнуюРасшифровку, "ПолучатьПодробнуюРасшифровку");
	
	УсловияОтбораПоПериоду = ВыраженияОтбораБазовыхЗаписейПоПериоду(АлгоритмОтбораБазовыхЗаписей);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапросаДетальныхЗаписей, "БазовыеЗаписи", УсловияОтбораПоПериоду);
		
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		ТекстУсловия = "БазовыеЗаписи.Регистратор <> &ИсключаемыйРегистратор";
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОператорЗапросаДетальныхЗаписей, ТекстУсловия);
		ОписаниеПакетаЗапросов.Параметры.Вставить("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	КонецЕсли;	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов);	
			
	Возврат Запрос;
КонецФункции	

Функция НовыйБазовыеЗаписи()		
	БазовыеЗаписи = Новый ТаблицаЗначений();
	БазовыеЗаписи.Колонки.Добавить("Регистратор", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
	БазовыеЗаписи.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	БазовыеЗаписи.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	БазовыеЗаписи.Колонки.Добавить("ОчередностьРасчета", Новый ОписаниеТипов("Число"));
	БазовыеЗаписи.Колонки.Добавить("ПериодДействияБазовый", Новый ОписаниеТипов("Булево"));
	БазовыеЗаписи.Колонки.Добавить("НеобходимоНормировать", Новый ОписаниеТипов("Булево"));
	БазовыеЗаписи.Колонки.Добавить("НеобходимФПДПриНормировании", Новый ОписаниеТипов("Булево"));
	БазовыеЗаписи.Колонки.Добавить("НачисляетсяВЦеломзаМесяц", Новый ОписаниеТипов("Булево"));
	БазовыеЗаписи.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БазовыеЗаписи.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	БазовыеЗаписи.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	БазовыеЗаписи.Колонки.Добавить("НормироватьКаскадно", Новый ОписаниеТипов("Булево"));
	БазовыеЗаписи.Колонки.Добавить("ЗаписьТекущегоНабора", Новый ОписаниеТипов("Булево"));
	БазовыеЗаписи.Колонки.Добавить("БазовыйПериодОсновнойЗаписиНачало", Новый ОписаниеТипов("Дата"));
	БазовыеЗаписи.Колонки.Добавить("БазовыйПериодОсновнойЗаписиКонец", Новый ОписаниеТипов("Дата"));
	БазовыеЗаписи.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	БазовыеЗаписи.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	БазовыеЗаписи.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	БазовыеЗаписи.Колонки.Добавить("ПериодДействияНачало", Новый ОписаниеТипов("Дата"));
	БазовыеЗаписи.Колонки.Добавить("ПериодДействияКонец", Новый ОписаниеТипов("Дата"));
	БазовыеЗаписи.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ГрафикиРаботыСотрудников"));
	БазовыеЗаписи.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	БазовыеЗаписи.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	БазовыеЗаписи.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));   
	БазовыеЗаписи.Колонки.Добавить("ВремяВЦеломЗаПериод", Новый ОписаниеТипов("Булево"));
	БазовыеЗаписи.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	
	Возврат БазовыеЗаписи;
КонецФункции	

Функция ФактическиеПериодыНормируемыхЗаписей(БазовыеЗаписи, ДанныеТекущегоНабора = Неопределено)
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ФактическиеПериоды = ФПДНормируемыхЗаписей(БазовыеЗаписи, ДанныеТекущегоНабора);
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	УточнитьФактическиПериодыЦеломесячныхЗаписей(ФактическиеПериоды);
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;

	Возврат ФактическиеПериоды;
КонецФункции	

Функция НовыйФактическиеПериоды()
	ФактическиеПериоды = Новый ТаблицаЗначений();
	ФактическиеПериоды.Колонки.Добавить("Регистратор", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
	ФактическиеПериоды.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ФактическиеПериоды.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ФактическиеПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ФактическиеПериоды.Колонки.Добавить("ОчередностьРасчета", Новый ОписаниеТипов("Число"));
	ФактическиеПериоды.Колонки.Добавить("НачисляетсяВЦеломзаМесяц", Новый ОписаниеТипов("Булево"));
	ФактическиеПериоды.Колонки.Добавить("НормироватьКаскадно", Новый ОписаниеТипов("Булево"));
	ФактическиеПериоды.Колонки.Добавить("ЗаписьТекущегоНабора", Новый ОписаниеТипов("Булево"));
	ФактическиеПериоды.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ФактическиеПериоды.Колонки.Добавить("ПериодДействияНачало", Новый ОписаниеТипов("Дата"));
	ФактическиеПериоды.Колонки.Добавить("ПериодДействияКонец", Новый ОписаниеТипов("Дата"));
	ФактическиеПериоды.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ГрафикиРаботыСотрудников"));
	ФактическиеПериоды.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ФактическиеПериоды.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	ФактическиеПериоды.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));   
	ФактическиеПериоды.Колонки.Добавить("ВремяВЦеломЗаПериод", Новый ОписаниеТипов("Булево"));
	ФактическиеПериоды.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	
	Возврат ФактическиеПериоды;	
КонецФункции	

Функция ФПДНормируемыхЗаписей(БазовыеЗаписи, ДанныеТекущегоНабора = Неопределено)
	ФактическиеПериоды = НовыйФактическиеПериоды();
	
	СтруктураПоиска = Новый Структура("Регистратор, НомерСтроки");
	Если ДанныеТекущегоНабора <> Неопределено Тогда
		ОтборДанныхИБ = БазовыеЗаписи.СкопироватьКолонки("Регистратор, НомерСтроки");
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеТекущегоНабора.ФПД, "Регистратор, НомерСтроки");
		
		Для Каждого БазоваяЗапись Из БазовыеЗаписи Цикл
			Если Не БазоваяЗапись.НеобходимоНормировать Тогда
				Продолжить;
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, БазоваяЗапись);
			СтрокиФПД = ДанныеТекущегоНабора.ФПД.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекущаяСтрокаФПД Из СтрокиФПД Цикл
				СтрокаТаблицыПериодов = ФактическиеПериоды.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПериодов, БазоваяЗапись);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПериодов, ТекущаяСтрокаФПД);
			КонецЦикла;			
		
			Если СтрокиФПД.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ОтборДанныхИБ.Добавить(), БазоваяЗапись);
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ОтборДанныхИБ = БазовыеЗаписи.Скопировать(Новый Структура("НеобходимоНормировать", Истина), "Регистратор, НомерСтроки");	
	КонецЕсли;	
	
	ПоляГруппировки = ОбщегоНазначения.ВыгрузитьКолонку(ФактическиеПериоды.Колонки, "Имя");
	ФактическиеПериоды.Свернуть(СтрСоединить(ПоляГруппировки, ","));
	
	ОтборДанныхИБ.Свернуть("Регистратор, НомерСтроки");
	
	Если ОтборДанныхИБ.Количество() = 0 Тогда
		Возврат ФактическиеПериоды;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отбор", ОтборДанныхИБ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отбор.Регистратор,
	|	Отбор.НомерСтроки
	|ПОМЕСТИТЬ ВТОтбор
	|ИЗ
	|	&Отбор КАК Отбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияФактическийПериодДействия.Регистратор,
	|	НачисленияФактическийПериодДействия.НомерСтроки,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ПериодДействияКонец
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия((Регистратор, НомерСтроки) В
	|		(ВЫБРАТЬ
	|			Регистратор,
	|			НомерСтроки
	|		ИЗ
	|			ВТОтбор)) КАК НачисленияФактическийПериодДействия";		
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(БазовыеЗаписи, "Регистратор, НомерСтроки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		БазоваяЗапись = БазовыеЗаписи.НайтиСтроки(СтруктураПоиска)[0];

		СтрокаТаблицыПериодов = ФактическиеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПериодов, БазоваяЗапись);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПериодов, Выборка);
	КонецЦикла;	
		
	Возврат ФактическиеПериоды;
КонецФункции	

Процедура УточнитьФактическиПериодыЦеломесячныхЗаписей(ФактическиеПериоды)	
	ОтборПериодов = Новый ТаблицаЗначений();
	ОтборПериодов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));	
	ОтборПериодов.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ОтборПериодов.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ОтборСотрудников = Новый Соответствие();;
	
	Для Каждого Запись Из ФактическиеПериоды Цикл
		Если Запись.НачисляетсяВЦеломзаМесяц Тогда	
			СтрокаОтбора = ОтборПериодов.Добавить();
			СтрокаОтбора.Сотрудник = Запись.Сотрудник;
			СтрокаОтбора.ДатаНачала = НачалоМесяца(Запись.ПериодДействияНачало);
			СтрокаОтбора.ДатаОкончания = КонецМесяца(СтрокаОтбора.ДатаНачала);	
			ОтборСотрудников.Вставить(Запись.Сотрудник);	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ОтборСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Фильтр = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
				ОтборПериодов, 
				"Сотрудник");
	
	
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ПрименениеПлановыхНачислений = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
										"ПрименениеПлановыхНачислений", 
										Новый МенеджерВременныхТаблиц, 
										Ложь, 
										Фильтр);

	
	УточнитьПериодыНачисленийЦеломесячныхПоПрименениюНачислений(ФактическиеПериоды, ПрименениеПлановыхНачислений);
	
	ПериодыРаботы = МенеджерРасчетаЗарплаты.ПериодыРаботыСотрудников(ОбщегоНазначения.ВыгрузитьКолонку(ОтборСотрудников, "Ключ"));
	
	УточнитьПериодыЦеломесячныхНачисленийПоПериодамРаботы(ФактическиеПериоды, ПериодыРаботы);
КонецПроцедуры	

Процедура УточнитьПериодыНачисленийЦеломесячныхПоПрименениюНачислений(ФактическиеПериоды, ПрименениеПлановыхНачислений)
	СтруктураПоискаЗаписей = Новый Структура("Регистратор, НомерСтроки");
	
	ФактическиеПериоды.Колонки.Добавить("Применение", Новый ОписаниеТипов("Булево"));
	ФактическиеПериоды.ЗаполнитьЗначения(Истина, "Применение");
	
	ФактическиеПериоды.Сортировать(
		"Регистратор, НомерСтроки, ПериодДействияНачало, ПериодДействияКонец",
		Новый СравнениеЗначений());
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПрименениеПлановыхНачислений, "Сотрудник");
		
	СтруктураПоиска = Новый Структура("Сотрудник");
	ПредыдущаяСтрокаПериода = Неопределено;
	ИндексТекущейСтрокиТаблицыПериодов = 0;
	Пока ИндексТекущейСтрокиТаблицыПериодов < ФактическиеПериоды.Количество() Цикл 
		СтрокаПериода = ФактическиеПериоды[ИндексТекущейСтрокиТаблицыПериодов];
		ЗаполнитьЗначенияСвойств(СтруктураПоискаЗаписей, СтрокаПериода);
		
		Если Не СтрокаПериода.НачисляетсяВЦеломзаМесяц Тогда
			ИндексТекущейСтрокиТаблицыПериодов = ИндексТекущейСтрокиТаблицыПериодов + 1;
			Продолжить;
		КонецЕсли;
			
		Если ПредыдущаяСтрокаПериода = Неопределено
			Или СтрокаПериода.Сотрудник <> ПредыдущаяСтрокаПериода.Сотрудник Тогда
			
			СтруктураПоиска.Сотрудник = СтрокаПериода.Сотрудник;
			ПрименениеНачисленийПоСотруднику = ПрименениеПлановыхНачислений.Скопировать(СтруктураПоиска);
			ПрименениеНачисленийПоСотруднику.Сортировать("Период", Новый СравнениеЗначений());	
			
			ИндексТекущейСтрокиТаблицыПрименения = 0;
		ИначеЕсли СтрокаПериода.Регистратор <> ПредыдущаяСтрокаПериода.Регистратор
			Или СтрокаПериода.НомерСтроки <> ПредыдущаяСтрокаПериода.НомерСтроки Тогда 
		
			ИндексТекущейСтрокиТаблицыПрименения = 0;
		КонецЕсли;			
				
		Пока ИндексТекущейСтрокиТаблицыПрименения <= ПрименениеНачисленийПоСотруднику.Количество() - 1 Цикл
			ТекущаяСтрокаТаблицыПрименения = ПрименениеНачисленийПоСотруднику[ИндексТекущейСтрокиТаблицыПрименения];
			Если ОбщегоНазначенияБЗК.ДатаВИнтервале(ТекущаяСтрокаТаблицыПрименения.Период, СтрокаПериода.ПериодДействияНачало, СтрокаПериода.ПериодДействияКонец)
				И ТекущаяСтрокаТаблицыПрименения.Применение <> СтрокаПериода.Применение  Тогда
				
				Если НачалоДня(ТекущаяСтрокаТаблицыПрименения.Период) = СтрокаПериода.ПериодДействияНачало Тогда
					ТекущаяСтрокаТаблицыПрименения.Применение = ТекущаяСтрокаТаблицыПрименения.Применение;
				Иначе	
					ИсходнаяДатаОкончания = СтрокаПериода.ПериодДействияКонец;
					СтрокаПериода.ПериодДействияКонец = НачалоДня(ТекущаяСтрокаТаблицыПрименения.Период) - 1;
					
					СтрокаНовогоПериода = ОбщегоНазначенияБЗК.ВставитьСтрокуВТаблицу(
											ФактическиеПериоды, 
											ИндексТекущейСтрокиТаблицыПериодов + 1,
											СтрокаПериода);
					
					СтрокаНовогоПериода.ПериодДействияНачало = НачалоДня(ТекущаяСтрокаТаблицыПрименения.Период);
					СтрокаНовогоПериода.ПериодДействияКонец = ИсходнаяДатаОкончания;
					СтрокаНовогоПериода.Применение = ТекущаяСтрокаТаблицыПрименения.Применение;	
				КонецЕсли;		
			ИначеЕсли ТекущаяСтрокаТаблицыПрименения.Период > СтрокаПериода.ПериодДействияКонец Тогда 
				Прервать;
			КонецЕсли;	
			ИндексТекущейСтрокиТаблицыПрименения = ИндексТекущейСтрокиТаблицыПрименения + 1;		
		КонецЦикла;	
		ИндексТекущейСтрокиТаблицыПериодов  = ИндексТекущейСтрокиТаблицыПериодов + 1;
		ПредыдущаяСтрокаПериода = СтрокаПериода;
	КонецЦикла;	
	
	СтрокиКУдалнию = ФактическиеПериоды.НайтиСтроки(Новый Структура("Применение", Ложь));
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалнию Цикл
		ФактическиеПериоды.Удалить(УдаляемаяСтрока);
	КонецЦикла;	
КонецПроцедуры	
	
Процедура УточнитьПериодыЦеломесячныхНачисленийПоПериодамРаботы(ФактическиеПериоды, ПериодыРаботыСотрудников)
	СтруктураПоискаЗаписей = Новый Структура("Регистратор, НомерСтроки");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыРаботыСотрудников, "Сотрудник");
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	Для Каждого СтрокаПериода Из ФактическиеПериоды Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаЗаписей, СтрокаПериода);
		
		Если Не СтрокаПериода.НачисляетсяВЦеломзаМесяц Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураПоиска.Сотрудник = СтрокаПериода.Сотрудник;
		НайденныеПериодыРаботы = ПериодыРаботыСотрудников.НайтиСтроки(СтруктураПоиска);
		Если НайденныеПериодыРаботы.Количество() > 0 Тогда
			СтрокаПериода.ПериодДействияНачало = Макс(СтрокаПериода.ПериодДействияНачало, НайденныеПериодыРаботы[0].ДатаПриема);
			СтрокаПериода.ПериодДействияКонец = Макс(СтрокаПериода.ПериодДействияКонец, НайденныеПериодыРаботы[0].ДатаЗавершенияРаботы);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры		
	
Процедура УточнитьНеобходимостьНормирования(БазовыеЗаписи, ФактическиеПериоды)
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ФактическиеПериоды, "Регистратор, НомерСтроки");
	СтруктураПоиска = Новый Структура("Регистратор, НомерСтроки");	
	
	БазовыеЗаписи.Сортировать("Регистратор, НомерСтроки, НеобходимоНормировать", Новый СравнениеЗначений);
	
	ПредыдущаяЗапись = Неопределено;
	УдалятьСтрокиФПД = Ложь;
	ФактическиеПериодыЗаписи = Новый Массив;
	Для Каждого ТекущаяБазоваяЗапись Из БазовыеЗаписи Цикл
		Если Не ТекущаяБазоваяЗапись.НеобходимоНормировать Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ПредыдущаяЗапись = Неопределено 
			Или ТекущаяБазоваяЗапись.Регистратор <> ПредыдущаяЗапись.Регистратор
			Или ТекущаяБазоваяЗапись.НомерСтроки <> ПредыдущаяЗапись.НомерСтроки Тогда
			
			Если УдалятьСтрокиФПД Тогда
				Для Каждого УдаляемаяСтрока Из ФактическиеПериодыЗаписи Цикл
					ФактическиеПериоды.Удалить(УдаляемаяСтрока);
				КонецЦикла;			
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяБазоваяЗапись);
			ФактическиеПериодыЗаписи = ФактическиеПериоды.НайтиСтроки(СтруктураПоиска);
	
			УдалятьСтрокиФПД = Истина;
		КонецЕсли;	
		
		ТекущаяБазоваяЗапись.НеобходимоНормировать = Ложь;
		Для Каждого ПериодЗаписи Из ФактическиеПериодыЗаписи Цикл
			Если Не ОбщегоНазначенияБЗК.ДатаВИнтервале(ПериодЗаписи.ПериодДействияНачало, ТекущаяБазоваяЗапись.БазовыйПериодОсновнойЗаписиНачало, ТекущаяБазоваяЗапись.БазовыйПериодОсновнойЗаписиКонец) 
				Или Не ОбщегоНазначенияБЗК.ДатаВИнтервале(ПериодЗаписи.ПериодДействияКонец, ТекущаяБазоваяЗапись.БазовыйПериодОсновнойЗаписиНачало, ТекущаяБазоваяЗапись.БазовыйПериодОсновнойЗаписиКонец) Тогда
			
				ТекущаяБазоваяЗапись.НеобходимоНормировать = Истина;
				УдалятьСтрокиФПД = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		ПредыдущаяЗапись = ТекущаяБазоваяЗапись;
	КонецЦикла;	
	
	Если УдалятьСтрокиФПД Тогда
		Для Каждого УдаляемаяСтрока Из ФактическиеПериодыЗаписи Цикл
			ФактическиеПериоды.Удалить(УдаляемаяСтрока);
		КонецЦикла;			
	КонецЕсли;	
КонецПроцедуры		
	
Процедура ЗаполнитьБазовыеЗаписиПоДаннымИБ(БазовыеЗаписи, ОписаниеНабораРасчитываемыхЗаписей, АлгоритмОтбораБазовыхЗаписей, ИсключаемыйРегистратор = Неопределено, ПолучатьРасшифровкуБезусловно = Ложь)	
	Если ОписаниеНабораРасчитываемыхЗаписей.Тип = Тип("ТаблицаЗначений") Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ОписаниеНабораРасчитываемыхЗаписей.РасчитываемыеЗаписи, "ВТОсновныеЗаписи");	
		ИмяВТРасчитываемыйНабор = "ВТОсновныеЗаписи";
	Иначе
		МенеджерВременныхТаблиц = ОписаниеНабораРасчитываемыхЗаписей.МенеджерВременныхТаблиц;
		ИмяВТРасчитываемыйНабор = ОписаниеНабораРасчитываемыхЗаписей.ИмяВТРасчитываемыеЗаписи;	
	КонецЕсли;		
	
	ЗапросПолученияБазовыхЗаписей = ЗапросПолученияБазовыхЗаписей(ИмяВТРасчитываемыйНабор, АлгоритмОтбораБазовыхЗаписей, ИсключаемыйРегистратор, ПолучатьРасшифровкуБезусловно);
	ЗапросПолученияБазовыхЗаписей.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ВыборкаБазовыхЗаписей = ЗапросПолученияБазовыхЗаписей.Выполнить().Выбрать();	
	
	Пока ВыборкаБазовыхЗаписей.Следующий() Цикл
		СтрокаРеузультат = БазовыеЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеузультат, ВыборкаБазовыхЗаписей);
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗаполнитьБазовыеЗаписиНачисленийПоТекущемуНабору(ОписаниеНабораРасчитываемыхЗаписей, БазовыеЗаписи, ТаблицаНабораНачислений, АлгоритмОтбораНачислений, ВидыРасчетаСПодробнойРасшифрокой)
	ДоступныеАлгоритмы = АлгоритмыПолученияБазы();
	
	ПоляПоискаСуществующихЗаписей = "Регистратор, НомерСтроки, БазовыйПериодОсновнойЗаписиНачало, БазовыйПериодОсновнойЗаписиКонец";
	БазовыеЗаписи.Индексы.Добавить(ПоляПоискаСуществующихЗаписей);
	ОтборСуществующихЗаписей = Новый Структура(ПоляПоискаСуществующихЗаписей);
	
	НачисленияТекущегоНабора = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНабораНачислений, "ВидРасчета", Истина);
	СвойстваНачисленийНабора = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НачисленияТекущегоНабора, "ТребуетсяРасчетБазы, ПериодДействияБазовый, ОчередностьРасчета, ЕстьВытесняющиеНачисления, НачисляетсяВЦеломЗаМесяц");
	
	ЗависимостиВидовРасчета = ЗависимотиВидовРасчетаРасчитываемогоНабора();
		
	ПоляПоиска = ОбщегоНазначения.ВыгрузитьКолонку(БазовыеИзмерения(АлгоритмОтбораНачислений), "Ключ");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаНабораНачислений, СтрСоединить(ПоляПоиска, ","));
	СтруктураПоиска = Новый Структура(СтрСоединить(ПоляПоиска, ","));
	
	Для Каждого СтрокаРасчитываемогоНабора Из РасчитываемыйНабор Цикл
		БазовыеВидыРасчетаТекущейСтроки = ЗависимостиВидовРасчета[СтрокаРасчитываемогоНабора.ВидРасчета]; 
		Если БазовыеВидыРасчетаТекущейСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ЗаполнитьОтборБазовыхЗаписей(АлгоритмОтбораНачислений, СтруктураПоиска, СтрокаРасчитываемогоНабора, ДоступныеАлгоритмы);
		ЗаписиТекущегоНабора = ТаблицаНабораНачислений.НайтиСтроки(СтруктураПоиска);
			
		Для Каждого СтрокаТекущегоНабора Из ЗаписиТекущегоНабора Цикл
			ЗаполнитьЗначенияСвойств(ОтборСуществующихЗаписей, СтрокаТекущегоНабора, "Регистратор, НомерСтроки");
			ОтборСуществующихЗаписей.БазовыйПериодОсновнойЗаписиНачало = СтрокаРасчитываемогоНабора.БазовыйПериодНачало;
			ОтборСуществующихЗаписей.БазовыйПериодОсновнойЗаписиКонец = СтрокаРасчитываемогоНабора.БазовыйПериодКонец;
			
			Если Не ЗаписьСоответствуетОтборуБазы(АлгоритмОтбораНачислений, СтрокаРасчитываемогоНабора, СтрокаТекущегоНабора, БазовыеВидыРасчетаТекущейСтроки, ДоступныеАлгоритмы) 
				Или БазовыеЗаписи.НайтиСтроки(ОтборСуществующихЗаписей).Количество() <> 0 Тогда	
				Продолжить;
			КонецЕсли;	
				
			СвойстваБазовогоВР = СвойстваНачисленийНабора[СтрокаТекущегоНабора.ВидРасчета];	
						
			НоваяЗапись = БазовыеЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТекущегоНабора);
			НоваяЗапись.БазовыйПериодОсновнойЗаписиНачало = СтрокаРасчитываемогоНабора.БазовыйПериодНачало;
			НоваяЗапись.БазовыйПериодОсновнойЗаписиКонец = СтрокаРасчитываемогоНабора.БазовыйПериодКонец;
			НоваяЗапись.НеобходимоНормировать = НеобходимоНормироватьБазовуюЗапись(АлгоритмОтбораНачислений, СтрокаРасчитываемогоНабора, СтрокаТекущегоНабора, ДоступныеАлгоритмы);
			НоваяЗапись.ЗаписьТекущегоНабора = Истина;
			
			НоваяЗапись.НормироватьКаскадно = НормироватьЗаписьКаскадно(СтрокаТекущегоНабора, СтрокаРасчитываемогоНабора, СвойстваБазовогоВР);
			НоваяЗапись.ОчередностьРасчета = СвойстваБазовогоВР.ОчередностьРасчета;
			НоваяЗапись.НачисляетсяВЦеломЗаМесяц = СвойстваБазовогоВР.НачисляетсяВЦеломЗаМесяц;
			НоваяЗапись.НеобходимФПДПриНормировании = НеобходимФПДБазовойЗаписиДляНормирования(
				СтрокаТекущегоНабора, 
				СтрокаРасчитываемогоНабора, 
				НоваяЗапись.НормироватьКаскадно, 
				СвойстваНачисленийНабора[СтрокаТекущегоНабора.ВидРасчета]);
		КонецЦикла;				
	КонецЦикла;							
КонецПроцедуры	

Функция НормироватьЗаписьКаскадно(БазоваяЗапись, РасчитываемаяЗапись, СвойстваБазовогоВидаРасчета)
	Если СвойстваБазовогоВидаРасчета.ТребуетсяРасчетБазы
		И БазоваяЗапись.ПериодДействия = НачалоМесяца(БазоваяЗапись.БазовыйПериодНачало)
		И БазоваяЗапись.ПериодДействия = НачалоМесяца(БазоваяЗапись.БазовыйПериодКонец) Тогда
			
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция НеобходимФПДБазовойЗаписиДляНормирования(БазоваяЗапись, РасчитываемаяЗапись, НормироватьКаскадно, СвойстваБазовогоВидаРасчета)
	Если НормироватьКаскадно 
		И СвойстваБазовогоВидаРасчета.ПериодДействияБазовый 
		И СвойстваБазовогоВидаРасчета.ЕстьВытесняющиеНачисления Тогда
			
		Возврат Истина;
	ИначеЕсли Не НормироватьКаскадно
		И СвойстваБазовогоВидаРасчета.ЕстьВытесняющиеНачисления Тогда
	 	
 	 	Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

Функция ЗависимостиВидовРасчета(ИмяТаблицыЗависмыеВидыРасчета, ОтборЗависимыхВидовРасчета = Неопределено, ОтборВедущихВидовРасчета = Неопределено)			
	ЗависимоститиНачислений = Новый Соответствие;		
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияВедущиеВидыРасчета.Ссылка КАК ВидРасчета,
	|	НачисленияВедущиеВидыРасчета.ВидРасчета КАК ВедущийВидРасчета,
	|	Начисления.ПериодДействияБазовый
	|		И Начисления.ТребуетсяРасчетБазы КАК НормироватьКаскадно
	|ИЗ
	|	ВТВедущиеВидыРасчета КАК НачисленияВедущиеВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияВедущиеВидыРасчета.ВидРасчета = Начисления.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРасчета";	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВедущиеВидыРасчета", ИмяТаблицыЗависмыеВидыРасчета);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	Если ОтборЗависимыхВидовРасчета <> Неопределено Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("НачисленияВедущиеВидыРасчета.Ссылка В(&ОтборЗависимыхВидовРасчета)");
		Запрос.УстановитьПараметр("ОтборЗависимыхВидовРасчета", ОтборЗависимыхВидовРасчета);
	КонецЕсли;
	
	Если ОтборВедущихВидовРасчета <> Неопределено Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("НачисленияВедущиеВидыРасчета.ВидРасчета В(&ОтборВедущихНачислений)");
		Запрос.УстановитьПараметр("ОтборВедущихНачислений", ОтборВедущихВидовРасчета);
	КонецЕсли;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
		ВедущиеВидыРасчета = Новый Соответствие();
		ЗависимоститиНачислений.Вставить(Выборка.ВидРасчета, ВедущиеВидыРасчета);
		
		Пока Выборка.Следующий() Цикл
			ОписаниеВедущегоВидаРасчета = Новый Структура("ВидРасчета, НормироватьКаскадно");
			ОписаниеВедущегоВидаРасчета.ВидРасчета = Выборка.ВедущийВидРасчета;
			ОписаниеВедущегоВидаРасчета.НормироватьКаскадно = Выборка.НормироватьКаскадно;
			ВедущиеВидыРасчета.Вставить(Выборка.ВедущийВидРасчета, ОписаниеВедущегоВидаРасчета);
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ЗависимоститиНачислений;
КонецФункции	

Функция АлгоритмыПолученияБазы()
	АлгоритмыОтбораБазовыхЗаписей = Новый Структура();
	АлгоритмыОтбораБазовыхЗаписей.Вставить("БазаНачислений", 1);
	АлгоритмыОтбораБазовыхЗаписей.Вставить("БазаУдержаний", 2);
	
	Возврат АлгоритмыОтбораБазовыхЗаписей;		
КонецФункции	

Функция БазовыеИзмерения(АлгоритмПолученияБазы)
	Алгоритмы = АлгоритмыПолученияБазы();
	
	Если АлгоритмПолученияБазы = Алгоритмы.БазаНачислений Тогда
		Возврат БазовыеИзмеренияНачислений();
	ИначеЕсли АлгоритмПолученияБазы = Алгоритмы.БазаУдержаний Тогда 
		Возврат БазовыеИзмеренияУдержаний();
	Иначе
		ВызватьИскючениеНеизвестныйАлгоритмПолученияБазы();
	КонецЕсли;	
КонецФункции

Функция БазовыеИзмеренияНачислений()
	БазовыеИзмерения = Новый Соответствие();	
	БазовыеИзмерения.Вставить("Сотрудник", "Сотрудник");
	
	Возврат БазовыеИзмерения;
КонецФункции

Функция БазовыеИзмеренияУдержаний()
	БазовыеИзмерения = Новый Соответствие();
	БазовыеИзмерения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	БазовыеИзмерения.Вставить("ГоловнаяОрганизация", "Организация");
	
	Возврат БазовыеИзмерения;
КонецФункции			

Функция ВыраженияОтбораБазовыхЗаписейПоПериоду(АлгоритмПолученияБазы)
	Алгоритмы = АлгоритмыПолученияБазы();
	
	Если АлгоритмПолученияБазы = Алгоритмы.БазаНачислений Тогда
		Возврат ВыраженияОтбораБазовыхЗаписейНачисленийПоПериоду();
	ИначеЕсли АлгоритмПолученияБазы = Алгоритмы.БазаУдержаний Тогда 
		Возврат ВыраженияОтбораБазовыхЗаписейУдержанийПоПериоду();
	Иначе
		ВызватьИскючениеНеизвестныйАлгоритмПолученияБазы();
	КонецЕсли;	
КонецФункции	

Функция ВыраженияОтбораБазовыхЗаписейНачисленийПоПериоду()
	ВыраженияУсловий = Новый Массив();
	
	// Условие на период регистрации.
	ТекстУсловия = "БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
					|	ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.БазовыйПериодКонец";							
	ВыраженияУсловий.Добавить(ТекстУсловия);
	
	ТекстУсловия = "БазовыеЗаписи.ПериодДействия >= НАЧАЛОПЕРИОДА(ОсновныеЗаписи.БазовыйПериодНачало, МЕСЯЦ)";				
	ВыраженияУсловий.Добавить(ТекстУсловия);	
	ТекстУсловия = "БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец";			
	ВыраженияУсловий.Добавить(ТекстУсловия);
	
	// условие на конкретные даты базовых начислений	
	ТекстУсловия = "ОсновныеЗаписи.БазовыйПериодНачало МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец
					|	ИЛИ БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец";				
	ВыраженияУсловий.Добавить(ТекстУсловия);
	
	Возврат ВыраженияУсловий;	
КонецФункции

Функция ВыраженияОтбораБазовыхЗаписейУдержанийПоПериоду()
	ВыраженияУсловий = Новый Массив();
	
	ТекстУсловия = "БазовыеЗаписи.ПериодРегистрации = ОсновныеЗаписи.МесяцУдержания";						
	ВыраженияУсловий.Добавить(ТекстУсловия);
	
	ТекстУсловия = "ВЫБОР
					|	КОГДА ОсновныеЗаписи.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
					|		ТОГДА ОсновныеЗаписи.Сотрудник = БазовыеЗаписи.Сотрудник
					|	ИНАЧЕ ИСТИНА
					|КОНЕЦ";						
	ВыраженияУсловий.Добавить(ТекстУсловия);
	
	Возврат ВыраженияУсловий;
КонецФункции

Функция ЗаписьСоответствуетОтборуБазы(АлгоритПолученияБазы, РасчитываемаяЗапись, БазоваяЗапись, ЗависимостиВидовРасчета, ДоступныеАлгоритмы)
	Если АлгоритПолученияБазы = ДоступныеАлгоритмы.БазаНачислений Тогда
		Возврат ЗаписьСоответствуетОтборуБазыНачислений(РасчитываемаяЗапись, БазоваяЗапись, ЗависимостиВидовРасчета);
	ИначеЕсли АлгоритПолученияБазы = ДоступныеАлгоритмы.БазаУдержаний Тогда
	 	Возврат ЗаписьСоответствуетОтборуБазыУдержаний(РасчитываемаяЗапись, БазоваяЗапись, ЗависимостиВидовРасчета);
	Иначе
		ВызватьИскючениеНеизвестныйАлгоритмПолученияБазы();
	КонецЕсли;		
КонецФункции

Функция ЗаписьСоответствуетОтборуБазыНачислений(РасчитываемаяЗапись, БазоваяЗапись, ЗависимостиВидовРасчета)
	Если ЗависимостиВидовРасчета[БазоваяЗапись.ВидРасчета] = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не (БазоваяЗапись.ПериодРегистрации <= РасчитываемаяЗапись.ПериодРегистрации
		Или БазоваяЗапись.ПериодРегистрации <= РасчитываемаяЗапись.БазовыйПериодКонец) Тогда
			
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не (ОбщегоНазначенияБЗК.ДатаВИнтервале(РасчитываемаяЗапись.БазовыйПериодНачало, БазоваяЗапись.ПериодДействияНачало, БазоваяЗапись.ПериодДействияКонец)
		Или ОбщегоНазначенияБЗК.ДатаВИнтервале(БазоваяЗапись.ПериодДействияНачало, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец)) Тогда
			
		Возврат Ложь;
	КонецЕсли;	
					
	Возврат Истина;			
КонецФункции

Функция ЗаписьСоответствуетОтборуБазыУдержаний(РасчитываемаяЗапись, БазоваяЗапись, ЗависимостиВидовРасчета)
	Если ЗависимостиВидовРасчета[БазоваяЗапись.ВидРасчета] = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если БазоваяЗапись.ПериодРегистрации <> РасчитываемаяЗапись.МесяцУдержания Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РасчитываемаяЗапись.Сотрудник)
		И РасчитываемаяЗапись.Сотрудник <> БазоваяЗапись.Сотрудник Тогда
			
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;	
КонецФункции	

Функция ВыражениеПоляЗапросаНеобходимоНормировать(АлгоритмПолученияБазы)
	Алгоритмы = АлгоритмыПолученияБазы();
	
	Если АлгоритмПолученияБазы = Алгоритмы.БазаНачислений Тогда
		Возврат ВыражениеПоляЗапросаНеобходимоНормироватьБазуНачислений();
	ИначеЕсли АлгоритмПолученияБазы = Алгоритмы.БазаУдержаний Тогда 
		Возврат ВыражениеПоляЗапросаНеобходимоНормироватьБазуУдержаний();
	Иначе
		ВызватьИскючениеНеизвестныйАлгоритмПолученияБазы();
	КонецЕсли;		
КонецФункции	

Функция ВыражениеПоляЗапросаНеобходимоНормироватьБазуНачислений()
	ВыражениеПоляНеобходимоНормировать = 
	"	ВЫБОР
	|		КОГДА НЕ(БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец)
	|				ИЛИ НЕ(БазовыеЗаписи.ПериодДействияКонец МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	Возврат ВыражениеПоляНеобходимоНормировать;
КонецФункции

Функция ВыражениеПоляЗапросаНеобходимоНормироватьБазуУдержаний()
	ВыражениеПоляНеобходимоНормировать = 
	"	ВЫБОР 
	|		КОГДА (ОсновныеЗаписи.БазовыйПериодНачало МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец
	|			ИЛИ БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец)
	|		 И (НЕ (БазовыеЗаписи.ПериодДействияНачало МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец)
	|				ИЛИ НЕ (БазовыеЗаписи.ПериодДействияКонец МЕЖДУ ОсновныеЗаписи.БазовыйПериодНачало И ОсновныеЗаписи.БазовыйПериодКонец))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	Возврат ВыражениеПоляНеобходимоНормировать;
КонецФункции

Функция НеобходимоНормироватьБазовуюЗапись(АлгоритПолученияБазы, РасчитываемаяЗапись, БазоваяЗапись, ДоступныеАлгоритмы)
	Если АлгоритПолученияБазы = ДоступныеАлгоритмы.БазаНачислений Тогда
		Возврат НеобходимоНормироватьБазовуюЗаписьНачислений(РасчитываемаяЗапись, БазоваяЗапись);
	ИначеЕсли АлгоритПолученияБазы = ДоступныеАлгоритмы.БазаУдержаний Тогда 
		Возврат НеобходимоНормироватьБазовуюЗаписьУдержаний(РасчитываемаяЗапись, БазоваяЗапись);
	Иначе
		ВызватьИскючениеНеизвестныйАлгоритмПолученияБазы();
	КонецЕсли;		
КонецФункции	

Функция НеобходимоНормироватьБазовуюЗаписьНачислений(РасчитываемаяЗапись, БазоваяЗапись)
	Если ОбщегоНазначенияБЗК.ДатаВИнтервале(БазоваяЗапись.ПериодДействияНачало, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец)
		И ОбщегоНазначенияБЗК.ДатаВИнтервале(БазоваяЗапись.ПериодДействияКонец, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец) Тогда
			
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Функция НеобходимоНормироватьБазовуюЗаписьУдержаний(РасчитываемаяЗапись, БазоваяЗапись)
	
	Если ОбщегоНазначенияБЗК.ДатаВИнтервале(РасчитываемаяЗапись.БазовыйПериодНачало, БазоваяЗапись.ПериодДействияНачало, БазоваяЗапись.ПериодДействияКонец, Ложь)
		И ОбщегоНазначенияБЗК.ДатаВИнтервале(РасчитываемаяЗапись.БазовыйПериодКонец, БазоваяЗапись.ПериодДействияНачало, БазоваяЗапись.ПериодДействияКонец, Ложь) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияБЗК.ДатаВИнтервале(БазоваяЗапись.ПериодДействияНачало, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец)
		И Не ОбщегоНазначенияБЗК.ДатаВИнтервале(БазоваяЗапись.ПериодДействияКонец, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец) Тогда
		
		Возврат Истина;
	КонецЕсли;
		
	Если ОбщегоНазначенияБЗК.ДатаВИнтервале(БазоваяЗапись.ПериодДействияКонец, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец)
		И Не ОбщегоНазначенияБЗК.ДатаВИнтервале(БазоваяЗапись.ПериодДействияНачало, РасчитываемаяЗапись.БазовыйПериодНачало, РасчитываемаяЗапись.БазовыйПериодКонец) Тогда
		
		Возврат Истина;
	КонецЕсли;	 
		
	Возврат Ложь;
КонецФункции	 

Функция ТаблицаБазовыхВидовРасчета(АлгоритмПолученияБазы)
	Алгоритмы = АлгоритмыПолученияБазы();
	
	Если АлгоритмПолученияБазы = Алгоритмы.БазаНачислений Тогда
		Возврат ТаблицаБазовыхВидовРасчетаНачислений();
	ИначеЕсли АлгоритмПолученияБазы = Алгоритмы.БазаУдержаний Тогда 
		Возврат ТаблицаБазовыхВидовРасчетаУдержаний();
	Иначе
		ВызватьИскючениеНеизвестныйАлгоритмПолученияБазы();
	КонецЕсли;		
КонецФункции	

Функция ТаблицаБазовыхВидовРасчетаНачислений()	
	Возврат "ПланВидовРасчета.Начисления.БазовыеВидыРасчета";
КонецФункции

Функция ТаблицаБазовыхВидовРасчетаУдержаний()
	Возврат "ПланВидовРасчета.Удержания.БазовыеВидыРасчета";
КонецФункции

Процедура ЗаполнитьОтборБазовыхЗаписей(АлгоритмПолученияБазы, СтруктураОтбора, РасчитываемаяСтрока, ДоступныеАлгоритмы)
	Если АлгоритмПолученияБазы = ДоступныеАлгоритмы.БазаНачислений Тогда
		ЗаполнитьОтборБазовыхЗаписейНачислений(СтруктураОтбора, РасчитываемаяСтрока);
	ИначеЕсли АлгоритмПолученияБазы = ДоступныеАлгоритмы.БазаУдержаний Тогда 	
		ЗаполнитьОтборБазовыхЗаписейУдержаний(СтруктураОтбора, РасчитываемаяСтрока);
	Иначе
		ВызватьИскючениеНеизвестныйАлгоритмПолученияБазы();	
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьОтборБазовыхЗаписейНачислений(СтруктураОтбора, РасчитываемаяСтрока)
	СтруктураОтбора.Сотрудник = РасчитываемаяСтрока.Сотрудник;
КонецПроцедуры	

Процедура ЗаполнитьОтборБазовыхЗаписейУдержаний(СтруктураОтбора, РасчитываемаяСтрока)
	СтруктураОтбора.ФизическоеЛицо = РасчитываемаяСтрока.ФизическоеЛицо;
	СтруктураОтбора.ГоловнаяОрганизация = РасчитываемаяСтрока.Организация;	
КонецПроцедуры	

Процедура ВызватьИскючениеНеизвестныйАлгоритмПолученияБазы()
	ТекстИсключения = НСтр("ru = 'Не известный алгоритм получения расчетной базы.';
							|en = 'Unknown algorithm of the accounting base receipt.'");
	ВызватьИсключение ТекстИсключения;	
КонецПроцедуры	

Функция ДанныеВедущихЗаписейКаскадногоНормирования(ДанныеБазовыхНачислений, ДанныеТекущегоНабораНачислений = Неопределено, РасчетПоДаннымТекущегоНабора = Ложь, ИсключаемыйРегистратор = Неопределено)	
	ОтборНормиреумыхЗаписей = Новый Структура("НеобходимоНормировать, НормироватьКаскадно", Истина, Истина);
	
	ОтборВедущихЗаписей = ДанныеБазовыхНачислений.Записи.Скопировать(ОтборНормиреумыхЗаписей, "Сотрудник, ПериодРегистрации, ПериодДействия, ПериодДействияКонец, ВидРасчета");
	ОтборВедущихЗаписей.Свернуть("Сотрудник, ПериодРегистрации, ПериодДействия, ПериодДействияКонец, ВидРасчета");	
		
	ВедующиеЗаписиКаскадногоНормирования = ВедующиеЗаписиКаскадногоНормирования(ОтборВедущихЗаписей, ДанныеТекущегоНабораНачислений, РасчетПоДаннымТекущегоНабора, ИсключаемыйРегистратор);
	ФактическиеПериодыВедущихЗаписей = ФактическиеПериодыНормируемыхЗаписей(ВедующиеЗаписиКаскадногоНормирования, ДанныеТекущегоНабораНачислений);	
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазбитьПериодыВедущихНачислений(ФактическиеПериодыВедущихЗаписей, ДанныеБазовыхНачислений.ФактическиеПериоды); 
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;

	Результат = Новый Структура("Записи, ФактическиеПериоды");
	Результат.Записи =  ВедующиеЗаписиКаскадногоНормирования;
	Результат.ФактическиеПериоды = ФактическиеПериодыВедущихЗаписей;
	
	Возврат Результат;
КонецФункции

Процедура РазбитьПериодыВедущихНачислений(ПериодыВедущихНачислений, ПериодыНачисленийНормируемыхКаскадно)
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыНачисленийНормируемыхКаскадно, "Сотрудник, ПериодДействия");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыНачисленийНормируемыхКаскадно, "ВидРасчета, НормироватьКаскадно");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыВедущихНачислений, "Сотрудник, ПериодДействия");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыВедущихНачислений, "ВидРасчета");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыВедущихНачислений, "Регистратор, НомерСтроки");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыНачисленийНормируемыхКаскадно, "Регистратор, НомерСтроки");
		
	ОтборЗависимыхВидовРасчета = ПериодыНачисленийНормируемыхКаскадно.ВыгрузитьКолонку("ВидРасчета");
	ОтборЗависимыхВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборЗависимыхВидовРасчета);	
	
	ОтборВедущихВидовРасчета = ПериодыВедущихНачислений.ВыгрузитьКолонку("ВидРасчета");
	ОтборВедущихВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборВедущихВидовРасчета);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборЗависимыхВидовРасчета, ОтборВедущихВидовРасчета);
	
	Зависимости = ЗависимостиВидовРасчета("ПланВидовРасчета.Начисления.ВедущиеВидыРасчета", ОтборЗависимыхВидовРасчета, ОтборВедущихВидовРасчета);
		
	ДатыРазбиенияНачислений = Новый ТаблицаЗначений;
	ДатыРазбиенияНачислений.Колонки.Добавить("Регистратор");
	ДатыРазбиенияНачислений.Колонки.Добавить("НомерСтроки");
	ДатыРазбиенияНачислений.Колонки.Добавить("Дата");
	
	СтруктураПоискаПериодов = Новый Структура("Регистратор, НомерСтроки");
	
	ОтборСтрокНормирумыхЗаписей = Новый Структура("ВидРасчета, НормироватьКаскадно");
	ОтборСтрокНормирумыхЗаписей.НормироватьКаскадно = Истина;
	ОтборСтрокВедущихЗаписей = Новый Структура("ВидРасчета");
	Для Каждого ЗависимостиТекущегоВидаРасчета Из Зависимости Цикл
		ОтборСтрокНормирумыхЗаписей.ВидРасчета = ЗависимостиТекущегоВидаРасчета.Ключ;
		ОтборСтрокВедущихЗаписей.ВидРасчета = ЗависимостиТекущегоВидаРасчета.Ключ;
		
		// заполним даты изменения зависмых записей
		ДатыЗависимыхНачислений = Новый ТаблицаЗначений;
		ДатыЗависимыхНачислений.Колонки.Добавить("Дата");
		ДатыЗависимыхНачислений.Колонки.Добавить("Сотрудник");
		ДатыЗависимыхНачислений.Колонки.Добавить("ПериодДействия");

		НормируемыеЗаписи = ПериодыНачисленийНормируемыхКаскадно.НайтиСтроки(ОтборСтрокНормирумыхЗаписей);
		Для Каждого ЗаписьНачисления Из НормируемыеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаПериодов, ЗаписьНачисления);
			ДобавитьСтрокиТаблицыДатЗависимыхЗаписей(ДатыЗависимыхНачислений, ЗаписьНачисления);	
		КонецЦикла;	
		
		ЗависимыеЗаписи = ПериодыВедущихНачислений.НайтиСтроки(ОтборСтрокВедущихЗаписей);
		Для Каждого ЗаписьНачисления Из ЗависимыеЗаписи Цикл
			ДобавитьСтрокиТаблицыДатЗависимыхЗаписей(ДатыЗависимыхНачислений, ЗаписьНачисления);		
		КонецЦикла;	
		
		// теперь определим даты разбиения ведущих начислений
		ДатыЗависимыхНачислений.Свернуть("Дата, Сотрудник, ПериодДействия");
		ДатыЗависимыхНачислений.Индексы.Добавить("Сотрудник, ПериодДействия");
		
		ЗаполнитьДатыРазбиенияВедущихНачислений(ДатыРазбиенияНачислений, ПериодыВедущихНачислений, ДатыЗависимыхНачислений, ЗависимостиТекущегоВидаРасчета.Значение);
	КонецЦикла;	
	
	ДатыРазбиенияНачислений.Свернуть("Регистратор, НомерСтроки, Дата");
	ДатыРазбиенияНачислений.Индексы.Добавить("Регистратор, НомерСтроки");
	
	РазбитьПериодыНачислений(ПериодыВедущихНачислений, ДатыРазбиенияНачислений);	
КонецПроцедуры	

Процедура ДобавитьСтрокиТаблицыДатЗависимыхЗаписей(ДатыВедущихЗаписей, ВедущаяЗапись)
	СтрокаТаблицыДатВедущихНачислений = ДатыВедущихЗаписей.Добавить();
	СтрокаТаблицыДатВедущихНачислений.Сотрудник = ВедущаяЗапись.Сотрудник;
	СтрокаТаблицыДатВедущихНачислений.ПериодДействия = ВедущаяЗапись.ПериодДействия;
	СтрокаТаблицыДатВедущихНачислений.Дата = ВедущаяЗапись.ПериодДействияНачало;
	
	СтрокаТаблицыДатВедущихНачислений = ДатыВедущихЗаписей.Добавить();
	СтрокаТаблицыДатВедущихНачислений.Сотрудник = ВедущаяЗапись.Сотрудник;
	СтрокаТаблицыДатВедущихНачислений.ПериодДействия = ВедущаяЗапись.ПериодДействия;
	СтрокаТаблицыДатВедущихНачислений.Дата = КонецДня(ВедущаяЗапись.ПериодДействияКонец) + 1;	
КонецПроцедуры

Процедура ЗаполнитьДатыРазбиенияВедущихНачислений(ДатыРазбиенияВедущихНачислений, ЗаписиВедущихНачислений, ДатыЗависимыхНачилений, ВедущиеВидыРасчета)
	ОтборСтрокТаблицыРазбиения = Новый Структура("Сотрудник, ПериодДействия");
	Для Каждого ОписаниеВедущегоВидаРасчета Из ВедущиеВидыРасчета Цикл 
		ВедущиеЗаписи = ЗаписиВедущихНачислений.НайтиСтроки(Новый Структура("ВидРасчета", ОписаниеВедущегоВидаРасчета.Ключ));
		Для Каждого ТекущаяЗаписьНачислений Из ВедущиеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрокТаблицыРазбиения, ТекущаяЗаписьНачислений);
			ДатыЗависимыхНачисленийПоСотрудникПериоду = ДатыЗависимыхНачилений.НайтиСтроки(ОтборСтрокТаблицыРазбиения);
			
			Для Каждого СтрокаТаблицыДатЗависимыхНачилений Из ДатыЗависимыхНачисленийПоСотрудникПериоду Цикл
				Если ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаТаблицыДатЗависимыхНачилений.Дата, НачалоДня(ТекущаяЗаписьНачислений.ПериодДействияНачало), ТекущаяЗаписьНачислений.ПериодДействияКонец, Ложь) 
					И НачалоДня(ТекущаяЗаписьНачислений.ПериодДействияНачало) <> СтрокаТаблицыДатЗависимыхНачилений.Дата Тогда
					
					СтрокаТаблицыРабиения = ДатыРазбиенияВедущихНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРабиения, ТекущаяЗаписьНачислений);
					СтрокаТаблицыРабиения.Дата = СтрокаТаблицыДатЗависимыхНачилений.Дата;
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры	

Функция ВедующиеЗаписиКаскадногоНормирования(ОтборНормируемыхЗаписей, ДанныеТекущегоНабораНачислений = Неопределено, РасчетПоДаннымТекущегоНабора = Ложь, ИсключаемыйРегистратор = Неопределено)
	Если Не РасчетПоДаннымТекущегоНабора Тогда
		ВедующиеЗаписи = ВедущиеЗаписиКаскадногоНормированияПоДаннымИБ(ОтборНормируемыхЗаписей, ИсключаемыйРегистратор);
	Иначе
		ВедующиеЗаписи = ВедущиеЗаписиКаскадногоНормированияПустая();	
	КонецЕсли;	
	
	Если ДанныеТекущегоНабораНачислений <> Неопределено Тогда
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ДополнитьВедущиеЗаписиКаскадногоНормированияПоТекущемуНабору(ВедующиеЗаписи, ОтборНормируемыхЗаписей, ДанныеТекущегоНабораНачислений.ТаблицаНабора); 
		Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
	КонецЕсли;
		
	Возврат ВедующиеЗаписи;
КонецФункции

Функция ВедущиеЗаписиКаскадногоНормированияПоДаннымИБ(ОтборНормируемыхЗаписей, ИсключаемыйРегистратор = Неопределено)
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ОтборНормируемыхЗаписей, "ВТКаскадноНормируемеЗаписи");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазовыеЗаписи.Регистратор КАК Регистратор,
	|	БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
	|	БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
	|	БазовыеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
	|	БазовыеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
	|	БазовыеЗаписи.ВидРасчета КАК ВидРасчета,
	|	ИСТИНА КАК НеобходимоНормировать,
	|	БазовыеЗаписи.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
	|	БазовыеЗаписи.ВидРасчета.ЕстьВытесняющиеНачисления КАК НеобходимФПДПриНормировании,
	|	БазовыеЗаписи.Сотрудник КАК Сотрудник,
	|	БазовыеЗаписи.Результат КАК Результат,
	|	БазовыеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
	|	БазовыеЗаписи.ОбщийГрафик КАК ОбщийГрафик,
	|	БазовыеЗаписи.ВремяВЧасах КАК ВремяВЧасах,
	|	БазовыеЗаписи.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	ВЫБОР
	|		КОГДА БазовыеЗаписи.ВидРасчета.ТребуетсяРасчетБазы
	|				И БазовыеЗаписи.ПериодДействия = НАЧАЛОПЕРИОДА(БазовыеЗаписи.БазовыйПериодНачало, МЕСЯЦ)
	|				И БазовыеЗаписи.ПериодДействия = НАЧАЛОПЕРИОДА(БазовыеЗаписи.БазовыйПериодКонец, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НормироватьКаскадно,
	|	ЛОЖЬ КАК ЗаписьТекущегоНабора,
	|	БазовыеЗаписи.ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый,
	|	БазовыеЗаписи.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета,
	|	БазовыеЗаписи.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериод
	|ИЗ
	|	ВТКаскадноНормируемеЗаписи КАК ОсновныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК БазовыеЗаписи
	|		ПО ОсновныеЗаписи.Сотрудник = БазовыеЗаписи.Сотрудник
	|			И (БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
	|				ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодДействияКонец)
	|			И (БазовыеЗаписи.ПериодДействия = ОсновныеЗаписи.ПериодДействия)
	|			И (БазовыеЗаписи.Регистратор <> &ИсключаемыйРегистратор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
	|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ВедущиеЗаписиКаскадногоНормированияПустая()
	ВедущиеЗаписиКаскадногоНормирования = Новый ТаблицаЗначений;
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("Регистратор", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ПериодДействияНачало", Новый ОписаниеТипов("Дата"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ПериодДействияКонец", Новый ОписаниеТипов("Дата"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("НеобходимоНормировать", Новый ОписаниеТипов("Булево"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("НеобходимФПДПриНормировании", Новый ОписаниеТипов("Булево"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("НачисляетсяВЦеломЗаМесяц", Новый ОписаниеТипов("Булево"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ЕстьВытесняющиеНачисления", Новый ОписаниеТипов("Булево"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ГрафикиРаботыСотрудников"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("НормироватьКаскадно", Новый ОписаниеТипов("Булево"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ЗаписьТекущегоНабора", Новый ОписаниеТипов("Булево"));
    ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ПериодДействияБазовый", Новый ОписаниеТипов("Булево"));
	ВедущиеЗаписиКаскадногоНормирования.Колонки.Добавить("ОчередностьРасчета", Новый ОписаниеТипов("Число"));
	
	Возврат ВедущиеЗаписиКаскадногоНормирования;	
КонецФункции


Процедура ДополнитьВедущиеЗаписиКаскадногоНормированияПоТекущемуНабору(ВедующиеЗаписиКаскадногоНормирования, ОтборНормируемыхЗаписей, ТаблицаНабораНачислений)
	ПоляПоискаСуществующихЗаписей = "Регистратор, НомерСтроки";
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ВедующиеЗаписиКаскадногоНормирования, ПоляПоискаСуществующихЗаписей);
	ОтборСуществующихЗаписей = Новый Структура(ПоляПоискаСуществующихЗаписей);
		
	ОтборВидовРасчета = ОтборНормируемыхЗаписей.ВыгрузитьКолонку("ВидРасчета");
	ОтборВидовРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборВидовРасчета);
	ТаблицаБазровыхВР = "ПланВидовРасчета.Начисления.ВедущиеВидыРасчета";
	
	НачисленияТекущегоНабора = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНабораНачислений, "ВидРасчета", Истина);
	СвойстваНачисленийНабора = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НачисленияТекущегоНабора, "ТребуетсяРасчетБазы, ПериодДействияБазовый, ОчередностьРасчета, ЕстьВытесняющиеНачисления, НачисляетсяВЦеломЗаМесяц");
	
	ЗависимостиВидовРасчета = ЗависимостиВидовРасчета(ТаблицаБазровыхВР, ОтборВидовРасчета);
		
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаНабораНачислений, "Сотрудник, ПериодДействия");
	СтруктураПоиска = Новый Структура("Сотрудник, ПериодДействия");
	
	Для Каждого СтрокаРасчитываемогоНабора Из ОтборНормируемыхЗаписей Цикл
		ВедущиеВидыРасчетаТекущейСтроки = ЗависимостиВидовРасчета[СтрокаРасчитываемогоНабора.ВидРасчета]; 
		Если ВедущиеВидыРасчетаТекущейСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасчитываемогоНабора);
		ЗаписиТекущегоНабора = ТаблицаНабораНачислений.НайтиСтроки(СтруктураПоиска);
			
		Для Каждого СтрокаТекущегоНабора Из ЗаписиТекущегоНабора Цикл
			ЗаполнитьЗначенияСвойств(ОтборСуществующихЗаписей, СтрокаТекущегоНабора);
			
			Если  (СтрокаТекущегоНабора.ПериодРегистрации > СтрокаРасчитываемогоНабора.ПериодРегистрации 
				И СтрокаТекущегоНабора.ПериодРегистрации > СтрокаРасчитываемогоНабора.ПериодДействия)
				Или ВедующиеЗаписиКаскадногоНормирования.НайтиСтроки(ОтборСуществующихЗаписей).Количество() > 0 Тогда
				
				Продолжить;
			КонецЕсли;	
				
			СвойстваБазовогоВР = СвойстваНачисленийНабора[СтрокаТекущегоНабора.ВидРасчета];	
						
			НоваяЗапись = ВедующиеЗаписиКаскадногоНормирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТекущегоНабора);
			НоваяЗапись.НеобходимоНормировать = Истина;
			НоваяЗапись.ЗаписьТекущегоНабора = Истина;
			
			НоваяЗапись.НормироватьКаскадно = НормироватьЗаписьКаскадно(СтрокаТекущегоНабора, СтрокаРасчитываемогоНабора, СвойстваБазовогоВР);
			НоваяЗапись.ОчередностьРасчета = СвойстваБазовогоВР.ОчередностьРасчета;
			НоваяЗапись.НачисляетсяВЦеломЗаМесяц = СвойстваБазовогоВР.НачисляетсяВЦеломЗаМесяц;
			НоваяЗапись.НеобходимФПДПриНормировании  = СвойстваБазовогоВР.ЕстьВытесняющиеНачисления;
		КонецЦикла;				
	КонецЦикла;					
КонецПроцедуры				

ВыполненныеОчередностиКаскадногоРасчетаНачислений = Новый Соответствие();

#КонецЕсли

