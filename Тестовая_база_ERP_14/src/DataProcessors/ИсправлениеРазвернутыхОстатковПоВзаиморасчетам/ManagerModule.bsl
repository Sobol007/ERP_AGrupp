#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Вызывается извне обработки.
//
Процедура СоздатьДокументыВзаимозачетЗадолженности(ПараметрыЗапуска, АдресХранилища) Экспорт

	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Обработка.ИсправлениеРазвернутыхОстатковПоВзаиморасчетам");
	
	УстановитьПривилегированныйРежим(Истина);
	СписокСозданныхДокументов = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "СписокСозданныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("Сообщения", Неопределено);
	РезультатВыполнения.Вставить("СписокСозданныхДокументов", ?(ЗначениеЗаполнено(СписокСозданныхДокументов), СписокСозданныхДокументов, Новый Соответствие));
	РезультатВыполнения.Вставить("АналитикаКРасчету", Новый СписокЗначений);
	
	Для Каждого СтрокаТЧ Из ПараметрыЗапуска Цикл
		Если СтрокаТЧ.Пометка И НЕ ЗначениеЗаполнено(СтрокаТЧ.СозданныйДокумент) Тогда
			СоздатьДокументВзаимозачетЗадолженности(СтрокаТЧ, РезультатВыполнения);
		КонецЕсли
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, РезультатВыполнения.СписокСозданныхДокументов, "СписокСозданныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура СоздатьДокументВзаимозачетЗадолженности(ПараметрыЗаполнения, РезультатВыполнения)
	
	Если ТипЗнч(ПараметрыЗаполнения.КонтрагентДебитор) <> Тип("СправочникСсылка.Организации")
		И ТипЗнч(ПараметрыЗаполнения.КонтрагентКредитор) <> Тип("СправочникСсылка.Организации") Тогда
		
		ДокументОбъект = Документы.ВзаимозачетЗадолженности.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыЗаполнения);
		
		РасшифровкаДебет = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
		ЗаполнитьЗначенияСвойств(РасшифровкаДебет, ПараметрыЗаполнения);
		
		РасшифровкаКредит = ДокументОбъект.КредиторскаяЗадолженность.Добавить();
		ЗаполнитьЗначенияСвойств(РасшифровкаКредит, ПараметрыЗаполнения);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ПараметрыЗаполнения.СозданныйДокумент = ДокументОбъект.Ссылка;
			РезультатВыполнения.СписокСозданныхДокументов.Вставить(ПараметрыЗаполнения.ИдентификаторДокумента, ДокументОбъект.Ссылка);
			РезультатВыполнения.АналитикаКРасчету.Добавить(ПараметрыЗаполнения.АналитикаУчетаПоПартнерам);
		Исключение
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(РезультатВыполнения.Сообщения, "", ОписаниеОшибки(), "");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается извне обработки.
//
Процедура УдалитьСозданныеДокументы(ПараметрыЗапуска, АдресХранилища) Экспорт
	
	РезультатУдаления 	= Новый Соответствие();
	Владелец 			= ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Обработка.ИсправлениеРазвернутыхОстатковПоВзаиморасчетам");
	
	УстановитьПривилегированныйРежим(Истина);
	СозданныеДокументы = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "СписокСозданныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);
	
	
	Для Каждого СтрокаСоответствия Из ПараметрыЗапуска.ДокументыКУдаленю Цикл
		Если СтрокаСоответствия.Значение = СозданныеДокументы[СтрокаСоответствия.Ключ] Тогда
			РезультатУдаления.Вставить(СозданныеДокументы[СтрокаСоответствия.Ключ], СтрокаСоответствия.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	МассивПомеченныхНаУдаление = Новый Массив;
	СписокОшибок = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СсылкаНаУдаление Из РезультатУдаления Цикл
		ДокументОбъект = СсылкаНаУдаление.Ключ.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
				"Объект.ДокументыВзаимозачетаЗадолженности",
				ОписаниеОшибки(), 
				Неопределено);
				Продолжить;
		КонецПопытки;
		
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		МассивПомеченныхНаУдаление.Добавить(СсылкаНаУдаление.Ключ);
	КонецЦикла;
	
	ТабСсылок = НайтиПоСсылкам(МассивПомеченныхНаУдаление);
	
	СтрСообщения = НСтр("ru = 'Имеются ссылки на объект %1 в %2. Документ не будет удален.';
						|en = 'There are references to the %1 object in %2. Document will not be deleted.'");	
	
	Для Каждого Ссылка Из ТабСсылок Цикл
		Если ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСКлиентами")
			ИЛИ ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСПоставщиками")
			ИЛИ ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ДанныеПервичныхДокументов")
			ИЛИ ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
			ИЛИ ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ДокументыСОшибкамиПроверкиКонтрагентов")
			//++ НЕ УТКА
			ИЛИ ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКОтражениюВБюджетировании")
			//-- НЕ УТКА
			Тогда
			Продолжить;
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1]));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
			"Объект.ДокументыВзаимозачетаЗадолженности[%1].СозданныйДокумент",
			ТекстОшибки, 
			Неопределено);
			
		Индекс = МассивПомеченныхНаУдаление.Найти(Ссылка[0]);
		Если Индекс <> Неопределено Тогда
			МассивПомеченныхНаУдаление.Удалить(Индекс);
			РезультатУдаления.Удалить(Ссылка[0]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Документ Из РезультатУдаления Цикл
		Попытка
			ДокументОбъект = Документ.Ключ.ПолучитьОбъект();
			ДокументОбъект.Удалить();
		Исключение
			РезультатУдаления.Удалить(Документ.Ключ);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
				"Объект.ДокументыВзаимозачетаЗадолженности",
				ОписаниеОшибки(), 
				Неопределено
				,
				);
		КонецПопытки;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Структура("Ошибки, УдаленныеДокументы", СписокОшибок, РезультатУдаления);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
