
#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

&НаКлиенте
Перем ПараметрыОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВключениеОнлайнВзаиморасчетов = Параметры.ВключениеОнлайнВзаиморасчетов;
	
	Если ВключениеОнлайнВзаиморасчетов Тогда
		ДатаПроверки = КонецДня(ТекущаяДатаСеанса());
	Иначе
		Если НЕ Параметры.Свойство("МассивОрганизаций") Тогда
			ТекстСообщения = НСтр("ru = 'Непосредственное открытие этой формы не предусмотрено.';
									|en = 'Cannot open this form directly.'");
			ВызватьИсключение ТекстСообщения;
			Отказ = Истина;
		Иначе 
			Организации.ЗагрузитьЗначения(Параметры.МассивОрганизаций);
			ДатаПроверки = КонецДня(Параметры.ДатаОкончанияПериода);
		КонецЕсли;
		
	КонецЕсли;
	
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Обработка.ИсправлениеРазвернутыхОстатковПоВзаиморасчетам");
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, "СписокСозданныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);

	ЗаполнитьТЧДокументыВзаимозачетаЗадолженности();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Элементы.ДокументыВзаимозачетаЗадолженностиПартнер.Видимость = Ложь;
	КонецЕсли;
	
	Заголовок = СтрШаблон(НСтр("ru = 'Исправление развернутых остатков по взаиморасчетам на %1';
								|en = 'Correction of detailed balances on mutual settlements by %1'"), Формат(ДатаПроверки, "ДЛФ=DD"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВключениеОнлайнВзаиморасчетов Тогда
		ТекстСообщения = НСтр("ru = 'Включение онлайн распределения взаиморасчетов невозможно, пока в системе есть развернутые остатки по взаиморасчетам.
		|Для исправления создайте документы ""Взаимозачет задолженности"" по объектам расчетов.';
		|en = 'You cannot enable online settlements allocation as long as there is a detailed balance for mutual settlements in the application.
		|For adjustment, create the ""Debt offset"" documents on settlement objects.'");
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Обработка.ИсправлениеРазвернутыхОстатковПоВзаиморасчетам");
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, "СписокСозданныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВзаимозачетаЗадолженностиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.ДокументыВзаимозачетаЗадолженности Цикл
		СтрокаТЧ.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.ДокументыВзаимозачетаЗадолженности Цикл
		СтрокаТЧ.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОчиститьСообщения();
	ЗаполнитьТЧДокументыВзаимозачетаЗадолженности()
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВзаимозачетаЗадолженности(Команда)
	
	ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВзаимозачетаЗадолженностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Поле.Имя = "ДокументыВзаимозачетаЗадолженностиДата" Тогда
		СтандартнаяОбработка = Ложь;
		Если Элементы.ДокументыВзаимозачетаЗадолженности.ТекущиеДанные <> Неопределено Тогда
			ПоказатьЗначение(Неопределено, Элементы.ДокументыВзаимозачетаЗадолженности.ТекущиеДанные.СозданныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Кнопки = Новый СписокЗначений();
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить документы';
												|en = 'Delete documents'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ТекстВопроса = НСтр("ru = 'Выделенные сформированные документы будут удалены.';
						|en = 'Selected generated documents will be deleted.'");
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьТЧДокументыВзаимозачетаЗадолженности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Клиента) КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.Клиент) КАК ТипДебитора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.Клиент) КАК ТипКредитора,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК КонтрагентДебитор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК КонтрагентКредитор,
	|	Расчеты.ЗаказКлиента КАК Заказ,
	|	Расчеты.Валюта КАК ВалютаВзаиморасчетов,
	|	СУММА(Расчеты.ПредоплатаОстаток) КАК ПредоплатаОстаток,
	|	СУММА(Расчеты.ПредоплатаУпрОстаток) КАК ПредоплатаУпрОстаток,
	|	СУММА(Расчеты.ПредоплатаРеглОстаток) КАК ПредоплатаРеглОстаток,
	|	СУММА(Расчеты.ДолгОстаток) КАК ДолгОстаток,
	|	СУММА(Расчеты.ДолгУпрОстаток) КАК ДолгУпрОстаток,
	|	СУММА(Расчеты.ДолгРеглОстаток) КАК ДолгРеглОстаток,
	|	&Ответственный КАК Ответственный,
	|	&Комментарий КАК Комментарий
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&КонецПериода, &ОтборПоОрганизациям)КАК Расчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.ПредоплатаОстаток) <> 0 И
	|	СУММА(Расчеты.ДолгОстаток) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Поставщика),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.Поставщик),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.Поставщик),
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам.Партнер,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент,
	|	Расчеты.ЗаказПоставщику,
	|	Расчеты.Валюта,
	|	СУММА(Расчеты.ПредоплатаОстаток),
	|	СУММА(Расчеты.ПредоплатаУпрОстаток),
	|	СУММА(Расчеты.ПредоплатаРеглОстаток),
	|	СУММА(Расчеты.ДолгОстаток),
	|	СУММА(Расчеты.ДолгУпрОстаток),
	|	СУММА(Расчеты.ДолгРеглОстаток),
	|	&Ответственный,
	|	&Комментарий
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&КонецПериода, &ОтборПоОрганизациям) КАК Расчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Валюта,
	|	Расчеты.ЗаказПоставщику
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.ПредоплатаОстаток) <> 0 И
	|	СУММА(Расчеты.ДолгОстаток) <> 0";
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(ДатаПроверки, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Комментарий", НСтр("ru = '# Исправление развернутых остатков по взаиморасчетам';
													|en = '# Correction of detailed balances on mutual settlements'"));
	
	Если ВключениеОнлайнВзаиморасчетов Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизациям", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизациям", "АналитикаУчетаПоПартнерам.Организация В (&Организации)");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объект.ДокументыВзаимозачетаЗадолженности.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ДокументыВзаимозачетаЗадолженности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Суммы = Новый Структура();
		Суммы.Вставить("ПредоплатаОстаток", Макс(Выборка.ПредоплатаОстаток, -Выборка.ПредоплатаОстаток));
		Суммы.Вставить("ПредоплатаУпрОстаток", Макс(Выборка.ПредоплатаУпрОстаток, -Выборка.ПредоплатаУпрОстаток));
		Суммы.Вставить("ПредоплатаРеглОстаток", Макс(Выборка.ПредоплатаРеглОстаток, -Выборка.ПредоплатаРеглОстаток));
		Суммы.Вставить("ДолгОстаток", Макс(Выборка.ДолгОстаток, -Выборка.ДолгОстаток));
		Суммы.Вставить("ДолгУпрОстаток", Макс(Выборка.ДолгУпрОстаток, -Выборка.ДолгУпрОстаток));
		Суммы.Вставить("ДолгРеглОстаток", Макс(Выборка.ДолгРеглОстаток, -Выборка.ДолгРеглОстаток));
		
		Если Суммы.ПредоплатаОстаток < Суммы.ДолгОстаток Тогда
			ПолеСуммы = "Предоплата";
		Иначе
			ПолеСуммы = "Долг";
		КонецЕсли;
		
		НоваяСтрока.СуммаВзаиморасчетов = Суммы[ПолеСуммы + "Остаток"];
		НоваяСтрока.СуммаУпр = Суммы[ПолеСуммы + "УпрОстаток"];
		НоваяСтрока.СуммаРегл = Суммы[ПолеСуммы + "РеглОстаток"];
		НоваяСтрока.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор());
	КонецЦикла;
	
	МассивОрганизаций = Объект.ДокументыВзаимозачетаЗадолженности.Выгрузить(,"Организация").ВыгрузитьКолонку("Организация");
	Организации.ЗагрузитьЗначения(ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОрганизаций));
	
	ОпределитьДатыСозданияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДатыСозданияДокументов()
	
	ПериодПроверки = ?(ДатаПроверки >= КонецДня(ТекущаяДатаСеанса()), КонецМесяца(ДобавитьМесяц(ДатаПроверки, -1)), ДатаПроверки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаЗапретов.Организация КАК Организация,
	|	ТаблицаЗапретов.ДатаЗапрета КАК ДатаЗапрета
	|ПОМЕСТИТЬ ВТЗапретыИзменений
	|ИЗ
	|	&ТаблицаЗапретов КАК ТаблицаЗапретов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАналитикаСРазвернутымОстатком.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаАналитикаСРазвернутымОстатком.Организация КАК Организация,
	|	ТаблицаАналитикаСРазвернутымОстатком.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаАналитикаСРазвернутымОстатком.Заказ КАК Заказ,
	|	ТаблицаАналитикаСРазвернутымОстатком.ТипРасчетов КАК ТипРасчетов,
	|	ТаблицаАналитикаСРазвернутымОстатком.ДолгОстаток КАК ДолгОстаток,
	|	ТаблицаАналитикаСРазвернутымОстатком.ПредоплатаОстаток КАК ПредоплатаОстаток
	|ПОМЕСТИТЬ ВТАналитика
	|ИЗ
	|	&ТЗ КАК ТаблицаАналитикаСРазвернутымОстатком
	|ГДЕ
	|	ТаблицаАналитикаСРазвернутымОстатком.Организация В(&Организации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАналитикаСРазвернутымОстатком.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаАналитикаСРазвернутымОстатком.Организация КАК Организация,
	|	ТаблицаАналитикаСРазвернутымОстатком.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаАналитикаСРазвернутымОстатком.Заказ КАК Заказ,
	|	ТаблицаАналитикаСРазвернутымОстатком.ТипРасчетов КАК ТипРасчетов,
	|	ВЫБОР
	|		КОГДА НЕ ВТЗапретыИзменений.ДатаЗапрета ЕСТЬ NULL
	|				И ВТЗапретыИзменений.ДатаЗапрета > &ПериодВозникновения
	|			ТОГДА ВТЗапретыИзменений.ДатаЗапрета
	|		ИНАЧЕ &ПериодВозникновения
	|	КОНЕЦ КАК ДатаВозникновения,
	|	ЕСТЬNULL(РасчетыСКлиентамиПоДокументамОстатки.ПредоплатаОстаток, ""NULL"") КАК Поле1
	|ИЗ
	|	ВТАналитика КАК ТаблицаАналитикаСРазвернутымОстатком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ПериодПроверки, ) КАК РасчетыСКлиентамиПоДокументамОстатки
	|		ПО ТаблицаАналитикаСРазвернутымОстатком.ДолгОстаток = РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток
	|			И ТаблицаАналитикаСРазвернутымОстатком.ПредоплатаОстаток = РасчетыСКлиентамиПоДокументамОстатки.ПредоплатаОстаток
	|			И ТаблицаАналитикаСРазвернутымОстатком.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам
	|			И ТаблицаАналитикаСРазвернутымОстатком.ВалютаВзаиморасчетов = РасчетыСКлиентамиПоДокументамОстатки.Валюта
	|			И ТаблицаАналитикаСРазвернутымОстатком.Заказ = РасчетыСКлиентамиПоДокументамОстатки.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапретыИзменений КАК ВТЗапретыИзменений
	|		ПО ТаблицаАналитикаСРазвернутымОстатком.Организация = ВТЗапретыИзменений.Организация
	|ГДЕ
	|	ТаблицаАналитикаСРазвернутымОстатком.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	И РасчетыСКлиентамиПоДокументамОстатки.ПредоплатаОстаток ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаАналитикаСРазвернутымОстатком.АналитикаУчетаПоПартнерам,
	|	ТаблицаАналитикаСРазвернутымОстатком.Организация,
	|	ТаблицаАналитикаСРазвернутымОстатком.ВалютаВзаиморасчетов,
	|	ТаблицаАналитикаСРазвернутымОстатком.Заказ,
	|	ТаблицаАналитикаСРазвернутымОстатком.ТипРасчетов,
	|	ВЫБОР
	|		КОГДА НЕ ВТЗапретыИзменений.ДатаЗапрета ЕСТЬ NULL
	|				И ВТЗапретыИзменений.ДатаЗапрета > &ПериодВозникновения
	|			ТОГДА ВТЗапретыИзменений.ДатаЗапрета
	|		ИНАЧЕ &ПериодВозникновения
	|	КОНЕЦ,
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаОстаток, ""NULL"")
	|ИЗ
	|	ВТАналитика КАК ТаблицаАналитикаСРазвернутымОстатком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&ПериодПроверки, ) КАК РасчетыСПоставщикамиПоДокументамОстатки
	|		ПО ТаблицаАналитикаСРазвернутымОстатком.ДолгОстаток = РасчетыСПоставщикамиПоДокументамОстатки.ДолгОстаток
	|			И ТаблицаАналитикаСРазвернутымОстатком.ПредоплатаОстаток = РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаОстаток
	|			И ТаблицаАналитикаСРазвернутымОстатком.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиПоДокументамОстатки.АналитикаУчетаПоПартнерам
	|			И ТаблицаАналитикаСРазвернутымОстатком.ВалютаВзаиморасчетов = РасчетыСПоставщикамиПоДокументамОстатки.Валюта
	|			И ТаблицаАналитикаСРазвернутымОстатком.Заказ = РасчетыСПоставщикамиПоДокументамОстатки.ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапретыИзменений КАК ВТЗапретыИзменений
	|		ПО ТаблицаАналитикаСРазвернутымОстатком.Организация = ВТЗапретыИзменений.Организация
	|ГДЕ
	|	ТаблицаАналитикаСРазвернутымОстатком.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	И РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаОстаток ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТЗ", Объект.ДокументыВзаимозачетаЗадолженности.Выгрузить());
	
	Сообщения = Неопределено;
	
	РазделДляПроверки = "ВзаимозачетыСписанияЗадолженности";
	
	ТаблицаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	
	Для Каждого ТекущаяОрганизация Из Организации Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Дата   = Дата(1, 1, 1);
		НоваяСтрока.Раздел = РазделДляПроверки;
		НоваяСтрока.Объект = ТекущаяОрганизация.Значение;
	КонецЦикла;
	
	ТаблицаДанных.Сортировать("Объект, Раздел");
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеДанных = Новый Структура("НоваяВерсия, Данные", Ложь, "");
	ЕстьЗапретИзменений = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ТаблицаДанных, ОписаниеДанных, ОписаниеОшибки);
	
	ТаблицаЗапретов  = Новый ТаблицаЗначений();
	ТаблицаЗапретов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗапретов.Колонки.Добавить("ДатаЗапрета", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	ИзмененияЗапрещены = Ложь;
	
	Если ЕстьЗапретИзменений Тогда
		Для Каждого СтрокаЗапрета Из ОписаниеОшибки.Запреты Цикл
			НоваяСтрокаЗапрета 				= ТаблицаЗапретов.Добавить();
			НоваяСтрокаЗапрета.Организация	= СтрокаЗапрета.Объект;
			НоваяСтрокаЗапрета.ДатаЗапрета	= КонецДня(СтрокаЗапрета.ДатаЗапрета + 86400);
			Если НоваяСтрокаЗапрета.ДатаЗапрета > ДатаПроверки Тогда
				
				Если НЕ ИзмененияЗапрещены Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Сообщения, 
						"Объект", 
						НСтр("ru = 'Создание документов взаимозачета задолженности невозможно, установлена дата запрета изменений для следующих организаций:';
							|en = 'Cannot create documents of debt offset, change closing date is set for the following companies:'"), 
						"");
				КонецЕсли;
				
				ИзмененияЗапрещены = Истина;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По организации ""%1"" установлена дата запрета изменений %2';
						|en = 'Change closing date %2 is set for the ""%1"" company'"),
					НоваяСтрокаЗапрета.Организация,
					Формат(СтрокаЗапрета.ДатаЗапрета, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщения, "Объект", ТекстСообщения, "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ФормаСоздатьДокументыВзаимозачета.Доступность	= НЕ ИзмененияЗапрещены;
	Элементы.Удалить.Доступность							= НЕ ИзмененияЗапрещены;
	
	Запрос.УстановитьПараметр("ТаблицаЗапретов", ТаблицаЗапретов);
	
	НеобработанныеОрганизации = Организации.Скопировать();
	
	Пока ЕстьНеобработанныеСтроки() Цикл
		
		Запрос.УстановитьПараметр("ПериодПроверки", ПериодПроверки);
		Запрос.УстановитьПараметр("ПериодВозникновения", КонецМесяца(ДобавитьМесяц(ПериодПроверки, 1)));
		Запрос.УстановитьПараметр("Организации", НеобработанныеОрганизации);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ПараметрыПоиска = Новый Структура("ТипРасчетов, АналитикаУчетаПоПартнерам, ВалютаВзаиморасчетов, Заказ");
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ВыборкаДетальныеЗаписи);
			СтрокаПоиска = Объект.ДокументыВзаимозачетаЗадолженности.НайтиСтроки(ПараметрыПоиска)[0];
			ТекущаяОрганизация = ВыборкаДетальныеЗаписи.Организация;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПоиска.Дата) Тогда
				СтрокаПоиска.Дата = ?(ВыборкаДетальныеЗаписи.ДатаВозникновения > ТекущаяДатаСеанса(), КонецДня(ТекущаяДатаСеанса()), ВыборкаДетальныеЗаписи.ДатаВозникновения);
				
				Если НЕ ЕстьНеобработанныеСтрокиПоОрганизации(ТекущаяОрганизация) Тогда
					НеобработанныеОрганизации.Удалить(НеобработанныеОрганизации.НайтиПоЗначению(ТекущаяОрганизация));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПериодПроверки = ДобавитьМесяц(ПериодПроверки, -1);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	СостояниеСозданиеДокументов 			= СостояниеФоновогоЗаданияСозданиеДокументов();
	СостояниеРаспределениеВзаиморасчетов	= СостояниеФоновогоЗаданияВзаиморасчетов();
	
	Если СостояниеСозданиеДокументов = Неопределено Тогда
		
		СтрокиДляОбработки = Новый Массив();
		
		Для Каждого СтрокаТЧ Из Объект.ДокументыВзаимозачетаЗадолженности Цикл
			Если СтрокаТЧ.Пометка И НЕ ЗначениеЗаполнено(СтрокаТЧ.СозданныйДокумент) Тогда
				СтрокиДляОбработки.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
				Если СтрокаТЧ.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом") Тогда
					РаспределятьРасчетыСКлиентами = Истина;
				КонецЕсли;
				Если СтрокаТЧ.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком") Тогда
					РаспределятьРасчетыСПоставщиком = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокиДляОбработки.Количество() Тогда
			Ключ = Новый УникальныйИдентификатор();
			ОтобразитьОбновитьФормуДлительнойОперации(НСтр("ru = 'Выполняется формирование документов взаимозачета задолженности.';
															|en = 'Generating debt offset documents.'"));
			СформироватьДокументыВЗаимозачетаЗадолженностиФоновымЗаданием("ФормированиеДокументовВзаимозачетаЗадолженности"+Строка(Ключ));
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
		Иначе
			ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		КонецЕсли;
		
	ИначеЕсли СостояниеСозданиеДокументов = "Активно" Тогда
		
		ОтобразитьОбновитьФормуДлительнойОперации(НСтр("ru = 'Выполняется формирование документов взаимозачета задолженности.';
														|en = 'Generating debt offset documents.'"));
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОжидания.ТекущийИнтервал, Истина);
		
	ИначеЕсли СостояниеСозданиеДокументов = "Завершено" Тогда
		
		РезультатСозданияДокументов = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатСозданияДокументов.Свойство("СписокСозданныхДокументов") 
			И РезультатСозданияДокументов.СписокСозданныхДокументов.Количество() Тогда
			
			Для Каждого СтрокаТЧ Из Объект.ДокументыВзаимозачетаЗадолженности Цикл
				СтрокаТЧ.СозданныйДокумент = РезультатСозданияДокументов.СписокСозданныхДокументов.Получить(СтрокаТЧ.ИдентификаторДокумента);
				СтрокаТЧ.Пометка = НЕ ЗначениеЗаполнено(СтрокаТЧ.СозданныйДокумент);
			КонецЦикла;
		
			Если СостояниеРаспределениеВзаиморасчетов = Неопределено Тогда
				
				СтруктураРасчетов = Новый Структура("АналитикиУчетаПоПартнерам, Организации", РезультатСозданияДокументов.АналитикаКРасчету.ВыгрузитьЗначения(), Неопределено);
				ОтобразитьОбновитьФормуДлительнойОперации(НСтр("ru = 'Выполняется распределение расчетов по документам.';
																|en = 'Settlements are being allocated by the documents.'"));
				
				Если РаспределятьРасчетыСКлиентами Тогда
					РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(ДатаПроверки, СтруктураРасчетов,"РасчетыСКлиентами",
						РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСКлиентами()+Строка(Ключ));
				КонецЕсли;
				
				Если РаспределятьРасчетыСПоставщиком Тогда
					РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(ДатаПроверки, СтруктураРасчетов,"РасчетыСПоставщиками",
						РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСПоставщиками()+Строка(Ключ));
				КонецЕсли;
				
				ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
				
			ИначеЕсли СостояниеРаспределениеВзаиморасчетов = "Активно" Тогда
				
				ОтобразитьОбновитьФормуДлительнойОперации(НСтр("ru = 'Выполняется распределение расчетов по документам.';
																|en = 'Settlements are being allocated by the documents.'"));
				ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОжидания.ТекущийИнтервал, Истина);
				
			ИначеЕсли СостояниеРаспределениеВзаиморасчетов = "Завершено" Тогда
				
				ЗакрытьФормуДляиельнойОперации();
				
			Иначе
				
				Ключ = Неопределено;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
					ТекстСообщения = НСтр("ru = 'Во время распределения расчетов по документам произошла ошибка. Подробности см. в Журнале регистрации.';
											|en = 'An error occurred while allocating settlements by the documents. For more information, see the Event log.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
		Иначе
			
			ЗакрытьФормуДляиельнойОперации();
			
		КонецЕсли;
		
	Иначе
		
		Ключ = Неопределено;
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ТекстСообщения = НСтр("ru = 'Во время создания документов взаимозачета задолженности произошла ошибка. Подробности см. в Журнале регистрации.';
									|en = 'An error occurred while creating debt offset documents. For more information, see the Event log.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОбновитьФормуДлительнойОперации(Пояснение)
	
	Если ФормаДлительнойОперации = Неопределено Тогда
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжидания);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжидания);
	КонецЕсли;
	
	ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = Пояснение + Символы.ПС + НСтр("ru = 'Пожалуйста, подождите...';
																															|en = 'Please wait...'");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДляиельнойОперации()
	
	АдресХранилища = Неопределено;
	Ключ = Неопределено;
	Если ФормаДлительнойОперации <> Неопределено Тогда
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	КонецЕсли;
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	
КонецПроцедуры

&НаСервере
Функция СостояниеФоновогоЗаданияВзаиморасчетов()
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСКлиентами()+Ключ);
	ЗаданияРасчетовСКлиентами = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСПоставщиками()+Ключ);
	ЗаданияРасчетовСПоставщиками = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ЗаданияРасчетовСКлиентами.Количество() = 0 И ЗаданияРасчетовСПоставщиками.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Если ЗаданияРасчетовСКлиентами.Количество() > 0 И ЗаданияРасчетовСКлиентами[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Возврат "Ошибка";
		ИначеЕсли ЗаданияРасчетовСКлиентами.Количество() > 0 И ЗаданияРасчетовСКлиентами[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			КлиентЗавершено = Ложь;
		Иначе
			КлиентЗавершено = Истина;
		КонецЕсли;
		
		Если ЗаданияРасчетовСПоставщиками.Количество() > 0 И ЗаданияРасчетовСПоставщиками[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Возврат "Ошибка";
		ИначеЕсли ЗаданияРасчетовСПоставщиками.Количество() > 0 И ЗаданияРасчетовСПоставщиками[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ПоставщикЗавершено = Ложь;
		Иначе
			ПоставщикЗавершено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если КлиентЗавершено И ПоставщикЗавершено Тогда
		Возврат "Завершено";
	Иначе
		Возврат "Активно";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СостояниеФоновогоЗаданияСозданиеДокументов()
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", "ФормированиеДокументовВзаимозачетаЗадолженности"+Ключ);
	ЗаданияСозданиеДокументов = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ЗаданияСозданиеДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Если ЗаданияСозданиеДокументов.Количество() > 0 И ЗаданияСозданиеДокументов[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Возврат "Ошибка";
		ИначеЕсли ЗаданияСозданиеДокументов.Количество() > 0 И ЗаданияСозданиеДокументов[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Возврат "Активно";
		Иначе
			Возврат "Завершено";
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЕстьНеобработанныеСтроки()
	
	ПараметрПоискаНеобработанныхСтрок = Новый Структура("Дата", Дата(1,1,1));
	Возврат Объект.ДокументыВзаимозачетаЗадолженности.НайтиСтроки(ПараметрПоискаНеобработанныхСтрок).Количество() > 0;
	
КонецФункции

&НаСервере
Функция ЕстьНеобработанныеСтрокиПоОрганизации(Организация)
	
	ПараметрПоискаНеобработанныхСтрок = Новый Структура("Дата, Организация", Дата(1,1,1), Организация);
	Возврат Объект.ДокументыВзаимозачетаЗадолженности.НайтиСтроки(ПараметрПоискаНеобработанныхСтрок).Количество() > 0;
	
КонецФункции

&НаСервере
Процедура СформироватьДокументыВЗаимозачетаЗадолженностиФоновымЗаданием(Ключ = "")
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется формирование документов взаимозачета задолженности';
								|en = 'Generating debt offset documents'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Объект.ДокументыВзаимозачетаЗадолженности.Выгрузить()); 
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("Обработки.ИсправлениеРазвернутыхОстатковПоВзаиморасчетам.СоздатьДокументыВзаимозачетЗадолженности");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УдалениеДокументовПрервано = Ложь;
	ФоновоеЗадание = УдалитьСозданныеДокументы();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Выполняется удаление выделенных документов взаимозачета.';
											|en = 'The selected offsetting documents are deleted.'");
	Обработчик = Новый ОписаниеОповещения("ПослеУдаленияДокументовВзаимозачета", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция УдалитьСозданныеДокументы()
	
	ДокументыКУдаленю = Новый Соответствие;
	Для Каждого СтрокаТЧ Из Объект.ДокументыВзаимозачетаЗадолженности Цикл
		Если СтрокаТЧ.Пометка И ЗначениеЗаполнено(СтрокаТЧ.СозданныйДокумент) Тогда
			ДокументыКУдаленю.Вставить(СтрокаТЧ.ИдентификаторДокумента, СтрокаТЧ.СозданныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ДокументыКУдаленю", ДокументыКУдаленю);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление документов взаимозачета задолденности';
																|en = 'Deleting debt offset documents'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Обработки.ИсправлениеРазвернутыхОстатковПоВзаиморасчетам.УдалитьСозданныеДокументы",
		ПараметрыСоздания, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияДокументовВзаимозачета(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		
		Результат = ПолучитьИзВременногоХранилища(ФоновоеЗадание.АдресРезультата);
		
		Если Результат.Свойство("УдаленныеДокументы") И Результат.УдаленныеДокументы.Количество() Тогда
			Для каждого СтрокаСоответствия Из Результат.УдаленныеДокументы Цикл
				СтрокаСдокументом = Объект.ДокументыВзаимозачетаЗадолженности.НайтиСтроки(Новый Структура("ИдентификаторДокумента", СтрокаСоответствия.Значение))[0];
				СтрокаСдокументом.СозданныйДокумент = Неопределено;
				СтрокаСдокументом.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор());
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Свойство("Ошибки") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Результат.Ошибки);
		КонецЕсли;
		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось удалить документы по причине: %Причина%';
									|en = 'Cannot delete documents due to: %Reason%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 