#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа=Неопределено Тогда Возврат Новый Массив; КонецЕсли;
	
	Токен = СтруктураПараметровДоступа.Токен;
	Ресурс = "/bot"+Токен+"/getUpdates";
	
	Если СтруктураПараметровДоступа.Свойство("НастройкиБота") Тогда
		МассивСтруктур = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(СтруктураПараметровДоступа.НастройкиБота);
		НастройкиБота = Новый ДеревоЗначений;
		ЗаполнитьДеревоЗначенийИзМассиваСтруктур(НастройкиБота, МассивСтруктур);
		Если НастройкиБота.Строки.Количество()>0 И (ЗначениеЗаполнено(НастройкиБота.Строки[0].Ответ) ИЛИ НастройкиБота.Строки[0].Строки.Количество()>0) Тогда
			ИспользуетсяАвтоБот = Истина;
		Иначе
			ИспользуетсяАвтоБот = Ложь;
		КонецЕсли;
	Иначе
		ИспользуетсяАвтоБот = Ложь;
	КонецЕсли;

	СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",Ресурс, СтруктураПараметровДоступа.Прокси));
	
	МассивСообщений = Новый Массив;
	ПолученоПустое = Ложь;
	Пока Не ПолученоПустое Цикл
		Если НЕ СтруктураОтвета.ok Тогда
			ВызватьИсключение СтруктураОтвета.description;
		Иначе
			Если СтруктураОтвета.result.Количество() = 0 Тогда
				ПолученоПустое = Истина;
				Продолжить;
			КонецЕсли;
			Для каждого Обновление из СтруктураОтвета.result Цикл
				Если Обновление.Свойство("message") Тогда
					user_id = Формат(Обновление.message.from.id, "ЧГ=");
					Если Обновление.message.Свойство("text") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.message.text, "<br>", Символы.ПС);
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Дата = МестноеВремя(Дата(1970,1,1)+Обновление.message.date);
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Если ИспользуетсяАвтоБот И ЗначениеЗаполнено(ТекстСообщения) Тогда
						СсылкаСообщения = Документы.CRM_СообщениеМессенджера.ПолучитьСсылку();
						Сообщение.Вставить("Ссылка", СсылкаСообщения);
						ОбработатьДействиеБота(УчетнаяЗапись, ТекстСообщения, user_id, НастройкиБота);
					КонецЕсли;
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации("https://t.me/"+user_id, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					ИмяПользователя = Обновление.message.from.first_name+?(Обновление.message.from.Свойство("last_name")," "+Обновление.message.from.last_name,"");
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = Формат(Обновление.message.message_id, "ЧГ=");
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Сообщение.ТекстСообщения = ТекстСообщения;
					КонецЕсли;
					Сообщение.ВидСообщения = "Входящее";
					Сообщение.ID_Пользователя = user_id;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ИмяПользователя;
					Если Обновление.message.Свойство("document") Тогда
						Документ = Обновление.message.document;
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						РесурсЗагрузкиФайла = "/bot"+Токен+"/getFile?file_id="+Документ.file_id;
						СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",РесурсЗагрузкиФайла, СтруктураПараметровДоступа.Прокси));
						Если НЕ СтруктураОтвета.ok Тогда
							ВызватьИсключение СтруктураОтвета.description;
						Иначе
							Если СтруктураПараметровДоступа.Прокси<>Неопределено Тогда
								HTTPПрокси = Новый ИнтернетПрокси;	
								HTTPПрокси.Установить("https", СтруктураПараметровДоступа.Прокси.Сервер, СтруктураПараметровДоступа.Прокси.Порт,
									СтруктураПараметровДоступа.Прокси.Пользователь, СтруктураПараметровДоступа.Прокси.Пароль, Ложь); 
							Иначе
								HTTPПрокси = Неопределено;
							КонецЕсли;

							ПутьКФайлу = СтруктураОтвета.result.file_path;
							ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
							Соединение = Новый HTTPСоединение("api.telegram.org",,,, HTTPПрокси,,ЗащищенноеСоединение);
							Соединение.Получить("/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+Документ.file_name);
							//КопироватьФайл("https://api.telegram.org/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+Документ.file_name);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов+Документ.file_name);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(Документ.file_name, СтрНайти(Документ.file_name, ".")-1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(Документ.file_name, СтрНайти(Документ.file_name, ".")+1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							УдалитьФайлы(КаталогВременныхФайлов+Документ.file_name);
						КонецЕсли;
					КонецЕсли;
					Если Обновление.message.Свойство("photo") Тогда
						file_id = Обновление.message.photo[Обновление.message.photo.Количество()-1].file_id;
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						РесурсЗагрузкиФайла = "/bot"+Токен+"/getFile?file_id="+file_id;
						СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",РесурсЗагрузкиФайла, СтруктураПараметровДоступа.Прокси));
						Если НЕ СтруктураОтвета.ok Тогда
							ВызватьИсключение СтруктураОтвета.description;
						Иначе
							Если СтруктураПараметровДоступа.Прокси<>Неопределено Тогда
								HTTPПрокси = Новый ИнтернетПрокси;	
								HTTPПрокси.Установить("https", СтруктураПараметровДоступа.Прокси.Сервер, СтруктураПараметровДоступа.Прокси.Порт,
									СтруктураПараметровДоступа.Прокси.Пользователь, СтруктураПараметровДоступа.Прокси.Пароль, Ложь); 
							Иначе
								HTTPПрокси = Неопределено;
							КонецЕсли;

							ПутьКФайлу = СтруктураОтвета.result.file_path;
							ИмяФайла = Сред(СтруктураОтвета.result.file_path, СтрНайти(СтруктураОтвета.result.file_path, "/")+1);
							ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
							Соединение = Новый HTTPСоединение("api.telegram.org",,,, HTTPПрокси,,ЗащищенноеСоединение);
							Соединение.Получить("/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+ИмяФайла);
							//КопироватьФайл("https://api.telegram.org/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+ИмяФайла);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов+ИмяФайла);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".")-1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".")+1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							УдалитьФайлы(КаталогВременныхФайлов+ИмяФайла);
						КонецЕсли;
					КонецЕсли;
					МассивСообщений.Добавить(Сообщение);
				ИначеЕсли Обновление.Свойство("callback_query") Тогда
					user_id = Формат(Обновление.callback_query.from.id, "ЧГ=");
					Если Обновление.callback_query.Свойство("data") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.callback_query.data, "<br>", Символы.ПС);
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Дата = ТекущаяДата();
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Если ИспользуетсяАвтоБот И ЗначениеЗаполнено(ТекстСообщения) Тогда
						СсылкаСообщения = Документы.CRM_СообщениеМессенджера.ПолучитьСсылку();
						Сообщение.Вставить("Ссылка", СсылкаСообщения);
						РесурсЗагрузкиФайла = "/bot"+Токен+"/EditMessageReplyMarkup?chat_id="+Формат(Обновление.callback_query.message.chat.id, "ЧГ=")+"&message_id="+Формат(Обновление.callback_query.message.message_id, "ЧГ=");
						СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",РесурсЗагрузкиФайла, СтруктураПараметровДоступа.Прокси));
						ОбработатьДействиеБота(УчетнаяЗапись, ТекстСообщения, user_id, НастройкиБота);
					КонецЕсли;
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации("https://t.me/"+user_id, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					ИмяПользователя = Обновление.callback_query.from.first_name+?(Обновление.callback_query.from.Свойство("last_name"), " "+Обновление.callback_query.from.last_name, "");
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = Формат(Обновление.callback_query.id, "ЧГ=");
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Сообщение.ТекстСообщения = СтрЗаменить(Обновление.callback_query.data, "<br>", Символы.ПС);
					КонецЕсли;
					Сообщение.ВидСообщения = "Входящее";
					Сообщение.ID_Пользователя = user_id;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ИмяПользователя;
					МассивСообщений.Добавить(Сообщение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",Ресурс+"?offset="+Формат(Обновление.update_id+1, "ЧГ="), СтруктураПараметровДоступа.Прокси));
	КонецЦикла;	
	Возврат МассивСообщений;
	
КонецФункции

Функция ОтправитьСообщение(Сообщение, УчетнаяЗапись, IDПользователя, СписокФайлов, ДопПараметры) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Токен = СтруктураПараметровДоступа.Токен;
	Ресурс = "/bot"+Токен+"/sendMessage?text="+Сообщение+"&chat_id="+IDПользователя;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Для каждого Параметр из ДопПараметры Цикл
			Ресурс = Ресурс + "&"+Параметр.Ключ+"="+СтрЗаменить(Параметр.Значение, Символы.ПС,"%0A");
		КонецЦикла;
	КонецЕсли;
	СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",Ресурс, СтруктураПараметровДоступа.Прокси));
	Если НЕ СтруктураОтвета.ok Тогда
		ВызватьИсключение СтруктураОтвета.description;
	Иначе
		Если СписокФайлов<>Неопределено И СписокФайлов.Количество()> 0 Тогда
			Для каждого Вложение из СписокФайлов Цикл
				Файл = ОтправитьФайлБотаTelegram(Вложение.Значение, Вложение.Представление, IDПользователя, Токен, СтруктураПараметровДоступа.Прокси);
			КонецЦикла;
		КонецЕсли;
		Возврат Формат(СтруктураОтвета.result.message_id, "ЧГ=");
	КонецЕсли;
	
КонецФункции

Процедура ОжиданиеСобытий(УчетнаяЗапись, ОднаИтерация = Ложь) Экспорт
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Токен = СтруктураПараметровДоступа.Токен;
	Ресурс = "/bot"+Токен+"/getUpdates";
	
	Если СтруктураПараметровДоступа.Свойство("НастройкиБота") Тогда
		МассивСтруктур = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(СтруктураПараметровДоступа.НастройкиБота);
		НастройкиБота = Новый ДеревоЗначений;
		ЗаполнитьДеревоЗначенийИзМассиваСтруктур(НастройкиБота, МассивСтруктур);
		Если НастройкиБота.Строки.Количество()>0 И (ЗначениеЗаполнено(НастройкиБота.Строки[0].Ответ) ИЛИ НастройкиБота.Строки[0].Строки.Количество()>0) Тогда
			ИспользуетсяАвтоБот = Истина;
		Иначе
			ИспользуетсяАвтоБот = Ложь;
		КонецЕсли;
	Иначе
		ИспользуетсяАвтоБот = Ложь;
	КонецЕсли;

	СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",Ресурс, СтруктураПараметровДоступа.Прокси));
			
	ПолученоПустое = Ложь;
	Пока Истина Цикл
		Если НЕ СтруктураОтвета.ok Тогда
			ВызватьИсключение СтруктураОтвета.description;
		Иначе
			МассивСообщений = Новый Массив;
			Для каждого Обновление из СтруктураОтвета.result Цикл
				Если Обновление.Свойство("message") Тогда
					user_id = Формат(Обновление.message.from.id, "ЧГ=");
					Если Обновление.message.Свойство("text") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.message.text, "<br>", Символы.ПС);
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Дата = МестноеВремя(Дата(1970,1,1)+Обновление.message.date);
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Если ИспользуетсяАвтоБот И ЗначениеЗаполнено(ТекстСообщения) Тогда
						СсылкаСообщения = Документы.CRM_СообщениеМессенджера.ПолучитьСсылку();
						Сообщение.Вставить("Ссылка", СсылкаСообщения);
						ОбработатьДействиеБота(УчетнаяЗапись, ТекстСообщения, user_id, НастройкиБота);
					КонецЕсли;
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации("https://t.me/"+user_id, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					ИмяПользователя = Обновление.message.from.first_name+?(Обновление.message.from.Свойство("last_name"), " "+Обновление.message.from.last_name, "");
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = Формат(Обновление.message.message_id, "ЧГ=");
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Сообщение.ТекстСообщения = ТекстСообщения;
					КонецЕсли;
					Сообщение.ВидСообщения = "Входящее";
					Сообщение.ID_Пользователя = user_id;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ИмяПользователя;
					//Сообщение.Группа = IDГруппы;
					Если Обновление.message.Свойство("document") Тогда
						Документ = Обновление.message.document;
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						РесурсЗагрузкиФайла = "/bot"+Токен+"/getFile?file_id="+Документ.file_id;
						СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",РесурсЗагрузкиФайла, СтруктураПараметровДоступа.Прокси));
						Если НЕ СтруктураОтвета.ok Тогда
							ВызватьИсключение СтруктураОтвета.description;
						Иначе
							Если СтруктураПараметровДоступа.Прокси<>Неопределено Тогда
								HTTPПрокси = Новый ИнтернетПрокси;	
								HTTPПрокси.Установить("https", СтруктураПараметровДоступа.Прокси.Сервер, СтруктураПараметровДоступа.Прокси.Порт,
									СтруктураПараметровДоступа.Прокси.Пользователь, СтруктураПараметровДоступа.Прокси.Пароль, Ложь); 
							Иначе
								HTTPПрокси = Неопределено;
							КонецЕсли;

							ПутьКФайлу = СтруктураОтвета.result.file_path;
							ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
							Соединение = Новый HTTPСоединение("api.telegram.org",,,, HTTPПрокси,,ЗащищенноеСоединение);
							Соединение.Получить("/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+Документ.file_name);
							//КопироватьФайл("https://api.telegram.org/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+Документ.file_name);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов+Документ.file_name);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(Документ.file_name, СтрНайти(Документ.file_name, ".")-1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(Документ.file_name, СтрНайти(Документ.file_name, ".")+1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							УдалитьФайлы(КаталогВременныхФайлов+Документ.file_name);
						КонецЕсли;
					КонецЕсли;
					Если Обновление.message.Свойство("photo") Тогда
						file_id = Обновление.message.photo[Обновление.message.photo.Количество()-1].file_id;
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						РесурсЗагрузкиФайла = "/bot"+Токен+"/getFile?file_id="+file_id;
						СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",РесурсЗагрузкиФайла, СтруктураПараметровДоступа.Прокси));
						Если НЕ СтруктураОтвета.ok Тогда
							ВызватьИсключение СтруктураОтвета.description;
						Иначе
							Если СтруктураПараметровДоступа.Прокси<>Неопределено Тогда
								HTTPПрокси = Новый ИнтернетПрокси;	
								HTTPПрокси.Установить("https", СтруктураПараметровДоступа.Прокси.Сервер, СтруктураПараметровДоступа.Прокси.Порт,
									СтруктураПараметровДоступа.Прокси.Пользователь, СтруктураПараметровДоступа.Прокси.Пароль, Ложь); 
							Иначе
								HTTPПрокси = Неопределено;
							КонецЕсли;

							ПутьКФайлу = СтруктураОтвета.result.file_path;
							ИмяФайла = Сред(СтруктураОтвета.result.file_path, СтрНайти(СтруктураОтвета.result.file_path, "/")+1);
							ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
							Соединение = Новый HTTPСоединение("api.telegram.org",,,, HTTPПрокси,,ЗащищенноеСоединение);
							Соединение.Получить("/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+ИмяФайла);
							//КопироватьФайл("https://api.telegram.org/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+ИмяФайла);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов+ИмяФайла);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".")-1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".")+1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							УдалитьФайлы(КаталогВременныхФайлов+ИмяФайла);
						КонецЕсли;
					КонецЕсли;
					МассивСообщений.Добавить(Сообщение);
				ИначеЕсли Обновление.Свойство("callback_query") Тогда
					user_id = Формат(Обновление.callback_query.from.id, "ЧГ=");
					Если Обновление.callback_query.Свойство("data") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.callback_query.data, "<br>", Символы.ПС);
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Дата = ТекущаяДата();
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Если ИспользуетсяАвтоБот И ЗначениеЗаполнено(ТекстСообщения) Тогда
						СсылкаСообщения = Документы.CRM_СообщениеМессенджера.ПолучитьСсылку();
						Сообщение.Вставить("Ссылка", СсылкаСообщения);
						РесурсЗагрузкиФайла = "/bot"+Токен+"/EditMessageReplyMarkup?chat_id="+Формат(Обновление.callback_query.message.chat.id, "ЧГ=")+"&message_id="+Формат(Обновление.callback_query.message.message_id, "ЧГ=");
						СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",РесурсЗагрузкиФайла, СтруктураПараметровДоступа.Прокси));
						БотОтветил = ОбработатьДействиеБота(УчетнаяЗапись, ТекстСообщения, user_id, НастройкиБота);
						//Если БотОтветил Тогда
						//	Продолжить;
						//КонецЕсли;
					КонецЕсли;
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации("https://t.me/"+user_id, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					ИмяПользователя = Обновление.callback_query.from.first_name+?(Обновление.callback_query.from.Свойство("last_name"), " "+Обновление.callback_query.from.last_name, "");
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = Формат(Обновление.callback_query.id, "ЧГ=");
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Сообщение.ТекстСообщения = СтрЗаменить(Обновление.callback_query.data, "<br>", Символы.ПС);
					КонецЕсли;
					Сообщение.ВидСообщения = "Входящее";
					Сообщение.ID_Пользователя = user_id;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ИмяПользователя;
					МассивСообщений.Добавить(Сообщение);
				КонецЕсли;
			КонецЦикла;
			CRM_РаботаСМессенджерамиСервер.СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
		КонецЕсли;
		
		Если ОднаИтерация Тогда
			Прервать;
		КонецЕсли;
		
		Если СтруктураОтвета.result.Количество()>0 Тогда
			Оффсет = "&offset="+Формат(Обновление.update_id+1, "ЧГ=");
		Иначе
			Оффсет = "";
		КонецЕсли;
		
		СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",Ресурс+"?timeout=20"+Оффсет, СтруктураПараметровДоступа.Прокси));
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьВидКИМессенджера(Контакт) Экспорт
	
	Наименование = "Telegram";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	                      |	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.Наименование = &Наименование
	                      |	И ВидыКонтактнойИнформации.Тип = &Тип
	                      |	И ВидыКонтактнойИнформации.Родитель = &Родитель");
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;
	КонецЕсли;
	
	ТипКИ = ТипКИМессенджера();
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПометкаУдаления Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйВидКИ.Родитель = Родитель;
		НовыйВидКИ.Наименование = Наименование;
		НовыйВидКИ.Тип = ТипКИ;
		НовыйВидКИ.Используется = Истина;
		НовыйВидКИ.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат НовыйВидКИ.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ТипКИМессенджера() Экспорт
	
	Возврат Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	
КонецФункции

Функция НачалоАдресаСтраницыПользователя() Экспорт
	Возврат "https://t.me/";
КонецФункции

Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетоды

Функция ДанныеБотаTelegram(Токен, Прокси) Экспорт
	Ресурс = "/bot"+Токен+"/getMe";
	СтруктураОтвета=CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org","",Ресурс, Прокси));
	Если НЕ СтруктураОтвета.ok Тогда
		ВызватьИсключение СтруктураОтвета.description;
	Иначе
		СтруктураРезультата = Новый Структура("Наименование, ИмяПользователя, id");
		СтруктураРезультата.Наименование = СтруктураОтвета.result.first_name;
		СтруктураРезультата.ИмяПользователя = СтруктураОтвета.result.username;
		СтруктураРезультата.id = СтруктураОтвета.result.id;
		Возврат СтруктураРезультата;
	КонецЕсли;
КонецФункции

Функция ОтправитьФайлБотаTelegram(АдресВХранилище, ИмяФайла, IDПользователя, Токен, Прокси=Неопределено)
	
	Если Прокси<>Неопределено Тогда
		HTTPПрокси = Новый ИнтернетПрокси;	
		HTTPПрокси.Установить("https", Прокси.Сервер, Прокси.Порт, Прокси.Пользователь, Прокси.Пароль, Ложь); 
	Иначе
		HTTPПрокси = Неопределено;
	КонецЕсли;
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");

	Тело         = Новый ПотокВПамяти();
    ЗаписьДанных = Новый ЗаписьДанных(Тело, "UTF-8");
	
	ЗаписьДанных.ЗаписатьСтроку("--"+Boundary);
    ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""chat_id""");
    ЗаписьДанных.ЗаписатьСтроку("");
 	ЗаписьДанных.ЗаписатьСтроку(IDПользователя);
	
	ЗаписьДанных.ЗаписатьСтроку("--"+Boundary);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""document""; filename="""+ИмяФайла+"""");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: text/plain");
    ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.Записать(ПолучитьИзВременногоХранилища(АдресВХранилище));
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--"+Boundary+"--");

    ДвоичныеДанныеДляОтправки = Тело.ЗакрытьИПолучитьДвоичныеДанные();
    HTTPЗапрос = Новый HTTPЗапрос;
    HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
    HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);
        
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеДляОтправки);
	HTTPЗапрос.АдресРесурса = "/bot"+Токен+"/sendDocument";    
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	Соединение = Новый HTTPСоединение("api.telegram.org",,,, HTTPПрокси,,ЗащищенноеСоединение);
	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	
    ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(ТекстОтвета);
	Если НЕ СтруктураОтвета.ok Тогда
		ВызватьИсключение СтруктураОтвета.description;
	Иначе
		Возврат Формат(СтруктураОтвета.result.message_id, "ЧГ=");
	КонецЕсли;
	
КонецФункции

Функция ОбработатьДействиеБота(УчетнаяЗапись, ТекстСообщения, user_id, НастройкиБота)
		
	Строка = НастройкиБота.Строки.Найти(ТекстСообщения, "callback_data", Истина);
	Если Строка<>Неопределено Тогда
		ТекстОтвета = Строка.Ответ;
		МассивКнопок = СтрокиДереваЗначенийВМассивСтруктур(Строка.Строки, "text, callback_data");
		КлавиатураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(Новый Структура("inline_keyboard", МассивКнопок), Истина);	
		ДопПараметры = Новый Структура("reply_markup", КлавиатураОтвета);
		CRM_РаботаСМессенджерамиСервер.ОтправитьСообщение(ТекстОтвета, УчетнаяЗапись, "", user_id,,, ДопПараметры);
		Если ТекстСообщения = "/start" Тогда
			Результат = Ложь;
		Иначе
			Результат = Истина;
		КонецЕсли;
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция СтрокиДереваЗначенийВМассивСтруктур(Строки, ИменаКолонок = "")
	Результат = Новый Массив;
	
	Для Каждого Строка Из Строки Цикл
		МассивКнопок = Новый Массив;
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		МассивКнопок.Добавить(СтруктураСтроки);
		Результат.Добавить(МассивКнопок);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьДеревоЗначенийИзМассиваСтруктур(Дерево, МассивСтруктур) 
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда 
		СтруктураКолонок = МассивСтруктур[0];
		Для Каждого Поле Из СтруктураКолонок Цикл
			Если Поле.Ключ = "Строки" Тогда Продолжить КонецЕсли;
			Если Дерево.Колонки.Найти(Поле.Ключ) = Неопределено Тогда
				Дерево.Колонки.Добавить(Поле.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Для Каждого Строка Из МассивСтруктур Цикл
		СтрокаДЗ = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДЗ, Строка);
		ЗаполнитьДеревоЗначенийИзМассиваСтруктур(СтрокаДЗ, Строка.Строки)
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
