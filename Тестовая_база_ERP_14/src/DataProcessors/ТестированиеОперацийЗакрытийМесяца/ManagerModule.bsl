#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Выполняет тестирование операций закрытия месяца.
// Входными параметрами принимает строку запуска.
// Возвращает успех/не успех тестирования.
// Если не успех, то смотри в журнале регистрации сообщения об ошибке.
Функция Тестирование(ВходныеПараметры) Экспорт
	
	Если ВходныеПараметры.Свойство("ПараметрыЗапуска") Тогда // программный запуск, есть параметры запуска
		ПараметрыТестирования = ПараметрыЗапускаТестирования(ВходныеПараметры.ПараметрыЗапуска);
	Иначе
		ПараметрыТестирования = ВходныеПараметры;
	КонецЕсли;
	
	Попытка
		РезультатТестирования = ТестироватьЗаПериод(ПараметрыТестирования);
	Исключение
		РезультатТестирования = Новый Структура;
		РезультатТестирования.Вставить("Отказ", Истина);
		СообщитьОбОшибке();
		РезультатТестирования.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатТестирования;
	
	Если ВходныеПараметры.Свойство("ПараметрыЗапуска") Тогда // программный запуск, есть параметры запуска
		ПараметрыТестирования = РазобратьСтрокуВПараметры(ВходныеПараметры.ПараметрыЗапуска);
		АвтоТестирование = Истина;
		Если ВходныеПараметры.Свойство("ХранилищеЭталонныхДанных21") Тогда
			ПараметрыТестирования.Вставить("ХранилищеЭталонныхДанных21", ВходныеПараметры.ХранилищеЭталонныхДанных21);
		КонецЕсли;
	Иначе // интерактивный запуск
		ПараметрыТестирования = ВходныеПараметры;
		АвтоТестирование = Ложь;
	КонецЕсли;
	
	Если АвтоТестирование Тогда
		РезультатТестирования = ТестироватьДоКонца(ПараметрыТестирования);
	Иначе
		РезультатТестирования = Новый Структура;
		РезультатТестирования.Вставить("Отказ", Ложь);
		РезультатТестирования.Вставить("Расхождения");
		РезультатТестирования.Вставить("ОписаниеОшибки");
		РезультатТестирования.Вставить("РасхожденияЭтапов");
		Если Не (ПараметрыТестирования.Свойство("ТолькоСравнитьС21")
					И ПараметрыТестирования.ТолькоСравнитьС21) Тогда
			Попытка
				РезультатТестирования.Расхождения = ТестироватьУказанныйМесяц(ПараметрыТестирования.Период, ПараметрыТестирования); // возврат расхождений
				ЗаполнитьДанныеРасхожденийПоЭтапам(РезультатТестирования.РасхожденияЭтапов, РезультатТестирования.Расхождения);
				Если ПараметрыТестирования.Свойство("Отказ")
					И ПараметрыТестирования.Отказ Тогда
					РезультатТестирования.Отказ = Истина;
					СообщитьОбОшибке();
				КонецЕсли;
			Исключение
				РезультатТестирования.Отказ = Истина;
				РезультатТестирования.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПоместитьВоВременноеХранилище(РезультатТестирования, ПараметрыТестирования.АдресХранилища);
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		Если ПараметрыТестирования.Свойство("ХранилищеЭталонныхДанных21") Тогда
			РезультатТестирования.Вставить("Расхождения21");
			Попытка
				РезультатТестирования.Расхождения21 = ТестироватьУказанныйМесяц21(ПараметрыТестирования.ХранилищеЭталонныхДанных21, ПараметрыТестирования.Период, ПараметрыТестирования);
			Исключение
				РезультатТестирования.Отказ = Истина;
				РезультатТестирования.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПоместитьВоВременноеХранилище(РезультатТестирования, ПараметрыТестирования.АдресХранилища);
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		ПоместитьВоВременноеХранилище(РезультатТестирования, ПараметрыТестирования.АдресХранилища);
	КонецЕсли;
	
	Возврат РезультатТестирования;
	
КонецФункции

// Запускает тестирование регламентных заданий по закрытию месяца в фоновом задании.
//
// Параметры:
//	ПараметрыТестирования - Структура - Параметры закрытия месяца: период, организация к закрытию.
//
// ВозвращаемоеЗначение:
//  УникальныйИдентификатор - идентификатор запущенного задания
//	Строка - описание причины, по которой задание не может быть запущено.
//
Функция ЗапуститьТестированиеВФоне(ПараметрыТестирования) Экспорт
	
	// Проверим возможность запуска расчета.
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ПроверитьНаличиеАктивныхРасчетов();
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		Возврат АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	// Запустим расчет.
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыТестирования);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("Обработки.ТестированиеОперацийЗакрытийМесяца.Тестирование");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбщегоНазначения.ВыполнитьМетодКонфигурации",
		ПараметрыЗадания,
		ЗакрытиеМесяцаСервер.ИмяФоновогоЗадания(ИдентификаторРасчета),
		НСтр("ru = 'Тестирование операций закрытие месяца';
			|en = 'Test month-end closing operations'"));
	
	Возврат Задание.УникальныйИдентификатор;
	
КонецФункции

Функция ПараметрыЗапускаТестирования(ВходныеПараметры = Неопределено)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СписокОрганизаций", Новый СписокЗначений);
	ПараметрыЗадания.Вставить("НачалоРасчета", СебестоимостьМинПериод());
	ПараметрыЗадания.Вставить("КонецРасчета", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("ПериодРегистрации", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("Период", ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("КонтрольныеРегистры");
	ПараметрыЗадания.Вставить("АдресХранилища", Неопределено);
	ПараметрыЗадания.Вставить("Этапы", РазделыТестирования().ВыгрузитьЗначения());
	ПараметрыЗадания.Вставить("Разделы", РазделыТестирования().ВыгрузитьЗначения());
	ПараметрыЗадания.Вставить("ЭтапыТестирования", ЭтапыТестирования());
	ПараметрыЗадания.Вставить("ДействиеПриРасхождении", "Остановить");
	ПараметрыЗадания.Вставить("ЛимитРасхождений", 50000);
	ПараметрыЗадания.Вставить("АвтоматическоеТестирование", Ложь);
	
	Если ЗначениеЗаполнено(ВходныеПараметры) Тогда
		
		ЗначениеПараметра = Неопределено;
		СтруктураПараметров = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ВходныеПараметры);
		
		Если СтруктураПараметров.Свойство("НачалоРасчета", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.НачалоРасчета = Дата(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КонецРасчета", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.КонецРасчета = Дата(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Этапы", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.Разделы = СтрРазделить(ЗначениеПараметра, ",");
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Разделы", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.Разделы = СтрРазделить(ЗначениеПараметра, ",");
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЭтапыТестирования", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ЭтапыТестирования = СтрРазделить(ЗначениеПараметра, ",");
			Для каждого ЭтапТестирования Из ПараметрыЗадания.ЭтапыТестирования Цикл
				ЭтапТестирования.Пометка = ЭтапыТестирования.Найти(ЭтапТестирования.Значение) <> Неопределено;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДействиеПриРасхождении", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.ДействиеПриРасхождении = ЗначениеПараметра;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЛимитРасхождений", ЗначениеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗадания.ЛимитРасхождений = Число(СтрЗаменить(ЗначениеПараметра, """", ""));
		КонецЕсли;
		
		ПараметрыЗадания.АвтоматическоеТестирование = Истина;
	
	КонецЕсли;
	
	ПараметрыЗадания.КонтрольныеРегистры = КонтрольныеРегистры(ПараметрыЗадания.Разделы);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

#Область НастройкиТестирования

// Список этапов тестирования, которые могут использоваться при тестировании.
// Для них будут скинуты границы перед началом обработки тестирования и выполнены соответствующие задания из закрытия
// месяца в процессе обработки.
//
// Возвращаемое значение:
// СписокЗначений - список этапов, для которых может проводиться тестирование.
//
Функция ЭтапыДляТестирования() Экспорт
	
	ЭтапыДляТестирования = Новый СписокЗначений;
	ЭтапыДляТестирования.Добавить("ВзаиморасчетыСПартнерами", " " + НСтр("ru = 'Взаиморасчеты с партнерами';
																		|en = 'Mutual settlements with partners'"), Истина);
	ЭтапыДляТестирования.Добавить("Себестоимость", " " + НСтр("ru = 'Себестоимость';
																|en = 'Cost'"), Истина);
	ЭтапыДляТестирования.Добавить("НДС", " " + НСтр("ru = 'Распределение НДС';
													|en = 'VAT allocation'"), Истина);
	//++ НЕ УТ
	ЭтапыДляТестирования.Добавить("УСН", " " + НСтр("ru = 'Отражение доходов и расходов при УСН';
													|en = 'Record income and expenses with STS'"), Истина);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		ЭтапыДляТестирования.Добавить("РеглУчет", " " + НСтр("ru = 'Отражение в регл. учете';
															|en = 'Record in compliance accounting'"), Истина);
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		ЭтапыДляТестирования.Добавить("МеждународныйУчет", " " + НСтр("ru = 'Отражение в международном учете';
																		|en = 'Record in international accounting'"), Истина);
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат ЭтапыДляТестирования;
	
КонецФункции

Функция РазделыТестирования() Экспорт
	
	РазделыТестирования = Новый СписокЗначений;
	РазделыТестирования.Добавить("ВзаиморасчетыСПартнерами", " " + НСтр("ru = 'Взаиморасчеты с партнерами';
																		|en = 'Mutual settlements with partners'"), Истина);
	РазделыТестирования.Добавить("Себестоимость", " " + НСтр("ru = 'Себестоимость';
															|en = 'Cost'"), Истина);
	РазделыТестирования.Добавить("НДС", " " + НСтр("ru = 'Распределение НДС';
													|en = 'VAT allocation'"), Истина);
	//++ НЕ УТ
	РазделыТестирования.Добавить("УСН", " " + НСтр("ru = 'Отражение доходов и расходов при УСН';
													|en = 'Record income and expenses with STS'"), Истина);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		РазделыТестирования.Добавить("РеглУчет", " " + НСтр("ru = 'Отражение в регл. учете';
															|en = 'Record in compliance accounting'"), Истина);
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		РазделыТестирования.Добавить("МеждународныйУчет", " " + НСтр("ru = 'Отражение в международном учете';
																	|en = 'Record in international accounting'"), Истина);
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат РазделыТестирования;
	
КонецФункции

Функция ЭтапыТестирования() Экспорт
	
	ЭтапыТестирования = Новый СписокЗначений;
	// По умолчанию всегда закрываем месяц:
	ЭтапыТестирования.Добавить("ПерезакрытьМесяц", " " + НСтр("ru = 'Перезакрытие месяца';
																|en = 'Month-end reclosing'"), Истина);
	// Если отключена опция новых взаиморасчетов, по умолчанию будет еще сравнивать данные контрольных регистров и после включения опции новых взаиморасчетов:
	ЭтапыТестирования.Добавить("ПереходНаНовыеВзаиморасчеты",
		" " + НСтр("ru = 'Переход на новые взаиморасчеты и перезакрытие месяца';
					|en = 'Transfer to new mutual settlements and repeated month-end closing'"),
		Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	// Если включена опция новых взаиморасчетов, по умолчанию будет еще сравнивать данные контрольных регистров после перезаполнения новых взаиморасчетов:
	ЭтапыТестирования.Добавить("ПерезаполнитьНовыеВзаиморасчеты",
		" " + НСтр("ru = 'Перезаполнение новых взаиморасчетов и перезакрытие месяца';
					|en = 'Refill new mutual settlements and repeated month-end closing'"),
		ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		
	Возврат ЭтапыТестирования;
	
КонецФункции

// Список регистров, по которым контролируется движения до выполнения закрытия месяца и после.
// В случае обнаружения различий, они фиксируются и выводятся в отчет "Результаты тестирования".
//
// ВозвращаемоеЗначение:
//	Массив - массив имен метаданных.
Функция КонтрольныеРегистры(ВыбранныеРазделы = Неопределено) Экспорт
	
	Если ВыбранныеРазделы = Неопределено Тогда
		ВыбранныеРазделы = РазделыТестирования().ВыгрузитьЗначения();
	КонецЕсли;
	
	РегистрыКонтроля = Новый Массив;
	
	Если ВыбранныеРазделы.Найти("ВзаиморасчетыСПартнерами") <> Неопределено Тогда // Взаиморасчеты
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
		Иначе
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
			РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
		КонецЕсли;
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	КонецЕсли;
	
	Если ВыбранныеРазделы.Найти("Себестоимость") <> Неопределено Тогда // Себестоимость
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ФинансовыеРезультаты.ПолноеИмя());
		
		// ПартионныйУчет
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.ПолноеИмя());
		//++ НЕ УТ
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыСведений.ДолиСписанияКосвенныхРасходов.ПолноеИмя());
		//-- НЕ УТ
	КонецЕсли;
	
	//++ НЕ УТ
	Если ВыбранныеРазделы.Найти("УСН") <> Неопределено Тогда //УСН
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСН.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНТовары.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНОСиНМА.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходовРаздел2.ПолноеИмя());
	КонецЕсли;
	//-- НЕ УТ
	
	Если ВыбранныеРазделы.Найти("НДС") <> Неопределено Тогда //НДС
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыСведений.ДанныеОснованийСчетовФактур.ПолноеИмя());
	КонецЕсли;
	
	//++ НЕ УТ
	Если ВыбранныеРазделы.Найти("РеглУчет") <> Неопределено Тогда //Регл. учет
		РегистрыКонтроля.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если ВыбранныеРазделы.Найти("МеждународныйУчет") <> Неопределено Тогда //Международный учет
		РегистрыКонтроля.Добавить(Метаданные.РегистрыБухгалтерии.Международный.ПолноеИмя());
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат РегистрыКонтроля;
	
КонецФункции

Функция КонтрольныеРегистры_21_21()
	
	РегистрыКонтроля = Новый Массив;
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ФинансовыеРезультаты.ПолноеИмя());
	//++ НЕ УТ
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолноеИмя());
	//-- НЕ УТ
	Возврат РегистрыКонтроля;
КонецФункции

Функция КонтрольныеРегистры_21_22()
	
	РегистрыКонтроля = Новый Массив;
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	//++ НЕ УТ
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());
	//-- НЕ УТ
	Возврат РегистрыКонтроля;
КонецФункции

Функция ДействияПриРасхождениях() Экспорт
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.Добавить("Продолжить", НСтр("ru = 'Продолжить тестирование';
												|en = 'Continue testing'"));
	СписокВозврата.Добавить("Остановить", НСтр("ru = 'Остановить тестирование';
												|en = 'Stop testing'"));
	СписокВозврата.Добавить("ОстановитьУсловие", НСтр("ru = 'Остановить тестирование при достижении лимита расхождений';
														|en = 'Stop testing when reaching discrepancy limit'"));
	СписокВозврата.Добавить("РазбитьФайл", НСтр("ru = 'При достижении лимита расхождений разбивать файл расхождений';
												|en = 'Split discrepancy file when reaching discrepancy limit'"));
	
	Возврат СписокВозврата;
	
КонецФункции

// Возвращает период самого первого движения по регистру "Себестоимость товаров".
// 
// ВозвращаемоеЗначение:
//	Период - Дата.
Функция СебестоимостьМинПериод() Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МИНИМУМ(ДД.Период) КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДД
	|ИМЕЮЩИЕ
	|	НЕ (МИНИМУМ(ДД.Период) ЕСТЬ NULL)
	|");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Период = НачалоМесяца(ТекущаяДатаСеанса());
	Иначе
		Период = НачалоМесяца(Результат.Выгрузить()[0].Период);
	КонецЕсли;
	
	Возврат Период;
КонецФункции

#КонецОбласти // НастройкиТестирования

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ТестироватьЗаПериод(ПараметрыОбработки)
	
	РезультатТестирования = Новый Структура("Отказ", Ложь);
	
	Для каждого ЭтапТестирования Из ПараметрыОбработки.ЭтапыТестирования Цикл
		
		Если Не ЭтапТестирования.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСравненияДанных = Тестирование.ПараметрыЗапроса(ПараметрыОбработки.НачалоРасчета);
		ПараметрыСравненияДанных.КонецПериода = ПараметрыОбработки.КонецРасчета;
		
		ВременныеТаблицыЭталонныхДанных = Тестирование.СохранитьЭталонныеДанные(ПараметрыОбработки.КонтрольныеРегистры, ПараметрыСравненияДанных);
		
		Если ЭтапТестирования.Значение = "ПереходНаНовыеВзаиморасчеты" Тогда
			
			ПараметрыЗадания = Новый Структура("Дата", ПараметрыОбработки.НачалоРасчета);
			ОперативныеВзаиморасчетыСервер.ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(ПараметрыЗадания, Неопределено);
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки);
			
		КонецЕсли;
		
		Если ЭтапТестирования.Значение = "ПерезаполнитьНовыеВзаиморасчеты" Тогда
			
			ОперативныеВзаиморасчетыСервер.ЗаполнитьПоВсемРасчетам();
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки);
			
		КонецЕсли;
		
		Если ЭтапТестирования.Значение = "ПерезакрытьМесяц" Тогда
			
			ЗакрытиеМесяцаСДаты(ПараметрыОбработки);
			
		КонецЕсли;
		
		Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицыЭталонныхДанных, ПараметрыОбработки.КонтрольныеРегистры, ПараметрыСравненияДанных);
		
		ДанныеРасхожденийПоРазделам = ДанныеРасхожденийПоРазделам(ЭтапТестирования.Значение, Расхождения);
		
		КлючЭтапа = "ДанныеРасхождений";
		Если Не ЭтапТестирования.Значение = "ПерезакрытьМесяц" Тогда
			КлючЭтапа = КлючЭтапа + "_" + ЭтапТестирования.Значение;
		КонецЕсли;
		РезультатТестирования.Вставить(КлючЭтапа, ДанныеРасхожденийПоРазделам);
		
		Если Расхождения.Получить("КоличествоРасхождений") > 0 И ПараметрыОбработки.ДействиеПриРасхождении = "Остановить" Тогда
			Прервать;
		КонецЕсли;
		
		Если Расхождения.Получить("КоличествоРасхождений") > ПараметрыОбработки.ЛимитРасхождений И ПараметрыОбработки.ДействиеПриРасхождении = "ОстановитьУсловие" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоРасхождений = 0;
	Если РезультатТестирования.Свойство("ДанныеРасхождений_ПереходНаНовыеВзаиморасчеты", КоличествоРасхождений) И КоличествоРасхождений = 0
		И (Не РезультатТестирования.Свойство("ДанныеРасхождений_ПерезаполнитьНовыеВзаиморасчеты", КоличествоРасхождений) Или КоличествоРасхождений = 0) Тогда
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Ложь);
	КонецЕсли;
	
	Возврат РезультатТестирования;
	
КонецФункции

Функция ТестироватьДоКонца(ПараметрыТестирования)
	
	РезультатТестирования = Новый Структура("Отказ, ДанныеРасхождений", Ложь, Новый Соответствие);
	ТестируемыйМесяц = ПараметрыТестирования.НачалоРасчета;
	КонецТестирования = ПараметрыТестирования.КонецРасчета;
	
	ФайлОтчета = Неопределено;
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	
	ТолькоСравнитьС21 = ПараметрыТестирования.ТолькоСравнитьС21;
	СравнитьС21 = ПараметрыТестирования.Свойство("ХранилищеЭталонныхДанных21");
	ФайлОтчета21 = Неопределено;
	ПутьКФайлу21 = ПолучитьИмяВременногоФайла("xml");
	
	ПараметрыЗапуска = ПараметрыЗапускаТестирования();
	Если ПараметрыТестирования.Свойство("Этапы") Тогда
		Этапы = СтрРазделить(ПараметрыТестирования.Этапы, ",");
		ПараметрыЗапуска.Вставить("Этапы", Этапы);
	КонецЕсли;
	Если ПараметрыТестирования.Свойство("СравнениеВзаиморасчетов") Тогда
		ПараметрыЗапуска.ВыполнятьСравнениеСНовойАрхитектуройВзаиморасчетов = ПараметрыТестирования.СравнениеВзаиморасчетов;
	КонецЕсли;
	
	Пока ТестируемыйМесяц < КонецТестирования Цикл
		ПараметрыЗапуска.Период = ТестируемыйМесяц;
		ПараметрыЗапуска.ПериодРегистрации = ТестируемыйМесяц;
		Расхождения = Неопределено;
		
		Если Не ТолькоСравнитьС21 Тогда
			Попытка
				Расхождения = ТестироватьУказанныйМесяц(ТестируемыйМесяц, ПараметрыЗапуска);
			Исключение
				РезультатТестирования.Отказ = Истина;
				СообщитьОбОшибке();
				ВызватьИсключение;
			КонецПопытки;
			ЗафиксироватьРасхождения(ФайлОтчета, Расхождения, ТестируемыйМесяц, ПутьКФайлу);
			ЗаполнитьДанныеРасхожденийПоЭтапамЗаПериод(РезультатТестирования.ДанныеРасхождений, Расхождения, ТестируемыйМесяц);
			Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0
				И ПараметрыТестирования.ОстанавливатьсяПриРасхождениях Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если СравнитьС21 Тогда
			Попытка
				Расхождения = ТестироватьУказанныйМесяц21(ПараметрыТестирования.ХранилищеЭталонныхДанных21, ТестируемыйМесяц, ПараметрыЗапуска);
			Исключение
				РезультатТестирования.Отказ = Истина;
				СообщитьОбОшибке();
				ВызватьИсключение;
			КонецПопытки;
			ЗафиксироватьРасхождения(ФайлОтчета21, Расхождения, ТестируемыйМесяц, ПутьКФайлу21);
			
			Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0
				И ПараметрыТестирования.ОстанавливатьсяПриРасхождениях Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ТестируемыйМесяц = КонецМесяца(ТестируемыйМесяц) + 1;
	КонецЦикла;
	
	ЗаписатьФайлОтчета(ФайлОтчета);
	Если ФайлОтчета <> Неопределено Тогда
		ДанныеТестирования = Новый ДвоичныеДанные(ПутьКФайлу);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
		РезультатТестирования.Вставить("АдресХранилища", АдресХранилища);
		РезультатТестирования.Вставить("ЕстьРасхождения", Истина);
		УдалитьФайлы(ПутьКФайлу);
	КонецЕсли;
	
	Для каждого ДанныеРасхожденийЭтапа Из РезультатТестирования.ДанныеРасхождений Цикл
		
		ЗаписатьФайлОтчета(ДанныеРасхожденийЭтапа.Значение.Файл);
		ДанныеТестирования = Новый ДвоичныеДанные(ДанныеРасхожденийЭтапа.Значение.ПутьКФайлу);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
		ДанныеРасхожденийЭтапа.Значение.Вставить("АдресХранилища", АдресХранилища);
		УдалитьФайлы(ДанныеРасхожденийЭтапа.Значение.ПутьКФайлу);
		ДанныеРасхожденийЭтапа.Значение.Удалить("Файл");
		
	КонецЦикла;
	
	Если СравнитьС21 Тогда
		ЗаписатьФайлОтчета(ФайлОтчета21);
		Если ФайлОтчета21 <> Неопределено Тогда
			ДанныеТестирования = Новый ДвоичныеДанные(ПутьКФайлу21);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
			РезультатТестирования.Вставить("АдресХранилища21", АдресХранилища);
			РезультатТестирования.Вставить("ЕстьРасхождения21", Истина);
			УдалитьФайлы(ПутьКФайлу21);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатТестирования.Свойство("ЕстьРасхождения") И РезультатТестирования.ЕстьРасхождения = Истина Тогда
		Возврат РезультатТестирования; // чтобы избежать изменения данных после перерасчета закрытия месяца в старых взаиморасчетах
	КонецЕсли;
	
	Если ПараметрыЗапуска.ВыполнятьСравнениеСНовойАрхитектуройВзаиморасчетов И Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		ТестируемыйМесяц = ПараметрыТестирования.НачалоРасчета;
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Дата", ТестируемыйМесяц);
		ФайлОтчета = Неопределено;
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
		
		ОперативныеВзаиморасчетыСервер.ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(ПараметрыЗадания,Неопределено);
		
		РезультатТестирования.Вставить("РасхожденияПоНовымВзаиморасчетам", Новый Соответствие);
		
		Пока ТестируемыйМесяц < КонецТестирования Цикл
			
			ПараметрыЗапуска.Период = ТестируемыйМесяц;
			ПараметрыЗапуска.ПериодРегистрации = ТестируемыйМесяц;
			Расхождения = Неопределено;
			
			Попытка
				Расхождения = ТестироватьУказанныйМесяц(ТестируемыйМесяц, ПараметрыЗапуска);
			Исключение
				РезультатТестирования.Отказ = Истина;
				СообщитьОбОшибке();
				ВызватьИсключение;
			КонецПопытки;
			ЗафиксироватьРасхождения(ФайлОтчета, Расхождения, ТестируемыйМесяц, ПутьКФайлу);
			ЗаполнитьДанныеРасхожденийПоЭтапамЗаПериод(РезультатТестирования.РасхожденияПоНовымВзаиморасчетам, Расхождения, ТестируемыйМесяц);
			Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0
				И ПараметрыТестирования.ОстанавливатьсяПриРасхождениях Тогда
				Прервать;
			КонецЕсли;
			
			ТестируемыйМесяц = КонецМесяца(ТестируемыйМесяц) + 1;
			
		КонецЦикла;
		
		ЗаписатьФайлОтчета(ФайлОтчета);
		Если ФайлОтчета <> Неопределено Тогда
			ДанныеТестирования = Новый ДвоичныеДанные(ПутьКФайлу);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
			РезультатТестирования.Вставить("АдресХранилищаНовыеРасчеты", АдресХранилища);
			РезультатТестирования.Вставить("ЕстьРасхожденияНовыеРасчеты", Истина);
			УдалитьФайлы(ПутьКФайлу);
		КонецЕсли;
		
		Для каждого ДанныеРасхожденийЭтапа из РезультатТестирования.РасхожденияПоНовымВзаиморасчетам Цикл
			
			ЗаписатьФайлОтчета(ДанныеРасхожденийЭтапа.Значение.Файл);
			ДанныеТестирования = Новый ДвоичныеДанные(ДанныеРасхожденийЭтапа.Значение.ПутьКФайлу);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
			ДанныеРасхожденийЭтапа.Значение.Вставить("АдресХранилища", АдресХранилища);
			УдалитьФайлы(ДанныеРасхожденийЭтапа.Значение.ПутьКФайлу);
			ДанныеРасхожденийЭтапа.Значение.Удалить("Файл");
			
		КонецЦикла;
		
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Ложь);
		
	КонецЕсли;
	
	Возврат РезультатТестирования;
	
КонецФункции

Процедура СообщитьОбОшибке()
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование.Ошибка тестирования';
									|en = 'Test.Test error'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПроцедуры

Процедура ЗафиксироватьРасхождения(ФайлОтчета, Расхождения, ТекущийМесяц, ПутьКФайлу)
	Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0 Тогда
		Если ФайлОтчета = Неопределено Тогда
			ФайлОтчета = СоздатьФайлОтчета(ПутьКФайлу);
		КонецЕсли;
		ФайлОтчета.ЗаписатьНачалоЭлемента("Период");
		СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ТекущийМесяц);
		ФайлОтчета.ЗаписатьТекст(СтрокаXML);
		Для Каждого Строка Из Расхождения Цикл
			Если Строка.Ключ = "КоличествоРасхождений" Тогда
				Продолжить;
			КонецЕсли;
			
			ФайлОтчета.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
			ФайлОтчета.ЗаписатьТекст(СтрокаXML);
			
			ФайлОтчета.ЗаписатьНачалоЭлемента("Записи");
			ФайлОтчета.ЗаписатьТекст(Строка.Значение.Записи);
			ФайлОтчета.ЗаписатьКонецЭлемента(); // записи

			ФайлОтчета.ЗаписатьКонецЭлемента(); // имя регистра
		КонецЦикла;
		ФайлОтчета.ЗаписатьКонецЭлемента(); // Период
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДанныеРасхожденийПоЭтапам(ДанныеЗаполнения, Расхождения)
	
	ДанныеЗаполнения = Новый Соответствие;
	
	РегистрыВзаиморасчетов = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВзаиморасчетыСПартнерами"));
	РегистрыНДС = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("НДС"));
	//++ НЕ УТ
	РегистрыУСН = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("УСН"));
	РегистрыРегл = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РеглУчет"));
	//-- НЕ УТ
	//++ НЕ УТКА
	РегистрыМеждународные = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("МеждународныйУчет"));
	//-- НЕ УТКА
	
	Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0 Тогда
		
		Для каждого Строка Из Расхождения Цикл
			
			Если Строка.Ключ = "КоличествоРасхождений" Тогда
				Продолжить;
			КонецЕсли;
			ИмяКонтрольногоРегистра = Строка.Ключ;
			
			ЭтапТекущегоРасхождения = Неопределено;
			МетаданныеРасхождения = Неопределено;
			Если РегистрыВзаиморасчетов.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "ВзаиморасчетыСПартнерами";
			ИначеЕсли РегистрыНДС.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "НДС";
			//++ НЕ УТ
			ИначеЕсли РегистрыУСН.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "УСН";
			ИначеЕсли РегистрыРегл.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "РеглУчет";
			//-- НЕ УТ
			//++ НЕ УТКА
			ИначеЕсли РегистрыМеждународные.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "МеждународныйУчет";
			//-- НЕ УТКА
			Иначе
				ЭтапТекущегоРасхождения = "Себестоимость";
			КонецЕсли;
			
			ДанныеТекущегоЭтапа = Неопределено;
			Если ДанныеЗаполнения.Получить(ЭтапТекущегоРасхождения) = Неопределено Тогда
				ДанныеЗаполнения.Вставить(ЭтапТекущегоРасхождения, Новый Соответствие);
			КонецЕсли;
			ДанныеТекущегоЭтапа = ДанныеЗаполнения.Получить(ЭтапТекущегоРасхождения);
			ДанныеТекущегоЭтапа.Вставить(ИмяКонтрольногоРегистра, Строка.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеРасхожденийПоРазделам(ЭтапТестирования, Расхождения)
	
	ДанныеРасхождений = Новый Соответствие;
	
	СоответствиеРазделовРегистрам = Новый Соответствие;
	Для каждого Раздел Из РазделыТестирования().ВыгрузитьЗначения() Цикл
		СоответствиеРазделовРегистрам.Вставить(Раздел, КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Раздел)));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0 Тогда
		
		Для каждого Строка Из Расхождения Цикл
			
			Если Строка.Ключ = "КоличествоРасхождений" Тогда
				Продолжить;
			КонецЕсли;
			ИмяКонтрольногоРегистра = Строка.Ключ;
			
			РазделТекущегоРасхождения = "Себестоимость";
			МетаданныеРасхождения = Неопределено;
			Для каждого СоответствиеРазделаИРегистра Из СоответствиеРазделовРегистрам Цикл
				Если СоответствиеРазделаИРегистра.Значение.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
					РазделТекущегоРасхождения = СоответствиеРазделаИРегистра.Ключ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			МетаданныеРасхождения = МетаданныеРасхожденияПоРазделу(РазделТекущегоРасхождения);
			
			Если ДанныеРасхождений.Получить(РазделТекущегоРасхождения) = Неопределено Тогда
				
				СтруктураРасхожденийРаздела = СтруктураРасхожденийРаздела(МетаданныеРасхождения);
				ДанныеРасхождений.Вставить(РазделТекущегоРасхождения, СтруктураРасхожденийРаздела);
			КонецЕсли;
			ДанныеТекущегоРаздела = ДанныеРасхождений.Получить(РазделТекущегоРасхождения);
			
			ДанныеТекущегоРаздела.Файл.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ИмяКонтрольногоРегистра); // имя регистра
			ДанныеТекущегоРаздела.Файл.ЗаписатьТекст(СтрокаXML);
			
			ДанныеТекущегоРаздела.Файл.ЗаписатьНачалоЭлемента("Записи");
			ДанныеТекущегоРаздела.Файл.ЗаписатьТекст(Строка.Значение.Записи);
			ДанныеТекущегоРаздела.Файл.ЗаписатьКонецЭлемента(); // записи

			ДанныеТекущегоРаздела.Файл.ЗаписатьКонецЭлемента(); // имя регистра
			
			ДанныеТекущегоРаздела.Количество = ДанныеТекущегоРаздела.Количество + Строка.Значение.Количество;
			
		КонецЦикла;
		
		Для каждого ДанныеРасхожденийРаздела Из ДанныеРасхождений Цикл
		
			ЗаписатьФайлОтчета(ДанныеРасхожденийРаздела.Значение.Файл);
			ДанныеТестирования = Новый ДвоичныеДанные(ДанныеРасхожденийРаздела.Значение.ПутьКФайлу);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
			ДанныеРасхожденийРаздела.Значение.Вставить("АдресХранилища", АдресХранилища);
			УдалитьФайлы(ДанныеРасхожденийРаздела.Значение.ПутьКФайлу);
			ДанныеРасхожденийРаздела.Значение.Удалить("Файл");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеРасхождений;
	
КонецФункции

Функция СтруктураРасхожденийРаздела(МетаданныеРасхождения)
	
	СтруктураВозврата = Новый Структура;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	ФайлОтчета = СоздатьФайлОтчета(ПутьКФайлу);
	СтруктураВозврата.Вставить("Количество", 0);
	СтруктураВозврата.Вставить("Файл", ФайлОтчета);
	СтруктураВозврата.Вставить("ОбъектМетаданных", МетаданныеРасхождения);
	СтруктураВозврата.Вставить("ПутьКФайлу", ПутьКФайлу);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МетаданныеРасхожденияПоРазделу(Раздел)
	
	СоответствиеМетаданныхИРазделов = Новый Соответствие;
	СоответствиеМетаданныхИРазделов.Вставить("Себестоимость", "РегистрыНакопления.СебестоимостьТоваров");
	СоответствиеМетаданныхИРазделов.Вставить("ВзаиморасчетыСПартнерами", "РегистрыНакопления.РасчетыСПоставщиками");
	СоответствиеМетаданныхИРазделов.Вставить("НДС", "РегистрыНакопления.НДСПредъявленный");
	//++ НЕ УТ
	СоответствиеМетаданныхИРазделов.Вставить("УСН", "РегистрыНакопления.РасходыПриУСН");
	СоответствиеМетаданныхИРазделов.Вставить("РеглУчет", "РегистрыБухгалтерии.Хозрасчетный");
	//-- НЕ УТ
	//++ НЕ УТКА
	СоответствиеМетаданныхИРазделов.Вставить("МеждународныйУчет", "РегистрыБухгалтерии.Международный");
	//-- НЕ УТКА
	
	Возврат СоответствиеМетаданныхИРазделов.Получить(Раздел);
	
КонецФункции

Функция РазобратьСтрокуВПараметры(ПараметрЗапуска)
	
	СтруктураПараметров = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПараметрЗапуска);
	
	Если СтруктураПараметров.Свойство("РабочийКаталог") Тогда
		РабочийКаталог = СтруктураПараметров.РабочийКаталог;
	Иначе
		Комментарий = НСтр("ru = 'Не заполнен обязательный параметр ""РабочийКаталог""';
							|en = 'Fill in the required parameter ""WorkingDirectory""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование.Ошибка тестирования';
										|en = 'Test.Test error'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			Комментарий);
		ВызватьИсключение Комментарий;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("НачалоРасчета") Тогда
		НачалоРасчета = Дата(СтруктураПараметров.НачалоРасчета);
	Иначе
		НачалоРасчета = СебестоимостьМинПериод();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("КонецРасчета") Тогда
		КонецРасчета = Дата(СтруктураПараметров.КонецРасчета);
	Иначе
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса()) + 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОстанавливатьсяПриРасхождениях") Тогда
		ОстанавливатьсяПриРасхождениях = Булево(СтруктураПараметров.ОстанавливатьсяПриРасхождениях);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ТолькоСравнитьС21") Тогда
		ТолькоСравнитьС21 = Булево(СтруктураПараметров.ТолькоСравнитьС21);
	Иначе
		ТолькоСравнитьС21 = Ложь;
	КонецЕсли;
	ПараметрыТестирования = Новый Структура();
	ПараметрыТестирования.Вставить("НачалоРасчета", НачалоРасчета);
	ПараметрыТестирования.Вставить("КонецРасчета", КонецРасчета);
	ПараметрыТестирования.Вставить("РабочийКаталог", РабочийКаталог);
	ПараметрыТестирования.Вставить("ОстанавливатьсяПриРасхождениях", ОстанавливатьсяПриРасхождениях);
	ПараметрыТестирования.Вставить("ТолькоСравнитьС21", ТолькоСравнитьС21);
	Если СтруктураПараметров.Свойство("Этапы") И ЗначениеЗаполнено(СтруктураПараметров.Этапы) Тогда
		ПараметрыТестирования.Вставить("Этапы", СтруктураПараметров.Этапы);
	КонецЕсли;
	
	Возврат ПараметрыТестирования;
КонецФункции

#Область ЗакрытиеМесяца

Процедура ЗакрытиеМесяцаСДаты(Параметры)
	
	УстановитьЗаданияКРасчетуНаДату(Параметры.НачалоРасчета, Параметры.Разделы);
	ТестируемыйМесяц = Параметры.НачалоРасчета;
	
	Пока ТестируемыйМесяц <= Параметры.КонецРасчета Цикл
		
		ЗакрытиеМесяцаСервер.ТестированиеЗакрытияМесяца(ТестируемыйМесяц);
		
		ТестируемыйМесяц = КонецМесяца(ТестируемыйМесяц) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТестироватьУказанныйМесяц(Месяц, ПараметрыРасчета)
	КонтрольныеРегистры = КонтрольныеРегистры(ПараметрыРасчета.Этапы);
	Расхождения = Неопределено;
	
	ВременныеТаблицы = Тестирование.СохранитьЭталонныеДанные(КонтрольныеРегистры, Месяц);
	
	УстановитьЗаданияКРасчетуНаДату(Месяц, ПараметрыРасчета.Этапы);
	
	ЗакрытиеМесяцаСервер.ТестированиеЗакрытияМесяца(Месяц);
	
	Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицы, КонтрольныеРегистры, Месяц);
	
	Возврат Расхождения;
КонецФункции

Функция ТестироватьУказанныйМесяц21(ХранилищеЭталонныхДанных21, Месяц, ПараметрыРасчета)
	ПартионныйУчетВерсии22 = ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22");
	Если ПартионныйУчетВерсии22 Тогда
		КонтрольныеРегистры = КонтрольныеРегистры_21_22();
	Иначе
		КонтрольныеРегистры = КонтрольныеРегистры_21_21();
	КонецЕсли;
	
	ДопустимоеОтклонение = 5;
	
	Расхождения = Неопределено;
	
	ДополнительныеПараметрыСравнения = Новый Структура;
	
	ТекстЗапроса = "";
	СохранитьЭталонныеДанные = Истина;
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НачалоПериода", ?(ЗначениеЗаполнено(Месяц), НачалоМесяца(Месяц), Дата("00010101000000")));
	ПараметрыЗапроса.Вставить("КонецПериода", ?(ЗначениеЗаполнено(Месяц), КонецМесяца(Месяц), Дата("39991212235959")));
	ПараметрыЗапроса.Вставить("МассивРегистраторов", Новый Массив());
	ПараметрыЗапроса.Вставить("ОтборПоРегистраторам", Ложь);
	
	Если Лев(ХранилищеЭталонныхДанных21, 6) = "e1cib/" Тогда // если передан адрес хранилища
		ЭталонныеТаблицы = ПолучитьИзВременногоХранилища(ХранилищеЭталонныхДанных21);
		УдалитьИзВременногоХранилища(ХранилищеЭталонныхДанных21);
	Иначе
		ЭталонныеТаблицы = ОбщегоНазначения.ЗначениеИзСтрокиXML(ХранилищеЭталонныхДанных21).Получить();
	КонецЕсли;
	ЗапросДанных = Новый Запрос;
	Для Каждого КонтрольныйРегистр Из КонтрольныеРегистры Цикл
		
		ИмяРегистраПараметр = СтрЗаменить(КонтрольныйРегистр,".","_");
		ЭталоннаяТаблица = ЭталонныеТаблицы[ИмяРегистраПараметр];
		
		СтрокиКонтроля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйРегистр, ".", Ложь);
		ИмяКоллекцииМетаданных = СтрокиКонтроля[0];
		ИмяРегистра = СтрокиКонтроля[1];
		
		Если ИмяКоллекцииМетаданных = "РегистрНакопления" Тогда
			КоллекцияМетаданных = Метаданные.РегистрыНакопления[ИмяРегистра];
		ИначеЕсли ИмяКоллекцииМетаданных = "РегистрСведений" Тогда
			КоллекцияМетаданных = Метаданные.РегистрыСведений[ИмяРегистра];
		КонецЕсли;
		
		ДополнительныеПараметры = Тестирование.ДополнительныеПараметрыФормированияЗапросаСравнения();
		
		Для Каждого Поле Из КоллекцияМетаданных.Измерения Цикл
			Если ЭталоннаяТаблица.Колонки.Найти(Поле.Имя) = Неопределено Тогда
				ДополнительныеПараметры.ИсключаемыеПоля.Вставить(Поле.Имя);
			КонецЕсли;
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Поле.Тип, Тип("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры")) Тогда
				ДополнительныеПараметры.ПоляКлючиКоторыеНужноРазвернуть.Добавить(Поле.Имя);
				Для Каждого МетаАналитика Из Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты Цикл
					ПсевдонимПоля = Поле.Имя + МетаАналитика.Имя;
					Если ЭталоннаяТаблица.Колонки.Найти(ПсевдонимПоля) = Неопределено Тогда
						ДополнительныеПараметры.ИсключаемыеПоля.Вставить(ПсевдонимПоля);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Поле.Тип, Тип("СправочникСсылка.КлючиАналитикиУчетаПартий")) Тогда
				ДополнительныеПараметры.ИсключаемыеПоля.Вставить(Поле.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Поле Из КоллекцияМетаданных.Ресурсы Цикл
			Если ЭталоннаяТаблица.Колонки.Найти(Поле.Имя) = Неопределено Тогда
				ДополнительныеПараметры.ИсключаемыеПоля.Вставить(Поле.Имя);
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеПараметры.СгруппироватьПоИзмерениям = Истина;
		
		ТекстПоРегистру = Тестирование.СформироватьЗапрос(КонтрольныйРегистр, СохранитьЭталонныеДанные, ПараметрыЗапроса.ОтборПоРегистраторам, ДополнительныеПараметры);
		
		Если ИмяРегистраПараметр = "РегистрСведений_СтоимостьТоваров"
			Или ИмяРегистраПараметр = "РегистрНакопления_СебестоимостьТоваров" Тогда
			ДополнительныеПараметры.ЗаменыПолейПосле.Вставить("Стоимость", "Т.Стоимость + Т.СтоимостьЗабалансовая + Т.Трудозатраты + Т.ПостатейныеПостоянныеСНДС");
			ДополнительныеПараметры.ЗаменыПолейПосле.Вставить("СтоимостьБезНДС", "Т.СтоимостьБезНДС + Т.СтоимостьЗабалансовая + Т.Трудозатраты + Т.ПостатейныеПостоянныеБезНДС");
			ДополнительныеПараметры.ЗаменыПолейПосле.Вставить("СтоимостьРегл", "Т.СтоимостьРегл + Т.СтоимостьЗабалансоваяРегл + Т.ДопРасходыРегл + Т.ТрудозатратыРегл + ПостатейныеПостоянныеРегл");
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ИмяРегистраПараметр = "РегистрНакопления_СебестоимостьТоваров"
			Или ИмяРегистраПараметр = "РегистрНакопления_ПартииНезавершенногоПроизводства" Тогда
			ЗаменаРегистратора = "
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА &ПартионныйУчет22
				|			И Т.Период >= &ДатаНачалаПУ22
				|			И ВЫРАЗИТЬ(Т.ВидЗапасов КАК Справочник.ВидыЗапасов).УстарелоНазначение.Заказ ССЫЛКА Документ.ЗаказДавальца
				|			И (Т.Регистратор ССЫЛКА Документ.ОтчетДавальцу
				|				ИЛИ Т.Регистратор ССЫЛКА Документ.ВыпускПродукции)
				|			ТОГДА ЗНАЧЕНИЕ(Документ.ОтчетДавальцу.ПустаяСсылка)
				|		ИНАЧЕ Т.Регистратор
				|	КОНЕЦ
				//|ИЗ РегистрНакопления.ПартииНезавершенногоПроизводства КАК Т
				|";
			ДополнительныеПараметры.ЗаменыПолейДо.Вставить("Регистратор", ЗаменаРегистратора);
			ДополнительныеПараметры.ЗаменыПолейПосле.Вставить("Регистратор", ЗаменаРегистратора);
		КонецЕсли;
		//-- НЕ УТКА
		
		Если ИмяРегистраПараметр = "РегистрНакопления_СебестоимостьТоваров" Тогда
			
			//++ НЕ УТ
			
			ДополнительныеПараметры.ЗаменыПолейДо.Вставить("РазделУчета",  "
			//|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ПартионныйУчет22
			|				И Т.Период >= &ДатаНачалаПУ22
			|				И Т.Регистратор ССЫЛКА Документ.ВыпускПродукции
			|				И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				И ВЫРАЗИТЬ(Т.Регистратор КАК Документ.ВыпускПродукции).ВыпускПоРаспоряжениям
			|				И Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
			|		ИНАЧЕ Т.РазделУчета
			|	КОНЕЦ
			//|ИЗ	РегистрНакопления.СебестоимостьТоваров КАК Т
			|");
			
			ДополнительныеПараметры.УсловияОтбораДо = "
			//|ВЫБРАТЬ 1 ИЗ РегистрНакопления.СебестоимостьТоваров КАК Т ГДЕ
			|	НЕ &ПартионныйУчет22
			|	ИЛИ Период < &ДатаНачалаПУ22
			|	ИЛИ НЕ (Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика
			|		И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|		И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты))";
			
			//-- НЕ УТ
			
			ДополнительныеПараметры.УсловияОтбораПосле = "
			|	РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)";
			
			//++ НЕ УТ
			ДополнительныеПараметры.УсловияОтбораПосле = ДополнительныеПараметры.УсловияОтбораПосле + "
			|	И (НЕ &ПартионныйУчет22
			|		ИЛИ Период < &ДатаНачалаПУ22
			|		ИЛИ (НЕ (Регистратор ССЫЛКА Документ.ОтчетПереработчика
			|				И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
			|				И КорРазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство))
			|			И НЕ (Регистратор ССЫЛКА Документ.ОтчетПереработчика
			|				И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство))
			|			И НЕ (Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика
			|				И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство))))";
			//-- НЕ УТ
		КонецЕсли;
		
		Если ИмяРегистраПараметр = "РегистрНакопления_ПрочиеАктивыПассивы" Тогда
			ДополнительныеПараметры.УсловияОтбораПосле = "
			//|ВЫБРАТЬ 1 ИЗ РегистрНакопления.ПрочиеАктивыПассивы КАК Т ГДЕ
			|	ВидИсточника = ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ПустаяСсылка)";
			ДополнительныеПараметры.ИсключаемыеПоля.Вставить("ВидДвижения");
			ЗаменаСуммы = "
			//|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|			ТОГДА -Т.Сумма
			|		ИНАЧЕ Т.Сумма
			|	КОНЕЦ
			//|ИЗ	РегистрНакопления.ПрочиеАктивыПассивы КАК Т
			|";
			ДополнительныеПараметры.ЗаменыПолейДо.Вставить("Сумма", ЗаменаСуммы);
			ДополнительныеПараметры.ЗаменыПолейПосле.Вставить("Сумма", ЗаменаСуммы);
		КонецЕсли;
		
		Если ИмяРегистраПараметр = "РегистрНакопления_Закупки" Тогда
			ДополнительныеПараметры.ЗаменыПолейДо.Вставить("Партнер","
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|		ИНАЧЕ Т.Партнер
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.Закупки КАК Т
				|");
			 ДополнительныеПараметры.ЗаменыПолейДо.Вставить("Контрагент","
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ Т.Контрагент
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.Закупки КАК Т
				|");
			ДополнительныеПараметры.ЗаменыПолейДо.Вставить("Договор","
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
				|		ИНАЧЕ Т.Договор
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.Закупки КАК Т
				|");
		КонецЕсли;
		
		Если ИмяРегистраПараметр = "РегистрНакопления_ФинансовыеРезультаты" Тогда
			ТекстЗамены = "
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.СтатьяДоходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы)
				|			ИЛИ Т.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				|		ИНАЧЕ Т.Подразделение
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.ФинансовыеРезультаты КАК Т
				|";
			ДополнительныеПараметры.ЗаменыПолейДо.Вставить("Подразделение", ТекстЗамены);
			ДополнительныеПараметры.ЗаменыПолейПосле.Вставить("Подразделение", ТекстЗамены);
		КонецЕсли;
		Если ИмяРегистраПараметр = "РегистрНакопления_ПрочиеДоходы" Тогда
			ТекстЗамены = "
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.СтатьяДоходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				|		ИНАЧЕ Т.Подразделение
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.ПрочиеДоходы КАК Т
				|";
			ДополнительныеПараметры.ЗаменыПолейДо.Вставить("Подразделение", ТекстЗамены);
			ДополнительныеПараметры.ЗаменыПолейПосле.Вставить("Подразделение", ТекстЗамены);
		КонецЕсли;
		Если ИмяРегистраПараметр = "РегистрНакопления_ПрочиеРасходы" Тогда
			ТекстЗамены = "
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				|		ИНАЧЕ Т.Подразделение
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.ПрочиеРасходы КАК Т
				|";
			ДополнительныеПараметры.ЗаменыПолейДо.Вставить("Подразделение", ТекстЗамены);
			ДополнительныеПараметры.ЗаменыПолейПосле.Вставить("Подразделение", ТекстЗамены);
		КонецЕсли;
		ТекстПоРегистру = СтрЗаменить(ТекстПоРегистру, КонтрольныйРегистр, "&" + ИмяРегистраПараметр);
		ТекстЗапроса = ТекстЗапроса + ТекстПоРегистру;
		ЗапросДанных.УстановитьПараметр(ИмяРегистраПараметр, ЭталоннаяТаблица);
		
		ДополнительныеПараметры.ДопустимоеОтклонение = ДопустимоеОтклонение;
		
		ДополнительныеПараметрыСравнения.Вставить(ИмяРегистраПараметр, ДополнительныеПараметры);
		
	КонецЦикла;
	
	ЗапросДанных.Текст = ТекстЗапроса;
	ЗапросДанных.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросДанных.УстановитьПараметр("МассивРегистраторов", ПараметрыЗапроса.МассивРегистраторов);
	ЗапросДанных.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	ЗапросДанных.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование.Начато сохранение эталонных данных ERP 2.1';
									|en = 'Testing.Started saving 1C:ERP 2.1 reference data'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ЗапросДанных.ВыполнитьПакет();
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование.Завершено сохранение эталонных данных ERP 2.1';
									|en = 'Testing.Finished saving 1C:ERP 2.1 reference data'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицы, КонтрольныеРегистры, Месяц,,ДополнительныеПараметрыСравнения);
	
	Возврат Расхождения;
КонецФункции

Процедура УстановитьЗаданияКРасчетуНаДату(Период, ВыбранныеЭтапы = Неопределено)
	
	Если ВыбранныеЭтапы = Неопределено Тогда
		ВыбранныеЭтапы = ЭтапыДляТестирования().ВыгрузитьЗначения();
	КонецЕсли;
	
	Для Каждого ЭтапРасчета Из ВыбранныеЭтапы Цикл
		
		Если ЭтапРасчета = "Себестоимость" Тогда
			РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(Период); // по всем организациям
		КонецЕсли;
		
		Если ЭтапРасчета = "ВзаиморасчетыСПартнерами" Тогда
			Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,,, Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
			Иначе
				РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьЗаписьРегистра(Период); // по всем организациям
				РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьЗаписьРегистра(Период); // по всем организациям
			КонецЕсли;
		КонецЕсли;
			
		Если ЭтапРасчета = "НДС" Тогда
			
			// Задания к распределению НДС
			ВыборкаДокументовРаспределенияНДС = ДокументыРаспределенияНДС(Период).Выбрать();
			Пока ВыборкаДокументовРаспределенияНДС.Следующий() Цикл
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,, ВыборкаДокументовРаспределенияНДС.Организация, Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
			КонецЦикла;
			
			// Задания по формированию НДСПредъявленный, КнигиПокупок, КнигиПродаж
			ВыборкаЗаданийКФормированиюНДС = ЗаданияКФормированиюНДС(Период).Выбрать();
			РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаЗаданийКФормированиюНДС);
			
		КонецЕсли;
		
		//++ НЕ УТ
		Если ЭтапРасчета = "УСН" Тогда
			
			ОперацииУСН = Новый Массив;
			ОперацииУСН.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПриУСН);
			ОперацииУСН.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаУСН);
			ОперацииУСН.Добавить(Перечисления.ОперацииЗакрытияМесяца.СторноДоходовКУДиР);
			
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,,, ОперацииУСН);
			
		КонецЕсли;
		
		Если ЭтапРасчета = "РеглУчет" Тогда
			ОтражаемыеТипы = Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.СтандартныеРеквизиты.Регистратор.Тип.Типы();
			ТипыДокументовКПоследовательномуОтражению = РеглУчетВыборкиСерверПовтИсп.ТипыДокументовКПоследовательномуОтражению();
			ИсключаемыеТипы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ТипыДокументовКПоследовательномуОтражению);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ТипыДляСнятияОтражения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОтражаемыеТипы, ИсключаемыеТипы);	
			РегистрыСведений.ОтражениеДокументовВРеглУчете.ЗарегистрироватьДокументыКОтражению(НачалоМесяца(Период), КонецМесяца(Период), , ТипыДляСнятияОтражения);
		КонецЕсли;
		//-- НЕ УТ
		
		//++ НЕ УТКА
		Если ЭтапРасчета = "МеждународныйУчет" Тогда
			МеждународныйУчетЗарегистрироватьДокументыКОтражению(НачалоМесяца(Период), КонецМесяца(Период));
		КонецЕсли;
		//-- НЕ УТКА
			
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаданияКФормированиюНДС(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСПредъявленный.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.Регистратор,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация";
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция ДокументыРаспределенияНДС(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеНДС.Ссылка,
	|	РаспределениеНДС.Организация
	|ИЗ
	|	Документ.РаспределениеНДС КАК РаспределениеНДС
	|ГДЕ
	|	РаспределениеНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаспределениеНДС.Проведен
	|	И РаспределениеНДС.ВыручкаНДС + РаспределениеНДС.ВыручкаНеНДС + РаспределениеНДС.ВыручкаЕНВД + РаспределениеНДС.ВыручкаНДС0 + РаспределениеНДС.ВыручкаНДС0СырьевыеТоварыУслуги + РаспределениеНДС.ВыручкаНДС0НесырьевыеТовары <> 0";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеРасхожденийПоЭтапамЗаПериод(ДанныеЗаполнения, Расхождения, ТестируемыйМесяц)
	
	РегистрыВзаиморасчетов = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВзаиморасчетыСПартнерами"));
	РегистрыНДС = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("НДС"));
	//++ НЕ УТ
	РегистрыУСН = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("УСН"));
	РегистрыРегл = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РеглУчет"));
	//-- НЕ УТ
	//++ НЕ УТКА
	РегистрыМеждународные = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("МеждународныйУчет"));
	//-- НЕ УТКА
	
	МассивЭтаповТекущегоПериода = Новый Массив;
	
	Если ЗначениеЗаполнено(Расхождения) И Расхождения.Получить("КоличествоРасхождений") <> 0 Тогда
		
		Для каждого Строка из Расхождения Цикл
			
			Если Строка.Ключ = "КоличествоРасхождений" Тогда
				Продолжить;
			КонецЕсли;
			ИмяКонтрольногоРегистра = Строка.Ключ;
			
			ЭтапТекущегоРасхождения = Неопределено;
			МетаданныеРасхождения = Неопределено;
			Если РегистрыВзаиморасчетов.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "ВзаиморасчетыСПартнерами";
				МетаданныеРасхождения = "РегистрыНакопления.РасчетыСПоставщиками";
			ИначеЕсли РегистрыНДС.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "НДС";
				МетаданныеРасхождения = "РегистрыНакопления.НДСПредъявленный";
			//++ НЕ УТ
			ИначеЕсли РегистрыУСН.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "УСН";
				МетаданныеРасхождения = "РегистрыНакопления.РасходыПриУСН";
			ИначеЕсли РегистрыРегл.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "РеглУчет";
				МетаданныеРасхождения = "РегистрыБухгалтерии.Хозрасчетный";
			//-- НЕ УТ
			//++ НЕ УТКА
			ИначеЕсли РегистрыМеждународные.Найти(ИмяКонтрольногоРегистра) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "МеждународныйУчет";
				МетаданныеРасхождения = "РегистрыБухгалтерии.Международный";
			//-- НЕ УТКА
			Иначе
				ЭтапТекущегоРасхождения = "Себестоимость";
				МетаданныеРасхождения = "РегистрыНакопления.СебестоимостьТоваров";
			КонецЕсли;
			
			ДанныеТекущегоЭтапа = Неопределено;
			Если ДанныеЗаполнения.Получить(ЭтапТекущегоРасхождения) = Неопределено Тогда
				ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
				ФайлОтчета = СоздатьФайлОтчета(ПутьКФайлу);
				СтруктураРасхожденийЭтапа = Новый Структура;
				СтруктураРасхожденийЭтапа.Вставить("Количество", 0);
				СтруктураРасхожденийЭтапа.Вставить("Файл", ФайлОтчета);
				СтруктураРасхожденийЭтапа.Вставить("ОбъектМетаданных", МетаданныеРасхождения);
				СтруктураРасхожденийЭтапа.Вставить("ПутьКФайлу", ПутьКФайлу);
				ДанныеЗаполнения.Вставить(ЭтапТекущегоРасхождения, СтруктураРасхожденийЭтапа);
			КонецЕсли;
			ДанныеТекущегоЭтапа = ДанныеЗаполнения.Получить(ЭтапТекущегоРасхождения);
			
			Если МассивЭтаповТекущегоПериода.Найти(ЭтапТекущегоРасхождения) = Неопределено Тогда
				ДанныеТекущегоЭтапа.Файл.ЗаписатьНачалоЭлемента("Период");
				СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ТестируемыйМесяц);
				ДанныеТекущегоЭтапа.Файл.ЗаписатьТекст(СтрокаXML);
				МассивЭтаповТекущегоПериода.Добавить(ЭтапТекущегоРасхождения);
			КонецЕсли;
			
			ДанныеТекущегоЭтапа.Файл.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ИмяКонтрольногоРегистра); // имя регистра
			ДанныеТекущегоЭтапа.Файл.ЗаписатьТекст(СтрокаXML);
			
			ДанныеТекущегоЭтапа.Файл.ЗаписатьНачалоЭлемента("Записи");
			ДанныеТекущегоЭтапа.Файл.ЗаписатьТекст(Строка.Значение.Записи);
			ДанныеТекущегоЭтапа.Файл.ЗаписатьКонецЭлемента(); // записи

			ДанныеТекущегоЭтапа.Файл.ЗаписатьКонецЭлемента(); // имя регистра
			
			ДанныеТекущегоЭтапа.Количество = ДанныеТекущегоЭтапа.Количество + Строка.Значение.Количество;
			
		КонецЦикла;
		
		Для каждого ДанныеРасхожденийЭтапа из ДанныеЗаполнения Цикл
			
			Если МассивЭтаповТекущегоПериода.Найти(ДанныеРасхожденийЭтапа.Ключ) <> Неопределено Тогда
				ДанныеРасхожденийЭтапа.Значение.Файл.ЗаписатьКонецЭлемента(); // Период
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА
Процедура МеждународныйУчетЗарегистрироватьДокументыКОтражению(НачалоПериода, КонецПериода, Организация = Неопределено, ТипыДокументов = Неопределено)
	
	Если ТипыДокументов = Неопределено Тогда
		ТипыДокументов = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Период КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор КАК Документ,
	|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|ГДЕ
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (&Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ ОтражениеДокументовВМеждународномУчете.Организация В (&Организация))
	|	И (&ВсеДокументы
	|			ИЛИ ТИПЗНАЧЕНИЯ(ОтражениеДокументовВМеждународномУчете.Регистратор) В (&ТипыДокументов))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Документ,
	|	Организация,
	|	ДатаОтражения";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ВсеДокументы", ТипыДокументов.Количество() = 0);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

#Область РаботаСФайлами

Функция СоздатьФайлОтчета(ПутьКФайлу) Экспорт
	ФайлОтчета = Новый ЗаписьXML;
	ФайлОтчета.ОткрытьФайл(ПутьКФайлу);
	
	ФайлОтчета.ЗаписатьОбъявлениеXML();
	
	ФайлОтчета.ЗаписатьНачалоЭлемента("Корневой");
	Возврат ФайлОтчета;
КонецФункции

Процедура ЗаписатьФайлОтчета(ФайлОтчета)
	Если ФайлОтчета <> Неопределено Тогда
		ФайлОтчета.ЗаписатьКонецЭлемента(); // Корневой
		ФайлОтчета.Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
