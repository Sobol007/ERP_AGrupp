&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПеременныеКлиента;

&НаСервере
Перем КэшированныеЗначения;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	CRM_СистемаСквознойАналитикиСервер.Обработка_CRM_АРМ_РабочееМестоСквознаяАналитика_Форма_ПриСозданииНаСервере();
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	МакетТабл = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхТаблица");
	КомпоновщикНастроекТаблица.ЗагрузитьНастройки(МакетТабл.НастройкиПоУмолчанию);
	
	Макет = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КомпоновщикНастроек.ЗагрузитьНастройки(Макет.НастройкиПоУмолчанию);
	
	АдресСхемы = ПоместитьВоВременноеХранилище(МакетТабл, УникальныйИдентификатор);
	НастройкиОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	
	НастройкиОтчета.Вставить("Контекстный", (Параметры.Свойство("Контекст") И ЗначениеЗаполнено(Параметры.Контекст)) ИЛИ (Параметры.Свойство("ОтборРасшифровки") И Параметры.ОтборРасшифровки.Количество()>0));
	НастройкиОтчета.Вставить("ПолноеИмя", ОтчетМетаданные.ПолноеИмя());
	НастройкиОтчета.Вставить("ИмяОтчета", ОтчетМетаданные.Имя);
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	Если Параметры.Свойство("ДополнительнаяОбработкаСсылка") Тогда
		НастройкиОтчета.Вставить("ОтчетСсылка", Параметры.ДополнительнаяОбработкаСсылка);
	ИначеЕсли Параметры.Свойство("Отчет") Тогда
		НастройкиОтчета.Вставить("ОтчетСсылка", Параметры.Отчет);
	Иначе
		Информация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(НастройкиОтчета.ПолноеИмя);
		НастройкиОтчета.Вставить("ОтчетСсылка", Информация.Отчет);
	КонецЕсли; 
	НастройкиОтчета.Вставить("Внешний", ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка") ИЛИ ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	НастройкиОтчета.Вставить("Безопасный",  БезопасныйРежим() <> Ложь);
	НастройкиОтчета.Вставить("ФормироватьНепосредственно", НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный ИЛИ (Параметры.Свойство("ФормироватьНепосредственно") И Параметры.ФормироватьНепосредственно));
	
	НастройкиОтчета.Вставить("АдресСхемы", АдресСхемы);
	
	НастройкиОтчета.Вставить("ПредопределенныеВарианты", Новый СписокЗначений);
	Если НастройкиОтчета.Внешний И Макет <> Неопределено Тогда
		Для Каждого ВариантОтчета Из Макет.ВариантыНастроек Цикл
			НастройкиОтчета.ПредопределенныеВарианты.Добавить(ВариантОтчета.Имя, ВариантОтчета.Представление);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьКомандыВыбораВариантов();
	
	Если ТипЗнч(КлючТекущегоВарианта)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Если Элементы.Вариант.СписокВыбора.НайтиПоЗначению(КлючТекущегоВарианта)=Неопределено
			И Элементы.Вариант.СписокВыбора.Количество()>0 Тогда
			КлючТекущегоВарианта = Элементы.Вариант.СписокВыбора[0].Значение;
		КонецЕсли; 
	Иначе
		ТекВариант = ПолучитьСсылку(НастройкиОтчета.ОтчетСсылка, КлючТекущегоВарианта);
		Если Элементы.Вариант.СписокВыбора.НайтиПоЗначению(ТекВариант)=Неопределено
			И Элементы.Вариант.СписокВыбора.Количество()>0 Тогда
			ТекВариант = Элементы.Вариант.СписокВыбора[0].Значение;
			Если ТипЗнч(ТекВариант)=Тип("Строка") Тогда
				КлючТекущегоВарианта = ТекВариант;
			Иначе
				КлючТекущегоВарианта = ТекВариант.КлючВарианта;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	НастройкиНеВосстановлены = ВосстановитьНастройкиИзХранилища(ЭтотОбъект.ИмяФормы);
	
	Если НастройкиНеВосстановлены Тогда
		
		ЗаполнитьПоУмолчаниюДанныеТаблицы(АдресСхемы,МакетТабл,Макет);
		
	КонецЕсли;
	
	ОбновитьНастройкиНаФорме();
	
	ЗаполнитьДанныеПоРекламнымКампаниям();
	
	СписокРекламныхКампаний.Вставить(0, "Все активные кампании");
	СписокРекламныхКампаний.Вставить(1, "По списку");
	СписокРекламныхКампаний.Вставить(2, "Выбрать кампанию");
	
	СписокВыбораМаркетинг.Вставить(0, "Все активные кампании");
	СписокВыбораМаркетинг.Вставить(1, "По списку");
	СписокВыбораМаркетинг.Вставить(2, "Выбрать кампанию");
	
	// +СирК
	//Если СписокРекламныхКампаний.Количество() > 100 Тогда
	//	РекламныеКампании.Добавить(СписокРекламныхКампаний[2].Значение);
	//КонецЕсли;
	// -СирК
	
	ДиаграммаЗначения.СортироватьПоЗначению();
	
	ОбновитьТаблицуМетрик(Истина);
	
	ОбновитьТаблицуКолонок(Истина);
	
	СортироватьДанныеВтаблице();
	
	ДиаграммаЗначения.ДоступныеЗначения = ДиаграммаЗначенияСписок;
	
	УстановитьЗаголовкиРекламныхКампаний();
	
	ИспользоватьДС = Истина;
	
	ДСПоКампаниям.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Период",Период);
	ДСПоЦелям.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Период",Период);
	ДСПоИсточникам.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Период",Период);
	
	СформироватьНаСервере();
	
КонецПроцедуры	//	ПриСозданииНаСервере

&НаСервере
Процедура ЗаполнитьПоУмолчаниюДанныеТаблицы(АдресСхемы,МакетТабл,Макет)
	
	ЗаполнитьДиаграммуПоказателей(МакетТабл,Макет);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикНастроекТаблица.Инициализировать(ИсточникНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммуПоказателей(МакетТабл = Неопределено,Макет = Неопределено)
	
	Если МакетТабл = Неопределено Тогда
		
		ОтчетОбъект = РеквизитФормыВЗначение("Объект");
		Макет = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		МакетТабл = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхТаблица");
		
	КонецЕсли;
	
	КомпоновщикНастроекТаблица.ЗагрузитьНастройки(МакетТабл.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Макет.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Макет);
	КомпоновщикИст = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикИст.Инициализировать(ИсточникНастроек);
	
	Показатели = КомпоновщикНастроек.Настройки.Выбор.Элементы;
	ТаблицаПоказателей.Очистить();
	
	Для Каждого Стр Из Показатели Цикл
		
		НовСтр = ТаблицаПоказателей.Добавить();
		
		Пометка = Стр.Использование;
		
		НовСтр.ЦветЗначение = ТаблицаПоказателей.индекс(Новстр);
		
		НовСтр.Выбрано = Пометка;
		
		НовСтр.Значение = Стр.Поле;
		
		НовСтр.Представление = ?(ЗначениеЗаполнено(Стр.Заголовок),Стр.Заголовок,Стр.Поле);
		
		ДиаграммаЗначения.Добавить(Стр.Поле,Стр.Заголовок,Пометка);
		
		ДиаграммаЗначенияСписок.Добавить(Стр.Поле,Стр.Заголовок);
		
	КонецЦикла;
	
	Показатели = КомпоновщикИст.Настройки.Выбор.ДоступныеПоляВыбора.Элементы;
	
	Для Каждого Стр Из Показатели Цикл
		
		МассивКолонок = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Значение",Стр.Поле));
		
		Если МассивКолонок.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Ресурс Тогда
			
			НовСтр = ТаблицаПоказателей.Добавить();
			Пометка = Ложь;
			
			НовСтр.ЦветЗначение = ТаблицаПоказателей.индекс(Новстр);
			
			НовСтр.Выбрано = Пометка;
			
			НовСтр.Значение = Стр.Поле;
			
			НовСтр.Представление = ?(ЗначениеЗаполнено(Стр.Заголовок),Стр.Заголовок,Стр.Поле);
			
			ДиаграммаЗначения.Добавить(Стр.Поле,Стр.Заголовок,Пометка);
			
			ДиаграммаЗначенияСписок.Добавить(Стр.Поле,Стр.Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПроверитьПустоеКоличествоИсточниковАналитики() Тогда
		ОП = Новый ОписаниеОповещения("ПослеВопросаПустыеЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Не задано ни одного источника аналитики, перейти к настройке?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Зафиксировать(Истина);
	
	ИспользоватьДСПриИзменении(Истина);
	
	УстановитьВидимостьЭлементовИКнопок(Истина, Ложь, Ложь);
	
	СформироватьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПустыеЗаписи(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Справочник.CRM_ИсточникиРекламныхКампаний.Форма.ФормаПомощникВвода",,ЭтотОбъект);
		
	Иначе
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПустоеКоличествоИсточниковАналитики()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ИсточникиРекламныхКампаний.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ИсточникиРекламныхКампаний КАК CRM_ИсточникиРекламныхКампаний
	|ГДЕ
	|	НЕ CRM_ИсточникиРекламныхКампаний.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить().Пустой();
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	
	РезультатОбработан = Ложь;
	
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("УправляемаяФорма") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаВыбораРекламныхКампаний" Тогда
			РекламныеКампании.Очистить();
			
			ВключатьДанныеБезКампаний = Результат.ВключатьДанныеБезКампаний;
			Для Каждого Стр Из Результат.ВыбранныеКампании Цикл
				РекламныеКампании.Добавить(Стр);
			КонецЦикла;
			
			Если Результат.ВыбранныеКампании.Количество() = 0 Тогда
				Если ВключатьДанныеБезКампаний Тогда
					  УстановитьЗаголовкиРекламныхКампаний(ПредопределенноеЗначение("Справочник.МаркетинговыеМероприятия.ПустаяСсылка"));
				Иначе УстановитьЗаголовкиРекламныхКампаний(Неопределено);
				КонецЕсли;

			ИначеЕсли Результат.ВыбранныеКампании.Количество() = 1 Тогда
				УстановитьЗаголовкиРекламныхКампаний(Результат.ВыбранныеКампании[0]);
				
			Иначе
				УстановитьЗаголовкиРекламныхКампаний("По списку: " + Результат.ВыбранныеКампании[0] + "...");
			КонецЕсли;
				
			СформироватьНаСервере();

		ИначеЕсли ИмяПодчиненнойФормы = "Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаВыбора" Тогда
			РекламныеКампании.Очистить();
			
			РекламныеКампании.Добавить(Результат);
			УстановитьЗаголовкиРекламныхКампаний(Результат);
			
			СформироватьНаСервере();

		ИначеЕсли ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета"
			Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
			
		ИначеЕсли ИмяПодчиненнойФормы = "ВнешняяОбработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаВарианта" ИЛИ
			ИмяПодчиненнойФормы = "Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаВарианта" Тогда
			
			СформироватьНастройкиТаблицы(Результат);
			
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;
			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаНастроек")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчетаУНФ")
				Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				Если Результат.Свойство("НастройкиКД") Тогда
					КомпоновщикНастроекТаблица.ЗагрузитьНастройки(Результат.НастройкиКД);
					ОбновитьНастройкиНаФорме();
					
					СформироватьЗаголовокФормы();
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
			Вариант = Результат;
			Если Элементы.Вариант.СписокВыбора.НайтиПоЗначению(Вариант)=Неопределено Тогда
				Элементы.Вариант.СписокВыбора.Добавить(Вариант);
			КонецЕсли; 
			ОтметитьНеактуальным(); 
		КонецЕсли;
	КонецЕсли;
	
	// Механизмы расширения.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНастройкиТаблицы(НастройкиСКД)
	
	КомпоновщикНастроекТаблица.ЗагрузитьНастройки(НастройкиСКД.Настройки);
	
	СформироватьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	Если ПараметрПериод = Неопределено Тогда
		ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета");
	КонецЕсли; 
	Если ПараметрПериод = Неопределено Тогда
		ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	КонецЕсли; 
	Если ПараметрПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	Диалог.Показать(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, ДополнительныеДанные) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовыйПериод) = Тип("СтандартныйПериод") Тогда
		Период = НовыйПериод;

	ИначеЕсли ТипЗнч(НовыйПериод) = Тип("Дата") Тогда
		Период.ДатаНачала = '0001-01-01';
		Период.ДатаОкончания = НовыйПериод;
		Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	КонецЕсли;
	
	СформироватьЗаголовокФормы();
	
	СформироватьНаСервере();
	
	ЗаполнитьДанныеПоРекламнымКампаниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПриИзменении(Элемент)
	
	НастройкиОтчета.Вставить("ПользовательскиеНастройки", Неопределено);
	ОтметитьНеактуальным(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммыОчистка(Элемент, СтандартнаяОбработка)
	
	ВидДиаграммы = Неопределено;
	ПриИзмененииВидаДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("ВидДиаграммыНачалоВыбораЗадержка", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммыНачалоВыбораЗадержка()
	
	Меню = Новый СписокЗначений;
	Меню.Добавить(Неопределено, НСтр("en='Не выводить';ru='Не выводить'"),, БиблиотекаКартинок.Пустая);
	Меню.Добавить(ТипДиаграммы.График, НСтр("en='Schedules';ru='Графики'"),, КартинкаДиаграммы(ТипДиаграммы.График));
	Меню.Добавить(ТипДиаграммы.Гистограмма, НСтр("en='usual histogram';ru='Обычные гистограммы'"),, КартинкаДиаграммы(ТипДиаграммы.Гистограмма));
	Меню.Добавить(ТипДиаграммы.ГистограммаГоризонтальная, НСтр("en='Horizon. histogram';ru='Горизонт. гистограммы'"),, КартинкаДиаграммы(ТипДиаграммы.ГистограммаГоризонтальная));
	Меню.Добавить(ТипДиаграммы.Круговая, НСтр("en='Pie chart';ru='Круговые диаграммы'"),, КартинкаДиаграммы(ТипДиаграммы.Круговая));
	Меню.Добавить(ТипДиаграммы.Изометрическая, НСтр("en='Isometric diagrams';ru='Изометрические диаграммы'"),, КартинкаДиаграммы(ТипДиаграммы.Изометрическая));
	Меню.Добавить("<Прочие>", НСтр("en='Other';ru='Прочие'"),, КартинкаДиаграммы(ТипДиаграммы.Поверхность));
	Оповещение = Новый ОписаниеОповещения("ВидДиаграммыВыборГруппы", ЭтотОбъект);
	#Если ВебКлиент Тогда
		ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.ВидДиаграммы);
	#Иначе
		ПоказатьВыборИзСписка(Оповещение, Меню, Элементы.ВидДиаграммы);
	#КонецЕсли 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммыВыборГруппы(Значение, ДополнительныеДанные) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Меню = Новый СписокЗначений;
	Если Значение.Значение=ТипДиаграммы.График Тогда
		Меню.Добавить(ТипДиаграммы.График, НСтр("en='Ordinary';ru='Обычный'"));
		Меню.Добавить(ТипДиаграммы.ГрафикПоШагам, НСтр("en='By steps';ru='По шагам'"));
		Меню.Добавить(ТипДиаграммы.ГрафикСНакоплением, НСтр("en='Stacked';ru='С накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГрафикСОбластями, НСтр("en='Area';ru='С областями'"));
		Меню.Добавить(ТипДиаграммы.ГрафикСОбластямиИНакоплением, НСтр("en='Area accumulation';ru='С областями и накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГрафикСОбластямиНормированный, НСтр("en='Normalized';ru='Нормированный'"));
	ИначеЕсли Значение.Значение=ТипДиаграммы.Гистограмма Тогда
		Меню.Добавить(ТипДиаграммы.Гистограмма, НСтр("en='Normal';ru='Обычная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаСНакоплением, НСтр("en='Stacked';ru='С накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаНормированная, НСтр("en='Normalized';ru='Нормированная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаОбъемная, НСтр("en='Volume';ru='Объемная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаСНакоплениемОбъемная, НСтр("en='Volume accumulation';ru='Объемная с накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаНормированнаяОбъемная, НСтр("en='Volume normalized';ru='Объемная нормированная'"));
	ИначеЕсли Значение.Значение=ТипДиаграммы.ГистограммаГоризонтальная Тогда
		Меню.Добавить(ТипДиаграммы.ГистограммаГоризонтальная, НСтр("en='Normal';ru='Обычная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная, НСтр("en='Stacked';ru='С накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаНормированнаяГоризонтальная, НСтр("en='Normalized';ru='Нормированная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная, НСтр("en='Volume';ru='Объемная'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная, НСтр("en='Volume accumulation';ru='Объемная с накоплением'"));
		Меню.Добавить(ТипДиаграммы.ГистограммаНормированнаяГоризонтальнаяОбъемная, НСтр("en='Volume normalized';ru='Объемная нормированная'"));
	ИначеЕсли Значение.Значение=ТипДиаграммы.Круговая Тогда
		Меню.Добавить(ТипДиаграммы.Круговая, НСтр("en='Normal';ru='Обычная'"));
		Меню.Добавить(ТипДиаграммы.КруговаяОбъемная, НСтр("en='Volume';ru='Объемная'"));
	ИначеЕсли Значение.Значение=ТипДиаграммы.Изометрическая Тогда
		Меню.Добавить(ТипДиаграммы.Изометрическая, НСтр("en='Normal';ru='Обычная'"));
		Меню.Добавить(ТипДиаграммы.ИзометрическаяНепрерывная, НСтр("en='Uninterrupted';ru='Непрерывная'"));
		Меню.Добавить(ТипДиаграммы.ИзометрическаяЛента, НСтр("en='Tape';ru='Лента'"));
		Меню.Добавить(ТипДиаграммы.ИзометрическаяПирамида, НСтр("en='Pyramid';ru='Пирамида'"));
	ИначеЕсли Значение.Значение="<Прочие>" Тогда
		Меню.Добавить(ТипДиаграммы.Водопад);
		Меню.Добавить(ТипДиаграммы.КаркаснаяПоверхность);
		Меню.Добавить(ТипДиаграммы.Поверхность);
		Меню.Добавить(ТипДиаграммы.ВыпуклаяПоверхность);
		Меню.Добавить(ТипДиаграммы.ВогнутаяПоверхность);
		Меню.Добавить(ТипДиаграммы.ЗатененнаяПоверхность);
		Меню.Добавить(ТипДиаграммы.Сотовая);
	Иначе
		ВидДиаграммыВыбор(Значение, Неопределено);
		Возврат;
	КонецЕсли;
	Для каждого ЭлементСписка Из Меню Цикл
		ЭлементСписка.Картинка = КартинкаДиаграммы(ЭлементСписка.Значение);
	КонецЦикла; 
	Оповещение = Новый ОписаниеОповещения("ВидДиаграммыВыбор", ЭтотОбъект);
	#Если ВебКлиент Тогда
		ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.ВидДиаграммы);
	#Иначе
		ПоказатьВыборИзСписка(Оповещение, Меню, Элементы.ВидДиаграммы);
	#КонецЕсли 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаДиаграммы(ВидДиаграммы)
	
	Если ВидДиаграммы=ТипДиаграммы.График Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_График;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикПоШагам Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГрафикПоШагам;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСНакоплением Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГрафикСНакоплением;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСОбластями Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГрафикСОбластями;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСОбластями Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГрафикСОбластями;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСОбластямиИНакоплением Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГрафикСОбластямиИНакоплением;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГрафикСОбластямиНормированный Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГрафикСОбластямиНормированный;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Гистограмма Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_Гистограмма;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаСНакоплением Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаСНакоплением;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаНормированная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаНормированная
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаОбъемная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемОбъемная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаСНакоплениемОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаНормированнаяОбъемная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаНормированнаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаГоризонтальная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаГоризонтальная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаСНакоплениемГоризонтальная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаНормированнаяГоризонтальная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаНормированнаяГоризонтальная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаГоризонтальнаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ГистограммаНормированнаяГоризонтальнаяОбъемная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ГистограммаНормированнаяГоризонтальнаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Круговая Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_Круговая;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.КруговаяОбъемная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_КруговаяОбъемная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Изометрическая Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_Изометрическая;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ИзометрическаяНепрерывная Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ИзометрическаяНепрерывная;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ИзометрическаяЛента Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ИзометрическаяЛента;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ИзометрическаяПирамида Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ИзометрическаяПирамида;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Водопад Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_Водопад;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.КаркаснаяПоверхность Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_КаркаснаяПоверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Поверхность Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_Поверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ВыпуклаяПоверхность Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ВыпуклаяПоверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ВогнутаяПоверхность Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ВогнутаяПоверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.ЗатененнаяПоверхность Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_ЗатененнаяПоверхность;
	ИначеЕсли ВидДиаграммы=ТипДиаграммы.Сотовая Тогда
		Возврат БиблиотекаКартинок.CRM_ТипДиаграммы_Сотовая;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ВидДиаграммыВыбор(Значение, ДополнительныеДанные) Экспорт
	
	Если Значение=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ВидДиаграммы = Значение.Значение;
	ПриИзмененииВидаДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаДиаграммы()
	
	ЭлементСтруктуры = ЭлементСтуктурыДиаграмма(КомпоновщикНастроек.Настройки.Структура, ЗначениеЗаполнено(ВидДиаграммы));
	Если НЕ ВидДиаграммы=Неопределено Тогда
		ЭлементСтруктуры.Использование = Истина;
		Параметр = ЭлементСтруктуры.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
		Если Параметр=Неопределено ИЛИ НЕ Параметр.Использование Тогда
			Параметр = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
		КонецЕсли; 
		Если НЕ Параметр=Неопределено Тогда
			Параметр.Значение = ВидДиаграммы;
			Параметр.Использование = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЭлементСтруктуры=Неопределено Тогда 
		ЭлементСтруктуры.Использование = Ложь;
		ОтметитьНеактуальным();
	КонецЕсли; 
	ВидДиаграммыВыборСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВидДиаграммыВыборСервер()
	
	УстановитьВидимостьИДоступность("ИзмененВидДиаграммы");
	Если НастройкиОтчета.ИзменятьЗначенияДиаграммы И НЕ ЗначениеЗаполнено(ДиаграммаЗначения) Тогда
		УстановитьЗначенияДиаграммыПоУмолчаниюРекурсивно(КомпоновщикНастроек.Настройки.Выбор.Элементы);
	КонецЕсли; 
	
	СФормироватьДиаграмму();
	
КонецПроцедуры

&НаСервере
Функция СписокБыстрыхФильтров()
	
	ДобавленныеФильтры = СписокДобавленныхФильтров();
	Список = Новый СписокЗначений;
	Если НастройкиОтчета.Свойство("ДополнительныеФильтры") И ТипЗнч(НастройкиОтчета.ДополнительныеФильтры)=Тип("СписокЗначений") Тогда
		Для каждого ОписаниеПоля Из НастройкиОтчета.ДополнительныеФильтры Цикл
			Если НЕ ДобавленныеФильтры.НайтиПоЗначению(ОписаниеПоля.Значение)=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеПоля.Значение));
			Если ДоступноеПоле=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Если ПустаяСтрока(ОписаниеПоля.Представление) Тогда
				ПредставлениеПоля = ДоступноеПоле.Заголовок;
			Иначе
				ПредставлениеПоля = ОписаниеПоля.Представление;
			КонецЕсли; 
			Список.Добавить(ОписаниеПоля.Значение, ПредставлениеПоля);
		КонецЦикла; 
	КонецЕсли;
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФильтрЗавершение(Элемент, ДополнительныеДанные) Экспорт
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Элемент.Значение=Неопределено Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипФильтр());
		СписокПолей = Новый СписокЗначений;
		Оповещение = Новый ОписаниеОповещения("ДобавитьФильтрПрочиеПоля", ЭтотОбъект);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Режим", "ПоляОтбора");
		СтруктураПараметров.Вставить("СуществующиеПоля", СписокПолей);
		СтруктураПараметров.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		СтруктураПараметров.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(КомпоновщикНастроекТаблица.Настройки, УникальныйИдентификатор));
		ОткрытьФорму("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.CRM_ФормаСпискаПолей", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
	Иначе
		ДобавитьОписаниеФильтра(Элемент.Значение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтрПрочиеПоля(Путь, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Путь) Тогда
		ДобавитьОписаниеФильтра(Путь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СписокДополнительныхКолонок()
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	Список = Новый СписокЗначений;
	СписокПолей = СписокДобавленныхПолей(Истина, Истина);
	Для каждого Показатель Из КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// +CRM
		ИмяПоля = Строка(Показатель.Поле);
		Если СписокПолей.НайтиПоЗначению(ИмяПоля)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Показатель.Ресурс И НЕ ДетальныеЗаписиИспользуются Тогда
			Продолжить;
		КонецЕсли;
		Если Показатель.Папка Тогда
			Продолжить;
		КонецЕсли;
		// -CRM
		Если НЕ СтрокаОписанияПоля(ТипПоказатель(), ИмяПоля, ПоляНастроек)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НастройкиОтчета.Свойство("ТолькоРесурсыОстатков") И НастройкиОтчета.ТолькоРесурсыОстатков Тогда
			ПолеСхемы = CRM_Отчеты.ПолеСхемы(Схема, ИмяПоля);
			Если НЕ ПолеСхемы=Неопределено И НЕ ПолеСхемы.Роль.ТипОстатка=ТипОстаткаКомпоновкиДанных.КонечныйОстаток Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		Список.Добавить(ИмяПоля, Показатель.Заголовок);
	КонецЦикла;
	Возврат Список;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок = СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
		Обработчик = Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

#Область ПараметрыИФильтры

&НаКлиенте
Процедура Подключаемый_ПараметрПриИзменении(Элемент)
	
	Стр = СтрокаОписанияПоИмениЭлемента(Элемент.Имя, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), Элемент.Имя);
	Иначе
		Значение = ЗначениеПоляФильтра(Стр);
		Если Стр.ТипЗначения = Новый ОписаниеТипов("Булево") ИЛИ ЗначениеЗаполнено(Значение) Тогда
			КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Стр.Поле, Значение);
		Иначе	
			Параметр = КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Стр.Поле));
			Параметр.Использование = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрПриИзменении(Элемент)
	
	Стр = СтрокаОписанияПоИмениЭлемента(Элемент.Имя, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), Элемент.Имя);
	ИначеЕсли Найти(Стр.Поле, "ДобавленноеПоле_")>0 Тогда
		Значение = ЗначениеПоляФильтра(Стр);
		НаложитьОтборПоДобавленномуПолю(Стр.Поле, Значение);
	Иначе
		Значение = ЗначениеПоляФильтра(Стр);
		Если Стр.ВидЭлемента="Поле" И НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Стр.ДополнительныеПараметры, "СвязьПоПредставлению", Ложь) Тогда
			ИзменитьИспользованиеФильтра(Стр.Заголовок, Значение); 
		ИначеЕсли Стр.ВидЭлемента="Поле" Тогда
			ЗначениеОтбора = Новый СписокЗначений;
			ЗначениеОтбора.Добавить(Значение);
			УстановитьЗначениеФильтра(Стр.Поле, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Ложь);
		ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
			УстановитьЗначениеФильтра(Стр.Поле, Значение, ВидСравненияКомпоновкиДанных.Равно, Ложь, Истина);
		Иначе
			УстановитьЗначениеФильтра(Стр.Поле, Значение, ВидСравненияКомпоновкиДанных.Равно, Ложь);
		КонецЕсли; 
		Если Стр.ВидЭлемента="Поле" Тогда
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				ЭтаФорма[ОписаниеРеквизита.Ключ] = Неопределено;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Стр = СтрокаОписанияПоИмениЭлемента(Элемент.Имя, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ Стр.ВидЭлемента="Поле" Тогда
		Возврат;
	КонецЕсли; 
	Если Стр.ДополнительныеПараметры.Свойство("БыстрыйВыбор") Тогда
		Возврат;
	КонецЕсли;
	Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
		Значение = ЭтотОбъект[ОписаниеРеквизита.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			ЭтотОбъект[ОписаниеРеквизита.Ключ] = Неопределено;
		КонецЕсли; 
		Прервать;
	КонецЦикла; 
	Если Значение=Неопределено Тогда
		// Не выбран тип у многотипного фильтра
		Возврат;
	КонецЕсли;
	ИмяФормыВыбора = ОпределитьФормуВыбора(Значение, Элемент.ВыборГруппИЭлементов);
	Если ПустаяСтрока(ИмяФормыВыбора) Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
	Поле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
	ПараметрыВыбора = ОпределитьПараметрыВыбора(Поле);
	Если НЕ ПараметрыВыбора=Неопределено Тогда
		Если ТипЗнч(ПараметрыВыбора)=Тип("ФиксированныйМассив") Тогда
			МассивПараметров = Новый Массив(ПараметрыВыбора);
		ИначеЕсли ТипЗнч(ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
			МассивПараметров = Новый Массив;
			Для каждого Параметр Из ПараметрыВыбора Цикл
				МассивПараметров.Добавить(Параметр);
			КонецЦикла; 
		Иначе
			МассивПараметров = ПараметрыВыбора;
		КонецЕсли;
		Если ТипЗнч(МассивПараметров)=Тип("Массив") Тогда
			Если ТипЗнч(Элемент)=Тип("ПолеФормы") И Элемент.Вид=ВидПоляФормы.ПолеВвода Тогда
				Для каждого Параметр Из Элемент.ПараметрыВыбора Цикл
					МассивПараметров.Добавить(Параметр);
				КонецЦикла; 
			КонецЕсли; 
			Для каждого Параметр Из МассивПараметров Цикл
				Если Найти(Параметр.Имя, "Отбор.")=0 Тогда
					Продолжить;
				КонецЕсли; 
				ИмяПоля = СтрЗаменить(Параметр.Имя, "Отбор.", "");
				Если Найти(ИмяПоля, ".")>0 Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыОткрытия.Отбор.Вставить(ИмяПоля, Параметр.Значение);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Стр = СтрокаОписанияПоИмениЭлемента(Элемент.Имя, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда 
		Если ВыбранноеЗначение=Тип("Строка") 
			ИЛИ ВыбранноеЗначение=Тип("Число") 
			ИЛИ ВыбранноеЗначение=Тип("Дата") 
			ИЛИ ВыбранноеЗначение=Тип("Булево") Тогда
			Возврат;
		КонецЕсли; 
		СтандартнаяОбработка = Ложь;
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			ЭтотОбъект[ОписаниеРеквизита.Ключ] = Новый(ВыбранноеЗначение);
			Прервать;
		КонецЦикла; 
		Подключаемый_ФильтрНачалоВыбора(Элемент, Неопределено, Истина);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), Элемент.Имя, ВыбранноеЗначение);
	ИначеЕсли Найти(Стр.Поле, "ДобавленноеПоле_")>0 Тогда
		НаложитьОтборПоДобавленномуПолю(Стр.Поле, ВыбранноеЗначение);
	Иначе
		ЗначениеОтбора = Новый СписокЗначений;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ВыбранноеЗначение Цикл
				Если Не ЗначениеЗаполнено(ТекЭлемент) Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеОтбора.Добавить(ТекЭлемент);
			КонецЦикла;
		Иначе
			ЗначениеОтбора.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
			Возврат;
		КонецЕсли;
		УстановитьЗначениеФильтра(Стр.Поле, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Ложь); 
		Если Стр.ВидЭлемента="Поле" Тогда
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				ЭтотОбъект[ОписаниеРеквизита.Ключ] = Неопределено;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИерархияФильтраНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "_Иерархия", "");
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементПоле = Элементы[ИмяЭлемента];
	Если ЭлементПоле.ВыборГруппИЭлементов=ГруппыИЭлементы.Элементы Тогда
		ЭлементПоле.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ЭлементПоле.ПодсказкаВвода = Стр.Заголовок+НСтр("en=' (group)';ru=' (группа)'");
		Элемент.Подсказка = НСтр("en='Use the select groups. Press to select items.';ru='Используется выбор групп. Нажмите для выбора элементов.'");
		Элемент.Картинка = БиблиотекаКартинок.CRM_РежимВыбораГрупп;
	Иначе
		ЭлементПоле.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		ЭлементПоле.ПодсказкаВвода = Стр.Заголовок;
		Элемент.Подсказка = НСтр("en='Use the select elements. Click to select the groups.';ru='Используется выбор элементов. Нажмите для выбора групп.'");
		Элемент.Картинка = БиблиотекаКартинок.CRM_РежимВыбораЭлементов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьФильтрНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяКнопки = Элемент.Имя;
	Стр = СтрокаНаложенногоФильтра(ИмяКнопки);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УдалитьФильтр(Стр.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти 

#Область Группировки

&НаКлиенте
Процедура Подключаемый_ИерархияГруппировкиНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ПриИзмененииИерархииГруппировки(Элемент.Имя); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИерархииГруппировки(ИмяЭлемента)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(ИмяЭлемента, "_Иерархия", "");
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяРеквизита, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
		ЭтотОбъект[ОписаниеРеквизита.Ключ] = Истина;
	КонецЦикла; 
	
	Если Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
		Стр.ДополнительныеПараметры.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ИначеЕсли Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
		Стр.ДополнительныеПараметры.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
	ИначеЕсли Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
		Стр.ДополнительныеПараметры.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЕсли;
	Элемент = Элементы[ИмяЭлемента];
	УстановитьПредставлениеКнопкиИерархииГруппировки(Элемент, Стр);
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), ИмяРеквизита);
	Иначе
		ОбновитьГруппировкиИРеквизиты(Истина);
		УстановитьВидимостьИДоступность("ИзмененыГруппировки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГруппировкаПриИзменении(Элемент)
	
	ПриИзмененииГруппировкиРеквизита(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РеквизитПриИзменении(Элемент)
	
	ПриИзмененииГруппировкиРеквизита(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГруппировкиРеквизита(ИмяЭлемента)
	
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииГруппировкиРеквизитаСервер(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГруппировкиРеквизитаСервер(Идентификатор, ИмяЭлемента)
	
	Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
	
	Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
		Значение = ЭтотОбъект[ОписаниеРеквизита.Ключ];
		Прервать;
	КонецЦикла; 
	
	Если Стр.Тип=ТипРеквизит() Тогда
		СтрРодитель = Стр.ПолучитьРодителя();
		СтрРодитель.Заголовок = ЗаголовокГруппыПолей(СтрРодитель);
		ОбновитьЗаголовокЭлемента(СтрРодитель);
		ИмяГруппировки = СтрЗаменить(СтрРодитель.ИмяГруппы, "_Группа", "");
		Если Значение И НЕ ЭтотОбъект[ИмяГруппировки] Тогда
			// Отображать группировку если выбрано хотя бы одно поле
			ЭтотОбъект[ИмяГруппировки] = Истина;
		ИначеЕсли НЕ Значение Тогда
			// Скрыть группировку, если не выбраны поля
			Если НЕ ЕстьВыводимыеПоля(Стр.ПолучитьРодителя()) Тогда
				ЭтотОбъект[ИмяГруппировки] = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли Стр.Тип=ТипГруппировка() Тогда
		Группа = Элементы[ИмяЭлемента+"_Реквизиты"];
		УстановитьПодчиненныеПоля(Стр, Значение);
	КонецЕсли; 
	
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	Иначе
		Если Значение И ПолеГруппировкиКолонок=Стр.Поле Тогда
			ПолеГруппировкиКолонок = "";
			ОбновитьГруппировкиИРеквизиты();
		ИначеЕсли Значение И ПолеСравнения=Стр.Поле Тогда
			ПолеСравнения = "";
			ПоказыватьАбсолютноеИзменение = Ложь;
			ПоказыватьОтносительноеИзменение = Ложь;
			ОбновитьГруппировкиИРеквизиты();
		Иначе
			ОбновитьГруппировкиИРеквизиты(Истина);
		КонецЕсли; 
		УстановитьВидимостьИДоступность(?(Стр.Тип=ТипРеквизит(), "ИзмененыРеквизиты", "ИзмененыГруппировки"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Показатели

&НаКлиенте
Процедура Подключаемый_ПоказательПриИзменении(Элемент)
	
	ПриИзмененииПоказателя(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоказателя(ИмяЭлемента)
	
	Стр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииПоказателяСервер(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоказателяСервер(Идентификатор, ИмяЭлемента)
	
	Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
	Если Стр.НестандартныйОбработчик Тогда
		ВыполнитьНестандартнуюОбработку(Стр.ПолучитьИдентификатор(), ИмяЭлемента);
	Иначе
		СтрРодитель = Стр.ПолучитьРодителя();
		Если НЕ СтрРодитель=Неопределено Тогда
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				Значение = ЭтотОбъект[ОписаниеРеквизита.Ключ];
				Прервать;
			КонецЦикла; 
			ИмяГруппировки = СтрЗаменить(СтрРодитель.ИмяГруппы, "_Группа", "");
			Если Значение И НЕ ЭтотОбъект[ИмяГруппировки] Тогда
				// Отображать группировку если выбрано хотя бы одно поле
				ЭтотОбъект[ИмяГруппировки] = Истина;
			ИначеЕсли НЕ Значение Тогда
				// Скрыть группировку, если не выбраны поля
				Если НЕ ЕстьВыводимыеПоля(Стр.ПолучитьРодителя()) Тогда
					ЭтотОбъект[ИмяГруппировки] = Ложь;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		Если НЕ ПолеСравнения=Неопределено Тогда
			// Для режима сравнения можно использовать только один показатель
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Тип", ТипПоказатель());
			СтруктураОтбора.Вставить("Создан", Истина);
			Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
			Для каждого СтрПоказатель Из Строки Цикл
				Для каждого ОписаниеЭлемента Из СтрПоказатель.Реквизиты Цикл
					Если НЕ ИмяЭлемента=ОписаниеЭлемента.Ключ Тогда
						ЭтотОбъект[ОписаниеЭлемента.Ключ] = Ложь;
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
		КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы.Очистить();
		
		//+
		
		МассивСтрок = ТаблицаКолонокОтчета.НайтиСтроки(Новый Структура("Выбрано",Истина));
		
		Для Каждого НовСтр Из МассивСтрок Цикл
			ЭлементыВыбор = КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы;
			
			ВыбранноеПоле = ЭлементыВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = НовСтр.Значение;
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Заголовок = НовСтр.Заголовок;
		КонецЦикла;
		
		ИзменитьПоказатели();
		УстановитьВидимостьИДоступность("ИзмененыПоказатели");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиКолонкиНаСервере()
	
	КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы.Очистить();
	МассивСтрок = ТаблицаКолонокОтчета.НайтиСтроки(Новый Структура("Выбрано",Истина));
	
	Для Каждого НовСтр Из МассивСтрок Цикл
		ЭлементыВыбор = КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы;
		
		ВыбранноеПоле = ЭлементыВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = НовСтр.Значение;
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок = НовСтр.Представление;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	
	Сформировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)
	
	Если Элементы.ДобавитьКолонку.Пометка Тогда
		Элементы.ДобавитьКолонку.Пометка = Ложь;
		ПоказатьМетрики = Ложь;
	иначе
		Элементы.ДобавитьКолонку.Пометка = Истина;
		ПоказатьМетрики = Истина;
	КонецЕсли;
	ОбновитьТаблицуКолонок(Элементы.ДобавитьКолонку.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуКолонок(Пометка = Неопределено)
	
	Если Пометка = Неопределено ИЛИ Пометка = Ложь Тогда
		Элементы.ТаблицаКолонокОтчета.ОтборСтрок = Неопределено;
	Иначе
		Элементы.ТаблицаКолонокОтчета.ОтборСтрок = Новый ФиксированнаяСтруктура("Выбрано", Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтр(Команда)
	
	Список = СписокБыстрыхФильтров();
	
	Список.Добавить(Неопределено, НСтр("en='Other';ru='Прочее'"),, БиблиотекаКартинок.Выбрать); 
	Если Список.Количество()=1 Тогда
		ДобавитьФильтрЗавершение(Список[0], Неопределено);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ДобавитьФильтрЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ДобавитьФильтр);
	КонецЕсли; 
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Подключаемые

&НаКлиентеНаСервереБезКонтекста
Функция ТипФильтр()
	
	Возврат "Фильтр";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипПараметр()
	
	Возврат "Параметр";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипПоказатель()
	
	Возврат "Показатель";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипГруппаПоказателей()
	
	Возврат "ГруппаПоказателей";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипГруппировка()
	
	Возврат "Группировка";	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипРеквизит()
	
	Возврат "Реквизит";	
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИДоступность(Событие = "")
	
	ПолнаяИнициализация = ПустаяСтрока(Событие);
	ИзмененыГруппировки = (Событие="ИзмененыГруппировки" ИЛИ ПустаяСтрока(Событие));
	ИзмененыПоказатели = (Событие="ИзмененыПоказатели" ИЛИ ПустаяСтрока(Событие));
	ИзмененыПериодыСравнения = (Событие="ИзмененыПериодыСравнения" ИЛИ ПустаяСтрока(Событие));
	ИзмененРежимРедактирования = (Событие="ИзмененРежимРедактирования" ИЛИ ПустаяСтрока(Событие));
	ИзмененВидДиаграммы = (Событие="ИзмененВидДиаграммы" ИЛИ ПустаяСтрока(Событие));
	ИзмененаТочкаДиаграммы = (Событие="ИзмененаТочкаДиаграммы" ИЛИ ПустаяСтрока(Событие));
	
	Если ПолнаяИнициализация Тогда
		Элементы.Вариант.Видимость = (Элементы.Вариант.СписокВыбора.Количество()>1) И НЕ РежимРасшифровки;
		Элементы.ГруппаСтроки.Видимость = НастройкиОтчета.ПоказыватьГруппуСтрокиНаФормеОтчета;
		Элементы.ГруппаКолонки.Видимость = НастройкиОтчета.ПоказыватьГруппуКолонкиНаФормеОтчета;
		Элементы.ГруппаПоказателиЭлементыИКнопки.Видимость = НастройкиОтчета.ПоказыватьПоказателиНаФормеОтчета;
		Элементы.ГруппаКомандыПоказатели.Видимость = НастройкиОтчета.ПоказыватьПоказателиНаФормеОтчета;
		Элементы.ПолеГруппировкиКолонок.Видимость = НастройкиОтчета.ПоказыватьГруппировкиКолонокНаФормеОтчета И НастройкиОтчета.ПоказыватьГруппуКолонкиНаФормеОтчета;
		Элементы.ГруппаСравнение.Видимость = НастройкиОтчета.ИспользоватьСравнение И НастройкиОтчета.РежимПериода="ЗаПериод";
		Элементы.ЗаголовокПолеСравнения.Видимость = Элементы.ГруппаСравнение.Видимость;
		Элементы.ГруппаФильтры.Видимость = НастройкиОтчета.ПоказыватьГруппуФильтрыНаФормеОтчета;
		Элементы.ЗапомнитьНастройки.Видимость = НЕ НастройкиОтчета.Контекстный;
		Элементы.ДобавитьФильтр.Видимость = НастройкиОтчета.РазрешитьДобавлениеПрочихФильтров;
		
		// Диаграммы
		Элементы.ГруппаНастройкиДиаграмм.Видимость = НастройкиОтчета.ПоказыватьНастройкиДиаграммыНаФормеОтчета;
		Элементы.ГруппаДиаграммыСерииИТочки.Видимость = НЕ НастройкиОтчета.НестандартнаяДиаграмма;
		
		Элементы.ПредставлениеПериода.Видимость = НЕ (НастройкиОтчета.РежимПериода = "БезПериода");
		Элементы.ПредставлениеПериода.Заголовок = ?(НастройкиОтчета.РежимПериода = "НаДату", НСтр("en='For date';ru='На дату'"), НСтр("en='Period';ru='Период'"));
	КонецЕсли;
	
	Если ИзмененыПоказатели ИЛИ ИзмененыПериодыСравнения Тогда
		КоличествоПоказателей = КоличествоПоказателей();
		Элементы.ГруппаВариантыСравнения.Видимость = ((КоличествоПоказателей=1 ИЛИ НЕ Истина) И ТипЗнч(ПолеСравнения)=Тип("ПеречислениеСсылка.Периодичность") И НастройкиОтчета.ИспользоватьДополнительныеРежимыСравнения);
	КонецЕсли;
	
	Если ИзмененыПоказатели Тогда
		Элементы.ГруппаСравнение.Доступность = ((КоличествоПоказателей=1 ИЛИ НЕ иСТИНА));
		Элементы.ЗаголовокПолеСравнения.Доступность = Элементы.ГруппаСравнение.Доступность;
		Элементы.РежимРедактированияКолонок.Видимость = (КоличествоПоказателей>1);
		Элементы.ДобавитьКолонку.Видимость = (КоличествоСкрытыхПоказателей()>0);
		Элементы.ОтступПоказатели.Видимость = НЕ Элементы.ДобавитьКолонку.Видимость;
	КонецЕсли;
	
	Если ИзмененыГруппировки Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипГруппировка());
		СтруктураОтбора.Вставить("Создан", Истина);
		Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
		Элементы.РежимРедактированияСтрок.Видимость = (СтруктураОтбора.Количество()>1);
	КонецЕсли; 
	
	Если ИзмененРежимРедактирования Тогда
		ОбрабатываемыеТипы = Новый Массив;
		ОбрабатываемыеТипы.Добавить(ТипГруппировка());
		ОбрабатываемыеТипы.Добавить(ТипРеквизит());
		ОбрабатываемыеТипы.Добавить(ТипПоказатель());
		ОбрабатываемыеТипы.Добавить(ТипГруппаПоказателей());
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ОбрабатываемыеТипы);
		Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
		Для каждого Стр Из Строки Цикл
			Если Стр.Тип=ТипГруппировка() ИЛИ Стр.Тип=ТипРеквизит() Тогда
				ГруппаКоманд = Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_ГруппаКоманды")];
				ГруппаКоманд.Видимость = РежимРедактированияСтрок;
			ИначеЕсли Стр.Тип=ТипПоказатель() ИЛИ Стр.Тип=ТипГруппаПоказателей() Тогда 
				ГруппаКоманд = Элементы[СтрЗаменить(Стр.ИмяГруппы, "_Группа", "_ГруппаКоманды")];
				ГруппаКоманд.Видимость = РежимРедактированияКолонок;
			КонецЕсли;
			ОбновитьЗаголовокЭлемента(Стр);
		КонецЦикла; 
		Элементы.РежимРедактированияСтрок.Картинка = ?(РежимРедактированияСтрок, БиблиотекаКартинок.CRM_РежимРедактированияСпискаЭлементовАктивно, БиблиотекаКартинок.CRM_РежимРедактированияСпискаЭлементов);
		Элементы.РежимРедактированияКолонок.Картинка = ?(РежимРедактированияКолонок, БиблиотекаКартинок.CRM_РежимРедактированияСпискаЭлементовАктивно, БиблиотекаКартинок.CRM_РежимРедактированияСпискаЭлементов);
	КонецЕсли;
	
	Если ПолнаяИнициализация Тогда
		
		Элементы.СтраницыНастройки.Видимость = 
		Элементы.Вариант.Видимость
		ИЛИ Элементы.ГруппаПараметрыЭлементы.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаСтрокиЭлементы.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаПоказателиЭлементы.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаДополнительныеНастройки.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаФильтрЭлементы.ПодчиненныеЭлементы.Количество()>0
		ИЛИ Элементы.ГруппаСравнение.Видимость
		ИЛИ Элементы.ПолеГруппировкиКолонок.Видимость;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция НестандартнаяДиаграмма(Настройки)
	
	НастройкиОтчета.Вставить("ВыводитьТолькоТочки", Ложь);
	
	НастройкиОтчета.Вставить("ИзменятьЗначенияДиаграммы", Истина);
	
	ЭлементДиаграмма = ЭлементСтуктурыДиаграмма(Настройки.Структура);
	Если ЭлементДиаграмма=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тип = ТипДиаграммыЭлементаСтруктуры(ЭлементДиаграмма);
	
	Если Тип=ТипДиаграммы.Круговая ИЛИ Тип=ТипДиаграммы.КруговаяОбъемная Тогда
		НастройкиОтчета.Вставить("ВыводитьТолькоТочки", Истина);
		Если ЭлементДиаграмма.Серии.Количество()>1 ИЛИ ЭлементДиаграмма.Точки.Количество()>1 Тогда
			Возврат Истина;
		КонецЕсли;
		Серии = ?(ЭлементДиаграмма.Серии.Количество()=0, ЭлементДиаграмма.Точки, ЭлементДиаграмма.Серии);
		Точки = ?(ЭлементДиаграмма.Точки.Количество()=0, ЭлементДиаграмма.Серии, ЭлементДиаграмма.Точки);
	ИначеЕсли ЭлементДиаграмма.Серии.Количество()>1 ИЛИ ЭлементДиаграмма.Точки.Количество()>1 Тогда
		Возврат Истина;
	Иначе
		Серии = ЭлементДиаграмма.Серии;
		Точки = ЭлементДиаграмма.Точки;
	КонецЕсли;
	
	Если Серии.Количество()=0 И Точки.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоляСерий = ?(Серии.Количество()=0, Неопределено, Серии[0].ПоляГруппировки.Элементы);
	ПоляТочек = ?(Точки.Количество()=0, Неопределено, Точки[0].ПоляГруппировки.Элементы);
	
	Если НЕ ПоляСерий=Неопределено Тогда
		Если НЕ ПоляСерий.Количество()=1 Тогда
			Возврат Истина;
		КонецЕсли; 
		Если НЕ ТипЗнч(ПоляСерий[0])=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; 
	Если НЕ ПоляТочек=Неопределено Тогда
		Если НЕ ПоляТочек.Количество()=1 Тогда
			Возврат Истина;
		КонецЕсли; 
		Если НЕ ТипЗнч(ПоляТочек[0])=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокЭлемента(Стр)
	
	Если Стр.Тип<>ТипГруппировка() И Стр.Тип<>ТипРеквизит() И Стр.Тип<>ТипПоказатель() И Стр.Тип<>ТипГруппаПоказателей() Тогда
		Возврат;
	КонецЕсли;
	Если Стр.Тип=ТипРеквизит() Тогда
		ШиринаЗаголовка = 23-?(РежимРедактированияСтрок, 7, 0);
	ИначеЕсли Стр.Тип=ТипГруппировка() Тогда 
		ШиринаЗаголовка = 28-?(РежимРедактированияСтрок, 7, 0)-?(Стр.ДополнительныеПараметры.Свойство("ТипГруппировки"), 4, 0);
	ИначеЕсли Стр.Тип=ТипПоказатель() И НЕ Стр.ПолучитьРодителя()=Неопределено Тогда
		ШиринаЗаголовка = 23-?(РежимРедактированияКолонок, 7, 0);
	Иначе
		ШиринаЗаголовка = 28-?(РежимРедактированияКолонок, 7, 0);
	КонецЕсли; 
	Для каждого ОписаниеЭлемента Из Стр.Элементы Цикл
		Элемент = Элементы[ОписаниеЭлемента.Ключ];
		Если СтрДлина(Стр.Заголовок)<=ШиринаЗаголовка Тогда
			Элемент.Заголовок = Стр.Заголовок;
			Элемент.Подсказка = "";
		Иначе
			Элемент.Заголовок = Лев(Стр.Заголовок, ШиринаЗаголовка-2)+"...";
			Элемент.Подсказка = Стр.Заголовок;
		КонецЕсли; 
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Функция КоличествоПоказателей()
	
	КоличествоПоказателей = 0;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипПоказатель());
	СтруктураОтбора.Вставить("Создан", Истина);
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
	Для каждого Стр Из Строки Цикл
		Для каждого ОписаниеЭлемента Из Стр.Элементы Цикл
			Если ЭтотОбъект[ОписаниеЭлемента.Ключ] Тогда
				КоличествоПоказателей = КоличествоПоказателей+1;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;  
	Возврат КоличествоПоказателей;
	
КонецФункции

&НаСервере
Функция КоличествоСкрытыхПоказателей()
	
	Список = СписокДополнительныхКолонок();
	Возврат Список.Количество();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКомандыВыбораВариантов()
	
	Элементы.Вариант.СписокВыбора.Очистить();
	
	Для каждого Стр Из ТаблицаВариантов() Цикл
		Элементы.Вариант.СписокВыбора.Добавить(Стр.Ссылка, Стр.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаВариантов(ТолькоВидимые = Истина)
	
	Если ТипЗнч(НастройкиОтчета.ОтчетСсылка)=Тип("Строка") Тогда
		// Для внешних отчетов добавляются варианты из схемы
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Ссылка");
		Результат.Колонки.Добавить("КлючВарианта");
		Результат.Колонки.Добавить("Наименование");
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.Наименование = ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта = ЭлементСписка.Значение;
		КонецЦикла;
	ИначеЕсли ТолькоВидимые Тогда
		// Заполнение списка вариантов на форме
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
		Запрос.Параметры.Вставить("ОтключенныеПредопределенныеВарианты", CRM_ОтчетыПовтИсп.ПредопределенныеВариантыНедоступныеПоФО());
		Запрос.Параметры.Вставить("ОтключенныеВарианты", CRM_ОтчетыПовтИсп.ВариантыНедоступныеПоФО());
		Запрос.Параметры.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
		Запрос.Параметры.Вставить("Контекстный", НастройкиОтчета.Контекстный);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетов.Ссылка КАК Ссылка,
		|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		|	ВариантыОтчетов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И НЕ ВариантыОтчетов.ПометкаУдаления
		|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеПредопределенныеВарианты)
		|	И НЕ ВариантыОтчетов.Ссылка В (&ОтключенныеВарианты)
		|	И (ЕСТЬNULL(ВариантыОтчетов.ПредопределенныйВариант.Включен, ИСТИНА)
		|			ИЛИ &Контекстный)
		|	И (НЕ ВариантыОтчетов.ТолькоДляАвтора
		|			ИЛИ ВариантыОтчетов.Автор = &ТекущийПользователь
		|			ИЛИ ВариантыОтчетов.Автор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование,
		|	КлючВарианта";
		Результат = Запрос.Выполнить().Выгрузить();
	Иначе
		// Для получения настроек вариантов используется выборка предопределенных
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетов.Ссылка КАК Ссылка,
		|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
		|	ВариантыОтчетов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И НЕ ВариантыОтчетов.ПометкаУдаления
		|	И НЕ ВариантыОтчетов.Пользовательский
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование,
		|	КлючВарианта";
		Результат = Запрос.Выполнить().Выгрузить();
	КонецЕсли; 
	Результат.Свернуть("Ссылка, КлючВарианта, Наименование");
	Результат.Сортировать("Наименование Возр, КлючВарианта Возр");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КоличествоГруппировокТаблицыРекурсивно(Структура, Уровень = 0)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ГруппировкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ТаблицаКомпоновкиДанных") Тогда
			Уровень = Макс(Уровень, КоличествоГруппировокТаблицыРекурсивно(ЭлементСтруктуры.Колонки));
		КонецЕсли;
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Уровень = КоличествоГруппировокТаблицыРекурсивно(ЭлементСтруктуры.Структура, Уровень+1);
		КонецЕсли; 
	КонецЦикла; 
	Возврат Уровень;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСтуктурыДиаграмма(ЭлементыСтруктуры, Создать = Ложь)
	
	Для каждого ЭлементСтруктуры Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ДиаграммаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры;
		КонецЕсли; 
	КонецЦикла;
	Если Создать Тогда
		ЭлементСтруктуры = ?(ЭлементыСтруктуры.Количество()>0, ЭлементыСтруктуры.Вставить(0, Тип("ДиаграммаКомпоновкиДанных")), ЭлементыСтруктуры.Добавить(Тип("ДиаграммаКомпоновкиДанных")));
		ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Возврат ЭлементСтруктуры;
	КонецЕсли; 
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЭлементСтуктурыГруппировкаТаблица(ЭлементыСтруктуры)
	
	Для каждого ЭлементСтруктуры Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(ЭлементСтруктуры)=Тип("ТаблицаКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементСтруктуры)=Тип("ГруппировкаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры;
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОтметитьНеактуальным()
	
	ВнестиИзмененияВРеквизитыНаФорме(Истина);
	
	ЗаполнитьДиаграммуПоказателей();
	
	СформироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать()
	
	СформироватьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СФормироватьДиаграмму()
	
	ОтчетТабличныйДокумент.Очистить();
	
	Если АдресКеширования = Неопределено Тогда
		ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	КэшированныеЗначения = ПолучитьИзВременногоХранилища(АдресКеширования);
	
	СхемаКомпоновкиДанных			= КэшированныеЗначения.СхемаКомпоновкиДанных;
	Настройки						= КэшированныеЗначения.Настройки;
	ДанныеРасшифровки				= КэшированныеЗначения.ДиаграммаДанныеРасшифровки;
	КомпоновщикМакета               = КэшированныеЗначения.ДиаграммаКомпоновщикМакета;
	ПроцессорКомпоновкиДанных       = КэшированныеЗначения.ДиаграммаПроцессорКомпоновкиДанных;
	ПроцессорВывода                 = КэшированныеЗначения.ДиаграммаПроцессорВывода;
	
	ПолеПоиска = Новый ПолеКомпоновкиДанных("РекламнаяКампания");
	
	Источники = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для Каждого СтрИсточники Из Источники Цикл
		
		Если СтрИсточники.ЛевоеЗначение = ПолеПоиска Тогда
			
			Выборка = "";
			ПервыйПроход = истина;
			
			Если РекламныеКампании.Количество() = 0 Тогда
				СтрИсточники.Использование = Ложь;
			Иначе
				СтрИсточники.Использование = Истина;
			КонецЕсли;
			СтрИсточники.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			
			СтрИсточники.ПравоеЗначение = РекламныеКампании;
			
			Выборка = "";
			
			СхемаКомпоновкиДанных.Параметры.Выборка.Значение = Выборка;
			
			ПарамВыборка = Настройки.ПараметрыДанных.Элементы.Найти("Выборка");
			
			Если ПарамВыборка = Неопределено Тогда
				
				НоваяСтр = Настройки.ПараметрыДанных.Элементы.Добавить();	
				
				НоваяСтр.Параметр = Новый ПараметрКомпоновкиДанных("Выборка");
				НоваяСтр.Использование = Истина;
				НоваяСтр.Значение = ВЫборка;
				
			ИНаче
				
				ПарамВыборка.Использование = Истина;
				ПарамВыборка.Значение = ВЫборка;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПоказателей.Количество() > 0 Тогда
		
		Настройки.Выбор.Элементы.Очистить();
		
		Для Каждого СтрДиаграмма Из ТаблицаПоказателей Цикл
			
			Если СтрДиаграмма.Выбрано Тогда
				
				НовСтр = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				НовСтр.Поле = СтрДиаграмма.Значение;
				НовСтр.Использование = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтПериод = Настройки.ПараметрыДанных.Элементы.Найти("период");
	
	Если НЕ СтПериод = Неопределено Тогда
		
		СтандартныйПериод = Новый СтандартныйПериод;
		СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		СтандартныйПериод.ДатаНачала = Период.ДатаНачала;
		СтандартныйПериод.ДатаОкончания = Период.ДатаОкончания;
		
		СтПериод.Значение = СтандартныйПериод;
		
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(ОтчетТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Для Каждого Стр Из ОтчетТабличныйДокумент.Рисунки[0].Объект.Серии Цикл
		
		Стр.Текст = Сокрлп(СтрЗаменить(Стр.Текст,",",""));
		
	КонецЦикла;
	
	ОтчетТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ОтчетТабличныйДокумент.ОтображатьСетку = Ложь;
	
	КэшированныеЗначения.Вставить("ДиаграммаДанныеРасшифровки",ДанныеРасшифровки);
	КэшированныеЗначения.Вставить("ДиаграммаКомпоновщикМакета",КомпоновщикМакета);
	КэшированныеЗначения.Вставить("ДиаграммаПроцессорКомпоновкиДанных",ПроцессорКомпоновкиДанных);
	КэшированныеЗначения.Вставить("ДиаграммаПроцессорВывода",ПроцессорВывода);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицу()
	
	ОтчетТабличныйДокументТаблица.Очистить();
	
	Если АдресКеширования = Неопределено Тогда
		ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	КэшированныеЗначения = ПолучитьИзВременногоХранилища(АдресКеширования);
	
	СхемаКомпоновкиДанныхТаблица	= КэшированныеЗначения.СхемаКомпоновкиДанныхТаблица;
	Настройки						= КэшированныеЗначения.НастройкиТаблица;
	ДанныеРасшифровки				= КэшированныеЗначения.ДанныеРасшифровки;
	КомпоновщикМакета               = КэшированныеЗначения.КомпоновщикМакета;
	ПроцессорКомпоновкиДанных       = КэшированныеЗначения.ПроцессорКомпоновкиДанных;
	ПроцессорВывода                 = КэшированныеЗначения.ПроцессорВывода;
	
	ПолеПоиска = Новый ПолеКомпоновкиДанных("РекламнаяКампания");
	
	Источники = Настройки.Отбор.Элементы;
	
	Для Каждого СтрИсточники Из Источники Цикл
		
		Если СтрИсточники.ЛевоеЗначение = ПолеПоиска Тогда
			
			Выборка = "";
			ПервыйПроход = истина;
			
			Если РекламныеКампании.Количество() = 0 Тогда
				СтрИсточники.Использование = Ложь;
			Иначе
				СтрИсточники.Использование = Истина;
			КонецЕсли;
			СтрИсточники.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			
			СтрИсточники.ПравоеЗначение = РекламныеКампании;
			
			Выборка = Элементы.ВыборРекламнойКампании.Заголовок;
			
			СхемаКомпоновкиДанныхТаблица.Параметры.Выборка.Значение = Выборка;
			
			ПарамВыборка = Настройки.ПараметрыДанных.Элементы.Найти("Выборка");
			
			Если ПарамВыборка = Неопределено Тогда
				
				НоваяСтр = Настройки.ПараметрыДанных.Элементы.Добавить();	
				
				НоваяСтр.Параметр = Новый ПараметрКомпоновкиДанных("Выборка");
				НоваяСтр.Использование = Истина;
				НоваяСтр.Значение = ВЫборка;
				
			Иначе
				
				ПарамВыборка.Использование = Истина;
				ПарамВыборка.Значение = ВЫборка;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтПериод = Настройки.ПараметрыДанных.Элементы.Найти("период");
	
	Если НЕ СтПериод = Неопределено Тогда
		
		СтандартныйПериод = Новый СтандартныйПериод;
		СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		СтандартныйПериод.ДатаНачала = Период.ДатаНачала;
		СтандартныйПериод.ДатаОкончания = Период.ДатаОкончания;
		
		СтПериод.Значение = СтандартныйПериод;
		
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхТаблица, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(ОтчетТабличныйДокументТаблица);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,ЭтотОбъект.УникальныйИдентификатор);
	
	ОтчетТабличныйДокументТаблица.ОтображатьЗаголовки = Ложь;
	ОтчетТабличныйДокументТаблица.ОтображатьСетку = Ложь;
	ОтчетТабличныйДокументТаблица.Защита = Истина;
	
	КэшированныеЗначения.Вставить("ДанныеРасшифровки",ДанныеРасшифровки);
	КэшированныеЗначения.Вставить("КомпоновщикМакета",КомпоновщикМакета);
	КэшированныеЗначения.Вставить("ПроцессорКомпоновкиДанных",ПроцессорКомпоновкиДанных);
	КэшированныеЗначения.Вставить("ПроцессорВывода",ПроцессорВывода);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере();

	СФормироватьДиаграмму();

	Если ИспользоватьДС Тогда
		СформироватьОбновитьДС();

	Иначе
		СформироватьТаблицу();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьОбновитьДС()
	
	ФильтрРекламныеКампании = Ложь;
	ОтборРекламныеКампании = Новый Массив();
	Если РекламныеКампании.Количество() > 0 Тогда
		ФильтрРекламныеКампании = Истина;
		
		ОтборРекламныеКампании = РекламныеКампании.ВыгрузитьЗначения();
		
		ТекИндекс = ОтборРекламныеКампании.Найти("<Пустое значение>");
		Если ТекИндекс <> Неопределено Тогда
			ОтборРекламныеКампании.Удалить(ТекИндекс);
			ОтборРекламныеКампании.Добавить(Справочники.МаркетинговыеМероприятия.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	ДСПоКампаниям.Параметры.УстановитьЗначениеПараметра("Период1", Период.ДатаНачала);
	ДСПоКампаниям.Параметры.УстановитьЗначениеПараметра("Период2", Период.ДатаОкончания);
	ДСПоКампаниям.Параметры.УстановитьЗначениеПараметра("ФильтрРекламныеКампании", ФильтрРекламныеКампании);
	ДСПоКампаниям.Параметры.УстановитьЗначениеПараметра("РекламныеКампании", ОтборРекламныеКампании);
		
	ДСПоЦелям.Параметры.УстановитьЗначениеПараметра("Период1", Период.ДатаНачала);
	ДСПоЦелям.Параметры.УстановитьЗначениеПараметра("Период2", Период.ДатаОкончания);
	ДСПоЦелям.Параметры.УстановитьЗначениеПараметра("ФильтрРекламныеКампании", ФильтрРекламныеКампании);
	ДСПоЦелям.Параметры.УстановитьЗначениеПараметра("РекламныеКампании", ОтборРекламныеКампании);
	
	ДСПоИсточникам.Параметры.УстановитьЗначениеПараметра("Период1", Период.ДатаНачала);
	ДСПоИсточникам.Параметры.УстановитьЗначениеПараметра("Период2", Период.ДатаОкончания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьСтруктуруРекурсивно(Источник, Приемник, СхемаКомпоновкиДанных, СкрытьСравнение = Ложь)
	
	Для каждого ЭлементИсточник Из Источник Цикл
		Если ТипЗнч(ЭлементИсточник)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементИсточник)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Если ТипЗнч(Приемник)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
				ЭлементПриемник = Приемник.Добавить();
			Иначе
				ЭлементПриемник = Приемник.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли; 
			ЭлементПриемник.Использование = ЭлементИсточник.Использование;
			СкопироватьВыборРекурсивно(ЭлементИсточник.Выбор.Элементы, ЭлементПриемник.Выбор.Элементы);
			Для каждого ПолеИсточник Из ЭлементИсточник.ПоляГруппировки.Элементы Цикл
				ПолеПриемник = ЭлементПриемник.ПоляГруппировки.Элементы.Добавить(ТипЗнч(ПолеИсточник));
				Если ТипЗнч(ПолеИсточник)=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					ПолеПриемник.Использование = ПолеИсточник.Использование;
					ПолеПриемник.Поле = ПолеИсточник.Поле;
					ПолеПриемник.ТипГруппировки = ПолеИсточник.ТипГруппировки;
					ПолеПриемник.ТипДополнения = ПолеИсточник.ТипДополнения;
					ПолеПриемник.НачалоПериода = ПолеИсточник.НачалоПериода;
					ПолеПриемник.КонецПериода = ПолеИсточник.КонецПериода;
					ПолеСхемы = CRM_Отчеты.ПолеСхемы(СхемаКомпоновкиДанных, ПолеИсточник.Поле);
					Если ТипЗнч(ПолеСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ПолеСхемы.Роль.НомерПериода>0 Тогда
						ЭлементПриемник.Использование = НЕ СкрытьСравнение;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			Для каждого ПорядокИсточник Из ЭлементИсточник.Порядок.Элементы Цикл
				ПорядокПриемник = ЭлементПриемник.Порядок.Элементы.Добавить(ТипЗнч(ПорядокИсточник));
				Если ТипЗнч(ПорядокИсточник)=Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
					ПорядокПриемник.Использование = ПорядокИсточник.Использование;
					ПорядокПриемник.Поле = ПорядокИсточник.Поле;
					ПорядокПриемник.ТипУпорядочивания = ПорядокИсточник.ТипУпорядочивания;
				КонецЕсли; 
			КонецЦикла; 
			СкопироватьСтруктуруРекурсивно(ЭлементИсточник.Структура, ЭлементПриемник.Структура, СхемаКомпоновкиДанных, СкрытьСравнение);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьВыборРекурсивно(Источник, Приемник)
	
	Для каждого ИсточникВыбор Из Источник Цикл
		ПриемникВыбор = Приемник.Добавить(ТипЗнч(ИсточникВыбор));
		ПриемникВыбор.Использование = ИсточникВыбор.Использование;
		Если ТипЗнч(ИсточникВыбор)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			ПриемникВыбор.Поле = ИсточникВыбор.Поле;
			ПриемникВыбор.Заголовок = ИсточникВыбор.Заголовок;
		ИначеЕсли ТипЗнч(ИсточникВыбор)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьВыборРекурсивно(ИсточникВыбор.Элементы, ПриемникВыбор.Элементы);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСовместимостьВарианта()
	
	ДополнительныеСвойства = КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
	// Не более одной вложенной группировки для колонок таблицы
	КоличествоГруппировокКолонок = КоличествоГруппировокТаблицыРекурсивно(КомпоновщикНастроек.Настройки.Структура);
	ЕстьСоставныеГруппировкиКолонок = ЕстьСоставныеГруппировкиКолонок(КомпоновщикНастроек.Настройки.Структура);
	Если НЕ ДополнительныеСвойства.Свойство("Сравнение") И КоличествоГруппировокКолонок=2 Тогда
		// "Заводская" настройка
		КоличествоПоказателей = КоличествоПоказателейСКД();
		Если КоличествоПоказателей=1 Тогда
			// Можно использовать режим сравнения
			КоличествоГруппировокКолонок = КоличествоГруппировокКолонок-1;
		КонецЕсли; 
	ИначеЕсли ДополнительныеСвойства.Свойство("Сравнение") И ЗначениеЗаполнено(ДополнительныеСвойства.Сравнение) Тогда
		// Без учета группировки сравнения
		КоличествоГруппировокКолонок = КоличествоГруппировокКолонок-1;
	КонецЕсли; 
	Если КоличествоГруппировокКолонок>1 ИЛИ ЕстьСоставныеГруппировкиКолонок Тогда
		НастройкиОтчета.Вставить("ИспользоватьСравнение", Ложь);
		НастройкиОтчета.Вставить("ПоказыватьГруппировкиКолонокНаФормеОтчета", Ложь);
	КонецЕсли;
	
	// Отсутствуют вложенные настройки выбранных полей
	НастройкиОтчета.Вставить("ПоказыватьГруппуКолонкиНаФормеОтчета", Истина);
	
	// Диаграммы
	Если НЕ ЭлементСтуктурыДиаграмма(КомпоновщикНастроек.Настройки.Структура)=Неопределено Тогда
		НастройкиОтчета.Вставить("ЭтоДиаграмма", Истина);
	Иначе
		НастройкиОтчета.Вставить("ЭтоДиаграмма", Ложь);
	КонецЕсли; 
	НастройкиОтчета.Вставить("НестандартнаяДиаграмма", НестандартнаяДиаграмма(КомпоновщикНастроек.Настройки));
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество()>1 Тогда
		КоличествоДиаграмм = 0;
		КоличествоГруппировок = 0;
		Для каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			Если НЕ ЭлементСтруктуры.Использование Тогда
				Продолжить;
			КонецЕсли; 
			Если ТипЗнч(ЭлементСтруктуры)=Тип("ТаблицаКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементСтруктуры)=Тип("ГруппировкаКомпоновкиДанных") Тогда
				КоличествоГруппировок = КоличествоГруппировок+1;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры)=Тип("ДиаграммаКомпоновкиДанных") Тогда
				КоличествоДиаграмм = КоличествоДиаграмм+1;
			КонецЕсли; 
		КонецЦикла;
		Если КоличествоГруппировок>1 Тогда
			НастройкиОтчета.ПоказыватьГруппуСтрокиНаФормеОтчета = Ложь;
		КонецЕсли; 
		Если КоличествоДиаграмм>1 Тогда
			НастройкиОтчета.Вставить("НестандартнаяДиаграмма", Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиНаФорме()
	
	ПроверитьСовместимостьВарианта();
	
	ОбновитьПериодНаФорме();
	
	ЗаполнитьВариантыГруппировкиКолонок();
	
	ЗаполнитьОписанияПоказателей();
	
	ЗаполнитьОписанияГруппировок();
	
	ВнестиИзмененияВРеквизитыНаФорме();
	
КонецПроцедуры

&НаСервере
Функция ТипДиаграммыЭлементаСтруктуры(ЭлементДиаграмма)
	
	Если НЕ ТипЗнч(ЭлементДиаграмма)=Тип("ДиаграммаКомпоновкиДанных") ИЛИ НЕ ЭлементДиаграмма.Использование Тогда
		Возврат Неопределено;
	КонецЕсли;
	Настройки = КомпоновщикНастроек.Настройки;
	Параметр = ЭлементДиаграмма.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
	Если Параметр=Неопределено ИЛИ НЕ Параметр.Использование Тогда
		Параметр = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипДиаграммы"));
	КонецЕсли; 
	Если НЕ Параметр=Неопределено И Параметр.Использование Тогда
		Тип = Параметр.Значение;
	Иначе
		Тип = ТипДиаграммы.Гистограмма;
		Если НЕ Параметр=Неопределено Тогда
			Параметр.Значение = Тип;
			Параметр.Использование = Истина;
		КонецЕсли; 
	КонецЕсли;
	Возврат Тип;
	
КонецФункции

&НаСервере
Процедура ОбновитьНастройкиДиаграммыНаФорме()
	
	ДиаграммаСерии = Неопределено;
	ДиаграммаТочки = Неопределено;
	ДиаграммаЗначения = Неопределено;
	
	Настройки = КомпоновщикНастроек.Настройки;
	ЭлементДиаграмма = ЭлементСтуктурыДиаграмма(Настройки.Структура);
	Если ЭлементДиаграмма=Неопределено Тогда
		ВидДиаграммы = Неопределено;
		Возврат;
	КонецЕсли; 
	
	ВидДиаграммы = ТипДиаграммыЭлементаСтруктуры(ЭлементДиаграмма);
	
	Если НастройкиОтчета.ИзменятьЗначенияДиаграммы Тогда
		Если ЭлементДиаграмма.Выбор.Элементы.Количество()=1 И ТипЗнч(ЭлементДиаграмма.Выбор.Элементы[0])=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			ЭлементыВыбора = Настройки.Выбор.Элементы;
		Иначе
			ЭлементыВыбора = ЭлементДиаграмма.Выбор.Элементы;
		КонецЕсли;
		Для каждого ЭлементВыбора Из ЭлементыВыбора Цикл
			Если ТипЗнч(ЭлементВыбора)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") ИЛИ ТипЗнч(ЭлементВыбора)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ДоступноеПоле = Настройки.ДоступныеПоляВыбора.НайтиПоле(ЭлементВыбора.Поле);
			Если ДоступноеПоле=Неопределено ИЛИ НЕ ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			ДиаграммаЗначения = Строка(ЭлементВыбора.Поле);
		КонецЦикла; 
	КонецЕсли; 
	
	Если НастройкиОтчета.НестандартнаяДиаграмма Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяСерии = ?(ЭлементДиаграмма.Серии.Количество()=0, "", Строка(ЭлементДиаграмма.Серии[0].ПоляГруппировки.Элементы[0].Поле));
	ИмяТочки = ?(ЭлементДиаграмма.Точки.Количество()=0, "", Строка(ЭлементДиаграмма.Точки[0].ПоляГруппировки.Элементы[0].Поле));
	Если ИмяТочки="ДинамическийПериод" Тогда
		ПараметрДанныхПериодичность = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
		Если ПараметрДанныхПериодичность=Неопределено ИЛИ НЕ ПараметрДанныхПериодичность.Использование ИЛИ НЕ ЗначениеЗаполнено(ПараметрДанныхПериодичность.Значение) Тогда
			ИмяТочки = CRM_Отчеты.ПолучитьЗначениеПериодичности(Период.ДатаНачала, Период.ДатаОкончания);
		Иначе
			ИмяТочки = ПараметрДанныхПериодичность.Значение;
		КонецЕсли; 
	КонецЕсли;
	Если ПустаяСтрока(ИмяТочки) И НЕ ПустаяСтрока(ИмяСерии) Тогда
		ИмяТочки = ИмяСерии;
		ИмяСерии = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТочки) Тогда
		Если ДоступныеТочки.НайтиПоЗначению(ИмяТочки)=Неопределено Тогда
			Если ТипЗнч(ИмяТочки)=Тип("ПеречислениеСсылка.Периодичность") Тогда
				ДоступныеТочки.Вставить(ДоступныеТочки.Количество()-1, ИмяТочки, Строка(ИмяТочки));
				Элементы.ДиаграммаТочки.СписокВыбора.Вставить(Элементы.ДиаграммаТочки.СписокВыбора.Количество()-1, ИмяТочки, Строка(ИмяТочки));
			Иначе
				ДоступноеПоле = Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяТочки));
				Если НЕ ДоступноеПоле=Неопределено Тогда
					ДоступныеТочки.Вставить(ДоступныеТочки.Количество()-1, ИмяТочки, ДоступноеПоле.Заголовок);
					Элементы.ДиаграммаТочки.СписокВыбора.Вставить(Элементы.ДиаграммаТочки.СписокВыбора.Количество()-1, ИмяТочки, ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		ДиаграммаТочки = ИмяТочки;  
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяСерии) Тогда
		Если ДоступныеСерии.НайтиПоЗначению(ИмяСерии)=Неопределено Тогда
			ДоступноеПоле = Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяСерии));
			Если НЕ ДоступноеПоле=Неопределено Тогда
				ДоступныеСерии.Вставить(ДоступныеСерии.Количество()-1, ИмяСерии, ДоступноеПоле.Заголовок);
				Элементы.ДиаграммаСерии.СписокВыбора.Вставить(Элементы.ДиаграммаСерии.СписокВыбора.Количество()-1, ИмяСерии, ДоступноеПоле.Заголовок);
			КонецЕсли;
		КонецЕсли;
		ДиаграммаСерии = ИмяСерии;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиДиаграммы()
	
	Настройки = КомпоновщикНастроек.Настройки;
	ЭлементДиаграмма = ЭлементСтуктурыДиаграмма(Настройки.Структура, Истина);
	Если ЭлементДиаграмма=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементДиаграмма.Использование = ЗначениеЗаполнено(ВидДиаграммы);
	Если НЕ НастройкиОтчета.НестандартнаяДиаграмма Тогда
		ЭлементДиаграмма.Серии.Очистить();
		ЭлементДиаграмма.Точки.Очистить();
	КонецЕсли; 
	Если НастройкиОтчета.ИзменятьЗначенияДиаграммы Тогда
		ЭлементДиаграмма.Выбор.Элементы.Очистить();
	КонецЕсли; 
	
	Если ТипЗнч(ДиаграммаТочки)=Тип("ПеречислениеСсылка.Периодичность") Тогда
		ИмяГруппировкиТочки = "ДинамическийПериод";
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Периодичность", ДиаграммаТочки);
	Иначе
		ИмяГруппировкиТочки = ДиаграммаТочки;
	КонецЕсли; 
	Если НЕ НастройкиОтчета.НестандартнаяДиаграмма И ЗначениеЗаполнено(ДиаграммаТочки) Тогда
		Точка = ЭлементДиаграмма.Точки.Добавить();
		Поле = Точка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяГруппировкиТочки);
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Поле.Использование = Истина;
		Точка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Точка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		Точка.Использование = Истина;
	КонецЕсли;
	Если НЕ НастройкиОтчета.НестандартнаяДиаграмма И НЕ НастройкиОтчета.ВыводитьТолькоТочки И ЗначениеЗаполнено(ДиаграммаТочки) И ЗначениеЗаполнено(ДиаграммаСерии) Тогда
		Серия = ЭлементДиаграмма.Серии.Добавить();
		Поле = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(ДиаграммаСерии);
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Поле.Использование = Истина;
		Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Серия.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		Серия.Использование = Истина;
	КонецЕсли; 
	Если НастройкиОтчета.ИзменятьЗначенияДиаграммы Тогда
		Если ЗначениеЗаполнено(ДиаграммаЗначения) Тогда
			ЭлементВыбор = ЭлементДиаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЭлементВыбор.Использование = Истина;
			ЭлементВыбор.Поле = Новый ПолеКомпоновкиДанных(ДиаграммаЗначения);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПериодНаФорме()
	
	Если НЕ ПоляНастроек.ПолучитьЭлементы().Количество()=0 Тогда
		// Не первая загрузка варианта
		Возврат;
	КонецЕсли;
	
	ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	Если ПараметрПериод=Неопределено Тогда
		ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета");
	КонецЕсли;
	Если ПараметрПериод=Неопределено Тогда
		ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	КонецЕсли;
	Если ПараметрПериод=Неопределено ИЛИ НЕ ПараметрПериод.Использование Тогда
		Период = Новый СтандартныйПериод;
		
	ИначеЕсли ТипЗнч(ПараметрПериод.Значение)=Тип("Дата") Тогда
		Период = Новый СтандартныйПериод('0001-01-01', ПараметрПериод.Значение);
	ИначеЕсли ТипЗнч(ПараметрПериод.Значение)=Тип("СтандартныйПериод") Тогда
		Период = ПараметрПериод.Значение;
	ИначеЕсли ТипЗнч(ПараметрПериод.Значение)=Тип("СтандартнаяДатаНачала") Тогда
		Период = Новый СтандартныйПериод('0001-01-01', ПараметрПериод.Значение.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа, МассивЭлементов, МассивРеквизитов)
	
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент, МассивЭлементов, МассивРеквизитов);
		ИначеЕсли ТипЗнч(Элемент)=Тип("КомандаФормы") Тогда
			Команды.Удалить(Команды.Найти(Элемент.ИмяКоманды));
		ИначеЕсли ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент.КонтекстноеМеню, МассивЭлементов, МассивРеквизитов);
			Позиция = Найти(Элемент.ПутьКДанным, ".");
			Если Позиция>0 Тогда
				ИмяРеквизита = Лев(Элемент.ПутьКДанным, Позиция-1);
			Иначе
				ИмяРеквизита = Элемент.ПутьКДанным;
			КонецЕсли;
			Если МассивРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
				МассивРеквизитов.Добавить(ИмяРеквизита);
			КонецЕсли; 
		КонецЕсли;
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ВнестиИзмененияВРеквизитыНаФорме(ПолнаяЗамена = Истина)
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	Если ПолнаяЗамена Тогда
		МассивУдаляемыхЭлементов = Новый Массив;
		УдалитьЭлементыРекурсивно(Элементы.ГруппаПараметрыЭлементы, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаСтрокиЭлементы, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаПоказателиЭлементы, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаФильтрЭлементы, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаДополнительныеНастройки, МассивУдаляемыхЭлементов, МассивУдаляемыхРеквизитов);
		Для каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Элементы.Удалить(Элемент);
		КонецЦикла; 
	КонецЕсли; 
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивИмен = Новый Массив;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Создан", Ложь);
	СтруктураОтбора.Вставить("Скрыт", Ложь);
	Идентификаторы = ИдентификаторыСтрок(ПоляНастроек, СтруктураОтбора, Истина);
	Для каждого Идентификатор Из Идентификаторы Цикл
		Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
		Для каждого Элемент Из Стр.Реквизиты Цикл
			Если НЕ МассивИмен.Найти(Элемент.Ключ)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			// Булевые фильтры отображаем с тремя состояниями 
			Если Стр.Тип=ТипФильтр() 
				И ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Стр.ТипЗначения, Тип("Булево")) 
				И НЕ Стр.ВидЭлемента="Флажок" 
				И НЕ Стр.ВидЭлемента="Булево" Тогда
				ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_БулевоТриСостояния");
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Элемент.Ключ, ОписаниеТипов,, Стр.Заголовок));
			Иначе
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Элемент.Ключ, Стр.ТипЗначения,, Стр.Заголовок));
			КонецЕсли; 
			МассивИмен.Добавить(Элемент.Ключ);
		КонецЦикла; 
	КонецЦикла;
	
	Если МассивДобавляемыхРеквизитов.Количество()>0 ИЛИ МассивУдаляемыхРеквизитов.Количество()>0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	КонецЕсли; 
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
		Если Стр.Тип=ТипПоказатель() ИЛИ Стр.Тип=ТипГруппаПоказателей() Тогда
			ДобавитьЭлементГруппаПоказателейПоказатель(Стр);
		ИначеЕсли Стр.Тип=ТипГруппировка() Тогда
			ДобавитьЭлементГруппировка(Стр);
		ИначеЕсли Стр.Тип=ТипРеквизит() Тогда
			ДобавитьЭлементРеквизит(Стр);
		ИначеЕсли Стр.Тип=ТипПараметр() Тогда
			Если Стр.ВидЭлемента="Поле" Тогда
				Параметр = КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый  ПараметрКомпоновкиДанных(Стр.Поле));
				Если ЗначениеЗаполнено(Параметр.ДоступныеЗначения) Тогда
					ПараметрыВыбора = Параметр.ДоступныеЗначения;
				Иначе
					ПараметрыВыбора = Неопределено;
				КонецЕсли; 
			Иначе
				ПараметрыВыбора = Неопределено;
			КонецЕсли; 
			CRM_Отчеты.ДобавитьЭлементФильтр(Стр, ЭтотОбъект, ПараметрыВыбора, Неопределено);
		ИначеЕсли Стр.Тип=ТипФильтр() Тогда
			СвязиПараметровВыбора = Неопределено;
			Если Стр.ВидЭлемента="Поле" Тогда
				Поле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
				Если Поле=Неопределено Тогда
					ПараметрыВыбора = Неопределено;
				Иначе
					ПараметрыВыбора = ОпределитьПараметрыВыбора(Поле);
					СвязиПараметровВыбора = ОпределитьСвязиПараметровВыбора(Поле);
				КонецЕсли; 
			Иначе
				ПараметрыВыбора = Неопределено;
			КонецЕсли; 
			CRM_Отчеты.ДобавитьЭлементФильтр(Стр, ЭтотОбъект, ПараметрыВыбора, СвязиПараметровВыбора);
		КонецЕсли; 
		Стр.Создан = Истина;
	КонецЦикла;
	
	// Заполним значения фильтров и параметров
	Для каждого Идентификатор Из Идентификаторы Цикл
		Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификатор);
		Если НЕ Стр.Тип=ТипФильтр() И НЕ Стр.Тип=ТипПараметр() Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ВидЭлемента="Тумблер" И Стр.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				Если Стр.ЗначениеПоУмолчанию=Истина Тогда
					ЭтотОбъект[Реквизит.Ключ] = Перечисления.CRM_БулевоТриСостояния.Истина;
				ИначеЕсли Стр.ЗначениеПоУмолчанию=Ложь Тогда
					ЭтотОбъект[Реквизит.Ключ] = Перечисления.CRM_БулевоТриСостояния.Ложь;
				Иначе
					ЭтотОбъект[Реквизит.Ключ] = Перечисления.CRM_БулевоТриСостояния.НеИзменять;
				КонецЕсли; 
			КонецЦикла;
		ИначеЕсли Стр.ВидЭлемента="Флажок" Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				Если (ТипЗнч(Стр.ЗначениеПоУмолчанию)=Тип("СписокЗначений") 
					И НЕ Стр.ЗначениеПоУмолчанию.НайтиПоЗначению(Реквизит.Значение)=Неопределено)
					ИЛИ Стр.ЗначениеПоУмолчанию=Реквизит.Значение Тогда
					ЭтотОбъект[Реквизит.Ключ] = Истина;
				Иначе
					ЭтотОбъект[Реквизит.Ключ] = Ложь;
				КонецЕсли; 
			КонецЦикла;
		ИначеЕсли Стр.ВидЭлемента="Тумблер" И ЗначениеЗаполнено(Стр.ЗначениеПоУмолчанию) Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				ЭтотОбъект[Реквизит.Ключ] = Стр.ЗначениеПоУмолчанию;
			КонецЦикла; 
		ИначеЕсли НЕ Стр.ВидЭлемента="Поле" ИЛИ Стр.Тип=ТипПараметр() Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				ЭтотОбъект[Реквизит.Ключ] = Реквизит.Значение;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыГруппировкиКолонок()
	
	Элементы.ПолеГруппировкиКолонок.СписокВыбора.Очистить();
	Элементы.ПолеГруппировкиКолонок.СписокВыбора.Добавить("", НСтр("en='not to group';ru='Не группировать'"));
	
	Элементы.ПолеГруппировкиКолонок.СписокВыбора.Добавить("<Прочие>", НСтр("en='Other';ru='Прочее'"),, БиблиотекаКартинок.Выбрать);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСовместимостьГруппировокКолонок(ИмяПоляПроверки = "")
	
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПолеГруппировкиКолонок) И НЕ ЗначениеЗаполнено(ПолеСравнения) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если ТипЗнч(ПолеСравнения)=Тип("ПеречислениеСсылка.Периодичность") Тогда
		СтрокаДлительностьПериода = ОбщегоНазначения.ИмяЗначенияПеречисления(ПолеСравнения);
		ИмяСравнения = "Период" + СтрокаДлительностьПериода;
	Иначе
		ИмяСравнения = ПолеСравнения;
	КонецЕсли;
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	Если ЗначениеЗаполнено(ПолеГруппировкиКолонок) Тогда
		ГруппировкаКолонокСхемы = CRM_Отчеты.ПолеСхемы(Схема, ПолеГруппировкиКолонок);
		ГруппировкаКолонокПериод = (ТипЗнч(ГруппировкаКолонокСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И ГруппировкаКолонокСхемы.Роль.НомерПериода>0);
	Иначе
		ГруппировкаКолонокСхемы = Неопределено;
		ГруппировкаКолонокПериод = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяСравнения) Тогда
		СравнениеСхемы = CRM_Отчеты.ПолеСхемы(Схема, ИмяСравнения);
		СравнениеПериод = (ТипЗнч(СравнениеСхемы)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") И СравнениеСхемы.Роль.НомерПериода>0);
	Иначе
		СравнениеСхемы = Неопределено;
		СравнениеПериод = Ложь;
	КонецЕсли; 	
	
	Если НЕ ГруппировкаКолонокПериод И НЕ СравнениеПериод Тогда
		Возврат Результат;
	КонецЕсли; 
	
	МассивПолей = Новый Массив;
	Если НЕ ПустаяСтрока(ИмяПоляПроверки) Тогда
		МассивПолей.Добавить(ИмяПоляПроверки);
	Иначе
		ПоляГруппировокРекурсивно(МассивПолей, КомпоновщикНастроекТаблица.Настройки.Структура, Истина);
	КонецЕсли; 
	Для каждого ИмяПоля Из МассивПолей Цикл
		Поле = CRM_Отчеты.ПолеСхемы(Схема, ИмяПоля);
		Если НЕ ТипЗнч(Поле)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если Поле.Роль.НомерПериода=0 Тогда
			Продолжить;
		КонецЕсли;
		Если (ГруппировкаКолонокПериод И НЕ ИмяПоля=ПолеГруппировкиКолонок) ИЛИ (СравнениеПериод И НЕ ИмяПоля=ИмяСравнения) Тогда
			Если НЕ ПустаяСтрока(ИмяПоляПроверки) Тогда
				Если ГруппировкаКолонокПериод И НЕ ИмяПоля=ПолеГруппировкиКолонок Тогда
					ОписаниеПоля = """"+?(ПустаяСтрока(ГруппировкаКолонокСхемы.Заголовок), ГруппировкаКолонокСхемы.Поле, ГруппировкаКолонокСхемы.Заголовок)+"""";
					ОписаниеПоля = ОписаниеПоля+НСтр("en=' in report columns';ru=' в колонках отчета'");
				ИначеЕсли СравнениеПериод И НЕ ИмяПоля=ИмяСравнения Тогда
					ОписаниеПоля = """"+?(ПустаяСтрока(СравнениеСхемы.Заголовок), СравнениеСхемы.Поле, СравнениеСхемы.Заголовок)+"""";
					ОписаниеПоля = ОписаниеПоля+НСтр("en=' in report columns';ru=' в колонках отчета'");
				КонецЕсли; 
			Иначе
				ОписаниеПоля = """"+?(ПустаяСтрока(Поле.Заголовок), Поле.Поле, Поле.Заголовок)+"""";
				ОписаниеПоля = ОписаниеПоля+НСтр("en=' in report rows';ru=' в строках отчета'");
				Если ГруппировкаКолонокПериод И НЕ ИмяПоля=ПолеГруппировкиКолонок Тогда
					ПолеГруппировкиКолонок = Неопределено;
				КонецЕсли; 
				Если СравнениеПериод И НЕ ИмяПоля=ИмяСравнения Тогда
					ПолеСравнения = Неопределено;
				КонецЕсли;
			КонецЕсли; 
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрещено использование в строках и колонках различных полей-периодов. Предварительно отключите поле %1'"),
			ОписаниеПоля));
			Результат = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаголовокГруппыПолей(СтрРодитель)
	
	ЗаголовокГруппировки = "";
	Для каждого СтрРеквизита Из СтрРодитель.ПолучитьЭлементы() Цикл
		ЗаголовокГруппировки = ЗаголовокГруппировки+?(ПустаяСтрока(ЗаголовокГруппировки), "", ", ")+СтрРеквизита.Заголовок;
	КонецЦикла;
	Возврат ЗаголовокГруппировки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписанияГруппировок()
	
	ДобавитьОписанияГруппировокРекурсивно(КомпоновщикНастроекТаблица.Настройки.Структура);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	УдалитьНеиспользуемыеГруппировкиРекурсивно(КомпоновщикНастроекТаблица.Настройки.Структура, СхемаКомпоновкиДанных);
	
	ДополнительныеСвойства = КомпоновщикНастроекТаблица.Настройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("Сравнение") И ЗначениеЗаполнено(ДополнительныеСвойства.Сравнение) И НЕ ЗначениеЗаполнено(ПолеСравнения) Тогда
		ПолеСравнения = ДополнительныеСвойства.Сравнение;
		Если ДополнительныеСвойства.Свойство("ПоказыватьАбсолютноеИзменение") Тогда
			ПоказыватьАбсолютноеИзменение = ДополнительныеСвойства.ПоказыватьАбсолютноеИзменение;
		КонецЕсли; 
		Если ДополнительныеСвойства.Свойство("ПоказыватьОтносительноеИзменение") Тогда
			ПоказыватьОтносительноеИзменение = ДополнительныеСвойства.ПоказыватьОтносительноеИзменение;
		КонецЕсли; 
	КонецЕсли; 
	Если ДополнительныеСвойства.Свойство("ГруппировкаКолонок") И ЗначениеЗаполнено(ДополнительныеСвойства.ГруппировкаКолонок) И НЕ ЗначениеЗаполнено(ПолеГруппировкиКолонок) Тогда
		ПолеГруппировкиКолонок = ДополнительныеСвойства.ГруппировкаКолонок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьНеиспользуемыеГруппировкиРекурсивно(Структура, СхемаКомпоновкиДанных)
	
	МассивКУдалению = Новый Массив;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			УдалитьНеиспользуемыеГруппировкиРекурсивно(Элемент.Строки, СхемаКомпоновкиДанных);
			УдалитьНеиспользуемыеГруппировкиРекурсивно(Элемент.Колонки, СхемаКомпоновкиДанных);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Если НЕ Элемент.Использование Тогда
				СкопироватьСтруктуруРекурсивно(Элемент.Структура, Структура, СхемаКомпоновкиДанных);
				МассивКУдалению.Добавить(Элемент);
				Продолжить;
			КонецЕсли;
			УдалитьНеиспользуемыеГруппировкиРекурсивно(Элемент.Структура, СхемаКомпоновкиДанных);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент Из МассивКУдалению Цикл
		Структура.Удалить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписанияГруппировокРекурсивно(ЭлементыСтруктуры, ЭтоСтрока = Истина)
	
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьОписанияГруппировокРекурсивно(Элемент.Строки);
			ДобавитьОписанияГруппировокРекурсивно(Элемент.Колонки, Ложь);
		ИначеЕсли ЭтоСтрока И (ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных")) Тогда
			ИмяРеквизита = НовоеИмяРеквизита(ТипГруппировка());
			ЗаголовокГруппировки = Строка(Элемент.ПоляГруппировки);
			Если ПустаяСтрока(ЗаголовокГруппировки) Тогда
				ЗаголовокГруппировки = НСтр("en='<Detailed records>';ru='<Детальные записи>'");
				ДетальныеЗаписиИспользуются = Истина;
			КонецЕсли; 
			Стр = ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипГруппировка(), ИмяРеквизита, ЗаголовокГруппировки, Элемент);
			Если Стр=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Стр.Реквизиты.Вставить(ИмяРеквизита, Элемент.Использование);
			ОпределитьНачальноеПоложение(Стр, Элемент);
			Если Элемент.ПоляГруппировки.Элементы.Количество()=1 Тогда
				Поле = Элемент.ПоляГруппировки.Элементы[0];
				Стр.Поле = Строка(Поле.Поле);
				Стр.ДополнительныеПараметры.Вставить("ТипГруппировки", Поле.ТипГруппировки);
			Иначе
				// Добавление описаний отдельных полей группировкок, если их несколько
				Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
					Путь = Строка(Поле.Поле);
					ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Поле.Поле);
					Если ДоступноеПоле=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрРеквизит = ДобавитьОписаниеНастройки(Стр.ПолучитьЭлементы(), ТипРеквизит(), Путь, ДоступноеПоле.Заголовок);
					Если СтрРеквизит=Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					ИмяРеквизита = НовоеИмяРеквизита(ТипРеквизит());
					СтрРеквизит.Реквизиты.Вставить(ИмяРеквизита, Поле.Использование И Элемент.Использование);
					СтрРеквизит.ДополнительныеПараметры.Вставить("ТипГруппировки", Поле.ТипГруппировки);  
					ОпределитьНачальноеПоложение(СтрРеквизит, ДоступноеПоле);
				КонецЦикла; 
			КонецЕсли;
			ДобавитьОписанияГруппировокРекурсивно(Элемент.Структура);
		ИначеЕсли НЕ ЭтоСтрока И ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Если НЕ Элемент.ПоляГруппировки.Элементы.Количество()=1 Тогда
				ДобавитьОписанияГруппировокРекурсивно(Элемент.Структура, ЭтоСтрока);
				Продолжить;
			КонецЕсли;
			Поле = Элемент.ПоляГруппировки.Элементы[0];
			ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляВыбора.НайтиПоле(Поле.Поле);
			ИмяПоля = Строка(Поле.Поле);
			ДополнительныеСвойства = КомпоновщикНастроекТаблица.Настройки.ДополнительныеСвойства;
			Если НЕ ДополнительныеСвойства.Свойство("ГруппировкаКолонок") И НЕ ДополнительныеСвойства.Свойство("Сравнение") Тогда
				// базовая версия отчета
				Если ИмяПоля="ДинамическийПериод" Тогда
					КоличествоПоказателей = КоличествоПоказателейСКД(КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы);
					Если КоличествоПоказателей>1 Тогда
						ПолеСравнения = Неопределено;
						ПоказыватьАбсолютноеИзменение = Ложь;
						ПоказыватьОтносительноеИзменение = Ложь;
						Элемент.Использование = Ложь;
						Продолжить;
					Иначе
						ЗначениеСравнения = КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
						ПолеСравнения = ЗначениеСравнения.Значение;
					КонецЕсли; 
				Иначе
					Если ЗначениеЗаполнено(ПолеГруппировкиКолонок) И НЕ ЗначениеЗаполнено(ПолеСравнения) И НастройкиОтчета.ИспользоватьСравнение Тогда
						Если Элементы.ПолеСравнения.СписокВыбора.НайтиПоЗначению(ПолеГруппировкиКолонок)=Неопределено Тогда
							ДоступноеПолеГруппировки = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеГруппировкиКолонок);
							Элементы.ПолеСравнения.СписокВыбора.Вставить(Элементы.ПолеСравнения.СписокВыбора.Количество()-1, ПолеГруппировкиКолонок, ДоступноеПолеГруппировки.Заголовок); 
						КонецЕсли;
						ПолеСравнения = ПолеГруппировкиКолонок;
					КонецЕсли; 
					Если Элементы.ПолеГруппировкиКолонок.СписокВыбора.НайтиПоЗначению(ИмяПоля)=Неопределено И НЕ ДоступноеПоле=Неопределено Тогда
						Элементы.ПолеГруппировкиКолонок.СписокВыбора.Вставить(Элементы.ПолеГруппировкиКолонок.СписокВыбора.Количество()-1, ИмяПоля, ДоступноеПоле.Заголовок); 
					КонецЕсли;
					ПолеГруппировкиКолонок = ИмяПоля;
				КонецЕсли; 
			ИначеЕсли ДополнительныеСвойства.Свойство("ГруппировкаКолонок") И НРег(ИмяПоля)=НРег(ДополнительныеСвойства.ГруппировкаКолонок) Тогда
				// определили группировку колонок
				Если Элементы.ПолеГруппировкиКолонок.СписокВыбора.НайтиПоЗначению(ИмяПоля)=Неопределено И НЕ ДоступноеПоле=Неопределено Тогда
					Элементы.ПолеГруппировкиКолонок.СписокВыбора.Вставить(Элементы.ПолеГруппировкиКолонок.СписокВыбора.Количество()-1, ИмяПоля, ДоступноеПоле.Заголовок); 
				КонецЕсли;
				ПолеГруппировкиКолонок = ИмяПоля;
			ИначеЕсли ДополнительныеСвойства.Свойство("Сравнение") И НРег(ИмяПоля)=НРег(ДополнительныеСвойства.Сравнение) Тогда
				КоличествоПоказателей = КоличествоПоказателейСКД(КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы);
				Если КоличествоПоказателей>1 Тогда
					// отключение режима сравнения
					ДополнительныеСвойства.Удалить("Сравнение");
					ПолеСравнения = Неопределено;
					ПоказыватьАбсолютноеИзменение = Ложь;
					ПоказыватьОтносительноеИзменение = Ложь;
					Элемент.Использование = Ложь;
					Продолжить;
				Иначе
					// определили сравнение
					Если Элементы.ПолеСравнения.СписокВыбора.НайтиПоЗначению(ИмяПоля)=Неопределено И НЕ ДоступноеПоле=Неопределено Тогда
						Элементы.ПолеСравнения.СписокВыбора.Вставить(Элементы.ПолеСравнения.СписокВыбора.Количество()-1, ИмяПоля, ДоступноеПоле.Заголовок); 
					КонецЕсли;
					ПолеСравнения = ИмяПоля;
				КонецЕсли; 
			ИначеЕсли ДополнительныеСвойства.Свойство("Сравнение") И ИмяПоля="ДинамическийПериод" И ТипЗнч(ДополнительныеСвойства.Сравнение)=Тип("ПеречислениеСсылка.Периодичность") Тогда
				КоличествоПоказателей = КоличествоПоказателейСКД(КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы);
				Если КоличествоПоказателей>1 Тогда
					// отключение режима сравнения
					ДополнительныеСвойства.Удалить("Сравнение");
					ПолеСравнения = Неопределено;
					ПоказыватьАбсолютноеИзменение = Ложь;
					ПоказыватьОтносительноеИзменение = Ложь;
					Элемент.Использование = Ложь;
					Продолжить;
				Иначе
					// определили сравнение по периоду
					Если Элементы.ПолеСравнения.СписокВыбора.НайтиПоЗначению(ДополнительныеСвойства.Сравнение)=Неопределено Тогда
						Элементы.ПолеСравнения.СписокВыбора.Вставить(Элементы.ПолеСравнения.СписокВыбора.Количество()-1, ДополнительныеСвойства.Сравнение); 
					КонецЕсли;
					ПолеСравнения = ДополнительныеСвойства.Сравнение;
				КонецЕсли; 
			КонецЕсли; 
			ДобавитьОписанияГруппировокРекурсивно(Элемент.Структура, ЭтоСтрока);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНачальноеПоложение(Стр, Группировка)
	
	РазвернутьГруппировку = Ложь;
	МассивПолей = Новый Массив;
	Если ТипЗнч(Группировка)=Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		МассивПолей.Добавить(Группировка);
	Иначе
		Для каждого Поле Из Группировка.ПоляГруппировки.Элементы Цикл
			Если НЕ ТипЗнч(Поле)=Тип("ПолеГруппировкиКомпоновкиДанных") ИЛИ НЕ Поле.Использование Тогда
				Продолжить;
			КонецЕсли; 
			ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Поле.Поле);
			Если ДоступноеПоле=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивПолей.Добавить(ДоступноеПоле);
		КонецЦикла;
	КонецЕсли; 
	
	ИсключаемыеТипы = Новый Массив();
	ИсключаемыеТипы.Добавить(Тип("СправочникСсылка.Валюты"));
	ИсключаемыеТипы.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ИсключаемыеТипы.Добавить(Тип("СправочникСсылка.Организации"));
	ИсключаемыеТипы.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
	Если Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено Тогда 
		ИсключаемыеТипы.Добавить(Тип("СправочникСсылка." + "БанковскиеСчета"));
	КонецЕсли;	
		
	Для каждого ДоступноеПоле Из МассивПолей Цикл
		РазвернутьПоле = Истина;
		Для каждого Тип Из ДоступноеПоле.ТипЗначения.Типы() Цикл
			Если ИсключаемыеТипы.Найти(Тип) <> Неопределено ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Продолжить;
			Иначе
				РазвернутьПоле = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если РазвернутьПоле Тогда
			РазвернутьГруппировку = Истина;
			Продолжить;
		Иначе
			РазвернутьГруппировку = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Стр.ДополнительныеПараметры.Вставить("Развернуть", РазвернутьГруппировку);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементГруппировка(Стр)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипГруппировка());
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Если Строки.Количество()>0 И Строки.Найти(Стр)=Строки.Количество()-1 Тогда
		ИндексВставки = Неопределено;
	Иначе
		ИндексВставки = ПоляНастроек.ПолучитьЭлементы().Индекс(Строки[Строки.Найти(Стр)+1]);
	КонецЕсли; 
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Ключ;
		
		Если ИндексВставки=Неопределено Тогда
			Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
		Иначе
			ИмяГруппыВставки = ПоляНастроек.ПолучитьЭлементы().Получить(ИндексВставки).ИмяГруппы;
			Если НЕ ПустаяСтрока(ИмяГруппыВставки) Тогда
				Группа = Элементы.Вставить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы, Элементы[ИмяГруппыВставки]);
			Иначе
				Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
			КонецЕсли; 
		КонецЕсли; 
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		ОбновитьЗаголовокЭлемента(Стр); 
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГруппировкаПриИзменении");
		Элемент.ВысотаЗаголовка = 1;
		
		ДекорацияОтступ = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа); 
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = 1;
		
		ЭтотОбъект[ИмяРеквизита] = Реквизит.Значение;
		ДобавитьПереключательИерархииГруппировки(Стр, ИмяРеквизита, Группа);
		Стр.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
		Стр.ИмяГруппы = Группа.Имя;
		
		ДобавитьКоманды(Стр, ИмяРеквизита, Группа);
		
		ГруппаРеквизиты = Элементы.Добавить(ИмяРеквизита+"_Реквизиты", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
		ГруппаРеквизиты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизиты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаРеквизиты.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаРеквизиты.ОтображатьЗаголовок = Ложь;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементРеквизит(Стр)
	
	// Поиск группы реквизитов
	СтрРодителя = Стр.ПолучитьРодителя();
	Для каждого ОписаниеРеквизита Из СтрРодителя.Реквизиты Цикл
		ГруппаРеквизитов = Элементы[ОписаниеРеквизита.Ключ+"_Реквизиты"];
	КонецЦикла; 
	Если НЕ ТипЗнч(ГруппаРеквизитов)=Тип("ГруппаФормы") Тогда
		Возврат;
	КонецЕсли; 
	// Добавление элементов реквизитов
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Ключ;
		
		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), ГруппаРеквизитов);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		ДобавитьОтступ(ИмяРеквизита, Группа);
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.ВысотаЗаголовка = 1;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_РеквизитПриИзменении");
		
		ДекорацияОтступ = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа); 
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = 1;
		
		ЭтотОбъект[ИмяРеквизита] = Реквизит.Значение;
		Стр.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
		Стр.ИмяГруппы = Группа.Имя;
		
		ДобавитьКоманды(Стр, ИмяРеквизита, Группа);
		
		ГруппаРеквизиты = Элементы.Добавить(ИмяРеквизита+"_Реквизиты", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
		ГруппаРеквизиты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизиты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаРеквизиты.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаРеквизиты.ОтображатьЗаголовок = Ложь;
		
		ОбновитьЗаголовокЭлемента(Стр); 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтступ(ИмяРеквизита, Группа)
	
	Если Группа.ПодчиненныеЭлементы.Количество()>0 Тогда
		КартинкаОтступ = Элементы.Вставить(ИмяРеквизита+"_Отступ", Тип("ДекорацияФормы"), Группа, Группа.ПодчиненныеЭлементы[0]);
	Иначе
		КартинкаОтступ = Элементы.Добавить(ИмяРеквизита+"_Отступ", Тип("ДекорацияФормы"), Группа);
	КонецЕсли; 
	КартинкаОтступ.Вид = ВидДекорацииФормы.Картинка;
	КартинкаОтступ.РастягиватьПоГоризонтали = Ложь;
	КартинкаОтступ.РастягиватьПоВертикали = Ложь;
	КартинкаОтступ.Высота = 1;
	КартинкаОтступ.Ширина = 2;
	КартинкаОтступ.Картинка = БиблиотекаКартинок.КоннекторВерхПравоНиз;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПереключательИерархииГруппировки(Стр, ИмяРеквизита, Группа)
	
	Если ПустаяСтрока(Стр.Поле) Тогда
		Возврат;
	КонецЕсли; 
	ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
	Если ДоступноеПоле=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ CRM_Отчеты.ОписаниеТиповСодержитИерархическийТип(ДоступноеПоле.ТипЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаКоманд = Элементы.Найти(ИмяРеквизита+"_ГруппаКоманды");
	Если ГруппаКоманд=Неопределено Тогда
		Кнопка = Элементы.Добавить(ИмяРеквизита+"_Иерархия", Тип("ДекорацияФормы"), Группа);
	Иначе
		Кнопка = Элементы.Вставить(ИмяРеквизита+"_Иерархия", Тип("ДекорацияФормы"), Группа, ГруппаКоманд);
	КонецЕсли; 
	Кнопка.Вид = ВидДекорацииФормы.Картинка;
	Кнопка.Гиперссылка = Истина;
	Кнопка.Ширина = 2;
	Кнопка.Высота = 1;
	Кнопка.РастягиватьПоГоризонтали = Ложь;
	Кнопка.РастягиватьПоВертикали = Ложь;
	Если НЕ Стр.ДополнительныеПараметры.Свойство("ТипГруппировки") Тогда
		Стр.ДополнительныеПараметры.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Элементы);
	КонецЕсли;
	УстановитьПредставлениеКнопкиИерархииГруппировки(Кнопка, Стр);
	Кнопка.УстановитьДействие("Нажатие", "Подключаемый_ИерархияГруппировкиНажатие");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКоманды(Стр, ИмяРеквизита, Группа)
	
	ГруппаКоманд = Элементы.Добавить(ИмяРеквизита+"_ГруппаКоманды", Тип("ГруппаФормы"), Группа);
	ГруппаКоманд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКоманд.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКоманд.ОтображатьЗаголовок = Ложь;
	ГруппаКоманд.РастягиватьПоГоризонтали = Ложь;
	ГруппаКоманд.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Если Стр.Тип=ТипПоказатель() ИЛИ Стр.Тип=ТипГруппаПоказателей() Тогда
		ГруппаКоманд.Видимость = РежимРедактированияКолонок;
	Иначе
		ГруппаКоманд.Видимость = РежимРедактированияСтрок;
	КонецЕсли; 
	
	Кнопка = Элементы.Добавить(ИмяРеквизита+"СместитьВверх", Тип("ДекорацияФормы"), ГруппаКоманд);
	Кнопка.Вид = ВидДекорацииФормы.Картинка;
	Кнопка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	Кнопка.Гиперссылка = Истина;
	Кнопка.Ширина = 1;
	Кнопка.Высота = 1;
	Кнопка.РастягиватьПоГоризонтали = Ложь;
	Кнопка.РастягиватьПоВертикали = Ложь;
	Кнопка.Картинка = БиблиотекаКартинок.CRM_СтрелкаВверх;
	Кнопка.УстановитьДействие("Нажатие", "Подключаемый_СместитьВверх");
	
	Кнопка = Элементы.Добавить(ИмяРеквизита+"СместитьВниз", Тип("ДекорацияФормы"), ГруппаКоманд);
	Кнопка.Вид = ВидДекорацииФормы.Картинка;
	Кнопка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	Кнопка.Гиперссылка = Истина;
	Кнопка.Ширина = 1;
	Кнопка.Высота = 1;
	Кнопка.РастягиватьПоГоризонтали = Ложь;
	Кнопка.РастягиватьПоВертикали = Ложь;
	Кнопка.Картинка = БиблиотекаКартинок.CRM_СтрелкаВниз;
	Кнопка.УстановитьДействие("Нажатие", "Подключаемый_СместитьВниз");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеКнопкиИерархииГруппировки(Кнопка, Стр)
	
	Если Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
		Кнопка.Картинка = БиблиотекаКартинок.CRM_РежимВыбораЭлементов;
		Кнопка.Подсказка = НСтр("en='To show only items';ru='Отображать только элементы'");
	ИначеЕсли Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
		Кнопка.Картинка = БиблиотекаКартинок.CRM_РежимВыбораГрупп;
		Кнопка.Подсказка = НСтр("en='To display only the hierarchy';ru='Отображать только иерархию'");
	ИначеЕсли Стр.ДополнительныеПараметры.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
		Кнопка.Картинка = БиблиотекаКартинок.CRM_РежимВыбораГруппИЭлементов;
		Кнопка.Подсказка = НСтр("en='Display items and hierarchy';ru='Отображать элементы и иерархию'");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодчиненныеПоля(СтрРодитель, Значение)
	
	Для каждого Стр Из СтрРодитель.ПолучитьЭлементы() Цикл
		Если НЕ Стр.Создан Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			ЭтотОбъект[ОписаниеРеквизита.Ключ] = Значение;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ЕстьВыводимыеПоля(СтрРодитель)
	
	Для каждого Стр Из СтрРодитель.ПолучитьЭлементы() Цикл
		Если НЕ Стр.Создан Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			Если ЭтотОбъект[ОписаниеРеквизита.Ключ] Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьГруппировкиИРеквизиты(ТолькоГруппировкиСтрок = Ложь, ТолькоГруппировкиКолонок = Ложь)
	
	ТребуетсяТаблица = ТребуетсяТаблица();
	Структура = КомпоновщикНастроекТаблица.Настройки.Структура;
	СуществующийЭлемент = ЭлементСтуктурыГруппировкаТаблица(Структура);
	Если ТолькоГруппировкиСтрок=ТолькоГруппировкиКолонок Тогда
		Если НЕ СуществующийЭлемент=Неопределено Тогда
			Структура.Удалить(СуществующийЭлемент);
		КонецЕсли; 
		СтруктураСтрок = КомпоновщикНастроекТаблица.Настройки.Структура;
	ИначеЕсли ТолькоГруппировкиСтрок Тогда
		Если ТребуетсяТаблица И ТипЗнч(СуществующийЭлемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			СтруктураКолонок = СуществующийЭлемент.Колонки;
			СтруктураСтрок = СуществующийЭлемент.Строки;
			СтруктураСтрок.Очистить();
		Иначе
			ТолькоГруппировкиСтрок = Ложь;
			Если НЕ СуществующийЭлемент=Неопределено Тогда
				Структура.Удалить(СуществующийЭлемент);
			КонецЕсли; 
			СтруктураСтрок = Структура;
		КонецЕсли;
	ИначеЕсли ТолькоГруппировкиКолонок Тогда
		Структура = КомпоновщикНастроекТаблица.Настройки.Структура;
		Если ТребуетсяТаблица И ТипЗнч(СуществующийЭлемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			СтруктураКолонок = СуществующийЭлемент.Колонки;
			СтруктураСтрок = СуществующийЭлемент.Строки;
			СтруктураКолонок.Очистить();
		Иначе
			ТолькоГруппировкиКолонок = Ложь;
			Если НЕ СуществующийЭлемент=Неопределено Тогда
				Структура.Удалить(СуществующийЭлемент);
			КонецЕсли; 
			СтруктураСтрок = Структура;
		КонецЕсли;
	КонецЕсли; 
	
	Если ТребуетсяТаблица И НЕ ТолькоГруппировкиСтрок И НЕ ТолькоГруппировкиКолонок Тогда
		ТаблицаКомпоновки = СтруктураСтрок.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		СтруктураСтрок = ТаблицаКомпоновки.Строки;
		СтруктураКолонок = ТаблицаКомпоновки.Колонки;
	КонецЕсли;
	
	Если НЕ ТолькоГруппировкиСтрок Тогда
		Если Не ПустаяСтрока(ПолеГруппировкиКолонок) Тогда
			ДобавитьГруппировкуКолонки(СтруктураКолонок, ПолеГруппировкиКолонок); 
		КонецЕсли; 
		Если НастройкиОтчета.ИспользоватьСравнение И ЗначениеЗаполнено(ПолеСравнения) Тогда
			ДобавитьГруппировкуСравнения(СтруктураКолонок); 
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ТолькоГруппировкиКолонок Тогда
		Для каждого Стр Из ПоляНастроек.ПолучитьЭлементы() Цикл
			Если НЕ Стр.Тип=ТипГруппировка() Тогда
				Продолжить;
			КонецЕсли;
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				Использование = ЭтотОбъект[ОписаниеРеквизита.Ключ];
				Если НЕ Использование Тогда
					Продолжить;
				КонецЕсли; 
				Если ТребуетсяТаблица Тогда
					ТекущийЭлементСтруктуры = СтруктураСтрок.Добавить();
				Иначе
					ТекущийЭлементСтруктуры = СтруктураСтрок.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				КонецЕсли; 
				ТекущийЭлементСтруктуры.Использование = Использование;
				ТекущийЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				ТекущийЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				СтруктураСтрок = ТекущийЭлементСтруктуры.Структура;
				Если Стр.ПолучитьЭлементы().Количество()=0 Тогда
					Если Стр.ДополнительныеПараметры.Свойство("ТипГруппировки") Тогда
						Поле = ТекущийЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						Поле.Использование = Использование;
						Поле.Поле = Новый ПолеКомпоновкиДанных(Стр.Поле);
						Поле.ТипГруппировки = Стр.ДополнительныеПараметры.ТипГруппировки;
					КонецЕсли;
				Иначе
					Для каждого СтрРеквизит Из Стр.ПолучитьЭлементы() Цикл
						Для каждого ОписаниеПоля Из СтрРеквизит.Реквизиты Цикл
							Если НЕ ЭтотОбъект[ОписаниеПоля.Ключ] Тогда
								Продолжить;
							КонецЕсли; 
							Поле = ТекущийЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							Поле.Поле = Новый ПолеКомпоновкиДанных(СтрРеквизит.Поле);
							Поле.Использование = Использование;
							Поле.ТипГруппировки = СтрРеквизит.ДополнительныеПараметры.ТипГруппировки;
						КонецЦикла; 
					КонецЦикла; 
				КонецЕсли;
				Стр.Заголовок = Строка(ТекущийЭлементСтруктуры.ПоляГруппировки);
				ОбновитьЗаголовокЭлемента(Стр);
				ОпределитьНачальноеПоложение(Стр, ТекущийЭлементСтруктуры);
			КонецЦикла; 
		КонецЦикла;
		ОбновитьГруппировкиРазворачивания();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяТаблица()
	
	Возврат Не ПустаяСтрока(ПолеГруппировкиКолонок) ИЛИ (НастройкиОтчета.ИспользоватьСравнение И ЗначениеЗаполнено(ПолеСравнения));
	
КонецФункции

&НаСервере
Процедура ДобавитьГруппировкуКолонки(СтруктураКолонок, ИмяПоля)
	
	ТекущийЭлементСтруктуры = СтруктураКолонок.Добавить();
	ТекущийЭлементСтруктуры.Использование = Истина;
	ТекущийЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ТекущийЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Поле = ТекущийЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Поле.Использование = Истина;
	Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	СтруктураКолонок = ТекущийЭлементСтруктуры.Структура;
	
КонецПроцедуры

&НаСервере
Функция СписокДобавленныхПолей(Группировки = Истина, Показатели = Ложь)
	
	СписокПолей = Новый СписокЗначений;
	
	Если Группировки Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипГруппировка());
		СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
		Для каждого СтрПоле Из СтрокиПолей Цикл
			Пропустить = Истина;
			Для каждого ОписаниеРеквизита Из СтрПоле.Реквизиты Цикл
				Если ЭтотОбъект[ОписаниеРеквизита.Ключ] Тогда
					Пропустить = Ложь;
				КонецЕсли; 
			КонецЦикла; 
			Если Пропустить Тогда
				Продолжить;
			КонецЕсли; 
			СписокПолей.Добавить(СтрПоле.Поле);
		КонецЦикла;
	КонецЕсли;
	
	Если Показатели Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипПоказатель());
		СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
		Для каждого СтрПоле Из СтрокиПолей Цикл
			Пропустить = Истина;
			Для каждого ОписаниеРеквизита Из СтрПоле.Реквизиты Цикл
				Если ЭтотОбъект[ОписаниеРеквизита.Ключ] Тогда
					Пропустить = Ложь;
				КонецЕсли; 
			КонецЦикла; 
			Если Пропустить Тогда
				Продолжить;
			КонецЕсли; 
			СписокПолей.Добавить(СтрПоле.Поле);
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипГруппаПоказателей());
		СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
		Для каждого СтрПоле Из СтрокиПолей Цикл
			ДополнитьСписокДобавленныхПоказателей(СтрПоле, СписокПолей)
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипРеквизит());
	СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора, Истина);
	Для каждого СтрПоле Из СтрокиПолей Цикл
		СписокПолей.Добавить(СтрПоле.Поле);
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

&НаСервере
Функция ДополнитьСписокДобавленныхПоказателей(Группа, СписокПолей)
	
	Для каждого СтрПоле Из Группа.ПолучитьЭлементы() Цикл
		Если СтрПоле.Тип = ТипГруппаПоказателей() Тогда
			ДополнитьСписокДобавленныхПоказателей(СтрПоле, СписокПолей);
		ИначеЕсли СтрПоле.Тип = ТипПоказатель() Тогда
			Пропустить = Истина;
			Для каждого ОписаниеРеквизита Из СтрПоле.Реквизиты Цикл
				Если ЭтотОбъект[ОписаниеРеквизита.Ключ] Тогда
					Пропустить = Ложь;
				КонецЕсли; 
			КонецЦикла; 
			Если Пропустить Тогда
				Продолжить;
			КонецЕсли;
			
			СписокПолей.Добавить(СтрПоле.Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ОбновитьГруппировкиРазворачивания()
	
	Если НЕ Элементы.ГруппаСтроки.Видимость Тогда
		РазвернутьДо = "";
		Возврат;
	КонецЕсли;
	
	ДоступностьНастройки = Истина;
	Элементы.РазвернутьДо.СписокВыбора.Очистить();
	Элементы.РазвернутьДо.СписокВыбора.Добавить("", НСтр("en='<Default>';ru='<По умолчанию>'"));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипГруппировка());
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Для каждого СтрокаГруппировки Из Строки Цикл
		ИмяРеквизита = ПервыйКлючСтруктуры(СтрокаГруппировки.Реквизиты);
		Если СтрокаГруппировки.ВидЭлемента<>"Флажок" ИЛИ ИмяРеквизита=Неопределено ИЛИ ЭтотОбъект[ИмяРеквизита]<>Истина Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаГруппировки.ДополнительныеПараметры.Свойство("ТипГруппировки") 
			И СтрокаГруппировки.ДополнительныеПараметры.ТипГруппировки<>ТипГруппировкиКомпоновкиДанных.Элементы Тогда
			ДоступностьНастройки = Ложь;
		КонецЕсли; 
		Если СтрокаГруппировки.ПолучитьЭлементы().Количество()=0 Тогда
			Элементы.РазвернутьДо.СписокВыбора.Добавить(СтрокаГруппировки.Поле, СтрокаГруппировки.Заголовок);
		Иначе
			ИмяПоля = "";
			Для каждого СтрокаПоля Из СтрокаГруппировки.ПолучитьЭлементы() Цикл
				ИмяРеквизита = ПервыйКлючСтруктуры(СтрокаПоля.Реквизиты);
				Если СтрокаПоля.ВидЭлемента<>"Флажок" ИЛИ ИмяРеквизита=Неопределено ИЛИ ЭтотОбъект[ИмяРеквизита]<>Истина Тогда
					Продолжить;
				КонецЕсли; 
				ИмяПоля = ""+?(ПустаяСтрока(ИмяПоля), "", ",")+СтрокаПоля.Поле;
			КонецЦикла;
			Если ПустаяСтрока(ИмяПоля) Тогда
				Продолжить;
			КонецЕсли; 
			Элементы.РазвернутьДо.СписокВыбора.Добавить(ИмяПоля, СтрокаГруппировки.Заголовок);
		КонецЕсли; 
	КонецЦикла;
	
	Элементы.РазвернутьДо.Доступность = ДоступностьНастройки И Элементы.РазвернутьДо.СписокВыбора.Количество()>2;
	Если НЕ Элементы.РазвернутьДо.Доступность Тогда
		РазвернутьДо = "";
		Возврат;
	КонецЕсли; 
	
	Если Элементы.РазвернутьДо.СписокВыбора.НайтиПоЗначению(РазвернутьДо)=Неопределено Тогда
		РазвернутьДо = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияДиаграммыПоУмолчаниюРекурсивно(ЭлементыВыбора)
	
	Для каждого ЭлементВыбор Из ЭлементыВыбора Цикл
		Если ЗначениеЗаполнено(ДиаграммаЗначения) Тогда
			Прервать;
		КонецЕсли; 
		Если ТипЗнч(ЭлементВыбор)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			УстановитьЗначенияДиаграммыПоУмолчаниюРекурсивно(ЭлементВыбор.Элементы);
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементВыбор)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ЭлементВыбор.Поле);
		Если НЕ ДоступноеПоле=Неопределено И ДоступноеПоле.Ресурс Тогда
			ДиаграммаЗначения = Строка(ЭлементВыбор.Поле);
			ОбновитьНастройкиДиаграммы();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияПоказателей(ЭлементыВыбор = Неопределено, СтрРодитель = Неопределено)
	
	Настройки = КомпоновщикНастроекТаблица.Настройки;
	Если ЭлементыВыбор=Неопределено Тогда
		ЭлементыВыбор = Настройки.Выбор.Элементы;
	КонецЕсли;
	Если СтрРодитель=Неопределено Тогда
		СтрРодитель = ПоляНастроек;
	КонецЕсли; 
	
	Для каждого Показатель Из ЭлементыВыбор Цикл
		Если ТипЗнч(Показатель)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Показатель)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ИмяРеквизита = ТипГруппаПоказателей()+СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
			СтрГруппы = СтрРодитель.ПолучитьЭлементы().Добавить();
			СтрГруппы.Тип = ТипГруппаПоказателей();
			СтрГруппы.ВидЭлемента = "Флажок";
			СтрГруппы.ТипЗначения = Новый ОписаниеТипов("Булево");
			СтрГруппы.Заголовок = Показатель.Заголовок;
			СтрГруппы.Реквизиты = Новый Структура(ИмяРеквизита, Показатель.Использование);
			СтрГруппы.Элементы = Новый Структура;
			СтрГруппы.ДополнительныеПараметры = Новый Структура;
			СтрГруппы.ДополнительныеПараметры.Вставить("Расположение", Показатель.Расположение);
			ЗаполнитьОписанияПоказателей(Показатель.Элементы, СтрГруппы);
			Продолжить;
		КонецЕсли; 
		ИмяПоля = Строка(Показатель.Поле);
		ДоступноеПоле = Настройки.ДоступныеПоляВыбора.НайтиПоле(Показатель.Поле);
		// +CRM
		Если ДоступноеПоле=Неопределено ИЛИ ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтр = ТаблицаКолонокОтчета.Добавить();
		
		НоваяСтр.Значение = Показатель.Поле;
		НоваяСтр.Выбрано = Показатель.Использование;
		НоваяСтр.Представление = ДоступноеПоле.Заголовок;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементГруппаПоказателейПоказатель(Стр)
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Ключ;
		
		Если Стр.ПолучитьРодителя()=Неопределено Тогда
			ГруппаРодителя = Элементы.ГруппаПоказателиЭлементы;
		Иначе
			СтрРодителя = Стр.ПолучитьРодителя();
			ГруппаРодителя = Элементы[СтрЗаменить(СтрРодителя.ИмяГруппы, "_Группа", "_Поля")];
		КонецЕсли; 
		
		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), ГруппаРодителя);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		Отступ = УровеньОтступа(Стр);
		Для ии = 1 По Отступ Цикл
			ДобавитьОтступ(ИмяРеквизита+ии, Группа);
		КонецЦикла; 
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Если Стр.Тип=ТипГруппаПоказателей() Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГруппаПоказателейПриИзменении");
			Если ПустаяСтрока(Стр.Заголовок) Тогда
				ЗаголовокГруппы = "";
				Для каждого ПодСтр Из Стр.ПолучитьЭлементы() Цикл
					Если ПустаяСтрока(ПодСтр.Заголовок) Тогда
						Продолжить;
					КонецЕсли; 
					ПоказательВыбран = Ложь;
					Для каждого ОписаниеРеквизита Из ПодСтр.Реквизиты Цикл
						Если ЭтотОбъект[ОписаниеРеквизита.Ключ] Тогда
							ПоказательВыбран = Истина;
						КонецЕсли; 
					КонецЦикла; 
					Если НЕ ПоказательВыбран Тогда
						Продолжить;
					КонецЕсли; 
					ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+ПодСтр.Заголовок;
				КонецЦикла;
				Если ПустаяСтрока(ЗаголовокГруппы) Тогда
					ЗаголовокГруппы = " ";
				КонецЕсли; 
				Стр.Заголовок = ЗаголовокГруппы;
			КонецЕсли; 
		Иначе
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПоказательПриИзменении");
		КонецЕсли; 
		ОбновитьЗаголовокЭлемента(Стр);
		Элемент.ВысотаЗаголовка = 1;
		
		ДекорацияОтступ = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа); 
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = 1;
		
		Если ЗначениеЗаполнено(Реквизит.Значение) Тогда
			ЭтотОбъект[ИмяРеквизита] = Реквизит.Значение;
		КонецЕсли;
		Стр.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
		Стр.ИмяГруппы = Группа.Имя;
		
		ДобавитьКоманды(Стр, ИмяРеквизита, Группа);
		
		Если Стр.Тип=ТипГруппаПоказателей() Тогда
			ГруппаРеквизиты = Элементы.Добавить(ИмяРеквизита+"_Поля", Тип("ГруппаФормы"), ГруппаРодителя);
			ГруппаРеквизиты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаРеквизиты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаРеквизиты.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаРеквизиты.ОтображатьЗаголовок = Ложь;
			ГруппаРеквизиты.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		КонецЕсли; 
		
		Если Стр.Поле="Отступ" Тогда
			Группа.Видимость = Ложь;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УровеньОтступа(Стр)
	
	Позиция = Стр;
	Результат = 0;
	Пока НЕ Позиция.ПолучитьРодителя()=Неопределено Цикл
		Результат = Результат+1;
		Позиция = Позиция.ПолучитьРодителя();
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзменитьПоказатели(ЭлементыВыбор = Неопределено, СтрРодитель = Неопределено)
	
	Если ЭлементыВыбор=Неопределено Тогда
		ЭлементыВыбор = КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы;
	КонецЕсли; 
	Если СтрРодитель=Неопределено Тогда
		СтрРодитель = ПоляНастроек;
	КонецЕсли; 
	
	Для каждого Стр Из СтрРодитель.ПолучитьЭлементы() Цикл
		Если НЕ Стр.Создан Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Тип=ТипГруппаПоказателей() Тогда
			Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
				Если НЕ ЭтотОбъект[ОписаниеРеквизита.Ключ] Тогда
					Продолжить;
				КонецЕсли; 
				ГруппаПоказателей = ЭлементыВыбор.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаПоказателей.Заголовок = Стр.Заголовок;
				ГруппаПоказателей.Использование = Истина;
				Если Стр.ДополнительныеПараметры.Свойство("Расположение") Тогда
					ГруппаПоказателей.Расположение = Стр.ДополнительныеПараметры.Расположение;
				КонецЕсли; 
				ИзменитьПоказатели(ГруппаПоказателей.Элементы, Стр);
			КонецЦикла;
			Продолжить;
		КонецЕсли; 
		Если НЕ Стр.Тип=ТипПоказатель() Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого ОписаниеРеквизита Из Стр.Реквизиты Цикл
			Если НЕ ЭтотОбъект[ОписаниеРеквизита.Ключ] Тогда
				Продолжить;
			КонецЕсли; 
			ПолеКД = Новый ПолеКомпоновкиДанных(Стр.Поле);
			ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеКД);
			ВыбранноеПоле = ЭлементыВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеКД;
			ВыбранноеПоле.Использование = Истина;
			Если ДоступноеПоле=Неопределено ИЛИ Стр.Заголовок<>ДоступноеПоле.Заголовок Тогда
				ВыбранноеПоле.Заголовок = Стр.Заголовок;
			КонецЕсли; 
			Если Стр.ДополнительныеПараметры.Свойство("ПустойЗаголовок") И Стр.ДополнительныеПараметры.ПустойЗаголовок Тогда
				ВыбранноеПоле.Заголовок = " ";
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппировкуСравнения(СтруктураКолонок)
	
	Если ТипЗнч(ПолеСравнения)=Тип("ПеречислениеСсылка.Периодичность") Тогда
		// Добавить группировку сравнения по периоду
		Объект.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Периодичность", ПолеСравнения);
		ИмяПоля = "ДинамическийПериод";
		// Добавление разрешения на группировку по служебному полю ДинамическийПериод
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
		Поле = CRM_Отчеты.ПолеСхемы(СхемаКомпоновкиДанных, ИмяПоля);
		Если Поле<>Неопределено И Поле.ОграничениеИспользования.Группировка Тогда
			Ограничения = Поле.ОграничениеИспользования;
			Ограничения.Группировка = Ложь;
			Ограничения.Поле = Ложь;
			Ограничения.Порядок = Ложь;
			ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, НастройкиОтчета.АдресСхемы);
		КонецЕсли; 
	Иначе
		ИмяПоля = ПолеСравнения;
	КонецЕсли; 
	
	ДобавитьГруппировкуКолонки(СтруктураКолонок, ИмяПоля);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеФильтра(Путь, НестандартныйОбработчик = Ложь, УстановитьФильтр = Истина)
	
	Стр = ДобавитьОписаниеНастройки(ПоляНастроек.ПолучитьЭлементы(), ТипФильтр(), Путь);
	
	ВнестиИзмененияВРеквизитыНаФорме(Ложь);
	
	Если Найти(Путь, "ДобавленноеПоле_")>0 Тогда
		// Используемые в отчете дополнительные поля
		Если НЕ КомпоновщикНастроекТаблица.Настройки.ДополнительныеСвойства.Свойство("ДобавленныеПоля")
			ИЛИ ТипЗнч(КомпоновщикНастроекТаблица.Настройки.ДополнительныеСвойства.ДобавленныеПоля)<>Тип("Массив") Тогда
			КомпоновщикНастроекТаблица.Настройки.ДополнительныеСвойства.Вставить("ДобавленныеПоля", Новый Массив);
		КонецЕсли;
		КомпоновщикНастроекТаблица.Настройки.ДополнительныеСвойства.ДобавленныеПоля.Добавить(Путь);
	ИначеЕсли УстановитьФильтр Тогда
		УстановитьЗначениеФильтра(Стр.Поле, Неопределено,, Ложь, Истина)
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЭлементыИРеквизитыФильтра(Стр, ЭлементОтбора = Неопределено, ДоступноеПоле, РучноеДобавление)
	
	ТипЗначения = Стр.ТипЗначения;
	Если ТипЗначения.Типы().Количество()=0 Тогда
		// Некорректно задан тип
		ПоляНастроек.ПолучитьЭлементы().Удалить(Стр);
		Возврат;
	КонецЕсли;
	
	Идентификатор = НовоеИмяРеквизита(ТипФильтр());
	
	Стр.Элементы = Новый Структура;
	Стр.Реквизиты = Новый Структура;
	
	Значение = ?(НЕ ЭлементОтбора=Неопределено И ЭлементОтбора.Использование 
	И (ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно
	ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке
	ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
	ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно
	ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно), 
	ЭлементОтбора.ПравоеЗначение, 
	Неопределено);
	Стр.ЗначениеПоУмолчанию = Значение;
	
	Если (ТипЗначения.СодержитТип(Тип("Дата")) ИЛИ ТипЗначения.СодержитТип(Тип("Число"))) И ТипЗначения.Типы().Количество()=1 Тогда
		// Ищем другие фильтры по этому полю
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", ТипФильтр());
		СтруктураОтбора.Вставить("Поле", Стр.Поле);
		Идентификаторы = ИдентификаторыСтрок(ПоляНастроек, СтруктураОтбора);
		Если Идентификаторы.Количество()>1 Тогда
			Для ии = 1 По Идентификаторы.Количество()-1 Цикл
				ПоляНастроек.ПолучитьЭлементы().Удалить(Идентификаторы[1]);
			КонецЦикла;
			Стр = ПоляНастроек.НайтиПоИдентификатору(Идентификаторы[0]);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТипЗначения.Типы().Количество()>1 Тогда
		// Многотипный фильтр
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("Строка")) Тогда
		// Строка
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		// Дата
		Стр.ВидЭлемента = "Период";
		Если НЕ Стр.Реквизиты.Свойство(Идентификатор) Тогда
			Стр.Реквизиты.Вставить(Идентификатор, Новый СтандартныйПериод(ВариантСтандартногоПериода.ПроизвольныйПериод));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Стр.Реквизиты[Идентификатор] = Новый СтандартныйПериод;
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
			Стр.Реквизиты[Идентификатор].ДатаНачала = Значение;
			Стр.Реквизиты[Идентификатор].ДатаОкончания = Значение;
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
			И Стр.Реквизиты[Идентификатор].ДатаНачала<Значение Тогда
			Стр.Реквизиты[Идентификатор].ДатаНачала = Значение;
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно 
			И Стр.Реквизиты[Идентификатор].ДатаОкончания>Значение Тогда
			Стр.Реквизиты[Идентификатор].ДатаОкончания = Значение;
		КонецЕсли; 
		Стр.ТипЗначения = Новый ОписаниеТипов("СтандартныйПериод");
	ИначеЕсли ТипЗначения.СодержитТип(Тип("Число")) Тогда
		// Число
		Стр.ВидЭлемента = "Пределы";
		Если НЕ Стр.Реквизиты.Свойство(Идентификатор+"От") Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"От", 0);
		КонецЕсли; 
		Если НЕ Стр.Реквизиты.Свойство(Идентификатор+"До") Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"До", 0);
		КонецЕсли;
		Если ЭлементОтбора=Неопределено ИЛИ ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"От", Значение);
			Стр.Реквизиты.Вставить(Идентификатор+"До", Значение);
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
			И (НЕ Стр.Реквизиты.Свойство(Идентификатор+"От")
			ИЛИ Стр.Реквизиты[Идентификатор+"От"]<?(Значение=Неопределено, 0, Значение)) Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"От", ?(Значение=Неопределено, 0, Значение));
		ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно 
			И (НЕ Стр.Реквизиты.Свойство(Идентификатор+"До")
			ИЛИ Стр.Реквизиты[Идентификатор+"До"]>?(Значение=Неопределено, 0, Значение)) Тогда
			Стр.Реквизиты.Вставить(Идентификатор+"До", ?(Значение=Неопределено, 0, Значение));
		КонецЕсли;
	ИначеЕсли ТипЗначения.СодержитТип(Тип("Булево")) Тогда
		// Булево
		Стр.ВидЭлемента = "Тумблер";
		Значения = Новый СписокЗначений;
		Значения.Добавить(Перечисления.CRM_БулевоТриСостояния.НеИзменять, НСтр("en='All';ru='Все'"), Значение=Неопределено);
		Значения.Добавить(Перечисления.CRM_БулевоТриСостояния.Ложь, Формат(Ложь, ДоступноеПоле.ФорматРедактирования), Значение=Истина);
		Значения.Добавить(Перечисления.CRM_БулевоТриСостояния.Истина, Формат(Истина, ДоступноеПоле.ФорматРедактирования), Значение=Ложь);
		Стр.Реквизиты.Вставить(Идентификатор, Значения);
		Стр.ТипЗначения = Новый ОписаниеТипов("Булево,Неопределено");
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения.Типы().Получить(0)) Тогда
		// Ссылочный тип
		ПараметрыВыбора = ОпределитьПараметрыВыбора(ДоступноеПоле);
		КоличествоЭлементов = CRM_Отчеты.ОпределитьКоличествоЭлементов(ТипЗначения.Типы().Получить(0), ПараметрыВыбора);
		Если (КоличествоЭлементов=0 ИЛИ КоличествоЭлементов=1) И НЕ РучноеДобавление Тогда
			Возврат;
		КонецЕсли;
		Если КоличествоЭлементов<3 Тогда
			Значения = CRM_Отчеты.ПолучитьСписокЭлементов(ТипЗначения.Типы().Получить(0), ПараметрыВыбора);
			СтрокаЗаголовка = "";
			Для каждого Элемент Из Значения Цикл
				СтрокаЗаголовка = СтрокаЗаголовка+Строка(Элемент);
			КонецЦикла;
			Если СтрДлина(СтрокаЗаголовка)<=22 Тогда
				Стр.ВидЭлемента = "Тумблер";
				Стр.Реквизиты.Вставить(Идентификатор, Значения);
			Иначе
				Стр.ДополнительныеПараметры.Вставить("БыстрыйВыбор", Истина);
				Стр.ВидЭлемента = "Поле";
				Стр.Реквизиты.Вставить(Идентификатор, Значение);
			КонецЕсли; 
		Иначе
			Если КоличествоЭлементов<=10 Тогда
				Стр.ДополнительныеПараметры.Вставить("БыстрыйВыбор", Истина);
			КонецЕсли; 
			Стр.ВидЭлемента = "Поле";
			Стр.Реквизиты.Вставить(Идентификатор, Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПоляФильтра(Стр)
	
	Если (Стр.ВидЭлемента="Поле"
		ИЛИ Стр.ВидЭлемента="Период"
		ИЛИ Стр.ВидЭлемента="Булево") 
		И Стр.Реквизиты.Количество()>0 Тогда
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Возврат ЭтотОбъект[Реквизит.Ключ];
		КонецЦикла;
	ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
		Значения = Новый СписокЗначений;
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			ЗначениеРеквизита = ЭтотОбъект[Реквизит.Ключ];
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) ИЛИ 
				ЗначениеРеквизита=ПредопределенноеЗначение("Перечисление.CRM_БулевоТриСостояния.НеИзменять") Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЗначениеРеквизита)=Тип("ПеречислениеСсылка.CRM_БулевоТриСостояния") Тогда
				Значения.Добавить(?(
				ЗначениеРеквизита=ПредопределенноеЗначение("Перечисление.CRM_БулевоТриСостояния.Истина"), Истина,?(
				ЗначениеРеквизита=ПредопределенноеЗначение("Перечисление.CRM_БулевоТриСостояния.Ложь"), Ложь,
				Неопределено)));
			Иначе
				Значения.Добавить(ЗначениеРеквизита);
			КонецЕсли; 
		КонецЦикла;
		Если Значения.Количество()=0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Значения;
		КонецЕсли; 
	ИначеЕсли Стр.ВидЭлемента="Пределы" 
		И Стр.Реквизиты.Количество()>1 Тогда
		Итерация = 1;
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если Итерация=1 Тогда
				ЗначениеОт = ЭтотОбъект[Реквизит.Ключ];
			ИначеЕсли Итерация=2 Тогда
				ЗначениеДо = ЭтотОбъект[Реквизит.Ключ];
			КонецЕсли; 
			Итерация = Итерация+1;
		КонецЦикла; 
		Если ЗначениеОт=0 И ЗначениеДо=0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Новый Структура("ЗначениеОт, ЗначениеДо", ?(ЗначениеОт=0, Неопределено, ЗначениеОт), ?(ЗначениеДо=0, Неопределено, ЗначениеДо));
		КонецЕсли;
	ИначеЕсли Стр.ВидЭлемента="Флажок" Тогда
		Значения = Новый СписокЗначений;
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если ЭтотОбъект[Реквизит.Ключ] Тогда
				Значения.Добавить(Реквизит.Значение);
			КонецЕсли; 
		КонецЦикла; 
		Если Значения.Количество()=0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Значения;
		КонецЕсли; 
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ИзменитьИспользованиеФильтра(ПредставлениеОтбора, Значение)
	
	Если ПустаяСтрока(ПредставлениеОтбора) Тогда
		Возврат;
	КонецЕсли; 
	Для каждого ЭлементОтбора Из КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы Цикл
		Если НЕ ЭлементОтбора.Представление=ПредставлениеОтбора Тогда
			Продолжить;
		КонецЕсли; 		
		ЭлементОтбора.Использование = Значение;
		Прервать;
	КонецЦикла;
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеФильтра(Поле, Значение, ВидСравнения = Неопределено, ОбновлятьВПанели = Истина, ЗаменитьЗначение = Ложь)
	
	НайденныеЭлементы = Новый Массив;
	ПолеКД = Новый ПолеКомпоновкиДанных(Поле);
	Для каждого ЭлементОтбор Из КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы Цикл
		Если НЕ ТипЗнч(ЭлементОтбор)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.ЛевоеЗначение=ПолеКД Тогда
			Продолжить;
		КонецЕсли;
		НайденныеЭлементы.Добавить(ЭлементОтбор);
	КонецЦикла;
	
	Если Значение=Неопределено Тогда
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			ЭлементОтбор.Использование = Ложь;
		КонецЦикла;
		Если НайденныеЭлементы.Количество()=0 Тогда
			ЭлементОтбор = КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбор.Использование = Ложь;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Значение)=Тип("Структура") Тогда
		ЗначениеОт = Значение.ЗначениеОт;
		ЗначениеДо = Значение.ЗначениеДо;
		ИмяОтметки = НовоеИмяОтметкиФильтра();
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			Если НЕ ЗначениеОт=Неопределено И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
				ЭлементОтбор.ПравоеЗначение = ЗначениеОт;
				ЭлементОтбор.Использование = Истина;
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
				Если Значение.Свойство("ВключаяГраницы") И Значение.ВключаяГраницы Тогда
					ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ИначеЕсли Значение.Свойство("ВключаяГраницы") И НЕ Значение.ВключаяГраницы Тогда
					ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
				КонецЕсли; 
				ЗначениеОт = Неопределено;
				Продолжить;
			КонецЕсли; 
			Если НЕ ЗначениеДо=Неопределено И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				ЭлементОтбор.ПравоеЗначение = ЗначениеДо;
				ЭлементОтбор.Использование = Истина;
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
				Если Значение.Свойство("ВключаяГраницы") И Значение.ВключаяГраницы Тогда
					ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ИначеЕсли Значение.Свойство("ВключаяГраницы") И НЕ Значение.ВключаяГраницы Тогда
					ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
				КонецЕсли; 
				ЗначениеДо = Неопределено;
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗначениеОт) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
				// Не изменяем
				Продолжить;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ЗначениеДо) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				// Не изменяем
				Продолжить;
			КонецЕсли; 
			КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
		КонецЦикла;
		Если НЕ ЗначениеОт=Неопределено Тогда
			ЭлементОтбор = КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			Если Значение.Свойство("ВключаяГраницы") И Значение.ВключаяГраницы Тогда
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ИначеЕсли Значение.Свойство("ВключаяГраницы") И НЕ Значение.ВключаяГраницы Тогда
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			Иначе
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			КонецЕсли; 
			ЭлементОтбор.ПравоеЗначение = ЗначениеОт;
			ЭлементОтбор.Использование = Истина;
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
		КонецЕсли; 
		Если НЕ ЗначениеДо=Неопределено Тогда
			ЭлементОтбор = КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			Если Значение.Свойство("ВключаяГраницы") И Значение.ВключаяГраницы Тогда
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ИначеЕсли Значение.Свойство("ВключаяГраницы") И НЕ Значение.ВключаяГраницы Тогда
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			Иначе
				ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			КонецЕсли; 
			ЭлементОтбор.ПравоеЗначение = ЗначениеДо;
			ЭлементОтбор.Использование = Истина;
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение)=Тип("СтандартныйПериод") Тогда
		ДатаНачала = Значение.ДатаНачала;
		ДатаОкончания = Значение.ДатаОкончания;
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			Если ЗначениеЗаполнено(ДатаНачала) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
				ЭлементОтбор.ПравоеЗначение = ДатаНачала;
				ЭлементОтбор.Использование = Истина;
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
				ЗначениеОт = Неопределено;
				Продолжить;
			КонецЕсли; 
			Если ЗначениеЗаполнено(ДатаОкончания) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				ЭлементОтбор.ПравоеЗначение = ДатаОкончания;
				ЭлементОтбор.Использование = Истина;
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
				ЗначениеОт = Неопределено;
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДатаНачала) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
				// Не изменяем
				Продолжить;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ДатаОкончания) И (ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				// Не изменяем
				Продолжить;
			КонецЕсли; 
			КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
		КонецЦикла;
		ИмяОтметки = НовоеИмяОтметкиФильтра();
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			ЭлементОтбор = КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбор.ПравоеЗначение = НачалоДня(ДатаНачала);
			ЭлементОтбор.Использование = Истина;
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ЭлементОтбор = КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбор.ЛевоеЗначение = ПолеКД;
			ЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбор.ПравоеЗначение = КонецДня(ДатаОкончания);
			ЭлементОтбор.Использование = Истина;
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = ИмяОтметки;
		КонецЕсли; 
	Иначе
		КоличествоЭлементов = НайденныеЭлементы.Количество();
		Если КоличествоЭлементов=0 ИЛИ ЗаменитьЗначение Тогда
			Если КоличествоЭлементов>0 Тогда
				Для ии = 0 По КоличествоЭлементов-1 Цикл
					КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Удалить(НайденныеЭлементы[ии]);
				КонецЦикла;
			КонецЕсли; 
			// Новый элемент отбора
			НайденныйЭлемент = КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НайденныйЭлемент.ЛевоеЗначение = ПолеКД;
			НайденныйЭлемент.ВидСравнения = ВидСравнения;
			Если ТипЗнч(Значение)=Тип("СписокЗначений") 
				ИЛИ (НЕ ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
				И НЕ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) Тогда
				НайденныйЭлемент.ПравоеЗначение = Значение;
			Иначе 
				НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
				НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
			КонецЕсли; 
			НайденныйЭлемент.Использование = Истина;
		Иначе
			Если ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				// Оставим только первый элемент
				Для ии = 1 По КоличествоЭлементов-1 Цикл
					КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Удалить(НайденныеЭлементы[ии]);
				КонецЦикла;
			КонецЕсли; 
			НайденныйЭлемент = НайденныеЭлементы[0];
			Если НЕ ЗначениеЗаполнено(НайденныйЭлемент.ПравоеЗначение) 
				ИЛИ НЕ НайденныйЭлемент.Использование Тогда
				// Найденный элемент отбора пустой
				НайденныйЭлемент.ВидСравнения = ВидСравнения;
				Если (ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
					ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)
					И НЕ ТипЗнч(Значение)=Тип("СписокЗначений") Тогда 
					НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
					НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
				Иначе
					НайденныйЭлемент.ПравоеЗначение = Значение;
				КонецЕсли; 
				НайденныйЭлемент.Использование = Истина;
			ИначеЕсли НЕ ВидСравнения=НайденныйЭлемент.ВидСравнения Тогда
				// Не совпадают виды сравнения найденного и добавляемого элементов
				Если (НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно И (ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии))
					ИЛИ (НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно И (ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)) Тогда
					// Объединение фильтров
					Если ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
						ЗначениеФильтра = Значение;
					Иначе
						ЗначениеФильтра = Новый СписокЗначений;
						ЗначениеФильтра.Добавить(Значение);
					КонецЕсли; 
					ЗначениеФильтра.Добавить(НайденныйЭлемент.ПравоеЗначение);
					НайденныйЭлемент.ВидСравнения = ВидСравнения;
					НайденныйЭлемент.ПравоеЗначение = ЗначениеФильтра;
				ИначеЕсли (ВидСравнения=ВидСравненияКомпоновкиДанных.Равно И (НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке ИЛИ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии))
					ИЛИ (ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно И (НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии)) Тогда
					Если ТипЗнч(НайденныйЭлемент.ПравоеЗначение)=Тип("СписокЗначений") Тогда
						НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
					Иначе
						ТекущееЗначение = НайденныйЭлемент.ПравоеЗначение;
						НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
						НайденныйЭлемент.ПравоеЗначение.Добавить(ТекущееЗначение);
						НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
					КонецЕсли; 
				ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					// Был ВСпискеПоИерархии, накладывается НеВСпискеПоИерархии
					Элемент = НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(Значение);
				ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					// Был НеВСпискеПоИерархии, накладывается ВСпискеПоИерархии
					НайденныйЭлемент.ВидСравнения = ВидСравнения;
					Если ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
						НайденныйЭлемент.ПравоеЗначение = Значение;
					ИначеЕсли ТипЗнч(НайденныйЭлемент.ПравоеЗначение)=Тип("СписокЗначений") Тогда
						НайденныйЭлемент.ПравоеЗначение.Очистить();
						НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
					Иначе
						НайденныйЭлемент.ПравоеЗначение = Значение;
					КонецЕсли; 
					НайденныйЭлемент.Использование = Истина;
				Иначе
					// В других случаях добавляем новый отбор
					НайденныйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НайденныйЭлемент.ЛевоеЗначение = ПолеКД;
					НайденныйЭлемент.ВидСравнения = ВидСравнения;
					НайденныйЭлемент.ПравоеЗначение = Значение;
					НайденныйЭлемент.Использование = Истина;
				КонецЕсли; 
			Иначе
				// Объединение найденного и добавляемого фильтров
				Если ТипЗнч(НайденныйЭлемент.ПравоеЗначение)=Тип("СписокЗначений") И НЕ ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
					Если НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(Значение)=Неопределено Тогда
						НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
					КонецЕсли;
				ИначеЕсли ТипЗнч(НайденныйЭлемент.ПравоеЗначение)=Тип("СписокЗначений") И ТипЗнч(Значение)=Тип("СписокЗначений") Тогда
					Для каждого Элемент Из Значение Цикл
						Если НЕ НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(Элемент.Значение)=Неопределено Тогда
							Продолжить;
						КонецЕсли; 
						НайденныйЭлемент.ПравоеЗначение.Добавить(Элемент.Значение);
					КонецЦикла; 
				Иначе
					НайденныйЭлемент.ПравоеЗначение = Значение;
				КонецЕсли; 
				НайденныйЭлемент.Использование = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НайденныйЭлемент.ПравоеЗначение) Тогда
				КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Удалить(НайденныйЭлемент);
			КонецЕсли; 
		КонецЕсли;
		Если НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			ИЛИ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			НайденныйЭлемент.ПредставлениеПользовательскойНастройки = "";
		КонецЕсли; 
		Если НЕ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			И НЕ НайденныйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
			И ПустаяСтрока(НайденныйЭлемент.ПредставлениеПользовательскойНастройки) Тогда
			НайденныйЭлемент.ПредставлениеПользовательскойНастройки = НовоеИмяОтметкиФильтра();
		КонецЕсли; 
	КонецЕсли;
	
	Если ОбновлятьВПанели Тогда
		Если СтрокаОписанияПоля(ТипФильтр(), Поле, ПоляНастроек)=Неопределено Тогда
			ДобавитьОписаниеФильтра(Поле,, Ложь);
		КонецЕсли; 
	КонецЕсли; 
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФильтр(Идентификатор)
	
	СтрНаложенногоФильтра = НаложенныеФильтры.НайтиПоИдентификатору(Идентификатор);
	МассивКОтключению = Новый Массив;
	МассивКУдаленияю = Новый Массив;
	ПолеКД = Новый ПолеКомпоновкиДанных(СтрНаложенногоФильтра.Поле);
	Для каждого ЭлементОтбор Из КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбор.ПредставлениеПользовательскойНастройки=СтрНаложенногоФильтра.ИмяКнопки Тогда
			Если Найти(ЭлементОтбор.ПредставлениеПользовательскойНастройки, "ДобавленноеПоле_")>0 Тогда
				МассивКУдаленияю.Добавить(ЭлементОтбор);
			Иначе
				МассивКОтключению.Добавить(ЭлементОтбор);
			КонецЕсли; 
			Если НЕ ПустаяСтрока(ЭлементОтбор.Представление) Тогда
				ОбновитьРеквизитыФильтровВПанелиПоПредставлению(ЭлементОтбор.Представление, Ложь);
			Иначе
				ОбновитьРеквизитыФильтровВПанели(СтрНаложенногоФильтра.Поле, СтрНаложенногоФильтра.Значение,, Истина);
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		Если НЕ ТипЗнч(ЭлементОтбор)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.ЛевоеЗначение=ПолеКД Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			МассивКОтключению.Добавить(ЭлементОтбор);
		ИначеЕсли ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("СписокЗначений") И ТипЗнч(СтрНаложенногоФильтра.Значение)=Тип("СписокЗначений") Тогда
			МассивКОтключению.Добавить(ЭлементОтбор);
		ИначеЕсли ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("СписокЗначений") Тогда 
			Элемент = ЭлементОтбор.ПравоеЗначение.НайтиПоЗначению(СтрНаложенногоФильтра.Значение);
			Если НЕ Элемент=Неопределено Тогда
				ЭлементОтбор.ПравоеЗначение.Удалить(Элемент);
				Если ЭлементОтбор.ПравоеЗначение.Количество()=0 Тогда
					МассивКОтключению.Добавить(ЭлементОтбор);
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементОтбор.ПравоеЗначение=СтрНаложенногоФильтра.Значение Тогда
			МассивКОтключению.Добавить(ЭлементОтбор);
		КонецЕсли;
		// Сброс отоборов в панели настроек
		ОбновитьРеквизитыФильтровВПанели(СтрНаложенногоФильтра.Поле, СтрНаложенногоФильтра.Значение,, Истина);
	КонецЦикла; 
	Для каждого ЭлементОтбор Из МассивКОтключению Цикл
		ЭлементОтбор.Использование = Ложь;
	КонецЦикла; 
	Для каждого ЭлементОтбор Из МассивКУдаленияю Цикл
		КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
	КонецЦикла; 
	
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыФильтровВПанелиПоПредставлению(Представление, Значение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипФильтр());
	Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		Если НЕ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Стр.ДополнительныеПараметры, "СвязьПоПредставлению", Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Стр.Заголовок=Представление Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			ЭтотОбъект[Реквизит.Ключ] = Значение;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыФильтровВПанели(Поле, Значение, ВидСравнения = Неопределено, Удаление = Ложь)
	
	Стр = СтрокаОписанияПоля(ТипФильтр(), Поле, ПоляНастроек);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Стр.НестандартныйОбработчик Тогда
		Если Стр.ВидЭлемента="Флажок" Тогда
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				Если НЕ Реквизит.Значение=Значение Тогда
					Продолжить;
				КонецЕсли; 
				НовоеЗначение = ?(Удаление, Неопределено, Значение);
				ЭтотОбъект[Реквизит.Ключ] = НовоеЗначение;
			КонецЦикла; 
		Иначе
			Для каждого Реквизит Из Стр.Реквизиты Цикл
				НовоеЗначение = ?(Удаление, Реквизит.Значение, Значение);
				ЭтотОбъект[Реквизит.Ключ] = НовоеЗначение;
			КонецЦикла; 
		КонецЕсли; 
	ИначеЕсли Стр.ВидЭлемента="Флажок" ИЛИ Стр.ВидЭлемента="Булево" Тогда
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если Реквизит.Значение=Значение Тогда
				ЭтотОбъект[Реквизит.Ключ] = НЕ Удаление;
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли Стр.ВидЭлемента="Пределы" Тогда
		Если Удаление Тогда
			ЗначениеОт = 0;
			ЗначениеДо = 0;
		ИначеЕсли ТипЗнч(Значение)=Тип("Структура") Тогда 
			ЗначениеОт = Значение.ЗначениеОт; 
			ЗначениеДо = Значение.ЗначениеДо;
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			ЗначениеОт = Значение; 
			ЗначениеДо = Неопределено;
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			ЗначениеОт = Неопределено; 
			ЗначениеДо = Значение;
		КонецЕсли;
		Итерация = 1;
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если Итерация=1 Тогда
				Если ЗначениеОт=Неопределено Тогда
					Итерация = Итерация+1;
					Продолжить;
				КонецЕсли;
				ЭтаФорма[Реквизит.Ключ] = ЗначениеОт;
			ИначеЕсли Итерация=2 Тогда
				Если ЗначениеДо=Неопределено Тогда
					Итерация = Итерация+1;
					Продолжить;
				КонецЕсли; 
				ЭтотОбъект[Реквизит.Ключ] = ЗначениеДо;
			КонецЕсли; 
			Итерация = Итерация+1;
		КонецЦикла; 
	ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
		Если Стр.ТипЗначения.Типы().Количество()=1 И Стр.ТипЗначения.Типы().Получить(0)=Тип("Булево") Тогда
			Если Удаление Тогда
				НовоеЗначение = ПредопределенноеЗначение("Перечисление.CRM_БулевоТриСостояния.НеИзменять");
			Иначе 
				НовоеЗначение = ВБулевоТриСостояния(Значение);
			КонецЕсли; 
		Иначе
			Если Удаление Тогда
				НовоеЗначение = Неопределено;
			Иначе 
				НовоеЗначение = Значение;
			КонецЕсли; 
		КонецЕсли; 
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			ЭтотОбъект[Реквизит.Ключ] = НовоеЗначение;
		КонецЦикла; 
	ИначеЕсли Стр.ВидЭлемента="Период" Тогда
		Если Удаление Тогда
			НовоеЗначение = Новый СтандартныйПериод;
		ИначеЕсли ТипЗнч(Значение)=Тип("СтандартныйПериод") Тогда 
			НовоеЗначение = Значение;
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			НовоеЗначение = Новый СтандартныйПериод(Значение, '0001-01-01');
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			НовоеЗначение = Новый СтандартныйПериод('0001-01-01', Значение);
		КонецЕсли; 
		Для каждого Реквизит Из Стр.Реквизиты Цикл
			Если НЕ ЗначениеЗаполнено(НовоеЗначение) Тогда
				ЭтотОбъект[Реквизит.Ключ] = НовоеЗначение;
			ИначеЕсли НовоеЗначение.ДатаНачала='0001-01-01' Тогда
				ЭтотОбъект[Реквизит.Ключ].ДатаОкончания = НовоеЗначение.ДатаОкончания;
			ИначеЕсли НовоеЗначение.ДатаОкончания='0001-01-01' Тогда
				ЭтотОбъект[Реквизит.Ключ].ДатаНачала = НовоеЗначение.ДатаНачала;
			Иначе
				ЭтотОбъект[Реквизит.Ключ] = НовоеЗначение;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СписокДобавленныхФильтров()
	
	СписокПолей = Новый СписокЗначений;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тип", ТипФильтр());
	СтрокиПолей = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	Для каждого СтрПоле Из СтрокиПолей Цикл
		СписокПолей.Добавить(СтрПоле.Поле);
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

&НаСервере
Процедура ОпределитьЭлементыИРеквизитыПараметра(Стр, Параметр = Неопределено, ДоступныйПараметр)
	
	ТипЗначения = Стр.ТипЗначения;
	Идентификатор = НовоеИмяРеквизита(ТипПараметр());
	
	Стр.Элементы = Новый Структура;
	Стр.Реквизиты = Новый Структура;
	
	Значение = ?(НЕ Параметр=Неопределено И Параметр.Использование, 
	Параметр.Значение, 
	Неопределено);
	
	Стр.ЗначениеПоУмолчанию = Значение;
	
	Если ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации"))
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗначения.Типы().Количество()=0 Тогда
		// Неверно задан тип
		Возврат;
	ИначеЕсли ТипЗначения.Типы().Количество()>1 Тогда
		// Многотипный фильтр
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("Строка")) Тогда
		// Строка
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("Дата")) Тогда
		// Дата
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("СтандартныйПериод")) Тогда
		// Дата
		Стр.ВидЭлемента = "Период";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("Число")) Тогда
		// Число
		Стр.ВидЭлемента = "Поле";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначения, Тип("Булево")) Тогда
		// Булево
		Стр.ВидЭлемента = "Булево";
		Стр.Реквизиты.Вставить(Идентификатор, Значение);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения.Типы().Получить(0)) Тогда
		// Ссылочный тип
		ПараметрыВыбора = ОпределитьПараметрыВыбора(ДоступныйПараметр);
		КоличествоЭлементов = CRM_Отчеты.ОпределитьКоличествоЭлементов(ТипЗначения.Типы().Получить(0), ПараметрыВыбора);
		Если КоличествоЭлементов=0 Тогда
			// Ни одного объекта в БД
			Возврат;
		КонецЕсли; 
		Если КоличествоЭлементов<3 Тогда
			Стр.ВидЭлемента = "Тумблер";
			Значения = CRM_Отчеты.ПолучитьСписокЭлементов(ТипЗначения.Типы().Получить(0), ПараметрыВыбора);
			Стр.Реквизиты.Вставить(Идентификатор, Значения);
		Иначе
			Если КоличествоЭлементов<=10 Тогда
				Стр.ДополнительныеПараметры.Вставить("БыстрыйВыбор", Истина);
			КонецЕсли; 
			Стр.ВидЭлемента = "Поле";
			Стр.Реквизиты.Вставить(Идентификатор, Значение);
		КонецЕсли;
	Иначе
		// ХранилищеЗначения, УникальныйИдентификатор
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНаложенныхФильтров()
	
	НаложенныеФильтры.Очистить();
	
	СхемаКД = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	
	Для каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если НЕ ЭлементОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭлементОтбор.Представление) И ЭлементОтбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Стр = НаложенныеФильтры.Добавить();
			Стр.ИмяКнопки = ЭлементОтбор.ПредставлениеПользовательскойНастройки;
			Стр.Заголовок = ЭлементОтбор.Представление;
			Если ТипЗнч(ЭлементОтбор)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбор.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				Стр.ПризнакИсключения = Истина;
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбор)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Стр = НаложенныеФильтры.Добавить();
			Если ПустаяСтрока(ЭлементОтбор.ПредставлениеПользовательскойНастройки) Тогда
				ЭлементОтбор.ПредставлениеПользовательскойНастройки = НовоеИмяОтметкиФильтра();
			КонецЕсли; 
			Стр.ИмяКнопки = ЭлементОтбор.ПредставлениеПользовательскойНастройки;
			Стр.Заголовок = ЗаголовокГруппыОтбора(ЭлементОтбор);
			Если ЭлементОтбор.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				Стр.ПризнакИсключения = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		Если НЕ ТипЗнч(ЭлементОтбор)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбор.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = Строка(ЭлементОтбор.ЛевоеЗначение);
		ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбор.ЛевоеЗначение);
		
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Поле", ИмяПоля);
			СтрокиФильтров = НаложенныеФильтры.НайтиСтроки(СтруктураОтбора);
			Если СтрокиФильтров.Количество()=0 Тогда
				Стр = НаложенныеФильтры.Добавить();
				Если НЕ ДоступноеПоле=Неопределено И ДоступноеПоле.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
					Стр.Значение = Новый СтандартныйПериод;
				Иначе
					Стр.Значение = Новый Структура("ЗначениеОт,ЗначениеДо", Неопределено, Неопределено);
				КонецЕсли; 
			Иначе
				Стр = СтрокиФильтров[0];
			КонецЕсли;
		Иначе
			Стр = НаложенныеФильтры.Добавить();
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭлементОтбор.ПредставлениеПользовательскойНастройки) Тогда
			Стр.ИмяКнопки = ЭлементОтбор.ПредставлениеПользовательскойНастройки;
		КонецЕсли;
		
		Стр.Поле = ИмяПоля;
		Если НЕ ПустаяСтрока(ЭлементОтбор.Представление) Тогда
			Стр.Заголовок = ЭлементОтбор.Представление;
		КонецЕсли; 
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			Стр.ПризнакИсключения = Истина;
		КонецЕсли; 
		
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
			Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
				Стр.Значение.ДатаНачала = НачалоДня(ЭлементОтбор.ПравоеЗначение);
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Структура") Тогда
				Стр.Значение.ЗначениеОт = ?(Стр.Значение.ЗначениеОт=Неопределено, ЭлементОтбор.ПравоеЗначение, Макс(?(ЭлементОтбор.ПравоеЗначение = Неопределено, 0, ЭлементОтбор.ПравоеЗначение), Стр.Значение.ЗначениеОт));
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Число") Тогда
				Стр.Значение = Новый Структура("ЗначениеОт, ЗначениеДо");
				Стр.Значение.ЗначениеОт = ?(Стр.Значение.ЗначениеОт=Неопределено, ЭлементОтбор.ПравоеЗначение, Макс(?(ЭлементОтбор.ПравоеЗначение = Неопределено, 0, ЭлементОтбор.ПравоеЗначение), Стр.Значение.ЗначениеОт));
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Дата") Тогда
				Стр.Значение = Новый СтандартныйПериод;
				Стр.Значение.ДатаНачала = НачалоДня(ЭлементОтбор.ПравоеЗначение);
			КонецЕсли; 
		ИначеЕсли ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно 
			ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
			Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
				Стр.Значение.ДатаОкончания = ?(НЕ ЗначениеЗаполнено(ЭлементОтбор.ПравоеЗначение), ЭлементОтбор.ПравоеЗначение, ЭлементОтбор.ПравоеЗначение);
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Структура") Тогда
				Стр.Значение.ЗначениеДо = ?(Стр.Значение.ЗначениеДо=Неопределено, ЭлементОтбор.ПравоеЗначение, Мин(?(ЭлементОтбор.ПравоеЗначение = Неопределено, 0, ЭлементОтбор.ПравоеЗначение), Стр.Значение.ЗначениеДо));
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Число") Тогда
				Стр.Значение = Новый Структура("ЗначениеОт, ЗначениеДо");
				Стр.Значение.ЗначениеДо = ?(Стр.Значение.ЗначениеДо=Неопределено, ЭлементОтбор.ПравоеЗначение, Мин(?(ЭлементОтбор.ПравоеЗначение = Неопределено, 0, ЭлементОтбор.ПравоеЗначение), Стр.Значение.ЗначениеДо));
			ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Дата") Тогда
				Стр.Значение = Новый СтандартныйПериод;
				Стр.Значение.ДатаОкончания = ?(НЕ ЗначениеЗаполнено(ЭлементОтбор.ПравоеЗначение), ЭлементОтбор.ПравоеЗначение, ЭлементОтбор.ПравоеЗначение);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ЭлементОтбор.ПравоеЗначение)=Тип("СписокЗначений") И ЭлементОтбор.ПравоеЗначение.Количество()<=10 Тогда
			Для каждого ЭлементСписка Из ЭлементОтбор.ПравоеЗначение Цикл
				Если ЗначениеЗаполнено(Стр.Значение) Тогда
					НоваяСтрока = НаложенныеФильтры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
					НоваяСтрока.Значение = ЭлементСписка.Значение;
					Стр = НоваяСтрока;
				Иначе
					Стр.Значение = ЭлементСписка.Значение;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ЭлементОтбор.ПредставлениеПользовательскойНастройки) Тогда
					Индекс = ЭлементОтбор.ПравоеЗначение.Индекс(ЭлементСписка);
					Стр.ИмяКнопки = ЭлементОтбор.ПредставлениеПользовательскойНастройки+"_"+Формат(Индекс, "ЧГ=0");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Стр.Значение = ЭлементОтбор.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование заголовков отметок фильтров
	Для каждого Стр Из НаложенныеФильтры Цикл
		
		Если НЕ ПустаяСтрока(Стр.Заголовок) Тогда
			Продолжить;
		КонецЕсли; 
		
		ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Стр.Поле));
		Если ДоступноеПоле=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Стр.Заголовок = ДоступноеПоле.Заголовок;
		
		ЗаголовокФильтра = Стр.Заголовок;
		Префикс = "";
		
		Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
			ПредставлениеЗначения = ПредставлениеПериода(Стр.Значение.ДатаНачала, Стр.Значение.ДатаОкончания);
			Префикс = ЗаголовокФильтра;
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Структура") Тогда
			Если НЕ Стр.Значение.ЗначениеОт=Неопределено И НЕ Стр.Значение.ЗначениеДо=Неопределено Тогда
				ПредставлениеЗначения = НСтр("en='from ';ru='от '")+Строка(Стр.Значение.ЗначениеОт) + НСтр("en=' to ';ru=' до '") + Строка(Стр.Значение.ЗначениеДо);
			ИначеЕсли НЕ Стр.Значение.ЗначениеОт=Неопределено Тогда
				ПредставлениеЗначения = НСтр("en='from ';ru='от '")+Строка(Стр.Значение.ЗначениеОт);
			ИначеЕсли НЕ Стр.Значение.ЗначениеДо=Неопределено Тогда
				ПредставлениеЗначения = НСтр("en='до ';ru='до '")+Строка(Стр.Значение.ЗначениеДо);
			КонецЕсли; 
			Префикс = ЗаголовокФильтра;
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("СписокЗначений") Тогда
			ПредставлениеЗначения = Строка(Стр.Значение);
		ИначеЕсли НЕ ЗначениеЗаполнено(Стр.Значение) Тогда
			ПредставлениеЗначения = ЗаголовокФильтра+НСтр("en=': not specified';ru=': не указано'");
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Стр.Значение)) Тогда
			ПредставлениеЗначения = Строка(Стр.Значение);
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Булево") ИЛИ ТипЗнч(Стр.Значение)=Тип("Дата") Тогда
			ПолеСхемы = CRM_Отчеты.ПолеСхемы(СхемаКД, Стр.Поле);
			Если ПолеСхемы = Неопределено Тогда
				Параметр = Неопределено;
			Иначе
				Параметр = ПолеСхемы.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Формат"));
				Если Параметр=Неопределено ИЛИ НЕ ЗначениеЗаполнено(Параметр.Значение) Тогда
					Параметр = ПолеСхемы.ПараметрыРедактирования.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФорматРедактирования"));
				КонецЕсли; 
			КонецЕсли;
			Если Параметр <> Неопределено
				И Параметр.Использование
				И ЗначениеЗаполнено(Параметр.Значение) Тогда
				ПредставлениеЗначения = Формат(Стр.Значение, Параметр.Значение);
				Префикс = "";
			Иначе
				ПредставлениеЗначения = Строка(Стр.Значение);
				Префикс = ЗаголовокФильтра;
			КонецЕсли; 
		Иначе
			ПредставлениеЗначения = Строка(Стр.Значение);
			Префикс = ЗаголовокФильтра;
		КонецЕсли;
		
		Стр.Заголовок = ?(ПустаяСтрока(Префикс), "", Префикс + ": ") + ПредставлениеЗначения;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокГруппыОтбора(Группа)
	
	Результат = "";
	Для каждого Элемент Из Группа.Элементы Цикл
		Если НЕ ПустаяСтрока(Результат) И НЕ Группа.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			Результат = Результат+" "+ПредставлениеТипаГруппы(Группа.ТипГруппы)+" ";
		ИначеЕсли ПустаяСтрока(Результат) И Группа.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			Результат = ПредставлениеТипаГруппы(Группа.ТипГруппы)+" ";
		КонецЕсли;
		Если НЕ ПустаяСтрока(Элемент.Представление) Тогда
			Результат = Результат+Элемент.Представление;
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Элемент)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = Результат+"("+ЗаголовокГруппыОтбора(Элемент)+")";
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(Элемент.ЛевоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляОтбора.НайтиПоле(Элемент.ЛевоеЗначение);
			Результат = Результат+?(ДоступноеПоле=Неопределено ИЛИ ПустаяСтрока(ДоступноеПоле.Заголовок), Строка(Элемент.ЛевоеЗначение), ДоступноеПоле.Заголовок);
		Иначе
			Результат = Результат+Строка(Элемент.ЛевоеЗначение);
		КонецЕсли; 
		Результат = Результат+ПредставлениеВидаСравнения(Элемент.ВидСравнения);
		Если Элемент.ВидСравнения<>ВидСравненияКомпоновкиДанных.Заполнено И Элемент.ВидСравнения<>ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			Если ТипЗнч(Элемент.ПравоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
				ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляОтбора.НайтиПоле(Элемент.ПравоеЗначение);
				Результат = Результат+?(ДоступноеПоле=Неопределено ИЛИ ПустаяСтрока(ДоступноеПоле.Заголовок), Строка(Элемент.ЛевоеЗначение), ДоступноеПоле.Заголовок);
			Иначе
				Результат = Результат+Строка(Элемент.ПравоеЗначение);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеТипаГруппы(Тип)
	
	Если Тип=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
		Возврат НСтр("en='I';ru='И'");
	ИначеЕсли Тип=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		Возврат НСтр("en='OR';ru='ИЛИ'");
	ИначеЕсли Тип=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		Возврат НСтр("en='NOT';ru='НЕ'");
	Иначе
		Возврат "";
	КонецЕсли; 	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеВидаСравнения(ВидСравнения)
	
	Если ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат ">";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ">=";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Возврат НСтр("en=' in group ';ru=' в группе '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат НСтр("en=' in list ';ru=' в списке '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Возврат НСтр("en=' in list of groups ';ru=' в списке групп '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Возврат НСтр("en=' filled';ru=' заполнено'");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат "<";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат "<=";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		Возврат НСтр("en=' starts with ';ru=' начинается с '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат НСтр("en=' not in group ';ru=' не в группе '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат НСтр("en=' not in list ';ru=' не в списке '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат НСтр("en=' not in list of groups ';ru=' не в списке групп '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Возврат НСтр("en=' not filled';ru=' не заполнено'");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		Возврат НСтр("en=' does not start with ';ru=' не начинается с '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		Возврат НСтр("en=' not similar ';ru=' не подобно '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат "<>";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат НСтр("en=' not contain ';ru=' не содержит '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Подобно Тогда
		Возврат НСтр("en=' like ';ru=' подобно '");
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат "=";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит Тогда
		Возврат НСтр("en=' contains ';ru=' содержит '");
	Иначе
		Возврат "";
	КонецЕсли; 	
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеОтметокФильтров()
	
	ЗаполнитьТаблицуНаложенныхФильтров();
	
	МаксимальнаяДлинаСтрокиОтметок = 65;
	
	МассивКУдалению = Новый Массив;
	Для каждого Элемент Из Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы Цикл
		Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			Если ПодЭлемент=Элементы.ПредставлениеПериода ИЛИ ПодЭлемент=Элементы.ДекорацияНаполнитель_1 Тогда
				Продолжить;
			КонецЕсли; 
			МассивКУдалению.Добавить(ПодЭлемент);
		КонецЦикла;
		Если Элемент=Элементы.СтрокаОтметокФильтров_1 Тогда
			Продолжить;
		КонецЕсли; 
		МассивКУдалению.Добавить(Элемент);
	КонецЦикла; 
	
	Для каждого Элемент Из МассивКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Если Элементы.ПредставлениеПериода.Видимость Тогда
		Элементы.ПредставлениеПериода.Ширина = Окр(СтрДлина(ПредставлениеПериода)*0.75+4);
		ТекущаяДлинаСтрокиОтметок = Элементы.ПредставлениеПериода.Ширина+СтрДлина(Элементы.ПредставлениеПериода.Заголовок)+1;
	Иначе
		ТекущаяДлинаСтрокиОтметок = 0;
	КонецЕсли; 
	
	Для каждого Стр Из НаложенныеФильтры Цикл
		
		Если ПустаяСтрока(Стр.ИмяКнопки) Тогда
			Стр.ИмяКнопки = НовоеИмяОтметкиФильтра();
		КонецЕсли;
		
		Если СтрДлина(Стр.Заголовок)>25 Тогда
			ЗаголовокЭлемента = Лев(Стр.Заголовок, 23)+"...";
		Иначе
			ЗаголовокЭлемента = Стр.Заголовок;
		КонецЕсли; 
		
		Если ФормаПараметры.ВариантИнтерфейса=ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
			ДлинаЭлемента = Окр(СтрДлина(ЗаголовокЭлемента)*0.8+4);
		Иначе
			ДлинаЭлемента = Окр(СтрДлина(ЗаголовокЭлемента)*0.85+4);
		КонецЕсли; 
		
		Если Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество() = 0
			ИЛИ ТекущаяДлинаСтрокиОтметок + ДлинаЭлемента > МаксимальнаяДлинаСтрокиОтметок Тогда
			Индекс = Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество()+1;
			ГруппаСтрока = Элементы.Добавить("СтрокаОтметокФильтров_"+Индекс, Тип("ГруппаФормы"), Элементы.СтрокиОтметокФильтров);
			ГруппаСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСтрока.ОтображатьЗаголовок = Ложь;
			ГруппаСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаСтрока.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСтрока.РастягиватьПоГоризонтали = Истина;
			ГруппаСтрока.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
			ГруппаСтрока.Высота = 1;
			ДекорацияНаполнитель = Элементы.Добавить("ДекорацияНаполнитель_"+Индекс, Тип("ДекорацияФормы"), ГруппаСтрока);
			ДекорацияНаполнитель.РастягиватьПоГоризонтали = Истина;
			ДекорацияНаполнитель.РастягиватьПоВертикали = Ложь;
			ДекорацияНаполнитель.Высота = 1;
			ТекущаяДлинаСтрокиОтметок = 0;
		Иначе
			ГруппаСтрока = Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы[Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество() - 1];
		КонецЕсли;
		
		ЭлементыЗаголовка = Новый Массив;
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ЗаголовокЭлемента));
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, Стр.ИмяКнопки));
		
		ЭлементОтметка = Элементы.Вставить(Стр.ИмяКнопки, Тип("ДекорацияФормы"), ГруппаСтрока, ГруппаСтрока.ПодчиненныеЭлементы[ГруппаСтрока.ПодчиненныеЭлементы.Количество()-1]);
		ЭлементОтметка.Вид = ВидДекорацииФормы.Надпись;
		ЭлементОтметка.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		Если НЕ Стр.Заголовок=ЗаголовокЭлемента Тогда
			ЭлементОтметка.Подсказка = Стр.Заголовок;
		КонецЕсли; 
		ЭлементОтметка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		Если Стр.ПризнакИсключения Тогда
			ЭлементОтметка.ЦветРамки = WebЦвета.Красный;
		КонецЕсли; 
		ЭлементОтметка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтметка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ЭлементОтметка.Ширина = ДлинаЭлемента;
		ЭлементОтметка.Высота = 1;
		ЭлементОтметка.РастягиватьПоГоризонтали = Ложь;
		ЭлементОтметка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалитьФильтрНажатие");
		
		ТекущаяДлинаСтрокиОтметок = ТекущаяДлинаСтрокиОтметок+ДлинаЭлемента;
		
	КонецЦикла;
	
	Если Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество()>50 Тогда
		Элементы.ОтчетТабличныйДокумент.РастягиватьПоВертикали = Ложь;
	ИначеЕсли НЕ Элементы.ОтчетТабличныйДокумент.РастягиватьПоВертикали Тогда
		Элементы.ОтчетТабличныйДокумент.РастягиватьПоВертикали = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоляГруппировокРекурсивно(МассивПолей, ЭлементыСтруктуры, БезКолонок = Ложь)
	
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ПоляГруппировокРекурсивно(МассивПолей, Элемент.Строки, БезКолонок);
			Если НЕ БезКолонок Тогда
				ПоляГруппировокРекурсивно(МассивПолей, Элемент.Колонки, БезКолонок);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				МассивПолей.Добавить(Строка(Поле.Поле));
			КонецЦикла; 
			ПоляГруппировокРекурсивно(МассивПолей, Элемент.Структура, БезКолонок);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСхемуСКД()
	
	Возврат	РеквизитФормыВЗначение("Объект").ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхТаблица");
	
КонецФункции

&НаСервере
Процедура ВыполнитьНестандартнуюОбработку(ИдентификаторСтроки, ИмяЭлемента, Значение = Неопределено)
	
	Если НЕ НастройкиОтчета.ПрограммноеИзменениеФормыОтчета Тогда
		Возврат;
	КонецЕсли;
	Стр = ПоляНастроек.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураЗначений = Новый Структура;
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		Если ЗначениеЗаполнено(Значение) Тогда
			СтруктураЗначений.Вставить(Реквизит.Ключ, Значение);
		Иначе
			СтруктураЗначений.Вставить(Реквизит.Ключ, ЭтотОбъект[Реквизит.Ключ]);
		КонецЕсли; 
	КонецЦикла; 
	ОтчетОбъект.ПриИзмененииНестандартногоРеквизита(Стр.Тип, Стр.Поле, СтруктураЗначений, КомпоновщикНастроекТаблица.Настройки, ЭтотОбъект, ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура НаложитьОтборПоДобавленномуПолю(Поле, Значение, УправляющиеСимволы = "")
	
	// Тег
	Если Поле="ДобавленноеПоле_Тег" Тогда
		ПолеКонтрагент = ДоступноеПолеКонтрагент(КомпоновщикНастроекТаблица.Настройки);
		Если ПолеКонтрагент=Неопределено Тогда
			Возврат;
		КонецЕсли;
		НовыйВидСравнения = ?(УправляющиеСимволы="-", ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		Суффикс = ?(УправляющиеСимволы="-", "Не", "");
		НайденныйЭлемент = Неопределено;
		Для каждого ЭлементОтбора Из КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.ПредставлениеПользовательскойНастройки=Поле+Суффикс Тогда
				НайденныйЭлемент = ЭлементОтбора;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НайденныйЭлемент=Неопределено Тогда
			НайденныйЭлемент = КомпоновщикНастроекТаблица.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НайденныйЭлемент.Использование = Истина;
			НайденныйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Строка(ПолеКонтрагент.Поле)+".Теги.Тег");
			НайденныйЭлемент.ВидСравнения = НовыйВидСравнения;
			НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
			НайденныйЭлемент.ПредставлениеПользовательскойНастройки = Поле+Суффикс;
		КонецЕсли;
		Если ТипЗнч(НайденныйЭлемент.ПравоеЗначение)<>Тип("СписокЗначений") Тогда
			НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
		КонецЕсли;
		Если ТипЗнч(Значение)=Тип("Массив") Тогда
			Для каждого ЭлементЗначения Из Значение Цикл
				Если НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(ЭлементЗначения)<>Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				НайденныйЭлемент.ПравоеЗначение.Добавить(ЭлементЗначения);
			КонецЦикла; 
		ИначеЕсли ЗначениеЗаполнено(Значение) И НайденныйЭлемент.ПравоеЗначение.НайтиПоЗначению(Значение)=Неопределено Тогда
			НайденныйЭлемент.ПравоеЗначение.Добавить(Значение);
		КонецЕсли; 
		НайденныйЭлемент.Использование = НайденныйЭлемент.ПравоеЗначение.Количество()>0;
		ОбновитьОтображениеОтметокФильтров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноеПолеКонтрагент(Настройки)
	
	Поле = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент"));
	Если Поле=Неопределено Тогда
		Поле = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Покупатель"));
	КонецЕсли;
	Если Поле=Неопределено Тогда
		Поле = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Поставщик"));
	КонецЕсли;
	Возврат Поле;
	
КонецФункции

&НаСервере
Функция ДобавитьОписаниеНастройки(ЭлементыДобавления, Тип, ИмяПоля, Представление = "", ЭлементСхемы = Неопределено)
	
	СуществующаяСтрока = СтрокаОписанияПоля(Тип, ИмяПоля, ПоляНастроек);
	Если НЕ СуществующаяСтрока=Неопределено Тогда
		Если СуществующаяСтрока.Создан Тогда
			Возврат Неопределено;
		КонецЕсли;
		СуществующаяСтрока.Скрыт = Ложь;
		Возврат СуществующаяСтрока;
	КонецЕсли;
	Если Тип=ТипФильтр() Тогда
		ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	ИначеЕсли Тип=ТипПараметр() Тогда
		ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(ИмяПоля));
	ИначеЕсли Тип=ТипГруппировка() Тогда
		ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Иначе
		ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	КонецЕсли; 
	Стр = ЭлементыДобавления.Добавить();
	Стр.Тип = Тип;
	Стр.Поле = ИмяПоля;
	Если Тип=ТипПараметр() ИЛИ Тип=ТипФильтр() Тогда
		Если ДоступноеПоле=Неопределено Тогда
			ЭлементыДобавления.Удалить(Стр);
			Возврат Неопределено;
		КонецЕсли; 
		Стр.ТипЗначения = ДоступноеПоле.ТипЗначения;
	Иначе
		Стр.ТипЗначения = Новый ОписаниеТипов("Булево");
	КонецЕсли; 
	Если ПустаяСтрока(Представление) Тогда
		Если ДоступноеПоле=Неопределено Тогда
			ЭлементыДобавления.Удалить(Стр);
			Возврат Неопределено;
		КонецЕсли; 
		Стр.Заголовок = ДоступноеПоле.Заголовок;
	Иначе
		Стр.Заголовок = Представление;
	КонецЕсли;
	Стр.ДополнительныеПараметры = Новый Структура;
	Стр.Реквизиты = Новый Структура;
	Стр.Элементы = Новый Структура;
	Если Тип=ТипФильтр() Тогда
		Если ДоступноеПоле=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли; 
		ОпределитьЭлементыИРеквизитыФильтра(Стр, ЭлементСхемы, ДоступноеПоле, Ложь);
	ИначеЕсли Тип=ТипПараметр() Тогда
		Если ДоступноеПоле=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли; 
		Стр.ДополнительныеПараметры.Вставить("АвтоОтметкаНезаполненного", ДоступноеПоле.ЗапрещатьНезаполненныеЗначения);
		ОпределитьЭлементыИРеквизитыПараметра(Стр, ЭлементСхемы, ДоступноеПоле);
	Иначе
		Стр.ВидЭлемента = "Флажок";
	КонецЕсли;
	Возврат Стр;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылку(Отчет, КлючВарианта)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВариантыОтчетов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления");
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервере
Функция ИдентификаторыСтрок(Дерево, СтруктураОтбора, ВключаяВложенные = Ложь)
	
	Результат = Новый Массив;
	Для каждого Стр Из Дерево.ПолучитьЭлементы() Цикл
		Совпадает = Истина;
		Для каждого Отбор Из СтруктураОтбора Цикл
			Если ТипЗнч(Отбор.Значение)=Тип("Массив") Тогда
				ЕстьСовпадение = Ложь;
				Для каждого Значение Из Отбор.Значение Цикл
					Если Стр[Отбор.Ключ]=Значение  Тогда
						ЕстьСовпадение = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если НЕ ЕстьСовпадение Тогда
					Совпадает = Ложь;
					Прервать;
				КонецЕсли; 
			Иначе
				Если НЕ Стр[Отбор.Ключ]=Отбор.Значение  Тогда
					Совпадает = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		Если Совпадает Тогда
			Результат.Добавить(Стр.ПолучитьИдентификатор());
		КонецЕсли;
		Если ВключаяВложенные Тогда
			ВложенныеЭлементы = ИдентификаторыСтрок(Стр, СтруктураОтбора, Истина);
			Для каждого ПодСтр Из ВложенныеЭлементы Цикл
				Результат.Добавить(ПодСтр);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиДерева(Дерево, СтруктураОтбора, ВключаяВложенные = Ложь)
	
	Результат = Новый Массив;
	Для каждого Стр Из Дерево.ПолучитьЭлементы() Цикл
		Совпадает = Истина;
		Для каждого Отбор Из СтруктураОтбора Цикл
			Если ТипЗнч(Отбор.Значение)=Тип("Массив") Тогда
				ЕстьСовпадение = Ложь;
				Для каждого Значение Из Отбор.Значение Цикл
					Если Стр[Отбор.Ключ]=Значение  Тогда
						ЕстьСовпадение = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если НЕ ЕстьСовпадение Тогда
					Совпадает = Ложь;
					Прервать;
				КонецЕсли; 
			Иначе
				Если НЕ Стр[Отбор.Ключ]=Отбор.Значение  Тогда
					Совпадает = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		Если Совпадает Тогда
			Результат.Добавить(Стр);
		КонецЕсли;
		Если ВключаяВложенные Тогда
			ВложенныеЭлементы = СтрокиДерева(Стр, СтруктураОтбора, Истина);
			Для каждого ПодСтр Из ВложенныеЭлементы Цикл
				Результат.Добавить(ПодСтр);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция СтрокаНаложенногоФильтра(ИмяКнопки)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКнопки", ИмяКнопки);
	Строки = НаложенныеФильтры.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, ПоляНастроек)
	
	Для каждого Стр Из ПоляНастроек.ПолучитьЭлементы() Цикл
		Для каждого Элемент Из Стр.Элементы Цикл
			Если Элемент.Ключ=ИмяЭлемента Тогда
				Возврат Стр;
			КонецЕсли; 
		КонецЦикла; 
		ПодСтр = СтрокаОписанияПоИмениЭлемента(ИмяЭлемента, Стр);
		Если НЕ ПодСтр=Неопределено Тогда
			Возврат ПодСтр;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОписанияПоля(Тип, Поле, ПоляНастроек)
	
	Для каждого Стр Из ПоляНастроек.ПолучитьЭлементы() Цикл
		Если Стр.Тип=Тип И Стр.Поле=Поле Тогда
			Возврат Стр;
		КонецЕсли; 
		ПодСтр = СтрокаОписанияПоля(Тип, Поле, Стр);
		Если НЕ ПодСтр=Неопределено Тогда
			Возврат ПодСтр;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьПараметрыВыбора(ДоступноеПоле)
	
	Если ДоступноеПоле=Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДоступноеПоле.ПолучитьПараметрыВыбора();
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьСвязиПараметровВыбора(ДоступноеПоле)
	
	Если ДоступноеПоле=Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДоступноеПоле.ПолучитьСвязиПараметровВыбора();
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВБулевоТриСостояния(Значение)
	
	Если Значение=Истина Тогда 
		Возврат ПредопределенноеЗначение("Перечисление.CRM_БулевоТриСостояния.Истина");
	ИначеЕсли Значение=Ложь Тогда 
		Возврат ПредопределенноеЗначение("Перечисление.CRM_БулевоТриСостояния.Ложь");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.CRM_БулевоТриСостояния.НеИзменять");
	КонецЕсли;
	
КонецФункции 


&НаСервереБезКонтекста
Функция ОпределитьФормуВыбора(Значение, ВыборГруппИЭлементов)
	
	Тип = ТипЗнч(Значение);
	Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
		Возврат "";
	КонецЕсли; 
	ПолноеИмяТипа = ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(Тип));
	Если ВыборГруппИЭлементов=ГруппыИЭлементы.Группы Тогда
		Возврат ПолноеИмяТипа+".ФормаВыбораГруппы";
	Иначе
		Возврат ПолноеИмяТипа+".ФормаВыбора";
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовоеИмяОтметкиФильтра()
	
	Возврат НовоеИмяРеквизита("ОтметкаФильтра");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовоеИмяРеквизита(Тип)
	
	Возврат Тип+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	
	
КонецФункции 

&НаСервере
Функция КоличествоПоказателейСКД(ВыборЭлементы = Неопределено)
	
	Если ВыборЭлементы=Неопределено Тогда
		ВыборЭлементы = КомпоновщикНастроекТаблица.Настройки.Выбор.Элементы;
	КонецЕсли; 
	КоличествоПоказателей = 0;
	Для каждого Элемент Из ВыборЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			КоличествоВложенных = КоличествоПоказателейСКД(Элемент.Элементы);
			КоличествоПоказателей = КоличествоПоказателей+КоличествоВложенных;
		ИначеЕсли ТипЗнч(Элемент)=Тип("ВыбранноеПолеКомпоновкиДанных") И Элемент.Использование Тогда
			КоличествоПоказателей = КоличествоПоказателей+1;
		КонецЕсли; 
	КонецЦикла;   
	Возврат КоличествоПоказателей;
	
КонецФункции

&НаСервере
Функция ЕстьСоставныеГруппировкиКолонок(Структура)
	
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			Результат = ЕстьСоставныеГруппировкиКолонок(Элемент.Колонки);
			Если Результат Тогда
				Возврат Истина;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			КоличествоПолей = 0;
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Поле.Использование Тогда
					КоличествоПолей = КоличествоПолей+1;
				КонецЕсли; 
			КонецЦикла; 
			Если КоличествоПолей>1 Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПервыйКлючСтруктуры(Структура)
	
	Для каждого Элемент Из Структура Цикл
		Возврат Элемент.Ключ;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораИзСпискаРекламнойКампании(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиРекламныхКампаний(ЗаголовокДанных = Неопределено)

	Если ЗаголовокДанных = Неопределено Тогда
		РекламнаяКампания = ?(СписокРекламныхКампаний.Количество() <> 0, СписокРекламныхКампаний[0].Значение, Неопределено);
		Элементы.ВыборРекламнойКампании.Заголовок = СокрЛП(РекламнаяКампания);
		ПредставлениеКампании = СокрЛП(РекламнаяКампания);

	Иначе
		РекламнаяКампания = ЗаголовокДанных;
		Если ЗначениеЗаполнено(РекламнаяКампания) Тогда
			Элементы.ВыборРекламнойКампании.Заголовок = СокрЛП(РекламнаяКампания);
			ПредставлениеКампании = СокрЛП(РекламнаяКампания);

		Иначе
			Элементы.ВыборРекламнойКампании.Заголовок = "<Пустое значение>";
			ПредставлениеКампании = "<Пустое значение>";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокФормы()
	
	Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) И НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		ПредставлениеПериода = НСтр("en='for all time';ru='за все время'");
		
	Иначе
		ПредставлениеПериода = НРег(ПредставлениеПериода(НачалоДня(Период.ДатаНачала), ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания)));
	КонецЕсли;
	
	ПредставлениеПериода = ВРЕГ(Лев(ПредставлениеПериода, 1)) + Сред(ПредставлениеПериода, 2);
	
	Заголовок = "Сквозная аналитика / " + ПредставлениеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКампанииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОписаниеОповещенияВыбора = Новый ОписаниеОповещения("ПослеВыбораРекламнойКампании", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещенияВыбора, СписокВыбораМаркетинг, Элементы.ПредставлениеКампании);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРекламнойКампании(Команда)
	
	ОписаниеОповещенияВыбора = Новый ОписаниеОповещения("ПослеВыбораРекламнойКампании", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещенияВыбора, СписокВыбораМаркетинг, Элементы.ВыборРекламнойКампании);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРекламнойКампании(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ВыбранныйЭлемент.Значение = "По списку" ИЛИ ВыбранныйЭлемент.Значение = "Выбрать кампанию"  Тогда
		ВыбратьТолькоОдну = ВыбранныйЭлемент.Значение = "Выбрать кампанию";
        		
		МассивДанных = СписокРекламныхКампаний.ВыгрузитьЗначения();
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ВыбратьТолькоОдну", ВыбратьТолькоОдну);
		ПараметрыОткрытия.Вставить("ВключатьДанныеБезКампаний", ВключатьДанныеБезКампаний);
		ПараметрыОткрытия.Вставить("МассивДанных", МассивДанных);
		
		ОткрытьФорму("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаВыбораРекламныхКампаний", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		РекламныеКампании.Очистить();
		
		УстановитьЗаголовкиРекламныхКампаний(ВыбранныйЭлемент.Значение);
		        		
		СформироватьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьданныеПоРекламнымКампаниям()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркетинговыеМероприятия.Ссылка КАК Кампания
	|ИЗ
	|	Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	НЕ МаркетинговыеМероприятия.ПометкаУдаления";
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Кампания");
	
	СписокРекламныхКампаний.ЗагрузитьЗначения(РезультатЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеПослеОтметкиЭлементов = Новый ОписаниеОповещения(
	"ПослеОтметкиЭлементов", ЭтотОбъект
	);	
	
	ДиаграммаЗначения.ДоступныеЗначения.ПоказатьОтметкуЭлементов(ОповещениеПослеОтметкиЭлементов,"Выберите показатели");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтметкиЭлементов(Элементы, Параметры) Экспорт
	
	ДиаграммаЗначения.Очистить();
	
	Если Элементы <> Неопределено Тогда
		Для Каждого Эл Из Элементы Цикл
			Если Эл.Пометка Тогда
				
				НоваяСтр = ДиаграммаЗначения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр,Эл);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМетрики(Команда)
	
	Элементы.ПоказатьМетрики.Пометка = НЕ Элементы.ПоказатьМетрики.Пометка;
	ПоказатьМетрики = Элементы.ПоказатьМетрики.Пометка;

	Элементы.ПоказатьМетрики.Заголовок = ?(ПоказатьМетрики, "+ Показать метрики", "- Скрыть метрики");
	
	ОбновитьТаблицуМетрик(ПоказатьМетрики);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуМетрик(Пометка = Неопределено)
	
	Если Пометка = Неопределено ИЛИ Пометка = Ложь Тогда
		  Элементы.ТаблицаПоказателей.ОтборСтрок = Неопределено;
	Иначе Элементы.ТаблицаПоказателей.ОтборСтрок = Новый ФиксированнаяСтруктура("Выбрано", Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейВыбраноПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТаблицаПоказателей.ТекущиеДанные;
	Если НЕ ТекСтрока.Выбрано Тогда
		ТекСтрока.ЦветЗначение = -1;
	КонецЕсли;
	
	СортироватьДанныеВтаблице();
	
	ОБновитьЦветаВТаблице();
КонецПроцедуры

&НаСервере
Процедура ОБновитьЦветаВТаблице()
	
	МассивЗначений = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Выбрано",Истина));
	Если МассивЗначений.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		Для Каждого Стр Из МассивЗначений Цикл
			
			ИндексСтроки = ТаблицаПоказателей.Индекс(Стр);
			
			Стр.ЦветЗначение = ИндексСтроки;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьДАнныеВтаблице()
	
	ТаблицаПоказателей.Сортировать("Выбрано УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ЗначениеТекущее = Элемент.ТекущиеДанные.Значение;
		
		МассивЗначений = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Значение",ЗначениеТекущее));
		Если МассивЗначений.Количество() = 0 Тогда
			Возврат;
		Иначе
			
			СтрокаДанных = МассивЗначений[0];
			ИндексСтроки = ТаблицаПоказателей.Индекс(СтрокаДанных);
			
			СтрокаДанных.ЦветЗначение = ИндексСтроки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаПоказателей.НайтиСтроки(Новый Структура("Выбрано",Истина)).Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Должен быть выбран хотя бы один показатель");
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	СформироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИсточников(Команда)
	
	ОткрытьФорму("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаНастрокиСквознойАналитики",,ЭтотОБъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИсточника(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		
	Иначе
		
		ОткрытьФорму("Справочник."+ВыбранныйЭлемент.Значение + ".Форма.ФормаСписка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонокОтчетаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ОбновитьПоказателиКолонкиНаСервере();
	
	СформироватьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонокОтчетаПриИзменении(Элемент)
	ОбновитьПоказателиКолонкиНаСервере();
	
	СформироватьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура Зафиксировать(Команда)
	
	Если Элементы.Зафиксировать.Пометка Тогда
		Элементы.ОтчетТабличныйДокумент.Видимость = Ложь;
		Элементы.Зафиксировать.Пометка = Ложь;
		Элементы.ГруппаОтчетыВидимость.Высота = 0;
	иначе
		Элементы.ОтчетТабличныйДокумент.Видимость = Истина;
		Элементы.Зафиксировать.Пометка = Истина;
		Элементы.ГруппаОтчетыВидимость.Высота = 20;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументТаблицаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	СписокПараметров = Новый Массив;
	ПоляРасшифровки = Новый Массив;
	
	ПараметрыФормыРасшифровки = ПолучитьДанныеРасшифровки(Расшифровка);
	
	СписокЗначений = Новый СписокЗначений;
	
	// Расшифровка
	СписокЗначений.Добавить("Расшифровать по продажам");
	СписокЗначений.Добавить("Расшифровать по заявкам");
	СписокЗначений.Добавить("Расшифровать по аналитическим показателям");
	СписокЗначений.Добавить("Расшифровать по аналитическим показателям (по дням)");
	СписокЗначений.Добавить("Расшифровать по затратам (по дням)");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ОбработкаРасшифровкиСДополнительнымМенюЗавершение", ЭтотОбъект,ПараметрыФормыРасшифровки);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения,СписокЗначений,Элементы.ОтчетТабличныйДокументТаблица);
	
КонецПроцедуры

Функция ПолучитьМакетСКД()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	МакетТабл = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхТаблица");
	
	Возврат МакетТабл;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРасшифровкиСДополнительнымМенюЗавершение(ВыполненноеДействие, ДополнительныеПараметры) Экспорт 
	
	// Если ВыполненноеДействие = Неопределено Тогда
	//	Возврат;
	// КонецЕсли;
	//
	// Если ВыполненноеДействие.Значение = "Расшифровать по заявкам" Тогда
	//	
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("ОтборРасшифровки",ДополнительныеПараметры.Отбор);
	//	ПараметрыФормы.Вставить("КлючВарианта","Основной");
	//	ПараметрыФормы.Вставить("ПараметрыДанных",КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных);
	//	ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
	//	
	//	ОткрытьФорму("Отчет.CRM_ЗаявкиПоРекламнымКампаниям.Форма.CRM_ФормаОтчетаНовая",ПараметрыФормы,ЭтотОбъект);
	//	
	// ИначеЕсли ВыполненноеДействие.Значение = "Расшифровать по продажам" Тогда
	//	
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("ОтборРасшифровки",ДополнительныеПараметры.Отбор);
	//	ПараметрыФормы.Вставить("КлючВарианта","ПродажиСчета");
	//	ПараметрыФормы.Вставить("ПараметрыДанных",КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных);
	//	ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
	//	
	//	ОткрытьФорму("Отчет.CRM_ЗаявкиПоРекламнымКампаниям.Форма.CRM_ФормаОтчетаНовая",ПараметрыФормы,ЭтотОбъект);
	//	
	// ИначеЕсли ВыполненноеДействие.Значение = "Расшифровать по аналитическим показателям" Тогда
	//	
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("ОтборРасшифровки",ДополнительныеПараметры.Отбор);
	//	ПараметрыФормы.Вставить("ПараметрыДанных",КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных);
	//	ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
	//	
	//	ОткрытьФорму("Отчет.CRM_СводныйОтчетПоКаналамПривлечения.Форма.CRM_ФормаОтчетаНовая",ПараметрыФормы,ЭтотОбъект);
	//	
	// ИначеЕсли ВыполненноеДействие.Значение = "Расшифровать по аналитическим показателям (по дням)" Тогда
	//	
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("ОтборРасшифровки",ДополнительныеПараметры.Отбор);
	//	ПараметрыФормы.Вставить("КлючВарианта","АналитикаПоДням");
	//	ПараметрыФормы.Вставить("ПараметрыДанных",КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных);
	//	ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
	//	
	//	ОткрытьФорму("Отчет.CRM_СводныйОтчетПоКаналамПривлечения.Форма.CRM_ФормаОтчетаНовая",ПараметрыФормы,ЭтотОбъект);
	//	
	// ИначеЕсли ВыполненноеДействие.Значение = "Расшифровать по затратам (по дням)" Тогда
	//	
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("ОтборРасшифровки",ДополнительныеПараметры.Отбор);
	//	ПараметрыФормы.Вставить("ПараметрыДанных",КомпоновщикНастроекТаблица.Настройки.ПараметрыДанных);
	//	ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
	//	
	//	ОткрытьФорму("Отчет.CRM_ЗатратыСквознаяАналитика.Форма.CRM_ФормаОтчетаНовая",ПараметрыФормы,ЭтотОбъект);
	//	
	// КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРасшифровки(Расшифровка)
	
	Данные = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	ЭлементРасшифровки = Данные.Элементы.Получить(Расшифровка);
	СтруктураВозврата = Новый Структура("Тип", ?(ТипЗнч(ЭлементРасшифровки)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка"), ТипГруппировка(), ТипРеквизит()));
	СтруктураВозврата.Вставить("Настройки", Данные.Настройки);
	СтруктураВозврата.Вставить("Отбор", ПолучитьОтборРекурсивно(ЭлементРасшифровки));
	Поля = ЭлементРасшифровки.ПолучитьПоля();
	Если Поля.Количество()=0 Тогда
		СтруктураВозврата.Вставить("Значение", Неопределено);
		СтруктураВозврата.Вставить("Поле", "");
	Иначе 
		СтруктураВозврата.Вставить("Значение", ?(Поля[0].Значение=Null, Неопределено, Поля[0].Значение));
		СтруктураВозврата.Вставить("Поле", Поля[0].Поле);
	КонецЕсли;
	СтруктураВозврата.Вставить("ЭтоСсылка", ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СтруктураВозврата.Значение)));
	Если ЗначениеЗаполнено(СтруктураВозврата.Поле) Тогда
		ДоступноеПоле = КомпоновщикНастроекТаблица.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтруктураВозврата.Поле));
		Если ДоступноеПоле=Неопределено Тогда
			СтруктураВозврата.Вставить("ТипЗначения", Тип("Неопределено"));
			СтруктураВозврата.Вставить("Ресурс", Ложь);
		Иначе
			СтруктураВозврата.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
			СтруктураВозврата.Вставить("Ресурс", ДоступноеПоле.Ресурс);
		КонецЕсли; 
	Иначе
		СтруктураВозврата.Вставить("ТипЗначения", Тип("Неопределено"));
		СтруктураВозврата.Вставить("Ресурс", Ложь);
	КонецЕсли; 
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОтборРекурсивно(ЭлементРасшифровки, Результат = Неопределено)
	
	Если Результат=Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли; 
	Если ТипЗнч(ЭлементРасшифровки)=Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Поля = ЭлементРасшифровки.ПолучитьПоля();
		Для каждого Поле Из Поля Цикл
			Если Поле.Значение=Null Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(Поле.Поле, Поле.Значение);
		КонецЦикла; 
	КонецЕсли;
	Родители = ЭлементРасшифровки.ПолучитьРодителей();
	Для каждого Родитель Из Родители Цикл
		ПолучитьОтборРекурсивно(Родитель, Результат);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыДополнительногоМенюРасшифровки(АдресДанныхРасшифровки, ПараметрыРасшифровки, Расшифровка)
	
	Если ПараметрыРасшифровки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим все поля расшифровки и параметры
	ПараметрыФормыРасшифровки = ПараметрыФормыРасшифровки(АдресДанныхРасшифровки, ПараметрыРасшифровки, Расшифровка);
	
	// Формирование меню
	ДополнительноеМеню = Новый СписокЗначений;
	
	ПараметрыОтчетов = Новый Соответствие;
	ПараметрыДействий = Новый Соответствие;
	
	// Меню - Расшифровать отчетом
	МенюОтчетов = Новый СписокЗначений;
	Если ПараметрыРасшифровки.Свойство("МенюОтчетов") И ПараметрыРасшифровки.МенюОтчетов.Количество() <> 0 Тогда
		Для каждого ПараметрыОтчета Из ПараметрыРасшифровки.МенюОтчетов Цикл
			Если ЕстьНеобходимыеПараметрыИЗначения(ПараметрыОтчета, ПараметрыФормыРасшифровки)
				И ЕстьДостаточныеПараметрыИЗначения(ПараметрыОтчета, ПараметрыФормыРасшифровки) Тогда
				МенюОтчетов.Добавить(ПараметрыОтчета.Имя, ПараметрыОтчета.Заголовок);
				ПараметрыОтчетов.Вставить(ПараметрыОтчета.Имя, ПараметрыОтчета);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	ДополнительноеМеню.Добавить(МенюОтчетов, НСтр("en='To decipher another report';ru='Расшифровать другим отчетом'"));
	
	// Меню - Перейти
	МенюДействий = Новый СписокЗначений;
	Если ПараметрыРасшифровки.Свойство("МенюДействий") И ПараметрыРасшифровки.МенюДействий.Количество() <> 0 Тогда
		Для каждого ПараметрыДействия Из ПараметрыРасшифровки.МенюДействий Цикл
			Если ЕстьНеобходимыеПараметрыИЗначения(ПараметрыДействия, ПараметрыФормыРасшифровки) Тогда
				МенюДействий.Добавить(ПараметрыДействия.Имя, ПараметрыДействия.Заголовок);
				ПараметрыДействий.Вставить(ПараметрыДействия.Имя, ПараметрыДействия);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	МенюДействий.Добавить("123");
	
	
	
	ДополнительноеМеню.Добавить(МенюДействий, НСтр("en='Pass';ru='Перейти'"));
	
	ПараметрыДополнительногоМеню = Новый Структура;
	ПараметрыДополнительногоМеню.Вставить("ДополнительноеМеню", ДополнительноеМеню);
	ПараметрыДополнительногоМеню.Вставить("ПараметрыОтчетов", ПараметрыОтчетов);
	ПараметрыДополнительногоМеню.Вставить("ПараметрыДействий", ПараметрыДействий);
	ПараметрыДополнительногоМеню.Вставить("МенюОтчетов", МенюОтчетов);
	ПараметрыДополнительногоМеню.Вставить("МенюДействий", МенюДействий);
	ПараметрыДополнительногоМеню.Вставить("ПараметрыФормыРасшифровки", ПараметрыФормыРасшифровки);
	
	Возврат ПараметрыДополнительногоМеню;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыРасшифровки(АдресДанныхРасшифровки, ПараметрыРасшифровки, Расшифровка)
	
	СписокПараметров = Новый Массив;
	ПоляРасшифровки = Новый Массив;
	
	СписокИсточников = Новый Массив;
	СписокИсточников.Добавить("МенюОтчетов");
	СписокИсточников.Добавить("МенюДействий");
	
	Для каждого ИмяИсточника Из СписокИсточников Цикл
		Если ПараметрыРасшифровки.Свойство(ИмяИсточника) И ПараметрыРасшифровки[ИмяИсточника].Количество() <> 0 Тогда
			Для каждого ПараметрыИсточника Из ПараметрыРасшифровки[ИмяИсточника] Цикл
				Если ПараметрыИсточника.Свойство("ПоляРасшифровки") Тогда
					Для каждого ИмяПоля Из ПараметрыИсточника.ПоляРасшифровки Цикл
						Если ПоляРасшифровки.Найти(ИмяПоля) = Неопределено Тогда
							ПоляРасшифровки.Добавить(ИмяПоля);
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				Если ПараметрыИсточника.Свойство("СписокПараметров") Тогда
					Для каждого ИмяПараметра Из ПараметрыИсточника.СписокПараметров Цикл
						Если СписокПараметров.Найти(ИмяПараметра) = Неопределено Тогда
							СписокПараметров.Добавить(ИмяПараметра);
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
	Если СписокПараметров.Количество() <> 0 ИЛИ ПоляРасшифровки.Количество() <> 0 Тогда
		ПараметрыФормыРасшифровки = КомпоновкаДанныхВызовСервераПараметрыФормыРасшифровки(
		Расшифровка, 
		АдресДанныхРасшифровки, 
		СписокПараметров, 
		ПоляРасшифровки);
	Иначе
		ПараметрыФормыРасшифровки = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыФормыРасшифровки;
	
КонецФункции

&НаСервере
Функция ЕстьНеобходимыеПараметрыИЗначения(ПараметрыМеню, ПараметрыФормыРасшифровки)
	
	Если НЕ ПараметрыМеню.Свойство("НеобходимыеПараметры") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыФормыРасшифровки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	НеобходимыеПараметры = ПараметрыМеню.НеобходимыеПараметры;
	Для каждого КлючИЗначение Из НеобходимыеПараметры Цикл
		Если НЕ ПараметрыФормыРасшифровки.Свойство(КлючИЗначение.Ключ) Тогда
			Возврат Ложь;
		Иначе
			Если КлючИЗначение.Значение <> Неопределено
				И КлючИЗначение.Значение.Найти(ПараметрыФормыРасшифровки[КлючИЗначение.Ключ]) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЕстьДостаточныеПараметрыИЗначения(ПараметрыМеню, ПараметрыФормыРасшифровки)
	Если НЕ ПараметрыМеню.Свойство("ДостаточныеПараметры") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыФормыРасшифровки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ДостаточныеПараметры = ПараметрыМеню.ДостаточныеПараметры;
	ЕстьДостаточныеПараметрыИЗначения = Истина;
	Для каждого КлючИЗначение Из ДостаточныеПараметры Цикл
		Если НЕ ПараметрыФормыРасшифровки.Свойство(КлючИЗначение.Ключ) Тогда
			ЕстьДостаточныеПараметрыИЗначения = Ложь;
		ИначеЕсли ПараметрыФормыРасшифровки.Свойство(КлючИЗначение.Ключ) Тогда
			ЕстьДостаточныеПараметрыИЗначения = Истина;
			Прервать;
		Иначе
			Если КлючИЗначение.Значение <> Неопределено
				И КлючИЗначение.Значение.Найти(ПараметрыФормыРасшифровки[КлючИЗначение.Ключ]) = Неопределено Тогда
				ЕстьДостаточныеПараметрыИЗначения = Ложь;
			Иначе
				ЕстьДостаточныеПараметрыИЗначения = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ЕстьДостаточныеПараметрыИЗначения;
	
КонецФункции

// Возвращает структуру параметров и отборов расшифровки
// Параметры:
//   Расшифровка            - ИдентификаторРасшифровкиКомпоновкиДанных - значение, полученное из отчета при расшифровке.
//   АдресДанныхРасшифровки - Строка - адрес, указывающий на значение во временном хранилище.
//   СписокПараметров       - Массив - содержит имена параметров и полей, используемых при расшифровке
//   ПоляРасшифровки        - Строка - содержит имена полей, используемых при расшифровке.
//
// Возвращаемое значение:
//   Структура - в качестве ключа возвращается имя параметра или отбора для отчета-приемника,
//               а в качестве значения - значение параметра или отбора.
//
&НаСервере
Функция КомпоновкаДанныхВызовСервераПараметрыФормыРасшифровки(Расшифровка, АдресДанныхРасшифровки, СписокПараметров, ПоляРасшифровки) Экспорт
	
	ПараметрыФормыРасшифровки = Новый Структура;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	ПроверкаПолейРасшифровки = Новый ТаблицаЗначений;
	ПроверкаПолейРасшифровки.Колонки.Добавить("Значение");
	ПроверкаПолейРасшифровки.Колонки.Добавить("ИмяПоля");
	
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ПроверкаПолейРасшифровки);
	
	Для каждого ДанныеПоля Из ПроверкаПолейРасшифровки Цикл
		ИмяПоля = СтрЗаменить(ДанныеПоля.ИмяПоля, ".", "_");
		Если ПоляРасшифровки.Найти(ИмяПоля) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыФормыРасшифровки.Свойство(ИмяПоля) Тогда
			ПараметрыФормыРасшифровки.Вставить(ИмяПоля + "_Родитель", ДанныеПоля.Значение);
		Иначе
			ПараметрыФормыРасшифровки.Вставить(ИмяПоля, ДанныеПоля.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из СписокПараметров Цикл
		ЗначениеПараметра = ДанныеРасшифровки.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
		Если ЗначениеПараметра = Неопределено ИЛИ НЕ ЗначениеПараметра.Использование Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыФормыРасшифровки.Вставить(ИмяПараметра, ЗначениеПараметра.Значение);
	КонецЦикла; 
	
	ПараметрыФормыРасшифровки.Вставить("Отбор", ДанныеРасшифровки.Настройки.Отбор);
	ПараметрыФормыРасшифровки.Вставить("ПараметрыДанных",ДанныеРасшифровки.Настройки.ПараметрыДанных);
	
	Если ПараметрыФормыРасшифровки.Количество() <> 0 Тогда
		Возврат ПараметрыФормыРасшифровки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДобавитьРодителей(ЭлементРасшифровки, ПроверкаПолейРасшифровки)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Отбор = Новый Структура("Значение, ИмяПоля", Поле.Значение, Поле.Поле); 
			НайденныеСтроки = ПроверкаПолейРасшифровки.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовоеПоле = ПроверкаПолейРасшифровки.Добавить();
				НовоеПоле.Значение = Поле.Значение;
				НовоеПоле.ИмяПоля = Поле.Поле;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ПроверкаПолейРасшифровки);
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура СкрытьНастройкиОтчета(Команда)
	
	Элементы.СтраницыНастройки.Видимость = НЕ Элементы.СтраницыНастройки.Видимость;
	Элементы.СкрытьНастройкиОтчета.Заголовок = ?(Элементы.СтраницыНастройки.Видимость, НСтр("en='Hide Settings';ru='Скрыть настройки'"), НСтр("en='Show settings';ru='Показать настройки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныеНастройки(Команда)
	
	ПараметрыФ = Новый Структура;
	ПараметрыФ.Вставить("СКД",КомпоновщикНастроекТаблица);
	
	ОткрытьФорму("Обработка.CRM_АРМ_РабочееМестоСквознаяАналитика.Форма.ФормаВарианта",ПараметрыФ,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	СохранитьНастройкиВХранилище(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиВХранилище(КлючОбъекта)
	
	КлючНастроек = "РабочееМестоСквознаяАналитика";
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("ТаблицаПоказателей",	ТаблицаПоказателей.Выгрузить());
	Настройки.Вставить("ТаблицаКолонокОтчета", 	ТаблицаКолонокОтчета.Выгрузить());
	
	Настройки.Вставить("РекламныеКампании",		РекламныеКампании.ВыгрузитьЗначения());
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,,Строка(ТекущийПользователь));
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройки(Команда)
	
	ВариантПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройкиИзХранилища(КлючОбъекта)
	
	КлючНастроек = "РабочееМестоСквознаяАналитика";
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек,,,Строка(ТекущийПользователь));
	
	Если ЗначениеНастроек =Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначениеИзНастройкиТаблицаПоказателей	= ЗначениеНастроек.Получить("ТаблицаПоказателей");
	ЗначениеИзНастройкиТаблицаКолонокОтчета = ЗначениеНастроек.Получить("ТаблицаКолонокОтчета");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		
		Если ТипЗнч(ЗначениеИзНастройкиТаблицаПоказателей) = Тип("ТаблицаЗначений") Тогда
			ТаблицаПоказателей.Загрузить(ЗначениеИзНастройкиТаблицаПоказателей);
		КонецЕсли;
		Если ТипЗнч(ЗначениеИзНастройкиТаблицаКолонокОтчета) = Тип("ТаблицаЗначений") Тогда
			ТаблицаКолонокОтчета.Загрузить(ЗначениеИзНастройкиТаблицаКолонокОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	// Диаграмма
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Новый ПользовательскиеНастройкиКомпоновкиДанных);
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = КомпоновщикНастроек.Настройки;
	
	// Таблица
	КомпоновщикНастроекТаблица.ЗагрузитьПользовательскиеНастройки(Новый ПользовательскиеНастройкиКомпоновкиДанных);
	СхемаКомпоновкиДанныхТаблица = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхТаблица");
	НастройкиТаблица = КомпоновщикНастроекТаблица.Настройки;
	
	КэшированныеЗначения.Вставить("СхемаКомпоновкиДанныхТаблица",СхемаКомпоновкиДанныхТаблица);
	КэшированныеЗначения.Вставить("НастройкиТаблица",НастройкиТаблица);
	
	КэшированныеЗначения.Вставить("СхемаКомпоновкиДанных",СхемаКомпоновкиДанных);
	КэшированныеЗначения.Вставить("Настройки",Настройки);
	
	КэшированныеЗначения.Вставить("ДанныеРасшифровки",				Новый ДанныеРасшифровкиКомпоновкиДанных);
	КэшированныеЗначения.Вставить("КомпоновщикМакета",				Новый КомпоновщикМакетаКомпоновкиДанных);
	КэшированныеЗначения.Вставить("ПроцессорКомпоновкиДанных",		Новый ПроцессорКомпоновкиДанных);
	КэшированныеЗначения.Вставить("ПроцессорВывода",				Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент);
	
	КэшированныеЗначения.Вставить("ДиаграммаДанныеРасшифровки",				Новый ДанныеРасшифровкиКомпоновкиДанных);
	КэшированныеЗначения.Вставить("ДиаграммаКомпоновщикМакета",				Новый КомпоновщикМакетаКомпоновкиДанных);
	КэшированныеЗначения.Вставить("ДиаграммаПроцессорКомпоновкиДанных",		Новый ПроцессорКомпоновкиДанных);
	КэшированныеЗначения.Вставить("ДиаграммаПроцессорВывода",				Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент);
	
	АдресКеширования = ПоместитьВоВременноеХранилище(КэшированныеЗначения, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры // ПолучитьСтруктуруКэшируемыеЗначения()

&НаКлиенте
Процедура ИспользоватьДСПриИзменении(Элемент)
	
	Если ИспользоватьДС Тогда
		Элементы.ОтчетТабличныйДокументТаблица.Видимость = Ложь;
		Элементы.ДСПоКампаниям.Видимость = Истина;
		Элементы.ГруппаКолонки.Видимость = Ложь;
	Иначе
		Элементы.ОтчетТабличныйДокументТаблица.Видимость = Истина;
		Элементы.ДСПоКампаниям.Видимость = Ложь;
	КонецЕсли;
	
	Сформировать();
	
КонецПроцедуры

#КонецОбласти
&НаКлиенте
Процедура КнопкаКонтекст(Команда)
	ТабДок = КнопкаКонтекстНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция  КнопкаКонтекстНаСервере()
	
	ТабличныйДок = Новый ТабличныйДокумент;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	МакетТабл = ОтчетОбъект.ПолучитьМакет("МакетРасшифровкаДокумента");
	
	КомпоновщикНастроекРасшифровка.ЗагрузитьНастройки(МакетТабл.НастройкиПоУмолчанию);
	
	Настройки = КомпоновщикНастроекРасшифровка.Настройки;
	
	СтПериод = Настройки.ПараметрыДанных.Элементы.Найти("период");
	
	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	СтандартныйПериод.ДатаНачала = Период.ДатаНачала;
	СтандартныйПериод.ДатаОкончания = Период.ДатаОкончания;
	
	СтПериод.Значение = СтандартныйПериод;
	СтПериод.Использование = Истина;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетТабл, Настройки, ДанныеРасшифровки);
	
	// Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);
	
	// Очищаем поле табличного документа
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДок);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТабличныйДок.ОтображатьЗаголовки = Ложь;
	ТабличныйДок.ОтображатьСетку = Ложь;
	ТабличныйДок.Защита = Истина;
	
	Возврат ТабличныйДок;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовИКнопок(Кампании, Цели, Источники)
	
	Элементы.ГруппаПоКампаниям.Видимость = Кампании;
	Элементы.ГруппаПоЦелям.Видимость = Цели;
	Элементы.ГруппаСводкаПоИсточникам.Видимость = Источники;
		
	Элементы.РНПоКампаниям.Видимость = Кампании;
	Элементы.РНПоЦелям.Видимость = Цели;
	Элементы.РНПоИсточникам.Видимость = Источники;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура ТаблицаПоказателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ТаблицаПоказателей.НайтиСтроки(Новый Структура("Выбрано",Истина)).Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Должен быть выбран хотя бы один показатель");
		ОтменаРедактирования = Истина;
		Отказ = Истина;
		Элемент.ТекущиеДанные.Выбрано = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДсПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Период = Неопределено;
	
	Настройки.ДополнительныеСвойства.Свойство("Период",Период);
	
	ЕстьРасчетыСПокупателями = (Метаданные.РегистрыНакопления.Найти("РасчетыСПокупателями") <> Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ПоказателиКампаний.CRM_Сайт КАК CRM_Сайт,
	|	CRM_ПоказателиКампаний.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	CRM_ПоказателиКампаний.CRM_РекламнаяКампания КАК CRM_РекламнаяКампания,
	|	CRM_ПоказателиКампаний.ОбъявлениеРекламнаяКомпания КАК ОбъявлениеРекламнаяКомпания,
	|	СУММА(CRM_ПоказателиКампаний.Визиты) КАК Визиты,
	|	СУММА(CRM_ПоказателиКампаний.Посетители) КАК Посетители,
	|	СУММА(CRM_ПоказателиКампаний.Отказы) КАК Отказы,
	|	СУММА(CRM_ПоказателиКампаний.ГлубинаПросмотра) КАК ГлубинаПросмотра
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрСведений.CRM_ПоказателиКампаний КАК CRM_ПоказателиКампаний
	|ГДЕ
	|	CRM_ПоказателиКампаний.ПериодДанных МЕЖДУ &Период1 И &Период2
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ПоказателиКампаний.CRM_Сайт,
	|	CRM_ПоказателиКампаний.КаналПервичногоИнтереса,
	|	CRM_ПоказателиКампаний.CRM_РекламнаяКампания,
	|	CRM_ПоказателиКампаний.ОбъявлениеРекламнаяКомпания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.CRM_Сайт КАК CRM_Сайт,
	|	ВременнаяТаблица.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	ВременнаяТаблица.CRM_РекламнаяКампания КАК CRM_РекламнаяКампания,
	|	ВременнаяТаблица.ОбъявлениеРекламнаяКомпания КАК ОбъявлениеРекламнаяКомпания,
	|	ВременнаяТаблица.Визиты КАК Визиты,
	|	ВременнаяТаблица.Посетители КАК Посетители,
	|	ВременнаяТаблица.Отказы КАК Отказы,
	|	ВременнаяТаблица.ГлубинаПросмотра КАК ГлубинаПросмотра,
	|	СУММА(CRM_ЗатратыРекламныхКампаний.Показы) КАК Показы,
	|	СУММА(CRM_ЗатратыРекламныхКампаний.Клики) КАК Клики,
	|	СРЕДНЕЕ(CRM_ЗатратыРекламныхКампаний.СредняяЦенаКлика) КАК СредняяЦенаКлика
	|ПОМЕСТИТЬ ВременнаяТаблицаПоказателиИтоговая
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЗатратыРекламныхКампаний КАК CRM_ЗатратыРекламныхКампаний
	|		ПО ВременнаяТаблица.CRM_РекламнаяКампания = CRM_ЗатратыРекламныхКампаний.CRM_РекламнаяКампания
	|			И ВременнаяТаблица.ОбъявлениеРекламнаяКомпания = CRM_ЗатратыРекламныхКампаний.ОбъявленияРекламныхКампаний
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица.CRM_Сайт,
	|	ВременнаяТаблица.КаналПервичногоИнтереса,
	|	ВременнаяТаблица.CRM_РекламнаяКампания,
	|	ВременнаяТаблица.ОбъявлениеРекламнаяКомпания,
	|	ВременнаяТаблица.Визиты,
	|	ВременнаяТаблица.Посетители,
	|	ВременнаяТаблица.Отказы,
	|	ВременнаяТаблица.ГлубинаПросмотра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиПервичногоИнтереса.Сделка КАК Сделка,
	|	ИсточникиПервичногоИнтереса.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	ИсточникиПервичногоИнтереса.Период КАК Период,
	|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
	|	ИсточникиПервичногоИнтереса.CRM_Сайт КАК CRM_Сайт
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаявки
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|ГДЕ
	|	ИсточникиПервичногоИнтереса.Период МЕЖДУ &Период1 И &Период2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КаналПервичногоИнтереса,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗаявки.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаЗаявки.Сделка) КАК ЗаявкаКоличество,
	|	ВременнаяТаблицаЗаявки.Период КАК Период,
	|	ВременнаяТаблицаЗаявки.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ВременнаяТаблицаЗаявки.Сделка КАК Документ.CRM_Заявка)) КАК ДокументЗаявка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ВременнаяТаблицаЗаявки.Сделка КАК Документ.ТелефонныйЗвонок)) КАК ДокументТелефонныйЗвонок,
	|	ВременнаяТаблицаЗаявки.CRM_Сайт КАК CRM_Сайт
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаявкаКоличество
	|ИЗ
	|	ВременнаяТаблицаЗаявки КАК ВременнаяТаблицаЗаявки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаЗаявки.КаналПервичногоИнтереса,
	|	ВременнаяТаблицаЗаявки.Период,
	|	ВременнаяТаблицаЗаявки.ИсточникПервичногоИнтереса,
	|	ВременнаяТаблицаЗаявки.CRM_Сайт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КаналПервичногоИнтереса,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_Интерес.СостояниеИнтереса.Родитель КАК СостояниеИнтересаРодитель
	|ПОМЕСТИТЬ ВоронкаПродаж
	|ИЗ
	|	ВременнаяТаблицаЗаявки КАК ВременнаяТаблицаЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
	|		ПО ВременнаяТаблицаЗаявки.Сделка = CRM_Интерес.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Интерес.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаЗаявки.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	ВременнаяТаблицаЗаявки.Сделка КАК Сделка,
	|	CRM_Интерес.ОжидаемаяВыручка КАК ОжидаемаяВыручка,
	|	ВременнаяТаблицаЗаявки.Период КАК Период,
	|	ВременнаяТаблицаЗаявки.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса
	|ПОМЕСТИТЬ ВременнаяТаблицаИнтересы
	|ИЗ
	|	ВременнаяТаблицаЗаявки КАК ВременнаяТаблицаЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
	|		ПО ВременнаяТаблицаЗаявки.Сделка = CRM_Интерес.ДокументОснование
	|ГДЕ
	|	НЕ CRM_Интерес.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КаналПервичногоИнтереса,
	|	Период,
	|	ИсточникПервичногоИнтереса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаИнтересы.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблицаИнтересы.Ссылка) КАК ИнтересыКоличество,
	|	СУММА(ВременнаяТаблицаИнтересы.ОжидаемаяВыручка) КАК ВыручкаСумма,
	|	ВременнаяТаблицаИнтересы.Период КАК Период,
	|	ВременнаяТаблицаИнтересы.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса
	|ПОМЕСТИТЬ ВременнаяТаблицаИнтересыКоличество
	|ИЗ
	|	ВременнаяТаблицаИнтересы КАК ВременнаяТаблицаИнтересы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаИнтересы.КаналПервичногоИнтереса,
	|	ВременнаяТаблицаИнтересы.Период,
	|	ВременнаяТаблицаИнтересы.ИсточникПервичногоИнтереса
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КаналПервичногоИнтереса,
	|	Период,
	|	ИсточникПервичногоИнтереса
	|;" + ?(ЕстьРасчетыСПокупателями, "", "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Сделка КАК Документ,
	|	СУММА(ДолгРегл) КАК СуммаПриход
	|ПОМЕСТИТЬ РасчетыСПокупателями
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам
	|ГДЕ
	|	ВидДвижения = &ВидДвижения
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;") + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийCRM_ЖурналДокументов.Объект КАК Объект,
	|	РегистрСведенийCRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес,
	|	РасчетыСПокупателями.СуммаПриход КАК СуммаПриход
	|ПОМЕСТИТЬ ПродажиПо
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК РегистрСведенийCRM_ЖурналДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ИнформацияОПисьмах КАК CRM_ИнформацияОПисьмах
	|		ПО РегистрСведенийCRM_ЖурналДокументов.Объект = CRM_ИнформацияОПисьмах.Объект" + ?(ЕстьРасчетыСПокупателями, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Обороты(, , Авто, ) КАК РасчетыСПокупателями", "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыСПокупателями КАК РасчетыСПокупателями") + "	
	|		ПО РегистрСведенийCRM_ЖурналДокументов.Объект = РасчетыСПокупателями.Документ
	|ГДЕ
	|	НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_Интерес
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.СообщениеSMS
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_Заявка
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_СообщениеМессенджера
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Задача.ЗадачаИсполнителя
	|	И НЕ РегистрСведенийCRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
	|	И РегистрСведенийCRM_ЖурналДокументов.ГлавнаяЗапись = ИСТИНА
	|	И РегистрСведенийCRM_ЖурналДокументов.CRM_Интерес В
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаИнтересы.Ссылка
	|			ИЗ
	|				ВременнаяТаблицаИнтересы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаИнтересы.Период КАК Период,
	|	ВременнаяТаблицаИнтересы.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
	|	ВременнаяТаблицаИнтересы.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	СУММА(ПродажиПо.СуммаПриход) КАК СуммаПриход
	|ПОМЕСТИТЬ ВременнаяТаблицаИтговыеПродажи
	|ИЗ
	|	ВременнаяТаблицаИнтересы КАК ВременнаяТаблицаИнтересы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПродажиПо КАК ПродажиПо
	|		ПО ВременнаяТаблицаИнтересы.Ссылка = ПродажиПо.CRM_Интерес
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаИнтересы.Период,
	|	ВременнаяТаблицаИнтересы.ИсточникПервичногоИнтереса,
	|	ВременнаяТаблицаИнтересы.КаналПервичногоИнтереса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаИнтересы.Период КАК Период,
	|	ВременнаяТаблицаИнтересы.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
	|	ВременнаяТаблицаИнтересы.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиПо.CRM_Интерес) КАК Объект
	|ПОМЕСТИТЬ ВременнаяТаблицаИтговыеПродажиКоличество
	|ИЗ
	|	ВременнаяТаблицаИнтересы КАК ВременнаяТаблицаИнтересы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПродажиПо КАК ПродажиПо
	|		ПО ВременнаяТаблицаИнтересы.Ссылка = ПродажиПо.CRM_Интерес
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаИнтересы.Период,
	|	ВременнаяТаблицаИнтересы.ИсточникПервичногоИнтереса,
	|	ВременнаяТаблицаИнтересы.КаналПервичногоИнтереса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗаявкаКоличество.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	СУММА(ВременнаяТаблицаЗаявкаКоличество.ЗаявкаКоличество) КАК ЗаявкаКоличество,
	|	СУММА(ВременнаяТаблицаИнтересыКоличество.ИнтересыКоличество) КАК ИнтересыКоличество,
	|	СУММА(ВременнаяТаблицаИнтересыКоличество.ВыручкаСумма) КАК ВыручкаСумма,
	|	ВременнаяТаблицаЗаявкаКоличество.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
	|	СУММА(ВременнаяТаблицаИтговыеПродажи.СуммаПриход) КАК Продажа,
	|	СУММА(ВременнаяТаблицаИтговыеПродажиКоличество.Объект) КАК ПродажиКоличество,
	|	СУММА(ВременнаяТаблицаЗаявкаКоличество.ДокументЗаявка) КАК ДокументЗаявка,
	|	СУММА(ВременнаяТаблицаЗаявкаКоличество.ДокументТелефонныйЗвонок) КАК ДокументТелефонныйЗвонок,
	|	ВременнаяТаблицаЗаявкаКоличество.CRM_Сайт КАК CRM_Сайт
	|ПОМЕСТИТЬ Итоговая
	|ИЗ
	|	ВременнаяТаблицаЗаявкаКоличество КАК ВременнаяТаблицаЗаявкаКоличество
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаИнтересыКоличество КАК ВременнаяТаблицаИнтересыКоличество
	|		ПО ВременнаяТаблицаЗаявкаКоличество.Период = ВременнаяТаблицаИнтересыКоличество.Период
	|			И ВременнаяТаблицаЗаявкаКоличество.КаналПервичногоИнтереса = ВременнаяТаблицаИнтересыКоличество.КаналПервичногоИнтереса
	|			И ВременнаяТаблицаЗаявкаКоличество.ИсточникПервичногоИнтереса = ВременнаяТаблицаИнтересыКоличество.ИсточникПервичногоИнтереса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаИтговыеПродажи КАК ВременнаяТаблицаИтговыеПродажи
	|		ПО ВременнаяТаблицаЗаявкаКоличество.Период = ВременнаяТаблицаИтговыеПродажи.Период
	|			И ВременнаяТаблицаЗаявкаКоличество.КаналПервичногоИнтереса = ВременнаяТаблицаИтговыеПродажи.КаналПервичногоИнтереса
	|			И ВременнаяТаблицаЗаявкаКоличество.ИсточникПервичногоИнтереса = ВременнаяТаблицаИтговыеПродажи.ИсточникПервичногоИнтереса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаИтговыеПродажиКоличество КАК ВременнаяТаблицаИтговыеПродажиКоличество
	|		ПО ВременнаяТаблицаЗаявкаКоличество.Период = ВременнаяТаблицаИтговыеПродажиКоличество.Период
	|			И ВременнаяТаблицаЗаявкаКоличество.КаналПервичногоИнтереса = ВременнаяТаблицаИтговыеПродажиКоличество.КаналПервичногоИнтереса
	|			И ВременнаяТаблицаЗаявкаКоличество.ИсточникПервичногоИнтереса = ВременнаяТаблицаИтговыеПродажиКоличество.ИсточникПервичногоИнтереса
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаЗаявкаКоличество.КаналПервичногоИнтереса,
	|	ВременнаяТаблицаЗаявкаКоличество.ИсточникПервичногоИнтереса,
	|	ВременнаяТаблицаЗаявкаКоличество.CRM_Сайт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КаналПервичногоИнтереса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итоговая.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	Итоговая.ЗаявкаКоличество КАК ЗаявкаКоличество,
	|	Итоговая.ИнтересыКоличество КАК ИнтересыКоличество,
	|	Итоговая.ИсточникПервичногоИнтереса КАК РекламнаяКампания,
	|	Итоговая.Продажа КАК Выручка,
	|	Итоговая.ПродажиКоличество КАК ПродажиКоличество,
	|	Итоговая.ДокументЗаявка КАК ДокументЗаявка,
	|	Итоговая.ДокументТелефонныйЗвонок КАК ДокументТелефонныйЗвонок,
	|	Итоговая.CRM_Сайт КАК CRM_Сайт
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаявкиИтоговая
	|ИЗ
	|	Итоговая КАК Итоговая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПоказателиИтоговая.CRM_Сайт КАК CRM_Сайт,
	|	ВременнаяТаблицаПоказателиИтоговая.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	ВременнаяТаблицаПоказателиИтоговая.CRM_РекламнаяКампания КАК CRM_РекламнаяКампания,
	|	ВременнаяТаблицаПоказателиИтоговая.ОбъявлениеРекламнаяКомпания КАК ОбъявлениеРекламнаяКомпания,
	|	ВременнаяТаблицаПоказателиИтоговая.Визиты КАК Визиты,
	|	ВременнаяТаблицаПоказателиИтоговая.Посетители КАК Посетители,
	|	ВременнаяТаблицаПоказателиИтоговая.Отказы КАК Отказы,
	|	ВременнаяТаблицаПоказателиИтоговая.ГлубинаПросмотра КАК ГлубинаПросмотра,
	|	ВременнаяТаблицаПоказателиИтоговая.Показы КАК Показы,
	|	ВременнаяТаблицаПоказателиИтоговая.Клики КАК Клики,
	|	ВременнаяТаблицаПоказателиИтоговая.СредняяЦенаКлика КАК СредняяЦенаКлика,
	|	ВременнаяТаблицаЗаявкиИтоговая.ЗаявкаКоличество КАК ЗаявкаКоличество,
	|	ВременнаяТаблицаЗаявкиИтоговая.ИнтересыКоличество КАК ИнтересыКоличество,
	|	ВременнаяТаблицаЗаявкиИтоговая.Выручка КАК Выручка,
	|	ВременнаяТаблицаЗаявкиИтоговая.ПродажиКоличество КАК ПродажиКоличество,
	|	ВременнаяТаблицаЗаявкиИтоговая.ДокументЗаявка КАК ДокументЗаявка,
	|	ВременнаяТаблицаЗаявкиИтоговая.ДокументТелефонныйЗвонок КАК ДокументТелефонныйЗвонок
	|ИЗ
	|	ВременнаяТаблицаПоказателиИтоговая КАК ВременнаяТаблицаПоказателиИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаявкиИтоговая КАК ВременнаяТаблицаЗаявкиИтоговая
	|		ПО ВременнаяТаблицаПоказателиИтоговая.CRM_Сайт = ВременнаяТаблицаЗаявкиИтоговая.CRM_Сайт
	|			И ВременнаяТаблицаПоказателиИтоговая.КаналПервичногоИнтереса = ВременнаяТаблицаЗаявкиИтоговая.КаналПервичногоИнтереса
	|			И ВременнаяТаблицаПоказателиИтоговая.CRM_РекламнаяКампания = ВременнаяТаблицаЗаявкиИтоговая.РекламнаяКампания
	|ИТОГИ ПО
	|	CRM_Сайт";
	
	Запрос.УстановитьПараметр("Период1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Период2", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Счетчик = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Строки[Счетчик].Значение,ВыборкаДетальныеЗаписи);
		
		Счетчик = Счетчик  +1;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуДанных(Период)
	
	ЕстьРасчетыСПокупателями = (Метаданные.РегистрыНакопления.Найти("РасчетыСПокупателями") <> Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Документы.Объект КАК Сделка,
	|	Документы.CRM_Интерес КАК Интерес,
	|	ИсточникиИнтереса.CRM_Сайт КАК CRM_Сайт,
	|	ИсточникиИнтереса.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
	|	ИсточникиИнтереса.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса
	|ПОМЕСТИТЬ ВременнаяТаблицаДанные	
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК Документы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиИнтереса
	|	ПО ИсточникиИнтереса.Сделка = Документы.Объект
	|ГДЕ
	|	Документы.Дата МЕЖДУ &Период1 И &Период2
	|;" + ?(ЕстьРасчетыСПокупателями, "
	|
	|ВЫБРАТЬ
	|	Документ,
	|	СУММА(Сумма) КАК СуммаПриход
	|ПОМЕСТИТЬ РасчетыСПокупателями
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями
	|ГДЕ
	|	Период МЕЖДУ &Период1 И &Период2
	|	И ВидДвижения = &ВидДвижения
	|СГРУППИРОВАТЬ ПО
	|	Документ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ	
	|;", "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Сделка КАК Документ,
	|	СУММА(ДолгРегл) КАК СуммаПриход
	|ПОМЕСТИТЬ РасчетыСПокупателями
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам
	|ГДЕ
	|	ВидДвижения = &ВидДвижения
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;") + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийCRM_ЖурналДокументов.Объект КАК Объект,
	|	РегистрСведенийCRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес,
	|	РасчетыСПокупателями.СуммаПриход КАК СуммаПриход
	|ПОМЕСТИТЬ ВременнаяТаблицаВыручка
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК РегистрСведенийCRM_ЖурналДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасчетыСПокупателями КАК РасчетыСПокупателями
	|	ПО РегистрСведенийCRM_ЖурналДокументов.Объект = РасчетыСПокупателями.Документ
	|ГДЕ
	|	РегистрСведенийCRM_ЖурналДокументов.Объект ССЫЛКА Документ.СчетНаОплатуКлиенту
	//|	И НЕ РегистрСведенийCRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
	//|	И РегистрСведенийCRM_ЖурналДокументов.CRM_Интерес В (ВЫБРАТЬ Интерес ИЗ ВременнаяТаблицаДанные)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДанные.CRM_Сайт КАК CRM_Сайт,
	|	ВременнаяТаблицаДанные.ИсточникПервичногоИнтереса КАК РекламнаяКампания,
	|	СУММА(ЕСТЬNULL(ВременнаяТаблицаВыручка.СуммаПриход, 0)) КАК Продажи,
	|	ВременнаяТаблицаДанные.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса
	|ИЗ
	|	ВременнаяТаблицаДанные КАК ВременнаяТаблицаДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыручка КАК ВременнаяТаблицаВыручка
	|	ПО ВременнаяТаблицаДанные.Сделка = ВременнаяТаблицаВыручка.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДанные.CRM_Сайт,
	|	ВременнаяТаблицаДанные.ИсточникПервичногоИнтереса,
	|	ВременнаяТаблицаДанные.КаналПервичногоИнтереса";
	Запрос.УстановитьПараметр("Период1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Период2", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	
	ТаблицаДанные = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДанные;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДСПоКампаниямПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Период = Неопределено;
	Настройки.ДополнительныеСвойства.Свойство("Период", Период);
	
	ТаблицаДанные = ПолучитьТаблицуДанных(Период);
	
	Для Каждого Стр Из Строки.ПолучитьКлючи() Цикл
		СтрокаДС = Строки.Получить(Стр).Данные;
		
		//Если ЗначениеЗаполнено(СтрокаДС.ДокументЗаявка) ИЛИ ЗначениеЗаполнено(СтрокаДС.ДокументТелефонныйЗвонок) Тогда
			Структура = Новый Структура();
			//Структура.Вставить("CRM_Сайт",СтрокаДС.CRM_Сайт);
			Структура.Вставить("РекламнаяКампания", СтрокаДС.CRM_РекламнаяКампания);
			
			МассивДанных = ТаблицаДанные.НайтиСтроки(Структура);
			
			Если МассивДанных.Количество() > 0 Тогда
				СтрокаДС.Продажи = МассивДанных[0].Продажи;

				Если СтрокаДС.Затраты = 0 Тогда
					  СтрокаДС.ROI = 0;

				ИначеЕсли МассивДанных[0].Продажи > 0 И СтрокаДС.Затраты > 0 Тогда
					  СтрокаДС.ROI = (МассивДанных[0].Продажи - СтрокаДС.Затраты) / СтрокаДС.Затраты * 100;
				КонецЕсли;	
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДСПоЦелямПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Период = Неопределено;
	Настройки.ДополнительныеСвойства.Свойство("Период",Период);
	
	ТаблицаДанные = ПолучитьТаблицуДанных(Период);
	
	Для Каждого Стр Из Строки.ПолучитьКлючи() Цикл
		СтрокаДС = Строки.Получить(Стр).Данные;
		
		//Если ЗначениеЗаполнено(СтрокаДС.ДокументЗаявка) ИЛИ ЗначениеЗаполнено(СтрокаДС.ДокументТелефонныйЗвонок) Тогда
			Структура = Новый Структура();
			//Структура.Вставить("CRM_Сайт",СтрокаДС.CRM_Сайт);
			Структура.Вставить("РекламнаяКампания", СтрокаДС.CRM_РекламнаяКампания);
			
			МассивДанных = ТаблицаДанные.НайтиСтроки(Структура);
			Если МассивДанных.Количество() > 0 Тогда
				СтрокаДС.Продажи = МассивДанных[0].Продажи;
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДСПоИсточникамПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Период = Неопределено;
	Настройки.ДополнительныеСвойства.Свойство("Период", Период);
	
	ТаблицаДанные = ПолучитьТаблицуДанных(Период);
	
	Для Каждого Стр Из Строки.ПолучитьКлючи() Цикл
		СтрокаДС = Строки.Получить(Стр).Данные;
		
		//Если ЗначениеЗаполнено(СтрокаДС.ДокументЗаявка) ИЛИ ЗначениеЗаполнено(СтрокаДС.ДокументТелефонныйЗвонок) Тогда
			Структура = Новый Структура();
			Структура.Вставить("КаналПервичногоИнтереса", СтрокаДС.КаналПервичногоИнтереса);
			
			МассивДанных = ТаблицаДанные.НайтиСтроки(Структура);
			Если МассивДанных.Количество() > 0 Тогда
				СтрокаДС.Продажи = МассивДанных[0].Продажи;
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоКампаниям(Команда)
	УстановитьВидимостьЭлементовИКнопок(Истина,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЦелям(Команда)
	УстановитьВидимостьЭлементовИКнопок(Ложь,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоИсточникам(Команда)
	УстановитьВидимостьЭлементовИКнопок(Ложь,Ложь,Истина);
КонецПроцедуры

#КонецОбласти
// -Рабочий стол
