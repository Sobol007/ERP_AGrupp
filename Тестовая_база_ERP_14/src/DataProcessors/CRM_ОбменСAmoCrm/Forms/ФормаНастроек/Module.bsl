&НаСервере
Перем ОбъектДанных;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	ОбъектДанных.ВосстановитьНастройки();
	
	ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
	
	Объект.ПомощникПройден = Ложь;
	
	ЗаполнитьДеревоЗначений();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапуститьВФоне = Истина;
	
	Если НЕ Объект.ПомощникПройден Тогда
		
		ФормаПомощника = ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаПомощник");
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
	РежимЗагрузкиДанныхПриИзменении(Истина);
	
	УстановитьУсловноеОформлениеЭлементов();
	
	СформироватьСписокЗначенийПоРеквизитамПартнера();
	
	СформироватьСписокЗначенийПоРеквизитамКонтактныеЛица();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЭлементов()
	
	Если НЕ Объект.ПодключениеСуществует Тогда
		Элементы.ДекорацияИнформацияОПодключении.Заголовок = "Подключение отсутствует, проверьте данные";
		Элементы.ДекорацияИнформацияОПодключении.ЦветТекста = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	Иначе
		Элементы.ДекорацияИнформацияОПодключении.Заголовок = "Подключение выполнено. Можно перейти к загрузке данных";
		Элементы.ДекорацияИнформацияОПодключении.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	ОбъектДанных.СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда		
		
		СохранитьНастройки();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКнопок

// Дополнительный параметр для загрузки данных
// 0 = Партнеры
// 1 = КонтактныеЛицаПартнеров
&НаСервере
Функция ЗагрузкаДанныхНаСервере(ДанныеОбработки,ИмяМетода,СтруктураПараметров,ВнешняяОбработка,ФайлКУдалению)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", СтруктураПараметров);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", ВнешняяОбработка);
	ПараметрыЗадания.Вставить("Журнал", Объект.ЖурналСобытий);
	Если ВнешняяОбработка Тогда // внешняя обработка
		ИмяОбработки=ПолучитьИмяВременногоФайла("epf");
		ДанныеОбработки.Записать(ИмяОбработки);
		ФайлКУдалению=ИмяОбработки;
		ПараметрыЗадания.Вставить("ИмяОбработки", ИмяОбработки);
	Иначе
		ПараметрыЗадания.Вставить("ИмяОбработки", РеквизитФормыВЗначение("Объект").Метаданные().Имя);
	КонецЕсли;
	ПараметрыВыполнения=ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки", ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ЗагрузкаДанныхНаСервереВФорме()
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	// данные загружаются последовательно
	// ----------------------------------------
	// Компании - Партнеры
	Если Объект.Компании Тогда
		
		Ресурс = "/api/v2/companies";
		
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,0,Ложь);
		
	КонецЕсли;
	
	// Контакты - Партнеры - контактные лица
	Если Объект.Контакты Тогда
		
		Ресурс = "/api/v2/contacts";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,1,Ложь);
		
	КонецЕсли;
	
	Если Объект.Сделки Тогда
		
		Ресурс = "/api/v2/leads";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,2,Ложь);
		
	КонецЕсли;
	
	Если Объект.Задачи Тогда
		
		Ресурс = "/api/v2/tasks";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,3,Ложь);
		
	КонецЕсли;
	
	Если Объект.События Тогда
		
		Ресурс = "/api/v2/notes";
		// примечания к сделкам
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,4,Ложь);
		// примечания к компаниям
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,5,Ложь);
		// примечания к контактам
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,6,Ложь);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхВФоновомРежиме()
	
	ВнешняяОбработка = ЭтоВнешняяОбработка();	
	Если ВнешняяОбработка Тогда
		ДанныеОбработки=Новый ДвоичныеДанные(ИмяОбработки());
	Иначе
		ДанныеОбработки=Неопределено;
	КонецЕсли;
	ФайлКУдалению="";
	РезультатФоновогоЗадания = ЗагрузкаДанныхНаСервере(ДанныеОбработки,"ЗапуститьВФонеЗагрузкуДанных",Новый Структура("Журнал",Объект.ЖурналСобытий),ВнешняяОбработка,ФайлКУдалению);
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ТекстСообщения = "Загрузка данных из амо...";
	НастройкиОжидания.ВыводитьСообщения = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.Интервал = 1;
	ОбработкаРезультат = Новый ОписаниеОповещения("ОбработкаРезультата",ЭтотОбъект);
	ОповещениеПользователя = Новый ОписаниеОповещения("ОповещениеФоновогоЗадания",ЭтотОбъект,Новый Структура("Обработка,ФайлКУдалению",ОбработкаРезультат,ФайлКУдалению));
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания,ОповещениеПользователя,НастройкиОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеФоновогоЗадания(Задание,ДопПараметры) Экспорт
	Если Задание.Статус="Выполнено" Тогда
		РезультатВыполнения=ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		ВыполнитьОбработкуОповещения(ДопПараметры.Обработка,РезультатВыполнения);
	ИначеЕсли Задание.Статус="Ошибка" Тогда
		Сообщить(Задание.ПодробноеПредставлениеОшибки);
	Иначе
		Сообщить("Проблема с выполнением");
	КонецЕсли;
	УдалитьВременныйФайл(ДопПараметры.ФайлКУдалению);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультата(РезультатВыполнения,ДопПараметры) Экспорт
	
	Оповещение = новый ОписаниеОповещения("ПослеВыполненияЗагрузки",ЭтотОбъект);
	Режим = РежимДиалогаВопрос.ОКОтмена;
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Загрузка данных завершена. Открыть лог загрузки?';"),Режим,10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайл(ИмяФайла)
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИмяОбработки()
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции

&НаСервере
Функция ЭтоВнешняяОбработка()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	МетаОбработкаИмя=ОбработкаОбъект.Метаданные().Имя;
	Если Метаданные.Обработки.Найти(МетаОбработкаИмя)<>Неопределено
		И ТипЗнч(ОбработкаОбъект)=Тип("ОбработкаОбъект."+МетаОбработкаИмя) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДанных(Команда)
	
	Отказ = Истина;
	
	СтруктураОбязательныхПолей = Новый Структура("Домен,Логин,Хеш,Организация");
	
	СохранитьНастройки();
	
	ПроверкаИСозданиеДопРеквизитовДляОбъектов();
	// Перед загрузкой создаем все дополнительные реквизиты, т.к. нужно записывать из формы
	// Если Не Объект.ДопРеквизитыСозданы Тогда
	// проверям созданы ли ИД для объектов
	СоздаемДопРеквизитыДляВсехОбъектов();
	
	Если НЕ Объект.ПользователиСопоставлены Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед началом загрузки данных из вашей AmoCRM рекомендуется сопоставить пользователей AmoCRM "
		+ "с пользователями текущей базы(при необходимости создать пользователей и назначить необходимые права)."
		+ "После сопоставления данных пользователи будут использоваться в документах, справочниках и т.д.';"), Режим, 0);
	Иначе
		#Если ВебКлиент Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВЕб", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Процедура загрузки может занять длительное время, продолжить?';"), Режим, 0);
			
		#Иначе
			
			Если ЗапуститьВФоне Тогда
				ВыполнитьЗагрузкуДанныхВФоновомРежиме();
			Иначе 
				ТекстСообщения = "Начало загрузки данных: " + ТекущаяДата();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЗагрузкаДанныхНаСервереВФорме();
				ЗаполнитьЖурналДанными();
				Элементы.СтраницаЖурнал.Видимость = Истина;
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЖурнал;
				ТекстСообщения = "Данные успешно загружены: " + ТекущаяДата();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВЕб(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекстСообщения = "Начало загрузки данных: " + ТекущаяДата();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗагрузкаДанныхНаСервереВФорме();
		Оповещение = новый ОписаниеОповещения("ПослеВыполненияЗагрузки",ЭтотОбъект);
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Загрузка данных завершена. Открыть лог загрузки?';"),Режим,10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
		ТекстСообщения = "Данные успешно загружены: " + ТекущаяДата();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияЗагрузки(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ЗаполнитьЖурналДанными();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЖурналСобытий",объект.ЖурналСобытий);
		ПараметрыФормы.Вставить("ЖурналСозданныхОбъектов",ПолучитьТаблицуЖурнала());
		ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаЖурнал",ПараметрыФормы,ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЖурналДанными()
	
	КлючНастроек = "Обработка.CRM_ОбменСAmoCrm.ЖурналДанных";
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ВыгрузкаНоменклатуры", КлючНастроек,,,Строка(ПользователиКлиентСервер.ТекущийПользователь()));
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		
		ЗначениеИзНастройкиЖУрнал	= ЗначениеНастроек.Получить("ЖурналСозданныхОбъектов");
		
		Объект.ЖурналСобытий = ЗначениеНастроек.Получить("ЖурналСобытий");
		
		Если ТипЗнч(ЗначениеИзНастройкиЖУрнал) = Тип("ТаблицаЗначений") Тогда
			Объект.ЖурналСозданныхОбъектов.Загрузить(ЗначениеИзНастройкиЖУрнал);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПользователейДляСопоставления()
	
	Возврат	ПоместитьВоВременноеХранилище(Объект.ПользователиСопоставление.Выгрузить(),Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЖурнала()
	
	Если НЕ Объект.ПользователиСопоставлены Тогда
		Объект.ПользователиСопоставление.Очистить();
	КонецЕсли;
	
	Возврат	ПоместитьВоВременноеХранилище(Объект.ЖурналСозданныхОбъектов.Выгрузить(),Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ПользователиСопоставлены = Ложь;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Автозаполнение",Истина);
		ПараметрыФормы.Вставить("Логин",Объект.Логин);
		ПараметрыФормы.Вставить("Домен",Объект.Домен);
		ПараметрыФормы.Вставить("Хеш",Объект.Хеш);
		ПараметрыФормы.Вставить("ПользователиСопоставлениеАдрес",ПолучитьТаблицуПользователейДляСопоставления());
		ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей",ПараметрыФормы,ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоПартнеру(Команда)
	
	ЗагрузитьИнформациюПоПартнеруНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоПартнеруНаСервере()
	
	Объект.ПартнерыСопоставление.Очистить();
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	Ресурс = "/api/v2/account";
	ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,0,Истина);
	
	ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
	
	ПопыткаСопоставленияДанныхСРеквизитами("Партнеры");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоСделкамНаСервере()
	
	Объект.СделкиСопоставление.Очистить();
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	Ресурс = "/api/v2/pipelines";
	ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,2,Истина);
	
	ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
	
	ЗаполнитьДеревоЗначений();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоСделкам(Команда)
	ЗагрузитьИнформациюПоСделкамНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокЗначенийПоРеквизитамПартнера()
	
	СписокВыбора = Элементы.ПартнерыСопоставлениеИмяРеквизита.СписокВыбора;
	
	ПартнерыМетаданные = Метаданные.Справочники.Партнеры.Реквизиты;
	
	Для Каждого СтрДанные Из ПартнерыМетаданные Цикл
		
		СписокВыбора.Добавить(СтрДанные.Имя,СтрДанные.Синоним);
		
	КонецЦикла;
	
	СписокВыбора.Добавить("АдресПартнера","Адрес");
	СписокВыбора.Добавить("CRM_СайтПартнера","Сайт");
	СписокВыбора.Добавить("ТелефонПартнера","Телефон");
	СписокВыбора.Добавить("EmailПартнера","Электронная почта");
	
	// дополнительные реквизиты
	ДопРеквизиты = ПолучитьТаблицуДопРеквизитов("Партнеры");
	
	Для Каждого СтрДоп Из ДопРеквизиты Цикл
		
		СписокВыбора.Добавить(СтрДоп.Имя,СтрДоп.Заголовок);
		
	КонецЦикла;
	
	СписокВыбора.Добавить("СоздатьДопРеквизит","Дополнительный реквизит");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДопРеквизитов(Таблица)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Различные
	|	ДопРеквизиты.Свойство.Наименование КАК Заголовок,
	|	ДопРеквизиты.Свойство.Имя КАК Имя
	|ИЗ
	|	Справочник." + Таблица + ".ДополнительныеРеквизиты КАК ДопРеквизиты
	|ГДЕ
	|	ДопРеквизиты.Свойство <> &Свойство";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ИД" + Таблица + "Амо"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПартнерыСопоставлениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	
	Если ТекДанные.ИмяРеквизита = "ТелефонПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "АдресПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "CRM_СайтПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "EmailПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	КонецЕсли;
	
КонецПроцедуры

// Проверка соединения с сайтом
&НаКлиенте
Процедура ПроверкаПодключения(Команда)
	
	ВыполнитьПроверкуПодключенияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуПодключенияНаСервере()
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	Объект.ПодключениеСуществует = ОбъектДанных.ВыполнитьПроверкуПодключения();
	УстановитьУсловноеОформлениеЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере()
	
	Объект.КонтактныеЛицаСопоставление.Очистить();
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	Ресурс = "/api/v2/account";
	ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,1,Истина);
	
	ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
	
	ПопыткаСопоставленияДанныхСРеквизитами("КонтактныеЛицаПартнеров");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокЗначенийПоРеквизитамКонтактныеЛица()
	
	СписокВыбора = Элементы.КонтактныеЛицаСопоставлениеИмяРеквизита.СписокВыбора;
	
	КонтактныеЛицаПартнеровМетаданные = Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты;
	
	Для Каждого СтрДанные Из КонтактныеЛицаПартнеровМетаданные Цикл
		
		СписокВыбора.Добавить(СтрДанные.Имя,СтрДанные.Синоним);
		
	КонецЦикла;
	
	СписокВыбора.Добавить("CRM_EmailРассылкиКонтактногоЛица","E-mail для рассылки");
	СписокВыбора.Добавить("CRM_МестоРожденияКонтактногоЛица","Место рождения");
	СписокВыбора.Добавить("МобильныйТелефонКонтактногоЛица","Мобильный телефон");
	СписокВыбора.Добавить("ТелефонКонтактногоЛица","Телефон");
	СписокВыбора.Добавить("EmailКонтактногоЛица","Электронная почта");
	
	ДопРеквизиты = ПолучитьТаблицуДопРеквизитов("КонтактныеЛицаПартнеров");
	
	Для Каждого СтрДоп Из ДопРеквизиты Цикл
		
		СписокВыбора.Добавить(СтрДоп.Имя,СтрДоп.Заголовок);
		
	КонецЦикла;
	
	СписокВыбора.Добавить("СоздатьДопРеквизит","Дополнительный реквизит");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоКонтактнымЛицам(Команда)
	ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные;
	
	Если ТекДанные.ИмяРеквизита = "CRM_EmailРассылкиКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "CRM_МестоРожденияКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "МобильныйТелефонКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "ТелефонКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "EmailКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей" Тогда
		
		ЗаполняемТаблицуПользователей(ВыбранноеЗначение.ПользователиСопоставлениеАдрес);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполняемТаблицуПользователей(Адрес)
	
	Объект.ПользователиСопоставление.Очистить();
	Объект.ПользователиСопоставление.Загрузить(ПолучитьИзВременногоХранилища(Адрес));
	Объект.ПользователиСопоставлены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиСопоставлениеСостояниеИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СделкиСопоставление.ТекущиеДанные;
	
	Если ТекДанные.Воронка Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.СделкиСопоставлениеСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Воронка",Истина);
		СтрОтбор.Вставить("Владелец",ТекДанные.Владелец);
		МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество() = 0 Тогда
			ТекстСообщения = "Необходимо указать воронку продаж для текущего состояния";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Родитель = МассивСтрок[0].СостояниеИнтереса;
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",Родитель);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(ПараметрВыбора);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы.СделкиСопоставлениеСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура СозданиеПВХНаСервере(НовыйОбъектПВХ,Структура)
	
	ЗаполнитьЗначенияСвойств(НовыйОбъектПВХ,Структура);
	
	НаименованиеНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйОбъектПВХ.НаборСвойств, "Наименование");
	НовоеНаименование = НовыйОбъектПВХ.Заголовок + " (" + НаименованиеНабора + ")";
	НовыйОбъектПВХ.Наименование = НовоеНаименование;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеПВХ(Структура)
	
	ФормаПВХ = ПолучитьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта");
	ДанныеФормы = ФормаПВХ.Объект;
	СозданиеПВХНаСервере(ДанныеФормы,Структура);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПВХ.Объект);
	ФормаПВХ.Записать();
	
КонецПроцедуры

// создаем дополнительные реквизиты для объектов
// Партнер
// КонтактныеЛицаПартнеров
// Интерес = Сделка
// Взаимодействие
// Имя доп. реквизита  ="Ид" + ТипОбъекта + "Амо"
&НаКлиенте
Процедура СоздаемДопРеквизитыДляВсехОбъектов()
	
	// Партнеры
	ИмяДляРазработчика = "ИдПартнерыАмо";
	Если ПолучитьПВХПоИмени(ИмяДляРазработчика) = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя",ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств",ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие"));
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен",Истина);
		Структура.Вставить("Виден",Ложь);
		
		СозданиеПВХ(Структура);
	КонецЕсли;
	// КонтактныеЛицаПартнеров
	ИмяДляРазработчика = "ИДКонтактныеЛицаПартнеровАмо";
	Если ПолучитьПВХПоИмени(ИмяДляРазработчика) = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя",ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств",ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛицаПартнеров"));
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен",Истина);
		Структура.Вставить("Виден",Ложь);
		
		СозданиеПВХ(Структура);
	КонецЕсли;
	
	// Интерес
	ИмяДляРазработчика = "ИДСделкаАмо";
	Если ПолучитьПВХПоИмени(ИмяДляРазработчика) = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя",ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств",ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_CRM_Интерес"));
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен",Истина);
		Структура.Вставить("Виден",Ложь);
		
		СозданиеПВХ(Структура);
	КонецЕсли;
	
	// Взаимодействие
	ИмяДляРазработчика = "ИДВзаимодействиеАмо";
	Если ПолучитьПВХПоИмени(ИмяДляРазработчика) = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя",ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств",ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_CRM_Взаимодействие"));
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен",Истина);
		Структура.Вставить("Виден",Ложь);
		
		СозданиеПВХ(Структура);
	КонецЕсли;
	
	Объект.ДопРеквизитыСозданы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПользователиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автозаполнение",Ложь);
	ПараметрыФормы.Вставить("Логин",Объект.Логин);
	ПараметрыФормы.Вставить("Домен",Объект.Домен);
	ПараметрыФормы.Вставить("Хеш",Объект.Хеш);
	ПараметрыФормы.Вставить("ПользователиСопоставлениеАдрес",ПолучитьТаблицуПользователейДляСопоставления());
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиДанныхПриИзменении(Элемент)
	
	Если Объект.РежимЗагрузкиДанных = 0 Тогда
		Элементы.ПерезаписыватьДанные.Видимость = Истина;
		Элементы.ДатаЗагрузки.Видимость = Ложь;
	Иначе
		Элементы.ПерезаписыватьДанные.Видимость = Ложь;
		Объект.ПерезаписыватьДанные = Ложь;
		Элементы.ДатаЗагрузки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоменПриИзменении(Элемент)
	
	Объект.Домен = СтрЗаменить(Объект.Домен,".amocrm.ru","");
	Объект.ПользователиСопоставлены = Ложь;
	
КонецПроцедуры

// Перед началом работы проходим табличные части сопоставления
// если есть строки со значением доп. реквизит
// создаем доп. реквизит для объекта и устанавливаем в табличную часть сопоставление
&НаКлиенте
Процедура ПроверкаИСозданиеДопРеквизитовДляОбъектов()
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИмяРеквизита","СоздатьДопРеквизит");
	
	// Партнеры
	
	НаборСвойств = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие");
	МассивНеСозданныхЭлементов = Объект.ПартнерыСопоставление.НайтиСтроки(СтрОтбор);
	Если МассивНеСозданныхЭлементов.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы из МассивНеСозданныхЭлементов Цикл
			СтруктураЗаполненияПВХ = Новый Структура;
			СтруктураЗаполненияПВХ.Вставить("Имя", "Партнеры" + СтрЗаменить(СтрокаТаблицы.ИмяАмо," ",""));
			СтруктураЗаполненияПВХ.Вставить("НаборСвойств", НаборСвойств);
			СтруктураЗаполненияПВХ.Вставить("Заголовок", СтрокаТаблицы.ИмяАмо);
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТипЗначений) Тогда
				Если СтрокаТаблицы.ТипЗначений = "Булево" Тогда
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
				ИначеЕсли СтрокаТаблицы.ТипЗначений = "СписокЗначений" Тогда
					СтруктураЗаполненияПВХ.Вставить("ДополнительныеЗначенияИспользуются", Истина);
				Иначе
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("100")));
				КонецЕсли;
			ИНаче
				СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("100")));
			КонецЕсли;
			СтруктураЗаполненияПВХ.Вставить("Доступен",Истина);
			СтруктураЗаполненияПВХ.Вставить("Виден",Истина);
			
			СозданиеПВХ(СтруктураЗаполненияПВХ);
			
			СтрокаТаблицы.ИмяРеквизита = СтруктураЗаполненияПВХ.Имя;
			СтрокаТаблицы.ДопРеквизит = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// КонтактныеЛицаПартнеров
	
	НаборСвойств = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛицаПартнеров");
	МассивНеСозданныхЭлементов = Объект.КонтактныеЛицаСопоставление.НайтиСтроки(СтрОтбор);
	Если МассивНеСозданныхЭлементов.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы из МассивНеСозданныхЭлементов Цикл
			СтруктураЗаполненияПВХ = Новый Структура;
			СтруктураЗаполненияПВХ.Вставить("Имя", "КонтактныеЛицаПартнеров" + СтрЗаменить(СтрокаТаблицы.ИмяАмо," ",""));
			СтруктураЗаполненияПВХ.Вставить("НаборСвойств", НаборСвойств);
			СтруктураЗаполненияПВХ.Вставить("Заголовок", СтрокаТаблицы.ИмяАмо);
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТипЗначений) Тогда
				Если СтрокаТаблицы.ТипЗначений = "Булево" Тогда
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
				ИначеЕсли СтрокаТаблицы.ТипЗначений = "СписокЗначений" Тогда
					СтруктураЗаполненияПВХ.Вставить("ДополнительныеЗначенияИспользуются", Истина);
				Иначе
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("100")));
				КонецЕсли;
			ИНаче
				СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("100")));
			КонецЕсли;
			СтруктураЗаполненияПВХ.Вставить("Доступен",Истина);
			СтруктураЗаполненияПВХ.Вставить("Виден",Истина);
			
			СозданиеПВХ(СтруктураЗаполненияПВХ);
			
			СтрокаТаблицы.ИмяРеквизита = СтруктураЗаполненияПВХ.Имя;
			СтрокаТаблицы.ДопРеквизит = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВоронкиИЭтапы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.СделкиСопоставление Цикл
		
		Если Стр.Воронка Тогда
			
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				
				Воронка = Стр.СостояниеИнтереса;
				Структура = новый Структура;
				Структура.Вставить("Наименование",Стр.ИмяАмо);
				Структура.Вставить("ЭлементСсылка",Стр.СостояниеИнтереса);
				СоздатьСценарийВоронкуВБазе(Структура);
				Воронка = Структура.ЭлементСсылка;
				Стр.СостояниеИнтереса = Воронка;
				ЭлементыВерхУровня = ДеревоЗначенийСделки.ПолучитьЭлементы();
				Для Каждого СтрЭл Из ЭлементыВерхУровня Цикл
					
					Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
						
						СтрЭл.СостояниеИнтереса = Воронка;
						ВоронкаДерева = СтрЭл;
					КонецЕсли;	
				КонецЦикла;
				
			Иначе
				Воронка = Стр.СостояниеИнтереса;
				ЭлементыВерхУровня = ДеревоЗначенийСделки.ПолучитьЭлементы();
				Для Каждого СтрЭл Из ЭлементыВерхУровня Цикл
					
					Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
						
						ВоронкаДерева = СтрЭл;
						
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				СостояниеИнтереса = ПолучитьЭтапВоронкиПоНаименованию(Воронка,Стр.ИмяАмо);
				
				Если СостояниеИнтереса = Неопределено ИЛИ СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка") Тогда
					
					Структура = новый Структура;
					Структура.Вставить("Наименование",Стр.ИмяАмо);
					Структура.Вставить("Родитель",Воронка);
					Структура.Вставить("Используется",Истина);
					Структура.Вставить("ОбязательноеЗаполнениеКлиента",Ложь);
					Структура.Вставить("ОбязательноеПланированиеАктивности",ПредопределенноеЗначение("Перечисление.CRM_ПланируемыеТипыАктивности.ПустаяСсылка"));
					Структура.Вставить("ЗавершатьЗапланированныеАктивности",ПредопределенноеЗначение("Перечисление.CRM_ЗавершаемыеТипыАктивности.ПустаяСсылка"));
					
					Структура.Вставить("ЭлементСсылка",Стр.СостояниеИнтереса);
					СоздатьСостояниеИнтересаВБазе(Структура);
					Стр.СостояниеИнтереса = Структура.ЭлементСсылка;
					ЭлементыВторогоУровня = ВоронкаДерева.ПолучитьЭлементы();
					Для Каждого СтрЭл Из ЭлементыВторогоУровня Цикл
						
						Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
							
							СтрЭл.СостояниеИнтереса = Структура.ЭлементСсылка;
						КонецЕсли;	
					КонецЦикла;
				Иначе
					Стр.СостояниеИнтереса = СостояниеИнтереса;
					ЭлементыВторогоУровня = ВоронкаДерева.ПолучитьЭлементы();
					Для Каждого СтрЭл Из ЭлементыВторогоУровня Цикл
						
						Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
							
							СтрЭл.СостояниеИнтереса = СостояниеИнтереса;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭтапВоронкиПоНаименованию(Родитель,Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|ГДЕ
	|	CRM_СостоянияИнтересов.Родитель = &Родитель
	|	И CRM_СостоянияИнтересов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросВыполнитьЗагрузкуЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьИнформациюПоСделкам(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВоронкиИЭтапыНажатие(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Если Объект.СделкиСопоставление.Количество() = 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросВыполнитьЗагрузкуЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Предварительно необходимо загрузить данные по сделкам из AmoCRM. Выполнить загрузку?';"), Режим, 0);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьВоронкиИЭтапы", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Для несопоставленных данных с воронками и этапами продаж " +
	"будут созданы соответствующие элементы в базе данных, продолжить?.';"), Режим, 0);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы,Структура)
	
	ЗаполнитьЗначенияСвойств(ДанныеФормы,Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСценарийВоронкуВБазе(Структура)
	
	ФормаПВХ = ПолучитьФорму("Справочник.CRM_СостоянияИнтересов.ФормаГруппы");
	ДанныеФормы = ФормаПВХ.Объект;
	СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы,Структура);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПВХ.Объект);
	ФормаПВХ.Записать();
	Структура.ЭлементСсылка = ФормаПВХ.Объект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСостояниеИнтересаВБазе(Структура)
	
	ФормаПВХ = ПолучитьФорму("Справочник.CRM_СостоянияИнтересов.ФормаОбъекта");
	ДанныеФормы = ФормаПВХ.Объект;
	СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы,Структура);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПВХ.Объект);
	ФормаПВХ.Записать();
	
	Структура.ЭлементСсылка = ФормаПВХ.Объект.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ПопыткаСопоставленияДанныхСРеквизитами(Таблица)
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("Имя");
	ТаблицаСопоставления.Колонки.Добавить("Синоним");
	Если Таблица = "Партнеры" Тогда
		
		ТаблицаРеквизитов = Метаданные.Справочники.Партнеры.Реквизиты;
		
		Для Каждого Стр Из ТаблицаРеквизитов Цикл
			
			СтрокаСопоставления = ТаблицаСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСопоставления,Стр);
			
		КонецЦикла;
		
		Для Каждого Стр Из Объект.ПартнерыСопоставление Цикл
			
			Если ЗначениеЗаполнено(Стр.ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаСопоставления.Найти(Стр.ИмяАмо,"Синоним");
			Если не НайденнаяСтрока = Неопределено Тогда
				Стр.ИмяРеквизита = НайденнаяСтрока.Имя;
				Стр.ПредставлениеРеквизита = НайденнаяСтрока.Синоним; 
			Иначе
				ИмяДопРеквизит = ПолучитьПВХПоИмени(таблица + СтрЗаменить(Стр.ИмяАмо," ",""));
				Если не ИмяДопРеквизит = Неопределено Тогда
					Стр.ИмяРеквизита = ИмяДопРеквизит.Имя;
					Стр.ДопРеквизит  = Истина;
					Стр.ПредставлениеРеквизита = ИмяДопРеквизит.Наименование;
					Если Строка(ИмяДопРеквизит.ТипЗначения) = "Строка" Тогда
						Стр.ТипЗначений = "Строка";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Булево" Тогда
						Стр.ТипЗначений = "Булево";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дополнительное значение" Тогда
						Стр.ТипЗначений = "СписокЗначений";
					КонецЕсли;
					
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаРеквизитов = Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты;
		
		Для Каждого Стр Из ТаблицаРеквизитов Цикл
			
			СтрокаСопоставления = ТаблицаСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСопоставления,Стр);
			
		КонецЦикла;
		
		Для Каждого Стр Из Объект.КонтактныеЛицаСопоставление Цикл
			
			Если ЗначениеЗаполнено(Стр.ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаСопоставления.Найти(Стр.ИмяАмо,"Синоним");
			Если не НайденнаяСтрока = Неопределено Тогда
				Стр.ИмяРеквизита = НайденнаяСтрока.Имя;
				Стр.ПредставлениеРеквизита = НайденнаяСтрока.Синоним; 
			Иначе
				ИмяДопРеквизит = ПолучитьПВХПоИмени(таблица + СтрЗаменить(Стр.ИмяАмо," ",""));
				Если не ИмяДопРеквизит = Неопределено Тогда
					Стр.ИмяРеквизита = ИмяДопРеквизит.Имя;
					Стр.ДопРеквизит  = Истина;
					Стр.ПредставлениеРеквизита = ИмяДопРеквизит.Наименование;
					Если Строка(ИмяДопРеквизит.ТипЗначения) = "Строка" Тогда
						Стр.ТипЗначений = "Строка";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Булево" Тогда
						Стр.ТипЗначений = "Булево";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дополнительное значение" Тогда
						Стр.ТипЗначений = "СписокЗначений";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПВХПоИмени(Имя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Имя КАК Имя,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Имя", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Имя", ВыборкаДетальныеЗаписи.Имя);
		СтруктураВозврата.Вставить("ТипЗначения", ВыборкаДетальныеЗаписи.ТипЗначения);
		СтруктураВозврата.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		Возврат СтруктураВозврата;
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КомпанииПриИзменении(Элемент)
	
	Если Объект.Компании И Объект.ПартнерыСопоставление.Количество() = 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаПартнеры", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед началом загрузки рекомендуется сопоставить реквизиты партнера с реквизитами AmoCRM ';"), Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПартнеры(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭлемент = Элементы.СтраницаПартнеры;
		ЗагрузитьИнформациюПоПартнеру(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриИзменении(Элемент)
	
	Если Объект.Компании И Объект.КонтактныеЛицаСопоставление.Количество() = 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаКонтактныеЛица", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед началом загрузки рекомендуется сопоставить реквизиты контактных лиц с реквизитами AmoCRM ';"), Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаКонтактныеЛица(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭлемент = Элементы.СтраницаКонтакныеЛица;
		ЗагрузитьИнформациюПоКонтактнымЛицам(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиПриИзменении(Элемент)
	
	Если Объект.Компании И Объект.СделкиСопоставление.Количество() = 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаСделки", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед началом загрузки рекомендуется сопоставить реквизиты интересов и воронок продаж с реквизитами AmoCRM ';"), Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСделки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭлемент = Элементы.СтраницаИнтересы;
		ЗагрузитьИнформациюПоСделкам(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчетПоСозданнымОбъектамНажатие(Элемент)
	
	ТабДокумент = ПоказатьОтчетПоСозданнымОбъектамНаСервере();
	ТабДокумент.Показать("Созданные/обновленные объекты");  
	
КонецПроцедуры

&НаСервере
Функция ПоказатьОтчетПоСозданнымОбъектамНаСервере()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("СтрокаДанных");
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	Для Каждого Стр ИЗ Объект.ЖурналСозданныхОбъектов Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаДанных.Параметры,Стр);
		ТабДокумент.Вывести(ОбластьСтрокаДанных);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьЛогЗагрузкиНажатие(Элемент)
	
	ПоказатьЗначение(,Объект.ЖурналСобытий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыСопоставлениеПредставлениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДАнные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Отбор", "Партнеры", "Партнеры");
	МассивРеквизитов = Новый Массив;
	Для каждого Строка из СопоставлениеРеквизитов Цикл
		Если Строка(Строка.ТипРеквизита) <> "Строка" Тогда
			МассивРеквизитов.Добавить(Строка.ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ИсключитьРеквизиты", МассивРеквизитов);
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаВыбораРеквизита", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыСопоставлениеПредставлениеРеквизитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнач = Элементы.ПартнерыСопоставление.ТекущиеДанные.ТипЗначений;
	ТекДанные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ДопРеквизит Тогда
		ТекДанные.ТипЗначений = ТипЗнач;
	КонецЕсли;
	Если Строка(ВыбранноеЗначение.ИмяРеквизита) = "Адрес" Тогда
		ТекДанные.ИмяРеквизита = "АдресПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Телефон" Тогда
		ТекДанные.ИмяРеквизита = "ТелефонПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Сайт компании" Тогда
		ТекДанные.ИмяРеквизита = "CRM_СайтПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Электронная почта" Тогда
		ТекДанные.ИмяРеквизита = "EmailПартнера";
	КонецЕсли;
	
	Если НЕ ТекДанные.ИмяРеквизита = "СоздатьДопРеквизит" Тогда
		
		СтрокаСопоставления = СопоставлениеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Отбор", "КонтактныеЛицаПартнеров", "КонтактныеЛицаПартнеров");
	МассивРеквизитов = Новый Массив;
	Для каждого Строка из СопоставлениеРеквизитов Цикл
		Если Строка(Строка.ТипРеквизита) <> "Строка" Тогда
			МассивРеквизитов.Добавить(Строка.ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ИсключитьРеквизиты", МассивРеквизитов);
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаВыбораРеквизита", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнач = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные.ТипЗначений;
	ТекДанные = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ДопРеквизит Тогда
		ТекДанные.ТипЗначений = ТипЗнач;
	КонецЕсли;
	
	Если Строка(ВыбранноеЗначение.ИмяРеквизита) = "Адрес" Тогда
		ТекДанные.ИмяРеквизита = "АдресПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Телефон" Тогда
		ТекДанные.ИмяРеквизита = "ТелефонКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Электронная почта" Тогда
		ТекДанные.ИмяРеквизита = "EmailКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "E-mail для рассылки" Тогда
		ТекДанные.ИмяРеквизита = "EmailКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Место рождения" Тогда
		ТекДанные.ИмяРеквизита = "CRM_МестоРожденияКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Мобильный телефон" Тогда
		ТекДанные.ИмяРеквизита = "МобильныйТелефонКонтактногоЛица";
	КонецЕсли;
	
	Если НЕ ТекДанные.ИмяРеквизита = "СоздатьДопРеквизит" Тогда
		
		СтрокаСопоставления = СопоставлениеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСделкиСостояниеИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоЗначенийСделки.ТекущиеДанные;
	
	Если ТекДанные.Воронка Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ДеревоЗначенийСделкиСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		ТекСтрокаИндекс = Элементы.ДеревоЗначенийСделки.ТекущаяСтрока;
		Родитель = ДеревоЗначенийСделки.НайтиПоИдентификатору(ТекСтрокаИндекс).ПолучитьРодителя();
		Если Не ЗначениеЗаполнено(Родитель.СостояниеИнтереса) Тогда
			ПоказатьПредупреждение(,"Не выбрана воронка продаж");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",Родитель.СостояниеИнтереса);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ДеревоЗначенийСделкиСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСделкиСостояниеИнтересаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанныеДерево = Элементы.ДеревоЗначенийСделки.ТекущиеДанные;
	
	ИдАмо = ТекДанныеДерево.ИДАмо;
	
	СтрОтбор = новый Структура;
	СтрОтбор.Вставить("ИдАмо",ИдАмо);
	
	МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
	
	Для Каждого Стр Из МассивСтрок Цикл
		Стр.СостояниеИнтереса = ВыбранноеЗначение;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначений()
	
	ДеревоСделки = Новый ДеревоЗначений;
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(Объект.СделкиСопоставление.Выгрузить());
	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ПЗ.ИсточникДанных.Колонки.Владелец.Измерение = Истина;
	ПЗ.ЗаполнитьНастройки();
	ПЗ.Выполнить();
	Дерево = ПЗ.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоСделки = Дерево.Скопировать();
	ДеревоСделки.Строки.Очистить();
	ТЗ = Объект.СделкиСопоставление.Выгрузить();
	Для Каждого Стр ИЗ ТЗ Цикл
		
		Если Стр.Воронка Тогда
			
			НоваяСтрока = ДеревоСделки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				Воронка = ПолучитьЭтапВоронкиПоНаименованию(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка(),НоваяСтрока.ИмяАмо);
				НоваяСтрока.СостояниеИнтереса = Воронка;
			КонецЕсли;
		Иначе
			
			ВтораяСтрока = НоваяСтрока.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВтораяСтрока,Стр);
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				СостояниеИнтереса = ПолучитьЭтапВоронкиПоНаименованию(Воронка,НоваяСтрока.ИмяАмо);
				ВтораяСтрока.СостояниеИнтереса = СостояниеИнтереса;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоСделки,"ДеревоЗначенийСделки");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользователейИзAmoCRM(Команда)
	
	Если Объект.ПользователиСопоставление.Количество() > 0 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПользователи", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть не пустая. Очистить?'"), Режим, 0);
	Иначе	
		
		ЗаполнитьПользователейДлясопоставления();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПользователи(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПользователиСопоставление.Очистить();
	КонецЕсли;
	
	ЗаполнитьПользователейДлясопоставления();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейДлясопоставления()
	
	Если Не Объект.ПользователиСопоставлены ИЛИ Объект.ПользователиСопоставление.Количество() = 0 Тогда
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v2/account";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,10,Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
		СопоставитьПользователейПоЭлектронномуАдресу();
		
		Объект.ПользователиСопоставлены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьПользователейПоЭлектронномуАдресу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПользователей.ИдАмо КАК ИдАмо,
	|	ТаблицаПользователей.ИмяАмо КАК ИмяАмо,
	|	ТаблицаПользователей.ЭлАдресПользователя КАК ЭлАдресПользователя,
	|	ТаблицаПользователей.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВтПользователи
	|ИЗ
	|	&ТаблицаПользователей КАК ТаблицаПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПользователиКонтактнаяИнформация.Представление КАК ПредставлениеАдреса
	|ПОМЕСТИТЬ ПользователиБазы
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = &Тип
	|	И ПользователиКонтактнаяИнформация.Вид = &Вид
	|	И ПользователиКонтактнаяИнформация.Представление В
	|			(ВЫБРАТЬ
	|				ВтПользователи.ЭлАдресПользователя
	|			ИЗ
	|				ВтПользователи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиБазы.Ссылка КАК Пользователь,
	|	ВтПользователи.ИдАмо КАК ИдАмо,
	|	ВтПользователи.ИмяАмо КАК ИмяАмо,
	|	ВтПользователи.ЭлАдресПользователя КАК ЭлАдресПользователя
	|ИЗ
	|	ВтПользователи КАК ВтПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПользователиБазы КАК ПользователиБазы
	|		ПО ПользователиБазы.ПредставлениеАдреса = ВтПользователи.ЭлАдресПользователя";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТаблицаПользователей", Объект.ПользователиСопоставление.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Объект.ПользователиСопоставление.Загрузить(РезультатЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомлениеНаПочтуПриИзменении(Элемент)
	Отказ = ОтправитьУведомлениеНаПочтуПриИзмененииНаСервере();
	
	Если НЕ Отказ Тогда
		ПоказатьПредупреждение(,"Системная учетная запись для отправки почты не настроена. Для настройки перейдите в раздел ""Настройки"" - ""Учетные записи электронной почты""");
		ОтправитьУведомлениеНаПочту = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьУведомлениеНаПочтуПриИзмененииНаСервере()
	
	УчЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	Возврат РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(УчЗапись,Истина);
		
КонецФункции

&НаКлиенте
Процедура СоздатьНедостающихПользователей(Команда)
	
	Для Каждого Стр Из Объект.ПользователиСопоставление Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Пользователь) Тогда
			Пользователь = СоздатьПольователяВБазе(Стр.ИмяАмо,Стр.ЭлАдресПользователя);
			Стр.Пользователь = Пользователь;
			Если ОтправитьУведомлениеНаПочту Тогда
				ОтправитьПисьмоНаПочтуНовомуПользователю(Стр);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПольователяВБазе(Имя,АдресПочтыПользователя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	
	ПользовательИБ.имя = Имя;
	
	ПользовательИБ.ПолноеИмя = Имя;
	
	ПользовательИБ.АутентификацияСтандартная = ИСТИНА;
	
	ПользовательИБ.Пароль = "";
	
	ПользовательИБ.записать();
	
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ПользовательИБ.УникальныйИдентификатор);
	
	Если Пользователь.Наименование = "" Тогда
		
		ПользовательОб = Справочники.Пользователи.СоздатьЭлемент();
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		
		ЗаполнитьЗначенияСвойств(ОписаниеПользователяИБ,ПользовательИБ);
		
		ОписаниеПользователяИБ.УникальныйИдентификатор =  ПользовательИБ.УникальныйИдентификатор;
		
		ПользовательОб.Наименование = ОписаниеПользователяИБ.ПолноеИмя; 
		
		ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(АдресПочтыПользователя, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПользовательОб, ЗначенияПолей, Справочники.ВидыКонтактнойИнформации.EmailПользователя,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ОписаниеПользователяИБ.Вставить("Действие","Записать");
		
		ПользовательОб.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ",ОписаниеПользователяИБ);
		
		ПользовательОб.записать();
		
	КонецЕсли;
	
	ГруппаДоступа = Справочники.ГруппыДоступа.НайтиПоНаименованию("Менеджеры по продажам");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппаДоступаОбъект = ГруппаДоступа.ПолучитьОбъект();
	НовСтр = ГруппаДоступаОбъект.Пользователи.Добавить();
	НовСтр.Пользователь = ПользовательОб.Ссылка;
	
	Попытка
		ГруппаДоступаОбъект.Записать();
	Исключение
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПользовательОб.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПисьмоНаПочтуНовомуПользователю(Стр)
	
	ТекстСообщения = "Здравствуйте, " + Стр.ИмяАмо + "!" 
	+ Символы.ПС + ПользователиКлиентСервер.ТекущийПользователь() + " добавил Вас в систему 1C:CRM." 
	+ "Чтобы перейти в систему перейдите по ссылке: " + Символы.ПС + ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Структура = Новый Структура;
	Структура.Вставить("Кому",Стр.ЭлАдресПользователя);
	
	МассивПолучателей = новый Массив;
	СтруктураПолуч = новый Структура;
	СтруктураПолуч.Вставить("Адрес",Стр.ЭлАдресПользователя);
	СтруктураПолуч.Вставить("Представление","МММ");
	
	Структура.Вставить("ПолучателиСообщения",МассивПолучателей);
	
	Структура.Вставить("Тема","Вас добавили в систему 1C:CRM");
	
	Структура.Вставить("Тело",ТекстСообщения);
	
	Структура.Вставить("ИдентификаторСообщения","");
	
	Структура.Вставить("ТипТекста", ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"));

	ИДСообщения = ОтправитьПисьмоПользователюНаСервере(Структура);
	 
КонецПроцедуры

&НаСервере
Функция ОтправитьПисьмоПользователюНаСервере(Структура)
	
	УчЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	ИдСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчЗапись,Структура);

	Возврат ИдСообщения;
	
КонецФункции

#КонецОбласти