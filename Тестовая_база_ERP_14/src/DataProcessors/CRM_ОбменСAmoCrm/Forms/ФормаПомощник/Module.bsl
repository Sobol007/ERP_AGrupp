&НаСервере
Перем ОбъектДанных;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	ОбъектДанных.ВосстановитьНастройки();
	
	ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
	
	ЗаполнитьДеревоЗначений();
	
	УстановитьУсловноеОформлениеЭлементов();
	
	СформироватьСписокЗначенийПоРеквизитамПартнера();
	
	СформироватьСписокЗначенийПоРеквизитамКонтактныеЛица();
	
	УстановитьВидимостьЭлементовИСтраниц();
	
	КонфигурацияДанныхУТ = ОбъектДанных.ОпределитьКонфигурацию();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимЗагрузкиДанныхПриИзменении(Истина);
	
	ЗапуститьВФоне = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовИСтраниц()
	
	// помошник продаж начинается с основного 
	// скрываем видимость всех элементов 
	Элементы.СтраницаПользователи.Видимость = Ложь;
	Элементы.СтраницаПартнеры.Видимость = Ложь;
	Элементы.СтраницаКонтакныеЛица.Видимость = Ложь;
	Элементы.СтраницаИнтересы.Видимость = Ложь;
	Элементы.СтраницаЗагрузкаДанных.Видимость = Ложь;
	Элементы.СтраницаЖурнал.Видимость = Ложь;
	Элементы.СтраницаДополнительныеДанные.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЭлементов()
	
	Если НЕ Объект.ПодключениеСуществует Тогда
		Элементы.ДекорацияИнформацияОПодключении.Заголовок = "Подключение отсутствует, проверьте данные";
		Элементы.ДекорацияИнформацияОПодключении.ЦветТекста = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	Иначе
		Элементы.ДекорацияИнформацияОПодключении.Заголовок = "Подключение выполнено. Можно перейти к загрузке данных";
		Элементы.ДекорацияИнформацияОПодключении.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	ОбъектДанных.СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не Объект.ПомощникПройден Тогда
		Объект.ПользователиСопоставление.Очистить();
		Объект.КонтактныеЛицаСопоставление.Очистить();
		Объект.ПартнерыСопоставление.Очистить();
		Объект.ПользователиСопоставлены = Ложь;
		Объект.СделкиСопоставление.Очистить();
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы Тогда		
		
		СохранитьНастройки();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКнопок

// Дополнительный параметр для загрузки данных
// 0 = Партнеры
// 1 = КонтактныеЛицаПартнеров
&НаСервере
Функция ЗагрузкаДанныхНаСервере(ДанныеОбработки,ИмяМетода,СтруктураПараметров,ВнешняяОбработка,ФайлКУдалению)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", СтруктураПараметров);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", ВнешняяОбработка);
	ПараметрыЗадания.Вставить("Журнал", Объект.ЖурналСобытий);
	Если ВнешняяОбработка Тогда // внешняя обработка
		ИмяОбработки=ПолучитьИмяВременногоФайла("epf");
		ДанныеОбработки.Записать(ИмяОбработки);
		ФайлКУдалению=ИмяОбработки;
		ПараметрыЗадания.Вставить("ИмяОбработки", ИмяОбработки);
	Иначе
		ПараметрыЗадания.Вставить("ИмяОбработки", РеквизитФормыВЗначение("Объект").Метаданные().Имя);
	КонецЕсли;
	ПараметрыВыполнения=ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки", ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки", ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ЗагрузкаДанныхНаСервереВФорме()
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	// данные загружаются последовательно
	// ----------------------------------------
	// Компании - Партнеры
	Если Объект.Компании Тогда
		
		Ресурс = "/api/v2/companies";
		
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,0,Ложь);
		
	КонецЕсли;
	
	// Контакты - Партнеры - контактные лица
	Если Объект.Контакты Тогда
		
		Ресурс = "/api/v2/contacts";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,1,Ложь);
		
	КонецЕсли;
	
	Если Объект.Сделки Тогда
		
		Ресурс = "/api/v2/leads";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,2,Ложь);
		
	КонецЕсли;
	
	Если Объект.Задачи Тогда
		
		Ресурс = "/api/v2/tasks";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,3,Ложь);
		
	КонецЕсли;
	
	Если Объект.События Тогда
		
		Ресурс = "/api/v2/notes";
		// примечания к сделкам
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,4,Ложь);
		// примечания к компаниям
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,5,Ложь);
		// примечания к контактам
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,6,Ложь);
		
	КонецЕсли;
	
	ОбъектДанных.ПередатьДанныеДляЖурнала();
	ЗаполнитьЖурналДанными();
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхВФоновомРежиме()
	
	ВнешняяОбработка = ЭтоВнешняяОбработка();	
	Если ВнешняяОбработка Тогда
		ДанныеОбработки=Новый ДвоичныеДанные(ИмяОбработки());
	Иначе
		ДанныеОбработки=Неопределено;
	КонецЕсли;
	ФайлКУдалению="";
	РезультатФоновогоЗадания = ЗагрузкаДанныхНаСервере(ДанныеОбработки,"ЗапуститьВФонеЗагрузкуДанных",Новый Структура("Журнал",Объект.ЖурналСобытий),ВнешняяОбработка,ФайлКУдалению);
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ТекстСообщения = "Загрузка данных из амо...";
	НастройкиОжидания.ВыводитьСообщения = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.Интервал = 1;
	ОбработкаРезультат = Новый ОписаниеОповещения("ОбработкаРезультата",ЭтотОбъект);
	ОповещениеПользователя = Новый ОписаниеОповещения("ОповещениеФоновогоЗадания",ЭтотОбъект,Новый Структура("Обработка,ФайлКУдалению",ОбработкаРезультат,ФайлКУдалению));
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания,ОповещениеПользователя,НастройкиОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеФоновогоЗадания(Задание,ДопПараметры) Экспорт
	Если Задание.Статус="Выполнено" Тогда
		РезультатВыполнения=ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		ВыполнитьОбработкуОповещения(ДопПараметры.Обработка,РезультатВыполнения);
	ИначеЕсли Задание.Статус="Ошибка" Тогда
		Сообщить(Задание.ПодробноеПредставлениеОшибки);
	Иначе
		Сообщить("Проблема с выполнением");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультата(РезультатВыполнения,ДопПараметры) Экспорт
	
	Если НЕ ЭтотОбъект.ИмяФормы = "Обработка.CRM_ОбменСAmoCrm.Форма.ФормаПомощник" Тогда
		
		Оповещение = новый ОписаниеОповещения("ПослеВыполненияЗагрузки",ЭтотОбъект);
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Загрузка данных завершена. Открыть лог загрузки?';"),Режим,10,КодВозвратаДиалога.Отмена,,КодВозвратаДиалога.Отмена);
		
	Иначе
		ЗаполнитьЖурналДанными();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайл(ИмяФайла)
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИмяОбработки()
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции

&НаСервере
Функция ЭтоВнешняяОбработка()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	МетаОбработкаИмя=ОбработкаОбъект.Метаданные().Имя;
	Если Метаданные.Обработки.Найти(МетаОбработкаИмя)<>Неопределено
		И ТипЗнч(ОбработкаОбъект)=Тип("ОбработкаОбъект."+МетаОбработкаИмя) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДанных(Команда)
	
	Отказ = Истина;
	
	ПроверкаИСозданиеДопРеквизитовДляОбъектов();
	// Перед загрузкой создаем все дополнительные реквизиты, т.к. нужно записывать из формы
	// проверям созданы ли ИД для объектов
	СоздаемДопРеквизитыДляВсехОбъектов();
	
	Объект.ЖурналСобытий = "";
	
	СохранитьНастройки();
	
	Если НЕ Объект.ПользователиСопоставлены Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед началом загрузки данных из вашей amoCRM рекомендуется сопоставить пользователей amoCRM "
		+ "с пользователями текущей базы(при необходимости создать пользователей и назначить необходимые права)."
		+ "После сопоставления данных пользователи будут использоваться в документах, справочниках и т.д.';"), Режим, 0);
	Иначе
		#Если ВебКлиент Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВЕб", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Процедура загрузки может занять длительное время, продолжить?';"), Режим, 0);
			
		#Иначе
			
			Если ЗапуститьВФоне Тогда
				ВыполнитьЗагрузкуДанныхВФоновомРежиме();
			Иначе 
				ТекстСообщения = "Начало загрузки данных: " + ТекущаяДата();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЗагрузкаДанныхНаСервереВФорме();
				ТекстСообщения = "Данные успешно загружены: " + ТекущаяДата();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
	Если ИмяФормы = "Обработка.CRM_ОбменСAmoCrm.Форма.ФормаПомощник" Тогда
		Элементы.СтраницаЖурнал.Видимость = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЖурнал;
		Элементы.ФормаПереходДалее.Заголовок = "Готово";
		ЗаполнитьЖурналДанными();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВЕб(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекстСообщения = "Начало загрузки данных: " + ТекущаяДата();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗагрузкаДанныхНаСервереВФорме();
		ТекстСообщения = "Данные успешно загружены: " + ТекущаяДата();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияЗагрузки(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ЗаполнитьЖурналДанными();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЖурналСобытий",объект.ЖурналСобытий);
		ПараметрыФормы.Вставить("ЖурналСозданныхОбъектов",ПолучитьТаблицуЖурнала());
		ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаЖурнал",ПараметрыФормы,ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЖурналДанными()
	
	КлючНастроек = "Обработка.CRM_ОбменСAmoCrm.ЖурналДанных";
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ВыгрузкаНоменклатуры", КлючНастроек,,,Строка(ПользователиКлиентСервер.ТекущийПользователь()));
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		
		ЗначениеИзНастройкиЖУрнал	= ЗначениеНастроек.Получить("ЖурналСозданныхОбъектов");
		
		Объект.ЖурналСобытий = ЗначениеНастроек.Получить("ЖурналСобытий");
		
		Если ТипЗнч(ЗначениеИзНастройкиЖУрнал) = Тип("ТаблицаЗначений") Тогда
			Объект.ЖурналСозданныхОбъектов.Загрузить(ЗначениеИзНастройкиЖУрнал);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПользователейДляСопоставления()
	
	Возврат	ПоместитьВоВременноеХранилище(Объект.ПользователиСопоставление.Выгрузить(),Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЖурнала()
	
	Если НЕ Объект.ПользователиСопоставлены Тогда
		Объект.ПользователиСопоставление.Очистить();
	КонецЕсли;
	
	Возврат	ПоместитьВоВременноеХранилище(Объект.ЖурналСозданныхОбъектов.Выгрузить(),Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ПользователиСопоставлены = Ложь;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Автозаполнение",Истина);
		ПараметрыФормы.Вставить("Логин",Объект.Логин);
		ПараметрыФормы.Вставить("Домен",Объект.Домен);
		ПараметрыФормы.Вставить("Хеш",Объект.Хеш);
		ПараметрыФормы.Вставить("ПользователиСопоставлениеАдрес",ПолучитьТаблицуПользователейДляСопоставления());
		ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей",ПараметрыФормы,ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоПартнеру(Команда)
	ЗагрузитьИнформациюПоПартнеруНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоПартнеруНаСервере()
	
	Если Объект.ПартнерыСопоставление.Количество() = 0 Тогда
		Объект.ПартнерыСопоставление.Очистить();
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v2/account";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,0,Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
		
		ПопыткаСопоставленияДанныхСРеквизитами("Партнеры");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначений()
	
	ДеревоСделки = Новый ДеревоЗначений;
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(Объект.СделкиСопоставление.Выгрузить()); // передаем ТЗ
	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ПЗ.ИсточникДанных.Колонки.Владелец.Измерение = Истина; // по этой колонке идет группировка
	ПЗ.ЗаполнитьНастройки();
	ПЗ.Выполнить();
	Дерево = ПЗ.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоСделки = Дерево.Скопировать();
	ДеревоСделки.Строки.Очистить();
	ТЗ = Объект.СделкиСопоставление.Выгрузить();
	Для Каждого Стр ИЗ ТЗ Цикл
		
		Если Стр.Воронка Тогда
			
			НоваяСтрока = ДеревоСделки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				Воронка = ПолучитьЭтапВоронкиПоНаименованию(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка(),НоваяСтрока.ИмяАмо);
				НоваяСтрока.СостояниеИнтереса = Воронка;
				МассивЭл = Объект.СделкиСопоставление.НАйтиСтроки(Новый Структура("НомерСтроки",Стр.НомерСтроки));
				Попытка
					МассивЭл[0].СостояниеИнтереса = Воронка;
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе
			
			ВтораяСтрока = НоваяСтрока.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВтораяСтрока,Стр);
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				СостояниеИнтереса = ПолучитьЭтапВоронкиПоНаименованию(Воронка,ВтораяСтрока.ИмяАмо);
				ВтораяСтрока.СостояниеИнтереса = СостояниеИнтереса;
				МассивЭл = Объект.СделкиСопоставление.НАйтиСтроки(Новый Структура("НомерСтроки",Стр.НомерСтроки));
				Попытка
					МассивЭл[0].СостояниеИнтереса = СостояниеИнтереса;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоСделки,"ДеревоЗначенийСделки");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоСделкамНаСервере()
	
	Если Объект.СделкиСопоставление.Количество() = 0 ИЛИ ДеревоЗначенийСделки.ПолучитьЭлементы().Количество() = 0 Тогда
		
		Объект.СделкиСопоставление.Очистить();
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v2/pipelines";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,2,Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
		
	КонецЕсли;
	
	ЗаполнитьДеревоЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоСделкам(Команда)
	ЗагрузитьИнформациюПоСделкамНаСервере();
	РазвернутьВсеСтрокиДерева();
	Объект.Организация = получитьПервуюОрганизацию();
КонецПроцедуры

&НаСервере
Функция получитьПервуюОрганизацию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ первые 1
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева()
	
	тЭлементы = ДеревоЗначенийСделки.ПолучитьЭлементы();
	Для Каждого тСтр Из тЭлементы Цикл
		Элементы.ДеревоЗначенийСделки.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокЗначенийПоРеквизитамПартнера()
	
	СписокВыбора = Элементы.ПартнерыСопоставлениеИмяРеквизита.СписокВыбора;
	СписокВыбораФизЛицо = Элементы.КонтактныеЛицаСопоставлениеИмяРеквизита.СписокВыбора;
	
	
	ПартнерыМетаданные = Метаданные.Справочники.Партнеры.Реквизиты;
	
	Для Каждого СтрДанные Из ПартнерыМетаданные Цикл
		
		СписокВыбора.Добавить(СтрДанные.Имя,СтрДанные.Синоним);
		СписокВыбораФизЛицо.Добавить(СтрДанные.Имя,СтрДанные.Синоним);
		
	КонецЦикла;
	
	// добавляем контактную информацию
	СписокВыбора.Добавить("АдресПартнера","Адрес");
	СписокВыбораФизЛицо.Добавить("АдресПартнера","Адрес");
	СписокВыбора.Добавить("CRM_СайтПартнера","Сайт");
	СписокВыбораФизЛицо.Добавить("CRM_СайтПартнера","Сайт");
	СписокВыбора.Добавить("ТелефонПартнера","Телефон");
	СписокВыбораФизЛицо.Добавить("ТелефонПартнера","Телефон");
	СписокВыбора.Добавить("EmailПартнера","Электронная почта");
	СписокВыбораФизЛицо.Добавить("EmailПартнера","Электронная почта");
	
	// дополнительные реквизиты
	ДопРеквизиты = ПолучитьТаблицуДопРеквизитов("Партнеры");
	
	Для Каждого СтрДоп Из ДопРеквизиты Цикл
		
		СписокВыбора.Добавить(СтрДоп.Имя,СтрДоп.Заголовок);
		СписокВыбораФизЛицо.Добавить(СтрДоп.Имя,СтрДоп.Заголовок);
		
	КонецЦикла;
	
	// создаем в списке выбора доп. реквизит
	// при его выборе, перед началом загрузки для каждого объекта будет создан доп. реквизит
	СписокВыбора.Добавить("СоздатьДопРеквизит","Дополнительный реквизит");
	СписокВыбораФизЛицо.Добавить("СоздатьДопРеквизит","Дополнительный реквизит");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДопРеквизитов(Таблица)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Различные
	|	ДопРеквизиты.Свойство.Наименование КАК Заголовок,
	|	ДопРеквизиты.Свойство.Имя КАК Имя
	|ИЗ
	|	Справочник." + Таблица + ".ДополнительныеРеквизиты КАК ДопРеквизиты
	|ГДЕ
	|	ДопРеквизиты.Свойство <> &Свойство";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ИД" + Таблица + "Амо"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПартнерыСопоставлениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	
	Если ТекДанные.ИмяРеквизита = "ТелефонПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "АдресПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "CRM_СайтПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "EmailПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	КонецЕсли;
	
КонецПроцедуры

// Проверка соединения с сайтом
//
&НаКлиенте
Процедура ПроверкаПодключения(Команда)
	
	ВыполнитьПроверкуПодключенияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуПодключенияНаСервере()
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	Объект.ПодключениеСуществует = ОбъектДанных.ВыполнитьПроверкуПодключения();
	УстановитьУсловноеОформлениеЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере()
	
	Если Объект.КонтактныеЛицаСопоставление.Количество() = 0 Тогда
		
		Объект.КонтактныеЛицаСопоставление.Очистить();
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v2/account";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,1,Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
		
		ПопыткаСопоставленияДанныхСРеквизитами("КонтактныеЛицаПартнеров");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокЗначенийПоРеквизитамКонтактныеЛица()
	
	СписокВыбора = Элементы.КонтактныеЛицаСопоставлениеИмяРеквизита.СписокВыбора;
	
	КонтактныеЛицаПартнеровМетаданные = Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты;
	
	Для Каждого СтрДанные Из КонтактныеЛицаПартнеровМетаданные Цикл
		
		СписокВыбора.Добавить(СтрДанные.Имя,СтрДанные.Синоним);
		
	КонецЦикла;
	
	// добавляем контактную информацию
	СписокВыбора.Добавить("CRM_EmailРассылкиКонтактногоЛица","E-mail для рассылки");
	СписокВыбора.Добавить("CRM_МестоРожденияКонтактногоЛица","Место рождения");
	СписокВыбора.Добавить("МобильныйТелефонКонтактногоЛица","Мобильный телефон");
	СписокВыбора.Добавить("ТелефонКонтактногоЛица","Телефон");
	СписокВыбора.Добавить("EmailКонтактногоЛица","Электронная почта");
	Если КонфигурацияДанныхУТ Тогда
		СписокВыбора.Добавить("CRM_ИдентификаторViberКонтактногоЛица","Viber");
		СписокВыбора.Добавить("CRM_ИдентификаторВКонтактеКонтактногоЛица","ВКонтакте");
	КонецЕсли;	
	// дополнительные реквизиты
	ДопРеквизиты = ПолучитьТаблицуДопРеквизитов("КонтактныеЛицаПартнеров");
	
	Для Каждого СтрДоп Из ДопРеквизиты Цикл
		
		СписокВыбора.Добавить(СтрДоп.Имя,СтрДоп.Заголовок);
		
	КонецЦикла;
	
	СписокВыбора.Добавить("СоздатьДопРеквизит","Дополнительный реквизит");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоКонтактнымЛицам(Команда)
	ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные;
	
	Если ТекДанные.ИмяРеквизита = "CRM_EmailРассылкиКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "CRM_МестоРожденияКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "МобильныйТелефонКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "ТелефонКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "EmailКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	КонецЕсли;
	
	Если КонфигурацияДанныхУТ Тогда
		Если  ТекДанные.ИмяРеквизита = "CRM_ИдентификаторViberКонтактногоЛица" Тогда
			ТекДанные.КонтактнаяИнформация = Истина;
			ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое");
		ИначеЕсли  ТекДанные.ИмяРеквизита = "CRM_ИдентификаторВКонтактеКонтактногоЛица" Тогда
			ТекДанные.КонтактнаяИнформация = Истина;
			ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей" Тогда
		
		ЗаполняемТаблицуПользователей(ВыбранноеЗначение.ПользователиСопоставлениеАдрес);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаВыбора" Тогда
		
		Объект.УчетнаяЗапись = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполняемТаблицуПользователей(Адрес)
	
	Объект.ПользователиСопоставление.Очистить();
	Объект.ПользователиСопоставление.Загрузить(ПолучитьИзВременногоХранилища(Адрес));
	Объект.ПользователиСопоставлены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиСопоставлениеСостояниеИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СделкиСопоставление.ТекущиеДанные;
	
	Если ТекДанные.Воронка Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.СделкиСопоставлениеСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Воронка",Истина);
		СтрОтбор.Вставить("Владелец",ТекДанные.Владелец);
		МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество() = 0 Тогда
			ТекстСообщения = "Необходимо указать воронку продаж для текущего состояния";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Родитель = МассивСтрок[0].СостояниеИнтереса;
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",Родитель);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(ПараметрВыбора);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы.СделкиСопоставлениеСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СозданиеПВХНаСервере(НовыйОбъектПВХ,Структура)
	
	ЗаполнитьЗначенияСвойств(НовыйОбъектПВХ,Структура);
	
	НаименованиеНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйОбъектПВХ.НаборСвойств, "Наименование");
	НовоеНаименование = НовыйОбъектПВХ.Заголовок + " (" + НаименованиеНабора + ")";
	НовыйОбъектПВХ.Наименование = НовоеНаименование;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеПВХ(Структура)
	
	ФормаПВХ = ПолучитьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта");
	ДанныеФормы = ФормаПВХ.Объект;
	СозданиеПВХНаСервере(ДанныеФормы,Структура);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПВХ.Объект);
	ФормаПВХ.Записать();
	
КонецПроцедуры

// создаем дополнительные реквизиты для объектов
// Партнер
// КонтактныеЛицаПартнеров
// Интерес = Сделка
// Взаимодействие
// Имя доп. реквизита  ="Ид" + ТипОбъекта + "Амо"
&НаКлиенте
Процедура СоздаемДопРеквизитыДляВсехОбъектов()
	
	// Партнеры
	ИмяДляРазработчика = "ИдПартнерыАмо";
	Если ПолучитьПВХПоИмени(ИмяДляРазработчика) = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя",ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств",ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие"));
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен",Истина);
		Структура.Вставить("Виден",Ложь);
		
		СозданиеПВХ(Структура);
	КонецЕсли;
	// КонтактныеЛицаПартнеров
	ИмяДляРазработчика = "ИДКонтактныеЛицаПартнеровАмо";
	Если ПолучитьПВХПоИмени(ИмяДляРазработчика) = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя",ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств",ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛицаПартнеров"));
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен",Истина);
		Структура.Вставить("Виден",Ложь);
		
		СозданиеПВХ(Структура);
	КонецЕсли;
	
	// Интерес
	ИмяДляРазработчика = "ИДСделкаАмо";
	Если ПолучитьПВХПоИмени(ИмяДляРазработчика) = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя",ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств",ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_CRM_Интерес"));
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен",Истина);
		Структура.Вставить("Виден",Ложь);
		
		СозданиеПВХ(Структура);
	КонецЕсли;
	
	// Взаимодействие
	ИмяДляРазработчика = "ИДВзаимодействиеАмо";
	Если ПолучитьПВХПоИмени(ИмяДляРазработчика) = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя",ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств",ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_CRM_Взаимодействие"));
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен",Истина);
		Структура.Вставить("Виден",Ложь);
		
		СозданиеПВХ(Структура);
	КонецЕсли;
	
	Объект.ДопРеквизитыСозданы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПользователиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автозаполнение",Ложь);
	ПараметрыФормы.Вставить("Логин",Объект.Логин);
	ПараметрыФормы.Вставить("Домен",Объект.Домен);
	ПараметрыФормы.Вставить("Хеш",Объект.Хеш);
	ПараметрыФормы.Вставить("ПользователиСопоставлениеАдрес",ПолучитьТаблицуПользователейДляСопоставления());
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиДанныхПриИзменении(Элемент)
	
	Если Объект.РежимЗагрузкиДанных = 0 Тогда
		Элементы.ПерезаписыватьДанные.Видимость = Истина;
		Элементы.ДатаЗагрузки.Видимость = Ложь;
	Иначе
		Элементы.ПерезаписыватьДанные.Видимость = Истина;
		Объект.ПерезаписыватьДанные = Истина;
		Элементы.ДатаЗагрузки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоменПриИзменении(Элемент)
	
	Объект.ПользователиСопоставлены = Ложь;
	
КонецПроцедуры

// Перед началом работы проходим табличные части сопоставления
// если есть строки со значением доп. реквизит
// создаем доп. реквизит для объекта и устанавливаем в табличную часть сопоставление
&НаКлиенте
Процедура ПроверкаИСозданиеДопРеквизитовДляОбъектов()
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИмяРеквизита","СоздатьДопРеквизит");
	
	// Партнеры
	
	НаборСвойств = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие");
	МассивНеСозданныхЭлементов = Объект.ПартнерыСопоставление.НайтиСтроки(СтрОтбор);
	Если МассивНеСозданныхЭлементов.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы из МассивНеСозданныхЭлементов Цикл
			СтруктураЗаполненияПВХ = Новый Структура;
			СтруктураЗаполненияПВХ.Вставить("Имя", "Партнеры" + СтрЗаменить(СтрокаТаблицы.ИмяАмо," ",""));
			СтруктураЗаполненияПВХ.Вставить("НаборСвойств", НаборСвойств);
			СтруктураЗаполненияПВХ.Вставить("Заголовок", СтрокаТаблицы.ИмяАмо);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТипЗначений) Тогда
				Если СтрокаТаблицы.ТипЗначений = "Булево" Тогда
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
				ИначеЕсли СтрокаТаблицы.ТипЗначений = "СписокЗначений" Тогда
					СтруктураЗаполненияПВХ.Вставить("ДополнительныеЗначенияИспользуются", Истина);
				Иначе
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("100")));
				КонецЕсли;
			ИНаче
				СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("100")));
			КонецЕсли;
			
			СтруктураЗаполненияПВХ.Вставить("Доступен",Истина);
			СтруктураЗаполненияПВХ.Вставить("Виден",Истина);
			
			СозданиеПВХ(СтруктураЗаполненияПВХ);
			
			СтрокаТаблицы.ИмяРеквизита = СтруктураЗаполненияПВХ.Имя;
			СтрокаТаблицы.ПредставлениеРеквизита = СтруктураЗаполненияПВХ.Заголовок;
			СтрокаТаблицы.ДопРеквизит = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// КонтактныеЛицаПартнеров
	
	НаборСвойств = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛицаПартнеров");
	МассивНеСозданныхЭлементов = Объект.КонтактныеЛицаСопоставление.НайтиСтроки(СтрОтбор);
	Если МассивНеСозданныхЭлементов.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы из МассивНеСозданныхЭлементов Цикл
			СтруктураЗаполненияПВХ = Новый Структура;
			СтруктураЗаполненияПВХ.Вставить("Имя", "КонтактныеЛицаПартнеров" + СтрЗаменить(СтрокаТаблицы.ИмяАмо," ",""));
			СтруктураЗаполненияПВХ.Вставить("НаборСвойств", НаборСвойств);
			СтруктураЗаполненияПВХ.Вставить("Заголовок", СтрокаТаблицы.ИмяАмо);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТипЗначений) Тогда
				Если СтрокаТаблицы.ТипЗначений = "Булево" Тогда
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
				ИначеЕсли СтрокаТаблицы.ТипЗначений = "СписокЗначений" Тогда
					СтруктураЗаполненияПВХ.Вставить("ДополнительныеЗначенияИспользуются", Истина);
				Иначе
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("100")));
				КонецЕсли;
			ИНаче
				СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки("100")));
			КонецЕсли;
			
			СтруктураЗаполненияПВХ.Вставить("Доступен",Истина);
			СтруктураЗаполненияПВХ.Вставить("Виден",Истина);
			
			СозданиеПВХ(СтруктураЗаполненияПВХ);
			
			СтрокаТаблицы.ИмяРеквизита = СтруктураЗаполненияПВХ.Имя;
			СтрокаТаблицы.ПредставлениеРеквизита = СтруктураЗаполненияПВХ.Заголовок;
			СтрокаТаблицы.ДопРеквизит = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВоронкиИЭтапы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.СделкиСопоставление Цикл
		
		Если НЕ Стр.Выбрано Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Воронка Тогда
			
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				
				Воронка = Стр.СостояниеИнтереса;
				Структура = новый Структура;
				Структура.Вставить("Наименование",Стр.ИмяАмо);
				Структура.Вставить("ЭлементСсылка",Стр.СостояниеИнтереса);
				СоздатьСценарийВоронкуВБазе(Структура);
				Воронка = Структура.ЭлементСсылка;
				Стр.СостояниеИнтереса = Воронка;
				ЭлементыВерхУровня = ДеревоЗначенийСделки.ПолучитьЭлементы();
				Для Каждого СтрЭл Из ЭлементыВерхУровня Цикл
					
					Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
						
						СтрЭл.СостояниеИнтереса = Воронка;
						ВоронкаДерева = СтрЭл;
					КонецЕсли;	
				КонецЦикла;
				
			Иначе
				Воронка = Стр.СостояниеИнтереса;
				ЭлементыВерхУровня = ДеревоЗначенийСделки.ПолучитьЭлементы();
				Для Каждого СтрЭл Из ЭлементыВерхУровня Цикл
					
					Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
						
						ВоронкаДерева = СтрЭл;
						
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				
				СостояниеИнтереса = ПолучитьЭтапВоронкиПоНаименованию(Воронка,Стр.ИмяАмо);
				
				Если СостояниеИнтереса = Неопределено ИЛИ СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка") Тогда
					
					Структура = новый Структура;
					Структура.Вставить("Наименование",Стр.ИмяАмо);
					Структура.Вставить("Родитель",Воронка);
					Структура.Вставить("Используется",Истина);
					Структура.Вставить("ОбязательноеЗаполнениеКлиента",Ложь);
					Структура.Вставить("ОбязательноеПланированиеАктивности",ПредопределенноеЗначение("Перечисление.CRM_ПланируемыеТипыАктивности.ПустаяСсылка"));
					Структура.Вставить("ЗавершатьЗапланированныеАктивности",ПредопределенноеЗначение("Перечисление.CRM_ЗавершаемыеТипыАктивности.ПустаяСсылка"));
					
					Структура.Вставить("ЭлементСсылка",Стр.СостояниеИнтереса);
					СоздатьСостояниеИнтересаВБазе(Структура);
					Стр.СостояниеИнтереса = Структура.ЭлементСсылка;
					ЭлементыВторогоУровня = ВоронкаДерева.ПолучитьЭлементы();
					Для Каждого СтрЭл Из ЭлементыВторогоУровня Цикл
						
						Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
							
							СтрЭл.СостояниеИнтереса = Структура.ЭлементСсылка;
						КонецЕсли;	
					КонецЦикла;
				Иначе
					Стр.СостояниеИнтереса = СостояниеИнтереса;
					ЭлементыВторогоУровня = ВоронкаДерева.ПолучитьЭлементы();
					Для Каждого СтрЭл Из ЭлементыВторогоУровня Цикл
						
						Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
							
							СтрЭл.СостояниеИнтереса = СостояниеИнтереса;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭтапВоронкиПоНаименованию(Родитель,Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|ГДЕ
	|	CRM_СостоянияИнтересов.Родитель = &Родитель
	|	И CRM_СостоянияИнтересов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.CRM_СостоянияИнтересов.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросВыполнитьЗагрузкуЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьИнформациюПоСделкам(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВоронкиИЭтапыНажатие(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Если Объект.СделкиСопоставление.Количество() = 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросВыполнитьЗагрузкуЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Предварительно необходимо загрузить данные по сделкам из AmoCRM. Выполнить загрузку?';"), Режим, 0);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьВоронкиИЭтапы", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Сопоставлены не все этапы воронок продаж. " +
	"Для не сопоставленных этапов  будут созданы новые этапы сценариев продаж в 1С:CRM, а для не сопоставленных воронок  будут созданы новые Сценарии  продаж.  Продолжить?';"), Режим, 0);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы,Структура)
	
	ЗаполнитьЗначенияСвойств(ДанныеФормы,Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСценарийВоронкуВБазе(Структура)
	
	ФормаПВХ = ПолучитьФорму("Справочник.CRM_СостоянияИнтересов.ФормаГруппы");
	ДанныеФормы = ФормаПВХ.Объект;
	СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы,Структура);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПВХ.Объект);
	ФормаПВХ.Записать();
	Структура.ЭлементСсылка = ФормаПВХ.Объект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСостояниеИнтересаВБазе(Структура)
	
	ФормаПВХ = ПолучитьФорму("Справочник.CRM_СостоянияИнтересов.ФормаОбъекта");
	ДанныеФормы = ФормаПВХ.Объект;
	СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы,Структура);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПВХ.Объект);
	ФормаПВХ.Записать();
	
	Структура.ЭлементСсылка = ФормаПВХ.Объект.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ПопыткаСопоставленияДанныхСРеквизитами(Таблица)
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("Имя");
	ТаблицаСопоставления.Колонки.Добавить("Синоним");
	Если Таблица = "Партнеры" Тогда
		
		ТаблицаРеквизитов = Метаданные.Справочники.Партнеры.Реквизиты;
		
		Для Каждого Стр Из ТаблицаРеквизитов Цикл
			
			СтрокаСопоставления = ТаблицаСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСопоставления,Стр);
			
		КонецЦикла;
		
		Для Каждого Стр Из Объект.ПартнерыСопоставление Цикл
			
			Если ЗначениеЗаполнено(Стр.ПредставлениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаСопоставления.Найти(Стр.ИмяАмо,"Синоним");
			Если не НайденнаяСтрока = Неопределено Тогда
				Стр.ИмяРеквизита = НайденнаяСтрока.Имя;
				Стр.ПредставлениеРеквизита = НайденнаяСтрока.Синоним; 
			Иначе
				ИмяДопРеквизит = ПолучитьПВХПоИмени(таблица + СтрЗаменить(Стр.ИмяАмо," ",""));
				Если не ИмяДопРеквизит = Неопределено Тогда
					Стр.ИмяРеквизита = ИмяДопРеквизит.Имя;
					Стр.ДопРеквизит  = Истина;
					Стр.ПредставлениеРеквизита = ИмяДопРеквизит.Наименование;
					Если Строка(ИмяДопРеквизит.ТипЗначения) = "Строка" Тогда
						Стр.ТипЗначений = "Строка";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Булево" Тогда
						Стр.ТипЗначений = "Булево";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Число" Тогда
						Стр.ТипЗначений = "Число";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дата" Тогда
						Стр.ТипЗначений = "Дата";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дополнительное значение" Тогда
						Стр.ТипЗначений = "СписокЗначений";
					КонецЕсли;
					
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Таблица = "КонтактныеЛицаПартнеров" И Объект.СоздаватьФизЛиц Тогда
		
		ТаблицаРеквизитов = Метаданные.Справочники.Партнеры.Реквизиты;
		
		Для Каждого Стр Из ТаблицаРеквизитов Цикл
			
			СтрокаСопоставления = ТаблицаСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСопоставления,Стр);
			
		КонецЦикла;
		
		Для Каждого Стр Из Объект.КонтактныеЛицаСопоставление Цикл
			
			Если ЗначениеЗаполнено(Стр.ПредставлениеРеквизитаФизЛицо) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаСопоставления.Найти(Стр.ИмяАмо,"Синоним");
			Если не НайденнаяСтрока = Неопределено Тогда
				Стр.ИмяРеквизитаФизЛицо = НайденнаяСтрока.Имя;
				Стр.ПредставлениеРеквизитаФизЛицо = НайденнаяСтрока.Синоним; 
			Иначе
				ИмяДопРеквизит = ПолучитьПВХПоИмени(таблица + СтрЗаменить(Стр.ИмяАмо," ",""));
				Если не ИмяДопРеквизит = Неопределено Тогда
					Стр.ИмяРеквизитаФизЛицо = ИмяДопРеквизит.Имя;
					Стр.ДопРеквизит  = Истина;
					Стр.ПредставлениеРеквизитаФизЛицо = ИмяДопРеквизит.Наименование;
					Если Строка(ИмяДопРеквизит.ТипЗначения) = "Строка" Тогда
						Стр.ТипЗначенийФизЛицо = "Строка";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Булево" Тогда
						Стр.ТипЗначенийФизЛицо = "Булево";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Число" Тогда
						Стр.ТипЗначенийФизЛицо = "Число";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дата" Тогда
						Стр.ТипЗначенийФизЛицо = "Дата";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дополнительное значение" Тогда
						Стр.ТипЗначенийФизЛицо = "СписокЗначений";
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаРеквизитов = Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты;
		
		Для Каждого Стр Из ТаблицаРеквизитов Цикл
			
			СтрокаСопоставления = ТаблицаСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСопоставления,Стр);
			
		КонецЦикла;
		
		Для Каждого Стр Из Объект.КонтактныеЛицаСопоставление Цикл
			
			Если ЗначениеЗаполнено(Стр.ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаСопоставления.Найти(Стр.ИмяАмо,"Синоним");
			Если не НайденнаяСтрока = Неопределено Тогда
				Стр.ИмяРеквизита = НайденнаяСтрока.Имя;
				Стр.ПредставлениеРеквизита = НайденнаяСтрока.Синоним; 
			Иначе
				ИмяДопРеквизит = ПолучитьПВХПоИмени(таблица + СтрЗаменить(Стр.ИмяАмо," ",""));
				Если не ИмяДопРеквизит = Неопределено Тогда
					Стр.ИмяРеквизита = ИмяДопРеквизит.Имя;
					Стр.ДопРеквизит  = Истина;
					Стр.ПредставлениеРеквизита = ИмяДопРеквизит.Наименование;
					Если Строка(ИмяДопРеквизит.ТипЗначения) = "Строка" Тогда
						Стр.ТипЗначений = "Строка";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Булево" Тогда
						Стр.ТипЗначений = "Булево";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дополнительное значение" Тогда
						Стр.ТипЗначений = "СписокЗначений";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПВХПоИмени(Имя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Имя КАК Имя,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Имя", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Имя", ВыборкаДетальныеЗаписи.Имя);
		СтруктураВозврата.Вставить("ТипЗначения", ВыборкаДетальныеЗаписи.ТипЗначения);
		СтруктураВозврата.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		Возврат СтруктураВозврата;
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КомпанииПриИзменении(Элемент)
	
	Если Не Объект.Компании Тогда
		Элементы.ДекорацияПомощьПартнеры.Заголовок = "Данные по компаниям переноситься не будут";
		Объект.ПартнерыСопоставление.Очистить();
		Элементы.ПартнерыСопоставление.Доступность = Ложь;
		Элементы.ПартнерыСопоставление.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияПомощьПартнеры.Заголовок = "Данные из amoCRM будут загружены в справочник ""Партнеры""." + 
		"Необходимо сопоставить реквизиты Вашей amoCRM и 1С. Для полей которых не найдено сопоставление,"+ 
		" рекомендуется создавать ""дополнительные реквизиты"" выбрав в списке соответствующую строку ""Дополнительный реквизит""";
		Элементы.ПартнерыСопоставление.Доступность = Истина;
		Элементы.ПартнерыСопоставление.Видимость = Истина;
		ЗагрузитьИнформациюПоПартнеруНаСервере();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПартнеры(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭлемент = Элементы.СтраницаПартнеры;
		ЗагрузитьИнформациюПоПартнеру(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриИзменении(Элемент)
	
	Если Не Объект.Контакты Тогда
		Элементы.ДекорацияПомощьКонтакты.Заголовок = "Данные по контактым лицам переноситься не будут";
		Объект.КонтактныеЛицаСопоставление.Очистить();
		Элементы.КонтактныеЛицаСопоставление.Доступность = Ложь;
		Элементы.КонтактныеЛицаСопоставление.Видимость = Ложь;
	Иначе
		Если Объект.Компании Тогда
			Элементы.ДекорацияПомощьКонтакты.Заголовок = "Данные из amoCRM будут загружены в справочник ""Контактые лица партнеров""."+
			"Необходимо сопоставить реквизиты Вашей amoCRM и 1С. Для полей которых не найдено сопоставление, " + 
			"рекомендуется создавать ""дополнительные реквизиты"" выбрав в списке соответствующую строку ""Дополнительный реквизит""";
			Элементы.КонтактныеЛицаСопоставление.Доступность = Истина;
			Элементы.КонтактныеЛицаСопоставление.Видимость = Истина;
			ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере();
		ИНаче
			Элементы.ДекорацияПомощьКонтакты.Заголовок = "Данные по контактым лицам переносятся совместно с партнерами";
			Объект.Контакты = Ложь;
			Объект.КонтактныеЛицаСопоставление.Очистить();
			Элементы.КонтактныеЛицаСопоставление.Доступность = Ложь;
			Элементы.КонтактныеЛицаСопоставление.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаКонтактныеЛица(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭлемент = Элементы.СтраницаКонтакныеЛица;
		ЗагрузитьИнформациюПоКонтактнымЛицам(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиПриИзменении(Элемент)
	
	Если Объект.Компании И Объект.СделкиСопоставление.Количество() = 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаСделки", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед началом загрузки рекомендуется сопоставить реквизиты интересов и воронок продаж с реквизитами AmoCRM ';"), Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСделки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭлемент = Элементы.СтраницаИнтересы;
		ЗагрузитьИнформациюПоСделкам(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПродажПриИзменении(Элемент)
	
	Если Объект.ЭтапыПродаж Тогда
		ОБъект.Сделки = Истина;
		Объект.Задачи = Истина;
		Элементы.ДекорацияПомощьИнтересы.Заголовок = "Для корректной загрузки ""интересов клиентов"" и задач к ним, " + 
		"рекомендуется выбрать организацию и  сопоставить воронки и этапы продаж из Вашей amoCRM с 1С. ";
		Элементы.СделкиСопоставление.Доступность = Истина;
		ЗагрузитьИнформациюПоСделкамНаСервере();
		
	Иначе
		ОБъект.Сделки = Ложь;
		Объект.Задачи = Ложь;
		Элементы.ДекорацияПомощьИнтересы.Заголовок = "Данные по сделкам переноситься не будут";
		Объект.СделкиСопоставление.Очистить();
		Элементы.СделкиСопоставление.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненияРеквизитовФормы(Структура,ИмяПоляДляПроверки = "")
	
	Отказ = Ложь;
	
	Для Каждого Стр Из Структура Цикл
		
		Если ТипЗнч(Стр.Значение) = Тип("ДанныеФормыКоллекция") Тогда
			
			Для Каждого ЗначениеСтроки Из Стр.Значение Цикл
				
				Попытка
					Если Не ЗначениеСтроки.Выбрано Тогда
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				Если Не ЗначениеЗаполнено(ЗначениеСтроки[ИмяПоляДляПроверки]) Тогда
					
					Отказ = Истина;
					
					Возврат Отказ;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе 
			
			Если НЕ ЗначениеЗаполнено(Стр.Значение) Тогда
				
				Отказ = Истина;
				ПоказатьПредупреждение(,"Необходимо заполнить обязательное поле " + Стр.Ключ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПереходДалее(Команда)
	
	Если Элементы.ФормаПереходДалее.Заголовок = "Готово" Тогда
		ОБъект.ПомощникПройден = Истина;
		ЭтотОбъект.Закрыть();
	ИначеЕсли Элементы.ФормаПереходДалее.Заголовок = "Импорт данных из amoCRM" Тогда
		ЗагрузкаДанных(Истина);
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновныеНастройки Тогда
		СтруктураПроверкиПолей = Новый Структура("Домен,Логин,Ключ,Пароль",Объект.Домен,Объект.Логин,Объект.Хеш,Объект.Пароль);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей);
		Если НЕ Отказ Тогда
			Если Не Объект.ПодключениеСуществует Тогда
				ВыполнитьПроверкуПодключенияНаСервере();
				Отказ = НЕ Объект.ПодключениеСуществует; 
			КонецЕсли;
		КонецЕсли;
		Если Не Отказ Тогда
			Элементы.СтраницаПользователи.Видимость = Истина;
			Элементы.ФормаКнопкаНазад.Видимость = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи;
			ЗаполнитьПользователейДлясопоставления();
			Объект.Домен = СтрЗаменить(Объект.Домен,".amocrm.ru","");
			Заголовок = "Импорт данных из amoCRM / Пользователи";
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи Тогда
		СтруктураПроверкиПолей = Новый Структура("Пользователи",Объект.ПользователиСопоставление);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей,"Пользователь");
		Если Отказ Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ДозаполнитьТабличнуюЧастьПользователи",ЭтотОбъект),"Не все пользователи из amoCRM сопоставлены с пользователями программы."+
			"В 1С:CRM будут созданы новые пользователи.  Продолжить?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Элементы.СтраницаПартнеры.Видимость = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры;
			ЗагрузитьИнформациюПоПартнеруНаСервере();
			Объект.Компании = Истина;
			Заголовок = "Импорт данных из amoCRM / Компании";
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры Тогда
		СтруктураПроверкиПолей = Новый Структура("Партнеры",Объект.ПартнерыСопоставление);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей,"ИмяРеквизита");
		Если Отказ Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ДозаполнитьТабличнуюЧастьПартнеры",ЭтотОбъект),"Сопоставлены не все поля. "+
			"Для не сопоставленных полей будут созданы новые поля в справочнике Клиенты. Продолжить?",РежимДиалогаВопрос.ДаНет);
		Иначе
			Элементы.СтраницаКонтакныеЛица.Видимость = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица;
			Если Объект.Компании Тогда
				Объект.Контакты = Истина;
				СоздаватьФизЛицПриИзменении(Истина);
			КонецЕсли;
			КонтактыПриИзменении(Истина);
			Заголовок = "Импорт данных из amoCRM / Контакты";
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица Тогда
		СтруктураПроверкиПолей = Новый Структура("КЛ",Объект.КонтактныеЛицаСопоставление);
		
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей,"ПредставлениеРеквизита");
		Если Объект.СоздаватьФизЛиц Тогда
			Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей,"ПредставлениеРеквизитаФизЛицо");
		КонецЕсли;
		
		Если Отказ Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ДозаполнитьТабличнуюЧастьКонтактныеЛица",ЭтотОбъект),"Сопоставлены не все поля. "+
			"Для не сопоставленных полей  будут созданы новые поля в справочнике Контакты.  Продолжить?",РежимДиалогаВопрос.ДаНет);
		Иначе
			
			Элементы.СтраницаИнтересы.Видимость = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы;
			ЗагрузитьИнформациюПоСделкам(Истина);
			Объект.ЭтапыПродаж = Истина;
			Объект.Сделки = Истина;
			Объект.Задачи = Истина;
			Заголовок = "Импорт данных из amoCRM / Настройка импорта Сделок и Задач";
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы Тогда
		СтруктураПроверкиПолей = Новый Структура("Сделки,Организация",Объект.СделкиСопоставление,Объект.Организация);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей,"СостояниеИнтереса");
		
		Если Отказ Тогда 
			СоздатьВоронкиИЭтапыНажатие(Истина);
		КонецЕсли;
		
		ЗаполнитьДекорациюПоЗагрузке();
		
		Элементы.СтраницаЗагрузкаДанных.Видимость = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаДанных;
		Элементы.ФормаПереходДалее.Заголовок = "Импорт данных из amoCRM";
		Заголовок = "Импорт данных из amoCRM / Лог загрузки";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьТабличнуюЧастьПартнеры(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИмяРеквизита","");
	
	МассивСтрок = Объект.ПартнерыСопоставление.НайтиСтроки(СтрОтбор);
	Для Каждого Стр Из МассивСтрок Цикл
		
		Стр.ИмяРеквизита = "СоздатьДопРеквизит";
		Стр.ДопРеквизит = Истина;
		Стр.ПредставлениеРеквизита = "Дополнительный реквизит(клиент)";
	КонецЦикла;
	
	Элементы.СтраницаКонтакныеЛица.Видимость = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица;
	ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере();
	Объект.Контакты = Истина;
	ЭтаФорма.Заголовок = "Загрузка данных из AmoCRM / Контакты";
	
КонецПроцедуры

&НаКлиенте
Функция ОтправитьПисьмоНаПочтуНовомуПользователю(Стр)
	
	ТекстСообщения = "Здравствуйте, " + Стр.ИмяАмо + "!" 
	+ Символы.ПС + ПользователиКлиентСервер.ТекущийПользователь() + " добавил Вас в систему 1C:CRM." 
	+ "Чтобы перейти в систему перейдите по ссылке: " + Символы.ПС + ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Структура = Новый Структура;
	Структура.Вставить("Кому",Стр.ЭлектронныйАдресБаза);
	
	МассивПолучателей = новый Массив;
	СтруктураПолуч = новый Структура;
	СтруктураПолуч.Вставить("Адрес",Стр.ЭлектронныйАдресБаза);
	СтруктураПолуч.Вставить("Представление","МММ");
	
	Структура.Вставить("ПолучателиСообщения",МассивПолучателей);
	
	Структура.Вставить("Тема","Вас добавили в систему 1C:CRM");
	
	Структура.Вставить("Тело",ТекстСообщения);
	
	Структура.Вставить("ИдентификаторСообщения","");
	
	Структура.Вставить("ТипТекста", ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"));
	Попытка
		Текст = ОтправитьПисьмоПользователюНаСервере(Структура);
	Исключение
		Текст = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ОтправитьПисьмоПользователюНаСервере(Структура)
	
	Попытка
		
		УчЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		
		ИдСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчЗапись,Структура);
		
		Текст = "";
		
	Исключение
		Текст = ОписаниеОшибки();
	КонецПопытки;

	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ДозаполнитьТабличнуюЧастьПользователи(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.ПользователиСопоставление Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Пользователь) Тогда
			Пользователь = СоздатьПольователяВБазе(Стр.ИмяАмо,Стр.ЭлАдресПользователя);
			Стр.Пользователь = Пользователь;
		КонецЕсли;	
	КонецЦикла;
	
	Если ОтправитьУведомлениеНаПочту Тогда
		Для Каждого Стр Из Объект.ПользователиСопоставление Цикл
			Если Стр.Выбрано Тогда
				Если СтрНайти(Стр.ЭлектронныйАдресБаза,"нет email") = 0 Тогда
					ТекстОтправка = ОтправитьПисьмоНаПочтуНовомуПользователю(Стр);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Если ТекстОтправка = "" Тогда
			Элементы.ДекорацияОтправкаУведомления.Заголовок = "Приглашения отправлены выбранным пользователям";
		Иначе
			Элементы.ДекорацияОтправкаУведомления.Заголовок = "Ошибка при отправке уведомлений выбранным пользователям";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаОшибки.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьТабличнуюЧастьКонтактныеЛица(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИмяРеквизита","");
	
	МассивСтрок = Объект.КонтактныеЛицаСопоставление.НайтиСтроки(СтрОтбор);
	Для Каждого Стр Из МассивСтрок Цикл
		
		Стр.ИмяРеквизита = "СоздатьДопРеквизит";
		Стр.ДопРеквизит = Истина;
		Стр.ПредставлениеРеквизита = "Дополнительный реквизит(контактные лица)";
		
	КонецЦикла;
	
	Если Объект.СоздаватьФизЛиц Тогда
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИмяРеквизитаФизЛицо","");
		
		МассивСтрок = Объект.КонтактныеЛицаСопоставление.НайтиСтроки(СтрОтбор);
		Для Каждого Стр Из МассивСтрок Цикл
			Стр.ИмяРеквизитаФизЛицо = "СоздатьДопРеквизит";
			Стр.ДопРеквизит = Истина;
			Стр.ПредставлениеРеквизитаФизЛицо = "Дополнительный реквизит(контактные лица)";
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СтраницаИнтересы.Видимость = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы;
	ЗагрузитьИнформациюПоСделкамНаСервере();
	
	Объект.ЭтапыПродаж = Истина;
	Объект.Сделки = Истина;
	Объект.Задачи = Истина;
	ЭтаФорма.Заголовок = "Загрузка данных из AmoCRM / Этапы продаж";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорациюПоЗагрузке()
	
	// Если уже созданы, то не нужно создавать
	Попытка
		// Пользователи
		Элемент = Элементы.Добавить("ДекорацияИнфоПользователи", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииНадписи);
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.Заголовок = "Пользователи";
		Элемент.УстановитьДействие("Нажатие","ДекорацияЭлементыНажатие");
		
		ЭлементКартинка = Элементы.Добавить("ДекорацияИнфоКартинкаПользователи", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииСветофор);
		ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
		Если ОБъект.ПользователиСопоставление.Количество() > 0 Тогда
			ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная;
		Иначе
			ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
		КонецЕсли;
		
		// Партнеры
		Элемент = Элементы.Добавить("ДекорацияИнфоПартнеры", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииНадписи);
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.Заголовок = "Клиенты";
		Элемент.УстановитьДействие("Нажатие","ДекорацияЭлементыНажатие");
		
		ЭлементКартинка = Элементы.Добавить("ДекорацияИнфоКартинкаПартнеры", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииСветофор);
		ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
		Если Объект.Компании Тогда
			ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная;
		Иначе
			ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
		КонецЕсли;
		
		// Контактные лица
		Элемент = Элементы.Добавить("ДекорацияИнфоКонтактныеЛица", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииНадписи);
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.Заголовок = "Контакты";
		Элемент.УстановитьДействие("Нажатие","ДекорацияЭлементыНажатие");
		
		ЭлементКартинка = Элементы.Добавить("ДекорацияИнфоКартинкаКонтактныеЛица", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииСветофор);
		ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
		Если Объект.Контакты Тогда
			ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная;
		Иначе
			ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
		КонецЕсли;
		
		// Контактные лица
		Элемент = Элементы.Добавить("ДекорацияИнфоЭтапыПродаж", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииНадписи);
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.Заголовок = "Интересы клиентов и Взаимодействия";
		Элемент.УстановитьДействие("Нажатие","ДекорацияЭлементыНажатие");
		
		ЭлементКартинка = Элементы.Добавить("ДекорацияИнфоКартинкаЭтапыПродаж", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииСветофор);
		ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
		Если Объект.ЭтапыПродаж Тогда
			ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная;
		Иначе
			ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейДлясопоставления()
	
	Если Не Объект.ПользователиСопоставлены ИЛИ Объект.ПользователиСопоставление.Количество() = 0 Тогда
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v2/account";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс,10,Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных,"Объект");
		// Пользователей сопоставляем по электронному адресу
		СопоставитьПользователейПоЭлектронномуАдресу();
		
		Объект.ПользователиСопоставлены = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СопоставитьПользователейПоЭлектронномуАдресу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПользователей.ИдАмо КАК ИдАмо,
	|	ТаблицаПользователей.ИмяАмо КАК ИмяАмо,
	|	ТаблицаПользователей.ЭлАдресПользователя КАК ЭлАдресПользователя,
	|	ТаблицаПользователей.Пользователь КАК Пользователь,
	|	ТаблицаПользователей.Выбрано КАК Выбрано
	|ПОМЕСТИТЬ ВтПользователи
	|ИЗ
	|	&ТаблицаПользователей КАК ТаблицаПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПользователиКонтактнаяИнформация.Представление КАК ПредставлениеАдреса
	|ПОМЕСТИТЬ ПользователиБазы
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = &Тип
	|	И ПользователиКонтактнаяИнформация.Вид = &Вид
	|	И ПользователиКонтактнаяИнформация.Представление В
	|			(ВЫБРАТЬ
	|				ВтПользователи.ЭлАдресПользователя
	|			ИЗ
	|				ВтПользователи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиБазы.Ссылка КАК Пользователь,
	|	ВтПользователи.ИдАмо КАК ИдАмо,
	|	ВтПользователи.ИмяАмо КАК ИмяАмо,
	|	ВтПользователи.ЭлАдресПользователя КАК ЭлАдресПользователя,
	|	ВтПользователи.Выбрано КАК Выбрано
	|ИЗ
	|	ВтПользователи КАК ВтПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПользователиБазы КАК ПользователиБазы
	|		ПО (ПользователиБазы.ПредставлениеАдреса = ВтПользователи.ЭлАдресПользователя)";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТаблицаПользователей", Объект.ПользователиСопоставление.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Объект.ПользователиСопоставление.Загрузить(РезультатЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭлементыНажатие(Элемент)
	
	Если Элемент.Заголовок = "Пользователи" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи;
	ИначеЕсли Элемент.Заголовок = "Партнеры" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры;
	ИначеЕсли Элемент.Заголовок = "Контактные лица" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица;
	ИначеЕсли Элемент.Заголовок = "Этапы продаж" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы;
	ИначеЕсли Элемент.Заголовок = "События" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительныеДанные;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияПриИзменении(Элемент)
	
	Если Объект.События Тогда
		Элементы.ДекорацияПомощьСобытие.Заголовок = "Переносятся  примечания к сделкам, компаниям, контактам из Вашей amoCRM в 1С. "+ 
		"Загружаются файлы, которые прикреплены к объектам в Вашей amoCRM";
	Иначе
		Элементы.ДекорацияПомощьСобытие.Заголовок = "Дополнительные данные не будут перенесены ";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСделкиСостояниеИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоЗначенийСделки.ТекущиеДанные;
	
	Если ТекДанные.Воронка Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ДеревоЗначенийСделкиСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		ТекСтрокаИндекс = Элементы.ДеревоЗначенийСделки.ТекущаяСтрока;
		Родитель = ДеревоЗначенийСделки.НайтиПоИдентификатору(ТекСтрокаИндекс).ПолучитьРодителя();
		Если Не ЗначениеЗаполнено(Родитель.СостояниеИнтереса) Тогда
			ПоказатьПредупреждение(,"Не выбрана воронка продаж");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",Родитель.СостояниеИнтереса);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ДеревоЗначенийСделкиСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыСопоставлениеПредставлениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДАнные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Отбор", "Партнеры", "Партнеры");
	МассивРеквизитов = Новый Массив;
	Для каждого Строка из СопоставлениеРеквизитов Цикл
		Если Строка(Строка.ТипРеквизита) <> "Строка" Тогда
			МассивРеквизитов.Добавить(Строка.ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ИсключитьРеквизиты", МассивРеквизитов);
	ПараметрыОткрытия.Вставить("ФизЛицо", Ложь);
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаВыбораРеквизита", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыСопоставлениеПредставлениеРеквизитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнач = Элементы.ПартнерыСопоставление.ТекущиеДанные.ТипЗначений;
	ТекДанные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ДопРеквизит Тогда
		ТекДанные.ТипЗначений = ТипЗнач;
	КонецЕсли;
	Если Строка(ВыбранноеЗначение.ИмяРеквизита) = "Адрес" Тогда
		ТекДанные.ИмяРеквизита = "АдресПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Телефон" Тогда
		ТекДанные.ИмяРеквизита = "ТелефонПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Сайт компании" Тогда
		ТекДанные.ИмяРеквизита = "CRM_СайтПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Электронная почта" Тогда
		ТекДанные.ИмяРеквизита = "EmailПартнера";
	КонецЕсли;
	
	Если НЕ ТекДанные.ИмяРеквизита = "СоздатьДопРеквизит" Тогда
		
		СтрокаСопоставления = СопоставлениеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Отбор", "КонтактныеЛицаПартнеров", "КонтактныеЛицаПартнеров");
	МассивРеквизитов = Новый Массив;
	Для каждого Строка из СопоставлениеРеквизитов Цикл
		Если Строка(Строка.ТипРеквизита) <> "Строка" Тогда
			МассивРеквизитов.Добавить(Строка.ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ИсключитьРеквизиты", МассивРеквизитов);
	ПараметрыОткрытия.Вставить("ФизЛицо", Ложь);
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаВыбораРеквизита", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция СоздатьПольователяВБазе(Имя,АдресПочтыПользователя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	
	ПользовательИБ.имя = Имя;
	
	ПользовательИБ.ПолноеИмя = Имя;
	
	ПользовательИБ.АутентификацияСтандартная = ИСТИНА;
	
	ПользовательИБ.Пароль = "";
	
	ПользовательИБ.записать();
	
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ПользовательИБ.УникальныйИдентификатор);
	
	Если Пользователь.Наименование = "" Тогда
		// создаем пользователя 
		
		ПользовательОб = Справочники.Пользователи.СоздатьЭлемент();
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		
		ЗаполнитьЗначенияСвойств(ОписаниеПользователяИБ,ПользовательИБ);
		
		ОписаниеПользователяИБ.УникальныйИдентификатор =  ПользовательИБ.УникальныйИдентификатор;
		
		ПользовательОб.Наименование = ОписаниеПользователяИБ.ПолноеИмя; 
		
		ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(АдресПочтыПользователя, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПользовательОб, ЗначенияПолей, Справочники.ВидыКонтактнойИнформации.EmailПользователя,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ОписаниеПользователяИБ.Вставить("Действие","Записать");
		
		ПользовательОб.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ",ОписаниеПользователяИБ);
		
		ПользовательОб.записать();
		
	КонецЕсли;
	
	ГруппаДоступа = Справочники.ГруппыДоступа.НайтиПоНаименованию("Менеджеры по продажам");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппаДоступаОбъект = ГруппаДоступа.ПолучитьОбъект();
	НовСтр = ГруппаДоступаОбъект.Пользователи.Добавить();
	НовСтр.Пользователь = ПользовательОб.Ссылка;
	
	Попытка
		ГруппаДоступаОбъект.Записать();
	Исключение
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение "Ошибка при установке прав ""менеджер по продажам""";
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПользовательОб.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнач = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные.ТипЗначений;
	ТекДанные = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ДопРеквизит Тогда
		ТекДанные.ТипЗначений = ТипЗнач;
	КонецЕсли;
	
	Если Строка(ВыбранноеЗначение.ИмяРеквизита) = "Адрес" Тогда
		ТекДанные.ИмяРеквизита = "АдресПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Телефон" Тогда
		ТекДанные.ИмяРеквизита = "ТелефонКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Электронная почта" Тогда
		ТекДанные.ИмяРеквизита = "EmailКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "E-mail для рассылки" Тогда
		ТекДанные.ИмяРеквизита = "EmailКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Место рождения" Тогда
		ТекДанные.ИмяРеквизита = "CRM_МестоРожденияКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "Мобильный телефон" Тогда
		ТекДанные.ИмяРеквизита = "МобильныйТелефонКонтактногоЛица";
	КонецЕсли;
	
	Если КонфигурацияДанныхУТ Тогда
		Если Строка(ВыбранноеЗначение.ИмяРеквизита) = "Viber" Тогда
			ТекДанные.ИмяРеквизита = "CRM_ИдентификаторViberКонтактногоЛица";
		ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизита) = "ВКонтакте" Тогда
			ТекДанные.ИмяРеквизита = "CRM_ИдентификаторВКонтактеКонтактногоЛица";
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ТекДанные.ИмяРеквизита = "СоздатьДопРеквизит" Тогда
		
		СтрокаСопоставления = СопоставлениеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНазад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновныеНастройки Тогда
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновныеНастройки;
		Элементы.ФормаКнопкаНазад.Видимость = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаДанных Тогда
		Элементы.ФормаПереходДалее.Заголовок = "Далее";
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЖурнал Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаДанных;
		Элементы.ФормаПереходДалее.Заголовок = "Импорт данных из amoCRM";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСделкиСостояниеИнтересаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанныеДерево = Элементы.ДеревоЗначенийСделки.ТекущиеДанные;
	
	ИдАмо = ТекДанныеДерево.ИДАмо;
	
	СтрОтбор = новый Структура;
	СтрОтбор.Вставить("ИдАмо",ИдАмо);
	
	МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
	
	Для Каждого Стр Из МассивСтрок Цикл
		Стр.СостояниеИнтереса = ВыбранноеЗначение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчетПоСозданнымОбъектамНажатие(Элемент)
	
	ТабДокумент = ПоказатьОтчетПоСозданнымОбъектамНаСервере();
	ТабДокумент.Показать("Созданные/обновленные объекты");  
	
КонецПроцедуры

&НаСервере
Функция ПоказатьОтчетПоСозданнымОбъектамНаСервере()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("СтрокаДанных");
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	Для Каждого Стр ИЗ Объект.ЖурналСозданныхОбъектов Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаДанных.Параметры,Стр);
		ТабДокумент.Вывести(ОбластьСтрокаДанных);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьУведомлениеНаПочтуПриИзменении(Элемент)
	
	Если ОтправитьУведомлениеНаПочту Тогда
		
		Элементы.УчетнаяЗапись.Видимость = Истина;
		Элементы.ПользователиСопоставлениеВыбрано.Видимость = Истина;
		Элементы.ПользователиСопоставлениеЭлектронныйАдресБаза.Видимость = Истина;
		ОбработатьТабличнуюЧастьПользователи();
		
		СписокЗаписей = ПолучитьСписокУчетныхЗаписейПользователя();
		
		Если СписокЗаписей.Количество() = 0 Тогда
			
			ФормаСправочника = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаЭлемента");
			ДанныеФормы = ФормаСправочника.Объект;
			ЗаполнитьНаСервереУчетнойЗаписи(ДанныеФормы);
			КопироватьДанныеФормы(ДанныеФормы, ФормаСправочника.Объект);
			ФормаСправочника.Открыть();
			
		ИначеЕсли СписокЗаписей.Количество() = 1 Тогда
			
			Объект.УчетнаяЗапись = СписокЗаписей[0];
			
		Иначе 
			
			ПараметрыФ = Новый Структура;
			ПараметрыФ.Вставить("Ссылка",СписокЗаписей);
			Форма = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаВыбора",ПараметрыФ,ЭтотОбъект);
			Форма.Заголовок = "Выберите адрес электронной почты от которого будет выслано приглашение";
			Форма.Открыть();
			
		КонецЕсли;
		
	Иначе
		
		Объект.УчетнаяЗапись = Объект.УчетнаяЗапись.Пустая();
		Элементы.ПользователиСопоставлениеВыбрано.Видимость = Ложь;
		Элементы.ПользователиСопоставлениеЭлектронныйАдресБаза.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	
	Если не ЗначениеВыбора = Неопределено Тогда
		Объект.УчетнаяЗапись = ЗначениеВыбора;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереУчетнойЗаписи(НовыйОбъект);
	НовыйОбъект.АдресЭлектроннойПочты = ПолучитьЭлАдресТекПользователя(ПользователиКлиентСервер.ТекущийПользователь());
КонецПроцедуры   

&НаСервере
Функция ПолучитьЭлАдресТекПользователя(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = &Тип
	|	И ПользователиКонтактнаяИнформация.Вид = &Вид
	|	И ПользователиКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("Ссылка", Пользователь);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Представление;
		
	Иначе 
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокУчетныхЗаписейПользователя()
	
	Массив = новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбщаяУчетнаяЗапись
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ЭтоОбщаяУчетнаяЗапись
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись КАК УчетнаяЗапись
	|ПОМЕСТИТЬ ПочтыПользователя
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь
	|	И CRM_УчетныеЗаписиЭлектроннойПочты.Запись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщаяУчетнаяЗапись.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	ОбщаяУчетнаяЗапись КАК ОбщаяУчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПочтыПользователя.УчетнаяЗапись
	|ИЗ
	|	ПочтыПользователя КАК ПочтыПользователя";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Массив.Добавить(ВыборкаДетальныеЗаписи.УчетнаяЗапись);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция ОтправитьУведомлениеНаПочтуПриИзмененииНаСервере()
	
	УчЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	Возврат РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(УчЗапись,Истина);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьЛогЗагрузкиНажатие(Элемент)
	
	ПоказатьЗначение(,Объект.ЖурналСобытий);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.АдресЭлектроннойПочты",ПолучитьЭлАдресТекПользователя(ПользователиКлиентСервер.ТекущийПользователь()));
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрВыбора);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.УчетнаяЗапись.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТабличнуюЧастьПользователи()
	
	Для Каждого Стр Из Объект.ПользователиСопоставление Цикл
		
		Стр.Выбрано = Истина;
		Если ЗначениеЗаполнено(Стр.Пользователь) Тогда
			Стр.ЭлектронныйАдресБаза = ПолучитьЭлАдресТекПользователя(Стр.Пользователь);
			Если Стр.ЭлектронныйАдресБаза = "" Тогда
				Стр.ЭлектронныйАдресБаза = "нет email (email amoCRM:" + Стр.ЭлАдресПользователя + ")";
			КонецЕсли;
		Иначе
			Стр.ЭлектронныйАдресБаза = "нет email (email amoCRM:"+ Стр.ЭлАдресПользователя + ")";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСопоставлениеПользовательПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПользователиСопоставление.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) Тогда
		
		ТекДанные.ЭлектронныйАдресБаза = ПолучитьЭлАдресТекПользователя(ТекДанные.Пользователь);
		Если ТекДанные.ЭлектронныйАдресБаза = "" Тогда
		ТекДанные.ЭлектронныйАдресБаза = "нет email (email amoCRM:"+ ТекДанные.ЭлАдресПользователя + ")";
		КонецЕсли;
	Иначе
		
		ТекДанные.ЭлектронныйАдресБаза = "нет email (email amoCRM:"+ ТекДанные.ЭлАдресПользователя + ")";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтправкаУведомленияНажатие(Элемент)
	
	ПоказатьЗначение(,ТекстОтправка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСделкиВыбраноПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДеревоЗначенийСделки.ТекущиеДанные;
	СтрОтбор = новый Структура;
	СтрОтбор.Вставить("ИдАмо",ТекДанные.ИдАмо);
	
	МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
	
	Для Каждого Стр Из МассивСтрок Цикл
		Стр.Выбрано = ТекДанные.Выбрано;
	КонецЦикла;
	Если ТекДанные.Воронка Тогда
		ВерхДерева = ДеревоЗначенийСделки.ПолучитьЭлементы();
		Для Каждого тЭл Из ВерхДерева Цикл
			Если ТекДанные.ИдАмо = тЭл.ИдАмо Тогда
				низДерева = тЭл.ПолучитьЭлементы();
				Для Каждого СтрНиз из низДерева Цикл
					СтрНиз.Выбрано = ТекДанные.Выбрано;
					СтрОтбор = новый Структура;
					СтрОтбор.Вставить("ИдАмо",СтрНиз.ИдАмо);
					
					МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
					
					Для Каждого Стр Из МассивСтрок Цикл
						Стр.Выбрано = ТекДанные.Выбрано;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ПоказатьПредупреждение(,"Возможно отменить воронку продаж целиком, этапы продаж недоступны для отмены");
		ТекДанные.Выбрано = НЕ ТекДанные.Выбрано;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьФизЛицПриИзменении(Элемент)
	
	Если Объект.СоздаватьФизЛиц Тогда
		Элементы.КонтактныеЛицаСопоставлениеПредставлениеРеквизитаФизЛицо.Видимость = Истина;
		ПопыткаСопоставленияДанныхСРеквизитами("КонтактныеЛицаПартнеров");
	Иначе
		Элементы.КонтактныеЛицаСопоставлениеПредставлениеРеквизитаФизЛицо.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Отбор", "Партнеры", "Партнеры");
	МассивРеквизитов = Новый Массив;
	Для каждого Строка из СопоставлениеРеквизитов Цикл
		Если Строка(Строка.ТипРеквизита) <> "Строка" Тогда
			МассивРеквизитов.Добавить(Строка.ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ИсключитьРеквизиты", МассивРеквизитов);
	ПараметрыОткрытия.Вставить("ФизЛицо", Истина);
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаВыбораРеквизита", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнач = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные.ТипЗначенийФизЛицо;
	ТекДанные = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ДопРеквизит Тогда
		ТекДанные.ТипЗначенийФизЛицо = ТипЗнач;
	КонецЕсли;
	
	Если Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Адрес" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "АдресПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Телефон" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "ТелефонКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Электронная почта" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "EmailКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "E-mail для рассылки" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "EmailКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Место рождения" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "CRM_МестоРожденияКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Мобильный телефон" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "МобильныйТелефонКонтактногоЛица";
	КонецЕсли;
	
	Если НЕ ТекДанные.ИмяРеквизитаФизЛицо = "СоздатьДопРеквизит" Тогда
		
		СтрокаСопоставления = СопоставлениеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти