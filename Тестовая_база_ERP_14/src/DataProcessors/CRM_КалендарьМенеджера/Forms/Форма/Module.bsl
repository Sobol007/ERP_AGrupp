
#Область ОписаниеПеременных

&НаКлиенте
Перем ДеревоРесурсовНеОбрабатыватьПриАктивизацииСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно открыть Календарь. Подсистема 1С:CRM не используется! (см. Персональные настройки пользователя)';en='Unable to open Calendar. Subsystem 1C: CRM is not used! (see Personal settings of the user)'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ЗагрузитьНастройкиДеревоРесурсов();
	ЗагрузитьНастройкиФормы();
	
	// Значения по умолчанию
	ДатаОтображения = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	
	Если Параметры.Свойство("Интерес") Тогда
		Документ = Параметры.Интерес;
		// ВывестиНадписьИнтерес();
	КонецЕсли;
	
	Если Параметры.Свойство("МассивСтрок") Тогда
		МассивСтрок = Параметры.МассивСтрок;
		
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			НоваяСтрока = Взаимодействия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Свойство("СрокИсполнения") Тогда
		СрокИсполнения = Параметры.СрокИсполнения.СрокИсполнения;
		СрокИсполненияПросрочен = Параметры.СрокИсполнения.Просрочена;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	Если Параметры.Свойство("ДатаПоУмолчанию") Тогда
		ДатаОтображения = Параметры.ДатаПоУмолчанию;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимВыбора") Тогда
		РежимВыбора = Параметры.РежимВыбора;
	Иначе
		РежимВыбора = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВариантПериода) Тогда
		ВариантПериода = "Список";
	КонецЕсли;
	
	ЗагрузитьНастройкиКалендаря();
	
	МетаданныеПуть = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	Экраны = ПолучитьИнформациюЭкрановКлиента();
	// Защита от Толстого клиента - в нем ПолучитьИнформациюЭкрановКлиента() возвращает Неопределено и падает ошибка
	Если Экраны <> Неопределено Тогда
		РазрешениеОсновногоЭкрана = СтрЗаменить(Формат(Экраны[0].Ширина,"ЧРГ=_"),"_","") + "х" + СтрЗаменить(Формат(Экраны[0].Высота,"ЧРГ=_"),"_","");
		// РазрешениеОсновногоЭкрана = СтрЗаменить(Формат(Экраны[1].Ширина,"ЧРГ=_"),"_","") + "х" + СтрЗаменить(Формат(Экраны[1].Высота,"ЧРГ=_"),"_","");
	КонецЕсли;
	
	бДоступностьКоманднойПанели = НЕ (РазрешениеОсновногоЭкрана = "1024х768");
	
	Элементы.КнопкаДеревоРесурсовДобавитьЭлемент.Видимость	= бДоступностьКоманднойПанели;
	Элементы.КнопкаДеревоРесурсовУдалитьЭлемент.Видимость	= бДоступностьКоманднойПанели;
	Элементы.КнопкаДеревоРесурсовДобавитьГруппу.Видимость	= бДоступностьКоманднойПанели;
	Элементы.КнопкаДеревоРесурсовИзменитьГруппу.Видимость	= бДоступностьКоманднойПанели;
	Элементы.КнопкаДеревоРесурсовПереместитьВверх.Видимость	= бДоступностьКоманднойПанели;
	Элементы.КнопкаДеревоРесурсовПереместитьВниз.Видимость	= бДоступностьКоманднойПанели;
	Элементы.КнопкаДеревоРесурсовПодборЭлементов.Видимость	= бДоступностьКоманднойПанели;
	
	ОтборТипыОбъектов.Очистить();
	РегистрируемыеОбъекты = ПолучитьРегистрируемыеОбъекты();
	Для Каждого ОбъектСтрока Из РегистрируемыеОбъекты Цикл
		Если ОбъектСтрока.Объект = Метаданные.Документы.CRM_ЭтапКалендарногоПлана И
			(	НЕ	ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПодсистемуУправленияПроектами")
				ИЛИ	НЕ ПравоДоступа("Чтение", Метаданные.Документы.CRM_ЭтапКалендарногоПлана)
			) Тогда
			//
		  Продолжить;
		КонецЕсли;
		НоваяСтрока = ОтборТипыОбъектов.Добавить();
		НоваяСтрока.Пометка = Истина; // TODO: возможно нужно сохранять пометки.
		НоваяСтрока.Представление = ОбъектСтрока.Объект.Синоним;
		НоваяСтрока.ПолноеИмя = ОбъектСтрока.Объект.ПолноеИмя();
	КонецЦикла;
	ОтборТипыОбъектов.Сортировать("Представление ВОЗР");
	
	// Значения отборов
	ЗагрузитьНастройкиЗначенийОтборов();
	
	Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода	= НСтр("ru='[Поиск по подстроке]';en='[Поиск по подстроке]'");
	Элементы.КалендарьСписокТекстПоиска.Подсказка		= НСтр("ru='[Поиск по подстроке]';en='[Поиск по подстроке]'");
	КалендарьСписокФлагПоискПоПодстроке = Истина;
	
	ОтборЗначениеПользователь = ТекущийПользователь;
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// +Календари
	ОбновитьСостояниеСинхронизацииНаСервере();
	// -Календари
	
	Элементы.ОтборЗначениеПроект.Видимость = ПолучитьФункциональнуюОпцию("CRM_РаботаВЛокальномРежиме");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если РежимВыбора Тогда
		ВариантПериода = "Список";
		Элементы.ВариантПериода.Видимость = Ложь;
		ТекущийЭлемент = Элементы.Календарь;
	КонецЕсли;
	
	ДеревоРесурсовЭлементы = ДеревоРесурсов.ПолучитьЭлементы();
	Если ДеревоРесурсовЭлементы.Количество() > 0 Тогда
		ДеревоРесурсовНеОбрабатыватьПриАктивизацииСтроки = Истина;
		Элементы.ДеревоРесурсов.ТекущаяСтрока = ДеревоРесурсовЭлементы[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ВариантПериодаПриИзменении(Неопределено);
	ОбновитьНадписи();
	УстановитьВидимостьЭлементов();
	Элементы.Календарь.ВыделенныеДаты.Добавить(ТекущаяДата());
	
	// +Календари
	ПодключитьОбработчикОжидания("ОбновитьСостояниеСинхронизации", 60);
	// -Календари
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщиеНастройкиИзКэша = ПолучитьНастройкиОбщиеКлиент();
	ОбновлятьКалендарь = ОбщиеНастройкиИзКэша.КалендарьОбновлятьПриЛюбыхСобытиях;
	
	Попытка		бОбрабатывать = (ИмяСобытия = "ОбновленыДанныеСобытия" Или ИмяСобытия = "НастройкиКалендаряИзменены");
	Исключение	бОбрабатывать = Ложь;
	КонецПопытки;		
	
	Если бОбрабатывать Тогда 
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ОбновлятьКалендарь") Тогда
			Если Параметр.ОбновлятьКалендарь = 0 Тогда
				бОбрабатывать = Ложь;
			КонецЕсли;
			Если ОбновлятьКалендарь И НЕ бОбрабатывать Тогда
				бОбрабатывать = Истина;
			КонецЕсли;	
		КонецЕсли;			
	КонецЕсли;		
	
	бОбновлятьКалендарь = Ложь;
	
	Если бОбрабатывать Тогда
		Если ИмяСобытия = "НастройкиКалендаряИзменены" Тогда
			ЗагрузитьНастройкиКалендаря();
			КалендарьОбновитьКлиент();
		КонецЕсли;
	КонецЕсли;
	
	Если бОбновлятьКалендарь И НЕ (Параметр.ОбновлятьКалендарь > 1) Тогда
		КалендарьОбновитьКлиент();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьПланировщик" Тогда
		КалендарьОбновитьКлиент();
	КонецЕсли;
	
	// +Календари
	Если ИмяСобытия = "СинхронизацияКалендаря" Тогда
		КалендарьОбновитьКлиент();
		ОбновитьНадписи();
		ОбновитьСостояниеСинхронизации();
	ИначеЕсли ИмяСобытия = "НастроенаСинхронизацияКалендаря" Тогда
		ОбновитьСостояниеСинхронизации();
	КонецЕсли;
	// -Календари
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВесьДеньПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТекущегоЭлементаНаВесьДень(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("КалендарьПриИзмененииЗавершение", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзмененииЗавершение()
	
	ВариантПериодаПриИзменении(Неопределено);
	// Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриАктивизацииДаты(Элемент)
	
	// Планировщик
	Если НЕ ВариантПериода = "Список" И НЕ ВариантПериода = "ПоРесурсам" Тогда
		// ВыделитьДатыОтображения(ЭтотОбъект);
		УстановитьПредставлениеПериода(ЭтотОбъект);
		// Элементы.Календарь.Обновить();
	КонецЕсли;
	// ОбновитьКалендарь();
	// ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьВыбор(Элемент, ВыбраннаяДата)
	Если РежимВыбора Тогда
		ОповеститьОВыборе(ВыбраннаяДата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	ТекМесяц = Неопределено;
	СтруктураПоиска = Новый Структура("НачалоМесяца");
	Если ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда	
		Баллов  = ПолучитьПредельноеКоличествоБалловПользователь(ОтборЗначениеПользователь);
	Иначе
		Баллов  = ПолучитьПредельноеКоличествоБалловПодразделение(ОтборЗначениеПодразделение);
	КонецЕсли;	
	
	Для Каждого ПериодКалендаря Из ОформлениеПериода.Даты Цикл
		НачалоМесяца = НачалоМесяца(ПериодКалендаря.Дата);
		// Заполним кэш, если надо
		Если НачалоМесяца <> ТекМесяц Тогда
			ТекМесяц = НачалоМесяца;
			СтруктураПоиска.НачалоМесяца = НачалоМесяца;
			Если МесяцыКэша.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				// Вылетает платформа, решить при доработке.
				НачалоМесяцаРаскраски = НачалоМесяца;
				ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКэшОформления", 0.1, Истина);
				Возврат;
				// РаскраситьКалендарь(НачалоМесяца);
			КонецЕсли;
		КонецЕсли;
		
		Цвет = РаскраситьДень(ПериодКалендаря.Дата, Баллов);
		
		Если Цвет <> Неопределено Тогда
			ПериодКалендаря.ЦветФона = Цвет;
			
			// На черном фоне серый шрифт не виден - сделаем белый.
			Если Цвет = WebЦвета.Черный Тогда
				ПериодКалендаря.ЦветТекста = WebЦвета.Белый;
			КонецЕсли;
			// Если это прошлый период и событий нет, то цвет текста делаем, как и для дат будущего периода.
			Если Цвет = WebЦвета.Белый И НачалоДня(ПериодКалендаря.Дата) < НачалоДня(ТекущаяДата()) Тогда
				ПериодКалендаря.ЦветТекста = WebЦвета.Серебряный;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений();
	ДанныеВыбора.Добавить("[ПоискПоПолномуНазванию]", НСтр("ru = '[Поиск по полному названию]'"));
	ДанныеВыбора.Добавить("[ПоискПоПодстроке]", НСтр("ru='[Поиск по подстроке]';en='[Поиск по подстроке]'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Если ВыбранноеЗначение = "[ПоискПоПолномуНазванию]" Тогда 
			
			Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода	= НСтр("ru = '[Поиск по полному названию]'");
			Элементы.КалендарьСписокТекстПоиска.Подсказка		= НСтр("ru = '[Поиск по полному названию]'");
			
		ИначеЕсли ВыбранноеЗначение = "[ПоискПоПодстроке]" Тогда
			
			Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода	= НСтр("ru='[Поиск по подстроке]';en='[Поиск по подстроке]'");
			Элементы.КалендарьСписокТекстПоиска.Подсказка		= НСтр("ru='[Поиск по подстроке]';en='[Поиск по подстроке]'");
			
		КонецЕсли;
		
		Если ВыбранноеЗначение = "[ПоискПоПодстроке]" Тогда
			КалендарьСписокФлагПоискПоПодстроке = Истина;
		Иначе
			КалендарьСписокФлагПоискПоПодстроке = Ложь;
		КонецЕсли;
		// КалендарьСписокТекстПоискаОткрытие(Элемент, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	СписокДляВыбора = КалендарьСписокТекстПоискаСписокВыбора;
	Для каждого ЭлементСписка Из СписокДляВыбора Цикл
		Если ВРег(Лев(ЭлементСписка, 6)) = "[ПОИСК" Тогда
			Продолжить;
		КонецЕсли;
		Если ЛЕВ(ВРег(ЭлементСписка.Значение),СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			 ДанныеВыбора.Добавить(ЭлементСписка.Значение,, Истина);
			 КоличествоНайденных = КоличествоНайденных + 1;
			 Если КоличествоНайденных > 7 Тогда
				 Прервать;
			 КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ДанныеВыбора = Неопределено;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаПриИзменении(Элемент)
	
	// Если ЗначениеЗаполнено(КалендарьСписокТекстПоиска) И Объект.ТекущееОтображение <> "Список" Тогда
	//	ПризнакПереключениеВРежимСпискаПоиском = Истина;
	//	КомандаТекущееОтображениеСписок(Неопределено);
	// КонецЕсли;
	
	КалендарьСписокОбновитьПоБыстромуПоиску();
	
	// НастроитьВидимостьИДоступностьФормы();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	КалендарьСписокОбновитьПоБыстромуПоиску();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		Если КалендарьСписокТекстПоиска <> Элемент.ТекстРедактирования Тогда
			КалендарьСписокТекстПоиска = Элемент.ТекстРедактирования;
		КонецЕсли;
		КалендарьСписокОбновитьПоБыстромуПоиску();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	Элементы.ГруппаОтборы.Видимость		= НЕ (ВариантПериода = "ПоРесурсам");
	Элементы.ГруппаРесурсы.Видимость	= (ВариантПериода = "ПоРесурсам");
	
	ВыводимыйДень = Неопределено;
	Если ВариантПериода = "Список" Тогда
		
		// Элементы.ГруппаРесурсы.
		
		Элементы.ПанельОтборыРесурсы.ТекущаяСтраница = Элементы.СтраницаОтборов;
		Элементы.СтраницыВидыКалендаря.ТекущаяСтраница = Элементы.СтраницаАвтомотиватор;
		
		Элементы.Календарь.РежимВыделения = РежимВыделенияДаты.Одиночный;
	ИначеЕсли ВариантПериода = "ПоРесурсам" Тогда
		
		Элементы.Календарь.РежимВыделения = РежимВыделенияДаты.Множественный;
		
		Элементы.ПанельОтборыРесурсы.ТекущаяСтраница = Элементы.СтраницаРесурсов;
		Элементы.СтраницыВидыКалендаря.ТекущаяСтраница = Элементы.СтраницаПланировщик;
	Иначе
		Элементы.ПанельОтборыРесурсы.ТекущаяСтраница = Элементы.СтраницаОтборов;
		Элементы.СтраницыВидыКалендаря.ТекущаяСтраница = Элементы.СтраницаПланировщик;
		Если ВариантПериода = "День" Тогда
			Элементы.Календарь.РежимВыделения = РежимВыделенияДаты.Множественный;
		Иначе
			Элементы.Календарь.РежимВыделения = РежимВыделенияДаты.Одиночный;
		КонецЕсли;
		// ВыделитьДатыОтображения(ЭтотОбъект);
		// УстановитьПредставлениеПериода(ЭтотОбъект);
		// Элементы.Календарь.Обновить();
		
		СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	КонецЕсли;
	
	КалендарьОбновитьКлиент();
	
	ОбновитьНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтображатьЗавершенныеПриИзменении(Элемент)
	ВариантПериодаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	Если НовыйЭлемент Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Дата",						Элемент.ВыделенныеЭлементы[0].Начало);
		ЗначенияЗаполнения.Вставить("ПлановаяДата",				Элемент.ВыделенныеЭлементы[0].Начало);
		ЗначенияЗаполнения.Вставить("ПлановаяДатаЗавершение",	Элемент.ВыделенныеЭлементы[0].Конец);
		ЗначенияЗаполнения.Вставить("Тема",						Элемент.ВыделенныеЭлементы[0].Текст);
		ЗначенияЗаполнения.Вставить("Содержание",				Элемент.ВыделенныеЭлементы[0].Текст);
		ЗначенияЗаполнения.Вставить("Ответственный",			ОтборЗначениеПользователь);
		ЗначенияЗаполнения.Вставить("ВидВзаимодействия",		CRM_ВзаимодействияСервер.ПолучитьОсновнойВидВзаимодействия(Истина));
		ЗначенияЗаполнения.Вставить("Помещение", Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("Помещение"));
		
		ПараметрыМероприятия = СоздатьНовоеМероприятие(ЗначенияЗаполнения);
		
		СтруктураЗначений = Новый Структура;
		СтруктураЗначений.Вставить("Источник", ПараметрыМероприятия.Ссылка);
		СтруктураЗначений.Вставить("ДокументИнтерес", );
		СтруктураЗначений.Вставить("ПериодНачало", Элемент.ВыделенныеЭлементы[0].Начало);
		СтруктураЗначений.Вставить("ПериодОкончание", Элемент.ВыделенныеЭлементы[0].Конец);
		СтруктураЗначений.Вставить("РеквизитНачало", "ПлановаяДата");
		СтруктураЗначений.Вставить("РеквизитОкончание", "ПлановаяДатаЗавершение");
		
		Элемент.ВыделенныеЭлементы[0].Значение = СтруктураЗначений;
		Элемент.ВыделенныеЭлементы[0].Текст = ПараметрыМероприятия.Текст;
		
		Если ЗначениеЗаполнено(ПараметрыМероприятия.ЦветФона) Тогда
			Элемент.ВыделенныеЭлементы[0].ЦветФона = Новый Цвет(ПараметрыМероприятия.ЦветФона.ЦветКрасный,ПараметрыМероприятия.ЦветФона.ЦветЗеленый,ПараметрыМероприятия.ЦветФона.ЦветСиний);
		КонецЕсли;
	Иначе
		ОбрабатываемыеЭлементы = Новый Массив;
		
		Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
			Если НЕ (ВыделенныйЭлемент.Значение = Неопределено)
				И ТипЗнч(ВыделенныйЭлемент.Значение.Источник) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Ссылка",			ВыделенныйЭлемент.Значение.Источник);
				СтруктураПараметров.Вставить("ТипЭтапа",		CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыделенныйЭлемент.Значение.Источник, "ТипЭтапа"));
				СтруктураПараметров.Вставить("ПериодНачало",	ВыделенныйЭлемент.Начало);
				СтруктураПараметров.Вставить("ПериодОкончание",	ВыделенныйЭлемент.Конец);
				СтруктураПараметров.Вставить("ИзПланировщика",	Истина);
				ОповещениеПереносКТ = Новый ОписаниеОповещения("ПереносКТЗавершение", ЭтотОбъект, СтруктураПараметров); 
				ФормаПереноса = ПолучитьФорму("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаПереносаСроков", СтруктураПараметров, ЭтотОбъект, Истина);
				ОтменаРедактирования = (ФормаПереноса = Неопределено);
				Если ОтменаРедактирования Тогда
					Возврат;
				КонецЕсли;
				ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаПереносаСроков", СтруктураПараметров, ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно , , ОповещениеПереносКТ, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли НЕ (ВыделенныйЭлемент.Значение = Неопределено) Тогда
				ОбрабатываемыйЭлемент = Новый Структура;
				ОбрабатываемыйЭлемент.Вставить("Источник",			ВыделенныйЭлемент.Значение.Источник);
				ОбрабатываемыйЭлемент.Вставить("ПериодНачало",		ВыделенныйЭлемент.Начало);
				ОбрабатываемыйЭлемент.Вставить("ПериодОкончание",	ВыделенныйЭлемент.Конец);
				ОбрабатываемыйЭлемент.Вставить("РеквизитНачало",	ВыделенныйЭлемент.Значение.РеквизитНачало);
				ОбрабатываемыйЭлемент.Вставить("РеквизитОкончание",	ВыделенныйЭлемент.Значение.РеквизитОкончание);
				
				ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
				// Иначе
				//	
				//	ПараметрыФормы = Новый Структура;
				//	ПараметрыФормы.Вставить("Начало", Элемент.ВыделенныеЭлементы[0].Начало);
				//	ПараметрыФормы.Вставить("Окончание", Элемент.ВыделенныеЭлементы[0].Конец);
				//	ПараметрыФормы.Вставить("Наименование", Элемент.ВыделенныеЭлементы[0].Текст);
				//	
				//	ОткрытьФорму("Документ.CRM_Мероприятие.ФормаОбъекта", ПараметрыФормы, Элемент);
			КонецЕсли;
			НайденныеВзаимодействия = Мероприятия.НайтиСтроки(Новый Структура("Объект", ВыделенныйЭлемент.Значение.Источник));
			Если НайденныеВзаимодействия.Количество() > 0 Тогда
				Для Каждого тОбъект Из НайденныеВзаимодействия Цикл 
					ВыделенныйЭлемент.Текст = ПолучитьПредставлениеСобытия(тОбъект.Тема, тОбъект.Партнер, тОбъект.Пользователь, ВыделенныйЭлемент.Начало, ВыделенныйЭлемент.Конец);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НовыйЭлемент Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Дата",						Элемент.ВыделенныеЭлементы[0].Начало);
		ЗначенияЗаполнения.Вставить("ПлановаяДата",				Элемент.ВыделенныеЭлементы[0].Начало);
		ЗначенияЗаполнения.Вставить("ПлановаяДатаЗавершение",	Элемент.ВыделенныеЭлементы[0].Конец);
		ЗначенияЗаполнения.Вставить("Тема",						Элемент.ВыделенныеЭлементы[0].Текст);
		ЗначенияЗаполнения.Вставить("Содержание",				Элемент.ВыделенныеЭлементы[0].Текст);
		ЗначенияЗаполнения.Вставить("Ответственный",			ОтборЗначениеПользователь);
		ЗначенияЗаполнения.Вставить("ВидВзаимодействия",		CRM_ВзаимодействияСервер.ПолучитьОсновнойВидВзаимодействия(Истина));
		ЗначенияЗаполнения.Вставить("Помещение", Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("Помещение"));
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, Элемент);
		
	Иначе
		
		ОткрытьФормуТекущегоЭлементаПланировщика(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		// +Проекты
		Если ТипЗнч(ВыделенныйЭлемент.Значение.Источник) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		// -Проекты
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("Источник",			ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("ПометкаУдаления",	Истина);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	Отказ = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
		Назад(Неопределено);
	ИначеЕсли ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
		Вперед(Неопределено);
	КонецЕсли;
	
	// Если ВариантПериода = "Месяц" Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	//	
	//	Если ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекущаяДатаСеанса) Тогда
	//		ДатаОтображения = ТекущаяДатаСеанса;
	//	ИначеЕсли ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
	//		ДатаОтображения = ДобавитьМесяц(ДатаОтображения, -1);
	//	ИначеЕсли ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
	//		ДатаОтображения = ДобавитьМесяц(ДатаОтображения, 1);
	//	КонецЕсли;
	//	
	//	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	//	Планировщик.ТекущиеПериодыОтображения.Очистить();
	//	Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	//	
	//	Планировщик.ИнтервалыФона.Очистить();
	//	Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
	//	Интервал.Цвет = Новый Цвет(250, 250, 250);
	//	Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
	//		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
	//		Интервал.Цвет = Новый Цвет(223, 255, 223);
	//	КонецЕсли;
	// Иначе
	//	
	//	ДатаОтображения = ТекущиеПериодыОтображения[0].Начало;
	//	
	// КонецЕсли;
	//
	//// ВыделитьДатыОтображения(ЭтотОбъект);
	// УстановитьПредставлениеПериода(ЭтотОбъект);
	// КалендарьПриИзменении(Элементы.Календарь);
	//// Элементы.Календарь.Обновить();
	//
	// Если НЕ ВариантПериода = "Список" Тогда
	//	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	// КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранКалендарьПриИзменении(Элемент)
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньПриАктивизации(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = НЕ (Элементы.ВесьДень.ВыделенныеЭлементы.Количество() = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьЗначениеПланировщикаНаВесьДень();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДалееНажатие(Элемент)
	ДатаОтображения = ДатаОтображения + 14 * 86400; // Добавляем 2 недели
	ВариантПериодаПриИзменении(Неопределено);
	ОбновитьНадписи();
	Элементы.Календарь.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура МероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекОбъект = Элемент.ТекущиеДанные.Объект;
		Если ЗначениеЗаполнено(ТекОбъект) Тогда
			ПоказатьЗначение(,ТекОбъект);
			// ТекОбъект = ПолучитьНужныйДокументДляФормы(ТекОбъект);
			// ПараметрыФормы = Новый Структура("Ключ", ТекОбъект);
			// ИмяДокумента = ПолучитьИмяДокументаПоСсылке(ТекОбъект);
			// Форма = ПолучитьФорму(ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы);
			// Форма.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область СинхронизацияКалендарей

&НаКлиенте
Процедура ПодсказкаСинхронизациОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "Настройка" Тогда
		ОткрытьФорму("Справочник.CRM_СервисыКалендарей.Форма.НастроитьСинхронизацию");
	ИначеЕсли НавигационнаяСсылка = "Отключить" Тогда
		НачатьОтключение();
	ИначеЕсли НавигационнаяСсылка = "Справка" Тогда
		Если СервисКалендарей = ПредопределенноеЗначение("Справочник.CRM_СервисыКалендарей.Google") Тогда
			АдресСправки = "https://1crm.ru/help/integratsii-google-calendar/";
		Иначе
			АдресСправки = CRM_СинхронизацияКалендарейКлиентПереопределяемый.АдресСправки(СервисКалендарей);
		КонецЕсли;
		ПерейтиПоНавигационнойСсылке(АдресСправки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРМКалендарь"));
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	Если НЕ РежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОВыборе(ДатаОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	Если РежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидВзаимодействия", CRM_ВзаимодействияСервер.ПолучитьОсновнойВидВзаимодействия(Истина));
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, Элементы.Планировщик);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Если Элементы.СтраницыВидыКалендаря.ТекущаяСтраница = Элементы.СтраницаАвтомотиватор Тогда
		КэшОформления.Очистить();
		МесяцыКэша.Очистить();
		РабочиеДни.Очистить();
		УстановитьВидимостьЭлементов();
		Элементы.Календарь.Обновить();
	КонецЕсли;
	// ВариантПериодаПриИзменении(Неопределено);
	КалендарьОбновитьКлиент();
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	ДатаОтображения = ТекущаяДата();
	КалендарьПриИзменении(Элементы.Календарь);
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	Если ВариантПериода = "Список" ИЛИ ВариантПериода = "ПоРесурсам" ИЛИ ВариантПериода = "День" Тогда
		ДатаОтображения = ДатаОтображения + 86400;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		ДатаОтображения = ДатаОтображения + 7*86400;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		ДатаОтображения = ДобавитьМесяц(ДатаОтображения, 1);
	КонецЕсли;
	ПодключитьОбработчикОжидания("ИзменитьПериод", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	Если ВариантПериода = "Список" ИЛИ ВариантПериода = "ПоРесурсам" ИЛИ ВариантПериода = "День" Тогда
		ДатаОтображения = ДатаОтображения - 86400;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		ДатаОтображения = ДатаОтображения - 7*86400;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		ДатаОтображения = ДобавитьМесяц(ДатаОтображения, -1);
	КонецЕсли;
	ПодключитьОбработчикОжидания("ИзменитьПериод", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	Параметрыформы = Новый Структура("ТекущиеНастройки,НастройкиПоУмолчанию",
									 Объект.КэшНастроекОтображения,
									 ПолучитьНастройкиОтображенияПоУмолчанию());
	
	ФормаНастройки = ПолучитьФорму(МетаданныеПуть + ".Форма.Настройки", Параметрыформы, ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно);
	
	ДополнительныеПараметры = Новый Структура("ФормаНастройки",ФормаНастройки);
	Оповещение = Новый ОписаниеОповещения("ОткрытиеФормыНастройкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройки.ОписаниеОповещенияОЗакрытии = Оповещение;
	ФормаНастройки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры.Свойство("ФормаНастройки") Тогда
		ФормаНастройки = ДополнительныеПараметры.ФормаНастройки;
		Если ФормаНастройки.НастройкиБылиИзменены Тогда
			ЗагрузитьНастройкиКалендаря();
			
			// Если Объект.ТекущееОтображение = "Неделя" Тогда
			//	ДатаКалендаряВыделитьНеделю();
			// КонецЕсли;
			
			НастройкиОбщие = ПолучитьНастройкиОбщиеКлиент();
			Если	НастройкиОбщие.Свойство("Автообновление") И НастройкиОбщие.Автообновление = Истина
				И	НастройкиОбщие.Свойство("ПериодАвтообновления") И ТипЗнч(НастройкиОбщие.ПериодАвтообновления) = Тип("Число") Тогда
				//
				Попытка ПодключитьОбработчикОжидания("Подключаемый_Автообновление", Макс(НастройкиОбщие.ПериодАвтообновления * 60, 60));
				Исключение КонецПопытки;
			Иначе
				Попытка ОтключитьОбработчикОжидания("Подключаемый_Автообновление");
				Исключение КонецПопытки;
			КонецЕсли;
			
			ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
			КалендарьОбновитьКлиент();
			
			Элементы.ДеревоРесурсов.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	// Если Объект.ТекущееОтображение <> "Неделя" Или Не ФормаНастройки.НастройкиБылиИзменены Тогда
	//	Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
	//	Для Каждого ВыделеннаяДата Из МассивДат Цикл
	//		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(ВыделеннаяДата);
	//	КонецЦикла;
	// КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтборПоАктивностиВзаимодействий(Команда)
	НеОтображатьЗавершенные = Не НеОтображатьЗавершенные;
	ВариантПериодаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСкрытьОтборы(Команда)
	
	Элементы.КнопкаПоказатьСкрытьОтборы.Пометка		= НЕ Элементы.КнопкаПоказатьСкрытьОтборы.Пометка;
	Элементы.ГруппаКалендарь.Видимость				= Элементы.КнопкаПоказатьСкрытьОтборы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#Область СинхронизацияКалендарей

&НаКлиенте
Процедура ДействиеСинхронизации(Команда)
	
	Если СостояниеСинхронизации.Действие = "Настройка" Тогда
		ОткрытьФорму("Справочник.CRM_СервисыКалендарей.Форма.НастроитьСинхронизацию");
	Иначе
		СинхронизироватьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция РаскраситьДень(День, Баллов)
	СтруктураПоиска = Новый Структура("День", День);
	НайденныеСтроки = КэшОформления.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Загрузка = НайденныеСтроки[0].Балл;
	Иначе
		Загрузка = 0;		
	КонецЕсли;
	НайденныеСтроки = РабочиеДни.НайтиСтроки(СтруктураПоиска);
	ЭтоРабочийДень = НайденныеСтроки.Количество() > 0;
	Если Загрузка <= 0.00 * Баллов Тогда
		Цвет = ?(ЭтоРабочийДень, WebЦвета.Белый, WebЦвета.СеребристоСерый);
	ИначеЕсли Загрузка > 0.00 * Баллов И Загрузка < 0.50 * Баллов Тогда
		Цвет = WebЦвета.СветлоЗолотистый;
	ИначеЕсли Загрузка >= 0.50 * Баллов И Загрузка <= 1.00 * Баллов Тогда
		Цвет = WebЦвета.СветлоЗеленый;
	ИначеЕсли Не ЭтоРабочийДень Тогда
		Цвет = WebЦвета.СеребристоСерый;
	Иначе
		Цвет = WebЦвета.Фиолетовый;
	КонецЕсли;
	Возврат Цвет;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьПереносКТНаСервере(Комментарий, ПараметрыКТ)
	
	ОбъектКТ = ПараметрыКТ.Ссылка.ПолучитьОбъект();
	Строка = ОбъектКТ.Смещения.Добавить();
	Строка.СмещениеДатаНачало =НачалоДня(ПараметрыКТ.ПериодНачало);
	Строка.СмещениеДатаОкончание = КонецДня(ПараметрыКТ.ПериодОкончание);
	Строка.Комментарий 	 = Комментарий;
	Строка.Автор		 = Пользователи.АвторизованныйПользователь();
	// изменим дату КТ
	ОбъектКТ.ПлановаяДатаНачала    = ПараметрыКТ.ПериодНачало;
	ОбъектКТ.ПлановаяДатаОкончания = ПараметрыКТ.ПериодОкончание;
	ОбъектКТ.Записать();
	
КонецПроцедуры

&НаСервере
Функция ДатаМероприятия(День)
	НомерДняНедели = ДеньНедели(День);
	
	Если НомерДняНедели = 1 Тогда
		Результат = "пн";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Результат = "вт";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Результат = "ср";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Результат = "чт";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Результат = "пт";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Результат = "сб";
	ИначеЕсли НомерДняНедели = 7 Тогда
		Результат = "вс";
	Иначе
		// Непонятно, что это такое. Пусть будет воскресенье.
		Результат = "вс";
	КонецЕсли;
	
	Результат = Результат + " " + День(День);
	
	НомерМесяца = Месяц(День);
	
	Если НомерМесяца = 1 Тогда
		Результат = Результат + " " + "янв";
	ИначеЕсли НомерМесяца = 2 Тогда
		Результат = Результат + " " + "фев";
	ИначеЕсли НомерМесяца = 3 Тогда
		Результат = Результат + " " + "мар";
	ИначеЕсли НомерМесяца = 4 Тогда
		Результат = Результат + " " + "апр";
	ИначеЕсли НомерМесяца = 5 Тогда
		Результат = Результат + " " + "мая";
	ИначеЕсли НомерМесяца = 6 Тогда
		Результат = Результат + " " + "июн";
	ИначеЕсли НомерМесяца = 7 Тогда
		Результат = Результат + " " + "июл";
	ИначеЕсли НомерМесяца = 8 Тогда
		Результат = Результат + " " + "авг";
	ИначеЕсли НомерМесяца = 9 Тогда
		Результат = Результат + " " + "сен";
	ИначеЕсли НомерМесяца = 10 Тогда
		Результат = Результат + " " + "окт";
	ИначеЕсли НомерМесяца = 11 Тогда
		Результат = Результат + " " + "ноя";
	ИначеЕсли НомерМесяца = 12 Тогда
		Результат = Результат + " " + "дек";
	Иначе
		// Вообще непонятно... Пусть будет бобр.
		Результат = Результат + " " + "бобр";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВремяМероприятия(ПериодНачало, ПериодКонец, НаВесьДень)
	
	Результат = "";
	
	Если НаВесьДень Тогда
		Возврат "Весь день"
	КонецЕсли;
	
	ДатаНачало = НачалоДня(ПериодНачало);
	ДатаКонец  = НачалоДня(ПериодКонец);
	
	ВремяНачало = '00010101000000' + (ПериодНачало - ДатаНачало) - Секунда(ПериодНачало);
	ВремяКонец  = '00010101000000' + (ПериодКонец  - ДатаКонец)  - Секунда(ПериодКонец);
	
	УказаноВремяНачало = (ВремяНачало <> '00010101000000');
	УказаноВремяКонец  = (ВремяКонец  <> '00010101000000');
	
	ПредставлениеНачало = Формат(ВремяНачало, "ДЛФ=T");
	ПредставлениеКонец  = Формат(ВремяКонец,  "ДЛФ=T");
	
	// отсекаем секунды
	ПредставлениеНачало = Сред(ПредставлениеНачало, 1, СтрДлина(ПредставлениеНачало) - 3);
	ПредставлениеКонец  = Сред(ПредставлениеКонец , 1, СтрДлина(ПредставлениеКонец)  - 3);
	
	ВОдинДень = (ДатаНачало = ДатаКонец);
	
	ПредставлениеДатыКонец = ДатаМероприятия(ДатаКонец);
	
	Если НЕ УказаноВремяНачало И НЕ УказаноВремяКонец Тогда
		Если ВОдинДень Тогда
			Возврат "Весь день";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УказаноВремяНачало Тогда
		Если ВОдинДень Тогда
			Возврат "";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УказаноВремяКонец Тогда
		Если ВОдинДень Тогда
			Возврат "";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Если ВОдинДень Тогда
		Возврат ПредставлениеНачало + " - " + ПредставлениеКонец;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат Неопределено; // Такого быть не должно, но явно укажем неопределенность ситуации.
КонецФункции

&НаСервере
Процедура РаскраситьКалендарь(ТекДатаКалендаря)
	// Кэш от года и более - очищаем, чтобы не тормозить при поиске в кэше.
	Если КэшОформления.Количество() > 400 ИЛИ МесяцыКэша.Количество() > 100 Тогда 
		КэшОформления.Очистить();
		МесяцыКэша.Очистить();
		РабочиеДни.Очистить();
	КонецЕсли;
	
	НачалоРаскраски = НачалоМесяца(ТекДатаКалендаря);
	КонецРаскраски  = КонецМесяца(ТекДатаКалендаря);
	
	Запрос = Новый Запрос();
	Если НЕ РежимВыбора Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(CRM_СобытияКалендаря.Балл) КАК Балл,
		|	ВЫБОР
		|		КОГДА CRM_СобытияКалендаря.Завершено
		|			ТОГДА НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодОкончание, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодНачало, ДЕНЬ)
		|	КОНЕЦ КАК День
		|ИЗ
		|	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
		|ГДЕ
		|	CRM_СобытияКалендаря.Пользователь = &Пользователь
		|	И ВЫБОР
		|	    КОГДА CRM_СобытияКалендаря.Завершено
		|				ТОГДА CRM_СобытияКалендаря.ПериодОкончание МЕЖДУ &НачалоРаскраски И &КонецРаскраски
		|			ИНАЧЕ CRM_СобытияКалендаря.ПериодНачало МЕЖДУ &НачалоРаскраски И &КонецРаскраски
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА CRM_СобытияКалендаря.Объект ССЫЛКА Документ.CRM_Взаимодействие
		|				ТОГДА CRM_СобытияКалендаря.Объект.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА CRM_СобытияКалендаря.Завершено
		|			ТОГДА НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодОкончание, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодНачало, ДЕНЬ)
		|	КОНЕЦ";
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ВзаимодействияИзДокумента.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
		|			ТОГДА НАЧАЛОПЕРИОДА(ВзаимодействияИзДокумента.ДатаЗавершенияВзаимодействия, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВзаимодействияИзДокумента.ПлановаяДата, ДЕНЬ)
		|	КОНЕЦ КАК ПериодНачало,
		|	ВзаимодействияИзДокумента.СтатусВзаимодействия КАК СостояниеСобытия,
		|	ВзаимодействияИзДокумента.Баллы КАК Балл
		|ПОМЕСТИТЬ Взаимодействия
		|ИЗ
		|	&ВзаимодействияИзДокумента КАК ВзаимодействияИзДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_СобытияКалендаря.Балл КАК Балл,
		|	ВЫБОР
		|		КОГДА CRM_СобытияКалендаря.Завершено
		|			ТОГДА НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодОкончание, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодНачало, ДЕНЬ)
		|	КОНЕЦ КАК ПериодНачало
		|ПОМЕСТИТЬ ВсеВзаимодействия
		|ИЗ
		|	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
		|ГДЕ
		|	CRM_СобытияКалендаря.Пользователь = &Пользователь
		|	И ВЫБОР
		|			КОГДА CRM_СобытияКалендаря.Завершено
		|				ТОГДА CRM_СобытияКалендаря.ПериодОкончание МЕЖДУ &НачалоРаскраски И &КонецРаскраски
		|			ИНАЧЕ CRM_СобытияКалендаря.ПериодНачало МЕЖДУ &НачалоРаскраски И &КонецРаскраски
		|		КОНЕЦ
		|	И ВЫРАЗИТЬ(CRM_СобытияКалендаря.Объект КАК Документ.CRM_Взаимодействие).ДокументОснование <> &Интерес
		|	И ВЫБОР
		|			КОГДА CRM_СобытияКалендаря.Объект ССЫЛКА Документ.CRM_Взаимодействие
		|				ТОГДА CRM_СобытияКалендаря.Объект.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Взаимодействия.Балл,
		|	Взаимодействия.ПериодНачало
		|ИЗ
		|	Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ПериодНачало МЕЖДУ &НачалоРаскраски И &КонецРаскраски
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВсеВзаимодействия.Балл) КАК Балл,
		|	НАЧАЛОПЕРИОДА(ВсеВзаимодействия.ПериодНачало, ДЕНЬ) КАК День
		|ИЗ
		|	ВсеВзаимодействия КАК ВсеВзаимодействия
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВсеВзаимодействия.ПериодНачало, ДЕНЬ)";
		
	КонецЕсли;	
	Запрос.УстановитьПараметр("Пользователь",    ОтборЗначениеПользователь);
	Запрос.УстановитьПараметр("Подразделение",   ОтборЗначениеПодразделение);
	Запрос.УстановитьПараметр("НачалоРаскраски", НачалоРаскраски);
	Запрос.УстановитьПараметр("КонецРаскраски",  КонецРаскраски);
	Запрос.УстановитьПараметр("ВзаимодействияИзДокумента", Взаимодействия.Выгрузить());
	Запрос.УстановитьПараметр("Интерес", Документ);
	Если Не ЗначениеЗаполнено(ОтборЗначениеПользователь) И ЗначениеЗаполнено(ОтборЗначениеПодразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_СобытияКалендаря.Пользователь = &Пользователь", "CRM_СобытияКалендаря.Подразделение = &Подразделение");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = КэшОформления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	СтрокаМесяцев = МесяцыКэша.Добавить();
	СтрокаМесяцев.НачалоМесяца = НачалоРаскраски;
	
	МассивДат = Новый Массив;
	МассивДат.Добавить(НачалоДня(НачалоРаскраски));
	МассивДат.Добавить(НачалоДня(КонецРаскраски));
	
	Подразделение = ОтборЗначениеПользователь.Подразделение;
	Если ЗначениеЗаполнено(Подразделение)
		И ЗначениеЗаполнено(Подразделение.ГрафикРаботы) Тогда
		ГрафикРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(Подразделение.ГрафикРаботы, НачалоРаскраски, КонецРаскраски);
		ГрафикРаботы.Свернуть("ДатаГрафика");
		Для каждого ТекДата Из ГрафикРаботы Цикл
			НоваяСтрока = РабочиеДни.Добавить();
			НоваяСтрока.День = ТекДата.ДатаГрафика;
		КонецЦикла;	
	Иначе
		КалендарныйГрафик = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(МассивДат);
		Если КалендарныйГрафик <> Неопределено Тогда
			Для каждого ТекДата Из КалендарныйГрафик Цикл
				Если ТекДата.Значение.ДеньРабочийПоПроизводственномуКалендарю Тогда 
					НоваяСтрока = РабочиеДни.Добавить();
					НоваяСтрока.День = ТекДата.Ключ;
				КонецЕсли;	
			КонецЦикла;		
		КонецЕсли;	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписи()
	Элементы.НадписьДатаРасписания.Заголовок = "Расписание составлено до " + Формат(ДатаОтображения + 14 * 86400, "ДЛФ=DD");
	
	Если ВариантПериода = "День" Тогда
		ТекстПериода = Формат(ДатаОтображения, "ДФ=""дд ММММ""");
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		ТекстПериода = Формат(НачалоНедели(ДатаОтображения), "ДФ=""дд ММММ""") + " - " + Формат(КонецНедели(ДатаОтображения), "ДФ=""дд ММММ""");
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		ТекстПериода = Формат(НачалоМесяца(ДатаОтображения), "ДФ=""дд ММММ""") + " - " + Формат(КонецМесяца(ДатаОтображения), "ДФ=""дд ММММ""");
	ИначеЕсли ВариантПериода = "Список" Тогда
		ТекстПериода = Формат(ДатаОтображения, "ДФ=""дд ММММ""") + " - " + Формат(ДатаОтображения + 14 * 86400, "ДФ=""дд ММММ""");
	КонецЕсли;
	
	ЭтотОбъект.Заголовок = НСтр("ru='Календарь менеджера (';en=""Manager's Calendar (""") + ТекстПериода + "): " + ЭтотОбъект.ОтборЗначениеПользователь;
	
	Если НЕ ЗначениеЗаполнено(СрокИсполнения) Тогда
		Элементы.НадписьСрокИсполнения.Заголовок = "";
	Иначе
		Элементы.НадписьСрокИсполнения.Заголовок = НСтр("ru ='  Взаимодействие небходимо выполнить к '") + Формат(СрокИсполнения, "ДЛФ=DD");
		Если СрокИсполненияПросрочен Тогда
			Элементы.НадписьСрокИсполнения.ЦветТекста = новый Цвет(255,0,0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьНастройкиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПереносКТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаписатьПереносКТНаСервере(Результат.Комментарий, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика(Элемент)
	
	ЗначениеЭлемента = Элемент.ВыделенныеЭлементы[0].Значение;
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента.Источник) Тогда
		ПоказатьЗначение(,ЗначениеЭлемента.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ВариантПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		Элементы.ВариантПериода.СписокВыбора[0].Значение
	);
	
	НастройкиОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"Отображение",
		Неопределено
	);
	
	Если НастройкиОтображения = Неопределено Тогда
		
		НастройкиОтображения = Новый Структура;
		НастройкиОтображения.Вставить("НачалоРабочегоДня",		0);
		НастройкиОтображения.Вставить("ОкончаниеРабочегоДня",	23);
		НастройкиОтображения.Вставить("ОтображатьТекущуюДату",	Истина);
		
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	
	ДатаОтображения = ТекущаяДатаСеанса();
	// ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИОбновитьДанныеПланировщикаСервер()
	
	СохранитьНастройки();
	// ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		ВариантПериода
	);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"Отображение",
		НастройкиОтображения
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуВыбранныхРесурсов()
	ТаблицаРесурсов = Новый ТаблицаЗначений();
	ТаблицаРесурсов.Колонки.Добавить("Имя");
	ТаблицаРесурсов.Колонки.Добавить("Значение");
	ТаблицаРесурсов.Колонки.Добавить("Описание");
	
	ТекущиееДеревоРесурсов = ПолучитьДеревоРесурсов();
	Для Каждого ЭлементДереваВерхнийУровень Из ТекущиееДеревоРесурсов.Строки Цикл
		Для Каждого ЭлементДерева Из ЭлементДереваВерхнийУровень.Строки Цикл
			Попытка
				Если	ТипЗнч(ЭлементДерева.Значение) = Тип("СправочникСсылка.Пользователи")
					И	Не ПоказыватьНедействительныхПользователей
					И	ЭлементДерева.Значение.Недействителен Тогда
					//
					Продолжить;
				КонецЕсли;
			Исключение КонецПопытки;
			
			НоваяСтрока = ТаблицаРесурсов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДерева);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаРесурсов.Свернуть("Имя, Значение, Описание");
	Возврат ТаблицаРесурсов;
КонецФункции

&НаСервере
Функция СформироватьТаблицуПериодов(ДатаНачала, ДатаОкончания)
	
	КоличествоДней					= ((ДатаОкончания - ДатаНачала)+1)/86400;
	КалендарьКоличествоДнейВНеделе	= Объект.КэшНастроекОтображения.НастройкиОтображения.КалендарьКоличествоДнейВНеделе;
	
	МассивДат = Новый Массив;
	
	ТекДата = ДатаНачала;
	Для Ном = 1 По КоличествоДней Цикл
		МассивДат.Добавить(ТекДата);
		
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
	График = CRM_ОбщегоНазначенияСервер.ПолучитьОсновнойПроизводственныйКалендарь();
	
	Попытка
		МассивДатРабочихДней = КалендарныеГрафики.ПолучитьДатыРабочихДней(График, МассивДат, Ложь);
	Исключение
		МассивДатРабочихДней = Новый Соответствие;
		Для каждого ТекДень из МассивДат Цикл
			МассивДатРабочихДней.Вставить(ТекДень, ТекДень);
		КонецЦикла;
		Ошибка = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сред(Ошибка, СтрНайти(Ошибка, "}:")+2));
	КонецПопытки;
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата");
	ТаблицаДат.Колонки.Добавить("Рабочий");
	ТаблицаДат.Колонки.Добавить("ДеньНедели");
	ТаблицаДат.Колонки.Добавить("ТаблицаПериодов");
	
	Для Каждого СоответствиеДат Из МассивДатРабочихДней Цикл
		
		Если ТаблицаВыбранныхДат.Количество() > 0 Тогда
			МассивСтрок = ТаблицаВыбранныхДат.НайтиСтроки(Новый Структура("Дата",СоответствиеДат.Ключ));
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ВариантПериода = "Неделя" И ДеньНедели(СоответствиеДат.Ключ) > КалендарьКоличествоДнейВНеделе Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата		= СоответствиеДат.Ключ;
		НоваяСтрока.Рабочий		= (СоответствиеДат.Ключ = СоответствиеДат.Значение);
		НоваяСтрока.ДеньНедели	= ДеньНедели(НоваяСтрока.Дата);
	КонецЦикла;
	
	ТаблицаДат.Сортировать("Дата");
	
	Для Каждого СтрокаДаты Из ТаблицаДат Цикл
		СтрокаДаты.ТаблицаПериодов = ВренутьПериодыПоДате(СтрокаДаты.Дата);
	КонецЦикла;
	
	Возврат ТаблицаДат;
	
КонецФункции

//&НаСервере
Функция ВренутьПериодыПоДате(ДатаДня)
	
	НачалоДняКалендаряЧас					= Объект.КэшНастроекОтображения.НастройкиОтображения.НачалоДняКалендаряЧас;
	КонецДняКалендаряЧас					= Объект.КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас;
	НачалоРабочегоДняЧас					= Объект.КэшНастроекОтображения.НастройкиОтображения.НачалоРабочегоДняЧас;
	КонецРабочегоДняЧас						= Объект.КэшНастроекОтображения.НастройкиОтображения.КонецРабочегоДняЧас;
	РасписаниеИнтервалШкалыВремени			= ?(Объект.КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени < 30, 30, Объект.КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени);
	ИспользоватьСобытияНаВесьДень			= Объект.КэшНастроекОтображения.НастройкиОтображения.ИспользоватьСобытияНаВесьДень;
	ЕстьОбеденныйПерерыв					= Объект.КэшНастроекОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв;
	НачалоОбеденногоПерерываЧас				= Объект.КэшНастроекОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас;
	КонецОбеденногоПерерываЧас				= Объект.КэшНастроекОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода");
	ТаблицаПериодов.Колонки.Добавить("ОкончаниеПриода");
	ТаблицаПериодов.Колонки.Добавить("НеРабочееВремя");
	ТаблицаПериодов.Колонки.Добавить("Обед");
	
	Для Ном = 0 По 23 Цикл
		
		Если Ном >= НачалоДняКалендаряЧас И Ном <= КонецДняКалендаряЧас Тогда
			ТекДата		= ДатаДня+(3600*Ном);
			
			СтрокаЧаса = ТаблицаПериодов.Добавить();
			СтрокаЧаса.НачалоПериода	= ТекДата;
			СтрокаЧаса.ОкончаниеПриода	= ТекДата+3599;
			
			Если ЕстьОбеденныйПерерыв Тогда
				Если Ном >= НачалоОбеденногоПерерываЧас И Ном < КонецОбеденногоПерерываЧас Тогда
					СтрокаЧаса.НеРабочееВремя = Истина;
					СтрокаЧаса.Обед = Истина;
				Иначе
					СтрокаЧаса.НеРабочееВремя = Ложь;
					СтрокаЧаса.Обед = Ложь;
				КонецЕсли;
			Иначе
				СтрокаЧаса.Обед = Ложь;
				СтрокаЧаса.НеРабочееВремя = Ложь;
			КонецЕсли;
			
			Если Ном < НачалоРабочегоДняЧас ИЛИ Ном >= КонецРабочегоДняЧас Тогда
				СтрокаЧаса.НеРабочееВремя = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСобытия(Тема = "", Партнер, Пользователь, ПериодНачало, ПериодОкончание, ВесьДень = Ложь)
	
	СписокПредставлениеСобытияВКалендаре = Объект.КэшНастроекОтображения.НастройкиОтображения.СписокПредставлениеСобытияВКалендаре;
	
	
	Если ВесьДень Тогда
		ПредставлениеПериод = "";
	Иначе
		ПредставлениеПериод = Формат(ПериодНачало, "ДФ=ЧЧ:мм") + " - " + Формат(ПериодОкончание, "ДФ=ЧЧ:мм");
	КонецЕсли;
	
	бЗаголовок = Истина;
	СтрТекущая = "";
	СтрЗаголовок = "";
	СтрОбластьСобытия = "";
	бСкобка = Истина;
	Для Каждого СтрСписка Из СписокПредставлениеСобытияВКалендаре Цикл
		Если Не СтрСписка.Пометка Тогда Продолжить; КонецЕсли;
		
		// Если СтрСписка.Значение = "Время" И ОбъектИмеетСвойство(ОписаниеСобытия, "СобытиеНаВесьДень") И ОписаниеСобытия.СобытиеНаВесьДень Тогда
		//	Продолжить;
		// КонецЕсли;
		
		СтрТекущая = ?(бЗаголовок, СтрЗаголовок, СтрОбластьСобытия);
		
		Если СтрСписка.Значение = "Время" Тогда
			Если Не ПустаяСтрока(ПредставлениеПериод) Тогда
				Если Не бСкобка Тогда
					СтрТекущая = СтрТекущая + ") ";
					бСкобка = Истина;
				ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
					СтрТекущая = СтрТекущая + " ";
				КонецЕсли;
				СтрТекущая = СтрТекущая + ПредставлениеПериод;
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Тема" Тогда
			Если Не ПустаяСтрока(Тема) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + " ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + Тема;
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Клиент" Тогда
			Если ЗначениеЗаполнено(Партнер) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + ", ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + Строка(Партнер);
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Пользователь" Тогда
			Если ЗначениеЗаполнено(Пользователь) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + ", ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + Строка(Пользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если бЗаголовок Тогда
			СтрЗаголовок = СтрТекущая;
		Иначе
			СтрОбластьСобытия = СтрТекущая;
		КонецЕсли;
		
		Если бЗаголовок Тогда
			Если Не бСкобка Тогда СтрЗаголовок = СтрЗаголовок + ")"; КонецЕсли;
			бЗаголовок = Ложь;
			бСкобка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не бСкобка И Не ПустаяСтрока(СтрТекущая) Тогда
		СтрТекущая = СтрТекущая + ")";
		Если бЗаголовок Тогда
			СтрЗаголовок = СтрТекущая;
		Иначе
			СтрОбластьСобытия = СтрТекущая;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаголовок) Тогда
		Возврат СтрОбластьСобытия;
	ИначеЕсли ПустаяСтрока(СтрОбластьСобытия) Тогда
		Возврат СтрЗаголовок;
	Иначе
		Возврат СтрЗаголовок + " " + СтрОбластьСобытия;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПланировщикаСервер()
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	
	УстановитьОтображениеПланировщика();
	
	НачалоДняКалендаряЧас					= Объект.КэшНастроекОтображения.НастройкиОтображения.НачалоДняКалендаряЧас;
	КонецДняКалендаряЧас					= Объект.КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас;
	НачалоРабочегоДняЧас					= Объект.КэшНастроекОтображения.НастройкиОтображения.НачалоРабочегоДняЧас;
	КонецРабочегоДняЧас						= Объект.КэшНастроекОтображения.НастройкиОтображения.КонецРабочегоДняЧас;
	ПоказыватьНедействительныхПользователей	= Объект.КэшНастроекОтображения.НастройкиОтображения.ПоказыватьНедействительныхПользователей;
	КалендарьКоличествоДнейВНеделе			= Объект.КэшНастроекОтображения.НастройкиОтображения.КалендарьКоличествоДнейВНеделе;
	СписокПредставлениеСобытияВКалендаре	= Объект.КэшНастроекОтображения.НастройкиОтображения.СписокПредставлениеСобытияВКалендаре;
	РасписаниеИнтервалШкалыВремени			= ?(Объект.КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени < 30, 30, Объект.КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени);;
	ИспользоватьСобытияНаВесьДень			= Объект.КэшНастроекОтображения.НастройкиОтображения.ИспользоватьСобытияНаВесьДень;
	ЕстьОбеденныйПерерыв					= Объект.КэшНастроекОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв;
	НачалоОбеденногоПерерываЧас				= Объект.КэшНастроекОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас;
	КонецОбеденногоПерерываЧас				= Объект.КэшНастроекОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас;
	РасположениеШкалыВремени				= Объект.КэшНастроекОтображения.НастройкиОтображения.РасположениеШкалыВремени;
	ОтображатьЦветомЗагруженностьКалендаря	= Объект.КэшНастроекОтображения.НастройкиОтображения.ОтображатьЦветомЗагруженностьКалендаря;
	
	Если ВариантПериода = "ПоРесурсам" Тогда
		Планировщик.ШкалаВремени.Положение = ?(РасположениеШкалыВремени=0,ПоложениеШкалыВремени.Лево,ПоложениеШкалыВремени.Верх);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
	Иначе
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
	КонецЕсли;
	Планировщик.ШкалаВремени.Элементы[0].Метки.Очистить();
	
	Если ВариантПериода = "Месяц" ИЛИ ВариантПериода = "ПоРесурсам" Тогда
		Элементы.ГруппаНаВесьДень.Видимость = Ложь;
	Иначе
		Элементы.ГруппаНаВесьДень.Видимость = Истина;
	КонецЕсли;
	
	Если ВариантПериода = "День" ИЛИ ВариантПериода = "Неделя" ИЛИ ВариантПериода = "ПоРесурсам" Тогда
		Если Планировщик.ШкалаВремени.Элементы.Количество() = 1 Тогда
			ШкалаВремениМин				= Планировщик.ШкалаВремени.Элементы.Добавить();
			ШкалаВремениМин.Единица		= ТипЕдиницыШкалыВремени.Минута;
			ШкалаВремениМин.Формат		= "ДФ=мм";
		КонецЕсли;
		Планировщик.ШкалаВремени.Элементы[1].Кратность	= РасписаниеИнтервалШкалыВремени;
		Планировщик.ШкалаВремени.Элементы[1].Метки.Очистить();
	ИначеЕсли Планировщик.ШкалаВремени.Элементы.Количество() = 2 Тогда
		Планировщик.ШкалаВремени.Элементы.Удалить(Планировщик.ШкалаВремени.Элементы[1]);
	КонецЕсли;
	
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	
	// Если ВариантПериода = "День" ИЛИ ВариантПериода = "Неделя" ИЛИ ВариантПериода = "ПоРесурсам" Тогда
		ТаблицаПериодов = СформироватьТаблицуПериодов(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	// КонецЕсли;
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	
	РасписаниеИнтервалШкалыВремени = ?(Объект.КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени < 30, 30, Объект.КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени);
	
	Если ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда	
		Баллов  = ПолучитьПредельноеКоличествоБалловПользователь(ОтборЗначениеПользователь);
	Иначе
		Баллов  = ПолучитьПредельноеКоличествоБалловПодразделение(ОтборЗначениеПодразделение);
	КонецЕсли;
	
	Для Каждого СтрокаПериодаДат Из ТаблицаПериодов Цикл
		
		Если НЕ ВариантПериода = "Месяц" Тогда
			Для Каждого ТекПериодОтображения Из СтрокаПериодаДат.ТаблицаПериодов Цикл
				ИнтервалПериода = Планировщик.ТекущиеПериодыОтображения.Добавить(ТекПериодОтображения.НачалоПериода, ТекПериодОтображения.ОкончаниеПриода);
				
				КоличествоЦиклов = 60/РасписаниеИнтервалШкалыВремени;
				КоличествоСекнд = 0;
				Если ТекПериодОтображения.Обед Тогда
					Если Планировщик.ШкалаВремени.Элементы.Количество() = 2 Тогда
						
						Для Ном = 1 По КоличествоЦиклов Цикл
							МеткаОбеда = Планировщик.ШкалаВремени.Элементы[1].Метки.Добавить(ТекПериодОтображения.НачалоПериода+КоличествоСекнд);
							МеткаОбеда.Текст = "";
							КоличествоСекнд = КоличествоСекнд + (60*РасписаниеИнтервалШкалыВремени);
						КонецЦикла;
						
					КонецЕсли;
				Иначе
					МеткаНачалаЧаса = Планировщик.ШкалаВремени.Элементы[1].Метки.Добавить(ТекПериодОтображения.НачалоПериода);
					МеткаНачалаЧаса.Текст = "";
				КонецЕсли;
				
				Если ТекПериодОтображения.НеРабочееВремя Тогда
					НовыйИнтервалФора = Планировщик.ИнтервалыФона.Добавить(ТекПериодОтображения.НачалоПериода, ТекПериодОтображения.ОкончаниеПриода);
					НовыйИнтервалФора.Цвет = Новый Цвет(241, 241, 241);
				Иначе
					
					Если НачалоДня(ТекПериодОтображения.НачалоПериода) = НачалоДня(ТекущаяДатаСеанса()) Тогда
						НовыйИнтервалФора = Планировщик.ИнтервалыФона.Добавить(ТекПериодОтображения.НачалоПериода, ТекПериодОтображения.ОкончаниеПриода);
						НовыйИнтервалФора.Цвет = Новый Цвет(241, 241, 241);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоДня(СтрокаПериодаДат.Дата), КонецДня(СтрокаПериодаДат.Дата));
		КонецЕсли;
	КонецЦикла;
	
	ИзмеренияПланировщика = Планировщик.Измерения;
	ИзмеренияПланировщика.Очистить();
	
	ИмяИзмерения = "";
	Если ВариантПериода = "ПоРесурсам" Тогда
		
		ТаблицаРесурсов	= ПолучитьТаблицуВыбранныхРесурсов();
		
		Если ТаблицаРесурсов.Количество() > 0 Тогда
			ИмяИзмерения	= ТаблицаРесурсов[0].Имя;
			НовоеИзмерение	= ИзмеренияПланировщика.Добавить(ИмяИзмерения);
			
			Для Каждого Ресурс Из ТаблицаРесурсов Цикл
				ЭлементИзмерения = НовоеИзмерение.Элементы.Добавить(Ресурс.Значение);
				ЭлементИзмерения.Текст = Ресурс.Описание;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	МассивЭлементовНаВесьДень = Новый Массив;
	
	ТаблицаПериодовНаВесьДень = Новый ТаблицаЗначений;
	ТаблицаПериодовНаВесьДень.Колонки.Добавить("Объект");
	ТаблицаПериодовНаВесьДень.Колонки.Добавить("НачалоПериода");
	ТаблицаПериодовНаВесьДень.Колонки.Добавить("ОкончаниеПриода");
	ТаблицаПериодовНаВесьДень.Колонки.Добавить("СтруктураЭлемента");
	ТаблицаПериодовНаВесьДень.Колонки.Добавить("Обработано");
	
	Для Каждого Мероприятие Из Мероприятия Цикл
		
		Если ТипЗнч(Мероприятие.Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			РеквизитНачало = "ПлановаяДата";
			РеквизитОкончание = "ПлановаяДатаЗавершение";
			ДокументИнтерес = ?(ЗначениеЗаполнено(Мероприятие.Объект.ДокументОснование), Мероприятие.Объект.ДокументОснование, Неопределено);
			
		ИначеЕсли ТипЗнч(Мероприятие.Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			РеквизитНачало = "ПлановаяДатаНачала";
			РеквизитОкончание = "ПлановаяДатаОкончания";
			ДокументИнтерес = Неопределено;
			
		ИначеЕсли ТипЗнч(Мероприятие.Объект) = Тип("ДокументСсылка.удалитьCRM_Мероприятие") Тогда
			РеквизитНачало = "Дата";
			РеквизитОкончание = "ОкончаниеМероприятия";
			ДокументИнтерес = ?(ЗначениеЗаполнено(Мероприятие.Объект.ДокументОснование), Мероприятие.Объект.ДокументОснование, Неопределено);
			
		ИначеЕсли ТипЗнч(Мероприятие.Объект) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			РеквизитНачало = "ДатаНачала";
			РеквизитОкончание = "ДатаОкончания";
			ДокументИнтерес = Неопределено;
			
		ИначеЕсли ТипЗнч(Мероприятие.Объект) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			РеквизитНачало = "ДатаНачала";
			РеквизитОкончание = "ДатаОкончания";
			ДокументИнтерес = Неопределено;
			
		ИначеЕсли ТипЗнч(Мероприятие.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РеквизитНачало = "ДатаНачала";
			РеквизитОкончание = "СрокИсполнения";
			ДокументИнтерес = Неопределено;
			
		// +Проекты
		ИначеЕсли ТипЗнч(Мероприятие.Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			РеквизитНачало = "ПлановаяДатаНачала";
			РеквизитОкончание = "ПлановаяДатаОкончания";
			ДокументИнтерес = Неопределено;
		// -Проекты
		
		КонецЕсли;
		
		Если ВариантПериода = "ПоРесурсам" Тогда
			
			Результат = ТаблицаВыбранныхДат.НайтиСтроки(Новый Структура("Дата",Мероприятие.Дата));
			
			ПропускаемСобытиеНаВесьДень = Ложь;
			Если Результат = Неопределено ИЛИ (Результат.Количество() = 0) Тогда
				
				Для Каждого СтрокаСДатой Из ТаблицаВыбранныхДат Цикл
					Если СтрокаСДатой.Дата >= Мероприятие.ПериодНачало И СтрокаСДатой.Дата <= Мероприятие.ПериодОкончание Тогда
						ПропускаемСобытиеНаВесьДень = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ПропускаемСобытиеНаВесьДень Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяИзмерения = "Пользователь" Тогда
				СоответствиеЗначений = Новый Соответствие;
				СоответствиеЗначений.Вставить(ИмяИзмерения, Мероприятие.Пользователь);
			ИначеЕсли ИмяИзмерения = "Помещение" Тогда
				СоответствиеЗначений = Новый Соответствие;
				СоответствиеЗначений.Вставить(ИмяИзмерения, Мероприятие.Помещение);
			КонецЕсли;
			
			СтруктураЗначений = Новый Структура;
			СтруктураЗначений.Вставить("Источник", Мероприятие.Объект);
			СтруктураЗначений.Вставить("ДокументИнтерес", ДокументИнтерес);
			СтруктураЗначений.Вставить("ПериодНачало", Мероприятие.ПериодНачало);
			СтруктураЗначений.Вставить("ПериодОкончание", Мероприятие.ПериодОкончание);
			СтруктураЗначений.Вставить("РеквизитНачало", РеквизитНачало);
			СтруктураЗначений.Вставить("РеквизитОкончание", РеквизитОкончание);
			
			ЭлементПланировщика						= Планировщик.Элементы.Добавить(Мероприятие.ПериодНачало, Мероприятие.ПериодОкончание);
			Если НЕ ИмяИзмерения = "" Тогда
				ЭлементПланировщика.ЗначенияИзмерений	= Новый ФиксированноеСоответствие(СоответствиеЗначений);
			КонецЕсли;
			ЭлементПланировщика.Значение			= СтруктураЗначений;
			ЭлементПланировщика.Текст = ПолучитьПредставлениеСобытия(Мероприятие.Тема, Мероприятие.Партнер, Мероприятие.Пользователь, Мероприятие.ПериодНачало, Мероприятие.ПериодОкончание);
			// ЭлементПланировщика.Текст				= Мероприятие.Тема;
			Если ЗначениеЗаполнено(Мероприятие.ОсновнаяКатегория) Тогда
				ЭлементПланировщика.ЦветФона = Новый Цвет(Мероприятие.ОсновнаяКатегория.ЦветКрасный,
														  Мероприятие.ОсновнаяКатегория.ЦветЗеленый,
														  Мероприятие.ОсновнаяКатегория.ЦветСиний);
			КонецЕсли;
			Если ТипЗнч(Мероприятие.Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроекта;
			Иначе
				Если Мероприятие.Важность = 2 Тогда
					ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_Важно;
				ИначеЕсли Мероприятие.Важность = 0 Тогда
					ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_ВажностьНизкая;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ВариантПериода = "День" Тогда
				Результат = ТаблицаВыбранныхДат.НайтиСтроки(Новый Структура("Дата",Мероприятие.Дата));
				
				ПропускаемСобытиеНаВесьДень = Ложь;
				Если Результат = Неопределено ИЛИ (Результат.Количество() = 0) Тогда
					
					Для Каждого СтрокаСДатой Из ТаблицаВыбранныхДат Цикл
						Если СтрокаСДатой.Дата >= Мероприятие.ПериодНачало И СтрокаСДатой.Дата <= Мероприятие.ПериодОкончание Тогда
							ПропускаемСобытиеНаВесьДень = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ПропускаемСобытиеНаВесьДень Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураЗначений = Новый Структура;
			СтруктураЗначений.Вставить("Источник", Мероприятие.Объект);
			СтруктураЗначений.Вставить("ДокументИнтерес", ДокументИнтерес);
			СтруктураЗначений.Вставить("ПериодНачало", Мероприятие.ПериодНачало);
			СтруктураЗначений.Вставить("ПериодОкончание", Мероприятие.ПериодОкончание);
			СтруктураЗначений.Вставить("РеквизитНачало", РеквизитНачало);
			СтруктураЗначений.Вставить("РеквизитОкончание", РеквизитОкончание);
			
			// +Проекты
			// Если Мероприятие.НаВесьДень
			// ИЛИ (НачалоДня(Мероприятие.ПериодОкончание) > НачалоДня(Мероприятие.ПериодНачало)) Тогда
			Если НЕ ВариантПериода = "Месяц" И (Мероприятие.НаВесьДень 
			 ИЛИ НачалоДня(Мероприятие.ПериодОкончание) > НачалоДня(Мероприятие.ПериодНачало)) Тогда
			// -Проекты
			// ИЛИ (Мероприятие.ПериодНачало <= ПериодДанных.ДатаНачала И Мероприятие.ПериодОкончание>=ПериодДанных.ДатаОкончания) Тогда
				
				СтруктураЭлемента = Новый Структура("Значение,Текст,ОсновнаяКатегория,НачалоПериода,ОкончаниеПриода");
				СтруктураЭлемента.Значение			= СтруктураЗначений;
				// СтруктураЭлемента.Текст				= Мероприятие.Тема;
				СтруктураЭлемента.Текст = ПолучитьПредставлениеСобытия(Мероприятие.Тема, Мероприятие.Партнер, Мероприятие.Пользователь, Мероприятие.ПериодНачало, Мероприятие.ПериодОкончание, Истина);
				СтруктураЭлемента.ОсновнаяКатегория	= Мероприятие.ОсновнаяКатегория;
				СтруктураЭлемента.НачалоПериода		= НачалоДня(?(Мероприятие.ПериодНачало>=ПериодДанных.ДатаНачала,Мероприятие.ПериодНачало,ПериодДанных.ДатаНачала));
				СтруктураЭлемента.ОкончаниеПриода	= КонецДня(?(Мероприятие.ПериодОкончание<=ПериодДанных.ДатаОкончания,Мероприятие.ПериодОкончание,ПериодДанных.ДатаОкончания));
				
				СтрокаПериодаНаВесьДень = ТаблицаПериодовНаВесьДень.Добавить();
				СтрокаПериодаНаВесьДень.Объект				= Мероприятие.Объект;
				СтрокаПериодаНаВесьДень.НачалоПериода		= НачалоДня(?(Мероприятие.ПериодНачало>=ПериодДанных.ДатаНачала,Мероприятие.ПериодНачало,ПериодДанных.ДатаНачала));
				СтрокаПериодаНаВесьДень.ОкончаниеПриода		= КонецДня(?(Мероприятие.ПериодОкончание<=ПериодДанных.ДатаОкончания,Мероприятие.ПериодОкончание,ПериодДанных.ДатаОкончания));
				СтрокаПериодаНаВесьДень.СтруктураЭлемента	= СтруктураЭлемента;
				СтрокаПериодаНаВесьДень.Обработано			= Ложь;
			Иначе
				Если (Мероприятие.ПериодОкончание - Мероприятие.ПериодНачало) < 1800 Тогда
					ЭлементПланировщика = Планировщик.Элементы.Добавить(Мероприятие.ПериодНачало, Мероприятие.ПериодНачало + 1800);
				Иначе	
					ЭлементПланировщика = Планировщик.Элементы.Добавить(Мероприятие.ПериодНачало, Мероприятие.ПериодОкончание);
				КонецЕсли;	
				
				
				ЭлементПланировщика.Значение = СтруктураЗначений;
				ЭлементПланировщика.Текст = ПолучитьПредставлениеСобытия(Мероприятие.Тема, Мероприятие.Партнер, Мероприятие.Пользователь, Мероприятие.ПериодНачало, Мероприятие.ПериодОкончание);
				// ЭлементПланировщика.Текст = Мероприятие.Тема;
				
				// +Проекты
				Если ТипЗнч(Мероприятие.Объект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
					Если Мероприятие.Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап Тогда
						РазностьДат 				 = Цел((НачалоДня(Мероприятие.Объект.ПлановаяДатаОкончания) - НачалоДня(Мероприятие.Объект.ПлановаяДатаНачала))/86400) + 1;
						ПериодСтрокой				 = НРег(ЧислоПрописью(РазностьДат, , НСтр("ru = 'день, дня, дней, м,,,,, 0'")));
						ЭлементПланировщика.Текст 	 = Мероприятие.Тема + ": " + ПериодСтрокой;
						ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_МаркерЗадачаПроекта;
					Иначе
						ЭлементПланировщика.Текст 	 = Мероприятие.Тема;
						ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_МаркерКТПроекта;
					КонецЕсли;
				Иначе
					Если Мероприятие.Важность = 2 Тогда
						ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_Важно;
					ИначеЕсли Мероприятие.Важность = 0 Тогда
						ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_ВажностьНизкая;
					КонецЕсли;
				КонецЕсли;
				// -Проекты
				
				Если ЗначениеЗаполнено(Мероприятие.ОсновнаяКатегория) Тогда
					ЭлементПланировщика.ЦветФона = Новый Цвет(Мероприятие.ОсновнаяКатегория.ЦветКрасный,
															  Мероприятие.ОсновнаяКатегория.ЦветЗеленый,
															  Мероприятие.ОсновнаяКатегория.ЦветСиний);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПериодовНаВесьДень.Сортировать("НачалоПериода,ОкончаниеПриода");
	
	ЗаголовокГруппыНаВсеьДень = НСтр("ru='Событий на весь день: %1';en='All day events: %1'");
	ЗаголовокГруппыНаВсеьДень = СтрЗаменить(ЗаголовокГруппыНаВсеьДень,"%1",Формат(ТаблицаПериодовНаВесьДень.Количество(),"ЧН=Нет"));
	
	Элементы.ГруппаНаВесьДень.Заголовок							= ЗаголовокГруппыНаВсеьДень;
	Элементы.ГруппаНаВесьДень.ЗаголовокСвернутогоОтображения	= ЗаголовокГруппыНаВсеьДень;
	Обрабатываем = Истина;
	
	ТаблицаПериодовИтог = Новый ТаблицаЗначений;
	ТаблицаПериодовИтог.Колонки.Добавить("НачалоПериода");
	ТаблицаПериодовИтог.Колонки.Добавить("ОкончаниеПриода");
	ТаблицаПериодовИтог.Колонки.Добавить("МассивСтруктур");
	ТаблицаПериодовИтог.Колонки.Добавить("Выведена");
	
	Пока Обрабатываем Цикл
		
		НачалоПериода	= "";
		ОкончаниеПриода	= "";
		МассивСтруктур = Новый Массив;
		
		Для Каждого СтрокаПериода Из ТаблицаПериодовНаВесьДень Цикл
			Если НЕ СтрокаПериода.Обработано Тогда
				НачалоПериода = СтрокаПериода.НачалоПериода;
				ОкончаниеПриода = СтрокаПериода.ОкончаниеПриода;
				МассивСтруктур.Добавить(СтрокаПериода.СтруктураЭлемента);
				СтрокаПериода.Обработано = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПериода Из ТаблицаПериодовНаВесьДень Цикл
			Если СтрокаПериода.Обработано Тогда Продолжить; КонецЕсли;
			
			Если СтрокаПериода.НачалоПериода > ОкончаниеПриода Тогда
				ОкончаниеПриода = СтрокаПериода.ОкончаниеПриода;
				МассивСтруктур.Добавить(СтрокаПериода.СтруктураЭлемента);
				СтрокаПериода.Обработано = Истина;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрокаТаб = ТаблицаПериодовИтог.Добавить();
		НоваяСтрокаТаб.НачалоПериода	= НачалоПериода;
		НоваяСтрокаТаб.ОкончаниеПриода	= ОкончаниеПриода;
		НоваяСтрокаТаб.МассивСтруктур	= МассивСтруктур;
		НоваяСтрокаТаб.Выведена			= Ложь;
		
		Если ТаблицаПериодовНаВесьДень.Найти(Ложь,"Обработано") = Неопределено Тогда
			Обрабатываем = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтображениеПланировщикаВесьДень();
	
	ВесьДень.ЦветЛиний = WebЦвета.Белый;
	ВесьДень.ШкалаВремени.Элементы[0].ЦветЛиний = WebЦвета.Белый;
	
	ВесьДень.Элементы.Очистить();
	ВесьДень.ИнтервалыФона.Очистить();
	
	ВесьДень.ШкалаВремени.Положение				= ПоложениеШкалыВремени.Лево;
	ВесьДень.ТекущиеПериодыОтображения.Очистить();
	
	КоличествоДней = ((ПериодДанных.ДатаОкончания - ПериодДанных.ДатаНачала)+1)/86400;
	
	КалендарьКоличествоДнейВНеделе = Объект.КэшНастроекОтображения.НастройкиОтображения.КалендарьКоличествоДнейВНеделе;
	
	ДатаПериода = ПериодДанных.ДатаНачала;
	
	Элементы.ГруппаНаВесьДень.Заголовок = НСтр("ru='Событий на весь день: '")+Формат(ТаблицаПериодовНаВесьДень.Количество(),"ЧН=Нет");
	
	НетМетки = Истина;
	Для Ном = 1 По КоличествоДней Цикл
		
		Если ВариантПериода = "Неделя" И ДеньНедели(ДатаПериода) > КалендарьКоличествоДнейВНеделе Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВариантПериода = "День" Тогда
			Результат = ТаблицаВыбранныхДат.НайтиСтроки(Новый Структура("Дата",ДатаПериода));
			Если Результат = Неопределено ИЛИ (Результат.Количество() = 0) Тогда
				ДатаПериода = ДатаПериода + 86400;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НачМин = 60;
		КонМин = 119;
		
		КоличествоПериодов = ?(ТаблицаПериодовИтог.Количество() <= 5,ТаблицаПериодовИтог.Количество(),6);
		Для НомЭлемента = 1 По КоличествоПериодов Цикл
			ВесьДень.ТекущиеПериодыОтображения.Добавить(ДатаПериода+НачМин, ДатаПериода+КонМин);
			
			Если НомЭлемента = 6 Тогда
				
				Если НетМетки Тогда
					МеткаПоследнегоПериода = ВесьДень.ШкалаВремени.Элементы[0].Метки.Добавить(ДатаПериода+НачМин);
					МеткаПоследнегоПериода.Текст = "Еще";
					НетМетки = Ложь;
				КонецЕсли;
				
				НовыйИнтервалФона = ВесьДень.ИнтервалыФона.Добавить(ДатаПериода+НачМин, ДатаПериода+КонМин);
				НовыйИнтервалФона.Цвет = WebЦвета.ГолубойСоСтальнымОттенком;
			КонецЕсли;
			
			НачМин = НачМин + 60;
			КонМин = КонМин + 60;
			
		КонецЦикла;
		
		ДатаПериода = ДатаПериода + 86400;
		
	КонецЦикла;
	
	ИзмеренияПланировщикаВесьДень = ВесьДень.Измерения;
	ИзмеренияПланировщикаВесьДень.Очистить();
	
	МассивЗначенийПоДатам = Новый Соответствие;
	
	НачМин = 60;
	КонМин = 119;
	НомерСтроки = 1;
	Для Каждого СтрокаИтога Из ТаблицаПериодовИтог Цикл
		
		Для Каждого СтруктураЭлемента Из СтрокаИтога.МассивСтруктур Цикл
			
			КоличествоДней = ((СтруктураЭлемента.ОкончаниеПриода - СтруктураЭлемента.НачалоПериода)+1)/86400;
			ДатаПериода = СтруктураЭлемента.НачалоПериода;
			
			ВывелиТекст = Ложь;
			Для Ном = 1 По КоличествоДней Цикл
				
				Если ВариантПериода = "Неделя" И ДеньНедели(ДатаПериода) > КалендарьКоличествоДнейВНеделе Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВариантПериода = "День" Тогда
					Результат = ТаблицаВыбранныхДат.НайтиСтроки(Новый Структура("Дата",ДатаПериода));
					Если Результат = Неопределено ИЛИ (Результат.Количество() = 0) Тогда
						ДатаПериода = ДатаПериода + 86400;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если НомерСтроки > 5 Тогда
					
					Если МассивЗначенийПоДатам.Получить(ДатаПериода) = Неопределено Тогда
						МассивЗначенийПоДатам.Вставить(ДатаПериода,Новый Массив);
					КонецЕсли;
					МассивЗначенийПоДатам[ДатаПериода].Добавить(СтруктураЭлемента);
				Иначе
					ЭлементПланировщика				= ВесьДень.Элементы.Добавить(ДатаПериода+НачМин, ДатаПериода+КонМин);
					ЭлементПланировщика.Значение	= СтруктураЭлемента.Значение;
					Если НЕ ВывелиТекст Тогда
						ЭлементПланировщика.Текст	= СтруктураЭлемента.Текст;
						ВывелиТекст = Истина;
						// +Проекты
						ОбъектИсточник = СтруктураЭлемента.Значение.Источник;
						Если ТипЗнч(ОбъектИсточник) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
							Если ОбъектИсточник.ТипЭтапа	 = Перечисления.CRM_ТипыЭтапов.Этап Тогда
								РазностьДат 				 = Цел((НачалоДня(ОбъектИсточник.ПлановаяДатаОкончания) - НачалоДня(ОбъектИсточник.ПлановаяДатаНачала))/86400) + 1;
								ПериодСтрокой				 = НРег(ЧислоПрописью(РазностьДат, , НСтр("ru = 'день, дня, дней, м,,,,, 0'")));
								ЭлементПланировщика.Текст	 = СтруктураЭлемента.Текст + ": " + ПериодСтрокой;
								ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_МаркерЗадачаПроекта;
							Иначе
								ЭлементПланировщика.Текст	 = СтруктураЭлемента.Текст;
								ЭлементПланировщика.Картинка = БиблиотекаКартинок.CRM_МаркерКТПроекта;
							КонецЕсли;
						КонецЕсли;
						// -Проекты
					Иначе
						ЭлементПланировщика.Текст	= "";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтруктураЭлемента.ОсновнаяКатегория) Тогда
						ЭлементПланировщика.ЦветФона	= Новый Цвет(СтруктураЭлемента.ОсновнаяКатегория.ЦветКрасный,
																  СтруктураЭлемента.ОсновнаяКатегория.ЦветЗеленый,
																  СтруктураЭлемента.ОсновнаяКатегория.ЦветСиний);
						НовыйИнтервалФона = ВесьДень.ИнтервалыФона.Добавить(ДатаПериода+НачМин, ДатаПериода+КонМин);
						НовыйИнтервалФона.Цвет			= Новый Цвет(СтруктураЭлемента.ОсновнаяКатегория.ЦветКрасный,
																  СтруктураЭлемента.ОсновнаяКатегория.ЦветЗеленый,
																  СтруктураЭлемента.ОсновнаяКатегория.ЦветСиний);
						
					Иначе
						НовыйИнтервалФона = ВесьДень.ИнтервалыФона.Добавить(ДатаПериода+НачМин, ДатаПериода+КонМин);
						НовыйИнтервалФона.Цвет = Новый Цвет(159,198,231);
					КонецЕсли;
					
					// ЭлементПланировщика.ЦветРамки = НовыйИнтервалФона.Цвет;
					
				КонецЕсли;
				
				ДатаПериода = ДатаПериода + 86400;
			КонецЦикла;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки <= 5 Тогда
			НачМин = НачМин + 60;
			КонМин = КонМин + 60;
		КонецЕсли;
	КонецЦикла;
	
	НачМин = НачМин + 60;
	КонМин = КонМин + 60;
	
	Для Каждого КлючИЗначение Из МассивЗначенийПоДатам Цикл
		
		СтруктураЗначений = Новый Структура;
		СтруктураЗначений.Вставить("Источник", КлючИЗначение.Значение);
		
		ЭлементПланировщика = ВесьДень.Элементы.Добавить(КлючИЗначение.Ключ+НачМин, КлючИЗначение.Ключ+КонМин);
		ЭлементПланировщика.Значение = СтруктураЗначений;
		ЭлементПланировщика.Текст = "Еще... + " + Формат(КлючИЗначение.Значение.Количество(),"ЧДЦ=");
		ЭлементПланировщика.ЦветФона = WebЦвета.ГолубойСоСтальнымОттенком;
		// ЭлементПланировщика.ЦветРамки = ЭлементПланировщика.ЦветФона;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПланировщикаВесьДень()
	
	Если ВариантПериода = "День" Тогда
		
		ВесьДень.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
		ВесьДень.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		ВесьДень.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		ВесьДень.КратностьПериодическогоВарианта = 24;
		// ВесьДень.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		// ВесьДень.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		
		Если Элементы.ГруппаНаВесьДень.Видимость Тогда
			ВесьДень.ОтображатьПеренесенныеЗаголовки = Истина;
			ВесьДень.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
			ВесьДень.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
			ВесьДень.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
			Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Иначе
			Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
			Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
			Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
			Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		КонецЕсли;
		ВесьДень.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		ВесьДень.ШкалаВремени.Элементы[0].Формат = "ДФ='мм"+Символы.НПП+Символы.НПП+Символы.НПП+Символы.НПП+Символы.НПП+"'";
		ВесьДень.ШкалаВремени.Элементы[0].Кратность = 1;
		ВесьДень.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Минута;
		
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		
		ВесьДень.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
		ВесьДень.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		ВесьДень.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		ВесьДень.КратностьПериодическогоВарианта = 24;
		// ВесьДень.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		// ВесьДень.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		// ВесьДень.ОтображатьПеренесенныеЗаголовки = Истина;
		Если Элементы.ГруппаНаВесьДень.Видимость Тогда
			ВесьДень.ОтображатьПеренесенныеЗаголовки = Истина;
			ВесьДень.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
			ВесьДень.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
			ВесьДень.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM'";
			Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Иначе
			Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
			Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
			Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
			Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM'";
		КонецЕсли;
		ВесьДень.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		ВесьДень.ШкалаВремени.Элементы[0].Формат = "ДФ='мм"+Символы.НПП+Символы.НПП+Символы.НПП+Символы.НПП+Символы.НПП+"'";
		ВесьДень.ШкалаВремени.Элементы[0].Кратность = 1;
		ВесьДень.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Минута;
		
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		
		ВесьДень.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
		ВесьДень.ОтображатьТекущуюДату = Ложь;
		ВесьДень.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		ВесьДень.КратностьПериодическогоВарианта = 7;
		ВесьДень.ОтступСНачалаПереносаШкалыВремени = 0;
		ВесьДень.ОтступСКонцаПереносаШкалыВремени = 0;
		ВесьДень.ОтображатьПеренесенныеЗаголовки = Ложь;
		ВесьДень.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		ВесьДень.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		ВесьДень.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		ВесьДень.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		ВесьДень.ШкалаВремени.Элементы[0].Формат = "ДФ='ddd, d MMM yyyy'";
		ВесьДень.ШкалаВремени.Элементы[0].Кратность = 1;
		ВесьДень.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		Интервал = ВесьДень.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		// Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
		//	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		//	Интервал = ВесьДень.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
		//	Интервал.Цвет = Новый Цвет(223, 255, 223);
		// КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПланировщика()
	
	Если ВариантПериода = "День" Тогда
		
		Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		// Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		// Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='""""'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		// Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		
		Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		// Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		// Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		// Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='""""'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		// Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		
		Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		// Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='""""'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	ИначеЕсли ВариантПериода = "ПоРесурсам" Тогда
		
		Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		// Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMMM'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПериодДанных(ВариантПериода, ДатаОтображения)
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания");
	
	ТаблицаВыбранныхДат.Очистить();
	
	// Если ВариантПериода = "День" Тогда
	//	Результат.ДатаНачала	= НачалоДня(ДатаОтображения);
	//	Результат.ДатаОкончания	= КонецДня(ДатаОтображения);
	Если ВариантПериода = "День" ИЛИ ВариантПериода = "ПоРесурсам" Тогда
		
		МассивВыбранныхДат = Новый Массив();
		
		Если Тип(Элементы.Календарь.ВыделенныеДаты) <> Тип("Массив") ИЛИ Элементы.Календарь.ВыделенныеДаты.Количество() = 0 Тогда
			МассивВыбранныхДат.Добавить(ДатаОтображения);
		Иначе
			МассивВыбранныхДат = Элементы.Календарь.ВыделенныеДаты;
		КонецЕсли;
		
		Для Каждого ДатаМассива Из МассивВыбранныхДат Цикл
			НоваяСтрокаДаты = ТаблицаВыбранныхДат.Добавить();
			НоваяСтрокаДаты.Дата = ДатаМассива;
		КонецЦикла;
		
		ТаблицаВыбранныхДат.Сортировать("Дата Возр");
		
		Результат.ДатаНачала	= НачалоДня(ТаблицаВыбранныхДат[0].Дата);;
		Результат.ДатаОкончания	= КонецДня(ТаблицаВыбранныхДат[ТаблицаВыбранныхДат.Количество()-1].Дата);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		Результат.ДатаНачала	= НачалоНедели(НачалоМесяца(ДатаОтображения));
		Результат.ДатаОкончания	= КонецНедели(КонецМесяца(ДатаОтображения));
	ИначеЕсли ВариантПериода = "Список" Тогда
		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериода(Форма)
	
	Если Форма.ВариантПериода = "День" Тогда
		
		Форма.ПредставлениеПериода = Формат(Форма.ДатаОтображения, "ДФ='дддд, д МММ'");
		
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		
		// ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
		// Форма.ПредставлениеПериода = СтрШаблон(
		//	"%1 - %2",
		//	Формат(ПериодДанных.ДатаНачала, "ДФ='д МММ'"),
		//	Формат(ПериодДанных.ДатаОкончания, "ДФ='д МММ гггг'")
		// );
		
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		
		Форма.ПредставлениеПериода = ПредставлениеПериода(НачалоМесяца(Форма.ДатаОтображения), КонецМесяца(Форма.ДатаОтображения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы)
	
	НезависимыеЗаписи = Новый Массив;
	ПодчиненныеИсточнику = Новый Соответствие;
	
	Для Каждого ОбрабатываемыйЭлемент Из ОбрабатываемыеЭлементы Цикл
		Если ЗначениеЗаполнено(ОбрабатываемыйЭлемент.Источник) Тогда
			ЗаписиПоИсточнику = ПодчиненныеИсточнику.Получить(ОбрабатываемыйЭлемент.Источник);
			Если ЗаписиПоИсточнику = Неопределено Тогда
				ЗаписиПоИсточнику = Новый Массив;
				ЗаписиПоИсточнику.Добавить(ОбрабатываемыйЭлемент);
				ПодчиненныеИсточнику.Вставить(ОбрабатываемыйЭлемент.Источник, ЗаписиПоИсточнику);
			Иначе
				ЗаписиПоИсточнику.Добавить(ОбрабатываемыйЭлемент);
			КонецЕсли;
		Иначе
			НезависимыеЗаписи.Добавить(ОбрабатываемыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого КлючИЗначение Из ПодчиненныеИсточнику Цикл
			
			ИсточникОбъект = КлючИЗначение.Ключ.ПолучитьОбъект();
			
			Если ОбрабатываемыйЭлемент.Свойство("ПометкаУдаления") Тогда
				ИсточникОбъект.УстановитьПометкуУдаления(ОбрабатываемыйЭлемент.ПометкаУдаления);
				Продолжить;
			КонецЕсли;
			
			ИсточникОбъект[ОбрабатываемыйЭлемент.РеквизитНачало] = ОбрабатываемыйЭлемент.ПериодНачало;
 			ИсточникОбъект[ОбрабатываемыйЭлемент.РеквизитОкончание] = ОбрабатываемыйЭлемент.ПериодОкончание;
			ИсточникОбъект.Записать();
			
		КонецЦикла;
		
		Для Каждого ОбрабатываемыйЭлемент Из НезависимыеЗаписи Цикл
			
			ЗаписьОбъект = ОбрабатываемыйЭлемент.Источник.ПолучитьОбъект();
			
			Если ОбрабатываемыйЭлемент.Свойство("ПометкаУдаления") Тогда
				ЗаписьОбъект.УстановитьПометкуУдаления(ОбрабатываемыйЭлемент.ПометкаУдаления);
				Продолжить;
			КонецЕсли;
			
			ЗаписьОбъект[ОбрабатываемыйЭлемент.РеквизитНачало] = ОбрабатываемыйЭлемент.ПериодНачало;
			ЗаписьОбъект[ОбрабатываемыйЭлемент.РеквизитОкончание] = ОбрабатываемыйЭлемент.ПериодОкончание;
			ЗаписьОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		Успешно = Ложь;
		ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось сохранить изменения в календаре по причине: %1';en='Could not save changes to calendar due to: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьКэшОформления()
	
	РаскраситьКалендарь(НачалоМесяцаРаскраски);
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	// Элементы.ФормаВыбрать.Видимость      = РежимВыбора;
	Элементы.ФормаСоздать.Видимость      = НЕ РежимВыбора;
	// Элементы.Пользователь.ТолькоПросмотр = РежимВыбора;
	// Элементы.Пользователь.Видимость      = НЕ РежимВыбора;
	Элементы.МероприятияПользователь.Видимость = НЕ ЗначениеЗаполнено(ОтборЗначениеПользователь);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиОтображенияПоУмолчанию()
	СтруктураНастройки = Новый Структура();
	
	// Примечание: не все настройки в структуре выносятся на редактирование пользователю,
	// некоторые существуют с целью хранить все в одном месте.
	
	// Настройки отображения
	СтруктураНастройкиОтображения = Новый Структура(
	"НачалоДняКалендаряЧас,
	|КонецДняКалендаряЧас,
	|НачалоРабочегоДняЧас,
	|КонецРабочегоДняЧас,
	|ПоказыватьНедействительныхПользователей,
	|КалендарьКоличествоДнейВНеделе,
	|СписокПредставлениеСобытияВКалендаре,
	|РасписаниеИнтервалШкалыВремени,
	|ИспользоватьСобытияНаВесьДень,
	|ЕстьОбеденныйПерерыв,
	|НачалоОбеденногоПерерываЧас,
	|КонецОбеденногоПерерываЧас,
	|РасположениеШкалыВремени,
	|ОтображатьЦветомЗагруженностьКалендаря");
	
	СтруктураНастройкиОтображения.РасположениеШкалыВремени = 0;
	СтруктураНастройкиОтображения.ОтображатьЦветомЗагруженностьКалендаря = Ложь;
	
	СтруктураНастройкиОтображения.НачалоДняКалендаряЧас	= 8;
	СтруктураНастройкиОтображения.КонецДняКалендаряЧас	= 19;
	
	СтруктураНастройкиОтображения.НачалоРабочегоДняЧас	= 0;
	СтруктураНастройкиОтображения.КонецРабочегоДняЧас	= 23;
	
	СтруктураНастройкиОтображения.ПоказыватьНедействительныхПользователей = Ложь;
	
	СтруктураНастройкиОтображения.ЕстьОбеденныйПерерыв	= Ложь;
	СтруктураНастройкиОтображения.НачалоОбеденногоПерерываЧас	= 0;
	СтруктураНастройкиОтображения.КонецОбеденногоПерерываЧас	= 0;
	
	СтруктураНастройкиОтображения.КалендарьКоличествоДнейВНеделе = 7;
	
	СписокПредставлениеСобытияВКалендаре = Новый СписокЗначений();
	СписокПредставлениеСобытияВКалендаре.Добавить("Тема", НСтр("ru='Тема';en='Subject'"), Истина);
	СписокПредставлениеСобытияВКалендаре.Добавить("Время", НСтр("ru='Время';en='Time'"), Истина);
	СписокПредставлениеСобытияВКалендаре.Добавить("Клиент", НСтр("ru='Клиент';en='Customer'"), Ложь);
	СписокПредставлениеСобытияВКалендаре.Добавить("Пользователь", НСтр("ru='Пользователь';en='User'"), Ложь);
	
	СтруктураНастройкиОтображения.СписокПредставлениеСобытияВКалендаре = СписокПредставлениеСобытияВКалендаре;
	
	СтруктураНастройкиОтображения.РасписаниеИнтервалШкалыВремени = 30;
	СтруктураНастройкиОтображения.ИспользоватьСобытияНаВесьДень = Истина;
	
	СтруктураНастройки.Вставить("НастройкиОтображения", СтруктураНастройкиОтображения);
	
	// Общие настройки
	СтруктураОбщиеНастройки = Новый Структура(
	"КалендарьИспользоватьКалендарныеГрафики,
	|ОтображатьПолеСодержанияКалендаря,
	|КалендарьОбновлятьПриЛюбыхСобытиях,
	|Автообновление,
	|ПериодАвтообновления");
	
	СтруктураОбщиеНастройки.ОтображатьПолеСодержанияКалендаря = Истина;
	
	СтруктураОбщиеНастройки.КалендарьИспользоватьКалендарныеГрафики = Истина;
	СтруктураОбщиеНастройки.КалендарьОбновлятьПриЛюбыхСобытиях 		= Ложь;
	
	СтруктураОбщиеНастройки.Автообновление = Ложь;
	СтруктураОбщиеНастройки.ПериодАвтообновления = 1;
	
	СтруктураНастройки.Вставить("ОбщиеНастройки", СтруктураОбщиеНастройки);
	
	Возврат СтруктураНастройки;
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиКалендаря()
	СтруктураНастройкиОтображения = ПолучитьНастройкиОтображенияПоУмолчанию();
	
	СохраненныеНастройки = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "СтруктураНастроек");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Если СохраненныеНастройки.Свойство("НастройкиОтображения") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения.НастройкиОтображения, СохраненныеНастройки.НастройкиОтображения);
		КонецЕсли;
		
		Если СохраненныеНастройки.Свойство("ОбщиеНастройки") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения.ОбщиеНастройки, СохраненныеНастройки.ОбщиеНастройки);
		КонецЕсли;
	КонецЕсли;
	
	// Настройки пользователя
	НастройкиРабочееВремяПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьСтруктуруРабочихВременПользователя(ТекущийПользователь);
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоРабочегоДняЧас = Час(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоРабочегоДняЧас = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецРабочегоДняЧас = Час(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецРабочегоДняЧас = 23;
	КонецЕсли;
	
	СтруктураНастройкиОтображения.НастройкиОтображения.ПоказыватьНедействительныхПользователей = (CRM_ХранилищеНастроек.Загрузить("ПоказыватьНедействительныхПользователей") = Истина);
	ПоказыватьНедействительныхПользователей = СтруктураНастройкиОтображения.НастройкиОтображения.ПоказыватьНедействительныхПользователей;
	
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва) И ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина;
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас = Час(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас = Час(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв = Ложь;
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас = 0;
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас = 23;
	КонецЕсли;
	
	Объект.КэшНастроекОтображения = СтруктураНастройкиОтображения;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиОбщиеКлиент()
	Если ТипЗнч(Объект.КэшНастроекОтображения) <> Тип("Структура") Тогда
		ЗагрузитьНастройкиКалендаря();
	КонецЕсли;
	Возврат Объект.КэшНастроекОтображения.ОбщиеНастройки;
КонецФункции

&НаСервере
Процедура СохранитьНастройкиДеревоРесурсов()
	Дерево = РеквизитФормыВЗначение("ДеревоРесурсов");
	ДеревоБланк = Дерево.Скопировать();
	ДеревоБланк.Строки.Очистить();
	
	СтруктураРезультат = Новый Структура();
	
	Для Каждого СтрокаТипРесурса Из Дерево.Строки Цикл
		СтруктураРезультат.Вставить(СтрокаТипРесурса.Имя, ДеревоБланк.Скопировать());
		ДобавитьДеревоРесурсовВВетку(СтруктураРезультат[СтрокаТипРесурса.Имя], СтрокаТипРесурса);
	КонецЦикла;
	
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "ДеревоРесурсов", СтруктураРезультат);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиЗначенийОтборов();
	СтруктураДляСохранения = Новый Структура();
	
	СтруктураДляСохранения.Вставить("ОтборСкрытьВыполненные", НеОтображатьЗавершенные);
	
	СтруктураДляСохранения.Вставить("ОтборТипыОбъектов", Новый Соответствие());
	Для Каждого СтрокаТаблицы Из ОтборТипыОбъектов Цикл
		СтруктураДляСохранения.ОтборТипыОбъектов.Вставить(СтрокаТаблицы.ПолноеИмя, СтрокаТаблицы.Пометка);
	КонецЦикла;
	
	СтруктураДляСохранения.Вставить("Отборы", Новый Соответствие());
	МассивДоступныхОтборов = ПолучитьМассивДоступныхОтборов();
	Для Каждого ИмяОтбора Из МассивДоступныхОтборов Цикл
		
		Попытка СтруктураДляСохранения.Отборы.Вставить("ОтборЗначение" + ИмяОтбора, ЭтотОбъект["ОтборЗначение" + ИмяОтбора]);
		Исключение КонецПопытки;
		
	КонецЦикла;
	
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "НастройкиЗначенийОтборов", СтруктураДляСохранения);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	СохранитьНастройкиДеревоРесурсов();
	СохранитьНастройкиЗначенийОтборов();
	
	// Режим отображения календаря.
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "РежимОтображения", ВариантПериода);
	
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "РежимОтображения", ВариантПериода);
	
	// Режим показа группы отборов.
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "ПоказатьСкрытьОтборы", Элементы.КнопкаПоказатьСкрытьОтборы.Пометка);
	
	//// Флаг КалендарьСписокФлагПоискПоПодстроке
	//CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "КалендарьСписокФлагПоискПоПодстроке", КалендарьСписокФлагПоискПоПодстроке);
	
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "СтруктураНастроек", Объект.КэшНастроекОтображения);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	// Отборы
	ВыбранныеОтборы = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ВыбранныеОтборы");
	Если ТипЗнч(ВыбранныеОтборы) <> Тип("Массив") Тогда
		НастройкаОтборовПоУмолчанию = ПолучитьНастройкиОтборовПоУмолчанию();
		ВыбранныеОтборы = НастройкаОтборовПоУмолчанию.ОтборыПоУмолчанию;
	КонецЕсли;
	КэшНастроекВыбранныеОтборы.ЗагрузитьЗначения(ВыбранныеОтборы);
	
	// Дерево ресурсов
	ЗагрузитьНастройкиДеревоРесурсов();
	
	// Режим отображения календаря.
	СохраненныйРежимОтображения = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "РежимОтображения");
	Если СохраненныйРежимОтображения = Неопределено Тогда
		СохраненныйРежимОтображения = "Неделя";
	КонецЕсли;
	
	ВариантПериода = СохраненныйРежимОтображения;
	
	ПоказатьСкрытьОтборы = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ПоказатьСкрытьОтборы");
	Если НЕ ЗначениеЗаполнено(ПоказатьСкрытьОтборы) Тогда
		ПоказатьСкрытьОтборы = Истина;
	КонецЕсли;
	Элементы.КнопкаПоказатьСкрытьОтборы.Пометка		= ПоказатьСкрытьОтборы;
	Элементы.ГруппаКалендарь.Видимость				= ПоказатьСкрытьОтборы;
	
	//// Флаг КалендарьСписокФлагПоискПоПодстроке
	// СохраненноеЗначение = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "КалендарьСписокФлагПоискПоПодстроке");
	// Если ТипЗнч(СохраненноеЗначение) = Тип("Булево") Тогда
	//	КалендарьСписокФлагПоискПоПодстроке = СохраненноеЗначение;
	// КонецЕсли;
	
	// ИсторияПоиска = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ИсторияПоиска");
	// Если ИсторияПоиска <> Неопределено Тогда
	//	Попытка КалендарьСписокТекстПоискаСписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
	//	Исключение КонецПопытки;
	// КонецЕсли;
		
	// Если ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск") И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
	//	Если КалендарьСписокФлагПоискПоПодстроке Тогда
	//		Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода = НСтр("ru='[Поиск по подстроке]';en='[Поиск по подстроке]'");
	//	Иначе
	//		Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода = НСтр("ru = '[Поиск по полному названию]'");
	//	КонецЕсли;
	//	Элементы.КалендарьСписокТекстПоиска.Подсказка = Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода;
	// Иначе
	//	Элементы.ГруппаКалендарьСписокПоиск.Видимость = Ложь;
	// КонецЕсли;
	
	// Если Объект.ТекущееОтображение = "Расписание" Тогда
	//	ПоРесурсамШкалаВремениПоГоризонтали = 1;
	// Иначе
	//	ПоРесурсамШкалаВремениПоГоризонтали = 0;
	// КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод()
	КалендарьПриИзменении(Элементы.Календарь);
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокОбновитьПоБыстромуПоиску()
	
	// Если ЗначениеЗаполнено(КалендарьСписокТекстПоиска) И Объект.ТекущееОтображение <> "Список" Тогда
	//	ПризнакПереключениеВРежимСпискаПоиском = Истина;
	//	КомандаТекущееОтображениеСписок(Неопределено);
	// КонецЕсли;
	
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	
	Если ЗначениеЗаполнено(КалендарьСписокТекстПоиска) Тогда
		ПроверитьИндексППД();
	КонецЕсли;
	
	КалендарьОбновитьКлиент();
	
	ВариантПериода = "Список";
	Элементы.ПанельОтборыРесурсы.ТекущаяСтраница = Элементы.СтраницаОтборов;
	Элементы.СтраницыВидыКалендаря.ТекущаяСтраница = Элементы.СтраницаАвтомотиватор;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИндексППД()
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлениеИндексаПДД()
	Состояние(НСтр("ru='Идет обновление индекса полнотекстового поиска ...';en='Full text search index is being updated...'"));
	ОбновитьИндексППД();
	ИндексППДАктуален = Истина;
	Состояние(НСтр("ru='Обновление индекса полнотекстового поиска завершено...';en='Update of full text search index is completed...'")); 
КонецПроцедуры

&НаСервере
Функция СоздатьНовоеМероприятие(ЗначенияЗаполнения)
	
	НовоеМероприятие = Документы.CRM_Взаимодействие.СоздатьДокумент();
	НовоеМероприятие.Заполнить(ЗначенияЗаполнения);
	НовоеМероприятие.Записать();
	
	СтруктураВозврата = Новый Структура("Ссылка,Текст,ЦветФона");
	СтруктураВозврата.Ссылка			= НовоеМероприятие.Ссылка;
	СтруктураВозврата.Текст				= ПолучитьПредставлениеСобытия(НовоеМероприятие.Тема, Неопределено, НовоеМероприятие.Ответственный, НовоеМероприятие.ПлановаяДата, НовоеМероприятие.ПлановаяДатаЗавершение);
	Если ЗначениеЗаполнено(НовоеМероприятие.ОсновнаяКатегория) Тогда
	СтруктураВозврата.ЦветФона			= Новый Структура("ЦветКрасный,ЦветЗеленый,ЦветСиний",НовоеМероприятие.ОсновнаяКатегория.ЦветКрасный,
										  НовоеМероприятие.ОсновнаяКатегория.ЦветЗеленый,
										  НовоеМероприятие.ОсновнаяКатегория.ЦветСиний);
	Иначе
		СтруктураВозврата.ЦветФона = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИндексППД()
	Если Не ИндексППДАктуален Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьИндексППДЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?';en='Full text search index is out of date. Update index?'"), РежимДиалогаВопрос.ДаНет); 
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексППДЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ИндексППДАктуален = Истина;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеИндексаПДД", 0.2, Истина);
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьПредельноеКоличествоБалловПользователь(Пользователь)
	Подразделение = Пользователь.Подразделение;
	Результат = 0;
	
	Пока ЗначениеЗаполнено(Подразделение) И Результат = 0 Цикл
		Результат = Подразделение.CRM_МаксимальноеКоличествоБалловВДень;
		Подразделение = Подразделение.Родитель;
	КонецЦикла;
	
	Если Результат = 0 Тогда
		Возврат 8; // по умолчанию
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредельноеКоличествоБалловПодразделение(Знач Подразделение)
	Результат = 0;
	
	Пока ЗначениеЗаполнено(Подразделение) И Результат = 0 Цикл
		Результат = Подразделение.CRM_МаксимальноеКоличествоБалловВДень;
		Подразделение = Подразделение.Родитель;
	КонецЦикла;
	
	Если Результат = 0 Тогда
		Возврат 8; // по умолчанию
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
// -Рабочий стол

&НаКлиенте
Процедура ОбработатьЗначениеПланировщикаНаВесьДень()
	
	ЗначениеЭлемента = Элементы.ВесьДень.ВыделенныеЭлементы[0].Значение;
	
	Если ТипЗнч(ЗначениеЭлемента.Источник) = Тип("Массив") Тогда
		
		СписокСобытий = Новый СписокЗначений;
		Для Каждого СтруктураЭлемента Из ЗначениеЭлемента.Источник Цикл
			СписокСобытий.Добавить(СтруктураЭлемента.Значение.Источник,СтруктураЭлемента.Текст);
		КонецЦикла;
		
		Параметрыформы = Новый Структура("СписокСобытий,Дата",СписокСобытий, НачалоДня(Элементы.ВесьДень.ВыделенныеЭлементы[0].Начало));
		ФормаНастройки = ПолучитьФорму(МетаданныеПуть + ".Форма.ФормаСпискаНаВесьДень", Параметрыформы, ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно);
			
		ФормаНастройки.Открыть();
		
	ИначеЕсли ЗначениеЭлемента.Свойство("Источник") Тогда
		ПоказатьЗначение(,ЗначениеЭлемента.Источник);
	КонецЕсли;
	
КонецПроцедуры

#Область СинхронизацияКалендарей

&НаКлиенте
Процедура ОбновитьСостояниеСинхронизации()
	
	ОбновитьСостояниеСинхронизацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСинхронизацииНаСервере()
	
	Календарь = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьДляСинхронизации");
	СостояниеСинхронизации = CRM_СинхронизацияКалендарей.СостояниеСинхронизацииКалендаря(Календарь);
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		СервисКалендарей = Календарь.СервисКалендарей;
	Иначе
		СервисКалендарей = Неопределено;
	КонецЕсли;
	
	Элементы.ДействиеСинхронизации.Картинка = CRM_СинхронизацияКалендарей.КартинкаСервисаКалендарей(СервисКалендарей);
	Элементы.ДействиеСинхронизации.Заголовок = СостояниеСинхронизации.ЗаголовокДействия;
	Элементы.КартинкаСинхронизации.РасширеннаяПодсказка.Заголовок = СостояниеСинхронизации.ТекстПодсказки;
	Элементы.КартинкаСинхронизации.Картинка = СостояниеСинхронизации.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьНаКлиенте()
	
	Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаПрогрессСинхронизации;
	ПодключитьОбработчикОжидания("ПродолжитьСинхронизироватьНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСинхронизироватьНаКлиенте()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.МаксимальныйИнтервал = 5;
	
	СинхронизироватьНаСервере();
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьНаСервере()
	
	CRM_СинхронизацияКалендарей.ИнициализироватьУзелПланаОбменаДляКалендаря();
	
	CRM_СинхронизацияКалендарей.ПрочитатьДанныеАвторизации(
		СервисКалендарей,
		ДанныеАвторизации,
		Пользователи.ТекущийПользователь());
	
	Если Не CRM_СинхронизацияКалендарейКлиентСервер.ДанныеАвторизацииЗаполнены(СервисКалендарей, ДанныеАвторизации) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = CRM_ОбщегоНазначенияСервер.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"CRM_СинхронизацияКалендарей.СинхронизироватьКалендарь",
		ДанныеАвторизации,,
		Ложь);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаСинхронизация;
		Оповестить("СинхронизацияКалендаря");
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура НачатьОтключение()
	
	ТекстВопроса = НСтр("ru = 'Доступ к сервису календарей будет отключен. Продолжить?'"); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатОтключения",
		ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОтключения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтключитьСинхронизациюНаСервере();
		ОбновитьСостояниеСинхронизации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьСинхронизациюНаСервере()
	
	CRM_ОбщегоНазначенияСервер.УстановитьЗначениеНастройки(
		ТекущийПользователь, "КалендарьДляСинхронизации", Справочники.CRM_КалендариСотрудников.ПустаяСсылка());
	CRM_СинхронизацияКалендарей.УдалитьДанныеАвторизации(СервисКалендарей, ТекущийПользователь);
	CRM_СинхронизацияКалендарей.ОчиститьОчередьНаОтправку(Календарь);
	
	ДанныеАвторизации = Неопределено;
	СервисКалендарей = Справочники.CRM_СервисыКалендарей.ПустаяСсылка();
	Календарь = Справочники.CRM_КалендариСотрудников.ПустаяСсылка();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ПеренесеноИзCRM20

&НаСервере
Функция ПолучитьОписаниеТиповРегистрируемыхОбъектов()
	Если ОписаниеТиповРегистрируемыхОбъектов.Типы().Количество() = 0 Тогда
		ОписаниеТиповРегистрируемыхОбъектов = Метаданные.РегистрыСведений.CRM_СобытияКалендаря.Измерения.Объект.Тип;
	КонецЕсли;
	
	Возврат ОписаниеТиповРегистрируемыхОбъектов;
КонецФункции

&НаСервере
Функция ПолучитьРегистрируемыеОбъекты()
	ОписаниеТиповОбъекта = ПолучитьОписаниеТиповРегистрируемыхОбъектов();
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Объект");
	Таблица.Колонки.Добавить("УчаствуетВПолнотекстовомПоиске", ОписаниеТиповБулево);
	
	бДобавлятьТаблицуРегистрируемыеОбъекты = (ТаблицаРегистрируемыхОбъектов.Количество() = 0);
	
	Для Каждого Тип Из ОписаниеТиповОбъекта.Типы() Цикл
		
		Попытка		МдОбъекта = Метаданные.НайтиПоТипу(Тип);
		Исключение	МдОбъекта = Неопределено;
		КонецПопытки;
		
		Если МдОбъекта = Неопределено Тогда Продолжить; КонецЕсли;
		Если Тип = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда Продолжить; КонецЕсли;
		Если Тип = Тип("ДокументСсылка.удалитьCRM_Мероприятие") Тогда Продолжить; КонецЕсли;
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Объект = МдОбъекта;
		НоваяСтрока.УчаствуетВПолнотекстовомПоиске = Истина;
		
		Если бДобавлятьТаблицуРегистрируемыеОбъекты Тогда
			НоваяСтрока = ТаблицаРегистрируемыхОбъектов.Добавить();
			НоваяСтрока.ПолноеИмя = МдОбъекта.ПолноеИмя();
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип);
			НоваяСтрока.Тип = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

&НаКлиенте
Процедура ОтборТипыОбъектовПометкаПриИзменении(Элемент)
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиЗначенийОтборов()
	СохраненныеОтборы = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "НастройкиЗначенийОтборов");
	
	Если ТипЗнч(СохраненныеОтборы) = Тип("Структура") Тогда
		Если СохраненныеОтборы.Свойство("ОтборСкрытьВыполненные") И ТипЗнч(СохраненныеОтборы.ОтборСкрытьВыполненные) = Тип("Булево") Тогда
			НеОтображатьЗавершенные = СохраненныеОтборы.ОтборСкрытьВыполненные;
		Иначе
			НеОтображатьЗавершенные = Истина;
		КонецЕсли;
		// Если СохраненныеОтборы.Свойство("ВыбиратьПользователейИерархически") И ТипЗнч(СохраненныеОтборы.ВыбиратьПользователейИерархически) = Тип("Булево") Тогда
		//	ЭтаФорма.ВыбиратьПользователейИерархически = СохраненныеОтборы.ВыбиратьПользователейИерархически;
		// КонецЕсли;
		
		Если СохраненныеОтборы.Свойство("ОтборТипыОбъектов") И ТипЗнч(СохраненныеОтборы.ОтборТипыОбъектов) = Тип("Соответствие") Тогда
			Для Каждого КлючЗначение Из СохраненныеОтборы.ОтборТипыОбъектов Цикл
				Если ТипЗнч(КлючЗначение.Значение) = Тип("Булево") Тогда
					НайденныеСтроки = ОтборТипыОбъектов.НайтиСтроки(Новый Структура("ПолноеИмя", КлючЗначение.Ключ));
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].Пометка = КлючЗначение.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СохраненныеОтборы.Свойство("Отборы") И ТипЗнч(СохраненныеОтборы.Отборы) = Тип("Соответствие") Тогда
			Для Каждого КлючЗначение Из СохраненныеОтборы.Отборы Цикл
				Попытка ЭтотОбъект[КлючЗначение.Ключ] = КлючЗначение.Значение;
				Исключение КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	Иначе
		НеОтображатьЗавершенные = Истина;
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
/// ДЕРЕВО РЕСУРСОВ

#Область ДеревоРесурсов

&НаКлиенте
Процедура ДобавитьИдентификаторыСтрокВМассив(НайденнаяСтрока, Массив)
	Если НайденнаяСтрока.ЭтоСистемнаяГруппа Тогда
		Если Массив.Найти(НайденнаяСтрока.ПолучитьИдентификатор()) = Неопределено Тогда
			Массив.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		Возврат;
	Иначе
		Если Не НайденнаяСтрока.ЭтоГруппа И Не НайденнаяСтрока.ЭтоЗаголовок Тогда
			Если Массив.Найти(НайденнаяСтрока.ПолучитьИдентификатор()) = Неопределено Тогда
				Массив.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
		НайденнаяСтрокаЭлементы = НайденнаяСтрока.ПолучитьЭлементы();
		Если НайденнаяСтрокаЭлементы.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрокаЭлемент Из НайденнаяСтрокаЭлементы Цикл
				ДобавитьИдентификаторыСтрокВМассив(НайденнаяСтрокаЭлемент, Массив);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов()
	СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов.Очистить();
	
	МассивИдентификаторовСтрок = Новый Массив();
	
	ВыделенныеСтроки = Элементы.ДеревоРесурсов.ВыделенныеСтроки;
	Если ТипЗнч(ВыделенныеСтроки) = Тип("Массив") Тогда
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Если МассивИдентификаторовСтрок.Найти(ВыделеннаяСтрока) = Неопределено Тогда
				МассивИдентификаторовСтрок.Добавить(ВыделеннаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И МассивИдентификаторовСтрок.Найти(ТекущиеДанные.ПолучитьИдентификатор()) = Неопределено Тогда
		МассивИдентификаторовСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	МассивРезультат = Новый Массив();
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
		НайденнаяСтрока = ДеревоРесурсов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если НайденнаяСтрока <> Неопределено Тогда
			ДобавитьИдентификаторыСтрокВМассив(НайденнаяСтрока, МассивРезультат);
		КонецЕсли;
	КонецЦикла;
	
	СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов.ЗагрузитьЗначения(МассивРезультат);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьСпискиЗначений(Список1, Список2)
	Если ТипЗнч(Список1) <> ТипЗнч(Список2) Или ТипЗнч(Список1) <> Тип("СписокЗначений") Или ТипЗнч(Список2) <> Тип("СписокЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Список1.Количество() <> Список2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для нИндекс = 0 По Список1.Количество() - 1 Цикл
		Если Список1[нИндекс].Значение <> Список2[нИндекс].Значение Или Список1[нИндекс].Представление <> Список2[нИндекс].Представление Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ДеревоРесурсовПриАктивизацииСтроки()
	
	СписокСтарый = СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов.Скопировать();
	
	ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов();
	
	Если Не СравнитьСпискиЗначений(СписокСтарый, СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов) Тогда
		КалендарьОбновитьКлиент(Новый Структура("НеЗаполнятьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ДобавитьУдалитьЭлементВДеревеРесурсов(, Истина)
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРесурса(ЗначениеРесурса)
	Если ЗначениеЗаполнено(ЗначениеРесурса) Тогда
		Если ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.Пользователи") Тогда
			ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Ключ", ЗначениеРесурса), ЭтотОбъект);
		ИначеЕсли ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.CRM_Помещения") Тогда
			ОткрытьФорму("Справочник.CRM_Помещения.ФормаОбъекта", Новый Структура("Ключ", ЗначениеРесурса), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоГруппа Или ТекущиеДанные.ЭтоСистемнаяГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРесурса(ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовПриАктивизацииСтроки(Элемент)
	
	Если ДеревоРесурсовНеОбрабатыватьПриАктивизацииСтроки = Истина Тогда
		ДеревоРесурсовНеОбрабатыватьПриАктивизацииСтроки = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		бДоступностьДобавитьЭлемент		= Ложь;
		бДоступностьДобавитьГруппу		= Ложь;
		бДоступностьУдалитьЭлемент		= Ложь;
		бДоступностьИзменитьГруппу		= Ложь;
		бДоступностьПереместить			= Ложь;
	Иначе
		бДоступностьДобавитьЭлемент	= (Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		бДоступностьДобавитьГруппу	= (Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		
		бДоступностьПереместитьВверх		= (Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		бДоступностьПереместитьВниз		= (Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		Если (бДоступностьПереместитьВверх Или бДоступностьПереместитьВниз) И ТекущиеДанные.ЭтоЗаголовок Тогда
			ДеревоРесурсовЭлементы = ДеревоРесурсов.ПолучитьЭлементы();
			Попытка		Индекс = ДеревоРесурсовЭлементы.Индекс(ТекущиеДанные);
			Исключение	Индекс = Неопределено;
			КонецПопытки;
			Если Индекс <> Неопределено Тогда
				Попытка
					Если ДеревоРесурсовЭлементы[Индекс - 1].ЭтоСистемнаяГруппа Тогда
						бДоступностьПереместитьВверх = Ложь;
					КонецЕсли;
				Исключение КонецПопытки;
				
				Попытка
					Если ДеревоРесурсовЭлементы[Индекс] = ДеревоРесурсовЭлементы[ДеревоРесурсовЭлементы.Количество() - 1] Тогда
						бДоступностьПереместитьВниз = Ложь;
					КонецЕсли;
				Исключение КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		бДоступностьУдалитьЭлемент = (Не ТекущиеДанные.ЭтоЗаголовок И Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		бДоступностьИзменитьГруппу = (ТекущиеДанные.ЭтоГруппа И Не ТекущиеДанные.ЭтоЗаголовок И Не ТекущиеДанные.ЭтоСистемнаяГруппа);
	КонецЕсли;
	
	Элементы.КнопкаДеревоРесурсовДобавитьЭлемент.Доступность	= бДоступностьДобавитьЭлемент;
	Элементы.КнопкаДеревоРесурсовУдалитьЭлемент.Доступность		= бДоступностьУдалитьЭлемент;
	Элементы.КнопкаДеревоРесурсовДобавитьГруппу.Доступность		= бДоступностьДобавитьГруппу;
	Элементы.КнопкаДеревоРесурсовИзменитьГруппу.Доступность		= бДоступностьИзменитьГруппу;
	Элементы.КнопкаДеревоРесурсовПереместитьВверх.Доступность	= бДоступностьПереместитьВверх;
	Элементы.КнопкаДеревоРесурсовПереместитьВниз.Доступность	= бДоступностьПереместитьВниз;
	Элементы.КнопкаДеревоРесурсовПодборЭлементов.Доступность	= бДоступностьДобавитьЭлемент;
	
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюДобавитьЭлемент.Доступность	= бДоступностьДобавитьЭлемент;
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюУдалитьЭлемент.Доступность	= бДоступностьУдалитьЭлемент;
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюДобавитьГруппу.Доступность	= бДоступностьДобавитьГруппу;
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюИзменитьГруппу.Доступность	= бДоступностьИзменитьГруппу;
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюПереместитьВверх.Доступность= бДоступностьПереместитьВверх;
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюПереместитьВниз.Доступность	= бДоступностьПереместитьВниз;
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюПодборЭлементов.Доступность	= бДоступностьДобавитьЭлемент;
	
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоРесурсовПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдалитьЭлементВДеревеРесурсов(ДобавитьГруппу = Ложь,
													Удалить = Ложь,
													ОткрытьВРежимеПодбора = Ложь,
													ОткрыватьДиалогВыбораЗначения = Истина,
													ДобавляемоеЗначение = Неопределено,
													ОбновлятьКалендарь = Истина)
	//
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекущиеДанные.ЭтоСистемнаяГруппа Тогда Возврат; КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Удалить И (ТекущийРодитель = Неопределено Или ТекущиеДанные.ЭтоЗаголовок) Тогда Возврат; КонецЕсли;
	
	Если Удалить Тогда
		Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоСистемнаяГруппа Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийРодитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		
		КалендарьОбновитьКлиент();
		Возврат;
	КонецЕсли;
	
	Если ТекущийРодитель = Неопределено Тогда
		Если ТекущиеДанные.ЭтоСистемнаяГруппа Тогда Возврат; КонецЕсли;
		
		ТекущийРодитель = ДеревоРесурсов;
		ТекущееИмяРесурса = ТекущиеДанные.Имя;
		ЭлементыДляДобавления = ТекущиеДанные.ПолучитьЭлементы();
	ИначеЕсли ТекущиеДанные.ЭтоГруппа Тогда
		ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
		Пока ТекРодитель <> Неопределено Цикл
			ТекущееИмяРесурса = ТекРодитель.Имя;
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
		ЭлементыДляДобавления = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
		Пока ТекРодитель <> Неопределено Цикл
			ТекущееИмяРесурса = ТекРодитель.Имя;
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
		ЭлементыДляДобавления = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;
	
	СтрокаОписание = "";
	ВыбранныйРесурсСсылка = Неопределено;
	Если ДобавитьГруппу Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьУдалитьЭлементВДеревеРесурсовЗавершение", ЭтотОбъект, Новый Структура("ЭлементыДляДобавления, ТекущееИмяРесурса, ТекущиеДанные", ЭлементыДляДобавления, ТекущееИмяРесурса, ТекущиеДанные));
		ПоказатьВводСтроки(ОписаниеОповещения, НСтр("ru='Название группы';en='Title of group'"),,, Ложь);
		Возврат;
	Иначе
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ТекущееИмяРесурса, ЭлементыДляДобавления, ОткрыватьДиалогВыбораЗначения, ДобавитьГруппу, ОбновлятьКалендарь",
													ТекущиеДанные, ТекущееИмяРесурса, ЭлементыДляДобавления, ОткрыватьДиалогВыбораЗначения, ДобавитьГруппу, ОбновлятьКалендарь);
		Если ОткрыватьДиалогВыбораЗначения Тогда
			ПараметрыФормыВыбора = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе", Истина, Не ОткрытьВРежимеПодбора);
			
			Если ТекущееИмяРесурса = "Пользователь" Тогда
				ПараметрыФормыВыбора.Вставить("ВыбратьГруппуПользователей", Ложь);
				ПараметрыФормыВыбора.Вставить("ТолькоДоступные", Истина);
				ФормаВыбора = ПолучитьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект);
			ИначеЕсли ТекущееИмяРесурса = "Помещение" Тогда
				ФормаВыбора = ПолучитьФорму("Справочник.CRM_Помещения.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект);
			Иначе
				Возврат;
			КонецЕсли;
			
			Если ОткрытьВРежимеПодбора Тогда
				ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				ФормаВыбора.Открыть();
			Иначе
				ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьУдалитьЭлементВДеревеРесурсовПродолжение", ЭтотОбъект, ДополнительныеПараметры);
				ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
				ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				ФормаВыбора.Открыть();
				Если ВыбранныйРесурсСсылка = Неопределено Тогда Возврат; КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавитьУдалитьЭлементВДеревеРесурсовПродолжение(ДобавляемоеЗначение, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдалитьЭлементВДеревеРесурсовПродолжение(ВыбранныйРесурсСсылка, ДополнительныеПараметры) Экспорт
		
	Если ВыбранныйРесурсСсылка = Неопределено Тогда Возврат; КонецЕсли;
	бОбновлятьКалендарь = ДополнительныеПараметры.ОбновлятьКалендарь;
	Если ДополнительныеПараметры.ДобавитьГруппу Тогда
	Иначе
		Если ЗначениеЗаполнено(ВыбранныйРесурсСсылка) Тогда
			Если Не ДополнительныеПараметры.ОткрыватьДиалогВыбораЗначения Тогда
				Для Каждого ПодчиненныйЭлементЭлементыДляДобавления Из ДополнительныеПараметры.ЭлементыДляДобавления Цикл
					Если ПодчиненныйЭлементЭлементыДляДобавления.Значение = ВыбранныйРесурсСсылка Тогда
						// Если ресурс уже есть в группе - не добавляем его повторно.
						Возврат;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ДополнительныеПараметры.ТекущиеДанные.ЭтоГруппа Или (ДополнительныеПараметры.ТекущиеДанные.ЭтоЗаголовок И Не ДополнительныеПараметры.ТекущиеДанные.ЭтоСистемнаяГруппа) Тогда
					бОбновлятьКалендарь = Истина;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ДополнительныеПараметры.ЭлементыДляДобавления.Добавить();
			НоваяСтрока.Имя = ДополнительныеПараметры.ТекущееИмяРесурса;
			НоваяСтрока.ЭтоЗаголовок = Ложь;
			
			НоваяСтрока.Значение = ВыбранныйРесурсСсылка;
			НоваяСтрока.Описание = Строка(ВыбранныйРесурсСсылка);
			НоваяСтрока.ЭтоГруппа = Ложь;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Значение) И ТипЗнч(НоваяСтрока.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
				НоваяСтрока.Недействителен = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Значение, "Недействителен");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДеревоРесурсов.Развернуть(ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор(), Ложь);
	
	Если бОбновлятьКалендарь Тогда
		КалендарьОбновитьКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдалитьЭлементВДеревеРесурсовЗавершение(СтрокаОписание, ДополнительныеПараметры) Экспорт
		
	Если Не ЗначениеЗаполнено(СтрокаОписание) Тогда Возврат; КонецЕсли;
	
	НоваяСтрока = ДополнительныеПараметры.ЭлементыДляДобавления.Добавить();
	НоваяСтрока.Имя = ДополнительныеПараметры.ТекущееИмяРесурса;
	НоваяСтрока.ЭтоЗаголовок = Ложь;
	
	НоваяСтрока.Описание = СтрокаОписание;
	НоваяСтрока.ЭтоГруппа = Истина;
		
	Элементы.ДеревоРесурсов.Развернуть(ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовДобавитьГруппу(Команда)
	ДобавитьУдалитьЭлементВДеревеРесурсов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовИзменитьГруппу(Команда)
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоЗаголовок Тогда Возврат; КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоГруппа Тогда Возврат; КонецЕсли;
	
	ВведеннаяСтрока = ТекущиеДанные.Описание;
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаДеревоРесурсовИзменитьГруппуЗавершение", ЭтотОбъект, ТекущиеДанные);
	ПоказатьВводСтроки(ОписаниеОповещения, ВведеннаяСтрока, НСтр("ru='Название группы';en='Title of group'"),, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовИзменитьГруппуЗавершение(ВведеннаяСтрока, ТекущиеДанные) Экспорт
	Если ЗначениеЗаполнено(ВведеннаяСтрока) Тогда
		ТекущиеДанные.Описание = ВведеннаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовДобавитьЭлемент(Команда)
	ДобавитьУдалитьЭлементВДеревеРесурсов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовПодборЭлементов(Команда)
	ДобавитьУдалитьЭлементВДеревеРесурсов(Ложь, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовУдалитьЭлемент(Команда)
	ДобавитьУдалитьЭлементВДеревеРесурсов(, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовПереместитьВверх(Команда)
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоСистемнаяГруппа Тогда Возврат; КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоРесурсов;
	КонецЕсли;
	
	ТекущийРодительЭлементы = ТекущийРодитель.ПолучитьЭлементы();
	
	ТекущийИндекс = ТекущийРодительЭлементы.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.ЭтоЗаголовок Тогда
		Попытка
			ДеревоРесурсовЭлементы = ДеревоРесурсов.ПолучитьЭлементы();
			Если ДеревоРесурсовЭлементы[ТекущийИндекс - 1].ЭтоСистемнаяГруппа Тогда
				Возврат;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТекущийИндекс > 0 Тогда
		ТекущийРодительЭлементы.Сдвинуть(ТекущийИндекс, -1);
		КалендарьОбновитьКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовПереместитьВниз(Команда)
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоСистемнаяГруппа Тогда Возврат; КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоРесурсов;
	КонецЕсли;
	
	ТекущийРодительЭлементы = ТекущийРодитель.ПолучитьЭлементы();
	
	ТекущийИндекс = ТекущийРодительЭлементы.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.ЭтоЗаголовок Тогда
		Попытка
			ДеревоРесурсовЭлементы = ДеревоРесурсов.ПолучитьЭлементы();
			Если ДеревоРесурсовЭлементы[ТекущийИндекс] = ДеревоРесурсовЭлементы[ДеревоРесурсовЭлементы.Количество() - 1] Тогда
				Возврат;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТекущийИндекс <> -1 И ТекущийИндекс < ТекущийРодительЭлементы.Количество() - 1 Тогда
		ТекущийРодительЭлементы.Сдвинуть(ТекущийИндекс, 1);
		
		КалендарьОбновитьКлиент();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДеревоРесурсовВВетку(Ветка, Дерево)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		НоваяСтрока = Ветка.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если НоваяСтрока.Описание <> Строка(НоваяСтрока.Значение) И ЗначениеЗаполнено(Строка(НоваяСтрока.Значение)) Тогда
			НоваяСтрока.Описание = Строка(НоваяСтрока.Значение);
		КонецЕсли;
		НоваяСтрока.Имя = СтрокаДерева.Имя;
		НоваяСтрока.ЭтоЗаголовок = Ложь;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Значение) И ТипЗнч(НоваяСтрока.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
			НоваяСтрока.Недействителен = НоваяСтрока.Значение.Недействителен;
		КонецЕсли;
			
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДобавитьДеревоРесурсовВВетку(НоваяСтрока, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиДеревоРесурсов()
	Дерево = РеквизитФормыВЗначение("ДеревоРесурсов");
	
	ЭлементыДереваВерхнийУровень = Дерево.Строки;
	ЭлементыДереваВерхнийУровень.Очистить();
	
	// TODO: поменять картинки на правильные.
	
	// системные группы
	СтрокаСистемная = ЭлементыДереваВерхнийУровень.Добавить();
	СтрокаСистемная.Имя = "ОбщиеПомещения";
	СтрокаСистемная.Описание			= НСтр("ru='Общие помещения';en='Common locations'");
	СтрокаСистемная.ЭтоСистемнаяГруппа	= Истина;
	СтрокаСистемная.ЭтоЗаголовок		= Истина;
	СтрокаСистемная.ЭтоГруппа			= Ложь;
	СтрокаСистемная.Картинка			= БиблиотекаКартинок.CRM_КалендарьПоРесурсам;
	
	СтрокаСистемная = ЭлементыДереваВерхнийУровень.Добавить();
	СтрокаСистемная.Имя = "МоеПодразделение";
	СтрокаСистемная.Описание			= НСтр("ru='Мое подразделение';en='My department'");
	СтрокаСистемная.ЭтоСистемнаяГруппа	= Истина;
	СтрокаСистемная.ЭтоЗаголовок		= Истина;
	СтрокаСистемная.ЭтоГруппа			= Ложь;
	СтрокаСистемная.Картинка			= БиблиотекаКартинок.CRM_КалендарьПоРесурсам;
	
	СтрокаПользователи = ЭлементыДереваВерхнийУровень.Добавить();
	СтрокаПользователи.Имя			= "Пользователь";
	СтрокаПользователи.Описание		= НСтр("ru='Пользователи';en='Users'");
	СтрокаПользователи.ЭтоЗаголовок	= Истина;
	СтрокаПользователи.ЭтоГруппа	= Ложь;
	
	СтрокаПомещения = ЭлементыДереваВерхнийУровень.Добавить();
	СтрокаПомещения.Имя				= "Помещение";
	СтрокаПомещения.Описание		= НСтр("ru='Помещения';en='Locations'");
	СтрокаПомещения.ЭтоЗаголовок	= Истина;
	СтрокаПомещения.ЭтоГруппа		= Ложь;
	
	бДобавитьПользователя = Истина;
	СтруктураДеревоРесурсов = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ДеревоРесурсов");
	Если ТипЗнч(СтруктураДеревоРесурсов) = Тип("Структура") Тогда
		Для Каждого СтрокаТипРесурса Из Дерево.Строки Цикл
			Если СтрокаТипРесурса.ЭтоСистемнаяГруппа Тогда Продолжить; КонецЕсли;
			
			ИмяРесурса = СтрокаТипРесурса.Имя;
			Если СтруктураДеревоРесурсов.Свойство(ИмяРесурса) И ТипЗнч(СтруктураДеревоРесурсов[ИмяРесурса]) = Тип("ДеревоЗначений") Тогда
				ДобавитьДеревоРесурсовВВетку(СтрокаТипРесурса, СтруктураДеревоРесурсов[ИмяРесурса]);
			КонецЕсли;
			
			Если ИмяРесурса = "Пользователь" И СтрокаТипРесурса.Строки.Количество() > 0 Тогда
				бДобавитьПользователя = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если бДобавитьПользователя Тогда
		Для Каждого СтрокаТипРесурса Из Дерево.Строки Цикл
			Если СтрокаТипРесурса.Имя = "Пользователь" Тогда
				НоваяСтрока = СтрокаТипРесурса.Строки.Добавить();
				НоваяСтрока.Имя = СтрокаТипРесурса.Имя;
				НоваяСтрока.Значение = ТекущийПользователь;
				НоваяСтрока.Описание = Строка(ТекущийПользователь);
				НоваяСтрока.ЭтоЗаголовок = Ложь;
				НоваяСтрока.ЭтоГруппа = Ложь;
				НоваяСтрока.Недействителен = НоваяСтрока.Значение.Недействителен;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРесурсов");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(ПроверяемыйРежимОтображения)
	Возврат (ПроверяемыйРежимОтображения = "ПоРесурсам");
КонецФункции

&НаСервере
Функция ПолучитьДеревоРесурсов()
	// Формирует 2-х уровневое дерево значений (ресурс, значения ресурсов) из многоуровнего дерева с группами.
	Дерево = РеквизитФормыВЗначение("ДеревоРесурсов");
	
	ДеревоРезультат = Дерево.Скопировать();
	ДеревоРезультат.Строки.Очистить();
	
	СтрокаПользователи = ДеревоРезультат.Строки.Добавить();
	СтрокаПользователи.Имя = "Пользователь";
	СтрокаПользователи.Описание = НСтр("ru='Пользователи';en='Users'");
	
	СтрокаПомещения = ДеревоРезультат.Строки.Добавить();
	СтрокаПомещения.Имя = "Помещение";
	СтрокаПомещения.Описание = НСтр("ru='Помещения';en='Locations'");
	
	Для Каждого Идентификатор Из СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов Цикл
		НайденнаяСтрока = ДеревоРесурсов.НайтиПоИдентификатору(Идентификатор.Значение);
		Если НайденнаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
		
		Если НайденнаяСтрока.ЭтоСистемнаяГруппа Тогда
			Если НайденнаяСтрока.Имя = "ОбщиеПомещения" Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Помещения.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.CRM_Помещения КАК Помещения
				|ГДЕ
				|	НЕ Помещения.ПометкаУдаления
				|	И Помещения.Общее;
				|");
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = СтрокаПомещения.Строки.Добавить();
					НоваяСтрока.Имя			= "Помещение";
					НоваяСтрока.Значение	= Выборка.Ссылка;
					НоваяСтрока.Описание	= Строка(Выборка.Ссылка);
				КонецЦикла;
				
			ИначеЕсли НайденнаяСтрока.Имя = "МоеПодразделение" Тогда
				Если ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда
					ТекущийПользовательКалендаря = ОтборЗначениеПользователь;
				Иначе
					ТекущийПользовательКалендаря = ТекущийПользователь;
				КонецЕсли;
				ПодразделениеТекущегоПользователя = ТекущийПользовательКалендаря.Подразделение;
				
				Если ЗначениеЗаполнено(ПодразделениеТекущегоПользователя) Тогда
					Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
					|	Пользователи.Ссылка КАК Пользователь
					|ИЗ
					|	Справочник.Пользователи КАК Пользователи
					|
					|ГДЕ
					|	НЕ Пользователи.ПометкаУдаления
					|	И Пользователи.Подразделение В ИЕРАРХИИ(&ПодразделениеТекущегоПользователя)
					|" + ?(ПоказыватьНедействительныхПользователей, "", "И НЕ Пользователи.Недействителен") + "
					|УПОРЯДОЧИТЬ ПО
					|	Пользователи.Наименование
					|");
					Запрос.УстановитьПараметр("ПодразделениеТекущегоПользователя", ПодразделениеТекущегоПользователя);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Пока Выборка.Следующий() Цикл
						НоваяСтрока = СтрокаПользователи.Строки.Добавить();
						НоваяСтрока.Имя			= "Пользователь";
						НоваяСтрока.Значение	= Выборка.Пользователь;
						НоваяСтрока.Описание	= Строка(НоваяСтрока.Значение);
					КонецЦикла;
					
				Иначе
					НоваяСтрока = СтрокаПользователи.Строки.Добавить();
					НоваяСтрока.Имя			= "Пользователь";
					НоваяСтрока.Значение	= ТекущийПользовательКалендаря;
					НоваяСтрока.Описание	= Строка(НоваяСтрока.Значение);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если НайденнаяСтрока.ЭтоГруппа Или НайденнаяСтрока.ЭтоЗаголовок Тогда
				Продолжить;
			КонецЕсли;
			
			ТекРодитель = НайденнаяСтрока.ПолучитьРодителя();
			Пока ТекРодитель <> Неопределено И Не ТекРодитель.ЭтоЗаголовок Цикл
				ТекРодитель = ТекРодитель.ПолучитьРодителя();
			КонецЦикла;
			
			Если ТекРодитель = Неопределено Или Не ТекРодитель.ЭтоЗаголовок Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекРодитель.Имя = "Пользователь" Тогда
				НоваяСтрока = СтрокаПользователи.Строки.Добавить();
			ИначеЕсли ТекРодитель.Имя = "Помещение" Тогда
				НоваяСтрока = СтрокаПомещения.Строки.Добавить();
			Иначе
				НоваяСтрока = Неопределено;
			КонецЕсли;
			
			Если НоваяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
			
			НоваяСтрока.Имя			= ТекРодитель.Имя;
			НоваяСтрока.Значение	= НайденнаяСтрока.Значение;
			НоваяСтрока.Описание	= Строка(НайденнаяСтрока.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоРезультат;
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////

&НаСервере
Функция НайтиОбъектыПолнотекстовыйПоискРежимСписок()
	СписокНайденныхОбъектов.Очистить();
	
	мОбластьПоиска = Новый Массив;
	РазмерПорции = 200;
	СтрокаДляПоиска = ?(КалендарьСписокФлагПоискПоПодстроке, "" + КалендарьСписокТекстПоиска + "*", КалендарьСписокТекстПоиска);
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаДляПоиска, РазмерПорции);
	
	РегистрируемыеОбъекты = ПолучитьРегистрируемыеОбъекты();
	Для Каждого ОбъектСтрока Из РегистрируемыеОбъекты Цикл
		Если ОбъектСтрока.УчаствуетВПолнотекстовомПоиске Тогда
			мОбластьПоиска.Добавить(ОбъектСтрока.Объект);
		КонецЕсли;
	КонецЦикла;
	СписокПоиска.ОбластьПоиска = мОбластьПоиска;
	СписокПоиска.ПорогНечеткости = 0;
	СписокПоиска.ПолучатьОписание = Ложь;
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		ИО = ИнформацияОбОшибке();
		Если ИО.Причина = Неопределено Тогда
			ТекстОшибки = ИО.Описание;
		Иначе
			Если ЗначениеЗаполнено(ИО.Причина.Описание) Тогда
				ТекстОшибки = ИО.Причина.Описание;
			Иначе
				ТекстОшибки = ИО.Описание;
			КонецЕсли;
		КонецЕсли;
		СписокНайденныхОбъектов.Очистить();
		
		Возврат ТекстОшибки;
	КонецПопытки;
	
	// Возврат, если поиск не результативен.
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		СписокНайденныхОбъектов.Очистить();
		Возврат НСтр("ru='Слишком много результатов, уточните запрос.';en='It is too much results, specify request.'");
	КонецЕсли;
	
	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		СписокНайденныхОбъектов.Очистить();
		Возврат НСтр("ru='Ничего не найдено';en='It is found nothing'");
	КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	СписокНайденныхОбъектов.Очистить();
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов) - 1;
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			ЭлементСсылка = Элемент.Значение.Ссылка;
			
			Если СписокНайденныхОбъектов.НайтиПоЗначению(ЭлементСсылка) = Неопределено Тогда
				СписокНайденныхОбъектов.Добавить(ЭлементСсылка);
				Если СписокНайденныхОбъектов.Количество() > 200 Тогда
					СписокНайденныхОбъектов.Очистить();
					Возврат НСтр("ru='Слишком много результатов, уточните запрос.';en='It is too much results, specify request.'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	Если СписокНайденныхОбъектов.Количество() = 0 Тогда
		СписокНайденныхОбъектов.Очистить();
		Возврат НСтр("ru='Ничего не найдено.';en='It is found nothing.'");          
	КонецЕсли;
	
	//// Удалим элемент из истории поиска если он там был
	// НомерНайденногоЭлементаСписка = КалендарьСписокТекстПоискаСписокВыбора.НайтиПоЗначению(КалендарьСписокТекстПоиска);
	// Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
	//	КалендарьСписокТекстПоискаСписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
	//	НомерНайденногоЭлементаСписка = КалендарьСписокТекстПоискаСписокВыбора.НайтиПоЗначению(КалендарьСписокТекстПоиска);
	// КонецЦикла;	
	//// Поставим элемент на первое место
	// КалендарьСписокТекстПоискаСписокВыбора.Вставить(0, КалендарьСписокТекстПоиска);
	// Пока КалендарьСписокТекстПоискаСписокВыбора.Количество() > 100 Цикл
	//	КалендарьСписокТекстПоискаСписокВыбора.Удалить(КалендарьСписокТекстПоискаСписокВыбора.Количество() - 1);
	// КонецЦикла;
	// CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "ИсторияПоиска", КалендарьСписокТекстПоискаСписокВыбора.ВыгрузитьЗначения());
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхЗапроса()
	
	СтруктураРезультат = Новый Структура("ТекстЗапроса,Параметры,ПоляОтбора,Отборы");
	
	// текст запроса
	СтруктураРезультат.ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователя.Объект КАК Объект,
	|	СобытияКалендаряПользователя.Пользователь КАК Пользователь,
	|	СобытияКалендаряПользователя.ПериодНачало КАК ПериодНачало,
	|	СобытияКалендаряПользователя.ПериодОкончание КАК ПериодОкончание,
	|	СобытияКалендаряПользователя.Тема КАК Тема,
	|	СобытияКалендаряПользователя.НаВесьДень КАК НаВесьДень,
	|	СобытияКалендаряПользователя.ПомещениеСобытия КАК Помещение,
	|	СобытияКалендаряПользователя.Проект КАК Проект,
	|	СобытияКалендаряПользователя.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СобытияКалендаряПользователя.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Низкая)
	|			ТОГДА 0
	|		КОГДА СобытияКалендаряПользователя.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Высокая)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Важность,
	|	СобытияКалендаряПользователя.Завершено КАК Завершено,
	|	МАКСИМУМ(СобытияКалендаряПользователя.Партнер) КАК Партнер,
	|	СобытияКалендаряПользователя.ВидВзаимодействия.Представление КАК ВидВзаимодействия,
	|	СобытияКалендаряПользователя.ВидДела КАК ВидДела,
	|	СобытияКалендаряПользователя.ОсновнаяКатегорияСобытия КАК ОсновнаяКатегория,
	|	ВЫБОР
	|		КОГДА СобытияКалендаряПользователя.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|			ТОГДА ЕСТЬNULL(СобытияКалендаряПользователя.Объект.ДокументОснование.ОжидаемаяВыручка, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Потенциал,
	|	СобытияКалендаряПользователя.СтатусКонтрольнойТочки КАК СтатусКонтрольнойТочки
	|ПОМЕСТИТЬ тмпКалендарь
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК СобытияКалендаряПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_Потенциалы КАК Потенциалы
	|		ПО СобытияКалендаряПользователя.Партнер = Потенциалы.Клиент
	|			И (ВЫБОР
	|				КОГДА СобытияКалендаряПользователя.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|					ТОГДА СобытияКалендаряПользователя.Пользователь.Подразделение
	|				ИНАЧЕ СобытияКалендаряПользователя.Подразделение
	|			КОНЕЦ = Потенциалы.Подразделение)
	|ГДЕ
	|	(СобытияКалендаряПользователя.ПериодОкончание >= СобытияКалендаряПользователя.ПериодНачало
	|			ИЛИ СобытияКалендаряПользователя.ПериодОкончание = ДАТАВРЕМЯ(1, 1, 1)
	|				И СобытияКалендаряПользователя.ПериодНачало <> ДАТАВРЕМЯ(1, 1, 1))
	|	И ВЫБОР
	|			КОГДА СобытияКалендаряПользователя.ПериодОкончание = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СобытияКалендаряПользователя.ПериодНачало
	|			ИНАЧЕ СобытияКалендаряПользователя.ПериодОкончание
	|		КОНЕЦ >= &ПериодНачало
	|	И СобытияКалендаряПользователя.ПериодНачало <= &ПериодОкончание
	|	И НЕ СобытияКалендаряПользователя.Объект.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА СобытияКалендаряПользователя.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|				ТОГДА СобытияКалендаряПользователя.Объект.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	//%УСЛОВИЕ_ТИПЫ_ОБЪЕКТОВ%
	|{ГДЕ
	|	СобытияКалендаряПользователя.Партнер.*}
	|
	|СГРУППИРОВАТЬ ПО
	|	СобытияКалендаряПользователя.ОсновнаяКатегорияСобытия,
	|	СобытияКалендаряПользователя.ВидВзаимодействия.Представление,
	|	СобытияКалендаряПользователя.ВидДела,
	|	СобытияКалендаряПользователя.Пользователь,
	|	СобытияКалендаряПользователя.ПериодНачало,
	|	СобытияКалендаряПользователя.Объект,
	|	СобытияКалендаряПользователя.Тема,
	|	СобытияКалендаряПользователя.НаВесьДень,
	|	СобытияКалендаряПользователя.ПомещениеСобытия,
	|	СобытияКалендаряПользователя.Важность,
	|	СобытияКалендаряПользователя.Проект,
	|	СобытияКалендаряПользователя.Подразделение,
	|	СобытияКалендаряПользователя.Завершено,
	|	СобытияКалендаряПользователя.СтатусКонтрольнойТочки,
	|	СобытияКалендаряПользователя.ПериодОкончание,
	|	ВЫБОР
	|		КОГДА СобытияКалендаряПользователя.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|			ТОГДА ЕСТЬNULL(СобытияКалендаряПользователя.Объект.ДокументОснование.ОжидаемаяВыручка, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тмпКалендарь.Объект,
	|	тмпКалендарь.Пользователь,
	|	тмпКалендарь.ПериодНачало,
	|	НАЧАЛОПЕРИОДА(тмпКалендарь.ПериодНачало, ДЕНЬ) КАК НачалоДня,
	|	ВЫБОР
	|		КОГДА тмпКалендарь.ПериодОкончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА тмпКалендарь.ПериодНачало
	|		ИНАЧЕ тмпКалендарь.ПериодОкончание
	|	КОНЕЦ КАК ПериодОкончание,
	|	тмпКалендарь.Тема,
	|	тмпКалендарь.НаВесьДень,
	|	тмпКалендарь.Помещение,
	|	тмпКалендарь.Проект,
	|	тмпКалендарь.Подразделение,
	|	тмпКалендарь.Важность,
	|	тмпКалендарь.Завершено,
	|	тмпКалендарь.Партнер,
	|	ВЫБОР
	|		КОГДА тмпКалендарь.Объект ССЫЛКА Документ.удалитьCRM_Мероприятие
	|				ИЛИ тмпКалендарь.Объект ССЫЛКА Документ.CRM_ЭтапКалендарногоПлана
	|			ТОГДА тмпКалендарь.Объект.СписокУчастников
	|		КОГДА тмпКалендарь.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|				ИЛИ тмпКалендарь.Объект ССЫЛКА Документ.УдалитьCRM_Событие
	|			ТОГДА тмпКалендарь.Объект.КонтактноеЛицо.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Контакт,
	|	ВЫБОР
	|		КОГДА тмпКалендарь.Объект ССЫЛКА Документ.удалитьCRM_Мероприятие
	|			ТОГДА тмпКалендарь.Объект.СписокКлиентов
	|		КОГДА тмпКалендарь.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|				ИЛИ тмпКалендарь.Объект ССЫЛКА Документ.УдалитьCRM_Событие
	|			ТОГДА тмпКалендарь.Объект.Партнер.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Партнеры,
	|	тмпКалендарь.ВидВзаимодействия,
	|	тмпКалендарь.ВидДела,
	|	тмпКалендарь.ОсновнаяКатегория,
	|	ВЫБОР
	|		КОГДА тмпКалендарь.Завершено
	|			ТОГДА тмпКалендарь.ПериодОкончание
	|		ИНАЧЕ тмпКалендарь.ПериодНачало
	|	КОНЕЦ КАК Дата,
	|	тмпКалендарь.Потенциал,
	|	тмпКалендарь.СтатусКонтрольнойТочки" + ?(ВариантПериода = "Список", ",
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(тмпКалендарь.Объект) = ТИП(Документ.удалитьCRM_Мероприятие)
	|			ТОГДА 4
	|		КОГДА ТИПЗНАЧЕНИЯ(тмпКалендарь.Объект) = ТИП(Документ.CRM_ЭтапКалендарногоПлана) 
	|			ТОГДА 
	|				ВЫБОР
	|					КОГДА тмпКалендарь.Объект.ТипЭтапа = Значение(Перечисление.CRM_ТипыЭтапов.Этап)
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 13
	|	КОНЕЦ КАК КартинкаМероприятия,
	|	тмпКалендарь.Объект.Описание КАК Описание", "") + "
	|ИЗ
	|	тмпКалендарь КАК тмпКалендарь
	|{ГДЕ
	|	тмпКалендарь.Партнер.*}
	|УПОРЯДОЧИТЬ ПО
	|	НачалоДня,
	//|	Важность Убыв,
	|	ПериодНачало";
	
	// Обязательные параметры запроса
	// СтруктураРезультат.Параметры = Новый Структура();
	// СтруктураРезультат.ПоляОтбора = ПолучитьМассивДоступныхОтборов();
	СтруктураРезультат.Отборы = Новый Соответствие();
	
	бИспользуетсяПолнотекстовыйПоискСписка = ЗначениеЗаполнено(КалендарьСписокТекстПоиска);
	// бИспользуетсяПолнотекстовыйПоискСписка = Ложь;
	
	// Отбор по результатам полнотекстового поиска.
	Если бИспользуетсяПолнотекстовыйПоискСписка Тогда
		ТекстОшибки = НайтиОбъектыПолнотекстовыйПоискРежимСписок();
		
		СтруктураРезультат.Отборы.Вставить("Объект", Новый Соответствие());
		СтруктураРезультат.Отборы["Объект"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.ВСписке);
		СтруктураРезультат.Отборы["Объект"].Вставить("Значение",		?(ТекстОшибки = Неопределено, СписокНайденныхОбъектов, Новый СписокЗначений()));
		СтруктураРезультат.Отборы["Объект"].Вставить("Использование",	Истина);
		
		Если ТекстОшибки <> Неопределено Тогда
			ТекстОшибкиГлобальный = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Отбор по типам объектов
	СтрУсловие = "";
	Для Каждого СтрокаТаблицы Из ОтборТипыОбъектов Цикл
		Если СтрокаТаблицы.ПолноеИмя = "Задачи" Тогда
			// Пропуск предопределенного типа "Задачи".
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Пометка Тогда
			СтрУсловие = СтрУсловие
				+ ?(ПустаяСтрока(СтрУсловие), "", " ИЛИ ")
				+ "СобытияКалендаряПользователя.Объект ССЫЛКА "
				+ СтрокаТаблицы.ПолноеИмя;
			//
		КонецЕсли;
	КонецЦикла;
		
	Если ПустаяСтрока(СтрУсловие) Тогда
		СтрУсловие = "И ЛОЖЬ";
	Иначе
		СтрУсловие = "И (" + СтрУсловие + ")";
	КонецЕсли;
	
	СтруктураРезультат.ТекстЗапроса = СтрЗаменить(СтруктураРезультат.ТекстЗапроса, "//%УСЛОВИЕ_ТИПЫ_ОБЪЕКТОВ%", СтрУсловие);
	
	// Отборы по выбранным ресурсам - для оптимизации запроса.
	бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы = ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(ВариантПериода);
	МассивПропуститьОтборы = Новый Массив();
	Если бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы Тогда
		ГруппаИли = Новый Соответствие();
		
		ТекущиееДеревоРесурсов = ПолучитьДеревоРесурсов();
		Для Каждого ЭлементВерхнегоУровня Из ТекущиееДеревоРесурсов.Строки Цикл
			ПолеОтбора = ЭлементВерхнегоУровня.Имя;
			МассивПропуститьОтборы.Добавить(ПолеОтбора);
			
			ОтборЗначениеСписок = Новый Массив;
			
			Для Каждого ЭлементЗначениеРесурса Из ЭлементВерхнегоУровня.Строки Цикл
				ОтборЗначениеСписок.Добавить(ЭлементЗначениеРесурса.Значение);
			КонецЦикла;
			
			ГруппаИли.Вставить(ПолеОтбора, Новый Соответствие());
			
			ГруппаИли[ПолеОтбора].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.ВСписке);
			ГруппаИли[ПолеОтбора].Вставить("Значение",		ОтборЗначениеСписок);
			ГруппаИли[ПолеОтбора].Вставить("Использование",	Истина);
		КонецЦикла;
		
		СтруктураРезультат.Отборы.Вставить("ГруппаОтбораПоВыбраннымРесурсам", Новый Соответствие());
		СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("ВидСравнения",	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Значение",		ГруппаИли);
		СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Использование",	Истина);
	КонецЕсли;
	
	// Отбор по признаку Скрыть выполненные.
	Если НеОтображатьЗавершенные Тогда
		СтруктураРезультат.Отборы.Вставить("Завершено", Новый Соответствие());
		СтруктураРезультат.Отборы["Завершено"].Вставить("ВидСравнения",		ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Завершено"].Вставить("Значение",			Ложь);
		СтруктураРезультат.Отборы["Завершено"].Вставить("Использование",	Истина);
	КонецЕсли;
	
	Если НЕ ВариантПериода = "ПоРесурсам" И
		 НЕ Пользователи.РолиДоступны("CRM_ПросмотрЗадачДругихПользователейВКалендаре, ПолныеПрава") Тогда
		// Если не доступна роль CRM_ПросмотрЗадачДругихПользователейВКалендаре, тогда доступны только объекты
		// по текущему пользователю.
		Если ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда
			Если ОтборЗначениеПользователь = ТекущийПользователь Тогда
				ПользовательДляОтбора = ТекущийПользователь;
			Иначе
				ПользовательДляОтбора = Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ПользовательДляОтбора = ТекущийПользователь;
		КонецЕсли;
		СтруктураРезультат.Отборы.Вставить("Пользователь", Новый Соответствие());
		СтруктураРезультат.Отборы["Пользователь"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Пользователь"].Вставить("Значение",		ПользовательДляОтбора);
		СтруктураРезультат.Отборы["Пользователь"].Вставить("Использование",	Истина);
		
		МассивПропуститьОтборы.Добавить("Пользователь");
	КонецЕсли;
	
	// Если используется отображение по ресурсам - все остальные отборы игнорируются.
	Если НЕ бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы Тогда
		СтруктураРезультат.Отборы.Вставить("Пользователь", Новый Соответствие());
		СтруктураРезультат.Отборы["Пользователь"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Пользователь"].Вставить("Значение",		ОтборЗначениеПользователь);
		СтруктураРезультат.Отборы["Пользователь"].Вставить("Использование",	ЗначениеЗаполнено(ОтборЗначениеПользователь));
		
		СтруктураРезультат.Отборы.Вставить("Подразделение", Новый Соответствие());
		СтруктураРезультат.Отборы["Подразделение"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Подразделение"].Вставить("Значение",		ОтборЗначениеПодразделение);
		СтруктураРезультат.Отборы["Подразделение"].Вставить("Использование",	ЗначениеЗаполнено(ОтборЗначениеПодразделение));
		
		СтруктураРезультат.Отборы.Вставить("Партнер", Новый Соответствие());
		СтруктураРезультат.Отборы["Партнер"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Партнер"].Вставить("Значение",		ОтборЗначениеПартнер);
		СтруктураРезультат.Отборы["Партнер"].Вставить("Использование",	ЗначениеЗаполнено(ОтборЗначениеПартнер));
		
		СтруктураРезультат.Отборы.Вставить("Проект", Новый Соответствие());
		СтруктураРезультат.Отборы["Проект"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Проект"].Вставить("Значение",		ОтборЗначениеПроект);
		СтруктураРезультат.Отборы["Проект"].Вставить("Использование",	ЗначениеЗаполнено(ОтборЗначениеПроект));
		
		СтруктураРезультат.Отборы.Вставить("Помещение", Новый Соответствие());
		СтруктураРезультат.Отборы["Помещение"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Помещение"].Вставить("Значение",		ОтборЗначениеПомещение);
		СтруктураРезультат.Отборы["Помещение"].Вставить("Использование",	ЗначениеЗаполнено(ОтборЗначениеПомещение));
	КонецЕсли;
	
	// Если Не бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы И Не ЭтаФорма.ВариантПериода = "Диспетчеризация" Тогда
	//	Для Каждого ПолеОтбора Из СтруктураРезультат.ПоляОтбора Цикл
	//		Если МассивПропуститьОтборы.Найти(ПолеОтбора) <> Неопределено Тогда Продолжить; КонецЕсли;
	//		
	//		ИменаДляОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
	//		ОтборИспользование = ЭтаФорма[ИменаДляОтбора.ИмяИсточникаДанныхИспользование];
	//		
	//		Если ОтборИспользование Тогда
	//			ОтборВидСравнения = ЭтаФорма[ИменаДляОтбора.ИмяИсточникаДанныхВидСравнения];
	//			ОтборЗначение = ЭтаФорма[ИменаДляОтбора.ИмяИсточникаДанныхЗначение];
	//			
	//			СтруктураРезультат.Отборы.Вставить(ПолеОтбора, Новый Соответствие());
	//			СтруктураРезультат.Отборы[ПолеОтбора].Вставить("ВидСравнения",	ОтборВидСравнения);
	//			СтруктураРезультат.Отборы[ПолеОтбора].Вставить("Значение",		ОтборЗначение);
	//			СтруктураРезультат.Отборы[ПолеОтбора].Вставить("Использование",	ОтборИспользование);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	// КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаСервере
Функция ПолучитьДанныеСобытийЗаПериодПоДням(ПериодНачало = Неопределено, ПериодОкончание = Неопределено)
	
	// Создание и настройка схемы компоновки данных.
	СКДДанныеКалендаря = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанныеКалендаря.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанныхСобытия";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	СтруктураДанныхЗапроса = ПолучитьСтруктуруДанныхЗапроса();
	
	ТекстЗапроса = СтруктураДанныхЗапроса.ТекстЗапроса;
	
	НаборДанных = СКДДанныеКалендаря.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанныхСобытия";
	НаборДанных.ИсточникДанных = "ИсточникДанныхСобытия";
	НаборДанных.Запрос = ТекстЗапроса;
	
	Настройки = СКДДанныеКалендаря.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанныеКалендаря));
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// Пропускаем системные поля
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
	КонецЦикла;
	
	Настройки.ПараметрыДанных.Элементы.Очистить();
	
	// Установка обязательных параметров запроса.
	Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ПериодНачало");
	Параметр.Значение = ПериодНачало;
	Параметр.Использование = Истина;
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ПериодОкончание");
	Параметр.Значение = ПериодОкончание;
	Параметр.Использование = Истина;
	
	// Установка переданных параметров запроса.
	Если ТипЗнч(СтруктураДанныхЗапроса.Параметры) = Тип("Структура") Тогда
		Для Каждого ПараметрКлючЗначение Из СтруктураДанныхЗапроса.Параметры Цикл
			Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
			Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ПараметрКлючЗначение.Ключ);
			Параметр.Значение = ПараметрКлючЗначение.Значение;
			Параметр.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Настройки.Отбор.Элементы.Очистить();
	
	// Установка переданных отборов.
	Если ТипЗнч(СтруктураДанныхЗапроса.Отборы) = Тип("Соответствие") Тогда
		СоздатьОтборПоОписанию(Настройки.Отбор.Элементы, СтруктураДанныхЗапроса.Отборы, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	КонецЕсли;
	
	// Если бИспользоватьСобытияНаВесьДень И (ЭтаФорма.ВариантПериода = "Расписание" Или (ЭтаФорма.ВариантПериода = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1)) Тогда
	//	// в режиме расписания фильтруем события с признаком "СобытиеНаВесьДень"
	//	УстановитьЗначениеВОтборе(Настройки.Отбор, "СобытиеНаВесьДень", ВидСравненияКомпоновкиДанных.Равно, Ложь, Истина, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	// КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанныеКалендаря, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Возврат РезультатТаблица;
	
КонецФункции

&НаСервере
Процедура СоздатьОтборПоОписанию(ЭлементыОтбора, ОписанияЭлементовОтбора, ДоступныеПоля = Неопределено)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_Календарь_СоздатьОтборПоОписанию(
			ЭлементыОтбора,
			ОписанияЭлементовОтбора,
			ДоступныеПоля);
		//
	Исключение
		Попытка
			CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Компонента.ЗащитаАктивна();
		Исключение
		КонецПопытки;
		Попытка
			CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_Календарь_СоздатьОтборПоОписанию(
			ЭлементыОтбора,
			ОписанияЭлементовОтбора,
			ДоступныеПоля);
			//
		Исключение
		КонецПопытки;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СформироватьКалендарьНаСервере()
	
	ВыводимыйДень = Неопределено;
	Если ВариантПериода = "Список" Тогда
		
		НачальнаяДата = ДатаОтображения;
		КонечнаяДата  = ДатаОтображения + 14 * 24 * 60 * 60 - 1; // на две недели
		
	ИначеЕсли ВариантПериода = "ПоРесурсам" Тогда
		
		ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
		НачальнаяДата = ПериодДанных.ДатаНачала;
		КонечнаяДата = ПериодДанных.ДатаОкончания;
		
	Иначе
		Если ВариантПериода = "Месяц" Тогда
			НачальнаяДата		= НачалоМесяца(ДатаОтображения);
			КонечнаяДата	= КонецМесяца(ДатаОтображения);
		Иначе
			ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
			НачальнаяДата = ПериодДанных.ДатаНачала;
			КонечнаяДата = ПериодДанных.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	РезультатТаблица = ПолучитьДанныеСобытийЗаПериодПоДням(НачальнаяДата, КонечнаяДата);
	
	Мероприятия.Очистить();
	
	Для Каждого СтрокаРезультата Из РезультатТаблица Цикл
		
		НоваяСтрока = Мероприятия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
		
		НоваяСтрока.Время			= ВремяМероприятия(СтрокаРезультата.ПериодНачало, СтрокаРезультата.ПериодОкончание, СтрокаРезультата.НаВесьДень);
		Если НоваяСтрока.Время = "Весь день" И НЕ СтрокаРезультата.НаВесьДень Тогда
			НоваяСтрока.НаВесьДень = Истина;
		КонецЕсли;
		Если НачалоДня(СтрокаРезультата.Дата) <> ВыводимыйДень Тогда
			ВыводимыйДень = НачалоДня(СтрокаРезультата.Дата);
			НоваяСтрока.День		= ДатаМероприятия(СтрокаРезультата.Дата);
		Иначе
			// придаем вид группировки
			НоваяСтрока.День		= "";
		КонецЕсли;
		Если ТипЗнч(СтрокаРезультата.Объект) = Тип("ДокументСсылка.удалитьCRM_Мероприятие") Тогда
			НоваяСтрока.Тема = СтрокаРезультата.Объект.Тема+", "+СтрокаРезультата.Объект.Место+", "+СтрокаРезультата.Объект.Описание;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ВидВзаимодействия) Тогда
			НоваяСтрока.ВидВзаимодействия = СтрокаРезультата.Объект.Метаданные().Синоним;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.Партнер) И ТипЗнч(СтрокаРезультата.Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") И ЗначениеЗаполнено(СтрокаРезультата.Объект.ПотенциальныйКлиент) Тогда
			НоваяСтрока.Партнер = СтрокаРезультата.Объект.ПотенциальныйКлиент;
			НоваяСтрока.Партнеры = СтрокаРезультата.Объект.ПотенциальныйКлиент;
		КонецЕсли;
		НоваяСтрока.ПартнерСсылка = НоваяСтрока.Партнер;
	КонецЦикла;
	
	Если НЕ ВариантПериода = "Список" Тогда
		ОбновитьДанныеПланировщикаСервер();
	КонецЕсли;
	
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Ложь;
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	Элементы.Календарь.ВыделенныеДаты.Добавить(ДатаОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьОбновитьКлиент(Параметры = Неопределено)
	
	Если ВариантПериода = "Список" Или ВариантПериода = "ПоРесурсам" Тогда
		Если ТипЗнч(Параметры) <> Тип("Структура") Или Не Параметры.Свойство("НеЗаполнятьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов") Тогда
			ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов();
		КонецЕсли;
	КонецЕсли;
	
	СформироватьКалендарьНаСервере();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////
// Блок описания отборов

&НаКлиенте
Процедура ПриИзмененииОтбораОбщий(ОписаниеОтбора)
	
	Элементы.МероприятияПользователь.Видимость = НЕ ЗначениеЗаполнено(ОтборЗначениеПользователь);
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	КалендарьОбновитьКлиент();
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаДляОтбора(ПолеОтбора)
	СтруктураРезультат = Новый Структура("
	|ИмяЭлементаИспользование,
	|ИмяЭлементаЗаголовок,
	|ИмяЭлементаВидСравнения,
	|ИмяЭлементаЗначение,
	|ИмяИсточникаДанныхИспользование,
	|ИмяИсточникаДанныхВидСравнения,
	|ИмяИсточникаДанныхЗначение");
	
	СтруктураРезультат.ИмяЭлементаИспользование			= "ОтборИспользование"	+ ПолеОтбора;
	СтруктураРезультат.ИмяЭлементаЗаголовок				= "ОтборЗаголовок"		+ ПолеОтбора;
	СтруктураРезультат.ИмяЭлементаВидСравнения			= "ОтборВидСравнения"	+ ПолеОтбора;
	СтруктураРезультат.ИмяЭлементаЗначение				= "ОтборЗначение"		+ ПолеОтбора;
	СтруктураРезультат.ИмяИсточникаДанныхИспользование	= "ОтборИспользование"	+ ПолеОтбора;
	СтруктураРезультат.ИмяИсточникаДанныхВидСравнения	= "ОтборВидСравнения"	+ ПолеОтбора;
	СтруктураРезультат.ИмяИсточникаДанныхЗначение		= "ОтборЗначение"		+ ПолеОтбора;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеОтбораДляЭлемента(Элемент, КонтекстЭтаФорма)
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ИмяПоляОтбора = Элемент;
	Иначе
		// Вычисления имени поля отбора из имени элемента формы.
		ИмяПоляОтбора = Элемент.Имя;
		ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, "Отбор", "");
		ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, "Использование", "");
		ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, "ВидСравнения", "");
		ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, "Значение", "");
	КонецЕсли;
	
	ИменаДляОтборов = ПолучитьИменаДляОтбора(ИмяПоляОтбора);
	
	СтруктураРезультат = Новый Структура(
	"ПолеОтбора,
	//|ИмяЭлементаИспользование,
	|ИмяЭлементаЗаголовок,
	|ИмяЭлементаВидСравнения,
	|ИмяЭлементаЗначение,
	|ИмяИсточникаДанныхИспользование,
	|ИмяИсточникаДанныхВидСравнения,
	|ИмяИсточникаДанныхЗначение,
	|ДоступныеВидыСравнения,
	|ВидСравненияПоУмолчанию,
	|ЗначениеПоУмолчанию,
	|ИспользованиеПоУмолчанию,
	|ОписаниеТиповОграничениеВыбора,
	|ОписаниеТиповСписокЗначений,
	|ПустоеЗначениеСписок,
	|ПустоеЗначениеЗначение,
	|ИсточникДанныхИспользование,
	|ИсточникДанныхВидСравнения,
	|ИсточникДанныхЗначение,
	|ВыборИзСписка");
	
	Если ИмяПоляОтбора = "Пользователь" Тогда
		СтруктураРезультат.ПолеОтбора = "Пользователь";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		СтруктураРезультат.ПустоеЗначениеЗначение = КонтекстЭтаФорма.ПользовательПустаяСсылка;
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = КонтекстЭтаФорма.ТекущийПользователь;
		СтруктураРезультат.ИспользованиеПоУмолчанию = Истина;
		
	ИначеЕсли ИмяПоляОтбора = "Подразделение" Тогда
		СтруктураРезультат.ПолеОтбора = "Подразделение";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "Помещение" Тогда
		СтруктураРезультат.ПолеОтбора = "Помещение";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.CRM_Помещения");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "Партнер" Тогда
		СтруктураРезультат.ПолеОтбора = "Партнер";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "Проект" Тогда
		СтруктураРезультат.ПолеОтбора = "Проект";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.Проекты");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультат.ПустоеЗначениеСписок = Новый СписокЗначений();
	СтруктураРезультат.ОписаниеТиповСписокЗначений = Новый ОписаниеТипов("СписокЗначений");
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, ИменаДляОтборов);
	
	// СтруктураРезультат.ИсточникДанныхИспользование = КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхИспользование];
	// СтруктураРезультат.ИсточникДанныхВидСравнения = КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения];
	СтруктураРезультат.ИсточникДанныхИспользование = Истина;
	СтруктураРезультат.ИсточникДанныхВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураРезультат.ИсточникДанныхЗначение = КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхЗначение];
	
	// Если	КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения] = ВидСравненияКомпоновкиДанных.ВСписке
	//	Или	КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения] = ВидСравненияКомпоновкиДанных.НеВСписке
	//	Или	КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения] = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
	//	Или	КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения] = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
	//	//
	//	СтруктураРезультат.ВыборИзСписка = Истина;
	// Иначе
		СтруктураРезультат.ВыборИзСписка = Ложь;
	// КонецЕсли;
	
	СтруктураРезультат.ДоступныеВидыСравнения = Новый СписокЗначений();
	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	// СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	// СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	// СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Если СтруктураРезультат.ОписаниеТиповОграничениеВыбора.СодержитТип(Тип("Строка")) Тогда
		СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
		СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
	КонецЕсли;
	
	// Если	СтруктураРезультат.ОписаниеТиповОграничениеВыбора.СодержитТип(Тип("Число"))
	//	Или СтруктураРезультат.ОписаниеТиповОграничениеВыбора.СодержитТип(Тип("Дата")) Тогда
	////
	//	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Больше);
	//	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	//	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
	//	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	// КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивДоступныхОтборов()
	МассивОтборов = Новый Массив();
	МассивОтборов.Добавить("Пользователь");
	МассивОтборов.Добавить("Подразделение");
	МассивОтборов.Добавить("Партнер");
	МассивОтборов.Добавить("Проект");
	МассивОтборов.Добавить("Помещение");
	
	Возврат МассивОтборов;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставленияОтборов()
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("Пользователь",						НСтр("ru='Пользователь';en='User'"));
	СтруктураРезультат.Вставить("Подразделение",					НСтр("ru='Подразделение';en='Department'"));
	СтруктураРезультат.Вставить("Партнер",							НСтр("ru='Клиент';en='Customer'"));
	СтруктураРезультат.Вставить("Проект",							НСтр("ru='Проект';en='Project'"));
	СтруктураРезультат.Вставить("Помещение",						НСтр("ru='Помещение';en='Location'"));
	СтруктураРезультат.Вставить("ВидСобытия",						НСтр("ru='Вид события';en='Event type'"));
	СтруктураРезультат.Вставить("ВходящееИсходящееСобытие",			НСтр("ru='Направление события';en='Direction of event'"));
	СтруктураРезультат.Вставить("СостояниеСобытия",					НСтр("ru='Состояние события';en='State of event'"));
	СтруктураРезультат.Вставить("ОсновнаяКатегорияСобытия",			НСтр("ru='Категория события';en='Event category'"));
	СтруктураРезультат.Вставить("СтатусКонтрольнойТочки",			НСтр("ru='Статус контрольной точки';en='Status of test point'"));
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиОтборовПоУмолчанию()
	ДоступныеОтборы = ПолучитьМассивДоступныхОтборов();
	
	ИндексПользователь = ДоступныеОтборы.Найти("Пользователь");
	Если ИндексПользователь <> Неопределено Тогда
		ДоступныеОтборы.Удалить(ИндексПользователь);
	КонецЕсли;
	
	ОтборыПоУмолчанию = Новый Массив();
	
	ОтборыПоУмолчанию.Добавить("Пользователь");
	ОтборыПоУмолчанию.Добавить("Подразделение");
	ОтборыПоУмолчанию.Добавить("Помещение");
	
	ПредставленияОтборов = ПолучитьПредставленияОтборов();
	
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("ДоступныеОтборы",		ДоступныеОтборы);
	СтруктураРезультат.Вставить("ОтборыПоУмолчанию",	ОтборыПоУмолчанию);
	СтруктураРезультат.Вставить("ПредставленияОтборов",	ПредставленияОтборов);
	
	Возврат СтруктураРезультат;
КонецФункции

//
//////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПроверитьЗаполнениеОтбораПоПользователю(бБылиИзмененияВОтборах = Неопределено)
	бВключитьОтборПоТекущемуПользователю = Истина;
	
	МассивДоступныхОтборов = ПолучитьМассивДоступныхОтборов();
	Для Каждого ПолеОтбора Из МассивДоступныхОтборов Цикл
		ИменаОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
		ЭлементОтбора = Элементы[ИменаОтбора.ИмяЭлементаЗначение];
		ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(ЭлементОтбора, ЭтотОбъект);
		Если ОписаниеОтбора <> Неопределено Тогда
			Если Не Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].Видимость Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Найти(",Пользователь,Подразделение,Партнер,Проект,Помещение,", "," + ПолеОтбора + ",") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект[ИменаОтбора.ИмяИсточникаДанныхЗначение]) Тогда
			бВключитьОтборПоТекущемуПользователю = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если бВключитьОтборПоТекущемуПользователю Тогда
		Если Не ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда
			
			ОтборЗначениеПользователь = ТекущийПользователь;
			
			СтрокаОбязательныеОтборы = "";
			Для Каждого ПолеОтбора Из МассивДоступныхОтборов Цикл
				Если Найти(",Пользователь,Партнер,Проект,Помещение,", "," + ПолеОтбора + ",") = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИменаОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
				
			КонецЦикла;
			
			бБылиИзмененияВОтборах = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеПриИзменении(Элемент)
	
	//Если НЕ ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда
	//	ОтборЗначениеПользователь = ТекущийПользователь;
	//КонецЕсли;
	
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОтбора.ИсточникДанныхЗначение) И ОписаниеОтбора.ИсточникДанныхИспользование = Ложь Тогда
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] = Истина;
	// ИначеЕсли Не ЗначениеЗаполнено(ОписаниеОтбора.ИсточникДанныхЗначение) И ОписаниеОтбора.ИсточникДанныхИспользование = Истина Тогда
	//	ЭтаФорма[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] = Ложь;
	КонецЕсли;
	
	
	КэшОформления.Очистить();
	МесяцыКэша.Очистить();
	РабочиеДни.Очистить();
	ПриИзмененииОтбораОбщий(ОписаниеОтбора);
	Элементы.Календарь.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		СтандартнаяОбработка = Ложь; Возврат;
	КонецЕсли;
	
	Если ОписаниеОтбора.ВыборИзСписка Тогда
		Если ТипЗнч(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) <> Тип("СписокЗначений") Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) Тогда
				СтароеЗначение = ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение];
			Иначе
				СтароеЗначение = Неопределено;
			КонецЕсли;
			
			ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = Новый СписокЗначений();
			Если СтароеЗначение <> Неопределено Тогда
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].Добавить();
			КонецЕсли;
		КонецЕсли;
		
		Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].ОграничениеТипа = ОписаниеОтбора.ОписаниеТиповСписокЗначений;
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].ТипЗначения = ОписаниеОтбора.ОписаниеТиповОграничениеВыбора;
	Иначе
		Если ТипЗнч(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) = Тип("СписокЗначений") Тогда
			Если ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].Количество() > 0 Тогда
				СтароеЗначение = ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение][0].Значение;
			Иначе
				СтароеЗначение = Неопределено;
			КонецЕсли;
			Если СтароеЗначение = Неопределено Тогда
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеЗначение;
			Иначе
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = СтароеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].ОграничениеТипа = ОписаниеОтбора.ОписаниеТиповОграничениеВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеОчистка(Элемент, СтандартнаяОбработка)
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		СтандартнаяОбработка = Ложь; Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОписаниеОтбора.ВыборИзСписка Тогда
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеСписок;
	Иначе
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеЗначение;
	КонецЕсли;
	
	Если Найти(",Пользователь,Подразделение,Партнер,Проект,Помещение,", "," + ОписаниеОтбора.ПолеОтбора + ",") > 0 Тогда
		ПроверитьЗаполнениеОтбораПоПользователю();
	КонецЕсли;
	
	// БИспользование = ЗначениеЗаполнено(ЭтаФорма[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]);
	// Если ЭтаФорма[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] <> бИспользование Тогда
	//	ЭтаФорма[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] = бИспользование;
	// КонецЕсли;
	
	КэшОформления.Очистить();
	МесяцыКэша.Очистить();
	РабочиеДни.Очистить();
	ПриИзмененииОтбораОбщий(ОписаниеОтбора);
	Элементы.Календарь.Обновить();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаНаВесьДень(Элемент)
	
	ЗначениеЭлемента = Элемент.ВыделенныеЭлементы[0].Значение;
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента.Источник) Тогда
		ПоказатьЗначение(,ЗначениеЭлемента.Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

