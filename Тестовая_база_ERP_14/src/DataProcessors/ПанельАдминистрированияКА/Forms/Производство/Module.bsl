#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = НастройкиСистемыПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьОбособленноеОбеспечениеЗаказов");
	ВнешниеРодительскиеКонстанты.Вставить("ФормироватьФинансовыйРезультат");
	
	РежимРаботы = Новый Структура;
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
//++ НЕ УТКА
	ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства();
//-- НЕ УТКА
	
	УстановитьВидимостьЭлементовФормы();
	НастроитьЗависимыеЭлементыФормы();
	НастройкиСистемыЛокализация.ПриСозданииНаСервере_Производство(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
		
		ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
			И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
				Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0)
				
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьУправлениеПроизводством") > 0)
		
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьПартионныйУчет") > 0)
		
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ПартионныйУчетВерсии22") > 0)
			
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьНесколькоВидовЦен") > 0)
			
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьДополнительныеРеквизитыИСведения") > 0) Тогда
		
		ЭтаФорма.Прочитать();
		НастроитьЗависимыеЭлементыФормы();
//++ НЕ УТКА
		ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства();
//-- НЕ УТКА
		
	КонецЕсли;
	
	Если Источник = ЭтаФорма Тогда
		Если Параметр.Свойство("Элемент") Тогда
			Подключаемый_ПриИзмененииРеквизита(Параметр.Элемент, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗначенияПоУмолчанию = Новый Структура(
			"МетодикаУправленияПроизводством,
			|ВариантОбособленияМатериаловВПроизводстве");
	НастройкиСистемыЛокализация.ПриЧтенииНаСервере_Производство(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МетодикаУправленияПроизводствомПриИзменении(Элемент)
	
//++ НЕ УТКА
	Если НаборКонстант.МетодикаУправленияПроизводством.Пустая() Тогда
		ОбщегоНазначенияУТКлиентСервер.ВосстановитьЗначенияДоИзменения(ЭтаФорма, "МетодикаУправленияПроизводством");
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтаФорма, "МетодикаУправленияПроизводством");
//-- НЕ УТКА
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнтервалПланированияЧасПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПараметризациюРесурсныхСпецификацийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУправлениеРемонтамиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУзлыОбъектовЭксплуатацииПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатусыДвиженийПродукцииИМатериаловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетГрафикаПроизводстваИспользованиеПриИзменении(Элемент)
	
//++ НЕ УТКА
	УстановитьИспользованиеРегламентногоЗадания();
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбособленияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбособленияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРасценокВидовРаботПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПлановойСтоимостиЗатратПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВидыТехнологическихОперацийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьВыполнениеОперацийПриЗакрытииЭтаповПроизводстваПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитическийУчетПоГруппамПродукцииПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РасчетГрафикаПроизводстваРасписание(Команда)
	
//++ НЕ УТКА
	Если РасчетГрафикаПроизводстваРасписание = Неопределено Тогда
		РасчетГрафикаПроизводстваРасписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("РасчетГрафикаПроизводстваРасписаниеЗавершение", ЭтотОбъект);
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасчетГрафикаПроизводстваРасписание);
	ДиалогРасписания.Показать(ОписаниеОповещения);
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

//++ НЕ УТКА
&НаКлиенте
Процедура РасчетГрафикаПроизводстваРасписаниеЗавершение(Расписание, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РасчетГрафикаПроизводстваРасписание = Расписание;
	
	УстановитьРасписаниеРегламентногоЗадания();
	
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина, ВнешнееИзменение = Ложь)
	
	Если НЕ ВнешнееИзменение Тогда
		НастройкиСистемыЛокализацияКлиент.ПриИзмененииРеквизита_Производство(
			Элемент,
			ЭтаФорма);
	КонецЕсли;
	
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		КонстантаИмя = ПриИзмененииРеквизитаСервер(ИмяЭлемента);
		
		Если ОбновлятьИнтерфейс Тогда
			ОбновитьИнтерфейс = Истина;
			ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
		КонецЕсли;
		
		Если КонстантаИмя <> "" Тогда
			Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиСистемыЛокализацияКлиент.ОбработкаНавигационнойСсылкиФормы_Производство(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	НастроитьЗависимыеЭлементыФормы(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	КонецЕсли;

	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если НастройкиСистемыПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение)
			ИЛИ СтрНайти(КонстантаИмя, "ИспользоватьПроизводство") > 0
			ИЛИ СтрНайти(КонстантаИмя, "ИспользоватьУправлениеПроизводством") > 0 Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиСистемыЛокализация.СохранитьЗначениеРеквизита_Производство(КонстантаИмя, КонстантаЗначение, ЭтаФорма);
	
	Возврат КонстантаИмя
	
КонецФункции

#КонецОбласти

#Область Константы

&НаСервере
Функция ИспользуетсяПроизводство()
	
	Возврат НаборКонстант.ИспользоватьПроизводство;
	
КонецФункции

&НаСервере
Функция ИспользуетсяПроизводство22()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством2_2;
	
КонецФункции

&НаСервере
Функция ИспользуетсяПроизводство21()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством;
	
КонецФункции

&НаСервере
Функция ИспользуетсяТолькоПроизводство21()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством
			И НЕ НаборКонстант.ИспользоватьУправлениеПроизводством2_2;
	
КонецФункции

&НаСервере
Функция ИспользуетсяТолькоПроизводство22()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством2_2
			И НЕ НаборКонстант.ИспользоватьУправлениеПроизводством;
	
КонецФункции

&НаСервере
Функция ИспользуетсяПроизводство21_22()
	
	Возврат ИспользуетсяПроизводство21() И ИспользуетсяПроизводство22();
	
КонецФункции

#КонецОбласти

#Область НастройкаЭлементов

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	Элементы.ГруппаМетодикаУправленияПроизводством.Видимость = УправлениеПредприятием;
	Элементы.ГруппаРегламентноеЗаданиеРасчетГрафикаПроизводства.Видимость = УправлениеПредприятием;
	Элементы.ГруппаУчетПроизводства.Видимость = УправлениеПредприятием;
	Элементы.ОбособлениеМатериаловВПроизводствеКА.Видимость = НЕ УправлениеПредприятием;
	Элементы.ОбособлениеМатериаловВПроизводствеУП.Видимость = УправлениеПредприятием;
	Элементы.ГруппаПлановаяСтоимость.Видимость = УправлениеПредприятием;
	Элементы.ГруппаНастройкиРемонты.Видимость = УправлениеПредприятием;
	Элементы.ГруппаПрочее.Видимость = УправлениеПредприятием;
	Элементы.ГруппаСтатусыДвиженийПродукцииИМатериалов.Видимость = УправлениеПредприятием;
	Элементы.ГруппаОперации.Видимость = УправлениеПредприятием;
	Элементы.ГруппаИспользоватьПараметризациюРесурсныхСпецификаций.Видимость = УправлениеПредприятием;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормы(РеквизитПутьКДанным = "")

	//++ НЕ УТКА
	//ИспользоватьПараметризациюРесурсныхСпецификаций
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПараметризациюРесурсныхСпецификаций" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьПараметризациюРесурсныхСпецификаций, НаборКонстант.ИспользоватьПараметризациюРесурсныхСпецификаций);
	КонецЕсли;
	//-- НЕ УТКА
	
//++ НЕ УТКА
	//ИспользоватьУправлениеРемонтами
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьУправлениеРемонтами" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьУзлыОбъектовЭксплуатации.Доступность = НаборКонстант.ИспользоватьУправлениеРемонтами;
		Элементы.ВариантОбособленияМатериаловВРемонтах.Доступность = НаборКонстант.ИспользоватьУправлениеРемонтами
			И Константы.ФормироватьФинансовыйРезультат.Получить();
	КонецЕсли;
//-- НЕ УТКА
	
	// ИспользоватьПроизводство, ИспользоватьУправлениеПроизводством
	Если РеквизитПутьКДанным = "" 
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0 Тогда
		
		ИспользоватьОбособленноеОбеспечениеЗаказов = Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.Получить();
		Элементы.ВариантОбособленияМатериаловВПроизводствеКА.Видимость = ИспользоватьОбособленноеОбеспечениеЗаказов;
		Элементы.ГруппаВариантОбособленияМатериаловВПереработке.Видимость = ИспользоватьОбособленноеОбеспечениеЗаказов;
		
		Элементы.ГруппаУчетЗатрат.Доступность = ИспользуетсяПроизводство();
		
		Элементы.ГруппаМетодикаУправленияПроизводством.Видимость = Ложь;
		
		Элементы.ВариантОбособленияМатериаловВПроизводствеКА.Доступность = НаборКонстант.ИспользоватьПроизводство;
		
		Элементы.ИспользоватьПроизводство22.Доступность = ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22");
		
		Элементы.ГруппаПредупреждениеИспользованиеПроизводства22.Видимость =
			НЕ ИспользуетсяПроизводство22() И НЕ ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22");
		
//++ НЕ УТКА
		Элементы.ГруппаВариантОбособленияМатериаловВРемонтах.Видимость = ИспользоватьОбособленноеОбеспечениеЗаказов;
		Элементы.ГруппаМетодикаУправленияПроизводством.Видимость = ИспользуетсяПроизводство22();
		Элементы.ГруппаВариантОбособленияМатериаловВПроизводстве.Видимость = ИспользуетсяПроизводство22();
		Элементы.ГруппаВариантОбособленияМатериаловПриПередачеВКладовую.Видимость = ИспользуетсяПроизводство22();
		Элементы.ГруппаВариантОбособленияМатериаловВПроизводстве21.Видимость = ИспользуетсяТолькоПроизводство21();
		Элементы.ГруппаВариантОбособленияМатериаловПриПередачеВПроизводство.Видимость = ИспользуетсяТолькоПроизводство21();
		Элементы.ГруппаОперации.Видимость = ИспользуетсяПроизводство22();
		Элементы.ГруппаПрочее.Доступность = ИспользуетсяПроизводство();
		Элементы.ГруппаУчетПроизводства.Доступность = ИспользуетсяПроизводство();
		
		Элементы.ОбособлениеМатериаловВПроизводствеУП.Видимость = ИспользоватьОбособленноеОбеспечениеЗаказов;
		Элементы.НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузки.Видимость = ИспользуетсяПроизводство22();
		Элементы.ИспользоватьСтатусыДвиженийПродукцииИМатериалов.Видимость = ИспользуетсяПроизводство22();
//-- НЕ УТКА
	КонецЕсли;
	
//++ НЕ УТКА
	Если РеквизитПутьКДанным = "НаборКонстант.ВариантОбособленияМатериаловВПроизводстве" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаКомментарийОграничениеОбособленияВПроизводстве21.Видимость = ИспользуетсяПроизводство21_22()
			И (НаборКонстант.ВариантОбособленияМатериаловВПроизводстве = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство")
				Или НаборКонстант.ВариантОбособленияМатериаловВПроизводстве = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства"));
		
	КонецЕсли;
//-- НЕ УТКА

//++ НЕ УТКА
	// МетодикаУправленияПроизводством
	Если РеквизитПутьКДанным = "НаборКонстант.МетодикаУправленияПроизводством" 
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ТекстПодсказки = Перечисления.МетодикаУправленияПроизводством.ПодсказкаПоМетодике(НаборКонстант.МетодикаУправленияПроизводством);
		Элементы.ПодсказкаМетодикаУправленияПроизводством.Подсказка = ТекстПодсказки;
		
	КонецЕсли;
//-- НЕ УТКА

//++ НЕ УТКА
	// РегламентноеЗадание_РасчетГрафикаПроизводства
	Если СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.МетодикаУправленияПроизводством"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Если (НаборКонстант.ИспользоватьУправлениеПроизводством
				ИЛИ НаборКонстант.МетодикаУправленияПроизводством <> Перечисления.МетодикаУправленияПроизводством.БезПланирования
				) Тогда
			ВидимостьЭлементов = Истина;
		Иначе
			ВидимостьЭлементов = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаРегламентноеЗаданиеРасчетГрафикаПроизводства.Видимость = ВидимостьЭлементов;
		Элементы.ОтступРегламентноеЗаданиеРасчетГрафикаПроизводства.Видимость = ВидимостьЭлементов И ИспользуетсяТолькоПроизводство22();
		
	КонецЕсли;
//-- НЕ УТКА
	
	// Обновление вариантов обособления
	Если РеквизитПутьКДанным = "" Тогда
		
		НаправленияДеятельностиИспользуются = Константы.ФормироватьФинансовыйРезультат.Получить();
		
		//++ НЕ УТКА
		// Производство 2.2
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловПриПередачеВКладовую.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловПриПередачеВКладовую.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловПриПередачеВКладовую.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		
		// Производство 2.1
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловВПроизводстве21.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве21.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве21.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловПриПередачеВПроизводство.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловПриПередачеВПроизводство.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловПриПередачеВПроизводство.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		//-- НЕ УТКА
		
		// Переработка на стороне
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловВПереработке.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПереработке.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПереработке.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПереработке.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПереработке.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		
	КонецЕсли;
	
//++ НЕ УТКА
	
	Если РеквизитПутьКДанным = "" 
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		Тогда
		
		КонстантаДоступна = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения
			И ИспользуетсяПроизводство22();
		
		Элементы.ИспользоватьВидыТехнологическихОпераций.Доступность = КонстантаДоступна;
		Элементы.ГруппаКомментарийОграничениеВидыТехнологическихОпераций.Видимость = НЕ КонстантаДоступна;
		
	КонецЕсли;
	
//-- НЕ УТКА
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ВариантОбособленияМатериаловВПереработке.Доступность = НаборКонстант.ИспользоватьПроизводствоНаСтороне;
	КонецЕсли;

	//ВалютаРасценокВидовРабот
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаРасценокВидовРабот" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаРасценокВидовРабот, ЗначениеЗаполнено(НаборКонстант.ВалютаРасценокВидовРабот));
	КонецЕсли;
	
	// плановые виды цен
	Если СтрНайти(РеквизитПутьКДанным, "ИспользоватьНесколькоВидовЦен") > 0
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаПояснениеПлановогоВидаЦены.Видимость = Не НаборКонстант.ИспользоватьНесколькоВидовЦен;
		Элементы.ПлановыеЦеныМатериаловРабот.Доступность = НаборКонстант.ИспользоватьНесколькоВидовЦен;
		
	КонецЕсли;
	
	// АналитическийУчетПоГруппамПродукции
	Если РеквизитПутьКДанным = "НаборКонстант.АналитическийУчетПоГруппамПродукции"
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.АналитическийУчетПоГруппамПродукции;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.АналитическийУчетПоГруппамПродукции, ЗначениеКонстанты);
		
		Элементы.ГруппаАналитическийУчетПоГруппамПродукции.Доступность = ИспользуетсяПроизводство() И Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить();
		Элементы.ГруппаКомментарийВидыПродукции.Видимость = НЕ (ИспользуетсяПроизводство() И Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить());
		
	КонецЕсли;
	
	НастройкиСистемыЛокализация.УстановитьДоступность_Производство(РеквизитПутьКДанным, ЭтаФорма);
	
	ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным);
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным)
	
	СтруктураКонстант = Новый Структура(
		"ИспользоватьУзлыОбъектовЭксплуатации,
		//++ НЕ УТКА
		|ИспользоватьСтатусыДвиженийПродукцииИМатериалов,
		//-- НЕ УТКА
		|АналитическийУчетПоГруппамПродукции,
		|ИспользоватьУправлениеРемонтами");
		
	НастройкиСистемыЛокализация.ОтображениеПредупрежденияПриРедактировании_Производство(СтруктураКонстант);
	
	Для Каждого КлючИЗначение Из СтруктураКонстант Цикл
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы[КлючИЗначение.Ключ],
			НаборКонстант[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область РегламентноеЗадание_РасчетГрафикаПроизводства

&НаСервере
Процедура ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства()
	
	Если Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		Задание = ПланированиеПроизводства.ЗаданиеРасчетГрафикаПроизводства();
		Если Задание <> Неопределено Тогда
			РасчетГрафикаПроизводстваИдентификатор = Задание.УникальныйИдентификатор;
			РасчетГрафикаПроизводстваИспользование = Задание.Использование;
			РасчетГрафикаПроизводстваРасписание    = Задание.Расписание;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписания()
	
	Если РасчетГрафикаПроизводстваИспользование И Не РазделениеВключено Тогда
		
		ПредставлениеРасписания = Строка(РасчетГрафикаПроизводстваРасписание);
		Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
			 ПредставлениеРасписания = НСтр("ru = 'Расписание не задано';
											|en = 'Schedule is not set'");
		КонецЕсли;
		Элементы.РасчетГрафикаПроизводстваРасписание.Заголовок = ПредставлениеРасписания;
		
		Элементы.РасчетГрафикаПроизводстваРасписание.Видимость = Истина;
	Иначе
		
		Элементы.РасчетГрафикаПроизводстваРасписание.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеРегламентногоЗадания()
	
	ПараметрыЗадания = Новый Структура;
	
	ПараметрыЗадания.Вставить("Использование", РасчетГрафикаПроизводстваИспользование);
	
	Если РасчетГрафикаПроизводстваИспользование И РазделениеВключено Тогда
		
		РасчетГрафикаПроизводстваРасписание = ПланированиеПроизводства.ПредопределенноеРасписание();
		
		ПараметрыЗадания.Вставить("Расписание", РасчетГрафикаПроизводстваРасписание);
		
	КонецЕсли;
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(РасчетГрафикаПроизводстваИдентификатор, ПараметрыЗадания);
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗадания()
	
	ПараметрыЗадания = Новый Структура("Расписание", РасчетГрафикаПроизводстваРасписание);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(РасчетГрафикаПроизводстваИдентификатор, ПараметрыЗадания);
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#КонецОбласти
