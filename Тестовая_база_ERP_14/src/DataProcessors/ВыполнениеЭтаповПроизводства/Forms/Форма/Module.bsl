
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	
	#Область СписокЭтапов
	
	УстановитьСвойстваДинамическогоСпискаВыполнениеЭтаповПроизводства();
	
	УстановитьОтборыСпискаПриСоздании();
	
	НастроитьПорядокСписка();
	
	#КонецОбласти
	
	#Область УниверсальныеМеханизмы
	
	// ПодключаемоеОборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = Список.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокТипов;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеУправление") Тогда
		
		РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ЗапуститьЗадание();
		
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	НастроитьАвтоматическоеОбновлениеПараметровСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	УстановитьОтборПоПериоду(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСостояниеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеЗначения", ОтборСостояние);
	
	ОткрытьФорму("Обработка.ВыполнениеЭтаповПроизводства.Форма.ОтборСостояния",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбеспечениеПриИзменении(Элемент)
	
	УстановитьОтборПоОбеспечению(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Поле.Имя = "КодСостоянияОпераций" Тогда
		
		Если Не ТекущиеДанные.СостояниеОпераций.Пустая()
			И Не ТекущиеДанные.ТребуетсяЗаполнитьПоОперациям Тогда
			
			СтандартнаяОбработка = Ложь;
			
			УправлениеПроизводствомКлиент.РасшифроватьСостояниеОперацийЭтапа(
				ТекущиеДанные.Ссылка,
				ТекущиеДанные.СостояниеОпераций,
				ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметитьНачалоВыполнения(Команда)
	
	УстановитьСтатусВыделеннымЭтапам("Начат");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыполненным(Команда)
	
	УстановитьСтатусВыделеннымЭтапам("Завершен");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВыработкуСотрудников(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭтапыДляОформленияВыработки(ВыделенныеСтроки);
	Если МассивСсылок.Количество() > 0 Тогда
		ОперативныйУчетПроизводстваКлиент.ОформитьВыработкуСотрудниковПоРаспоряжениям(МассивСсылок);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не требуется оформлять выработку сотрудников для выбранных этапов.';
									|en = 'Do not register employee output for the selected stages.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций(Команда)
	
	ВыбранныеСтроки = ВыбранныеЭтапы();
	
	Если ВыбранныеСтроки.Количество() > 0 Тогда
		УправлениеПроизводствомКлиент.ОткрытьВыполнениеОпераций(ВыбранныеСтроки, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#Область Универсальные

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаСписка

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаВыполнениеЭтаповПроизводства()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = СтрЗаменить(
		Список.ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("ЭтапыПереопределяемый"));
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусГрафика",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	УстановитьПараметрСпискаТекущаяДата(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрСпискаТекущаяДата(Форма)
	
	#Если Клиент Тогда
		
		ЗначениеПараметра = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	#Иначе
		
		ЗначениеПараметра = ТекущаяДатаСеанса();
		
	#КонецЕсли
	
	Форма.Список.Параметры.УстановитьЗначениеПараметра(
		"ТекущаяДата",
		ЗначениеПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическоеОбновлениеПараметровСписка()
	
	Если Элементы.Список.АвтоОбновление Тогда
		ИнтервалОбновления = Элементы.Список.ПериодАвтоОбновления;
	Иначе
		ИнтервалОбновления = 3600;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьПараметрыСписка", ИнтервалОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыСписка()
	
	УстановитьПараметрСпискаТекущаяДата(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСпискаПриСоздании()
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		УстановитьОтборПоПодразделению(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПериод)
		И УправлениеПроизводством.ИспользуетсяГрафикПроизводства() Тогда
		УстановитьОтборПоПериоду(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСостояние) Тогда
		УстановитьОтборПоСостоянию(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОбеспечение) Тогда
		УстановитьОтборПоОбеспечению(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПорядокСписка()
	
	Список.Порядок.Элементы.Очистить();
	
	Если УправлениеПроизводством.ИспользуетсяГрафикПроизводства() Тогда
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("КодСостояния");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("Начало");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НачалоСледующегоЭтапа");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
	Иначе
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("КодСостояния");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ПриоритетРаспоряжения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ПриоритетПодразделения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ОчередьРаспоряжения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ДлительностьДоВыпуска");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы(),
		КлючНастроекФормы());
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиФормыКлиент()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОтборПодразделение", ОтборПодразделение);
	Настройки.Вставить("ОтборСостояние", ОтборСостояние);
	Настройки.Вставить("ОтборОбеспечение", ОтборОбеспечение);
	Настройки.Вставить("ОтборПериод", ОтборПериод);
	
	СохранитьНастройкиФормыСервер(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормыСервер(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючФормы(),
		КлючНастроекФормы(),
		Настройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючФормы()
	
	Возврат "Обработка.ВыполнениеЭтаповПроизводства.Форма";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроекФормы()
	
	Возврат "Основные";
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	#Область ДатыГрафика
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Начало.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Окончание.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачалоСледующегоЭтапа.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Формат",
		УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства());
	
	#КонецОбласти
	
	#Область НеЗавершеныПредшественники
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.ОжиданиеПредшествующих);
	СписокЗначений.Добавить(Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.НачатыПредшествующие);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	#Область ЭтапПросрочен
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Окончание.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ЦветТекстаПроблема);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделению(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Подразделение", 
		Форма.ОтборПодразделение, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборПодразделение));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПериоду(Форма)
	
	Если ЗначениеЗаполнено(Форма.ОтборПериод.ДатаНачала) Тогда
		
		ГруппаЭлементов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Форма.Список.Отбор.Элементы,
			"ГруппаНачало",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементов,
			"Начало", 
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
			Форма.ОтборПериод.ДатаНачала);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементов,
			"Начало", 
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Форма.Список.Отбор,
			"Начало");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ОтборПериод.ДатаОкончания) Тогда
		
		ГруппаЭлементов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Форма.Список.Отбор.Элементы,
			"ГруппаОкончание",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементов,
			"Окончание", 
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
			Форма.ОтборПериод.ДатаОкончания);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементов,
			"Окончание", 
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Форма.Список.Отбор,
			"Окончание");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		ОтборСостояние = РезультатЗакрытия;
		УстановитьОтборПоСостоянию(ЭтотОбъект);
		СохранитьНастройкиФормыКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСостоянию(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Состояние", 
		Форма.ОтборСостояние, 
		ВидСравненияКомпоновкиДанных.ВСписке,
		, 
		ЗначениеЗаполнено(Форма.ОтборСостояние));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОбеспечению(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"МатериалыНеОбеспечены", 
		Форма.ОтборОбеспечение = "МатериалыНеОбеспечены",
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборОбеспечение));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ГрафикИспользуется = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	
	Элементы.ОтборПериод.Видимость = ГрафикИспользуется;
	Элементы.Начало.Видимость = ГрафикИспользуется;
	Элементы.Окончание.Видимость = ГрафикИспользуется;
	Элементы.НачалоСледующегоЭтапа.Видимость = ГрафикИспользуется;
	Элементы.ТребуетсяРасчет.Видимость = ГрафикИспользуется;
	
	ИспользуютсяОперации = ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеУправление") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеПланирование");
	
	Элементы.СостояниеОпераций.Видимость = ИспользуютсяОперации;
	Элементы.КодСостоянияОпераций.Видимость = ИспользуютсяОперации;
	Элементы.ФормаВыполнениеОпераций.Видимость = ИспользуютсяОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыделеннымЭтапам(НовыйСтатус)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭтапыДляИзмененияСтатуса(НовыйСтатус, ВыделенныеСтроки);
	
	Если МассивСсылок.Количество() > 0 Тогда
		
		КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
			МассивСсылок,
			НовыйСтатус);
		
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Элементы.Список,
			КоличествоОбработанных,
			МассивСсылок.Количество(),
			НовыйСтатус);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не требуется изменять статус выбранных этапов.';
									|en = 'Do not change status of the selected stages.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтапыДляИзмененияСтатуса(НовыйСтатус, ВыделенныеСтроки)
	
	Результат = Новый Массив;
	ЗначениеНовогоСтатуса = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2." + НовыйСтатус);
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		
		Если НЕ ДанныеСтроки.Статус = ЗначениеНовогоСтатуса Тогда
			
			Результат.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтапыДляОформленияВыработки(ВыделенныеСтроки)
	
	Результат = Новый Массив;
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		
		Если ДанныеСтроки.ОформитьВыработку Тогда
			
			Результат.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыбранныеЭтапы()

	Возврат ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);

КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
			ПоказатьЗначение(Неопределено, МассивСсылок[0]);
		КонецЕсли;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

#КонецОбласти

#КонецОбласти
