#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаПриложения(Результат, ДопПараметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

#КонецОбласти // Клиент

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти // ВызовСервера

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		//// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		//// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		//Если РеквизитПутьКДанным = "ВключитьВерсионированиеУстановкиЦенНоменклатуры" Тогда
		//	НаборКонстант.ИспользоватьВерсионированиеОбъектов = Истина;
		//	КонстантаИмя = "ИспользоватьВерсионированиеОбъектов";
		//КонецЕсли;
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		//Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
		//	Прочитать();
		//КонецЕсли;
		
		//СтандартныеПодсистемыКлиентСервер.РезультатВыполненияДобавитьОповещениеОткрытыхФорм(Результат,
		//	"Запись_НаборКонстант", ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруПодчиненныхКонстант(КонстантаИмя), КонстантаИмя);
		//// СтандартныеПодсистемы.ВариантыОтчетов
		//ВариантыОтчетов.ДобавитьОповещениеПриИзмененииЗначенияКонстанты(Результат, КонстантаМенеджер);
		//// Конец СтандартныеПодсистемы.ВариантыОтчетов
	КонецЕсли;
	
	//Если РеквизитПутьКДанным = "ВключитьВерсионированиеУстановкиЦенНоменклатуры" Тогда
	//	
	//	ОбъектыДляВерсионирования = Новый Соответствие;
	//	ОбъектыДляВерсионирования.Вставить("Документ.УстановкаЦенНоменклатуры", "ВерсионироватьПриЗаписи");
	//	
	//	Результат.Вставить("ВерсионированиеВключено",
	//		ОбщегоНазначенияУТ.ВключитьВерсионированиеОбъектов(ОбъектыДляВерсионирования));
	//
	//КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьОбменСMSExchange" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаЭлементыНастроекОбменаСMSExchange.Доступность = НаборКонстант.CRM_ИспользоватьОбменСMSExchange;
	КонецЕсли;
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	Элементы.ГруппаМобильныйСРМ.Видимость = НЕ ЭтоРазделенныйРежимРаботы;	
	Элементы.ГруппаИнтеграцияСUniSender.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Элементы.ГруппаОбменCOutlook.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Элементы.ГруппаГруппаОбменCMSExchange.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Элементы.ГруппаQlikSense.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Если НЕ ЭтоРазделенныйРежимРаботы Тогда
		Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьИнтеграциюQlikSense" ИЛИ РеквизитПутьКДанным = "" Тогда
			Элементы.ГруппаQlikДоступ.Видимость = НаборКонстант.CRM_ИспользоватьИнтеграциюQlikSense И Элементы.CRM_ИспользоватьИнтеграциюQlikSense.Доступность;
			Если Элементы.ГруппаQlikДоступ.Видимость Тогда
				QlikСоздатьНового = Истина;
				ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
				Для Каждого тПользователь Из ПользователиИБ Цикл
					Если тПользователь.Роли.Содержит(Метаданные.Роли.CRM_ИнтеграцияQlikSense) Тогда
						QlikЛогин = тПользователь.Имя;
						QlikПароль = "**********";
						Элементы.QlikСоздатьПользователяИБ.Доступность = Ложь;
						QlikСоздатьНового = Ложь;
						тПользователь.АутентификацияСтандартная = Истина;
						тПользователь.Записать();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
				Для Каждого тПользователь Из ПользователиИБ Цикл
					Если тПользователь.Роли.Содержит(Метаданные.Роли.CRM_ИнтеграцияQlikSense) Тогда
						тПользователь.АутентификацияСтандартная = Ложь;
						тПользователь.Записать();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ QlikСоздатьНового Тогда
				Элементы.QlikСоздатьПользователяИБ.Заголовок = НСтр("ru='Обновить пользователя Qlik Sense';en='Update user Qlik Sense'");
				Элементы.QlikСоздатьПользователяИБ.Доступность = Ложь;
			Иначе
				Элементы.QlikСоздатьПользователяИБ.Заголовок = НСтр("ru='Создать пользователя Qlik Sense';en='Create a user Qlik Sense'");
				Элементы.QlikСоздатьПользователяИБ.Доступность = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(QlikЛогин) Тогда
				QlikЛогин = "ODATA";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ГруппаQlikДоступ.Видимость = Ложь;
		Элементы.ГруппаРаспознаваниеЛиц.Видимость = Ложь;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьИнтеграциюСМессенджерами" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ДекорацияУчетныеЗаписиМессенджеров.Доступность = НаборКонстант.CRM_ИспользоватьИнтеграциюСМессенджерами;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Сервер

#Область НастройкиОбменаСOutlook

&НаКлиенте
Процедура CRM_ИспользоватьОбменСOutlookПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти // НастройкиОбменаСOutlook


#Область НастройкиОбменаСMSExchange

&НаКлиенте
Процедура CRM_ИспользоватьОбменСMSExchangeПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСерверыMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_СерверыMSExchange.ФормаСписка",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУчетныеЗаписиMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_УчетныеЗаписиПользователейMSExchange.ФормаСписка",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодключенияКMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_ПодключенияКMSExchange.ФормаСписка",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиОбменаСMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_НастройкиОбменаСMSExchange.ФормаСписка",, ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторРегламентногоЗаданияCRM_ОбменДаннымиСMSExchange()
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОбменДаннымиСMSExchange);
	Возврат Задание.УникальныйИдентификатор;
КонецФункции

&НаКлиенте
Процедура ДекорацияНастройкаРегламентногоЗаданияОбменаСMSExchangeНажатие(Элемент)
	ИдентификаторРегламентногоЗадания = ПолучитьИдентификаторРегламентногоЗаданияCRM_ОбменДаннымиСMSExchange();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",	ИдентификаторРегламентногоЗадания);
	ПараметрыФормы.Вставить("Действие",			"Изменить");
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеExchange(Команда)
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияMSExchange"));

КонецПроцедуры

#КонецОбласти // НастройкиОбменаСMSExchange


#Область НастройкиРаботы_iCRM

// +CRM_iCRM

&НаКлиенте
Процедура CRM_ИспользоватьМобильныйКлиентCRMПриИзменении(Элемент)
		
	CRM_АвтоматическаяСинхронизация_iCRM = НаборКонстант.CRM_ИспользуетсяОбменСiCRM;
	Если CRM_ОбщегоНазначенияСервер.РаботаВМоделиСервисаНЕРазделенныйСеанс() Тогда
		CRM_СинхронизацияСервер.УстановитьРежимАвтоматическойСинхронизации(CRM_АвтоматическаяСинхронизация_iCRM);
	КонецЕсли;	
	
	Элементы.ГруппаСостояниеДропбокса.Доступность = CRM_АвтоматическаяСинхронизация_iCRM;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	CRM_ИспользоватьМобильныйКлиентCRMПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура CRM_ИспользоватьМобильныйКлиентCRMПриИзмененииНаСервере()
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда 
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.CRM_СинхронизацияС_iCRM);
	Иначе
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_СинхронизацияС_iCRM);
		ПараметрыЗадания.Вставить("Использование", Истина);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеiCRM(Команда)
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Новый ОписаниеОповещения("ОбработкаКомандыПродолжение", ЭтотОбъект, Новый Структура), НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';en='Continue, install the file operation extension.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыПродолжение(Результат, ДопПараметры) Экспорт
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияIcrm"));
КонецПроцедуры

&НаКлиенте
Процедура iCRM_Авторизовать(Команда)
	CRM_DropboxКлиент.ВыполнитьАвторизацию("АвторизацияВDropboxЗавершение", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура iCRM_Выйти(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтключениеАккаунтаDropboxЗавершение", ЭтаФорма);
	
	CRM_DropboxКлиент.ОтключитьАккаунт(ОписаниеОповещения);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюДропбокс()
	
	//Если iCRMДропбоксПодключен Тогда
	//	Текст = НСтр("de='Mit Dropbox verbunden';en='Dropbox is connected';es='Dropbox conectado';fr='Dropbox est activé';it='Dropbox connesso';ja='Dropboxに接続中';ko='Dropbox가 연결됨';nb='Dropbox er tilkoblet';pt='Conectado ao Dropbox';ru='Dropbox подключен';vi='Kết nối với Dropbox';zh='已经连到 Dropbox'");
	//	Элементы.СостояниеДропбокса.Высота = 0;
	//	Элементы.ДекорацияФлагУспешно.Видимость = Истина;
	//	Элементы.iCRMЕмейлАккаунта.Видимость = Истина;
	//	Элементы.iCRM_Авторизовать.Видимость = Ложь;
	//	Элементы.iCRM_Выйти.Видимость = Истина;
	//Иначе
	//	Текст = НСтр("de='Für die Synchronisierung müssen Sie in Dropbox angemeldet sein';en='Sign in to Dropbox to synchronize';es='Para sincronizar debe iniciar sesión en Dropbox';fr='Pour synchroniser, il faut se connecter à Dropbox';it='Per la sincronizzazione è necessario accedere a Dropbox';ja='同期させるにはDropbox へログインする必要があります';ko='동기화하려면 Dropbox에 로그인합니다.';nb='Logg på Dropbox for å synkronisere';pt='Para efetuar a sincronização, faça login no Dropbox';ru='Для синхронизации необходимо войти в Dropbox';zh='登陆 Dropbox，使用同步功能';vi='Sign in to Dropbox to synchronize'");
	//	Элементы.СостояниеДропбокса.Высота = 2;
	//	Элементы.iCRMЕмейлАккаунта.Видимость = Ложь;
	//	Элементы.ДекорацияФлагУспешно.Видимость = Ложь;
	//	Элементы.iCRM_Авторизовать.Видимость = Истина;
	//	Элементы.iCRM_Выйти.Видимость = Ложь;
	//КонецЕсли;	
	//Элементы.СостояниеДропбокса.Заголовок = Текст;
	//Элементы.ДекорацияОткрытьФормуНастроекЛицензированияiCRM.Видимость = Элементы.ДекорацияФлагУспешно.Видимость;	
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияВDropboxЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
	
		CRM_DropboxСервер.СохранитьПараметрыАвторизации(Результат);
		
		МетаданныеФайла = CRM_DropboxСервер.ПолучитьМетаданные("/Sync");
		
		Если МетаданныеФайла = Неопределено Тогда
		
			CRM_DropboxСервер.СоздатьПапку("/Sync");
		
		КонецЕсли; 
		
		CRM_СинхронизацияСервер.СброситьРегистрациюИзмененийСинхронизации();
		
		iCRMДропбоксПодключен = Истина;
		iCRMЕмейлАккаунта = CRM_DropboxКлиентСервер.ПолучитьЭлектронныйАдресАккаунта();
		СброситьДатуСинхронизации();
		
	Иначе 
		
		iCRMДропбоксПодключен = Ложь;
	
	КонецЕсли; 
	
	ОбновитьИнформациюДропбокс();

КонецПроцедуры // АвторизацияВDropboxЗавершение()

&НаСервере
Процедура СброситьДатуСинхронизации()

	Константы.CRM_ДатаПоследнейУспешнойСинхронизации.Установить('00010101');

КонецПроцедуры

&НаКлиенте
Процедура ОтключениеАккаунтаDropboxЗавершение(Результат, ДополнительныеПараметры) Экспорт

	iCRMДропбоксПодключен = Не Результат;
	
	Если Не iCRMДропбоксПодключен Тогда
	
		iCRMЕмейлАккаунта = "";
	
	КонецЕсли; 
	
	ОбновитьИнформациюДропбокс();

КонецПроцедуры

&НаКлиенте
Процедура CRM_МаксимальныйПериодБезСинхронизацииiCRMПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьФормуНастроекЛицензированияiCRMНажатие(Элемент)
	ОткрытьФорму("Обработка.CRM_НастройкаСинхронизацииПользователейiCRM.Форма.Форма");
КонецПроцедуры

// -CRM_iCRM

#КонецОбласти // НастройкиРаботы_iCRM


#Область НастройкиСинхронизацииКалендарей

&НаСервереБезКонтекста
Процедура СервисыКалендарейПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого КлючИЗначение Из Строки Цикл
		КлючИЗначение.Значение.Данные.Картинка = CRM_СинхронизацияКалендарей.КартинкаСервисаКалендарей(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //НастройкиСинхронизацииКалендарей


#Область НастройкиРаботыСQlikSense

&НаКлиенте
Процедура CRM_ИспользоватьИнтеграциюQlikSenseПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	УстановитьПараметрыQlikSense();
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыQlikSense()
	
	Если НЕ НаборКонстант.CRM_ИспользоватьИнтеграциюQlikSense Тогда
		Массив = Новый Массив;
		УстановитьСоставСтандартногоИнтерфейсаOData(Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеQlikSense(Команда)

	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияQlikSense"));

КонецПроцедуры

&НаКлиенте
Процедура QlikСоздатьПользователяИБ(Команда)
	Если НЕ ЗначениеЗаполнено(QlikПароль) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Необходимо указать пароль!';en='Password is required!'");
		Сообщение.ПутьКДанным = "QlikПароль";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СоздатьПользователяQlikНаСервере(QlikЛогин, QlikПароль, QlikСоздатьНового);
	Если НЕ QlikСоздатьНового Тогда
		Элементы.QlikСоздатьПользователяИБ.Заголовок = НСтр("ru='Обновить пользователя Qlik Sense';en='Update user Qlik Sense'");
		Элементы.QlikСоздатьПользователяИБ.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьПользователяQlikНаСервере(Логин, Пароль, НовыйПользователь)
	
	Если НовыйПользователь Тогда
		// Добавить нового
		НовыйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		НовыйПользовательИБ.Роли.Добавить(Метаданные.Роли.CRM_ИнтеграцияQlikSense);
	Иначе
		// Найти старого
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого тПользователь Из ПользователиИБ Цикл
			Если тПользователь.Роли.Содержит(Метаданные.Роли.CRM_ИнтеграцияQlikSense) Тогда
				НовыйПользовательИБ = тПользователь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НовыйПользовательИБ.Имя = Логин;
	НовыйПользовательИБ.Пароль = Пароль;
	НовыйПользовательИБ.АутентификацияСтандартная = Истина;
	НовыйПользовательИБ.АутентификацияОС = Ложь;
	НовыйПользовательИБ.АутентификацияOpenID = Ложь;
	НовыйПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	НовыйПользовательИБ.ЗапрещеноИзменятьПароль = Истина;
	НовыйПользовательИБ.Записать();
	
	НовыйПользователь = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура QlikЛогинПриИзменении(Элемент)
	Если QlikСоздатьНового Тогда
		Возврат;
	Иначе
		Элементы.QlikСоздатьПользователяИБ.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура QlikПарольПриИзменении(Элемент)
	Если QlikСоздатьНового Тогда
		Возврат;
	Иначе
		Элементы.QlikСоздатьПользователяИБ.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставODATA(Команда)
	ОткрытьФорму("ОбщаяФорма.CRM_ДоступODATA");
КонецПроцедуры

#КонецОбласти //НастройкиИнРаботыСQlikSense


#Область ИнтеграцияСUniSender

&НаСервере
Процедура CRM_КлючДоступаКUniSenderПриИзмененииНаСервере()
	Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Очистить();
	Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(CRM_КлючДоступаКUniSender) Тогда
		СпискиКонтактов = CRM_ИнтеграцияСUniSenderКлиентСервер.СпискиКонтактовUniSender(CRM_КлючДоступаКUniSender);
		Для каждого Список из СпискиКонтактов Цикл
			Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Добавить(Список.Значение, Список.Представление);
			Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Добавить(Список.Значение, Список.Представление);
		КонецЦикла;
	Иначе	
		СпискиКонтактов = Новый СписокЗначений;
	КонецЕсли;
	Если СпискиКонтактов.Количество()>0 Тогда
		CRM_СписокКонтактовUniSenderДляОповещений = СпискиКонтактов[0].Значение;
	Иначе
		CRM_СписокКонтактовUniSenderДляОповещений = "";
	КонецЕсли;
	Если СпискиКонтактов.Количество()>0 Тогда
		CRM_СписокКонтактовUniSenderДляРассылок = СпискиКонтактов[0].Значение;
	Иначе
		CRM_СписокКонтактовUniSenderДляОповещений = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_КлючДоступаКUniSenderПриИзменении(Элемент)
	
	CRM_КлючДоступаКUniSenderПриИзмененииНаСервере();
	СохранитьДанныеДоступа(Неопределено);
	//Элементы.ЗарегистрироватьПользователяUniSender.Видимость = НЕ ЗначениеЗаполнено(CRM_КлючДоступаКUniSender);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеДоступа(Элемент)
	CRM_ИнтеграцияСUniSenderСервер.ЗаписатьДанныеДоступаКUniSender(CRM_КлючДоступаКUniSender, CRM_СписокКонтактовUniSenderДляРассылок, CRM_СписокКонтактовUniSenderДляОповещений);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокДляРассылок(Команда)
	ДобавитьСписокUniSender(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокДляОповещений(Команда)
	ДобавитьСписокUniSender(Команда);
КонецПроцедуры

&НаСервере
Функция ДобавитьСписокUniSenderСервер(Наименование)
	Возврат CRM_ИнтеграцияСUniSenderКлиентСервер.СоздатьСписокКонтактовUniSender(CRM_КлючДоступаКUniSender, Наименование);
КонецФункции

&НаКлиенте
Процедура ДобавитьСписокUniSender(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСписокUniSenderЗавершение", ЭтотОбъект, Команда.Имя);
	ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru='Введите имя нового списка';en='Enter the name of the new list'")); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокUniSenderЗавершение(Результат, ИмяКоманды) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Значение = ДобавитьСписокUniSenderСервер(Результат);
		Если ЗначениеЗаполнено(Значение) Тогда
			Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Добавить(Значение, Результат);
			Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Добавить(Значение, Результат);
			Если ИмяКоманды = "ДобавитьСписокДляРассылок" Тогда
				CRM_СписокКонтактовUniSenderДляРассылок = Значение;
			Иначе
				CRM_СписокКонтактовUniSenderДляОповещений = Значение;
			КонецЕсли;
			СохранитьДанныеДоступа(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПользователяUniSenderНаСервере()
	CRM_КлючДоступаКUniSender = CRM_ИнтеграцияСUniSenderКлиентСервер.РегистрацияНовогоПользователяUniSender(ИмяНовогоПользователяUniSender,
						EmailПользователяUniSender, ПарольПользователяUniSender);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПользователяUniSender(Команда)
	
	Элементы.РегистрацияНовогоПользователяUniSender.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегистрацию(Команда)
	
	Если ПустаяСтрока(ИмяНовогоПользователяUniSender) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен Login!';en='Not filled in Login!'"));
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(EmailПользователяUniSender) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен Email!';en='Not filled Email!'"));
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьПользователяUniSenderНаСервере();
	Элементы.РегистрацияНовогоПользователяUniSender.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеКUniSenderНаСервере()
	СпискиКонтактов = CRM_ИнтеграцияСUniSenderКлиентСервер.СпискиКонтактовUniSender(CRM_КлючДоступаКUniSender);
	Если СпискиКонтактов.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Подключение к UniSender прошло успешно.';en='Connection to UniSender was successful.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКUniSender(Команда)
	ПроверитьПодключениеКUniSenderНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеUniSender(Команда)
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияUnisender"));
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьАвтотекстЭлектронногоПисьмаВUniSenderНаСервере()
	CRM_ИнтеграцияСUniSenderКлиентСервер.ВыгрузитьАвтотекстВUniSender();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьАвтотекстЭлектронногоПисьмаВUniSender(Команда)
	ВыгрузитьАвтотекстЭлектронногоПисьмаВUniSenderНаСервере();
КонецПроцедуры

#КонецОбласти //ИнтеграцияСUniSender


#Область ИнтеграцияСМессенджерами

&НаКлиенте
Процедура ДекорацияУчетныеЗаписиМессенджеровНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_УчетныеЗаписиМессенджеров.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИспользоватьИнтеграциюСМессенджерамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияСМессенджерами(Команда)
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРМДиалоги"));
	
КонецПроцедуры

#КонецОбласти // ИнтеграцияСМессенджерами


#Область РаспознованиеЛиц

&НаКлиенте
Процедура CRM_ИспользоватьСервисРаспознаванияЛицПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОбновлятьФотоПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти // РаспознованиеЛиц



#КонецОбласти // СлужебныеПроцедурыИФункции


#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно открыть форму настройки. Подсистема 1С:CRM не используется! (см. Персональные настройки пользователя)';en='Unable to open the configuration form. Subsystem 1C: CRM is not used! (see Personal settings of the user)'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.CRM_ИспользоватьИнтеграциюQlikSense.Доступность = CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_QlikSense_ПриСозданииНаСервере();
		
	ЭтоКОРППоставка = CRM_ЛицензированиеСервер.ВариантПоставкиКОРП();
	ЭтоПРОФПоставка = CRM_ЛицензированиеСервер.ВариантПоставкиПРОФ();
	Элементы.CRM_ИспользоватьОбменСOutlook.Доступность			 = ЭтоКОРППоставка;
	Элементы.CRM_ИспользоватьОбменСMSExchange.Доступность		 = ЭтоКОРППоставка;
	Элементы.ГруппаЭлементыНастроекОбменаСMSExchange.Доступность = ЭтоКОРППоставка;
	
	Элементы.CRM_ИспользоватьСервисРаспознаванияЛиц.Видимость = ЭтоКОРППоставка или ЭтоПРОФПоставка;
	Элементы.CRM_ОбновлятьФото.Видимость = ЭтоКОРППоставка или ЭтоПРОФПоставка;
	Элементы.СправочникCRM_КамерыКамеры.Видимость = ЭтоКОРППоставка или ЭтоПРОФПоставка;
	Элементы.СправочникCRM_УчетныеЗаписиСервисаИдентификацииУчетныеЗаписиСервисаИдентификации.Видимость = ЭтоКОРППоставка или ЭтоПРОФПоставка;
	Элементы.ДекорацияРаспознавание.Видимость = НЕ Элементы.CRM_ИспользоватьСервисРаспознаванияЛиц.Видимость;
	
	// + UniSender
	ДанныеДоступаКUniSender = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender();
	CRM_КлючДоступаКUniSender = ДанныеДоступаКUniSender.КлючДоступа;
	Если ЗначениеЗаполнено(CRM_КлючДоступаКUniSender) Тогда
		Элементы.ЗарегистрироватьПользователяUniSender.Видимость = Ложь;
		СпискиКонтактов = CRM_ИнтеграцияСUniSenderКлиентСервер.СпискиКонтактовUniSender(CRM_КлючДоступаКUniSender);
		Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Очистить();
		Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Очистить();
		Для каждого Список из СпискиКонтактов Цикл
			Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Добавить(Список.Значение, Список.Представление);
			Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Добавить(Список.Значение, Список.Представление);
		КонецЦикла;
	КонецЕсли;
	CRM_СписокКонтактовUniSenderДляОповещений = ДанныеДоступаКUniSender.СписокДляОповещений;
	CRM_СписокКонтактовUniSenderДляРассылок = ДанныеДоступаКUniSender.СписокДляРассылок;
	// - UniSender
	
	УстановитьДоступность();
	
	// +CRM_iCRM
	//Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
	//	Элементы.ГруппаМобильныйСРМ.Видимость = Ложь;
	//Иначе	
	Попытка
		ЗаполненностьНастроек = CRM_СинхронизацияСервер.НастройкиСинхронизацииЗаполнены();
		iCRMДропбоксПодключен = ЗаполненностьНастроек.ЕстьДанныеАутентификации;
		ОбновитьИнформациюДропбокс();
		CRM_АвтоматическаяСинхронизация_iCRM = CRM_СинхронизацияСервер.АвтоматическаяСинхронизацияВключена();
		Элементы.ГруппаСостояниеДропбокса.Доступность = CRM_АвтоматическаяСинхронизация_iCRM;
		
		Если iCRMДропбоксПодключен Тогда
			
			iCRMЕмейлАккаунта = CRM_DropboxКлиентСервер.ПолучитьЭлектронныйАдресАккаунта();
			
		КонецЕсли; 
	Исключение
		ЗаполненностьНастроек = Ложь;
		iCRMДропбоксПодключен = Ложь;
		ОбновитьИнформациюДропбокс();
		CRM_АвтоматическаяСинхронизация_iCRM = CRM_СинхронизацияСервер.АвтоматическаяСинхронизацияВключена();
		Элементы.ГруппаСостояниеДропбокса.Доступность = CRM_АвтоматическаяСинхронизация_iCRM;
	КонецПопытки;
	//КонецЕсли;
	// -CRM_iCRM
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ДействияПриЗакрытииНаСервере();
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // Такие событие не обрабатываются.
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Серверный обработчик события формы "ПриЗакрытии".
//
Процедура ДействияПриЗакрытииНаСервере()
	// Если отключен обмен с MS Exchange - проверяем, используется ли регламентное задание, если да - отключаем его.
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Если Не Константы.CRM_ИспользоватьОбменСMSExchange.Получить() Тогда
			Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОбменДаннымиСMSExchange);
			Если Задание.Использование Тогда
				Задание.Использование = Ложь;
				Задание.Записать();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИспользоватьОбменСMSExchange = Константы.CRM_ИспользоватьОбменСMSExchange.Получить();
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания["CRM_ОбменДаннымиСMSExchange"].ИмяМетода);
		СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
		
		Для Каждого Задание Из СписокЗаданий Цикл
			
			ПараметрыЗадания = Новый Структура("Использование", ИспользоватьОбменСMSExchange);
			
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

