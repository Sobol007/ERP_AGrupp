
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.СтруктураЭД) <> Тип("Структура") 
		ИЛИ Не Параметры.СтруктураЭД.Свойство("НаправлениеЭД") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка открытия электронного документа';
																|en = 'An error occurred while opening electronic document'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.БизнесСеть.Форма.ПросмотрДокумента/ТекущиеДанные");
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		ОтключитьВыводДопДанных = Настройки.Получить("ОтключитьВыводДопДанных");
		ОтключитьВыводКопияВерна = Настройки.Получить("ОтключитьВыводКопияВерна");
	КонецЕсли;
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьОбластьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	
	АдресСтруктурыЭД = ПоместитьВоВременноеХранилище(Параметры.СтруктураЭД, УникальныйИдентификатор);
	ЗагрузкаЭД = (Параметры.СтруктураЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.СтруктураЭД);
	ЭтоВходящийДокумент = (Параметры.СтруктураЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
	ДокументИБ = Параметры.СтруктураЭД.ВладелецЭД;
	ЭтоНовыйДокумент = Не ЭтоВходящийДокумент И Не ЗначениеЗаполнено(Статус);
	Если ЭтоВходящийДокумент Тогда
		Параметры.СтруктураЭД.Свойство("КонтрагентНаименование", КонтрагентНаименование);
	КонецЕсли;
	
	Если СопоставлятьНоменклатуру = Неопределено И АвтоматическаяЗагрузка Тогда
		СопоставлятьНоменклатуру = Истина;
	КонецЕсли;
	
	ВыполнитьПросмотрЭДСервер(Параметры.СтруктураЭД, Отказ);
	Источник = Параметры.СтруктураЭД.Источник;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если АвтоматическаяЗагрузка Тогда
		ЗагрузитьДокументЭДО();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Инициализация режима, состояния.
	Если ЭтоВходящийДокумент Тогда
		Шаблон = НСтр("ru = '%1 (электронный документ)';
						|en = '%1 (electronic document)'");
		Заголовок = СтрШаблон(Шаблон, Источник.documentTitle);
		РежимЗаполненияДокумента = ЗначениеЗаполнено(ДокументИБ);
		СпособЗагрузкиДокумента = ?(РежимЗаполненияДокумента, 1, 0);
	Иначе
		Если Источник = Неопределено Тогда
			Заголовок = ДокументИБ;
		Иначе
			Шаблон = НСтр("ru = '%1 (электронный документ)';
							|en = '%1 (electronic document)'");
			Заголовок = СтрШаблон(Шаблон, Источник.documentTitle);
		КонецЕсли;
		Если ВРЕГ(Статус) = "ОТПРАВЛЕН" Тогда
			Шаблон = НСтр("ru = 'отправлен %1';
							|en = 'sent %1'");
			Состояние = СтрШаблон(Шаблон, 
				БизнесСетьКлиентСервер.ДатаИзUnixTime(Источник.sentDate));
		ИначеЕсли ВРЕГ(Статус) = "ДОСТАВЛЕН" Тогда
			Шаблон = НСтр("ru = 'отправлен %1, доставлен %2';
							|en = 'sent %1, delivered %2'");
			Состояние = СтрШаблон(Шаблон, 
				БизнесСетьКлиентСервер.ДатаИзUnixTime(Источник.sentDate),
				БизнесСетьКлиентСервер.ДатаИзUnixTime(Источник.receivedDate));
		ИначеЕсли ВРЕГ(Статус) = "ОТКЛОНЕН" Тогда
			Шаблон = НСтр("ru = 'отправлен %1, отклонен %2';
							|en = 'sent %1, rejected %2'");
			Состояние = СтрШаблон(Шаблон, 
				БизнесСетьКлиентСервер.ДатаИзUnixTime(Источник.sentDate),
				БизнесСетьКлиентСервер.ДатаИзUnixTime(Источник.receivedDate));
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = "Отклонен" Тогда
		Элементы.ФормаОтклонитьДокумент.Доступность = Ложь;
		Заголовок = Заголовок + " (" + НСтр("ru = 'отклонен';
											|en = 'rejected'") + ")";
	КонецЕсли;
	
	Элементы.ВходящийДокумент.Видимость = ЭтоВходящийДокумент;
	Элементы.НовыйДокумент.Видимость = ЭтоНовыйДокумент;
	Элементы.ОтправленныйДокумент.Видимость = НЕ ЭтоВходящийДокумент И НЕ ЭтоНовыйДокумент;
	
	Если ЭтоНовыйДокумент ИЛИ ПустаяСтрока(Информация) Тогда
		Элементы.Информация.Видимость = Ложь;
		Элементы.ИнформацияИсх.Видимость = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(КонтактноеЛицо) И ПустаяСтрока(ЭлектроннаяПочта) И ПустаяСтрока(Телефон) Тогда
		Элементы.КонтактныеДанные.Видимость = Ложь;
		Элементы.ГруппаКонтактныеДанныеИсх.Видимость = Ложь;
	КонецЕсли; 

	Если Не ЭтоВходящийДокумент Тогда
		Элементы.КомандаЗагрузить.Видимость = Ложь;
		Элементы.СсылкаИсх.Видимость = ЗначениеЗаполнено(ДокументИБ);
		Элементы.ИнформацияИсх.Видимость = ЗначениеЗаполнено(Информация);
		Элементы.ФормаОтклонитьДокумент.Видимость = Ложь;
		Элементы.КонтрагентНаименование.Видимость = Ложь;
	КонецЕсли;

	УстановитьВидимостьДоступность();
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправительНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = БизнесСетьКлиентСервер.ОписаниеИдентификацииОрганизацииКонтрагентов();
	ПараметрыОткрытия.ИНН = КонтрагентИНН;
	ПараметрыОткрытия.КПП = КонтрагентКПП;
	БизнесСетьСлужебныйКлиент.ОткрытьПрофильУчастника(ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	РежимЗаполненияДокумента = СпособЗагрузкиДокумента = 1;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ОчиститьСообщения();
	ЗагрузитьДокументЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	ПерезаполнитьТабличныйДокумент();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	ПерезаполнитьТабличныйДокумент();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьОбластьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПерезаполнитьТабличныйДокумент()

	Если ЗначениеЗаполнено(АдресСтруктурыЭД) Тогда
		СтруктураЭД = ПолучитьИзВременногоХранилища(АдресСтруктурыЭД);
		ВыполнитьПросмотрЭДСервер(СтруктураЭД, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументЭДО()
	
	Отказ = Ложь;
	Если СпособЗагрузкиДокумента = 0 Тогда
		Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
			Если Элементы.ТипОбъекта.СписокВыбора.Количество() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Тип"" не заполнено';
																		|en = 'The Type field is not filled in'"),, "ТипОбъекта",, Отказ);
				Возврат;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Загрузка данного документа не поддерживается';
																		|en = 'Importing this document is not supported'"),,,, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СпособЗагрузкиДокумента = 1 Тогда
		Если Не ЗначениеЗаполнено(ДокументИБ) Тогда
			ТекстОшибки = НСтр("ru = 'Поле ""Документ"" не заполнено';
								|en = 'The Document field is not filled in'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ДокументИБ",, Отказ);
			Возврат;
		Иначе
			Если ДокументПроведен(ДокументИБ) Тогда
				Шаблон = НСтр("ru = 'Обработка документа %1.
							|Операция возможна только для непроведенных документов.';
							|en = 'Processing document %1. 
							|The operation is available only for unposted documents.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДокументИБ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ОбновитьИнформациюОКонтрагенте(Контрагент, КонтрагентИНН, КонтрагентКПП);
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			СоздатьКонтрагента(Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			// Заполнение контрагента для сопоставления.
			Если ЗначениеЗаполнено(СписокНеСопоставленнойНоменклатуры) Тогда
				Для каждого ЭлементСписка Из СписокНеСопоставленнойНоменклатуры Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = Тип("Структура")
						И ЭлементСписка.Значение.Свойство("Владелец") Тогда
						ЭлементСписка.Значение.Владелец = Контрагент;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("АдресСтруктурыРазбораЭД",  АдресСтруктурыРазбораЭД);
	ПараметрыЗагрузки.Вставить("ВидЭД",                    ВидЭД);
	ПараметрыЗагрузки.Вставить("ДанныеФайлаРазбора",       ДанныеФайлаРазбора);
	ПараметрыЗагрузки.Вставить("ДанныеФайлаДопДанных",     ДанныеФайлаДопДанных);
	ПараметрыЗагрузки.Вставить("ДокументИБ",               ?(РежимЗаполненияДокумента, ДокументИБ, Неопределено));
	ПараметрыЗагрузки.Вставить("Идентификатор",            Идентификатор);
	ПараметрыЗагрузки.Вставить("ИмяОбъектаМетаданных",     ИмяОбъектаМетаданных);
	ПараметрыЗагрузки.Вставить("КлючУникальностиФормы",    КлючУникальности);
	ПараметрыЗагрузки.Вставить("Контрагент",               Контрагент);
	ПараметрыЗагрузки.Вставить("РежимЗаполненияДокумента", РежимЗаполненияДокумента);
	ПараметрыЗагрузки.Вставить("ТипОбъекта",               ТипОбъекта);
	ПараметрыЗагрузки.Вставить("СопоставлятьНоменклатуру", СопоставлятьНоменклатуру);
	ПараметрыЗагрузки.Вставить("АвтоматическаяЗагрузка",   АвтоматическаяЗагрузка);
	
	СоздатьОбъектыИБ(АдресСтруктурыРазбораЭД, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокНеСопоставленнойНоменклатуры) Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("СопоставитьПередЗаполнениемОповещение",
			ЭтотОбъект, ПараметрыЗагрузки);
			
		Настройки = Новый Структура();
		Настройки.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Настройки.Вставить("РазрешитьСохранение", Ложь);
		Настройки.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сопоставление номенклатуры для %1';
														|en = 'Mapping products for %1'"), ЭтотОбъект.Представление));
		
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьСопоставлениеНоменклатуры(
			СписокНеСопоставленнойНоменклатуры.ВыгрузитьЗначения(), Настройки, ОбработчикОповещения);
	Иначе
		ЗагрузитьДокументЭДОЗавершение(ПараметрыЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументПроведен(ДокументИБ)
	
	Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИБ, "Проведен");
	Возврат Проведен;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьОбъектыИБ(АдресВременногоХранилища, Отказ)
	
	Перем ДеревоРазбора;
	
	СтруктураРазбора = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора) Тогда
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет, тогда будем создавать объекты.
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Отказ);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СопоставитьПередЗаполнениемОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			СохранитьСоответствиеНоменклатурыКонтрагента(Результат);
		КонецЕсли;
		ЗагрузитьДокументЭДОЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСоответствиеНоменклатурыКонтрагента(Знач СоответствиеНоменклатуры)
	
	Для Каждого ЭлементКоллекции Из СоответствиеНоменклатуры Цикл 
		Если ЗначениеЗаполнено(ЭлементКоллекции.НоменклатураИБ) Тогда 
			ОбменСКонтрагентами.УстановитьСоответствиеНоменклатуры(
				ЭлементКоллекции.НоменклатураКонтрагента,
				ЭлементКоллекции.НоменклатураИБ);
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументЭДОЗавершение(ПараметрыЗагрузки)
	
	Отказ = Ложь;
	БизнесСетьСлужебныйКлиент.ЗагрузитьДокументВИБ(ПараметрыЗагрузки, Отказ);
	Если Не Отказ И Окно <> Неопределено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонтрагента(Отказ)
	
	РеквизитыКонтрагента = Новый Структура;
	РеквизитыКонтрагента.Вставить("ИНН", КонтрагентИНН);
	РеквизитыКонтрагента.Вставить("КПП", КонтрагентКПП);
	РеквизитыКонтрагента.Вставить("Наименование", КонтрагентНаименование);
	
	БизнесСетьПереопределяемый.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Отказ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюОКонтрагенте(Контрагент, УчастникИНН, УчастникКПП)
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", УчастникИНН, УчастникКПП, Контрагент)
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ТипОбъекта.Видимость = Не РежимЗаполненияДокумента;
	Элементы.ДокументУчета.Видимость = РежимЗаполненияДокумента;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Элементы.КонтрагентНаименование.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы.КонтрагентНаименование.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПросмотрЭДСервер(СтруктураЭД, Отказ)
	
	Перем ПереЗаполняемыйДокумент, ДеревоРазбора, СтрокаОбъекта;
	
	ФайлПросмотра = Неопределено;
	ИмяФайлаКартинок = Неопределено;
	ФайлДопДанных = Неопределено;
	ПоддерживаемыеКодыТранзакций = Новый Массив;
	ПоддерживаемыеКодыТранзакций.Добавить("MainDocument");
	ПоддерживаемыеКодыТранзакций.Добавить("VendorTitle");
	ПоддерживаемыеКодыТранзакций.Добавить("Invoice");
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураЭД.АдресХранилища);
	
	Если СтруктураЭД.ФайлАрхива Тогда
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext");
		ИмяФайлаАрхива = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанные.Записать(ИмяФайлаАрхива);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки, "*");
		
		Если НЕ ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(
			ИмяФайлаАрхива, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка архива ЭД';
													|en = 'ED archive unpacking'")) Тогда
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаАрхива);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Возврат;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаАрхива);
		
		// скопируем файл просмотра
		МассивФайловПросмотра = НайтиФайлы(ПапкаДляРаспаковки, "*.pdf", Истина);
		Если МассивФайловПросмотра.Количество() > 0 Тогда
			ФайлПросмотра = МассивФайловПросмотра[0];
		КонецЕсли;
		
		// Расшифровать файл с данными
		МассивФайлИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
		Если МассивФайлИнформации.Количество() > 0 Тогда
			ФайлИнформации = МассивФайлИнформации[0];
		КонецЕсли;
		
		МассивФайлКарточки = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
		Если МассивФайлКарточки.Количество() > 0 Тогда
			ФайлКарточки = МассивФайлКарточки[0];
		КонецЕсли;
		
		// скопируем файл просмотра
		МассивФайловКартинок = НайтиФайлы(ПапкаДляРаспаковки, "*.zip", Истина);
		Если МассивФайловКартинок.Количество() > 0 Тогда
			ФайлКартинок = МассивФайловКартинок[0];
			ИмяФайлаКартинок = ФайлКартинок.ПолноеИмя;
		КонецЕсли;
		
		Если ФайлКарточки = Неопределено Или ФайлИнформации = Неопределено Тогда
			
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла ""%1"".';
									|en = 'An error occurred while reading data from the ""%1"" file.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.ИмяФайла);
			
			ШаблонСообщения = НСтр("ru = 'Файл ""%1"" не содержит электронных документов.';
									|en = '""%1"" file does not contain electronic documents.'");
			ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.ИмяФайла);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.';
																				|en = 'ED reading'"),
			ПредставлениеОшибки,
			ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		СоответствиеФайлПараметры = ОбменСКонтрагентамиВнутренний.ПараметрыФайловЭДО(ФайлИнформации, ФайлКарточки);
		СообщениеОбОшибке = "";
		Для Каждого ЭлементСоответствия Из СоответствиеФайлПараметры Цикл
			Если ПоддерживаемыеКодыТранзакций.Найти(ЭлементСоответствия.Значение.КодТранзакции) = Неопределено Тогда
				СообщениеОбОшибке = НСтр("ru = 'Загрузка документов данного вида невозможна. Поддерживается только загрузка первичных документов (титул продавца / исполнителя, произвольный документ).';
										|en = 'Cannot import the documents of this kind. Only import of source documents (seller / assignee title, arbitrary document) is supported.'");
				Продолжить;
			КонецЕсли;
			МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствия.Ключ, Истина);
			Если МассивФайловИсточник.Количество() > 0 Тогда
				
				Если МассивФайловИсточник[0].Расширение = ".zip" Тогда
					
					ПапкаДляРаспаковкиФайлаЭД = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
					ИмяФайлаАрхива = МассивФайловИсточник[0].ПолноеИмя;
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковкиФайлаЭД, "*");
					
					Если Не ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(
						ИмяФайлаАрхива, ПапкаДляРаспаковкиФайлаЭД, НСтр("ru = 'Распаковка архива ЭД';
																		|en = 'ED archive unpacking'")) Тогда
						
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковкиФайлаЭД);
						Возврат;
					КонецЕсли;
					
					// скопируем файл просмотра
					МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковкиФайлаЭД, "*.xml", Истина);
				КонецЕсли;
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
				КопироватьФайл(МассивФайловИсточник[0].ПолноеИмя, ИмяФайла);
				
			КонецЕсли;
			
			ДопДанные = Неопределено;
			Если ЭлементСоответствия.Значение.Свойство("ДопДанные", ДопДанные) И ТипЗнч(ДопДанные) = Тип("Структура") Тогда
				
				ИмяФайлаДопДанных = Неопределено;
				Если ДопДанные.Свойство("ФайлДопДанных",ИмяФайлаДопДанных) И ЗначениеЗаполнено(ИмяФайлаДопДанных) Тогда
					
					МассивФайловДопДанных = НайтиФайлы(ПапкаДляРаспаковки, ИмяФайлаДопДанных, Истина);
					Если МассивФайловДопДанных.Количество() > 0 Тогда
						
						ФайлДопДанных = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
						КопироватьФайл(МассивФайловДопДанных[0].ПолноеИмя, ФайлДопДанных);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяФайла);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяФайла) И ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,,,, Отказ);
	Иначе
		СтруктураЭД.Свойство("СсылкаНаДокумент", ПереЗаполняемыйДокумент);
		
		СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяФайла,
			Перечисления.НаправленияЭД.Входящий, ФайлДопДанных, ИмяФайлаКартинок);
		
		Если СтруктураРазбора = Неопределено Тогда
			СтруктураРазбора = ОбменСКонтрагентамиСлужебный.ОпределитьПараметрыФайлаПрикладногоЭлектронногоДокумента(
				ИмяФайла, "xml");
		КонецЕсли;
		
		Если СтруктураРазбора = Неопределено Тогда
			СтруктураРазбора = ОбменСКонтрагентамиСлужебный.ПараметрыФайлаПроизвольногоДокумента(ИмяФайла);
		КонецЕсли;
		
		Если СтруктураРазбора = Неопределено Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Неизвестный тип электронного документа при чтении данных из файла %1.';
					|en = 'Unknown type of electronic document when reading data from the %1 file.'"), ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ДвоичныеДанныеФайлаРазбора = Новый ДвоичныеДанные(ИмяФайла);
		ДанныеФайлаРазбора = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаРазбора, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ФайлДопДанных) Тогда
			ДвоичныеДанныеФайлаДопДанных = Новый ДвоичныеДанные(ФайлДопДанных);
			ДанныеФайлаДопДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДопДанных, УникальныйИдентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайлаКартинок) Тогда
			ДвоичныеДанныеФайлаКартинок = Новый ДвоичныеДанные(ИмяФайлаКартинок);
			ДанныеФайлаКартинок = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаКартинок, УникальныйИдентификатор);
		КонецЕсли;
		
		ДанныеЭД = Неопределено;
		
		Если ТипЗнч(СтруктураРазбора) = Тип("Структура") Тогда
			
			ВидЭД = Неопределено;
			Если СтруктураРазбора.Свойство("СтрокаОбъекта") Тогда
				ВидЭД = СтруктураРазбора.СтрокаОбъекта.ВидЭД;
				АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(СтруктураРазбора, УникальныйИдентификатор);
				
			ИначеЕсли СтруктураРазбора.Свойство("ПрикладнойВидЭД", ПрикладнойВидЭД) Тогда
				ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД;
				АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(СтруктураРазбора, УникальныйИдентификатор);
				
			ИначеЕсли СтруктураРазбора.Свойство("ВидЭДДляОтраженияВУчете", ВидЭД) Тогда
				ДанныеCML = ОбменСКонтрагентамиСлужебный.ДанныеCMLПроизвольногоДокумента(
					ДвоичныеДанныеФайлаРазбора, СтруктураРазбора);
				Если ДанныеCML <> Неопределено Тогда
					ИмяФайлаCML = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
					ДанныеCML.Записать(ИмяФайлаCML);
					СтруктураРазбораCML = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяФайлаCML);
					АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(СтруктураРазбораCML, УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыПечати = Новый Структура;
			
			// Для ответных титулов передадим номер и дату документа ИБ первого титула.
			ПараметрыПечати.Вставить("СвойстваДокументаПервогоТитула",
				Новый Структура("НомерДокументаОтправителя, ДатаДокументаОтправителя"));
			ПараметрыПечати.Вставить("СкрыватьДопДанные", ОтключитьВыводДопДанных);
			ПараметрыПечати.Вставить("СкрыватьКопияВерна", ОтключитьВыводКопияВерна);
			ПараметрыПечати.Вставить("ИмяФайла", ИмяФайла);
			
			ДанныеЭД = ОбменСКонтрагентамиВнутренний.ПечатнаяФормаЭД(СтруктураРазбора, СтруктураЭД.НаправлениеЭД, ПараметрыПечати);
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
			
			Если ВидЭД = Неопределено Тогда
				ЗагрузкаЭД = Ложь;
				ТекстСообщения = НСтр("ru = 'Создание учетных документов недоступно для данного формата электронного документа.';
										|en = 'Cannot create accounting documents for this electronic document format.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если ЗагрузкаЭД Тогда
				Если (НЕ ЗначениеЗаполнено(ДокументИБ) ИЛИ СпособЗагрузкиДокумента = 0) И СтруктураРазбора <> Неопределено
						И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
						И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
					ОшибкаЗаписи = Ложь;
					СтрокаДерева = ОбменСКонтрагентамиСлужебный.НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Контрагент");
					Если СтрокаДерева <> Неопределено Тогда
						Контрагент = СтрокаДерева.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
				
				Если ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
					СписокТипов = ОбменСКонтрагентамиСлужебный.СписокТиповДокументовПоВидуЭД(ПрикладнойВидЭД);
				Иначе
					СписокТипов = ОбменСКонтрагентамиСлужебный.СписокТиповДокументовПоВидуЭД(ВидЭД);
				КонецЕсли;
				
				Для Каждого ТекЗначение Из СписокТипов Цикл
					
					ТекЭлемент = Элементы.ТипОбъекта.СписокВыбора.Добавить();
					ТекЭлемент.Значение = ТекЗначение.Представление;
					
					// Если реквизит ДокументИБ еще не заполнен и зачитано первое по списку значение, то заполним имеющимися данными:
					Если НЕ ЗначениеЗаполнено(ДокументИБ) И СписокТипов.Индекс(ТекЗначение) = 0 Тогда
						ТипОбъекта = ТекЗначение.Представление;
						ДокументИБ = ТекЗначение.Значение;
						ИмяОбъектаМетаданных = ТекЗначение.Значение.Метаданные().ПолноеИмя();
					КонецЕсли;
					
					Если ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
						Если ЗначениеЗаполнено(Контрагент) Тогда
							ДокументИБ = Контрагент;
							СпособЗагрузкиДокумента = 1;
						КонецЕсли;
					КонецЕсли;
					
					// Если в структуре параметров есть ссылка на (перезаполняемый) документ ИБ и его тип совпал с типом одного из значений
					// списка типов, то заполним этими данными соответствующие реквизиты формы.
					// Данное условие необходимо для корректной обработки ситуации, когда в качестве перезаполняемого документа, выбран
					// документ с типом не совпадающим ни с одним из доступных в списке или не совпадает с типом первого элемента списка.
					Если ЗначениеЗаполнено(ПереЗаполняемыйДокумент) И ТипЗнч(ПереЗаполняемыйДокумент) = ТипЗнч(ТекЗначение.Значение) Тогда
						ТипОбъекта = ТекЗначение.Представление;
						ДокументИБ = ПереЗаполняемыйДокумент;
						ИмяОбъектаМетаданных = ТекЗначение.Значение.Метаданные().ПолноеИмя();
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			ТабличныйДокументФормы = ДанныеЭД;
			
		Иначе
			
			Если Не ФайлПросмотра = Неопределено Тогда
				
				
				ПутьКФайлу = ФайлПросмотра.ПолноеИмя;
				РасширениеФайла = СтрЗаменить(ФайлПросмотра.Расширение, ".", "");
				
				ДДФайла = Новый ДвоичныеДанные(ПутьКФайлу);
				
				// Передадим на клиента двоичные данные файла для просмотра:
				АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(ДДФайла, УникальныйИдентификатор);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидЭД <> Неопределено Тогда
			ПрочитатьНоменклатуруКонтрагентаИзФайла(ИмяФайла);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		КонецЕсли;
		
		Если СтруктураРазбора = Неопределено
			И ДанныеЭД = Неопределено
			И ПустаяСтрока(АдресСтруктурыРазбораЭД) Тогда 
			Отказ = Истина; // Если нечего открывать, то и форму открывать незачем.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьДокумент(Команда)
	
	Отказ = Истина;
	Оповещение = Новый ОписаниеОповещения("ОтклонитьДокументПродолжение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документ будет отклонен для загрузки.
							  |Продолжить выполнение операции?';
							  |en = 'Document will be declined for export.
							  |Continue?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьДокументПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Ссылка", ДокументИБ);
	ПараметрыВызова.Вставить("Идентификатор", Идентификатор);
	Результат = БизнесСетьВызовСервера.ОтклонитьДокументы(ПараметрыВызова, Отказ);
	
	Оповестить("ОбновитьСписокВходящихДокументов1СБизнесСеть");
	
	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ПрочитатьНоменклатуруКонтрагентаИзФайла(Знач ИмяФайла)
	
	СвойстваЭлектронногоДокумента = Новый Структура("ВидЭД, ПрикладнойВидЭД", ПрикладнойВидЭД, ПрикладнойВидЭД);
	Если НЕ ОбменСКонтрагентамиСлужебный.ИспользоватьСопоставлениеНоменклатуры(СвойстваЭлектронногоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	НаборНоменклатурыКонтрагентов = ОбменСКонтрагентамиСлужебный.НоменклатураКонтрагентаВФайле(ИмяФайла, Контрагент);
	
	СписокНоменклатурыКонтрагентов.ЗагрузитьЗначения(НаборНоменклатурыКонтрагентов);
	
	ВыполнитьКонтрольСопоставленияНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольСопоставленияНоменклатуры()
	
	НеСопоставлено = ОбменСКонтрагентамиСлужебный.ВыполнитьКонтрольСопоставленияНоменклатуры(
		Неопределено, СписокНоменклатурыКонтрагентов.ВыгрузитьЗначения(), Ложь);
	
	СписокНеСопоставленнойНоменклатуры.ЗагрузитьЗначения(НеСопоставлено);
	
КонецПроцедуры

#КонецОбласти
