
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Режим подбора
	Если Параметры.Свойство("РежимПодбора", РежимПодбора)
	  И РежимПодбора Тогда
		Элементы.Список.РежимВыбора = Истина;
		СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(ЭтотОбъект, "ВыборПодбор");		
	КонецЕсли;
	Элементы.Выбрать.Видимость = РежимПодбора;
	
	времНастройки = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "Настройки");
	Настройки = ?(времНастройки = Неопределено, ПолучитьНастройкиПоУмолчанию(), времНастройки);
	
	// Формирование вариантов списка
	ПараметрыСписка = ПолучитьПараметрыСписка();
	
	ТекущаяНастройка	 = Новый Структура(ПараметрыСписка.ИмяСписка);
	ТекущийВариантСписка = Новый Структура(ПараметрыСписка.ИмяСписка);
	CRM_КлассификаторыВызовСервера.ИнициализироватьВариантыСписка(ЭтотОбъект, ПараметрыСписка);
	
	ОтборДатаВключенияКлассификатораВидСравнения = "Равно";
	ОтборПродажиСуммаВидСравнения				 = "Равно";
		
	Если Параметры.Свойство("Классификатор") Тогда
		Классификатор = Параметры.Классификатор;
		ИницализироватьСтруктуруКлассификатора();
		
	КонецЕсли;
		
	УстановитьПараметрыСписковПоНастройкам(ЭтаФорма);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Классификатор", Классификатор);
	
	Если Параметры.Свойство("МассивОбъектовКлассификаторов")
	  И Параметры.МассивОбъектовКлассификаторов.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
			"Ссылка", Параметры.МассивОбъектовКлассификаторов, ВидСравненияКомпоновкиДанных.ВСписке);
		
		РежимСписка = Истина;
		Заголовок   = НСтр("ru='Установлен дополнительный отбор';en='Additional selection set'");
		
	КонецЕсли;	
	
	// Настройки
	СформироватьЗаголовокПоНастройке(ЭтотОбъект);
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Настройки
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_НастройкиУправленияКлассификацией") Тогда
		ТекущаяНастройка["СписокНоменклатура"] = ВыбранноеЗначение;	
		ИнициализироватьФормуПоНастройкеКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьРежимПросмотраСписка();
	РежимСписка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьВариантаСпискаКлассификации" И Источник = "СписокНоменклатура" Тогда
		ИнициализироватьВариантыСписка(Источник, Параметр)
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьНастройкиКлассификации" Тогда
		Если ТекущаяНастройка.Свойство(Источник) Тогда
			ТекущаяНастройка[Источник] = Параметр;
			СформироватьЗаголовокПоНастройке(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторам(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Принадлежность"	 	  , "Справочник.Номенклатура");
	ПараметрыФормы.Вставить("МассивЗначений"	 	  , ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("МассивЗначенийРеквизитов", ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("ЛогическоеВыражение"	  , ЛогическоеВыражениеОтбораКлассификаторов);
	
	Оповещение = Новый ОписаниеОповещения("НастроитьОтборПоКлассификаторамЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаПодбораЗначенийКлассификаторов", 
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторамЗавершение(СтруктураЗначенийКлассификаторов, ДополнительныеПараметры) Экспорт

	Если СтруктураЗначенийКлассификаторов = Неопределено Тогда
		Возврат;
	
	КонецЕсли;	
	
	ЛогическоеВыражениеОтбораКлассификаторов = СтруктураЗначенийКлассификаторов.ЛогическоеВыражение;
	УстановитьОтборПоКлассификаторам(СтруктураЗначенийКлассификаторов.ЗначенияКлассификаторов, СтруктураЗначенийКлассификаторов.ЗначенияРеквизитов);
		
КонецПроцедуры // НастроитьОтборПоКлассификаторамЗавершение()

&НаКлиенте
Процедура НазначитьВыделенным(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	
	КонецЕсли;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда                      
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Возврат;	
		КонецЕсли;		
		
		Если Элементы.Список.ТекущийЭлемент.Родитель = Элементы.ПоляЗначенийКлассифкатора Тогда
			ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, Элементы.Список.ТекущийЭлемент.Имя, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#Область Настройки
	
&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Настройки);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_УправлениеКлассификацей.Форма.ФормаНастроек",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(ПолученныеНастройки, Контекст) Экспорт

	Если ПолученныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки(ПолученныеНастройки);	
	УстановитьПараметрыСписковПоНастройкам(ЭтаФорма);

КонецПроцедуры // НастройкиЗавершение()

&НаКлиенте
Процедура ВыбратьНастройку(Команда)
		
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяСписка", "СписокНоменклатура");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"		 , Отбор);
	ПараметрыФормы.Вставить("Пользватель", ПользователиКлиентСервер.ТекущийПользователь());
	
	ОткрытьФорму("Справочник.CRM_НастройкиУправленияКлассификацией.ФормаВыбора",
		ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	ПараметрыНастройки = Новый Структура;
	
	// Основные настройки
	ПараметрыНастройки.Вставить("ВариантСписка", ТекущийВариантСписка["СписокНоменклатура"]);
	ПараметрыНастройки.Вставить("Классификатор", Классификатор);
	
	ПараметрыНастройки.Вставить("ОтборСписокЗначенийКлассификаторов"	  , ОтборСписокЗначенийКлассификаторов);
	ПараметрыНастройки.Вставить("ЛогическоеВыражениеОтбораКлассификаторов", ЛогическоеВыражениеОтбораКлассификаторов);
	
	// Быстрые отборы
	СтруктураБыстрыхОтборов = Новый Структура;
	
	СтруктураБыстрыхОтборов.Вставить("ОтборДатаВключенияКлассификатора"			   , ОтборДатаВключенияКлассификатора);
	СтруктураБыстрыхОтборов.Вставить("ОтборДатаВключенияКлассификатораВидСравнения", ОтборДатаВключенияКлассификатораВидСравнения);
	СтруктураБыстрыхОтборов.Вставить("ОтборНоменклатурнаяГруппа"				   , ОтборНоменклатурнаяГруппа);
	СтруктураБыстрыхОтборов.Вставить("ОтборПродажиСумма"						   , ОтборПродажиСумма);
	СтруктураБыстрыхОтборов.Вставить("ОтборПродажиСуммаВидСравнения"			   , ОтборПродажиСуммаВидСравнения);
	СтруктураБыстрыхОтборов.Вставить("ОтборСписокЗначенийКлассификаторов"		   , ОтборСписокЗначенийКлассификаторов);
	СтруктураБыстрыхОтборов.Вставить("ОтборЦеноваяГруппа"						   , ОтборЦеноваяГруппа);	
	
	ПараметрыНастройки.Вставить("БыстрыеОтборы", СтруктураБыстрыхОтборов);
	
	// Сохранение настройки
	ОткрытьФорму("Справочник.CRM_НастройкиУправленияКлассификацией.Форма.СохранениеНастройки",
		Новый Структура("ИмяСписка, Настройки", "СписокНоменклатура", ПараметрыНастройки), ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Выбрать(Команда)
	ТекущиеОбъектыКорзины = ТекущиеОбъектыКорзины();
	Если ТекущиеОбъектыКорзины.Количество() = 0 Тогда
		ОповеститьОВыборе(Элементы.СписокПартнеры.ВыделенныеСтроки);
	Иначе
		ОповеститьОВыборе(ТекущиеОбъектыКорзины);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлассификаторПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьСтруктуруКлассификатора", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда                      
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;	
	КонецЕсли;
	
	Если Поле.Родитель = Элементы.ПоляЗначенийКлассифкатора Тогда
		ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, Поле.Имя, СтандартнаяОбработка);
		Элемент.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#Область БыстрыеОтборы
	
&НаКлиенте
Процедура ОтборЦеноваяГруппаПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатурнаяГруппаПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВключенияКлассификатораПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПродажиСуммаПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВключенияКлассификатораВидСравненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[Элемент.Имя]) Тогда
		ЭтаФорма[Элемент.Имя] = "Равно";
	КонецЕсли;
	
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПродажиСуммаВидСравненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[Элемент.Имя]) Тогда
		ЭтаФорма[Элемент.Имя] = "Равно";
	КонецЕсли;
	
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ИницализироватьСтруктуруКлассификатора()

	ИницализироватьСтруктуруКлассификатора();	

КонецПроцедуры // Подключаемый_ИницализироватьСтруктуруКлассификатора()

&НаКлиенте
Процедура Подключаемый_ЗначениеОтбора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ЭлементЗначенияОтбора = ОтборСписокЗначенийКлассификаторов.НайтиПоЗначению(
		СсылкаЭлемента(Элемент.Имя));	
		
	Если ЭлементЗначенияОтбора = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;	
	
	ИндексЭлементЗначенияОтбора = ОтборСписокЗначенийКлассификаторов.Индекс(ЭлементЗначенияОтбора);
	
	ОтборСписокЗначенийКлассификаторов.Удалить(ИндексЭлементЗначенияОтбора);
	ОтборСписокЗначенийРеквизитовКлассификаторов.Удалить(ИндексЭлементЗначенияОтбора);
	
	УстановитьОтборПоКлассификаторам();
	
КонецПроцедуры // Подключаемый_ЗначениеОтбора_ОбработкаСсылки()

#Область ВариантыСписка

&НаКлиенте
Процедура Подключаемый_ВариантСпискаПриИзменении(Команда)
	ВариантСпискаПриИзменении(Команда.Имя);
КонецПроцедуры // Подключаемый_ВариантСпискаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ДобавитьВариантСписка(Команда)
		
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИмяСписка", "СписокНоменклатура");
	
	ОткрытьФорму("Справочник.CRM_ВариантыСписковУправленияКлассификацией.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтотОбъект, УникальныйИдентификатор);
	
	КонецПроцедуры // Подключаемый_ДобавитьВариантСписка()
	
&НаКлиенте
Процедура Подключаемый_ВариантыСписка(Команда)
		
	ОткрытьФорму("Справочник.CRM_ВариантыСписковУправленияКлассификацией.ФормаСписка",, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ИницализироватьСтруктуруКлассификатора()
	СформироватьВыбранныеПоля();	
КонецПроцедуры // ИницализироватьСтруктуруКлассификатора()

&НаСервере
Процедура СформироватьВыбранныеПоля()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Классификатор", Классификатор);
	
	ИмяТаблицы = "Список";
	Для каждого СтрокаСоответстствия Из ТаблицаСоответстствияПолей Цикл
		Элемент = Элементы.Найти(СтрокаСоответстствия.ИмяПоля);	
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСоответстствияПолей.Очистить();
	
	Если Не ЗначениеЗаполнено(Классификатор) Тогда
		Возврат;	
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ЗначенияКлассификаторов.Ссылка,
		|	CRM_ЗначенияКлассификаторов.Код,
		|	CRM_ЗначенияКлассификаторов.Владелец.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	CRM_ЗначенияКлассификаторов.Владелец.Наименование КАК ВладелецНаименование,
		|	CRM_ЗначенияКлассификаторов.Представление,
		|	CRM_ЗначенияКлассификаторов.Владелец.ВидОтображения КАК ВидОтображения,
		|	CRM_ЗначенияКлассификаторов.Описание,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит.ТипЗначения КАК ТипЗначения,
		|	CRM_ЗначенияКлассификаторов.Владелец.ХранитьИсториюИзменения КАК ХранитьИсториюИзменения
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &Классификатор
		|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ЗначенияКлассификаторов.Владелец.РеквизитДопУпорядочивания,
		|	CRM_ЗначенияКлассификаторов.РеквизитДопУпорядочивания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Сч = 1;
	                                                        		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ШаблонИмени = ПолучитьШаблонИмени(Выборка.Код + "_" + Выборка.ВладелецНаименование);
		
		Элемент = ЭтаФорма.Элементы.Добавить(ИмяТаблицы + "_" + Формат(Сч, "ЧГ="), Тип("ПолеФормы"), Элементы.ПоляЗначенийКлассифкатора);
		Элемент.ПутьКДанным	= ИмяТаблицы + "." + ШаблонИмени;
		
		Если ЗначениеЗаполнено(Выборка.ДополнительныйРеквизит) Тогда
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Выборка.ТипЗначения, Тип("Булево")) Тогда
				Элемент.Вид = ВидПоляФормы.ПолеФлажка;
			Иначе	
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
		Иначе			
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
		Элемент.Заголовок   = Выборка.Представление;
		Элемент.Подсказка   = Выборка.Описание;
		
		НоваяСтрока	= ТаблицаСоответстствияПолей.Добавить();
		
		НоваяСтрока.ШаблонИмени	= ШаблонИмени;
		НоваяСтрока.ИмяПоля 	= ИмяТаблицы + "_" + Формат(Сч, "ЧГ=");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.Аналитика = CRM_КлассификаторыВызовСервера.ПолучитьЗначениеИспользуемойАналитикиКлассификатора(Классификатор);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	// Видимость	
	Элементы.СписокКонтекстноеМенюНазначитьВыделенным.Видимость = 
		(Классификатор.ВидОтображения <> Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит); 
	
КонецПроцедуры // СформироватьВыбранныеПоля()

&НаСервереБезКонтекста
Функция ПолучитьШаблонИмени(ИмяПоля)

	Если Найти(ИмяПоля, " ") Тогда
		Шаблон = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ссылка.[%1]", "_" + ИмяПоля);
	Иначе	
		Шаблон = "Ссылка." + "_" + ИмяПоля;
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции // ПолучитьШаблонИмениПоСсылке()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуСоответствия(Форма, ИмяПоля)

	Перем СтрокаПоля;
	
	СтрокиПоля = Форма.ТаблицаСоответстствияПолей.НайтиСтроки(Новый Структура("ИмяПоля", ИмяПоля));
	Если СтрокиПоля.Количество() > 0 Тогда
		СтрокаПоля = СтрокиПоля[0];	
	КонецЕсли;
	
	Возврат СтрокаПоля;
	
КонецФункции // НайтиСтрокуСоответствия()

&НаКлиентеНаСервереБезКонтекста
Функция СформировтьСтруктуруСтрокиКлассификатора(СтрокаПоля)

	СтрокаКлассификатора = Новый Структура("Ссылка,
											|Представление,
											|ИмяПоля,
											|ШаблонИмени,
											|ВидОтображения,
											|Классификатор,
											|Аналитика,
											|ЗначениеРеквизита,
											|ХранитьИсториюИзменения");	

	ЗаполнитьЗначенияСвойств(СтрокаКлассификатора, СтрокаПоля);
	Возврат СтрокаКлассификатора;
	
КонецФункции // СформировтьСтруктуруСтрокиКлассификатора()

&НаКлиенте
Процедура ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, ИмяПоля, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтрокаПоля = НайтиСтрокуСоответствия(ЭтаФорма, ИмяПоля);
	Если СтрокаПоля = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	СтрокаКлассификатора = СформировтьСтруктуруСтрокиКлассификатора(СтрокаПоля);
	Если ЗначениеЗаполнено(СтрокаПоля.ДополнительныйРеквизит) Тогда
		СтрокаКлассификатора.ЗначениеРеквизита = ДанныеСтроки[СтрокаПоля.ШаблонИмени];	
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка"		   	   , ДанныеСтроки.Ссылка);
		ПараметрыОповещения.Вставить("СтрокаКлассификатора", СтрокаКлассификатора);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеСтрокиКлиентЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВводЗначения(Оповещение, СтрокаКлассификатора.ЗначениеРеквизита, Элементы[ИмяПоля].Заголовок, СтрокаПоля.ТипЗначения);  
		
	Иначе	
		ИзменитьКлассификатор(ДанныеСтроки.Ссылка, СтрокаКлассификатора, Не ДанныеСтроки[СтрокаПоля.ШаблонИмени], Истина);		
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДанныеСтроки()

&НаКлиенте
Процедура ОбработатьДанныеСтрокиКлиентЗавершение(ЗначениеРеквизита, Конекст) Экспорт
	
	Если ЗначениеРеквизита = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	СтрокаКлассификатора = Конекст.СтрокаКлассификатора;
	СтрокаКлассификатора.ЗначениеРеквизита = ЗначениеРеквизита;
	
	ИзменитьКлассификатор(Конекст.Ссылка, СтрокаКлассификатора, ЗначениеЗаполнено(ЗначениеРеквизита), Истина);		
	
	Элементы.Список.Обновить();
	
КонецПроцедуры // ОбработатьДанныеСтрокиКлиентЗавершение()

&НаСервере
Процедура ИзменитьКлассификатор(ОбъектСсылка, СтрокаКлассификатора, Включить, Рекурсивно = Ложь)
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписей.Отбор.Аналитика.Установить(СтрокаКлассификатора.Аналитика);
	НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(СтрокаКлассификатора.Ссылка);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Если Включить Тогда
		Запись = НаборЗаписей.Добавить();
		
		Запись.Объект  				   = ОбъектСсылка;
		Запись.Аналитика			   = СтрокаКлассификатора.Аналитика;		
		Запись.ЗначениеКлассификатора  = СтрокаКлассификатора.Ссылка;
		Запись.ЗначениеРеквизита  	   = СтрокаКлассификатора.ЗначениеРеквизита;
		Запись.ДатаВключения		   = ТекущаяДата();
		Запись.ХранитьИсториюИзменения = СтрокаКлассификатора.ХранитьИсториюИзменения;
		
	КонецЕсли;	
	
	НаборЗаписей.Записать();
	
	Если Рекурсивно И СтрокаКлассификатора.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
		Для каждого СтрокаОписания Из ТаблицаСоответстствияПолей Цикл
			Если СтрокаОписания.Ссылка = СтрокаКлассификатора.Ссылка Тогда
				Продолжить;
			
			КонецЕсли;
			
			ИзменитьКлассификатор(ОбъектСсылка, СтрокаОписания, Ложь);
			
		КонецЦикла;
		
	
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ИзменитьКлассификатор()

&НаКлиенте
Процедура УстановитьОтборПоКлассификаторам(Знач ЗначенияКлассификаторов = Неопределено, Знач ЗначенияРеквизитов = Неопределено)

	// Значения
	Если ЗначенияКлассификаторов = Неопределено Тогда
		ЗначенияКлассификаторов = ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения();
		
	Иначе
		ОтборСписокЗначенийКлассификаторов.ЗагрузитьЗначения(ЗначенияКлассификаторов);
		
	КонецЕсли;
	
	// Реквизиты
	Если ЗначенияРеквизитов = Неопределено Тогда
		ЗначенияРеквизитов = ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения();
		
	Иначе
		ОтборСписокЗначенийРеквизитовКлассификаторов.ЗагрузитьЗначения(ЗначенияРеквизитов);
		
	КонецЕсли;	
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, "ГруппаИЛИЗначенийИРеквизитовКлассификатора", 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);	
		
	Если ЗначенияКлассификаторов.Количество() > 0 Тогда
		КоличествоЭлементовОтбора = ЗначенияКлассификаторов.Количество();
		Для Сч = 0 По КоличествоЭлементовОтбора - 1 Цикл
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИ.Элементы, "ГруппаИЗначенийИРеквизитовКлассификатора" + Формат(Сч, "ЧГ="), 
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);	
				
			ЭлементЗначенияКлассификаторов 			= ЗначенияКлассификаторов[Сч];	
			ЭлементЗначенияРеквизитаКлассификаторов = ЗначенияРеквизитов[Сч];	
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
				"ЗначениеКлассификатора", ЭлементЗначенияКлассификаторов, ВидСравненияКомпоновкиДанных.Равно);
			
			Если ТипЗнч(ЭлементЗначенияРеквизитаКлассификаторов) = Тип("Число") Тогда
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;	
			Иначе	
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.Равно;	
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
				"ЗначениеРеквизита", ЭлементЗначенияРеквизитаКлассификаторов, ВидСравненияСписка);
		
		КонецЦикла;
				
	КонецЕсли;
	
	ИспользуетсяОтборПоКлассификатору = ЗначенияКлассификаторов.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, 
		"ЛогическоеВыражение", ЛогическоеВыражениеОтбораКлассификаторов, ИспользуетсяОтборПоКлассификатору);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, 
		"КоличествоЗначенийКлассификатора", ЗначенияКлассификаторов.Количество(), ИспользуетсяОтборПоКлассификатору);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, 
		"ИспользуетсяОтборПоКлассификатору", Истина, ИспользуетсяОтборПоКлассификатору);	

	ОбновитьОтображениеУстановленныхОтборов();
	УстановитьРежимПросмотраСписка();
	
	Элементы.Список.Обновить();
	
КонецПроцедуры // УстановитьОтборПоКлассификаторам()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСписковПоНастройкам(Форма)
	
	КонецПериода  = КонецДня(ТекущаяДата());
	НачалоПериода = CRM_КлассификаторыКлиентСервер.РассчитатьНачалоПериода(КонецПериода, Форма.Настройки.ИнтервалПродаж, Форма.Настройки.ПериодичностьПродаж);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "НачалоПериода", НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список, "КонецПериода" , КонецПериода);	
	
КонецПроцедуры // УстановитьПараметрыСписковПоНастройкам()

&НаСервере
Процедура ОбновитьОтображениеУстановленныхОтборов()
	
	МассивЭлементовОтбора = Новый Массив;
	Для каждого ЭлементОтбора Из Элементы.ГруппаУстановленныеОтборы.ПодчиненныеЭлементы Цикл
		МассивЭлементовОтбора.Добавить(ЭлементОтбора);
		
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из МассивЭлементовОтбора Цикл
		Элементы.Удалить(ЭлементОтбора);	
		
	КонецЦикла;
	
	Для каждого ЭлементСписка Из ОтборСписокЗначенийКлассификаторов Цикл
		Значение = ЭлементСписка.Значение;
		ИмяОписания = "Значение__" + ИдентификаторЭлемента(Значение);	
		
		Представление = Строка(Значение);
		Если СтрДлина(Представление) > 15 Тогда
			Представление = Лев(Представление, 15) + "...";
			Ширина	 	  = 15 - 1;
			
		Иначе
			Ширина = СтрДлина(Представление) + 1;
			
		КонецЕсли;
		
		Компоненты = Новый Массив;
		Компоненты.Добавить(Новый ФорматированнаяСтрока(Представление + " "));
		Компоненты.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, ИмяОписания));
		
		Элемент = Элементы.Найти(ИмяОписания);
		Если Элемент = Неопределено Тогда
			Элемент = Элементы.Добавить(
				ИмяОписания, Тип("ДекорацияФормы"), Элементы.ГруппаУстановленныеОтборы);
							
		КонецЕсли;

		Элемент.Вид						= ВидДекорацииФормы.Надпись;
		Элемент.Заголовок 				= Новый ФорматированнаяСтрока(Компоненты);
		Элемент.ЦветФона  			    = ЦветаСтиля.ЦветФонаФормы;
		Элемент.Рамка     			    = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.Ширина				    = Ширина;
		
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ЗначениеОтбора_ОбработкаСсылки");
		
	КонецЦикла;
	
	ДекорацияЛогическоеВыражениеВидимость = ОтборСписокЗначенийКлассификаторов.Количество() > 0;
	Если ДекорацияЛогическоеВыражениеВидимость Тогда
		Элементы.ДекорацияЛогическоеВыражениеОтбораКлассификаторов.Заголовок = ?(ЛогическоеВыражениеОтбораКлассификаторов = "ИЛИ", НСтр("ru = 'Один из: '"), НСтр("ru = 'Все: '"));
	КонецЕсли;
	Элементы.ДекорацияЛогическоеВыражениеОтбораКлассификаторов.Видимость = ДекорацияЛогическоеВыражениеВидимость;
	
КонецПроцедуры // ОбновитьОтображениеУстановленныхОтборов()

&НаСервереБезКонтекста
Функция ИдентификаторЭлемента(Ссылка)

	Возврат СтрЗаменить(Ссылка.УникальныйИдентификатор(), "-", "_");	
	
КонецФункции // ИдентификаторЭлемента()

&НаСервереБезКонтекста
Функция СсылкаЭлемента(ИмяЭлемента)
	
	МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлемента, "__");	

	Возврат Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(
		Новый УникальныйИдентификатор(СтрЗаменить(МассивИмени[1], "_", "-"))
	);
	
КонецФункции // СсылкаЭлемента()

&НаСервере
Процедура СохранитьНастройки(СохраняемыеНастройки)
	
	Настройки = СохраняемыеНастройки;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "Настройки", СохраняемыеНастройки);	
	
КонецПроцедуры // СохранитьНастройки()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиПоУмолчанию()

	Настройки = Новый Структура;
	Настройки.Вставить("ИнтервалПродаж"		, 1);
	Настройки.Вставить("ПериодичностьПродаж", ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	
	Возврат Настройки;

КонецФункции // ПолучитьНастройкиПоУмолчанию()

&НаКлиенте
Процедура УстановитьБыстрыеОтборы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"ЦеноваяГруппа", ОтборЦеноваяГруппа,,, ЗначениеЗаполнено(ОтборЦеноваяГруппа)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"НоменклатурнаяГруппа", ОтборНоменклатурнаяГруппа,,, ЗначениеЗаполнено(ОтборНоменклатурнаяГруппа)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"ПродажиСумма", ОтборПродажиСумма, ВидСравненияКомпоновкиДанных[ОтборПродажиСуммаВидСравнения],, ЗначениеЗаполнено(ОтборПродажиСумма)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"ДатаВключения", ОтборДатаВключенияКлассификатора, ВидСравненияКомпоновкиДанных[ОтборДатаВключенияКлассификатораВидСравнения],, ЗначениеЗаполнено(ОтборДатаВключенияКлассификатора)
	);
		
	УстановитьРежимПросмотраСписка();
	
КонецПроцедуры // УстановитьБыстрыеОтборы()

&НаКлиенте
Процедура УстановитьРежимПросмотраСписка()
	
	Если ОтборСписокЗначенийКлассификаторов.Количество() > 0
	  ИЛИ ЗначениеЗаполнено(ОтборЦеноваяГруппа)
	  ИЛИ ЗначениеЗаполнено(ОтборНоменклатурнаяГруппа)
	  ИЛИ ЗначениеЗаполнено(ОтборПродажиСумма)
	  ИЛИ ЗначениеЗаполнено(ОтборДатаВключенияКлассификатора) 
	  ИЛИ РежимСписка Тогда
	  
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
	Иначе	
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		
	КонецЕсли;

КонецПроцедуры // УстановитьРежимПросмотраСписка()

#Область ВариантыСписка

&НаСервере
Процедура ВариантСпискаПриИзменении(ИмяКоманды)
	CRM_КлассификаторыВызовСервера.ИницализироватьНаборДанныхСписка(ЭтотОбъект, ИмяКоманды, ПолучитьПараметрыСписка());
КонецПроцедуры // ВариантСпискаПриИзменении()

&НаСервере
Процедура ИнициализироватьВариантыСписка(ИмяСписка, ВариантСписка)
	
	ПараметрыСписка = ПолучитьПараметрыСписка();
	Если ИмяСписка <> ПараметрыСписка.ИмяСписка Тогда
		Возврат;
		
	КонецЕсли;
	
	ПараметрыСписка.Вставить("ТекущийВариантСписка", ВариантСписка);
	CRM_КлассификаторыВызовСервера.ИнициализироватьВариантыСписка(ЭтотОбъект, ПараметрыСписка);
	
КонецПроцедуры // ИнициализироватьВариантыСписка()

&НаСервере
Функция ПолучитьПараметрыСписка()

	ПараметрыСписка = Новый Структура;
	ПараметрыСписка.Вставить("ИмяСписка"      	 , "СписокНоменклатура");
	ПараметрыСписка.Вставить("ОсновнаяТаблица"	 , "Справочник.Номенклатура");
	ПараметрыСписка.Вставить("ЭлементСписка"  	 , Элементы.Список);
	ПараметрыСписка.Вставить("ОбластьВарианты"   , Элементы.СписокГруппаВариантыСписка);
	ПараметрыСписка.Вставить("ОбластьДобавления" , Элементы.ПоляСписка);

	Возврат ПараметрыСписка;
	
КонецФункции // ПолучитьПараметрыСписка()

#КонецОбласти

#Область Настройки

&НаКлиенте
Процедура ИнициализироватьФормуПоНастройкеКлиент()
	
	Настройка = ПолучитьНастройкиПоСсылке(ТекущаяНастройка["СписокНоменклатура"]);
	Если Настройка <> Неопределено Тогда
		ИнициализироватьНастройки(Настройка);	
	КонецЕсли;
	
	СформироватьЗаголовокПоНастройке(ЭтотОбъект);
	
КонецПроцедуры // ИнициализироватьФормуПоНастройкеКлиент()

&НаКлиенте
Процедура ИнициализироватьНастройки(Настройка)

	ИмяСписка = "СписокНоменклатура";
	
	// Вариант списка
	ТекущийВариантСписка[ИмяСписка] = Настройка.ВариантСписка;
	ВариантСпискаПриИзменении(?(ЗначениеЗаполнено(Настройка.ВариантСписка), Настройка.ВариантСписка, "ОсновнойВариант" + ИмяСписка));
	
	// Классификатор
	Классификатор = Настройка.Классификатор;
	ИницализироватьСтруктуруКлассификатора();	
	
	// Отбор по классификатору
	ЛогическоеВыражениеОтбораКлассификаторов = Настройка.ЛогическоеВыражениеОтбораКлассификаторов;
	
	ОтборСписокЗначенийКлассификаторов.Очистить();
	Для каждого ЭлементОтбора Из Настройка.ОтборСписокЗначенийКлассификаторов Цикл
		ОтборСписокЗначенийКлассификаторов.Добавить(ЭлементОтбора.Значение, ЭлементОтбора.Представление);	
	КонецЦикла;
	
	УстановитьОтборПоКлассификаторам();
	
	// Быстрые отборы
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройка.БыстрыеОтборы);
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры // ИнициализироватьНастройки()

&НаСервереБезКонтекста
Функция ПолучитьНастройкиПоСсылке(НастрокаСсылка)
	Возврат Справочники.CRM_НастройкиУправленияКлассификацией.ПолучитьНастройки(НастрокаСсылка);	
КонецФункции // ПолучитьНастройкиПоСсылке()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокПоНастройке(Форма)
	
	Настройка = Форма.ТекущаяНастройка["СписокНоменклатура"];
	Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Номенклатура (%1)';en='Nomenclature (%1)'"), 
		?(ЗначениеЗаполнено(Настройка), Настройка, НСтр("ru='по умолчанию';en='by default'"))); 
	
КонецПроцедуры // СформироватьЗаголовокПоНастройке()

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#Область Корзина

&НаКлиенте
Процедура ОткрытьКорзину(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	НайденныеСтроки = ТекущиеСтрокиКорзины(ЭтотОбъект);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Корзина 	   = Новый Массив;
	ПараметрыФормы = Новый Структура;
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтруктураСтроки = Новый Структура("Ссылка, ИмяСписка");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, НайденнаяСтрока);
		
		Корзина.Добавить(СтруктураСтроки);		
	
	КонецЦикла;
	ПараметрыФормы.Вставить("Корзина", Корзина);
	
	Оповещение = Новый ОписаниеОповещения("ПослеРедактированияКорзины", ЭтотОбъект, СтруктураРаздела);
	ОткрытьФорму("Обработка.CRM_УправлениеКлассификацей.Форма.ФормаКорзина", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	ВыделенныеСтроки = Элементы[СтруктураРаздела.ИмяСписка].ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны строки для добавления. '"), 15);
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы[СтруктураРаздела.ИмяСписка].ДанныеСтроки(ВыделеннаяСтрока); 
		Если ДанныеСтроки <> Неопределено
		  И СтруктураРаздела.ИерархияГруппИЭлементов
		  И ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;	
			
		КонецЕсли;
		
		МассивСтрок.Добавить(ВыделеннаяСтрока);
	
	КонецЦикла;
	
	// Добавление элементов 
	ДобавитьВКорзинуСервер(МассивСтрок, СтруктураРаздела);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	МассивОбъектов = ТекущиеОбъектыКорзины(СтруктураРаздела);
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;	
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицы"    , СтруктураРаздела.КлассификаторПринадлежность);
	ПараметрыФормы.Вставить("МассивОбъектов", МассивОбъектов);
	
	ОткрытьФорму("Обработка.CRM_МастерФормированияПоручений.Форма", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВКорзинуСервер(МассивСтрок, СтруктураРаздела)

	Для каждого Строка Из МассивСтрок Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Ссылка"   , Строка);
		СтруктураПоиска.Вставить("ИмяСписка", СтруктураРаздела.ИмяСписка);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		
		НайденныеСтроки = Объект.Корзина.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда			
			ЗаполнитьЗначенияСвойств(Объект.Корзина.Добавить(), СтруктураПоиска);
			
		КонецЕсли;
		
	КонецЦикла;		
	
	СформироватьПредставлениеКорзины(ЭтотОбъект);
	
КонецПроцедуры // ДобавитьВКорзинуСервер()

&НаКлиенте
Процедура ПослеРедактированияКорзины(Корзина, СтруктураРаздела) Экспорт
	
	Если Корзина = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	// Текущие строки корзины списка
	НайденныеСтроки = ТекущиеСтрокиКорзины(ЭтотОбъект);
	Для каждого Строка Из НайденныеСтроки Цикл
		Объект.Корзина.Удалить(Строка);	
	КонецЦикла;
	
	// Добавление строк
	Для каждого СтрокаКорзины Из Корзина Цикл
		ЗаполнитьЗначенияСвойств(Объект.Корзина.Добавить(), СтрокаКорзины);
		
	КонецЦикла;
	
	СформироватьПредставлениеКорзины(ЭтотОбъект, СтруктураРаздела);
	
КонецПроцедуры // ПослеРедактированияКорзины()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеКорзины(Форма, СтруктураРаздела = Неопределено)

	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(Форма);	
	КонецЕсли;
	
	ЭлементовКорзины = ТекущиеСтрокиКорзины(Форма, СтруктураРаздела).Количество();
	Если ЭлементовКорзины = 0 Тогда
		ТекстЗаголовка = НСтр("ru='не выбрано';en='not chosen'");		
	Иначе
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='выбрано (%1)';en='selected (%1)'"), Формат(ЭлементовКорзины, "ЧГ="));	
	КонецЕсли;
	
	Форма.Элементы.ОткрытьКорзину.Заголовок = ТекстЗаголовка;		
	
КонецПроцедуры // СформироватьПредставлениеКорзины()

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеСтрокиКорзины(Форма, СтруктураРаздела = Неопределено)
	
	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(Форма);
	
	КонецЕсли;
	
	Возврат Форма.Объект.Корзина.НайтиСтроки(Новый Структура("ИмяСписка", СтруктураРаздела.ИмяСписка));
	
КонецФункции // ТекущиеСтрокиКорзины()

&НаКлиенте
Функция ТекущиеОбъектыКорзины(СтруктураРаздела = Неопределено)

	МассивОбъектов = Новый Массив;
	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
		
	КонецЕсли;
	
	СтрокиКорзины = ТекущиеСтрокиКорзины(ЭтотОбъект, СтруктураРаздела);
	Если СтрокиКорзины.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Корзина пуста. '"), 15);
		Возврат МассивОбъектов;
	КонецЕсли;
	
	Для каждого СтрокаКорзины Из СтрокиКорзины Цикл
		МассивОбъектов.Добавить(СтрокаКорзины.Ссылка);	
		
	КонецЦикла;

	Возврат МассивОбъектов;
	
КонецФункции // ТекущиеОбъектыКорзины()

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураТекущегоРаздела(Форма, Знач ТекущийРаздел = Неопределено)
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИмяСписка");
	СтруктураРаздела.Вставить("Классификатор");   
	СтруктураРаздела.Вставить("КлассификаторПринадлежность");   
	СтруктураРаздела.Вставить("ИерархияГруппИЭлементов");
	СтруктураРаздела.Вставить("ОтборБизнесРегион");
	СтруктураРаздела.Вставить("ОтборДатаВключенияКлассификатора");
	СтруктураРаздела.Вставить("ОтборДатаВключенияКлассификатораВидСравнения");
	СтруктураРаздела.Вставить("ОтборПродажиСумма");
	СтруктураРаздела.Вставить("ОтборПродажиСуммаВидСравнения");
	СтруктураРаздела.Вставить("ОтборСписокЗначенийКлассификаторов");
			
	ИмяСписка = "Список";
	СтруктураРаздела.ИмяСписка 					 = ИмяСписка;
	СтруктураРаздела.КлассификаторПринадлежность = "Справочник.Номенклатура";
	
	СтруктураРаздела.ИерархияГруппИЭлементов = 
		Форма[ИмяСписка].КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти("ЭтоГруппа") <> Неопределено;
	
	СтруктураРаздела.ОтборДатаВключенияКлассификатораВидСравнения = "Равно";
	СтруктураРаздела.ОтборПродажиСуммаВидСравнения 				  = "Равно";
	Возврат СтруктураРаздела;
	
КонецФункции // СтруктураТекущегоРаздела()

#КонецОбласти

#КонецОбласти