

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтаФорма.ЗагрузкаНаКлиенте = Истина;
	Объект.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("ОА0000001");
	Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлИмпорта) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не выбран файл для загрузки";
		Сообщение.Поле = Объект.ФайлИмпорта;
		Сообщение.ПутьКДанным = Объект.ФайлИмпорта;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнено поле Контрагент";
		Сообщение.Поле = Объект.Контрагент;
		Сообщение.ПутьКДанным = Объект.Контрагент;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнено поле Договор контрагента";
		Сообщение.Поле = Объект.ДоговорКонтрагента;
		Сообщение.ПутьКДанным = Объект.ДоговорКонтрагента;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетПолучателя) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнено поле Счет получателя";
		Сообщение.Поле = Объект.СчетПолучателя;
		Сообщение.ПутьКДанным = Объект.СчетПолучателя;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнено поле Подразделение";
		Сообщение.Поле = Объект.Подразделение;
		Сообщение.ПутьКДанным = Объект.Подразделение;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;		
		
	Если ЭтаФорма.ЗагрузкаНаКлиенте Тогда
		Попытка
			Excel = ПолучитьCOMобъект("","Excel.Application");
		Исключение
			Сообщить("Ошибка при открытии MS Exel!");
		КонецПопытки;		
		Попытка
			Excel.workbooks.open(Объект.ФайлИмпорта,1);
		Исключение
			Сообщить("Ошибка при открытии файла!");
			Сообщить(ОписаниеОшибки());
			Excel.Quit();
		КонецПопытки;				
		
		Ном = 2;
		Лист = Excel.Sheets(1);
		ЭтаФорма.ТаблицаЗагрузки.Очистить();
		
		Пока Лист.Cells(ном,1).Value <> Неопределено Цикл
			Нстр = ЭтаФорма.ТаблицаЗагрузки.Добавить();
			Нстр.Клиент = Лист.Cells(ном,2).Value;
			Нстр.Дебитор = Лист.Cells(ном,3).Value;
			Нстр.Договор = Лист.Cells(ном,4).Value;
			Нстр.ДатаПоставки = Лист.Cells(ном,5).Value;
			Нстр.ДатаОтсрочки = Лист.Cells(ном,6).Value;
			Нстр.Сумма = Лист.Cells(ном,7).Value;
			Нстр.НомерНакладной = Формат(Число(СокрЛП(Лист.Cells(Ном,8).Value)),"ЧГ=0");
			Нстр.НомерСчета = Формат(Число(СокрЛП(Лист.Cells(Ном,9).Value)),"ЧГ=0");
			Ном = Ном + 1;
		КонецЦикла;
	
		Excel.workbooks.Close();
		Excel.Quit();
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(Объект.ФайлИмпорта);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
		ПрочитатьФайлНаСервере(АдресФайла);
	КонецЕсли;
	ЗаполнитьТЧЗаявок();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧЗаявок()
	Объект.ЗагруженныеЗначения.Очистить();
	Для Каждого Стр Из ЭтаФорма.ТаблицаЗагрузки Цикл
		ДоговорФакторинг = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер", Стр.Договор).Ссылка;			
		КлиентФакторинг = ДоговорФакторинг.Контрагент;
		Нстр = Объект.ЗагруженныеЗначения.Добавить();
		Нстр.ДатаПлатежа = Стр.ДатаОтсрочки;
		Нстр.ДоговорКонтрагента = ДоговорФакторинг;
		Нстр.Контрагент = КлиентФакторинг;
		Нстр.Заявитель = ПараметрыСеанса.ТекущийПользователь;
		Нстр.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		Нстр.Организация = Справочники.Организации.НайтиПоНаименованию(СокрЛП(Стр.Дебитор));
		Нстр.СтавкаНДС = Объект.СтавкаНДС;
		Нстр.СтатьяДДС = Объект.СтатьяДДС;
		Нстр.Сумма = Стр.Сумма;
		Нстр.СчетПолучателя = Объект.СчетПолучателя;
		Нстр.НомерНакладной = Стр.НомерНакладной;
		Нстр.НомерСчета = Стр.НомерСчета;
		Нстр.ДатаПоставки = Стр.ДатаПоставки;
	КонецЦикла;  
КонецПроцедуры

&НаСервере
Функция ПроверкаЗаявкиНаСуществование(ДатаЗаявки,ФакторингНомерСчетаФактуры, СуммаНакладной)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|	ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.АГ_Факторинг
	|	И ЗаявкаНаРасходованиеДенежныхСредств.АГ_НомерСчетаФактуры = &НомерСчетаФактуры
	|	И НЕ ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
	|	И ЗаявкаНаРасходованиеДенежныхСредств.ДатаПлатежа = &ДатаПлатежа";
	
	Запрос.УстановитьПараметр("ДатаПлатежа",ДатаЗаявки);
	Запрос.УстановитьПараметр("НомерСчетаФактуры",ФакторингНомерСчетаФактуры);
	//Запрос.УстановитьПараметр("Факторинг",Факторинг);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Сообщение = Новый СообщениеПользователю();
	
	Если Рез.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Если СуммаНакладной = рез[0].СуммаДокумента Тогда
			Сообщение.Текст = "Счета-фактуры № "+ ФакторингНомерСчетаФактуры +" на сумму "+ СуммаНакладной +" уже были загружены. " + Рез[0].Ссылка +" на сумму " + Рез[0].СуммаДокумента;
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();			
		Иначе
			Сообщение.Текст = "Счета-фактуры № "+ ФакторингНомерСчетаФактуры +" на сумму "+ СуммаНакладной +" уже были загружены. " + рез[0].Ссылка +" на сумму " + рез[0].СуммаДокумента + ". Суммы накладных различны!!!";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();						
		КонецЕсли;	
		Возврат Истина;
	КонецЕсли;	
КонецФункции	

&НаСервере
Процедура ПрочитатьФайлНаСервере(АдресФайла)
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлИмпорта) Тогда
		//Сообщить("Не выбран файл импорта!!! Импорт прерван!!!");
		Возврат;
	конецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресФайла) Тогда
		Возврат;
	КонецЕсли;
	//Если Не Факторинг И (Не СворачиватьЗаявки или КоличествоЗаявокВПакетеПриСвертке < 2) тогда
	//	Ответ = Вопрос("Не указаны параметры свертки счетов-фактур. Продолжить?", РежимДиалогаВопрос.ДаНет);
	//	Отказ = Не (Ответ = КодВозвратаДиалога.Да);
	//КонецЕсли;	
	//
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	//
	Объект.ЗагруженныеЗначения.Очистить();

	ВременныйПуть = КаталогВременныхФайлов() + "ЗагрузкаЗРДС" + Формат(ТекущаяДата()-Дата(2018,01,01), "ЧГ=0")+".xls";
	ВременныйФайл = ПолучитьИзВременногоХранилища(АдресФайла);
	ВременныйФайл.Записать(ВременныйПуть);
	
	Попытка
		Excel = ПолучитьCOMобъект("","Excel.Application");
	Исключение
		Сообщить("Беда!!!");
	КонецПопытки;
	
	Попытка
		Excel.workbooks.open(ВременныйПуть,1);
	Исключение
		Сообщить("Беда при открытии!!!");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;		
		

	//Excel = ПолучитьCOMОбъект(ВременныйПуть,);
	//Лист = Excel.Sheets(1);	
	
	
	УдалитьФайлы(ВременныйПуть);

	//
	////ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row - 1;
	//ном = 2;
	////Для ном = 2 по ВсегоСтрок Цикл
	//Пока Лист.Cells(ном,1).Value <> Неопределено Цикл
	//	Если Лист.Cells(ном,6).Value >= НачПериода и Лист.Cells(ном,6).Value <= КонПериода тогда
	//		НомДоговора = Формат(Лист.Cells(ном,4).Value, "ЧГ=");
	//		ДоговорФакторинг = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер", НомДоговора).Ссылка;
	//		КлиентФакторинг = ДоговорФакторинг.Владелец;
	//		Док = ЗаявкиНаРасходование.Добавить();
	//		док.Дата = Лист.Cells(ном,6).Value;
	//		док.ФакторингКонтрагент = КлиентФакторинг;
	//		док.ФакторингДоговорКонтрагента = ДоговорФакторинг;
	//		док.ФакторингНомерНакладной = Формат(Число(СокрЛП(Лист.Cells(ном,8).Value)),"ЧГ=0");
	//		док.ФакторингНомерСчетаФактуры = Формат(Число(СокрЛП(Лист.Cells(ном,9).Value)),"ЧГ=0");
	//		док.ФакторингДатаОкончанияОтсрочкиПоКонтракту = Лист.Cells(ном,6).Value;
	//		док.ФакторингДатаПоставки = Лист.Cells(ном,5).Value;
	//		док.ДатаРасхода = Лист.Cells(ном,6).Value;
	//		док.т_ГраничныйСрокОплаты = Лист.Cells(ном,6).Value;
	//		док.СуммаДокумента = Лист.Cells(ном,7).Value;
	//	КонецЕсли;
	//	ном = ном + 1;
	//КонецЦикла;	
	//
	//Если СворачиватьЗаявки И КоличествоЗаявокВПакетеПриСвертке > 1 тогда
	//	СвернутьЗаявкиНаРасходование();
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИмпортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогФайла.Фильтр = "Файл данных(*.xls)|*.xls";
	ДиалогФайла.Расширение = "xls";
	ЕСли ДиалогФайла.Выбрать() Тогда
		Объект.ФайлИмпорта = ДиалогФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ФайлИмпортаПриИзменении(Элемент)
	Объект.ЗагруженныеЗначения.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура ФайлИмпортаОчистка(Элемент, СтандартнаяОбработка)
	Объект.ЗагруженныеЗначения.Очистить();
КонецПроцедуры


&НаСервере
Процедура СформироватьЗаявкиНаСервере()
	ЗаявкиСозданы = Ложь;
	//ШаблонНазначенияПлатежа = Константы.КазначействоШаблонНазначенияПлатежа.Получить();
	//Если Не ЗначениеЗаполнено(ШаблонНазначенияПлатежа) Тогда
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = "Не заполнено шаблон назначение платежа, создание заявок не возможно !";
	//	Сообщение.УстановитьДанные(Объект);
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;
		
	Для Каждого Стр Из Объект.ЗагруженныеЗначения Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Контрагент) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "В строке " + Стр.НомерСтроки + " не заполнено поле Контрагент";
			Сообщение.Поле = Объект.ЗагруженныеЗначения[Стр.НомерСтроки-1].Контрагент;
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.ДоговорКонтрагента) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "В строке " + Стр.НомерСтроки + " не заполнено поле Договор контрагента";
			Сообщение.Поле = Объект.ЗагруженныеЗначения[Стр.НомерСтроки-1].ДоговорКонтрагента;
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Стр.Организация) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "В строке " + Стр.НомерСтроки + " не заполнено поле Организация";
			Сообщение.Поле = Объект.ЗагруженныеЗначения[Стр.НомерСтроки-1].Организация;
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнено поле Контрагент";
		Сообщение.Поле = Объект.Контрагент;
		Сообщение.ПутьКДанным = Объект.Контрагент;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнено поле Договор контрагента на вкладке Основные значения";
		Сообщение.Поле = Объект.ДоговорКонтрагента;
		Сообщение.ПутьКДанным = Объект.ДоговорКонтрагента;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетПолучателя) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнено поле Счет получателя на вкладке Основные значения";
		Сообщение.Поле = Объект.СчетПолучателя;
		Сообщение.ПутьКДанным = Объект.СчетПолучателя;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнено поле Подразделение на вкладке Основные значения";
		Сообщение.Поле = Объект.Подразделение;
		Сообщение.ПутьКДанным = Объект.Подразделение;
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;				
	Если НЕ ПроверкаЗаявкиНаСуществование(Стр.ДатаПлатежа,Стр.НомерСчета, Стр.Сумма) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Ндок = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		Ндок.Дата = ТекущаяДата();
		Ндок.ДатаПлатежа = Стр.ДатаПлатежа;
		Ндок.ПриоритетОплаты = Справочники.ПриоритетыОплаты.НайтиПоНаименованию("Оплата металл на согласование Закупки");
		Ндок.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
		Ндок.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;
		Ндок.ХозяйственнаяОперация = Стр.ХозяйственнаяОперация;
		Ндок.Организация = Стр.Организация;
		Ндок.Подразделение = Объект.Подразделение;
		Ндок.Контрагент = Объект.Контрагент;
		Ндок.Договор = Объект.ДоговорКонтрагента;
		Ндок.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДДС;
		Ндок.БанковскийСчетКонтрагента = Объект.СчетПолучателя;
		Ндок.СуммаДокумента = Стр.Сумма;
		Ндок.Валюта = Справочники.Валюты.НайтиПоКоду("643");
		Ндок.ЖелательнаяДатаПлатежа = Стр.ДатаПлатежа;
		Ндок.КтоЗаявил = Стр.Заявитель;
		Ндок.БанковскийСчет = Объект.БанковскийСчетОрганизации;
		Ндок.СуммаДокумента = Стр.Сумма;
		
		СтрРасшифровка = Ндок.РасшифровкаПлатежа.Добавить();
		СтрРасшифровка.Партнер = Объект.Контрагент.Партнер;
		СтрРасшифровка.СтавкаНДС = Объект.СтавкаНДС;
		СтрРасшифровка.Сумма = Стр.Сумма;
		СтрРасшифровка.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДДС;
		
		СтрокаРаспределение = Ндок.РаспределениеПоСчетам.Добавить();
		СтрокаРаспределение.БанковскийСчетКасса = Объект.БанковскийСчетОрганизации;
		СтрокаРаспределение.ДатаПлатежа = Стр.ДатаПлатежа;
		СтрокаРаспределение.Сумма = Стр.Сумма;
		
		
		

		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Объект.СтавкаНДС);
		СтрРасшифровка.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрРасшифровка.Сумма, Объект.СтавкаНДС, Истина);		
		
		Ндок.НазначениеПлатежа = "В оплату по Ген.договору 1 от 30.09.2015г. к договору "+СокрЛП(Стр.ДоговорКонтрагента.Номер)+" от "+Формат(Стр.ДоговорКонтрагента.Дата,"ДФ='dd.MM.yyyy""г.""'")+" сф № "+Формат(Стр.НомерСчета,"ЧГ=0")+" от "+Формат(Стр.ДатаПоставки,"ДФ='dd.MM.yyyy""г.""'")+" В т.ч. НДС("+СокрЛП(Объект.СтавкаНДС)+") "+Формат(СтрРасшифровка.СуммаНДС,"ЧДЦ=2; ЧГ=0");
		//Шаблон// В оплату по Ген.договору 1 от 30.09.2015г. к договору [Номер] от [Дата] сф № [НомерСчета] от [ДатаПоставки] В т.ч. НДС([СтавкаНДС]) [СуммаНДС]
		//Попытка
		//	СтрНазанчениеПлатежа = Лев(ШаблонНазначенияПлатежа, СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	ШаблонНазначенияПлатежа = Сред(ШаблонНазначенияПлатежа,СтрНайти(ШаблонНазначенияПлатежа,"["));
		//	ИмяРеквизита = Сред(ШаблонНазначенияПлатежа,(СтрНайти(ШаблонНазначенияПлатежа,"[")+1),СтрНайти(ШаблонНазначенияПлатежа,"]") - СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + СокрЛП(Стр.ДоговорКонтрагента[ИмяРеквизита]);
		//	ШаблонНазначенияПлатежа = Сред(ШаблонНазначенияПлатежа,СтрНайти(ШаблонНазначенияПлатежа,"]")+1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Лев(ШаблонНазначенияПлатежа, СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	ИмяРеквизита = Сред(ШаблонНазначенияПлатежа,(СтрНайти(ШаблонНазначенияПлатежа,"[")+1),СтрНайти(ШаблонНазначенияПлатежа,"]") - СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Формат(Стр.ДоговорКонтрагента[ИмяРеквизита],"ДФ='dd.MM.yyyy""г.""'");
		//
		//	ШаблонНазначенияПлатежа = Сред(ШаблонНазначенияПлатежа,СтрНайти(ШаблонНазначенияПлатежа,"]")+1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Лев(ШаблонНазначенияПлатежа, СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	ИмяРеквизита = Сред(ШаблонНазначенияПлатежа,(СтрНайти(ШаблонНазначенияПлатежа,"[")+1),СтрНайти(ШаблонНазначенияПлатежа,"]") - СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Формат(Стр[ИмяРеквизита],"ЧГ=0");
		//
		//	ШаблонНазначенияПлатежа = Сред(ШаблонНазначенияПлатежа,СтрНайти(ШаблонНазначенияПлатежа,"]")+1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Лев(ШаблонНазначенияПлатежа, СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	ИмяРеквизита = Сред(ШаблонНазначенияПлатежа,(СтрНайти(ШаблонНазначенияПлатежа,"[")+1),СтрНайти(ШаблонНазначенияПлатежа,"]") - СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Формат(Стр[ИмяРеквизита],"ДФ='dd.MM.yyyy""г.""'");
		//
		//	ШаблонНазначенияПлатежа = Сред(ШаблонНазначенияПлатежа,СтрНайти(ШаблонНазначенияПлатежа,"]")+1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Лев(ШаблонНазначенияПлатежа, СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	ИмяРеквизита = Сред(ШаблонНазначенияПлатежа,(СтрНайти(ШаблонНазначенияПлатежа,"[")+1),СтрНайти(ШаблонНазначенияПлатежа,"]") - СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + СокрЛП(Объект[ИмяРеквизита]);
		//
		//	ШаблонНазначенияПлатежа = Сред(ШаблонНазначенияПлатежа,СтрНайти(ШаблонНазначенияПлатежа,"]")+1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Лев(ШаблонНазначенияПлатежа, СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	ИмяРеквизита = Сред(ШаблонНазначенияПлатежа,(СтрНайти(ШаблонНазначенияПлатежа,"[")+1),СтрНайти(ШаблонНазначенияПлатежа,"]") - СтрНайти(ШаблонНазначенияПлатежа,"[")-1);
		//	СтрНазанчениеПлатежа = СтрНазанчениеПлатежа + Формат(СтрРасшифровка[ИмяРеквизита],"ЧДЦ=2; ЧГ=0");
		//	Ндок.НазначениеПлатежа = СтрНазанчениеПлатежа;
		//Исключение
		//	Ндок.НазначениеПлатежа = "Ощибка в обработке строки шаблона!";
		//КонецПопытки;
		
		//Ндок.НазначениеПлатежа = "В оплату по Ген.договору № 1 от 30.09.2015г. "+СокрЛП(Ндок.Договор.Номер)+" от "+Формат(Ндок.Договор.Дата,"ДФ='dd.MM.yyyy""г.""'")+" к договору "+СокрЛП(Стр.ДоговорКонтрагента.Номер)+" от "+Формат(Стр.ДоговорКонтрагента.Дата,"ДФ='dd.MM.yyyy""г.""'")+" сф № "+Формат(Стр.НомерСчета,"ЧГ=0")+" от "+Формат(Стр.ДатаПоставки,"ДФ='dd.MM.yyyy""г.""'")+" В т.ч. НДС("+СокрЛП(Объект.СтавкаНДС)+") "+Формат(СтрРасшифровка.СуммаНДС,"ЧДЦ=2; ЧГ=0");
		//В оплату по [Договор из соответствующего реквизита ЗРДС] к договору [значение из колонки «Договор» excel-файла] 
		//счет-фактура № [значение из колонки «Номер счет-фактуры» excel-файла] от [значение из колонки «Дата поставки» excel-файла ]. 
		//в т.ч. НДС (значение из реквизита «Ставка НДС» ЗРДС) [значение из реквизита «Сумма НДС» ЗРДС]»
		//При настройке текста Назначения платежа учесть особенности его написания в текущей системе 1С:УТ 10.3 – должно полностью совпадать вплоть 
		//до пробелов – необходимо по требованиям банка
		
		
		Ндок.АГ_Факторинг = Истина;
		Ндок.АГ_КонтрагентФакторинг = Стр.Контрагент;
		Ндок.АГ_ДоговорФакторинг = Стр.ДоговорКонтрагента;
		Ндок.АГ_ДатаПоставки = Стр.ДатаПоставки; 
		Ндок.АГ_ДатаОкончанияОтсрочки = Стр.ДатаПлатежа;
		Ндок.АГ_НомерНакладной = Стр.НомерНакладной;
		Ндок.АГ_НомерСчетаФактуры = Стр.НомерСчета;
		//Попытка
		//	Ндок.Записать(РежимЗаписиДокумента.Проведение);
		//Исключение
			Ндок.Записать(РежимЗаписиДокумента.Запись);
		//КонецПопытки;
		Стр.Заявка = Ндок.Ссылка;
		УстановитьПривилегированныйРежим(Ложь);
		ЗаявкиСозданы = Истина;
	КонецЕсли;
	КонецЦикла;
	Если ЗаявкиСозданы Тогда
		Элементы.ЗагруженныеЗначения.КоманднаяПанель.ПодчиненныеЭлементы.ЗагруженныеЗначенияОчиститьТаблицу.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СформироватьЗаявки(Команда)
	СформироватьЗаявкиНаСервере();
КонецПроцедуры


&НаСервере
Процедура УдалитьЗаявкиНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Стр Из Объект.ЗагруженныеЗначения Цикл
		Если ЗначениеЗаполнено(Стр.Заявка) Тогда
			Об = Стр.Заявка.ПолучитьОбъект();
			Об.Удалить();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Объект.ЗагруженныеЗначения.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура УдалитьЗаявки(Команда)
	УдалитьЗаявкиНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	Объект.ЗагруженныеЗначения.Очистить();
КонецПроцедуры

