#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем МенеджерВременныхТаблиц;
Перем МесяцНачисления;
Перем МесяцыРасчета;
Перем ПериодРасчета;
Перем Организация;
Перем ГоловнаяОрганизация;
Перем ВременныйРегистратор;
Перем НаборыЗаписей;
Перем НаборыЗаписейНакопляемые;
Перем МенеджерДанныхУчетаВремени;
Перем РасчетБазыНачислений;
Перем РасчетБазыУдержаний;
Перем РасчетОдногоМесяца;
Перем НастройкиУчета;

Перем ВыявленныеПоказатели;
Перем ВычеркиваемыеСтроки;
Перем ОпределяющиеПоказатели;
Перем ОтборПерерасчетовНачислений;
Перем ОтборПерерасчетовУдержаний;
Перем ДатыНачалаСобытия;
Перем ВычеркнутыеПериоды;

Перем Зарплата Экспорт;
Перем ЗарплатаМесяца;

Перем ИсключаемыйРегистратор Экспорт;
Перем ИсправленныйДокумент Экспорт;
Перем ЭтоИсправлениеТекущимПериодом Экспорт;
Перем ВызыватьИсключение Экспорт;

Перем НастройкиРасчета Экспорт;
Перем НастройкиУдержаний Экспорт;
Перем НастройкиНДФЛ Экспорт;
Перем НастройкиЗаймов Экспорт;

Перем НастройкиПересчета;
Перем ПересчетСотрудников;
Перем ПересчетФизическихЛиц;

Перем ДополнительныеСвойства Экспорт;

Перем НастройкиБухучета Экспорт;
Перем ПараметрыБухучета;
Перем БухучетВыполняемыеДействия;
Перем НастройкиОбновленияБухучета;

Перем Начисления;
Перем ВидыРасчетаНачислений;
Перем Удержания;
Перем ВидыРасчетаУдержаний;


Перем ФильтрПолученияПериодическихДанныхСотрудников;
Перем ТаблицаПолученияПериодическихДанныхСотрудников;

Перем ФильтрПолученияПериодическихДанныхФизическихЛиц;
Перем ТаблицаПолученияПериодическихДанныхФизическихЛиц;

Перем КэшРассчитываемыеОрганизациии;
Перем КэшКадроваяИсторияИнтервалы;
Перем КэшПлановыеНачисленияИнтервалы;
Перем КэшПлановыеУдержанияИнтервалы;
Перем КэшПрименениеПлановыхНачисленийИнтервалы;
Перем КэшИстоникиДанныхУчетаВремениИнтервалы;
Перем КэшЗначенияРазовыхПоказателейСотрудников;
Перем КэшЗначенияРазовыхПоказателейФизическихЛиц;
Перем КэшЗначенияПериодическихПоказателейСотрудников;
Перем КэшЗначенияПериодическихПоказателейФизическихЛиц;
Перем КэшЗначенияПоказателейПодразделенийПоСотрудникам;
Перем КэшЗначенияПоказателейОрганизацийПоСотрудникам;
Перем КэшЗначенияПериодическихПоказетелейОрганизаций;
Перем КэшПериодыДействияВремяВЧасахПоНачислениям;
Перем КэшЗначенияСтажевыхПоказателей;
Перем КэшЗначенияПоказателейПроцентСевернойНадбавки;
Перем КэшУсловияОплатыПособий;
Перем КэшЗначенияБазовыхТарифов;
Перем КэшВидыЗанятостиСотрудников;
Перем КэшСводныеДанныеПлановыхНачисленийСотрудников;
Перем КэшТерриторииСотрудников;
Перем КэшДанныеОбщихГрафиковСотрудников;
Перем КэшЗадолженностьПоУдержаниямФизическихЛиц;
Перем КэшПредельныеСуммыУдержаний;
Перем КэшРабочиеМестаУдержаний;
Перем КэшОсновныеСотрудникиФизическихЛиц;

Перем КэшРабочееВремяСотрудников;
Перем КлючиСтрокиФильтраРабочегоВремени;

Перем ЗначенияПериодическихПоказателейСотрудников;

Перем ПодраздленияСУчетомИерархииОтбор;

Перем КэшПоказателиРасчетаНачислений;
Перем КэшСвойствНачислений;
Перем КэшПоказателиНачислений;
Перем КэшОписаниеСтажевыхПоказателейНачислений;
Перем КэшСтрокиНачисленийПоТребованиям;

Перем КэшТребованияНачислений;
Перем КэшТребованияНачисленийСводно;

Перем КэшИспользуемыеПоказателиСотрудников;
Перем КэшПоказателиСотрудников;

Перем КэшТребованияУдержаний;
Перем КэшТребованияУдержанийСводно;
Перем КэшПоказателиУдержаний;
Перем КэшПоказателиФизическихЛицУдержаний;

Перем КэшДанныеТекущегоНабораНачисления;
Перем КэшСтрокиНабораНачисленияПоИдентфикаторам;

Перем КэшДанныеТекущегоНабораУдержания;

Перем ФильтрПолученияЗарегистрированногоВремени;

Перем СписокФизическихЛиц;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Инициализация

// Инициализация менеджера расчета зарплаты.
// Предназначен для служебного использования.
// Потребителям вместо него рекомендуется использовать РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета.
//
// Параметры
//	ПериодРасчета - тип СтандартныйПериод, период начисления зарплаты.
//	ОрганизацияПараметр - тип СправочникСсылка.Организации.
//
Процедура Инициализировать(ПериодРасчетаПараметр, ОрганизацияПараметр) Экспорт
	
	ПериодРасчета = ПериодРасчетаПараметр;
	МесяцНачисления = НачалоМесяца(ПериодРасчета.ДатаОкончания);
	МесяцыРасчета.Добавить(МесяцНачисления);
	Пока МесяцНачисления > ПериодРасчета.ДатаНачала Цикл
		МесяцНачисления = НачалоМесяца(МесяцНачисления - 1);
		МесяцыРасчета.Вставить(0, МесяцНачисления);
	КонецЦикла;
	
	РасчетОдногоМесяца = МесяцыРасчета.Количество() = 1;
	
	Организация = ОрганизацияПараметр; 
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	НастройкиУчета = Новый Структура(
		"ИспользоватьТерриторииУсловияТруда,
		|ИспользоватьТерритории,
		|ИспользоватьСтатьиФинансирования");
	НастройкиУчета.ИспользоватьТерриторииУсловияТруда = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
	НастройкиУчета.ИспользоватьТерритории = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация);
	НастройкиУчета.ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	
	Зарплата = Новый Структура(
		"Начисления,
		|ДоговорыПодряда,
		|Удержания,
		|НДФЛ,
		|КорректировкиВыплаты,
		|Взносы,
		|ПогашениеЗаймов");
		
	НастройкиРасчета = Новый Структура(
		"РассчитыватьНачисления,
		|РассчитыватьДоговорыПодряда,
		|РассчитыватьУдержания,
		|РассчитыватьНДФЛ, 
		|РассчитыватьКорректировкиВыплаты, 
		|РассчитыватьВзносы, 
		|РассчитыватьЗаймы,
		|ПерваяПоловинаМесяца,
		|ИсключатьРанееОплаченныеПериоды,
		|ОкончательныйРасчет,
		|РасчетЗарплаты,
		|СохранятьИсправления,
		|Сотрудники, 
		|ФизическиеЛица,
		|ИсключатьСтрокиПолностьюВытесненныхНачислений,
		|РассчитыватьНачисленияТолькоПоТекущемуДокументу,
		|РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц");

	НастройкиУдержаний = Новый Структура(
		"РассчитыватьТолькоПоТекущемуДокументу");
	
	НастройкиНДФЛ = Новый Структура(
		"Сотрудники,
		|ДатаВыплаты, 
		|ОкончательныйРасчет,
		|ДоходПолученНаТерриторииРФ");
		
	НастройкиЗаймов = Новый Структура(
		"Сотрудники, 
		|ДатаПогашения");
		
	УстановитьНастройкиРасчетаПоУмолчанию();
		
	Зарплата.Начисления = ТаблицаНачислений();	
	Зарплата.ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	Зарплата.Удержания = ТаблицаУдержаний();
	Зарплата.КорректировкиВыплаты = ТаблицаКорректировокВыплаты();
	Зарплата.ПогашениеЗаймов = ЗаймыСотрудникам.ТаблицаПогашениеЗаймов();
	Зарплата.НДФЛ = УчетНДФЛ.ТаблицаНДФЛ();
	Зарплата.Взносы = ТаблицаВзносы();
	Если Не РасчетОдногоМесяца Тогда
		Зарплата.НДФЛ.Колонки.Добавить("ПериодРассчитан", Новый ОписаниеТипов("Булево"));
		Зарплата.Взносы.Колонки.Добавить("ПериодРассчитан", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ЗарплатаМесяца = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Зарплата);
	
	ПересчетСотрудников = ТаблицаПересчетаСотрудников();
	ПересчетФизическихЛиц = ТаблицаПересчетаФизическихЛиц();
	
	ОпределяющиеПоказатели = ТаблицаОпределяющихПоказателей();
	
	ВычеркнутыеПериоды = ТаблицаВычеркнутыеПериоды();
	
	НастройкиПересчета = Новый Структура(
		"ИсточникИзменений,
		|ВыполнятьПересчет,
		|СоответствиеСтрокНачислений,
		|СоответствиеСтрокДоговоровПодряда,
		|СоответствиеСтрокУдержаний,
		|ФизическиеЛицаРасчетаВзносов,
		|ФизическиеЛицаРасчетаНДФЛ,
		|ФизическиеЛицаКорректировокВыплаты,
		|ФизическиеЛицаПогашенияЗаймов");
	НастройкиПересчета.ИсточникИзменений = ТаблицаИсточниковИзменений();
	НастройкиПересчета.ВыполнятьПересчет = Ложь;
	НастройкиПересчета.СоответствиеСтрокНачислений = Новый Соответствие;
	НастройкиПересчета.СоответствиеСтрокДоговоровПодряда = Новый Соответствие;
	НастройкиПересчета.СоответствиеСтрокУдержаний = Новый Соответствие;
	НастройкиПересчета.ФизическиеЛицаРасчетаВзносов = Новый Массив;
	НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ = Новый Массив;
	НастройкиПересчета.ФизическиеЛицаКорректировокВыплаты = Новый Массив;
	НастройкиПересчета.ФизическиеЛицаПогашенияЗаймов = Новый Массив;
	
	НастройкиБухучета = Новый Структура(
		"ПроверятьРегистрациюПроцентаЕНВД,
		|НастройкиБухучетаДокумента,
		|КоэффициентыРаспределенияДенежногоСодержания,
		|КоэффициентыСреднегоЗаработкаФССДокумента,
		|КоэффициентыСреднегоЗаработкаДокумента,
		|ПроверятьНеобходимостьПересчетаВзносов,
		|ПроверятьНеобходимостьПересчетаНДФЛ,
		|РаспределениеСохраняемогоДС,
		|СоответствиеСотрудников,
		|ДатаНачалаДляБухучета");
		
	НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД 				= Ложь;
	НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов 		= Ложь;
	НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ			= Ложь;
	НастройкиБухучета.НастройкиБухучетаДокумента 					= ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаБухучетЗарплатыПервичныхДокументов();
	НастройкиБухучета.КоэффициентыСреднегоЗаработкаДокумента 		= Новый Соответствие;
	НастройкиБухучета.КоэффициентыСреднегоЗаработкаФССДокумента 	= ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка();
	НастройкиБухучета.РаспределениеСохраняемогоДС					= Ложь; // признак того, что выполняется расчет составляющих сохраняемого ДС
	НастройкиБухучета.СоответствиеСотрудников						= Новый Соответствие; // Соответсвие "временного" и "настоящего" сотрудника при расчета составляющих сохраняемого ДС
	НастройкиБухучета.КоэффициентыРаспределенияДенежногоСодержания 	= Новый Соответствие;
	НастройкиБухучета.ДатаНачалаДляБухучета 						= Дата(0001,1,1);
	
	БухучетВыполняемыеДействия = Новый Структура("
		|ВыполнятьБухучетНачислений,
		|ВыполнятьБухучетДоговоров,
		|ВыполнятьБухучетНДФЛ,
		|ВыполнятьБухучетУдержаний,
		|ВыполнятьБухучетЗаймов,
		|ВыполнятьБухучетКорректировокВыплаты");
	
	БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Ложь;
	
	НастройкиОбновленияБухучета = Новый Структура(
		"РежимОбновленияБухучетаРасчетов,
		|ОбновитьВсеТаблицы,
		|ИменаТаблицДляОбновления,
		|Сотрудник,
		|ФизическоеЛицо,
		|ЗависимыеНачисления,
		|ПроверятьНеобходимостьПересчетаВзносов,
		|ТребуетсяПересчетВзносов,
		|ФизическиеЛицаРасчетаВзносов,
		|ПроверятьНеобходимостьПересчетаНДФЛ,
		|ТребуетсяПересчетНДФЛ,
		|ФизическиеЛицаДляПересчетаНДФЛ");
		
	НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов	= Ложь;
	НастройкиОбновленияБухучета.ОбновитьВсеТаблицы 	= Ложь;
	НастройкиОбновленияБухучета.Сотрудник 			= Неопределено;
	НастройкиОбновленияБухучета.ФизическоеЛицо 		= Неопределено;
	НастройкиОбновленияБухучета.ЗависимыеНачисления = Новый Массив;
	НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов = Ложь;
	НастройкиОбновленияБухучета.ИменаТаблицДляОбновления = "";
	НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов = Новый Массив;
	НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов = Ложь;
	НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ = Ложь;
	НастройкиОбновленияБухучета.ФизическиеЛицаДляПересчетаНДФЛ = Новый Массив;
	НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ = Ложь;
	
	ПараметрыБухучета = Новый Структура(
		"ПлательщикЕНВД, 
		|ПроцентЕНВД,
		|ИмяВТБухучетНачислений,
		|ИмяВТБухучетНачисленийПоДоговорам,
		|ИмяВТБухучетВсехНачислений");
		
	ЗаполнитьПараметрыБухучета();
	
КонецПроцедуры

// Возвращает структуру НастройкиРасчета, определяющую поведение менеджера расчета, в положение по умолчанию.
//
Процедура УстановитьНастройкиРасчетаПоУмолчанию() Экспорт
		
	НастройкиРасчета.РассчитыватьНачисления = Истина;
	НастройкиРасчета.РассчитыватьДоговорыПодряда = Ложь;
	НастройкиРасчета.РассчитыватьУдержания = Ложь;
	НастройкиРасчета.РассчитыватьНДФЛ = Ложь;
	НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Ложь;
	НастройкиРасчета.РассчитыватьВзносы = Ложь;
	НастройкиРасчета.РассчитыватьЗаймы = Ложь;
	
	НастройкиРасчета.РасчетЗарплаты = Ложь;
	НастройкиРасчета.ПерваяПоловинаМесяца = Ложь;
	НастройкиРасчета.ОкончательныйРасчет = Ложь;
	НастройкиРасчета.ИсключатьРанееОплаченныеПериоды = Истина;
	НастройкиРасчета.ИсключатьСтрокиПолностьюВытесненныхНачислений = Истина;
	НастройкиРасчета.РассчитыватьНачисленияТолькоПоТекущемуДокументу = Ложь;
	НастройкиРасчета.СохранятьИсправления = Ложь;
	НастройкиРасчета.РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц = Ложь;
	
	НастройкиРасчета.Сотрудники = Неопределено;
	НастройкиРасчета.ФизическиеЛица = Неопределено;
	
	НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = Ложь;
	
	НастройкиНДФЛ.ДоходПолученНаТерриторииРФ = Ложь;
	
КонецПроцедуры

// Устанавливает менеджер временных таблиц, в том случае если необходимо работать с уже существующими временными таблицами.
//
// Параметры
//	МенеджерВременныхТаблицПараметр - тип МенеджерВременныхТаблиц.
//
Процедура УстановитьМенеджерВременныхТаблиц(МенеджерВременныхТаблицПараметр) Экспорт
	МенеджерВременныхТаблиц = МенеджерВременныхТаблицПараметр;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНачислений

// Заполняет коллекцию Зарплата.Начисления 
//	- начислениями сотрудника за периоды, указанные в НачисленияПериоды,
//	- начислениями сотрудника (плановыми и пр.) за ПериодВыявления (если он указан).
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	НачисленияПериоды - тип ТаблицаЗначений, см. ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям,
//	ПериодВыявления - тип СтандартныйПериод, необязательный, если заполнен, 
//		то в Зарплата.Начисления будут в первую очередь включены выявленные начисления сотрудника за ПериодВыявления.
//
Процедура ЗаполнитьНачисленияСотрудникаЗаПериод(Сотрудник, НачисленияПериоды, ПериодВыявления = Неопределено) Экспорт
	ВремяИтог = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВыявлятьНачисления = ПериодВыявления <> Неопределено;
	
	Начисления = ТаблицаНачислений();
	Если ВыявлятьНачисления Тогда
		ТаблицаСотрудников = ТаблицаСотрудниковПоСотрудникуПериоду(Сотрудник, ПериодВыявления.ДатаНачала, ПериодВыявления.ДатаОкончания);
		
		ТаблицаПериодовПолученияДанных = ТаблицаСотрудников.Скопировать();
		ДополнитьТаблицуСотрудниковПериодов(НачисленияПериоды, ТаблицаПериодовПолученияДанных, "Сотрудник");
		ТаблицаПериодовПолученияДанных.ЗаполнитьЗначения(Сотрудник, "Сотрудник");
		
		УстановитьТаблицуФильтрСотрудников(ТаблицаПериодовПолученияДанных);
		
		ЗаполнитьВыявленнымиНачислениями(ТаблицаСотрудников, Начисления);
		ВычеркиватьНачисления = Истина;
	Иначе
		ТаблицаПериодовПолученияДанных = ТаблицаСотрудников();	
		ДополнитьТаблицуСотрудниковПериодов(НачисленияПериоды, ТаблицаПериодовПолученияДанных, "Сотрудник");
		ТаблицаПериодовПолученияДанных.ЗаполнитьЗначения(Сотрудник, "Сотрудник");
		
		УстановитьТаблицуФильтрСотрудников(ТаблицаПериодовПолученияДанных);
	КонецЕсли;
	
	НастройкиРасчета.РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц = Истина;
	
	Если НачисленияПериоды.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПериоды, Начисления);
		УстановитьТаблицуНачисления(Начисления);
	КонецЕсли;	
	
	ЗаполнитьНачисленияСотрудников(Начисления);	
	Если ВыявлятьНачисления Тогда
		ВычеркнутьПериодыПослеЗаполненияСведенийНачислений();
	КонецЕсли;
КонецПроцедуры

// Заполняет коллекцию Зарплата.Начисления начислениями сотрудников за периоды, указанные в НачисленияПериоды.
//
// Параметры
//	НачисленияПериоды - тип ТаблицаЗначений, см. ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям.
//
Процедура ЗаполнитьНачисленияСотрудниковЗаПериод(Сотрудники, НачисленияПериоды, ПериодВыявления = Неопределено) Экспорт
	ВыявлятьНачисления = ПериодВыявления <> Неопределено;
	
	Начисления = ТаблицаНачислений();
	ВычеркиватьНачисления = Ложь;
	Если ВыявлятьНачисления Тогда
		ТаблицаСотрудников = ТаблицаСотрудниковПоСотрудникамПериоду(Сотрудники, ПериодВыявления.ДатаНачала, ПериодВыявления.ДатаОкончания);
		
		ТаблицаПериодовПолученияДанных = ТаблицаСотрудников.Скопировать();
		ДополнитьТаблицуСотрудниковПериодов(НачисленияПериоды, ТаблицаПериодовПолученияДанных, "Сотрудник");
		
		УстановитьТаблицуФильтрСотрудников(ТаблицаПериодовПолученияДанных);
	
		ЗаполнитьВыявленнымиНачислениями(ТаблицаСотрудников, Начисления);
		ВычеркнутьНачисленияПоПериодуВыявления(Начисления, ПериодВыявления);
		
		ВычеркиватьНачисления = Истина;
	Иначе
		ТаблицаПериодовПолученияДанных = ТаблицаСотрудников();	
		ДополнитьТаблицуСотрудниковПериодов(НачисленияПериоды, ТаблицаПериодовПолученияДанных, "Сотрудник");
		
		УстановитьТаблицуФильтрСотрудников(ТаблицаПериодовПолученияДанных);
	КонецЕсли;
	
	НастройкиРасчета.РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц = Истина;
	
	Если НачисленияПериоды.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПериоды, Начисления);
		УстановитьТаблицуНачисления(Начисления);
	КонецЕсли;	
	
	ЗаполнитьНачисленияСотрудников(Начисления);
	Если ВыявлятьНачисления Тогда
		ВычеркнутьПериодыПослеЗаполненияСведенийНачислений();
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеУдержаний

// Заполняет коллекцию Зарплата.Удержания 
//	- удержаниями сотрудника за периоды, указанные в УдержанияПериоды,
//	- удержаниями сотрудника (плановыми и пр.), выявленными за период с Начало по Окончание.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Начало - тип Дата, дата начала периода выявления удержаний,
//	Окончание - тип Дата, дата окончания периода выявления удержаний,
//	УдержанияПериоды - тип ТаблицаЗначений, см. ТаблицаИсходныеДанныеУдержанияПериоды.
//
Процедура ЗаполнитьУдержанияСотрудникаЗаПериод(Сотрудник, Начало, Окончание, УдержанияПериоды = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудниковПоСотрудникуПериоду(Сотрудник, Начало, Окончание);
	ТаблицаФизическихЛиц = ТаблицаСотрудников.Скопировать();
	
	ДополнитьТаблицуСотрудниковДаннымиФизичесикхЛиц(ТаблицаФизическихЛиц);

	Если УдержанияПериоды <> Неопределено Тогда
		ДополнитьТаблицуСотрудниковДаннымиФизичесикхЛиц(УдержанияПериоды);
		ДополнитьТаблицуСотрудниковПериодов(УдержанияПериоды, ТаблицаФизическихЛиц, "ФизическоеЛицо");
	КонецЕсли;
	
	ТаблицаФизическихЛиц.Свернуть("ГоловнаяОрганизация, ФизическоеЛицо, ДатаНачала, ДатаОкончания");
	
	УстановитьТаблицуФильтрФизическихЛиц(ТаблицаФизическихЛиц);
		
	Удержания = ТаблицаУдержаний();
	ЗаполнитьВыявленнымиУдержаниями(ТаблицаФизическихЛиц, Удержания);
	
	Если УдержанияПериоды <> Неопределено Тогда
		ДобавитьУдержанияПериодыКУдержаниям(Сотрудник, УдержанияПериоды, Удержания);
	КонецЕсли;
	
	ЗаполнитьУдержанияСотрудников();
	
КонецПроцедуры

// Заполняет коллекцию Зарплата.Удержания удержаниями сотрудников (плановыми и пр.), выявленными за период с Начало по Окончание.
//
// Параметры
//	Сотрудники - тип Массив элементов типа СправочникСсылка.Сотрудники,
//	Начало - тип Дата, дата начала периода выявления удержаний,
//	Окончание - тип Дата, дата окончания периода выявления удержаний.
//
Процедура ЗаполнитьУдержанияСотрудниковЗаПериод(Сотрудники, Начало, Окончание) Экспорт
	    
	ТаблицаСотрудников = ТаблицаСотрудниковПоСотрудникамПериоду(Сотрудники, Начало, Окончание);
	ТаблицаФизическихЛиц = ТаблицаСотрудников.Скопировать();
	
	ДополнитьТаблицуСотрудниковДаннымиФизичесикхЛиц(ТаблицаФизическихЛиц);
	
	ТаблицаФизическихЛиц.Свернуть("ГоловнаяОрганизация, ФизическоеЛицо, ДатаНачала, ДатаОкончания");
	УстановитьТаблицуФильтрФизическихЛиц(ТаблицаФизическихЛиц);
	
	Удержания = ТаблицаУдержаний();
	ЗаполнитьВыявленнымиУдержаниями(ТаблицаФизическихЛиц, Удержания);
	
	ЗаполнитьУдержанияСотрудников();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументаПолностью

// Заполняет документ, выполняющий начисление зарплаты.
// Состав заполняемых коллекций определяется структурой НастройкиРасчета.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
// Для расчета полученных коллекций необходимо выполнить РассчитатьЗарплату().
//
// Параметры
//	ТаблицаСотрудников - тип ТаблицаЗначений, см. ТаблицаСотрудников()
//	Отборы - тип Структура, см. СоздатьОтборы(), необязательный
//	ТаблицаУдержаний - тип ТаблицаЗначений, см. ТаблицаСотрудников(), необязательный, 
//		если не задан - для выявления удержаний будут использованы сотрудники из ТаблицаСотрудников за период расчета.
//
Процедура ЗаполнитьНачислениеЗарплаты(ТаблицаСотрудников, Отборы = Неопределено, ТаблицаУдержаний = Неопределено, НачисленияПериоды = Неопределено) Экспорт
	
	Если НачисленияПериоды <> Неопределено Тогда
		ДополнитьТаблицуСотрудниковПериодов(НачисленияПериоды, ТаблицаСотрудников, "Сотрудник");
	КонецЕсли;
	
	Начисления = НачисленияЗарплаты(ТаблицаСотрудников, Отборы, НачисленияПериоды);
	
	ОбъединитьНачисления(Начисления);
	
	ДоговорыПодряда = ДоговорыПодряда(ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник"), Отборы);
	ОбъединитьДоговорыПодряда(ДоговорыПодряда);
	
	Если ТаблицаУдержаний = Неопределено Тогда
		ТаблицаУдержаний = ТаблицаСотрудников.Скопировать();
		ТаблицаУдержаний.ЗаполнитьЗначения(ПериодРасчета.ДатаНачала, "ДатаНачала");
		ТаблицаУдержаний.ЗаполнитьЗначения(ПериодРасчета.ДатаОкончания, "ДатаОкончания");
	КонецЕсли;
	Удержания = Удержания(ТаблицаУдержаний, Отборы);
	ОбъединитьУдержания(Удержания);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументаПолностью

// Добавляет отбор, используемый при фильтрации выявленных начислений.
// Для указанного сотрудника в указанном месяце останутся только строки с приведенными видами расчетов.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Месяц - тип Дата,
//	ВидыРасчета - тип Массив элементов типа ПланВидовРасчетаСсылка.Начисления.
//
Процедура ДобавитьОтборПерерасчетовНачислений(Сотрудник, Месяц, ВидыРасчета) Экспорт
	
	Если ОтборПерерасчетовНачислений = Неопределено Тогда
		ОтборПерерасчетовНачислений = ТаблицаОтборПерерасчетовНачислений();
	КонецЕсли;
	
	НоваяСтрока = ОтборПерерасчетовНачислений.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ПериодДействия = Месяц;
	НоваяСтрока.ВидыРасчета = ВидыРасчета;
	
КонецПроцедуры

// Добавляет отбор, используемый при фильтрации выявленных удержаний.
// Для указанного физического лица в указанном месяце останутся только строки с приведенными видами расчетов.
//
// Параметры
//	ФизическоеЛицо - тип СправочникСсылка.ФизическиеЛица,
//	Месяц - тип Дата,
//	ВидРасчета - тип Массив элементов типа ПланВидовРасчетаСсылка.Удержания,
//	ДокументОснование - тип ДокументСсылка.
//
Процедура ДобавитьОтборПерерасчетовУдержаний(ФизическоеЛицо, Месяц, ВидРасчета, ДокументОснование) Экспорт
	
	Если ОтборПерерасчетовУдержаний = Неопределено Тогда
		ОтборПерерасчетовУдержаний = ТаблицаОтборПерерасчетовУдержаний();
	КонецЕсли;
	
	НоваяСтрока = ОтборПерерасчетовУдержаний.Добавить();
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	НоваяСтрока.ПериодДействия = Месяц;
	НоваяСтрока.Удержание = ВидРасчета;
	НоваяСтрока.ДокументОснование = ДокументОснование;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетВсехКоллекций

// Рассчитывает коллекции, содержащиеся в объекте Зарплата.
// Состав рассчитываемых коллекций определяется структурой НастройкиРасчета.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
// Если предварительно использовался метод ДобавитьИсточникИзменений, 
//	то расчет будет выполняться только с учетом источников изменений.
//
Процедура РассчитатьЗарплату() Экспорт
	
	ЗаполнитьТаблицыПересчетаПоИсточникамИзменений();
	ЗаполнитьВыполняемыеДействияБухучетаПриРасчетеКоллекций();
	
	РассчитатьЗарплатуСлужебный();
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетОтдельныхКоллекций 

// Пересчитывает таблицу НДФЛ в документе начисления зарплаты и все, зависимые от НДФЛ, коллекции.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
// Требует обязательного заполнения НастройкиРасчета.Сотрудники или НастройкиРасчета.ФизическиеЛица, 
//	НДФЛ будет пересчитываться именно по перечисленным там сотрудникам (физическим лицам).
//
Процедура ПересчитатьНДФЛ() Экспорт
	
	ЗаполнитьТаблицыПересчетаПриПересчетеНДФЛ();
	ЗаполнитьВыполняемыеДействияБухучетаПриРасчетеКоллекций();
	
	УстановитьТаблицуНачисления(Зарплата.Начисления);
	УстановитьТаблицуУдержания(Зарплата.Удержания);
	
	РассчитатьЗарплатуСлужебный();
	
КонецПроцедуры

// Пересчитывает таблицу Взносы в документе начисления зарплаты и все, зависимые от взносов, коллекции.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
// Требует обязательного заполнения НастройкиРасчета.Сотрудники или НастройкиРасчета.ФизическиеЛица, 
//	взносы будут пересчитываться именно по перечисленным там сотрудникам (физическим лицам).
//
Процедура ПересчитатьВзносы() Экспорт
	
	ЗаполнитьТаблицыПересчетаПриПересчетеВзносов();
	ЗаполнитьВыполняемыеДействияБухучетаПриРасчетеКоллекций();
	
	УстановитьТаблицуНачисления(Зарплата.Начисления);
	УстановитьТаблицуУдержания(Зарплата.Удержания);
	
	РассчитатьЗарплатуСлужебный();
	
КонецПроцедуры

// Выполняет пересчет страховых взносов после изменения доли ЕНВД у начислений.
// Общая сумма исчисленных взносов не меняется, меняется только распределение взносов между ЕНВД и не ЕНВД.
// Пересчет зависимых коллекций не требуется.
//
Процедура ПересчитатьВзносыПриИзмененииДолиЕНВД(ФизическиеЛицаДляРасчетаВзносов)

	НастройкиРасчетаПрежнееЗначение = Новый Структура;
	Для каждого КлючИЗначение Из НастройкиРасчета Цикл
		НастройкиРасчетаПрежнееЗначение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	НастройкиРасчета.РассчитыватьНачисления = Ложь;
	НастройкиРасчета.РассчитыватьДоговорыПодряда = Ложь;
	НастройкиРасчета.РассчитыватьУдержания = Ложь;
	НастройкиРасчета.РассчитыватьНДФЛ = Ложь;
	НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Ложь;
	НастройкиРасчета.РассчитыватьВзносы = Истина;
	НастройкиРасчета.РассчитыватьЗаймы = Ложь;
	
	БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Ложь;
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ПересчетФизическихЛиц, ФизическиеЛицаДляРасчетаВзносов, "ФизическоеЛицо");
	Для Каждого НастройкаПересчета Из ПересчетФизическихЛиц Цикл
		НастройкаПересчета.ПересчитыватьВзносы = Истина;
	КонецЦикла;
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
		
	РассчитатьЗарплатуСлужебный();
	
	Для каждого КлючИЗначение Из НастройкиРасчетаПрежнееЗначение Цикл
		НастройкиРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

КонецПроцедуры

// Пересчитывает таблицу НДФЛ  и все, зависимые от НДФЛ, коллекции.
// Если НастройкиРасчета.СохранятьИсправления = Истина, 
//	то исправленные строки, содержащиеся в коллекциях объекта Зарплата, будут сохранены.
//
Процедура ПересчитатьНДФЛПриИзмененииДолиГранта(ФизическиеЛицаДляРасчетаНДФЛ)
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ПересчетФизическихЛиц, ФизическиеЛицаДляРасчетаНДФЛ, "ФизическоеЛицо");
	Для Каждого НастройкаПересчета Из ПересчетФизическихЛиц Цикл
		ЗаполнитьСтрокуПересчетаПоНДФЛ(НастройкаПересчета);
		НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
	КонецЦикла;
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
	НастройкиРасчетаПрежнееЗначение = Новый Структура;
	Для каждого КлючИЗначение Из НастройкиРасчета Цикл
		НастройкиРасчетаПрежнееЗначение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	НастройкиРасчета.РассчитыватьНачисления = Истина;
	НастройкиРасчета.РассчитыватьДоговорыПодряда = Истина;
	НастройкиРасчета.РассчитыватьУдержания = Истина;
	НастройкиРасчета.РассчитыватьНДФЛ = Истина;
	НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Истина;
	НастройкиРасчета.РассчитыватьВзносы = Ложь;
	НастройкиРасчета.РассчитыватьЗаймы = Ложь;
	
	БухучетВыполняемыеДействияПрежнееЗначение = Новый Структура;
	Для каждого КлючИЗначение Из БухучетВыполняемыеДействия Цикл
		БухучетВыполняемыеДействияПрежнееЗначение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Ложь;
	БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Ложь;
		
	РассчитатьЗарплатуСлужебный();
	
	Для каждого КлючИЗначение Из БухучетВыполняемыеДействияПрежнееЗначение Цикл
		БухучетВыполняемыеДействия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из НастройкиРасчетаПрежнееЗначение Цикл
		НастройкиРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетЗарплаты

// Применяется при пересчете зарплаты в документе после интерактивного изменения пользователем одной или нескольких коллекций.
// Используется для указания причины пересчета.
//
// Параметры:
//	- ИмяКоллекции - Строка, название измененной коллекции, используется один из ключей объекта Зарплата.
//	- ФизическоеЛицо - СправочникСсылка.ФизическиеЛица, физическое лицо, данные которого были изменены.
//	- Сотрудник - СправочникСсылка.Сотрудники (необязательный), сотрудник, данные которого были изменены,
//		Для коллекций, где используется сотрудник обязательный.
//	- ВидРасчета - ПланВидовРасчетаСсылка.Начисления, ПланВидовРасчетаСсылка.Удержания (необязательный), вид начисления или удержания.
//		Для коллекции удержаний указывается обязательно.
//
Процедура ДобавитьИсточникИзменений(ИмяКоллекции, ФизическоеЛицо, Сотрудник = Неопределено, ВидРасчета = Неопределено) Экспорт
	
	ИсточникИзменений = НастройкиПересчета.ИсточникИзменений.Добавить();
	ИсточникИзменений.ИмяКоллекции = ИмяКоллекции;
	ИсточникИзменений.Сотрудник = Сотрудник;
	ИсточникИзменений.ФизическоеЛицо = ФизическоеЛицо;
	ИсточникИзменений.ВидРасчета = ВидРасчета;
	
	ПроверитьИсточникИзменений(ИсточникИзменений);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнениеСтрок

// Конструктор требований заполнения сведений в строках начислений, 
// необходимых для расчета, для метода ЗаполнитьСведенияНачисленийДляРасчета.
//
// Параметры
//	ПоложениеПоУмолчанию - тип Булево, необязательный, по умолчанию Ложь.
//		Определяет положение настроек по умолчанию, если Истина все требования будут "включены".
//
Функция ТребованияЗаполненияСведенийНачисленийДляРасчета(ПоложениеПоУмолчанию = Ложь) Экспорт
	
	Требования = Новый Структура(
		"КадровыеДанные,
		|ИсточникиДанныхВремени,
		|КатегорияНачисления,
		|БазовыйПериод,
		|ПериодДействия,
		|ПериодРегистрации,
		|ВремяВЧасах");
		
	Для Каждого КлючИЗначение Из Требования Цикл
		Требования[КлючИЗначение.Ключ] = ПоложениеПоУмолчанию;
	КонецЦикла;
	
	Возврат Требования;
	
КонецФункции

// Заполняет требуемые сведения для расчета в строках начислений.
// Перечень заполняемых сведений
// - ПериодРегистрацииВремени,
// - ПериодДействия,
// - ГрафикРаботы,
// - ВремяВЧасах,
// - ВремяВЦеломЗаПериод,
// - Организация,
// - Подразделение,
// - Должность,
// - ДолжностьПоШтатномуРасписанию,
// - Категория,
// - Базовый период.
//
// Параметры
//	Начисления - таблица значений, см. ТаблицаНачислений,
//	Требования - структура, см. ТребованияЗаполненияСведенийНачисленийДляРасчета.
//
Процедура ЗаполнитьСведенияНачисленийДляРасчета(ТаблицаНачислений, Требования = Неопределено) Экспорт
	УстановитьТаблицуНачисления(ТаблицаНачислений);
	ЗаполнитьСведенияНачисленийДляРасчетаСлужебный(Требования);	
КонецПроцедуры

// Заполняет значения показателей в строках начислений.
//
// Параметры
//	Начисления - таблица значений, см. ТаблицаНачислений.
//
Процедура ЗаполнитьЗначенияПоказателейНачислений(Начисления) Экспорт
	УстановитьТаблицуНачисления(Начисления);
	ЗаполнитьЗначенияПоказателейНачисленийСлужебный();
КонецПроцедуры

// Заполняет требуемые сведения для расчета в строках удержаний.
// Перечень заполняемых сведений
//	- Сотрудник,
//	- Организация,
//	- Подразделение.
//
// Параметры
//	Удержания - таблица значений, см. ТаблицаУдержаний.
//
Процедура ЗаполнитьСведенияУдержанийДляРасчета(ТаблицаУдержания) Экспорт
	УстановитьТаблицуУдержания(ТаблицаУдержания);	
	ДополнитьФильтрСотрудниковПоТаблицеУдержаний();
	ЗаполнитьСведенияУдержанийДляРасчетаСлужебный();
КонецПроцедуры

// Заполняет значения показателей в строках удержаний.
//
// Параметры
//	Удержания - таблица значений, см. ТаблицаУдержаний.
//
Процедура ЗаполнитьЗначенияПоказателейУдержаний(ТаблицаУдержания) Экспорт
	УстановитьТаблицуУдержания(ТаблицаУдержания);	
	ДополнитьФильтрСотрудниковПоТаблицеУдержаний();
	ЗаполнитьЗначенияПоказателейУдержанийСлужебный();
КонецПроцедуры

#КонецОбласти

#Область ИзвестныеПоказатели

// Применяется в случаях, когда потребителю заранее известен один или несколько значений показателей начислений.
// Является расширением методов 
//	ЗаполнитьНачисленияСотрудникаЗаПериод
//	ЗаполнитьНачисленияСотрудниковЗаПериод
//	ДополнитьСтрокиНачислений
//	ЗаполнитьУдержанияСотрудникаЗаПериод
//	ЗаполнитьУдержанияСотрудниковЗаПериод
//
// Параметры
//	Строка - тип Строка таблицы значений, созданной ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям(),
//	Показатель - тип СправочникСсылка.ПоказателиРасчетаЗарплаты,
//	Значение - тип ОпределяемыйТип.ЗначениеПоказателяРасчетаЗарплаты.
//
Процедура ДобавитьИзвестноеЗначениеПоказателя(Строка, Показатель, Значение) Экспорт
	
	Если Строка.ИзвестныеПоказатели.Количество() = 0 Тогда
		Строка.ИзвестныеПоказатели = ТаблицаПоказателей();
	КонецЕсли;
	
	// Добавляем в удерживаемую таблицу, затем при обращении к значениям показателей объединяем с данными из ИБ.
	НоваяСтрока = Строка.ИзвестныеПоказатели.Добавить();
	НоваяСтрока.Показатель = Показатель;
	НоваяСтрока.Значение = Значение;
	
КонецПроцедуры

// Применяется при наличии в документе сведений о показателях, являющихся определяющими для начислений, 
// то есть провоцирующих появление начислений.
// Добавленное значения определяющего показателя будет учитываться при последующем вызове выявления 
// начислений наряду с другими разовыми и оперативными показателями.
// 
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Организация - тип СправочникСсылка.Организации,
//	Показатель - тип СправочникСсылка.ПоказателиРасчетаЗарплаты,
//	Значение - тип ОпределяемыйТип.ЗначениеПоказателяРасчетаЗарплаты,
//	Дата - тип Дата.
//
Процедура ДобавитьЗначениеОпределяющегоПоказателя(Сотрудник, Организация, Показатель, Значение, Дата) Экспорт
	
	НоваяСтрока = ОпределяющиеПоказатели.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Показатель = Показатель;
	НоваяСтрока.Значение = Значение;
	НоваяСтрока.Дата = Дата;
	
КонецПроцедуры

#КонецОбласти

#Область ДатаНачалаСобытия

// Применяется в случае, когда для проведения дальнейших расчетов важна дата начала события, 
// связанного с сохранением среднего заработка, определяемая в документе.
// Например, при расчете коэффициента индексации, используемого при расчете оплаты отпуска.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Дата - тип Дата, дата начала события.
//
Процедура ДобавитьДатуНачалаСобытия(Сотрудник, Дата) Экспорт
	
	Если ДатыНачалаСобытия = Неопределено Тогда
		ДатыНачалаСобытия = ТаблицаДатыНачалаСобытия();
	КонецЕсли;
	
	НоваяСтрока = ДатыНачалаСобытия.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Дата = Дата;
	
КонецПроцедуры

#КонецОбласти

#Область ДатаЗавершенияРаботы

// Применяется при расчете зарплаты, связанной с событием завершения работы.
// Учитывается, например, при уточнении периода действия начислений в целом за месяц при расчете базовых начислений.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	Дата - тип Дата, дата завершения работы.
//
Процедура ДобавитьДатуЗавершенияРаботы(Сотрудник, Дата) Экспорт
	
	ДатыЗавершенияРаботы = Неопределено;
	ДополнительныеСвойства.Свойство("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	Если ДатыЗавершенияРаботы = Неопределено Тогда
		ДатыЗавершенияРаботы = ТаблицаДатыЗавершенияРаботы();
	КонецЕсли;
	
	НоваяСтрока = ДатыЗавершенияРаботы.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Дата = Дата;
	
	ДополнительныеСвойства.Вставить("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	
КонецПроцедуры	

#КонецОбласти

#Область ВыявлениеНачислений

// Выявляет начисления, полагающиеся сотрудникам в заданном периоде.
// Включаются плановые начисления, начисления по значениям определяющих показателей и видам времени.
// Начисления не рассчитываются. Для расчета начислений следует использовать РассчитатьЗарплату().
// 
// Параметры
//	Сотрудники - тип Массив элементов типа СправочникСсылка.Сотрудники,
//	Начало - тип Дата, дата начала периода, за который будут выявлены начисления,
//	Окончание - тип Дата, дата окончания периода, за который будут выявлены начисления,
//	Отборы - тип Структура, см. СоздатьОтборы().
//
// Возвращаемое значение - тип ТаблицаЗначений, см. ТаблицаНачислений().
//
Функция НачисленияЗарплатыЗаПериод(Сотрудники, Начало, Окончание, Отборы = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = Начало;
		НоваяСтрока.ДатаОкончания = Окончание;
	КонецЦикла;
	
	Возврат НачисленияЗарплаты(ТаблицаСотрудников, Отборы);
	
КонецФункции

// Выявляет начисления, полагающиеся сотруднику в заданном периоде.
// Подробнее см. НачисленияЗарплатыЗаПериод().
//
Функция НачисленияЗарплатыСотрудникаЗаПериод(Сотрудник, Начало, Окончание, Отборы = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	НоваяСтрока = ТаблицаСотрудников.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	Возврат НачисленияЗарплаты(ТаблицаСотрудников, Отборы);
	
КонецФункции

#КонецОбласти

#Область ВыявлениеУдержаний

// Выявляет удержания, применяемые к сотрудникам в заданном периоде.
// Включаются плановые удержания и удержания по значениям определяющих показателей.
// Удержания не рассчитываются. Для расчета удержаний следует использовать РассчитатьЗарплату().
// 
// Параметры
//	Сотрудники - тип Массив элементов типа СправочникСсылка.Сотрудники,
//	Начало - тип Дата, дата начала периода, за который будут выявлены удержания,
//	Окончание - тип Дата, дата окончания периода, за который будут выявлены удержания,
//	Отборы - тип Структура, см. СоздатьОтборы().
//
// Возвращаемое значение - тип ТаблицаЗначений, см. ТаблицаУдержаний().
//
Функция УдержанияЗаПериод(Сотрудники, Начало, Окончание, Отборы = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = Начало;
		НоваяСтрока.ДатаОкончания = Окончание;
	КонецЦикла;
	
	Возврат Удержания(ТаблицаСотрудников, Отборы);
	
КонецФункции

// Выявляет удержания, применяемые к сотруднику в заданном периоде.
// Подробнее см. УдержанияЗаПериод().
//
Функция УдержанияСотрудникаЗаПериод(Сотрудник, Начало, Окончание, Отборы = Неопределено) Экспорт
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	НоваяСтрока = ТаблицаСотрудников.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	Возврат Удержания(ТаблицаСотрудников, Отборы);
	
КонецФункции

#КонецОбласти

#Область КонструкторыКоллекций

// Конструктор таблицы сотрудников, используется для заполнения параметров других методов.
//
Функция ТаблицаСотрудников() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ПериодПерерасчета", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("БезусловноСоответствуетКадровымДанным", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Вычеркивать", Новый ОписаниеТипов("Булево"));

	Возврат Таблица;
	
КонецФункции

// Конструктор структуры отборов, используется для заполнения параметров других методов.
//
Функция СоздатьОтборы() Экспорт
	
	Отбор = Новый Структура(
		"Подразделение");
		
	Возврат Отбор;
	
КонецФункции

// Конструктор таблицы исходных данных начислений, используется для заполнения параметров других методов.
//
Функция ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям() Экспорт
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	
	Начисления.Колонки.Добавить("ИзвестныеПоказатели", Новый ОписаниеТипов("ТаблицаЗначений"));

	Возврат Начисления;
	
КонецФункции

// Конструктор таблицы исходных данных удержаний, используется для заполнения параметров других методов.
//
Функция ТаблицаИсходныеДанныеУдержанияПериоды() Экспорт
	
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Удержания.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Удержания.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Удержания.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	
	Удержания.Колонки.Добавить("ИзвестныеПоказатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Удержания;
	
КонецФункции

// Конструктор таблицы начислений, используется для заполнения параметров других методов.
//
Функция ТаблицаНачислений() Экспорт
		
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаНачислений();
	
КонецФункции

// Конструктор строки таблицы начислений коллекции типа Зарплата.Начисления.
//
Функция СтрокаТаблицыНачислений() Экспорт
	Возврат Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(Зарплата.Начисления);	
КонецФункции

// Конструктор строки таблицы территорий, условий труда коллекции Зарплата.Начисления.
//
Функция СтрокаТаблицыТерриторииУсловияТруда(СтрокаНачисления) Экспорт
	
	НоваяСтрока = СтрокаНачисления.ТерриторииУсловияТруда.Добавить();
	НоваяСтрока.Показатели = ТаблицаПоказателей();
	Возврат НоваяСтрока;
	
КонецФункции

// Конструктор таблицы удержаний, используется для заполнения Зарплата.Удержания.
//
Функция ТаблицаУдержаний() Экспорт
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаУдержаний();
	
КонецФункции

// Конструктор строки таблицы начислений коллекции Зарплата.Удержания.
//
Функция СтрокаТаблицыУдержаний() Экспорт
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыУдержаний(Зарплата.Удержания);
	
КонецФункции

// Конструктор таблицы показателей, используемой в коллекциях Зарплата.Начисления, Зарплата.Удержания.
//
Функция ТаблицаПоказателей() Экспорт
		
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаПоказателей();
	
КонецФункции

// Конструктор таблицы взносы, используемой в коллекциях Зарплата.Взносы.
//
Функция ТаблицаВзносы() Экспорт
		
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаВзносы();
	
КонецФункции

#КонецОбласти

#Область ОбновлениеБухучета

// Обновляет бухучет в коллекциях строк объекта Зарплата.
// Коллекции и строки коллекций, в которых будет обновлен бухучет вычисляются на основании настроек структуры НастройкиОбновленияБухучета.
//
Процедура ОбновитьБухучетРезультатовРасчета() Экспорт

	ЗаполнитьВыполняемыеДействияПриОбновленииБухучета();
	ПодготовитьДанныеДляОбновленияБухучетаРезультатовРасчета();
	
	ЗарплатаМесяца = Зарплата;
	ВыполнитьОтражениеНачисленийВБухучете();
	ВыполнитьОтражениеНачисленийПоДоговорамВБухучете();
	
	Если НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ Тогда
		ПересчитатьНДФЛПриИзмененииДолиГранта(НастройкиОбновленияБухучета.ФизическиеЛицаДляПересчетаНДФЛ);
	ИначеЕсли (Зарплата.Начисления.Количество() > 0 Или Зарплата.ДоговорыПодряда.Количество() > 0)
		И (БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ Или БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты) Тогда
		Если НаборыЗаписей = Неопределено Тогда
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);	
		КонецЕсли;
		СформироватьДоходыНДФЛ(Зарплата.Начисления, Зарплата.ДоговорыПодряда);	
	КонецЕсли;
	
	ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете();
	ВыполнитьОтражениеУдержанийИЗаймовВБухучете();
	
	// уничтожим все временные таблицы
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов Тогда
		ПересчитатьВзносыПриИзмененииДолиЕНВД(НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов);
	КонецЕсли;

КонецПроцедуры

// Заполняет структуру НастройкиОбновленияБухучета на основании переданного параметра ИсходныеДанныеОбновленияЗависимыхТаблиц.
//		Если параметр не передан, необходимо обновить все коллекции объекта Зарплата.
//
//  Параметры:
//		ИсходныеДанныеОбновленияЗависимыхТаблиц - структура, см описание ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ОписаниеИсходныхДанныхДляОбновленияЗависимыхТаблиц.
//
Процедура ЗаполнитьНастройкиОбновленияБухучета(ИсходныеДанныеОбновленияЗависимыхТаблиц = Неопределено) Экспорт
	
	НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Не Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ИсходныеДанныеОбновленияЗависимыхТаблиц = Неопределено Тогда
		// будем обновлять бухучет всех таблиц документа
		НастройкиОбновленияБухучета.ОбновитьВсеТаблицы = Истина;
		НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов = НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов И ПараметрыБухучета.ПлательщикЕНВД;
		НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ    = НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ;
	Иначе
		// обновление бухучета зависимых таблиц
		НастройкиОбновленияБухучета.ОбновитьВсеТаблицы       = Ложь;
		НастройкиОбновленияБухучета.ИменаТаблицДляОбновления = ИсходныеДанныеОбновленияЗависимыхТаблиц.ИменаТаблицДляОбновления;
		НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов = НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов И ИсходныеДанныеОбновленияЗависимыхТаблиц.ИзмениласьДоляЕНВД;
		
		Если ЗначениеЗаполнено(ИсходныеДанныеОбновленияЗависимыхТаблиц.ВидРасчета) И ТипЗнч(ИсходныеДанныеОбновленияЗависимыхТаблиц.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			НастройкиОбновленияБухучета.ЗависимыеНачисления = ЗависимыеНачисленияСоСтратегиейБухучетаПоБазовымРасчетам(ИсходныеДанныеОбновленияЗависимыхТаблиц.ВидРасчета);
		КонецЕсли;
		
		Если  ТипЗнч(ИсходныеДанныеОбновленияЗависимыхТаблиц.Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда 
			НастройкиОбновленияБухучета.Сотрудник 	   = ИсходныеДанныеОбновленияЗависимыхТаблиц.Сотрудник;
			НастройкиОбновленияБухучета.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныеДанныеОбновленияЗависимыхТаблиц.Сотрудник, "ФизическоеЛицо"); 
		Иначе
			НастройкиОбновленияБухучета.ФизическоеЛицо = ИсходныеДанныеОбновленияЗависимыхТаблиц.Сотрудник;
		КонецЕсли;
		
		Если НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов Тогда
			НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкиОбновленияБухучета.ФизическоеЛицо);
		Иначе
			НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов = НастройкиБухучета.ПроверятьНеобходимостьПересчетаВзносов И ПараметрыБухучета.ПлательщикЕНВД;
		КонецЕсли;
		
		НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ = НастройкиБухучета.ПроверятьНеобходимостьПересчетаНДФЛ И ИсходныеДанныеОбновленияЗависимыхТаблиц.ТребуетсяПересчетНДФЛ;
		Если НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ Тогда
			НастройкиОбновленияБухучета.ФизическиеЛицаДляПересчетаНДФЛ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкиОбновленияБухучета.ФизическоеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыИнтеграцииСДругимиПодсистемами

Процедура ПриЗаполненииСведенийНачисленийДляРасчета(Начисления)
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		РеализацияРасчетДенежногоДовольствия = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");	
		РеализацияРасчетДенежногоДовольствия.ПриЗаполненииСведенийНачисленийДляРасчета(Начисления);
	КонецЕсли;		
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыявлениеНачислений

Функция РассчитываемыеОрганизациия()
	Если КэшРассчитываемыеОрганизациии <> Неопределено Тогда
		Возврат КэшРассчитываемыеОрганизациии;
	КонецЕсли;	
	
	РассчитываемыеОрганизациии = Новый Массив;
	РассчитываемыеОрганизациии.Добавить(Организация);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриВыявленииРассчитываемыхОрганизаций(РассчитываемыеОрганизациии, ДополнительныеСвойства);
	КонецЕсли;	
	КэшРассчитываемыеОрганизациии = РассчитываемыеОрганизациии;
	
	Возврат РассчитываемыеОрганизациии;
КонецФункции	

Функция НачисленияЗарплаты(ТаблицаСотрудников, Знач Отборы = Неопределено, НачисленияПериоды = Неопределено) 
	
	ИмяЗамера = "НачислениеЗарплаты.ВыявлениеНачислений";
	Замер = НачатьЗамерВремени();
	
	Начисления = ТаблицаНачислений();
	Если НачисленияПериоды <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПериоды, Начисления);
	КонецЕсли;
	
	Если Не НастройкиРасчета.РассчитыватьНачисления Тогда
		Возврат Начисления;
	КонецЕсли;
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		Возврат Начисления;
	КонецЕсли;
	
	Если Отборы = Неопределено Тогда
		Отборы = СоздатьОтборы();
	КонецЕсли;
	
	НастройкиРасчета.РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц = Истина;
	
	УстановитьТаблицуФильтрСотрудников(ТаблицаСотрудников);
	ДополнитьТаблицуСотрудниковДаннымиФизичесикхЛиц(ТаблицаСотрудников);
	
	
	ЗаполнитьВыявленнымиНачислениями(ТаблицаСотрудников, Начисления, Отборы);
	ВычеркнутьСтрокиПоОтборуПерерасчетовНачислений(Начисления);	
	
	РазбитьСтрокиНачислений();
	
	ЗаполнитьСведенияНачисленийДляРасчетаСлужебный();
	
	ВычеркнутьПериодыПослеЗаполненияСведенийНачислений();
	
	ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат Начисления;
	
КонецФункции

Процедура ЗаполнитьВыявленнымиНачислениями(ТаблицаСотрудников, Начисления, Отборы = Неопределено)
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Начисления, "Сотрудник, Начисление, ДокументОснование, ПериодДействия");
	
	Если Отборы = Неопределено Тогда
		Отборы = Новый Структура;
	КонецЕсли;
	
	Отборы.Вставить("Организация", Организация);
	
	ВычеркнутьНеСоответствующиеКадровомуОтбору(ТаблицаСотрудников, Отборы);
	                                   
	ВычеркнутьРанееОплаченныеПериоды(ТаблицаСотрудников);
	
	ТаблицаСотрудников.Сортировать("Сотрудник, ДатаНачала", Новый СравнениеЗначений);
	
	ЗаполнитьПризнакиПримененияНачислений(ТаблицаСотрудников);
	
	ДобавитьПлановыеНачисления(ТаблицаСотрудников);
	
	ДобавитьНачисленияПоВидамВремени(ТаблицаСотрудников);
	
	ДобавитьНачисленияПоОперативынмПоказателям(ТаблицаСотрудников);
	
	ДобавитьНачисленияПоЗначениямРазовыхПоказателей(ТаблицаСотрудников);
	
	ДобавитьНачисленияПоИзвестнымЗначениямОпределяющихПоказателей(ТаблицаСотрудников);
	
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьДополнительныеНачисленияЗарплаты(МенеджерВременныхТаблиц, Начисления);
		
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
КонецПроцедуры

Процедура ЗаполнитьПризнакиПримененияНачислений(СотрудникиПериоды)
	СотрудникиПериоды.Колонки.Добавить("ПрименятьПособия", Новый ОписаниеТипов("Булево"));
	СотрудникиПериоды.Колонки.Добавить("Применение", Новый ОписаниеТипов("Булево"));
	
	ПрименениеПлановыхНачислений = ПрименениеПлановыхНачисленийСлужебный();
	
	РазбитьТаблицуПоИнтервалам(СотрудникиПериоды, ПрименениеПлановыхНачислений, "Сотрудник", "Применение", Новый Структура("Применение", Истина)); 
	
	СотрудникиПериоды.Колонки.Применение.Имя = "ПрименятьПлановыеНачислений"; 
	
	ПрименятьПособия = ПерерасчетЗарплаты.ПерерассчитыватьПособия(Организация);
	Для Каждого СтрокаТаблицыПериодов Из СотрудникиПериоды Цикл
		СтрокаТаблицыПериодов.ПрименятьПособия = ПрименятьПособия Или Не СтрокаТаблицыПериодов.ПериодПерерасчета;
	КонецЦикла;	                                            
КонецПроцедуры	

Процедура ДобавитьПлановыеНачисления(СотрудникиПериоды)	
	ПлановыеНачисления = ПлановыеНачисления();
	
	ДобавитьНачисленияСотрудников(СотрудникиПериоды, ПлановыеНачисления, "ПлановыеНачисления");
КонецПроцедуры

Процедура ДобавитьНачисленияПоЗначениямРазовыхПоказателей(СотрудникиПериоды)
	ЗначенияРазовыхПоказателей = ЗначенияРазовыхПоказателейСотрудников();
	
	Если ЗначенияРазовыхПоказателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоказателей = ЗначенияРазовыхПоказателей.ВыгрузитьКолонку("Показатель");
	ОтборПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборПоказателей);
	
	НачисленияПоПоказателям = НачисленияДобавляемыеПоПоказателям(ОтборПоказателей);
	НачисленияПоПоказателям.Индексы.Добавить("Показатель");
	
	ДобавляемыеНачисления = НовыйТаблицаДобовляемыхНачислений();
	
	СтруктураПоиска = Новый Структура("Показатель");
	
	Для Каждого СтрокаТаблицыПоказателей Из ЗначенияРазовыхПоказателей Цикл
		СтруктураПоиска.Показатель = СтрокаТаблицыПоказателей.Показатель;
		НайденныеНачисления = НачисленияПоПоказателям.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекущееНачисление Из НайденныеНачисления Цикл
			СтрокаДобавляемыхНачислений = ДобавляемыеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхНачислений, СтрокаТаблицыПоказателей);
			СтрокаДобавляемыхНачислений.Начисление = ТекущееНачисление.Начисление;
			СтрокаДобавляемыхНачислений.Используется = Истина;
			СтрокаДобавляемыхНачислений.ДатаНачала = НачалоМесяца(СтрокаТаблицыПоказателей.ПериодДействия);
			СтрокаДобавляемыхНачислений.ДатаОкончания = КонецМесяца(СтрокаТаблицыПоказателей.ПериодДействия);
			СтрокаДобавляемыхНачислений.Организация = СтрокаТаблицыПоказателей.Организация;
		КонецЦикла;
	КонецЦикла;	
	
	Колонки = ОбщегоНазначения.ВыгрузитьКолонку(ДобавляемыеНачисления.Колонки, "Имя");
	ДобавляемыеНачисления.Свернуть(СтрСоединить(Колонки, ","));
	ДобавляемыеНачисления.Сортировать("Сотрудник, Начисление, ДокументОснование, ДатаНачала", Новый СравнениеЗначений);
	
	ДобавитьНачисленияСотрудников(СотрудникиПериоды, ДобавляемыеНачисления, "ЗарегистрированныеПоказатели");	
КонецПроцедуры

Процедура ДобавитьНачисленияПоОперативынмПоказателям(СотрудникиПериоды)
	Запрос = ЗапросВыяленияОперативныхПоказателейСотрудников();
	УстановитьПривилегированныйРежим(Истина);
	ЗарегистрированныеПоказатели = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтборПоказателей = ЗарегистрированныеПоказатели.ВыгрузитьКолонку("Показатель");
	ОтборПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборПоказателей);
	
	НачисленияПоПоказателям = НачисленияДобавляемыеПоПоказателям(ОтборПоказателей);
	НачисленияПоПоказателям.Индексы.Добавить("Показатель");
	
	ДобавляемыеНачисления = НовыйТаблицаДобовляемыхНачислений();
	
	СтруктураПоиска = Новый Структура("Показатель");
	
	Для Каждого СтрокаТаблицыПоказателей Из ЗарегистрированныеПоказатели Цикл
		СтруктураПоиска.Показатель = СтрокаТаблицыПоказателей.Показатель;
		НайденныеНачисления = НачисленияПоПоказателям.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекущееНачисление Из НайденныеНачисления Цикл
			СтрокаДобавляемыхНачислений = ДобавляемыеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхНачислений, СтрокаТаблицыПоказателей);
			СтрокаДобавляемыхНачислений.Начисление = ТекущееНачисление.Начисление;
			СтрокаДобавляемыхНачислений.Используется = Истина;
		КонецЦикла;
	КонецЦикла;	
	
	Колонки = ОбщегоНазначения.ВыгрузитьКолонку(ДобавляемыеНачисления.Колонки, "Имя");
	ДобавляемыеНачисления.Свернуть(СтрСоединить(Колонки, ","));
	ДобавляемыеНачисления.Сортировать("Сотрудник, Начисление, ДокументОснование, ДатаНачала", Новый СравнениеЗначений);
	
	ДобавитьНачисленияСотрудников(СотрудникиПериоды, ДобавляемыеНачисления, "ЗарегистрированныеПоказатели");
	
КонецПроцедуры	

Функция ЗапросВыяленияОперативныхПоказателейСотрудников()
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных показателей.';
								|en = 'The filter of indicator data receipt is not initialized.'") ;
	КонецЕсли;
	
	ОрганизацииОтбор = РассчитываемыеОрганизациия();
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ОперативныеПоказателиДляВыявленияНачислений");
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеПакета.Параметры.Вставить("ОрганизацииОтбор", ОрганизацииОтбор);
	
	ШаблонТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ШаблонСотрудник КАК Сотрудник,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания,
	|	ПоказателиРасчета.Показатель КАК Показатель
	|ИЗ
	|	ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперативныеПоказателиДляВыявленияНачислений КАК ПоказателиРасчета
	|		ПО (ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
	|			ГДЕ
	|				ЗначенияПоказателей.Сотрудник = &Сотрудник_
	|				И ЗначенияПоказателей.Организация В (&ОрганизацииОтбор)
	|				И ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель
	|				И ЗначенияПоказателей.Период МЕЖДУ &ФильтрДатаНачалаПриведенная_ И &ФильтрДатаОкончанияПриведенная_
	|				И ВЫБОР
	|					КОГДА ПоказателиРасчета.ПолучатьВЦеломЗаМесяц
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЗначенияПоказателей.Период МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_
	|				КОНЕЦ))
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаНачала,
	|	ДатаОкончания";
		
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстЗапроса);	
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("СотрудникиПериоды", "ПоказателиРасчета");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса,
		"",
		Истина);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	ФильтрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	
	ФильтрДатаНачалаПриведенная.Кратность = "МЕСЯЦ";
	ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
	ФильтрДатаОкончанияПриведенная.Кратность = "МЕСЯЦ";
	ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	
	ВыражениеПоляСотрудник = ЗарплатаКадрыПериодическиеРегистры.ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, "Сотрудник");
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&Сотрудник_", ВыражениеПоляСотрудник);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляСотрудник, "Сотрудник");
	
	ВыражениеПоляДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаНачала, "ДатаНачала");
	
	ВыражениеПоляДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаОкончания, "ДатаОкончания");
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
КонецФункции	

Процедура ДобавитьНачисленияПоВидамВремени(СотрудникиПериоды)
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	
	ИсточникиДанныхУчетаВремени = ИсточникиДанныхУчетаВремени();
	
	ПериодыВыявлениеВыстреливающихНачислений = СотрудникиПериоды.Скопировать(, "Сотрудник, ДатаНачала, ДатаОкончания");
	ПериодыВыявлениеВыстреливающихНачислений.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ПериодыВыявлениеВыстреливающихНачислений.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ПериодыВыявлениеВыстреливающихНачислений.Колонки.Добавить("ИсточникДанныхФактическогоВремени", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники"));
	ПериодыВыявлениеВыстреливающихНачислений.Колонки.Добавить("ПериодРегистрацииФактическогоВремени", Новый ОписаниеТипов("Дата"));	
	
	РазбитьТаблицуПоИнтервалам(
		ПериодыВыявлениеВыстреливающихНачислений, 
		ИсточникиДанныхУчетаВремени, 
		"Сотрудник", 
		"Месяц, ОбщийГрафик, ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени");
		
	УникальныеИсточникиДанных = КоллекцииБЗК.СгруппироватьТаблицу(ПериодыВыявлениеВыстреливающихНачислений, "ОбщийГрафик, ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, Месяц", "МИНИМУМ(ДатаНачала), МАКСИМУМ(ДатаОкончания)");
	
	ОписаниеТаблицыВычтреливающихВидовВремени = МенеджерУчетаВремени.ОписаниеТаблицыВыявляемыхВидовВремени("РегистрСведений.ВидыВремениДляВыявленияНачислений");
	ЗарегистрированныеВидыВремени = МенеджерУчетаВремени.ЗарегистрированныеВидыУчетаВремени(УникальныеИсточникиДанных, ОписаниеТаблицыВычтреливающихВидовВремени); 
	
	ВидыВремениОтбор = ЗарегистрированныеВидыВремени.ВыгрузитьКолонку("ВидВремени");
	ВидыВремениОтбор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыВремениОтбор);
	
	ВыстреливающиеНачисления = НачисленияДобавляемыеПоВидамВремени(ВидыВремениОтбор);
	ВыстреливающиеНачисления.Индексы.Добавить("ВидВремени, ОпределяющийЗаПраздничныеДни");
	
	ОтборВытесняемыхНачислений = ВыстреливающиеНачисления.ВыгрузитьКолонку("Начисление");
	ОтборВытесняемыхНачислений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборВытесняемыхНачислений);
	
	ВытесняющиеНачисления = ВытесняющиеНачисления(ОтборВытесняемыхНачислений);
	
	НачисленияПоИсточникамДанных = Новый ТаблицаЗначений;
	НачисленияПоИсточникамДанных.Колонки.Добавить("ИсточникДанныхФактическогоВремени", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ПериодРегистрацииФактическогоВремени", Новый ОписаниеТипов("Дата"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	НачисленияДляУточненияПериодов = НачисленияПоИсточникамДанных.СкопироватьКолонки();                 	
	ЗарегистрированныеВидыВремени.Колонки.УчитыватьТолькоПраздники.Имя = "ОпределяющийЗаПраздничныеДни"; 
	
	СтруктураПоиска = Новый Структура("ВидВремени, ОпределяющийЗаПраздничныеДни");
	Для Каждого СтрокаПоВидуВремени Из ЗарегистрированныеВидыВремени Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоВидуВремени);
		СтрокиНачислений = ВыстреливающиеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаПоНачислению Из СтрокиНачислений Цикл
			Если ВытесняющиеНачисления.Найти(СтрокаПоНачислению.Начисление) <> Неопределено Тогда
				СтрокаРезультирующейТаблицы = НачисленияДляУточненияПериодов.Добавить();
			Иначе
				СтрокаРезультирующейТаблицы = НачисленияПоИсточникамДанных.Добавить();
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(СтрокаРезультирующейТаблицы, СтрокаПоВидуВремени);
			СтрокаРезультирующейТаблицы.Начисление = СтрокаПоНачислению.Начисление;	
		КонецЦикла;
	КонецЦикла;	
	
	НачисленияПоИсточникамДанных.Свернуть("ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик, Месяц, ДатаНачала, ДатаОкончания, Начисление");
	НачисленияДляУточненияПериодов.Свернуть("ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик, Месяц, ДатаНачала, ДатаОкончания, Начисление");
		
	Если НачисленияДляУточненияПериодов.Количество() > 0 Тогда
		НачисленияДляУточненияПериодов.Колонки.Начисление.Имя = "КлючНабораВидовВремени";
		
		ОписаниеТаблицыНаборовВидовВремени = МенеджерДанныхУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
		ОписаниеТаблицыНаборовВидовВремени.ИмяТаблицы = "ПланВидовРасчета.Начисления.ВидыВремени";
		ОписаниеТаблицыНаборовВидовВремени.ИмяПоляКлюч = "Ссылка";
		ОписаниеТаблицыНаборовВидовВремени.ИмяПоляВидВремени = "ВидВремени";
		ОписаниеТаблицыНаборовВидовВремени.ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни";
		
		ПериодДействияНачислений = МенеджерДанныхУчетаВремени.ПериодыДействияНаборовВидовВремени(НачисленияДляУточненияПериодов, ОписаниеТаблицыНаборовВидовВремени);
		ПериодДействияНачислений.Колонки.КлючНабораВидовВремени.Имя = "Начисление";
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПериодДействияНачислений, НачисленияПоИсточникамДанных);
	КонецЕсли;
	
	НачисленияСотрудников = НовыйТаблицаДобовляемыхНачислений();	
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НачисленияПоИсточникамДанных, "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик"); 
	СтруктураПоиска = Новый Структура("ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик");
	Для Каждого СтрокаПоСотруднику Из ПериодыВыявлениеВыстреливающихНачислений Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоСотруднику);
		НачисленияПоИсточнику = НачисленияПоИсточникамДанных.НайтиСтроки(СтруктураПоиска);
		Для Каждого ДобавляемоеНачисление Из НачисленияПоИсточнику Цикл
			Если (ОбщегоНазначенияБЗК.ДатаВИнтервале(ДобавляемоеНачисление.ДатаНачала, СтрокаПоСотруднику.ДатаНачала, СтрокаПоСотруднику.ДатаОкончания)
				Или ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаПоСотруднику.ДатаНачала, ДобавляемоеНачисление.ДатаНачала, ДобавляемоеНачисление.ДатаОкончания)) Тогда
				
				СтрокаРезультирующейТаблицы = НачисленияСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультирующейТаблицы, ДобавляемоеНачисление);
				СтрокаРезультирующейТаблицы.Сотрудник = СтрокаПоСотруднику.Сотрудник;
				СтрокаРезультирующейТаблицы.ДатаНачала = Макс(СтрокаПоСотруднику.ДатаНачала, ДобавляемоеНачисление.ДатаНачала);
				СтрокаРезультирующейТаблицы.ДатаОкончания = Мин(СтрокаПоСотруднику.ДатаОкончания, ДобавляемоеНачисление.ДатаОкончания);
	
				СтрокаРезультирующейТаблицы.Используется = Истина;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	НачисленияСотрудников.Сортировать("Сотрудник, Начисление, ДокументОснование, ДатаНачала", Новый СравнениеЗначений);
	
	ДобавитьНачисленияСотрудников(СотрудникиПериоды, НачисленияСотрудников, "ЗарегистрированныеВидыВремени");	
КонецПроцедуры

Процедура ДобавитьНачисленияПоИзвестнымЗначениямОпределяющихПоказателей(СотрудникиПериоды)
	
	Если ОпределяющиеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоказателей = ОпределяющиеПоказатели.ВыгрузитьКолонку("Показатель");
	ОтборПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборПоказателей);
	
	НачисленияПоПоказателям = НачисленияДобавляемыеПоПоказателям(ОтборПоказателей);
	НачисленияПоПоказателям.Индексы.Добавить("Показатель");
	
	ДобавляемыеНачисления = НовыйТаблицаДобовляемыхНачислений();
	
	СтруктураПоиска = Новый Структура("Показатель");
	
	Для Каждого СтрокаТаблицыПоказателей Из ОпределяющиеПоказатели Цикл
		СтруктураПоиска.Показатель = СтрокаТаблицыПоказателей.Показатель;
		НайденныеНачисления = НачисленияПоПоказателям.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекущееНачисление Из НайденныеНачисления Цикл
			СтрокаДобавляемыхНачислений = ДобавляемыеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхНачислений, СтрокаТаблицыПоказателей);
			СтрокаДобавляемыхНачислений.Начисление = ТекущееНачисление.Начисление;
			СтрокаДобавляемыхНачислений.Используется = Истина;
			СтрокаДобавляемыхНачислений.ДатаНачала = НачалоМесяца(СтрокаТаблицыПоказателей.Дата);
			СтрокаДобавляемыхНачислений.ДатаОкончания = КонецМесяца(СтрокаТаблицыПоказателей.Дата);
		КонецЦикла;
	КонецЦикла;	
	
	Колонки = ОбщегоНазначения.ВыгрузитьКолонку(ДобавляемыеНачисления.Колонки, "Имя");
	ДобавляемыеНачисления.Свернуть(СтрСоединить(Колонки, ","));
	ДобавляемыеНачисления.Сортировать("Сотрудник, Начисление, ДокументОснование, ДатаНачала", Новый СравнениеЗначений);
	
	ДобавитьНачисленияСотрудников(СотрудникиПериоды, ДобавляемыеНачисления, "ЗарегистрированныеПоказатели");		
КонецПроцедуры

Процедура ДобавитьНачисленияСотрудников(СотрудникиПериоды, ДобавляемыеНачисления, ИсточникНачислений)	
	КатегорииПособий = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком());
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ДобавляемыеНачисления, "Начисление");
	СвойстваНачислений = СвойстваНачислений(ВидыРасчета, "МесяцыНачисления");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДобавляемыеНачисления, "Сотрудник, Используется");
	ОтборНачислений = Новый Структура("Сотрудник, Используется");
	
	ОтборНачислений.Используется = Истина;
	
	ТекущийСотрудник = Неопределено;
	Для Каждого СтрокаПериода Из СотрудникиПериоды Цикл
		Если ТекущийСотрудник <> СтрокаПериода.Сотрудник Тогда
			
			ОтборНачислений.Сотрудник = СтрокаПериода.Сотрудник;
				                                                 
			СтрокиНачислений = ДобавляемыеНачисления.НайтиСтроки(ОтборНачислений);
			
			ТекущийСотрудник = СтрокаПериода.Сотрудник;
		КонецЕсли;	
		
		Для Каждого СтрокаДобавляемыхНачислений Из СтрокиНачислений Цикл
			Если СтрокаДобавляемыхНачислений.Используется 
				И (ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаДобавляемыхНачислений.ДатаНачала, СтрокаПериода.ДатаНачала, СтрокаПериода.ДатаОкончания)
				Или ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаПериода.ДатаНачала, СтрокаДобавляемыхНачислений.ДатаНачала, СтрокаДобавляемыхНачислений.ДатаОкончания)) Тогда 
				
				ДатаНачала = Макс(СтрокаПериода.ДатаНачала, СтрокаДобавляемыхНачислений.ДатаНачала);
				ДатаОкончания = Мин(СтрокаПериода.ДатаОкончания, СтрокаДобавляемыхНачислений.ДатаОкончания);
				
				ДобавитьСтрокуВыявленныхНачислений(ИсточникНачислений, СтрокаПериода, СтрокаДобавляемыхНачислений, СвойстваНачислений, КатегорииПособий, НастройкиРасчета.ПерваяПоловинаМесяца);	
			КонецЕсли;	
		КонецЦикла;			
	КонецЦикла;		
КонецПроцедуры

Процедура ДобавитьСтрокуВыявленныхНачислений(ИсточникНачислений, СвойстваПериодаВыявления, СтрокаДобавляемыхНачислений, СвойстваНачислений, КатегорииПособий, ПерваяПоловинаМесяца, РазбиениеНачислений = Неопределено)
	Если ИсточникНачислений = "ПлановыеНачисления" Тогда
		ДобавитьСтрокуПлановыхНачислений(СвойстваПериодаВыявления, СтрокаДобавляемыхНачислений, СвойстваНачислений, КатегорииПособий, НастройкиРасчета.ПерваяПоловинаМесяца);
	ИначеЕсли ИсточникНачислений = "ЗарегистрированныеВидыВремени" Тогда
		ДобавитьСтрокуНачисленийПоВидамВремени(СвойстваПериодаВыявления, СтрокаДобавляемыхНачислений, СвойстваНачислений, НастройкиРасчета.ПерваяПоловинаМесяца);
	ИначеЕсли ИсточникНачислений = "ЗарегистрированныеПоказатели" Тогда	
		ДобавитьСтрокуНачисленийПоПоказателям(СвойстваПериодаВыявления, СтрокаДобавляемыхНачислений, СвойстваНачислений, ПерваяПоловинаМесяца);
	КонецЕсли;		
КонецПроцедуры	
	
Процедура ДобавитьСтрокуПлановыхНачислений(СвойстваПериодаВыявления, СтрокаПлановыхНачислений, СвойстваНачислений, КатегорииПособий, ПерваяПоловинаМесяца, РазбиениеНачислений = Неопределено)	
	СвойстваТекущегоНачисления = СвойстваНачислений[СтрокаПлановыхНачислений.Начисление];
	
	Если СвойстваТекущегоНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПерваяПоловинаМесяца И Не СвойстваТекущегоНачисления.НачисляетсяПриРасчетеПервойПоловиныМесяца Тогда
		Возврат;
	КонецЕсли;	
	
	ДобавлятьНачисление = Ложь;	
	Если КатегорииПособий[СвойстваТекущегоНачисления.КатегорияНачисленияИлиНеоплаченногоВремени] = Истина Тогда
		Если СвойстваПериодаВыявления.ПрименятьПособия Тогда
			ДобавлятьНачисление = Истина;	
		КонецЕсли;
	ИначеЕсли СвойстваПериодаВыявления.ПрименятьПлановыеНачислений Тогда
		Если СвойстваТекущегоНачисления.МесяцыВыполнения = Неопределено
			Или СвойстваТекущегоНачисления.МесяцыВыполнения[Месяц(СвойстваПериодаВыявления.ДатаНачала)] = Истина Тогда 
			
			ДобавлятьНачисление = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если ДобавлятьНачисление Тогда
		ДатаНачала = Макс(СвойстваПериодаВыявления.ДатаНачала, СтрокаПлановыхНачислений.ДатаНачала);
		ДатаОкончания = Мин(СвойстваПериодаВыявления.ДатаОкончания, СтрокаПлановыхНачислений.ДатаОкончания);
		
		РабиватьНачисление = Не СвойстваТекущегоНачисления.НачисляетсяВЦеломЗаМесяц
			Или СвойстваТекущегоНачисления.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц;
		
		РассчитываемыеОрганизациия  = РассчитываемыеОрганизациия();		
		Если РассчитываемыеОрганизациия.Найти(СтрокаПлановыхНачислений.ГоловнаяОрганизация) = Неопределено Тогда
			ОрганизацияНачисления = Организация;
		Иначе
			ОрганизацияНачисления = СтрокаПлановыхНачислений.ГоловнаяОрганизация;
		КонецЕсли;	
		
		ДобавитьСтрокуНачислений(СтрокаПлановыхНачислений, ДатаНачала, ДатаОкончания, РабиватьНачисление, ОрганизацияНачисления, СвойстваПериодаВыявления, СвойстваТекущегоНачисления);
	КонецЕсли;	
КонецПроцедуры	

Процедура ДобавитьСтрокуНачисленийПоВидамВремени(СвойстваПериодаВыявления, СтрокаДобавляемыхНачислений, СвойстваНачислений, ПерваяПоловинаМесяца)
	СвойстваТекущегоНачисления = СвойстваНачислений[СтрокаДобавляемыхНачислений.Начисление];
	
	Если СвойстваТекущегоНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПерваяПоловинаМесяца И Не СвойстваТекущегоНачисления.НачисляетсяПриРасчетеПервойПоловиныМесяца Тогда
		Возврат;
	КонецЕсли;	
	
	Если СвойстваПериодаВыявления.ПрименятьПлановыеНачислений Тогда
		ДатаНачала = Макс(СвойстваПериодаВыявления.ДатаНачала, СтрокаДобавляемыхНачислений.ДатаНачала);
		ДатаОкончания = Мин(СвойстваПериодаВыявления.ДатаОкончания, СтрокаДобавляемыхНачислений.ДатаОкончания);
			
		РабиватьНачисление = Не СвойстваТекущегоНачисления.НачисляетсяВЦеломЗаМесяц;
		
		РассчитываемыеОрганизациия = РассчитываемыеОрганизациия();
		Для Каждого ОрганизацияНачисления Из РассчитываемыеОрганизациия Цикл
			ДобавитьСтрокуНачислений(СтрокаДобавляемыхНачислений, ДатаНачала, ДатаОкончания, РабиватьНачисление, ОрганизацияНачисления, СвойстваПериодаВыявления, СвойстваТекущегоНачисления);
		КонецЦикла;	
	КонецЕсли;		
КонецПроцедуры	

Процедура ДобавитьСтрокуНачисленийПоПоказателям(СвойстваПериодаВыявления, СтрокаДобавляемыхНачислений, СвойстваНачислений, ПерваяПоловинаМесяца)
	СвойстваТекущегоНачисления = СвойстваНачислений[СтрокаДобавляемыхНачислений.Начисление];
	
	Если СвойстваТекущегоНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПерваяПоловинаМесяца И Не СвойстваТекущегоНачисления.НачисляетсяПриРасчетеПервойПоловиныМесяца Тогда
		Возврат;
	КонецЕсли;	
	
	ДатаНачала = Макс(СвойстваПериодаВыявления.ДатаНачала, СтрокаДобавляемыхНачислений.ДатаНачала);
	ДатаОкончания = Мин(СвойстваПериодаВыявления.ДатаОкончания, СтрокаДобавляемыхНачислений.ДатаОкончания);
		
	РабиватьНачисление = СвойстваТекущегоНачисления.Разбивать
		Или СвойстваТекущегоНачисления.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц;
	
	Если Не ЗначениеЗаполнено(СтрокаДобавляемыхНачислений.Организация) Тогда
		РассчитываемыеОрганизациия = РассчитываемыеОрганизациия();
		Для Каждого ОрганизацияНачисления Из РассчитываемыеОрганизациия Цикл
			ДобавитьСтрокуНачислений(СтрокаДобавляемыхНачислений, ДатаНачала, ДатаОкончания, РабиватьНачисление, ОрганизацияНачисления, СвойстваПериодаВыявления, СвойстваТекущегоНачисления);	
		КонецЦикла;
	Иначе
		ДобавитьСтрокуНачислений(СтрокаДобавляемыхНачислений, ДатаНачала, ДатаОкончания, РабиватьНачисление, СтрокаДобавляемыхНачислений.Организация, СвойстваПериодаВыявления, СвойстваТекущегоНачисления);
	КонецЕсли;	
КонецПроцедуры	

Процедура ДобавитьСтрокуНачислений(ШаблонЗаполненияСвойств, ДатаНачала, ДатаОкончания, РазбиватьСтроку, ОрганизацияНачисления = Неопределено,  СвойстваПериодаВыявления, СвойстваНачисления)
	
	Вычеркнуть = СвойстваПериодаВыявления.Вычеркивать;
	Если Вычеркнуть И Не СвойстваНачисления.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РазбиватьСтроку Тогда	
		ОтборСтрок = Новый Структура(
			"Сотрудник, 
			|ПериодДействия");
		ОтборСтрок.Сотрудник = ШаблонЗаполненияСвойств.Сотрудник;
		ОтборСтрок.ПериодДействия = НачалоМесяца(ДатаОкончания);
		НайденныеСтроки = ВычеркнутыеПериоды.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			// Не добавляем строку в целом за месяц, если в этом месяце по сотруднику последний период вычеркнут (из-за отбора).
			Возврат;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Сотрудник, Начисление, ДокументОснование, ПериодДействия");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ШаблонЗаполненияСвойств);
		СтруктураПоиска.ПериодДействия = НачалоМесяца(ДатаОкончания);
		
		НайденныеСтроки = Начисления.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ДатаНачала = Мин(НайденныеСтроки[0].ДатаНачала, ДатаНачала);
			НайденныеСтроки[0].ДатаОкончания = Макс(НайденныеСтроки[0].ДатаОкончания, ДатаОкончания);
			Возврат;
		КонецЕсли;			
	КонецЕсли;	                              
	
	СтрокаНачисления = Начисления.Добавить();
	СтрокаНачисления.ПериодДействия = НачалоМесяца(ДатаОкончания);
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, ШаблонЗаполненияСвойств);
	СтрокаНачисления.ДатаНачала = ДатаНачала;
	СтрокаНачисления.ДатаОкончания = ДатаОкончания;	
	СтрокаНачисления.Вычеркнуть = Вычеркнуть;
	
	Если ОрганизацияНачисления <> Неопределено Тогда
		СтрокаНачисления.Организация = ОрганизацияНачисления;
	КонецЕсли;	
КонецПроцедуры	

Процедура ВычеркнутьНачисленияПоПериодуВыявления(Начисления, ПериодВыявления)
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		Если Не ДатаМежду(Строка.ДатаНачала, ПериодВыявления.ДатаНачала, ПериодВыявления.ДатаОкончания) 
			Или Не ДатаМежду(Строка.ДатаОкончания, ПериодВыявления.ДатаНачала, ПериодВыявления.ДатаОкончания) Тогда
			УдаляемыеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Начисления.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычеркнутьРанееОплаченныеПериоды(СотрудникиПериоды)
	Если Не НастройкиРасчета.ИсключатьРанееОплаченныеПериоды Тогда
		Возврат;
	КонецЕсли;	
			
	РанееОплаченныеПериоды = РанееОплаченныеПериоды();
	
	Если РанееОплаченныеПериоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РанееОплаченныеПериоды.Сортировать("Сотрудник, ДатаНачала", Новый СравнениеЗначений);
	
	ВычеркнутьРанееОплаченныеПериодыПерерасчетов(СотрудникиПериоды, РанееОплаченныеПериоды);
	ВычеркнутьРанееОплаченныеОсновныеПериоды(СотрудникиПериоды, РанееОплаченныеПериоды);
КонецПроцедуры

Процедура ВычеркнутьРанееОплаченныеПериодыПерерасчетов(СотрудникиПериоды, РанееОплаченныеПериоды)
	ИндексПервойСтроки = Неопределено;
	ИндексПоследнейСтроки = 0;
	Для ИндексТекущейСтроки = 0 По СотрудникиПериоды.Количество() - 1 Цикл
		ТекущаяСтрока = СотрудникиПериоды[ИндексТекущейСтроки];
		Если ТекущаяСтрока.БезусловноСоответствуетКадровымДанным Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не ТекущаяСтрока.ПериодПерерасчета Тогда
			Прервать;
		КонецЕсли;
		
		Если ИндексПервойСтроки = Неопределено Тогда 
			ИндексПервойСтроки = ИндексТекущейСтроки;
		КонецЕсли;
		
		ИндексПоследнейСтроки = ИндексТекущейСтроки;		
	КонецЦикла;	
	
	Если ИндексПервойСтроки <> Неопределено Тогда
		ПометитьВычеркиваемыеПериоды(СотрудникиПериоды, РанееОплаченныеПериоды, "Сотрудник", ИндексПервойСтроки, ИндексПоследнейСтроки);
	КонецЕсли;	
КонецПроцедуры	

Процедура ВычеркнутьРанееОплаченныеОсновныеПериоды(СотрудникиПериоды, РанееОплаченныеПериоды)
	ИндексПервойСтроки = Неопределено;
	ИндексПоследнейСтроки = 0;
	Для ИндексТекущейСтроки = 0 По СотрудникиПериоды.Количество() - 1 Цикл
		ТекущаяСтрока = СотрудникиПериоды[ИндексТекущейСтроки];
		Если ТекущаяСтрока.БезусловноСоответствуетКадровымДанным 
			Или ТекущаяСтрока.ПериодПерерасчета Тогда
			
			Продолжить;
		КонецЕсли;	
				
		Если ИндексПервойСтроки = Неопределено Тогда 
			ИндексПервойСтроки = ИндексТекущейСтроки;
			ИндексПоследнейСтроки = СотрудникиПериоды.Количество() - 1;
			
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ИндексПервойСтроки <> Неопределено Тогда		
		ПометитьВычеркиваемыеПериоды(СотрудникиПериоды, РанееОплаченныеПериоды, "Сотрудник", ИндексПервойСтроки, ИндексПоследнейСтроки);
	КонецЕсли;	
КонецПроцедуры	

Функция РанееОплаченныеПериоды()	
	Если НастройкиРасчета.ПерваяПоловинаМесяца Тогда	
		РанееОплаченныеПериоды = РанееОплаченныеПериодыОкончательныйРасчет();
		РанееОплаченныеПериодыПерваяПоловинаМесяца = РанееОплаченныеПериодыПерваяПоловинаМесяца();  
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РанееОплаченныеПериодыПерваяПоловинаМесяца, РанееОплаченныеПериоды);
	Иначе	
		РанееОплаченныеПериоды = РанееОплаченныеПериодыОкончательныйРасчет();
	КонецЕсли;	
	
	ОбъединитьПересекающиесяРанееОплаченныеПериоды(РанееОплаченныеПериоды);	
	
	Возврат РанееОплаченныеПериоды;
КонецФункции

Функция РанееОплаченныеПериодыПерваяПоловинаМесяца()
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных о начислениях.';
								|en = 'The filter of the accruals data receipt is not initialized.'") ;
	КонецЕсли;
	
	ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеПакетаЗапросов.Параметры.Вставить("МесяцНачисления", МесяцНачисления);

	ОписаниеПакетаЗапросов.Параметры.Вставить("МесяцНачисления", МесяцНачисления);
	ОписаниеПакетаЗапросов.Параметры.Вставить("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	ОписаниеПакетаЗапросов.Параметры.Вставить("ИсправленныйДокумент", ИсправленныйДокумент);
	
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Начисления.ДатаНачала > &ФильтрДатаНачала_
	|			ТОГДА Начисления.ДатаНачала
	|		ИНАЧЕ &ФильтрДатаНачала_
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.ДатаОкончания < &ФильтрДатаОкончания_
	|			ТОГДА Начисления.ДатаОкончания
	|		ИНАЧЕ &ФильтрДатаОкончания_
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.НачислениеЗаПервуюПоловинуМесяца.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (&ШаблонУсловияСвязиПоИзмерениям)
	|			И (Начисления.Ссылка.Проведен)
	|			И (Начисления.Ссылка <> &ИсключаемыйРегистратор)
	|			И (Начисления.Ссылка <> &ИсправленныйДокумент)
	|			И (Начисления.ПериодДействия МЕЖДУ &ФильтрДатаНачалаПриведенная_ И &ФильтрДатаОкончанияПриведенная_)
	|			И Начисления.ДатаНачала <= &ФильтрДатаОкончания_
	|			И Начисления.ДатаОкончания >= &ФильтрДатаНачала_
	|			И (Начисления.Начисление.ЗачетНормыВремени = ИСТИНА)
	|			И (Начисления.Начисление.ЗачетОтработанногоВремени = ИСТИНА)
	|			И (Начисления.Ссылка.МесяцНачисления <= &МесяцНачисления)
	|			И (&ФильтрДатаНачала_ >= &МесяцНачисления)";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеДокумента = Новый Структура("ИзмеренияДляПоиска", Новый Соответствие);
	ОписаниеДокумента.ИзмеренияДляПоиска.Вставить(ВРег("Сотрудник"), Истина);
		
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("СотрудникиПериоды", "Начисления");
	
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра,
		ОписаниеДокумента,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса,
		"");
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачала");	
	ФильтрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаПриведенная");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончания");	
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");
	
	ФильтрДатаНачалаПриведенная.Кратность = "МЕСЯЦ";
	ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
	ФильтрДатаОкончанияПриведенная.Кратность = "МЕСЯЦ";
	ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	
	ВыражениеПоляФильтраДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала); 
	ВыражениеПоляФильтраДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания); 
	
	ВыражениеПоляЗапросаДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ДатаНачала");
	ВыражениеПоляЗапросаДатаНачала = СтрЗаменить(ВыражениеПоляЗапросаДатаНачала, "&ФильтрДатаНачала_", ВыражениеПоляФильтраДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляЗапросаДатаНачала, "ДатаНачала");	
	
	ВыражениеПоляЗапросаДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ДатаОкончания");
	ВыражениеПоляЗапросаДатаОкончания = СтрЗаменить(ВыражениеПоляЗапросаДатаОкончания, "&ФильтрДатаОкончания_", ВыражениеПоляФильтраДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляЗапросаДатаОкончания, "ДатаОкончания");
		
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакетаЗапросов, 
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);	
			
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
	УстановитьПривилегированныйРежим(Истина);	
	РанееОплаченныеПериоды = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РанееОплаченныеПериоды;	
КонецФункции

Функция РанееОплаченныеПериодыОкончательныйРасчет()		
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных о начислениях.';
								|en = 'The filter of the accruals data receipt is not initialized.'") ;
	КонецЕсли;
	
	// Ранее оплаченные периоды получаем по-разному для окончательного расчета и расчета первой половины.
	// Игнорируем ранее оплаченные периоды для записей в прошлом по отношению к периоду регистрации (это перерасчеты).
		
	КатегорииПособийПоУходуЗаРебенком = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	КатегорияОплатыКомандировки = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки;
	
	ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	
	ОписаниеПакетаЗапросов.Параметры.Вставить("МесяцНачисления", МесяцНачисления);
	ОписаниеПакетаЗапросов.Параметры.Вставить("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	ОписаниеПакетаЗапросов.Параметры.Вставить("ИсправленныйДокумент", ИсправленныйДокумент);
	ОписаниеПакетаЗапросов.Параметры.Вставить("КатегорииПособийПоУходуЗаРебенком", КатегорииПособийПоУходуЗаРебенком);
	ОписаниеПакетаЗапросов.Параметры.Вставить("КатегорияОплатыКомандировки", КатегорияОплатыКомандировки);

	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияНачало > &ФильтрДатаНачала_
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ &ФильтрДатаНачала_
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияКонец < &ФильтрДатаОкончания_
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ &ФильтрДатаОкончания_
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО &ШаблонУсловиеСвзяиПоСотруднику
	|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
	|			И (Начисления.Регистратор <> &ИсправленныйДокумент)
	|			И (Начисления.ПериодДействия МЕЖДУ &ФильтрДатаНачалаПриведенная_ И &ФильтрДатаОкончанияПриведенная_)
	|			И (Начисления.ПериодДействияНачало <= &ФильтрДатаОкончания_)
	|			И (Начисления.ПериодДействияКонец >= &ФильтрДатаНачала_)
	|			И (Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА
	|					И Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
	|				ИЛИ Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособийПоУходуЗаРебенком)
	|				ИЛИ Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорияОплатыКомандировки)
	|					И Начисления.ДокументОснование <> Начисления.Регистратор)
	|			И (Начисления.ПериодРегистрации <= &МесяцНачисления)
	|			И (&ФильтрДатаНачала_ >= &МесяцНачисления)
	|			И (Начисления.СторноТекущегоПериода = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Начисления.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0";	
		
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеРегистра = Новый Структура("ИзмеренияДляПоиска", Новый Соответствие);
	ОписаниеРегистра.ИзмеренияДляПоиска.Вставить(ВРег("Сотрудник"), Истина);
		
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("СотрудникиПериоды", "Начисления");
	
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса,
		"");
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачала");	
	ФильтрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаПриведенная");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончания");	
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");
	
	ФильтрДатаНачалаПриведенная.Кратность = "МЕСЯЦ";
	ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
	ФильтрДатаОкончанияПриведенная.Кратность = "МЕСЯЦ";
	ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	
	ВыражениеПоляФильтраДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала); 
	ВыражениеПоляФильтраДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания); 
	
	ВыражениеПоляЗапросаДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ДатаНачала");
	ВыражениеПоляЗапросаДатаНачала = СтрЗаменить(ВыражениеПоляЗапросаДатаНачала, "&ФильтрДатаНачала_", ВыражениеПоляФильтраДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляЗапросаДатаНачала, "ДатаНачала");	
	
	ВыражениеПоляЗапросаДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ДатаОкончания");
	ВыражениеПоляЗапросаДатаОкончания = СтрЗаменить(ВыражениеПоляЗапросаДатаОкончания, "&ФильтрДатаОкончания_", ВыражениеПоляФильтраДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляЗапросаДатаОкончания, "ДатаОкончания");
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляФильтраДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляФильтраДатаОкончания);
		
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакетаЗапросов, 
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
	УстановитьПривилегированныйРежим(Истина);	
	РанееОплаченныеПериоды = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РанееОплаченныеПериоды;	
КонецФункции

Процедура ОбъединитьПересекающиесяРанееОплаченныеПериоды(РанееОплаченныеПериоды)
	РанееОплаченныеПериоды.Сортировать("Сотрудник, ДатаНачала, ДатаОкончания", Новый СравнениеЗначений);
	
	ТекущийСотрудник = Неопределено;
	ПредыдущийПериод = Неопределено;
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого ТекущийПериод Из РанееОплаченныеПериоды Цикл
		Если ТекущийСотрудник <> ТекущийПериод.Сотрудник Тогда
			ПредыдущийПериод = Неопределено;
			ТекущийСотрудник = ТекущийПериод.Сотрудник;
		КонецЕсли;
		
		Если ПредыдущийПериод <> Неопределено И ТекущийПериод.ДатаНачала <= ПредыдущийПериод.ДатаОкончания Тогда  
			СтрокиКУдалению.Добавить(ТекущийПериод);
			Если ТекущийПериод.ДатаОкончания >= ПредыдущийПериод.ДатаОкончания Тогда
				ПредыдущийПериод.ДатаОкончания = ТекущийПериод.ДатаОкончания;
			КонецЕсли;	
		Иначе
			ПредыдущийПериод = ТекущийПериод;	
		КонецЕсли;
	КонецЦикла;	
		
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		РанееОплаченныеПериоды.Удалить(УдаляемаяСтрока);
	КонецЦикла;		
КонецПроцедуры

Функция НовыйТаблицаДобовляемыхНачислений()
	ТаблицаДобовляемыхНачислений = Новый ТаблицаЗначений;
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("Сотрудник");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("ДатаНачала");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("ДатаОкончания");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("Начисление");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("ДокументОснование");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("Используется");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("Организация");
	
	Возврат ТаблицаДобовляемыхНачислений;
КонецФункции

Функция ТаблицаСотрудниковПоСотрудникуПериоду(Сотрудник, Начало, Окончание)
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	НоваяСтрока = ТаблицаСотрудников.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

Функция ТаблицаСотрудниковПоСотрудникамПериоду(Сотрудники, Начало, Окончание)
	
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = Начало;
		НоваяСтрока.ДатаОкончания = Окончание;
	КонецЦикла;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеНачислений

Процедура ЗаполнитьНачисленияСотрудников(Начисления)
	
	РазбитьСтрокиНачислений();
	
	ЗаполнитьСведенияНачисленийДляРасчетаСлужебный();
		
	ЗаполнитьЗначенияПоказателейНачислений(Начисления);
			
	Зарплата.Начисления = Начисления;

	
КонецПроцедуры

Процедура ДополнитьПредоставленныеВычетыИСкидкиПоСторноЗаписям(Запрос)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	Пакет = СхемаЗапроса.ПакетЗапросов;
	
	ИмяВТНДФЛ = "ВТСведенияОДоходахНДФЛ_Сторно";
	ИмяВТВзносы = "ВТСведенияОДоходахСтраховыеВзносы_Сторно";
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.СведенияОДоходахНДФЛ,, ИмяВТНДФЛ);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.СведенияОДоходахСтраховыеВзносы,, ИмяВТВзносы);
	
	ЗапросВыбора = Пакет[1];
	Текст = ЗапросВыбора.ПолучитьТекстЗапроса() + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.КодДохода,
		|	СведенияОДоходах.СуммаВычета
		|ИЗ
		|	" + ИмяВТНДФЛ + " КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.КодДохода В(&ДоходыСВычетами)
		|	И СведенияОДоходах.Сторно
		|	И СведенияОДоходах.СуммаВычета <> 0";
	ЗапросВыбора.УстановитьТекстЗапроса(Текст);
	
	ЗапросВыбора = Пакет[2];
	Текст = ЗапросВыбора.ПолучитьТекстЗапроса() + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.Начисление.КодДоходаСтраховыеВзносы,
		|	СведенияОДоходах.Скидка
		|ИЗ
		|	" + ИмяВТВзносы + " КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Начисление.КодДоходаСтраховыеВзносы В(&ДоходыСоСкидками)
		|	И СведенияОДоходах.Сторно
		|	И СведенияОДоходах.Скидка <> 0";
	ЗапросВыбора.УстановитьТекстЗапроса(Текст);
	
	ЗапросУничтожения = Пакет.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтожения.ИмяТаблицы = ИмяВТНДФЛ;
	
	ЗапросУничтожения = Пакет.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтожения.ИмяТаблицы = ИмяВТВзносы;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеУдержаний

Процедура ЗаполнитьУдержанияСотрудников()
		
	РазбитьСтрокиУдержаний();
	
	ЗаполнитьСведенияУдержанийДляРасчетаСлужебный();;
	ЗаполнитьЗначенияПоказателейУдержанийСлужебный();
	
	ВычеркнутьСтрокиПоПоказателям(Удержания);
	
	ОбъединитьУдержания(Удержания);
	
КонецПроцедуры

// Заполняет коллекцию Зарплата.Удержания удержаниями Физических лиц (плановыми и пр.), выявленными за период с Начало
// по Окончание.
//
// Параметры
//	ФизическиеЛица - тип Массив элементов типа СправочникСсылка.ФизическиеЛица,
//  Организация - тип СправочникСсылка.Организации
//	Начало - тип Дата, дата начала периода выявления удержаний,
//	Окончание - тип Дата, дата окончания периода выявления удержаний.
//
Процедура ЗаполнитьУдержанияФизическихЛицЗаПериод(ФизическиеЛица, ГоловнаяОрганизация, Начало, Окончание) Экспорт
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));

	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		НоваяСтрока = ТаблицаФизическихЛиц.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.ДатаНачала = Начало;
		НоваяСтрока.ДатаОкончания = Окончание;
	КонецЦикла;
	
	УстановитьТаблицуФильтрФизическихЛиц(ТаблицаФизическихЛиц);
	
	Удержания = ТаблицаУдержаний();

	ЗаполнитьВыявленнымиУдержаниями(ТаблицаФизическихЛиц, Удержания);	
	ЗаполнитьУдержанияСотрудников();
	
КонецПроцедуры

#КонецОбласти

#Область ВыявлениеУдержаний

Функция Удержания(ТаблицаСотрудников, Отборы = Неопределено)
	
	ИмяЗамера = "НачислениеЗарплаты.ВыявлениеУдержаний";
	Замер = НачатьЗамерВремени();
	
	ТаблицаФизическихЛиц = ТаблицаСотрудников.Скопировать();
	
	ДополнитьТаблицуСотрудниковДаннымиФизичесикхЛиц(ТаблицаФизическихЛиц);
	
	ТаблицаФизическихЛиц.Свернуть("ГоловнаяОрганизация, ФизическоеЛицо, ДатаНачала, ДатаОкончания");
	
	УстановитьТаблицуФильтрФизическихЛиц(ТаблицаФизическихЛиц);
	
	Удержания = ТаблицаУдержаний();
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда
		Возврат Удержания;
	КонецЕсли;
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		Возврат Удержания;
	КонецЕсли;
	
	ЗаполнитьВыявленнымиУдержаниями(ТаблицаФизическихЛиц, Удержания);
	
	РазбитьСтрокиУдержаний();
	
	ЗаполнитьСведенияУдержанийДляРасчетаСлужебный();
	ЗаполнитьЗначенияПоказателейУдержанийСлужебный();;
	
	ВычеркнутьСтрокиПоПоказателям(Удержания);
	ВычеркнутьСтрокиПоОтборуПерерасчетовУдержаний(Удержания);
	ВычеркнутьСтрокиПоРабочимМестам(Удержания, ТаблицаСотрудников);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат Удержания;
	
КонецФункции

Процедура ЗаполнитьВыявленнымиУдержаниями(ПериодыФизическихЛиц, Удержания)
	СброситьКэшПоТаблицеУдержания();
	
	Если ПериодыФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПериодыФизическихЛиц.Сортировать("ФизическоеЛицо, ГоловнаяОрганизация, ДатаНачала", Новый СравнениеЗначений);
	
	ДобавитьПлановыеУдержания(ПериодыФизическихЛиц);
	ДобавитьУдержанияПоЗначениямРазовыхПоказателей(ПериодыФизическихЛиц);
	
	ДобавитьУдержанияПоЗначениямОперативныхПоказателей(ПериодыФизическихЛиц);
	ДобавитьПогашениеЗадолженностиПоУдержаниям(ПериодыФизическихЛиц);
	
	ПерерасчетЗарплаты.ЗаполнитьПерерассчитываемыеУдержания(МенеджерВременныхТаблиц, Удержания, ДополнительныеСвойства);
КонецПроцедуры

Процедура ДобавитьПлановыеУдержания(ПериодыФизическихЛиц)
	ПлановыеУдержания = ПлановыеУдержания();
	ДобавитьУдержанияФизическихЛиц(ПериодыФизическихЛиц, ПлановыеУдержания);	
КонецПроцедуры

Процедура ДобавитьУдержанияПоЗначениямРазовыхПоказателей(ПериодыФизическихЛиц)
	ЗначенияРазовыхПоказателей = ЗначенияРазовыхПоказателейФизическихЛиц();
	
	Если ЗначенияРазовыхПоказателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ОтборПоказателей = ЗначенияРазовыхПоказателей.ВыгрузитьКолонку("Показатель");
	ОтборПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборПоказателей);
	
	УдержанияПоПоказателям = УдержанияДобавляемыеПоПоказателям(ОтборПоказателей);
	УдержанияПоПоказателям.Индексы.Добавить("Показатель");
	
	ДобавляемыеУдержания = НовыйТаблицаДобавляемыхУдержаний();

	СтруктураПоиска = Новый Структура("Показатель");
	
	Для Каждого СтрокаТаблицыПоказателей Из ЗначенияРазовыхПоказателей Цикл
		СтруктураПоиска.Показатель = СтрокаТаблицыПоказателей.Показатель;
		НайденныеУдержания = УдержанияПоПоказателям.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекущееУдержаний Из НайденныеУдержания Цикл
			СтрокаДобавляемыхУдержаний = ДобавляемыеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхУдержаний, СтрокаТаблицыПоказателей);
			СтрокаДобавляемыхУдержаний.Удержание = ТекущееУдержаний.Удержание;
			СтрокаДобавляемыхУдержаний.Используется = Истина;
			СтрокаДобавляемыхУдержаний.ДатаНачала = НачалоМесяца(СтрокаТаблицыПоказателей.ПериодДействия);
			СтрокаДобавляемыхУдержаний.ДатаОкончания = КонецМесяца(СтрокаТаблицыПоказателей.ПериодДействия);
			СтрокаДобавляемыхУдержаний.Организация = ГоловнаяОрганизация;
		КонецЦикла;
	КонецЦикла;	
	
	Колонки = ОбщегоНазначения.ВыгрузитьКолонку(ДобавляемыеУдержания.Колонки, "Имя");
	ДобавляемыеУдержания.Свернуть(СтрСоединить(Колонки, ","));
	ДобавитьУдержанияФизическихЛиц(ПериодыФизическихЛиц, ДобавляемыеУдержания);
КонецПроцедуры

Процедура ДобавитьУдержанияПоЗначениямОперативныхПоказателей(ПериодыФизическихЛиц)
		
	Запрос = ЗапросВыяленияОперативныхПоказателейФизиечскихЛиц();
	УстановитьПривилегированныйРежим(Истина);
	ЗарегистрированныеПоказатели = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтборПоказателей = ЗарегистрированныеПоказатели.ВыгрузитьКолонку("Показатель");
	ОтборПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборПоказателей);
	
	УдержанияПоПоказателям = УдержанияДобавляемыеПоПоказателям(ОтборПоказателей);
	УдержанияПоПоказателям.Индексы.Добавить("Показатель");
	
	ДобавляемыеУдержания = НовыйТаблицаДобавляемыхУдержаний();
	
	СтруктураПоиска = Новый Структура("Показатель");
	
	Для Каждого СтрокаТаблицыПоказателей Из ЗарегистрированныеПоказатели Цикл
		СтруктураПоиска.Показатель = СтрокаТаблицыПоказателей.Показатель;
		НайденныеУдержания = УдержанияПоПоказателям.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекущееУдержание Из НайденныеУдержания Цикл
			СтрокаДобавляемыхУдержаний = ДобавляемыеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхУдержаний, СтрокаТаблицыПоказателей);
			СтрокаДобавляемыхУдержаний.Удержание = ТекущееУдержание.Удержание;
			СтрокаДобавляемыхУдержаний.Используется = Истина;
		КонецЦикла;
	КонецЦикла;	
	
	Колонки = ОбщегоНазначения.ВыгрузитьКолонку(ДобавляемыеУдержания.Колонки, "Имя");
	ДобавляемыеУдержания.Свернуть(СтрСоединить(Колонки, ","));
	ДобавитьУдержанияФизическихЛиц(ПериодыФизическихЛиц, ДобавляемыеУдержания);
КонецПроцедуры

Функция ЗапросВыяленияОперативныхПоказателейФизиечскихЛиц()
	ОписаниеФильтра = ФильтрПолученияПериодическихДанныхФизическихЛиц();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных показателей.';
								|en = 'The filter of indicator data receipt is not initialized.'") ;
	КонецЕсли;
		
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ОперативныеПоказателиДляВыявленияУдержаний");
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	
	ШаблонТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ШаблонФизическоеЛицо КАК ФизическоеЛицо,
	|	&ШаблонГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания,
	|	ПоказателиРасчета.Показатель КАК Показатель
	|ИЗ
	|	ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперативныеПоказателиДляВыявленияУдержаний КАК ПоказателиРасчета
	|		ПО (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
	|				ГДЕ
	|					ЗначенияПоказателей.ФизическоеЛицо = &ФизическоеЛицо_
	|					И ЗначенияПоказателей.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация_
	|					И ЗначенияПоказателей.Показатель = ПоказателиРасчета.Показатель
	|					И ЗначенияПоказателей.Период МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	ГоловнаяОрганизация,
	|	ДатаНачала,
	|	ДатаОкончания";
		
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстЗапроса);	
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ФизическиеЛицаПериоды", "ПоказателиРасчета");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса,
		"",
		Истина);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	
	ВыражениеПоляФизическоеЛицо = ЗарплатаКадрыПериодическиеРегистры.ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, "ФизическоеЛицо");
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&ФизическоеЛицо_", ВыражениеПоляФизическоеЛицо);
	
	ВыражениеПоляГоловнаяОрганизация = ЗарплатаКадрыПериодическиеРегистры.ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, "ГоловнаяОрганизация");
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&ГоловнаяОрганизация_", ВыражениеПоляГоловнаяОрганизация);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляФизическоеЛицо, "ФизическоеЛицо");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляГоловнаяОрганизация, "Организация");
	
	ВыражениеПоляДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаНачала, "ДатаНачала");
	
	ВыражениеПоляДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаОкончания, "ДатаОкончания");
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
КонецФункции	

Процедура ДобавитьПогашениеЗадолженностиПоУдержаниям(ПериодыФизическихЛиц)
	
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты") Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавляемыеУдержания = НовыйТаблицаДобавляемыхУдержаний();
	
	Задолженность = ЗадолженностьПоУдержаниямФизическихЛиц();
	ДокументыОснования = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ДокументОснование", Истина);
	
	ОтборОснований = Новый Массив;
	Для Каждого СтрокаЗадолженности Из Задолженность Цикл
		Если ДокументыОснования.Найти(СтрокаЗадолженности.ДокументОснование) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаДобавляемыхУдержаний = ДобавляемыеУдержания.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхУдержаний, СтрокаЗадолженности);
		СтрокаДобавляемыхУдержаний.Используется = Истина;
		СтрокаДобавляемыхУдержаний.ДатаНачала = МесяцНачисления;
		СтрокаДобавляемыхУдержаний.ДатаОкончания = КонецМесяца(МесяцНачисления);
		
		ОтборОснований.Добавить(СтрокаДобавляемыхУдержаний.ДокументОснование);
	КонецЦикла;
	
	Если ДобавляемыеУдержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ОтборОснований = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборОснований);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборОснований", ОтборОснований); 
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент КАК ИсполнительныйДокумент
		|ИЗ
		|	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу.СрезПоследних(&МесяцНачисления, ИсполнительныйДокумент В (&ОтборОснований)) КАК УсловияУдержанияПоИсполнительномуДокументу
		|ГДЕ
		|	УсловияУдержанияПоИсполнительномуДокументу.ПлатежныйАгент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	ИспольнительныеДокументы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИсполнительныйДокумент");
	
	ПлановыеУдержания = ПлановыеУдержания();
	ОтборУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(ПлановыеУдержания, "Удержание", Истина);
	СвойстваУдержаний = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборУдержаний, "КатегорияУдержания");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПлановыеУдержания, "ДокументОснование, Используется");
	Отбор = Новый Структура("ДокументОснование, Используется");
	Отбор.Используется = Истина;
	
	Для Каждого ИспольниельныйДокумент Из ИспольнительныеДокументы Цикл
		Отбор.ДокументОснование = ИспольниельныйДокумент;
		СтрокиПлановыхУдержаний = ПлановыеУдержания.Скопировать(Отбор);
		СтрокиПлановыхУдержаний.Сортировать("ДатаНачала УБЫВ");
		
		Для Каждого СтрокаУдержания Из СтрокиПлановыхУдержаний Цикл
			Если СвойстваУдержаний[СтрокаУдержания.Удержание].КатегорияУдержания = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента
				И ОбщегоНазначенияБЗК.ДатаВИнтервале(МесяцНачисления, НачалоМесяца(СтрокаУдержания.ДатаНачала), КонецМесяца(СтрокаУдержания.ДатаОкончания)) Тогда
				
				СтрокаДобавляемыхУдержаний = ДобавляемыеУдержания.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхУдержаний, СтрокаЗадолженности);
				СтрокаДобавляемыхУдержаний.Используется = Истина;
				СтрокаДобавляемыхУдержаний.ДатаНачала = МесяцНачисления;
				СтрокаДобавляемыхУдержаний.ДатаОкончания = КонецМесяца(МесяцНачисления);

				Прервать;
			КонецЕсли;		
		КонецЦикла;		
	КонецЦикла;	
	
	ДобавитьУдержанияФизическихЛиц(ПериодыФизическихЛиц, ДобавляемыеУдержания);	
		
КонецПроцедуры

Процедура ДобавитьУдержанияФизическихЛиц(ПериодыФизическихЛиц, ДобавляемыеУдержания)	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДобавляемыеУдержания, "ФизическоеЛицо, Организация, Используется");
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ДобавляемыеУдержания, "Удержание");
	СвойстваУдержаний = СвойстваУдержаний(ВидыРасчета);
	ОтборУдержаний = Новый Структура("ФизическоеЛицо, Организация, Используется");
	
	ОтборУдержаний.Используется = Истина;
	
	ТекущееФизическоеЛицо = Неопределено;
	ТекущаяГоловнаяОрганизация = Неопределено;
	Для Каждого СтрокаПериода Из ПериодыФизическихЛиц Цикл
		Если ТекущееФизическоеЛицо <> СтрокаПериода.ФизическоеЛицо
			Или ТекущаяГоловнаяОрганизация <> СтрокаПериода.ГоловнаяОрганизация Тогда
			
			ОтборУдержаний.ФизическоеЛицо = СтрокаПериода.ФизическоеЛицо;
			ОтборУдержаний.Организация = СтрокаПериода.ГоловнаяОрганизация;
			                                                 
			СтрокиУдержаний = ДобавляемыеУдержания.НайтиСтроки(ОтборУдержаний);
			
			ТекущееФизическоеЛицо = СтрокаПериода.ФизическоеЛицо;
			ТекущаяГоловнаяОрганизация = СтрокаПериода.ГоловнаяОрганизация;
		КонецЕсли;	
		
		Для Каждого СтрокаДобавляемыхУдержаний Из СтрокиУдержаний Цикл
			СвойствоУдержания = СвойстваУдержаний[СтрокаДобавляемыхУдержаний.Удержание];
			Если СтрокаДобавляемыхУдержаний.Используется 
				И (ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаДобавляемыхУдержаний.ДатаНачала, СтрокаПериода.ДатаНачала, СтрокаПериода.ДатаОкончания)
				Или ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаПериода.ДатаНачала, СтрокаДобавляемыхУдержаний.ДатаНачала, СтрокаДобавляемыхУдержаний.ДатаОкончания)) Тогда 
				
				Если Не СвойствоУдержания.УчаствуетВРасчетеПервойПоловиныМесяца 
					И Не НастройкиРасчета.ОкончательныйРасчет
					И Не НастройкиРасчета.РасчетЗарплаты Тогда
					
					Продолжить;
				КонецЕсли;
				
				ДатаНачала = Макс(СтрокаПериода.ДатаНачала, СтрокаДобавляемыхУдержаний.ДатаНачала);
				ДатаОкончания = Мин(СтрокаПериода.ДатаОкончания, СтрокаДобавляемыхУдержаний.ДатаОкончания);
				
				СтрокаУдержаний = Удержания.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУдержаний, СтрокаДобавляемыхУдержаний);
				СтрокаУдержаний.ГоловнаяОрганизация = СтрокаПериода.ГоловнаяОрганизация; 
				СтрокаУдержаний.ДатаНачала = ДатаНачала;
				СтрокаУдержаний.ДатаОкончания = ДатаОкончания;	
			КонецЕсли;	
		КонецЦикла;			
	КонецЦикла;	
КонецПроцедуры

Процедура ДобавитьУдержанияПериодыКУдержаниям(Сотрудник, УдержанияПериоды, Удержания)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПериоды, Удержания);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сотрудник, "ФизическоеЛицо, ГоловнаяОрганизация");
	УстановитьПривилегированныйРежим(Ложь);
	
	Удержания.ЗаполнитьЗначения(РеквизитыСотрудника.ФизическоеЛицо, "ФизическоеЛицо");
	Удержания.ЗаполнитьЗначения(РеквизитыСотрудника.ГоловнаяОрганизация, "ГоловнаяОрганизация");
	
КонецПроцедуры
	
Функция НовыйТаблицаДобавляемыхУдержаний()
	ТаблицаДобовляемыхНачислений = Новый ТаблицаЗначений;
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("ДатаНачала");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("ДатаОкончания");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("Удержание");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("ДокументОснование");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("Используется");
	ТаблицаДобовляемыхНачислений.Колонки.Добавить("Организация");
	
	Возврат ТаблицаДобовляемыхНачислений;
КонецФункции

#КонецОбласти

#Область РазбиениеСтрокНачислений

Процедура РазбитьСтрокиНачислений()	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	// Анализируем виды расчета на предмет того, что могло бы их разрезать.
		// - кадровые изменения
		// - общий график
		// - изменение значений показателей
		// - даты начала месяцев.
		
		// * - изменение периодических показателей организаций и подразделений
		// * - для начислений, в базу которых входят плановые начисления, 
		// датами разреза является еще и даты изменения этих плановых начислений и/или их показателей.
		
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТребованияНачисленийСводно = ТребованияНачисленийСводно();
	
	Начисления.Сортировать("Сотрудник, Начисление, ДокументОснование, ДатаНачала", Новый СравнениеЗначений);
	
	НачисленияОтбор = Начисления.ВыгрузитьКолонку("Начисление");  
	НачисленияОтбор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НачисленияОтбор);
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	ПоказателиНачислений = ПоказателиНачислений();
	
	ДатыРазбиения = НовыйДатыРазбиенияНачислений();
	
	РазбитьСтрокиВидовРасчетаПоМесяца(Начисления);
	
	Если ТребованияНачисленийСводно.ТребуютсяЗначенияПериодическихПоказателейСотрудников Тогда
		ЗначенияПериодическихПоказателейСотрудников = ЗначенияПериодическихПоказателейСотрудников();
		ЗаполнитьДатыРазбиенияПоПоказателямСотрудников(ДатыРазбиения, Начисления, ЗначенияПериодическихПоказателейСотрудников, "Начисление", ТребованияНачислений, ПоказателиНачислений, Истина); 
	КонецЕсли;	
			
	Если ТребованияНачисленийСводно.ТребуютсяЗначенияПериодическихПоказателейПодразделений Тогда
		ЗначенияПоказателейПодразделенийПоСотрудникам = ЗначенияПоказателейПодразделенийПоСотрудникам();
		ЗаполнитьДатыРазбиенияПоПоказателямСотрудников(ДатыРазбиения, Начисления, ЗначенияПоказателейПодразделенийПоСотрудникам, "Начисление", ТребованияНачислений, ПоказателиНачислений); 
	КонецЕсли;	

	Если ТребованияНачисленийСводно.ТребуютсяЗначенияПериодическихПоказателейОрганизаций Тогда
		ЗначенияПоказателейОрганизацийПоСотрудникам = ЗначенияПоказателеОрганизацийПоСотрудникам();
		ЗаполнитьДатыРазбиенияПоПоказателямСотрудников(ДатыРазбиения, Начисления, ЗначенияПоказателейОрганизацийПоСотрудникам, "Начисление", ТребованияНачислений, ПоказателиНачислений); 
	КонецЕсли;	
	
	Если ТребованияНачисленийСводно.УчитыватьИзмененияВремяВЧасах Тогда
		ПериодыДействияВремяВЧасахПоНачислениям = ПериодыДействияВремяВЧасахПоНачислениям();	
		ЗаполнитьДатыРазбиенияНачисленийПоПризнакуВремяВЧасах(ДатыРазбиения, ПериодыДействияВремяВЧасахПоНачислениям);
	КонецЕсли;	
	
	Если ТребованияНачисленийСводно.ТребуетсяПоказательЧисловойЗависящийОтСтажа Тогда
		ЗначенияСтажевыхПоказателей = ЗначенияСтажевыхПоказателейСотрудников();
		ЗаполнитьДатыРазбиенияПоПоказателямСотрудников(ДатыРазбиения, Начисления, ЗначенияСтажевыхПоказателей, "Начисление", ТребованияНачислений, ПоказателиНачислений);  
	КонецЕсли;	
	
	Если ТребованияНачисленийСводно.ТребуетсяПоказательПроцентСевернойНадбавки Тогда
		ЗначенияСверенойНадбаки = ЗначенияПоказателейПроцентСевернойНадбавки();
		ЗаполнитьДатыРазбиенияПоПоказателямСотрудников(ДатыРазбиения, Начисления, ЗначенияСверенойНадбаки, "Начисление", ТребованияНачислений, ПоказателиНачислений); 
	КонецЕсли;	
	
	Если ТребованияНачисленийСводно.УчитыватьУсловийОплатыПособия Тогда
		УсловияОплатыПособий = УсловияОплатыПособий();	
		ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(Начисления, ДатыРазбиения, "Начисление", ТребованияНачислений, УсловияОплатыПособий, "УчитыватьУсловийОплатыПособия");
	КонецЕсли;	
	
	Если ТребованияНачисленийСводно.ТребуетсяПоказательБазовыйТарифГруппы Тогда
		ЗначенияБазовыхТарифов = ЗначенияБазовыхТарифов();
		ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(Начисления, ДатыРазбиения, "Начисление", ТребованияНачислений, ЗначенияБазовыхТарифов, "ТребуетсяПоказательБазовыйТарифГруппы");
	КонецЕсли;	

	Если ТребованияНачисленийСводно.ТребуютсяКадровыеДанные Тогда
		КадроваяИстория = КадроваяИстория();
		ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(Начисления, ДатыРазбиения, "Начисление", ТребованияНачислений, КадроваяИстория, "ТребуютсяКадровыеДанные");
	КонецЕсли;
	
	Если ТребованияНачисленийСводно.ТребуютсяВидыЗанятости Тогда
		ВидыЗанятостиСотрудников = ВидыЗанятостиСотрудников();
		ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(Начисления, ДатыРазбиения, "Начисление", ТребованияНачислений, ВидыЗанятостиСотрудников, "ТребуютсяВидыЗанятости");
	КонецЕсли;	
	
	Если ТребованияНачисленийСводно.ТребуетсяОбщийГрафик Тогда
		ИсточникДанныхУчетаВремени = ИсточникиДанныхУчетаВремени();
		ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(Начисления, ДатыРазбиения, "Начисление", ТребованияНачислений, ИсточникДанныхУчетаВремени, "ТребуетсяОбщийГрафик");
	КонецЕсли;		
	
	Если ТребованияНачисленийСводно.ТребуетсяПоказательСтоимостьЧаса Тогда
		ЗначенияСовокупнойСтавкиПоСотрудникам = СводныеДанныеПлановыхНачисленийСотрудников();
		ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(Начисления, ДатыРазбиения, "Начисление", ТребованияНачислений, ЗначенияСовокупнойСтавкиПоСотрудникам, "ТребуетсяПоказательСтоимостьЧаса");
	КонецЕсли;	
	
	Если ТребованияНачисленийСводно.УчитыватьИзмененияПлановыхНачислений Тогда
		ПрименениеПлановыхНачислений = ПрименениеПлановыхНачисленийСлужебный();
		ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(Начисления, ДатыРазбиения, "Начисление", ТребованияНачислений, ПрименениеПлановыхНачислений, "УчитыватьИзмененияПлановыхНачислений", "ФиксРасчетВремени");
	КонецЕсли;	
	
	ДатыРазбиения.Свернуть("Сотрудник, ДокументОснование, Дата, Начисление");
	
	РазбитьНачисленийПоДатам(Начисления, ДатыРазбиения);	

	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
КонецПроцедуры

Процедура ЗаполнитьДатыРазбиенияПоПоказателямСотрудников(ДатыРазбиения, ТаблицаСтрокРасчета, ЗначенияПоказателей, ИмяПоляВидРасчета, СвойстваВидовРасчета, ПоказателиВидовРасчета, УчитыватьДокументОснование = Ложь)	
	Если УчитыватьДокументОснование Тогда
		ПоляПоиска = "Сотрудник, Показатель, ДокументОснование";
	Иначе
		ПоляПоиска = "Сотрудник, Показатель";
	КонецЕсли;	
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ЗначенияПоказателей, ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	ПоказателиНачислений = ПоказателиНачислений();
	
	ТекущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыРасчета Из ТаблицаСтрокРасчета Цикл                         
		Если Не СвойстваВидовРасчета[СтрокаТаблицыРасчета[ИмяПоляВидРасчета]].Разбивать 
			Или СтрокаТаблицыРасчета.ФиксСторно
			Или СтрокаТаблицыРасчета.ФиксЗаполнение Тогда
			Продолжить;
		КонецЕсли;	
		
		Показатели = ПоказателиВидовРасчета[СтрокаТаблицыРасчета[ИмяПоляВидРасчета]];
		
		Если Показатели = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицыРасчета);
		Для Каждого ТекущийПоказатель Из Показатели Цикл
			СтруктураПоиска.Показатель = ТекущийПоказатель.Показатель;
			СтрокиЗначенийПоказателя = ЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаЗначенияПоказателя Из СтрокиЗначенийПоказателя Цикл
				Если ОбщегоНазначенияБЗК.ДатаВИнтервале(НачалоДня(СтрокаЗначенияПоказателя.ДатаНачала), НачалоДня(СтрокаТаблицыРасчета.ДатаНачала),  НачалоДня(СтрокаТаблицыРасчета.ДатаОкончания), Ложь) Тогда 
					СтрокаРазбиения = ДатыРазбиения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРазбиения, СтрокаТаблицыРасчета);
					СтрокаРазбиения.Дата = НачалоДня(СтрокаЗначенияПоказателя.ДатаНачала);
				КонецЕсли;	
				Если ОбщегоНазначенияБЗК.ДатаВИнтервале(НачалоДня(СтрокаЗначенияПоказателя.ДатаОкончания), НачалоДня(СтрокаТаблицыРасчета.ДатаНачала),  НачалоДня(СтрокаТаблицыРасчета.ДатаОкончания), Ложь) Тогда 
					СтрокаРазбиения = ДатыРазбиения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРазбиения, СтрокаТаблицыРасчета);
					СтрокаРазбиения.Дата = КонецДня(СтрокаЗначенияПоказателя.ДатаОкончания) + 1;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;								
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДатыРазбиенияНачисленийПоПризнакуВремяВЧасах(ДатыРазбиения, ПериодыДействияПризанакаВремяВЧасах)
	Для Каждого СтрокаПоПериоду Из ПериодыДействияПризанакаВремяВЧасах Цикл
		СтрокаРазбиения = ДатыРазбиения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРазбиения, СтрокаПоПериоду);
		СтрокаРазбиения.Дата = НачалоДня(СтрокаПоПериоду.ДатаНачала);
		СтрокаРазбиения = ДатыРазбиения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРазбиения, СтрокаПоПериоду);
		СтрокаРазбиения.Дата = КонецДня(СтрокаПоПериоду.ДатаОкончания) + 1;		
	КонецЦикла;		
	
	ДатыРазбиения.Свернуть("Сотрудник, Начисление, ДокументОснование, Дата");
КонецПроцедуры

Функция ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(ТаблицаСтрокРасчета, ДатыРазбиения, ИмяПоляВидРасчета, ТребованияВидовРасчета, ПериодыДействияРесурсов, ПолеТребования, ДополнительныйПризнакФиксЗаполнение = Неопределено)	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыДействияРесурсов, "Сотрудник");
	СтруктураПоиска = Новый Структура("Сотрудник");	
		
	ТекущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыРасчета Из ТаблицаСтрокРасчета Цикл                         
		Если Не ТребованияВидовРасчета[СтрокаТаблицыРасчета[ИмяПоляВидРасчета]].Разбивать 
			Или СтрокаТаблицыРасчета.ФиксСторно
			Или СтрокаТаблицыРасчета.ФиксЗаполнение Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ТекущаяСтрока = Неопределено
			Или ТекущаяСтрока.Сотрудник <> СтрокаТаблицыРасчета.Сотрудник Тогда
			
			СтруктураПоиска.Сотрудник = СтрокаТаблицыРасчета.Сотрудник;
			ПериодыРесурсовПоСотруднику = ПериодыДействияРесурсов.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;	
			
		Если Не ТребованияВидовРасчета[СтрокаТаблицыРасчета[ИмяПоляВидРасчета]][ПолеТребования] 
			Или (ДополнительныйПризнакФиксЗаполнение <> Неопределено
			И СтрокаТаблицыРасчета[ДополнительныйПризнакФиксЗаполнение]) Тогда
			
			ТекущаяСтрока = СтрокаТаблицыРасчета;
			Продолжить;
		КонецЕсли;	
		
		
		Для Каждого ПериодРесурса Из ПериодыРесурсовПоСотруднику Цикл
			Если ПериодРесурса.ДатаНачала > СтрокаТаблицыРасчета.ДатаНачала
				И ПериодРесурса.ДатаНачала < СтрокаТаблицыРасчета.ДатаОкончания Тогда
				
				СтрокаРазбиения = ДатыРазбиения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРазбиения, СтрокаТаблицыРасчета);
				СтрокаРазбиения.Дата = НачалоДня(ПериодРесурса.ДатаНачала);
			КонецЕсли;	
			
			Если КонецДня(ПериодРесурса.ДатаОкончания) + 1 > СтрокаТаблицыРасчета.ДатаНачала
				И КонецДня(ПериодРесурса.ДатаОкончания) + 1 < СтрокаТаблицыРасчета.ДатаОкончания Тогда
				
				СтрокаРазбиения = ДатыРазбиения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРазбиения, СтрокаТаблицыРасчета);
				СтрокаРазбиения.Дата = КонецДня(ПериодРесурса.ДатаОкончания) + 1;
			КонецЕсли;	
		КонецЦикла;		
		
		ТекущаяСтрока = СтрокаТаблицыРасчета;		
	КонецЦикла;	
		
	Возврат ДатыРазбиения;
КонецФункции	

Процедура РазбитьНачисленийПоДатам(ТаблицаНачислений, ДатыРазбиения, РазбиватьБезусловно = Ложь)
	ТаблицаНачислений.Сортировать("Сотрудник, Начисление, ДокументОснование, ФиксЗаполнение УБЫВ, ДатаНачала", Новый СравнениеЗначений);
	ДатыРазбиения.Сортировать("Сотрудник, Начисление, ДокументОснование, Дата", Новый СравнениеЗначений);
	
	ОбходТаблицыДат = ОбходТаблицы(ДатыРазбиения, "Сотрудник, Начисление, ДокументОснование", "Дата", ,Истина);
	
	ПредыдущаяСтрока = Неопределено;
	ИндексТекущейСтроки = 0;
	Пока ИндексТекущейСтроки < ТаблицаНачислений.Количество()  Цикл
		СтрокаТаблицыНачислений = ТаблицаНачислений[ИндексТекущейСтроки];
		Если ПредыдущаяСтрока = Неопределено
			Или ПредыдущаяСтрока.Сотрудник <> СтрокаТаблицыНачислений.Сотрудник
			Или ПредыдущаяСтрока.Начисление <> СтрокаТаблицыНачислений.Начисление
			Или ПредыдущаяСтрока.ДокументОснование <> СтрокаТаблицыНачислений.ДокументОснование Тогда
			
			Если Не РазбиватьБезусловно 
				И СтрокаТаблицыНачислений.ФиксЗаполнение Тогда
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				Продолжить;
			КонецЕсли;	
			
			СпозиционироватьОбходНаПервойСтрокеПоКлючу(ОбходТаблицыДат, СтрокаТаблицыНачислений);
		ИначеЕсли ПредыдущаяСтрока.ДатаОкончания >= СтрокаТаблицыНачислений.ДатаНачала Тогда
			СброситьОбходТаблицыНаПервуюСтрокуПоКлючу(ОбходТаблицыДат);
		КонецЕсли;	
		
		Пока Истина Цикл
			СтрокаТалицыРазбиения = СледующаСтрокаПоВхождениюВИнтервал(ОбходТаблицыДат, СтрокаТаблицыНачислений, СтрокаТаблицыНачислений.ДатаНачала, СтрокаТаблицыНачислений.ДатаОкончания);
			Если СтрокаТалицыРазбиения = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаТалицыРазбиения.Дата <> СтрокаТаблицыНачислений.ДатаНачала
				И СтрокаТалицыРазбиения.Дата <> СтрокаТаблицыНачислений.ДатаОкончания Тогда
				
				ИсходнаяДатаОкончания = СтрокаТаблицыНачислений.ДатаОкончания;
				СтрокаТаблицыНачислений.ДатаОкончания = СтрокаТалицыРазбиения.Дата - 1;
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				
				НоваяСтрока = ВставитьСтрокуВТаблицу(ТаблицаНачислений, ИндексТекущейСтроки, СтрокаТаблицыНачислений);
				НоваяСтрока.ДатаНачала = СтрокаТалицыРазбиения.Дата; 
				НоваяСтрока.ДатаОкончания = ИсходнаяДатаОкончания;
				
				СтрокаТаблицыНачислений = НоваяСтрока;
			КонецЕсли;				
		КонецЦикла;	
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		ПредыдущаяСтрока = СтрокаТаблицыНачислений;
	КонецЦикла;	
КонецПроцедуры	

Процедура РазбитьСтрокиВидовРасчетаПоМесяца(ТаблицаВидовРасчетов)
	ИндексТекущейСтроки = 0;
	Пока ИндексТекущейСтроки < ТаблицаВидовРасчетов.Количество()  Цикл
		СтрокаТаблицы = ТаблицаВидовРасчетов[ИндексТекущейСтроки];
		Если НачалоМесяца(СтрокаТаблицы.ДатаНачала) = НачалоМесяца(СтрокаТаблицы.ДатаОкончания) Тогда
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		ТекущийМесяц = ДобавитьМесяц(НачалоМесяца(СтрокаТаблицы.ДатаНачала), 1);
		ПоследнийМесяц = НачалоМесяца(СтрокаТаблицы.ДатаОкончания);
		
		ИсхонаяДатаОкончания = СтрокаТаблицы.ДатаОкончания;
		Пока ТекущийМесяц <= ПоследнийМесяц Цикл
			СтрокаТаблицы.ДатаОкончания = КонецМесяца(СтрокаТаблицы.ДатаНачала);	
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			НоваяСтрока = ВставитьСтрокуВТаблицу(ТаблицаВидовРасчетов, ИндексТекущейСтроки, СтрокаТаблицы);
			НоваяСтрока.ДатаНачала = ТекущийМесяц;
			НоваяСтрока.ДатаОкончания = Мин(ИсхонаяДатаОкончания, КонецМесяца(ТекущийМесяц));
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		КонецЦикла;	
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
	КонецЦикла;	
КонецПроцедуры	

Функция НовыйДатыРазбиенияНачислений()
	ДатыРазбиения = Новый ТаблицаЗначений;
	ДатыРазбиения.Колонки.Добавить("Сотрудник");
	ДатыРазбиения.Колонки.Добавить("Начисление");
	ДатыРазбиения.Колонки.Добавить("ДокументОснование");
	ДатыРазбиения.Колонки.Добавить("УчитыватьДокументОснование", Новый ОписаниеТипов("Булево"));
	ДатыРазбиения.Колонки.Добавить("Дата");
	
	Возврат ДатыРазбиения;
КонецФункции
	
#КонецОбласти

#Область РазбиениеСтрокУдержаний

Процедура РазбитьСтрокиУдержаний()
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Удержания.Сортировать("ФизическоеЛицо, Удержание, ДокументОснование", Новый СравнениеЗначений);
	
	ТребованияУдержанийСводно = ТребованияУдержанийСводно();
	ТребованияУдержаний = ТребованияУдержанийТаблица();
	ПоказателиУдержаний = ПоказателиУдержаний();
	
	ДатыРазбиения = НовыйДатыРазбиенияУдержаний();
	
	РазбитьСтрокиВидовРасчетаПоМесяца(Удержания);
	
	ДополнятьФильтрСотрудников = Ложь;
	Если ТребованияУдержанийСводно.ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей Тогда
		ЗаполнитьОсновногоСотрудникаВУдержаниях();
		ДополнятьФильтрСотрудников = Истина;
	КонецЕсли;	
	
	Если ТребованияУдержанийСводно.ТребуютсяРабочиеМеста Тогда
		РабочиеМестаУдержаний = РабочиеМестаУдержаний();
		ЗаполнитьДатыРазбиенияУдержанийПоРабочимМестам(ДатыРазбиения, РабочиеМестаУдержаний);
		ДополнятьФильтрСотрудников = Истина;
	КонецЕсли;	
	
	Если ДополнятьФильтрСотрудников Тогда
		ДополнитьФильтрСотрудниковПоТаблицеУдержаний();	
	КонецЕсли;
	
	Если ТребованияУдержанийСводно.ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей Тогда
		ЗаполнитьОсновногоСотрудникаВУдержаниях();		
		КадроваяИстория = КадроваяИстория();
		
		ЗаполнитьДатыРазбиенияПоИзмеренияРесурсовСотрудника(Удержания, ДатыРазбиения, "Удержание",  ТребованияУдержаний, КадроваяИстория, "ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей");
	КонецЕсли;	
	
	Если ДополнятьФильтрСотрудников Тогда
		ДополнитьФильтрСотрудниковПоТаблицеУдержаний();	
	КонецЕсли;	
	
	Если ТребованияУдержанийСводно.ТребуютсяЗначенияПериодическихПоказателейСотрудников Тогда
		ЗначенияПоказателей = ЗначенияПериодическихПоказателейФизическихЛиц();
		ЗаполнитьДатыРазбиенияУдержанийПоПоказателямФизическизЛиц(ДатыРазбиения, ЗначенияПоказателей, ТребованияУдержаний, Истина);
	КонецЕсли;	
	
	Если ТребованияУдержанийСводно.ТребуютсяЗначенияПериодическихПоказателейОрганизаций Тогда
		ЗначенияПоказателей = ЗначенияПоказателеОрганизацийПоСотрудникам();
		ЗаполнитьДатыРазбиенияПоПоказателямСотрудников(ДатыРазбиения, Удержания, ЗначенияПоказателей, "Удержание", ТребованияУдержаний, ПоказателиУдержаний);	
	КонецЕсли;
	
	Если ТребованияУдержанийСводно.ТребуютсяЗначенияПериодическихПоказателейПодразделений Тогда
		ЗначенияПоказателей = ЗначенияПоказателейПодразделенийПоСотрудникам();
		ЗаполнитьДатыРазбиенияПоПоказателямСотрудников(ДатыРазбиения, Удержания, ЗначенияПоказателей, "Удержание", ТребованияУдержаний, ПоказателиУдержаний);	
	КонецЕсли;
	
	ДатыРазбиения.Свернуть("ФизическоеЛицо, Удержание, ДокументОснование, Дата"); 
	РазбитьУдержанийПоДатам(Удержания, ДатыРазбиения);	
КонецПроцедуры

Процедура ЗаполнитьДатыРазбиенияУдержанийПоРабочимМестам(ДатаРазбиения, РабочиеМеста)
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Удержания, "Удержание, ДокументОснование");
	Отбор = Новый Структура("Удержание, ДокументОснование");
	
	Для Каждого СтрокаРабочегоМеста Из РабочиеМеста Цикл		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаРабочегоМеста);
		
		СтрокиУдержаний = Удержания.НайтиСтроки(Отбор);
		Для Каждого СтрокаУдержаний Из СтрокиУдержаний Цикл
			Если ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаРабочегоМеста.ДатаНачала, НачалоДня(СтрокаУдержаний.ДатаНачала), НачалоДня(СтрокаРабочегоМеста.ДатаНачала), Ложь) Тогда
				СтрокаТаблицыДат = ДатаРазбиения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДат, СтрокаУдержаний); 
			    СтрокаТаблицыДат.Дата = СтрокаРабочегоМеста.ДатаНачала;
			КонецЕсли;	
			
			Если ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаРабочегоМеста.ДатаОкончания, НачалоДня(СтрокаУдержаний.ДатаНачала), НачалоДня(СтрокаРабочегоМеста.ДатаНачала), Ложь) Тогда
				СтрокаТаблицыДат = ДатаРазбиения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДат, СтрокаУдержаний); 
			    СтрокаТаблицыДат.Дата = КонецДня(СтрокаРабочегоМеста.ДатаОкончания) + 1;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьОсновногоСотрудникаВУдержаниях()	
	ПериодыОсновыхСотрудников = ОсновныеСотрудникиФизическихЛиц();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыОсновыхСотрудников, "ФизическоеЛицо");
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;	
		
		Отбор.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
		СтрокиОсновныхСотрудников = ПериодыОсновыхСотрудников.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаСотрудника Из СтрокиОсновныхСотрудников Цикл
			Если ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаУдержаний.ДатаНачала, СтрокаСотрудника.ДатаНачала, СтрокаСотрудника.ДатаОкончания) Тогда
				СтрокаУдержаний.Сотрудник = СтрокаСотрудника.Сотрудник;
				Прервать;
			КонецЕсли;				
		КонецЦикла;			
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьДатыРазбиенияУдержанийПоПоказателямФизическизЛиц(ДатыРазбиения, ЗначенияПоказателей, СвойстваУдержаний, УчитыватьДокументОснование = Ложь)	
	Если УчитыватьДокументОснование Тогда
		ПоляПоиска = "ФизическоеЛицо, Показатель, ДокументОснование";
	Иначе
		ПоляПоиска = "ФизическоеЛицо, Показатель";
	КонецЕсли;	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ЗначенияПоказателей, ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	ПоказателиУдержаний = ПоказателиУдержаний();
	
	ТекущаяСтрока = Неопределено;
	Для Каждого СтрокаУдержаний Из Удержания Цикл                         
		Если ТекущаяСтрока = Неопределено
			Или ТекущаяСтрока.ФизическоеЛицо <> СтрокаУдержаний.ФизическоеЛицо
			Или ТекущаяСтрока.Удержание <> СтрокаУдержаний.Удержание
			Или (УчитыватьДокументОснование И ТекущаяСтрока.ДокументОснование <> СтрокаУдержаний.ДокументОснование) Тогда
			
			Если Не СвойстваУдержаний[СтрокаУдержаний.Удержание].Разбивать 
				Или СтрокаУдержаний.ФиксСторно
				Или СтрокаУдержаний.ФиксЗаполнение Тогда
				Продолжить;
			КонецЕсли;	
			
			Показатели = ПоказателиУдержаний[СтрокаУдержаний.Удержание];
			
			Если Показатели = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУдержаний);
			Для Каждого ТекущийПоказатель Из Показатели Цикл
				СтруктураПоиска.Показатель = ТекущийПоказатель.Показатель;
				СтрокиЗначенийПоказателя = ЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого СтрокаЗначенияПоказателя Из СтрокиЗначенийПоказателя Цикл
					Если ОбщегоНазначенияБЗК.ДатаВИнтервале(НачалоДня(СтрокаЗначенияПоказателя.ДатаНачала), НачалоДня(СтрокаУдержаний.ДатаНачала),  НачалоДня(СтрокаУдержаний.ДатаОкончания), Ложь) Тогда 
						СтрокаРазбиения = ДатыРазбиения.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРазбиения, СтрокаУдержаний);
						СтрокаРазбиения.Дата = НачалоДня(СтрокаЗначенияПоказателя.ДатаНачала);
					КонецЕсли;	
					Если ОбщегоНазначенияБЗК.ДатаВИнтервале(НачалоДня(СтрокаЗначенияПоказателя.ДатаОкончания), НачалоДня(СтрокаУдержаний.ДатаНачала),  НачалоДня(СтрокаУдержаний.ДатаОкончания), Ложь) Тогда 
						СтрокаРазбиения = ДатыРазбиения.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРазбиения, СтрокаУдержаний);
						СтрокаРазбиения.Дата = КонецДня(СтрокаЗначенияПоказателя.ДатаОкончания) + 1;
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;			
		КонецЕсли;		
		
		ТекущаяСтрока = СтрокаУдержаний;		
	КонецЦикла;	
КонецПроцедуры

Процедура РазбитьУдержанийПоДатам(ТаблицаУдержаний, ДатыРазбиения, РазбиватьБезусловно = Ложь)
	ТаблицаУдержаний.Сортировать("ФизическоеЛицо, Удержание, ДокументОснование, ФиксЗаполнение УБЫВ, ДатаНачала", Новый СравнениеЗначений);
	ДатыРазбиения.Сортировать("ФизическоеЛицо, Удержание, ДокументОснование, Дата", Новый СравнениеЗначений);
	
	ОбходТаблицыДат = ОбходТаблицы(ДатыРазбиения, "ФизическоеЛицо, Удержание, ДокументОснование", "Дата", ,Истина);
	
	ПредыдущаяСтрока = Неопределено;
	ИндексТекущейСтроки = 0;
	Пока ИндексТекущейСтроки < ТаблицаУдержаний.Количество()  Цикл
		СтрокаТаблицыУдержаний = ТаблицаУдержаний[ИндексТекущейСтроки];
		Если ПредыдущаяСтрока = Неопределено
			Или ПредыдущаяСтрока.ФизическоеЛицо <> СтрокаТаблицыУдержаний.ФизическоеЛицо
			Или ПредыдущаяСтрока.Удержание <> СтрокаТаблицыУдержаний.Удержание
			Или ПредыдущаяСтрока.ДокументОснование <> СтрокаТаблицыУдержаний.ДокументОснование Тогда
			
			Если Не РазбиватьБезусловно 
				И СтрокаТаблицыУдержаний.ФиксЗаполнение Тогда
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				Продолжить;
			КонецЕсли;	
			
			СпозиционироватьОбходНаПервойСтрокеПоКлючу(ОбходТаблицыДат, СтрокаТаблицыУдержаний);
		ИначеЕсли ПредыдущаяСтрока.ДатаОкончания >= СтрокаТаблицыУдержаний.ДатаНачала Тогда
			СброситьОбходТаблицыНаПервуюСтрокуПоКлючу(ОбходТаблицыДат);
		КонецЕсли;	
		
		Пока Истина Цикл
			СтрокаТалицыРазбиения = СледующаСтрокаПоВхождениюВИнтервал(ОбходТаблицыДат, СтрокаТаблицыУдержаний, СтрокаТаблицыУдержаний.ДатаНачала, СтрокаТаблицыУдержаний.ДатаОкончания);
			Если СтрокаТалицыРазбиения = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаТалицыРазбиения.Дата <> СтрокаТаблицыУдержаний.ДатаНачала
				И СтрокаТалицыРазбиения.Дата <> НачалоДня(СтрокаТаблицыУдержаний.ДатаОкончания) Тогда
				
				ИсходнаяДатаОкончания = СтрокаТаблицыУдержаний.ДатаОкончания;
				СтрокаТаблицыУдержаний.ДатаОкончания = СтрокаТалицыРазбиения.Дата - 1;
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				
				НоваяСтрока = ВставитьСтрокуВТаблицу(ТаблицаУдержаний, ИндексТекущейСтроки, СтрокаТаблицыУдержаний);
				НоваяСтрока.ДатаНачала = СтрокаТалицыРазбиения.Дата; 
				НоваяСтрока.ДатаОкончания = ИсходнаяДатаОкончания;
				
				СтрокаТаблицыУдержаний = НоваяСтрока;
			КонецЕсли;				
		КонецЦикла;	
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		ПредыдущаяСтрока = СтрокаТаблицыУдержаний;
	КонецЦикла;	
КонецПроцедуры	

Функция НовыйДатыРазбиенияУдержаний()
	ДатыРазбиения = Новый ТаблицаЗначений;
	ДатыРазбиения.Колонки.Добавить("ФизическоеЛицо");
	ДатыРазбиения.Колонки.Добавить("Удержание");
	ДатыРазбиения.Колонки.Добавить("ДокументОснование");
	ДатыРазбиения.Колонки.Добавить("Дата");
	
	Возврат ДатыРазбиения;
КонецФункции


#КонецОбласти

#Область ВычеркиваниеСтрокНачислений

Процедура ВычеркнутьПериодыПослеЗаполненияСведенийНачислений()
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриВычеркиванииПериодовНачислений(Начисления, ДополнительныеСвойства);
	КонецЕсли;	
КонецПроцедуры	

Процедура ВычеркнутьСтрокиПоПоказателям(Строки, СтрокиПоИдентификатору = Неопределено, НаборЗаписей = Неопределено)
	
	// Вычеркиваем строки, при расчете значений показателей которых выяснилось, что определяющих показателей нет.
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	Для Каждого ИдентификаторСтроки Из ВычеркиваемыеСтроки Цикл
		Отбор.ИдентификаторСтроки = ИдентификаторСтроки;
		НайденныеСтроки = Строки.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокиПоИдентификатору <> Неопределено Тогда
				СтрокиПоИдентификатору.Удалить(ИдентификаторСтроки);
			КонецЕсли;
			Если НаборЗаписей <> Неопределено Тогда
				НаборЗаписей.Удалить(НайденнаяСтрока.ЗаписьРасчета);
			КонецЕсли;
			НастройкиПересчета.СоответствиеСтрокНачислений.Удалить(НайденнаяСтрока);
			Строки.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	ВычеркиваемыеСтроки.Очистить();
КонецПроцедуры

Процедура ВычеркнутьНеСоответствующиеКадровомуОтбору(СотрудникиПериоды, Отбор)
	ИнтервалыКадровойИстории = КадроваяИстория();
	
	СотрудникиПериоды.Сортировать("БезусловноСоответствуетКадровымДанным УБЫВ, ПериодПерерасчета УБЫВ, Сотрудник, ДатаНачала", Новый СравнениеЗначений);
		
	Если Отбор <> Неопределено 
		И Отбор.Свойство("Подразделение") 
		И ЗначениеЗаполнено(Отбор.Подразделение) Тогда
		
		ПодраздленияСУчетомИерархииОтбор = УчитываемыеПодразделенияСУчетомИерархии(Отбор.Подразделение);
		ЗаполнитьВычеркиваемыеПериодыДляНачисленйиВЦеломЗаМесяц(СотрудникиПериоды, ИнтервалыКадровойИстории, Отбор);
	КонецЕсли;	
	
	ВычеркнутьПериодыПерерасчетовНеСоответсвующиеОтбору(СотрудникиПериоды, Отбор, ИнтервалыКадровойИстории);
	
	ВычеркнутьОсновныеПериодыНеСоответсвующиеОтбору(СотрудникиПериоды, Отбор, ИнтервалыКадровойИстории);	
КонецПроцедуры

Процедура ВычеркнутьПериодыПерерасчетовНеСоответсвующиеОтбору(СотрудникиПериоды, Отбор, ИнтервалыКадровойИстории)
	ВычеркиваемыеИнтервалы = ИнтервалыКадровойИстории.СкопироватьКолонки("Сотрудник, ДатаНачала, ДатаОкончания");
	
	ИндексПервойСтроки = Неопределено;
	ИндексПоследнейСтроки = 0;
	Для ИндексТекущейСтроки = 0 По СотрудникиПериоды.Количество() - 1 Цикл
		ТекущаяСтрока = СотрудникиПериоды[ИндексТекущейСтроки];
		Если ТекущаяСтрока.БезусловноСоответствуетКадровымДанным Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не ТекущаяСтрока.ПериодПерерасчета Тогда
			Прервать;
		КонецЕсли;
		
		Если ИндексПервойСтроки = Неопределено Тогда 
			ИндексПервойСтроки = ИндексТекущейСтроки;
		КонецЕсли;
		
		ИндексПоследнейСтроки = ИндексТекущейСтроки;		
	КонецЦикла;	
	
	Если ИндексПервойСтроки <> Неопределено Тогда
		Для Каждого СтрокаКадровойИстории Из ИнтервалыКадровойИстории Цикл
			Если СтрокаКадровойИстории.Организация <> Организация 
				Или СтрокаКадровойИстории.ДополнениеПервойСтрокиПериодомСреза
				Или СтрокаКадровойИстории.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				
				ЗаполнитьЗначенияСвойств(ВычеркиваемыеИнтервалы.Добавить(), СтрокаКадровойИстории);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если ВычеркиваемыеИнтервалы.Количество() > 0 Тогда
		ПометитьВычеркиваемыеПериоды(СотрудникиПериоды, ВычеркиваемыеИнтервалы, "Сотрудник", ИндексПервойСтроки, ИндексПоследнейСтроки);
	КонецЕсли;	
КонецПроцедуры	

Процедура ВычеркнутьОсновныеПериодыНеСоответсвующиеОтбору(СотрудникиПериоды, Отбор, ИнтервалыКадровойИстории)
	ВычеркиваемыеИнтервалы = ИнтервалыКадровойИстории.СкопироватьКолонки("Сотрудник, ДатаНачала, ДатаОкончания");
	
	ИндексПервойСтроки = Неопределено;
	ИндексПоследнейСтроки = 0;
	Для ИндексТекущейСтроки = 0 По СотрудникиПериоды.Количество() - 1 Цикл
		ТекущаяСтрока = СотрудникиПериоды[ИндексТекущейСтроки];
		Если ТекущаяСтрока.БезусловноСоответствуетКадровымДанным 
			Или ТекущаяСтрока.ПериодПерерасчета Тогда
			
			Продолжить;
		КонецЕсли;	
				
		Если ИндексПервойСтроки = Неопределено Тогда 
			ИндексПервойСтроки = ИндексТекущейСтроки;
			ИндексПоследнейСтроки = СотрудникиПериоды.Количество() - 1;
			
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ИндексПервойСтроки <> Неопределено Тогда		
		Для Каждого СтрокаКадровойИстории Из ИнтервалыКадровойИстории Цикл
			Если СтрокаКадровойИстории.Организация <> Организация 
				Или СтрокаКадровойИстории.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение 
				Или СтрокаКадровойИстории.ДополнениеПервойСтрокиПериодомСреза
				Или (ПодраздленияСУчетомИерархииОтбор <> Неопределено И ПодраздленияСУчетомИерархииОтбор[СтрокаКадровойИстории.Подразделение] <> Истина) Тогда
								
				ЗаполнитьЗначенияСвойств(ВычеркиваемыеИнтервалы.Добавить(), СтрокаКадровойИстории);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если ВычеркиваемыеИнтервалы.Количество() > 0 Тогда
		ПометитьВычеркиваемыеПериоды(СотрудникиПериоды, ВычеркиваемыеИнтервалы, "Сотрудник", ИндексПервойСтроки, ИндексПоследнейСтроки);
	КонецЕсли;	

КонецПроцедуры	
	
Функция УчитываемыеПодразделенияСУчетомИерархии(ВышестоящееПодразделение)
	УчитваемыеПодразделения = Новый Соответствие;
	УчитваемыеПодразделения.Вставить(ВышестоящееПодразделение, Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВышестоящееПодразделение", ВышестоящееПодразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодчиненностьПодразделенийОрганизаций.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделенийОрганизаций
	|ГДЕ
	|	ПодчиненностьПодразделенийОрганизаций.ВышестоящееПодразделение В(&ВышестоящееПодразделение)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		УчитваемыеПодразделения.Вставить(Выборка.Подразделение, Истина);
	КонецЦикла;
	
	Возврат УчитваемыеПодразделения;
КонецФункции	

Процедура ЗаполнитьВычеркиваемыеПериодыДляНачисленйиВЦеломЗаМесяц(СотрудникиПериоды, КадроваяИстория, Отбор)
	ОбходКадровойИстории = ОбходТаблицы(КадроваяИстория, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыСотрудников Из СотрудникиПериоды Цикл
		Если СтрокаТаблицыСотрудников.БезусловноСоответствуетКадровымДанным
			Или СтрокаТаблицыСотрудников.ПериодПерерасчета Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущаяСтрока <> Неопределено
			И (ПредыдущаяСтрока.Сотрудник <> СтрокаТаблицыСотрудников.Сотрудник
			Или НачалоМесяца(ПредыдущаяСтрока.ДатаОкончания) <> НачалоМесяца(СтрокаТаблицыСотрудников.ДатаОкончания)) Тогда
			
			АктуальнаяСтрокаКадровойИстории = СледующаяСтрокаВключающаяПериод(ОбходКадровойИстории, ПредыдущаяСтрока, ПредыдущаяСтрока.ДатаОкончания);
			
			Если АктуальнаяСтрокаКадровойИстории <> Неопределено
				И АктуальнаяСтрокаКадровойИстории.ВидСобытия <> Перечисления.ВидыКадровыхСобытий.Увольнение 
				И (АктуальнаяСтрокаКадровойИстории.Организация <> Отбор.Организация
				Или (ПодраздленияСУчетомИерархииОтбор <> Неопределено И ПодраздленияСУчетомИерархииОтбор[АктуальнаяСтрокаКадровойИстории.Подразделение] <> Истина)) Тогда
				
				СтрокаВычеркиваемогоПериода = ВычеркнутыеПериоды.Добавить();
				СтрокаВычеркиваемогоПериода.Сотрудник = ПредыдущаяСтрока.Сотрудник;
				СтрокаВычеркиваемогоПериода.ПериодДействия = НачалоМесяца(ПредыдущаяСтрока.ДатаОкончания);
			КонецЕсли;		
		КонецЕсли;		
		
		ПредыдущаяСтрока = СтрокаТаблицыСотрудников;
	КонецЦикла;	
	
	Если ПредыдущаяСтрока <> Неопределено Тогда
		АктуальнаяСтрокаКадровойИстории = СледующаяСтрокаВключающаяПериод(ОбходКадровойИстории, ПредыдущаяСтрока, ПредыдущаяСтрока.ДатаОкончания);
		
		Если АктуальнаяСтрокаКадровойИстории <> Неопределено
			И АктуальнаяСтрокаКадровойИстории.ВидСобытия <> Перечисления.ВидыКадровыхСобытий.Увольнение 
			И (АктуальнаяСтрокаКадровойИстории.Организация <> Организация
			Или (ПодраздленияСУчетомИерархииОтбор <> Неопределено И ПодраздленияСУчетомИерархииОтбор[АктуальнаяСтрокаКадровойИстории.Подразделение] <> Истина)) Тогда
			
			СтрокаВычеркиваемогоПериода = ВычеркнутыеПериоды.Добавить();
			СтрокаВычеркиваемогоПериода.Сотрудник = ПредыдущаяСтрока.Сотрудник;
			СтрокаВычеркиваемогоПериода.ПериодДействия = НачалоМесяца(ПредыдущаяСтрока.ДатаОкончания);
		КонецЕсли;	
	КонецЕсли;	

	ВычеркнутыеПериоды.Индексы.Добавить("Сотрудник,ПериодДействия");	
КонецПроцедуры	

Функция ТаблицаВычеркнутыеПериоды()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ВычеркнутьСтрокиПоОтборуПерерасчетовНачислений(Начисления)
	
	Если ОтборПерерасчетовНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПерерасчетовНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Сотрудник");
	
	Для Каждого СтрокаОтбора Из ОтборПерерасчетовНачислений Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаОтбора);
		НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		УдаляемыеСтроки = Новый Массив;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НачалоМесяца(НайденнаяСтрока.ДатаНачала) = СтрокаОтбора.ПериодДействия Тогда
				Если СтрокаОтбора.ВидыРасчета.Найти(НайденнаяСтрока.Начисление) = Неопределено Тогда
					УдаляемыеСтроки.Добавить(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Начисления.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычеркнутьСтрокиПоОтборуПерерасчетовУдержаний(Удержания)
	
	Если ОтборПерерасчетовУдержаний = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПерерасчетовУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура(
		"ФизическоеЛицо,
		|ГоловнаяОрганизация,
		|Удержание, 
		|ДокументОснование");
	
	Для Каждого СтрокаОтбора Из ОтборПерерасчетовУдержаний Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаОтбора);
		НайденныеСтроки = Удержания.НайтиСтроки(ОтборСтрок);
		УдаляемыеСтроки = Новый Массив;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокаОтбора.ПериодДействия = НачалоМесяца(НайденнаяСтрока.ДатаНачала) Тогда
				УдаляемыеСтроки.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Удержания.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычеркнутьСтрокиПоРабочимМестам(Удержания, ТаблицаСотрудников)
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСотрудников.Индексы.Добавить("Сотрудник");
	ОтборСтрок = Новый Структура("Сотрудник");
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из Удержания Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		ОтборСтрок.Сотрудник = СтрокаТаблицы.Сотрудник;
		НайденныеСтроки = ТаблицаСотрудников.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Удержания.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаОтборПерерасчетовНачислений()
	
	ОтборПерерасчетов = Новый ТаблицаЗначений;
	ОтборПерерасчетов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ОтборПерерасчетов.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ОтборПерерасчетов.Колонки.Добавить("ВидыРасчета", Новый ОписаниеТипов("Массив"));

	Возврат ОтборПерерасчетов;
	
КонецФункции

Функция ТаблицаОтборПерерасчетовУдержаний()
	
	ОтборПерерасчетов = Новый ТаблицаЗначений;
	ОтборПерерасчетов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ОтборПерерасчетов.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОтборПерерасчетов.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ОтборПерерасчетов.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	ОтборПерерасчетов.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);

	Возврат ОтборПерерасчетов;
	
КонецФункции

#КонецОбласти

#Область ЗначенияПоказателей

#Область ЗначенияПоказателейНачислений

Процедура ЗаполнитьЗначенияПоказателейНачисленийСлужебный()
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ЗаполнитьИдентификаторСтроки(Начисления);
	СтрокиНачисленийПоИдентификаторам = СтрокиНачисленийПоИдентификаторам();
	
	ПоказателиСотрудников = ПоказателиСотрудников();

	ЗаполнитьФиксированныеСуммыНачислений();		
		
	ЗаполнитьЗначенияПериодическихПоказателейСотрудников(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияПериодическихПоказателейОрганизаций(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияПериодическихПоказателейПодразделений(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	//
	ЗаполнитьЗначенияРазовыхПоказателейСотрудников(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияРазовыхПоказателейОрганизаций(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияРазовыхПоказателейПодразделений(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	
	ЗаполнитьЗначенияИзвестныхПоказателей(ПоказателиСотрудников.ИзвестныеПоказатели);
	
	//
	//// Собираем значения дополнительных показателей у потребителей.	
	
	ЗаполнитьЗначенияПоказателяДоляНеполногоРабочегоВремени(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияПоказателейСтоимостьЧасаДня(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	
	ЗаполнитьЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенком(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияПоказателяПроцентСевернойНадбавки(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияПоказателяРайонныйКоэффициентРФ(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияПоказателейПроцентДоплатыЗаРаботуВНочноеВечернееВремя(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	ЗаполнитьЗначенияПоказателяБазовыйТарифГруппы(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
	
	ЗаполнитьЗначенияПереопределяемыхПоказателейНачислений(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам);
		
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
КонецПроцедуры

Процедура ЗаполнитьФиксированныеСуммыНачислений()
	ТребованияНачисленийСводно = ТребованияНачисленийСводно();
	Если Не ТребованияНачисленийСводно.ТребуютсяФиксированныеСуммы Тогда
		Возврат;
	КонецЕсли;	
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ПлановыеНачисления = ПлановыеНачисления();
	
	Начисления.Сортировать("Сотрудник, Начисление, ДокументОснование, ДатаНачала, ДатаОкончания", Новый СравнениеЗначений);
	ПлановыеНачисления.Сортировать("Сотрудник, Начисление, ДокументОснование, ДатаНачала", Новый СравнениеЗначений);
	
	ОбходПлановыхНачислений = ОбходТаблицы(ПлановыеНачисления, "Сотрудник, Начисление, ДокументОснование", "ДатаНачала", "ДатаОкончания", Истина);
	
	ТекущаяСтрокаПлановыхНачислений = Неопределено;
	Для Каждого СтрокаНачислений Из Начисления Цикл
		Если Не ТребованияНачислений[СтрокаНачислений.Начисление].ТребуютсяФиксированныеСуммы 
			Или СтрокаНачислений.ФиксРасчет 
			Или СтрокаНачислений.ФиксЗаполнение
			Или СтрокаНачислений.ФиксСторно Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрокаПлановыхНачислений = СледующаяСтрокаВключающаяПериод(ОбходПлановыхНачислений, СтрокаНачислений, СтрокаНачислений.ДатаНачала, ТекущаяСтрокаПлановыхНачислений);
		
		Если ТекущаяСтрокаПлановыхНачислений <> Неопределено Тогда
			СтрокаНачислений.Результат = ТекущаяСтрокаПлановыхНачислений.Размер;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПериодическихПоказателейСотрудников(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	Если ПоказателиСотрудников.ПериодическиеПоказателиСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПериодическихПоказателейСотрудников = ЗначенияПериодическихПоказателейСотрудников();
	ЗаполнитьЗначенияПоказателейСотрудниковПоТаблицеИнтервалов(ПоказателиСотрудников.ПериодическиеПоказателиСотрудников, ЗначенияПериодическихПоказателейСотрудников, СтрокиНачисленийПоИдентификаторам, "Сотрудник", Истина);	
КонецПроцедуры	

Процедура ЗаполнитьЗначенияПериодическихПоказателейОрганизаций(ПоказателиСотрудников, СтрокийПоИдентификаторам)
	Если ПоказателиСотрудников.ПериодическиеПоказателиОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗначенияПериодическихПоказателейОрганизаций = ЗначенияПоказателеОрганизацийПоСотрудникам();
	ЗаполнитьЗначенияПоказателейСотрудниковПоТаблицеИнтервалов(ПоказателиСотрудников.ПериодическиеПоказателиОрганизаций, ЗначенияПериодическихПоказателейОрганизаций, СтрокийПоИдентификаторам, "Сотрудник");	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПериодическихПоказателейПодразделений(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	Если ПоказателиСотрудников.ПериодическиеПоказателиПодразделений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПериодическихПоказателейПодразделений = ЗначенияПоказателейПодразделенийПоСотрудникам();
	ЗаполнитьЗначенияПоказателейСотрудниковПоТаблицеИнтервалов(ПоказателиСотрудников.ПериодическиеПоказателиПодразделений, ЗначенияПериодическихПоказателейПодразделений, СтрокиНачисленийПоИдентификаторам, "Сотрудник");	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРазовыхПоказателейСотрудников(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	
	ЗаполняемыеПоказатели = ПоказателиСотрудников.РазовыеПоказателиСотрудников;
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияРазовыхПоказателей = ЗначенияРазовыхПоказателейСотрудников();
	
	ПоляПоиска = "ПериодДействия, Сотрудник, Показатель, Организация";
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ЗначенияРазовыхПоказателей, ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
		СтруктураПоиска.ПериодДействия = СтрокаПоказателя.Период;
		НайденныеЗначения = ЗначенияРазовыхПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеЗначения.Количество() > 0 Тогда
			СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, НайденныеЗначения[0].Значение, Истина);
			ЗаполнитьОплаченноеВремяПоЗначениюПоказателя(СтрокаНачисления, СтрокаПоказателя.Показатель, НайденныеЗначения[0].Значение);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРазовыхПоказателейОрганизаций(ПоказателиСотрудников, СтрокиПоИдентификаторам)
	ЗаполняемыеПоказатели = ПоказателиСотрудников.РазовыеПоказателиОрганизаций;
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьРазовыеПоказателиСтруктурныхЕдиниц(
		ЗаполняемыеПоказатели, 
		"ЗначенияРазовыхПоказателейРасчетаЗарплатыОрганизаций", 
		"Организация", 
		СтрокиПоИдентификаторам);	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРазовыхПоказателейПодразделений(ПоказателиСотрудников, СтрокиПоИдентификаторам)
	ЗаполняемыеПоказатели = ПоказателиСотрудников.РазовыеПоказателиПодразделений;
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьРазовыеПоказателиСтруктурныхЕдиниц(
		ЗаполняемыеПоказатели, 
		"ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений", 
		"Подразделение", 
		СтрокиПоИдентификаторам);	
КонецПроцедуры

Процедура ЗаполнитьРазовыеПоказателиСтруктурныхЕдиниц(ЗаполняемыеПоказатели, РегистрИсточникДанных, ИмяПоляСтруктурнаяЕдиница, СтрокиПоИдентификаторам)
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПоляФильтра = ИмяПоляСтруктурнаяЕдиница + ", Период";
	ТаблицаФильтр = ЗаполняемыеПоказатели.Скопировать(, ПоляФильтра);
	
	ТаблицаФильтр.Свернуть(ПоляФильтра);
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтр, ИмяПоляСтруктурнаяЕдиница);	
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(РегистрИсточникДанных);
	
	ОписаниеПакета.Параметры.Вставить("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияРазовыхПоказателей.ПериодДействия КАК Период,
	|	ЗначенияРазовыхПоказателей.Показатель КАК Показатель,
	|	&ШаблонСтруктурнаяЕдиница КАК ШаблонСтруктурнаяЕдиница,
	|	ЗначенияРазовыхПоказателей.Значение КАК Значение
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПоказателейРасчетаЗарплаты КАК ЗначенияРазовыхПоказателей
	|		ПО (&ШаблонУсловияСвязиПоИзмерениям)
	|			И (ЗначенияРазовыхПоказателей.ПериодДействия = &ФильтрПериод_)
	|			И (ЗначенияРазовыхПоказателей.Регистратор <> &ИсключаемыйРегистратор)";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "ЗначенияРазовыхПоказателей", "РегистрСведений." + РегистрИсточникДанных);	
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ТаблицаФильтр", "ЗначенияРазовыхПоказателей");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"Период",
		ОператорЗапроса);
	
	ФильтрПериод = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "Период");
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериод_", ФильтрПериод);
	
	ВыражениеПоляСтруктурнаяЕдиница = "ЗначенияРазовыхПоказателей." + ИмяПоляСтруктурнаяЕдиница;
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляСтруктурнаяЕдиница, ИмяПоляСтруктурнаяЕдиница, Ложь);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	
	ЗначенияПоказателей.Индексы.Добавить(ПоляФильтра + ", Показатель");
	СтруктураПоиска = Новый Структура(ПоляФильтра + ", Показатель");
	
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
		НайденныеЗначения = ЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеЗначения.Количество() > 0 Тогда
			СтрокаНачисления = СтрокиПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, НайденныеЗначения[0].Значение, Истина);	
		КонецЕсли;		
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗаполнитьЗначенияИзвестныхПоказателей(ИзвестныеПоказатели, ЗаполнятьОплаченноеВремя = Истина)
	Для Каждого СтрокаПоказателя Из ИзвестныеПоказатели Цикл
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаПоказателя.СтрокаТаблицыРасчета, СтрокаПоказателя.Показатель, СтрокаПоказателя.Значение, Истина);
		Если ЗаполнятьОплаченноеВремя Тогда
			ЗаполнитьОплаченноеВремяПоЗначениюПоказателя(СтрокаПоказателя.СтрокаТаблицыРасчета, СтрокаПоказателя.Показатель, СтрокаПоказателя.Значение);
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры                                                                 

Процедура ЗаполнитьЗначенияПоказателяДоляНеполногоРабочегоВремени(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	Если ПоказателиСотрудников.ПоказателиДоляНеполногоВремени.Количество() = 0 Тогда       
		Возврат;
	КонецЕсли;
	
	ЗаполняеыеПоказатели = ПоказателиСотрудников.ПоказателиДоляНеполногоВремени;
	ЗаполняеыеПоказатели.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);
	
	ОбщиеГрафикиСотрудников = ИсточникиДанныхУчетаВремени();
	КадровыеДанныеСотрудников = КадроваяИстория();
	ДанныеОбщийГрафиков = СвойстваОбщихГрафиков();
		
	ОбходОбщихГрафиковСотрудников = ОбходТаблицы(ОбщиеГрафикиСотрудников, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);
	ОбходКадровыхДанных = ОбходТаблицы(КадровыеДанныеСотрудников, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);

	КадровыеДанныеСотрудника = Неопределено;
	ГрафикСотрудника = Неопределено;
	Для Каждого СтрокаТаблицыПоказателей Из ЗаполняеыеПоказатели Цикл
		КадровыеДанныеСотрудника = СледующаяСтрокаВключающаяПериод(ОбходКадровыхДанных, СтрокаТаблицыПоказателей, СтрокаТаблицыПоказателей.Период, КадровыеДанныеСотрудника);
		ГрафикСотрудника = СледующаяСтрокаВключающаяПериод(ОбходОбщихГрафиковСотрудников, СтрокаТаблицыПоказателей, СтрокаТаблицыПоказателей.Период, ГрафикСотрудника);
		
		ДанныеОбщегоГрафика = Неопределено;
		Если ГрафикСотрудника <> Неопределено Тогда
			ДанныеОбщегоГрафика = ДанныеОбщийГрафиков[ГрафикСотрудника.ОбщийГрафик];
		КонецЕсли;	
		СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаТаблицыПоказателей.ИдентификаторСтроки];
		
		ДоляНеполногоВремени = РасчетЗарплатыРасширенный.ДоляНеполногоВремени(ДанныеОбщегоГрафика, КадровыеДанныеСотрудника);
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаТаблицыПоказателей.Показатель, ДоляНеполногоВремени);
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗаполнитьЗначенияПоказателейСтоимостьЧасаДня(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	Если ПоказателиСотрудников.ПоказателиСтоимостьЧасаДня.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	                                         
	СтоимостьЧасаДня = СтоимостьЧасаДня(ПоказателиСотрудников.ПоказателиСтоимостьЧасаДня);
	
	Для Каждого СтрокаПоказателя Из ПоказателиСотрудников.ПоказателиСтоимостьЧасаДня Цикл
		СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, СтоимостьЧасаДня[СтрокаПоказателя.ИдентификаторСтроки]);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	Если ПоказателиСотрудников.СтажевыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияСтажевыхПоказателейСотрудников = ЗначенияСтажевыхПоказателейСотрудников();
	ЗаполнитьЗначенияПоказателейСотрудниковПоТаблицеИнтервалов(ПоказателиСотрудников.СтажевыеПоказатели, ЗначенияСтажевыхПоказателейСотрудников, СтрокиНачисленийПоИдентификаторам, "Сотрудник");			
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяПроцентСевернойНадбавки(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	Если ПоказателиСотрудников.ПоказателиПроцентСевернойНадбавки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияПоказателейПроцентСевернойНадбавки = ЗначенияПоказателейПроцентСевернойНадбавки();
	ЗаполнитьЗначенияПоказателейСотрудниковПоТаблицеИнтервалов(ПоказателиСотрудников.ПоказателиПроцентСевернойНадбавки, ЗначенияПоказателейПроцентСевернойНадбавки, СтрокиНачисленийПоИдентификаторам, "Сотрудник");			
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяБазовыйТарифГруппы(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	ЗаполняемыеПоказатели = ПоказателиСотрудников.ПоказателиБазовыйТарифГруппы;
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияБазовыхТарифов = ЗначенияБазовыхТарифов();
	
	ЗаполняемыеПоказатели.Сортировать("Сотрудник, Показатель, Период", Новый СравнениеЗначений);	
	
	ОбходТаблицыЗначенияПоказателей = ОбходТаблицы(ЗначенияБазовыхТарифов, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина); 

	СтрокаЗначенияПоказателя = Неопределено;
	Для Каждого СтрокаТаблицыПоказателей Из ЗаполняемыеПоказатели Цикл
		СтрокаЗначенияПоказателя = СледующаяСтрокаВключающаяПериод(ОбходТаблицыЗначенияПоказателей, СтрокаТаблицыПоказателей, СтрокаТаблицыПоказателей.Период, СтрокаЗначенияПоказателя);
		                                      
		Если СтрокаЗначенияПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаТаблицыПоказателей.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаТаблицыПоказателей.Показатель, СтрокаЗначенияПоказателя.Тариф);
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенком(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	ЗаполняемыеПоказатели = ПоказателиСотрудников.ПоказателиРазмерПособияПоУходуЗаРебенком;
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтр = ЗаполняемыеПоказатели.Скопировать(, "Период"); 
	ТаблицаФильтр.Свернуть("Период");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтр);
	
	РазмерыГосударственныхПособий = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраСрезПоследних(
										"РазмерыГосударственныхПособий",
										Новый МенеджерВременныхТаблиц,
										Истина,
										ОписаниеФильтра);
	
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		РазмерПособия = РазмерыГосударственныхПособий.Найти(СтрокаПоказателя.Период);
		Если РазмерПособия <> Неопределено Тогда
			СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, РазмерПособия.ПоУходуЗаРебенкомДоТрехЛет);		
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРайонныйКоэффициентРФ(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	ЗаполняемыеПоказатели = ПоказателиСотрудников.ПоказателиРайонныйКоэффициентРФ;
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;		
		
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		Значение = РасчетЗарплатыРасширенный.РайонныйКоэффициентРФ(СтрокаПоказателя.Подразделение);
		СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, Значение);		
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейПроцентДоплатыЗаРаботуВНочноеВечернееВремя(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	ЗаполняемыеПоказатели = ПоказателиСотрудников.ПоказателиРазмерДоплатыВВечернееНочноеВремя;
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;		
	
	ПроцентДоплатыЗаНочные = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя");
	ПроцентДоплатыЗаВечерние = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя");
	
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
		Если ЗначениеЗаполнено(ПроцентДоплатыЗаНочные) И СтрокаПоказателя.Показатель = ПроцентДоплатыЗаНочные Тогда
			Значение = ЗарплатаКадрыРасширенныйПовтИсп.ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(СтрокаПоказателя.Организация).ПроцентДоплатыЗаРаботуВНочноеВремя;
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, Значение);	
		Иначе
			Значение = ЗарплатаКадрыРасширенныйПовтИсп.ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(СтрокаПоказателя.Организация).ПроцентДоплатыЗаРаботуВВечернееВремя;
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, Значение);	
	    КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейСотрудниковПоТаблицеИнтервалов(ЗаполняемыеПоказатели, ЗначенияПоказателей, СтрокиПоИдентификаторам, ИмяПоляСотрудник, ОтборПоОрганизации = Ложь)
	
	КлючОтбора = ИмяПоляСотрудник + ", Показатель";
	Если ОтборПоОрганизации Тогда
		КлючОтбора = КлючОтбора + ", Организация";
	КонецЕсли;
	
	КлючОтбораПоОснованию = КлючОтбора + ", ДокументОснование";
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ЗначенияПоказателей, КлючОтбора);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ЗначенияПоказателей, КлючОтбораПоОснованию);
	Отбор = Новый Структура(КлючОтбора);
	ОтборПоОснованию = Новый Структура(КлючОтбораПоОснованию);
	
	СтрокаЗначенияПоказателя = Неопределено;
	Для Каждого СтрокаТаблицыПоказателей Из ЗаполняемыеПоказатели Цикл
		Если СтрокаТаблицыПоказателей.УчитватьДокументОснование Тогда
			ТекущийОтбор = ОтборПоОснованию;
		Иначе
			ТекущийОтбор = Отбор;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущийОтбор, СтрокаТаблицыПоказателей);
		СтрокиЗначений = ЗначенияПоказателей.НайтиСтроки(ТекущийОтбор);
		СтрокаЗначенияПоказателя = СтрокаВключающаяДату(СтрокиЗначений, СтрокаТаблицыПоказателей.Период); 
		
		РассчитывемаяСтрока = СтрокиПоИдентификаторам[СтрокаТаблицыПоказателей.ИдентификаторСтроки];
		
		Если СтрокаЗначенияПоказателя <> Неопределено Тогда
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(РассчитывемаяСтрока, СтрокаТаблицыПоказателей.Показатель, СтрокаЗначенияПоказателя.Значение);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция ПоказателиСотрудников()
	Если КэшПоказателиСотрудников <> Неопределено Тогда
		Возврат КэшПоказателиСотрудников;
	КонецЕсли;	
	
	ДополнительныеПоказатели = ДополнительныеПоказатели();
	
	ТаблицаПоказателейСотрудникаШаблон = Новый ТаблицаЗначений;
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ДокументОснование");
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("УчитватьДокументОснование", Новый ОписаниеТипов("Булево"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
			
	ТебованияНачислений = ТребованияНачисленийТаблица();
	ПоказателиНачислений = ПоказателиНачислений();
	
	ИзвестныеПоказатели = ИзвестныеПоказателиНачислений();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ИзвестныеПоказатели, "Показатель, ИдентификаторСтроки");
	СтруктураПоискаИзвестных = Новый Структура("Показатель, ИдентификаторСтроки");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ОпределяющиеПоказатели, "Сотрудник, Организация, Показатель, Дата");	
	СтруктураПоискаОпределяющих = Новый Структура("Сотрудник, Организация, Показатель, Дата");
		
	ПоказательДоляНеполногоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");
		
	СтоимостьЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса");
	СтоимостьДняПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня");
	СтоимостьДняЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	
	ПоказателиСтртимостиДняЧаса = Новый Соответствие;
	ПоказателиСтртимостиДняЧаса.Вставить(СтоимостьЧасаПоказатель, Истина);
	ПоказателиСтртимостиДняЧаса.Вставить(СтоимостьДняПоказатель, Истина);
	ПоказателиСтртимостиДняЧаса.Вставить(СтоимостьДняЧасаПоказатель, Истина);
	
	ВремяВДнях = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	ВремяВДняхЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");
	ВремяВЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах");
	
	ПоказателиРабочегоВремени = Новый Соответствие();
	ПоказателиРабочегоВремени.Вставить(ВремяВДнях, Истина);
	ПоказателиРабочегоВремени.Вставить(ВремяВЧасах, Истина);
	ПоказателиРабочегоВремени.Вставить(ВремяВДняхЧасах, Истина);
	
	РазмерПособияДоТрехЛет = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛет");
	ПроцентСевернойНадбавкиПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка");
	РайонныйКоэффициентРФ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ");

	ПроцентДоплатыЗаНочные = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя");
	ПроцентДоплатыЗаВечерние = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя");

	ПоказателиРазмерДоплатыВВечернееНочноеВремя = Новый Соответствие;
	ПоказателиРазмерДоплатыВВечернееНочноеВремя.Вставить(ПроцентДоплатыЗаНочные, Истина);
	ПоказателиРазмерДоплатыВВечернееНочноеВремя.Вставить(ПроцентДоплатыЗаВечерние, Истина);

	БазовыйТарифГруппы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.БазовыйТарифГруппы");
	
	СреднийЗаработокОбщий = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	
	ОписаниеСтажевыхПоказателейНачислений = ОписаниеСтажевыхПоказателейНачислений();
	
	ПоказателиСтоимостьЧасаДняТаблица = ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки();
	ПоказателиСтоимостьЧасаДняТаблица.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	
	ПоказателиРабочегоВремениТаблица = ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки();
	ПоказателиРабочегоВремениТаблица.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	ПоказателиРабочегоВремениТаблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ПоказателиРабочегоВремениТаблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
	ПоказателиСотрудников = Новый Структура;
	ПоказателиСотрудников.Вставить("ПериодическиеПоказателиСотрудников", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПериодическиеПоказателиПодразделений", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПериодическиеПоказателиОрганизаций", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("РазовыеПоказателиСотрудников", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("РазовыеПоказателиПодразделений", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("РазовыеПоказателиОрганизаций", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиДоляНеполногоВремени", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиСтоимостьЧасаДня", ПоказателиСтоимостьЧасаДняТаблица);
	ПоказателиСотрудников.Вставить("СтажевыеПоказатели", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиРазмерПособияПоУходуЗаРебенком", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиПроцентСевернойНадбавки", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиРайонныйКоэффициентРФ", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиРазмерДоплатыВВечернееНочноеВремя", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиБазовыйТарифГруппы", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиРабочегоВремени", ПоказателиРабочегоВремениТаблица); 
	ПоказателиСотрудников.Вставить("ДополнительныеПоказатели", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	
	ПоказателиСотрудников.ДополнительныеПоказатели.Колонки.Удалить("ДокументОснование");
	ПоказателиСотрудников.ДополнительныеПоказатели.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ПоказателиСотрудников.ДополнительныеПоказатели.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	
	ПоказателиСотрудников.Вставить("ИзвестныеПоказатели", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.ИзвестныеПоказатели.Колонки.Добавить("СтрокаТаблицыРасчета");
	
	Для Каждого ТекущаяСтрокаНачислений Из Начисления Цикл
		СтруктураПоискаИзвестных.ИдентификаторСтроки = ТекущаяСтрокаНачислений.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(СтруктураПоискаОпределяющих, ТекущаяСтрокаНачислений);
		СтруктураПоискаОпределяющих.Дата = ТекущаяСтрокаНачислений.ДатаНачала;
		ПоказателиТекущегоНачисления = ПоказателиНачислений[ТекущаяСтрокаНачислений.Начисление];
		
		Если ПоказателиТекущегоНачисления = Неопределено 
			Или ТекущаяСтрокаНачислений.ФиксЗаполнение Тогда
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущийПоказатель Из ПоказателиТекущегоНачисления Цикл
			СтруктураПоискаИзвестных.Показатель = ТекущийПоказатель.Показатель;
			СтруктураПоискаОпределяющих.Показатель = ТекущийПоказатель.Показатель; 
			ЗначенияИзвестныхПоказателей = ИзвестныеПоказатели.НайтиСтроки(СтруктураПоискаИзвестных);
			ЗначенияОпределяющихПоказателей = ОпределяющиеПоказатели.НайтиСтроки(СтруктураПоискаОпределяющих); 
			
			ПолучатьДанныеНаНачалоМесяца = Ложь;
			ПолучатьДанныеЗаПериод = Ложь;	
			Если ЗначенияИзвестныхПоказателей.Количество() > 0 Тогда
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ИзвестныеПоказатели.Добавить();	
				СтрокаТаблицПоказателей.Значение = ЗначенияИзвестныхПоказателей[0].Значение;
				СтрокаТаблицПоказателей.СтрокаТаблицыРасчета = ТекущаяСтрокаНачислений;
			ИначеЕсли ЗначенияОпределяющихПоказателей.Количество() > 0 Тогда
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ИзвестныеПоказатели.Добавить();	
				СтрокаТаблицПоказателей.Значение = ЗначенияОпределяющихПоказателей[0].Значение;
				СтрокаТаблицПоказателей.СтрокаТаблицыРасчета = ТекущаяСтрокаНачислений;
			ИначеЕсли ТекущийПоказатель.Показатель = СреднийЗаработокОбщий
				И ЗначениеЗаполнено(ТекущаяСтрокаНачислений.ДокументОснование) Тогда 	
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиСотрудников.Добавить();	
				
				СтрокаТаблицПоказателей.УчитватьДокументОснование = Истина;				
			ИначеЕсли ДополнительныеПоказатели.Найти(ТекущийПоказатель.Показатель) <> Неопределено Тогда
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ДополнительныеПоказатели.Добавить();
			ИначеЕсли ТекущийПоказатель.Показатель = ПоказательДоляНеполногоВремени Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиДоляНеполногоВремени.Добавить();	
				
			ИначеЕсли ПоказателиРабочегоВремени[ТекущийПоказатель.Показатель] = Истина Тогда
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиРабочегоВремени.Добавить();	
				ПолучатьДанныеЗаПериод = Истина;		
				
			ИначеЕсли ПоказателиСтртимостиДняЧаса[ТекущийПоказатель.Показатель] = Истина Тогда
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиСтоимостьЧасаДня.Добавить();
				
			ИначеЕсли ОписаниеСтажевыхПоказателейНачислений[ТекущийПоказатель.Показатель] <> Неопределено Тогда
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.СтажевыеПоказатели.Добавить();	
				
			ИначеЕсли ТекущийПоказатель.Показатель = РазмерПособияДоТрехЛет Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиРазмерПособияПоУходуЗаРебенком.Добавить();
				ПолучатьДанныеНаНачалоМесяца = Истина;
				
			ИначеЕсли ТекущийПоказатель.Показатель = ПроцентСевернойНадбавкиПоказатель Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиПроцентСевернойНадбавки.Добавить();	
				
			ИначеЕсли ТекущийПоказатель.Показатель = РайонныйКоэффициентРФ Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиРайонныйКоэффициентРФ.Добавить();
				
			ИначеЕсли ПоказателиРазмерДоплатыВВечернееНочноеВремя[ТекущийПоказатель.Показатель] = Истина Тогда
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиРазмерДоплатыВВечернееНочноеВремя.Добавить();		
				
			ИначеЕсли ТекущийПоказатель.Показатель = БазовыйТарифГруппы Тогда	
				
				Если ТекущийПоказатель.ЗапрашиватьПриВводе Тогда
					СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиСотрудников.Добавить();
				Иначе
					СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиБазовыйТарифГруппы.Добавить();
				КонецЕсли;	
				
			ИначеЕсли ТекущийПоказатель.ПериодическийПоказательСотрудника Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиСотрудников.Добавить();	
				
				Если ТекущийПоказатель.ЗапрашиватьПриВводе Тогда
					СтрокаТаблицПоказателей.УчитватьДокументОснование = Истина;
				КонецЕсли;	
				
			ИначеЕсли ТекущийПоказатель.ПериодическийПоказательПодразделения Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиПодразделений.Добавить();
				
			ИначеЕсли ТекущийПоказатель.ПериодическийПоказательОрганизации Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиОрганизаций.Добавить();		
				
			ИначеЕсли ТекущийПоказатель.РазовыйПоказательСотрудника Тогда 

				СтрокаТаблицПоказателей = ПоказателиСотрудников.РазовыеПоказателиСотрудников.Добавить();
				ПолучатьДанныеНаНачалоМесяца = Истина;
				
			ИначеЕсли ТекущийПоказатель.РазовыйПоказательПодразделения Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.РазовыеПоказателиПодразделений.Добавить();
				ПолучатьДанныеНаНачалоМесяца = Истина;
				
			ИначеЕсли ТекущийПоказатель.РазовыйПоказательОрганизации Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиСотрудников.РазовыеПоказателиОрганизаций.Добавить();
				ПолучатьДанныеНаНачалоМесяца = Истина;	
				
			Иначе
				Продолжить;
			КонецЕсли; 	
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицПоказателей, ТекущаяСтрокаНачислений);
			СтрокаТаблицПоказателей.Показатель = ТекущийПоказатель.Показатель;
			
			Если ПолучатьДанныеНаНачалоМесяца Тогда
				СтрокаТаблицПоказателей.Период = НачалоМесяца(ТекущаяСтрокаНачислений.ДатаНачала);	
			ИначеЕсли ТебованияНачислений[ТекущаяСтрокаНачислений.Начисление].НачисляетсяВЦеломЗаМесяц Тогда
				СтрокаТаблицПоказателей.Период = ТекущаяСтрокаНачислений.ДатаОкончания;
			Иначе
				СтрокаТаблицПоказателей.Период = ТекущаяСтрокаНачислений.ДатаНачала;
			КонецЕсли;			
		КонецЦикла;		
	КонецЦикла;	
	
	КэшПоказателиСотрудников = ПоказателиСотрудников;
	
	ПоказателиСотрудников.ДополнительныеПоказатели.Колонки.Период.Имя = "ДатаНачала";
	
	Возврат ПоказателиСотрудников;
КонецФункции	

Функция ИзвестныеПоказателиНачислений()
	ИзвестныеПоказатели = ТаблицаПоказателей();
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		Для Каждого СтрокаПоказателя Из СтрокаНачисления.ИзвестныеПоказатели Цикл
			НоваяСтрока = ИзвестныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателя);
			НоваяСтрока.ИдентификаторСтроки = СтрокаНачисления.ИдентификаторСтроки;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИзвестныеПоказатели;
КонецФункции	

#Область ДополнительныеПоказателиНачислений

Процедура ЗаполнитьЗначенияПереопределяемыхПоказателейНачислений(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам)
	
	ЗаполняемыеПоказатели = ТаблицаПоказателей();
		
	ПростоиСотрудников.ЗаполнитьЗначенияПоказателяТарифПростояПоТаблицеПоказателей(ПоказателиСотрудников.ДополнительныеПоказатели, ЗаполняемыеПоказатели, СводныеДанныеПлановыхНачисленийСотрудников());
	ЗарплатаКадрыРасширенный.ЗаполнитьЗначенияПоказателейРасчетаЗарплатыПоТаблицеЗначений(ПоказателиСотрудников.ДополнительныеПоказатели, ЗаполняемыеПоказатели);
	УчетСреднегоЗаработка.ЗаполнитьЗначенияПоказателейРасчетаЗарплатыПоТаблицеЗначений(ПоказателиСотрудников.ДополнительныеПоказатели, ЗаполняемыеПоказатели);
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьЗначенияПоказателейРасчетаЗарплатыПоТаблицеЗначений(ПоказателиСотрудников.ДополнительныеПоказатели, ЗаполняемыеПоказатели);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ЗаполнитьЗначенияПоказателейЭффективностиСотрудниковПоТаблицеЗначений(ПоказателиСотрудников.ДополнительныеПоказатели, ЗаполняемыеПоказатели);
	КонецЕсли;	

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.РассчитатьПоказательСреднемесячноеКоличествоДнейПоТаблицеЗначений(ПоказателиСотрудников.ДополнительныеПоказатели, ЗаполняемыеПоказатели);
	КонецЕсли;
	//
	//РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьЗначенияДополнительныхПоказателейПоВТ(МенеджерВременныхТаблиц, ДополнительныеПоказатели);
	//
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		Строка = СтрокиНачисленийПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, СтрокаПоказателя.Показатель, СтрокаПоказателя.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияПереопределяемыхПоказателейПрежнейВерсии(СтрокиНачисленийПоИдентификаторам);
	
КонецПроцедуры

Функция ДополнительныеПоказатели()
	ДополнительныеПоказатели = Новый Массив;
	
	ПростоиСотрудников.ПриОпределенииДополнительныхПоказателей(ДополнительныеПоказатели);
	
	ЗарплатаКадрыРасширенный.ПриОпределенииДополнительныхПоказателей(ДополнительныеПоказатели);
	УчетСреднегоЗаработка.ПриОпределенииДополнительныхПоказателей(ДополнительныеПоказатели);
	УчетПособийСоциальногоСтрахованияРасширенный.ПриОпределенииДополнительныхПоказателей(ДополнительныеПоказатели);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ПриОпределенииДополнительныхПоказателей(ДополнительныеПоказатели);
	КонецЕсли;	

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПриОпределенииДополнительныхПоказателей(ДополнительныеПоказатели);
	КонецЕсли;
	
	Возврат ДополнительныеПоказатели;
КонецФункции	

// Процедура для совместимости с предыдущей реализацией переопределяемого метода.
//
Процедура ЗаполнитьЗначенияПереопределяемыхПоказателейПрежнейВерсии(СтрокиПоИдентификатору)
	
КонецПроцедуры

#Область ЗначенияПредопределенныхПоказателей	

#Область СтоимостьЧасаДня

Функция СтоимостьЧасаДня(ЗаполняемыеПоказатели)
	СтоимостьЧасаДня = Новый Соответствие;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	
	ЗаполняемыеПоказатели.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);
	
	ПоказателиСтоимости = ПоказателиСтоимостиЧасаДня();
	
	ОтборПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиСтоимости, "Значение");
	ТочностьПоказателей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОтборПоказателей, "Точность");
		
	ЗначенияСовокупныхТарифныхСтавок = СводныеДанныеПлановыхНачисленийСотрудников();
	ОбходТаблицыСовокупныхСтавок = ОбходТаблицы(ЗначенияСовокупныхТарифныхСтавок, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);
	
	ГрафикиСотрудников = ИсточникиДанныхУчетаВремени();
	ОбходТаблицыГрафиков = ОбходТаблицы(ГрафикиСотрудников, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);
	
	КадроваяИстория = КадроваяИстория();
	ОбходКадровойИстории = ОбходТаблицы(КадроваяИстория, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);
		
	СотрудникиФильтрДляРасчетаСтавок = НовыйТаблицаФильтрПоСотрудникам();
	
	КадровыеДанныеПоИдентфикаторамСтрок = Новый Соответствие;
	ЗначенияСовокупныхСтавокПоИдентфикаторамСтрок = Новый Соответствие;
	ГрафикиСотрудниковПоИдентифкаторам = Новый Соответствие;
	ПорядокРасчетаПоИдентефикаторам = Новый Соответствие;
	ОтборОсновныхНачислений = Новый Соответствие;
	
	ТекущееЗначениеСтавки = Неопределено;
	ГрафикСотрудника = Неопределено;
	КадровыеДанные = Неопределено;
	СтрокиПоказателейКРасчету = Новый Массив;
	
	Для Каждого СтрокаПоказателей Из ЗаполняемыеПоказатели Цикл
		ТекущееЗначениеСтавки = СледующаяСтрокаВключающаяПериод(ОбходТаблицыСовокупныхСтавок, СтрокаПоказателей, СтрокаПоказателей.Период, ТекущееЗначениеСтавки);
		Если ТекущееЗначениеСтавки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		КадровыеДанные = СледующаяСтрокаВключающаяПериод(ОбходКадровойИстории, СтрокаПоказателей, СтрокаПоказателей.Период, КадровыеДанные); 
		ГрафикСотрудника = СледующаяСтрокаВключающаяПериод(ОбходТаблицыГрафиков, СтрокаПоказателей, СтрокаПоказателей.Период, ГрафикСотрудника);
		
		Если НеобходимоНормированиеПоказателяСтоимостиЧасаДня(СтрокаПоказателей.Показатель, ТекущееЗначениеСтавки, СтрокаПоказателей.ВремяВЧасах, ПоказателиСтоимости) Тогда 
			СтрокаФильтра = СотрудникиФильтрДляРасчетаСтавок.Добавить();
			СтрокаФильтра.Сотрудник = СтрокаПоказателей.Сотрудник;
			СтрокаФильтра.ДатаНачала = НачалоМесяца(СтрокаПоказателей.Период);
			СтрокаФильтра.ДатаОкончания = КонецМесяца(СтрокаПоказателей.Период);
			
			ЗначенияСовокупныхСтавокПоИдентфикаторамСтрок.Вставить(СтрокаПоказателей.ИдентификаторСтроки, ТекущееЗначениеСтавки);
			ГрафикиСотрудниковПоИдентифкаторам.Вставить(СтрокаПоказателей.ИдентификаторСтроки, ГрафикСотрудника);	
			КадровыеДанныеПоИдентфикаторамСтрок.Вставить(СтрокаПоказателей.ИдентификаторСтроки, КадровыеДанные);
			
			ОтборОсновныхНачислений.Вставить(ТекущееЗначениеСтавки.ОсновноеНачисление);
			СтрокиПоказателейКРасчету.Добавить(СтрокаПоказателей);
		Иначе	
			Значение = ОкруглитьЗначениеПоказателя(ТекущееЗначениеСтавки.СовокупнаяТарифнаяСтавка, СтрокаПоказателей.Показатель, ТочностьПоказателей); 
			СтоимостьЧасаДня.Вставить(СтрокаПоказателей.ИдентификаторСтроки, Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	Если СотрудникиФильтрДляРасчетаСтавок.Количество() = 0 Тогда
		Возврат СтоимостьЧасаДня;
	КонецЕсли;	
	
	ОтборОсновныхНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ОтборОсновныхНачислений, "Ключ");
	ПоказателиОсновныхНачислений = ПланыВидовРасчета.Начисления.ПоказателиНачислений(ОтборОсновныхНачислений);
	СвойстваОсновныхНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборОсновныхНачислений, "УчетВремениВЧасах");
	
	СвойстваОбщихГрафиков = СвойстваОбщихГрафиков();
	СвойстваОбщихГрафиковПоИдентифкаторамСтрок = Новый Соответствие;
	
	СотрудникиФильтрДляРасчетаСтавок.Свернуть("Сотрудник, ДатаНачала, ДатаОкончания");
		
	ФильтрПолученияНормыВремени = МенеджерУчетаВремени.НовыйФильтрПолученияНормыВремени();
	ФильтрПолученияДанныхКалендарей = УчетРабочегоВремениРасширенный.НовыйФильтрПолученияСводныхДанныхКалендарей();
	
	ПорядокРасчетаСтоимостиЕдицницыВремени = РасчетЗарплатыРасширенный.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(СотрудникиФильтрДляРасчетаСтавок);
	ОбходТаблицыПорядкаРасчета = ОбходТаблицы(ПорядокРасчетаСтоимостиЕдицницыВремени, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);
	
	ПорядокРасчетаПоУмолчанию = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты().ПорядокРасчетаСтоимостиЕдиницыВремени;
	ТекущаяСтрокаПорядкаРасчета = Неопределено;
	Для Каждого СтрокаПоказателей Из СтрокиПоказателейКРасчету Цикл		
		ТекущаяСтрокаПорядкаРасчета = СледующаяСтрокаВключающаяПериод(ОбходТаблицыПорядкаРасчета, СтрокаПоказателей, СтрокаПоказателей.Период, ТекущаяСтрокаПорядкаРасчета); 
		ПорядокРасчета = ?(ТекущаяСтрокаПорядкаРасчета = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрокаПорядкаРасчета.ПорядокРасчета), ПорядокРасчетаПоУмолчанию, ТекущаяСтрокаПорядкаРасчета.ПорядокРасчета);
		ПорядокРасчетаПоИдентефикаторам.Вставить(СтрокаПоказателей.ИдентификаторСтроки, ПорядокРасчета);
		
		ГрафикСотрудника = ГрафикиСотрудниковПоИдентифкаторам[СтрокаПоказателей.ИдентификаторСтроки];
		Если ГрафикСотрудника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваТекущегоГрафика = СвойстваОбщихГрафиков[ГрафикСотрудника.ОбщийГрафик];
		СвойстваОбщихГрафиковПоИдентифкаторамСтрок.Вставить(СтрокаПоказателей.ИдентификаторСтроки, СвойстваТекущегоГрафика);

		ДанныеПлановыхНачисленийСотрудника = ЗначенияСовокупныхСтавокПоИдентфикаторамСтрок[СтрокаПоказателей.ИдентификаторСтроки];
		СвойстваОсновногоНачисления = СвойстваОсновныхНачислений[ДанныеПлановыхНачисленийСотрудника.ОсновноеНачисление];
				
		Если НеобходыимДанныеГрафикаДляРасчетаСтоимостиЧасаДня(ПорядокРасчета, СвойстваТекущегоГрафика, СвойстваОсновногоНачисления) Тогда	
			СтрокаФильтра = ФильтрПолученияНормыВремени.Добавить();
			СтрокаФильтра.ИсточникДанныхНормыВремени = ГрафикСотрудника.ИсточникданныхНормыВремени;
			СтрокаФильтра.ПериодРегистрацииНормыВремени = ГрафикСотрудника.ПериодРегистрацииНормыВремени;
			СтрокаФильтра.Месяц = НачалоМесяца(СтрокаПоказателей.Период);
		КонецЕсли;
		Если ПорядокРасчета <> Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
			СтрокаФильтра = ФильтрПолученияДанныхКалендарей.Добавить();
			СтрокаФильтра.ПроизводственныйКалендарь = СвойстваОбщихГрафиков[ГрафикСотрудника.ОбщийГрафик].ПроизводственныйКалендарь;
			СтрокаФильтра.Месяц = НачалоМесяца(СтрокаПоказателей.Период);
		КонецЕсли;	
	КонецЦикла;	 
	
	НормаВремениПоИсточникам = МенеджерДанныхУчетаВремени.НормаВремениПоИсточникамДанных(ФильтрПолученияНормыВремени);	
	ДанныеКалендарей = УчетРабочегоВремениРасширенный.ДанныеПроизводственныхКалендарейСводно(ФильтрПолученияДанныхКалендарей);		
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НормаВремениПоИсточникам, "ИсточникДанныхНормыВремени, ПериодРегистрацииНормыВремени, Месяц");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеКалендарей, "ПроизводственныйКалендарь, Месяц");
			
	ИсходныеДанныеДляРасчета = СтруктураИсходныхДанныхДляРасчетаСтоимостиЧасаДня();
	Для Каждого СтрокаПоказателей Из СтрокиПоказателейКРасчету Цикл		
		ГрафикСотрудника = ГрафикиСотрудниковПоИдентифкаторам[СтрокаПоказателей.ИдентификаторСтроки];
		
		НормаВремениПоСотруднику = Неопределено;
		ДанныеКалендаряПоСотруднику = Неопределено;
		СвойстваТекущегоГрафика = Неопределено;
		Если ГрафикСотрудника <> Неопределено Тогда
			НормаВремениПоСотруднику = НормаВремениПоИсточникуДанных(НормаВремениПоИсточникам, ГрафикСотрудника, НачалоМесяца(СтрокаПоказателей.Период));
			ДанныеКалендаряПоСотруднику = ДанныеКалендаряПоИсточникуДанных(ДанныеКалендарей, ГрафикСотрудника, НачалоМесяца(СтрокаПоказателей.Период), СвойстваОбщихГрафиков);
			СвойстваТекущегоГрафика = СвойстваОбщихГрафиков[ГрафикСотрудника.ОбщийГрафик];
		КонецЕсли;	
		
		ДанныеПлановыхНачисленийСотрудника = ЗначенияСовокупныхСтавокПоИдентфикаторамСтрок[СтрокаПоказателей.ИдентификаторСтроки];
				
		ЗаполнитьДанныеНачисленийРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, ДанныеПлановыхНачисленийСотрудника, ПорядокРасчетаПоИдентефикаторам[СтрокаПоказателей.ИдентификаторСтроки], ПоказателиОсновныхНачислений);
		ЗаполнитьНормыГрафикаРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, НормаВремениПоСотруднику, СвойстваТекущегоГрафика);
		ЗаполнитьНормыКалендаряРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, ДанныеКалендаряПоСотруднику, СвойстваТекущегоГрафика);
		
		ЗаполнитьДополнительныеДанныеРасчетаСтоимостиЧасаДня(
			ИсходныеДанныеДляРасчета,
			КадровыеДанныеПоИдентфикаторамСтрок[СтрокаПоказателей.ИдентификаторСтроки],
			СвойстваОсновныхНачислений[ДанныеПлановыхНачисленийСотрудника.ОсновноеНачисление],
			СтрокаПоказателей.ВремяВЧасах,
			СвойстваТекущегоГрафика);
			
		Значение = РассчитатьЗначениеСтоимостиЧасаДня(СтрокаПоказателей.Показатель, ИсходныеДанныеДляРасчета, ПоказателиСтоимости, ТочностьПоказателей); 	
		
		СтоимостьЧасаДня.Вставить(СтрокаПоказателей.ИдентификаторСтроки, Значение);
	КонецЦикла;	
 
	Возврат СтоимостьЧасаДня;	
КонецФункции

Функция НеобходыимДанныеГрафикаДляРасчетаСтоимостиЧасаДня(ПорядокРасчета, СвойстваГрафика, СвойстваОсновногоНачисления)
	Если СвойстваГрафика = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СвойстваОсновногоНачисления <> Неопределено
		И СвойстваОсновногоНачисления.УчетВремениВЧасах
		И СвойстваГрафика.НеполныйРабочийДень 
		И ЗначениеЗаполнено(СвойстваГрафика.ГрафикПолногоРабочегоВремени) Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции	

Функция РассчитатьЗначениеСтоимостиЧасаДня(Показатель, ИсходныеДанныеДляРасчета, ПоказателиСтоимости, ТочностьПоказателей)
	Значение = 0;
	Если НеобходимРасчетСтоимостиДня(Показатель, ИсходныеДанныеДляРасчета.ВидТарифнойСтавки, ИсходныеДанныеДляРасчета.РасчетВремениВЧасах, ПоказателиСтоимости) Тогда
		Значение = РассчитатьЗначениеСтоимостиДня(ИсходныеДанныеДляРасчета);	
	ИначеЕсли НеобходимРасчетСтоимостиЧаса(Показатель, ИсходныеДанныеДляРасчета.ВидТарифнойСтавки, ИсходныеДанныеДляРасчета.РасчетВремениВЧасах, ПоказателиСтоимости) Тогда
		Значение = РассчитатьЗначениеСтоимостиЧаса(ИсходныеДанныеДляРасчета);	
	Иначе
		Значение = ИсходныеДанныеДляРасчета.СовокупнаяТарифнаяСтавка		
	КонецЕсли;	
	
	Точность = ТочностьПоказателей[Показатель];
	
	Значение = ОкруглитьЗначениеПоказателя(Значение, Показатель, ТочностьПоказателей);
	
	Возврат Значение;
КонецФункции	

Функция РассчитатьЗначениеСтоимостиЧаса(Выборка)
	Значение = 0;
	
	// * Если показатель сотрудника - часовая ставка, значение не пересчитываем.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		Возврат Выборка.СовокупнаяТарифнаяСтавка;
	КонецЕсли;
	
	// * Если показатель сотрудника - дневная ставка, пересчитываем в часовую.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
			Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовГрафикаМесяц * Выборка.НормаДнейГрафикаМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
			Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряМесяц * Выборка.НормаДнейКалендаряМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
			Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряГод * Выборка.НормаДнейКалендаряГод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
	Если Выборка.ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
		Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
			Если Выборка.УчетВремениВЧасах Тогда
				Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовПолногоГрафикаМесяц;
				КонецЕсли;
			Иначе 
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовПолногоГрафикаМесяц;
				ИначеЕсли Не Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени И Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовГрафикаМесяц;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаЧасовГрафикаМесяц;
				Иначе
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовГрафикаМесяц;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
		Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
			Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряМесяц;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
		Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
			Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряГод * 12;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция РассчитатьЗначениеСтоимостиДня(Выборка)	
	Значение = 0;
	// * Если показатель сотрудника - дневная ставка, значение не пересчитываем.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		Возврат Выборка.СовокупнаяТарифнаяСтавка;
	КонецЕсли;
	
	// * Если показатель сотрудника - часовая ставка, пересчитываем в дневную.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
			Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаДнейГрафикаМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
			Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.НормаЧасовКалендаряМесяц / Выборка.НормаДнейКалендаряМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
			Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.НормаЧасовКалендаряГод / Выборка.НормаДнейКалендаряГод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
	Если Выборка.ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
		Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
			Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 И Выборка.НормаДнейГрафикаМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаЧасовПолногоГрафикаМесяц / Выборка.НормаДнейГрафикаМесяц;
			КонецЕсли;
		Иначе 
			Если Выборка.НормаДнейГрафикаМесяц <> 0 Тогда
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаДнейГрафикаМесяц;
				Иначе
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаДнейГрафикаМесяц;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
		Если Выборка.НормаДнейКалендаряМесяц <> 0 Тогда
			Если Выборка.УчетВремениВЧасах И Выборка.НеполныйРабочийДень 
				И ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаЧасовПолногоГрафикаМесяц / Выборка.НормаДнейКалендаряМесяц;
			Иначе 
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаДнейКалендаряМесяц;		
				Иначе
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаДнейКалендаряМесяц;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
		Если Выборка.НормаДнейКалендаряГод <> 0 Тогда
			Если Выборка.УчетВремениВЧасах И Выборка.НеполныйРабочийДень 
				И ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаЧасовПолногоГрафикаМесяц / Выборка.НормаДнейКалендаряГод * 12;
			Иначе 
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка  * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаДнейКалендаряГод * 12;	
				Иначе	
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаДнейКалендаряГод * 12;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция ОкруглитьЗначениеПоказателя(Значение, Показатель, ТочностьПоказателей)
	Точность = ТочностьПоказателей[Показатель];
	
	Если Точность <> Неопределено Тогда
		Значение = Окр(Значение, Точность);
	КонецЕсли;
	
	Возврат Значение;
КонецФункции	

Функция ПоказателиСтоимостиЧасаДня()
	ПоказателиСтоимости = Новый Структура("СтоимостьДняПоказатель, СтоимостьДняЧасаПоказатель, СтоимостьЧасаПоказатель");	
	ПоказателиСтоимости.СтоимостьДняПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня");
	ПоказателиСтоимости.СтоимостьДняЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	ПоказателиСтоимости.СтоимостьЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса");
	
	Возврат ПоказателиСтоимости;
КонецФункции	

Функция НеобходимоНормированиеПоказателяСтоимостиЧасаДня(Показатель, СвойстваТарифнойСтавки, ВремяВЧасах, ПоказателиСтомостиЧасаДня)
	Если СвойстваТарифнойСтавки = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли НеобходимРасчетСтоимостиДня(Показатель, СвойстваТарифнойСтавки.ВидТарифнойСтавки, ВремяВЧасах, ПоказателиСтомостиЧасаДня) Тогда
		Возврат Истина;
	ИначеЕсли НеобходимРасчетСтоимостиЧаса(Показатель, СвойстваТарифнойСтавки.ВидТарифнойСтавки, ВремяВЧасах, ПоказателиСтомостиЧасаДня) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции

Функция НеобходимРасчетСтоимостиДня(Показатель, ВидТарифнойСтавки, ВремяВЧасах, ПоказателиСтомостиЧасаДня)
	Если Показатель = ПоказателиСтомостиЧасаДня.СтоимостьДняПоказатель 
		И ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Если Показатель = ПоказателиСтомостиЧасаДня.СтоимостьДняЧасаПоказатель
		И (Не ВремяВЧасах
		И ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка) Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции	

Функция НеобходимРасчетСтоимостиЧаса(Показатель, ВидТарифнойСтавки, ВремяВЧасах, ПоказателиСтомостиЧасаДня)
	Если Показатель = ПоказателиСтомостиЧасаДня.СтоимостьЧасаПоказатель 
		И ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Если Показатель = ПоказателиСтомостиЧасаДня.СтоимостьДняЧасаПоказатель
		И (ВремяВЧасах
		И ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка) Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции

Функция НормаВремениПоИсточникуДанных(НормаВремениПоИсточникам, ТекущийИсточникДанных, Месяц)
	СтруктураПоиска = Новый Структура("ИсточникДанныхНормыВремени, ПериодРегистрацииНормыВремени, Месяц");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущийИсточникДанных);
	СтруктураПоиска.Месяц = Месяц;
	
	Возврат СтрокаТаблицыПоСтруктуреПоиска(НормаВремениПоИсточникам, СтруктураПоиска);
КонецФункции	

Функция СтруктураИсходныхДанныхДляРасчетаСтоимостиЧасаДня()
	СтруктураИсходныхДанных = Новый Структура;
	СтруктураИсходныхДанных.Вставить("ВидТарифнойСтавки");
	СтруктураИсходныхДанных.Вставить("ПорядокРасчета");
	СтруктураИсходныхДанных.Вставить("ГрафикПолногоВремени");
	СтруктураИсходныхДанных.Вставить("НормаДнейГрафикаМесяц");
	СтруктураИсходныхДанных.Вставить("НормаЧасовГрафикаМесяц");
	СтруктураИсходныхДанных.Вставить("НормаЧасовПолногоГрафикаМесяц");
	СтруктураИсходныхДанных.Вставить("НормаЧасовКалендаряМесяц");
	СтруктураИсходныхДанных.Вставить("НормаДнейКалендаряМесяц");
	СтруктураИсходныхДанных.Вставить("НормаЧасовКалендаряГод");
	СтруктураИсходныхДанных.Вставить("НормаДнейКалендаряГод");
	СтруктураИсходныхДанных.Вставить("СовокупнаяТарифнаяСтавка");
	СтруктураИсходныхДанных.Вставить("УчетВремениВЧасах");
	СтруктураИсходныхДанных.Вставить("РасчетВремениВЧасах");
	СтруктураИсходныхДанных.Вставить("ЕстьПоказательДоляНеполногоРабочегоВремени");
	СтруктураИсходныхДанных.Вставить("ДоляНеполногоРабочегоВремени"); 
	СтруктураИсходныхДанных.Вставить("НеполныйРабочийДень"); 
	
	Возврат СтруктураИсходныхДанных;
КонецФункции

Процедура ЗаполнитьДанныеНачисленийРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, ДанныеПлановыхНачислений, ПорядокРасчета, ПоказателиОсновныхНачислений)
	
	ИсходныеДанныеДляРасчета.СовокупнаяТарифнаяСтавка = ДанныеПлановыхНачислений.СовокупнаяТарифнаяСтавка;
	ИсходныеДанныеДляРасчета.ВидТарифнойСтавки = ДанныеПлановыхНачислений.ВидТарифнойСтавки;
	ИсходныеДанныеДляРасчета.ПорядокРасчета  = ПорядокРасчета;
	
	ИсходныеДанныеДляРасчета.ЕстьПоказательДоляНеполногоРабочегоВремени = Ложь;
	
	ПоказательДоляНеполногоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");
	ПоказателиОсвновногоНачисления = ПоказателиОсновныхНачислений[ДанныеПлановыхНачислений.ОсновноеНачисление];
	
	Если ПоказателиОсвновногоНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиОсвновногоНачисления, "Показатель");
	ИсходныеДанныеДляРасчета.ЕстьПоказательДоляНеполногоРабочегоВремени = Показатели.Найти(ПоказательДоляНеполногоВремени) <> Неопределено;	
	
КонецПроцедуры

Процедура ЗаполнитьНормыГрафикаРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, ДанныеГрафика, СвойстваГрафика)
	Если СвойстваГрафика = Неопределено Тогда
		ИсходныеДанныеДляРасчета.ГрафикПолногоВремени = Неопределено;
	Иначе
		ИсходныеДанныеДляРасчета.ГрафикПолногоВремени = СвойстваГрафика.ГрафикПолногоРабочегоВремени;
	КонецЕсли;	
	
	Если ДанныеГрафика = Неопределено Тогда
		ИсходныеДанныеДляРасчета.НормаДнейГрафикаМесяц = 0;
		ИсходныеДанныеДляРасчета.НормаЧасовГрафикаМесяц = 0;
		ИсходныеДанныеДляРасчета.НормаЧасовПолногоГрафикаМесяц = 0;
	Иначе	
		ИсходныеДанныеДляРасчета.НормаДнейГрафикаМесяц = ДанныеГрафика.НормаДней;
		ИсходныеДанныеДляРасчета.НормаЧасовГрафикаМесяц = ДанныеГрафика.НормаЧасов;
		ИсходныеДанныеДляРасчета.НормаЧасовПолногоГрафикаМесяц = ДанныеГрафика.НормаЧасовПолная;
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаполнитьНормыКалендаряРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, ДанныеКалендаря = Неопределено, СвойстваГрафика = Неопределено)
	Если ДанныеКалендаря = Неопределено Тогда
		ИсходныеДанныеДляРасчета.НормаЧасовКалендаряМесяц = 0;
		ИсходныеДанныеДляРасчета.НормаДнейКалендаряМесяц = 0;
		ИсходныеДанныеДляРасчета.НормаЧасовКалендаряГод = 0;
		ИсходныеДанныеДляРасчета.НормаДнейКалендаряГод = 0;
	Иначе
		ИсходныеДанныеДляРасчета.НормаДнейКалендаряМесяц = ДанныеКалендаря.НормаДнейКалендаряМесяц;
		ИсходныеДанныеДляРасчета.НормаДнейКалендаряГод = ДанныеКалендаря.НормаДнейКалендаряГод;
		
		Если СвойстваГрафика = Неопределено Тогда
			ИсходныеДанныеДляРасчета.НормаЧасовКалендаряМесяц = 0;
			ИсходныеДанныеДляРасчета.НормаЧасовКалендаряГод = 0;
		Иначе
			ИсходныеДанныеДляРасчета.НормаЧасовКалендаряМесяц = Макс(0, СвойстваГрафика.ДлительностьРабочейНеделиГрафикаПолногоВремени / 5 * ИсходныеДанныеДляРасчета.НормаДнейКалендаряМесяц - ДанныеКалендаря.ПредпраздничныеДниМесяца);
			ИсходныеДанныеДляРасчета.НормаЧасовКалендаряГод = Макс(0, СвойстваГрафика.ДлительностьРабочейНеделиГрафикаПолногоВремени / 5 * ИсходныеДанныеДляРасчета.НормаДнейКалендаряГод - ДанныеКалендаря.ПредпраздничныеДниГода);	
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеДанныеРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, КадровыеДанные, СвойстваОсновногоНачисления, РасчетВремениВЧасах, СвойстваГрафика)	
	ИсходныеДанныеДляРасчета.УчетВремениВЧасах = ?(СвойстваОсновногоНачисления = Неопределено, Ложь, СвойстваОсновногоНачисления.УчетВремениВЧасах);
	ИсходныеДанныеДляРасчета.ДоляНеполногоРабочегоВремени = РасчетЗарплатыРасширенный.ДоляНеполногоВремени(СвойстваГрафика, КадровыеДанные);
	ИсходныеДанныеДляРасчета.РасчетВремениВЧасах = РасчетВремениВЧасах;
	ИсходныеДанныеДляРасчета.НеполныйРабочийДень = ?(СвойстваГрафика = Неопределено, Ложь, СвойстваГрафика.НеполныйРабочийДень);
КонецПроцедуры

Функция ДанныеКалендаряПоИсточникуДанных(ДанныеКалендарей, ТекущийИсточникДанных, Месяц, СвойстваОбщийГрафиков)
	СтруктураПоиска = Новый Структура("ПроизводственныйКалендарь, Месяц");
	Если СвойстваОбщийГрафиков[ТекущийИсточникДанных.ОбщийГрафик] <> Неопределено Тогда
		СтруктураПоиска.ПроизводственныйКалендарь = СвойстваОбщийГрафиков[ТекущийИсточникДанных.ОбщийГрафик].ПроизводственныйКалендарь;
	КонецЕсли;	
		
	СтруктураПоиска.Месяц = Месяц;
	
	Возврат СтрокаТаблицыПоСтруктуреПоиска(ДанныеКалендарей, СтруктураПоиска);	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область РасчетПоказателейНачислений

Процедура РассчитатьЗначенияПоказателейНачислений()
	
	СтрокиНачисленийПоТребования = СтрокиНачисленийПоТребованиям();
	
	РассчитатьЗначенияПоказателейРабочегоВремени(СтрокиНачисленийПоТребования.ПоказателиРабочегоВремени);
	РассчитатьЗначенияПоказателейКалендарныеДниНачислений(СтрокиНачисленийПоТребования.ПоказателиКалендартныеДни);
	РассчитатьЗначенияПоказателейНормыВремени(СтрокиНачисленийПоТребования.ПоказателиНормыВремени);
	РассчитатьЗначенияПоказателейКалендарныеДниБезУчетаПраздников(СтрокиНачисленийПоТребования.ПоказателиКалендартныеБезПраздников);
	РассчитатьЗначенияПоказателейКалендарныеДниМесяцаБезУчетаПраздников(СтрокиНачисленийПоТребования.ПоказателиКалендарныеДниМесяцаБезПраздников);
	РассчитатьЗначенияПоказателейКоличествоДнейОтпуска(СтрокиНачисленийПоТребования.ПоказателиДниОтпуска);
	РассчитатьЗначенияПоказателейКоэффициентИндексацииСреднегоЗаработка(СтрокиНачисленийПоТребования.ПоказателиКоэффициентыИндексации);
	РассчитатьЗначенияОперативныхПоказателейСотрудников(СтрокиНачисленийПоТребования.ОперативныеПоказателиСотрудников);
	РассчитатьЗначенияОперативныхПоказателейОрганизаций(СтрокиНачисленийПоТребования.ОперативныеПоказателиОрганизаций);
	РассчитатьЗначенияОперативныхПоказателейПодразделений(СтрокиНачисленийПоТребования.ОперативныеПоказателиПодразделений);
	
	ЗаполнитьПоказателиНачисленийПоОплаченномуВремени(СтрокиНачисленийПоТребования.ФиксРасчетВремени);
	ЗаполнитьЗначенияИзвестныхПоказателей(СтрокиНачисленийПоТребования.ИзвестныеПоказатели);
	
КонецПроцедуры

#Область РасчетПоказателейРабочегоВремени

Процедура РассчитатьЗначенияПоказателейРабочегоВремени(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНабораНачисления = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
		
	ВремяВДнях = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	ВремяВДняхЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");
	ВремяВЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах");
	ОтработаноСверхурочно = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно");
	ОтработаноСверхурочноВПределах2Часов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочноВПределах2Часов");
	ОтработаноДней = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней");
	ОтработаноЧасов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов");
	ОтработаноСмен = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСмен");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	ПоказателиНачислений = ПоказателиНачислений();
		
	РабочееВремя = РабочееВремя();
	СтруктураПоиска = СтрукутраПоискаДанныхОВремени();
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеНабораНачисления.ФПД, "Регистратор, НомерСтроки");
	ОтборФПД = Новый Структура("Регистратор, НомерСтроки");
	
	Для Каждого СтрокаТаблицыНачисления Из СтрокиНачисленийКРасчету Цикл
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачисления.ИдентификаторСтроки];
		
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		ПоказателиТекущегоНачисления = ПоказателиНачислений[СтрокаНабора.ВидРасчета];	
		
		ЗаполнитьЗначенияСвойств(ОтборФПД, СтрокаНабора);
		СтрокиФПД = ДанныеНабораНачисления.ФПД.НайтИСтроки(ОтборФПД);
		
		ДанныеОВремени = ДанныеОВременияДляСтрокиНабора(
							СтрокаНабора, 
							СтрокиФПД, 
							РабочееВремя, 
							ТребованияТекущегоНачисления, 
							СтруктураПоиска);
		
		ЗаполнитьРабочееВремяВСтроке(СтрокаТаблицыНачисления, ДанныеОВремени, ТребованияТекущегоНачисления);
		СтрокаТаблицыНачисления.ЗарегистрированоВремяПоНабору = ДанныеОВремени.ЗарегистрированоВремяПоНабору;
		
		Если ПоказателиТекущегоНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеПоказателя Из ПоказателиТекущегоНачисления Цикл
			Если ДанныеПоказателя.Показатель = ВремяВДнях Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.Дней, Истина);
			ИначеЕсли  ДанныеПоказателя.Показатель = ВремяВЧасах Тогда	
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.Часов, Истина);		
			ИначеЕсли  ДанныеПоказателя.Показатель = ВремяВДняхЧасах И СтрокаНабора.ВремяВчасах Тогда	
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.Часов, Истина);		
			ИначеЕсли  ДанныеПоказателя.Показатель = ВремяВДняхЧасах И Не СтрокаНабора.ВремяВчасах Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.Дней, Истина);
			ИначеЕсли  ДанныеПоказателя.Показатель = ОтработаноСверхурочно Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.ОтработаноСверхурочно, Истина);
			ИначеЕсли  ДанныеПоказателя.Показатель = ОтработаноСверхурочноВПределах2Часов Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.ОтработаноСверхурочноВПределах2Часов, Истина);
			ИначеЕсли  ДанныеПоказателя.Показатель = ОтработаноДней Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.ОтработаноДней, Истина);
			ИначеЕсли  ДанныеПоказателя.Показатель = ОтработаноЧасов Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.ОтработаноЧасов, Истина);	
			ИначеЕсли  ДанныеПоказателя.Показатель = ОтработаноСмен Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, ДанныеОВремени.ОтработаноСмен, Истина);	
			КонецЕсли;			
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьФильтрПолученияРабочегоВремениПоДаннымТекущегоНабора(СтрокиНачисленийКРасчету)
	Фильтр = ФильтрПолученияРабочегоВремени();
	
	ДанныеНабораНачисления = ДанныеТекущегоНабораНачисления();
	СтрокиНабораПоИдентификаторам = СтрокиНабораНачисленияПоИдентфикаторам();

	СтрокиНабораКРасчету = Новый Массив;
	Для Каждого СтрокаНачислений Из СтрокиНачисленийКРасчету Цикл
		СтрокиНабораКРасчету.Добавить(СтрокиНабораПоИдентификаторам[СтрокаНачислений.ИдентификаторСтроки]);
	КонецЦикла;		

	ТребованияНачислений = ТребованияНачисленийТаблица();

	УчитыватьТерриторииУсловияТруда = НастройкиУчета.ИспользоватьТерриторииУсловияТруда;
	
	Если УчитыватьТерриторииУсловияТруда Тогда
		ФПД = ДанныеНабораНачисления.ФПД.Скопировать();
		ПериодыТериторий = ТерриторииСотрудников();
		РазбитьСтрокиФПДПоПериодамИзмененияТерриторий(ФПД, ДанныеНабораНачисления.ТаблицаНабора, ПериодыТериторий);	
	Иначе
		ФПД = ДанныеНабораНачисления.ФПД;	
	КонецЕсли;
	
	ЗаполнитьФильтрПолученияРабочегоВремени(
		ФПД, 
		ТребованияНачислений, 
		Истина, 
		УчитыватьТерриторииУсловияТруда, 
		СтрокиНабораКРасчету);
	
	ПоляПоискаСтрокФильтра = ПоляПоискаСтрокФильтраРабочегоВремени();
	ОтборОсновныхСтрок = Новый Структура(ПоляПоискаСтрокФильтра);
		
	Если УчитыватьТерриторииУсловияТруда Тогда
		ДополнитьФильтрРабочегоВремениПоТерриториямУсловиям(Фильтр, ОтборОсновныхСтрок);	
	КонецЕсли;	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейНормыВремени(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НормаДней = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней");
	НормаВремениВДнях = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях");
	НормаВремениВЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах");
	НормаДнейЧасов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДнейЧасов");
	
	ДанныеНабора = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Если ДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	Фильтр = МенеджерУчетаВремени().НовыйФильтрПолученияНормыВремени();
	
	СтрокиТребущиеЗаполненияНормы = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие();
	Для Каждого СтрокаТаблицыНачислений Из СтрокиНачисленийКРасчету Цикл
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений);
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
		
		СтрокаФильта = Фильтр.Добавить();
		СтрокаФильта.ИсточникДанныхНормыВремени = СтрокаНабора.ГрафикРаботыНорма;
		СтрокаФильта.ПериодРегистрацииНормыВремени = СтрокаНабора.ПериодРегистрацииНормыВремени;
		СтрокаФильта.Месяц = СтрокаНабора.ПериодДействия;
			
		СтрокиТребущиеЗаполненияНормы.Добавить(СтрокаНабора);		
	КонецЦикла;
		
	Фильтр.Свернуть("ИсточникДанныхНормыВремени, ПериодРегистрацииНормыВремени, Месяц");  
	
	НормаВремени = МенеджерУчетаВремени().НормаВремениПоИсточникамДанных(Фильтр);
	ПоляПоиска = "ИсточникДанныхНормыВремени, ПериодРегистрацииНормыВремени, Месяц";
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НормаВремени, ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	Для Каждого СтрокаНабора Из СтрокиТребущиеЗаполненияНормы Цикл
		СтруктураПоиска.ИсточникДанныхНормыВремени = СтрокаНабора.ГрафикРаботыНорма;
		СтруктураПоиска.ПериодРегистрацииНормыВремени = СтрокаНабора.ПериодРегистрацииНормыВремени;
		СтруктураПоиска.Месяц = СтрокаНабора.ПериодДействия;	
		
		СтрокиНормы = НормаВремени.НайтиСтроки(СтруктураПоиска);
		СтрокаТаблицыНачисления = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		Если СтрокиНормы.Количество() = 0 Тогда
			СтрокаТаблицыНачисления.НормаДней = 0;
			СтрокаТаблицыНачисления.НормаЧасов = 0;
		Иначе
			ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
			СтрокаТаблицыНачисления.НормаЧасов = СтрокиНормы[0].НормаЧасовПолная;
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, НормаВремениВЧасах, СтрокиНормы[0].НормаЧасовПолная, Истина);
			СтрокаТаблицыНачисления.НормаДней = ?(ТребованияТекущегоНачисления.ТребуетсяНормаВДняхПолная, СтрокиНормы[0].НормаДнейПолная, СтрокиНормы[0].НормаДней);
			Если ТребованияТекущегоНачисления.ТребуетсяНормаВДняхПолная Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, НормаВремениВДнях, СтрокиНормы[0].НормаДнейПолная, Истина);
			КонецЕсли;
			
			Если ТребованияТекущегоНачисления.ТребуетсяНормаДней Тогда
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, НормаДней, СтрокиНормы[0].НормаДней, Истина);
			КонецЕсли;
			
			Если ТребованияТекущегоНачисления.ТребуетсяПоказательНормаДнейЧасов Тогда
				Если СтрокаТаблицыНачисления.ВремяВЧасах Тогда
					ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, НормаДнейЧасов, СтрокаТаблицыНачисления.НормаЧасов, Истина);
				Иначе
					ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, НормаДнейЧасов, СтрокаТаблицыНачисления.НормаДней, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

Функция СтрукутраПоискаДанныхОВремени() Экспорт
	Возврат Новый Структура(ПоляПоискаРабочегоВремени());
КонецФункции	

Функция ПоляПоискаРабочегоВремени()
	Возврат "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, Месяц, 
	|ОбщийГрафик, УчитыватьТолькоПраздничныеДни, КлючНаборовВидовВремени";
КонецФункции	

Процедура ЗаполнитьРабочееВремяВСтроке(СтрокаНачисления, Отработано, СвойстваНачисления)
	СтрокаНачисления.ОплаченоДней = Отработано.Дней;
	СтрокаНачисления.ОплаченоЧасов = Отработано.Часов;
	Если СвойстваНачисления.ИспользуетФормулу И СвойстваНачисления.НулеваяСумма Тогда
		СтрокаНачисления.ОплаченоДней = 0;
		СтрокаНачисления.ОплаченоЧасов = 0;
	КонецЕсли;
	Если СвойстваНачисления.ЗачетНормыВремени = Истина Тогда
		СтрокаНачисления.ОтработаноДней = Отработано.Дней;
		СтрокаНачисления.ОтработаноЧасов = Отработано.Часов;
	КонецЕсли;
	Если СвойстваНачисления.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы Тогда
		Если Не СвойстваНачисления.ТребуетсяПоказательОтработаноСверхурочно	Тогда
			СтрокаНачисления.ОтработаноДней = Отработано.Дней;
		Иначе
			СтрокаНачисления.ОплаченоДней = 0;
		КонецЕсли;
		СтрокаНачисления.ОтработаноЧасов = Отработано.Часов;
	КонецЕсли;
	Если СвойстваНачисления.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное Тогда
		СтрокаНачисления.ОтработаноЧасов = Отработано.Часов;
	КонецЕсли;
КонецПроцедуры	

Процедура ЗаполнитьФильтрПолученияРабочегоВремени(ФПДНачислений, ТребованияТекущегоНабораНачислений, УчитыватьДополнительныеПоказатели, УчитыватьТерриторииУсловияТруда, СтрокиНабораНачислений = Неопределено) Экспорт
	КэшРабочееВремяСотрудников = Неопределено;
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	
	ПоляПоискаСтрокФильтра = ПоляПоискаСтрокФильтраРабочегоВремени();
	Если ФильтрПолученияЗарегистрированногоВремени = Неопределено Тогда
		ФильтрПолученияЗарегистрированногоВремени = МенеджерУчетаВремени.НовыйФильтрПолученияЗарегистрированногоВремени(Тип("ПланВидовРасчетаСсылка.Начисления"));	
		ФильтрПолученияЗарегистрированногоВремени.Индексы.Добавить(ПоляПоискаСтрокФильтра);	
	КонецЕсли;	
	
	КолонкиГруппировки = ОбщегоНазначения.ВыгрузитьКолонку(ФильтрПолученияЗарегистрированногоВремени.Колонки, "Имя");
		
	ОтборОсновныхСтрок = Новый Структура(ПоляПоискаСтрокФильтра);
	
	Если СтрокиНабораНачислений <> Неопределено Тогда
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ФПДНачислений, "Регистратор, НомерСтроки");
	КонецЕсли;	
	
	ОтборСтрокФПД = Новый Структура("Регистратор, НомерСтроки");
	
	Если СтрокиНабораНачислений = Неопределено Тогда
		Для Каждого СтрокаФПД Из ФПДНачислений Цикл
			ДобавитьСтрокиФильтраРабочегоВремени(
				ФильтрПолученияЗарегистрированногоВремени, 
				СтрокаФПД, 
				СтрокаФПД, 
				ОтборОсновныхСтрок, 
				ТребованияТекущегоНабораНачислений, 
				УчитыватьДополнительныеПоказатели, 
				УчитыватьТерриторииУсловияТруда);
		КонецЦикла;				
	Иначе		
		Для Каждого СтрокаНачислений Из СтрокиНабораНачислений Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрокФПД, СтрокаНачислений);;
			СтрокиФПД = ФПДНачислений.НайтиСтроки(ОтборСтрокФПД);
		
			Для Каждого СтрокаФПД Из СтрокиФПД Цикл
				ДобавитьСтрокиФильтраРабочегоВремени(
					ФильтрПолученияЗарегистрированногоВремени, 
					СтрокаНачислений, 
					СтрокаФПД, 
					ОтборОсновныхСтрок, 
					ТребованияТекущегоНабораНачислений, 
					УчитыватьДополнительныеПоказатели, 
					УчитыватьТерриторииУсловияТруда);
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;			
			
	ФильтрПолученияЗарегистрированногоВремени.Свернуть(СтрСоединить(КолонкиГруппировки, ","));	
КонецПроцедуры	

Функция ФильтрПолученияРабочегоВремени()
	Возврат ФильтрПолученияЗарегистрированногоВремени;
КонецФункции	

Функция ПоляПоискаСтрокФильтраРабочегоВремени()
	Возврат  "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик, 
	|Месяц, УчитыватьТолькоПраздничныеДни, КлючНаборовВидовВремени, ДатаНачала, ДатаОкончания";	
КонецФункции	

Функция РазбитьСтрокиФПДПоПериодамИзмененияТерриторий(СтрокиФПД, СтрокиНачислений, ПериодыТерриторий)
	ДатыРазбиения = Новый ТаблицаЗначений;
	ДатыРазбиения.Колонки.Добавить("Регистратор");
	ДатыРазбиения.Колонки.Добавить("НомерСтроки");
	ДатыРазбиения.Колонки.Добавить("Дата");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПериодыТерриторий, "Сотрудник");
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	Для Каждого ЗаписьНачисления Из СтрокиНачислений Цикл
		СтруктураПоиска.Сотрудник =	ЗаписьНачисления.Сотрудник;
		ЗаписиПоТрерриториям = ПериодыТерриторий.НайтиСтроки(СтруктураПоиска);
		Для Каждого ПериодТерритории Из ЗаписиПоТрерриториям Цикл
			СтрокаТаблицыДат = ДатыРазбиения.Добавить();
			СтрокаТаблицыДат.Регистратор = ЗаписьНачисления.Регистратор;
			СтрокаТаблицыДат.НомерСтроки = ЗаписьНачисления.НомерСтроки;
			СтрокаТаблицыДат.Дата = НачалоДня(ПериодТерритории.ДатаНачала); 
			
			СтрокаТаблицыДат = ДатыРазбиения.Добавить();
			СтрокаТаблицыДат.Регистратор = ЗаписьНачисления.Регистратор;
			СтрокаТаблицыДат.НомерСтроки = ЗаписьНачисления.НомерСтроки;
			СтрокаТаблицыДат.Дата = НачалоДня(ПериодТерритории.ДатаОкончания); 
		КонецЦикла;
	КонецЦикла;	
	
	РасчетЗарплатыРасширенный.РазбитьПериодыНачислений(СтрокиФПД, ДатыРазбиения);	
КонецФункции	

Процедура СгруппироватьСтрокиФильтраРабочегоВремени(ФильтрРабочегоВремени)
	ПоляКлюча = "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик, Месяц, 
	|КлючНаборовВидовВремени, УчитыватьТолькоПраздничныеДни";
	
	ФильтрРабочегоВремени.Сортировать(ПоляКлюча + ", ДатаНачала, ДатаОкончания", Новый СравнениеЗначений);
	КлючиФильтра = ФильтрРабочегоВремени.Скопировать(, ПоляКлюча);
	КлючиФильтра.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	КлючиФильтра.ЗаполнитьЗначения(1, "КоличествоСтрок");
	КлючиФильтра.Свернуть(ПоляКлюча, "КоличествоСтрок");
	
	ИндексПервойСтрокиПоКлючу = 0;
	Для Каждого ТекущийКлючФильтра Из КлючиФильтра Цикл
		ПредыдущаяСтрокаФильтра = Неопределено;
		ИндексПоследнейСтрокиПоКлючу = ИндексПервойСтрокиПоКлючу + ТекущийКлючФильтра.КоличествоСтрок - 1;
		ИндексТекущейСтроки = ИндексПервойСтрокиПоКлючу;
		Пока ИндексТекущейСтроки <= ИндексПоследнейСтрокиПоКлючу Цикл
			ТекущаяСтрокаФильтра = ФильтрРабочегоВремени[ИндексТекущейСтроки];
			
			Если ПредыдущаяСтрокаФильтра = Неопределено Тогда
				ПредыдущаяСтрокаФильтра = ТекущаяСтрокаФильтра;
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				Продолжить;
			КонецЕсли;			
			
			Если ТекущаяСтрокаФильтра.ДатаНачала = ПредыдущаяСтрокаФильтра.ДатаНачала Тогда
				ДатаОкончанияТекущейСтроки = ТекущаяСтрокаФильтра.ДатаОкончания;
				ДатаНачалаНовойСтроки = КонецДня(ПредыдущаяСтрокаФильтра.ДатаОкончания) + 1;			
				
				Если ДатаОкончанияТекущейСтроки > ПредыдущаяСтрокаФильтра.ДатаОкончания Тогда
					ВставитьСтрокуВФильтрРабочегоВремени(
						ФильтрРабочегоВремени, 
						ТекущаяСтрокаФильтра, 
						ДатаНачалаНовойСтроки, 
						ДатаОкончанияТекущейСтроки, 
						ИндексТекущейСтроки + 1, 
						ИндексПоследнейСтрокиПоКлючу);
						
					ИндексПоследнейСтрокиПоКлючу = ИндексПоследнейСтрокиПоКлючу + 1;		
				КонецЕсли;
				
				ДополнитьСтрокуФильтраРабочегоВремени(ПредыдущаяСтрокаФильтра, ТекущаяСтрокаФильтра);
				ФильтрРабочегоВремени.Удалить(ТекущаяСтрокаФильтра);
				ИндексПоследнейСтрокиПоКлючу = ИндексПоследнейСтрокиПоКлючу - 1;	
				
				Продолжить;							
			ИначеЕсли ТекущаяСтрокаФильтра.ДатаНачала <= ПредыдущаяСтрокаФильтра.ДатаОкончания Тогда 
				ДатаОкончанияПредыдущейСтроки = ПредыдущаяСтрокаФильтра.ДатаОкончания;
				ПредыдущаяСтрокаФильтра.ДатаОкончания = НачалоДня(ТекущаяСтрокаФильтра.ДатаНачала - 1);
				
				ДатаОкончанияТекущейСтроки = ТекущаяСтрокаФильтра.ДатаОкончания;
				
				ТекущаяСтрокаФильтра.ДатаОкончания = Мин(ДатаОкончанияПредыдущейСтроки, ДатаОкончанияТекущейСтроки);
				ДополнитьСтрокуФильтраРабочегоВремени(ТекущаяСтрокаФильтра, ПредыдущаяСтрокаФильтра);
					
				ДатаНачалаНовойСтроки = КонецДня(ТекущаяСтрокаФильтра.ДатаОкончания) + 1;
				
				Если ДатаОкончанияПредыдущейСтроки > ТекущаяСтрокаФильтра.ДатаОкончания Тогда
					ВставитьСтрокуВФильтрРабочегоВремени(
						ФильтрРабочегоВремени, 
						ПредыдущаяСтрокаФильтра, 
						ДатаНачалаНовойСтроки, 
						ДатаОкончанияПредыдущейСтроки, 
						ИндексТекущейСтроки + 1, 
						ИндексПоследнейСтрокиПоКлючу);
						
					ИндексПоследнейСтрокиПоКлючу = ИндексПоследнейСтрокиПоКлючу + 1;
				ИначеЕсли ДатаОкончанияТекущейСтроки > ТекущаяСтрокаФильтра.ДатаОкончания Тогда 			
					ВставитьСтрокуВФильтрРабочегоВремени(
						ФильтрРабочегоВремени, 
						ТекущаяСтрокаФильтра, 
						ДатаНачалаНовойСтроки, 
						ДатаОкончанияТекущейСтроки, 
						ИндексТекущейСтроки + 1, 
						ИндексПоследнейСтрокиПоКлючу);
						
					ИндексПоследнейСтрокиПоКлючу = ИндексПоследнейСтрокиПоКлючу + 1;
				КонецЕсли;							
			КонецЕсли;
			
			ПредыдущаяСтрокаФильтра = ТекущаяСтрокаФильтра;
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЦикла;
		ИндексПервойСтрокиПоКлючу = ИндексТекущейСтроки;
	КонецЦикла;	
КонецПроцедуры	

Функция ВставитьСтрокуВФильтрРабочегоВремени(ФильтрРабочегоВремени, ШаблонЗаполнения, ДатаНачала, ДатаОкончания, ИндексТекущейСтроки, ИндексПоследнейСтрокиПоКлючу)	
	НоваяСтрока = Неопределено;
	Для Сч = ИндексТекущейСтроки По ИндексПоследнейСтрокиПоКлючу Цикл
		ТекущаяСтрокаФильтра = ФильтрРабочегоВремени[Сч];
		
		Если ДатаНачала > ТекущаяСтрокаФильтра.ДатаНачала Тогда
			Продолжить;
		ИначеЕсли ДатаНачала = ТекущаяСтрокаФильтра.ДатаНачала
			И ДатаОкончания > ТекущаяСтрокаФильтра.ДатаОкончания Тогда
				
			Продолжить;	
		КонецЕсли;	
		
		НоваяСтрока = ФильтрРабочегоВремени.Вставить(Сч);
		Прервать;
	КонецЦикла;	
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ВставитьСтрокуВТаблицу(ФильтрРабочегоВремени, ИндексПоследнейСтрокиПоКлючу + 1);
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ШаблонЗаполнения);
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
		
	Возврат НоваяСтрока;
КонецФункции
	
Процедура ДополнитьСтрокуФильтраРабочегоВремени(СтрокаПримемник, СтрокаИсточник)
	СтрокаПримемник.ФильтроватьВремяПонабору = 	Макс(СтрокаПримемник.ФильтроватьВремяПонабору, СтрокаИсточник.ФильтроватьВремяПонабору);
	СтрокаПримемник.УчитватьВремяВключаемоеВНорму = Макс(СтрокаПримемник.УчитватьВремяВключаемоеВНорму, СтрокаИсточник.УчитватьВремяВключаемоеВНорму);
	СтрокаПримемник.ПолучатьСверхурочныеЧасы = Макс(СтрокаПримемник.ПолучатьСверхурочныеЧасы, СтрокаИсточник.ПолучатьСверхурочныеЧасы);
	СтрокаПримемник.ПолучатьВсеРабочееВремя = Макс(СтрокаПримемник.ПолучатьВсеРабочееВремя, СтрокаИсточник.ПолучатьВсеРабочееВремя);
	СтрокаПримемник.ПолучатьВремяБезФильтрации = Макс(СтрокаПримемник.ПолучатьВремяБезФильтрации, СтрокаИсточник.ПолучатьВремяБезФильтрации);
	СтрокаПримемник.ПолучатьОтработанныеСмены = Макс(СтрокаПримемник.ПолучатьОтработанныеСмены, СтрокаИсточник.ПолучатьОтработанныеСмены);
	СтрокаПримемник.ПолучатьРабочееВремяВключаемоевВНорму = Макс(СтрокаПримемник.ПолучатьРабочееВремяВключаемоевВНорму, СтрокаИсточник.ПолучатьРабочееВремяВключаемоевВНорму);	
КонецПроцедуры			

Функция ЗаполнятьРабочееВремяДляСтрокиНабора(СтрокаНабора, ТребованияНачисления)
	Если Не СтрокаНабора.ФиксРасчетВремени
		И Не СтрокаНабора.ФиксСторно
		И (Не ТребованияНачисления.НачисляетсяВЦеломЗаМесяц
		Или ТребованияНачисления.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц) Тогда
			
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 	
КонецФункции	

Процедура ДобавитьСтрокиФильтраРабочегоВремени(Фильтр, СтрокаНабора, СтрокаФПД, ОтборОсновныхСтрокФильтра, ТребованияНачислений, УчитыватьДополнительныеПоказатели, ИспользоватьТерриторииУсловияТруда)
	ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
	
	ДатаНачала = НачалоДня(?(СтрокаНабора.ВремяВЦеломЗаПериод, СтрокаНабора.ПериодДействияНачало, СтрокаФПД.ПериодДействияНачало));
	ДатаОкончания = НачалоДня(?(СтрокаНабора.ВремяВЦеломЗаПериод, СтрокаНабора.ПериодДействияКонец, СтрокаФПД.ПериодДействияКонец));
	
	ЗаполнитьПоляФильтраРабочегоВремени(ОтборОсновныхСтрокФильтра, СтрокаНабора, ТребованияТекущегоНачисления);
	ОтборОсновныхСтрокФильтра.ДатаНачала = ДатаНачала;
	ОтборОсновныхСтрокФильтра.ДатаОкончания = ДатаОкончания;
	СтрокиФильтра = Фильтр.НайтиСтроки(ОтборОсновныхСтрокФильтра);
	Если СтрокиФильтра.Количество() > 0 Тогда
		СтрокаФильтра = СтрокиФильтра[0];
	Иначе		
		СтрокаФильтра = Фильтр.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаФильтра, ОтборОсновныхСтрокФильтра);
	КонецЕсли;	
	
	Если ТребованияТекущегоНачисления.УчитыватьВидВремениПоУмолчанию Тогда
		СтрокаФильтра.ПолучатьРабочееВремяВключаемоевВНорму = Истина;	
		Если ИспользоватьТерриторииУсловияТруда 
			И ТребованияТекущегоНачисления.РаспределятьПоКалендарнымДням Тогда 	
			
			СтрокаФильтра.ПолучатьВремяБезФильтрации = Истина;
		КонецЕсли;	
	Иначе		
		СтрокаФильтра.ФильтроватьВремяПонабору = Истина;		
		СтрокаФильтра.УчитватьВремяВключаемоеВНорму = ТребованияТекущегоНачисления.ПриОтсутствииЗарегистрированныхДанныхПоучатьНорму;		
	КонецЕсли;	
	
	Если УчитыватьДополнительныеПоказатели Тогда
		Если ТребованияТекущегоНачисления.ТребуетсяПоказательОтработаноСверхурочно Тогда
			СтрокаФильтра.ПолучатьСверхурочныеЧасы = Истина;
		КонецЕсли;
		
		Если ТребованияТекущегоНачисления.ТребуетсяПоказательОтработаноВсего Тогда
			СтрокаФильтра.ПолучатьВсеРабочееВремя = Истина;
		КонецЕсли;
		
		Если ТребованияТекущегоНачисления.ТребуетсяПоказательОтработаноСмен Тогда
			СтрокаФильтра.ПолучатьОтработанныеСмены = Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаполнитьПоляФильтраРабочегоВремени(СтрокаФильтра, СтрокаНабора, ТребованияНачисления)
	СтрокаФильтра.ИсточникДанныхФактическогоВремени = СтрокаНабора.ГрафикРаботы;
	СтрокаФильтра.ПериодРегистрацииФактическогоВремени = СтрокаНабора.ПериодРегистрацииВремени;
	СтрокаФильтра.ОбщийГрафик = СтрокаНабора.ОбщийГрафик;
	СтрокаФильтра.Месяц = СтрокаНабора.ПериодДействия;
	СтрокаФильтра.УчитыватьТолькоПраздничныеДни = ТребованияНачисления.ТребуютсяЗаПраздничныеДниПриОкончательномРасчете;
	
	Если Не ТребованияНачисления.УчитыватьВидВремениПоУмолчанию Тогда
		СтрокаФильтра.КлючНаборовВидовВремени = СтрокаНабора.ВидРасчета;
	Иначе
		СтрокаФильтра.КлючНаборовВидовВремени = ПланыВидовРасчета.Начисления.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры	

Функция ПоляПоискаДляПроверкиТерриторий()
	Возврат "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик, Месяц, ЗарегистрированыТерритории";
КонецФункции	

Функция ОтборДляПроверкиТерриторий()
	Возврат Новый Структура(ПоляПоискаДляПроверкиТерриторий());
КонецФункции	

Функция ЗаполнитьОтборДляПроверкиТерриторий(Отбор, СтрокаНабора)
	Отбор.ИсточникДанныхФактическогоВремени = СтрокаНабора.ГрафикРаботы;
	Отбор.ПериодРегистрацииФактическогоВремени = СтрокаНабора.ПериодРегистрацииВремени;
	Отбор.ОбщийГрафик = СтрокаНабора.ОбщийГрафик;
	Отбор.Месяц = СтрокаНабора.ПериодДействия;
	Отбор.ЗарегистрированыТерритории = Истина;
КонецФункции	

Процедура ДополнитьФильтрРабочегоВремениПоТерриториямУсловиям(Фильтр, ОтборСтрок)	
	ИндкексПоследнейСтроки = Фильтр.Количество() - 1;
	
	Для ИндексСтроки = 0 По ИндкексПоследнейСтроки Цикл
		ТекущаяСтрока = Фильтр[ИндексСтроки];
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ТекущаяСтрока);
		ОтборСтрок.УчитыватьТолькоПраздничныеДни = Ложь;
		ОтборСтрок.ДатаНачала = НачалоМесяца(ТекущаяСтрока.Месяц);
		ОтборСтрок.ДатаОкончания = НачалоДня(КонецМесяца(ТекущаяСтрока.Месяц));
		
		СтрокиФильтра = Фильтр.НайтиСтроки(ОтборСтрок);
		Если СтрокиФильтра.Количество() = 0 Тогда
			СтрокаФильтра = Фильтр.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФильтра, ОтборСтрок);
		Иначе
			СтрокаФильтра = СтрокиФильтра[0];
		КонецЕсли;	
	
		СтрокаФильтра.ПолучатьВремяБезФильтрации = Истина;
	КонецЦикла;	
КонецПроцедуры	
		
Функция РабочееВремя() Экспорт
	Если КэшРабочееВремяСотрудников <> Неопределено Тогда
		Возврат КэшРабочееВремяСотрудников;
	КонецЕсли;
		
	МенеджерУчетаВремени = МенеджерУчетаВремени();	
		
	Фильтр = ФильтрПолученияРабочегоВремени();	
	СгруппироватьСтрокиФильтраРабочегоВремени(Фильтр);
	
	
	ОписаниеТаблицыВидовВремени = МенеджерУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеТаблицыВидовВремени.ИмяТаблицы = "ПланВидовРасчета.Начисления.ВидыВремени";
	ОписаниеТаблицыВидовВремени.ИмяПоляКлюч = "Ссылка";
	ОписаниеТаблицыВидовВремени.ИмяПоляВидВремени = "ВидВремени";	
		
	КэшРабочееВремяСотрудников = МенеджерУчетаВремени.РабочееВремяПоИсточникамДанных(Фильтр, ОписаниеТаблицыВидовВремени);
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КэшРабочееВремяСотрудников, ПоляПоискаРабочегоВремени());
	
	Возврат КэшРабочееВремяСотрудников;	
КонецФункции

Функция СтрокиДанныхОВремени(РабочееВремя, СтрокаНачислений, ТребованияТекущегоНачисления, СтруктураПоиска) Экспорт
	ЗаполнитьПоляФильтраРабочегоВремени(СтруктураПоиска, СтрокаНачислений, ТребованияТекущегоНачисления);
	Возврат РабочееВремя.НайтиСтроки(СтруктураПоиска);
КонецФункции	

Функция ДанныеОВременияЗаПериод(СтрокаНабора, ДатаНачала, ДатаОкончания, РабочееВремя, ТребованияНачисления, СтруктураПоиска, УчитывыатьДополнительныеПоказатели = Истина) Экспорт		
	ПоляРезультат = "Дней, Часов, ОтработаноСмен, ОтработаноСверхурочно, ОтработаноСверхурочноВПределах2Часов,
	|ДнейВключаемыхВНорму, ЧасовВключаемыхВНорму, ОтработаноДней, ОтработаноЧасов, ВсегоДней, ВсегоЧасов";
	
	Результат = Новый Структура(ПоляРезультат);
	Результат.Дней = 0;
	Результат.Часов = 0;
	Результат.ОтработаноСмен = 0;
	Результат.ОтработаноСверхурочно = 0;
	Результат.ОтработаноСверхурочноВПределах2Часов = 0;
	Результат.ДнейВключаемыхВНорму = 0;
	Результат.ЧасовВключаемыхВНорму = 0;
	Результат.ОтработаноДней = 0;
	Результат.ОтработаноЧасов = 0;
	Результат.ВсегоДней = 0;
	Результат.ВсегоЧасов = 0;
	
		
	СтрокиРабочегоВремени = СтрокиДанныхОВремени(РабочееВремя, СтрокаНабора, ТребованияНачисления, СтруктураПоиска);
	Для Каждого ТекущаяСтрокаВремени Из СтрокиРабочегоВремени Цикл
		Если ТекущаяСтрокаВремени.ДатаНачала >= ДатаНачала
			И ТекущаяСтрокаВремени.ДатаОкончания <= ДатаОкончания Тогда 
			
			Если ТребованияНачисления.УчитыватьВидВремениПоУмолчанию Тогда
				Результат.Дней = Результат.Дней + ТекущаяСтрокаВремени.ДнейВключаемыхВНорму;
				Результат.Часов = Результат.Часов + ТекущаяСтрокаВремени.ЧасовВключаемыхВНорму;	
			ИначеЕсли СтрокаНабора.ВидРасчета = ТекущаяСтрокаВремени.КлючНаборовВидовВремени Тогда
				Результат.Дней = Результат.Дней + ТекущаяСтрокаВремени.Дней;
				Результат.Часов = Результат.Часов + ТекущаяСтрокаВремени.Часов;			
			КонецЕсли;		
			
			Если УчитывыатьДополнительныеПоказатели Тогда
				Результат.ОтработаноСмен = Результат.ОтработаноСмен + ТекущаяСтрокаВремени.ОтработаноСмен;
				Результат.ОтработаноСверхурочно = Результат.ОтработаноСверхурочно + ТекущаяСтрокаВремени.ОтработаноСверхурочно;
				Результат.ОтработаноСверхурочноВПределах2Часов = Результат.ОтработаноСверхурочноВПределах2Часов + ТекущаяСтрокаВремени.ОтработаноСверхурочноВПределах2Часов;
				Результат.ОтработаноДней = Результат.ОтработаноДней + ТекущаяСтрокаВремени.ОтработаноДней;
				Результат.ОтработаноЧасов = Результат.ОтработаноЧасов + ТекущаяСтрокаВремени.ОтработаноЧасов;
				Результат.ВсегоДней = Результат.ВсегоДней + ТекущаяСтрокаВремени.ВсегоДней;
				Результат.ВсегоЧасов = Результат.ВсегоЧасов + ТекущаяСтрокаВремени.ВсегоЧасов;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	 	 
	
	Возврат Результат;
КонецФункции 	

Функция ДанныеОВременияДляСтрокиНабора(СтрокаНабора, СтрокиФПД, РабочееВремя, ТребованияНачисления, СтруктураПоиска, УчитывыатьДополнительныеПоказатели = Истина)		
	ПоляРезультат = "Дней, Часов, ОтработаноСмен, ОтработаноСверхурочно, ОтработаноСверхурочноВПределах2Часов,
	|ДнейВключаемыхВНорму, ЧасовВключаемыхВНорму, ОтработаноДней, ОтработаноЧасов, ВсегоДней, ВсегоЧасов, ЗарегистрированоВремяПоНабору";
	
	Результат = Новый Структура(ПоляРезультат);
	Результат.Дней = 0;
	Результат.Часов = 0;
	Результат.ОтработаноСмен = 0;
	Результат.ОтработаноСверхурочно = 0;
	Результат.ОтработаноСверхурочноВПределах2Часов = 0;
	Результат.ДнейВключаемыхВНорму = 0;
	Результат.ЧасовВключаемыхВНорму = 0;
	Результат.ОтработаноДней = 0;
	Результат.ОтработаноЧасов = 0;
	Результат.ВсегоДней = 0;
	Результат.ВсегоЧасов = 0;
	Результат.ЗарегистрированоВремяПоНабору = Ложь; 
		
	СтрокиРабочегоВремени = СтрокиДанныхОВремени(РабочееВремя, СтрокаНабора, ТребованияНачисления, СтруктураПоиска);
	
	Если СтрокаНабора.ВремяВЦеломЗаПериод Тогда
		ПериодыПолученияДанных = Новый Массив;
		ПериодыПолученияДанных.Добавить(СтрокаНабора);
	Иначе
		ПериодыПолученияДанных = СтрокиФПД;	
	КонецЕсли;
	
	Для Каждого СтрокаФПД Из ПериодыПолученияДанных Цикл
		Для Каждого ТекущаяСтрокаВремени Из СтрокиРабочегоВремени Цикл
			Если ТекущаяСтрокаВремени.ДатаНачала >= СтрокаФПД.ПериодДействияНачало
				И ТекущаяСтрокаВремени.ДатаОкончания <= СтрокаФПД.ПериодДействияКонец Тогда 
				
				Если ТребованияНачисления.УчитыватьВидВремениПоУмолчанию Тогда
					Результат.Дней = Результат.Дней + ТекущаяСтрокаВремени.ДнейВключаемыхВНорму;
					Результат.Часов = Результат.Часов + ТекущаяСтрокаВремени.ЧасовВключаемыхВНорму;	
					Результат.ЗарегистрированоВремяПоНабору = Истина;
				ИначеЕсли СтрокаНабора.ВидРасчета = ТекущаяСтрокаВремени.КлючНаборовВидовВремени Тогда
					Результат.Дней = Результат.Дней + ТекущаяСтрокаВремени.Дней;
					Результат.Часов = Результат.Часов + ТекущаяСтрокаВремени.Часов;
					Если ТекущаяСтрокаВремени.Дней <> 0 Или  ТекущаяСтрокаВремени.Часов <> 0 Тогда
						Результат.ЗарегистрированоВремяПоНабору = Истина;
					КонецЕсли;
				КонецЕсли;		
				
				Если УчитывыатьДополнительныеПоказатели Тогда
					Результат.ОтработаноСмен = Результат.ОтработаноСмен + ТекущаяСтрокаВремени.ОтработаноСмен;
					Результат.ОтработаноСверхурочно = Результат.ОтработаноСверхурочно + ТекущаяСтрокаВремени.ОтработаноСверхурочно;
					Результат.ОтработаноСверхурочноВПределах2Часов = Результат.ОтработаноСверхурочноВПределах2Часов + ТекущаяСтрокаВремени.ОтработаноСверхурочноВПределах2Часов;
					Результат.ОтработаноДней = Результат.ОтработаноДней + ТекущаяСтрокаВремени.ОтработаноДней;
					Результат.ОтработаноЧасов = Результат.ОтработаноЧасов + ТекущаяСтрокаВремени.ОтработаноЧасов;
					Результат.ВсегоДней = Результат.ВсегоДней + ТекущаяСтрокаВремени.ВсегоДней;
					Результат.ВсегоЧасов = Результат.ВсегоЧасов + ТекущаяСтрокаВремени.ВсегоЧасов;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	 	 
	
	Возврат Результат;
КонецФункции 	

Процедура РассчитатьЗначенияПоказателейКалендарныеДниНачислений(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНабораНачисления = ДанныеТекущегоНабораНачисления();	
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Если ДанныеНабораНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	ПоказателиНачислений = ПоказателиНачислений();
	
	КалендарныеДни = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	КалендарныеДниМесяца = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца");
	
	ПоляПоиска = "Регистратор, НомерСтроки";
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеНабораНачисления.ФПД, ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	Для Каждого СтрокаТаблицыНачисления Из СтрокиНачисленийКРасчету Цикл
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачисления.ИдентификаторСтроки]; 
					
		ПоказателиТекущегоНачисления = ПоказателиНачислений[СтрокаНабора.ВидРасчета];
		Если ПоказателиНачислений = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Для Каждого ДанныеПоказателя Из ПоказателиТекущегоНачисления Цикл
			Если ДанныеПоказателя.Показатель = КалендарныеДниМесяца Тогда
				Значение = КалендарныеДниМесяца(СтрокаНабора.ПериодДействия);
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, Значение);
			ИначеЕсли ДанныеПоказателя.Показатель = КалендарныеДни Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНабора);
				ПериодыФПД = ДанныеНабораНачисления.ФПД.НайтиСтроки(СтруктураПоиска);
				Значение = КалендарныеДнияПериодов(ПериодыФПД);
				ЗаполнитьЗначениеПоказателяКалендарныеДниСтрокиРасчета(СтрокаТаблицыНачисления, ДанныеПоказателя.Показатель, Значение);	
			КонецЕсли;	
		КонецЦикла;			
	КонецЦикла;	
КонецПроцедуры

Функция КалендарныеДниМесяца(Месяц)
	Возврат День(КонецМесяца(Месяц));	
КонецФункции	

Функция КалендарныеДнияПериодов(Периоды)
	Результат = 0;
	Для Каждого СтрокаПериода Из Периоды Цикл
		Результат = Результат + КалендарныеДниПериода(СтрокаПериода);
	КонецЦикла;	
		
	Возврат Результат;	
КонецФункции

Функция КалендарныеДниПериода(СтрокаПериода, ИмяПоляДатаНачала = "ПериодДействияНачало", ИмяПоляДатаОкончания = "ПериодДействияКонец")
	Возврат День(СтрокаПериода[ИмяПоляДатаОкончания]) - День(СтрокаПериода[ИмяПоляДатаНачала]) + 1	
КонецФункции	

Процедура РассчитатьЗначенияПоказателейКалендарныеДниБезУчетаПраздников(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНабора = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Если ДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеНабора.ФПД, "Регистратор, НомерСтроки");
	СтруктураПоискаФПД = Новый Структура("Регистратор, НомерСтроки");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	Фильтр = УчетРабочегоВремениРасширенный.НовыйФильтрПолученияДанныхКалендарей();
	ГрафикиПоСтрокамФильтра = Новый Соответствие();
	СтрокиТребущиеЗаполненияПоказателя = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие();
	Для Каждого СтрокаТаблицыНачислений Из СтрокиНачисленийКРасчету Цикл
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений);
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
		Если Не ЗначениеЗаполнено(СтрокаНабора.ОбщийГрафик) Тогда	
			Продолжить;
		КонецЕсли;		
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаФПД, СтрокаНабора);
		СтрокиФПД = ДанныеНабора.ФПД.НайтиСтроки(СтруктураПоискаФПД);
		
		Для Каждого СтрокаФПД Из СтрокиФПД Цикл
			СтрокаФильта = Фильтр.Добавить();
			СтрокаФильта.ДатаНачала = СтрокаФПД.ПериодДействияНачало;
			СтрокаФильта.ДатаОкончания = СтрокаФПД.ПериодДействияКонец;
			
			ГрафикиПоСтрокамФильтра.Вставить(СтрокаФильта, СтрокаНабора.ОбщийГрафик);
		КонецЦикла;		
		СтрокиТребущиеЗаполненияПоказателя.Добавить(СтрокаНабора);
	КонецЦикла;
	
	ГрафикиОтбор = ОбщегоНазначения.ВыгрузитьКолонку(ГрафикиПоСтрокамФильтра, "Значение", Истина);
	КалендариПоГрафикам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ГрафикиОтбор, "ПроизводственныйКалендарь");
	
	Для Каждого КлючЗначение Из ГрафикиПоСтрокамФильтра Цикл
		КлючЗначение.Ключ.ПроизводственныйКалендарь = КалендариПоГрафикам[КлючЗначение.Значение];			
	КонецЦикла;
	
	Фильтр.Свернуть("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	
	ДанныеКалендарей = УчетРабочегоВремениРасширенный.ДанныеПроизводственныхКалендарей(Фильтр);
	ДанныеКалендарей.Индексы.Добавить("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	ОтборДанныхКалендарей = Новый Структура("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	Для Каждого СтрокаНабора Из СтрокиТребущиеЗаполненияПоказателя Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаФПД, СтрокаНабора);
		СтрокиФПД = ДанныеНабора.ФПД.НайтиСтроки(СтруктураПоискаФПД);	
		
		Календарь = КалендариПоГрафикам[СтрокаНабора.ОбщийГрафик];
		ОтборДанныхКалендарей.ПроизводственныйКалендарь = Календарь;
		
		Значение = 0;
		Для Каждого СтрокаФПД Из СтрокиФПД Цикл
			ОтборДанныхКалендарей.ДатаНачала = СтрокаФПД.ПериодДействияНачало; 
			ОтборДанныхКалендарей.ДатаОкончания = СтрокаФПД.ПериодДействияКонец;	
			СтрокиДанныхКалендаря = ДанныеКалендарей.НайтиСтроки(ОтборДанныхКалендарей);
			Если СтрокиДанныхКалендаря.Количество() > 0 Тогда
				Значение = Значение + СтрокиДанныхКалендаря[0].ДнейКалендарныхБезУчетаПраздников;
			КонецЕсли;	
		КонецЦикла;
		
		СтрокаТаблицыНачисления = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяКалендарныеДниСтрокиРасчета(СтрокаТаблицыНачисления, Показатель, Значение);
	КонецЦикла			
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейКалендарныеДниМесяцаБезУчетаПраздников(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяцаБезПраздников");
	
	Фильтр = УчетРабочегоВремениРасширенный.НовыйФильтрПолученияДанныхКалендарей();
	ГрафикиПоСтрокамФильтра = Новый Соответствие();
	Для Каждого СтрокаТаблицыНачислений Из СтрокиНачисленийКРасчету Цикл
		
		СтрокаФильта = Фильтр.Добавить();
		СтрокаФильта.ДатаНачала = НачалоМесяца(СтрокаТаблицыНачислений.ДатаНачала);
		СтрокаФильта.ДатаОкончания = КонецМесяца(СтрокаТаблицыНачислений.ДатаОкончания);
		ГрафикиПоСтрокамФильтра.Вставить(СтрокаФильта, СтрокаТаблицыНачислений.ОбщийГрафик);
		
	КонецЦикла;
	
	ГрафикиОтбор = ОбщегоНазначения.ВыгрузитьКолонку(ГрафикиПоСтрокамФильтра, "Значение", Истина);
	КалендариПоГрафикам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ГрафикиОтбор, "ПроизводственныйКалендарь");
	
	Для Каждого КлючЗначение Из ГрафикиПоСтрокамФильтра Цикл
		КлючЗначение.Ключ.ПроизводственныйКалендарь = КалендариПоГрафикам[КлючЗначение.Значение];			
	КонецЦикла;
	
	Фильтр.Свернуть("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	
	ДанныеКалендарей = УчетРабочегоВремениРасширенный.ДанныеПроизводственныхКалендарей(Фильтр);
	ДанныеКалендарей.Индексы.Добавить("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	ОтборДанныхКалендарей = Новый Структура("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	Для Каждого СтрокаНачисления Из СтрокиНачисленийКРасчету Цикл
		
		Календарь = КалендариПоГрафикам[СтрокаНачисления.ОбщийГрафик];
		ОтборДанныхКалендарей.ПроизводственныйКалендарь = Календарь;
		
		Значение = 0;
		ОтборДанныхКалендарей.ДатаНачала = НачалоМесяца(СтрокаНачисления.ДатаНачала); 
		ОтборДанныхКалендарей.ДатаОкончания = КонецМесяца(СтрокаНачисления.ДатаОкончания);	
		СтрокиДанныхКалендаря = ДанныеКалендарей.НайтиСтроки(ОтборДанныхКалендарей);
		Если СтрокиДанныхКалендаря.Количество() > 0 Тогда
			Значение = Значение + СтрокиДанныхКалендаря[0].ДнейКалендарныхБезУчетаПраздников;
		КонецЕсли;	
		
		ЗаполнитьЗначениеПоказателяКалендарныеДниСтрокиРасчета(СтрокаНачисления, Показатель, Значение);
	КонецЦикла			
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейКоличествоДнейОтпуска(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНабора = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Если ДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеНабора.ФПД, "Регистратор, НомерСтроки");
	СтруктураПоискаФПД = Новый Структура("Регистратор, НомерСтроки");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ФильтрДанныхКалендаря = УчетРабочегоВремениРасширенный.НовыйФильтрПолученияДанныхКалендарей();
	
	ФильтрДанныхДоговоров = Новый ТаблицаЗначений();
	ФильтрДанныхДоговоров.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ФильтрДанныхДоговоров.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ОтборВидовОтпусков = Новый Массив;
	
	СтрокиПоИдентификатору = Новый Соответствие();
	ГрафикиПоСтрокамФильтра = Новый Соответствие();
	СтрокиТребущиеЗаполненияПоказателя = Новый Массив;
	Для Каждого СтрокаТаблицыНачислений Из СтрокиНачисленийКРасчету Цикл
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений);
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		Если Не ЗначениеЗаполнено(СтрокаНабора.ОбщийГрафик) 
			Или Не ЗначениеЗаполнено(ТребованияТекущегоНачисления.ВидОтпуска) Тогда 
				
			Продолжить;
		КонецЕсли;		
		
		ОтборВидовОтпусков.Добавить(ТребованияТекущегоНачисления.ВидОтпуска);
		
		СтрокаФильтраДоговоров = ФильтрДанныхДоговоров.Добавить();
		СтрокаФильтраДоговоров.Сотрудник = СтрокаНабора.Сотрудник;
		СтрокаФильтраДоговоров.Период = СтрокаНабора.ПериодДействияНачало; 
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаФПД, СтрокаНабора);
		СтрокиФПД = ДанныеНабора.ФПД.НайтиСтроки(СтруктураПоискаФПД);
		
		Для Каждого СтрокаФПД Из СтрокиФПД Цикл
			СтрокаФильта = ФильтрДанныхКалендаря.Добавить();
			СтрокаФильта.ДатаНачала = СтрокаФПД.ПериодДействияНачало;
			СтрокаФильта.ДатаОкончания = СтрокаФПД.ПериодДействияКонец;
			
			ГрафикиПоСтрокамФильтра.Вставить(СтрокаФильта, СтрокаНабора.ОбщийГрафик);
		КонецЦикла;		
		СтрокиТребущиеЗаполненияПоказателя.Добавить(СтрокаНабора);
	КонецЦикла;
	
	ГрафикиОтбор = ОбщегоНазначения.ВыгрузитьКолонку(ГрафикиПоСтрокамФильтра, "Значение", Истина);
	КалендариПоГрафикам = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ГрафикиОтбор, "ПроизводственныйКалендарь");
	
	Для Каждого КлючЗначение Из ГрафикиПоСтрокамФильтра Цикл
		КлючЗначение.Ключ.ПроизводственныйКалендарь = КалендариПоГрафикам[КлючЗначение.Значение].ПроизводственныйКалендарь;			
	КонецЦикла;
	
	ФильтрДанныхКалендаря.Свернуть("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	
	ДанныеКалендарей = УчетРабочегоВремениРасширенный.ДанныеПроизводственныхКалендарей(ФильтрДанныхКалендаря);
	ДанныеКалендарей.Индексы.Добавить("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	
	ДанныеДоговоров = ОстаткиОтпусков.ДоговорыСотрудниковСОтпускомВРабочихДнях(ФильтрДанныхДоговоров);
	ДанныеДоговоров.Индексы.Добавить("Сотрудник, Период");
	
	СвойстваВидовОтпусков = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборВидовОтпусков, "СпособРасчетаОтпуска, ОтпускЯвляетсяЕжегодным");
	
	ОтборДанныхКалендарей = Новый Структура("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	ОтборДанныхДоговоров = Новый Структура("Сотрудник, Период");
	
	Для Каждого СтрокаНабора Из СтрокиТребущиеЗаполненияПоказателя Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаФПД, СтрокаНабора);
		СтрокиФПД = ДанныеНабора.ФПД.НайтиСтроки(СтруктураПоискаФПД);	
		
		Если СтрокиФПД.Количество() = 0 Тогда
			СтрокаТаблицыНачисления = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяКалендарныеДниСтрокиРасчета(СтрокаТаблицыНачисления, Показатель, 0);
			Продолжить;
		КонецЕсли;
		
		Календарь = КалендариПоГрафикам[СтрокаНабора.ОбщийГрафик].ПроизводственныйКалендарь;
		ОтборДанныхКалендарей.ПроизводственныйКалендарь = Календарь;
		ОтборДанныхДоговоров.Сотрудник = СтрокаНабора.Сотрудник;
		ОтборДанныхДоговоров.Период = СтрокаНабора.ПериодДействияНачало;
		
		ВидОтпуска = ТребованияНачислений[СтрокаНабора.ВидРасчета].ВидОтпуска;
		СвойстваВидаОтпуска = СвойстваВидовОтпусков[ВидОтпуска];
		
		Значение = 0;
		Для Каждого СтрокаФПД Из СтрокиФПД Цикл
			ОтборДанныхКалендарей.ДатаНачала = СтрокаФПД.ПериодДействияНачало; 
			ОтборДанныхКалендарей.ДатаОкончания = СтрокаФПД.ПериодДействияКонец;	
			СтрокиДанныхКалендаря = ДанныеКалендарей.НайтиСтроки(ОтборДанныхКалендарей);
			Если СтрокиДанныхКалендаря.Количество() > 0 Тогда
				ДанныеДоговора = Неопределено;
				СтрокиДоговоров = ДанныеДоговоров.НайтиСтроки(ОтборДанныхДоговоров);
				Если СтрокиДоговоров.Количество() > 0 Тогда
					ДанныеДоговора = СтрокиДоговоров[0];
				КонецЕсли;	
				Значение = Значение + КоличествоДнейОтпуска(СвойстваВидаОтпуска, СтрокиДанныхКалендаря[0], ДанныеДоговора);
			КонецЕсли;	
		КонецЦикла;
		
		СтрокаТаблицыНачисления = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяКалендарныеДниСтрокиРасчета(СтрокаТаблицыНачисления, Показатель, Значение);
	КонецЦикла;			 	
КонецПроцедуры

Функция КоличествоДнейОтпуска(СвойстваВидаОтпуска, ДанныеКалендаря, ДанныеДоговора = Неопределено)
	Если ДанныеКалендаря = Неопределено Тогда
		Возврат 0;
	КонецЕсли;	
	
	Если СвойстваВидаОтпуска.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВРабочихДнях Тогда
		Возврат ДанныеКалендаря.ДнейПоШестидневке;
	ИначеЕсли СвойстваВидаОтпуска.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора Тогда	
		Если ДанныеДоговора <> Неопределено И ДанныеДоговора.ОтпускВРабочихДняхПоДоговору Тогда
			Возврат ДанныеКалендаря.ДнейПоШестидневке; 
		ИначеЕсли СвойстваВидаОтпуска.ОтпускЯвляетсяЕжегодным Тогда
		 	Возврат ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников;
		Иначе 
			Возврат ДанныеКалендаря.ДнейКалендарных;
		КонецЕсли
	ИначеЕсли СвойстваВидаОтпуска.ОтпускЯвляетсяЕжегодным Тогда
		Возврат ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников;
	Иначе
		Возврат ДанныеКалендаря.ДнейКалендарных;
	КонецЕсли;							
КонецФункции	

#КонецОбласти

Процедура РассчитатьЗначенияОперативныхПоказателейСотрудников(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	Если ДанныеТекущегоНабора = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Фильтр = ФильтрПолученияОперативныхПоказателейСотрудников(СтрокиНачисленийКРасчету, ДанныеТекущегоНабора, СтрокиНабора);
	
	Если Фильтр.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если НастройкиРасчета.РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц Тогда
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Начисления, "Сотрудник,ПериодДействия,Начисление");
	КонецЕсли;
	
	ЗначенияПоказателей = ЗапросПолученияОперативныхПоказателейСотрудников(Фильтр).Выполнить().Выгрузить();
	ЗначенияПоказателей.Индексы.Добавить("Сотрудник, Организация, Показатель, ДатаНачала, ДатаОкончания");
	ОтборПоказателей = Новый Структура("Сотрудник, Организация, Показатель, ДатаНачала, ДатаОкончания");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеТекущегоНабора.ФПД, "Регистратор, НомерСтроки");
	ОтборФПД = Новый Структура("Регистратор, НомерСтроки");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ПоказателиНачислений = ПоказателиНачислений();	
		
	Для Каждого СтрокаНабора Из Фильтр.СтрокиКРасчету Цикл
		СтрокаТаблицыНачисления = Фильтр.СтрокиПоИдентификаторам[СтрокаНабора.ИдентификаторСтроки];
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		ПоказателиТекущегоНачисления = ПоказателиНачислений[СтрокаНабора.ВидРасчета];
		
		ОтборПоказателей.Сотрудник = СтрокаНабора.Сотрудник;
		ОтборПоказателей.Организация = СтрокаНабора.Организация;
		
		ЗаполнитьЗначенияСвойств(ОтборФПД, СтрокаНабора);
		СтрокиФПД = ДанныеТекущегоНабора.ФПД.НайтиСтроки(ОтборФПД);
		
		Для Каждого СвойстваПоказателя Из ПоказателиТекущегоНачисления Цикл
			Если Не СвойстваПоказателя.ОперативныйПоказательСотрудника Тогда
				Продолжить;
			КонецЕсли;	
			
			ОтборПоказателей.Показатель = СвойстваПоказателя.Показатель;	
			Значение = ЗначениеОперативногоПоказателя(
				СтрокаТаблицыНачисления,
				СтрокиФПД,
				ЗначенияПоказателей,
				ОтборПоказателей,
				ТребованияТекущегоНачисления.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц);
				
			Если Значение <> Неопределено Тогда 	
				ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, СвойстваПоказателя.Показатель, Значение, Истина);	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

Функция ЗначениеОперативногоПоказателя(СтрокаНачисления, СтрокиФПД, ЗначенияПоказателей, ОтборПоказателей, ПоказательВЦеломЗаМесяц)
	Значение = Неопределено;
	
	Если ПоказательВЦеломЗаМесяц Тогда
		ОтборПоказателей.ДатаНачала = НачалоМесяца(СтрокаНачисления.ДатаНачала);
		ОтборПоказателей.ДатаОкончания = КонецМесяца(СтрокаНачисления.ДатаОкончания);
		
		СтрокиЗначений = ЗначенияПоказателей.НайтиСтроки(ОтборПоказателей);
		Если СтрокиЗначений.Количество() > 0 Тогда
			Значение = СтрокиЗначений[0].Значение;
			
			Если НастройкиРасчета.РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц Тогда
				СтруктураПоиска = Новый Структура("Сотрудник,ПериодДействия,Начисление");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНачисления);
				
				СтрокиРаспределения = Начисления.НайтиСтроки(СтруктураПоиска);
				ПолеРаспределения = ?(СтрокаНачисления.ВремяВЧасах, "ОплаченоЧасов", "ОплаченоДней");
				КоэффициентыРаспределения = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, ПолеРаспределения);
				
				РаспределениеСуммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(
						Значение, КоэффициентыРаспределения, 0);
						
				Если РаспределениеСуммы <> Неопределено Тогда
					Значение = РаспределениеСуммы[СтрокиРаспределения.Найти(СтрокаНачисления)];	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Для Каждого СтрокаФПД Из СтрокиФПД Цикл
			ОтборПоказателей.ДатаНачала = СтрокаФПД.ПериодДействияНачало;
			ОтборПоказателей.ДатаОкончания = СтрокаФПД.ПериодДействияКонец;
			СтрокиЗначений = ЗначенияПоказателей.НайтиСтроки(ОтборПоказателей);
			
			Если СтрокиЗначений.Количество() > 0 Тогда
				Если Значение = Неопределено Тогда
					Значение  = 0;
				КонецЕсли;	
				Значение = Значение + СтрокиЗначений[0].Значение;
			КонецЕсли;	
		КонецЦикла;			
	КонецЕсли;	
	
	Возврат Значение;
КонецФункции	

Функция ФильтрПолученияОперативныхПоказателейСотрудников(СтрокиНачисленийКРасчету, ДанныеТекущегоНабора, СтрокиНабораПоИдентфикаторам)
	Фильтр = Новый Структура;
	Фильтр.Вставить("СтрокиКРасчету", Новый Массив);
	Фильтр.Вставить("СтрокиПоИдентификаторам", Новый Соответствие());
	Фильтр.Вставить("МинимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Фильтр.Вставить("МаксимальнаяДата", '00010101');
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФильтр.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаФильтр.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));	
	
	Фильтр.Вставить("ТаблицаФильтр", ТаблицаФильтр);
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеТекущегоНабора.ФПД, "Регистратор, НомерСтроки");
	ОтборСтрокФПД = Новый Структура("Регистратор, НомерСтроки");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ПоказателиНачислений = ПоказателиНачислений();
	
	Для Каждого СтрокаТаблицыНачисления Из СтрокиНачисленийКРасчету Цикл
		Фильтр.СтрокиПоИдентификаторам.Вставить(СтрокаТаблицыНачисления.ИдентификаторСтроки, СтрокаТаблицыНачисления);
		СтрокаНабора = СтрокиНабораПоИдентфикаторам[СтрокаТаблицыНачисления.ИдентификаторСтроки];
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		Фильтр.СтрокиКРасчету.Добавить(СтрокаНабора);
		
		Если Не ТребованияТекущегоНачисления.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц Тогда
			ЗаполнитьЗначенияСвойств(ОтборСтрокФПД, СтрокаНабора);
			СтрокиФПД = ДанныеТекущегоНабора.ФПД.НайтиСтроки(ОтборСтрокФПД);	
		КонецЕсли;		
		
		ПоказателиТекущегоНачисления = ПоказателиНачислений[СтрокаНабора.ВидРасчета];
		
		Для Каждого СведенияОПоказателе Из ПоказателиТекущегоНачисления Цикл
			Если Не СведенияОПоказателе.ОперативныйПоказательСотрудника Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ТребованияТекущегоНачисления.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц Тогда
				Если Не НастройкиРасчета.РассчитатьПоказателиНакапливаемыеВЦеломЗаМесяц Тогда
					Продолжить;
				КонецЕсли;	
				СтрокаФильтра = ТаблицаФильтр.Добавить();
				СтрокаФильтра.Сотрудник = СтрокаНабора.Сотрудник;
				СтрокаФильтра.Организация = СтрокаНабора.Организация;
				СтрокаФильтра.Показатель = СведенияОПоказателе.Показатель;
				СтрокаФильтра.ДатаНачала = НачалоМесяца(СтрокаНабора.ПериодДействияНачало);
				СтрокаФильтра.ДатаОкончания = КонецМесяца(СтрокаНабора.ПериодДействияКонец);
				Если СтрокаФильтра.ДатаНачала < Фильтр.МинимальнаяДата Тогда
					Фильтр.МинимальнаяДата = СтрокаФильтра.ДатаНачала;
				КонецЕсли;
				Если СтрокаФильтра.ДатаОкончания > Фильтр.МаксимальнаяДата Тогда
					Фильтр.МаксимальнаяДата = СтрокаФильтра.ДатаОкончания;
				КонецЕсли; 
				
			Иначе
				Для Каждого СтрокаФПД Из СтрокиФПД Цикл
					СтрокаФильтра = ТаблицаФильтр.Добавить();
					СтрокаФильтра.Сотрудник = СтрокаНабора.Сотрудник;
					СтрокаФильтра.Организация = СтрокаНабора.Организация;
					СтрокаФильтра.Показатель = СведенияОПоказателе.Показатель;
					СтрокаФильтра.ДатаНачала = СтрокаФПД.ПериодДействияНачало;
					СтрокаФильтра.ДатаОкончания = СтрокаФПД.ПериодДействияКонец;
					Если СтрокаФильтра.ДатаНачала < Фильтр.МинимальнаяДата Тогда
						Фильтр.МинимальнаяДата = СтрокаФильтра.ДатаНачала;
					КонецЕсли;
					Если СтрокаФильтра.ДатаОкончания > Фильтр.МаксимальнаяДата Тогда
						Фильтр.МаксимальнаяДата = СтрокаФильтра.ДатаОкончания;
					КонецЕсли; 
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;			
	КонецЦикла;	
	
	ТаблицаФильтр.Свернуть("Сотрудник, Показатель, Организация, ДатаНачала, ДатаОкончания");
	
	Возврат Фильтр;	
КонецФункции

Функция ЗапросПолученияОперативныхПоказателейСотрудников(Фильтр)
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();   
	ОписаниеПакета.Параметры.Вставить("МинимальнаяДата", Фильтр.МинимальнаяДата);
	ОписаниеПакета.Параметры.Вставить("МаксимальнаяДата", Фильтр.МаксимальнаяДата);

	ОписаниеРегитра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
		Фильтр.ТаблицаФильтр,
		"Сотрудник, Показатель, Организация");
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателей.Сотрудник КАК Сотрудник,
	|	ЗначенияПоказателей.Показатель КАК Показатель,
	|	ЗначенияПоказателей.Организация КАК Организация,
	|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
	|		ПО (&ШаблонУсловиеПоИзмерениям)
	|			И (ЗначенияПоказателей.Период МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_)
	|ГДЕ
	|	ЗначенияПоказателей.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателей.Сотрудник,
	|	ЗначенияПоказателей.Показатель,
	|	ЗначенияПоказателей.Организация";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ИзмеренияДаты", "ЗначенияПоказателей");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегитра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");		
	ВыражениеДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");		
	ВыражениеДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеДатаНачала, "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеДатаНачала);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеДатаОкончания, "ДатаОкончания");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеДатаОкончания);
	
	Если НастройкиРасчета.ПерваяПоловинаМесяца Тогда
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "ЗначенияПоказателей",
			"ЗначенияПоказателей.ИспользоватьПриРасчетеПервойПоловиныМесяца");
	КонецЕсли;
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакета,
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);
		
	Возврат ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);	
КонецФункции	

Процедура РассчитатьЗначенияОперативныхПоказателейОрганизаций(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Если ДанныеТекущегоНабора = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	ПоказателиНачислений = ПоказателиНачислений();
	
	Фильтр = ФильтрОперативныхПоказателейСтруктурныхЕдинициц(
		СтрокиНачисленийКРасчету, 
		СтрокиНабора, 
		"Организация", 
		Тип("СправочникСсылка.Организации"), 
		ТребованияНачислений,
		"ТребуютсяЗначенияОперативныхПоказателейОрганизаций", 
		ПоказателиНачислений,
		"ОперативныйПоказательОрганизации");
		
	ЗапросЗначенинийПоказателей = ЗапросОперативныхПоказателейСтруктурынхЕдиниц(
		"ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций", 
		Фильтр.ТаблицаФильтр, 
		"Организация");
		
	ЗначенияПоказателей = ЗапросЗначенинийПоказателей.Выполнить().Выгрузить();
	
	РассчитатьЗначенияОперативныхПоказателейСтруктурныхЕдинициц(
		Фильтр,
		ЗначенияПоказателей,
		"Организация",
		ПоказателиНачислений,
		"ОперативныйПоказательОрганизации");
КонецПроцедуры

Процедура РассчитатьЗначенияОперативныхПоказателейПодразделений(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Если ДанныеТекущегоНабора = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	ПоказателиНачислений = ПоказателиНачислений();
	
	Фильтр = ФильтрОперативныхПоказателейСтруктурныхЕдинициц(
		СтрокиНачисленийКРасчету,
		СтрокиНабора, 
		"Подразделение", 
		Тип("СправочникСсылка.ПодразделенияОрганизаций"), 
		ТребованияНачислений,
		"ТребуютсяЗначенияОперативныхПоказателейПодразделений", 
		ПоказателиНачислений,
		"ОперативныйПоказательПодразделения");
		
	ЗапросЗначенинийПоказателей = ЗапросОперативныхПоказателейСтруктурынхЕдиниц(
		"ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений", 
		Фильтр.ТаблицаФильтр, 
		"Подразделение");
		
	ЗначенияПоказателей = ЗапросЗначенинийПоказателей.Выполнить().Выгрузить();
		
	РассчитатьЗначенияОперативныхПоказателейСтруктурныхЕдинициц(
		Фильтр,
		ЗначенияПоказателей,
		"Подразделение",
		ПоказателиНачислений,
		"ОперативныйПоказательПодразделения");

КонецПроцедуры

Процедура РассчитатьЗначенияОперативныхПоказателейСтруктурныхЕдинициц(Фильтр, ЗначенияПоказателей, ИмяПоляСтруктурнаяЕдиница, ПоказателиВидовРасчета, СвойствоПоказателя)	
	Если Фильтр.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
		
	ЗначенияПоказателей.Индексы.Добавить("Показатель, ДатаНачала, ДатаОкончания, " + ИмяПоляСтруктурнаяЕдиница);
	ОтборПоказателей = Новый Структура("Показатель, ДатаНачала, ДатаОкончания, " + ИмяПоляСтруктурнаяЕдиница);
					
	Для Каждого СтрокаНабора Из Фильтр.СтрокиКРасчету Цикл
		СтрокаТаблицыНачисления = Фильтр.СтрокиПоИдентификаторам[СтрокаНабора.ИдентификаторСтроки];
		ПоказателиТекущегоНачисления = ПоказателиВидовРасчета[СтрокаНабора.ВидРасчета];
		
		ОтборПоказателей[ИмяПоляСтруктурнаяЕдиница] = СтрокаТаблицыНачисления[ИмяПоляСтруктурнаяЕдиница];		
		ОтборПоказателей.ДатаНачала = СтрокаНабора.ПериодДействияНачало;
		ОтборПоказателей.ДатаОкончания = СтрокаНабора.ПериодДействияКонец;
		
		Для Каждого СвойстваПоказателя Из ПоказателиТекущегоНачисления Цикл
			Если Не СвойстваПоказателя[СвойствоПоказателя] Тогда
				Продолжить;
			КонецЕсли;	
			
			ОтборПоказателей.Показатель = СвойстваПоказателя.Показатель;	
			СтрокиЗначений = ЗначенияПоказателей.НайтиСтроки(ОтборПоказателей);
			
			Если СтрокиЗначений.Количество() > 0 Тогда
				Значение = СтрокиЗначений[0].Значение;
			Иначе
				Значение = Неопределено;
			КонецЕсли;	
			
			СтрокаТаблицыНачисления = Фильтр.СтрокиПоИдентификаторам[СтрокаНабора.ИдентификаторСтроки];					
			ЗаполнитьЗначениеПоказателяКалендарныеДниСтрокиРасчета(СтрокаТаблицыНачисления, СвойстваПоказателя.Показатель, Значение);	
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры	

Функция ФильтрОперативныхПоказателейСтруктурныхЕдинициц(СтрокиНачисленийКРасчету, СтрокиНабора, ИмяПоляСтруктурнаяЕдиница, ТипПоляСтруктурнаяЕдиница, ТребованияВидовРасчета, Требование, ПоказателиВидовРасчета, СвойствоПоказателя)
	Фильтр = Новый Структура;
	Фильтр.Вставить("СтрокиКРасчету", Новый Массив);
	Фильтр.Вставить("СтрокиПоИдентификаторам", Новый Соответствие());
	Фильтр.Вставить("МинимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Фильтр.Вставить("МаксимальнаяДата", '00010101');
	Фильтр.Вставить("ТаблицаФильтр");
	
	ОписаниеТипаСтруктурнойЕдиници = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипПоляСтруктурнаяЕдиница));
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить(ИмяПоляСтруктурнаяЕдиница, ОписаниеТипаСтруктурнойЕдиници);
	ТаблицаФильтр.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Фильтр.Вставить("ТаблицаФильтр", ТаблицаФильтр);
		
	Для Каждого СтрокаТаблицыНачислений Из СтрокиНачисленийКРасчету Цикл
		Фильтр.СтрокиПоИдентификаторам.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений);
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
		Фильтр.СтрокиКРасчету.Добавить(СтрокаНабора);
		
		ПоказателиТекущегоНачисления = ПоказателиВидовРасчета[СтрокаНабора.ВидРасчета];
		
		Для Каждого СведенияОПоказателе Из ПоказателиТекущегоНачисления Цикл
			Если Не СведенияОПоказателе[СвойствоПоказателя] Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокаФильтра = ТаблицаФильтр.Добавить();
			
			СтрокаФильтра[ИмяПоляСтруктурнаяЕдиница] = СтрокаТаблицыНачислений[ИмяПоляСтруктурнаяЕдиница];
			СтрокаФильтра.Показатель = СведенияОПоказателе.Показатель;
			СтрокаФильтра.ДатаНачала = СтрокаНабора.ПериодДействияНачало;
			СтрокаФильтра.ДатаОкончания = СтрокаНабора.ПериодДействияКонец;		
			
			Если СтрокаФильтра.ДатаНачала < Фильтр.МинимальнаяДата Тогда
				Фильтр.МинимальнаяДата = СтрокаФильтра.ДатаНачала;
			КонецЕсли;
			Если СтрокаФильтра.ДатаОкончания > Фильтр.МаксимальнаяДата Тогда
				Фильтр.МаксимальнаяДата = СтрокаФильтра.ДатаОкончания;
			КонецЕсли; 
		КонецЦикла;			
	КонецЦикла;	
	
	ТаблицаФильтр.Свернуть("Показатель, ДатаНачала, ДатаОкончания, " + ИмяПоляСтруктурнаяЕдиница);
	
	Возврат Фильтр;		
КонецФункции	

Функция ЗапросОперативныхПоказателейСтруктурынхЕдиниц(ИмяРегистра, ТаблицаФильтр, ИмяПоляСтруктурнаяЕдиница)
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();   

	ОписаниеРегитра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
		ТаблицаФильтр,
		"Показатель, " + ИмяПоляСтруктурнаяЕдиница);
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	&ШаблонСтуктурнаяЕдиница КАК СтуктурнаяЕдиница,
	|	ЗначенияПоказателей.Показатель КАК Показатель,
	|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ЗначенияОперативныхПоказател КАК ЗначенияПоказателей
	|		ПО (&ШаблонУсловиеПоИзмерениям)
	|			И (ЗначенияПоказателей.Период МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_)
	|
	|СГРУППИРОВАТЬ ПО
	|	&ШаблонСтуктурнаяЕдиниц,
	|	ЗначенияПоказателей.Показатель";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
		
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "ЗначенияПоказателей", "РегистрНакопления." + ИмяРегистра);
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ИзмеренияДаты", "ЗначенияПоказателей");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегитра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");		
	ВыражениеДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");		
	ВыражениеДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеДатаНачала, "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеДатаНачала);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеДатаОкончания, "ДатаОкончания");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеДатаОкончания);
	
	ВыражениеПоляСтруктурнаяЕдиница = "ЗначенияПоказателей." + ИмяПоляСтруктурнаяЕдиница;
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляСтруктурнаяЕдиница, ИмяПоляСтруктурнаяЕдиница);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляСтруктурнаяЕдиница);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакета,
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);
		
	Возврат ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);	
КонецФункции	

Процедура РассчитатьЗначенияПоказателейКоэффициентИндексацииСреднегоЗаработка(СтрокиНачисленийКРасчету)
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНабора = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Если ДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ДатыНачалаСобытий = ДатыНачалаСобытий();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДатыНачалаСобытий, "Сотрудник");
		
	СтрокиКРасчету = Новый Массив();
	ДокументыОснованияПоСтрокамФильтра = Новый Соответствие();
	СтрокиФильтраПоСтрокамНабора = Новый Соответствие();
	Фильтр = РасчетЗарплатыРасширенный.НовыйФильтрКоэффициентИндексацииЗаработка();	
	СтрокиПоИдентификатору = Новый Соответствие();
	Для Каждого СтрокаТаблицыНачислений Из СтрокиНачисленийКРасчету Цикл
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений);
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
		
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];	
		
		СтрокаФильтра = Фильтр.Добавить();
		СтрокаФильтра.Сотрудник = СтрокаНабора.Сотрудник;
		СтрокаФильтра.ДатаОкончания = СтрокаНабора.ПериодДействияКонец;
		
		СтрокиТаблицыДат = ДатыНачалаСобытий.НайтиСтроки(Новый Структура("Сотрудник", СтрокаНабора.Сотрудник));
		Если СтрокиТаблицыДат.Количество() = 0 Тогда
			СтрокаФильтра.ДатаНачала = СтрокаНабора.ПериодДействияНачало;
			ДокументыОснованияПоСтрокамФильтра.Вставить(СтрокаФильтра, СтрокаНабора.ДокументОснование);
		Иначе	
			СтрокаФильтра.ДатаНачала = СтрокиТаблицыДат[0].Дата;
		КонецЕсли;			
		СтрокиФильтраПоСтрокамНабора.Вставить(СтрокаНабора, СтрокаФильтра);
		СтрокиКРасчету.Добавить(СтрокаНабора);
	КонецЦикла;
	
	Если ДокументыОснованияПоСтрокамФильтра.Количество() > 0 Тогда
		УточнитьДатыНачалаПолученияКоэффциентовИндексации(ДокументыОснованияПоСтрокамФильтра);	
	КонецЕсли;
	
	КоэффициентИндексацииСреднегоЗаработка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка");
	КоэффициентИндексацииСохраняемогоДенежногоСодержания = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания");
	
	КоэффициентИндексации = РасчетЗарплатыРасширенный.КоэффициентИндексацииЗаработка(Фильтр);
	КоэффициентИндексации.Индексы.Добавить("Сотрудник, ДатаНачала, ДатаОкончания");
	ОтборКоэффициентов = Новый Структура("Сотрудник, ДатаНачала, ДатаОкончания");
	
	// В соответствии с положением о расчете среднего заработка 
	// «..если повышение произошло в период сохранения среднего заработка, 
	// - часть среднего заработка повышается с даты повышения тарифной ставки...».
	// Это значит, что необходимо 
	// - выбрать все месяцы, с даты начала оплачиваемого события
	// - получить коэффициенты индексации заработка за эти месяцы
	// - последовательно начиная с первого месяца агрегировать умножением, получая коэффициент на каждый месяц
	// - сделать все это в разрезе сотрудников.
	
	Для Каждого СтрокаНабора Из СтрокиКРасчету Цикл
		СтрокаТаблицыНачисления = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		СтрокаФильтра = СтрокиФильтраПоСтрокамНабора[СтрокаНабора];
		ЗаполнитьЗначенияСвойств(ОтборКоэффициентов, СтрокаФильтра);
		Коэффиценты = КоэффициентИндексации.НайтиСтроки(ОтборКоэффициентов);
		
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		 
		Если ТребованияТекущегоНачисления.ТребуетсяПоказательКоэффициентИндексацииСреднегоЗаработка Тогда
			Значение = КоэффициентИндексацииСреднегоЗаработка(Коэффиценты);
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, КоэффициентИндексацииСреднегоЗаработка, Значение, Истина);
		КонецЕсли;	
		
		Если ТребованияТекущегоНачисления.ТребуетсяПоказательКоэффициентИндексацииСохраняемогоДенежногоСодержания Тогда
			Значение = КоэффициентИндексацииСохраняемогоДенежногоСодержания(СтрокаФильтра, Коэффиценты);
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, КоэффициентИндексацииСохраняемогоДенежногоСодержания, Значение, Истина);
		КонецЕсли;			
	КонецЦикла;	
КонецПроцедуры

Функция ДатыНачалаСобытий()
	Если ДатыНачалаСобытия = Неопределено Тогда
		ДатыНачалаСобытия = ТаблицаДатыНачалаСобытия();
	КонецЕсли;	
		
	Возврат ДатыНачалаСобытия;
КонецФункции

Функция КоэффициентИндексацииСреднегоЗаработка(Коэффиценты)
	Коэффициент	= 1;
	Для Каждого СтрокаКоэффицента Из Коэффиценты Цикл
		Коэффициент = Коэффициент * СтрокаКоэффицента.Коэффициент;
	КонецЦикла;		
	
	Возврат Коэффициент;
КонецФункции	

Функция КоэффициентИндексацииСохраняемогоДенежногоСодержания(Период, Коэффиценты)
	Коэффициент	= 1;
	Для Каждого СтрокаКоэффицента Из Коэффиценты Цикл
		Если СтрокаКоэффицента.Период <> Период.ДатаНачала Тогда
			Коэффициент = Коэффициент * СтрокаКоэффицента.Коэффициент;
		КонецЕсли;	
	КонецЦикла;		
		
	Возврат Коэффициент;	
КонецФункции

Процедура УточнитьДатыНачалаПолученияКоэффциентовИндексации(ДокументыОснованияПоСтрокамФильтра)
	ОтборДокументов = ОбщегоНазначения.ВыгрузитьКолонку(ДокументыОснованияПоСтрокамФильтра, "Значение", Истина);
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОтборДокументов", ОтборДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыСреднегоЗаработка.ДокументОснование КАК ДокументОснование,
	|	ДокументыСреднегоЗаработка.ДатаНачалаСобытия КАК ДатаНачалаСобытия	
	|ИЗ
	|	РегистрСведений.ДокументыСреднегоЗаработка КАК ДокументыСреднегоЗаработка
	|ГДЕ
	|	ДокументыСреднегоЗаработка.ДокументОснование В (&ОтборДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатыНачалаПоДокументамОснования = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		ДатыНачалаПоДокументамОснования.Вставить(Выборка.ДокументОснование, Выборка.ДатаНачалаСобытия); 
	КонецЦикла;	
	
	Для Каждого СтрокаФильтра Из ДокументыОснованияПоСтрокамФильтра Цикл
		СтрокаФильтра.Ключ.ДатаНачала = ДатыНачалаПоДокументамОснования[СтрокаФильтра.Значение];	
	КонецЦикла;		
КонецПроцедуры	

#КонецОбласти

#Область ЗначенияПоказателейУдержаний

Процедура ЗаполнитьЗначенияПоказателейУдержанийСлужебный()
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьФиксированныеСуммыУдержаний();
	
	ЗаполнитьИдентификаторСтроки(Удержания);
	СтрокиПоИдентификатору = СтрокиУдержанийПоИдентификаторам(Удержания);

	ПоказателиФизическихЛиц = ПоказателиФизическихЛицУдержаний();
	
	ЗаполнитьЗначенияПериодическихПоказателейФизическихЛиц(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПериодическихПоказателейОрганизаций(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПериодическихПоказателейПодразделений(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияРазовыхПоказателейФизическихЛиц(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияРазовыхПоказателейОрганизаций(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияРазовыхПоказателейПодразделений(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияОперативныхПоказателейФизическихЛиц(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияОперативныхПоказателейОрганизаций(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияОперативныхПоказателейПодразделений(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияПоказателейКалендарныеДниУдержаний(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	ЗаполнитьЗначенияПоказателейКалендарныеДниМесяцаУдержаний(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияДополнительныхПоказателейУдержаний(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);
	
	ЗаполнитьЗначенияИзвестныхПоказателей(ПоказателиФизическихЛиц.ИзвестныеПоказатели, Ложь);	
КонецПроцедуры

Функция СтрокиУдержанийПоИдентификаторам(ТаблицаУдержаний)
	СтрокиУдержанийПоИдентификаторам = Новый Соответствие;
	
	Для Каждого СтрокаТаблицыУдержаний Из ТаблицаУдержаний Цикл
		СтрокиУдержанийПоИдентификаторам.Вставить(СтрокаТаблицыУдержаний.ИдентификаторСтроки, СтрокаТаблицыУдержаний);		
	КонецЦикла;	
	
	Возврат СтрокиУдержанийПоИдентификаторам;
КонецФункции

Процедура ЗаполнитьЗначенияПоказателейКалендарныеДниУдержаний(ПоказателиФизическихЛиц, СтрокиПоИдентификатору)
	Если ПоказателиФизическихЛиц.ПоказателиКалендарныеДни.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаПоказателя Из ПоказателиФизическихЛиц.ПоказателиКалендарныеДни Цикл
		ЗначениеПоказателя = КалендарныеДниПериода(СтрокаПоказателя, "ДатаНачала", "ДатаОкончания");
		РассчитывемаяСтрока = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(РассчитывемаяСтрока, СтрокаПоказателя.Показатель, ЗначениеПоказателя);
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаполнитьЗначенияПоказателейКалендарныеДниМесяцаУдержаний(ПоказателиФизическихЛиц, СтрокиПоИдентификатору)
	Если ПоказателиФизическихЛиц.ПоказателиКалендарныеДниМесяца.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаПоказателя Из ПоказателиФизическихЛиц.ПоказателиКалендарныеДниМесяца Цикл
		ЗначениеПоказателя = День(КонецМесяца(СтрокаПоказателя.ДатаОкончания));	
		РассчитывемаяСтрока = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(РассчитывемаяСтрока, СтрокаПоказателя.Показатель, ЗначениеПоказателя);
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗаполнитьЗначенияПериодическихПоказателейФизическихЛиц(ПоказателиФизическизЛиц, СтрокиУдержанийПоИдентификаторам)
	Если ПоказателиФизическизЛиц.ПериодическиеПоказателиФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПериодическихПоказателейФизическихЛиц = ЗначенияПериодическихПоказателейФизическихЛиц();
	ЗаполнитьЗначенияПоказателейСотрудниковПоТаблицеИнтервалов(
		ПоказателиФизическизЛиц.ПериодическиеПоказателиФизическихЛиц, 
		ЗначенияПериодическихПоказателейФизическихЛиц, 
		СтрокиУдержанийПоИдентификаторам, 
		"ФизическоеЛицо");	
КонецПроцедуры	

Процедура ЗаполнитьЗначенияОперативныхПоказателейФизическихЛиц(ПоказателиФизическихЛиц, СтрокиПоИдентификатору)
	Если ПоказателиФизическихЛиц.ОперативныеПоказателиФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПолученияПоказателей = ЗапросОперативныхПоказателейФизическихЛиц(ПоказателиФизическихЛиц.ОперативныеПоказателиФизическихЛиц);
	
	ЗначенияПоказателей = ЗапросПолученияПоказателей.Выполнить().Выгрузить();
	ЗначенияПоказателей.Индексы.Добавить("ФизическоеЛицо, Показатель, ДатаНачала, ДатаОкончания");
	Отбор = Новый Структура("ФизическоеЛицо, Показатель, ДатаНачала, ДатаОкончания");
	
	Для Каждого СтрокаПоказателя Из  ПоказателиФизическихЛиц.ОперативныеПоказателиФизическихЛиц Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПоказателя);
		СтрокиЗначений = ЗначенияПоказателей.НайтиСтроки(Отбор);
		
		Если СтрокиЗначений.Количество() > 0 Тогда
			РассчитывемаяСтрока = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(РассчитывемаяСтрока, СтрокаПоказателя.Показатель, СтрокиЗначений[0].Значение);
		КонецЕсли;	
	КонецЦикла;			
КонецПроцедуры

Функция ЗапросОперативныхПоказателейФизическихЛиц(ТаблицаФильтр)
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();   
	ОписаниеПакета.Параметры.Вставить("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
		
	ОписаниеРегитра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
		ТаблицаФильтр,
		"ФизическоеЛицо, Показатель");
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗначенияПоказателей.Показатель КАК Показатель,
	|	СУММА(ЗначенияПоказателей.Значение) КАК Значение,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
	|		ПО (&ШаблонУсловиеПоИзмерениям)
	|			И (ЗначенияПоказателей.Период МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_)
	|ГДЕ
	|	ЗначенияПоказателей.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателей.ФизическоеЛицо,
	|	ЗначенияПоказателей.Показатель";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
			
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ИзмеренияДаты", "ЗначенияПоказателей");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегитра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");		
	ВыражениеДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");		
	ВыражениеДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеДатаНачала, "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеДатаНачала);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеДатаОкончания, "ДатаОкончания");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеДатаОкончания);
	
	Если НастройкиРасчета.ПерваяПоловинаМесяца Тогда
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "ЗначенияПоказателей",
			"ЗначенияПоказателей.ИспользоватьПриРасчетеПервойПоловиныМесяца");
	КонецЕсли;
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакета,
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);
		
	Возврат ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);	
КонецФункции

Процедура ЗаполнитьЗначенияОперативныхПоказателейОрганизаций(ПоказателиФизическихЛиц, СтрокиПоИдентификатору)
	
	Если ПоказателиФизическихЛиц.ОперативныеПоказателиОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтр = ПоказателиФизическихЛиц.ОперативныеПоказателиОрганизаций.Скопировать(, "Организация, Показатель, ДатаНачала, ДатаОкончания");
	ТаблицаФильтр.Свернуть("Организация, Показатель, ДатаНачала, ДатаОкончания");	
	
	ЗапросПолученияПоказателей = ЗапросОперативныхПоказателейСтруктурынхЕдиниц(
		"ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций",
		ТаблицаФильтр,
		"Организация");
	
	ЗначенияПоказателей = ЗапросПолученияПоказателей.Выполнить().Выгрузить();
	ЗначенияПоказателей.Индексы.Добавить("Организация, Показатель, ДатаНачала, ДатаОкончания");
	Отбор = Новый Структура("Организация, Показатель, ДатаНачала, ДатаОкончания");
	
	Для Каждого СтрокаПоказателя Из  ПоказателиФизическихЛиц.ОперативныеПоказателиОрганизаций Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПоказателя);
		СтрокиЗначений = ЗначенияПоказателей.НайтиСтроки(Отбор);
		
		Если СтрокиЗначений.Количество() > 0 Тогда
			РассчитывемаяСтрока = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(РассчитывемаяСтрока, СтрокаПоказателя.Показатель, СтрокиЗначений[0].Значение);
		КонецЕсли;	
	КонецЦикла;			
КонецПроцедуры

Процедура ЗаполнитьЗначенияОперативныхПоказателейПодразделений(ПоказателиФизическихЛиц, СтрокиПоИдентификатору)
	
	Если ПоказателиФизическихЛиц.ОперативныеПоказателиПодразделений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтр = ПоказателиФизическихЛиц.ОперативныеПоказателиПодразделений.Скопировать(, "Подразделение, Показатель, ДатаНачала, ДатаОкончания");
	ТаблицаФильтр.Свернуть("Подразделение, Показатель, ДатаНачала, ДатаОкончания");
	
	ЗапросПолученияПоказателей = ЗапросОперативныхПоказателейСтруктурынхЕдиниц(
		"ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений",
		ТаблицаФильтр,
		"Подразделение");
	
	ЗначенияПоказателей = ЗапросПолученияПоказателей.Выполнить().Выгрузить();
	ЗначенияПоказателей.Индексы.Добавить("Подразделение, Показатель, ДатаНачала, ДатаОкончания");
	Отбор = Новый Структура("Подразделение, Показатель, ДатаНачала, ДатаОкончания");
	
	Для Каждого СтрокаПоказателя Из  ПоказателиФизическихЛиц.ОперативныеПоказателиПодразделений Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПоказателя);
		СтрокиЗначений = ЗначенияПоказателей.НайтиСтроки(Отбор);
		
		Если СтрокиЗначений.Количество() > 0 Тогда
			РассчитывемаяСтрока = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(РассчитывемаяСтрока, СтрокаПоказателя.Показатель, СтрокиЗначений[0].Значение, Истина);
		КонецЕсли;	
	КонецЦикла;			
КонецПроцедуры

Функция ПоказателиФизическихЛицУдержаний()
	Если КэшПоказателиФизическихЛицУдержаний <> Неопределено Тогда
		Возврат КэшПоказателиФизическихЛицУдержаний;
	КонецЕсли;	
	
	ДополнительныеПоказатели = ДополнительныеПоказатели();
	
	ТаблицаПоказателейСотрудникаШаблон = Новый ТаблицаЗначений;
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ДокументОснование");
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("УчитватьДокументОснование", Новый ОписаниеТипов("Булево"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
			
	ТребованияУдержаний = ТребованияУдержанийТаблица();
	ПоказателиУдержаний = ПоказателиУдержаний();
	
	ИзвестныеПоказатели = ИзвестныеПоказателиУдержаний(Удержания);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ИзвестныеПоказатели, "Показатель, ИдентификаторСтроки");
	СтруктураПоискаИзвестных = Новый Структура("Показатель, ИдентификаторСтроки");	
		
	ПоказателиФизическихЛиц = Новый Структура;
	ПоказателиФизическихЛиц.Вставить("ПериодическиеПоказателиФизическихЛиц", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("ПериодическиеПоказателиПодразделений", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("ПериодическиеПоказателиОрганизаций", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("РазовыеПоказателиФизическихЛиц", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("РазовыеПоказателиПодразделений", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("РазовыеПоказателиОрганизаций", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("ОперативныеПоказателиФизическихЛиц", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("ОперативныеПоказателиПодразделений", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("ПоказателиКалендарныеДни", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("ПоказателиКалендарныеДниМесяца", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("ОперативныеПоказателиОрганизаций", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.Вставить("ДополнительныеПоказатели", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	
	ПоказателиФизическихЛиц.ДополнительныеПоказатели.Колонки.Удалить("ДокументОснование");
	
	ПоказателиФизическихЛиц.Вставить("ИзвестныеПоказатели", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиФизическихЛиц.ИзвестныеПоказатели.Колонки.Добавить("СтрокаТаблицыРасчета");
	
	ПоказателиФизическихЛиц.РазовыеПоказателиОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));	
	ПоказателиФизическихЛиц.РазовыеПоказателиПодразделений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ПоказателиФизическихЛиц.ОперативныеПоказателиФизическихЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));	
	ПоказателиФизическихЛиц.ОперативныеПоказателиПодразделений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПоказателиФизическихЛиц.ОперативныеПоказателиОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	КалендарныеДни = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	КалендарныеДниМесяца = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца");
	
	Для Каждого ТекущаяСтрокаУдержаний Из Удержания Цикл
		СтруктураПоискаИзвестных.ИдентификаторСтроки = ТекущаяСтрокаУдержаний.ИдентификаторСтроки;
		ПоказателиТекущегоУдержания = ПоказателиУдержаний[ТекущаяСтрокаУдержаний.Удержание];
		
		Если ПоказателиТекущегоУдержания = Неопределено 
			Или ТекущаяСтрокаУдержаний.ФиксЗаполнение Тогда
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущийПоказатель Из ПоказателиТекущегоУдержания Цикл
			СтруктураПоискаИзвестных.Показатель = ТекущийПоказатель.Показатель;
			ЗначенияИзвестныхПоказателей = ИзвестныеПоказатели.НайтиСтроки(СтруктураПоискаИзвестных); 
			
			ПолучатьДанныеНаНачалоМесяца = Ложь;
			ПолучатьДанныеЗаПериод = Ложь;
			Если ЗначенияИзвестныхПоказателей.Количество() > 0 Тогда
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ИзвестныеПоказатели.Добавить();	
				СтрокаТаблицПоказателей.Значение = ЗначенияИзвестныхПоказателей[0].Значение;
				СтрокаТаблицПоказателей.СтрокаТаблицыРасчета = ТекущаяСтрокаУдержаний;
				
			ИначеЕсли ДополнительныеПоказатели.Найти(ТекущийПоказатель.Показатель) <> Неопределено Тогда
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ДополнительныеПоказатели.Добавить();				
			ИначеЕсли ТекущийПоказатель.Показатель = КалендарныеДни Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ПоказателиКалендарныеДни.Добавить();	
				ПолучатьДанныеЗаПериод = Истина;
				
			ИначеЕсли ТекущийПоказатель.Показатель = КалендарныеДниМесяца Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ПоказателиКалендарныеДниМесяца.Добавить();	
					
			ИначеЕсли ТекущийПоказатель.ПериодическийПоказательСотрудника Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ПериодическиеПоказателиФизическихЛиц.Добавить();	
				СтрокаТаблицПоказателей.УчитватьДокументОснование = Истина;	
				
			ИначеЕсли ТекущийПоказатель.ПериодическийПоказательПодразделения Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ПериодическиеПоказателиПодразделений.Добавить();
				
			ИначеЕсли ТекущийПоказатель.ПериодическийПоказательОрганизации Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ПериодическиеПоказателиОрганизаций.Добавить();		
				
			ИначеЕсли ТекущийПоказатель.РазовыйПоказательСотрудника 
				И Не ТекущийПоказатель.Предопределенный Тогда 
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.РазовыеПоказателиФизическихЛиц.Добавить();
				ПолучатьДанныеНаНачалоМесяца = Истина;
				
			ИначеЕсли ТекущийПоказатель.РазовыйПоказательПодразделения Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.РазовыеПоказателиПодразделений.Добавить();
				ПолучатьДанныеНаНачалоМесяца = Истина;
				
			ИначеЕсли ТекущийПоказатель.РазовыйПоказательОрганизации Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.РазовыеПоказателиОрганизаций.Добавить();
				ПолучатьДанныеНаНачалоМесяца = Истина;
				
			ИначеЕсли ТекущийПоказатель.ОперативныйПоказательСотрудника Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ОперативныеПоказателиФизическихЛиц.Добавить();
				ПолучатьДанныеЗаПериод = Истина;	
				
			ИначеЕсли ТекущийПоказатель.ОперативныйПоказательОрганизации Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ОперативныеПоказателиОрганизаций.Добавить();
				ПолучатьДанныеЗаПериод = Истина;
				
			ИначеЕсли ТекущийПоказатель.ОперативныйПоказательПодразделения Тогда		
				
				СтрокаТаблицПоказателей = ПоказателиФизическихЛиц.ОперативныеПоказателиПодразделений.Добавить();
				ПолучатьДанныеЗаПериод = Истина;	
				
			Иначе
				Продолжить;
			КонецЕсли; 	
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицПоказателей, ТекущаяСтрокаУдержаний);
			СтрокаТаблицПоказателей.Показатель = ТекущийПоказатель.Показатель;
			
			Если ПолучатьДанныеНаНачалоМесяца Тогда
				СтрокаТаблицПоказателей.Период = НачалоМесяца(ТекущаяСтрокаУдержаний.ДатаНачала);	
			ИначеЕсли ТребованияУдержаний[ТекущаяСтрокаУдержаний.Удержание].УдерживаетсяВЦеломЗаМесяц Тогда
				СтрокаТаблицПоказателей.Период = ТекущаяСтрокаУдержаний.ДатаОкончания;
			Иначе
				СтрокаТаблицПоказателей.Период = ТекущаяСтрокаУдержаний.ДатаНачала;
			КонецЕсли;
			Если ПолучатьДанныеЗаПериод Тогда
				СтрокаТаблицПоказателей.ДатаНачала = ТекущаяСтрокаУдержаний.ДатаНачала;
				СтрокаТаблицПоказателей.ДатаОкончания = ТекущаяСтрокаУдержаний.ДатаОкончания;
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;	
	
	КэшПоказателиФизическихЛицУдержаний = ПоказателиФизическихЛиц;
		
	Возврат ПоказателиФизическихЛиц;
КонецФункции	

Функция ИзвестныеПоказателиУдержаний(ТаблицаУдержаний)
	ИзвестныеПоказатели = ТаблицаПоказателей();
	ИзвестныеПоказатели.Колонки.Добавить("СтрокаТаблицыРасчета");
	
	Для Каждого СтрокаУдержаний Из ТаблицаУдержаний Цикл
		Для Каждого СтрокаПоказателя Из СтрокаУдержаний.ИзвестныеПоказатели Цикл
			НоваяСтрока = ИзвестныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателя);
			НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
			НоваяСтрока.СтрокаТаблицыРасчета = СтрокаУдержаний
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИзвестныеПоказатели;
КонецФункции

Процедура ЗаполнитьЗначенияДополнительныхПоказателейУдержаний(ПоказателиФизическихЛиц, СтрокиПоИдентификатору)
	
	ЗаполнитьЗначенияПереопределяемыхПоказателейУдержаний(ПоказателиФизическихЛиц, СтрокиПоИдентификатору);

КонецПроцедуры

Процедура ЗаполнитьЗначенияПереопределяемыхПоказателейУдержаний(ПоказателиФизическихЛиц, СтрокиПоИдентификатору)	
	ЗаполняемыеПоказатели = ТаблицаПоказателей();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.РассчитатьПоказательСреднемесячноеКоличествоДнейПоТаблицеЗначений(ПоказателиФизическихЛиц.ДополнительныеПоказатели, ЗаполняемыеПоказатели);
	КонецЕсли;
		
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		Строка = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, СтрокаПоказателя.Показатель, СтрокаПоказателя.Значение);
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьЗначенияРазовыхПоказателейФизическихЛиц(ПоказателиФизическихЛиц, СтрокиПоИдентификатору)
	
	ЗаполняемыеПоказатели = ПоказателиФизическихЛиц.РазовыеПоказателиФизическихЛиц;
	Если ЗаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияРазовыхПоказателей = ЗначенияРазовыхПоказателейФизическихЛиц();
	
	ПоляПоиска = "ПериодДействия, ФизическоеЛицо, Показатель";
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ЗначенияРазовыхПоказателей, ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
		СтруктураПоиска.ПериодДействия = СтрокаПоказателя.Период;
		НайденныеЗначения = ЗначенияРазовыхПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеЗначения.Количество() > 0 Тогда
			СтрокаНачисления = СтрокиПоИдентификатору[СтрокаПоказателя.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, СтрокаПоказателя.Показатель, НайденныеЗначения[0].Значение);		
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

Процедура ЗаполнитьФиксированныеСуммыУдержаний()
	ТребованияУдержанийСводно = ТребованияУдержанийСводно();
	Если Не ТребованияУдержанийСводно.ТребуютсяФиксированныеСуммы Тогда
		Возврат;
	КонецЕсли;	
	
	ТребованияУдержаний = ТребованияУдержанийТаблица();
	
	ПлановыеУдержания = ПлановыеУдержания();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПлановыеУдержания, "ФизическоеЛицо, Удержание, ДокументОснование");
	Отбор = Новый Структура("ФизическоеЛицо, Удержание, ДокументОснование");
	
	Для Каждого СтрокаУдеражний Из Удержания Цикл
		Если Не ТребованияУдержаний[СтрокаУдеражний.Удержание].ТребуютсяФиксированныеСуммы 
			Или СтрокаУдеражний.ФиксРасчет 
			Или СтрокаУдеражний.ФиксЗаполнение
			Или СтрокаУдеражний.ФиксСторно Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаУдеражний);
		
		СтрокиПлановыхУдержаний = ПлановыеУдержания.НайтиСтроки(Отбор);
		ТекущаяСтрокаПлановыхУдержаний = СтрокаВключающаяДату(СтрокиПлановыхУдержаний, СтрокаУдеражний.ДатаНачала);
		
		Если ТекущаяСтрокаПлановыхУдержаний <> Неопределено Тогда
			СтрокаУдеражний.Результат = ТекущаяСтрокаПлановыхУдержаний.Размер;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

#Область РасчетПоказателейУдержаний

Процедура РассчитатьЗначенияПоказателяРасчетнаяБазаСтраховыеВзносы(ТаблицаУдержаний, ОчередностьРасчета, СтрокиПоИдентификатору)
	ТребованияУдержанийСводно = ТребованияУдержанийСводно();
	
	Если Не ТребованияУдержанийСводно.ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы Тогда
		Возврат;
	КонецЕсли;	
	
	ОтборИдентификаторовСтрок = Новый Массив;
	ТребованияУдержаний = ТребованияУдержанийТаблица();
	
	Для Каждого СтрокаТаблицы Из ТаблицаУдержаний Цикл
		СвойстваТекущегоУдержания = ТребованияУдержаний[СтрокаТаблицы.ВидРасчета];
		Если Не СтрокаТаблицы.ФиксЗаполнение 
			И СвойстваТекущегоУдержания.ОчередностьРасчета = ОчередностьРасчета
			И СвойстваТекущегоУдержания.ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы Тогда
			
			ОтборИдентификаторовСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборИдентификаторовСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	РасчетнаяБазаСтраховыеВзносы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы");
	
	УдалитьВТ = Новый Массив;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.УстановитьПараметр("ОтборИдентификаторовСтрок", ОтборИдентификаторовСтрок);
	Запрос.УстановитьПараметр("РасчетнаяБазаСтраховыеВзносы", РасчетнаяБазаСтраховыеВзносы);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Организация КАК ГоловнаяОрганизация,
		|	Удержания.Сотрудник,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.БазовыйПериодНачало КАК ДатаНачала,
		|	Удержания.БазовыйПериодКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ГДЕ Удержания.ИдентификаторСтроки В (&ОтборИдентификаторовСтрок)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДанныеДляРасчета");
	
	Если Не ВТСодержитСтроки("ВТДанныеДляРасчета") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	ДанныеДляРасчета.ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизлицаОрганизаций
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФизлицаОрганизаций");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ДанныеДляРасчета.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ДанныеДляРасчета.ДатаОкончания) КАК ДатаОкончания
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
		НачалоМесяца(Выборка.ДатаНачала), КонецМесяца(Выборка.ДатаОкончания), Организация, МенеджерВременныхТаблиц, , , , , , Истина);
	УдалитьВТ.Добавить("ВТСведенияОДоходах");

	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	&РасчетнаяБазаСтраховыеВзносы КАК Показатель,
		|	СУММА(СведенияОДоходах.БазаПФР) КАК Значение
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОДоходах КАК СведенияОДоходах
		|		ПО (СведенияОДоходах.ФизическоеЛицо = ДанныеДляРасчета.ФизическоеЛицо)
		|			И (СведенияОДоходах.ГоловнаяОрганизация = ДанныеДляРасчета.ГоловнаяОрганизация)
		|			И (СведенияОДоходах.Период = ДанныеДляРасчета.Месяц)
		|			И (СведенияОДоходах.Регистратор <> &ИсключаемыйРегистратор)
		|			И (СведенияОДоходах.Регистратор В (&ВременныйРегистратор))
		|			И (ВЫБОР
		|				КОГДА ДанныеДляРасчета.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|					ТОГДА СведенияОДоходах.Сотрудник = ДанныеДляРасчета.Сотрудник
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляРасчета.ИдентификаторСтроки";
	
	Если Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (СведенияОДоходах.Регистратор В (&ВременныйРегистратор))", "");
	КонецЕсли;
	
	ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#Область РасчетнаяБазаУдержаний	

Функция ТребуетсяРасчетБазыУдержаний(ТребованияТекущегоУдержаний)
	Если ТребованияТекущегоУдержаний.ТребуетсяПоказательРасчетнаяБаза Тогда
		
		Возврат Истина;
	ИначеЕсли ТребованияТекущегоУдержаний.ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста Тогда	
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции	

Функция УдержаниеДействуетПолныйМесяц(ТекущаяСтрокаУдержаний, ТаблицаНабораУдержаний, ОтборУдержанийПоКлючу)
	Если НачалоДня(ТекущаяСтрокаУдержаний.БазовыйПериодНачало) = НачалоМесяца(ТекущаяСтрокаУдержаний.БазовыйПериодНачало) 
		И КонецДня(ТекущаяСтрокаУдержаний.БазовыйПериодКонец) = КонецМесяца(ТекущаяСтрокаУдержаний.БазовыйПериодКонец) Тогда 
		
		Возврат Истина;
	КонецЕсли;
	
	ЕстьНачалоМесяца = Ложь;
	ЕстьКонецМесяца = Ложь;
	
	ЗаполнитьЗначенияСвойств(ОтборУдержанийПоКлючу, ТекущаяСтрокаУдержаний);
	
	СтрокиУдержанийПоКлючу = ТаблицаНабораУдержаний.НайтиСтроки(ОтборУдержанийПоКлючу);	
	
	Для Каждого СтрокаУдержаний Из СтрокиУдержанийПоКлючу Цикл
		Если НачалоМесяца(ТекущаяСтрокаУдержаний.БазовыйПериодНачало) <> НачалоМесяца(ТекущаяСтрокаУдержаний.БазовыйПериодНачало) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НачалоДня(ТекущаяСтрокаУдержаний.БазовыйПериодНачало) = НачалоМесяца(ТекущаяСтрокаУдержаний.БазовыйПериодНачало) Тогда
			ЕстьНачалоМесяца = Истина;
		КонецЕсли;
		
		Если КонецДня(ТекущаяСтрокаУдержаний.БазовыйПериодКонец) = КонецМесяца(ТекущаяСтрокаУдержаний.БазовыйПериодКонец) Тогда
			ЕстьКонецМесяца = Истина;
		КонецЕсли;
		
		Если ЕстьНачалоМесяца И ЕстьКонецМесяца Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

Процедура РассчитатьЗначениеПоказателяРасчетнаяБазаУдержаний(ТаблицаНабора, ОчередностьРасчета, СтрокиПоИдентификатору)	
	ТребованияУдержанийСводно = ТребованияУдержанийСводно();
	
	Если Не ТребованияУдержанийСводно.ТребуетсяПоказательРасчетнаяБаза
		И Не ТребованияУдержанийСводно.ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста Тогда
		
		Возврат;
	КонецЕсли;		
		
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
	    "ВЫБРАТЬ ПЕРВЫЕ 1
	    |	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки
	    |ИЗ
	    |	ВТРегистрРасчета_Удержания КАК Удержания
	    |ГДЕ
	    |	Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
	    |	И Удержания.ФиксЗаполнение = ЛОЖЬ
	    |	И (Удержания.ВидРасчета.ТребуетсяРасчетБазы
	    |			ИЛИ Удержания.ВидРасчета.ТребуетсяРасчетБазыИсполнительногоЛиста)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;		
		
	РасчетнаяБазаУдержаний = РасчетБазыУдержаний.РасчетнаяБазаУдержаний(ОчередностьРасчета, ДанныеТекущегоНабораНачисления().ТаблицаНабора);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(РасчетнаяБазаУдержаний, "Регистратор, НомерСтроки");
	ОтборБазовыхЗаписей = Новый Структура("Регистратор, НомерСтроки");
	
	ОтборБазовыхВР = ОбщегоНазначения.ВыгрузитьКолонку(РасчетнаяБазаУдержаний, "ВидРасчетаРазрез", Истина);
	КатегорииБазовыхНачислений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОтборБазовыхВР, "КатегорияНачисленияИлиНеоплаченногоВремени");
	
	ТаблицаНабора.Сортировать("БазовыйПериодНачало, ДокументОснование, ИдентификаторСтроки", Новый СравнениеЗначений);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаНабора, "ДокументОснование, ПериодРегистрации, ВидРасчета");
	ОтборСуществующихЗаписей = Новый Структура("ДокументОснование, ПериодРегистрации, ВидРасчета");
	
	ПоказательРасчетнаяБаза = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	ПоказательРасчетнаяБазаИсполнительногоЛиста = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста");
	
	ОписаниеВТ = ОписаниеВТУдержания();
	
	ОписаниеВТ.ИмяВТ = "ВТРегистрРасчета_Удержания";
	ОписаниеВТ.ИмяПоляНачалоПериода = "БазовыйПериодНачало";
	ОписаниеВТ.ИмяПоляОкончаниеПериода = "БазовыйПериодКонец";
	НалогПоДоходам = ИсполнительныеЛисты.ИсчисленныйПоДоходамНалог(МенеджерВременныхТаблиц, ОписаниеВТ, МесяцНачисления, ЗарплатаМесяца.ПогашениеЗаймов, ИсключаемыйРегистратор, НастройкиУдержаний, ОчередностьРасчета, ЭтоИсправлениеТекущимПериодом);
	ДополнениеРасчетнойБазы = ДополнениеРасчетнойБазыУдержаний(ОписаниеВТ, НалогПоДоходам);

	ТребованияУдержаний = ТребованияУдержанийТаблица();	
	ПредыдущаяСтрока = Неопределено;
	Для Индекс = 0 По ТаблицаНабора.Количество() - 1 Цикл
		СтрокаНабора = ТаблицаНабора[Индекс];
		
		Если СтрокаНабора.ФиксЗаполнение Тогда
			
			Продолжить;
		КонецЕсли;
		ТребованияТекущегоУдержаний = ТребованияУдержаний[СтрокаНабора.ВидРасчета];	
		ТребуетсяБаза = Ложь;
		
		Строка = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		
		Если ТребованияТекущегоУдержаний.ОчередностьРасчета <> ОчередностьРасчета
			Или Не ТребуетсяРасчетБазыУдержаний(ТребованияТекущегоУдержаний) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущаяСтрока = Неопределено  
			Или НачалоМесяца(СтрокаНабора.БазовыйПериодНачало) <> НачалоМесяца(ПредыдущаяСтрока.БазовыйПериодНачало)
			Или СтрокаНабора.ДокументОснование <> ПредыдущаяСтрока.ДокументОснование Тогда
					
			КоэффициентыРаспределения = Новый Массив;
			РазностьДат = Новый Массив;
			СтрокиКРаспределению = Новый Массив;
			СуммаНачисленийНеРаспределяемая = 0;
			СуммаНДФЛНеРаспределяемая = 0;
			СуммаНачисленийРаспределяемая = 0;
			СуммаНДФЛРаспределяемая = 0;
			Отбор = Новый Структура("ДокументОснование,Месяц", СтрокаНабора.ДокументОснование, НачалоМесяца(СтрокаНабора.БазовыйПериодНачало));
			СтрокиДополнения = ДополнениеРасчетнойБазы.НайтиСтроки(Отбор);
			ЕстьДополнениеРасчетнойБазы = СтрокиДополнения.Количество() > 0;
			ФизическоеЛицо = СтрокаНабора.ФизическоеЛицо;
			СтрокиНачислений = Новый Соответствие;
			Для Каждого СтрокаДополнения Из СтрокиДополнения Цикл 
				Если СтрокаДополнения.Распределять Тогда 
					СуммаНачисленийРаспределяемая = СтрокаДополнения.СуммаНачислений;
					СуммаНДФЛРаспределяемая = СтрокаДополнения.СуммаНДФЛ;
				Иначе 
					СуммаНачисленийНеРаспределяемая = СтрокаДополнения.СуммаНачислений;
					СуммаНДФЛНеРаспределяемая = СтрокаДополнения.СуммаНДФЛ;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(ОтборБазовыхЗаписей, СтрокаНабора);
		СтрокиБазы = РасчетнаяБазаУдержаний.НайтиСтроки(ОтборБазовыхЗаписей);
		
		ЗначениеРасчетнойБазы = 0;
		
		НеполныйМесяц = Не УдержаниеДействуетПолныйМесяц(СтрокаНабора, ТаблицаНабора, ОтборСуществующихЗаписей);
		
		Строка.Дополнительно.Вставить("НеполныйМесяц", НеполныйМесяц);
		Строка.Дополнительно.Вставить("РасшифровкаРасчетнойБазы", ТаблицаРасшифровкиРасчетнойБазы());
		Строка.Дополнительно.Вставить("СуммаДополнения", СуммаНачисленийНеРаспределяемая);
		Строка.Дополнительно.Вставить("СуммаЦеломесячная", 0);
		Строка.Дополнительно.Вставить("СуммаНДФЛ", СуммаНДФЛНеРаспределяемая);
		
		ДнейВБазовомПериоде = КалендарныеДниПериода(СтрокаНабора, "БазовыйПериодНачало", "БазовыйПериодКонец");
		
		Для Каждого СтрокаБазы Из СтрокиБазы Цикл
			ЗначениеРасчетнойБазы = ЗначениеРасчетнойБазы + СтрокаБазы.РезультатБаза;	
			
			НоваяСтрока = Строка.Дополнительно.РасшифровкаРасчетнойБазы.Добавить();
			НоваяСтрока.БазовоеНачисление = СтрокаБазы.ВидРасчетаРазрез;
			НоваяСтрока.КатегорияБазовогоНачисления = КатегорииБазовыхНачислений[СтрокаБазы.ВидРасчетаРазрез];
			НоваяСтрока.Сумма = СтрокаБазы.РезультатБаза;
			НоваяСтрока.СуммаЦеломесячная = ?(НеполныйМесяц, СтрокаБазы.РезультатБазаВЦеломзаМесяц, 0);
			НоваяСтрока.НеполныйМесяц = НеполныйМесяц;
			СтрокиНачисления = СтрокиНачислений[НоваяСтрока.БазовоеНачисление];
			Если СтрокиНачисления = Неопределено Тогда 
				СтрокиНачисления = Новый Массив;
				СтрокиНачислений.Вставить(НоваяСтрока.БазовоеНачисление, СтрокиНачисления);
			КонецЕсли;
			СтрокиНачисления.Добавить(НоваяСтрока);
			Если НеполныйМесяц Тогда
				КоэффициентыРаспределения.Добавить(СтрокаБазы.РезультатБазаВЦеломзаМесяц);
				Если ЕстьДополнениеРасчетнойБазы Тогда
					СтрокиКРаспределению.Добавить(НоваяСтрока);
					РазностьДат.Добавить(ДнейВБазовомПериоде);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		Если Не НеполныйМесяц
			Или СтрокиБазы.Количество() = 0 Тогда
			КоэффициентыРаспределения.Добавить(Окр(ЗначениеРасчетнойБазы, 2));
			Если ЕстьДополнениеРасчетнойБазы Тогда
				СтрокиКРаспределению.Добавить(Строка.Дополнительно);
				РазностьДат.Добавить(ДнейВБазовомПериоде);
			КонецЕсли;
		КонецЕсли;	
		
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, ПоказательРасчетнаяБаза, Окр(ЗначениеРасчетнойБазы, 2), Истина);
		
		Если Индекс = ТаблицаНабора.Количество() - 1
			Или НачалоМесяца(СтрокаНабора.БазовыйПериодНачало) <> НачалоМесяца(ТаблицаНабора[Индекс + 1].БазовыйПериодНачало)
			Или СтрокаНабора.ДокументОснование <> ТаблицаНабора[Индекс + 1].ДокументОснование 
			Или Не ТребуетсяРасчетБазыУдержаний(ТребованияУдержаний[ТаблицаНабора[Индекс + 1].ВидРасчета]) 
			Или ТребованияУдержаний[ТаблицаНабора[Индекс + 1].ВидРасчета].ОчередностьРасчета <> ОчередностьРасчета Тогда
			
			РаспределитьНалогВБазеУдержаний(СтрокиНачислений, СтрокаНабора.ФизическоеЛицо, НачалоМесяца(СтрокаНабора.БазовыйПериодНачало), НалогПоДоходам);	
			РаспределитьБазуУдержаний(
				СтрокиКРаспределению, 
				КоэффициентыРаспределения, 
				СуммаНачисленийРаспределяемая, 
				СуммаНДФЛРаспределяемая, 
				РазностьДат, 
				ЕстьДополнениеРасчетнойБазы); 	
		КонецЕсли;	
		
		
		ПредыдущаяСтрока = СтрокаНабора;		
	КонецЦикла;		
КонецПроцедуры

Процедура РаспределитьНалогВБазеУдержаний(СтрокиНачислений, ФизическоеЛицо, Месяц, НалогПоДоходам)
	Для Каждого КлючИЗначение Из СтрокиНачислений Цикл 
		Начисление = КлючИЗначение.Ключ;
		СтрокиНачисления = КлючИЗначение.Значение;
		Отбор = Новый Структура("Месяц,ФизическоеЛицо,Начисление", Месяц, ФизическоеЛицо, Начисление);
		СтрокиНалога = НалогПоДоходам.НайтиСтроки(Отбор);
		Если СтрокиНалога.Количество() > 0 Тогда
			Если СтрокиНачисления.Количество() = 1 Тогда
				СтрокаНачисления = СтрокиНачисления[0];
				Коэффициент = ?(СтрокаНачисления.НеполныйМесяц, ?(СтрокаНачисления.СуммаЦеломесячная = 0, 0, СтрокаНачисления.Сумма / СтрокаНачисления.СуммаЦеломесячная), 1);
				СтрокаНачисления.СуммаНДФЛ = СтрокиНалога[0].Налог * Коэффициент;
			ИначеЕсли СтрокиНачисления.Количество() > 1 Тогда 
				КоэффициентыНачисления = Новый Массив;
				Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
					КоэффициентыНачисления.Добавить(?(СтрокаНачисления.СуммаЦеломесячная = 0, СтрокаНачисления.Сумма, СтрокаНачисления.СуммаЦеломесячная));
				КонецЦикла;
				РаспределениеСуммыНалога = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокиНалога[0].Налог, КоэффициентыНачисления);
				Если РаспределениеСуммыНалога <> Неопределено Тогда 
					Индекс = 0;
					Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
						Коэффициент = ?(СтрокаНачисления.НеполныйМесяц, ?(СтрокаНачисления.СуммаЦеломесячная = 0, 0, СтрокаНачисления.Сумма / СтрокаНачисления.СуммаЦеломесячная), 1);
						СтрокаНачисления.СуммаНДФЛ = РаспределениеСуммыНалога[Индекс] * Коэффициент;
						Индекс = Индекс + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьБазуУдержаний(СтрокиКРаспределению, КоэффициентыРаспределения, СуммаНачисленийРаспределяемая, СуммаНДФЛРаспределяемая, РазностьДат, ЕстьДополнениеРасчетнойБазы)
	
	Если Не ЕстьДополнениеРасчетнойБазы Тогда
		Возврат;
	КонецЕсли;
	Если СтрокиКРаспределению.Количество() = 1 Тогда
		ЗаполнитьСтрокуДополненияРасчетнойБазы(СтрокиКРаспределению[0], СуммаНачисленийРаспределяемая, СуммаНДФЛРаспределяемая);
		Возврат;
	КонецЕсли;
	РаспределениеСуммыДополнения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаНачисленийРаспределяемая, КоэффициентыРаспределения);
	Если РаспределениеСуммыДополнения = Неопределено Тогда
		РаспределениеСуммыДополнения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаНачисленийРаспределяемая, РазностьДат);
	КонецЕсли;
	РаспределениеСуммыНДФЛ = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаНДФЛРаспределяемая, КоэффициентыРаспределения);
	Если РаспределениеСуммыНДФЛ = Неопределено Тогда
		РаспределениеСуммыНДФЛ = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаНДФЛРаспределяемая, РазностьДат);
	КонецЕсли;
	Индекс = 0;
	Для Каждого Строка Из СтрокиКРаспределению Цикл
		СуммаДополнения = 0;
		Если РаспределениеСуммыДополнения <> Неопределено Тогда
			СуммаДополнения = РаспределениеСуммыДополнения[Индекс];
		КонецЕсли;
		СуммаНДФЛ = 0;
		Если РаспределениеСуммыНДФЛ <> Неопределено Тогда
			СуммаНДФЛ = РаспределениеСуммыНДФЛ[Индекс];
		КонецЕсли;
		ЗаполнитьСтрокуДополненияРасчетнойБазы(Строка, СуммаДополнения, СуммаНДФЛ);
		Индекс = Индекс + 1;
	КонецЦикла;
КонецПроцедуры	

Процедура ЗаполнитьСтрокуДополненияРасчетнойБазы(Строка, РаспределениеСуммыДополнения, РаспределениеСуммыНДФЛ)
	
	КоэффициентНеполногоМесяца = 1;
	Если Строка.НеполныйМесяц = Истина И ЗначениеЗаполнено(Строка.СуммаЦеломесячная) Тогда
		КоэффициентНеполногоМесяца = Строка.Сумма / Строка.СуммаЦеломесячная;
	КонецЕсли;
	Если РаспределениеСуммыДополнения <> Неопределено Тогда
		Строка.СуммаДополнения = Строка.СуммаДополнения + РаспределениеСуммыДополнения * КоэффициентНеполногоМесяца;
	КонецЕсли;
	Если РаспределениеСуммыНДФЛ <> Неопределено Тогда
		Строка.СуммаНДФЛ = Строка.СуммаНДФЛ + РаспределениеСуммыНДФЛ * КоэффициентНеполногоМесяца;
	КонецЕсли;
	
КонецПроцедуры

// Ожидается ВТ с полями
//	- ДокументОснование
//	- ФизическоеЛицо
//	- Организация (Головная организация)
//	- Месяц.
//
Функция ДополнениеРасчетнойБазыУдержаний(ОписаниеВТ, НалогПоДоходам)
	
	// Дополнение расчетной базы включает в себя
	//	- начисления по договорам,
	//	- материальную помощь
	// вычесть - НДФЛ.
	
	УдалитьВТ = Новый Массив;
	
	// Выбираем удержания, которые поддерживают дополнение.
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("КатегорииДополненияРасчетнойБазы", КатегорииДополненияРасчетнойБазыУдержаний());
	Запрос.УстановитьПараметр("ВидыНачисленийДополнения", Обработки.МенеджерРасчетаЗарплаты.ВидыНачисленийДополненияРасчетнойБазыУдержаний());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ВидРасчета КАК Удержание
		|ПОМЕСТИТЬ ВТВидыУдержанийДополненияРасчетнойБазы
		|ИЗ
		|	ВТУдержания КАК Удержания
		|ГДЕ
		|	Удержания.ВидРасчета.КатегорияУдержания В(&КатегорииДополненияРасчетнойБазы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыУдержаний.Удержание КАК Удержание,
		|	УдержанияПрочиеБазовыеДоходы.ВидДохода КАК ВидДохода
		|ПОМЕСТИТЬ ВТПрочиеБазовыеДоходыУдержаний
		|ИЗ
		|	ВТВидыУдержанийДополненияРасчетнойБазы КАК ВидыУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.ПрочиеБазовыеДоходы КАК УдержанияПрочиеБазовыеДоходы
		|		ПО ВидыУдержаний.Удержание = УдержанияПрочиеБазовыеДоходы.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыУдержаний.Удержание,
		|	ВидыОсобыхНачисленийИУдержаний.Ссылка
		|ИЗ
		|	ВТВидыУдержанийДополненияРасчетнойБазы КАК ВидыУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыОсобыхНачисленийИУдержаний КАК ВидыОсобыхНачисленийИУдержаний
		|		ПО (ВидыОсобыхНачисленийИУдержаний.Ссылка В (&ВидыНачисленийДополнения))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ДокументОснование КАК ДокументОснование,
		|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Удержания.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(Удержания.НачалоПериода, МЕСЯЦ) КАК Месяц,
		|	ПрочиеБазовыеДоходыУдержаний.ВидДохода КАК ВидДохода
		|ПОМЕСТИТЬ ВТФильтрДополненияРасчетнойБазы
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрочиеБазовыеДоходыУдержаний КАК ПрочиеБазовыеДоходыУдержаний
		|		ПО Удержания.ВидРасчета = ПрочиеБазовыеДоходыУдержаний.Удержание";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.НачалоПериода", "Удержания." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ОкончаниеПериода", "Удержания." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТВидыУдержанийДополненияРасчетнойБазы");
	УдалитьВТ.Добавить("ВТПрочиеБазовыеДоходыУдержаний");
	УдалитьВТ.Добавить("ВТФильтрДополненияРасчетнойБазы");
	
	ДополнениеРасчетнойБазы = Новый ТаблицаЗначений;
	ДополнениеРасчетнойБазы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ДополнениеРасчетнойБазы.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	ДополнениеРасчетнойБазы.Колонки.Добавить("СуммаНачислений", Новый ОписаниеТипов("Число"));
	ДополнениеРасчетнойБазы.Колонки.Добавить("СуммаНДФЛ", Новый ОписаниеТипов("Число"));
	ДополнениеРасчетнойБазы.Колонки.Добавить("Распределять", Новый ОписаниеТипов("Булево"));
	
	Если Не ВТСодержитСтроки("ВТФильтрДополненияРасчетнойБазы") Тогда
		УничтожитьВТ(УдалитьВТ);
		Возврат ДополнениеРасчетнойБазы;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Удержания.НачалоПериода) КАК НачалоПериода,
		|	МАКСИМУМ(Удержания.ОкончаниеПериода) КАК ОкончаниеПериода
		|ИЗ
		|	ВТУдержания КАК Удержания";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.НачалоПериода", "Удержания." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ОкончаниеПериода", "Удержания." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоСотрудникам");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам");
	
	НезарплатныеВидыДоходов = ЗарплатаКадрыРасширенныйПовтИсп.НезарплатныеВидыДоходовДополненияРасчетнойБазыУдержаний();
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Выборка.НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Выборка.ОкончаниеПериода));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.УстановитьПараметр("НезарплатныеВидыДоходов", НезарплатныеВидыДоходов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.Месяц КАК Месяц,
		|	ДанныеДляРасчета.ДокументОснование КАК ДокументОснование,
		|	ДанныеДляРасчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДляРасчета.Начисление КАК Начисление,
		|	ДанныеДляРасчета.Распределять КАК Распределять,
		|	СУММА(ДанныеДляРасчета.СуммаНачислений) КАК СуммаНачислений
		|ИЗ
		|	(ВЫБРАТЬ
		|		Фильтр.Месяц КАК Месяц,
		|		Фильтр.ДокументОснование КАК ДокументОснование,
		|		Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|		Начисления.Начисление КАК Начисление,
		|		Начисления.Сумма КАК СуммаНачислений,
		|		ВЫБОР
		|			КОГДА Начисления.Начисление В (&НезарплатныеВидыДоходов)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК Распределять
		|	ИЗ
		|		РегистрНакопления.ДополнениеРасчетнойБазыУдержаний КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрДополненияРасчетнойБазы КАК Фильтр
		|			ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (Фильтр.Месяц = НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ))
		|				И (Фильтр.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (Фильтр.Организация = Начисления.ГоловнаяОрганизация)
		|				И (Фильтр.ВидДохода = Начисления.Начисление)
		|				И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|				И (Начисления.Регистратор = &ВременныйРегистратор)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Фильтр.Месяц,
		|		Фильтр.ДокументОснование,
		|		Начисления.ФизическоеЛицо,
		|		Начисления.НачислениеУдержание,
		|		Начисления.Сумма,
		|		ИСТИНА
		|	ИЗ
		|		ВТРегистрНакопления_НачисленияУдержанияПоСотрудникам КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрДополненияРасчетнойБазы КАК Фильтр
		|			ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (Фильтр.Месяц = НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ))
		|				И (Фильтр.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (Фильтр.Организация = Начисления.Организация.ГоловнаяОрганизация)
		|				И (Фильтр.ВидДохода = Начисления.НачислениеУдержание)
		|				И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|				И (Начисления.Регистратор = &ВременныйРегистратор)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Фильтр.Месяц,
		|		Фильтр.ДокументОснование,
		|		Начисления.ФизическоеЛицо,
		|		Начисления.НачислениеУдержание,
		|		Начисления.Сумма,
		|		ЛОЖЬ
		|	ИЗ
		|		ВТРегистрНакопления_НачисленияУдержанияПоКонтрагентамАкционерам КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрДополненияРасчетнойБазы КАК Фильтр
		|			ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (Фильтр.Месяц = НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ))
		|				И (Фильтр.ФизическоеЛицо = Начисления.ФизическоеЛицо)
		|				И (Фильтр.Организация = Начисления.Организация.ГоловнаяОрганизация)
		|				И (Фильтр.ВидДохода = Начисления.НачислениеУдержание)
		|				И (Начисления.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
		|				И (Начисления.Регистратор <> &ИсключаемыйРегистратор)) КАК ДанныеДляРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляРасчета.Месяц,
		|	ДанныеДляРасчета.ДокументОснование,
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	ДанныеДляРасчета.Начисление,
		|	ДанныеДляРасчета.Распределять";
		
	Если Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (Начисления.Регистратор = &ВременныйРегистратор)", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = ДополнениеРасчетнойБазы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Отбор = Новый Структура("Месяц,ФизическоеЛицо,Начисление", Выборка.Месяц, Выборка.ФизическоеЛицо, Выборка.Начисление);
		СтрокиНалога = НалогПоДоходам.НайтиСтроки(Отбор);
		Если СтрокиНалога.Количество() > 0 Тогда 
			НоваяСтрока.СуммаНДФЛ = СтрокиНалога[0].Налог;
		КонецЕсли;
	КонецЦикла;
	
	ДополнениеРасчетнойБазы.Свернуть("Месяц,ДокументОснование,Распределять", "СуммаНачислений,СуммаНДФЛ"); 
	ДополнениеРасчетнойБазы.Индексы.Добавить("ДокументОснование,Месяц");
	
	УничтожитьВТ(УдалитьВТ);
	
	Возврат ДополнениеРасчетнойБазы;
	
КонецФункции

Функция КатегорииДополненияРасчетнойБазыУдержаний()
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	
	Возврат Категории;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьЗначенияПоказателейПоРезультатуЗапроса(Запрос, СтрокиПоИдентификатору, Замещать = Ложь)
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ЗаполнитьЗначенияПоказателейПоВыборкеЗапроса(Выборка, СтрокиПоИдентификатору, Замещать);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейПоВыборкеЗапроса(Выборка, СтрокиПоИдентификатору, Замещать = Ложь)
	
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнятьВремя = ЗаполнятьОплаченноеОтработанноеВремя(Строка);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Выборка.Показатель, Выборка.Значение, Замещать);
			Если ЗаполнятьВремя Тогда
				ЗаполнитьОплаченноеВремяПоЗначениюПоказателя(Строка, Выборка.Показатель, Выборка.Значение);	
			КонецЕсли;
			Если Выборка.Значение = NULL Тогда
				Если Не Строка.Сторно 
					И Не Строка.ФиксСтрока Тогда
					ВычеркиваемыеСтроки.Добавить(Выборка.ИдентификаторСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Значение, Замещать = Истина)
	
	Если Строка.Показатели.Количество() = 0 Тогда
		Строка.Показатели = ТаблицаПоказателей();
	КонецЕсли;
	
	Если ВыявленныеПоказатели = Неопределено Тогда
		ВыявленныеПоказатели = ТаблицаПоказателей();
	КонецЕсли;
	
	Если Замещать Тогда
		// Сначала удаляем строки с этим показателем.
		Отбор = Новый Структура("Показатель");
		Отбор.Показатель = Показатель;
		
		НайденныеСтроки = Строка.Показатели.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Строка.Показатели.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	НоваяСтрока = Строка.Показатели.Добавить();
	НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
	НоваяСтрока.Показатель = Показатель;
	НоваяСтрока.Значение = Значение;
	
	НоваяСтрока = ВыявленныеПоказатели.Добавить();
	НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтроки;
	НоваяСтрока.Показатель = Показатель;
	НоваяСтрока.Значение = Значение;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеПоказателяКалендарныеДниСтрокиРасчета(СтрокаРасчета, Показатель, Значение)
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаРасчета, Показатель, Значение, Истина);
	
	Если ТипЗнч(СтрокаРасчета.Категория) <> Тип("ПеречислениеСсылка.КатегорииУдержаний") Тогда
		СтрокаРасчета.ОплаченоДней = Значение;
		СтрокаРасчета.ОплаченоЧасов = Неопределено;
	КонецЕсли;	
КонецПроцедуры	

#Область КолонкиОтработаноОплаченоНормаДнейЧасов

Функция ЗаполнятьОплаченноеОтработанноеВремя(Строка)
	
	Если ТипЗнч(Строка.Категория) = Тип("ПеречислениеСсылка.КатегорииУдержаний") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьОплаченноеВремяПоЗначениюПоказателя(Строка, Показатель, Значение)
	
	Если Строка.ФиксСторно Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	ЗаполнитьОплаченноеВремяКоличествомДней(Строка, Показатель, Значение, СтандартнаяОбработка);
	ЗаполнитьОплаченноеВремяКоличествомЧасов(Строка, Показатель, Значение, СтандартнаяОбработка);
	ЗаполнитьОплаченноеВремяДнейЧасовВыходногоПособия(Строка, Показатель, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченноеВремяКоличествомДней(Строка, Показатель, Значение, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска"));
	
	Если ПоказателиДней.Найти(Показатель) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ОплаченоДней = Значение;
	Строка.ОплаченоЧасов = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченноеВремяДнейЧасовВыходногоПособия(Строка, Показатель, Значение, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия") Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.ВремяВЧасах = Ложь Тогда
		Строка.ОплаченоДней = Значение;
		Строка.ОплаченоЧасов = Неопределено;
	Иначе
		Строка.ОплаченоДней = Неопределено;
		Строка.ОплаченоЧасов = Значение;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченноеВремяКоличествомЧасов(Строка, Показатель, Значение, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету"));
	
	Если ПоказателиДней.Найти(Показатель) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.ОплаченоДней = Неопределено;
	Строка.ОплаченоЧасов = Значение;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемКоличествоДней(Строка, Показатель)
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска"));
	
	Если ПоказателиДней.Найти(Показатель) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемКоличествоЧасов(Строка, Показатель)
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету"));
	
	Если ПоказателиДней.Найти(Показатель) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемДниЧасыВыходногоПособия(Строка, Показатель)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия") Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.ВремяВЧасах = Ложь Тогда
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	Иначе
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемВремяВДнях(Строка, Показатель)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемВремяВДняхЧасах(Строка, Показатель)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах") Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.ВремяВЧасах = Ложь Тогда
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	Иначе
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемВремяВЧасах(Строка, Показатель)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемНормуДней(Строка, Показатель)
	
	ПоказателиДней = Новый Массив;
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));
	ПоказателиДней.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	
	Если ПоказателиДней.Найти(Показатель) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.НормаДней, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемНормуЧасов(Строка, Показатель)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.НормаЧасов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОплаченнымВременемНормуДнейЧасов(Строка, Показатель)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДнейЧасов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.ВремяВЧасах = Ложь Тогда
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоДней, Истина);
	Иначе
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(Строка, Показатель, Строка.ОплаченоЧасов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиНачисленийПоОплаченномуВремени(СтрокиНачисленийКРасчету)
	
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиНачислений = ПоказателиНачислений();
	
	Для Каждого Строка Из СтрокиНачисленийКРасчету Цикл
		ПоказателиТекущегоНачисления = ПоказателиНачислений[Строка.Начисление];
		Для Каждого СвойстваПоказателя Из ПоказателиТекущегоНачисления Цикл
			ЗаполнитьОплаченнымВременемКоличествоДней(Строка, СвойстваПоказателя.Показатель);
			ЗаполнитьОплаченнымВременемКоличествоЧасов(Строка, СвойстваПоказателя.Показатель);
			ЗаполнитьОплаченнымВременемДниЧасыВыходногоПособия(Строка, СвойстваПоказателя.Показатель);
			ЗаполнитьОплаченнымВременемВремяВДнях(Строка, СвойстваПоказателя.Показатель);
			ЗаполнитьОплаченнымВременемВремяВДняхЧасах(Строка, СвойстваПоказателя.Показатель);
			ЗаполнитьОплаченнымВременемВремяВЧасах(Строка, СвойстваПоказателя.Показатель);
			ЗаполнитьОплаченнымВременемНормуДней(Строка, СвойстваПоказателя.Показатель);
			ЗаполнитьОплаченнымВременемНормуЧасов(Строка, СвойстваПоказателя.Показатель);
			ЗаполнитьОплаченнымВременемНормуДнейЧасов(Строка, СвойстваПоказателя.Показатель);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СведенияДляРасчета

Процедура ЗаполнитьСведенияНачисленийДляРасчетаСлужебный(Требования = Неопределено) 
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Требования = Неопределено Тогда
		Требования = ТребованияЗаполненияСведенийНачисленийДляРасчета(Истина);
	КонецЕсли;	
	
	ДополнительныеДанныеНаДаты = Новый ТаблицаЗначений;
	ДополнительныеДанныеНаДаты.Колонки.Добавить("Сотрудник");
	ДополнительныеДанныеНаДаты.Колонки.Добавить("Дата");
	ДополнительныеДанныеНаДаты.Колонки.Добавить("СуммированныйУчетРабочегоВремени", Новый ОписаниеТипов("Булево"));
	ДополнительныеДанныеНаДаты.Колонки.Добавить("ОсновноеНачисление");
	
	Начисления.Сортировать("Сотрудник, ДатаНачала", Новый СравнениеЗначений);
	
	ИсточникиданныхУчетаВремени = Неопределено;
	Если Требования.ИсточникиДанныхВремени Тогда
		ИсточникиданныхУчетаВремени = ИсточникиДанныхУчетаВремени();
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ИсточникиданныхУчетаВремени, "Сотрудник, Месяц");
	КонецЕсли;
	
	КадроваяИстория = Неопределено;
	ВидыЗанятостиСотрудников = Неопределено;
	Если Требования.КадровыеДанные Тогда
		КадроваяИстория = КадроваяИстория();
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КадроваяИстория, "Сотрудник, Месяц");
		
		ВидыЗанятостиСотрудников = ВидыЗанятостиСотрудников();
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ВидыЗанятостиСотрудников, "Сотрудник, Месяц");
	КонецЕсли;	
		
	СводныеДанныеПлановыхНачислений = Неопределено;
	Если Требования.ВремяВЧасах Тогда
		СводныеДанныеПлановыхНачислений = СводныеДанныеПлановыхНачисленийСотрудников();
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ВидыЗанятостиСотрудников, "Сотрудник, Месяц");
	КонецЕсли;	
	
	Отбор = Новый Структура("Сотрудник, Месяц");
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыНачислений Из Начисления Цикл
		Если ПредыдущаяСтрока = Неопределено
			Или СтрокаТаблицыНачислений.Сотрудник <> ПредыдущаяСтрока.Сотрудник
			Или НачалоМесяца(СтрокаТаблицыНачислений.ДатаНачала) <> НачалоМесяца(ПредыдущаяСтрока.ДатаНачала) Тогда
			
			Отбор.Сотрудник = СтрокаТаблицыНачислений.Сотрудник;
			Отбор.Месяц = НачалоМесяца(СтрокаТаблицыНачислений.ДатаНачала);
			
			Если ИсточникиданныхУчетаВремени <> Неопределено Тогда
				СтрокиИстчониковУчетаВремени = ИсточникиданныхУчетаВремени.НайтиСтроки(Отбор);
			КонецЕсли;
			
			Если КадроваяИстория <> Неопределено Тогда
				СтрокиКадровойИстории = КадроваяИстория.НайтиСтроки(Отбор);
			КонецЕсли;	
			
			Если ВидыЗанятостиСотрудников <> Неопределено Тогда
				СтрокиВидовЗанятости = ВидыЗанятостиСотрудников.НайтиСтроки(Отбор);
			КонецЕсли;	
			
			Если СводныеДанныеПлановыхНачислений <> Неопределено Тогда
				СтрокиДанныхПлановыхНачислений = СводныеДанныеПлановыхНачислений.НайтиСтроки(Отбор);	
			КонецЕсли;		
		КонецЕсли;	
		
		СтрокаИсточниковУчетаВремени = Неопределено;
		СтрокаКадровойИстории = Неопределено;
		СтрокаВидовЗанятости = Неопределено;
		СтрокаДанныхПлановыхНачислений = Неопределено;

		Если СтрокиИстчониковУчетаВремени <> Неопределено Тогда
			СтрокаИсточниковУчетаВремени = СтрокаВключающаяДату(СтрокиИстчониковУчетаВремени, СтрокаТаблицыНачислений.ДатаНачала);
		КонецЕсли;
		
		Если СтрокиКадровойИстории <> Неопределено Тогда
			СтрокаКадровойИстории = СтрокаВключающаяДату(СтрокиКадровойИстории, СтрокаТаблицыНачислений.ДатаНачала);
		КонецЕсли;
		
		Если СтрокиВидовЗанятости <> Неопределено Тогда
			СтрокаВидовЗанятости = СтрокаВключающаяДату(СтрокиВидовЗанятости, СтрокаТаблицыНачислений.ДатаНачала);
		КонецЕсли;
		
		Если СтрокиДанныхПлановыхНачислений <> Неопределено Тогда
			СтрокаДанныхПлановыхНачислений = СтрокаВключающаяДату(СтрокиДанныхПлановыхНачислений, СтрокаТаблицыНачислений.ДатаНачала);
		КонецЕсли;	
		
		ЗаполнитьИсточникДанныхВремениСтрокиНачисления(СтрокаТаблицыНачислений, СтрокаИсточниковУчетаВремени);
		ЗаполнитьКадровыеДанныеСтрокиНачисления(СтрокаТаблицыНачислений, СтрокаКадровойИстории, СтрокаВидовЗанятости);
		
		СтрокаДополнительныхДанных = ДополнительныеДанныеНаДаты.Добавить();
		СтрокаДополнительныхДанных.Сотрудник = СтрокаТаблицыНачислений.Сотрудник;
		СтрокаДополнительныхДанных.Дата = СтрокаТаблицыНачислений.ДатаНачала;
		
		Если СтрокаИсточниковУчетаВремени <> Неопределено Тогда 
			СтрокаДополнительныхДанных.СуммированныйУчетРабочегоВремени = СтрокаИсточниковУчетаВремени.СуммированныйУчетРабочегоВремени;
		КонецЕсли;
		
		Если СтрокаДанныхПлановыхНачислений <> Неопределено Тогда 
			СтрокаДополнительныхДанных.ОсновноеНачисление = СтрокаДанныхПлановыхНачислений.ОсновноеНачисление;
		КонецЕсли;
		
		ПредыдущаяСтрока = СтрокаТаблицыНачислений;
	КонецЦикла;	
		
	ДополнительныеДанныеНаДаты.Свернуть("Сотрудник, Дата, СуммированныйУчетРабочегоВремени, ОсновноеНачисление");
	ДополнительныеДанныеНаДаты.Индексы.Добавить("Сотрудник, Дата");
	СтруктураПоиска = Новый Структура("Сотрудник, Дата");
	
	НачисленияОтбор = Начисления.ВыгрузитьКолонку("Начисление");
	НачисленияОтбор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НачисленияОтбор);
	
	Если СводныеДанныеПлановыхНачислений <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НачисленияОтбор, СводныеДанныеПлановыхНачислений.ВыгрузитьКолонку("ОсновноеНачисление"), Истина); 
		СвойстваНачислений = СвойстваНачислений(НачисленияОтбор, "ПериодРасчетаБазовыхНачислений, СдвигБазовогоПериода, КоличествоМесяцевБазовогоПериода, КатегорияНачисленияИлиНеоплаченногоВремени, ИспользуетСреднийЗаработокОбщий, УчетВремениВДняхЧасах, УчетВремениВЧасах");
	КонецЕсли;	
	ТребованияНачислений = ТребованияНачисленийТаблица();
		
	Если Требования.ВремяВЧасах И ЗначениеЗаполнено(СтрокаТаблицыНачислений.Начисление) Тогда
		ПериодыДействияВремяВЧасах = ПериодыДействияВремяВЧасахПоНачислениям();	
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ИсточникиданныхУчетаВремени, "Сотрудник, Месяц"); 
	КонецЕсли;	
		
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыНачислений Из Начисления Цикл
		Если ПредыдущаяСтрока = Неопределено
			Или СтрокаТаблицыНачислений.Сотрудник <> ПредыдущаяСтрока.Сотрудник
			Или НачалоМесяца(СтрокаТаблицыНачислений.ДатаНачала) <> НачалоМесяца(СтрокаТаблицыНачислений.ДатаНачала) Тогда
			
			Отбор.Сотрудник = СтрокаТаблицыНачислений.Сотрудник;
			Отбор.Месяц = НачалоМесяца(СтрокаТаблицыНачислений.ДатаНачала);
						
			Если ПериодыДействияВремяВЧасах <> Неопределено Тогда
				СтрокиПериодовВремяВЧасах = ПериодыДействияВремяВЧасах.НайтиСтроки(Отбор);	
			КонецЕсли;		
		КонецЕсли;	
		
		СтрокаПериодаВремяВЧасах = Неопределено;
		
		Если Не СтрокаТаблицыНачислений.ФиксЗаполнение Тогда
			СтруктураПоиска.Сотрудник = СтрокаТаблицыНачислений.Сотрудник;
			СтруктураПоиска.Дата = СтрокаТаблицыНачислений.ДатаНачала;
			СтрокиДополнительныхДанных = ДополнительныеДанныеНаДаты.НайтиСтроки(СтруктураПоиска); 
			
			СтрокаДопДанных = ?(СтрокиДополнительныхДанных.Количество() = 0, Неопределено, СтрокиДополнительныхДанных[0]);
			
			Если СтрокиПериодовВремяВЧасах <> Неопределено Тогда
				СтрокаПериодаВремяВЧасах = СтрокаВключающаяДату(СтрокиПериодовВремяВЧасах, СтрокаТаблицыНачислений.ДатаНачала);
			КонецЕсли;	
			
			Если Требования.ВремяВЧасах И ЗначениеЗаполнено(СтрокаТаблицыНачислений.Начисление) Тогда
				ЗаполнитьПризнакВремяВЧасахСтрокиНачисления(СтрокаТаблицыНачислений, СтрокаПериодаВремяВЧасах, СтрокаДопДанных, СвойстваНачислений, ТребованияНачислений[СтрокаТаблицыНачислений.Начисление]);	
			КонецЕсли;	
			
			ЗаполнитьБазовыйПериодСтрокиНачисления(СтрокаТаблицыНачислений, ТребованияНачислений[СтрокаТаблицыНачислений.Начисление]);
			ЗаполнитьПериодДействияСтрокиНачисления(СтрокаТаблицыНачислений);
			ЗаполнитьПериодРегистрацииСтрокиНачисления(СтрокаТаблицыНачислений);
			ЗаполнитьКатегориюСтрокиНачисления(СтрокаТаблицыНачислений, ТребованияНачислений[СтрокаТаблицыНачислений.Начисление]);
		КонецЕсли;	
			
		ПредыдущаяСтрока = СтрокаТаблицыНачислений;
	КонецЦикла;			
	
	ПриЗаполненииСведенийНачисленийДляРасчета(Начисления);
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
КонецПроцедуры

Процедура ЗаполнитьПризнакВремяВЧасахСтрокиНачисления(Строка, ПериодДейтсвияПризанакаВремяВЧасах, ДополнительныеДанные, СвойстваНачислений, ТребованияНачисления)
	Если СвойстваНачислений[Строка.Начисление].УчетВремениВЧасах Тогда
		Строка.ВремяВЧасах = Истина;
	ИначеЕсли СвойстваНачислений[Строка.Начисление].УчетВремениВДняхЧасах Тогда
		Если СвойстваНачислений[Строка.Начисление].ИспользуетСреднийЗаработокОбщий Тогда 
			Строка.ВремяВЧасах = ДополнительныеДанные <> Неопределено И ДополнительныеДанные.СуммированныйУчетРабочегоВремени;
		ИначеЕсли ТребованияНачисления.ТребуютсяЗаПраздничныеДниПриОкончательномРасчете Тогда
			СвойстваОсновногоНачисления = СвойстваНачислений[ДополнительныеДанные.ОсновноеНачисление]; 
			Строка.ВремяВЧасах = ДополнительныеДанные <> Неопределено И СвойстваОсновногоНачисления <> Неопределено И СвойстваОсновногоНачисления.УчетВремениВЧасах;
		ИначеЕсли ТребованияНачисления.УчитыватьИзмененияВремяВЧасах Тогда	
			Строка.ВремяВЧасах = ПериодДейтсвияПризанакаВремяВЧасах <> Неопределено И ПериодДейтсвияПризанакаВремяВЧасах.ВремяВЧасах;
		Иначе
			СвойстваОсновногоНачисления = СвойстваНачислений[ДополнительныеДанные.ОсновноеНачисление];
			Строка.ВремяВЧасах = ДополнительныеДанные <> Неопределено И СвойстваОсновногоНачисления <> Неопределено И СвойстваОсновногоНачисления.УчетВремениВЧасах;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьБазовыйПериодСтрокиНачисления(Строка, СвойстваНачисления)
	Если СвойстваНачисления = Неопределено 
		Или Не ЗначениеЗаполнено(СвойстваНачисления.ПериодРасчетаБазовыхНачислений) Тогда
		Возврат;
	КонецЕсли;	
	
	Если СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц Тогда
	 	Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоМесяца(Строка.ДатаНачала), -1);
		Строка.ОкончаниеБазовогоПериода = КонецМесяца(Строка.НачалоБазовогоПериода);
	ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал Тогда
	 	Строка.НачалоБазовогоПериода = НачалоКвартала(Строка.ДатаНачала);
		Строка.ОкончаниеБазовогоПериода = КонецКвартала(Строка.НачалоБазовогоПериода);
	ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал Тогда
	 	Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоКвартала(Строка.ДатаНачала), -3);
		Строка.ОкончаниеБазовогоПериода = КонецКвартала(Строка.НачалоБазовогоПериода);	
	ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод Тогда
	 	Строка.НачалоБазовогоПериода = НачалоГода(Строка.ДатаНачала);
		Строка.ОкончаниеБазовогоПериода = КонецГода(Строка.НачалоБазовогоПериода);
	ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод Тогда
	 	Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоГода(Строка.ДатаНачала), -12);
		Строка.ОкончаниеБазовогоПериода = КонецГода(Строка.НачалоБазовогоПериода);
	ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев Тогда
	 	Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоМесяца(Строка.ДатаНачала), -СвойстваНачисления.КоличествоМесяцевБазовогоПериода - СвойстваНачисления.СдвигБазовогоПериода + 1);
		Строка.ОкончаниеБазовогоПериода = КонецМесяца(ДобавитьМесяц(Строка.ДатаНачала, -СвойстваНачисления.СдвигБазовогоПериода));
	КонецЕсли;		
КонецПроцедуры

Процедура ЗаполнитьКадровыеДанныеСтрокиНачисления(Строка, СтрокаКадровойИстории = Неопределено, СтрокаВидовЗанятости = Неопределено)
	Если СтрокаКадровойИстории <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Строка.Организация) Тогда
			Строка.Организация = СтрокаКадровойИстории.Организация;
		КонецЕсли;
	
		Строка.Подразделение = СтрокаКадровойИстории.Подразделение;
		Строка.Должность = СтрокаКадровойИстории.Должность;
		Строка.ДолжностьПоШтатномуРасписанию = СтрокаКадровойИстории.ДолжностьПоШтатномуРасписанию;
	КонецЕсли;
	
	Если СтрокаВидовЗанятости <> Неопределено Тогда
		Строка.ВидЗанятости = СтрокаВидовЗанятости.ВидЗанятости;
	КонецЕсли;		
КонецПроцедуры

Процедура ЗаполнитьИсточникДанныхВремениСтрокиНачисления(Строка, Выборка)
	Если Выборка <> Неопределено Тогда 
		Строка.ГрафикРаботы = Выборка.ИсточникДанныхФактическогоВремени;
		Строка.ОбщийГрафик = Выборка.ОбщийГрафик;                                     
		Строка.ГрафикРаботыНорма = Выборка.ИсточникДанныхНормыВремени;	
		Строка.ВремяВЦеломЗаПериод = Выборка.ВремяВведеноСводно;
		Строка.ПериодРегистрацииВремени = Выборка.ПериодРегистрацииФактическогоВремени;
		Строка.ПериодРегистрацииНормыВремени = Выборка.ПериодРегистрацииНормыВремени;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьПериодДействияСтрокиНачисления(Строка)
	Строка.ПериодДействия = НачалоМесяца(Строка.ДатаНачала);
КонецПроцедуры

Процедура ЗаполнитьПериодРегистрацииСтрокиНачисления(Строка)
	Если Не ЗначениеЗаполнено(Строка.ПериодРегистрации) Тогда
		Если РасчетОдногоМесяца Тогда
			Строка.ПериодРегистрации = МесяцНачисления;
		Иначе
			Строка.ПериодРегистрации = Мин(НачалоМесяца(Строка.ДатаНачала), МесяцыРасчета[МесяцыРасчета.ВГраница()]);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьКатегориюСтрокиНачисления(Строка, СвойстваНачисления)
	
	Если СвойстваНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.Категория = СвойстваНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;	
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУдержанийДляРасчетаСлужебный() 
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Удержания.Сортировать("Сотрудник, ФизическоеЛицо, ДатаНачала", Новый СравнениеЗначений);
	
	ТребованияУдержаний = ТребованияУдержанийТаблица();
	ТребованияУдержанийСводно = ТребованияУдержанийСводно();
	
	Если ТребованияУдержанийСводно.ТребуютсяРабочиеМеста Тогда 
		РабочиеМестаУдержаний = РабочиеМестаУдержаний();
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(РабочиеМестаУдержаний, "ФизическоеЛицо, ДокументОснование, Месяц");
	КонецЕсли;
		
	Если ТребованияУдержанийСводно.ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей Тогда
		ОсновныеСотрудники = ОсновныеСотрудникиФизическихЛиц();
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ОсновныеСотрудники, "ФизическоеЛицо");
	КонецЕсли;	
			
	ОтборРабочихМест = Новый Структура("ФизическоеЛицо, ДокументОснование, Месяц");
	ОтборОсновныхСотрудников = Новый Структура("ФизическоеЛицо");
	ОтборКадровойИстории = Новый Структура("Сотрудник, Месяц");
	
	ЗаполнятьКадровыеДанные = Ложь;	
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		Если СтрокаУдержаний.ФиксЗаполнение 
			Или СтрокаУдержаний.ФиксСторно
			Или Не ЗначениеЗаполнено(СтрокаУдержаний.Удержание) Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаУдержаний.Категория = ТребованияУдержаний[СтрокаУдержаний.Удержание].КатегорияУдержания;
		
		Если ТребованияУдержаний[СтрокаУдержаний.Удержание].ТребуютсяРабочиеМеста Тогда
			ОтборРабочихМест.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
			ОтборРабочихМест.ДокументОснование = СтрокаУдержаний.ДокументОснование;
			ОтборРабочихМест.Месяц = НачалоМесяца(СтрокаУдержаний.ДатаНачала);
			
			СтрокиРабочихМест = РабочиеМестаУдержаний.НайтиСтроки(ОтборРабочихМест);
			СтрокаРабочегоМеста = СтрокаВключающаяДату(СтрокиРабочихМест, СтрокаУдержаний.ДатаНачала); 
			
			Если СтрокаРабочегоМеста <> Неопределено Тогда
				СтрокаУдержаний.Сотрудник = СтрокаРабочегоМеста.РабочееМесто;
			КонецЕсли;				
		КонецЕсли;	
		
		Если ТребованияУдержаний[СтрокаУдержаний.Удержание].ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей 
			И Не ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) Тогда
			
			ОтборОсновныхСотрудников.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
			
			СтрокиОсновныхСотрудников = ОсновныеСотрудники.НайтиСтроки(ОтборОсновныхСотрудников);
			СтрокаОсновныхСотрудников = СтрокаВключающаяДату(СтрокиОсновныхСотрудников, СтрокаУдержаний.ДатаНачала); 
			
			Если СтрокаОсновныхСотрудников <> Неопределено Тогда
				СтрокаУдержаний.Сотрудник = СтрокаОсновныхСотрудников.Сотрудник;
			КонецЕсли;				
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) Тогда
			ЗаполнятьКадровыеДанные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнятьКадровыеДанные Тогда
		ЗаполнитьКадровыеДанныеВУдержаниях();		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьКадровыеДанныеВУдержаниях()
	ДополнитьФильтрСотрудниковПоТаблицеУдержаний();	
	
	КадроваяИстория = КадроваяИстория();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КадроваяИстория, "Сотрудник, Месяц");	
	ОтборКадровойИстории = Новый Структура("Сотрудник, Месяц");
	
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		ОтборКадровойИстории.Сотрудник = СтрокаУдержаний.Сотрудник;
		ОтборКадровойИстории.Месяц = НачалоМесяца(СтрокаУдержаний.ДатаНачала);
		
		СтрокиКадровойИстории = КадроваяИстория.НайтиСтроки(ОтборКадровойИстории);
		СтрокаКадровойИстории = СтрокаВключающаяДату(СтрокиКадровойИстории, СтрокаУдержаний.ДатаНачала); 
		
		Если СтрокаКадровойИстории <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаУдержаний, СтрокаКадровойИстории, ,"ДатаНачала, ДатаОкончания");		
		КонецЕсли;			
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти

#Область РасчетЗарплаты

Процедура РассчитатьЗарплатуСлужебный()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетЗарплаты";
	Замер = НачатьЗамерВремени();
	
	РасчетОдногоМесяца = МесяцыРасчета.Количество() = 1;
	МесяцНачисления = МесяцыРасчета[МесяцыРасчета.ВГраница()];
	
	НаборыЗаписейНакопляемые = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, Документы.НачислениеЗарплаты.ПолучитьСсылку());
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);
	
	Если НастройкиРасчета.РассчитыватьНачисления Или НастройкиРасчета.РассчитыватьУдержания Тогда
		УстановитьТаблицуНачисления(Зарплата.Начисления);
	КонецЕсли;	
	
	Если НастройкиРасчета.РассчитыватьУдержания Тогда
		УстановитьТаблицуУдержания(Зарплата.Удержания);
	КонецЕсли;	
	
	Если НастройкиРасчета.РассчитыватьНачисления Тогда
		ИнициализироватьРасчетБазыНачислений();
	КонецЕсли;
	
	Если НастройкиРасчета.РассчитыватьУдержания И МесяцыРасчета.Количество() = 1 Тогда
		ИнициализироватьРасчетБазыУдержаний(ДанныеТекущегоНабораУдержания().ТаблицаНабора);
	КонецЕсли;
	
	РассчитатьНачисления();
	
	Для Каждого МесяцРасчета Из МесяцыРасчета Цикл
		
		МесяцНачисления = МесяцРасчета;
		УдалитьВТ = Новый Массив;
		ПоследнийМесяцРасчета = МесяцРасчета = МесяцыРасчета[МесяцыРасчета.ВГраница()];
		
		Если РасчетОдногоМесяца Тогда 
			ЗарплатаМесяца = Зарплата;
			Если НастройкиРасчета.РассчитыватьУдержания Тогда
				ДанныеТекущегоНабораУдержания = ДанныеТекущегоНабораУдержания();
				ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ДанныеТекущегоНабораУдержания.ТаблицаНабора, "ВТРегистрРасчета_Удержания", Истина);
			КонецЕсли;	
		Иначе
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);
			НачатьРасчетЗарплатыЗаМесяц(ПоследнийМесяцРасчета);
		КонецЕсли;
				
		РассчитатьДоговорыПодряда();
		
		ВыполнитьОтражениеНачисленийВБухучете();
		ВыполнитьОтражениеНачисленийПоДоговорамВБухучете();
		
		Если НастройкиРасчета.РассчитыватьУдержания Тогда
			СоздатьВТУдержанныеСуммы();
		КонецЕсли;	

		СтрокиПоИдентификатору = СтрокиУдержанийПоИдентификаторам(ЗарплатаМесяца.Удержания);
		РассчитатьЗначенияПоказателейУдержаний(ЗарплатаМесяца.Удержания);
		
		// Формируем доходы для страховых взносов, которые также нужны для расчета показателя удержаний.
		ТребованияУдержаний = ТребованияУдержанийСводно();
		СформироватьДоходыСтраховыхВзносов(ТребованияУдержаний);
		
		// Рассчитать все удержания, кроме требующих рассчитанности НДФЛ.
		КатегорииУдержанийУчитывающихНДФЛ = ПланыВидовРасчета.Удержания.КатегорииУдержанийУчитывающихНДФЛ();
		
		ЗаполнитьЗадолженностьПоУдержаниям(СтрокиПоИдентификатору);
		Если НастройкиРасчета.РассчитыватьУдержания Тогда
			РассчитатьУдержанияОчередности(ДанныеТекущегоНабораУдержания().ТаблицаНабора, СтрокиПоИдентификатору, ТребованияУдержаний, ОтборИсключаяКатегории(КатегорииУдержанийУчитывающихНДФЛ));
		КонецЕсли;	
		
		РассчитатьНДФЛ();
		
		Если ПоследнийМесяцРасчета Тогда
			РассчитатьКорректировкиВыплаты();
		КонецЕсли;
		
		РассчитатьПогашениеЗаймов();
		
		// Рассчитать удержания, учитывающие НДФЛ.
		Если НастройкиРасчета.РассчитыватьУдержания Тогда
			РассчитатьУдержанияОчередности(ДанныеТекущегоНабораУдержания().ТаблицаНабора, СтрокиПоИдентификатору, ТребованияУдержаний, ОтборВключаяКатегории(КатегорииУдержанийУчитывающихНДФЛ));
			ОграничитьРазмерУдержанийДоПредела(УдалитьВТ, СтрокиПоИдентификатору);
		КонецЕсли;	
		
		ЗавершитьРасчетБазыУдержаний();
		ЗавершитьРасчетУдержаний(УдалитьВТ, СтрокиПоИдентификатору);
		
		ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете();
		ВыполнитьОтражениеУдержанийИЗаймовВБухучете();
		
		РассчитатьВзносы();
		Если Не РасчетОдногоМесяца Тогда
			ЗавершитьРасчетЗарплатыЗаМесяц();
		КонецЕсли;
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачислений);
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетВсехНачислений);
		УничтожитьВТ(УдалитьВТ, Истина);
	КонецЦикла;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
	ЗавершитьРасчетБазыНачислений();
	ЗавершитьРасчетБазыУдержаний();
КонецПроцедуры

#КонецОбласти

#Область РасчетНачислений

Процедура РассчитатьНачисления()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетНачислений";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьНачисления Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПересчетНачислений();	
	
	Если Начисления.Количество() = 0 Тогда
		ЗавершитьПересчетНачислений();
		ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
		ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
		СоздатьВТПоРегиструНачисления();
		
		ЗаполнитьИдентификаторСтроки(Зарплата.Начисления);
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	ЗаполнитьФильтрПолученияРабочегоВремениПоДаннымТекущегоНабора(Начисления);
	
	РассчитатьЗначенияПоказателейНачислений();
	ВычеркнутьСтрокиРасчетаВЦеломЗаМесяц();
	
	СтрокиПоИдентификатору = СтрокиНачисленийПоИдентификаторам();
	ЗаполнитьТерриторииУсловияТруда(СтрокиПоИдентификатору);
	РассчитатьНачисленияОчередности();
	
	ВычеркнутьНачисления();
	
	ПослеРасчетаНачислений(СтрокиПоИдентификатору, НаборыЗаписей.Начисления);

	ЗавершитьПересчетНачислений();
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	
	СоздатьВТПоРегиструНачисления();
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);	
КонецПроцедуры

Функция СтрокиНабораНачисленияПоИдентфикаторам()
	Если КэшСтрокиНабораНачисленияПоИдентфикаторам <> Неопределено Тогда
		Возврат КэшСтрокиНабораНачисленияПоИдентфикаторам;
	КонецЕсли;		
	
	ДанныеНабора = ДанныеТекущегоНабораНачисления();
	
	СтрокиНабораПоИдентфикаторам = Новый Соответствие();
	
	Для Каждого СтрокаНабора Из ДанныеНабора.ТаблицаНабора Цикл
		СтрокиНабораПоИдентфикаторам.Вставить(СтрокаНабора.ИдентификаторСтроки, СтрокаНабора);		
	КонецЦикла;	
		
	КэшСтрокиНабораНачисленияПоИдентфикаторам = СтрокиНабораПоИдентфикаторам;	

	Возврат СтрокиНабораПоИдентфикаторам;	
КонецФункции	

Процедура РассчитатьНачисленияОчередности()
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	
	ИнициализироватьРасчетБазыНачислений();
	
	СтрокиНачисленийПоОчередности = СтрокиПоОчередности(Начисления, ТребованияНачисленийТаблица());
	Очередности = ОчередностиРасчета(СтрокиНачисленийПоОчередности);
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	СтрокиТребущиеРасчетаБазы = СтрокиНачисленийПоТребованиям().ПоказателиРасчетнаяБаза;
	СтрокиПоИдентфикаторам = СтрокиНачисленийПоИдентификаторам();
		
	РасчитанныеНачисленияПредыдущихИтераций = Неопределено;
	Для Каждого ОчередностьРасчета Из Очередности Цикл
		РассчитатьЗначениеПоказателяРасчетнаяБазаНачислений(
			ОчередностьРасчета,
			СтрокиТребущиеРасчетаБазы[ОчередностьРасчета],
			СтрокиПоИдентфикаторам,
			РасчитанныеНачисленияПредыдущихИтераций);
		
		РассчитатьНачисленияПоФормуле(СтрокиНачисленийПоОчередности[ОчередностьРасчета]);
		РассчитатьНачисленияПредопределеннымСпособом(СтрокиНачисленийПоОчередности[ОчередностьРасчета]);
		СкорректироватьИскажениеРезультата(СтрокиНачисленийПоОчередности[ОчередностьРасчета]);
		
		РасчитанныеНачисленияПредыдущихИтераций = ДанныеТекущегоНабора.ТаблицаНабора;
	КонецЦикла;	
	
	ЗавершитьРасчетБазыНачислений();
КонецПроцедуры

Процедура РассчитатьНачисленияПоФормуле(РассчитываемыеСтроки)	
	ВидыРасчетаОтбор = ОбщегоНазначения.ВыгрузитьКолонку(РассчитываемыеСтроки, "Начисление", Истина);
	Формулы = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРасчетаОтбор, "ФормулаРасчета, ФормулаРасчетаДляВыполнения");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();	
	ПоказателиНачислений = ПоказателиНачислений();
	
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Для Каждого СтрокаТаблицыНачислений Из РассчитываемыеСтроки Цикл
		Если Не ТребованияНачислений[СтрокаТаблицыНачислений.Начисление].ИспользуетФормулу Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
		ПоказателиТекущегоНачисления = ПоказателиНачислений[СтрокаНабора.ВидРасчета];
		Если РасчетНачисленияЗафиксирован(СтрокаНабора) Тогда
			СтрокаТаблицыНачислений.Результат = СтрокаНабора.Результат;
			РаспределитьСтрокуПоТерриториямУсловиямТруда(СтрокаТаблицыНачислений);
		Иначе
			Если ТребованияНачислений[СтрокаНабора.ВидРасчета].Рассчитывается Тогда
				ИсходныеДанные = Новый Структура;
				Если ПоказателиТекущегоНачисления <> Неопределено Тогда
					Для Каждого СвойстваПоказателя Из ПоказателиТекущегоНачисления Цикл 
						ЗаполнитьЗначениеПоказателяПоИдентификатору(ИсходныеДанные, СтрокаТаблицыНачислений.Показатели, СвойстваПоказателя.Показатель, СвойстваПоказателя.ИдентификаторПоказателя)
					КонецЦикла;
				КонецЕсли;	
				
				РассчитатьРезультатНачисленияПоФормуле(
					СтрокаТаблицыНачислений, 
					ИсходныеДанные, 
					Формулы[СтрокаНабора.ВидРасчета].ФормулаРасчетаДляВыполнения, 
					Формулы[СтрокаНабора.ВидРасчета].ФормулаРасчета, 
					ТребованияНачислений[СтрокаНабора.ВидРасчета].ТребуетсяРаспределениеПоказателей);	
					
			Иначе
				РаспределитьСтрокуПоТерриториямУсловиямТруда(СтрокаТаблицыНачислений);
			КонецЕсли;
			Если СтрокаТаблицыНачислений.Сторно Тогда
				СтрокаТаблицыНачислений.Результат = - СтрокаТаблицыНачислений.Результат;
			КонецЕсли;
			СтрокаНабора.Результат = СтрокаТаблицыНачислений.Результат;
	    КонецЕсли;
		
		Если СтрокаТаблицыНачислений.Сторно 
			И Не СтрокаТаблицыНачислений.ФиксСторно Тогда
			СтрокаТаблицыНачислений.ОплаченоДней = - СтрокаТаблицыНачислений.ОплаченоДней;
			СтрокаТаблицыНачислений.ОплаченоЧасов = - СтрокаТаблицыНачислений.ОплаченоЧасов;
			СтрокаТаблицыНачислений.ОтработаноДней = - СтрокаТаблицыНачислений.ОтработаноДней;
			СтрокаТаблицыНачислений.ОтработаноЧасов = - СтрокаТаблицыНачислений.ОтработаноЧасов;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура РассчитатьНачисленияПредопределеннымСпособом(РассчитываемыеСтроки)
	ТребованияНачислений = ТребованияНачисленийТаблица();
	СтрокиПоСпособамРасчета = Новый Соответствие;
	
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Для Каждого Строка Из РассчитываемыеСтроки Цикл
		СтрокаНабора = СтрокиНабора[Строка.ИдентификаторСтроки];
		СвойстваТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		Если Не СвойстваТекущегоНачисления.ИспользуетФормулу Тогда
			
			Если РасчетНачисленияЗафиксирован(СтрокаНабора) Тогда
				Строка.Результат = СтрокаНабора.Результат;
				РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
				Продолжить;
			КонецЕсли;

			СпособРасчета = ТребованияНачислений[СтрокаНабора.ВидРасчета].СпособРасчета;
			СтрокиПоСпособуРасчета = СтрокиПоСпособамРасчета[СпособРасчета];
			Если СтрокиПоСпособуРасчета = Неопределено Тогда
				СтрокиПоСпособуРасчета = Новый Массив;
				СтрокиПоСпособамРасчета.Вставить(СпособРасчета, СтрокиПоСпособуРасчета);
			КонецЕсли;
			СтрокиПоСпособуРасчета.Добавить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	                                                  
	Для Каждого СтрокиПоСпособуРасчета Из СтрокиПоСпособамРасчета Цикл
		РассчитатьСтрокиНачисленийПредопределеннымСпособом(СтрокиПоСпособуРасчета.Ключ, СтрокиПоСпособуРасчета.Значение);
		РаспределитьСтрокиПоТерриториямУсловиямТруда(СтрокиПоСпособуРасчета.Значение);
		
		Для Каждого Строка Из СтрокиПоСпособуРасчета.Значение Цикл
			Если Строка.Сторно Тогда
				Строка.Результат = - Строка.Результат;
			КонецЕсли;
			СтрокиНабора[Строка.ИдентификаторСтроки].Результат = Строка.Результат;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

Процедура СкорректироватьИскажениеРезультата(РассчитываемыеСтроки)
	ИсточникиИскаженияРезультата = Новый ТаблицаЗначений;
	ИсточникиИскаженияРезультата.Колонки.Добавить("Сотрудник");
	ИсточникиИскаженияРезультата.Колонки.Добавить("ВидРасчета");
	ИсточникиИскаженияРезультата.Колонки.Добавить("ДокументОснование");
	ИсточникиИскаженияРезультата.Колонки.Добавить("ПериодДействия");
	ИсточникиИскаженияРезультата.Колонки.Добавить("ОбщийГрафик");
	ИсточникиИскаженияРезультата.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	ИсточникиИскаженияРезультата.Колонки.Добавить("ЕстьНачалоМесяца", Новый ОписаниеТипов("Число"));
	ИсточникиИскаженияРезультата.Колонки.Добавить("ЕстьКонецМесяца", Новый ОписаниеТипов("Число"));
	ИсточникиИскаженияРезультата.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));

	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	ТаблицаНабора = ДанныеТекущегоНабора.ТаблицаНабора;
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	СтрокиПоИдентификатору = Новый Соответствие();
	Для Каждого СтрокаНачислений Из РассчитываемыеСтроки Цикл
		СтрокиПоИдентификатору.Вставить(СтрокаНачислений.ИдентификаторСтроки, СтрокаНачислений);
		СтрокаНабора = СтрокиНабора[СтрокаНачислений.ИдентификаторСтроки];
		СвойстваТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		
		Если СтрокаНабора.ФиксРасчет
			Или СтрокаНабора.ФиксСторно
		    Или Не СвойстваТекущегоНачисления.ИспользуетФормулу
			Или Не СвойстваТекущегоНачисления.ТребуетсяРасчетВремени
			Или Не СвойстваТекущегоНачисления.ТребуетсяРасчетНормыВремени Тогда
			
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ИсточникиИскаженияРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаНабора);
		СтрокаТаблицы.КоличествоСтрок = 1;
		Если СтрокаНабора.ПериодДействияНачало = НачалоМесяца(СтрокаНабора.ПериодДействияНачало) Тогда 
			СтрокаТаблицы.ЕстьНачалоМесяца = 1;
		КонецЕсли;	
		Если СтрокаНабора.ПериодДействияКонец = КонецМесяца(СтрокаНабора.ПериодДействияКонец) Тогда 
			СтрокаТаблицы.ЕстьКонецМесяца = 1;
		КонецЕсли;	
	КонецЦикла;	
	
	ПоляКлюча = "Сотрудник, ВидРасчета, ДокументОснование, ПериодДействия, ОбщийГрафик, ВремяВЧасах";
	ИсточникиИскаженияРезультата.Свернуть(ПоляКлюча, "ЕстьНачалоМесяца, ЕстьКонецМесяца, КоличествоСтрок");
	
	ВидыРасчетаОтбор = ОбщегоНазначения.ВыгрузитьКолонку(ИсточникиИскаженияРезультата, "ВидРасчета", Истина);
	Формулы = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРасчетаОтбор, "ФормулаРасчета, ФормулаРасчетаДляВыполнения");
	
	Показатели = ПоказателиНачислений();
	
	ТаблицаНабора.Индексы.Добавить(ПоляКлюча);
	СтруктураПоиска = Новый Структура(ПоляКлюча);
	
	Для Каждого СтрокаИсточника Из ИсточникиИскаженияРезультата Цикл
		Если СтрокаИсточника.ЕстьНачалоМесяца = 0
			Или СтрокаИсточника.ЕстьКонецМесяца = 0
			Или СтрокаИсточника.КоличествоСтрок = 1 Тогда
			
			Продолжить;
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИсточника);
		
		КорректируеыеСтроки = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
		
		СкорректироватьИскажениеРезультатаПоВидамРасчета(
			КорректируеыеСтроки,
			СтрокиПоИдентификатору,
			Показатели[СтрокаИсточника.ВидРасчета],
			Формулы[СтрокаИсточника.ВидРасчета],
			СтрокаИсточника.ВремяВЧасах);	
	КонецЦикла;		
КонецПроцедуры

Процедура СкорректироватьИскажениеРезультатаПоВидамРасчета(КорректируемыеСтроки, СтрокиПоИдентификатору, ПоказателиНачисления, ФормулыНачисления, ВремяВЧасах)
	
	СуммаРезультат = 0;
	СуммаОплаченоДней = 0;
	СуммаОплаченоЧасов = 0;
	ЗначенияПредыдущейСтроки = Неопределено;
	
	КорректироватьИскажение = Истина;
	МассивСтрок = Новый Массив;
	МассивРезультатов = Новый Массив;
	Для Каждого КорректируемаяСтрока Из КорректируемыеСтроки Цикл
		Строка = СтрокиПоИдентификатору[КорректируемаяСтрока.ИдентификаторСтроки];
		МассивСтрок.Добавить(КорректируемаяСтрока);
		МассивРезультатов.Добавить(Строка.Результат);
		СуммаРезультат = СуммаРезультат + Строка.Результат;
		СуммаОплаченоДней = СуммаОплаченоДней + Строка.ОплаченоДней;
		СуммаОплаченоЧасов = СуммаОплаченоЧасов + Строка.ОплаченоЧасов;
		ЗначенияПоказателей = Новый Структура;
		ЗначенияОтображаемые = Новый Структура;
		Для Каждого СвойстваПоказателя Из ПоказателиНачисления Цикл
			ЗаполнитьЗначениеПоказателяПоИдентификатору(ЗначенияПоказателей, Строка.Показатели, СвойстваПоказателя.Показатель, СвойстваПоказателя.ИдентификаторПоказателя);
			Если СвойстваПоказателя.ОтображатьВДокументахНачисления Тогда
				ЗаполнитьЗначениеПоказателяПоИдентификатору(ЗначенияОтображаемые, Строка.Показатели, СвойстваПоказателя.Показатель, СвойстваПоказателя.ИдентификаторПоказателя);
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияПредыдущейСтроки <> Неопределено Тогда
			// Сравниваем набор отображаемых показателей.
			Если Не ОбщегоНазначения.КоллекцииИдентичны(ЗначенияОтображаемые, ЗначенияПредыдущейСтроки) Тогда
				КорректироватьИскажение = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		ЗначенияПредыдущейСтроки = ЗначенияОтображаемые;
	КонецЦикла;
	
	Если Не КорректироватьИскажение Тогда
		// Различаются показатели.
		Возврат;
	КонецЕсли;
	
	Если СуммаОплаченоДней <> Строка.НормаДней Или СуммаОплаченоЧасов <> Строка.НормаЧасов Тогда
		// Не весь месяц отработан.
		Возврат;
	КонецЕсли;
	
	// Заменяем показатели времени на суммы.
	ЗначенияПоказателей.Вставить("ВремяВДнях", СуммаОплаченоДней);
	ЗначенияПоказателей.Вставить("ВремяВЧасах", СуммаОплаченоЧасов);
	ЗначенияПоказателей.Вставить("ВремяВДняхЧасах", ?(ВремяВЧасах = Истина, СуммаОплаченоЧасов, СуммаОплаченоДней));
	ЗначенияПоказателей.Вставить("ОтработаноДней", СуммаОплаченоДней);
	ЗначенияПоказателей.Вставить("ОтработаноЧасов", СуммаОплаченоЧасов);
	
	// Рассчитываем результат так, как если бы была только одна строка за весь месяц.
	Результат = РезультатПоФормуле(ЗначенияПоказателей, ФормулыНачисления.ФормулаРасчетаДляВыполнения, ФормулыНачисления.ФормулаРасчета, Строка);
	Если Результат = СуммаРезультат Тогда
		// Сумма не требует корректировки.
		Возврат;
	КонецЕсли;                                                                                    
	
	// Распределяем результат, рассчитанный как бы за весь месяц среди строк.
	Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(Результат, МассивРезультатов);
	Если Результаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	Пока Индекс < Результаты.Количество() Цикл
		СтрокаНабора = МассивСтрок[Индекс];
		Строка = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		Строка.Результат = Результаты[Индекс];
		СтрокаНабора.Результат = Строка.Результат;
		РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗначениеПоказателяРасчетнаяБазаНачислений(ОчередностьРасчета, СтрокиКРасчету, СтрокиПоИдентфикаторам, РасчитанныеНачисленияПредыдущихИтераций = Неопределено)	
	Если Не ЗначениеЗаполнено(СтрокиКРасчету) Тогда
		Возврат;
	КонецЕсли;	
	
	РасчетнаяБаза = РасчетБазыНачислений.РасчетнаяБазаНачислений(ОчередностьРасчета, РасчитанныеНачисленияПредыдущихИтераций);
	
	ПоказательРасчетнаяБаза = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(РасчетнаяБаза, "Регистратор, НомерСтроки");
	СтруктураПоиска = Новый Структура("Регистратор, НомерСтроки");
	
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	Для Каждого ИдентификаторСтроки Из СтрокиКРасчету Цикл
		СтрокаНабора = СтрокиНабора[ИдентификаторСтроки];
		СтрокаТаблицыНачисления = СтрокиПоИдентфикаторам[ИдентификаторСтроки];
		Если СтрокаНабора = Неопределено
			Или СтрокаТаблицыНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНабора);
		СтрокиБазы = РасчетнаяБаза.НайтиСтроки(СтруктураПоиска);
		
		Значение = 0;
		Для Каждого СтрокаБазы Из СтрокиБазы Цикл
			Значение = Значение + СтрокаБазы.РезультатБаза;
		КонецЦикла;		
		ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ПоказательРасчетнаяБаза, Значение, Истина);		
	КонецЦикла;		
КонецПроцедуры

Функция СтрокиПоОчередности(ТаблицаНачислений, ТребованияВидовРасчета)
	СтрокиНачисленийПоОчередонсти = Новый Соответствие;
	ТребованияНачичслений = ТребованияНачисленийТаблица();
	
	Для Каждого СтрокаНабора Из ТаблицаНачислений Цикл
		Очередность = ТребованияНачичслений[СтрокаНабора.Начисление].ОчередностьРасчета;
		СтрокиОчередности = СтрокиНачисленийПоОчередонсти[Очередность];
		Если СтрокиОчередности = Неопределено Тогда
			СтрокиОчередности = Новый Массив;
			СтрокиНачисленийПоОчередонсти.Вставить(Очередность, СтрокиОчередности);	
		КонецЕсли;	
		СтрокиОчередности.Добавить(СтрокаНабора);	
	КонецЦикла;	
	
	Возврат СтрокиНачисленийПоОчередонсти;
КонецФункции	

Функция ОчередностиРасчета(СтрокиПоОчередности)
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("Очередность", Новый ОписаниеТипов("Число"));
	
	Для Каждого Очередность Из СтрокиПоОчередности Цикл
		ТаблицаСортировки.Добавить().Очередность = Очередность.Ключ;
	КонецЦикла;	
	
	ТаблицаСортировки.Сортировать("Очередность");
	Возврат ТаблицаСортировки.ВыгрузитьКолонку("Очередность");
КонецФункции	

Функция СтрокиНачисленийПоТребованиям()
	Если КэшСтрокиНачисленийПоТребованиям <> Неопределено Тогда
		Возврат КэшСтрокиНачисленийПоТребованиям;
	КонецЕсли;	
	
	СтрокиНачисленийПоТребованиям = Новый Структура;
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиРабочегоВремени", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиКалендартныеДни", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиНормыВремени", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиКалендартныеБезПраздников", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиКалендарныеДниМесяцаБезПраздников", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиДниОтпуска", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиКоэффициентыИндексации", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ОперативныеПоказателиСотрудников", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ОперативныеПоказателиОрганизаций", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ОперативныеПоказателиПодразделений", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ФиксРасчетВремени", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ИзвестныеПоказатели", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиРасчетнаяБаза", Новый Соответствие());
	
	ИзвестныеПоказатели = Новый ТаблицаЗначений;
	ИзвестныеПоказатели.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзвестныеПоказатели.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзвестныеПоказатели.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ИзвестныеПоказатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ИзвестныеПоказатели.Колонки.Добавить("ДокументОснование");
	ИзвестныеПоказатели.Колонки.Добавить("УчитватьДокументОснование", Новый ОписаниеТипов("Булево"));
	ИзвестныеПоказатели.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзвестныеПоказатели.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ИзвестныеПоказатели.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ИзвестныеПоказатели.Колонки.Добавить("СтрокаТаблицыРасчета");

	СтрокиНачисленийПоТребованиям.ИзвестныеПоказатели = ИзвестныеПоказатели;
	
	ПоказателиКалендарныеДни = Новый Соответствие;
	ПоказателиКалендарныеДни.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"), Истина);
	ПоказателиКалендарныеДни.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"), Истина);
	
	ПоказателиНормыВремени = Новый Соответствие;
	ПоказателиНормыВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"), Истина);
	ПоказателиНормыВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"), Истина);
	ПоказателиНормыВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"), Истина);
	ПоказателиНормыВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДнейЧасов"), Истина);
	
	ПоказательКалендарныеДнияБезПраздников = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников");
	ПоказательКалендарныеДниМесяцаБезПраздников = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяцаБезПраздников");
	ПоказательКоличествоДнейОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска");

	ПоказателиКоэффициентыИндексаци = Новый Соответствие;
	ПоказателиКоэффициентыИндексаци.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка"), Истина);
	ПоказателиКоэффициентыИндексаци.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания"), Истина);
	
	ПоказательРасчетнаяБаза = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	ПоказателиНачислений = ПоказателиНачислений();
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	Для Каждого СтрокаНабора Из Начисления Цикл
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.Начисление];
		ПоказателиТекущегоНачисления = ПоказателиНачислений[СтрокаНабора.Начисление];
		
		Если ЗаполнятьРабочееВремяДляСтрокиНабора(СтрокаНабора, ТребованияТекущегоНачисления) Тогда
			СтрокиНачисленийПоТребованиям.ПоказателиРабочегоВремени.Добавить(СтрокаНабора);
		КонецЕсли;
		
		Если ПоказателиТекущегоНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабора.ФиксРасчетВремени Тогда
			СтрокиНачисленийПоТребованиям.ФиксРасчетВремени.Добавить(СтрокаНабора);	
		КонецЕсли;

		ЕстьПоказательКалендарныеДни = Ложь;
		ЕстьПоказательНормыВремени = Ложь;
		ЕстьПоказательКалендарныеДнияБезПраздников = Ложь;
		ЕстьПоказательКалендарныеДниМесяцаБезПраздников = Ложь;
		ЕстьПоказательКоличествоДнейОтпуска = Ложь;
		ЕстьКоэффициентИндексаци = Ложь;
		ЕстьОперативныйПоказательСотрудника = Ложь;
		ЕстьОперативныйПоказательОрганизации = Ложь;
		ЕстьОперативныйПоказательПодразделения = Ложь;
		ЕстьПоказательРасчетнаяБаза = Ложь;
		Для Каждого СвойстваПоказателя Из ПоказателиТекущегоНачисления Цикл
			Если СтрокаНабора.ИзвестныеПоказатели.Количество() > 0 Тогда
				ДанныеИзветсногоПоказателя = СтрокаНабора.ИзвестныеПоказатели.Найти(СвойстваПоказателя.Показатель, "Показатель");
				Если ДанныеИзветсногоПоказателя <> Неопределено Тогда
					СтрокаПоказателей = СтрокиНачисленийПоТребованиям.ИзвестныеПоказатели.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоказателей, СтрокаНабора);
					СтрокаПоказателей.Показатель = СвойстваПоказателя.Показатель;
					СтрокаПоказателей.Значение = ДанныеИзветсногоПоказателя.Значение;
					СтрокаПоказателей.СтрокаТаблицыРасчета = СтрокаНабора;
						
					Продолжить;
				КонецЕсли;
			КонецЕсли;		
			
			Если СтрокаНабора.ФиксСторно Тогда
				Продолжить;
			ИначеЕсли ПоказателиКалендарныеДни[СвойстваПоказателя.Показатель] = Истина 
				И Не ЕстьПоказательКалендарныеДни 
				И Не СтрокаНабора.ФиксРасчетВремени Тогда
				
				СтрокиНачисленийПоТребованиям.ПоказателиКалендартныеДни.Добавить(СтрокаНабора);
				ЕстьПоказательКалендарныеДни = Истина;
			ИначеЕсли ПоказателиНормыВремени[СвойстваПоказателя.Показатель] = Истина 
				И Не ЕстьПоказательНормыВремени 
				И Не СтрокаНабора.ФиксРасчетВремени Тогда
				
				СтрокиНачисленийПоТребованиям.ПоказателиНормыВремени.Добавить(СтрокаНабора);
				ЕстьПоказательНормыВремени = Истина;
			ИначеЕсли СвойстваПоказателя.Показатель = ПоказательКалендарныеДнияБезПраздников 
				И Не ЕстьПоказательКалендарныеДнияБезПраздников 
				И Не СтрокаНабора.ФиксРасчетВремени Тогда
				
				СтрокиНачисленийПоТребованиям.ПоказателиКалендартныеБезПраздников.Добавить(СтрокаНабора);
				ЕстьПоказательКалендарныеДнияБезПраздников = Истина;
			ИначеЕсли СвойстваПоказателя.Показатель = ПоказательКалендарныеДниМесяцаБезПраздников 
				И Не ЕстьПоказательКалендарныеДниМесяцаБезПраздников 
				И Не СтрокаНабора.ФиксРасчетВремени Тогда
				
				СтрокиНачисленийПоТребованиям.ПоказателиКалендарныеДниМесяцаБезПраздников.Добавить(СтрокаНабора);
				ЕстьПоказательКалендарныеДниМесяцаБезПраздников = Истина;
			ИначеЕсли СвойстваПоказателя.Показатель = ПоказательКоличествоДнейОтпуска
				И Не ЕстьПоказательКоличествоДнейОтпуска 
				И Не СтрокаНабора.ФиксРасчетВремени Тогда
				
				СтрокиНачисленийПоТребованиям.ПоказателиДниОтпуска.Добавить(СтрокаНабора);
				ЕстьПоказательКоличествоДнейОтпуска = Истина;	
			ИначеЕсли ПоказателиКоэффициентыИндексаци[СвойстваПоказателя.Показатель] = Истина 
				И Не СтрокаНабора.Сторно
				И Не СтрокаНабора.ФиксСторно
				И Не СтрокаНабора.ФиксЗаполнение  
				И Не ЕстьКоэффициентИндексаци Тогда
				
				СтрокиНачисленийПоТребованиям.ПоказателиКоэффициентыИндексации.Добавить(СтрокаНабора);
				ЕстьКоэффициентИндексаци = Истина;
			ИначеЕсли СвойстваПоказателя.Показатель = ПоказательРасчетнаяБаза
				И Не ЕстьПоказательРасчетнаяБаза 
				И Не СтрокаНабора.ФиксЗаполнение Тогда
				
				Очередность = ТребованияНачислений[СтрокаНабора.Начисление].ОчередностьРасчета;
				СтрокиОчередности = СтрокиНачисленийПоТребованиям.ПоказателиРасчетнаяБаза[Очередность];
				Если СтрокиОчередности = Неопределено Тогда
					СтрокиОчередности = Новый Массив;
					СтрокиНачисленийПоТребованиям.ПоказателиРасчетнаяБаза.Вставить(Очередность, СтрокиОчередности);
				КонецЕсли;		
				
				СтрокиОчередности.Добавить(СтрокаНабора.ИдентификаторСтроки);
				ЕстьПоказательРасчетнаяБаза = Истина;	
			ИначеЕсли СвойстваПоказателя.ОперативныйПоказательСотрудника
				И Не ЕстьОперативныйПоказательСотрудника Тогда
				
				СтрокиНачисленийПоТребованиям.ОперативныеПоказателиСотрудников.Добавить(СтрокаНабора);
				ЕстьОперативныйПоказательСотрудника = Истина;
			ИначеЕсли СвойстваПоказателя.ОперативныйПоказательОрганизации
				И Не ЕстьОперативныйПоказательОрганизации Тогда
				
				СтрокиНачисленийПоТребованиям.ОперативныеПоказателиОрганизаций.Добавить(СтрокаНабора);
				ЕстьОперативныйПоказательОрганизации = Истина;
			ИначеЕсли СвойстваПоказателя.ОперативныйПоказательПодразделения
				И Не ЕстьОперативныйПоказательПодразделения Тогда
				
				СтрокиНачисленийПоТребованиям.ОперативныеПоказателиПодразделений.Добавить(СтрокаНабора);
				ЕстьОперативныйПоказательПодразделения = Истина;
			КонецЕсли;		
		КонецЦикла;	
	КонецЦикла;	
	
	КэшСтрокиНачисленийПоТребованиям = СтрокиНачисленийПоТребованиям;
	Возврат СтрокиНачисленийПоТребованиям;
КонецФункции	

Процедура ПослеРасчетаНачислений(СтрокиПоИдентификатору, НаборЗаписей)
	УчетПособийСоциальногоСтрахованияРасширенный.ПослеРасчетаНачисленийПоДаннымНабора(
		ДанныеТекущегоНабораНачисления().ТаблицаНабора,
		Организация,
		МесяцНачисления,
		СтрокиПоИдентификатору,
		ТребованияНачисленийТаблица());		
КонецПроцедуры

Процедура ВычеркнутьНачисления()
	ТребованияНачислений = ТребованияНачисленийТаблица();
	ПоказателиНачислений = ПоказателиНачислений();
	
	ИндексПоследнейСтроки = Начисления.Количество() - 1;
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеТекущегоНабора.ФПД, "Регистратор, НомерСтроки");
	ОтборСтрокФПД = Новый Структура("Регистратор, НомерСтроки");
	
	Для Сч = 0 По ИндексПоследнейСтроки Цикл
		ТекущаяСтрока = Начисления[ИндексПоследнейСтроки - Сч];
		СвойстваТекущегоНачисления = ТребованияНачислений[ТекущаяСтрока.Начисление];
		ПоказателиТекущегоНачисления = ПоказателиНачислений[ТекущаяСтрока.Начисление];
		
		Если ТекущаяСтрока.ФиксСторно
			Или ТекущаяСтрока.ФиксЗаполнение Тогда
			
			Продолжить;
		КонецЕсли;	
			
		Если ВычеркиватьСтрокуНачисленийПоПоказателям(ТекущаяСтрока, СвойстваТекущегоНачисления, ПоказателиТекущегоНачисления)
			Или ВычеркиватьСтрокуНачисленияПоФПД(ТекущаяСтрока, СвойстваТекущегоНачисления, ДанныеТекущегоНабора, СтрокиНабора, ОтборСтрокФПД) Тогда
			
			СтрокаНабора = СтрокиНабора[ТекущаяСтрока.ИдентификаторСтроки];
			СтрокиНабора.Удалить(ТекущаяСтрока.ИдентификаторСтроки);
			НастройкиПересчета.СоответствиеСтрокНачислений.Удалить(ТекущаяСтрока);
			Начисления.Удалить(ТекущаяСтрока);	
			ДанныеТекущегоНабора.ТаблицаНабора.Удалить(СтрокаНабора);
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры	

Процедура ВычеркнутьСтрокиРасчетаВЦеломЗаМесяц()
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	
	СтруктураПоиска = Новый Структура("Вычеркнуть", Истина);
	СтрокиУдаления = Начисления.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
		СтрокаНабора = СтрокиНабора[СтрокаУдаления.ИдентификаторСтроки];
		СтрокиНабора.Удалить(СтрокаУдаления.ИдентификаторСтроки);
		ДанныеТекущегоНабора.ТаблицаНабора.Удалить(СтрокаНабора);
		Начисления.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

Функция ВычеркиватьСтрокуНачисленийПоПоказателям(СтрокаТаблицыНачислений, СвойстваТекущегоНачисления, ПоказателиТекущегоНачисления)
	Если СвойстваТекущегоНачисления.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете 
		Или СвойстваТекущегоНачисления.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете Тогда
		Если  ЗаполнятьРабочееВремяДляСтрокиНабора(СтрокаТаблицыНачислений, СвойстваТекущегоНачисления) И Не СтрокаТаблицыНачислений.ЗарегистрированоВремяПоНабору Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	ИначеЕсли СвойстваТекущегоНачисления.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете Тогда
		Для Каждого СвойстваПоказателмя Из ПоказателиТекущегоНачисления Цикл
			Если СвойстваПоказателмя.ОпределяющийПоказатель
				И СтрокаТаблицыНачислений.Показатели.Количество() > 0
		    	И СтрокаТаблицыНачислений.Показатели.Найти(СвойстваПоказателмя.Показатель, "Показатель") <> Неопределено Тогда
				
				Возврат Ложь
			КонецЕсли;	
		КонецЦикла;	
				
		Возврат Истина;			
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции

Функция ВычеркиватьСтрокуНачисленияПоФПД(СтрокаТаблицыНачислений, СвойстваТекущегоНачисления, ДанныеТекущегоНабора, СтрокиНабора, ОтборСтрокФПД)
	СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
	ЗаполнитьЗначенияСвойств(ОтборСтрокФПД, СтрокаНабора);
	
	Если ДанныеТекущегоНабора.ФПД.НайтиСтроки(ОтборСтрокФПД).Количество() = 0 Тогда
		Если НастройкиРасчета.ИсключатьСтрокиПолностьюВытесненныхНачислений Тогда
			Возврат Истина;		
		Иначе	
			Возврат СвойстваТекущегоНачисления.ЗачетНормыВремени И Не СвойстваТекущегоНачисления.ЗачетОтработанногоВремени;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции	

#Область РасчетПоФормуле

Процедура ЗаполнитьЗначениеПоказателяПоИдентификатору(ЗначенияПоИдентификатору, Показатели, Показатель, ИдентификаторПоказателя)
	
	Если Не ЗначениеЗаполнено(Показатель) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПоказателя = ЗначениеПоказателяПоСсылке(Показатели, Показатель);
	Если ЗначениеПоказателя = Неопределено Тогда
		ЗначениеПоказателя = 0;
	КонецЕсли;
	ЗначенияПоИдентификатору.Вставить(ИдентификаторПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Процедура РассчитатьРезультатНачисленияПоФормуле(Строка, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, ЕстьПоказателиТерриторийУсловийТруда = Ложь)
	
	Если Не НастройкиУчета.ИспользоватьТерриторииУсловияТруда Тогда
		Строка.Результат = РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, Строка);
		Возврат;
	КонецЕсли;
	
	Если Строка.ТерриторииУсловияТруда.Количество() = 0 Тогда
		Строка.Результат = РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, Строка);
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьПоказателиТерриторийУсловийТруда Тогда
		Строка.Результат = РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, Строка);
		РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
		Возврат;
	КонецЕсли;
		
	// Если показатели есть, то результат является суммой отдельно рассчитанных строк распределения.
	// Последовательно повторяем расчет для каждой строки распределения, подставляя значения определяемых показателей.
	// Результат расчета будет суммой результата распределения.
	Строка.Результат = 0;
	Индекс = 0;
	Для Каждого СтрокаРаспределения Из Строка.ТерриторииУсловияТруда Цикл
		ИсходныеДанныеТерритории = Новый Структура;
		// Заполняем показатели строки начисления.
		Для Каждого КлючИЗначение Из ИсходныеДанные Цикл
			ИсходныеДанныеТерритории.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		// Если в конкретной строке распределения определено значение показателя по территории или условиям труда, 
		// то подставляем его в исходные данные и выполняем расчет.
		Для Каждого СтрокаПоказателя Из СтрокаРаспределения.Показатели Цикл
			ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(СтрокаПоказателя.Показатель);
			ИсходныеДанныеТерритории.Вставить(ИдентификаторПоказателя, СтрокаПоказателя.Значение);
		КонецЦикла;
		СтрокаРаспределения.Результат = РезультатПоФормуле(ИсходныеДанныеТерритории, ФормулаДляВыполнения, ФормулаДляПредставления, Строка);
		СтрокаРаспределения.Результат = СтрокаРаспределения.Результат * СтрокаРаспределения.ДоляРаспределения;
		Строка.Результат = Строка.Результат + СтрокаРаспределения.Результат;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьУдержанияПоФормуле(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПоказателиУдержаний.Ссылка.ФормулаРасчетаДляВыполнения КАК ФормулаДляВыполнения,
		|	ПоказателиУдержаний.Ссылка.ФормулаРасчета КАК ФормулаДляПредставления,
		|	СправочникПоказатели.Ссылка КАК Показатель,
		|	СправочникПоказатели.Идентификатор КАК ИдентификаторПоказателя
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.Ссылка = Удержания.ВидРасчета)
		|			И (ПоказателиУдержаний.Ссылка.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (ПоказателиУдержаний.Ссылка.ИспользуетФормулу = ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК СправочникПоказатели
		|		ПО (СправочникПоказатели.Ссылка = ПоказателиУдержаний.Показатель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПогашениеЗадолженности = Обработки.МенеджерРасчетаЗарплаты.ОснованияПогашенияЗадолженности(МенеджерВременныхТаблиц);
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если РасчетУдержанияЗафиксирован(Строка.ЗаписьРасчета) Тогда
			Строка.Результат = Строка.ЗаписьРасчета.Результат;
			Продолжить;
		КонецЕсли;
		ИсходныеДанные = Новый Структура;
		Пока Выборка.Следующий() Цикл
			ЗначениеПоказателя = ЗначениеПоказателяПоСсылке(Строка.Показатели, Выборка.Показатель);
			Если ЗначениеПоказателя = Неопределено Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;
			ИсходныеДанные.Вставить(Выборка.ИдентификаторПоказателя, ЗначениеПоказателя);
		КонецЦикла;
		РассчитатьРезультатУдержанияПоФормуле(Строка, ИсходныеДанные, Выборка.ФормулаДляВыполнения, Выборка.ФормулаДляПредставления);
		// Если удержание добавлено только для погашения задолженности - обнуляем результат
		ТолькоЗадолженность = ПогашениеЗадолженности.Найти(Строка.ДокументОснование) <> Неопределено;
		Если ТолькоЗадолженность Тогда
			Строка.Результат = 0;
		КонецЕсли;
		Строка.Результат = Строка.Результат + Строка.Задолженность;
		Строка.ЗаписьРасчета.Результат = Строка.Результат;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьРезультатУдержанияПоФормуле(Строка, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления)
	Строка.Результат = РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, Строка, "Удержание");
КонецПроцедуры

Процедура РассчитатьУдержанияФиксированнойСуммой(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.ВидРасчета)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (ВидыРасчета.Рассчитывается = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Если РасчетУдержанияЗафиксирован(Строка.ЗаписьРасчета) Тогда
			Продолжить;
		КонецЕсли;
		Строка.Результат = Строка.Результат + Строка.Задолженность;
		Строка.ЗаписьРасчета.Результат = Строка.Результат;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеПоказателяПоСсылке(Показатели, Показатель)
	
	Возврат РасчетЗарплатыРасширенный.ЗначениеПоказателяПоСсылке(Показатели, Показатель);

КонецФункции

Функция ЗначениеПоказателяПоИдентификатору(Показатели, Идентификатор)
	
	Показатель = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору(Идентификатор);
	Возврат РасчетЗарплатыРасширенный.ЗначениеПоказателяПоСсылке(Показатели, Показатель);
	
КонецФункции

Функция ЕслиНеопределено(ИсходноеЗначение, ЗначениеПоУмолчанию)
	
	Если ИсходноеЗначение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ИсходноеЗначение;
	
КонецФункции

Функция РезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ИмяПоляВидРасчета = "Начисление")
	
	ФормулаДляВычисления = СтрЗаменить(ФормулаДляВыполнения, "ИсходныеДанные.", "Параметры.");
	
	Попытка 
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаДляВычисления, ИсходныеДанные);
	Исключение
		Если Не ВызыватьИсключение Тогда
			Возврат 0;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При расчете начисления «%1» за %5 для сотрудника %2 возникла ошибка: %4
					  |Формула, используемая при расчете: %3';
					  |en = 'An error occurred while calculating the ""%1"" earning for employee %2 for %5: %4
					  |Formula used during the calculation: %3 '"),
				СтрокаРасчета[ИмяПоляВидРасчета], 
				СтрокаРасчета.ФизическоеЛицо, 
				ФормулаДляПредставления, 
				ИнформацияОбОшибке().Описание, 
				Формат(СтрокаРасчета.ДатаНачала, "ДФ='ММММ гггг'"));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область РасчетНачисленийПредопределеннымСпособом

Процедура РассчитатьСтрокиНачисленийПредопределеннымСпособом(СпособРасчета, СтрокиРасчета)
	
	СтрокиНабора = СтрокиНабораНачисленияПоИдентфикаторам();
	
	РассчитатьДоплатуДоСреднегоЗаработка(СпособРасчета, СтрокиРасчета);
	РассчитатьДоплатуДоСреднегоЗаработкаФСС(СпособРасчета, СтрокиРасчета);
	РассчитатьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни(СпособРасчета, СтрокиРасчета);
	
	УчетПособийСоциальногоСтрахованияРасширенный.РассчитатьПособиеПоСтрокамНабора(СпособРасчета, СтрокиРасчета, СтрокиНабора, УсловияОплатыПособий(), ДополнительныеСвойства);
	
	ПростоиСотрудников.РассчитатьОплатуПростояПоДаннымНабора(СпособРасчета, СтрокиРасчета, СтрокиНабораНачисленияПоИдентфикаторам(), ЭтотОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриРасчетеЗарплатыПредопределеннымСпособомПоДаннымНабора(СпособРасчета, СтрокиРасчета, ДанныеТекущегоНабораНачисления(), СтрокиНабора,  ИсключаемыйРегистратор);
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйПереопределяемый.РассчитатьСтрокуПредопределеннымСпособом(СпособРасчета, СтрокиРасчета);	
КонецПроцедуры

#Область ДоплатаДоСреднегоЗаработка

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСреднегоЗаработка.
//
Процедура РассчитатьДоплатуДоСреднегоЗаработка(СпособРасчета, СтрокиРасчета)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиРасчета Цикл
		СреднийЗаработокОбщий = ЕслиНеопределено(ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "СреднийЗаработокОбщий"), 0);
		ВремяВДняхЧасах = ЕслиНеопределено(ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "ВремяВДняхЧасах"), 0);
		РасчетнаяБаза = ЕслиНеопределено(ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБаза"), 0);
		Строка.Результат = Макс(СреднийЗаработокОбщий * ВремяВДняхЧасах - РасчетнаяБаза, 0);
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСреднегоЗаработкаФСС.
//
Процедура РассчитатьДоплатуДоСреднегоЗаработкаФСС(СпособРасчета, СтрокиРасчета)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиРасчета Цикл
		СреднийЗаработокФСС = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "СреднийЗаработокФСС");
		КалендарныеДни = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "КалендарныеДни");
		ПроцентДоплатыЗаДниНетрудоспособности = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "ПроцентДоплатыЗаДниНетрудоспособности");
		РасчетнаяБаза = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБаза");
		Строка.Результат = Макс(((СреднийЗаработокФСС * КалендарныеДни) * ПроцентДоплатыЗаДниНетрудоспособности / 100) - РасчетнаяБаза, 0);
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни.
//
Процедура РассчитатьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни(СпособРасчета, СтрокиРасчета)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиРасчета Цикл
		НормаДней = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "НормаДней");
		СохраняемоеДенежноеСодержание = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "СохраняемоеДенежноеСодержание");
		КоэффициентИндексацииСохраняемогоДенежногоСодержания = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "КоэффициентИндексацииСохраняемогоДенежногоСодержания");
		ВремяВДнях = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "ВремяВДнях");
		РасчетнаяБаза = ЗначениеПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБаза");
		Строка.Результат = 0;
		Если НормаДней <> 0 Тогда
			Строка.Результат = Макс(СохраняемоеДенежноеСодержание * КоэффициентИндексацииСохраняемогоДенежногоСодержания * ВремяВДнях / НормаДней - РасчетнаяБаза, 0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РасчетУдержанийПредопределеннымСпособом

Процедура РассчитатьУдержанияПредопределеннымСпособом(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	ВидыРасчета.СпособРасчета КАК СпособРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Удержания.ВидРасчета)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (ВидыРасчета.ИспользуетФормулу = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпособРасчета";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СпособРасчета") Цикл
		СтрокиПоСпособуРасчета = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
			Если РасчетУдержанияЗафиксирован(Строка.ЗаписьРасчета) Тогда
				Строка.Результат = Строка.ЗаписьРасчета.Результат;
				Продолжить;
			КонецЕсли;
			СтрокиПоСпособуРасчета.Добавить(Строка);
		КонецЦикла;
		РассчитатьСтрокиУдержанийПредопределеннымСпособом(Выборка.СпособРасчета, СтрокиПоСпособуРасчета);
		// Обновляем результат в наборе записей.
		Для Каждого Строка Из СтрокиПоСпособуРасчета Цикл
			Строка.ЗаписьРасчета.Результат = Строка.Результат;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьСтрокиУдержанийПредопределеннымСпособом(СпособРасчета, СтрокиРасчета)
	
	ИсполнительныеЛисты.РассчитатьУдержанияПоИсполнительнымЛистам(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор, МесяцНачисления);
	ИсполнительныеЛисты.РассчитатьВознагражденияПлатежныхАгентов(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор);
	
	РасчетЗарплатыРасширенныйПереопределяемый.РассчитатьСтрокуПредопределеннымСпособом(СпособРасчета, СтрокиРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеМетодыРасчета

// Определяет необходимость расчета результата
//
Функция РасчетНачисленияЗафиксирован(Строка)
	
	Если Строка.ФиксРасчет Или Строка.ФиксСторно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет необходимость расчета результата
//
Функция РасчетУдержанияЗафиксирован(Строка)
	
	Если Строка.ФиксРасчет Или Строка.ФиксСторно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаспределениеПоТерриториямУсловиямТруда

// Выполняется распределение результата расчета по территориям и условиям труда, в которых сотрудник был задействован в
// течение месяца.
//
Процедура ЗаполнитьТерриторииУсловияТруда(СтрокиПоИдентификатору)	
	Если Не НастройкиУчета.ИспользоватьТерриторииУсловияТруда Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательРайонныйКоэффициент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
	ПоказательНадбавкаЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	                                       
	ДанныеДляРаспределения = ДанныеДляРаспределенияПоТерритриямУсловиямТруда();
	СтруктураПоиска = Новый Структура("ИдентификаторСтроки");
	ДанныеДляРаспределения.Индексы.Добавить("ИдентификаторСтроки");
	
	ДанныеДляРаспределенияИтоги = ДанныеДляРаспределения.Скопировать();
	ДанныеДляРаспределенияИтоги.Свернуть("ИдентификаторСтроки", "Дни, Часы");
	
	ОтборТерриторий = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеДляРаспределения, "Территория", Истина);
	ОтборУсловийТруда = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеДляРаспределения, "УсловияТруда", Истина);
	
	СвойстваТерриторий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборТерриторий, "РайонныйКоэффициент");
	СвойстваУсловийТруда = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборУсловийТруда, "ПроцентНадбавкиЗаВредность");
	
	Для Каждого СтрокаИтогов Из ДанныеДляРаспределенияИтоги Цикл
		Если СтрокаИтогов.Дни = 0
			И СтрокаИтогов.Часы = 0 Тогда
			
			Продолжить;
		КонецЕсли;	
		
		СтрокаНачислений = СтрокиПоИдентификатору[СтрокаИтогов.ИдентификаторСтроки];
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНачислений.Начисление];
		
		СтруктураПоиска.ИдентификаторСтроки = СтрокаИтогов.ИдентификаторСтроки;
		СтрокиРаспределения = ДанныеДляРаспределения.НайтиСтроки(СтруктураПоиска);
		ТерриторииУсловияТруда = ТаблицаТерриторийУсловийТруда();
		СтрокаНачислений.ТерриторииУсловияТруда = ТерриторииУсловияТруда;
			
		ОбщийКоэффициент = 0;
		СтрокаСМаксимальынмКлэффициентом = Неопределено;
		МаксимальныйКоэффицент = 0;
		Для Каждого СтрокаДанныхРаспределения Из СтрокиРаспределения Цикл
			Если СтрокаДанныхРаспределения.Дни = 0
				И СтрокаДанныхРаспределения.Часы = 0 Тогда
				
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТерриторииУсловияТруда.Добавить();
			НоваяСтрока.Показатели = ТаблицаПоказателей();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхРаспределения); 
			Если СтрокаДанныхРаспределения.Часы <> 0 Тогда
				НоваяСтрока.ДоляРаспределения = СтрокаДанныхРаспределения.Часы / СтрокаИтогов.Часы;
			Иначе
				НоваяСтрока.ДоляРаспределения = СтрокаДанныхРаспределения.Дни / СтрокаИтогов.Дни;
			КонецЕсли;	
			ОбщийКоэффициент = ОбщийКоэффициент + НоваяСтрока.ДоляРаспределения;
			Если НоваяСтрока.ДоляРаспределения > МаксимальныйКоэффицент Тогда
				МаксимальныйКоэффицент = НоваяСтрока.ДоляРаспределения;
				СтрокаСМаксимальынмКлэффициентом = НоваяСтрока;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(НоваяСтрока.Территория) И ТребованияТекущегоНачисления.ТребуетсяПоказательРайонныйКоэффициент Тогда
				НоваяСтрокаПоказателя = НоваяСтрока.Показатели.Добавить();
				НоваяСтрокаПоказателя.ИдентификаторСтроки = СтрокаИтогов.ИдентификаторСтроки;
				НоваяСтрокаПоказателя.Показатель = ПоказательРайонныйКоэффициент;
				НоваяСтрокаПоказателя.Значение = СвойстваТерриторий[НоваяСтрока.Территория].РайонныйКоэффициент;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.УсловияТруда) И ТребованияТекущегоНачисления.ТребуетсяПоказательНадбавкаЗаВредность Тогда
				НоваяСтрокаПоказателя = НоваяСтрока.Показатели.Добавить();
				НоваяСтрокаПоказателя.ИдентификаторСтроки = СтрокаИтогов.ИдентификаторСтроки;
				НоваяСтрокаПоказателя.Показатель = ПоказательНадбавкаЗаВредность;
				НоваяСтрокаПоказателя.Значение = СвойстваУсловийТруда[НоваяСтрока.УсловияТруда].ПроцентНадбавкиЗаВредность;
			КонецЕсли;
		КонецЦикла;	
		
		СтрокаСМаксимальынмКлэффициентом.ДоляРаспределения = СтрокаСМаксимальынмКлэффициентом.ДоляРаспределения + (1 - ОбщийКоэффициент);
	КонецЦикла;	
КонецПроцедуры

Функция ДанныеДляРаспределенияПоТерритриямУсловиямТруда()		
	ДанныеДляРаспределения = Новый ТаблицаЗначений;
	ДанныеДляРаспределения.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ДанныеДляРаспределения.Колонки.Добавить("Территория", Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
	ДанныеДляРаспределения.Колонки.Добавить("УсловияТруда", Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
	ДанныеДляРаспределения.Колонки.Добавить("Дни", Новый ОписаниеТипов("Число"));
	ДанныеДляРаспределения.Колонки.Добавить("Часы", Новый ОписаниеТипов("Число"));
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ОтборДляПроверкиТерриторий = ОтборДляПроверкиТерриторий();
	ОтборДанныхОВремени = СтрукутраПоискаДанныхОВремени();
	
	ДанныеОВремени = ДанныеОВремениДляРаспределенияПоТерриториямУсловиямТруда();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеОВремени, ПоляПоискаРабочегоВремени());	
	
	КадровыеТерритории = ТерриторииСотрудников();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КадровыеТерритории, "Сотрудник");
	ОтборТерриторий = Новый Структура("Сотрудник");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеТекущегоНабора.ФПД, "Регистратор, НомерСтроки");
	ОтборФПД = Новый Структура("Регистратор, НомерСтроки");
	
	Для Каждого СтрокаНабора Из ДанныеТекущегоНабора.ТаблицаНабора Цикл
		Если СтрокаНабора.ФиксСторно
			Или СтрокаНабора.ФиксРасчет Тогда
			                                                      
			Продолжить;
		КонецЕсли;	
		
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		
		ЗаполнитьОтборДляПроверкиТерриторий(ОтборДляПроверкиТерриторий, СтрокаНабора);
		ИспользоватьКадровуюТерриторию = ДанныеОВремени.НайтиСтроки(ОтборДляПроверкиТерриторий).Количество() = 0;
		
		ЗаполнитьЗначенияСвойств(ОтборФПД, СтрокаНабора);
		СтрокиФПД = ДанныеТекущегоНабора.ФПД.НайтиСтроки(ОтборФПД);
		
		СтрокиРабочегоВремени = СтрокиДанныхОВремени(ДанныеОВремени, СтрокаНабора, ТребованияТекущегоНачисления, ОтборДанныхОВремени);
		
		КадровыеТерриторииСотруднирка = Неопределено;
		Если ИспользоватьКадровуюТерриторию Тогда
			ОтборТерриторий.Сотрудник = СтрокаНабора.Сотрудник;
			КадровыеТерриторииСотруднирка = КадровыеТерритории.НайтиСтроки(ОтборТерриторий);
		КонецЕсли;			                              
		
		ДобавитьСтрокиДляРаспределенияПоТерриторияУсловиям(
			ДанныеДляРаспределения, 
			СтрокаНабора.ИдентификаторСтроки, 
			СтрокиФПД, 
			ТребованияТекущегоНачисления, 
			СтрокиРабочегоВремени, 
			КадровыеТерриторииСотруднирка)
		
	КонецЦикла;	
	
	ДанныеДляРаспределения.Свернуть("ИдентификаторСтроки, Территория, УсловияТруда", "Дни, Часы");
	
	Возврат ДанныеДляРаспределения;
КонецФункции 	

Процедура ДобавитьСтрокиДляРаспределенияПоТерриторияУсловиям(ДанныеДляРаспределения, ИдентификаторСтрокиНабора, ПериодыФПД, ТребованияТекущегоНачисления, ДанныеОВремени, КадровыеТерритории = Неопределено)
	Для Каждого СтрокаФПД Из ПериодыФПД Цикл
		Для Каждого ТекущаяСтрокаВремени Из ДанныеОВремени Цикл
			Если ТекущаяСтрокаВремени.ДатаНачала >= СтрокаФПД.ПериодДействияНачало
				И ТекущаяСтрокаВремени.ДатаОкончания <= СтрокаФПД.ПериодДействияКонец Тогда 
				
				СтрокаДанныхДляРаспределения = ДанныеДляРаспределения.Добавить();
				СтрокаДанныхДляРаспределения.ИдентификаторСтроки = ИдентификаторСтрокиНабора;
				СтрокаДанныхДляРаспределения.УсловияТруда = ТекущаяСтрокаВремени.УсловияТруда;
				Если КадровыеТерритории = Неопределено Тогда
					СтрокаДанныхДляРаспределения.Территория = ТекущаяСтрокаВремени.Территория;
				Иначе
					СтрокаДанныхДляРаспределения.Территория = КадроваяТерриторияСотрудника(ТекущаяСтрокаВремени.ДатаНачала, КадровыеТерритории);
				КонецЕсли;	
				
				Если ТребованияТекущегоНачисления.РаспределятьПоКалендарнымДням Тогда
					СтрокаДанныхДляРаспределения.Дни = ТекущаяСтрокаВремени.ВсегоДней;
					СтрокаДанныхДляРаспределения.Часы = ТекущаяСтрокаВремени.ВсегоЧасов;
				ИначеЕсли ТребованияТекущегоНачисления.УчитыватьВидВремениПоУмолчанию Тогда
					СтрокаДанныхДляРаспределения.Дни = ТекущаяСтрокаВремени.ДнейВключаемыхВНорму;
					СтрокаДанныхДляРаспределения.Часы = ТекущаяСтрокаВремени.ЧасовВключаемыхВНорму;		
				Иначе
					СтрокаДанныхДляРаспределения.Дни = ТекущаяСтрокаВремени.Дней;
					СтрокаДанныхДляРаспределения.Часы = ТекущаяСтрокаВремени.Часов;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	 	 	
КонецПроцедуры
	
Функция КадроваяТерриторияСотрудника(Дата, ДанныеОТерриториях)
	Для Каждого СтрокаДанныхОТерриториях Из ДанныеОТерриториях Цикл
		Если ОбщегоНазначенияБЗК.ДатаВИнтервале(Дата, СтрокаДанныхОТерриториях.ДатаНачала, СтрокаДанныхОТерриториях.ДатаОкончания) Тогда
			Возврат СтрокаДанныхОТерриториях.Территория;
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат Справочники.ТерриторииВыполненияРабот.ПустаяСсылка();
КонецФункции	

Функция ДанныеОВремениДляРаспределенияПоТерриториямУсловиямТруда()
	РабочееВремя = РабочееВремя();

	ОтборСтрокРабочегоВремени = Новый Структура("РазныеТерриторииУсловияТрудаЗаДень", Ложь);
	
	СтрокиCЗаполненнымиПолямиРаспределения = РабочееВремя.НайтиСтроки(ОтборСтрокРабочегоВремени);
	
	Если СтрокиCЗаполненнымиПолямиРаспределения.Количество() = РабочееВремя.Количество() Тогда
		Возврат РабочееВремя;
	КонецЕсли;
	
	ОтборСтрокРабочегоВремени.РазныеТерриторииУсловияТрудаЗаДень = Истина;
	СтрокиДляУточнения = РабочееВремя.НайтиСтроки(ОтборСтрокРабочегоВремени); 
	
	ИсходныйФильтрРабочегоВремени = ФильтрПолученияРабочегоВремени();
	
	ПоляПоиска = "ИсточникДанныхФактическогоВремени, ОбщийГрафик, ПериодРегистрацииФактическогоВремени, Месяц";
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ИсходныйФильтрРабочегоВремени, ПоляПоиска);
	ОтборСтрокИсходногоФильтра = Новый Структура(ПоляПоиска);
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	ФильтрРабочегоВремени = МенеджерУчетаВремени.НовыйФильтрПолученияЗарегистрированногоВремени(Тип("ПланВидовРасчетаСсылка.Начисления"));
	ФильтрРабочегоВремени.Индексы.Добавить(ПоляПоиска);
	
	Для Каждого УточняемаяСтрока Из СтрокиДляУточнения Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрокИсходногоФильтра, УточняемаяСтрока);
		Если ФильтрРабочегоВремени.НайтиСтроки(ОтборСтрокИсходногоФильтра).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокиИсходногоФильтра = ИсходныйФильтрРабочегоВремени.НайтиСтроки(ОтборСтрокИсходногоФильтра);
		Для Каждого СтрокаИсходногоФильтра Из СтрокиИсходногоФильтра Цикл
			ЗаполнитьЗначенияСвойств(ФильтрРабочегоВремени.Добавить(), СтрокаИсходногоФильтра);
		КонецЦикла;	
	КонецЦикла;	
	
	ФильтрРабочегоВремени.ЗаполнитьЗначения(Ложь, "ПолучатьСверхурочныеЧасы");
	ФильтрРабочегоВремени.ЗаполнитьЗначения(Ложь, "ПолучатьВсеРабочееВремя");
	ФильтрРабочегоВремени.ЗаполнитьЗначения(Ложь, "ПолучатьОтработанныеСмены");
	
	ОписаниеТаблицыВидовВремени = МенеджерУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеТаблицыВидовВремени.ИмяТаблицы = "ПланВидовРасчета.Начисления.ВидыВремени";
	ОписаниеТаблицыВидовВремени.ИмяПоляКлюч = "Ссылка";
	ОписаниеТаблицыВидовВремени.ИмяПоляВидВремени = "ВидВремени";	
	
	ДанныеОВремени = МенеджерУчетаВремени.РабочееВремяПоИсточникамДанных(
		ФильтрРабочегоВремени, 
		ОписаниеТаблицыВидовВремени, 
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиCЗаполненнымиПолямиРаспределения, ДанныеОВремени);	
	
	Возврат ДанныеОВремени;
КонецФункции	

Процедура РаспределитьСтрокиПоТерриториямУсловиямТруда(СтрокиРасчета)
	
	Для Каждого Строка Из СтрокиРасчета Цикл
		РаспределитьСтрокуПоТерриториямУсловиямТруда(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьСтрокуПоТерриториямУсловиямТруда(СтрокаРасчета)
	
	Если Не НастройкиУчета.ИспользоватьТерриторииУсловияТруда Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчета.ФиксСторно Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчета.ТерриторииУсловияТруда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчета.Результат = 0 Тогда
		СтрокаРасчета.ТерриторииУсловияТруда.ЗаполнитьЗначения(0, "Результат");
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчета.ТерриторииУсловияТруда.Количество() = 1 Тогда
		ЗаполнитьРезультатТерриторииУсловийТруда(СтрокаРасчета.Результат, СтрокаРасчета.ТерриторииУсловияТруда[0], СтрокаРасчета);
		Возврат;
	КонецЕсли;
		
	Индекс = 0;
	Пока Индекс < СтрокаРасчета.ТерриторииУсловияТруда.Количество() Цикл
		ЗаполнитьРезультатТерриторииУсловийТруда(
			СтрокаРасчета.Результат * СтрокаРасчета.ТерриторииУсловияТруда[Индекс].ДоляРаспределения, 
			СтрокаРасчета.ТерриторииУсловияТруда[Индекс], 
			СтрокаРасчета);
		Индекс = Индекс + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьРезультатТерриторииУсловийТруда(Результат, СтрокаТерриторийУсловийТруда, СтрокаРасчета)
	
	СтрокаТерриторийУсловийТруда.Результат = Результат;
	
	Если СтрокаРасчета.Сторно Тогда
		СтрокаТерриторийУсловийТруда.Результат = - Результат;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаТерриторийУсловийТруда()
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаТерриторийУсловийТруда();
	
КонецФункции

#КонецОбласти

#Область РасчетУдержаний

Процедура ЗавершитьРасчетУдержаний(УдалитьВТ, СтрокиПоИдентификатору)
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаМесяца.Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВычеркнутьНулевыеУдержания(СтрокиПоИдентификатору);
	
	ЗавершитьПересчетУдержаний();
	
КонецПроцедуры

Процедура СоздатьВТУдержанныеСуммы()
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоСотрудникам");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.Организация,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ВидРасчета,
		|	Удержания.ДокументОснование
		|ПОМЕСТИТЬ ВТФильтр
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	&РассчитыватьТолькоПоТекущемуДокументу";
	
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		ТекстЗамены = "(Удержания.ВидРасчета.ТребуетсяРасчетБазы = ЛОЖЬ
			|	И Удержания.ВидРасчета.ТребуетсяРасчетБазыИсполнительногоЛиста = ЛОЖЬ)
			|	ИЛИ (Удержания.ВидРасчета.УдерживаетсяВЦеломЗаМесяц = ИСТИНА)
			|	ИЛИ (Удержания.ВидРасчета.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РассчитыватьТолькоПоТекущемуДокументу", ТекстЗамены);
	
	Запрос.Выполнить();           
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдержаноЗаМесяц.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
	|	УдержаноЗаМесяц.Организация КАК Организация,
	|	УдержаноЗаМесяц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдержаноЗаМесяц.ВидРасчета КАК ВидРасчета,
	|	УдержаноЗаМесяц.ДокументОснование КАК ДокументОснование,
	|	СУММА(УдержаноЗаМесяц.Результат) КАК Сумма
	|ПОМЕСТИТЬ ВТУдержанныеСуммы
	|ИЗ
	|	РегистрРасчета.Удержания КАК УдержаноЗаМесяц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтр КАК Удержания
	|		ПО УдержаноЗаМесяц.Организация = Удержания.Организация
	|			И УдержаноЗаМесяц.ФизическоеЛицо = Удержания.ФизическоеЛицо
	|			И УдержаноЗаМесяц.ВидРасчета = Удержания.ВидРасчета
	|			И УдержаноЗаМесяц.ДокументОснование = Удержания.ДокументОснование
	|			И НАЧАЛОПЕРИОДА(УдержаноЗаМесяц.БазовыйПериодНачало, МЕСЯЦ) = Удержания.Месяц
	|			И (УдержаноЗаМесяц.Регистратор <> &ИсключаемыйРегистратор)
	|			И (УдержаноЗаМесяц.Регистратор <> &ИсправленныйДокумент)
	|			И (НЕ УдержаноЗаМесяц.ОграничениеВзыскания)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(УдержаноЗаМесяц.БазовыйПериодНачало, МЕСЯЦ),
	|	УдержаноЗаМесяц.Организация,
	|	УдержаноЗаМесяц.ФизическоеЛицо,
	|	УдержаноЗаМесяц.ВидРасчета,
	|	УдержаноЗаМесяц.ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	УничтожитьВТ("ВТФильтр");
	
КонецПроцедуры

Процедура ВычеркнутьНулевыеУдержания(СтрокиПоИдентификатору)
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораУдержания();
	
	УдаляемыеСтроки = ДанныеТекущегоНабора.ТаблицаНабора.НайтиСтроки(Новый Структура("Результат", 0));
	
	Для Каждого СтрокаНабора Из УдаляемыеСтроки Цикл 
		Строка = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		Если Строка.ФиксСтрока = Истина Тогда
			Продолжить;
		КонецЕсли;
		СтрокиПоИдентификатору.Удалить(СтрокаНабора.ИдентификаторСтроки);
		СтрокаСоответствия = НастройкиПересчета.СоответствиеСтрокУдержаний[Строка];
		Если СтрокаСоответствия <> Неопределено Тогда
			Таблица = СтрокаСоответствия.Владелец();
			Таблица.Удалить(СтрокаСоответствия);
			НастройкиПересчета.СоответствиеСтрокУдержаний.Удалить(Строка);
		КонецЕсли;
		Таблица = Строка.Владелец();
		Таблица.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейУдержаний(ТаблицаУдержаний)
	ИзветсыеПоказатели = ИзвестныеПоказателиУдержаний(ТаблицаУдержаний);
	
	ЗаполнитьЗначенияИзвестныхПоказателей(ИзветсыеПоказатели, Ложь);
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейУдержанийОчередности(ТаблицаНабораУдержания, ОчередностьРасчета, СтрокиПоИдентификатору)
	
	РассчитатьЗначенияПоказателяРасчетнаяБазаСтраховыеВзносы(ТаблицаНабораУдержания, ОчередностьРасчета, СтрокиПоИдентификатору);
	РассчитатьЗначениеПоказателяРасчетнаяБазаУдержаний(ТаблицаНабораУдержания, ОчередностьРасчета, СтрокиПоИдентификатору);

КонецПроцедуры

Процедура РассчитатьУдержанияОчередности(ТаблицаНабораУдержания, СтрокиПоИдентификатору, ТребованияУдержаний, Отбор = Неопределено)
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетУдержанийОчередности";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	&УсловиеОтбора
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередностьРасчета";
	ЗаполнитьУсловиеОтбораВЗапросеОтбораУдержанийПоОчередности(Запрос, Отбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РассчитатьЗначенияПоказателейУдержанийОчередности(ТаблицаНабораУдержания, Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		РассчитатьУдержанияПоФормуле(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		РассчитатьУдержанияФиксированнойСуммой(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		РассчитатьУдержанияПредопределеннымСпособом(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		УчестьРанееУдержанныеСуммы(Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		ПерерасчетЗарплаты.ЗаполнитьРезультатыФиксСторноУдержаний(МенеджерВременныхТаблиц, Выборка.ОчередностьРасчета, СтрокиПоИдентификатору);
		ЗарегистрироватьРезультатыРасчетаОчередностиУдержаний(ТаблицаНабораУдержания, Выборка.ОчередностьРасчета, ТребованияУдержаний);
	КонецЦикла;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ЗаполнитьУсловиеОтбораВЗапросеОтбораУдержанийПоОчередности(Запрос, Отбор)
	
	Если Отбор = Неопределено Тогда
		УсловиеОтбора = "ИСТИНА";
	Иначе
		УсловиеОтбора = "";
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Если Не ПустаяСтрока(УсловиеОтбора) Тогда
				УсловиеОтбора = УсловиеОтбора + " И ";
			КонецЕсли;
			ИмяПоля = СтрЗаменить(СтрокаОтбора.ИмяПоля, ".", "_");
			Если ТипЗнч(СтрокаОтбора.Значение) = Тип("Массив") Тогда
				УсловиеОтбора = УсловиеОтбора + "Удержания." + СтрокаОтбора.ИмяПоля + " " + СтрокаОтбора.ВидСравнения + " (&" + ИмяПоля + ")";
			Иначе
				УсловиеОтбора = УсловиеОтбора + "Удержания." + СтрокаОтбора.ИмяПоля + " " + СтрокаОтбора.ВидСравнения + " &" + ИмяПоля;
			КонецЕсли;
			Запрос.УстановитьПараметр(ИмяПоля, СтрокаОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
КонецПроцедуры

Функция ОтборВключаяКатегории(Категории)
	
	Отбор = Новый Массив;
	
	ЭлементОтбора = Новый Структура("ИмяПоля, ВидСравнения, Значение");
	ЭлементОтбора.ИмяПоля = "ВидРасчета.КатегорияУдержания";
	ЭлементОтбора.ВидСравнения = "В";
	ЭлементОтбора.Значение = Категории;
	
	Отбор.Добавить(ЭлементОтбора);
	
	Возврат Отбор;
	
КонецФункции

Функция ОтборИсключаяКатегории(Категории)
	
	Отбор = Новый Массив;
	
	ЭлементОтбора = Новый Структура("ИмяПоля, ВидСравнения, Значение");
	ЭлементОтбора.ИмяПоля = "ВидРасчета.КатегорияУдержания";
	ЭлементОтбора.ВидСравнения = "НЕ В";
	ЭлементОтбора.Значение = Категории;
	
	Отбор.Добавить(ЭлементОтбора);
	
	Возврат Отбор;
	
КонецФункции

Процедура УчестьРанееУдержанныеСуммы(ОчередностьРасчета, СтрокиПоИдентификатору)
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Удержания.Организация КАК Организация,
		|	Удержания.ВидРасчета КАК ВидРасчета,
		|	Удержания.ДокументОснование КАК ДокументОснование,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	УдержанныеСуммы.Сумма КАК Сумма,
		|	Удержания.ВидРасчета.КатегорияУдержания КАК КатегорияУдержания
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанныеСуммы КАК УдержанныеСуммы
		|		ПО (УдержанныеСуммы.ФизическоеЛицо = Удержания.ФизическоеЛицо)
		|			И (УдержанныеСуммы.Организация = Удержания.Организация)
		|			И (УдержанныеСуммы.ВидРасчета = Удержания.ВидРасчета)
		|			И (УдержанныеСуммы.ДокументОснование = Удержания.ДокументОснование)
		|			И (УдержанныеСуммы.Месяц = НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ))
		|			И (Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета)
		|			И (НЕ Удержания.ФиксРасчет)
		|			И (НЕ Удержания.ФиксСторно)
		|ГДЕ
		|	&РассчитыватьТолькоПоТекущемуДокументу
		|
		|УПОРЯДОЧИТЬ ПО
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ),
		|	Удержания.Организация,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ВидРасчета,
		|	Удержания.ДокументОснование";
	
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		ТекстЗамены = "(Удержания.ВидРасчета.ТребуетсяРасчетБазы = ЛОЖЬ
		|	И Удержания.ВидРасчета.ТребуетсяРасчетБазыИсполнительногоЛиста = ЛОЖЬ)
		|	ИЛИ (Удержания.ВидРасчета.УдерживаетсяВЦеломЗаМесяц = ИСТИНА)
		|	ИЛИ (Удержания.ВидРасчета.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РассчитыватьТолькоПоТекущемуДокументу", ТекстЗамены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
						РанееУдержано = Выборка.Сумма;
						Пока Выборка.Следующий() Цикл
							Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
							
							СтандартнаяОбработка = Истина;
							ПриЗачетеРанееУдержанныхСуммм(
								Строка, 
								Выборка.КатегорияУдержания, 
								РанееУдержано, 
								НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу,
								СтандартнаяОбработка);
								
						    Если СтандартнаяОбработка Тогда
								Строка.Результат = Строка.Результат - РанееУдержано;
								Строка.ЗаписьРасчета.Результат = Строка.Результат;
								РанееУдержано = 0;
							КонецЕсли;	
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗачетеРанееУдержанныхСуммм(СтрокаУдержаний, КатегорияУдержания, РанееУдержано, РассчитыватьТолькоПоТекущемуДокументу, СтандартнаяОбработка)
	ИсполнительныеЛисты.ПриЗачетеРанееУдержанныхСуммм(СтрокаУдержаний, КатегорияУдержания, РанееУдержано, РассчитыватьТолькоПоТекущемуДокументу, СтандартнаяОбработка);		
КонецПроцедуры	


Процедура ЗарегистрироватьРезультатыРасчетаОчередностиУдержаний(ТаблицаНабораУдержания, ОчередностьРасчета, ТребованияУдержаний)
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаНабораУдержания, "ВТРегистрРасчета_Удержания", Истина);
	ЗарегистрироватьСоциальныеВычетыНДФЛОчередности(ОчередностьРасчета, ТребованияУдержаний);
	
	ИсполнительныеЛисты.ЗарегистрироватьРасчетУдержанийПоИсполнительнымДокументам(ОчередностьРасчета, НаборыЗаписей, МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗарегистрироватьСоциальныеВычетыНДФЛОчередности(ОчередностьРасчета, ТребованияУдержаний)
	
	Если Не НастройкиРасчета.РассчитыватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТребованияУдержаний.ТребуетсяРегистрацияСоциальныхВычетовНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("КатегорииУдержанийВлияющихНаНДФЛ", ПланыВидовРасчета.Удержания.КатегорииУдержанийВлияющихНаНДФЛ());
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо,
		|	Удержания.ВидРасчета.КатегорияУдержания КАК Категория,
		|	Удержания.ВидРасчета КАК Удержание,
		|	Удержания.ДокументОснование,
		|	Удержания.Результат
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
		|	И Удержания.ВидРасчета.КатегорияУдержания В(&КатегорииУдержанийВлияющихНаНДФЛ)";
		
	ЗарегистрироватьСоциальныеВычетыНДФЛ(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗарегистрироватьСоциальныеВычетыНДФЛ(Удержания)
	
	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Удержания.Колонки["Результат"].Имя = "Сумма";
	Удержания.Колонки["Категория"].Имя = "КатегорияУдержания";
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНДФЛРасширенный.СформироватьСоциальныеВычетыПоУдержаниям(
		ИсключаемыйРегистратор, 
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		КонецМесяца(МесяцНачисления),
		МесяцНачисления, 
		Удержания, 
		Ложь, 
		НастройкиНДФЛ.ОкончательныйРасчет);
		
КонецПроцедуры

Процедура ОграничитьРазмерУдержанийДоПредела(УдалитьВТ, СтрокиПоИдентификатору)
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредельныеСуммыУдержаний = ПредельныеСуммыУдержаний();
	
	ДанныеТеукщегоНабора = ДанныеТекущегоНабораУдержания();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПредельныеСуммыУдержаний, "ФизическоеЛицо, ДокументОснование, Удержание");
	Отбор = Новый Структура("ФизическоеЛицо, ДокументОснование, Удержание");
	
	ДанныеТеукщегоНабора.ТаблицаНабора.Сортировать("ФизическоеЛицо, ДокументОснование, БазовыйПериодНачало", Новый СравнениеЗначений);
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаНабора Из ДанныеТеукщегоНабора.ТаблицаНабора Цикл		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаНабора);
		Отбор.Удержание = СтрокаНабора.ВидРасчета;
		СтрокиПредела = ПредельныеСуммыУдержаний.НайтиСтроки(Отбор);
		
		Если СтрокиПредела.Количество() = 0 Тогда
			ПредыдущаяСтрока = СтрокаНабора;
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущаяСтрока = Неопределено
			Или ПредыдущаяСтрока.ФизическоеЛицо = СтрокаНабора.ФизическоеЛицо
			Или ПредыдущаяСтрока.ДокументОснование = СтрокаНабора.ДокументОснование Тогда
			
			Остаток = СтрокиПредела[0].Сумма;
			
			СтрокаУдержаний = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
			СтрокаУдержаний.Результат = Мин(СтрокаУдержаний.Результат - СтрокаУдержаний.Задолженность, Остаток);
			Остаток = Остаток - СтрокаУдержаний.Результат;
			СтрокаУдержаний.Результат = СтрокаУдержаний.Результат + СтрокаУдержаний.Задолженность;
			СтрокаУдержаний.ЗаписьРасчета.Результат = СтрокаУдержаний.Результат;
			
			НоваяСтрока = НаборыЗаписей.УдержанияДоПределаПоСотрудникам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Сумма = СтрокаУдержаний.Результат;
			НоваяСтрока.Период = МесяцНачисления;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;		
	КонецЦикла;	
			
	УдалитьВТ.Добавить("ВТПредельныеСуммыУдержанийСотрудников");
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ДанныеТеукщегоНабора.ТаблицаНабора, "ВТРегистрРасчета_Удержания", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьЗадолженностьПоУдержаниям(СтрокиПоИдентификатору)
	
	Если Не НастройкиРасчета.РассчитыватьУдержания Тогда 
		Возврат;
	КонецЕсли;
	
	Если НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты") Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеНабораУдержания = ДанныеТекущегоНабораУдержания();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеНабораУдержания.ТаблицаНабора, "ВидРасчета, ДокументОснование");
	Отбор = Новый Структура("ВидРасчета, ДокументОснование");
	
	Задолженность = ЗадолженностьПоУдержаниямФизическихЛиц();
	
	Для Каждого СтрокаЗадолженнсти Из Задолженность Цикл
		Отбор.ВидРасчета = СтрокаЗадолженнсти.Удержание;
		Отбор.ДокументОснование = СтрокаЗадолженнсти.ДокументОснование;
		СтрокиУдержаний = ДанныеНабораУдержания.ТаблицаНабора.Скопировать(Отбор, "ИдентификаторСтроки, БазовыйПериодНачало");
		СтрокиУдержаний.Сортировать("БазовыйПериодНачало УБЫВ, ИдентификаторСтроки");
		
		Если СтрокиУдержаний.Количество() > 0 Тогда
			СтрокаТаблицыУдержаний = СтрокиПоИдентификатору[СтрокиУдержаний[0].ИдентификаторСтроки];
			СтрокаТаблицыУдержаний.Задолженность = СтрокаЗадолженнсти.Сумма;
		КонецЕсли;		
	КонецЦикла;		
КонецПроцедуры

#КонецОбласти

#Область ПересчетЗарплаты

Процедура ЗаполнитьТаблицуПересчетаФизическимиЛицами()
	
	УсловиеПроверки = НастройкиРасчета.Сотрудники <> Неопределено Или НастройкиРасчета.ФизическиеЛица <> Неопределено;
	ТекстСообщения = НСтр("ru = 'Заполнение НастройкиРасчета.Сотрудники или НастройкиРасчета.ФизическиеЛица является обязательным.';
							|en = 'НастройкиРасчета.Сотрудники or НастройкиРасчета.ФизическиеЛица is required.'");
	ОбщегоНазначенияКлиентСервер.Проверить(УсловиеПроверки, ТекстСообщения, "ЗаполнитьТаблицыПересчетаПриПересчетеНДФЛ");
	
	Если НастройкиРасчета.Сотрудники = Неопределено Тогда
		ФизическиеЛица = НастройкиРасчета.ФизическиеЛица;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ФизическиеЛица = КадровыйУчет.ФизическиеЛицаСотрудников(НастройкиРасчета.Сотрудники);
		УстановитьПривилегированныйРежим(Ложь);
		Если НастройкиРасчета.ФизическиеЛица <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛица, НастройкиРасчета.ФизическиеЛица, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ПересчетФизическихЛиц, ФизическиеЛица, "ФизическоеЛицо");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыПересчетаПриПересчетеНДФЛ()
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	
	ЗаполнитьТаблицуПересчетаФизическимиЛицами();
	
	Для Каждого НастройкаПересчета Из ПересчетФизическихЛиц Цикл
		ЗаполнитьСтрокуПересчетаПоНДФЛ(НастройкаПересчета);
		НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
	КонецЦикла;
	
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыПересчетаПриПересчетеВзносов()
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	
	ЗаполнитьТаблицуПересчетаФизическимиЛицами();
	
	Для Каждого НастройкаПересчета Из ПересчетФизическихЛиц Цикл
		ЗаполнитьСтрокуПересчетаПоВзносам(НастройкаПересчета);
		НастройкаПересчета.ПересчитыватьВзносы = Истина;
	КонецЦикла;
	
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
КонецПроцедуры

Процедура ПроверитьИсточникИзменений(ИсточникИзменений)
	
	Если Не Зарплата.Свойство(ИсточникИзменений.ИмяКоллекции) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Указано несуществующее имя коллекции (%1) в таблице источников изменений.';
				|en = 'Non-existing name of collection (%1) is specified in the change source table.'"), 
			ИсточникИзменений.ИмяКоллекции);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СотрудникОбязателен = Новый Массив;
	СотрудникОбязателен.Добавить("Начисления");
	СотрудникОбязателен.Добавить("ДоговорыПодряда");
	Если СотрудникОбязателен.Найти(ИсточникИзменений.ИмяКоллекции) <> Неопределено 
		И Не ЗначениеЗаполнено(ИсточникИзменений.Сотрудник) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен сотрудник в таблице источников изменений. 
                  |Для коллекции %1 заполнение сотрудника является обязательным.';
                  |en = 'Employee is not populated in the change source table.
                  |Employee is required for the %1 collection.'"), 
			ИсточникИзменений.ИмяКоллекции);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ВидРасчетаОбязателен = Новый Массив;
	ВидРасчетаОбязателен.Добавить("Удержания");
	Если ВидРасчетаОбязателен.Найти(ИсточникИзменений.ИмяКоллекции) <> Неопределено 
		И Не ЗначениеЗаполнено(ИсточникИзменений.ВидРасчета) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен вид расчета в таблице источников изменений. 
                  |Для коллекции %1 заполнение вида расчета является обязательным.';
                  |en = 'Calculation kind is not populated in the change source table.
                  |Calculation kind is required for the %1 collection.'"), 
			ИсточникИзменений.ИмяКоллекции);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыПересчетаПоИсточникамИзменений()
	
	Если НастройкиПересчета.ИсточникИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПересчета.ВыполнятьПересчет = Истина;
	
	Для Каждого СтрокаИзменений Из НастройкиПересчета.ИсточникИзменений Цикл
		ЗаполнитьНастройкуПересчетаПоНачислениям(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоДоговорамПодряда(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоУдержаниям(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоНДФЛ(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоВзносам(СтрокаИзменений);
		ЗаполнитьНастройкуПересчетаПоПогашениюЗаймов(СтрокаИзменений);
	КонецЦикла;
	
	ПересчетСотрудников.Свернуть("Сотрудник", СтрСоединить(ИменаНастроекПересчетаСотрудников(), ","));
	ПересчетФизическихЛиц.Свернуть("ФизическоеЛицо", СтрСоединить(ИменаНастроекПересчетаФизическихЛиц(), ","));
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоНачислениям(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "Начисления" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетСотрудников.Добавить();
	НастройкаПересчета.Сотрудник = СтрокаИзменений.Сотрудник;
	НастройкаПересчета.ПересчитыватьНачисления = Истина;
	НастройкаПересчета.ПересчитыватьДоговорыПодряда = Ложь;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	НастройкаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	НастройкаПересчета.ПересчитыватьВзносы = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтВзносов = Истина;
	НастройкаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоДоговорамПодряда(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "ДоговорыПодряда" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетСотрудников.Добавить();
	НастройкаПересчета.Сотрудник = СтрокаИзменений.Сотрудник;
	НастройкаПересчета.ПересчитыватьНачисления = Ложь;
	НастройкаПересчета.ПересчитыватьДоговорыПодряда = Истина;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	НастройкаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	НастройкаПересчета.ПересчитыватьВзносы = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтВзносов = Истина;
	НастройкаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоУдержаниям(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "Удержания" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	НастройкаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	НастройкаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;	
	Если УдержаниеВлияетНаНДФЛ(СтрокаИзменений.ВидРасчета) Тогда
		НастройкаПересчета.ПересчитыватьНДФЛ = Истина;
		НастройкаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	КонецЕсли;
	НастройкаПересчета.ПересчитыватьВзносы = Ложь;
	НастройкаПересчета.ПересчитыватьУдержанияОтВзносов = Ложь;
	НастройкаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоНДФЛ(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "НДФЛ" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	ЗаполнитьСтрокуПересчетаПоНДФЛ(НастройкаПересчета);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПересчетаПоНДФЛ(СтрокаПересчета)
	
	СтрокаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	СтрокаПересчета.ПересчитыватьНДФЛ = Ложь;
	СтрокаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	СтрокаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	СтрокаПересчета.ПересчитыватьВзносы = Ложь;
	СтрокаПересчета.ПересчитыватьУдержанияОтВзносов = Ложь;
	СтрокаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоВзносам(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "Взносы" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	ЗаполнитьСтрокуПересчетаПоВзносам(НастройкаПересчета);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПересчетаПоВзносам(СтрокаПересчета)
	
	СтрокаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	СтрокаПересчета.ПересчитыватьНДФЛ = Ложь;
	СтрокаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	СтрокаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	СтрокаПересчета.ПересчитыватьВзносы = Ложь;
	СтрокаПересчета.ПересчитыватьУдержанияОтВзносов = Истина;
	СтрокаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПересчетаПоПогашениюЗаймов(СтрокаИзменений)
	
	Если СтрокаИзменений.ИмяКоллекции <> "ПогашениеЗаймов" Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПересчета = ПересчетФизическихЛиц.Добавить();
	НастройкаПересчета.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
	НастройкаПересчета.ПересчитыватьУдержанияОтНачислений = Истина;
	НастройкаПересчета.ПересчитыватьНДФЛ = Ложь;
	НастройкаПересчета.ПересчитыватьУдержанияОтНДФЛ = Истина;
	НастройкаПересчета.ПересчитыватьКорректировкиВыплаты = Истина;
	НастройкаПересчета.ПересчитыватьВзносы = Ложь;
	НастройкаПересчета.ПересчитыватьУдержанияОтВзносов = Ложь;
	НастройкаПересчета.ПересчитыватьЗаймы = Ложь;
	
КонецПроцедуры

Функция УдержаниеВлияетНаНДФЛ(ВидРасчета)
	
	КатегорияУдержания = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета).КатегорияУдержания;
	
	КатегорииВлияющиеНаНДФЛ = ПланыВидовРасчета.Удержания.КатегорииУдержанийВлияющихНаНДФЛ();
	Возврат КатегорииВлияющиеНаНДФЛ.Найти(КатегорияУдержания) <> Неопределено;
	
КонецФункции

Процедура НачатьПересчетНачислений()
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПересчетСотрудников.НайтиСтроки(Новый Структура("ПересчитыватьНачисления", Истина));
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Сотрудник");
	
	Начисления = ТаблицаНачислений();
	НастройкиПересчета.СоответствиеСтрокНачислений.Очистить();
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНачислений Из Зарплата.Начисления Цикл
		Если Сотрудники.Найти(СтрокаНачислений.Сотрудник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		НастройкиПересчета.СоответствиеСтрокНачислений.Вставить(НоваяСтрока, СтрокаНачислений);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьПересчетНачислений()		
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиРасчета = Новый Соответствие;
	Для Каждого КлючИЗначение Из НастройкиПересчета.СоответствиеСтрокНачислений Цикл
		ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		СотрудникиРасчета.Вставить(КлючИЗначение.Значение.Сотрудник, КлючИЗначение.Значение.ФизическоеЛицо);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьПересчетУдержаний()
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из НастройкиПересчета.СоответствиеСтрокУдержаний Цикл
		ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбъединениеСохранениемИсправлений

Процедура ОбъединитьНачисления(Начисления)
	
	ПоляКлюча = 
		"Сотрудник,
		|Начисление,
		|ДокументОснование, 
		|ПериодДействия";
		
	ПоляФиксЗаполнение = 
		"Организация,
		|Подразделение,
		|ГрафикРаботы,
		|ГрафикРаботыНорма,
		|ВремяВЦеломЗаПериод,
		|ОбщийГрафик,
		|ПериодРегистрацииВремени,
		|ВремяВЧасах,
		|Категория,
		|Показатели";
	
	ПризнакиИсправления = Новый Массив;
	ПризнакиИсправления.Добавить("ФиксРасчет");
	ПризнакиИсправления.Добавить("ФиксЗаполнение");
	ПризнакиИсправления.Добавить("ФиксСтрока");
	ПризнакиИсправления.Добавить("ФиксРасчетВремени");
		
	ОбъединитьТаблицыСохраняяИсправления(Начисления, Зарплата.Начисления, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение);
	
КонецПроцедуры

Процедура ОбъединитьДоговорыПодряда(ДоговорыПодряда)
	
	ПоляКлюча = 
		"Сотрудник,
		|ДокументОснование";
		
	ПоляФиксЗаполнение = 
		"Подразделение,
		|КодВычета,
		|КодДохода";
		
	ПризнакиИсправления = Новый Массив;
	ПризнакиИсправления.Добавить("ФиксРасчет");
	ПризнакиИсправления.Добавить("ФиксСтрока");
		
	ОбъединитьТаблицыСохраняяИсправления(ДоговорыПодряда, Зарплата.ДоговорыПодряда, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение, Ложь);
	
КонецПроцедуры

Процедура ОбъединитьУдержания(Удержания)
	
	ПоляКлюча = 
		"ФизическоеЛицо,
		|Удержание,
		|ДокументОснование";
		
	ПоляФиксЗаполнение = 
		"Организация,
		|Подразделение,
		|Сотрудник,
		|Категория,
		|Показатели";
		
	ПризнакиИсправления = Новый Массив;
	ПризнакиИсправления.Добавить("ФиксРасчет");
	ПризнакиИсправления.Добавить("ФиксЗаполнение");
	ПризнакиИсправления.Добавить("ФиксСтрока");
		
	ОбъединитьТаблицыСохраняяИсправления(Удержания, Зарплата.Удержания, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение);
	
КонецПроцедуры

Процедура ОбъединитьНДФЛ(НДФЛ)
	
	ПоляКлюча = ПоляКлючаОбъединенияНДФЛ();
	
	ПризнакиИсправления = ПризнакиИсправленияНДФЛ();
	ОбъединитьТаблицыСохраняяИсправления(НДФЛ, ЗарплатаМесяца.НДФЛ, ПризнакиИсправления, ПоляКлюча);
	
КонецПроцедуры

Функция ПоляКлючаОбъединенияНДФЛ()
	
	ПоляКлюча = 
		"ФизическоеЛицо,
		|МесяцНалоговогоПериода";
		
	Возврат ПоляКлюча;
	
КонецФункции

Функция ПризнакиИсправленияНДФЛ()
	
	Признаки = Новый Массив;
	Признаки.Добавить("ФиксРасчет");
	Признаки.Добавить("ФиксСтрока");
		
	Возврат Признаки;
	
КонецФункции

Процедура ОбъединитьТаблицыСохраняяИсправления(ТаблицаИсточник, ТаблицаПриемник, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение = Неопределено, ПроверятьФиксЗаполнение = Истина)
	
	ИмяЗамера = "НачислениеЗарплаты.ОбъединениеКоллекцийССохранениемИсправлений";
	Замер = НачатьЗамерВремени();
	
	Если ТаблицаПриемник.Количество() = 0 Тогда
		// Нет исправлений.
		ТаблицаПриемник = ТаблицаИсточник;
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиРасчета.СохранятьИсправления Тогда
		// Не сохраняем исправления.
		ТаблицаПриемник = ТаблицаИсточник;
		Возврат;
	КонецЕсли;
	
	СочетанияОбъединения = ТаблицаПриемник.Скопировать(, ПоляКлюча);
	СочетанияОбъединения.Свернуть(ПоляКлюча);
	
	ОтборСтрок = Новый Структура(ПоляКлюча);
	Для Каждого Сочетание Из СочетанияОбъединения Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
		СтрокиПриемника = ТаблицаПриемник.НайтиСтроки(ОтборСтрок);
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(ОтборСтрок);
		ЗаменитьИсправленныеСтроки(СтрокиПриемника, СтрокиИсточника, ТаблицаИсточник, ПризнакиИсправления, ПоляФиксЗаполнение, ПроверятьФиксЗаполнение);
	КонецЦикла;
	
	ТаблицаПриемник = ТаблицаИсточник;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ОбъединитьМассивыСтрокСохраняяИсправления(ТаблицаИсточник, ТаблицаПриемник, СтрокиПриемника, ПоляКлюча, ПризнакиИсправления)
	
	ИмяЗамера = "НачислениеЗарплаты.ОбъединениеКоллекцийССохранениемИсправлений";
	Замер = НачатьЗамерВремени();
	
	Если ТаблицаПриемник.Количество() = 0 Тогда
		// Нет исправлений.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиРасчета.СохранятьИсправления Тогда
		// Не сохраняем исправления.
		Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
			ТаблицаПриемник.Удалить(СтрокаПриемника);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
		Возврат;
	КонецЕсли;
	
	СочетанияОбъединения = ТаблицаПриемник.СкопироватьКолонки(ПоляКлюча);
	УдалитьСтрокиПриемника = Новый Массив;
	Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
		ЗаполнитьЗначенияСвойств(СочетанияОбъединения.Добавить(), СтрокаПриемника);
		УдалитьСтрокиПриемника.Добавить(СтрокаПриемника);
	КонецЦикла;	
	СочетанияОбъединения.Свернуть(ПоляКлюча);
	
	ОтборСтрок = Новый Структура(ПоляКлюча);
	Для Каждого Сочетание Из СочетанияОбъединения Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
		СтрокиПриемника = ТаблицаПриемник.НайтиСтроки(ОтборСтрок);
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(ОтборСтрок);
		ЗаменитьИсправленныеСтроки(СтрокиПриемника, СтрокиИсточника, ТаблицаИсточник, ПризнакиИсправления, , Ложь);
	КонецЦикла;
	
	Для Каждого СтрокаПриемника Из УдалитьСтрокиПриемника Цикл
		ТаблицаПриемник.Удалить(СтрокаПриемника);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ЗаменитьИсправленныеСтроки(СтрокиПриемника, СтрокиИсточника, ТаблицаИсточник, ПризнакиИсправления, ПоляФиксЗаполнение = Неопределено, ПроверятьФиксЗаполнение = Истина)
	
	УдалитьСтрокиПриемника = Новый Массив;
	ЕстьИсправленныеСтроки = Ложь;
	Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
		Если СтрокаИсправлена(СтрокаПриемника, ПризнакиИсправления) Тогда
			ЕстьИсправленныеСтроки = Истина;
		КонецЕсли;
		Если СтрокиИсточника.Количество() = 0 Тогда 
			// Если в учете уже нет строк с таким ключом, удаляем их, если они только не были добавлены вручную (ФиксСтрока).
			Если Не СтрокаПриемника.ФиксСтрока Тогда
				УдалитьСтрокиПриемника.Добавить(СтрокаПриемника);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ПоляФиксЗаполнение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Если строки есть, и в них 
		//	- зафиксировано заполнение - оставляем как есть,
		//	- не зафиксировано заполнение - пытаемся совместить и обновляем заполнение.
		Если ПроверятьФиксЗаполнение И СтрокаПриемника.ФиксЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
			Если СтрокаИсточника.ДатаНачала = СтрокаПриемника.ДатаНачала Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника, ПоляФиксЗаполнение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЕстьИсправленныеСтроки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из УдалитьСтрокиПриемника Цикл
		ИндексСтроки = СтрокиПриемника.Найти(Строка);
		СтрокиПриемника.Удалить(ИндексСтроки);
	КонецЦикла;
	Для Каждого Строка Из СтрокиИсточника Цикл
		ТаблицаИсточник.Удалить(Строка);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПриемника, ТаблицаИсточник);
	
КонецПроцедуры

Функция СтрокаИсправлена(Строка, ПризнакиИсправления)
	
	Для Каждого Признак Из ПризнакиИсправления Цикл
		Если Строка[Признак] = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ДатаНачалаСобытия

Функция ТаблицаДатыНачалаСобытия() 
	
	ДатыНачалаСобытия = Новый ТаблицаЗначений;
	ДатыНачалаСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДатыНачалаСобытия.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат ДатыНачалаСобытия;
	
КонецФункции

#КонецОбласти

#Область КадровыйУчет

Функция ТаблицаДатыЗавершенияРаботы() 
	
	ДатыЗавершенияРаботы = Новый ТаблицаЗначений;
	ДатыЗавершенияРаботы.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДатыЗавершенияРаботы.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат ДатыЗавершенияРаботы;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, ТолькоРазрешенные, КадровыеДанные) Экспорт
	
	Если СтрНайти(КадровыеДанные, "ДатаЗавершенияРаботы") = 0 И СтрНайти(КадровыеДанные, "ДатаУвольнения") = 0 Тогда
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, КадровыеДанные);
		Возврат;
	КонецЕсли;
	
	ДатыЗавершенияРаботы = Неопределено;
	ДополнительныеСвойства.Свойство("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	Если ДатыЗавершенияРаботы = Неопределено Тогда
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, КадровыеДанные);
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	ИмяИтоговойВТ = ОписательВТ.ИмяВТКадровыеДанныеСотрудников;
	ОписательВТ.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковВременная";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, КадровыеДанные);
	УдалитьВТ.Добавить("ВТКадровыеДанныеСотрудниковВременная");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВТ.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыЗавершенияРаботы.Сотрудник,
		|	ДатыЗавершенияРаботы.Дата
		|ПОМЕСТИТЬ ВТДатыЗавершенияРаботы
		|ИЗ
		|	&ДатыЗавершенияРаботы КАК ДатыЗавершенияРаботы";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДатыЗавершенияРаботы");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник,
		|	ЕСТЬNULL(ДатыЗавершенияРаботы.Дата, КадровыеДанные.ДатаЗавершенияРаботы) КАК ДатаЗавершенияРаботы,
		|	ЕСТЬNULL(ДатыЗавершенияРаботы.Дата, КадровыеДанные.ДатаУвольнения) КАК ДатаУвольнения,
		|	&КадровыеДанные
		|ПОМЕСТИТЬ ВТИмяИтоговойВТ
		|ИЗ
		|	ВТКадровыеДанныеСотрудниковВременная КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыЗавершенияРаботы КАК ДатыЗавершенияРаботы
		|		ПО (ДатыЗавершенияРаботы.Сотрудник = КадровыеДанные.Сотрудник)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИмяИтоговойВТ", ИмяИтоговойВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КадровыеДанные", КадровыеДанные);
	Если СтрНайти(КадровыеДанные, "ДатаЗавершенияРаботы") = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ДатыЗавершенияРаботы.Дата, КадровыеДанные.ДатаЗавершенияРаботы) КАК ДатаЗавершенияРаботы,", "");
	КонецЕсли;
	Если СтрНайти(КадровыеДанные, "ДатаУвольнения") = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ДатыЗавершенияРаботы.Дата, КадровыеДанные.ДатаУвольнения) КАК ДатаУвольнения,", "");
	КонецЕсли;
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(ОписательВТ.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область НДФЛ

Процедура РассчитатьНДФЛ()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетНДФЛСУчетомДоходов";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = ЗарплатаМесяца.Начисления;
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	
	НачатьПересчетНДФЛ(Начисления, ДоговорыПодряда);
	
	УдалитьВТ = Новый Массив;
	
	СформироватьДоходыНДФЛ(Начисления, ДоговорыПодряда);
	
	ЗаполнитьСписокФизическихЛиц(Начисления, ДоговорыПодряда);
	
	Если Не НастройкиПересчета.ВыполнятьПересчет
		Или НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ.Количество() <> 0 Тогда
		
		НДФЛ = РезультатРасчетаНДФЛ();
		ЗавершитьПересчетНДФЛ(НДФЛ);
	КонецЕсли;
	
	ЗарегистрироватьНДФЛ();
	
	УничтожитьВТ(УдалитьВТ);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Функция РезультатРасчетаНДФЛ()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетНДФЛ";
	Замер = НачатьЗамерВремени();
		
	УстановитьПривилегированныйРежим(Истина);
	НДФЛ = УчетНДФЛ.РассчитатьНалогПоОсновнойСтавке(
		ИсключаемыйРегистратор, 
		Организация, 
		МесяцНачисления,
		СписокФизическихЛиц,
		, , 
		НастройкиНДФЛ.ОкончательныйРасчет, 
		НастройкиНДФЛ.ДатаВыплаты,
		НаборыЗаписей);
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатРасчетаНДФЛВТаблицу(НДФЛ);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат НДФЛ;
	
КонецФункции

Процедура РезультатРасчетаНДФЛВТаблицу(НДФЛ)
	
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл
		СтрокаНДФЛ.Налог = СтрокаНДФЛ.НалогПоСтавке13;
		СтрокаНДФЛ.ЗачтеноАвансовыхПлатежей = СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
		СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета = СтрокаНДФЛ.КодВычетаЛичный;
		СтрокаНДФЛ.Сумма = СтрокаНДФЛ.НалогПоСтавке13 - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицуНДФЛВРезультатРасчета(НДФЛ)
	
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл
		СтрокаНДФЛ.НалогПоСтавке13 = СтрокаНДФЛ.Налог;
		СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 = СтрокаНДФЛ.ЗачтеноАвансовыхПлатежей;
		СтрокаНДФЛ.КодВычетаЛичный = СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета;
		СтрокаНДФЛ.Сумма = СтрокаНДФЛ.НалогПоСтавке13 - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНДФЛ()
	
	ЗамерРегистрацияНДФЛ = НачатьЗамерВремени();
	
	Если Не РасчетОдногоМесяца Тогда
		НДФЛ = ЗарплатаМесяца.НДФЛ.Скопировать();
	Иначе
		НДФЛ = ЗарплатаМесяца.НДФЛ;
	КонецЕсли;
	
	НачатьРегистрациюНДФЛ(НДФЛ);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляРегистрацииНДФЛ = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
	ДанныеДляРегистрацииНДФЛ.Движения = НаборыЗаписей;
	ДанныеДляРегистрацииНДФЛ.Организация = Организация;
	ДанныеДляРегистрацииНДФЛ.ПериодРегистрации = МесяцНачисления;
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(ДанныеДляРегистрацииНДФЛ, Ложь, НДФЛ);
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.НачисленияУдержанияПоСотрудникам, Истина);
	
	Если Не РасчетОдногоМесяца 
		И НастройкиНДФЛ.ОкончательныйРасчет Тогда
		НДФЛ.Колонки.Удалить("РаспределениеПоСтатьям");
		НДФЛ.Колонки.Удалить("УчтенныеОснования");
		УчетНДФЛ.СформироватьНалогиВычеты(
			НаборыЗаписей,
			Ложь,
			Организация,
			КонецМесяца(МесяцНачисления),
			НДФЛ,,
			НастройкиРасчета.ОкончательныйРасчет);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗакончитьЗамерВремени("НачислениеЗарплаты.РегистрацияНДФЛ", ЗамерРегистрацияНДФЛ);
	
КонецПроцедуры

Процедура НачатьРегистрациюНДФЛ(НДФЛ)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НДФЛ = УчетНДФЛ.ТаблицаНДФЛ();
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНДФЛ", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	
	Для Каждого СтрокаТаблицы Из ЗарплатаМесяца.НДФЛ Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаТаблицы.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НДФЛ.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьПересчетНДФЛ(Начисления, ДоговорыПодряда)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицуНДФЛВРезультатРасчета(ЗарплатаМесяца.НДФЛ);
	
	Начисления = ТаблицаНачислений();
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьНДФЛ", Истина));
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ПересчетФизическихЛиц, "ФизическоеЛицо", Истина);
	НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.Начисления Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			НастройкиПересчета.СоответствиеСтрокНачислений.Вставить(НоваяСтрока, СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.ДоговорыПодряда Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДоговорыПодряда.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьПересчетНДФЛ(НДФЛ)	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		ОбъединитьНДФЛ(НДФЛ);
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем из коллекции строки по физическим лицам, по которым был выполнен пересчет.
	НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.НДФЛ, "ФизическоеЛицо", НастройкиПересчета.ФизическиеЛицаРасчетаНДФЛ);
	ОбъединитьМассивыСтрокСохраняяИсправления(НДФЛ, ЗарплатаМесяца.НДФЛ, НайденныеСтроки, ПоляКлючаОбъединенияНДФЛ(), ПризнакиИсправленияНДФЛ());	
КонецПроцедуры

Процедура СоздатьВТРаспределениеПоТерриториямУсловиямТруда(Начисления)
	
	Если ВТСуществует("ВТРаспределениеПоТерриториямУсловиямТруда") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиУчета.ИспользоватьТерриторииУсловияТруда Тогда
		Запрос = НовыйЗапрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	0 КАК ИдентификаторСтроки,
			|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК Территория,
			|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
			|	0 КАК Результат,
			|	0 КАК СуммаВычета,
			|	0 КАК СкидкаПоВзносам
			|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	ТерриторииУсловияТруда = ТаблицаТерриторийУсловийТруда();
	
	Для Каждого Строка Из Начисления Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Строка.ТерриторииУсловияТруда, ТерриторииУсловияТруда);
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ТерриторииУсловияТруда", ТерриторииУсловияТруда);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТерриторииУсловияТруда.ИдентификаторСтроки,
		|	ТерриторииУсловияТруда.Территория,
		|	ТерриторииУсловияТруда.УсловияТруда,
		|	ТерриторииУсловияТруда.Результат,
		|	ТерриторииУсловияТруда.СуммаВычета,
		|	ТерриторииУсловияТруда.СкидкаПоВзносам
		|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
		|ИЗ
		|	&ТерриторииУсловияТруда КАК ТерриторииУсловияТруда";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНачисленияДляРегистрацииДоходовНДФЛ(Начисления)
	
	УдалитьВТ = Новый Массив;
	
	ДобавитьИдентификаторСтрокиБухучета(Начисления);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.ИдентификаторСтрокиБухучет КАК ИдентификаторСтрокиБухучет,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.Сторно
	|				ИЛИ Начисления.ФиксСторно
	|				ИЛИ Начисления.СторнируемыйДокумент <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сторно,
	|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	Начисления.Результат КАК Результат,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	Начисления.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	Начисления.КодВычета КАК КодВычета,
	|	Начисления.КоличествоДетей КАК КоличествоДетей,
	|	Начисления.ВычетПредоставленныйДругомуРодителю КАК ВычетПредоставленныйДругомуРодителю,
	|	Начисления.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТНачисленияТаблица
	|ИЗ
	|	&Начисления КАК Начисления";
	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияТаблица");
	
	ЗаполнитьВычетыКДоходамНДФЛ(Начисления);
	
	СоздатьВТРаспределениеПоТерриториямУсловиямТруда(Начисления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтрокиБухучет КАК ИдентификаторСтроки,
	|	0 КАК СуммаЗаСчетГрантов,
	|	ЕСТЬNULL(Распределение.Результат, Начисления.Результат) КАК СуммаДохода,
	|	ЕСТЬNULL(Распределение.СуммаВычета, Начисления.СуммаВычета) КАК СуммаВычетаНДФЛ,
	|	ВЫБОР
	|		КОГДА Распределение.Территория ЕСТЬ НЕ NULL 
	|				И Распределение.Территория <> НЕОПРЕДЕЛЕНО
	|				И Распределение.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
	|			ТОГДА Распределение.Территория
	|		ИНАЧЕ Начисления.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	Распределение.Территория КАК ТерриторияВыполненияРаботВОрганизации,
	|	ЕСТЬNULL(Распределение.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Начисление,
	|	Начисления.ДатаНачала,
	|	Начисления.Сторно,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.Подразделение КАК ПодразделениеОрганизации,
	|	Начисления.КодВычета КАК КодВычетаНДФЛ
	|ПОМЕСТИТЬ ВТНачисленияДляРегистрацииДоходовНДФЛ
	|ИЗ
	|	ВТНачисленияТаблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
	|		ПО (Распределение.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
	Запрос.Выполнить();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Если Модуль.ИспользуютсяГрантыНеоблагаемыеНДФЛ() Тогда
			БухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(Начисления);
			ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, "БухучетНачисленийДляРегистрацииДоходовНДФЛ");
			УдалитьВТ.Добавить("БухучетНачисленийДляРегистрацииДоходовНДФЛ");
			Модуль.ВыделитьСуммуЗаСчетГрантовИзНачислений(МенеджерВременныхТаблиц, "ВТНачисленияДляРегистрацииДоходовНДФЛ", "БухучетНачисленийДляРегистрацииДоходовНДФЛ");
		КонецЕсли;
	КонецЕсли;
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СформироватьДоходыНДФЛ(Начисления, ДоговорыПодряда)
	
	ИмяЗамера = "НачислениеЗарплаты.ФормированиеДоходовНДФЛ";
	Замер = НачатьЗамерВремени();
	
	ДатаОперации = КонецМесяца(МесяцНачисления);
	Если Не ЗначениеЗаполнено(НастройкиНДФЛ.ДатаВыплаты) Тогда 
		НастройкиНДФЛ.ДатаВыплаты = ДатаОперации;
	КонецЕсли;
	
	Если ЭтоИсправлениеТекущимПериодом Тогда
		ПараметрыСторнирования = ИсправлениеДокументовЗарплатаКадры.ПараметрыСторнирования();
		ПараметрыСторнирования.ИсправлениеВТекущемПериоде = Истина;
		ПараметрыСторнирования.ПериодРегистрации = МесяцНачисления;
		
		УчетНДФЛРасширенный.СторнироватьДвиженияДокумента(НаборыЗаписей, ИсправленныйДокумент, ПараметрыСторнирования, ИсключаемыйРегистратор);
	КонецЕсли;
	
	СформироватьДоходыНДФЛПоНачислениям(Начисления, ДатаОперации);
	СформироватьДоходыНДФЛПоДоговорамПодряда(ДоговорыПодряда, ДатаОперации);
	
	ПроведениеРасширенныйСервер.ВыполнитьЗапланированныеКорректировкиДвижений(НаборыЗаписей);
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.СведенияОДоходахНДФЛ);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.АвансовыеПлатежиИностранцевПоНДФЛ);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.ИмущественныеВычетыНДФЛ);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.РасчетыНалогоплательщиковСБюджетомПоНДФЛ);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура СформироватьДоходыНДФЛПоНачислениям(Начисления, ДатаОперации)
	
	Если Не НастройкиРасчета.РассчитыватьНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТНачисленияДляРегистрацииДоходовНДФЛ(Начисления);
	УдалитьВТ.Добавить("ВТНачисленияДляРегистрацииДоходовНДФЛ");
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		ДатаОперации, 
		НастройкиНДФЛ.ДатаВыплаты, 
		МенеджерВременныхТаблиц, 
		МесяцНачисления, 
		Ложь, 
		НастройкиНДФЛ.ОкончательныйРасчет, 
		"ВТНачисленияДляРегистрацииДоходовНДФЛ", 
		ИсключаемыйРегистратор, 
		МенеджерКадровогоУчета(),
		НастройкиНДФЛ.ДоходПолученНаТерриторииРФ);
	УстановитьПривилегированныйРежим(Ложь);
		
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СформироватьДоходыНДФЛПоДоговорамПодряда(ДоговорыПодряда, ДатаОперации)
	
	Если Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиУчета.ИспользоватьТерритории Тогда
		ДоговорыСТерриториями = ДоговорыПодряда.СкопироватьКолонки();
		ДоговорыСТерриториями.Колонки.Подразделение.Имя = "ПодразделениеСотрудника";
		ДоговорыСТерриториями.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
		Для Каждого СтрокаДоговора Из ДоговорыПодряда Цикл
			Если СтрокаДоговора.ТерриторииУсловияТруда.Количество() = 0 Тогда
				СтрокаДоговораСТерриториями = ДоговорыСТерриториями.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоговораСТерриториями, СтрокаДоговора);
				СтрокаДоговораСТерриториями.ПодразделениеСотрудника = СтрокаДоговора.Подразделение;
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаТерритории Из СтрокаДоговора.ТерриторииУсловияТруда Цикл
				СтрокаДоговораСТерриториями = ДоговорыСТерриториями.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоговораСТерриториями, СтрокаДоговора);
				ЗаполнитьЗначенияСвойств(СтрокаДоговораСТерриториями, СтрокаТерритории, "Результат, СуммаВычета, СкидкаПоВзносам");
				СтрокаДоговораСТерриториями.ПодразделениеСотрудника = СтрокаДоговора.Подразделение;
				Если ЗначениеЗаполнено(СтрокаТерритории.Территория) Тогда
					СтрокаДоговораСТерриториями.Подразделение = СтрокаТерритории.Территория;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ДоговорыСТерриториями = ДоговорыПодряда;
		ДоговорыСТерриториями.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ДоговорыСТерриториями.ЗагрузитьКолонку(ДоговорыСТерриториями.ВыгрузитьКолонку("Подразделение"), "ПодразделениеСотрудника");
	КонецЕсли;
	
	ДоходыОтобранные = ДоходыПоДоговорамПодрядаОблагаемыеНДФЛ(ДоговорыСТерриториями);
	
	ИменаКолонок = 
		"Сотрудник,
		|ФизическоеЛицо,
		|Начисление,
		|ПланируемаяДатаВыплаты,
		|КодДохода,
		|КатегорияДохода,
		|КодДоходаСтраховыеВзносы,
		|Результат,
		|КодВычета,
		|СуммаВычета,
		|Подразделение,
		|ПодразделениеСотрудника";
	
	Доходы = ДоходыОтобранные.Скопировать(, ИменаКолонок);
	Доходы.Колонки["ПланируемаяДатаВыплаты"].Имя = "ДатаПолученияДохода";
	Доходы.Колонки["Результат"].Имя = "СуммаДохода";
	
	ОтборСтрокПустаяДата = Новый Структура("ДатаПолученияДохода", Дата(1, 1, 1));
	УдаляемыеСтроки = Доходы.НайтиСтроки(ОтборСтрокПустаяДата);
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Доходы.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(
		НаборыЗаписей, 
		Ложь, 
		Организация, 
		ДатаОперации, 
		Доходы, 
		Ложь, 
		НастройкиНДФЛ.ОкончательныйРасчет);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ДоходыПоДоговорамПодрядаОблагаемыеНДФЛ(ДоговорыПодряда)
	Количество = ДоговорыПодряда.Количество();
	Если Количество = 0 Тогда
		Возврат ДоговорыПодряда;
	КонецЕсли;
	ФильтроватьПоФлажкуНДФЛ = РасчетЗарплатыРасширенный.ВыплатыПоДоговорамГПХМогутНеОблагатьсяНДФЛ();
	ФильтроватьПоСтатьеФинансированияГрантов = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ");
	Если Не ФильтроватьПоФлажкуНДФЛ И Не ФильтроватьПоСтатьеФинансированияГрантов Тогда
		Возврат ДоговорыПодряда;
	КонецЕсли;
	
	Доходы = ДоговорыПодряда.Скопировать();
	
	Если ФильтроватьПоФлажкуНДФЛ Тогда
		ОбратныйИндекс = Количество;
		Пока ОбратныйИндекс > 0 Цикл
			ОбратныйИндекс = ОбратныйИндекс - 1;
			Если Доходы[ОбратныйИндекс].НеОблагаетсяНДФЛ Тогда
				Доходы.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ФильтроватьПоСтатьеФинансированияГрантов Тогда
		УдалитьВТ = Новый Массив;
		
		Если Не ВТСуществует(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам) Тогда
			
			ДобавитьИдентификаторСтрокиБухучета(Доходы);
			БухучетДоговорыГПХ = БухучетНачисленийИзКоллекцииСтрок(Доходы);
			
			ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетДоговорыГПХ, ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
			УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяВТБухучетНачислений", ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
		ДополнительныеПараметры.Вставить("ИмяКолонкиИдентификаторСтроки", "ИдентификаторСтрокиБухучет");
		ДополнительныеПараметры.Вставить("ИмяКолонкиСуммаДохода", "Результат");
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Модуль.ОтобратьДоходыПоДоговорамПодрядаОблагаемыеНДФЛ(МенеджерВременныхТаблиц, Доходы, ДополнительныеПараметры);
		
		УничтожитьВТ(УдалитьВТ);
	КонецЕсли;
	
	Возврат Доходы;
КонецФункции

Процедура ЗаполнитьСписокФизическихЛицПоСотрудникам()
	
	ТекстСообщения = НСтр("ru = 'Заполнение НастройкиРасчета.Сотрудники является обязательным.';
							|en = 'НастройкиРасчета.Сотрудники is required.'");
	ОбщегоНазначенияКлиентСервер.Проверить(НастройкиРасчета.Сотрудники <> Неопределено, ТекстСообщения, "СоздатьВТФизическиеЛицаПоСотрудникам");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Сотрудники", НастройкиРасчета.Сотрудники);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
	УстановитьПривилегированныйРежим(Истина);
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьСписокФизическихЛицПоТаблицеПересчета()
	УникальныеФизическиЛица = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ПересчетФизическихЛиц Цикл
		Если (СтрокаТаблицы.ПересчитыватьНДФЛ = Истина
			Или СтрокаТаблицы.ПересчитыватьВзносы = Истина)
			И УникальныеФизическиЛица[СтрокаТаблицы.ФизическоеЛицо] = Неопределено Тогда
			
			СписокФизическихЛиц.Добавить(СтрокаТаблицы.ФизическоеЛицо);
			УникальныеФизическиЛица.Вставить(СтрокаТаблицы.ФизическоеЛицо, Истина);
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры

Процедура СоздатьВТФизическиеЛица(Начисления, ДоговорыПодряда)
	
	Если ВТСуществует("ВТФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокФизическихЛиц(Начисления, ДоговорыПодряда);
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Для Каждого ТекущееФизическоеЛицо Из СписокФизическихЛиц Цикл
		СтрокаТЗ = ТаблицаФизическихЛиц.Добавить();
		СтрокаТЗ.ФизическоеЛицо = ТекущееФизическоеЛицо;
	КонецЦикла;
	ТаблицаФизическихЛиц.Свернуть("ФизическоеЛицо");
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаФизическихЛиц, "ВТФизическиеЛица"); 	
КонецПроцедуры

Процедура ЗаполнитьСписокФизическихЛиц(Начисления, ДоговорыПодряда)
	Если СписокФизическихЛиц = Неопределено Тогда
		СписокФизическихЛиц = Новый Массив;
	Иначе
		Возврат;
	КонецЕсли;	
		
	Если НастройкиПересчета.ВыполнятьПересчет Тогда
		ЗаполнитьСписокФизическихЛицПоТаблицеПересчета();
		Возврат;
	КонецЕсли;
	
	Если НастройкиРасчета.ОкончательныйРасчет Тогда
		ЗаполнитьСписокФизическихЛицПоСотрудникам();
		Возврат;
	КонецЕсли;
	
	УникальныеФизическиЛица = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ПересчетФизическихЛиц Цикл
		Если (СтрокаТаблицы.ПересчитыватьНДФЛ = Истина
			Или СтрокаТаблицы.ПересчитыватьВзносы = Истина)
			И УникальныеФизическиЛица[СтрокаТаблицы.ФизическоеЛицо] = Неопределено Тогда
			
			СписокФизическихЛиц.Добавить(СтрокаТаблицы.ФизическоеЛицо);
			УникальныеФизическиЛица.Вставить(СтрокаТаблицы.ФизическоеЛицо, Истина);
		КонецЕсли;	
	КонецЦикла;		

	
	Если НастройкиРасчета.РассчитыватьНачисления Тогда
		Для Каждого СтрокаТаблицы Из Начисления Цикл
			Если УникальныеФизическиЛица[СтрокаТаблицы.ФизическоеЛицо] = Неопределено Тогда	
				СписокФизическихЛиц.Добавить(СтрокаТаблицы.ФизическоеЛицо);
				УникальныеФизическиЛица.Вставить(СтрокаТаблицы.ФизическоеЛицо, Истина);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Для Каждого СтрокаТаблицы Из ДоговорыПодряда Цикл
			Если УникальныеФизическиЛица[СтрокаТаблицы.ФизическоеЛицо] = Неопределено Тогда	
				СписокФизическихЛиц.Добавить(СтрокаТаблицы.ФизическоеЛицо);
				УникальныеФизическиЛица.Вставить(СтрокаТаблицы.ФизическоеЛицо, Истина);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьВычетыКДоходамНДФЛ(Начисления)
	
	ИмяЗамера = "НачислениеЗарплаты.ЗаполнениеВычетовКДоходамНДФЛ";
	Замер = НачатьЗамерВремени();
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определим необходимость заполнения вычетов, есть ли среди доходов такие, к которым требуются вычеты.
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГОД(Начисления.ДатаНачала) КАК НалоговыйПериод
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления";
		
	ДоходыСВычетами = Новый Массив;	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВычетыДоходов = УчетНДФЛ.ВычетыКДоходам(Выборка.НалоговыйПериод);
		МассивДоходов = ОбщегоНазначения.ВыгрузитьКолонку(ВычетыДоходов, "Ключ");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоходыСВычетами, МассивДоходов, Истина);
	КонецЦикла;
	
	ДоходыСоСкидками = УчетСтраховыхВзносовКлиентСервер.ВидыДоходовСоСкидками();
	
	Если ДоходыСВычетами.Количество() = 0 И ДоходыСоСкидками.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДоходыСВычетами", ДоходыСВычетами);
	Запрос.УстановитьПараметр("ДоходыСоСкидками", ДоходыСоСкидками);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КодДоходаНДФЛ В(&ДоходыСВычетами)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление.КодДоходаНДФЛ КАК КодДохода,
		|	Начисления.Начисление.КодДоходаСтраховыеВзносы КАК ВидДохода,
		|	Начисления.Результат КАК Сумма,
		|	Начисления.КодВычета КАК КодВычета,
		|	Начисления.КоличествоДетей,
		|	Начисления.ВычетПредоставленныйДругомуРодителю,
		|	Начисления.ИдентификаторСтрокиБухучет КАК НомерСтроки,
		|	&ВременныйРегистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТНачисленияЗаполнениеВычетов
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	НЕ Начисления.Сторно
		|	И Начисления.Начисление.КодДоходаНДФЛ В(&ДоходыСВычетами)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление.КодДоходаНДФЛ КАК КодДохода,
		|	Начисления.СуммаВычета
		|ПОМЕСТИТЬ ВТПредоставленныеВычеты
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КодДоходаНДФЛ В(&ДоходыСВычетами)
		|	И Начисления.Сторно = ИСТИНА
		|	И Начисления.СуммаВычета <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление.КодДоходаСтраховыеВзносы КАК ВидДохода,
		|	Начисления.СкидкаПоВзносам КАК СуммаСкидки
		|ПОМЕСТИТЬ ВТПредоставленныеСкидки
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КодДоходаСтраховыеВзносы В(&ДоходыСоСкидками)
		|	И Начисления.Сторно = ИСТИНА
		|	И Начисления.СкидкаПоВзносам <> 0";
	
	Если ЭтоИсправлениеТекущимПериодом Тогда
		ДополнитьПредоставленныеВычетыИСкидкиПоСторноЗаписям(Запрос);
	КонецЕсли;
	
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияЗаполнениеВычетов");
	УдалитьВТ.Добавить("ВТПредоставленныеВычеты");
	УдалитьВТ.Добавить("ВТПредоставленныеСкидки");

	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(
		ИсключаемыйРегистратор, 
		Организация, 
		НастройкиНДФЛ.ДатаВыплаты, 
		МенеджерВременныхТаблиц, 
		"ВТНачисленияЗаполнениеВычетов", 
		"ВТПредоставленныеВычеты");
	УдалитьВТ.Добавить("ВТВычетыКДоходамФизическихЛиц");
	
	УчетСтраховыхВзносов.СоздатьВТСкидкиКДоходамФизическихЛиц(
		Организация, 
		МесяцНачисления, 
		МенеджерВременныхТаблиц,
		ИсключаемыйРегистратор,
		"ВТНачисленияЗаполнениеВычетов", 
		"ВТПредоставленныеСкидки");
	УдалитьВТ.Добавить("ВТСкидкиКДоходамФизическихЛиц");
	
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("ИдентификаторСтроки");
	ПоляИсключения.Добавить("КодВычета");
	ПоляИсключения.Добавить("СуммаВычета");
	ПоляИсключения.Добавить("СкидкаПоВзносам");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки,
	|	&ИменаПолей
	|ПОМЕСТИТЬ ВТВсеНачисленияТаблица
	|ИЗ
	|	ВТНачисленияТаблица КАК Начисления";
	
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТНачисленияТаблица", "Начисления");
	Запрос.Выполнить();
	УничтожитьВТ("ВТНачисленияТаблица");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА Начисления.Сторно
	|			ТОГДА Начисления.КодВычета
	|		ИНАЧЕ ВычетыКДоходам.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	ВЫБОР
	|		КОГДА Начисления.Сторно
	|			ТОГДА Начисления.СуммаВычета
	|		ИНАЧЕ ВычетыКДоходам.СуммаВычета
	|	КОНЕЦ КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА Начисления.Сторно
	|			ТОГДА Начисления.СкидкаПоВзносам
	|		ИНАЧЕ СкидкиКДоходам.СуммаСкидки
	|	КОНЕЦ КАК СкидкаПоВзносам,
	|	&ИменаПолей
	|ПОМЕСТИТЬ ВТНачисленияТаблица
	|ИЗ
	|	ВТВсеНачисленияТаблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыКДоходам
	|		ПО (ВычетыКДоходам.Регистратор = &ВременныйРегистратор)
	|			И (ВычетыКДоходам.НомерСтроки = Начисления.ИдентификаторСтрокиБухучет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСкидкиКДоходамФизическихЛиц КАК СкидкиКДоходам
	|		ПО (СкидкиКДоходам.Регистратор = &ВременныйРегистратор)
	|			И (СкидкиКДоходам.НомерСтроки = Начисления.ИдентификаторСтрокиБухучет)";
	ЗаполнитьСохраняемыеПоляВТ(Запрос.Текст, "ВТВсеНачисленияТаблица", "Начисления", ПоляИсключения);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВсеНачисленияТаблица");
	
	// Нужно заполнить еще и в самой таблице Начисления.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтрокиБухучет,
		|	Начисления.КодВычета,
		|	Начисления.СуммаВычета,
		|	Начисления.СкидкаПоВзносам
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|ГДЕ
		|	Начисления.Начисление.КодДоходаНДФЛ В(&ДоходыСВычетами)
		|	И Начисления.Сторно = ЛОЖЬ
		|	И (Начисления.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|			ИЛИ Начисления.СуммаВычета <> 0 
		|			ИЛИ Начисления.СкидкаПоВзносам <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.ИдентификаторСтрокиБухучет";
	Выборка = Запрос.Выполнить().Выбрать();
	ОтборСтрок = Новый Структура("ИдентификаторСтрокиБухучет");
	Пока Выборка.Следующий() Цикл
		ОтборСтрок.ИдентификаторСтрокиБухучет = Выборка.ИдентификаторСтрокиБухучет;
		НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
			РаспределитьСуммуВычетаПоТерриториямУсловиямТруда(НайденнаяСтрока, Выборка.СуммаВычета);
			РаспределитьСкидкуПоВзносамПоТерриториямУсловиямТруда(НайденнаяСтрока, Выборка.СкидкаПоВзносам);
			СтрокаСоответствия = НастройкиПересчета.СоответствиеСтрокНачислений[НайденнаяСтрока];
			Если СтрокаСоответствия <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаСоответствия, Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВТ(УдалитьВТ);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура РаспределитьСуммуВычетаПоТерриториямУсловиямТруда(Строка, СуммаВычета)
	
	Если Строка.ТерриторииУсловияТруда.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если СуммаВычета = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = Строка.ТерриторииУсловияТруда.ВыгрузитьКолонку("Результат");
	Распределение = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаВычета, Коэффициенты, 0);
	
	Индекс = 0;
	Пока Индекс < Распределение.Количество() Цикл
		Строка.ТерриторииУсловияТруда[Индекс].СуммаВычета = Распределение[Индекс];
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьСкидкуПоВзносамПоТерриториямУсловиямТруда(Строка, СкидкаПоВзносам)
	
	Если Строка.ТерриторииУсловияТруда.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если СкидкаПоВзносам = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = Строка.ТерриторииУсловияТруда.ВыгрузитьКолонку("Результат");
	Распределение = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СкидкаПоВзносам, Коэффициенты, 0);
	
	Индекс = 0;
	Пока Индекс < Распределение.Количество() Цикл
		Строка.ТерриторииУсловияТруда[Индекс].СкидкаПоВзносам = Распределение[Индекс];
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкиВыплаты

Процедура РассчитатьКорректировкиВыплаты()
	
	ИмяЗамера = "НачислениеЗарплаты.КорректировкаВыплат";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	НДФЛ = Зарплата.НДФЛ.Скопировать();
	Если Не РасчетОдногоМесяца Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.НДФЛ, НДФЛ);
	КонецЕсли;
			
	НачатьРасчетКорректировокВыплаты(НДФЛ);
	
	ИсчисленныйНалог = УчетНДФЛ.ИсчисленныйНалогФизическихЛицПоРезультатамРасчета(НДФЛ);
	
	ТекущиеКорректировки = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(
		Организация, 
		МесяцНачисления, 
		ИсчисленныйНалог.ВыгрузитьКолонку("ФизическоеЛицо"), 
		ИсключаемыйРегистратор);
		
	УстановитьПривилегированныйРежим(Истина);	
	КорректировкиПоФизическомуЛицу = РасчетЗарплаты.РекомендуемыеКорректировкиВыплаты(ИсчисленныйНалог, ТекущиеКорректировки);
	УстановитьПривилегированныйРежим(Ложь);
	
	КорректировкиПоФизическомуЛицу.Свернуть("ФизическоеЛицо", "КорректировкаВыплаты");
	
	КорректировкиВыплаты = ТаблицаКорректировокВыплаты();
	Для Каждого СтрокаКорректировки Из КорректировкиПоФизическомуЛицу Цикл
		Если СтрокаКорректировки.КорректировкаВыплаты = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КорректировкиВыплаты.Добавить(), СтрокаКорректировки);
	КонецЦикла;
	
	ЗавершитьРасчетКорректировокВыплаты(КорректировкиВыплаты);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура НачатьРасчетКорректировокВыплаты(НДФЛ)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьКорректировкиВыплаты", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	НастройкиПересчета.ФизическиеЛицаКорректировокВыплаты = ФизическиеЛицаМассив;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из НДФЛ Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаТаблицы.ФизическоеЛицо) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из СтрокиКУдалению Цикл
		НДФЛ.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьРасчетКорректировокВыплаты(КорректировкиВыплаты)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		ЗарплатаМесяца.КорректировкиВыплаты = КорректировкиВыплаты;
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ФизическиеЛицаКорректировокВыплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем из коллекции строки по физическим лицам, по которым был выполнен пересчет.
	НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.КорректировкиВыплаты, "ФизическоеЛицо", НастройкиПересчета.ФизическиеЛицаКорректировокВыплаты);
	ОбъединитьМассивыСтрокСохраняяИсправления(КорректировкиВыплаты, ЗарплатаМесяца.КорректировкиВыплаты, НайденныеСтроки, "ФизическоеЛицо", ПризнакиИсправленияНДФЛ());
	
КонецПроцедуры

Функция ТаблицаКорректировокВыплаты()
	
	Возврат Обработки.МенеджерРасчетаЗарплаты.ТаблицаКорректировокВыплаты();
	
КонецФункции

#КонецОбласти

#Область Займы

Процедура РассчитатьПогашениеЗаймов()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетЗаймов";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьЗаймы Тогда
		Возврат;
	КонецЕсли;
	
	Если МесяцНачисления < НачалоМесяца(НастройкиЗаймов.ДатаПогашения) Тогда
		ДатаПогашения = МесяцНачисления;
	Иначе
		ДатаПогашения = НастройкиЗаймов.ДатаПогашения;
	КонецЕсли;
	Сотрудники = СотрудникиВМассиве(НастройкиЗаймов.Сотрудники);
	
	НачатьПересчетПогашенияЗаймов(Сотрудники);
	
	ПогашениеЗаймов = РасчетЗарплатыРасширенный.РезультатРасчетаЗаймов(Организация, ДатаПогашения, ИсключаемыйРегистратор, Сотрудники);
	
	ЗавершитьПересчетПогашенияЗаймов(ПогашениеЗаймов);
	
	ЗарегистрироватьНалогНаМатериальнуюВыгоду();
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ЗарегистрироватьНалогНаМатериальнуюВыгоду()
	
	Если ЗарплатаМесяца.ПогашениеЗаймов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПогашениеЗаймов = ЗарплатаМесяца.ПогашениеЗаймов;
	НачатьРегистрациюНалогаНаМатериальнуюВыгоду(ПогашениеЗаймов);
	
	Если ПогашениеЗаймов.Итог("НалогНаМатериальнуюВыгоду") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНДФЛ = ПогашениеЗаймов.Скопировать(, "ФизическоеЛицо, Подразделение, НалогНаМатериальнуюВыгоду");
	ТаблицаНДФЛ.Свернуть("ФизическоеЛицо, Подразделение", "НалогНаМатериальнуюВыгоду");
	ТаблицаНДФЛ.Колонки.НалогНаМатериальнуюВыгоду.Имя = "Сумма";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляРегистрацииНДФЛ = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
	ДанныеДляРегистрацииНДФЛ.Движения = НаборыЗаписей;
	ДанныеДляРегистрацииНДФЛ.Организация = Организация;
	ДанныеДляРегистрацииНДФЛ.ПериодРегистрации = МесяцНачисления;
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(ДанныеДляРегистрацииНДФЛ, Ложь, ТаблицаНДФЛ);
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.НачисленияУдержанияПоСотрудникам, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура НачатьПересчетПогашенияЗаймов(Сотрудники)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьЗаймы", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Сотрудники = Новый Массив;
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	НастройкиПересчета.ФизическиеЛицаПогашенияЗаймов = ФизическиеЛицаМассив;
	
	УстановитьПривилегированныйРежим(Истина);
	ФизическиеЛицаСотрудников = КадровыйУчет.ФизическиеЛицаСотрудников(Сотрудники);
	УстановитьПривилегированныйРежим(Ложь);
	
	УдаляемыеСотрудники = Новый Массив;
	Для Каждого Сотрудник Из Сотрудники Цикл
		ФизическоеЛицоСотрудника = ФизическиеЛицаСотрудников[Сотрудник];
		Если ФизическиеЛицаМассив.Найти(ФизическоеЛицоСотрудника) = Неопределено Тогда
			УдаляемыеСотрудники.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.СократитьМассив(Сотрудники, УдаляемыеСотрудники);
		
КонецПроцедуры

Процедура ЗавершитьПересчетПогашенияЗаймов(ПогашениеЗаймов)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		ЗарплатаМесяца.ПогашениеЗаймов = ПогашениеЗаймов;
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ФизическиеЛицаПогашенияЗаймов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем из коллекции строки по физическим лицам, по которым был выполнен пересчет.
	НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.ПогашениеЗаймов, "ФизическоеЛицо", НастройкиПересчета.ФизическиеЛицаПогашенияЗаймов);;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ЗарплатаМесяца.ПогашениеЗаймов.Удалить(НайденнаяСтрока);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПогашениеЗаймов, ЗарплатаМесяца.ПогашениеЗаймов);
	
КонецПроцедуры

Процедура НачатьРегистрациюНалогаНаМатериальнуюВыгоду(ПогашениеЗаймов)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	ПогашениеЗаймов = ЗаймыСотрудникам.ТаблицаПогашениеЗаймов();
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНДФЛ", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
	
	Для Каждого СтрокаТаблицы Из ЗарплатаМесяца.ПогашениеЗаймов Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаТаблицы.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Бухучет

Функция ИзмениласьДоляЕНВД(ИсходноеРаспределениеРезультатов, НовоеРаспределениеРезультатов)

	БылаДоляЕНВД = 0;
	Для каждого СтрокаРаспределения Из ИсходноеРаспределениеРезультатов Цикл
		Если СтрокаРаспределения.ОблагаетсяЕНВД Тогда
			БылаДоляЕНВД = БылаДоляЕНВД + СтрокаРаспределения.Результат;
		КонецЕсли;
	КонецЦикла;
	
	СталаДоляЕНВД = 0;
	Для каждого СтрокаРаспределения Из НовоеРаспределениеРезультатов Цикл
		Если СтрокаРаспределения.ОблагаетсяЕНВД Тогда
			СталаДоляЕНВД = СталаДоляЕНВД + СтрокаРаспределения.Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БылаДоляЕНВД <> СталаДоляЕНВД;

КонецФункции

Процедура ВыполнитьОтражениеНачисленийВБухучете()
	
	Если Не БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СоответствиеСтрокНачислений = Новый Соответствие;
	Начисления = ЗарплатаМесяца.Начисления;
	ОтобратьСтрокиТаблицыНачисленийПоУсловиям(Начисления, СоответствиеСтрокНачислений);
		
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БухучетНачислений = ПолучитьБухучетНачисленийСоздатьВременнуюТаблицу(Начисления, ПараметрыБухучета.ИмяВТБухучетНачислений);
	
	СтрокиИзмениласьДоляГранта = Новый Соответствие;
	Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
			Если Модуль.СоздатьВТПолучателиГрантов(МенеджерВременныхТаблиц, ПараметрыБухучета.ИмяВТБухучетНачислений) Тогда
				ТекущийБухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(Начисления);
				ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, ТекущийБухучетНачислений, "ВТТекущийБухучетНачислений");
				УдалитьВТ.Добавить("ВТТекущийБухучетНачислений");
				УдалитьВТ.Добавить("ВТПолучателиГрантов");
				СтрокиИзмениласьДоляГранта = Модуль.СтрокиИзмениласьДоляГранта(МенеджерВременныхТаблиц, "ВТТекущийБухучетНачислений", ПараметрыБухучета.ИмяВТБухучетНачислений);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// поместим бухучет начислений в строки основной таблицы
	БухучетНачислений.Индексы.Добавить("ИдентификаторСтроки");
	СтрокаКолонок = ОтражениеЗарплатыВБухучете.СтрокаКолонокРаспределенияБезИдентификатораСтроки(БухучетНачислений);
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	ФизическиеЛицаДляВзносов = Новый Массив;
	ФизическиеЛицаДляПересчетаНДФЛ = Новый Массив;
	
	Если СоответствиеСтрокНачислений.Количество() > 0 Тогда
		
		Для каждого ЭлементКоллекции Из СоответствиеСтрокНачислений Цикл
			Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
			БухучетСтроки = БухучетНачислений.Скопировать(Отбор, СтрокаКолонок);
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов И ИзмениласьДоляЕНВД(ЭлементКоллекции.Значение.РаспределениеПоСтатьям, БухучетСтроки) Тогда
				ФизическиеЛицаДляВзносов.Добавить(ЭлементКоллекции.Значение.ФизическоеЛицо);
			КонецЕсли;
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ И СтрокиИзмениласьДоляГранта[ЭлементКоллекции.Ключ] = Истина Тогда
				ФизическиеЛицаДляПересчетаНДФЛ.Добавить(ЭлементКоллекции.Значение.ФизическоеЛицо);
			КонецЕсли;
			ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетСтроки;
		КонецЦикла;
		
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачислений);
		
	Иначе
		
		Для каждого СтрокаТЗ Из ЗарплатаМесяца.Начисления Цикл
			Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			БухучетСтроки = БухучетНачислений.Скопировать(Отбор, СтрокаКолонок);
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов И ИзмениласьДоляЕНВД(СтрокаТЗ.РаспределениеПоСтатьям, БухучетСтроки) Тогда
				ФизическиеЛицаДляВзносов.Добавить(СтрокаТЗ.ФизическоеЛицо);
			КонецЕсли;
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ И СтрокиИзмениласьДоляГранта[СтрокаТЗ.ИдентификаторСтрокиБухучет] = Истина Тогда
				ФизическиеЛицаДляПересчетаНДФЛ.Добавить(СтрокаТЗ.ФизическоеЛицо);
			КонецЕсли;
			СтрокаТЗ.РаспределениеПоСтатьям = БухучетСтроки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов И ФизическиеЛицаДляВзносов.Количество()>0 Тогда
		НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов, ФизическиеЛицаДляВзносов, Истина);
	КонецЕсли;
	
	Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаНДФЛ И ФизическиеЛицаДляПересчетаНДФЛ.Количество()>0 Тогда
		НастройкиОбновленияБухучета.ТребуетсяПересчетНДФЛ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НастройкиОбновленияБухучета.ФизическиеЛицаДляПересчетаНДФЛ, ФизическиеЛицаДляПересчетаНДФЛ, Истина);
	КонецЕсли;
	
	Если УдалитьВТ.Количество() > 0 Тогда
		УничтожитьВТ(УдалитьВТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтражениеНачисленийПоДоговорамВБухучете()

	Если Не БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СоответствиеСтрокНачислений = Новый Соответствие;
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	ОтобратьСтрокиТаблицыДоговорыПодрядаПоУсловиям(ДоговорыПодряда, СоответствиеСтрокНачислений);
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БухучетНачислений = ПолучитьБухучетНачисленийПоДоговорамСоздатьВременнуюТаблицу(ДоговорыПодряда, ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
	
	ФизическиеЛицаДляВзносов = Новый Массив;
	
	// поместим бухучет в строки основной таблицы
	БухучетНачислений.Индексы.Добавить("ИдентификаторСтроки");
	СтрокаКолонок = ОтражениеЗарплатыВБухучете.СтрокаКолонокРаспределенияБезИдентификатораСтроки(БухучетНачислений);
	Отбор = Новый Структура("ИдентификаторСтроки");
	Если СоответствиеСтрокНачислений.Количество() > 0 Тогда
		
		Для каждого ЭлементКоллекции Из СоответствиеСтрокНачислений Цикл
			Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
			БухучетСтроки = БухучетНачислений.Скопировать(Отбор, СтрокаКолонок);
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов Тогда
				Если ИзмениласьДоляЕНВД(ЭлементКоллекции.Значение.РаспределениеПоСтатьям, БухучетСтроки) Тогда
					ФизическиеЛицаДляВзносов.Добавить(ЭлементКоллекции.Значение.ФизическоеЛицо);
				КонецЕсли;
			КонецЕсли;
			ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетСтроки;
		КонецЦикла;
		
		// удалим из менеджера временную таблицу с бухучетом  
		УдалитьВТ = Новый Массив;
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
		УничтожитьВТ(УдалитьВТ);
		
	Иначе
		
		Для каждого СтрокаТЗ Из ЗарплатаМесяца.ДоговорыПодряда Цикл
			Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			БухучетСтроки = БухучетНачислений.Скопировать(Отбор, СтрокаКолонок);
			Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов Тогда
				Если ИзмениласьДоляЕНВД(СтрокаТЗ.РаспределениеПоСтатьям, БухучетСтроки) Тогда
					ФизическиеЛицаДляВзносов.Добавить(СтрокаТЗ.ФизическоеЛицо);
				КонецЕсли;
			КонецЕсли;
			СтрокаТЗ.РаспределениеПоСтатьям = БухучетСтроки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НастройкиОбновленияБухучета.ПроверятьНеобходимостьПересчетаВзносов И ФизическиеЛицаДляВзносов.Количество()>0 Тогда
		НастройкиОбновленияБухучета.ТребуетсяПересчетВзносов = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НастройкиОбновленияБухучета.ФизическиеЛицаРасчетаВзносов, ФизическиеЛицаДляВзносов,Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете()

	Если Не НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНДФЛ = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатРасчетаНДФЛ();
	НДФЛКЗачету = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаКорректировкиВыплаты();
	НДФЛЗачтено = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаКорректировкиВыплаты();
	
	СоответствиеСтрокНДФЛ = Новый Соответствие;
	СоответствиеСтрокКорректировокВыплаты = Новый Соответствие;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ И ЗарплатаМесяца.НДФЛ.Количество() > 0 Тогда
		
		НДФЛРезультатыРасчета = ЗарплатаМесяца.НДФЛ;
		ОтобратьСтрокиТаблицыНДФЛПоУсловиям(НДФЛРезультатыРасчета, СоответствиеСтрокНДФЛ);
		
		Для каждого СтрокаТЗ Из НДФЛРезультатыРасчета Цикл
			Сумма = СтрокаТЗ.Налог - СтрокаТЗ.ЗачтеноАвансовыхПлатежей;
			Если Сумма <> 0 Тогда
				НоваяСтрока = ТаблицаНДФЛ.Добавить();
				НоваяСтрока.КатегорияДохода 	= СтрокаТЗ.КатегорияДохода;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
				НоваяСтрока.Территория 			= СтрокаТЗ.Подразделение;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты И ЗарплатаМесяца.КорректировкиВыплаты.Количество() > 0 Тогда
		
		КорректировкиВыплаты = ЗарплатаМесяца.КорректировкиВыплаты;
		ОтобратьСтрокиТаблицыКорректировкиВыплатыПоУсловиям(КорректировкиВыплаты, СоответствиеСтрокКорректировокВыплаты);
		
		Для каждого СтрокаТЗ Из КорректировкиВыплаты Цикл
			Сумма = СтрокаТЗ.КорректировкаВыплаты;
			Если Сумма < 0 Тогда
				НоваяСтрока = НДФЛКЗачету.Добавить();
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
			ИначеЕсли Сумма > 0 Тогда
				НоваяСтрока = НДФЛЗачтено.Добавить();
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Если ТаблицаНДФЛ.Количество()=0 И НДФЛКЗачету.Количество()=0 И НДФЛЗачтено.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ();
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете();
	ИсходныеДанные.МенеджерВременныхТаблиц  = МенеджерВременныхТаблиц;
	ИсходныеДанные.Организация    			= Организация;
	ИсходныеДанные.МесяцНачисления 			= МесяцНачисления;
	ИсходныеДанные.ИмяВТБухучетНачислений 	= ПараметрыБухучета.ИмяВТБухучетВсехНачислений;
	ИсходныеДанные.ОкончательныйРасчет		= НастройкиНДФЛ.ОкончательныйРасчет;
	ИсходныеДанные.ИсключаемыйРегистратор 	= ИсключаемыйРегистратор;
	ИсходныеДанные.РезультатРасчетаНДФЛ		= ТаблицаНДФЛ;
	ИсходныеДанные.НДФЛКЗачету		 		= НДФЛКЗачету;
	ИсходныеДанные.НДФЛЗачтено		 		= НДФЛЗачтено;
	
	РезультатыОтраженияВБухучете = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете(ИсходныеДанные);
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	БухучетНДФЛ = РезультатыОтраженияВБухучете.БухучетНДФЛ;
	Если БухучетНДФЛ.Количество() > 0 Тогда
		
		БухучетНДФЛ.Индексы.Добавить("ИдентификаторСтроки");
		СтрокаКолонок = ОтражениеЗарплатыВБухучете.СтрокаКолонокРаспределенияБезИдентификатораСтроки(БухучетНДФЛ);
		
		Если СоответствиеСтрокНДФЛ.Количество() > 0 Тогда
			Для каждого ЭлементКоллекции Из СоответствиеСтрокНДФЛ Цикл
				Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;	
				ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетНДФЛ.Скопировать(Отбор, СтрокаКолонок);
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из ЗарплатаМесяца.НДФЛ Цикл
				Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				СтрокаТЗ.РаспределениеПоСтатьям = БухучетНДФЛ.Скопировать(Отбор, СтрокаКолонок);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	БухучетКорректировкиВыплаты = РезультатыОтраженияВБухучете.БухучетКорректировкиВыплаты;
	Если БухучетКорректировкиВыплаты.Количество() > 0 Тогда
		
		БухучетКорректировкиВыплаты.Индексы.Добавить("ИдентификаторСтроки");
		СтрокаКолонок = ОтражениеЗарплатыВБухучете.СтрокаКолонокРаспределенияБезИдентификатораСтроки(БухучетКорректировкиВыплаты);
		
		Если СоответствиеСтрокКорректировокВыплаты.Количество() > 0 Тогда
			Для каждого ЭлементКоллекции Из СоответствиеСтрокКорректировокВыплаты Цикл
				Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;	
				ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетКорректировкиВыплаты.Скопировать(Отбор, СтрокаКолонок);
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из ЗарплатаМесяца.КорректировкиВыплаты Цикл
				Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				СтрокаТЗ.РаспределениеПоСтатьям = БухучетКорректировкиВыплаты.Скопировать(Отбор, СтрокаКолонок);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтражениеУдержанийИЗаймовВБухучете()

	Если Не НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		Возврат;
	КонецЕсли;

	ТаблицаУдержаний = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатРасчетаУдержаний();
	ТаблицаЗаймов    = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатПогашениеЗаймов();
	
	СоответствиеСтрокУдержаний = Новый Соответствие;
	СоответствиеСтрокЗаймов = Новый Соответствие;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний И ЗарплатаМесяца.Удержания.Количество() > 0 Тогда
		
		Удержания = ЗарплатаМесяца.Удержания;
		ОтобратьСтрокиТаблицыУдержанийПоУсловиям(Удержания, СоответствиеСтрокУдержаний);
		
		Для каждого СтрокаТЗ Из Удержания Цикл
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ВидУдержания = СтрокаТЗ.Удержание;
			НоваяСтрока.Сумма = СтрокаТЗ.Результат;
			НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
		КонецЦикла;
		
	КонецЕсли;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов И ЗарплатаМесяца.ПогашениеЗаймов.Количество() > 0 Тогда
		
		ПогашениеЗаймов = ЗарплатаМесяца.ПогашениеЗаймов;
		ОтобратьСтрокиТаблицыПогашениеЗаймовПоУсловиям(ПогашениеЗаймов, СоответствиеСтрокЗаймов);
		
		Для каждого СтрокаТЗ Из ПогашениеЗаймов Цикл
			Если СтрокаТЗ.ПогашениеЗайма <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.ПогашениеЗайма;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;
			Если СтрокаТЗ.НалогНаМатериальнуюВыгоду <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.НалогНаМатериальнуюВыгоду;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;	
			Если СтрокаТЗ.ПогашениеПроцентов <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.ПогашениеПроцентов;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;	
			Если СтрокаТЗ.НачисленоПроцентов <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.НачисленоПроцентов;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;	
			Если СтрокаТЗ.МатериальнаяВыгода <> 0 Тогда
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма 	  = СтрокаТЗ.МатериальнаяВыгода;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам;
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаУдержаний.Количество()=0 И ТаблицаЗаймов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ();
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете();
	ИсходныеДанные.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ИсходныеДанные.Организация    			= Организация;
	ИсходныеДанные.МесяцНачисления 			= МесяцНачисления;
	ИсходныеДанные.ИмяВТБухучетНачислений 	= ПараметрыБухучета.ИмяВТБухучетВсехНачислений;
	ИсходныеДанные.ОкончательныйРасчет		= Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу;
	ИсходныеДанные.ИсключаемыйРегистратор 	= ИсключаемыйРегистратор;
	ИсходныеДанные.ТаблицаУдержаний			= ТаблицаУдержаний;
	ИсходныеДанные.ТаблицаЗаймов			= ТаблицаЗаймов;
	ИсходныеДанные.ВидыНачисленийДополненияРасчетнойБазы = Обработки.МенеджерРасчетаЗарплаты.ВидыНачисленийДополненияРасчетнойБазыУдержаний();
	
	РезультатыОтраженияВБухучете = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеУдержанийИЗаймовВБухучете(ИсходныеДанные);
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	БухучетУдержаний = РезультатыОтраженияВБухучете.БухучетУдержаний;
	Если БухучетУдержаний.Количество() > 0 Тогда
		
		БухучетУдержаний.Индексы.Добавить("ИдентификаторСтроки");
		СтрокаКолонок = ОтражениеЗарплатыВБухучете.СтрокаКолонокРаспределенияБезИдентификатораСтроки(БухучетУдержаний);
		
		Если СоответствиеСтрокУдержаний.Количество() > 0 Тогда
			Для каждого ЭлементКоллекции Из СоответствиеСтрокУдержаний Цикл
				Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;	
				ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетУдержаний.Скопировать(Отбор, СтрокаКолонок);
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из ЗарплатаМесяца.Удержания Цикл
				Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				СтрокаТЗ.РаспределениеПоСтатьям = БухучетУдержаний.Скопировать(Отбор, СтрокаКолонок);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	БухучетЗаймов = РезультатыОтраженияВБухучете.БухучетЗаймов;
	Если БухучетЗаймов.Количество() > 0 Тогда
		
		БухучетЗаймов.Индексы.Добавить("ИдентификаторСтроки");
		СтрокаКолонок = ОтражениеЗарплатыВБухучете.СтрокаКолонокРаспределенияБезИдентификатораСтроки(БухучетЗаймов);
		
		Если СоответствиеСтрокЗаймов.Количество() > 0 Тогда
			Для каждого ЭлементКоллекции Из СоответствиеСтрокЗаймов Цикл
				Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;	
				ЭлементКоллекции.Значение.РаспределениеПоСтатьям = БухучетЗаймов.Скопировать(Отбор, СтрокаКолонок);
			КонецЦикла;
		Иначе
			Для каждого СтрокаТЗ Из ЗарплатаМесяца.ПогашениеЗаймов Цикл
				Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиБухучет;
				СтрокаТЗ.РаспределениеПоСтатьям = БухучетЗаймов.Скопировать(Отбор, СтрокаКолонок);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//	Создание временной таблицы ВТНачисленияСДаннымиЕНВД для регистрации доходов страховых взносов.
Процедура СоздатьВТНачисленияСДаннымиЕНВД(Начисления, ИмяВТНачисления)
	
	Если Не ПараметрыБухучета.ПлательщикЕНВД Или Не НастройкиРасчета.РассчитыватьВзносы Тогда
		
		// Если не применяется ЕНВД или доходы регистрируются не для расчета страховых взносов
		// указываем для всех начислений долю ЕНВД = 0.
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДНулеваяДоляЕНВД(МенеджерВременныхТаблиц, ИмяВТНачисления);
	Иначе
		
		УдалитьВТ = Новый Массив;
		
		Если НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД И ПараметрыБухучета.ПроцентЕНВД = Неопределено Тогда
			// Если процент ЕНВД нужен, но не задан на текущий месяц,
			// проверим есть ли в таблице начисления, для которых нужен процент для распределения,
			// и если такие начисления есть будет вызвано исключение.
			ДобавитьИдентификаторСтрокиБухучета(Начисления);
			СоздатьВТНачисленияДляОтраженияВБухучете(Начисления, "ВТНачисленияДляПроверкиРегистрацииПроцентаЕНВД");
			УдалитьВТ.Добавить("ВТНачисленияДляПроверкиРегистрацииПроцентаЕНВД");
			ОтражениеЗарплатыВБухучете.ПроверитьНеобходимостьРегистрацииПроцентаЕНВДНаТекущийМесяцВызватьИсключение(Организация, МесяцНачисления, МенеджерВременныхТаблиц, "ВТНачисленияДляПроверкиРегистрацииПроцентаЕНВД", "Сотрудник,ДатаНачала");
		КонецЕсли;
		
		ИмяВТБухучетНачислений = "ВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов";
		СоздатьВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов(Начисления, ИмяВТБухучетНачислений);
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, ИмяВТБухучетНачислений, ИмяВТНачисления);
		
		УдалитьВТ.Добавить(ИмяВТБухучетНачислений);
		УничтожитьВТ(УдалитьВТ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьБухучетНачисленийСоздатьВременнуюТаблицу(Начисления, ИмяВТБухучетНачислений)

	УдалитьВТ = Новый Массив;
	
	ИмяВТНачисления = "ВТНачисленияДляОтраженияВБухучете";
	СоздатьВТНачисленияДляОтраженияВБухучете(Начисления, ИмяВТНачисления);
	УдалитьВТ.Добавить(ИмяВТНачисления);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДокументыОснования
	|ИЗ
	|	ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Коэффициенты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Коэффициенты.СтатьяРасходов КАК СтатьяРасходов,
	|	Коэффициенты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Коэффициенты.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	Коэффициенты.Коэффициент КАК Коэффициент
	|ИЗ
	|	ВТДокументыОснования КАК НачисленияТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыРаспределенияСреднегоЗаработка КАК Коэффициенты
	|		ПО НачисленияТаблица.ДокументОснование = Коэффициенты.ДокументОснование
	|			И (Коэффициенты.ДокументОснование <> &ИсключаемыйРегистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки";
	УдалитьВТ.Добавить("ВТДокументыОснования");
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	СтрокиКоэффициентыСреднегоЗаработка = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		Таблица = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Выборка);
		КонецЦикла;
		СтрокиКоэффициентыСреднегоЗаработка.Вставить(ИдентификаторСтроки, Таблица);
	КонецЦикла;

	СтрокиКоэффициентыСохраняемогоДС = Новый Соответствие;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ЗаполнитьСтрокиКоэффициентыСохраняемогоДС(Запрос, СтрокиКоэффициентыСохраняемогоДС);
	КонецЕсли;
	
	СтрокиБухучетСторноНачислений = СтрокиБухучетСторноНачислений(Начисления, ИмяВТНачисления);
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете();
	ИсходныеДанные.МенеджерВременныхТаблиц    = МенеджерВременныхТаблиц;
	ИсходныеДанные.МенеджерКадровогоУчета 	  = МенеджерКадровогоУчета();
	ИсходныеДанные.Организация    			  = Организация;
	ИсходныеДанные.МесяцНачисления 			  = МесяцНачисления;
	ИсходныеДанные.ИмяВТБухучетНачислений     = ИмяВТБухучетНачислений;
	ИсходныеДанные.ИмяВТНачисления			  = ИмяВТНачисления;
	ИсходныеДанные.БухучетПервичногоДокумента = НастройкиБухучета.НастройкиБухучетаДокумента;
	ИсходныеДанные.ИсключаемыйРегистратор	  = ИсключаемыйРегистратор;
	ИсходныеДанные.ПроцентЕНВД    			  = ПараметрыБухучета.ПроцентЕНВД;
	ИсходныеДанные.ПлательщикЕНВД             = ПараметрыБухучета.ПлательщикЕНВД;
	ИсходныеДанные.СтрокиБухучетСторноНачислений 			 = СтрокиБухучетСторноНачислений;
	ИсходныеДанные.СтрокиКоэффициентыСреднегоЗаработка   	 = СтрокиКоэффициентыСреднегоЗаработка;
	ИсходныеДанные.СтрокиКоэффициентыСохраняемогоДС   	 	 = СтрокиКоэффициентыСохраняемогоДС;
	ИсходныеДанные.КоэффициентыСреднегоЗаработкаДокумента    = НастройкиБухучета.КоэффициентыСреднегоЗаработкаДокумента;
	ИсходныеДанные.КоэффициентыСреднегоЗаработкаФССДокумента = НастройкиБухучета.КоэффициентыСреднегоЗаработкаФССДокумента;
	ИсходныеДанные.МенеджерДанныхУчетаВремени 				 = МенеджерДанныхУчетаВремени;
	ИсходныеДанные.РаспределениеСохраняемогоДС  			 = НастройкиБухучета.РаспределениеСохраняемогоДС;
	ИсходныеДанные.СоответствиеСотрудников 					 = НастройкиБухучета.СоответствиеСотрудников;
	ИсходныеДанные.ДатаНачалаДляБухучета                     = НастройкиБухучета.ДатаНачалаДляБухучета;
	ИсходныеДанные.КоэффициентыРаспределенияДенежногоСодержания = НастройкиБухучета.КоэффициентыРаспределенияДенежногоСодержания;
	
	// В менеджере временных таблиц будет создана таблица с именем ИмяВТБухучетНачислений.
	БухучетНачислений = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеНачисленийВБухучете(ИсходныеДанные);
	УничтожитьВТ(УдалитьВТ);
	
	Возврат БухучетНачислений;
	
КонецФункции

Функция ПолучитьБухучетНачисленийПоДоговорамСоздатьВременнуюТаблицу(ДоговорыПодряда, ИмяВТБухучетНачислений)

	УдалитьВТ = Новый Массив;
	
	ИмяВТНачисления = "ВТНачисленияПоДоговорамДляОтраженияВБухучете";
	СоздатьВТНачисленияПоДоговорамДляОтраженияВБухучете(ДоговорыПодряда, ИмяВТНачисления);
	УдалитьВТ.Добавить(ИмяВТНачисления);
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете();
	ИсходныеДанные.Организация    			  = Организация;
	ИсходныеДанные.ИмяВТБухучетНачислений     = ИмяВТБухучетНачислений;
	ИсходныеДанные.ИмяВТНачисления		      = ИмяВТНачисления;
	ИсходныеДанные.МенеджерВременныхТаблиц    = МенеджерВременныхТаблиц;
	ИсходныеДанные.ПлательщикЕНВД             = ПараметрыБухучета.ПлательщикЕНВД;
	
	// В менеджере временных таблиц будет создана таблица с именем ИмяВТБухучетНачисленийПоДоговорам.
	БухучетНачислений = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеНачисленийПоДоговорамВБухучете(ИсходныеДанные);
	УничтожитьВТ(УдалитьВТ);
	
	Возврат БухучетНачислений;

КонецФункции

Процедура ОтобратьСтрокиТаблицыНачисленийПоУсловиям(Начисления, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.Сотрудник) Тогда
			ДобавитьИдентификаторСтрокиБухучета(Начисления);
			Возврат;
		КонецЕсли;
		
		Начисления = ТаблицаНачислений();
		ДобавитьИдентификаторСтрокиБухучета(Начисления);
		
		// выполним отбор строк по сотруднику и зависимым начислениям
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.Начисления Цикл
			Если СтрокаТЗ.Сотрудник = НастройкиОбновленияБухучета.Сотрудник
					И НастройкиОбновленияБухучета.ЗависимыеНачисления.Найти(СтрокаТЗ.Начисление) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, Начисления, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(Начисления);
			Возврат;
		КонецЕсли;
		
		Начисления = ТаблицаНачислений();
		ДобавитьИдентификаторСтрокиБухучета(Начисления);
		
		НайденныеСтроки = ПересчетСотрудников.НайтиСтроки(Новый Структура("ПересчитыватьНачисления", Истина));
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Сотрудник");
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.Начисления Цикл
			Если Сотрудники.Найти(СтрокаТЗ.Сотрудник) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, Начисления, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыДоговорыПодрядаПоУсловиям(ДоговорыПодряда, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.Сотрудник) Тогда
			ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
			Возврат;
		КонецЕсли;
		
		ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
		ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
		
		// выполним отбор строк по сотруднику, зависимым начислениям у договоров нет
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.ДоговорыПодряда Цикл
			Если СтрокаТЗ.Сотрудник = НастройкиОбновленияБухучета.Сотрудник Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, ДоговорыПодряда, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
			Возврат;
		КонецЕсли;
		
		ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
		ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
		
		НайденныеСтроки = ПересчетСотрудников.НайтиСтроки(Новый Структура("ПересчитыватьДоговорыПодряда", Истина));
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Сотрудник");
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.ДоговорыПодряда Цикл
			Если Сотрудники.Найти(СтрокаТЗ.Сотрудник) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, ДоговорыПодряда, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыНДФЛПоУсловиям(НДФЛРезультатыРасчета, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.ФизическоеЛицо) Тогда
			ДобавитьИдентификаторСтрокиБухучета(НДФЛРезультатыРасчета);
			Возврат;
		КонецЕсли;
		
		НДФЛРезультатыРасчета = НДФЛРезультатыРасчета.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(НДФЛРезультатыРасчета);
		
		// выполним отбор строк по физическому лицу
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.НДФЛ Цикл
			Если СтрокаТЗ.ФизическоеЛицо = НастройкиОбновленияБухучета.ФизическоеЛицо Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, НДФЛРезультатыРасчета, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(НДФЛРезультатыРасчета);
			Возврат;
		КонецЕсли;
		
		НДФЛРезультатыРасчета = НДФЛРезультатыРасчета.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(НДФЛРезультатыРасчета);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьНДФЛ", Истина));
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.НДФЛ Цикл
			Если ФизическиеЛицаМассив.Найти(СтрокаТЗ.ФизическоеЛицо) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, НДФЛРезультатыРасчета, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыКорректировкиВыплатыПоУсловиям(КорректировкиВыплаты, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.ФизическоеЛицо) Тогда
			ДобавитьИдентификаторСтрокиБухучета(КорректировкиВыплаты);
			Возврат;
		КонецЕсли;
		
		КорректировкиВыплаты = КорректировкиВыплаты.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(КорректировкиВыплаты);
		
		// выполним отбор строк по физическому лицу
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.КорректировкиВыплаты Цикл
			Если СтрокаТЗ.ФизическоеЛицо = НастройкиОбновленияБухучета.ФизическоеЛицо Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, КорректировкиВыплаты, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(КорректировкиВыплаты);
			Возврат;
		КонецЕсли;
		
		КорректировкиВыплаты = КорректировкиВыплаты.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(КорректировкиВыплаты);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьКорректировкиВыплаты", Истина));
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.КорректировкиВыплаты Цикл
			Если ФизическиеЛицаМассив.Найти(СтрокаТЗ.ФизическоеЛицо) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, КорректировкиВыплаты, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыУдержанийПоУсловиям(Удержания, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.ФизическоеЛицо) Тогда
			ДобавитьИдентификаторСтрокиБухучета(Удержания);
			Возврат;
		КонецЕсли;
		
		Удержания = Удержания.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(Удержания);
		
		// выполним отбор строк по физическому лицу
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.Удержания Цикл
			Если СтрокаТЗ.ФизическоеЛицо = НастройкиОбновленияБухучета.ФизическоеЛицо Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, Удержания, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(Удержания);
			Возврат;
		КонецЕсли;
		
		Удержания = Удержания.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(Удержания);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНачислений", Истина));
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтВзносов", Истина));
		ФизическиеЛицаМассивУдержания = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ФизическиеЛицаМассивУдержания, Истина);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНДФЛ", Истина));
		ФизическиеЛицаМассивУдержания = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ФизическиеЛицаМассивУдержания, Истина);
		
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.Удержания Цикл
			Если ФизическиеЛицаМассив.Найти(СтрокаТЗ.ФизическоеЛицо) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, Удержания, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОтобратьСтрокиТаблицыПогашениеЗаймовПоУсловиям(ПогашениеЗаймов, СоответствиеСтрокКоллекции)

	Если НастройкиОбновленияБухучета.РежимОбновленияБухучетаРасчетов Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбновленияБухучета.ФизическоеЛицо) Тогда
			ДобавитьИдентификаторСтрокиБухучета(ПогашениеЗаймов);
			Возврат;
		КонецЕсли;
		
		ПогашениеЗаймов = ПогашениеЗаймов.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(ПогашениеЗаймов);
		
		// выполним отбор строк по физическому лицу
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.ПогашениеЗаймов Цикл
			Если СтрокаТЗ.ФизическоеЛицо = НастройкиОбновленияБухучета.ФизическоеЛицо Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, ПогашениеЗаймов, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
			ДобавитьИдентификаторСтрокиБухучета(ПогашениеЗаймов);
			Возврат;
		КонецЕсли;
		
		ПогашениеЗаймов = ПогашениеЗаймов.СкопироватьКолонки();
		ДобавитьИдентификаторСтрокиБухучета(ПогашениеЗаймов);
		
		НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьЗаймы", Истина));
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо", Истина);
		ИдентификаторСтроки = 1;
		Для Каждого СтрокаТЗ Из ЗарплатаМесяца.ПогашениеЗаймов Цикл
			Если ФизическиеЛицаМассив.Найти(СтрокаТЗ.ФизическоеЛицо) <> Неопределено Тогда
				ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(СтрокаТЗ, ПогашениеЗаймов, СоответствиеСтрокКоллекции, ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ДобавитьСтрокуВКоллекциюРезультатаДляБухучета(ИсходнаяСтрока, КоллекцияСтрок, СоответствиеСтрокКоллекции, ИдентификаторСтроки)

	НоваяСтрока = КоллекцияСтрок.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
	НоваяСтрока.ИдентификаторСтрокиБухучет = ИдентификаторСтроки;
	СоответствиеСтрокКоллекции.Вставить(ИдентификаторСтроки, ИсходнаяСтрока);
	ИдентификаторСтроки = ИдентификаторСтроки + 1;

КонецПроцедуры

Процедура ДобавитьИдентификаторСтрокиБухучета(Таблица)
	
	Если Таблица.Колонки.Найти("ИдентификаторСтрокиБухучет") = Неопределено Тогда
		Таблица.Колонки.Добавить("ИдентификаторСтрокиБухучет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7,0)));
	КонецЕсли;
	
	ИдентификаторСтроки = 1;
	Для каждого Строка Из Таблица Цикл
		Строка.ИдентификаторСтрокиБухучет = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиБухучетСторноНачислений(Начисления, ИмяВТНачисления)

	СтрокиБухучетСторноНачислений = Новый Соответствие;
	Если Не НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		Возврат СтрокиБухучетСторноНачислений;
	КонецЕсли;
		
	// Заполним соответствие СтрокиБухучетСторноНачислений,
	// ключ - ИдентификаторСтроки,
	// значение - таблица значений с распределением из строки таблицы Начисления.
	
	Запрос = НовыйЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|ГДЕ
	|	Начисления.Сторно
	|	И НЕ Начисления.ФиксСторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ИдентификаторСтроки
	|ИЗ
	|	ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|ГДЕ
	|	Начисления.ФиксСторно";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Начисления.Индексы.Добавить("ИдентификаторСтрокиБухучет");
		Отбор = Новый Структура("ИдентификаторСтрокиБухучет");
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Отбор.ИдентификаторСтрокиБухучет = Выборка.ИдентификаторСтроки;
			НайденныеСтроки = Начисления.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				РезультатыРаспределения = НайденныеСтроки[0].РаспределениеПоСтатьям;
				Если РезультатыРаспределения.Количество()>0 Тогда
					СтрокиБухучетСторноНачислений.Вставить(Выборка.ИдентификаторСтроки, РезультатыРаспределения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Начисления.Индексы.Очистить();
		
	КонецЕсли;
	
	Возврат СтрокиБухучетСторноНачислений;

КонецФункции

Функция НоваяТаблицаТерриторииДляБухучета()

	Территории = Новый ТаблицаЗначений;
	Территории.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Территории.Колонки.Добавить("Территория", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Территории.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	
	Возврат Территории;

КонецФункции

Процедура СоздатьВТНачисленияДляОтраженияВБухучете(Начисления, ИмяВТНачисления)
	
	УдалитьВТ = Новый Массив;
	
	ИспользоватьОбособленныеТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", Организация));
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	ТаблицаНачисленияПоСотрудникам 	= ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаНачисленияДляБухучета();
	Территории 						= НоваяТаблицаТерриторииДляБухучета();
	
	НачисленияРегистрируемыеДокументом = Неопределено;
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(ИсключаемыйРегистратор);
		ВидыДокументовНачислений = ЗарплатаКадрыРасширенныйПовтИсп.ВидыДокументовНачислений();
		НачисленияРегистрируемыеДокументом = ВидыДокументовНачислений[ВидДокумента];
	КонецЕсли;
	
	Для каждого Строка Из Начисления Цикл
		
		Если ИспользоватьОбособленныеТерритории Тогда
			Для каждого СтрокаТерртиории Из Строка.ТерриторииУсловияТруда Цикл
				НоваяСтрокаТерритории = Территории.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТерритории, СтрокаТерртиории);
			    НоваяСтрокаТерритории.ИдентификаторСтроки = Строка.ИдентификаторСтрокиБухучет;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНачисленияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = МесяцНачисления;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[НоваяСтрока.Начисление];
		НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтрокиБухучет;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.ДокументОснование) Тогда
			Если Строка.Дополнительно.Свойство("СтраховойСлучай") И ЗначениеЗаполнено(Строка.Дополнительно.СтраховойСлучай) Тогда
				НоваяСтрока.ДокументОснование = Строка.Дополнительно.СтраховойСлучай;
			ИначеЕсли НачисленияРегистрируемыеДокументом <> Неопределено И НачисленияРегистрируемыеДокументом.Найти(НоваяСтрока.Начисление) <> Неопределено Тогда
				НоваяСтрока.ДокументОснование = ИсключаемыйРегистратор;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", ТаблицаНачисленияПоСотрудникам);
	Запрос.УстановитьПараметр("Территории", Территории);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Территории.ИдентификаторСтроки,
	|	Территории.Территория,
	|	Территории.Результат
	|ПОМЕСТИТЬ ВТТерриторииСтрокНачисленийВременная
	|ИЗ
	|	&Территории КАК Территории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТерриторииСтрокНачислений.ИдентификаторСтроки,
	|	ТерриторииСтрокНачислений.Территория,
	|	СУММА(ТерриторииСтрокНачислений.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТТерриторииСтрокНачислений
	|ИЗ
	|	ВТТерриторииСтрокНачисленийВременная КАК ТерриторииСтрокНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТерриторииСтрокНачислений.ИдентификаторСтроки,
	|	ТерриторииСтрокНачислений.Территория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Организация,
	|	Начисления.ПериодРегистрации,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.Начисление,
	|	Начисления.ПериодДействия,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Результат,
	|	Начисления.ДокументОснование,
	|	Начисления.Сторно,
	|	Начисления.ФиксСторно,
	|	Начисления.ВидОперации
	|ПОМЕСТИТЬ ВТНачисленияТаблица
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТерриторииСтрокНачисленийВременная";
	УдалитьВТ.Добавить("ВТНачисленияТаблица");
	УдалитьВТ.Добавить("ВТТерриторииСтрокНачислений");
	Запрос.Выполнить();
	
	РасчетЗарплатыРасширенный.СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, "ВТНачисленияТаблица");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ПериодРегистрации,
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Начисление,
	|	Начисления.ДокументОснование,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сторно,
	|	Начисления.ФиксСторно,
	|	ЕСТЬNULL(Территории.Результат, Начисления.Результат) КАК Сумма,
	|	ЕСТЬNULL(Территории.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТНачисленияДляОтраженияВБухучете
	|ИЗ
	|	ВТНачисленияТаблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСтрокНачислений КАК Территории
	|		ПО (Территории.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
	Запрос.Выполнить();
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТНачисленияПоДоговорамДляОтраженияВБухучете(Начисления, ИмяВТНачисления)
	
	УдалитьВТ = Новый Массив;
	
	ИспользоватьОбособленныеТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", Организация));
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	ТаблицаНачисленияПоСотрудникам 	= ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаНачисленияДляБухучета();
	Территории 						= НоваяТаблицаТерриторииДляБухучета();
	
	Для каждого Строка Из Начисления Цикл
		
		Если ИспользоватьОбособленныеТерритории Тогда
			Для каждого СтрокаТерртиории Из Строка.ТерриторииУсловияТруда Цикл
				НоваяСтрокаТерритории = Территории.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТерритории, СтрокаТерртиории);
			    НоваяСтрокаТерритории.ИдентификаторСтроки = Строка.ИдентификаторСтрокиБухучет;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНачисленияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = МесяцНачисления;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[НоваяСтрока.Начисление];
		НоваяСтрока.ИдентификаторСтроки = Строка.ИдентификаторСтрокиБухучет;
		
	КонецЦикла;
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", ТаблицаНачисленияПоСотрудникам);
	Запрос.УстановитьПараметр("Территории", Территории);
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Территории.ИдентификаторСтроки,
	|	Территории.Территория,
	|	Территории.Результат
	|ПОМЕСТИТЬ ВТТерриторииСтрокНачисленийВременная
	|ИЗ
	|	&Территории КАК Территории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТерриторииСтрокНачислений.ИдентификаторСтроки,
	|	ТерриторииСтрокНачислений.Территория,
	|	СУММА(ТерриторииСтрокНачислений.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТТерриторииСтрокНачислений
	|ИЗ
	|	ВТТерриторииСтрокНачисленийВременная КАК ТерриторииСтрокНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТерриторииСтрокНачислений.ИдентификаторСтроки,
	|	ТерриторииСтрокНачислений.Территория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.Начисление,
	|	Начисления.ДатаНачала,
	|	Начисления.Датаокончания,
	|	Начисления.Результат,
	|	Начисления.ВидОперации,
	|	Начисления.ДокументОснование
	|ПОМЕСТИТЬ ВТНачисленияТаблица
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	&Организация КАК Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ДатаНачала,
	|	Начисления.Датаокончания,
	|	Начисления.Начисление,
	|	Начисления.ВидОперации,
	|	Начисления.ДокументОснование,
	|	Начисления.ИдентификаторСтроки,
	|	ЛОЖЬ КАК Сторно,
	|	ЛОЖЬ КАК ФиксСторно,
	|	ЕСТЬNULL(Территории.Результат, Начисления.Результат) КАК Сумма,
	|	ЕСТЬNULL(Территории.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияВыполненияРаботВОрганизации
	|ПОМЕСТИТЬ ВТНачисленияДляОтраженияВБухучете
	|ИЗ
	|	ВТНачисленияТаблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСтрокНачислений КАК Территории
	|		ПО Начисления.ИдентификаторСтроки = Территории.ИдентификаторСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТНачисленияТаблица");
	УдалитьВТ.Добавить("ВТТерриторииСтрокНачисленийВременная");
	УдалитьВТ.Добавить("ВТТерриторииСтрокНачислений");
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Функция БухучетНачисленийИзКоллекцииСтрок(Начисления)

	БухучетНачислений = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаБухучетНачислений();
	
	Если Начисления.Колонки.Найти("ИдентификаторСтрокиБухучет") <> Неопределено Тогда
		ИмяПоляИдентификаторСтроки = "ИдентификаторСтрокиБухучет";
	Иначе
		ИмяПоляИдентификаторСтроки = "ИдентификаторСтроки";
	КонецЕсли;
	
	Для Каждого Строка Из Начисления Цикл
		Для каждого РезультатРаспределения Из Строка.РаспределениеПоСтатьям Цикл
			НоваяСтрока = БухучетНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатРаспределения);
			НоваяСтрока.ИдентификаторСтроки = Строка[ИмяПоляИдентификаторСтроки];
			НоваяСтрока.Сумма = РезультатРаспределения.Результат;
			НоваяСтрока.Организация = Организация;
		КонецЦикла;
	КонецЦикла;
	
	Возврат БухучетНачислений;

КонецФункции

Процедура СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ()

	Если ВТСуществует(ПараметрыБухучета.ИмяВТБухучетВсехНачислений) Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	СуществуетВТБухучетНачислений  = ВТСуществует(ПараметрыБухучета.ИмяВТБухучетНачислений);
	СуществуетВТБухучетДоговорыГПХ = ВТСуществует(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
	
	Если Не СуществуетВТБухучетНачислений Тогда
		БухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(ЗарплатаМесяца.Начисления);
	КонецЕсли;
	Если Не СуществуетВТБухучетДоговорыГПХ Тогда
		БухучетДоговорыГПХ = БухучетНачисленийИзКоллекцииСтрок(ЗарплатаМесяца.ДоговорыПодряда);
	КонецЕсли;
	
	Если Не СуществуетВТБухучетНачислений И Не СуществуетВТБухучетДоговорыГПХ Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(БухучетДоговорыГПХ, БухучетНачислений);
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ПараметрыБухучета.ИмяВТБухучетВсехНачислений);
		Возврат;
	КонецЕсли;
			
	Если Не СуществуетВТБухучетНачислений Тогда
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ПараметрыБухучета.ИмяВТБухучетНачислений);
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачислений);
	ИначеЕсли Не СуществуетВТБухучетДоговорыГПХ Тогда
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетДоговорыГПХ, ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
		УдалитьВТ.Добавить(ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
	КонецЕсли;
	
	ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ(МенеджерВременныхТаблиц, ПараметрыБухучета);
		
	Если УдалитьВТ.Количество()>0 Тогда
		УничтожитьВТ(УдалитьВТ);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов(Начисления, ИмяВТБухучетНачислений)
	
	Если НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		// Получим бухучет из таблицы Начисления и поместим данные во временную таблицу с именем ИмяВТБухучетНачислений.
		БухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(Начисления);
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ИмяВТБухучетНачислений);
		РасчетЗарплатыРасширенный.СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, ИмяВТБухучетНачислений);
	Иначе
		
		// Выполним отражение в бухучете начислений, результат будет помещен в таблицу ИмяВТБухучетНачислений.
		ДобавитьИдентификаторСтрокиБухучета(Начисления);
		ПолучитьБухучетНачисленийСоздатьВременнуюТаблицу(Начисления, ИмяВТБухучетНачислений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыБухучета()

	ПараметрыБухучета.ПлательщикЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, МесяцНачисления);
	ПараметрыБухучета.ПроцентЕНВД    = ?(Не ПараметрыБухучета.ПлательщикЕНВД, 0, ОтражениеЗарплатыВБухучете.ПроцентЕНВД(Организация, МесяцНачисления));
	ПараметрыБухучета.ИмяВТБухучетВсехНачислений		 = "ВТБухучетВсехНачисленийМенеджераРасчета";
	ПараметрыБухучета.ИмяВТБухучетНачислений		     = "ВТБухучетНачисленийМенеджераРасчета";
	ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам  = "ВТБухучетНачисленийПоДоговорамМенеджераРасчета";
	
КонецПроцедуры

Процедура ЗаполнитьВыполняемыеДействияБухучетаПриРасчетеКоллекций()

	Если Не НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
		
		БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Ложь;
		БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Ложь;
		
	Иначе
		
		БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = НастройкиРасчета.РассчитыватьНачисления;
		БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = НастройкиРасчета.РассчитыватьДоговорыПодряда;
		
		РассчитывалисьНачисления = НастройкиРасчета.РассчитыватьНачисления Или НастройкиРасчета.РассчитыватьДоговорыПодряда;
		
		БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ		 = НастройкиРасчета.РассчитыватьНДФЛ Или РассчитывалисьНачисления;
		БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний = НастройкиРасчета.РассчитыватьУдержания Или РассчитывалисьНачисления;
		БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов    = НастройкиРасчета.РассчитыватьЗаймы Или РассчитывалисьНачисления;
		БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = НастройкиРасчета.РассчитыватьКорректировкиВыплаты Или РассчитывалисьНачисления;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьВыполняемыеДействияПриОбновленииБухучета()

	Если НастройкиОбновленияБухучета.ОбновитьВсеТаблицы Тогда
		
		БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ 	  = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов     = Истина;
		БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты = Истина;
		
	Иначе
		
		СоответсвиеИмен = Новый Соответствие;
		СоответсвиеИмен.Вставить("Начисления", 				 "Начисления");
		СоответсвиеИмен.Вставить("НачисленияПерерасчет", 	 "Начисления");
		СоответсвиеИмен.Вставить("ОплатаТруда", 			 "Начисления");
		СоответсвиеИмен.Вставить("Пособия", 				 "Начисления");
		СоответсвиеИмен.Вставить("Льготы", 					 "Начисления");
		СоответсвиеИмен.Вставить("ОплатаЛьгот", 			 "Начисления");
		СоответсвиеИмен.Вставить("ДоначисленияИПерерасчеты", "Начисления");
		СоответсвиеИмен.Вставить("НачисленияПоДоговорам", 	 "ДоговорыПодряда");
		СоответсвиеИмен.Вставить("ПогашениеЗаймов", 		 "ПогашениеЗаймов");
		СоответсвиеИмен.Вставить("НДФЛ", 					 "НДФЛ");
		СоответсвиеИмен.Вставить("Удержания", 				 "Удержания");
		СоответсвиеИмен.Вставить("КорректировкиВыплаты", 	 "КорректировкиВыплаты");	
		
		ИменаТаблицДляОбновленияМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НастройкиОбновленияБухучета.ИменаТаблицДляОбновления, ",");
		
		Для каждого ИмяТаблицыДокумента Из ИменаТаблицДляОбновленияМассив Цикл
			
			ИмяТаблицыМенеджера = СоответсвиеИмен[ИмяТаблицыДокумента];
			Если ИмяТаблицыМенеджера = "Начисления" И НастройкиОбновленияБухучета.ЗависимыеНачисления.Количество()>0 Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "ДоговорыПодряда" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетДоговоров  = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "ПогашениеЗаймов" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетЗаймов  = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "НДФЛ" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетНДФЛ  = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "Удержания" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетУдержаний  = Истина;
			ИначеЕсли ИмяТаблицыМенеджера = "КорректировкиВыплаты" Тогда
				БухучетВыполняемыеДействия.ВыполнятьБухучетКорректировокВыплаты  = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьДанныеДляОбновленияБухучетаРезультатовРасчета()
	
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.Начисления);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.ДоговорыПодряда);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.Удержания);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.НДФЛ);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.КорректировкиВыплаты);
	ДобавитьИдентификаторСтрокиБухучета(Зарплата.ПогашениеЗаймов);
	
	Если Не НастройкиОбновленияБухучета.ОбновитьВсеТаблицы Тогда
		// Выполняем распределение зависимых результатов после редактирования бухучета в форме.
		
		Если БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений Тогда
			// Таблица с бухучетом начислений до обновления, для получения бухучета зависимых начислений.
			ИмяВТ = "ВТБухучетНачисленийИзФормы";
			БухучетНачислений = БухучетНачисленийИзКоллекцииСтрок(Зарплата.Начисления);
			ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ИмяВТ);
			РасчетЗарплатыРасширенный.СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, ИмяВТ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений И Зарплата.Начисления.Количество()>0 Тогда
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременныйРегистратор);
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Зарплата.Начисления);
		УстановитьТаблицуНачисления(Зарплата.Начисления);
		ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
		СоздатьВТПоРегиструНачисления();	
	КонецЕсли;
	
КонецПроцедуры

Функция ЗависимыеНачисленияСоСтратегиейБухучетаПоБазовымРасчетам(ВидРасчета)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазовыеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|ГДЕ
	|	БазовыеВидыРасчета.ВидРасчета = &ВидРасчета
	|	И БазовыеВидыРасчета.Ссылка.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	

КонецФункции

#КонецОбласти

#Область Прочее

Функция ОписаниеВТУдержания()
	
	Описание = Новый Структура(
		"ИмяВТ, 
		|ИмяПоляФизическоеЛицо,
		|ИмяПоляУдержание,
		|ИмяПоляНачалоПериода,
		|ИмяПоляОкончаниеПериода");
		
	Описание.ИмяВТ = "ВТУдержания";
	Описание.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	Описание.ИмяПоляНачалоПериода = "ДатаНачала";
	Описание.ИмяПоляОкончаниеПериода = "ДатаОкончания";
		
	Возврат Описание;
	
КонецФункции

Процедура ЗаполнитьИдентификаторСтроки(ТаблицаСтрокКРасчету)
	ЕстьТерритории = ТаблицаСтрокКРасчету.Колонки.Найти("ТерриторииУсловияТруда") <> Неопределено;
	
	ИдентификаторСтроки = 1;
	Для Каждого Строка Из ТаблицаСтрокКРасчету Цикл
		Строка.ИдентификаторСтроки = ИдентификаторСтроки;
		Если Строка.Показатели.Количество() > 0 Тогда
			Строка.Показатели.ЗаполнитьЗначения(ИдентификаторСтроки, "ИдентификаторСтроки");
		КонецЕсли;
		Если ЕстьТерритории И Строка.ТерриторииУсловияТруда.Количество() > 0 Тогда
			Строка.ТерриторииУсловияТруда.ЗаполнитьЗначения(ИдентификаторСтроки, "ИдентификаторСтроки");
		КонецЕсли;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСохраняемыеПоляВТ(ТекстЗапроса, ИмяВТ, ПсевдонимТаблицы, ПоляИсключения = Неопределено)
	Если ПоляИсключения = Неопределено Тогда
		ПоляИсключения = Новый Массив;
	КонецЕсли;	
	ЗарплатаКадры.ЗаполнитьИменаПолейВТ(ТекстЗапроса, МенеджерВременныхТаблиц, ИмяВТ, ПсевдонимТаблицы, ПоляИсключения)
КонецПроцедуры

Функция ТаблицаРасшифровкиРасчетнойБазы()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("БазовоеНачисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СуммаЦеломесячная", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КатегорияБазовогоНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	Таблица.Колонки.Добавить("СуммаДополнения", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СуммаНДФЛ", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("НеполныйМесяц", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаОпределяющихПоказателей()
		
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Показатели.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Показатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	Показатели.Колонки.Добавить("Значение", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	Показатели.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));

	Возврат Показатели;
	
КонецФункции

Процедура ДополнитьТаблицуСотрудниковПериодов(ТаблицаИсточник, ТаблицаПриемник, ИмяПоляСотрудник)
	
	СтрокиПриемника = ТаблицаПриемник.Скопировать(, ИмяПоляСотрудник + ", ДатаНачала, ДатаОкончания");
	СтрокиПриемника.Свернуть(ИмяПоляСотрудник + ", ДатаНачала, ДатаОкончания");
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		ДобавлятьСтроку = Истина;
		Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
			Если СтрокаИсточника[ИмяПоляСотрудник] = СтрокаПриемника[ИмяПоляСотрудник]
				И ДатаМежду(СтрокаИсточника.ДатаНачала, СтрокаПриемника.ДатаНачала, СтрокаПриемника.ДатаОкончания)
				И ДатаМежду(СтрокаИсточника.ДатаОкончания, СтрокаПриемника.ДатаНачала, СтрокаПриемника.ДатаОкончания) Тогда
				ДобавлятьСтроку = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДобавлятьСтроку Тогда
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПлановыеНачисленияУдержания

Функция ПредельныеСуммыУдержаний()
	Если КэшПредельныеСуммыУдержаний <> Неопределено Тогда
		Возврат КэшПредельныеСуммыУдержаний;	
	КонецЕсли;	
	
	ОтборФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПолученияПериодическихДанныхФизическихЛиц, "ФизическоеЛицо", Истина);
	
	Период = КонецМесяца(МесяцНачисления);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборФизическихЛиц", ОтборФизическихЛиц);
	Запрос.УстановитьПараметр("Организация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.Организация КАК Организация,
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.Удержание КАК Удержание,
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ДокументОснование КАК ДокументОснование,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрСведений.ПредельныеСуммыУдержанийСотрудников.СрезПоследних(
	|			&Период,
	|			ФизическоеЛицо В (&ОтборФизическихЛиц)
	|				И Организация = &Организация) КАК ПредельныеСуммыУдержанийСотрудниковСрезПоследних
	|ГДЕ
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ПрекратитьПоДостижениюПредела";
	
	УстановитьПривилегированныйРежим(Истина);
	ПредельныеСуммыУдержаний = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	ПредельныеСуммыУдержаний.Колонки.Добавить("ЗарегистрированПредел", Новый ОписаниеТипов("Число"));
	ПредельныеСуммыУдержаний.ЗаполнитьЗначения(1, "ЗарегистрированПредел");
	
	ОтборФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ПредельныеСуммыУдержаний, "ФизическоеЛицо", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.УстановитьПараметр("ОтборФизическихЛиц", ОтборФизическихЛиц);
	Запрос.УстановитьПараметр("Организация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдержанияДоПределаПоСотрудникам.Организация КАК Организация,
		|	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УдержанияДоПределаПоСотрудникам.Удержание КАК Удержание,
		|	УдержанияДоПределаПоСотрудникам.ДокументОснование КАК ДокументОснование,
		|	СУММА(УдержанияДоПределаПоСотрудникам.СуммаОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		УдержанияДоПределаПоСотрудникамОстатки.Организация КАК Организация,
		|		УдержанияДоПределаПоСотрудникамОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
		|		УдержанияДоПределаПоСотрудникамОстатки.Удержание КАК Удержание,
		|		УдержанияДоПределаПоСотрудникамОстатки.ДокументОснование КАК ДокументОснование,
		|		УдержанияДоПределаПоСотрудникамОстатки.СуммаОстаток КАК СуммаОстаток
		|	ИЗ
		|		РегистрНакопления.УдержанияДоПределаПоСотрудникам.Остатки(
		|				&Период,
		|				ФизическоеЛицо В (&ОтборФизическихЛиц)
		|					И Организация = &Организация) КАК УдержанияДоПределаПоСотрудникамОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияДоПределаПоСотрудникам.Организация,
		|		УдержанияДоПределаПоСотрудникам.ФизическоеЛицо,
		|		УдержанияДоПределаПоСотрудникам.Удержание,
		|		УдержанияДоПределаПоСотрудникам.ДокументОснование,
		|		УдержанияДоПределаПоСотрудникам.Сумма
		|	ИЗ
		|		РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
		|	ГДЕ
		|		УдержанияДоПределаПоСотрудникам.Регистратор В (&ИсключаемыйРегистратор, &ИсправленныйДокумент)
		|		И УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И УдержанияДоПределаПоСотрудникам.Период <= &Период
		|		И УдержанияДоПределаПоСотрудникам.ФизическоеЛицо В(&ОтборФизическихЛиц)
		|		И УдержанияДоПределаПоСотрудникам.Организация = &Организация) КАК УдержанияДоПределаПоСотрудникам
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияДоПределаПоСотрудникам.Организация,
		|	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо,
		|	УдержанияДоПределаПоСотрудникам.Удержание,
		|	УдержанияДоПределаПоСотрудникам.ДокументОснование";
		
	УстановитьПривилегированныйРежим(Истина);
	ПредельныеСуммыУдержанийОстаток = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПредельныеСуммыУдержанийОстаток, ПредельныеСуммыУдержаний);
	
	Если НаборыЗаписей <> Неопределено Тогда
		Для Каждого СтрокаНабора Из НаборыЗаписей.УдержанияДоПределаПоСотрудникам Цикл
			Если СтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Расход
				И СтрокаНабора.Период <= Период Тогда
				
				СтрокаТаблицыИтогов = ПредельныеСуммыУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыИтогов, СтрокаНабора);
				СтрокаТаблицыИтогов.Сумма = -СтрокаНабора.Сумма;
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;	
	
	ПредельныеСуммыУдержаний.Свернуть("Организация, ФизическоеЛицо, Удержание, ДокументОснование", "Сумма, ЗарегистрированПредел");
	
	СтрокиКУдалению = ПредельныеСуммыУдержаний.НайтиСтроки(Новый Структура("ЗарегистрированПредел", 0));
	
	Для Каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		ПредельныеСуммыУдержаний.Удалить(СтрокаТаблицы);
	КонецЦикла;
	КэшПредельныеСуммыУдержаний = ПредельныеСуммыУдержаний;
	
	Возврат ПредельныеСуммыУдержаний;
КонецФункции

#КонецОбласти

#Область ДоговорыПодряда

Функция ДоговорыПодряда(Сотрудники, Отборы = Неопределено)
	
	ИмяЗамера = "НачислениеЗарплаты.ВыявлениеДоговоровПодряда";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Возврат РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	КонецЕсли;
	
	Если Отборы = Неопределено Тогда
		Отборы = СоздатьОтборы();
	КонецЕсли;
	
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	
	Для Каждого МесяцРасчета Из МесяцыРасчета Цикл
		
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, Документы.НачислениеЗарплаты.ПустаяСсылка());
		
		ДоговорыПодрядаМесяца = РасчетЗарплатыРасширенный.РезультатНачисленияПоДоговорам(
			Организация, 
			МесяцРасчета,
			МенеджерВременныхТаблиц,
			ИсключаемыйРегистратор, 
			Отборы.Подразделение, 
			Сотрудники, 
			НастройкиНДФЛ.ДатаВыплаты);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДоговорыПодрядаМесяца, ДоговорыПодряда);
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачисленийПоДоговорам(
			НаборыЗаписей,
			Ложь,
			Организация,
			МесяцРасчета,
			ДоговорыПодряда);
			
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.НачисленияПоДоговорамГПХ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.ОплаченныеДоговоры, Истина);
	КонецЦикла;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат ДоговорыПодряда;
	
КонецФункции

Процедура РассчитатьДоговорыПодряда()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетДоговоровПодряда";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	НачатьПересчетДоговоровПодряда(ДоговорыПодряда);
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		ЗавершитьПересчетДоговоровПодряда();
		Возврат;
	КонецЕсли;
	
	ОбновитьСуммыРаспределенияПоТерриториямДоговоров(ДоговорыПодряда);
	
	ЗарегистрироватьДоговорыПодрядаПоТаблице(ДоговорыПодряда);
	
	ЗавершитьПересчетДоговоровПодряда();
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
		
КонецПроцедуры

Процедура ОбновитьСуммыРаспределенияПоТерриториямДоговоров(ДоговорыПодряда)
	
	Найденные = ДоговорыПодряда.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	Для Каждого СтрокаДоговора Из Найденные Цикл
		ТерриторииУсловияТруда = СтрокаДоговора.ТерриторииУсловияТруда;
		Если ТипЗнч(ТерриторииУсловияТруда) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		Если Не НастройкиУчета.ИспользоватьТерритории Тогда
			ТерриторииУсловияТруда.Очистить();
			Продолжить;
		КонецЕсли;
		Количество = ТерриторииУсловияТруда.Количество();
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Сумма вычета распределяется в тех-же долях, в которых 
		БывшиийРезультат = ТерриторииУсловияТруда.Итог("Результат");
		БывшаяСуммаВычета = ТерриторииУсловияТруда.Итог("СуммаВычета");
		БывшаяСкидкаПоВзносам = ТерриторииУсловияТруда.Итог("СкидкаПоВзносам"); 
		ОбновлятьРезультат = (БывшиийРезультат <> СтрокаДоговора.Результат);
		ОбновлятьСуммуВычета = ОбновлятьРезультат Или (БывшаяСуммаВычета <> СтрокаДоговора.СуммаВычета);
		ОбновлятьСкидкуПоВзносам = ОбновлятьРезультат Или (БывшаяСкидкаПоВзносам <> СтрокаДоговора.СкидкаПоВзносам);
		Если Не ОбновлятьРезультат И Не ОбновлятьСуммуВычета И Не ОбновлятьСкидкуПоВзносам Тогда
			Продолжить;
		КонецЕсли;
		ОстатокПоРезультату = СтрокаДоговора.Результат;
		ОстатокПоСуммеВычета = СтрокаДоговора.СуммаВычета;
		ОстатокПоСкидкеПоВзносам = СтрокаДоговора.СкидкаПоВзносам;
		// С первой строки до предпоследней перевычисляем сумму согласно весу старых строк.
		Для Индекс = 0 По Количество - 2 Цикл
			СтрокаТерритории = ТерриторииУсловияТруда[Индекс];
			Если БывшиийРезультат = 0 Тогда
				Коэффициент = 1 / Количество;
			Иначе
				Коэффициент = СтрокаТерритории.Результат / БывшиийРезультат;
			КонецЕсли;
			Если ОбновлятьРезультат Тогда
				СтрокаТерритории.Результат = СтрокаДоговора.Результат * Коэффициент;
				ОстатокПоРезультату = ОстатокПоРезультату - СтрокаТерритории.Результат;
			КонецЕсли;
			Если ОбновлятьСуммуВычета Тогда
				СтрокаТерритории.СуммаВычета = СтрокаДоговора.СуммаВычета * Коэффициент;
				ОстатокПоСуммеВычета = ОстатокПоСуммеВычета - СтрокаТерритории.СуммаВычета;
			КонецЕсли;
			Если ОбновлятьСкидкуПоВзносам Тогда
				СтрокаТерритории.СкидкаПоВзносам = СтрокаДоговора.СкидкаПоВзносам * Коэффициент;
				ОстатокПоСкидкеПоВзносам = ОстатокПоСкидкеПоВзносам - СтрокаТерритории.СкидкаПоВзносам;
			КонецЕсли;
		КонецЦикла;
		// В последнюю строку записываем остаток.
		СтрокаТерритории = ТерриторииУсловияТруда[Количество - 1];
		Если ОбновлятьРезультат Тогда
			СтрокаТерритории.Результат = ОстатокПоРезультату;
		КонецЕсли;
		Если ОбновлятьСуммуВычета Тогда
			СтрокаТерритории.СуммаВычета = ОстатокПоСуммеВычета;
		КонецЕсли;
		Если ОбновлятьСкидкуПоВзносам Тогда
			СтрокаТерритории.СкидкаПоВзносам = ОстатокПоСкидкеПоВзносам;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьПересчетДоговоровПодряда(ДоговорыПодряда)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПересчетСотрудников.НайтиСтроки(Новый Структура("ПересчитыватьДоговорыПодряда", Истина));
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Сотрудник");
	
	НастройкиПересчета.СоответствиеСтрокДоговоровПодряда.Очистить();
	
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.ДоговорыПодряда Цикл
		Если Сотрудники.Найти(СтрокаНачислений.Сотрудник) <> Неопределено Тогда
			НоваяСтрока = ДоговорыПодряда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			НастройкиПересчета.СоответствиеСтрокДоговоровПодряда.Вставить(НоваяСтрока, СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьПересчетДоговоровПодряда()
		
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаРасчета = Новый Массив;
	Для Каждого КлючИЗначение Из НастройкиПересчета.СоответствиеСтрокДоговоровПодряда Цикл
		ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		ФизическиеЛицаРасчета.Добавить(КлючИЗначение.Значение.ФизическоеЛицо);
	КонецЦикла;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтНачислений", Истина));
	ФизическиеЛицаБезРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо");
	ФизическиеЛицаБезРасчета = ОбщегоНазначенияКлиентСервер.СократитьМассив(ФизическиеЛицаБезРасчета, ФизическиеЛицаРасчета);
	
	Если ФизическиеЛицаБезРасчета.Количество() > 0 Тогда
		ДоговорыПодряда = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.ДоговорыПодряда, "ФизическоеЛицо", ФизическиеЛицаБезРасчета);
		ЗарегистрироватьДоговорыПодрядаПоМассивуСтрок(ДоговорыПодряда);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДоговорыПодрядаПоТаблице(ДоговорыПодряда)
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорыПодряда.Колонки["Результат"].Имя = "Сумма";
	ЗарегистрироватьДоговорыПодряда(ДоговорыПодряда);
	ДоговорыПодряда.Колонки["Сумма"].Имя = "Результат";
	
КонецПроцедуры

Процедура ЗарегистрироватьДоговорыПодрядаПоМассивуСтрок(ДоговорыПодряда)
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДоговорыПодряда, Таблица);
	Таблица.Колонки["Результат"].Имя = "Сумма";
	
	ЗарегистрироватьДоговорыПодряда(Таблица);
	
КонецПроцедуры

Процедура ЗарегистрироватьДоговорыПодряда(ДоговорыПодряда)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляРегистрации = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
	ДанныеДляРегистрации.Движения = НаборыЗаписей;
	ДанныеДляРегистрации.Организация = Организация;
	ДанныеДляРегистрации.ПериодРегистрации = МесяцНачисления;
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляРегистрации, Ложь, ДоговорыПодряда, Неопределено); 
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.НачисленияУдержанияПоСотрудникам, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Взносы

Процедура РассчитатьВзносы()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетВзносов";
	Замер = НачатьЗамерВремени();
	
	Если Не НастройкиРасчета.РассчитыватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = ЗарплатаМесяца.Начисления;
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	
	НачатьРасчетВзносовПриПересчете(Начисления, ДоговорыПодряда);
	
	СоздатьВТФизическиеЛица(Начисления, ДоговорыПодряда);
	
	Взносы = УчетСтраховыхВзносов.РассчитатьВзносы(ИсключаемыйРегистратор, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	
	ЗавершиьРасчетВзносовПриПересчете(Взносы);
	
	Если Не РасчетОдногоМесяца Тогда
		УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(
			НаборыЗаписей,
			Ложь,
			Организация,
			МесяцНачисления,
			ЗарплатаМесяца.Взносы,
			Ложь);
	КонецЕсли;
		
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура НачатьРасчетВзносовПриПересчете(Начисления, ДоговорыПодряда)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = ТаблицаНачислений();
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьВзносы", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо");
	НастройкиПересчета.ФизическиеЛицаРасчетаВзносов = ФизическиеЛицаМассив;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.Начисления Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.ДоговорыПодряда Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДоговорыПодряда.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершиьРасчетВзносовПриПересчете(Взносы)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		ЗарплатаМесяца.Взносы.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Взносы, ЗарплатаМесяца.Взносы);
		Возврат;
	КонецЕсли;
	
	Если НастройкиПересчета.ФизическиеЛицаРасчетаВзносов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем из коллекции взносов строки по физическим лицам, по которым был выполнен пересчет.
	НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ЗарплатаМесяца.Взносы, "ФизическоеЛицо", НастройкиПересчета.ФизическиеЛицаРасчетаВзносов);;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ЗарплатаМесяца.Взносы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	// Переносим рассчитанные строки.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Взносы, ЗарплатаМесяца.Взносы);
	
	// Удаляем таблицу ВТФизическиеЛица, так как для НДФЛ она может отличаться по составу.
	УничтожитьВТ("ВТФизическиеЛица");
	
КонецПроцедуры

Процедура СформироватьДоходыСтраховыхВзносов(ТребованияУдержаний)
	
	ИмяЗамера = "НачислениеЗарплаты.ФормированиеДоходовСтраховыхВзносов";
	Замер = НачатьЗамерВремени();
	
	Если ЭтоИсправлениеТекущимПериодом Тогда
		ПараметрыСторнирования = ИсправлениеДокументовЗарплатаКадры.ПараметрыСторнирования();
		ПараметрыСторнирования.ИсправлениеВТекущемПериоде = Истина;
		ПараметрыСторнирования.ПериодРегистрации = МесяцНачисления;
		
		УчетСтраховыхВзносовРасширенный.СторнироватьДвиженияДокумента(НаборыЗаписей, ИсправленныйДокумент, ПараметрыСторнирования);
	КонецЕсли;
	
	Если Не НастройкиРасчета.РассчитыватьВзносы И Не ТребованияУдержаний.ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы Тогда
		Возврат;
	КонецЕсли;
	
	Начисления = ЗарплатаМесяца.Начисления;
	ДоговорыПодряда = ЗарплатаМесяца.ДоговорыПодряда;
	НачатьФормированиеДоходовСтраховыхВзносовПриПересчете(Начисления, ДоговорыПодряда);
	
	СформироватьДоходыСтраховыхВзносовПоНачислениям(Начисления);
	СформироватьДоходыСтраховыхВзносовПоДоговорамПодряда(ДоговорыПодряда);
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.СведенияОДоходахСтраховыеВзносы);
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура НачатьФормированиеДоходовСтраховыхВзносовПриПересчете(Начисления, ДоговорыПодряда)
	
	Если Не НастройкиПересчета.ВыполнятьПересчет Тогда
		Возврат;
	КонецЕсли;
	
	// Обнуляем коллекции для подготовки доходов.
	Начисления = ТаблицаНачислений();
	ДоговорыПодряда = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисленияПоДоговорам();
	
	// Для формирования доходов при пересчете отбираем физических, 
	// для которых пересчитываются или взносы, или удержания, рассчитываемые от доходов для взносов.
	ФизическиеЛицаМассив = Новый Массив;
	
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьУдержанияОтВзносов", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ФизическиеЛицаМассив, 
		ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо"), 
		Истина);
		
	НайденныеСтроки = ПересчетФизическихЛиц.НайтиСтроки(Новый Структура("ПересчитыватьВзносы", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ФизическиеЛицаМассив, 
		ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ФизическоеЛицо"), 
		Истина);
		
	Если ФизическиеЛицаМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.Начисления Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНачислений Из ЗарплатаМесяца.ДоговорыПодряда Цикл
		Если ФизическиеЛицаМассив.Найти(СтрокаНачислений.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДоговорыПодряда.Добавить(), СтрокаНачислений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДоходыСтраховыхВзносовПоНачислениям(Начисления)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	ИмяВТНачисления = "ВТНачисления";
	
	СоздатьВТНачисленияДляРегистрацииДоходовСтраховыхВзносов(Начисления, ИмяВТНачисления);
	УдалитьВТ.Добавить(ИмяВТНачисления);
	
	СоздатьВТНачисленияСДаннымиЕНВД(Начисления, ИмяВТНачисления);
	УдалитьВТ.Добавить("ВТНачисленияСДаннымиЕНВД");
	
	УстановитьПривилегированныйРежим(Истина);
	УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
		НаборыЗаписей, 
		Неопределено, 
		Организация, 
		МесяцНачисления, 
		МенеджерВременныхТаблиц, 
		Истина, 
		Ложь, 
		ИсключаемыйРегистратор);
	УстановитьПривилегированныйРежим(Ложь);
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

Процедура СформироватьДоходыСтраховыхВзносовПоДоговорамПодряда(ДоговорыПодряда)
	
	Если Не НастройкиРасчета.РассчитыватьДоговорыПодряда Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоговорыПодряда.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СведенияОДоходахСтраховыеВзносы = СведенияОДоходахПоДоговорамСтраховыеВзносы(ДоговорыПодряда);
		
	УстановитьПривилегированныйРежим(Истина);
	УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(
		НаборыЗаписей, 
		Неопределено, 
		Организация, 
		МесяцНачисления, 
		СведенияОДоходахСтраховыеВзносы, 
		Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
	
Функция СведенияОДоходахПоДоговорамСтраховыеВзносы(ДоговорыПодряда)
	
	Если Не ПараметрыБухучета.ПлательщикЕНВД Тогда
		
		Доходы = ДоговорыПодряда.Скопировать();
		Доходы.Колонки["Результат"].Имя = "Сумма";
		Доходы.Колонки["СуммаВычета"].Имя = "Скидка";
		Доходы.Колонки["КодДоходаСтраховыеВзносы"].Имя = "ВидДохода";
		
	Иначе
		
		ДобавитьИдентификаторСтрокиБухучета(ДоговорыПодряда);
		
		Если НастройкиУчета.ИспользоватьСтатьиФинансирования Тогда
			БухучетДоговоры = БухучетНачисленийИзКоллекцииСтрок(ДоговорыПодряда);
		Иначе
			УдалитьВТ = Новый Массив;
			ИмяВТБухучетНачислений = "ВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов";
			БухучетДоговоры = ПолучитьБухучетНачисленийПоДоговорамСоздатьВременнуюТаблицу(ДоговорыПодряда, ИмяВТБухучетНачислений);
			БухучетДоговоры.Колонки["Результат"].Имя = "Сумма";
			УничтожитьВТ(ИмяВТБухучетНачислений);
		КонецЕсли;
		
		БухучетДоговоры.Индексы.Добавить("ИдентификаторСтроки");
		Отбор = Новый Структура("ИдентификаторСтроки");
		
		Доходы = ДоговорыПодряда.СкопироватьКолонки();
		Доходы.Колонки["Результат"].Имя = "Сумма";
		Доходы.Колонки["СуммаВычета"].Имя = "Скидка";
		Доходы.Колонки["КодДоходаСтраховыеВзносы"].Имя = "ВидДохода";
		Доходы.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаДоговор Из ДоговорыПодряда Цикл  
			
			Если СтрокаДоговор.Результат = 0 Тогда
				НоваяСтрока = Доходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоговор);
				НоваяСтрока.ВидДохода = СтрокаДоговор.КодДоходаСтраховыеВзносы;
			Иначе
				Отбор.ИдентификаторСтроки = СтрокаДоговор.ИдентификаторСтрокиБухучет;
				БухучетСтроки = БухучетДоговоры.Скопировать(Отбор);
				БухучетСтроки.Свернуть("ОблагаетсяЕНВД","Сумма");
				Для каждого СтрокаБухучет Из БухучетСтроки Цикл
					НоваяСтрока = Доходы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоговор);
					НоваяСтрока.ВидДохода = СтрокаДоговор.КодДоходаСтраховыеВзносы;
					НоваяСтрока.Сумма = СтрокаБухучет.Сумма;
					НоваяСтрока.ОблагаетсяЕНВД = СтрокаБухучет.ОблагаетсяЕНВД;
					Если СтрокаБухучет.ОблагаетсяЕНВД Тогда
						НоваяСтрока.Скидка = Окр(СтрокаДоговор.СуммаВычета * СтрокаБухучет.Сумма / СтрокаДоговор.Результат, 2);
					Иначе
						НоваяСтрока.Скидка = СтрокаДоговор.СуммаВычета - Окр(СтрокаДоговор.СуммаВычета * (СтрокаДоговор.Результат - СтрокаБухучет.Сумма) / СтрокаДоговор.Результат, 2);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Доходы;

КонецФункции	

Процедура СоздатьВТНачисленияДляРегистрацииДоходовСтраховыхВзносов(Начисления, ИмяВТНачисления)
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТРаспределениеПоТерриториямУсловиямТруда(Начисления);
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.Результат КАК Результат,
		|	Начисления.СуммаВычета КАК СуммаВычета,
		|	ВЫБОР
		|		КОГДА Начисления.Сторно
		|				ИЛИ Начисления.СторнируемыйДокумент <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сторно,
		|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	Начисления.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТНачисленияТаблица
		|ИЗ
		|	&Начисления КАК Начисления";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияТаблица");
	
	РасчетЗарплатыРасширенный.СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, "ВТНачисленияТаблица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Распределение.Результат, Начисления.Результат) КАК СуммаДохода,
		|	ЕСТЬNULL(Распределение.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.Подразделение КАК ПодразделениеОрганизации,
		|	Начисления.СуммаВычета КАК СуммаВычетаВзносы,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент		
		|ПОМЕСТИТЬ ВТНачисленияДляРегистрацииДоходовСтраховыхВзносов
		|ИЗ
		|	ВТНачисленияТаблица КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
		|		ПО (Распределение.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРегистрацииДоходовСтраховыхВзносов", ИмяВТНачисления);
	Запрос.Выполнить();
	
	УничтожитьВТ(УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеМетодыМенеджераРасчета

Функция МенеджерУчетаВремени()
	
	Если МенеджерДанныхУчетаВремени <> Неопределено Тогда
		Возврат МенеджерДанныхУчетаВремени;
	КонецЕсли;
	
	МенеджерДанныхУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанных(МенеджерВременныхТаблиц, МесяцНачисления);
	
	Возврат МенеджерДанныхУчетаВремени;
	
КонецФункции

Функция МенеджерКадровогоУчета()
	Возврат ЭтотОбъект;
КонецФункции

Процедура ИнициализироватьРасчетБазыНачислений()
	Если РасчетБазыНачислений <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущегоНабораНачисления = ДанныеТекущегоНабораНачисления();
	
	СтрокиНачисленийПоТребованиям = СтрокиНачисленийПоТребованиям();
	СтрокиНабораНачисленияПоИдентфикаторам = СтрокиНабораНачисленияПоИдентфикаторам();

	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеТекущегоНабораНачисления.ФПД, "Регистратор, НомерСтроки");
	СтруктураПоискаПериода = Новый Структура("Регистратор, НомерСтроки");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ОписаниеРасчитываемыхЗаписей = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРасчитываемогоНабораНачисленийТаблица();
	
	Для Каждого СтрокиРасчетаБазыПоОчередности Из СтрокиНачисленийПоТребованиям.ПоказателиРасчетнаяБаза Цикл
		Для Каждого ИдентификаторСтроки Из СтрокиРасчетаБазыПоОчередности.Значение Цикл
			СтрокаНабора = СтрокиНабораНачисленияПоИдентфикаторам[ИдентификаторСтроки];
		
			Если ТребованияНачислений[СтрокаНабора.ВидРасчета].ПериодДействияБазовый Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоискаПериода, СтрокаНабора);
				ПериодыНачисления = ДанныеТекущегоНабораНачисления.ФПД.НайтиСтроки(СтруктураПоискаПериода);
				
				Для Каждого Период Из ПериодыНачисления Цикл
					СтрокаРасчитываемогоНабора = ОписаниеРасчитываемыхЗаписей.РасчитываемыеЗаписи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасчитываемогоНабора, СтрокаНабора);
					СтрокаРасчитываемогоНабора.БазовыйПериодНачало = Период.ПериодДействияНачало;
					СтрокаРасчитываемогоНабора.БазовыйПериодКонец = Период.ПериодДействияКонец;
				КонецЦикла;		
			Иначе
				СтрокаРасчитываемогоНабора = ОписаниеРасчитываемыхЗаписей.РасчитываемыеЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасчитываемогоНабора, СтрокаНабора);
			КонецЕсли;	
		КонецЦикла;				 
	КонецЦикла;		 
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетБазыНачислений = Обработки.РасчетБазыНачисленийУдержаний.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	РасчетБазыНачислений.ИнициализироватьРасчетБазыНачислений(
		ОписаниеРасчитываемыхЗаписей, 
		ЭтотОбъект, 
		НастройкиРасчета.РассчитыватьНачисленияТолькоПоТекущемуДокументу,
		ДанныеТекущегоНабораНачисления, 
		ИсключаемыйРегистратор);
КонецПроцедуры

Процедура ЗавершитьРасчетБазыНачислений()
	Если РасчетБазыНачислений <> Неопределено Тогда
		РасчетБазыНачислений.ЗавершитьРасчетБазы();	
		РасчетБазыНачислений = Неопределено;
	КонецЕсли;		
КонецПроцедуры

Процедура ИнициализироватьРасчетБазыУдержаний(ТаблицаУдержаний)
	Если РасчетБазыУдержаний <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущегоНабораНачисления = ДанныеТекущегоНабораНачисления();
		
	ТребованияУдержаний = ТребованияУдержанийТаблица();
	
	ОписаниеРасчитываемыхЗаписей = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРасчитываемогоНабораУдержанийТаблица();
	
	Для Каждого СтрокаНабора Из ТаблицаУдержаний Цикл
		Если Не ТребованияУдержаний[СтрокаНабора.ВидРасчета].ТребуетсяПоказательРасчетнаяБаза 
			И Не ТребованияУдержаний[СтрокаНабора.ВидРасчета].ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаРасчитываемогоНабора = ОписаниеРасчитываемыхЗаписей.РасчитываемыеЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасчитываемогоНабора, СтрокаНабора);		
		СтрокаРасчитываемогоНабора.МесяцУдержания = НачалоМесяца(СтрокаНабора.БазовыйПериодНачало);
	КонецЦикла;		 
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетБазыУдержаний = Обработки.РасчетБазыНачисленийУдержаний.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	РасчетБазыУдержаний.ИнициализироватьРасчетБазыУдержаний(
		ОписаниеРасчитываемыхЗаписей, 
		ЭтотОбъект, 
		НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу,
		ДанныеТекущегоНабораНачисления, 
		ИсключаемыйРегистратор);
КонецПроцедуры

Процедура ЗавершитьРасчетБазыУдержаний()
	Если РасчетБазыУдержаний <> Неопределено Тогда
		РасчетБазыУдержаний.ЗавершитьРасчетБазы();	
		РасчетБазыУдержаний = Неопределено;
	КонецЕсли;	
КонецПроцедуры

Функция ДатаМежду(Знач Дата, Знач ЛеваяГраница, Знач ПраваяГраница, ВключаяГраницу = Истина)
	
	Дата = НачалоДня(Дата);
	ЛеваяГраница = ЛеваяГраница;
	ПраваяГраница = ПраваяГраница;
	
	Если Дата < ЛеваяГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Дата > ПраваяГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ВключаяГраницу Тогда
		Если Дата = ЛеваяГраница Или Дата = ПраваяГраница Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТаблицаИсточниковИзменений()
	
	ТаблицаИсточников = Новый ТаблицаЗначений;
	ТаблицаИсточников.Колонки.Добавить("ИмяКоллекции", Новый ОписаниеТипов("Строка"));
	ТаблицаИсточников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаИсточников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаИсточников.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления, ПланВидовРасчетаСсылка.Удержания"));
	
	Возврат ТаблицаИсточников;
	
КонецФункции

Функция ТаблицаПересчетаСотрудников()
	
	ТаблицаПересчета = Новый ТаблицаЗначений;
	ТаблицаПересчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	ИменаНастроек = ИменаНастроекПересчетаСотрудников();
	Для Каждого ИмяНастройки Из ИменаНастроек Цикл
		ТаблицаПересчета.Колонки.Добавить(ИмяНастройки, Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	
	Возврат ТаблицаПересчета;
	
КонецФункции

Функция ИменаНастроекПересчетаСотрудников()
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("ПересчитыватьНачисления");
	МассивИмен.Добавить("ПересчитыватьДоговорыПодряда");
	
	Возврат МассивИмен;
	
КонецФункции

Функция ТаблицаПересчетаФизическихЛиц()
	
	ТаблицаПересчета = Новый ТаблицаЗначений;
	ТаблицаПересчета.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ИменаНастроек = ИменаНастроекПересчетаФизическихЛиц();
	Для Каждого ИмяНастройки Из ИменаНастроек Цикл
		ТаблицаПересчета.Колонки.Добавить(ИмяНастройки, Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	
	Возврат ТаблицаПересчета;
	
КонецФункции

Функция ИменаНастроекПересчетаФизическихЛиц()
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("ПересчитыватьУдержанияОтНачислений");
	МассивИмен.Добавить("ПересчитыватьУдержанияОтВзносов");
	МассивИмен.Добавить("ПересчитыватьУдержанияОтНДФЛ");
	МассивИмен.Добавить("ПересчитыватьНДФЛ");
	МассивИмен.Добавить("ПересчитыватьКорректировкиВыплаты");
	МассивИмен.Добавить("ПересчитыватьВзносы");
	МассивИмен.Добавить("ПересчитыватьЗаймы");
	
	Возврат МассивИмен;
	
КонецФункции

Функция НайтиСтрокиОтборПоМассиву(КоллекцияСтрок, ИмяПоля, МассивЗначений)
	
	НайденныеСтроки = Новый Массив;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Если МассивЗначений.Найти(СтрокаКоллекции[ИмяПоля]) <> Неопределено Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Процедура НачатьРасчетЗарплатыЗаМесяц(ПоследнийМесяцРасчета)
	
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("Начисления", "ПериодРегистрации");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("ДоговорыПодряда", "ДатаНачала");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("Удержания", "ДатаНачала");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("НДФЛ", "МесяцНалоговогоПериода", Истина);
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("ПогашениеЗаймов", "ДатаНачала");
	ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц("Взносы", "ДатаПолученияДохода", Истина);
	
	Если ПоследнийМесяцРасчета Тогда
		ЗарплатаМесяца.КорректировкиВыплаты = Зарплата.КорректировкиВыплаты;
	КонецЕсли;
	
	УстановитьТаблицуУдержания(ЗарплатаМесяца.Удержания);

	РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, ЗарплатаМесяца.Начисления);
	ДанныеТекущегоНабораНачисления = ДанныеТекущегоНабораНачисления();
	ДанныеТекущегоНабораНачисления.ТаблицаНабора = НаборыЗаписей.Начисления.Выгрузить();
	ПронумероватьСтрокиТаблицыДанныхНабора(ДанныеТекущегоНабораНачисления.ТаблицаНабора);
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(НаборыЗаписей, Ложь, Организация, МесяцНачисления, ЗарплатаМесяца.Удержания);
	
	ТаблицаНабораУдержаний = НаборыЗаписей.Удержания.Выгрузить();
	ПронумероватьСтрокиТаблицыДанныхНабора(ТаблицаНабораУдержаний);
	
	КэшДанныеТекущегоНабораУдержания = Новый Структура("ТаблицаНабора", ТаблицаНабораУдержаний);
	
	СтрокиПоИдентфикаторам = СтрокиУдержанийПоИдентификаторам(ЗарплатаМесяца.Удержания);
	
	ЗаполнитьСтрокиРасчетаВтаблицеУдержания(КэшДанныеТекущегоНабораУдержания.ТаблицаНабора, СтрокиПоИдентфикаторам);
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаНабораУдержаний, "ВТРегистрРасчета_Удержания", Истина);
	
	РасчетБазыУдержаний = Неопределено;
	
	ИнициализироватьРасчетБазыУдержаний(ТаблицаНабораУдержаний);
	
	СоздатьВТПоРегиструНачисления();
		
	Если НастройкиРасчета.РассчитыватьВзносы Тогда
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.СведенияОДоходахСтраховыеВзносы, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.ИсчисленныеСтраховыеВзносы, Истина);
	КонецЕсли;
	Если НастройкиРасчета.РассчитыватьНДФЛ
		И НастройкиНДФЛ.ОкончательныйРасчет Тогда
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.СведенияОДоходахНДФЛ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.АвансовыеПлатежиИностранцевПоНДФЛ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.ИмущественныеВычетыНДФЛ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, Истина);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, Истина);
	КонецЕсли;
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписейНакопляемые.УдержанияДоПределаПоСотрудникам, Истина);	
КонецПроцедуры

Процедура ЗаполнитьСтрокиРасчетаВТаблицеУдержания(ТаблицаНабора, СтрокиУдержанийПоИдентфикаторам)
	Для Каждого СтрокаНабора Из ТаблицаНабора Цикл
		СтрокаРасчета = СтрокиУдержанийПоИдентфикаторам[СтрокаНабора.ИдентификаторСтроки];
		СтрокаРасчета.ЗаписьРасчета = СтрокаНабора;
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗавершитьРасчетЗарплатыЗаМесяц()
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.Начисления, Зарплата.Начисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.ДоговорыПодряда, Зарплата.ДоговорыПодряда);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.Удержания, Зарплата.Удержания);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаМесяца.ПогашениеЗаймов, Зарплата.ПогашениеЗаймов);
	ПеренестиРассчитанныеПериоды(ЗарплатаМесяца.НДФЛ, Зарплата.НДФЛ);
	ПеренестиРассчитанныеПериоды(ЗарплатаМесяца.Взносы, Зарплата.Взносы);
	
	КэшДанныеТекущегоНабораУдержания = Неопределено;
	КэшЗадолженностьПоУдержаниямФизическихЛиц = Неопределено;
	КэшПредельныеСуммыУдержаний = Неопределено;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	МенеджерДанныхУчетаВремени = Неопределено;
	СохранитьРассчитанныеНаборыЗаписей();
	
КонецПроцедуры

Процедура ПеренестиРассчитанныеПериоды(ТаблицаИсточник, ТаблицаПриемник)
	
	Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ПериодРассчитан = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьРассчитанныеНаборыЗаписей()
	Для Каждого КлючИЗначение Из НаборыЗаписей Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КлючИЗначение.Значение, НаборыЗаписейНакопляемые[КлючИЗначение.Ключ]);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьКоллекциюКРасчетуЗарплатыЗаМесяц(ИмяКоллекции, ПолеПериод, ПроверятьРассчитанныеПериоды = Ложь)
	
	Если МесяцНачисления = МесяцыРасчета[0] Тогда
		НачалоПериода = Дата(1, 1, 1);
	Иначе
		НачалоПериода = НачалоМесяца(МесяцНачисления);
	КонецЕсли;
	КонецПериода = КонецМесяца(МесяцНачисления);
	СтрокиКУдалению = Новый Массив;
	ЗарплатаМесяца[ИмяКоллекции].Очистить();
	
	Для Каждого СтрокаКоллекции Из Зарплата[ИмяКоллекции] Цикл
		Если СтрокаКоллекции[ПолеПериод] <= КонецПериода 
			И СтрокаКоллекции[ПолеПериод] >= НачалоПериода Тогда
			
			Если ПроверятьРассчитанныеПериоды
				И РасчетЗарплатыРасширенный.ЕстьПолеВСтрокеКоллекции(СтрокаКоллекции, "ПериодРассчитан")
				И СтрокаКоллекции.ПериодРассчитан Тогда
				
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЗарплатаМесяца[ИмяКоллекции].Добавить(), СтрокаКоллекции);
			СтрокиКУдалению.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из СтрокиКУдалению Цикл
		Зарплата[ИмяКоллекции].Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСЗапросами

Функция НовыйЗапрос()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
	
КонецФункции

Функция ВТСодержитСтроки(ИмяВТ)
	Возврат ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, ИмяВТ);
КонецФункции

Функция ВТСуществует(ИмяВТ)
	
	Возврат ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, ИмяВТ);
	
КонецФункции

Процедура УничтожитьВТ(ИменаВТ, ПроверятьНаличие = Ложь)
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ, ПроверятьНаличие);
КонецПроцедуры

#КонецОбласти

#Область ВТСотрудникиФизическиеЛица

Функция СотрудникиВМассиве(Сотрудники)
	
	Если ТипЗнч(Сотрудники) = Тип("Массив") Тогда
		Возврат Сотрудники;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	
КонецФункции

#КонецОбласти

#Область ОценкаПроизводительности

Функция ИспользоватьТехнологическиеЗамерыВремени()
	Возврат Ложь;
КонецФункции

Функция НачатьЗамерВремени()
	
	Если Не ИспользоватьТехнологическиеЗамерыВремени() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Возврат Замер;

КонецФункции

Процедура ЗакончитьЗамерВремени(ИмяЗамера, Замер)
	
	Если Не ИспользоватьТехнологическиеЗамерыВремени() Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический(ИмяЗамера, Замер);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Дополняет строки таблицы сведениями для расчета и значениями показателей.
//
// Параметры
//	Начисления - таблица значений, см. ТаблицаНачислений,
//	ЗаполнятьСведенияДляРасчета - тип Булево, необязательный, по умолчанию Истина,
//	ЗаполнятьЗначенияПоказателей - тип Булево, необязательный, по умолчанию Истина.
//
Процедура ДополнитьСтрокиНачислений(Начисления, ЗаполнятьСведенияДляРасчета = Истина, ЗаполнятьЗначенияПоказателей = Истина) Экспорт	
	УстановитьТаблицуНачисления(Начисления);
	
	Если ЗаполнятьСведенияДляРасчета Тогда
		ЗаполнитьСведенияНачисленийДляРасчетаСлужебный();
	КонецЕсли;
	
	Если ЗаполнятьЗначенияПоказателей Тогда
		ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#КонецОбласти

#Область ПолучениеДанныхСотрудников

Функция ПериодыРаботыСотрудников(СписокСотрудников) Экспорт
	ПериодыРаботыСотрудников = КадровыйУчет.ПериодыРаботыСотрудников(СписокСотрудников);
	
	ДатыЗавершенияРаботы = Неопределено;
	ДополнительныеСвойства.Свойство("ДатыЗавершенияРаботы", ДатыЗавершенияРаботы);
	Если ДатыЗавершенияРаботы <> Неопределено Тогда
		ПериодыРаботыСотрудников.Индексы.Добавить("Сотрудник");
		Отбор = Новый Структура("Сотрудник");
		
		Для Каждого ТекущаяСтрокаДат Из ДатыЗавершенияРаботы Цикл
			Отбор.Сотрудник = ТекущаяСтрокаДат.Сотрудник;
			СтрокиПериодов = ПериодыРаботыСотрудников.НайтиСтроки(Отбор);
			Если СтрокиПериодов.Количество() > 0 Тогда
				СтрокиПериодов[0].ДатаЗавершенияРаботы = ТекущаяСтрокаДат.Дата;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПериодыРаботыСотрудников;
КонецФункции


Процедура УстановитьТаблицуНачисления(ТаблицаНачисления)
	КэшПоказателиСотрудников = Неопределено;
	КэшИспользуемыеПоказателиСотрудников = Неопределено;
	КэшСтрокиНачисленийПоТребованиям = Неопределено;
	КэшДанныеТекущегоНабораНачисления = Неопределено;
	КэшСтрокиНабораНачисленияПоИдентфикаторам = Неопределено;
	РасчетБазыНачислений = Неопределено;
	РасчетБазыУдержаний = Неопределено;
	
	Если Не ФильтрПолученияПериодическихДанныхСотрудниковАктуален(ТаблицаНачисления) Тогда
		ТаблицаСотрудников = ТаблицаНачисления.Скопировать(, "Сотрудник, ДатаНачала, ДатаОкончания");
		ТаблицаСотрудников.Свернуть("Сотрудник, ДатаНачала, ДатаОкончания");
		УстановитьТаблицуФильтрСотрудников(ТаблицаСотрудников)	
	КонецЕсли;
	
	Если Начисления = Неопределено Тогда
		Начисления = ТаблицаНачисления;
		ВидыРасчетаНачислений = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление", Истина);
		ВидыРасчетаНачислений = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВидыРасчетаНачислений);
		Возврат;
	КонецЕсли;	
		
	ВидыРасчетаНовые = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ТаблицаНачисления.ВыгрузитьКолонку("Начисление"));
			
	Для Каждого НовыйВидРасчета Из ВидыРасчетаНовые Цикл
		Если ВидыРасчетаНачислений[НовыйВидРасчета.Ключ] = Неопределено Тогда
			КэшСвойствНачислений = Неопределено;
			КэшПоказателиНачислений = Неопределено;
			КэшОписаниеСтажевыхПоказателейНачислений = Неопределено;
			
			КэшТребованияНачислений = Неопределено;
			КэшТребованияНачисленийСводно = Неопределено;
			
			ВидыРасчетаНачислений = ВидыРасчетаНовые;
			Начисления = ТаблицаНачисления;
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
	Если КэшТребованияНачисленийСводно <> Неопределено Тогда
		Для Каждого ПредыдущийВидРасчета Из ВидыРасчетаНачислений Цикл
			Если ВидыРасчетаНовые[ПредыдущийВидРасчета.Ключ] = Неопределено Тогда
				КэшТребованияНачислений = Неопределено;
				КэшТребованияНачисленийСводно = Неопределено;
				
				ВидыРасчетаНачислений = ВидыРасчетаНовые;
				Начисления = ТаблицаНачисления;
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Начисления = ТаблицаНачисления;	
КонецПроцедуры

Процедура УстановитьТаблицуУдержания(ТаблицаУдежания)
	КэшПоказателиФизическихЛицУдержаний = Неопределено;
	КэшДанныеТекущегоНабораУдержания = Неопределено;
	РасчетБазыУдержаний = Неопределено;
	
	Если Не ФильтрПолученияПериодическихДанныхФизическихЛицАктуален(ТаблицаУдежания) Тогда
		ТаблицаФизическихЛиц = ТаблицаУдежания.Скопировать(, "ФизическоеЛицо, ДатаНачала, ДатаОкончания");
		ТаблицаФизическихЛиц.Свернуть("ФизическоеЛицо, ДатаНачала, ДатаОкончания");
		УстановитьТаблицуФильтрФизическихЛиц(ТаблицаФизическихЛиц);	
	КонецЕсли;
	
	Если Удержания = Неопределено Тогда
		Удержания = ТаблицаУдежания;
		ВидыРасчетаУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "Удержание", Истина);
		ВидыРасчетаУдержаний = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВидыРасчетаУдержаний);
		Возврат;
	КонецЕсли;	
		
	ВидыРасчетаНовые = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ТаблицаУдежания.ВыгрузитьКолонку("Удержание"));
			
	Для Каждого НовыйВидРасчета Из ВидыРасчетаНовые Цикл
		Если ВидыРасчетаНачислений[НовыйВидРасчета.Ключ] = Неопределено Тогда
			КэшПоказателиУдержаний = Неопределено;
			
			КэшТребованияУдержаний = Неопределено;
			КэшТребованияУдержанийСводно = Неопределено;
			
			ВидыРасчетаУдержаний = ВидыРасчетаНовые;
			ВидыРасчетаУдержаний = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВидыРасчетаУдержаний);
			Удержания = ТаблицаУдежания;
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
	Если КэшТребованияУдержанийСводно <> Неопределено Тогда
		Для Каждого ПредыдущийВидРасчета Из ВидыРасчетаУдержаний Цикл
			Если ВидыРасчетаНовые[ПредыдущийВидРасчета.Ключ] = Неопределено Тогда
				КэшТребованияУдержаний = Неопределено;
				КэшТребованияУдержанийСводно = Неопределено;
				
				ВидыРасчетаУдержаний = ВидыРасчетаНовые;
				ВидыРасчетаУдержаний = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВидыРасчетаУдержаний);
				Удержания = ТаблицаУдежания;
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Удержания = ТаблицаУдежания;	
КонецПроцедуры

Функция СброситьКэшПоТаблицеУдержания()
	КэшПоказателиФизическихЛицУдержаний = Неопределено;
	КэшДанныеТекущегоНабораУдержания = Неопределено;
	РасчетБазыУдержаний = Неопределено;	
	КэшПоказателиУдержаний = Неопределено;	
	КэшТребованияУдержаний = Неопределено;
	КэшТребованияУдержанийСводно = Неопределено;
	ВидыРасчетаУдержаний = Новый Массив;		
КонецФункции	

Процедура УстановитьТаблицуФильтрСотрудников(ИсточникДанныхФильтра, Замещать = Истина)		
	Если Не ФильтрПолученияПериодическихДанныхСотрудниковАктуален(ИсточникДанныхФильтра) Тогда
		КэшКадроваяИсторияИнтервалы = Неопределено;
		КэшПлановыеНачисленияИнтервалы = Неопределено;
		КэшПрименениеПлановыхНачисленийИнтервалы = Неопределено;
		КэшИстоникиДанныхУчетаВремениИнтервалы = Неопределено;
		КэшЗначенияРазовыхПоказателейСотрудников = Неопределено;
		КэшЗначенияПериодическихПоказателейСотрудников = Неопределено;
		КэшЗначенияПоказателейПодразделенийПоСотрудникам = Неопределено;
		КэшЗначенияПоказателейОрганизацийПоСотрудникам = Неопределено;
		КэшЗначенияПериодическихПоказетелейОрганизаций = Неопределено;
		КэшПериодыДействияВремяВЧасахПоНачислениям = Неопределено;
		КэшЗначенияСтажевыхПоказателей = Неопределено;
		КэшЗначенияПоказателейПроцентСевернойНадбавки = Неопределено;
		КэшУсловияОплатыПособий = Неопределено;
		КэшЗначенияБазовыхТарифов = Неопределено;
		КэшВидыЗанятостиСотрудников = Неопределено;
		КэшСводныеДанныеПлановыхНачисленийСотрудников = Неопределено;
		КэшТерриторииСотрудников = Неопределено;
		КэшДанныеОбщихГрафиковСотрудников = Неопределено;
		КэшРабочееВремяСотрудников = Неопределено;
		
		Если Замещать Или
			ТаблицаПолученияПериодическихДанныхСотрудников = Неопределено Тогда
			ТаблицаПолученияПериодическихДанныхСотрудников = ТаблицаФильтрСотрудников(ИсточникДанныхФильтра, "Сотрудник");
		Иначе
			ТаблицаИсточник = ТаблицаФильтрСотрудников(ИсточникДанныхФильтра, "Сотрудник");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПолученияПериодическихДанныхСотрудников);
			ТаблицаПолученияПериодическихДанныхСотрудников.Свернуть("Сотрудник, Месяц, ДатаНачала, ДатаОкончания");
		КонецЕсли;	
							
		ФильтрПолученияПериодическихДанныхСотрудников = Неопределено;
	КонецЕсли;	
КонецПроцедуры	

Процедура ДополнитьФильтрСотрудниковПоТаблицеУдержаний()
	ТаблицаСотрудников = ТаблицаСотрудников();
	
	Для Каждого СтрокаУдержания Из Удержания Цикл
		Если ЗначениеЗаполнено(СтрокаУдержания.Сотрудник) Тогда
			СтрокаФильтра = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФильтра, СтрокаУдержания);
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаСотрудников.Свернуть("Сотрудник, ДатаНачала, ДатаОкончания");
	
	УстановитьТаблицуФильтрСотрудников(ТаблицаСотрудников, Ложь);
КонецПроцедуры	

Процедура УстановитьТаблицуФильтрФизическихЛиц(ИсточникДанныхФильтра)
	ТаблицаФизическихЛиц = ТаблицаФильтрСотрудников(ИсточникДанныхФильтра, "ФизическоеЛицо");
				
	Если Не ФильтрПолученияПериодическихДанныхФизическихЛицАктуален(ТаблицаФизическихЛиц) Тогда		
		КэшПлановыеУдержанияИнтервалы = Неопределено;
		КэшЗначенияРазовыхПоказателейФизическихЛиц = Неопределено;
		КэшЗначенияПериодическихПоказателейФизическихЛиц = Неопределено;
		КэшЗадолженностьПоУдержаниямФизическихЛиц = Неопределено;
		КэшПредельныеСуммыУдержаний = Неопределено;
		КэшРабочиеМестаУдержаний = Неопределено;
		КэшОсновныеСотрудникиФизическихЛиц = Неопределено;
		
		ТаблицаПолученияПериодическихДанныхФизическихЛиц = ТаблицаФизическихЛиц;							
		ФильтрПолученияПериодическихДанныхФизическихЛиц = Неопределено;
	КонецЕсли;	
КонецПроцедуры	

Функция ТаблицаФильтрСотрудников(ИсточникДанных, ИмяПоляСотрудник)
	ИсточникДанных.Сортировать(ИмяПоляСотрудник + ", ДатаНачала, ДатаОкончания", Новый СравнениеЗначений);
	
	ТаблицаСотрудников = НовыйТаблицаФильтрПоСотрудникам();
	ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	ТекущийСотрудник = Неопределено;
	ТекущийМесяц = Неопределено;
	ТекущаяСтрокаЗаМесяц = Неопределено;
	Для Каждого СтрокаТаблицыСотрудников Из ИсточникДанных Цикл
		Если ТекущийСотрудник <> СтрокаТаблицыСотрудников[ИмяПоляСотрудник] Тогда
			ТекущийСотрудник = СтрокаТаблицыСотрудников[ИмяПоляСотрудник];
			ТекущийМесяц = НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
			ТекущаяСтрокаЗаМесяц = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЗаМесяц, СтрокаТаблицыСотрудников);
			ТекущаяСтрокаЗаМесяц.Месяц = ТекущийМесяц;
			ТекущаяСтрокаЗаМесяц.ДатаНачала = НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала);   
			ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
		ИначеЕсли ТекущийМесяц <> НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала) Тогда 	
			ТекущийМесяц = НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
			ТекущаяСтрокаЗаМесяц = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЗаМесяц, СтрокаТаблицыСотрудников);
			ТекущаяСтрокаЗаМесяц.Месяц = ТекущийМесяц;
			ТекущаяСтрокаЗаМесяц.ДатаНачала = НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
			ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
		КонецЕсли;
		
		Если НачалоМесяца(ТекущаяСтрокаЗаМесяц.ДатаНачала) < НачалоМесяца(СтрокаТаблицыСотрудников.ДатаОкончания) Тогда
			ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(ТекущаяСтрокаЗаМесяц.ДатаНачала);
			
			Пока ТекущийМесяц < НачалоМесяца(СтрокаТаблицыСотрудников.ДатаОкончания) Цикл
				ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
				ТекущаяСтрокаЗаМесяц = ТаблицаСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЗаМесяц, СтрокаТаблицыСотрудников);
				ТекущаяСтрокаЗаМесяц.ДатаНачала = ТекущийМесяц;
				ТекущаяСтрокаЗаМесяц.Месяц = ТекущийМесяц;	
				ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(ТекущийМесяц);
			КонецЦикла;
		КонецЕсли;	
		
		ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(Макс(ТекущаяСтрокаЗаМесяц.ДатаОкончания, СтрокаТаблицыСотрудников.ДатаОкончания));	
	КонецЦикла;
	
	Возврат ТаблицаСотрудников;
КонецФункции
Процедура ДополнитьТаблицуСотрудниковДаннымиФизичесикхЛиц(ТаблицаСотрудников)
	Если ТаблицаСотрудников.Колонки.Найти("ФизическоеЛицо") <> Неопределено
		И ТаблицаСотрудников.Колонки.Найти("ГоловнаяОрганизация") <> Неопределено Тогда
		
		Возврат;
	КонецЕсли;	
	
	ОтборСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОтборСотрудников", ОтборСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&ОтборСотрудников)";
	
	УстановитьПривилегированныйРежим(Истина);
	ФизичесикеЛицаСотрудников = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ФизичесикеЛицаСотрудников, "Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	
	Для Каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
		Отбор.Сотрудник = СтрокаТаблицыСотрудников.Сотрудник;
		
		СтрокиТаблицыФизическихЛицСотрудников = ФизичесикеЛицаСотрудников.НайтиСтроки(Отбор);
		Если СтрокиТаблицыФизическихЛицСотрудников.Количество() > 0 Тогда
			СтрокаТаблицыСотрудников.ФизическоеЛицо = СтрокиТаблицыФизическихЛицСотрудников[0].ФизическоеЛицо;
			СтрокаТаблицыСотрудников.ГоловнаяОрганизация = СтрокиТаблицыФизическихЛицСотрудников[0].ГоловнаяОрганизация;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ПлановыеНачисления()
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных о начислениях.';
								|en = 'The filter of the accruals data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшПлановыеНачисленияИнтервалы <> Неопределено Тогда
		Возврат КэшПлановыеНачисленияИнтервалы;
	КонецЕсли;	
	
	ПараметрыПостроения =  ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	КэшПлановыеНачисленияИнтервалы = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("ПлановыеНачисления", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	КэшПлановыеНачисленияИнтервалы.Сортировать("Сотрудник, Начисление, ДокументОснование, Период", Новый СравнениеЗначений);
	
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшПлановыеНачисленияИнтервалы, ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник, Начисление, ДокументОснование", "Сотрудник");
	
	Возврат КэшПлановыеНачисленияИнтервалы;
КонецФункции	

Функция ПлановыеУдержания()
	ОписаниеФильтра = ФильтрПолученияПериодическихДанныхФизическихЛиц();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных об удержаниях.';
								|en = 'The filter of withheld amount data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшПлановыеУдержанияИнтервалы <> Неопределено Тогда
		Возврат КэшПлановыеУдержанияИнтервалы;
	КонецЕсли;	
	
	ПараметрыПостроения =  ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Организация", "ГоловнаяОрганизация");
	
	КэшПлановыеУдержанияИнтервалы = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("ПлановыеУдержания", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	КэшПлановыеУдержанияИнтервалы.Сортировать("ФизическоеЛицо, Организация, Удержание, ДокументОснование, Период", Новый СравнениеЗначений);
	
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшПлановыеУдержанияИнтервалы, ТаблицаПолученияПериодическихДанныхФизическихЛиц, "ФизическоеЛицо, Организация, Удержание, ДокументОснование", "ФизическоеЛицо");
	
	ВычеркнутьПолностьюПогашенныеПлановыеУдержания(КэшПлановыеУдержанияИнтервалы);
	
	Возврат КэшПлановыеУдержанияИнтервалы;
КонецФункции	

Процедура ВычеркнутьПолностьюПогашенныеПлановыеУдержания(ПлановыеУдержания)
	ОтборДокументовОснований = ОбщегоНазначения.ВыгрузитьКолонку(ПлановыеУдержания, "ДокументОснование");
	
	ПредельныеСуммыУдержаний = ПредельныеСуммыУдержаний(); 
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПлановыеУдержания, "ФизическоеЛицо, ДокументОснование");
	Отбор = Новый Структура("ФизическоеЛицо, ДокументОснование");
	
	СтрокиДляДопАнализа = Новый Массив;
	
	Для Каждого СтрокаПредела Из ПредельныеСуммыУдержаний Цикл
		Если СтрокаПредела.Сумма <= 0 Тогда
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаПредела);
			Удаляемыестроки = ПлановыеУдержания.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаТаблицы Из Удаляемыестроки Цикл
				Если СтрокаТаблицы.Удержание = СтрокаПредела.Удержание Тогда 
					ПлановыеУдержания.Удалить(СтрокаТаблицы);
				Иначе
					СтрокиДляДопАнализа.Добавить(СтрокаТаблицы);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;			
	КонецЦикла;		
	
	Если СтрокиДляДопАнализа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляДопАнализа = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтрокиДляДопАнализа);
	
	ОтборУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиДляДопАнализа, "Удержание", Истина);
	
	КатегориияУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОтборУдержаний, "КатегорияУдержания");
	
	Для Каждого СтрокаТаблицы Из СтрокиДляДопАнализа Цикл
		Если КатегориияУдержаний[СтрокаТаблицы.Удержание] = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента Тогда
			ПлановыеУдержания.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Функция КадроваяИстория() Экспорт
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных о кадровой истории.';
								|en = 'The filter of the employees history data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшКадроваяИсторияИнтервалы <> Неопределено Тогда
		Возврат КэшКадроваяИсторияИнтервалы;
	КонецЕсли;	
	
	ПараметрыПостроения =  ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	КэшКадроваяИсторияИнтервалы = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("КадроваяИсторияСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	УстановитьПривилегированныйРежим(Ложь);
	КэшКадроваяИсторияИнтервалы.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);
	
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшКадроваяИсторияИнтервалы, ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник", "Сотрудник", Истина); 	
		
	Возврат КэшКадроваяИсторияИнтервалы;	
КонецФункции	

Функция РабочиеМестаУдержаний()
	
	Если КэшРабочиеМестаУдержаний <> Неопределено Тогда
		Возврат КэшРабочиеМестаУдержаний;
	КонецЕсли;	
	
	ОписаниеФильтра = ФильтрПолученияПериодическихДанныхФизическихЛиц();
	
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	КэшРабочиеМестаУдержаний = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
		"РабочиеМестаУдержаний",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	УстановитьПривилегированныйРежим(Ложь);	
		
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(
		КэшРабочиеМестаУдержаний, 
		ТаблицаПолученияПериодическихДанныхФизическихЛиц,
		"ФизическоеЛицо, ДокументОснование",
		"ФизическоеЛицо");
		
	Возврат КэшРабочиеМестаУдержаний;	
КонецФункции

Функция ИсточникиДанныхУчетаВремени()
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных учета времени.';
								|en = 'The filter of time accounting data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшИстоникиДанныхУчетаВремениИнтервалы <> Неопределено Тогда
		Возврат КэшИстоникиДанныхУчетаВремениИнтервалы;
	КонецЕсли;
	
	МенеджерУчетаВремени = МенеджерУчетаВремени();
	
	УстановитьПривилегированныйРежим(Истина);
	КэшИстоникиДанныхУчетаВремениИнтервалы = МенеджерУчетаВремени.ИсточникиДанныхУчетаВремени(ОписаниеФильтра);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КэшИстоникиДанныхУчетаВремениИнтервалы;
КонецФункции

Функция ВидыЗанятостиСотрудников()
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных о кадровой истории.';
								|en = 'The filter of the employees history data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшВидыЗанятостиСотрудников <> Неопределено Тогда
		Возврат КэшВидыЗанятостиСотрудников;
	КонецЕсли;	
	
	ПараметрыПостроения =  ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	КэшВидыЗанятостиСотрудников = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("ВидыЗанятостиСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	УстановитьПривилегированныйРежим(Ложь);
	КэшВидыЗанятостиСотрудников.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);

	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшВидыЗанятостиСотрудников, ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник", "Сотрудник", Истина); 	
		
	Возврат КэшВидыЗанятостиСотрудников;	
КонецФункции

Функция ТерриторииСотрудников()
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных о территориях.';
								|en = 'The filter of the territory data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшТерриторииСотрудников <> Неопределено Тогда
		Возврат КэшТерриторииСотрудников;
	КонецЕсли;	
	
	ПараметрыПостроения =  ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	КэшТерриторииСотрудников = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("ТерриторииСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	УстановитьПривилегированныйРежим(Ложь);
	КэшТерриторииСотрудников.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);

	
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшТерриторииСотрудников, ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник", "Сотрудник", Истина); 	
		
	Возврат КэшТерриторииСотрудников;	
КонецФункции	

Функция СводныеДанныеПлановыхНачисленийСотрудников() Экспорт
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных о кадровой истории.';
								|en = 'The filter of the employees history data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшСводныеДанныеПлановыхНачисленийСотрудников <> Неопределено Тогда
		Возврат КэшСводныеДанныеПлановыхНачисленийСотрудников;
	КонецЕсли;	
	
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	КэшСводныеДанныеПлановыхНачисленийСотрудников = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("ПлановыйФОТИтоги", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	КэшСводныеДанныеПлановыхНачисленийСотрудников.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);
	
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшСводныеДанныеПлановыхНачисленийСотрудников, ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник", "Сотрудник", Истина); 	
		
	Возврат КэшСводныеДанныеПлановыхНачисленийСотрудников;	
КонецФункции

Функция ЗначенияБазовыхТарифов()
	Если КэшЗначенияБазовыхТарифов <> Неопределено Тогда
		Возврат КэшЗначениябазовыхТарифов;
	КонецЕсли;	
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФильтр.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));

	КадроваяИстория = КадроваяИстория();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КадроваяИстория, "Сотрудник");
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ДобавленныеСотрудники = Новый Соответствие;
	Для Каждого СтрокаТаблицыНачислений Из Начисления Цикл
		Если ТребованияНачислений[СтрокаТаблицыНачислений.Начисление].ТребуетсяПоказательБазовыйТарифГруппы
			И ДобавленныеСотрудники[СтрокаТаблицыНачислений.Сотрудник] = Неопределено Тогда
			
			СтруктураПоиска.Сотрудник = СтрокаТаблицыНачислений.Сотрудник;
			СтрокиКадровойИстории = КадроваяИстория.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ТекущаяСтрокаКадровойИстории Из СтрокиКадровойИстории Цикл
				Если ПодраздленияСУчетомИерархииОтбор = Неопределено
					Или ПодраздленияСУчетомИерархииОтбор[ТекущаяСтрокаКадровойИстории.Подразделение] <> Неопределено Тогда
					
					СтрокаФильтра = ТаблицаФильтр.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаФильтра, ТекущаяСтрокаКадровойИстории);
				КонецЕсли;	
			КонецЦикла;
					
			ДобавленныеСотрудники.Вставить(СтрокаТаблицыНачислений.Сотрудник, Истина);
		КонецЕсли;	
	КонецЦикла;	
	
	КэшЗначенияБазовыхТарифов = РазрядыКатегорииДолжностей.ЗначенияБазовыхТарифовПоСотруднткам(ТаблицаФильтр);	
	
	Возврат КэшЗначенияБазовыхТарифов;
КонецФункции	

Функция УсловияОплатыПособий()
	Если КэшУсловияОплатыПособий <> Неопределено Тогда
		Возврат КэшУсловияОплатыПособий;
	КонецЕсли;	
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));

	Для Каждого СтрокаТаблицыНачислений Из Начисления Цикл
		Если ТребованияНачислений[СтрокаТаблицыНачислений.Начисление].УчитыватьУсловийОплатыПособия Тогда
		
			ТекущийМесяц = НачалоМесяца(СтрокаТаблицыНачислений.ДатаНачала);
			ПоследнийМесяц = КонецМесяца(СтрокаТаблицыНачислений.ДатаОкончания);
			Пока ТекущийМесяц <= ПоследнийМесяц Цикл
				СтрокаТаблицыФильтра = ТаблицаФильтр.Добавить();
				СтрокаТаблицыФильтра.Сотрудник = СтрокаТаблицыНачислений.Сотрудник;
				СтрокаТаблицыФильтра.ДатаНачала = ТекущийМесяц;
				СтрокаТаблицыФильтра.ДатаОкончания = КонецМесяца(ТекущийМесяц);
				
				ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаФильтр.Свернуть("Сотрудник, ДатаНачала, ДатаОкончания");
	
	КэшУсловияОплатыПособий = УчетПособийСоциальногоСтрахованияРасширенный.УсловияОплатыПособийДоПолутораЛет(ТаблицаФильтр);
	
	Возврат КэшУсловияОплатыПособий;
КонецФункции	

Функция ПрименениеПлановыхНачисленийСлужебный()
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных о начислениях.';
								|en = 'The filter of the accruals data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшПрименениеПлановыхНачисленийИнтервалы <> Неопределено Тогда
		Возврат КэшПрименениеПлановыхНачисленийИнтервалы;
	КонецЕсли;	
	
	ПараметрыПостроения =  ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	КэшПрименениеПлановыхНачисленийИнтервалы = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	УстановитьПривилегированныйРежим(Ложь);
	КэшПрименениеПлановыхНачисленийИнтервалы.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);
	
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшПрименениеПлановыхНачисленийИнтервалы, ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник", "Сотрудник");
	
	Возврат КэшПрименениеПлановыхНачисленийИнтервалы;	
КонецФункции

Функция ЗначенияПоказателейПроцентСевернойНадбавки()
	Если КэшЗначенияПоказателейПроцентСевернойНадбавки <> Неопределено Тогда
		Возврат КэшЗначенияПоказателейПроцентСевернойНадбавки;
	КонецЕсли;
	
	КэшЗначенияПоказателейПроцентСевернойНадбавки = НовыйТаблицаПоказателейСотрудников();
	
	ПоказательСевернаяНадбавка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка");
	Если ПоказательСевернаяНадбавка = Неопределено Тогда
		Возврат КэшЗначенияПоказателейПроцентСевернойНадбавки;
	КонецЕсли;	
	
	ПоказателиПоСотрудникам = ИспользуемыеПоказателиСотрудников();	
	ОтборСотрудников = Новый Массив;
	Для Каждого ПоказателиСотрудника Из ПоказателиПоСотрудникам Цикл
		Если ПоказателиСотрудника.Значение[ПоказательСевернаяНадбавка] <> Неопределено Тогда
			ОтборСотрудников.Добавить(ПоказателиСотрудника.Ключ);
		КонецЕсли;	
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Истина);
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОтборСотрудников, "ФизическоеЛицо");
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОтбора.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаОтбора.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник");
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	Для Каждого ТекущийСотрудник Из ФизическиеЛицаСотрудников Цикл
		СтруктураПоиска.Сотрудник = ТекущийСотрудник.Ключ;
		СтрокиТаблицыОтбораПоСотрудникам = ТаблицаПолученияПериодическихДанныхСотрудников.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокатаблицыПоСотруднику Из СтрокиТаблицыОтбораПоСотрудникам Цикл
			СтрокаТаблицыОтбора = ТаблицаОтбора.Добавить();
			СтрокаТаблицыОтбора.ФизическоеЛицо = ТекущийСотрудник.Значение;
			СтрокаТаблицыОтбора.ДатаНачала = НачалоМесяца(СтрокатаблицыПоСотруднику.ДатаНачала);
			СтрокаТаблицыОтбора.ДатаОкончания = КонецМесяца(СтрокатаблицыПоСотруднику.ДатаНачала);
		КонецЦикла;			
	КонецЦикла;
	
	ТаблицаОтбора.Свернуть("ФизическоеЛицо, ДатаНачала, ДатаОкончания");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаОтбора, "ФизическоеЛицо");
	
	УстановитьПривилегированныйРежим(Истина);
	ПроцентыПоФизическимЛицам = КадровыйУчетРасширенный.ЗначенияПроцентаСевернойНадбавкиПоФизическимЛицам(ОписаниеФильтра);
	УстановитьПривилегированныйРежим(Ложь);

	ПроцентыПоФизическимЛицам.Индексы.Добавить("ФизическоеЛицо");
	
	СтруктураПоиска = Новый Структура("ФизическоеЛицо");
	
	Для Каждого ФизическоеЛицоСотрудника Из ФизическиеЛицаСотрудников Цикл
		СтруктураПоиска.ФизическоеЛицо = ФизическоеЛицоСотрудника.Значение;
		ДанныеОСеверенойНадбавке = ПроцентыПоФизическимЛицам.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаДанныхСверенойнадбавки Из ДанныеОСеверенойнадбавке Цикл
			СтрокаТаблицыПоказателей = КэшЗначенияПоказателейПроцентСевернойНадбавки.Добавить();
			СтрокаТаблицыПоказателей.Сотрудник = ФизическоеЛицоСотрудника.Ключ;
			СтрокаТаблицыПоказателей.Показатель = ПоказательСевернаяНадбавка;
			СтрокаТаблицыПоказателей.ДатаНачала = НачалоДня(СтрокаДанныхСверенойнадбавки.Период);
			СтрокаТаблицыПоказателей.ДатаОкончания = КонецДня(СтрокаДанныхСверенойнадбавки.ДействуетДо);
			СтрокаТаблицыПоказателей.Значение = СтрокаДанныхСверенойнадбавки.ПроцентСевернойНадбавки;
		КонецЦикла;				
	КонецЦикла;	
	
	КэшЗначенияПоказателейПроцентСевернойНадбавки.Свернуть("Сотрудник, Показатель, ДокументОснование, ДатаНачала, ДатаОкончания, Значение");
	
	Возврат КэшЗначенияПоказателейПроцентСевернойНадбавки;
КонецФункции	

Функция ЗначенияСтажевыхПоказателейСотрудников()
	Если КэшЗначенияСтажевыхПоказателей <> Неопределено Тогда
		Возврат КэшЗначенияСтажевыхПоказателей;
	КонецЕсли;
	
	ТаблицаОтбораСтажа = Новый ТаблицаЗначений;
	ТаблицаОтбораСтажа.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОтбораСтажа.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));

	СотрудникиОтбор = Новый Массив;
	СтажевыеПоказателиПоСотрудникам = Новый Соответствие;
	
	ИспользуемыеПоказателиСотрудников = ИспользуемыеПоказателиСотрудников();
	ОписаниеСтажевыхПоказателей = ОписаниеСтажевыхПоказателейНачислений();
	
	ТипЧисловойЗависящийОтСтажа =  Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа;
	Для Каждого ПоказателиПоСотруднику Из ИспользуемыеПоказателиСотрудников Цикл
		Для Каждого Показатель Из ПоказателиПоСотруднику.Значение Цикл
			Если ОписаниеСтажевыхПоказателей[Показатель.Ключ] <> Неопределено Тогда
				СтажевыеПоказателиСотрудника = СтажевыеПоказателиПоСотрудникам[ПоказателиПоСотруднику.Ключ];
				Если СтажевыеПоказателиСотрудника = Неопределено Тогда
					СтажевыеПоказателиСотрудника = Новый Массив;
					СтажевыеПоказателиПоСотрудникам.Вставить(ПоказателиПоСотруднику.Ключ, СтажевыеПоказателиСотрудника);
					СотрудникиОтбор.Добавить(ПоказателиПоСотруднику.Ключ);
				КонецЕсли;	
				СтажевыеПоказателиСотрудника.Добавить(Показатель.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
		
	УстановитьПривилегированныйРежим(Истина);
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СотрудникиОтбор, "ФизическоеЛицо");
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник");
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	Для Каждого ТекущийСотрудник Из ФизическиеЛицаСотрудников Цикл
		СтруктураПоиска.Сотрудник = ТекущийСотрудник.Ключ;
		СтрокиТаблицыОтбораПоСотрудникам = ТаблицаПолученияПериодическихДанныхСотрудников.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокатаблицыПоСотруднику Из СтрокиТаблицыОтбораПоСотрудникам Цикл
			СтрокаТаблицыОтбора = ТаблицаОтбораСтажа.Добавить();
			СтрокаТаблицыОтбора.ФизическоеЛицо = ТекущийСотрудник.Значение;
			СтрокаТаблицыОтбора.Период = НачалоМесяца(СтрокатаблицыПоСотруднику.ДатаНачала);
		КонецЦикла;			
	КонецЦикла;
	
	ТаблицаОтбораСтажа.Свернуть("ФизическоеЛицо, Период");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаОтбораСтажа, "ФизическоеЛицо");
	
	УстановитьПривилегированныйРежим(Истина);
	СтажиПоФизическимЛицам = КадровыйУчетРасширенный.СтажиФизическихЛицПоМесяцам(ОписаниеФильтра, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	КэшЗначенияСтажевыхПоказателей = РасчитатьЗначенияСтажевыхПоказателейСотрудников(СтажевыеПоказателиПоСотрудникам, СтажиПоФизическимЛицам, ФизическиеЛицаСотрудников, ОписаниеСтажевыхПоказателей);
		
	Возврат КэшЗначенияСтажевыхПоказателей;
КонецФункции	

Функция РасчитатьЗначенияСтажевыхПоказателейСотрудников(СтажевыеПоказателиПоСотрудникам, СтажиПоФизическимЛицам, ФизическиеЛицаСотрудников, СвойстваСтажевыхПоказателей)
	ЗначенияСтажевыхПоказателейСотрудников = НовыйТаблицаПоказателейСотрудников();

	СтажиПоФизическимЛицам.Индексы.Добавить("ФизическоеЛицо, ВидСтажа");
	СтруктураПоиска = Новый Структура("ФизическоеЛицо, ВидСтажа");
	
	Для Каждого СтажевыеПоказателиСотрудника Из СтажевыеПоказателиПоСотрудникам Цикл
		СтруктураПоиска.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтажевыеПоказателиСотрудника.Ключ];
		Для Каждого Показатель Из СтажевыеПоказателиСотрудника.Значение Цикл
			ШкалаОценки = СвойстваСтажевыхПоказателей[Показатель].ШкалаОценки;
			СтруктураПоиска.ВидСтажа = СвойстваСтажевыхПоказателей[Показатель].ВидСтажа;
			
			ДанныеСтажа = СтажиПоФизическимЛицам.Скопировать(СтруктураПоиска);	
			ДанныеСтажа.Сортировать("ДатаРасчетаСтажа");
			
			ПредыдущаяСтрока = Неопределено;
			Для ИндекСтрокиСтажа = 0 По ДанныеСтажа.Количество() - 1 Цикл
				СтрокаДанныхСтажа = ДанныеСтажа[ИндекСтрокиСтажа];
				
				ЗначениеПоказателя = ЗначениеСтажевогоПоказателя(СтрокаДанныхСтажа.ВсегоМесяцев, ШкалаОценки);
				
				СтрокаТаблицыПоказателей = Неопределено;
				Если ПредыдущаяСтрока <> Неопределено
					И ПредыдущаяСтрока.ДатаОкончания >= СтрокаДанныхСтажа.ДатаРасчетаСтажа Тогда
					
					Если ЗначениеПоказателя = ПредыдущаяСтрока.Значение Тогда
						СтрокаТаблицыПоказателей = ПредыдущаяСтрока;
					ИначеЕсли ПредыдущаяСтрока.ДатаНачала >= СтрокаДанныхСтажа.ДатаРасчетаСтажа Тогда
						ЗначенияСтажевыхПоказателейСотрудников.Удалить(ПредыдущаяСтрока);
					Иначе
						ПредыдущаяСтрока.ДатаОкончания = НачалоДня(СтрокаДанныхСтажа.ДатаРасчетаСтажа) - 1;
					КонецЕсли;		
				КонецЕсли;	
				
				Если СтрокаТаблицыПоказателей = Неопределено Тогда
					СтрокаТаблицыПоказателей = ЗначенияСтажевыхПоказателейСотрудников.Добавить();
					СтрокаТаблицыПоказателей.Сотрудник = СтажевыеПоказателиСотрудника.Ключ;
					СтрокаТаблицыПоказателей.Показатель = Показатель;
					СтрокаТаблицыПоказателей.ДатаНачала = СтрокаДанныхСтажа.ДатаРасчетаСтажа;
					СтрокаТаблицыПоказателей.Значение = ЗначениеПоказателя;
				КонецЕсли;	
				
				Если НачалоМесяца(СтрокаДанныхСтажа.ДатаРасчетаСтажа) = НачалоМесяца(СтрокаДанныхСтажа.НачалоБудущегоМесяца) Тогда
					СледующееЗначениеПоказателя = ЗначениеСтажевогоПоказателя(СтрокаДанныхСтажа.ВсегоМесяцев + 1, ШкалаОценки);
					Если СледующееЗначениеПоказателя = ЗначениеПоказателя Тогда
						СтрокаТаблицыПоказателей.ДатаОкончания = КонецМесяца(СтрокаДанныхСтажа.ДатаРасчетаСтажа);
					Иначе	
						СтрокаТаблицыПоказателей.ДатаОкончания = НачалоДня(СтрокаДанныхСтажа.НачалоБудущегоМесяца) - 1;
						
						СтрокаТаблицыПоказателей = ЗначенияСтажевыхПоказателейСотрудников.Добавить();
						СтрокаТаблицыПоказателей.Сотрудник = СтажевыеПоказателиСотрудника.Ключ;
						СтрокаТаблицыПоказателей.Показатель = Показатель;
						СтрокаТаблицыПоказателей.ДатаНачала = НачалоДня(СтрокаДанныхСтажа.НачалоБудущегоМесяца);
						СтрокаТаблицыПоказателей.ДатаОкончания = КонецМесяца(СтрокаДанныхСтажа.НачалоБудущегоМесяца); 
						СтрокаТаблицыПоказателей.Значение = СледующееЗначениеПоказателя;
					КонецЕсли;	
				Иначе
					СтрокаТаблицыПоказателей.ДатаОкончания = КонецМесяца(СтрокаДанныхСтажа.ДатаРасчетаСтажа);	
				КонецЕсли;	
				
				ПредыдущаяСтрока = СтрокаТаблицыПоказателей;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;	
	
	Возврат ЗначенияСтажевыхПоказателейСотрудников;	
КонецФункции	

Функция ЗначениеСтажевогоПоказателя(МесяцевСтажа, ШкалаОценки)
	Для Каждого ЭлементШкалы Из ШкалаОценки Цикл
		Если МесяцевСтажа >= ЭлементШкалы.НачалоДиапазона 
			И МесяцевСтажа <= ЭлементШкалы.КонецДиапазона Тогда
			
			Возврат ЭлементШкалы.Значение;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат 0;
КонецФункции	

Функция ЗначенияПоказателеОрганизацийПоСотрудникам()	
	Если КэшЗначенияПоказателейОрганизацийПоСотрудникам <> Неопределено Тогда
		Возврат КэшЗначенияПоказателейОрганизацийПоСотрудникам;
	КонецЕсли;	
		
	КэшЗначенияПоказателейОрганизацийПоСотрудникам = НовыйТаблицаПоказателейСотрудников();
	
	КадроваяИсторияСотрудников = КадроваяИстория();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КадроваяИсторияСотрудников, "Организация");
	
	ТаблицаФильтра = КоллекцииБЗК.СгруппироватьТаблицу(КадроваяИсторияСотрудников, "Организация", "МИНИМУМ(ДатаНачала), МАКСИМУМ(ДатаОкончания)");
		
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтра, "Организация");
	
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	
	
	ЗначенияПоказателейОрганизаций = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
											"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
											МенеджерВременныхТаблиц,
											Истина,
											ОписаниеФильтра,
											ПараметрыПостроения);  
											           																	   
	ЗначенияПоказателейОрганизаций.Сортировать("Организация, Показатель, Период", Новый СравнениеЗначений);										
											
	ПредыдущаяСтрока = Неопределено;
	СтруктураПоиска = Новый Структура("Организация");
	Для Каждого ТекушаяСтрокаПоказателей Из ЗначенияПоказателейОрганизаций Цикл
		Если ПредыдущаяСтрока = Неопределено Тогда
			ПредыдущаяСтрока = ТекушаяСтрокаПоказателей;
			СтруктураПоиска.Организация = ТекушаяСтрокаПоказателей.Организация;
			СтрокиКадровойИстории = КадроваяИсторияСотрудников.НайтиСтроки(СтруктураПоиска);
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущаяСтрока.Организация <> ТекушаяСтрокаПоказателей.Организация Тогда
			ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			
			ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(
				КэшЗначенияПоказателейОрганизацийПоСотрудникам,
				ПредыдущаяСтрока.Показатель,
				ПредыдущаяСтрока.Значение,
				ПредыдущаяСтрока.Период,
				ДатаОкончания,
				СтрокиКадровойИстории);
				
			СтруктураПоиска.Организация = ТекушаяСтрокаПоказателей.Организация;
			СтрокиКадровойИстории = КадроваяИсторияСотрудников.НайтиСтроки(СтруктураПоиска);
		ИначеЕсли ПредыдущаяСтрока.Показатель <> ТекушаяСтрокаПоказателей.Показатель Тогда
			ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			
			ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(
				КэшЗначенияПоказателейОрганизацийПоСотрудникам,
				ПредыдущаяСтрока.Показатель,
				ПредыдущаяСтрока.Значение,
				ПредыдущаяСтрока.Период,
				ДатаОкончания,
				СтрокиКадровойИстории);
		Иначе
			ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(
				КэшЗначенияПоказателейОрганизацийПоСотрудникам,
				ПредыдущаяСтрока.Показатель,
				ПредыдущаяСтрока.Значение,
				ПредыдущаяСтрока.Период,
				НачалоДня(ТекушаяСтрокаПоказателей.Период) - 1,
				СтрокиКадровойИстории);	
		КонецЕсли;	
		
		ПредыдущаяСтрока = ТекушаяСтрокаПоказателей;
	КонецЦикла;	
	
	Если ПредыдущаяСтрока <> Неопределено Тогда 
		ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			
		ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(
			КэшЗначенияПоказателейОрганизацийПоСотрудникам,
			ПредыдущаяСтрока.Показатель,
			ПредыдущаяСтрока.Значение,
			ПредыдущаяСтрока.Период,
			ДатаОкончания,
			СтрокиКадровойИстории);
	КонецЕсли;		
	
	Возврат КэшЗначенияПоказателейОрганизацийПоСотрудникам;
КонецФункции	

Функция ЗначенияПоказателейПодразделенийПоСотрудникам()	
	Если КэшЗначенияПоказателейПодразделенийПоСотрудникам <> Неопределено Тогда
		Возврат КэшЗначенияПоказателейПодразделенийПоСотрудникам;
	КонецЕсли;	
	КэшЗначенияПоказателейПодразделенийПоСотрудникам = НовыйТаблицаПоказателейСотрудников();
		
	КадроваяИсторияСотрудников = КадроваяИстория();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КадроваяИсторияСотрудников, "Подразделение");
	
	ТаблицаФильтра = КоллекцииБЗК.СгруппироватьТаблицу(КадроваяИсторияСотрудников, "Подразделение", "МИНИМУМ(ДатаНачала), МАКСИМУМ(ДатаОкончания)");
	Если ПодраздленияСУчетомИерархииОтбор <> Неопределено Тогда
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ТаблицаФильтра.Количество() - 1 Цикл
			СтрокаТаблицыФильтра = ТаблицаФильтра[ИндексСтроки];
			Если ПодраздленияСУчетомИерархииОтбор[СтрокаТаблицыФильтра.Подразделение] <> Истина Тогда
				ТаблицаФильтра.Удалить(ИндексСтроки);
			Иначе
				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтра, "Подразделение");
	
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	
	ЗначенияПоказателейПодразделений = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
											"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
											МенеджерВременныхТаблиц,
											Истина,
											ОписаниеФильтра,
											ПараметрыПостроения);  
											
											
	ЗначенияПоказателейПодразделений.Сортировать("Подразделение, Показатель, Период", Новый СравнениеЗначений);										
											
	ПредыдущаяСтрока = Неопределено;
	СтруктураПоиска = Новый Структура("Подразделение");
	Для Каждого ТекушаяСтрокаПоказателей Из ЗначенияПоказателейПодразделений Цикл
		Если ПредыдущаяСтрока = Неопределено Тогда
			ПредыдущаяСтрока = ТекушаяСтрокаПоказателей;
			СтруктураПоиска.Подразделение = ТекушаяСтрокаПоказателей.Подразделение;
			СтрокиКадровойИстории = КадроваяИсторияСотрудников.НайтиСтроки(СтруктураПоиска);
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущаяСтрока.Подразделение <> ТекушаяСтрокаПоказателей.Подразделение Тогда
			ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			
			ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(
				КэшЗначенияПоказателейПодразделенийПоСотрудникам,
				ПредыдущаяСтрока.Показатель,
				ПредыдущаяСтрока.Значение,
				ПредыдущаяСтрока.Период,
				ДатаОкончания,
				СтрокиКадровойИстории);
				
			СтруктураПоиска.Подразделение = ТекушаяСтрокаПоказателей.Подразделение;
			СтрокиКадровойИстории = КадроваяИсторияСотрудников.НайтиСтроки(СтруктураПоиска);
		ИначеЕсли ПредыдущаяСтрока.Показатель <> ТекушаяСтрокаПоказателей.Показатель Тогда
			ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			
			ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(
				КэшЗначенияПоказателейПодразделенийПоСотрудникам,
				ПредыдущаяСтрока.Показатель,
				ПредыдущаяСтрока.Значение,
				ПредыдущаяСтрока.Период,
				ДатаОкончания,
				СтрокиКадровойИстории);
		Иначе
			ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(
				КэшЗначенияПоказателейПодразделенийПоСотрудникам,
				ПредыдущаяСтрока.Показатель,
				ПредыдущаяСтрока.Значение,
				ПредыдущаяСтрока.Период,
				НачалоДня(ТекушаяСтрокаПоказателей.Период) - 1,
				СтрокиКадровойИстории);	
		КонецЕсли;	
		
		ПредыдущаяСтрока = ТекушаяСтрокаПоказателей;
	КонецЦикла;	
	
	Если ПредыдущаяСтрока <> Неопределено Тогда 
		ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			
		ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(
			КэшЗначенияПоказателейПодразделенийПоСотрудникам,
			ПредыдущаяСтрока.Показатель,
			ПредыдущаяСтрока.Значение,
			ПредыдущаяСтрока.Период,
			ДатаОкончания,
			СтрокиКадровойИстории);
	КонецЕсли;		

	КэшЗначенияПоказателейПодразделенийПоСотрудникам.Сортировать("Сотрудник, Показатель, ДатаНачала", Новый СравнениеЗначений);
	
	Возврат КэшЗначенияПоказателейПодразделенийПоСотрудникам;
КонецФункции	

Функция ЗначенияРазовыхПоказателейСотрудников()
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных показателей.';
								|en = 'The filter of indicator data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшЗначенияРазовыхПоказателейСотрудников <> Неопределено Тогда
		Возврат КэшЗначенияРазовыхПоказателейСотрудников;
	КонецЕсли;
	
	ОрганизацииОтбор = РассчитываемыеОрганизациия();
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников");
	
	ОписаниеПакета.Параметры.Вставить("ОрганизацииОтбор", ОрганизацииОтбор);
	ОписаниеПакета.Параметры.Вставить("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияРазовыхСотрудников.ПериодДействия КАК ПериодДействия,
	|	ЗначенияРазовыхСотрудников.Сотрудник КАК Сотрудник,
	|	ЗначенияРазовыхСотрудников.Показатель КАК Показатель,
	|	ЗначенияРазовыхСотрудников.Организация КАК Организация,
	|	ЗначенияРазовыхСотрудников.Значение КАК Значение
	|ИЗ
	|	ВТСотрудникиМесяцы КАК СотрудникиМесяцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхСотрудников
	|		ПО (&ШаблонУсловияСвязиПоИзмерениям)
	|			И (ЗначенияРазовыхСотрудников.ПериодДействия = &ФильтрМесяц_)
	|			И (ЗначенияРазовыхСотрудников.Организация В (&ОрганизацииОтбор))
	|			И (ЗначенияРазовыхСотрудников.Регистратор <> &ИсключаемыйРегистратор)";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("СотрудникиМесяцы", "ЗначенияРазовыхСотрудников");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"",
		ОператорЗапроса);
	
	ВыражениеПоляФильтраМесяц = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Месяц", ОписаниеИспользованияФильтра);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&ФильтрМесяц_", ВыражениеПоляФильтраМесяц);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КэшЗначенияРазовыхПоказателейСотрудников = Запрос.Выполнить().Выгрузить();
	
	Возврат КэшЗначенияРазовыхПоказателейСотрудников;
КонецФункции

Функция ЗначенияРазовыхПоказателейФизическихЛиц()
	ОписаниеФильтра = ФильтрПолученияПериодическихДанныхФизическихЛиц();
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Организация", "");
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных показателей.';
								|en = 'The filter of indicator data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшЗначенияРазовыхПоказателейФизическихЛиц <> Неопределено Тогда
		Возврат КэшЗначенияРазовыхПоказателейФизическихЛиц;
	КонецЕсли;
		
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеПакета.Параметры.Вставить("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников");
	
	ОписаниеПакета.Параметры.Вставить("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияРазовыхСотрудников.ПериодДействия КАК ПериодДействия,
	|	ЗначенияРазовыхСотрудников.Сотрудник КАК Сотрудник,
	|	ЗначенияРазовыхСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗначенияРазовыхСотрудников.Показатель КАК Показатель,
	|	ЗначенияРазовыхСотрудников.Значение КАК Значение
	|ИЗ
	|	ВТФизическиеЛицаМесяцы КАК ФизическиеЛицаМесяцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхСотрудников
	|		ПО (&ШаблонУсловияСвязиПоИзмерениям)
	|			И (ЗначенияРазовыхСотрудников.ПериодДействия = &ФильтрМесяц_)
	|			И (ЗначенияРазовыхСотрудников.Регистратор <> &ИсключаемыйРегистратор)
	|ГДЕ
	|	ЗначенияРазовыхСотрудников.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ФизическиеЛицаМесяцы", "ЗначенияРазовыхСотрудников");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"",
		ОператорЗапроса);
	
	ВыражениеПоляФильтраМесяц = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Месяц", ОписаниеИспользованияФильтра);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&ФильтрМесяц_", ВыражениеПоляФильтраМесяц);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КэшЗначенияРазовыхПоказателейФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	Возврат КэшЗначенияРазовыхПоказателейФизическихЛиц;
КонецФункции

Функция ЗначенияПериодическихПоказателейСотрудников()	
	ОписаниеФильтра = ФильтрПолученияДанныхСотрудников();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных показателей.';
								|en = 'The filter of indicator data receipt is not initialized.'") ;
	КонецЕсли;

	
	Если КэшЗначенияПериодическихПоказателейСотрудников <> Неопределено Тогда
		Возврат КэшЗначенияПериодическихПоказателейСотрудников;
	КонецЕсли;	
	
	ПараметрыПостроения =  ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	КэшЗначенияПериодическихПоказателейСотрудников = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	КэшЗначенияПериодическихПоказателейСотрудников.Сортировать("Организация, Сотрудник, Показатель, ДокументОснование, Период", Новый СравнениеЗначений);
	
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшЗначенияПериодическихПоказателейСотрудников, ТаблицаПолученияПериодическихДанныхСотрудников, "Организация, Сотрудник, Показатель, ДокументОснование", "Сотрудник");
	
	Возврат КэшЗначенияПериодическихПоказателейСотрудников;
КонецФункции

Функция ЗначенияПериодическихПоказателейФизическихЛиц()	
	ОписаниеФильтра = ФильтрПолученияПериодическихДанныхФизическихЛиц();
	
	Если ОписаниеФильтра = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных показателей.';
								|en = 'The filter of indicator data receipt is not initialized.'") ;
	КонецЕсли;

	
	Если КэшЗначенияПериодическихПоказателейФизическихЛиц <> Неопределено Тогда
		Возврат КэшЗначенияПериодическихПоказателейФизическихЛиц;
	КонецЕсли;	
	
	ПараметрыПостроения =  ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	КэшЗначенияПериодическихПоказателейФизическихЛиц = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	КэшЗначенияПериодическихПоказателейФизическихЛиц.Сортировать("ФизическоеЛицо, Показатель, ДокументОснование, Период", Новый СравнениеЗначений);
	
	ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(КэшЗначенияПериодическихПоказателейФизическихЛиц, ТаблицаПолученияПериодическихДанныхФизическихЛиц, "ФизическоеЛицо, Показатель, ДокументОснование", "ФизическоеЛицо");
	
	Возврат КэшЗначенияПериодическихПоказателейФизическихЛиц;
КонецФункции

Функция ПериодыДействияВремяВЧасахПоНачислениям()
	Если КэшПериодыДействияВремяВЧасахПоНачислениям <> Неопределено Тогда
		Возврат КэшПериодыДействияВремяВЧасахПоНачислениям;                 
	КонецЕсли;
	
	КэшПериодыДействияВремяВЧасахПоНачислениям = Новый ТаблицаЗначений;
	КэшПериодыДействияВремяВЧасахПоНачислениям.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КэшПериодыДействияВремяВЧасахПоНачислениям.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	КэшПериодыДействияВремяВЧасахПоНачислениям.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	КэшПериодыДействияВремяВЧасахПоНачислениям.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	КэшПериодыДействияВремяВЧасахПоНачислениям.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	КэшПериодыДействияВремяВЧасахПоНачислениям.Колонки.Добавить("ДокументОснование");
	КэшПериодыДействияВремяВЧасахПоНачислениям.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	
	МенеджерДанныхУчетаВремени = МенеджерУчетаВремени();
	
	ИсточникиДанныхУчетаВремени = ИсточникиДанныхУчетаВремени();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ИсточникиДанныхУчетаВремени, "Сотрудник");
	СтруктураПоиска = Новый Структура("Сотрудник");
			
	НачисленияПоИсточникамДанных = Новый ТаблицаЗначений;
	НачисленияПоИсточникамДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ИсточникДанныхФактическогоВремени", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ПериодРегистрацииФактическогоВремени", Новый ОписаниеТипов("Дата"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	НачисленияПоИсточникамДанных.Колонки.Добавить("КлючНабораВидовВремени", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	// Разобьем строки начислений по периодма изменений источников данных учета времени
	Для Каждого СтрокаНачислений Из Начисления Цикл
		Если Не ТребованияНачислений[СтрокаНачислений.Начисление].УчитыватьИзмененияВремяВЧасах Тогда
			Продолжить;
		КонецЕсли;	
					
		СтруктураПоиска.Сотрудник = СтрокаНачислений.Сотрудник;
		СтрокиИсточниковДанных = ИсточникиДанныхУчетаВремени.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ИсточникДанныхУчетаВремени Из СтрокиИсточниковДанных Цикл
			ДатаНачалаДействия = Макс(ИсточникДанныхУчетаВремени.ДатаНачала, СтрокаНачислений.ДатаНачала);
			ДатаОкончанияДействия = КонецДня(Мин(ИсточникДанныхУчетаВремени.ДатаОкончания, СтрокаНачислений.ДатаОкончания));
			
			Если ДатаОкончанияДействия > ДатаНачалаДействия Тогда
				СтрокаТаблицыНачисленийПоИсточникам = НачисленияПоИсточникамДанных.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыНачисленийПоИсточникам, ИсточникДанныхУчетаВремени);
				СтрокаТаблицыНачисленийПоИсточникам.КлючНабораВидовВремени = СтрокаНачислений.Начисление;
				СтрокаТаблицыНачисленийПоИсточникам.ДатаНачала = ДатаНачалаДействия;
				СтрокаТаблицыНачисленийПоИсточникам.ДатаОкончания = ДатаОкончанияДействия;
			КонецЕсли;			
		КонецЦикла;	
	КонецЦикла;	
		
	ОписаниеТаблицыНаборовВидовВремени = МенеджерДанныхУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеТаблицыНаборовВидовВремени.ИмяТаблицы = "ПланВидовРасчета.Начисления.ВидыВремени";
	ОписаниеТаблицыНаборовВидовВремени.ИмяПоляКлюч = "Ссылка";
	ОписаниеТаблицыНаборовВидовВремени.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеТаблицыНаборовВидовВремени.ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни";
	
	ПоляГруппировки = "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик, Месяц, КлючНабораВидовВремени";
	ГруппируемыеПоля = "МИНИМУМ(ДатаНачала), МАКСИМУМ(ДатаОкончания)";
	ТаблицаФильтр = КоллекцииБЗК.СгруппироватьТаблицу(НачисленияПоИсточникамДанных, ПоляГруппировки, ГруппируемыеПоля);
	
	Порядок = Новый Массив;
	Порядок.Добавить("ИсточникДанныхФактическогоВремени");
	Порядок.Добавить("ПериодРегистрацииФактическогоВремени");
	Порядок.Добавить("Месяц");
	Порядок.Добавить("ДатаНачала");
	Порядок.Добавить("ДатаОкончания");
	Порядок.Добавить("КлючНабораВидовВремени");
	Порядок.Добавить("Дата");
	
	ДатыРегистрацииНаборовВидовВремени = МенеджерДанныхУчетаВремени.ДатыРегистрацииНаборовВидовВремени(ТаблицаФильтр, ОписаниеТаблицыНаборовВидовВремени, Порядок);
	
	// Интервалы действия признака ВремяВЧасах
	СтрокиКУдалению = Новый Массив;
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыДатРегистрации Из ДатыРегистрацииНаборовВидовВремени Цикл
		Если ПредыдущаяСтрока = Неопределено
			Или ПредыдущаяСтрока.ИсточникДанныхФактическогоВремени <> СтрокаТаблицыДатРегистрации.ИсточникДанныхФактическогоВремени
			Или ПредыдущаяСтрока.ПериодРегистрацииФактическогоВремени <> СтрокаТаблицыДатРегистрации.ПериодРегистрацииФактическогоВремени
			Или ПредыдущаяСтрока.ОбщийГрафик <> СтрокаТаблицыДатРегистрации.ОбщийГрафик
			Или ПредыдущаяСтрока.КлючНабораВидовВремени <> СтрокаТаблицыДатРегистрации.КлючНабораВидовВремени Тогда	

			ПредыдущаяСтрока = СтрокаТаблицыДатРегистрации;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыДатРегистрации.ВремяВчасах = ПредыдущаяСтрока.ВремяВчасах Тогда 
			СтрокиКУдалению.Добавить(СтрокаТаблицыДатРегистрации);
			Продолжить;
		Иначе	
			ПредыдущаяСтрока.ДатаОкончания = СтрокаТаблицыДатРегистрации.Дата - 1;
			СтрокаТаблицыДатРегистрации.ДатаНачала = СтрокаТаблицыДатРегистрации.Дата;
		КонецЕсли;	
		
		ПредыдущаяСтрока = СтрокаТаблицыДатРегистрации;
	КонецЦикла;	
	
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ДатыРегистрацииНаборовВидовВремени.Удалить(УдаляемаяСтрока);
	КонецЦикла;	
	
	ПоляПоиска = "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик, КлючНабораВидовВремени";
	НачисленияПоИсточникамДанных.Индексы.Добавить(ПоляПоиска);
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	// Периоды действия признака ВремяВЧасах в разрезе сотрудников и начислений
	Для Каждого СтрокаПериодовНачислений Из ДатыРегистрацииНаборовВидовВремени Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПериодовНачислений);
		СтрокиНачисленийПоСотрудникам = НачисленияПоИсточникамДанных.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаНачислений Из СтрокиНачисленийПоСотрудникам Цикл
			ДатаНачалаДействия = Макс(СтрокаНачислений.ДатаНачала, СтрокаПериодовНачислений.ДатаНачала);
			ДатаОкончанияДействия = КонецДня(Мин(СтрокаНачислений.ДатаОкончания, СтрокаПериодовНачислений.ДатаОкончания));	
			
			Если ДатаОкончанияДействия > ДатаНачалаДействия Тогда
				СтрокаРезультат = КэшПериодыДействияВремяВЧасахПоНачислениям.Добавить();
				СтрокаРезультат.Сотрудник = СтрокаНачислений.Сотрудник;
				СтрокаРезультат.Начисление = СтрокаНачислений.КлючНабораВидовВремени;
				СтрокаРезультат.ДатаНачала = ДатаНачалаДействия;
				СтрокаРезультат.Месяц = НачалоМесяца(СтрокаРезультат.ДатаНачала);
				СтрокаРезультат.ДатаОкончания = ДатаОкончанияДействия;
				СтрокаРезультат.ВремяВЧасах = СтрокаПериодовНачислений.ВремяВЧасах;
			КонецЕсли;				
		КонецЦикла;			                        
	КонецЦикла;	
	
	КэшПериодыДействияВремяВЧасахПоНачислениям.Сортировать("Сотрудник, Начисление, ДатаНачала", Новый СравнениеЗначений);
	
	Возврат КэшПериодыДействияВремяВЧасахПоНачислениям;
КонецФункции	

Функция ОсновныеСотрудникиФизическихЛиц()
	Если КэшОсновныеСотрудникиФизическихЛиц <> Неопределено Тогда
		Возврат КэшОсновныеСотрудникиФизическихЛиц;
	КонецЕсли;	
	
	ФильтрПолученияОсновныхСотрудников = Новый ТаблицаЗначений;
	ФильтрПолученияОсновныхСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФильтрПолученияОсновныхСотрудников.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ФильтрПолученияОсновныхСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ФильтрПолученияОсновныхСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ТребованияУдержаний = ТребованияУдержанийТаблица();
	
	СтрокиУдержанийКДополнению = Новый Массив;
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		Если ТребованияУдержаний[СтрокаУдержаний.Удержание].ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей 
			И Не ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) 
			И Не ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) 
			И Не СтрокаУдержаний.ФиксСторно
			И Не СтрокаУдержаний.ФиксЗаполнение Тогда
			
			СтрокаФильтра = ФильтрПолученияОсновныхСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФильтра, СтрокаУдержаний);
			
			СтрокиУдержанийКДополнению.Добавить(СтрокаУдержаний);
		КонецЕсли;
	КонецЦикла;	
	
	КэшОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ПериодыОсновныхСотрудниковФизическихЛиц(ФильтрПолученияОсновныхСотрудников);
	
	Возврат КэшОсновныеСотрудникиФизическихЛиц; 
КонецФункции	

Функция ЗадолженностьПоУдержаниямФизическихЛиц()
	Если КэшЗадолженностьПоУдержаниямФизическихЛиц <> Неопределено Тогда
		Возврат КэшЗадолженностьПоУдержаниямФизическихЛиц;
	КонецЕсли;	
		
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПолученияПериодическихДанныхФизическихЛиц, "ФизическоеЛицо");
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ФизическиеЛица);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Организация КАК Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Удержание КАК Удержание,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование КАК ДокументОснование,
		|	СУММА(ЗадолженностьПоУдержаниямФизическихЛиц.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Организация КАК Организация,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Удержание КАК Удержание,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование КАК ДокументОснование,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.СуммаОстаток КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц.Остатки(
		|				&МесяцНачисления,
		|				Организация = &ГоловнаяОрганизация
		|					И ФизическоеЛицо В (&СписокФизическихЛиц)) КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Организация,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Удержание,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Сумма
		|	ИЗ
		|		РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|	ГДЕ
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Организация = &ГоловнаяОрганизация
		|		И ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо В(&СписокФизическихЛиц)
		|		И ЗадолженностьПоУдержаниямФизическихЛиц.Период < &МесяцНачисления
		|		И ЗадолженностьПоУдержаниямФизическихЛиц.Регистратор = &ИсключаемыйРегистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Организация,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Удержание,
		|		ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование,
		|		-ЗадолженностьПоУдержаниямФизическихЛиц.Сумма
		|	ИЗ
		|		РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|	ГДЕ
		|		ЗадолженностьПоУдержаниямФизическихЛиц.Организация = &ГоловнаяОрганизация
		|		И ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо В(&СписокФизическихЛиц)
		|		И ЗадолженностьПоУдержаниямФизическихЛиц.Период = &МесяцНачисления
		|		И ЗадолженностьПоУдержаниямФизическихЛиц.Регистратор <> &ИсключаемыйРегистратор
		|		И ЗадолженностьПоУдержаниямФизическихЛиц.ПогашениеЗадолженности) КАК ЗадолженностьПоУдержаниямФизическихЛиц
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Организация,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ФизическоеЛицо,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.Удержание,
		|	ЗадолженностьПоУдержаниямФизическихЛиц.ДокументОснование
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗадолженностьПоУдержаниямФизическихЛиц.Сумма) > 0";
	
	КэшЗадолженностьПоУдержаниямФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	Если КэшЗадолженностьПоУдержаниямФизическихЛиц.Количество() = 0 Тогда
		Возврат КэшЗадолженностьПоУдержаниямФизическихЛиц;
	КонецЕсли;	
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(КэшЗадолженностьПоУдержаниямФизическихЛиц, "ФизическоеЛицо");

	УстановитьПривилегированныйРежим(Истина);
	СписокСотрудников = Обработки.МенеджерРасчетаЗарплаты.ИсключаемыеИзРасчетаВзысканийСотрудники(ГоловнаяОрганизация, МесяцНачисления, ФизическиеЛица);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СписокСотрудников.Количество() = 0 Тогда 
		Возврат КэшЗадолженностьПоУдержаниямФизическихЛиц;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ФизическиеЛицаСотрудников = ОбщегоНазначенияБЗК.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ФизическоеЛицо");
	УстановитьПривилегированныйРежим(Ложь);
	
	КэшЗадолженностьПоУдержаниямФизическихЛиц.Индексы.Добавить("ФизическоеЛицо");
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого КлючЗначение Из ФизическиеЛицаСотрудников Цикл
		Отбор.ФизическоеЛицо = КлючЗначение.Значение;
		УдаляемыеСтроки = КэшЗадолженностьПоУдержаниямФизическихЛиц.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТаблицы Из УдаляемыеСтроки Цикл
			КэшЗадолженностьПоУдержаниямФизическихЛиц.Удалить(СтрокаТаблицы);	
		КонецЦикла;
	КонецЦикла;	
		
	Возврат КэшЗадолженностьПоУдержаниямФизическихЛиц;
КонецФункции

Функция ФильтрПолученияДанныхСотрудников()
	Если ФильтрПолученияПериодическихДанныхСотрудников <> Неопределено Тогда
		Возврат ФильтрПолученияПериодическихДанныхСотрудников;
	КонецЕсли;	
	
	Если ТаблицаПолученияПериодическихДанныхСотрудников = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТаблицаФильтр = ТаблицаПолученияПериодическихДанныхСотрудников.Скопировать();
	
	ФильтрПолученияПериодическихДанныхСотрудников = 
		ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
			ТаблицаФильтр, 
			"Сотрудник",
			"Месяц",
			МенеджерВременныхТаблиц, 
			"ПолученияПериодическихДанныхСотрудников");
	
	Возврат ФильтрПолученияПериодическихДанныхСотрудников;	
КонецФункции

Функция ФильтрПолученияПериодическихДанныхФизическихЛиц()
	Если ФильтрПолученияПериодическихДанныхФизическихЛиц <> Неопределено Тогда
		Возврат ФильтрПолученияПериодическихДанныхФизическихЛиц;
	КонецЕсли;	
	
	Если ТаблицаПолученияПериодическихДанныхФизическихЛиц = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТаблицаФильтр = ТаблицаПолученияПериодическихДанныхФизическихЛиц.Скопировать();
	
	ФильтрПолученияПериодическихДанныхФизическихЛиц = 
		ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
			ТаблицаФильтр, 
			"ФизическоеЛицо, ГоловнаяОрганизация",
			"Месяц",
			МенеджерВременныхТаблиц, 
			"ПолученияПериодическихДанныхФизическихЛиц");
	
	Возврат ФильтрПолученияПериодическихДанныхФизическихЛиц;	
КонецФункции

Функция НовыйТаблицаФильтрПоСотрудникам()
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФильтр.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФильтр.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаФильтр;
КонецФункции

#КонецОбласти

#Область ПолучениеНабораЗаписейНачислений

Функция СтрокиНачисленийПоИдентификаторам()
	СтрокиНачисленийПоИдентификаторам = Новый Соответствие;
	
	Для Каждого СтрокаТаблицыНачислений Из Начисления Цикл
		СтрокиНачисленийПоИдентификаторам.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений);		
	КонецЦикла;	
	
	Возврат СтрокиНачисленийПоИдентификаторам;
КонецФункции

Функция ДанныеТекущегоНабораНачисления()
	Если КэшДанныеТекущегоНабораНачисления <> Неопределено Тогда
		Возврат КэшДанныеТекущегоНабораНачисления;
	КонецЕсли;
	
	Если Начисления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ЗаполнитьИдентификаторСтроки(Начисления);
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Начисления);
	
	КэшДанныеТекущегоНабораНачисления = Новый Структура("ТаблицаНабора, ФПД");	
	
	ОтменятьТранзакцию = Ложь;
	НаборЗаписан = Ложь;

	// Настоящий ФПД не требуется, если в этом периоде по сотруднику пока еще нет ни одной записи.
	
	// Если набор записей достаточно большой, то не пытаемся анализировать необходимость его записи.
	// Записываем безусловно, т.к. велика вероятность, что в нем есть вытесненные записи
	
	МаксимальноеКоличествоЗаписейДляАнализа = 200;
	
	Если НастройкиРасчета.РассчитыватьНачисленияТолькоПоТекущемуДокументу Тогда
		ОписаниеПолучаемыхЗаписейФПД = НовыйОписаниеПолучаемыхЗаписейФПД();		
		ОписаниеПолучаемыхЗаписейФПД.РегистраторНабора = НаборыЗаписей.Начисления.Отбор.Регистратор.Значение;
	ИначеЕсли НаборыЗаписей.Начисления.Количество() > МаксимальноеКоличествоЗаписейДляАнализа
		Или ВНабореЕстьВзаимоВытесняемыеНачисления(НаборыЗаписей.Начисления) Тогда 
		
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
			ОтменятьТранзакцию = Истина;
			НаборЗаписан = Истина;
		КонецЕсли;
		
		ЗаписатьНаборНачисления(НаборыЗаписей.Начисления, ОтменятьТранзакцию);
		КэшДанныеТекущегоНабораНачисления.ТаблицаНабора = НаборыЗаписей.Начисления.Выгрузить();
		
		ОписаниеПолучаемыхЗаписейФПД = ОписаниеПолучаемыхЗаписейФПДПоЗаписанномуНабору(НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
	Иначе	
		ОписаниеПолучаемыхЗаписейФПД = ОписаниеПолучаемыхЗаписейФПДПоОбъектуНабораЗаписей(НаборыЗаписей.Начисления);
		
		Если ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДЗаписейТекущегоНабора Тогда
			Если Не ТранзакцияАктивна() Тогда
				НачатьТранзакцию();
				ОтменятьТранзакцию = Истина;
				НаборЗаписан = Истина;
			КонецЕсли;

			ЗаписатьНаборНачисления(НаборыЗаписей.Начисления, ОтменятьТранзакцию);
			КэшДанныеТекущегоНабораНачисления.ТаблицаНабора = НаборыЗаписей.Начисления.Выгрузить();
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не НаборЗаписан Тогда
		КэшДанныеТекущегоНабораНачисления.ТаблицаНабора = НаборыЗаписей.Начисления.Выгрузить();
		КэшДанныеТекущегоНабораНачисления.ТаблицаНабора.ЗаполнитьЗначения(НаборыЗаписей.Начисления.Отбор.Регистратор.Значение, "Регистратор");
		ПронумероватьСтрокиТаблицыДанныхНабора(КэшДанныеТекущегоНабораНачисления.ТаблицаНабора)
	КонецЕсли;	
	
	КэшДанныеТекущегоНабораНачисления.ФПД = ФПДПоОписаниюПолучаемыхЗаписей(ОписаниеПолучаемыхЗаписейФПД, КэшДанныеТекущегоНабораНачисления.ТаблицаНабора);
	
	Если ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДДополнительныхЗаписей Тогда
		УничтожитьВТ(ОписаниеПолучаемыхЗаписейФПД.ИмяВТКлючиДополниельныхЗаписейФПД);
	КонецЕсли;	
		
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	ИначеЕсли НаборЗаписан Или ТранзакцияАктивна() Тогда 
		НаборОчистки = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременныйРегистратор);
		НаборОчистки.Записать();
	КонецЕсли;	
	
	Возврат КэшДанныеТекущегоНабораНачисления;               
КонецФункции

Процедура СоздатьВТПоРегиструНачисления()
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисления();
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ДанныеТекущегоНабора.ТаблицаНабора, "ВТРегистрРасчета_Начисления", Истина);
	Если НеобходимаВТФПДНачислений() Тогда
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ДанныеТекущегоНабора.ФПД, "ВТРегистрРасчета_Начисления_ФактическийПериодДействия", Истина);
	КонецЕсли;	
КонецПроцедуры	

Функция НеобходимаВТФПДНачислений()
	Возврат БухучетВыполняемыеДействия.ВыполнятьБухучетНачислений;
КонецФункции	

Процедура ПронумероватьСтрокиТаблицыДанныхНабора(ТаблицаДанныхНабора)
	НомерСтроки = 1;
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхНабора Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	
КонецПроцедуры	

Функция ФПДПоОписаниюПолучаемыхЗаписей(ОписаниеПолучаемыхЗаписей, НаборНачисления)	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("РегистраторНабора", ОписаниеПолучаемыхЗаписей.РегистраторНабора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияФактическийПериодДействия.Регистратор КАК Регистратор,
	|	НачисленияФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ПериодДействияКонец
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &РегистраторНабора) КАК НачисленияФактическийПериодДействия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияФактическийПериодДействия.Регистратор,
	|	НачисленияФактическийПериодДействия.НомерСтроки,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			(Регистратор, НомерСтроки) В
	|				(ВЫБРАТЬ
	|					КлючиПолучаемыхЗаписей.регистратор,
	|					КлючиПолучаемыхЗаписей.НомерСтроки
	|				ИЗ
	|					ВТКлючиДополниельныхЗаписейФПД КАК КлючиПолучаемыхЗаписей)) КАК НачисленияФактическийПериодДействия";
	
	Если ОписаниеПолучаемыхЗаписей.ПолучатьФПДЗаписейТекущегоНабора 
		И ОписаниеПолучаемыхЗаписей.ПолучатьФПДДополнительныхЗаписей Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКлючиДополниельныхЗаписейФПД", ОписаниеПолучаемыхЗаписей.ИмяВТКлючиДополниельныхЗаписейФПД);
		ФПД = Запрос.Выполнить().Выгрузить();
	ИначеЕсли ОписаниеПолучаемыхЗаписей.ПолучатьФПДЗаписейТекущегоНабора Тогда
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(Запрос.Текст);
		Схема.ПакетЗапросов[0].Операторы.Удалить(1);
		
		Запрос.Текст = Схема.ПолучитьТекстЗапроса();
		
		ФПД = Запрос.Выполнить().Выгрузить();	
	ИначеЕсли ОписаниеПолучаемыхЗаписей.ПолучатьФПДДополнительныхЗаписей Тогда
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(Запрос.Текст);
		Схема.ПакетЗапросов[0].Операторы.Удалить(0);
		
		Запрос.Текст = Схема.ПолучитьТекстЗапроса();
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКлючиДополниельныхЗаписейФПД", ОписаниеПолучаемыхЗаписей.ИмяВТКлючиДополниельныхЗаписейФПД);
		
		ФПД = Запрос.Выполнить().Выгрузить();
		ФПДТекущегоНабора = НаборНачисления.Скопировать(, "Регистратор, НомерСтроки, ПериодДействияНачало, ПериодДействияКонец");
		ФПДТекущегоНабора.ЗаполнитьЗначения(ОписаниеПолучаемыхЗаписей.РегистраторНабора, "Регистратор");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФПДТекущегоНабора, ФПД);
	Иначе	
		ФПД = НаборНачисления.Скопировать(, "Регистратор, НомерСтроки, ПериодДействияНачало, ПериодДействияКонец");	
		ФПД.ЗаполнитьЗначения(ОписаниеПолучаемыхЗаписей.РегистраторНабора, "Регистратор");
	КонецЕсли;	
	
	Возврат ФПД;
КонецФункции	

Процедура ЗаписатьНаборНачисления(НаборЗаписей, ОчищатьНаборИсключаемогоРегистратора)
	Если РегистрыРасчета.Начисления.ЕстьДвиженияПоРегистратору(ИсключаемыйРегистратор) И ОчищатьНаборИсключаемогоРегистратора Тогда
		НаборИсключаемогоРегистратора = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		НаборИсключаемогоРегистратора.Отбор.Регистратор.Установить(ИсключаемыйРегистратор);
		НаборИсключаемогоРегистратора.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей", Истина);
		НаборИсключаемогоРегистратора.Записать();
	КонецЕсли;	
	
	НаборЗаписей.Записать();
КонецПроцедуры	

Функция ВНабореЕстьВзаимоВытесняемыеНачисления(НаборЗаписей)
	ПроверяемыеСтрокиНачислений = НаборЗаписей.Выгрузить(, "Сотрудник, ПериодДействия, ВидРасчета, ПериодДействияНачало, ПериодДействияКонец");
	ПроверяемыеСтрокиНачислений.Свернуть("Сотрудник, ПериодДействия, ВидРасчета, ПериодДействияНачало, ПериодДействияКонец");
	ПроверяемыеСтрокиНачислений.Сортировать("Сотрудник, ПериодДействия, ВидРасчета, ПериодДействияНачало, ПериодДействияКонец", Новый СравнениеЗначений);
	
	ОтборНачислений = ПроверяемыеСтрокиНачислений.ВыгрузитьКолонку("ВидРасчета");
	ОтборНачислений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборНачислений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборНачислений", ОтборНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗависимостиНачисленийПоФПД.Начисление КАК Начисление,
	|	ЗависимостиНачисленийПоФПД.ЗависимоеНачисление КАК ЗависимоеНачисление,
	|	ЗависимостиНачисленийПоФПД.Вытесняет КАК Вытесняет,
	|	ЗависимостиНачисленийПоФПД.Вытесняется КАК Вытесняется
	|ИЗ
	|	РегистрСведений.ЗависимостиНачисленийПоФПД КАК ЗависимостиНачисленийПоФПД
	|ГДЕ
	|	ЗависимостиНачисленийПоФПД.Начисление В(&ОтборНачислений)
	|	И (ЗависимостиНачисленийПоФПД.Вытесняется
	|			ИЛИ ЗависимостиНачисленийПоФПД.Вытесняет)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЗависимотсиНачислений = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ЗависимотсиТекущегоНачисления = ЗависимотсиНачислений[Выборка.Начисление];
		Если ЗависимотсиТекущегоНачисления = Неопределено Тогда
			ЗависимотсиТекущегоНачисления = Новый Соответствие;
			ЗависимотсиНачислений.Вставить(Выборка.Начисление, ЗависимотсиТекущегоНачисления); 
		КонецЕсли;	
		ЗависимотсиТекущегоНачисления.Вставить(Выборка.ЗависимоеНачисление, Истина);
	КонецЦикла;	
	
	ПредыдущаяяСтрока = Неопределено;
	
	Для Каждого СтрокаНабора Из ПроверяемыеСтрокиНачислений Цикл
		Если ПредыдущаяяСтрока = Неопределено
			Или ПредыдущаяяСтрока.Сотрудник <> СтрокаНабора.Сотрудник
			Или ПредыдущаяяСтрока.ПериодДействия <> СтрокаНабора.ПериодДействия Тогда
			
			ДругиеНачисленияНабора = Новый Соответствие;
		КонецЕсли;	
		
		Если НачислениеЗависиитОтДругихНачисленийНабора(СтрокаНабора, ДругиеНачисленияНабора, ЗависимотсиНачислений) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		СтрокиНачисления = ДругиеНачисленияНабора[СтрокаНабора.ВидРасчета];
		Если СтрокиНачисления = Неопределено Тогда
			СтрокиНачисления = Новый Массив;
			ДругиеНачисленияНабора.Вставить(СтрокаНабора.ВидРасчета, СтрокиНачисления);
		КонецЕсли;	
		СтрокиНачисления.Добавить(СтрокаНабора);
		
		ПредыдущаяяСтрока = СтрокаНабора;
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

Функция НачислениеЗависиитОтДругихНачисленийНабора(СтрокаНабора, ДругиеНачисленияНабора, ЗависимотсиНачислений)
	ЗависимотсиТекущегоНачисления = ЗависимотсиНачислений[СтрокаНабора.ВидРасчета];
	Если ЗависимотсиТекущегоНачисления <> Неопределено Тогда
		Для Каждого ЗарегистрированныеРанееНачисления Из ДругиеНачисленияНабора Цикл
			Если ЗависимотсиТекущегоНачисления[ЗарегистрированныеРанееНачисления.Ключ] <> Неопределено Тогда
				Для Каждого ПредыдущаяСтрокаНачисленийНабора Из ДругиеНачисленияНабора[ЗарегистрированныеРанееНачисления.Ключ] Цикл
					Если ДатаМежду(СтрокаНабора.ПериодДействияНачало, ПредыдущаяСтрокаНачисленийНабора.ПериодДействияНачало, ПредыдущаяСтрокаНачисленийНабора.ПериодДействияКонец)
						Или ДатаМежду(ПредыдущаяСтрокаНачисленийНабора.ПериодДействияНачало, СтрокаНабора.ПериодДействияНачало, СтрокаНабора.ПериодДействияКонец) Тогда
						
						Возврат Истина;
					КонецЕсли;							
				КонецЦикла;		
			КонецЕсли;					
		КонецЦикла;	
	КонецЕсли;	

	Возврат Ложь;	
КонецФункции	

Функция ОписаниеПолучаемыхЗаписейФПДПоОбъектуНабораЗаписей(НаборЗаписейНачисления)
	ОписаниеПолучаемыхЗаписейФПД = НовыйОписаниеПолучаемыхЗаписейФПД();

	РегистраторНабора = НаборЗаписейНачисления.Отбор.Регистратор.Значение;
	ОписаниеПолучаемыхЗаписейФПД.РегистраторНабора = РегистраторНабора; 
		
	Таблицафильтр = НаборЗаписейНачисления.Выгрузить(, "ВидРасчета, Сотрудник, ПериодДействия, ПериодДействияНачало, ПериодДействияКонец");
	Таблицафильтр.Свернуть("ВидРасчета, Сотрудник, ПериодДействия, ПериодДействияНачало, ПериодДействияКонец");
	
	Запрос = НовыйЗапрос();
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, Таблицафильтр, "ВТНачисленияТекущегоНабора");
	
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("РегистраторНабора", РегистраторНабора);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗависимостиНачислени.Вытесняется
	|			ТОГДА НачисленияРегистр.Регистратор
	|		ИНАЧЕ &РегистраторНабора
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ЗависимостиНачислени.Вытесняется
	|			ТОГДА НачисленияРегистр.НомерСтроки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерСтроки
	|ИЗ
	|	ВТНачисленияТекущегоНабора КАК НачисленияВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК НачисленияРегистр
	|		ПО (НачисленияРегистр.Сотрудник = НачисленияВТ.Сотрудник)
	|			И (НачисленияРегистр.ПериодДействия = НачисленияВТ.ПериодДействия)
	|			И (НачисленияРегистр.Регистратор <> &ИсключаемыйРегистратор)
	|			И (НачисленияРегистр.Регистратор <> &РегистраторНабора)
	|			И (НачисленияРегистр.ПериодДействияНачало МЕЖДУ НачисленияВТ.ПериодДействияНачало И НачисленияВТ.ПериодДействияКонец
	|				ИЛИ НачисленияВТ.ПериодДействияНачало МЕЖДУ НачисленияРегистр.ПериодДействияНачало И НачисленияРегистр.ПериодДействияКонец)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗависимостиНачисленийПоФПД КАК ЗависимостиНачислени
	|		ПО НачисленияВТ.ВидРасчета = ЗависимостиНачислени.Начисление
	|			И (НачисленияРегистр.ВидРасчета = ЗависимостиНачислени.ЗависимоеНачисление)
	|			И (ЗависимостиНачислени.Вытесняется
	|				ИЛИ ЗависимостиНачислени.Вытесняет)";
	
	КлючиЗаписей = Запрос.Выполнить().Выгрузить();
	КлючиЗаписей.Свернуть("Регистратор, НомерСтроки");
	
	СтрокаКлючаПоТекущемуРегистратору = КлючиЗаписей.Найти(РегистраторНабора, "Регистратор");
	Если СтрокаКлючаПоТекущемуРегистратору <> Неопределено Тогда
		ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДЗаписейТекущегоНабора = Истина;
		КлючиЗаписей.Удалить(СтрокаКлючаПоТекущемуРегистратору);
	Иначе
		ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДЗаписейТекущегоНабора = Ложь;	
	КонецЕсли;	

	Если КлючиЗаписей.Количество() = 0 Тогда
		ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДДополнительныхЗаписей = Ложь;
	Иначе
		ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДДополнительныхЗаписей  = Истина;	
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, КлючиЗаписей, "ВТКлючиДополниельныхЗаписейФПД");
		ОписаниеПолучаемыхЗаписейФПД.ИмяВТКлючиДополниельныхЗаписейФПД = "ВТКлючиДополниельныхЗаписейФПД";
	КонецЕсли;	
		
	УничтожитьВТ("ВТНачисленияТекущегоНабора");
		
	Возврат ОписаниеПолучаемыхЗаписейФПД;
КонецФункции	

Функция ОписаниеПолучаемыхЗаписейФПДПоЗаписанномуНабору(РегистраторНабора)
	ОписаниеПолучаемыхЗаписейФПД = НовыйОписаниеПолучаемыхЗаписейФПД();
 
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("РегистраторНабора", НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТДанныеРегистраНачисления
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &РегистраторНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияРегистр.Регистратор КАК Регистратор,
	|	НачисленияРегистр.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТКлючиДополниельныхЗаписейФПД
	|ИЗ
	|	ВТДанныеРегистраНачисления КАК НачисленияВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК НачисленияРегистр
	|		ПО (НачисленияРегистр.Сотрудник = НачисленияВТ.Сотрудник)
	|			И (НачисленияРегистр.ПериодДействия = НачисленияВТ.ПериодДействия)
	|			И (НачисленияРегистр.Регистратор <> &ИсключаемыйРегистратор)
	|			И (НачисленияРегистр.Регистратор <> &РегистраторНабора)
	|			И (НачисленияРегистр.ПериодДействияНачало МЕЖДУ НачисленияВТ.ПериодДействияНачало И НачисленияВТ.ПериодДействияКонец
	|				ИЛИ НачисленияВТ.ПериодДействияНачало МЕЖДУ НачисленияРегистр.ПериодДействияНачало И НачисленияРегистр.ПериодДействияКонец)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗависимостиНачисленийПоФПД КАК ЗависисмостиНачислений
	|		ПО НачисленияВТ.ВидРасчета = ЗависисмостиНачислений.Начисление
	|			И (НачисленияРегистр.ВидРасчета = ЗависисмостиНачислений.ЗависимоеНачисление)
	|			И (ЗависисмостиНачислений.Вытесняется)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1";
	
	Результат = Запрос.Выполнить();
	
	ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДЗаписейТекущегоНабора = Истина;
	ОписаниеПолучаемыхЗаписейФПД.РегистраторНабора = РегистраторНабора;
	ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДДополнительныхЗаписей = Не Результат.Пустой();
	
	Если ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДДополнительныхЗаписей Тогда
		ОписаниеПолучаемыхЗаписейФПД.ИмяВТКлючиДополниельныхЗаписейФПД = "ВТКлючиДополниельныхЗаписейФПД";
	Иначе
		УничтожитьВТ("ВТКлючиДополниельныхЗаписейФПД");
	КонецЕсли;	
	
	УничтожитьВТ("ВТДанныеРегистраНачисления");
	
	Возврат ОписаниеПолучаемыхЗаписейФПД;
КонецФункции	

Функция НовыйОписаниеПолучаемыхЗаписейФПД()
	ОписаниеПолучаемыхЗаписейФПД =  Новый Структура("ПолучатьФПДЗаписейТекущегоНабора, ПолучатьФПДДополнительныхЗаписей, РегистраторНабора, ИмяВТКлючиДополниельныхЗаписейФПД");
	ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДЗаписейТекущегоНабора = Ложь;
	ОписаниеПолучаемыхЗаписейФПД.ПолучатьФПДДополнительныхЗаписей = Ложь;
	
	Возврат ОписаниеПолучаемыхЗаписейФПД;
КонецФункции	

#КонецОбласти

#Область ПолучениеНабораЗаписейУдержаний

Функция ДанныеТекущегоНабораУдержания()
	Если КэшДанныеТекущегоНабораУдержания <> Неопределено Тогда
		Возврат КэшДанныеТекущегоНабораУдержания;
	КонецЕсли;
	
	ЗаполнитьИдентификаторСтроки(Удержания);
	
	МесяцНачисления = МесяцыРасчета[МесяцыРасчета.ВГраница()];

	УстановитьПривилегированныйРежим(Истина);
	РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Удержания);
		
	КэшДанныеТекущегоНабораУдержания = Новый Структура("ТаблицаНабора");	
	КэшДанныеТекущегоНабораУдержания.ТаблицаНабора = НаборыЗаписей.Удержания.Выгрузить();
	
	СтрокиПоИдентфикаторам = СтрокиУдержанийПоИдентификаторам(Удержания);
	
	ЗаполнитьСтрокиРасчетаВтаблицеУдержания(КэшДанныеТекущегоНабораУдержания.ТаблицаНабора, СтрокиПоИдентфикаторам);
	
	ПронумероватьСтрокиТаблицыДанныхНабора(КэшДанныеТекущегоНабораУдержания.ТаблицаНабора);
	
	Возврат КэшДанныеТекущегоНабораУдержания;               
КонецФункции

#КонецОбласти

#Область СведенияОНачисленияхИПоказателя

Функция ТребованияНачисленийТаблица()
	Если КэшТребованияНачислений <> Неопределено Тогда
		Возврат КэшТребованияНачислений;
	КонецЕсли;	
	
	НачисленияОтбор = Начисления.ВыгрузитьКолонку("Начисление");
	НачисленияОтбор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НачисленияОтбор);
	
	КэшТребованияНачислений = ПланыВидовРасчета.Начисления.ТребованияНачисленийТаблица(НачисленияОтбор);
		
	Возврат КэшТребованияНачислений;
КонецФункции

Функция НачисленияДобавляемыеПоВидамВремени(ВидыВремени)
	Запрос = Новый Запрос;
	СпособыВыполнения = Новый Массив;
	СпособыВыполнения.Добавить(Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете);
	СпособыВыполнения.Добавить(Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете);
	
	Запрос.УстановитьПараметр("ВидыВремени", ВидыВремени);
	Запрос.УстановитьПараметр("СпособыВыполненияНачисления", СпособыВыполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияВидыВремени.Ссылка КАК Начисление,
	|	НачисленияВидыВремени.ВидВремени КАК ВидВремени,
	|	НачисленияВидыВремени.ОпределяющийЗаПраздничныеДни КАК ОпределяющийЗаПраздничныеДни
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВидыВремени КАК НачисленияВидыВремени
	|ГДЕ
	|	НачисленияВидыВремени.ВидВремени В(&ВидыВремени)
	|	И НачисленияВидыВремени.ОпределяющийВидВремени
	|	И НЕ НачисленияВидыВремени.Ссылка.ВАрхиве
	|	И НачисленияВидыВремени.Ссылка.СпособВыполненияНачисления В(&СпособыВыполненияНачисления)";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция НачисленияДобавляемыеПоПоказателям(ОтборПоказателей)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоказателей", ОтборПоказателей);
	Запрос.УстановитьПараметр("СпособВыполненияНачисления", Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияПоказатели.Ссылка КАК Начисление,
	|	НачисленияПоказатели.Показатель КАК Показатель
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|ГДЕ
	|	НачисленияПоказатели.Показатель В(&ОтборПоказателей)
	|	И НЕ НачисленияПоказатели.Ссылка.ВАрхиве
	|	И НачисленияПоказатели.ОпределяющийПоказатель
	|	И НачисленияПоказатели.Ссылка.СпособВыполненияНачисления = &СпособВыполненияНачисления";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ВытесняющиеНачисления(НачисленияОтбор)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачисленияОтбор", НачисленияОтбор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&НачисленияОтбор)
	|	И 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1 КАК Поле1
	|			ИЗ
	|				ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	|			ГДЕ
	|				НачисленияВытесняющиеВидыРасчета.ВидРасчета = Начисления.Ссылка)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Начисление");	
КонецФункции	

Функция СвойстваНачислений(СписокНачислений, СписокСвойств = Неопределено)
	СписокНачислений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокНачислений);
	
	СпособВыполненияВзаданныхМесяцах = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
	
	ПолучаемыеСвойстваШапки = "СпособВыполненияНачисления, КатегорияНачисленияИлиНеоплаченногоВремени, НачисляетсяПриРасчетеПервойПоловиныМесяца, НачисляетсяВЦеломЗаМесяц, ПериодРасчетаБазовыхНачислений, СдвигБазовогоПериода, КоличествоМесяцевБазовогоПериода, ИспользуетСреднийЗаработокОбщий, УчетВремениВДняхЧасах, УчетВремениВЧасах, ИспользоватьОперативныеПоказателиВЦеломЗаМесяц";
	
	СвойстваНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНачислений, ПолучаемыеСвойстваШапки);
		
	СписокНачисленийДляПолученияМесяцевВыполнения = Новый Массив;
	Для Каждого КлючЗначение Из СвойстваНачислений Цикл
		
		КлючЗначение.Значение.Вставить("Разбивать",
			Не КлючЗначение.Значение.НачисляетсяВЦеломЗаМесяц Или КлючЗначение.Значение.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц);
			
		Если КлючЗначение.Значение.СпособВыполненияНачисления = СпособВыполненияВзаданныхМесяцах Тогда
	    	СписокНачисленийДляПолученияМесяцевВыполнения.Добавить(КлючЗначение.Ключ);
			КлючЗначение.Значение.Вставить("МесяцыВыполнения", Новый Соответствие);
		Иначе
			КлючЗначение.Значение.Вставить("МесяцыВыполнения", Неопределено);	
		КонецЕсли;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНачислений", СписокНачисленийДляПолученияМесяцевВыполнения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияМесяцыНачисления.Ссылка КАК Ссылка,
	|	НачисленияМесяцыНачисления.Месяц КАК Месяц
	|ИЗ
	|	ПланВидовРасчета.Начисления.МесяцыНачисления КАК НачисленияМесяцыНачисления
	|ГДЕ
	|	НачисленияМесяцыНачисления.Ссылка В(&СписокНачислений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		СовйстваТекущегоНачисления =  СвойстваНачислений[Выборка.Ссылка];
		Пока Выборка.Следующий() Цикл
			СовйстваТекущегоНачисления.МесяцыВыполнения.Вставить(Выборка.Месяц, Истина);
		КонецЦикла;	
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ПриОпределенииСвойствНачисленийДляРасчета(СвойстваНачислений);
	КонецЕсли;
	
	Возврат СвойстваНачислений;	
КонецФункции	

Функция СвойстваУдержаний(СписокУдержаний)
	
	ПолучаемыеСвойстваШапки = "КатегорияУдержания, УчаствуетВРасчетеПервойПоловиныМесяца";
	СвойстваУдержаний = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокУдержаний, ПолучаемыеСвойстваШапки);
	
	Возврат СвойстваУдержаний;	
КонецФункции

Функция НовыйТребованияНачисленийСводно()
	ТребованияНачислений = Новый Структура;
	ТребованияНачислений.Вставить("ТребуютсяЗначенияПериодическихПоказателейСотрудников", Ложь);
	ТребованияНачислений.Вставить("ТребуютсяЗначенияПериодическихПоказателейОрганизаций", Ложь);
	ТребованияНачислений.Вставить("ТребуютсяЗначенияПериодическихПоказателейПодразделений", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательЧисловойЗависящийОтСтажа", Ложь);
	ТребованияНачислений.Вставить("УчитыватьИзмененияВремяВЧасах", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательПроцентСевернойНадбавки", Ложь);
	ТребованияНачислений.Вставить("УчитыватьУсловийОплатыПособия", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательБазовыйТарифГруппы", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяОбщийГрафик", Ложь);
	ТребованияНачислений.Вставить("ТребуютсяКадровыеДанные", Ложь);
	ТребованияНачислений.Вставить("ТребуютсяВидыЗанятости", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательСтоимостьЧаса", Ложь);
	ТребованияНачислений.Вставить("УчитыватьИзмененияПлановыхНачислений", Ложь);
	ТребованияНачислений.Вставить("ТребуютсяФиксированныеСуммы", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательКалендарныеДни", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательНормаВремени", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательКалендарныеДниБезПраздников", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательКоличествоДнейОтпуска", Ложь);
	ТребованияНачислений.Вставить("ТребуетсяПоказательКоэффициентИндексации", Ложь);    
	ТребованияНачислений.Вставить("ТребуютсяЗначенияОперативныхПоказателейСотрудников", Ложь);     
	ТребованияНачислений.Вставить("ТребуютсяЗначенияОперативныхПоказателейОрганизаций", Ложь);
	ТребованияНачислений.Вставить("ТребуютсяЗначенияОперативныхПоказателейПодразделений", Ложь);
	
	Возврат ТребованияНачислений;
КонецФункции	

Функция ТребованияНачисленийСводно()
	Если КэшТребованияНачисленийСводно <> Неопределено Тогда
		Возврат КэшТребованияНачисленийСводно;
	КонецЕсли;
	
	ТаребованияНачислений = ТребованияНачисленийТаблица();
	
	КэшТребованияНачисленийСводно = НовыйТребованияНачисленийСводно();
	
	ОбрабатываемыеПоля = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(КэшТребованияНачисленийСводно);
	
	Для Каждого ТребованияТекущегоНачисления Из ТаребованияНачислений Цикл
		Для Каждого КлючЗначение Из ОбрабатываемыеПоля Цикл
			Если ТребованияТекущегоНачисления.Значение[КлючЗначение.Ключ] Тогда
				КэшТребованияНачисленийСводно[КлючЗначение.Ключ] = Истина;
				ОбрабатываемыеПоля.Удалить(КлючЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат КэшТребованияНачисленийСводно;
КонецФункции	

Функция ПоказателиНачислений()
	Если КэшПоказателиНачислений <> Неопределено Тогда
		Возврат КэшПоказателиНачислений;
	КонецЕсли;	
	
	КэшПоказателиНачислений = Новый Соответствие;
	
	ОтборНачислений = Начисления.ВыгрузитьКолонку("Начисление");
	ОтборНачислений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборНачислений);
	
	КэшПоказателиНачислений = ПланыВидовРасчета.Начисления.ПоказателиНачислений(ОтборНачислений);
		                                                              
	Возврат КэшПоказателиНачислений;
КонецФункции

Функция ОписаниеСтажевыхПоказателейНачислений()
	Если КэшОписаниеСтажевыхПоказателейНачислений <> Неопределено Тогда
		Возврат КэшОписаниеСтажевыхПоказателейНачислений;
	КонецЕсли;
	
	КэшОписаниеСтажевыхПоказателейНачислений = Новый Соответствие;
	
	ПоказателиНачислений = ПоказателиНачислений();
	
	ПоказателиОтбор = Новый Массив;
	Для Каждого ПоказателиТекущегоНачисления Из ПоказателиНачислений Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоказателиОтбор, ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиТекущегоНачисления.Значение, "Показатель"), Истина);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоказателиОтбор", ПоказателиОтбор);
	Запрос.УстановитьПараметр("ТипПоказателя", Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка КАК Ссылка,
	|	ПоказателиРасчетаЗарплаты.ВидСтажа КАК ВидСтажа,
	|	ЕСТЬNULL(ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа, 0) КАК ВерхняяГраницаИнтервалаСтажа,
	|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
	|		ПО (ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка = ПоказателиРасчетаЗарплаты.Ссылка)
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.Ссылка В(&ПоказателиОтбор)
	|	И ПоказателиРасчетаЗарплаты.ТипПоказателя = &ТипПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШкалаОценкиШаблон = Новый ТаблицаЗначений;
	ШкалаОценкиШаблон.Колонки.Добавить("НачалоДиапазона", Новый ОписаниеТипов("Число"));
	ШкалаОценкиШаблон.Колонки.Добавить("КонецДиапазона", Новый ОписаниеТипов("Число"));
	ШкалаОценкиШаблон.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		СведенияОПоказателе = Новый Структура("ВидСтажа, ШкалаОценки");
		СведенияОПоказателе.ВидСтажа = Выборка.ВидСтажа;
		СведенияОПоказателе.ШкалаОценки = ШкалаОценкиШаблон.СкопироватьКолонки();
		КэшОписаниеСтажевыхПоказателейНачислений.Вставить(Выборка.Ссылка, СведенияОПоказателе);
		
		ПредыдущаяСтрокаШакалы = Неопределено;
		Пока Выборка.Следующий() Цикл
			СтрокаШкалы = СведенияОПоказателе.ШкалаОценки.Добавить();
			СтрокаШкалы.КонецДиапазона = ?(Выборка.ВерхняяГраницаИнтервалаСтажа = 0, 1000000, Выборка.ВерхняяГраницаИнтервалаСтажа - 1);
			СтрокаШкалы.Значение = Выборка.ЗначениеПоказателя;
			Если ПредыдущаяСтрокаШакалы <> Неопределено Тогда
				СтрокаШкалы.НачалоДиапазона = ПредыдущаяСтрокаШакалы.КонецДиапазона;	
			КонецЕсли;	
			
			ПредыдущаяСтрокаШакалы = СтрокаШкалы;	
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат КэшОписаниеСтажевыхПоказателейНачислений;
КонецФункции	

Функция ИспользуемыеПоказателиСотрудников()
	Если КэшИспользуемыеПоказателиСотрудников <> Неопределено Тогда
		Возврат КэшИспользуемыеПоказателиСотрудников;
	КонецЕсли;	
	
	КэшИспользуемыеПоказателиСотрудников = Новый Соответствие;
	
	ПоказателиНачислений = ПоказателиНачислений();
	
	Для Каждого СтрокаНачислений Из Начисления Цикл
		ПоказателиТекущегоНачисления = ПоказателиНачислений[СтрокаНачислений.Начисление];
		Если ПоказателиТекущегоНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказателиСотрудника = КэшИспользуемыеПоказателиСотрудников[СтрокаНачислений.Сотрудник];
		Если ПоказателиСотрудника = Неопределено Тогда
			ПоказателиСотрудника = Новый Соответствие;
			КэшИспользуемыеПоказателиСотрудников.Вставить(СтрокаНачислений.Сотрудник, ПоказателиСотрудника);
		КонецЕсли;
		
		Для Каждого ТекущийПоказатель Из ПоказателиТекущегоНачисления Цикл
			ПоказателиСотрудника.Вставить(ТекущийПоказатель.Показатель, Истина);
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат КэшИспользуемыеПоказателиСотрудников;
КонецФункции	

#КонецОбласти

#Область СведенияОбУдержанияхИПоказателях

Функция УдержанияДобавляемыеПоПоказателям(ОтборПоказателей)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоказателей", ОтборПоказателей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдержанияПоказатели.Ссылка КАК Удержание,
	|	УдержанияПоказатели.Показатель КАК Показатель
	|ИЗ
	|	ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
	|ГДЕ
	|	УдержанияПоказатели.Показатель В(&ОтборПоказателей)
	|	И НЕ УдержанияПоказатели.Ссылка.ВАрхиве
	|	И УдержанияПоказатели.ОпределяющийПоказатель";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ТребованияУдержанийТаблица()
	Если КэшТребованияУдержаний <> Неопределено Тогда
		Возврат КэшТребованияУдержаний;
	КонецЕсли;	
	
	Если Удержания = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	КэшТребованияУдержаний  = Новый Соответствие;
	
	ОтборУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "Удержание", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборУдержаний", ОтборУдержаний);
	Запрос.УстановитьПараметр("КатегорииУдержанийВлияющихНаНДФЛ", ПланыВидовРасчета.Удержания.КатегорииУдержанийВлияющихНаНДФЛ());
	Запрос.УстановитьПараметр("РасчетнаяБазаСтраховыеВзносы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы"));
	Запрос.УстановитьПараметр("РасчетнаяБазаИсполнительногоЛиста", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста"));
	Запрос.УстановитьПараметр("РасчетнаяБаза", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза"));
	Запрос.УстановитьПараметр("КалендарныеДни", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	Запрос.УстановитьПараметр("КалендарныеДниМесяца", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРасчета.Ссылка КАК Удержание,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.ПериодическийПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.ПериодическийПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.ПериодическийПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.РазовыйПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.РазовыйПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.РазовыйПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.ОперативныйПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.ОперативныйПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель.ОперативныйПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель = &РасчетнаяБазаСтраховыеВзносы, ЛОЖЬ)) КАК ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель = &РасчетнаяБазаИсполнительногоЛиста, ЛОЖЬ)) КАК ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель = &РасчетнаяБаза, ЛОЖЬ)) КАК ТребуетсяПоказательРасчетнаяБаза,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель = &КалендарныеДни, ЛОЖЬ)) КАК ТребуетсяПоказательКалендарныеДни,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиУдержаний.Показатель = &КалендарныеДниМесяца, ЛОЖЬ)) КАК ТребуетсяПоказательКалендарныеДниМесяца,
		|	МАКСИМУМ(ВидыРасчета.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)) КАК ТребуютсяРабочиеМеста,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ПоказателиУдержаний.Показатель.ПериодическийПоказательПодразделения, ЛОЖЬ)
		|					ИЛИ ЕСТЬNULL(ПоказателиУдержаний.Показатель.ПериодическийПоказательОрганизации, ЛОЖЬ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуетсяСотрудникДляРазбиенияСтрокУдержаний,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ПоказателиУдержаний.Показатель.ПериодическийПоказательПодразделения, ЛОЖЬ)
		|					ИЛИ ЕСТЬNULL(ПоказателиУдержаний.Показатель.ПериодическийПоказательОрганизации, ЛОЖЬ)
		|					ИЛИ ЕСТЬNULL(ПоказателиУдержаний.Показатель.РазовыйПоказательПодразделения, ЛОЖЬ)
		|					ИЛИ ЕСТЬNULL(ПоказателиУдержаний.Показатель.РазовыйПоказательОрганизации, ЛОЖЬ)
		|					ИЛИ ЕСТЬNULL(ПоказателиУдержаний.Показатель.ОперативныйПоказательПодразделения, ЛОЖЬ)
		|					ИЛИ ЕСТЬNULL(ПоказателиУдержаний.Показатель.ОперативныйПоказательОрганизации, ЛОЖЬ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВидыРасчета.Рассчитывается = ЛОЖЬ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуютсяФиксированныеСуммы,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВидыРасчета.КатегорияУдержания В (&КатегорииУдержанийВлияющихНаНДФЛ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуетсяРегистрацияСоциальныхВычетовНДФЛ,
		|	НЕ ВидыРасчета.УдерживаетсяВЦеломЗаМесяц КАК Разбивать,
		|	ВидыРасчета.КатегорияУдержания КАК КатегорияУдержания,
		|	ВидыРасчета.УдерживаетсяВЦеломЗаМесяц КАК УдерживаетсяВЦеломЗаМесяц,
		|	ВидыРасчета.ОчередностьРасчета КАК ОчередностьРасчета
		|ИЗ
		|	ПланВидовРасчета.Удержания КАК ВидыРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.Ссылка = ВидыРасчета.Ссылка)
		|ГДЕ
		|	ВидыРасчета.Ссылка В(&ОтборУдержаний)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыРасчета.Ссылка,
		|	НЕ ВидыРасчета.УдерживаетсяВЦеломЗаМесяц,
		|	ВидыРасчета.КатегорияУдержания,
		|	ВидыРасчета.УдерживаетсяВЦеломЗаМесяц,
		|	ВидыРасчета.ОчередностьРасчета";
	
	РезультаЗапроса = Запрос.Выполнить();
	ПоляСтруктуры = Новый Массив;
	Для Каждого Колонка Из РезультаЗапроса.Колонки Цикл
		Если Колонка.Имя <> "ВидРасчета" Тогда
			ПоляСтруктуры.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ПоляСтруктурыСтрокой = СтрСоединить(ПоляСтруктуры, ",");
	
	Выборка = РезультаЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТребованияТекущегоУдержания = Новый Структура(ПоляСтруктурыСтрокой);
		ЗаполнитьЗначенияСвойств(ТребованияТекущегоУдержания, Выборка);
		КэшТребованияУдержаний.Вставить(Выборка.Удержание, ТребованияТекущегоУдержания);
	КонецЦикла;	
	
	Возврат КэшТребованияУдержаний;
КонецФункции

Функция ПоказателиУдержаний()
	Если КэшПоказателиУдержаний <> Неопределено Тогда
		Возврат КэшПоказателиУдержаний;
	КонецЕсли;	
	
	КэшПоказателиУдержаний = Новый Соответствие;
	
	ОтборУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "Удержание", Истина);
		
	ПоляСвойствПоказателя = "Показатель, ЗапрашиватьПриВводе, ОперативныйПоказательСотрудника,
	|ОперативныйПоказательОрганизации, ОперативныйПоказательПодразделения, ИдентификаторПоказателя,
	|ОтображатьВДокументахНачисления, ОпределяющийПоказатель, Предопределенный,
	|ПериодическийПоказательСотрудника, ПериодическийПоказательОрганизации, ПериодическийПоказательПодразделения,
	|РазовыйПоказательСотрудника, РазовыйПоказательПодразделения, РазовыйПоказательОрганизации";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборУдержаний", ОтборУдержаний);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияУдержаний.Ссылка КАК Ссылка,
	|	НачисленияУдержаний.Показатель КАК Показатель,
	|	НачисленияУдержаний.ЗапрашиватьПриВводе КАК ЗапрашиватьПриВводе,
	|	НачисленияУдержаний.Показатель.ОперативныйПоказательСотрудника КАК ОперативныйПоказательСотрудника,
	|	НачисленияУдержаний.Показатель.ОперативныйПоказательОрганизации КАК ОперативныйПоказательОрганизации,
	|	НачисленияУдержаний.Показатель.ОперативныйПоказательПодразделения КАК ОперативныйПоказательПодразделения,
	|	НачисленияУдержаний.Показатель.Идентификатор КАК ИдентификаторПоказателя,
	|	НачисленияУдержаний.Показатель.ОтображатьВДокументахНачисления КАК ОтображатьВДокументахНачисления,
	|	НачисленияУдержаний.ОпределяющийПоказатель КАК ОпределяющийПоказатель,
	|	НачисленияУдержаний.Ссылка.Предопределенный КАК Предопределенный,
	|	НачисленияУдержаний.Показатель.ПериодическийПоказательСотрудника КАК ПериодическийПоказательСотрудника,
	|	НачисленияУдержаний.Показатель.ПериодическийПоказательОрганизации КАК ПериодическийПоказательОрганизации,
	|	НачисленияУдержаний.Показатель.ПериодическийПоказательПодразделения КАК ПериодическийПоказательПодразделения,
	|	НачисленияУдержаний.Показатель.РазовыйПоказательСотрудника КАК РазовыйПоказательСотрудника,
	|	НачисленияУдержаний.Показатель.РазовыйПоказательОрганизации КАК РазовыйПоказательОрганизации,
	|	НачисленияУдержаний.Показатель.РазовыйПоказательПодразделения КАК РазовыйПоказательПодразделения
	|ИЗ
	|	ПланВидовРасчета.Удержания.Показатели КАК НачисленияУдержаний
	|ГДЕ
	|	НачисленияУдержаний.Ссылка В(&ОтборУдержаний)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Показатели = Новый Массив;
		КэшПоказателиУдержаний.Вставить(Выборка.Ссылка, Показатели);
		Пока Выборка.Следующий() Цикл
			СвойстваПоказателя = Новый Структура(ПоляСвойствПоказателя);
			ЗаполнитьЗначенияСвойств(СвойстваПоказателя, Выборка);
			Показатели.Добавить(СвойстваПоказателя);
		КонецЦикла;
	КонецЦикла;
	
	Возврат КэшПоказателиУдержаний;

КонецФункции

Функция ТребованияУдержанийСводно()
	Если КэшТребованияУдержанийСводно <> Неопределено Тогда
		Возврат КэшТребованияУдержанийСводно;
	КонецЕсли;
	
	ТаребованияУдержаний = ТребованияУдержанийТаблица();
	
	КэшТребованияУдержанийСводно = НовыйТребованияУдержанийСводно();
	
	Если ТаребованияУдержаний = Неопределено Тогда
		Возврат КэшТребованияУдержанийСводно;
	КонецЕсли;	
	
	ОбрабатываемыеПоля = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(КэшТребованияУдержанийСводно);
	
	Для Каждого ТребованияТекущегоУдержания Из ТаребованияУдержаний Цикл
		Для Каждого КлючЗначение Из ОбрабатываемыеПоля Цикл
			Если ТребованияТекущегоУдержания.Значение[КлючЗначение.Ключ] Тогда
				КэшТребованияУдержанийСводно[КлючЗначение.Ключ] = Истина;
				ОбрабатываемыеПоля.Удалить(КлючЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат КэшТребованияУдержанийСводно;
КонецФункции	

Функция НовыйТребованияУдержанийСводно()
	ТребованияУдержаний = Новый Структура;
	ТребованияУдержаний.Вставить("ТребуютсяРабочиеМеста", Ложь);
	ТребованияУдержаний.Вставить("ТребуетсяСотрудникДляЗаполненияЗначенийПоказателей", Ложь);
	ТребованияУдержаний.Вставить("ТребуютсяЗначенияПериодическихПоказателейСотрудников", Ложь);
	ТребованияУдержаний.Вставить("ТребуютсяЗначенияПериодическихПоказателейОрганизаций", Ложь);
	ТребованияУдержаний.Вставить("ТребуютсяЗначенияПериодическихПоказателейПодразделений", Ложь);
	ТребованияУдержаний.Вставить("ТребуютсяФиксированныеСуммы", Ложь);
	ТребованияУдержаний.Вставить("ТребуетсяПоказательРасчетнаяБазаСтраховыеВзносы", Ложь);
	ТребованияУдержаний.Вставить("ТребуетсяПоказательРасчетнаяБаза", Ложь);
	ТребованияУдержаний.Вставить("ТребуетсяПоказательРасчетнаяБазаИсполнительногоЛиста", Ложь);
	ТребованияУдержаний.Вставить("ТребуетсяРегистрацияСоциальныхВычетовНДФЛ", Ложь);
	
	Возврат ТребованияУдержаний;
КонецФункции	

#КонецОбласти

#Область НовыеСервисныеМетоды

Функция ФильтрПолученияПериодическихДанныхСотрудниковАктуален(ТаблицаНачислений)
	Если ТаблицаПолученияПериодическихДанныхСотрудников = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник, Месяц");
	СтруктураПоиска = Новый Структура("Сотрудник, Месяц");
	
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		СтруктураПоиска.Сотрудник = СтрокаНачислений.Сотрудник;
		СтруктураПоиска.Месяц = НачалоМесяца(СтрокаНачислений.ДатаНачала);
		
		СтрокиФильтра = ТаблицаПолученияПериодическихДанныхСотрудников.НайтиСтроки(СтруктураПоиска);
		Если СтрокиФильтра.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат Истина;	
КонецФункции

Функция ФильтрПолученияПериодическихДанныхФизическихЛицАктуален(ТаблицаУдержаний)
	Если ТаблицаПолученияПериодическихДанныхФизическихЛиц = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаПолученияПериодическихДанныхФизическихЛиц, "ФизическоеЛицо, ГоловнаяОрганизация, Месяц");
	СтруктураПоиска = Новый Структура("ФизическоеЛицо, ГоловнаяОрганизация, Месяц");
	
	Для Каждого СтрокаУдержаний Из ТаблицаУдержаний Цикл
		СтруктураПоиска.ФизическоеЛицо = СтрокаУдержаний.ФизическоеЛицо;
		СтруктураПоиска.Месяц = НачалоМесяца(СтрокаУдержаний.ДатаНачала);
		СтруктураПоиска.ГоловнаяОрганизация = СтрокаУдержаний.ГоловнаяОрганизация;
		
		СтрокиФильтра = ТаблицаПолученияПериодическихДанныхФизическихЛиц.НайтиСтроки(СтруктураПоиска);
		Если СтрокиФильтра.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если СтрокиФильтра[0].ДатаНачала > СтрокаУдержаний.ДатаНачала
			Или СтрокиФильтра[0].ДатаОкончания < СтрокаУдержаний.ДатаНачала Тогда
				
			Возврат Ложь;
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат Истина;	
КонецФункции

Процедура ПреобразоватьТаблицуДвиженийВТаблицуИнтервалов(ТаблицаДвижения, ТаблицаФильтрПолученияДвижений, ИзмеренияСтрокой, КлючТаблицыФильтра, ДополнятьПервыеСтрокиПериодамиНачалаСреза = Ложь)
	Если ДополнятьПервыеСтрокиПериодамиНачалаСреза Тогда
		ТаблицаДвижения.Колонки.Добавить("ДополнениеПервойСтрокиПериодомСреза", Новый ОписаниеТипов("Булево"));
	КонецЕсли;	
		
	Измерения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияСтрокой, ",", Истина, Истина);
	
	Если ТаблицаДвижения.Колонки.Найти("ДатаНачала") <> Неопределено Тогда  
		ТаблицаДвижения.Колонки.Удалить("ДатаНачала");
	КонецЕсли;
	
	Если ТаблицаДвижения.Колонки.Найти("ДатаОкончания") <> Неопределено Тогда  
		ТаблицаДвижения.Колонки.Удалить("ДатаОкончания");
	КонецЕсли;	
	
	Если ТаблицаДвижения.Колонки.Найти("Месяц") = Неопределено Тогда
		ТаблицаДвижения.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	КонецЕсли;	
	
	ТаблицаДвижения.Колонки.Период.Имя = "ДатаНачала";
	ТаблицаДвижения.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаФильтрПолученияДвижений, КлючТаблицыФильтра + ", Месяц");
	СтруктураПоиска = Новый Структура(КлючТаблицыФильтра + ", Месяц");
	
	ПредыдущаяСтрока = Неопределено;	
	ИндексТекущейСтроки = 0;
	Пока ИндексТекущейСтроки < ТаблицаДвижения.Количество() Цикл
		СтрокаТаблицыДвижений = ТаблицаДвижения[ИндексТекущейСтроки]; 
		СтрокаТаблицыДвижений.Месяц = НачалоМесяца(СтрокаТаблицыДвижений.ДатаНачала);
		СтрокаТаблицыДвижений.ДатаНачала = НачалоДня(СтрокаТаблицыДвижений.ДатаНачала);
		Если ЗначенияИзмеренийСовпадают(СтрокаТаблицыДвижений, ПредыдущаяСтрока, Измерения) Тогда
			Если ПредыдущаяСтрока.ДатаНачала = СтрокаТаблицыДвижений.ДатаНачала Тогда
				ПредыдущаяСтрока.ДатаОкончания = ПредыдущаяСтрока.ДатаНачала;	
			Иначе	
				ПредыдущаяСтрока.ДатаОкончания = НачалоДня(СтрокаТаблицыДвижений.ДатаНачала) - 1;
			КонецЕсли;
		Иначе
			Если ПредыдущаяСтрока <> Неопределено Тогда
				СтруктураПоиска[КлючТаблицыФильтра] = ПредыдущаяСтрока[КлючТаблицыФильтра];
				СтруктураПоиска.Месяц = НачалоМесяца(ПредыдущаяСтрока.ДатаНачала);
				СтрокаТаблицыФильтра = ТаблицаФильтрПолученияДвижений.НайтиСтроки(СтруктураПоиска)[0];
				ПредыдущаяСтрока.ДатаОкончания = СтрокаТаблицыФильтра.ДатаОкончания;
			КонецЕсли;
			
			Если ДополнятьПервыеСтрокиПериодамиНачалаСреза Тогда
				СтруктураПоиска[КлючТаблицыФильтра] = СтрокаТаблицыДвижений[КлючТаблицыФильтра];
				СтруктураПоиска.Месяц = НачалоМесяца(СтрокаТаблицыДвижений.ДатаНачала);
				СтрокаТаблицыФильтра = ТаблицаФильтрПолученияДвижений.НайтиСтроки(СтруктураПоиска)[0];
				
				СтрокаДополнения = ВставитьСтрокуВТаблицу(ТаблицаДвижения, ИндексТекущейСтроки, СтрокаТаблицыДвижений);	
				СтрокаДополнения.ДатаНачала = СтрокаТаблицыФильтра.ДатаНачала;
				СтрокаДополнения.ДатаОкончания = НачалоДня(СтрокаТаблицыДвижений.ДатаНачала) - 1;
				СтрокаДополнения.ДополнениеПервойСтрокиПериодомСреза = Истина;
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			КонецЕсли;
		КонецЕсли;
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		ПредыдущаяСтрока = СтрокаТаблицыДвижений;	
	КонецЦикла;	
		
	Если ПредыдущаяСтрока <> Неопределено Тогда
		СтруктураПоиска[КлючТаблицыФильтра] = ПредыдущаяСтрока[КлючТаблицыФильтра];
		СтруктураПоиска.Месяц = НачалоМесяца(ПредыдущаяСтрока.ДатаНачала);
		СтрокаТаблицыФильтра = ТаблицаФильтрПолученияДвижений.НайтиСтроки(СтруктураПоиска)[0];
		ПредыдущаяСтрока.ДатаОкончания = СтрокаТаблицыФильтра.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры	

Функция ЗначенияИзмеренийСовпадают(ТекущаяСтрока, ПредыдущаяСтрока, Измерения)
	
	Если ПредыдущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПервоеИзмерениеСовпадает = ТекущаяСтрока[Измерения[0]] = ПредыдущаяСтрока[Измерения[0]];
	
	Если Не ПервоеИзмерениеСовпадает Или Измерения.Количество() = 1 Тогда
		Возврат ПервоеИзмерениеСовпадает;
	КонецЕсли;
	
	Для Индекс = 1 По Измерения.Количество() - 1 Цикл
		Если ТекущаяСтрока[Измерения[Индекс]] <> ПредыдущаяСтрока[Измерения[Индекс]] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

Функция СтрокаТаблицыПоСтруктуреПоиска(Таблица, СтруктураПоиска)
	НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

Функция СвойстваОбщихГрафиков() 
	Если КэшДанныеОбщихГрафиковСотрудников <> Неопределено Тогда
		Возврат КэшДанныеОбщихГрафиковСотрудников;
	КонецЕсли;
	
	ГрафикиСотрудников = ИсточникиДанныхУчетаВремени();
	
	ОтборГрафиков = ГрафикиСотрудников.ВыгрузитьКолонку("ОбщийГрафик");
	ОтборГрафиков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборГрафиков);
			  
	ПолучаемыеРеквизиты = 
	"ГрафикПолногоРабочегоВремени,
	|ДлительностьРабочейНедели,
	|ПроизводственныйКалендарь,
	|НеполныйРабочийДень";
	
	СвойстваГрафиков = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборГрафиков, ПолучаемыеРеквизиты); 
	
	ОтборГрафиков.Очистить();
	СвойстваГрафиковКДополнению = Новый Массив;
	Для Каждого СвойстваТекущегоГрафика Из СвойстваГрафиков Цикл
		СвойстваТекущегоГрафика.Значение.Вставить("ДлительностьРабочейНеделиГрафикаПолногоВремени", СвойстваТекущегоГрафика.Значение.ДлительностьРабочейНедели);
		СвойстваТекущегоГрафика.Значение.Вставить("ГрафикРаботы", СвойстваТекущегоГрафика.Ключ);

		Если ЗначениеЗаполнено(СвойстваТекущегоГрафика.Значение.ГрафикПолногоРабочегоВремени) Тогда 
	    	ОтборГрафиков.Добавить(СвойстваТекущегоГрафика.Значение.ГрафикПолногоРабочегоВремени);	
	        СвойстваГрафиковКДополнению.Добавить(СвойстваТекущегоГрафика);
		КонецЕсли;
	КонецЦикла;	
	
	ОтборГрафиков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборГрафиков);
	СвойстваГрафиковПолногоВремени = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборГрафиков, ПолучаемыеРеквизиты); 

	
	Для Каждого ДополняемыеСвойства Из СвойстваГрафиковКДополнению Цикл
		СвойстваГрафикаПолногоВремени = СвойстваГрафиковПолногоВремени[ДополняемыеСвойства.Значение.ГрафикПолногоРабочегоВремени];
		Если СвойстваГрафикаПолногоВремени <> Неопределено Тогда
			ДополняемыеСвойства.Значение.ДлительностьРабочейНеделиГрафикаПолногоВремени = СвойстваГрафикаПолногоВремени.ДлительностьРабочейНедели;
		КонецЕсли;
	КонецЦикла;	
		
	КэшДанныеОбщихГрафиковСотрудников = СвойстваГрафиков;
	
	Возврат СвойстваГрафиков;
КонецФункции	

Процедура ЗаполнитьПоказетелиСотрудниковПоКадровымДанным(ТаблицаПоказателейСотрудников, Показатель, Значение, ДатаНачала, ДатаОкончания, СтрокиКадровойИстории)
	Для Каждого ТекущаяСтрокаКадровйИстории Из СтрокиКадровойИстории Цикл		
		ДатаНачалаДействияПоказателя = Макс(ТекущаяСтрокаКадровйИстории.ДатаНачала, ДатаНачала);
		ДатаОкончанияДействияПоказателя = Мин(ТекущаяСтрокаКадровйИстории.ДатаОкончания, ДатаОкончания);
		
		Если ДатаокончанияДействияПоказателя > ДатаНачалаДействияПоказателя Тогда	
			СтрокаТаблицыПоказателей = ТаблицаПоказателейСотрудников.Добавить();
			СтрокаТаблицыПоказателей.Сотрудник = ТекущаяСтрокаКадровйИстории.Сотрудник;
			СтрокаТаблицыПоказателей.Показатель = Показатель;
			СтрокаТаблицыПоказателей.Значение = Значение;
			СтрокаТаблицыПоказателей.ДатаНачала = ДатаНачалаДействияПоказателя;
			СтрокаТаблицыПоказателей.ДатаОкончания = ДатаОкончанияДействияПоказателя;	
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры

Функция НовыйТаблицаПоказателейСотрудников()
	ТаблицаПоказателейСотрудников = Новый ТаблицаЗначений;
	ТаблицаПоказателейСотрудников.Колонки.Добавить("Сотрудник");
	ТаблицаПоказателейСотрудников.Колонки.Добавить("Показатель");
	ТаблицаПоказателейСотрудников.Колонки.Добавить("ДокументОснование");
	ТаблицаПоказателейСотрудников.Колонки.Добавить("ДатаНачала");
	ТаблицаПоказателейСотрудников.Колонки.Добавить("ДатаОкончания");
	ТаблицаПоказателейСотрудников.Колонки.Добавить("Значение");
	
	Возврат ТаблицаПоказателейСотрудников;	
КонецФункции

#КонецОбласти

#Область МетодыРаботыСКоллекциями

Процедура РазбитьТаблицуПоИнтервалам(ИсходнаяТаблица, ТаблицаИнтерваловРазбиение, КлючСвязи, ЗаполняемыеРесурсы = Неопределено, ЗначенияРесурсовПоУмолчанию = Неопределено)
	Если ТаблицаИнтерваловРазбиение.Количество() = 0 И ЗначенияРесурсовПоУмолчанию = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОбходТаблицыРазбиения = ОбходТаблицы(ТаблицаИнтерваловРазбиение, КлючСвязи, "ДатаНачала", "ДатаОкончания", Истина);
	
	ИндексТекущейСтроки = 0;
	
	АктуальнаяСтрокаРазбиения = Неопределено;
	Пока ИндексТекущейСтроки <= ИсходнаяТаблица.Количество() - 1 Цикл 
		ТекущаяСтрока = ИсходнаяТаблица[ИндексТекущейСтроки];
		
		АктуальнаяСтрокаРазбиения = СледующаяАктуальнаяСтрока(ТекущаяСтрока, ОбходТаблицыРазбиения, АктуальнаяСтрокаРазбиения);
		
		Если АктуальнаяСтрокаРазбиения = Неопределено Тогда
			Если ЗначенияРесурсовПоУмолчанию <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияРесурсовПоУмолчанию, ЗаполняемыеРесурсы);
			КонецЕсли;	
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			Продолжить;
		КонецЕсли;	
		
		Если АктуальнаяСтрокаРазбиения.ДатаНачала <= ТекущаяСтрока.ДатаНачала 
			И АктуальнаяСтрокаРазбиения.ДатаОкончания >= ТекущаяСтрока.Датаокончания Тогда
			
			// строка таблицы разбиения полностью покрывает текущий интервал
			
			Если ЗаполняемыеРесурсы <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, АктуальнаяСтрокаРазбиения, ЗаполняемыеРесурсы);
			КонецЕсли;		
		ИначеЕсли ТекущаяСтрока.ДатаНачала < АктуальнаяСтрокаРазбиения.ДатаНачала
			И ТекущаяСтрока.ДатаОкончания > АктуальнаяСтрокаРазбиения.ДатаОкончания Тогда
			
			// Если текущий интервал полностью включает интервал разбиения, то разделяем текущий интервал на 3.
			
			// Закрываем текущую строку 
			ИсходнаяДатаОкончания = ТекущаяСтрока.ДатаОкончания ;
			ТекущаяСтрока.ДатаОкончания = АктуальнаяСтрокаРазбиения.ДатаНачала - 1;
			Если ЗначенияРесурсовПоУмолчанию <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияРесурсовПоУмолчанию, ЗаполняемыеРесурсы);
			КонецЕсли;
				
			// Добавляем новую строку, соответствующую интервалу разбиения.
			НоваяСтрока = ВставитьСтрокуВТаблицу(ИсходнаяТаблица, ИндексТекущейСтроки + 1, ТекущаяСтрока);
			НоваяСтрока.ДатаНачала = АктуальнаяСтрокаРазбиения.ДатаНачала;
			НоваяСтрока.ДатаОкончания = АктуальнаяСтрокаРазбиения.ДатаОкончания;
			Если ЗаполняемыеРесурсы <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, АктуальнаяСтрокаРазбиения, ЗаполняемыеРесурсы);
			КонецЕсли;
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			
			// Добавляем строку соответствущему остатку текущего интервала.
			// На следующей итерации будем рассматривать ее, поэтому индекс не сдвигаем.
			НоваяСтрока = ВставитьСтрокуВТаблицу(ИсходнаяТаблица, ИндексТекущейСтроки + 1, ТекущаяСтрока);
			НоваяСтрока.ДатаНачала = АктуальнаяСтрокаРазбиения.ДатаОкончания + 1;
			НоваяСтрока.ДатаОкончания = ИсходнаяДатаОкончания;
			Если ЗначенияРесурсовПоУмолчанию <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияРесурсовПоУмолчанию, ЗаполняемыеРесурсы);
			КонецЕсли;
			
		ИначеЕсли АктуальнаяСтрокаРазбиения.ДатаНачала <= ТекущаяСтрока.ДатаНачала Тогда
			// вставим строку соответсвующую интервалу разбиения на место текущей строки
			НоваяСтрока = ВставитьСтрокуВТаблицу(ИсходнаяТаблица, ИндексТекущейСтроки, ТекущаяСтрока);
			НоваяСтрока.ДатаНачала = ТекущаяСтрока.ДатаНачала;
			НоваяСтрока.ДатаОкончания = АктуальнаяСтрокаРазбиения.ДатаОкончания;
			
			Если ЗаполняемыеРесурсы <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, АктуальнаяСтрокаРазбиения, ЗаполняемыеРесурсы);
			КонецЕсли;
			
			// Сдвинем дату начала у текущей строки.
			// На следующей итерации будем опять рассматривать ее.
			ТекущаяСтрока.ДатаНачала = АктуальнаяСтрокаРазбиения.ДатаОкончания + 1;
			Если ЗначенияРесурсовПоУмолчанию <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияРесурсовПоУмолчанию, ЗаполняемыеРесурсы);
			КонецЕсли;

		ИначеЕсли АктуальнаяСтрокаРазбиения.ДатаОкончания >= ТекущаяСтрока.ДатаОкончания Тогда
			// закроем текущую строку
			ИсходнаяДатаОкончания = ТекущаяСтрока.ДатаОкончания; 
			ТекущаяСтрока.ДатаОкончания = АктуальнаяСтрокаРазбиения.ДатаНачала - 1;
			Если ЗначенияРесурсовПоУмолчанию <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияРесурсовПоУмолчанию, ЗаполняемыеРесурсы);
			КонецЕсли;		
			
			// добавим новую строку соотвествующую интервалу разбиения
			НоваяСтрока = ВставитьСтрокуВТаблицу(ИсходнаяТаблица, ИндексТекущейСтроки + 1, ТекущаяСтрока);
			НоваяСтрока.ДатаНачала = АктуальнаяСтрокаРазбиения.ДатаНачала;
			НоваяСтрока.ДатаОкончания = ИсходнаяДатаОкончания;
			
			Если ЗаполняемыеРесурсы <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, АктуальнаяСтрокаРазбиения, ЗаполняемыеРесурсы);
			КонецЕсли;
		КонецЕсли;	
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
	КонецЦикла;		
		
КонецПроцедуры	

Процедура ПометитьВычеркиваемыеПериоды(СтрокиИсходныхИнтервалов, СтрокиВычеркиваемыхИнтервалов, КлючСвязи, Знач ИндексПервойСтроки = 0, Знач ИндексПоследнейСтроки = Неопределено)
	Если СтрокиИсходныхИнтервалов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ОбходТаблицыВычеркиваемыхПериодов = ОбходТаблицы(СтрокиВычеркиваемыхИнтервалов, КлючСвязи, "ДатаНачала", "ДатаОкончания", Истина);

	ИндексТекущейСтроки = ИндексПервойСтроки;
	ИндексПоследнейСтроки = ?(ИндексПоследнейСтроки = Неопределено, СтрокиИсходныхИнтервалов.Количество() - 1, ИндексПоследнейСтроки);
	
	ВычеркиваемыйПериод = Неопределено;
	Пока ИндексТекущейСтроки <= ИндексПоследнейСтроки Цикл
		ТекущаяСтрока = СтрокиИсходныхИнтервалов[ИндексТекущейСтроки];
		
		ВычеркиваемыйПериод = СледующийВычеркиваемыйПериод(ТекущаяСтрока, ОбходТаблицыВычеркиваемыхПериодов, ВычеркиваемыйПериод);
		
		Если ВычеркиваемыйПериод = Неопределено Тогда
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			Продолжить;
		КонецЕсли;	
		
		Если НачалоДня(ВычеркиваемыйПериод.ДатаНачала) <= НачалоДня(ТекущаяСтрока.ДатаНачала) 
			И КонецДня(ВычеркиваемыйПериод.ДатаОкончания) >= КонецДня(ТекущаяСтрока.Датаокончания) Тогда
			
			// вычеркиваемый период полностью покрывает рассматриваемый период
			ТекущаяСтрока.Вычеркивать = Истина;
		ИначеЕсли НачалоДня(ТекущаяСтрока.ДатаНачала) < НачалоДня(ВычеркиваемыйПериод.ДатаНачала)
			И КонецДня(ТекущаяСтрока.ДатаОкончания) > КонецДня(ВычеркиваемыйПериод.ДатаОкончания) Тогда
			
			// текущий интервал полностю включает вычеркиваемый
			ИсходнаяДатаокончания = ТекущаяСтрока.ДатаОкончания;
			ТекущаяСтрока.ДатаОкончания = ВычеркиваемыйПериод.ДатаНачала - 1;
			
			НоваяСтрокаВычеркивания = ВставитьСтрокуВТаблицу(СтрокиИсходныхИнтервалов, ИндексТекущейСтроки + 1, ТекущаяСтрока);
			НоваяСтрокаВычеркивания.ДатаНачала = ВычеркиваемыйПериод.ДатаНачала; 	
			НоваяСтрокаВычеркивания.ДатаОкончания = ВычеркиваемыйПериод.ДатаОкончания;
			НоваяСтрокаВычеркивания.Вычеркивать = Истина;
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			
			НоваяСтрока = ВставитьСтрокуВТаблицу(СтрокиИсходныхИнтервалов, ИндексТекущейСтроки + 1, ТекущаяСтрока);
			НоваяСтрока.ДатаНачала = ВычеркиваемыйПериод.ДатаОкончания + 1; 	
			НоваяСтрока.ДатаОкончания = ИсходнаяДатаокончания;
			
			ИндексПоследнейСтроки = ИндексПоследнейСтроки + 2;
		ИначеЕсли НачалоДня(ВычеркиваемыйПериод.ДатаНачала) <= НачалоДня(ТекущаяСтрока.ДатаНачала) Тогда
			НоваяСтрокаВычеркивания = ВставитьСтрокуВТаблицу(СтрокиИсходныхИнтервалов, ИндексТекущейСтроки, ТекущаяСтрока);
			НоваяСтрокаВычеркивания.ДатаНачала = ТекущаяСтрока.ДатаНачала; 	
			НоваяСтрокаВычеркивания.ДатаОкончания = ВычеркиваемыйПериод.ДатаОкончания;
			НоваяСтрокаВычеркивания.Вычеркивать = Истина;
			
			ТекущаяСтрока.ДатаНачала = ВычеркиваемыйПериод.ДатаОкончания + 1;	
			ИндексПоследнейСтроки = ИндексПоследнейСтроки + 1;
		ИначеЕсли КонецДня(ВычеркиваемыйПериод.ДатаОкончания) >= КонецДня(ТекущаяСтрока.ДатаОкончания) Тогда
			НоваяСтрокаВычеркивания = ВставитьСтрокуВТаблицу(СтрокиИсходныхИнтервалов, ИндексТекущейСтроки + 1, ТекущаяСтрока);
			НоваяСтрокаВычеркивания.ДатаНачала = ВычеркиваемыйПериод.ДатаНачала; 	
			НоваяСтрокаВычеркивания.ДатаОкончания = ТекущаяСтрока.ДатаОкончания;
			НоваяСтрокаВычеркивания.Вычеркивать = Истина;
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			
			ТекущаяСтрока.ДатаОкончания = ВычеркиваемыйПериод.ДатаНачала - 1;
			ИндексПоследнейСтроки = ИндексПоследнейСтроки + 1;
		КонецЕсли;	
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
	КонецЦикла;		
КонецПроцедуры

Функция ВставитьСтрокуВТаблицу(Таблица, ИндексСтроки = Неопределено, ШаблонЗаполнения = Неопределено)		
	Если ИндексСтроки = Неопределено 
		Или ИндексСтроки > Таблица.Количество() - 1 Тогда
		
		НоваяСтрока = Таблица.Добавить();		
	Иначе
		НоваяСтрока = Таблица.Вставить(ИндексСтроки);
	КонецЕсли;
	
	Если ШаблонЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ШаблонЗаполнения);
	КонецЕсли;
	
	Возврат НоваяСтрока;
КонецФункции	

Функция СледующийВычеркиваемыйПериод(ТекущаяСтрокаИсходнойТаблицы, ОбходТаблицыВычеркиваемыхПериодов, ТекущийВычеркиваемыйПериод)
	Возврат СледующаяАктуальнаяСтрока(ТекущаяСтрокаИсходнойТаблицы, ОбходТаблицыВычеркиваемыхПериодов, ТекущийВычеркиваемыйПериод);		
КонецФункции	

Функция СледующаяАктуальнаяСтрока(ТекущаяСтрокаИсходнойТаблицы, ОбходТаблицыРазбиения, ТекущаяАктуальнаяСтрока)
	Если ТекущаяАктуальнаяСтрока <> Неопределено
		И СравнитьЗначенияКлюча(ТекущаяСтрокаИсходнойТаблицы, ТекущаяАктуальнаяСтрока, ОбходТаблицыРазбиения.Ключ, ОбходТаблицыРазбиения.СравнениеЗначений) = 0
		И ТекущаяАктуальнаяСтрока.ДатаОкончания >= ТекущаяСтрокаИсходнойТаблицы.ДатаНачала 
		И ТекущаяАктуальнаяСтрока.ДатаНачала <= ТекущаяСтрокаИсходнойТаблицы.ДатаНачала Тогда
		
		Возврат ТекущаяАктуальнаяСтрока;
	КонецЕсли;
	
	ТекущаяАктуальнаяСтрока = СледующаяСтрокаВключающаяПериод(ОбходТаблицыРазбиения, ТекущаяСтрокаИсходнойТаблицы, ТекущаяСтрокаИсходнойТаблицы.ДатаНачала);
	
	Если ТекущаяАктуальнаяСтрока <> Неопределено Тогда
		Возврат ТекущаяАктуальнаяСтрока;
	КонецЕсли;	
	
	ТекущаяАктуальнаяСтрока = СледующаСтрокаПоВхождениюВИнтервал(ОбходТаблицыРазбиения, ТекущаяСтрокаИсходнойТаблицы, ТекущаяСтрокаИсходнойТаблицы.ДатаНачала, ТекущаяСтрокаИсходнойТаблицы.ДатаОкончания);
	
	Возврат ТекущаяАктуальнаяСтрока;
КонецФункции

Функция ОбходТаблицы(Таблица, КлючСтрокой, ИмяПоляДатаНачала, ИмяПоляДатаОкончания = Неопределено, Отсортирована = Ложь)
	ОбходТаблицы = Новый Структура;
	ОбходТаблицы.Вставить("Таблица", Таблица);
	ОбходТаблицы.Вставить("Ключ", СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючСтрокой, ",", Истина, Истина));
	ОбходТаблицы.Вставить("ИмяПоляДатаНачала", ИмяПоляДатаНачала);
	ОбходТаблицы.Вставить("ИмяПоляДатаОкончания", ИмяПоляДатаОкончания);
	ОбходТаблицы.Вставить("ИндексТекущейСтроки", Неопределено);
	ОбходТаблицы.Вставить("ИндексОчереднойСтроки", 0);
	ОбходТаблицы.Вставить("ИндексПервойСтрокиПоЗначениюКлюча", Неопределено);
	ОбходТаблицы.Вставить("ТекущееЗначениеКлюча", Новый Структура(КлючСтрокой));
	ОбходТаблицы.Вставить("СравнениеЗначений", Новый СравнениеЗначений);
	
	ПоляСортировки = Новый Массив;
	ПоляСортировки.Добавить(КлючСтрокой);
	ПоляСортировки.Добавить(ИмяПоляДатаНачала);
	Если ИмяПоляДатаОкончания <> Неопределено Тогда
		ПоляСортировки.Добавить(ИмяПоляДатаОкончания + " УБЫВ");
	КонецЕсли;	

	
	Если НЕ Отсортирована Тогда
		Таблица.Сортировать(СтрСоединить(ПоляСортировки, ","), Новый СравнениеЗначений);
	КонецЕсли;
	
	Возврат ОбходТаблицы;
КонецФункции	

Функция СпозиционироватьОбходНаОчереднойСтрокеПоКлючу(ОбходТаблицы, ЗначениеКлюча)
	Если СравнитьЗначенияКлюча(ОбходТаблицы.ТекущееЗначениеКлюча, ЗначениеКлюча, ОбходТаблицы.Ключ, ОбходТаблицы.СравнениеЗначений) <> 0 Тогда 
		Если СпозиционироватьОбходНаПервойСтрокеПоКлючу(ОбходТаблицы, ЗначениеКлюча) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли; 	
			
	Для Индекс = ОбходТаблицы.ИндексОчереднойСтроки По ОбходТаблицы.Таблица.Количество() - 1 Цикл
		ТекущаяСтрокаТаблицы = ОбходТаблицы.Таблица[Индекс];
		РезультатСравнения = СравнитьЗначенияКлюча(ТекущаяСтрокаТаблицы, ЗначениеКлюча, ОбходТаблицы.Ключ, ОбходТаблицы.СравнениеЗначений);
		Если РезультатСравнения > 0 Тогда
			ОбходТаблицы.ИндексОчереднойСтроки = Индекс;
			ОбходТаблицы.ИндексТекущейСтроки = Неопределено;                   
			Возврат Ложь;
		ИначеЕсли РезультатСравнения < 0 Тогда
			Продолжить;
		Иначе
			ОбходТаблицы.ИндексОчереднойСтроки = Индекс;
			ОбходТаблицы.ИндексТекущейСтроки = Индекс;			
			Возврат Истина;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции

Функция СпозиционироватьОбходНаПервойСтрокеПоКлючу(ОбходТаблицы, ЗначениеКлюча)
	ОбходТаблицы.ИндексПервойСтрокиПоЗначениюКлюча = Неопределено;

	Для Индекс = ОбходТаблицы.ИндексОчереднойСтроки По ОбходТаблицы.Таблица.Количество() - 1 Цикл
		ТекущаяСтрокаТаблицы = ОбходТаблицы.Таблица[Индекс];
		РезультатСравнения = СравнитьЗначенияКлюча(ТекущаяСтрокаТаблицы, ЗначениеКлюча, ОбходТаблицы.Ключ, ОбходТаблицы.СравнениеЗначений);
		Если РезультатСравнения > 0 Тогда
			ОбходТаблицы.ИндексОчереднойСтроки = Индекс;
			ОбходТаблицы.ИндексТекущейСтроки = Неопределено;
			Возврат Ложь;
		ИначеЕсли РезультатСравнения < 0 Тогда
			Продолжить;
		Иначе
			ОбходТаблицы.ИндексОчереднойСтроки = Индекс;
			ОбходТаблицы.ИндексТекущейСтроки = Индекс;

			ЗаполнитьЗначенияСвойств(ОбходТаблицы.ТекущееЗначениеКлюча, ЗначениеКлюча);
			
			Если ОбходТаблицы.ИндексПервойСтрокиПоЗначениюКлюча = Неопределено Тогда
				ОбходТаблицы.ИндексПервойСтрокиПоЗначениюКлюча = Индекс;
			КонецЕсли;
			
			Возврат Истина;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции

Функция СледующаСтрокаПоВхождениюВИнтервал(ОбходТаблицы, ЗначениеКлюча, ДатаНачалаИнтервала, ДатаОкончанияИнтервала = Неопределено)	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияИнтервала) Тогда
		ДатаОкончанияИнтервала = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
	КонецЕсли;
	
	Пока СпозиционироватьОбходНаОчереднойСтрокеПоКлючу(ОбходТаблицы, ЗначениеКлюча) Цикл
		ТекущаяСтрокаТаблицы = ОбходТаблицы.Таблица[ОбходТаблицы.ИндексТекущейСтроки];
	
		Если ТекущаяСтрокаТаблицы[ОбходТаблицы.ИмяПоляДатаНачала] < ДатаНачалаИнтервала Тогда
			ОбходТаблицы.ИндексОчереднойСтроки = ОбходТаблицы.ИндексОчереднойСтроки + 1;
			Продолжить;
		Иначе
			Если ТекущаяСтрокаТаблицы[ОбходТаблицы.ИмяПоляДатаНачала] <= ДатаОкончанияИнтервала Тогда
				ОбходТаблицы.ИндексОчереднойСтроки = ОбходТаблицы.ИндексОчереднойСтроки + 1;
				Возврат ТекущаяСтрокаТаблицы;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;				
	КонецЦикла;
	
	Возврат Результат;	
КонецФункции

Функция СледующаяСтрокаВключающаяПериод(ОбходТаблицы, ЗначениеКлюча, Период, ТекущаяСтрокаТаблицы = Неопределено)	
	Если ТекущаяСтрокаТаблицы <> Неопределено
		И СравнитьЗначенияКлюча(ЗначениеКлюча, ТекущаяСтрокаТаблицы, ОбходТаблицы.Ключ, ОбходТаблицы.СравнениеЗначений) = 0
		И ТекущаяСтрокаТаблицы[ОбходТаблицы.ИмяПоляДатаНачала] <= Период
		И ТекущаяСтрокаТаблицы[ОбходТаблицы.ИмяПоляДатаОкончания] >= Период Тогда
		
		Возврат ТекущаяСтрокаТаблицы;
	КонецЕсли;	
	
	Пока СпозиционироватьОбходНаОчереднойСтрокеПоКлючу(ОбходТаблицы, ЗначениеКлюча) Цикл
		ТекущаяСтрокаТаблицы = ОбходТаблицы.Таблица[ОбходТаблицы.ИндексТекущейСтроки];
	
		Если ТекущаяСтрокаТаблицы[ОбходТаблицы.ИмяПоляДатаНачала] > Период Тогда
			Возврат Неопределено;
		Иначе
			Если ТекущаяСтрокаТаблицы[ОбходТаблицы.ИмяПоляДатаОкончания] >= Период Тогда
				ОбходТаблицы.ИндексОчереднойСтроки = ОбходТаблицы.ИндексОчереднойСтроки + 1;

				Возврат ТекущаяСтрокаТаблицы;
			КонецЕсли;
			ОбходТаблицы.ИндексОчереднойСтроки = ОбходТаблицы.ИндексОчереднойСтроки + 1;
		КонецЕсли;				
	КонецЦикла;
		
	Возврат Неопределено;	
КонецФункции

Функция СброситьОбходТаблицыНаПервуюСтрокуПоКлючу(ОбходТаблицы)
	ОбходТаблицы.ИндексТекущейСтроки = Неопределено;
	ОбходТаблицы.ИндексОчереднойСтроки = ?(ОбходТаблицы.ИндексПервойСтрокиПоЗначениюКлюча = Неопределено, ОбходТаблицы.ИндексОчереднойСтроки, ОбходТаблицы.ИндексПервойСтрокиПоЗначениюКлюча);	
КонецФункции	

Функция СравнитьЗначенияКлюча(ПервоеЗначение, ВтороеЗначение, ПоляКлюча, СравнениеЗначений)
	Результат = 0;
	Для Каждого Поле Из ПоляКлюча Цикл 
		Результат = СравнениеЗначений.Сравнить(ПервоеЗначение[Поле], ВтороеЗначение[Поле]);
		Если Результат <> 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
		
	Возврат Результат;	
КонецФункции	

Функция СтрокаВключающаяДату(СтрокиТаблицы, Дата)
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Если ОбщегоНазначенияБЗК.ДатаВИнтервале(Дата, СтрокаТаблицы.ДатаНачала, СтрокаТаблицы.ДатаОкончания) Тогда
			Возврат СтрокаТаблицы;
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	
	
#КонецОбласти

#КонецОбласти

#Область Инициализация

МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
МесяцНачисления = Дата(1, 1, 1);
МесяцыРасчета = Новый Массив;
ПериодРасчета = Новый СтандартныйПериод;
Организация = Справочники.Организации.ПустаяСсылка();
ВычеркиваемыеСтроки = Новый Массив;
ВременныйРегистратор = Документы.НачислениеЗарплаты.ПолучитьСсылку();
ВызыватьИсключение = Истина;
ЭтоИсправлениеТекущимПериодом = Ложь;
ДобавленныеСтрокиНачислений = Новый Массив;
ДобавленныеСтрокиУдержаний = Новый Массив;

ВидыРасчетаНачислений = Новый Соответствие;
ВидыРасчетаУдержаний = Новый Соответствие;

ДополнительныеСвойства = Новый Структура;

#КонецОбласти


#КонецЕсли