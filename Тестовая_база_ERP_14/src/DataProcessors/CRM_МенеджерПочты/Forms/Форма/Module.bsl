
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторСтрокиПолучателя;

&НаКлиенте
Перем ИмяЭлемента;

&НаКлиенте
Перем ПроверкаСуществованияФайлов;

&НаКлиенте
Перем ТекущийНомерВложения;

&НаКлиенте
Перем ПолучаемыеФайлы;

&НаКлиенте
Перем ПолученныеФайлы;

&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	Попытка
		Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно открыть Почтовый клиент. Подсистема 1С:CRM не используется! (см. Персональные настройки пользователя)';en='Unable to open email client. Subsystem 1C: CRM is not used! (see Personal settings of the user)'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Работа почтового клиента в этом режиме не поддерживается!';en='The operation of the mail customer in this mode is not supported!'"));
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();
	
	ЕстьПравоДобавленияУчетныхЗаписей = ПравоДоступа("Добавление", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты);
	
	// Оформление списка
	
	ЕстьИсточникиЛидов = Ложь;
	ЗаполнитьСписокУчетныхЗаписей(УчетныеЗаписи, ЕстьИсточникиЛидов);
	Элементы.СписокПисемСостояниеЛида.Видимость = ЕстьИсточникиЛидов;
	
	ЗаполнитьДеревоУчетныхЗаписей();
	
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка		= ПоказатьСкрытьПисьмоПометка;
	Элементы.Описание.Видимость								= ПоказатьСкрытьПисьмоПометка;
	// Элементы.СписокПисемПоказатьСкрытьВложения.Пометка	= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	Элементы.СписокПисемПоказатьСкрытьВложения.Пометка		= ПоказатьСкрытьВложенияПометка;
	// Элементы.СписокПисемПоказатьСкрытьВложения.Доступность= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	Элементы.Вложения.Видимость								= ПоказатьСкрытьВложенияПометка;
	
	// Восстановление сортировки списка
	// CRM_ОбщегоНазначенияСервер.ВосстановитьСортировкуСписка(СписокПисем, "Обработка.CRM_МенеджерПочты.СписокПисем");
	
	// Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	
	// Показать/Скрыть список учетных записей
	ПоказатьСписокУчетныхЗаписей = ХранилищеОбщихНастроекЗагрузить(ЭтотОбъект.ИмяФормы, "СписокУчетныхЗаписей");
	Если ПоказатьСписокУчетныхЗаписей = Неопределено Тогда
		Элементы.ПанельУправления.Видимость = Истина;
		ХранилищеОбщихНастроекСохранить(ЭтотОбъект.ИмяФормы, "СписокУчетныхЗаписей", Истина);
	Иначе
		Элементы.ПанельУправления.Видимость = ПоказатьСписокУчетныхЗаписей;
	КонецЕсли;
	Если Элементы.ПанельУправления.Видимость Тогда
		Элементы.ПоказатьСкрытьДеревоУчетныхЗаписей.Заголовок = НСтр("ru='Скрыть список учетных записей';en='Hide account list'");
	Иначе
		Элементы.ПоказатьСкрытьДеревоУчетныхЗаписей.Заголовок = НСтр("ru='Показать список учетных записей';en='Show Account List'");
	КонецЕсли;
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();	
	
	ИспользоватьЗаявки = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьЗаявки") И (Пользователи.ЭтоПолноправныйПользователь() ИЛИ РольДоступна("CRM_ДобавлениеИзменениеЗаявок"));
	
	Элементы.СписокПисемУчетныеЗаписиЭлектроннойПочты.Видимость 					= ЕстьПравоДобавленияУчетныхЗаписей;
	Элементы.ПанельУправленияКонтекстноеМенюУчентыеЗаписиЭлектроннойПочты.Видимость = ЕстьПравоДобавленияУчетныхЗаписей;
	Элементы.ПанельУправленияКонтекстноеМенюДобавитьУчетнуюЗапись.Видимость 		= ЕстьПравоДобавленияУчетныхЗаписей;
	Элементы.ПанельУправленияКонтекстноеМенюРедактироватьПочтовыеПапки.Видимость	= ЕстьПравоДобавленияУчетныхЗаписей;
	
	ПолучитьПочтуПриОткрытии = Параметры.Свойство("ПолучитьПочтуПриОткрытии");
		
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	// +Доступные пользователи
	МассивЭлементовОтбора = Новый Массив;
	МассивЭлементовОтбора.Добавить("Ответственный");
	УстановитьОтборВСпискеПоДоступнымпользователям(СписокПисем, МассивЭлементовОтбора);
	// -Доступные пользователи
	УстановитьУО();

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПапкиВыбранный) Тогда
		Если ВидПапкиВыбранный = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие") Тогда
			НаименованиеПапки = "Входящие";
		ИначеЕсли ВидПапкиВыбранный = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики") Тогда
			НаименованиеПапки = "Черновики";
		КонецЕсли;
	Иначе
		НаименованиеПапки = "Входящие";
	КонецЕсли;
	
	Ссылка = СправочникНайтиПоНаименованию("ПапкиЭлектронныхПисем",НаименованиеПапки, УчетнаяЗаписьВыбранная);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СтруктураОтбора = Новый Структура("Папка",Ссылка);
		НомерСтроки = ДеревоНайтиСтрокуПоСвойству(ДеревоУчетныхЗаписей,СтруктураОтбора);
		Элементы.ПанельУправления.ТекущаяСтрока = НомерСтроки;
	ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) Тогда
		Элементы.ПанельУправления.ТекущаяСтрока = 0;
	КонецЕсли;
	
	Если НетУчетныхЗаписей Тогда
		Если ЕстьПравоДобавленияУчетныхЗаписей Тогда
			ОповещениеВопрос = Новый ОписаниеОповещения("ОбработкаПодключитьУчетнуюЗапись", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Нет доступных учетных записей. Подключить новую?'");
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ТекстСообщения = НСтр("ru = 'Нет доступных учетных записей. Для добавления обратитесь к администратору.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	Если Элементы.СписокПисем.АвтоОбновление Тогда
		ПодключитьОбработчикОжидания("ОбновитьКоличествоНовыхПисемВПапках",Элементы.СписокПисем.ПериодАвтоОбновления);
	КонецЕсли;
	
		
	Если ПолучитьПочтуПриОткрытии Тогда
		ПолучитьПочту(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки ответа на вопрос - Подключить ли учетную запись.
//
// Параметры:
// Параметры - КодВозвратаДиалога
// дополнительно - неопределно, не передаем.
//
Процедура ОбработкаПодключитьУчетнуюЗапись(Параметры, Дополнительно) Экспорт
	
	Если Параметры = КодВозвратаДиалога.Да Тогда
		ПодключитьУчетнуюЗапись();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "CRM_УстановленФлагОбработано" Тогда
		
		Элементы.СписокПисем.Обновить();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "CRM_УстановленНовыйОтветственный" Тогда
		
		Элементы.СписокПисем.Обновить();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "ПолученыНовыеЭлектронныеПисьма" Тогда
		
		Элементы.СписокПисем.Обновить();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "СохраненаЛичнаяЗадача" И ТипЗнч(Параметр) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Элементы.СписокПисем.Обновить();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "Запись_УчетнаяЗаписьЭлектроннойПочты" Тогда
		ОбновитьСоставПапок(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
	// Сохранение сортировки списка.
	//CRM_ОбщегоНазначенияСервер.СохранитьСортировкуСписка(СписокПисем, "Обработка.CRM_МенеджерПочты.СписокПисем");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПисем

&НаКлиенте
Процедура СписокПисемПриИзменении(Элемент)
	ОбновитьКоличествоНовыхПисемВПапках();
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Элементы.СписокПисемПринятьОбращение.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Элементы.СписокПисемКонтекстноеМенюСкопировать.Видимость = Ложь;
		Элементы.СписокПисемДокументЭлектронноеПисьмоВходящееОтветить.Доступность = Истина;
		Элементы.СписокПисемДокументЭлектронноеПисьмоВходящееОтветитьВсем.Доступность = Истина;
		Элементы.КонтекстноеМенюСписокПисемОтветить.Доступность = Истина;
		Элементы.КонтекстноеМенюСписокПисемОтветитьВсем.Доступность = Истина;
		Элементы.СписокПисемПринятьОбращение.Доступность = Истина;
	ИначеЕсли ТипЗнч(Элемент.ТекущаяСтрока) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Элементы.СписокПисемКонтекстноеМенюСкопировать.Видимость = Истина;
		Элементы.СписокПисемДокументЭлектронноеПисьмоВходящееОтветить.Доступность = Ложь;
		Элементы.СписокПисемДокументЭлектронноеПисьмоВходящееОтветитьВсем.Доступность = Ложь;
		Элементы.КонтекстноеМенюСписокПисемОтветить.Доступность = Ложь;
		Элементы.КонтекстноеМенюСписокПисемОтветитьВсем.Доступность = Ложь;
		Элементы.СписокПисемПринятьОбращение.Доступность = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСписокПисемПриАктивизацииСтроки", 0.5, Истина);
	
	ПодключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма", 5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Копирование Тогда
		ПараметрыОткрытия = Новый Структура("ЗначениеКопирования", Элемент.ТекущаяСтрока);
	Иначе
		ПараметрыОткрытия = Новый Структура();
	КонецЕсли;
		
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОтключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма");
	
	АвтоустановкаРассмотренностиПисьма();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СвойстваУчетнойЗаписи(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ПараметрыФормы = ПолучитьТекущуюУЗ();
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект,,);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуОПрочтении(Команда)
	
	ВыделенныеПисьма = Элементы.СписокПисем.ВыделенныеСтроки;
	УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, Ложь);
	Элементы.СписокПисем.Обновить();
	ОбновитьКоличествоНовыхПисемВПапках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочитанное(Команда)
	
	ВыделенныеПисьма = Элементы.СписокПисем.ВыделенныеСтроки;
	УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, Истина);
	
	// Проверим напоминания о входящих письмах.
	ПроверитьНапоминанияОВходящихПисьмах(ВыделенныеПисьма);
	
	Элементы.СписокПисем.Обновить();
	ОбновитьКоличествоНовыхПисемВПапках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеКакПрочитанное(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
		
	Если Родитель = Неопределено Тогда
		Возврат;
	Иначе
		ТекПапка = ТекущиеДанные.Папка;
		УстановитьСнятьПометкуОПрочтении(ПолучитьМассивПисем(ТекПапка), Истина);
		Элементы.СписокПисем.Обновить();
		ОбновитьКоличествоНовыхПисемВПапках();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанныеДерева = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ПроверитьНаВозможностьОтправкиПисьма(ТекущиеДанныеДерева.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем';en='Login account is not intended for sending of letters'"));
		Возврат;
		
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", ТекущиеДанные.Ссылка, "ОтветитьВсем");
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание,ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанныеДерева = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ПроверитьНаВозможностьОтправкиПисьма(ТекущиеДанныеДерева.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем';en='Login account is not intended for sending of letters'"));
		Возврат;
		
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", ТекущиеДанные.Ссылка, "Переслать");
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание,ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Результат = "";
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 		
	
	Результат = СоздатьПисьмо(ТекущиеДанные.УчетнаяЗапись); 	
	
	Если Результат = "" Тогда
		
		СсылкаНового = ПолучитьСсылкуНовогоДокумента();
		ПараметрыОткрытия = Новый Структура("УчетнаяЗапись, Ключ", ТекущиеДанные.УчетнаяЗапись, ПолучитьСсылкуНовогоДокумента());
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПочту(Команда)
	
	ТекущаяУчетнаяЗапись = Неопределено;
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущаяУчетнаяЗапись = ТекущиеДанные.УчетнаяЗапись;
	КонецЕсли;
	
	СписокПолученныхПисем = Новый СписокЗначений;
	
	// CRM_УправлениеЭлектроннойПочтойКлиент.ЗагрузитьПочтуПользователя(Элементы.СписокПисем, ТекущаяУчетнаяЗапись);
	ПоказатьОповещениеПользователя(,,НСтр("ru='Идет получение электронной почты ...';en='There are an obtaining of e-mail...'"), БиблиотекаКартинок.CRM_Ожидание);
	ПолученоПисем = 0;
	ДоступноУчетныхЗаписей = 0;
	ЕстьОшибки = Ложь;
	
	СписокПолученныхПисем = Новый СписокЗначений;
	
	Результат = ПолучитьПочтуНаСервере(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки, СписокПолученныхПисем, ТекущаяУчетнаяЗапись);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПоучениеПочты", 1, Истина);
		// ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
	Иначе
		Элементы.СписокПисем.Обновить();
		ПоказатьОповещениеПользователя(,,НСтр("ru='Почта получена ...';en='Mail received ...'"));
	КонецЕсли;
	
	
	// CRM_УправлениеЭлектроннойПочтой.ЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки, СписокПолученныхПисем, УчетнаяЗаписьОтбор);
	//
	
	ОбновитьКоличествоНовыхПисемВПапках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПочту(Команда)
	
	CRM_УправлениеЭлектроннойПочтой.ОтправитьПочтуПользователя();
	Элементы.СписокПисем.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяЗагрузкаЭлектроннойПочты(Команда)
	
	ТекущаяУчетнаяЗапись = Неопределено;
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяУчетнаяЗапись = ТекущиеДанные.УчетнаяЗапись;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяУчетнаяЗапись) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбрана учетная запись!';en='Login account is not selected!'"), 10);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("УчетнаяЗапись", ТекущаяУчетнаяЗапись);
	ОткрытьФорму("Обработка.CRM_ПервоначальнаяЗагрузкаЭлектроннойПочты.Форма", СтруктураПараметры, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанныеДерева = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ПроверитьНаВозможностьОтправкиПисьма(ТекущиеДанныеДерева.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем';en='Login account is not intended for sending of letters'"));
		Возврат;
		
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", ТекущиеДанные.Ссылка, "Ответить");
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание, ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФильтр(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ЭлементыОтбора = Новый Структура("Владелец", ТекущиеДанные.УчетнаяЗапись);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);
	ФормаФильтра = ПолучитьФорму("Справочник.ПравилаОбработкиЭлектроннойПочты.ФормаОбъекта", ПараметрыФормы);
	Если ФормаФильтра = Неопределено Тогда Возврат; КонецЕсли;	
	ФормаФильтра.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПравилаОбработки(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", ТекущиеДанные.УчетнаяЗапись);
	ФормаФильтра = ПолучитьФорму("Справочник.ПравилаОбработкиЭлектроннойПочты.Форма.ПрименениеПравил", ПараметрыФормы);
	Если ФормаФильтра = Неопределено Тогда Возврат; КонецЕсли;	
	ФормаФильтра.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии", Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	ОтправительАдрес = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Ссылка, "ОтправительАдрес");
	ОтправительКонтакт = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Ссылка, "ОтправительКонтакт");
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПисьмоВходящее", ТекущиеДанные.Ссылка);
	МассивСсылок = Новый Массив;
	Если ЗначениеЗаполнено(ОтправительКонтакт) Тогда
		МассивСсылок.Добавить(ОтправительКонтакт);
	КонецЕсли;
	// Для Каждого СтрокаДанных Из ЭтотОбъект.CRM_ТаблицаИнтересов Цикл
	//	МассивСсылок.Добавить(СтрокаДанных.Ссылка);
	// КонецЦикла;
	ПараметрыФормы.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыФормы.Вставить("АдресЭП", ОтправительАдрес);
	ПараметрыФормы.Вставить("ТемаПисьма", ТекущиеДанные.Тема);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект, ОтправительАдрес);
КонецПроцедуры

&НаКлиенте
Процедура УчентыеЗаписиЭлектроннойПочты(Команда)
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработчикОжиданияСписокПисемПриАктивизацииСтроки()
	
	Если Элементы.СписокПисем.ТекущаяСтрока = Неопределено Или ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ОписаниеПисьма = СформироватьПустоеОписание();
		ТекущееПисьмо = Неопределено;
		
		Попытка		СтрОтправитель = Элементы.СписокПисем.ТекущиеДанные.Отправитель;
		Исключение	СтрОтправитель = "";
		КонецПопытки;
		
		Попытка		СтрКому = Элементы.СписокПисем.ТекущиеДанные.Получатель;
		Исключение	СтрКому = "";
		КонецПопытки;
		
		Попытка		СтрТема = Элементы.СписокПисем.ТекущиеДанные.Тема;
		Исключение	СтрТема = "";
		КонецПопытки;
		
		Возврат;
	КонецЕсли;
	
	Если ТекущееПисьмо = Элементы.СписокПисем.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееПисьмо = Элементы.СписокПисем.ТекущаяСтрока;
	
	Если ТекущееПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОписанияПисьма = СформироватьОписаниеТекущегоПисьма(ТекущееПисьмо);
	
	Если СтруктураОписанияПисьма = Неопределено Тогда
		ОписаниеПисьма = СформироватьПустоеОписание();
		СтрОтправитель = "";
		СтрКому = "";
		СтрТема = "";
	Иначе
		ОписаниеПисьма = СтруктураОписанияПисьма.Тело;
		
		СтрОтправитель = СтруктураОписанияПисьма.От;
		СтрКому = СтруктураОписанияПисьма.Кому;
		СтрТема = СтруктураОписанияПисьма.Тема;
	КонецЕсли;
	
	СформироватьПредставлениеВложений(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки()
	
	ОписаниеПисьма = СформироватьПустоеОписание();
	
	СтрОтправитель = "";
	СтрКому = "";
	СтрТема = "";
	
	Вложения.Очистить();
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	
 	Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") или ТекущиеДанные.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта")) Тогда
		Элементы.ПанельУправленияКонтекстноеМенюОчиститьКорзину.Видимость = Истина;
	Иначе
		Элементы.ПанельУправленияКонтекстноеМенюОчиститьКорзину.Видимость = Ложь;
	КонецЕсли;
	
	Если НетУчетныхЗаписей Тогда
		ОтборДинамическогоСписка = СписокПисем.КомпоновщикНастроек.Настройки.Отбор;
		УчетнаяЗаписьОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(ОтборДинамическогоСписка.Элементы,"УчетнаяЗапись");
		УчетнаяЗаписьОтбор.ПравоеЗначение =  ПустаяУчетнаяЗапись;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда 
		УчетнаяЗаписьОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(СписокПисем.Отбор.Элементы,"УчетнаяЗапись");
		Если ЗначениеЗаполнено(УчетнаяЗаписьОтбор) Тогда
			УчетнаяЗаписьОтбор.ПравоеЗначение =  ПустаяУчетнаяЗапись;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьВыбранная = ТекущиеДанные.УчетнаяЗапись;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	ОтборДинамическогоСписка = СписокПисем.КомпоновщикНастроек.Настройки.Отбор;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокПисем.Отбор, "Папка");
	
	Если Родитель = Неопределено Тогда
		УчетнаяЗаписьОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(ОтборДинамическогоСписка.Элементы,"УчетнаяЗапись");
		УчетнаяЗаписьОтбор.ПравоеЗначение =  ТекущиеДанные.УчетнаяЗапись;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "Папка",ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка"),ВидСравненияКомпоновкиДанных.НеРавно,,Истина,,); 
	Иначе
		УчетнаяЗаписьОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(ОтборДинамическогоСписка.Элементы,"УчетнаяЗапись");
		УчетнаяЗаписьОтбор.ПравоеЗначение =  ТекущиеДанные.УчетнаяЗапись;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "Папка",ТекущиеДанные.Папка,,,Истина,,);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "СкрытьИзСписка",Ложь,,,Истина,,);
	
	Если ИспользоватьЗаявки Тогда
		Элементы.СписокПисемДокументCRM_ЗаявкаСоздатьНаОсновании.Доступность = НЕ CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьВыбранная, "CRM_ИсточникЛидов");
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура АвтоустановкаРассмотренностиПисьма()
	Если Элементы.СписокПисем.ТекущаяСтрока <> Неопределено И ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено 
		И ТекущиеДанные.Тип = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		И Не ТекущиеДанные.Рассмотрено Тогда
			ВыделенныеПисьма = Новый Массив;
			ВыделенныеПисьма.Добавить(ТекущиеДанные.Ссылка);
			Если Элементы.СписокПисемНеПрочитанные.Пометка Тогда
				СписокНеПрочитанные.Добавить(ТекущиеДанные.Ссылка);
				ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокПисем.Отбор,, "Непрочитанные")[0];
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ссылка", СписокНеПрочитанные, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
			КонецЕсли;
			УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, Истина);
			ПроверитьНапоминанияОВходящихПисьмах(ВыделенныеПисьма);
			ОбновитьКоличествоНовыхПисемВПапках();
			Элементы.СписокПисем.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры// АвтоустановкаРассмотренностиПисьма()

&НаКлиенте
Процедура ПолучитьИдентификаторыПапокВДереве(ЭлементыДерева,СоответсвиеПапокИИдентификаторов)
	
	Для Каждого папка Из ЭлементыДерева Цикл
		
		СоответсвиеПапокИИдентификаторов.Вставить(папка.Папка,Папка.ПолучитьИдентификатор());
		ПолучитьИдентификаторыПапокВДереве(папка.ПолучитьЭлементы(),СоответсвиеПапокИИдентификаторов);
		
	КонецЦикла;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьКоличествоНовыхПисемВПапках()
	
	СоответсвиеПапокИИдентификаторов = Новый Соответствие;
	ДеревоПапок = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	Для Каждого УчетнаяЗапись Из ДеревоПапок Цикл
		ПолучитьИдентификаторыПапокВДереве(УчетнаяЗапись.ПолучитьЭлементы(), СоответсвиеПапокИИдентификаторов);
	КонецЦикла;
	
	МассивНовыеПисьма = ПолучитьКоличествоНовыхПисемВПапках(УчетныеЗаписи, СоответсвиеПапокИИдентификаторов);
	
	Для Каждого НовыеПисьмаВПапке Из  МассивНовыеПисьма Цикл
		
		ЭлементДерева = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(НовыеПисьмаВПапке.Идентификатор);
		ЭлементДерева.НепрочитанныхПисем =  НовыеПисьмаВПапке.НепрочитанныхПисем;
		ЭлементДерева.Наименование = ?(НовыеПисьмаВПапке.НепрочитанныхПисем = 0,ЭлементДерева.ПапкаНаименование,ЭлементДерева.ПапкаНаименование + "(" + Строка(НовыеПисьмаВПапке.НепрочитанныхПисем) + ")");
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(МассивФайловИлиФайл, УчетнаяЗаписьЭлектронногоПисьма = Неопределено)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	МассивФайловДляОбработки = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		МассивФайловДляОбработки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если МассивФайловДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭлектронногоПисьма) Тогда
		УчетнаяЗаписьЭлектронногоПисьма = УчетнаяЗаписьВыбранная;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	
	СписокВложений = Новый СписокЗначений();
	
	Для Каждого Файл Из МассивФайловДляОбработки Цикл
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			// это файл
			СписокВложений.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), УникальныйИдентификатор), Файл.Имя);
			
		Иначе
			// Это элемент справочника *ПрисоединенныеФайлы.
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОткрытия.Вставить("Вложения", СписокВложений);
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", УчетнаяЗаписьЭлектронногоПисьма);
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И ЗначениеПеретаскивания[0].ЭтоФайл())
		Или КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания))
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания[0]))) Тогда
		//
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДанныеФормыЭлементДерева") Тогда
		бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		Попытка
			Если КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания.Ссылка)) Тогда
				бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Истина;
			КонецЕсли;
		Исключение
			бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		КонецПопытки;
		Возврат бПеретаскиваетсяПрисоединенныйФайлСВерсионированием;
		
	Иначе
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНапоминанияОВходящихПисьмах(МассивПисем)
	
	ОбновитьНапоминанияОВходящихПисьмах = Ложь;
	
	Для Каждого Письмо Из МассивПисем Цикл
		
		ОбновитьНапоминанияОВходящихПисьмах = ОбновитьНапоминанияОВходящихПисьмах ИЛИ CRM_НапоминанияСервер.CRM_ПроверитьНапоминанияОПисьме(Письмо);
		
	КонецЦикла;
	
	Если ОбновитьНапоминанияОВходящихПисьмах Тогда
				
		Оповестить("ОбновитьНапоминания", Новый Структура("ОбновитьНапоминанияОВходящихПисьмах", Истина));
				
	КонецЕсли;
	
КонецПроцедуры//  ПроверитьНапоминанияОВходящихПисьмах(МассивПисем)

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивПисем(Папка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Папка", Папка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	CRM_НепрочитанныеЭлектронныеПисьма.Письмо КАК Письмо
	               |ИЗ
	               |	РегистрСведений.CRM_НепрочитанныеЭлектронныеПисьма КАК CRM_НепрочитанныеЭлектронныеПисьма
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |		ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = &Папка
	               |			И CRM_НепрочитанныеЭлектронныеПисьма.Письмо = ПредметыПапкиВзаимодействий.Взаимодействие";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Письмо");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокУчетныхЗаписей(УчетныеЗаписи, ЕстьИсточникиЛидов)
	
	// Получение доступных учетных записей.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписи.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписи.CRM_ИсточникЛидов КАК CRM_ИсточникЛидов
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК НастройкиУчетныхЗаписей
	|		ПО (НастройкиУчетныхЗаписей.УчетнаяЗапись = УчетныеЗаписи.Ссылка)
	|ГДЕ
	|	НастройкиУчетныхЗаписей.Пользователь В(&Пользователь)
	|	И НЕ УчетныеЗаписи.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УчетныеЗаписи.Ссылка,
	|	УчетныеЗаписи.CRM_ИсточникЛидов
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|ГДЕ
	|	УчетныеЗаписи.CRM_ЭтоОбщаяУчетнаяЗапись";

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиПользователя.Добавить(ТекущийПользователь);
	Запрос.УстановитьПараметр("Пользователь", РолиПользователя);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ЕстьИсточникиЛидов = Ложь;
	УчетныеЗаписи.Очистить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УчетныеЗаписи.Добавить(ВыборкаДетальныеЗаписи.УчетнаяЗапись);
		Если ВыборкаДетальныеЗаписи.CRM_ИсточникЛидов Тогда
			ЕстьИсточникиЛидов = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоНовыхПисемВПапках(УчетныеЗаписи, СоответсвиеПапокИИдентификаторов) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписи);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец КАК Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид КАК Вид,
		|	СУММА(ВЫБОР
		|			КОГДА CRM_НепрочитанныеЭлектронныеПисьма.Письмо ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК НепрочитанныхПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НепрочитанныеЭлектронныеПисьма КАК CRM_НепрочитанныеЭлектронныеПисьма
		|			ПО ПредметыПапкиВзаимодействий.Взаимодействие = CRM_НепрочитанныеЭлектронныеПисьма.Письмо
		|		ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец В(&УчетныеЗаписи)
		|	И ПапкиЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	Владелец,
		|	Ссылка ИЕРАРХИЯ";
		
	МассивРезультатов	= Новый Массив;
	МассивСсылок		= Новый Массив;
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтруктураРезультат = Новый Структура("Ссылка,НепрочитанныхПисем,Идентификатор");
		ЗаполнитьЗначенияСвойств(СтруктураРезультат,ВыборкаДетальныеЗаписи);
		СтруктураРезультат.Идентификатор = СоответсвиеПапокИИдентификаторов.Получить(ВыборкаДетальныеЗаписи.Ссылка);
		Если (СтруктураРезультат.Идентификатор = Неопределено) 
			ИЛИ НЕ (МассивСсылок.Найти(СтруктураРезультат.Ссылка) = Неопределено) Тогда Продолжить; КонецЕсли;
		МассивСсылок.Добавить(СтруктураРезультат.Ссылка);
		МассивРезультатов.Добавить(СтруктураРезультат);
		
	КонецЦикла;

	Возврат МассивРезультатов;	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПеренестиПисьмаВПапку(Письма, Папка)
	
	Если Папка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные Тогда
		Для Каждого Письмо Из Письма Цикл
			ПисьмоОбъект = Письмо.ПолучитьОбъект();
			ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	Иначе
		Взаимодействия.УстановитьПапкуДляМассиваПисем(Письма, Папка);
	КонецЕсли;
	
КонецПроцедуры
  
&НаСервереБезКонтекста
Функция ПолучитьСсылкуНовогоДокумента()
	
	НоваяСсылка = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку();
	
	Возврат НоваяСсылка;
	
КонецФункции

&НаСервере
// Функция загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя);
КонецФункции // ХранилищеОбщихНастроекЗагрузить()

&НаСервере
// Процедура сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить().
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры // ХранилищеОбщихНастроекСохранить()

&НаСервере
Функция ПолучитьТекущуюУЗ()

	мТекСтр = Элементы.ПанельУправления.ТекущаяСтрока;
	ЭлементДерева = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(мТекСтр);
	Если ЭлементДерева <> Неопределено Тогда
	
		ПараметрыФормы = Новый Структура("Ключ",ЭлементДерева.УчетнаяЗапись);
	Иначе
		ПустаяСсылка = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		ПараметрыФормы = Новый Структура("Ключ",ПустаяСсылка);
	
	КонецЕсли; 
	
	Возврат ПараметрыФормы;
КонецФункции // ПолучитьСсылкуВыделеннойУЗ()

&НаСервере
Процедура ДобавитьСтрокуВДеревоПапок(Дерево,знач ВыборкаДетальныеЗаписи)
	
	ВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"Ссылка");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = Дерево.Строки.Добавить();
		ПапкаНаименование = ВыборкаДетальныеЗаписи.Ссылка.Наименование;
		НоваяСтрока.Наименование	= ?(ВыборкаДетальныеЗаписи.НепрочитанныхПисем>0,ПапкаНаименование+"("+Строка(ВыборкаДетальныеЗаписи.НепрочитанныхПисем)+")",ПапкаНаименование);
		НоваяСтрока.УчетнаяЗапись	= ВыборкаДетальныеЗаписи.Владелец;
		НоваяСтрока.Папка = ВыборкаДетальныеЗаписи.Ссылка;
		НоваяСтрока.ВидПапки = ВыборкаДетальныеЗаписи.Вид;
		НоваяСтрока.ПапкаНаименование =  ПапкаНаименование;
		НоваяСтрока.НепрочитанныхПисем         = ВыборкаДетальныеЗаписи.НепрочитанныхПисем;
		
		Если  ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие Тогда
			НоваяСтрока.Картинка		= 0;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие Тогда
			НоваяСтрока.Картинка		= 1;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные Тогда
			НоваяСтрока.Картинка		= 2;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики Тогда
			НоваяСтрока.Картинка		= 3;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные Тогда
			НоваяСтрока.Картинка		= 4;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные Тогда
			НоваяСтрока.Картинка		= 6;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта Тогда
			НоваяСтрока.Картинка		= 7;
		Иначе
			НоваяСтрока.Картинка		= 8;
	    КонецЕсли;
	
		ДобавитьСтрокуВДеревоПапок(НоваяСтрока,ВыборкаДетальныеЗаписи);
		// Вставить обработку выборки ВыборкаДетальныеЗаписи.
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере
Функция УбратьОшибкиИтоговПоИерархии(Строки, Поле="Папка", Родитель=Неопределено)
    // Убираем все элементы, равные текущему.
    Всего=Строки.Количество();
    Для Инд=1 По Всего Цикл
        Стр=Строки[Всего-Инд];
        Зн=Стр[Поле];
        Если Родитель<>Неопределено И Зн=Родитель Тогда
            Строки.Удалить(Стр);
        Иначе
            УбратьОшибкиИтоговПоИерархии(Стр.Строки, Поле, Зн);
        КонецЕсли;
    КонецЦикла;
КонецФункции

&НаСервере
Функция СоздатьПисьмо(УчетнаяЗаписьСсылка) 
	
	Результат = "";
	
	Если НЕ УчетнаяЗаписьСсылка.ИспользоватьДляОтправки Тогда
		Результат = НСтр("ru='Учетная запись не предназначена для отправки писем';en='Login account is not intended for sending of letters'");
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьНаВозможностьОтправкиПисьма(УчетнаяЗаписьСсылка) 
	
	Если НЕ УчетнаяЗаписьСсылка.ИспользоватьДляОтправки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПустоеОписание()
	Возврат
	"<html>
	|<head>  
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<body scroll=""auto"">
	|</body>
	|</html>";
КонецФункции

&НаСервере
Функция СформироватьОписаниеТекущегоПисьма(ПисьмоСсылка)
	
	СтруктураОписания = Новый Структура;
	
	// Проверим доступность письма по RLS.
	Попытка
		СсылкаДоступна = ПисьмоСсылка.Дата;
	Исключение
	    // письмо не доступно
		
		Начало = "
		|<html>
		|<head>  
		|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
		|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
		|<body scroll=""auto"">";
		
		Описание = НСтр("ru='Письмо не доступно данному пользователю из-за ограничения прав доступа!';en='A letter is not available to this user because of restricted access rights!'");
		
		Конец = "
		|</body>
		|</html>";
		
		Текст = Начало + Описание + Конец;
		
		СтруктураОписания.Вставить("Тело", Текст);
		СтруктураОписания.Вставить("От",   "");
		СтруктураОписания.Вставить("Кому", "");
		СтруктураОписания.Вставить("Тема", "");
		
		Возврат СтруктураОписания;
		
	КонецПопытки;
	
	Если ПисьмоСсылка = Неопределено Или ТипЗнч(ПисьмоСсылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(ПисьмоСсылка);
	ЭтоПисьмоРассылки = (ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
						И ЗначениеЗаполнено(Предмет)
						И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
	
	Если ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		ДокументHTML	= Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ПисьмоСсылка.Текст);
		Текст			= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	Иначе
		Текст = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(ПисьмоСсылка, УникальныйИдентификатор,ЭтоПисьмоРассылки);
	КонецЕсли;
	
	Если ЭтоПисьмоРассылки И НЕ ПисьмоСсылка.CRM_РазрешеноРедактирование Тогда
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Предмет);
	Иначе
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПисьмоСсылка);
	КонецЕсли;
	
	Вложения.Очистить();
	Для Каждого Стр Из табВложения Цикл
		НовСтр 										= Вложения.Добавить();
		НовСтр.Ссылка         						= Стр.Ссылка;
		НовСтр.ИмяФайла       						= Стр.ИмяФайла;
		НовСтр.ИндексКартинки 						= Стр.ИндексКартинки;
		НовСтр.Размер        						= Стр.Размер;
		РазмерВложения								= Цел(Стр.Размер/1024);
		НовСтр.РазмерСтрокой   						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(Стр.Размер) + " байт");
		НовСтр.Расположение  						= 0;
		// НовСтр.ИДФайлаЭлектронногоПисьмаОтбор	= Стр.ИДФайлаЭлектронногоПисьмаОтбор;
		НовСтр.ИДФайлаЭлектронногоПисьмаОтбор = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		НовСтр.ИДФайлаЭлектронногоПисьма = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
	КонецЦикла;
	
	Если ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Для Каждого УдаленноеВложение Из ПисьмоСсылка.НепринятыеВложения Цикл
			НовоеВложение = Вложения.Добавить();
			НовоеВложение.ИмяФайла = УдаленноеВложение.ИмяВложение;
			НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(".msg") + 1;
			НовоеВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			НовоеВложение.ИДФайлаЭлектронногоПисьма = "#";
		КонецЦикла;
	КонецЕсли;
	
	Вложения.Сортировать("ИДФайлаЭлектронногоПисьмаОтбор");
	
	Описание = "";
	//
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ПисьмоСсылка));
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОписания.Вставить("Тело", Текст);
	СтруктураОписания.Вставить("От", ПисьмоСсылка.ОтправительПредставление);
	СтруктураОписания.Вставить("Кому", ПисьмоСсылка.СписокПолучателейПисьма);
	СтруктураОписания.Вставить("Тема", ПисьмоСсылка.Тема);
	
	Возврат СтруктураОписания;
	
КонецФункции

#Область ОбработчикиСобытийФормы

&НаКлиенте
Функция ДеревоНайтиСтрокуПоСвойству(Дерево,СтруктураОтбора)
	
	НомерСтроки = Неопределено;
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для каждого Элемент Из ЭлементыДерева Цикл
		
		Для каждого Отбор Из СтруктураОтбора Цикл
			ЗначениеСвойстваДерева = Неопределено;
			Найдено = Элемент.Свойство(Отбор.Ключ,ЗначениеСвойстваДерева);
			НомерСтроки = Элемент.ПолучитьИдентификатор();
			Если Найдено И ЗначениеСвойстваДерева = Отбор.Значение Тогда
				Возврат НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		НомерСтроки = ДеревоНайтиСтрокуПоСвойству(Элемент,СтруктураОтбора);
		Если НомерСтроки <> Неопределено Тогда
			Возврат НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомерСтроки;
КонецФункции

&НаСервереБезКонтекста
Функция СправочникНайтиПоНаименованию(ИмяСправочника, Наименование, Владелец = Неопределено)
	Ссылка = Неопределено;
	Попытка
		Ссылка = Справочники[ИмяСправочника].НайтиПоНаименованию(Наименование,,,Владелец);
	Исключение КонецПопытки;
	Возврат Ссылка;
КонецФункции 
 
&НаСервере
Процедура УстановитьУО()

	Запрос = Новый Запрос;
	
	Запрос.Текст =	"ВЫБРАТЬ
					|	CRM_Теги.Ссылка,
					|	CRM_Теги.Цвет.ЦветКрасный КАК Красный,
					|	CRM_Теги.Цвет.ЦветЗеленый КАК Зеленый,
					|	CRM_Теги.Цвет.ЦветСиний КАК Синий
					|ИЗ
					|	Справочник.CRM_Теги КАК CRM_Теги"; 
					
	Выборка = Запрос.Выполнить().Выбрать();				
					
	Пока Выборка.Следующий() Цикл
	
		ЭлементОформления1 = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления1.Использование = Истина;
		
		ЭлементОтбораТег1 = ЭлементОформления1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбораТег1.Использование = Истина;		
        ЭлементОтбораТег1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПисем.Тег1");
        ЭлементОтбораТег1.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
        ЭлементОтбораТег1.ПравоеЗначение = Выборка.Ссылка;
		
		Элемент1 = ЭлементОформления1.Оформление.Элементы[0];
		
		ЦветТега = Новый Цвет(Выборка.Красный, Выборка.Зеленый, Выборка.Синий);

		ЭлементОформления1.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветТега);
		Элемент1.Использование = Истина;
		
		ПолеОформления1 = ЭлементОформления1.Поля.Элементы.Добавить();
		ПолеОформления1.Поле = Новый ПолеКомпоновкиДанных("СписокПисемТег1");
		ПолеОформления1.Использование = Истина;		
		
		ЭлементОформления2 = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбораТег2 = ЭлементОформления2.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбораТег2.Использование = Истина;		
        ЭлементОтбораТег2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПисем.Тег2");
        ЭлементОтбораТег2.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
        ЭлементОтбораТег2.ПравоеЗначение = Выборка.Ссылка;
		
		Элемент2 = ЭлементОформления2.Оформление.Элементы[0];
		
		ЦветТега = Новый Цвет(Выборка.Красный, Выборка.Зеленый, Выборка.Синий);

		ЭлементОформления2.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветТега);
		Элемент2.Использование = Истина;
		
		ПолеОформления2 = ЭлементОформления2.Поля.Элементы.Добавить();
		ПолеОформления2.Поле = Новый ПолеКомпоновкиДанных("СписокПисемТег2");
		ПолеОформления2.Использование = Истина;		
		
		ЭлементОформления3 = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбораТег3 = ЭлементОформления3.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбораТег3.Использование = Истина;		
        ЭлементОтбораТег3.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПисем.Тег3");
        ЭлементОтбораТег3.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
        ЭлементОтбораТег3.ПравоеЗначение = Выборка.Ссылка;
		
		Элемент3 = ЭлементОформления3.Оформление.Элементы[0];
		
		ЦветТега = Новый Цвет(Выборка.Красный, Выборка.Зеленый, Выборка.Синий);

		ЭлементОформления3.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветТега);
		Элемент3.Использование = Истина;
		
		ПолеОформления3 = ЭлементОформления3.Поля.Элементы.Добавить();
		ПолеОформления3.Поле = Новый ПолеКомпоновкиДанных("СписокПисемТег3");
		ПолеОформления3.Использование = Истина;		
			
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоУчетныхЗаписей()
	// заполнение дерева папок
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец КАК Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид КАК Вид,
		|	СУММА(ВЫБОР
		|			КОГДА CRM_НепрочитанныеЭлектронныеПисьма.Письмо ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК НепрочитанныхПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НепрочитанныеЭлектронныеПисьма КАК CRM_НепрочитанныеЭлектронныеПисьма
		|			ПО ПредметыПапкиВзаимодействий.Взаимодействие = CRM_НепрочитанныеЭлектронныеПисьма.Письмо
		|		ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец В(&УчетныеЗаписи)
		|	И ПапкиЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПапкиЭлектронныхПисем.Владелец.Наименование,
		|	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	Владелец,
		|	Ссылка ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписи);

	Результат = Запрос.Выполнить();
	
	Дерево = РеквизитФормыВЗначение("ДеревоУчетныхЗаписей");
	Дерево.Строки.Очистить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаУЗ = Дерево.Строки.Добавить();
		СтрокаУЗ.Наименование	= ВыборкаДетальныеЗаписи.Владелец.Наименование;
		СтрокаУЗ.УчетнаяЗапись	= ВыборкаДетальныеЗаписи.Владелец;
		СтрокаУЗ.Картинка		= 7;
		
		ДобавитьСтрокуВДеревоПапок(СтрокаУЗ,ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	// Удалим дубли строк (ошибка платформы).
	УбратьОшибкиИтоговПоИерархии(Дерево.Строки);
	
	ЗначениеВДанныеФормы(Дерево, ДеревоУчетныхЗаписей);
	
	НетУчетныхЗаписей = (Дерево.Строки.Количество() = 0);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

#Область ПроцедурыОбработчикиСобытийОстальныхЭлементовУправленияФормы

&НаКлиенте
Процедура ПанельУправленияПриАктивизацииСтроки(Элемент)
	
	Если ПанельУправленияТекущаяСтрока = Элементы.ПанельУправления.ТекущаяСтрока Тогда
		Возврат;
	Иначе
		ПанельУправленияТекущаяСтрока = Элементы.ПанельУправления.ТекущаяСтрока;
	КонецЕсли;
	
	ТекущееПисьмо = Неопределено;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельУправленияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;    
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") И Не ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	Иначе	
		
		СтрокаНазначение = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
		
		Если НЕ ЗначениеЗаполнено(СтрокаНазначение.Папка) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПеремещениеИзПапкиВходящие(ВходящееЭлектронноеПисьмо)
	
	ИсходнаяПапка = Взаимодействия.ПолучитьПапкуЭлектронногоПисьма(ВходящееЭлектронноеПисьмо);
	
	Если ТипЗнч(ИсходнаяПапка) = Тип("СправочникСсылка.ПапкиЭлектронныхПисем") Тогда
		Возврат ИсходнаяПапка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие И ИсходнаяПапка.Наименование = "Входящие";		
	Иначе		
		Возврат ИсходнаяПапка.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие И ИсходнаяПапка.Наименование = "Входящие";
	КонецЕсли;		
	
КонецФункции // ПеремещениеИзПапкиВходящие(ВходящееЭлектронноеПисьмо)

&НаКлиенте
Процедура ПанельУправленияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ЭтоПеретаскиваетсяФайл = ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение);
	
	Если ЭтоПеретаскиваетсяФайл = Истина Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
		Если Строка <> Неопределено Тогда
			// Создание нового письма с присоедненным файлом.
			СтрокаПеретаскивания = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
			Если СтрокаПеретаскивания <> Неопределено Тогда
				СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение, СтрокаПеретаскивания.УчетнаяЗапись);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) Тогда
			СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение, УчетнаяЗаписьВыбранная);
		КонецЕсли;
		
	ИначеЕсли ЭтоПеретаскиваетсяФайл = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	Иначе
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
			Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") И 
				ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")  Тогда
				Возврат;
			КонецЕсли;
			
			ПапкаНазначения = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
			ТекущийПользовательРазрешенаЗапись = CRM_УправлениеЭлектроннойПочтой.ТекущийПользовательПолучитьПравоУчетнойЗаписи(ПапкаНазначения.УчетнаяЗапись, "Запись");
			Если ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие") или ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные") Тогда
				Возврат;
			ИначеЕсли ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики") Тогда
				Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущийПользовательРазрешенаЗапись Тогда
				
				УчетнаяЗаписьПисьма = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ПараметрыПеретаскивания.Значение[0], "УчетнаяЗапись");
				Если УчетнаяЗаписьПисьма<>ПапкаНазначения.УчетнаяЗапись Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Перетаскивать письма можно только в рамках одной учетной записи!';en='You can only drag and drop emails within the same account!'"));
					Возврат;
				КонецЕсли;
				
				ПеремещаютсяВходящиеПисьма = Ложь;
				
				Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
					
					ПеремещаютсяВходящиеПисьма = ПеремещениеИзПапкиВходящие(ПараметрыПеретаскивания.Значение[0]);
					
				КонецЕсли;				
				
				ПараметрыОбработкиПеремещения = Новый Структура;
				ПараметрыОбработкиПеремещения.Вставить("МассивСсылок", ПараметрыПеретаскивания.Значение);
				ПараметрыОбработкиПеремещения.Вставить("Папка", ПапкаНазначения.Папка);
				ПараметрыОбработкиПеремещения.Вставить("ПеремещаютсяВходящиеПисьма", ПеремещаютсяВходящиеПисьма);
				Если ПеремещаютсяВходящиеПисьма И ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Обработанные") И СсылкаЯвляетсяЛидом(ПараметрыПеретаскивания.Значение[0]) Тогда
					Если СсылкаЯвляетсяЛидом(ПараметрыПеретаскивания.Значение[0], Истина) Тогда
						ОписаниеОповещения = Новый ОписаниеОповещения("ПанельУправленияПеретаскиваниеЗавершение", ЭтотОбъект, ПараметрыОбработкиПеремещения);
						ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Иначе	
						ПанельУправленияПеретаскиваниеЗавершение(Истина, ПараметрыОбработкиПеремещения);
					КонецЕсли;
				Иначе
					ПанельУправленияПеретаскиваниеЗавершение(Ложь, ПараметрыОбработкиПеремещения);
				КонецЕсли;
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для работы с письмами данной учетной записи!
				|Для текущего пользователя должно быть установлено право ""Отправка""'"));
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельУправленияПеретаскиваниеЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		ОтклонитьОбращениеНаСервере(ДопПараметры.МассивСсылок, Результат.ПричинаОтказа, Результат.Комментарий);
	ИначеЕсли Результат Тогда 
		ОтклонитьОбращениеНаСервере(ДопПараметры.МассивСсылок, Неопределено, "");
	КонецЕсли;
	
	ПеренестиПисьмаВПапку(ДопПараметры.МассивСсылок,ДопПараметры.Папка);
	
	Если ДопПараметры.ПеремещаютсяВходящиеПисьма Тогда
		
		ПроверитьНапоминанияОВходящихПисьмах(ДопПараметры.МассивСсылок);
		
	КонецЕсли; 
	
	Элементы.СписокПисем.Обновить();
	ОбновитьКоличествоНовыхПисемВПапках();
КонецПроцедуры

&НаСервере
Процедура ОтклонитьОбращениеНаСервере(МассивСсылок, ПричинаОтказа, Комментарий)
	Для каждого Ссылка из МассивСсылок Цикл
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка, Справочники.CRM_СостоянияЛидов.Отклонен,, ПричинаОтказа, Комментарий);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СсылкаЯвляетсяЛидом(Ссылка, УказыватьПричину = Ложь)
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Ссылка) 
		И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, УказыватьПричину);
КонецФункции

&НаСервере
Процедура УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, УстановитьПометку = Ложь)
	
	CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, УстановитьПометку);
	
КонецПроцедуры	



&НаКлиенте
Процедура ОткрытьТекущееВложение()
	
	ТекущиеДанныеПисьма = Элементы.СписокПисем.ТекущиеДанные;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
		ПараметрыВложения = ВзаимодействияКлиент.ПустаяСтруктураПараметровПисьмаВложения();
		ПараметрыВложения.ДатаПисьмаОснования = ТекущиеДанныеПисьма.Дата;
		ПараметрыВложения.ПисьмоОснование     = ТекущиеДанныеПисьма.Ссылка;
		ПараметрыВложения.ТемаПисьмаОснования = ТекущиеДанныеПисьма.Тема;
		ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыВложения, ЭтотОбъект);
		
	Иначе
		
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьТекущееВложение()

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьТекущееВложение();
	
КонецПроцедуры

 &НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	НетВложений = (Элементы.Вложения.ТекущиеДанные = Неопределено);
	Элементы.КонтекстноеМенюВложенияОткрыть.Доступность			= НЕ НетВложений;
	Элементы.КонтекстноеМенюВложенияСохранить.Доступность		= НЕ НетВложений;
	Элементы.КонтекстноеМенюВложенияСохранитьВсе.Доступность	= НЕ НетВложений;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(Команда)
	ОткрытьТекущееВложение();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложение()
	// +CRM
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(текДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
	ИначеЕсли текДанные.Расположение = 4 Тогда
		ФайлВложения = Новый Файл(текДанные.ИмяФайла);
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение, Прав(ФайлВложения.Расширение, СтрДлина(ФайлВложения.Расширение)-1));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(,НСтр("ru='Это вложение не может быть сохранено.';en='This enclosure could not be saved.'"));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		СтруктураДанных = Новый Структура("РасширениеВложения, текДанные", РасширениеВложения, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);	
	КонецЕсли;
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеВложения = ДополнительныеПараметры.РасширениеВложения;
	текДанные = ДополнительныеПараметры.текДанные;
		
	Если Подключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = текДанные.ИмяФайла;
		ВыборФайла.Расширение = РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Все файлы (*.%1)|*.%1';en='All files (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
		СтруктураДанных = Новый Структура("ВыборФайла, текДанные", ВыборФайла, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеВыборФайла", ЭтотОбъект, СтруктураДанных);
		ВыборФайла.Показать(ОповещениеНовое);
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры1) Экспорт
	
	ВыборФайла = ДополнительныеПараметры1.ВыборФайла;
	текДанные = ДополнительныеПараметры1.текДанные;
		
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется сохранение файла ""%1"" ...
		|Пожалуйста, подождите.'"), текДанные.ИмяФайла);
		Состояние(ТекстПояснения);
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		ПолученныеФайлы = Новый Массив;
		СтруктураДанных = Новый Структура("ВыборФайла", ВыборФайла);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеПолучитьФайлы", ЭтотОбъект, СтруктураДанных);
		НачатьПолучениеФайлов(ОповещениеНовое,ПолучаемыеФайлы, ВыборФайла, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеПолучитьФайлы(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
		
	Если ПолученныеФайлы.Количество() > 0 Тогда
		Состояние(НСтр("ru='Файл успешно сохранен';en='File successfully saved'"), , ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения(ТолькоВыделенные = Ложь)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если ТолькоВыделенные И (ВыделенныеВложения.Количество() = 1) Тогда
		СохранитьВложение();
		Возврат;
	КонецЕсли;	
	КоличествоВложений = Вложения.Количество();
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда Продолжить; КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				Если РасширениеВложения = "EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Продолжить;
				КонецЕсли;
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда Возврат; КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда Возврат; КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),ДополнительныеПараметры.ПерезаписатьВсе, Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),ДополнительныеПараметры.ПереименоватьВсе, Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		Если ТолькоВыделенные Тогда
			Если ВыделенныеВложения.Найти(ТекущийНомерВложения) = Неопределено Тогда Возврат; КонецЕсли;
		КонецЕсли;	
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 						
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
			// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
			// 
			Если ТекущееВложение.Расположение = 4 Тогда
				ДанныеФайла = ТекущееВложение.ИмяФайлаНаКомпьютере;
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("РазмерФайла", ТекущееВложение.Размер);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);												
			КонецЕсли;	
		Иначе
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			Если РасширениеВложения = "EML" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
				Возврат;
			КонецЕсли;	
			ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);							
		КонецЕсли;
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);				
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 
			Если ТекущееВложение.Расположение = 4 Тогда 
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла",       ТекущееВложение.ИмяФайлаНаКомпьютере);								
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);						
				Возврат;
			Иначе				
				Возврат; 
			КонецЕсли;				
		КонецЕсли;						
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));		
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе		
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения)
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);				
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);		
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб)
	|Пожалуйста, подождите...'"), ИмяФайла, 
	РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);	
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;			
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);	
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку),1,НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru='Файлы успешно сохранены.';en='Files saved successfully.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ТекстВопроса	= НСтр("ru='Файл " + ПараметрыВложения.ПолноеИмяФайла + " уже существует." + Символы.ПС + "Выберите действие для всех существующих файлов:'");
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать';en='Re-record'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать';en='Rename'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена';en='Cancel'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ТолькоВыделенные = ПараметрыВложения.ТолькоВыделенные;
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить(Команда)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если (ВыделенныеВложения.Количество() = 1) Тогда
		СохранитьВложение();
		Возврат;
	КонецЕсли;	
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;		
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеВложениеВыполнить(Команда)
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;	
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения(Ложь);
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьСкрытьПисьмо(Команда)
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка		= НЕ Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
	ПоказатьСкрытьПисьмоПометка					= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
	Если НЕ Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка Тогда
		Элементы.Описание.Видимость							= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
		Элементы.СписокПисемПоказатьСкрытьВложения.Пометка	= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
		ПоказатьСкрытьВложенияПометка				= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;				
		Элементы.Вложения.Видимость							= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;	
	Иначе
		Элементы.ОписаниеПисьмаHTML.Видимость				= Истина;
		Элементы.Описание.Видимость							= ПоказатьСкрытьПисьмоПометка;
	КонецЕсли;
	
	// Элементы.СписокПисемПоказатьСкрытьВложения.Доступность	= ЭтаФорма.ПоказатьСкрытьПисьмоПометка;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВложения(Команда)
	
	Элементы.СписокПисемПоказатьСкрытьВложения.Пометка	= НЕ Элементы.СписокПисемПоказатьСкрытьВложения.Пометка;
	ПоказатьСкрытьВложенияПометка				= Элементы.СписокПисемПоказатьСкрытьВложения.Пометка;
	Элементы.Вложения.Видимость							= ПоказатьСкрытьВложенияПометка;
	Если  Элементы.СписокПисемПоказатьСкрытьВложения.Пометка Тогда
		Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка = Элементы.СписокПисемПоказатьСкрытьВложения.Пометка;	
		ПоказатьСкрытьПисьмоПометка			 = Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
		Элементы.Описание.Видимость						 = ПоказатьСкрытьВложенияПометка;
		Элементы.ОписаниеПисьмаHTML.Видимость			 = Истина;
	ИначеЕсли НЕ Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка Тогда 
		 Элементы.Описание.Видимость					 = ПоказатьСкрытьВложенияПометка;
	КонецЕсли;		
		
	// Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка	= Элементы.СписокПисемПоказатьСкрытьВложения.Пометка;
	// ЭтаФорма.ПоказатьСкрытьПисьмоПометка				= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
	// Элементы.Описание.Видимость							= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьДеревоУчетныхЗаписей(Команда)
	Элементы.ПанельУправления.Видимость = НЕ Элементы.ПанельУправления.Видимость;
	Если Элементы.ПанельУправления.Видимость Тогда
		Элементы.ПоказатьСкрытьДеревоУчетныхЗаписей.Заголовок = НСтр("ru='Скрыть список учетных записей';en='Hide account list'");
	Иначе
		Элементы.ПоказатьСкрытьДеревоУчетныхЗаписей.Заголовок = НСтр("ru='Показать список учетных записей';en='Show Account List'");
	КонецЕсли;
	ХранилищеОбщихНастроекСохранить(ЭтотОбъект.ИмяФормы, "СписокУчетныхЗаписей", Элементы.ПанельУправления.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.СписокПисемВсеВложения.Пометка	= НЕ Элементы.СписокПисемВсеВложения.Пометка;
	ВсеВложенияПометка				= Элементы.СписокПисемВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		// Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	КонецЕсли;
	
	СформироватьПредставлениеВложений(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ПоказатьСкрытьПисьмоПометка"] = Неопределено Тогда
		ПоказатьСкрытьПисьмоПометка	= Настройки["ПоказатьСкрытьПисьмоПометка"];
	Иначе
		ПоказатьСкрытьПисьмоПометка	= Истина;
	КонецЕсли;
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка	= ПоказатьСкрытьПисьмоПометка;
	Элементы.Описание.Видимость							= ПоказатьСкрытьПисьмоПометка;
	
	Если НЕ Настройки["ПоказатьСкрытьВложенияПометка"] = Неопределено Тогда
		ПоказатьСкрытьВложенияПометка	= Настройки["ПоказатьСкрытьВложенияПометка"];
	Иначе
		ПоказатьСкрытьВложенияПометка	= Ложь;
	КонецЕсли;
	
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.СписокПисемВсеВложения.Пометка = ВсеВложенияПометка;
	
	Элементы.СписокПисемПоказатьСкрытьВложения.Пометка	= ПоказатьСкрытьВложенияПометка;
	Элементы.Вложения.Видимость							= ПоказатьСкрытьВложенияПометка;
	Если  ПоказатьСкрытьВложенияПометка Тогда
		Элементы.Описание.Видимость						 = ПоказатьСкрытьВложенияПометка;
		Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка = ПоказатьСкрытьВложенияПометка;
	КонецЕсли;
	
	Если УчетныеЗаписи.Количество() > 0 Тогда
		НайденноеЗначение = УчетныеЗаписи.НайтиПоЗначению(УчетнаяЗаписьВыбранная);
		Если НайденноеЗначение <> Неопределено Тогда
			УчетнаяЗаписьВыбранная = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
			НайденноеЗначение = УчетныеЗаписи.НайтиПоЗначению(УчетнаяЗаписьВыбранная);
			Если НайденноеЗначение = Неопределено Тогда
				УчетнаяЗаписьВыбранная = УчетныеЗаписи[0];
			КонецЕсли;
		КонецЕсли;
	Иначе
		УчетнаяЗаписьВыбранная = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ Настройки["ХранениеШириныКолонокРежимов"] = Неопределено ИЛИ Настройки["ХранениеШириныКолонокРежимов"] = Неопределено Тогда
		ХранениеШириныКолонокРежимов	= Новый Структура;
	Иначе
		ХранениеШириныКолонокРежимов	= Настройки["ХранениеШириныКолонокРежимов"];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущееПисьмо, Элемент.Документ);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИИсправлениеВходящихПисем(Команда)
	
	ОткрытьФорму("Обработка.CRM_ПроверкаВходящихПисем.Форма", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПапкуВходящиеУчетнойЗаписи(УчетнаяЗаписьПапки, ВидПапки = Неопределено) Экспорт
	
	УчетнаяЗаписьВыбранная = УчетнаяЗаписьПапки;
	
	Если ВидПапки = Неопределено ИЛИ ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие") Тогда
		НаименованиеПапки = "Входящие";
	ИначеЕсли ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики") Тогда
		НаименованиеПапки = "Черновики";
	КонецЕсли;
	
	Ссылка = СправочникНайтиПоНаименованию("CRM_ПапкиЭлектронныхПисем",НаименованиеПапки, УчетнаяЗаписьВыбранная);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СтруктураОтбора = Новый Структура("Папка",Ссылка);
		НомерСтроки = ДеревоНайтиСтрокуПоСвойству(ДеревоУчетныхЗаписей, СтруктураОтбора);
		Элементы.ПанельУправления.ТекущаяСтрока = НомерСтроки;
	ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) Тогда
		Элементы.ПанельУправления.ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ТекСтрока = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ПараметрыФормы.Вставить("УчетнаяЗапись", ТекСтрока.УчетнаяЗапись);
		ПараметрыФормы.Вставить("ПапкаПочты", ТекСтрока.Папка);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось определить учетную запись почты");
		Возврат;
	КонецЕсли; 
	
	ВладелецФормыПодбора = Элементы.СписокПисем;
	
	РезультатВыбора = ПредопределенноеЗначение("Документ.ЭлектронноеПисьмоВходящее.ПустаяСсылка");

	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.ФормаПоиска", ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("СпозиционироватьсяНаПисьме", ЭтотОбъект, Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаПисьме(РезультатВыбора = Неопределено, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(РезультатВыбора)
		И ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		Если Элементы.ПанельУправления.ТекущиеДанные = Неопределено
			Или Элементы.ПанельУправления.ТекущиеДанные.Папка <> РезультатВыбора.Папка Тогда
			Элементы.ПанельУправления.ТекущаяСтрока = ПолучитьИдентификаторПапки(ДеревоУчетныхЗаписей, РезультатВыбора.Папка);
			ПанельУправленияТекущаяСтрока = Элементы.ПанельУправления.ТекущаяСтрока;
		КонецЕсли;		
		ТекущееПисьмо = Неопределено;		
		ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки();
		Элементы.СписокПисем.ТекущаяСтрока = РезультатВыбора.Ссылка;
		СписокПисемПриАктивизацииСтроки(Элементы.СписокПисем);
	КонецЕсли; 		

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторПапки(СтрокаДерева, Папка)

	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Подстрока Из СтрокиДерева Цикл
		Если Подстрока.Папка = Папка Тогда
		
			Возврат Подстрока.ПолучитьИдентификатор();
		Иначе
			ИД = ПолучитьИдентификаторПапки(Подстрока, Папка);
			Если ЗначениеЗаполнено(ИД) Тогда
			
				Возврат ИД;
			
			КонецЕсли; 
		
		КонецЕсли; 
		
	
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ПолучитьИдентификаторПапки()

&НаКлиенте
Процедура Прочитанные(Команда)
	
	Элементы.СписокПисемНеПрочитанные.Пометка = НЕ Элементы.СписокПисемНеПрочитанные.Пометка;
	
	Если Элементы.СписокПисемНеПрочитанные.Пометка Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокПисем.Отбор.Элементы, "Непрочитанные", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Рассмотрено", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	Иначе
		СписокНеПрочитанные.Очистить();
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокПисем,, "Непрочитанные");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОчиститьКорзинуНаСервере()
	
	ТекущиеДанные = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Элементы.ПанельУправления.ТекущаяСтрока);
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если ТекущиеДанные.Папка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные или ТекущиеДанные.Папка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта Тогда
		ПапкаУдаленные = ТекущиеДанные.Папка;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец",ТекущиеДанные.УчетнаяЗапись);
		Запрос.УстановитьПараметр("CRM_Вид",Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные);
		Запрос.УстановитьПараметр("Родитель",Справочники.ПапкиЭлектронныхПисем.ПустаяСсылка());
		Запрос.Текст = "ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец = &Владелец
		|	И ПапкиЭлектронныхПисем.CRM_Вид = &CRM_Вид
		|	И ПапкиЭлектронныхПисем.Родитель = &Родитель
		|	И НЕ ПапкиЭлектронныхПисем.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПапкаУдаленные = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("УчетнаяЗапись", ТекущиеДанные.УчетнаяЗапись);
	ПараметрыВыгрузки.Вставить("Папка", ПапкаУдаленные);
	
	НаименованиеЗадания = НСтр("ru='Очистка папки удаленные';en='Clearing deleted folders'") + " ";
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.CRM_МенеджерПочты.ОчиститьПапку", 
		ПараметрыВыгрузки,
		НаименованиеЗадания);
		
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПочтуНаСервере(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки, СписокПолученныхПисем, УчетнаяЗаписьОтбор)
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("УчетнаяЗаписьОтбор", УчетнаяЗаписьОтбор);
	
	НаименованиеЗадания = НСтр("ru='Получение почты';en='Obtaining of mail'") + " ";
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.CRM_МенеджерПочты.ЗагрузитьПочтуПользователя", 
		ПараметрыВыгрузки,
		НаименованиеЗадания);
		
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции	

&НаСервере
Процедура ЗагрузитьРезультат()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Строка")
		И ЗначениеЗаполнено(Результат) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				Элементы.СписокПисем.Обновить();
				// Оповестить("ПримененыПравилаОбработкиПисем");
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПоучениеПочты()
	
	Попытка
		// Если ФормаДлительнойОперации.Открыта() 
		//	И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				Элементы.СписокПисем.Обновить();
				ПоказатьОповещениеПользователя(,,НСтр("ru='Почта получена ...';en='Mail received ...'"));
				// Оповестить("ПримененыПравилаОбработкиПисем");
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗаданияПоучениеПочты", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		// КонецЕсли;
	Исключение
		//// ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ОповещениеВопросОчиститьКорзину = Новый ОписаниеОповещения("ОбработкаОчисткиКорзины", ЭтотОбъект);
	Если ТекущиеДанные.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") Тогда
		ТекстВопроса = НСтр("ru = 'Очистить папку ""Удаленные"" ?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Очистить папку ""Нежелательная почта"" ?'");
	КонецЕсли;
	ПоказатьВопрос(ОповещениеВопросОчиститьКорзину, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки ответа на вопрос - отменить все запланированные взаимодействия.
//
// Параметры:
// Параметры - КодВозвратаДиалога
// дополнительно - неопределно, не передаем.
Процедура ОбработкаОчисткиКорзины(Параметры, Дополнительно) Экспорт
	
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Результат = ОчиститьКорзинуНаСервере();
		
		Если НЕ Результат.ЗаданиеВыполнено Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			АдресХранилища       = Результат.АдресХранилища;
			
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
			
		Иначе
			Элементы.СписокПисем.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	Элементы.ГруппаДерево.Видимость = НЕ Элементы.ГруппаДерево.Видимость;
//	Элементы.ГруппаПанельУправления.Видимость = НЕ Элементы.ГруппаДерево.Видимость;
	Если Элементы.ГруппаДерево.Видимость Тогда
		Элементы.ДеревоУчетныхЗаписей.Ширина = 0;
		Элементы.ДеревоУчетныхЗаписей.РастягиватьПоГоризонтали = Истина;
		Элементы.ДекорацияРазвернутьОтборы.Подсказка = НСтр("ru = Скрыть список учетных записей'");
	Иначе
		Элементы.ДеревоУчетныхЗаписей.Ширина = 1;
		Элементы.ДеревоУчетныхЗаписей.РастягиватьПоГоризонтали = Ложь;
		Элементы.ДекорацияРазвернутьОтборы.Подсказка = НСтр("ru = Показать список учетных записей'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений(ИзмененОтбор = Ложь)
	
	Если ИзмененОтбор Тогда
		ВложенияПредставление = "";
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			Элементы.Вложения.Видимость = Ложь;
			Элементы.ВложенияПредставление.Видимость = Ложь;

		Иначе
			Если Элементы.Вложения.Видимость Тогда
				ВложенияПредставление	= НСтр("ru='свернуть вложения';en='to contract enclosures'");
				Элементы.ВложенияПредставление.Видимость = Ложь;
			Иначе
				ВложенияПредставление = Сред(ВложенияПредставление, 3);
				Элементы.ВложенияПредставление.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.Вложения.Видимость Тогда
		ВложенияПредставление	= НСтр("ru='свернуть вложения';en='to contract enclosures'");
		Элементы.ВложенияПредставление.Видимость = Ложь;
	Иначе	
		ВложенияПредставление = "";
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			ВложенияПредставление = "";
		Иначе
			ВложенияПредставление = Сред(ВложенияПредставление, 3);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
// Процедура - обработчик события "Нажатие" надписи "Вложения".
//
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.Вложения.Видимость = НЕ Элементы.Вложения.Видимость;
	СформироватьПредставлениеВложений();
КонецПроцедуры // ВложенияПредставлениеНажатие()

&НаКлиенте
Процедура РедактироватьПочтовыеПапки(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураТекущейУЗ = ПолучитьТекущуюУЗ();
	СтруктураОтбора = Новый Структура("Владелец", СтруктураТекущейУЗ.Ключ);
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
	ОписаниеОповещенияОкончание = Новый ОписаниеОповещения("РедактироватьПочтовыеПапкиОкончание", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаСписка", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещенияОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПочтовыеПапкиОкончание(Параметры, Дополнительно) Экспорт
	ЗаполнитьДеревоУчетныхЗаписей();
	Если НЕ НетУчетныхЗаписей Тогда
		CRM_ОбщегоНазначенияКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ПанельУправления, ДеревоУчетныхЗаписей);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставПапок(Команда)
	
	ЕстьИсточникиЛидов = Ложь;
	ЗаполнитьСписокУчетныхЗаписей(УчетныеЗаписи, ЕстьИсточникиЛидов);
	Элементы.СписокПисемСостояниеЛида.Видимость = ЕстьИсточникиЛидов;
	ЗаполнитьДеревоУчетныхЗаписей();
	
	Если НЕ НетУчетныхЗаписей Тогда
		CRM_ОбщегоНазначенияКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ПанельУправления, ДеревоУчетныхЗаписей);
	Иначе
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаботыСПочтой(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", "ЭлектроннаяПочта");
	ОткрытьФорму("ОбщаяФорма.CRM_ПерсональныеНастройки", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,	ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУчетнуюЗапись(Команда = Неопределено)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеПодключенияУчетнойЗаписи", ЭтотОбъект);
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ПомощникНастройкиУчетнойЗаписи",,,,,,ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияУчетнойЗаписи(Результат, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		
		ОбновитьСоставПапок(Неопределено);
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ЗаписьВыполнена = CRM_НачалоРаботыСПрограммойСервер.ЗаписатьНастроенныйРазделРешения(ПредопределенноеЗначение("Перечисление.CRM_РазделыНастройкиРешения.ПочтовыйКлиент"));
			Если ЗаписьВыполнена Тогда
				Оповестить("ОбновитьНастроенныеРазделы");
				CRM_РабочийСтолКлиент.ПереинициализироватьРабочийСтолКлиент("Обработка.CRM_МенеджерПочты.Форма.Форма");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПроцедурыОбработчикиСобытийОстальныхЭлементовУправленияФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРМПочта"));
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////

// &НаСервере
// Функция ПолучитьСвойстваДинамическогоСпискаСервер()
//	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(	ЭтотОбъект,
//																			"СписокПисем",
//																			"Обработка.CRM_МенеджерПочты",
//																			Неопределено,
//																			Неопределено,
//																			Неопределено,
//																			"ПодменюВидСписка",
//																			"ВидСпискаИдентификаторТекущейНастройки",
//																			"Подключаемый_КомандаВидСписка");
//	//
// КонецФункции



