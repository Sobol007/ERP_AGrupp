
&НаСервере
Процедура ЗаполнитьВсемиГруппамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка КАК Ссылка,
	               |	ВидыНоменклатуры.Наименование КАК Наименование,
	               |	ВидыНоменклатурыАГ_КатегорийныеМенеджеры.КатегорийныйМенеджер КАК КатегорийныйМенеджер
	               |ИЗ
	               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.АГ_КатегорийныеМенеджеры КАК ВидыНоменклатурыАГ_КатегорийныеМенеджеры
	               |		ПО (ВидыНоменклатурыАГ_КатегорийныеМенеджеры.Ссылка = ВидыНоменклатуры.Ссылка)
	               |			И (ВидыНоменклатурыАГ_КатегорийныеМенеджеры.Металлоцентр В ИЕРАРХИИ (&Металлоцентр))
	               |ГДЕ
	               |	НЕ ВидыНоменклатуры.ПометкаУдаления
	               |	И НЕ ВидыНоменклатуры.ЭтоГруппа
	               |	И НЕ ВидыНоменклатуры.АГ_НеУчаствуетВПланированииИЦенообразовании
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("НоменклатурнаяГруппа",Выборка.Ссылка);

		Если Объект.ПараметрыЦенообразования.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			НовСтр = Объект.ПараметрыЦенообразования.Добавить();
			НовСтр.НоменклатурнаяГруппа = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ПараметрыЦенообразования.Сортировать("НоменклатурнаяГруппа ВОЗР");

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиГруппами(Команда)
	
	ЗаполнитьВсемиГруппамиНаСервере();
	
	Если Не Объект.ПараметрыЦенообразования.Количество() = 0 Тогда
		СтрокаТЗ = Объект.ПараметрыЦенообразования[0];
		ИдентификаторСтроки = СтрокаТЗ.ПолучитьИдентификатор();
		Элементы.ПараметрыЦенообразования.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьОтобразитьнеУчаствующиеВПланированииНаСервере()
	
	Если Не Элементы.ПараметрыЦенообразованияСкрытьОтобразитьнеУчаствующиеВПланировании.Пометка Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НоменклатурныеГруппы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК НоменклатурныеГруппы
		|ГДЕ
		|	НЕ НоменклатурныеГруппы.ПометкаУдаления
		|	И НЕ НоменклатурныеГруппы.ЭтоГруппа";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		
		МассивНг = Новый массив;
		
		Пока Выборка.Следующий() Цикл
			МассивНг.Добавить(Выборка.Ссылка);
		КонецЦикла;
		Элементы.ПараметрыЦенообразования.ОтборСтрок = Новый ФиксированнаяСтруктура("НоменклатурнаяГруппа", МассивНг);
		Элементы.ПараметрыЦенообразованияСкрытьОтобразитьнеУчаствующиеВПланировании.Пометка = Истина;
		
	Иначе
		
		Элементы.ПараметрыЦенообразованияСкрытьОтобразитьнеУчаствующиеВПланировании.Пометка = Ложь;
		
		Элементы.ПараметрыЦенообразования.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьнеУчаствующиеВПланировании(Команда)
	СкрытьОтобразитьнеУчаствующиеВПланированииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЦенообразованияПриАктивизацииСтроки(Элемент)
	
	ПорядокРасчетаСкорости = "НачалоМес";
	РетроспективаДней = 0;
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	Если ТекСтрока = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.Ретроспектива Тогда
		ПорядокРасчетаСкорости = "Ретроспектива";
		РетроспективаДней = ТекСтрока.ДниРетроспективы;
	Иначе
		ПорядокРасчетаСкорости = "НачалоМес";
		РетроспективаДней = 0;
	КонецЕсли;
	
	УстановитьДоступнстьРетросперктивы();
	
	БазаРасчетаВнешнихЦен = ТекСтрока.БазаРасчета;
	БазаРасчетаВнешнихЦен2 = ТекСтрока.БазаРасчета2;
	БазаРасчетаВнешнихЦен3 = ТекСтрока.БазаРасчета3;
	
	Стратегия = ТекСтрока.Стратегия;
	Измерение = ТекСтрока.Измерение;
	
	Доставка = текСтрока.Доставка;
	Регион4 = ТекСтрока.РегионМеталлоцентра;
	
	ЗаполнитьВалютуВСтоимостиДоставки();
	
	ПлановаяНаценка = ТекСтрока.ПлановаяНаценка;
	ЗаполнитьДекорацияНормативнаяРентабельность();
	
	ОбязательнаяСкидка = ТекСТрока.ОбязательнаяСкидка;
	ИзмерениеОС = ТекСтрока.ИзмерениеОС;
	ЗаполнитьДекорацияОбязательнаяСкидка();
	
	
	ЦеновойКоридор = ТекСтрока.ЦеновойКоридор;
	
	ИзмерениеНаценки = ТекСтрока.ИзмерениеНаценки;
	УценочнаяСкидка = ТекСтрока.УценочнаяСкидка;
	ИзмерениеСкидки = ТекСтрока.ИзмерениеСкидки;
	
	ВключитьКомплексноеЦО = ТекСтрока.ВключитьКомплексноеЦО;
	
	СкидкаМенеджераПоПродажам = ТекСтрока.СкидкаМОП;
	СкидкаНачальникаОтделаПродаж = ТекСтрока.СкидкаНОП;
	СкидкаДиректораМеталлоцентра = ТекСтрока.СкидкаДМЦ;
	СкидкаРуководителяДивизиона = ТекСтрока.СкидкаРДН;
	
	ВключитьНаценкиВЗаказе = текСтрока.ВключитьНаценкиВЗаказе;
	
	Элементы.КонкурентыМеталлоцентров.ОтборСтрок = Новый ФиксированнаяСтруктура("НоменклатурнаяГруппа", ТекСтрока.НоменклатурнаяГруппа);
	//Элементы.МатрицаМаржинальности.ОтборСтрок = Новый ФиксированнаяСтруктура("НоменклатурнаяГруппа", ТекСтрока.НоменклатурнаяГруппа);
	Элементы.НаценкаЗаМалотоннажность.ОтборСтрок = Новый ФиксированнаяСтруктура("НоменклатурнаяГруппа", ТекСтрока.НоменклатурнаяГруппа);
	
	ЗаполнитьКонкурентовИзРегистра(ТекСтрока.НоменклатурнаяГруппа);
	ЗаполнитьФакторыОтклоненияИзРегистра(ТекСтрока.НоменклатурнаяГруппа);
	ЗаполнитьМатрицуМаржинальностиИзРегистра(ТекСтрока.НоменклатурнаяГруппа);
	ПодобратьДиапазонСкидок();
	
	Элементы.НадписьВыбраннаяНомГруппа.Заголовок = ТекСтрока.НоменклатурнаяГруппа;
	
	//ПараметрыЦенообразованияПриАктивизацииСтрокиНаСервере();
	Если Не ТекБаза1 = БазаРасчетаВнешнихЦен Тогда
		БазаРасчетаВнешнихЦенПриИзмененииНаСервере();
		ТекБаза1 = БазаРасчетаВнешнихЦен;
	КонецЕсли;
	
	Если Не ТекБаза2 = БазаРасчетаВнешнихЦен2 Тогда
		БазаРасчетаВнешнихЦен2ПриИзмененииНаСервере();
		ТекБаза2 = БазаРасчетаВнешнихЦен2;
	КонецЕсли;
	
	Если Не ТекБаза3 = БазаРасчетаВнешнихЦен3 Тогда
		БазаРасчетаВнешнихЦен3ПриИзмененииНаСервере();
		ТекБаза3 = БазаРасчетаВнешнихЦен3;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(БазаРасчетаВнешнихЦен) Тогда
		Элементы.БазаРасчетаВнешнихЦен2.Доступность = Ложь;
		Элементы.БазаРасчетаВнешнихЦен3.Доступность = Ложь;
	Иначе
		Элементы.БазаРасчетаВнешнихЦен2.Доступность = Истина;
		Если Не ЗначениеЗаполнено(БазаРасчетаВнешнихЦен2) Тогда
			Элементы.БазаРасчетаВнешнихЦен3.Доступность = Ложь;
		Иначе
			Элементы.БазаРасчетаВнешнихЦен3.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьНаценкуЗаОтсрочкуПлатежа(ТекСтрока.НоменклатурнаяГруппа);
	ЗаполнитьНаценкуЗаПросроченнуюДЗ(ТекСтрока.НоменклатурнаяГруппа);
	ЗаполнитьНаценкуЗаМалотоннажность(ТекСтрока.НоменклатурнаяГруппа);
	
	//Элементы.МатрицаМаржинальности.ТекущиеДанные = 
КонецПроцедуры

&НаСервере
Процедура ПараметрыЦенообразованияПриАктивизацииСтрокиНаСервере()
	
	Если БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
		
		Элементы.Переместить(Элементы.ГруппаСтратегия, Элементы.ГруппаБаза1Строка2); 
		
	ИначеЕсли БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
		
		Элементы.Переместить(Элементы.ГруппаНормативнаяНаценка, Элементы.ГруппаБаза1Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") Тогда
		
		Элементы.Переместить(Элементы.ГруппаДонорДоставка, Элементы.ГруппаБаза1Строка2);
		
	КонецЕсли;
	
	Если БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
		
		Элементы.Переместить(Элементы.ГруппаСтратегия, Элементы.ГруппаБаза2Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
		
		Элементы.Переместить(Элементы.ГруппаНормативнаяНаценка, Элементы.ГруппаБаза2Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") Тогда
		
		Элементы.Переместить(Элементы.ГруппаДонорДоставка, Элементы.ГруппаБаза2Строка2);
		
	КонецЕсли;
	
	Если БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
		
		Элементы.Переместить(Элементы.ГруппаСтратегия, Элементы.ГруппаБаза3Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
		
		Элементы.Переместить(Элементы.ГруппаНормативнаяНаценка, Элементы.ГруппаБаза3Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") Тогда
		
		Элементы.Переместить(Элементы.ГруппаДонорДоставка, Элементы.ГруппаБаза3Строка2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступнстьРетросперктивы()
	
	Если ПорядокРасчетаСкорости = "НачалоМес" Тогда
		Элементы.РетроспективаДней.Доступность = Ложь;
		РетроспективаДней = 0;
	Иначе
		Элементы.РетроспективаДней.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетаСкоростиПриИзменении(Элемент)
	
	УстановитьДоступнстьРетросперктивы();
	
	ЗаполнитьРетроспективу();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРетроспективу()
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если ПорядокРасчетаСкорости = "НачалоМес" Тогда
		Если НЕ ТекСтрока = Неопределено Тогда
			ТекСтрока.ДниРетроспективы = РетроспективаДней;
			ТекСтрока.Ретроспектива = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ТекСтрока = Неопределено Тогда
			ТекСтрока.ДниРетроспективы = РетроспективаДней;
			ТекСтрока.Ретроспектива = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыЦенообразованияПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НоменклатурнаяГруппа", ТекСтрока.НоменклатурнаяГруппа);
	
	НайденныеСтроки  = Объект.КонкурентыМеталлоцентров.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ТекСтр из НайденныеСтроки Цикл
		Объект.КонкурентыМеталлоцентров.Удалить(ТекСтр);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура БазаРасчетаВнешнихЦенПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.БазаРасчета = БазаРасчетаВнешнихЦен;
		ТекСтрока.БазаРасчета2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
		ТекСтрока.БазаРасчета3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
	КонецЕсли;
	
	БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
	БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
	
	Если Не ТекБаза1 = БазаРасчетаВнешнихЦен Тогда
		БазаРасчетаВнешнихЦенПриИзмененииНаСервере();
		ТекБаза1 = БазаРасчетаВнешнихЦен;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(БазаРасчетаВнешнихЦен) Тогда
		БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
		БазаРасчетаВнешнихЦен2ПриИзменении(Неопределено);
		
		БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
		БазаРасчетаВнешнихЦен3ПриИзменении(Неопределено);
		
		Элементы.БазаРасчетаВнешнихЦен2.Доступность = Ложь;
		Элементы.БазаРасчетаВнешнихЦен3.Доступность = Ложь;
	Иначе
		Элементы.БазаРасчетаВнешнихЦен2.Доступность = Истина;
		Если Не ЗначениеЗаполнено(БазаРасчетаВнешнихЦен2) Тогда
			Элементы.БазаРасчетаВнешнихЦен3.Доступность = Ложь;
		Иначе
			Элементы.БазаРасчетаВнешнихЦен3.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьПараметров();
	
КонецПроцедуры

&НаСервере
Процедура БазаРасчетаВнешнихЦенПриИзмененииНаСервере()

	Если НЕ Элементы.ГруппаБаза1Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
		ТекЭлементГруппы = Элементы.ГруппаБаза1Строка2.ПодчиненныеЭлементы[0];
	Иначе
		ТекЭлементГруппы = Неопределено;
	КонецЕсли;
	
	Если БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
		
		Элементы.Переместить(Элементы.ГруппаСтратегия, Элементы.ГруппаБаза1Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
		
		Элементы.Переместить(Элементы.ГруппаНормативнаяНаценка, Элементы.ГруппаБаза1Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") Тогда
		
		Элементы.Переместить(Элементы.ГруппаДонорДоставка, Элементы.ГруппаБаза1Строка2);
		
	КонецЕсли;
	
	///Перенести в пустую группу
	Если Не ТекЭлементГруппы = Неопределено Тогда
		Если Элементы.ГруппаБаза2Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
			
			Элементы.Переместить(ТекЭлементГруппы, Элементы.ГруппаБаза2Строка2);
			
		ИначеЕсли Элементы.ГруппаБаза3Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
			
			Элементы.Переместить(ТекЭлементГруппы, Элементы.ГруппаБаза3Строка2);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура БазаРасчетаВнешнихЦен2ПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.БазаРасчета2 = БазаРасчетаВнешнихЦен2;
		ТекСтрока.БазаРасчета3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
	КонецЕсли;
	
	Если БазаРасчетаВнешнихЦен = БазаРасчетаВнешнихЦен2 и ЗначениеЗаполнено(БазаРасчетаВнешнихЦен2) Тогда
		БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Дублируется значение первой стратегии";
		Сообщение.Сообщить();
	КонецЕсли;
	
	БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
	
	Если Не ТекБаза2 = БазаРасчетаВнешнихЦен2 Тогда
		БазаРасчетаВнешнихЦен2ПриИзмененииНаСервере();
		ТекБаза2 = БазаРасчетаВнешнихЦен2;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(БазаРасчетаВнешнихЦен2) Тогда
		
		БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
		БазаРасчетаВнешнихЦен3ПриИзменении(Неопределено);
		
		Если Не ЗначениеЗаполнено(БазаРасчетаВнешнихЦен2) Тогда
			Элементы.БазаРасчетаВнешнихЦен3.Доступность = Ложь;
		Иначе
			Элементы.БазаРасчетаВнешнихЦен3.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьПараметров();
	
КонецПроцедуры

&НаСервере
Процедура БазаРасчетаВнешнихЦен2ПриИзмененииНаСервере()
	
	Если НЕ Элементы.ГруппаБаза2Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
		ТекЭлементГруппы = Элементы.ГруппаБаза2Строка2.ПодчиненныеЭлементы[0];
	Иначе
		ТекЭлементГруппы = Неопределено;
	КонецЕсли;
	
	Если БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
		
		Элементы.Переместить(Элементы.ГруппаСтратегия, Элементы.ГруппаБаза2Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
		
		Элементы.Переместить(Элементы.ГруппаНормативнаяНаценка, Элементы.ГруппаБаза2Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") Тогда
		
		Элементы.Переместить(Элементы.ГруппаДонорДоставка, Элементы.ГруппаБаза2Строка2);
		
	КонецЕсли;
	
	///Перенести в пустую группу
	Если Не ТекЭлементГруппы = Неопределено Тогда
		Если Элементы.ГруппаБаза1Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
			
			Элементы.Переместить(ТекЭлементГруппы, Элементы.ГруппаБаза1Строка2);
			
		ИначеЕсли Элементы.ГруппаБаза3Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
			
			Элементы.Переместить(ТекЭлементГруппы, Элементы.ГруппаБаза3Строка2);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура БазаРасчетаВнешнихЦен3ПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.БазаРасчета3 = БазаРасчетаВнешнихЦен3;
	КонецЕсли;
	
	Если БазаРасчетаВнешнихЦен = БазаРасчетаВнешнихЦен3 и ЗначениеЗаполнено(БазаРасчетаВнешнихЦен3) Тогда
		БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Дублируется значение первой стратегии";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если БазаРасчетаВнешнихЦен2 = БазаРасчетаВнешнихЦен3 и ЗначениеЗаполнено(БазаРасчетаВнешнихЦен3) Тогда
		БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ПустаяСсылка");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Дублируется значение второй стратегии";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Не ТекБаза3 = БазаРасчетаВнешнихЦен3 Тогда
		БазаРасчетаВнешнихЦен3ПриИзмененииНаСервере();
		ТекБаза3 = БазаРасчетаВнешнихЦен3;
	КонецЕсли;
	
	УстановитьВидимостьПараметров();
	
КонецПроцедуры

&НаСервере
Процедура БазаРасчетаВнешнихЦен3ПриИзмененииНаСервере()
	
	Если НЕ Элементы.ГруппаБаза2Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
		ТекЭлементГруппы = Элементы.ГруппаБаза2Строка2.ПодчиненныеЭлементы[0];
	Иначе
		ТекЭлементГруппы = Неопределено;
	КонецЕсли;
	
	Если БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
		
		Элементы.Переместить(Элементы.ГруппаСтратегия, Элементы.ГруппаБаза3Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
		
		Элементы.Переместить(Элементы.ГруппаНормативнаяНаценка, Элементы.ГруппаБаза3Строка2);
		
	ИначеЕсли БазаРасчетаВнешнихЦен3 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") Тогда
		
		Элементы.Переместить(Элементы.ГруппаДонорДоставка, Элементы.ГруппаБаза3Строка2);
		
	КонецЕсли;
	
	///Перенести в пустую группу
	Если Не ТекЭлементГруппы = Неопределено Тогда
		Если Элементы.ГруппаБаза1Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
			
			Элементы.Переместить(ТекЭлементГруппы, Элементы.ГруппаБаза1Строка2);
			
		ИначеЕсли Элементы.ГруппаБаза2Строка2.ПодчиненныеЭлементы.Количество() = 0 Тогда
			
			Элементы.Переместить(ТекЭлементГруппы, Элементы.ГруппаБаза2Строка2);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтратегияПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.Стратегия = Стратегия;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзмерениеПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.Измерение = Измерение;
	КонецЕсли;
	
	ИзмерениеНаценки = Измерение;
	ТекСтрока.ИзмерениеНаценки = Измерение;	
	
	ИзмерениеСкидки = Измерение;
	ТекСтрока.ИзмерениеСкидки = Измерение;
	
КонецПроцедуры


&НаКлиенте
Процедура ПлановаяНаценкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ПлановаяНаценка = ПлановаяНаценка;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Регион4ПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.РегионМеталлоцентра = Регион4;
		
		ЗаполнитьВалютуВСтоимостиДоставки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуВСтоимостиДоставки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦен.ВалютаЦены КАК ВалютаЦены
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ВидыЦен
	               |ГДЕ
	               |	НЕ ВидыЦен.ПометкаУдаления
	               |	И ВидыЦен.АГ_Подразделение = &Подразделение
	               |	И ВидыЦен.АГ_ВидПрайса = &ВидПрайса";
	
	Запрос.УстановитьПараметр("Подразделение", Регион4);
	Запрос.УстановитьПараметр("ВидПрайса", Перечисления.АГ_ВидыПрайсов.ОсновнойПрайс);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Элементы.Декорация7.Заголовок = "Стоимость доставки (RUB):";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Элементы.Декорация7.Заголовок = "Стоимость доставки (" + Строка(Выборка.ВалютаЦены) + "):";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВалютуПоПодразделению()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦен.ВалютаЦены КАК ВалютаЦены
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ВидыЦен
	               |ГДЕ
	               |	НЕ ВидыЦен.ПометкаУдаления
	               |	И ВидыЦен.АГ_Подразделение = &Подразделение
	               |	И ВидыЦен.АГ_ВидПрайса = &ВидПрайса";
	
	Запрос.УстановитьПараметр("Подразделение", Металлоцентр);
	Запрос.УстановитьПараметр("ВидПрайса", Перечисления.АГ_ВидыПрайсов.ОсновнойПрайс);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.Валюты.НайтиПоКоду("643");
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ВалютаЦены;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДоставкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.Доставка = Доставка;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбязательнаяСкидкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ОбязательнаяСкидка = ОбязательнаяСкидка;
	КонецЕсли;
	
	ЗаполнитьДекорацияОбязательнаяСкидка();
	
КонецПроцедуры


&НаКлиенте
Процедура ИзмерениеОСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ИзмерениеОС = ИзмерениеОС;
	КонецЕсли;
	
	ЗаполнитьДекорацияОбязательнаяСкидка();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДекорацияОбязательнаяСкидка()
	
	Если ИзмерениеОС = ПредопределенноеЗначение("Перечисление.АГ_ИзмеренияПараметровЦенообразования.Валюта") Тогда
		ТекЗнач = Строка(ПолучитьВалютуПоПодразделению());
	ИначеЕсли ИзмерениеОС = ПредопределенноеЗначение("Перечисление.АГ_ИзмеренияПараметровЦенообразования.Процент") Тогда
		ТекЗнач = "%";
	Иначе ТекЗнач = "%";
	КонецЕсли;
	
	Элементы.ДекорацияОбязательнаяСкидка.Заголовок = "МИНУС ОБЯЗАТЕЛЬНАЯ СКИДКА -" + Формат( - ОбязательнаяСкидка, "ЧДЦ=2; ЧН=0") + " " + Строка(ТекЗнач);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеновойКоридорПриИзменении(Элемент)
	
	 ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ЦеновойКоридор = ЦеновойКоридор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БазаРасчетаВнешнихЦен2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.БазаРасчетаВнешнихЦен2.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(БазаРасчетаВнешнихЦен) Тогда
		Если Не БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
			Элементы.БазаРасчетаВнешнихЦен2.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления"));
		КонецЕсли;
		
		Если Не БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") Тогда
			Элементы.БазаРасчетаВнешнихЦен2.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра"));
		КонецЕсли;
		
		Если Не БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
			Элементы.БазаРасчетаВнешнихЦен2.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БазаРасчетаВнешнихЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.БазаРасчетаВнешнихЦен.СписокВыбора.Очистить();
	
	Элементы.БазаРасчетаВнешнихЦен.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления"));
	Элементы.БазаРасчетаВнешнихЦен.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра"));
	Элементы.БазаРасчетаВнешнихЦен.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов"));

КонецПроцедуры


&НаКлиенте
Процедура БазаРасчетаВнешнихЦен3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	 Элементы.БазаРасчетаВнешнихЦен3.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(БазаРасчетаВнешнихЦен) Тогда
		Если Не БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") И Не БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
			Элементы.БазаРасчетаВнешнихЦен3.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления"));
		КонецЕсли;
		
		Если Не БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") И Не БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") Тогда
			Элементы.БазаРасчетаВнешнихЦен3.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра"));
		КонецЕсли;
		
		Если Не БазаРасчетаВнешнихЦен = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") И Не БазаРасчетаВнешнихЦен2 = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
			Элементы.БазаРасчетаВнешнихЦен3.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьконкурентамиСопоставленнойНоменклатурыНаСервере(НоменклатурнаяГруппа)
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Конкурент КАК Конкурент
	|ИЗ
	|	(ВЫБРАТЬ
	|		СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент КАК Конкурент
	|	ИЗ
	|		Справочник.Номенклатура.АГ_Сопоставленная23Мет КАК СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет
	|	ГДЕ
	|		СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион = &Регион
	|		И НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ПометкаУдаления
	|		И СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ВидНоменклатуры = &НоменклатурнаяГруппа
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент
	|	ИЗ
	|		РегистрСведений.АГ_ЦеныКонкурентов.СрезПоследних(
	|				,
	|				Регион = &Регион
	|					И Номенклатура.ВидНоменклатуры = &НоменклатурнаяГруппа) КАК ЦеныКонсолидированнойНоменклатурыСрезПоследних
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Конкурент";
	
	Запрос.УстановитьПараметр("Регион", Металлоцентр.АГ_ОсновнойРегион);     
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Конкурент", Выборка.Конкурент);
		ПараметрыОтбора.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
		
		НайденныеСтроки  = Объект.КонкурентыМеталлоцентров.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НовСтр = Объект.КонкурентыМеталлоцентров.Добавить();
			НовСтр.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			НовСтр.Конкурент = Выборка.Конкурент;
			НовСтр.РеквКонкурент = Выборка.Конкурент.Конкурент;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьконкурентамиСопоставленнойНоменклатуры(Команда)
	
	Если Не ЗначениеЗаполнено(Металлоцентр) ТОгда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен Металлоцентр! Заполните поле и повторите попытку еще раз.";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьконкурентамиСопоставленнойНоменклатурыНаСервере(ТекСтрока.НоменклатурнаяГруппа);
	
КонецПроцедуры


&НаСервере
Процедура КонкурентыМеталлоцентровПриИзмененииНаСервере()
	
	Для Каждого ТекСтр Из Объект.КонкурентыМеталлоцентров Цикл
		ТекСтр.реквКонкурент= ТекСтр.Конкурент.Конкурент;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура КонкурентыМеталлоцентровПриИзменении(Элемент)
	КонкурентыМеталлоцентровПриИзмененииНаСервере();
КонецПроцедуры

Процедура ЗаполнитьКонкурентовИзРегистра(НоменклатурнаяГруппа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонкурентыМеталлоцентров.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	КонкурентыМеталлоцентров.Конкурент КАК Конкурент,
	               |	КонкурентыМеталлоцентров.Рейтинг КАК Рейтинг,
	               |	КонкурентыМеталлоцентров.Парсинг КАК Парсинг,
	               |	КонтрагентыИдентификаторы23met.Идентификатор КАК ИДКонкурента,
	               |	КонкурентыМеталлоцентров.ИндексСтроки КАК ИиндексСтроки,
	               |	КонкурентыМеталлоцентров.Конкурент.Конкурент КАК реквКонкурент
	               |ИЗ
	               |	РегистрСведений.АГ_КонкурентыМеталлоцентров КАК КонкурентыМеталлоцентров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.АГ_Идентификаторы23met КАК КонтрагентыИдентификаторы23met
	               |		ПО КонкурентыМеталлоцентров.Регион.АГ_ОсновнойРегион = КонтрагентыИдентификаторы23met.Регион
	               |			И КонкурентыМеталлоцентров.Конкурент = КонтрагентыИдентификаторы23met.Ссылка
	               |ГДЕ
	               |    КонкурентыМеталлоцентров.Регион = &Регион
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонкурентыМеталлоцентров.ИндексСтроки";
	
	Запрос.УстановитьПараметр("Регион", Металлоцентр);
	//Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	Объект.КонкурентыМеталлоцентров.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура КонкурентыМеталлоцентровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.НоменклатурнаяГруппа) и НЕ Элементы.КонкурентыМеталлоцентров.ОтборСтрок = Неопределено Тогда
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = Элементы.КонкурентыМеталлоцентров.ОтборСтрок.НоменклатурнаяГруппа;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФакторыОтклоненияИзРегистра(НоменклатурнаяГруппа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФакторыВнешнейЦены.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ФакторыВнешнейЦены.ТипНастройки КАК ТипНастройки,
	|	ФакторыВнешнейЦены.НаименованиеЗоны КАК НаименованиеЗоны,
	|	ФакторыВнешнейЦены.ПроцентОтНормы КАК ПроцентОтНормы,
	|	ФакторыВнешнейЦены.ТрансформацияЦены КАК ТрансформацияЦены,
	|	ФакторыВнешнейЦены.ИндексСтроки КАК ИндексСтроки
	|ИЗ
	|	РегистрСведений.АГ_ФакторыВнешнейЦены КАК ФакторыВнешнейЦены
	|ГДЕ
	|	ФакторыВнешнейЦены.Регион = &Регион
	|	И ФакторыВнешнейЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексСтроки";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("Регион", Металлоцентр.АГ_ОсновнойРегион);
	
	Объект.ФакторыВнешнейЦены.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатрицуМаржинальностиИзРегистра(НоменклатурнаяГруппа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ВложенныйЗапрос.Металлоцентр КАК Металлоцентр,
	               |	МИНИМУМ(ВложенныйЗапрос.Поле1) КАК ПолеСортировки
	               |ПОМЕСТИТЬ Таб1
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |		АГ_ФакторыОтпускнойЦены.Металлоцентр КАК Металлоцентр,
	               |		1 КАК Поле1
	               |	ИЗ
	               |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |	ГДЕ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	               |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &Металлоцентр
	               |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	               |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	               |		2
	               |	ИЗ
	               |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |	ГДЕ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	               |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &ПустойМЦ
	               |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	               |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	               |		3
	               |	ИЗ
	               |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |	ГДЕ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &ПустаяНГ
	               |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &Металлоцентр
	               |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	               |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	               |		4
	               |	ИЗ
	               |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |	ГДЕ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &ПустаяНГ
	               |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &ПустойМЦ
	               |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.НоменклатурнаяГруппа,
	               |	ВложенныйЗапрос.Металлоцентр
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	Таб1.Металлоцентр КАК Металлоцентр,
	               |	АГ_ФакторыОтпускнойЦены.Ранжирование КАК Рентабельность,
	               |	АГ_ФакторыОтпускнойЦены.ЗначениеТрансформации КАК ДиапазонСкидки,
	               |	АГ_ФакторыОтпускнойЦены.ИндексСтроки КАК ИндексСтроки,
	               |	АГ_ФакторыОтпускнойЦены.ИзмерениеТрансформации КАК Измерение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МИНИМУМ(Таб1.ПолеСортировки) КАК ПолеСортировки
	               |	ИЗ
	               |		Таб1 КАК Таб1) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Таб1 КАК Таб1
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |			ПО Таб1.НоменклатурнаяГруппа = АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа
	               |				И Таб1.Металлоцентр = АГ_ФакторыОтпускнойЦены.Металлоцентр
	               |				И (АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя)
	               |		ПО ВложенныйЗапрос.ПолеСортировки = Таб1.ПолеСортировки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИндексСтроки";
	   
	Запрос.УстановитьПараметр("ТипПоказателя", Перечисления.АГ_ТипыПоказателейФакторовОтпускнойЦены.Маржинальность);
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	Запрос.УстановитьПараметр("ПустойМЦ", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("ПустаяНГ", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	
	Объект.МатрицаМаржинальности.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ФакторыВнешнейЦены_Остатки.ОтборСтрок = Новый ФиксированнаяСтруктура("ТипНастройки", ПредопределенноеЗначение("Перечисление.АГ_ТипыНастроекФакторовВнейшнейЦены.УровеньОстатков"));
	Элементы.ФакторыВнешнейЦены_Скорость.ОтборСтрок = Новый ФиксированнаяСтруктура("ТипНастройки", ПредопределенноеЗначение("Перечисление.АГ_ТипыНастроекФакторовВнейшнейЦены.СкоростьПродаж"));
	
	УстановитьВидимостьКнопокНижнейПанели();
	
	МеталлоцентрПриИзменении(Неопределено);
	
	УстановитьВидимостьПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура РетроспективаДнейПриИзменении(Элемент)
	
	ЗаполнитьРетроспективу();
	
КонецПроцедуры

//&НаКлиенте
//Процедура УстановитьФлаги(Команда)
//	
//	Для Каждого СтрокаТаблицыФормы Из Объект.СписокНоменклатуры Цикл
//		ИдентификаторСтроки= СтрокаТаблицыФормы.ПолучитьИдентификатор();
//        Если Элементы.СписокНоменклатуры.ПроверитьСтроку(ИдентификаторСтроки) Тогда
//            СтрокаТаблицыФормы.Выбрано = Истина;
//        КонецЕсли
//	КонецЦикла;
//	
//КонецПроцедуры

&НаСервере
Функция ПолучитьТипыЦен(ВидПрайса)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен,
	|	ТипыЦенНоменклатуры.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыЦен КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	НЕ ТипыЦенНоменклатуры.ПометкаУдаления
	|	И ТипыЦенНоменклатуры.АГ_ВидПрайса = &ВидПрайса
	|	И ТипыЦенНоменклатуры.АГ_Подразделение = &МЦ
	|	УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("МЦ", Металлоцентр);
	Запрос.УстановитьПараметр("ВидПрайса", ВидПрайса);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ТипЦен;
	
КонецФункции

&НаКлиенте
Процедура МеталлоцентрПриИзменении(Элемент)
	
	Объект.ПараметрыЦенообразования.Очистить();
	Объект.КонкурентыМеталлоцентров.Очистить();
	Объект.ФакторыВнешнейЦены.Очистить();
	Объект.МатрицаМаржинальности.Очистить();
	
	БазаРасчетаВнешнихЦен = Неопределено;
	БазаРасчетаВнешнихЦен2 = Неопределено;
	БазаРасчетаВнешнихЦен3 = Неопределено;
	
	Стратегия = Неопределено;
	Измерение = Неопределено;
	
	Доставка = Неопределено;
	Регион4 = Неопределено;
	
	ПлановаяНаценка = Неопределено;
	ОбязательнаяСкидка = Неопределено;
	ИзмерениеОС = Неопределено;
	
	ЦеновойКоридор = Неопределено;
	
	Паника = ПроверитьМеталлоцентрНаСервере();
	
	Если Паника = истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыЦенообразованияИзРегистра();
	
	Если Не Объект.ПараметрыЦенообразования.Количество() = 0 Тогда
		СтрокаТЗ = Объект.ПараметрыЦенообразования[0];
		ИдентификаторСтроки = СтрокаТЗ.ПолучитьИдентификатор();
		Элементы.ПараметрыЦенообразования.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
	ТипЦенВнутр = ПолучитьТипыЦен(ПредопределенноеЗначение("Перечисление.АГ_ВидыПрайсов.ОсновнойПрайс"));
	ТипЦенВнеш = ПолучитьТипыЦен(ПредопределенноеЗначение("Перечисление.АГ_ВидыПрайсов.ВнешнийПрайс"));
	ТипЦенМин = ПолучитьТипыЦен(ПредопределенноеЗначение("Перечисление.АГ_ВидыПрайсов.МинимальнаяЦена"));
	ТипЦенМРЦ = ПолучитьТипыЦен(ПредопределенноеЗначение("Перечисление.АГ_ВидыПрайсов.МРЦ"));
	
КонецПроцедуры

&НаСервере
Функция ПроверитьМеталлоцентрнасервере()
	
	Если ЗначениеЗаполнено(Металлоцентр) И НЕ Металлоцентр.АГ_УровеньПодчинения = ПредопределенноеЗначение("Перечисление.АГ_УровеньПодчинения.Металлоцентр") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Разрешено выбирать  Металоцентр только с уровнем подчинения Металлоцентр";
		Сообщение.Сообщить();
		
		Металлоцентр = Неопределено;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыЦенообразованияИзРегистра()
	
	Если НЕ ЗначениеЗаполнено(металлоцентр) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыЦенообразования.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ПараметрыЦенообразования.ПлановаяНаценка КАК ПлановаяНаценка,
	               |	ПараметрыЦенообразования.Стратегия КАК Стратегия,
	               |	ПараметрыЦенообразования.НоменклатурнаяГруппа.Наименование КАК НоменклатурнаяГруппаНаименование,
	               |	КатегорийныеМенеджерыНомГруппыСрезПоследних.КатегорийныйМенеджер КАК КатегорийныйМенеджер,
	               |	ПараметрыЦенообразования.Измерение КАК Измерение,
	               |	ПараметрыЦенообразования.Ретроспектива КАК Ретроспектива,
	               |	ПараметрыЦенообразования.ДниРетроспективы КАК ДниРетроспективы,
	               |	ПараметрыЦенообразования.ЦеновойКоридор КАК ЦеновойКоридор,
	               |	ПараметрыЦенообразования.БазаРасчета КАК БазаРасчета,
	               |	ПараметрыЦенообразования.Доставка КАК Доставка,
	               |	ПараметрыЦенообразования.РегионМеталлоцентра КАК РегионМеталлоцентра,
	               |	ПараметрыЦенообразования.ИзмерениеОС КАК ИзмерениеОС,
	               |	ПараметрыЦенообразования.ОбязательнаяСкидка КАК ОбязательнаяСкидка,
	               |	ПараметрыЦенообразования.БазаРасчета2 КАК БазаРасчета2,
	               |	ПараметрыЦенообразования.БазаРасчета3 КАК БазаРасчета3,
	               |	ПараметрыЦенообразования.ИзмерениеНаценки КАК ИзмерениеНаценки,
	               |	ПараметрыЦенообразования.УценочнаяСкидка КАК УценочнаяСкидка,
	               |	ПараметрыЦенообразования.ИзмерениеСкидки КАК ИзмерениеСкидки,
	               |	ПараметрыЦенообразования.ВключитьКомплексноеЦО КАК ВключитьКомплексноеЦО,
	               |	ПараметрыЦенообразования.ВключитьНаценкиВЗаказе КАК ВключитьНаценкиВЗаказе,
	               |	ПараметрыЦенообразования.СкидкаМОП КАК СкидкаМОП,
	               |	ПараметрыЦенообразования.СкидкаНОП КАК СкидкаНОП,
	               |	ПараметрыЦенообразования.СкидкаДМЦ КАК СкидкаДМЦ,
	               |	ПараметрыЦенообразования.СкидкаРДН КАК СкидкаРДН
	               |ИЗ
	               |	РегистрСведений.АГ_ПараметрыЦенообразования КАК ПараметрыЦенообразования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.АГ_КатегорийныеМенеджеры КАК КатегорийныеМенеджерыНомГруппыСрезПоследних
	               |		ПО ПараметрыЦенообразования.НоменклатурнаяГруппа = КатегорийныеМенеджерыНомГруппыСрезПоследних.Ссылка
	               |			И (КатегорийныеМенеджерыНомГруппыСрезПоследних.Металлоцентр = &Металлоцентр)
	               |ГДЕ
	               |	ПараметрыЦенообразования.Регион = &Металлоцентр
	               |	И НЕ ПараметрыЦенообразования.НоменклатурнаяГруппа.ПометкаУдаления
	               |	И НЕ ПараметрыЦенообразования.НоменклатурнаяГруппа.АГ_НеУчаствуетВПланированииИЦенообразовании
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НоменклатурнаяГруппаНаименование";
	
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	
	
	Объект.ПараметрыЦенообразования.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьКнопокНижнейПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокНижнейПанели()
	
	Если Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаПараметрыЦенообразования Тогда
		Элементы.КомандаЗаписатьПараметры.Видимость = Истина;
		Элементы.ПроизвестиЗамену_КонтрольСопоставления.Видимость = Ложь;
		Элементы.ЗаписатьЦеныПарсингЦен.Видимость = Ложь;
	ИначеЕсли Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаВыявлениеНулевыхЦен Тогда
		Элементы.КомандаЗаписатьПараметры.Видимость = Ложь;
		Если Элементы.ГруппаСтраницыКонтроль.ТекущаяСтраница = Элементы.ГруппаКонтрольСопоставления Тогда
			Элементы.ПроизвестиЗамену_КонтрольСопоставления.Видимость = Истина;
			Элементы.ЗаписатьЦеныПарсингЦен.Видимость = Ложь;
		ИначеЕсли Элементы.ГруппаСтраницыКонтроль.ТекущаяСтраница = Элементы.ГруппаЗагрузитьЦеныССайта Тогда
			Элементы.ПроизвестиЗамену_КонтрольСопоставления.Видимость = Ложь;
			Элементы.ЗаписатьЦеныПарсингЦен.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.КомандаЗаписатьПараметры.Видимость = Ложь;
		Элементы.ПроизвестиЗамену_КонтрольСопоставления.Видимость = Ложь;
		Элементы.ЗаписатьЦеныПарсингЦен.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьПараметры(Команда)
	
	Если Не ЗначениеЗаполнено(Металлоцентр) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Запись параметров не выполнена - не выбран металлоцентр";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
	ВыполнитьДвиженияПараметры(ТекСтрока.НоменклатурнаяГруппа);
	КонецЕсли;
	
	ПодобратьДиапазонСкидок();

	
	Предупреждение("Параметры записаны!");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДвиженияПараметры(НоменклатурнаяГруппа = Неопределено)
	
	Если СкидкаНачальникаОтделаПродаж < СкидкаМенеджераПоПродажам Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Скидка для начальника отдела продаж меньше, чем скидка для менеджера по продажам!";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Если СкидкаДиректораМеталлоцентра < СкидкаНачальникаОтделаПродаж Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Скидка для директора металлоцентра меньше, чем скидка для начальника отдела продаж!";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Если СкидкаРуководителяДивизиона < СкидкаДиректораМеталлоцентра Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Скидка для руководителя дивизиона меньше, чем скидка для директора металлоцентра!";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ФакторыВнешнейЦены.Количество() = 0 Тогда

		текСтрокаНомГруппы = Объект.ФакторыВнешнейЦены[0];
		
		НЗ = РегистрыСведений.АГ_ФакторыВнешнейЦены.СоздатьНаборЗаписей();
		НЗ.Отбор.НоменклатурнаяГруппа.Установить(ТекСтрокаНомГруппы.НоменклатурнаяГруппа);
		НЗ.Отбор.Регион.Установить(Металлоцентр.АГ_ОсновнойРегион);
		НЗ.Прочитать();
		НЗ.Очистить();
		НЗ.записать(Истина);
		
		Для Каждого ТекСтр Из Объект.ФакторыВнешнейЦены Цикл
			НЗ = РегистрыСведений.АГ_ФакторыВнешнейЦены.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(НЗ, ТекСтр);
			НЗ.Регион = Металлоцентр.АГ_ОсновнойРегион;
			НЗ.ИндексСтроки = ТекСтр.НомерСтроки;
			НЗ.Записать(Истина);
			
		КонецЦикла;
	КонецЕсли;	
	
	Если НЕ Элементы.КонкурентыМеталлоцентров.ОтборСтрок.Количество() = 0 Тогда
		ТекНомГруппа = Элементы.КонкурентыМеталлоцентров.ОтборСтрок.НоменклатурнаяГруппа;
		
		НЗ = РегистрыСведений.АГ_КонкурентыМеталлоцентров.СоздатьНаборЗаписей();
		НЗ.Отбор.НоменклатурнаяГруппа.Установить(ТекНомГруппа);
		НЗ.Отбор.Регион.Установить(Металлоцентр);
		НЗ.Прочитать();
		НЗ.Очистить();
		НЗ.Записать();
	КонецЕсли;
		
	Для Каждого ТекСтр Из Объект.КонкурентыМеталлоцентров Цикл
		
		НЗ = РегистрыСведений.АГ_КонкурентыМеталлоцентров.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(НЗ, ТекСтр);
		НЗ.Регион = Металлоцентр;
		НЗ.ИндексСтроки = ТекСтр.НомерСтроки;
		НЗ.Записать(Истина);
		
	КонецЦикла;
	
	Для Каждого ТекСтр Из Объект.ПараметрыЦенообразования Цикл
		
		НЗ = РегистрыСведений.АГ_ПараметрыЦенообразования.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(НЗ, ТекСтр);
		НЗ.Регион = Металлоцентр;
		НЗ.Записать(Истина);
		
		Если ЗначениеЗаполнено(ТекСтр.КатегорийныйМенеджер) Тогда
			НомГруппаОб = ТекСтр.НоменклатурнаяГруппа.ПолучитьОбъект();
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Металлоцентр", Металлоцентр);

			НайденныеСтроки = НомГРуппаОб.АГ_КатегорийныеМенеджеры.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				 Новстр = НомГРуппаОб.АГ_КатегорийныеМенеджеры.Добавить();
				 Новстр.Металлоцентр = Металлоцентр;
				 НовСтр.КатегорийныйМенеджер = ТекСтр.КатегорийныйМенеджер;
			Иначе
				Для Каждого НовСтр Из НайденныеСтроки Цикл
					 НовСтр.КатегорийныйМенеджер = ТекСтр.КатегорийныйМенеджер;
				КонецЦикла;
			КонецЕсли;
			
			НомГруппаОб.ОбменДанными.Загрузка = Истина;
			НомГруппаОб.Записать();

		КонецЕсли;
		
	КонецЦикла;
	
	//Если НЕ Элементы.МатрицаМаржинальности.ОтборСтрок.Количество() = 0 Тогда
	//	ТекНомГруппа = Элементы.МатрицаМаржинальности.ОтборСтрок.НоменклатурнаяГруппа;
	    ТекНомГруппа = НоменклатурнаяГруппа;
		
		НЗ = РегистрыСведений.АГ_ФакторыОтпускнойЦены.СоздатьНаборЗаписей();
		НЗ.Отбор.НоменклатурнаяГруппа.Установить(ТекНомГруппа);
		НЗ.Отбор.Металлоцентр.Установить(Металлоцентр);
		НЗ.Отбор.ТипПоказателя.Установить(Перечисления.АГ_ТипыПоказателейФакторовОтпускнойЦены.Маржинальность);
		НЗ.Прочитать();
		НЗ.Очистить();
		НЗ.Записать();
	//КонецЕсли;
		
	Для Каждого ТекСтр Из Объект.МатрицаМаржинальности Цикл
		
		НЗ = РегистрыСведений.АГ_ФакторыОтпускнойЦены.СоздатьМенеджерЗаписи();
		
		НЗ.Металлоцентр = Металлоцентр;
		НЗ.ИндексСтроки = ТекСтр.НомерСтроки;
		НЗ.НоменклатурнаяГруппа = ТекСтр.НоменклатурнаяГруппа;
		НЗ.ТипПоказателя = Перечисления.АГ_ТипыПоказателейФакторовОтпускнойЦены.Маржинальность;
		НЗ.Ранжирование = ТекСтр.Рентабельность;
		НЗ.ЗначениеТрансформации = ТекСтр.ДиапазонСкидки;
		НЗ.ИзмерениеТрансформации = ТекСтр.Измерение;
		
		НЗ.Записать(Истина);
		
	КонецЦикла;
	
	Если НЕ Элементы.НаценкаЗаМалотоннажность.ОтборСтрок.Количество() = 0 Тогда
		ТекНомГруппа = Элементы.НаценкаЗаМалотоннажность.ОтборСтрок.НоменклатурнаяГруппа;
		
		НЗ = РегистрыСведений.АГ_ФакторыОтпускнойЦены.СоздатьНаборЗаписей();
		НЗ.Отбор.НоменклатурнаяГруппа.Установить(ТекНомГруппа);
		НЗ.Отбор.Металлоцентр.Установить(Металлоцентр);
		НЗ.Отбор.ТипПоказателя.Установить(Перечисления.АГ_ТипыПоказателейФакторовОтпускнойЦены.Малотоннажность);
		НЗ.Прочитать();
		НЗ.Очистить();
		НЗ.Записать();
	КонецЕсли;
	
	Для Каждого ТекСтр Из Объект.НаценкаЗаМалотоннажность Цикл
		
		НЗ = РегистрыСведений.АГ_ФакторыОтпускнойЦены.СоздатьМенеджерЗаписи();
		
		НЗ.Металлоцентр = Металлоцентр;
		НЗ.ИндексСтроки = ТекСтр.НомерСтроки;
		НЗ.НоменклатурнаяГруппа = ТекСтр.НоменклатурнаяГруппа;
		НЗ.ТипПоказателя = Перечисления.АГ_ТипыПоказателейФакторовОтпускнойЦены.Малотоннажность;
		НЗ.Ранжирование = ТекСтр.Вес;
		НЗ.ЗначениеТрансформации = ТекСтр.Наценка;
		НЗ.ИзмерениеТрансформации = ТекСтр.Измерение;
		
		НЗ.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФакторыВнешнейЦены_ОстаткиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	 Если НоваяСтрока И Не  ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТипНастройки) Тогда
		Элемент.ТекущиеДанные.ТипНастройки = ПредопределенноеЗначение("Перечисление.АГ_ТипыНастроекФакторовВнейшнейЦены.УровеньОстатков");
	КонецЕсли;
	
	Элемент.Текущиеданные.НоменклатурнаяГруппа = Элементы.ПараметрыЦенообразования.ТекущиеДанные.НоменклатурнаяГруппа;

КонецПроцедуры

&НаКлиенте
Процедура ФакторыВнешнейЦены_СкоростьПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не  ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТипНастройки) Тогда
		Элемент.ТекущиеДанные.ТипНастройки = ПредопределенноеЗначение("Перечисление.АГ_ТипыНастроекФакторовВнейшнейЦены.СкоростьПродаж");
	КонецЕсли;
	
	Элемент.Текущиеданные.НоменклатурнаяГруппа = Элементы.ПараметрыЦенообразования.ТекущиеДанные.НоменклатурнаяГруппа;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФалгиКонтрольСпопоставления(Команда)
	
	Для Каждого СтрокаТаблицыФормы Из Объект.КонтрольСопоставления Цикл
		ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
		Если Элементы.КонтрольСопоставления.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			СтрокаТаблицыФормы.Выбрано = Истина;
		КонецЕсли
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагиКонтрольСопоставления(Команда)
	
	Для Каждого СтрокаТаблицыФормы Из Объект.КонтрольСопоставления Цикл
		ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
		Если Элементы.КонтрольСопоставления.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			СтрокаТаблицыФормы.Выбрано = Ложь;
		КонецЕсли
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиКонтрольСопоставления(Команда)
	ПроизвестиКонтрольСопоставленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроизвестиКонтрольСопоставленияНаСервере()
	
	Объект.НоваяНоменклатураСопоставление.Очистить();
	Объект.КонтрольСопоставления.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка КАК КонсолидированнаяНоменклатура,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион КАК Регион,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент КАК Конкурент,
	|	ИСТИНА КАК Выбрано,
	|	ВЫРАЗИТЬ(СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Наименование23Met КАК СТРОКА(300)) КАК НоменклатураНаименование,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Идентификатор23Met КАК НоменклатураИД,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.РазделСайта КАК РазделСайта,
	|	-1 КАК Цена
	|ИЗ
	|	Справочник.Номенклатура.АГ_Сопоставленная23Мет КАК СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет
	|ГДЕ
	|	(СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион = &Регион
	|			ИЛИ &ВсеРегионы)
	|	И (СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ВидНоменклатуры В (&НоменклатурнаяГруппа)
	|			ИЛИ &ВсеНомГруппы)
	|	И НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ПометкаУдаления
	|	И НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ЭтоГруппа
	|	И НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.РазделСайта = ЗНАЧЕНИЕ(Справочник.АГ_СтруктураРазделов23met.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Наименование23Met КАК СТРОКА(300)),
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Идентификатор23Met,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.РазделСайта,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Регион", Металлоцентр.АГ_ОсновнойРегион);
	Запрос.УстановитьПараметр("ВсеРегионы", Не ЗначениеЗаполнено(Металлоцентр));
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппаСпис);
	Запрос.УстановитьПараметр("ВсеНомГруппы", НоменклатурнаяГруппаСпис.Количество() = 0);
	
	Объект.КонтрольСопоставления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПропарситьСайт_КонтрольСопоставления();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Основная.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	               |	Основная.Выбрано КАК Выбрано,
	               |	Основная.Регион КАК Регион,
	               |	Основная.Конкурент КАК Конкурент,
	               |	Основная.НоменклатураНаименование КАК НоменклатураНаименование,
	               |	Основная.НоменклатураИД КАК НоменклатураИД,
	               |	Основная.РазделСайта КАК РазделСайта,
	               |	Основная.НоваяНоменклатураНаименование КАК НоваяНоменклатураНаименование,
	               |	Основная.НоваяНоменклатураИД КАК НоваяНоменклатураИД,
	               |	Основная.Цена КАК Цена
	               |ПОМЕСТИТЬ ТЗ1
	               |ИЗ
	               |	&Основная КАК Основная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Новые.Регион КАК Регион,
	               |	Новые.Конкурент КАК Конкурент,
	               |	Новые.РазделСайта КАК РазделСайта,
	               |	Новые.НоваяНоменклатураИД КАК НоваяНоменклатураИД,
	               |	Новые.НоваяНоменклатураНаименование КАК НоваяНоменклатураНаименование,
	               |	Новые.Цена КАК Цена
	               |ПОМЕСТИТЬ ТЗ_2
	               |ИЗ
	               |	&Новые КАК Новые
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ1.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	               |	ТЗ1.Выбрано КАК Выбрано,
	               |	ТЗ1.Регион КАК Регион,
	               |	ТЗ1.Конкурент КАК Конкурент,
	               |	ТЗ1.НоменклатураНаименование КАК НоменклатураНаименование,
	               |	ТЗ1.НоменклатураИД КАК НоменклатураИД,
	               |	ТЗ1.РазделСайта КАК РазделСайта,
	               |	ТЗ1.Цена КАК Цена,
	               |	ВложенныйЗапрос.ДоступноДляЗамены КАК ДоступноДляЗамены,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ДоступноДляЗамены = 1
	               |			ТОГДА ТЗ_2.НоваяНоменклатураИД
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК НоваяНоменклатураИД,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ДоступноДляЗамены = 1
	               |			ТОГДА ТЗ_2.НоваяНоменклатураНаименование
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК НоваяНоменклатураНаименование,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ДоступноДляЗамены = 1
	               |			ТОГДА ТЗ_2.Цена
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЦенаСайта
	               |ПОМЕСТИТЬ Таб3
	               |ИЗ
	               |	ТЗ1 КАК ТЗ1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТЗ_2.Регион КАК Регион,
	               |			ТЗ_2.Конкурент КАК Конкурент,
	               |			ТЗ_2.РазделСайта КАК РазделСайта,
	               |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЗ_2.НоваяНоменклатураИД) КАК ДоступноДляЗамены
	               |		ИЗ
	               |			ТЗ_2 КАК ТЗ_2
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТЗ_2.Регион,
	               |			ТЗ_2.Конкурент,
	               |			ТЗ_2.РазделСайта) КАК ВложенныйЗапрос
	               |		ПО ТЗ1.Регион = ВложенныйЗапрос.Регион
	               |			И ТЗ1.Конкурент = ВложенныйЗапрос.Конкурент
	               |			И ТЗ1.РазделСайта = ВложенныйЗапрос.РазделСайта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_2 КАК ТЗ_2
	               |		ПО ТЗ1.Регион = ТЗ_2.Регион
	               |			И ТЗ1.Конкурент = ТЗ_2.Конкурент
	               |			И ТЗ1.РазделСайта = ТЗ_2.РазделСайта
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЗ1.Выбрано,
	               |	ТЗ1.НоменклатураИД,
	               |	ТЗ1.КонсолидированнаяНоменклатура,
	               |	ТЗ1.Регион,
	               |	ТЗ1.Конкурент,
	               |	ТЗ1.Цена,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ДоступноДляЗамены = 1
	               |			ТОГДА ТЗ_2.НоваяНоменклатураИД
	               |		ИНАЧЕ """"
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ДоступноДляЗамены = 1
	               |			ТОГДА ТЗ_2.НоваяНоменклатураНаименование
	               |		ИНАЧЕ """"
	               |	КОНЕЦ,
	               |	ТЗ1.РазделСайта,
	               |	ТЗ1.НоменклатураНаименование,
	               |	ВложенныйЗапрос.ДоступноДляЗамены,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ДоступноДляЗамены = 1
	               |			ТОГДА ТЗ_2.Цена
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_2.Регион КАК Регион,
	               |	ТЗ_2.Конкурент КАК Конкурент,
	               |	ТЗ_2.РазделСайта КАК РазделСайта,
	               |	ТЗ_2.НоваяНоменклатураИД КАК НоваяНоменклатураИД,
	               |	ТЗ_2.НоваяНоменклатураНаименование КАК НоваяНоменклатураНаименование,
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК КонсолидированнаяНоменклатура,
	               |	0 КАК Цена,
	               |	ИСТИНА КАК Выбрано,
	               |	"""" КАК НоменклатураНаименование,
	               |	"""" КАК НоменклатураИД,
	               |	1 КАК ДоступноДляЗамены,
	               |	ТЗ_2.Цена КАК ЦенаСайта
	               |ПОМЕСТИТЬ Таб4
	               |ИЗ
	               |	ТЗ_2 КАК ТЗ_2
	               |ГДЕ
	               |	НЕ ТЗ_2.НоваяНоменклатураИД В
	               |				(ВЫБРАТЬ
	               |					Таб3.НоваяНоменклатураИД КАК НоваяНоменклатураИД
	               |				ИЗ
	               |					Таб3 КАК Таб3)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Таб3.Регион,
	               |	Таб3.Конкурент,
	               |	Таб3.РазделСайта,
	               |	Таб3.НоваяНоменклатураИД,
	               |	Таб3.НоваяНоменклатураНаименование,
	               |	Таб3.КонсолидированнаяНоменклатура,
	               |	Таб3.Цена,
	               |	Таб3.Выбрано,
	               |	Таб3.НоменклатураНаименование,
	               |	Таб3.НоменклатураИД,
	               |	Таб3.ДоступноДляЗамены,
	               |	Таб3.ЦенаСайта
	               |ИЗ
	               |	Таб3 КАК Таб3
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб4.Регион КАК Регион,
	               |	Таб4.Конкурент КАК Конкурент,
	               |	Таб4.РазделСайта КАК РазделСайта,
	               |	Таб4.НоваяНоменклатураИД КАК НоваяНоменклатураИД,
	               |	Таб4.НоваяНоменклатураНаименование КАК НоваяНоменклатураНаименование,
	               |	Таб4.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	               |	Таб4.Цена КАК Цена,
	               |	Таб4.Выбрано КАК Выбрано,
	               |	Таб4.НоменклатураНаименование КАК НоменклатураНаименование,
	               |	Таб4.НоменклатураИД КАК НоменклатураИД,
	               |	ЕСТЬNULL(Таб4.ДоступноДляЗамены, 0) КАК ДоступноДляЗамены,
	               |	МАКСИМУМ(ЕСТЬNULL(КонкурентыМеталлоцентров.Парсинг, ЛОЖЬ)) КАК Парсинг,
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Цена КАК ЦенаТекущая,
	               |	Таб4.ЦенаСайта КАК ЦенаСайта
	               |ИЗ
	               |	Таб4 КАК Таб4
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_КонкурентыМеталлоцентров КАК КонкурентыМеталлоцентров
	               |		ПО Таб4.Конкурент = КонкурентыМеталлоцентров.Конкурент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ЦеныКонкурентов.СрезПоследних КАК ЦеныКонсолидированнойНоменклатурыСрезПоследних
	               |		ПО Таб4.Регион = ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион
	               |			И Таб4.КонсолидированнаяНоменклатура = ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура
	               |			И Таб4.Конкурент = ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент
	               |ГДЕ
	               |	НЕ(НЕ Таб4.НоменклатураНаименование = """"
	               |				И НЕ ЕСТЬNULL(Таб4.ДоступноДляЗамены, 0) = 0)
	               |	И ЕСТЬNULL(КонкурентыМеталлоцентров.Парсинг, ЛОЖЬ) = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Таб4.НоваяНоменклатураНаименование,
	               |	Таб4.Конкурент,
	               |	Таб4.НоменклатураНаименование,
	               |	Таб4.Выбрано,
	               |	Таб4.НоваяНоменклатураИД,
	               |	Таб4.РазделСайта,
	               |	Таб4.Регион,
	               |	Таб4.НоменклатураИД,
	               |	Таб4.КонсолидированнаяНоменклатура,
	               |	Таб4.Цена,
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Цена,
	               |	ЕСТЬNULL(Таб4.ДоступноДляЗамены, 0),
	               |	Таб4.ЦенаСайта";

	Запрос.УстановитьПараметр("Основная", Объект.КонтрольСопоставления.Выгрузить());
	Запрос.УстановитьПараметр("Новые", Объект.НоваяНоменклатураСопоставление.Выгрузить());
	
	Объект.КонтрольСопоставления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого ТекСтр Из Объект.КонтрольСопоставления Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтр.НоваяНоменклатураИД) И НЕ ТекСтр.ДоступноДляЗамены = 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Регион", ТекСтр.Регион);
			ПараметрыОтбора.Вставить("Конкурент", ТекСтр.Конкурент);
			ПараметрыОтбора.Вставить("РазделСайта", ТекСтр.РазделСайта);
			
			НайденныеСтроки = Объект.НоваяНоменклатураСопоставление.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Сч = 1;
				НаименованиеНоменклатуры = "";
				ИДНоменклатуры = "";
				
				Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
					НаименованиеНоменклатуры = НаименованиеНоменклатуры + ?(Сч = 1, "", "; ") + СтрокаТаблицы.НоваяНоменклатураНаименование;
					ИДНоменклатуры = ИДНоменклатуры + ?(Сч = 1, "", "; ") + СтрокаТаблицы.НоваяНоменклатураИД;
					
					Сч = Сч + 1;
				КонецЦикла;
				
				ТекСтр.НоваяНоменклатураНаименование = НаименованиеНоменклатуры;
				ТекСтр.НоваяНоменклатураИД = ИДНоменклатуры;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтр.КонсолидированнаяНоменклатура) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка КАК Ссылка,
			               |	ЕСТЬNULL(ЦеныКонсолидированнойНоменклатурыСрезПоследних.Цена, 0) КАК Цена
			               |ИЗ
			               |	Справочник.Номенклатура.АГ_Сопоставленная23Мет КАК СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ЦеныКонкурентов.СрезПоследних КАК ЦеныКонсолидированнойНоменклатурыСрезПоследних
			               |		ПО СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка = ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура
			               |			И СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент = ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент
			               |			И СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион = ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион
			               |ГДЕ
			               |	НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ПометкаУдаления
			               |	И НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ЭтоГруппа
			               |	И СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент = &Конкурент
			               |	И СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион = &Регион
			               |	И СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.РазделСайта = &РазделСайта";
			
			Запрос.УстановитьПараметр("Конкурент", текСтр.Конкурент);
			Запрос.УстановитьПараметр("Регион", ТекСтр.Регион);
			Запрос.УстановитьПараметр("РазделСайта", ТекСтр.РазделСайта);
			
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				
				ТекСтр.КонсолидированнаяНоменклатура = Выборка.Ссылка;
				ТекСтр.ЦенаТекущая = Выборка.Цена;
			Конецесли;
		КонецЕсли;
	КонецЦикла;

	КонецПроцедуры

&НаСервере
Процедура ПропарситьСайт_КонтрольСопоставления()
	
	ТЗ = Объект.КонтрольСопоставления.Выгрузить();
	ТЗ.Свернуть("Регион,РазделСайта");
	
	Для Каждого ЭлементТекущийРегион Из ТЗ Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементТекущийРегион.Регион.АГ_АдресСайта23met) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭлементТекущийРегион.РазделСайта.АдресРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресРаздела = СформироватьПолныйАдресРаздела(ЭлементТекущийРегион.Регион, ЭлементТекущийРегион.РазделСайта);
		
		ПропарситьКаталог_КонтрольСопоставления(ПолучитьЧистыйАдресСайта(АдресРаздела), ЭлементТекущийРегион.Регион, ЭлементТекущийРегион.РазделСайта);
		
		ПостроительОтчета = Новый ПостроительОтчета; 
		
		ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(Объект.КонтрольСопоставления.Выгрузить());
		
		НовыйОтбор = ПостроительОтчета.Отбор.Добавить("Цена"); 
		НовыйОтбор.Использование = Истина; 
		НовыйОтбор.ВидСравнения = ВидСравнения.НеРавно;
		НовыйОтбор.Значение = -1; 
		
		ПостроительОтчета.Выполнить();
		РезультатОтбора = ПостроительОтчета.Результат.Выгрузить();
		
		Для Каждого ТекСтр Из РезультатОтбора Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("НоменклатураИД", ТекСтр.НоменклатураИД);
			
			НайденныеСтроки = Объект.КонтрольСопоставления.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекСтрока Из найденныеСтроки Цикл
				Объект.КонтрольСопоставления.Удалить(ТекСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПолныйАдресРаздела(Регион, Раздел)
	
	ПолныйАдресРаздела = Раздел.АдресРаздела;	
	ПолныйАдресРаздела = Регион.АГ_АдресСайта23met + ?(ЗначениеЗаполнено(ПолныйАдресРаздела), "/" + ПолныйАдресРаздела, "");
	
	Возврат ПолныйАдресРаздела;
	
КонецФункции

&НаСервере
Процедура ПропарситьКаталог_КонтрольСопоставления(Знач Каталог, Знач ТекущийРегион, Знач ТекущийРаздел)
	
	МассивИДПоставщиковДляОтбора = ПолучитьМассивИДПоставщиков_КонтрольСопоставления();
	
	Соединение = Новый HTTPСоединение(Каталог);
	ЧтениеХТМЛ = Новый ЧтениеHTML; 
	ПостроительДОМ = Новый ПостроительDOM;
	ИмяФайла = ПолучитьИмяВременногоФайла("html"); 
	Соединение.Получить("", ИмяФайла);
	ЧтениеХТМЛ.ОткрытьФайл(ИмяФайла, "UTF-8"); 
	ДокументХТМЛ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ);
	
	УровеньСтраницы = ПолучитьУровеньТекущейСтраницы(Каталог);
	
	Если УровеньСтраницы = 1 Тогда
		ЭлементЗаголовокРазделов = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("header");
		Если ЭлементЗаголовокРазделов <> Неопределено Тогда
			ЭлементыЛИ = ЭлементЗаголовокРазделов.ПолучитьЭлементыПоИмени("li");
			Для Каждого ЭлементЛИ Из ЭлементыЛИ Цикл
				ЭлементыА = ЭлементЛИ.ПолучитьЭлементыПоИмени("a");
				Для Каждого ЭлементА Из ЭлементыА Цикл
					Если ЭлементА.ИмяКласса = "logo" Тогда 
						Продолжить;
					КонецЕсли;
					Если Не ПустаяСтрока(ЭлементА.Гиперссылка) Тогда
						ПропарситьКаталог_КонтрольСопоставления(ПолучитьЧистыйАдресСайта(ЭлементА.Гиперссылка), ТекущийРегион, ТекущийРаздел);
					Иначе
						ЭлементУЛ = ЭлементА.ПервыйДочерний;
						ЭлементыЛИПодчиненные = ЭлементУЛ.ПолучитьЭлементыПоИмени("li");
						Для Каждого ЭлементЛИПодчиненный Из ЭлементыЛИПодчиненные Цикл
							ЭлементыАПодчененные = ЭлементЛИ.ПолучитьЭлементыПоИмени("a");
							Для Каждого ЭлементАПодчиненный Из ЭлементыАПодчененные Цикл
								Если ЭлементАПодчиненный.ИмяКласса = "submenu_link" Тогда 
									Продолжить;
								КонецЕсли;
								Если Не ПустаяСтрока(ЭлементАПодчиненный.Гиперссылка) Тогда
									ПропарситьКаталог_КонтрольСопоставления(ПолучитьЧистыйАдресСайта(ЭлементАПодчиненный.Гиперссылка), ТекущийРегион, ТекущийРаздел);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли УровеньСтраницы = 2 Тогда
		ЛеваяКолонка = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("left-container");	
		Если ЛеваяКолонка <> Неопределено Тогда
			ЭлементыНАВЛевойКолонки = ЛеваяКолонка.ПолучитьЭлементыПоИмени("nav");
			Если ЭлементыНАВЛевойКолонки.Количество() > 0 Тогда
				Для Каждого ЭлементНАВЛевойКолонки Из ЭлементыНАВЛевойКолонки Цикл
					ЭлементыУЛ = ЭлементНАВЛевойКолонки.ПолучитьЭлементыПоИмени("ul");		
					Для Каждого ЭлементУЛ Из ЭлементыУЛ Цикл
						ЭлементыЛИ = ЭлементУЛ.ПолучитьЭлементыПоИмени("li");		
						Для Каждого ЭлементЛИ Из ЭлементыЛИ Цикл
							Если Не ПустаяСтрока(ЭлементЛИ.ПервыйДочерний.Гиперссылка) Тогда
								ПропарситьКаталог_КонтрольСопоставления(ПолучитьЧистыйАдресСайта(ЭлементЛИ.ПервыйДочерний.Гиперссылка), ТекущийРегион, ТекущийРаздел);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли УровеньСтраницы > 2 Тогда
		ЭлементТаблицаТоваров = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("table-price");	
		Если ЭлементТаблицаТоваров = Неопределено Тогда
			ЭлементРазмерыТруб = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("price-nosize-sizes-container");	
			Если ЭлементРазмерыТруб <> Неопределено Тогда
				ЭлементыДИВ = ЭлементРазмерыТруб.ПолучитьЭлементыПоИмени("div");		
				Для Каждого ЭлементДИВ Из ЭлементыДИВ Цикл
					ЭлементыА = ЭлементДИВ.ПолучитьЭлементыПоИмени("a");		
					Для Каждого ЭлементА Из ЭлементыА Цикл
						Если Не ПустаяСтрока(ЭлементА.Гиперссылка) Тогда
							АдресПервогоУровня = ПолучитьАдресПервогоУровня(ПолучитьЧистыйАдресСайта(Каталог));
							ПропарситьКаталог_КонтрольСопоставления(ПолучитьЧистыйАдресСайта(АдресПервогоУровня) + ПолучитьЧистыйАдресСайта(ЭлементА.Гиперссылка), ТекущийРегион, ТекущийРаздел);					
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе	
			НомерКолонкиМаркаСтали = 0;
			НомерКолонкиДлина = 0;
			НомерКолонкиПредставлениеПоставщика = 5;
			ЭлементЗаголовокТаблицы = ЭлементТаблицаТоваров.ПервыйДочерний;
			ЭлементыТР = ЭлементЗаголовокТаблицы.ПолучитьЭлементыПоИмени("tr");
			Для Каждого ЭлементТР Из ЭлементыТР Цикл
				
				СчетчикКолонок = 1;
				ЭлементыКолонкиТаблицы = ЭлементТР.ПолучитьЭлементыПоИмени("th");
				Для Каждого ЭлементКолонкиТаблицы Из ЭлементыКолонкиТаблицы Цикл
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Марка стали" Тогда
						НомерКолонкиМаркаСтали = СчетчикКолонок;
					КонецЕсли;
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Длина" Тогда
						НомерКолонкиДлина = СчетчикКолонок;
					КонецЕсли;
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Поставщик" Тогда
						НомерКолонкиПредставлениеПоставщика = СчетчикКолонок + 1;
					КонецЕсли;
					СчетчикКолонок = СчетчикКолонок + 1;	
				КонецЦикла;
			КонецЦикла;
			
			ЭлементТелоТаблицы = ЭлементТаблицаТоваров.ПоследнийДочерний;	
			ЭлементыТР = ЭлементТелоТаблицы.ПолучитьЭлементыПоИмени("tr");
			Для Каждого ЭлементТР Из ЭлементыТР Цикл
				
				//ИД поставщика
				ПоставщикИД = "";
				УзелПоставщикИД = ЭлементТР.Атрибуты.ПолучитьИменованныйЭлемент("data-firm-name");
				Если УзелПоставщикИД <> Неопределено Тогда
					ПоставщикИД = УзелПоставщикИД.Значение;	
				КонецЕсли;
				
				//ИД номенклатуры
				УзелНоменклатураИД = ЭлементТР.Атрибуты.ПолучитьИменованныйЭлемент("data-position-id");
				Если УзелНоменклатураИД <> Неопределено Тогда
					НоменклатураИД = УзелНоменклатураИД.Значение;
					
					ЭлементыКолонкиТаблицы = ЭлементТР.ПолучитьЭлементыПоИмени("td");
					СчетчикКолонок = 1;
					НоменклатураНаименование = "";
					Для Каждого ЭлементКолонкиТаблицы Из ЭлементыКолонкиТаблицы Цикл
						Если СчетчикКолонок = 1 Тогда
							НоменклатураНаименование = ЭлементКолонкиТаблицы.ТекстовоеСодержимое;
						ИначеЕсли СчетчикКолонок = НомерКолонкиМаркаСтали Тогда
							МаркаСтали = ЭлементКолонкиТаблицы.ТекстовоеСодержимое;	
							НоменклатураНаименование = НоменклатураНаименование + ?(ЗначениеЗаполнено(МаркаСтали), " " + МаркаСтали, "");
						ИначеЕсли СчетчикКолонок = НомерКолонкиДлина Тогда
							Длина = ЭлементКолонкиТаблицы.ТекстовоеСодержимое;	
							НоменклатураНаименование = НоменклатураНаименование + ?(ЗначениеЗаполнено(Длина), " " + Длина, "");
						ИначеЕсли СчетчикКолонок = НомерКолонкиПредставлениеПоставщика Тогда
						Иначе
							ЭлементыСПАН = ЭлементКолонкиТаблицы.ПолучитьЭлементыПоИмени("span");
							Для Каждого ЭлементСПАН Из ЭлементыСПАН Цикл
								Если ЭлементСПАН.ИмяКласса = "cost" Тогда
									Цена = ПреобразоватьВЧисло(ЭлементСПАН.ТекстовоеСодержимое);	
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						СчетчикКолонок = СчетчикКолонок + 1;
					КонецЦикла;
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("НоменклатураИД", НоменклатураИД);
					НайденныеСтроки = Объект.КонтрольСопоставления.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						Конкурент = ПолучитьКонтрагентаПоИД(ПоставщикИД);
						
						Если ЗначениеЗаполнено(Конкурент) Тогда
							НовСтр = Объект.НоваяНоменклатураСопоставление.Добавить();
							Новстр.Конкурент = Конкурент;
							НовСтр.НоваяНоменклатураИД = НоменклатураИД;
							НовСтр.НоваяНоменклатураНаименование = НоменклатураНаименование;
							НовСтр.РазделСайта = ТекущийРаздел;
							НовСтр.Регион = ТекущийРегион;
							НовСтр.Цена = Цена;
						КонецЕсли;
						
						Продолжить;
					Иначе
						
						ТекСтрока = НайденныеСтроки[0];
						
					КонецЕсли;
					
					ЭлементыКолонкиТаблицы = ЭлементТР.ПолучитьЭлементыПоИмени("td");
					СчетчикКолонок = 1;
					Для Каждого ЭлементКолонкиТаблицы Из ЭлементыКолонкиТаблицы Цикл
						Если СчетчикКолонок = 1 Тогда
						ИначеЕсли СчетчикКолонок = НомерКолонкиМаркаСтали Тогда
						ИначеЕсли СчетчикКолонок = НомерКолонкиДлина Тогда
						ИначеЕсли СчетчикКолонок = НомерКолонкиПредставлениеПоставщика Тогда
						Иначе
							ЭлементыСПАН = ЭлементКолонкиТаблицы.ПолучитьЭлементыПоИмени("span");
							Для Каждого ЭлементСПАН Из ЭлементыСПАН Цикл
								Если ЭлементСПАН.ИмяКласса = "cost" Тогда
									ТекСтрока.Цена = ПреобразоватьВЧисло(ЭлементСПАН.ТекстовоеСодержимое);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						СчетчикКолонок = СчетчикКолонок + 1;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧистыйАдресСайта(Знач ТекущийАдресСайта)
	
	ЧистыйАдресСайта = СтрЗаменить(ТекущийАдресСайта, "http://", "");
	ЧистыйАдресСайта = СтрЗаменить(ЧистыйАдресСайта, "https://", "");
	
	Возврат ЧистыйАдресСайта;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивИДПоставщиков_КонтрольСопоставления()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыИдентификаторы23met.Идентификатор КАК Идентификатор23met
	|ИЗ
	|	Справочник.Партнеры.АГ_Идентификаторы23met КАК КонтрагентыИдентификаторы23met
	|ГДЕ
	|	КонтрагентыИдентификаторы23met.Ссылка В(&СписокКонтрагентов)";
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", Объект.КонтрольСопоставления.Выгрузить().ВыгрузитьКолонку("Конкурент"));
	МассивИДПоставщиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор23met");
	
	Возврат МассивИДПоставщиков;
	
КонецФункции

&Насервере
Функция ПолучитьУровеньТекущейСтраницы(Знач АдресСтраницы)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресСтраницы, "/", Истина);
	
	Возврат МассивСтрок.Количество();
	
КонецФункции

&НаСервере
Функция ПолучитьАдресПервогоУровня(Знач АдресСтраницы)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресСтраницы, "/", Истина);
	Если МассивСтрок.Количество() > 0 Тогда
		АдресПервогоУровня = МассивСтрок[0];
	Иначе
		АдресПервогоУровня = "";
	КонецЕсли;
	
	Возврат АдресПервогоУровня;
	
КонецФункции

&НаСервере
Функция ПреобразоватьВЧисло(Знач ЧислоСтрокой)
	
	Попытка
		Результат = Число(СтрЗаменить(ЧислоСтрокой, " ", ""));
	Исключение
		Результат = 0;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтрагентаПоИД(ПоставщикИД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтрагентыИдентификаторы23met.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры.АГ_Идентификаторы23met КАК КонтрагентыИдентификаторы23met
	|ГДЕ
	|	КонтрагентыИдентификаторы23met.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ПоставщикИД);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПроизвестиЗамену_КонтрольСопоставленияНаСервере()
	
	Для Каждого ТекСтр Из Объект.КонтрольСопоставления Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтр.КонсолидированнаяНоменклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтр.Выбрано И ЗначениеЗаполнено(ТекСтр.НоваяНоменклатураНаименование) И ЗначениеЗаполнено(ТекСтр.НоваяНоменклатураИД) Тогда
			
			НомОбъект = ТекСтр.КонсолидированнаяНоменклатура.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ТекСтр.НоменклатураИД) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Идентификатор23Met", ТекСтр.НоменклатураИД);
				НайденныеСтроки = НомОбъект.АГ_Сопоставленная23Мет.НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого ТекСтрока Из найденныеСтроки Цикл
					
					НомОбъект.АГ_Сопоставленная23Мет.Удалить(ТекСтрока);
					
				КонецЦикла;
			КонецЕсли;
			
			МассивНоменклатур = ПолучитьМассивИзСтроки(ТекСтр.НоваяНоменклатураНаименование);
			МассивИД = ПолучитьМассивИзСтроки(ТекСтр.НоваяНоменклатураИД);
			
			Сч = 0;
			Для каждого ТекЭлем Из МассивНоменклатур Цикл
				Если НомОбъект.АГ_Сопоставленная23Мет.Найти(МассивИД[Сч], "Идентификатор23Met") = Неопределено Тогда
					
					НовСтр = НомОбъект.АГ_Сопоставленная23Мет.Добавить();
					НовСтр.Идентификатор23Met = МассивИД[Сч];
					НовСтр.Конкурент = ТекСтр.Конкурент;
					НовСтр.Наименование23Met = ТекЭлем;
					НовСтр.РазделСайта = ТекСтр.РазделСайта;
					НовСтр.Регион = ТекСтр.Регион;
					
				КонецЕсли;
				
				Сч = Сч + 1;
			КонецЦикла;
			
			НомОбъект.Записать();
			ТекСтр.Выбрано = Ложь;
			
		ИначеЕсли ТекСтр.Выбрано И ТекСтр.ДоступноДляЗамены = 0 И ЗначениеЗаполнено(ТекСтр.НоменклатураИД) Тогда
			
			НомОбъект = ТекСтр.КонсолидированнаяНоменклатура.ПолучитьОбъект();
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Идентификатор23Met", ТекСтр.НоменклатураИД);
			НайденныеСтроки = НомОбъект.АГ_Сопоставленная23Мет.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого ТекСтрока Из найденныеСтроки Цикл
				
				НомОбъект.АГ_Сопоставленная23Мет.Удалить(ТекСтрока);
				
			КонецЦикла;
			НомОбъект.Записать();
			
			ТекСтр.Выбрано = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиЗамену_КонтрольСопоставления(Команда)
	ПроизвестиЗамену_КонтрольСопоставленияНаСервере();
	
	Предупреждение("Замена выполнена!");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивИзСтроки(ВходнаяСтрока)
	
	МассивВозврата = Новый массив;
	
	Если ВходнаяСтрока = "" Тогда
		Возврат МассивВозврата.Добавить("");
	Конецесли;
	
	Пока НЕ СтрНайти(ВходнаяСтрока, "; ") = 0 Цикл
		
		Смв = СтрНайти(ВходнаяСтрока, "; ");
		МассивВозврата.Добавить(Лев(ВходнаяСтрока,Смв-1));
		ВходнаяСтрока = Прав(ВходнаяСтрока, СтрДлина(ВходнаяСтрока) - Смв - 1);
	КонецЦикла;
	
	МассивВозврата.Добавить(СОКРЛП(ВходнаяСтрока));
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура СнятьФлаги_ПарсингСайта(Команда)
	
	Для Каждого СтрокаТаблицыФормы Из Объект.ПарсингЦен Цикл
		ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
		Если Элементы.ПарсингЦен.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			СтрокаТаблицыФормы.Выбрано = Ложь;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги_ПарсингСайта(Команда)
	
	Для Каждого СтрокаТаблицыФормы Из Объект.ПарсингЦен Цикл
		ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
		Если Элементы.ПарсингЦен.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			СтрокаТаблицыФормы.Выбрано = Истина;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Парсинг(Команда)
	ПарсингНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПарсингНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка КАК КонсолидированнаяНоменклатура,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион КАК Регион,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент КАК Конкурент,
	|	Валюты.Ссылка КАК Валюта,
	|	ИСТИНА КАК Выбрано,
	|	&ТекущаяДата КАК Период,
	|	0 КАК Цена,
	|	ВЫРАЗИТЬ(СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Наименование23Met КАК СТРОКА(1000)) КАК НоменклатураНаименование,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Идентификатор23Met КАК НоменклатураИД,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.РазделСайта КАК РазделСайта,
	|	""Не выявлено ни одной цены."" КАК Комментарий,
	|	КонкурентыМеталлоцентров.Парсинг КАК Парсинг
	|ИЗ
	|	Справочник.Номенклатура.АГ_Сопоставленная23Мет КАК СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО (Валюты.Код = ""643"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_КонкурентыМеталлоцентров КАК КонкурентыМеталлоцентров
	|		ПО СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ВидНоменклатуры = КонкурентыМеталлоцентров.НоменклатурнаяГруппа
	|			И СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент = КонкурентыМеталлоцентров.Конкурент
	|			И СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион = КонкурентыМеталлоцентров.Регион.АГ_ОсновнойРегион
	|ГДЕ
	|	(СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион = &Регион
	|			ИЛИ &ВсеРегионы)
	|	И (СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ВидНоменклатуры В (&НоменклатурнаяГруппа)
	|			ИЛИ &ВсеНомГруппы)
	|	И НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ПометкаУдаления
	|	И НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка.ЭтоГруппа
	|	И НЕ СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.РазделСайта = ЗНАЧЕНИЕ(Справочник.АГ_СтруктураРазделов23met.ПустаяСсылка)
	|	И ЕСТЬNULL(КонкурентыМеталлоцентров.Парсинг, ЛОЖЬ) = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Регион,
	|	Валюты.Ссылка,
	|	ВЫРАЗИТЬ(СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Наименование23Met КАК СТРОКА(1000)),
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Идентификатор23Met,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Конкурент,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.Ссылка,
	|	СОБи_КонсолидированнаяНоменклатураСопоставленная23Мет.РазделСайта,
	|	КонкурентыМеталлоцентров.Парсинг";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Регион", Металлоцентр.АГ_ОсновнойРегион);
	Запрос.УстановитьПараметр("ВсеРегионы", НЕ ЗначениеЗаполнено(Металлоцентр));
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппаСпис);
	Запрос.УстановитьПараметр("ВсеНомГруппы", НоменклатурнаяГруппаСпис.Количество() = 0);
	
	Объект.ПарсингЦен.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПропарситьСайт();
	
	ЗаполнитьЦеныИКомментарии();
	
КонецПроцедуры

&НаСервере
Процедура ПропарситьСайт()
	
	ТЗ = Объект.ПарсингЦен.Выгрузить();
	ТЗ.Свернуть("Регион,РазделСайта");
	
	СчРазделов = 1;
	Для Каждого ЭлементТекущийРегион Из ТЗ Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементТекущийРегион.Регион.АГ_АдресСайта23met) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭлементТекущийРегион.РазделСайта.АдресРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресРаздела = СформироватьПолныйАдресРаздела(ЭлементТекущийРегион.Регион, ЭлементТекущийРегион.РазделСайта);
		
		ПропарситьКаталог(ПолучитьЧистыйАдресСайта(АдресРаздела), ЭлементТекущийРегион.Регион, ЭлементТекущийРегион.РазделСайта);
		
		СчРазделов = СчРазделов + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПропарситьКаталог(Знач Каталог, Знач ТекущийРегион, Знач ТекущийРаздел)
	
	МассивИДПоставщиковДляОтбора = ПолучитьМассивИДПоставщиков();
	
	Соединение = Новый HTTPСоединение(Каталог);
	ЧтениеХТМЛ = Новый ЧтениеHTML; 
	ПостроительДОМ = Новый ПостроительDOM;
	ИмяФайла = ПолучитьИмяВременногоФайла("html"); 
	Соединение.Получить("", ИмяФайла);
	ЧтениеХТМЛ.ОткрытьФайл(ИмяФайла, "UTF-8"); 
	ДокументХТМЛ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ);
	
	УровеньСтраницы = ПолучитьУровеньТекущейСтраницы(Каталог);
	
	Если УровеньСтраницы = 1 Тогда
		ЭлементЗаголовокРазделов = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("header");
		Если ЭлементЗаголовокРазделов <> Неопределено Тогда
			ЭлементыЛИ = ЭлементЗаголовокРазделов.ПолучитьЭлементыПоИмени("li");
			Для Каждого ЭлементЛИ Из ЭлементыЛИ Цикл
				ЭлементыА = ЭлементЛИ.ПолучитьЭлементыПоИмени("a");
				Для Каждого ЭлементА Из ЭлементыА Цикл
					Если ЭлементА.ИмяКласса = "logo" Тогда 
						Продолжить;
					КонецЕсли;
					Если Не ПустаяСтрока(ЭлементА.Гиперссылка) Тогда
						ПропарситьКаталог(ПолучитьЧистыйАдресСайта(ЭлементА.Гиперссылка), ТекущийРегион, ТекущийРаздел);
					Иначе
						ЭлементУЛ = ЭлементА.ПервыйДочерний;
						ЭлементыЛИПодчиненные = ЭлементУЛ.ПолучитьЭлементыПоИмени("li");
						Для Каждого ЭлементЛИПодчиненный Из ЭлементыЛИПодчиненные Цикл
							ЭлементыАПодчененные = ЭлементЛИ.ПолучитьЭлементыПоИмени("a");
							Для Каждого ЭлементАПодчиненный Из ЭлементыАПодчененные Цикл
								Если ЭлементАПодчиненный.ИмяКласса = "submenu_link" Тогда 
									Продолжить;
								КонецЕсли;
								Если Не ПустаяСтрока(ЭлементАПодчиненный.Гиперссылка) Тогда
									ПропарситьКаталог(ПолучитьЧистыйАдресСайта(ЭлементАПодчиненный.Гиперссылка), ТекущийРегион, ТекущийРаздел);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли УровеньСтраницы = 2 Тогда
		ЛеваяКолонка = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("left-container");	
		Если ЛеваяКолонка <> Неопределено Тогда
			ЭлементыНАВЛевойКолонки = ЛеваяКолонка.ПолучитьЭлементыПоИмени("nav");
			Если ЭлементыНАВЛевойКолонки.Количество() > 0 Тогда
				Для Каждого ЭлементНАВЛевойКолонки Из ЭлементыНАВЛевойКолонки Цикл
					ЭлементыУЛ = ЭлементНАВЛевойКолонки.ПолучитьЭлементыПоИмени("ul");		
					Для Каждого ЭлементУЛ Из ЭлементыУЛ Цикл
						ЭлементыЛИ = ЭлементУЛ.ПолучитьЭлементыПоИмени("li");		
						Для Каждого ЭлементЛИ Из ЭлементыЛИ Цикл
							Если Не ПустаяСтрока(ЭлементЛИ.ПервыйДочерний.Гиперссылка) Тогда
								ПропарситьКаталог(ПолучитьЧистыйАдресСайта(ЭлементЛИ.ПервыйДочерний.Гиперссылка), ТекущийРегион, ТекущийРаздел);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли УровеньСтраницы > 2 Тогда
		ЭлементТаблицаТоваров = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("table-price");	
		Если ЭлементТаблицаТоваров = Неопределено Тогда
			ЭлементРазмерыТруб = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("price-nosize-sizes-container");	
			Если ЭлементРазмерыТруб <> Неопределено Тогда
				ЭлементыДИВ = ЭлементРазмерыТруб.ПолучитьЭлементыПоИмени("div");		
				Для Каждого ЭлементДИВ Из ЭлементыДИВ Цикл
					ЭлементыА = ЭлементДИВ.ПолучитьЭлементыПоИмени("a");		
					Для Каждого ЭлементА Из ЭлементыА Цикл
						Если Не ПустаяСтрока(ЭлементА.Гиперссылка) Тогда
							АдресПервогоУровня = ПолучитьАдресПервогоУровня(ПолучитьЧистыйАдресСайта(Каталог));
							ПропарситьКаталог(ПолучитьЧистыйАдресСайта(АдресПервогоУровня) + ПолучитьЧистыйАдресСайта(ЭлементА.Гиперссылка), ТекущийРегион, ТекущийРаздел);					
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе	
			НомерКолонкиМаркаСтали = 0;
			НомерКолонкиДлина = 0;
			НомерКолонкиПредставлениеПоставщика = 5;
			ЭлементЗаголовокТаблицы = ЭлементТаблицаТоваров.ПервыйДочерний;
			ЭлементыТР = ЭлементЗаголовокТаблицы.ПолучитьЭлементыПоИмени("tr");
			Для Каждого ЭлементТР Из ЭлементыТР Цикл
				
				СчетчикКолонок = 1;
				ЭлементыКолонкиТаблицы = ЭлементТР.ПолучитьЭлементыПоИмени("th");
				Для Каждого ЭлементКолонкиТаблицы Из ЭлементыКолонкиТаблицы Цикл
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Марка стали" Тогда
						НомерКолонкиМаркаСтали = СчетчикКолонок;
					КонецЕсли;
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Длина" Тогда
						НомерКолонкиДлина = СчетчикКолонок;
					КонецЕсли;
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Поставщик" Тогда
						НомерКолонкиПредставлениеПоставщика = СчетчикКолонок + 1;
					КонецЕсли;
					СчетчикКолонок = СчетчикКолонок + 1;	
				КонецЦикла;
			КонецЦикла;
			
			ЭлементТелоТаблицы = ЭлементТаблицаТоваров.ПоследнийДочерний;	
			ЭлементыТР = ЭлементТелоТаблицы.ПолучитьЭлементыПоИмени("tr");
			Для Каждого ЭлементТР Из ЭлементыТР Цикл
				
				//ИД поставщика
				ПоставщикИД = "";
				УзелПоставщикИД = ЭлементТР.Атрибуты.ПолучитьИменованныйЭлемент("data-firm-name");
				Если УзелПоставщикИД <> Неопределено Тогда
					ПоставщикИД = УзелПоставщикИД.Значение;	
				КонецЕсли;
				
				Если МассивИДПоставщиковДляОтбора.Количество() > 0 И МассивИДПоставщиковДляОтбора.Найти(ПоставщикИД) = Неопределено Тогда
					Продолжить;					
				КонецЕсли;
				
				//ИД номенклатуры
				УзелНоменклатураИД = ЭлементТР.Атрибуты.ПолучитьИменованныйЭлемент("data-position-id");
				Если УзелНоменклатураИД <> Неопределено Тогда
					НоменклатураИД = УзелНоменклатураИД.Значение;
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("НоменклатураИД", НоменклатураИД);
					НайденныеСтроки = Объект.ПарсингЦен.НайтиСтроки(ПараметрыОтбора); 
					 
					Если НайденныеСтроки.Количество() = 0 Тогда
						Продолжить;
					Иначе
						ТекСтрока = НайденныеСтроки[0];
					КонецЕсли;
					
					ЭлементыКолонкиТаблицы = ЭлементТР.ПолучитьЭлементыПоИмени("td");
					СчетчикКолонок = 1;
					Для Каждого ЭлементКолонкиТаблицы Из ЭлементыКолонкиТаблицы Цикл
						Если СчетчикКолонок = 1 Тогда
						ИначеЕсли СчетчикКолонок = НомерКолонкиМаркаСтали Тогда
						ИначеЕсли СчетчикКолонок = НомерКолонкиДлина Тогда
						ИначеЕсли СчетчикКолонок = НомерКолонкиПредставлениеПоставщика Тогда
						Иначе
							ЭлементыСПАН = ЭлементКолонкиТаблицы.ПолучитьЭлементыПоИмени("span");
							Для Каждого ЭлементСПАН Из ЭлементыСПАН Цикл
								Если ЭлементСПАН.ИмяКласса = "cost" Тогда
									ТекСтрока.Цена = ПреобразоватьВЧисло(ЭлементСПАН.ТекстовоеСодержимое);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						СчетчикКолонок = СчетчикКолонок + 1;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивИДПоставщиков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыИдентификаторы23met.Идентификатор КАК Идентификатор23met
	|ИЗ
	|	Справочник.Партнеры.АГ_Идентификаторы23met КАК КонтрагентыИдентификаторы23met
	|ГДЕ
	|	КонтрагентыИдентификаторы23met.Ссылка В(&СписокКонтрагентов)";
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", Объект.ПарсингЦен.Выгрузить().ВыгрузитьКолонку("Конкурент"));
	МассивИДПоставщиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор23met");
	
	Возврат МассивИДПоставщиков;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЦеныИКомментарии()
	
	ТЗ_Копия = Объект.ПарсингЦен.Выгрузить(, "КонсолидированнаяНоменклатура,Конкурент,Цена");
	ТЗ_Парсинг = Объект.ПарсингЦен.Выгрузить();
	ТЗ_Парсинг.Свернуть("Выбрано,Период,КонсолидированнаяНоменклатура,Регион,Конкурент,Валюта");
	Объект.ПарсингЦен.Загрузить(ТЗ_Парсинг);
	
	Для Каждого ТекСтрока Из Объект.ПарсингЦен Цикл
		
		ТЗЦен = Новый ТаблицаЗначений;
		ТЗЦен.Колонки.Добавить("Цена");
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КонсолидированнаяНоменклатура", ТекСтрока.КонсолидированнаяНоменклатура);
		ПараметрыОтбора.Вставить("Конкурент", ТекСтрока.Конкурент);
		НайденныеСТроки = ТЗ_Копия.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого ТекЦена Из НайденныеСтроки Цикл
			НовЦена = ТЗЦен.Добавить();
			НовЦена.Цена = ТекЦена.Цена;
		КонецЦикла;
		
		
		ТЗЦен.Сортировать("Цена ВОЗР");
		
		Если ТЗЦен.Количество() = 0 Тогда
			
			ТекСтрока.Комментарий = "Не выявлено ни одной цены.";
			
		ИначеЕсли ТЗЦен.Количество() = 1 Тогда
			
			Если ТЗЦен[0].Цена = 0 Тогда
				
				ТекСтрока.Комментарий = "Не выявлено ни одной цены.";
				
			Иначе
				
				ТекСтрока.Комментарий = "Выявлены цены: " + ТЗЦен[0].Цена  + " " + ТекСтрока.Валюта +  ". Принята цена: " + ТЗЦен[0].Цена  + " " + ТекСтрока.Валюта + ".";
				ТекСтрока.Цена = ТЗЦен[0].Цена;
				
			Конецесли;
		Иначе
			МинЦена = 0;
			МаксЦена = 0;
			Для Каждого ТекСтрЦен Из ТЗЦен Цикл
				
				Если НЕ ТекСтрЦен.Цена = 0 Тогда
					МинЦена = ТекСтрЦен.Цена;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ТЗЦен.Сортировать("Цена УБЫВ");
			
			МаксЦена = ТЗЦен[0].Цена;
			
			ТЗЦен.Сортировать("Цена ВОЗР");
			
			ПереченьЦен = "";
			Для Каждого ТекСтрЦен Из ТЗЦен Цикл
				
				ПереченьЦен = ПереченьЦен + ?(ПереченьЦен = "", "", ", ") + Формат(ТекСтрЦен.Цена, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00") + " " + ТекСтрока.Валюта;
				
			КонецЦикла;
			
			Если МинЦена = МаксЦена Тогда
				
				ТекСтрока.Цена = МаксЦена;
				
				Если Не максЦена = 0 Тогда
					ТекСтрока.Комментарий = "Выявлены цены: " + ПереченьЦен + ". Отклонений не выявлено. Принята цена " + Формат(МаксЦена, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00")+ " " + ТекСтрока.Валюта + ".";
					
				Иначе
					ТекСтрока.Комментарий = "Не выявлено ни одной цены.";
				КонецЕсли;
				
			Иначе
				
				Если (МаксЦена - МинЦена) / ((МаксЦена + МинЦена) / 2) * 100 >= ЦеновойКоридор Тогда
					
					ТекСтрока.Комментарий = "Выявлены цены: " + ПереченьЦен + ". Отклонение более " + ЦеновойКоридор + " %. Принята цена " + Формат(МаксЦена, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00")+ " " + ТекСтрока.Валюта + ".";
					ТекСтрока.Цена = МаксЦена;
					
				Иначе
					
					ТекСтрока.Комментарий = "Выявлены цены: " + ПереченьЦен + ". Отклонение менее " + ЦеновойКоридор + " %. Принята цена " + Формат(МинЦена, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00")+ " " + ТекСтрока.Валюта + ".";
					ТекСтрока.Цена = МинЦена;
					
				КонецЕсли;
			КонецЕсли;
			
		конецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЦеныПарсингЦенНаСервере()
	
	Для Каждого ТекСтр Из Объект.ПарсингЦен Цикл
		Если НЕ ТекСтр.Цена = 0 И ТекСтр.Выбрано Тогда
			
			МЗ = РегистрыСведений.АГ_ЦеныКонкурентов.СоздатьМенеджерЗаписи();
			
			МЗ.Период = ТекСтр.Период;
			МЗ.Автор = ПараметрыСеанса.ТекущийПользователь;
			МЗ.Валюта = ТекСтр.Валюта;
			МЗ.Источник = "Парсинг сайта 23met";
			МЗ.Номенклатура = ТекСтр.КонсолидированнаяНоменклатура;
			МЗ.Контрагент = ТекСтр.Конкурент;
			МЗ.Регион = ТекСтр.Регион;
			МЗ.ТипКонтрагента = "Конкурент";
			МЗ.Комментарий = ТекСтр.Комментарий;
			МЗ.Цена = ТекСтр.Цена;
			
			Если ТекСтр.Валюта.Код = "643" И ТекСтр.Период < Дата("20190101000000") ТОГДА
				СтавкаНДС =  1.18;
			ИначеЕсли ТекСтр.Валюта.Код = "643" И ТекСтр.Период >= Дата("20190101000000") ТОГДА
				СтавкаНДС = 1.2;
			ИНАЧЕ СтавкаНДС = 1.2;
			КонецЕсли;
			
			МЗ.НДС = ТекСтр.Цена - (ТекСтр.Цена / СтавкаНДС);
			
			МЗ.Записать();
			
			ТекСтр.Выбрано = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЦеныПарсингЦен(Команда)
	ЗаписатьЦеныПарсингЦенНаСервере();
	
	Предупреждение("Цены записаны!");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыКонтрольПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьКнопокНижнейПанели();

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлаги_ВнешниеЦены(Команда)
	
	Для Каждого СтрокаТаблицыФормы Из Объект.ВнешниеЦены Цикл
		ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
		Если Элементы.ВнешниеЦены.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			СтрокаТаблицыФормы.Выбрано = Ложь;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги_ВнешниеЦены(Команда)
	
	Для Каждого СтрокаТаблицыФормы Из Объект.ВнешниеЦены Цикл
		ИдентификаторСтроки = СтрокаТаблицыФормы.ПолучитьИдентификатор();
		Если Элементы.ВнешниеЦены.ПроверитьСтроку(ИдентификаторСтроки) Тогда
			СтрокаТаблицыФормы.Выбрано = Истина;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПарсинг(Команда)
	кнПарсингНаСервере();
КонецПроцедуры

&НаСервере
Процедура кнПарсингНаСервере()
	
	 Объект.ВнешниеЦены.Очистить();
	
	Если не ЗначениеЗаполнено(Металлоцентр) Тогда
		Сообщить("Не заполнен Металлоцентр");
		Возврат;
	КонецЕсли;
	
	//мФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	//мФормаИндикатора.ВладелецФормы = ЭтаФорма;
	//Если мФормаИндикатора.Открыта() Тогда
	//	Возврат;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СОБи_КонсолидированнаяНоменклатура.Ссылка КАК КонсолидированнаяНоменклатура,
	               |	ВЫБОР
	               |		КОГДА НЕ ЕСТЬNULL(КонкурентыМеталлоцентров.Рейтинг, 0) = 0
	               |			ТОГДА ЕСТЬNULL(ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	КОНЕЦ КАК Контрагент,
	               |	НАЧАЛОПЕРИОДА(ЦеныКонсолидированнойНоменклатурыСрезПоследних.Период, ДЕНЬ) КАК Период,
	               |	ЕСТЬNULL(КонкурентыМеталлоцентров.Рейтинг, 0) КАК Рейтинг,
	               |	ЕСТЬNULL(ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион, ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)) КАК Регион,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КонкурентыМеталлоцентров.Рейтинг, 0) = 0
	               |			ТОГДА ЕСТЬNULL(ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	КОНЕЦ КАК КонтрагентНоль
	               |ПОМЕСТИТЬ Таб1
	               |ИЗ
	               |	Справочник.Номенклатура КАК СОБи_КонсолидированнаяНоменклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ЦеныКонкурентов.СрезПоследних(
	               |				,
	               |				(Регион В (&Регион)
	               |					ИЛИ &ВсеРегионы)
	               |					И Источник В (&Источник)) КАК ЦеныКонсолидированнойНоменклатурыСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_КонкурентыМеталлоцентров КАК КонкурентыМеталлоцентров
	               |			ПО ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент = КонкурентыМеталлоцентров.Конкурент
	               |				И ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион = КонкурентыМеталлоцентров.Регион.АГ_БизнесРегионМЦ
	               |				И ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры = КонкурентыМеталлоцентров.НоменклатурнаяГруппа
	               |		ПО СОБи_КонсолидированнаяНоменклатура.Ссылка = ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	(СОБи_КонсолидированнаяНоменклатура.ВидНоменклатуры В (&НомГруппа)
	               |			ИЛИ &ВсяНоменклатура)
	               |	И НЕ СОБи_КонсолидированнаяНоменклатура.ПометкаУдаления
	               |	И НЕ СОБи_КонсолидированнаяНоменклатура.ЭтоГруппа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб1.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	               |	Таб1.Контрагент КАК Контрагент,
	               |	ЦеныКонсолидированнойНоменклатуры.Регион КАК Регион,
	               |	ЦеныКонсолидированнойНоменклатуры.Валюта КАК Валюта,
	               |	МИНИМУМ(ЕСТЬNULL(ЦеныКонсолидированнойНоменклатуры.Цена, 0)) КАК МинимальнаяЦена,
	               |	Таб1.Рейтинг КАК Рейтинг,
	               |	МАКСИМУМ(ЕСТЬNULL(ЦеныКонсолидированнойНоменклатуры.Цена, 0)) КАК МаксимальнаяЦена,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ВнешЦена.Количество, 0) = 0
	               |				ТОГДА 0
	               |			ИНАЧЕ ВнешЦена.Сумма / ВнешЦена.Количество
	               |		КОНЕЦ) КАК ДействующаяЦена,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(МРЦ.Количество, 0) = 0
	               |				ТОГДА 0
	               |			ИНАЧЕ МРЦ.Сумма / МРЦ.Количество
	               |		КОНЕЦ) КАК МРЦ,
	               |	Таб1.КонтрагентНоль КАК КонтрагентНоль
	               |ПОМЕСТИТЬ Таб2
	               |ИЗ
	               |	Таб1 КАК Таб1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ЦеныКонкурентов КАК ЦеныКонсолидированнойНоменклатуры
	               |		ПО Таб1.КонсолидированнаяНоменклатура = ЦеныКонсолидированнойНоменклатуры.Номенклатура
	               |			И Таб1.Контрагент = ЦеныКонсолидированнойНоменклатуры.Контрагент
	               |			И (Таб1.Период = НАЧАЛОПЕРИОДА(ЦеныКонсолидированнойНоменклатуры.Период, ДЕНЬ))
	               |			И Таб1.Регион = ЦеныКонсолидированнойНоменклатуры.Регион
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка КАК КонсолидированнаяНоменклатура,
	               |			СУММА(ЦеныНоменклатурыСрезПоследних.Цена) КАК Сумма,
	               |			СУММА(ВЫБОР
	               |					КОГДА НЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0
	               |						ТОГДА 1
	               |					ИНАЧЕ 0
	               |				КОНЕЦ) КАК Количество,
	               |			ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта
	               |		ИЗ
	               |			Справочник.Номенклатура КАК СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ТипЦенВнеш) КАК ЦеныНоменклатурыСрезПоследних
	               |				ПО СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка,
	               |			ЦеныНоменклатурыСрезПоследних.Валюта) КАК ВнешЦена
	               |		ПО Таб1.КонсолидированнаяНоменклатура = ВнешЦена.КонсолидированнаяНоменклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка КАК КонсолидированнаяНоменклатура,
	               |			СУММА(ЦеныНоменклатурыСрезПоследних.Цена) КАК Сумма,
	               |			СУММА(ВЫБОР
	               |					КОГДА НЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0
	               |						ТОГДА 1
	               |					ИНАЧЕ 0
	               |				КОНЕЦ) КАК Количество,
	               |			ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта
	               |		ИЗ
	               |			Справочник.Номенклатура КАК СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ТипЦенМРЦ) КАК ЦеныНоменклатурыСрезПоследних
	               |				ПО СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка,
	               |			ЦеныНоменклатурыСрезПоследних.Валюта) КАК МРЦ
	               |		ПО Таб1.КонсолидированнаяНоменклатура = МРЦ.КонсолидированнаяНоменклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Таб1.КонсолидированнаяНоменклатура,
	               |	Таб1.Контрагент,
	               |	ЦеныКонсолидированнойНоменклатуры.Регион,
	               |	Таб1.Рейтинг,
	               |	Таб1.КонтрагентНоль,
	               |	ЦеныКонсолидированнойНоменклатуры.Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Таб1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб2.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	               |	ЕСТЬNULL(Таб2.Регион, &Регион) КАК Регион,
	               |	Таб2.Контрагент КАК Контрагент,
	               |	ЕСТЬNULL(Таб2.Валюта, &Валюта) КАК Валюта,
	               |	Таб2.Рейтинг КАК Рейтинг,
	               |	ВЫБОР
	               |		КОГДА Таб2.МинимальнаяЦена = Таб2.МаксимальнаяЦена
	               |			ТОГДА Таб2.МаксимальнаяЦена
	               |		КОГДА (Таб2.МаксимальнаяЦена - Таб2.МинимальнаяЦена) / ((Таб2.МаксимальнаяЦена + Таб2.МинимальнаяЦена) / 2) * 100 >= 2
	               |			ТОГДА Таб2.МаксимальнаяЦена
	               |		ИНАЧЕ Таб2.МинимальнаяЦена
	               |	КОНЕЦ КАК Цена,
	               |	ВЫБОР
	               |		КОГДА Таб2.МаксимальнаяЦена = 0
	               |				И Таб2.МинимальнаяЦена = 0
	               |				И ЕСТЬNULL(Таб2.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.пустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.пустаяСсылка)
	               |			ТОГДА """"
	               |		КОГДА Таб2.МинимальнаяЦена = Таб2.МаксимальнаяЦена
	               |			ТОГДА ""отклонений по ценам не выявлено""
	               |		КОГДА (Таб2.МаксимальнаяЦена - Таб2.МинимальнаяЦена) / ((Таб2.МаксимальнаяЦена + Таб2.МинимальнаяЦена) / 2) * 100 >= 2
	               |			ТОГДА ""выявлено большое отклонение, принята максимальная цена""
	               |		ИНАЧЕ ""выявлено незначительное отклонение, принята минимальная цена""
	               |	КОНЕЦ КАК Комментарий,
	               |	Таб2.ДействующаяЦена КАК ДействующаяЦена,
	               |	Таб2.МРЦ КАК МРЦ,
	               |	Таб2.КонтрагентНоль КАК КонтрагентНоль,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоНаСкладе, 0) КАК КоличествоНаСкладе,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоЖесткийРезерв, 0) КАК КоличествоЖесткийРезерв,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СтоимостьОстатокПартии, 0) КАК СтоимостьОстатокПартии,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстатокПартии, 0) КАК КоличествоОстатокПартии,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СуммаТоварыВПути, 0) КАК СуммаТоварыВПути,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоТоварыВПути, 0) КАК КоличествоТоварыВПути,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СуммаЗаявок, 0) КАК СуммаЗаявок,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоЗаявок, 0) КАК КоличествоЗаявок,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоНаСкладеФакт, 0) КАК КоличествоНаСкладеФакт,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоЖесткийРезервФакт, 0) КАК КоличествоЖесткийРезервФакт,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СтоимостьОстатокПартииФакт, 0) КАК СтоимостьОстатокПартииФакт,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстатокПартииФакт, 0) КАК КоличествоОстатокПартииФакт,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СуммаТоварыВПутиФакт, 0) КАК СуммаТоварыВПутиФакт,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоТоварыВПутиФакт, 0) КАК КоличествоТоварыВПутиФакт,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СуммаЗаявокФакт, 0) КАК СуммаЗаявокФакт,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоЗаявокФакт, 0) КАК КоличествоЗаявокФакт
	               |ИЗ
	               |	Таб2 КАК Таб2
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВложенныйЗапрос.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	               |			СУММА(ВложенныйЗапрос.КоличествоНаСкладе) КАК КоличествоНаСкладе,
	               |			СУММА(ВложенныйЗапрос.КоличествоЖесткийРезерв) КАК КоличествоЖесткийРезерв,
	               |			СУММА(ВложенныйЗапрос.СтоимостьОстатокПартии) КАК СтоимостьОстатокПартии,
	               |			СУММА(ВложенныйЗапрос.КоличествоОстатокПартии) КАК КоличествоОстатокПартии,
	               |			СУММА(ВложенныйЗапрос.СуммаТоварыВПути) КАК СуммаТоварыВПути,
	               |			СУММА(ВложенныйЗапрос.КоличествоТоварыВПути) КАК КоличествоТоварыВПути,
	               |			СУММА(ВложенныйЗапрос.СуммаЗаявок) КАК СуммаЗаявок,
	               |			СУММА(ВложенныйЗапрос.КоличествоЗаявок) КАК КоличествоЗаявок,
	               |			СУММА(ВложенныйЗапрос.КоличествоНаСкладеФакт) КАК КоличествоНаСкладеФакт,
	               |			СУММА(ВложенныйЗапрос.КоличествоЖесткийРезервФакт) КАК КоличествоЖесткийРезервФакт,
	               |			СУММА(ВложенныйЗапрос.СтоимостьОстатокПартииФакт) КАК СтоимостьОстатокПартииФакт,
	               |			СУММА(ВложенныйЗапрос.КоличествоОстатокПартииФакт) КАК КоличествоОстатокПартииФакт,
	               |			СУММА(ВложенныйЗапрос.СуммаТоварыВПутиФакт) КАК СуммаТоварыВПутиФакт,
	               |			СУММА(ВложенныйЗапрос.КоличествоТоварыВПутиФакт) КАК КоличествоТоварыВПутиФакт,
	               |			СУММА(ВложенныйЗапрос.СуммаЗаявокФакт) КАК СуммаЗаявокФакт,
	               |			СУММА(ВложенныйЗапрос.КоличествоЗаявокФакт) КАК КоличествоЗаявокФакт
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка КАК КонсолидированнаяНоменклатура,
	               |				СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК КоличествоНаСкладе,
	               |				0 КАК КоличествоЖесткийРезерв,
	               |				0 КАК СтоимостьОстатокПартии,
	               |				0 КАК КоличествоОстатокПартии,
	               |				0 КАК СуммаТоварыВПути,
	               |				0 КАК КоличествоТоварыВПути,
	               |				0 КАК СуммаЗаявок,
	               |				0 КАК КоличествоЗаявок,
	               |				СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК КоличествоНаСкладеФакт,
	               |				0 КАК КоличествоЖесткийРезервФакт,
	               |				0 КАК СтоимостьОстатокПартииФакт,
	               |				0 КАК КоличествоОстатокПартииФакт,
	               |				0 КАК СуммаТоварыВПутиФакт,
	               |				0 КАК КоличествоТоварыВПутиФакт,
	               |				0 КАК СуммаЗаявокФакт,
	               |				0 КАК КоличествоЗаявокФакт
	               |			ИЗ
	               |				РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |						,
	               |						Склад В
	               |							(ВЫБРАТЬ
	               |								СкладыУправленияЗапасамиТаблицаСкладов.Ссылка КАК Склад
	               |							ИЗ
	               |								Справочник.Склады КАК СкладыУправленияЗапасамиТаблицаСкладов
	               |							ГДЕ
	               |								НЕ СкладыУправленияЗапасамиТаблицаСкладов.Ссылка.ПометкаУдаления
	               |								И СкладыУправленияЗапасамиТаблицаСкладов.Подразделение = &Металлоцентр)) КАК ТоварыНаСкладахОстатки
	               |					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура
	               |					ПО ТоварыНаСкладахОстатки.Номенклатура = СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка,
	               |				СУММА(0),
	               |				СУММА(0),
	               |				СУММА(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток / КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность),
	               |				СУММА(ПартииТоваровНаСкладахОстатки.КоличествоОстаток),
	               |				0,
	               |				0,
	               |				0,
	               |				0,
	               |				0,
	               |				0,
	               |				СУММА(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток / КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность),
	               |				СУММА(ПартииТоваровНаСкладахОстатки.КоличествоОстаток),
	               |				0,
	               |				0,
	               |				0,
	               |				0
	               |			ИЗ
	               |				РегистрНакопления.СебестоимостьТоваров.Остатки(, АналитикаУчетаНоменклатуры.МестоХранения.Подразделение = &металлоцентр) КАК ПартииТоваровНаСкладахОстатки
	               |					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура
	               |					ПО ПартииТоваровНаСкладахОстатки.АналитикаУчетаНоменклатуры.Номенклатура = СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка
				   |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
				   |					ПО ПартииТоваровНаСкладахОстатки.АналитикаУчетаНоменклатуры.МестоХранения.АГ_ВидЦеныВнешнийПрайс.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка) КАК ВложенныйЗапрос
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВложенныйЗапрос.КонсолидированнаяНоменклатура) КАК ВложенныйЗапрос
	               |		ПО Таб2.КонсолидированнаяНоменклатура = ВложенныйЗапрос.КонсолидированнаяНоменклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Таб2.КонсолидированнаяНоменклатура.Наименование
	               |ИТОГИ
	               |	МАКСИМУМ(КоличествоНаСкладе),
	               |	МАКСИМУМ(КоличествоЖесткийРезерв),
	               |	МАКСИМУМ(СтоимостьОстатокПартии),
	               |	МАКСИМУМ(КоличествоОстатокПартии),
	               |	МАКСИМУМ(СуммаТоварыВПути),
	               |	МАКСИМУМ(КоличествоТоварыВПути),
	               |	МАКСИМУМ(СуммаЗаявок),
	               |	МАКСИМУМ(КоличествоЗаявок),
	               |	МАКСИМУМ(КоличествоНаСкладеФакт),
	               |	МАКСИМУМ(КоличествоЖесткийРезервФакт),
	               |	МАКСИМУМ(СтоимостьОстатокПартииФакт),
	               |	МАКСИМУМ(КоличествоОстатокПартииФакт),
	               |	МАКСИМУМ(СуммаТоварыВПутиФакт),
	               |	МАКСИМУМ(КоличествоТоварыВПутиФакт),
	               |	МАКСИМУМ(СуммаЗаявокФакт),
	               |	МАКСИМУМ(КоличествоЗаявокФакт)
	               |ПО
	               |	КонсолидированнаяНоменклатура,
	               |	Регион";
	
	ИсточникДанных = Новый массив;
	
	ИсточникДанных.Добавить("Парсинг сайта 23met");
	ИсточникДанных.Добавить("Регистрация прайс-листов");
	
	Запрос.УстановитьПараметр("Источник", ИсточникДанных);
	Запрос.УстановитьПараметр("НомГруппа", НоменклатурнаяГруппаСпис);
	Запрос.УстановитьПараметр("ВсяНоменклатура", НоменклатурнаяГруппаСпис.Количество() = 0);
	Запрос.УстановитьПараметр("Регион", Металлоцентр.АГ_ОсновнойРегион);
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	Запрос.УстановитьПараметр("ВсеРегионы", Ложь);
	Запрос.УстановитьПараметр("ТипЦенВнеш",  ПолучитьТипыЦенПоРегиону(Перечисления.АГ_ВидыПрайсов.ВнешнийПрайс));
	Запрос.УстановитьПараметр("ТипЦенМРЦ",  ПолучитьТипыЦенПоРегиону(Перечисления.АГ_ВидыПрайсов.МРЦ));
	Запрос.УстановитьПараметр("Валюта", ПолучитьТипыЦенПоРегиону(Перечисления.АГ_ВидыПрайсов.ВнешнийПрайс).ВалютаЦены);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//мФормаИндикатора.КомментарийОбработкиДанных = "Прогресс формирования цен";
	//мФормаИндикатора.МаксимальноеЗначение = ВыборкаНоменклатура.Количество();
	//мФормаИндикатора.Открыть();
	
	СчНом = 1;

	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		//мФормаИндикатора.Значение = СчНом;
		СчНом = СчНом + 1;
		
		ВыборкаРегион = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРегион.Следующий() Цикл
			Выборка = ВыборкаРегион.Выбрать();
			
			НовСтр = Объект.ВнешниеЦены.Добавить();
			НовСтр.Выбрано = Истина;
			НовСтр.КонсолидированнаяНоменклатура = ВыборкаНоменклатура.КонсолидированнаяНоменклатура;
			НовСтр.Регион = ВыборкаРегион.Регион;
			НовСтр.Остаток = Выборка.КоличествоНаСкладеФакт;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПараметрыЦенообразования.Измерение КАК Измерение,
			               |	ПараметрыЦенообразования.Стратегия КАК Стратегия,
			               |	ПараметрыЦенообразования.ДниРетроспективы КАК ДниРетроспективы,
			               |	ПараметрыЦенообразования.Ретроспектива КАК Ретроспектива,
			               |	ПараметрыЦенообразования.БазаРасчета КАК БазаРасчета,
			               |	ПараметрыЦенообразования.ОбязательнаяСкидка КАК ОбязательнаяСкидка,
			               |	ПараметрыЦенообразования.ИзмерениеОС КАК ИзмерениеОС,
			               |	ПараметрыЦенообразования.РегионМеталлоцентра КАК РегионМеталлоцентра,
			               |	ПараметрыЦенообразования.Доставка КАК Доставка,
			               |	ПараметрыЦенообразования.ПлановаяНаценка КАК ПлановаяНаценка,
			               |	ПараметрыЦенообразования.БазаРасчета2 КАК БазаРасчета2,
			               |	ПараметрыЦенообразования.БазаРасчета3 КАК БазаРасчета3
			               |ИЗ
			               |	РегистрСведений.АГ_ПараметрыЦенообразования КАК ПараметрыЦенообразования
			               |ГДЕ
			               |	ПараметрыЦенообразования.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
			               |	И ПараметрыЦенообразования.Регион = &Металлоцентр";
			
			Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ВыборкаНоменклатура.КонсолидированнаяНоменклатура.ВидНоменклатуры);
			Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
			
			РезультатПараметры = Запрос.Выполнить();
			
			ПустаяСтратегия = Истина;
			
			Если НЕ РезультатПараметры.Пустой() Тогда
				
				ВыборкаПараметры = РезультатПараметры.Выбрать();
				ВыборкаПараметры.Следующий();
				
				НовСтр.База = ВыборкаПараметры.БазаРасчета;
				НовСтр.База2 = ВыборкаПараметры.БазаРасчета2;
				НовСтр.База3 = ВыборкаПараметры.БазаРасчета3;
			
			КонецЕсли;
			
			
			Сч = 1;
			Сч0 = 1;
			Числитель = 0;
			Знаменатель = 0;
			Коммент = "";
			КонкурентНоль = "";
			
			Пока Выборка.Следующий() Цикл
				
				Если Сч = 1 ТОгда
					Вставка = "";
				Иначе Вставка = ", " + Символы.ПС;
				КонецЕсли;
				
				Если Сч0 = 1 ТОгда
					Вставка0 = "В хранилище цен имеются доступные цены по контрагентам: " + Символы.ПС;
				Иначе Вставка0 = ", ";
				КонецЕсли;
				
				НовСтр.ДействующаяЦена = Выборка.ДействующаяЦена;
				НовСтр.ЦенаМРЦ = Выборка.МРЦ;
				
				Если ЗначениеЗаполнено(Выборка.Контрагент) И НовСтр.База = Перечисления.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов Тогда
					Новстр.Конкурент = Новстр.Конкурент + Вставка + Выборка.Контрагент.Наименование + " - " + Строка(Выборка.Цена) + " " + Выборка.Валюта + " (рейтинг " + Строка(Выборка.Рейтинг) + ")";
					Сч = Сч + 1;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.КонтрагентНоль) И НовСтр.База = Перечисления.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов Тогда
					КонкурентНоль = КонкурентНоль + Вставка0 + Выборка.КонтрагентНоль.Наименование;
					Сч0 = Сч0 + 1;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Валюта) тогда
					НовСтр.Валюта = Выборка.Валюта;
				КонецЕсли;
				
				
				Коммент = Коммент + Выборка.Комментарий;
				
				Числитель = Числитель + (Выборка.Цена * Выборка.Рейтинг);
				Знаменатель = Знаменатель + Выборка.Рейтинг;
				
				НовСтр.Остаток = Выборка.КоличествоНаСкладеФакт;
				
			КонецЦикла;
			
			Если Коммент = "" Тогда
				Если ЗначениеЗаполнено(КонкурентНоль) Тогда
					КонкурентНоль = КонкурентНоль + " Для участия в формировании цены конкурентам необходимо проставить рейтинг.";
					Новстр.Конкурент = КонкурентНоль;
				КонецЕсли;
				
				//Продолжить;
			КонецЕсли;
			
			НовСтр.СредневзвешеннаяЦена = ?(Знаменатель = 0, 0,Числитель / Знаменатель);
			
			ПустаяСтратегия = Истина;
			
			Если ЗначениеЗаполнено(НовСтр.База) Тогда
				
				РасчитатьСтрокуПоБазе(НовСтр, НовСтр.База, ВыборкаПараметры, ВыборкаРегион); //База1
				
				Если НовСтр.ЦенаСУчетомСтратегии = 0 Тогда
					РасчитатьСтрокуПоБазе(НовСтр, НовСтр.База2, ВыборкаПараметры, ВыборкаРегион);
					
					Если НовСтр.ЦенаСУчетомСтратегии = 0 Тогда
						РасчитатьСтрокуПоБазе(НовСтр, НовСтр.База3, ВыборкаПараметры, ВыборкаРегион);
						
					КонецЕсли;
				КонецЕсли;
				
				ЗапланированныйОбъем = ПолучитьЗапланированныйОбъем(НовСтр.Регион, НовСтр.КонсолидированнаяНоменклатура.ВидНоменклатуры);
				КоэффициентЗапасов = ПолучитьКоэффициентЗапасов(НовСтр.КонсолидированнаяНоменклатура.ВидНоменклатуры.ГруппаАналитическогоУчета, НовСтр.Регион);
				
				ПродажаНомГруппа12 = ПолучитьПродажиНомГруппыЗаГод(НовСтр.КонсолидированнаяНоменклатура.ВидНоменклатуры, НовСтр.Регион);
				ПродажаНоменклатура12 = ПолучитьПродажиКонсолидированнойНоменклатурыЗаГод(НовСтр.КонсолидированнаяНоменклатура, НовСтр.Регион);
				ДоляПродаж = Окр(?(ПродажаНомГруппа12 = 0,0, ПродажаНоменклатура12 / ПродажаНомГруппа12 * 100),2);
				
				ПланОбъемПродаж = Окр(ЗапланированныйОбъем / 100 * ДоляПродаж,3);
				НормативныйЗапас = Окр(ПланОбъемПродаж * КоэффициентЗапасов,3);
				ФактическийЗапас = ПолучитьФактическийЗапас(НовСтр.Регион, ВыборкаНоменклатура.КонсолидированнаяНоменклатура);
				
				КолРабДней = ПолучитьРабочиеДниЗаПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
				
				Если День(ТекущаяДата()) > 14 Тогда
					
					НормативнаяСкорость = Окр(ПланОбъемПродаж / КолРабДней, 3);
					
					Если ВыборкаПараметры.Ретроспектива Тогда
						НачПер = ПолучитьНачалоПериодаРабочихДней(ТекущаяДата(), ВыборкаПараметры.ДниРетроспективы);
						КонПер = НачалоДня(Текущаядата()) - 1;
						
						КолРабДнейВПродажах = ВыборкаПараметры.ДниРетроспективы;
					Иначе
						НачПер = НачалоМесяца(ТекущаяДата());
						КонПер = НачалоДня(Текущаядата()) - 1;
						
						КолРабДнейВПродажах =  ПолучитьРабочиеДниЗаПериод(НачалоДня(НачПер), КонецДня(КонПер));
					конецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ПродажиОбороты.АналитикаУчетаНоменклатуры.Номенклатура.Видноменклатуры КАК НоменклатурнаяГруппа,
					|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Стоимость
					|ИЗ
					|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
					|			&НачПер,
					|			&КонПер,
					|			Регистратор,
					|			АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
					|				И Склад.БизнесРегион = &Регион
					|				И НЕ АналитикаУчетаПоПартнерам.Партнер.АГ_СобственныйКонтрагент
					|				И АналитикаУчетаНоменклатуры.Номенклатура = &КонсНоменклатура) КАК ПродажиОбороты
					|ГДЕ
					|	ПродажиОбороты.СуммаВыручкиОборот > 0
					|	И ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
					|
					|СГРУППИРОВАТЬ ПО
					|	ПродажиОбороты.АналитикаУчетаНоменклатуры.Номенклатура.Видноменклатуры";
					
					Запрос.УстановитьПараметр("НачПер", НачПер);
					Запрос.УстановитьПараметр("КонПер", КонПер);
					Запрос.УстановитьПараметр("Регион", НовСтр.Регион);
					Запрос.УстановитьПараметр("КонсНоменклатура", НовСтр.КонсолидированнаяНоменклатура);
					
					Результат = Запрос.Выполнить();
					
					Если Результат.Пустой() Тогда
						ФактПродаж = 0;
						
					Иначе
						Выборка = Результат.Выбрать();
						
						Выборка.Следующий();
						
						ФактПродаж = ?(ЗначениеЗаполнено(Выборка.Стоимость), Выборка.Стоимость, 0);
						
					КонецЕсли;
					
					СкоростьПродаж = Окр(ФактПродаж / КолРабДнейВПродажах, 3);
					
					НовСтр.СкоростьПродаж = ?(НормативнаяСкорость = 0,0, СкоростьПродаж / НормативнаяСкорость * 100);
					СтруктураНаценки = ПолучитьСкидкуНаценку(НовСтр.СкоростьПродаж, Перечисления.АГ_ТипыНастроекФакторовВнейшнейЦены.СкоростьПродаж,  НовСтр.КонсолидированнаяНоменклатура.ВидНоменклатуры, НовСтр.Регион);
					
					Если НЕ СтруктураНаценки = Неопределено Тогда
						НовСтр.ПроцентНаценкиПродажи = СтруктураНаценки.Процент;
						НовСтр.ЗонаПродаж = СтруктураНаценки.Зона;
					КонецЕсли;
				КонецЕсли;
			Иначе	 
				
				НовСтр.ЦенаСУчетомСтратегии = НовСтр.СредневзвешеннаяЦена;
				ФактическийЗапас = 0;
				НормативныйЗапас = 0;
				
			КонецЕсли;
			
			НовСтр.УровеньОстатков = ?(НормативныйЗапас = 0,0,ФактическийЗапас / НормативныйЗапас * 100);
			
			СтруктураНаценки = ПолучитьСкидкуНаценку(НовСтр.УровеньОстатков, Перечисления.АГ_ТипыНастроекФакторовВнейшнейЦены.УровеньОстатков,  НовСтр.КонсолидированнаяНоменклатура.ВидНоменклатуры, НовСтр.Регион);
			
			Если НЕ СтруктураНаценки = Неопределено Тогда
				НовСтр.ПроцентНаценкиОстатки = СтруктураНаценки.Процент;
				НовСтр.ЗонаОстатков = СтруктураНаценки.Зона;
			КонецЕсли;
			
			
			НовСтр.ВеличинаСкидкиПродажи =  НовСтр.ЦенаСУчетомСтратегии * НовСтр.ПроцентНаценкиПродажи / 100;
			НовСтр.ВеличинаСкидкиОстатки =  НовСтр.ЦенаСУчетомСтратегии * НовСтр.ПроцентНаценкиОстатки / 100;
			
			НовСтр.ЦенаСУчетомФакторов = НовСтр.ЦенаСУчетомСтратегии + НовСтр.ВеличинаСкидкиОстатки + НовСтр.ВеличинаСкидкиПродажи;
			
			НовСтр.ВнешняяЦена = Окр(НовСтр.ЦенаСУчетомФакторов / 10, 0) * 10;
			
			НовСтр.Отклонение = НовСтр.ВнешняяЦена - НовСтр.ДействующаяЦена;
			
			Если ПустаяСтратегия Тогда
				Если Сч = 1 Тогда
					НовСтр.Стратегия = "Имитация лидера (цена точно соответствует цене лидера)";
				Иначе
					НовСтр.Стратегия = "Стратегия средних цен (средневзвешенная цена без изменений)";
				КонецЕсли;
				
			Иначе
				Если ВыборкаПараметры.Стратегия > 0 Тогда
					Если Сч = 1 Тогда
						НовСтр.Стратегия = "Опережение лидера (цена выше цены лидера на " + Строка(ВыборкаПараметры.Стратегия) + ?(ВыборкаПараметры.Измерение = Перечисления.ИзмеренияПараметровЦенообразования.Валюта, НовСтр.Валюта, "%" )+ ")";
					Иначе
						НовСтр.Стратегия = "Стратегия высоких цен (цена выше общего рынка на " + Строка(ВыборкаПараметры.Стратегия) + ?(ВыборкаПараметры.Измерение = Перечисления.ИзмеренияПараметровЦенообразования.Валюта, НовСтр.Валюта, "%" )+ ")"; 
					КонецЕсли;
				Иначе
					Если Сч = 1 Тогда
						НовСтр.Стратегия = "Следование за лидером (цена ниже цены лидера на " + Строка(ВыборкаПараметры.Стратегия) + ?(ВыборкаПараметры.Измерение = Перечисления.ИзмеренияПараметровЦенообразования.Валюта, НовСтр.Валюта, "%" )+ ")"; 
					Иначе
						НовСтр.Стратегия = "Стратегия низких цен (цена ниже общего рынка на " + Строка(ВыборкаПараметры.Стратегия) + ?(ВыборкаПараметры.Измерение = Перечисления.ИзмеренияПараметровЦенообразования.Валюта, НовСтр.Валюта, "%" )+ ")"; 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
			Если НовСтр.СредневзвешеннаяЦена = 0 Тогда
				НовСтр.ЗонаОстатков = Неопределено;
				НовСтр.ЗонаПродаж = Неопределено;
				НовСтр.ВлияниеНормативногоЗапаса = "";
				НовСтр.ВлияниеСкоростиПродаж = "";                    
				НовСтр.Выбрано = Ложь;
			Иначе
				НовСтр.ВлияниеСкоростиПродаж = ПолучитьВлияниеСкоростиПродаж(НовСтр);
				НовСтр.ВлияниеНормативногоЗапаса = ПолучитьВлияниеНормативногоЗапаса(НовСтр);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НовСтр.Остаток) Тогда
				НовСтр.Выбрано = Ложь;
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
	//мФормаИндикатора.Закрыть();
	
КонецПроцедуры

&Насервере
Функция ПолучитьТипыЦенПоРегиону(ВидПрайса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен,
	|	ТипыЦенНоменклатуры.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыЦен КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	НЕ ТипыЦенНоменклатуры.ПометкаУдаления
	|	И ТипыЦенНоменклатуры.АГ_ВидПрайса = &ВидПрайса
	|	И ТипыЦенНоменклатуры.АГ_Подразделение В Иерархии(&Металлоцентр)
	|	УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	Запрос.УстановитьПараметр("ВидПрайса", ВидПрайса);
	
	Результат = Запрос.Выполнить();
	
	Если результат.Пустой() Тогда
		Возврат Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ТипЦен;
	
КонецФункции

&НаСервере
Процедура РасчитатьСтрокуПоБазе(НовСтр, База, ВыборкаПараметры, ВыборкаРегион)
	
	Если База = Перечисления.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов Тогда
		
		Если ВыборкаПараметры.Измерение = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Валюта Тогда
			НовСтр.ЦенаСУчетомСтратегии = ?(НовСтр.СредневзвешеннаяЦена = 0,0,НовСтр.СредневзвешеннаяЦена + ВыборкаПараметры.Стратегия);
			
			Если НЕ ВыборкаПараметры.Стратегия = 0 Тогда
				ПустаяСтратегия = Ложь;
			КонецЕсли;
		Иначе
			НовСтр.ЦенаСУчетомСтратегии = НовСтр.СредневзвешеннаяЦена * (1 + ВыборкаПараметры.Стратегия/100);
			
			Если НЕ ВыборкаПараметры.Стратегия = 0 Тогда
				ПустаяСтратегия = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НовСтр.ЦенаСУчетомСтратегии = 0 Тогда
			Новстр.База = База;
			
			НовСтр.БазаРасчета = "Цены конкурентов." + Символы.ПС + 
			?(ВыборкаПараметры.Стратегия = 0, "Стратегия средних цен: 0", "") +
			?(ВыборкаПараметры.Стратегия > 0, "Стратегия высоких цен: +" + Строка(ВыборкаПараметры.Стратегия) + " " + ?(ВыборкаПараметры.Измерение = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Процент, "%", НовСтр.Валюта),"") + 
			?(ВыборкаПараметры.Стратегия < 0, "Стратегия низких цен: " + Строка(ВыборкаПараметры.Стратегия) + " " + ?(ВыборкаПараметры.Измерение = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Процент, "%", НовСтр.Валюта),"") + 
			".";
		КонецЕсли;
		
	ИначеЕсли База = Перечисления.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра Тогда
		
		Если ЗначениеЗаполнено(ВыборкаПараметры.РегионМеталлоцентра) Тогда
			ЦенаДругогоРегиона = ПолучитьЦенуРегиона(ВыборкаПараметры.РегионМеталлоцентра, НовСтр.КонсолидированнаяНоменклатура);
			НовСтр.СредневзвешеннаяЦена = ЦенаДругогоРегиона;
			НовСтр.РегионПриемник = ВыборкаПараметры.РегионМеталлоцентра;
		Иначе ЦенаДругогоРегиона = 0;
		КонецЕсли;
		
		Если ЦенаДругогоРегиона = 0 Тогда
			НовСтр.ЦенаСУчетомСтратегии = 0;
		Иначе
			НовСтр.Доставка = ВыборкаПараметры.Доставка;
			НовСтр.ЦенаСУчетомСтратегии = ЦенаДругогоРегиона + ВыборкаПараметры.Доставка;
		КонецЕсли;	
		
		Если НЕ НовСтр.ЦенаСУчетомСтратегии = 0 Тогда
			Новстр.База = База;
			
			НовСтр.БазаРасчета = "Цены другого металлоцентра." + Символы.ПС +
			"Регион: " + Строка(ВыборкаПараметры.РегионМеталлоцентра) + Символы.ПС + 
			"Доставка: " + Строка(ВыборкаПараметры.Доставка) + НовСтр.Валюта + 
			".";
		КонецЕсли;
		
	ИначеЕсли База = Перечисления.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления Тогда
		
		ОстатокЗаминусомЖесткогоРезерва = ВыборкаРегион.КоличествоНаСкладеФакт - ВыборкаРегион.КоличествоЖесткийРезервФакт;
		СебестоимостьОднойТонны = ?(ОстатокЗаминусомЖесткогоРезерва = 0,0,ВыборкаРегион.СтоимостьОстатокПартииФакт / ОстатокЗаминусомЖесткогоРезерва);
		НовСтр.СредневзвешеннаяЦена = ?((ОстатокЗаминусомЖесткогоРезерва + ВыборкаРегион.КоличествоТоварыВПутиФакт + ВыборкаРегион.КоличествоЗаявокФакт) = 0,0,(?(ВыборкаРегион.КоличествоОстатокПартииФакт = 0,0,ВыборкаРегион.СтоимостьОстатокПартииФакт /ВыборкаРегион.КоличествоОстатокПартииФакт * ОстатокЗаминусомЖесткогоРезерва)  + ВыборкаРегион.СуммаТоварыВПутиФакт + ВыборкаРегион.СуммаЗаявокФакт) / (ОстатокЗаминусомЖесткогоРезерва+ ВыборкаРегион.КоличествоТоварыВПутиФакт + ВыборкаРегион.КоличествоЗаявокФакт));
		НовСтр.ПлановаяНаценка = ВыборкаПараметры.ПлановаяНаценка;
		НовСтр.ЦенаСУчетомСтратегии = НовСтр.СредневзвешеннаяЦена + НовСтр.СредневзвешеннаяЦена * ВыборкаПараметры.ПлановаяНаценка / 100;
		
		Если НЕ НовСтр.ЦенаСУчетомСтратегии = 0 Тогда
			Новстр.База = База;
			НовСтр.БазаРасчета = "Цены восстановления.";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапланированныйОбъем(Регион, НоменклатурнаяГруппа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПланПродажПланПоНомГруппам.ТоварнаяКатегория.Владелец КАК НоменклатурнаяГруппа,
	|	СУММА(ПланПродажПланПоНомГруппам.Количество) КАК СуммаОтгрузки
	|ИЗ
	|	Документ.АГ_ПланПродаж.Товары КАК ПланПродажПланПоНомГруппам
	|ГДЕ
	|	ПланПродажПланПоНомГруппам.ТоварнаяКатегория.Владелец = &НоменклатурнаяГруппа
	|	И ПланПродажПланПоНомГруппам.Ссылка.Подразделение.АГ_ОсновнойРегион = &Регион
	|	И НАЧАЛОПЕРИОДА(ПланПродажПланПоНомГруппам.Ссылка.Период, МЕСЯЦ) = &Дата
	|	И НЕ ПланПродажПланПоНомГруппам.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланПродажПланПоНомГруппам.ТоварнаяКатегория.Владелец";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("Регион", Регион);
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = результат.Выбрать();
	Выборка.Следующий();
	
	СуммаПланов = Выборка.СуммаОтгрузки;
	
	
	Возврат СуммаПланов;
	
КонецФункции

&НаСервере
Функция ПолучитьКоэффициентЗапасов(СводГруппа, Регион)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВложенныйЗапрос.Основной) КАК Основной,
	               |	СУММА(ВложенныйЗапрос.Корректировочный) КАК Корректировочный
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МАКСИМУМ(ПлановыйКоэффициентЗапасов.ЗначениеКоэффициента) КАК Основной,
	               |		0 КАК Корректировочный
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ПлановыйКоэффициентЗапасов.Склад КАК Склад,
	               |			ПлановыйКоэффициентЗапасов.Месяц КАК Месяц,
	               |			МАКСИМУМ(ПлановыйКоэффициентЗапасов.Регистратор.Дата) КАК ДатаДокумента
	               |		ИЗ
	               |			РегистрСведений.АГ_ПлановыйКоэффициентЗапасов КАК ПлановыйКоэффициентЗапасов
	               |		ГДЕ
	               |			ПлановыйКоэффициентЗапасов.СводнаяНоменклатурнаяГруппа = &СводнаяНоменклатурнаяГруппа
	               |			И ПлановыйКоэффициентЗапасов.Месяц.ДатаНачала < &Период
	               |			И ПлановыйКоэффициентЗапасов.Месяц.ДатаОкончания >= &Период
	               |			И ПлановыйКоэффициентЗапасов.Склад = &ПустойСклад
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПлановыйКоэффициентЗапасов.Склад,
	               |			ПлановыйКоэффициентЗапасов.Месяц) КАК ВложенныйЗапрос
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ПлановыйКоэффициентЗапасов КАК ПлановыйКоэффициентЗапасов
	               |			ПО ВложенныйЗапрос.Склад = ПлановыйКоэффициентЗапасов.Склад
	               |				И ВложенныйЗапрос.Месяц = ПлановыйКоэффициентЗапасов.Месяц
	               |				И ВложенныйЗапрос.ДатаДокумента = ПлановыйКоэффициентЗапасов.Регистратор.Дата
	               |	ГДЕ
	               |		ПлановыйКоэффициентЗапасов.Склад = &ПустойСклад
	               |		И ПлановыйКоэффициентЗапасов.СводнаяНоменклатурнаяГруппа = &СводнаяНоменклатурнаяГруппа
	               |		И ПлановыйКоэффициентЗапасов.Месяц.ДатаНачала < &Период
	               |		И ПлановыйКоэффициентЗапасов.Месяц.ДатаОкончания >= &Период
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		0,
	               |		МАКСИМУМ(ПлановыйКоэффициентЗапасов.ЗначениеКоэффициента)
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ПлановыйКоэффициентЗапасов.Склад КАК Склад,
	               |			ПлановыйКоэффициентЗапасов.Месяц КАК Месяц,
	               |			МАКСИМУМ(ПлановыйКоэффициентЗапасов.Регистратор.Дата) КАК ДатаДокумента
	               |		ИЗ
	               |			РегистрСведений.АГ_ПлановыйКоэффициентЗапасов КАК ПлановыйКоэффициентЗапасов
	               |		ГДЕ
	               |			ПлановыйКоэффициентЗапасов.СводнаяНоменклатурнаяГруппа = &СводнаяНоменклатурнаяГруппа
	               |			И ПлановыйКоэффициентЗапасов.Месяц.ДатаНачала < &Период
	               |			И ПлановыйКоэффициентЗапасов.Месяц.ДатаОкончания >= &Период
	               |			И ПлановыйКоэффициентЗапасов.Склад.Подразделение = &Металлоцентр
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПлановыйКоэффициентЗапасов.Склад,
	               |			ПлановыйКоэффициентЗапасов.Месяц) КАК ВложенныйЗапрос
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ПлановыйКоэффициентЗапасов КАК ПлановыйКоэффициентЗапасов
	               |			ПО ВложенныйЗапрос.Склад = ПлановыйКоэффициентЗапасов.Склад
	               |				И ВложенныйЗапрос.Месяц = ПлановыйКоэффициентЗапасов.Месяц
	               |				И ВложенныйЗапрос.ДатаДокумента = ПлановыйКоэффициентЗапасов.Регистратор.Дата
	               |	ГДЕ
	               |		ПлановыйКоэффициентЗапасов.СводнаяНоменклатурнаяГруппа = &СводнаяНоменклатурнаяГруппа
	               |		И ПлановыйКоэффициентЗапасов.Месяц.ДатаНачала < &Период
	               |		И ПлановыйКоэффициентЗапасов.Месяц.ДатаОкончания >= &Период
	               |		И ПлановыйКоэффициентЗапасов.Склад.Подразделение = &Металлоцентр) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Период", НачалоДня(КонецМесяца(ТекущаяДата())));
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	Запрос.УстановитьПараметр("СводнаяНоменклатурнаяГруппа", СводГруппа);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 1;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.Корректировочный) Тогда
		Возврат Выборка.Корректировочный;
	Иначе Возврат ?(ЗначениеЗаполнено(Выборка.Основной), Выборка.Основной, 1);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПродажиНомГруппыЗаГод(НоменклатурнаяГруппа, Регион)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПродажиОбороты.АналитикаУчетаНоменклатуры.Номенклатура.Видноменклатуры КАК НоменклатурнаяГруппа,
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			&НачПер,
	|			&КонПер,
	|			Регистратор,
	|			АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|				И Склад.Подразделение = &МЦ
	|				И НЕ АналитикаУчетаПоПартнерам.партнер.АГ_СобственныйКонтрагент
	|				И АналитикаУчетаНоменклатуры.Номенклатура.Видноменклатуры = &НомГруппа) КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.АналитикаУчетаНоменклатуры.Номенклатура.Видноменклатуры";
	
	Запрос.УстановитьПараметр("КонПер", КонецДня(Текущаядата()));
	Запрос.УстановитьПараметр("НачПер", ДобавитьМесяц(НачалоДня(ТекущаяДата()), -12));
	Запрос.УстановитьПараметр("НомГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("МЦ", Металлоцентр);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

&НаСервере
Функция ПолучитьПродажиКонсолидированнойНоменклатурыЗаГод(КонсолидированнаяНоменклатура, Регион)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			&НачПер,
	|			&КонПер,
	|			Регистратор,
	|			АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|				И Склад.Подразделение = &МЦ
	|				И НЕ АналитикаУчетаПоПартнерам.партнер.АГ_СобственныйКонтрагент
	|				И АналитикаУчетаНоменклатуры.Номенклатура = &КонсНоменклатура) КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг";
	
	Запрос.УстановитьПараметр("КонПер", КонецДня(Текущаядата()));
	Запрос.УстановитьПараметр("НачПер", ДобавитьМесяц(НачалоДня(ТекущаяДата()), -12));
	Запрос.УстановитьПараметр("КонсНоменклатура", КонсолидированнаяНоменклатура);
	Запрос.УстановитьПараметр("МЦ", Металлоцентр);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат ?(ЗначениеЗаполнено(Выборка.Количество), Выборка.Количество, 0);
	
КонецФункции

&НаСервере
Функция ПолучитьФактическийЗапас(Регион, Номенклатура)
	
	КонПер = КонецДня(Текущаядата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТоварыНаСкладахОстатки.Номенклатура.Видноменклатуры КАК НоменклатурнаяГруппа,
	               |		СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК КоличествоОстаток
	               |	ИЗ
	               |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |				&КонПер,
	               |				Номенклатура.Видноменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	               |					И Склад.Подразделение.АГ_ОсновнойРегион = &Регион
				   |					И Номенклатура = &КонсНоменклатура) КАК ТоварыНаСкладахОстатки
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТоварыНаСкладахОстатки.Номенклатура.Видноменклатуры
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЗаказыПоставщикамОстатки.Номенклатура.ВидНоменклатуры,
	               |		ЗаказыПоставщикамОстатки.ЗаказаноОстаток
	               |	ИЗ
	               |		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	               |				,
	               |				Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	               |					И Склад.Подразделение.АГ_ОсновнойРегион = &Регион
	               |					И Номенклатура = &КонсНоменклатура) КАК ЗаказыПоставщикамОстатки) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.НоменклатурнаяГруппа";
	
	Запрос.УстановитьПараметр("КонПер", КонПер);
	Запрос.УстановитьПараметр("КонсНоменклатура", Номенклатура);
	Запрос.УстановитьПараметр("Регион", Регион);

	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Запас = Выборка.КоличествоОстаток;
	
	Возврат Запас;
	
КонецФункции

&НаСервере
Функция ПолучитьРабочиеДниЗаПериод(НачПер, КонПер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ДанныеПроизводственногоКалендаря.Дата) КАК КолДней
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачПер И &КонПер
	|	И ДанныеПроизводственногоКалендаря.ВидДня = &ВидДня";
	
	Запрос.УстановитьПараметр("НачПер", НачПер);
	Запрос.УстановитьПараметр("КонПер", КонПер);
	Запрос.УстановитьПараметр("ВидДня", Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КолДней;
	
КонецФункции

&НаСервере
Функция ПолучитьНачалоПериодаРабочихДней(КонПер, КоличествоДней)
	
	КоличествоРабДней = КоличествоДней;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Дата <= &КонПер
	|	И ДанныеПроизводственногоКалендаря.ВидДня = &ВидДня
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПроизводственногоКалендаря.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаКалендаря УБЫВ";
	
	Запрос.УстановитьПараметр("КонПер", КонПер);
	Запрос.УстановитьПараметр("ВидДня", Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() И НЕ КоличествоРабДней = 0  Цикл
		
		КоличествоРабДней = КоличествоРабДней - 1;
	КонецЦикла;
	
	Если КоличествоРабДней = 0 тогда
		Возврат Выборка.ДатаКалендаря;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСкидкуНаценку(Шкала, ТипНастройки, НоменклатурнаяГруппа, Регион)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.Меньшее) КАК Меньшее,
	|	СУММА(ВложенныйЗапрос.Большее) КАК Большее,
	|	СУММА(ВложенныйЗапрос.Минимальное) КАК Минимальное,
	|	СУММА(ВложенныйЗапрос.Максимум) КАК Максимум
	|ПОМЕСТИТЬ Таб1
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ФакторыВнешнейЦены.ПроцентОтНормы) КАК Меньшее,
	|		0 КАК Большее,
	|		0 КАК Минимальное,
	|		0 КАК Максимум
	|	ИЗ
	|		РегистрСведений.АГ_ФакторыВнешнейЦены КАК ФакторыВнешнейЦены
	|	ГДЕ
	|		ФакторыВнешнейЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|		И ФакторыВнешнейЦены.Регион = &Регион
	|		И ФакторыВнешнейЦены.ТипНастройки = &ТипНастройки
	|		И ФакторыВнешнейЦены.ПроцентОтНормы <= &Шкала
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		МИНИМУМ(ФакторыВнешнейЦены.ПроцентОтНормы),
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.АГ_ФакторыВнешнейЦены КАК ФакторыВнешнейЦены
	|	ГДЕ
	|		ФакторыВнешнейЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|		И ФакторыВнешнейЦены.Регион = &Регион
	|		И ФакторыВнешнейЦены.ТипНастройки = &ТипНастройки
	|		И ФакторыВнешнейЦены.ПроцентОтНормы >= &Шкала
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		МИНИМУМ(ФакторыВнешнейЦены.ПроцентОтНормы),
	|		0
	|	ИЗ
	|		РегистрСведений.АГ_ФакторыВнешнейЦены КАК ФакторыВнешнейЦены
	|	ГДЕ
	|		ФакторыВнешнейЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|		И ФакторыВнешнейЦены.Регион = &Регион
	|		И ФакторыВнешнейЦены.ТипНастройки = &ТипНастройки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		0,
	|		МАКСИМУМ(ФакторыВнешнейЦены.ПроцентОтНормы)
	|	ИЗ
	|		РегистрСведений.АГ_ФакторыВнешнейЦены КАК ФакторыВнешнейЦены
	|	ГДЕ
	|		ФакторыВнешнейЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|		И ФакторыВнешнейЦены.Регион = &Регион
	|		И ФакторыВнешнейЦены.ТипНастройки = &ТипНастройки) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФакторыВнешнейЦены.ТрансформацияЦены КАК ТрансформацияЦены,
	|	ФакторыВнешнейЦены.НаименованиеЗоны КАК Зона
	|ИЗ
	|	Таб1 КАК Таб1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ФакторыВнешнейЦены КАК ФакторыВнешнейЦены
	|		ПО (ФакторыВнешнейЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа)
	|			И (ФакторыВнешнейЦены.Регион = &Регион)
	|			И (ФакторыВнешнейЦены.ТипНастройки = &ТипНастройки)
	|			И (ВЫБОР
	|				КОГДА Таб1.Меньшее < Таб1.Минимальное
	|					ТОГДА ФакторыВнешнейЦены.ПроцентОтНормы = Таб1.Минимальное
	|				КОГДА Таб1.Большее < 100
	|						И НЕ Таб1.Большее = 0
	|					ТОГДА ФакторыВнешнейЦены.ПроцентОтНормы = Таб1.Большее
	|				КОГДА Таб1.Меньшее = 100
	|					ТОГДА ФакторыВнешнейЦены.ПроцентОтНормы = Таб1.Меньшее
	|				КОГДА Таб1.Большее = 100
	|					ТОГДА ФакторыВнешнейЦены.ПроцентОтНормы = Таб1.Большее
	|				КОГДА Таб1.Меньшее <= 100
	|						И Таб1.Большее >= 100
	|					ТОГДА ФакторыВнешнейЦены.ПроцентОтНормы = Таб1.Меньшее
	|				КОГДА Таб1.Меньшее > 100
	|						И Таб1.Большее <= Таб1.Максимум
	|						И НЕ Таб1.Большее = 0
	|					ТОГДА ФакторыВнешнейЦены.ПроцентОтНормы = Таб1.Меньшее
	|				КОГДА Таб1.Меньшее = Таб1.Максимум
	|					ТОГДА ФакторыВнешнейЦены.ПроцентОтНормы = Таб1.Меньшее
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("Регион", Регион);
	Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
	Запрос.УстановитьПараметр("Шкала", Шкала);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Зона", Выборка.Зона);
		СтруктураВозврата.Вставить("Процент", Выборка.ТрансформацияЦены);
		Возврат  СтруктураВозврата;
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьВлияниеСкоростиПродаж(ТекСтрока)
	
	Если День(ТекущаяДата()) <= 14 тогда
		Влияние = "Расчет с 15 числа";
	Иначе
		Влияние = "Скорость продаж: " + Строка(ТекСтрока.СкоростьПродаж) + "%" + Символы.ПС + 
		?(ТекСтрока.ПроцентНаценкиПродажи>= 0,   "Процент наценки: ", "Процент скидки: ") + ?(ТекСтрока.ПроцентНаценкиПродажи>= 0, Строка(ТекСтрока.ПроцентНаценкиПродажи), Строка(-ТекСтрока.ПроцентНаценкиПродажи)) + "%" + Символы.ПС +
		"Базовая цена: " + Строка(ТекСтрока.ЦенаСУчетомСтратегии) + " " + ТекСтрока.Валюта + Символы.ПС + 
		?(ТекСтрока.ВеличинаСкидкиПродажи >= 0, "Величина наценки: ", "Величина скидки: ") + ?(ТекСтрока.ВеличинаСкидкиПродажи >= 0, Строка(ТекСтрока.ВеличинаСкидкиПродажи), Строка(-ТекСтрока.ВеличинаСкидкиПродажи)) + " " + ТекСтрока.Валюта; 
	КонецЕсли;
	
	Возврат Влияние;
	
КонецФункции

&НаСервере
Функция ПолучитьВлияниеНормативногоЗапаса(ТекСтрока)
	
	Влияние = "Уровень остатков: " + Строка(ТекСтрока.УровеньОстатков) + "%" + Символы.ПС + 
	?(ТекСтрока.ПроцентНаценкиОстатки>= 0,   "Процент наценки: ", "Процент скидки: ") + ?(ТекСтрока.ПроцентНаценкиОстатки>= 0, Строка(ТекСтрока.ПроцентНаценкиОстатки), Строка(-ТекСтрока.ПроцентНаценкиОстатки)) + "%" + Символы.ПС +
	"Базовая цена: " + Строка(ТекСтрока.ЦенаСУчетомСтратегии) + " " + ТекСтрока.Валюта + Символы.ПС + 
	?(ТекСтрока.ВеличинаСкидкиОстатки >= 0, "Величина наценки: ", "Величина скидки: ") + ?(ТекСтрока.ВеличинаСкидкиОстатки >= 0, Строка(ТекСтрока.ВеличинаСкидкиОстатки), Строка(-ТекСтрока.ВеличинаСкидкиОстатки)) + " " + ТекСтрока.Валюта; 
	
	Возврат Влияние;
	
КонецФункции

&НаСервере
Функция ПолучитьЦенуРегиона(РегионМеталлоцентра, КонсолидированнаяНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура КАК КонсолидированнаяНоменклатура,
	               |	МАКСИМУМ(ЦеныКонсолидированнойНоменклатурыСрезПоследних.Цена) КАК Цена
	               |ИЗ
	               |	РегистрСведений.АГ_ЦеныКонкурентов.СрезПоследних КАК ЦеныКонсолидированнойНоменклатурыСрезПоследних
	               |ГДЕ
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион = &Регион
	               |	И ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура = &КонсолидированнаяНоменклатура
				   |	И ЦеныКонсолидированнойНоменклатурыСрезПоследних.Источник = &Источник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура";
	
	Запрос.УстановитьПараметр("Регион", РегионМеталлоцентра);
	Запрос.УстановитьПараметр("КонсолидированнаяНоменклатура", КонсолидированнаяНоменклатура);
	Запрос.УстановитьПараметр("Источник", "Формирование внешней цены");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			Возврат Выборка.Цена;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СрсиавНоменклатуры(Команда)
	СрсиавНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СрсиавНоменклатурыНаСервере()
	
	Текстрока = Объект.ВнешниеЦены[Элементы.ВнешниеЦены.ТекущаяСтрока];
	Если Текстрока= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.текст = "ВЫБРАТЬ
	|	СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Код КАК Код,
	|	СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Наименование КАК Наименование,
	|	СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
	|	СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.ЕдиницаИзмерения КАК ЕдиницаХраненияОстатков,
	|	СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.КоэффициентЕдиницыДляОтчетов КАК КоэфОтчет,
	|	1 КАК КоэфОст,
	|	Истина КАК ВыводитьВПрайс,
	|	ВЫБОР
	|		КОГДА СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.ЦеноваяГруппа = &Премиум
	|			ТОГДА ПараметрыЦенообразования.ЦеновойКоридор
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Премиальнаянаценка,
	|	&ВнешняяЦена КАК КонсолидированнаяЦена,
	|	&ВнешняяЦена + &ВнешняяЦена * ВЫБОР
	|		КОГДА СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.ЦеноваяГруппа = &Премиум
	|			ТОГДА ПараметрыЦенообразования.ЦеновойКоридор
	|		ИНАЧЕ 0
	|	КОНЕЦ / 100 КАК ВнешняяЦенаПолная,
	|	(&ВнешняяЦена + &ВнешняяЦена * ВЫБОР
	|		КОГДА СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.ЦеноваяГруппа = &Премиум
	|			ТОГДА ПараметрыЦенообразования.ЦеновойКоридор
	|		ИНАЧЕ 0
	|	КОНЕЦ / 100) / СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.КоэффициентЕдиницыДляОтчетов КАК ВнешЦенаЕдОст
	|ИЗ
	|	Справочник.Номенклатура КАК СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ПараметрыЦенообразования КАК ПараметрыЦенообразования
	|		ПО СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка.ВидНоменклатуры = ПараметрыЦенообразования.НоменклатурнаяГруппа
	|			И (ПараметрыЦенообразования.Регион.АГ_ОсновнойРегион В Иерархии(&Регион))
	|ГДЕ
	|	СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Текстрока.КонсолидированнаяНоменклатура);
	Запрос.УстановитьПараметр("Премиум", Справочники.ЦеноваяГруппа.НайтиПоНаименованию("Премиум"));
	Запрос.УстановитьПараметр("Регион", Текстрока.Регион);
	Запрос.УстановитьПараметр("ВнешняяЦена", ТекСтрока.ВнешняяЦена);
	
	Результат = Запрос.Выполнить();
	
	ТабДок = Новый ТабличныйДокумент;
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДокОбъект.ПолучитьМакет("Макет_СоставНоменклатуры");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Номенклатура = Текстрока.КонсолидированнаяНоменклатура;
	ТабДок.Вывести(ОбластьМакета);
	
	Областьмакета = макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Валюта = Текстрока.Валюта;
	ТабДок.Вывести(Областьмакета);
	
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() цикл
			Областьмакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			Если Выборка.ЕдиницаДляОтчетов = Выборка.ЕдиницаХраненияОстатков Тогда
				ОбластьМакета.Параметры.ВнешняяЦена = Окр(Выборка.ВнешняяЦенаПолная / 10,0) * 10;
				ОбластьМакета.Параметры.ВнешЦенаЕдОст = Окр(Выборка.ВнешЦенаЕдОст / 10,0) * 10;
			Иначе
				ОбластьМакета.Параметры.ВнешняяЦена = Выборка.ВнешняяЦенаПолная;
				ОбластьМакета.Параметры.ВнешЦенаЕдОст = Выборка.ВнешЦенаЕдОст;
			КонецЕсли;
			
			ТабДок.Вывести(Областьмакета);
		КонецЦикла;
	КонецЕсли;
	
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	
	ТабДок.Показать();

	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОстатка(Команда)

	Если Объект.ВнешниеЦены.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Обработка.АГ_РаботаСЦенообразованием.Форма.ФормаРасшифровкиНулевыхЦен");
	Форма.ТипЦенВнеш = ТипЦенВнеш;
	Форма.ТипЦенВнутр = ТипЦенВнутр;
	Форма.типЦенМин = ТипЦенМин;
	Форма.ТипЦенМРЦ = ТипЦенМРЦ;
	Форма.ТипОтчета = "ФормВнешЦен";
	Форма.Металлоцентр = Металлоцентр;
	
	ТекСтр = Элементы.ВнешниеЦены.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СписНоменклатуры = ТекСтр.КонсолидированнаяНоменклатура;
	Форма.Валюта = ТекСтр.Валюта;
	Форма.ТекЦена = ТекСтр.ВнешняяЦена;
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаОстаткаНаСервере()
	
	Если Объект.ВнешниеЦены.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Форма = ДокОбъект.ПолучитьФорму("ФормаРасшифровкиНулевыхЦен");
	Форма.ТипЦенВнеш = ТипЦенВнеш;
	Форма.ТипЦенВнутр = ТипЦенВнутр;
	Форма.типЦенМин = ТипЦенМин;
	Форма.ТипЦенМРЦ = ТипЦенМРЦ;
	Форма.ТипОтчета = "ФормВнешЦен";
	Форма.Металлоцентр = Металлоцентр;
	
	ТекСтр = Объект.ВнешниеЦены[Элементы.ВнешниеЦены.ТекущаяСтрока];
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СписНоменклатуры = ТекСтр.КонсолидированнаяНоменклатура;
	
	Форма.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура КонкурентыМеталлоцентровКонкурентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Партнеры.Форма.АГ_ФормаВыбораКонкурентов",,Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодразделениеПользователя = Пользователи.ТекущийПользователь().Подразделение;
	
	Если ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
		
		Если ПодразделениеПользователя.АГ_УровеньПодчинения = Перечисления.АГ_УровеньПодчинения.Металлоцентр Тогда
			 Металлоцентр = ПодразделениеПользователя;
		Иначе
			 Металлоцентр = ПолучитьПодразделениеПоРегиону(ПодразделениеПользователя.АГ_БизнесРегионМЦ);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделениеПоРегиону(Регион)
	
	Если Не ЗначениеЗаполнено(Регион) Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	НЕ СтруктураПредприятия.ПометкаУдаления
	|	И СтруктураПредприятия.АГ_БизнесРегионМЦ = &Регион
	|	И СтруктураПредприятия.АГ_УровеньПодчинения = ЗНАЧЕНИЕ(перечисление.АГ_УровеньПодчинения.Металлоцентр)";
	
	Запрос.УстановитьПараметр("Регион", Регион);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	АГ_СписокГородовФедеральногоИРеспубликанскогоЗначения.Город КАК Город
		|ИЗ
		|	Справочник.АГ_СписокГородовФедеральногоИРеспубликанскогоЗначения КАК АГ_СписокГородовФедеральногоИРеспубликанскогоЗначения
		|ГДЕ
		|	АГ_СписокГородовФедеральногоИРеспубликанскогоЗначения.СопоставленныйРегион = &СопоставленныйРегион
		|	И НЕ АГ_СписокГородовФедеральногоИРеспубликанскогоЗначения.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("СопоставленныйРегион", Регион);
		
		РезультатРегион = Запрос.Выполнить();
		Если РезультатРегион.Пустой() Тогда
			Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
		
		ВыборкаРегион = РезультатРегион.Выбрать();
		ВыборкаРегион.Следующий();
		
		МЦ = ПолучитьПодразделениеПоРегиону(ВыборкаРегион.Город);
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		МЦ = Выборка.Ссылка; 
	КонецЕсли;
	
	Возврат МЦ;
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизитКонкурентНаСервере(Клиент)
	
	Возврат Клиент.Конкурент;	
	
КонецФункции

&НаСервере
Функция ПолучитьИДКлиентаНаСервере(Клиент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартнерыАГ_Идентификаторы23met.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	Справочник.Партнеры.АГ_Идентификаторы23met КАК ПартнерыАГ_Идентификаторы23met
	               |ГДЕ
	               |	ПартнерыАГ_Идентификаторы23met.Ссылка = &Ссылка
	               |	И ПартнерыАГ_Идентификаторы23met.Регион = &Регион";
	
	Запрос.УстановитьПараметр("Ссылка", Клиент);
	Запрос.УстановитьПараметр("Регион", Металлоцентр.АГ_БизнесРегионМЦ);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() ТОгда
		Возврат "";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Идентификатор;	
	
КонецФункции


&НаКлиенте
Процедура КонкурентыМеталлоцентровКонкурентПриИзменении(Элемент)
	
	ТекСТрока = Элементы.КонкурентыМеталлоцентров.ТекущиеДанные;
	ТекСтрока.реквКонкурент = ПолучитьРеквизитКонкурентНаСервере(ТекСтрока.Конкурент);
	ТекСтрока.ИДКонкурента = ПолучитьИДКлиентаНаСервере(ТекСтрока.Конкурент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтборВнешЦен(Команда)
	
	Форма = ПолучитьФорму("Обработка.АГ_РаботаСЦенообразованием.Форма.ФормаОтбораЧисловыхПоказателей");
	
	Если НЕ Элементы.ВнешниеЦены.ОтборСтрок = Неопределено Тогда
		 Форма.СтруктураОтборов = ПолучитьСтруктуруОтборовНаСервере();
	КонецЕсли;
	
	
	Отборы = Форма.ОткрытьМодально();
	
	Элементы.ВнешниеЦены.ОтборСтрок = Неопределено;
	
	Если ЗначениеЗаполнено(Отборы) Тогда
		 УстановитьОтборыВнешнихЦенНаСервере(Отборы);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВнешнихЦенНаСервере(ДанныеВозврата)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТекОтбор", ИСТИНА);
	НайденныеСтроки = Объект.ВнешниеЦены.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ТекНайденнаяСтр Из НайденныеСтроки Цикл
		ТекНайденнаяСтр.ТекОтбор = Ложь;
	КонецЦикла;
	                
		
	//ТЗОтборы.Загрузить(ДанныеВозврата.Получить());///ТЗ
	ТабВозврата = ДанныеВозврата.Получить();
	ТЗОтборы.Очистить();
	Для Каждого ТекОтбор Из ТабВозврата Цикл
		НовСтр = ТЗОтборы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, текОтбор);
	КонецЦикла;
	
	ПостроительОтчета = Новый ПостроительОтчета; 
	
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(Объект.ВнешниеЦены.Выгрузить());
	
	Для Каждого ЭлементОтбора Из ТЗОтборы Цикл 
		НовыйОтбор = ПостроительОтчета.Отбор.Добавить(ЭлементОтбора.Имя); 
		НовыйОтбор.Использование = Истина; 
		НовыйОтбор.ВидСравнения = ПолучитьВидСравненияИзСтроки(ЭлементОтбора.ВидСравнения);
		НовыйОтбор.Значение = ЭлементОтбора.Значение; 
	КонецЦикла; 
	
	ПостроительОтчета.Выполнить();
	РезультатОтбора = ПостроительОтчета.Результат.Выгрузить();
	
	Для Каждого ТекСтр Из РезультатОтбора Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КонсолидированнаяНоменклатура", ТекСтр.КонсолидированнаяНоменклатура);
		НайденныеСтроки = Объект.ВнешниеЦены.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ТекНайденнаяСтр Из НайденныеСтроки Цикл
			ТекНайденнаяСтр.ТекОтбор = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Элементы.ВнешниеЦены.ОтборСтрок = Новый ФиксированнаяСтруктура("ТекОтбор", Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидСравненияИзСтроки(текВидСравнения)
	
	СоответствиеВидов = Новый Соответствие;
	СоответствиеВидов.Вставить("Равно", ВидСравнения.Равно);
	СоответствиеВидов.Вставить("НеРавно", ВидСравнения.НеРавно);
	СоответствиеВидов.Вставить("Больше", ВидСравнения.Больше);
	СоответствиеВидов.Вставить("Меньше", ВидСравнения.Меньше);
	СоответствиеВидов.Вставить("БольшеИлиРавно", ВидСравнения.БольшеИлиРавно);
	СоответствиеВидов.Вставить("МеньшеИлиРавно", ВидСравнения.МеньшеИлиРавно);
	
	Возврат СоответствиеВидов.Получить(текВидСравнения);
	
КонецФункции

&НаКлиенте
Процедура ОтменитьПоиск(Команда)
	
	Элементы.ВнешниеЦены.ОтборСтрок = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтборовНаСервере()
	
	Возврат Новый ХранилищеЗначения(ТЗОтборы.Выгрузить());
	
КонецФункции


&НаКлиенте
Процедура ИзмерениеНаценкиПриИзменении(Элемент)
	
	 ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ИзмерениеНаценки = ИзмерениеНаценки;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура УценочнаяСкидкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.УценочнаяСкидка = УценочнаяСкидка;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзмерениеСкидкиПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ИзмерениеСкидки = ИзмерениеСкидки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПараметров()
	
	Элементы.ГруппаБаза1Строка2.Видимость = ЗначениеЗаполнено(БазаРасчетаВнешнихЦен);
	Элементы.ГруппаБаза2Строка2.Видимость = ЗначениеЗаполнено(БазаРасчетаВнешнихЦен2);
	Элементы.ГруппаБаза3Строка2.Видимость = ЗначениеЗаполнено(БазаРасчетаВнешнихЦен3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяНаценка1ПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ПлановаяНаценка = ПлановаяНаценка;
	КонецЕсли;
	
	ЗаполнитьДекорацияНормативнаяРентабельность();	
	ПодобратьДиапазонСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаМенеджераПоПродажамПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.СкидкаМОП = СкидкаМенеджераПоПродажам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНачальникаОтделаПродажПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.СкидкаНОП = СкидкаНачальникаОтделаПродаж;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаДиректораМеталлоцентраПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.СкидкаДМЦ = СкидкаДиректораМеталлоцентра;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаРуководителяДивизионаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.СкидкаРДН = СкидкаРуководителяДивизиона;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДекорацияНормативнаяРентабельность()
	
	Элементы.ДекорацияНормативнаяРентабельность.Заголовок = "МИНУС НОРМАТИВНАЯ РЕНТАБЕЛЬНОСТЬ - " + Формат( ПлановаяНаценка, "ЧН=0") + " %";
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДиапазонСкидок()
	
	ВсегоСкидок = Объект.МатрицаМаржинальности.Количество();
	Если ВсегоСкидок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДиапазонСкидок = 0;
	ИзмерениеТрансформации = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Процент;
	ЕстьТекущий = Ложь;
	
	ТабМатрицаМаржинальности = Объект.МатрицаМаржинальности.Выгрузить();
	ТабМатрицаМаржинальности.Сортировать("Рентабельность УБЫВ");
	
	Для Каждого текСтрока Из ТабМатрицаМаржинальности Цикл
		ТекСтрока.Текущий = Ложь;
		
		Если ПлановаяНаценка >= ТекСтрока.Рентабельность и НЕ ЕстьТекущий Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Рентабельность", ТекСтрока.Рентабельность); 
			НайденныеСтроки = Объект.МатрицаМаржинальности.НайтиСтроки(ПараметрыОтбора);
			
			Если Не НайденныеСтроки.Количество() = 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока.Текущий = Истина;
				ЕстьТекущий = Истина;
				ДиапазонСкидок = НайденнаяСтрока.ДиапазонСкидки;
				ИзмерениеТрансформации = НайденнаяСтрока.Измерение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Текущий", Истина);
	Строки = Объект.МатрицаМаржинальности.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Элементы.МатрицаМаржинальности.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;

	
	Элементы.ДекорацияДиапазонСкидок.Заголовок = "ДИАПАЗОН СКИДОК - " + Формат(ДиапазонСкидок, "ЧДЦ=0; ЧН=0") + ?(ИзмерениеТрансформации = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Валюта, " " + Строка(ПолучитьВалютуПоПодразделению()), " %");
	Элементы.ДекорацияДиапазонСкидки.Заголовок = Формат(ДиапазонСкидок, "ЧДЦ=0; ЧН=0") + ?(ИзмерениеТрансформации = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Валюта, " " + Строка(ПолучитьВалютуПоПодразделению()), " %");
		
КонецПроцедуры

&НаКлиенте
Процедура МатрицаМаржинальностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.НоменклатурнаяГруппа) и НЕ Элементы.ПараметрыЦенообразования.ТекущиеДанные = Неопределено Тогда
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = Элементы.ПараметрыЦенообразования.ТекущиеДанные.НоменклатурнаяГруппа;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаценкуЗаОтсрочкуПлатежа(ТекНоменклатурнаяГруппа)
	 
	   Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                  |	ВложенныйЗапрос.Металлоцентр КАК Металлоцентр,
	                  |	МИНИМУМ(ВложенныйЗапрос.Поле1) КАК ПолеСортировки
	                  |ПОМЕСТИТЬ Таб1
	                  |ИЗ
	                  |	(ВЫБРАТЬ
	                  |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                  |		АГ_ФакторыОтпускнойЦены.Металлоцентр КАК Металлоцентр,
	                  |		1 КАК Поле1
	                  |	ИЗ
	                  |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	                  |	ГДЕ
	                  |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	                  |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &Металлоцентр
	                  |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	                  |	
	                  |	ОБЪЕДИНИТЬ ВСЕ
	                  |	
	                  |	ВЫБРАТЬ
	                  |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	                  |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	                  |		2
	                  |	ИЗ
	                  |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	                  |	ГДЕ
	                  |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	                  |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &ПустойМЦ
	                  |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	                  |	
	                  |	ОБЪЕДИНИТЬ ВСЕ
	                  |	
	                  |	ВЫБРАТЬ
	                  |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	                  |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	                  |		3
	                  |	ИЗ
	                  |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	                  |	ГДЕ
	                  |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &ПустаяНГ
	                  |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &Металлоцентр
	                  |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	                  |	
	                  |	ОБЪЕДИНИТЬ ВСЕ
	                  |	
	                  |	ВЫБРАТЬ
	                  |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	                  |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	                  |		4
	                  |	ИЗ
	                  |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	                  |	ГДЕ
	                  |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &ПустаяНГ
	                  |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &ПустойМЦ
	                  |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя) КАК ВложенныйЗапрос
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	ВложенныйЗапрос.НоменклатурнаяГруппа,
	                  |	ВложенныйЗапрос.Металлоцентр
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	Таб1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                  |	Таб1.Металлоцентр КАК Металлоцентр,
	                  |	АГ_ФакторыОтпускнойЦены.Ранжирование КАК Отсрочка,
	                  |	АГ_ФакторыОтпускнойЦены.ЗначениеТрансформации КАК Наценка,
	                  |	АГ_ФакторыОтпускнойЦены.ИндексСтроки КАК ИндексСтроки,
	                  |	АГ_ФакторыОтпускнойЦены.ИзмерениеТрансформации КАК Измерение
	                  |ИЗ
	                  |	(ВЫБРАТЬ
	                  |		МИНИМУМ(Таб1.ПолеСортировки) КАК ПолеСортировки
	                  |	ИЗ
	                  |		Таб1 КАК Таб1) КАК ВложенныйЗапрос
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Таб1 КАК Таб1
	                  |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	                  |			ПО Таб1.НоменклатурнаяГруппа = АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа
	                  |				И Таб1.Металлоцентр = АГ_ФакторыОтпускнойЦены.Металлоцентр
	                  |				И (АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя)
	                  |		ПО ВложенныйЗапрос.ПолеСортировки = Таб1.ПолеСортировки
	                  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	ИндексСтроки";
	   
	   Запрос.УстановитьПараметр("ТипПоказателя", Перечисления.АГ_ТипыПоказателейФакторовОтпускнойЦены.Отсрочка);
	   Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	   Запрос.УстановитьПараметр("ПустойМЦ", Справочники.СтруктураПредприятия.ПустаяСсылка());
	   Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ТекНоменклатурнаяГруппа);
	   Запрос.УстановитьПараметр("ПустаяНГ", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	   
	   Объект.НаценкаЗаОтсрочкуПлатежа.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаценкуЗаПросроченнуюДЗ(ТекНоменклатурнаяГруппа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ВложенныйЗапрос.Металлоцентр КАК Металлоцентр,
	               |	МИНИМУМ(ВложенныйЗапрос.Поле1) КАК ПолеСортировки
	               |ПОМЕСТИТЬ Таб1
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |		АГ_ФакторыОтпускнойЦены.Металлоцентр КАК Металлоцентр,
	               |		1 КАК Поле1
	               |	ИЗ
	               |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |	ГДЕ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	               |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &Металлоцентр
	               |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	               |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	               |		2
	               |	ИЗ
	               |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |	ГДЕ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	               |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &ПустойМЦ
	               |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	               |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	               |		3
	               |	ИЗ
	               |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |	ГДЕ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &ПустаяНГ
	               |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &Металлоцентр
	               |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа,
	               |		АГ_ФакторыОтпускнойЦены.Металлоцентр,
	               |		4
	               |	ИЗ
	               |		РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |	ГДЕ
	               |		АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &ПустаяНГ
	               |		И АГ_ФакторыОтпускнойЦены.Металлоцентр = &ПустойМЦ
	               |		И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.НоменклатурнаяГруппа,
	               |	ВложенныйЗапрос.Металлоцентр
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	Таб1.Металлоцентр КАК Металлоцентр,
	               |	АГ_ФакторыОтпускнойЦены.Ранжирование КАК Просрочка,
	               |	АГ_ФакторыОтпускнойЦены.ЗначениеТрансформации КАК Наценка,
	               |	АГ_ФакторыОтпускнойЦены.ИндексСтроки КАК ИндексСтроки,
	               |	АГ_ФакторыОтпускнойЦены.ИзмерениеТрансформации КАК Измерение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МИНИМУМ(Таб1.ПолеСортировки) КАК ПолеСортировки
	               |	ИЗ
	               |		Таб1 КАК Таб1) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Таб1 КАК Таб1
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |			ПО Таб1.НоменклатурнаяГруппа = АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа
	               |				И Таб1.Металлоцентр = АГ_ФакторыОтпускнойЦены.Металлоцентр
	               |				И (АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя)
	               |		ПО ВложенныйЗапрос.ПолеСортировки = Таб1.ПолеСортировки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИндексСтроки";
	
	Запрос.УстановитьПараметр("ТипПоказателя", Перечисления.АГ_ТипыПоказателейФакторовОтпускнойЦены.Просрочка);
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	Запрос.УстановитьПараметр("ПустойМЦ", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ТекНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("ПустаяНГ", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	
	Объект.НаценкаЗаПросроченнуюДЗ.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаценкуЗаМалотоннажность(ТекНоменклатурнаяГруппа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АГ_ФакторыОтпускнойЦены.Ранжирование КАК Вес,
	               |	АГ_ФакторыОтпускнойЦены.ЗначениеТрансформации КАК Наценка,
	               |	АГ_ФакторыОтпускнойЦены.ИндексСтроки КАК ИндексСтроки,
	               |	АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	АГ_ФакторыОтпускнойЦены.ИзмерениеТрансформации КАК Измерение
	               |ИЗ
	               |	РегистрСведений.АГ_ФакторыОтпускнойЦены КАК АГ_ФакторыОтпускнойЦены
	               |ГДЕ
	               |	АГ_ФакторыОтпускнойЦены.Металлоцентр = &Металлоцентр
	               |	И АГ_ФакторыОтпускнойЦены.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	               |	И АГ_ФакторыОтпускнойЦены.ТипПоказателя = &ТипПоказателя
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИндексСтроки";
	
	Запрос.УстановитьПараметр("ТипПоказателя", Перечисления.АГ_ТипыПоказателейФакторовОтпускнойЦены.Малотоннажность);
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ТекНоменклатурнаяГруппа);
	
	Объект.НаценкаЗаМалотоннажность.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура НаценкаЗаМалотоннажностьПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.НоменклатурнаяГруппа) и НЕ Элементы. НаценкаЗаМалотоннажность.ОтборСтрок = Неопределено Тогда
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = Элементы. НаценкаЗаМалотоннажность.ОтборСтрок.НоменклатурнаяГруппа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВнешниеЦеныЦенаСУчетомСтратегии" Тогда     	//Расчет цены
		
		СтандартнаяОбработка = Ложь;
		РасшифровкаКалькуляцииЗначений();
		
	ИначеЕсли Поле.Имя = "ВнешниеЦеныОстаток" Тогда     			//Остаток
		
		СтандартнаяОбработка = Ложь;
		РасшифровкаОстатка(Неопределено);
		
	ИначеЕсли Поле.Имя = "ВнешниеЦеныЦенаСУчетомФакторов" Тогда     //С учетом факторов
		
		СтандартнаяОбработка = Ложь;
		РасшифровкаЦеныСУчетомФакторов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаКалькуляцииЗначений()
	
	Текстрока = Элементы.ВнешниеЦены.ТекущиеДанные;
	Если Текстрока= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.База = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра") ИЛИ
		ТекСтрока.База = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныКонкурентов") Тогда
		
		ТабДок = ПолучитьРасшифровкуПоЦенамКонкурентовИЦенамДругогоМеталлоцентра(ТекСтрока.База, ТекСтрока.КонсолидированнаяНоменклатура, ТекСтрока.СредневзвешеннаяЦена, ТекСтрока.ЦенаСУчетомСтратегии, ТекСтрока.Валюта, ТекСтрока.Регион);
		
	ИначеЕсли ТекСтрока.База = ПредопределенноеЗначение("Перечисление.АГ_БазыРасчетаПараметровЦенообразования.ЦеныВосстановления") Тогда
		
		ТабДок = ПолучитьРасшифровкуПоЦенамВосстановления(ТекСтрока.КонсолидированнаяНоменклатура, ТекСтрока.Валюта, ТекСтрока.СредневзвешеннаяЦена, ТекСтрока.ЦенаСУчетомСтратегии);
		
	КонецЕсли;
	
		
	Форма = ПолучитьФорму("Обработка.АГ_РаботаСЦенообразованием.Форма.ФормаРасшифровкиНулевыхЦен",,,Новый УникальныйИдентификатор);
	Форма.ТекТабДок = ТабДок;
	Форма.ТипОтчета = "РасшифровкаКалькуляции";
	
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуПоЦенамВосстановления(КонсолидированнаяНоменклатура, Валюта, СредневзвешеннаяЦена, ЦенаСУчетомСтратегии)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДокОбъект.ПолучитьМакет("Макет_РасшифровкаКалькуляции");
	
	//ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	//ОбластьМакета.Параметры.Номенклатура = КонсолидированнаяНоменклатура;
	//ТабДок.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка2");
	ОбластьМакета.Параметры.Номенклатура = КонсолидированнаяНоменклатура;
	ОбластьМакета.Параметры.Валюта = Валюта;
	ТабДок.Вывести(ОбластьМакета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыЦенообразования.ПлановаяНаценка КАК ПлановаяНаценка
	               |ИЗ
	               |	РегистрСведений.АГ_ПараметрыЦенообразования КАК ПараметрыЦенообразования
	               |ГДЕ
	               |	ПараметрыЦенообразования.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	               |	И ПараметрыЦенообразования.Регион = &Регион";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", КонсолидированнаяНоменклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Регион", Металлоцентр);
	
	РезультатПараметры = Запрос.Выполнить();
	
	Если НЕ РезультатПараметры.Пустой() Тогда
		
		ВыборкаПараметры = РезультатПараметры.Выбрать();
		ВыборкаПараметры.Следующий();
		Наценка = ВыборкаПараметры.ПлановаяНаценка;
	Иначе
		Наценка = 0;
	КонецЕсли;
		
	
	 Запрос = Новый Запрос;
	 Запрос.Текст =  "ВЫБРАТЬ
	                 |	ВложенныйЗапрос.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	                 |	СУММА(ВложенныйЗапрос.КоличествоНаСкладе) КАК КоличествоНаСкладе,
	                 |	СУММА(ВложенныйЗапрос.КоличествоЖесткийРезерв) КАК КоличествоЖесткийРезерв,
	                 |	СУММА(ВложенныйЗапрос.СтоимостьОстатокПартии) КАК СтоимостьОстатокПартии,
	                 |	СУММА(ВложенныйЗапрос.КоличествоОстатокПартии) КАК КоличествоОстатокПартии,
	                 |	СУММА(ВложенныйЗапрос.СуммаТоварыВПути) КАК СуммаТоварыВПути,
	                 |	СУММА(ВложенныйЗапрос.КоличествоТоварыВПути) КАК КоличествоТоварыВПути,
	                 |	СУММА(ВложенныйЗапрос.СуммаЗаявок) КАК СуммаЗаявок,
	                 |	СУММА(ВложенныйЗапрос.КоличествоЗаявок) КАК КоличествоЗаявок,
	                 |	ВложенныйЗапрос.Склад КАК Склад
	                 |ИЗ
	                 |	(ВЫБРАТЬ
	                 |		СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка КАК КонсолидированнаяНоменклатура,
	                 |		СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК КоличествоНаСкладе,
	                 |		0 КАК КоличествоЖесткийРезерв,
	                 |		0 КАК СтоимостьОстатокПартии,
	                 |		0 КАК КоличествоОстатокПартии,
	                 |		0 КАК СуммаТоварыВПути,
	                 |		0 КАК КоличествоТоварыВПути,
	                 |		0 КАК СуммаЗаявок,
	                 |		0 КАК КоличествоЗаявок,
	                 |		ТоварыНаСкладахОстатки.Склад КАК Склад
	                 |	ИЗ
	                 |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	                 |				,
	                 |				Склад В
	                 |					(ВЫБРАТЬ
	                 |						СкладыУправленияЗапасамиТаблицаСкладов.Ссылка КАК Склад
	                 |					ИЗ
	                 |						Справочник.Склады КАК СкладыУправленияЗапасамиТаблицаСкладов
	                 |					ГДЕ
	                 |						НЕ СкладыУправленияЗапасамиТаблицаСкладов.Ссылка.ПометкаУдаления
	                 |						И СкладыУправленияЗапасамиТаблицаСкладов.Подразделение = &Металлоцентр)) КАК ТоварыНаСкладахОстатки
	                 |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура
	                 |			ПО ТоварыНаСкладахОстатки.Номенклатура = СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка
	                 |	ГДЕ
	                 |		СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка = &КонсолидированнаяНоменклатура
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		СОБи_КонсолидированнаяНоменклатураВходящаяНоменклатура.Ссылка,
	                 |		ТоварыНаСкладахОстатки.Склад
	                 |	
	                 |	ОБЪЕДИНИТЬ ВСЕ
	                 |	
	                 |	ВЫБРАТЬ
	                 |		ПартииТоваровНаСкладахОстатки.АналитикаУчетаНоменклатуры.Номенклатура,
	                 |		СУММА(0),
	                 |		СУММА(0),
	                 |		СУММА(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток / КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность),
	                 |		СУММА(ПартииТоваровНаСкладахОстатки.КоличествоОстаток),
	                 |		0,
	                 |		0,
	                 |		0,
	                 |		0,
	                 |		ПартииТоваровНаСкладахОстатки.АналитикаУчетаНоменклатуры.МестоХранения
	                 |	ИЗ
	                 |		РегистрНакопления.СебестоимостьТоваров.Остатки(, АналитикаУчетаНоменклатуры.МестоХранения.Подразделение = &металлоцентр) КАК ПартииТоваровНаСкладахОстатки
	                 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	                 |			ПО ПартииТоваровНаСкладахОстатки.АналитикаУчетаНоменклатуры.МестоХранения.АГ_ВидЦеныВнешнийПрайс.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
	                 |	ГДЕ
	                 |		ПартииТоваровНаСкладахОстатки.АналитикаУчетаНоменклатуры.Номенклатура = &КонсолидированнаяНоменклатура
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ПартииТоваровНаСкладахОстатки.АналитикаУчетаНоменклатуры.Номенклатура,
	                 |		ПартииТоваровНаСкладахОстатки.АналитикаУчетаНоменклатуры.МестоХранения) КАК ВложенныйЗапрос
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ВложенныйЗапрос.КонсолидированнаяНоменклатура,
	                 |	ВложенныйЗапрос.Склад
	                 |ИТОГИ
	                 |	СУММА(КоличествоНаСкладе),
	                 |	СУММА(КоличествоЖесткийРезерв),
	                 |	СУММА(СтоимостьОстатокПартии),
	                 |	СУММА(КоличествоОстатокПартии),
	                 |	СУММА(СуммаТоварыВПути),
	                 |	СУММА(КоличествоТоварыВПути),
	                 |	СУММА(СуммаЗаявок),
	                 |	СУММА(КоличествоЗаявок)
	                 |ПО
	                 |	КонсолидированнаяНоменклатура";
	 
	 Запрос.УстановитьПараметр("КонсолидированнаяНоменклатура", КонсолидированнаяНоменклатура);
	 Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	 
	 Результат = Запрос.Выполнить();
	 
	 Если Не Результат.Пустой() Тогда
		 ВыборкаИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		 
		 Пока ВыборкаИтог.Следующий() Цикл
			 
			 Выборка = ВыборкаИтог.Выбрать();
			 Пока Выборка.Следующий() Цикл
				 ОбластьМакета = Макет.ПолучитьОбласть("Строка2");
				 
				 ОбластьМакета.Параметры.Склад = Выборка.Склад;
				 ОбластьМакета.Параметры.ОстатокНаСкладе  = Выборка.КоличествоНаСкладе;
				 ОбластьМакета.Параметры.ЖесткийРезерв = Выборка.КоличествоЖесткийРезерв;
				 ОстатокЗаМинусомЖесткогоРезерва = Выборка.КоличествоНаСкладе - Выборка.КоличествоЖесткийРезерв;
				 ОбластьМакета.Параметры.ОстатокЗаМинусомЖесткогоРезерва = ОстатокЗаМинусомЖесткогоРезерва;
				 ОбластьМакета.Параметры.Себестоимость = ?(Выборка.КоличествоОстатокПартии = 0,0,Выборка.СтоимостьОстатокПартии / Выборка.КоличествоОстатокПартии);
				 ОбластьМакета.Параметры.КоличествоТоварыВПути = Выборка.КоличествоТоварыВПути;
				 ОбластьМакета.Параметры.ЦенаТоварыВПути = ?(Выборка.КоличествоТоварыВПути = 0,0,Выборка.СуммаТоварыВПути / Выборка.КоличествоТоварыВПути);
				 ОбластьМакета.Параметры.КоличествоЗаказано = Выборка.КоличествоЗаявок; 
				 ОбластьМакета.Параметры.ЦенаЗаказано = ?(Выборка.КоличествоЗаявок = 0,0,Выборка.СуммаЗаявок / Выборка.КоличествоЗаявок);
				 
				 ТабДок.Вывести(ОбластьМакета);
			 КонецЦикла;
			 
			 ОбластьМакета = макет.ПолучитьОбласть("Подвал2");
			 
			 ОбластьМакета.Параметры.ОстатокНаСкладе  = ВыборкаИтог.КоличествоНаСкладе;
			 ОбластьМакета.Параметры.ЖесткийРезерв = ВыборкаИтог.КоличествоЖесткийРезерв;
			 ОстатокЗаМинусомЖесткогоРезерва = ВыборкаИтог.КоличествоНаСкладе - ВыборкаИтог.КоличествоЖесткийРезерв;
			 ОбластьМакета.Параметры.ОстатокЗаМинусомЖесткогоРезерва = ОстатокЗаМинусомЖесткогоРезерва;
			 ОбластьМакета.Параметры.Себестоимость = ?(ВыборкаИтог.КоличествоОстатокПартии = 0,0,Формат(ВыборкаИтог.СтоимостьОстатокПартии / ВыборкаИтог.КоличествоОстатокПартии,"ЧДЦ=2"));
			 ОбластьМакета.Параметры.КоличествоТоварыВПути = ВыборкаИтог.КоличествоТоварыВПути;
			 ОбластьМакета.Параметры.ЦенаТоварыВПути = ?(ВыборкаИтог.КоличествоТоварыВПути = 0,0,Формат(ВыборкаИтог.СуммаТоварыВПути / ВыборкаИтог.КоличествоТоварыВПути,"ЧДЦ=2"));
			 ОбластьМакета.Параметры.КоличествоЗаказано = ВыборкаИтог.КоличествоЗаявок; 
			 ОбластьМакета.Параметры.ЦенаЗаказано = ?(ВыборкаИтог.КоличествоЗаявок = 0,0,Формат(ВыборкаИтог.суммаЗаявок / ВыборкаИтог.КоличествоЗаявок,"ЧДЦ=2"));
			 
			 ОбластьМакета.Параметры.СредневзвешеннаяЦена = СредневзвешеннаяЦена;
			 ОбластьМакета.Параметры.Валюта = Валюта;
			 ОбластьМакета.Параметры.ПлановаяНаценка = Наценка;
			 ОбластьМакета.Параметры.РасчетнаяЦена = ЦенаСУчетомСтратегии;
			 
			 
			  ТабДок.Вывести(ОбластьМакета);
		 КонецЦикла;
	 КонецЕсли;	
	
	Возврат ТабДок;

КонецФункции

&НаСервере
Функция ПолучитьРасшифровкуПоЦенамКонкурентовИЦенамДругогоМеталлоцентра(База, КонсолидированнаяНоменклатура, СредневзвешеннаяЦена, ЦенаСУчетомСтратегии, Валюта, текРегион)
	
	Если База = Перечисления.АГ_БазыРасчетаПараметровЦенообразования.ЦеныДругогоМеталлоцентра Тогда
		ЦеныДругогоМеталлоцентра = Истина;
		
		Регион = Справочники.СтруктураПредприятия.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПараметрыЦенообразования.РегионМеталлоцентра КАК РегионМеталлоцентра,
		|	ПараметрыЦенообразования.Доставка КАК Доставка
		|ИЗ
		|	РегистрСведений.АГ_ПараметрыЦенообразования КАК ПараметрыЦенообразования
		|ГДЕ
		|	ПараметрыЦенообразования.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И ПараметрыЦенообразования.Регион = &Регион";
		
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", КонсолидированнаяНоменклатура.Видноменклатуры);
		Запрос.УстановитьПараметр("Регион", Металлоцентр);
		
		РезультатПараметры1 = Запрос.Выполнить();
		
		Если НЕ РезультатПараметры1.Пустой() Тогда
			
			ВыборкаПараметры1 = РезультатПараметры1.Выбрать();
			ВыборкаПараметры1.Следующий();
			Регион = ВыборкаПараметры1.РегионМеталлоцентра;
		КонецЕсли;
		
	Иначе
		ЦеныДругогоМеталлоцентра = Ложь;
		Регион = Металлоцентр;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура КАК КонсолидированнаяНоменклатура,
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент КАК Контрагент,
	               |	НАЧАЛОПЕРИОДА(ЦеныКонсолидированнойНоменклатурыСрезПоследних.Период, ДЕНЬ) КАК Период,
	               |	КонкурентыМеталлоцентров.Рейтинг КАК Рейтинг,
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион КАК Регион,
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Источник КАК Источник
	               |ПОМЕСТИТЬ Таб1
	               |ИЗ
	               |	РегистрСведений.АГ_ЦеныКонкурентов.СрезПоследних(, Номенклатура = &КонсолидированнаяНоменклатура) КАК ЦеныКонсолидированнойНоменклатурыСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_КонкурентыМеталлоцентров КАК КонкурентыМеталлоцентров
	               |		ПО ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент = КонкурентыМеталлоцентров.Конкурент
	               |			И ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион = КонкурентыМеталлоцентров.Регион.АГ_БизнесРегионМЦ
	               |			И ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры = КонкурентыМеталлоцентров.НоменклатурнаяГруппа
	               |ГДЕ
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Источник В(&Источник)
	               |	И ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура = &КонсолидированнаяНоменклатура
	               |	И ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион = &Регион
	               |	И (НЕ ЕСТЬNULL(КонкурентыМеталлоцентров.Рейтинг, 0) = 0
	               |			ИЛИ &ЦеныДругогоМеталлоцентра)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб1.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	               |	Таб1.Контрагент КАК Контрагент,
	               |	ЦеныКонсолидированнойНоменклатуры.Регион КАК Регион,
	               |	ЦеныКонсолидированнойНоменклатуры.Валюта КАК Валюта,
	               |	ЦеныКонсолидированнойНоменклатуры.Цена КАК Цена,
	               |	Таб1.Рейтинг КАК Рейтинг,
	               |	Таб1.Источник КАК Источник,
	               |	ЦеныКонсолидированнойНоменклатуры.Период КАК ДействуетСДаты
	               |ИЗ
	               |	Таб1 КАК Таб1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ЦеныКонкурентов КАК ЦеныКонсолидированнойНоменклатуры
	               |		ПО Таб1.КонсолидированнаяНоменклатура = ЦеныКонсолидированнойНоменклатуры.Номенклатура
	               |			И Таб1.Контрагент = ЦеныКонсолидированнойНоменклатуры.Контрагент
	               |			И (Таб1.Период = НАЧАЛОПЕРИОДА(ЦеныКонсолидированнойНоменклатуры.Период, ДЕНЬ))
	               |			И Таб1.Регион = ЦеныКонсолидированнойНоменклатуры.Регион
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Таб1.Контрагент.Наименование
	               |ИТОГИ
	               |	МАКСИМУМ(Рейтинг)
	               |ПО
	               |	Контрагент";
	
	ИсточникДанных = Новый массив;
	
	Если ЦеныДругогоМеталлоцентра Тогда
		ИсточникДанных.Добавить("Формирование внешней цены");
	Иначе
		ИсточникДанных.Добавить("Парсинг сайта 23met");
		ИсточникДанных.Добавить("Регистрация прайс-листов");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Источник", ИсточникДанных);
	Запрос.УстановитьПараметр("Регион", текРегион);
	Запрос.УстановитьПараметр("КонсолидированнаяНоменклатура", КонсолидированнаяНоменклатура);
	Запрос.УстановитьПараметр("ЦеныДругогоМеталлоцентра", ЦеныДругогоМеталлоцентра);
	
	
	РезультатКонкуренты = Запрос.Выполнить();
	
	ДействуетСДаты = Дата("00010101000000");
	
	ТабДок = Новый ТабличныйДокумент;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДокОбъект.ПолучитьМакет("Макет_РасшифровкаКалькуляции");
	
	//ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	//ОбластьМакета.Параметры.Номенклатура = КонсолидированнаяНоменклатура;
	//ТабДок.Вывести(ОбластьМакета);
	
	Если Не ЦеныДругогоМеталлоцентра Тогда
		
		ОбластьМакета = макет.ПолучитьОбласть("Шапка1");
		
		ОбластьМакета.Параметры.Номенклатура = КонсолидированнаяНоменклатура;
		ОбластьМакета.Параметры.Дата1 = ТекущаяДата() - 6 * 24*3600;
		ОбластьМакета.Параметры.Дата2 = ТекущаяДата() - 5 * 24*3600;
		ОбластьМакета.Параметры.Дата3 = ТекущаяДата() - 4 * 24*3600;
		ОбластьМакета.Параметры.Дата4 = ТекущаяДата() - 3 * 24*3600;
		ОбластьМакета.Параметры.Дата5 = ТекущаяДата() - 2 * 24*3600;
		ОбластьМакета.Параметры.Дата6 = ТекущаяДата() - 1 * 24*3600;
		ОбластьМакета.Параметры.Дата7 = ТекущаяДата();
		ТабДок.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	Если НЕ РезультатКонкуренты.Пустой() Тогда
		
		Числитель = "";
		Знаменатель = "";
		
		ВыборкаКонкуренты = РезультатКонкуренты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонкуренты.Следующий() Цикл
			
			Выборка = ВыборкаКонкуренты.Выбрать();
			
			ТЗЦен = Новый ТаблицаЗначений;
			ТЗЦен.Колонки.Добавить("Цена");
			ТЗЦен.Колонки.Добавить("Источник");
			ТЗЦен.Колонки.Добавить("ДействуетСДаты");
			
			ТекстЦен = "";
			
			Пока Выборка.Следующий() Цикл
				
				НовСтр = ТЗЦен.Добавить();
				Новстр.Цена = Выборка.Цена;
				НовСтр.Источник = Выборка.Источник;
				НовСтр.ДействуетСДаты = Выборка.ДействуетСДаты;
				
				ТекстЦен = ТекстЦен + ?(ТекстЦен = "","",", ") + Строка(Выборка.Цена) + " " + Выборка.Валюта;
				
			КонецЦикла;
			
			ТЗЦен.Сортировать("Цена ВОЗР");
			МинЦена = ТЗЦен[0].Цена;
			ИсточникМинЦены = ТЗЦен[0].Источник;
			ДатаМинЦены = ТЗЦен[0].ДействуетСДаты;
			
			ТЗЦен.Сортировать("Цена УБЫВ");
			МаксЦена = ТЗЦен[0].Цена;
			ИсточникМаксЦены = ТЗЦен[0].Источник;
			ДатаМаксЦены = ТЗЦен[0].ДействуетСДаты;
			
			Если МинЦена = МаксЦена Тогда
				Цена = МаксЦена;
				Источник = ИсточникМаксЦены;
				ДействуетСДаты = ДатаМаксЦены;
				
				Если ТЗЦен.Количество() = 1 Тогда
					ТекстОтклонения = "";
				Иначе
					ТекстОтклонения = "Отклонений не выявлено.";
				КонецЕсли;
			ИначеЕсли (МаксЦена - МинЦена) / ((максЦена + МинЦена) / 2) * 100 >= 2 Тогда
				Цена = максЦена;
				Источник = ИсточникМаксЦены;
				ТекстОтклонения = "Отклонение более 2 %.";
				ДействуетСДаты = ДатаМаксЦены;
			Иначе 
				Цена = минЦена;
				Источник = ИсточникМинЦены;
				ТекстОтклонения = "Отклонение менее 2 %.";
				ДействуетСДаты = ДатаМинЦены;
			КонецЕсли;
			
			ТекстПроисхождения = "Выявлены цены: " + ТекстЦен + ". " + ТекстОтклонения + "Принята цена: " + Цена + " RUB.";
			
			Если Не ЦеныДругогоМеталлоцентра Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка|Основнаятаблица");
				ОбластьМакета.Параметры.Конкурент = ВыборкаКонкуренты.Контрагент;
				ОбластьМакета.Параметры.Рейтинг = ВыборкаКонкуренты.Рейтинг;
				ОбластьМакета.Параметры.Цена = Цена;
				ОбластьМакета.Параметры.Источник = Источник;
				ОбластьМакета.Параметры.ДействуетСДаты = ДействуетСДаты;
				
				ТабДок.Вывести(ОбластьМакета);
				
				Цена1 = ПолучитьЦенуНаДату(ТекущаяДата() - 6 * 24*3600, ВыборкаКонкуренты.Контрагент, КонсолидированнаяНоменклатура, Регион);
				Цена2 = ПолучитьЦенуНаДату(ТекущаяДата() - 5 * 24*3600, ВыборкаКонкуренты.Контрагент, КонсолидированнаяНоменклатура, Регион);
				Цена3 = ПолучитьЦенуНаДату(ТекущаяДата() - 4 * 24*3600, ВыборкаКонкуренты.Контрагент, КонсолидированнаяНоменклатура, Регион);
				Цена4 = ПолучитьЦенуНаДату(ТекущаяДата() - 3 * 24*3600, ВыборкаКонкуренты.Контрагент, КонсолидированнаяНоменклатура, Регион);
				Цена5 = ПолучитьЦенуНаДату(ТекущаяДата() - 2 * 24*3600, ВыборкаКонкуренты.Контрагент, КонсолидированнаяНоменклатура, Регион);
				Цена6 = ПолучитьЦенуНаДату(ТекущаяДата() - 1 * 24*3600, ВыборкаКонкуренты.Контрагент, КонсолидированнаяНоменклатура, Регион);
				Цена7 = ПолучитьЦенуНаДату(ТекущаяДата(), ВыборкаКонкуренты.Контрагент, КонсолидированнаяНоменклатура, Регион);
				
				ОбластьМакета = макет.ПолучитьОбласть("Строка1|Цена");
				ОбластьМакета.Параметры.Цена = Цена1;
				ТабДок.Присоединить(ОбластьМакета);
				
				Если Цена1 = Цена2 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|Безизменений");
				ИначеЕсли Цена1 < Цена2 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|РостЦены");
				Иначе ОбластьМакета = макет.ПолучитьОбласть("Строка1|СнижениеЦены");
				КонецЕсли;
				
				ТабДок.Присоединить(ОбластьМакета);
				
				
				ОбластьМакета = макет.ПолучитьОбласть("Строка1|Цена");
				ОбластьМакета.Параметры.Цена = Цена2;
				ТабДок.Присоединить(ОбластьМакета);
				
				Если Цена2 = Цена3 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|Безизменений");
				ИначеЕсли Цена2 < Цена3 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|РостЦены");
				Иначе ОбластьМакета = макет.ПолучитьОбласть("Строка1|СнижениеЦены");
				КонецЕсли;
				
				ТабДок.Присоединить(ОбластьМакета);
				
				
				
				ОбластьМакета = макет.ПолучитьОбласть("Строка1|Цена");
				ОбластьМакета.Параметры.Цена = Цена3;
				ТабДок.Присоединить(ОбластьМакета);
				
				Если Цена3 = Цена4 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|Безизменений");
				ИначеЕсли Цена3 < Цена4 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|РостЦены");
				Иначе ОбластьМакета = макет.ПолучитьОбласть("Строка1|СнижениеЦены");
				КонецЕсли;
				
				ТабДок.Присоединить(ОбластьМакета);
				
				
				ОбластьМакета = макет.ПолучитьОбласть("Строка1|Цена");
				ОбластьМакета.Параметры.Цена = Цена4;
				ТабДок.Присоединить(ОбластьМакета);
				
				Если Цена4 = Цена5 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|Безизменений");
				ИначеЕсли Цена4 < Цена5 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|РостЦены");
				Иначе ОбластьМакета = макет.ПолучитьОбласть("Строка1|СнижениеЦены");
				КонецЕсли;
				
				ТабДок.Присоединить(ОбластьМакета);
				
				
				
				ОбластьМакета = макет.ПолучитьОбласть("Строка1|Цена");
				ОбластьМакета.Параметры.Цена = Цена5;
				ТабДок.Присоединить(ОбластьМакета);
				
				Если Цена5 = Цена6 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|Безизменений");
				ИначеЕсли Цена5 < Цена6 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|РостЦены");
				Иначе ОбластьМакета = макет.ПолучитьОбласть("Строка1|СнижениеЦены");
				КонецЕсли;
				
				ТабДок.Присоединить(ОбластьМакета);
				
				
				
				
				ОбластьМакета = макет.ПолучитьОбласть("Строка1|Цена");
				ОбластьМакета.Параметры.Цена = Цена6;
				ТабДок.Присоединить(ОбластьМакета);
				
				Если Цена6 = Цена7 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|Безизменений");
				ИначеЕсли Цена6 < Цена7 Тогда
					ОбластьМакета = макет.ПолучитьОбласть("Строка1|РостЦены");
				Иначе ОбластьМакета = макет.ПолучитьОбласть("Строка1|СнижениеЦены");
				КонецЕсли;
				
				ТабДок.Присоединить(ОбластьМакета);
				
				
				ОбластьМакета = макет.ПолучитьОбласть("Строка1|Цена");
				ОбластьМакета.Параметры.Цена = Цена7;
				ТабДок.Присоединить(ОбластьМакета);
				ОбластьМакета = макет.ПолучитьОбласть("Строка1|Безизменений");
				ТабДок.Присоединить(ОбластьМакета);
				
			КонецЕсли;
			
			Числитель = Числитель + ?(Числитель = "", "", " + ") + Строка(Цена) + " х " + Строка(ВыборкаКонкуренты.Рейтинг);
			Знаменатель = Знаменатель + ?(Знаменатель = "", "", " + ") + Строка(ВыборкаКонкуренты.Рейтинг);
		КонецЦикла;
		
		Если НЕ ЦеныДругогоМеталлоцентра Тогда
			ОбластьМакета = макет.ПолучитьОбласть("Подвал");
			
			Если Знаменатель = "" Тогда
				Знаменатель = 1;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Формула = "(" + Числитель + ") / (" + Знаменатель + ") = " + Строка(СредневзвешеннаяЦена) + " RUB";
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПараметрыЦенообразования.Измерение КАК Измерение,
			|	ПараметрыЦенообразования.Стратегия КАК Стратегия
			|ИЗ
			|	РегистрСведений.АГ_ПараметрыЦенообразования КАК ПараметрыЦенообразования
			|ГДЕ
			|	ПараметрыЦенообразования.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
			|	И ПараметрыЦенообразования.Регион = &Регион";
			
			Запрос.УстановитьПараметр("НоменклатурнаяГруппа", КонсолидированнаяНоменклатура.ВидНоменклатуры);
			Запрос.УстановитьПараметр("Регион", Металлоцентр);
			
			РезультатПараметры = Запрос.Выполнить();
			
			ПустаяСтратегия = Истина;
			Если НЕ РезультатПараметры.Пустой() И НЕ ЦеныДругогоМеталлоцентра Тогда
				
				ВыборкаПараметры = РезультатПараметры.Выбрать();
				ВыборкаПараметры.Следующий();
				
				Если ВыборкаПараметры.Измерение = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Валюта Тогда
					ЦенаСУчетомСтратегии = Строка(СредневзвешеннаяЦена + ВыборкаПараметры.Стратегия);
					Если НЕ ВыборкаПараметры.Стратегия = 0 Тогда
						ПустаяСтратегия = Ложь;
					КонецЕсли;
				Иначе
					МодульСтратегии = ?(ВыборкаПараметры.Стратегия > 0, ВыборкаПараметры.Стратегия, - ВыборкаПараметры.Стратегия);
					ЗнакСтратегии = ?(ВыборкаПараметры.Стратегия > 0, " + ", " - ");
					ЦенаСУчетомСтратегии = Строка(СредневзвешеннаяЦена) + ЗнакСтратегии + "(" + Строка(СредневзвешеннаяЦена) + " / 100 х " + Строка(МодульСтратегии) + ") = " + Строка(ЦенаСУчетомСтратегии);
					
					
					Если НЕ ВыборкаПараметры.Стратегия = 0 Тогда
						ПустаяСтратегия = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе	 
				
				ЦенаСУчетомСтратегии = Строка(СредневзвешеннаяЦена);
				
			КонецЕсли;
			
			
			
			Если ПустаяСтратегия Тогда
				//ОбластьМакета.Параметры.Стратегия = ?(ВыборкаПараметры.Стратегия = 0, "Стратегия средних цен: 0", "");
			Иначе
				ОбластьМакета.Параметры.Стратегия = ?(ВыборкаПараметры.Стратегия = 0, "Стратегия средних цен: 0", "") +
				?(ВыборкаПараметры.Стратегия > 0, "Стратегия высоких цен: +" + Строка(ВыборкаПараметры.Стратегия) + " " + ?(ВыборкаПараметры.Измерение = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Процент, "%", Валюта),"") + 
				?(ВыборкаПараметры.Стратегия < 0, "Стратегия низких цен: " + Строка(ВыборкаПараметры.Стратегия) + " " + ?(ВыборкаПараметры.Измерение = Перечисления.АГ_ИзмеренияПараметровЦенообразования.Процент, "%", Валюта),"") + 
				".";
			КонецЕсли;
			
			ОбластьМакета.Параметры.ЦенаСУчетомСтратегии = "Цена с учетом стратегии = " + Строка(ЦенаСУчетомСтратегии) + " RUB";
			
			ТабДок.Вывести(ОбластьМакета);
			
		КонецЕсли;
	КонецЕсли;

			
	Если ЦеныДругогоМеталлоцентра Тогда	 
		
		ЦенаСУчетомСтратегии = Строка(СредневзвешеннаяЦена);
		
		Если НЕ СредневзвешеннаяЦена = 0 Тогда
			ОбластьМакета = макет.ПолучитьОбласть("Шапка3");
			
			ОбластьМакета.Параметры.регион = Регион;
			ОбластьМакета.Параметры.Цена = Строка(ЦенаСУчетомСтратегии);
			ОбластьМакета.Параметры.Доставка = Строка(ВыборкаПараметры1.Доставка);
			ОбластьМакета.Параметры.Сумма = ЦенаСУчетомСтратегии;
			Областьмакета.Параметры.Валюта = Валюта;
			ОбластьМакета.Параметры.ДатаФормированияЦены = Формат(ДействуетСДаты, "ДЛФ=D");
			
		Иначе
			ОбластьМакета = макет.ПолучитьОбласть("Шапка3_НулеваяЦена");
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ПолучитьЦенуНаДату(ДатаСреза, Контрагент, КонсолидированнаяНоменклатура, Регион)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныКонсолидированнойНоменклатуры.Номенклатура КАК КонсолидированнаяНоменклатура,
	|	ЦеныКонсолидированнойНоменклатуры.Контрагент КАК Контрагент,
	|	ЦеныКонсолидированнойНоменклатуры.Регион КАК Регион,
	|	МИНИМУМ(ЦеныКонсолидированнойНоменклатуры.Цена) КАК МинимальнаяЦена,
	|	МАКСИМУМ(ЦеныКонсолидированнойНоменклатуры.Цена) КАК МаксимальнаяЦена
	|ПОМЕСТИТЬ Таб1
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ЦеныКонсолидированнойНоменклатурыСрезПоследних.Период, ДЕНЬ) КАК Период,
	|		ЦеныКонсолидированнойНоменклатурыСрезПоследних.Номенклатура КАК КонсолидированнаяНоменклатура,
	|		ЦеныКонсолидированнойНоменклатурыСрезПоследних.Контрагент КАК Контрагент,
	|		ЦеныКонсолидированнойНоменклатурыСрезПоследних.Регион КАК Регион
	|	ИЗ
	|		РегистрСведений.АГ_ЦеныКонкурентов.СрезПоследних(
	|				&ДатаСреза,
	|				Контрагент = &Контрагент
	|					И Номенклатура = &КонсолидированнаяНоменклатура
	|					И Регион = &Регион) КАК ЦеныКонсолидированнойНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АГ_ЦеныКонкурентов КАК ЦеныКонсолидированнойНоменклатуры
	|		ПО ВложенныйЗапрос.КонсолидированнаяНоменклатура = ЦеныКонсолидированнойНоменклатуры.Номенклатура
	|			И ВложенныйЗапрос.Контрагент = ЦеныКонсолидированнойНоменклатуры.Контрагент
	|			И ВложенныйЗапрос.Регион = ЦеныКонсолидированнойНоменклатуры.Регион
	|			И (ВложенныйЗапрос.Период = НАЧАЛОПЕРИОДА(ЦеныКонсолидированнойНоменклатуры.Период, ДЕНЬ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныКонсолидированнойНоменклатуры.Номенклатура,
	|	ЦеныКонсолидированнойНоменклатуры.Контрагент,
	|	ЦеныКонсолидированнойНоменклатуры.Регион
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб1.КонсолидированнаяНоменклатура КАК КонсолидированнаяНоменклатура,
	|	Таб1.Контрагент КАК Контрагент,
	|	Таб1.Регион КАК Регион,
	|	ВЫБОР
	|		КОГДА Таб1.МинимальнаяЦена = Таб1.МаксимальнаяЦена
	|			ТОГДА Таб1.МаксимальнаяЦена
	|		КОГДА (Таб1.МаксимальнаяЦена - Таб1.МинимальнаяЦена) / ((Таб1.МаксимальнаяЦена + Таб1.МинимальнаяЦена) / 2) * 100 >= 2
	|			ТОГДА Таб1.МаксимальнаяЦена
	|		ИНАЧЕ Таб1.МинимальнаяЦена
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Таб1 КАК Таб1";
	
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДатаСреза));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("КонсолидированнаяНоменклатура", КонсолидированнаяНоменклатура);
	Запрос.УстановитьПараметр("Регион", Металлоцентр.АГ_БизнесРегионМЦ);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Цена;
	
конецФункции

&НаКлиенте
Процедура РасшифровкаЦеныСУчетомФакторов()
	
	ТекСтрока = Элементы.ВнешниеЦены.ТекущиеДанные;
	Если Текстрока= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	
	РасшифровкаЦеныСУчетомФакторовНаСервере(ТабДок, ТекСтрока.КонсолидированнаяНоменклатура, ТекСтрока.ЦенаСУчетомСтратегии, ТекСтрока.Валюта, ТекСтрока.Регион, ТекСтрока.ПроцентНаценкиОстатки, ТекСтрока.ВеличинаСкидкиОстатки, 
					ТекСтрока.СкоростьПродаж, ТекСтрока.ПроцентНаценкиПродажи, ТекСтрока.ВеличинаСкидкиПродажи, ТекСтрока.ВнешняяЦена, ТекСтрока.ЦенаСУчетомФакторов);
	
	//ТабДок.Показать("Порядок расчета скидки (наценки) по отклонению от нормативных остатков и скорости продаж");
	
	Форма = ПолучитьФорму("Обработка.АГ_РаботаСЦенообразованием.Форма.ФормаРасшифровкиНулевыхЦен",,,Новый УникальныйИдентификатор);
	Форма.ТекТабДок = ТабДок;
	Форма.ТипОтчета = "РасшифровкаЦеныСУчетомФакторов";
	
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаЦеныСУчетомФакторовНаСервере(ТабДок, КонсолидированнаяНоменклатура, ЦенаСУчетомСтратегии, Валюта, Регион, ПроцентНаценкиОстатки, ВеличинаСкидкиОстатки, 
					СкоростьПродаж, ПроцентНаценкиПродажи, ВеличинаСкидкиПродажи, ВнешняяЦена, ЦенаСУчетомФакторов)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДокОбъект.ПолучитьМакет("Макет_РасшифровкаЦеныСУчетомФакторов");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Номенклатура = КонсолидированнаяНоменклатура;
	ТабДок.Вывести(ОбластьМакета);
	
	Областьмакета = Макет.ПолучитьОбласть("Шапка1");
	
	ОбластьМакета.Параметры.СредневзвешеннаяЦена = ЦенаСУчетомСтратегии;
	ОбластьМакета.Параметры.Валюта = Валюта;
	ОбластьМакета.Параметры.ТекущийПериод = ПолучитьТекущийПериод();
	ОбластьМакета.Параметры.Регион = Регион;
	ОбластьМакета.Параметры.НомГруппа = КонсолидированнаяНоменклатура.ВидНоменклатуры;
	
	ТабДок.Вывести(ОбластьМакета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ПланПродажПланПоНомГруппам.Количество) КАК СуммаОтгрузки,
	|	ПланПродажПланПоНомГруппам.Ссылка.Подразделение КАК ЦФО,
	|	ПланПродажПланПоНомГруппам.Ссылка.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ПланПродажПланПоНомГруппам.Ссылка.Подразделение.АГ_УровеньПодчинения = &УровеньЦФО_ОтделПродаж
	|			ТОГДА ПланПродажПланПоНомГруппам.Ссылка.Подразделение.Родитель
	|		ИНАЧЕ ПланПродажПланПоНомГруппам.Ссылка.Подразделение.Ссылка
	|	КОНЕЦ КАК МЦ
	|ИЗ
	|	Документ.АГ_ПланПродаж.Товары КАК ПланПродажПланПоНомГруппам
	|ГДЕ
	|	ПланПродажПланПоНомГруппам.ТоварнаяКатегория.Владелец = &НоменклатурнаяГруппа
	|	И ПланПродажПланПоНомГруппам.Ссылка.Подразделение.АГ_ОсновнойРегион = &Регион
	|	И НАЧАЛОПЕРИОДА(ПланПродажПланПоНомГруппам.Ссылка.Период, МЕСЯЦ) = &Дата
	|	И НЕ ПланПродажПланПоНомГруппам.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланПродажПланПоНомГруппам.Ссылка.Подразделение,
	|	ПланПродажПланПоНомГруппам.Ссылка.Ответственный,
	|	ВЫБОР
	|		КОГДА ПланПродажПланПоНомГруппам.Ссылка.Подразделение.АГ_УровеньПодчинения = &УровеньЦФО_ОтделПродаж
	|			ТОГДА ПланПродажПланПоНомГруппам.Ссылка.Подразделение.Родитель
	|		ИНАЧЕ ПланПродажПланПоНомГруппам.Ссылка.Подразделение.Ссылка
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланПродажПланПоНомГруппам.Ссылка.Подразделение.Наименование,
	|	ПланПродажПланПоНомГруппам.Ссылка.Ответственный.Наименование
	|ИТОГИ
	|	СУММА(СуммаОтгрузки)
	|ПО
	|	МЦ,
	|	ЦФО";
	
	Запрос.УстановитьПараметр("Дата", Началомесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", КонсолидированнаяНоменклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Регион", Регион);
	Запрос.УстановитьПараметр("УровеньЦФО_ОтделПродаж", Перечисления.АГ_УровеньПодчинения.ОтделПродаж);
	
	Результат = Запрос.Выполнить();
	ОбщийПлан = 0;
	
	Если НЕ Результат.Пустой() Тогда
		
		ВыборкаМЦ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаМЦ.Следующий() Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаМЦ");
			ОбластьМакета.Параметры.ЦФО = ВыборкаМЦ.МЦ;
			ОбластьМакета.Параметры.План = ВыборкаМЦ.СуммаОтгрузки;
			ТабДок.Вывести(ОбластьМакета);
			ОбщийПлан = ОбщийПлан + ВыборкаМЦ.СуммаОтгрузки;
			
			ВыборкаЦФО = ВыборкаМЦ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЦФО.Следующий() Цикл
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтдел");
				ОбластьМакета.Параметры.ЦФО = ВыборкаЦФО.ЦФО;
				ОбластьМакета.Параметры.План = ВыборкаЦФО.СуммаОтгрузки;
				ТабДок.Вывести(ОбластьМакета);
				
				Выборка = ВыборкаЦФО.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТорговый");
					ОбластьМакета.Параметры.Торговый = Выборка.Ответственный;
					ОбластьМакета.Параметры.План = Выборка.СуммаОтгрузки;
					ТабДок.Вывести(ОбластьМакета); 
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбластьМакета = макет.ПолучитьОбласть("СтрокаМЦ");
	Областьмакета.Параметры.ЦФО = "ВСЕГО";
	ОбластьМакета.Параметры.План = ОбщийПлан;
	ТабДок.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка2");
	
	ОбластьМакета.Параметры.НомГруппа = КонсолидированнаяНоменклатура.ВидНоменклатуры;
	ОбластьМакета.Параметры.Номенклатура = КонсолидированнаяНоменклатура;
	
	ПродажаНомГруппа12 = ПолучитьПродажиНомГруппыЗаГод(КонсолидированнаяНоменклатура.ВидНоменклатуры, Регион); 
	ОбластьМакета.Параметры.ПродажаНомГруппа12 = Формат(ПродажаНомГруппа12, "ЧДЦ=3; ЧН=0");
	
	ПродажаНоменклатура12 = ПолучитьПродажиКонсолидированнойНоменклатурыЗаГод(КонсолидированнаяНоменклатура, Регион);
	ОбластьМакета.Параметры.ПродажаНоменклатура12 = Формат(ПродажаНоменклатура12, "ЧДЦ=3; ЧН=0");
	ДоляПродаж = Окр(?(ПродажаНомГруппа12 = 0,0, ПродажаНоменклатура12 / ПродажаНомГруппа12 * 100),2);
	ОбластьМакета.Параметры.ДоляПродаж = Формат(ДоляПродаж, "ЧДЦ=2; ЧН=0");
	
	ОбластьМакета.Параметры.ОбщийПланПродаж = ОбщийПлан;
	ПланОбъемПродаж = ОбщийПлан / 100 * ДоляПродаж; 
	ОбластьМакета.Параметры.ПланОбъемПродаж = Формат(ПланОбъемПродаж, "ЧДЦ=3; ЧН=0");
	
	
	
	ОбластьМакета.Параметры.Регион = Регион;
	КоэффЗапасов = ПолучитьКоэффициентЗапасов(КонсолидированнаяНоменклатура.ВидНоменклатуры.ГруппаАналитическогоУчета, Регион); 
	ОбластьМакета.Параметры.КоэффЗапасов = КоэффЗапасов;
	ПланПродаж = ПолучитьЗапланированныйОбъем(Регион, КонсолидированнаяНоменклатура.ВидНоменклатуры); 
	НормативныйЗапас = Окр(ПланОбъемПродаж * КоэффЗапасов,3);
	НормативныйЗапас = ?(ЗначениеЗаполнено(НормативныйЗапас), НормативныйЗапас, 0);
	ОбластьМакета.Параметры.НормативныйЗапас = НормативныйЗапас;
	
	ТабДок.Вывести(ОбластьМакета);
	
	КонПер = КонецДня(Текущаядата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВложенныйЗапрос.НаСкладе) КАК НаСкладе,
	               |	СУММА(ВложенныйЗапрос.ВПути) КАК ВПути,
	               |	ВложенныйЗапрос.Склад КАК Склад,
	               |	СУММА(ВложенныйЗапрос.ВПути + ВложенныйЗапрос.НаСкладе) КАК Всего,
	               |	СУММА(ВложенныйЗапрос.НаСкладеФакт) КАК НаСкладеФакт,
	               |	СУММА(ВложенныйЗапрос.ВПутиФакт) КАК ВПутиФакт,
	               |	ВложенныйЗапрос.НаСкладеФакт + ВложенныйЗапрос.ВПутиФакт КАК ВсегоФакт
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК НаСкладе,
	               |		0 КАК ВПути,
	               |		ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |		СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК НаСкладеФакт,
	               |		0 КАК ВПутиФакт
	               |	ИЗ
	               |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |				&КонПер,
	               |				Склад.Подразделение = &Металлоцентр
	               |					И Номенклатура = &КонсНоменклатура) КАК ТоварыНаСкладахОстатки
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТоварыНаСкладахОстатки.Склад
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СУММА(0),
	               |		СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток),
	               |		ЗаказыПоставщикамОстатки.Склад,
	               |		СУММА(0),
	               |		СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток)
	               |	ИЗ
	               |		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	               |				,
	               |				Номенклатура = &КонсНоменклатура
	               |					И Склад.Подразделение = &Металлоцентр) КАК ЗаказыПоставщикамОстатки
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаказыПоставщикамОстатки.Склад) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Склад,
	               |	ВложенныйЗапрос.НаСкладеФакт + ВложенныйЗапрос.ВПутиФакт";
	
	Запрос.УстановитьПараметр("КонПер", КонПер);
	Запрос.УстановитьПараметр("КонсНоменклатура", КонсолидированнаяНоменклатура);
	Запрос.УстановитьПараметр("Металлоцентр", Металлоцентр);
	
	Результат = Запрос.Выполнить();
	Всего = 0;
	ВсегоВПути = 0;
	ВсегоНаСкладе = 0;
	ВсегоФакт = 0;
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСклад");
			Областьмакета.Параметры.Заполнить(Выборка);
			
			ВсегоФакт = ВсегоФакт + Выборка.ВсегоФакт;
			ВсегоВПути = ВсегоВПути + Выборка.ВПутиФакт;
			ВсегоНаСкладе = ВсегоНаСкладе + Выборка.НаСкладеФакт;             
			ТабДок.Вывести(ОбластьМакета);
			
			Всего = Всего + Выборка.Всего;
		КонецЦикла;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСкладВсего");
	ОбластьМакета.Параметры.ВПути = ВсегоВПути;
	ОбластьМакета.Параметры.НаСкладе = ВсегоНаСкладе;
	ОбластьМакета.Параметры.Всего = ВсегоФакт;
	ТабДОк.Вывести(ОбластьМакета);
	
	//Если ЗначениеЗаполнено(НормативныйЗапас) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал1");
		
		ОбластьМакета.Параметры.ФактОстаток = Всего;
		ОбластьМакета.Параметры.НормОстаток = НормативныйЗапас;
		ОбластьМакета.Параметры.ФактУровень = ?(НормативныйЗапас = 0,0,Окр(Всего / НормативныйЗапас * 100,0));
		ОбластьМакета.Параметры.СкидкаНаценкаОстатки = ?(ПроцентНаценкиОстатки > 0, "наценка", "скидка");
		ОбластьМакета.Параметры.СкидкаНаценкаОстатки1 = ?(ПроцентНаценкиОстатки > 0, "Наценка", "Скидка");
		ОбластьМакета.Параметры.РазмерСкидкиОстатки = ?(ПроцентНаценкиОстатки > 0, ПроцентНаценкиОстатки, - ПроцентНаценкиОстатки);
		ОбластьМакета.Параметры.СредневзвешЦенаСУчетомСтратегии = ЦенаСУчетомСтратегии;
		ОбластьМакета.Параметры.СуммаСкидкиОстатки = ?(ВеличинаСкидкиОстатки > 0, ВеличинаСкидкиОстатки, - ВеличинаСкидкиОстатки);
		ОбластьМакета.Параметры.Валюта = Валюта;
		
	//Иначе
	//	ОбластьМакета = Макет.ПолучитьОбласть("Подвал1_2");
	//	
	//	ОбластьМакета.Параметры.ФактОстаток = Всего;
	//	ОбластьМакета.Параметры.НормОстаток = НормативныйЗапас;
	//	ОбластьМакета.Параметры.ФактУровень = ?(НормативныйЗапас = 0,0,Окр(Всего / НормативныйЗапас * 100,0));
	//	ОбластьМакета.Параметры.СкидкаНаценкаОстатки = ?(ПроцентНаценкиОстатки > 0, "наценка", "скидка");
	//	ОбластьМакета.Параметры.РазмерСкидкиОстатки = ?(ПроцентНаценкиОстатки > 0, ПроцентНаценкиОстатки, - ПроцентНаценкиОстатки);
	//КонецЕсли;
	
	ТабДок.Вывести(ОбластьМакета);
	
	Если День(ТекущаяДата()) <= 14 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал2_2");
		СуммаСкидкиПродажи = 0;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал2_1");
		
		ОбластьМакета.Параметры.ПланПродаж = Формат(ПланОбъемПродаж, "ЧДЦ=3");
		КолРабДней = ПолучитьРабочиеДниЗаПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
		ОбластьМакета.Параметры.КолРабДней = КолРабДней;
		ОбластьМакета.Параметры.НормативнаяСкорость = Формат(ПланОбъемПродаж / КолРабДней, "ЧДЦ=3");
		ОбластьМакета.Параметры.Валюта = Валюта;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПараметрыЦенообразования.Измерение КАК Измерение,
		|	ПараметрыЦенообразования.Стратегия КАК Стратегия,
		|	ПараметрыЦенообразования.ДниРетроспективы КАК ДниРетроспективы,
		|	ПараметрыЦенообразования.Ретроспектива КАК Ретроспектива
		|ИЗ
		|	РегистрСведений.АГ_ПараметрыЦенообразования КАК ПараметрыЦенообразования
		|ГДЕ
		|	ПараметрыЦенообразования.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И ПараметрыЦенообразования.Регион = &Регион";
		
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", КонсолидированнаяНоменклатура.ВидНоменклатуры);
		Запрос.УстановитьПараметр("Регион", Металлоцентр);
		
		РезультатПараметры = Запрос.Выполнить();
		
		ПустаяСтратегия = Истина;
		Если НЕ РезультатПараметры.Пустой() Тогда
			
			ВыборкаПараметры = РезультатПараметры.Выбрать();
			ВыборкаПараметры.Следующий();
			
			Если ВыборкаПараметры.Ретроспектива = Истина Тогда
				ВариантРетроспективы = "Ретроспектива " + ВыборкаПараметры.ДниРетроспективы + " дней";
				
				КонПер = НачалоДня(Текущаядата()) - 1;

				НачПер = ПолучитьНачалоПериодаРабочихДней(ТекущаяДата(), ВыборкаПараметры.ДниРетроспективы);
				
				
				КолРабДнейВПродажах = ВыборкаПараметры.ДниРетроспективы;
			Иначе
				ВариантРетроспективы = "С 1 числа месяца";
				
				Начпер = НачалоМесяца(ТекущаяДата());
				КонПер = НачалоДня(Текущаядата()) - 1;
				
				КолРабДнейВПродажах = ПолучитьРабочиеДниЗаПериод(НачалоДня(НачПер), КонецДня(КонПер));
			КонецЕсли;
			
		Иначе
			ВариантРетроспективы = "С 1 числа месяца";
			НачПер = НачалоМесяца(ТекущаяДата());
			КонПер = НачалоДня(Текущаядата()) - 1;
			
			КолРабДнейВПродажах = ПолучитьРабочиеДниЗаПериод(НачалоДня(НачПер), КонецДня(КонПер));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПродажиОбороты.АналитикаУчетаНоменклатуры.Номенклатура.Видноменклатуры КАК НоменклатурнаяГруппа,
		|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Стоимость
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|			&НачПер,
		|			&КонПер,
		|			Регистратор,
		|			АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|				И Склад.Подразделение = &МЦ
		|				И НЕ АналитикаУчетаПоПартнерам.партнер.АГ_СобственныйКонтрагент
		|				И АналитикаУчетаНоменклатуры.Номенклатура = &КонсНоменклатура) КАК ПродажиОбороты
		|ГДЕ
		|	ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиОбороты.АналитикаУчетаНоменклатуры.Номенклатура.Видноменклатуры";
		
		Запрос.УстановитьПараметр("НачПер", НачПер);
		Запрос.УстановитьПараметр("КонПер", КонПер);
		Запрос.УстановитьПараметр("МЦ", Металлоцентр);
		Запрос.УстановитьПараметр("КонсНоменклатура", КонсолидированнаяНоменклатура);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ФактПродаж = 0;
			
		Иначе
			Выборка = Результат.Выбрать();
			
			Выборка.Следующий();
			
			ФактПродаж = Выборка.Стоимость;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ВариантРетроспективы = ВариантРетроспективы;
		ОбластьМакета.Параметры.НачПер = Формат(НачПер, "ДЛФ=D");
		ОбластьМакета.Параметры.КонПер = Формат(КонПер, "ДЛФ=D");
		ОбластьМакета.Параметры.Продажи = ФактПродаж;
		ОбластьМакета.Параметры.КолРабДнейВПродажах = КолРабДнейВПродажах;
		ОбластьМакета.Параметры.СкоростьПродаж = Формат(ФактПродаж / КолРабДнейВПродажах, "ЧДЦ=3");
		ОбластьМакета.Параметры.СкоростьПродажРез = СкоростьПродаж;
		ОбластьМакета.Параметры.СкидкаНаценкаПродажи = ?(ПроцентНаценкиПродажи > 0, "наценка", "скидка");
		ОбластьМакета.Параметры.СкидкаНаценкаПродажи1 = ?(ПроцентНаценкиПродажи > 0, "Наценка", "Скидка");
		ОбластьМакета.Параметры.ПроцентСкидкиПродажи = ?(ПроцентНаценкиПродажи > 0, ПроцентНаценкиПродажи, - ПроцентНаценкиПродажи);
		СуммаСкидкиПродажи = ?(ВеличинаСкидкиПродажи > 0, ВеличинаСкидкиПродажи, - ВеличинаСкидкиПродажи);
		ОбластьМакета.Параметры.СуммаСкидкиПродажи = СуммаСкидкиПродажи;
	КонецЕсли;
	ТабДок.Вывести(Областьмакета);
	
	Областьмакета = Макет.получитьОбласть("Подвал3");
	
	ОбластьМакета.Параметры.ЗнакОстатков = ?(ПроцентНаценкиОстатки > 0, "+", "-");
	ОбластьМакета.Параметры.ЗнакПродажи = ?(ПроцентНаценкиПродажи > 0, "+", "-");
	ОбластьМакета.Параметры.ЦенаСУчетомФакторов = ЦенаСУчетомФакторов;
	ОбластьМакета.Параметры.ВнешняяЦена = ВнешняяЦена;
	ОбластьМакета.Параметры.СредневзвешЦенаСУчетомСтратегии = ЦенаСУчетомСтратегии;
	ОбластьМакета.Параметры.СуммаСкидкиОстатки = ?(ВеличинаСкидкиОстатки > 0, ВеличинаСкидкиОстатки, - ВеличинаСкидкиОстатки);
	ОбластьМакета.Параметры.Валюта = Валюта;
	ОбластьМакета.Параметры.СуммаСкидкиПродажи = СуммаСкидкиПродажи;
	
	ТабДок.Вывести(Областьмакета);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийПериод()
	
	НомерМесяца = Месяц(текущаядата());
	
	Если НомерМесяца = 1 Тогда
		Месяц = "Январь";
	ИначеЕсли НомерМесяца = 2 Тогда
		Месяц = "Февраль";
	ИначеЕсли НомерМесяца = 3 Тогда
		Месяц = "Март";
	ИначеЕсли НомерМесяца = 4 Тогда
		Месяц = "Апрель";
	ИначеЕсли НомерМесяца = 5 Тогда
		Месяц = "Май";
	ИначеЕсли НомерМесяца = 6 Тогда
		Месяц = "Июнь";
	ИначеЕсли НомерМесяца = 7 Тогда
		Месяц = "Июль";
	ИначеЕсли НомерМесяца = 8 Тогда
		Месяц = "Август";
	ИначеЕсли НомерМесяца = 9 Тогда
		Месяц = "Сентябрь";
	ИначеЕсли НомерМесяца = 10 Тогда
		Месяц = "Октябрь";
	ИначеЕсли НомерМесяца = 11 Тогда
		Месяц = "Ноябрь";
	ИначеЕсли НомерМесяца = 12 Тогда
		Месяц = "Декабрь";
	КонецЕсли;
	
	Возврат Месяц + " " + Формат(Текущаядата(),"ДФ=yyyy");
	
КонецФункции

&НаКлиенте
Процедура ВключитьКомплексноеЦОПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ВключитьКомплексноеЦО = ВключитьКомплексноеЦО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьНаценкиВЗаказеПриИзменении(Элемент)
	
	  ТекСтрока = Элементы.ПараметрыЦенообразования.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.ВключитьНаценкиВЗаказе = ВключитьНаценкиВЗаказе;
	КонецЕсли;
	
КонецПроцедуры




