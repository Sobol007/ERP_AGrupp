Перем СчетчикОграничение;



Процедура ЗаписатьНоменклатуру23met() Экспорт
	
	Для Каждого ТекущаяСтрока Из СопоставленнаяНоменклатура Цикл
		
		НоменклатураОбъект = ТекущаяСтрока.Номенклатура.ПолучитьОбъект();
		НайденныеСтроки = НоменклатураОбъект.АГ_Сопоставленная23Мет.НайтиСтроки(Новый Структура("Идентификатор23Met", ТекущаяСтрока.Идентификатор));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
		Иначе
			НайденнаяСтрока = НоменклатураОбъект.АГ_Сопоставленная23Мет.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, ТекущаяСтрока);
		НайденнаяСтрока.Идентификатор23Met = ТекущаяСтрока.Идентификатор;
		НайденнаяСтрока.Наименование23Met = ТекущаяСтрока.НаименованиеСопоставлено;
		НайденнаяСтрока.Конкурент = ТекущаяСтрока.Поставщик;
		НайденнаяСтрока.РазделСайта = ТекущаяСтрока.РазделСайта;
		Попытка
			НоменклатураОбъект.Записать();
			ТекущаяСтрока.Сохранена = Истина;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось сопоставить номенклатуру " + Строка(НоменклатураОбъект);
			Сообщение.Сообщить();		
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивПодчиненныхРазделов(СписокРазделов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтруктураРазделов23met.Родитель КАК Родитель
	               |ПОМЕСТИТЬ ТаблицаРодителей
	               |ИЗ
	               |	Справочник.АГ_СтруктураРазделов23met КАК СтруктураРазделов23met
	               |ГДЕ
	               |	(СтруктураРазделов23met.Ссылка В ИЕРАРХИИ (&СписокРазделов)
	               |			ИЛИ &НетОтбораПоРазделу)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтруктураРазделов23met.Ссылка КАК РазделСайта
	               |ИЗ
	               |	Справочник.АГ_СтруктураРазделов23met КАК СтруктураРазделов23met
	               |ГДЕ
	               |	(СтруктураРазделов23met.Ссылка В ИЕРАРХИИ (&СписокРазделов)
	               |			ИЛИ &НетОтбораПоРазделу)
	               |	И НЕ СтруктураРазделов23met.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ТаблицаРодителей.Родитель КАК Родитель
	               |				ИЗ
	               |					ТаблицаРодителей КАК ТаблицаРодителей)";
	
	Запрос.УстановитьПараметр("СписокРазделов", СписокРазделов);
	Запрос.УстановитьПараметр("НетОтбораПоРазделу", СписокРазделов.Количество() = 0);
	МассивПодчиненныхРазделов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РазделСайта");
	
	Возврат МассивПодчиненныхРазделов;
	
КонецФункции

Процедура СопоставитьНоменклатуру23met(НоменклатураВыбор = Неопределено) Экспорт
	
	НайденныеТовары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для Каждого ТекущаяСтрока Из НайденныеТовары Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Регион) ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.Поставщик1С) Тогда
			ТекущаяСтрока.Пометка = Ложь;
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаТовара = СопоставленнаяНоменклатура.Найти(ТекущаяСтрока.НоменклатураИД, "Идентификатор");
		
		Если НЕ ТекСтрокаТовара = Неопределено Тогда
			Нстр = ТекСтрокаТовара;
		Иначе
			Нстр = СопоставленнаяНоменклатура.Добавить();
		КонецЕсли;
		
		Нстр.Номенклатура = НоменклатураВыбор;
		Нстр.НаименованиеСопоставлено = ТекущаяСтрока.НоменклатураНаименование;
		Нстр.Поставщик = ТекущаяСтрока.Поставщик1С;
		Нстр.Регион = ТекущаяСтрока.Регион; 
		Нстр.Цена = ТекущаяСтрока.Цена;
		Нстр.Идентификатор = ТекущаяСтрока.НоменклатураИД;
		Нстр.РазделСайта = ТекущаяСтрока.РазделСайта;
		НСтр.ЦенаТекущая = ПолучитьЦену(Нстр.Регион, Нстр.Поставщик, Нстр.Номенклатура);
		Нстр.Сохранена = Ложь;
		
		ТекущаяСтрока.Пометка = Ложь;
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьЦену(Регион, Конкурент, Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныКонсолидированнойНоменклатурыСрезПоследних.Цена КАК Цена
	               |ИЗ
	               |	РегистрСведений.АГ_ЦеныКонкурентов.СрезПоследних(
	               |			,
	               |			Номенклатура = &КонсолидированнаяНоменклатура
	               |				И Контрагент = &Контрагент
	               |				И Регион = &Регион) КАК ЦеныКонсолидированнойНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("КонсолидированнаяНоменклатура", Номенклатура);
	Запрос.УстановитьПараметр("Контрагент", Конкурент);
	Запрос.УстановитьПараметр("Регион", Регион);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() ТОгда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Цена;
	
КонецФункции

Процедура ПропарситьСайт() Экспорт
	
	СчетчикОграничение = 1;
	ТаблицаТоваров.Очистить();
	
	МассивРазделов = ПолучитьМассивПодчиненныхРазделов(СписокРазделов);
	Для Каждого ЭлементТекущийРегион Из СписокРегионов Цикл
		ТекущийРегион = ЭлементТекущийРегион.Значение;
		Если Не ЗначениеЗаполнено(ТекущийРегион.АГ_АдресСайта23met) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущийРаздел Из МассивРазделов Цикл
			АдресРаздела = СформироватьПолныйАдресРаздела(ТекущийРегион, ТекущийРаздел);	
			ПропарситьКаталог(ПолучитьЧистыйАдресСайта(АдресРаздела), ТекущийРегион, ТекущийРаздел);
		КонецЦикла;
	КонецЦикла;
	ДополнитьТаблицуДаннымиИз1С();
	
	ТаблицаТоваров.Свернуть("Пометка,НоменклатураИД,НоменклатураНаименование,Номенклатура1С,ПоставщикИД,ПоставщикНаименование,Поставщик1С,Цена,Регион,РазделСайта,Рейтинг");
	
КонецПроцедуры

Процедура ПропарситьКаталог(Знач Каталог, Знач ТекущийРегион, Знач ТекущийРаздел)
	
	МассивИДПоставщиковДляОтбора = ПолучитьМассивИДПоставщиков();
	
	Соединение = Новый HTTPСоединение(Каталог);
	ЧтениеХТМЛ = Новый ЧтениеHTML; 
    ПостроительДОМ = Новый ПостроительDOM;
    ИмяФайла = ПолучитьИмяВременногоФайла("html"); 
    Соединение.Получить("", ИмяФайла);
    ЧтениеХТМЛ.ОткрытьФайл(ИмяФайла, "UTF-8"); 
    ДокументХТМЛ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ);
	
	УровеньСтраницы = ПолучитьУровеньТекущейСтраницы(Каталог);
	
	Если УровеньСтраницы = 1 Тогда
		ЭлементЗаголовокРазделов = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("header");
		Если ЭлементЗаголовокРазделов <> Неопределено Тогда
			ЭлементыЛИ = ЭлементЗаголовокРазделов.ПолучитьЭлементыПоИмени("li");
			Для Каждого ЭлементЛИ Из ЭлементыЛИ Цикл
				ЭлементыА = ЭлементЛИ.ПолучитьЭлементыПоИмени("a");
				Для Каждого ЭлементА Из ЭлементыА Цикл
					Если ЭлементА.ИмяКласса = "logo" Тогда 
						Продолжить;
					КонецЕсли;
					Если Не ПустаяСтрока(ЭлементА.Гиперссылка) Тогда
						ПропарситьКаталог(ПолучитьЧистыйАдресСайта(ЭлементА.Гиперссылка), ТекущийРегион, ТекущийРаздел);
					Иначе
						ЭлементУЛ = ЭлементА.ПервыйДочерний;
						ЭлементыЛИПодчиненные = ЭлементУЛ.ПолучитьЭлементыПоИмени("li");
						Для Каждого ЭлементЛИПодчиненный Из ЭлементыЛИПодчиненные Цикл
							ЭлементыАПодчененные = ЭлементЛИ.ПолучитьЭлементыПоИмени("a");
							Для Каждого ЭлементАПодчиненный Из ЭлементыАПодчененные Цикл
								Если ЭлементАПодчиненный.ИмяКласса = "submenu_link" Тогда 
									Продолжить;
								КонецЕсли;
								Если Не ПустаяСтрока(ЭлементАПодчиненный.Гиперссылка) Тогда
									ПропарситьКаталог(ПолучитьЧистыйАдресСайта(ЭлементАПодчиненный.Гиперссылка), ТекущийРегион, ТекущийРаздел);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли УровеньСтраницы = 2 Тогда
		ЛеваяКолонка = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("left-container");	
		Если ЛеваяКолонка <> Неопределено Тогда
			ЭлементыНАВЛевойКолонки = ЛеваяКолонка.ПолучитьЭлементыПоИмени("nav");
			Если ЭлементыНАВЛевойКолонки.Количество() > 0 Тогда
				Для Каждого ЭлементНАВЛевойКолонки Из ЭлементыНАВЛевойКолонки Цикл
					ЭлементыУЛ = ЭлементНАВЛевойКолонки.ПолучитьЭлементыПоИмени("ul");		
					Для Каждого ЭлементУЛ Из ЭлементыУЛ Цикл
						ЭлементыЛИ = ЭлементУЛ.ПолучитьЭлементыПоИмени("li");		
						Для Каждого ЭлементЛИ Из ЭлементыЛИ Цикл
							Если Не ПустаяСтрока(ЭлементЛИ.ПервыйДочерний.Гиперссылка) Тогда
								ПропарситьКаталог(ПолучитьЧистыйАдресСайта(ЭлементЛИ.ПервыйДочерний.Гиперссылка), ТекущийРегион, ТекущийРаздел);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли УровеньСтраницы > 2 Тогда
		ЭлементТаблицаТоваров = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("table-price");	
		Если ЭлементТаблицаТоваров = Неопределено Тогда
			ЭлементРазмерыТруб = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("price-nosize-sizes-container");	
			Если ЭлементРазмерыТруб <> Неопределено Тогда
		 		ЭлементыДИВ = ЭлементРазмерыТруб.ПолучитьЭлементыПоИмени("div");		
				Для Каждого ЭлементДИВ Из ЭлементыДИВ Цикл
					ЭлементыА = ЭлементДИВ.ПолучитьЭлементыПоИмени("a");		
					Для Каждого ЭлементА Из ЭлементыА Цикл
						Если Не ПустаяСтрока(ЭлементА.Гиперссылка) Тогда
							АдресПервогоУровня = ПолучитьАдресПервогоУровня(ПолучитьЧистыйАдресСайта(Каталог));
							ПропарситьКаталог(ПолучитьЧистыйАдресСайта(АдресПервогоУровня) + ПолучитьЧистыйАдресСайта(ЭлементА.Гиперссылка), ТекущийРегион, ТекущийРаздел);					
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе	
			НомерКолонкиМаркаСтали = 0;
			НомерКолонкиДлина = 0;
			НомерКолонкиПредставлениеПоставщика = 5;
			ЭлементЗаголовокТаблицы = ЭлементТаблицаТоваров.ПервыйДочерний;
			ЭлементыТР = ЭлементЗаголовокТаблицы.ПолучитьЭлементыПоИмени("tr");
			Для Каждого ЭлементТР Из ЭлементыТР Цикл
				СчетчикКолонок = 1;
				ЭлементыКолонкиТаблицы = ЭлементТР.ПолучитьЭлементыПоИмени("th");
				Для Каждого ЭлементКолонкиТаблицы Из ЭлементыКолонкиТаблицы Цикл
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Марка стали" Тогда
						НомерКолонкиМаркаСтали = СчетчикКолонок;
					КонецЕсли;
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Длина" Тогда
						НомерКолонкиДлина = СчетчикКолонок;
					КонецЕсли;
					Если ЭлементКолонкиТаблицы.ТекстовоеСодержимое = "Поставщик" Тогда
						НомерКолонкиПредставлениеПоставщика = СчетчикКолонок + 1;
					КонецЕсли;
					СчетчикКолонок = СчетчикКолонок + 1;	
				КонецЦикла;
			КонецЦикла;
			
			ЭлементТелоТаблицы = ЭлементТаблицаТоваров.ПоследнийДочерний;	
			ЭлементыТР = ЭлементТелоТаблицы.ПолучитьЭлементыПоИмени("tr");
			Для Каждого ЭлементТР Из ЭлементыТР Цикл
				Если ОграничениеКоличестваСтрок > 0 И СчетчикОграничение > ОграничениеКоличестваСтрок Тогда
					Возврат;
				КонецЕсли;
				
				//ИД поставщика
				ПоставщикИД = "";
				УзелПоставщикИД = ЭлементТР.Атрибуты.ПолучитьИменованныйЭлемент("data-firm-name");
				Если УзелПоставщикИД <> Неопределено Тогда
					ПоставщикИД = УзелПоставщикИД.Значение;	
				КонецЕсли;
				
				Если МассивИДПоставщиковДляОтбора.Количество() > 0 И МассивИДПоставщиковДляОтбора.Найти(ПоставщикИД) = Неопределено Тогда
					Продолжить;					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				
				//ИД поставщика
				НоваяСтрока.ПоставщикИД = ПоставщикИД;	
				
				//ИД номенклатуры
				УзелНоменклатураИД = ЭлементТР.Атрибуты.ПолучитьИменованныйЭлемент("data-position-id");
				Если УзелНоменклатураИД <> Неопределено Тогда
					НоваяСтрока.НоменклатураИД = УзелНоменклатураИД.Значение;	
				КонецЕсли;
				
				НоваяСтрока.Регион = ТекущийРегион;
				НоваяСтрока.РазделСайта = ТекущийРаздел;
				
				ЭлементыКолонкиТаблицы = ЭлементТР.ПолучитьЭлементыПоИмени("td");
				СчетчикКолонок = 1;
				НоменклатураНаименование = "";
				Для Каждого ЭлементКолонкиТаблицы Из ЭлементыКолонкиТаблицы Цикл
					Если СчетчикКолонок = 1 Тогда
						НоменклатураНаименование = ЭлементКолонкиТаблицы.ТекстовоеСодержимое;
					ИначеЕсли СчетчикКолонок = НомерКолонкиМаркаСтали Тогда
						МаркаСтали = ЭлементКолонкиТаблицы.ТекстовоеСодержимое;	
						НоменклатураНаименование = НоменклатураНаименование + ?(ЗначениеЗаполнено(МаркаСтали), " " + МаркаСтали, "");
					ИначеЕсли СчетчикКолонок = НомерКолонкиДлина Тогда
						Длина = ЭлементКолонкиТаблицы.ТекстовоеСодержимое;	
						НоменклатураНаименование = НоменклатураНаименование + ?(ЗначениеЗаполнено(Длина), " " + Длина, "");
					ИначеЕсли СчетчикКолонок = НомерКолонкиПредставлениеПоставщика Тогда
						НоваяСтрока.ПоставщикНаименование = ЭлементКолонкиТаблицы.ТекстовоеСодержимое;
					Иначе
						ЭлементыСПАН = ЭлементКолонкиТаблицы.ПолучитьЭлементыПоИмени("span");
						Для Каждого ЭлементСПАН Из ЭлементыСПАН Цикл
							Если ЭлементСПАН.ИмяКласса = "cost" Тогда
								НоваяСтрока.Цена = ПреобразоватьВЧисло(ЭлементСПАН.ТекстовоеСодержимое);	
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					НоваяСтрока.НоменклатураНаименование = НоменклатураНаименование;
					СчетчикКолонок = СчетчикКолонок + 1;
				КонецЦикла;
				СчетчикОграничение = СчетчикОграничение + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПолныйАдресРаздела(Регион, Раздел)Экспорт
	
	ПолныйАдресРаздела = Раздел.АдресРаздела;	

	ПолныйАдресРаздела = Регион.АГ_АдресСайта23met + ?(ЗначениеЗаполнено(ПолныйАдресРаздела), "/" + ПолныйАдресРаздела, "");
	
	Возврат ПолныйАдресРаздела;
	
КонецФункции

Функция ПолучитьМассивИДПоставщиков() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КонтрагентыИдентификаторы23met.Идентификатор КАК Идентификатор23met
	               |ИЗ
	               |	Справочник.Партнеры.АГ_Идентификаторы23met КАК КонтрагентыИдентификаторы23met
	               |ГДЕ
	               |	КонтрагентыИдентификаторы23met.Ссылка В(&СписокКонтрагентов)";
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокПоставщиков);
	МассивИДПоставщиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор23met");
	
	Возврат МассивИДПоставщиков;
	
КонецФункции

Функция ПолучитьЧистыйАдресСайта(Знач ТекущийАдресСайта)Экспорт
	
	ЧистыйАдресСайта = СтрЗаменить(ТекущийАдресСайта, "http://", "");
	ЧистыйАдресСайта = СтрЗаменить(ЧистыйАдресСайта, "https://", "");
	
	Возврат ЧистыйАдресСайта;
		
КонецФункции

Функция ПолучитьАдресПервогоУровня(Знач АдресСтраницы)Экспорт
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресСтраницы, "/", Истина);
	Если МассивСтрок.Количество() > 0 Тогда
		АдресПервогоУровня = МассивСтрок[0];
	Иначе
		АдресПервогоУровня = "";
	КонецЕсли;
	
	Возврат АдресПервогоУровня;
	
КонецФункции

Процедура ДополнитьТаблицуДаннымиИз1С()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаТоваров.ПоставщикИД КАК ПоставщикИД,
	               |	ТаблицаТоваров.НоменклатураИД КАК НоменклатураИД,
	               |	ТаблицаТоваров.ПоставщикНаименование КАК ПоставщикНаименование,
	               |	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименование,
	               |	ТаблицаТоваров.Цена КАК Цена,
	               |	ТаблицаТоваров.Регион КАК Регион,
	               |	ТаблицаТоваров.РазделСайта КАК РазделСайта,
	               |	ТаблицаТоваров.Рейтинг КАК Рейтинг
	               |ПОМЕСТИТЬ ТаблицаТоваров
	               |ИЗ
	               |	&ТаблицаТоваров КАК ТаблицаТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТоваров.ПоставщикИД КАК ПоставщикИД,
	               |	ТаблицаТоваров.НоменклатураИД КАК НоменклатураИД,
	               |	ТаблицаТоваров.ПоставщикНаименование КАК ПоставщикНаименование,
	               |	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименование,
	               |	ТаблицаТоваров.Цена КАК Цена,
	               |	ТаблицаТоваров.Регион КАК Регион,
	               |	ТаблицаТоваров.РазделСайта КАК РазделСайта,
	               |	КонтрагентыИдентификаторы23met.Ссылка КАК Поставщик1С,
	               |	НоменклатураИдентификаторы23met.Ссылка КАК Номенклатура1С
	               |ИЗ
	               |	ТаблицаТоваров КАК ТаблицаТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.АГ_Сопоставленная23Мет КАК НоменклатураИдентификаторы23met
	               |		ПО ТаблицаТоваров.НоменклатураИД = НоменклатураИдентификаторы23met.Идентификатор23Met
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.АГ_Идентификаторы23met КАК КонтрагентыИдентификаторы23met
	               |		ПО ТаблицаТоваров.ПоставщикИД = КонтрагентыИдентификаторы23met.Идентификатор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АГ_СтруктураРазделов23met КАК АГ_СтруктураРазделов23met
	               |		ПО ТаблицаТоваров.РазделСайта = АГ_СтруктураРазделов23met.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	АГ_СтруктураРазделов23met.Родитель.Родитель.Родитель.Родитель.ПорядковыйНомер,
	               |	АГ_СтруктураРазделов23met.Родитель.Родитель.Родитель.ПорядковыйНомер,
	               |	АГ_СтруктураРазделов23met.Родитель.Родитель.ПорядковыйНомер,
	               |	АГ_СтруктураРазделов23met.Родитель.ПорядковыйНомер,
	               |	АГ_СтруктураРазделов23met.ПорядковыйНомер";
				   
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТоваров.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Функция ПолучитьУровеньТекущейСтраницы(Знач АдресСтраницы)Экспорт
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресСтраницы, "/", Истина);
	
	Возврат МассивСтрок.Количество();
	
КонецФункции

Функция ПреобразоватьВЧисло(Знач ЧислоСтрокой)
	
	Попытка
		Результат = Число(СтрЗаменить(ЧислоСтрокой, " ", ""));
	Исключение
		Результат = 0;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


