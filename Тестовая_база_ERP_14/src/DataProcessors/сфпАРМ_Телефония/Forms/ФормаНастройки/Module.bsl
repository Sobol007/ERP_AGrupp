#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоАдминистратор = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("сфпУправлениеМаршрутизацией");
	Отказ = НЕ ЭтоАдминистратор;
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Недостаточно прав для настройки телефонии!";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Если Метаданные.Константы.Найти("ИспользоватьРазделениеПоОбластямДанных") <> Неопределено Тогда
		  ИспользуетсяРазделениеПоОбластямДанных = Константы["ИспользоватьРазделениеПоОбластямДанных"].Получить();
	Иначе ИспользуетсяРазделениеПоОбластямДанных = Ложь;
	КонецЕсли;
	
	сфпИспользоватьСофтФон = Константы.сфпИспользоватьСофтФон.Получить();
	Элементы.сфпИспользоватьСофтФон.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	Элементы.сфпСправка.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	
	Если Метаданные.ЭлементыСтиля.Найти("CRM_ОсновнойГолубой") <> Неопределено Тогда
		ЦветФонаГиперссылки = Новый Цвет(163, 173, 187);
		ЦветФонаОсновнойКнопки = ЦветаСтиля["CRM_ОсновнойГолубой"];
		ЦветФонаВыбраннойГиперссылки = ЦветаСтиля["CRM_ОсновнойГолубой"];
		ЦветТекстаГиперссылки = ЦветаСтиля["CRM_ОсновнойГолубой"];
		ЦветТекстаКнопки = WebЦвета.Белый;
		ЦветТекстаВыбраннойГиперссылки = Новый Цвет(0, 160, 242);
		
	Иначе
		ЦветФонаГиперссылки = Новый Цвет();
		ЦветФонаОсновнойКнопки = Новый Цвет();
		ЦветФонаВыбраннойГиперссылки = ЦветаСтиля["ЦветГиперссылки"];
		ЦветТекстаГиперссылки = ЦветаСтиля["ЦветГиперссылки"];
		ЦветТекстаКнопки = Новый Цвет();
		ЦветТекстаВыбраннойГиперссылки = Новый Цвет();
	КонецЕсли;
	
	Гиперссылки = Новый Массив();
	Гиперссылки.Добавить("ДекорацияСтатусПодключения");
	Гиперссылки.Добавить("ДекорацияСостояниеЛицензий");
	Гиперссылки.Добавить("ПодключитьОтключитьОбсуждения");
	Гиперссылки.Добавить("сфпДекорацияТелефонныеКнигиСофтФон");
	Гиперссылки.Добавить("сфпДекорацияПерезаполнитьРегистрПоискаПоНомерам");
	Гиперссылки.Добавить("сфпНастройкаРасписанияЗагрузкаПланаНумерации");
	Гиперссылки.Добавить("ПредставлениеОператора");
	Гиперссылки.Добавить("ТаблицаОператоровСсылка");
	Для Каждого ТекСсылка Из Гиперссылки Цикл
		Элементы[ТекСсылка].ЦветТекста = ЦветТекстаГиперссылки;
	КонецЦикла;	
	
	Кнопки = Новый Массив();
	Кнопки.Добавить("ПользователиТелефонииКнопкаДобавить");
	Кнопки.Добавить("ПользователиТелефонииОбновитьАбонентовАТС");
	Для Каждого ТекКнопка Из Кнопки Цикл
		Элементы[ТекКнопка].ЦветФона = ЦветФонаОсновнойКнопки;
		Элементы[ТекКнопка].ЦветТекста = ЦветТекстаКнопки;
		Элементы[ТекКнопка].ЦветРамки = ЦветФонаОсновнойКнопки;
	КонецЦикла;	
	
	ДоступныеАТС = Перечисления.сфпДоступныеАТС.СсылкиНаСтатьи();
	Для Каждого ТекЭлемент Из ДоступныеАТС Цикл
		Если ТипЗнч(ТекЭлемент.Значение) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		Если ТекЭлемент.Значение = Перечисления.сфпДоступныеАТС.МТТ Тогда
			Продолжить;
		КонецЕсли;
		
		ТекПеречисление = Метаданные.Перечисления.сфпДоступныеАТС.ЗначенияПеречисления.Получить(Перечисления.сфпДоступныеАТС.Индекс(ТекЭлемент.Значение));
		
		НоваяСтрока = Объект.ТаблицаОператоров.Добавить();
		НоваяСтрока.Идентификатор = ТекПеречисление.Имя;
		НоваяСтрока.Представление = ТекПеречисление.Синоним;
		НоваяСтрока.Ссылка = ТекЭлемент.Представление;
	КонецЦикла;	
	
	УниверсальныеАТС = Перечисления.сфпДоступныеАТС.ДоступныеАТСУниверсальногоВиджетаItoolabs();
	Для Каждого ТекСтрока Из УниверсальныеАТС Цикл
		НоваяСтрока = Объект.ТаблицаОператоров.Добавить();
		НоваяСтрока.Идентификатор = ТекСтрока.Идентификатор;
		НоваяСтрока.Представление = ТекСтрока.Представление;
		НоваяСтрока.Ссылка = ТекСтрока.Ссылка;
	КонецЦикла;
	
	//ТекстЗапроса = "";
	//Для Каждого ТекСтрока Из Объект.ТаблицаОператоров Цикл
	//	ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", "
	//	|ОБЪЕДИНИТЬ ВСЕ") + "
	//	|ВЫБРАТЬ """ + ТекСтрока.Идентификатор + """ КАК Идентификатор, """ + СтрЗаменить(ТекСтрока.Представление, """", """""") + """ КАК Представление, """ + ТекСтрока.Ссылка + """ КАК Ссылка";
	//КонецЦикла;
	//ОператорыАТС.ТекстЗапроса = ТекстЗапроса;
	
	ПрочитатьЗначенияНастроек();
	ПриВыбореАТС();
	
	СсылкиНаСтатьи = Перечисления.сфпДоступныеАТС.СсылкиНаСтатьи();
	
	сфпОграничениеНаПросмотрТелефонныхЗвонков = Константы.сфпОграничениеНаПросмотрТелефонныхЗвонков.Получить();	
	сфпКодСтраны = Константы.сфпКодСтраны.Получить();
	Если НЕ ЗначениеЗаполнено(сфпКодСтраны) Тогда
		сфпКодСтраны = "+7";
		ЗаписатьЗначениеКонстанты("сфпКодСтраны", сфпКодСтраны);
	КонецЕсли;
	
	сфпКодГорода = Константы.сфпКодГорода.Получить();
	Если НЕ ЗначениеЗаполнено(сфпКодГорода) Тогда
		сфпКодГорода = "495";
		ЗаписатьЗначениеКонстанты("сфпКодГорода", сфпКодГорода);
	КонецЕсли;
	
	сфпПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если сфпПоследниеЦифрыТелефонногоНомера = 0 Тогда
		сфпПоследниеЦифрыТелефонногоНомера = 10;
		ЗаписатьЗначениеКонстанты("сфпПоследниеЦифрыТелефонногоНомера", сфпПоследниеЦифрыТелефонногоНомера);
	КонецЕсли;
	
	сфпМаксимальнаяДлинаВнутреннихНомеров = Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
	Если сфпМаксимальнаяДлинаВнутреннихНомеров = 0 Тогда
		сфпМаксимальнаяДлинаВнутреннихНомеров = 4;
		ЗаписатьЗначениеКонстанты("сфпМаксимальнаяДлинаВнутреннихНомеров", сфпМаксимальнаяДлинаВнутреннихНомеров);
	КонецЕсли;
	
	МассивДействийЗвонка = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ТекДействие Из МассивДействийЗвонка Цикл
		Элементы.ДействиеВходящийЗвонок.СписокВыбора.Добавить(ТекДействие.Наименование, ТекДействие.Наименование);
		Элементы.ДействиеИсходящийЗвонок.СписокВыбора.Добавить(ТекДействие.Наименование, ТекДействие.Наименование);
				
		Если ПустаяСтрока(ТекДействие.Действие) ИЛИ ТекДействие.Действие = "сфпОткрытьПанельЗвонка" Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияПоЗвонку.Добавить(ТекДействие.Действие, ТекДействие.Наименование);
	КонецЦикла;	
	
	сфпСофтФонПроСервер.ОбновитьКонтактыПанелиЗвонка(ЭтаФорма);

	ТекущееДействие = "Настройка";
			
	Если Константы.сфпИспользоватьОблачнуюТелефонию.Получить() Тогда
		Успешно = ПроверитьПодпискуНаСобытия();
		Если Успешно Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПроверкаСтатуса");
			Успешно = РезультатЗапроса.Успешно;
		КонецЕсли;	
		
		Если Успешно Тогда
			Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
				  ТекущееДействие = "Уведомления";
			Иначе ТекущееДействие = "Перейти";
			КонецЕсли;	
		КонецЕсли;
		
		Элементы.КартинкаСтатусОнлайн.Видимость = Успешно;
		Элементы.КартинкаСтатусОффлайн.Видимость = НЕ Успешно;
		
		Если НЕ Успешно И РезультатЗапроса <> Неопределено Тогда
			Элементы.ДекорацияСтатусПодключения.Подсказка = РезультатЗапроса.Ошибка;
			Элементы.КартинкаСтатусОффлайн.Подсказка = РезультатЗапроса.Ошибка;

		Иначе
			Элементы.ДекорацияСтатусПодключения.Подсказка = "";
			Элементы.КартинкаСтатусОффлайн.Подсказка = "";
		КонецЕсли;	
	КонецЕсли;
	
	Если Элементы.КартинкаСтатусОнлайн.Видимость Тогда
		Элементы.КоманднаяПанельПользователи.Видимость = Истина;
		Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаНастройки;

	Иначе
		Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаВыборОператора;
	КонецЕсли;
	
	ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
		
	НастройкиТелефонии = Константы.сфпОбщиеНастройкиТелефонии.Получить();
	Если ЗначениеЗаполнено(НастройкиТелефонии) И ТипЗнч(НастройкиТелефонии) = Тип("Строка") Тогда
		НастройкиТелефонии = ЗначениеИзСтрокиВнутр(НастройкиТелефонии);
		Если ТипЗнч(НастройкиТелефонии) = Тип("Структура") Тогда
			НастройкиТелефонии.Свойство("АдресСервераОсновнойПубликации", ЭтаФорма.сфпАдресСервераПубликацииСервисовТелефонии);
			НастройкиТелефонии.Свойство("АдресРесурсаОсновнойПубликации", ЭтаФорма.сфпИмяПубликацииСервисовТелефонии);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.сфпАдресСервераПубликацииСервисовТелефонии) ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.сфпИмяПубликацииСервисовТелефонии) Тогда
			Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
			Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
	    КонецЕсли;
	КонецЕсли;	
	
	Элементы.сфпАдресОбратногоВызова.КнопкаВыбора = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	Элементы.сфпСтрокаАвторизацииVRDФайла.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	Элементы.ПланНумерации.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
		
	Если НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
		сфпСтрокаАвторизацииVRDФайла = сфпСофтФонПроСервер.СлужебныйПользовательТелефонииАвторизацияВСтрокеПодключения();
		сфпПланНумерацииАвтоопределениеБизнесРегиона = Константы.сфпПланНумерацииАвтоопределениеБизнесРегиона.Получить();
		Элементы.сфпНастройкаРасписанияЗагрузкаПланаНумерации.Видимость = сфпПланНумерацииАвтоопределениеБизнесРегиона;
	КонецЕсли;

	Если Метаданные.Обработки.Найти("CRM_МастерРегистрацииОбращения") = Неопределено Тогда
		Элементы.ПринятьОбращение.Видимость = Ложь;
	КонецЕсли;
	Если Метаданные.Обработки.Найти("CRM_МастерФормированияПоручений") = Неопределено Тогда
		Элементы.СоздатьПоручение.Видимость = Ложь;
	КонецЕсли;
	
	Если Метаданные.Константы.Найти("CRM_ОбязательноУказыватьПричинуПотериЗвонков") <> Неопределено Тогда
		CRM_ОбязательноУказыватьПричинуПотериЗвонков = Константы["CRM_ОбязательноУказыватьПричинуПотериЗвонков"].Получить();

	Иначе
		Элементы.CRM_ОбязательноУказыватьПричинуПотериЗвонков.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры	//	ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущееДействие(ТекущееДействие);
	ОбновитьИнформациюПоЛицензиям();
	ПриИзмененииСостоянияПодключенияОбсуждений();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбсужденияПодключены" Тогда 
		ПриИзмененииСостоянияПодключенияОбсуждений(Параметр);
		
		Если ТипЗнч(Параметр) = Тип("Булево") И Параметр Тогда
			сфпПодключитьОбработчикНовыхСообщенийСистемыВзаимодействия();
		КонецЕсли;
		
		ПроверитьСтатусПодключения();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// +CRM_РабочийСтол
	Если ЭтоКонфигурацияCRM Тогда
		Попытка
			РезультатВычисления = Вычислить("ск_глСтекФормРабочегоСтола");
			Если РезультатВычисления <> Неопределено Тогда
				СтруктураПоиска = Новый Структура("ИмяФормы", ЭтотОбъект.ИмяФормы);
				Попытка
					ЭлементыРС = ЭтотОбъект.CRM_НастройкиРабочегоСтола.НайтиСтроки(СтруктураПоиска);
					РезультатВычисления.Удалить(ЭлементыРС[0].Идентификатор);	
				Исключение КонецПопытки;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЕсли;
	// -CRM_РабочийСтол

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура сфпИспользоватьСофтФонПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура сфпИмяПубликацииСервисовТелефонииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	сфпИмяПубликацииСервисовТелефонии = Элемент.ТекстРедактирования;
	
	Если ЗначениеЗаполнено(сфпАдресСервераПубликацииСервисовТелефонии) И ЗначениеЗаполнено(сфпИмяПубликацииСервисовТелефонии) Тогда
		сфпСофтФонПроСервер.СохранитьНастройкиПубликацииСервисовТелефонии(сфпАдресСервераПубликацииСервисовТелефонии, сфпИмяПубликацииСервисовТелефонии);
		сфпАдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС);
		
		Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Ложь;
		Элементы.сфпАдресОбратногоВызова.Видимость = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(сфпАдресСервераПубликацииСервисовТелефонии) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указан адрес сервера публикации";
		Сообщение.Поле = "сфпАдресСервераПубликацииСервисовТелефонии";
		Сообщение.Сообщить();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(сфпИмяПубликацииСервисовТелефонии) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указано имя публикации";
		Сообщение.Поле = "сфпИмяПубликацииСервисовТелефонии";
		Сообщение.Сообщить();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура сфпАдресОбратногоВызоваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
	Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТелефонныеЗвонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовГруппаДоступныеАТС

&НаКлиенте
Процедура АТС_Нажатие(Элемент)
	Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаВыборОператора;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНастроекТелефонии

&НаКлиенте
Процедура ПриИзмененииПараметровАТС(ИмяТаблицыНастройки, Индекс)
	
	ЗаписатьЗначениеНастройкиИнтеграцииАТС(ИмяТаблицыНастройки, Индекс);
	ПроверитьСтатусПодключения();
	
КонецПроцедуры

// СофтФонWebModule
&НаКлиенте
Процедура АТС_СофтФонWebModule_АдресОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_СофтФонWebModule", 1);	
КонецПроцедуры

&НаКлиенте
Процедура АТС_СофтФонWebModule_vpbx_api_keyПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_СофтФонWebModule", 2);	
КонецПроцедуры

&НаКлиенте
Процедура АТС_СофтФонWebModule_vpbx_api_saltПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_СофтФонWebModule", 3);	
КонецПроцедуры

// MangoOffice
&НаКлиенте
Процедура АТС_MangoOffice_vpbx_api_keyПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_MangoOffice", 1);
КонецПроцедуры

&НаКлиенте
Процедура АТС_MangoOffice_vpbx_api_saltПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_MangoOffice", 2);	
КонецПроцедуры

// Яндекс
&НаКлиенте
Процедура АТС_Яндекс_КлючДляАвторизацииПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Яндекс", 1);	
КонецПроцедуры

// Билайн
&НаКлиенте
Процедура АТС_Билайн_КлючДляАвторизацииВОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Билайн", 1);	
КонецПроцедуры

// Itoolabs
&НаКлиенте
Процедура АТС_Itoolabs_АдресОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Itoolabs", 0);	
КонецПроцедуры

&НаКлиенте
Процедура АТС_Itoolabs_КлючДляАвторизацииВОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Itoolabs", 1);	
КонецПроцедуры

// МТТ
&НаКлиенте
Процедура АТС_МТТ_АдресОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_МТТ", 0);
КонецПроцедуры

&НаКлиенте
Процедура АТС_МТТ_КлючДляАвторизацииВОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_МТТ", 1);
КонецПроцедуры

&НаСервере
Функция ПроверитьПодпискуНаСобытия()
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		Если ЗначениеЗаполнено(НастройкиАТС_Билайн[2].Значение) Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПолучитьДанныеПодпискиНаСобытия");
			Если РезультатЗапроса.Успешно Тогда
				json = Новый ЧтениеJSON();
				json.УстановитьСтроку(РезультатЗапроса.Результат);
				jsonСтруктура = ПрочитатьJSON(json);
				json.Закрыть();
				
				Если jsonСтруктура.Свойство("errorCode") Тогда
					НастройкиАТС_Билайн[2].Значение = "";
					ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_Билайн", 2);
					
				ИначеЕсли jsonСтруктура.Свойство("expires") Тогда
					Если jsonСтруктура.expires = 0 Тогда
						НастройкиАТС_Билайн[2].Значение = "";
						ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_Билайн", 2);
					КонецЕсли;	
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Билайн[2].Значение) Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПодпискаНаСобытия");
			Если РезультатЗапроса.Успешно Тогда
				json = Новый ЧтениеJSON();
				json.УстановитьСтроку(РезультатЗапроса.Результат);
				jsonСтруктура = ПрочитатьJSON(json);
				json.Закрыть();
				
				Если jsonСтруктура.Свойство("subscriptionId") Тогда
					НастройкиАТС_Билайн[2].Значение = jsonСтруктура.subscriptionId;
					ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_Билайн", 2);
					
					сфпСофтФонПроСервер.ПодключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
				КонецЕсли;				
			КонецЕсли;
			
		Иначе
			сфпСофтФонПроСервер.ПодключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
		КонецЕсли;	
		
		Возврат ЗначениеЗаполнено(НастройкиАТС_Билайн[2].Значение);
		
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура МаршрутизироватьВходящиеНаОтветственныхПриИзменении(Элемент)
	
	ЗаписатьЗначениеОбщейНастройкиТелефонии("МаршрутизироватьВходящиеНаОтветственных", МаршрутизироватьВходящиеНаОтветственных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВходящийЗвонокПриИзменении(Элемент)
	
	ЗаписатьЗначениеОбщейНастройкиТелефонии("ДействиеВходящегоЗвонка", ДействиеВходящийЗвонок);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеИсходящийЗвонокПриИзменении(Элемент)
	
	ЗаписатьЗначениеОбщейНастройкиТелефонии("ДействиеИсходящегоЗвонка", ДействиеИсходящийЗвонок);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпДекорацияТелефонныеКнигиСофтФон"
//
Процедура сфпДекорацияТелефонныеКнигиСофтФонНажатие(Элемент)
	
	Если сфпИспользоватьСофтФон Тогда
		ОткрытьФорму("Справочник.сфпТелефонныеКниги.ФормаСписка");	
	КонецЕсли;

КонецПроцедуры // сфпДекорацияТелефонныеКнигиСофтФонНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпДекорацияПерезаполнитьРегистрПоискаПоНомерам"
//
Процедура сфпДекорацияПерезаполнитьРегистрПоискаПоНомерамНажатие(Элемент)
	сфпСофтФонПроКлиент.сфпПерезаполнитьРегистрПоискаПоНомерам();
КонецПроцедуры // сфпДекорацияПерезаполнитьРегистрПоискаПоНомерамНажатие()

&НаКлиенте
Процедура сфпДекорацияДополнительнаяИнформацияКонтактовНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.сфпВыборДополнительнойИнформацииКонтактов",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура АбонентыТелефонныхКнигПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		ТекДанные = Элементы.АбонентыТелефонныхКниг.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если НЕ ТекДанные.Свойство("ГруппировкаСтроки") И ЗначениеЗаполнено(ТекДанные.НомерТелефона) Тогда
				НабранныйНомер = ТекДанные.НомерТелефона;
				ТекущийЗвонокНомерАбонента = ТекДанные.НомерТелефона;

			Иначе
				НабранныйНомер = "";
				ТекущийЗвонокНомерАбонента = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура сфпКонстантаПриИзменении(Элемент)
	ЗаписатьЗначениеКонстанты(Элемент.Имя, ЭтаФорма[Элемент.Имя]);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЛицензийНажатие(Элемент)
	ПоказатьПредупреждение(, Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоЛицензиям()
	
	ИнформацияПоЛицензиям = сфпЛицензированиеСервер.ОбновитьИнформациюПоЛицензиям();
	
	Элементы.ДекорацияСостояниеЛицензий.Заголовок = ИнформацияПоЛицензиям.Заголовок;
	Элементы.ДекорацияСостояниеЛицензий.Подсказка = ИнформацияПоЛицензиям.Подсказка;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтатусаПодключения(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "ОбновитьСтатус" Тогда
			ПроверитьСтатусПодключения();
			
		Иначе	
			ВключитьОтключитьСофтФон(ВыбранныйЭлемент.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяКартинкиЛогоОператора(ИспользуемаяАТС)
	
	Если ТипЗнч(ИспользуемаяАТС) = Тип("ПеречислениеСсылка.сфпДоступныеАТС") Тогда
		ТекИндекс = Перечисления.сфпДоступныеАТС.Индекс(ИспользуемаяАТС);
		ТекЗначение = Метаданные.Перечисления.сфпДоступныеАТС.ЗначенияПеречисления.Получить(ТекИндекс);
		Возврат ТекЗначение.Имя;
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВключитьОтключитьСофтФон(Действие)
	
	Если Действие = "Включить" Тогда
		Элементы.КоманднаяПанельПользователи.Видимость = Истина;
		
		Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаНастройки;

	Иначе
		ПредставлениеОператора = "";
		
		Элементы.ЛогоОператора.Картинка = БиблиотекаКартинок.сфпАТС_УниверсальныйIToolLabs;
		Элементы.КоманднаяПанельПользователи.Видимость = Ложь;
		
		Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаВыборОператора;
		
		УстановитьТекущееДействие("Настройка");

		ИспользуемаяАТС = "";
		ИспользуемаяАТСДополнительно = "";
		
		ПриВыбореАТС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОператораНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.УниверсальныйItoolabs") Тогда
		  ИдентификаторОператора = ИспользуемаяАТСДополнительно;
	Иначе ИдентификаторОператора = ИдентификаторПеречисления(ИспользуемаяАТС);
	КонецЕсли;

	СтруктураПоиска = Новый Структура("Идентификатор", ИдентификаторОператора);
	НайденныеСтроки = Объект.ТаблицаОператоров.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СсылкаОператора = НайденныеСтроки[0].Ссылка;
		ПерейтиПоСсылке(СсылкаОператора);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонииПриАктивизацииСтроки(Элемент)
	
	ДоступноУдалениеСтроки = Ложь;
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.НомерОтсутствует ИЛИ ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс") Тогда
			ДоступноУдалениеСтроки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьУдаленияВнутреннегоНомера(ДоступноУдалениеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонииПередУдалением(Элемент, Отказ)
	УдалитьВнутреннийНомер();
КонецПроцедуры

&НаКлиенте
Процедура сфпНастройкаРасписанияЗагрузкаПланаНумерацииНажатие(Элемент)
	сфпСофтФонПроКлиент.ПоказатьРасписаниеРегламентногоЗадания("сфпЗагрузкаПланаНумерации");
КонецПроцедуры

&НаКлиенте
Процедура сфпПланНумерацииАвтоопределениеБизнесРегионаПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты(Элемент.Имя, ЭтаФорма[Элемент.Имя]);
	
	Элементы.сфпНастройкаРасписанияЗагрузкаПланаНумерации.Видимость = сфпПланНумерацииАвтоопределениеБизнесРегиона;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтатусПодключенияНажатие(Элемент)
	
	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.Добавить("ОбновитьСтатус", "Обновить статус");
	СписокВыбора.Добавить("Отключить", "Отключить интеграцию с АТС");
	
	Оповещение = Новый ОписаниеОповещения("ПриВыбореСтатусаПодключения", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.ДекорацияСтатусПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыАТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбратьОператора();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователиТелефонии

&НаКлиенте
Процедура ПользователиТелефонииВнутреннийНомерПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ВнутреннийНомер) Тогда
		ПолучатьИсходящиеНомера = (ИсходящиеНомера.Количество() = 0);
		ДанныеАбонента = сфпЛицензированиеСервер.ПолучитьДанныеАбонентаОблачнойАТС(ТекДанные.ВнутреннийНомер, ПолучатьИсходящиеНомера);
		ТекДанные.ДанныеАТС = ДанныеАбонента.ДанныеАТС;
		
		Если ПолучатьИсходящиеНомера И ДанныеАбонента.Свойство("ИсходящиеНомера") Тогда
			ИсходящиеНомера.ЗагрузитьЗначения(ДанныеАбонента.ИсходящиеНомера);
			
			Элементы.ПользователиТелефонииИсходящийНомер.СписокВыбора.ЗагрузитьЗначения(ДанныеАбонента.ИсходящиеНомера);
		КонецЕсли;
		
		Если ИсходящиеНомера.Количество() > 0 И НЕ ЗначениеЗаполнено(ТекДанные.ИсходящийНомер) Тогда
			ТекДанные.ИсходящийНомер = ИсходящиеНомера[0].Значение;	
		КонецЕсли;	
		
		ПользователиТелефонииПользовательПриИзменении(Неопределено);
	КонецЕсли;			

КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонииИсходящийНомерПриИзменении(Элемент)
	ПользователиТелефонииПользовательПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонииПользовательПриИзменении(Элемент)
	
	МассивАбонентов = Новый Массив();
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) И ЗначениеЗаполнено(ТекДанные.ВнутреннийНомер) Тогда
		ТекДанные.ПользовательРегистра = ТекДанные.Пользователь;
		
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент,Логин,ИсходящийНомер,ДанныеАТС", ТекДанные.ВнутреннийНомер, ТекДанные.Пользователь, ТекДанные.Логин, ТекДанные.ИсходящийНомер, ТекДанные.ДанныеАТС);
		МассивАбонентов.Добавить(ДанныеАбонента);
		сфпЛицензированиеСервер.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Использовать");
		
		НастроитьИспользованиеСофтФонаПользователям(МассивАбонентов, Истина, ДействиеВходящийЗвонок, ДействиеИсходящийЗвонок);
		
		УстановитьТекущееДействие("Перейти");

	Иначе
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент,Логин,ИсходящийНомер,ДанныеАТС", ТекДанные.ВнутреннийНомер, ТекДанные.ПользовательРегистра, ТекДанные.Логин, ТекДанные.ИсходящийНомер, ТекДанные.ДанныеАТС);
		МассивАбонентов.Добавить(ДанныеАбонента);
		сфпЛицензированиеСервер.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Освободить");	
		
		НастроитьИспользованиеСофтФонаПользователям(МассивАбонентов, Ложь, ДействиеВходящийЗвонок, ДействиеИсходящийЗвонок, НЕ ЗначениеЗаполнено(ТекДанные.Пользователь));
	КонецЕсли;
	
	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодключитьОтключитьОбсуждения(Команда)
	
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		ПерейтиПоНавигационнойСсылке("e1cib/command/Обработка.сфпПодключениеСистемыВзаимодействия.Команда.Отключение");

	Иначе 
		ПерейтиПоНавигационнойСсылке("e1cib/app/Обработка.сфпПодключениеСистемыВзаимодействия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЛицензии(Команда)
	ОбновитьИнформациюПоЛицензиям();
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьЛицензию(Команда)
	
	МассивАбонентов = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.ПользователиТелефонии.ВыделенныеСтроки Цикл
		СтрокаАбонента = ПользователиТелефонии.НайтиПоИдентификатору(ТекСтрока);
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент", СтрокаАбонента.ВнутреннийНомер, СтрокаАбонента.Пользователь);
		МассивАбонентов.Добавить(ДанныеАбонента);
	КонецЦикла;
		
	сфпЛицензированиеСервер.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Освободить");
	
	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛицензию(Команда)
	
	МассивАбонентов = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.ПользователиТелефонии.ВыделенныеСтроки Цикл
		СтрокаАбонента = ПользователиТелефонии.НайтиПоИдентификатору(ТекСтрока);
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент", СтрокаАбонента.ВнутреннийНомер, СтрокаАбонента.Пользователь);
		МассивАбонентов.Добавить(ДанныеАбонента);
	КонецЦикла;
		
	Если НЕ сфпЛицензированиеСервер.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Использовать") Тогда
		ТекстОтсутствияЛицензий = НСтр("ru='Отсутствуют свободные лицензии'");
		ПоказатьПредупреждение(, ТекстОтсутствияЛицензий);
	КонецЕсли;
	
	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВсеЛицензии(Команда)
	
	МассивАбонентов = Новый Массив();
	Для Каждого СтрокаАбонента Из ПользователиТелефонии Цикл
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент", СтрокаАбонента.ВнутреннийНомер, СтрокаАбонента.Пользователь);
		МассивАбонентов.Добавить(ДанныеАбонента);
	КонецЦикла;
		
	Если НЕ сфпЛицензированиеСервер.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Использовать") Тогда
		ТекстОтсутствияЛицензий = НСтр("ru='Отсутствуют свободные лицензии'");
		ПоказатьПредупреждение(, ТекстОтсутствияЛицензий);
	КонецЕсли;
	
	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();

КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьВсеЛицензии(Команда)
	
	МассивАбонентов = Новый Массив();
	Для Каждого СтрокаАбонента Из ПользователиТелефонии Цикл
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент", СтрокаАбонента.ВнутреннийНомер, СтрокаАбонента.Пользователь);
		МассивАбонентов.Добавить(ДанныеАбонента);
	КонецЦикла;
	
	сфпЛицензированиеСервер.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Освободить");

	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВнутреннийНомер(Команда = Неопределено)
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.НомерОтсутствует ИЛИ ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс") Тогда
			УдалитьВнутреннийНомерНаСервере(ТекДанные.Пользователь, ТекДанные.ВнутреннийНомер);
			ПользователиТелефонии.Удалить(ПользователиТелефонии.Индекс(ТекДанные));
			ОбновитьИнформациюПоЛицензиям();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСНастройками

&НаСервере
Процедура ПрочитатьЗначенияНастроек()
	
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.сфпИспользоватьОблачнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
		ИспользуемаяАТСДополнительно = Константы.сфпИспользуемаяАТСДополнительно.Получить();

	ИначеЕсли Константы.сфпИспользоватьМобильнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = "МобильнаяТелефония";
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	НастройкиАТС = Новый ТаблицаЗначений();
	НастройкиАТС.Колонки.Добавить("Ключ");
	НастройкиАТС.Колонки.Добавить("Значение");
	
	// СофтФонWebModule
	НоваяНастройка = НастройкиАТС_СофтФонWebModule.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.СофтФонWebModule);
	
	НоваяНастройка = НастройкиАТС_СофтФонWebModule.Добавить();
	НоваяНастройка.Ключ = "АдресОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.АдресОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_СофтФонWebModule.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_key";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_key;
	
	НоваяНастройка = НастройкиАТС_СофтФонWebModule.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_salt";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_salt;
	
	// MangoOffice
	НоваяНастройка = НастройкиАТС_MangoOffice.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.MangoOffice);
	
	НоваяНастройка = НастройкиАТС_MangoOffice.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_key";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_key;
	
	НоваяНастройка = НастройкиАТС_MangoOffice.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_salt";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_salt;
	
	// Яндекс
	НоваяНастройка = НастройкиАТС_Яндекс.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.Яндекс);
	
	НоваяНастройка = НастройкиАТС_Яндекс.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииАТСЯндекс";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииАТСЯндекс;
	
	// Билайн
	НоваяНастройка = НастройкиАТС_Билайн.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.Билайн);
	
	НоваяНастройка = НастройкиАТС_Билайн.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_Билайн.Добавить();
	НоваяНастройка.Ключ = "КлючПодпискиНаСобытия";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючПодпискиНаСобытия;
	
	// ITooLabs
	НоваяНастройка = НастройкиАТС_ITooLabs.Добавить();
	НоваяНастройка.Ключ = "АдресОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.АдресОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_ITooLabs.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_ITooLabs.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.УниверсальныйItoolabs);
	
	НоваяНастройка = НастройкиАТС_ITooLabs.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВИБ";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВИБ;
	
	// МТТ
	НоваяНастройка = НастройкиАТС_МТТ.Добавить();
	НоваяНастройка.Ключ = "АдресОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.АдресОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_МТТ.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_МТТ.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.МТТ);
	
	НоваяНастройка = НастройкиАТС_МТТ.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВИБ";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВИБ;
	
	сфпАдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС);
	
	// Обработка звонка
	ДействиеВходящийЗвонок = НастройкиТелефонии.ДействиеВходящегоЗвонка;
	Если НЕ ЗначениеЗаполнено(ДействиеВходящийЗвонок) Тогда
		ДействиеВходящийЗвонок = "Регистрация обращения";
		ЗаписатьЗначениеОбщейНастройкиТелефонии("ДействиеВходящегоЗвонка", ДействиеВходящийЗвонок);
	КонецЕсли;
	
	ДействиеИсходящийЗвонок = НастройкиТелефонии.ДействиеИсходящегоЗвонка;
	Если НЕ ЗначениеЗаполнено(ДействиеИсходящийЗвонок) Тогда
		ДействиеИсходящийЗвонок = "Открыть Телефонный звонок";
		ЗаписатьЗначениеОбщейНастройкиТелефонии("ДействиеИсходящегоЗвонка", ДействиеИсходящийЗвонок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначениеНастройкиИнтеграцииАТС(ТаблицаНастроек, Индекс)
	
	Настройка = ЭтотОбъект[ТаблицаНастроек][Индекс];
	сфпСофтФонПроСервер.сфпУдалитьСлужебныеСимволы(Настройка.Значение);
	сфпСофтФонПроСервер.УстановитьНастройкуТелефонии(Настройка.Ключ, Настройка.Значение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначениеОбщейНастройкиТелефонии(Ключ, НовоеЗначение)
	
	сфпСофтФонПроСервер.УстановитьНастройкуТелефонии(Ключ, НовоеЗначение);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Процедура - обработчик команды формы "сфпКомандаОписаниеСофтФон"
//
Процедура сфпКомандаОписаниеСофтФон(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияСофтФон"));
КонецПроцедуры // сфпКомандаОписаниеСофтФон()

&НаСервере
Процедура УстановитьКонстантыСофтФон()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		Если ЗначениеЗаполнено(ИспользуемаяАТС) И НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
			Константы.сфпИспользоватьСофтФон.Установить(сфпИспользоватьСофтФон);
			
			Если Метаданные.Константы.Найти("сфпИспользуемаяВерсияСофтФон") <> Неопределено Тогда
				Константы["сфпИспользуемаяВерсияСофтФон"].Установить(Перечисления["сфпВерсииСофтФон"].СофтФотPROSTO);
				Константы["сфпИспользоватьCLON"].Установить(Ложь);
				Константы["сфпИспользоватьCoMagic"].Установить(Ложь);
				Константы["сфпИспользоватьSMS"].Установить(Ложь);
				Константы["сфпИспользоватьЗаписьПереговоров"].Установить(Ложь);
				Константы["сфпИспользоватьИсториюЗвонков"].Установить(Ложь);
				Константы["сфпИспользоватьМаршрутизацию"].Установить(Ложь);
				Константы["сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков"].Установить(Ложь);
				Константы["сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг"].Установить(Ложь);
				Константы["сфпИспользоватьСпрут7"].Установить(Ложь);
			КонецЕсли;
		КонецЕсли;
		
		Если сфпИспользоватьСофтФон Тогда
			  ИспользуетсяОблачнаяАТС = ЭтоОблачнаяАТС(ИспользуемаяАТС);
		Иначе ИспользуетсяОблачнаяАТС = Ложь;
		КонецЕсли;
		
		сфпСофтФонПроСервер.СоздатьИзменитьСлужебногоПользователяТелефонии(ИспользуетсяОблачнаяАТС);
		
		Константы.сфпИспользоватьОблачнуюТелефонию.Установить(ИспользуетсяОблачнаяАТС);
		Константы.сфпИспользуемаяАТС.Установить(?(ИспользуетсяОблачнаяАТС, ИспользуемаяАТС, Перечисления.сфпДоступныеАТС.ПустаяСсылка()));
		Константы.сфпИспользуемаяАТСДополнительно.Установить(?(ИспользуетсяОблачнаяАТС, ИспользуемаяАТСДополнительно, ""));
		Константы.сфпИспользоватьМобильнуюТелефонию.Установить(ЭтоМобильнаяТелефония(ИспользуемаяАТС));
				
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытияЖурнала = НСтр("ru = 'Выбор оператора:'") + " " + ИспользуемаяАТС;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		УстановитьПривилегированныйРежим(Ложь);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

&НаСервере
Процедура ПриВыбореАТС()
	
	ПредставлениеОператора = "";
	ЛогоОператора = БиблиотекаКартинок.сфпАТС_УниверсальныйIToolLabs;
	
	Если ТипЗнч(ИспользуемаяАТС) = Тип("ПеречислениеСсылка.сфпДоступныеАТС") И ЗначениеЗаполнено(ИспользуемаяАТС) Тогда
		Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.УниверсальныйItoolabs Тогда
			СтруктураПоиска = Новый Структура("Идентификатор", ИспользуемаяАТСДополнительно);
			НайденныеСтроки = Объект.ТаблицаОператоров.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ПредставлениеОператора = НайденныеСтроки[0].Представление;
			КонецЕсли;

		Иначе
			ТекПеречисление = Метаданные.Перечисления.сфпДоступныеАТС.ЗначенияПеречисления.Получить(Перечисления.сфпДоступныеАТС.Индекс(ИспользуемаяАТС));
			ПредставлениеОператора = ТекПеречисление.Синоним;
			
			Попытка
				ЛогоОператора = БиблиотекаКартинок["сфпАТС_" + ПолучитьИмяКартинкиЛогоОператора(ИспользуемаяАТС)];
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Элементы.ЛогоОператора.Картинка = ЛогоОператора;

	сфпИспользоватьСофтФон = Истина;
	
	УстановитьКонстантыСофтФон();
		
	ЗаполнитьАбонентовОблачнойАТС();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ИспользоватьАТС_Яндекс = (ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс"));
	ИспользоватьАТС_СофтФонWebModule = (ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.СофтФонWebModule"));
	
	Элементы.ГруппаНастройкиАТС_СофтФонWebModule.Видимость = ИспользоватьАТС_СофтФонWebModule;
	Элементы.ГруппаНастройкиАТС_MangoOffice.Видимость = ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.MangoOffice");
	Элементы.ГруппаНастройкиАТС_Яндекс.Видимость = ИспользоватьАТС_Яндекс;
	Элементы.ГруппаНастройкиАТС_Билайн.Видимость = ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Билайн");
	Элементы.ГруппаНастройкиАТС_МТТ.Видимость = ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.МТТ");
	Элементы.ГруппаНастройкиАТС_ITooLabs.Видимость = сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС);
	Элементы.АТС_Itoolabs_АдресОблачнойАТС.КнопкаВыбора = (ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Гравител"));
			
	Элементы.НастройкаИнтеграции.Видимость = ЭтоОблачнаяАТС(ИспользуемаяАТС);
	//Элементы.МаршрутизироватьВходящиеНаОтветственных.Видимость = НЕ ИспользоватьАТС_Яндекс;
	Элементы.ПользователиТелефонииОбновитьАбонентовАТС.Видимость = НЕ ИспользоватьАТС_Яндекс;
	Элементы.ПользователиТелефонииВнутреннийНомер.ТолькоПросмотр = НЕ ИспользоватьАТС_Яндекс;
	Элементы.ПользователиТелефонииИсходящийНомер.Видимость = ИспользоватьАТС_Яндекс;
	Элементы.ПользователиТелефонииКнопкаДобавить.Видимость = ИспользоватьАТС_Яндекс;
	
	Элементы.ПользователиТелефонии.ИзменятьСоставСтрок = ИспользоватьАТС_Яндекс;
	
	сфпЛицензированиеСервер.УстановитьВидимостьЭлементовЛицензирования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылке(Ссылка)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Особенность платформы: ПерейтиПоНавигационнойСсылке не доступен в толстом клиенте обычного приложения.
		ЗапуститьПриложение(Ссылка);
	#Иначе
		ПерейтиПоНавигационнойСсылке(Ссылка);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОблачнаяАТС(АТС)
	
	Возврат ТипЗнч(АТС) = Тип("ПеречислениеСсылка.сфпДоступныеАТС");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоМобильнаяТелефония(АТС)
	
	Возврат АТС = "МобильнаяТелефония";
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяЗаполнениеПользователей()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(НезаполненныеПользователи, 0)) КАК НезаполненныеПользователи,
	|	СУММА(ЕСТЬNULL(ЗаполненныеПользователи, 0)) КАК ЗаполненныеПользователи,
	|	СУММА(ЕСТЬNULL(ВсегоАбонентов, 0)) КАК ВсегоАбонентов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР КОГДА Объект = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК НезаполненныеПользователи,
	|		ВЫБОР КОГДА Объект = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ЗаполненныеПользователи,
	|		1 КАК ВсегоАбонентов
	|	ИЗ
	|		РегистрСведений.сфпКонтактыТелефонии
	|	ГДЕ
	|		ВнутреннийНомерАТС <> """") КАК Подзапрос");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Пустышки = ?(Выборка.НезаполненныеПользователи = Null, 0, Выборка.НезаполненныеПользователи);
		Заполненные = ?(Выборка.ЗаполненныеПользователи = Null, 0, Выборка.ЗаполненныеПользователи);
		Всего = ?(Выборка.ВсегоАбонентов = Null, 0, Выборка.ВсегоАбонентов);
		
	Иначе
	    Пустышки = 0;
		Заполненные = 0;
		Всего = 0;
	КонецЕсли;
	
	Если Пустышки > 0 Тогда
		Если Заполненные > 0 Тогда
			  Возврат 0;
		Иначе Возврат 2;
		КонецЕсли;
		
	ИначеЕсли Заполненные = 0 Тогда
		Возврат 2;
		
	ИначеЕсли Заполненные = Всего Тогда
		Возврат 0;
		
	Иначе	
		Возврат 1;
	КонецЕсли;
	
КонецФункции	
	
&НаКлиенте
Процедура ПроверитьСтатусПодключения()
	
	Успешно = Истина;
	
	Если НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
		Если НЕ ЗначениеЗаполнено(сфпАдресСервераПубликацииСервисовТелефонии) Тогда
			Если НЕ Элементы.ГруппаРедактированиеАдресаПубликации.Видимость Тогда
				Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
				Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
			КонецЕсли;

			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "сфпАдресСервераПубликацииСервисовТелефонии";
			Сообщение.Текст = "Не указан Адрес публикации 1С";
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(сфпИмяПубликацииСервисовТелефонии) Тогда
			Если НЕ Элементы.ГруппаРедактированиеАдресаПубликации.Видимость Тогда
				Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
				Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
			КонецЕсли;
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "сфпИмяПубликацииСервисовТелефонии";
			Сообщение.Текст = "Не указано Имя публикации 1С";
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.MangoOffice") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_MangoOffice[1].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_MangoOffice_vpbx_api_key";
			Сообщение.Текст = "Не указан " + Элементы.АТС_MangoOffice_vpbx_api_key.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_MangoOffice[2].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_MangoOffice_vpbx_api_salt";
			Сообщение.Текст = "Не указан " + Элементы.АТС_MangoOffice_vpbx_api_salt.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Билайн") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Билайн[1].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Билайн_КлючДляАвторизацииВОблачнойАТС";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Билайн_КлючДляАвторизацииВОблачнойАТС.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Билайн[2].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Билайн_КлючПодпискиНаСобытия";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Билайн_КлючДляАвторизацииВОблачнойАТС.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.МТТ") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_МТТ[0].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_МТТ_АдресОблачнойАТС";
			Сообщение.Текст = "Не указан " + Элементы.АТС_МТТ_АдресОблачнойАТС.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_МТТ[1].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_МТТ_КлючДляАвторизацииВОблачнойАТС";
			Сообщение.Текст = "Не указан " + Элементы.АТС_МТТ_КлючДляАвторизацииВОблачнойАТС.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_МТТ[3].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_МТТ_КлючДляАвторизацииВИБ";
			Сообщение.Текст = "Не указан " + Элементы.АТС_МТТ_КлючДляАвторизацииВИБ.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Яндекс[1].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Яндекс_КлючДляАвторизации";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Яндекс_КлючДляАвторизации.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.СофтФонWebModule") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_СофтФонWebModule[1].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_СофтФонWebModule_АдресОблачнойАТС";
			Сообщение.Текст = "Не указан " + Элементы.АТС_СофтФонWebModule_АдресОблачнойАТС.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_СофтФонWebModule[2].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_СофтФонWebModule_vpbx_api_key";
			Сообщение.Текст = "Не указан " + Элементы.АТС_СофтФонWebModule_vpbx_api_key.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_СофтФонWebModule[3].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_СофтФонWebModule_vpbx_api_salt";
			Сообщение.Текст = "Не указан " + Элементы.АТС_СофтФонWebModule_vpbx_api_salt.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Itoolabs[0].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Itoolabs_АдресОблачнойАТС";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Itoolabs_АдресОблачнойАТС.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Itoolabs[1].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Itoolabs_КлючДляАвторизацииВОблачнойАТС";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Itoolabs_КлючДляАвторизацииВОблачнойАТС.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Itoolabs[3].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Itoolabs_КлючДляАвторизацииВИБ";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Itoolabs_КлючДляАвторизацииВИБ.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если Успешно Тогда
    	Успешно = ПроверитьПодпискуНаСобытия();
		Если Успешно Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПроверкаСтатуса");
			Успешно = РезультатЗапроса.Успешно;
		КонецЕсли;
	КонецЕсли;	
	
	Элементы.КартинкаСтатусОнлайн.Видимость = Успешно;
	Элементы.КартинкаСтатусОффлайн.Видимость = НЕ Успешно;
	
	Если НЕ Успешно И РезультатЗапроса <> Неопределено Тогда
		Элементы.ДекорацияСтатусПодключения.Подсказка = РезультатЗапроса.Ошибка;
		Элементы.КартинкаСтатусОффлайн.Подсказка = РезультатЗапроса.Ошибка;

	Иначе
		Элементы.ДекорацияСтатусПодключения.Подсказка = "";
		Элементы.КартинкаСтатусОффлайн.Подсказка = "";
	КонецЕсли;
	
	СтатусТекущегоДействия = "Настройка";
	Если Успешно Тогда
		Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
			СтатусТекущегоДействия = "Уведомления";

		Иначе
			ЗаполнениеПользователей = ТребуетсяЗаполнениеПользователей();
			Если ЗаполнениеПользователей = 0 Тогда
				  СтатусТекущегоДействия = "Перейти";
			Иначе СтатусТекущегоДействия = "Номера";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекущееДействие(СтатусТекущегоДействия);

КонецПроцедуры	

// +CRM_РабочийСтол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	РезультатВычисления = Вычислить("CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда)");
КонецПроцедуры	//	Подключаемый_ВыполнитьПереопределяемуюКоманду()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РезультатВычисления = Вычислить("CRM_РабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка)");
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РезультатВычисления = Вычислить("CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка)");
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// +CRM_РабочийСтол

&НаКлиенте
Процедура ОбновитьАбонентовАТС(Команда = Неопределено)
	
	ТекВнутреннийНомер = "";
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекВнутреннийНомер = ТекДанные.ВнутреннийНомер;
	КонецЕсли;	
	
	УстановитьДоступностьУдаленияВнутреннегоНомера(Ложь);
	ЗаполнитьАбонентовОблачнойАТС();
	
	ПроверитьСтатусПодключения();

	Если ЗначениеЗаполнено(ТекВнутреннийНомер) Тогда
		СтруктураПоиска = Новый Структура("ВнутреннийНомер", ТекВнутреннийНомер);
		НайденныеСтроки = ПользователиТелефонии.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			Если Элементы.ПользователиТелефонии.ТекущаяСтрока <> ТекСтрока Тогда
				Элементы.ПользователиТелефонии.ТекущаяСтрока = ТекСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущееДействие(СтатусНастройки)
	
	Если СтатусНастройки = "Перейти" Тогда
		ТекущееДействие = "";
		Элементы.ТекущееДействие.ЦветТекста = ЦветТекстаГиперссылки;

	Иначе
		Если СтатусНастройки = "Уведомления" Тогда
			ТекущееДействие = НСтр("ru = 'Подключите уведомления о телефонных звонках'");
			
		ИначеЕсли СтатусНастройки = "Номера" Тогда
			ТекущееДействие = НСтр("ru = 'Назначьте внутренние номера АТС пользователям'");

		Иначе
			ТекущееДействие = НСтр("ru = 'Выполните настройку интеграции'");
		КонецЕсли;
		
		Элементы.ТекущееДействие.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьИспользованиеСофтФонаПользователям(МассивПользователей, ИспользоватьСофтФон, ДействиеВходящийЗвонок, ДействиеИсходящийЗвонок, ОчиститьАбонента = Ложь)
	
	Если Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "CRM_НастройкиПользователей";
		ИмяПВХНастроек = "CRM_НастройкиПользователей";

	Иначе
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";
	КонецЕсли;
		
	Для Каждого ТекПользователь Из МассивПользователей Цикл
		Если ЗначениеЗаполнено(ТекПользователь.Абонент) Тогда
			МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
			МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
				МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
			КонецЕсли;
			Если МенеджерЗаписи.Значение <> ИспользоватьСофтФон Тогда
				МенеджерЗаписи.Значение = ИспользоватьСофтФон;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
			МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриВходящемЗвонке;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
				МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриВходящемЗвонке;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Значение) И МенеджерЗаписи.Значение <> ДействиеВходящийЗвонок Тогда
				МенеджерЗаписи.Значение = ДействиеВходящийЗвонок;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
			МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриИсходящемЗвонке;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
				МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриИсходящемЗвонке;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Значение) И МенеджерЗаписи.Значение <> ДействиеИсходящийЗвонок Тогда
				МенеджерЗаписи.Значение = ДействиеИсходящийЗвонок;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ТекПользователь.Абонент;
		МенеджерЗаписи.ВнутреннийНомерАТС = ТекПользователь.ВнутреннийНомер;
		МенеджерЗаписи.Прочитать();
		
		ЗаписатьМенджер = Ложь;
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Объект = ТекПользователь.Абонент;
			МенеджерЗаписи.ВнутреннийНомерАТС = ТекПользователь.ВнутреннийНомер;
			
			ЗаписатьМенджер = Истина;
		КонецЕсли;
		
		Если ОчиститьАбонента И ЗначениеЗаполнено(МенеджерЗаписи.Объект) Тогда
			МенеджерЗаписи.Объект = "";
			ЗаписатьМенджер = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекПользователь.Логин) И МенеджерЗаписи.ЛогинАТС <> ТекПользователь.Логин Тогда
			МенеджерЗаписи.ЛогинАТС = ТекПользователь.Логин;
			ЗаписатьМенджер = Истина;
		КонецЕсли;
		Если МенеджерЗаписи.ИсходящийНомерАТС <> ТекПользователь.ИсходящийНомер Тогда
			МенеджерЗаписи.ИсходящийНомерАТС = ТекПользователь.ИсходящийНомер;
			ЗаписатьМенджер = Истина;
		КонецЕсли;
		Если МенеджерЗаписи.ДанныеАТС <> ТекПользователь.ДанныеАТС Тогда
			МенеджерЗаписи.ДанныеАТС = ТекПользователь.ДанныеАТС;
			ЗаписатьМенджер = Истина;
		КонецЕсли;

		Если ЗаписатьМенджер Тогда
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАбонентовОблачнойАТС()
	сфпЛицензированиеСервер.ЗаполнитьАбонентовОблачнойАТС(ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(ИспользоватьСофтФон, ДействиеВходящийЗвонок, ДействиеИсходящийЗвонок)

	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	
	Если Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "CRM_НастройкиПользователей";
		ИмяПВХНастроек = "CRM_НастройкиПользователей";

	Иначе
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
	МенеджерЗаписи.Значение = ИспользоватьСофтФон;
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриВходящемЗвонке;
	МенеджерЗаписи.Значение = ДействиеВходящийЗвонок;
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриИсходящемЗвонке;
	МенеджерЗаписи.Значение = ДействиеИсходящийЗвонок;
	МенеджерЗаписи.Записать();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиНаСервере()

	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	
	СтруктураНастроек = Новый Структура("ИспользоватьСофтФон,ДействиеПриВходящемЗвонке,ДействиеПриИсходящемЗвонке", Ложь, "", "");
	
	Если Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "CRM_НастройкиПользователей";
		ИмяПВХНастроек = "CRM_НастройкиПользователей";

	Иначе
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		СтруктураНастроек.ИспользоватьСофтФон = МенеджерЗаписи.Значение;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриВходящемЗвонке;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		СтруктураНастроек.ДействиеПриВходящемЗвонке = МенеджерЗаписи.Значение;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриИсходящемЗвонке;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		СтруктураНастроек.ДействиеПриИсходящемЗвонке = МенеджерЗаписи.Значение;
	КонецЕсли;

	Возврат СтруктураНастроек;

КонецФункции

&НаКлиенте
Процедура Подключаемый_сфпПоказатьПанельЗвонкаПриНажатии(Элемент) Экспорт

	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона", ИдентификаторЗвонка, ТекущийЗвонокКонтакт, ТекущийЗвонокНомерАбонента);
	    ОткрытьФорму("ОбщаяФорма.сфпПанельЗвонка", СтруктураЗвонка, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает регламентное задание
//
// Параметры:
//	ИмяЗадания	- Строка	- Имя регламентного задания
//
// Возвращаемое значение:
//	РегламентноеЗадание	- Регламентное задание
//
Функция сфпПолучитьРегламентноеЗадание(ИмяЗадания)
	
	НайденноеЗадание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
	Если НайденноеЗадание = Неопределено Тогда
		СтруктураОтбора = Новый Структура("Метаданные", ИмяЗадания);
		НайденныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
		Если НайденныеЗадания.Количество() > 0 Тогда
			НайденноеЗадание = НайденныеЗадания[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденноеЗадание;

КонецФункции // сфпПолучитьРегламентноеЗадание()

&НаСервереБезКонтекста
// Функция возвращает регламентное задание
//
// Параметры:
//	ИмяЗадания	- Строка	- Имя регламентного задания
//
// Возвращаемое значение:
//	РегламентноеЗадание	- Регламентное задание
//
Функция сфпПолучитьРасписаниеРегламентногоЗадания(ИмяЗадания)
	сфпЗадание = сфпПолучитьРегламентноеЗадание(ИмяЗадания);
	Если сфпЗадание = Неопределено Тогда
		Возврат Новый РасписаниеРегламентногоЗадания;
	Иначе	
	    Возврат сфпЗадание.Расписание;
	КонецЕсли;
КонецФункции // сфпПолучитьРегламентноеЗадание()

&НаСервереБезКонтекста
Процедура ЗаписатьЗначениеКонстанты(ИмяКонстанты, ЗначениеКонстанты)
	
	УстановитьПривилегированныйРежим(Истина);
	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСостоянияПодключенияОбсуждений(ОбсужденияПодключены = Неопределено)

	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		  Элементы.ПодключитьОтключитьОбсуждения.Заголовок = НСтр("ru = 'Отключить уведомления о телефонных звонках'");
	Иначе Элементы.ПодключитьОтключитьОбсуждения.Заголовок = НСтр("ru = 'Подключить уведомления о телефонных звонках'");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВнутреннийНомерНаСервере(Абонент, ВнутреннийНомер)
	
	МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Абонент;
	МенеджерЗаписи.ВнутреннийНомерАТС = ВнутреннийНомер;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторПеречисления(ЗначениеПеречисления)
	
	ТекПеречисление = Метаданные.Перечисления.сфпДоступныеАТС.ЗначенияПеречисления.Получить(Перечисления.сфпДоступныеАТС.Индекс(ЗначениеПеречисления));
	Возврат ТекПеречисление.Имя;
		
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьУдаленияВнутреннегоНомера(Доступность)
	
	Элементы.УдалитьВнутреннийНомер.Доступность = Доступность;
	Элементы.ПользователиТелефонииКонтекстноеМенюУдалитьВнутреннийНомер.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОператора(Команда = Неопределено)
	
	ТекДанные = Элементы.ТаблицаОператоров.ТекущиеДанные;
	
	Если Элементы.ТаблицаОператоров.ТекущийЭлемент.Имя = "ТаблицаОператоровСсылка" Тогда
		ПерейтиПоСсылке(ТекДанные.Ссылка);
		
	Иначе
		ИспользуемаяАТСДополнительно = "";
		
		Если ТекДанные.Идентификатор = "МобильнаяТелефония" Тогда
			ИспользуемаяАТС = ТекДанные.Идентификатор;
		
		Иначе
			ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС." + ТекДанные.Идентификатор);
			Если НЕ ЗначениеЗаполнено(ИспользуемаяАТС) Тогда
				ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.УниверсальныйItoolabs");
				ИспользуемаяАТСДополнительно = ТекДанные.Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьПовторноИспользуемыеЗначения();
		
		ПриВыбореАТС();
		
		ПрочитатьЗначенияНастроек();
		ПроверитьСтатусПодключения();
		ОбновитьАбонентовАТС();
		
		ВключитьОтключитьСофтФон("Включить");
		
		Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Гравител") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиАТС_ITooLabs[0].Значение) ИЛИ
				 НЕ ЗначениеЗаполнено(НастройкиАТС_ITooLabs[1].Значение) ИЛИ
				 НЕ ЗначениеЗаполнено(НастройкиАТС_ITooLabs[3].Значение) Тогда
				Элементы.ГруппаНастройкиАТС_ITooLabs_Параметры.Видимость = Ложь;
				Элементы.ГруппаАвтоНастройкиАТС_ITooLabs.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	УстановитьКонстантыСофтФон();
	
	// +CRM_РабочийСтол
	Если ЭтоКонфигурацияCRM Тогда
		ИмяЗначения = "Перечисление.CRM_РазделыНастройкиРешения.Телефония";
		ТекЗначение = ПредопределенноеЗначение(ИмяЗначения);
		
		РезультатВычисления = Вычислить("CRM_НачалоРаботыСПрограммойСервер.ЗаписатьНастроенныйРазделРешения(ТекЗначение)");
		Если РезультатВычисления Тогда
			Оповестить("ОбновитьНастроенныеРазделы");
			РезультатВычисления = Вычислить("CRM_РабочийСтолКлиент.ПереинициализироватьРабочийСтолКлиент()");
		КонецЕсли;
	КонецЕсли;
	// -CRM_РабочийСтол
	
	ЭтаФорма.Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоискаОператораПриИзменении(Элемент)
	
	Для Каждого ТекСтрока Из Объект.ТаблицаОператоров Цикл
		ТекСтрока.УдовлетворяетСтрокаПоиска = Ложь;
		
		Если НЕ ПустаяСтрока(ТекстПоискаОператора) Тогда
			Если Найти(ВРЕГ(ТекСтрока.Представление), ВРЕГ(ТекстПоискаОператора)) > 0 ИЛИ Найти(ВРЕГ(ТекСтрока.Ссылка), ВРЕГ(ТекстПоискаОператора)) > 0 Тогда
				ТекСтрока.УдовлетворяетСтрокаПоиска = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если ПустаяСтрока(ТекстПоискаОператора) Тогда
		Элементы.ТаблицаОператоров.ОтборСтрок = Неопределено;

	Иначе
		СтруктураОтбора = Новый Структура("УдовлетворяетСтрокаПоиска", Истина);
		Элементы.ТаблицаОператоров.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АТС_Itoolabs_АдресОблачнойАТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИспользуемаяАТС <> ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Гравител") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиАТС_ITooLabs_Параметры.Видимость = Ложь;
	Элементы.ГруппаАвтоНастройкиАТС_ITooLabs.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоподключениеITooLabs(Команда)
	
	ПродолжатьПодключение = Истина;
	
	Если НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
		Если НЕ ЗначениеЗаполнено(сфпАдресСервераПубликацииСервисовТелефонии) Тогда
			Если НЕ Элементы.ГруппаРедактированиеАдресаПубликации.Видимость Тогда
				Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
				Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
			КонецЕсли;

			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "сфпАдресСервераПубликацииСервисовТелефонии";
			Сообщение.Текст = "Не указан Адрес публикации 1С";
			Сообщение.Сообщить();
			
			ПродолжатьПодключение = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(сфпИмяПубликацииСервисовТелефонии) Тогда
			Если НЕ Элементы.ГруппаРедактированиеАдресаПубликации.Видимость Тогда
				Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
				Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
			КонецЕсли;
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "сфпИмяПубликацииСервисовТелефонии";
			Сообщение.Текст = "Не указано Имя публикации 1С";
			Сообщение.Сообщить();
			
			ПродолжатьПодключение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АвтоподпискаНаименование) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "АвтоподпискаНаименование";
		Сообщение.Текст = "Не указано наименование организации или контактного лица";
		Сообщение.Сообщить();
		
		ПродолжатьПодключение = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АвтоподпискаТелефон) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "АвтоподпискаТелефон";
		Сообщение.Текст = "Не указан контактный телефон";
		Сообщение.Сообщить();
		
		ПродолжатьПодключение = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АвтоподпискаЭлектронныйАдрес) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "АвтоподпискаЭлектронныйАдрес";
		Сообщение.Текст = "Не указан адрес электронной почты";
		Сообщение.Сообщить();
		
		ПродолжатьПодключение = Ложь;
	КонецЕсли;
	
	Если НЕ ПродолжатьПодключение Тогда
		Возврат;
	КонецЕсли;
	
	ТокенАвторизации = "" + Новый УникальныйИдентификатор();
	ПараметрыАвтоподписки = Новый Структура("Наименование,Телефон,ЭлектроннаяПочта,Токен", АвтоподпискаНаименование, АвтоподпискаТелефон, АвтоподпискаЭлектронныйАдрес, ТокенАвторизации);
	
	РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("Автоподписка",,,,,, ПараметрыАвтоподписки);
	Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.РезультатJSON) Тогда
		Если РезультатЗапроса.РезультатJSON.Свойство("url") И РезультатЗапроса.РезультатJSON.Свойство("token") Тогда
			НастройкиАТС_ITooLabs[0].Значение = РезультатЗапроса.РезультатJSON.url;
			ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_ITooLabs", 0);
			
			НастройкиАТС_ITooLabs[1].Значение = РезультатЗапроса.РезультатJSON.token;
			ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_ITooLabs", 1);
			
			НастройкиАТС_ITooLabs[3].Значение = ПараметрыАвтоподписки.Токен;
			ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_ITooLabs", 3);
			
			ПроверитьСтатусПодключения();
			
			Элементы.ГруппаНастройкиАТС_ITooLabs_Параметры.Видимость = Истина;
			Элементы.ГруппаАвтоНастройкиАТС_ITooLabs.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоподключениеITooLabs_Отмена(Команда)
	
	Элементы.ГруппаНастройкиАТС_ITooLabs_Параметры.Видимость = Истина;
	Элементы.ГруппаАвтоНастройкиАТС_ITooLabs.Видимость = Ложь;

КонецПроцедуры

#КонецОбласти 
