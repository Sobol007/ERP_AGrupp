#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользовательАдминистратор = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("сфпУправлениеМаршрутизацией");
	
	Если Метаданные.ЭлементыСтиля.Найти("CRM_ОсновнойГолубой") <> Неопределено Тогда
		ЦветФонаГиперссылки = Новый Цвет(163, 173, 187);
		ЦветФонаОсновнойКнопки = ЦветаСтиля["CRM_ОсновнойГолубой"];
		ЦветФонаВыбраннойГиперссылки = ЦветаСтиля["CRM_ОсновнойГолубой"];
		ЦветТекстаГиперссылки = ЦветаСтиля["CRM_ОсновнойГолубой"];
		ЦветТекстаКнопки = WebЦвета.Белый;
		ЦветТекстаВыбраннойГиперссылки = Новый Цвет(0, 160, 242);
		
	Иначе
		ЦветФонаГиперссылки = Новый Цвет();
		ЦветФонаОсновнойКнопки = Новый Цвет();
		ЦветФонаВыбраннойГиперссылки = ЦветаСтиля["ЦветГиперссылки"];
		ЦветТекстаГиперссылки = ЦветаСтиля["ЦветГиперссылки"];
		ЦветТекстаКнопки = Новый Цвет();
		ЦветТекстаВыбраннойГиперссылки = Новый Цвет();
	КонецЕсли;
	
	МассивДействийЗвонка = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ТекДействие Из МассивДействийЗвонка Цикл
		Элементы.НастройкаДействиеВходящийЗвонок.СписокВыбора.Добавить(ТекДействие.Наименование, ТекДействие.Наименование);
		Элементы.НастройкаДействиеИсходящийЗвонок.СписокВыбора.Добавить(ТекДействие.Наименование, ТекДействие.Наименование);
		
		Если ПустаяСтрока(ТекДействие.Действие) ИЛИ ТекДействие.Действие = "сфпОткрытьПанельЗвонка" Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияПоЗвонку.Добавить(ТекДействие.Действие, ТекДействие.Наименование);
	КонецЦикла;	
	
	ОбновитьКонтактыПанелиЗвонка();

	ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	ПринадлежностьЗвонка = 1;
	
	ТекущиеПодчиненныеПодразделения.ЗагрузитьЗначения(сфпСофтФонПроСерверПовтИсп.ПолучитьПодразделенияВКоторыхРуководитель(ТекущийПользователь));
	Если ТекущиеПодчиненныеПодразделения.Количество() = 0 Тогда
		Элементы.ГруппаФильтрЗвонковПоПринадлежности.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементыСпискаОтбора = ТелефонныеЗвонки.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ТекущийОтбор Из ЭлементыСпискаОтбора Цикл
		Если ТекущийОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если ТекущийОтбор.Представление = "Мои звонки" Тогда
				Для Каждого ЭлементГруппы Из ТекущийОтбор.Элементы Цикл
					ЭлементГруппы.ПравоеЗначение = ТекущийПользователь;
				КонецЦикла;

			ИначеЕсли ТекущийОтбор.Представление = "Мои подразделения" Тогда
				Для Каждого ЭлементГруппы Из ТекущийОтбор.Элементы Цикл
					ЭлементГруппы.ПравоеЗначение = ТекущиеПодчиненныеПодразделения;
				КонецЦикла;
			КонецЕсли;
        КонецЕсли;
	КонецЦикла;

	Элементы.ПринятьОбращение.Видимость = (Метаданные.Обработки.Найти("CRM_МастерРегистрацииОбращения") <> Неопределено);
	Элементы.СоздатьПоручение.Видимость = (Метаданные.Обработки.Найти("CRM_МастерФормированияПоручений") <> Неопределено);
	
	// +CRM
	// +Рабочий стол
	Если Метаданные.ОбщиеМодули.Найти("CRM_ОбщегоНазначенияПовтИсп") <> Неопределено Тогда
		МодульCRM_ОбщегоНазначенияПовтИсп = ОбщегоНазначения.ОбщийМодуль("CRM_ОбщегоНазначенияПовтИсп");
	КонецЕсли;
	Если Метаданные.ОбщиеМодули.Найти("CRM_СобытияФорм") <> Неопределено Тогда
		МодульCRM_СобытияФорм = ОбщегоНазначения.ОбщийМодуль("CRM_СобытияФорм");
		МодульCRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	СуществуетМодуль_CRM_СобытияФормКлиент = (Метаданные.ОбщиеМодули.Найти("CRM_СобытияФормКлиент") <> Неопределено);
	СуществуетМодуль_CRM_РабочийСтолКлиент = (Метаданные.ОбщиеМодули.Найти("CRM_РабочийСтолКлиент") <> Неопределено);
	// -Рабочий стол
	// -CRM

КонецПроцедуры	//	ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЛиниюПользователя();
		
	ФильтрЗвонковПоВиду("Все", Ложь);
	ФильтрЗвонковПоПериоду("Сегодня");
	
	ОтобразатьКонтактыНомеронабиратель(Истина);

	ПроверитьНеобходимостьНастройки();
	
	ТекГруппировка = АбонентыТелефонныхКниг.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ТекГруппировка.Использование = Истина;
	ТекГруппировка.Поле = Новый ПолеКомпоновкиДанных("ТелефоннаяКнига");
	
	Если ТребуетсяНастройка И ТекущийПользовательАдминистратор Тогда
		НастройкиТелефонииОбщии();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьНастройки()
	
	ТребуетсяНастройка = сфпСофтФонПроСервер.сфпТребуетсяНастройкаТелефонии();
	
	Элементы.ГруппаФильтрЗвонковПоПринадлежности.Доступность = НЕ ТребуетсяНастройка;
	Элементы.ДополнениеТелефонныеЗвонкиСтрокаПоиска.Доступность = НЕ ТребуетсяНастройка;
	Элементы.ПринятьОбращение.Доступность = НЕ ТребуетсяНастройка;
	Элементы.ПрослушатьЗапись.Доступность = НЕ ТребуетсяНастройка;
	Элементы.СоздатьПоручение.Доступность = НЕ ТребуетсяНастройка;
	Элементы.СформироватьОтчет.Доступность = НЕ ТребуетсяНастройка;
	
	Элементы.ГруппаЗвонкиПанель.Видимость = НЕ ТребуетсяНастройка;
	Элементы.ДекорацияНеобходимостьНастройки.Видимость = ТребуетсяНастройка;
	
	Если ТекущийПользовательАдминистратор Тогда
		Элементы.ДекорацияНеобходимостьНастройки.Заголовок = "Необходимо выполнить настройку телефонии.";

	Иначе	
		Элементы.ДекорацияНеобходимостьНастройки.Заголовок = "Для настройки телефонии обратитесь к администратору.";
		Элементы.НастройкиТелефонииОбщии.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЛиниюПользователя()
	
	ЗаголовокСтатуса = "Нет линии";

	ВнутреннийНомер = сфпСофтФонПроСервер.ПолучитьВнутреннийНомерПоПользователю(ТекущийПользователь);
	Если ЗначениеЗаполнено(ВнутреннийНомер) Тогда
		ЗаголовокСтатуса = "Линия " + ВнутреннийНомер;
	КонецЕсли;
	
	Элементы.КартинкаСтатусЛинииОнлайн.Видимость = НЕ ТребуетсяНастройка;
	Элементы.КартинкаСтатусЛинииОфлайн.Видимость = ТребуетсяНастройка;
		
	Элементы.ДекорацияСтатусТекущегоПодключения.Заголовок = ЗаголовокСтатуса;
	
	ДоступностьКомандAPI = сфпСофтФонПроСервер.ПолучитьДоступностьКомандAPI();
	ДоступностьКомандAPI_Ответ = ДоступностьКомандAPI.Ответ;
	ДоступностьКомандAPI_Завершить = ДоступностьКомандAPI.Завершить;
	ДоступностьКомандAPI_Пауза = ДоступностьКомандAPI.Пауза;
	ДоступностьКомандAPI_Перевод = ДоступностьКомандAPI.Перевод;

КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактыПанелиЗвонка()
	сфпСофтФонПроСервер.ОбновитьКонтактыПанелиЗвонка(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	сфпСофтФонПроКлиент.ОбработкаОповещенияПанелиЗвонка(ЭтаФорма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТелефонныеЗвонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииФормыТелефонногоЗвонка", ЭтаФорма);
		//ПоказатьЗначение(Оповещение, ТекДанные.Ссылка);
		ПараметрыФормы = Новый Структура("Ключ", ТекДанные.Ссылка);
		ОткрытьФорму("Документ.ТелефонныйЗвонок.Форма.сфпФормаДокумента", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыТелефонногоЗвонка(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Элементы.ТелефонныеЗвонки.Обновить();
КонецПроцедуры

#Область СписокТелефонныхЗвонков

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.Добавить("сфпЕженедельныйОтчет", "Еженедельный отчет по звонкам");
	СписокВыбора.Добавить("сфпОтчетПоВсемЗвонкам", "Отчет по всем звонкам");
	СписокВыбора.Добавить("сфпОтчетПоПропущеннымЗвонкам", "Отчет по пропущенным звонкам");
	СписокВыбора.Добавить("сфпОтчетПоСовершеннымЗвонкам", "Отчёт по совершенным звонкам");
	
	Оповещение = Новый ОписаниеОповещения("СформироватьОтчетПродолжить", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.СформироватьОтчет);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПродолжить(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПараметрыФормы = Новый Структура();
		//ПараметрыФормы.Вставить("Отбор", Новый Структура("Клиент", СтруктураЗвонка.Контакт));
		//ПараметрыФормы.Вставить("КлючВарианта",	"ПоКлиентам");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
		ОткрытьФорму("Отчет." + ВыбранныйЭлемент.Значение + ".Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЗвонков(НачалоПериода, КонецПериода, Пользователь = Неопределено, Подразделения = Неопределено)
	
	ТекстУсловия = "";
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстУсловия = ТекстУсловия + " И Дата МЕЖДУ &НачалоПериода И &КонецПериода";
		
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
		ТекстУсловия = ТекстУсловия + " И Дата >= &НачалоПериода";

	ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстУсловия = ТекстУсловия + " И Дата <= КонецПериода";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ТекстУсловия = ТекстУсловия + " И (Автор = &Пользователь ИЛИ Ответственный = &Пользователь)";	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделения) И ТипЗнч(Подразделения) = Тип("Массив") Тогда
		ТекстУсловия = ТекстУсловия + " И (Автор.Подразделение В ИЕРАРХИИ(&Подразделения) ИЛИ Ответственный.Подразделение В ИЕРАРХИИ(&Подразделения))";	
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ВсеЗвонки) КАК ВсеЗвонки,
	|   СУММА(Входящие) КАК Входящие,
	|	СУММА(Исходящие) КАК Исходящие,
	|	СУММА(Пропущенные) КАК Пропущенные
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВсеЗвонки,
	|		ВЫБОР КОГДА Входящий ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Входящие,
	|		ВЫБОР КОГДА Входящий ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК Исходящие,
	|		ВЫБОР КОГДА Входящий И сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Пропущенные
	|	ИЗ
	|		Документ.ТелефонныйЗвонок
	|	ГДЕ
	|		НЕ ПометкаУдаления" + ТекстУсловия + ") КАК Подзапрос");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВсегоЗвонков = ?(Выборка.ВсеЗвонки = Null, 0, Выборка.ВсеЗвонки);
		ВсегоВходящих = ?(Выборка.Входящие = Null, 0, Выборка.Входящие);
		ВсегоИсходящих = ?(Выборка.Исходящие = Null, 0, Выборка.Исходящие);
		ВсегоПропущенных = ?(Выборка.Пропущенные = Null, 0, Выборка.Пропущенные);
		
	Иначе
		ВсегоЗвонков = 0;
		ВсегоВходящих = 0;
		ВсегоИсходящих = 0;
		ВсегоПропущенных = 0;
	КонецЕсли;	
	
	Возврат Новый Структура("Все,Входящие,Исходящие,Пропущенные", ВсегоЗвонков, ВсегоВходящих, ВсегоИсходящих, ВсегоПропущенных);

КонецФункции

&НаКлиенте
Процедура ОбновитьКоличествоЗвонков() Экспорт
	
	ПользовательЗвонков = Неопределено;
	ПодразделенияЗвонка = Неопределено;
	
	Если ПринадлежностьЗвонка = 1 Тогда
		ПользовательЗвонков = ТекущийПользователь;

	ИначеЕсли ПринадлежностьЗвонка = 2 Тогда
		ПодразделенияЗвонка = ТекущиеПодчиненныеПодразделения.ВыгрузитьЗначения();

	Иначе
		ПользовательЗвонков = ТекущийПользователь;
		ПодразделенияЗвонка = ТекущиеПодчиненныеПодразделения.ВыгрузитьЗначения();
	КонецЕсли;
	
	КоличествоЗвонков = ПолучитьКоличествоЗвонков(НачалоПериодаЗвонков, КонецПериодаЗвонков, ПользовательЗвонков, ПодразделенияЗвонка);
	ПроцентВходящих = ?(КоличествоЗвонков.Все = 0, 0, ЦЕЛ(КоличествоЗвонков.Входящие/КоличествоЗвонков.Все*100));
	ПроцентИсходящих = ?(КоличествоЗвонков.Все = 0, 0, ЦЕЛ(КоличествоЗвонков.Исходящие/КоличествоЗвонков.Все*100));
	ПроцентПропущенных = ?(КоличествоЗвонков.Все = 0, 0, ЦЕЛ(КоличествоЗвонков.Пропущенные/КоличествоЗвонков.Все*100));
	
	Элементы.ФильтрЗвонковПоВидуВсе.Заголовок = "Все: " + КоличествоЗвонков.Все + " (100%)";
	Элементы.ФильтрЗвонковПоВидуВходящие.Заголовок = "Входящие: " + КоличествоЗвонков.Входящие + " (" + ПроцентВходящих + "%)";
	Элементы.ФильтрЗвонковПоВидуИсходящие.Заголовок = "Исходящие: " + КоличествоЗвонков.Исходящие + " (" + ПроцентИсходящих + "%)";
	Элементы.ФильтрЗвонковПоВидуПропущенные.Заголовок = "Пропущенные: " + КоличествоЗвонков.Пропущенные + " (" + ПроцентПропущенных + "%)";
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает текущие отборы списка Телефонных звонков
//
// Параметры:
//	Нет.
//
Процедура УстановитьОтборыТелефонныхЗвонков()
	
    ЭлементыСпискаОтбора = ТелефонныеЗвонки.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ТекущийОтбор Из ЭлементыСпискаОтбора Цикл
		Если ТекущийОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если ТекущийОтбор.Представление = "Входящие" Тогда
				Если ТекущийФильтрЗвонков = "Входящие" Тогда
					ТекущийОтбор.Использование = Истина;
				ИначеЕсли ТекущийФильтрЗвонков = "Пропущенные" Тогда
					ТекущийОтбор.Использование = Истина;
				Иначе
		            ТекущийОтбор.Использование = Ложь;
				КонецЕсли;

			ИначеЕсли ТекущийОтбор.Представление = "Исходящие" Тогда
				Если ТекущийФильтрЗвонков = "Исходящие" Тогда
					ТекущийОтбор.Использование = Истина;
			    ИначеЕсли ТекущийФильтрЗвонков = "Не дозвонились" Тогда
					ТекущийОтбор.Использование = Истина;
				Иначе
		            ТекущийОтбор.Использование = Ложь;
				КонецЕсли;

			ИначеЕсли ТекущийОтбор.Представление = "Отвеченные" Тогда
				Если ТекущийФильтрЗвонков = "Отвеченные" Тогда
					ТекущийОтбор.Использование = Истина;
				Иначе
		            ТекущийОтбор.Использование = Ложь;
				КонецЕсли;

			ИначеЕсли ТекущийОтбор.Представление = "Пропущенные" Тогда
				Если ТекущийФильтрЗвонков = "Пропущенные" Тогда
					ТекущийОтбор.Использование	= Истина;
			    ИначеЕсли ТекущийФильтрЗвонков = "Не дозвонились" Тогда
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;
				
			ИначеЕсли ТекущийОтбор.Представление = "Период звонков" Тогда
				Если НЕ ПустаяСтрока(ТекущийПериодЗвонков) Тогда
					Если НЕ ЗначениеЗаполнено(НачалоПериодаЗвонков) И НЕ ЗначениеЗаполнено(КонецПериодаЗвонков) Тогда
						ТекущийОтбор.Использование = Ложь;

					Иначе	
						ТекущийОтбор.Использование = Истина;
						
						Для Каждого ЭлементГруппы Из ТекущийОтбор.Элементы Цикл
							Если ЭлементГруппы.Представление = "Начало периода" Тогда
								ЭлементГруппы.ПравоеЗначение = НачалоПериодаЗвонков;
								ЭлементГруппы.Использование = ЗначениеЗаполнено(НачалоПериодаЗвонков);

							ИначеЕсли ЭлементГруппы.Представление = "Конец периода" Тогда
								ЭлементГруппы.ПравоеЗначение = КонецПериодаЗвонков;
								ЭлементГруппы.Использование = ЗначениеЗаполнено(КонецПериодаЗвонков);
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;	
					
				Иначе
		            ТекущийОтбор.Использование = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТекущийОтбор.Представление = "Мои звонки" Тогда
				Если ПринадлежностьЗвонка = 2 Тогда
					ТекущийОтбор.Использование = Ложь;
				Иначе
					ТекущийОтбор.Использование = Истина;
				КонецЕсли;

			ИначеЕсли ТекущийОтбор.Представление = "Мои подразделения" Тогда
				Если ПринадлежностьЗвонка = 1 Тогда
					ТекущийОтбор.Использование = Ложь;
				Иначе
					ТекущийОтбор.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьОтборыТелефонныхЗвонков()

&НаКлиенте
Процедура ТелефонныеЗвонкиПриАктивизацииСтроки(Элемент = Неопределено)
	
	ДоступнаЗаписьРазговора = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) И ПустаяСтрока(НабранныйНомер) Тогда
		ДоступенНаборНомераДокумента = Ложь;
		ТекущийЗвонокНомерАбонента = "";
		ТекущийЗвонокПредставлениеКонтакта = "";
		ТекущийЗвонокВладелецКонтакта = "";
		ТекущийЭлементДанныхКонтакта = "";
			
		ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ДоступнаЗаписьРазговора = ЗначениеЗаполнено(ТекДанные.сфпИдентификаторЗаписи);
			ДоступенНаборНомераДокумента = ЗначениеЗаполнено(ТекДанные.АбонентКакСвязаться);
			ТекущийЗвонокНомерАбонента = ТекДанные.АбонентКакСвязаться;
			ТекущийЗвонокПредставлениеКонтакта = ТекДанные.АбонентКонтакт;
			ТекущийЗвонокВладелецКонтакта = ТекДанные.Клиент;
			ТекущийЭлементДанныхКонтакта = Элементы.ТелефонныеЗвонки.Имя;
		КонецЕсли;
		
		Если ТекДанные = Неопределено И Элементы.АбонентыТелефонныхКниг.ТекущиеДанные <> Неопределено Тогда
			АбонентыТелефонныхКнигПриАктивизацииСтроки();
			
		Иначе
			сфпСофтФонПроКлиент.УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма, ТекДанные <> Неопределено);
		КонецЕсли;
	КонецЕсли;

	Элементы.ПрослушатьЗапись.Доступность = ДоступнаЗаписьРазговора;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура АбонентыТелефонныхКнигВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		НастроитьОтображениеКонтактов("Развернуть", ВыбраннаяСтрока.Ключ);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		ПоднятьТрубку();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АбонентыТелефонныхКнигПриАктивизацииСтроки(Элемент = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) И Элементы.СтраницыКонтактыНомеронабиратель.ТекущаяСтраница = Элементы.СтраницаКонтакты Тогда
		ДоступенНаборНомераДокумента = Ложь;
		
		ТекДанные = Элементы.АбонентыТелефонныхКниг.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если НЕ ТекДанные.Свойство("ГруппировкаСтроки") И ЗначениеЗаполнено(ТекДанные.НомерТелефона) Тогда
				ТекущийЗвонокНомерАбонента = ТекДанные.НомерТелефона;
				ДоступенНаборНомераДокумента = ЗначениеЗаполнено(ТекДанные.НомерТелефона);
				ТекущийЗвонокПредставлениеКонтакта = ТекДанные.Контакт;
				ТекущийЗвонокВладелецКонтакта = ТекДанные.Владелец;
				ТекущийЭлементДанныхКонтакта = Элементы.АбонентыТелефонныхКниг.Имя;

			Иначе
				ТекущийЗвонокНомерАбонента = "";
				ТекущийЗвонокПредставлениеКонтакта = "";
				ТекущийЗвонокВладелецКонтакта = "";
				ТекущийЭлементДанныхКонтакта = "";
			КонецЕсли;	
		КонецЕсли;
		
		Если (ТекДанные = Неопределено ИЛИ ТекДанные.Свойство("ГруппировкаСтроки")) И Элементы.ТелефонныеЗвонки.ТекущиеДанные <> Неопределено Тогда
			ТелефонныеЗвонкиПриАктивизацииСтроки();
			
		Иначе
			сфпСофтФонПроКлиент.УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма, ТекДанные <> Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АбонентыТелефонныхКнигПередРазворачиванием(Элемент, Строка, Отказ)
	
	Отказ = Истина;
	НастроитьОтображениеКонтактов("Развернуть", Строка.Ключ);

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ПанельЗвонков

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	
	СтруктураЗвонка = Новый Структура();
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона",
			ИдентификаторЗвонка, ТекущийЗвонокКонтакт, ТекущийЗвонокНомерАбонента);
		
	Иначе
		ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона,НовыйЗвонок",
				ТекДанные.сфпИдентификаторЗвонка, ТекДанные.АбонентКонтакт, ТекДанные.АбонентКакСвязаться, ТекДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЗвонка.Свойство("ИдентификаторЗвонка") Тогда
		сфпСофтФонПроКлиентПереопределяемый.сфпРегистрацияОбращения(СтруктураЗвонка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрослушатьЗапись(Команда)
	
	ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПараметрыЗвонка = Новый Структура("ИдентификаторЗвонка, ИдентификаторЗаписи, Ответственный, ДатаНачала, НомерТелефона, ВнутреннийНомер",
			ТекДанные.сфпИдентификаторЗвонка, ТекДанные.сфпИдентификаторЗаписи, ТекДанные.Ответственный, ТекДанные.Дата, ТекДанные.АбонентКакСвязаться, ТекДанные.ВнутреннийНомер);
		сфпСофтФонПроКлиент.НачатьПрослушиваниеЗаписиРазговора(ПараметрыЗвонка, ЭтаФорма, Элементы.ПрослушатьЗапись);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	МассивОбъектов = Новый Массив();
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		МассивОбъектов.Добавить(ТекущийЗвонок);
		
	Иначе	
		ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			МассивОбъектов.Добавить(ТекДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяТаблицы", сфпСофтФонПроСервер.сфпИмяДокументаТелефонныйЗвонок());
	ПараметрыФормы.Вставить("МассивОбъектов", МассивОбъектов);
	
	ФормаМастера = "Обработка.CRM_МастерФормированияПоручений.Форма";
	ОткрытьФорму(ФормаМастера, ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиТелефонииПерсональные(Команда)

	ПерсональныеНастройки = ПолучитьНастройкиНаСервере();
	НастройкаИспользоватьСофтФон = ПерсональныеНастройки.ИспользоватьСофтФон;
	НастройкаДействиеВходящийЗвонок = ПерсональныеНастройки.ДействиеПриВходящемЗвонке;
	НастройкаДействиеИсходящийЗвонок = ПерсональныеНастройки.ДействиеПриИсходящемЗвонке;
	
	Элементы.СтраницыПанель.ТекущаяСтраница = Элементы.СтраницаПерсональныеНастройки;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДействие(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПриВыбореДействияПоЗвонку", ЭтаФорма);
	ПоказатьВыборИзМеню(Оповещение, ДействияПоЗвонку, Элементы.ВыбратьДействиеДа);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореДействияПоЗвонку(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		СтруктураЗвонка = Новый Структура();
		Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
			СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона",
				ИдентификаторЗвонка, ТекущийЗвонокКонтакт, ТекущийЗвонокНомерАбонента);
			
		Иначе
			ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				МассивЗвонящих = Новый Массив();
				МассивЗвонящих.Добавить(ТекДанные.АбонентКонтакт);
				
				СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона,НовыйЗвонок,МассивЗвонящих",
					ТекДанные.сфпИдентификаторЗвонка, ТекДанные.АбонентКонтакт, ТекДанные.АбонентКакСвязаться, ТекДанные.Ссылка, МассивЗвонящих);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураЗвонка.Свойство("ИдентификаторЗвонка") Тогда
			ИндексДействия = 2 + ДействияПоЗвонку.Индекс(ВыбранныйЭлемент);
			сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьДоступноеДействие(ИндексДействия, СтруктураЗвонка);
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)

	СохранитьНастройкиНаСервере(НастройкаИспользоватьСофтФон, НастройкаДействиеВходящийЗвонок, НастройкаДействиеИсходящийЗвонок);
	
	Элементы.СтраницыПанель.ТекущаяСтраница = Элементы.СтраницаПанельЗвонка;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНастройки(Команда)
	Элементы.СтраницыПанель.ТекущаяСтраница = Элементы.СтраницаПанельЗвонка;
КонецПроцедуры

&НаКлиенте
Процедура ПоднятьТрубку(Команда = Неопределено)
	
	СтруктураЗвонка = Новый Структура("НомераТелефонов,АбонентКонтакт,ДанныеЗаполнения,ИдентификаторЗвонка", Новый СписокЗначений());
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		Если ЗначениеЗаполнено(НабранныйНомер) Тогда
			СтруктураЗвонка.НомераТелефонов.Добавить(НабранныйНомер);
			НабранныйНомер = "";
		КонецЕсли;
	
	Иначе	
		Если ЗначениеЗаполнено(НабранныйНомер) Тогда
			СтруктураЗвонка.НомераТелефонов.Добавить(НабранныйНомер);
			НабранныйНомер = "";
			
		ИначеЕсли ТекущийЭлементДанныхКонтакта = "ТелефонныеЗвонки" Тогда
			ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				Если ЗначениеЗаполнено(ТекДанные.АбонентКакСвязаться) Тогда
					СтруктураЗвонка.НомераТелефонов.Добавить(ТекДанные.АбонентКакСвязаться);
					СтруктураЗвонка.АбонентКонтакт = ТекДанные.АбонентКонтакт;
					СтруктураЗвонка.ДанныеЗаполнения = Новый Структура("ВзаимодействиеОснование", ТекДанные.Ссылка);
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ТекущийЭлементДанныхКонтакта = "АбонентыТелефонныхКниг" Тогда
			ТекДанные = Элементы.АбонентыТелефонныхКниг.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				Если ЗначениеЗаполнено(ТекДанные.НомерТелефона) Тогда
					СтруктураЗвонка.АбонентКонтакт = ТекДанные.Контакт;
						
					ТелефоныКонтакта = сфпСофтФонПроСервер.сфпПолучитьМассивТелефоновИФаксов(ТекДанные.Контакт);
					Для Каждого Телефон Из ТелефоныКонтакта Цикл
						СтруктураЗвонка.НомераТелефонов.Добавить(Телефон.Представление, СокрЛП(Телефон.Вид) + ": " + Телефон.Представление);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЗвонка.НомераТелефонов.Количество() > 0 Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.АбонентКонтакт) Тогда
			ГолыйНомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(СтруктураЗвонка.НомераТелефонов[0].Значение);
			МассивЗвонящих = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(ГолыйНомерТелефона);
			Если МассивЗвонящих.Количество() > 0 Тогда
				СтруктураЗвонка.АбонентКонтакт = МассивЗвонящих[0];
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
			Если ТекущийЗвонокДлительность = '00010101' Тогда
				РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, СтруктураЗвонка.НомераТелефонов[0].Значение, ВнутреннийНомер, Истина);
				
			Иначе
				РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводОтвеченногоЗвонка", ИдентификаторЗвонка, СтруктураЗвонка.НомераТелефонов[0].Значение, ВнутреннийНомер, Истина);
			КонецЕсли;
			
		Иначе	
			Если СтруктураЗвонка.НомераТелефонов.Количество() > 0 Тогда
				Если СтруктураЗвонка.НомераТелефонов.Количество() > 1 Тогда
					Оповещение = Новый ОписаниеОповещения("ПриВыбореНомера", ЭтаФорма, СтруктураЗвонка);
					ПоказатьВыборИзМеню(Оповещение, СтруктураЗвонка.НомераТелефонов);
					
				Иначе
					ПриВыбореНомера(СтруктураЗвонка.НомераТелефонов[0], СтруктураЗвонка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореНомера(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("НомерТелефона", ВыбранныйЭлемент.Значение);
		Если сфпСофтФонПроКлиент.сфпПозвонить(ВыбранныйЭлемент.Значение, ДополнительныеПараметры.АбонентКонтакт, ДополнительныеПараметры.ДанныеЗаполнения) Тогда
			//сфпСофтФонПроКлиент.ОбработкаОповещенияПанелиЗвонка(ЭтаФорма, "сфпНовыйИсходящийЗвонок", ДополнительныеПараметры, ЭтаФорма);

		Иначе
		    ТекущийЗвонокНомерАбонента = "";
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПоложитьТрубку(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ЗавершениеВызова", ИдентификаторЗвонка);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЗвонок(Команда)
	
	ПоказатьНомеронабиратель();
	ЭтаФорма.ТекущийЭлемент = Элементы.НабранныйНомер;

КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПеревод(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(НабранныйНомер) Тогда
		Если ТекущийЗвонокДлительность = '00010101' Тогда
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводНеотвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Ложь);
			
		Иначе
			РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводОтвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Ложь);
		КонецЕсли;
		
		Если РезультатЗапроса.Успешно Тогда
			НабранныйНомер = "";
			Элементы.ДекорацияПодтвердитьПеревод.Видимость = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомеронабирательНабрать(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) И ЗначениеЗаполнено(НабранныйНомер) Тогда
		//РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводЗвонка", ИдентификаторЗвонка, НабранныйНомер);
		РезультатЗапроса = сфпЛицензированиеСервер.ВыполнитьЗапросОблачнойАТС("ПереводОтвеченногоЗвонка", ИдентификаторЗвонка, НабранныйНомер, ВнутреннийНомер, Истина);
		Если РезультатЗапроса.Успешно Тогда
			НабранныйНомер = "";
			Элементы.НомеронабирательНабрать.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразатьКонтактыНомеронабиратель(ПоказатьКонтакты)
	
	Элементы.ПоказатьКонтакты.ЦветФона = ?(ПоказатьКонтакты, ЦветФонаВыбраннойГиперссылки, ЦветФонаГиперссылки);
	Элементы.ПоказатьКонтакты.ЦветТекста = ?(ПоказатьКонтакты, ЦветТекстаКнопки, ЦветТекстаКнопки);
	
	Элементы.ПоказатьНомеронабиратель.ЦветФона = ?(НЕ ПоказатьКонтакты, ЦветФонаВыбраннойГиперссылки, ЦветФонаГиперссылки);
	Элементы.ПоказатьНомеронабиратель.ЦветТекста = ?(НЕ ПоказатьКонтакты, ЦветТекстаКнопки, ЦветТекстаКнопки);
		
	Элементы.ПоказатьНомеронабиратель.Картинка = ?(ПоказатьКонтакты, БиблиотекаКартинок.сфпПанельЗвонка_НомеронабирательНет, БиблиотекаКартинок.сфпПанельЗвонка_НомеронабирательДа);
	
	Элементы.СтраницыКонтактыНомеронабиратель.ТекущаяСтраница = ?(ПоказатьКонтакты, Элементы.СтраницаКонтакты, Элементы.СтраницаНомеронабиратель);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтакты(Команда)
	ОтобразатьКонтактыНомеронабиратель(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНомеронабиратель(Команда = Неопределено)
	ОтобразатьКонтактыНомеронабиратель(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НомеронабирательПриВводеНомера(ВведенныйНомер = Неопределено)
	
	Если ВведенныйНомер = Неопределено Тогда
		ИмяЭлемента = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя, "Номеронабиратель", "");
		Если ИмяЭлемента = "Символ1" Тогда
			ВведенноеЗначение = "*";

		ИначеЕсли ИмяЭлемента = "Символ2" Тогда
			ВведенноеЗначение = "#";

		Иначе
			ВведенноеЗначение = Число(ИмяЭлемента);
		КонецЕсли;
	
		НабранныйНомер = НабранныйНомер + ВведенноеЗначение;
		ВведенныйНомер = НабранныйНомер;
		
	Иначе
		//НабранныйНомер = Элементы.НабранныйНомер.ВыделенныйТекст;
		//НабранныйНомер = Элементы.НабранныйНомер.ТекстРедактирования;
		//НабранныйНомер = ВведенныйНомер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		Если НЕ Элементы.ДекорацияПодтвердитьПеревод.Видимость Тогда
			//Элементы.НомеронабирательНабрать.Видимость = Истина;
			Элементы.ДекорацияПодтвердитьПеревод.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		ТекДанные = Элементы.ТелефонныеЗвонки.ТекущиеДанные;
		
		//ТекущийЗвонокПредставлениеКонтакта = "";
		//ТекущийЗвонокВладелецКонтакта = "";
		//ТекущийЗвонокНомерАбонента = ВведенныйНомер;
			
		Если ПустаяСтрока(ВведенныйНомер) И Элементы.ДекорацияОтветДа.Видимость И ТекДанные = Неопределено Тогда
			Элементы.ДекорацияОтветНет.Видимость = Истина;
			Элементы.ДекорацияОтветДа.Видимость = Ложь;
			
		ИначеЕсли НЕ Элементы.ДекорацияОтветДа.Видимость Тогда
			Элементы.ДекорацияОтветНет.Видимость = Ложь;
			Элементы.ДекорацияОтветДа.Видимость = Истина;
		КонецЕсли;

		Элементы.НомеронабирательНабрать.Видимость = Ложь;
		Элементы.ДекорацияПодтвердитьПеревод.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомеронабирательНажатие(Команда)
	НомеронабирательПриВводеНомера();
КонецПроцедуры

&НаКлиенте
Процедура НомеронабирательУдалитьНажатие(Элемент)
	
	НабранныйНомер = Лев(НабранныйНомер, СтрДлина(НабранныйНомер) - 1);
	
	НомеронабирательПриВводеНомера(НабранныйНомер);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) И ПустаяСтрока(НабранныйНомер) Тогда
		ТелефонныеЗвонкиПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НабранныйНомерПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		ТекущийЗвонокПредставлениеКонтакта = "";
		ТекущийЗвонокВладелецКонтакта = "";
		ТекущийЗвонокНомерАбонента = НабранныйНомер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НабранныйНомерИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомеронабирательПриВводеНомера(Элементы.НабранныйНомер.ТекстРедактирования);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка() Экспорт
	ТекущийЗвонокДлительность = '00010101' + (ТекущаяДата() - ТекущийЗвонокНачалоРазговора);	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НастройкиТелефонииОбщии(Команда = Неопределено)
	
	Оповещение = Новый ОписаниеОповещения("НастройкиТелефонииОбщииПриЗакрытии", ЭтаФорма);
	ОткрытьФорму("Обработка.сфпАРМ_Телефония.Форма.ФормаНастройки",, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТелефонииОбщииПриЗакрытии(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПроверитьНеобходимостьНастройки();
	ОбновитьЛиниюПользователя();

	Если РезультатЗакрытия = Истина Тогда
		ОбновитьКонтактыПанелиЗвонка();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдержаниеЗвонка(Команда)
	
	// Зарезервировано на будущее
	РазрешенаПауза = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСлужебныеСимволы(Строка)
	
	Строка = СтрЗаменить(Строка, Символы.ПС, "");
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка, "¶", "");
	
КонецПроцедуры

// +CRM
// +Рабочий cтол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	Если СуществуетМодуль_CRM_СобытияФормКлиент Тогда
		МодульCRM_СобытияФормКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_СобытияФормКлиент");
		МодульCRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	КонецЕсли;

КонецПроцедуры	//	Подключаемый_ВыполнитьПереопределяемуюКоманду()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если СуществуетМодуль_CRM_РабочийСтолКлиент Тогда
		МодульCRM_РабочийСтолКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_РабочийСтолКлиент");
		МодульCRM_РабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если СуществуетМодуль_CRM_РабочийСтолКлиент Тогда
		МодульCRM_РабочийСтолКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_РабочийСтолКлиент");
		МодульCRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий cтол
// -CRM

&НаСервереБезКонтекста
Процедура НастроитьИспользованиеСофтФонаПользователям(МассивПользователей, ИспользоватьСофтФон)
	
	Если Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "CRM_НастройкиПользователей";
		ИмяПВХНастроек = "CRM_НастройкиПользователей";

	Иначе
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";
	КонецЕсли;
		
	Для Каждого ТекПользователь Из МассивПользователей Цикл
		МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
		МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
		МенеджерЗаписи.Значение = ИспользоватьСофтФон;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(ИспользоватьСофтФон, ДействиеВходящийЗвонок, ДействиеИсходящийЗвонок)

	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	
	Если Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "CRM_НастройкиПользователей";
		ИмяПВХНастроек = "CRM_НастройкиПользователей";

	Иначе
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
	МенеджерЗаписи.Значение = ИспользоватьСофтФон;
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриВходящемЗвонке;
	МенеджерЗаписи.Значение = ДействиеВходящийЗвонок;
	МенеджерЗаписи.Записать();
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриИсходящемЗвонке;
	МенеджерЗаписи.Значение = ДействиеИсходящийЗвонок;
	МенеджерЗаписи.Записать();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиНаСервере()

	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	
	СтруктураНастроек = Новый Структура("ИспользоватьСофтФон,ДействиеПриВходящемЗвонке,ДействиеПриИсходящемЗвонке", Ложь, "", "");
	
	Если Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "CRM_НастройкиПользователей";
		ИмяПВХНастроек = "CRM_НастройкиПользователей";

	Иначе
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		СтруктураНастроек.ИспользоватьСофтФон = МенеджерЗаписи.Значение;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриВходящемЗвонке;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		СтруктураНастроек.ДействиеПриВходящемЗвонке = МенеджерЗаписи.Значение;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриИсходящемЗвонке;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		СтруктураНастроек.ДействиеПриИсходящемЗвонке = МенеджерЗаписи.Значение;
	КонецЕсли;

	Возврат СтруктураНастроек;

КонецФункции

&НаКлиенте
Процедура Подключаемый_сфпПоказатьПанельЗвонкаПриНажатии(Элемент) Экспорт

	Если ЗначениеЗаполнено(ИдентификаторЗвонка) Тогда
		СтруктураЗвонка = Новый Структура("ИдентификаторЗвонка,Контакт,НомерТелефона", ИдентификаторЗвонка, ТекущийЗвонокКонтакт, ТекущийЗвонокНомерАбонента);
	    ОткрытьФорму("ОбщаяФорма.сфпПанельЗвонка", СтруктураЗвонка, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПоВиду(Фильтр, УстановитьОтбор = Истина)
	
	ТекущийФильтрЗвонков = Фильтр;
	
	Элементы.ФильтрЗвонковПоВидуПропущенные.ЦветФона = ?(ТекущийФильтрЗвонков = "Пропущенные", ЦветФонаВыбраннойГиперссылки, ЦветФонаГиперссылки);
	Элементы.ФильтрЗвонковПоВидуПропущенные.ЦветТекста = ?(ТекущийФильтрЗвонков = "Пропущенные", ЦветТекстаКнопки, ЦветТекстаКнопки);
	
	Элементы.ФильтрЗвонковПоВидуВходящие.ЦветФона = ?(ТекущийФильтрЗвонков = "Входящие", ЦветФонаВыбраннойГиперссылки, ЦветФонаГиперссылки);
	Элементы.ФильтрЗвонковПоВидуВходящие.ЦветТекста = ?(ТекущийФильтрЗвонков = "Входящие", ЦветТекстаКнопки, ЦветТекстаКнопки);
	
	Элементы.ФильтрЗвонковПоВидуИсходящие.ЦветФона = ?(ТекущийФильтрЗвонков = "Исходящие", ЦветФонаВыбраннойГиперссылки, ЦветФонаГиперссылки);
	Элементы.ФильтрЗвонковПоВидуИсходящие.ЦветТекста = ?(ТекущийФильтрЗвонков = "Исходящие", ЦветТекстаКнопки, ЦветТекстаКнопки);
	
	Элементы.ФильтрЗвонковПоВидуВсе.ЦветФона = ?(ТекущийФильтрЗвонков = "Все", ЦветФонаВыбраннойГиперссылки, ЦветФонаГиперссылки);
	Элементы.ФильтрЗвонковПоВидуВсе.ЦветТекста = ?(ТекущийФильтрЗвонков = "Все", ЦветТекстаКнопки, ЦветТекстаКнопки);
	
	Если УстановитьОтбор Тогда
		УстановитьОтборыТелефонныхЗвонков();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковВсе(Команда)
	ФильтрЗвонковПоВиду("Все");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПропущенные(Команда)
	ФильтрЗвонковПоВиду("Пропущенные");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковВходящие(Команда)
	ФильтрЗвонковПоВиду("Входящие");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковИсходящие(Команда)
	ФильтрЗвонковПоВиду("Исходящие");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПоПериоду(Фильтр)
	
	ТекущийПериодЗвонков = Фильтр;
	
	ЭлементыФильтра = Новый Массив();
	ЭлементыФильтра.Добавить("Период");
	ЭлементыФильтра.Добавить("Месяц");
	ЭлементыФильтра.Добавить("Неделя");
	ЭлементыФильтра.Добавить("Вчера");
	ЭлементыФильтра.Добавить("Сегодня");
	
	Для Каждого ЭлементФильтра Из ЭлементыФильтра Цикл
		ТекЭлемент = Элементы["ФильтрЗвонковПоПериоду" + ЭлементФильтра];
		ЭлементВыбран = (ТекущийПериодЗвонков = ЭлементФильтра);
		//ТекЭлемент.ЦветФона = ?(ЭлементВыбран, ЦветФонаВыбраннойГиперссылки, ЦветФонаГиперссылки);
		ТекЭлемент.ЦветТекста = ?(ЭлементВыбран, ЦветТекстаВыбраннойГиперссылки, ЦветТекстаГиперссылки);
		ТекЭлемент.Шрифт = Новый Шрифт(ТекЭлемент.Шрифт,,, ЭлементВыбран,, ЭлементВыбран);
	КонецЦикла;
	
	ЗаголовокЭлементаПериод = "Период";
	
	Если ТекущийПериодЗвонков = "Месяц" Тогда
		НачалоПериодаЗвонков = НачалоМесяца(ТекущаяДата());
		КонецПериодаЗвонков = КонецМесяца(НачалоПериодаЗвонков);
		
	ИначеЕсли ТекущийПериодЗвонков = "Неделя" Тогда
		НачалоПериодаЗвонков = НачалоНедели(ТекущаяДата());
		КонецПериодаЗвонков = КонецНедели(НачалоПериодаЗвонков);
		
	ИначеЕсли ТекущийПериодЗвонков = "Вчера" Тогда
		НачалоПериодаЗвонков = НачалоДня(ТекущаяДата()) - 86400;
		КонецПериодаЗвонков = КонецДня(НачалоПериодаЗвонков);
		
	ИначеЕсли ТекущийПериодЗвонков = "Сегодня" Тогда
		НачалоПериодаЗвонков = НачалоДня(ТекущаяДата());
		КонецПериодаЗвонков = КонецДня(НачалоПериодаЗвонков);
		
	ИначеЕсли ТекущийПериодЗвонков = "Период" Тогда
		НачалоПериодаЗвонков = ПериодЗвонков.ДатаНачала;
		КонецПериодаЗвонков = ПериодЗвонков.ДатаОкончания;
		
		ЗаголовокЭлементаПериод = ПредставлениеПериода(ПериодЗвонков.ДатаНачала, ПериодЗвонков.ДатаОкончания);
	КонецЕсли;
	
	Элементы.ФильтрЗвонковПоПериодуПериод.Заголовок = ЗаголовокЭлементаПериод;
					
	ОбновитьКоличествоЗвонков();
	УстановитьОтборыТелефонныхЗвонков();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковСегодня(Команда)
	ФильтрЗвонковПоПериоду("Сегодня");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковВчера(Команда)
	ФильтрЗвонковПоПериоду("Вчера");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковНеделя(Команда)
	ФильтрЗвонковПоПериоду("Неделя");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковМесяц(Команда)
	ФильтрЗвонковПоПериоду("Месяц");
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ФильтрЗвонковПериодПродолжить", ЭтаФорма);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = ПериодЗвонков.ДатаНачала;
	Диалог.Период.ДатаОкончания = ПериодЗвонков.ДатаОкончания;
	Диалог.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПериодПродолжить(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		ПериодЗвонков.ДатаНачала = Период.ДатаНачала;
		ПериодЗвонков.ДатаОкончания = Период.ДатаОкончания;

		ФильтрЗвонковПоПериоду("Период");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПоПринадлежности(Фильтр)
	
	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.Добавить(1, "Мои звонки", (ПринадлежностьЗвонка = 1), БиблиотекаКартинок.сфпФильтрМоиЗвонки);
	СписокВыбора.Добавить(2, "Звонки моего подразделения", (ПринадлежностьЗвонка = 2), БиблиотекаКартинок.сфпФильтрЗвонкиМоегоПодразделения);
	СписокВыбора.Добавить(0, "Мои звонки и моего подразделения", (ПринадлежностьЗвонка = 0), БиблиотекаКартинок.сфпФильтрМоиЗвонкиИПодразделения);
	
	Оповещение = Новый ОписаниеОповещения("ФильтрЗвонковПоПринадлежностиПродолжить", ЭтаФорма);	
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.ФильтрЗвонковПоПринадлежности);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗвонковПоПринадлежностиПродолжить(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПринадлежностьЗвонка = ВыбранныйЭлемент.Значение;
		Элементы.ФильтрЗвонковПоПринадлежности.Заголовок = ВыбранныйЭлемент.Представление;
		Элементы.КартинкаФильтрЗвонковПоПринадлежности.Картинка = ВыбранныйЭлемент.Картинка;
		
		ОбновитьКоличествоЗвонков();
		УстановитьОтборыТелефонныхЗвонков();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеКонтактов(Режим, Группировка = "")
	
	Если ТипЗнч(Группировка) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;

	ТекущаяГруппировкаКонтактов.Очистить();
	
	Если Режим = "Развернуть" Тогда
		НоваяСтрока = ТекущаяГруппировкаКонтактов.Добавить();
		НоваяСтрока.Группировка = Группировка;
		
		Элементы.ТекущаяГруппировкаКонтактов.Видимость = Истина;

		Элементы.АбонентыТелефонныхКнигКонтактПредставление.ГиперссылкаЯчейки = Ложь;
		
		АбонентыТелефонныхКниг.Группировка.Элементы[0].Использование = Ложь;
		АбонентыТелефонныхКниг.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].Использование = Истина;
		АбонентыТелефонныхКниг.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Группировка;
		
	Иначе
		Элементы.АбонентыТелефонныхКниг.ТекущаяСтрока = Неопределено;

		Элементы.ТекущаяГруппировкаКонтактов.Видимость = Ложь;
		
		Элементы.АбонентыТелефонныхКнигКонтактПредставление.ГиперссылкаЯчейки = Истина;
		
		АбонентыТелефонныхКниг.Группировка.Элементы[0].Использование = Истина;
		АбонентыТелефонныхКниг.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].Использование = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтакт(Команда)
	
	ТекДанные = Элементы.АбонентыТелефонныхКниг.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТипЗнч(ТекДанные) = Тип("ДанныеФормыСтруктура") Тогда
		Попытка ПоказатьЗначение(, ТекДанные.Контакт);
		Исключение КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяГруппировкаКонтактовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастроитьОтображениеКонтактов("Свернуть");
	
КонецПроцедуры

#КонецОбласти 
