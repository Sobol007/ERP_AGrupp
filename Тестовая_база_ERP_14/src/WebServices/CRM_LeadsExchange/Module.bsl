Функция GetLeadStructure(ServiceID, SourceID)
	Источник = Справочники.CRM_ИсточникиПолученияЛидов.НайтиПоРеквизиту("ИдентификаторИсточника", SourceID); 
	Если Источник.Пустая() Тогда
		Структура = Новый Структура;
		Структура.Вставить("status","error");
		
		Структура.Вставить("text", "Настройки источника не найдены");
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Структура);
		
		Возврат СтрокаJSON;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
	|	CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты.Свойство,
	|	CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты.Обязательно
	|ИЗ
	|	Справочник.CRM_ИсточникиПолученияЛидов.ДополнительныеРеквизиты КАК CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты
	|ГДЕ
	|	CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты.Ссылка.ИдентификаторИсточника = &ИДИсточника";
	Запрос.УстановитьПараметр("ИДИсточника", SourceID);
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
     
	ТекстВыгрузки = Новый ЗаписьXML;
	ТекстВыгрузки.УстановитьСтроку();
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("LeadStructure");
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Fields");
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "ID события");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "IDСобытия");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Ложь));
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "Тема");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "Тема");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Ложь));
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "Контакт");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "Контакт");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Источник.НаименованиеОбязательно));
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "Организация");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "Организация");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Источник.НаименованиеОбязательно));
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "Телефон");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "Телефон");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Источник.ТелефонОбязательно));
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "Электронная почта");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "ЭлектроннаяПочта");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Источник.ПочтаОбязательно));
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "UTM метка");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "UTMМетка");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Ложь));
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	
	// +CRM_Сквозная аналитика
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "Идентификатор кампании");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "ИДКампании");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "Integer");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Ложь));
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
	ТекстВыгрузки.ЗаписатьАтрибут("Name", "Канал первичного интереса");
	ТекстВыгрузки.ЗаписатьАтрибут("ID", "КаналПервичногоИнтереса");           
	ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
	ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Ложь));	
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	// -CRM_Сквозная аналитика
	Для Каждого Строка Из ТаблицаРеквизитов Цикл
		ТекстВыгрузки.ЗаписатьНачалоЭлемента("Field");
		ТекстВыгрузки.ЗаписатьАтрибут("Name", XMLСтрока(Строка.Свойство.Заголовок));
		ТекстВыгрузки.ЗаписатьАтрибут("ID", XMLСтрока(Строка.Свойство.УникальныйИдентификатор()));           
		Если Строка.Свойство.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			ТекстВыгрузки.ЗаписатьАтрибут("Type", "String");
		ИначеЕсли Строка.Свойство.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			ТекстВыгрузки.ЗаписатьАтрибут("Type", "Integer");
		ИначеЕсли Строка.Свойство.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
			ТекстВыгрузки.ЗаписатьАтрибут("Type", "Date");	
		ИначеЕсли Строка.Свойство.ТипЗначения.СодержитТип(Тип("Булево")) Тогда	
			ТекстВыгрузки.ЗаписатьАтрибут("Type", "Boolean");	
		КонецЕсли;	
		ТекстВыгрузки.ЗаписатьАтрибут("Required", XMLСтрока(Строка.Обязательно));
		ТекстВыгрузки.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	ТекстВыгрузки.ЗаписатьКонецЭлемента();
	СтрокаВозврата = ТекстВыгрузки.Закрыть();
	Возврат СтрокаВозврата;
	
КонецФункции

Функция LoadLead(ServiceID, SourceID, LeadStructure)
	Источник = Справочники.CRM_ИсточникиПолученияЛидов.НайтиПоРеквизиту("ИдентификаторИсточника", SourceID); 
	Если Источник.Пустая() Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("status","error");
		
		Структура.Вставить("text", "Настройки источника не найдены");
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Структура);
		
		Возврат СтрокаJSON;
		
	КонецЕсли;
	// +CRM_Сквозная аналитика
	ЭтоЗвонок = Ложь;
	// -CRM_Сквозная аналитика
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
	|	CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты.Свойство
	|ИЗ
	|	Справочник.CRM_ИсточникиПолученияЛидов.ДополнительныеРеквизиты КАК CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты
	|ГДЕ
	|	CRM_ИсточникиПолученияЛидовДополнительныеРеквизиты.Ссылка.ИдентификаторИсточника = &ИДИсточника";
	Запрос.УстановитьПараметр("ИДИсточника", SourceID);
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(LeadStructure);
	ПостроительDOM = Новый ПостроительDOM; 
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	КорневойУзел = ДокументDOM.ПервыйДочерний;
	ИДСервиса = "";
	ИДИсточника = "";
	КампанияИД = "";
	Заявка = Документы.CRM_Заявка.СоздатьДокумент();
	Заявка.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Заявка.ИсточникПолучения = Источник;
	Заявка.Ответственный = Источник.ОтветственныйМенеджер;
	Заявка.CRM_РольОтветственного = Источник.CRM_РольОтветственного;
	Заявка.КаналПервичногоИнтереса = Источник.КаналПервичногоИнтереса;
	Заявка.ИсточникПервичногоИнтереса = Источник.ИсточникПервичногоИнтереса;
	Для Каждого ДанныеВыгрузки из КорневойУзел.ДочерниеУзлы Цикл
		Если ДанныеВыгрузки.ИмяУзла = "Fields" Тогда
			Для Каждого Поле из ДанныеВыгрузки.ДочерниеУзлы Цикл
				Если Поле.ИмяУзла = "Field" Тогда
					ИмяРеквизита = "";
					ЗначениеРеквизита = "";
					Для Каждого Атрибут из Поле.Атрибуты Цикл
						Если Атрибут.ИмяУзла = "ID" Тогда
							ИмяРеквизита = Атрибут.ЗначениеУзла;
						ИначеЕсли Атрибут.ИмяУзла = "Type" Тогда	
							ЗначениеРеквизита = Атрибут.ЗначениеУзла;
						КонецЕсли;	
					КонецЦикла;
					Если ИмяРеквизита = "Контакт" Тогда
						Заявка.Наименование = ЗначениеРеквизита;
					ИначеЕсли ИмяРеквизита = "Телефон" Тогда
						Заявка.Телефон = ЗначениеРеквизита;	
					ИначеЕсли ИмяРеквизита = "ЭлектроннаяПочта" Тогда
						Заявка.ЭлектроннаяПочта = ЗначениеРеквизита;
					ИначеЕсли ИмяРеквизита = "IDСобытия" Тогда
						Заявка.ИДСобытия = ЗначениеРеквизита;	
					ИначеЕсли ИмяРеквизита = "UTMМетка" Тогда
						Заявка.UTMМетка = СокрЛП(ЗначениеРеквизита);
					ИначеЕсли ИмяРеквизита = "IsCall" Тогда
						Если ЗначениеРеквизита = "1" Тогда
							ЭтоЗвонок = Истина;
						Иначе
							ЭтоЗвонок = Ложь;
						КонецЕсли;
					ИначеЕсли ИмяРеквизита = "Тема" Тогда
						Заявка.Тема = ЗначениеРеквизита;	
					ИначеЕсли ИмяРеквизита = "Комментарий" Тогда
						Заявка.Комментарий = ЗначениеРеквизита;	
					ИначеЕсли ИмяРеквизита = "ИДКампании" Тогда
						КампанияИД = Формат(ЗначениеРеквизита, "ЧГ=0");
					ИначеЕсли ИмяРеквизита = "КаналПервичногоИнтереса" Тогда
						КаналПервичногоИнтереса = СокрЛП(ЗначениеРеквизита);
						
					Иначе	
						Попытка
							ИДРеквизита = Новый УникальныйИдентификатор(ИмяРеквизита);
							Реквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(ИДРеквизита);
							Строка = Заявка.ДополнительныеРеквизиты.Добавить();
							Строка.Свойство = Реквизит;
							Если Строка.Свойство.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
								Строка.Значение = XMLЗначение(Тип("Строка"), ЗначениеРеквизита);
							ИначеЕсли Строка.Свойство.ТипЗначения.СодержитТип(Тип("Число")) Тогда
								Строка.Значение = XMLЗначение(Тип("Число"), ЗначениеРеквизита);
							ИначеЕсли Строка.Свойство.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
								Строка.Значение = XMLЗначение(Тип("Дата"), ЗначениеРеквизита);
							ИначеЕсли Строка.Свойство.ТипЗначения.СодержитТип(Тип("Булево")) Тогда	
								Строка.Значение = XMLЗначение(Тип("Булево"), ЗначениеРеквизита);
							Иначе
								Строка.Значение = ПолучитьЗначениеДопРеквизита(Реквизит, ЗначениеРеквизита);
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЦикла;
	Если Заявка.ИДСобытия <> "" Тогда
		НайденнаяЗаявка = Документы.CRM_Заявка.НайтиПоРеквизиту("ИДСобытия", Заявка.ИДСобытия);
		Если НЕ НайденнаяЗаявка.Пустая() Тогда
			Заявка = Неопределено;
			
			Структура = Новый Структура;
			
			Структура.Вставить("status","success");		
			Структура.Вставить("text","Заявка уже зарегистрированна в системе под номером " + НайденнаяЗаявка.Номер);
			
			СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Структура);
			
			Возврат СтрокаJSON;
		КонецЕсли;
	КонецЕсли;
	
	ОтказСтруктура = НайтиЗаявкуПоЗаполненнымРеквизитам(Заявка.Телефон,Заявка.ЭлектроннаяПочта,ЭтоЗвонок);
	
	Если ОтказСтруктура.Отказ Тогда
		Заявка = Неопределено;
		Структура = Новый Структура;
		
		Структура.Вставить("status","success");		
		Структура.Вставить("text","Заявка уже зарегистрированна в системе под номером " + ОтказСтруктура.Номер);
		
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Структура);
		
		Возврат СтрокаJSON;
		
	КонецЕсли;
	
	// +CRM_Сквозная аналитика
	Если ЗначениеЗаполнено(Заявка.UTMМетка) Тогда
		
		// Если несколько меток в одной, берем первую
		попытка
			СтрМеткаМассив = СтрРазделить(Заявка.UTMМетка,"&");
			СтрМетка = СтрМеткаМассив[0];
		Исключение
			СтрМетка = Заявка.UTMМетка;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И ЗначениеЗаполнено(КампанияИД) Тогда			
			СтруктураВозвр = CRM_СистемаСквознойАналитикиСервер.ПолучитьРекламнуюКампаниюПоИД(КампанияИД, 
			СтрМетка, КаналПервичногоИнтереса);				
			
			Заявка.КаналПервичногоИнтереса = СтруктураВозвр.КаналПервичногоИнтереса;
			Заявка.ИсточникПервичногоИнтереса = СтруктураВозвр.ИсточникПервичногоИнтереса;
			
		КонецЕсли;
		
		Если Заявка.КаналПервичногоИнтереса <> Неопределено И Заявка.КаналПервичногоИнтереса.ТипЗначения.СодержитТип(Тип("СправочникСсылка.МаркетинговыеМероприятия")) Тогда
			Заявка.ИсточникПервичногоИнтереса = Справочники.МаркетинговыеМероприятия.НайтиПоРеквизиту("CRM_UTMМетка", СтрМетка);
		КонецЕсли;	
		
	Иначе
		
		Заявка.ИсточникПервичногоИнтереса = Источник.ИсточникПервичногоИнтереса;
		
	КонецЕсли;	
	
	Заявка.Записать();
	
	CRM_СистемаСквознойАналитикиСервер.УстановитьСсылкуВИсточникПервичногоИнтересаЗаписатьДопРеквизит(Заявка.Ссылка, 
	Заявка.КаналПервичногоИнтереса, КампанияИД, Заявка.ИсточникПервичногоИнтереса);
	
	Структура = Новый Структура;
	
	Структура.Вставить("status","success");		
	Структура.Вставить("text","Создана новая заявка в системе под номером " + Заявка.Номер);
	
	СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Структура);
	
	Возврат СтрокаJSON;
	
	// -CRM_Сквозная аналитика
	
КонецФункции

Функция ПолучитьЗначениеДопРеквизита(ПВХ, ЗначениеРеквизита)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Владелец = &Владелец
		|	И ЗначенияСвойствОбъектов.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ПВХ);
	Запрос.УстановитьПараметр("Наименование", ЗначениеРеквизита);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция GetListExtraOptions(SourceID)
	
	// 192.168.11.200/crm/ws/LeadsExchange.1cws?wsdl
	Источник = Справочники.CRM_ИсточникиПолученияЛидов.НайтиПоРеквизиту("ИдентификаторИсточника", SourceID); 
	Если Источник.Пустая() Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("status","error");
		
		Структура.Вставить("text", "Настройки источника не найдены");
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Структура);
		
		Возврат СтрокаJSON;
		
	КонецЕсли;
	
	// Получим список дополнительных реквизитов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно КАК Обязательно,
	|	ЗначенияСвойствОбъектов.Наименование КАК ДопЗначения
	|ИЗ
	|	Справочник.CRM_ИсточникиПолученияЛидов.ДополнительныеДанныеПоИсточникам КАК CRM_ИсточникиПолученияЛидовДополнительныеДанныеПоИсточникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО ДополнительныеРеквизитыИСведения.Ссылка = ЗначенияСвойствОбъектов.Владелец
	|		ПО CRM_ИсточникиПолученияЛидовДополнительныеДанныеПоИсточникам.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	CRM_ИсточникиПолученияЛидовДополнительныеДанныеПоИсточникам.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНаименование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураJson = Новый Структура;
	МассивЗначений = Новый Массив;
	МассивJson = Новый Массив;
	Пока ВыборкаНаименование.Следующий() Цикл
		
		Стр = Новый структура;
		
		Стр.Вставить("name",ВыборкаНаименование.Наименование);
		
		ВыборкаДетальныеЗаписи = ВыборкаНаименование.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Стр.Вставить("required",ВыборкаДетальныеЗаписи.Обязательно);
			
			ТипЗначения = ПолучитьОписаниеТипа(Строка(ВыборкаДетальныеЗаписи.ТипЗначения));
			
			Стр.Вставить("type",ТипЗначения);
			
			Если ТипЗначения = "mas" Тогда
				
				Структура = Новый Структура;
				
				Структура.Вставить("value",ВыборкаДетальныеЗаписи.ДопЗначения);
				
				МассивЗначений.Добавить(Структура);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТипЗначения = "mas" Тогда
			Стр.Вставить("values",МассивЗначений);
		КонецЕсли;
		
		МассивJson.Добавить(Стр);
		
	КонецЦикла;
	
	// Порядок полей.
	
	МассивДанных = новый Массив;
	
	Для Каждого СтрДопДанные Из Источник.ДополнительныеДанныеПоИсточникам Цикл
		
		СтруктураПорядка = Новый Структура;
		Если НЕ СтрДопДанные.Служебный Тогда
			СтруктураПорядка.Вставить("field",СтрДопДанные.Свойство.Заголовок);
		Иначе
			СтруктураПорядка.Вставить("field",СтрДопДанные.Свойство);
		КонецЕсли;
		МассивДанных.Добавить(СтруктураПорядка);
		
	КонецЦикла;
	
	СтруктураJson.Вставить("option",МассивJson);
	СтруктураJson.Вставить("order",МассивДанных);
	
	СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(СтруктураJson);
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция НайтиЗаявкуПоЗаполненнымРеквизитам(Телефон,ЭлектроннаяПочта,ЭтоЗвонок)
	
	СтруктураВозврата = Новый Структура;
	
	Если ЭтоЗвонок Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Заявка.Ссылка КАК Ссылка,
		|	CRM_Заявка.Номер КАК Номер
		|ИЗ
		|	Документ.CRM_Заявка КАК CRM_Заявка
		|ГДЕ
		|	CRM_Заявка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
		|	И CRM_Заявка.Телефон ПОДОБНО &Телефон";
		
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Телефон", Телефон);
		
		РезультатЗапроса = Запрос.Выполнить().Пустой();
		
		Если РезультатЗапроса Тогда
			Отказ = Ложь;
			СтруктураВозврата.Вставить("Отказ",Отказ);
			
		Иначе
			Отказ = Истина;
			ВыборкаРезультат = Запрос.Выполнить().Выбрать();
			ВыборкаРезультат.Следующий();
			СтруктураВозврата.Вставить("Отказ",Отказ);
			СтруктураВозврата.Вставить("Номер",ВыборкаРезультат.Номер);
		КонецЕсли;
		
	Иначе 
		
		Запрос2 = Новый Запрос;
		Запрос2.Текст = 
		"ВЫБРАТЬ
		|	CRM_Заявка.Ссылка КАК Ссылка,
		|	CRM_Заявка.Номер КАК Номер
		|ИЗ
		|	Документ.CRM_Заявка КАК CRM_Заявка
		|ГДЕ
		|	CRM_Заявка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
		|	И CRM_Заявка.ЭлектроннаяПочта = &ЭлектроннаяПочта";
		
		Запрос2.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос2.УстановитьПараметр("ЭлектроннаяПочта", ЭлектроннаяПочта);
		
		РезультатЗапроса2 = Запрос2.Выполнить().Пустой();
		
		Если РезультатЗапроса2 Тогда
			Отказ = Ложь;
			СтруктураВозврата.Вставить("Отказ",Отказ);
		Иначе
			Отказ = Истина;
			ВыборкаРезультат2 = Запрос2.Выполнить().Выбрать();
			ВыборкаРезультат2.Следующий();
			СтруктураВозврата.Вставить("Отказ",Отказ);
			СтруктураВозврата.Вставить("Номер",ВыборкаРезультат2.Номер);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьСтрокуJSONИзСтруктуры(Объект) Экспорт
	
	СтрокаJSON = "{";
	
	Для каждого Элемент Из Объект Цикл
		
		Если Элемент.Значение = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + Элемент.Значение + """";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			// Преобразование в unixtime
			
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + Элемент.Значение + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
		
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "}";
	
КонецФункции

Функция СформироватьСтрокуJSONИзМассива(Объект)
	
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент) + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
	
КонецФункции

Функция СформироватьСтрокуJSON(Объект) Экспорт
	
	СтрокаJSON = "";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда
		СтрокаJSON = СтрокаJSON + """" + КодироватьСтроку(Объект, СпособКодированияСтроки.КодировкаURL) + """";
	КонецЕсли;
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция ПолучитьОписаниеТипа(ТипСтрокой)
	
	Если ТипСтрокой = "Строка" Тогда
		Возврат "string";
	ИначеЕсли ТипСтрокой = "Число" Тогда
		Возврат "float";
	ИначеЕсли ТипСтрокой = "Булево" Тогда
		Возврат "bool";
	ИначеЕсли ТипСтрокой = "Дата" Тогда
		Возврат "datetime";
	ИначеЕсли ТипСтрокой = "Дополнительное значение" Тогда
		Возврат "mas";
	КонецЕсли;
	
КонецФункции
// http://localhost/WSTest/ws/LeadsExchange.1cws?wsdl

#Область СлужебныеПроцедурыИФункции

#КонецОбласти 