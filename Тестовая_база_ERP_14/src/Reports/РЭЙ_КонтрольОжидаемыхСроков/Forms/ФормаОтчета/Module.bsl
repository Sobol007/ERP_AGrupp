#Область ОбработчикиСобытий_Форма

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДатуОтчета();
	Отчет.Организация = РЭЙ_Универсализация.ПолучитьОсновнуюОрганизацию();
	
	Элементы.НаправлениеДвижения.СписокВыбора.Добавить("Импорт");
	Элементы.НаправлениеДвижения.СписокВыбора.Добавить("Экспорт");
	
	УстановитьПараметрыВыбора_КонтрактВЭД();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	СформироватьОтчетНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()
	ЗаполнитьДатуОтчета();
	
	Результат.Очистить();
	ВывестиОтчет(Результат);
	ВыводЗаголовка();
	
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовок(Команда)
	Элементы.ВыводитьЗаголовок.Пометка = Не Элементы.ВыводитьЗаголовок.Пометка;
	
	ВыводЗаголовка();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	ОтобразитьСостояниеНесформированногоОтчета();
	Отчет.ДатаОтчетаВручную = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтчетаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОтобразитьСостояниеНесформированногоОтчета();
	Отчет.ДатаОтчетаВручную = Ложь;
	ЗаполнитьДатуОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОтобразитьСостояниеНесформированногоОтчета();
	УстановитьПараметрыВыбора_КонтрактВЭД();
	ЗаполнитьКонтрактВЭД();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОтобразитьСостояниеНесформированногоОтчета();
	УстановитьПараметрыВыбора_КонтрактВЭД();
	ЗаполнитьКонтрактВЭД();
КонецПроцедуры

&НаКлиенте
Процедура КонтрактВЭДПриИзменении(Элемент)
	ОтобразитьСостояниеНесформированногоОтчета();
	КонтрактВЭДПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрактВЭДПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Отчет.КонтрактВЭД) Тогда
		Отчет.Контрагент = Отчет.КонтрактВЭД.Контрагент;
		Отчет.Организация = Отчет.КонтрактВЭД.Организация;
		
		Если Отчет.КонтрактВЭД.Экспорт И Отчет.КонтрактВЭД.Импорт
			Или Отчет.КонтрактВЭД.Экспорт = Ложь И Отчет.КонтрактВЭД.Импорт =  Ложь Тогда
			Отчет.НаправлениеДвижения = "";
		КонецЕсли; 
		Если Отчет.КонтрактВЭД.Экспорт Тогда
			Отчет.НаправлениеДвижения = "Экспорт";
		КонецЕсли; 
		Если Отчет.КонтрактВЭД.Импорт Тогда
			Отчет.НаправлениеДвижения = "Импорт";
		КонецЕсли; 
		
		УстановитьПараметрыВыбора_КонтрактВЭД();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДвиженияПриИзменении(Элемент)
	ОтобразитьСостояниеНесформированногоОтчета();
	УстановитьПараметрыВыбора_КонтрактВЭД();
	ЗаполнитьКонтрактВЭД();
КонецПроцедуры

#КонецОбласти

#Область Отбражение

&НаСервере
Процедура УстановитьПараметрыВыбора_КонтрактВЭД()
	МассивПараметровВыбора = Новый Массив;
	
	Если ЗначениеЗаполнено(Отчет.НаправлениеДвижения) Тогда
		Если Отчет.НаправлениеДвижения = "Экспорт" Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Экспорт", Истина));
		КонецЕсли;
		Если Отчет.НаправлениеДвижения = "Импорт" Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Импорт", Истина));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КонтрактВЭД.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	СвязиПараметровВыбора = Новый Массив;
	
	Если ЗначениеЗаполнено(Отчет.Организация) Тогда
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Отчет.Организация"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Отчет.Контрагент) Тогда
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Отчет.Контрагент"));
	КонецЕсли;
	
	Элементы.КонтрактВЭД.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыводЗаголовка()
	Если Отчет.ВысотаЗаголовка <> 0 Тогда
		Результат.Область(1,, Отчет.ВысотаЗаголовка).Видимость = Элементы.ВыводитьЗаголовок.Пометка;		
	КонецЕсли;	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДатуОтчета()
	Если Не Отчет.ДатаОтчетаВручную Тогда
		Отчет.ДатаОтчета = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрактВЭД()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РЭЙ_КонтрактыВЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	|ГДЕ
	|	РЭЙ_КонтрактыВЭД.Контрагент = &Контрагент
	|	И РЭЙ_КонтрактыВЭД.Организация = &Организация
	|	И НЕ РЭЙ_КонтрактыВЭД.ПометкаУдаления
	|	И (&НаправлениеДвижения = """"
	|			ИЛИ &НаправлениеДвижения = ""Экспорт""
	|				И РЭЙ_КонтрактыВЭД.Экспорт
	|			ИЛИ &НаправлениеДвижения = ""Кредитный договор""
	|				И РЭЙ_КонтрактыВЭД.Импорт)";

	Запрос.УстановитьПараметр("Контрагент", Отчет.Контрагент);
	Запрос.УстановитьПараметр("Организация", Отчет.Организация);
	Запрос.УстановитьПараметр("НаправлениеДвижения", Отчет.НаправлениеДвижения);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Отчет.КонтрактВЭД = Выборка.Ссылка;
		КонтрактВЭДПриИзмененииНаСервере();
	Иначе
		Отчет.КонтрактВЭД = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеНесформированногоОтчета()
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Элементы.Результат.ОтображениеСостояния.Видимость = Истина;
	Отчет.ВысотаЗаголовка = 0;
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчета

&НаСервере
Процедура ВывестиОтчет(ТабДок)
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Макет = Отчеты.РЭЙ_КонтрольОжидаемыхСроков.ПолучитьМакет("Макет");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ДатаОтчета = Формат(Отчет.ДатаОтчета, "ДФ='dd.MM.yyyy HH:mm:ss'");
	Область.Параметры.Организация = ?(ЗначениеЗаполнено(Отчет.Организация), Отчет.Организация, "Все");
	Область.Параметры.Контрагент = ?(ЗначениеЗаполнено(Отчет.Контрагент), Отчет.Контрагент, "Все");
	Область.Параметры.КонтрактВЭД = ?(ЗначениеЗаполнено(Отчет.КонтрактВЭД), Отчет.КонтрактВЭД, "Все");
	Область.Параметры.НаправлениеДвижения = ?(Отчет.НаправлениеДвижения <> "", Отчет.НаправлениеДвижения, "Все");
	ТабДок.Вывести(Область);
	Отчет.ВысотаЗаголовка = ТабДок.ВысотаТаблицы;
	
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Область);
	
	ТабДок.ФиксацияСверху = ТабДок.ВысотаТаблицы;
	
	СхемаСКД = Отчеты.РЭЙ_КонтрольОжидаемыхСроков.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	КомпоновщикНастроекСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	КомпоновщикНастроекСКД.ЗагрузитьНастройки(СхемаСКД.НастройкиПоУмолчанию);
	КомпоновщикНастроекСКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	КомпоновщикНастроекСКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОтчета", Отчет.ДатаОтчета);
	
	Если ЗначениеЗаполнено(Отчет.Организация) Тогда
		ЭлементОтбора = КомпоновщикНастроекСКД.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрактВЭД.Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Отчет.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.Контрагент) Тогда
		ЭлементОтбора = КомпоновщикНастроекСКД.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Отчет.Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.КонтрактВЭД) Тогда
		ЭлементОтбора = КомпоновщикНастроекСКД.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрактВЭД");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Отчет.КонтрактВЭД;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.НаправлениеДвижения) Тогда
		ЭлементОтбора = КомпоновщикНастроекСКД.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаправлениеДвижения");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Отчет.НаправлениеДвижения;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаСКД, КомпоновщикНастроекСКД.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);
	
	ДеревоРезультата = Новый ДеревоЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ШиринаАвансовойЧасти = Макет.Область("Справка|Комплементарная").Лево - 1;
	
	Для Каждого СтрокаКонтрагента Из ДеревоРезультата.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаКонтрагента.Контрагент) Тогда
			Область = Макет.ПолучитьОбласть("Контрагент");
			Область.Параметры.Заполнить(СтрокаКонтрагента);
			ТабДок.Вывести(Область);
			
			Для Каждого СтрокаКонтрактаВЭД Из СтрокаКонтрагента.Строки Цикл
				Область = Макет.ПолучитьОбласть("КонтрактВЭД");
				Область.Параметры.Заполнить(СтрокаКонтрактаВЭД);
				ТабДок.Вывести(Область);
				
				ВыведенаВалютаКонтракта = Ложь;
				ВыведенПаспортСделки = Ложь;
				
				Для Каждого СтрокаСправкаАвансовая Из СтрокаКонтрактаВЭД.Строки Цикл
					Область = Макет.ПолучитьОбласть("Справка");
					Область.Параметры.Заполнить(СтрокаСправкаАвансовая);
					Область.Параметры.Справка_Авансовая_Представление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаСправкаАвансовая.Справка_Авансовая);
					Если Не ВыведенаВалютаКонтракта Тогда
						Область.Параметры.ВалютаКонтракта = СтрокаСправкаАвансовая.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						ВыведенаВалютаКонтракта = Истина;
					КонецЕсли;
					ТабДок.Вывести(Область);
					
					текНомерСтроки = ТабДок.ВысотаТаблицы;
					КомплементарныеСправкиОтсутствуют = Истина;
					
					Для Каждого СтрокаДокумента Из СтрокаСправкаАвансовая.Строки Цикл
						Если Не ЗначениеЗаполнено(СтрокаДокумента.Справка_Комплементарная) Тогда
							Область = Макет.ПолучитьОбласть("Документ");
							Область.Параметры.Заполнить(СтрокаДокумента);
							Область.Параметры.Документ_Авансовый_Представление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаДокумента.Документ_Авансовый);
							Если Не ВыведенПаспортСделки Тогда
								текПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(СтрокаДокумента.КонтрактВЭД);
								Если ЗначениеЗаполнено(текПаспортСделки) Тогда
									Область.Параметры.ПаспортСделки = текПаспортСделки;
									Область.Параметры.ПаспортСделки_Представление = текПаспортСделки.НомерПаспортаСделки;
								КонецЕсли;
								ВыведенПаспортСделки = Истина;
							КонецЕсли;
							Если СтрокаСправкаАвансовая.СуммаВВалютеКонтракта_Авансовая <> СтрокаСправкаАвансовая.СуммаВВалютеКонтракта_Комплементарная Тогда
								КоличествоДнейДоОжидаемогоСрока = (СтрокаДокумента.ОжидаемыйСрок - НачалоДня(Отчет.ДатаОтчета)) / 86400;
								Область.Параметры.КоличествоДнейДоОжидаемогоСрока = КоличествоДнейДоОжидаемогоСрока;
								Если КоличествоДнейДоОжидаемогоСрока < 0 Тогда
									Область.Область(1, 13).ЦветТекста = WebЦвета.Красный;
								КонецЕсли;
							КонецЕсли;
							ТабДок.Вывести(Область);
							
							НомерСтроки_Документ_Авансовый = ТабДок.ВысотаТаблицы;
						Иначе
							КомплементарныеСправкиОтсутствуют = Ложь;
							Если текНомерСтроки > ТабДок.ВысотаТаблицы Тогда
								Область = Макет.ПолучитьОбласть("Документ");
								ТабДок.Вывести(Область);
							КонецЕсли;
							Область = Макет.ПолучитьОбласть("Справка|Комплементарная");
							Область.Параметры.Заполнить(СтрокаДокумента);
							Область.Параметры.Справка_Комплементарная_Представление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаДокумента.Справка_Комплементарная);
							ТабДок.ВставитьОбласть(Область.Область(1, 1, 1, Область.ШиринаТаблицы),ТабДок.Область(текНомерСтроки, ШиринаАвансовойЧасти + 1, текНомерСтроки, ШиринаАвансовойЧасти + Область.ШиринаТаблицы),, Истина);
							
							текНомерСтроки = текНомерСтроки + 1;
							
							Для Каждого СтрокаКомплементарногоДокумента Из СтрокаДокумента.Строки Цикл
								Если текНомерСтроки > ТабДок.ВысотаТаблицы Тогда
									Область = Макет.ПолучитьОбласть("Документ");
									ТабДок.Вывести(Область);
								КонецЕсли;
								НомерСтроки_Документ_Комплементарный = текНомерСтроки;
								Область = Макет.ПолучитьОбласть("Документ|Комплементарная");
								Область.Параметры.Заполнить(СтрокаКомплементарногоДокумента);
								Область.Параметры.Документ_Комплементарный_Представление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаКомплементарногоДокумента.Документ_Комплементарный);
								Область.Параметры.ДатаЗакрытияАванса = СтрокаКомплементарногоДокумента.Документ_Комплементарный.Дата;
								ТабДок.ВставитьОбласть(Область.Область(1, 1, 1, Область.ШиринаТаблицы),ТабДок.Область(текНомерСтроки, ШиринаАвансовойЧасти + 1, текНомерСтроки, ШиринаАвансовойЧасти + Область.ШиринаТаблицы),, Истина);
								
								текНомерСтроки = текНомерСтроки + 1;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					Если КомплементарныеСправкиОтсутствуют Тогда
						Область = Макет.ПолучитьОбласть("Справка|Комплементарная");
						Область.Параметры.Справка_Комплементарная_Представление = "Справка валютного контроля не создавалась";
						Область.Область(1, 1).ЦветТекста = WebЦвета.Красный;
						ТабДок.ВставитьОбласть(Область.Область(1, 1, 1, Область.ШиринаТаблицы),ТабДок.Область(текНомерСтроки, ШиринаАвансовойЧасти + 1, текНомерСтроки, ШиринаАвансовойЧасти + Область.ШиринаТаблицы),, Истина);
						
						текНомерСтроки = текНомерСтроки + 1;
						НомерСтроки_Документ_Комплементарный = текНомерСтроки;
					КонецЕсли;
					Пока текНомерСтроки <= ТабДок.ВысотаТаблицы Цикл
						Область = Макет.ПолучитьОбласть("Документ|Комплементарная");
						ТабДок.ВставитьОбласть(Область.Область(1, 1, 1, Область.ШиринаТаблицы),ТабДок.Область(текНомерСтроки, ШиринаАвансовойЧасти + 1, текНомерСтроки, ШиринаАвансовойЧасти + Область.ШиринаТаблицы),, Истина);
						текНомерСтроки = текНомерСтроки + 1;
					КонецЦикла;
					
					ТабДок.Область(НомерСтроки_Документ_Авансовый, 4, ТабДок.ВысотаТаблицы, 4).Объединить();
					ТабДок.Область(НомерСтроки_Документ_Авансовый, 5, ТабДок.ВысотаТаблицы, 5).Объединить();
					ТабДок.Область(НомерСтроки_Документ_Авансовый, 6, ТабДок.ВысотаТаблицы, 6).Объединить();
					ТабДок.Область(НомерСтроки_Документ_Авансовый, 7, ТабДок.ВысотаТаблицы, 7).Объединить();
					ТабДок.Область(НомерСтроки_Документ_Комплементарный, 9, ТабДок.ВысотаТаблицы, 9).Объединить();
					ТабДок.Область(НомерСтроки_Документ_Комплементарный, 10, ТабДок.ВысотаТаблицы, 10).Объединить();
					ТабДок.Область(НомерСтроки_Документ_Комплементарный, 11, ТабДок.ВысотаТаблицы, 11).Объединить();
					ТабДок.Область(НомерСтроки_Документ_Комплементарный, 12, ТабДок.ВысотаТаблицы, 12).Объединить();
					ТабДок.Область(НомерСтроки_Документ_Авансовый, 13, ТабДок.ВысотаТаблицы, 13).Объединить();
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Дно");
	ТабДок.Вывести(Область);
	
	ТабДок.АвтоМасштаб = Истина;
КонецПроцедуры

#КонецОбласти
