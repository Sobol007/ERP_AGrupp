#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	
	Если Параметры.Свойство("Заказы") Тогда
		
		Заказы.ЗагрузитьЗначения(Параметры.Заказы);
		УстановитьЗаголовок();
		ОбновитьДанныеНаСервере(Ложь);
		
	КонецЕсли;
	
	НастроитьФормуПриСоздании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		ПодключитьОбработчикОжидания("НачатьОжиданиеДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ОтменитьДлительнуюОперацию(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкрыватьВыполненноеПриИзменении(Элемент)
	
	ОбновитьДанныеНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЭтапыПриИзменении(Элемент)
	
	ОбновитьДанныеНаКлиенте(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЭтапов

&НаКлиенте
Процедура СтруктураЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаДерева = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если СтрокаДерева.ТипСтроки = ТипСтрокиЭтап() Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Этап);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикат() Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Номенклатура);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиПродукция() Тогда
		
		ОткрытьСтрокуЗаказаНаПроизводства(СтрокаДерева);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиЗаказ()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПрочиеИзделия() Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Заказ);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикатДругогоЗаказа() Тогда
		
		ОткрытьФормуСтруктурыПолуфабрикатаДругогоЗаказа(СтрокаДерева);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиСоздатьЭтапы() Тогда
		
		ОткрытьФормуСозданияЭтапов(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЗаказовПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Элемент.ДанныеСтроки(Строка);
	Если НЕ СтрокаДерева.ПотомкиВыведены Тогда
		
		ДостроитьДеревоЭтапов(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГанта(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипСтроки = ТипСтрокиЗаказ() Тогда
		
		ОткрытьДиаграммуГантаЗаказа(ТекущиеДанные);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПродукция()
		И ЗначениеЗаполнено(ТекущиеДанные.ПартияПроизводства) Тогда
		
		ОткрытьДиаграммуГантаПродукции(ТекущиеДанные);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап() Тогда
		
		ОткрытьДиаграммуГантаЭтапа(ТекущиеДанные);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Формирование отчета для выбранной строки недоступно';
				|en = 'Cannot generate the report for the selected line'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагностикаЭтапа(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап() Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрКоманды", ТекущиеДанные.Этап);
		
		ОткрытьФорму(
			"Отчет.ДиагностикаЭтапаПроизводства.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			ТекущиеДанные.Этап);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для формирования отчета необходимо выбрать этап производства';
				|en = 'To generate a report, select a production stage'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦепочкуЭтапов(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		
	ИначеЕсли ( ТекущиеДанные.ТипСтроки = ТипСтрокиПродукция()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап()
			) И Не ТекущиеДанные.ПартияПроизводства.Пустая() Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
			ТекущиеДанные.Заказ,
			ТекущиеДанные.ПартияПроизводства,,
			ЭтаФорма);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Для текущей строки невозможно применить выбранное действие, необходимо выбрать строку содержащую ""Продукцию"", ""Полуфабрикат"" или ""Этап производства"".';
								|en = 'Cannot apply the selected action to the current line, select the line containing ""Products"", ""Semi-finished product"", or ""Production stage"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЦепочкуЭтапов(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЗаказ() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЦепочкуЭтаповЗавершение", ЭтаФорма, ТекущиеДанные.Заказ);
	
		Представление = УправлениеПроизводствомВызовСервера.ПредставлениеЗаказа(ТекущиеДанные.Заказ,"");
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить на удаление все этапы заказа %1?';
										|en = 'Mark all steps of the %1 order for deletion?'"), Представление);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ( ТекущиеДанные.ТипСтроки = ТипСтрокиПродукция()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап()
			) И Не ТекущиеДанные.ПартияПроизводства.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЦепочкуЭтаповЗавершение", ЭтаФорма, ТекущиеДанные.ПартияПроизводства);
	
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить на удаление цепочку этапов %1?';
										|en = 'Mark the %1 stage chain for deletion?'"), ТекущиеДанные.ПартияПроизводства);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Для текущей строки невозможно применить выбранное действие, необходимо выбрать строку содержащую ""Заказ"", ""Продукцию"", ""Полуфабрикат"" или ""Этап производства"".';
								|en = 'Cannot apply the selected action for the current line. Select a line containing Order, Products, Semi-finished product, or Production stage.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЦепочкуЭтаповЗавершение(РезультатВопроса, ПараметрыПроцедуры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание(
		"ПометитьНаУдалениеЭтапыПроизводства",
		НСтр("ru = 'Пометка на удаление этапов производства';
			|en = 'Production stage deletion mark'"),
		"Документы.ЭтапПроизводства2_2.ПометитьНаУдалениеЭтапыОтложенно",
		ПараметрыПроцедуры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета

&НаКлиенте
Процедура ОбновитьДанныеНаКлиенте(СохранитьНастройкиФормы)
	
	ОбновитьДанныеНаСервере(СохранитьНастройкиФормы);
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	Иначе
		
		РаскрытьВерхнийУровеньСтруктурыЗаказов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(СохранитьНастройкиФормы)
	
	Если СохранитьНастройкиФормы Тогда
		СохранитьНастройкиФормы(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заказы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнформационнуюПанель();
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ОтменитьДлительнуюОперацию(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Заказы", Заказы.ВыгрузитьЗначения());
	ПараметрыПроцедуры.Вставить("Номенклатура", РеквизитФормыВЗначение("Номенклатура"));
	ПараметрыПроцедуры.Вставить("Этапы", РеквизитФормыВЗначение("Этапы"));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Формирование отчета ""Структура заказа на производство""';
			|en = 'Generate the ""Production order structure"" report'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты.СтруктураЗаказаНаПроизводство2_2.ПрочитатьСтруктуруЗаказов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		ОбработатьРезультатЧтенияСтруктурыЗаказовВФоне(ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьДлительнуюОперацию(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперации()
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПрочитатьСтруктуруЗаказовВФонеЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
	
	НачатьОжиданиеДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСтруктуруЗаказовВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		
		ОчиститьИПоказатьСтруктуруЗаказов();
		
	Иначе
		
		ОбработатьРезультатЧтенияСтруктурыЗаказовВФоне(Результат);
		РаскрытьВерхнийУровеньСтруктурыЗаказов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЧтенияСтруктурыЗаказовВФоне(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ПрочитанныеДанные = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ЗначениеВРеквизитФормы(ПрочитанныеДанные.Номенклатура, "Номенклатура");
		ЗначениеВРеквизитФормы(ПрочитанныеДанные.Этапы, "Этапы");
		
		ДобавитьВДеревоКорневыеСтроки(ПрочитанныеДанные.ИндексыСтрокПродукции);
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
		
	Иначе
		
		ОчиститьИПоказатьСтруктуруЗаказов();
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИПоказатьСтруктуруЗаказов()
	
	СтруктураЗаказов.ПолучитьЭлементы().Очистить();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЭтапов

&НаКлиенте
Процедура СформироватьЭтапыПроизводства(Команда)
	
	МассивСсылок = Заказы.ВыгрузитьЗначения();
	Если МассивСсылок.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПараметрыИСформироватьЭтапы(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьГруппуТребуетсяСформироватьЭтапыНажатие(Элемент)
	
	НеПоказыватьКомандуТребуетсяСформироватьЭтапы = Истина;
	ОбновитьИнформационнуюПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапы(Распоряжения)
	
	ПараметрыФормы = УправлениеПроизводствомКлиентСервер.ПараметрыФормыИсполнениеЗаказа();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИСформироватьЭтапыЗавершение", 
			ЭтотОбъект, Распоряжения);
	
	ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", 
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапыЗавершение(Результат, Распоряжения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Распоряжения", Распоряжения);
	ПараметрыПроцедуры.Вставить("ВариантыОбеспечения", Результат.ПереченьВариантов);
	
	ЗапуститьФоновоеЗадание(
		"СформироватьЭтапыПроизводства",
		НСтр("ru = 'Формирование этапов производства';
			|en = 'Generate production stages'"),
		"Документы.ЭтапПроизводства2_2.ОбеспечитьПотребностиПроизводстваВПродукцииИПолуфабрикатах",
		ПараметрыПроцедуры);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДерева

&НаСервере
Функция ДобавитьВДеревоКорневыеСтроки(ИндексыСтрокПродукции)
	
	Дерево = РеквизитФормыВЗначение("СтруктураЗаказов");
	Дерево.Строки.Очистить();
	
	Для каждого Заказ Из Заказы.ВыгрузитьЗначения() Цикл
		
		СтрокаЗаказ = Дерево.Строки.Добавить();
		СтрокаЗаказ.Заказ = Заказ;
		СтрокаЗаказ.ПредставлениеСтроки = ПредставлениеЗаказа(Заказ);
		СтрокаЗаказ.ТипСтроки = ТипСтрокиЗаказ();
		СтрокаЗаказ.ПотомкиВыведены = Истина;
		
		Для каждого Индекс Из ИндексыСтрокПродукции Цикл
			
			ДанныеПродукции = Номенклатура[Индекс];
			
			Если ДанныеПродукции.Заказ = Заказ Тогда
				
				ЭтоПрочиеИзделия = НЕ ЗначениеЗаполнено(ДанныеПродукции.Номенклатура);
				
				Если ЭтоПрочиеИзделия
					И (
						НЕ ПоказыватьЭтапы
						ИЛИ СкрыватьВыполненное И ВсеЭтапыВыполнены(ДанныеПродукции.ИндексыЭтапов)
					  ) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = СтрокаЗаказ.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПродукции);
				НоваяСтрока.ИндексНоменклатура  = Индекс;
				НоваяСтрока.ПредставлениеСтроки = ДанныеПродукции.ПредставлениеНоменклатураЭтап;
				НоваяСтрока.ТипСтроки           = ?(ЭтоПрочиеИзделия, ТипСтрокиПрочиеИзделия(), ТипСтрокиПродукция());

				ЗаполнитьРассчитываемыеРеквизитыДерева(НоваяСтрока);
				НастроитьВыводПотомковНоменклатуры(ДанныеПродукции, ЭтотОбъект, НоваяСтрока, НоваяСтрока.Строки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "СтруктураЗаказов");
	
КонецФункции

&НаСервере
Функция ВсеЭтапыВыполнены(ИндексыЭтапов)
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ИндексыЭтапов) Тогда
		
		Для каждого Индекс Из ИндексыЭтапов Цикл
			
			Если НЕ Этапы[Индекс].Выполнен Тогда
				
				Результат = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДостроитьДеревоЭтапов(СтрокаДерева)
	
	Потомки = СтрокаДерева.ПолучитьЭлементы();
	
	ПустойПотомок = Потомки[0];
	Потомки.Удалить(ПустойПотомок);
	
	Если СтрокаДерева.ТипСтроки = ТипСтрокиПродукция()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикат()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПрочиеИзделия() Тогда
		
		ДобавитьВДеревоПотомковНоменклатуры(СтрокаДерева.ИндексНоменклатура, Потомки);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиЭтап() Тогда
		
		ДобавитьВДеревоПотомковЭтапа(СтрокаДерева.ИндексЭтапы, Потомки);
		
	КонецЕсли;
	
	СтрокаДерева.ПотомкиВыведены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДеревоПотомковНоменклатуры(ИндексНоменклатура, Потомки)
	
	СтрокаНоменклатура = Номенклатура[ИндексНоменклатура];
	
	Для каждого ИндексЭтапы Из СтрокаНоменклатура.ИндексыЭтапов Цикл
		
		ДанныеЭтапа = Этапы[ИндексЭтапы];
		
		Если ПоказыватьЭтапы Тогда
			
			Если ПоказыватьЭтап(ДанныеЭтапа, ЭтотОбъект) Тогда
				
				НоваяСтрока = Потомки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЭтапа);
				
				НоваяСтрока.ПредставлениеСтроки = ДанныеЭтапа.ПредставлениеНоменклатураЭтап;
				
				НоваяСтрока.ИндексЭтапы = ИндексЭтапы;
				НоваяСтрока.ТипСтроки = ТипСтрокиЭтап();
				
				ЗаполнитьРассчитываемыеРеквизитыДерева(НоваяСтрока);
				
				ИмеютсяПотомки = ИмеютсяПотомкиЭтапа(ДанныеЭтапа, ЭтотОбъект);
				Если ИмеютсяПотомки Тогда
					НоваяСтрока.ПотомкиВыведены = Ложь;
					НоваяСтрока.ПолучитьЭлементы().Добавить();
				Иначе
					НоваяСтрока.ПотомкиВыведены = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ИмеютсяПотомкиЭтапа(ДанныеЭтапа, ЭтотОбъект) Тогда
				
				ДобавитьВДеревоПотомковЭтапа(ИндексЭтапы, Потомки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДеревоПотомковЭтапа(ИндексЭтапы, Потомки)
	
	СтрокаЭтапа = Этапы[ИндексЭтапы];
	
	Для каждого ИндексНоменклатура Из СтрокаЭтапа.ИндексыНоменклатуры Цикл
		
		ДанныеНоменклатуры = Номенклатура[ИндексНоменклатура];
		
		Если ПоказыватьНоменклатуру(ДанныеНоменклатуры, СтрокаЭтапа, ЭтотОбъект) Тогда
			
			НоваяСтрока = Потомки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНоменклатуры);
			
			НоваяСтрока.ПредставлениеСтроки = ДанныеНоменклатуры.ПредставлениеНоменклатураЭтап;
			
			НоваяСтрока.ИндексНоменклатура = ИндексНоменклатура;
			НоваяСтрока.ИндексЭтапы        = ИндексЭтапы;
			
			Если СтрокаЭтапа.Заказ = ДанныеНоменклатуры.Заказ Тогда
				НоваяСтрока.ТипСтроки = ТипСтрокиПолуфабрикат();
			Иначе
				НоваяСтрока.ТипСтроки = ТипСтрокиПолуфабрикатДругогоЗаказа();
				НоваяСтрока.ИнформационнаяСтрока = ПредставлениеЗаказа(ДанныеНоменклатуры.Заказ);
			КонецЕсли;
			
			ЗаполнитьРассчитываемыеРеквизитыДерева(НоваяСтрока);
			НастроитьВыводПотомковНоменклатуры(ДанныеНоменклатуры, ЭтотОбъект, НоваяСтрока, НоваяСтрока.ПолучитьЭлементы());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВыводПотомковНоменклатуры(ДанныеНоменклатуры, Форма, СтрокаНоменклатура, Потомки)
	
	ИмеютсяПотомки = ИмеютсяПотомкиНоменклатуры(ДанныеНоменклатуры, Форма);
	
	Если ИмеютсяПотомки Тогда
		
		СтрокаНоменклатура.ПотомкиВыведены = Ложь;
		Потомки.Добавить();
		
	Иначе
		
		СтрокаНоменклатура.ПотомкиВыведены = Истина;
		
	КонецЕсли;
	
	ТребуетсяСоздатьЭтапы = ДанныеНоменклатуры.МожноСоздаватьЭтапы
		И ДанныеНоменклатуры.Спецификация.Пустая()
		И ДанныеНоменклатуры.КоличествоПлан > ДанныеНоменклатуры.КоличествоСоздано;
	
	Если ТребуетсяСоздатьЭтапы Тогда
		
		НоваяСтрока = Потомки.Добавить();
		НоваяСтрока.ТипСтроки = ТипСтрокиСоздатьЭтапы();
		НоваяСтрока.Заказ = СтрокаНоменклатура.Заказ;
		НоваяСтрока.ПотомкиВыведены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмеютсяПотомкиЭтапа(ДанныеЭтапа, Форма)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеЭтапа.ИндексыНоменклатуры) Тогда
		
		Для каждого ИндексНоменклатура Из ДанныеЭтапа.ИндексыНоменклатуры Цикл
			
			ДанныеНоменклатуры = Форма.Номенклатура[ИндексНоменклатура];
			Если ПоказыватьНоменклатуру(ДанныеНоменклатуры, ДанныеЭтапа, Форма) Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьНоменклатуру(ДанныеНоменклатуры, ДанныеЭтапаРодителя, Форма)
	
	Если Форма.СкрыватьВыполненное Тогда
		
		РодительВыполнен = ЭтапВыполненПолуфабрикатПроизведен(ДанныеЭтапаРодителя, Истина);
		ПолуфабрикатПроизведен = ЭтапВыполненПолуфабрикатПроизведен(ДанныеНоменклатуры, Ложь);
		
		Результат = НЕ РодительВыполнен ИЛИ НЕ ПолуфабрикатПроизведен;
		
	Иначе
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмеютсяПотомкиНоменклатуры(ДанныеНоменклатуры, Форма)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.ИндексыЭтапов) Тогда
		
		Для каждого ИндексЭтапы Из ДанныеНоменклатуры.ИндексыЭтапов Цикл
			
			ДанныеЭтапа = Форма.Этапы[ИндексЭтапы];
			
			Если Форма.ПоказыватьЭтапы Тогда
				
				Если ПоказыватьЭтап(ДанныеЭтапа, Форма) Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
				
			Иначе
				
				Если ИмеютсяПотомкиЭтапа(ДанныеЭтапа, Форма) Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьЭтап(ДанныеЭтапа, Форма)
	
	Если Форма.ПоказыватьЭтапы Тогда
		
		Если Форма.СкрыватьВыполненное Тогда
			
			Результат = НЕ ЭтапВыполненПолуфабрикатПроизведен(ДанныеЭтапа, Истина);
			
		Иначе
			
			Результат = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РаскрытьВерхнийУровеньСтруктурыЗаказов()
	
	СтрокиДерева = СтруктураЗаказов.ПолучитьЭлементы();
	
	Для каждого Строка Из СтрокиДерева Цикл
		
		Идентификатор = Строка.ПолучитьИдентификатор();
		
		Если НЕ Элементы.СтруктураЗаказов.Развернут(Идентификатор) Тогда
			
			Элементы.СтруктураЗаказов.Развернуть(Идентификатор, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеЗаказа(Заказ)
	
	Возврат Документы.ЗаказНаПроизводство2_2.ПолноеПредставлениеЗаказа(Заказ);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПродукция()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПолуфабрикат()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиЗаказ()
	
	Возврат 3;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиЭтап()
	
	Возврат 4;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПолуфабрикатДругогоЗаказа()
	
	Возврат 5;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиСоздатьЭтапы()
	
	Возврат 6;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПрочиеИзделия()
	
	Возврат 7;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерКартинки(ТипСтроки, ТипПроцесса)
	
	Если ТипСтроки = ТипСтрокиПолуфабрикат()
		ИЛИ ТипСтроки = ТипСтрокиПолуфабрикатДругогоЗаказа() Тогда
		
		Если ТипПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка") Тогда
			
			Результат = 3;
			
		Иначе
			
			Результат = 2;
			
		КонецЕсли;
		
	ИначеЕсли ТипСтроки = ТипСтрокиЭтап() Тогда
		
		Результат = 1;
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРассчитываемыеРеквизитыДерева(СтрокаДерева)
	
	СтрокаДерева.НомерКартинки = НомерКартинки(СтрокаДерева.ТипСтроки, СтрокаДерева.ТипПроцесса);
	
	Если СтрокаДерева.ТипСтроки = ТипСтрокиЭтап()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикат()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикатДругогоЗаказа() Тогда
		
		СтрокаДерева.ВыполненПроизведен = ЭтапВыполненПолуфабрикатПроизведен(
			СтрокаДерева, СтрокаДерева.ТипСтроки = ТипСтрокиЭтап());
		СтрокаДерева.ВыполненПроизведенРодитель = СтрокаДерева.ПолучитьРодителя().ВыполненПроизведен;
		
	Иначе
		
		СтрокаДерева.ВыполненПроизведен = Ложь;
		
	КонецЕсли;
	
	СтрокаДерева.КоличествоДефицит = СтрокаДерева.КоличествоПлан - СтрокаДерева.КоличествоФакт;
	СтрокаДерева.КоличествоДефицитИтого = СтрокаДерева.КоличествоПланИтого - СтрокаДерева.КоличествоФактИтого;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтапВыполненПолуфабрикатПроизведен(ДанныеЭтапаПолуфабриката, ЭтоЭтап)
	
	Если ЭтоЭтап Тогда
		
		Результат = ДанныеЭтапаПолуфабриката.Выполнен;
		
	Иначе
		
		Результат = ДанныеЭтапаПолуфабриката.КоличествоФакт = ДанныеЭтапаПолуфабриката.КоличествоПлан;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ОчиститьСообщения();
	
	РезультатЗапуска = ЗапуститьФоновоеЗаданиеНаСервере(
		НаименованиеЗадания,
		ИмяПроцедуры,
		ПараметрыПроцедуры);
	
	Если РезультатЗапуска.НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьВФонеЗавершение", ЭтотОбъект, Новый Структура("ИмяЗадания", ИмяЗадания)),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		
	Иначе
		
		ОбработатьЗавершениеЗаданияНаКлиенте(ИмяЗадания, РезультатЗапуска.РезультатЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	НачатьОжидание = Истина;
	РезультатЗадания = Неопределено;
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		
		НачатьОжидание = Ложь;
		РезультатЗадания = ОбработатьЗавершениеЗаданияНаСервере(ДлительнаяОперация);
		
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат Новый Структура("НачатьОжидание, РезультатЗадания", НачатьОжидание, РезультатЗадания);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		РезультатЗадания = ОбработатьЗавершениеЗаданияНаСервере(Результат);
		
		ОбработатьЗавершениеЗаданияНаКлиенте(ДопПараметры.ИмяЗадания, РезультатЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданияНаКлиенте(ИмяЗадания, РезультатЗадания)

	Если ИмяЗадания = "СформироватьЭтапыПроизводства" Тогда
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОФормированииЭтаповПроизводства(
			РезультатЗадания, УникальныйИдентификатор);
		
	ИначеЕсли ИмяЗадания = "ПометитьНаУдалениеЭтапыПроизводства" Тогда
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОПометкеНаУдалениеЭтаповПроизводства(
			РезультатЗадания);
		
	КонецЕсли;
	
	ОбновитьДанныеНаКлиенте(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьЗавершениеЗаданияНаСервере(Результат)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Результат.Статус = "Ошибка" Тогда
		
		Если ТипЗнч(РезультатЗадания) = Тип("Структура") И РезультатЗадания.Свойство("Сообщения") Тогда
			
			Для каждого Сообщение Из РезультатЗадания.Сообщения Цикл
			
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗадания;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	#Область СкрытьИнформационнуюСтроку
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовИнформационнаяСтрокаГиперссылка.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиПолуфабрикатДругогоЗаказа());
	ЗначенияОтбора.Добавить(ТипСтрокиСоздатьЭтапы());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область СкрытьНазначениеПолуфабриката
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиПродукция();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти

	#Область ПустоеКоличествоВСтрокаБезДанных
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоПлан.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоФакт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоДефицит.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиЗаказ());
	ЗначенияОтбора.Добавить(ТипСтрокиСоздатьЭтапы());
	ЗначенияОтбора.Добавить(ТипСтрокиПрочиеИзделия());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	#КонецОбласти
	
	#Область СкрытьКартинкиВСтроках
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовНомерКартинки.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиЗаказ());
	ЗначенияОтбора.Добавить(ТипСтрокиПродукция());
	ЗначенияОтбора.Добавить(ТипСтрокиСоздатьЭтапы());
	ЗначенияОтбора.Добавить(ТипСтрокиПрочиеИзделия());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	#Область ИтогиПоКоличеству
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоПланИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоФактИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоДефицитИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовТекстОбщееКоличество.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПланИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПлан");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФактИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФакт");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоПланИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоФактИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоДефицитИтого.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПланИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПлан");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФактИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФакт");

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовТекстОбщееКоличество.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПланИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПлан");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФактИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФакт");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Партия производства';
																|en = 'Production batch'"));
	
	#КонецОбласти
	
	#Область СоздатьЭтапы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовНомерКартинки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовПредставлениеСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовНазначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиСоздатьЭтапы();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовИнформационнаяСтрокаГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиСоздатьЭтапы();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать этапы';
																|en = 'Create steps'"));
	
	#КонецОбласти
	
	#Область ЦветФонаЗаказ
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиЗаказ();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	#КонецОбласти
	
	#Область ШрифтПродукция
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказов.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиПродукция());
	ЗначенияОтбора.Добавить(ТипСтрокиПрочиеИзделия());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	#КонецОбласти
	
	#Область ВыделитьСветлосерым
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиЭтап();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ВыполненПроизведен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказов.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиПолуфабрикат());
	ЗначенияОтбора.Добавить(ТипСтрокиПолуфабрикатДругогоЗаказа());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ВыполненПроизведен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ВыполненПроизведенРодитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	#Область ВыделитьКрасным
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовДатаОкончанияПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ВыполненПроизведен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ДатаОкончанияПлан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ДатаОкончанияПлан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	Если ЗначениеЗаполнено(Заказы) Тогда
		
		Если Заказы.Количество() = 1 Тогда
			
			ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказы[0].Значение, "Номер, Дата");
		
			НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ДанныеЗаказа.Номер, Ложь, Истина);
			ДатаЗаказа = Формат(ДанныеЗаказа.Дата, "ДЛФ=D");
			
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Структура заказа на производство № %1 от %2';
					|en = 'Structure of production order No. %1 as of %2 '"),
				НомерЗаказа,
				ДатаЗаказа);
			
		Иначе
			
			Заголовок = НСтр("ru = 'Структура заказов на производство';
							|en = 'Production order structure'");
			
		КонецЕсли;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Структура заказа на производство (не выбран заказ)';
						|en = 'Production order structure (order is not selected)'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Форма)
	
	Настройки = Новый Структура;
	Настройки.Вставить("СкрыватьВыполненное", Форма.СкрыватьВыполненное);
	Настройки.Вставить("ПоказыватьЭтапы", Форма.ПоказыватьЭтапы);
	
	СохранитьНастройкиФормыСервер(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормыСервер(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючФормы(),
		"",
		Настройки);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючФормы(), "");
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючФормы()
	
	Возврат "Отчет.СтруктураЗаказаНаПроизводство2_2.СтруктураЗаказа";
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПриСоздании()
	
	ГрафикИспользуется = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	
	Элементы.ДиаграммаГанта.Видимость = ГрафикИспользуется;
	Элементы.ДиагностикаЭтапа.Видимость = ГрафикИспользуется;
	
	Элементы.КонтекстноеМенюДиаграммаГанта.Видимость = ГрафикИспользуется;
	Элементы.КонтекстноеМенюДиагностикаЭтапа.Видимость = ГрафикИспользуется;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационнуюПанель()
	
	Если НеПоказыватьКомандуТребуетсяСформироватьЭтапы Тогда
		
		ВидимостьКоманды = Ложь;
		
	Иначе
		
		МассивСсылок = Заказы.ВыгрузитьЗначения();
	
		Если Документы.ЗаказНаПроизводство2_2.ТребуетсяУточнитьЭтапы(Заказы) Тогда
			ВидимостьКоманды = Ложь;
		Иначе
			ВидимостьКоманды = Документы.ЗаказНаПроизводство2_2.ТребуетсяСформироватьЭтапыПоСпецификации(Заказы);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаТребуетсяСформироватьЭтапы.Видимость = ВидимостьКоманды;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиаграммуГантаЗаказа(ТекущиеДанные)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрКоманды", ТекущиеДанные.Заказ);
	
	ОткрытьФорму(
		"Отчет.ДиаграммаПроизводстваЗаказа.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		ТекущиеДанные.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиаграммуГантаПродукции(ТекущиеДанные)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Распоряжение", ТекущиеДанные.Заказ);
	ПараметрыФормы.Вставить("ПартияПроизводства", ТекущиеДанные.ПартияПроизводства);
	
	ОткрытьФорму(
		"Отчет.ДиаграммаПроизводстваПартииЗапуска.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		ТекущиеДанные.ПартияПроизводства);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиаграммуГантаЭтапа(ТекущиеДанные)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрКоманды", ТекущиеДанные.Этап);
	
	ОткрытьФорму(
		"Отчет.ДиаграммаСмежныхЭтаповПроизводства.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		ТекущиеДанные.Этап);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтрокуЗаказаНаПроизводства(ТекущиеДанные)
	
	ДанныеСтроки = УправлениеПроизводствомКлиентСервер.СтруктураПродукцииЗаказа();
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	ДанныеСтроки.Склад         = ТекущиеДанные.Склад;
	ДанныеСтроки.Подразделение = ТекущиеДанные.Склад;
	
	УправлениеПроизводствомКлиент.ОткрытьСтрокуЗаказаНаПроизводства(ТекущиеДанные.Заказ, ДанныеСтроки, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСтруктурыПолуфабрикатаДругогоЗаказа(ТекущиеДанные)
	
	ПараметрЗаказы = Новый Массив;
	ПараметрЗаказы.Добавить(ТекущиеДанные.Заказ);
	
	ПараметрыФормы = Новый Структура("Заказы", ПараметрЗаказы);
	
	ОткрытьФорму("Отчет.СтруктураЗаказаНаПроизводство2_2.Форма.СтруктураЗаказа",
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияЭтапов(ТекущиеДанные)
	
	СтрокаПотребности = ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаПотребности.ПолучитьРодителя().ТипСтроки = ТипСтрокиЗаказ() Тогда
		
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъекта(СтрокаПотребности.Заказ, "ТипПроизводственногоПроцесса, ПартияПроизводства");
		
		ТипПроизводственногоПроцесса = ЗначенияРеквизитов.ТипПроизводственногоПроцесса;
		ПартияПроизводства           = ЗначенияРеквизитов.ПартияПроизводства;
		
	Иначе
		
		ТипПроизводственногоПроцесса = СтрокаПотребности.ТипПроцесса;
		ПартияПроизводства           = Неопределено;
		
	КонецЕсли;
	
	Дефицит = Новый Массив;
	
	КоличествоКСозданию = СтрокаПотребности.КоличествоПлан - СтрокаПотребности.КоличествоСоздано;
	
	Если КоличествоКСозданию > 0 Тогда
		
		Продукция = Новый Структура;
		
		Продукция.Вставить("Номенклатура",             СтрокаПотребности.Номенклатура);
		Продукция.Вставить("Характеристика",           СтрокаПотребности.Характеристика);
		Продукция.Вставить("Назначение",               СтрокаПотребности.Назначение);
		Продукция.Вставить("СписатьНаРасходы",         СтрокаПотребности.СписатьНаРасходы);
		Продукция.Вставить("СтатьяРасходов",           СтрокаПотребности.СтатьяРасходов);
		Продукция.Вставить("АналитикаРасходов",        СтрокаПотребности.АналитикаРасходов);
		Продукция.Вставить("АналитикаАктивовПассивов", СтрокаПотребности.АналитикаАктивовПассивов);
		Продукция.Вставить("Количество",               КоличествоКСозданию);
		Продукция.Вставить("КоличествоУпаковок",       КоличествоКСозданию);
		
		Если СтрокаПотребности.ТипПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
			Продукция.Вставить("Склад", СтрокаПотребности.Склад);
		Иначе
			Продукция.Вставить("Получатель", СтрокаПотребности.Склад);
		КонецЕсли;
		
		Дефицит.Добавить(Продукция);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартияПроизводства) Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
			СтрокаПотребности.Заказ,
			ПартияПроизводства,
			Дефицит,
			ЭтотОбъект);
		
	Иначе
		
		УправлениеПроизводствомКлиент.ОткрытьФормуСозданияНовойЦепочкиЭтапов(
			СтрокаПотребности.Заказ,
			ТипПроизводственногоПроцесса,
			СтрокаПотребности.НазначениеПродукция,
			Дефицит,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

#КонецОбласти

#КонецОбласти
