
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Получаем расписание из самого регламентного задания
	// если РЗ не задано, то расписание = Неопределено и будет создано на клиенте в момент редактирования расписания.
	РасписаниеРегламентногоЗадания = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьРасписаниеВыполненияКлассификатора(Объект.Ссылка);
	
	Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище();
	АдресСхемыКомпоновкиДанных = Адреса.СхемаКомпоновкиДанных;
	АдресНастроекКомпоновкиДанных = Адреса.НастройкиКомпоновкиДанных;	
	
	Элементы.ИнтерактивныйВводЗначений.Видимость = ВидОтображенияВидимостьНаСервере(Объект.ВидОтображения);
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеРасписания();
	
	УстановитьДоступностьГиперссылкиНастройкиРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.CRM_Классификаторы.ОбновитьДанныеРегламентногоЗадания(Отказ, РасписаниеРегламентногоЗадания, ТекущийОбъект);
	
	Если НЕ ПустаяСтрока(АдресНастроекКомпоновкиДанных) Тогда
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
	Иначе
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьПринадлежность(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастроитьПринадлежность_Завершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресСхемы"			 , АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроек"			 , АдресНастроекКомпоновкиДанных);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ОткрытьФорму("ПланВидовХарактеристик.CRM_Классификаторы.Форма.ФормаНастройкиОтборов",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	РедактированиеРасписанияРегламентногоЗадания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	АдресНастроекКомпоновкиДанных = "";
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеПриИзменении(Элемент)
	
	УстановитьДоступностьГиперссылкиНастройкиРасписания();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое.
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	// Открываем диалог для редактирования Расписания.
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = Расписание;
		ОбновитьПредставлениеРасписания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПринадлежность_Завершение(Результат, ДополнительныеПараметры) Экспорт

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		АдресНастроекКомпоновкиДанных = Результат;
	КонецЕсли;
	
КонецПроцедуры // НастроитьПринадлежность_Завершение()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)

	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект;
	
	Элементы.ГруппаДанныеРасписания.Видимость = 
		Объект.СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять");	
		
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		
		ПредставлениеРасписания = НСтр("ru='Расписание не задано';en='The schedule are not set'");
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьГиперссылкиНастройкиРасписания()
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = Объект.ИспользоватьРегламентноеЗадание;
	
КонецПроцедуры

&НаСервере 
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище()
	
	Возврат ПланыВидовХарактеристик.CRM_Классификаторы.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Объект);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидОтображенияВидимостьНаСервере(ВидОтображения)
	
	Возврат (ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение
				ИЛИ ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Тег);
	
КонецФункции

&НаКлиенте
Процедура ВидОтображенияПриИзменении(Элемент)
	Элементы.ИнтерактивныйВводЗначений.Видимость = ВидОтображенияВидимостьНаСервере(Объект.ВидОтображения);
КонецПроцедуры

#КонецОбласти
