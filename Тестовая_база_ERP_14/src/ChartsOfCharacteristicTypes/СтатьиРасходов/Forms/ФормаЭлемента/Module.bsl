
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоУТ = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	ЭтоУТБазовая = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	//++ НЕ УТКА
	Элементы.ГруппаСтраницаРеглУчет.Заголовок = НСтр("ru = 'Регламентированный учет и МФУ';
													|en = 'Compliance accounting and IFA'");
	//-- НЕ УТКА
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ГруппаСтраницаРеглУчет.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоУТ Тогда
		Элементы.КорреспондирующийСчет.Видимость = Ложь;
		Элементы.ГруппаРаздельныйУчетНДСУТ.Видимость = Ложь;
		Элементы.ВариантРаздельногоУчетаНДСУТ.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоУТ Тогда
		ЭлементСписка = Элементы.ВидДеятельностиРасходов.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность); 
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидДеятельностиРасходов.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоУТБазовая Тогда
		Элементы.ВариантРаспределенияРасходовРегл.Заголовок = НСтр("ru = 'Вариант распределения';
																	|en = 'Allocation option'");
		Элементы.ВариантРаспределенияРасходовУпр.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
	 ИЛИ Объект.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
		Элементы.КонтролироватьЗаполнениеАналитики.Видимость = Ложь;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	//++ НЕ УТ
	ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям();
	//-- НЕ УТ
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Не ЗначениеЗаполнено(ВариантРаспределенияРасходовУпр) Тогда
		ТекущийОбъект.ВариантРаспределенияРасходовУпр = ТекущийОбъект.ВариантРаспределенияРасходовРегл;
	Иначе
		ТекущийОбъект.ВариантРаспределенияРасходовУпр = ВариантРаспределенияРасходовУпр;
	КонецЕсли;
	
	Если ТекущийОбъект.ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов
	 И ТекущийОбъект.ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
		ТекущийОбъект.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	Если Не ПустаяСтрока(ТипЗначения) Тогда
		Если ТипЗначения = "ДокументСсылка.ЗаказКлиента"
			ИЛИ ТипЗначения = "ДокументСсылка.РеализацияТоваровУслуг"
		Тогда
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Истина;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов("
				|ДокументСсылка.АктВыполненныхРабот,
				|ДокументСсылка.РеализацияТоваровУслуг,
				|ДокументСсылка.РеализацияУслугПрочихАктивов,
				|ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
				//++ НЕ УТКА
				|ДокументСсылка.ЗаказДавальца,
				//-- НЕ УТКА
				|ДокументСсылка.ЗаказКлиента
				|");
		//++ НЕ УТ
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Ложь;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации");
		//-- НЕ УТ
		Иначе
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Ложь;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
		КонецЕсли;
	КонецЕсли;
	Если ТекущийОбъект.ВидЦенностиНДС.Пустая() Тогда
		Если ТекущийОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
			ТекущийОбъект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.Товары;
		Иначе
			ТекущийОбъект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.ДоступныеХозяйственныеОперации.Очистить();
	Для Каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
		Если ЭлементСписка.Пометка Тогда
			НоваяСтрока = ТекущийОбъект.ДоступныеХозяйственныеОперации.Добавить();
			НоваяСтрока.ХозяйственнаяОперация = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПолеТипЗначения = Элементы.ТипЗначения;
	Если ПолеТипЗначения.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено
		И Не Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы
		И Не ТипЗначения = "СправочникСсылка.ПрочиеАктивыПассивы" Тогда
		ТекстСообщения = НСтр("ru = 'В поле ""Аналитика расходов"" не выбрано ни одного вида аналитики';
								|en = 'No dimension kind is selected in the ""Expenditure dimension"" field'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			, // Ключ данных
			"ТипЗначения",
			, // Путь к данным
			Отказ);
	КонецЕсли;
		
	ПроверяемыеСтатьи = Новый Массив;
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	ПроверяемыеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам);
	Если ПроверяемыеСтатьи.Найти(Объект.Ссылка) <> Неопределено
	 И ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.ПустаяСсылка()
	 И ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать вариант распределения в упр. учете ""На финансовый результат""';
								|en = 'Select allocation option in man. accounting To financial result'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"ВариантРаспределенияРасходовУпр",
			,
			Отказ);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если НЕ Объект.ОграничитьИспользование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоступныеХозяйственныеОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СтатьяРасходов", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантРаспределенияРасходовПриИзмененииРегл(Элемент)
	
	ДоступностьКонтроляЗаполненияАналитик = Истина;
	Если Объект.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров") Тогда
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.Товары");
		Объект.ВариантРаздельногоУчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента");
		//++ НЕ УТ
		Объект.ПризнаватьРасходамиПриУСН = Истина;
		//-- НЕ УТ
		
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов") Тогда
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
		
//++ НЕ УТ
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты") Тогда
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
		Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения");
		
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы") Тогда
		Объект.РасходыНаОбъектыСтроительства = Ложь;
		Объект.РасходыНаОбъектыЭксплуатации = Ложь;
		Объект.РасходыНаНМАиНИОКР = Ложь;
		Если ТипЗначения = "СправочникСсылка.ОбъектыЭксплуатации" Тогда
			Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС");
			Объект.РасходыНаОбъектыЭксплуатации = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства" ИЛИ ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
			Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства");
			Объект.РасходыНаОбъектыСтроительства = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.НематериальныеАктивы" Тогда
			Объект.ВариантРаздельногоУчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРаздельногоУчетаНДС.Распределение");
			Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НМА");
			Объект.РасходыНаНМАиНИОКР = Истина;
		КонецЕсли;
		Объект.КонтролироватьЗаполнениеАналитики = Истина;
		ДоступностьКонтроляЗаполненияАналитик = Ложь;
//-- НЕ УТ
		
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять") Тогда
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
		Объект.ВариантРаздельногоУчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента");
	Иначе
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
	КонецЕсли;
	
	Элементы.КонтролироватьЗаполнениеАналитики.Видимость = ДоступностьКонтроляЗаполненияАналитик;
		
	ВариантРаспределенияРасходовРеглПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаспределенияРасходовПриИзмененииУпр(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьИспользованиеПриИзменении(Элемент)
	
	Элементы.ДоступныеХозяйственныеОперации.Доступность = Объект.ОграничитьИспользование;
	
	Если Не Объект.ОграничитьИспользование Тогда
		Для каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
			Если ЭлементСписка.Пометка Тогда
				ЭлементСписка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрямыеКосвенныеНУПриИзменении(Элемент)
	
	//++ НЕ УТ
	Объект.КосвенныеЗатратыНУ = ?(ПрямыеКосвенныеЗатратыНУ = 1, Истина, Ложь);
	//-- НЕ УТ
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиДляНалоговогоУчетаЗатратПриИзменении(Элемент)
	
	//++ НЕ УТ
	ВидДеятельностиДляНалоговогоУчетаЗатратПриИзмененииСервер();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиРасходовПриИзменении(Элемент)
	
	ВидДеятельностиРасходовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	//++ НЕ УТ
	СчетУчетаПриИзмененииСервер();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятиеКналоговомуУчетуПоПрочимРасходамПриИзменении(Элемент)
	
	//++ НЕ УТ
	ПринятиеКналоговомуУчетуПоПрочимРасходамПриИзмененииСервер();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасходовПриИзменении(Элемент)
	
	//++ НЕ УТ
	ВидРасходовПриИзмененииСервер();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРасходовПриИзменении(Элемент)
	
	ТипРасходовПриИзмененииСервер();
	//++ НЕ УТ
	УстановитьПараметрыВыбораСчетаУчета(ЭтаФорма);
	ПроверитьКорректностьУказанияСчетовУчета(ЭтаФорма);
	//-- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	
	//++ НЕ УТ
	Объект.РасходыНаНМАиНИОКР = Ложь;
	Объект.РасходыНаОбъектыСтроительства = Ложь;
	Объект.РасходыНаОбъектыЭксплуатации = Ложь;
	Если Объект.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы") Тогда
		Если ТипЗначения = "СправочникСсылка.ОбъектыЭксплуатации" Тогда
			Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС");
			Объект.РасходыНаОбъектыЭксплуатации = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.ОбъектыСтроительства"
		 ИЛИ ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22" Тогда
			Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства");
			Объект.РасходыНаОбъектыСтроительства = Истина;
		ИначеЕсли ТипЗначения = "СправочникСсылка.НематериальныеАктивы" Тогда
			Объект.ВариантРаздельногоУчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРаздельногоУчетаНДС.Распределение");
			Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НМА");
			Объект.РасходыНаНМАиНИОКР = Истина;
		КонецЕсли;
	КонецЕсли;
	УстановитьПараметрыВыбораСчетаУчета(ЭтаФорма);
	ПроверитьКорректностьУказанияСчетовУчета(ЭтаФорма);
	//-- НЕ УТ
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастроитьПравилаРаспределенияНажатие(Элемент)
	
	// ++ НЕ УТ	
	Отбор = Новый Структура("СтатьяРасходов", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.НастройкиРаспределения.ФормаСписка", Новый Структура("Отбор", Отбор));
	// -- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСчетаРеглУчетаПоОрганизациямИПодразделениям(Команда)
	
	//++ НЕ УТ
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросЗаписиОбъекта", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать объект. Записать?';
							|en = 'To continue, write the object. Write?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать';
													|en = 'Write'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям();
	//-- НЕ УТ
	
	Возврат; // Чтобы в УТ был не пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы = Новый Структура("СтатьяРасходов", Объект.Ссылка);
		ПараметрыФормы.Вставить("ВидДеятельностиРасходов", Объект.ВидДеятельностиРасходов);
		Результат = Неопределено;

		ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.Форма.РазблокированиеРеквизитов", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ВидДеятельностиРасходовПриИзмененииСервер()
	
	Если Объект.ВидДеятельностиРасходов <> Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность 
		И Объект.ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		Объект.ВариантРаспределенияРасходовРегл = Неопределено;
	КонецЕсли;
	
	//++ НЕ УТ
	УстановитьПараметрыВыбораСчетаУчета(ЭтаФорма);
	ПроверитьКорректностьУказанияСчетовУчета(ЭтаФорма);
	//-- НЕ УТ
	ЗаполнитьСписокВыбораКорСчета();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ТипРасходовПриИзмененииСервер()
	
	ЗаполнитьСписокВидовАналитикРасходов();
	
	Если Элементы.ТипЗначения.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
		Объект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ПустаяСсылка();
		Если Объект.ТипРасходов = Перечисления.ТипыРасходов.ЗакупкаТоваров Тогда
			ТипЗначения = "ДокументСсылка.ПриобретениеТоваровУслуг";
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров;
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.Производственные Тогда
			ТипЗначения = "СправочникСсылка.ПрочиеРасходы";
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты;
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.ПродажаТоваров Тогда
			ТипЗначения = "СправочникСсылка.Партнеры";
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы Тогда
			ТипЗначения = "СправочникСсылка.ПрочиеРасходы";
		//++ НЕ УТ
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА Тогда
			ТипЗначения = "СправочникСсылка.ОбъектыЭксплуатации";
			Объект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ОС;
			Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность Тогда
				Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			Иначе
				Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы;
				Объект.КонтролироватьЗаполнениеАналитики = Истина;
			КонецЕсли;
		//-- НЕ УТ
		ИначеЕсли Объект.ТипРасходов = Перечисления.ТипыРасходов.СкладскоеХранение Тогда
			ТипЗначения = "СправочникСсылка.Склады";
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим вариант распределения расходов (регл).
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.ЗакупкаТоваров
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.СкладскоеХранение Тогда
		Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.Производственные Тогда
		Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		
	ИначеЕсли Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА Тогда
		Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	КонецЕсли;
	
	// Проверим вариант распределения расходов (упр).
	Если ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.ЗакупкаТоваров
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.СкладскоеХранение Тогда
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		
	ИначеЕсли ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.Производственные Тогда
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		
	ИначеЕсли ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы
	 И Объект.ТипРасходов <> Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА Тогда
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВариантРаспределенияРасходовРеглПриИзмененииСервер(ИмяЭлемента)
	
	Если Объект.ДоступныеХозяйственныеОперации.Количество() > 0 Тогда
		ОчиститьНедоступныеХозяйственныеОперации();
	КонецЕсли;
	
	//++ НЕ УТ
	УстановитьЗначенияПоУмолчаниюВидовРасходов(ИмяЭлемента);
	УстановитьПараметрыВыбораСчетаУчета(ЭтотОбъект);
	ПроверитьКорректностьУказанияСчетовУчета(ЭтотОбъект);
	ЗаполнитьСписокВидовАналитикРасходов();
	//-- НЕ УТ
	ЗаполнитьСписокВидовАналитикРасходов();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура ПринятиеКналоговомуУчетуПоПрочимРасходамПриИзмененииСервер()
	
	Если Не Объект.ПринятиеКналоговомуУчету Тогда
		Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	
	Если Объект.ПринятиеКналоговомуУчету 
		  И Объект.ВидРасходов = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
		Объект.ВидРасходов = Неопределено;
		
	ИначеЕсли НЕ Объект.ПринятиеКналоговомуУчету 
		  И Объект.ВидРасходов <> Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
		Объект.ВидРасходов = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	КонецЕсли;

	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиДляНалоговогоУчетаЗатратПриИзмененииСервер()
	
	Если Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
		Объект.ПризнаватьРасходамиПриУСН = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВидРасходовПриИзмененииСервер()
	
	НормируемыеРасходы = Перечисления.ВидыРасходовНУ.НормируемыеРасходы();
	Если НормируемыеРасходы.Найти(Объект.ВидРасходов) <> Неопределено Тогда
		Объект.КосвенныеЗатратыНУ = Истина;
		ПрямыеКосвенныеЗатратыНУ = 1;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьКорректностьУказанияСчетовУчета(Форма)
	
	Счета = Новый Структура;
	Счета.Вставить("СчетУчета");
	Счета.Вставить("СчетСписанияОСНО");
	Счета.Вставить("СчетСписанияЕНВД");
	
	Для каждого КлючИЗначение Из Счета Цикл
		Счет = КлючИЗначение.Ключ;
		Если Форма.Элементы[Счет].ПараметрыВыбора.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СписокДоступных = Форма.Элементы[Счет].ПараметрыВыбора[0].Значение;
		Если СписокДоступных.Найти(Форма.Объект[Счет]) = Неопределено Тогда
			Форма.Объект[Счет] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	НеБазовая = ПолучитьФункциональнуюОпцию("НеБазоваяВерсия");
	
	Если Объект.Ссылка = ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж Тогда
		Элементы.СпособРаспределенияПоНаправлениямДеятельности.Видимость = Ложь;
	КонецЕсли;
	
	// Закладка "Основное".
	Элементы.СтатьяРасходов.Видимость =
		(Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	Элементы.СпособРаспределенияПоНаправлениямДеятельности.Видимость = 
		(Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	Элементы.ПравилоРаспределенияНаСебестоимость.Видимость =
		(Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	Элементы.ПустойРеквизитРегл.Видимость = НеБазовая И (
		(Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.ПустаяСсылка())
		ИЛИ (Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		ИЛИ (Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять)
		ИЛИ (Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
			И НЕ ФормироватьФинансовыйРезультат));
		
	Элементы.ПравилоРаспределенияРасходовРегл.Видимость =
		(Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
		
	Элементы.ГруппаПравилоРаспределенияНаПроизводство.Видимость = 
		(Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		Или (Объект.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
		
	//++ НЕ УТ	
	Элементы.СпособРаспределенияПоНаправлениямДеятельностиКосвенные.Видимость =
		Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты
		И Объект.КосвенныеЗатратыНУ
		И ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	//-- НЕ УТ
		
	Элементы.СтатьяРасходовУпр.Видимость = НеБазовая И
		(ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	Элементы.СпособРаспределенияПоНаправлениямДеятельностиУпр.Видимость = НеБазовая И
		(ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	Элементы.ПравилоРаспределенияНаСебестоимостьУпр.Видимость = НеБазовая И
		(ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	Элементы.ПравилоРаспределенияРасходовУпр.Видимость = НеБазовая И
		(ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	Элементы.ПустойРеквизитУпр.Видимость = НеБазовая И (
		(ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.ПустаяСсылка())
		ИЛИ (ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		ИЛИ (ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять)
		ИЛИ (Объект.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
			И НЕ ФормироватьФинансовыйРезультат));
		
	Элементы.СтатьяРасходовУпр.Доступность =
		(Объект.ВариантРаспределенияРасходовРегл <> ВариантРаспределенияРасходовУпр);
	Элементы.СпособРаспределенияПоНаправлениямДеятельностиУпр.Доступность =
		(Объект.ВариантРаспределенияРасходовРегл <> ВариантРаспределенияРасходовУпр);
	Элементы.ПравилоРаспределенияНаСебестоимостьУпр.Доступность =
		(Объект.ВариантРаспределенияРасходовРегл <> ВариантРаспределенияРасходовУпр);
	Элементы.ПравилоРаспределенияРасходовУпр.Доступность =
		(Объект.ВариантРаспределенияРасходовРегл <> ВариантРаспределенияРасходовУпр);
	
	Элементы.ГруппаВидАналитики.Видимость =
		(Объект.ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	
	// Закладка "Ограничение использования".	
		
	Элементы.ДоступныеХозяйственныеОперации.Доступность = (Объект.ОграничитьИспользование И Не ТолькоПросмотр);
	
	// Закладка "Регламентированный учет".
	
	ВариантРаспределенияРегл = Объект.ВариантРаспределенияРасходовРегл;
	ВариантРаспределенияУпр = ВариантРаспределенияРасходовУпр;
	НаПрочиеАктивы = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	
	ВидимостьНастроекОтраженияВРеглУчете = НЕ НаПрочиеАктивы И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	//++ НЕ УТ
	ВидимостьНастроекОтраженияВРеглУчете = ВидимостьНастроекОтраженияВРеглУчете И ПравоДоступа("Просмотр", Метаданные.ПланыСчетов.Хозрасчетный);
	//-- НЕ УТ
	Элементы.ГруппаОтражениеВРеглУчете.Видимость = ВидимостьНастроекОтраженияВРеглУчете;
	Элементы.ГруппаКлассификацияРасходовДляНалоговогоУчета.Видимость =  НЕ НаПрочиеАктивы И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	Элементы.ГруппаДоступностьДляВыбораВДокументах.Видимость = НЕ НаПрочиеАктивы;
	
	//++ НЕ УТ
	
	Элементы.ВариантРаздельногоУчетаНДСНаНаправленияДеятельности.Видимость =
		(Объект.ВидЦенностиНДС <> Перечисления.ВидыЦенностей.НМА)
		И (Объект.ВидЦенностиНДС <> Перечисления.ВидыЦенностей.ОС)
		И (Объект.ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	Элементы.ВариантРаздельногоУчетаНДС_ОС.Видимость = (Объект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ОС);
	
	ЭлементСпискаВыбора = Элементы.ВариантРаздельногоУчетаНДСНаНаправленияДеятельности.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента);
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты
	 ИЛИ ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
		ЭлементСпискаВыбора.Представление = НСтр("ru = 'Определяется учетной политикой организации';
												|en = 'Determined by company accounting policy'");
	Иначе
		ЭлементСпискаВыбора.Представление = НСтр("ru = 'НДС относится на вид налогообложения документа закупки';
												|en = 'VAT is classified as taxation kind of purchase document'");
	КонецЕсли;
	
	ЭлементСпискаВыбора = Элементы.ВариантРаздельногоУчетаНДС_ОС.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента);
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты
	 ИЛИ ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
		ЭлементСпискаВыбора.Представление = НСтр("ru = 'Определяется учетной политикой организации';
												|en = 'Determined by company accounting policy'");
	Иначе
		ЭлементСпискаВыбора.Представление = НСтр("ru = 'НДС относится на вид налогообложения документа закупки';
												|en = 'VAT is classified as taxation kind of purchase document'");
	КонецЕсли;
	
	ПрочаяДеятельность = Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
	
	НаВнеоборотныеАктивы = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		ИЛИ (ВариантРаспределенияУпр = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
	НаСебестоимостьТоваровРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	НаНаправленияДеятельностиРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	НаРасходыБудущихПериодовРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	НаПроизводственныеЗатратыРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	НеРаспределятьРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	
	ИспользуетсяВидРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ВидРасходовИспользуется(Объект);
	ИспользуетсяВидПрочихРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ВидПрочихРасходовИспользуется(Объект);
	Элементы.ВидРасходов.Видимость = ИспользуетсяВидРасходов;
	Элементы.ВидПрочихРасходов.Видимость = ИспользуетсяВидПрочихРасходов;
	
	Элементы.ВидРасходов.Доступность                        = Объект.ПринятиеКналоговомуУчету;
	Элементы.КонтролироватьЗаполнениеАналитики.Видимость	= Не НаВнеоборотныеАктивы;
	Элементы.ВидРБП.Доступность                             = Объект.ПринятиеКналоговомуУчету И НаРасходыБудущихПериодовРегл;
	
	НормируемыеРасходы = Перечисления.ВидыРасходовНУ.НормируемыеРасходы();
	ЭтоНормируемыеРасходы = (НормируемыеРасходы.Найти(Объект.ВидРасходов) <> Неопределено);
	Элементы.ПрямыеКосвенныеНУ.Доступность = НЕ ЭтоНормируемыеРасходы;
	
	Элементы.СтраницыРасходыНУ.ТекущаяСтраница = ?(НаРасходыБудущихПериодовРегл, Элементы.СтраницаВидыРБП, Элементы.СтраницаВидыРасходовНУ);
	Элементы.ГруппаВидАктиваРБП.Видимость      = НаРасходыБудущихПериодовРегл;
	Элементы.ГруппаПрямыеКосвенные.Видимость   = НаПроизводственныеЗатратыРегл;
	Если Элементы.ГруппаПрямыеКосвенные.Видимость Тогда
		Элементы.ГруппаПрямыеКосвенные.Доступность = Объект.ПринятиеКналоговомуУчету;
	КонецЕсли;
	
	Элементы.ГруппаКлассификацияРасходовДляУСН.Видимость = ПолучитьФункциональнуюОпцию("ПрименяетсяУСНДоходыМинусРасходы") И НЕ НаВнеоборотныеАктивы;
	
	ИспользуетсяЕНВД = ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД");
	РасходыПоОСНО = (Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	РасходыПоЕНВД = (Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
	РасходыПоОСНОиЕНВД = (Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	
	Элементы.ГруппаВидДеятельностиДляНалоговогоУчетаЗатрат.Видимость =
			(НаПроизводственныеЗатратыРегл ИЛИ  НаНаправленияДеятельностиРегл ИЛИ НеРаспределятьРегл) 
			И (ИспользуетсяЕНВД ИЛИ РасходыПоЕНВД ИЛИ РасходыПоОСНОиЕНВД);
	
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратЕНВД.Видимость = ИспользуетсяЕНВД;
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратОСНОиЕНВД.Видимость = ИспользуетсяЕНВД И НаНаправленияДеятельностиРегл;
	
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратОСНО.Доступность = Объект.ПринятиеКналоговомуУчету;
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратЕНВД.Доступность = Объект.ПринятиеКналоговомуУчету;
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратОСНОиЕНВД.Доступность = Объект.ПринятиеКналоговомуУчету;
	
	Элементы.ГруппаСчетаСписания.Видимость = 
		НЕ ПрочаяДеятельность И (НаНаправленияДеятельностиРегл ИЛИ (НаПроизводственныеЗатратыРегл И Объект.КосвенныеЗатратыНУ));
	
	Элементы.СчетСписанияОСНО.Заголовок = ?(ИспользуетсяЕНВД, НСтр("ru = 'Счет списания (ОСНО)';
																	|en = 'Write-off account (GTS)'"), НСтр("ru = 'Счет списания';
																										|en = 'Write-off account'"));
	Элементы.ГруппаСчетСписанияЕНВД.Видимость = ИспользуетсяЕНВД;
	
	Элементы.СчетСписанияОСНО.Доступность = (РасходыПоОСНО ИЛИ РасходыПоОСНОиЕНВД) И ДоступныеСчетаУчетаПрочихРасходов.Найти(Объект.СчетУчета) = Неопределено;
	Элементы.СчетСписанияЕНВД.Доступность = (РасходыПоЕНВД ИЛИ РасходыПоОСНОиЕНВД) И ДоступныеСчетаУчетаПрочихРасходов.Найти(Объект.СчетУчета) = Неопределено;
	
	Элементы.ПризнаватьРасходамиПриУСН.Доступность = Не РасходыПоЕНВД И Не НаСебестоимостьТоваровРегл;
	Если РасходыПоЕНВД Тогда
		НадписьПодсказкаПризнаватьРасходамиПриУСН = 
			НСтр("ru = 'Расходы, относящиеся только к деятельности облагаемой ЕНВД, не могут быть признаны для целей УСН.';
				|en = 'Expenses related only to the activity subject to UTII cannot be recognized for STS purposes.'");
	ИначеЕсли НаСебестоимостьТоваровРегл Тогда
		НадписьПодсказкаПризнаватьРасходамиПриУСН = 
			НСтр("ru = 'Расходы, распределяющиеся на себестоимость товаров, всегда признаются для целей УСН.';
				|en = 'Expenses allocated to goods cost are always recognized for STS purposes.'");
	Иначе
		НадписьПодсказкаПризнаватьРасходамиПриУСН =
			НСтр("ru = 'Определяет, должен ли заноситься расход в Книгу учета доходов и расходов для целей УСН при объекте налогообложения ""Доходы минус расходы"".';
				|en = 'Determines whether the expense should be recorded in the Ledger of income and expenditure for STS purposes for the ""Income minus expenses"" taxation object.'");
	КонецЕсли;
	//-- НЕ УТ
	
	Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок = 
		НСтр("ru = 'Данный вариант распределения устарел, вместо статей с таким вариантом распределения в документах следует использовать статьи активов/пассивов.';
			|en = 'This allocation option is outdated, use asset/liability items instead of the items with such allocation option in documents.  '");
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок = Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок 
			+ " " 
			+ НСтр("ru = 'Для использования статей активов/пассивов включите опцию ""Учитывать прочие активы и пассивы"" (раздел Администрирование - Финансовый результат).';
					|en = 'To use asset/liability items, enable the ""Record other assets and liabilities"" option (section Settings - Financial result).'")
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТиповЗначенийАналитики()
	
	МассивИсключаемыхТипов = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказКлиента");
	Иначе
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	КонецЕсли;
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказПоставщику");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.СделкиСКлиентами");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ЭквайринговыеТерминалы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФиксироватьПретензииКлиентов") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ПретензииКлиентов");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.МаркетинговыеМероприятия");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ПеремещениеТоваров");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.НаправленияДеятельности");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроекты") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Проекты");
	КонецЕсли;
	
	//++ НЕ УТ
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыЭксплуатации");
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.НематериальныеАктивы");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		МассивИсключаемыхТипов.Добавить("ПеречислениеСсылка.ВидыОперацийПоЗарплате");
	КонецЕсли;
	//-- НЕ УТ
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		МассивИсключаемыхТипов.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Организации");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Кассы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаСборку");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.СборкаТоваров");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыСтроительства22");
	КонецЕсли;
	
	//++ НЕ УТ
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбъектыСтроительства") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыСтроительства");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьРезервыПредстоящихРасходов") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыУчетаРезервовПредстоящихРасходов");
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаПроизводство");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаПроизводство2_2");
	КонецЕсли;
	//-- НЕ УТКА
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки")
	 И Не ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ПоступлениеТоваровНаСклад");
	КонецЕсли;
	
	//++ НЕ УТКА
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаРемонт");
	КонецЕсли;
	//-- НЕ УТКА
	
	Поле = Элементы.ТипЗначения;
	Для Каждого ИсключаемыйТип Из МассивИсключаемыхТипов Цикл
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ИсключаемыйТип);
		Если ЭлементСписка <> Неопределено И ТипЗначения <> ИсключаемыйТип Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Объект.ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл Тогда
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.ПустаяСсылка();
	Иначе
		ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовУпр;
	КонецЕсли;
	ФормироватьФинансовыйРезультат = ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	
	УстановитьТипЗначения(Объект.ТипЗначения);
	//++ НЕ УТ
	ПолучитьДоступныеСчетаУчета();
	УстановитьПараметрыВыбораСчетаУчета(ЭтаФорма);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ВидРасходов) Тогда
		НормируемыеРасходы = Перечисления.ВидыРасходовНУ.НормируемыеРасходы();
		Если НормируемыеРасходы.Найти(Объект.ВидРасходов) <> Неопределено Тогда
			Объект.КосвенныеЗатратыНУ = Истина;
		КонецЕсли;
	КонецЕсли;
	ПрямыеКосвенныеЗатратыНУ = ?(Объект.КосвенныеЗатратыНУ, 1, 0);
	//-- НЕ УТ
	ЗаполнитьСписокВыбораКорСчета();
	УправлениеЭлементамиФормы();
	ЗаполнитьСписокДоступныхХозяйственныхОпераций();
	ЗаполнитьСписокВидовАналитикРасходов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначения(ВыбранныйТипЗначения)
	
	Если ВыбранныйТипЗначения = Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
			ВыбранныйТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Иначе
			ВыбранныйТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
		КонецЕсли;
	КонецЕсли;
	
	СписокТиповЗначений = Новый СписокЗначений;
	СписокТиповЗначений.Добавить("СправочникСсылка.МаркетинговыеМероприятия");
	СписокТиповЗначений.Добавить("СправочникСсылка.НаправленияДеятельности");
	СписокТиповЗначений.Добавить("СправочникСсылка.СделкиСКлиентами");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказКлиента");
	СписокТиповЗначений.Добавить("СправочникСсылка.Склады");
	СписокТиповЗначений.Добавить("СправочникСсылка.Кассы");
	СписокТиповЗначений.Добавить("СправочникСсылка.Номенклатура");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказПоставщику");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПриобретениеТоваровУслуг");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	СписокТиповЗначений.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПеремещениеТоваров");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	СписокТиповЗначений.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПрочиеРасходы");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПрочиеАктивыПассивы");
	СписокТиповЗначений.Добавить("СправочникСсылка.Партнеры");
	СписокТиповЗначений.Добавить("СправочникСсылка.Организации");
	СписокТиповЗначений.Добавить("СправочникСсылка.ФизическиеЛица");
	СписокТиповЗначений.Добавить("СправочникСсылка.СтруктураПредприятия");
	СписокТиповЗначений.Добавить("СправочникСсылка.Проекты");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПретензииКлиентов");
	СписокТиповЗначений.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
	//++ НЕ УТКА
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаПроизводство");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаПроизводство2_2");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаРемонт");
	//-- НЕ УТКА
	//++ НЕ УТ
	СписокТиповЗначений.Добавить("СправочникСсылка.ОбъектыЭксплуатации");
	СписокТиповЗначений.Добавить("СправочникСсылка.ОбъектыСтроительства");
	СписокТиповЗначений.Добавить("СправочникСсылка.НематериальныеАктивы");
	СписокТиповЗначений.Добавить("ПеречислениеСсылка.ВидыОперацийПоЗарплате");
	СписокТиповЗначений.Добавить("СправочникСсылка.ОбъектыУчетаРезервовПредстоящихРасходов");
	//-- НЕ УТ
	СписокТиповЗначений.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаСборку");
	СписокТиповЗначений.Добавить("ДокументСсылка.СборкаТоваров");
	СписокТиповЗначений.Добавить("ДокументСсылка.ВводОстатков");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПоступлениеТоваровНаСклад");
	Для Каждого ЭлементСписка Из СписокТиповЗначений Цикл
		Если ВыбранныйТипЗначения.СодержитТип(Тип(ЭлементСписка.Значение)) Тогда
			ТипЗначения = ЭлементСписка.Значение;
			//++ НЕ УТ
			Если ЭлементСписка.Значение = "СправочникСсылка.ОбъектыЭксплуатации"
			 И Объект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
				ТипЗначения = "СправочникСсылка.ОбъектыСтроительства22";
			КонецЕсли;
			//-- НЕ УТ
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНедоступныеХозяйственныеОперации()
	
	ТекущиеДоступныеХозяйственныеОперации = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(ДоступныеХозяйственныеОперации);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСписокХозяйственныхОпераций(
		ДоступныеХозяйственныеОперации,
		ВариантРаспределенияРасходовУпр,
		Объект.ВариантРаспределенияРасходовРегл);
		
	Для Каждого ТекущийЭлементСписка Из ТекущиеДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(ТекущийЭлементСписка.Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКорСчета()
	
	СписокВыбора = Элементы.КорреспондирующийСчет.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность Тогда
		СписокВыбора.Добавить("20", НСтр("ru = 'Основное производство (20)';
										|en = 'Main production (20)'"));
		СписокВыбора.Добавить("23", НСтр("ru = 'Вспомогательные производства (23)';
										|en = 'Auxiliary production (23)'"));
		СписокВыбора.Добавить("25", НСтр("ru = 'Общепроизводственные расходы (25)';
										|en = 'Production expenses (25)'"));
		СписокВыбора.Добавить("26", НСтр("ru = 'Общехозяйственные расходы (26)';
										|en = 'Business expenses (26)'"));
		СписокВыбора.Добавить("44.01", НСтр("ru = 'Издержки обращения (44.01)';
											|en = 'Support request costs (44.01)'"));
		СписокВыбора.Добавить("44.02", НСтр("ru = 'Коммерческие расходы (44.02)';
											|en = 'Selling expenses (44.02)'"));
	КонецЕсли;
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность Тогда
		СписокВыбора.Добавить("91.02", НСтр("ru = 'Прочие расходы (91.02)';
											|en = 'Other expenses (91.02)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхХозяйственныхОпераций()
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСписокХозяйственныхОпераций(
		ДоступныеХозяйственныеОперации,
		ВариантРаспределенияРасходовУпр,
		Объект.ВариантРаспределенияРасходовРегл);
	
	Для Каждого СтрокаТаблицы Из Объект.ДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(СтрокаТаблицы.ХозяйственнаяОперация);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовАналитикРасходов()
	
	СписокВыбора = Элементы.ТипЗначения.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ЗакупкаТоваров") Тогда
		СписокВыбора.Добавить("ДокументСсылка.ЗаказПоставщику", 					НСтр("ru = 'Заказ поставщику';
																						|en = 'Purchase order'"));
		СписокВыбора.Добавить("ДокументСсылка.ПриобретениеТоваровУслуг", 			НСтр("ru = 'Приобретение товаров и услуг';
																							|en = 'Purchase of goods and services'"));
		СписокВыбора.Добавить("ДокументСсылка.ПоступлениеТоваровНаСклад", 					НСтр("ru = 'Поступление товаров';
																									|en = 'Uninvoiced receipt'"));
		СписокВыбора.Добавить("ДокументСсылка.ВводОстатков", 						НСтр("ru = 'Ввод остатков';
																							|en = 'Enter remaining quantity'"));
		СписокВыбора.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями", 	НСтр("ru = 'Передача товаров между организациями';
																							|en = 'Goods handover between companies'"));
		
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.СкладскоеХранение") Тогда
		СписокВыбора.Добавить("СправочникСсылка.Склады", 			НСтр("ru = 'Склад (Место хранения)';
																			|en = 'Warehouse (Storage location)'"));
		СписокВыбора.Добавить("СправочникСсылка.Номенклатура", 		НСтр("ru = 'Номенклатура';
																			|en = 'Products and services'"));
		СписокВыбора.Добавить("ДокументСсылка.ЗаказНаПеремещение", 	НСтр("ru = 'Заказ на перемещение';
																			|en = 'Transfer order'"));
		СписокВыбора.Добавить("ДокументСсылка.ПеремещениеТоваров", 	НСтр("ru = 'Перемещение товаров';
																			|en = 'Goods transfer'"));
		СписокВыбора.Добавить("ДокументСсылка.ЗаказНаСборку", 		НСтр("ru = 'Заказ на сборку (разборку)';
																			|en = 'Assembly (disassembly) order'"));
		СписокВыбора.Добавить("ДокументСсылка.СборкаТоваров", 		НСтр("ru = 'Сборка (разборка) товаров';
																			|en = 'Goods assembly (disassembly)'"));
		
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ПродажаТоваров") Тогда
		СписокВыбора.Добавить("СправочникСсылка.Партнеры",					НСтр("ru = 'Клиент';
																					|en = 'Client'"));
		СписокВыбора.Добавить("СправочникСсылка.СделкиСКлиентами",			НСтр("ru = 'Сделка';
																					|en = 'Transaction'"));
		СписокВыбора.Добавить("ДокументСсылка.ЗаказКлиента",				НСтр("ru = 'Заказ / Реализация';
																				|en = 'Order / Sale'"));
		СписокВыбора.Добавить("СправочникСсылка.МаркетинговыеМероприятия",	НСтр("ru = 'Маркетинговое мероприятие';
																					|en = 'Marketing activity'"));
		
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.Производственные") Тогда
		//++ НЕ УТКА
		Если ПолучитьФункциональнуюОпцию("ИспользуетсяУправлениеПроизводством21и22") Тогда
			СписокВыбора.Добавить("ДокументСсылка.ЗаказНаПроизводство", 	НСтр("ru = 'Заказ на производство (2.1)';
																				|en = 'Production order (2.1)'"));
			СписокВыбора.Добавить("ДокументСсылка.ЗаказНаПроизводство2_2", 	НСтр("ru = 'Заказ на производство (2.2)';
																					|en = 'Production order (2.2)'"));
		Иначе
			СписокВыбора.Добавить("ДокументСсылка.ЗаказНаПроизводство", 	НСтр("ru = 'Заказ на производство';
																				|en = 'Production order'"));
			СписокВыбора.Добавить("ДокументСсылка.ЗаказНаПроизводство2_2", 	НСтр("ru = 'Заказ на производство';
																					|en = 'Production order'"));
		КонецЕсли;
		СписокВыбора.Добавить("ДокументСсылка.ЗаказНаРемонт",           НСтр("ru = 'Заказ на ремонт';
																			|en = 'Repair order'"));
		//-- НЕ УТКА
		СписокВыбора.Добавить("СправочникСсылка.СтруктураПредприятия", 	НСтр("ru = 'Подразделение';
																				|en = 'Department'"));
		СписокВыбора.Добавить("СправочникСсылка.ПрочиеРасходы", 		НСтр("ru = 'Прочие расходы';
																			|en = 'Other expenses'"));
		//++ НЕ УТ
		СписокВыбора.Добавить("СправочникСсылка.ОбъектыЭксплуатации", 	НСтр("ru = 'Объекты эксплуатации';
																				|en = 'Facilities'"));
		//-- НЕ УТ
	//++ НЕ УТ
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА") Тогда
		СписокВыбора.Добавить("СправочникСсылка.ОбъектыЭксплуатации", 	НСтр("ru = 'Основные средства';
																				|en = 'Fixed assets'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") И ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
			СписокВыбора.Добавить("СправочникСсылка.ОбъектыСтроительства22",НСтр("ru = 'Объекты строительства (2.2)';
																				|en = 'Construction objects (2.2)'"));
			СписокВыбора.Добавить("СправочникСсылка.ОбъектыСтроительства", 	НСтр("ru = 'Объекты строительства (2.4)';
																					|en = 'Construction objects (2.4)'"));
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
			СписокВыбора.Добавить("СправочникСсылка.ОбъектыСтроительства22",НСтр("ru = 'Объекты строительства';
																				|en = 'Construction objects'"));
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
			СписокВыбора.Добавить("СправочникСсылка.ОбъектыСтроительства",НСтр("ru = 'Объекты строительства';
																				|en = 'Construction objects'"));	
		КонецЕсли;
		СписокВыбора.Добавить("СправочникСсылка.НематериальныеАктивы", 	НСтр("ru = 'НМА / НИОКР';
																				|en = 'IA / R&D'"));
	//-- НЕ УТ
		
	ИначеЕсли Объект.ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ПрочиеРасходы") Тогда
		СписокВыбора.Добавить("СправочникСсылка.СтруктураПредприятия", 		НСтр("ru = 'Подразделение';
																					|en = 'Department'"));
		СписокВыбора.Добавить("СправочникСсылка.Организации", 				НСтр("ru = 'Организация';
																					|en = 'Company'"));
		СписокВыбора.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц", НСтр("ru = 'Виды курсовых разниц';
																				|en = 'Kinds of exchange rate differences'"));
		СписокВыбора.Добавить("СправочникСсылка.Кассы", 					НСтр("ru = 'Касса';
																				|en = 'Cash account'"));
		СписокВыбора.Добавить("СправочникСсылка.ФизическиеЛица", 			НСтр("ru = 'Физическое лицо';
																					|en = 'Individual'"));
		СписокВыбора.Добавить("СправочникСсылка.НаправленияДеятельности", 	НСтр("ru = 'Направление деятельности';
																					|en = 'Line of business'"));
		СписокВыбора.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов",НСтр("ru = 'Договор кредита (депозита)';
																				|en = 'Credit (deposit) contract'"));
		СписокВыбора.Добавить("СправочникСсылка.МаркетинговыеМероприятия", 	НСтр("ru = 'Маркетинговое мероприятие';
																					|en = 'Marketing activity'"));
		СписокВыбора.Добавить("СправочникСсылка.ПретензииКлиентов", 		НСтр("ru = 'Претензия клиента';
																				|en = 'Customer claim'"));
		СписокВыбора.Добавить("СправочникСсылка.Проекты", 					НСтр("ru = 'Проект';
																					|en = 'Project'"));
		//++ НЕ УТ
		СписокВыбора.Добавить("ПеречислениеСсылка.ВидыОперацийПоЗарплате", 	НСтр("ru = 'Виды обязательного страхования';
																					|en = 'Compulsory medical insurance kinds'"));
		СписокВыбора.Добавить("СправочникСсылка.ОбъектыЭксплуатации", 		НСтр("ru = 'Объекты эксплуатации';
																					|en = 'Facilities'"));
		//-- НЕ УТ
		СписокВыбора.Добавить("СправочникСсылка.Склады", 					НСтр("ru = 'Склад (Место хранения)';
																					|en = 'Warehouse (Storage location)'"));
		СписокВыбора.Добавить("СправочникСсылка.Номенклатура", 				НСтр("ru = 'Номенклатура';
																					|en = 'Products and services'"));
		СписокВыбора.Добавить("СправочникСсылка.ПрочиеРасходы", 			НСтр("ru = 'Прочие расходы';
																				|en = 'Other expenses'"));
		//++ НЕ УТКА
		СписокВыбора.Добавить("ДокументСсылка.ЗаказНаРемонт",               НСтр("ru = 'Заказ на ремонт';
																				|en = 'Repair order'"));
		//-- НЕ УТКА
	КонецЕсли;
	
	//++ НЕ УТ
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
		ИЛИ Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
		СписокВыбора.Добавить("СправочникСсылка.ОбъектыУчетаРезервовПредстоящихРасходов", НСтр("ru = 'Объекты учета резервов';
																								|en = 'Reserve accounting objects'"));
	КонецЕсли;
	//-- НЕ УТ
	
	УстановитьВидимостьТиповЗначенийАналитики();
		
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура СчетУчетаПриИзмененииСервер()
	
	Если ДоступныеСчетаУчетаПрочихРасходов.Найти(Объект.СчетУчета) <> Неопределено Тогда
		Объект.СчетСписанияЕНВД = Неопределено;
		Объект.СчетСписанияОСНО = Неопределено;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчаниюВидовРасходов(Элемент)
	
	Если Элемент = "ВидРасходов" Тогда
		УстановитьПринадлежностьСтатьиРасходовКналоговомуУчету();
	КонецЕсли;
	
	// Предопределенные значения.
	ВидРасходовПустой        = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	ВидРасходовНеУчитываемые = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	ВидПрочихРасходовПустой  = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка();
	ВидРБППустой             = Перечисления.ВидыРБП.ПустаяСсылка();
	
	// Вариант распределения влияет на возможность отнесения статьи к 91 счету или счетам затрат.
	ДоступностьВидаПрочихРасходов = (Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	ДоступностьВидаРасходов       = (Не Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	ДоступностьВидаРБП            = (Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	
	// Вид расходов должен соответствовать флагу принятия к НУ.
	Если Не Объект.ПринятиеКналоговомуУчету И Не Объект.ВидРасходов = ВидРасходовНеУчитываемые Тогда
		Объект.ВидРасходов = ВидРасходовНеУчитываемые;
		
	ИначеЕсли Объект.ПринятиеКналоговомуУчету
		   И (Объект.ВидРасходов = ВидРасходовНеУчитываемые ИЛИ Не ДоступностьВидаРасходов) Тогда
		Объект.ВидРасходов = ВидРасходовПустой;
		
	КонецЕсли;
	
	// Если вариант распределения не позволяет учитывать прочие расходы, то очищаем поле.
	Если Не ДоступностьВидаПрочихРасходов И НЕ Объект.ВидПрочихРасходов = ВидПрочихРасходовПустой Тогда
		Объект.ВидПрочихРасходов = ВидПрочихРасходовПустой;
	КонецЕсли;
	
	Если (НЕ ДоступностьВидаРБП ИЛИ НЕ Объект.ПринятиеКналоговомуУчету) И Объект.ВидРБП <> ВидРБППустой Тогда
		Объект.ВидРБП = ВидРБППустой;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПринадлежностьСтатьиРасходовКналоговомуУчету()
	
	ВидРасходовНеУчитываемые = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	
	Если Объект.ВидРасходов = ВидРасходовНеУчитываемые И Объект.ПринятиеКналоговомуУчету Тогда
		Объект.ПринятиеКналоговомуУчету = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоступныеСчетаУчета()
	
	ДоступныеСчетаУчетаРасходов = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаУчетаПрочихРасходов = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаУчетаОС = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаУчетаОбъектыСтроительства = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаУчетаНМА = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаСписанияРасходов = Новый ФиксированныйМассив(Новый Массив);
	
	Если НЕ ПравоДоступа("Просмотр",  Метаданные.ПланыСчетов.Хозрасчетный) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасходов();
	
	ДоступныеСчетаУчетаРасходов = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасходов);
	ДоступныеСчетаУчетаПрочихРасходов = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаПрочихРасходов);
	ДоступныеСчетаУчетаОС = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаОС);
	ДоступныеСчетаУчетаОбъектыСтроительства = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаОбъектыСтроительства);
	ДоступныеСчетаУчетаНМА = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаНМА);
	ДоступныеСчетаСписанияРасходов = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаСписания);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетаУчета(Форма)
	
	ОснонаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ОсновнаяДеятельность");
	ПрочаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ПрочаяДеятельность");
	ОснонаяИПрочаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность");
	
	ПараметрыВыбора = Новый Массив;
	Если Форма.Объект.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы") Тогда
		Если Форма.Объект.РасходыНаОбъектыЭксплуатации Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаОС));
		ИначеЕсли Форма.Объект.РасходыНаОбъектыСтроительства Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаОбъектыСтроительства));
		ИначеЕсли Форма.Объект.РасходыНаНМАиНИОКР Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаНМА));
		КонецЕсли;
	ИначеЕсли Форма.Объект.ВидДеятельностиРасходов = ОснонаяДеятельность Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаРасходов));
	ИначеЕсли Форма.Объект.ВидДеятельностиРасходов = ПрочаяДеятельность Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаПрочихРасходов));
	Иначе
		СчетаУчетаРасходовИПрочихРасходов = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаРасходовИПрочихРасходов, Форма.ДоступныеСчетаУчетаРасходов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаРасходовИПрочихРасходов, Форма.ДоступныеСчетаУчетаПрочихРасходов);
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаУчетаРасходовИПрочихРасходов)));
	КонецЕсли;
	
	Форма.Элементы.СчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ПараметрыВыбораСчетаСписания = Новый Массив;
	ПараметрыВыбораСчетаСписания.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаСписанияРасходов));
	
	Форма.Элементы.СчетСписанияОСНО.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСчетаСписания);
	Форма.Элементы.СчетСписанияЕНВД.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСчетаСписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросЗаписиОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтатьяРасходов", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияРасходов.Форма.ФормаНастройки", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям(Результат, ДополнительныеПараметры) Экспорт
	
	ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям()
	
	ЗаголовокКоманды = НСтр("ru = 'Посмотреть настройки счетов учета по организациям и подразделениям';
							|en = 'View GL account settings by companies and departments'");
	
	Если ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ПорядокОтраженияРасходов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Количество
		|ИЗ
		|	РегистрСведений.ПорядокОтраженияРасходов КАК ПорядокОтражения
		|ГДЕ
		|	ПорядокОтражения.СтатьяРасходов = &СтатьяРасходов";
		Запрос.УстановитьПараметр("СтатьяРасходов", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЗаголовокКоманды = НСтр("ru = 'Настроить счета учета по организациям и подразделениям';
									|en = 'Configure accounts by companies and departments'");
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Изменить настройку счетов учета по организациям и подразделениям';
									|en = 'Change GL account setting by companies and departments'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НастроитьСчетаРеглУчетаПоОрганизациямИПодразделениям.Заголовок = ЗаголовокКоманды; 
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти
