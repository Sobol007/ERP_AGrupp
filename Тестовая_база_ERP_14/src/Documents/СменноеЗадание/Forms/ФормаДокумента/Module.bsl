
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	СвойстваСписка.ТекстЗапроса = СтрЗаменить(
		ОперацииДокумент.ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("ОперацииПереопределяемый.Этап"));
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ОперацииДокумент, СвойстваСписка);
	
	СвойстваСписка.ТекстЗапроса = СтрЗаменить(
		ОперацииРегистр.ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("ОперацииПереопределяемый.Этап"));
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ОперацииРегистр, СвойстваСписка);
	
	НастроитьОтборСписков();
	
	// Видимость команд для изменения объекта
	ВидимостьКоманд = ПравоДоступа("Изменение", Метаданные.Документы.СменноеЗадание);
	
	Элементы.УстановитьСтатусФормируется.Видимость  = ВидимостьКоманд;
	Элементы.УстановитьСтатусСформировано.Видимость = ВидимостьКоманд;
	Элементы.УстановитьСтатусЗакрыто.Видимость      = ВидимостьКоманд;
	
	// Видимость команд для изменения производственных операций
	ВидимостьКоманд = ПравоДоступа("Изменение", Метаданные.Документы.ПроизводственнаяОперация2_2);
	
	Элементы.ОперацииРегистр_ПодборОпераций.Видимость  = ВидимостьКоманд;
	Элементы.ОперацииДокумент_ПодборОпераций.Видимость = ВидимостьКоманд;
	
	Элементы.ОперацииДокумент_УстановитьСтатусВыполняется.Видимость = ВидимостьКоманд;
	Элементы.ОперацииДокумент_УстановитьСтатусВыполнена.Видимость   = ВидимостьКоманд;
	Элементы.ОперацииДокумент_УстановитьСтатусНеВыполнена.Видимость = ВидимостьКоманд;
	Элементы.ОперацииДокумент_УстановитьСтатусПропущена.Видимость   = ВидимостьКоманд;
	
	Элементы.ОперацииДокументКонтекстноеМеню_УстановитьСтатусВыполняется.Видимость = ВидимостьКоманд;
	Элементы.ОперацииДокументКонтекстноеМеню_УстановитьСтатусВыполнена.Видимость   = ВидимостьКоманд;
	Элементы.ОперацииДокументКонтекстноеМеню_УстановитьСтатусНеВыполнена.Видимость = ВидимостьКоманд;
	Элементы.ОперацииДокументКонтекстноеМеню_УстановитьСтатусПропущена.Видимость   = ВидимостьКоманд;
	
	Элементы.ОперацииДокумент_НазначитьРабочийЦентр.Видимость            = ВидимостьКоманд;
	Элементы.ОперацииДокумент_ОтменитьНазначениеРабочегоЦентра.Видимость = ВидимостьКоманд;
	
	Элементы.ОперацииДокументКонтекстноеМеню_НазначитьРабочийЦентр.Видимость            = ВидимостьКоманд;
	Элементы.ОперацииДокументКонтекстноеМеню_ОтменитьНазначениеРабочегоЦентра.Видимость = ВидимостьКоманд;
	
	// ПодключаемоеОборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = ОперацииДокумент.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ОперацииДокументКоманды;
	ПараметрыРазмещения.ПрефиксГрупп = "ОперацииДокумент";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);	
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПроизводственнаяОперация" Тогда
		
		ПриИзмененииОпераций(ЭтотОбъект);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	Если ОперацииИзРегистра(Объект.Статус) Тогда
		Элементы.ОперацииРегистр.Обновить();
	Иначе
		Элементы.ОперацииДокумент.Обновить();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастроитьОтборСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтатусыДокументовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтборВСтатусеСоздана() Тогда
		
		СтатусОперацийОтбор = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Создана");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтборВСтатусеВыполняется() Тогда
		
		СтатусОперацийОтбор = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполняется");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтборВСтатусеВыполнена() Тогда
		
		СтатусОперацийОтбор = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполнена");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтборВСтатусеНеВыполнена() Тогда
		
		СтатусОперацийОтбор = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.НеВыполнена");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтборВСтатусеПропущена() Тогда
		
		СтатусОперацийОтбор = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Пропущена");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ОперацииДокумент,
		"Статус",
		СтатусОперацийОтбор,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(СтатусОперацийОтбор));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтатусОперацийОтбор");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтключитьОтборПоСтатусу() Тогда
		
		СтатусОперацийОтбор = Неопределено;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ОперацииДокумент,
		"Статус",
		СтатусОперацийОтбор,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(СтатусОперацийОтбор));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СтатусОперацийОтбор");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперацииРегистр

&НаКлиенте
Процедура ОперацииРегистрВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОперацииРегистрОперацияНаименование"
		ИЛИ Поле.Имя = "ОперацииРегистрОперация" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Операция);
	ИначеЕсли Поле.Имя = "ОперацииРегистрИсполнитель" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Исполнитель);
	ИначеЕсли Поле.Имя = "ОперацииРегистрРабочийЦентр" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.РабочийЦентр);
	ИначеЕсли Поле.Имя = "ОперацииРегистрВидРабочегоЦентра" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ВидРабочегоЦентра);
	ИначеЕсли Поле.Имя = "ОперацииРегистрПредставлениеЭтапа"
		ИЛИ Поле.Имя = "ОперацииРегистрЭтап" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Этап);
	ИначеЕсли Поле.Имя = "ОперацииРегистрРаспоряжение" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииРегистрПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменение операций возможно только после записи документа.
			|Записать и продолжить?';
			|en = 'You can change operations only after writing the document. 
			|Write and continue?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументИДобавитьОперацииЗаверешение",
			ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуДобавленияОпераций(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииРегистрПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	КлючиОпераций = ПроверитьПолучитьОперацииДляИзменения();
	
	Если КлючиОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменение операций возможно только после записи документа.
			|Записать и продолжить?';
			|en = 'You can change operations only after writing the document. 
			|Write and continue?'");
	    
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументИИзменитьОперацииЗаверешение",
			ЭтотОбъект,
			Новый Структура("КлючиОпераций", КлючиОпераций));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуИзмененияОпераций(КлючиОпераций);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииРегистрПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	КлючиОпераций = ПроверитьПолучитьОперацииДляИзменения();
	
	Если КлючиОпераций <> Неопределено Тогда
		
		ОчиститьСообщения();
		
		УдалитьОперации(КлючиОпераций);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперацииДокумент

&НаКлиенте
Процедура ОперацииДокументПриАктивизацииСтроки(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОперацииДокументТекущаяСтрока");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОперацииДокумент

&НаКлиенте
Процедура ОперацииДокумент_УстановитьСтатусВыполняется(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОперацииДокумент);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке операций будет установлен статус ""Выполняется"". Продолжить?';
						|en = 'Status of the operations selected in the list will be set to In progress. Continue?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	ДопПараметры.Вставить("Статус", "Выполняется");
	ДопПараметры.Вставить("СтатусПредставление", НСтр("ru = 'Выполняется';
														|en = 'Active'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОперацииДокументУстановитьСтатусЗавершение", 
		ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииДокумент_УстановитьСтатусВыполнена(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОперацииДокумент);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке операций будет установлен статус ""Выполнена"". Продолжить?';
						|en = 'Status of the operations selected in the list will be set to Completed. Continue?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	ДопПараметры.Вставить("Статус", "Выполнена");
	ДопПараметры.Вставить("СтатусПредставление", НСтр("ru = 'Выполнена';
														|en = 'Completed'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОперацииДокументУстановитьСтатусЗавершение", 
		ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииДокумент_УстановитьСтатусНеВыполнена(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОперацииДокумент);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке операций будет установлен статус ""Не выполнена"". Продолжить?';
						|en = 'Status of the operations selected in the list will be set to Not completed. Continue?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	ДопПараметры.Вставить("Статус", "НеВыполнена");
	ДопПараметры.Вставить("СтатусПредставление", НСтр("ru = 'Не выполнена';
														|en = 'Not completed'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОперацииДокументУстановитьСтатусЗавершение", 
		ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииДокумент_УстановитьСтатусПропущена(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОперацииДокумент);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		
		Если НЕ Элементы.ОперацииДокумент.ДанныеСтроки(Ссылка).МожноПропустить Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выделенные операции не могут быть пропущены.';
											|en = 'Selected operations cannot be skipped.'"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке операций будет установлен статус ""Пропущена"". Продолжить?';
						|en = 'Status of the operations selected in the list will be set to Skipped. Continue?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	ДопПараметры.Вставить("Статус", "Пропущена");
	ДопПараметры.Вставить("СтатусПредставление", НСтр("ru = 'Пропущена';
														|en = 'Skipped'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОперацииДокументУстановитьСтатусЗавершение", 
		ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииДокументУстановитьСтатусЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ОперацииДокументУстановитьСтатусНаСервере(
		ДопПараметры.Операции,
		ДопПараметры.Статус);
	
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
		Элементы.ОперацииДокумент,
		КоличествоОбработанных,
		ДопПараметры.Операции.Количество(),
		ДопПараметры.СтатусПредставление);
	
КонецПроцедуры

&НаСервере
Функция ОперацииДокументУстановитьСтатусНаСервере(Ссылки, Статус)
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(Ссылки, Статус);
	
	Если КоличествоОбработанных <> 0 Тогда
		
		ПриИзмененииОпераций(ЭтотОбъект);
		
	КонецЕсли;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

&НаКлиенте
Процедура ОперацииДокумент_НазначитьРабочийЦентр(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОперацииДокумент);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидРабочегоЦентра = Неопределено;
	
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.ОперацииДокумент.ДанныеСтроки(Ссылка);
			
		Если НЕ ДанныеСтроки.ВидРабочегоЦентра.Пустая() Тогда
			
			Если ВидРабочегоЦентра = Неопределено Тогда
					
				ВидРабочегоЦентра = ДанныеСтроки.ВидРабочегоЦентра;
				
			ИначеЕсли ВидРабочегоЦентра <> ДанныеСтроки.ВидРабочегоЦентра Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Выбраны операции с различными видами рабочих центров';
												|en = 'Operations with different work center kinds are selected'"));
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура;
	Если НЕ Объект.Подразделение.Пустая() Тогда
		Отбор.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	Если ВидРабочегоЦентра <> Неопределено Тогда
		Отбор.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОперацииДокументНазначитьРабочийЦентрЗавершение",
		ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.РабочиеЦентры.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииДокументНазначитьРабочийЦентрЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ОперацииДокументНазначитьРабочийЦентрНаСервере(
			ДопПараметры.Операции,
			РезультатЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииДокумент_ОтменитьНазначениеРабочегоЦентра(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОперацииДокумент);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОперацииДокументНазначитьРабочийЦентрНаСервере(
		ВыделенныеСтроки,
		ПредопределенноеЗначение("Справочник.РабочиеЦентры.ПустаяСсылка"));
	
КонецПроцедуры

&НаСервере
Процедура ОперацииДокументНазначитьРабочийЦентрНаСервере(Операции, РабочийЦентр)
	
	Документы.ПроизводственнаяОперация2_2.НазначитьРабочийЦентрОперациям(Операции, РабочийЦентр);
	
	Элементы.ОперацииДокумент.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	Если СтрНайти(Команда.Имя, "ОперацииДокумент") = 0 Тогда
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	Иначе
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ОперацииДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	Если СтрНайти(Контекст.ИмяКомандыВФорме, "ОперацииДокумент") = 0 Тогда
		ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	Иначе
		ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ОперацииДокумент, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура УстановитьСтатусФормируется(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Для изменения статуса требуется записать документ.
			|Записать и продолжить?';
			|en = 'To change status, it is required to write the document. 
			|Write and continue?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаписатьДокументИУстановитьСтатусФормируетсяЗаверешение",
			ЭтотОбъект,
			Новый Структура("ЭтоНовый", Объект.Ссылка.Пустая()));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли НЕ Объект.Ссылка.Пустая() И ЕстьРучныеОперации(Объект.Ссылка) Тогда
		
		ПоказатьВопросУдалениеРучныхОпераций();
		
	Иначе
		
		УстановитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Формируется"));
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументИУстановитьСтатусФормируетсяЗаверешение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		
		Если НЕ ДопПараметры.ЭтоНовый
			И ЕстьРучныеОперации(Объект.Ссылка) Тогда
			
			ПоказатьВопросУдалениеРучныхОпераций();
		
		Иначе
			
			УстановитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Формируется"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСформировано(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Для изменения статуса требуется записать документ.
			|Записать и продолжить?';
			|en = 'To change status, it is required to write the document. 
			|Write and continue?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументИУстановитьСтатусСформированоЗаверешение",
			ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если НарушенПорядокНазначения(Объект.Ссылка) Тогда
			
			ОткрытьПредупреждениеНарушенПорядокНазначения(
				ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Сформировано"));
				
		Иначе
			
			УстановитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Сформировано"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументИУстановитьСтатусСформированоЗаверешение(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		
		Если НарушенПорядокНазначения(Объект.Ссылка) Тогда
			
			ОткрытьПредупреждениеНарушенПорядокНазначения(
				ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Сформировано"));
				
		Иначе
			
			УстановитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Сформировано"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыто(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Для изменения статуса требуется записать документ.
			|Записать и продолжить?';
			|en = 'To change status, it is required to write the document. 
			|Write and continue?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументИУстановитьСтатусЗакрытоЗаверешение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Действия = ДействияПередУстановкойСтатусаЗакрыто(Объект.Ссылка);
		
		Если Действия.ПредупредитьНарушенПорядок Тогда
			
			ОткрытьПредупреждениеНарушенПорядокНазначения(
				ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто"));
			
		ИначеЕсли Действия.ОткрытьПомощникЗакрытия Тогда
			
			ОткрытьПомощникЗакрытия();
			
		Иначе
			
			УстановитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументИУстановитьСтатусЗакрытоЗаверешение(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		
		Действия = ДействияПередУстановкойСтатусаЗакрыто(Объект.Ссылка);
		
		Если Действия.ПредупредитьНарушенПорядок Тогда
			
			ОткрытьПредупреждениеНарушенПорядокНазначения(
				ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто"));
			
		ИначеЕсли Действия.ОткрытьПомощникЗакрытия Тогда
			
			ОткрытьПомощникЗакрытия();
			
		Иначе
			
			УстановитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменение операций возможно только после записи документа.
			|Записать и продолжить?';
			|en = 'You can change operations only after writing the document. 
			|Write and continue?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗапсатьДокументИПодобратьОперацииЗаверешение",
			ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуДобавленияОпераций(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапсатьДокументИПодобратьОперацииЗаверешение(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		
		ОткрытьФормуДобавленияОпераций(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДанных

&НаСервере
Процедура УдалитьОперации(КлючиОпераций)
	
	РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.УдалитьОперацииПоКлючам(КлючиОпераций);
	
	ПриИзмененииОпераций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(Статус)
	
	ОчиститьСообщения();
	
	НачатьОжидание = УстановитьСтатусВФоне(Статус);
	
	Если НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("УстановитьСтатусВФонеЗавершение", ЭтотОбъект),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		
	Иначе
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьСтатусВФоне(Статус)
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("Статус", Статус);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Установка статуса сменному заданию';
			|en = 'Set status to shift job'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.СменноеЗадание.УстановитьСтатусВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НачатьОжидание = Истина;
		
	Иначе
		
		ОбработатьРезультатУстановкиСтатусаВФоне(ДлительнаяОперация);
		
		НачатьОжидание = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат НачатьОжидание;
	
КонецФункции

#КонецОбласти

#Область Помощники

&НаКлиенте
Процедура ОткрытьФормуИзмененияОпераций(КлючиОпераций)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("КлючиОпераций", КлючиОпераций);
	ПараметрыФормы.Вставить("СменноеЗадание", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ФормированиеСменныхЗаданий.Форма.НазначениеОпераций",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ОперацииРегистр_ИзменитьЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииРегистр_ИзменитьЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ПриИзмененииОпераций(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникЗакрытия()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПомощникЗакрытияЗаверешение",
		ЭтотОбъект);
	
	ОткрытьФорму("Документ.СменноеЗадание.Форма.ПомощникЗакрытия",
		Новый Структура("Ссылка", Объект.Ссылка),
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникЗакрытияЗаверешение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Булево") И РезультатЗакрытия Тогда
		
		УстановитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияОпераций(РежимПодбора)
	
	ОткрытьФорму(
		"Обработка.ФормированиеСменныхЗаданий.Форма.ДобавлениеОперацийВДокумент",
		Новый Структура("СменноеЗадание, РежимПодбора", Объект.Ссылка, РежимПодбора),
		ЭтаФорма,
		УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ДобавлениеОперацийЗаверешение", ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеОперацийЗаверешение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПредупреждениеНарушенПорядокНазначения(НовыйСтатус)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредупреждениеНарушенПорядокНазначенияЗаверешение",
		ЭтотОбъект,
		Новый Структура("Статус", НовыйСтатус));
	
	ОткрытьФорму("Документ.СменноеЗадание.Форма.НарушенПорядокНазначения",
		Новый Структура("Ссылка", Объект.Ссылка),
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеНарушенПорядокНазначенияЗаверешение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Булево") И РезультатЗакрытия Тогда
		
		УстановитьСтатус(ДопПараметры.Статус);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПоказатьВопросУдалениеРучныхОпераций()
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПоказатьВопросУдалениеРучныхОперацийЗаверешение", ЭтотОбъект),
		НСтр("ru = 'При изменении статуса будут удалены операции, введенные вручную. Продолжить?';
			|en = 'When changing the status, the operations entered manually will be deleted. Continue?'"),
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросУдалениеРучныхОперацийЗаверешение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Формируется"));
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемоеОборудование
&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОперацииДокумент Тогда
			Элементы.ОперацииДокумент.ТекущаяСтрока = МассивСсылок[0];
			Если Элементы.ОперацииДокумент.ТекущаяСтрока = Неопределено Тогда
				ПоказатьЗначение(Неопределено, МассивСсылок[0]);
			КонецЕсли;
		Иначе
			ПоказатьЗначение(Неопределено, МассивСсылок[0]);
		КонецЕсли;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПроизводственнаяОперация2_2.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции
// Конец СтандартныеПодсистемы.ПодключаемоеОборудование

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Операции регистр - ед изм времени выполнения Секунда
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРегистрВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииРегистр.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Секунда;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'сек';
																								|en = 'sec'")));
	
	// Операции регистр - ед изм времени выполнения Минута
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРегистрВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииРегистр.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Минута;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'мин';
																								|en = 'min'")));
	
	// Операции регистр - ед изм времени выполнения Час
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРегистрВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииРегистр.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Час;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'ч';
																								|en = 'h'")));
	
	// Операции регистр - ед изм времени выполнения Сутки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРегистрВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииРегистр.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'сут';
																								|en = 'd'")));
	
	// Операции регистр - представление этапа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРегистрЭтап.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ОперацииРегистр.ПредставлениеЭтапа"));
	
	// Операции регистр - красный цвет текста у строк с нарушенным порядком назначения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРегистр.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииРегистр.НарушенПорядокНазначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Операции документ - ед изм времени выполнения Секунда
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииДокументВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииДокумент.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Секунда;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'сек';
																								|en = 'sec'")));
	
	// Операции документ - ед изм времени выполнения Минута
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииДокументВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииДокумент.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Минута;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'мин';
																								|en = 'min'")));
	
	// Операции документ - ед изм времени выполнения Час
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииДокументВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииДокумент.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Час;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'ч';
																								|en = 'h'")));
	
	// Операции документ - ед изм времени выполнения Сутки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииДокументВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОперацииДокумент.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'сут';
																								|en = 'd'")));
	
	// Операции документ - представление этапа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииДокументЭтап.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ОперацииДокумент.ПредставлениеЭтапа"));
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьРеквизитыПоПодразделению();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,
		ИтогиПоОперациям(Объект.Ссылка, Объект.Статус));
		
	ЦветНеактивнойГиперссылки = ЦветаСтиля.НезаполненноеПолеТаблицы;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыПоПодразделению();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Подразделение");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоПодразделению()
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	ИспользоватьСмены = ПараметрыПодразделения.ИспользоватьСмены;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	// Отбор по подразделению в списках
	Если СтруктураРеквизитов.Свойство("Подразделение") 
		ИЛИ Инициализация Тогда
		
		Элементы.Смена.Видимость = Форма.ИспользоватьСмены;
		
		Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Объект.Подразделение));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Статус") 
		ИЛИ Инициализация Тогда
		
		ОперацииИзРегистра = ОперацииИзРегистра(Объект.Статус);
		
		Элементы.СтраницаОперацииРегистр.Видимость = ОперацииИзРегистра;
		Элементы.ОперацииРегистр.Видимость = ОперацииИзРегистра;
		
		Элементы.СтраницаОперацииДокумент.Видимость = НЕ ОперацииИзРегистра;
		Элементы.ОперацииДокумент.Видимость = НЕ ОперацииИзРегистра;
		Элементы.ОперацииДокументКоманды.Видимость = НЕ ОперацииИзРегистра;
		
		Элементы.УстановитьСтатусФормируется.Доступность = Объект.Статус <> ПредопределенноеЗначение(
			"Перечисление.СтатусыСменныхЗаданий.Формируется");
		Элементы.УстановитьСтатусСформировано.Доступность = Объект.Статус <> ПредопределенноеЗначение(
			"Перечисление.СтатусыСменныхЗаданий.Сформировано");
		
		ДокументЗакрыт = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто");
		
		Элементы.УстановитьСтатусЗакрыто.Доступность = НЕ ДокументЗакрыт;
		Элементы.ОперацииДокумент_ПодборОпераций.Доступность = НЕ ДокументЗакрыт;
		Элементы.ОперацииДокумент.ТолькоПросмотр = ДокументЗакрыт;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("ОперацииДокументТекущаяСтрока")
		ИЛИ Инициализация Тогда
		
		ДоступностьКоманд = Элементы.ОперацииДокумент.ТекущаяСтрока <> Неопределено
			И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто");
		
		Элементы.ОперацииДокумент_УстановитьСтатусВыполняется.Доступность = ДоступностьКоманд;
		Элементы.ОперацииДокумент_УстановитьСтатусВыполнена.Доступность = ДоступностьКоманд;
		Элементы.ОперацииДокумент_УстановитьСтатусНеВыполнена.Доступность = ДоступностьКоманд;
		Элементы.ОперацииДокумент_УстановитьСтатусПропущена.Доступность = ДоступностьКоманд;
		
		Элементы.ОперацииДокументКонтекстноеМеню_УстановитьСтатусВыполняется.Доступность = ДоступностьКоманд;
		Элементы.ОперацииДокументКонтекстноеМеню_УстановитьСтатусВыполнена.Доступность = ДоступностьКоманд;
		Элементы.ОперацииДокументКонтекстноеМеню_УстановитьСтатусНеВыполнена.Доступность = ДоступностьКоманд;
		Элементы.ОперацииДокументКонтекстноеМеню_УстановитьСтатусПропущена.Доступность = ДоступностьКоманд;
		
		Элементы.ОперацииДокумент_НазначитьРабочийЦентр.Доступность = ДоступностьКоманд;
		Элементы.ОперацииДокумент_ОтменитьНазначениеРабочегоЦентра.Доступность = ДоступностьКоманд;
		
		Элементы.ОперацииДокументКонтекстноеМеню_НазначитьРабочийЦентр.Доступность = ДоступностьКоманд;
		Элементы.ОперацииДокументКонтекстноеМеню_ОтменитьНазначениеРабочегоЦентра.Доступность = ДоступностьКоманд;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("ОперацииДокумент")
		ИЛИ Инициализация Тогда
		
		Если ОперацииИзРегистра(Объект.Статус) Тогда
			
			Элементы.ДекорацияСтатусыДокументов.Видимость = Ложь;
			
		Иначе
			
			МассивСтрок = Новый Массив;
		    МассивСтрок.Добавить(НСтр("ru = 'В статусе';
										|en = 'In the status'"));
			МассивСтрок.Добавить(" ");
			
			// Создана
			Содержимое = ?(Форма.ВСтатусеСоздана = 0, НСтр("ru = 'Создана';
															|en = 'Created'"),
				СтрШаблон(НСтр("ru = 'Создана (%1)';
								|en = 'Created (%1)'"), Форма.ВСтатусеСоздана));
			ЦветТекста = ?(Форма.ВСтатусеСоздана = 0, Форма.ЦветНеактивнойГиперссылки, Неопределено);
			
			КомандаОтбор = Новый ФорматированнаяСтрока(
				Содержимое,,
				ЦветТекста,,
				ЗначениеГиперссылкиОтборВСтатусеСоздана());
			
			МассивСтрок.Добавить(КомандаОтбор);
						
			МассивСтрок.Добавить(", ");
			
			// Выполняется
			Содержимое = ?(Форма.ВСтатусеВыполняется = 0, НСтр("ru = 'Выполняется';
																|en = 'Active'"),
				СтрШаблон(НСтр("ru = 'Выполняется (%1)';
								|en = 'Executed (%1)'"), Форма.ВСтатусеВыполняется));
			ЦветТекста = ?(Форма.ВСтатусеВыполняется = 0, Форма.ЦветНеактивнойГиперссылки, Неопределено);
			
			КомандаОтбор = Новый ФорматированнаяСтрока(
				Содержимое,,
				ЦветТекста,,
				ЗначениеГиперссылкиОтборВСтатусеВыполняется());
				
			МассивСтрок.Добавить(КомандаОтбор);
			
			МассивСтрок.Добавить(", ");
			
			// Выполнена
			Содержимое = ?(Форма.ВСтатусеВыполнена = 0, НСтр("ru = 'Выполнена';
															|en = 'Completed'"),
				СтрШаблон(НСтр("ru = 'Выполнена (%1)';
								|en = 'Executed (%1)'"), Форма.ВСтатусеВыполнена));
			ЦветТекста = ?(Форма.ВСтатусеВыполнена = 0, Форма.ЦветНеактивнойГиперссылки, Неопределено);
			
			КомандаОтбор = Новый ФорматированнаяСтрока(
				Содержимое,,
				ЦветТекста,,
				ЗначениеГиперссылкиОтборВСтатусеВыполнена());
				
			МассивСтрок.Добавить(КомандаОтбор);
			
			МассивСтрок.Добавить(", ");
			
			// Не выполнена
			Содержимое = ?(Форма.ВСтатусеНеВыполнена = 0, НСтр("ru = 'Не выполнена';
																|en = 'Not completed'"),
				СтрШаблон(НСтр("ru = 'Не выполнена (%1)';
								|en = 'Not executed (%1)'"), Форма.ВСтатусеНеВыполнена));
			ЦветТекста = ?(Форма.ВСтатусеНеВыполнена = 0, Форма.ЦветНеактивнойГиперссылки, Неопределено);
			
			КомандаОтбор = Новый ФорматированнаяСтрока(
				Содержимое,,
				ЦветТекста,,
				ЗначениеГиперссылкиОтборВСтатусеНеВыполнена());
				
			МассивСтрок.Добавить(КомандаОтбор);
			
			МассивСтрок.Добавить(", ");
			
			// Пропущена
			Содержимое = ?(Форма.ВСтатусеПропущена = 0, НСтр("ru = 'Пропущена';
															|en = 'Skipped'"),
				СтрШаблон(НСтр("ru = 'Пропущена (%1)';
								|en = 'Skipped (%1)'"), Форма.ВСтатусеПропущена));
			ЦветТекста = ?(Форма.ВСтатусеПропущена = 0, Форма.ЦветНеактивнойГиперссылки, Неопределено);
			
			КомандаОтбор = Новый ФорматированнаяСтрока(
				Содержимое,,
				ЦветТекста,,
				ЗначениеГиперссылкиОтборВСтатусеПропущена());
				
			МассивСтрок.Добавить(КомандаОтбор);
			
			//
			
			Элементы.ДекорацияСтатусыДокументов.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
			Элементы.ДекорацияСтатусыДокументов.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Статус") 
		ИЛИ СтруктураРеквизитов.Свойство("СтатусОперацийОтбор") 
		ИЛИ Инициализация Тогда
		
		Если НЕ Форма.СтатусОперацийОтбор.Пустая()
			И НЕ ОперацииИзРегистра(Объект.Статус) Тогда
			
			МассивСтрок = Новый Массив;
			
			МассивСтрок.Добавить(
				СтрШаблон(НСтр("ru = 'Установлен отбор по операциям в статусе %1';
								|en = 'Filter is set by operations in the %1 status'"),
				Форма.СтатусОперацийОтбор)
				);
			
			МассивСтрок.Добавить(" (");
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить';
																	|en = 'disable'"),,,, 
				ЗначениеГиперссылкиОтключитьОтборПоСтатусу()));
			
			МассивСтрок.Добавить(")");
			
			Элементы.ДекорацияОписаниеОтбора.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
			Элементы.ДекорацияОписаниеОтбора.Видимость = Истина;
			
		Иначе
			
			Элементы.ДекорацияОписаниеОтбора.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборСписков()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ОперацииРегистр,
		"СменноеЗадание",
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Null),
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ОперацииДокумент,
		"СменноеЗадание",
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Null),
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ОперацииДокумент,
		"Подразделение",
		Объект.Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Объект.Подразделение));
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПолучитьОперацииДляИзменения()
	
	Если Элементы.ОперацииРегистр.ВыделенныеСтроки.Количество() = 0 Тогда
		
		Результат = Неопределено;
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны операции для выполнения действия';
										|en = 'Operations to execute the action are not selected'"));
		
	Иначе
		
		Результат = Новый Массив;
		
		Для каждого Строка ИЗ Элементы.ОперацииРегистр.ВыделенныеСтроки Цикл
			
			Если ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Действие не может быть выполнено для строки группировки списка';
												|en = 'Action cannot be executed for the list grouping row'"));
				
				Результат = Неопределено;
				Прервать;
				
			Иначе
				
				Результат.Добавить(Строка);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьДокументИДобавитьОперацииЗаверешение(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		
		ОткрытьФормуДобавленияОпераций(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументИИзменитьОперацииЗаверешение(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		
		ОткрытьФормуИзмененияОпераций(ДопПараметры.КлючиОпераций);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОпераций(Форма)
	
	ЗаполнитьЗначенияСвойств(Форма,
		ИтогиПоОперациям(Форма.Объект.Ссылка, Форма.Объект.Статус));
	
	Если ОперацииИзРегистра(Форма.Объект.Статус) Тогда
		
		Форма.Элементы.ОперацииРегистр.Обновить();
		
	Иначе
		
		Форма.Элементы.ОперацииДокумент.Обновить();
		
		НастроитьЗависимыеЭлементыФормы(Форма, "ОперацииДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИтогиПоОперациям(Ссылка, Статус)
	
	Результат = Новый Структура;
	Результат.Вставить("ОбщееВремя",          0);
	Результат.Вставить("КоличествоОпераций",  0);
	Результат.Вставить("ВСтатусеВыполнена",   0);
	Результат.Вставить("ВСтатусеВыполняется", 0);
	Результат.Вставить("ВСтатусеНеВыполнена", 0);
	Результат.Вставить("ВСтатусеСоздана",     0);
	Результат.Вставить("ВСтатусеПропущена",   0);
	
	Если Ссылка.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ОперацииИзРегистра(Статус) Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР Операции.ВремяВыполненияЕдИзм
			|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
			|				ТОГДА Операции.ВремяВыполнения * 60
			|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
			|				ТОГДА Операции.ВремяВыполнения * 3600
			|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
			|				ТОГДА Операции.ВремяВыполнения * 86400
			|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
			|				ТОГДА Операции.ВремяВыполнения * 86400
			|			ИНАЧЕ Операции.ВремяВыполнения
			|		КОНЕЦ) КАК ВремяСекунды,
			|	СУММА(1)   КАК КоличествоОпераций
			|ИЗ
			|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
			|ГДЕ
			|	Операции.СменноеЗадание = &Ссылка
			|
			|ИМЕЮЩИЕ
			|	СУММА(1) ЕСТЬ НЕ NULL ";
		
		СписокСвойств = "КоличествоОпераций";
		
	Иначе
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР Операции.ВремяВыполненияЕдИзм
			|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
			|				ТОГДА Операции.ВремяВыполнения * 60
			|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
			|				ТОГДА Операции.ВремяВыполнения * 3600
			|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
			|				ТОГДА Операции.ВремяВыполнения * 86400
			|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
			|				ТОГДА Операции.ВремяВыполнения * 86400
			|			ИНАЧЕ Операции.ВремяВыполнения
			|		КОНЕЦ) КАК ВремяСекунды,
			|	СУММА(1)   КАК КоличествоОпераций,
			|	СУММА(ВЫБОР
			|			КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВСтатусеСоздана,
			|	СУММА(ВЫБОР
			|			КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВСтатусеВыполняется,
			|	СУММА(ВЫБОР
			|			КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВСтатусеВыполнена,
			|	СУММА(ВЫБОР
			|			КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.НеВыполнена)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВСтатусеНеВыполнена,
			|	СУММА(ВЫБОР
			|			КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Пропущена)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВСтатусеПропущена
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК Операции
			|ГДЕ
			|	Операции.СменноеЗадание = &Ссылка
			|
			|ИМЕЮЩИЕ
			|	СУММА(1) ЕСТЬ НЕ NULL ";
		
		СписокСвойств = "КоличествоОпераций,ВСтатусеСоздана,ВСтатусеВыполняется,ВСтатусеВыполнена,ВСтатусеНеВыполнена,ВСтатусеПропущена";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.ОбщееВремя = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
			Выборка.ВремяСекунды,
			Перечисления.ЕдиницыИзмеренияВремени.Час);
			
		ЗаполнитьЗначенияСвойств(Результат, Выборка, СписокСвойств);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОперацииИзРегистра(Статус)
	
	Возврат Статус = ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Формируется");
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ОбработатьРезультатУстановкиСтатусаВФоне(Результат);
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатУстановкиСтатусаВФоне(Результат)
	
	Прочитать();
	
	Если Результат.Статус = "Ошибка" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ТипЗнч(РезультатСтруктура) = Тип("Структура") И РезультатСтруктура.Свойство("Сообщения") Тогда
			
			Для каждого Сообщение Из РезультатСтруктура.Сообщения Цикл
			
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеГиперссылкиОтборВСтатусеСоздана()
	
	Возврат "#ОтобратьОперацииВСтатусеСоздана";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеГиперссылкиОтборВСтатусеВыполняется()
	
	Возврат "#ОтобратьОперацииВСтатусеВыполняется";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеГиперссылкиОтборВСтатусеВыполнена()
	
	Возврат "#ОтобратьОперацииВСтатусеВыполнена";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеГиперссылкиОтборВСтатусеНеВыполнена()
	
	Возврат "#ОтобратьОперацииВСтатусеНеВыполнена";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеГиперссылкиОтборВСтатусеПропущена()
	
	Возврат "#ОтобратьОперацииВСтатусеПропущена";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеГиперссылкиОтключитьОтборПоСтатусу()
	
	Возврат "#ОтключитьОтборПоСтатусуОпераций";
	
КонецФункции

&НаСервереБезКонтекста
Функция ДействияПередУстановкойСтатусаЗакрыто(Ссылка)
	
	Результат = Новый Структура("ПредупредитьНарушенПорядок, ОткрытьПомощникЗакрытия", Ложь, Ложь);
	
	Если НарушенПорядокНазначения(Ссылка) Тогда
		
		Результат.ПредупредитьНарушенПорядок = Истина;
		
	Иначе
		
		Результат.ОткрытьПомощникЗакрытия = ТребуетсяЗакрытьЗаданиеСИспользованиемПомощника(Ссылка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НарушенПорядокНазначения(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|ГДЕ
		|	ОперацииКСозданиюСменныхЗаданий.СменноеЗадание = &Ссылка
		|	И ОперацииКСозданиюСменныхЗаданий.НарушенПорядокНазначения");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяЗакрытьЗаданиеСИспользованиемПомощника(Ссылка)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроизводственнаяОперация2_2.Ссылка                        КАК Ссылка,
		|
		|	ПроизводственнаяОперация2_2.Статус = &Создана
		|		ИЛИ ПроизводственнаяОперация2_2.Статус = &Выполняется КАК ЗакрытьОперации,
		|
		|	ПроизводственнаяОперация2_2.Статус = &Создана             КАК ВсеСоздана,
		|	ПроизводственнаяОперация2_2.Статус = &Выполняется         КАК ВсеВыполняется
		|	
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация2_2
		|ГДЕ
		|	ПроизводственнаяОперация2_2.Проведен
		|	И ПроизводственнаяОперация2_2.СменноеЗадание = &СменноеЗадание
		|ИТОГИ
		|	МАКСИМУМ(ЗакрытьОперации),
		|	МИНИМУМ(ВсеСоздана),
		|	МИНИМУМ(ВсеВыполняется)
		|ПО
		|	ОБЩИЕ");
	
	Запрос.УстановитьПараметр("СменноеЗадание", Ссылка);
	Запрос.УстановитьПараметр("Создана", Перечисления.СтатусыПроизводственныхОпераций.Создана);
	Запрос.УстановитьПараметр("Выполняется", Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаИтоги.Следующий() Тогда
		
		Если ВыборкаИтоги.ЗакрытьОперации Тогда
			
			Если ВыборкаИтоги.ВсеСоздана ИЛИ ВыборкаИтоги.ВсеВыполняется Тогда
				
				Ссылки = Новый Массив;
				
				Выборка = ВыборкаИтоги.Выбрать();
				Пока Выборка.Следующий() Цикл
					Ссылки.Добавить(Выборка.Ссылка);
				КонецЦикла;
				
				ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
					Ссылки,
					"Выполнена");
				
			Иначе
				
				Результат = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьРучныеОперации(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Таблица
		|ГДЕ
		|	Таблица.СменноеЗадание = &Ссылка
		|	И Таблица.Проведен
		|	И НЕ Таблица.НаОснованииМаршрутнойКарты");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти
