&НаКлиенте
Перем НеПроверятьВарианты;

&НаКлиенте
Перем ОтказТемп;

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КомандаТекущегоВарианта = Команды["КомандаВариант" + CRM_ИДВарианта];
	ПанельВариантовВыбратьВариант(КомандаТекущегоВарианта, Ложь);
	
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
		
	// +ПричинаОтказа
	ПроверкаНаВидимостьПричинаОтказа();
	// -ПричинаОтказа	
	
// +CRM Модуль
	ФормаСоздатьНаОсновании = Элементы.Найти("ФормаСоздатьНаОсновании");
	Если ФормаСоздатьНаОсновании <> Неопределено Тогда
		ФормаСоздатьНаОсновании.Видимость = Ложь;
	КонецЕсли;
// -CRM Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ЭтоНовый = Объект.Ссылка.Пустая();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ИспользоватьРучныеСкидкиВПродажах           = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах   = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                      ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		СтатусДокумента = Объект.Статус;
		
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ОбновитьСостояниеСервер(Объект.Ссылка, Состояние, СостояниеПросрочено);
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	УстановитьДоступностьКомандБуфераОбмена();

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Работа с вариантами
	// Выгрузим табличную часть КомментарииВариантов во временную таблицу значений
	// просто выгрузить ТЧ нельзя. поэтому цикл.
	Для Каждого СтрокаКомментарией Из Объект.CRM_КомментарииВариантов Цикл
		Стр = ТаблицаКомментариевВариантов.Добавить();
		Стр.ИДВарианта = СтрокаКомментарией.ИДВарианта;
		Стр.КомментарийВарианта = СтрокаКомментарией.КомментарийВарианта;
	КонецЦикла;
	Если Объект.Товары.Количество() = 0 Тогда
		СписокИменВариантов.Добавить(1, "Вариант 1");
	КонецЕсли;	
	ИДИзменяемогоВарианта = 0;
	CRM_ИДВарианта = 1;
	СписокЗагруженПриСменеВарианта = Ложь;

	СформироватьПанельВариантов();
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
	Элементы.ГруппаТоварыУправлениеАктивностьюСтрок.Видимость = Ложь;
	Элементы.ГруппаТоварыУправлениеАктивностьюСтрок.Доступность = Ложь;
	Элементы.ТоварыАктивность.Видимость = Ложь;
	Элементы.ТоварыАктивность.Доступность = Ложь;
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	
	CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
// +CRM
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
// -CRM

	// +CRM
	ИспользоватьБизнесПроцессы = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	АвтоматическиУтверждатьЕдинственныйВариант = Константы.CRM_АвтоматическиУтверждатьЕдинственныйВариантКоммерческогоПредложения.Получить();
	ПриПроведениеПредлагатьУтверждениеВарианта = Константы.CRM_ПриПроведениеКоммерческогоПредложенияПредлагатьУтверждениеВарианта.Получить();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	
	// Установим кнопки печати
	CRM_ОбщегоНазначенияСервер.УстановитьКнопкиПечати(Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя(), ЭтотОбъект);
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() И 
			Элементы.Найти("ФормаДокументКоммерческоеПредложениеОтправитьКоммерческоеПредложениеПоЭлектроннойПочтеMicrosoftWord")<>Неопределено Тогда
		Элементы.ФормаДокументКоммерческоеПредложениеОтправитьКоммерческоеПредложениеПоЭлектроннойПочтеMicrosoftWord.Видимость = Ложь;
	КонецЕсли;
	// -CRM
	
	
// +CRM Модуль
	
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.ДокументОснование) 
	И ((ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
	ИЛИ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))) Тогда
		
		МассивФайлов = РаботаСФайламиСлужебный.ВсеПодчиненныеФайлы(Объект.ДокументОснование);
		
		Если МассивФайлов.Количество() > 0 Тогда
			СписокФайловПисьма.ЗагрузитьЗначения(МассивФайлов);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементЗадание = Элементы.Найти("ПодменюСоздатьНаОснованииКомандаСоздатьНаОсновании0_БизнесПроцесс_Задание");
	Если ЭлементЗадание <> Неопределено Тогда
		Элементы.Удалить(ЭлементЗадание);
	КонецЕсли;
// -CRM Модуль

	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыКоммерческихПредложенийКлиентам.ПустаяСсылка();
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
// +CRM Модуль
	
	// проверим табличную часть, исключая разделители
	МассивПустыхКолонок = новый Массив;
	Для Каждого Строка Из Объект.Товары Цикл
		
		МассивПустыхКолонок.Очистить();
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			МассивПустыхКолонок.Добавить("Номенклатура");
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(Строка.Номенклатура) И ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители")) Тогда
			                                                              
			Если Строка.ХарактеристикиИспользуются И НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				МассивПустыхКолонок.Добавить("Характеристика");
			КонецЕсли;
		
			Если Строка.Количество = 0 Тогда
				МассивПустыхКолонок.Добавить("Количество");
			КонецЕсли;
			
			Если Строка.Цена = 0 Тогда
				МассивПустыхКолонок.Добавить("Цена");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				МассивПустыхКолонок.Добавить("СтавкаНДС");
			КонецЕсли;
			
			Если Строка.Сумма = 0 Тогда
				МассивПустыхКолонок.Добавить("Сумма");
			КонецЕсли;
		
		КонецЕсли;
		
		ИмяПроверяемогоВарианта = ПолучитьИмяВариантаПоНомеру(Строка.CRM_ИДВарианта);
		
		Для Каждого ЭлементМассива Из МассивПустыхКолонок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена колонка """ + ЭлементМассива + """ в строке " + Строка.НомерСтроки + " списка ""Запасы"" (" + ИмяПроверяемогоВарианта +")'"),,
			 													"Объект.Товары[" + (Строка.НомерСтроки-1) + "][" + ЭлементМассива + "]");
			Отказ = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
// -CRM Модуль	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// +CRM
	ЗаполнитьНомерСтрокиВарианта(ЭтаФорма);
	
	Если ТекущийОбъект.Проведен Тогда
		// Нет "ответственного" в объединенной конфигурации, вместо него подставляем менеджера
		//ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийОбъект.Ответственный,Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма, ТекущийОбъект.Ссылка);
		ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийОбъект.Менеджер, Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма, ТекущийОбъект.Ссылка);
		Если (НЕ ПараметрыОповещения = Неопределено) И (ТекущийОбъект.СуммаДокумента >= ПараметрыОповещения[0].Сумма) Тогда
			CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	// -CRM
	
	ОбновитьСостояниеСервер(Объект.Ссылка, Состояние, СостояниеПросрочено);
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	СтруктураДействий = Новый Структура;
	// +CRM Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	Оповестить("Запись_КоммерческоеПредложениеКлиенту", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
// +CRM
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	НеПроверятьВарианты = Ложь;
	Оповестить("ЛентаСобытий_Обновить");
// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	// Проверим на наличие утвержденого варианта.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И
		НЕ НеПроверятьВарианты И Объект.Товары.Количество() > 0 Тогда
		СтрокиУтвержденногоВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден",Истина));

		Если СтрокиУтвержденногоВарианта.Количество() = 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
			Если СписокИменВариантов.Количество() = 1 И АвтоматическиУтверждатьЕдинственныйВариант Тогда
				СтрокиТекущегоВарианта =Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
				Если СтрокиТекущегоВарианта.Количество() > 0 Тогда
					КомандаУтвердитьВариант(Неопределено);
				КонецЕсли;
			ИначеЕсли ПриПроведениеПредлагатьУтверждениеВарианта Тогда
					
					ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Отсутствует утвержденный вариант!
										|Утвердить текущий?'"), РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
					Отказ = Истина;
					Возврат;
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Запишем комментарии вариантов из временной таблицы в табличную часть.
	
	ЗаписатьКомментарийВарианта(CRM_ИДВарианта);
	
	Для каждого СтрокаТаблицыВариантов Из ТаблицаКомментариевВариантов Цикл
		
		НайденныеСтрокиТЧЗаказы = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", СтрокаТаблицыВариантов.ИДВарианта));
		
		Если НайденныеСтрокиТЧЗаказы.Количество() > 0 Тогда
			
			СтрокиТабличнойЧастиКомментарии = Объект.CRM_КомментарииВариантов.НайтиСтроки(Новый Структура("ИДВарианта", СтрокаТаблицыВариантов.ИДВарианта));
			
			Если СтрокиТабличнойЧастиКомментарии.Количество() > 0 Тогда
				СтрокаТабличнойЧастиКомментарии = СтрокиТабличнойЧастиКомментарии[0];
			Иначе
				СтрокаТабличнойЧастиКомментарии				= Объект.CRM_КомментарииВариантов.Добавить();
				СтрокаТабличнойЧастиКомментарии.ИДВарианта 	= СтрокаТаблицыВариантов.ИДВарианта;
			КонецЕсли;

			СтрокаТабличнойЧастиКомментарии.КомментарийВарианта = СтрокаТаблицыВариантов.КомментарийВарианта;

		КонецЕсли;
	
	КонецЦикла;
	
	// Если документ проводится, рассчитаем скидки
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		ДополнительныеПараметры.Вставить("ЭтотОбъект", ЭтотОбъект);
		
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Товары",
			"Номенклатура,Характеристика,Количество",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			
			СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки(
				Новый ОписаниеОповещения(
					"ПредложитьПользователюРассчитатьСкидкиЗавершение", 
					ЭтотОбъект,
					ДополнительныеПараметры)
			);
			Возврат;
			
		Иначе
			Объект.СкидкиРассчитаны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// +CRM
	
	// запишем комментарии вариантов из временной таблицы в табличную часть
	
	ЗаписатьКомментарийВарианта(CRM_ИДВарианта);
	
	Для каждого СтрокаТаблицыВариантов Из CRM_ТаблицаКомментариевВариантов Цикл
		
		НайденныеСтрокиТЧЗаказы = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", СтрокаТаблицыВариантов.ИДВарианта));
		
		Если НайденныеСтрокиТЧЗаказы.Количество() > 0 Тогда
			
			СтрокиТабличнойЧастиКомментарии = Объект.CRM_КомментарииВариантов.НайтиСтроки(Новый Структура("ИДВарианта", СтрокаТаблицыВариантов.ИДВарианта));
			
			Если СтрокиТабличнойЧастиКомментарии.Количество() > 0 Тогда
				СтрокаТабличнойЧастиКомментарии = СтрокиТабличнойЧастиКомментарии[0];
			Иначе
				СтрокаТабличнойЧастиКомментарии				= Объект.CRM_КомментарииВариантов.Добавить();
				СтрокаТабличнойЧастиКомментарии.ИДВарианта 	= СтрокаТаблицыВариантов.ИДВарианта;
			КонецЕсли;

			СтрокаТабличнойЧастиКомментарии.КомментарийВарианта = СтрокаТаблицыВариантов.КомментарийВарианта;

		КонецЕсли;
	
	КонецЦикла;
	// -CRM
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	
КонецПроцедуры

// +CRM
&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	ОчиститьПанельВариантов();
	ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
	СформироватьПанельВариантов();
КонецПроцедуры	
// -CRM

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	КонецЕсли;
	// +CRM
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ПричиныОтказов") Тогда
		Объект.CRM_ПричинаОтказа = ВыбранноеЗначение;
		Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
		
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия, Параметр", ИмяСобытия, Параметр)), Параметр.КартаЛояльности);
        Возврат;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
    Параметр = ДополнительныеПараметры.Параметр;
    
    
    ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Знач Параметр)
    
    Если ИмяСобытия = "ПолученыСообщения"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПолученыСообщения(Параметр.Сообщения);
    КонецЕсли;
    
    Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
        И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
        Если Объект.Согласован Тогда
            Объект.Согласован = Ложь;
        КонецЕсли;
        ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
    КонецЕсли;
    
    Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
        
        УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
        
    КонецЕсли;
    
    Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
        ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
        
        УстановитьВидимостьЗапретаОтгрузкиПартнеру();
    КонецЕсли;
    
    Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
    КонецЕсли;
    
    Если ИмяСобытия = "РедактироватьНабор"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        
        ПараметрыКомплекта = Новый Структура;
        ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
        ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
        
        АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
        
        ПараметрыОткрытия = Новый Структура;
        ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
        ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
        ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
        ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
        ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
        ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
        ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
        ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
        ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
        ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
        
        ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Проверим, можно ли утвердить новый вариант.
		СтрокиТекущегоВарианта =Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
		Если СтрокиТекущегоВарианта.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Текущий вариант не будет утвержден по причине: вариант не содержит строк.'"));
		Иначе
			КомандаУтвердитьВариант(Неопределено);
		КонецЕсли;
		НеПроверятьВарианты = Истина;
		Записать(ПараметрыЗаписи);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		НеПроверятьВарианты = Истина;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		Возврат;
	КонецЕсли;

	ПартнерПриИзмененииСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился ИЛИ НЕ ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	СоглашениеПриИзмененииСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента) Тогда
		
		ВалютаПриИзмененииСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусДокумента = Объект.Статус;
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
// +CRM Модуль
	ПроверкаНаВидимостьПричинаОтказа();
// -CRM Модуль	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
	ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса Тогда
	
		ПересчитыватьЦены = Истина;
		ЦеныРассчитаны = ДатаПриИзмененииСервер(ПересчитыватьЦены);
	
		Если ПересчитыватьЦены Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		КонецЕсли;
		
	Иначе
		
		ДатаПриИзмененииСервер(Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииСервер(ПересчитыватьЦены)
	
	Если ПересчитыватьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер(Истина);
	Иначе
		ЦеныРассчитаны = Ложь;
	КонецЕсли;
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		
		ФормаОплаты =ПолучитьФормуОплатыСервер(Объект.ГрафикОплаты);
		
		Если ЗначениеЗаполнено(ФормаОплаты) Тогда
			Объект.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	СкладПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(Неопределено, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЗалогЗаТаруПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ, Истина);
		Возврат;
	КонецЕсли;

	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;

	Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередНачаломДобавленияЗавершение", ЭтотОбъект, Копирование);
	РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ);
	Если НЕ Отказ Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередУдалениемЗавершение", ЭтотОбъект);
		РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	// +CRM
	ЗаполнитьНомерСтрокиВарианта(ЭтаФорма);
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
	// -CRM

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	// +CRM Модуль перенесено из ЗапасыПриНачалеРедактирования
	
	ТекущаяСтрока.CRM_ИДВарианта  = CRM_ИДВарианта;
	ТекущаяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ТипНоменклатура;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтаФорма);
	
	// -CRM Модуль
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

// + CRM Модуль
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РасчитатьИтогоПоВарианту();
КонецПроцедуры
// - CRM Модуль

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, 
				Новый Структура("ВыбраннаяСтрока, Поле", ВыбраннаяСтрока, Поле)), 
				НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ТоварыВыборФрагмент();

	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле)
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
		ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
		ПараметрОповещения.Вставить("ФормаВладелец", УникальныйИдентификатор);
		
		Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
	
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
    Поле = ДополнительныеПараметры.Поле;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ТоварыВыборФрагмент();

КонецПроцедуры

&НаКлиенте
Функция ТоварыВыборФрагмент()
    
    Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
    Возврат ТекущиеДанные;

КонецФункции

&НаКлиенте
Процедура ТоварыАктивностьПриИзменении(Элемент)
	
// +CRM Модуль активность изменяется программно	
	
//	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные = Элемент;
// -CRM Модуль		
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНабора) Тогда
		ТоварыАктивностьПриИзмененииНаСервере(Элемент.НомерСтроки-1);
	Иначе
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары",           Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
// +CRM Модуль  пересчитывается вся табличная часть		
		//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов",       ЗависимыеРеквизиты());
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		//
		
		//РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
// -CRM Модуль		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
// +CRM Модуль активность изменяется программно
//Процедура ТоварыАктивностьПриИзмененииНаСервере(Элемент)
//	
//	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
Процедура ТоварыАктивностьПриИзмененииНаСервере(Элемент)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элемент);

// -CRM Модуль	
	
	ДляВсехСтрок = Ложь;
	
	ПараметрыВариантаКомплектации = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(ТекущиеДанные.НоменклатураНабора, ТекущиеДанные.ХарактеристикаНабора);
	Если ЗначениеЗаполнено(ПараметрыВариантаКомплектации) Тогда
		
		Если (ПараметрыВариантаКомплектации.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
			ИЛИ ПараметрыВариантаКомплектации.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
			ДляВсехСтрок = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиДляОбработки = Новый Массив;
	Если ДляВсехСтрок Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НоменклатураНабора", ТекущиеДанные.НоменклатураНабора);
		ПараметрыОтбора.Вставить("ХарактеристикаНабора", ТекущиеДанные.ХарактеристикаНабора);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			СтрокиДляОбработки.Добавить(СтрокаТЧ);
			СтрокаТЧ.Активность = ТекущиеДанные.Активность;
		КонецЦикла;
	Иначе
		СтрокиДляОбработки.Добавить(ТекущиеДанные);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СтрокиДляОбработки Цикл
		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = Неопределено;
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары",           Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов",       ЗависимыеРеквизиты());
// +CRM Модуль пересчитывается вся табличная часть
		//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов",       ЗависимыеРеквизиты());
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
// -CRM Модуль
	КонецЦикла;
	
// +CRM Модуль пересчитывается вся табличная часть
	
//	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
// -CRM Модуль	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	// +CRM
	Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители") Тогда
		Возврат;
	КонецЕсли;
	// -CRM
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	// +CRM Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM Модуль
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	ЗаполнитьЦеныПоСоглашению(Команда)

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,
			Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиАктивностиВыделенныхСтрок(Команда)
	
	УстановитьСнятьОтметкиАктивностиВыделенныхСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиАктивностиВыделенныхСтрок(Команда)

	УстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);

КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ОткрытьПодборПродолжение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.КоммерческоеПредложениеКлиенту.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'коммерческое предложение клиенту'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",      Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
	Иначе
		ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Валюта",    Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",  Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ОткрытьИнформациюОСкидкахФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент()
    
    Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	// +CRM Модуль
	ТоварыСохранитьАктивность();
	// -CRM Модуль
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	// +CRM Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM Модуль
	ТоварыСохранитьАктивность();
	// -CRM Модуль
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь, Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		// +CRM Модуль
		ТоварыВосстановитьАктивность();
		// -CRM Модуль
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
	КонецЕсли;
	
	// +CRM Модуль не удалять, это не дублирование
	ТоварыВосстановитьАктивность();
	// -CRM Модуль

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM Модуль
	ТоварыСохранитьАктивность();
	// -CRM Модуль
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		// +CRM Модуль
		ТоварыВосстановитьАктивность();
		// -CRM Модуль
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
	КонецЕсли;
	
	// +CRM Модуль не удалять, это не дублирование
	ТоварыВосстановитьАктивность();
	// -CRM Модуль

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьСтрокуПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуПродолжение(РазрешеноИзменениеТоваров, ДопПараметры) Экспорт
	
	Если НЕ РазрешеноИзменениеТоваров Тогда Возврат; КонецЕсли;
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		// +CRM
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		// -CRM
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВставитьСтрокиПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиПродолжение(РазрешеноИзменениеТоваров, ДопПараметры) Экспорт
	
	// +CRM Модуль
	Если НЕ РазрешеноИзменениеТоваров Тогда
		Возврат;
	КонецЕсли;
	
	//КоличествоТоваровДоВставки = Объект.Товары.Количество();
	МассивСтрокТекущегоВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	КоличествоТоваровДоВставки = МассивСтрокТекущегоВарианта.Количество();
	// -CRM Модуль
	
	ПолучитьСтрокиИзБуфераОбмена();

    // +CRM Модуль
	
	//КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	МассивСтрокТекущегоВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	КоличествоВставленных = МассивСтрокТекущегоВарианта.Количество()-КоличествоТоваровДоВставки;	
	// -CRM Модуль
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	ТоварыПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	КонецЕсли;

	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если СтрНайти(Команда.Имя, "ПодменюПечать")>0 Тогда
		ВыбранныйВариант =Неопределено;
			
		Варианты = ПолучитьВарианты();
		ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(Команда.Имя, ЭтотОбъект["ПараметрыПодключаемыхКоманд"].АдресТаблицыКоманд);
		Если СтрНайти(ОписаниеКоманды.Идентификатор, "Договор") = 0 Тогда
			Варианты.Добавить(0,"Все варианты");
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыполнитьКомандуЗавершение", ЭтотОбъект, Команда);
		Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вариант для печати'"));
	Иначе	
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЗавершение(РезультатВыбора, Команда) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	Если РезультатВыбора.Значение <> Неопределено Тогда
		ВыбранныйВариант = РезультатВыбора.Значение;
		CRM_УправлениеПечатьюВызовСервера.ПоместитьВариантНаПечатьВХранилище(ВыбранныйВариант);
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Активность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Отменено'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаРучнойСкидки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Активность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	//НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	//Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);
	УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//
	
	ПараметрыУстановки = МногооборотнаяТараСервер.ПараметрыУстановкиУсловногоОформленияДляСтрокСМногооборотнойТарой();
	
	ПараметрыУстановки.Форма                 = ЭтаФорма;
	ПараметрыУстановки.ЭтоПоступление        = Ложь;
	
	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ПараметрыУстановки);
	
	//

	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
	// Разделитель
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	
	// Компенсируем условие при неиспользовании многооборотной тары.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	КонецЕсли;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.CRM_ЭтоРазделитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Бежевый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		ДоставкаТоваров.КоммерческоеПредложениеПриИзмененииПартнера(Элементы,Объект);
	КонецЕсли;
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПартнерПриИзмененииСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения = Неопределено)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	// +CRM Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM Модуль
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
		Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоСоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Товары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары, // Табличная часть
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	// +CRM Модуль
	ТоварыСохранитьАктивность();
	// -CRM Модуль
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	// +CRM Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM Модуль
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ)
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		Отказ = Истина;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	// +CRM Модуль
	ТоварыСохранитьАктивность();
	// -CRM Модуль
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	// +CRM Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM Модуль
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Истина);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	
	// +CRM Модуль
	ТоварыСохранитьАктивность();
	// -CRM Модуль
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
	// +CRM Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM Модуль
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СкидкиИзменились = СкидкиНаценкиВызовСервера.НеобходимПерерасчетСкидок(
		Объект, 
		УправляемыеСкидки, 
		УникальныйИдентификатор, 
		АдресПримененныхСкидокВоВременномХранилище);
		
	Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
		СкидкиИзменились = Истина;
	КонецЕсли;

	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Процедура ОбновитьПризнакБезВозвратнойТары()
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПользователюРассчитатьСкидкиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		
		Отказ = Ложь;
		ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ);
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
		Если Не Отказ Тогда
			ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Истина;
	
	ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	// +CRM Модуль
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM Модуль
	СтруктураДействийСДобавленнымиСтроками.Вставить("УстановитьАктивность");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);	
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		Если НЕ ИспользоватьРучныеСкидкиВПродажах Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		// +CRM Модуль
		
		//ТекущаяСтрока.Активность = Истина;
		// -CRM Модуль
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		// +CRM
		ТекущаяСтрока.Активность = Ложь;
		ТекущаяСтрока.CRM_ИДВарианта = CRM_ИДВарианта;
		ТекущаяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
		ТекущаяСтрока.CRM_Утвержден = Ложь;
		Если ТипЗнч(СтрокаТовара.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители") Тогда
			ТекущаяСтрока.CRM_ЭтоРазделитель = Истина;		
		КонецЕсли; 
		// -CRM
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		// +CRM Модуль
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
		// -CRM Модуль
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
			Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность",
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентРучнойСкидки");
			Колонки.Добавить("СуммаРучнойСкидки");
		КонецЕсли;
		Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентАвтоматическойСкидки");
			Колонки.Добавить("СуммаАвтоматическойСкидки");
		КонецЕсли;
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры) Экспорт
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	// +CRM Модуль
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM Модуль
	СтруктураДействийСДобавленнымиСтроками.Вставить("УстановитьАктивность");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Товары", ПараметрыДанных);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	ВалютаДокумента = Объект.Валюта;
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьОпераций();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Элементы.СпособДоставки.Видимость = Ложь;
	КонецЕсли;
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
	ПараметрыЗаполнения = Документы.КоммерческоеПредложениеКлиенту.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаАктивныхСтрок = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаСНДСАктивность"),
		КоллекцияТовары.Итог("СуммаСНДСАктивностьБезВозвратнойТары"));
	Форма.СуммаНДСАктивныхСтрок = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаНДСАктивность"),
		КоллекцияТовары.Итог("СуммаНДСАктивностьБезВозвратнойТары"));
	Форма.СуммаАвтоСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивность"),
		КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары"));
	Форма.СуммаРучнойСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивность"),
		КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивностьБезВозвратнойТары"));
	Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаВсего = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаСНДС"),
		КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары"));
	
	СуммаАктивныхСтрокБезНДС = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаАктивность"),
		КоллекцияТовары.Итог("СуммаАктивностьБезВозвратнойТары"));
	
	Если СуммаАктивныхСтрокБезНДС > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	ОтображатьИтогСуммыНДС = УчетНДСУПКлиентСервер.ПродажаОблагаетсяНДС(Форма.Объект.НалогообложениеНДС);
	
	Если ОтображатьИтогСуммыНДС Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"Активность, БезВозвратнойТары, АктивностьБезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено Тогда
		УстановитьПодписку = Объект.Согласован;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("СрокДействия");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("СрокПоставки");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыНоменклатура");
	МассивЭлементов.Добавить("ТоварыХарактеристика");
	МассивЭлементов.Добавить("ТоварыКоличествоУпаковок");
	МассивЭлементов.Добавить("ТоварыУпаковка");
	МассивЭлементов.Добавить("ТоварыВидЦены");
	МассивЭлементов.Добавить("ТоварыЦена");
	МассивЭлементов.Добавить("ТоварыСтавкаНДС");
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыТекстовоеОписание");
	МассивЭлементов.Добавить("ТоварыСумма");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыИзменить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыУдалить");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
	МассивЭлементов.Добавить("ТоварыСоставНабора");
	
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	// +CRM
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("CRM_КнопкаВверх");
	МассивЭлементов.Добавить("CRM_КнопкаВниз");
	МассивЭлементов.Добавить("ЗапасыДобавитьРазделитель");
	МассивЭлементов.Добавить("CRM_КнопкаДобавитьВариант");
	МассивЭлементов.Добавить("CRM_ГруппаМенюВариантов");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов,"Доступность", Не УстановитьПодписку);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		
		// +CRM Модуль
		
		//ТекущаяСтрока.Активность = Истина;
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		// -CRM Модуль
		
		// +CRM
		ТекущаяСтрока.Активность = Ложь;
		ТекущаяСтрока.CRM_ИДВарианта = CRM_ИДВарианта;
		ТекущаяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
		ТекущаяСтрока.CRM_Утвержден = Ложь;
		ТекущаяСтрока.CRM_ЭтоРазделитель = Ложь;		
		// -CRM
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		// +CRM Модуль
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
		// -CRM Модуль
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.КоммерческоеПредложениеКлиенту.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("СуммаРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентАвтоСкидки");
	МассивЭлементов.Добавить("СуммаАвтоСкидки");
	МассивЭлементов.Добавить("ПроцентСкидки");
	МассивЭлементов.Добавить("СуммаСкидки");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	МассивЭлементов.Добавить("ДекорацияОтступТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	УстановитьВидимостьПоляПартнер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()

	Если Элементы.Найти("ХозяйственнаяОперация") <> Неопределено Тогда
	
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина);
			СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка();
		КонецЕсли;
		Если Объект.ТребуетсяЗалогЗаТару Тогда
			Объект.ТребуетсяЗалогЗаТару = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Установить = Истина)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	АктивностьИзменена = Ложь;
	
	СтруктураДействий = Новый Структура(
		"ЗаполнитьДубликатыЗависимыхРеквизитов",
		ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			АктивностьИзменена       = Истина;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АктивностьИзменена Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьФормуОплатыСервер(ГрафикОплаты)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
		|ИЗ
		|	Справочник.ГрафикиОплаты КАК ГрафикиОплаты
		|ГДЕ
		|	ГрафикиОплаты.Ссылка = &ГрафикОплаты
		|");
		
	Запрос.УстановитьПараметр("ГрафикОплаты", ГрафикОплаты);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ФормаОплаты;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеСервер(КоммерческоеПредложение, Состояние, СостояниеПросрочено)
	
	Документы.КоммерческоеПредложениеКлиенту.РассчитатьСостояние(КоммерческоеПредложение, Состояние, СостояниеПросрочено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПартнерПриИзмененииСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		СоглашениеПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(Знач Оповещение, КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("СчитанаКартаЛояльностиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?'"), ДанныеКартыЛояльности.Партнер),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииСоглашения Тогда
				
				ТекстВопроса = НСтр("ru = 'Для карты лояльности задано соглашение ""%1"". Применить карту лояльности и подставить в документ соглашение ""%1""?'");
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Соглашение),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = ДополнительныеПараметры.КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДополнительныеПараметры.ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СчитанаКартаЛояльностиЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки, ТолькоАктивныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки,,ТолькоАктивныеСтроки);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьГрафикаОплаты()
	
	ГрафикСоглашенияЗаполнен = ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость",
		Не ГрафикСоглашенияЗаполнен
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты")
		И Объект.ХозяйственнаяОперация<>Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И (Не ИспользоватьСоглашенияСКлиентами
			Или Не ЗначениеЗаполнено(Объект.Соглашение)
			Или РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Истина
			Или РеквизитыСоглашения.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДокументПродажи.Соглашение) Тогда
		ПриИзмененииХозяйственнойОперацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивЭлементов,
		"Доступность",
		Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	// +CRM Модуль
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM Модуль
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("УстановитьАктивность");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
		
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	Если Не Объект.ВернутьМногооборотнуюТару Тогда
		Объект.ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	// +CRM Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM Модуль
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтрокаТЧТовары.Активность = Истина;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();

	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДСПродажи()
	
	ПараметрыЗаполнения = Документы.КоммерческоеПредложениеКлиенту.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров); 
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ГрафикОплаты" Тогда
		ГрафикОплатыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ФормаОплаты" Тогда
		ФормаОплатыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыАктивность" Тогда
		ТоварыАктивностьПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
		ТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
		ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаРучнойСкидки" Тогда
		ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
		ТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "РазбитьСтроку" Тогда
		РазбитьСтроку(Команда);
	ИначеЕсли Команда.Имя = "ПоискПоШтрихкоду" Тогда
		ПоискПоШтрихкодуВыполнить(Команда);
	ИначеЕсли Команда.Имя = "ОткрытьПодбор" Тогда
		ОткрытьПодбор(Команда);
	ИначеЕсли Команда.Имя = "ДополнитьМногооборотнойТарой" Тогда
		ДополнитьМногооборотнойТарой(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьДанныеИзТСД" Тогда
		ЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныПоСоглашению" Тогда
		ЗаполнитьЦеныПоСоглашению(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен" Тогда
		ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда);
	ИначеЕсли Команда.Имя = "РассчитатьСкидкиНаценки" Тогда
		РассчитатьСкидкиНаценки(Команда);
	ИначеЕсли Команда.Имя = "ОтменитьРучныеСкидки" Тогда
		ОтменитьРучныеСкидки(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидку" Тогда
		НазначитьРучнуюСкидку(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидкуВыделенныхСтрок" Тогда
		НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда);
	ИначеЕсли Команда.Имя = "НазначитьАвтоматическиеСкидки" Тогда
		НазначитьАвтоматическиеСкидки(Команда);
	ИначеЕсли Команда.Имя = "СчитатьКартуЛояльности" Тогда
		СчитатьКартуЛояльности(Команда);
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		СоставНабора(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередУдалением(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьПоляПартнер()
	
	ВидимостьКЛ = Элементы.СчитатьКартуЛояльностиКлиент.Видимость;
	Если ВидимостьКЛ Тогда
		ВидимостьКЛ = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	КонецЕсли;
	
	Элементы.ПартнерБезКЛ.Видимость = НЕ ВидимостьКЛ;
	Элементы.Партнер.Видимость      = ВидимостьКЛ;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляРаботыСВариантами

&НаКлиенте
Процедура ТоварыСдвинутьВверх(Команда)
	Попытка
		ИндексТекСтроки = Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные);
		Объект.Товары.Сдвинуть(ИндексТекСтроки, -1);
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		Модифицированность = Истина;
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	Исключение КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСдвинутьВниз(Команда)
	Попытка
		ИндексТекСтроки = Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные);
		Объект.Товары.Сдвинуть(ИндексТекСтроки, 1);
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		Модифицированность = Истина;
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	Исключение КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьВарианты()
	
	Возврат CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ПанельВариантовВыбратьВариант(Команда, ЗаписыватьКомментарийВарианта = Неопределено)
	
	ИмяКоманды = Команда.Имя;
	ИмяКнопки = "Вариант" + СтрЗаменить(ИмяКоманды, "КомандаВариант", "");
	Кнопка = Элементы[ИмяКнопки];
	
	Если Кнопка.Пометка Тогда
		
		// Запустим механизм переименования кнопки.
		КомандаПереименоватьВариант(Команда);
		
	Иначе
		
		// Запустим механизм переключения варианта.
		ЗаписыватьКомментарий = ?(ЗаписыватьКомментарийВарианта = Неопределено, Истина, ЗаписыватьКомментарийВарианта);
	
		Если ЗаписыватьКомментарий Тогда
			
			// Запишем содержимое комментария варианта.
			ЗаписатьКомментарийВарианта(CRM_ИДВарианта);
		
		КонецЕсли;
		
		// Получим идентификатор выбранного варианта.
		CRM_ИДВарианта = ПолучитьИдентификаторВарианта(Кнопка);
		
		// Установим отбор номенклатуры по выбранному варианту.
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		
		МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
		
		Если МассивСтрокВариантов.Количество() = 0 Тогда
			Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		Иначе
			Элементы.КнопкаУтвердитьВариант.Пометка = Найти(Кнопка.Заголовок, НСтр("ru = '(Утв.)'"));
		КонецЕсли;
		
		// Установим пометку у выбранного варианта.
		Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
			КнопкаПанелиВариантов.Пометка = Ложь;
		КонецЦикла;
		
		Кнопка.Пометка = Истина;
		
		// Установим комментарий выбранного варианта.
		УстановитьКомментарийВарианта(CRM_ИДВарианта);
		
		СписокЗагруженПриСменеВарианта = Истина;
		
		РасчитатьИтогоПоВарианту();
	КонецЕсли;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
КонецПроцедуры

// Устанавливает значение комментария из табличной части в поле ввода.
//
// Параметры:
//  НомерВарианта – Число – номер варианта.
//
&НаКлиенте
Процедура УстановитьКомментарийВарианта(НомерВарианта)
	
	СтрокиКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта",НомерВарианта));
	
	Если СтрокиКомментариев.Количество() = 0 Тогда
		КомментарийВарианта =  "";
	Иначе
		КомментарийВарианта = СтрокиКомментариев[0].КомментарийВарианта;
	КонецЕсли;

КонецПроцедуры // УстановитьКомментарийВарианта()

&НаКлиенте
Процедура КомандаДобавитьВариант(Команда)
	
	// Получим номер нового варианта.
	НовыйНомерВарианта = ПолучитьИдентификаторВарианта();
	СписокИменВариантов.Добавить(НовыйНомерВарианта, "Вариант "+НовыйНомерВарианта);
	
	// Добавим кнопку нового варианта на панель вариантов.
	СоздатьКнопкуВарианта(НовыйНомерВарианта, СтрЗаменить(НСтр("ru = 'Вариант %Номер%'"), "%Номер%", НовыйНомерВарианта));
	ПанельВариантовВыбратьВариант(Команды["КомандаВариант" + НовыйНомерВарианта]);
	
КонецПроцедуры

// Возвращает номер Варианта
//
// Параметры:
//	Кнопка формф
//	Если кнопка указана, возвращается номер, иначе генерируется новый.
// Возвращаемое значение:
//   Число   
//
&НаКлиенте
Функция ПолучитьИдентификаторВарианта(Кнопка = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		
		// Найдем идентификатор нового варианта.
		СписокНомеров = СписокИменВариантов.Скопировать();
		СписокНомеров.СортироватьПоЗначению(НаправлениеСортировки.Возр);

		НовыйИдентификатор = СписокНомеров[СписокНомеров.Количество()-1].Значение + 1;
		
		Возврат НовыйИдентификатор;
		
	Иначе
		
		// Найдем идентификатор варианта нажатой кнопки.
		ИндексКнопки = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы.Индекс(Кнопка);
		Возврат СписокИменВариантов[ИндексКнопки].Значение;
		
	КонецЕсли;
КонецФункции // ПолучитьИдентификаторВарианта()

// Удаление элемента формы
//
&НаСервере
Процедура УдалитьКнопкуВарианта(ИмяУдаляемогоЭлемента)
	
	// удалим элемент (кнопку)
	УдаляемыйЭлемент = Элементы[ИмяУдаляемогоЭлемента];
	Элементы.Удалить(УдаляемыйЭлемент);
	
	// удалим команду кнопки
	УдаляемаяКоманда = Команды["Команда" + ИмяУдаляемогоЭлемента];
	Команды.Удалить(УдаляемаяКоманда);

КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВариант(Команда)
	
	КнопкиВариантов = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы;

	Если КнопкиВариантов.Количество() = 2 Тогда // Один вариант + кнопка добавления.
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя удалить единственный вариант!'"));
		Возврат;
	КонецЕсли;
	
	// Запросим подтверждение удаления варианта.
	ТекстВопроса = НСтр("ru = 'Удалить вариант?'");
	Если Элементы.КнопкаУтвердитьВариант.Пометка Тогда
		ТекстВопроса = НСтр("ru = 'Данный вариант утвержден!
					   |'") + ТекстВопроса; 
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаУдалитьВариантЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВариантЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КнопкиВариантов = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы;
	УдаляемаяКнопка = Элементы["Вариант" + CRM_ИДВарианта];
	ИндексУдаляемойКнопки = КнопкиВариантов.Индекс(УдаляемаяКнопка);
	
	// Удалим имя кнопки из списка имен;
	СписокИменВариантов.Удалить(ИндексУдаляемойКнопки);
	
	// Удалим номенклатуру варианта.
	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
		Объект.Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
	// удалим кнопку варианта
	УдалитьКнопкуВарианта("Вариант" + CRM_ИДВарианта);
	
	// Удалим комментарий варианта.
	МассивСтрокТаблицыКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта", CRM_ИДВарианта));
	
	Если МассивСтрокТаблицыКомментариев.Количество() > 0 Тогда
		
		СтрокаТаблицыКомментариев = МассивСтрокТаблицыКомментариев[0];
		ТаблицаКомментариевВариантов.Удалить(ТаблицаКомментариевВариантов.Индекс(СтрокаТаблицыКомментариев));
	
	КонецЕсли;
	
	МассивСтрокТаблицыКомментариев = Объект.CRM_КомментарииВариантов.НайтиСтроки(Новый Структура("ИДВарианта", CRM_ИДВарианта));
	
	Если МассивСтрокТаблицыКомментариев.Количество() > 0 Тогда
		
		СтрокаТаблицыКомментариев = МассивСтрокТаблицыКомментариев[0];
		Объект.CRM_КомментарииВариантов.Удалить(СтрокаТаблицыКомментариев);
	
	КонецЕсли;
	
	Если КнопкиВариантов.Количество() = 2 Тогда // Остался один вариант + кнопка добавления
		// сделаем активным единственный оставшийся вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[0];
	
	ИначеЕсли КнопкиВариантов.Количество() = ИндексУдаляемойКнопки + 1 Тогда // Посл. справа кнопка варианта.
		
		// Сделаем активным предыдущий вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[ИндексУдаляемойКнопки - 1];
		
	Иначе
		
		// Сделаем активным следующий вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[ИндексУдаляемойКнопки];
		
	КонецЕсли;
	
	ПанельВариантовВыбратьВариант(Команды["Команда" + КнопкаТекущегоВарианта.Имя], Ложь);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьВариант(Команда)
	
	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	
	НовыйНомерВарианта = ПолучитьИдентификаторВарианта();
	СписокИменВариантов.Добавить(НовыйНомерВарианта, "Вариант "+НовыйНомерВарианта);
	
	Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		НоваяСтрока.CRM_ИДВарианта = НовыйНомерВарианта;
		НоваяСтрока.CRM_ИмяВарианта = "";
		НоваяСтрока.CRM_Утвержден = Ложь;
		
	КонецЦикла;
	
	// Скопируем комментарий варианта.
	
	СтрокаКомментарияНовогоВарианта = ТаблицаКомментариевВариантов.Добавить();
	СтрокаКомментарияНовогоВарианта.ИДВарианта = НовыйНомерВарианта;
	СтрокаКомментарияНовогоВарианта.КомментарийВарианта = КомментарийВарианта;
	
	// Добавим кнопку нового варианта на панель вариантов.
	СоздатьКнопкуВарианта(НовыйНомерВарианта, СтрЗаменить(НСтр("ru = 'Вариант %Номер%'"), "%Номер%", НовыйНомерВарианта));
	ПанельВариантовВыбратьВариант(Команды["КомандаВариант" + НовыйНомерВарианта]);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереименоватьВариант(Команда)
	
	ЭлементСпискаИменВариантов = СписокИменВариантов.НайтиПоЗначению(CRM_ИДВарианта);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПереименоватьВариантЗавершение", ЭтотОбъект, ЭлементСпискаИменВариантов);
	ПоказатьВводСтроки(ОписаниеОповещения, ЭлементСпискаИменВариантов.Представление, НСтр("ru = 'Введите новое имя варианта'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереименоватьВариантЗавершение(ИмяВарианта, ЭлементСпискаИменВариантов) Экспорт
	
	Если ИмяВарианта <> Неопределено Тогда
		
		ИмяВарианта = СокрЛП(ИмяВарианта);
		ИмяВарианта= ?(ИмяВарианта = "", "Вариант " + CRM_ИДВарианта, ИмяВарианта);
		СтароеИмяВарианта = ЭлементСпискаИменВариантов.Представление;
		ВариантУтвержден = Элементы.КнопкаУтвердитьВариант.Пометка;
		
		Если НЕ ИмяВарианта = СтароеИмяВарианта Тогда
			ЭлементСпискаИменВариантов.Представление = ИмяВарианта;
			
			СтрокиВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
			
			Для каждого СтрокаВарианта Из СтрокиВариантов Цикл
				СтрокаВарианта.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
			КонецЦикла;
			
			Элементы["Вариант" + CRM_ИДВарианта].Заголовок = ?(ВариантУтвержден, ИмяВарианта + НСтр("ru = ' (Утв.)'"), ИмяВарианта);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКнопкуПанелиВариантов(ИДВарианта)
	
	ИскомаяКоманда = Команды.Найти("КомандаВариант" + ИДВарианта);
	Если НЕ ИскомаяКоманда = Неопределено Тогда
		Команды.Удалить(ИскомаяКоманда);
	КонецЕсли;
	
	ИскомыйЭлемент = Элементы.Найти("Вариант" + ИДВарианта);
	Если НЕ ИскомыйЭлемент = Неопределено Тогда
		Элементы.Удалить(ИскомыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все кнопки вариантов.
//
&НаСервере
Процедура ОчиститьПанельВариантов()
	
	Ном = 0;
	Для Каждого КомандаФормы Из Команды Цикл
		Если Найти(КомандаФормы.Имя, "КомандаВариант") > 0 Тогда
			Ном = Ном + 1;
		КонецЕсли;
	КонецЦикла;
	
	Пока Ном > 0 Цикл
		УдалитьКнопкуПанелиВариантов(Ном);
		Ном = Ном - 1;
	КонецЦикла;
	
КонецПроцедуры

// Создает команду и кнопку для варианта.
//
&НаСервере
Процедура СоздатьКнопкуВарианта(ИДНовогоВарианта, ЗаголовокКнопки)
	
	// создадим команду
	НоваяКоманда = Команды.Добавить("КомандаВариант" + ИДНовогоВарианта);
	НоваяКоманда.Заголовок = ЗаголовокКнопки;
	НоваяКоманда.Подсказка = НСтр("ru = 'Выбрать вариант'");
	НоваяКоманда.Действие  = "ПанельВариантовВыбратьВариант";
	
	// создадим кнопку
	НовыйЭлемент = Элементы.Добавить("Вариант" + ИДНовогоВарианта, Тип("КнопкаФормы"), Элементы.КоманднаяПанельВариантов);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.Заголовок = ЗаголовокКнопки;
	НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
	
	// Переместим в конец коллекции кнопку создания нового варианта.
	Элементы.Переместить(Элементы.КнопкаДобавитьВариант, Элементы.КоманднаяПанельВариантов);
КонецПроцедуры // СоздатьКнопкуВарианта()

// Формирует кнопки, "разделяющие" табличную часть товары по вариантам.
//
&НаСервере
Процедура СформироватьПанельВариантов()
	
	ТаблицаВариантов = Объект.Товары.Выгрузить();
	ТаблицаВариантов.Свернуть("CRM_ИДВарианта");
	ТаблицаВариантов.Сортировать("CRM_ИДВарианта");
	
	Если ТаблицаВариантов.Количество() = 0 Тогда // Создадим одну кнопку "по умолчанию"
		// создадим кнопку "по умолчанию".
		СоздатьКнопкуВарианта(1, НСтр("ru = 'Вариант 1'"));
		Возврат;
	Иначе
		СписокИменВариантов.Очистить();
	КонецЕсли;
		
	// Заполним список имен вариантов.
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		СписокИменВариантов.Добавить(СтрокаТаблицы.CRM_ИДВарианта, ПолучитьИмяВариантаПоНомеру(СтрокаТаблицы.CRM_ИДВарианта));
	КонецЦикла;	
		
	Для Сч = 0 По ТаблицаВариантов.Количество()-1 Цикл

		СоздатьКнопкуВарианта(ТаблицаВариантов[Сч].CRM_ИДВарианта, СписокИменВариантов.НайтиПоЗначению(ТаблицаВариантов[Сч].CRM_ИДВарианта).Представление);

	КонецЦикла;
	
	// Найдем утвержденный вариант.
	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден",Истина));
	ТекИДВарианта = ?(УтвержденныеСтроки.Количество() = 0, 0, УтвержденныеСтроки[0].CRM_ИДВарианта);
	
	Если ТекИДВарианта > 0 Тогда
		
		Кнопка = Элементы["Вариант"+ТекИДВарианта];
		Кнопка.Заголовок = Кнопка.Заголовок + НСтр("ru = ' (Утв.)'");
		CRM_ИДВарианта = ТекИДВарианта;
		
	Иначе
		// Сделаем активным первый вариант.
		CRM_ИДВарианта = ТаблицаВариантов[0].CRM_ИДВарианта;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя вараинта по номеру.
//
// Параметры:
//  НомерВарианта - Число - номер варианта;
//
// Возвращаемое значение:
//  Строка - Имя варианта.
//	
&НаСервере
Функция ПолучитьИмяВариантаПоНомеру(НомерВарианта) Экспорт
	
	ИмяВарианта = "";
	МассивСтрокВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", НомерВарианта));
	Если МассивСтрокВарианта.Количество() > 0 Тогда
		
		СтрокаВарианта = МассивСтрокВарианта[0];
		
		Если ПустаяСтрока(СтрокаВарианта.CRM_ИмяВарианта) Тогда
			ИмяВарианта = "Вариант " + НомерВарианта;
		Иначе
			ИмяВарианта = СтрокаВарианта.CRM_ИмяВарианта;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ИмяВарианта;
		
КонецФункции// ПолучитьИмяВариантаПоНомеру(НомерВарианта)

// записывает значение комментария из поля ввода в табличную часть.
//
// Параметры:
//  НомерВарианта – Число – номер варианта.
//
&НаКлиенте
Процедура ЗаписатьКомментарийВарианта(НомерВарианта)
	
	СтрокиКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта",НомерВарианта));
	
	Если СтрокиКомментариев.Количество() = 0 Тогда
		СтрокаКомментария = ТаблицаКомментариевВариантов.Добавить();
		СтрокаКомментария.ИДВарианта = НомерВарианта;
	Иначе
		СтрокаКомментария = СтрокиКомментариев[0];
	КонецЕсли;
	
	СтрокаКомментария.КомментарийВарианта = КомментарийВарианта;

КонецПроцедуры // ЗаписатьКомментарийВарианта()

&НаКлиенте
Процедура КомандаУтвердитьВариант(Команда)
	
	МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	Если МассивСтрокВариантов.Количество() = 0 Тогда
		Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя утвердить вариант с незаполненной табличной частью!'"));
		Возврат;
	КонецЕсли;
	
	Элементы.КнопкаУтвердитьВариант.Пометка = НЕ Элементы.КнопкаУтвердитьВариант.Пометка;
	
	// по любому очищаем старую
	Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
		КнопкаПанелиВариантов.Заголовок = СтрЗаменить(КнопкаПанелиВариантов.Заголовок, НСтр("ru = ' (Утв.)'"), "");
	КонецЦикла;

	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
	Для Каждого Строка Из УтвержденныеСтроки Цикл
		Строка.CRM_Утвержден = Ложь;
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Строка.Активность = Ложь;
			Выполнить("ТоварыАктивностьПриИзменении(Строка)");
		КонецЕсли;
	КонецЦикла;

	// Если пометка, тогда утверждаем.
	Если Элементы.КнопкаУтвердитьВариант.Пометка Тогда
		УтвердитьВариант(CRM_ИДВарианта);
		КнопкаУтверждаемогоВарианта = Элементы["Вариант" + CRM_ИДВарианта];
		КнопкаУтверждаемогоВарианта.Заголовок = КнопкаУтверждаемогоВарианта.Заголовок + НСтр("ru = ' (Утв.)'");
	КонецЕсли;
	
	ПересчитатьИтогиСервер();
	
КонецПроцедуры  // КомандаУтвердитьВариант()

// Процедура предназначена для утверждения варианта.
//
&НаКлиенте
Процедура УтвердитьВариант(ИдентификаторВарианта = 0) Экспорт
	//
	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
	Для Каждого Строка Из УтвержденныеСтроки Цикл
		Строка.CRM_Утвержден = Ложь;
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Строка.Активность = Ложь;
			Выполнить("ТоварыАктивностьПриИзменении(Строка)");
		КонецЕсли;
	КонецЦикла;
	
	СтрокиКУтверждению = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИдентификаторВарианта));
	Для Каждого Строка Из СтрокиКУтверждению Цикл
		Строка.CRM_Утвержден = Истина;
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка.Активность = Истина;
				Выполнить("ТоварыАктивностьПриИзменении(Строка)");
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // УтвердитьВариант()

&НаКлиенте
Процедура КомментарийВариантаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("КомментарийВариантаЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, КомментарийВарианта, НСтр("ru = 'Введите описание'"), , Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВариантаЗавершение(ВведенныйКомментарий, ДополнительныеПараметры) Экспорт
	Если ВведенныйКомментарий<>Неопределено Тогда
		КомментарийВарианта =  ВведенныйКомментарий;
	КонецЕсли;
КонецПроцедуры


// Возвращает имя варианта для занесения в табличную часть Товары.
//
// Параметры:
//  НомерВарианта - Число - номер варианта;
//
// Возвращаемое значение:
//  Строка - если имя варианта стандартное, возвращает пустую строку, иначе - имя варианта.
//	
&НаСервере
Функция ИмяВариантаДляТабличнойЧасти(НомерВарианта)
	ИмяВарианта = СписокИменВариантов.НайтиПоЗначению(НомерВарианта).Представление;
	ИмяВарианта = ?(ИмяВарианта = "Вариант " + НомерВарианта, "", ИмяВарианта);
	Возврат ИмяВарианта;
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.Товары.ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители") Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.CRM_Разделители");
	Иначе
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Период",			  Объект.Дата);
		ПараметрыФормы.Вставить("ВидЦен",			  Объект.ВидЦен);
		ПараметрыФормы.Вставить("ТекущаяСтрока",	  Элементы.Товары.ТекущиеДанные.Номенклатура);
		
		ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыФормы,Элемент);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделитель(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьРазделительПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделительПродолжение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если РазрешеноИзменениеТоваров Тогда
		
		Модифицированность = Истина;
		Разделитель = ПредопределенноеЗначение("Справочник.CRM_Разделители.ПустаяСсылка");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьРазделительЗавершение", ЭтотОбъект);
		ПоказатьВводЗначения(ОписаниеОповещения, Разделитель, "Выберите разделитель");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделительЗавершение(Разделитель, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Разделитель) Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Разделитель;
		НоваяСтрока.CRM_ИДВарианта = CRM_ИДВарианта;
		НоваяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
		НоваяСтрока.CRM_ЭтоРазделитель = Истина;
		
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Проверяет, есть ли товары, относящиеся к утвержденному варианту.
//
// Параметры:
//  СтруктураПараметров - Структура - может содержать следующие элементы:

// ВозвращаемоеЗначение:
//  Булево - Истина, если изменение табличной части "Товары" разрешено.
//
Процедура РазрешеноИзменениеТоваров(СтруктураПараметров = Неопределено, ОписаниеОповещенияОЗавершении)
	
	Перем ТоварыТекущаяСтрока, ПроверитьВсеТовары;
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура("ПроверитьВсеТовары", Ложь);
	КонецЕсли;
	
	СтруктураПараметров.Свойство("ТоварыТекущаяСтрока", ТоварыТекущаяСтрока);
	Если Не СтруктураПараметров.Свойство("ПроверитьВсеТовары" , ПроверитьВсеТовары) Тогда
		ПроверитьВсеТовары = Ложь;
	КонецЕсли;
	
	ИДУтвержденногоВарианта = 0;
	Если ТоварыТекущаяСтрока = Неопределено Тогда
		
		Если ПроверитьВсеТовары Тогда
			
			ИндексСтроки = 0;
			ТоварыКоличествоСтрок = Объект.Товары.Количество();
			
			Пока ИндексСтроки < ТоварыКоличествоСтрок И ИДУтвержденногоВарианта = 0 Цикл
				
				СтрокаТовары = Объект.Товары[ИндексСтроки];
				
				Если СтрокаТовары.CRM_Утвержден Тогда
					ИДУтвержденногоВарианта = СтрокаТовары.CRM_ИДВарианта;
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
		
		Иначе	
			
			// Проверим только текущий вариант.
			СтрокиТекущегоВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта",CRM_ИДВарианта));
			Если СтрокиТекущегоВарианта.Количество() > 0 Тогда
				СтрокаТовары = СтрокиТекущегоВарианта[0];
				Если СтрокаТовары.CRM_Утвержден Тогда
					ИДУтвержденногоВарианта = СтрокаТовары.CRM_ИДВарианта;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТоварыТекущаяСтрока.CRM_Утвержден Тогда
		
		ИДУтвержденногоВарианта = ТоварыТекущаяСтрока.CRM_ИДВарианта;

	КонецЕсли;
	
	Если ИДУтвержденногоВарианта > 0 Тогда
		
		ИмяВарианта = СписокИменВариантов.НайтиПоЗначению(ИДУтвержденногоВарианта).Представление;
		
		ТекстВопроса =НСтр("ru = ' Вариант """ + ИмяВарианта + """ утвержден!
					   |При внесении изменений в таблицу товаров и услуг
					   |статус ""Утвержден"" будет снят. Продолжить?'");
					   
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешеноИзменениеТоваровЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);			   
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
        Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина); 
	
КонецПроцедуры// Функция РазрешеноИзменениеТоваров()

&НаКлиенте
Процедура РазрешеноИзменениеТоваровЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
			КнопкаПанелиВариантов.Заголовок = СтрЗаменить(КнопкаПанелиВариантов.Заголовок, НСтр("ru = ' (Утв.)'"), "");
		КонецЦикла;
		
		УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
		Для Каждого Строка Из УтвержденныеСтроки Цикл
			Строка.CRM_Утвержден = Ложь;
			Строка.Активность = Ложь;		
		КонецЦикла;
		
		Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		
		РазрешеноИзменение = Истина;
		
	Иначе
		
		РазрешеноИзменение = Ложь;
		
	КонецЕсли;
	
	ПересчитатьИтогиСервер();
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, РазрешеноИзменение); 
	
КонецПроцедуры// Функция РазрешеноИзменениеТоваров()

&НаКлиенте
Процедура ТоварыПередУдалениемЗавершение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если РазрешеноИзменениеТоваров Тогда
		Объект.Товары.Удалить(Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные));
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавленияЗавершение(РазрешеноИзменениеТоваров, Копирование) Экспорт
	
	Если НЕ РазрешеноИзменениеТоваров Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = Объект.Товары.Добавить();
	НоваяСтрока.CRM_ИДВарианта = CRM_ИДВарианта;
	НоваяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
	
	Если Копирование И ТекСтрока <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока,, "НомерСтроки,НомерСтрокиВарианта");
	КонецЕсли;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
	
	// +CRM Модуль
	//Если Не НоваяСтрока = Неопределено Тогда
	//	НоваяСтрока.Активность = Истина;
	//КонецЕсли;
	// +CRM Модуль
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)

	ОтказТемп = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередНачаломИзмененияЗавершение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	Отказ = ОтказТемп;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзмененияЗавершение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт

	ОтказТемп = НЕ РазрешеноИзменениеТоваров;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьИтогоПоВарианту()
	
	МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	ИтогоПоВарианту = 0;
	Для Каждого СтрокаМассива Из МассивСтрокВариантов Цикл
		ИтогоПоВарианту = ИтогоПоВарианту + СтрокаМассива.СуммаСНДС;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерСтрокиВарианта(Форма)
	СтруктураПоиска = Новый Структура("CRM_ИДВарианта", Форма.CRM_ИДВарианта);
	НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Счетчик = 1;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.CRM_ЭтоРазделитель Тогда
			НайденнаяСтрока.НомерСтрокиВарианта = 0;
			Счетчик = 1;
		Иначе
			НайденнаяСтрока.НомерСтрокиВарианта = Счетчик;
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ОбъектЗначение,ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение,Объект);
	Объект.Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ГруппаИнтерес

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);	
	
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ПоказатьЗначение(,ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	
КонецПроцедуры	

#КонецОбласти

#Область ПанельБП

&НаСервереБезКонтекста
Функция ПроверитьДубликатБизнесПроцесса(Предмет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах", Объект.Ссылка, Объект.CRM_Проект.CRM_КартаМаршрута, Объект.CRM_Проект.CRM_КартаМаршрута.ИспользоватьВИнтересах);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если Найти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_", ""), "_", "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Начать "+ВернутьЗаголовокКоманды(Команда.Имя)+""" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессПродолжение", ЭтотОбъект, Команда.Имя);	
		ПоказатьВопрос(, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Неопределено, Команда.Имя)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Ответ, КомандаИмя) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПроверитьДубликатБизнесПроцесса(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Уже создан бизнес-процесс.
			|Создать новый?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессЗавершение", ЭтотОбъект, КомандаИмя);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Неопределено, КомандаИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Ответ, КомандаИмя) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(КомандаИмя);
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцесса()
	
	Если ИспользоватьБизнесПроцессы И ЗначениеЗаполнено(Объект.CRM_Проект) И ЗначениеЗаполнено(Объект.CRM_Проект.CRM_КартаМаршрута) Тогда
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект, Элементы.ГруппаКнопокСоздать, Объект.CRM_Проект.CRM_КартаМаршрута, Ложь);
	Иначе
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуГиперссылок()
	
	ТекстКоманда = Команды.Найти("_ВыполнитьЗадачу");
	Если ТекстКоманда = Неопределено Тогда
		НоваяКомандаФормы = Команды.Добавить("_ВыполнитьЗадачу");
		НоваяКомандаФормы.Заголовок					= "Выполнить";
		НоваяКомандаФормы.Подсказка					= "Отметить задачу как выполненную";
		НоваяКомандаФормы.Действие					= "Подключаемый_ВыполнитьЗадачу";
		//НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	
	Попытка
		ЭтотОбъект["_ЛичнаяЗадача"] = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		ЭтотОбъект["_ЛичнаяЗадачаСтрокой"] = "";
	Исключение
		ОписаниеТиповЗадача = Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадача", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповЗадача = Новый ОписаниеТипов("Строка");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадачаСтрокой", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	КонецПопытки;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	0 КАК ВидСсылки
	|ПОМЕСТИТЬ ЛичныеЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И (НЕ ЗадачаИсполнителя.Выполнена)
	|	И ЗадачаИсполнителя.Предмет = &Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ЛичныеЗадачи.Ссылка,
	|	ЛичныеЗадачи.ВидСсылки
	|ИЗ
	|	ЛичныеЗадачи КАК ЛичныеЗадачи";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из ТаблицаОбъектов Цикл
		Если СтрокаТаб.ВидСсылки = 0 Тогда
			ЭтотОбъект._ЛичнаяЗадача			= СтрокаТаб.Ссылка;
			ЭтотОбъект._ЛичнаяЗадачаСтрокой	= Строка(СтрокаТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Отрисуем гиперссылки
	// Гирепссылка на Задачу
	Если НЕ Элементы.Найти("_ЛичнаяЗадачаСтрокой") = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаЗаголовок"]);
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаСтрокой"]);
			Элементы.Удалить(Элементы["Кнопка_ВыполнитьЗадачу"]);
		КонецЕсли;
	Иначе
		
		Если ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаЗаголовок", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗаголовок);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Заголовок	= "Задача: ";
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаСтрокой", Тип("ДекорацияФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.Заголовок	= СокрЛП(ЭтотОбъект._ЛичнаяЗадача);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ГиперссылкаНажатие");
			
			НовыйЭлемент = Элементы.Добавить("Кнопка_ВыполнитьЗадачу",Тип("КнопкаФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.ИмяКоманды			= "_ВыполнитьЗадачу";
			НовыйЭлемент.Заголовок			= "Выполнить";
			НовыйЭлемент.Картинка			= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйЭлемент.Отображение		= ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаНаВидимостьПричинаОтказа()
	
	Если Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено Тогда
		Элементы.ПричинаОтказа.Видимость = Истина;
	Иначе
		Объект.CRM_ПричинаОтказа = Справочники.CRM_ПричиныОтказов.ПустаяСсылка();
		Элементы.ПричинаОтказа.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияНетПричиныОтказа.Видимость = НЕ Элементы.ПричинаОтказа.Видимость;
	Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтказаПриИзменении(Элемент)
	
	Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ЗаполнитьГруппуГиперссылок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоНовый Тогда
		ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(ПредложениеСсылка)
	
	Если ЭтоНовый Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные ИЗ СписокФайловПисьма Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Объект.ДокументОснование, ПредложениеСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловПисьма.Очистить();
	
КонецПроцедуры

#КонецОбласти


#Область CRM

&НаКлиенте
// Процедура - динамически подключаемый обработчик команды "ПечатьВнешнегоМакета".
//
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	
	ВыбранныйВариант =Неопределено;
		
	Варианты = ПолучитьВарианты();
	Варианты.Добавить(0,"Все варианты");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПечатьВнешнегоМакетаЗавершение", ЭтотОбъект, Команда);
	Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вариант для печати'"));
	
КонецПроцедуры // Подключаемый_ПечатьВнешнегоМакета()

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакетаЗавершение(РезультатВыбора, Команда) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	ВыбранныйВариант = РезультатВыбора.Значение;
		
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, ВыбранныйВариант);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиСервер()
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры// ПересчитатьИтогиСервер()	

&НаСервере
Процедура ТоварыСохранитьАктивность()
	
	Если Не CRM_ВосстановитьПризнакАктивность Тогда
		
		CRM_ТаблицаАктивность.Очистить();
		
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			
			CRM_ТаблицаАктивностьНоваяСтрока = CRM_ТаблицаАктивность.Добавить();
			
			ЗаполнитьЗначенияСвойств(CRM_ТаблицаАктивностьНоваяСтрока, СтрокаТовары);
			
			СтрокаТовары.Активность = НЕ СтрокаТовары.CRM_ЭтоРазделитель;
			
		КонецЦикла;
		
		CRM_ВосстановитьПризнакАктивность = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ТоварыВосстановитьАктивность()
	
	Если CRM_ВосстановитьПризнакАктивность Тогда	
		
		ИндексПоследнегоТовара = Объект.Товары.Количество() - 1;
		
		Для ИндексТекущегоТовара = 0 По ИндексПоследнегоТовара Цикл
			
			СтрокаТовары = Объект.Товары[ИндексТекущегоТовара];
			
			CRM_ТаблицаАктивностьСтрока = CRM_ТаблицаАктивность[ИндексТекущегоТовара];
			
			СтрокаТовары.Активность = CRM_ТаблицаАктивностьСтрока.Активность	
			
		КонецЦикла;
		
		CRM_ТаблицаАктивность.Очистить();
		
		CRM_ВосстановитьПризнакАктивность = Ложь;
		
	КонецЕсли;		

КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливаем условное оформление для характеристик номенклатуры
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаХарактеристики - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "характеристики используются",
//									если он отличается от "Объект.Товары.ХарактеристикиИспользуются".
// 
&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
																ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.CRM_ЭтоРазделитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливаем условное оформление для вида цены
//
// Параметры:
//  Форма - Форма - Содержит данную форму 
//  ИмяПоляВводаВидаЦены - Строка - Наименование элемента формы, содержащего вид цены,
//                                  если оно отличается от "ТоварыВидЦены".
//  ПутьКПолюОтбора - Строка - Полный путь к реквизиту "ВидЦены",
//                             если он отличается от "Объект.Товары.ВидЦены".
//
&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеВидовЦен(Форма,
											   ИмяПоляВводаВидаЦены = "ТоварыВидЦены",
											   ПутьКПолюОтбора = "Объект.Товары.ВидЦены") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаВидаЦены].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.CRM_ЭтоРазделитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<произвольная>'"));	
	
КонецПроцедуры

#КонецОбласти

НеПроверятьВарианты = Ложь;
