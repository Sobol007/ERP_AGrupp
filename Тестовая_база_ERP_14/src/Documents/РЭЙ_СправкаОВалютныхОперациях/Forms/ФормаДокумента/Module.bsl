#Область ОбработчикиСобытий_Форма

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);

	ТаблицаВидовРасчетныхДокументов.Загрузить(РЭЙ_СлужебныйСервер.ПолучитьТаблицуРасчетныхДокументов());
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Объект.Дата = Дата(1,1,1) Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда
			ЗаполнитьДокументНаОсновании(Параметры.Основание, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Если Объект.Корректировка Тогда
				Объект.НомерКорректировки = 0;
				ЗаполнитьНомерКорректировки();
			КонецЕсли;
		Иначе
			ЗаполнитьДокументПоУмолчанию();
		КонецЕсли;				
	КонецЕсли;
		
	СформироватьСписокНаправленияПлатежа(Элементы.ВалютныеОперацииНаправлениеПлатежа.СписокВыбора);
	СформироватьСписокНаправленияПлатежа(Элементы.ВалютныеОперацииРучныеНаправлениеПлатежа.СписокВыбора);
		
	// Инициализация
	ВидОперации_СтароеЗначение = Объект.ВидОперации;
	Организация_СтароеЗначение = Объект.Организация;
	Банк_СтароеЗначение = Объект.Банк;
	Инобанк_СтароеЗначение = Объект.Инобанк;
	БанковскийСчет_СтароеЗначение = Объект.БанковскийСчет;
	Контрагент_СтароеЗначение = Объект.Контрагент;
	КонтрактВЭД_СтароеЗначение = Объект.КонтрактВЭД;
	
	ОснованиеПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(Объект.Основание);
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
	
	// Отображение
	УстановитьОтображение_ИмпортЭкспорт();
	УстановитьОтображение_Инобанк();
	УстановитьОтображение_КорректировочнаяСправка();
	УстановитьОтображение_НомерКорректировки();
	УстановитьОтображение_Основание();
	УстановитьОтображение_Страницы();
	УстановитьОтображение_ГруппаПоСделке();
	
	// Оформление 
	ДобавитьУсловноеОформление_ВалютныеОперации();
	ДобавитьУсловноеОформление_ВалютныеОперацииРучные();
	ДобавитьУсловноеОформление_ДопСоглашение();
	ДобавитьУсловноеОформление_КорректировочныеСправки();
	ДобавитьУсловноеОформление_НаправлениеПлатежа();
	
	УстановитьПараметрыВыбора_Банк();
	УстановитьПараметрыВыбора_Инобанк();
	УстановитьПараметрыВыбора_БанковскийСчет();
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ЗначениеЗаполнено(Параметры.Ключ) И ЗначениеЗаполнено(Объект.Основание) Тогда
		Если РЭЙ_СлужебныйСервер.ПолучитьЗначениеРеквизита(Объект.Основание, "Корректировка") Тогда
			РЭЙ_СлужебныйКлиент.ПредупреждениеСправкаОснованиеЯвляетсяКорректировочной();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.Первичное Тогда
		ЗаполнитьНомераСтрокДляПечати();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
	Оповестить("РЭЙ_ОбновитьФормуЗадач");
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Объект.Корректировка И Не ЗначениеЗаполнено(Объект.Основание) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Основание");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ОснованиеПредставление", Отказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытый_Шапка

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Если Объект.ВалютныеОперации.Количество() > 0 Или Объект.ВалютныеОперацииРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("ВидОперацииПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		ВидОперацииПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперации.Очистить();
		Объект.ВалютныеОперацииРучные.Очистить();
		ВидОперацииПриИзмененииНаСервере();
	Иначе
		Объект.ВидОперации = ВидОперации_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	ВидОперации_СтароеЗначение = Объект.ВидОперации;
	УстановитьОтображение_Инобанк();
	УстановитьПериодЗаполнения();
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = Неопределено;
		БанковскийСчет_СтароеЗначение = Объект.БанковскийСчет;
	КонецЕсли; 
	
	УстановитьПараметрыВыбора_БанковскийСчет();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьПериодЗаполнения();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачПриИзменении(Элемент)
	Объект.ПериодВручную = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонПриИзменении(Элемент)
	Объект.ПериодВручную = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.ВалютныеОперации.Количество() > 0 Или Объект.ВалютныеОперацииРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("ОрганизацияПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперации.Очистить();
		Объект.ВалютныеОперацииРучные.Очистить();
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		Объект.Организация = Организация_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Организация_СтароеЗначение = Объект.Организация;
	
	УстановитьРуководителей();
	
	Объект.КонтрактВЭД = Неопределено;
	КонтрактВЭДПриИзмененииНаСервере();
	
	Объект.БанковскийСчет = Неопределено;
	БанковскийСчет_СтароеЗначение = Неопределено;
	Объект.Банк = Неопределено;
	Банк_СтароеЗначение = Неопределено;
	Объект.Инобанк = Неопределено;
	Инобанк_СтароеЗначение = Неопределено;
	
	УстановитьПараметрыВыбора_Банк();
	УстановитьПараметрыВыбора_Инобанк();
	УстановитьПараметрыВыбора_БанковскийСчет();
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	Если Объект.ВалютныеОперации.Количество() > 0 Или Объект.ВалютныеОперацииРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("БанкПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		БанкПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БанкПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперации.Очистить();
		Объект.ВалютныеОперацииРучные.Очистить();
		БанкПриИзмененииНаСервере();
	Иначе
		Объект.Банк = Банк_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
	Банк_СтароеЗначение = Объект.Банк;

	Объект.БанковскийСчет = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.ВидСчета = ""Расчетный""
	|" + ?(Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом И Не ЗначениеЗаполнено(Объект.Инобанк), "И Банк.РЭЙ_НеЯвляетсяРезидентом", "И БанковскиеСчета.Банк = &Банк") + "
	|" + ?(Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОПоступленииВалютыРФ, "И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта", "") + " 
	|" + ?(Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОВалютныхОперациях, "И БанковскиеСчета.ВалютаДенежныхСредств <> &Валюта", "");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Если Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом Тогда
		Запрос.УстановитьПараметр("Банк", Объект.Инобанк);
	Иначе
		Запрос.УстановитьПараметр("Банк", Объект.Банк);
	КонецЕсли;
	Запрос.УстановитьПараметр("Валюта", ВалютаРегламентированногоУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		
		Объект.БанковскийСчет = Выборка.Ссылка;
		Если Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом Тогда
			Если Не ЗначениеЗаполнено(Объект.Инобанк) Тогда
				Объект.Инобанк = Объект.БанковскийСчет.Банк;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыВыбора_БанковскийСчет();
КонецПроцедуры

&НаКлиенте
Процедура ИнобанкПриИзменении(Элемент)
	Если Объект.ВалютныеОперации.Количество() > 0 Или Объект.ВалютныеОперацииРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("ИнобанкПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		ИнобанкПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнобанкПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперации.Очистить();
		Объект.ВалютныеОперацииРучные.Очистить();
		ИнобанкПриИзмененииНаСервере();
	Иначе
		Объект.Инобанк = Инобанк_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнобанкПриИзмененииНаСервере()
	Инобанк_СтароеЗначение = Объект.Инобанк;
	
	Если ЗначениеЗаполнено(Объект.Инобанк) И Объект.БанковскийСчет.Банк <> Объект.Инобанк тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация
		|	И БанковскиеСчета.Банк = &Банк
		|	И БанковскиеСчета.ВидСчета = ""Расчетный""";
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Банк", Объект.Инобанк);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Объект.БанковскийСчет = Выборка.Ссылка;
			БанковскийСчет_СтароеЗначение = Объект.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыВыбора_БанковскийСчет();
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)		
	Если Объект.ВалютныеОперации.Количество() > 0 Или Объект.ВалютныеОперацииРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("БанковскийСчетПриПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		БанковскийСчетПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперации.Очистить();
		Объект.ВалютныеОперацииРучные.Очистить();
		БанковскийСчетПриИзмененииНаСервере();
	Иначе
		Объект.БанковскийСчет = БанковскийСчет_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииНаСервере()
	Если Объект.ВидОперации <> Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом Тогда
		Если (Не ЗначениеЗаполнено(Объект.Банк)) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Объект.Банк = Объект.БанковскийСчет.Банк;
			Банк_СтароеЗначение = Объект.Банк;
		КонецЕсли;
	Иначе
		Если (Не ЗначениеЗаполнено(Объект.ИноБанк)) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Объект.ИноБанк = Объект.БанковскийСчет.Банк;
			Инобанк_СтароеЗначение = Объект.Инобанк;
		КонецЕсли;
	КонецЕсли;
	
	БанковскийСчет_СтароеЗначение = Объект.БанковскийСчет;
КонецПроцедуры	

&НаКлиенте
Процедура ПервичноеПриИзменении(Элемент)
	Объект.Корректировка = Не Объект.Первичное;
	ПервичноеКорректировкаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаПриИзменении(Элемент)
	Объект.Первичное = Не Объект.Корректировка;
	ПервичноеКорректировкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПервичноеКорректировкаПриИзмененииНаСервере()
	Если Не Объект.Корректировка и ЗначениеЗаполнено(Объект.Основание) Тогда
		Объект.Основание = Неопределено;
		ОснованиеПредставление = "";
	КонецЕсли;
	
	ЗаполнитьНомерКорректировки();
	
	УстановитьОтображение_КорректировочнаяСправка();
	УстановитьОтображение_Основание();
	УстановитьОтображение_НомерКорректировки();
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Первичное", Истина);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	ПараметрыОткрытия.Вставить("ТекущийЭлемент", Объект.Основание); 
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Документ.РЭЙ_СправкаОВалютныхОперациях.ФормаВыбора", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОснованиеОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ОснованиеОбработкаВыбораНаСервере(ВыбранноеЗначение)
	Отказ = Ложь;
	ЗаполнитьДокументНаОсновании(ВыбранноеЗначение, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();	
	ОснованиеПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(Объект.Основание);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		ПоказатьЗначение(, Объект.Основание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеОчистка(Элемент, СтандартнаяОбработка)
	Объект.Основание = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура РучноеЗаполнениеПриИзменении(Элемент)
	Если Объект.РучноеЗаполнение И Объект.ВалютныеОперации.Количество() > 0 Тогда
		ТекстВопроса = 
		"Переход в режим ручного заполнения приведёт к потере данных на вкладке ""Операции"".
		|Вы уверены, что хотите продолжить?";
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("РучноеЗаполнениеПриИзмененииВалютныеОперацииПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
		
	ИначеЕсли Объект.РучноеЗаполнение = Ложь И Объект.ВалютныеОперацииРучные.Количество() > 0 Тогда
		ТекстВопроса = 
		"Таблица ручных валютных операций не пуста и будет очищена!
		|Вы уверены, что хотите продолжить?";
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("РучноеЗаполнениеПриИзмененииВалютныеОперацииРучныеПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе  
		УстановитьОтображение_Страницы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РучноеЗаполнениеПриИзмененииВалютныеОперацииПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперации.Очистить();
		УстановитьОтображение_Страницы();
	Иначе
		Объект.РучноеЗаполнение = Ложь;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура РучноеЗаполнениеПриИзмененииВалютныеОперацииРучныеПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперацииРучные.Очистить();
		УстановитьОтображение_Страницы();
	Иначе
		Объект.РучноеЗаполнение = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоСделкеПриИзменении(Элемент)
	Если Объект.ПоСделке = Ложь Тогда
		Объект.Контрагент = Неопределено;
		Объект.КонтрактВЭД = Неопределено;
	КонецЕсли;
	
	ЗаполнитьФлагиИмпортЭкспорт();
	
	УстановитьОтображение_ГруппаПоСделке();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Если Объект.ВалютныеОперации.Количество() > 0 Или Объект.ВалютныеОперацииРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("КонтрагентПриПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперации.Очистить();
		Объект.ВалютныеОперацииРучные.Очистить();
		КонтрагентПриИзмененииНаСервере();
	Иначе
		Объект.Контрагент = Контрагент_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Контрагент_СтароеЗначение = Объект.Контрагент;
	
	Если Объект.Контрагент <> Объект.КонтрактВЭД.Контрагент Тогда
		Объект.КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоКонтрагенту(Объект.Организация, Объект.Контрагент);
		КонтрактВЭДПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрактВЭДПриИзменении(Элемент)
	Если Объект.ВалютныеОперации.Количество() > 0 Или Объект.ВалютныеОперацииРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("КонтрактВЭДПриПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		КонтрактВЭДПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрактВЭДПриПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВалютныеОперации.Очистить();
		Объект.ВалютныеОперацииРучные.Очистить();
		КонтрактВЭДПриИзмененииНаСервере();
	Иначе
		Объект.КонтрактВЭД = КонтрактВЭД_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрактВЭДПриИзмененииНаСервере()
	КонтрактВЭД_СтароеЗначение = Объект.КонтрактВЭД;
	
	Если ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = Объект.КонтрактВЭД.Контрагент;
			Контрагент_СтароеЗначение = Объект.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьФлагиИмпортЭкспорт();
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Если Объект.УполномоченныйВК.Пустая() Тогда
		Объект.УполномоченныйВК = РЭЙ_СлужебныйСервер.ФизЛицоПользователя(Объект.Ответственный);
		УстановитьТелефонУполномоченногоВК();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйВКПриИзменении(Элемент)
	УстановитьТелефонУполномоченногоВК();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_Форма

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ПараметрыОткрытия = Новый Структура("НачалоПериода,КонецПериода", Объект.ДатаНач, Объект.ДатаКон);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериод_Завершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыОткрытия, Элементы.ВыбратьПериод,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод_Завершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНач = РезультатВыбора.НачалоПериода;
	Объект.ДатаКон = РезультатВыбора.КонецПериода;
	Объект.ПериодВручную = Истина;		
КонецПроцедуры		

&НаКлиенте
Процедура ЗаполнитьВалютныеОперации(Команда)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(, "Запрещено заполнять корректировочную справку.");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана организация");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено значение константы ""Валюта регламентированного учета""");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Банк) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран банк");
		Возврат;
	КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран банковский счет");
			Возврат;
		КонецЕсли;
	Если Объект.ВалютныеОперации.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("ЗаполнитьВалютныеОперации_Продолжение", ЭтотОбъект));
	Иначе	
		ЗаполнитьВалютныеОперацииНаСервере();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалютныеОперации_Продолжение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВалютныеОперацииНаСервере();
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВалютныеОперацииНаСервере()	
	Объект.ВалютныеОперации.Очистить();
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ТекстЗапроса = "";
	Для К = 0 По ТаблицаВидовРасчетныхДокументов.Количество() - 1 Цикл
		СтрокаВидаДокумента = ТаблицаВидовРасчетныхДокументов[К];
		ТекстТаблицыШапки = "ТаблицаРД" + ?(СтрокаВидаДокумента.ЕстьРасшифровкаПлатежа, ".Ссылка", "");
		
		Если К = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ РАЗЛИЧНЫЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаРД.Ссылка КАК Ссылка
		|" + ?(К = 0, "ПОМЕСТИТЬ РасчетныеДокументы", "") + "
		|ИЗ
		|	Документ." + СтрокаВидаДокумента.Вид + ?(СтрокаВидаДокумента.ЕстьРасшифровкаПлатежа, ".РасшифровкаПлатежа", "") + " КАК ТаблицаРД";
		Если СтрокаВидаДокумента.ВидВРег = ВРег("СписаниеСРасчетногоСчета") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
			|		ПО (ТаблицаРД.Ссылка.ДокументОснование = ПлатежноеПоручение.Ссылка)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	" + ТекстТаблицыШапки + ".Организация = &Организация
		|	" + ?(СтрокаВидаДокумента.Проведение, "И " + ТекстТаблицыШапки + ".Проведен", "И НЕ " + ТекстТаблицыШапки + ".ПометкаУдаления") + "
		|	И " + ТекстТаблицыШапки + ".Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И " + ТекстТаблицыШапки + ".БанковскийСчет = &БанковскийСчет
		|	" + ?(СтрокаВидаДокумента.ВидВРег = ВРег("СписаниеСРасчетногоСчета"), " И ПлатежноеПоручение.Ссылка ЕСТЬ NULL", "");
		
		Если Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОВалютныхОперациях Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И " + ТекстТаблицыШапки + ".Валюта <> &Рубли";
		ИначеЕсли Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОПоступленииВалютыРФ Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И " + ТекстТаблицыШапки + ".Валюта = &Рубли";
		ИначеЕсли Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И " + ТекстТаблицыШапки + ".БанковскийСчет.Банк = &Инобанк";
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Банк", Объект.Банк);
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	Запрос.УстановитьПараметр("Рубли", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Инобанк", Объект.Инобанк);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасчетныеДокументы.Ссылка КАК Ссылка,
	|	РасчетныеДокументы.Ссылка.Дата КАК Дата
	|ИЗ
	|	РасчетныеДокументы КАК РасчетныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РЭЙ_СправкаОВалютныхОперациях.ВалютныеОперации КАК СВО
	|		ПО (СВО.Ссылка.Проведен)
	|			И (СВО.Ссылка <> &Ссылка)
	|			И (СВО.Ссылка.ВидОперации = &ВидОперации)
	|			И РасчетныеДокументы.Ссылка = СВО.РасчетныйДокумент
	|ГДЕ
	|	СВО.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетныеДокументы.Ссылка,
	|	РасчетныеДокументы.Ссылка.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидОперации", Объект.ВидОперации);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		текДоговорКонтрагента = РЭЙ_СлужебныйСервер.ПолучитьДоговорКонтрагентаПоРасчетномуДокументу(Выборка.Ссылка);
		текКонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоДоговоруКонтрагента(текДоговорКонтрагента);
		
		Если Не ЗначениеЗаполнено(текКонтрактВЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Или ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Если текДоговорКонтрагента[РЭЙ_Универсализация.Реквизит_Договор_Контрагент()] <> Объект.Контрагент Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
				Если текКонтрактВЭД <> Объект.КонтрактВЭД Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			
		
		НоваяСтрока = Объект.ВалютныеОперации.Добавить();
		НоваяСтрока.РасчетныйДокумент = Выборка.Ссылка;
		ЗаполнитьСтрокуПоРасчетномуДокументу(НоваяСтрока);
		Если НоваяСтрока.КонтрактВЭД.Экспорт Тогда
			ЗаполнитьАвансыВСтроке(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
КонецПроцедуры	

&НаКлиенте
Процедура Файлы(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = "Документ еще не записан. Записать?";
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ФайлыВопросОЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьФормуФайлы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВопросОЗаписи(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуФайлы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФайлы()
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектВладелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.РЭЙ_Файлы.ФормаСписка", ПараметрыОткрытия,, Новый УникальныйИдентификатор(),,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытый_ТЧ_ВалютныеОперации

&НаКлиенте
Процедура ВалютныеОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(,"Запрещено добавлять строки в корректировочную справку.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииПередУдалением(Элемент, Отказ)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(, "Запрещено удалять строки из корректировочной справки.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элементы.ВалютныеОперации.ТекущиеДанные.НаправлениеПлатежа = 1;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнитьФлагиИмпортЭкспорт();
		УстановитьОтображение_ИмпортЭкспорт();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииПослеУдаления(Элемент)
	ЗаполнитьФлагиИмпортЭкспорт();
	УстановитьОтображение_ИмпортЭкспорт();
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииКорректировкаПриИзменении(Элемент)
	ТабличныеЧасти_КорректировкаПриИзмененииНаСервере("ВалютныеОперации", Элементы.ВалютныеОперации.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииНаправлениеПлатежаПриИзменении(Элемент)
	ВалютныеОперацииНаправлениеПлатежаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииНаправлениеПлатежаПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперации.НайтиПоИдентификатору(Элементы.ВалютныеОперации.ТекущаяСтрока);
	Если СтрокаТЧ.НаправлениеПлатежа = 1 Или СтрокаТЧ.НаправлениеПлатежа = 2 Тогда
		СтруктураПоиска = Новый Структура("Направление, Тип", СтрокаТЧ.НаправлениеПлатежа, ТипЗнч(СтрокаТЧ.РасчетныйДокумент));
		Если ТаблицаВидовРасчетныхДокументов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			СтрокаТЧ.ВидВалютнойОперации = Неопределено;
			ВалютныеОперацииВидВалютнойОперацииПриИзмененииНаСервере();
			СтрокаТЧ.РасчетныйДокумент = Неопределено;	
			ВалютныеОперацииРасчетныйДокументПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииВидВалютнойОперацииПриИзменении(Элемент)
	ВалютныеОперацииВидВалютнойОперацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииВидВалютнойОперацииПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперации.НайтиПоИдентификатору(Элементы.ВалютныеОперации.ТекущаяСтрока);
	СтрокаТЧ.НеобходимоУказаниеОжидаемогоСрока = СтрокаТЧ.ВидВалютнойОперации.ОжидаемыйСрок;
	Установить_НеобходимоУказаниеСрокаВозвратаАванса(СтрокаТЧ);
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
	ЗаполнитьСрокВозвратаАванса(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРасчетныйДокументПриИзменении(Элемент)
	ВалютныеОперацииРасчетныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииРасчетныйДокументПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперации.НайтиПоИдентификатору(Элементы.ВалютныеОперации.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(СтрокаТЧ.РасчетныйДокумент) Тогда
		Если Не ПроверитьКорректностьРасчетногоДокумента(СтрокаТЧ.РасчетныйДокумент) Тогда
			СтрокаТЧ.РасчетныйДокумент = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТЧ.РасчетныйДокумент) Тогда
		ЗаполнитьСтрокуПоРасчетномуДокументу(СтрокаТЧ);
	Иначе
		СтрокаТЧ.НомерРасчетногоДокумента = "";
		СтрокаТЧ.ДатаРасчетногоДокумента = "";
		СтрокаТЧ.ВалютаДокумента = "";
		СтрокаТЧ.ВалютаКонтракта = "";
		СтрокаТЧ.ДопСоглашение = "";
		СтрокаТЧ.КонтрактВЭД = "";
		СтрокаТЧ.ОжидаемыйСрок = "";
		СтрокаТЧ.ПаспортСделки = "";
		СтрокаТЧ.СуммаВВалютеДокумента = "";
		СтрокаТЧ.СуммаВВалютеКонтракта = "";
		СтрокаТЧ.АвансоваяСправка = "";
		СтрокаТЧ.АвансовыйРасчетныйДокумент = "";
		
		СтрокаТЧ.КонтрактВЭДНеЯвляетсяОбъектомВалютногоКонтроля = Ложь;
		СтрокаТЧ.РамочныйКонтракт = Ложь;
		СтрокаТЧ.ФлагДоступностиАвансовыхСправок = Ложь;
		СтрокаТЧ.ПаспортСделкиПредставление = "";
		СтрокаТЧ.АвансоваяСправкаПредставление = "";
		СтрокаТЧ.АвансовыйРасчетныйДокументПредставление = "";
		СтрокаТЧ.РасчетыВУсловныхЕдиницах = Ложь;
		СтрокаТЧ.НеобходимоУказаниеОжидаемогоСрока = Ложь;
		СтрокаТЧ.НеобходимоУказаниеСрокаВозвратаАванса = Ложь;
	КонецЕсли;

	СтрокаТЧ.РасчетныйДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.РасчетныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	ТабличныеЧасти_РасчетныйДокументНачалоВыбора("ВалютныеОперации", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииСуммаВВалютеКонтрактаПриИзменении(Элемент)
	ВалютныеОперацииСуммаВВалютеКонтрактаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииСуммаВВалютеКонтрактаПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперации.НайтиПоИдентификатору(Элементы.ВалютныеОперации.ТекущаяСтрока);

	Если ЗначениеЗаполнено(СтрокаТЧ.ВалютаКонтракта) Тогда
		текДатаОплаты = РЭЙ_СлужебныйСервер.ПолучитьДатуОплатыРасчетногоДокумента(СтрокаТЧ.РасчетныйДокумент);
		СтрокаТЧ.СуммаВВалютеДокумента = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВВалютеКонтракта, текДатаОплаты, СтрокаТЧ.ВалютаКонтракта, СтрокаТЧ.ВалютаДокумента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииКонтрактВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", Элементы.ВалютныеОперации.ТекущиеДанные.КонтрактВЭД);
	
	МассивКонтрактовВЭД = СформироватьМассивДляВыбораКонтрактаВЭД(Элементы.ВалютныеОперации.ТекущиеДанные.РасчетныйДокумент);
	ФормаСписка	= ПолучитьФорму("Справочник.РЭЙ_КонтрактыВЭД.ФормаВыбора", ПараметрыОткрытия, Элемент);
	РЭЙ_СлужебныйКлиент.ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, "Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, МассивКонтрактовВЭД);
	ФормаСписка.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииДопСоглашениеПриИзменении(Элемент)
	ВалютныеОперацииДопСоглашениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииДопСоглашениеПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперации.НайтиПоИдентификатору(Элементы.ВалютныеОперации.ТекущаяСтрока);
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
	ЗаполнитьСрокВозвратаАванса(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииДопСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТабличныеЧасти_ДопСоглашениеНачалоВыбора("ВалютныеОперации", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииПаспортСделкиПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ВалютныеОперации.ТекущиеДанные;
	СтрокаТЧ.ПаспортСделкиПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.ПаспортСделки);
КонецПроцедуры	

&НаКлиенте
Процедура ВалютныеОперацииОжидаемыйСрокПриИзменении(Элемент)
	ВалютныеОперацииОжидаемыйСрокПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииОжидаемыйСрокПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперации.НайтиПоИдентификатору(Элементы.ВалютныеОперации.ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаТЧ.КонтрактВЭД) И СтрокаТЧ.КонтрактВЭД.ОтсрочкаПлатежаПредоплаты <> Перечисления.РЭЙ_ОтсрочкаПлатежаПредоплаты.КоличествоКалендарныхДнейПоКонтракту Тогда
		ЗаполнитьСрокВозвратаАванса(СтрокаТЧ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииАвансоваяСправкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КонтрактВЭД", Элементы.ВалютныеОперации.ТекущиеДанные.КонтрактВЭД);
	ПараметрыОткрытия.Вставить("РасчетныйДокумент", Элементы.ВалютныеОперации.ТекущиеДанные.РасчетныйДокумент);
	ПараметрыОткрытия.Вставить("СсылкаСВО", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ДанныеТекущегоДокумента", СформироватьДанныеДокументаДляВыбораАвансовойСправки());
	
	ОткрытьФорму("Документ.РЭЙ_СправкаОВалютныхОперациях.Форма.ФормаВыбораАвансовойСправки", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииАвансоваяСправкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтрокаТЧ = Объект.ВалютныеОперации.НайтиПоИдентификатору(Элементы.ВалютныеОперации.ТекущаяСтрока);
	УстановитьАвансВСтроке(СтрокаТЧ, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииАвансоваяСправкаОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ВалютныеОперации.ТекущиеДанные.АвансоваяСправка = Неопределено;
	Элементы.ВалютныеОперации.ТекущиеДанные.АвансовыйРасчетныйДокумент = Неопределено;
	Элементы.ВалютныеОперации.ТекущиеДанные.АвансоваяСправкаПредставление = "";
	Элементы.ВалютныеОперации.ТекущиеДанные.АвансовыйРасчетныйДокументПредставление = "";
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииАвансовыйРасчетныйДокументНачалоВыбора(Элемент
	, ДанныеВыбора, СтандартнаяОбработка)
	ВалютныеОперацииАвансоваяСправкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииАвансовыйРасчетныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтрокаТЧ = Объект.ВалютныеОперации.НайтиПоИдентификатору(Элементы.ВалютныеОперации.ТекущаяСтрока);
	УстановитьАвансВСтроке(СтрокаТЧ, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииАвансовыйРасчетныйДокументОчистка(Элемент, СтандартнаяОбработка)
	ВалютныеОперацииАвансоваяСправкаОчистка(Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытый_ТЧ_ВалютныеОперацииРучные

&НаКлиенте
Процедура ВалютныеОперацииРучныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(,"Запрещено добавлять строки в корректировочную справку.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеПередУдалением(Элемент, Отказ)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(, "Запрещено удалять строки из корректировочной справки.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элементы.ВалютныеОперацииРучные.ТекущиеДанные.НаправлениеПлатежа = 1;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнитьФлагиИмпортЭкспорт();
		УстановитьОтображение_ИмпортЭкспорт();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеПослеУдаления(Элемент)
	ЗаполнитьФлагиИмпортЭкспорт();
	УстановитьОтображение_ИмпортЭкспорт();
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеКорректировкаПриИзменении(Элемент)
	ТабличныеЧасти_КорректировкаПриИзмененииНаСервере("ВалютныеОперацииРучные", Элементы.ВалютныеОперацииРучные.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеНаправлениеПлатежаПриИзменении(Элемент)
	ВалютныеОперацииРучныеНаправлениеПлатежаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииРучныеНаправлениеПлатежаПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперацииРучные.НайтиПоИдентификатору(Элементы.ВалютныеОперацииРучные.ТекущаяСтрока);
	Если СтрокаТЧ.НаправлениеПлатежа = 1 Или СтрокаТЧ.НаправлениеПлатежа = 2 Тогда
		СтруктураПоиска = Новый Структура("Направление, Тип", СтрокаТЧ.НаправлениеПлатежа, ТипЗнч(СтрокаТЧ.РасчетныйДокумент));
		Если ТаблицаВидовРасчетныхДокументов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			СтрокаТЧ.ВидВалютнойОперации = Неопределено;
			ВалютныеОперацииРучныеВидВалютнойОперацииПриИзмененииНаСервере();
			СтрокаТЧ.РасчетныйДокумент = Неопределено;	
			ВалютныеОперацииРучныеРасчетныйДокументПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеВидВалютнойОперацииПриИзменении(Элемент)
	ВалютныеОперацииРучныеВидВалютнойОперацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииРучныеВидВалютнойОперацииПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперацииРучные.НайтиПоИдентификатору(Элементы.ВалютныеОперацииРучные.ТекущаяСтрока);
	СтрокаТЧ.НеобходимоУказаниеОжидаемогоСрока = СтрокаТЧ.ВидВалютнойОперации.ОжидаемыйСрок;
	Установить_НеобходимоУказаниеСрокаВозвратаАванса(СтрокаТЧ);
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
	ЗаполнитьСрокВозвратаАванса(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеРасчетныйДокументПриИзменении(Элемент)
	ВалютныеОперацииРучныеРасчетныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииРучныеРасчетныйДокументПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперацииРучные.НайтиПоИдентификатору(Элементы.ВалютныеОперацииРучные.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(СтрокаТЧ.РасчетныйДокумент) Тогда
		Если Не ПроверитьКорректностьРасчетногоДокумента(СтрокаТЧ.РасчетныйДокумент) Тогда
			СтрокаТЧ.РасчетныйДокумент = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСтрокуПоРасчетномуДокументу(СтрокаТЧ);
	СтрокаТЧ.РасчетныйДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.РасчетныйДокумент);
	ВалютныеОперацииРучныеКонтрактВЭДПриИзмененииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРеквизитВидВалютнойОперации(РасчетныйДокумент)
	
	Возврат	РасчетныйДокумент.Метаданные().Реквизиты.Найти("РЭЙ_ВидВалютнойОперации") <> Неопределено;	
	
КонецФункции	

&НаКлиенте
Процедура ВалютныеОперацииРучныеРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТабличныеЧасти_РасчетныйДокументНачалоВыбора("ВалютныеОперацииРучные", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеКонтрактВЭДПриИзменении(Элемент)
	ВалютныеОперацииРучныеКонтрактВЭДПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииРучныеКонтрактВЭДПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперацииРучные.НайтиПоИдентификатору(Элементы.ВалютныеОперацииРучные.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(СтрокаТЧ.КонтрактВЭД) Тогда
		СтрокаТЧ.НомерКонтракта = СтрокаТЧ.КонтрактВЭД.КонтрактНомер;
		СтрокаТЧ.ДатаКонтракта = РЭЙ_СлужебныйСервер.ПолучитьДатуКонтракта(СтрокаТЧ.КонтрактВЭД);
	КонецЕсли;
	
	Установить_НеобходимоУказаниеСрокаВозвратаАванса(СтрокаТЧ);
	
	ЗаполнитьФлагиИмпортЭкспорт();
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеКонтрактВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", Элементы.ВалютныеОперацииРучные.ТекущиеДанные.КонтрактВЭД);
	
	ФормаСписка	= ПолучитьФорму("Справочник.РЭЙ_КонтрактыВЭД.ФормаВыбора", ПараметрыОткрытия, Элемент);
	РЭЙ_СлужебныйКлиент.ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, "Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, СформироватьМассивДляВыбораКонтрактаВЭД_Ручные());
	ФормаСписка.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеПаспортСделкиПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ВалютныеОперацииРучные.ТекущиеДанные;
	СтрокаТЧ.ПаспортСделкиПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.ПаспортСделки);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеДопСоглашениеПриИзменении(Элемент)
	ВалютныеОперацииРучныеДопСоглашениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииРучныеДопСоглашениеПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперацииРучные.НайтиПоИдентификатору(Элементы.ВалютныеОперацииРучные.ТекущаяСтрока);
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
	ЗаполнитьСрокВозвратаАванса(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеДопСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТабличныеЧасти_ДопСоглашениеНачалоВыбора("ВалютныеОперацииРучные", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииРучныеОжидаемыйСрокПриИзменении(Элемент)
	ВалютныеОперацииРучныеОжидаемыйСрокПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютныеОперацииРучныеОжидаемыйСрокПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ВалютныеОперацииРучные.НайтиПоИдентификатору(Элементы.ВалютныеОперацииРучные.ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаТЧ.КонтрактВЭД) И СтрокаТЧ.КонтрактВЭД.ОтсрочкаПлатежаПредоплаты <> Перечисления.РЭЙ_ОтсрочкаПлатежаПредоплаты.КоличествоКалендарныхДнейПоКонтракту Тогда
		ЗаполнитьСрокВозвратаАванса(СтрокаТЧ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Отображение

&НаСервере
Процедура ДобавитьУсловноеОформление_ВалютныеОперации()
	// Доступность суммы в валюте контракта
    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВалютныеОперацииСуммаВВалютеКонтракта");
	
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютныеОперации.РасчетыВУсловныхЕдиницах");
    ПолеОтбора.ПравоеЗначение = Ложь;
    ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Доступность срока возврата аванса
    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВалютныеОперацииСрокВозвратаАванса");
	
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютныеОперации.НеобходимоУказаниеСрокаВозвратаАванса");
    ПолеОтбора.ПравоеЗначение = Ложь;
    ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление_ВалютныеОперацииРучные()
	// Доступность срока возврата аванса
    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВалютныеОперацииРучныеСрокВозвратаАванса");
	
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютныеОперацииРучные.НеобходимоУказаниеСрокаВозвратаАванса");
    ПолеОтбора.ПравоеЗначение = Ложь;
    ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление_ДопСоглашение()
	СписокТЧ = Новый СписокЗначений;
	СписокТЧ.Добавить("ВалютныеОперации");
	СписокТЧ.Добавить("ВалютныеОперацииРучные");
	
	СписокНазначенияПлатежа = Новый СписокЗначений;
	СформироватьСписокНаправленияПлатежа(СписокНазначенияПлатежа);
	
	Для Каждого ЭлементТЧ Из СписокТЧ Цикл
		Для Каждого ЭлементНазначенияПлатежа Из СписокНазначенияПлатежа Цикл
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ЭлементТЧ.Значение + "ДопСоглашение");
			
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ЭлементТЧ.Значение + ".РамочныйКонтракт");
			ПолеОтбора.ПравоеЗначение = Ложь;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаФормы);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление_КорректировочныеСправки()
	// Видимость колонки "Корректировка"
    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВалютныеОперацииКорректировка");
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВалютныеОперацииРучныеКорректировка");
	
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Первичное");
    ПолеОтбора.ПравоеЗначение = Истина;
    ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Только просмотр Валютные операции
    ЭлементУсловногоОформленияТолькоПросмотр = УсловноеОформление.Элементы.Добавить();
	
	РЭЙ_СлужебныйСервер.РекурсивноЗаполнитьСписокЭлементовФормыДляОформления(ЭлементУсловногоОформленияТолькоПросмотр, Элементы.ВалютныеОперации, "ВалютныеОперацииКорректировка");
	
	ПолеОтбора = ЭлементУсловногоОформленияТолькоПросмотр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корректировка");
    ПолеОтбора.ПравоеЗначение = Истина;
    ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ПолеОтбора = ЭлементУсловногоОформленияТолькоПросмотр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютныеОперации.Корректировка");
	ПолеОтбора.ПравоеЗначение = Ложь;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловногоОформленияТолькоПросмотр.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр Валютные операции ручные
    ЭлементУсловногоОформленияТолькоПросмотр = УсловноеОформление.Элементы.Добавить();
	
	РЭЙ_СлужебныйСервер.РекурсивноЗаполнитьСписокЭлементовФормыДляОформления(ЭлементУсловногоОформленияТолькоПросмотр, Элементы.ВалютныеОперации, "ВалютныеОперацииРучныеКорректировка");
	
	ПолеОтбора = ЭлементУсловногоОформленияТолькоПросмотр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корректировка");
    ПолеОтбора.ПравоеЗначение = Истина;
    ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ПолеОтбора = ЭлементУсловногоОформленияТолькоПросмотр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютныеОперацииРучные.Корректировка");
	ПолеОтбора.ПравоеЗначение = Ложь;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловногоОформленияТолькоПросмотр.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Серый цвет Валютные операции
	ЭлементУсловногоОформленияЦвет = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВалютныеОперации");
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корректировка");
	ПолеОтбора.ПравоеЗначение = Истина;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютныеОперации.Корректировка");
	ПолеОтбора.ПравоеЗначение = Ложь;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	// Серый цвет Валютные операции ручные
	ЭлементУсловногоОформленияЦвет = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВалютныеОперацииРучные");
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корректировка");
	ПолеОтбора.ПравоеЗначение = Истина;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютныеОперацииРучные.Корректировка");
	ПолеОтбора.ПравоеЗначение = Ложь;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление_НаправлениеПлатежа()
	СписокТЧ = Новый СписокЗначений;
	СписокТЧ.Добавить("ВалютныеОперации");
	СписокТЧ.Добавить("ВалютныеОперацииРучные");
	
	СписокНазначенияПлатежа = Новый СписокЗначений;
	СформироватьСписокНаправленияПлатежа(СписокНазначенияПлатежа);
	
	Для Каждого ЭлементТЧ Из СписокТЧ Цикл
		Для Каждого ЭлементНазначенияПлатежа Из СписокНазначенияПлатежа Цикл
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ЭлементТЧ.Значение + "НаправлениеПлатежа");
			
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ЭлементТЧ.Значение + ".НаправлениеПлатежа");
			ПолеОтбора.ПравоеЗначение = ЭлементНазначенияПлатежа.Значение;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементНазначенияПлатежа.Представление);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_ИмпортЭкспорт()
	Если Объект.ПоСделке Или Объект.ВалютныеОперации.Количество() = 1 Или Объект.ВалютныеОперацииРучные.Количество() = 1 Тогда
		Элементы.Импорт.Видимость = Истина;
		Элементы.Экспорт.Видимость = Истина;
	Иначе
		Элементы.Импорт.Видимость = Ложь;
		Элементы.Экспорт.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_Инобанк()
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом") Тогда
		Элементы.Инобанк.Видимость = Истина;
	Иначе
		Элементы.Инобанк.Видимость = Ложь;
	КонецЕсли;
	
//	УстановитьОтображение_ЭлементыОтбораПоСделке_ПустотаПередКонтрагент();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_КорректировочнаяСправка()
	Если Объект.Корректировка Тогда
		Элементы.ВалютныеОперации.ИзменятьПорядокСтрок = Ложь;
		Элементы.ВалютныеОперацииРучные.ИзменятьПорядокСтрок = Ложь;
	Иначе
		Элементы.ВалютныеОперации.ИзменятьПорядокСтрок = Истина;
		Элементы.ВалютныеОперацииРучные.ИзменятьПорядокСтрок = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_НомерКорректировки()
	Если Объект.Корректировка И Объект.Дата >= Дата(2015,12,28) Тогда
		Элементы.НомерКорректировки.Видимость = Истина;
	Иначе
		Элементы.НомерКорректировки.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_Основание()
	Элементы.Основание.АвтоОтметкаНезаполненного = Объект.Корректировка;
	Элементы.Основание.Видимость = Объект.Корректировка;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_Страницы()
	Элементы.ГруппаСтраницаОперации.Видимость = Не Объект.РучноеЗаполнение;
	Элементы.ГруппаСтраницаРучноеЗаполнение.Видимость = Объект.РучноеЗаполнение;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(Объект.РучноеЗаполнение, Элементы.ГруппаСтраницаРучноеЗаполнение, Элементы.ГруппаСтраницаОперации);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_ГруппаПоСделке()
	Элементы.ГруппаПоСделке.Видимость = Объект.ПоСделке;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора_Банк()
	МассивПараметровВыбора = Новый Массив;
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", РЭЙ_СлужебныйСервер.СписокБанковОрганизации(Объект.Организация)));
	
	Элементы.Банк.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора_Инобанк()
	МассивПараметровВыбора = Новый Массив;
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", РЭЙ_СлужебныйСервер.СписокБанковОрганизации(Объект.Организация, Истина)));
	
	Элементы.Инобанк.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора_БанковскийСчет()
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОПоступленииВалютыРФ") Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", ВалютаРегламентированногоУчета));
	КонецЕсли;	
	
	Элементы.БанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	СвязиПараметровВыбора = Новый Массив;
	
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	Если Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом Тогда
		Если ЗначениеЗаполнено(Объект.Инобанк) Тогда
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Банк", "Объект.Инобанк", РежимИзмененияСвязанногоЗначения.НеИзменять));
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Банк) Тогда
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Банк", "Объект.Банк", РежимИзмененияСвязанногоЗначения.НеИзменять));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполенияДокумента

#Область Документ

&НаСервере
Процедура ЗаполнитьДокументПоУмолчанию()
	Объект.Дата = ТекущаяДатаСеанса();
	Объект.Первичное = Истина;
	Объект.Корректировка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОВалютныхОперациях;	
	КонецЕсли;
	
	Объект.Организация = РЭЙ_Универсализация.ПолучитьОсновнуюОрганизацию();
	УстановитьРуководителей();
	
	УстановитьПериодЗаполнения();
	
	Объект.Ответственный 	= Пользователи.ТекущийПользователь();
	Объект.УполномоченныйВК = РЭЙ_СлужебныйСервер.ФизЛицоПользователя(Объект.Ответственный);
	УстановитьТелефонУполномоченногоВК();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОсновании(ДанныеЗаполнения, Отказ)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РЭЙ_СправкаОВалютныхОперациях") Тогда
		Для Каждого текРеквизит Из Метаданные.Документы.РЭЙ_СправкаОВалютныхОперациях.Реквизиты Цикл
			Объект[текРеквизит.Имя] = ДанныеЗаполнения[текРеквизит.Имя];
		КонецЦикла;
		
		Объект.Основание = ДанныеЗаполнения;
		Объект.Корректировка = Истина;
		Объект.Первичное = Ложь;
		НомерКорректировки = 0;
		ЗаполнитьНомерКорректировки();
		Объект.ВалютныеОперации.Загрузить(ДанныеЗаполнения.ВалютныеОперации.Выгрузить());
		Объект.ВалютныеОперацииРучные.Загрузить(ДанныеЗаполнения.ВалютныеОперацииРучные.Выгрузить());
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьКорректностьРасчетногоДокумента(ДанныеЗаполнения) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Первичное = Истина;
		Объект.РучноеЗаполнение = Ложь;
		Объект.Организация = ДанныеЗаполнения.Организация;
		Объект.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		Объект.Банк = Объект.БанковскийСчет.Банк;
		
		Если Объект.Банк.РЭЙ_НеЯвляетсяРезидентом Тогда
			Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом;
			Объект.Инобанк = Объект.Банк;
			текПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоРасчетномуДокументу(ДанныеЗаполнения);
			Если ЗначениеЗаполнено(текПаспортСделки) Тогда
				Объект.Банк = текПаспортСделки.Банк;
			КонецЕсли;
		Иначе
			Если ДанныеЗаполнения.Контрагент.РЭЙ_НеЯвляетсяРезидентом Тогда
				ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
				Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОПоступленииВалютыРФ;
				Иначе
					Объект.ВидОперации = Перечисления.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОВалютныхОперациях;
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
		
		Объект.ДатаНач = ДанныеЗаполнения.Дата;
		Объект.ДатаКон = ДанныеЗаполнения.Дата;
		
		УстановитьРуководителей();
		Объект.Ответственный = Пользователи.ТекущийПользователь();
		Объект.УполномоченныйВК = РЭЙ_СлужебныйСервер.ФизЛицоПользователя(Объект.Ответственный);
		УстановитьТелефонУполномоченногоВК();
		
		НоваяСтрока = Объект.ВалютныеОперации.Добавить();
		НоваяСтрока.РасчетныйДокумент = ДанныеЗаполнения;
		ЗаполнитьСтрокуПоРасчетномуДокументу(НоваяСтрока);
		Если НоваяСтрока.КонтрактВЭД.Экспорт Тогда
			ЗаполнитьАвансыВСтроке(НоваяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьФлагиИмпортЭкспорт();
КонецПроцедуры

#КонецОбласти

#Область Шапка

&НаСервере 
Процедура ЗаполнитьНомерКорректировки()
	Если Объект.Корректировка Тогда
		Если Объект.Корректировка И Объект.НомерКорректировки = 0 И ЗначениеЗаполнено(Объект.Основание) И Объект.Дата >= Дата(2015,12,28) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(СВО.НомерКорректировки), 0) КАК НомерКорректировки
			|ИЗ
			|	Документ.РЭЙ_СправкаОВалютныхОперациях КАК СВО
			|ГДЕ
			|	СВО.Дата >= ДАТАВРЕМЯ(2015, 12, 28)
			|	И СВО.Проведен
			|	И СВО.Корректировка
			|	И СВО.Основание = &Основание
			|	И СВО.Ссылка <> &Ссылка";
			
			Запрос.УстановитьПараметр("Основание", Объект.Основание);
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Объект.НомерКорректировки = Выборка.НомерКорректировки + 1;
		КонецЕсли;
	Иначе
		Объект.НомерКорректировки = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьФлагиИмпортЭкспорт()
	текКонтрактВЭД = Неопределено;
	Если Объект.ПоСделке Тогда
		текКонтрактВЭД = Объект.КонтрактВЭД;
	Иначе
		Если Не Объект.РучноеЗаполнение Тогда
			Если Объект.ВалютныеОперации.Количество() = 1 Тогда
				текКонтрактВЭД = Объект.ВалютныеОперации[0].КонтрактВЭД;
			КонецЕсли;
		Иначе
			Если Объект.ВалютныеОперацииРучные.Количество() = 1 Тогда
				текКонтрактВЭД = Объект.ВалютныеОперацииРучные[0].КонтрактВЭД;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если текКонтрактВЭД <> Неопределено Тогда
		Объект.Импорт = текКонтрактВЭД.Импорт;
		Объект.Экспорт = текКонтрактВЭД.Экспорт;
	Иначе		
		Объект.Импорт = Ложь;
		Объект.Экспорт = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодЗаполнения()
	Если Не Объект.ПериодВручную Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОВалютныхОперациях") Тогда
			Объект.ДатаНач = РЭЙ_ЗадачиСервер.ДобавитьРабочиеДни(Объект.Дата, -14);
			Объект.ДатаКон = Объект.Дата;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОПоступленииВалютыРФ") Тогда
			Объект.ДатаНач = РЭЙ_ЗадачиСервер.ДобавитьРабочиеДни(Объект.Дата, -14);
			Объект.ДатаКон = Объект.Дата;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.РЭЙ_ВидыОперацийСправкаОВалютныхОперациях.СправкаОРасчетахЧерезСчетаЗаРубежом") Тогда
			Объект.ДатаНач = НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1));
			Объект.ДатаКон = НачалоМесяца(Объект.Дата) - 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьРуководителей()
	РЭЙ_СлужебныйСервер.УстановитьРуководителей(Объект);
КонецПроцедуры

&НаСервере
Процедура УстановитьТелефонУполномоченногоВК()
	Если НЕ Объект.УполномоченныйВК.Пустая() Тогда
		Объект.ТелефонУполномоченногоВК = РЭЙ_СлужебныйСервер.ПолучитьСлужебныйТелефонФизЛица(Объект.УполномоченныйВК);
		Если ПустаяСтрока(Объект.ТелефонУполномоченногоВК) Тогда
			Сообщить("У выбранного физ.лица не заполнен служебный телефон! Заполните телефон в карточке физ.лица и перевыберите физ.лицо.");
		КонецЕсли;
	Иначе
		Объект.ТелефонУполномоченногоВК = "";
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ТабличныеЧасти

&НаСервере
Процедура ЗаполнитьСтрокуПоРасчетномуДокументу(СтрокаТЧ)
	Если Не ЗначениеЗаполнено(СтрокаТЧ.РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	//Направление платежа
	ВидРасчетногоДокумента = ВРег(СтрокаТЧ.РасчетныйДокумент.Метаданные().Имя);
	СтрокаТаблицыРасчетныхДокументов = ТаблицаВидовРасчетныхДокументов.НайтиСтроки(Новый Структура("ВидВРег", ВидРасчетногоДокумента))[0];
	Если СтрокаТаблицыРасчетныхДокументов <> Неопределено Тогда
		СтрокаТЧ.НаправлениеПлатежа = СтрокаТаблицыРасчетныхДокументов.Направление;
	КонецЕсли;
	
	//Вид валютной операции
	Если СтрокаТЧ.РасчетныйДокумент.Метаданные().Реквизиты.Найти("РЭЙ_ВидВалютнойОперации") <> Неопределено Тогда
		СтрокаТЧ.ВидВалютнойОперации = СтрокаТЧ.РасчетныйДокумент.РЭЙ_ВидВалютнойОперации;
  	ИначеЕсли СтрокаТЧ.РасчетныйДокумент.Метаданные().Реквизиты.Найти("НазначениеПлатежа") <> Неопределено Тогда
		//Поиск строки вида {VOxxxxx}
		ВидОбработкиКодаВОИзВходящегоПлатежа = Константы.РЭЙ_ВидОбработкиКодаВОИзВходящегоПлатежа.Получить();
		Если ВидОбработкиКодаВОИзВходящегоПлатежа <> 2 Тогда
			СтрНазначениеПлатежа = СтрокаТЧ.РасчетныйДокумент.НазначениеПлатежа;
			
			тПоз = Найти(СтрНазначениеПлатежа, "{VO");
			Если тПоз > 0 Тогда
				СтрНазначениеПлатежа = Сред(СтрНазначениеПлатежа, тПоз);
				
				Если Сред(СтрНазначениеПлатежа, 9, 1) = "}" Тогда
					текКодВО = Сред(СтрНазначениеПлатежа, 4, 5);
					текВидВО = Справочники.РЭЙ_ВидыВалютныхОпераций.НайтиПоКоду(текКодВО);
					Если ЗначениеЗаполнено(текВидВО) Тогда
						СтрокаТЧ.ВидВалютнойОперации = текВидВО; 
						Если ВидОбработкиКодаВОИзВходящегоПлатежа = 1 Тогда
							Сообщить("Код валютной операции в строке " + СтрокаТЧ.НомерСтроки + " был взят из назначения платежа {VO" + текКодВО + "}, указанного нерезидентом в входящем платежном документе " + РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.РасчетныйДокумент) + ". Проверьте корректность указанного вида валютной операции, и при необходимости перевыберите ее из справочника ""Перечень видов валютных операций""");
						Конецесли;
					Иначе
						Сообщить("Строка " + СтрокаТЧ.НомерСтроки + ": В справочнике ""Виды валютных операций"" не найден код " + текКодВО + ", указанный в назначении платежа документа " + РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.РасчетныйДокумент) + ".
						|Проверьте данный код на корректность и/или добавьте его из Перечня видов валютных операций.");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Номер расчетного документа
	ЗаполнитьНомерРасчетногоДокумента(СтрокаТЧ);	
	
	//Дата расчетного документа
	Если СтрокаТЧ.НаправлениеПлатежа = 1 Тогда
		СтрокаТЧ.ДатаРасчетногоДокумента = СтрокаТЧ.РасчетныйДокумент.ДатаВходящегоДокумента;
	Иначе
		СтрокаТЧ.ДатаРасчетногоДокумента = СтрокаТЧ.РасчетныйДокумент.Дата;
	КонецЕсли;
	
	//Контракт ВЭД, паспорт сделки, доп. соглашение
	ДоговорКонтрагента = РЭЙ_СлужебныйСервер.ПолучитьДоговорКонтрагентаПоРасчетномуДокументу(СтрокаТЧ.РасчетныйДокумент);
	СтрокаТЧ.КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоДоговоруКонтрагента(ДоговорКонтрагента);
	Если ЗначениеЗаполнено(СтрокаТЧ.КонтрактВЭД) Тогда
		СтрокаТЧ.КонтрактВЭДНеЯвляетсяОбъектомВалютногоКонтроля = СтрокаТЧ.КонтрактВЭД.НеЯвляетсяОбъектомВалютногоКонтроля;		
		СтрокаТЧ.РамочныйКонтракт = СтрокаТЧ.КонтрактВЭД.РамочныйКонтракт;		
		СтрокаТЧ.ФлагДоступностиАвансовыхСправок = СтрокаТЧ.КонтрактВЭД.Экспорт;
		СтрокаТЧ.РасчетыВУсловныхЕдиницах = РЭЙ_СлужебныйСервер.ПолучитьЗначениеФлагаРасчетыВУсловныхЕдиницах(СтрокаТЧ.КонтрактВЭД);
		
		СтрокаТЧ.ПаспортСделки = РЭЙ_СлужебныйСервер.ПолучитьПаспортСделкиПоКонтрактуВЭД(СтрокаТЧ.КонтрактВЭД);
		СтрокаТЧ.ПаспортСделкиПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.ПаспортСделки);
		Если СтрокаТЧ.КонтрактВЭД.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			СтрокаТЧ.ДопСоглашение = ДоговорКонтрагента;
		КонецЕсли;
		
		ВалютаКонтракта = СтрокаТЧ.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		ВалютаКонтракта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
		
	//Ожидаемый срок
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
	
	//Срок возврата аванса
	ЗаполнитьСрокВозвратаАванса(СтрокаТЧ);
	
	// Признак представления документа
	Если СтрокаТЧ.РасчетныйДокумент.Метаданные().Реквизиты.Найти("РЭЙ_ПризнакПредставленияДокументов") <> Неопределено Тогда
		СтрокаТЧ.ПризнакПредставленияДокументов = СтрокаТЧ.РасчетныйДокумент.РЭЙ_ПризнакПредставленияДокументов;
	КонецЕсли;
	
	//Суммы
	СтрокаТЧ.ВалютаДокумента = СтрокаТЧ.РасчетныйДокумент.Валюта;
	СтруктураСуммаРасчетногоДокумента = РЭЙ_СлужебныйСервер.ПолучитьСуммуДокументаДляСВО(СтрокаТЧ.РасчетныйДокумент, СтрокаТЧ.КонтрактВЭД);
	СтрокаТЧ.СуммаВВалютеДокумента = СтруктураСуммаРасчетногоДокумента.СуммаВВалютеДокумента;
	
	Если СтрокаТЧ.ВалютаДокумента <> ВалютаКонтракта Тогда
		СтрокаТЧ.ВалютаКонтракта = ВалютаКонтракта;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВалютаКонтракта) Тогда
			СтрокаТЧ.СуммаВВалютеКонтракта = СтруктураСуммаРасчетногоДокумента.СуммаВВалютеКонтракта;
		КонецЕсли;
	Иначе
		СтрокаТЧ.ВалютаКонтракта = Неопределено;
		СтрокаТЧ.СуммаВВалютеКонтракта = 0;
	КонецЕсли;
	
	ЗаполнитьФлагиИмпортЭкспорт();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидВалютнойОперации(СтрокаТЧ)
	Если Не ЗначениеЗаполнено(СтрокаТЧ.РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.РасчетныйДокумент.Метаданные().Реквизиты.Найти("ВидВалютнойОперации") <> Неопределено Тогда
		СтрокаТЧ.ВидВалютнойОперации = СтрокаТЧ.РасчетныйДокумент.ВидВалютнойОперации;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерРасчетногоДокумента(СтрокаТЧ)
	Если Не ЗначениеЗаполнено(СтрокаТЧ.РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.НаправлениеПлатежа = 1 Тогда
		Если СтрокаТЧ.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			СтрокаТЧ.НомерРасчетногоДокумента = СтрокаТЧ.РасчетныйДокумент.НомерВходящегоДокумента;
			Если ПустаяСтрока(СтрокаТЧ.НомерРасчетногоДокумента) Тогда
				Сообщить("Номер входящего документа не заполнен, т.к. он не указан в документе " + РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.РасчетныйДокумент) + ".");
			КонецЕсли;
		Иначе
			СтрокаТЧ.НомерРасчетногоДокумента = "";
		КонецЕсли;
	Иначе
		СтрокаТЧ.НомерРасчетногоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТЧ.РасчетныйДокумент.Номер, Истина, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуВВалютеКонтракта(СтрокаТЧ)
	Если ЗначениеЗаполнено(СтрокаТЧ.ВалютаКонтракта) Тогда
		текДатаОплаты = РЭЙ_СлужебныйСервер.ПолучитьДатуОплатыРасчетногоДокумента(СтрокаТЧ.РасчетныйДокумент);
		СтрокаТЧ.СуммаВВалютеКонтракта = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВВалютеДокумента, текДатаОплаты, СтрокаТЧ.ВалютаДокумента, СтрокаТЧ.ВалютаКонтракта);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОжидаемыйСрок(СтрокаТЧ)
	Если ЗначениеЗаполнено(СтрокаТЧ.КонтрактВЭД) И СтрокаТЧ.ВидВалютнойОперации.ОжидаемыйСрок
		И (СтрокаТЧ.КонтрактВЭД.ОтсрочкаПлатежаПредоплаты = Перечисления.РЭЙ_ОтсрочкаПлатежаПредоплаты.ОжидаемыйСрок 
		Или СтрокаТЧ.КонтрактВЭД.ОтсрочкаПлатежаПредоплаты = Перечисления.РЭЙ_ОтсрочкаПлатежаПредоплаты.КоличествоКалендарныхДнейПоКонтракту) Тогда
		
		текКонтрактВЭД = СтрокаТЧ.КонтрактВЭД;
		
		СтартоваяДата = Неопределено;
		
		Если текКонтрактВЭД.ВидСтартовойДатыОжидаемогоСрока = Перечисления.РЭЙ_ВидыСтартовыхДатОжидаемогоСрока.ДатаДокумента Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.РасчетныйДокумент) Тогда
				СтартоваяДата = СтрокаТЧ.РасчетныйДокумент.Дата;
			Иначе
				СтартоваяДата = СтрокаТЧ.ДатаРасчетногоДокумента;
			КонецЕсли;
		ИначеЕсли текКонтрактВЭД.ВидСтартовойДатыОжидаемогоСрока = Перечисления.РЭЙ_ВидыСтартовыхДатОжидаемогоСрока.ДатаПоставкиОтгрузки Тогда
			Если Не текКонтрактВЭД.РамочныйКонтракт Тогда
				СтартоваяДата = текКонтрактВЭД.ДатаПоставкиОтгрузки;
			Иначе 				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РЭЙ_ДопСоглашения.ДатаПоставкиОтгрузки
				|ИЗ
				|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
				|ГДЕ
				|	РЭЙ_ДопСоглашения.Договор = &КонтрактВЭД
				|	И РЭЙ_ДопСоглашения.ДопСоглашение = &ДопСоглашение";
				
				Запрос.УстановитьПараметр("КонтрактВЭД", текКонтрактВЭД);
				Запрос.УстановитьПараметр("ДопСоглашение", СтрокаТЧ.ДопСоглашение);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					СтартоваяДата = Выборка.ДатаПоставкиОтгрузки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СтартоваяДата) Тогда
			Если Не ТекКонтрактВЭД.РамочныйКонтракт Тогда
				СтрокаТЧ.ОжидаемыйСрок = СтартоваяДата + (текКонтрактВЭД.КоличествоДней + текКонтрактВЭД.КоличествоДнейДополнительное) * 86400;
			Иначе 				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РЭЙ_ДопСоглашения.Договор,
				|	РЭЙ_ДопСоглашения.ДопСоглашение,
				|	РЭЙ_ДопСоглашения.ОжидаемоеКоличествоДней,
				|	РЭЙ_ДопСоглашения.ОжидаемоеКоличествоДнейДополнительное,
				|	РЭЙ_ДопСоглашения.ДатаОкончанияКонтракта
				|ИЗ
				|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
				|ГДЕ
				|	РЭЙ_ДопСоглашения.Договор = &КонтрактВЭД
				|	И РЭЙ_ДопСоглашения.ДопСоглашение = &ДопСоглашение";
				
				Запрос.УстановитьПараметр("КонтрактВЭД", текКонтрактВЭД);
				Запрос.УстановитьПараметр("ДопСоглашение", СтрокаТЧ.ДопСоглашение);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					СтрокаТЧ.ОжидаемыйСрок =  СтартоваяДата + (Выборка.ОжидаемоеКоличествоДней + Выборка.ОжидаемоеКоличествоДнейДополнительное) * 86400;						
				Иначе 	
					СтрокаТЧ.ОжидаемыйСрок = Дата(1,1,1); 
				КонецЕсли;
			КонецЕсли;
		Иначе 	
			СтрокаТЧ.ОжидаемыйСрок = Дата(1,1,1); 
		КонецЕсли;
		
		Если СтрокаТЧ.ОжидаемыйСрок > ТекКонтрактВЭД.ДатаЗавершенияОбязательствПоКонтракту Тогда
			СтрокаТЧ.ОжидаемыйСрок = ТекКонтрактВЭД.ДатаЗавершенияОбязательствПоКонтракту;
			Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " ожидаемый срок установлен равным дате завершения обязательств по контракту, т.к. расчетная дата ожидаемого срока превышала дату завершения обязательств по контракту.");
		КонецЕсли;
	Иначе
		СтрокаТЧ.ОжидаемыйСрок = Дата(1,1,1); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСрокВозвратаАванса(СтрокаТЧ)
	Если ЗначениеЗаполнено(СтрокаТЧ.КонтрактВЭД) И СтрокаТЧ.ВидВалютнойОперации.СрокВозвратаАванса Тогда
		Если СтрокаТЧ.КонтрактВЭД.ОтсрочкаПлатежаПредоплаты = Перечисления.РЭЙ_ОтсрочкаПлатежаПредоплаты.ОжидаемыйСрок Тогда
			СтрокаТЧ.СрокВозвратаАванса = СтрокаТЧ.ОжидаемыйСрок;
		ИначеЕсли СтрокаТЧ.КонтрактВЭД.ОтсрочкаПлатежаПредоплаты = Перечисления.РЭЙ_ОтсрочкаПлатежаПредоплаты.КоличествоКалендарныхДнейПоКонтракту Тогда
			
			Если ЗначениеЗаполнено(СтрокаТЧ.РасчетныйДокумент) Тогда
				текДатаРасчетногоДокумента = СтрокаТЧ.РасчетныйДокумент.Дата;
			Иначе
				текДатаРасчетногоДокумента = СтрокаТЧ.ДатаРасчетногоДокумента;
			КонецЕсли;
			
			текКонтрактВЭД = СтрокаТЧ.КонтрактВЭД;
			
			Если НЕ ТекКонтрактВЭД.РамочныйКонтракт Тогда
				СтрокаТЧ.СрокВозвратаАванса = текДатаРасчетногоДокумента + (текКонтрактВЭД.КоличествоДнейДляВозвратаАвансаПоИмпортномуКонтракту) * 86400;
			Иначе 				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РЭЙ_ДопСоглашения.Договор,
				|	РЭЙ_ДопСоглашения.ДопСоглашение,
				|	РЭЙ_ДопСоглашения.КоличествоДнейДляВозвратаАвансаПоИмпортномуКонтракту,
				|	РЭЙ_ДопСоглашения.ДатаОкончанияКонтракта
				|ИЗ
				|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
				|ГДЕ
				|	РЭЙ_ДопСоглашения.Договор = &КонтрактВЭД
				|	И РЭЙ_ДопСоглашения.ДопСоглашение = &ДопСоглашение";
				
				Запрос.УстановитьПараметр("КонтрактВЭД", текКонтрактВЭД);
				Запрос.УстановитьПараметр("ДопСоглашение", СтрокаТЧ.ДопСоглашение);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					СтрокаТЧ.СрокВозвратаАванса =  текДатаРасчетногоДокумента + (Выборка.КоличествоДнейДляВозвратаАвансаПоИмпортномуКонтракту) * 86400;						
				Иначе 	
					СтрокаТЧ.СрокВозвратаАванса = Дата(1,1,1); 
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТЧ.СрокВозвратаАванса = Дата(1,1,1); 
		КонецЕсли;
	Иначе
		СтрокаТЧ.СрокВозвратаАванса = Дата(1,1,1); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвансыВСтроке(СтрокаТЧ)
	МетаданныеРасчетногоДокумента = СтрокаТЧ.РасчетныйДокумент.Метаданные();
	ЗачетАвансовИзДокумента = Ложь;
	текстСпособыЗачетаАвансов = "";
	Если МетаданныеРасчетногоДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		Если МетаданныеРасчетногоДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа").Реквизиты.Найти("СпособПогашенияЗадолженности") <> Неопределено Тогда
			ЗачетАвансовИзДокумента = Истина;
			текстСпособыЗачетаАвансов = "СпособыПогашенияЗадолженности";
		КонецЕсли;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СПД.Ссылка КАК Справка,
	|	СПД.Документ КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА СПД.ВалютаДокумента = СПД.Ссылка.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА СПД.СуммаВВалютеДокумента
	|		ИНАЧЕ СПД.СуммаВВалютеКонтракта
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ АвансовыеСПД
	|ИЗ
	|	Документ.РЭЙ_СправкаОПодтверждающихДокументах.ПодтверждающиеДокументы КАК СПД
	|ГДЕ
	|	СПД.Ссылка.Проведен
	|	И СПД.Ссылка В (&СсылкиСПД)
	|	И СПД.Ссылка.КонтрактВЭД = &КонтрактВЭД
	|	И СПД.ПризнакПоставки = ЗНАЧЕНИЕ(Перечисление.РЭЙ_ПризнакиПоставки.ПредоставлениеРезидентомОтсрочкиОплатыНерезиденту)
	|	И СПД.Ссылка.Дата <= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СВО.АвансоваяСправка,
	|	СВО.АвансовыйРасчетныйДокумент,
	|	СУММА(ВЫБОР
	|		КОГДА СВО.ВалютаДокумента = СВО.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА СВО.СуммаВВалютеДокумента
	|		ИНАЧЕ СВО.СуммаВВалютеКонтракта
	|	КОНЕЦ) КАК Сумма
	|ПОМЕСТИТЬ ЗакрытыеСПД
	|ИЗ
	|	Документ.РЭЙ_СправкаОВалютныхОперациях.ВалютныеОперации КАК СВО
	|ГДЕ
	|	СВО.Ссылка.Проведен
	|	И СВО.Ссылка В (&СсылкиСВО)
	|	И СВО.КонтрактВЭД = &КонтрактВЭД
	|	И СВО.АвансоваяСправка <> ЗНАЧЕНИЕ(Документ.РЭЙ_СправкаОПодтверждающихДокументах.ПустаяСсылка)
	|	И СВО.Ссылка.Дата <= &Период
	|	И СВО.Ссылка <> &СсылкаСВО
	|
	|СГРУППИРОВАТЬ ПО
	|	СВО.АвансоваяСправка,
	|	СВО.АвансовыйРасчетныйДокумент,
	|	СВО.ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТекущегоДокумента.АвансоваяСправка,
	|	ДанныеТекущегоДокумента.АвансовыйРасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА ДанныеТекущегоДокумента.ВалютаДокумента = &ВалютаКонтракта
	|			ТОГДА ДанныеТекущегоДокумента.СуммаВВалютеДокумента
	|		ИНАЧЕ ДанныеТекущегоДокумента.СуммаВВалютеКонтракта
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ПредварительныеДанныеТекущегоДокумента
	|ИЗ
	|	&ДанныеТекущегоДокумента КАК ДанныеТекущегоДокумента
	|ГДЕ
	|	ДанныеТекущегоДокумента.АвансоваяСправка <> ЗНАЧЕНИЕ(Документ.РЭЙ_СправкаОПодтверждающихДокументах.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныеДанныеТекущегоДокумента.АвансоваяСправка,
	|	ПредварительныеДанныеТекущегоДокумента.АвансовыйРасчетныйДокумент,
	|	СУММА(ПредварительныеДанныеТекущегоДокумента.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ДанныеТекущегоДокумента
	|ИЗ
	|	ПредварительныеДанныеТекущегоДокумента КАК ПредварительныеДанныеТекущегоДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныеДанныеТекущегоДокумента.АвансоваяСправка,
	|	ПредварительныеДанныеТекущегоДокумента.АвансовыйРасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыеСПД.Справка КАК Справка,
	|	АвансовыеСПД.Сумма - ЕСТЬNULL(ЗакрытыеСПД.Сумма, 0) - ЕСТЬNULL(ДанныеТекущегоДокумента.Сумма, 0) КАК Сумма,
	|	АвансовыеСПД.РасчетныйДокумент
	|ПОМЕСТИТЬ ДоступныеАвансы
	|ИЗ
	|	АвансовыеСПД КАК АвансовыеСПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗакрытыеСПД КАК ЗакрытыеСПД
	|		ПО АвансовыеСПД.Справка = ЗакрытыеСПД.АвансоваяСправка
	|			И АвансовыеСПД.РасчетныйДокумент = ЗакрытыеСПД.АвансовыйРасчетныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТекущегоДокумента КАК ДанныеТекущегоДокумента
	|		ПО АвансовыеСПД.Справка = ДанныеТекущегоДокумента.АвансоваяСправка
	|			И АвансовыеСПД.РасчетныйДокумент = ДанныеТекущегоДокумента.АвансовыйРасчетныйДокумент
	|ГДЕ
	|	АвансовыеСПД.Сумма - ЕСТЬNULL(ЗакрытыеСПД.Сумма, 0) - ЕСТЬNULL(ДанныеТекущегоДокумента.Сумма, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеАвансы.Справка КАК Справка,
	|	ДоступныеАвансы.Сумма,
	|	ДоступныеАвансы.РасчетныйДокумент,
	|	ДоступныеАвансы.Справка.Дата КАК Дата
	|ИЗ
	|	ДоступныеАвансы КАК ДоступныеАвансы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	
	Запрос.УстановитьПараметр("КонтрактВЭД", СтрокаТЧ.КонтрактВЭД);
	Запрос.УстановитьПараметр("ВалютаКонтракта", СтрокаТЧ.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("СсылкаСВО", Объект.Ссылка);
	ДанныеТекущегоДокумента = Объект.ВалютныеОперации.Выгрузить(, "АвансоваяСправка, АвансовыйРасчетныйДокумент, ВалютаДокумента, СуммаВВалютеДокумента, СуммаВВалютеКонтракта");
	Запрос.УстановитьПараметр("ДанныеТекущегоДокумента", ДанныеТекущегоДокумента);
	Запрос.УстановитьПараметр("Период", КонецДня(СтрокаТЧ.РасчетныйДокумент.Дата));
	Запрос.УстановитьПараметр("СсылкиСВО", РЭЙ_СлужебныйСервер.ПолучитьСсылкиНаАктуальныеСВО(, КонецДня(СтрокаТЧ.РасчетныйДокумент.Дата)));
	Запрос.УстановитьПараметр("СсылкиСПД", РЭЙ_СлужебныйСервер.ПолучитьСсылкиНаАктуальныеСПД(, КонецДня(СтрокаТЧ.РасчетныйДокумент.Дата)));
	
	ТаблицаАвансов = Запрос.Выполнить().Выгрузить();
	
	Если ЗачетАвансовИзДокумента Тогда
		//По документу
		СтрокиПоДокументу = СтрокаТЧ.РасчетныйДокумент.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("СпособПогашенияЗадолженности", Перечисления[текстСпособыЗачетаАвансов].ПоДокументу));
		Для Каждого СтрокаПоДокументу Из СтрокиПоДокументу Цикл
			СтрокиАвансов = ТаблицаАвансов.НайтиСтроки(Новый Структура("РасчетныйДокумент", СтрокаПоДокументу.Сделка));
			Если СтрокиАвансов.Количество() = 1 Тогда
				СтруктураАванса = Новый Структура("Справка, РасчетныйДокумент, Сумма");
				СтруктураАванса.Вставить("Справка", СтрокиАвансов[0].Справка);
				СтруктураАванса.Вставить("РасчетныйДокумент", СтрокиАвансов[0].РасчетныйДокумент);
				СтруктураАванса.Вставить("Сумма", СтрокаПоДокументу.СуммаПлатежа);
				
				СтрокаТЧ = УстановитьАвансВСтроке(СтрокаТЧ, СтруктураАванса);
				Если СтрокаТЧ = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ТаблицаАвансов.Удалить(СтрокиАвансов[0]);
			Иначе
				Сообщить("Ошибка между данными валютного контроля и данными документа " + РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.РасчетныйДокумент) + ", авансовый документ " + РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаПоДокументу.Сделка));
			КонецЕсли;
		КонецЦикла;
		
		// Не погашать
		СтрокиНеПогашать = СтрокаТЧ.РасчетныйДокумент.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("СпособПогашенияЗадолженности", Перечисления[текстСпособыЗачетаАвансов].НеПогашать));
		Если СтрокиНеПогашать.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Автоматически
	Для Каждого СтрокаАванса Из ТаблицаАвансов Цикл
		СтруктураАванса = Новый Структура("Справка, РасчетныйДокумент, Сумма");
		ЗаполнитьЗначенияСвойств(СтруктураАванса, СтрокаАванса);
		
		СтрокаТЧ = УстановитьАвансВСтроке(СтрокаТЧ, СтруктураАванса);
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция УстановитьАвансВСтроке(СтрокаТЧ, СтруктураАванса)
	СтрокаТЧ.АвансоваяСправка = СтруктураАванса.Справка;
	СтрокаТЧ.АвансовыйРасчетныйДокумент = СтруктураАванса.РасчетныйДокумент;
	СтрокаТЧ.АвансоваяСправкаПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.АвансоваяСправка);
	СтрокаТЧ.АвансовыйРасчетныйДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.АвансовыйРасчетныйДокумент);
	текСуммаВВалютеКонтракта = ?(СтрокаТЧ.СуммаВВалютеКонтракта = 0, СтрокаТЧ.СуммаВВалютеДокумента, СтрокаТЧ.СуммаВВалютеКонтракта);
	Если текСуммаВВалютеКонтракта <= СтруктураАванса.Сумма Тогда
		Возврат Неопределено;
	Иначе
		Если СтрокаТЧ.ВалютаДокумента = СтрокаТЧ.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			РазницаВВалютеДокумента = СтрокаТЧ.СуммаВВалютеДокумента - СтруктураАванса.Сумма;
			СтрокаТЧ.СуммаВВалютеДокумента = СтруктураАванса.Сумма;
			РазницаВВалютеКонтракта = 0;
		Иначе
			РазницаВВалютеКонтракта = СтрокаТЧ.СуммаВВалютеКонтракта - СтруктураАванса.Сумма;
			СуммаАвансаВВалютеДокумента = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(СтруктураАванса.Сумма, Объект.Дата, СтрокаТЧ.ВалютаКонтракта, СтрокаТЧ.ВалютаДокумента);
			РазницаВВалютеДокумента = СтрокаТЧ.СуммаВВалютеДокумента - СуммаАвансаВВалютеДокумента;
			СтрокаТЧ.СуммаВВалютеКонтракта = СтруктураАванса.Сумма;
			СтрокаТЧ.СуммаВВалютеДокумента = СуммаАвансаВВалютеДокумента;
		КонецЕсли;
			
		НоваяСтрока = Объект.ВалютныеОперации.Вставить(СтрокаТЧ.НомерСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,, "АвансоваяСправка, АвансовыйРасчетныйДокумент");
		НоваяСтрока.СуммаВВалютеДокумента = РазницаВВалютеДокумента;
		НоваяСтрока.СуммаВВалютеКонтракта = РазницаВВалютеКонтракта;
		
		Возврат НоваяСтрока;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьНомераСтрокДляПечати()
	Если Не Объект.РучноеЗаполнение Тогда
		ИмяТЧ = "ВалютныеОперации";
	Иначе
		ИмяТЧ = "ВалютныеОперацииРучные";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.РасчетныйДокумент,
	|	ТЧ.ВидВалютнойОперации,
	|	ТЧ.КонтрактВЭД,
	|	ТЧ.ПаспортСделки,
	|	ТЧ.ОжидаемыйСрок,
	|	ТЧ.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.РасчетныйДокумент,
	|	ТЧ.ВидВалютнойОперации,
	|	ТЧ.ОжидаемыйСрок,
	|	МИНИМУМ(ТЧ.НомерСтроки) КАК НомерСтроки,
	|	ТЧ.КонтрактВЭД,
	|	ТЧ.ПаспортСделки
	|ПОМЕСТИТЬ СгруппированныеДанные
	|ИЗ
	|	ТЧ КАК ТЧ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧ.РасчетныйДокумент,
	|	ТЧ.ВидВалютнойОперации,
	|	ТЧ.ОжидаемыйСрок,
	|	ТЧ.КонтрактВЭД,
	|	ТЧ.ПаспортСделки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СгруппированныеДанные.НомерСтроки КАК ИтоговыйНомерСтроки,
	|	ТЧ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	СгруппированныеДанные КАК СгруппированныеДанные
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТЧ КАК ТЧ
	|		ПО СгруппированныеДанные.РасчетныйДокумент = ТЧ.РасчетныйДокумент
	|			И СгруппированныеДанные.ВидВалютнойОперации = ТЧ.ВидВалютнойОперации
	|			И СгруппированныеДанные.ОжидаемыйСрок = ТЧ.ОжидаемыйСрок
	|			И СгруппированныеДанные.КонтрактВЭД = ТЧ.КонтрактВЭД
	|			И СгруппированныеДанные.ПаспортСделки = ТЧ.ПаспортСделки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИтоговыйНомерСтроки,
	|	НомерСтроки
	|ИТОГИ ПО
	|	ИтоговыйНомерСтроки";
	
	Запрос.УстановитьПараметр("ТЧ",Объект[ИмяТЧ].Выгрузить());
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерСтрокиДляПечати = 0;
	
	Пока ВыборкаИтоги.Следующий() Цикл
		НомерСтрокиДляПечати = НомерСтрокиДляПечати + 1;
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = Объект[ИмяТЧ][Выборка.НомерСтроки - 1];
			СтрокаТЧ.НомерСтрокиДляПечати = НомерСтрокиДляПечати;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьВопросОбОчисткеТабличнойЧасти(ОписаниеОповещения)
	ТекстВопроса = 
	"Табличная часть будет очищена.
	|Продолжить?";
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да); 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыТабличныхЧастей()
	// Представления полей
	Для Каждого СтрокаТЧ Из Объект.ВалютныеОперации Цикл
		СтрокаТЧ.ПаспортСделкиПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.ПаспортСделки);
		СтрокаТЧ.КонтрактВЭДНеЯвляетсяОбъектомВалютногоКонтроля = СтрокаТЧ.КонтрактВЭД.НеЯвляетсяОбъектомВалютногоКонтроля;		
		СтрокаТЧ.РамочныйКонтракт = СтрокаТЧ.КонтрактВЭД.РамочныйКонтракт;		
		СтрокаТЧ.ФлагДоступностиАвансовыхСправок = СтрокаТЧ.КонтрактВЭД.Экспорт;
		СтрокаТЧ.РасчетныйДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.РасчетныйДокумент);
		СтрокаТЧ.НеобходимоУказаниеОжидаемогоСрока = СтрокаТЧ.ВидВалютнойОперации.ОжидаемыйСрок;
		Установить_НеобходимоУказаниеСрокаВозвратаАванса(СтрокаТЧ);
		СтрокаТЧ.РасчетыВУсловныхЕдиницах = РЭЙ_СлужебныйСервер.ПолучитьЗначениеФлагаРасчетыВУсловныхЕдиницах(СтрокаТЧ.КонтрактВЭД);
		
		СтрокаТЧ.АвансоваяСправкаПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.АвансоваяСправка);
		СтрокаТЧ.АвансовыйРасчетныйДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.АвансовыйРасчетныйДокумент);
	КонецЦикла;	
	
	Для Каждого СтрокаТЧ Из Объект.ВалютныеОперацииРучные Цикл
		СтрокаТЧ.ПаспортСделкиПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.ПаспортСделки);
		СтрокаТЧ.РасчетныйДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.РасчетныйДокумент);
		СтрокаТЧ.НеобходимоУказаниеОжидаемогоСрока = СтрокаТЧ.ВидВалютнойОперации.ОжидаемыйСрок;
		СтрокаТЧ.РамочныйКонтракт = СтрокаТЧ.КонтрактВЭД.РамочныйКонтракт;		
		Установить_НеобходимоУказаниеСрокаВозвратаАванса(СтрокаТЧ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокНаправленияПлатежа(СписокВыбора)
	СписокВыбора.Добавить(1, "1 - Зачисление на счет");
	СписокВыбора.Добавить(2, "2 - Списание со счета");
	СписокВыбора.Добавить(7, "7 - Зачисление на счет фактора");
	СписокВыбора.Добавить(8, "8 - Зачисление на счет другого лица или резидента, который не ставит на учет контракт");
	СписокВыбора.Добавить(9, "9 - Списание со счета третьего/другого лица или резидента, который не ставит на учет контракт");
	СписокВыбора.Добавить(0, "0 - Перевод при исполнении аккредитива");
КонецПроцедуры	

&НаКлиенте
Процедура ТабличныеЧасти_ДопСоглашениеНачалоВыбора(ИмяТЧ, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТЧ = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ссылка", СформироватьМассивДляВыбораДопСоглашения(СтрокаТЧ.КонтрактВЭД));
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", СтрокаТЧ.ДопСоглашение);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаСервере
Процедура ТабличныеЧасти_КорректировкаПриИзмененииНаСервере(ИмяТЧ, ИдентификаторСтроки)
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокиТЧ = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("НомерСтрокиДляПечати", ТекущиеДанные.НомерСтрокиДляПечати));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		СтрокаТЧ.Корректировка = ТекущиеДанные.Корректировка;
		
		Если СтрокаТЧ.Корректировка = Ложь Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Объект.Основание[ИмяТЧ][Объект[ИмяТЧ].Индекс(СтрокаТЧ)]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеЧасти_РасчетныйДокументНачалоВыбора(ИмяТЧ, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ПоказатьПредупреждение(, "Сначала необходимо выбрать банковский счет!");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ = Объект[ИмяТЧ].НайтиПоИдентификатору(Элементы[ИмяТЧ].ТекущаяСтрока);
	
	МассивОграничениеТипа = Новый Массив;
	СтрокиВидовРД = ТаблицаВидовРасчетныхДокументов.НайтиСтроки(Новый Структура("Направление", СтрокаТЧ.НаправлениеПлатежа));
	Если СтрокиВидовРД.Количество() > 0 Тогда
		Для Каждого СтрокаВидовРД Из СтрокиВидовРД Цикл
			МассивОграничениеТипа.Добавить(СтрокаВидовРД.Тип);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаВидовРД Из ТаблицаВидовРасчетныхДокументов Цикл
			МассивОграничениеТипа.Добавить(СтрокаВидовРД.Тип);
		КонецЦикла;
	КонецЕсли;
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивОграничениеТипа);
	
	Если СтрокаТЧ.РасчетныйДокумент = Неопределено Тогда
		СтрокаТЧ.РасчетныйДокумент = Элемент.ОграничениеТипа.ПривестиЗначение(СтрокаТЧ.РасчетныйДокумент);
	КонецЕсли;
	
	Если СтрокаТЧ.РасчетныйДокумент <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ИмяФормыВыбора 	= "Документ." + РЭЙ_СлужебныйСервер.ПолучитьВидДокумента(СтрокаТЧ.РасчетныйДокумент) + ".ФормаВыбора";
		
		ПараметрыОткрытияФормы	= Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ТекущаяСтрока", СтрокаТЧ.РасчетныйДокумент);
		
		ФормаСписка = ПолучитьФорму(ИмяФормыВыбора, ПараметрыОткрытияФормы, Элемент);
		ФормаСписка.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		РЭЙ_СлужебныйКлиент.ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, "Организация", ВидСравненияКомпоновкиДанных.Равно, Объект.Организация);
		РЭЙ_СлужебныйКлиент.ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, "Дата", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Объект.ДатаНач);
		РЭЙ_СлужебныйКлиент.ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, "Дата", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(Объект.ДатаКон));
		РЭЙ_СлужебныйКлиент.ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, "БанковскийСчет", ВидСравненияКомпоновкиДанных.Равно, Объект.БанковскийСчет);

		ФормаСписка.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Установить_НеобходимоУказаниеСрокаВозвратаАванса(СтрокаТЧ)
	Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидВалютнойОперации) Или Не СтрокаТЧ.ВидВалютнойОперации.СрокВозвратаАванса Тогда
		СтрокаТЧ.НеобходимоУказаниеСрокаВозвратаАванса = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.КонтрактВЭД) Или СтрокаТЧ.КонтрактВЭД.ОтсрочкаПлатежаПредоплаты <> Перечисления.РЭЙ_ОтсрочкаПлатежаПредоплаты.КоличествоКалендарныхДнейПоКонтракту Тогда
		СтрокаТЧ.НеобходимоУказаниеСрокаВозвратаАванса = Ложь;
	Иначе
		СтрокаТЧ.НеобходимоУказаниеСрокаВозвратаАванса = Истина;
	КонецЕсли;
КонецПроцедуры
	
&НаСервере
Функция ПроверитьКорректностьРасчетногоДокумента(текРасчетныйДокумент) 
	текКонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(текРасчетныйДокумент);
	
	Если Не ЗначениеЗаполнено(текКонтрактВЭД) Тогда
		Сообщить("По договору, указанному в расчетном документе, не зарегистрирован контракт ВЭД.");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция СформироватьДанныеДокументаДляВыбораАвансовойСправки()
	ДанныеТекущегоДокумента = Объект.ВалютныеОперации.Выгрузить(, "АвансоваяСправка, АвансовыйРасчетныйДокумент, ВалютаДокумента, СуммаВВалютеДокумента, СуммаВВалютеКонтракта");
	Возврат ПоместитьВоВременноеХранилище(ДанныеТекущегоДокумента, Новый УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьМассивДляВыбораДопСоглашения(текКонтрактВЭД)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РЭЙ_ДопСоглашения.ДопСоглашение
	|ИЗ
	|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
	|ГДЕ
	|	РЭЙ_ДопСоглашения.Договор = &КонтрактВЭД";
	Запрос.УстановитьПараметр("КонтрактВЭД", текКонтрактВЭД);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДопСоглашение");
КонецФункции

&НаСервере
Функция СформироватьМассивДляВыбораКонтрактаВЭД(ТекущийРасчетныйДокумент)
	МассивДоговоров = Новый Массив;
	ИмяТЧ = "РасшифровкаПлатежа";
	Если ТекущийРасчетныйДокумент.Метаданные().ТабличныеЧасти.Найти(ИмяТЧ) <> Неопределено Тогда
		МассивДоговоров = ТекущийРасчетныйДокумент[ИмяТЧ].ВыгрузитьКолонку("ДоговорКонтрагента");
	Иначе
		МассивДоговоров.Добавить(ТекущийРасчетныйДокумент.ДоговорКонтрагента);
	КонецЕсли;
	
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РЭЙ_КонтрактыВЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД КАК РЭЙ_КонтрактыВЭД
	|ГДЕ
	|	РЭЙ_КонтрактыВЭД.ДоговорКонтрагента В(&МассивДоговоров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РЭЙ_ДопСоглашения.Договор
	|ИЗ
	|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
	|ГДЕ
	|	РЭЙ_ДопСоглашения.ДопСоглашение В(&МассивДоговоров)";
	
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервере
Функция СформироватьМассивДляВыбораКонтрактаВЭД_Ручные()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РЭЙ_КонтрактыВЭДБанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.РЭЙ_КонтрактыВЭД.БанковскиеСчета КАК РЭЙ_КонтрактыВЭДБанковскиеСчета
	|ГДЕ
	|	РЭЙ_КонтрактыВЭДБанковскиеСчета.Ссылка.Организация = &Организация
	|	И РЭЙ_КонтрактыВЭДБанковскиеСчета.БанковскийСчет = &БанковскийСчет";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
